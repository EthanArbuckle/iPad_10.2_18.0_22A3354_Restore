void webrtc::FlexfecReceiver::AddReceivedPacket(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  __int128 v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  __int128 v71;
  _OWORD v72[2];
  _BYTE v73[22];
  void *__p;
  void *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  char v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  v7 = v6;
  *(_WORD *)(v6 + 4) = *(_WORD *)(a2 + 4);
  v8 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)v6 = v8;
  *(_OWORD *)(v6 + 10) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(a2 + 46);
  *(_QWORD *)(v6 + 32) = 0;
  if (v8 == *(_DWORD *)a1)
  {
    if (*(_QWORD *)(a2 + 24) <= 0x13uLL)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_receiver.cc");
LABEL_41:
      *a3 = 0;
      v50 = *(_QWORD *)(v7 + 32);
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
      JUMPOUT(0x20BD0ADECLL);
    }
    *(_BYTE *)(v6 + 8) = 1;
    ++*(_QWORD *)(a1 + 80);
    v51 = operator new();
    *(_QWORD *)v51 = &off_24C0B43E8;
    *(_QWORD *)(v51 + 8) = 0;
    *(_QWORD *)(v51 + 16) = 0;
    *(_QWORD *)(v51 + 24) = 0;
    *(_DWORD *)(v51 + 32) = 0;
    webrtc::ForwardErrorCorrection::Packet::AddRef((webrtc::ForwardErrorCorrection::Packet *)v51);
    v52 = *(_QWORD *)(v7 + 32);
    *(_QWORD *)(v7 + 32) = v51;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
    v53 = *(_QWORD *)(a2 + 88);
    if (v53)
    {
      v54 = (unsigned int *)(v53 + 24);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      v56 = *(_QWORD *)(a2 + 96);
      v57 = *(_QWORD *)(a2 + 16);
      v58 = *(_QWORD *)(a2 + 24);
      do
        v59 = __ldxr(v54);
      while (__stxr(v59 + 1, v54));
      v60 = v56 + v57;
      v61 = *(_QWORD **)(v7 + 32);
      v62 = v61[1];
      v61[1] = v53;
      if (!v62)
      {
LABEL_60:
        v61[2] = v60;
        v61[3] = v58;
        if (v53)
        {
          v67 = (unsigned int *)(v53 + 24);
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            v70 = *(_QWORD *)(v53 + 16);
            *(_QWORD *)(v53 + 16) = 0;
            if (v70)
              MEMORY[0x20BD0ADD4](v70, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v53, 0x1010C40EE34DA14);
          }
        }
        goto LABEL_67;
      }
    }
    else
    {
      v58 = *(_QWORD *)(a2 + 24);
      v60 = *(_QWORD *)(a2 + 96) + *(_QWORD *)(a2 + 16);
      v61 = *(_QWORD **)(v7 + 32);
      v62 = v61[1];
      v61[1] = 0;
      if (!v62)
        goto LABEL_60;
    }
    v63 = (unsigned int *)(v62 + 24);
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
    {
      v66 = *(_QWORD *)(v62 + 16);
      *(_QWORD *)(v62 + 16) = 0;
      if (v66)
        MEMORY[0x20BD0ADD4](v66, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v62, 0x1010C40EE34DA14);
    }
    goto LABEL_60;
  }
  if (v8 != *(_DWORD *)(a1 + 4))
    goto LABEL_41;
  *(_BYTE *)(v6 + 8) = 0;
  v16 = operator new();
  *(_QWORD *)v16 = &off_24C0B43E8;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_DWORD *)(v16 + 32) = 0;
  webrtc::ForwardErrorCorrection::Packet::AddRef((webrtc::ForwardErrorCorrection::Packet *)v16);
  v17 = *(_QWORD *)(v7 + 32);
  *(_QWORD *)(v7 + 32) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  v18 = *(_OWORD *)(a2 + 16);
  v72[0] = *(_OWORD *)a2;
  v72[1] = v18;
  *(_OWORD *)v73 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)&v73[14] = *(_QWORD *)(a2 + 46);
  v75 = 0;
  v76 = 0;
  __p = 0;
  v20 = *(_BYTE **)(a2 + 56);
  v19 = *(_BYTE **)(a2 + 64);
  v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0)
      abort();
    v22 = (char *)operator new(v19 - v20);
    v23 = &v22[4 * (v21 >> 2)];
    __p = v22;
    v76 = v23;
    memcpy(v22, v20, v21);
    v75 = v23;
  }
  v24 = *(_QWORD *)(a2 + 88);
  v77 = *(_QWORD *)(a2 + 80);
  v78 = v24;
  if (v24)
  {
    v25 = (unsigned int *)(v24 + 24);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(_OWORD *)(a2 + 112);
  v79 = *(_OWORD *)(a2 + 96);
  v80 = v27;
  v81 = *(_BYTE *)(a2 + 128);
  v28 = *(_QWORD *)(a2 + 136);
  v82 = v28;
  if (v28)
  {
    v29 = (unsigned int *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  webrtc::RtpPacket::ZeroMutableExtensions((webrtc::RtpPacket *)v72);
  v31 = v78;
  if (v78)
  {
    v32 = (unsigned int *)(v78 + 24);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = v79;
  v35 = *(_QWORD *)(v7 + 32);
  v36 = *(_QWORD *)(v35 + 8);
  *(_QWORD *)(v35 + 8) = v31;
  if (v36)
  {
    v37 = (unsigned int *)(v36 + 24);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      v71 = v34;
      v40 = *(_QWORD *)(v36 + 16);
      *(_QWORD *)(v36 + 16) = 0;
      if (v40)
        MEMORY[0x20BD0ADD4](v40, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v36, 0x1010C40EE34DA14);
      v34 = v71;
    }
  }
  *(_OWORD *)(v35 + 16) = v34;
  v41 = v82;
  if (v82)
  {
    v42 = (unsigned int *)(v82 + 8);
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v45 = v78;
  if (v78)
  {
    v46 = (unsigned int *)(v78 + 24);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      v49 = *(_QWORD *)(v45 + 16);
      *(_QWORD *)(v45 + 16) = 0;
      if (v49)
        MEMORY[0x20BD0ADD4](v49, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v45, 0x1010C40EE34DA14);
    }
  }
  if (__p)
  {
    v75 = __p;
    operator delete(__p);
  }
LABEL_67:
  ++*(_QWORD *)(a1 + 64);
  *a3 = v7;
}

void webrtc::FlexfecReceiver::ProcessReceivedPacket(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  _QWORD v48[3];
  _QWORD v49[4];
  uint64_t v50;
  __int128 v51;
  _BYTE v52[4];
  unsigned int v53;
  void *v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 16;
  webrtc::ForwardErrorCorrection::DecodeFec(*(uint64_t **)(a1 + 8), a2, (uint64_t *)(a1 + 16));
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (v11 != v5)
    {
      while (1)
      {
        v12 = *(_QWORD *)(v11 + 16);
        if (!v12)
        {
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_receiver.cc", 161, "recovered_packet", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v6, v7, v8, v9, v45);
LABEL_60:
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_receiver.cc", 169, "recovered_packet->pkt->data.size() >= kRtpHeaderSize", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v6, v7, v8, v9, v13);
        }
        if (!*(_BYTE *)(v12 + 9))
          break;
LABEL_4:
        v11 = *(_QWORD *)(v11 + 8);
        if (v11 == v5)
          return;
      }
      ++*(_QWORD *)(a1 + 88);
      *(_BYTE *)(v12 + 9) = 1;
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 24);
      if (v13 <= 0xB)
        goto LABEL_60;
      webrtc::RtpPacket::RtpPacket((webrtc::RtpPacket *)v52, (const webrtc::RtpHeaderExtensionMap *)(a2 + 10), (uint64_t *)0x5DC);
      v57 = 0x8000000000000000;
      v60 = 0;
      v58 = 0;
      v59 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 16);
      v15 = *(_QWORD *)(v14 + 8);
      v50 = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v15 + 24);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v51 = *(_OWORD *)(v14 + 16);
      v18 = webrtc::RtpPacket::Parse((uint64_t)v52, &v50);
      v19 = v50;
      if (v50)
      {
        v20 = (unsigned int *)(v50 + 24);
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v23 = *(_QWORD *)(v19 + 16);
          *(_QWORD *)(v19 + 16) = 0;
          if (v23)
            MEMORY[0x20BD0ADD4](v23, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v19, 0x1010C40EE34DA14);
        }
      }
      if (v18)
      {
        v59 = 1;
        HIDWORD(v58) = 90000;
        (***(void (****)(_QWORD, _BYTE *))(a1 + 40))(*(_QWORD *)(a1 + 40), v52);
        v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
        v28 = v24;
        v29 = *(_QWORD *)(a1 + 56);
        if (v24 == 0x7FFFFFFFFFFFFFFFLL || v29 == 0x8000000000000000)
        {
          v32 = 1;
        }
        else
        {
          v32 = v24 != 0x8000000000000000 && v29 != 0x7FFFFFFFFFFFFFFFLL && v24 - v29 > 10000000;
            goto LABEL_44;
        }
        if (v33 || (rtc::LogMessage::streams_empty_ & 1) == 0)
        {
          v3 = v3 & 0xFFFFFFFF00000000 | v32 | 0x5E0u;
          v48[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp"
                   "_rtcp/source/flexfec_receiver.cc";
          v48[1] = v3;
          v48[2] = &v47;
          v49[0] = "Recovered media packet with SSRC: ";
          v49[1] = v48;
          v2 = v2 & 0xFFFFFFFF00000000 | v53;
          v49[2] = v2;
          v49[3] = v49;
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v25, v26, v27, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_receiver.cc");
        }
        if (v32)
          *(_QWORD *)(a1 + 56) = v28;
      }
LABEL_44:
      v36 = v60;
      if (v60)
      {
        v37 = (unsigned int *)(v60 + 8);
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      v40 = v56;
      if (v56)
      {
        v41 = (unsigned int *)(v56 + 24);
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          v44 = *(_QWORD *)(v40 + 16);
          *(_QWORD *)(v40 + 16) = 0;
          if (v44)
            MEMORY[0x20BD0ADD4](v44, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v40, 0x1010C40EE34DA14);
        }
      }
      if (v54)
      {
        v55 = v54;
        operator delete(v54);
      }
      goto LABEL_4;
    }
  }
}

uint64_t webrtc::FlexfecSender::FlexfecSender(uint64_t a1, int a2, int a3, int a4, char *a5, size_t a6, _QWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12)
{
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD **v36;
  _QWORD **v37;
  int v38;
  webrtc::RtpHeaderExtensionMap *v39;
  int v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  int *v94;
  int v95;
  int v97;
  int v98;
  uint64_t v99;
  pthread_mutexattr_t v101;
  char v102;
  uint64_t v103;

  v19 = a11;
  v103 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C0B4388;
  *(_QWORD *)(a1 + 8) = a12;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a12 + 16))(a12);
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 24) = 0x8000000000000000;
  *(_DWORD *)(a1 + 32) = a2;
  if (a11)
  {
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a11 + 4);
    *(_DWORD *)(a1 + 40) = a3;
    *(_DWORD *)(a1 + 44) = a4;
    if (a6 < 0x7FFFFFFFFFFFFFF8)
      goto LABEL_3;
LABEL_15:
    abort();
  }
  v26 = v20 ^ (v20 >> 12) ^ ((v20 ^ (v20 >> 12)) << 25);
  v27 = v26 ^ (v26 >> 27);
  *(_QWORD *)(a1 + 16) = v27;
  *(_DWORD *)(a1 + 36) = 1332534557 * v27;
  *(_DWORD *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 44) = a4;
  if (a6 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_15;
LABEL_3:
  if (a6 > 0x16)
  {
    v23 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v23 = a6 | 7;
    v24 = v23 + 1;
    v21 = (char *)operator new(v23 + 1);
    *(_QWORD *)(a1 + 56) = a6;
    *(_QWORD *)(a1 + 64) = v24 | 0x8000000000000000;
    *(_QWORD *)(a1 + 48) = v21;
    v22 = &v21[a6];
    if (v21 > a5)
      goto LABEL_10;
  }
  else
  {
    v21 = (char *)(a1 + 48);
    *(_BYTE *)(a1 + 71) = a6;
    v22 = (char *)(a1 + 48 + a6);
    if (a1 + 48 > (unint64_t)a5)
      goto LABEL_10;
  }
  if (v22 > a5)
LABEL_118:
    __break(1u);
LABEL_10:
  if (a6)
    memmove(v21, a5, a6);
  *v22 = 0;
  if (a11)
  {
    LOWORD(v25) = *(_WORD *)a11;
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 16) ^ (*(_QWORD *)(a1 + 16) >> 12);
    v29 = v28 ^ (v28 << 25) ^ ((v28 ^ (unint64_t)(v28 << 25)) >> 27);
    *(_QWORD *)(a1 + 16) = v29;
    v25 = ((0x7FFF * (unint64_t)(1332534557 * v29)) >> 32) + 1;
  }
  *(_WORD *)(a1 + 72) = v25;
  v30 = operator new();
  *(_OWORD *)(v30 + 8) = xmmword_208F09F80;
  *(_QWORD *)v30 = &unk_24C0B42C0;
  v31 = operator new();
  *(int64x2_t *)(v31 + 8) = vdupq_n_s64(0x30uLL);
  *(_QWORD *)(v31 + 24) = 32;
  *(_QWORD *)v31 = &unk_24C0B42E8;
  v32 = operator new();
  *(_DWORD *)v32 = a3;
  *(_DWORD *)(v32 + 4) = a4;
  *(_QWORD *)(v32 + 8) = v30;
  *(_QWORD *)(v32 + 16) = v31;
  v33 = (char *)operator new(0x780uLL);
  *(_QWORD *)v33 = &off_24C0B43E8;
  *((_QWORD *)v33 + 1) = 0;
  *((_OWORD *)v33 + 1) = 0u;
  *((_DWORD *)v33 + 8) = 0;
  *((_QWORD *)v33 + 5) = &off_24C0B43E8;
  *((_QWORD *)v33 + 6) = 0;
  *(_OWORD *)(v33 + 56) = 0u;
  *((_DWORD *)v33 + 18) = 0;
  *((_QWORD *)v33 + 10) = &off_24C0B43E8;
  *((_QWORD *)v33 + 11) = 0;
  *((_OWORD *)v33 + 6) = 0u;
  *((_DWORD *)v33 + 28) = 0;
  *((_QWORD *)v33 + 15) = &off_24C0B43E8;
  *((_QWORD *)v33 + 18) = 0;
  *((_DWORD *)v33 + 38) = 0;
  *((_OWORD *)v33 + 8) = 0u;
  *((_QWORD *)v33 + 20) = &off_24C0B43E8;
  *((_QWORD *)v33 + 23) = 0;
  *((_DWORD *)v33 + 48) = 0;
  *(_OWORD *)(v33 + 168) = 0u;
  *((_QWORD *)v33 + 25) = &off_24C0B43E8;
  *((_QWORD *)v33 + 28) = 0;
  *((_DWORD *)v33 + 58) = 0;
  *((_OWORD *)v33 + 13) = 0u;
  *((_QWORD *)v33 + 30) = &off_24C0B43E8;
  *((_QWORD *)v33 + 33) = 0;
  *((_DWORD *)v33 + 68) = 0;
  *(_OWORD *)(v33 + 248) = 0u;
  *((_QWORD *)v33 + 35) = &off_24C0B43E8;
  *((_QWORD *)v33 + 38) = 0;
  *((_DWORD *)v33 + 78) = 0;
  *((_OWORD *)v33 + 18) = 0u;
  *((_QWORD *)v33 + 40) = &off_24C0B43E8;
  *(_OWORD *)(v33 + 328) = 0u;
  *((_DWORD *)v33 + 88) = 0;
  *((_QWORD *)v33 + 43) = 0;
  *((_QWORD *)v33 + 45) = &off_24C0B43E8;
  *((_OWORD *)v33 + 23) = 0u;
  *((_DWORD *)v33 + 98) = 0;
  *((_QWORD *)v33 + 48) = 0;
  *((_QWORD *)v33 + 50) = &off_24C0B43E8;
  *(_OWORD *)(v33 + 408) = 0u;
  *((_DWORD *)v33 + 108) = 0;
  *((_QWORD *)v33 + 53) = 0;
  *((_QWORD *)v33 + 55) = &off_24C0B43E8;
  *((_OWORD *)v33 + 28) = 0u;
  *((_DWORD *)v33 + 118) = 0;
  *((_QWORD *)v33 + 58) = 0;
  *((_QWORD *)v33 + 60) = &off_24C0B43E8;
  *(_OWORD *)(v33 + 488) = 0u;
  *((_DWORD *)v33 + 128) = 0;
  *((_QWORD *)v33 + 63) = 0;
  *((_QWORD *)v33 + 65) = &off_24C0B43E8;
  *((_QWORD *)v33 + 68) = 0;
  *((_DWORD *)v33 + 138) = 0;
  *((_OWORD *)v33 + 33) = 0u;
  *((_QWORD *)v33 + 70) = &off_24C0B43E8;
  *((_DWORD *)v33 + 148) = 0;
  *((_QWORD *)v33 + 73) = 0;
  *(_OWORD *)(v33 + 568) = 0u;
  *((_QWORD *)v33 + 75) = &off_24C0B43E8;
  *((_DWORD *)v33 + 158) = 0;
  *((_QWORD *)v33 + 78) = 0;
  *((_OWORD *)v33 + 38) = 0u;
  *((_QWORD *)v33 + 80) = &off_24C0B43E8;
  *((_DWORD *)v33 + 168) = 0;
  *((_QWORD *)v33 + 83) = 0;
  *(_OWORD *)(v33 + 648) = 0u;
  *((_QWORD *)v33 + 85) = &off_24C0B43E8;
  *((_DWORD *)v33 + 178) = 0;
  *((_QWORD *)v33 + 88) = 0;
  *((_OWORD *)v33 + 43) = 0u;
  *((_QWORD *)v33 + 90) = &off_24C0B43E8;
  *((_DWORD *)v33 + 188) = 0;
  *((_QWORD *)v33 + 93) = 0;
  *(_OWORD *)(v33 + 728) = 0u;
  *((_QWORD *)v33 + 95) = &off_24C0B43E8;
  *((_DWORD *)v33 + 198) = 0;
  *((_QWORD *)v33 + 98) = 0;
  *((_OWORD *)v33 + 48) = 0u;
  *((_QWORD *)v33 + 100) = &off_24C0B43E8;
  *((_DWORD *)v33 + 208) = 0;
  *((_QWORD *)v33 + 103) = 0;
  *(_OWORD *)(v33 + 808) = 0u;
  *((_QWORD *)v33 + 105) = &off_24C0B43E8;
  *((_DWORD *)v33 + 218) = 0;
  *((_QWORD *)v33 + 108) = 0;
  *((_OWORD *)v33 + 53) = 0u;
  *((_QWORD *)v33 + 110) = &off_24C0B43E8;
  *((_DWORD *)v33 + 228) = 0;
  *((_QWORD *)v33 + 113) = 0;
  *(_OWORD *)(v33 + 888) = 0u;
  *((_QWORD *)v33 + 115) = &off_24C0B43E8;
  *((_DWORD *)v33 + 238) = 0;
  *((_QWORD *)v33 + 118) = 0;
  *((_OWORD *)v33 + 58) = 0u;
  *((_QWORD *)v33 + 120) = &off_24C0B43E8;
  *((_DWORD *)v33 + 248) = 0;
  *((_QWORD *)v33 + 123) = 0;
  *(_OWORD *)(v33 + 968) = 0u;
  *((_QWORD *)v33 + 125) = &off_24C0B43E8;
  *((_DWORD *)v33 + 258) = 0;
  *((_QWORD *)v33 + 128) = 0;
  *((_OWORD *)v33 + 63) = 0u;
  *((_QWORD *)v33 + 130) = &off_24C0B43E8;
  *((_DWORD *)v33 + 268) = 0;
  *((_QWORD *)v33 + 133) = 0;
  *(_OWORD *)(v33 + 1048) = 0u;
  *((_QWORD *)v33 + 135) = &off_24C0B43E8;
  *((_DWORD *)v33 + 278) = 0;
  *((_QWORD *)v33 + 138) = 0;
  *((_OWORD *)v33 + 68) = 0u;
  *((_QWORD *)v33 + 140) = &off_24C0B43E8;
  *((_DWORD *)v33 + 288) = 0;
  *((_QWORD *)v33 + 143) = 0;
  *(_OWORD *)(v33 + 1128) = 0u;
  *((_QWORD *)v33 + 145) = &off_24C0B43E8;
  *((_DWORD *)v33 + 298) = 0;
  *((_QWORD *)v33 + 148) = 0;
  *((_OWORD *)v33 + 73) = 0u;
  *((_QWORD *)v33 + 150) = &off_24C0B43E8;
  *((_DWORD *)v33 + 308) = 0;
  *((_QWORD *)v33 + 153) = 0;
  *(_OWORD *)(v33 + 1208) = 0u;
  *((_QWORD *)v33 + 155) = &off_24C0B43E8;
  *((_DWORD *)v33 + 318) = 0;
  *((_QWORD *)v33 + 158) = 0;
  *((_OWORD *)v33 + 78) = 0u;
  *((_QWORD *)v33 + 160) = &off_24C0B43E8;
  *((_DWORD *)v33 + 328) = 0;
  *((_QWORD *)v33 + 163) = 0;
  *(_OWORD *)(v33 + 1288) = 0u;
  *((_QWORD *)v33 + 165) = &off_24C0B43E8;
  *((_DWORD *)v33 + 338) = 0;
  *((_QWORD *)v33 + 168) = 0;
  *((_OWORD *)v33 + 83) = 0u;
  *((_QWORD *)v33 + 170) = &off_24C0B43E8;
  *((_DWORD *)v33 + 348) = 0;
  *((_QWORD *)v33 + 173) = 0;
  *(_OWORD *)(v33 + 1368) = 0u;
  *((_QWORD *)v33 + 175) = &off_24C0B43E8;
  *((_DWORD *)v33 + 358) = 0;
  *((_QWORD *)v33 + 178) = 0;
  *((_OWORD *)v33 + 88) = 0u;
  *((_QWORD *)v33 + 180) = &off_24C0B43E8;
  *((_DWORD *)v33 + 368) = 0;
  *((_QWORD *)v33 + 183) = 0;
  *(_OWORD *)(v33 + 1448) = 0u;
  *((_QWORD *)v33 + 185) = &off_24C0B43E8;
  *((_DWORD *)v33 + 378) = 0;
  *((_QWORD *)v33 + 188) = 0;
  *((_OWORD *)v33 + 93) = 0u;
  *((_QWORD *)v33 + 190) = &off_24C0B43E8;
  *((_DWORD *)v33 + 388) = 0;
  *((_QWORD *)v33 + 193) = 0;
  *(_OWORD *)(v33 + 1528) = 0u;
  *((_QWORD *)v33 + 195) = &off_24C0B43E8;
  *((_DWORD *)v33 + 398) = 0;
  *((_QWORD *)v33 + 198) = 0;
  *((_OWORD *)v33 + 98) = 0u;
  *((_QWORD *)v33 + 200) = &off_24C0B43E8;
  *((_DWORD *)v33 + 408) = 0;
  *((_QWORD *)v33 + 203) = 0;
  *(_OWORD *)(v33 + 1608) = 0u;
  *((_QWORD *)v33 + 205) = &off_24C0B43E8;
  *((_DWORD *)v33 + 418) = 0;
  *((_QWORD *)v33 + 208) = 0;
  *((_OWORD *)v33 + 103) = 0u;
  *((_QWORD *)v33 + 210) = &off_24C0B43E8;
  *((_DWORD *)v33 + 428) = 0;
  *((_QWORD *)v33 + 213) = 0;
  *(_OWORD *)(v33 + 1688) = 0u;
  *((_QWORD *)v33 + 215) = &off_24C0B43E8;
  *((_DWORD *)v33 + 438) = 0;
  *((_QWORD *)v33 + 218) = 0;
  *((_OWORD *)v33 + 108) = 0u;
  *((_QWORD *)v33 + 220) = &off_24C0B43E8;
  *((_DWORD *)v33 + 448) = 0;
  *((_QWORD *)v33 + 223) = 0;
  *(_OWORD *)(v33 + 1768) = 0u;
  *((_QWORD *)v33 + 225) = &off_24C0B43E8;
  *((_DWORD *)v33 + 458) = 0;
  *((_QWORD *)v33 + 228) = 0;
  *((_OWORD *)v33 + 113) = 0u;
  *((_QWORD *)v33 + 230) = &off_24C0B43E8;
  *((_DWORD *)v33 + 468) = 0;
  *((_QWORD *)v33 + 233) = 0;
  *(_OWORD *)(v33 + 1848) = 0u;
  *((_QWORD *)v33 + 235) = &off_24C0B43E8;
  *((_DWORD *)v33 + 478) = 0;
  *((_QWORD *)v33 + 238) = 0;
  *((_OWORD *)v33 + 118) = 0u;
  *(_QWORD *)(v32 + 24) = v33;
  *(_QWORD *)(v32 + 32) = v33 + 1920;
  *(_QWORD *)(v32 + 40) = v33 + 1920;
  *(_QWORD *)(v32 + 48) = v32 + 48;
  *(_QWORD *)(v32 + 56) = v32 + 48;
  *(_QWORD *)(v32 + 64) = 0;
  *(_QWORD *)(v32 + 648) = 0;
  v34 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 80) = &off_24C0C2DA8;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v34;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = v32;
  *(_QWORD *)(a1 + 128) = a1 + 128;
  *(_QWORD *)(a1 + 136) = a1 + 128;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 368;
  *(_QWORD *)(a1 + 376) = a1 + 368;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0x100000000;
  *(_BYTE *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  pthread_mutexattr_init(&v101);
  pthread_mutexattr_setpolicy_np(&v101, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 432), &v101);
  pthread_mutexattr_destroy(&v101);
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_QWORD *)(a1 + 584) = -1;
  *(_BYTE *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 596) = 0x45FA000000000000;
  v35 = a1 + 624;
  *(int64x2_t *)(a1 + 608) = vdupq_n_s64(0x3E8uLL);
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 638) = 0;
  v36 = (_QWORD **)*a7;
  v37 = (_QWORD **)a7[1];
  if ((_QWORD **)*a7 != v37)
  {
    do
    {
      v41 = *((unsigned __int8 *)v36 + 23);
      v42 = v36;
      v43 = v41;
      if (*((char *)v36 + 23) < 0)
      {
        v43 = (unint64_t)v36[1];
        if ((v43 & 0x8000000000000000) != 0)
          goto LABEL_118;
        v42 = *v36;
        if (v43 && v42 == 0)
          goto LABEL_118;
      }
      if (v43 == 73
        && !memcmp("http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01", v42, 0x49uLL))
      {
        v38 = *((_DWORD *)v36 + 6);
        v39 = (webrtc::RtpHeaderExtensionMap *)(a1 + 624);
        v40 = 8;
      }
      else
      {
        v45 = (uint64_t *)v36;
        v46 = v41;
        if ((v41 & 0x80) != 0)
        {
          v46 = (unint64_t)v36[1];
          if ((v46 & 0x8000000000000000) != 0)
            goto LABEL_118;
          v45 = *v36;
          if (v46)
          {
            if (!v45)
              goto LABEL_118;
          }
        }
        if (v46 != 58)
          goto LABEL_57;
        v47 = *v45;
        v48 = v45[1];
        v49 = v45[2];
        v50 = v45[3];
        v51 = v45[4];
        v52 = v45[5];
        v53 = v45[6];
        v54 = *((unsigned __int16 *)v45 + 28);
        v55 = *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" == v47
           && *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/abs-send-time" == v48;
        v56 = v55 && *(_QWORD *)"c.org/experiments/rtp-hdrext/abs-send-time" == v49;
        v57 = v56 && *(_QWORD *)"periments/rtp-hdrext/abs-send-time" == v50;
        v58 = v57 && *(_QWORD *)"s/rtp-hdrext/abs-send-time" == v51;
        v59 = v58 && *(_QWORD *)"rext/abs-send-time" == v52;
        v60 = v59 && *(_QWORD *)"-send-time" == v53;
        if (v60 && *(unsigned __int16 *)"me" == v54)
        {
          v38 = *((_DWORD *)v36 + 6);
          v39 = (webrtc::RtpHeaderExtensionMap *)(a1 + 624);
          v40 = 5;
        }
        else
        {
LABEL_57:
          v62 = (uint64_t *)v36;
          v63 = v41;
          if ((v41 & 0x80) != 0)
          {
            v63 = (unint64_t)v36[1];
            if ((v63 & 0x8000000000000000) != 0)
              goto LABEL_118;
            v62 = *v36;
            if (v63)
            {
              if (!v62)
                goto LABEL_118;
            }
          }
          if (v63 != 34)
            goto LABEL_75;
          v64 = *v62;
          v65 = v62[1];
          v66 = v62[2];
          v67 = v62[3];
          v68 = *((unsigned __int16 *)v62 + 16);
          v69 = v64 == 0x667465693A6E7275 && v65 == 0x3A736D617261703ALL;
          v70 = v69 && v66 == 0x657264682D707472;
          v71 = v70 && v67 == 0x7366666F743A7478;
          if (v71 && v68 == 29797)
          {
            v38 = *((_DWORD *)v36 + 6);
            v39 = (webrtc::RtpHeaderExtensionMap *)(a1 + 624);
            v40 = 1;
          }
          else
          {
LABEL_75:
            v73 = (uint64_t *)v36;
            if ((v41 & 0x80) != 0)
            {
              v41 = (unint64_t)v36[1];
              if ((v41 & 0x8000000000000000) != 0)
                goto LABEL_118;
              v73 = *v36;
              if (v41)
              {
                if (!v73)
                  goto LABEL_118;
              }
            }
            if (v41 != 35)
              goto LABEL_121;
            v74 = *v73;
            v75 = v73[1];
            v76 = v73[2];
            v77 = v73[3];
            v78 = *(uint64_t *)((char *)v73 + 27);
            v79 = *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:mid" == v74
               && *(_QWORD *)":params:rtp-hdrext:sdes:mid" == v75;
            v80 = v79 && *(_QWORD *)"rtp-hdrext:sdes:mid" == v76;
            v81 = v80 && *(_QWORD *)"xt:sdes:mid" == v77;
            if (!v81 || *(_QWORD *)"sdes:mid" != v78)
            {
LABEL_121:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
              {
                v19 = v19 & 0xFFFFFFFF00000000 | 0x1F1;
                webrtc::RtpExtension::ToString((webrtc::RtpExtension *)v36, (char *)&v101);
                rtc::webrtc_logging_impl::Log("\r\t\n\t", v83, v84, v85, v86, v87, v88, v89, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_sender.cc");
                if (v102 < 0)
                  operator delete((void *)v101.__sig);
              }
              goto LABEL_21;
            }
            v38 = *((_DWORD *)v36 + 6);
            v39 = (webrtc::RtpHeaderExtensionMap *)(a1 + 624);
            v40 = 16;
          }
        }
      }
      webrtc::RtpHeaderExtensionMap::Register(v39, v38, v40);
LABEL_21:
      v36 += 4;
    }
    while (v36 != v37);
  }
  if (a10)
    v90 = a9;
  else
    v90 = 0;
  if (!a10)
    goto LABEL_116;
  v91 = 0;
  v92 = 0;
  v93 = 8 * a10;
  v94 = (int *)(v90 + 4);
  v95 = 1;
  do
  {
    if (*(_BYTE *)(v35 + *(v94 - 1)))
    {
      if (*v94 > 16 || *(unsigned __int8 *)(v35 + *(v94 - 1)) > 0xEu)
        v95 = 2;
      v91 += *v94;
      ++v92;
    }
    v94 += 2;
    v93 -= 8;
  }
  while (v93);
  if (v91)
  {
    v97 = v91 + v92 * v95 + 7;
    v98 = v97 & 3;
    if (v97 <= 0)
      v98 = -(-v97 & 3);
    v99 = v97 - v98;
  }
  else
  {
LABEL_116:
    v99 = 0;
  }
  *(_QWORD *)(a1 + 648) = v99;
  pthread_mutexattr_init(&v101);
  pthread_mutexattr_setpolicy_np(&v101, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 656), &v101);
  pthread_mutexattr_destroy(&v101);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_QWORD *)(a1 + 776) = -1;
  *(_BYTE *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 788) = 0x45FA000000000000;
  *(int64x2_t *)(a1 + 800) = vdupq_n_s64(0x3E8uLL);
  return a1;
}

void webrtc::FlexfecSender::~FlexfecSender(webrtc::FlexfecSender *this)
{
  *(_QWORD *)this = off_24C0B4388;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 90);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 656));
  webrtc::UlpfecGenerator::~UlpfecGenerator((webrtc::FlexfecSender *)((char *)this + 80));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
}

{
  *(_QWORD *)this = off_24C0B4388;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 90);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 656));
  webrtc::UlpfecGenerator::~UlpfecGenerator((webrtc::FlexfecSender *)((char *)this + 80));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::FlexfecSender::SetProtectionParameters(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  pthread_mutex_t *v6;
  int v7;
  uint64_t v8;
  int v9;

  v6 = (pthread_mutex_t *)(a1 + 432);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 432));
  if (*(_BYTE *)(a1 + 520))
    *(_BYTE *)(a1 + 520) = 0;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *a3;
  v9 = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 504) = v7;
  *(_QWORD *)(a1 + 508) = v8;
  *(_DWORD *)(a1 + 516) = v9;
  *(_BYTE *)(a1 + 520) = 1;
  return pthread_mutex_unlock(v6);
}

void webrtc::FlexfecSender::AddPacketAndGenerateFec(webrtc::FlexfecSender *this, const webrtc::RtpPacketToSend *a2)
{
  webrtc::UlpfecGenerator::AddPacketAndGenerateFec((webrtc::FlexfecSender *)((char *)this + 80), a2);
}

void webrtc::FlexfecSender::GetFecPackets(webrtc::FlexfecSender *this@<X0>, _QWORD *a2@<X8>)
{
  _opaque_pthread_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  webrtc::RtpPacket *v13;
  webrtc::RtpPacket *v14;
  char *v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  webrtc::RtpPacket *v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  webrtc::RtpPacket *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t RawExtension;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  _WORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  BOOL v55;
  _BOOL4 v56;
  void *v57;
  uint64_t v58;
  size_t v59;
  char *v60;
  webrtc::RtpPacket *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  webrtc::RtpPacket *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  webrtc::RtpPacket **v72;
  webrtc::RtpPacket *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::string *v100;
  unint64_t v101;
  uint64_t v102;
  char **v103;
  webrtc::RtpPacket *v104;

  v4 = pthread_self();
  v5 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = v5 + 1;
  if (!v5)
    *((_QWORD *)this + 14) = v4;
  if (pthread_equal(*((pthread_t *)this + 14), v4))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::reserve((uint64_t)a2, *((_QWORD *)this + 48));
    v10 = (_QWORD *)*((_QWORD *)this + 47);
    if (v10 != (_QWORD *)((char *)this + 368))
    {
      v11 = 0;
      v103 = (char **)((char *)this + 48);
      while (1)
      {
        v12 = (_QWORD *)v10[2];
        v13 = (webrtc::RtpPacket *)operator new();
        v14 = webrtc::RtpPacket::RtpPacket(v13, (webrtc::FlexfecSender *)((char *)this + 624), (uint64_t *)0x5DC);
        *((_BYTE *)v14 + 136) = 0;
        *((_BYTE *)v14 + 140) = 0;
        *((_BYTE *)v14 + 144) = 0;
        *((_BYTE *)v14 + 148) = 0;
        *((_BYTE *)v14 + 152) = 0;
        *((_BYTE *)v14 + 160) = 0;
        *((_BYTE *)v14 + 170) = 0;
        *((_BYTE *)v14 + 172) = 0;
        *((_BYTE *)v14 + 192) = 0;
        *((_BYTE *)v14 + 200) = 0;
        *((_DWORD *)v14 + 46) = 0;
        *((_QWORD *)v14 + 22) = 0;
        v104 = v14;
        *((_OWORD *)v14 + 7) = xmmword_208F09FB0;
        *((_BYTE *)v14 + 128) = 1;
        *((_BYTE *)v14 + 168) = 0;
        *(_BYTE *)v14 = 0;
        v15 = (char *)v14 + 88;
        v16 = *((_QWORD *)v14 + 12);
        v17 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16) + v16 + 1);
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)v14 + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)v14 + 11) + 8) - v16));
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v15 + 16) + *((_QWORD *)v13 + 12) + 1) = v17 & 0x7F;
        v18 = *((_BYTE *)this + 32);
        v20 = *((_QWORD *)v104 + 11);
        v19 = (uint64_t *)((char *)v104 + 88);
        *((_BYTE *)v104 + 1) = v18;
        v21 = v19[1];
        v22 = *(_BYTE *)(*(_QWORD *)(v20 + 16) + v21 + 1) & 0x80 | v18;
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v19, (uint64_t *)(*(_QWORD *)(v20 + 8) - v21));
        *(_BYTE *)(*(_QWORD *)(*v19 + 16) + v19[1] + 1) = v22;
        v23 = (uint64_t *)v104;
        v24 = *((unsigned __int16 *)this + 36);
        *((_WORD *)this + 36) = v24 + 1;
        v25 = v23[11];
        v23 += 11;
        *((_WORD *)v23 - 42) = v24;
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v23, (uint64_t *)(*(_QWORD *)(v25 + 8) - v23[1]));
        *(_WORD *)(*(_QWORD *)(*v23 + 16) + v23[1] + 2) = bswap32(v24) >> 16;
        v26 = v104;
        v27 = *((_DWORD *)this + 9);
        v28 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
        if ((v28 & 0x8000000000000000) != 0)
        {
          if (-(uint64_t)v28 % 0x3E8uLL <= 0x1F4)
            v30 = 0;
          else
            v30 = -1;
          v29 = v30 - -(uint64_t)v28 / 0x3E8uLL;
        }
        else
        {
          v29 = v28 / 0x3E8;
          if (v28 % 0x3E8 > 0x1F3)
            LODWORD(v29) = v29 + 1;
        }
        v31 = v27 + 90 * v29;
        v33 = *((_QWORD *)v26 + 11);
        v32 = (uint64_t *)((char *)v26 + 88);
        *((_DWORD *)v32 - 20) = v31;
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v32, (uint64_t *)(*(_QWORD *)(v33 + 8) - v32[1]));
        *(_DWORD *)(*(_QWORD *)(*v32 + 16) + v32[1] + 4) = bswap32(v31);
        v34 = v104;
        *((_QWORD *)v34 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
        LODWORD(v34) = *((_DWORD *)this + 10);
        v36 = *((_QWORD *)v104 + 11);
        v35 = (uint64_t *)((char *)v104 + 88);
        *((_DWORD *)v104 + 3) = (_DWORD)v34;
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v35, (uint64_t *)(*(_QWORD *)(v36 + 8) - v35[1]));
        *(_DWORD *)(*(_QWORD *)(*v35 + 16) + v35[1] + 8) = bswap32(v34);
        v38 = *((unsigned __int8 *)v104 + 37);
        if (*((_BYTE *)v104 + 53))
          v39 = 0;
        else
          v39 = v38 >= 0xF;
        v40 = !v39;
        if (*((_BYTE *)v104 + 37))
        {
          if (v40)
          {
            RawExtension = webrtc::RtpPacket::AllocateRawExtension(v104, v38, 3, v37, v6, v7, v8, v9);
            if (v42)
            {
              *(_BYTE *)(RawExtension + 2) = 0;
              *(_WORD *)RawExtension = 0;
            }
          }
        }
        v43 = *((unsigned __int8 *)v104 + 33);
        if (*((_BYTE *)v104 + 53))
          v44 = 0;
        else
          v44 = v43 >= 0xF;
        v45 = !v44;
        if (*((_BYTE *)v104 + 33))
        {
          if (v45)
          {
            v46 = webrtc::RtpPacket::AllocateRawExtension(v104, v43, 3, v37, v6, v7, v8, v9);
            if (v47)
            {
              *(_BYTE *)(v46 + 2) = 0;
              *(_WORD *)v46 = 0;
            }
          }
        }
        v48 = *((unsigned __int8 *)v104 + 40);
        if (*((_BYTE *)v104 + 53))
          v49 = 0;
        else
          v49 = v48 >= 0xF;
        v50 = !v49;
        if (*((_BYTE *)v104 + 40))
        {
          if (v50)
          {
            v51 = (_WORD *)webrtc::RtpPacket::AllocateRawExtension(v104, v48, 2, v37, v6, v7, v8, v9);
            if (v52)
              *v51 = 0;
          }
        }
        if (*((char *)this + 71) < 0)
        {
          v53 = *((_QWORD *)this + 7);
          if (!v53)
            goto LABEL_71;
          if ((v53 & 0x8000000000000000) != 0 || !*v103)
          {
LABEL_124:
            __break(1u);
            goto LABEL_125;
          }
        }
        else
        {
          v53 = *((unsigned __int8 *)this + 71);
          if (!*((_BYTE *)this + 71))
            goto LABEL_71;
        }
        if (v53 - 256 >= 0xFFFFFFFFFFFFFF01 && (v53 < 0x11 || *((_BYTE *)v104 + 53)))
        {
          v54 = *((unsigned __int8 *)v104 + 48);
          v55 = !*((_BYTE *)v104 + 53) && v54 >= 0xF;
          v56 = !v55;
          if (*((_BYTE *)v104 + 48))
          {
            if (v56)
            {
              v57 = (void *)webrtc::RtpPacket::AllocateRawExtension(v104, v54, v53, v37, v6, v7, v8, v9);
              if (v58)
              {
                if (*((char *)this + 71) < 0)
                {
                  v59 = *((_QWORD *)this + 7);
                  if ((v59 & 0x8000000000000000) != 0)
                    goto LABEL_124;
                  v60 = *v103;
                  if (v59)
                  {
                    if (!v60)
                      goto LABEL_124;
                  }
                }
                else
                {
                  v59 = *((unsigned __int8 *)this + 71);
                  v60 = (char *)this + 48;
                }
                if (v59 <= 0x10)
                  memcpy(v57, v60, v59);
              }
            }
          }
        }
LABEL_71:
        v61 = v104;
        v62 = v12[3];
        *((_QWORD *)v104 + 3) = 0;
        rtc::CopyOnWriteBuffer::SetSize((uint64_t *)v61 + 11, *((uint64_t **)v61 + 2));
        v63 = *((_QWORD *)v61 + 11);
        if (v63)
          rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)v61 + 11, (uint64_t *)(*(_QWORD *)(v63 + 8) - *((_QWORD *)v61 + 12)));
        *((_QWORD *)v61 + 3) = v62;
        rtc::CopyOnWriteBuffer::SetSize((uint64_t *)v61 + 11, (uint64_t *)(*((_QWORD *)v61 + 2) + v62));
        v64 = *((_QWORD *)v61 + 2);
        v65 = *((_QWORD *)v61 + 11);
        if (v65)
        {
          rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)v61 + 11, (uint64_t *)(*(_QWORD *)(v65 + 8) - *((_QWORD *)v61 + 12)));
          v65 = *(_QWORD *)(*((_QWORD *)v61 + 11) + 16) + *((_QWORD *)v61 + 12);
        }
        v66 = v12[1];
        if (v66)
          v67 = (const void *)(*(_QWORD *)(v66 + 16) + v12[2]);
        else
          v67 = 0;
        memcpy((void *)(v65 + v64), v67, v12[3]);
        v68 = v104;
        v70 = *((_QWORD *)v104 + 2);
        v69 = *((_QWORD *)v104 + 3);
        v71 = *((unsigned __int8 *)v104 + 2);
        v72 = (webrtc::RtpPacket **)a2[1];
        if ((unint64_t)v72 >= a2[2])
        {
          a2[1] = std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::__push_back_slow_path<std::unique_ptr<webrtc::RtpPacketToSend>>(a2, (uint64_t *)&v104);
          v73 = v104;
          v104 = 0;
          if (v73)
            goto LABEL_83;
        }
        else
        {
          if (!v72)
            goto LABEL_124;
          v104 = 0;
          *v72 = v68;
          a2[1] = v72 + 1;
          v73 = v104;
          v104 = 0;
          if (v73)
          {
LABEL_83:
            v74 = (unsigned int *)*((_QWORD *)v73 + 22);
            if (v74)
            {
              v75 = v74 + 2;
              do
              {
                v76 = __ldaxr(v75);
                v77 = v76 - 1;
              }
              while (__stlxr(v77, v75));
              if (!v77)
                (*(void (**)(unsigned int *))(*(_QWORD *)v74 + 8))(v74);
            }
            v78 = *((_QWORD *)v73 + 11);
            if (v78)
            {
              v79 = (unsigned int *)(v78 + 24);
              do
              {
                v80 = __ldaxr(v79);
                v81 = v80 - 1;
              }
              while (__stlxr(v81, v79));
              if (!v81)
              {
                v82 = *(_QWORD *)(v78 + 16);
                *(_QWORD *)(v78 + 16) = 0;
                if (v82)
                  MEMORY[0x20BD0ADD4](v82, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v78, 0x1010C40EE34DA14);
              }
            }
            v83 = (void *)*((_QWORD *)v73 + 7);
            if (v83)
            {
              *((_QWORD *)v73 + 8) = v83;
              operator delete(v83);
            }
            MEMORY[0x20BD0ADEC](v73, 0x1020C4000E59722);
          }
        }
        v11 += v70 + v69 + v71;
        v10 = (_QWORD *)v10[1];
        if (v10 == (_QWORD *)((char *)this + 368))
          goto LABEL_98;
      }
    }
    v11 = 0;
LABEL_98:
    if (*a2 != a2[1])
      webrtc::UlpfecGenerator::ResetState((webrtc::FlexfecSender *)((char *)this + 80));
    v84 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
    v85 = v84;
    if (*a2 != a2[1])
    {
      v86 = *((_QWORD *)this + 3);
      v87 = v84 == 0x7FFFFFFFFFFFFFFFLL || v86 == 0x8000000000000000;
      if (v87
        || (v84 != 0x8000000000000000 ? (v88 = v86 == 0x7FFFFFFFFFFFFFFFLL) : (v88 = 1),
            !v88 ? (v89 = v84 - v86 < 10000001) : (v89 = 1),
            !v89))
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v90, v91, v92, v93, v94, v95, v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_sender.cc");
        *((_QWORD *)this + 3) = v85;
      }
    }
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 656));
    v97 = v85 / 0x3E8uLL;
    if (v85 % 0x3E8uLL > 0x1F3)
      ++v97;
    if (-v85 % 0x3E8uLL <= 0x1F4)
      v98 = 0;
    else
      v98 = -1;
    if (v85 < 0)
      v99 = v98 - -v85 / 0x3E8uLL;
    else
      v99 = v97;
    webrtc::RateStatistics::Update((webrtc::FlexfecSender *)((char *)this + 720), v11, v99);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 656));
    --*((_DWORD *)this + 26);
  }
  else
  {
LABEL_125:
    v100 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_sender.cc", 126, "!race_checker126.RaceDetected()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v6, v7, v8, v9, v102);
    std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::reserve((uint64_t)v100, v101);
  }
}

void std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;

  v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
    return;
  if (a2 >> 61)
    abort();
  v4 = *(char **)(a1 + 8);
  v5 = 8 * a2;
  v6 = (char *)operator new(8 * a2);
  v7 = &v6[v5];
  v8 = v4 - v2;
  v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 == v2)
  {
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v7;
    goto LABEL_7;
  }
  v10 = v8 - 8;
  if ((unint64_t)(v8 - 8) < 0x78)
  {
    v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    do
    {
LABEL_18:
      v22 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v11 - 1) = v22;
      v11 -= 8;
    }
    while (v4 != v2);
    goto LABEL_19;
  }
  v12 = (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9
     || &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4;
  v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (!v12)
    goto LABEL_18;
  v13 = v8 >> 3;
  v14 = (v10 >> 3) + 1;
  v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
  v16 = &v4[-v15];
  v11 = (char *)(v9 - v15);
  v17 = &v6[8 * v13 - 16];
  v18 = v4 - 16;
  v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v21 = *((_OWORD *)v18 - 1);
    v20 = *(_OWORD *)v18;
    *((_OWORD *)v18 - 1) = 0uLL;
    *(_OWORD *)v18 = 0uLL;
    *((_OWORD *)v17 - 1) = v21;
    *(_OWORD *)v17 = v20;
    v17 -= 32;
    v18 -= 32;
    v19 -= 4;
  }
  while (v19);
  v4 = v16;
  if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_18;
LABEL_19:
  v2 = *(char **)a1;
  v23 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v7;
  while (v23 != v2)
  {
    v25 = (_QWORD *)*((_QWORD *)v23 - 1);
    v23 -= 8;
    v24 = v25;
    *(_QWORD *)v23 = 0;
    if (v25)
    {
      v26 = (unsigned int *)v24[22];
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
      }
      v30 = v24[11];
      if (v30)
      {
        v31 = (unsigned int *)(v30 + 24);
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v34 = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v30 + 16) = 0;
          if (v34)
            MEMORY[0x20BD0ADD4](v34, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v30, 0x1010C40EE34DA14);
        }
      }
      v35 = (void *)v24[7];
      if (v35)
      {
        v24[8] = v35;
        operator delete(v35);
      }
      MEMORY[0x20BD0ADEC](v24, 0x1020C4000E59722);
    }
  }
LABEL_7:
  if (v2)
    operator delete(v2);
}

uint64_t webrtc::FlexfecSender::MaxPacketOverhead(webrtc::FlexfecSender *this)
{
  return *((_QWORD *)this + 81) + 32;
}

unint64_t webrtc::FlexfecSender::CurrentFecRate(webrtc::FlexfecSender *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;

  v2 = (pthread_mutex_t *)((char *)this + 656);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 656));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  v4 = v3 / 0x3E8uLL;
  if (v3 % 0x3E8uLL > 0x1F3)
    ++v4;
  if (-v3 % 0x3E8uLL <= 0x1F4)
    v5 = 0;
  else
    v5 = -1;
  if (v3 < 0)
    v6 = v5 - -v3 / 0x3E8uLL;
  else
    v6 = v4;
  v7 = webrtc::RateStatistics::Rate((webrtc::FlexfecSender *)((char *)this + 720), v6);
  if (v8)
    v9 = v7;
  else
    v9 = 0;
  pthread_mutex_unlock(v2);
  return v9;
}

int64x2_t webrtc::FlexfecSender::GetRtpState@<Q0>(webrtc::FlexfecSender *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int64x2_t result;

  v2 = *((_DWORD *)this + 9);
  *(_WORD *)a2 = *((_WORD *)this + 36);
  *(_QWORD *)(a2 + 4) = v2;
  result = vdupq_n_s64(0x8000000000000000);
  *(int64x2_t *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  return result;
}

uint64_t webrtc::FlexfecSender::GetFecType(webrtc::FlexfecSender *this)
{
  return 0;
}

uint64_t webrtc::FlexfecSender::FecSsrc(webrtc::FlexfecSender *this)
{
  return *((unsigned int *)this + 10) | 0x100000000;
}

_QWORD *std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::__push_back_slow_path<std::unique_ptr<webrtc::RtpPacketToSend>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v4)
    v4 = v6 >> 2;
  v18 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
  v7 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v18)
    v7 = v4;
  if (!v7)
  {
    __break(1u);
LABEL_43:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v7 >> 61)
    goto LABEL_43;
  v9 = 8 * v7;
  v10 = (char *)operator new(8 * v7);
  v11 = &v10[v9];
  v12 = &v10[8 * v3];
  v13 = *a2;
  *a2 = 0;
  *(_QWORD *)v12 = v13;
  v14 = v12 + 8;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == (char *)*a1)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v11;
  }
  else
  {
    v17 = (unint64_t)&v16[-*a1 - 8];
    if (v17 < 0x78)
      goto LABEL_46;
    v18 = &v16[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] >= v12 || &v10[v2 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8] >= v16;
    if (!v18)
      goto LABEL_46;
    v19 = (v17 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = &v16[-v20];
    v12 -= v20;
    v22 = &v10[8 * v3 - 16];
    v23 = v16 - 16;
    v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *((_OWORD *)v23 - 1);
      v25 = *(_OWORD *)v23;
      *((_OWORD *)v23 - 1) = 0uLL;
      *(_OWORD *)v23 = 0uLL;
      *((_OWORD *)v22 - 1) = v26;
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    v16 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_46:
      do
      {
        v27 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v12 - 1) = v27;
        v12 -= 8;
      }
      while (v16 != v15);
    }
    v16 = (char *)*a1;
    v28 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v11;
    while (v28 != v16)
    {
      v30 = (_QWORD *)*((_QWORD *)v28 - 1);
      v28 -= 8;
      v29 = v30;
      *(_QWORD *)v28 = 0;
      if (v30)
      {
        v31 = (unsigned int *)v29[22];
        if (v31)
        {
          v32 = v31 + 2;
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
            (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
        }
        v35 = v29[11];
        if (v35)
        {
          v36 = (unsigned int *)(v35 + 24);
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = *(_QWORD *)(v35 + 16);
            *(_QWORD *)(v35 + 16) = 0;
            if (v39)
              MEMORY[0x20BD0ADD4](v39, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v35, 0x1010C40EE34DA14);
          }
        }
        v40 = (void *)v29[7];
        if (v40)
        {
          v29[8] = v40;
          operator delete(v40);
        }
        MEMORY[0x20BD0ADEC](v29, 0x1020C4000E59722);
      }
    }
  }
  if (v16)
    operator delete(v16);
  return v14;
}

void webrtc::ForwardErrorCorrection::Packet::~Packet(webrtc::ForwardErrorCorrection::Packet *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0B43E8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = (unsigned int *)(v1 + 24);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v1 + 16);
      *(_QWORD *)(v1 + 16) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v1, 0x1010C40EE34DA14);
    }
  }
}

{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0B43E8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = (unsigned int *)(v1 + 24);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v1 + 16);
      *(_QWORD *)(v1 + 16) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v1, 0x1010C40EE34DA14);
    }
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::ForwardErrorCorrection::Packet::AddRef(webrtc::ForwardErrorCorrection::Packet *this)
{
  uint64_t v1;

  v1 = (*((_DWORD *)this + 8) + 1);
  *((_DWORD *)this + 8) = v1;
  return v1;
}

uint64_t webrtc::ForwardErrorCorrection::Packet::Release(webrtc::ForwardErrorCorrection::Packet *this)
{
  uint64_t v1;

  v1 = (*((_DWORD *)this + 8) - 1);
  *((_DWORD *)this + 8) = v1;
  if (this && !(_DWORD)v1)
    (*(void (**)(webrtc::ForwardErrorCorrection::Packet *))(*(_QWORD *)this + 8))(this);
  return v1;
}

void webrtc::ForwardErrorCorrection::ReceivedFecPacket::~ReceivedFecPacket(webrtc::ForwardErrorCorrection::ReceivedFecPacket *this)
{
  uint64_t v2;
  uint64_t v3;
  webrtc::ForwardErrorCorrection::ReceivedFecPacket *v4;
  uint64_t v5;
  uint64_t v6;
  webrtc::ForwardErrorCorrection::ReceivedFecPacket *v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 20);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if ((*((_BYTE *)this + 48) & 1) != 0)
    operator delete(*((void **)this + 7));
  if (*((_QWORD *)this + 3))
  {
    v3 = *((_QWORD *)this + 1);
    v4 = (webrtc::ForwardErrorCorrection::ReceivedFecPacket *)*((_QWORD *)this + 2);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 3) = 0;
    if (v4 != (webrtc::ForwardErrorCorrection::ReceivedFecPacket *)((char *)this + 8))
    {
      do
      {
        v7 = (webrtc::ForwardErrorCorrection::ReceivedFecPacket *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
        {
          v8 = *(_QWORD *)(v6 + 8);
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
          MEMORY[0x20BD0ADEC](v6, 0x1020C4052B98188);
        }
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != (webrtc::ForwardErrorCorrection::ReceivedFecPacket *)((char *)this + 8));
    }
  }
}

void webrtc::ForwardErrorCorrection::~ForwardErrorCorrection(webrtc::ForwardErrorCorrection *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  webrtc::ForwardErrorCorrection::ReceivedFecPacket *v15;
  char *v16;

  if (*((_QWORD *)this + 8))
  {
    v2 = (char *)this + 48;
    v3 = *((_QWORD *)this + 6);
    v4 = (char *)*((_QWORD *)this + 7);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 8) = 0;
    if (v4 != (char *)this + 48)
    {
      do
      {
        v16 = (char *)*((_QWORD *)v4 + 1);
        v15 = (webrtc::ForwardErrorCorrection::ReceivedFecPacket *)*((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v15)
        {
          webrtc::ForwardErrorCorrection::ReceivedFecPacket::~ReceivedFecPacket(v15);
          MEMORY[0x20BD0ADEC]();
        }
        operator delete(v4);
        v4 = v16;
      }
      while (v16 != v2);
    }
  }
  v6 = (void (***)(_QWORD))*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = (void (***)(_QWORD))*((_QWORD *)this + 4);
    v8 = (void *)*((_QWORD *)this + 3);
    if (v7 != v6)
    {
      v9 = v7 - 5;
      v10 = v7 - 5;
      do
      {
        v11 = *v10;
        v10 -= 5;
        (*v11)(v9);
        v12 = v9 == v6;
        v9 = v10;
      }
      while (!v12);
      v8 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v6;
    operator delete(v8);
  }
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
}

_QWORD *webrtc::ForwardErrorCorrection::CreateUlpfec@<X0>(webrtc::ForwardErrorCorrection *this@<X0>, uint64_t *a2@<X8>)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;

  v2 = (int)this;
  v4 = operator new();
  *(_OWORD *)(v4 + 8) = xmmword_208F09F80;
  *(_QWORD *)v4 = &unk_24C0C2E08;
  v5 = operator new();
  *(int64x2_t *)(v5 + 8) = vdupq_n_s64(0x30uLL);
  *(_QWORD *)(v5 + 24) = 18;
  *(_QWORD *)v5 = &unk_24C0C2E30;
  v6 = operator new();
  *(_DWORD *)v6 = v2;
  *(_DWORD *)(v6 + 4) = v2;
  *(_QWORD *)(v6 + 8) = v4;
  *(_QWORD *)(v6 + 16) = v5;
  result = operator new(0x780uLL);
  *result = &off_24C0B43E8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  result[5] = &off_24C0B43E8;
  result[6] = 0;
  result[7] = 0;
  result[8] = 0;
  *((_DWORD *)result + 18) = 0;
  result[10] = &off_24C0B43E8;
  result[11] = 0;
  result[12] = 0;
  result[13] = 0;
  *((_DWORD *)result + 28) = 0;
  result[15] = &off_24C0B43E8;
  result[16] = 0;
  *((_DWORD *)result + 38) = 0;
  result[17] = 0;
  result[18] = 0;
  result[20] = &off_24C0B43E8;
  result[21] = 0;
  *((_DWORD *)result + 48) = 0;
  result[22] = 0;
  result[23] = 0;
  result[25] = &off_24C0B43E8;
  result[26] = 0;
  *((_DWORD *)result + 58) = 0;
  result[27] = 0;
  result[28] = 0;
  result[30] = &off_24C0B43E8;
  result[31] = 0;
  *((_DWORD *)result + 68) = 0;
  result[32] = 0;
  result[33] = 0;
  result[35] = &off_24C0B43E8;
  result[36] = 0;
  *((_DWORD *)result + 78) = 0;
  result[37] = 0;
  result[38] = 0;
  result[40] = &off_24C0B43E8;
  result[41] = 0;
  *((_DWORD *)result + 88) = 0;
  result[42] = 0;
  result[43] = 0;
  result[45] = &off_24C0B43E8;
  result[46] = 0;
  *((_DWORD *)result + 98) = 0;
  result[47] = 0;
  result[48] = 0;
  result[50] = &off_24C0B43E8;
  result[51] = 0;
  *((_DWORD *)result + 108) = 0;
  result[52] = 0;
  result[53] = 0;
  result[55] = &off_24C0B43E8;
  result[56] = 0;
  *((_DWORD *)result + 118) = 0;
  result[57] = 0;
  result[58] = 0;
  result[60] = &off_24C0B43E8;
  result[61] = 0;
  *((_DWORD *)result + 128) = 0;
  result[62] = 0;
  result[63] = 0;
  result[65] = &off_24C0B43E8;
  result[67] = 0;
  result[66] = 0;
  *((_DWORD *)result + 138) = 0;
  result[68] = 0;
  result[70] = &off_24C0B43E8;
  result[72] = 0;
  result[71] = 0;
  *((_DWORD *)result + 148) = 0;
  result[73] = 0;
  result[75] = &off_24C0B43E8;
  result[77] = 0;
  result[76] = 0;
  *((_DWORD *)result + 158) = 0;
  result[78] = 0;
  result[80] = &off_24C0B43E8;
  result[82] = 0;
  result[81] = 0;
  *((_DWORD *)result + 168) = 0;
  result[83] = 0;
  result[85] = &off_24C0B43E8;
  result[87] = 0;
  result[86] = 0;
  *((_DWORD *)result + 178) = 0;
  result[88] = 0;
  result[90] = &off_24C0B43E8;
  result[92] = 0;
  result[91] = 0;
  *((_DWORD *)result + 188) = 0;
  result[93] = 0;
  result[95] = &off_24C0B43E8;
  result[97] = 0;
  result[96] = 0;
  *((_DWORD *)result + 198) = 0;
  result[98] = 0;
  result[100] = &off_24C0B43E8;
  result[102] = 0;
  result[101] = 0;
  *((_DWORD *)result + 208) = 0;
  result[103] = 0;
  result[105] = &off_24C0B43E8;
  result[107] = 0;
  result[106] = 0;
  *((_DWORD *)result + 218) = 0;
  result[108] = 0;
  result[110] = &off_24C0B43E8;
  result[112] = 0;
  result[111] = 0;
  *((_DWORD *)result + 228) = 0;
  result[113] = 0;
  result[115] = &off_24C0B43E8;
  result[117] = 0;
  result[116] = 0;
  *((_DWORD *)result + 238) = 0;
  result[118] = 0;
  result[120] = &off_24C0B43E8;
  result[122] = 0;
  result[121] = 0;
  *((_DWORD *)result + 248) = 0;
  result[123] = 0;
  result[125] = &off_24C0B43E8;
  result[127] = 0;
  result[126] = 0;
  *((_DWORD *)result + 258) = 0;
  result[128] = 0;
  result[130] = &off_24C0B43E8;
  result[132] = 0;
  result[131] = 0;
  *((_DWORD *)result + 268) = 0;
  result[133] = 0;
  result[135] = &off_24C0B43E8;
  result[137] = 0;
  result[136] = 0;
  *((_DWORD *)result + 278) = 0;
  result[138] = 0;
  result[140] = &off_24C0B43E8;
  result[142] = 0;
  result[141] = 0;
  *((_DWORD *)result + 288) = 0;
  result[143] = 0;
  result[145] = &off_24C0B43E8;
  result[147] = 0;
  result[146] = 0;
  *((_DWORD *)result + 298) = 0;
  result[148] = 0;
  result[150] = &off_24C0B43E8;
  result[152] = 0;
  result[151] = 0;
  *((_DWORD *)result + 308) = 0;
  result[153] = 0;
  result[155] = &off_24C0B43E8;
  result[157] = 0;
  result[156] = 0;
  *((_DWORD *)result + 318) = 0;
  result[158] = 0;
  result[160] = &off_24C0B43E8;
  result[162] = 0;
  result[161] = 0;
  *((_DWORD *)result + 328) = 0;
  result[163] = 0;
  result[165] = &off_24C0B43E8;
  result[167] = 0;
  result[166] = 0;
  *((_DWORD *)result + 338) = 0;
  result[168] = 0;
  result[170] = &off_24C0B43E8;
  result[172] = 0;
  result[171] = 0;
  *((_DWORD *)result + 348) = 0;
  result[173] = 0;
  result[175] = &off_24C0B43E8;
  result[177] = 0;
  result[176] = 0;
  *((_DWORD *)result + 358) = 0;
  result[178] = 0;
  result[180] = &off_24C0B43E8;
  result[182] = 0;
  result[181] = 0;
  *((_DWORD *)result + 368) = 0;
  result[183] = 0;
  result[185] = &off_24C0B43E8;
  result[187] = 0;
  result[186] = 0;
  *((_DWORD *)result + 378) = 0;
  result[188] = 0;
  result[190] = &off_24C0B43E8;
  result[192] = 0;
  result[191] = 0;
  *((_DWORD *)result + 388) = 0;
  result[193] = 0;
  result[195] = &off_24C0B43E8;
  result[197] = 0;
  result[196] = 0;
  *((_DWORD *)result + 398) = 0;
  result[198] = 0;
  result[200] = &off_24C0B43E8;
  result[202] = 0;
  result[201] = 0;
  *((_DWORD *)result + 408) = 0;
  result[203] = 0;
  result[205] = &off_24C0B43E8;
  result[207] = 0;
  result[206] = 0;
  *((_DWORD *)result + 418) = 0;
  result[208] = 0;
  result[210] = &off_24C0B43E8;
  result[212] = 0;
  result[211] = 0;
  *((_DWORD *)result + 428) = 0;
  result[213] = 0;
  result[215] = &off_24C0B43E8;
  result[217] = 0;
  result[216] = 0;
  *((_DWORD *)result + 438) = 0;
  result[218] = 0;
  result[220] = &off_24C0B43E8;
  result[222] = 0;
  result[221] = 0;
  *((_DWORD *)result + 448) = 0;
  result[223] = 0;
  result[225] = &off_24C0B43E8;
  result[227] = 0;
  result[226] = 0;
  *((_DWORD *)result + 458) = 0;
  result[228] = 0;
  result[230] = &off_24C0B43E8;
  result[232] = 0;
  result[231] = 0;
  *((_DWORD *)result + 468) = 0;
  result[233] = 0;
  result[235] = &off_24C0B43E8;
  result[237] = 0;
  result[236] = 0;
  *((_DWORD *)result + 478) = 0;
  result[238] = 0;
  *(_QWORD *)(v6 + 24) = result;
  *(_QWORD *)(v6 + 32) = result + 240;
  *(_QWORD *)(v6 + 40) = result + 240;
  *(_QWORD *)(v6 + 48) = v6 + 48;
  *(_QWORD *)(v6 + 56) = v6 + 48;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 648) = 0;
  *a2 = v6;
  return result;
}

void webrtc::ForwardErrorCorrection::EncodeFec(_QWORD *a1, _QWORD *a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *i;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  int v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  int v52;
  int v53;
  _BYTE *v54;
  char v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned __int16 v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  char v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  size_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  void *v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  size_t v115;
  void *v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  size_t v131;
  void *v132;
  unsigned int *v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  _BYTE *v142;
  __int16 v143;
  size_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  void *v151;
  void *v152;
  uint64_t v153;
  unsigned int *v154;
  unsigned int v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  void *v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  size_t v168;
  void *v169;
  size_t v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  size_t v187;
  void *v188;
  unsigned int *v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  BOOL v197;
  unint64_t v198;
  uint64_t v199;
  unsigned __int8 *v200;
  char *v201;
  char v202;
  int8x16_t *v203;
  unint64_t v204;
  int8x16_t v205;
  unint64_t v206;
  int8x8_t *v207;
  unint64_t v208;
  int8x8_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  std::string *v236;
  uint64_t *v237;
  uint64_t v238;
  unint64_t v239;
  size_t v241;
  size_t v242;
  uint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  unint64_t v250;
  unsigned int v252;
  unsigned int v253;
  size_t *v254;
  void *v255;
  unsigned int v256;
  __int16 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;

  v260 = *MEMORY[0x24BDAC8D0];
  v10 = a2[2];
  if (v10 > *(_QWORD *)(a1[2] + 8))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction.cc");
    return;
  }
  v249 = a6;
  v253 = a5;
  for (i = (_QWORD *)a2[1]; i != a2; i = (_QWORD *)i[1])
  {
    v21 = *(_QWORD *)(i[2] + 24);
    if (v21 <= 0xB)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v210, v211, v212, v213, v214, v215, v216, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction.cc");
      return;
    }
    if (v21 + *(_QWORD *)(a1[2] + 24) - 1473 <= 0xFFFFFFFFFFFFFA22
      && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      v9 = v9 & 0xFFFFFFFF00000000 | 0x482;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v22, v23, v24, a5, a6, (uint64_t)a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction.cc");
    }
  }
  if ((char)(v10 * a3) != (_DWORD)v10 * a3 || a3 == 0)
    v26 = ((int)v10 * a3 + 128) >> 8;
  else
    v26 = 1;
  if (!v26)
    return;
  if (v26 >= 1)
  {
    v27 = 0;
    v28 = 0;
    v30 = a1[3];
    v29 = a1[4];
    do
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((v29 - v30) >> 3) <= v28)
        goto LABEL_265;
      rtc::CopyOnWriteBuffer::EnsureCapacity((uint64_t *)(v30 + v27 + 8), (uint64_t *)0x5DC);
      v33 = a1[3];
      if (0xCCCCCCCCCCCCCCCDLL * ((a1[4] - v33) >> 3) <= v28)
        goto LABEL_265;
      v34 = (uint64_t *)(v33 + v27 + 8);
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v34, (uint64_t *)(*(_QWORD *)(*v34 + 8) - *(_QWORD *)(v33 + v27 + 16)));
      bzero((void *)(*(_QWORD *)(*v34 + 16) + v34[1]), 0x5DCuLL);
      v30 = a1[3];
      v29 = a1[4];
      if (0xCCCCCCCCCCCCCCCDLL * ((v29 - v30) >> 3) <= v28)
        goto LABEL_265;
      v35 = v30 + v27;
      if (*(_QWORD *)(v30 + v27 + 8))
        *(_QWORD *)(v35 + 24) = 0;
      v31 = operator new(0x18uLL);
      v31[1] = a7;
      v31[2] = v35;
      v32 = *a7;
      *v31 = *a7;
      *(_QWORD *)(v32 + 8) = v31;
      *a7 = (uint64_t)v31;
      ++a7[2];
      ++v28;
      v27 += 40;
    }
    while (40 * v26 != v27);
  }
  v36 = (int)v10 > 12 || v249 == 0;
  v37 = &webrtc::fec_private_tables::kPacketMaskBurstyTbl;
  if (v36)
    v37 = &webrtc::fec_private_tables::kPacketMaskRandomTbl;
  v255 = v37;
  v38 = 2;
  if (v10 > 0x10)
    v38 = 6;
  v39 = a1;
  a1[81] = v38;
  v40 = a1 + 9;
  bzero(a1 + 9, (int)v38 * (uint64_t)v26);
  webrtc::internal::GeneratePacketMasks((const void *)v10, v26, a4, v253, (webrtc::internal::PacketMaskTable *)&v255, (webrtc::internal::PacketMaskTable *)(a1 + 9), v41, v42);
  v43 = a2[2];
  v238 = v26;
  if (v43 < 2)
    goto LABEL_66;
  v44 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 16) + 8) + 16)
                                    + *(_QWORD *)(*(_QWORD *)(a2[1] + 16) + 16)
                                    + 2));
  v45 = HIWORD(v44);
  v46 = (unsigned __int16)((bswap32(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) + 16)
                                                        + *(_QWORD *)(*(_QWORD *)(*a2 + 16) + 16)
                                                        + 2)) >> 16)
                         - HIWORD(v44));
  if (v46 - v43 == -1)
    goto LABEL_65;
  v47 = *(_QWORD *)(a1[2] + 8);
  if (v47 <= v46)
  {
LABEL_259:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v225, v226, v227, v228, v229, v230, v231, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction.cc");
    if (a7[2])
    {
      v233 = *a7;
      v232 = (uint64_t *)a7[1];
      v234 = *v232;
      *(_QWORD *)(v234 + 8) = *(_QWORD *)(*a7 + 8);
      **(_QWORD **)(v233 + 8) = v234;
      a7[2] = 0;
      if (v232 != a7)
      {
        do
        {
          v235 = (uint64_t *)v232[1];
          operator delete(v232);
          v232 = v235;
        }
        while (v235 != a7);
      }
    }
    return;
  }
  if (v46 <= 0xF)
    v48 = 2;
  else
    v48 = 6;
  v49 = a1 + 45;
  bzero(a1 + 45, (int)v48 * (uint64_t)v26);
  v50 = *(_QWORD **)(a2[1] + 8);
  if (v26 >= 1)
  {
    v51 = 0;
    v52 = 0;
    v53 = *((_DWORD *)a1 + 162);
    v54 = a1 + 45;
    do
    {
      *v54 = 2 * (*v54 | (*((_BYTE *)v40 + v51) >> 7));
      *((_BYTE *)v40 + v51) *= 2;
      ++v52;
      v51 += v53;
      v54 += v48;
    }
    while (v26 > (unsigned __int16)v52);
  }
  v55 = 1;
  v43 = 1;
  if (v47 == 1 || v50 == a2)
  {
LABEL_62:
    v69 = v55 ^ 7;
    v70 = (v43 << 29) & 0xFFFFFFFF00000000;
    v71 = 1;
    do
    {
      *((_BYTE *)a1 + (v70 >> 32) + 360) = *((unsigned __int8 *)a1 + (v70 >> 32) + 360) << v69;
      v70 += v48 << 32;
    }
    while (v26 > (unint64_t)(unsigned __int16)v71++);
    goto LABEL_64;
  }
  v56 = 8 * v48;
  v57 = 1;
  v43 = 1;
  do
  {
    v58 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v50[2] + 8) + 16) + *(_QWORD *)(v50[2] + 16) + 2)) >> 16;
    v59 = v58 + ~(_WORD)v45;
    if (!v59)
      goto LABEL_53;
    if (v26 >= 1)
    {
      v60 = 0;
      v61 = (unsigned __int16)(v58 + ~(_WORD)v45);
      if ((v43 & 0x80000000) == 0)
        v62 = v43;
      else
        v62 = v43 + 7;
      v63 = v62 >> 3;
      v64 = (v62 & 0xFFFFFFF8) - v43 + 7;
      if (v64 < v61)
        LOBYTE(v61) = v64;
      do
      {
        *((_BYTE *)v49 + v63) = *((unsigned __int8 *)v49 + v63) << v61;
        ++v60;
        v63 += v48;
      }
      while (v26 > (unsigned __int16)v60);
LABEL_53:
      v8 = v43 + v59;
      if (v56 <= (int)v8)
        goto LABEL_266;
      if (v26 >= 1)
      {
        v65 = 0;
        v66 = *((_DWORD *)a1 + 162);
        v67 = (int)v8 / 8;
        v68 = v57 / 8;
        do
        {
          *((_BYTE *)v49 + v67) = (*((unsigned __int8 *)v49 + v67) | (*((unsigned __int8 *)v40 + v68) >> 7)) << ((v8 & 0x80000007) != 7);
          *((_BYTE *)v40 + v68) *= 2;
          ++v65;
          v68 += v66;
          v67 += v48;
        }
        while (v26 > (unsigned __int16)v65);
      }
      goto LABEL_59;
    }
    v8 = v43 + v59;
    if (v56 <= (int)v8)
      goto LABEL_266;
LABEL_59:
    v43 = v8 + 1;
    v50 = (_QWORD *)v50[1];
    if (v50 == a2)
      break;
    ++v57;
    LOWORD(v45) = v58;
  }
  while (v43 != v47);
  v55 = v43 & 7;
  if ((v43 & 7) != 0)
    goto LABEL_62;
LABEL_64:
  memcpy(a1 + 9, a1 + 45, (int)v48 * (uint64_t)v26);
LABEL_65:
  if ((v43 & 0x80000000) != 0)
    goto LABEL_259;
LABEL_66:
  v73 = 0;
  v74 = 2;
  if (v43 > 0x10uLL)
    v74 = 6;
  a1[81] = v74;
  v75 = a2;
  while (2)
  {
    v76 = v39[3];
    if (0xCCCCCCCCCCCCCCCDLL * ((v39[4] - v76) >> 3) <= v73)
      goto LABEL_265;
    v239 = v73;
    v77 = v39[81] * v73;
    v78 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)v39[2] + 16))(v39[2], (unint64_t)v39 + v77 + 72);
    v248 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v39[2] + 24))(v39[2], v78);
    v79 = (_QWORD *)v75[1];
    if (v79 != v75)
    {
      v80 = (_QWORD *)v79[2];
      v252 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v80[1] + 16) + v80[2] + 2)) >> 16;
      v81 = (uint64_t *)(v76 + 40 * v239);
      v82 = 0;
      v83 = v81 + 1;
      v254 = (size_t *)(v81 + 3);
      v84 = v81 + 2;
      v244 = v81 + 2;
      if (((*((unsigned __int8 *)v39 + v77 + 72) >> 7) & 1) != 0)
        goto LABEL_75;
      while (1)
      {
        do
        {
LABEL_247:
          v79 = (_QWORD *)v79[1];
          if (v79 == v75)
            goto LABEL_69;
          v80 = (_QWORD *)v79[2];
          v85 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v80[1] + 16) + v80[2] + 2)) >> 16;
          v86 = v82 + (unsigned __int16)(v85 - v252);
          v77 += v86 >> 3;
          v82 = v86 & 7;
          LOWORD(v252) = v85;
        }
        while (((*((unsigned __int8 *)v39 + v77 + 72) >> (v86 & 7 ^ 7)) & 1) == 0);
LABEL_75:
        v250 = v77;
        v245 = v80[3];
        v246 = v245 - 12;
        v247 = v82;
        v87 = v245 - 12 + v248;
        v88 = *v254;
        v89 = *v83;
        if (v87 > *v254)
          break;
LABEL_125:
        v126 = (void *)(*(_QWORD *)(v89 + 8) - *v84);
        v127 = atomic_load((unsigned int *)(v89 + 24));
        if (v127 == 1)
        {
          v128 = *v83;
          if (*v83)
          {
            if (*(_QWORD *)(v128 + 8) - *v84 >= (unint64_t)v126)
              goto LABEL_146;
          }
          else if (!v126)
          {
LABEL_146:
            v140 = *v84;
            goto LABEL_147;
          }
        }
        v128 = operator new();
        v129 = *(_QWORD *)(*v83 + 16);
        v130 = *v84;
        v131 = *v254;
        if (*v254 <= (unint64_t)v126)
          v132 = v126;
        else
          v132 = (void *)*v254;
        *(_QWORD *)v128 = v131;
        *(_QWORD *)(v128 + 8) = v132;
        if (v132)
          v132 = (void *)operator new[]();
        *(_QWORD *)(v128 + 16) = v132;
        if (v131)
          memcpy(v132, (const void *)(v129 + v130), v131);
        *(_DWORD *)(v128 + 24) = 0;
        v133 = (unsigned int *)(v128 + 24);
        do
          v134 = __ldxr(v133);
        while (__stxr(v134 + 1, v133));
        v135 = *v83;
        v84 = v244;
        if (*v83)
        {
          v136 = (unsigned int *)(v135 + 24);
          do
          {
            v137 = __ldaxr(v136);
            v138 = v137 - 1;
          }
          while (__stlxr(v138, v136));
          if (!v138)
          {
            v139 = *(_QWORD *)(v135 + 16);
            *(_QWORD *)(v135 + 16) = 0;
            if (v139)
              MEMORY[0x20BD0ADD4](v139, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v135, 0x1010C40EE34DA14);
          }
        }
        v140 = 0;
        *v83 = v128;
        *v244 = 0;
LABEL_147:
        v141 = (_BYTE *)(*(_QWORD *)(v128 + 16) + v140);
        v142 = (_BYTE *)(*(_QWORD *)(v80[1] + 16) + v80[2]);
        *v141 ^= *v142;
        v141[1] ^= v142[1];
        v143 = *((_WORD *)v80 + 12) - 12;
        v141[2] ^= HIBYTE(v143);
        v141[3] ^= v143;
        v141[4] ^= v142[4];
        v141[5] ^= v142[5];
        v141[6] ^= v142[6];
        v141[7] ^= v142[7];
        v144 = *v254;
        if (v87 <= *v254)
          goto LABEL_198;
        v242 = v87 - *v254;
        if (!*v83)
        {
          v146 = operator new();
          *(_QWORD *)v146 = v87;
          *(_QWORD *)(v146 + 8) = v87;
          *(_QWORD *)(v146 + 16) = operator new[]();
          *(_DWORD *)(v146 + 24) = 0;
          v154 = (unsigned int *)(v146 + 24);
          do
            v155 = __ldxr(v154);
          while (__stxr(v155 + 1, v154));
          v156 = *v83;
          if (*v83)
          {
            v157 = (unsigned int *)(v156 + 24);
            do
            {
              v158 = __ldaxr(v157);
              v159 = v158 - 1;
            }
            while (__stlxr(v159, v157));
            if (!v159)
            {
              v160 = *(_QWORD *)(v156 + 16);
              *(_QWORD *)(v156 + 16) = 0;
              if (v160)
                MEMORY[0x20BD0ADD4](v160, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v156, 0x1010C40EE34DA14);
            }
          }
          v147 = 0;
          *v83 = v146;
          *v84 = 0;
LABEL_169:
          *v254 = v87;
          v161 = (void *)(*(_QWORD *)(v146 + 8) - v147);
          v162 = atomic_load((unsigned int *)(v146 + 24));
          if (v162 != 1)
            goto LABEL_177;
          goto LABEL_175;
        }
        if (*(_QWORD *)(*v83 + 8) - *v84 <= v87)
          v145 = (uint64_t *)(v245 - 12 + v248);
        else
          v145 = (uint64_t *)(*(_QWORD *)(*v83 + 8) - *v84);
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v83, v145);
        v146 = *v83;
        v147 = *v84;
        v148 = *v84 + v87;
        v149 = *(_QWORD *)(*v83 + 8);
        if (v149 >= v148)
        {
          *(_QWORD *)v146 = v148;
          goto LABEL_169;
        }
        if (v149 + (v149 >> 1) <= v148)
          v150 = *v84 + v87;
        else
          v150 = v149 + (v149 >> 1);
        v151 = (void *)operator new[]();
        v152 = v151;
        v153 = *(_QWORD *)(v146 + 16);
        if (v153)
        {
          memcpy(v151, *(const void **)(v146 + 16), *(_QWORD *)v146);
          *(_QWORD *)(v146 + 16) = v152;
          MEMORY[0x20BD0ADD4](v153, 0x1000C8077774924);
        }
        else
        {
          *(_QWORD *)(v146 + 16) = v151;
        }
        *(_QWORD *)(v146 + 8) = v150;
        v163 = *v83;
        *(_QWORD *)v146 = v148;
        *v254 = v87;
        v39 = a1;
        v84 = v244;
        if (!v163)
        {
          v179 = 0;
          v170 = v242;
          goto LABEL_197;
        }
        v161 = (void *)(*(_QWORD *)(v163 + 8) - *v244);
        v164 = atomic_load((unsigned int *)(v163 + 24));
        if (v164 != 1)
        {
LABEL_177:
          v165 = operator new();
          v166 = *(_QWORD *)(*v83 + 16);
          v167 = *v84;
          v168 = *v254;
          if (*v254 <= (unint64_t)v161)
            v169 = v161;
          else
            v169 = (void *)*v254;
          *(_QWORD *)v165 = v168;
          *(_QWORD *)(v165 + 8) = v169;
          if (v169)
            v169 = (void *)operator new[]();
          *(_QWORD *)(v165 + 16) = v169;
          v170 = v242;
          if (v168)
            memcpy(v169, (const void *)(v166 + v167), v168);
          *(_DWORD *)(v165 + 24) = 0;
          v171 = (unsigned int *)(v165 + 24);
          do
            v172 = __ldxr(v171);
          while (__stxr(v172 + 1, v171));
          v173 = *v83;
          v84 = v244;
          if (*v83)
          {
            v174 = (unsigned int *)(v173 + 24);
            do
            {
              v175 = __ldaxr(v174);
              v176 = v175 - 1;
            }
            while (__stlxr(v176, v174));
            if (!v176)
            {
              v177 = *(_QWORD *)(v173 + 16);
              *(_QWORD *)(v173 + 16) = 0;
              if (v177)
                MEMORY[0x20BD0ADD4](v177, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v173, 0x1010C40EE34DA14);
            }
          }
          v178 = 0;
          *v83 = v165;
          *v244 = 0;
          goto LABEL_196;
        }
LABEL_175:
        v165 = *v83;
        if (*v83)
        {
          if (*(_QWORD *)(v165 + 8) - *v84 < (unint64_t)v161)
            goto LABEL_177;
        }
        else if (v161)
        {
          goto LABEL_177;
        }
        v178 = *v84;
        v170 = v242;
LABEL_196:
        v179 = *(_QWORD *)(v165 + 16) + v178;
LABEL_197:
        bzero((void *)(v179 + v144), v170);
LABEL_198:
        v180 = *v83;
        if (!*v83)
        {
          v75 = a2;
          v77 = v250;
          v82 = v247;
          v196 = v80[1];
          if (v196)
            goto LABEL_219;
          goto LABEL_220;
        }
        v181 = (void *)(*(_QWORD *)(v180 + 8) - *v84);
        v182 = atomic_load((unsigned int *)(v180 + 24));
        v77 = v250;
        if (v182 == 1)
        {
          v183 = *v83;
          if (*v83)
          {
            if (*(_QWORD *)(v183 + 8) - *v84 >= (unint64_t)v181)
              goto LABEL_236;
          }
          else if (!v181)
          {
LABEL_236:
            v82 = v247;
            v180 = *(_QWORD *)(v183 + 16) + *v84;
            v75 = a2;
            v196 = v80[1];
            if (v196)
              goto LABEL_219;
            goto LABEL_220;
          }
        }
        v184 = operator new();
        v185 = *(_QWORD *)(*v83 + 16);
        v186 = *v84;
        v187 = *v254;
        if (*v254 <= (unint64_t)v181)
          v188 = v181;
        else
          v188 = (void *)*v254;
        *(_QWORD *)v184 = v187;
        *(_QWORD *)(v184 + 8) = v188;
        if (v188)
          v188 = (void *)operator new[]();
        v82 = v247;
        *(_QWORD *)(v184 + 16) = v188;
        if (v187)
          memcpy(v188, (const void *)(v185 + v186), v187);
        *(_DWORD *)(v184 + 24) = 0;
        v189 = (unsigned int *)(v184 + 24);
        do
          v190 = __ldxr(v189);
        while (__stxr(v190 + 1, v189));
        v191 = *v83;
        if (*v83)
        {
          v192 = (unsigned int *)(v191 + 24);
          do
          {
            v193 = __ldaxr(v192);
            v194 = v193 - 1;
          }
          while (__stlxr(v194, v192));
          if (!v194)
          {
            v195 = *(_QWORD *)(v191 + 16);
            *(_QWORD *)(v191 + 16) = 0;
            if (v195)
              MEMORY[0x20BD0ADD4](v195, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v191, 0x1010C40EE34DA14);
          }
        }
        *v83 = v184;
        *v84 = 0;
        v77 = v250;
        v180 = *(_QWORD *)(v184 + 16);
        v75 = a2;
        v196 = v80[1];
        if (v196)
LABEL_219:
          v196 = *(_QWORD *)(v196 + 16) + v80[2];
LABEL_220:
        if (v245 == 12)
          goto LABEL_247;
        if (v246 < 8
          || (v180 + v248 < (unint64_t)(v196 + v245)
            ? (v197 = v196 + 12 >= (unint64_t)(v180 + v248 + v245 - 12))
            : (v197 = 1),
              !v197))
        {
          v198 = 0;
LABEL_230:
          v199 = v245 - v198 - 12;
          v200 = (unsigned __int8 *)(v180 + v248 + v198);
          v201 = (char *)(v196 + v198 + 12);
          do
          {
            v202 = *v201++;
            v8 = *v200;
            *v200++ = v8 ^ v202;
            --v199;
          }
          while (v199);
          goto LABEL_247;
        }
        if (v246 >= 0x20)
        {
          v198 = v246 & 0xFFFFFFFFFFFFFFE0;
          v203 = (int8x16_t *)(v196 + 28);
          v8 = v180 + v248 + 16;
          v204 = v246 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v205 = veorq_s8(*(int8x16_t *)v8, *v203);
            *(int8x16_t *)(v8 - 16) = veorq_s8(*(int8x16_t *)(v8 - 16), v203[-1]);
            *(int8x16_t *)v8 = v205;
            v203 += 2;
            v8 += 32;
            v204 -= 32;
          }
          while (v204);
          if (v246 == v198)
            goto LABEL_247;
          if ((v246 & 0x18) == 0)
            goto LABEL_230;
        }
        else
        {
          v198 = 0;
        }
        v206 = v198;
        v198 = v246 & 0xFFFFFFFFFFFFFFF8;
        v207 = (int8x8_t *)(v196 + v206 + 12);
        v8 = v180 + v248 + v206;
        v208 = v206 - (v246 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v209 = *v207++;
          *(int8x8_t *)v8 = veor_s8(*(int8x8_t *)v8, v209);
          v8 += 8;
          v208 += 8;
        }
        while (v208);
        if (v246 != v198)
          goto LABEL_230;
      }
      v241 = v87 - *v254;
      if (v89)
      {
        v90 = (uint64_t *)(*(_QWORD *)(v89 + 8) - *v84);
        if ((unint64_t)v90 <= v87)
          v91 = (uint64_t *)(v245 - 12 + v248);
        else
          v91 = v90;
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v83, v91);
        v92 = *v83;
        v93 = *v84;
        v94 = *v84 + v87;
        v95 = *(_QWORD *)(*v83 + 8);
        if (v95 < v94)
        {
          if (v95 + (v95 >> 1) <= v94)
            v96 = *v84 + v87;
          else
            v96 = v95 + (v95 >> 1);
          v97 = (void *)operator new[]();
          v98 = v97;
          v99 = *(_QWORD *)(v92 + 16);
          if (v99)
          {
            memcpy(v97, *(const void **)(v92 + 16), *(_QWORD *)v92);
            *(_QWORD *)(v92 + 16) = v98;
            MEMORY[0x20BD0ADD4](v99, 0x1000C8077774924);
          }
          else
          {
            *(_QWORD *)(v92 + 16) = v97;
          }
          *(_QWORD *)(v92 + 8) = v96;
          v109 = *v83;
          *(_QWORD *)v92 = v94;
          *v254 = v87;
          v39 = a1;
          v84 = v244;
          if (!v109)
          {
            v125 = 0;
            goto LABEL_124;
          }
          v107 = (void *)(*(_QWORD *)(v109 + 8) - *v244);
          v110 = atomic_load((unsigned int *)(v109 + 24));
          if (v110 != 1)
            goto LABEL_104;
LABEL_102:
          v111 = *v83;
          if (*v83)
          {
            if (*(_QWORD *)(v111 + 8) - *v84 < (unint64_t)v107)
              goto LABEL_104;
LABEL_122:
            v124 = *v84;
LABEL_123:
            v125 = *(_QWORD *)(v111 + 16) + v124;
LABEL_124:
            bzero((void *)(v125 + v88), v241);
            v89 = *v83;
            goto LABEL_125;
          }
          if (!v107)
            goto LABEL_122;
LABEL_104:
          v111 = operator new();
          v112 = v84;
          v113 = *(_QWORD *)(*v83 + 16);
          v114 = *v112;
          v115 = *v254;
          if (*v254 <= (unint64_t)v107)
            v116 = v107;
          else
            v116 = (void *)*v254;
          *(_QWORD *)v111 = v115;
          *(_QWORD *)(v111 + 8) = v116;
          if (v116)
            v116 = (void *)operator new[]();
          *(_QWORD *)(v111 + 16) = v116;
          if (v115)
            memcpy(v116, (const void *)(v113 + v114), v115);
          *(_DWORD *)(v111 + 24) = 0;
          v117 = (unsigned int *)(v111 + 24);
          do
            v118 = __ldxr(v117);
          while (__stxr(v118 + 1, v117));
          v119 = *v83;
          v39 = a1;
          v84 = v244;
          if (*v83)
          {
            v120 = (unsigned int *)(v119 + 24);
            do
            {
              v121 = __ldaxr(v120);
              v122 = v121 - 1;
            }
            while (__stlxr(v122, v120));
            if (!v122)
            {
              v123 = *(_QWORD *)(v119 + 16);
              *(_QWORD *)(v119 + 16) = 0;
              if (v123)
                MEMORY[0x20BD0ADD4](v123, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v119, 0x1010C40EE34DA14);
            }
          }
          v124 = 0;
          *v83 = v111;
          *v244 = 0;
          goto LABEL_123;
        }
        *(_QWORD *)v92 = v94;
      }
      else
      {
        v92 = operator new();
        *(_QWORD *)v92 = v87;
        *(_QWORD *)(v92 + 8) = v87;
        *(_QWORD *)(v92 + 16) = operator new[]();
        *(_DWORD *)(v92 + 24) = 0;
        v100 = (unsigned int *)(v92 + 24);
        do
          v101 = __ldxr(v100);
        while (__stxr(v101 + 1, v100));
        v102 = *v83;
        if (*v83)
        {
          v103 = (unsigned int *)(v102 + 24);
          do
          {
            v104 = __ldaxr(v103);
            v105 = v104 - 1;
          }
          while (__stlxr(v105, v103));
          if (!v105)
          {
            v106 = *(_QWORD *)(v102 + 16);
            *(_QWORD *)(v102 + 16) = 0;
            if (v106)
              MEMORY[0x20BD0ADD4](v106, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v102, 0x1010C40EE34DA14);
          }
        }
        v93 = 0;
        *v83 = v92;
        *v84 = 0;
      }
      *v254 = v87;
      v107 = (void *)(*(_QWORD *)(v92 + 8) - v93);
      v108 = atomic_load((unsigned int *)(v92 + 24));
      if (v108 == 1)
        goto LABEL_102;
      goto LABEL_104;
    }
LABEL_69:
    v73 = v239 + 1;
    if (v239 + 1 != v238)
      continue;
    break;
  }
  if (v75[2])
  {
    v217 = 0;
    v218 = 0;
    v219 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75[1] + 16) + 8) + 16)
         + *(_QWORD *)(*(_QWORD *)(v75[1] + 16) + 16);
    v220 = bswap32(*(_DWORD *)(v219 + 8));
    v221 = bswap32(*(unsigned __int16 *)(v219 + 2)) >> 16;
    while (1)
    {
      v256 = v220;
      v257 = v221;
      v222 = v39[81];
      v223 = (uint64_t)v39 + v222 * v218 + 72;
      if (!v222)
        v223 = 0;
      v258 = v223;
      v259 = v222;
      v224 = v39[3];
      if (0xCCCCCCCCCCCCCCCDLL * ((v39[4] - v224) >> 3) <= v218)
        break;
      (*(void (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v39[2] + 32))(v39[2], &v256, 1, v224 + v217);
      ++v218;
      v217 += 40;
      if (v238 == v218)
        return;
    }
  }
LABEL_265:
  __break(1u);
LABEL_266:
  v236 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction_internal.cc", 503, "new_bit_index < 8 * new_mask_bytes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, (uint64_t)a7, a8, v8);
  webrtc::ForwardErrorCorrection::ResetState(v236, v237);
}

void webrtc::ForwardErrorCorrection::ResetState(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  webrtc::ForwardErrorCorrection::ReceivedFecPacket *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  if (a2[2])
  {
    v4 = *a2;
    v5 = (uint64_t *)a2[1];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a2 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    a2[2] = 0;
    if (v5 != a2)
    {
      do
      {
        v14 = (uint64_t *)v5[1];
        v13 = v5[2];
        v5[2] = 0;
        if (v13)
        {
          v15 = *(_QWORD *)(v13 + 16);
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
          MEMORY[0x20BD0ADEC](v13, 0x1020C407D5D75B9);
        }
        operator delete(v5);
        v5 = v14;
      }
      while (v14 != a2);
    }
  }
  if (a1[8])
  {
    v7 = a1 + 6;
    v8 = a1[6];
    v9 = (uint64_t *)a1[7];
    v10 = *v9;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v10;
    a1[8] = 0;
    if (v9 != a1 + 6)
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        v11 = (webrtc::ForwardErrorCorrection::ReceivedFecPacket *)v9[2];
        v9[2] = 0;
        if (v11)
        {
          webrtc::ForwardErrorCorrection::ReceivedFecPacket::~ReceivedFecPacket(v11);
          MEMORY[0x20BD0ADEC]();
        }
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != v7);
    }
  }
}

_QWORD *webrtc::ForwardErrorCorrection::UpdateCoveringFecPackets(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;

  v2 = result + 6;
  v3 = (_QWORD *)result[7];
  if (v3 == result + 6)
    return result;
  while (2)
  {
    v5 = v3[2];
    v6 = v5 + 8;
    v7 = *(_QWORD *)(v5 + 16);
    if (v7 == v6)
      goto LABEL_4;
    v8 = 0;
    v9 = v7;
    do
    {
      ++v8;
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9 != v6);
    v10 = *(unsigned __int16 *)(a2 + 4);
    do
    {
      v11 = v8 >> 1;
      v12 = v7;
      if (v8 != 1)
      {
        v13 = v11 + 1;
        v12 = v7;
        do
        {
          v12 = *(_QWORD *)(v12 + 8);
          --v13;
        }
        while (v13 > 1);
      }
      v14 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 16) + 4);
      if (v10 - v14 == 0x8000)
      {
        if (v10 > v14)
          goto LABEL_9;
      }
      else if (v10 != v14 && (((_WORD)v10 - (_WORD)v14) & 0x8000) == 0)
      {
LABEL_9:
        v7 = *(_QWORD *)(v12 + 8);
        v11 = v8 + ~v11;
      }
      v8 = v11;
    }
    while (v11);
    if (v7 != v6)
    {
      v16 = *(_QWORD *)(v7 + 16);
      if (*(unsigned __int16 *)(v16 + 4) == v10)
      {
        v17 = *(_QWORD *)(a2 + 16);
        if (v17)
          (*(void (**)(_QWORD))(*(_QWORD *)v17 + 16))(*(_QWORD *)(a2 + 16));
        result = *(_QWORD **)(v16 + 8);
        if (result)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
        *(_QWORD *)(v16 + 8) = v17;
      }
    }
LABEL_4:
    v3 = (_QWORD *)v3[1];
    if (v3 != v2)
      continue;
    return result;
  }
}

void webrtc::ForwardErrorCorrection::InsertPacket(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  webrtc::ForwardErrorCorrection::ReceivedFecPacket *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int16 v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  _QWORD *v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  webrtc::ForwardErrorCorrection::ReceivedFecPacket *v101;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v110;
  uint64_t v111;
  std::string *v113;
  uint64_t *v114;
  uint64_t v115;

  v5 = a1;
  v6 = a1 + 6;
  if (a1[8])
  {
    v7 = (uint64_t *)a1[7];
    if (*(_DWORD *)a2 == *(_DWORD *)(v7[2] + 32) && v7 != v6)
    {
      do
      {
        v22 = (__int16)(*(_WORD *)(a2 + 4) - *(_WORD *)(v7[2] + 4));
        if (v22 < 0)
          v22 = -v22;
        if ((unsigned __int16)v22 < 0x4000u)
          break;
        v23 = *v7;
        v24 = (uint64_t *)v7[1];
        *(_QWORD *)(v23 + 8) = v24;
        *(_QWORD *)v7[1] = v23;
        --v5[8];
        v25 = (webrtc::ForwardErrorCorrection::ReceivedFecPacket *)v7[2];
        v7[2] = 0;
        if (v25)
        {
          webrtc::ForwardErrorCorrection::ReceivedFecPacket::~ReceivedFecPacket(v25);
          MEMORY[0x20BD0ADEC]();
        }
        operator delete(v7);
        v7 = v24;
      }
      while (v24 != v6);
    }
  }
  if (!*(_BYTE *)(a2 + 8))
  {
    v26 = (uint64_t *)a3[1];
    if (v26 == a3)
    {
LABEL_28:
      v27 = operator new();
      *(_WORD *)(v27 + 8) = 256;
      *(_DWORD *)v27 = *(_DWORD *)a2;
      *(_WORD *)(v27 + 4) = *(_WORD *)(a2 + 4);
      v28 = *(_QWORD *)(a2 + 32);
      if (v28)
        (*(void (**)(_QWORD))(*(_QWORD *)v28 + 16))(*(_QWORD *)(a2 + 32));
      *(_QWORD *)(v27 + 16) = v28;
      v29 = operator new(0x18uLL);
      v29[1] = a3;
      v29[2] = v27;
      v30 = *a3;
      *v29 = *a3;
      *(_QWORD *)(v30 + 8) = v29;
      *a3 = (uint64_t)v29;
      v31 = (uint64_t *)a3[1];
      v32 = a3[2] + 1;
      a3[2] = v32;
      std::list<std::unique_ptr<webrtc::ForwardErrorCorrection::RecoveredPacket>>::__sort<webrtc::ForwardErrorCorrection::SortablePacket::LessThan>(v31, a3, v32);
      webrtc::ForwardErrorCorrection::UpdateCoveringFecPackets(v5, v27);
    }
    else
    {
      while (*(unsigned __int16 *)(v26[2] + 4) != *(unsigned __int16 *)(a2 + 4))
      {
        v26 = (uint64_t *)v26[1];
        if (v26 == a3)
          goto LABEL_28;
      }
    }
    goto LABEL_38;
  }
  v9 = (uint64_t *)v5[7];
  if (v9 != v6)
  {
    while (*(unsigned __int16 *)(v9[2] + 4) != *(unsigned __int16 *)(a2 + 4))
    {
      v9 = (uint64_t *)v9[1];
      if (v9 == v6)
        goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_11:
  v10 = operator new();
  *(_QWORD *)(v10 + 8) = v10 + 8;
  *(_QWORD *)(v10 + 16) = v10 + 8;
  v115 = v10 + 8;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 160) = 0;
  v11 = *(_QWORD *)(a2 + 32);
  if (v11)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v11 + 16))(*(_QWORD *)(a2 + 32));
    v12 = *(_QWORD *)(v10 + 160);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  }
  *(_QWORD *)(v10 + 160) = v11;
  *(_DWORD *)(v10 + 32) = *(_DWORD *)a2;
  *(_WORD *)(v10 + 4) = *(_WORD *)(a2 + 4);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5[1] + 16))(v5[1], v10))
    goto LABEL_37;
  v17 = *(_QWORD *)(v10 + 48);
  v18 = v17 >> 1;
  if (v17 >> 1 != 1)
  {
LABEL_140:
    v113 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction.cc", 416, "fec_packet->protected_streams.size() == 1", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v13, v14, v15, v16, v18);
    webrtc::ForwardErrorCorrection::AttemptRecovery(v113);
    return;
  }
  v19 = v10 + 56;
  if ((v17 & 1) == 0)
  {
    v20 = (unsigned int *)v5 + 1;
    if (*(_DWORD *)v19 == *((_DWORD *)v5 + 1))
    {
      v21 = v10 + 56;
      goto LABEL_32;
    }
LABEL_35:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      goto LABEL_36;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)v19;
  v20 = (unsigned int *)v5 + 1;
  if (**(_DWORD **)v19 != *((_DWORD *)v5 + 1))
    goto LABEL_35;
LABEL_32:
  v18 = *(_QWORD *)(v21 + 16) + *(_QWORD *)(v21 + 8);
  if (v18 > *(_QWORD *)(*(_QWORD *)(v10 + 160) + 24))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      goto LABEL_36;
    goto LABEL_37;
  }
  v114 = v5;
  if (v17 < 2)
  {
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  v46 = 0;
  v47 = 0;
  while ((v17 & 1) == 0)
  {
    v50 = v10 + 56;
    if (*(_QWORD *)(v10 + 72) <= v46)
      goto LABEL_94;
LABEL_54:
    v51 = *(char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 160) + 8) + 16)
                  + *(_QWORD *)(*(_QWORD *)(v10 + 160) + 16)
                  + *(_QWORD *)(v50 + 8)
                  + v46);
    v52 = 8 * v47;
    if (v51 < 0)
    {
      v53 = operator new();
      *(_QWORD *)(v53 + 8) = 0;
      v18 = *v20;
      *(_DWORD *)v53 = v18;
      v17 = *(_QWORD *)(v10 + 48);
      if (v17 <= 1)
        goto LABEL_139;
      v54 = v53;
      v55 = v10 + 56;
      if ((v17 & 1) != 0)
        v55 = *(_QWORD *)v19;
      *(_WORD *)(v53 + 4) = *(_WORD *)(v55 + 4) + v52;
      v56 = operator new(0x18uLL);
      v57 = *(_QWORD *)(v10 + 8);
      v56[1] = v115;
      v56[2] = v54;
      *v56 = v57;
      *(_QWORD *)(v57 + 8) = v56;
      *(_QWORD *)(v10 + 8) = v56;
      ++*(_QWORD *)(v10 + 24);
      if ((v51 & 0x40) == 0)
      {
LABEL_56:
        if ((v51 & 0x20) == 0)
          goto LABEL_57;
        goto LABEL_71;
      }
    }
    else if ((v51 & 0x40) == 0)
    {
      goto LABEL_56;
    }
    v58 = operator new();
    *(_QWORD *)(v58 + 8) = 0;
    v18 = *v20;
    *(_DWORD *)v58 = v18;
    v17 = *(_QWORD *)(v10 + 48);
    if (v17 < 2)
      goto LABEL_139;
    v59 = v58;
    v60 = v10 + 56;
    if ((v17 & 1) != 0)
      v60 = *(_QWORD *)v19;
    *(_WORD *)(v58 + 4) = (v52 | 1) + *(_WORD *)(v60 + 4);
    v61 = operator new(0x18uLL);
    v62 = *(_QWORD *)(v10 + 8);
    v61[1] = v115;
    v61[2] = v59;
    *v61 = v62;
    *(_QWORD *)(v62 + 8) = v61;
    *(_QWORD *)(v10 + 8) = v61;
    ++*(_QWORD *)(v10 + 24);
    if ((v51 & 0x20) == 0)
    {
LABEL_57:
      if ((v51 & 0x10) == 0)
        goto LABEL_58;
      goto LABEL_75;
    }
LABEL_71:
    v63 = operator new();
    *(_QWORD *)(v63 + 8) = 0;
    v18 = *v20;
    *(_DWORD *)v63 = v18;
    v17 = *(_QWORD *)(v10 + 48);
    if (v17 < 2)
      goto LABEL_139;
    v64 = v63;
    v65 = v10 + 56;
    if ((v17 & 1) != 0)
      v65 = *(_QWORD *)v19;
    *(_WORD *)(v63 + 4) = (v52 | 2) + *(_WORD *)(v65 + 4);
    v66 = operator new(0x18uLL);
    v67 = *(_QWORD *)(v10 + 8);
    v66[1] = v115;
    v66[2] = v64;
    *v66 = v67;
    *(_QWORD *)(v67 + 8) = v66;
    *(_QWORD *)(v10 + 8) = v66;
    ++*(_QWORD *)(v10 + 24);
    if ((v51 & 0x10) == 0)
    {
LABEL_58:
      if ((v51 & 8) == 0)
        goto LABEL_59;
      goto LABEL_79;
    }
LABEL_75:
    v68 = operator new();
    *(_QWORD *)(v68 + 8) = 0;
    v18 = *v20;
    *(_DWORD *)v68 = v18;
    v17 = *(_QWORD *)(v10 + 48);
    if (v17 < 2)
      goto LABEL_139;
    v69 = v68;
    v70 = v10 + 56;
    if ((v17 & 1) != 0)
      v70 = *(_QWORD *)v19;
    *(_WORD *)(v68 + 4) = (v52 | 3) + *(_WORD *)(v70 + 4);
    v71 = operator new(0x18uLL);
    v72 = *(_QWORD *)(v10 + 8);
    v71[1] = v115;
    v71[2] = v69;
    *v71 = v72;
    *(_QWORD *)(v72 + 8) = v71;
    *(_QWORD *)(v10 + 8) = v71;
    ++*(_QWORD *)(v10 + 24);
    if ((v51 & 8) == 0)
    {
LABEL_59:
      if ((v51 & 4) == 0)
        goto LABEL_60;
      goto LABEL_83;
    }
LABEL_79:
    v73 = operator new();
    *(_QWORD *)(v73 + 8) = 0;
    v18 = *v20;
    *(_DWORD *)v73 = v18;
    v17 = *(_QWORD *)(v10 + 48);
    if (v17 < 2)
      goto LABEL_139;
    v74 = v73;
    v75 = v10 + 56;
    if ((v17 & 1) != 0)
      v75 = *(_QWORD *)v19;
    *(_WORD *)(v73 + 4) = (v52 | 4) + *(_WORD *)(v75 + 4);
    v76 = operator new(0x18uLL);
    v77 = *(_QWORD *)(v10 + 8);
    v76[1] = v115;
    v76[2] = v74;
    *v76 = v77;
    *(_QWORD *)(v77 + 8) = v76;
    *(_QWORD *)(v10 + 8) = v76;
    ++*(_QWORD *)(v10 + 24);
    if ((v51 & 4) == 0)
    {
LABEL_60:
      if ((v51 & 2) != 0)
        goto LABEL_87;
      goto LABEL_61;
    }
LABEL_83:
    v78 = operator new();
    *(_QWORD *)(v78 + 8) = 0;
    v18 = *v20;
    *(_DWORD *)v78 = v18;
    v17 = *(_QWORD *)(v10 + 48);
    if (v17 < 2)
      goto LABEL_139;
    v79 = v78;
    v80 = v10 + 56;
    if ((v17 & 1) != 0)
      v80 = *(_QWORD *)v19;
    *(_WORD *)(v78 + 4) = (v52 | 5) + *(_WORD *)(v80 + 4);
    v81 = operator new(0x18uLL);
    v82 = *(_QWORD *)(v10 + 8);
    v81[1] = v115;
    v81[2] = v79;
    *v81 = v82;
    *(_QWORD *)(v82 + 8) = v81;
    *(_QWORD *)(v10 + 8) = v81;
    ++*(_QWORD *)(v10 + 24);
    if ((v51 & 2) != 0)
    {
LABEL_87:
      v83 = operator new();
      *(_QWORD *)(v83 + 8) = 0;
      v18 = *v20;
      *(_DWORD *)v83 = v18;
      v17 = *(_QWORD *)(v10 + 48);
      if (v17 < 2)
        goto LABEL_139;
      v84 = v83;
      v85 = v10 + 56;
      if ((v17 & 1) != 0)
        v85 = *(_QWORD *)v19;
      *(_WORD *)(v83 + 4) = (v52 | 6) + *(_WORD *)(v85 + 4);
      v86 = operator new(0x18uLL);
      v87 = *(_QWORD *)(v10 + 8);
      v86[1] = v115;
      v86[2] = v84;
      *v86 = v87;
      *(_QWORD *)(v87 + 8) = v86;
      *(_QWORD *)(v10 + 8) = v86;
      ++*(_QWORD *)(v10 + 24);
      if ((v51 & 1) == 0)
        goto LABEL_49;
      goto LABEL_91;
    }
LABEL_61:
    if ((v51 & 1) == 0)
      goto LABEL_49;
LABEL_91:
    v88 = operator new();
    *(_QWORD *)(v88 + 8) = 0;
    v18 = *v20;
    *(_DWORD *)v88 = v18;
    v17 = *(_QWORD *)(v10 + 48);
    if (v17 < 2)
      goto LABEL_139;
    v89 = v88;
    v90 = v10 + 56;
    if ((v17 & 1) != 0)
      v90 = *(_QWORD *)v19;
    *(_WORD *)(v88 + 4) = (v52 | 7) + *(_WORD *)(v90 + 4);
    v48 = operator new(0x18uLL);
    v49 = *(_QWORD *)(v10 + 8);
    v48[1] = v115;
    v48[2] = v89;
    *v48 = v49;
    *(_QWORD *)(v49 + 8) = v48;
    *(_QWORD *)(v10 + 8) = v48;
    ++*(_QWORD *)(v10 + 24);
LABEL_49:
    v46 = (unsigned __int16)++v47;
  }
  v50 = *(_QWORD *)v19;
  if (*(_QWORD *)(*(_QWORD *)v19 + 16) > v46)
    goto LABEL_54;
LABEL_94:
  if (*(_QWORD *)(v10 + 24))
  {
    v91 = *(_QWORD *)(v10 + 16);
    v92 = (uint64_t *)a3[1];
    v5 = v114;
    if (v91 == v115 || v92 == a3)
    {
LABEL_100:
      v94 = operator new(0x18uLL);
      v94[1] = v6;
      v94[2] = v10;
      v95 = v114[6];
      *v94 = v95;
      *(_QWORD *)(v95 + 8) = v94;
      v114[6] = (uint64_t)v94;
      v96 = (uint64_t *)v114[7];
      v97 = v114[8] + 1;
      v114[8] = v97;
      std::list<std::unique_ptr<webrtc::ForwardErrorCorrection::RecoveredPacket>>::__sort<webrtc::ForwardErrorCorrection::SortablePacket::LessThan>(v96, v6, v97);
      v98 = v114[8];
      if (v98 > *(_QWORD *)(v114[1] + 16))
      {
        v99 = (uint64_t *)v114[7];
        v100 = *v99;
        *(_QWORD *)(v100 + 8) = v99[1];
        *(_QWORD *)v99[1] = v100;
        v114[8] = v98 - 1;
        v101 = (webrtc::ForwardErrorCorrection::ReceivedFecPacket *)v99[2];
        v99[2] = 0;
        if (v101)
        {
          webrtc::ForwardErrorCorrection::ReceivedFecPacket::~ReceivedFecPacket(v101);
          MEMORY[0x20BD0ADEC]();
        }
        operator delete(v99);
      }
      goto LABEL_38;
    }
    while (1)
    {
      v103 = v92[2];
      v104 = *(unsigned __int16 *)(v103 + 4);
      v105 = *(_QWORD *)(v91 + 16);
      v106 = *(unsigned __int16 *)(v105 + 4);
      if (v104 - v106 == 0x8000)
      {
        if (v104 > v106)
          goto LABEL_104;
      }
      else if (v104 != v106 && (((_WORD)v104 - (_WORD)v106) & 0x8000) == 0)
      {
LABEL_104:
        v91 = *(_QWORD *)(v91 + 8);
        if (v91 == v115 || v92 == a3)
          goto LABEL_100;
        continue;
      }
      if (v106 - v104 == 0x8000)
      {
        if (v106 > v104)
          goto LABEL_117;
      }
      else if (v106 != v104 && (((_WORD)v106 - (_WORD)v104) & 0x8000) == 0)
      {
LABEL_117:
        v92 = (uint64_t *)v92[1];
        if (v91 == v115 || v92 == a3)
          goto LABEL_100;
        continue;
      }
      v110 = *(_QWORD *)(v103 + 16);
      if (v110)
        (*(void (**)(uint64_t))(*(_QWORD *)v110 + 16))(v110);
      v111 = *(_QWORD *)(v105 + 8);
      if (v111)
        (*(void (**)(uint64_t))(*(_QWORD *)v111 + 24))(v111);
      *(_QWORD *)(v105 + 8) = v110;
      v91 = *(_QWORD *)(v91 + 8);
      v92 = (uint64_t *)v92[1];
      if (v91 == v115 || v92 == a3)
        goto LABEL_100;
    }
  }
  v5 = v114;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_36:
    rtc::webrtc_logging_impl::Log("\r\t", v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction.cc");
LABEL_37:
  webrtc::ForwardErrorCorrection::ReceivedFecPacket::~ReceivedFecPacket((webrtc::ForwardErrorCorrection::ReceivedFecPacket *)v10);
  MEMORY[0x20BD0ADEC]();
LABEL_38:
  v40 = *(_QWORD *)(v5[1] + 8);
  while (1)
  {
    v41 = a3[2];
    if (v41 <= v40)
      break;
    v42 = (uint64_t *)a3[1];
    v43 = *v42;
    *(_QWORD *)(v43 + 8) = v42[1];
    *(_QWORD *)v42[1] = v43;
    a3[2] = v41 - 1;
    v44 = v42[2];
    v42[2] = 0;
    if (v44)
    {
      v45 = *(_QWORD *)(v44 + 16);
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
      MEMORY[0x20BD0ADEC](v44, 0x1020C407D5D75B9);
    }
    operator delete(v42);
  }
}

void webrtc::ForwardErrorCorrection::AttemptRecovery(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  webrtc::ForwardErrorCorrection::ReceivedFecPacket *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *i;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  __int16 v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  char *v79;
  char v80;
  int8x16_t *v81;
  int8x16_t *v82;
  unint64_t v83;
  int8x16_t v84;
  unint64_t v85;
  int8x8_t *v86;
  int8x8_t *v87;
  unint64_t v88;
  int8x8_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  webrtc::ForwardErrorCorrection::ReceivedFecPacket *v96;
  uint64_t v97;
  uint64_t v98;
  webrtc::ForwardErrorCorrection::ReceivedFecPacket *v99;
  uint64_t v101;
  uint64_t *v103;

  v2 = a1 + 6;
  v3 = (uint64_t *)a1[7];
  if (v3 == a1 + 6)
    return;
  v4 = a2;
  v5 = a1;
  v101 = 0;
  v103 = a1 + 6;
  while (1)
  {
    v6 = v3[2];
    v7 = v6 + 8;
    v8 = *(_QWORD *)(v6 + 16);
    if (v8 != v6 + 8)
    {
      v9 = 0;
      do
      {
        if (!*(_QWORD *)(*(_QWORD *)(v8 + 16) + 8) && v9++ > 0)
          break;
        v8 = *(_QWORD *)(v8 + 8);
      }
      while (v8 != v7);
      if (v9)
        break;
    }
LABEL_23:
    if (v3 == v2)
      goto LABEL_95;
    v25 = *v3;
    v26 = (uint64_t *)v3[1];
    *(_QWORD *)(v25 + 8) = v26;
    *(_QWORD *)v3[1] = v25;
    --v5[8];
    v27 = (webrtc::ForwardErrorCorrection::ReceivedFecPacket *)v3[2];
    v3[2] = 0;
    if (v27)
    {
      webrtc::ForwardErrorCorrection::ReceivedFecPacket::~ReceivedFecPacket(v27);
      MEMORY[0x20BD0ADEC]();
    }
    operator delete(v3);
LABEL_4:
    v3 = v26;
LABEL_5:
    if (v3 == v2)
      return;
  }
  if (v9 != 1)
  {
    if (!v4[2])
      goto LABEL_26;
    if (!*(_QWORD *)(v6 + 24))
      goto LABEL_95;
    v24 = (__int16)(*(_WORD *)(*(_QWORD *)(*v4 + 16) + 4) - *(_WORD *)(*(_QWORD *)(*(_QWORD *)v7 + 16) + 4));
    if (v24 < 0)
      v24 = -v24;
    if ((unsigned __int16)v24 < 0x4000u)
    {
LABEL_26:
      v3 = (uint64_t *)v3[1];
      goto LABEL_5;
    }
    goto LABEL_23;
  }
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = 0;
  v12 = (_QWORD *)v3[2];
  v13 = operator new();
  *(_QWORD *)v13 = &off_24C0B43E8;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_DWORD *)(v13 + 32) = 1;
  v14 = *(_QWORD *)(v11 + 16);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  *(_QWORD *)(v11 + 16) = v13;
  v15 = v12[19];
  v16 = v12[5];
  if (*(_QWORD *)(v12[20] + 24) < v15 + v16)
  {
    v5 = a1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      goto LABEL_81;
    goto LABEL_82;
  }
  v28 = 1500 - v16;
  if (v28 >= 0x5D0)
    v28 = 1488;
  if (v15 > v28)
  {
    v5 = a1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_81:
      rtc::webrtc_logging_impl::Log("\r\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction.cc");
LABEL_82:
    v2 = v103;
    if (v3 == v103)
      goto LABEL_95;
    v95 = *v3;
    v26 = (uint64_t *)v3[1];
    *(_QWORD *)(v95 + 8) = v26;
    *(_QWORD *)v3[1] = v95;
    --v5[8];
    v96 = (webrtc::ForwardErrorCorrection::ReceivedFecPacket *)v3[2];
    v3[2] = 0;
    if (v96)
    {
      webrtc::ForwardErrorCorrection::ReceivedFecPacket::~ReceivedFecPacket(v96);
      MEMORY[0x20BD0ADEC]();
    }
    operator delete(v3);
    v97 = *(_QWORD *)(v11 + 16);
    if (v97)
      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97);
    MEMORY[0x20BD0ADEC](v11, 0x1020C407D5D75B9);
    goto LABEL_4;
  }
  rtc::CopyOnWriteBuffer::EnsureCapacity((uint64_t *)(v13 + 8), (uint64_t *)0x5DC);
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)(*(_QWORD *)(v11 + 16) + 8), (uint64_t *)(v12[19] + 12));
  *(_WORD *)(v11 + 8) = 1;
  v29 = *(uint64_t **)(v11 + 16);
  v30 = v29[1];
  v31 = v29[2];
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(++v29, (uint64_t *)(*(_QWORD *)(v30 + 8) - v31));
  v32 = *(_QWORD *)(*v29 + 16) + v29[1];
  v33 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v12[20] + 8) + 16) + *(_QWORD *)(v12[20] + 16));
  v34 = *v33;
  *(_DWORD *)(v32 + 8) = *((_DWORD *)v33 + 2);
  *(_QWORD *)v32 = v34;
  if (v12[19])
  {
    v35 = *(_QWORD *)(v11 + 16);
    v36 = *(_QWORD *)(v35 + 8);
    if (v36)
    {
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)(v35 + 8), (uint64_t *)(*(_QWORD *)(v36 + 8) - *(_QWORD *)(v35 + 16)));
      v36 = *(_QWORD *)(*(_QWORD *)(v35 + 8) + 16) + *(_QWORD *)(v35 + 16);
    }
    v37 = v12[20];
    v38 = *(_QWORD *)(v37 + 8);
    if (v38)
      v39 = *(_QWORD *)(v38 + 16) + *(_QWORD *)(v37 + 16);
    else
      v39 = 0;
    memcpy((void *)(v36 + 12), (const void *)(v39 + v12[5]), v12[19]);
  }
  v40 = v12 + 1;
  for (i = (_QWORD *)v12[2]; i != v40; i = (_QWORD *)i[1])
  {
    while (1)
    {
      v59 = i[2];
      v60 = *(_QWORD *)(v59 + 8);
      if (v60)
        break;
      *(_WORD *)(v11 + 4) = *(_WORD *)(v59 + 4);
      *(_DWORD *)v11 = *(_DWORD *)v59;
      i = (_QWORD *)i[1];
      if (i == v40)
        goto LABEL_40;
    }
    v61 = *(uint64_t **)(v11 + 16);
    v62 = v61[1];
    v63 = v61[2];
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(++v61, (uint64_t *)(*(_QWORD *)(v62 + 8) - v63));
    v64 = (_BYTE *)(*(_QWORD *)(*v61 + 16) + v61[1]);
    v65 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) + 16) + *(_QWORD *)(v60 + 16));
    *v64 ^= *v65;
    v64[1] ^= v65[1];
    v66 = *(_WORD *)(v60 + 24) - 12;
    v64[2] ^= HIBYTE(v66);
    v64[3] ^= v66;
    v64[4] ^= v65[4];
    v64[5] ^= v65[5];
    v64[6] ^= v65[6];
    v64[7] ^= v65[7];
    v67 = *(_QWORD *)(i[2] + 8);
    v68 = *(_QWORD *)(v67 + 24);
    v69 = *(uint64_t **)(v11 + 16);
    v70 = v69 + 1;
    v71 = v69[3];
    if (v68 > v71)
    {
      rtc::CopyOnWriteBuffer::SetSize(v69 + 1, *(uint64_t **)(v67 + 24));
      v72 = *v70;
      if (*v70)
      {
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v69 + 1, (uint64_t *)(*(_QWORD *)(v72 + 8) - v69[2]));
        v72 = *(_QWORD *)(v69[1] + 16) + v69[2];
      }
      bzero((void *)(v72 + v71), v68 - v71);
    }
    v73 = *v70;
    if (*v70)
    {
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v69 + 1, (uint64_t *)(*(_QWORD *)(v73 + 8) - v69[2]));
      v73 = *(_QWORD *)(v69[1] + 16) + v69[2];
    }
    v74 = *(_QWORD *)(v67 + 8);
    if (v74)
      v74 = *(_QWORD *)(v74 + 16) + *(_QWORD *)(v67 + 16);
    v75 = v68 - 12;
    if (v68 == 12)
      continue;
    if (v75 >= 8 && (v73 + 12 >= v74 + v68 || v74 + 12 >= v73 + v68))
    {
      if (v75 < 0x20)
      {
        v76 = 0;
LABEL_70:
        v85 = v76;
        v76 = v75 & 0xFFFFFFFFFFFFFFF8;
        v86 = (int8x8_t *)(v73 + v85 + 12);
        v87 = (int8x8_t *)(v74 + v85 + 12);
        v88 = v85 - (v75 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v89 = *v87++;
          *v86 = veor_s8(*v86, v89);
          ++v86;
          v88 += 8;
        }
        while (v88);
        if (v75 == v76)
          continue;
        goto LABEL_60;
      }
      v76 = v75 & 0xFFFFFFFFFFFFFFE0;
      v81 = (int8x16_t *)(v74 + 28);
      v82 = (int8x16_t *)(v73 + 28);
      v83 = v75 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v84 = veorq_s8(*v82, *v81);
        v82[-1] = veorq_s8(v82[-1], v81[-1]);
        *v82 = v84;
        v81 += 2;
        v82 += 2;
        v83 -= 32;
      }
      while (v83);
      if (v75 == v76)
        continue;
      if ((v75 & 0x18) != 0)
        goto LABEL_70;
    }
    else
    {
      v76 = 0;
    }
LABEL_60:
    v77 = v68 - v76 - 12;
    v78 = (_BYTE *)(v73 + v76 + 12);
    v79 = (char *)(v74 + v76 + 12);
    do
    {
      v80 = *v79++;
      *v78++ ^= v80;
      --v77;
    }
    while (v77);
  }
LABEL_40:
  v42 = *(uint64_t **)(v11 + 16);
  v43 = v42[1];
  v44 = v42[2];
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(++v42, (uint64_t *)(*(_QWORD *)(v43 + 8) - v44));
  v45 = *(_QWORD *)(*v42 + 16) + v42[1];
  *(_BYTE *)v45 = *(_BYTE *)v45 & 0x3F | 0x80;
  v46 = __rev16(*(unsigned __int16 *)(v45 + 2));
  if (v46 >= 0x5C5)
  {
    v4 = a2;
    v5 = a1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      goto LABEL_81;
    goto LABEL_82;
  }
  v47 = (uint64_t *)(v46 + 12);
  v48 = *(_QWORD *)(v11 + 16);
  v49 = *(_QWORD *)(v48 + 24);
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)(v48 + 8), v47);
  v50 = *(_QWORD *)(v11 + 16);
  v51 = *(_QWORD *)(v50 + 8);
  v4 = a2;
  v5 = a1;
  if (v51)
  {
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)(v50 + 8), (uint64_t *)(*(_QWORD *)(v51 + 8) - *(_QWORD *)(v50 + 16)));
    v52 = *(_QWORD *)(*(_QWORD *)(v50 + 8) + 16) + *(_QWORD *)(v50 + 16);
    v53 = (size_t)v47 - v49;
    if ((unint64_t)v47 > v49)
      goto LABEL_43;
  }
  else
  {
    v52 = 0;
    v53 = (size_t)v47 - v49;
    if ((unint64_t)v47 > v49)
LABEL_43:
      bzero((void *)(v52 + v49), v53);
  }
  *(_WORD *)(v52 + 2) = bswap32(*(unsigned __int16 *)(v11 + 4)) >> 16;
  *(_DWORD *)(v52 + 8) = bswap32(*(_DWORD *)v11);
  v54 = operator new(0x18uLL);
  v54[1] = a2;
  v54[2] = v11;
  v55 = *a2;
  *v54 = *a2;
  *(_QWORD *)(v55 + 8) = v54;
  *a2 = (uint64_t)v54;
  v56 = (uint64_t *)a2[1];
  v57 = a2[2] + 1;
  a2[2] = v57;
  std::list<std::unique_ptr<webrtc::ForwardErrorCorrection::RecoveredPacket>>::__sort<webrtc::ForwardErrorCorrection::SortablePacket::LessThan>(v56, a2, v57);
  webrtc::ForwardErrorCorrection::UpdateCoveringFecPackets(a1, v11);
  v58 = *(_QWORD *)(a1[1] + 8);
  while (1)
  {
    v90 = a2[2];
    if (v90 <= v58)
      break;
    v91 = (uint64_t *)a2[1];
    v92 = *v91;
    *(_QWORD *)(v92 + 8) = v91[1];
    *(_QWORD *)v91[1] = v92;
    a2[2] = v90 - 1;
    v93 = v91[2];
    v91[2] = 0;
    if (v93)
    {
      v94 = *(_QWORD *)(v93 + 16);
      if (v94)
        (*(void (**)(uint64_t))(*(_QWORD *)v94 + 24))(v94);
      MEMORY[0x20BD0ADEC](v93, 0x1020C407D5D75B9);
    }
    operator delete(v91);
  }
  v2 = v103;
  if (v3 != v103)
  {
    v98 = *v3;
    *(_QWORD *)(v98 + 8) = v3[1];
    *(_QWORD *)v3[1] = v98;
    --a1[8];
    v99 = (webrtc::ForwardErrorCorrection::ReceivedFecPacket *)v3[2];
    v3[2] = 0;
    if (v99)
    {
      webrtc::ForwardErrorCorrection::ReceivedFecPacket::~ReceivedFecPacket(v99);
      MEMORY[0x20BD0ADEC]();
    }
    ++v101;
    operator delete(v3);
    v3 = (uint64_t *)a1[7];
    goto LABEL_5;
  }
LABEL_95:
  __break(1u);
}

void webrtc::ForwardErrorCorrection::DecodeFec(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a1[1] + 8);
  if (a3[2] != v6)
  {
LABEL_11:
    webrtc::ForwardErrorCorrection::InsertPacket(a1, a2, a3);
    webrtc::ForwardErrorCorrection::AttemptRecovery(a1, a3);
    return;
  }
  if (v6)
  {
    v7 = *(_QWORD *)(*a3 + 16);
    if (*(_DWORD *)a2 == *(_DWORD *)v7)
    {
      LODWORD(v7) = (__int16)(*(_WORD *)(a2 + 4) - *(_WORD *)(v7 + 4));
      v7 = (v7 & 0x80000000) == 0 ? v7 : -(int)v7;
      if (v6 < v7)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction.cc");
        webrtc::ForwardErrorCorrection::ResetState(a1, a3);
      }
    }
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t *std::list<std::unique_ptr<webrtc::ForwardErrorCorrection::RecoveredPacket>>::__sort<webrtc::ForwardErrorCorrection::SortablePacket::LessThan>(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *i;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *j;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  if (a3 < 2)
    return result;
  if (a3 == 2)
  {
    v4 = (uint64_t *)*a2;
    v5 = *(unsigned __int16 *)(result[2] + 4);
    v6 = *(unsigned __int16 *)(*(_QWORD *)(*a2 + 16) + 4);
    if (v5 - v6 == 0x8000)
    {
      if (v5 <= v6)
        return result;
    }
    else if (v5 == v6 || (((_WORD)v5 - (_WORD)v6) & 0x8000) != 0)
    {
      return result;
    }
    v18 = *v4;
    *(_QWORD *)(v18 + 8) = v4[1];
    *(_QWORD *)v4[1] = v18;
    v19 = *result;
    *(_QWORD *)(v19 + 8) = v4;
    *v4 = v19;
    *result = (uint64_t)v4;
    v4[1] = (uint64_t)result;
    return v4;
  }
  v8 = a3 >> 1;
  v9 = (a3 >> 1) + 1;
  v10 = result;
  do
  {
    v10 = (uint64_t *)v10[1];
    --v9;
  }
  while (v9 > 1);
  v11 = (uint64_t *)std::list<std::unique_ptr<webrtc::ForwardErrorCorrection::RecoveredPacket>>::__sort<webrtc::ForwardErrorCorrection::SortablePacket::LessThan>(result, v10, a3 >> 1);
  result = (uint64_t *)std::list<std::unique_ptr<webrtc::ForwardErrorCorrection::RecoveredPacket>>::__sort<webrtc::ForwardErrorCorrection::SortablePacket::LessThan>(v10, a2, a3 - v8);
  v12 = *(unsigned __int16 *)(v11[2] + 4);
  v13 = *(unsigned __int16 *)(result[2] + 4);
  if (v12 - v13 == 0x8000)
  {
    if (v12 > v13)
    {
LABEL_10:
      for (i = (uint64_t *)result[1]; i != a2; i = (uint64_t *)i[1])
      {
        v16 = *(unsigned __int16 *)(i[2] + 4);
        if (v12 - v16 == 0x8000)
        {
          if (v12 <= v16)
            goto LABEL_34;
        }
        else if (v12 == v16 || (((_WORD)v12 - (_WORD)v16) & 0x8000) != 0)
        {
          goto LABEL_34;
        }
      }
      i = a2;
LABEL_34:
      v22 = *i;
      v23 = *result;
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(*i + 8);
      **(_QWORD **)(v22 + 8) = v23;
      v24 = *v11;
      v21 = (uint64_t *)v11[1];
      *(_QWORD *)(v24 + 8) = result;
      *result = v24;
      *v11 = v22;
      *(_QWORD *)(v22 + 8) = v11;
      if (v21 == i)
        return result;
      goto LABEL_35;
    }
  }
  else if (v12 != v13 && (((_WORD)v12 - (_WORD)v13) & 0x8000) == 0)
  {
    goto LABEL_10;
  }
  v21 = (uint64_t *)v11[1];
  i = result;
  result = v11;
  if (v21 == i)
    return result;
LABEL_35:
  if (i != a2)
  {
    v25 = i;
    do
    {
      v26 = *(unsigned __int16 *)(v21[2] + 4);
      v27 = *(unsigned __int16 *)(i[2] + 4);
      if (v26 - v27 == 0x8000)
      {
        if (v26 <= v27)
          goto LABEL_54;
      }
      else if (v26 == v27 || (((_WORD)v26 - (_WORD)v27) & 0x8000) != 0)
      {
LABEL_54:
        v21 = (uint64_t *)v21[1];
        if (v21 == v25)
          return result;
        continue;
      }
      for (j = (uint64_t *)i[1]; j != a2; j = (uint64_t *)j[1])
      {
        v30 = *(unsigned __int16 *)(j[2] + 4);
        if (v26 - v30 == 0x8000)
        {
          if (v26 <= v30)
            goto LABEL_57;
        }
        else if (v26 == v30 || (((_WORD)v26 - (_WORD)v30) & 0x8000) != 0)
        {
          goto LABEL_57;
        }
      }
      j = a2;
LABEL_57:
      v32 = *j;
      v33 = *i;
      *(_QWORD *)(v33 + 8) = *(_QWORD *)(*j + 8);
      **(_QWORD **)(v32 + 8) = v33;
      if (v25 == i)
        v25 = j;
      v35 = *v21;
      v34 = (uint64_t *)v21[1];
      *(_QWORD *)(v35 + 8) = i;
      *i = v35;
      *v21 = v32;
      *(_QWORD *)(v32 + 8) = v21;
      v21 = v34;
      i = j;
      if (v34 == v25)
        return result;
    }
    while (i != a2);
  }
  return result;
}

unsigned __int8 *webrtc::internal::PacketMaskTable::LookUp(webrtc::internal::PacketMaskTable *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  int64x2_t v34;
  int32x2_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int v41;
  int8x16_t v42;
  int v43;
  int8x16_t v44;
  int v45;
  int8x16_t v46;
  char v48;
  char v50;
  BOOL v53;
  char v54;
  BOOL v57;
  BOOL v58;
  char v59;
  char v60;
  char v62;
  char v64;
  char v66;
  BOOL v68;
  char v69;
  char v70;
  BOOL v73;
  BOOL v74;
  char v75;
  char v76;
  unsigned __int8 *v77;
  char *v80;
  uint64_t v81;

  if ((int)a2 > 12)
  {
    if (a2 <= 0x10)
      v22 = 2;
    else
      v22 = 6;
    if (a3 < 1)
    {
LABEL_146:
      v77 = (unsigned __int8 *)this + 8;
      goto LABEL_148;
    }
    v23 = 0;
    v24 = 0;
    v25 = (uint64x2_t)vdupq_n_s64(v22 - 1);
    v80 = (char *)this + 9;
    v26 = (int8x16_t)vdupq_n_s64(1uLL);
    v27 = (int8x16_t)vdupq_n_s64(2uLL);
    v28 = (int8x16_t)vdupq_n_s64(3uLL);
    v29 = (int8x16_t)vdupq_n_s64(4uLL);
    v30 = (int8x16_t)vdupq_n_s64(5uLL);
    v31 = (int8x16_t)vdupq_n_s64(6uLL);
    v32 = (int8x16_t)vdupq_n_s64(7uLL);
    v81 = v22;
LABEL_13:
    v33 = &v80[v23];
    v34 = (int64x2_t)xmmword_208F05120;
    while (1)
    {
      v35 = vmovn_s64((int64x2_t)vcgeq_u64(v25, (uint64x2_t)v34));
      v36 = (int8x16_t)vshlq_n_s64(v34, 3uLL);
      if ((v35.i8[0] & 1) != 0)
      {
        v9 = v36.i32[0] % a3;
        if ((v35.i8[4] & 1) == 0)
        {
LABEL_17:
          v37 = vorrq_s8(v36, v26);
          if ((v35.i8[0] & 1) == 0)
            goto LABEL_18;
          goto LABEL_34;
        }
      }
      else if ((v35.i8[4] & 1) == 0)
      {
        goto LABEL_17;
      }
      a8 = v36.i32[2] % a3;
      v37 = vorrq_s8(v36, v26);
      if ((v35.i8[0] & 1) == 0)
      {
LABEL_18:
        if ((v35.i8[4] & 1) == 0)
          goto LABEL_19;
        goto LABEL_35;
      }
LABEL_34:
      v11 = v37.i32[0] % a3;
      if ((v35.i8[4] & 1) == 0)
      {
LABEL_19:
        v38 = vorrq_s8(v36, v27);
        if ((v35.i8[0] & 1) == 0)
          goto LABEL_20;
        goto LABEL_36;
      }
LABEL_35:
      v8 = v37.i32[2] % a3;
      v38 = vorrq_s8(v36, v27);
      if ((v35.i8[0] & 1) == 0)
      {
LABEL_20:
        if ((v35.i8[4] & 1) == 0)
          goto LABEL_21;
        goto LABEL_37;
      }
LABEL_36:
      v13 = v38.i32[0] % a3;
      if ((v35.i8[4] & 1) == 0)
      {
LABEL_21:
        v39 = vorrq_s8(v36, v28);
        if ((v35.i8[0] & 1) == 0)
          goto LABEL_22;
        goto LABEL_38;
      }
LABEL_37:
      v10 = v38.i32[2] % a3;
      v39 = vorrq_s8(v36, v28);
      if ((v35.i8[0] & 1) == 0)
      {
LABEL_22:
        if ((v35.i8[4] & 1) == 0)
          goto LABEL_23;
        goto LABEL_39;
      }
LABEL_38:
      v15 = v39.i32[0] % a3;
      if ((v35.i8[4] & 1) == 0)
      {
LABEL_23:
        v40 = vorrq_s8(v36, v29);
        if ((v35.i8[0] & 1) == 0)
          goto LABEL_24;
        goto LABEL_40;
      }
LABEL_39:
      v12 = v39.i32[2] % a3;
      v40 = vorrq_s8(v36, v29);
      if ((v35.i8[0] & 1) == 0)
      {
LABEL_24:
        v41 = v35.i32[1];
        if ((v35.i8[4] & 1) == 0)
          goto LABEL_25;
        goto LABEL_41;
      }
LABEL_40:
      v17 = v40.i32[0] % a3;
      v41 = v35.i32[1];
      if ((v35.i8[4] & 1) == 0)
      {
LABEL_25:
        v42 = vorrq_s8(v36, v30);
        if ((v35.i8[0] & 1) == 0)
          goto LABEL_26;
        goto LABEL_42;
      }
LABEL_41:
      v41 = v40.i32[2];
      v14 = v40.i32[2] % a3;
      v42 = vorrq_s8(v36, v30);
      if ((v35.i8[0] & 1) == 0)
      {
LABEL_26:
        v43 = v35.i32[1];
        if ((v35.i8[4] & 1) == 0)
          goto LABEL_27;
        goto LABEL_43;
      }
LABEL_42:
      v41 = v42.i32[0] % a3;
      v43 = v35.i32[1];
      if ((v35.i8[4] & 1) == 0)
      {
LABEL_27:
        v44 = vorrq_s8(v36, v31);
        v45 = v35.i32[0];
        if ((v35.i8[0] & 1) == 0)
          goto LABEL_28;
        goto LABEL_44;
      }
LABEL_43:
      v43 = v42.i32[2];
      v16 = v42.i32[2] % a3;
      v44 = vorrq_s8(v36, v31);
      v45 = v35.i32[0];
      if ((v35.i8[0] & 1) == 0)
      {
LABEL_28:
        if ((v35.i8[4] & 1) == 0)
          goto LABEL_29;
        goto LABEL_45;
      }
LABEL_44:
      v45 = v44.i32[0] / a3;
      v43 = v44.i32[0] % a3;
      if ((v35.i8[4] & 1) == 0)
      {
LABEL_29:
        v46 = vorrq_s8(v36, v32);
        if ((v35.i8[0] & 1) != 0)
          goto LABEL_46;
        goto LABEL_30;
      }
LABEL_45:
      v45 = v44.i32[2] % a3;
      v46 = vorrq_s8(v36, v32);
      if ((v35.i8[0] & 1) != 0)
      {
LABEL_46:
        if (v24 != v9 || v36.i64[0] >= (unint64_t)a2)
          v48 = 0;
        else
          v48 = 0x80;
        if (v24 != v11 || v37.i64[0] >= (unint64_t)a2)
          v50 = 0;
        else
          v50 = 64;
        if (v24 != v13 || v38.i64[0] >= (unint64_t)a2)
          v11 = 0;
        else
          v11 = 32;
        if (v24 != v15 || v39.i64[0] >= (unint64_t)a2)
          v13 = 0;
        else
          v13 = 16;
        v53 = v24 != v17 || v40.i64[0] >= (unint64_t)a2;
        v54 = v50 | v48;
        if (v53)
          v9 = 0;
        else
          v9 = 8;
        if (v24 != v41 || v42.i64[0] >= (unint64_t)a2)
          v15 = 0;
        else
          v15 = 4;
        v57 = v46.i64[0] < (unint64_t)a2 && v24 == v46.i32[0] % a3;
        v58 = v24 != v43 || v44.i64[0] >= (unint64_t)a2;
        v59 = v54 | v11 | v13;
        if (v58)
          v60 = 0;
        else
          v60 = 2;
        *(v33 - 1) = v59 | v9 | v15 | v60 | v57;
        if ((v35.i8[4] & 1) == 0)
          goto LABEL_14;
LABEL_95:
        if (v24 != a8 || v36.i64[1] >= (unint64_t)a2)
          v62 = 0;
        else
          v62 = 0x80;
        if (v24 != v8 || v37.i64[1] >= (unint64_t)a2)
          v64 = 0;
        else
          v64 = 64;
        if (v24 != v10 || v38.i64[1] >= (unint64_t)a2)
          v66 = 0;
        else
          v66 = 32;
        if (v24 != v12 || v39.i64[1] >= (unint64_t)a2)
          a8 = 0;
        else
          a8 = 16;
        v68 = v24 != v14 || v40.i64[1] >= (unint64_t)a2;
        v69 = v64 | v62;
        if (v68)
          v70 = 0;
        else
          v70 = 8;
        if (v24 != v16 || v42.i64[1] >= (unint64_t)a2)
          v9 = 0;
        else
          v9 = 4;
        v73 = v46.i64[1] < (unint64_t)a2 && v24 == v46.i32[2] % a3;
        v8 = v44.i32[2];
        v74 = v24 != v45 || v44.i64[1] >= (unint64_t)a2;
        v75 = v69 | v66 | a8;
        if (v74)
          v76 = 0;
        else
          v76 = 2;
        *v33 = v75 | v70 | v9 | v76 | v73;
        goto LABEL_14;
      }
LABEL_30:
      if ((v35.i8[4] & 1) != 0)
        goto LABEL_95;
LABEL_14:
      v34 = vaddq_s64(v34, vdupq_n_s64(2uLL));
      v33 += 2;
      v22 -= 2;
      if (!v22)
      {
        ++v24;
        v22 = v81;
        v23 += v81;
        if (v24 == a3)
          goto LABEL_146;
        goto LABEL_13;
      }
    }
  }
  v18 = (unsigned __int8 *)(*(_QWORD *)this + 1);
  if ((int)a2 >= 2)
  {
    v19 = a2 - 1;
    do
    {
      v21 = *v18++;
      v20 = v21;
      if (v21)
        v18 += (4 * (v20 - 1) + (v20 - 1) * (unint64_t)(v20 - 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
      --v19;
    }
    while (v19);
  }
  if (a3 < 2)
    v77 = v18 + 1;
  else
    v77 = &v18[4 * (a3 - 1)
             - 1
             + ((((a3 - 1) - 1) * ((a3 - 1) - 2)) & 0xFFFFFFFFFFFFFFFELL)];
LABEL_148:
  if (a3)
    return v77;
  else
    return 0;
}

const void *webrtc::internal::GeneratePacketMasks(const void *this, int a2, unsigned int a3, uint64_t a4, webrtc::internal::PacketMaskTable *a5, webrtc::internal::PacketMaskTable *a6, unsigned __int8 *a7, int a8)
{
  unsigned int v11;
  int v12;
  int v13;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  size_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  char *v24;

  v11 = this;
  if (a3 && (a4 & 1) != 0)
  {
    if (this <= 0x10)
      v12 = 2;
    else
      v12 = 6;
    v13 = (int)(float)((float)a2 * 0.5);
    if (v13 >= (int)a3)
      v13 = a3;
    if ((int)(2 * a3) < (int)this && a2 == 1)
      v15 = 0;
    else
      v15 = v13;
    v16 = a2 - v15;
    if (v15 >= 1)
    {
      if (a3 >= 0x11)
        v17 = 6;
      else
        v17 = 2;
      this = webrtc::internal::PacketMaskTable::LookUp(a5, a3, v15, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
      if (v17 == v12)
      {
        this = memcpy(a6, this, v15 * v12);
      }
      else
      {
        v21 = 0;
        v22 = 0;
        v23 = v15;
        do
        {
          *((_BYTE *)a6 + v21) = *((_BYTE *)this + v22);
          *((_BYTE *)a6 + (v21 | 1)) = *((_BYTE *)this + (v22 | 1));
          if (a3 >= 0x11)
          {
            v24 = (char *)a6 + v21;
            v24[2] = *((_BYTE *)this + v22 + 2);
            v24[3] = *((_BYTE *)this + v22 + 3);
            v24[4] = *((_BYTE *)this + v22 + 4);
            v24[5] = *((_BYTE *)this + v22 + 5);
          }
          v22 += v17;
          v21 += v12;
          --v23;
        }
        while (v23);
      }
    }
    if (v16 >= 1)
    {
      v18 = webrtc::internal::PacketMaskTable::LookUp(a5, v11, v16, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
      return memcpy((char *)a6 + v15 * v12, v18, v16 * v12);
    }
  }
  else
  {
    v20 = webrtc::internal::PacketMaskTable::LookUp(a5, this, a2, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
    return memcpy(a6, v20, v19);
  }
  return this;
}

void dcsctp::ForwardTsnChunk::Parse(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 *v3;
  int v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  char v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *i;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  unint64_t v41;

  if (a2)
    v3 = a1;
  else
    v3 = 0;
  if (a2 < 8
    || *v3 != 192
    || ((v4 = v3[3], v5 = v4 | (v3[2] << 8), (v4 & 3) == 0) ? (v6 = v5 >= 8) : (v6 = 0),
        v6 ? (v7 = a2 >= v5) : (v7 = 0),
        v7 ? (v8 = a2 - v5 >= 4) : (v8 = 1),
        v8))
  {
    v9 = 0;
    *a3 = 0;
  }
  else
  {
    v39 = a3;
    v40 = *((_DWORD *)v3 + 1);
    v10 = v5 - 8;
    if (v5 - 8 >= 4)
    {
      v14 = v10 >> 2;
      v15 = 12 * (v10 >> 2);
      v16 = (char *)operator new(v15);
      v13 = v16;
      v21 = 0;
      v11 = &v16[v15];
      if (v14 <= 1)
        v22 = 1;
      else
        v22 = v14;
      v23 = (v5 - 5) >> 2;
      v12 = v16;
      v41 = v5;
      while (1)
      {
        if (4 * v21 + 12 > v5)
          goto LABEL_46;
        if (v21 == v23)
          break;
        v24 = 4 * v21 + 8;
        v25 = v5 - v24;
        if (v5 - v24 >= 4)
          v25 = 4;
        if (v25 <= 3)
          break;
        v26 = &v3[v24];
        v27 = bswap32(*(unsigned __int16 *)v26) >> 16;
        v28 = bswap32(*((unsigned __int16 *)v26 + 1)) >> 16;
        if (v12 < v11)
        {
          *(_WORD *)v12 = v27;
          *((_WORD *)v12 + 1) = v28;
          v12[4] = 0;
          *((_DWORD *)v12 + 2) = 0;
          v12 += 12;
          if (++v21 == v22)
            goto LABEL_44;
        }
        else
        {
          v29 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 2) + 1;
          if (v29 > 0x1555555555555555)
            goto LABEL_47;
          if (0x5555555555555556 * ((v11 - v13) >> 2) > v29)
            v29 = 0x5555555555555556 * ((v11 - v13) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v11 - v13) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v29 = 0x1555555555555555;
          if (!v29)
          {
            __break(1u);
LABEL_49:
            std::__throw_bad_array_new_length[abi:sn180100]();
          }
          if (v29 > 0x1555555555555555)
            goto LABEL_49;
          v30 = v23;
          v31 = v22;
          v32 = 12 * v29;
          v33 = (char *)operator new(12 * v29);
          v34 = &v33[4 * ((v12 - v13) >> 2)];
          *(_WORD *)v34 = v27;
          *((_WORD *)v34 + 1) = v28;
          v34[4] = 0;
          *((_DWORD *)v34 + 2) = 0;
          for (i = v34; v12 != v13; *((_DWORD *)i + 2) = v37)
          {
            v36 = *(_QWORD *)(v12 - 12);
            v12 -= 12;
            v37 = *((_DWORD *)v12 + 2);
            *(_QWORD *)(i - 12) = v36;
            i -= 12;
          }
          v11 = &v33[v32];
          v12 = v34 + 12;
          if (v13)
            operator delete(v13);
          v13 = i;
          v22 = v31;
          v23 = v30;
          v5 = v41;
          if (++v21 == v31)
            goto LABEL_44;
        }
      }
      rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 55, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v17, v18, v19, v20, v38);
LABEL_46:
      rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 80, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v17, v18, v19, v20, v38);
LABEL_47:
      abort();
    }
    v11 = 0;
    v12 = 0;
    v13 = 0;
LABEL_44:
    a3 = v39;
    *((_DWORD *)v39 + 2) = bswap32(v40);
    *((_QWORD *)v39 + 2) = v13;
    *((_QWORD *)v39 + 3) = v12;
    *((_QWORD *)v39 + 4) = v11;
    *(_QWORD *)v39 = &off_24C0B4418;
    v9 = 1;
  }
  a3[40] = v9;
}

void dcsctp::ForwardTsnChunk::~ForwardTsnChunk(dcsctp::ForwardTsnChunk *this)
{
  void *v2;

  *(_QWORD *)this = &unk_24C0B1348;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &unk_24C0B1348;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::ForwardTsnChunk::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  _WORD *v27;
  unsigned int v28;
  std::string *v29;
  uint64_t v30;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v13 = v11 - v10;
  v12 = v11 == v10;
  v14 = (unsigned __int128)((v11 - v10) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v15 = (v14 >> 1) + ((unint64_t)v14 >> 63);
  if (v12)
    v16 = 0;
  else
    v16 = *(_QWORD *)(a1 + 16);
  v17 = 4 * v15;
  v18 = *(char **)a2;
  v19 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v20 = 4 * v15 + 8;
  if (v19 >= v20 + v19)
  {
    if (v19 > v20 + v19)
      *(_QWORD *)(a2 + 8) = &v18[v20 + v19];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 4 * v15 + 8);
    v18 = *(char **)a2;
  }
  v21 = &v18[v19];
  *v21 = -64;
  v21[2] = BYTE1(v20);
  v21[3] = v20;
  if (v17 >= 0xFFFFFFFFFFFFFFF8)
  {
LABEL_20:
    v29 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v30);
    dcsctp::ForwardTsnChunk::ToString((dcsctp::ForwardTsnChunk *)v29);
    return;
  }
  v22 = *(char **)a2;
  *(_DWORD *)(*(_QWORD *)a2 + v19 + 4) = bswap32(*(_DWORD *)(a1 + 8));
  if ((unint64_t)(v13 + 11) >= 0x17)
  {
    v23 = 0;
    if (v15 <= 1)
      v24 = 1;
    else
      v24 = v15;
    v25 = (unsigned __int16 *)(v16 + 2);
    v26 = (uint64_t)&v22[v19 + 8];
    while (v23 + 12 <= v20)
    {
      if (v17 == v23 || v20 <= v23 + 8)
        goto LABEL_20;
      v27 = (_WORD *)(v26 + v23);
      *v27 = bswap32(*(v25 - 1)) >> 16;
      v28 = *v25;
      v25 += 6;
      v27[1] = bswap32(v28) >> 16;
      v23 += 4;
      if (!--v24)
        return;
    }
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 84, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v30);
    goto LABEL_20;
  }
}

void dcsctp::ForwardTsnChunk::ToString(dcsctp::ForwardTsnChunk *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string *v11;
  _DWORD *v12;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  std::string::size_type v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v22;
  std::string v23;

  v4 = (char *)operator new(0x30uLL);
  if (v4 <= "FORWARD-TSN, new_cumulative_tsn=" && v4 + 32 > "FORWARD-TSN, new_cumulative_tsn=")
  {
LABEL_51:
    __break(1u);
  }
  else
  {
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
    strcpy(v4, "FORWARD-TSN, new_cumulative_tsn=");
    *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = xmmword_208F086C0;
    rtc::StringBuilder::operator<<(&v23, *((_DWORD *)this + 2));
    v5 = (unsigned __int16 *)*((_QWORD *)this + 2);
    v6 = *((_QWORD *)this + 3) - (_QWORD)v5;
    if (v6)
      v7 = *((_QWORD *)this + 2);
    else
      v7 = 0;
    if (v6)
    {
      v8 = (unsigned __int16 *)(v7 + v6);
      do
      {
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = 22;
        else
          v9 = (v23.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        else
          size = v23.__r_.__value_.__l.__size_;
        if (v9 - size >= 7)
        {
          if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v11 = &v23;
          else
            v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
          v12 = (_DWORD *)((char *)v11 + size);
          if ((char *)v11 + size <= ", skip " && (char *)v11->__r_.__value_.__r.__words + size + 7 > ", skip ")
            goto LABEL_51;
          *(_DWORD *)((char *)v12 + 3) = 544237931;
          *v12 = 1802706988;
          v14 = size + 7;
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
            v23.__r_.__value_.__l.__size_ = size + 7;
          else
            *((_BYTE *)&v23.__r_.__value_.__s + 23) = v14 & 0x7F;
          v11->__r_.__value_.__s.__data_[v14] = 0;
        }
        else
        {
          std::string::__grow_by_and_replace(&v23, v9, size - v9 + 7, size, size, 0, 7uLL, ", skip ");
        }
        v15 = rtc::StringBuilder::operator<<(&v23, *v5);
        v16 = v15;
        v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
        v18 = (char)v17;
        if ((v17 & 0x80u) == 0)
          v19 = 22;
        else
          v19 = (v15->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v17 & 0x80u) != 0)
          v17 = v15->__r_.__value_.__l.__size_;
        if (v19 == v17)
        {
          std::string::__grow_by_and_replace(v15, v19, 1uLL, v19, v19, 0, 1uLL, ":");
        }
        else
        {
          if (v18 >= 0)
            v20 = v15;
          else
            v20 = (std::string *)v15->__r_.__value_.__r.__words[0];
          if ((char *)v20 + v17 <= ":" && (char *)&v20->__r_.__value_.__l.__data_ + v17 + 1 > ":")
            goto LABEL_51;
          v20->__r_.__value_.__s.__data_[v17] = 58;
          v22 = v17 + 1;
          if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0)
            v15->__r_.__value_.__l.__size_ = v22;
          else
            *((_BYTE *)&v15->__r_.__value_.__s + 23) = v22 & 0x7F;
          v20->__r_.__value_.__s.__data_[v22] = 0;
        }
        rtc::StringBuilder::operator<<(v16, v5[1]);
        v5 += 6;
      }
      while (v5 != v8);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a2, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
    }
    else
    {
      *a2 = v23;
    }
  }
}

double dcsctp::ForwardTsnSupportedParameter::SerializeTo(uint64_t a1, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  double result;

  v3 = *(char **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v4 > 0xFFFFFFFFFFFFFFFBLL)
  {
    *(_QWORD *)(a2 + 8) = &v3[v4 + 4];
    *(_QWORD *)&result = 67109056;
    *(_DWORD *)&v3[v4] = 67109056;
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 4uLL);
    *(_QWORD *)&result = 67109056;
    *(_DWORD *)(*(_QWORD *)a2 + v4) = 67109056;
  }
  return result;
}

webrtc::FrameBlocker *webrtc::FrameBlocker::FrameBlocker(webrtc::FrameBlocker *this, unint64_t a2, unint64_t a3)
{
  webrtc::FrameBlocker *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  uint64_t *v44;
  webrtc::FrameBlocker *v45;
  uint64_t *v46;
  unint64_t v47;

  v4 = this;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  if (a3)
  {
    if (a3 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_42;
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = &v6[v5];
    bzero(v6, 24 * ((v5 - 24) / 0x18uLL) + 24);
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = 0;
    *((_QWORD *)v4 + 4) = 0;
    if (a2)
      goto LABEL_4;
LABEL_15:
    v10 = 0;
    v22 = 0;
    if (!v6)
      goto LABEL_26;
    goto LABEL_19;
  }
  v7 = 0;
  v6 = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  if (!a2)
    goto LABEL_15;
LABEL_4:
  if (a2 > 0xAAAAAAAAAAAAAAALL)
LABEL_42:
    abort();
  v8 = 3 * a2;
  v9 = (uint64_t *)operator new(24 * a2);
  *((_QWORD *)v4 + 2) = v9;
  *((_QWORD *)v4 + 3) = v9;
  v10 = &v9[3 * a2];
  *((_QWORD *)v4 + 4) = v10;
  v11 = v7 - v6;
  v44 = v9;
  v45 = v4;
  if (v7 == v6)
  {
    bzero(v9, 24 * ((v8 * 8 - 24) / 0x18uLL) + 24);
  }
  else
  {
    v47 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    if (v47 > 0xAAAAAAAAAAAAAAALL)
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      abort();
    }
    v12 = v9;
    v46 = &v9[v8];
    do
    {
      v12[1] = 0;
      v12[2] = 0;
      v13 = (char *)operator new(v11);
      v14 = 0;
      *v12 = (uint64_t)v13;
      v12[1] = (uint64_t)v13;
      v12[2] = (uint64_t)&v13[24 * v47];
      do
      {
        v15 = &v6[v14];
        v16 = &v13[v14];
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = 0;
        v18 = *(_BYTE **)&v6[v14];
        v17 = *(_BYTE **)&v6[v14 + 8];
        v19 = v17 - v18;
        if (v17 != v18)
        {
          if (v19 < 0)
            goto LABEL_42;
          v20 = (char *)operator new(v17 - v18);
          *(_QWORD *)v16 = v20;
          *((_QWORD *)v16 + 1) = v20;
          v21 = &v20[4 * (v19 >> 2)];
          *((_QWORD *)v16 + 2) = v21;
          memcpy(v20, v18, v19);
          *((_QWORD *)v16 + 1) = v21;
        }
        v14 += 24;
      }
      while (v15 + 24 != v7);
      v12[1] = (uint64_t)&v13[v14];
      v12 += 3;
      v11 = v7 - v6;
      v10 = v46;
    }
    while (v12 != v46);
  }
  v22 = v44;
  v4 = v45;
  *((_QWORD *)v45 + 3) = v10;
  if (!v6)
    goto LABEL_26;
LABEL_19:
  if (v7 != v6)
  {
    v23 = v7;
    do
    {
      v25 = (void *)*((_QWORD *)v23 - 3);
      v23 -= 24;
      v24 = v25;
      if (v25)
      {
        *((_QWORD *)v7 - 2) = v24;
        operator delete(v24);
      }
      v7 = v23;
    }
    while (v23 != v6);
  }
  operator delete(v6);
  v22 = (uint64_t *)*((_QWORD *)v4 + 2);
  v10 = (uint64_t *)*((_QWORD *)v4 + 3);
LABEL_26:
  if (v22 != v10)
  {
    v26 = *v22;
    v27 = v22[1];
    while (1)
    {
      if (v26 == v27)
      {
        v22 += 3;
        goto LABEL_26;
      }
      v28 = *(_BYTE **)v26;
      if (*(_QWORD *)(v26 + 16) - *(_QWORD *)v26 <= 0xFFuLL)
        break;
LABEL_28:
      v26 += 24;
    }
    v29 = *(_BYTE **)(v26 + 8);
    v30 = (char *)operator new(0x100uLL);
    v31 = v29 - v28;
    v32 = &v30[(v29 - v28) & 0xFFFFFFFFFFFFFFFCLL];
    v33 = v32;
    if (v29 != v28)
    {
      if ((unint64_t)(v31 - 4) >= 0x2C)
      {
        v33 = &v30[(v29 - v28) & 0xFFFFFFFFFFFFFFFCLL];
        if (v29 - v30 - (v31 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
        {
          v34 = v31 >> 2;
          v35 = ((unint64_t)(v31 - 4) >> 2) + 1;
          v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
          v37 = &v29[-v36];
          v33 = &v32[-v36];
          v38 = &v30[4 * v34 - 16];
          v39 = (__int128 *)(v29 - 16);
          v40 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v41 = *v39;
            *((_OWORD *)v38 - 1) = *(v39 - 1);
            *(_OWORD *)v38 = v41;
            v38 -= 32;
            v39 -= 2;
            v40 -= 8;
          }
          while (v40);
          v29 = v37;
          if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_39;
        }
      }
      else
      {
        v33 = &v30[(v29 - v28) & 0xFFFFFFFFFFFFFFFCLL];
      }
      do
      {
        v42 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *((_DWORD *)v33 - 1) = v42;
        v33 -= 4;
      }
      while (v29 != v28);
    }
LABEL_39:
    *(_QWORD *)v26 = v33;
    *(_QWORD *)(v26 + 8) = v32;
    *(_QWORD *)(v26 + 16) = v30 + 256;
    if (v28)
      operator delete(v28);
    goto LABEL_28;
  }
  return v4;
}

void webrtc::FrameBlocker::InsertSubFrameAndExtractBlock(unint64_t *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char **v22;
  char *v23;
  char **v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  unint64_t v50;
  uint64_t v53;

  v3 = *a1;
  if (*a1)
  {
    v4 = a1;
    if (a1[1])
    {
      v5 = a2;
      v6 = 0;
      v7 = 1;
      while (!v7)
      {
LABEL_5:
        if (++v6 >= v3)
          return;
      }
      v8 = 0;
      while (1)
      {
        v9 = v4[2];
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[3] - v9) >> 3) <= v6)
          goto LABEL_42;
        v11 = (uint64_t *)(v9 + 24 * v6);
        v10 = *v11;
        if (0xAAAAAAAAAAAAAAABLL * ((v11[1] - *v11) >> 3) <= v8)
          goto LABEL_42;
        v12 = v10 + 24 * v8;
        v13 = *(_QWORD *)(v12 + 8);
        v14 = v13 - *(_QWORD *)v12;
        if (v13 != *(_QWORD *)v12)
          memmove((void *)(*(_QWORD *)(a3 + 8) + 4 * (((int)v8 + *(_DWORD *)(a3 + 4) * (int)v6) << 6)), *(const void **)v12, v14);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3) <= v6)
          goto LABEL_42;
        v16 = (uint64_t *)(*v5 + 24 * v6);
        v15 = *v16;
        if (v8 >= (v16[1] - *v16) >> 4)
          goto LABEL_42;
        v17 = 0x4000000000 - (v14 << 30);
        v18 = v17 >> 32;
        if (v14 << 30 != 0x4000000000)
          memmove((void *)(*(_QWORD *)(a3 + 8) + 4 * (((int)v8 + *(_DWORD *)(a3 + 4) * (int)v6) << 6) - 4 * v18 + 256), *(const void **)(v15 + 16 * v8), v17 >> 30);
        v19 = v4[2];
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[3] - v19) >> 3) <= v6)
          goto LABEL_42;
        v21 = (uint64_t *)(v19 + 24 * v6);
        v20 = *v21;
        if (0xAAAAAAAAAAAAAAABLL * ((v21[1] - *v21) >> 3) <= v8
          || (v22 = (char **)(v20 + 24 * v8),
              v23 = *v22,
              v22[1] = *v22,
              v24 = v22 + 1,
              0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3) <= v6)
          || (v26 = (uint64_t *)(*v5 + 24 * v6), v25 = *v26, v8 >= (v26[1] - *v26) >> 4))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
        v27 = (uint64_t *)(v25 + 16 * v8);
        v29 = *v27;
        v28 = v27[1];
        v30 = (int *)(v29 + 4 * v18);
        v31 = v29 + 4 * v28;
        v32 = v31 - (_QWORD)v30;
        if (v31 - (uint64_t)v30 < 1)
          goto LABEL_9;
        v53 = v18;
        v33 = v32 >> 2;
        v34 = v20 + 24 * v8;
        v36 = *(_QWORD *)(v34 + 16);
        v35 = (_QWORD *)(v34 + 16);
        v37 = v36 - (_QWORD)v23;
        if (v32 >> 2 <= (v36 - (uint64_t)v23) >> 2)
        {
          if (v53 != v28)
            memmove(v23, v30, v31 - (_QWORD)v30);
          *v24 = &v23[4 * v33];
          v5 = a2;
          goto LABEL_9;
        }
        v38 = v37 >> 1;
        if (v37 >> 1 <= v33)
          v38 = v32 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        if (v38 >> 62)
          goto LABEL_43;
        v50 = v38;
        v39 = (char *)operator new(4 * v38);
        v40 = &v39[4 * v33];
        if ((unint64_t)(v32 - 4) < 0x1C)
        {
          v41 = v39;
          v42 = v50;
          v5 = a2;
        }
        else
        {
          v41 = v39;
          v42 = v50;
          v5 = a2;
          if ((unint64_t)(v39 - (char *)v30) >= 0x20)
          {
            v43 = ((unint64_t)(v32 - 4) >> 2) + 1;
            v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
            v30 = (int *)((char *)v30 + v44);
            v41 = &v39[v44];
            v45 = v39 + 16;
            v46 = (__int128 *)(v29 + 4 * v53 + 16);
            v47 = v43 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v48 = *v46;
              *(v45 - 1) = *(v46 - 1);
              *v45 = v48;
              v45 += 2;
              v46 += 2;
              v47 -= 8;
            }
            while (v47);
            if (v43 == (v43 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_39;
          }
        }
        do
        {
          v49 = *v30++;
          *(_DWORD *)v41 = v49;
          v41 += 4;
        }
        while (v41 != v40);
LABEL_39:
        *v22 = v39;
        *v24 = v40;
        *v35 = &v39[4 * v42];
        if (v23)
          operator delete(v23);
LABEL_9:
        ++v8;
        v4 = a1;
        v7 = a1[1];
        if (v8 >= v7)
        {
          v3 = *a1;
          goto LABEL_5;
        }
      }
    }
  }
}

unint64_t *webrtc::FrameBlocker::ExtractBlock(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;

  v2 = *result;
  if (*result)
  {
    v3 = result;
    if (result[1])
    {
      v5 = 0;
      v6 = 1;
      while (!v6)
      {
LABEL_4:
        if (++v5 >= v2)
          return result;
      }
      v7 = 0;
      v8 = 0;
      v10 = v3[2];
      v9 = v3[3];
      while (1)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v10) >> 3);
        if (v11 <= v5)
          break;
        v12 = *(_QWORD *)(v10 + 24 * v5);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v10 + 24 * v5 + 8) - v12) >> 3) <= v8)
          break;
        v13 = v12 + v7;
        v14 = *(_BYTE **)v13;
        v15 = *(_BYTE **)(v13 + 8);
        if (v15 != v14)
        {
          result = (unint64_t *)memmove((void *)(*(_QWORD *)(a2 + 8)+ 4 * (((int)v8 + (int)v5 * *(_DWORD *)(a2 + 4)) << 6)), v14, v15 - v14);
          v10 = v3[2];
          v9 = v3[3];
          v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v10) >> 3);
        }
        if (v11 <= v5)
          break;
        v16 = *(_QWORD *)(v10 + 24 * v5);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v10 + 24 * v5 + 8) - v16) >> 3) <= v8)
          break;
        *(_QWORD *)(v16 + v7 + 8) = *(_QWORD *)(v16 + v7);
        ++v8;
        v6 = v3[1];
        v7 += 24;
        if (v8 >= v6)
        {
          v2 = *v3;
          goto LABEL_4;
        }
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t webrtc::FrameBuffer::FrameBuffer(uint64_t a1, int a2, signed int a3, uint64_t a4)
{
  _QWORD *p_p;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  void *__p;
  unint64_t v16;
  unsigned __int8 v17;

  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a4 + 16))(&__p, a4, "WebRTC-LegacyFrameIdJumpBehavior", 32);
  if ((char)v17 < 0)
  {
    v8 = v16;
    if ((v16 & 0x8000000000000000) != 0 || (p_p = __p, v16) && !__p)
    {
      __break(1u);
      goto LABEL_22;
    }
  }
  else
  {
    p_p = &__p;
    v8 = v17;
  }
  if (v8 >= 8)
  {
    v9 = *p_p != 0x64656C6261736944;
    if ((v17 & 0x80) == 0)
      goto LABEL_11;
  }
  else
  {
    v9 = 1;
    if ((v17 & 0x80) == 0)
      goto LABEL_11;
  }
  operator delete(__p);
LABEL_11:
  *(_BYTE *)a1 = v9;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (!a3)
    goto LABEL_20;
  if (a3 < 0)
LABEL_22:
    abort();
  v10 = (unint64_t)(a3 - 1) >> 6;
  v11 = operator new(8 * (v10 + 1));
  v12 = v11;
  *(_QWORD *)(a1 + 120) = a3;
  *(_QWORD *)(a1 + 128) = v10 + 1;
  *(_QWORD *)(a1 + 112) = v11;
  if (a3 >= 0x41)
    v13 = (unint64_t)(a3 - 1) >> 6;
  else
    v13 = 0;
  v11[v13] = 0;
  if (a3 >= 0x40)
    bzero(v11, 8 * ((unint64_t)a3 >> 6));
  if ((a3 & 0x3F) != 0)
    v12[(unint64_t)a3 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(a3 & 0x3F));
LABEL_20:
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  return a1;
}

uint64_t webrtc::FrameBuffer::InsertFrame(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  _QWORD **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  BOOL v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  BOOL v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  BOOL v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  BOOL v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  BOOL v116;
  _QWORD *v117;
  BOOL v118;
  uint64_t v119;
  unsigned int v120;
  BOOL v121;
  int v122;
  int v123;
  int v124;
  unint64_t v125;
  uint64_t v126;

  v3 = result;
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 328);
  v6 = *(_QWORD *)(*a2 + 2408);
  if (v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t *)(v4 + 344);
    v10 = v5 - 1;
    do
    {
      v11 = *(_QWORD *)(v4 + 8 * v8 + 336);
      if (v11 >= v6)
        break;
      ++v8;
      v12 = v10;
      v13 = v9;
      if (v8 < v5)
      {
        do
        {
          v14 = *v13++;
          result = v14;
          if (v11 == v14)
            goto LABEL_9;
        }
        while (--v12);
      }
      --v10;
      ++v9;
      v7 = v8 >= v5;
    }
    while (v8 != v5);
LABEL_9:
    if (!v7)
      return 0;
  }
  if (*(_BYTE *)(v3 + 160))
    v15 = v6 <= *(_QWORD *)(v3 + 152);
  else
    v15 = 0;
  if (v15)
  {
    if (v5)
      v118 = 1;
    else
      v118 = *(_BYTE *)v3 == 0;
    if (v118)
      return 0;
    v119 = *(_QWORD *)(v3 + 168);
    if ((v119 & 0xFF00000000) == 0)
    {
      __break(1u);
      return result;
    }
    v120 = *(_DWORD *)(v4 + 160);
    v121 = v120 >= v119;
    v122 = v120 - v119;
    if (!v122)
      return 0;
    v123 = v122 != 0 && v121;
    v124 = v122 == 0x80000000 ? v123 : v122 >= 0;
    if (v124 != 1)
      return 0;
    std::__tree<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>>>::destroy(v3 + 16, *(_QWORD **)(v3 + 24));
    *(_QWORD *)(v3 + 16) = v3 + 24;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    if (*(_BYTE *)(v3 + 56))
      *(_BYTE *)(v3 + 56) = 0;
    if (*(_BYTE *)(v3 + 72))
      *(_BYTE *)(v3 + 72) = 0;
    if (*(_BYTE *)(v3 + 88))
      *(_BYTE *)(v3 + 88) = 0;
    if (*(_BYTE *)(v3 + 104))
      *(_BYTE *)(v3 + 104) = 0;
    if (*(_BYTE *)(v3 + 172))
      *(_BYTE *)(v3 + 172) = 0;
    if (*(_BYTE *)(v3 + 160))
      *(_BYTE *)(v3 + 160) = 0;
    v125 = *(_QWORD *)(v3 + 120);
    if (v125)
    {
      v126 = *(_QWORD *)(v3 + 112);
      if (v125 >= 0x40)
        bzero(*(void **)(v3 + 112), 8 * (v125 >> 6));
      if ((v125 & 0x3F) != 0)
        *(_QWORD *)(v126 + 8 * (v125 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v125 & 0x3F));
    }
    if (*(_BYTE *)(v3 + 144))
      *(_BYTE *)(v3 + 144) = 0;
  }
  v16 = (_QWORD **)(v3 + 16);
  if (*(_QWORD *)(v3 + 32) != *(_QWORD *)(v3 + 8))
    goto LABEL_35;
  if (*(_QWORD *)(*a2 + 328))
    return 0;
  std::__tree<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>>>::destroy(v3 + 16, *(_QWORD **)(v3 + 24));
  *(_QWORD *)(v3 + 16) = v3 + 24;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  if (*(_BYTE *)(v3 + 56))
    *(_BYTE *)(v3 + 56) = 0;
  if (*(_BYTE *)(v3 + 72))
    *(_BYTE *)(v3 + 72) = 0;
  if (*(_BYTE *)(v3 + 88))
    *(_BYTE *)(v3 + 88) = 0;
  if (*(_BYTE *)(v3 + 104))
    *(_BYTE *)(v3 + 104) = 0;
  if (*(_BYTE *)(v3 + 172))
    *(_BYTE *)(v3 + 172) = 0;
  if (*(_BYTE *)(v3 + 160))
    *(_BYTE *)(v3 + 160) = 0;
  v17 = *(_QWORD *)(v3 + 120);
  if (v17)
  {
    v18 = *(_QWORD *)(v3 + 112);
    if (v17 >= 0x40)
      bzero(*(void **)(v3 + 112), 8 * (v17 >> 6));
    if ((v17 & 0x3F) != 0)
      *(_QWORD *)(v18 + 8 * (v17 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v17 & 0x3F));
  }
  if (*(_BYTE *)(v3 + 144))
    *(_BYTE *)(v3 + 144) = 0;
LABEL_35:
  v19 = *a2;
  v20 = *(_QWORD *)(*a2 + 2408);
  *a2 = 0;
  v22 = (_QWORD *)(v3 + 24);
  v21 = *(uint64_t **)(v3 + 24);
  v23 = (uint64_t **)(v3 + 24);
  v24 = (uint64_t **)(v3 + 24);
  if (v21)
  {
    while (1)
    {
      while (1)
      {
        v24 = (uint64_t **)v21;
        v25 = v21[4];
        if (v20 >= v25)
          break;
        v21 = *v24;
        v23 = v24;
        if (!*v24)
          goto LABEL_42;
      }
      if (v25 >= v20)
        break;
      v21 = v24[1];
      if (!v21)
      {
        v23 = v24 + 1;
        goto LABEL_42;
      }
    }
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    return 0;
  }
LABEL_42:
  v26 = operator new(0x38uLL);
  v26[4] = v20;
  v26[5] = v19;
  *((_BYTE *)v26 + 48) = 0;
  *v26 = 0;
  v26[1] = 0;
  v26[2] = v24;
  *v23 = v26;
  v27 = (_QWORD *)**v16;
  v28 = v26;
  if (v27)
  {
    *v16 = v27;
    v28 = *v23;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 24), v28);
  ++*(_QWORD *)(v3 + 32);
  if (v22 != v26)
  {
    while (*((_BYTE *)v26 + 48))
    {
LABEL_48:
      v29 = (_QWORD *)v26[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v26[2];
          v118 = *v30 == (_QWORD)v26;
          v26 = v30;
        }
        while (!v118);
      }
      v26 = v30;
      if (v30 == v22)
        goto LABEL_205;
    }
    v31 = v26[5];
    v32 = (uint64_t *)(v31 + 336);
    v33 = *(_QWORD *)(v31 + 328);
    if (v33 >= 5)
      v34 = 5;
    else
      v34 = v33;
    if (v34)
      v35 = v32;
    else
      v35 = 0;
    if (!v34)
      goto LABEL_82;
    v36 = *v35;
    if (*(_BYTE *)(v3 + 144))
    {
      v37 = *(_QWORD *)(v3 + 136);
      v38 = *(_QWORD *)(v3 + 120);
      if ((uint64_t)(v37 - v38) >= v36)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/decoded_frames_history.cc");
      }
      else if (v37 >= v36)
      {
        v39 = v36 % v38;
        if (((v36 % v38) & 0x80000000) == 0)
          LODWORD(v38) = 0;
        if (((*(_QWORD *)(*(_QWORD *)(v3 + 112)
                         + (((unint64_t)((int)v38 + (int)v39) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v38 + v39)) & 1) != 0)
          goto LABEL_81;
      }
    }
    v47 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_48;
    v48 = (_QWORD *)(v3 + 24);
    do
    {
      v49 = v47[4];
      v50 = v49 < v36;
      if (v49 >= v36)
        v51 = v47;
      else
        v51 = v47 + 1;
      if (!v50)
        v48 = v47;
      v47 = (_QWORD *)*v51;
    }
    while (*v51);
    if (v48 == v22 || v36 < v48[4] || !*((_BYTE *)v48 + 48))
      goto LABEL_48;
LABEL_81:
    if (v34 == 1)
      goto LABEL_82;
    v54 = v35[1];
    if (*(_BYTE *)(v3 + 144))
    {
      v55 = *(_QWORD *)(v3 + 136);
      v56 = *(_QWORD *)(v3 + 120);
      if ((uint64_t)(v55 - v56) >= v54)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/decoded_frames_history.cc");
      }
      else if (v55 >= v54)
      {
        v57 = v54 % v56;
        if (((v54 % v56) & 0x80000000) == 0)
          LODWORD(v56) = 0;
        if (((*(_QWORD *)(*(_QWORD *)(v3 + 112)
                         + (((unint64_t)((int)v56 + (int)v57) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v56 + v57)) & 1) != 0)
          goto LABEL_109;
      }
    }
    v65 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_48;
    v66 = (_QWORD *)(v3 + 24);
    do
    {
      v67 = v65[4];
      v68 = v67 < v54;
      if (v67 >= v54)
        v69 = v65;
      else
        v69 = v65 + 1;
      if (!v68)
        v66 = v65;
      v65 = (_QWORD *)*v69;
    }
    while (*v69);
    if (v66 == v22 || v54 < v66[4] || !*((_BYTE *)v66 + 48))
      goto LABEL_48;
LABEL_109:
    if (v34 == 2)
      goto LABEL_82;
    v70 = v35[2];
    if (*(_BYTE *)(v3 + 144))
    {
      v71 = *(_QWORD *)(v3 + 136);
      v72 = *(_QWORD *)(v3 + 120);
      if ((uint64_t)(v71 - v72) >= v70)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v74, v75, v76, v77, v78, v79, v80, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/decoded_frames_history.cc");
      }
      else if (v71 >= v70)
      {
        v73 = v70 % v72;
        if (((v70 % v72) & 0x80000000) == 0)
          LODWORD(v72) = 0;
        if (((*(_QWORD *)(*(_QWORD *)(v3 + 112)
                         + (((unint64_t)((int)v72 + (int)v73) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v72 + v73)) & 1) != 0)
          goto LABEL_130;
      }
    }
    v81 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_48;
    v82 = (_QWORD *)(v3 + 24);
    do
    {
      v83 = v81[4];
      v84 = v83 < v70;
      if (v83 >= v70)
        v85 = v81;
      else
        v85 = v81 + 1;
      if (!v84)
        v82 = v81;
      v81 = (_QWORD *)*v85;
    }
    while (*v85);
    if (v82 == v22 || v70 < v82[4] || !*((_BYTE *)v82 + 48))
      goto LABEL_48;
LABEL_130:
    if (v34 == 3)
      goto LABEL_82;
    v86 = v35[3];
    if (*(_BYTE *)(v3 + 144))
    {
      v87 = *(_QWORD *)(v3 + 136);
      v88 = *(_QWORD *)(v3 + 120);
      if ((uint64_t)(v87 - v88) >= v86)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v90, v91, v92, v93, v94, v95, v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/decoded_frames_history.cc");
      }
      else if (v87 >= v86)
      {
        v89 = v86 % v88;
        if (((v86 % v88) & 0x80000000) == 0)
          LODWORD(v88) = 0;
        if (((*(_QWORD *)(*(_QWORD *)(v3 + 112)
                         + (((unint64_t)((int)v88 + (int)v89) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v88 + v89)) & 1) != 0)
          goto LABEL_151;
      }
    }
    v97 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_48;
    v98 = (_QWORD *)(v3 + 24);
    do
    {
      v99 = v97[4];
      v100 = v99 < v86;
      if (v99 >= v86)
        v101 = v97;
      else
        v101 = v97 + 1;
      if (!v100)
        v98 = v97;
      v97 = (_QWORD *)*v101;
    }
    while (*v101);
    if (v98 == v22 || v86 < v98[4] || !*((_BYTE *)v98 + 48))
      goto LABEL_48;
LABEL_151:
    if (v34 != 4)
    {
      v102 = v35[4];
      if (*(_BYTE *)(v3 + 144))
      {
        v103 = *(_QWORD *)(v3 + 136);
        v104 = *(_QWORD *)(v3 + 120);
        if ((uint64_t)(v103 - v104) >= v102)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v106, v107, v108, v109, v110, v111, v112, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/decoded_frames_history.cc");
        }
        else if (v103 >= v102)
        {
          v105 = v102 % v104;
          if (((v102 % v104) & 0x80000000) == 0)
            LODWORD(v104) = 0;
          if (((*(_QWORD *)(*(_QWORD *)(v3 + 112)
                           + (((unint64_t)((int)v104 + (int)v105) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v104 + v105)) & 1) != 0)
            goto LABEL_82;
        }
      }
      v113 = (_QWORD *)*v22;
      if (!*v22)
        goto LABEL_48;
      v114 = (_QWORD *)(v3 + 24);
      do
      {
        v115 = v113[4];
        v116 = v115 < v102;
        if (v115 >= v102)
          v117 = v113;
        else
          v117 = v113 + 1;
        if (!v116)
          v114 = v113;
        v113 = (_QWORD *)*v117;
      }
      while (*v117);
      if (v114 == v22 || v102 < v114[4] || !*((_BYTE *)v114 + 48))
        goto LABEL_48;
    }
LABEL_82:
    *((_BYTE *)v26 + 48) = 1;
    v52 = v26[4];
    if (!*(_BYTE *)(v3 + 88) || *(_QWORD *)(v3 + 80) < v52)
    {
      *(_QWORD *)(v3 + 80) = v52;
      *(_BYTE *)(v3 + 88) = 1;
    }
    if (*(_BYTE *)(v26[5] + 376))
    {
      ++*(_DWORD *)(v3 + 176);
      v53 = v26[4];
      if (!*(_BYTE *)(v3 + 104) || *(_QWORD *)(v3 + 96) < v53)
      {
        *(_QWORD *)(v3 + 96) = v53;
        *(_BYTE *)(v3 + 104) = 1;
      }
    }
    goto LABEL_48;
  }
LABEL_205:
  webrtc::FrameBuffer::FindNextAndLastDecodableTemporalUnit((webrtc::FrameBuffer *)v3);
  return 1;
}

void webrtc::FrameBuffer::FindNextAndLastDecodableTemporalUnit(webrtc::FrameBuffer *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  BOOL v11;
  char *v12;
  char v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  unint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  unint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  unint64_t v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  unint64_t v76;
  void **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void **v90;
  unint64_t v91;
  void **v92;
  uint64_t v93;
  char v94;
  char *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  void *__p[5];

  __p[4] = *(void **)MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 56))
    *((_BYTE *)this + 56) = 0;
  if (*((_BYTE *)this + 72))
    *((_BYTE *)this + 72) = 0;
  if (!*((_BYTE *)this + 104))
    return;
  v2 = (char *)*((_QWORD *)this + 2);
  v99 = (char *)this + 24;
  v100 = 0;
  if (v2 == (char *)this + 24)
    goto LABEL_151;
  v98 = 0;
  v3 = v2;
  while (2)
  {
    if (!*((_BYTE *)this + 104))
LABEL_154:
      __break(1u);
    v4 = v3;
    v5 = *((_QWORD *)v3 + 4);
    if (v5 > *((_QWORD *)this + 12))
      break;
    v6 = v100;
    if (*(_DWORD *)(*((_QWORD *)v3 + 5) + 160) != *(_DWORD *)(*((_QWORD *)v2 + 5) + 160))
    {
      if ((v100 & 1) != 0)
      {
        operator delete(__p[0]);
        v5 = *((_QWORD *)v3 + 4);
      }
      v6 = 0;
      v100 = 0;
      v2 = v3;
    }
    v7 = (void **)__p[0];
    if ((v6 & 1) == 0)
      v7 = __p;
    v8 = 4;
    if ((v6 & 1) != 0)
      v8 = (uint64_t)__p[1];
    if (v6 >> 1 == v8)
    {
      absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)&v100, v5);
      v9 = (char *)*((_QWORD *)v3 + 1);
      v10 = v3;
      if (v9)
      {
        do
        {
LABEL_23:
          v3 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
        goto LABEL_28;
      }
    }
    else
    {
      if (!v7)
        goto LABEL_154;
      v7[v6 >> 1] = (void *)v5;
      v100 = v6 + 2;
      v9 = (char *)*((_QWORD *)v3 + 1);
      v10 = v3;
      if (v9)
        goto LABEL_23;
    }
    do
    {
      v3 = (char *)*((_QWORD *)v10 + 2);
      v11 = *(_QWORD *)v3 == (_QWORD)v10;
      v10 = v3;
    }
    while (!v11);
LABEL_28:
    if (!*(_BYTE *)(*((_QWORD *)v4 + 5) + 376))
      goto LABEL_9;
    v12 = v2;
    if (v2 == v3)
    {
LABEL_145:
      if (!*((_BYTE *)this + 56))
      {
        *((_QWORD *)this + 5) = v2;
        *((_QWORD *)this + 6) = v4;
        *((_BYTE *)this + 56) = 1;
      }
      v98 = *(unsigned int *)(*((_QWORD *)v2 + 5) + 160);
      goto LABEL_9;
    }
    do
    {
      v14 = *((_QWORD *)v12 + 5);
      v15 = (void **)(v14 + 336);
      v16 = *(_QWORD *)(v14 + 328);
      if (v16 >= 5)
        v17 = 5;
      else
        v17 = v16;
      if (v17)
        v18 = v15;
      else
        v18 = 0;
      if (!v17)
        goto LABEL_138;
      v19 = (uint64_t)*v18;
      if (*((_BYTE *)this + 144))
      {
        v20 = *((_QWORD *)this + 17);
        v21 = *((_QWORD *)this + 15);
        if ((uint64_t)(v20 - v21) >= v19)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/decoded_frames_history.cc");
        }
        else if (v20 >= v19)
        {
          v22 = v19 % v21;
          if (((v19 % v21) & 0x80000000) == 0)
            LODWORD(v21) = 0;
          if (((*(_QWORD *)(*((_QWORD *)this + 14)
                           + (((unint64_t)((int)v21 + (int)v22) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v21 + v22)) & 1) != 0)
            goto LABEL_60;
        }
      }
      v30 = (void **)__p[0];
      if ((v100 & 1) == 0)
        v30 = __p;
      v31 = v100 >> 1;
      if (v100 >= 2)
      {
        v33 = 8 * v31;
        v32 = v30;
        while (*v32 != (void *)v19)
        {
          ++v32;
          v33 -= 8;
          if (!v33)
          {
            v32 = &v30[v31];
            break;
          }
        }
      }
      else
      {
        v32 = v30;
      }
      if (v31 == v32 - v30)
      {
LABEL_136:
        v94 = 0;
        v95 = (char *)*((_QWORD *)v12 + 1);
        if (v95)
          goto LABEL_139;
        goto LABEL_141;
      }
LABEL_60:
      if (v17 == 1)
        goto LABEL_138;
      v34 = (uint64_t)v18[1];
      if (*((_BYTE *)this + 144))
      {
        v35 = *((_QWORD *)this + 17);
        v36 = *((_QWORD *)this + 15);
        if ((uint64_t)(v35 - v36) >= v34)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/decoded_frames_history.cc");
        }
        else if (v35 >= v34)
        {
          v37 = v34 % v36;
          if (((v34 % v36) & 0x80000000) == 0)
            LODWORD(v36) = 0;
          if (((*(_QWORD *)(*((_QWORD *)this + 14)
                           + (((unint64_t)((int)v36 + (int)v37) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v36 + v37)) & 1) != 0)
            goto LABEL_79;
        }
      }
      v45 = (void **)__p[0];
      if ((v100 & 1) == 0)
        v45 = __p;
      v46 = v100 >> 1;
      if (v100 >= 2)
      {
        v48 = 8 * v46;
        v47 = v45;
        while (*v47 != (void *)v34)
        {
          ++v47;
          v48 -= 8;
          if (!v48)
          {
            v47 = &v45[v46];
            break;
          }
        }
      }
      else
      {
        v47 = v45;
      }
      if (v46 == v47 - v45)
        goto LABEL_136;
LABEL_79:
      if (v17 == 2)
        goto LABEL_138;
      v49 = (uint64_t)v18[2];
      if (*((_BYTE *)this + 144))
      {
        v50 = *((_QWORD *)this + 17);
        v51 = *((_QWORD *)this + 15);
        if ((uint64_t)(v50 - v51) >= v49)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v53, v54, v55, v56, v57, v58, v59, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/decoded_frames_history.cc");
        }
        else if (v50 >= v49)
        {
          v52 = v49 % v51;
          if (((v49 % v51) & 0x80000000) == 0)
            LODWORD(v51) = 0;
          if (((*(_QWORD *)(*((_QWORD *)this + 14)
                           + (((unint64_t)((int)v51 + (int)v52) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v51 + v52)) & 1) != 0)
            goto LABEL_98;
        }
      }
      v60 = (void **)__p[0];
      if ((v100 & 1) == 0)
        v60 = __p;
      v61 = v100 >> 1;
      if (v100 >= 2)
      {
        v63 = 8 * v61;
        v62 = v60;
        while (*v62 != (void *)v49)
        {
          ++v62;
          v63 -= 8;
          if (!v63)
          {
            v62 = &v60[v61];
            break;
          }
        }
      }
      else
      {
        v62 = v60;
      }
      if (v61 == v62 - v60)
        goto LABEL_136;
LABEL_98:
      if (v17 == 3)
        goto LABEL_138;
      v64 = (uint64_t)v18[3];
      if (*((_BYTE *)this + 144))
      {
        v65 = *((_QWORD *)this + 17);
        v66 = *((_QWORD *)this + 15);
        if ((uint64_t)(v65 - v66) >= v64)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v68, v69, v70, v71, v72, v73, v74, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/decoded_frames_history.cc");
        }
        else if (v65 >= v64)
        {
          v67 = v64 % v66;
          if (((v64 % v66) & 0x80000000) == 0)
            LODWORD(v66) = 0;
          if (((*(_QWORD *)(*((_QWORD *)this + 14)
                           + (((unint64_t)((int)v66 + (int)v67) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v66 + v67)) & 1) != 0)
            goto LABEL_117;
        }
      }
      v75 = (void **)__p[0];
      if ((v100 & 1) == 0)
        v75 = __p;
      v76 = v100 >> 1;
      if (v100 >= 2)
      {
        v78 = 8 * v76;
        v77 = v75;
        while (*v77 != (void *)v64)
        {
          ++v77;
          v78 -= 8;
          if (!v78)
          {
            v77 = &v75[v76];
            break;
          }
        }
      }
      else
      {
        v77 = v75;
      }
      if (v76 == v77 - v75)
        goto LABEL_136;
LABEL_117:
      if (v17 == 4)
        goto LABEL_138;
      v79 = (uint64_t)v18[4];
      if (*((_BYTE *)this + 144))
      {
        v80 = *((_QWORD *)this + 17);
        v81 = *((_QWORD *)this + 15);
        if ((uint64_t)(v80 - v81) >= v79)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v83, v84, v85, v86, v87, v88, v89, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/decoded_frames_history.cc");
        }
        else if (v80 >= v79)
        {
          v82 = v79 % v81;
          if (((v79 % v81) & 0x80000000) == 0)
            LODWORD(v81) = 0;
          if (((*(_QWORD *)(*((_QWORD *)this + 14)
                           + (((unint64_t)((int)v81 + (int)v82) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v81 + v82)) & 1) != 0)
            goto LABEL_138;
        }
      }
      v90 = (void **)__p[0];
      if ((v100 & 1) == 0)
        v90 = __p;
      v91 = v100 >> 1;
      if (v100 >= 2)
      {
        v93 = 8 * v91;
        v92 = v90;
        while (*v92 != (void *)v79)
        {
          ++v92;
          v93 -= 8;
          if (!v93)
          {
            v92 = &v90[v91];
            break;
          }
        }
      }
      else
      {
        v92 = v90;
      }
      if (v91 == v92 - v90)
        goto LABEL_136;
LABEL_138:
      v94 = 1;
      v95 = (char *)*((_QWORD *)v12 + 1);
      if (v95)
      {
        do
        {
LABEL_139:
          v96 = v95;
          v95 = *(char **)v95;
        }
        while (v95);
        goto LABEL_31;
      }
      do
      {
LABEL_141:
        v96 = (char *)*((_QWORD *)v12 + 2);
        v11 = *(_QWORD *)v96 == (_QWORD)v12;
        v12 = v96;
      }
      while (!v11);
LABEL_31:
      if (v96 == v3)
        v13 = 0;
      else
        v13 = v94;
      v12 = v96;
    }
    while ((v13 & 1) != 0);
    if ((v94 & 1) != 0)
      goto LABEL_145;
LABEL_9:
    if (v3 != v99)
      continue;
    break;
  }
  if (*((_BYTE *)this + 56))
  {
    v97 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 160) | (unint64_t)(v98 << 32);
    if (!*((_BYTE *)this + 72))
      *((_BYTE *)this + 72) = 1;
    *((_QWORD *)this + 8) = v97;
  }
LABEL_151:
  if ((v100 & 1) != 0)
    operator delete(__p[0]);
}

void webrtc::FrameBuffer::ExtractNextDecodableTemporalUnit(webrtc::FrameBuffer *this@<X0>, unint64_t *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  *a2 = 0;
  if (*((_BYTE *)this + 56))
  {
    v4 = (_QWORD *)*((_QWORD *)this + 6);
    v5 = (_QWORD *)v4[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v4[2];
        v7 = *v6 == (_QWORD)v4;
        v4 = v6;
      }
      while (!v7);
    }
    v8 = (_QWORD *)*((_QWORD *)this + 5);
    if (v6 == v8)
    {
LABEL_22:
      webrtc::FrameBuffer::DropNextDecodableTemporalUnit(this);
      return;
    }
    while (1)
    {
      v9 = v8 + 5;
      webrtc::video_coding::DecodedFramesHistory::InsertDecoded((webrtc::FrameBuffer *)((char *)this + 112), v8[4], *(_DWORD *)(v8[5] + 160));
      v10 = *a2;
      v11 = (unint64_t *)a2[1];
      if ((*a2 & 1) != 0)
      {
        v12 = a2[2];
      }
      else
      {
        v11 = a2 + 1;
        v12 = 4;
      }
      if (v10 >> 1 == v12)
      {
        absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::EncodedFrame>,4ul,std::allocator<std::unique_ptr<webrtc::EncodedFrame>>>::EmplaceBackSlow<std::unique_ptr<webrtc::EncodedFrame>>(a2, v8 + 5);
        v14 = (_QWORD *)v8[1];
        if (!v14)
          goto LABEL_19;
      }
      else
      {
        if (!v11)
        {
          __break(1u);
          return;
        }
        v13 = *v9;
        *v9 = 0;
        v11[v10 >> 1] = v13;
        *a2 = v10 + 2;
        v14 = (_QWORD *)v8[1];
        if (!v14)
        {
          do
          {
LABEL_19:
            v15 = (_QWORD *)v8[2];
            v7 = *v15 == (_QWORD)v8;
            v8 = v15;
          }
          while (!v7);
          goto LABEL_9;
        }
      }
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
LABEL_9:
      v8 = v15;
      if (v15 == v6)
        goto LABEL_22;
    }
  }
}

void webrtc::FrameBuffer::DropNextDecodableTemporalUnit(webrtc::FrameBuffer *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;

  if (*((_BYTE *)this + 56))
  {
    v2 = (uint64_t *)*((_QWORD *)this + 6);
    v3 = (uint64_t *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (uint64_t *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (uint64_t *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    v6 = (uint64_t *)*((_QWORD *)this + 2);
    if (v6 != v4)
    {
      v7 = 0;
      v8 = (uint64_t *)*((_QWORD *)this + 2);
      do
      {
        if (v8[5])
          ++v7;
        v9 = (uint64_t *)v8[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (uint64_t *)v8[2];
            v5 = *v10 == (_QWORD)v8;
            v8 = v10;
          }
          while (!v5);
        }
        v8 = v10;
      }
      while (v10 != v4);
      *((_DWORD *)this + 45) += v7;
      do
      {
        v11 = (uint64_t *)v6[1];
        v12 = v6;
        if (v11)
        {
          do
          {
            v13 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v13 = (uint64_t *)v12[2];
            v5 = *v13 == (_QWORD)v12;
            v12 = v13;
          }
          while (!v5);
        }
        if (*((uint64_t **)this + 2) == v6)
          *((_QWORD *)this + 2) = v13;
        v14 = (uint64_t *)*((_QWORD *)this + 3);
        --*((_QWORD *)this + 4);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v14, v6);
        v15 = v6[5];
        v6[5] = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        operator delete(v6);
        v6 = v13;
      }
      while (v13 != v4);
    }
    webrtc::FrameBuffer::FindNextAndLastDecodableTemporalUnit(this);
  }
}

char *absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::EncodedFrame>,4ul,std::allocator<std::unique_ptr<webrtc::EncodedFrame>>>::EmplaceBackSlow<std::unique_ptr<webrtc::EncodedFrame>>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v4 = (unint64_t)(a1 + 1);
  v5 = *a1;
  if ((*a1 & 1) != 0)
  {
    v7 = a1[2];
    if (((v7 >> 60) & 7) != 0)
      goto LABEL_29;
    v4 = a1[1];
    v6 = 2 * v7;
  }
  else
  {
    v6 = 8;
  }
  v8 = v5 >> 1;
  v9 = (char *)operator new(8 * v6);
  v10 = v9;
  v11 = *a2;
  v12 = &v9[8 * (v5 >> 1)];
  *a2 = 0;
  *(_QWORD *)v12 = v11;
  if (v5 < 2)
    goto LABEL_25;
  if (v5 < 0xC || (v4 < (unint64_t)&v9[8 * v8] ? (v13 = (unint64_t)v9 >= v4 + 8 * v8) : (v13 = 1), !v13))
  {
    v14 = 0;
    v15 = (uint64_t *)v4;
LABEL_17:
    v21 = v8 - v14;
    v22 = &v9[8 * v14];
    do
    {
      v23 = *v15;
      *v15++ = 0;
      *(_QWORD *)v22 = v23;
      v22 += 8;
      --v21;
    }
    while (v21);
    goto LABEL_19;
  }
  v14 = v8 & 0x7FFFFFFFFFFFFFFCLL;
  v15 = (uint64_t *)(v4 + 8 * (v8 & 0x7FFFFFFFFFFFFFFCLL));
  v16 = v9 + 16;
  v17 = (__int128 *)(v4 + 16);
  v18 = v8 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    v19 = *(v17 - 1);
    v20 = *v17;
    *(v17 - 1) = 0uLL;
    *v17 = 0uLL;
    *(v16 - 1) = v19;
    *v16 = v20;
    v16 += 2;
    v17 += 2;
    v18 -= 4;
  }
  while (v18);
  if (v8 != v14)
    goto LABEL_17;
LABEL_19:
  if (!v4)
  {
    __break(1u);
LABEL_29:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v24 = v4 - 8;
  do
  {
    v25 = *(_QWORD *)(v24 + 8 * v8);
    *(_QWORD *)(v24 + 8 * v8) = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    --v8;
  }
  while (v8);
  v5 = *a1;
LABEL_25:
  if ((v5 & 1) != 0)
  {
    operator delete((void *)a1[1]);
    v5 = *a1;
  }
  a1[1] = (unint64_t)v10;
  a1[2] = v6;
  *a1 = (v5 | 1) + 2;
  return v12;
}

void absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;

  v5 = a1 + 8;
  v4 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (((v7 >> 60) & 7) != 0)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v5 = *(_QWORD *)(a1 + 8);
    v6 = 2 * v7;
  }
  else
  {
    v6 = 8;
  }
  v8 = v4 >> 1;
  v9 = (char *)operator new(8 * v6);
  v10 = v9;
  *(_QWORD *)&v9[8 * (v4 >> 1)] = a2;
  if (v4 >= 2)
  {
    v11 = 0;
    if (v4 < 8 || (unint64_t)&v9[-v5] < 0x20)
    {
      v12 = (uint64_t *)v5;
    }
    else
    {
      v11 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      v12 = (uint64_t *)(v5 + 8 * (v8 & 0x7FFFFFFFFFFFFFFCLL));
      v13 = v9 + 16;
      v14 = (__int128 *)(v5 + 16);
      v15 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v8 == v11)
        goto LABEL_15;
    }
    v17 = v8 - v11;
    v18 = &v9[8 * v11];
    do
    {
      v19 = *v12++;
      *(_QWORD *)v18 = v19;
      v18 += 8;
      --v17;
    }
    while (v17);
  }
LABEL_15:
  if ((v4 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v4 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)a1 = (v4 | 1) + 2;
}

void std::__tree<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>>>::destroy(a1, a2[1]);
    v4 = a2[5];
    a2[5] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    operator delete(a2);
  }
}

_QWORD *webrtc::FrameCadenceAdapterInterface::Create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  _QWORD *result;
  _QWORD *p_p;
  unint64_t v15;
  BOOL v16;
  int *v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  unsigned int v23;
  void *__p;
  unint64_t v25;
  unsigned __int8 v26;

  v12 = operator new();
  *(_QWORD *)v12 = &off_24C0B4448;
  *(_QWORD *)(v12 + 8) = a1;
  *(_QWORD *)(v12 + 16) = a2;
  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a5 + 16))(&__p, a5, "WebRTC-ZeroHertzQueueOverload", 29);
  if ((char)v26 < 0)
  {
    v15 = v25;
    if ((v25 & 0x8000000000000000) != 0)
      goto LABEL_30;
    p_p = __p;
    if (v25)
    {
      if (!__p)
        goto LABEL_30;
    }
  }
  else
  {
    p_p = &__p;
    v15 = v26;
  }
  if (v15 >= 8)
  {
    v16 = *p_p != 0x64656C6261736944;
    if ((v26 & 0x80) == 0)
      goto LABEL_11;
  }
  else
  {
    v16 = 1;
    if ((v26 & 0x80) == 0)
      goto LABEL_11;
  }
  operator delete(__p);
LABEL_11:
  *(_BYTE *)(v12 + 24) = v16;
  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a5 + 16))(&__p, a5, "WebRTC-FrameCadenceAdapter-UseVideoFrameTimestamp", 49);
  if (((char)v26 & 0x80000000) == 0)
  {
    v17 = (int *)&__p;
    v18 = v26;
    goto LABEL_16;
  }
  v18 = v25;
  if ((v25 & 0x8000000000000000) != 0 || (v17 = (int *)__p, v25) && !__p)
  {
LABEL_30:
    __break(1u);
    return result;
  }
LABEL_16:
  if (v18 >= 7)
  {
    v20 = *v17;
    v21 = *(int *)((char *)v17 + 3);
    v19 = v20 == 1650552389 && v21 == 1684368482;
    if ((v26 & 0x80) == 0)
      goto LABEL_27;
  }
  else
  {
    v19 = 0;
    if ((v26 & 0x80) == 0)
      goto LABEL_27;
  }
  operator delete(__p);
LABEL_27:
  *(_BYTE *)(v12 + 25) = v19;
  *(_BYTE *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 40) = 0;
  *(_BYTE *)(v12 + 48) = 1;
  *(_BYTE *)(v12 + 56) = 0;
  *(_BYTE *)(v12 + 184) = 0;
  *(_BYTE *)(v12 + 192) = 0;
  *(_BYTE *)(v12 + 424) = 0;
  *(_QWORD *)(v12 + 432) = 0;
  *(_BYTE *)(v12 + 440) = 0;
  *(_BYTE *)(v12 + 448) = 0;
  *(_QWORD *)(v12 + 456) = 0;
  *(_QWORD *)(v12 + 464) = a3;
  *(_QWORD *)(v12 + 472) = a4;
  *(_BYTE *)(v12 + 480) = 0;
  *(_BYTE *)(v12 + 488) = 0;
  *(_QWORD *)(v12 + 496) = 0;
  *(_BYTE *)(v12 + 504) = 0;
  *(_BYTE *)(v12 + 536) = 0;
  *(_BYTE *)(v12 + 544) = 0;
  *(_BYTE *)(v12 + 552) = 0;
  *(_DWORD *)(v12 + 560) = 0;
  *(_DWORD *)(v12 + 576) = 0;
  result = (_QWORD *)operator new();
  *(_DWORD *)result = 0;
  *((_BYTE *)result + 4) = 1;
  *(_QWORD *)(v12 + 584) = result;
  do
    v23 = __ldxr((unsigned int *)result);
  while (__stxr(v23 + 1, (unsigned int *)result));
  *a6 = v12;
  return result;
}

void webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::~FrameCadenceAdapterImpl(webrtc::_anonymous_namespace_::FrameCadenceAdapterImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD v11[2];
  uint64_t (*v12)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v13)();

  *(_QWORD *)this = &off_24C0B4448;
  if (*((_QWORD *)this + 58))
  {
    v2 = *((_QWORD *)this + 54);
    *((_QWORD *)this + 54) = 0;
    v3 = *((_QWORD *)this + 59);
    v4 = operator new();
    *(_QWORD *)(v4 + 8) = v2;
    *(_BYTE *)v4 = 1;
    v11[0] = v4;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v11, &v10, &v9);
    v12(1, v11, v11);
  }
  v5 = *((_QWORD *)this + 73);
  *(_BYTE *)(v5 + 4) = 0;
  do
  {
    v6 = __ldaxr((unsigned int *)v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)v5));
  if (!v7)
    MEMORY[0x20BD0ADEC]();
  v8 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (*((_BYTE *)this + 424))
  if (*((_BYTE *)this + 184))
  {
    *((_QWORD *)this + 7) = &off_24C0B44F0;
    std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 11);
  }
}

{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::OnFrame(webrtc::_anonymous_namespace_::FrameCadenceAdapterImpl *this, const webrtc::VideoFrame *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  __int16 v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t result;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  _QWORD v36[2];
  uint64_t (*v37)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v38)(uint64_t);
  _BYTE v39[29];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  v4 = (unsigned int *)((char *)this + 576);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  v31 = *((_QWORD *)this + 2);
  v6 = (unsigned int *)*((_QWORD *)this + 73);
  if (v6)
  {
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_WORD *)a2;
  v9 = *((_QWORD *)a2 + 1);
  if (v9)
    (**(void (***)(_QWORD))v9)(*((_QWORD *)a2 + 1));
  v10 = *((_OWORD *)a2 + 2);
  v44 = *((_OWORD *)a2 + 1);
  v45 = v10;
  v46[0] = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)((char *)a2 + 60);
  v11 = *((unsigned __int8 *)a2 + 144);
  if (*((_BYTE *)a2 + 144))
  {
    v12 = *((_BYTE *)a2 + 76);
    v13 = *(_OWORD *)((char *)a2 + 93);
    v40 = *(_OWORD *)((char *)a2 + 77);
    v41 = v13;
    v14 = *(_OWORD *)((char *)a2 + 125);
    v42 = *(_OWORD *)((char *)a2 + 109);
    v43 = v14;
    *(_OWORD *)v39 = *(_OWORD *)((char *)a2 + 148);
    *(_OWORD *)&v39[13] = *(_OWORD *)((char *)a2 + 161);
    v15 = *((_QWORD *)a2 + 23);
    if (!v15)
      goto LABEL_10;
  }
  else
  {
    v12 = 0;
    *(_OWORD *)v39 = *(_OWORD *)((char *)a2 + 148);
    *(_OWORD *)&v39[13] = *(_OWORD *)((char *)a2 + 161);
    v15 = *((_QWORD *)a2 + 23);
    if (!v15)
      goto LABEL_10;
  }
  do
    v16 = __ldxr((unsigned int *)v15);
  while (__stxr(v16 + 1, (unsigned int *)v15));
LABEL_10:
  v33 = *((_OWORD *)a2 + 12);
  v34 = *((_QWORD *)a2 + 26);
  v17 = operator new();
  *(_QWORD *)v17 = this;
  *(_QWORD *)(v17 + 8) = v30;
  *(_WORD *)(v17 + 16) = v8;
  *(_QWORD *)(v17 + 24) = v9;
  if (v9)
    (**(void (***)(uint64_t))v9)(v9);
  v18 = v45;
  *(_OWORD *)(v17 + 32) = v44;
  *(_OWORD *)(v17 + 48) = v18;
  *(_OWORD *)(v17 + 64) = v46[0];
  *(_OWORD *)(v17 + 76) = *(_OWORD *)((char *)v46 + 12);
  *(_BYTE *)(v17 + 92) = 0;
  *(_BYTE *)(v17 + 160) = 0;
  if (v11)
  {
    *(_BYTE *)(v17 + 92) = v12;
    v19 = v41;
    *(_OWORD *)(v17 + 93) = v40;
    *(_OWORD *)(v17 + 109) = v19;
    v20 = v43;
    *(_OWORD *)(v17 + 125) = v42;
    *(_OWORD *)(v17 + 141) = v20;
    *(_BYTE *)(v17 + 160) = 1;
  }
  *(_OWORD *)(v17 + 164) = *(_OWORD *)v39;
  *(_OWORD *)(v17 + 177) = *(_OWORD *)&v39[13];
  *(_QWORD *)(v17 + 200) = v15;
  if (v15)
  {
    do
      v21 = __ldxr((unsigned int *)v15);
    while (__stxr(v21 + 1, (unsigned int *)v15));
  }
  *(_OWORD *)(v17 + 208) = v33;
  *(_QWORD *)(v17 + 224) = v34;
  v22 = (_QWORD *)operator new();
  *v22 = v6;
  v22[1] = v17;
  v36[0] = v22;
  v37 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v38 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v31 + 8))(v31, v36, &v35, &v32);
  result = v37(1, v36, v36);
  if (v15)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)v15);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v15));
    if (!v25)
    {
      v26 = *(_QWORD *)(v15 + 8);
      if (v26)
      {
        v27 = *(_QWORD *)(v15 + 16);
        v28 = *(void **)(v15 + 8);
        if (v27 != v26)
        {
          do
          {
            v29 = *(void **)(v27 - 96);
            if (v29)
            {
              *(_QWORD *)(v27 - 88) = v29;
              operator delete(v29);
            }
            v27 -= 104;
          }
          while (v27 != v26);
          v28 = *(void **)(v15 + 8);
        }
        *(_QWORD *)(v15 + 16) = v26;
        operator delete(v28);
      }
      result = MEMORY[0x20BD0ADEC](v15, 0x1020C40E72D6CFBLL);
    }
  }
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::OnDiscardedFrame(webrtc::_anonymous_namespace_::FrameCadenceAdapterImpl *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  char v7;
  char v8;
  _QWORD v9[2];
  uint64_t (*v10)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v11)(uint64_t);

  (*(void (**)(_QWORD))(**((_QWORD **)this + 62) + 24))(*((_QWORD *)this + 62));
  v2 = *((_QWORD *)this + 2);
  v3 = (unsigned int *)*((_QWORD *)this + 73);
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = (_QWORD *)operator new();
  *v5 = v3;
  v5[1] = this;
  v5[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v9[0] = v5;
  v10 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v11 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v2 + 8))(v2, v9, &v8, &v7);
  return v10(1, v9, v9);
}

uint64_t webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::OnConstraintsChanged(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  char v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _QWORD v23[2];
  uint64_t (*v24)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v25)(uint64_t);

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_cadence_adapter.cc");
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned int **)(a1 + 584);
  if (v12)
  {
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a2[1];
  v20 = *a2;
  v21 = v14;
  v15 = (char *)operator new(0x28uLL);
  *(_QWORD *)v15 = a1;
  v16 = v21;
  *(_OWORD *)(v15 + 8) = v20;
  *(_OWORD *)(v15 + 24) = v16;
  v17 = (_QWORD *)operator new();
  *v17 = v12;
  v17[1] = v15;
  v17[2] = 40;
  v17[3] = absl::internal_any_invocable::RemoteManagerTrivial;
  v23[0] = v17;
  v24 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v25 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v11 + 8))(v11, v23, &v22, &v19);
  return v24(1, v23, v23);
}

void **webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::Initialize(void **result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void **v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  std::string *v22;
  uint64_t v23;

  v8 = result;
  result[62] = a2;
  if (result[58])
  {
    v9 = (unsigned int *)result[73];
    if (v9)
    {
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = operator new();
    v12 = (_QWORD *)v11;
    v13 = *((_OWORD *)v8 + 29);
    v14 = v8[62];
    *(_QWORD *)v11 = &off_24C0B4528;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(v8 + 1);
    *(_QWORD *)(v11 + 24) = v9;
    if (v9)
    {
      do
        v15 = __ldxr(v9);
      while (__stxr(v15 + 1, v9));
    }
    *(_BYTE *)(v11 + 32) = 0;
    *(_BYTE *)(v11 + 40) = 0;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_QWORD *)(v11 + 96) = 0;
    *(_QWORD *)(v11 + 104) = -1;
    *(_BYTE *)(v11 + 112) = 0;
    *(_QWORD *)(v11 + 116) = 0x447A000000000000;
    *(int64x2_t *)(v11 + 128) = vdupq_n_s64(0xB9AuLL);
    *(_QWORD *)(v11 + 144) = v14;
    *(_OWORD *)(v11 + 152) = v13;
    v16 = operator new();
    *(_DWORD *)v16 = 0;
    *(_BYTE *)(v16 + 4) = 1;
    v12[21] = v16;
    do
      v17 = __ldxr((unsigned int *)v16);
    while (__stxr(v17 + 1, (unsigned int *)v16));
    v12[22] = 0x7FFFFFFFFFFFFFFFLL;
    v12[23] = 0;
    v12[24] = 0;
    v12[25] = 0;
    if (v9)
    {
      do
      {
        v18 = __ldaxr(v9);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v9));
      if (!v19)
        MEMORY[0x20BD0ADEC](v9, 0x1000C4090D0E795);
    }
    result = (void **)v8[54];
    v8[54] = v12;
    if (result)
      result = (void **)(*((uint64_t (**)(void **))*result + 1))(result);
    if (v8[58])
    {
LABEL_15:
      v20 = v8[54];
      if (v20)
      {
        v8[57] = v20;
        return result;
      }
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_cadence_adapter.cc", 1024, "vsync_encode_adapter_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v23);
      goto LABEL_23;
    }
  }
  else
  {
    if (*((_BYTE *)result + 184))
    {
      result[7] = &off_24C0B44F0;
      result = std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](result + 11);
    }
    v8[7] = &off_24C0B44F0;
    *((_BYTE *)v8 + 64) = 0;
    *((_BYTE *)v8 + 72) = 0;
    v8[10] = a2;
    *(_OWORD *)(v8 + 11) = 0u;
    *(_OWORD *)(v8 + 13) = 0u;
    *(_OWORD *)(v8 + 15) = 0u;
    v8[17] = 0;
    v8[18] = (void *)-1;
    *((_BYTE *)v8 + 152) = 0;
    *(void **)((char *)v8 + 156) = (void *)0x447A000000000000;
    *(int64x2_t *)(v8 + 21) = vdupq_n_s64(0xB9AuLL);
    *((_BYTE *)v8 + 184) = 1;
    if (v8[58])
      goto LABEL_15;
  }
  if (*((_BYTE *)v8 + 184))
  {
    v8[57] = v8 + 7;
    return result;
  }
LABEL_23:
  v22 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_cadence_adapter.cc", 1027, "passthrough_adapter_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v23);
}

void webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::SetZeroHertzModeEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = *(unsigned __int8 *)(a1 + 448);
  *(_QWORD *)(a1 + 440) = a2;
  *(_BYTE *)(a1 + 448) = a3;
}

uint64_t webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::GetInputFrameRateFps(webrtc::_anonymous_namespace_::FrameCadenceAdapterImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 57) + 24))(*((_QWORD *)this + 57));
}

uint64_t webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::UpdateLayerQualityConvergence(uint64_t this, unint64_t a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(this + 424))
  {
    v3 = *(_QWORD *)(this + 360);
    if (a2 < (*(_QWORD *)(this + 368) - v3) >> 1)
    {
      v4 = v3 + 2 * a2;
      if (*(_BYTE *)(v4 + 1))
        *(_WORD *)v4 = a3 | 0x100;
    }
  }
  return this;
}

uint64_t webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::UpdateLayerStatus(uint64_t this, unint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;

  if (*(_BYTE *)(this + 424))
  {
    v3 = *(_QWORD *)(this + 360);
    if (a2 < (*(_QWORD *)(this + 368) - v3) >> 1)
    {
      v4 = v3 + 2 * a2;
      if (a3)
      {
        if (!*(_BYTE *)(v4 + 1))
          *(_WORD *)v4 = 256;
      }
      else
      {
        v6 = *(unsigned __int8 *)(v4 + 1);
        v5 = (_BYTE *)(v4 + 1);
        if (v6)
          *v5 = 0;
      }
    }
  }
  return this;
}

uint64_t webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::UpdateVideoSourceRestrictions(uint64_t result, uint64_t a2, char a3)
{
  unint64_t v3;

  *(double *)(result + 544) = *(double *)&a2;
  *(_BYTE *)(result + 552) = a3;
  if (*(_BYTE *)(result + 424))
  {
    if (a3 && *(double *)&a2 > 0.0)
    {
      v3 = llround(1000000.0 / *(double *)&a2);
      if (!*(_BYTE *)(result + 400))
        *(_BYTE *)(result + 400) = 1;
      *(_QWORD *)(result + 392) = v3;
    }
    else if (*(_BYTE *)(result + 400))
    {
      *(_BYTE *)(result + 400) = 0;
    }
  }
  return result;
}

void webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::ProcessKeyFrameRequest(webrtc::_anonymous_namespace_::FrameCadenceAdapterImpl *this)
{
  webrtc::_anonymous_namespace_::ZeroHertzAdapterMode *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  if (!*((_BYTE *)this + 424))
    return;
  v2 = (webrtc::_anonymous_namespace_::FrameCadenceAdapterImpl *)((char *)this + 192);
  v3 = *((_QWORD *)this + 45);
  for (i = *((_QWORD *)this + 46); v3 != i; v3 += 2)
  {
    if (*(_BYTE *)(v3 + 1))
      *(_WORD *)v3 = 256;
  }
  if (!*((_BYTE *)this + 352) || !*((_BYTE *)this + 320))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      return;
LABEL_28:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_cadence_adapter.cc");
    return;
  }
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 16))(*((_QWORD *)this + 26));
  if (!*((_BYTE *)this + 352))
  {
    __break(1u);
    return;
  }
  v6 = *((_QWORD *)this + 39);
  v7 = 0x7FFFFFFFFFFFFFFFLL;
  if (v6 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v8 = v6 + 1000000;
    if (v6 == 0x8000000000000000)
      v8 = 0x8000000000000000;
    if (v8 != 0x7FFFFFFFFFFFFFFFLL && v5 != 0x8000000000000000)
    {
      v9 = v8 - v5;
      if (v5 == 0x7FFFFFFFFFFFFFFFLL || v6 == 0x8000000000000000)
        v7 = 0x8000000000000000;
      else
        v7 = v9;
    }
  }
  v11 = *((_QWORD *)this + 31);
  v12 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
  if (v7 <= v11)
  {
    if ((v12 & 1) != 0)
      return;
    goto LABEL_28;
  }
  if ((v12 & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_cadence_adapter.cc");
  v20 = *((_DWORD *)this + 76) + 1;
  *((_DWORD *)this + 76) = v20;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::~FrameCadenceAdapterImpl()::$_1>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*(_BYTE *)v3)
      {
        *(_BYTE *)v3 = 0;
        v4 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v4)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void webrtc::`anonymous namespace'::ZeroHertzAdapterMode::~ZeroHertzAdapterMode(webrtc::_anonymous_namespace_::ZeroHertzAdapterMode *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  void **v12;
  void **v13;
  unint64_t v14;
  void **v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;

  *(_QWORD *)this = &off_24C0B44B8;
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    *(_BYTE *)(v2 + 4) = 0;
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 24) = 0;
  }
  v5 = *((_QWORD *)this + 28);
  *(_BYTE *)(v5 + 4) = 0;
  do
  {
    v6 = __ldaxr((unsigned int *)v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)v5));
  if (!v7)
    MEMORY[0x20BD0ADEC]();
  v8 = (unsigned int *)*((_QWORD *)this + 24);
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      MEMORY[0x20BD0ADEC]();
  }
  v11 = (void *)*((_QWORD *)this + 21);
  if (v11)
  {
    *((_QWORD *)this + 22) = v11;
    operator delete(v11);
  }
  v12 = (void **)*((_QWORD *)this + 9);
  v13 = (void **)*((_QWORD *)this + 10);
  if (v13 == v12)
  {
    v13 = (void **)*((_QWORD *)this + 9);
    *((_QWORD *)this + 13) = 0;
    v27 = 0;
    goto LABEL_41;
  }
  v14 = *((_QWORD *)this + 12);
  v15 = &v12[v14 / 0x12];
  v16 = (unint64_t)*v15 + 216 * (v14 % 0x12);
  v17 = (unint64_t)v12[(*((_QWORD *)this + 13) + v14) / 0x12] + 216 * ((*((_QWORD *)this + 13) + v14) % 0x12);
  if (v16 == v17)
  {
LABEL_39:
    *((_QWORD *)this + 13) = 0;
    v27 = (char *)v13 - (char *)v12;
    if ((unint64_t)((char *)v13 - (char *)v12) >= 0x11)
    {
      do
      {
        operator delete(*v12);
        v13 = (void **)*((_QWORD *)this + 10);
        v12 = (void **)(*((_QWORD *)this + 9) + 8);
        *((_QWORD *)this + 9) = v12;
        v27 = (char *)v13 - (char *)v12;
      }
      while ((unint64_t)((char *)v13 - (char *)v12) > 0x10);
    }
LABEL_41:
    v28 = v27 >> 3;
    if (v28 == 1)
    {
      v29 = 9;
    }
    else
    {
      if (v28 != 2)
      {
LABEL_47:
        if (v12 != v13)
        {
          do
          {
            v30 = *v12++;
            operator delete(v30);
          }
          while (v12 != v13);
          v32 = *((_QWORD *)this + 9);
          v31 = *((_QWORD *)this + 10);
          if (v31 != v32)
            *((_QWORD *)this + 10) = v31 + ((v32 - v31 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        v33 = (void *)*((_QWORD *)this + 8);
        if (v33)
          operator delete(v33);
        return;
      }
      v29 = 18;
    }
    *((_QWORD *)this + 12) = v29;
    goto LABEL_47;
  }
  while (v16)
  {
    v18 = *(_QWORD *)(v16 + 184);
    if (v18)
    {
      do
      {
        v19 = __ldaxr((unsigned int *)v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unsigned int *)v18));
      if (!v20)
      {
        v21 = *(_QWORD *)(v18 + 8);
        if (v21)
        {
          v22 = *(_QWORD *)(v18 + 16);
          v23 = *(void **)(v18 + 8);
          if (v22 != v21)
          {
            do
            {
              v24 = *(void **)(v22 - 96);
              if (v24)
              {
                *(_QWORD *)(v22 - 88) = v24;
                operator delete(v24);
              }
              v22 -= 104;
            }
            while (v22 != v21);
            v23 = *(void **)(v18 + 8);
          }
          *(_QWORD *)(v18 + 16) = v21;
          operator delete(v23);
        }
        MEMORY[0x20BD0ADEC](v18, 0x1020C40E72D6CFBLL);
      }
    }
    v25 = *(_QWORD *)(v16 + 8);
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v16 += 216;
    if (v16 - (_QWORD)*v15 == 3888)
    {
      v26 = (unint64_t)v15[1];
      ++v15;
      v16 = v26;
    }
    if (v16 == v17)
    {
      v12 = (void **)*((_QWORD *)this + 9);
      v13 = (void **)*((_QWORD *)this + 10);
      goto LABEL_39;
    }
  }
  __break(1u);
}

{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::ZeroHertzAdapterMode::OnFrame(webrtc::_anonymous_namespace_::ZeroHertzAdapterMode *this, Timestamp a2, uint64_t a3, const webrtc::VideoFrame *a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t i;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  int64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void *v36;
  void *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  void *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  int64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  int64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  __int128 *v99;
  _OWORD *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  void (***v111)(_QWORD);
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  unint64_t v128;
  BOOL v129;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  Timestamp *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v141;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  int64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  __int128 *v153;
  _OWORD *v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  int64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  __int128 *v170;
  _OWORD *v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  int64_t var0;
  char v177;
  _QWORD v178[2];
  uint64_t (*v179)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v180)(uint64_t);
  char v181;

  v7 = *((_QWORD *)this + 24);
  if (v7)
  {
    *(_BYTE *)(v7 + 4) = 0;
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 24) = 0;
  }
  v10 = *((_QWORD *)this + 21);
  for (i = *((_QWORD *)this + 22); v10 != i; v10 += 2)
  {
    if (*(_BYTE *)(v10 + 1))
      *(_WORD *)v10 = 256;
  }
  if (*((_BYTE *)this + 160))
  {
    v12 = *((_QWORD *)this + 12);
    v13 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v12 / 0x12));
    if (!v13)
      goto LABEL_179;
    v14 = v12 % 0x12;
    v15 = *(_QWORD *)(v13 + 216 * (v12 % 0x12) + 184);
    if (v15)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v15));
      if (!v17)
      {
        v18 = *(_QWORD *)(v15 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v15 + 16);
          v20 = *(void **)(v15 + 8);
          if (v19 != v18)
          {
            do
            {
              v21 = *(void **)(v19 - 96);
              if (v21)
              {
                *(_QWORD *)(v19 - 88) = v21;
                operator delete(v21);
              }
              v19 -= 104;
            }
            while (v19 != v18);
            v20 = *(void **)(v15 + 8);
          }
          *(_QWORD *)(v15 + 16) = v18;
          operator delete(v20);
        }
        MEMORY[0x20BD0ADEC](v15, 0x1020C40E72D6CFBLL);
      }
    }
    v23 = *(_QWORD *)(v13 + 216 * v14 + 8);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = vaddq_s64(*((int64x2_t *)this + 6), (int64x2_t)xmmword_208F0A010);
    *((int64x2_t *)this + 6) = v24;
    v22 = v24.i64[0];
    if (v24.i64[0] >= 0x24uLL)
    {
      operator delete(**((void ***)this + 9));
      *((_QWORD *)this + 9) += 8;
      v22 = *((_QWORD *)this + 12) - 18;
      *((_QWORD *)this + 12) = v22;
    }
  }
  else
  {
    v22 = *((_QWORD *)this + 12);
  }
  v25 = (char *)*((_QWORD *)this + 9);
  v26 = (char *)*((_QWORD *)this + 10);
  v27 = (v26 - v25) >> 3;
  v28 = 18 * v27 - 1;
  if (v26 == v25)
    v28 = 0;
  if (v28 == *((_QWORD *)this + 13) + v22)
  {
    v29 = v22 >= 0x12;
    v30 = v22 - 18;
    if (!v29)
    {
      v34 = (char *)*((_QWORD *)this + 11);
      v35 = (char *)*((_QWORD *)this + 8);
      if (v27 < (unint64_t)((v34 - v35) >> 3))
      {
        v36 = operator new(0xF30uLL);
        v37 = v36;
        if (v34 != v26)
        {
          if (v26)
          {
            *(_QWORD *)v26 = v36;
LABEL_112:
            v26 = (char *)(*((_QWORD *)this + 10) + 8);
            *((_QWORD *)this + 10) = v26;
            goto LABEL_113;
          }
LABEL_179:
          __break(1u);
          goto LABEL_180;
        }
        if (v25 == v35)
        {
          v88 = (v34 - v25) >> 2;
          if (v26 == v25)
            v88 = 1;
          if (v88 >> 61)
            goto LABEL_180;
          v89 = v26 - v25;
          v90 = (v88 + 3) >> 2;
          v91 = 8 * v88;
          v92 = (char *)operator new(8 * v88);
          v57 = &v92[8 * v90];
          v93 = v57;
          if (v26 != v25)
          {
            v93 = &v57[8 * v27];
            v94 = &v92[8 * v90];
            v95 = v25;
            if ((unint64_t)(v89 - 8) < 0x38)
              goto LABEL_183;
            v96 = &v92[8 * v90];
            v94 = v96;
            v95 = v25;
            if ((unint64_t)(v96 - v25) < 0x20)
              goto LABEL_183;
            v97 = ((unint64_t)(v89 - 8) >> 3) + 1;
            v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
            v94 = &v57[v98];
            v95 = &v25[v98];
            v99 = (__int128 *)(v25 + 16);
            v100 = v96 + 16;
            v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v102 = *v99;
              *(v100 - 1) = *(v99 - 1);
              *v100 = v102;
              v99 += 2;
              v100 += 2;
              v101 -= 4;
            }
            while (v101);
            if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_183:
              do
              {
                v103 = *(_QWORD *)v95;
                v95 += 8;
                *(_QWORD *)v94 = v103;
                v94 += 8;
              }
              while (v94 != v93);
            }
          }
          *((_QWORD *)this + 8) = v92;
          *((_QWORD *)this + 9) = v57;
          *((_QWORD *)this + 10) = v93;
          *((_QWORD *)this + 11) = &v92[v91];
          if (v25)
          {
            operator delete(v25);
            v57 = (char *)*((_QWORD *)this + 9);
          }
        }
        else
        {
          v57 = v25;
        }
        *((_QWORD *)v57 - 1) = v37;
        v104 = (char *)*((_QWORD *)this + 9);
        v105 = (char *)*((_QWORD *)this + 10);
        *((_QWORD *)this + 9) = v104 - 8;
        v106 = *((_QWORD *)v104 - 1);
        *((_QWORD *)this + 9) = v104;
        if (v105 != *((char **)this + 11))
          goto LABEL_110;
        v143 = (char *)*((_QWORD *)this + 8);
        if (v104 > v143)
        {
          v144 = (v104 - v143) >> 3;
          if (v144 >= -1)
            v145 = v144 + 1;
          else
            v145 = v144 + 2;
          v146 = v145 >> 1;
          v147 = -v146;
          v148 = &v104[-8 * v146];
          v149 = v105 - v104;
          if (v105 != v104)
          {
            memmove(&v104[-8 * v146], v104, v105 - v104);
            v104 = (char *)*((_QWORD *)this + 9);
          }
          v105 = &v148[v149];
          *((_QWORD *)this + 9) = &v104[8 * v147];
          *((_QWORD *)this + 10) = &v148[v149];
          goto LABEL_111;
        }
        v158 = (v105 - v143) >> 2;
        if (v105 == v143)
          v158 = 1;
        if (!(v158 >> 61))
        {
          v159 = v158 >> 2;
          v160 = 8 * v158;
          v161 = (char *)operator new(8 * v158);
          v162 = &v161[8 * v159];
          v163 = v105 - v104;
          v129 = v105 == v104;
          v105 = v162;
          if (v129)
            goto LABEL_177;
          v105 = &v162[v163 & 0xFFFFFFFFFFFFFFF8];
          v164 = v163 - 8;
          if ((unint64_t)(v163 - 8) >= 0x38)
          {
            v166 = &v161[8 * v159];
            v165 = v166;
            if ((unint64_t)(v166 - v104) >= 0x20)
            {
              v167 = (v164 >> 3) + 1;
              v168 = 8 * (v167 & 0x3FFFFFFFFFFFFFFCLL);
              v165 = &v162[v168];
              v169 = &v104[v168];
              v170 = (__int128 *)(v104 + 16);
              v171 = v166 + 16;
              v172 = v167 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v173 = *v170;
                *(v171 - 1) = *(v170 - 1);
                *v171 = v173;
                v170 += 2;
                v171 += 2;
                v172 -= 4;
              }
              while (v172);
              v104 = v169;
              if (v167 == (v167 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_177:
                *((_QWORD *)this + 8) = v161;
                *((_QWORD *)this + 9) = v162;
                *((_QWORD *)this + 10) = v105;
                *((_QWORD *)this + 11) = &v161[v160];
                if (v143)
                {
                  operator delete(v143);
                  v105 = (char *)*((_QWORD *)this + 10);
                }
LABEL_110:
                if (!v105)
                  goto LABEL_179;
LABEL_111:
                *(_QWORD *)v105 = v106;
                goto LABEL_112;
              }
            }
          }
          else
          {
            v165 = &v161[8 * v159];
          }
          do
          {
            v174 = *(_QWORD *)v104;
            v104 += 8;
            *(_QWORD *)v165 = v174;
            v165 += 8;
          }
          while (v165 != v105);
          goto LABEL_177;
        }
LABEL_180:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      v175 = v26 - v25;
      var0 = a2.var0;
      if (v34 == v35)
        v38 = 1;
      else
        v38 = (v34 - v35) >> 2;
      if (v38 >> 61)
        goto LABEL_180;
      v39 = (char *)operator new(8 * v38);
      v40 = &v39[8 * v27];
      v41 = &v39[8 * v38];
      v42 = operator new(0xF30uLL);
      v43 = v42;
      if (v27 == v38)
      {
        if (v175 < 1)
        {
          v66 = v175 >> 2;
          if (v26 == v25)
            v66 = 1;
          if (v66 >> 61)
            goto LABEL_180;
          v67 = 8 * v66;
          v40 = (char *)operator new(8 * v66);
          operator delete(v39);
          v41 = &v40[v67];
          v68 = (char *)*((_QWORD *)this + 9);
          v26 = (char *)*((_QWORD *)this + 10);
          v39 = v40;
          *(_QWORD *)v40 = v43;
          v45 = v40 + 8;
          if (v26 != v68)
          {
            while (1)
            {
LABEL_78:
              if (v40 == v39)
              {
                if (v45 >= v41)
                {
                  v73 = (v41 - v40) >> 2;
                  if (v41 == v40)
                    v73 = 1;
                  if (v73 >> 61)
                    goto LABEL_180;
                  v74 = (v73 + 3) >> 2;
                  v75 = 8 * v73;
                  v76 = (char *)operator new(8 * v73);
                  v39 = v76;
                  v69 = &v76[8 * v74];
                  v47 = v69;
                  v77 = v45 - v40;
                  if (v45 != v40)
                  {
                    v47 = &v69[v77 & 0xFFFFFFFFFFFFFFF8];
                    v78 = v77 - 8;
                    v79 = &v76[8 * v74];
                    v80 = v40;
                    if (v78 < 0x38)
                      goto LABEL_184;
                    v79 = &v76[8 * v74];
                    v80 = v40;
                    if ((unint64_t)(v79 - v40) < 0x20)
                      goto LABEL_184;
                    v81 = (v78 >> 3) + 1;
                    v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
                    v79 = &v69[v82];
                    v80 = &v40[v82];
                    v83 = (__int128 *)(v40 + 16);
                    v84 = &v76[8 * v74 + 16];
                    v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v86 = *v83;
                      *((_OWORD *)v84 - 1) = *(v83 - 1);
                      *(_OWORD *)v84 = v86;
                      v83 += 2;
                      v84 += 32;
                      v85 -= 4;
                    }
                    while (v85);
                    if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_184:
                      do
                      {
                        v87 = *(_QWORD *)v80;
                        v80 += 8;
                        *(_QWORD *)v79 = v87;
                        v79 += 8;
                      }
                      while (v79 != v47);
                    }
                  }
                  v41 = &v76[v75];
                  operator delete(v40);
                }
                else
                {
                  v71 = (v41 - v45) >> 3;
                  if (v71 >= -1)
                    v72 = v71 + 1;
                  else
                    v72 = v71 + 2;
                  v47 = &v45[8 * (v72 >> 1)];
                  v69 = &v40[8 * (v72 >> 1)];
                  if (v45 == v40)
                  {
                    v39 = v45;
                  }
                  else
                  {
                    memmove(&v40[8 * (v72 >> 1)], v40, v45 - v40);
                    v39 = v40;
                  }
                }
              }
              else
              {
                v69 = v40;
                v47 = v45;
              }
              v70 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *((_QWORD *)v69 - 1) = v70;
              v46 = v69 - 8;
              v45 = v47;
              v40 = v46;
              if (v26 == *((char **)this + 9))
                goto LABEL_54;
            }
          }
LABEL_53:
          v46 = v40;
          v47 = v45;
LABEL_54:
          v48 = (void *)*((_QWORD *)this + 8);
          *((_QWORD *)this + 8) = v39;
          *((_QWORD *)this + 9) = v46;
          v26 = v47;
          *((_QWORD *)this + 10) = v47;
          *((_QWORD *)this + 11) = v41;
          a2.var0 = var0;
          if (v48)
          {
            operator delete(v48);
            v26 = (char *)*((_QWORD *)this + 10);
          }
          goto LABEL_113;
        }
        v44 = v27 + 2;
        if (v27 >= -1)
          v44 = v27 + 1;
        v40 -= 8 * (v44 >> 1);
      }
      *(_QWORD *)v40 = v42;
      v45 = v40 + 8;
      if (v26 != v25)
        goto LABEL_78;
      goto LABEL_53;
    }
    v31 = a2.var0;
    *((_QWORD *)this + 12) = v30;
    v32 = v25 + 8;
    v33 = *(_QWORD *)v25;
    *((_QWORD *)this + 9) = v25 + 8;
    if (v26 != *((char **)this + 11))
      goto LABEL_37;
    v49 = (char *)*((_QWORD *)this + 8);
    if (v32 > v49)
    {
      v50 = (v32 - v49) >> 3;
      if (v50 >= -1)
        v51 = v50 + 1;
      else
        v51 = v50 + 2;
      v52 = v51 >> 1;
      v53 = -v52;
      v54 = &v32[-8 * v52];
      v55 = v26 - v32;
      if (v26 != v32)
      {
        memmove(&v32[-8 * v52], v32, v26 - v32);
        v26 = (char *)*((_QWORD *)this + 9);
      }
      v56 = &v26[8 * v53];
      v26 = &v54[v55];
      *((_QWORD *)this + 9) = v56;
      *((_QWORD *)this + 10) = &v54[v55];
      goto LABEL_38;
    }
    v58 = (v26 - v49) >> 2;
    if (v26 == v49)
      v58 = 1;
    if (v58 >> 61)
      goto LABEL_180;
    v59 = v58 >> 2;
    v60 = 8 * v58;
    v61 = (char *)operator new(8 * v58);
    v62 = &v61[8 * v59];
    v63 = v26 - v32;
    v129 = v26 == v32;
    v26 = v62;
    if (!v129)
    {
      v26 = &v62[v63 & 0xFFFFFFFFFFFFFFF8];
      v64 = v63 - 8;
      if ((unint64_t)(v63 - 8) < 0x38)
      {
        v65 = &v61[8 * v59];
        do
        {
LABEL_163:
          v157 = *(_QWORD *)v32;
          v32 += 8;
          *(_QWORD *)v65 = v157;
          v65 += 8;
        }
        while (v65 != v26);
        goto LABEL_164;
      }
      v150 = &v61[8 * v59];
      v65 = v150;
      if ((unint64_t)(v150 - v32) < 0x20)
        goto LABEL_163;
      v151 = (v64 >> 3) + 1;
      v152 = 8 * (v151 & 0x3FFFFFFFFFFFFFFCLL);
      v65 = &v62[v152];
      v32 += v152;
      v153 = (__int128 *)(v25 + 24);
      v154 = v150 + 16;
      v155 = v151 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v156 = *v153;
        *(v154 - 1) = *(v153 - 1);
        *v154 = v156;
        v153 += 2;
        v154 += 2;
        v155 -= 4;
      }
      while (v155);
      if (v151 != (v151 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_163;
    }
LABEL_164:
    *((_QWORD *)this + 8) = v61;
    *((_QWORD *)this + 9) = v62;
    *((_QWORD *)this + 10) = v26;
    *((_QWORD *)this + 11) = &v61[v60];
    if (v49)
    {
      operator delete(v49);
      v26 = (char *)*((_QWORD *)this + 10);
    }
LABEL_37:
    if (!v26)
      goto LABEL_179;
LABEL_38:
    *(_QWORD *)v26 = v33;
    v26 = (char *)(*((_QWORD *)this + 10) + 8);
    *((_QWORD *)this + 10) = v26;
    a2.var0 = v31;
LABEL_113:
    v25 = (char *)*((_QWORD *)this + 9);
  }
  if (v26 == v25)
    goto LABEL_179;
  v107 = *((_QWORD *)this + 13) + *((_QWORD *)this + 12);
  v108 = *(_QWORD *)&v25[8 * (v107 / 0x12)];
  if (!v108)
    goto LABEL_179;
  v109 = v107 % 0x12;
  v110 = v108 + 216 * (v107 % 0x12);
  *(_WORD *)v110 = *(_WORD *)a4;
  v111 = (void (***)(_QWORD))*((_QWORD *)a4 + 1);
  *(_QWORD *)(v110 + 8) = v111;
  if (v111)
    (**v111)(v111);
  v112 = v108 + 216 * v109;
  v113 = *((_OWORD *)a4 + 1);
  v114 = *((_OWORD *)a4 + 2);
  v115 = *((_OWORD *)a4 + 3);
  v116 = *(_OWORD *)((char *)a4 + 60);
  *(_BYTE *)(v112 + 76) = 0;
  v117 = v112 + 76;
  *(_OWORD *)(v117 - 16) = v116;
  *(_OWORD *)(v117 - 28) = v115;
  *(_OWORD *)(v117 - 44) = v114;
  *(_OWORD *)(v117 - 60) = v113;
  *(_BYTE *)(v117 + 68) = 0;
  if (*((_BYTE *)a4 + 144))
  {
    *(_OWORD *)v117 = *(_OWORD *)((char *)a4 + 76);
    v118 = *(_OWORD *)((char *)a4 + 92);
    v119 = *(_OWORD *)((char *)a4 + 108);
    v120 = *(_OWORD *)((char *)a4 + 124);
    *(_BYTE *)(v117 + 64) = *((_BYTE *)a4 + 140);
    *(_OWORD *)(v117 + 32) = v119;
    *(_OWORD *)(v117 + 48) = v120;
    *(_OWORD *)(v117 + 16) = v118;
    *(_BYTE *)(v117 + 68) = 1;
  }
  v121 = v108 + 216 * v109;
  v122 = *(_OWORD *)((char *)a4 + 148);
  *(_OWORD *)(v121 + 161) = *(_OWORD *)((char *)a4 + 161);
  *(_OWORD *)(v121 + 148) = v122;
  v123 = (unsigned int *)*((_QWORD *)a4 + 23);
  *(_QWORD *)(v121 + 184) = v123;
  if (v123)
  {
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  v125 = v108 + 216 * v109;
  v126 = *((_OWORD *)a4 + 12);
  *(_QWORD *)(v125 + 208) = *((_QWORD *)a4 + 26);
  *(_OWORD *)(v125 + 192) = v126;
  ++*((_QWORD *)this + 13);
  ++*((_DWORD *)this + 28);
  if (*((_BYTE *)this + 160))
    *((_BYTE *)this + 160) = 0;
  v127 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  v128 = v127 - a2.var0;
  v129 = a2.var0 == 0x7FFFFFFFFFFFFFFFLL || v127 == 0x8000000000000000;
  if (v129)
    v128 = 0x8000000000000000;
  if (v127 == 0x7FFFFFFFFFFFFFFFLL || a2.var0 == 0x8000000000000000)
    v131 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v131 = v128;
  v132 = *((_QWORD *)this + 1);
  v133 = (unsigned int *)*((_QWORD *)this + 28);
  if (v133)
  {
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
  }
  v135 = (Timestamp *)operator new();
  v135->var0 = (int64_t)v133;
  v135[1].var0 = (int64_t)this;
  v135[2].var0 = a2.var0;
  v135[3].var0 = (int64_t)absl::internal_any_invocable::LocalManagerTrivial;
  v136 = *((_QWORD *)this + 7);
  v137 = v136 - v131;
  if (v136 - v131 < 0 || v131 == 0x7FFFFFFFFFFFFFFFLL || v136 == 0x8000000000000000)
    v137 = 0;
  if (v136 == 0x7FFFFFFFFFFFFFFFLL || v131 == 0x8000000000000000)
    v141 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v141 = v137;
  v181 = 1;
  v178[0] = v135;
  v179 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v180 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, char *, char *))(*(_QWORD *)v132 + 16))(v132, v178, v141, &v181, &v177);
  return v179(1, v178, v178);
}

uint64_t webrtc::`anonymous namespace'::ZeroHertzAdapterMode::GetInputFrameRateFps(webrtc::_anonymous_namespace_::ZeroHertzAdapterMode *this)
{
  return *((double *)this + 4) | 0x100000000;
}

uint64_t (***absl::internal_any_invocable::LocalInvoker<false,void,webrtc::`anonymous namespace'::ZeroHertzAdapterMode::OnFrame(webrtc::Timestamp,BOOL,webrtc::VideoFrame const&)::$_0 &&>(_QWORD *a1))(_QWORD)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int16 *v6;
  uint64_t (***result)(_QWORD);
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  unint64_t v46;
  int v47;
  int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  int v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v62;
  int64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  __int16 v67;
  uint64_t (***v68)(_QWORD);
  __int128 v69;
  __int128 v70;
  _BYTE v71[28];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char v76;
  char v77;
  _OWORD v78[2];
  unsigned int *v79;
  __int128 v80;
  uint64_t v81;

  v1 = *a1;
  v2 = a1[1];
  v3 = *(_QWORD *)(*a1 + 96);
  v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 8 * (v3 / 0x12));
  v5 = v3 % 0x12;
  v6 = (__int16 *)(v4 + 216 * (v3 % 0x12));
  v67 = *v6;
  result = (uint64_t (***)(_QWORD))*((_QWORD *)v6 + 1);
  v68 = result;
  if (result)
    result = (uint64_t (***)(_QWORD))(**result)(result);
  v8 = v4 + 216 * v5;
  v9 = *(_OWORD *)(v8 + 16);
  v10 = *(_OWORD *)(v8 + 32);
  v11 = *(_OWORD *)(v8 + 48);
  *(_OWORD *)&v71[12] = *(_OWORD *)(v8 + 60);
  *(_OWORD *)v71 = v11;
  v70 = v10;
  v69 = v9;
  LOBYTE(v72) = 0;
  v77 = 0;
  if (*(_BYTE *)(v8 + 144))
  {
    v12 = v4 + 216 * v5;
    v72 = *(_OWORD *)(v12 + 76);
    v13 = *(_OWORD *)(v12 + 92);
    v14 = *(_OWORD *)(v12 + 108);
    v15 = *(_OWORD *)(v12 + 124);
    v76 = *(_BYTE *)(v12 + 140);
    v74 = v14;
    v75 = v15;
    v73 = v13;
    v77 = 1;
  }
  v16 = v4 + 216 * v5;
  v17 = *(_OWORD *)(v16 + 148);
  *(_OWORD *)((char *)v78 + 13) = *(_OWORD *)(v16 + 161);
  v78[0] = v17;
  v18 = *(unsigned int **)(v16 + 184);
  v79 = v18;
  if (v18)
  {
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = v4 + 216 * v5;
  v21 = *(_OWORD *)(v20 + 192);
  v81 = *(_QWORD *)(v20 + 208);
  v80 = v21;
  if (*(_QWORD *)(v1 + 104) < 2uLL)
  {
    v33 = *(_QWORD *)(v1 + 168);
    v32 = *(_QWORD *)(v1 + 176);
    if (v33 == v32)
    {
      LOBYTE(v36) = 0;
    }
    else
    {
      v34 = v33 + 2;
      do
      {
        if (*(_BYTE *)(v34 - 1))
          v35 = *(_BYTE *)(v34 - 2) == 0;
        else
          v35 = 0;
        v36 = !v35;
        v37 = v36 != 1 || v34 == v32;
        v34 += 2;
      }
      while (!v37);
    }
  }
  else
  {
    v22 = *(_QWORD *)(v1 + 96);
    v23 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 8 * (v22 / 0x12));
    if (!v23)
    {
      __break(1u);
      return result;
    }
    v24 = v22 % 0x12;
    v25 = *(_QWORD *)(v23 + 216 * (v22 % 0x12) + 184);
    if (v25)
    {
      do
      {
        v26 = __ldaxr((unsigned int *)v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unsigned int *)v25));
      if (!v27)
      {
        v28 = *(_QWORD *)(v25 + 8);
        if (v28)
        {
          v29 = *(_QWORD *)(v25 + 16);
          v30 = *(void **)(v25 + 8);
          if (v29 != v28)
          {
            do
            {
              v31 = *(void **)(v29 - 96);
              if (v31)
              {
                *(_QWORD *)(v29 - 88) = v31;
                operator delete(v31);
              }
              v29 -= 104;
            }
            while (v29 != v28);
            v30 = *(void **)(v25 + 8);
          }
          *(_QWORD *)(v25 + 16) = v28;
          operator delete(v30);
        }
        MEMORY[0x20BD0ADEC](v25, 0x1020C40E72D6CFBLL);
      }
    }
    v38 = *(_QWORD *)(v23 + 216 * v24 + 8);
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = vaddq_s64(*(int64x2_t *)(v1 + 96), (int64x2_t)xmmword_208F0A010);
    *(int64x2_t *)(v1 + 96) = v39;
    if (v39.i64[0] >= 0x24uLL)
    {
      operator delete(**(void ***)(v1 + 72));
      *(_QWORD *)(v1 + 72) += 8;
      *(_QWORD *)(v1 + 96) -= 18;
    }
  }
  v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16));
  v41 = v40;
  if (v40 == 0x7FFFFFFFFFFFFFFFLL || v2 == 0x8000000000000000)
  {
    if (!v43)
      goto LABEL_60;
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v44 = v40 - v2;
    if (v2 == 0x7FFFFFFFFFFFFFFFLL || v40 == 0x8000000000000000)
      v46 = 0x8000000000000000;
    else
      v46 = v40 - v2;
    if (!v43)
    {
LABEL_60:
      {
      }
      __clrex();
      goto LABEL_64;
    }
    if ((v46 & 0x8000000000000000) != 0)
    {
      v64 = -(uint64_t)v46;
      v65 = -(uint64_t)v46 / 0x3E8uLL;
      if (v64 % 0x3E8 <= 0x1F4)
        v66 = 0;
      else
        v66 = -1;
      v47 = v66 - v65;
      goto LABEL_59;
    }
  }
  if (v44 % 0x3E8 <= 0x1F3)
    v47 = v44 / 0x3E8;
  else
    v47 = v44 / 0x3E8 + 1;
LABEL_59:
  webrtc::metrics::HistogramAdd(v43, v47);
LABEL_64:
  (*(void (**)(_QWORD, uint64_t, BOOL, __int16 *))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24), v41, *(_DWORD *)(v1 + 216) > 0, &v67);
  if (*(_BYTE *)(v1 + 48))
  {
    v49 = *(_DWORD *)(v1 + 216);
    if (v49)
    {
      *(_DWORD *)(v1 + 216) = v49 - 1;
    }
    else
    {
      v57 = **(_DWORD **)(v1 + 40);
      if (v57 >= 1)
      {
        v58 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16));
        v59 = v58 - v41;
        if (v58 == 0x8000000000000000 || v41 == 0x7FFFFFFFFFFFFFFFLL)
          v59 = 0x8000000000000000;
        if (v58 == 0x7FFFFFFFFFFFFFFFLL || v41 == 0x8000000000000000)
          v59 = 0x7FFFFFFFFFFFFFFFLL;
        v62 = 200;
        if (!*(_BYTE *)(v1 + 208))
          v62 = 56;
        v63 = *(_QWORD *)(v1 + v62);
        if (*(_QWORD *)(v1 + 56) > v63)
          v63 = *(_QWORD *)(v1 + 56);
        if (v59 > v63)
        {
          *(_DWORD *)(v1 + 216) = v57;
          ++*(_DWORD *)(v1 + 112);
        }
      }
    }
  }
  v50 = v79;
  if (v79)
  {
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      v53 = *((_QWORD *)v50 + 1);
      if (v53)
      {
        v54 = *((_QWORD *)v50 + 2);
        v55 = (void *)*((_QWORD *)v50 + 1);
        if (v54 != v53)
        {
          do
          {
            v56 = *(void **)(v54 - 96);
            if (v56)
            {
              *(_QWORD *)(v54 - 88) = v56;
              operator delete(v56);
            }
            v54 -= 104;
          }
          while (v54 != v53);
          v55 = (void *)*((_QWORD *)v50 + 1);
        }
        *((_QWORD *)v50 + 2) = v53;
        operator delete(v55);
      }
      MEMORY[0x20BD0ADEC](v50, 0x1020C40E72D6CFBLL);
    }
  }
  result = v68;
  if (v68)
    return (uint64_t (***)(_QWORD))(*v68)[1](v68);
  return result;
}

uint64_t webrtc::`anonymous namespace'::ZeroHertzAdapterMode::ScheduleRepeat(webrtc::_anonymous_namespace_::ZeroHertzAdapterMode *this, int a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v16;
  _QWORD v17[2];
  uint64_t (*v18)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v19)(uint64_t);
  char v20;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  if (*((_BYTE *)this + 160))
  {
    *((_QWORD *)this + 15) = v6;
    *((_BYTE *)this + 128) = a3;
    if ((a3 & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    v10 = *(int8x16_t *)(*(_QWORD *)(*((_QWORD *)this + 9) + 8 * (*((_QWORD *)this + 12) / 0x12uLL))
                       + 216 * (*((_QWORD *)this + 12) % 0x12uLL)
                       + 24);
    *((_QWORD *)this + 17) = v6;
    *((int8x16_t *)this + 9) = vextq_s8(v10, v10, 8uLL);
    *((_BYTE *)this + 160) = 1;
    *((_QWORD *)this + 15) = v6;
    *((_BYTE *)this + 128) = a3;
    if ((a3 & 1) != 0)
    {
LABEL_3:
      v7 = 1000000;
      v8 = *((_QWORD *)this + 1);
      v9 = (unsigned int *)*((_QWORD *)this + 28);
      if (!v9)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  v11 = 200;
  if (!*((_BYTE *)this + 208))
    v11 = 56;
  v12 = *(_QWORD *)((char *)this + v11);
  if (*((_QWORD *)this + 7) <= v12)
    v7 = v12;
  else
    v7 = *((_QWORD *)this + 7);
  v8 = *((_QWORD *)this + 1);
  v9 = (unsigned int *)*((_QWORD *)this + 28);
  if (v9)
  {
    do
LABEL_12:
      v13 = __ldxr(v9);
    while (__stxr(v13 + 1, v9));
  }
LABEL_13:
  v14 = operator new();
  *(_QWORD *)v14 = v9;
  *(_QWORD *)(v14 + 8) = this;
  *(_DWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
  v20 = 1;
  v17[0] = v14;
  v18 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v19 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, char *, char *))(*(_QWORD *)v8 + 16))(v8, v17, v7, &v20, &v16);
  return v18(1, v17, v17);
}

_DWORD *absl::internal_any_invocable::LocalInvoker<false,void,webrtc::`anonymous namespace'::ZeroHertzAdapterMode::ScheduleRepeat(int,BOOL)::$_0 &&>(_DWORD *result)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  _BOOL4 v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)result;
  v2 = result[2];
  if (*(_DWORD *)(*(_QWORD *)result + 112) == v2)
  {
    v3 = *(_QWORD *)(v1 + 96);
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 8 * (v3 / 0x12));
    v5 = v3 % 0x12;
    v6 = v4 + 216 * (v3 % 0x12);
    v7 = *(unsigned __int8 *)(v6 + 176);
    *(_QWORD *)(v6 + 160) = 0;
    *(_QWORD *)(v6 + 168) = 0;
    if (!v7)
      *(_BYTE *)(v6 + 176) = 1;
    result = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16));
    if (*(_BYTE *)(v1 + 160))
    {
      v8 = *(_QWORD *)(v1 + 136);
      v9 = (unint64_t)result - v8;
      if (v8 == 0x7FFFFFFFFFFFFFFFLL || result == (_DWORD *)0x8000000000000000)
        v9 = 0x8000000000000000;
      if (result == (_DWORD *)0x7FFFFFFFFFFFFFFFLL || v8 == 0x8000000000000000)
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v12 = v9;
      v13 = v4 + 216 * v5;
      v15 = *(_QWORD *)(v13 + 32);
      v14 = (_QWORD *)(v13 + 32);
      if (v15 >= 1)
        *v14 = *(_QWORD *)(v1 + 144) + v12;
      v16 = v4 + 216 * v5;
      v18 = *(_QWORD *)(v16 + 24);
      v17 = (_QWORD *)(v16 + 24);
      if (v18)
      {
        v19 = v12 / 0x3E8uLL;
        if (v12 % 0x3E8uLL > 0x1F3)
          ++v19;
        if (-v12 % 0x3E8uLL <= 0x1F4)
          v20 = 0;
        else
          v20 = -1;
        if (v12 < 0)
          v21 = v20 - -v12 / 0x3E8uLL;
        else
          v21 = v19;
        *v17 = v21 + *(_QWORD *)(v1 + 152);
      }
      v23 = *(_QWORD *)(v1 + 168);
      v22 = *(_QWORD *)(v1 + 176);
      if (v23 == v22)
      {
        LOBYTE(v26) = 0;
      }
      else
      {
        v24 = v23 + 2;
        do
        {
          if (*(_BYTE *)(v24 - 1))
            v25 = *(_BYTE *)(v24 - 2) == 0;
          else
            v25 = 0;
          v26 = !v25;
          v27 = !v26 || v24 == v22;
          v24 += 2;
        }
        while (!v27);
      }
      v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16));
      result = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, BOOL, uint64_t))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24), v28, *(_DWORD *)(v1 + 216) > 0, v6);
      if (*(_BYTE *)(v1 + 48))
      {
        v29 = *(_DWORD *)(v1 + 216);
        if (v29)
        {
          *(_DWORD *)(v1 + 216) = v29 - 1;
        }
        else
        {
          v30 = **(_DWORD **)(v1 + 40);
          if (v30 >= 1)
          {
            result = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16));
            v31 = 0x7FFFFFFFFFFFFFFFLL;
            v32 = (unint64_t)result - v28;
            if (v28 == 0x7FFFFFFFFFFFFFFFLL || result == (_DWORD *)0x8000000000000000)
              v32 = 0x8000000000000000;
            if (result != (_DWORD *)0x7FFFFFFFFFFFFFFFLL && v28 != 0x8000000000000000)
              v31 = v32;
            v35 = 200;
            if (!*(_BYTE *)(v1 + 208))
              v35 = 56;
            v36 = *(_QWORD *)(v1 + v35);
            if (*(_QWORD *)(v1 + 56) > v36)
              v36 = *(_QWORD *)(v1 + 56);
            if (v31 > v36)
            {
              *(_DWORD *)(v1 + 216) = v30;
              ++*(_DWORD *)(v1 + 112);
            }
          }
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void webrtc::`anonymous namespace'::PassthroughAdapterMode::~PassthroughAdapterMode(void **this)
{
  *this = &off_24C0B44F0;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 4);
}

{
  *this = &off_24C0B44F0;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 4);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::PassthroughAdapterMode::OnFrame(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::PassthroughAdapterMode::GetInputFrameRateFps(webrtc::_anonymous_namespace_::PassthroughAdapterMode *this)
{
  if (*((_BYTE *)this + 16))
    return *((unsigned int *)this + 2) | 0x100000000;
  else
    return 0;
}

void webrtc::`anonymous namespace'::PassthroughAdapterMode::UpdateFrameRate(webrtc::_anonymous_namespace_::PassthroughAdapterMode *this, Timestamp a2)
{
  webrtc::RateStatistics *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (webrtc::_anonymous_namespace_::PassthroughAdapterMode *)((char *)this + 32);
  v5 = (unint64_t)a2.var0 >> 3;
  v6 = (unint64_t)a2.var0 / 0x3E8;
  if ((unint64_t)a2.var0 % 0x3E8 > 0x1F3)
    ++v6;
  if (-a2.var0 % 0x3E8uLL <= 0x1F4)
    v7 = 0;
  else
    v7 = -1;
  if (a2.var0 < 0)
    v8 = v7 - -a2.var0 / 0x3E8uLL;
  else
    v8 = v6;
  v9 = webrtc::RateStatistics::Rate((webrtc::_anonymous_namespace_::PassthroughAdapterMode *)((char *)this + 32), v8);
  if (*((unsigned __int8 *)this + 16) == v10)
  {
    if (*((_BYTE *)this + 16))
      *((_QWORD *)this + 1) = v9;
  }
  else if (*((_BYTE *)this + 16))
  {
    *((_BYTE *)this + 16) = 0;
  }
  else
  {
    *((_QWORD *)this + 1) = v9;
    *((_BYTE *)this + 16) = 1;
  }
  v11 = (unint64_t)((v5 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
  if (a2.var0 - 1000 * v11 > 0x1F3)
    ++v11;
  if (-a2.var0 % 0x3E8uLL <= 0x1F4)
    v12 = 0;
  else
    v12 = -1;
  if (a2.var0 < 0)
    v13 = v12 - -a2.var0 / 0x3E8uLL;
  else
    v13 = v11;
  webrtc::RateStatistics::Update(v4, 1, v13);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::OnFrame(webrtc::VideoFrame const&)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  int v14;
  unsigned int *v16;
  signed int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;

  v1 = *a1;
  v2 = **a1;
  if (!*(_BYTE *)(v2 + 488))
    goto LABEL_26;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 16))(*(_QWORD *)(v2 + 8));
  if (!*(_BYTE *)(v2 + 488))
  {
    __break(1u);
LABEL_49:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_cadence_adapter.cc", 906, "passthrough_adapter_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v4, v5, v6, v7, v30);
    goto LABEL_50;
  }
  v8 = *(_QWORD *)(v2 + 480);
  if (v3 == 0x7FFFFFFFFFFFFFFFLL || v8 == 0x8000000000000000)
  {
    *(_BYTE *)(v2 + 488) = 0;
    if (!v10)
      goto LABEL_22;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v11 = v3 - v8;
    if (v8 == 0x7FFFFFFFFFFFFFFFLL || v3 == 0x8000000000000000)
      v13 = 0x8000000000000000;
    else
      v13 = v3 - v8;
    *(_BYTE *)(v2 + 488) = 0;
    if (!v10)
    {
LABEL_22:
      {
      }
      __clrex();
      goto LABEL_26;
    }
    if ((v13 & 0x8000000000000000) != 0)
    {
      v27 = -(uint64_t)v13;
      v28 = -(uint64_t)v13 / 0x3E8uLL;
      if (v27 % 0x3E8 <= 0x1F4)
        v29 = 0;
      else
        v29 = -1;
      v14 = v29 - v28;
      goto LABEL_21;
    }
  }
  if (v11 % 0x3E8 <= 0x1F3)
    v14 = v11 / 0x3E8;
  else
    v14 = v11 / 0x3E8 + 1;
LABEL_21:
  webrtc::metrics::HistogramAdd(v10, v14);
LABEL_26:
  v16 = (unsigned int *)(v2 + 576);
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 - 1, v16));
  v18 = v1[1];
  (*(void (**)(_QWORD, uint64_t, BOOL, uint64_t *))(**(_QWORD **)(v2 + 456) + 16))(*(_QWORD *)(v2 + 456), v18, v17 > 1, v1 + 2);
  v19 = v1[6];
  if (!*(_BYTE *)(v2 + 40))
    goto LABEL_34;
  if (*(_QWORD *)(v2 + 32) >= v19)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      if (!*(_BYTE *)(v2 + 40))
      {
LABEL_50:
        std::__throw_bad_optional_access[abi:sn180100]();
      }
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v20, v21, v22, v4, v5, v6, v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_cadence_adapter.cc");
    }
    *(_BYTE *)(v2 + 48) = 0;
    v19 = v1[6];
    if (!*(_BYTE *)(v2 + 40))
LABEL_34:
      *(_BYTE *)(v2 + 40) = 1;
  }
  *(_QWORD *)(v2 + 32) = v19;
  v23 = *(unsigned __int8 *)(v2 + 25);
  if (!*(_QWORD *)(v2 + 464))
    goto LABEL_38;
  v24 = *(_QWORD *)(v2 + 432);
  if (!v24)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_cadence_adapter.cc", 903, "vsync_encode_adapter_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v4, v5, v6, v7, v30);
LABEL_38:
    if (*(_BYTE *)(v2 + 184))
    {
      v24 = v2 + 56;
      goto LABEL_40;
    }
    goto LABEL_49;
  }
LABEL_40:
  if (v23)
    v25 = v19;
  else
    v25 = v18;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v24, v25);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::OnFrame(webrtc::VideoFrame const&)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 200);
      if (v4)
      {
        do
        {
          v5 = __ldaxr((unsigned int *)v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, (unsigned int *)v4));
        if (!v6)
        {
          v7 = *(_QWORD *)(v4 + 8);
          if (v7)
          {
            v8 = *(_QWORD *)(v4 + 16);
            v9 = *(void **)(v4 + 8);
            if (v8 != v7)
            {
              do
              {
                v10 = *(void **)(v8 - 96);
                if (v10)
                {
                  *(_QWORD *)(v8 - 88) = v10;
                  operator delete(v10);
                }
                v8 -= 104;
              }
              while (v8 != v7);
              v9 = *(void **)(v4 + 8);
            }
            *(_QWORD *)(v4 + 16) = v7;
            operator delete(v9);
          }
          MEMORY[0x20BD0ADEC](v4, 0x1020C40E72D6CFBLL);
        }
      }
      v11 = *(_QWORD *)(v3 + 24);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::OnDiscardedFrame(void)::$_0 &&>(uint64_t result)
{
  if (*(_BYTE *)(*(_QWORD *)result + 424))
  return result;
}

uint64_t webrtc::`anonymous namespace'::ZeroHertzAdapterMode::MaybeStartRefreshFrameRequester(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[2];
  __n128 (*v20)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v21)(uint64_t *);
  unsigned int *v22;

  if (!*(_QWORD *)(this + 192))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 8);
    v3 = 3 * *(_QWORD *)(v1 + 56);
    v19[0] = v1;
    v20 = absl::internal_any_invocable::LocalManagerTrivial;
    v5 = &unk_253EA7000;
    if ((v4 & 1) == 0)
    {
      v16 = v3;
      v17 = v2;
      v5 = (_QWORD *)&unk_253EA7000;
      v14 = v13;
      v3 = v16;
      v2 = v17;
      if (v14)
      {
        v15 = (_QWORD *)operator new();
        *v15 = &unk_24C0B13E8;
        webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v15;
        v5 = (_QWORD *)&unk_253EA7000;
        v3 = v16;
        v2 = v17;
      }
    }
    webrtc::RepeatingTaskHandle::DelayedStart(v2, v3, (uint64_t)v19, 0, v5[153], (uint64_t)&v18, &v22);
    v6 = v22;
    v22 = 0;
    v7 = *(unsigned int **)(v1 + 192);
    *(_QWORD *)(v1 + 192) = v6;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        MEMORY[0x20BD0ADEC]();
      v10 = v22;
      if (v22)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          MEMORY[0x20BD0ADEC]();
      }
    }
    return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *))v20)(1, v19, v19);
  }
  return this;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::`anonymous namespace'::ZeroHertzAdapterMode::MaybeStartRefreshFrameRequester(void)::$_0 &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 24);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  return *(_QWORD *)(v1 + 56);
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::OnConstraintsChanged(webrtc::VideoTrackSourceConstraints const&)::$_0 &&>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  double *v10;
  _BOOL4 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v8 = *a1;
  v9 = **a1;
  v10 = (double *)(v9 + 504);
  if (*(_BYTE *)(v9 + 536))
  {
    if (*(_BYTE *)(v9 + 528) && *(double *)(v9 + 520) > 0.0 && *(_BYTE *)(v9 + 512) && *v10 == 0.0)
    {
      v11 = *(_BYTE *)(v9 + 448) != 0;
      v12 = *(_OWORD *)(v8 + 3);
      *(_OWORD *)v10 = *(_OWORD *)(v8 + 1);
      *(_OWORD *)(v9 + 520) = v12;
    }
    else
    {
      v11 = 0;
      v13 = *(_OWORD *)(v8 + 3);
      *(_OWORD *)v10 = *(_OWORD *)(v8 + 1);
      *(_OWORD *)(v9 + 520) = v13;
    }
  }
  else
  {
    v11 = 0;
    v14 = *(_OWORD *)(v8 + 3);
    *(_OWORD *)v10 = *(_OWORD *)(v8 + 1);
    *(_OWORD *)(v9 + 520) = v14;
    *(_BYTE *)(v9 + 536) = 1;
  }
}

void webrtc::`anonymous namespace'::FrameCadenceAdapterImpl::MaybeReconfigureAdapters(webrtc::_anonymous_namespace_::FrameCadenceAdapterImpl *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  double v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  _WORD *v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v37;

  if (*((_BYTE *)this + 536)
    && *((_BYTE *)this + 528)
    && *((double *)this + 65) > 0.0
    && *((_BYTE *)this + 512)
    && *((double *)this + 63) == 0.0
    && *((_BYTE *)this + 448))
  {
    v10 = (*(uint64_t (**)(webrtc::_anonymous_namespace_::FrameCadenceAdapterImpl *))(*(_QWORD *)this + 56))(this);
    if (*((_BYTE *)this + 536))
    {
      if (*((_BYTE *)this + 528))
      {
        v11 = (double)v10;
        if ((v10 & 0xFF00000000) == 0)
          v11 = 4294967300.0;
        if (a2 && *((double *)this + 65) == v11)
          goto LABEL_44;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        if (!*((_BYTE *)this + 536))
          goto LABEL_63;
        if (!*((_BYTE *)this + 528))
          goto LABEL_65;
        rtc::webrtc_logging_impl::Log("\r\t\a\t", v12, v13, v14, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_cadence_adapter.cc");
      }
      if (*((_BYTE *)this + 536))
      {
        if (!*((_BYTE *)this + 528))
          goto LABEL_65;
        if (*((_BYTE *)this + 424))
        {
          *((_BYTE *)this + 424) = 0;
        }
        *((_QWORD *)this + 24) = &off_24C0B44B8;
        v15 = *((_QWORD *)this + 62);
        v16 = *((double *)this + 65);
        v17 = *((_BYTE *)this + 24) != 0;
        *(int8x16_t *)((char *)this + 200) = vextq_s8(*(int8x16_t *)((char *)this + 8), *(int8x16_t *)((char *)this + 8), 8uLL);
        *((_QWORD *)this + 27) = v15;
        *((double *)this + 28) = v16;
        *((_QWORD *)this + 29) = (char *)this + 576;
        *((_BYTE *)this + 240) = v17;
        *((_QWORD *)this + 31) = llround(1000000.0 / v16);
        *((_BYTE *)this + 312) = 0;
        *((_BYTE *)this + 352) = 0;
        *((_BYTE *)this + 400) = 0;
        *((_DWORD *)this + 102) = 0;
        *((_OWORD *)this + 16) = 0u;
        *((_OWORD *)this + 17) = 0u;
        *((_OWORD *)this + 18) = 0u;
        *((_DWORD *)this + 76) = 0;
        *((_BYTE *)this + 392) = 0;
        *(_OWORD *)((char *)this + 376) = 0u;
        *(_OWORD *)((char *)this + 360) = 0u;
        v18 = operator new();
        *(_DWORD *)v18 = 0;
        *(_BYTE *)(v18 + 4) = 1;
        *((_QWORD *)this + 52) = v18;
        do
          v19 = __ldxr((unsigned int *)v18);
        while (__stxr(v19 + 1, (unsigned int *)v18));
        *((_BYTE *)this + 424) = 1;
        if (*((_BYTE *)this + 552) && (v20 = *((double *)this + 68), v20 > 0.0))
        {
          v21 = llround(1000000.0 / v20);
          if (!*((_BYTE *)this + 400))
            *((_BYTE *)this + 400) = 1;
          *((_QWORD *)this + 49) = v21;
        }
        else if (*((_BYTE *)this + 400))
        {
          *((_BYTE *)this + 400) = 0;
        }
        v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
        if (!*((_BYTE *)this + 488))
          *((_BYTE *)this + 488) = 1;
        *((_QWORD *)this + 60) = v26;
LABEL_44:
        if (*((_BYTE *)this + 424))
        {
          if (*((_BYTE *)this + 448))
          {
            v27 = *((_QWORD *)this + 55);
            v28 = (_WORD *)*((_QWORD *)this + 45);
            *((_QWORD *)this + 46) = v28;
            if (v27)
            {
              v29 = *((_QWORD *)this + 47) - (_QWORD)v28;
              if (v27 <= v29 >> 1)
              {
                v35 = 2 * v27;
                v36 = &v28[v27];
                do
                {
                  if (!v28)
                    goto LABEL_63;
                  *v28++ = 256;
                  v35 -= 2;
                }
                while (v35);
                *((_QWORD *)this + 46) = v36;
              }
              else
              {
                if ((v27 & 0x8000000000000000) != 0)
                  goto LABEL_66;
                if (v29 <= v27)
                  v30 = v27;
                else
                  v30 = *((_QWORD *)this + 47) - (_QWORD)v28;
                v31 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFFELL;
                v32 = 0x7FFFFFFFFFFFFFFFLL;
                if (!v31)
                  v32 = v30;
                if (v32 < 0)
                  std::__throw_bad_array_new_length[abi:sn180100]();
                v33 = 2 * v32;
                v34 = (char *)operator new(2 * v32);
                memset_pattern16(v34, &unk_208F0A020, 2 * v27);
                *((_QWORD *)this + 45) = v34;
                *((_QWORD *)this + 46) = &v34[2 * v27];
                *((_QWORD *)this + 47) = &v34[v33];
                if (v28)
                  operator delete(v28);
              }
            }
            if (*((_BYTE *)this + 424))
            {
              v25 = (char *)this + 192;
              goto LABEL_38;
            }
          }
LABEL_65:
          std::__throw_bad_optional_access[abi:sn180100]();
LABEL_66:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
      }
    }
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2)
  {
    if (*((_BYTE *)this + 424))
    {
      *((_BYTE *)this + 424) = 0;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v22, v23, v24, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_cadence_adapter.cc");
  }
  if (*((_QWORD *)this + 58))
  {
    v25 = (char *)*((_QWORD *)this + 54);
    if (v25)
      goto LABEL_38;
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_cadence_adapter.cc", 1024, "vsync_encode_adapter_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v37);
  }
  if (!*((_BYTE *)this + 184))
  {
LABEL_64:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_cadence_adapter.cc", 1027, "passthrough_adapter_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v37);
    goto LABEL_65;
  }
  v25 = (char *)this + 56;
LABEL_38:
  *((_QWORD *)this + 57) = v25;
}

void webrtc::`anonymous namespace'::VSyncEncodeAdapterMode::~VSyncEncodeAdapterMode(webrtc::_anonymous_namespace_::VSyncEncodeAdapterMode *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  *(_QWORD *)this = &off_24C0B4528;
  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    v3 = *((_QWORD *)this + 24);
    v4 = (void *)*((_QWORD *)this + 23);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 32);
        if (v5)
        {
          do
          {
            v6 = __ldaxr((unsigned int *)v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, (unsigned int *)v5));
          if (!v7)
          {
            v8 = *(_QWORD *)(v5 + 8);
            if (v8)
            {
              v9 = *(_QWORD *)(v5 + 16);
              v10 = *(void **)(v5 + 8);
              if (v9 != v8)
              {
                do
                {
                  v11 = *(void **)(v9 - 96);
                  if (v11)
                  {
                    *(_QWORD *)(v9 - 88) = v11;
                    operator delete(v11);
                  }
                  v9 -= 104;
                }
                while (v9 != v8);
                v10 = *(void **)(v5 + 8);
              }
              *(_QWORD *)(v5 + 16) = v8;
              operator delete(v10);
            }
            MEMORY[0x20BD0ADEC](v5, 0x1020C40E72D6CFBLL);
          }
        }
        v12 = *(_QWORD *)(v3 - 208);
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v3 -= 224;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 23);
    }
    *((_QWORD *)this + 24) = v2;
    operator delete(v4);
  }
  v13 = *((_QWORD *)this + 21);
  *(_BYTE *)(v13 + 4) = 0;
  do
  {
    v14 = __ldaxr((unsigned int *)v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)v13));
  if (!v15)
    MEMORY[0x20BD0ADEC]();
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 6);
  v16 = (unsigned int *)*((_QWORD *)this + 3);
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      MEMORY[0x20BD0ADEC]();
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  *(_QWORD *)this = &off_24C0B4528;
  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    v3 = *((_QWORD *)this + 24);
    v4 = (void *)*((_QWORD *)this + 23);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 32);
        if (v5)
        {
          do
          {
            v6 = __ldaxr((unsigned int *)v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, (unsigned int *)v5));
          if (!v7)
          {
            v8 = *(_QWORD *)(v5 + 8);
            if (v8)
            {
              v9 = *(_QWORD *)(v5 + 16);
              v10 = *(void **)(v5 + 8);
              if (v9 != v8)
              {
                do
                {
                  v11 = *(void **)(v9 - 96);
                  if (v11)
                  {
                    *(_QWORD *)(v9 - 88) = v11;
                    operator delete(v11);
                  }
                  v9 -= 104;
                }
                while (v9 != v8);
                v10 = *(void **)(v5 + 8);
              }
              *(_QWORD *)(v5 + 16) = v8;
              operator delete(v10);
            }
            MEMORY[0x20BD0ADEC](v5, 0x1020C40E72D6CFBLL);
          }
        }
        v12 = *(_QWORD *)(v3 - 208);
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v3 -= 224;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 23);
    }
    *((_QWORD *)this + 24) = v2;
    operator delete(v4);
  }
  v13 = *((_QWORD *)this + 21);
  *(_BYTE *)(v13 + 4) = 0;
  do
  {
    v14 = __ldaxr((unsigned int *)v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)v13));
  if (!v15)
    MEMORY[0x20BD0ADEC]();
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 6);
  v16 = (unsigned int *)*((_QWORD *)this + 3);
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::VSyncEncodeAdapterMode::OnFrame(webrtc::_anonymous_namespace_::VSyncEncodeAdapterMode *this, Timestamp a2, char a3, const webrtc::VideoFrame *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  __int16 v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t result;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  void (***v34)(_QWORD);
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned int *v43;
  unsigned int v44;
  __int128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void (***v55)(_QWORD);
  char *v56;
  _BYTE *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  unsigned int *v62;
  unsigned int v63;
  char *v64;
  char *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  void (***v72)(_QWORD);
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unsigned int *v81;
  unsigned int v82;
  _QWORD *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  _QWORD *v95;
  char v96;
  int64_t var0;
  _QWORD v98[2];
  uint64_t (*v99)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v100)(uint64_t);
  char v101;
  __int128 v102;
  uint64_t v103;
  char v104;
  _QWORD v105[2];
  uint64_t (*v106)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v107)(uint64_t);
  _BYTE v108[29];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _OWORD v115[2];
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)this + 20);
  {
    var0 = a2.var0;
    v9 = (unsigned int *)*((_QWORD *)this + 21);
    if (v9)
    {
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = *(_WORD *)a4;
    v12 = *((_QWORD *)a4 + 1);
    if (v12)
      (**(void (***)(_QWORD))v12)(*((_QWORD *)a4 + 1));
    v13 = *((_OWORD *)a4 + 2);
    v113 = *((_OWORD *)a4 + 1);
    v114 = v13;
    v115[0] = *((_OWORD *)a4 + 3);
    *(_OWORD *)((char *)v115 + 12) = *(_OWORD *)((char *)a4 + 60);
    v14 = *((unsigned __int8 *)a4 + 144);
    if (*((_BYTE *)a4 + 144))
    {
      v96 = *((_BYTE *)a4 + 76);
      v15 = *(_OWORD *)((char *)a4 + 93);
      v109 = *(_OWORD *)((char *)a4 + 77);
      v110 = v15;
      v16 = *(_OWORD *)((char *)a4 + 125);
      v111 = *(_OWORD *)((char *)a4 + 109);
      v112 = v16;
      *(_OWORD *)v108 = *(_OWORD *)((char *)a4 + 148);
      *(_OWORD *)&v108[13] = *(_OWORD *)((char *)a4 + 161);
      v17 = *((_QWORD *)a4 + 23);
      if (v17)
        goto LABEL_8;
    }
    else
    {
      v96 = 0;
      *(_OWORD *)v108 = *(_OWORD *)((char *)a4 + 148);
      *(_OWORD *)&v108[13] = *(_OWORD *)((char *)a4 + 161);
      v17 = *((_QWORD *)a4 + 23);
      if (v17)
      {
        do
LABEL_8:
          v18 = __ldxr((unsigned int *)v17);
        while (__stxr(v18 + 1, (unsigned int *)v17));
      }
    }
    v102 = *((_OWORD *)a4 + 12);
    v103 = *((_QWORD *)a4 + 26);
    v19 = operator new();
    *(_QWORD *)v19 = this;
    *(_QWORD *)(v19 + 8) = var0;
    *(_BYTE *)(v19 + 16) = a3;
    *(_WORD *)(v19 + 24) = v11;
    *(_QWORD *)(v19 + 32) = v12;
    if (v12)
      (**(void (***)(uint64_t))v12)(v12);
    v20 = v114;
    *(_OWORD *)(v19 + 40) = v113;
    *(_OWORD *)(v19 + 56) = v20;
    *(_OWORD *)(v19 + 72) = v115[0];
    *(_OWORD *)(v19 + 84) = *(_OWORD *)((char *)v115 + 12);
    *(_BYTE *)(v19 + 100) = 0;
    *(_BYTE *)(v19 + 168) = 0;
    if (v14)
    {
      *(_BYTE *)(v19 + 100) = v96;
      v21 = v110;
      *(_OWORD *)(v19 + 101) = v109;
      *(_OWORD *)(v19 + 117) = v21;
      v22 = v112;
      *(_OWORD *)(v19 + 133) = v111;
      *(_OWORD *)(v19 + 149) = v22;
      *(_BYTE *)(v19 + 168) = 1;
    }
    *(_OWORD *)(v19 + 172) = *(_OWORD *)v108;
    *(_OWORD *)(v19 + 185) = *(_OWORD *)&v108[13];
    *(_QWORD *)(v19 + 208) = v17;
    if (v17)
    {
      do
        v23 = __ldxr((unsigned int *)v17);
      while (__stxr(v23 + 1, (unsigned int *)v17));
    }
    *(_OWORD *)(v19 + 216) = v102;
    *(_QWORD *)(v19 + 232) = v103;
    v24 = (_QWORD *)operator new();
    *v24 = v9;
    v24[1] = v19;
    v105[0] = v24;
    v106 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v107 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v8 + 8))(v8, v105, &v104, &v101);
    result = v106(1, v105, v105);
    if (v17)
    {
      do
      {
        v26 = __ldaxr((unsigned int *)v17);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unsigned int *)v17));
      if (!v27)
      {
        v28 = *(_QWORD *)(v17 + 8);
        if (v28)
        {
          v29 = *(_QWORD *)(v17 + 16);
          v30 = *(void **)(v17 + 8);
          if (v29 != v28)
          {
            do
            {
              v31 = *(void **)(v29 - 96);
              if (v31)
              {
                *(_QWORD *)(v29 - 88) = v31;
                operator delete(v31);
              }
              v29 -= 104;
            }
            while (v29 != v28);
            v30 = *(void **)(v17 + 8);
          }
          *(_QWORD *)(v17 + 16) = v28;
          operator delete(v30);
        }
        result = MEMORY[0x20BD0ADEC](v17, 0x1020C40E72D6CFBLL);
      }
    }
    if (v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    return result;
  }
  v33 = *((_QWORD *)this + 24);
  v32 = *((_QWORD *)this + 25);
  if (v33 >= v32)
  {
    v47 = *((_QWORD *)this + 23);
    v48 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v33 - v47) >> 5);
    if ((unint64_t)(v48 + 1) > 0x124924924924924)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v49 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v32 - v47) >> 5);
    v50 = 2 * v49;
    if (2 * v49 <= v48 + 1)
      v50 = v48 + 1;
    if (v49 >= 0x92492492492492)
      v51 = 0x124924924924924;
    else
      v51 = v50;
    if (v51)
    {
      if (v51 > 0x124924924924924)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v52 = 224 * v51;
      v53 = (char *)operator new(224 * v51);
      v54 = &v53[224 * v48];
      *(Timestamp *)v54 = a2;
      *((_WORD *)v54 + 4) = *(_WORD *)a4;
      v55 = (void (***)(_QWORD))*((_QWORD *)a4 + 1);
      *((_QWORD *)v54 + 2) = v55;
      if (v55)
        (**v55)(v55);
      v56 = &v53[224 * v48];
      v56[152] = 0;
      v57 = v56 + 152;
      v58 = *((_OWORD *)a4 + 2);
      *((_OWORD *)v57 - 8) = *((_OWORD *)a4 + 1);
      *((_OWORD *)v57 - 7) = v58;
      *((_OWORD *)v57 - 6) = *((_OWORD *)a4 + 3);
      *(_OWORD *)(v57 - 84) = *(_OWORD *)((char *)a4 + 60);
      *(v57 - 68) = 0;
      if (*((_BYTE *)a4 + 144))
      {
        v59 = *(_OWORD *)((char *)a4 + 92);
        v60 = *(_OWORD *)((char *)a4 + 124);
        *(_OWORD *)(v57 - 36) = *(_OWORD *)((char *)a4 + 108);
        *(_OWORD *)(v57 - 20) = v60;
        *(v57 - 4) = *((_BYTE *)a4 + 140);
        *(_OWORD *)(v57 - 68) = *(_OWORD *)((char *)a4 + 76);
        *(_OWORD *)(v57 - 52) = v59;
        *v57 = 1;
      }
      v61 = &v53[224 * v48];
      *(_OWORD *)(v61 + 156) = *(_OWORD *)((char *)a4 + 148);
      *(_OWORD *)(v61 + 169) = *(_OWORD *)((char *)a4 + 161);
      v62 = (unsigned int *)*((_QWORD *)a4 + 23);
      *((_QWORD *)v61 + 24) = v62;
      if (v62)
      {
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      v64 = &v53[v52];
      v65 = &v53[224 * v48];
      *(_OWORD *)(v65 + 200) = *((_OWORD *)a4 + 12);
      *((_QWORD *)v65 + 27) = *((_QWORD *)a4 + 26);
      v46 = v54 + 224;
      v67 = (_QWORD *)*((_QWORD *)this + 23);
      v66 = (_QWORD *)*((_QWORD *)this + 24);
      if (v66 == v67)
      {
        *((_QWORD *)this + 23) = v54;
        *((_QWORD *)this + 24) = v46;
        *((_QWORD *)this + 25) = v64;
      }
      else
      {
        v68 = *((_QWORD *)this + 24);
        v69 = v54;
        do
        {
          v71 = *(_QWORD *)(v68 - 224);
          v68 -= 224;
          *((_QWORD *)v69 - 28) = v71;
          v69 -= 224;
          *((_WORD *)v69 + 4) = *(_WORD *)(v68 + 8);
          v72 = *(void (****)(_QWORD))(v68 + 16);
          *((_QWORD *)v69 + 2) = v72;
          if (v72)
            (**v72)(v72);
          v73 = *(_OWORD *)(v66 - 25);
          v74 = *(_OWORD *)(v66 - 23);
          v75 = *(_OWORD *)(v66 - 21);
          v76 = *(_OWORD *)((char *)v66 - 156);
          *(v54 - 140) = 0;
          *(_OWORD *)(v54 - 156) = v76;
          *(_OWORD *)(v54 - 168) = v75;
          *(_OWORD *)(v54 - 184) = v74;
          *(_OWORD *)(v54 - 200) = v73;
          *(v54 - 72) = 0;
          if (*((_BYTE *)v66 - 72))
          {
            *(_OWORD *)(v54 - 140) = *(_OWORD *)((char *)v66 - 140);
            v77 = *(_OWORD *)((char *)v66 - 124);
            v78 = *(_OWORD *)((char *)v66 - 108);
            v79 = *(_OWORD *)((char *)v66 - 92);
            *(v54 - 76) = *((_BYTE *)v66 - 76);
            *(_OWORD *)(v54 - 108) = v78;
            *(_OWORD *)(v54 - 92) = v79;
            *(_OWORD *)(v54 - 124) = v77;
            *(v54 - 72) = 1;
          }
          v80 = *(_OWORD *)((char *)v66 - 68);
          *(_OWORD *)(v54 - 55) = *(_OWORD *)((char *)v66 - 55);
          *(_OWORD *)(v54 - 68) = v80;
          v81 = (unsigned int *)*(v66 - 4);
          *((_QWORD *)v54 - 4) = v81;
          if (v81)
          {
            do
              v82 = __ldxr(v81);
            while (__stxr(v82 + 1, v81));
          }
          v70 = *(_OWORD *)(v66 - 3);
          *((_QWORD *)v54 - 1) = *(v66 - 1);
          *(_OWORD *)(v54 - 24) = v70;
          v66 = (_QWORD *)v68;
          v54 = v69;
        }
        while ((_QWORD *)v68 != v67);
        v66 = (_QWORD *)*((_QWORD *)this + 23);
        v83 = (_QWORD *)*((_QWORD *)this + 24);
        *((_QWORD *)this + 23) = v69;
        *((_QWORD *)this + 24) = v46;
        *((_QWORD *)this + 25) = v64;
        while (v83 != v66)
        {
          v84 = *(v83 - 4);
          if (v84)
          {
            do
            {
              v85 = __ldaxr((unsigned int *)v84);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, (unsigned int *)v84));
            if (!v86)
            {
              v87 = *(_QWORD *)(v84 + 8);
              if (v87)
              {
                v88 = *(_QWORD *)(v84 + 16);
                v89 = *(void **)(v84 + 8);
                if (v88 != v87)
                {
                  do
                  {
                    v90 = *(void **)(v88 - 96);
                    if (v90)
                    {
                      *(_QWORD *)(v88 - 88) = v90;
                      operator delete(v90);
                    }
                    v88 -= 104;
                  }
                  while (v88 != v87);
                  v89 = *(void **)(v84 + 8);
                }
                *(_QWORD *)(v84 + 16) = v87;
                operator delete(v89);
              }
              MEMORY[0x20BD0ADEC](v84, 0x1020C40E72D6CFBLL);
            }
          }
          v91 = *(v83 - 26);
          if (v91)
            (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
          v83 -= 28;
        }
      }
      if (v66)
        operator delete(v66);
      goto LABEL_85;
    }
LABEL_90:
    __break(1u);
  }
  if (!v33)
    goto LABEL_90;
  *(Timestamp *)v33 = a2;
  *(_WORD *)(v33 + 8) = *(_WORD *)a4;
  v34 = (void (***)(_QWORD))*((_QWORD *)a4 + 1);
  *(_QWORD *)(v33 + 16) = v34;
  if (v34)
    (**v34)(v34);
  v35 = *((_OWORD *)a4 + 1);
  v36 = *((_OWORD *)a4 + 2);
  v37 = *((_OWORD *)a4 + 3);
  v38 = *(_OWORD *)((char *)a4 + 60);
  *(_BYTE *)(v33 + 84) = 0;
  *(_OWORD *)(v33 + 68) = v38;
  *(_OWORD *)(v33 + 56) = v37;
  *(_OWORD *)(v33 + 40) = v36;
  *(_OWORD *)(v33 + 24) = v35;
  *(_BYTE *)(v33 + 152) = 0;
  if (*((_BYTE *)a4 + 144))
  {
    *(_OWORD *)(v33 + 84) = *(_OWORD *)((char *)a4 + 76);
    v39 = *(_OWORD *)((char *)a4 + 92);
    v40 = *(_OWORD *)((char *)a4 + 108);
    v41 = *(_OWORD *)((char *)a4 + 124);
    *(_BYTE *)(v33 + 148) = *((_BYTE *)a4 + 140);
    *(_OWORD *)(v33 + 116) = v40;
    *(_OWORD *)(v33 + 132) = v41;
    *(_OWORD *)(v33 + 100) = v39;
    *(_BYTE *)(v33 + 152) = 1;
  }
  v42 = *(_OWORD *)((char *)a4 + 148);
  *(_OWORD *)(v33 + 169) = *(_OWORD *)((char *)a4 + 161);
  *(_OWORD *)(v33 + 156) = v42;
  v43 = (unsigned int *)*((_QWORD *)a4 + 23);
  *(_QWORD *)(v33 + 192) = v43;
  if (v43)
  {
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = *((_OWORD *)a4 + 12);
  *(_QWORD *)(v33 + 216) = *((_QWORD *)a4 + 26);
  *(_OWORD *)(v33 + 200) = v45;
  v46 = (char *)(v33 + 224);
LABEL_85:
  *((_QWORD *)this + 24) = v46;
  if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 24))(*((_QWORD *)this + 19)) > 34000)
  v92 = *((_QWORD *)this + 19);
  v93 = (unsigned int *)*((_QWORD *)this + 21);
  if (v93)
  {
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  v95 = (_QWORD *)operator new();
  *v95 = v93;
  v95[1] = this;
  v95[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v98[0] = v95;
  v99 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v100 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v92 + 16))(v92, v98);
  return v99(1, v98, v98);
}

uint64_t webrtc::`anonymous namespace'::VSyncEncodeAdapterMode::GetInputFrameRateFps(webrtc::_anonymous_namespace_::VSyncEncodeAdapterMode *this)
{
  if (*((_BYTE *)this + 40))
    return *((unsigned int *)this + 8) | 0x100000000;
  else
    return 0;
}

void webrtc::`anonymous namespace'::VSyncEncodeAdapterMode::UpdateFrameRate(webrtc::_anonymous_namespace_::VSyncEncodeAdapterMode *this, Timestamp a2)
{
  webrtc::RateStatistics *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (webrtc::_anonymous_namespace_::VSyncEncodeAdapterMode *)((char *)this + 48);
  v5 = (unint64_t)a2.var0 >> 3;
  v6 = (unint64_t)a2.var0 / 0x3E8;
  if ((unint64_t)a2.var0 % 0x3E8 > 0x1F3)
    ++v6;
  if (-a2.var0 % 0x3E8uLL <= 0x1F4)
    v7 = 0;
  else
    v7 = -1;
  if (a2.var0 < 0)
    v8 = v7 - -a2.var0 / 0x3E8uLL;
  else
    v8 = v6;
  v9 = webrtc::RateStatistics::Rate((webrtc::_anonymous_namespace_::VSyncEncodeAdapterMode *)((char *)this + 48), v8);
  if (*((unsigned __int8 *)this + 40) == v10)
  {
    if (*((_BYTE *)this + 40))
      *((_QWORD *)this + 4) = v9;
  }
  else if (*((_BYTE *)this + 40))
  {
    *((_BYTE *)this + 40) = 0;
  }
  else
  {
    *((_QWORD *)this + 4) = v9;
    *((_BYTE *)this + 40) = 1;
  }
  v11 = (unint64_t)((v5 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
  if (a2.var0 - 1000 * v11 > 0x1F3)
    ++v11;
  if (-a2.var0 % 0x3E8uLL <= 0x1F4)
    v12 = 0;
  else
    v12 = -1;
  if (a2.var0 < 0)
    v13 = v12 - -a2.var0 / 0x3E8uLL;
  else
    v13 = v11;
  webrtc::RateStatistics::Update(v4, 1, v13);
}

uint64_t webrtc::`anonymous namespace'::VSyncEncodeAdapterMode::EncodeAllEnqueuedFrames(webrtc::_anonymous_namespace_::VSyncEncodeAdapterMode *this)
{
  uint64_t result;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  char v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  void (*v24)(uint64_t, uint64_t *, _QWORD *);
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t i;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  webrtc::_anonymous_namespace_::VSyncEncodeAdapterMode *v50;
  char v51;
  _QWORD v52[2];
  uint64_t (*v53)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v54;
  _QWORD v55[2];
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  _BYTE v61[24];
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[29];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _OWORD v74[2];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  v3 = *((_QWORD *)this + 23);
  v50 = this;
  v48 = *((_QWORD *)this + 24);
  v49 = result;
  if (v3 == v48)
    goto LABEL_75;
  do
  {
    v4 = *(_WORD *)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
    if (v5)
      (**(void (***)(_QWORD))v5)(*(_QWORD *)(v3 + 16));
    v6 = *(_OWORD *)(v3 + 40);
    v72 = *(_OWORD *)(v3 + 24);
    v73 = v6;
    v74[0] = *(_OWORD *)(v3 + 56);
    *(_OWORD *)((char *)v74 + 12) = *(_OWORD *)(v3 + 68);
    v7 = *(unsigned __int8 *)(v3 + 152);
    if (*(_BYTE *)(v3 + 152))
    {
      v8 = *(_BYTE *)(v3 + 84);
      v9 = *(_OWORD *)(v3 + 101);
      v68 = *(_OWORD *)(v3 + 85);
      v69 = v9;
      v10 = *(_OWORD *)(v3 + 133);
      v70 = *(_OWORD *)(v3 + 117);
      v71 = v10;
    }
    else
    {
      v8 = 0;
    }
    *(_OWORD *)v67 = *(_OWORD *)(v3 + 156);
    *(_OWORD *)&v67[13] = *(_OWORD *)(v3 + 169);
    v11 = *(_QWORD *)(v3 + 192);
    if (v11)
    {
      do
        v12 = __ldxr((unsigned int *)v11);
      while (__stxr(v12 + 1, (unsigned int *)v11));
    }
    v57 = *(_OWORD *)(v3 + 200);
    v58 = *(_QWORD *)(v3 + 216);
    v13 = *((_QWORD *)v50 + 2);
    v14 = (unsigned int *)*((_QWORD *)v50 + 3);
    if (v14)
    {
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (v5)
      (**(void (***)(uint64_t))v5)(v5);
    if (v7)
    {
      v63 = v68;
      v64 = v69;
      v65 = v70;
      v66 = v71;
      if (!v11)
        goto LABEL_18;
    }
    else
    {
      v8 = 0;
      if (!v11)
        goto LABEL_18;
    }
    do
      v16 = __ldxr((unsigned int *)v11);
    while (__stxr(v16 + 1, (unsigned int *)v11));
LABEL_18:
    v17 = operator new();
    *(_QWORD *)v17 = v50;
    *(_QWORD *)(v17 + 8) = v49;
    *(_WORD *)(v17 + 16) = v4;
    *(_QWORD *)(v17 + 24) = v5;
    if (v5)
      (**(void (***)(uint64_t))v5)(v5);
    v18 = v73;
    *(_OWORD *)(v17 + 32) = v72;
    *(_OWORD *)(v17 + 48) = v18;
    *(_OWORD *)(v17 + 64) = v74[0];
    *(_OWORD *)(v17 + 76) = *(_OWORD *)((char *)v74 + 12);
    *(_BYTE *)(v17 + 92) = 0;
    *(_BYTE *)(v17 + 160) = 0;
    if (v7)
    {
      *(_BYTE *)(v17 + 92) = v8;
      v19 = v64;
      *(_OWORD *)(v17 + 93) = v63;
      *(_OWORD *)(v17 + 109) = v19;
      v20 = v66;
      *(_OWORD *)(v17 + 125) = v65;
      *(_OWORD *)(v17 + 141) = v20;
      *(_BYTE *)(v17 + 160) = 1;
    }
    *(_OWORD *)(v17 + 164) = *(_OWORD *)v67;
    *(_OWORD *)(v17 + 177) = *(_OWORD *)&v67[13];
    *(_QWORD *)(v17 + 200) = v11;
    if (v11)
    {
      do
        v21 = __ldxr((unsigned int *)v11);
      while (__stxr(v21 + 1, (unsigned int *)v11));
    }
    *(_OWORD *)(v17 + 208) = v57;
    *(_QWORD *)(v17 + 224) = v58;
    v59 = v14;
    v60 = v17;
    v52[0] = v17;
    v53 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD *))absl::internal_any_invocable::EmptyManager;
    v54 = 0;
    v22 = operator new();
    v23 = v59;
    v24 = *(void (**)(uint64_t, uint64_t *, _QWORD *))&v61[8];
    v59 = 0;
    *(_QWORD *)v22 = v23;
    v24(0, &v60, (_QWORD *)(v22 + 8));
    *(_OWORD *)(v22 + 24) = *(_OWORD *)&v61[8];
    *(_QWORD *)&v61[8] = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)&v61[16] = 0;
    v55[0] = v22;
    *(_QWORD *)&v56 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    *((_QWORD *)&v56 + 1) = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    v25 = v59;
    if (v59)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        MEMORY[0x20BD0ADEC]();
    }
    ((void (*)(_QWORD, _QWORD *, unsigned int **))v56)(0, v55, &v59);
    *(_OWORD *)v61 = v56;
    v56 = (unint64_t)absl::internal_any_invocable::EmptyManager;
    (*(void (**)(uint64_t, unsigned int **, char *, char *))(*(_QWORD *)v13 + 8))(v13, &v59, &v62, &v51);
    (*(void (**)(uint64_t, unsigned int **, unsigned int **))v61)(1, &v59, &v59);
    ((void (*)(uint64_t, _QWORD *, _QWORD *))v56)(1, v55, v55);
    result = v53(1, v52, v52);
    if (v11)
    {
      do
      {
        v28 = __ldaxr((unsigned int *)v11);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v11));
      if (!v29)
      {
        v30 = *(_QWORD *)(v11 + 8);
        if (v30)
        {
          v31 = *(_QWORD *)(v11 + 16);
          v32 = *(void **)(v11 + 8);
          if (v31 != v30)
          {
            do
            {
              v33 = *(void **)(v31 - 96);
              if (v33)
              {
                *(_QWORD *)(v31 - 88) = v33;
                operator delete(v33);
              }
              v31 -= 104;
            }
            while (v31 != v30);
            v32 = *(void **)(v11 + 8);
          }
          *(_QWORD *)(v11 + 16) = v30;
          operator delete(v32);
        }
        result = MEMORY[0x20BD0ADEC](v11, 0x1020C40E72D6CFBLL);
      }
    }
    if (v5)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v11)
    {
      do
      {
        v34 = __ldaxr((unsigned int *)v11);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unsigned int *)v11));
      if (!v35)
      {
        v36 = *(_QWORD *)(v11 + 8);
        if (v36)
        {
          v37 = *(_QWORD *)(v11 + 16);
          v38 = *(void **)(v11 + 8);
          if (v37 != v36)
          {
            do
            {
              v39 = *(void **)(v37 - 96);
              if (v39)
              {
                *(_QWORD *)(v37 - 88) = v39;
                operator delete(v39);
              }
              v37 -= 104;
            }
            while (v37 != v36);
            v38 = *(void **)(v11 + 8);
          }
          *(_QWORD *)(v11 + 16) = v36;
          operator delete(v38);
        }
        result = MEMORY[0x20BD0ADEC](v11, 0x1020C40E72D6CFBLL);
      }
    }
    if (v5)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v3 += 224;
  }
  while (v3 != v48);
  v3 = *((_QWORD *)v50 + 23);
  for (i = *((_QWORD *)v50 + 24); i != v3; i -= 224)
  {
    v41 = *(_QWORD *)(i - 32);
    if (v41)
    {
      do
      {
        v42 = __ldaxr((unsigned int *)v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, (unsigned int *)v41));
      if (!v43)
      {
        v44 = *(_QWORD *)(v41 + 8);
        if (v44)
        {
          v45 = *(_QWORD *)(v41 + 16);
          v46 = *(void **)(v41 + 8);
          if (v45 != v44)
          {
            do
            {
              v47 = *(void **)(v45 - 96);
              if (v47)
              {
                *(_QWORD *)(v45 - 88) = v47;
                operator delete(v47);
              }
              v45 -= 104;
            }
            while (v45 != v44);
            v46 = *(void **)(v41 + 8);
          }
          *(_QWORD *)(v41 + 16) = v44;
          operator delete(v46);
        }
        MEMORY[0x20BD0ADEC](v41, 0x1020C40E72D6CFBLL);
      }
    }
    result = *(_QWORD *)(i - 208);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
LABEL_75:
  *((_QWORD *)v50 + 24) = v3;
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::`anonymous namespace'::VSyncEncodeAdapterMode::OnFrame(webrtc::Timestamp,BOOL,webrtc::VideoFrame const&)::$_0 &&>(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)**a1 + 16))(**a1, (*a1)[1], *((unsigned __int8 *)*a1 + 16), *a1 + 3);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::`anonymous namespace'::VSyncEncodeAdapterMode::OnFrame(webrtc::Timestamp,BOOL,webrtc::VideoFrame const&)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 208);
      if (v4)
      {
        do
        {
          v5 = __ldaxr((unsigned int *)v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, (unsigned int *)v4));
        if (!v6)
        {
          v7 = *(_QWORD *)(v4 + 8);
          if (v7)
          {
            v8 = *(_QWORD *)(v4 + 16);
            v9 = *(void **)(v4 + 8);
            if (v8 != v7)
            {
              do
              {
                v10 = *(void **)(v8 - 96);
                if (v10)
                {
                  *(_QWORD *)(v8 - 88) = v10;
                  operator delete(v10);
                }
                v8 -= 104;
              }
              while (v8 != v7);
              v9 = *(void **)(v4 + 8);
            }
            *(_QWORD *)(v4 + 16) = v7;
            operator delete(v9);
          }
          MEMORY[0x20BD0ADEC](v4, 0x1020C40E72D6CFBLL);
        }
      }
      v11 = *(_QWORD *)(v3 + 32);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::`anonymous namespace'::VSyncEncodeAdapterMode::OnFrame(webrtc::Timestamp,BOOL,webrtc::VideoFrame const&)::$_1 &&>(webrtc::_anonymous_namespace_::VSyncEncodeAdapterMode **a1)
{
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::`anonymous namespace'::VSyncEncodeAdapterMode::EncodeAllEnqueuedFrames(void)::$_0 &&>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(**(_QWORD **)a1 + 144) + 16))(*(_QWORD *)(**(_QWORD **)a1 + 144), *(_QWORD *)(*(_QWORD *)a1 + 8), 0, *(_QWORD *)a1 + 16);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::`anonymous namespace'::VSyncEncodeAdapterMode::EncodeAllEnqueuedFrames(void)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 200);
      if (v4)
      {
        do
        {
          v5 = __ldaxr((unsigned int *)v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, (unsigned int *)v4));
        if (!v6)
        {
          v7 = *(_QWORD *)(v4 + 8);
          if (v7)
          {
            v8 = *(_QWORD *)(v4 + 16);
            v9 = *(void **)(v4 + 8);
            if (v8 != v7)
            {
              do
              {
                v10 = *(void **)(v8 - 96);
                if (v10)
                {
                  *(_QWORD *)(v8 - 88) = v10;
                  operator delete(v10);
                }
                v8 -= 104;
              }
              while (v8 != v7);
              v9 = *(void **)(v4 + 8);
            }
            *(_QWORD *)(v4 + 16) = v7;
            operator delete(v9);
          }
          MEMORY[0x20BD0ADEC](v4, 0x1020C40E72D6CFBLL);
        }
      }
      v11 = *(_QWORD *)(v3 + 24);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void webrtc::FrameCombiner::~FrameCombiner(webrtc::FrameCombiner *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)this + 88))
  {
    switch(*((_DWORD *)this + 23))
    {
      case 0:
        v2 = *((_QWORD *)this + 2);
        if (v2)
          goto LABEL_10;
        break;
      case 1:
        v2 = *((_QWORD *)this + 3);
        if (v2)
          goto LABEL_10;
        break;
      case 2:
        v2 = *((_QWORD *)this + 4);
        if (v2)
          goto LABEL_10;
        break;
      case 3:
        v2 = *((_QWORD *)this + 5);
        if (v2)
LABEL_10:
          webrtc::metrics::HistogramAdd(v2, (int)*((_QWORD *)this + 12) / 100);
        break;
      default:
        break;
    }
  }
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    MEMORY[0x20BD0ADEC](v3, 0x1000C4095BF6931);
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v4)
    MEMORY[0x20BD0ADEC](v4, 0xC400A2AC0F1);
}

void webrtc::FrameCombiner::Combine(uint64_t a1, uint64_t *a2, int64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t *i;
  unint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  _DWORD *v18;
  uint64_t *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int64_t v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  char v54;
  char *v55;
  uint64_t v56;
  void *v57;
  void **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t *v66;
  uint64_t v67;
  char *v68;
  _BYTE *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  int64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  char v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int8x16_t v111;
  int8x16_t v112;
  unint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  void *v117;
  void *v118;
  uint64_t v119;
  _QWORD *v120;
  unsigned __int8 v121;
  _BYTE *v122;
  unsigned __int8 v123;
  uint64_t v124;
  float32x4_t v125;
  uint64_t *v126;
  uint64_t v127;
  _BOOL4 v129;
  uint64_t v130;
  unsigned __int8 v131;
  uint64_t v132;
  uint64_t v133;
  int16x4_t *v134;
  uint64_t *v135;
  uint64_t *v136;
  unint64_t v137;
  uint64_t *v138;
  int16x4_t *v139;
  int16x8_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  unint64_t v145;
  unint64_t v146;
  float *v147;
  __int16 *v148;
  int v149;
  unint64_t v150;
  unint64_t v151;
  int64x2_t v152;
  int8x16_t *v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  unint64_t v157;
  int64x2_t v158;
  int64x2_t v159;
  unint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  int64_t v163;
  uint64_t *v164;
  unsigned __int8 v165;
  uint64_t *v166;
  int v167;
  void *v168;
  unsigned __int8 v169;
  int v170;
  void *v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  _OWORD *v175;
  _BOOL4 v177;
  uint64_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  uint64_t v183;
  unint64_t v184;
  int8x16_t *v185;
  int8x16_t *v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  float *v196;
  float v197;
  void *v198;
  void *v199;
  unint64_t v200;
  uint64_t *v202;
  _BYTE *v203;
  uint64_t v204;
  uint64_t v205;
  int64_t v206;
  uint64_t *v208;
  char *v210;
  uint64_t *v211;
  unint64_t *v212;
  uint64_t *v213;
  char *v214;
  void *v215;
  uint64_t v217;
  int64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;

  v12 = a4;
  v206 = a3;
  if (a3)
    v13 = a2;
  else
    v13 = 0;
  v202 = v13;
  if (a4 >= 9)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/audio/audio_frame.cc", 68, "num_channels <= kMaxConcurrentChannels", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, a4);
LABEL_240:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/audio/audio_frame.cc", 81, "length <= kMaxDataSizeSamples", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v15);
    goto LABEL_241;
  }
  i = (unint64_t *)a7;
  v8 = (int)a5 / 100;
  *(_DWORD *)a7 = 0;
  *(_QWORD *)(a7 + 24) = v8;
  *(_DWORD *)(a7 + 32) = a5;
  *(_QWORD *)(a7 + 48) = 0x200000004;
  *(_QWORD *)(a7 + 40) = a4;
  if ((a4 - 1) > 7)
    v14 = 1;
  else
    v14 = dword_208F0A050[(int)a4 - 1];
  *(_DWORD *)(a7 + 15436) = v14;
  v15 = v8 * a4;
  if (v8 * a4 >= 0x1E01)
    goto LABEL_240;
  v203 = (_BYTE *)(a7 + 15432);
  *(_BYTE *)(a7 + 15432) = 1;
  if (!a3)
  {
    *(_QWORD *)(a7 + 8) = -1;
    if (a6 < 2)
      return;
    v204 = a1;
    v106 = (unint64_t *)(a1 + 8);
    bzero(*(void **)(a1 + 8), 0x3C00uLL);
    if (v8 >= 0x1E0)
      v113 = 480;
    else
      v113 = v8;
    v221 = 0u;
    v222 = 0u;
    v219 = 0u;
    v220 = 0u;
    if (v12)
      goto LABEL_176;
    v8 = 1;
    v161 = v204;
    if (!*(_BYTE *)(v204 + 2144))
      goto LABEL_209;
    goto LABEL_207;
  }
  v200 = (int)a5 / 100;
  v204 = a1;
  v16 = 0;
  v17 = 0;
  v210 = 0;
  v18 = (_DWORD *)*a2;
  *(_DWORD *)a7 = *(_DWORD *)*a2;
  v208 = &a2[a3];
  *(_OWORD *)(a7 + 8) = *(_OWORD *)(v18 + 2);
  v19 = a2;
  do
  {
    while (1)
    {
      v211 = v19;
      v212 = (unint64_t *)v16;
      v20 = (_QWORD *)*v19;
      v21 = *(_DWORD *)*v19;
      if (v21 >= *(_DWORD *)i)
        v21 = *(_DWORD *)i;
      *(_DWORD *)i = v21;
      v22 = v20[2];
      v23 = i[1];
      if (v22 >= (uint64_t)i[2])
        v22 = i[2];
      i[2] = v22;
      v24 = v20[1];
      if (v23 > v24)
        v24 = v23;
      i[1] = v24;
      v25 = v20[8];
      if (v25)
      {
        v10 = *(uint64_t **)(v25 + 8);
        v16 = *(_QWORD *)(v25 + 16);
        v26 = v16 - (_QWORD)v10;
        if (v16 - (uint64_t)v10 < 1)
          goto LABEL_13;
      }
      else
      {
        if ((v27 & 1) == 0
        {
          v102 = operator new();
          *(_QWORD *)(v102 + 8) = 0;
          *(_QWORD *)(v102 + 16) = 0;
          *(_QWORD *)v102 = 0;
          webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v102;
        }
        v28 = *(_QWORD *)(*v19 + 64);
        v10 = *(uint64_t **)webrtc::RtpPacketInfos::empty_entries(void)::value;
        if (v28)
        {
          v16 = *(_QWORD *)(v28 + 16);
          v26 = v16 - (_QWORD)v10;
          if (v16 - (uint64_t)v10 < 1)
            goto LABEL_13;
        }
        else
        {
          if ((v29 & 1) == 0
          {
            v103 = operator new();
            *(_QWORD *)(v103 + 8) = 0;
            *(_QWORD *)(v103 + 16) = 0;
            *(_QWORD *)v103 = 0;
            webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v103;
          }
          v16 = *((_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value + 1);
          v26 = v16 - (_QWORD)v10;
          if (v16 - (uint64_t)v10 < 1)
            goto LABEL_13;
        }
      }
      v12 = v26 / 104;
      v30 = ((char *)v17 - (char *)v212) / 104;
      v31 = 104;
      i = &v212[13 * v30];
      v217 = v30;
      if (0x4EC4EC4EC4EC4EC5 * ((v210 - (char *)v17) >> 3) < v26 / 104)
        break;
      if (0x4EC4EC4EC4EC4EC5 * (v17 - i) >= (uint64_t)v12)
      {
        v42 = &v10[13 * v12];
        v34 = (uint64_t)v17;
        v43 = 13 * v12;
        v44 = &v17[-13 * v12];
        v16 = (uint64_t)v17;
        if (v44 < v17)
          goto LABEL_51;
      }
      else
      {
        v205 = v26 / 104;
        v12 = (unint64_t)&v10[v17 - i];
        v34 = (uint64_t)v17;
        if (v12 != v16)
        {
          v35 = v17;
          while (v35)
          {
            *(_DWORD *)v35 = *(_DWORD *)v12;
            v35[2] = 0;
            v35[3] = 0;
            v35[1] = 0;
            v9 = *(_QWORD *)(v12 + 8);
            v39 = *(_QWORD *)(v12 + 16);
            v40 = v39 - v9;
            if (v39 != v9)
            {
              if (v40 < 0)
                goto LABEL_237;
              v41 = operator new(v39 - v9);
              v35[1] = (unint64_t)v41;
              v35[2] = (unint64_t)v41;
              v31 = (uint64_t)v41 + 4 * (v40 >> 2);
              v35[3] = v31;
              memcpy(v41, (const void *)v9, v40);
              v35[2] = v31;
            }
            *((_OWORD *)v35 + 2) = *(_OWORD *)(v12 + 32);
            v36 = *(_OWORD *)(v12 + 48);
            v37 = *(_OWORD *)(v12 + 64);
            v38 = *(_OWORD *)(v12 + 80);
            *((_BYTE *)v35 + 96) = *(_BYTE *)(v12 + 96);
            *((_OWORD *)v35 + 4) = v37;
            *((_OWORD *)v35 + 5) = v38;
            *((_OWORD *)v35 + 3) = v36;
            v35 += 13;
            v34 += 104;
            v12 += 104;
            if (v12 == v16)
              goto LABEL_49;
          }
          goto LABEL_130;
        }
LABEL_49:
        if ((char *)v17 - (char *)i < 1)
        {
          v17 = (unint64_t *)v34;
          goto LABEL_12;
        }
        v31 = 104;
        v42 = &v10[v17 - i];
        v12 = v205;
        v43 = 13 * v205;
        v44 = (unint64_t *)(v34 - 104 * v205);
        v16 = v34;
        if (v44 < v17)
        {
LABEL_51:
          while (v16)
          {
            *(_DWORD *)v16 = *(_DWORD *)v44;
            *(_QWORD *)(v16 + 16) = 0;
            *(_QWORD *)(v16 + 24) = 0;
            *(_QWORD *)(v16 + 8) = 0;
            *(_OWORD *)(v16 + 8) = *(_OWORD *)(v44 + 1);
            *(_QWORD *)(v16 + 24) = v44[3];
            v44[2] = 0;
            v44[3] = 0;
            v44[1] = 0;
            v46 = *((_OWORD *)v44 + 4);
            v45 = *((_OWORD *)v44 + 5);
            v47 = *((_OWORD *)v44 + 3);
            *(_BYTE *)(v16 + 96) = *((_BYTE *)v44 + 96);
            *(_OWORD *)(v16 + 64) = v46;
            *(_OWORD *)(v16 + 80) = v45;
            *(_OWORD *)(v16 + 48) = v47;
            *(_OWORD *)(v16 + 32) = *((_OWORD *)v44 + 2);
            v16 += 104;
            v44 += 13;
            if (v44 >= v17)
              goto LABEL_53;
          }
LABEL_130:
          __break(1u);
          goto LABEL_131;
        }
      }
LABEL_53:
      v213 = v42;
      v48 = (char *)&i[v43];
      if ((char *)v34 != v48)
      {
        v49 = 0;
        v50 = 0x4EC4EC4EC4EC4EC5 * ((v34 - (uint64_t)v48) >> 3);
        v51 = (char *)&v212[13 * v217 + 13 * v50];
        v9 = -104 * v50;
        do
        {
          v55 = &v51[v49];
          v56 = v34 + v49;
          v58 = (void **)(v34 + v49 - 96);
          v57 = *v58;
          *(_DWORD *)(v34 + v49 - 104) = *(_DWORD *)&v51[v49 - 104];
          if (v57)
          {
            *(_QWORD *)(v56 - 88) = v57;
            operator delete(v57);
            *v58 = 0;
            *(_QWORD *)(v34 + v49 - 88) = 0;
            *(_QWORD *)(v34 + v49 - 80) = 0;
          }
          *(_OWORD *)v58 = *((_OWORD *)v55 - 6);
          *(_QWORD *)(v56 - 80) = *((_QWORD *)v55 - 10);
          *((_QWORD *)v55 - 11) = 0;
          *((_QWORD *)v55 - 10) = 0;
          *((_QWORD *)v55 - 12) = 0;
          v52 = *(_OWORD *)(v55 - 40);
          v53 = *(_OWORD *)(v55 - 24);
          v54 = *(v55 - 8);
          *(_OWORD *)(v56 - 56) = *(_OWORD *)(v55 - 56);
          *(_BYTE *)(v56 - 8) = v54;
          *(_OWORD *)(v56 - 24) = v53;
          *(_OWORD *)(v56 - 40) = v52;
          *(_OWORD *)(v56 - 72) = *(_OWORD *)(v55 - 72);
          v49 -= 104;
        }
        while (v9 != v49);
      }
      v59 = v213;
      if (v213 != v10)
      {
        v60 = (uint64_t)&v212[13 * v217 + 2];
        v61 = v10 + 2;
        do
        {
          v66 = v61 - 2;
          *(_DWORD *)(v60 - 16) = *((_DWORD *)v61 - 4);
          v67 = v60 - 16;
          if ((uint64_t *)v60 == v61)
            goto LABEL_62;
          v68 = *(char **)(v60 - 8);
          v9 = *(v61 - 1);
          v69 = (_BYTE *)*v61;
          v218 = *v61 - v9;
          v70 = v218 >> 2;
          v71 = *(_QWORD *)(v60 + 8);
          if (v218 >> 2 > (unint64_t)((v71 - (uint64_t)v68) >> 2))
          {
            v72 = *v61;
            if (v68)
            {
              *(_QWORD *)v60 = v68;
              operator delete(v68);
              v71 = 0;
              *(_QWORD *)(v60 - 8) = 0;
              *(_QWORD *)v60 = 0;
              *(_QWORD *)(v60 + 8) = 0;
            }
            v73 = v218;
            if (v218 < 0)
              goto LABEL_237;
            v74 = v71 >> 1;
            if (v71 >> 1 <= v70)
              v74 = v218 >> 2;
            v75 = (unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL;
            v76 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v75)
              v76 = v74;
            if (v76 >> 62)
              goto LABEL_237;
            v77 = 4 * v76;
            v78 = (char *)operator new(4 * v76);
            v68 = v78;
            *(_QWORD *)(v60 - 8) = v78;
            *(_QWORD *)v60 = v78;
            *(_QWORD *)(v60 + 8) = &v78[v77];
            if (v72 != v9)
              memcpy(v78, (const void *)v9, v218);
            v62 = (_QWORD *)v60;
            v59 = v213;
            goto LABEL_61;
          }
          v62 = i + 2;
          a3 = *(_QWORD *)v60 - (_QWORD)v68;
          v79 = a3 >> 2;
          if (a3 >> 2 >= v70)
          {
            v59 = v213;
            if (v69 == (_BYTE *)v9)
            {
              v73 = *v61 - v9;
              goto LABEL_61;
            }
            v82 = *(char **)(v60 - 8);
            v81 = (_BYTE *)*(v61 - 1);
            v73 = *v61 - v9;
          }
          else
          {
            v59 = v213;
            if (*(char **)v60 != v68)
            {
              v80 = (_BYTE *)*v61;
              memmove(*(void **)(v60 - 8), (const void *)v9, a3);
              v69 = v80;
              v68 = *(char **)v60;
            }
            v81 = (_BYTE *)(v9 + 4 * v79);
            v73 = v69 - v81;
            if (v69 == v81)
              goto LABEL_61;
            v82 = v68;
          }
          memmove(v82, v81, v73);
LABEL_61:
          *v62 = &v68[v73];
LABEL_62:
          *(_OWORD *)(v60 + 16) = *((_OWORD *)v61 + 1);
          v63 = *((_OWORD *)v61 + 2);
          v64 = *((_OWORD *)v61 + 3);
          v65 = *((_OWORD *)v61 + 4);
          *(_BYTE *)(v60 + 80) = *((_BYTE *)v61 + 80);
          *(_OWORD *)(v60 + 48) = v64;
          *(_OWORD *)(v60 + 64) = v65;
          *(_OWORD *)(v60 + 32) = v63;
          v60 += 104;
          v61 += 13;
          i = (unint64_t *)(v67 + 104);
        }
        while (v66 + 13 != v59);
      }
      v17 = (unint64_t *)v16;
LABEL_12:
      i = (unint64_t *)a7;
      v12 = a4;
LABEL_13:
      v10 = a2;
      v16 = (uint64_t)v212;
      v19 = v211 + 1;
      if (v211 + 1 == v208)
        goto LABEL_110;
    }
    v32 = v12 + v30;
    if (v12 + v30 > 0x276276276276276)
LABEL_237:
      abort();
    if (0x9D89D89D89D89D8ALL * ((v210 - (char *)v212) >> 3) > v32)
      v32 = 0x9D89D89D89D89D8ALL * ((v210 - (char *)v212) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v210 - (char *)v212) >> 3)) >= 0x13B13B13B13B13BLL)
      v9 = 0x276276276276276;
    else
      v9 = v32;
    if (v9)
    {
      if (v9 > 0x276276276276276)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v33 = (char *)operator new(104 * v9);
    }
    else
    {
      v33 = 0;
    }
    v210 = &v33[104 * v9];
    v16 = 104 * v12;
    v31 = (uint64_t)&v33[104 * v30 + 104 * v12];
    v214 = &v33[104 * v30];
    v12 = (unint64_t)v214;
    do
    {
      if (!v12)
        goto LABEL_130;
      *(_DWORD *)v12 = *(_DWORD *)v10;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 8) = 0;
      v9 = v10[1];
      v86 = v10[2];
      v87 = v86 - v9;
      if (v86 != v9)
      {
        if (v87 < 0)
          goto LABEL_237;
        v88 = (char *)operator new(v86 - v9);
        *(_QWORD *)(v12 + 8) = v88;
        *(_QWORD *)(v12 + 16) = v88;
        v89 = &v88[4 * (v87 >> 2)];
        *(_QWORD *)(v12 + 24) = v89;
        memcpy(v88, (const void *)v9, v87);
        *(_QWORD *)(v12 + 16) = v89;
      }
      *(_OWORD *)(v12 + 32) = *((_OWORD *)v10 + 2);
      v83 = *((_OWORD *)v10 + 3);
      v84 = *((_OWORD *)v10 + 4);
      v85 = *((_OWORD *)v10 + 5);
      *(_BYTE *)(v12 + 96) = *((_BYTE *)v10 + 96);
      *(_OWORD *)(v12 + 64) = v84;
      *(_OWORD *)(v12 + 80) = v85;
      *(_OWORD *)(v12 + 48) = v83;
      v12 += 104;
      v10 += 13;
      v16 -= 104;
    }
    while (v16);
    v16 = (uint64_t)v214;
    v12 = a4;
    v10 = a2;
    if (v17 != v212)
    {
      v90 = 0;
      v91 = 104 * v217;
      v92 = (char *)v212;
      do
      {
        v93 = &v33[v91];
        v94 = &v92[v91];
        *((_DWORD *)v93 - 26) = *(_DWORD *)&v92[v91 - 104];
        *((_OWORD *)v93 - 6) = *(_OWORD *)&v92[v91 - 96];
        *((_QWORD *)v93 - 10) = *(_QWORD *)&v92[v91 - 80];
        *((_QWORD *)v94 - 11) = 0;
        *((_QWORD *)v94 - 10) = 0;
        *((_QWORD *)v94 - 12) = 0;
        v95 = *(_OWORD *)&v92[v91 - 40];
        v96 = *(_OWORD *)&v92[v91 - 24];
        v97 = v92[v91 - 8];
        *(_OWORD *)(v93 - 56) = *(_OWORD *)&v92[v91 - 56];
        *(v93 - 8) = v97;
        *(_OWORD *)(v93 - 24) = v96;
        *(_OWORD *)(v93 - 40) = v95;
        *(_OWORD *)(v93 - 72) = *(_OWORD *)&v92[v91 - 72];
        v92 -= 104;
        v90 += 104;
        v33 -= 104;
      }
      while (v91 != v90);
      v16 = (uint64_t)&v33[104 * v217];
    }
    for (; i != v17; i += 13)
    {
      *(_DWORD *)v31 = *(_DWORD *)i;
      *(_OWORD *)(v31 + 8) = *(_OWORD *)(i + 1);
      *(_QWORD *)(v31 + 24) = i[3];
      i[2] = 0;
      i[3] = 0;
      i[1] = 0;
      v99 = *((_OWORD *)i + 4);
      v98 = *((_OWORD *)i + 5);
      v100 = *((_OWORD *)i + 3);
      *(_BYTE *)(v31 + 96) = *((_BYTE *)i + 96);
      *(_OWORD *)(v31 + 64) = v99;
      *(_OWORD *)(v31 + 80) = v98;
      *(_OWORD *)(v31 + 48) = v100;
      *(_OWORD *)(v31 + 32) = *((_OWORD *)i + 2);
      v31 += 104;
    }
    for (i = (unint64_t *)a7; v17 != v212; v17 -= 13)
    {
      v101 = (void *)*(v17 - 12);
      if (v101)
      {
        *(v17 - 11) = (unint64_t)v101;
        operator delete(v101);
      }
    }
    if (v212)
      operator delete(v212);
    v17 = (unint64_t *)v31;
    v19 = v211 + 1;
  }
  while (v211 + 1 != v208);
LABEL_110:
  if ((unint64_t *)v16 == v17)
  {
    v17 = (unint64_t *)v204;
    v9 = i[8];
    i[8] = 0;
    if (!v9)
      goto LABEL_134;
  }
  else
  {
    v104 = operator new();
    *(_DWORD *)v104 = 0;
    *(_QWORD *)(v104 + 8) = v16;
    *(_QWORD *)(v104 + 16) = v17;
    *(_QWORD *)(v104 + 24) = v210;
    do
      v105 = __ldxr((unsigned int *)v104);
    while (__stxr(v105 + 1, (unsigned int *)v104));
    v16 = 0;
    v17 = (unint64_t *)v204;
    v9 = i[8];
    i[8] = v104;
    if (!v9)
      goto LABEL_134;
  }
  do
  {
    v114 = __ldaxr((unsigned int *)v9);
    v115 = v114 - 1;
  }
  while (__stlxr(v115, (unsigned int *)v9));
  if (!v115)
  {
    v31 = *(_QWORD *)(v9 + 8);
    if (!v31)
    {
LABEL_133:
      MEMORY[0x20BD0ADEC](v9, 0x1020C40E72D6CFBLL);
      goto LABEL_134;
    }
    v116 = *(_QWORD *)(v9 + 16);
    v117 = *(void **)(v9 + 8);
    if (v116 == v31)
    {
LABEL_132:
      *(_QWORD *)(v9 + 16) = v31;
      operator delete(v117);
      goto LABEL_133;
    }
    do
    {
      v118 = *(void **)(v116 - 96);
      if (v118)
      {
        *(_QWORD *)(v116 - 88) = v118;
        operator delete(v118);
      }
      v116 -= 104;
    }
    while (v116 != v31);
LABEL_131:
    v117 = *(void **)(v9 + 8);
    goto LABEL_132;
  }
LABEL_134:
  if (v16)
    operator delete((void *)v16);
  v119 = 0;
  do
    webrtc::RemixFrame(v12, v10[v119++], (webrtc::AudioFrame *)a3, a4, a5, a6, a7, a8);
  while (v206 != v119);
  if (a6 < 2)
  {
    v120 = (_QWORD *)*v10;
    if (*(_BYTE *)(*v10 + 15432))
    {
      if ((v121 & 1) != 0)
        goto LABEL_141;
      goto LABEL_242;
    }
    v122 = v120 + 9;
LABEL_186:
    v124 = (uint64_t)(v120 + 9);
    goto LABEL_187;
  }
  v106 = v17 + 1;
  v10 = (uint64_t *)v17[1];
  bzero(v10, 0x3C00uLL);
  if (v12 >= 8)
    v12 = 8;
  if (v200 >= 0x1E0)
    v113 = 480;
  else
    v113 = v200;
  if (!v12)
  {
    v10 = &qword_254572000;
    v163 = v206;
    v164 = v202;
    do
    {
      if (*(_BYTE *)(*v164 + 15432))
      {
        if ((v165 & 1) == 0)
        {
          v166 = v164;
          v164 = v166;
          if (v167)
          {
            v168 = (void *)operator new[]();
            bzero(v168, 0x3C00uLL);
            webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v168;
            v164 = v166;
          }
        }
      }
      ++v164;
      --v163;
    }
    while (v163);
    v12 = 0;
    v221 = 0u;
    v222 = 0u;
    v219 = 0u;
    v220 = 0u;
    v8 = 1;
    v161 = v204;
    if (!*(_BYTE *)(v204 + 2144))
      goto LABEL_209;
LABEL_207:
    *(_DWORD *)(v161 + 116) = v113;
    v172 = v113 % 0x14;
    if (!(_DWORD)v172)
    {
      *(_DWORD *)(v161 + 120) = v113 / 0x14;
      webrtc::Limiter::Process((float *)(v161 + 16), (uint64_t)&v219, v12 | (v113 << 32));
      goto LABEL_209;
    }
LABEL_241:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v107, v108, v109, v110, v172);
LABEL_242:
    {
      v198 = (void *)operator new[]();
      bzero(v198, 0x3C00uLL);
      webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v198;
    }
LABEL_141:
    v122 = (_BYTE *)webrtc::AudioFrame::zeroed_data(void)::null_data;
    v120 = (_QWORD *)*v10;
    if (!*(_BYTE *)(*v10 + 15432))
      goto LABEL_186;
    v123 = atomic_load((unsigned __int8 *)v8);
    {
      v199 = (void *)operator new[]();
      bzero(v199, 0x3C00uLL);
      webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v199;
    }
    v124 = webrtc::AudioFrame::zeroed_data(void)::null_data;
    v120 = (_QWORD *)*v10;
LABEL_187:
    v162 = (_BYTE *)(v124 + 2 * v120[3] * v120[5]);
    if (*v203)
      bzero(i + 9, 0x3C01uLL);
    if (v162 != v122)
      memmove(i + 9, v122, v162 - v122);
    return;
  }
  v126 = v202;
  if (!v113)
  {
    do
    {
      if (*(_BYTE *)(*v126 + 15432))
      {
        if ((v169 & 1) == 0)
        {
          v10 = v126;
          v126 = v10;
          if (v170)
          {
            v171 = (void *)operator new[]();
            bzero(v171, 0x3C00uLL);
            webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v171;
            v126 = v10;
          }
        }
      }
      ++v126;
      --v206;
    }
    while (v206);
    v113 = 0;
    v221 = 0u;
    v222 = 0u;
    v219 = 0u;
    v220 = 0u;
    goto LABEL_176;
  }
  v127 = 0;
  v129 = v113 > 0xF && a4 == 1;
  while (2)
  {
    v130 = v126[v127];
    if (*(_BYTE *)(v130 + 15432))
    {
      if ((v131 & 1) == 0)
      {
        v126 = v202;
        if (v149)
        {
          v215 = (void *)operator new[]();
          bzero(v215, 0x3C00uLL);
          webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v215;
          v126 = v202;
        }
      }
      v132 = webrtc::AudioFrame::zeroed_data(void)::null_data;
    }
    else
    {
      v132 = v130 + 72;
    }
    v133 = 0;
    v134 = (int16x4_t *)(v132 + 16);
    v135 = v10;
    v136 = v10 + 4;
    while (2)
    {
      if (!v129)
      {
        v145 = 0;
        goto LABEL_170;
      }
      v137 = v113 & 0x1F0;
      v138 = v136;
      v139 = v134;
      do
      {
        v140 = *(int16x8_t *)v139[-2].i8;
        v141 = vcvtq_f32_s32(vmovl_high_s16(v140));
        v111 = *((int8x16_t *)v138 - 2);
        v112 = *((int8x16_t *)v138 + 1);
        v125 = vaddq_f32((float32x4_t)v111, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v140.i8)));
        v142 = vaddq_f32(*((float32x4_t *)v138 - 1), v141);
        v143 = vaddq_f32(*(float32x4_t *)v138, vcvtq_f32_s32(vmovl_s16(*v139)));
        v144 = vaddq_f32((float32x4_t)v112, vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v139->i8)));
        *((float32x4_t *)v138 - 2) = v125;
        *((float32x4_t *)v138 - 1) = v142;
        *(float32x4_t *)v138 = v143;
        *((float32x4_t *)v138 + 1) = v144;
        v138 += 8;
        v139 += 4;
        v137 -= 16;
      }
      while (v137);
      v145 = v113 & 0x1F0;
      if (v113 != v145)
      {
LABEL_170:
        v146 = v113 - v145;
        v147 = (float *)v135 + v145;
        v148 = (__int16 *)(v132 + 2 * (v133 + a4 * v145));
        do
        {
          v125.i16[0] = *v148;
          v125.i64[0] = vmovl_s16(*(int16x4_t *)v125.f32).u64[0];
          v125.f32[0] = *v147 + (float)v125.i32[0];
          *v147++ = v125.f32[0];
          v148 += a4;
          --v146;
        }
        while (v146);
      }
      ++v133;
      v134 = (int16x4_t *)((char *)v134 + 2);
      v136 += 240;
      v135 += 240;
      if (v133 != v12)
        continue;
      break;
    }
    if (++v127 != v206)
      continue;
    break;
  }
  i = (unint64_t *)a7;
  v221 = 0u;
  v222 = 0u;
  v219 = 0u;
  v220 = 0u;
LABEL_176:
  v150 = *v106;
  if (v12 < 4)
  {
    v151 = 0;
    goto LABEL_181;
  }
  v151 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  v152 = (int64x2_t)xmmword_208F05120;
  v153 = (int8x16_t *)&v220;
  v154 = vdupq_n_s64(v150);
  v155 = vdupq_n_s64(0xF00uLL);
  v156 = vdupq_n_s64(4uLL);
  v157 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v158.i64[0] = 1920 * v152.i64[0];
    v158.i64[1] = 1920 * v152.i64[1];
    v159 = vaddq_s64(v154, v158);
    v111 = (int8x16_t)vaddq_s64(v159, v155);
    v153[-1] = (int8x16_t)v159;
    *v153 = v111;
    v152 = vaddq_s64(v152, v156);
    v153 += 2;
    v157 -= 4;
  }
  while (v157);
  if (v12 != v151)
  {
LABEL_181:
    v160 = v150 + 1920 * v151;
    do
    {
      *((_QWORD *)&v219 + v151++) = v160;
      v160 += 1920;
    }
    while (v12 != v151);
  }
  v8 = 0;
  v161 = v204;
  if (*(_BYTE *)(v204 + 2144))
    goto LABEL_207;
LABEL_209:
  if (*v203)
    bzero(i + 9, 0x3C01uLL);
  if (v113)
    v173 = v8;
  else
    v173 = 1;
  if ((v173 & 1) == 0)
  {
    v174 = 0;
    v175 = i + 9;
    v177 = v113 > 7 && v12 == 1;
    v178 = 2 * v12;
    v179 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
    v180.i64[0] = 0xC7000000C7000000;
    v180.i64[1] = 0xC7000000C7000000;
    v181.i64[0] = 0x3F0000003F000000;
    v181.i64[1] = 0x3F0000003F000000;
    v182.i64[0] = 0x8000000080000000;
    v182.i64[1] = 0x8000000080000000;
    v111.i32[0] = 0.5;
    while (1)
    {
      v183 = *((_QWORD *)&v219 + (int)v174);
      if (!v177)
        break;
      v184 = v113 & 0x1F8;
      v185 = (int8x16_t *)*((_QWORD *)&v219 + (int)v174);
      v186 = (int8x16_t *)v175;
      do
      {
        v187 = *v185;
        v188 = v185[1];
        v185 += 2;
        v189 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v187, (float32x4_t)v179), v179, v187);
        v190 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v188, (float32x4_t)v179), v179, v188);
        v191 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v180, (float32x4_t)v189), v180, v189);
        v192 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v180, (float32x4_t)v190), v180, v190);
        v112 = (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v191, (float32x4_t)vbslq_s8(v182, v181, v191))), (int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v192, (float32x4_t)vbslq_s8(v182, v181, v192))));
        *v186++ = v112;
        v184 -= 8;
      }
      while (v184);
      v193 = v113 & 0x1F8;
      if (v113 != v193)
        goto LABEL_230;
LABEL_223:
      ++v174;
      v175 = (_OWORD *)((char *)v175 + 2);
      if (v174 == v12)
        return;
    }
    v193 = 0;
LABEL_230:
    v194 = v113 - v193;
    v195 = v178 * v193;
    v196 = (float *)(v183 + 4 * v193);
    do
    {
      v197 = *v196++;
      *(float *)v112.i32 = v197;
      if (v197 > 32767.0)
        *(float *)v112.i32 = 32767.0;
      if (*(float *)v112.i32 < -32768.0)
        *(float *)v112.i32 = -32768.0;
      *(_WORD *)((char *)v175 + v195) = (int)(float)(*(float *)v112.i32 + *(float *)vbslq_s8(v182, v111, v112).i32);
      v195 += v178;
      --v194;
    }
    while (v194);
    goto LABEL_223;
  }
}

void webrtc::FrameDelayVariationKalmanFilter::PredictAndUpdate(webrtc::FrameDelayVariationKalmanFilter *this, double a2, double a3, double a4, double a5)
{
  double v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;

  if (a4 >= 1.0 && a5 > 0.0)
  {
    v7 = *((double *)this + 7);
    v9 = *((double *)this + 3);
    v10 = *((double *)this + 6) + *((double *)this + 2);
    *((double *)this + 2) = v10;
    v11 = *((double *)this + 4);
    v12 = v7 + *((double *)this + 5);
    *((double *)this + 5) = v12;
    v24 = *(double *)this;
    v25 = *((double *)this + 1);
    v26 = v9;
    v13 = v9 + v10 * a3;
    v14 = v12 + v11 * a3;
    v15 = sqrt(a5) * (exp(-fabs(a3) / a4) * 300.0 + 1.0);
    if (v15 < 1.0)
      v15 = 1.0;
    v16 = v15 + v14 + a3 * v13;
    if ((v16 >= 0.000000001 || v16 < 0.0) && (v16 <= -0.000000001 || v16 > 0.0))
    {
      v17 = a2 - (v24 * a3 + v25);
      v18 = v13 / v16;
      v19 = v14 / v16;
      v20 = v24 + v18 * v17;
      *(double *)this = v20;
      *((double *)this + 1) = v25 + v19 * v17;
      if (v20 < 0.000001)
        *(_QWORD *)this = 0x3EB0C6F7A0B5ED8DLL;
      v21 = 1.0 - v18 * a3;
      *((double *)this + 2) = v21 * v10 - v18 * v11;
      *((double *)this + 3) = v21 * v26 - v18 * v12;
      v22 = 1.0 - v19;
      v23 = -(v19 * a3);
      *((double *)this + 4) = v10 * v23 + v11 * v22;
      *((double *)this + 5) = v26 * v23 + v12 * v22;
    }
  }
}

void webrtc::FrameDependenciesCalculator::FromBuffersUsage(unint64_t *a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>)
{
  int *v9;
  unint64_t *v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  void **v47;
  BOOL v48;
  _QWORD *v49;
  void **v50;
  _QWORD **v51;
  void **v52;
  uint64_t v53;
  void **v54;
  void **v55;
  void *v56;
  void **v57;
  unsigned __int8 *v58;
  _BYTE *v59;
  int v60;
  unsigned __int8 *v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  void **v66;
  _QWORD *v67;
  uint64_t **v68;
  void **v69;
  int64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  void **v75;
  void **v76;
  uint64_t *v77;
  uint64_t **v78;
  void **v79;
  void **v80;
  uint64_t *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t **v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t **v92;
  unint64_t v93;
  uint64_t **v94;
  uint64_t *v95;
  uint64_t **v96;
  unint64_t *v97;
  unint64_t v98;
  void **v99;
  void **v100;
  unint64_t v101;
  unint64_t v102;
  BOOL v103;
  unint64_t v104;
  uint64_t i;
  uint64_t *v106;
  uint64_t **v107;
  unint64_t v108;
  void **v109;
  void **v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t **v113;
  void **v114;
  unint64_t v115;
  _QWORD *v117;
  unsigned int *v120;
  void **v121;
  void **v122;
  uint64_t v123;
  uint64_t **v124;
  uint64_t *v125;
  uint64_t v126;

  *a9 = 0;
  if (!a4)
  {
    v114 = 0;
    v125 = 0;
    v126 = 0;
    v124 = &v125;
    v122 = 0;
    v123 = 0;
    v121 = (void **)&v122;
    goto LABEL_208;
  }
  v9 = a3;
  v10 = a1;
  v117 = a1 + 1;
  v11 = (unsigned int *)a3;
  v120 = (unsigned int *)&a3[2 * a4];
  do
  {
    v13 = *v11;
    if ((v13 & 0x80000000) != 0)
      goto LABEL_210;
    v14 = *v10;
    v15 = *v10 >> 1;
    if (v15 <= v13)
    {
      if ((v14 & 1) != 0)
      {
        v16 = (_QWORD *)v10[1];
        v17 = v10[2];
        v18 = v13 + 1;
        if (v17 >= v13 + 1)
          goto LABEL_10;
      }
      else
      {
        v16 = v117;
        v17 = 4;
        v18 = v13 + 1;
        if (v13 + 1 <= 4)
        {
LABEL_10:
          if (!v16)
            goto LABEL_209;
          bzero(&v16[7 * v15], 56 * (v18 - v15));
          v12 = *v10;
LABEL_4:
          *v10 = v12 & 1 | (2 * v18);
          goto LABEL_5;
        }
      }
      if (2 * v17 <= v18)
        v19 = v18;
      else
        v19 = 2 * v17;
      v20 = (char *)operator new(56 * v19);
      bzero(&v20[56 * v15], 56 * (v18 - v15));
      if (v14 >= 2)
      {
        v13 = 0;
        v21 = v15;
        do
        {
          v22 = &v20[v13];
          *(_OWORD *)v22 = *(_OWORD *)((char *)v16 + v13);
          *((_QWORD *)v22 + 2) = *(_QWORD *)((char *)v16 + v13 + 16);
          v23 = *(_OWORD *)((char *)v16 + v13 + 24);
          *(_OWORD *)(v22 + 40) = *(_OWORD *)((char *)v16 + v13 + 40);
          *(_OWORD *)(v22 + 24) = v23;
          *(_QWORD *)((char *)v16 + v13 + 16) = 0;
          v13 += 56;
          --v21;
        }
        while (v21);
        if (!v16)
        {
LABEL_209:
          __break(1u);
LABEL_210:
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/frame_dependencies_calculator.cc", 31, "buffer_usage.id >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v13);
LABEL_211:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
        v24 = (uint64_t)&v16[7 * v15 - 5];
        do
        {
          if ((*(_BYTE *)v24 & 1) != 0)
            operator delete(*(void **)(v24 + 8));
          v24 -= 56;
          --v15;
        }
        while (v15);
        v14 = *a1;
      }
      v10 = a1;
      if ((v14 & 1) != 0)
      {
        operator delete((void *)a1[1]);
        v14 = *a1;
      }
      a1[1] = (unint64_t)v20;
      a1[2] = v19;
      LOBYTE(v12) = v14 | 1;
      goto LABEL_4;
    }
LABEL_5:
    v11 += 2;
  }
  while (v11 != v120);
  v125 = 0;
  v126 = 0;
  v124 = &v125;
  v122 = 0;
  v123 = 0;
  v121 = (void **)&v122;
  v25 = v9;
  do
  {
    if (*((_BYTE *)v25 + 4))
    {
      v26 = *v25;
      v13 = *v10;
      if (v26 >= *v10 >> 1)
        goto LABEL_209;
      v27 = v117;
      if ((v13 & 1) != 0)
        v27 = (_QWORD *)*v117;
      v28 = &v27[7 * (int)v26];
      if (*((_BYTE *)v28 + 8))
      {
        v29 = v125;
        v30 = *v28;
        v31 = &v125;
        v32 = &v125;
        if (v125)
        {
          while (1)
          {
            while (1)
            {
              v32 = (uint64_t **)v29;
              v33 = v29[4];
              if (v30 >= v33)
                break;
              v29 = *v32;
              v31 = v32;
              if (!*v32)
                goto LABEL_42;
            }
            if (v33 >= v30)
              break;
            v29 = v32[1];
            if (!v29)
            {
              v31 = v32 + 1;
              goto LABEL_42;
            }
          }
        }
        else
        {
LABEL_42:
          v34 = (uint64_t *)operator new(0x28uLL);
          v34[4] = v30;
          *v34 = 0;
          v34[1] = 0;
          v34[2] = (uint64_t)v32;
          *v31 = v34;
          if (*v124)
          {
            v124 = (uint64_t **)*v124;
            v35 = *v31;
          }
          else
          {
            v35 = v34;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v125, v35);
          ++v126;
        }
        v39 = &v27[7 * (int)v26];
        v40 = v39[2];
        v41 = v39 + 3;
        if ((v40 & 1) != 0)
          v41 = (_QWORD *)*v41;
        if (v40 >= 2)
        {
          v42 = &v41[v40 >> 1];
          v43 = v123;
          while (1)
          {
            v44 = v122;
            v45 = (void **)&v122;
            if (v121 != (void **)&v122)
            {
              v46 = v122;
              v47 = (void **)&v122;
              if (v122)
              {
                do
                {
                  v45 = v46;
                  v46 = (void **)v46[1];
                }
                while (v46);
              }
              else
              {
                do
                {
                  v45 = (void **)v47[2];
                  v48 = *v45 == v47;
                  v47 = v45;
                }
                while (v48);
              }
              v49 = (_QWORD *)*v41;
              if ((uint64_t)v45[4] >= *v41)
                break;
            }
            if (v122)
              v50 = v45;
            else
              v50 = (void **)&v122;
            v51 = &v121;
            if (v122)
            {
              v51 = (_QWORD **)v45;
              v52 = v45 + 1;
            }
            else
            {
              v52 = (void **)&v122;
            }
            if (!v51[1])
              goto LABEL_78;
LABEL_56:
            if (++v41 == v42)
              goto LABEL_28;
          }
          v52 = (void **)&v122;
          v50 = (void **)&v122;
          if (v122)
          {
            while (1)
            {
              while (1)
              {
                v50 = v44;
                v53 = (uint64_t)v44[4];
                if ((uint64_t)v49 >= v53)
                  break;
                v44 = (void **)*v50;
                v52 = v50;
                if (!*v50)
                  goto LABEL_78;
              }
              if (v53 >= (uint64_t)v49)
                goto LABEL_56;
              v44 = (void **)v50[1];
              if (!v44)
              {
                v52 = v50 + 1;
                break;
              }
            }
          }
LABEL_78:
          v54 = (void **)operator new(0x28uLL);
          v54[4] = (void *)*v41;
          *v54 = 0;
          v54[1] = 0;
          v54[2] = v50;
          *v52 = v54;
          if (*v121)
          {
            v121 = (void **)*v121;
            v54 = (void **)*v52;
          }
          v55 = v122;
          v48 = v54 == v122;
          *((_BYTE *)v54 + 24) = v54 == v122;
          if (!v48)
          {
            do
            {
              v56 = v54[2];
              if (*((_BYTE *)v56 + 24))
                break;
              v57 = (void **)*((_QWORD *)v56 + 2);
              v58 = (unsigned __int8 *)*v57;
              if (*v57 == v56)
              {
                v61 = (unsigned __int8 *)v57[1];
                if (!v61 || (v62 = v61[24], v59 = v61 + 24, v62))
                {
                  if (*(void ***)v56 == v54)
                  {
                    *((_BYTE *)v56 + 24) = 1;
                    *((_BYTE *)v57 + 24) = 0;
                    v65 = (_QWORD *)*((_QWORD *)v56 + 1);
                    *v57 = v65;
                    if (v65)
                      goto LABEL_95;
                  }
                  else
                  {
                    v63 = (uint64_t *)*((_QWORD *)v56 + 1);
                    v64 = *v63;
                    *((_QWORD *)v56 + 1) = *v63;
                    if (v64)
                    {
                      *(_QWORD *)(v64 + 16) = v56;
                      v57 = (void **)*((_QWORD *)v56 + 2);
                    }
                    v63[2] = (uint64_t)v57;
                    *(_QWORD *)(*((_QWORD *)v56 + 2) + 8 * (**((_QWORD **)v56 + 2) != (_QWORD)v56)) = v63;
                    *v63 = (uint64_t)v56;
                    *((_QWORD *)v56 + 2) = v63;
                    v57 = (void **)v63[2];
                    v56 = *v57;
                    *((_BYTE *)v63 + 24) = 1;
                    *((_BYTE *)v57 + 24) = 0;
                    v65 = (_QWORD *)*((_QWORD *)v56 + 1);
                    *v57 = v65;
                    if (v65)
LABEL_95:
                      v65[2] = v57;
                  }
                  *((_QWORD *)v56 + 2) = v57[2];
                  *((_QWORD *)v57[2] + (*(_QWORD *)v57[2] != (_QWORD)v57)) = v56;
                  *((_QWORD *)v56 + 1) = v57;
LABEL_54:
                  v57[2] = v56;
                  break;
                }
              }
              else if (!v58 || (v60 = v58[24], v59 = v58 + 24, v60))
              {
                if (*(void ***)v56 == v54)
                {
                  v67 = v54[1];
                  *(_QWORD *)v56 = v67;
                  if (v67)
                  {
                    v67[2] = v56;
                    v57 = (void **)*((_QWORD *)v56 + 2);
                  }
                  v54[2] = v57;
                  *(_QWORD *)(*((_QWORD *)v56 + 2) + 8 * (**((_QWORD **)v56 + 2) != (_QWORD)v56)) = v54;
                  v54[1] = v56;
                  *((_QWORD *)v56 + 2) = v54;
                  v57 = (void **)v54[2];
                  *((_BYTE *)v54 + 24) = 1;
                  *((_BYTE *)v57 + 24) = 0;
                  v56 = v57[1];
                  v66 = *(void ***)v56;
                  v57[1] = *(void **)v56;
                  if (!v66)
                    goto LABEL_53;
                }
                else
                {
                  *((_BYTE *)v56 + 24) = 1;
                  *((_BYTE *)v57 + 24) = 0;
                  v56 = v57[1];
                  v66 = *(void ***)v56;
                  v57[1] = *(void **)v56;
                  if (!v66)
                    goto LABEL_53;
                }
                v66[2] = v57;
LABEL_53:
                *((_QWORD *)v56 + 2) = v57[2];
                *((_QWORD *)v57[2] + (*(_QWORD *)v57[2] != (_QWORD)v57)) = v56;
                *(_QWORD *)v56 = v57;
                goto LABEL_54;
              }
              *((_BYTE *)v56 + 24) = 1;
              v54 = v57;
              *((_BYTE *)v57 + 24) = v57 == v55;
              *v59 = 1;
            }
            while (v57 != v55);
          }
          v123 = ++v43;
          goto LABEL_56;
        }
      }
      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v115 = v115 & 0xFFFFFFFF00000000 | 0x16B;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v36, v37, v38, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/frame_dependencies_calculator.cc");
      }
LABEL_28:
      v10 = a1;
    }
    v25 += 2;
  }
  while (v25 != (int *)v120);
  v68 = v124;
  if (v124 != &v125)
  {
    v69 = v121;
    while (v69 != (void **)&v122)
    {
      v13 = (unint64_t)v68[4];
      v70 = (int64_t)v69[4];
      if ((uint64_t)v13 >= v70)
      {
        if (v70 >= (uint64_t)v13)
        {
          v77 = v68[1];
          if (v77)
          {
            do
            {
              v78 = (uint64_t **)v77;
              v77 = (uint64_t *)*v77;
            }
            while (v77);
          }
          else
          {
            do
            {
              v78 = (uint64_t **)v68[2];
              v48 = *v78 == (uint64_t *)v68;
              v68 = v78;
            }
            while (!v48);
          }
          v79 = (void **)v69[1];
          if (v79)
          {
            do
            {
              v69 = v79;
              v79 = (void **)*v79;
            }
            while (v79);
          }
          else
          {
            do
            {
              v80 = v69;
              v69 = (void **)v69[2];
            }
            while (*v69 != v80);
          }
          v68 = v78;
        }
        else
        {
          v75 = (void **)v69[1];
          if (v75)
          {
            do
            {
              v69 = v75;
              v75 = (void **)*v75;
            }
            while (v75);
          }
          else
          {
            do
            {
              v76 = v69;
              v69 = (void **)v69[2];
            }
            while (*v69 != v76);
          }
        }
        goto LABEL_135;
      }
      v71 = *a9;
      v72 = (_QWORD *)a9[1];
      if ((*a9 & 1) != 0)
      {
        v73 = a9[2];
      }
      else
      {
        v72 = a9 + 1;
        v73 = 5;
      }
      if (v71 >> 1 == v73)
      {
        absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>((uint64_t)a9, v68 + 4);
        v74 = v68[1];
        if (!v74)
          goto LABEL_134;
      }
      else
      {
        if (!v72)
          goto LABEL_209;
        v72[v71 >> 1] = v13;
        *a9 = v71 + 2;
        v74 = v68[1];
        if (!v74)
        {
          do
          {
LABEL_134:
            v81 = (uint64_t *)v68;
            v68 = (uint64_t **)v68[2];
          }
          while (*v68 != v81);
          goto LABEL_135;
        }
      }
      do
      {
        v68 = (uint64_t **)v74;
        v74 = (uint64_t *)*v74;
      }
      while (v74);
LABEL_135:
      if (v68 == &v125)
        goto LABEL_151;
    }
    v13 = *a9;
    while (2)
    {
      v82 = v68 + 4;
      v83 = (_QWORD *)a9[1];
      if ((v13 & 1) != 0)
      {
        v84 = a9[2];
      }
      else
      {
        v83 = a9 + 1;
        v84 = 5;
      }
      if (v13 >> 1 == v84)
      {
        absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>((uint64_t)a9, v82);
        v13 = *a9;
        v85 = v68[1];
        if (v85)
          goto LABEL_145;
      }
      else
      {
        if (!v83)
          goto LABEL_209;
        v83[v13 >> 1] = *v82;
        v13 += 2;
        *a9 = v13;
        v85 = v68[1];
        if (v85)
        {
          do
          {
LABEL_145:
            v86 = (uint64_t **)v85;
            v85 = (uint64_t *)*v85;
          }
          while (v85);
          goto LABEL_138;
        }
      }
      do
      {
        v86 = (uint64_t **)v68[2];
        v48 = *v86 == (uint64_t *)v68;
        v68 = v86;
      }
      while (!v48);
LABEL_138:
      v68 = v86;
      if (v86 == &v125)
        break;
      continue;
    }
  }
LABEL_151:
  v87 = a1;
  while (2)
  {
    if (*((_BYTE *)v9 + 5))
    {
      v13 = *v9;
      v89 = *v87;
      if (v13 >= *v87 >> 1)
        goto LABEL_209;
      v90 = v117;
      if ((v89 & 1) != 0)
        v90 = (_QWORD *)*v117;
      v91 = &v90[7 * (int)v13];
      *v91 = a2;
      *((_BYTE *)v91 + 8) = 1;
      v92 = v124;
      if (v124 == &v125)
      {
        v93 = 0;
      }
      else
      {
        v93 = 0;
        v94 = v124;
        do
        {
          v95 = v94[1];
          if (v95)
          {
            do
            {
              v96 = (uint64_t **)v95;
              v95 = (uint64_t *)*v95;
            }
            while (v95);
          }
          else
          {
            do
            {
              v96 = (uint64_t **)v94[2];
              v48 = *v96 == (uint64_t *)v94;
              v94 = v96;
            }
            while (!v48);
          }
          ++v93;
          v94 = v96;
        }
        while (v96 != &v125);
      }
      v97 = v91 + 2;
      v99 = (void **)(v91 + 3);
      v98 = v91[2];
      if ((v98 & 1) != 0)
      {
        v100 = (void **)v97[1];
        v101 = v97[2];
        v88 = v98 & 1;
        if (v101 < v93)
          goto LABEL_186;
LABEL_171:
        v102 = v98 >> 1;
        v103 = v93 >= v98 >> 1;
        v13 = v93 - (v98 >> 1);
        if (!v103)
          v13 = 0;
        if (v102 >= v93)
          v104 = v93;
        else
          v104 = v102;
        if (v104)
        {
          for (i = 0; i != v104; ++i)
          {
            v100[i] = v92[4];
            v106 = v92[1];
            if (v106)
            {
              do
              {
                v107 = (uint64_t **)v106;
                v106 = (uint64_t *)*v106;
              }
              while (v106);
            }
            else
            {
              do
              {
                v107 = (uint64_t **)v92[2];
                v48 = *v107 == (uint64_t *)v92;
                v92 = v107;
              }
              while (!v48);
            }
            v92 = v107;
          }
        }
        else
        {
          v107 = v124;
        }
        if (v102 < v93)
        {
          if (!v100)
            goto LABEL_209;
          v109 = 0;
          v108 = 0;
          v92 = v107;
          v110 = &v100[v102];
          goto LABEL_195;
        }
      }
      else
      {
        v100 = v99;
        v101 = 4;
        v88 = v98 & 1;
        if (v93 <= 4)
          goto LABEL_171;
LABEL_186:
        if (2 * v101 <= v93)
          v108 = v93;
        else
          v108 = 2 * v101;
        if (v108 >> 61)
          goto LABEL_211;
        v109 = (void **)operator new(8 * v108);
        v110 = v109;
        v13 = v93;
LABEL_195:
        v111 = 0;
        do
        {
          v110[v111] = v92[4];
          v112 = v92[1];
          if (v112)
          {
            do
            {
              v113 = (uint64_t **)v112;
              v112 = (uint64_t *)*v112;
            }
            while (v112);
          }
          else
          {
            do
            {
              v113 = (uint64_t **)v92[2];
              v48 = *v113 == (uint64_t *)v92;
              v92 = v113;
            }
            while (!v48);
          }
          ++v111;
          v92 = v113;
        }
        while (v111 != v13);
        if (v109)
        {
          if (v88)
            operator delete(*v99);
          v97[1] = (unint64_t)v109;
          v97[2] = v108;
          v88 = 1;
        }
      }
      *v97 = v88 | (2 * v93);
      v87 = a1;
    }
    v9 += 2;
    if (v9 != (int *)v120)
      continue;
    break;
  }
  v114 = v122;
LABEL_208:
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v121, v114);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v124, v125);
}

char *absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;

  v5 = a1 + 8;
  v4 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (((v7 >> 60) & 7) != 0)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v5 = *(_QWORD *)(a1 + 8);
    v6 = 2 * v7;
  }
  else
  {
    v6 = 10;
  }
  v8 = v4 >> 1;
  v9 = (char *)operator new(8 * v6);
  v10 = v9;
  v11 = &v9[8 * (v4 >> 1)];
  *(_QWORD *)v11 = *a2;
  if (v4 >= 2)
  {
    v12 = 0;
    if (v4 < 8 || (unint64_t)&v9[-v5] < 0x20)
    {
      v13 = (uint64_t *)v5;
    }
    else
    {
      v12 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      v13 = (uint64_t *)(v5 + 8 * (v8 & 0x7FFFFFFFFFFFFFFCLL));
      v14 = v9 + 16;
      v15 = (__int128 *)(v5 + 16);
      v16 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v15;
        *(v14 - 1) = *(v15 - 1);
        *v14 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v8 == v12)
        goto LABEL_15;
    }
    v18 = v8 - v12;
    v19 = &v9[8 * v12];
    do
    {
      v20 = *v13++;
      *(_QWORD *)v19 = v20;
      v19 += 8;
      --v18;
    }
    while (v18);
  }
LABEL_15:
  if ((v4 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v4 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)a1 = (v4 | 1) + 2;
  return v11;
}

uint64_t webrtc::FrameDropper::Fill(uint64_t this, unint64_t a2, char a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v8;
  float v9;
  float v10;
  float v11;
  float v13;
  float v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;

  if (*(_BYTE *)(this + 73))
  {
    v3 = (float)((float)a2 * 8.0) / 1000.0;
    if ((a3 & 1) != 0)
    {
      v4 = *(float *)(this + 16);
      if (v4 == -1.0 || v3 <= (float)(v4 * 3.0) || *(_DWORD *)(this + 28))
      {
        v5 = (float)((float)a2 * 8.0) / 1000.0;
        if (v4 != -1.0)
          v5 = (float)(v3 * (float)(1.0 - *(float *)(this + 12))) + (float)(*(float *)(this + 12) * v4);
        v6 = *(float *)(this + 20);
        if (v5 <= v6 || v6 == -1.0)
          v6 = v5;
        *(float *)(this + 16) = v6;
        v8 = *(float *)(this + 4);
        v9 = 0.0;
        v10 = -1.0;
        if (v8 == -1.0)
          goto LABEL_16;
      }
      else
      {
        v24 = (int)(*(float *)(this + 24) + 0.5);
        *(_DWORD *)(this + 28) = v24;
        *(float *)(this + 32) = v3 / (float)v24;
        v3 = 0.0;
        v8 = *(float *)(this + 4);
        v9 = 0.0;
        v10 = -1.0;
        if (v8 == -1.0)
          goto LABEL_16;
      }
      v9 = (float)((float)(1.0 - *(float *)this) * 0.0) + (float)(*(float *)this * v8);
LABEL_16:
      v11 = *(float *)(this + 8);
      if (v9 <= v11 || v11 == v10)
        v13 = v9;
      else
        v13 = *(float *)(this + 8);
      *(float *)(this + 4) = v13;
      goto LABEL_38;
    }
    v14 = *(float *)(this + 4);
    v15 = 1.0;
    if (v14 != -1.0)
      v15 = (float)(1.0 - *(float *)this) + (float)(*(float *)this * v14);
    v16 = *(float *)(this + 8);
    if (v15 <= v16 || v16 == -1.0)
      v18 = v15;
    else
      v18 = *(float *)(this + 8);
    *(float *)(this + 4) = v18;
    if (*(_DWORD *)(this + 28))
      goto LABEL_38;
    if (v18 <= 0.00001)
    {
      v20 = *(float *)(this + 24);
    }
    else
    {
      v19 = 1.0 / v18;
      v20 = *(float *)(this + 24);
      if (v19 < v20)
        goto LABEL_37;
    }
    v19 = v20;
LABEL_37:
    v21 = (int)(v19 + 0.5);
    *(_DWORD *)(this + 28) = v21;
    *(float *)(this + 32) = v3 / (float)v21;
    v3 = 0.0;
LABEL_38:
    v22 = v3 + *(float *)(this + 36);
    *(float *)(this + 36) = v22;
    v23 = *(float *)(this + 44) * 3.0;
    if (v22 > v23)
      *(float *)(this + 36) = v23;
  }
  return this;
}

uint64_t webrtc::FrameDropper::Leak(uint64_t this, unsigned int a2)
{
  float v2;
  double v3;
  float v4;
  float v5;
  int v6;
  BOOL v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v16;
  float v17;
  float v18;

  if (a2)
  {
    if (*(_BYTE *)(this + 73))
    {
      v2 = *(float *)(this + 44);
      if (v2 >= 0.0)
      {
        v3 = (double)a2 * 0.5;
        if (v3 < 5.0)
          v3 = 5.0;
        v4 = v3;
        *(float *)(this + 24) = v4;
        v5 = v2 / (float)a2;
        v6 = *(_DWORD *)(this + 28);
        v7 = __OFSUB__(v6, 1);
        v8 = v6 - 1;
        if (v8 < 0 == v7)
        {
          v5 = v5 - *(float *)(this + 32);
          *(_DWORD *)(this + 28) = v8;
        }
        v9 = *(float *)(this + 40);
        v10 = *(float *)(this + 36) - v5;
        if (v10 < 0.0)
          v10 = 0.0;
        *(float *)(this + 36) = v10;
        v11 = 0.9;
        if (v10 > (float)(v9 * 1.3))
          v11 = 0.8;
        *(float *)(this + 52) = v11;
        if (v10 <= v9)
        {
          v16 = *(float *)(this + 56);
          v17 = *(float *)(this + 60);
          v18 = (float)((float)(1.0 - v11) * 0.0) + (float)(v11 * v16);
          if (v16 == -1.0)
            v18 = 0.0;
          if (v18 > v17 && v17 != -1.0)
            v18 = *(float *)(this + 60);
          *(float *)(this + 56) = v18;
        }
        else
        {
          if (*(_BYTE *)(this + 72))
            *(_BYTE *)(this + 48) = 1;
          v12 = *(float *)(this + 56);
          v13 = *(float *)(this + 60);
          v14 = (float)(1.0 - v11) + (float)(v11 * v12);
          if (v12 == -1.0)
            v14 = 1.0;
          if (v14 > v13 && v13 != -1.0)
            v14 = *(float *)(this + 60);
          *(float *)(this + 56) = v14;
          *(_DWORD *)(this + 52) = 1063675494;
        }
        *(_BYTE *)(this + 72) = v10 < v9;
      }
    }
  }
  return this;
}

void webrtc::`anonymous namespace'::FrameDumpingDecoder::~FrameDumpingDecoder(webrtc::_anonymous_namespace_::FrameDumpingDecoder *this)
{
  webrtc::IvfFileWriter *v2;
  FILE *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C0B4560;
  v2 = (webrtc::IvfFileWriter *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    v3 = (FILE *)*((_QWORD *)v2 + 9);
    if (v3)
    {
      if (!*((_QWORD *)v2 + 3) || (webrtc::IvfFileWriter::WriteHeader(v2), (v3 = (FILE *)*((_QWORD *)v2 + 9)) != 0))
      {
        fclose(v3);
        *((_QWORD *)v2 + 9) = 0;
      }
    }
    MEMORY[0x20BD0ADEC](v2, 0x1020C409DD573D2);
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  webrtc::IvfFileWriter *v2;
  FILE *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C0B4560;
  v2 = (webrtc::IvfFileWriter *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    v3 = (FILE *)*((_QWORD *)v2 + 9);
    if (v3)
    {
      if (!*((_QWORD *)v2 + 3) || (webrtc::IvfFileWriter::WriteHeader(v2), (v3 = (FILE *)*((_QWORD *)v2 + 9)) != 0))
      {
        fclose(v3);
        *((_QWORD *)v2 + 9) = 0;
      }
    }
    MEMORY[0x20BD0ADEC](v2, 0x1020C409DD573D2);
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingDecoder::Configure(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 20);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingDecoder::Decode(webrtc::_anonymous_namespace_::FrameDumpingDecoder *this, const webrtc::EncodedImage *a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
  webrtc::IvfFileWriter::WriteFrame(*((webrtc::IvfFileWriter **)this + 3), (uint64_t)a2, *((_DWORD *)this + 4));
  return v4;
}

uint64_t webrtc::VideoDecoder::Decode(webrtc::VideoDecoder *this, const webrtc::EncodedImage *a2, BOOL a3, uint64_t a4)
{
  return (*(uint64_t (**)(webrtc::VideoDecoder *, const webrtc::EncodedImage *, uint64_t))(*(_QWORD *)this
                                                                                                  + 24))(this, a2, a4);
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingDecoder::RegisterDecodeCompleteCallback(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingDecoder::Release(webrtc::_anonymous_namespace_::FrameDumpingDecoder *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingDecoder::GetDecoderInfo(webrtc::_anonymous_namespace_::FrameDumpingDecoder *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingDecoder::ImplementationName(webrtc::_anonymous_namespace_::FrameDumpingDecoder *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
}

void webrtc::MaybeCreateFrameDumpingEncoderWrapper(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::string::size_type size;
  char v6;
  uint64_t v7;
  BOOL v8;
  std::string *p_p;
  std::string *v10;
  std::string::value_type *v11;
  unint64_t v12;
  int8x8_t v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  char v21;
  int v22;
  char v23;
  char v24;
  std::string __p;
  std::string v26;
  pthread_mutexattr_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(std::string *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-EncoderDataDumpDirectory", 31);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v7 = *a1;
  if (size)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    *a1 = 0;
    *a3 = v7;
    if ((v6 & 0x80) == 0)
      return;
    goto LABEL_50;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  v10 = p_p;
  if (size >= 8)
  {
    v10 = (std::string *)((char *)p_p + (size & 0xFFFFFFFFFFFFFFF8));
    v11 = &p_p->__r_.__value_.__s.__data_[3];
    v12 = size & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      v13 = vceq_s8(*(int8x8_t *)(v11 - 3), (int8x8_t)0x3B3B3B3B3B3B3B3BLL);
      if ((v13.i8[0] & 1) != 0)
      {
        *(v11 - 3) = 47;
        if ((v13.i8[1] & 1) == 0)
        {
LABEL_17:
          if ((v13.i8[2] & 1) == 0)
            goto LABEL_18;
          goto LABEL_26;
        }
      }
      else if ((v13.i8[1] & 1) == 0)
      {
        goto LABEL_17;
      }
      *(v11 - 2) = 47;
      if ((v13.i8[2] & 1) == 0)
      {
LABEL_18:
        if ((v13.i8[3] & 1) == 0)
          goto LABEL_19;
        goto LABEL_27;
      }
LABEL_26:
      *(v11 - 1) = 47;
      if ((v13.i8[3] & 1) == 0)
      {
LABEL_19:
        if ((v13.i8[4] & 1) == 0)
          goto LABEL_20;
        goto LABEL_28;
      }
LABEL_27:
      *v11 = 47;
      if ((v13.i8[4] & 1) == 0)
      {
LABEL_20:
        if ((v13.i8[5] & 1) == 0)
          goto LABEL_21;
        goto LABEL_29;
      }
LABEL_28:
      v11[1] = 47;
      if ((v13.i8[5] & 1) == 0)
      {
LABEL_21:
        if ((v13.i8[6] & 1) == 0)
          goto LABEL_22;
        goto LABEL_30;
      }
LABEL_29:
      v11[2] = 47;
      if ((v13.i8[6] & 1) == 0)
      {
LABEL_22:
        if ((v13.i8[7] & 1) != 0)
          goto LABEL_31;
        goto LABEL_14;
      }
LABEL_30:
      v11[3] = 47;
      if ((v13.i8[7] & 1) != 0)
LABEL_31:
        v11[4] = 47;
LABEL_14:
      v11 += 8;
      v12 -= 8;
      if (!v12)
      {
        if (size == (size & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_33;
        break;
      }
    }
  }
  v15 = (std::string *)((char *)p_p + size);
  do
  {
    if (v10->__r_.__value_.__s.__data_[0] == 59)
      v10->__r_.__value_.__s.__data_[0] = 47;
    v10 = (std::string *)((char *)v10 + 1);
  }
  while (v10 != v15);
LABEL_33:
  if (rtc::g_clock)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v14 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
        / dword_253EA791C;
  }
  v16 = (unsigned __int128)(v14 * (__int128)0x20C49BA5E353F7CFLL) >> 64;
  v17 = operator new();
  v18 = *a1;
  *a1 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v26 = __p;
  v19 = (v16 >> 7) + ((unint64_t)v16 >> 63);
  *(_QWORD *)v17 = &off_24C0B45B8;
  *(_QWORD *)(v17 + 8) = &unk_24C0B4640;
  *(_QWORD *)(v17 + 16) = v18;
  pthread_mutexattr_init(&v27);
  pthread_mutexattr_setpolicy_np(&v27, 3);
  pthread_mutex_init((pthread_mutex_t *)(v17 + 24), &v27);
  pthread_mutexattr_destroy(&v27);
  *(_QWORD *)(v17 + 96) = 0;
  *(_QWORD *)(v17 + 104) = 0;
  *(_QWORD *)(v17 + 88) = v17 + 96;
  *(_QWORD *)(v17 + 120) = 0;
  *(_QWORD *)(v17 + 128) = 0;
  *(_BYTE *)(v17 + 136) = 1;
  *(_DWORD *)(v17 + 140) = 0;
  *(_BYTE *)(v17 + 144) = 0;
  *(_OWORD *)(v17 + 148) = 0u;
  *(_OWORD *)(v17 + 164) = 0u;
  *(_OWORD *)(v17 + 180) = 0u;
  *(_OWORD *)(v17 + 196) = 0u;
  *(_OWORD *)(v17 + 212) = 0u;
  *(_OWORD *)(v17 + 228) = 0u;
  *(_BYTE *)(v17 + 160) = 1;
  *(_QWORD *)(v17 + 164) = 0;
  *(_QWORD *)(v17 + 172) = 0;
  *(_BYTE *)(v17 + 180) = 0;
  *(_BYTE *)(v17 + 196) = 1;
  *(_QWORD *)(v17 + 200) = 0;
  *(_QWORD *)(v17 + 208) = 0;
  *(_BYTE *)(v17 + 216) = 0;
  *(_BYTE *)(v17 + 232) = 1;
  *(_OWORD *)(v17 + 240) = 0u;
  *(_OWORD *)(v17 + 256) = 0u;
  *(_QWORD *)(v17 + 236) = 0;
  *(_QWORD *)(v17 + 244) = 0;
  *(_BYTE *)(v17 + 252) = 0;
  *(_OWORD *)(v17 + 272) = 0u;
  *(_OWORD *)(v17 + 288) = 0u;
  *(_OWORD *)(v17 + 304) = 0u;
  *(_OWORD *)(v17 + 320) = 0u;
  *(_OWORD *)(v17 + 336) = 0u;
  *(_OWORD *)(v17 + 352) = 0u;
  *(_OWORD *)(v17 + 368) = 0u;
  *(_OWORD *)(v17 + 384) = 0u;
  *(_OWORD *)(v17 + 400) = 0u;
  *(_OWORD *)(v17 + 416) = 0u;
  *(_QWORD *)(v17 + 424) = 0;
  *(_QWORD *)(v17 + 432) = 0;
  *(_BYTE *)(v17 + 268) = 1;
  *(_QWORD *)(v17 + 272) = 0;
  *(_QWORD *)(v17 + 280) = 0;
  *(_BYTE *)(v17 + 288) = 0;
  *(_BYTE *)(v17 + 304) = 1;
  *(_BYTE *)(v17 + 324) = 0;
  *(_BYTE *)(v17 + 340) = 1;
  *(_BYTE *)(v17 + 360) = 0;
  *(_QWORD *)(v17 + 344) = 0;
  *(_QWORD *)(v17 + 352) = 0;
  *(_BYTE *)(v17 + 376) = 1;
  *(_BYTE *)(v17 + 396) = 0;
  *(_BYTE *)(v17 + 412) = 1;
  *(_QWORD *)(v17 + 416) = 0;
  *(_BYTE *)(v17 + 432) = 0;
  *(_BYTE *)(v17 + 440) = 0;
  *(_QWORD *)(v17 + 448) = 0;
  *(_WORD *)(v17 + 456) = 0;
  *(_BYTE *)(v17 + 464) = 0;
  *(_DWORD *)(v17 + 488) = 0;
  *(_BYTE *)(v17 + 492) = 0;
  *(_WORD *)(v17 + 484) = 0;
  *(_QWORD *)(v17 + 496) = 0;
  v20 = (std::string *)(v17 + 504);
  *(_QWORD *)(v17 + 112) = 0;
  *(_QWORD *)(v17 + 308) = 0;
  *(_QWORD *)(v17 + 316) = 0;
  *(_QWORD *)(v17 + 380) = 0;
  *(_QWORD *)(v17 + 388) = 0;
  *(_QWORD *)(v17 + 476) = 0;
  *(_QWORD *)(v17 + 468) = 0;
  if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 + 520) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
    *(_QWORD *)(v17 + 528) = v19;
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    *a3 = v17;
    if ((v21 & 0x80) == 0)
      return;
    goto LABEL_50;
  }
  std::string::__init_copy_ctor_external(v20, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  v22 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
  *(_QWORD *)(v17 + 528) = v19;
  if ((v22 & 0x80000000) == 0)
  {
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    *a3 = v17;
    if ((v23 & 0x80) == 0)
      return;
    goto LABEL_50;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  *a3 = v17;
  if (v24 < 0)
LABEL_50:
    operator delete(__p.__r_.__value_.__l.__data_);
}

void webrtc::`anonymous namespace'::FrameDumpingEncoder::~FrameDumpingEncoder(webrtc::_anonymous_namespace_::FrameDumpingEncoder *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0B45B8;
  *((_QWORD *)this + 1) = &unk_24C0B4640;
  v2 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  std::__tree<std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>>>::destroy(*((_QWORD **)this + 12));
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  pthread_mutex_unlock(v2);
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  std::__tree<std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>>>::destroy(*((_QWORD **)this + 12));
  pthread_mutex_destroy(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingEncoder::SetFecControllerOverride(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingEncoder::InitEncode(uint64_t a1, const void *a2, uint64_t a3)
{
  memcpy((void *)(a1 + 112), a2, 0x17DuLL);
  return (*(uint64_t (**)(_QWORD, const void *, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingEncoder::RegisterEncodeCompleteCallback(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 496) = a2;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a1 + 8);
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingEncoder::Release(webrtc::_anonymous_namespace_::FrameDumpingEncoder *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingEncoder::Encode(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingEncoder::SetRates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingEncoder::OnPacketLossRateUpdate(webrtc::_anonymous_namespace_::FrameDumpingEncoder *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2), a2);
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingEncoder::OnRttUpdate(webrtc::_anonymous_namespace_::FrameDumpingEncoder *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingEncoder::OnLossNotification(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingEncoder::GetEncoderInfo(webrtc::_anonymous_namespace_::FrameDumpingEncoder *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingEncoder::OnEncodedImage(webrtc::_anonymous_namespace_::FrameDumpingEncoder *this, const webrtc::EncodedImage *a2, const webrtc::CodecSpecificInfo *a3)
{
  pthread_mutex_t *v6;
  int v7;
  char *v8;
  uint64_t **v9;
  uint64_t **v10;
  int v11;
  BOOL v12;
  char **v13;
  _QWORD *v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  char *v25;
  size_t v26;
  size_t v27;
  char *p_p;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  void **v33;
  FILE *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t **v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  FILE *v42;
  void *__p;
  size_t __n;
  unint64_t v46;
  char *__s;
  uint64_t v48;
  uint64_t v49;
  _BYTE __dst[1024];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v6 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  if ((*(_QWORD *)((_BYTE *)a2 + 156) & 0xFF00000000) != 0)
    v7 = *(_QWORD *)((char *)a2 + 156);
  else
    v7 = 0;
  v9 = (uint64_t **)((char *)this + 96);
  v8 = (char *)*((_QWORD *)this + 12);
  if (v8)
  {
    v10 = (uint64_t **)((char *)this + 96);
    do
    {
      v11 = *((_DWORD *)v8 + 8);
      v12 = v11 < v7;
      if (v11 >= v7)
        v13 = (char **)v8;
      else
        v13 = (char **)(v8 + 8);
      if (!v12)
        v10 = (uint64_t **)v8;
      v8 = *v13;
    }
    while (*v13);
    if (v10 != v9 && *((_DWORD *)v10 + 8) <= v7)
    {
      v35 = (uint64_t)v10[5];
      goto LABEL_69;
    }
  }
  __s = __dst;
  v48 = 1024;
  __dst[0] = 0;
  v14 = (_QWORD *)((char *)this + 504);
  if (*((char *)this + 527) < 0)
  {
    v15 = *((_QWORD *)this + 64);
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_70;
    v14 = (_QWORD *)*v14;
    if (v15)
    {
      if (!v14)
        goto LABEL_70;
    }
  }
  else
  {
    v15 = *((unsigned __int8 *)this + 527);
  }
  if (v15 >= 0x3FF)
    v16 = 1023;
  else
    v16 = v15;
  memcpy(__dst, v14, v16);
  __dst[v16] = 0;
  if ((v16 ^ 0x3FF) >= 0x16)
    v17 = 22;
  else
    v17 = v16 ^ 0x3FF;
  memcpy(&__dst[v16], "/webrtc_encoded_frames", v17);
  v18 = &__dst[v17 + v16];
  *v18 = 0;
  v19 = v17 + v16 != 1023;
  if (v17 + v16 == 1023)
    v20 = 1023;
  else
    v20 = v17 + v16 + 1;
  memcpy(v18, ".", v19);
  v49 = v20;
  __dst[v20] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *((_QWORD *)this + 66));
  v21 = v48;
  v22 = v49 + 1;
  memcpy(&__s[v49], ".", v48 != v49 + 1);
  v23 = v49;
  if (v21 != v22)
    v23 = v49 + 1;
  v49 = v23;
  __s[v23] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", v7);
  if ((unint64_t)(v48 + ~v49) >= 4)
    v24 = 4;
  else
    v24 = v48 + ~v49;
  memcpy(&__s[v49], ".ivf", v24);
  v49 += v24;
  __s[v49] = 0;
  v25 = __s;
  if (!__s)
LABEL_70:
    __break(1u);
  v26 = strlen(__s);
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v27 = v26;
  if (v26 > 0x16)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    p_p = (char *)operator new(v30 + 1);
    __n = v27;
    v46 = v31 | 0x8000000000000000;
    __p = p_p;
    v29 = &p_p[v27];
    if (p_p > v25)
      goto LABEL_42;
  }
  else
  {
    HIBYTE(v46) = v26;
    p_p = (char *)&__p;
    v29 = (char *)&__p + v27;
    if (&__p > (void **)__s)
      goto LABEL_42;
  }
  if (v29 > v25)
    goto LABEL_70;
LABEL_42:
  if (v27)
    memmove(p_p, v25, v27);
  *v29 = 0;
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
    v32 = HIBYTE(v46);
    v33 = &__p;
    goto LABEL_49;
  }
  v32 = __n;
  if ((__n & 0x8000000000000000) != 0)
    goto LABEL_70;
  v33 = (void **)__p;
  if (__n)
  {
    if (!__p)
      goto LABEL_70;
  }
LABEL_49:
  v35 = operator new();
  *(_DWORD *)v35 = 0;
  *(_OWORD *)(v35 + 8) = xmmword_208F0A0E0;
  *(_QWORD *)(v35 + 24) = 0;
  *(_DWORD *)(v35 + 32) = 0;
  *(_QWORD *)(v35 + 40) = -1;
  *(_BYTE *)(v35 + 48) = 0;
  *(_QWORD *)(v35 + 56) = 0;
  *(_BYTE *)(v35 + 64) = 0;
  *(_BYTE *)(v35 + 68) = 0;
  *(_QWORD *)(v35 + 72) = v34;
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
    v36 = *v9;
    v37 = (uint64_t **)((char *)this + 96);
    if (*v9)
      goto LABEL_55;
    goto LABEL_59;
  }
  operator delete(__p);
  v36 = *v9;
  v37 = (uint64_t **)((char *)this + 96);
  if (!*v9)
  {
LABEL_59:
    v39 = operator new(0x30uLL);
    v39[8] = v7;
    *((_QWORD *)v39 + 5) = v35;
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = v37;
    *v9 = (uint64_t *)v39;
    v40 = **((_QWORD **)this + 11);
    if (v40)
    {
      *((_QWORD *)this + 11) = v40;
      v41 = *v9;
    }
    else
    {
      v41 = (uint64_t *)v39;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 12), v41);
    ++*((_QWORD *)this + 13);
    goto LABEL_69;
  }
  while (1)
  {
LABEL_55:
    while (1)
    {
      v37 = (uint64_t **)v36;
      v38 = *((_DWORD *)v36 + 8);
      if (v38 <= v7)
        break;
      v36 = *v37;
      v9 = v37;
      if (!*v37)
        goto LABEL_59;
    }
    if (v38 >= v7)
      break;
    v36 = v37[1];
    if (!v36)
    {
      v9 = v37 + 1;
      goto LABEL_59;
    }
  }
  v42 = *(FILE **)(v35 + 72);
  if (v42)
  {
    if (!*(_QWORD *)(v35 + 24)
      || (webrtc::IvfFileWriter::WriteHeader((webrtc::IvfFileWriter *)v35), (v42 = *(FILE **)(v35 + 72)) != 0))
    {
      fclose(v42);
      *(_QWORD *)(v35 + 72) = 0;
    }
  }
  MEMORY[0x20BD0ADEC](v35, 0x1020C409DD573D2);
LABEL_69:
  webrtc::IvfFileWriter::WriteFrame((webrtc::IvfFileWriter *)v35, (uint64_t)a2, *((_DWORD *)this + 28));
  pthread_mutex_unlock(v6);
  return (*(uint64_t (**)(_QWORD, const webrtc::EncodedImage *, const webrtc::CodecSpecificInfo *))(**((_QWORD **)this + 62) + 16))(*((_QWORD *)this + 62), a2, a3);
}

uint64_t webrtc::`anonymous namespace'::FrameDumpingEncoder::OnDroppedFrame(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 496) + 24))(*(_QWORD *)(a1 + 496));
}

void `non-virtual thunk to'webrtc::`anonymous namespace'::FrameDumpingEncoder::~FrameDumpingEncoder(uint64_t a1)
{
}

{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t `non-virtual thunk to'webrtc::`anonymous namespace'::FrameDumpingEncoder::OnEncodedImage(uint64_t a1, const webrtc::EncodedImage *a2, const webrtc::CodecSpecificInfo *a3)
{
}

uint64_t `non-virtual thunk to'webrtc::`anonymous namespace'::FrameDumpingEncoder::OnDroppedFrame(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 488) + 24))(*(_QWORD *)(a1 + 488));
}

void std::__tree<std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>>>::destroy(_QWORD *a1)
{
  webrtc::IvfFileWriter *v2;
  FILE *v3;

  if (a1)
  {
    std::__tree<std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<webrtc::IvfFileWriter>>>>::destroy(a1[1]);
    v2 = (webrtc::IvfFileWriter *)a1[5];
    a1[5] = 0;
    if (v2)
    {
      v3 = (FILE *)*((_QWORD *)v2 + 9);
      if (v3)
      {
        if (!*((_QWORD *)v2 + 3) || (webrtc::IvfFileWriter::WriteHeader(v2), (v3 = (FILE *)*((_QWORD *)v2 + 9)) != 0))
        {
          fclose(v3);
          *((_QWORD *)v2 + 9) = 0;
        }
      }
      MEMORY[0x20BD0ADEC](v2, 0x1020C409DD573D2);
    }
    operator delete(a1);
  }
}

uint64_t webrtc::FrameEncodeMetadataWriter::OnEncoderInit(pthread_mutex_t *this, const webrtc::VideoCodec *a2)
{
  void *v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18[11];
  uint64_t v19;

  pthread_mutex_lock(this);
  v4 = memcpy(this[1].__opaque, a2, 0x17DuLL);
  v5 = this[1].__opaque[32];
  v6 = *(_DWORD *)this[1].__opaque;
  if (v6 != 3)
  {
    if (v6 == 2)
    {
      if (v5 <= this[6].__opaque[46])
        v5 = this[6].__opaque[46];
      else
        v5 = this[1].__opaque[32];
    }
    goto LABEL_15;
  }
  v7 = *(unsigned __int16 *)&this[6].__opaque[52];
  if (v7 < 0x100)
    goto LABEL_15;
  if (*(_WORD *)&this[6].__opaque[52] >= 0x22u)
  {
    v19 = 0;
LABEL_11:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_encode_metadata_writer.cc");
    goto LABEL_13;
  }
  (*((void (**)(uint64_t *__return_ptr, void *))*(&off_24C0B46F8 + (char)v7) + 1))(&v19, v4);
  if (!v19)
    goto LABEL_11;
  (*(void (**)(int *__return_ptr))(*(_QWORD *)v19 + 16))(v18);
  v5 = v18[0];
LABEL_13:
  v15 = v19;
  v19 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_15:
  if (v5 <= 1)
    v16 = 1;
  else
    v16 = v5;
  *(_QWORD *)&this[7].__opaque[8] = v16;
  return pthread_mutex_unlock(this);
}

uint64_t webrtc::FrameEncodeMetadataWriter::OnSetRates(webrtc::FrameEncodeMetadataWriter *this, const webrtc::VideoBitrateAllocation *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  std::string *v36;
  const webrtc::VideoFrame *v37;

  pthread_mutex_lock((pthread_mutex_t *)this);
  *((_DWORD *)this + 114) = a3;
  v10 = *((_QWORD *)this + 58);
  v11 = (uint64_t)(*((_QWORD *)this + 60) - *((_QWORD *)this + 59)) >> 5;
  if (v10 > v11)
  {
    std::vector<webrtc::FrameEncodeMetadataWriter::TimingFramesLayerInfo>::__append((unint64_t *)this + 59, v10 - v11);
    v10 = *((_QWORD *)this + 58);
  }
  if (!v10)
    return pthread_mutex_unlock((pthread_mutex_t *)this);
  v12 = (_QWORD *)*((_QWORD *)this + 59);
  v13 = *((_QWORD *)this + 60) - (_QWORD)v12;
  if ((unint64_t)v13 < 0x20)
    goto LABEL_75;
  if (*((_BYTE *)a2 + 32))
    v14 = *((_DWORD *)a2 + 7);
  else
    v14 = 0;
  if (*((_BYTE *)a2 + 24))
    v15 = *((_DWORD *)a2 + 5);
  else
    v15 = 0;
  if (*((_BYTE *)a2 + 16))
    v16 = *((_DWORD *)a2 + 3);
  else
    v16 = 0;
  if (*((_BYTE *)a2 + 8))
    v17 = *((_DWORD *)a2 + 1);
  else
    v17 = 0;
  *v12 = (v16 + v17 + v15 + v14) >> 3;
  if (v10 < 2)
    return pthread_mutex_unlock((pthread_mutex_t *)this);
  v18 = v13 >> 5;
  if (v18 == 1)
    goto LABEL_75;
  if (*((_BYTE *)a2 + 64))
    v19 = *((_DWORD *)a2 + 15);
  else
    v19 = 0;
  if (*((_BYTE *)a2 + 56))
    v20 = *((_DWORD *)a2 + 13);
  else
    v20 = 0;
  if (*((_BYTE *)a2 + 48))
    v21 = *((_DWORD *)a2 + 11);
  else
    v21 = 0;
  if (*((_BYTE *)a2 + 40))
    v22 = *((_DWORD *)a2 + 9);
  else
    v22 = 0;
  v12[4] = (v21 + v22 + v20 + v19) >> 3;
  if (v10 < 3)
    return pthread_mutex_unlock((pthread_mutex_t *)this);
  if (v18 == 2)
    goto LABEL_75;
  if (*((_BYTE *)a2 + 96))
    v23 = *((_DWORD *)a2 + 23);
  else
    v23 = 0;
  if (*((_BYTE *)a2 + 88))
    v24 = *((_DWORD *)a2 + 21);
  else
    v24 = 0;
  if (*((_BYTE *)a2 + 80))
    v25 = *((_DWORD *)a2 + 19);
  else
    v25 = 0;
  if (*((_BYTE *)a2 + 72))
    v26 = *((_DWORD *)a2 + 17);
  else
    v26 = 0;
  v12[8] = (v25 + v26 + v24 + v23) >> 3;
  if (v10 < 4)
    return pthread_mutex_unlock((pthread_mutex_t *)this);
  if (v18 == 3)
    goto LABEL_75;
  if (*((_BYTE *)a2 + 128))
    v27 = *((_DWORD *)a2 + 31);
  else
    v27 = 0;
  if (*((_BYTE *)a2 + 120))
    v28 = *((_DWORD *)a2 + 29);
  else
    v28 = 0;
  if (*((_BYTE *)a2 + 112))
    v29 = *((_DWORD *)a2 + 27);
  else
    v29 = 0;
  if (*((_BYTE *)a2 + 104))
    v30 = *((_DWORD *)a2 + 25);
  else
    v30 = 0;
  v12[12] = (v29 + v30 + v28 + v27) >> 3;
  if (v10 < 5)
    return pthread_mutex_unlock((pthread_mutex_t *)this);
  if (v18 == 4)
  {
LABEL_75:
    __break(1u);
  }
  else
  {
    if (*((_BYTE *)a2 + 160))
      v31 = *((_DWORD *)a2 + 39);
    else
      v31 = 0;
    if (*((_BYTE *)a2 + 152))
      v32 = *((_DWORD *)a2 + 37);
    else
      v32 = 0;
    if (*((_BYTE *)a2 + 144))
      v33 = *((_DWORD *)a2 + 35);
    else
      v33 = 0;
    if (*((_BYTE *)a2 + 136))
      v34 = *((_DWORD *)a2 + 33);
    else
      v34 = 0;
    v12[16] = (v33 + v34 + v32 + v31) >> 3;
    if (v10 <= 5)
      return pthread_mutex_unlock((pthread_mutex_t *)this);
  }
  v36 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 73, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v6, v7, v8, v9, 5);
  return webrtc::FrameEncodeMetadataWriter::OnEncodeStarted((webrtc::FrameEncodeMetadataWriter *)v36, v37);
}

uint64_t webrtc::FrameEncodeMetadataWriter::OnEncodeStarted(pthread_mutex_t *this, const webrtc::VideoFrame *a2)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  char *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  unint64_t v60;
  char v61;
  int v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;

  pthread_mutex_lock(this);
  v4 = (unint64_t *)&this[7].__opaque[16];
  v5 = *(_QWORD *)&this[7].__opaque[16];
  v6 = *(_QWORD *)&this[7].__opaque[8];
  v7 = (*(_QWORD *)&this[7].__opaque[24] - v5) >> 5;
  if (v6 <= v7)
  {
    if (v6 < v7)
      std::vector<webrtc::FrameEncodeMetadataWriter::TimingFramesLayerInfo>::__base_destruct_at_end[abi:sn180100]((uint64_t)v4, v5 + 32 * v6);
  }
  else
  {
    std::vector<webrtc::FrameEncodeMetadataWriter::TimingFramesLayerInfo>::__append(v4, v6 - v7);
  }
  v8 = *((_DWORD *)a2 + 4);
  if (rtc::g_clock)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    v10 = *((unsigned __int8 *)a2 + 144);
    if (*((_BYTE *)a2 + 144))
      goto LABEL_7;
LABEL_56:
    v11 = 0;
    v12 = *((_QWORD *)a2 + 4);
    v67 = *((_QWORD *)a2 + 3);
    v13 = *((_DWORD *)a2 + 18);
    v14 = *((_QWORD *)a2 + 23);
    if (!v14)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (!dword_253EA791C)
    mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
  v9 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
     / dword_253EA791C;
  v10 = *((unsigned __int8 *)a2 + 144);
  if (!*((_BYTE *)a2 + 144))
    goto LABEL_56;
LABEL_7:
  v11 = *((_BYTE *)a2 + 76);
  v68 = *(_OWORD *)((char *)a2 + 77);
  v69 = *(_OWORD *)((char *)a2 + 93);
  v70 = *(_OWORD *)((char *)a2 + 109);
  v71 = *(_OWORD *)((char *)a2 + 125);
  v12 = *((_QWORD *)a2 + 4);
  v67 = *((_QWORD *)a2 + 3);
  v13 = *((_DWORD *)a2 + 18);
  v14 = *((_QWORD *)a2 + 23);
  if (!v14)
    goto LABEL_9;
  do
LABEL_8:
    v15 = __ldxr((unsigned int *)v14);
  while (__stxr(v15 + 1, (unsigned int *)v14));
LABEL_9:
  v16 = *(_QWORD *)&this[7].__opaque[8];
  if (v16)
  {
    v17 = 0;
    v18 = v9 / 1000000;
    v61 = v11;
    v62 = v10;
    v64 = v13;
    v63 = v12;
    v66 = v9 / 1000000;
    while (1)
    {
      v21 = *(_QWORD *)&this[7].__opaque[16];
      v22 = (*(_QWORD *)&this[7].__opaque[24] - v21) >> 5;
      if (v22 <= v17)
        break;
      if (*(_QWORD *)(v21 + 32 * v17))
      {
        if (*(_QWORD *)(v21 + 32 * v17 + 24) == 150)
        {
          v23 = this[8].__sig + 1;
          this[8].__sig = v23;
          if (v23 < 3 || !(v23 % 0x186A0))
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            {
              v65 = v65 & 0xFFFFFFFF00000000 | 0x3DA;
              rtc::webrtc_logging_impl::Log("\r\t", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_encode_metadata_writer.cc");
            }
            if (this[8].__sig == 2 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            {
              v60 = v60 & 0xFFFFFFFF00000000 | 0x3F2;
              rtc::webrtc_logging_impl::Log("\r\t", v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_encode_metadata_writer.cc");
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)this[1].__sig + 24))(this[1].__sig, 1);
          v38 = *(_QWORD *)&this[7].__opaque[16];
          if (v17 >= (*(_QWORD *)&this[7].__opaque[24] - v38) >> 5)
            break;
          v39 = v38 + 32 * v17;
          v40 = *(_QWORD *)(v39 + 24);
          if (!v40)
            break;
          v41 = v39 + 8;
          v42 = *(uint64_t **)(v41 + 8);
          v43 = *v42;
          *(_QWORD *)(v43 + 8) = v42[1];
          *(_QWORD *)v42[1] = v43;
          *(_QWORD *)(v41 + 16) = v40 - 1;
          v44 = v42[16];
          if (v44)
          {
            do
            {
              v45 = __ldaxr((unsigned int *)v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, (unsigned int *)v44));
            if (!v46)
            {
              v47 = *(_QWORD *)(v44 + 8);
              if (v47)
              {
                v48 = *(_QWORD *)(v44 + 16);
                v49 = *(void **)(v44 + 8);
                if (v48 != v47)
                {
                  do
                  {
                    v50 = *(void **)(v48 - 96);
                    if (v50)
                    {
                      *(_QWORD *)(v48 - 88) = v50;
                      operator delete(v50);
                    }
                    v48 -= 104;
                  }
                  while (v48 != v47);
                  v49 = *(void **)(v44 + 8);
                }
                *(_QWORD *)(v44 + 16) = v47;
                operator delete(v49);
                v11 = v61;
                v10 = v62;
              }
              MEMORY[0x20BD0ADEC](v44, 0x1020C40E72D6CFBLL);
              v12 = v63;
              v13 = v64;
            }
          }
          operator delete(v42);
          v21 = *(_QWORD *)&this[7].__opaque[16];
          v22 = (*(_QWORD *)&this[7].__opaque[24] - v21) >> 5;
          v18 = v66;
        }
        if (v22 <= v17)
          break;
        v51 = (char *)operator new(0x88uLL);
        *(_QWORD *)v51 = 0;
        *((_DWORD *)v51 + 4) = v8;
        *((_QWORD *)v51 + 3) = v18;
        *((_QWORD *)v51 + 4) = v67;
        *((_QWORD *)v51 + 5) = v12;
        *((_DWORD *)v51 + 12) = v13;
        v51[52] = 0;
        v51[120] = 0;
        if (v10)
        {
          v51[52] = v11;
          *(_OWORD *)(v51 + 53) = v68;
          *(_OWORD *)(v51 + 69) = v69;
          *(_OWORD *)(v51 + 85) = v70;
          *(_OWORD *)(v51 + 101) = v71;
          v51[120] = 1;
        }
        *((_QWORD *)v51 + 16) = v14;
        if (v14)
        {
          do
            v52 = __ldxr((unsigned int *)v14);
          while (__stxr(v52 + 1, (unsigned int *)v14));
        }
        v19 = (uint64_t *)(v21 + 32 * v17 + 8);
        *((_QWORD *)v51 + 1) = v19;
        v20 = *v19;
        *(_QWORD *)v51 = *v19;
        *(_QWORD *)(v20 + 8) = v51;
        *v19 = (uint64_t)v51;
        v19[2] = *(_QWORD *)(v21 + 32 * v17 + 24) + 1;
        v16 = *(_QWORD *)&this[7].__opaque[8];
      }
      if (++v17 >= v16)
        goto LABEL_44;
    }
    __break(1u);
  }
LABEL_44:
  if (v14)
  {
    do
    {
      v53 = __ldaxr((unsigned int *)v14);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, (unsigned int *)v14));
    if (!v54)
    {
      v55 = *(_QWORD *)(v14 + 8);
      if (v55)
      {
        v56 = *(_QWORD *)(v14 + 16);
        v57 = *(void **)(v14 + 8);
        if (v56 != v55)
        {
          do
          {
            v58 = *(void **)(v56 - 96);
            if (v58)
            {
              *(_QWORD *)(v56 - 88) = v58;
              operator delete(v58);
            }
            v56 -= 104;
          }
          while (v56 != v55);
          v57 = *(void **)(v14 + 8);
        }
        *(_QWORD *)(v14 + 16) = v55;
        operator delete(v57);
      }
      MEMORY[0x20BD0ADEC](v14, 0x1020C40E72D6CFBLL);
    }
  }
  return pthread_mutex_unlock(this);
}

uint64_t webrtc::FrameEncodeMetadataWriter::FillTimingInfo(pthread_mutex_t *this, unint64_t a2, webrtc::EncodedImage *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  pthread_mutex_lock(this);
  if (rtc::g_clock)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v6 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  webrtc::FrameEncodeMetadataWriter::ExtractEncodeStartTimeAndFillMetadata((webrtc::FrameEncodeMetadataWriter *)this, a2, a3);
  v9 = *(_QWORD *)&this[7].__opaque[16];
  if (a2 >= (*(_QWORD *)&this[7].__opaque[24] - v9) >> 5)
  {
    v10 = 0;
    v13 = *(_QWORD *)&this[7].__opaque[40];
    v14 = *((_QWORD *)a3 + 2);
    if (v13 == -1)
      goto LABEL_17;
  }
  else
  {
    v10 = 0;
    v11 = *(unsigned int *)this[7].__opaque;
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(v9 + 32 * a2);
      if (v12)
        v10 = 2 * (*((_QWORD *)a3 + 18) >= v12 / v11 * *(unsigned __int16 *)&this[6].__opaque[24] / 0x64);
    }
    v13 = *(_QWORD *)&this[7].__opaque[40];
    v14 = *((_QWORD *)a3 + 2);
    if (v13 == -1)
    {
LABEL_17:
      v10 |= 1u;
      *(_QWORD *)&this[7].__opaque[40] = v14;
      if (!v8)
        goto LABEL_18;
LABEL_16:
      *((_QWORD *)a3 + 6) = v7;
      *((_QWORD *)a3 + 7) = v6 / 1000000;
      *((_BYTE *)a3 + 40) = v10;
      return pthread_mutex_unlock(this);
    }
  }
  v15 = v14 - v13;
  if (!v15 || v15 >= *(_QWORD *)&this[6].__opaque[16])
    goto LABEL_17;
  if (v8)
    goto LABEL_16;
LABEL_18:
  *((_BYTE *)a3 + 40) = -1;
  return pthread_mutex_unlock(this);
}

void webrtc::FrameEncodeMetadataWriter::ExtractEncodeStartTimeAndFillMetadata(webrtc::FrameEncodeMetadataWriter *this, unint64_t a2, webrtc::EncodedImage *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;

  v3 = *((_QWORD *)this + 59);
  if (a2 >= (*((_QWORD *)this + 60) - v3) >> 5)
    return;
  v6 = v3 + 32 * a2;
  if (!*(_QWORD *)(v6 + 24))
  {
LABEL_23:
    *((_BYTE *)a3 + 32) = *((_DWORD *)this + 99) == 1;
LABEL_24:
    v21 = *((_QWORD *)this + 63) + 1;
    *((_QWORD *)this + 63) = v21;
    if (v21 < 3 || !(v21 % 0x186A0))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_encode_metadata_writer.cc");
      if (*((_QWORD *)this + 63) == 2 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/frame_encode_metadata_writer.cc");
    }
    return;
  }
  v7 = v6 + 8;
  while (1)
  {
    v9 = *((_DWORD *)a3 + 38);
    v10 = *(_QWORD *)(v7 + 8);
    v11 = *(_DWORD *)(v10 + 16);
    if (v9 - v11 != 0x80000000)
      break;
    if (v9 <= v11)
      goto LABEL_32;
LABEL_13:
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8), 1);
    v12 = *(_QWORD *)(v7 + 16);
    if (!v12)
      goto LABEL_68;
    v13 = *(uint64_t **)(v7 + 8);
    v14 = *v13;
    *(_QWORD *)(v14 + 8) = v13[1];
    *(_QWORD *)v13[1] = v14;
    *(_QWORD *)(v7 + 16) = v12 - 1;
    v15 = v13[16];
    if (v15)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v15));
      if (!v17)
      {
        v18 = *(_QWORD *)(v15 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v15 + 16);
          v8 = *(void **)(v15 + 8);
          if (v19 != v18)
          {
            do
            {
              v20 = *(void **)(v19 - 96);
              if (v20)
              {
                *(_QWORD *)(v19 - 88) = v20;
                operator delete(v20);
              }
              v19 -= 104;
            }
            while (v19 != v18);
            v8 = *(void **)(v15 + 8);
          }
          *(_QWORD *)(v15 + 16) = v18;
          operator delete(v8);
        }
        MEMORY[0x20BD0ADEC](v15, 0x1020C40E72D6CFBLL);
      }
    }
    operator delete(v13);
    if (!*(_QWORD *)(v7 + 16))
      goto LABEL_23;
  }
  if (v9 != v11 && ((v9 - v11) & 0x80000000) == 0)
    goto LABEL_13;
LABEL_32:
  *((_BYTE *)a3 + 32) = *((_DWORD *)this + 99) == 1;
  if (v9 != v11)
    goto LABEL_24;
  v36 = *(_QWORD *)(v10 + 40) / 1000;
  *((_QWORD *)a3 + 1) = *(_QWORD *)(v10 + 32);
  *((_QWORD *)a3 + 2) = v36;
  *((_DWORD *)a3 + 7) = *(_DWORD *)(v10 + 48);
  v37 = (_OWORD *)(v10 + 52);
  v38 = (_OWORD *)((char *)a3 + 224);
  if (*((unsigned __int8 *)a3 + 292) == *(unsigned __int8 *)(v10 + 120))
  {
    if (*((_BYTE *)a3 + 292))
    {
      *v38 = *v37;
      v39 = *(_OWORD *)(v10 + 68);
      v40 = *(_OWORD *)(v10 + 84);
      v41 = *(_OWORD *)(v10 + 100);
      *((_BYTE *)a3 + 288) = *(_BYTE *)(v10 + 116);
      *((_OWORD *)a3 + 16) = v40;
      *((_OWORD *)a3 + 17) = v41;
      *((_OWORD *)a3 + 15) = v39;
    }
  }
  else if (*((_BYTE *)a3 + 292))
  {
    *((_BYTE *)a3 + 292) = 0;
  }
  else
  {
    *v38 = *v37;
    v42 = *(_OWORD *)(v10 + 68);
    v43 = *(_OWORD *)(v10 + 84);
    v44 = *(_OWORD *)(v10 + 100);
    *((_BYTE *)a3 + 288) = *(_BYTE *)(v10 + 116);
    *((_OWORD *)a3 + 16) = v43;
    *((_OWORD *)a3 + 17) = v44;
    *((_OWORD *)a3 + 15) = v42;
    *((_BYTE *)a3 + 292) = 1;
  }
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_68;
  v45 = *(unsigned int **)(*(_QWORD *)(v7 + 8) + 128);
  if (v45)
  {
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = *((_QWORD *)a3 + 38);
  *((_QWORD *)a3 + 38) = v45;
  if (v47)
  {
    do
    {
      v48 = __ldaxr((unsigned int *)v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, (unsigned int *)v47));
    if (!v49)
    {
      v50 = *(_QWORD *)(v47 + 8);
      if (v50)
      {
        v51 = *(_QWORD *)(v47 + 16);
        v52 = *(void **)(v47 + 8);
        if (v51 != v50)
        {
          do
          {
            v53 = *(void **)(v51 - 96);
            if (v53)
            {
              *(_QWORD *)(v51 - 88) = v53;
              operator delete(v53);
            }
            v51 -= 104;
          }
          while (v51 != v50);
          v52 = *(void **)(v47 + 8);
        }
        *(_QWORD *)(v47 + 16) = v50;
        operator delete(v52);
      }
      MEMORY[0x20BD0ADEC](v47, 0x1020C40E72D6CFBLL);
    }
  }
  v54 = *(_QWORD *)(v7 + 16);
  if (!v54)
  {
LABEL_68:
    __break(1u);
    return;
  }
  v55 = *(uint64_t **)(v7 + 8);
  v56 = *v55;
  *(_QWORD *)(v56 + 8) = v55[1];
  *(_QWORD *)v55[1] = v56;
  *(_QWORD *)(v7 + 16) = v54 - 1;
  v57 = v55[16];
  if (v57)
  {
    do
    {
      v58 = __ldaxr((unsigned int *)v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, (unsigned int *)v57));
    if (!v59)
    {
      v60 = *(_QWORD *)(v57 + 8);
      if (v60)
      {
        v61 = *(_QWORD *)(v57 + 16);
        v62 = *(void **)(v57 + 8);
        if (v61 != v60)
        {
          do
          {
            v63 = *(void **)(v61 - 96);
            if (v63)
            {
              *(_QWORD *)(v61 - 88) = v63;
              operator delete(v63);
            }
            v61 -= 104;
          }
          while (v61 != v60);
          v62 = *(void **)(v57 + 8);
        }
        *(_QWORD *)(v57 + 16) = v60;
        operator delete(v62);
      }
      MEMORY[0x20BD0ADEC](v57, 0x1020C40E72D6CFBLL);
    }
  }
  operator delete(v55);
}

void webrtc::FrameEncodeMetadataWriter::UpdateBitstream(webrtc::FrameEncodeMetadataWriter *this, const webrtc::CodecSpecificInfo *a2, webrtc::EncodedImage *a3)
{
  webrtc::H264 *v4;
  const unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if (a2 && *(_DWORD *)a2 == 4 && *((_DWORD *)a3 + 6) == 3)
  {
    v4 = (webrtc::H264 *)*((_QWORD *)a3 + 17);
    if (v4)
      v4 = (webrtc::H264 *)(*(uint64_t (**)(webrtc::H264 *))(*(_QWORD *)v4 + 40))(v4);
    v5 = (const unsigned __int8 *)*((_QWORD *)a3 + 18);
    if (*((_BYTE *)a3 + 292))
      v6 = (unsigned __int8 *)a3 + 224;
    else
      v6 = 0;
    if (!v5)
      v4 = 0;
    webrtc::SpsVuiRewriter::ParseOutgoingBitstreamAndRewrite(v4, v5, v6, (size_t *)&v18);
    v7 = operator new();
    v8 = v18;
    *(_OWORD *)(v7 + 8) = v18;
    v9 = v19;
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0;
    *(_QWORD *)(v7 + 24) = v9;
    *(_QWORD *)&v18 = 0;
    *(_QWORD *)v7 = off_24C0B4670;
    *(_DWORD *)(v7 + 32) = 0;
    v10 = (unsigned int *)(v7 + 32);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
    v13 = *((_QWORD *)a3 + 17);
    if (v13)
    {
      v17 = v8;
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v8 = v17;
    }
    *((_QWORD *)a3 + 17) = v7;
    *((_QWORD *)a3 + 18) = v8;
    do
    {
      v14 = __ldaxr(v10);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v10));
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    v16 = v19;
    v19 = 0;
    if (v16)
      MEMORY[0x20BD0ADD4](v16, 0x1000C8077774924);
  }
}

uint64_t webrtc::FrameEncodeMetadataWriter::Reset(pthread_mutex_t *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;

  pthread_mutex_lock(this);
  v2 = *(_QWORD **)&this[7].__opaque[16];
  v3 = *(_QWORD **)&this[7].__opaque[24];
  while (v2 != v3)
  {
    if (v2[3])
    {
      v4 = v2[1];
      v5 = (uint64_t *)v2[2];
      v6 = *v5;
      *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
      **(_QWORD **)(v4 + 8) = v6;
      v2[3] = 0;
      if (v5 != v2 + 1)
      {
        do
        {
          v7 = (uint64_t *)v5[1];
          v8 = v5[16];
          if (v8)
          {
            do
            {
              v9 = __ldaxr((unsigned int *)v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, (unsigned int *)v8));
            if (!v10)
            {
              v11 = *(_QWORD *)(v8 + 8);
              if (v11)
              {
                v12 = *(_QWORD *)(v8 + 16);
                v13 = *(void **)(v8 + 8);
                if (v12 != v11)
                {
                  do
                  {
                    v14 = *(void **)(v12 - 96);
                    if (v14)
                    {
                      *(_QWORD *)(v12 - 88) = v14;
                      operator delete(v14);
                    }
                    v12 -= 104;
                  }
                  while (v12 != v11);
                  v13 = *(void **)(v8 + 8);
                }
                *(_QWORD *)(v8 + 16) = v11;
                operator delete(v13);
                MEMORY[0x20BD0ADEC](v8, 0x1020C40E72D6CFBLL);
                if (!v5)
                {
                  __break(1u);
                  goto LABEL_21;
                }
              }
              else
              {
                MEMORY[0x20BD0ADEC](v8, 0x1020C40E72D6CFBLL);
              }
            }
          }
          operator delete(v5);
          v5 = v7;
        }
        while (v7 != v2 + 1);
      }
    }
    v2 += 4;
  }
LABEL_21:
  *(_QWORD *)&this[7].__opaque[48] = 0;
  this[8].__sig = 0;
  *(_QWORD *)&this[7].__opaque[40] = -1;
  return pthread_mutex_unlock(this);
}

void std::vector<webrtc::FrameEncodeMetadataWriter::TimingFramesLayerInfo>::__base_destruct_at_end[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 == a2)
  {
LABEL_2:
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  while (1)
  {
    if (*(_QWORD *)(v4 - 8))
    {
      v5 = *(_QWORD *)(v4 - 24);
      v6 = *(uint64_t **)(v4 - 16);
      v7 = *v6;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
      **(_QWORD **)(v5 + 8) = v7;
      *(_QWORD *)(v4 - 8) = 0;
      if (v6 != (uint64_t *)(v4 - 24))
        break;
    }
LABEL_3:
    v4 -= 32;
    if (v4 == a2)
      goto LABEL_2;
  }
  while (1)
  {
    v8 = (uint64_t *)v6[1];
    v9 = v6[16];
    if (!v9)
      goto LABEL_8;
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (v11)
      goto LABEL_8;
    v12 = *(_QWORD *)(v9 + 8);
    if (v12)
      break;
    MEMORY[0x20BD0ADEC](v9, 0x1020C40E72D6CFBLL);
LABEL_8:
    operator delete(v6);
    v6 = v8;
    if (v8 == (uint64_t *)(v4 - 24))
      goto LABEL_3;
  }
  v13 = *(_QWORD *)(v9 + 16);
  v14 = *(void **)(v9 + 8);
  if (v13 != v12)
  {
    do
    {
      v15 = *(void **)(v13 - 96);
      if (v15)
      {
        *(_QWORD *)(v13 - 88) = v15;
        operator delete(v15);
      }
      v13 -= 104;
    }
    while (v13 != v12);
    v14 = *(void **)(v9 + 8);
  }
  *(_QWORD *)(v9 + 16) = v12;
  operator delete(v14);
  MEMORY[0x20BD0ADEC](v9, 0x1020C40E72D6CFBLL);
  if (v6)
    goto LABEL_8;
  __break(1u);
}

void std::vector<webrtc::FrameEncodeMetadataWriter::TimingFramesLayerInfo>::__append(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unsigned int *v27;
  unsigned int v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  char *v41;

  v2 = a2;
  v5 = (_QWORD *)a1[1];
  v4 = a1[2];
  if (a2 <= (uint64_t)(v4 - (_QWORD)v5) >> 5)
  {
    if (!a2)
    {
LABEL_16:
      a1[1] = (unint64_t)v5;
      return;
    }
    v12 = &v5[4 * a2];
    while (v5)
    {
      *v5 = 0;
      v5[1] = v5 + 1;
      v5[2] = v5 + 1;
      v5[3] = 0;
      v5 += 4;
      if (v5 == v12)
      {
        v5 = v12;
        goto LABEL_16;
      }
    }
  }
  else
  {
    v6 = (_QWORD *)*a1;
    v7 = (uint64_t)((uint64_t)v5 - *a1) >> 5;
    v8 = v7 + a2;
    if ((v7 + a2) >> 59)
      abort();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 59)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v11 = (char *)operator new(32 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[32 * v7];
    v14 = &v11[32 * v10];
    v15 = &v13[32 * v2];
    v16 = v13;
    while (v16)
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = v16 + 8;
      *((_QWORD *)v16 + 2) = v16 + 8;
      *((_QWORD *)v16 + 3) = 0;
      v16 += 32;
      if (v16 == v15)
      {
        v41 = v14;
        if (v5 == v6)
        {
          v17 = &v11[32 * v7];
        }
        else
        {
          v17 = &v11[32 * v7];
          do
          {
            v18 = *(v5 - 4);
            v5 -= 4;
            *((_QWORD *)v17 - 4) = v18;
            v17 -= 32;
            *((_QWORD *)v17 + 1) = v17 + 8;
            *((_QWORD *)v17 + 2) = v17 + 8;
            *((_QWORD *)v17 + 3) = 0;
            for (i = v5[2]; (_QWORD *)i != v5 + 1; i = *(_QWORD *)(i + 8))
            {
              v21 = (char *)operator new(0x88uLL);
              *(_QWORD *)v21 = 0;
              *((_QWORD *)v21 + 1) = 0;
              v23 = *(_OWORD *)(i + 16);
              v22 = *(_OWORD *)(i + 32);
              *((_DWORD *)v21 + 12) = *(_DWORD *)(i + 48);
              *((_OWORD *)v21 + 1) = v23;
              *((_OWORD *)v21 + 2) = v22;
              v21[52] = 0;
              v21[120] = 0;
              if (*(_BYTE *)(i + 120))
              {
                *(_OWORD *)(v21 + 52) = *(_OWORD *)(i + 52);
                v24 = *(_OWORD *)(i + 68);
                v25 = *(_OWORD *)(i + 84);
                v26 = *(_OWORD *)(i + 100);
                v21[116] = *(_BYTE *)(i + 116);
                *(_OWORD *)(v21 + 84) = v25;
                *(_OWORD *)(v21 + 100) = v26;
                *(_OWORD *)(v21 + 68) = v24;
                v21[120] = 1;
              }
              v27 = *(unsigned int **)(i + 128);
              *((_QWORD *)v21 + 16) = v27;
              if (v27)
              {
                do
                  v28 = __ldxr(v27);
                while (__stxr(v28 + 1, v27));
              }
              v20 = *((_QWORD *)v13 - 3);
              *(_QWORD *)v21 = v20;
              *((_QWORD *)v21 + 1) = v17 + 8;
              *(_QWORD *)(v20 + 8) = v21;
              *((_QWORD *)v13 - 3) = v21;
              ++*((_QWORD *)v13 - 1);
            }
            v13 = v17;
          }
          while (v5 != v6);
        }
        v2 = *a1;
        v29 = (char *)a1[1];
        *a1 = (unint64_t)v17;
        a1[1] = (unint64_t)v15;
        a1[2] = (unint64_t)v41;
        while (v29 != (char *)v2)
        {
          if (*((_QWORD *)v29 - 1))
          {
            v30 = *((_QWORD *)v29 - 3);
            v31 = (char *)*((_QWORD *)v29 - 2);
            v32 = *(_QWORD *)v31;
            *(_QWORD *)(v32 + 8) = *(_QWORD *)(v30 + 8);
            **(_QWORD **)(v30 + 8) = v32;
            *((_QWORD *)v29 - 1) = 0;
            if (v31 != v29 - 24)
            {
              do
              {
                v33 = (char *)*((_QWORD *)v31 + 1);
                v34 = *((_QWORD *)v31 + 16);
                if (v34)
                {
                  do
                  {
                    v35 = __ldaxr((unsigned int *)v34);
                    v36 = v35 - 1;
                  }
                  while (__stlxr(v36, (unsigned int *)v34));
                  if (!v36)
                  {
                    v37 = *(_QWORD *)(v34 + 8);
                    if (v37)
                    {
                      v38 = *(_QWORD *)(v34 + 16);
                      v39 = *(void **)(v34 + 8);
                      if (v38 != v37)
                      {
                        do
                        {
                          v40 = *(void **)(v38 - 96);
                          if (v40)
                          {
                            *(_QWORD *)(v38 - 88) = v40;
                            operator delete(v40);
                          }
                          v38 -= 104;
                        }
                        while (v38 != v37);
                        v39 = *(void **)(v34 + 8);
                      }
                      *(_QWORD *)(v34 + 16) = v37;
                      operator delete(v39);
                      MEMORY[0x20BD0ADEC](v34, 0x1020C40E72D6CFBLL);
                      if (!v31)
                        goto LABEL_52;
                    }
                    else
                    {
                      MEMORY[0x20BD0ADEC](v34, 0x1020C40E72D6CFBLL);
                    }
                  }
                }
                operator delete(v31);
                v31 = v33;
              }
              while (v33 != v29 - 24);
            }
          }
          v29 -= 32;
        }
        goto LABEL_53;
      }
    }
  }
LABEL_52:
  __break(1u);
LABEL_53:
  if (v2)
    operator delete((void *)v2);
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::EncodedImageBufferWrapper>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::EncodedImageBufferWrapper>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 8;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::`anonymous namespace'::EncodedImageBufferWrapper>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C0B46C0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  return a1;
}

void rtc::RefCountedObject<webrtc::`anonymous namespace'::EncodedImageBufferWrapper>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C0B46C0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::EncodedImageBufferWrapper::data(webrtc::_anonymous_namespace_::EncodedImageBufferWrapper *this)
{
  return *((_QWORD *)this + 3);
}

{
  return *((_QWORD *)this + 3);
}

uint64_t webrtc::`anonymous namespace'::EncodedImageBufferWrapper::size(webrtc::_anonymous_namespace_::EncodedImageBufferWrapper *this)
{
  return *((_QWORD *)this + 1);
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::EncodedImageBufferWrapper>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 32));
  return v1 == 1;
}

uint64_t *webrtc::CombineAndDeleteFrames@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  size_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  char *v24;
  uint64_t *v25;
  uint64_t **v26;
  int v27;
  uint64_t *v28;
  uint64_t **v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  const void *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t **v48;
  int v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;

  v57 = result;
  v3 = result + 1;
  v2 = *result;
  v4 = (unint64_t)*result >> 1;
  if (v4 == 1)
  {
    if ((v2 & 1) != 0)
      v3 = (uint64_t *)*v3;
    v5 = (uint64_t *)*v3;
    *v3 = 0;
    *a2 = v5;
    return result;
  }
  v6 = result + 1;
  if ((v2 & 1) != 0)
    v6 = (uint64_t *)*v3;
  if (v2 < 2)
  {
    __break(1u);
    return result;
  }
  v7 = (v4 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = v7 + 1;
    v11 = (v7 + 1) & 0x3FFFFFFFFFFFFFFELL;
    v12 = &v6[v11];
    v13 = v6 + 1;
    v14 = v11;
    do
    {
      v8 += *(_QWORD *)(*(v13 - 1) + 152);
      v9 += *(_QWORD *)(*v13 + 152);
      v13 += 2;
      v14 -= 2;
    }
    while (v14);
    v15 = v9 + v8;
    if (v10 == v11)
      goto LABEL_16;
  }
  else
  {
    v15 = 0;
    v12 = v6;
  }
  v16 = &v6[v4];
  do
  {
    v17 = *v12++;
    v15 += *(_QWORD *)(v17 + 152);
  }
  while (v12 != v16);
LABEL_16:
  v18 = v3;
  if ((v2 & 1) != 0)
    v18 = (uint64_t *)*v3;
  v19 = (_QWORD *)v18[v4 - 1];
  v20 = *v18;
  *v18 = 0;
  *a2 = (uint64_t *)v20;
  v21 = operator new();
  *(_QWORD *)(v21 + 8) = v15;
  *(_QWORD *)(v21 + 16) = malloc_type_malloc(v15, 0xB64CC8DFuLL);
  *(_QWORD *)v21 = &unk_24C0B3A40;
  *(_DWORD *)(v21 + 24) = 0;
  v22 = (unsigned int *)(v21 + 24);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  v56 = v21;
  v24 = (char *)webrtc::EncodedImageBuffer::data((webrtc::EncodedImageBuffer *)v21);
  v26 = (uint64_t **)(v20 + 216);
  v25 = *(uint64_t **)(v20 + 216);
  if ((*(_QWORD *)(v20 + 192) & 0xFF00000000) != 0)
    v27 = *(_QWORD *)(v20 + 192);
  else
    v27 = 0;
  v28 = *(uint64_t **)(v20 + 152);
  v29 = (uint64_t **)(v20 + 216);
  if (v25)
  {
    while (1)
    {
      while (1)
      {
        v26 = (uint64_t **)v25;
        v30 = *((_DWORD *)v25 + 8);
        if (v30 <= v27)
          break;
        v25 = *v26;
        v29 = v26;
        if (!*v26)
          goto LABEL_30;
      }
      if (v30 >= v27)
        break;
      v25 = v26[1];
      if (!v25)
      {
        v29 = v26 + 1;
        goto LABEL_30;
      }
    }
  }
  else
  {
LABEL_30:
    v31 = (uint64_t *)v26;
    v26 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v26 + 8) = v27;
    v26[5] = 0;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = v31;
    *v29 = (uint64_t *)v26;
    v32 = **(_QWORD **)(v20 + 208);
    v33 = (uint64_t *)v26;
    if (v32)
    {
      *(_QWORD *)(v20 + 208) = v32;
      v33 = *v29;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v20 + 216), v33);
    ++*(_QWORD *)(v20 + 224);
  }
  v26[5] = v28;
  v34 = *(_QWORD *)(v20 + 144);
  if (v34)
    v35 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
  else
    v35 = 0;
  memcpy(v24, v35, *(_QWORD *)(v20 + 152));
  v36 = *(_QWORD *)(v20 + 152);
  if ((v19[24] & 0xFF00000000) != 0)
    v37 = v19[24];
  else
    v37 = 0;
  *(_BYTE *)(v20 + 196) = 1;
  *(_DWORD *)(v20 + 192) = v37;
  *(_QWORD *)(v20 + 96) = v19[12];
  *(_QWORD *)(v20 + 112) = v19[14];
  v38 = *v57;
  if ((unint64_t)*v57 >= 4)
  {
    v39 = &v24[v36];
    v40 = 1;
    do
    {
      v42 = v3;
      if ((v38 & 1) != 0)
        v42 = (_QWORD *)*v3;
      v43 = (_QWORD *)v42[v40];
      v42[v40] = 0;
      if ((v43[24] & 0xFF00000000) != 0)
        v44 = v43[24];
      else
        v44 = 0;
      v45 = (uint64_t *)v43[19];
      v46 = (uint64_t **)(v20 + 216);
      while (1)
      {
        v47 = *v46;
        v48 = v46;
        if (!*v46)
          break;
        while (1)
        {
          v46 = (uint64_t **)v47;
          v49 = *((_DWORD *)v47 + 8);
          if (v49 > v44)
            break;
          if (v49 >= v44)
            goto LABEL_57;
          v47 = v46[1];
          if (!v47)
          {
            v48 = v46 + 1;
            goto LABEL_54;
          }
        }
      }
LABEL_54:
      v50 = v3;
      v51 = (uint64_t *)v46;
      v46 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v46 + 8) = v44;
      v46[5] = 0;
      *v46 = 0;
      v46[1] = 0;
      v46[2] = v51;
      *v48 = (uint64_t *)v46;
      v52 = **(_QWORD **)(v20 + 208);
      v53 = (uint64_t *)v46;
      if (v52)
      {
        *(_QWORD *)(v20 + 208) = v52;
        v53 = *v48;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v20 + 216), v53);
      ++*(_QWORD *)(v20 + 224);
      v3 = v50;
LABEL_57:
      v46[5] = v45;
      v54 = v43[18];
      if (v54)
        v41 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
      else
        v41 = 0;
      memcpy(v39, v41, v43[19]);
      v39 += v43[19];
      (*(void (**)(_QWORD *))(*v43 + 8))(v43);
      ++v40;
      v38 = *v57;
    }
    while (v40 < (unint64_t)*v57 >> 1);
  }
  rtc::RefCountedObject<webrtc::EncodedImageBuffer>::AddRef(v56);
  (**(void (***)(uint64_t))v56)(v56);
  v55 = *(_QWORD *)(v20 + 144);
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  *(_QWORD *)(v20 + 144) = v56;
  *(_QWORD *)(v20 + 152) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 48))(v56);
  (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
}

uint64_t webrtc::RtpFrameObject::RtpFrameObject(uint64_t a1, __int16 a2, __int16 a3, char a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, unsigned __int16 *a10, char a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t *a17, void (****a18)(_QWORD))
{
  _QWORD *v19;
  void (***v20)(_QWORD);
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  unsigned __int8 v54;
  char v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v81;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v81 = a1 + 304;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 4;
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = -1;
  *(_BYTE *)(a1 + 48) = -1;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 196) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v19 = (_QWORD *)(a1 + 144);
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 157) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_BYTE *)(a1 + 232) = 0;
  v74 = a1 + 232;
  *(_BYTE *)(a1 + 300) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 306) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_WORD *)(a1 + 320) = 1;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 376) = 1;
  *(_QWORD *)(a1 + 384) = -1;
  *(_BYTE *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 2032) = 1;
  *(_BYTE *)(a1 + 2040) = 0;
  *(_BYTE *)(a1 + 2248) = 0;
  *(_BYTE *)(a1 + 2256) = 0;
  *(_BYTE *)(a1 + 2384) = 0;
  *(_WORD *)(a1 + 2392) = 0;
  bzero((void *)(a1 + 408), 0x658uLL);
  *(_DWORD *)(a1 + 2400) = 0;
  *(_QWORD *)(a1 + 2408) = -1;
  *(_QWORD *)a1 = off_24C0B4818;
  v20 = *a18;
  *(_QWORD *)(a1 + 2416) = *a18;
  if (v20)
    (**v20)(v20);
  *(_BYTE *)(a1 + 2424) = 0;
  *(_BYTE *)(a1 + 2568) = 0;
  *(_QWORD *)(a1 + 2576) = 0;
  *(_QWORD *)(a1 + 2583) = 0;
  *(_WORD *)(a1 + 2591) = 1;
  *(_DWORD *)(a1 + 2596) = 0;
  *(_BYTE *)(a1 + 2600) = 0;
  *(_BYTE *)(a1 + 2616) = 0;
  *(_QWORD *)(a1 + 2630) = 0;
  *(_QWORD *)(a1 + 2624) = 0;
  *(_BYTE *)(a1 + 2636) = -1;
  v21 = (_OWORD *)(a1 + 2640);
  *(_BYTE *)(a1 + 2640) = 0;
  *(_BYTE *)(a1 + 2708) = 0;
  *(_BYTE *)(a1 + 2712) = 0;
  *(_BYTE *)(a1 + 2714) = 0;
  *(_QWORD *)(a1 + 4360) = 0;
  *(_BYTE *)(v81 + 4064) = 0;
  *(_BYTE *)(v81 + 4088) = 0;
  *(_WORD *)(a1 + 4404) = a2;
  *(_WORD *)(a1 + 4406) = a3;
  *(_QWORD *)(a1 + 4408) = a7;
  *(_QWORD *)(a1 + 4432) = 0;
  *(_OWORD *)(a1 + 4416) = 0u;
  *(_DWORD *)(a1 + 4440) = a5;
  std::__optional_storage_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false> const&>(a1 + 2424, a15);
  v22 = *(_OWORD *)(a15 + 152);
  v23 = *(_OWORD *)(a15 + 168);
  v24 = *(_OWORD *)(a15 + 184);
  *(_OWORD *)(a1 + 2621) = *(_OWORD *)(a15 + 197);
  *(_OWORD *)(a1 + 2608) = v24;
  *(_OWORD *)(a1 + 2592) = v23;
  *(_OWORD *)(a1 + 2576) = v22;
  v25 = (_OWORD *)(a15 + 216);
  if (*(unsigned __int8 *)(a1 + 2708) == *(unsigned __int8 *)(a15 + 284))
  {
    if (*(_BYTE *)(a1 + 2708))
    {
      *v21 = *v25;
      v26 = *(_OWORD *)(a15 + 232);
      v27 = *(_OWORD *)(a15 + 248);
      v28 = *(_OWORD *)(a15 + 264);
      *(_BYTE *)(a1 + 2704) = *(_BYTE *)(a15 + 280);
      *(_OWORD *)(a1 + 2672) = v27;
      *(_OWORD *)(a1 + 2688) = v28;
      *(_OWORD *)(a1 + 2656) = v26;
    }
  }
  else if (*(_BYTE *)(a1 + 2708))
  {
    *(_BYTE *)(a1 + 2708) = 0;
  }
  else
  {
    *v21 = *v25;
    v29 = *(_OWORD *)(a15 + 232);
    v30 = *(_OWORD *)(a15 + 248);
    v31 = *(_OWORD *)(a15 + 264);
    *(_BYTE *)(a1 + 2704) = *(_BYTE *)(a15 + 280);
    *(_OWORD *)(a1 + 2672) = v30;
    *(_OWORD *)(a1 + 2688) = v31;
    *(_OWORD *)(a1 + 2656) = v29;
    *(_BYTE *)(a1 + 2708) = 1;
  }
  memcpy((void *)(a1 + 2712), (const void *)(a15 + 288), 0x691uLL);
  *(_DWORD *)(a1 + 4400) = a12;
  webrtc::EncodedFrame::CopyCodecSpecific(a1, a1 + 2424, v32, v33, v34, v35, v36, v37);
  *(_BYTE *)(a1 + 392) = a11;
  *(_DWORD *)(a1 + 160) = a8;
  *(_QWORD *)(a1 + 16) = a9;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 2576);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a1 + 2600);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a1 + 2616);
  v38 = *(_QWORD *)(a1 + 2416);
  if (v38)
  {
    (**(void (***)(_QWORD))v38)(*(_QWORD *)(a1 + 2416));
    (**(void (***)(uint64_t))v38)(v38);
  }
  if (*v19)
    (*(void (**)(_QWORD))(*(_QWORD *)*v19 + 8))(*v19);
  *(_QWORD *)(a1 + 144) = v38;
  *(_QWORD *)(a1 + 152) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38);
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *(unsigned __int16 *)(a1 + 2582);
  *(_DWORD *)(a1 + 8) = *(unsigned __int16 *)(a1 + 2580);
  *(_DWORD *)(a1 + 12) = v39;
  if (*a17)
  {
    v40 = a16;
    if (*(_QWORD *)(*a17 + 8) == *(_QWORD *)(*a17 + 16))
      goto LABEL_25;
  }
  else
  {
    {
      v71 = operator new();
      *(_QWORD *)(v71 + 8) = 0;
      *(_QWORD *)(v71 + 16) = 0;
      *(_QWORD *)v71 = 0;
      webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v71;
    }
    v42 = *(_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value;
    if (*a17)
    {
      v40 = a16;
      if (v42 == *(_QWORD *)(*a17 + 16))
        goto LABEL_25;
    }
    else
    {
      if ((v43 & 1) == 0
      {
        v73 = operator new();
        *(_QWORD *)(v73 + 8) = 0;
        *(_QWORD *)(v73 + 16) = 0;
        *(_QWORD *)v73 = 0;
        webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v73;
      }
      v40 = a16;
      if (v42 == *((_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value + 1))
        goto LABEL_25;
    }
  }
  v44 = a1 + 4416;
  if (*a17)
  {
    v45 = *(_QWORD *)(*a17 + 8);
    if (v44 != v45 + 8)
LABEL_24:
      std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>((_QWORD *)(a1 + 4416), *(char **)(v45 + 8), *(char **)(v45 + 16), (uint64_t)(*(_QWORD *)(v45 + 16) - *(_QWORD *)(v45 + 8)) >> 2);
  }
  else
  {
    {
      v72 = operator new();
      *(_QWORD *)(v72 + 8) = 0;
      *(_QWORD *)(v72 + 16) = 0;
      *(_QWORD *)v72 = 0;
      webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v72;
    }
    v45 = *(_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value;
    if (v44 != *(_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value + 8)
      goto LABEL_24;
  }
LABEL_25:
  v46 = *a17;
  *a17 = 0;
  v47 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v46;
  if (v47)
  {
    do
    {
      v48 = __ldaxr((unsigned int *)v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, (unsigned int *)v47));
    if (!v49)
    {
      v50 = *(_QWORD *)(v47 + 8);
      if (v50)
      {
        v51 = *(_QWORD *)(v47 + 16);
        v52 = *(void **)(v47 + 8);
        if (v51 != v50)
        {
          do
          {
            v53 = *(void **)(v51 - 96);
            if (v53)
            {
              *(_QWORD *)(v51 - 88) = v53;
              operator delete(v53);
            }
            v51 -= 104;
          }
          while (v51 != v50);
          v52 = *(void **)(v47 + 8);
        }
        *(_QWORD *)(v47 + 16) = v50;
        operator delete(v52);
      }
      MEMORY[0x20BD0ADEC](v47, 0x1020C40E72D6CFBLL);
    }
  }
  *(_DWORD *)(a1 + 36) = a13;
  if (*(unsigned __int8 *)(a1 + 300) == *(unsigned __int8 *)(v40 + 68))
  {
    v55 = a4;
    v56 = a6;
    if (*(_BYTE *)(a1 + 300))
    {
      *(_OWORD *)v74 = *(_OWORD *)v40;
      v57 = *(_OWORD *)(v40 + 16);
      v58 = *(_OWORD *)(v40 + 32);
      v59 = *(_OWORD *)(v40 + 48);
      *(_BYTE *)(v74 + 64) = *(_BYTE *)(v40 + 64);
      *(_OWORD *)(v74 + 32) = v58;
      *(_OWORD *)(v74 + 48) = v59;
      *(_OWORD *)(v74 + 16) = v57;
    }
  }
  else
  {
    v55 = a4;
    v56 = a6;
    if (*(_BYTE *)(a1 + 300))
    {
      *(_BYTE *)(a1 + 300) = 0;
    }
    else
    {
      *(_OWORD *)v74 = *(_OWORD *)v40;
      v60 = *(_OWORD *)(v40 + 16);
      v61 = *(_OWORD *)(v40 + 32);
      v62 = *(_OWORD *)(v40 + 48);
      *(_BYTE *)(v74 + 64) = *(_BYTE *)(v40 + 64);
      *(_OWORD *)(v74 + 32) = v61;
      *(_OWORD *)(v74 + 48) = v62;
      *(_OWORD *)(v74 + 16) = v60;
      *(_BYTE *)(a1 + 300) = 1;
    }
  }
  v63 = *(_DWORD *)(a1 + 2712);
  *(_WORD *)v81 = v63;
  *(_BYTE *)(v81 + 2) = BYTE2(v63);
  *(_BYTE *)(a1 + 40) = a14;
  v64 = *((unsigned __int8 *)a10 + 12);
  if (v64 != 255)
  {
    v65 = *(_QWORD *)(a1 + 16);
    v66 = v65 + a10[1];
    *(_QWORD *)(a1 + 56) = v65 + *a10;
    *(_QWORD *)(a1 + 64) = v66;
    v67 = v65 + a10[3];
    *(_QWORD *)(a1 + 72) = v65 + a10[2];
    *(_QWORD *)(a1 + 80) = v67;
    v68 = v65 + a10[4];
    v69 = v65 + a10[5];
    *(_QWORD *)(a1 + 88) = v68;
    *(_QWORD *)(a1 + 96) = v69;
  }
  *(_QWORD *)(a1 + 104) = v56;
  *(_QWORD *)(a1 + 112) = a7;
  *(_BYTE *)(a1 + 48) = v64;
  *(_BYTE *)(a1 + 376) = v55;
  return a1;
}

void webrtc::RtpFrameObject::~RtpFrameObject(webrtc::RtpFrameObject *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24C0B4818;
  v2 = (void *)*((_QWORD *)this + 552);
  if (v2)
  {
    *((_QWORD *)this + 553) = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 2568))
  {
    if ((*((_BYTE *)this + 2536) & 1) != 0)
    {
      operator delete(*((void **)this + 318));
      if ((*((_BYTE *)this + 2488) & 1) == 0)
      {
LABEL_6:
        if ((*((_BYTE *)this + 2440) & 1) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
    else if ((*((_BYTE *)this + 2488) & 1) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*((void **)this + 312));
    if ((*((_BYTE *)this + 2440) & 1) != 0)
LABEL_7:
      operator delete(*((void **)this + 306));
  }
LABEL_8:
  v3 = *((_QWORD *)this + 302);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_24C0B39C0;
  if (*((_BYTE *)this + 2384))
    webrtc::FrameDependencyStructure::~FrameDependencyStructure((webrtc::RtpFrameObject *)((char *)this + 2256));
  if (*((_BYTE *)this + 2248))
    webrtc::GenericFrameInfo::~GenericFrameInfo((webrtc::RtpFrameObject *)((char *)this + 2040));
  webrtc::EncodedImage::~EncodedImage((webrtc::RtpFrameObject *)((char *)this + 8));
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24C0B4818;
  v2 = (void *)*((_QWORD *)this + 552);
  if (v2)
  {
    *((_QWORD *)this + 553) = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 2568))
  {
    if ((*((_BYTE *)this + 2536) & 1) != 0)
    {
      operator delete(*((void **)this + 318));
      if ((*((_BYTE *)this + 2488) & 1) == 0)
      {
LABEL_6:
        if ((*((_BYTE *)this + 2440) & 1) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
    else if ((*((_BYTE *)this + 2488) & 1) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*((void **)this + 312));
    if ((*((_BYTE *)this + 2440) & 1) != 0)
LABEL_7:
      operator delete(*((void **)this + 306));
  }
LABEL_8:
  v3 = *((_QWORD *)this + 302);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_24C0B39C0;
  if (*((_BYTE *)this + 2384))
    webrtc::FrameDependencyStructure::~FrameDependencyStructure((webrtc::RtpFrameObject *)((char *)this + 2256));
  if (*((_BYTE *)this + 2248))
    webrtc::GenericFrameInfo::~GenericFrameInfo((webrtc::RtpFrameObject *)((char *)this + 2040));
  webrtc::EncodedImage::~EncodedImage((webrtc::RtpFrameObject *)((char *)this + 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtpFrameObject::ReceivedTime(webrtc::RtpFrameObject *this)
{
  return *((_QWORD *)this + 551);
}

uint64_t webrtc::RtpFrameObject::RenderTime(webrtc::RtpFrameObject *this)
{
  return *((_QWORD *)this + 48);
}

BOOL webrtc::RtpFrameObject::delayed_by_retransmission(webrtc::RtpFrameObject *this)
{
  return *((_DWORD *)this + 1110) > 0;
}

void std::__optional_storage_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false> const&>(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (*(unsigned __int8 *)(a1 + 144) != *(unsigned __int8 *)(a2 + 144))
  {
    if (*(_BYTE *)(a1 + 144))
    {
      if ((*(_BYTE *)(a1 + 112) & 1) != 0)
      {
        operator delete(*(void **)(a1 + 120));
        if ((*(_BYTE *)(a1 + 64) & 1) == 0)
        {
LABEL_19:
          if ((*(_BYTE *)(a1 + 16) & 1) == 0)
          {
LABEL_21:
            *(_BYTE *)(a1 + 144) = 0;
            return;
          }
LABEL_20:
          operator delete(*(void **)(a1 + 24));
          goto LABEL_21;
        }
      }
      else if ((*(_BYTE *)(a1 + 64) & 1) == 0)
      {
        goto LABEL_19;
      }
      operator delete(*(void **)(a1 + 72));
      if ((*(_BYTE *)(a1 + 16) & 1) == 0)
        goto LABEL_21;
      goto LABEL_20;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = 0;
    v11 = (unint64_t *)(a1 + 16);
    v12 = (unint64_t *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 16);
    if (v13 < 2)
    {
      *(_QWORD *)(a1 + 64) = 0;
      v14 = (unint64_t *)(a1 + 64);
      v15 = (unint64_t *)(a2 + 64);
      v16 = *(_QWORD *)(a2 + 64);
      if (v16 < 2)
        goto LABEL_24;
LABEL_35:
      if ((v16 & 1) != 0)
      {
        absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::InitFrom(v14, v15);
        *(_QWORD *)(a1 + 112) = 0;
        v17 = (unint64_t *)(a1 + 112);
        v18 = (unint64_t *)(a2 + 112);
        v19 = *(_QWORD *)(a2 + 112);
        if (v19 < 2)
          goto LABEL_39;
      }
      else
      {
        *(_QWORD *)(a1 + 64) = v16;
        v22 = *(_OWORD *)(a2 + 72);
        v23 = *(_OWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = v23;
        *(_OWORD *)(a1 + 72) = v22;
        *(_QWORD *)(a1 + 112) = 0;
        v17 = (unint64_t *)(a1 + 112);
        v18 = (unint64_t *)(a2 + 112);
        v19 = *(_QWORD *)(a2 + 112);
        if (v19 < 2)
          goto LABEL_39;
      }
LABEL_25:
      if ((v19 & 1) != 0)
      {
        absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(v17, v18);
      }
      else
      {
        *(_QWORD *)(a1 + 112) = v19;
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      }
      goto LABEL_39;
    }
    if ((v13 & 1) != 0)
    {
      absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::InitFrom(v11, v12);
      *(_QWORD *)(a1 + 64) = 0;
      v14 = (unint64_t *)(a1 + 64);
      v15 = (unint64_t *)(a2 + 64);
      v16 = *(_QWORD *)(a2 + 64);
      if (v16 >= 2)
        goto LABEL_35;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v13;
      v20 = *(_OWORD *)(a2 + 24);
      v21 = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v21;
      *(_OWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 64) = 0;
      v14 = (unint64_t *)(a1 + 64);
      v15 = (unint64_t *)(a2 + 64);
      v16 = *(_QWORD *)(a2 + 64);
      if (v16 >= 2)
        goto LABEL_35;
    }
LABEL_24:
    *(_QWORD *)(a1 + 112) = 0;
    v17 = (unint64_t *)(a1 + 112);
    v18 = (unint64_t *)(a2 + 112);
    v19 = *(_QWORD *)(a2 + 112);
    if (v19 >= 2)
      goto LABEL_25;
LABEL_39:
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = 1;
    return;
  }
  if (*(_BYTE *)(a1 + 144))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (a1 != a2)
    {
      v4 = (unint64_t *)(a1 + 16);
      v5 = *(_QWORD *)(a2 + 16);
      if ((v5 & 1) != 0)
        v6 = *(_QWORD *)(a2 + 24);
      else
        v6 = a2 + 24;
      absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>(v4, v6, v5 >> 1);
      v7 = *(_QWORD *)(a2 + 64);
      if ((v7 & 1) != 0)
        v8 = *(_QWORD *)(a2 + 72);
      else
        v8 = a2 + 72;
      absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<long long>,long long const*>>((unint64_t *)(a1 + 64), v8, v7 >> 1);
      v9 = *(_QWORD *)(a2 + 112);
      if ((v9 & 1) != 0)
        v10 = *(_QWORD *)(a2 + 120);
      else
        v10 = a2 + 120;
      absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(a1 + 112), v10, v9 >> 1);
    }
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  }
}

void absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<long long>,long long const*>>(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t *v28;
  _OWORD *v29;
  __int128 *v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;

  v4 = (uint64_t *)a2;
  v7 = (void **)(a1 + 1);
  v6 = *a1;
  v8 = *a1 & 1;
  if ((*a1 & 1) == 0)
  {
    v9 = 5;
    v10 = a1 + 1;
    if (a3 <= 5)
      goto LABEL_3;
LABEL_19:
    if (2 * v9 <= a3)
      v24 = a3;
    else
      v24 = 2 * v9;
    if (!(v24 >> 61))
    {
      v25 = (char *)operator new(8 * v24);
      v26 = v25;
      v13 = a3;
      v16 = v4;
      v27 = 0;
      if (a3 < 4)
        goto LABEL_33;
LABEL_28:
      if ((unint64_t)(v26 - (char *)v16) >= 0x20)
      {
        v27 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        v28 = &v16[v13 & 0xFFFFFFFFFFFFFFFCLL];
        v29 = v26 + 16;
        v30 = (__int128 *)(v16 + 2);
        v31 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v32 = *v30;
          *(v29 - 1) = *(v30 - 1);
          *v29 = v32;
          v29 += 2;
          v30 += 2;
          v31 -= 4;
        }
        while (v31);
        if (v13 == v27)
        {
LABEL_36:
          if (v25)
          {
            if (v8)
              operator delete(*v7);
            a1[1] = (unint64_t)v25;
            a1[2] = v24;
            v8 = 1;
          }
          goto LABEL_40;
        }
LABEL_34:
        v33 = v13 - v27;
        v34 = &v26[8 * v27];
        do
        {
          v35 = *v28++;
          *(_QWORD *)v34 = v35;
          v34 += 8;
          --v33;
        }
        while (v33);
        goto LABEL_36;
      }
LABEL_33:
      v28 = v16;
      goto LABEL_34;
    }
LABEL_42:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v10 = (_QWORD *)a1[1];
  v9 = a1[2];
  if (v9 < a3)
    goto LABEL_19;
LABEL_3:
  v11 = v6 >> 1;
  v12 = a3 >= v6 >> 1;
  v13 = a3 - (v6 >> 1);
  if (!v12)
    v13 = 0;
  if (v11 >= a3)
    v14 = a3;
  else
    v14 = v11;
  if (!v14)
  {
    v16 = (uint64_t *)a2;
    if (v11 >= a3)
      goto LABEL_40;
    goto LABEL_26;
  }
  v15 = 0;
  if (v14 < 4)
    goto LABEL_14;
  if ((unint64_t)v10 - a2 < 0x20)
    goto LABEL_14;
  v15 = v14 & 0x7FFFFFFFFFFFFFFCLL;
  v16 = (uint64_t *)(a2 + 8 * (v14 & 0x7FFFFFFFFFFFFFFCLL));
  v17 = v10 + 2;
  v18 = (__int128 *)(a2 + 16);
  v19 = v14 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    v20 = *v18;
    *(v17 - 1) = *(v18 - 1);
    *v17 = v20;
    v17 += 2;
    v18 += 2;
    v19 -= 4;
  }
  while (v19);
  v4 = (uint64_t *)(a2 + 8 * (v14 & 0x7FFFFFFFFFFFFFFCLL));
  if (v14 != v15)
  {
LABEL_14:
    v21 = v14 - v15;
    v22 = &v10[v15];
    v16 = v4;
    do
    {
      v23 = *v16++;
      *v22++ = v23;
      --v21;
    }
    while (v21);
  }
  if (v11 < a3)
  {
LABEL_26:
    if (v10)
    {
      v25 = 0;
      v24 = 0;
      v26 = (char *)&v10[v11];
      v27 = 0;
      if (v13 < 4)
        goto LABEL_33;
      goto LABEL_28;
    }
    __break(1u);
    goto LABEL_42;
  }
LABEL_40:
  *a1 = v8 | (2 * a3);
}

webrtc::FramerateControllerDeprecated *webrtc::FramerateControllerDeprecated::FramerateControllerDeprecated(webrtc::FramerateControllerDeprecated *this, float a2)
{
  webrtc::RateStatistics *v4;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 4) = 0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 12) = 0;
  *((_DWORD *)this + 4) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v4 = (webrtc::FramerateControllerDeprecated *)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = -1;
  *((_BYTE *)this + 88) = 0;
  *(_QWORD *)((char *)this + 92) = 0x447A000000000000;
  *(int64x2_t *)((char *)this + 104) = vdupq_n_s64(0x3E8uLL);
  webrtc::RateStatistics::Reset((webrtc::FramerateControllerDeprecated *)((char *)this + 24));
  if (*((_BYTE *)this + 12))
    webrtc::RateStatistics::Update(v4, 1, *((unsigned int *)this + 2));
  *(float *)this = a2;
  *((_BYTE *)this + 4) = 1;
  *((_DWORD *)this + 4) = 85 * (unint64_t)(float)(1000.0 / a2) / 0x64;
  return this;
}

unint64_t webrtc::FramerateControllerDeprecated::DropFrame(webrtc::FramerateControllerDeprecated *this, unsigned int a2)
{
  BOOL v2;
  uint64_t v4;
  unint64_t result;
  char v6;

  if (*((_BYTE *)this + 12))
    v2 = *((_DWORD *)this + 2) > a2;
  else
    v2 = 0;
  if (v2)
    return 0;
  v4 = a2;
  result = webrtc::RateStatistics::Rate((webrtc::FramerateControllerDeprecated *)((char *)this + 24), a2);
  if (*((_BYTE *)this + 4))
  {
    if (v6 && *(float *)this < (float)(uint64_t)result)
      return 1;
    return *((_BYTE *)this + 12) && v4 - *((unsigned int *)this + 2) < *((unsigned int *)this + 4);
  }
  __break(1u);
  return result;
}

void webrtc::FramerateControllerDeprecated::AddFrame(webrtc::FramerateControllerDeprecated *this, unsigned int a2)
{
  BOOL v4;

  if (*((_BYTE *)this + 12))
    v4 = *((_DWORD *)this + 2) > a2;
  else
    v4 = 0;
  if (v4)
  {
    webrtc::RateStatistics::Reset((webrtc::FramerateControllerDeprecated *)((char *)this + 24));
    if (*((_BYTE *)this + 12))
      *((_BYTE *)this + 12) = 0;
  }
  webrtc::RateStatistics::Update((webrtc::FramerateControllerDeprecated *)((char *)this + 24), 1, a2);
  *((_DWORD *)this + 2) = a2;
  *((_BYTE *)this + 12) = 1;
}

webrtc::FullBandErleEstimator *webrtc::FullBandErleEstimator::FullBandErleEstimator(webrtc::FullBandErleEstimator *this, float32x2_t *a2, unint64_t a3)
{
  float32x2_t v4;
  uint64_t v7;
  char *v8;
  char *v9;
  int32x4_t *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  int32x4_t v16;
  int32x4_t *v17;
  uint64_t v18;
  __int8 v19;
  __int8 v20;
  char *v21;
  char *v22;
  size_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _BYTE *v30;
  uint64_t v31;
  int32x2_t v33;

  v4 = vadd_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_f32(*a2, (float32x2_t)vdup_n_s32(0x3A83126Fu))), (float32x2_t)0x3400000034000000), (float32x2_t)vdup_n_s32(0xC2FDE2A9));
  *(float32x2_t *)this = v4;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  if (a3)
  {
    v33 = (int32x2_t)v4;
    if (a3 >> 62)
      goto LABEL_21;
    v7 = 4 * a3;
    v8 = (char *)operator new(4 * a3);
    *((_QWORD *)this + 1) = v8;
    v9 = &v8[v7];
    *((_QWORD *)this + 3) = &v8[v7];
    bzero(v8, 4 * a3);
    *((_QWORD *)this + 2) = v9;
    v10 = (int32x4_t *)operator new(4 * a3);
    *((_QWORD *)this + 4) = v10;
    v11 = &v10->i8[v7];
    *((_QWORD *)this + 6) = (char *)v10 + v7;
    v12 = a3 - 1;
    v13 = (a3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v14 = (char *)v10;
    if (v13 < 7)
      goto LABEL_24;
    v15 = v13 + 1;
    v14 = &v10->i8[4 * (v15 & 0x7FFFFFFFFFFFFFF8)];
    v16 = vdupq_lane_s32(v33, 0);
    v17 = v10 + 1;
    v18 = v15 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v15 != (v15 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_24:
      do
      {
        *(_DWORD *)v14 = v33.i32[0];
        v14 += 4;
      }
      while (v14 != v11);
    }
    *((_QWORD *)this + 5) = v11;
    v19 = a2[3].i8[0];
    v20 = a2[3].i8[1];
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    if (a3 >= 0x71C71C71C71C71DLL)
LABEL_21:
      abort();
    v21 = (char *)operator new(36 * a3);
    *((_QWORD *)this + 7) = v21;
    v22 = &v21[36 * a3];
    *((_QWORD *)this + 9) = v22;
    do
    {
      *v21 = v19;
      v21[1] = v20;
      v21[4] = 0;
      v21[8] = 0;
      *(_OWORD *)(v21 + 12) = xmmword_208F0A0F0;
      *(_QWORD *)(v21 + 28) = 0;
      v21 += 36;
    }
    while (v21 != v22);
    *((_QWORD *)this + 8) = v22;
    v23 = 8 * a3;
    v24 = (char *)operator new(v23);
    *((_QWORD *)this + 10) = v24;
    v25 = &v24[v23];
    *((_QWORD *)this + 12) = &v24[v23];
    v26 = v12 & 0x1FFFFFFFFFFFFFFFLL;
    if ((v12 & 0x1FFFFFFFFFFFFFFFLL) != 0)
    {
      v27 = v26 + 1;
      v28 = (v26 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v29 = &v24[8 * v28];
      v30 = v24 + 8;
      v31 = v28;
      do
      {
        *(v30 - 8) = 0;
        *v30 = 0;
        *(v30 - 4) = 0;
        v30[4] = 0;
        v30 += 16;
        v31 -= 2;
      }
      while (v31);
      if (v27 == v28)
        goto LABEL_19;
    }
    else
    {
      v29 = v24;
    }
    do
    {
      *v29 = 0;
      v29[4] = 0;
      v29 += 8;
    }
    while (v29 != v25);
LABEL_19:
    *((_QWORD *)this + 11) = v25;
    goto LABEL_20;
  }
  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
LABEL_20:
  webrtc::FullBandErleEstimator::Reset(this);
  return this;
}

void webrtc::FullBandErleEstimator::Reset(webrtc::FullBandErleEstimator *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v2 = *((_QWORD *)this + 7);
  v1 = *((_QWORD *)this + 8);
  if (v2 != v1)
  {
    v3 = *((_QWORD *)this + 7);
    do
    {
      if (*(_BYTE *)(v3 + 8))
        *(_BYTE *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 28) = 0;
      *(_OWORD *)(v3 + 12) = xmmword_208F0A0F0;
      v3 += 36;
    }
    while (v3 != v1);
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v2 + v4;
      if (*(_BYTE *)(v7 + 8))
      {
        v8 = *(float *)(v7 + 12);
        if (v8 <= 0.0 && *(_BYTE *)v7 != 0)
          v8 = 0.0;
        if (*(_BYTE *)(v7 + 1))
          v8 = fminf(v8, 1.0);
        v10 = 0x100000000;
        v11 = *((_QWORD *)this + 10);
        if (v6 >= (*((_QWORD *)this + 11) - v11) >> 3)
        {
LABEL_34:
          __break(1u);
          return;
        }
      }
      else
      {
        v10 = 0;
        v8 = 0.0;
        v11 = *((_QWORD *)this + 10);
        if (v6 >= (*((_QWORD *)this + 11) - v11) >> 3)
          goto LABEL_34;
      }
      v12 = v11 + v5;
      *(_BYTE *)(v12 + 4) = BYTE4(v10);
      *(_DWORD *)v12 = v10 | LODWORD(v8);
      ++v6;
      v2 = *((_QWORD *)this + 7);
      v5 += 8;
      v4 += 36;
    }
    while (v6 < 0x8E38E38E38E38E39 * ((*((_QWORD *)this + 8) - v2) >> 2));
  }
  v13 = (float32x4_t *)*((_QWORD *)this + 4);
  v14 = *((_QWORD *)this + 5) - (_QWORD)v13;
  if ((uint64_t)v14 >= 1)
  {
    v15 = v14 >> 2;
    v16 = (v14 >> 2) - (v14 > 3) + 1;
    if (v16 < 0x10)
      goto LABEL_29;
    v17 = v14 >= 4 ? v14 & 0x7FFFFFFFFFFFFFFCLL : (v14 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if (v13 < (float32x4_t *)((char *)this + 4) && (char *)v13 + v17 > (char *)this)
      goto LABEL_29;
    v15 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v18 = (float32x4_t *)((char *)v13 + 4 * (v16 & 0xFFFFFFFFFFFFFFF8));
    v19 = vld1q_dup_f32((const float *)this);
    v20 = v13 + 1;
    v21 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v20[-1] = v19;
      *v20 = v19;
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    v13 = v18;
    if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_29:
      v22 = v15 + 1;
      do
      {
        v13->i32[0] = *(_DWORD *)this;
        v13 = (float32x4_t *)((char *)v13 + 4);
        --v22;
      }
      while (v22 > 1);
    }
  }
  v23 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  if (v23 >= 1)
    bzero(*((void **)this + 1), 4 * (((unint64_t)v23 >> 2) - ((unint64_t)v23 > 3)) + 4);
}

uint64_t webrtc::FullBandErleEstimator::Update(uint64_t result, float *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  unint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float *v12;
  float v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float *v23;
  int v24;
  float *v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int8x16_t v62;
  double v63;
  int8x16_t v64;

  if (!a5)
  {
LABEL_37:
    v48 = *(_QWORD *)(result + 56);
    if (*(_QWORD *)(result + 64) != v48)
    {
      v49 = 0;
      v50 = 0;
      v51 = 0;
      while (1)
      {
        v52 = v48 + v49;
        if (*(_BYTE *)(v52 + 8))
        {
          v53 = *(float *)(v52 + 12);
          if (v53 <= 0.0 && *(_BYTE *)v52 != 0)
            v53 = 0.0;
          if (*(_BYTE *)(v52 + 1))
            v53 = fminf(v53, 1.0);
          v55 = 0x100000000;
          v56 = *(_QWORD *)(result + 80);
          if (v51 >= (*(_QWORD *)(result + 88) - v56) >> 3)
            goto LABEL_52;
        }
        else
        {
          v55 = 0;
          v53 = 0.0;
          v56 = *(_QWORD *)(result + 80);
          if (v51 >= (*(_QWORD *)(result + 88) - v56) >> 3)
            goto LABEL_52;
        }
        v57 = v56 + v50;
        *(_BYTE *)(v57 + 4) = BYTE4(v55);
        *(_DWORD *)v57 = v55 | LODWORD(v53);
        ++v51;
        v48 = *(_QWORD *)(result + 56);
        v50 += 8;
        v49 += 36;
        if (v51 >= 0x8E38E38E38E38E39 * ((*(_QWORD *)(result + 64) - v48) >> 2))
          return result;
      }
    }
    return result;
  }
  v8 = 0;
  while (1)
  {
    if (((*(_QWORD *)(*a8 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = 0.0;
      if (a3)
      {
        v11 = 4 * a3;
        v12 = a2;
        do
        {
          v13 = *v12++;
          v10 = v10 + v13;
          v11 -= 4;
        }
        while (v11);
      }
      if (v10 > (float)((float)a3 * 44015000.0))
      {
        v14 = *(_QWORD *)(result + 56);
        if (0x8E38E38E38E38E39 * ((*(_QWORD *)(result + 64) - v14) >> 2) <= v8)
          goto LABEL_52;
        v15 = (float *)(a4 + 260 * v8);
        v16 = (float *)(a6 + 260 * v8);
        v17 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*v15 + 0.0) + v15[1]) + v15[2]) + v15[3]) + v15[4]) + v15[5]) + v15[6]) + v15[7]) + v15[8]) + v15[9]) + v15[10]) + v15[11]) + v15[12]) + v15[13]) + v15[14]) + v15[15]) + v15[16]) + v15[17]) + v15[18]) + v15[19]) + v15[20]) + v15[21]) + v15[22]) + v15[23]) + v15[24]) + v15[25]) + v15[26]) + v15[27]) + v15[28]) + v15[29]) + v15[30]) + v15[31])
                                                                                            + v15[32])
                                                                                    + v15[33])
                                                                            + v15[34])
                                                                    + v15[35])
                                                            + v15[36])
                                                    + v15[37])
                                            + v15[38])
                                    + v15[39])
                            + v15[40])
                    + v15[41])
            + v15[42];
        v18 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v17 + v15[43]) + v15[44]) + v15[45]) + v15[46]) + v15[47]) + v15[48]) + v15[49]) + v15[50]) + v15[51]) + v15[52])
                                                                                            + v15[53])
                                                                                    + v15[54])
                                                                            + v15[55])
                                                                    + v15[56])
                                                            + v15[57])
                                                    + v15[58])
                                            + v15[59])
                                    + v15[60])
                            + v15[61])
                    + v15[62])
            + v15[63];
        v19 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*v16 + 0.0) + v16[1]) + v16[2]) + v16[3]) + v16[4]) + v16[5]) + v16[6]) + v16[7]) + v16[8]) + v16[9]) + v16[10]) + v16[11]) + v16[12]) + v16[13]) + v16[14]) + v16[15]) + v16[16]) + v16[17]) + v16[18]) + v16[19]) + v16[20]) + v16[21]) + v16[22]) + v16[23]) + v16[24]) + v16[25]) + v16[26]) + v16[27]) + v16[28]) + v16[29]) + v16[30]) + v16[31])
                                                                                            + v16[32])
                                                                                    + v16[33])
                                                                            + v16[34])
                                                                    + v16[35])
                                                            + v16[36])
                                                    + v16[37])
                                            + v16[38])
                                    + v16[39])
                            + v16[40])
                    + v16[41])
            + v16[42];
        v20 = v15[64];
        v21 = v14 + 36 * v8;
        v22 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v19 + v16[43]) + v16[44]) + v16[45]) + v16[46]) + v16[47]) + v16[48]) + v16[49]) + v16[50]) + v16[51]) + v16[52]) + v16[53]) + v16[54])
                                                                                            + v16[55])
                                                                                    + v16[56])
                                                                            + v16[57])
                                                                    + v16[58])
                                                            + v16[59])
                                                    + v16[60])
                                            + v16[61])
                                    + v16[62])
                            + v16[63])
                    + v16[64])
            + *(float *)(v21 + 28);
        *(float *)(v21 + 28) = v22;
        v24 = *(_DWORD *)(v21 + 32);
        v23 = (float *)(v21 + 32);
        v25 = v23 - 2;
        v26 = (float)(v18 + v20) + *(v23 - 2);
        *(v23 - 2) = v26;
        *(_DWORD *)v23 = v24 + 1;
        if (v24 == 5)
          break;
      }
    }
LABEL_32:
    v42 = *(_QWORD *)(result + 8);
    if (v8 >= (*(_QWORD *)(result + 16) - v42) >> 2)
      goto LABEL_52;
    v43 = *(_DWORD *)(v42 + 4 * v8) - 1;
    *(_DWORD *)(v42 + 4 * v8) = v43;
    if (!v43)
    {
      v44 = *(_QWORD *)(result + 56);
      if (0x8E38E38E38E38E39 * ((*(_QWORD *)(result + 64) - v44) >> 2) <= v8)
        goto LABEL_52;
      v45 = v44 + 36 * v8;
      v47 = *(unsigned __int8 *)(v45 + 8);
      v46 = (_BYTE *)(v45 + 8);
      if (v47)
        *v46 = 0;
      v9 = v44 + 36 * v8;
      *(_DWORD *)(v9 + 12) = 0;
      *(_DWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 24) = 0;
    }
    if (++v8 == a5)
      goto LABEL_37;
  }
  if (v22 <= 0.0)
  {
    *v23 = 0.0;
    *(_QWORD *)v25 = 0;
    goto LABEL_32;
  }
  v27 = (float)((float)COERCE_UNSIGNED_INT((float)(v26 / v22) + 0.001) * 0.00000011921) + -126.94;
  v28 = v14 + 36 * v8;
  *(float *)(v28 + 4) = v27;
  *(_BYTE *)(v28 + 8) = 1;
  *v23 = 0.0;
  *(_QWORD *)v25 = 0;
  v29 = *(float *)(v28 + 16);
  v30 = *(float *)(v28 + 20);
  if ((float)(v29 + -0.0004) >= v27)
    v31 = v29 + -0.0004;
  else
    v31 = v27;
  if (v27 >= (float)(v30 + 0.0004))
    v32 = v30 + 0.0004;
  else
    v32 = v27;
  *(float *)(v28 + 16) = v31;
  *(float *)(v28 + 20) = v32;
  v33 = 0.0;
  if (v31 > v32)
    v33 = (float)(v27 - v32) / (float)(v31 - v32);
  v34 = v14 + 36 * v8;
  v35 = *(float *)(v34 + 12);
  if (v33 <= v35)
    v36 = v35 + (float)((float)(v33 - v35) * 0.07);
  else
    v36 = v33;
  *(float *)(v34 + 12) = v36;
  v37 = *(_QWORD *)(result + 8);
  if (v8 < (*(_QWORD *)(result + 16) - v37) >> 2)
  {
    *(_DWORD *)(v37 + 4 * v8) = 100;
    v38 = *(_QWORD *)(result + 56);
    if (0x8E38E38E38E38E39 * ((*(_QWORD *)(result + 64) - v38) >> 2) > v8)
    {
      v39 = v38 + 36 * v8;
      if (!*(_BYTE *)(v39 + 8))
        goto LABEL_53;
      v40 = *(_QWORD *)(result + 32);
      if (v8 < (*(_QWORD *)(result + 40) - v40) >> 2)
      {
        v41 = *(float *)(v40 + 4 * v8) + (float)((float)(*(float *)(v39 + 4) - *(float *)(v40 + 4 * v8)) * 0.05);
        *(float *)(v40 + 4 * v8) = v41;
        if (v41 < *(float *)result)
          v41 = *(float *)result;
        *(float *)(v40 + 4 * v8) = v41;
        goto LABEL_32;
      }
    }
  }
LABEL_52:
  __break(1u);
LABEL_53:
  std::__throw_bad_optional_access[abi:sn180100]();
  return WebRtc_g722_decode(v58, v59, v60, v61, v62, v63, v64);
}

uint64_t WebRtc_g722_decode(_DWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, int8x16_t a5, double a6, int8x16_t a7)
{
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  char v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  char *v32;
  int v33;
  unsigned int v34;
  char *v35;
  int v36;
  BOOL v37;
  char v38;
  unsigned int v39;
  _DWORD *v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  char v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  __int16 v66;
  uint64_t v67;
  int v68;
  const void *v70;
  void *v71;

  if (a4)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v70 = a1 + 6;
    v71 = a1 + 4;
    while (1)
    {
      while (1)
      {
        if (a1[1])
        {
          v24 = a1[119];
          v25 = a1[3];
          v26 = a1[118];
          if (v24 < v25)
          {
            v27 = *(unsigned __int8 *)(a3 + v10++);
            v26 |= v27 << v24;
            v24 += 8;
          }
          v28 = v26 & ~(-1 << v25);
          a1[118] = v26 >> v25;
          a1[119] = v24 - v25;
        }
        else
        {
          v28 = *(unsigned __int8 *)(a3 + v10++);
          v25 = a1[3];
        }
        v29 = v28 & 0xF;
        v30 = v28 >> 4;
        v31 = v28 >> 5;
        v32 = (char *)&WebRtc_g722_decode_qm5 + 4 * (v28 & 0x1F);
        v33 = (v28 >> 1) & 0xF;
        v34 = v28 >> 6;
        v35 = (char *)&WebRtc_g722_decode_qm6 + 4 * (v28 & 0x3F);
        v36 = (v28 >> 2) & 0xF;
        if (v25 == 7)
          v36 = v33;
        else
          LOBYTE(v31) = v34;
        if (v25 != 7)
          v32 = v35;
        v37 = v25 == 6;
        if (v25 == 6)
          v38 = v30;
        else
          v38 = v31;
        if (v25 == 6)
          v39 = v29;
        else
          v39 = v36;
        if (v37)
          v40 = (_DWORD *)((char *)&WebRtc_g722_decode_qm4 + 4 * v29);
        else
          v40 = v32;
        v41 = a1[72];
        v42 = a1[28] + ((v41 * *v40) >> 15);
        if (v42 <= -16384)
          v42 = -16384;
        if (v42 >= 0x3FFF)
          v43 = 0x3FFF;
        else
          v43 = v42;
        v44 = 4 * v39;
        v45 = (*(_DWORD *)((char *)&WebRtc_g722_decode_qm4 + v44) * v41) >> 15;
        v46 = WebRtc_g722_decode_wl[*(int *)((char *)&WebRtc_g722_decode_rl42 + v44)] + ((127 * a1[71]) >> 7);
        if (v46 >= 18432)
          v46 = 18432;
        v47 = v46 & ~(v46 >> 31);
        a1[71] = v47;
        v48 = (v47 >> 6) & 0x1F;
        v47 >>= 11;
        v49 = WebRtc_g722_decode_ilb[v48];
        v50 = 8 - v47;
        v20 = v47 > 8;
        v51 = v49 << (v47 - 8);
        v52 = v49 >> v50;
        if (!v20)
          v51 = v52;
        a1[72] = 4 * v51;
        block4((uint64_t)a1, 0, v45, a5, a6, a7);
        if (a1[2])
          break;
        v13 = (a1[117] * WebRtc_g722_decode_qm2[v38 & 3]) >> 15;
        v14 = v13 + a1[73];
        if (v14 <= -16384)
          v14 = -16384;
        if (v14 >= 0x3FFF)
          v12 = 0x3FFF;
        else
          v12 = v14;
        v15 = WebRtc_g722_decode_wh[WebRtc_g722_decode_rh2[v38 & 3]] + ((127 * a1[116]) >> 7);
        if (v15 >= 22528)
          v15 = 22528;
        v16 = v15 & ~(v15 >> 31);
        a1[116] = v16;
        v17 = (v16 >> 6) & 0x1F;
        v16 >>= 11;
        v18 = WebRtc_g722_decode_ilb[v17];
        v19 = 10 - v16;
        v20 = v16 > 0xA;
        v21 = v18 << (v16 - 10);
        v22 = v18 >> v19;
        if (!v20)
          v21 = v22;
        a1[117] = 4 * v21;
        block4((uint64_t)a1, 1u, v13, a5, a6, a7);
        if (!*a1)
          goto LABEL_44;
LABEL_13:
        v23 = v11 + 1;
        *(_WORD *)(a2 + 2 * v11) = 2 * v43;
        v11 += 2;
        *(_WORD *)(a2 + 2 * v23) = 2 * v12;
        if (v10 >= a4)
          return v11;
      }
      if (*a1)
        goto LABEL_13;
LABEL_44:
      if (a1[2])
      {
        v53 = v11++;
        *(_WORD *)(a2 + 2 * v53) = 2 * v43;
        if (v10 >= a4)
          return v11;
      }
      else
      {
        memmove(v71, v70, 0x58uLL);
        v54 = a1[7];
        v55 = a1[9];
        v56 = a1[11];
        v57 = a1[13];
        v58 = a1[15];
        v59 = a1[17];
        v60 = a1[19];
        v61 = a1[21];
        v62 = a1[23];
        v63 = 3 * a1[4]
            - 11 * (a1[6] + v12 + v43)
            + 12 * a1[8]
            + 32 * a1[10]
            - 210 * a1[12]
            + 951 * a1[14]
            + 3876 * a1[16]
            - 805 * a1[18]
            + 362 * a1[20]
            - 156 * a1[22]
            + 53 * a1[24];
        v64 = a1[25] + a1[5];
        a1[26] = v12 + v43;
        a1[27] = v43 - v12;
        v65 = (3 * (v43 - v12)
             + 53 * v54
             - 156 * v55
             + 362 * v56
             - 805 * v57
             + 3876 * v58
             + 951 * v59
             - 210 * v60
             + 32 * v61
             + 12 * v62
             - 11 * v64) >> 11;
        if (v65 <= -32768)
          v65 = -32768;
        if (v65 >= 0x7FFF)
          v66 = 0x7FFF;
        else
          v66 = v65;
        v67 = v11 + 1;
        *(_WORD *)(a2 + 2 * v11) = v66;
        v68 = v63 >> 11;
        if (v68 <= -32768)
          v68 = -32768;
        if (v68 >= 0x7FFF)
          LOWORD(v68) = 0x7FFF;
        v11 += 2;
        *(_WORD *)(a2 + 2 * v67) = v68;
        if (v10 >= a4)
          return v11;
      }
    }
  }
  return 0;
}

uint64_t block4(uint64_t a1, unsigned int a2, int a3, int8x16_t a4, double a5, int8x16_t a6)
{
  int32x2_t *v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  int *v12;
  __int32 v13;
  __int32 *v14;
  int v15;
  int v16;
  __int32 *v17;
  int v18;
  int32x2_t v19;
  int32x2_t v20;
  int *v21;
  int v23;
  int *v24;
  int v25;
  int v26;
  __int32 v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int32x2_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int32x4_t v35;
  int32x2_t v36;
  int32x2_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint64_t result;
  int v45;
  __int32 v46;
  int v47;
  int v48;
  int v49;
  int32x4_t v50;
  int32x2_t v51;
  int v52;
  int32x2_t v53;
  int v54;

  v6 = (int32x2_t *)(a1 + 180 * a2);
  v7 = v6[15].i32[0] + a3;
  if (v7 <= -32768)
    v7 = -32768;
  if (v7 >= 0x7FFF)
    v8 = 0x7FFF;
  else
    v8 = v7;
  v9 = v8 >> 15;
  v10 = (int *)&v6[20] + 1;
  v11 = v6[20].i32[1];
  v12 = (int *)&v6[21];
  v14 = (__int32 *)&v6[17] + 1;
  v13 = v6[17].i32[1];
  v15 = 4 * v13;
  if (4 * v13 <= -32768)
    v15 = -32768;
  if (v15 >= 0x7FFF)
    v15 = 0x7FFF;
  if (v9 == v11 >> 15)
  {
    v15 = -v15;
    v16 = 192;
  }
  else
  {
    v16 = -192;
  }
  if (v15 >= 0x7FFF)
    v15 = 0x7FFF;
  v17 = (__int32 *)&v6[18];
  if (v9 == v6[21].i32[0] >> 15)
    v18 = 128;
  else
    v18 = -128;
  v19.i32[0] = 32640 * v13;
  v19.i32[1] = v15;
  v20 = vmin_s32(vmax_s32(vadd_s32((int32x2_t)__PAIR64__(v18 + ((32512 * v6[18].i32[0]) >> 15), v16), vshl_s32(v19, (int32x2_t)0xFFFFFFF9FFFFFFF1)), (int32x2_t)0xFFFFD000FFFF8000), (int32x2_t)0x300000007FFFLL);
  v6[19] = v20;
  v21 = (int *)&v6[19];
  v24 = v21 - 10;
  v23 = *(v21 - 10);
  v21[5] = a3;
  v25 = v23 + a3;
  if (v25 <= -32768)
    v26 = -32768;
  else
    v26 = v25;
  if (v26 >= 0x7FFF)
    v26 = 0x7FFF;
  *(v21 - 7) = v26;
  v21[2] = v8;
  v27 = v20.i32[1];
  v28 = 15360 - v20.i32[1];
  if (v20.i32[0] > 15360 - v20.i32[1] || (v28 = v20.i32[1] - 15360, v20.i32[0] < v20.i32[1] - 15360))
    *v21 = v28;
  v29 = a1 + 180 * a2;
  if (a3)
    v30 = -128;
  else
    v30 = 0;
  *(_DWORD *)(v29 + 256) = a3 >> 15;
  a6.i64[0] = *(_QWORD *)(v29 + 192);
  v31 = vshr_n_s32(*(int32x2_t *)a6.i8, 0xFuLL);
  *(int32x2_t *)(v29 + 276) = v31;
  v32 = vdupq_n_s32(a3 >> 15);
  v33 = (int8x16_t)vdupq_n_s32((a3 != 0) << 7);
  v34 = (int8x16_t)vdupq_n_s32(v30);
  v35 = vdupq_n_s32(0x7F80u);
  v36 = vsra_n_s32((int32x2_t)vbsl_s8((int8x8_t)vceq_s32(v31, *(int32x2_t *)v32.i8), *(int8x8_t *)v33.i8, *(int8x8_t *)v34.i8), vmul_s32(*(int32x2_t *)(v29 + 220), *(int32x2_t *)v35.i8), 0xFuLL);
  a4.i64[0] = 0x7F0000007FLL;
  v37 = vmin_s32(vmax_s32(v36, (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
  *(int32x2_t *)(v29 + 248) = v37;
  *(int32x2_t *)(v29 + 220) = v37;
  v38 = *(int32x4_t *)(v29 + 176);
  v39 = vshrq_n_s32(v38, 0xFuLL);
  *(_DWORD *)(v29 + 260) = v39.i32[0];
  v40 = vsraq_n_s32((int32x4_t)vbslq_s8((int8x16_t)vceqq_s32(v39, v32), v33, v34), vmulq_s32(*(int32x4_t *)(v29 + 204), v35), 0xFuLL);
  v41.i64[0] = 0x7F0000007FLL;
  v41.i64[1] = 0x7F0000007FLL;
  v42.i64[0] = 0x7F0000007FLL;
  v42.i64[1] = 0x7F0000007FLL;
  v43 = vminq_s32(vmaxq_s32(v40, v41), v42);
  *(_QWORD *)(v29 + 264) = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 4uLL).u64[0];
  *(_DWORD *)(v29 + 272) = v39.i32[3];
  *(int32x4_t *)(v29 + 232) = v43;
  result = v38.u32[3];
  *(_DWORD *)(v29 + 188) = v38.i32[2];
  *(_QWORD *)(v29 + 192) = vextq_s8((int8x16_t)v38, a6, 0xCuLL).u64[0];
  *(_QWORD *)(v29 + 180) = v38.i64[0];
  *(_DWORD *)(v29 + 176) = a3;
  *(int32x4_t *)(v29 + 204) = v43;
  v45 = *(_DWORD *)(v29 + 128);
  *v12 = v11;
  *v17 = v27;
  *(_DWORD *)(v29 + 128) = v26;
  *(_DWORD *)(v29 + 132) = v45;
  *v10 = v8;
  v46 = *v21;
  *v14 = v46;
  v47 = 2 * v45;
  if (2 * v45 <= -32768)
    v47 = -32768;
  if (v47 >= 0x7FFF)
    v47 = 0x7FFF;
  v48 = (v47 * v27) >> 15;
  v49 = 2 * v38.i32[3];
  if (2 * v38.i32[3] <= -32768)
    v49 = -32768;
  if (v49 >= 0x7FFF)
    v49 = 0x7FFF;
  v50 = (int32x4_t)vextq_s8(a4, (int8x16_t)v38, 0xCuLL);
  v50.i32[0] = a3;
  v51 = vdup_lane_s32(*(int32x2_t *)a6.i8, 0);
  v51.i32[0] = v26;
  v52 = vaddvq_s32(vshrq_n_s32(vmulq_s32(v43, vminq_s32(vmaxq_s32(vaddq_s32(v50, v50), v41), v42)), 0xFuLL))
      + ((v37.i32[0] * v49) >> 15);
  v37.i32[0] = v46;
  v53 = vmin_s32(vmax_s32(vsra_n_s32((int32x2_t)__PAIR64__(v52, v48), vmul_s32(v37, vmin_s32(vmax_s32(vadd_s32(v51, v51), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL)), 0xFuLL), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
  *(int32x2_t *)(v29 + 116) = v53;
  v54 = v53.i16[0] + v53.i16[2];
  if (v54 >= 0x7FFF)
    v54 = 0x7FFF;
  if (v54 <= -32768)
    v54 = -32768;
  *v24 = v54;
  return result;
}

uint64_t WebRtc_g722_encode(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  __int16 *v16;
  int v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int32x2_t v53;
  const void *v55;
  void *v56;

  if (a4)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v55 = (const void *)(a1 + 24);
    v56 = (void *)(a1 + 16);
    a5.i64[0] = 0xFFFFFCDBFFFFFF2ELL;
    while (1)
    {
      if (*(_DWORD *)a1)
      {
        v13 = *(__int16 *)(a3 + 2 * v12++);
        v14 = v13 >> 1;
        v11 = v14;
      }
      else if (*(_DWORD *)(a1 + 8))
      {
        v15 = *(__int16 *)(a3 + 2 * v12++);
        v14 = v15 >> 1;
      }
      else
      {
        memmove(v56, v55, 0x58uLL);
        v16 = (__int16 *)(a3 + 2 * v12);
        v17 = *v16;
        LODWORD(v16) = v16[1];
        *(_DWORD *)(a1 + 104) = v17;
        *(_DWORD *)(a1 + 108) = (_DWORD)v16;
        a6 = *(double *)(a1 + 40);
        a7.i64[0] = *(_QWORD *)(a1 + 48);
        v18.i32[0] = *(_DWORD *)(a1 + 24) + v17;
        v18.i32[1] = *(_DWORD *)(a1 + 28);
        v19.i32[0] = *(_DWORD *)(a1 + 16);
        v19.i32[1] = (int)v16;
        v20.i32[0] = *(_DWORD *)(a1 + 96);
        v20.i32[1] = *(_DWORD *)(a1 + 100) + *(_DWORD *)(a1 + 20);
        a5.i64[0] = 0xFFFFFCDBFFFFFF2ELL;
        v21 = vmla_s32(vmla_s32(vmla_s32(vmla_s32(vmla_s32(vmla_s32(vmla_s32(vmla_s32(vmla_s32(vmla_s32(vmul_s32(v19, (int32x2_t)0x300000003), v18, (int32x2_t)0x35FFFFFFF5), *(int32x2_t *)(a1 + 32), (int32x2_t)0xFFFFFF640000000CLL), *(int32x2_t *)&a6, (int32x2_t)0x16A00000020), *(int32x2_t *)a7.i8, (int32x2_t)0xFFFFFCDBFFFFFF2ELL), *(int32x2_t *)(a1 + 56), (int32x2_t)0xF24000003B7), *(int32x2_t *)(a1 + 64), (int32x2_t)0x3B700000F24),
                      *(int32x2_t *)(a1 + 72),
                      (int32x2_t)0xFFFFFF2EFFFFFCDBLL),
                    *(int32x2_t *)(a1 + 80),
                    (int32x2_t)0x200000016ALL),
                  *(int32x2_t *)(a1 + 88),
                  (int32x2_t)0xCFFFFFF64),
                v20,
                (int32x2_t)0xFFFFFFF500000035);
        v12 += 2;
        v14 = (v21.i32[1] + v21.i32[0]) >> 14;
        v11 = (v21.i32[1] - v21.i32[0]) >> 14;
      }
      v22 = v14 - *(_DWORD *)(a1 + 112);
      if (v22 <= -32768)
        v22 = -32768;
      if (v22 >= 0x7FFF)
        v23 = 0x7FFF;
      else
        v23 = v22;
      v24 = v23 ^ (v23 >> 15);
      v25 = *(_DWORD *)(a1 + 288);
      if (v24 >= (35 * v25) >> 12)
      {
        if (v24 >= (72 * v25) >> 12)
        {
          if (v24 >= (110 * v25) >> 12)
          {
            if (v24 >= (150 * v25) >> 12)
            {
              if (v24 >= (190 * v25) >> 12)
              {
                if (v24 >= (233 * v25) >> 12)
                {
                  if (v24 >= (276 * v25) >> 12)
                  {
                    if (v24 >= (323 * v25) >> 12)
                    {
                      if (v24 >= (370 * v25) >> 12)
                      {
                        if (v24 >= (422 * v25) >> 12)
                        {
                          if (v24 >= (473 * v25) >> 12)
                          {
                            if (v24 >= (530 * v25) >> 12)
                            {
                              if (v24 >= (587 * v25) >> 12)
                              {
                                if (v24 >= (650 * v25) >> 12)
                                {
                                  if (v24 >= (714 * v25) >> 12)
                                  {
                                    if (v24 >= (786 * v25) >> 12)
                                    {
                                      if (v24 >= (858 * v25) >> 12)
                                      {
                                        if (v24 >= (940 * v25) >> 12)
                                        {
                                          if (v24 >= (1023 * v25) >> 12)
                                          {
                                            if (v24 >= (1121 * v25) >> 12)
                                            {
                                              if (v24 >= (1219 * v25) >> 12)
                                              {
                                                if (v24 >= (1339 * v25) >> 12)
                                                {
                                                  if (v24 >= (1458 * v25) >> 12)
                                                  {
                                                    if (v24 >= (1612 * v25) >> 12)
                                                    {
                                                      if (v24 >= (1765 * v25) >> 12)
                                                      {
                                                        if (v24 >= (1980 * v25) >> 12)
                                                        {
                                                          if (v24 >= (2195 * v25) >> 12)
                                                          {
                                                            if (v24 >= (2557 * v25) >> 12)
                                                            {
                                                              v27 = v24 < (2919 * v25) >> 12;
                                                              v26 = 29;
                                                              if (!v27)
                                                                v26 = 30;
                                                            }
                                                            else
                                                            {
                                                              v26 = 28;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            v26 = 27;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          v26 = 26;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v26 = 25;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v26 = 24;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v26 = 23;
                                                  }
                                                }
                                                else
                                                {
                                                  v26 = 22;
                                                }
                                              }
                                              else
                                              {
                                                v26 = 21;
                                              }
                                            }
                                            else
                                            {
                                              v26 = 20;
                                            }
                                          }
                                          else
                                          {
                                            v26 = 19;
                                          }
                                        }
                                        else
                                        {
                                          v26 = 18;
                                        }
                                      }
                                      else
                                      {
                                        v26 = 17;
                                      }
                                    }
                                    else
                                    {
                                      v26 = 16;
                                    }
                                  }
                                  else
                                  {
                                    v26 = 15;
                                  }
                                }
                                else
                                {
                                  v26 = 14;
                                }
                              }
                              else
                              {
                                v26 = 13;
                              }
                            }
                            else
                            {
                              v26 = 12;
                            }
                          }
                          else
                          {
                            v26 = 11;
                          }
                        }
                        else
                        {
                          v26 = 10;
                        }
                      }
                      else
                      {
                        v26 = 9;
                      }
                    }
                    else
                    {
                      v26 = 8;
                    }
                  }
                  else
                  {
                    v26 = 7;
                  }
                }
                else
                {
                  v26 = 6;
                }
              }
              else
              {
                v26 = 5;
              }
            }
            else
            {
              v26 = 4;
            }
          }
          else
          {
            v26 = 3;
          }
        }
        else
        {
          v26 = 2;
        }
      }
      else
      {
        v26 = 1;
      }
      v28 = (v23 & 0x8000u) != 0;
      v29 = &WebRtc_g722_encode_ilp;
      if (v28)
        v29 = &WebRtc_g722_encode_iln;
      v30 = v29[v26];
      v31 = 4 * (v30 >> 2);
      v32 = *(_DWORD *)((char *)&WebRtc_g722_encode_qm4 + v31);
      v33 = WebRtc_g722_encode_wl[*(int *)((char *)&WebRtc_g722_encode_rl42 + v31)]
          + ((127 * *(_DWORD *)(a1 + 284)) >> 7);
      *(_DWORD *)(a1 + 284) = v33;
      if ((v33 & 0x80000000) != 0)
      {
        LOBYTE(v35) = 0;
        v34 = 0;
        *(_DWORD *)(a1 + 284) = 0;
      }
      else
      {
        if (v33 >= 0x4801)
        {
          v34 = 0;
          *(_DWORD *)(a1 + 284) = 18432;
LABEL_80:
          v36 = 2 * WebRtc_g722_encode_ilb[v34];
          goto LABEL_83;
        }
        v34 = (v33 >> 6) & 0x1F;
        if (v33 == 18432)
          goto LABEL_80;
        v35 = v33 >> 11;
      }
      v36 = WebRtc_g722_encode_ilb[v34] >> (8 - v35);
LABEL_83:
      *(_DWORD *)(a1 + 288) = 4 * v36;
      block4(a1, 0, (v32 * v25) >> 15, a5, a6, a7);
      if (*(_DWORD *)(a1 + 8))
      {
        v37 = *(_DWORD *)(a1 + 12);
        v38 = (v30 | 0xC0) >> (8 - v37);
        if (*(_DWORD *)(a1 + 4))
          goto LABEL_104;
        goto LABEL_3;
      }
      v39 = v11 - *(_DWORD *)(a1 + 292);
      if (v39 <= -32768)
        v39 = -32768;
      if (v39 >= 0x7FFF)
        v40 = 0x7FFF;
      else
        v40 = v39;
      v41 = *(_DWORD *)(a1 + 468);
      v42 = 4;
      if ((v40 ^ (v40 >> 15)) >= (564 * v41) >> 12)
        v42 = 8;
      v28 = v40 < 0;
      v43 = (char *)&WebRtc_g722_encode_ihp;
      if (v28)
        v43 = (char *)&WebRtc_g722_encode_ihn;
      v44 = *(int *)&v43[v42];
      v45 = WebRtc_g722_encode_qm2[v44];
      v46 = WebRtc_g722_encode_wh[WebRtc_g722_encode_rh2[v44]] + ((127 * *(_DWORD *)(a1 + 464)) >> 7);
      *(_DWORD *)(a1 + 464) = v46;
      if ((v46 & 0x80000000) != 0)
      {
        LOBYTE(v48) = 0;
        v47 = 0;
        *(_DWORD *)(a1 + 464) = 0;
      }
      else
      {
        if (v46 >= 0x5801)
        {
          v47 = 0;
          *(_DWORD *)(a1 + 464) = 22528;
LABEL_100:
          v49 = 2 * WebRtc_g722_encode_ilb[v47];
          goto LABEL_103;
        }
        v47 = (v46 >> 6) & 0x1F;
        if (v46 == 22528)
          goto LABEL_100;
        v48 = v46 >> 11;
      }
      v49 = WebRtc_g722_encode_ilb[v47] >> (10 - v48);
LABEL_103:
      *(_DWORD *)(a1 + 468) = 4 * v49;
      block4(a1, 1u, (v45 * v41) >> 15, a5, a6, a7);
      v37 = *(_DWORD *)(a1 + 12);
      v38 = (v30 | ((_DWORD)v44 << 6)) >> (8 - v37);
      if (*(_DWORD *)(a1 + 4))
      {
LABEL_104:
        v50 = *(_DWORD *)(a1 + 484);
        v51 = *(_DWORD *)(a1 + 480) | (v38 << v50);
        *(_DWORD *)(a1 + 480) = v51;
        v52 = v50 + v37;
        *(_DWORD *)(a1 + 484) = v52;
        if (v52 >= 8)
        {
          *(_BYTE *)(a2 + v10++) = v51;
          v53 = *(int32x2_t *)(a1 + 480);
          LODWORD(a6) = vshr_n_u32((uint32x2_t)v53, 8uLL).u32[0];
          *(int32x2_t *)a5.i8 = vadd_s32(v53, (int32x2_t)0x700000007);
          HIDWORD(a6) = a5.i32[1];
          *(double *)(a1 + 480) = a6;
        }
        goto LABEL_4;
      }
LABEL_3:
      *(_BYTE *)(a2 + v10++) = v38;
LABEL_4:
      if (v12 >= a4)
        return v10;
    }
  }
  return 0;
}

uint64_t WebRtcG722_CreateEncoder(_QWORD *a1)
{
  void *v2;

  v2 = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
  *a1 = v2;
  if (v2)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t WebRtcG722_EncoderInit(_QWORD *a1)
{
  if (a1 || (a1 = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL)) != 0)
  {
    a1[60] = 0;
    *((_OWORD *)a1 + 28) = 0u;
    *((_OWORD *)a1 + 29) = 0u;
    *((_OWORD *)a1 + 26) = 0u;
    *((_OWORD *)a1 + 27) = 0u;
    *((_OWORD *)a1 + 24) = 0u;
    *((_OWORD *)a1 + 25) = 0u;
    *((_OWORD *)a1 + 22) = 0u;
    *((_OWORD *)a1 + 23) = 0u;
    *((_OWORD *)a1 + 20) = 0u;
    *((_OWORD *)a1 + 21) = 0u;
    *((_OWORD *)a1 + 18) = 0u;
    *((_OWORD *)a1 + 19) = 0u;
    *((_OWORD *)a1 + 16) = 0u;
    *((_OWORD *)a1 + 17) = 0u;
    *((_OWORD *)a1 + 14) = 0u;
    *((_OWORD *)a1 + 15) = 0u;
    *((_OWORD *)a1 + 12) = 0u;
    *((_OWORD *)a1 + 13) = 0u;
    *((_OWORD *)a1 + 10) = 0u;
    *((_OWORD *)a1 + 11) = 0u;
    *((_OWORD *)a1 + 8) = 0u;
    *((_OWORD *)a1 + 9) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_DWORD *)a1 + 3) = 8;
    *((_DWORD *)a1 + 1) = 0;
    *((_DWORD *)a1 + 72) = 32;
    *((_DWORD *)a1 + 117) = 8;
  }
  if (a1)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

float32x4_t *webrtc::GainApplier::ApplyGain(float32x4_t *result, uint64_t *a2, uint64_t a3)
{
  float v3;
  float v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float *v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float *v29;
  uint64_t v30;
  int8x16_t v31;
  float *v32;
  float v33;
  float v34;

  if (result->i32[3] != HIDWORD(a3))
  {
    result->i32[3] = HIDWORD(a3);
    result[1].f32[0] = 1.0 / (float)SHIDWORD(a3);
  }
  v4 = result->f32[1];
  v3 = result->f32[2];
  if (v4 == v3)
  {
    v5 = v3 < 0.99997;
    if (v3 > 1.0)
      v5 = 1;
    if ((int)a3 >= 1 && v5)
    {
      v6 = a3 >> 32;
      if (HIDWORD(a3))
      {
        if (HIDWORD(a3))
        {
          v7 = 0;
          v8 = (v6 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          v9 = (v8 + 1) & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v10 = (float32x4_t *)a2[v7];
            v11 = (float *)v10;
            if (v8 < 7)
              goto LABEL_16;
            v11 = &v10->f32[v9];
            v12 = v10 + 1;
            v13 = (v8 + 1) & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v14 = vmulq_n_f32(*v12, v3);
              v12[-1] = vmulq_n_f32(v12[-1], v3);
              *v12 = v14;
              v12 += 2;
              v13 -= 8;
            }
            while (v13);
            if (v8 + 1 != v9)
            {
LABEL_16:
              v15 = &v10->f32[v6];
              do
              {
                *v11 = v3 * *v11;
                ++v11;
              }
              while (v11 != v15);
            }
            ++v7;
          }
          while (v7 != a3);
        }
      }
    }
  }
  else if ((int)a3 >= 1 && SHIDWORD(a3) >= 1)
  {
    v16 = 0;
    v17 = (float)(v3 - v4) * result[1].f32[0];
    do
    {
      v18 = a2;
      v19 = a3;
      do
      {
        v20 = *v18++;
        *(float *)(v20 + 4 * v16) = v4 * *(float *)(v20 + 4 * v16);
        --v19;
      }
      while (v19);
      v4 = v17 + v4;
      ++v16;
    }
    while (v16 != HIDWORD(a3));
  }
  result->i32[1] = result->i32[2];
  if ((int)a3 >= 1 && result->i8[0] && HIDWORD(a3))
  {
    v21 = 0;
    v22 = a3 >> 32;
    v23 = a3;
    v24 = ((a3 >> 32) - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v24 + 1) & 0x7FFFFFFFFFFFFFF8;
    v26.i64[0] = 0xC7000000C7000000;
    v26.i64[1] = 0xC7000000C7000000;
    v27 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
    do
    {
      v28 = (float32x4_t *)a2[v21];
      v29 = (float *)v28;
      if (v24 < 7)
        goto LABEL_35;
      v29 = &v28->f32[v25];
      result = v28 + 1;
      v30 = (v24 + 1) & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v31 = vbslq_s8((int8x16_t)vcgeq_f32(v26, *result), (int8x16_t)v26, vbslq_s8((int8x16_t)vcgeq_f32(*result, v27), (int8x16_t)v27, *(int8x16_t *)result));
        result[-1] = (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(v26, result[-1]), (int8x16_t)v26, vbslq_s8((int8x16_t)vcgeq_f32(result[-1], v27), (int8x16_t)v27, (int8x16_t)result[-1]));
        *result = (float32x4_t)v31;
        result += 2;
        v30 -= 8;
      }
      while (v30);
      if (v24 + 1 != v25)
      {
LABEL_35:
        v32 = &v28->f32[v22];
        do
        {
          v33 = 32767.0;
          if (*v29 < 32767.0)
            v33 = *v29;
          if (*v29 > -32768.0)
            v34 = v33;
          else
            v34 = -32768.0;
          *v29++ = v34;
        }
        while (v29 != v32);
      }
      ++v21;
    }
    while (v21 != v23);
  }
  return result;
}

void webrtc::GainControlImpl::~GainControlImpl(webrtc::GainControlImpl *this)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24C0B4850;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  if (v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 7);
    v5 = (void *)*((_QWORD *)this + 6);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
        {
          free(*(void **)(v6 + 48));
          MEMORY[0x20BD0ADEC](v6, 0x1080C40D70B5887);
        }
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v3;
    operator delete(v5);
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    MEMORY[0x20BD0ADEC](v8, 0xC400A2AC0F1);
}

{
  webrtc::GainControlImpl::~GainControlImpl(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::GainControlImpl::ProcessRenderAudio(uint64_t result, __int16 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  int *v10;
  int v11;
  BOOL v12;

  v4 = *(_QWORD *)(result + 48);
  v3 = *(_QWORD *)(result + 56);
  if (v3 != v4)
  {
    v6 = result;
    if (a3 == 160)
    {
      v9 = 0;
      do
      {
        v10 = *(int **)(*(_QWORD *)(v4 + 8 * v9) + 48);
        if (v10)
        {
          v11 = *v10;
          v12 = *v10 == 16000 || v11 == 48000;
          if (v12 || v11 == 32000)
          {
            result = webrtc::WebRtcAgc_ProcessVad((uint64_t)(v10 + 152), a2, 160);
            v4 = *(_QWORD *)(v6 + 48);
            v3 = *(_QWORD *)(v6 + 56);
          }
        }
        ++v9;
      }
      while (v9 < (v3 - v4) >> 3);
    }
    else if (a3 == 80)
    {
      v7 = 0;
      do
      {
        v8 = *(_DWORD **)(*(_QWORD *)(v4 + 8 * v7) + 48);
        if (v8)
        {
          if (*v8 == 8000)
          {
            result = webrtc::WebRtcAgc_ProcessVad((uint64_t)(v8 + 152), a2, 80);
            v4 = *(_QWORD *)(v6 + 48);
            v3 = *(_QWORD *)(v6 + 56);
          }
        }
        ++v7;
      }
      while (v7 < (v3 - v4) >> 3);
    }
  }
  return result;
}

char *webrtc::GainControlImpl::PackRenderAudioBuffer(char *result, char **a2, double a3, float32x4_t a4, double a5, int8x16_t a6, double a7, double a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int8x16_t v18;
  float32x2_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  int16x8_t *v31;
  int8x16_t v32;
  unint64_t v33;
  int8x16_t *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  _WORD v50[8];
  uint64_t v51;

  v9 = *((_QWORD *)result + 9);
  v10 = *((_QWORD *)result + 7);
  if (v10 == 1)
  {
    v11 = *((_QWORD *)result + 11);
    if (!v11)
      v11 = *((_QWORD *)result + 10);
    if (v9)
    {
      v12 = **(int8x16_t ***)(v11 + 16);
      if (v9 >= 8)
      {
        v13 = v9 & 0xFFFFFFFFFFFFFFF8;
        v30 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
        v31 = (int16x8_t *)v50;
        a4.i64[0] = 0xC7000000C7000000;
        a4.i64[1] = 0xC7000000C7000000;
        v32.i64[0] = 0x3F0000003F000000;
        v32.i64[1] = 0x3F0000003F000000;
        a6.i64[0] = 0x8000000080000000;
        a6.i64[1] = 0x8000000080000000;
        v33 = v9 & 0xFFFFFFFFFFFFFFF8;
        v34 = v12;
        do
        {
          v35 = *v34;
          v36 = v34[1];
          v34 += 2;
          v37 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v35, (float32x4_t)v30), v30, v35);
          v38 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v36, (float32x4_t)v30), v30, v36);
          v39 = vbslq_s8((int8x16_t)vcgtq_f32(a4, (float32x4_t)v37), (int8x16_t)a4, v37);
          v40 = vbslq_s8((int8x16_t)vcgtq_f32(a4, (float32x4_t)v38), (int8x16_t)a4, v38);
          *v31++ = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v39, (float32x4_t)vbslq_s8(a6, v32, v39))), (int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v40, (float32x4_t)vbslq_s8(a6, v32, v40))));
          v33 -= 8;
        }
        while (v33);
        if (v9 == v13)
        {
LABEL_47:
          v29 = v9;
          goto LABEL_48;
        }
      }
      else
      {
        v13 = 0;
      }
      a4.i32[0] = 0.5;
      v41.i64[0] = 0x8000000080000000;
      v41.i64[1] = 0x8000000080000000;
      do
      {
        a6.i32[0] = v12->i32[v13];
        if (*(float *)a6.i32 > 32767.0)
          *(float *)a6.i32 = 32767.0;
        if (*(float *)a6.i32 < -32768.0)
          *(float *)a6.i32 = -32768.0;
        v50[v13++] = (int)(float)(*(float *)a6.i32 + *(float *)vbslq_s8(v41, (int8x16_t)a4, a6).i32);
      }
      while (v9 != v13);
      goto LABEL_47;
    }
LABEL_26:
    v29 = 0;
LABEL_48:
    if (v9)
      v48 = (char *)v50;
    else
      v48 = 0;
    v49 = *a2;
    a2[1] = *a2;
    return std::vector<short>::__insert_with_size[abi:sn180100]<short const*,short const*>((uint64_t)a2, v49, v48, &v48[2 * v29], v29);
  }
  if (!v9)
    goto LABEL_26;
  if ((int)v10 > 0)
  {
    v14 = 0;
    v15 = *((_QWORD *)result + 11);
    if (!v15)
      v15 = *((_QWORD *)result + 10);
    v16 = *(_QWORD *)(v15 + 8);
    v17 = *((_QWORD *)result + 7);
    a4.i32[0] = 0.5;
    v18.i64[0] = 0x8000000080000000;
    v18.i64[1] = 0x8000000080000000;
    v19 = (float32x2_t)vdup_n_s32(0x46FFFE00u);
    while (v17 >= 2)
    {
      a9 = 0uLL;
      v21 = v10 - (unint64_t)(v10 & 1);
      v22 = (_QWORD *)(v16 + 8);
      do
      {
        v23.i32[0] = *(_DWORD *)(*(v22 - 1) + 4 * v14);
        v23.i32[1] = *(_DWORD *)(*v22 + 4 * v14);
        v24 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v23, v19), (int8x8_t)v19, (int8x8_t)v23);
        v25 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)0xC7000000C7000000, v24), (int8x8_t)0xC7000000C7000000, (int8x8_t)v24);
        *(int32x2_t *)a9.i8 = vadd_s32(*(int32x2_t *)a9.i8, vcvt_s32_f32(vadd_f32(v25, (float32x2_t)vbsl_s8((int8x8_t)0x8000000080000000, (int8x8_t)0x3F0000003F000000, (int8x8_t)v25))));
        v22 += 2;
        v21 -= 2;
      }
      while (v21);
      *(int32x2_t *)a9.i8 = vadd_s32(vdup_lane_s32(*(int32x2_t *)a9.i8, 1), *(int32x2_t *)a9.i8);
      result = (char *)a9.u32[0];
      v20 = v10 - (unint64_t)(v10 & 1);
      if ((v10 & 1) != 0)
        goto LABEL_17;
LABEL_23:
      if (v14 == 160)
        goto LABEL_52;
      v50[v14++] = (int)result / (int)v10;
      if (v14 == v9)
        goto LABEL_47;
    }
    v20 = 0;
    LODWORD(result) = 0;
LABEL_17:
    v26 = v17 - v20;
    v27 = (uint64_t *)(v16 + 8 * v20);
    do
    {
      v28 = *v27++;
      a9.i32[0] = *(_DWORD *)(v28 + 4 * v14);
      if (*(float *)a9.i32 > 32767.0)
        *(float *)a9.i32 = 32767.0;
      if (*(float *)a9.i32 < -32768.0)
        *(float *)a9.i32 = -32768.0;
      result = (char *)((_DWORD)result
                                    + (int)(float)(*(float *)a9.i32 + *(float *)vbslq_s8(v18, (int8x16_t)a4, a9).i32));
      --v26;
    }
    while (v26);
    goto LABEL_23;
  }
  v42 = v9 - 1;
  if (v9 - 1 >= 0xA0)
    v42 = 160;
  if (v42 > 0xF)
  {
    v44 = v42 + 1;
    v45 = v44 & 0xF;
    if ((v44 & 0xF) == 0)
      v45 = 16;
    v43 = v44 - v45;
    v46 = &v51;
    v47 = v43;
    do
    {
      *((_OWORD *)v46 - 1) = 0uLL;
      *(_OWORD *)v46 = 0uLL;
      v46 += 4;
      v47 -= 16;
    }
    while (v47);
  }
  else
  {
    v43 = 0;
  }
  while (v43 != 160)
  {
    v50[v43++] = 0;
    if (v9 == v43)
      goto LABEL_47;
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t webrtc::GainControlImpl::AnalyzeCaptureAudio(uint64_t this, const webrtc::AudioBuffer *a2, double a3, int8x16_t a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  uint64_t v10;
  int v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 *v20[3];
  char v21;
  uint64_t v22;
  _QWORD v23[41];

  v10 = this;
  v23[40] = *MEMORY[0x24BDAC8D0];
  v20[0] = (__int16 *)&v21;
  v20[1] = (__int16 *)&v22;
  v20[2] = (__int16 *)v23;
  v11 = *(_DWORD *)(this + 16);
  if (v11)
  {
    if (v11 == 1 && *(_QWORD *)(this + 56) != *(_QWORD *)(this + 48))
    {
      v12 = 0;
      while (1)
      {
        v19 = 0;
        this = (uint64_t)webrtc::AudioBuffer::ExportSplitChannelData((float32x4_t *)a2, v12, v20, a3, a4, a5, a6, a7, a8, a9);
        v14 = *(_QWORD *)(v10 + 48);
        if (v12 >= (*(_QWORD *)(v10 + 56) - v14) >> 3)
          break;
        this = webrtc::WebRtcAgc_VirtualMic(*(webrtc **)(*(_QWORD *)(v14 + 8 * v12) + 48), v20, *((__int16 *const **)a2 + 8), *((_QWORD *)a2 + 9), *(_DWORD *)(v10 + 40), &v19, v13);
        v15 = *(_QWORD *)(v10 + 72);
        if (v12 >= (*(_QWORD *)(v10 + 80) - v15) >> 2)
          break;
        *(_DWORD *)(v15 + 4 * v12) = v19;
        if ((_DWORD)this)
          return 0xFFFFFFFFLL;
        if (++v12 >= (uint64_t)(*(_QWORD *)(v10 + 56) - *(_QWORD *)(v10 + 48)) >> 3)
          return 0;
      }
LABEL_19:
      __break(1u);
      return this;
    }
  }
  else if (*(_QWORD *)(this + 56) != *(_QWORD *)(this + 48))
  {
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(v10 + 72);
      if (v16 >= (*(_QWORD *)(v10 + 80) - v17) >> 2)
        break;
      *(_DWORD *)(v17 + 4 * v16) = *(_DWORD *)(v10 + 40);
      this = (uint64_t)webrtc::AudioBuffer::ExportSplitChannelData((float32x4_t *)a2, v16, v20, a3, a4, a5, a6, a7, a8, a9);
      v18 = *(_QWORD *)(v10 + 48);
      if (v16 >= (*(_QWORD *)(v10 + 56) - v18) >> 3)
        break;
      this = webrtc::WebRtcAgc_AddMic(*(webrtc **)(*(_QWORD *)(v18 + 8 * v16) + 48), v20, *((__int16 *const **)a2 + 8), *((_QWORD *)a2 + 9));
      if ((_DWORD)this)
        return 0xFFFFFFFFLL;
      if (++v16 >= (uint64_t)(*(_QWORD *)(v10 + 56) - *(_QWORD *)(v10 + 48)) >> 3)
        return 0;
    }
    goto LABEL_19;
  }
  return 0;
}

uint64_t webrtc::GainControlImpl::ProcessCaptureAudio(webrtc::GainControlImpl *this, webrtc::AudioBuffer *a2, int *a3, double a4, int8x16_t a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t *v38;
  uint64_t j;
  float32x4_t v40;
  float v41;
  float32_t v42;
  float32x4_t v43;
  float32_t v44;
  unsigned int v45;
  unsigned int v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  signed int *v50;
  signed int *v51;
  uint64_t v52;
  signed int v53;
  int *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int32x4_t v63;
  int32x4_t *v64;
  int32x4_t v65;
  int v66;
  uint64_t result;
  signed int *v68;
  unint64_t v69;
  unint64_t v70;
  signed int v71;
  signed int v72;
  int *v73;
  char v74;
  int v75;
  __int16 *v76[2];
  _QWORD *v77;
  _OWORD v78[2];
  float32x2_t v79;
  float v80;
  uint64_t v81;
  _QWORD v82[42];

  v82[41] = *MEMORY[0x24BDAC8D0];
  if (!*((_DWORD *)this + 4) && !*((_BYTE *)this + 44))
    return 4294967285;
  *((_BYTE *)this + 45) = 0;
  v13 = *((_QWORD *)this + 7);
  if (v13 == *((_QWORD *)this + 6))
  {
    v15 = 0;
    v22 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v76[0] = (__int16 *)v78;
      v76[1] = (__int16 *)&v81;
      v77 = v82;
      webrtc::AudioBuffer::ExportSplitChannelData((float32x4_t *)a2, v14, v76, a4, a5, a6, a7, a8, a9, a10);
      v75 = 0;
      v74 = 0;
      v16 = *((_QWORD *)this + 6);
      if (v14 >= (*((_QWORD *)this + 7) - v16) >> 3)
        goto LABEL_68;
      v17 = *((_QWORD *)this + 9);
      if (v14 >= (*((_QWORD *)this + 10) - v17) >> 2)
        goto LABEL_68;
      v18 = webrtc::WebRtcAgc_Analyze(*(webrtc **)(*(_QWORD *)(v16 + 8 * v14) + 48), v76, *((const __int16 *const **)a2 + 8), *((_QWORD *)a2 + 9), (void *)*(unsigned int *)(v17 + 4 * v14), &v75, a3, &v74, *(unsigned __int8 **)(v16 + 8 * v14), v73);
      v19 = *((_QWORD *)this + 9);
      if (v14 >= (*((_QWORD *)this + 10) - v19) >> 2)
        goto LABEL_68;
      *(_DWORD *)(v19 + 4 * v14) = v75;
      v15 |= v18 != 0;
      if (*((_BYTE *)this + 45))
        v20 = 1;
      else
        v20 = v74 == 1;
      v21 = v20;
      *((_BYTE *)this + 45) = v21;
      ++v14;
      v13 = *((_QWORD *)this + 6);
      v22 = (*((_QWORD *)this + 7) - v13) >> 3;
    }
    while (v14 < v22);
    if (v22 >= 2)
    {
      v23 = 0;
      for (i = 1; i != v22; ++i)
      {
        if (v22 <= v23)
          goto LABEL_68;
        if (*(_DWORD *)(*(_QWORD *)(v13 + 8 * v23) + 40) < *(_DWORD *)(*(_QWORD *)(v13 + 8 * i) + 40))
          v23 = i;
      }
      if (v22 <= v23)
LABEL_68:
        __break(1u);
      goto LABEL_26;
    }
  }
  if (!v22)
    goto LABEL_36;
  v23 = 0;
LABEL_26:
  v25 = 0;
  v26 = *((_QWORD *)a2 + 8);
  v27 = *((_QWORD *)a2 + 11);
  v28 = (float32x4_t)vdupq_n_s32(0x37800000u);
  v29.i64[0] = 0xC7000000C7000000;
  v29.i64[1] = 0xC7000000C7000000;
  v30 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
  do
  {
    v31 = v27;
    if (!v27)
      v31 = *((_QWORD *)a2 + 10);
    v32 = *(_QWORD *)(v13 + 8 * v23);
    v33 = *(_QWORD *)(v31 + 56);
    v34 = *(_QWORD *)(v31 + 16);
    v35 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(v32 + 16)), v28);
    v78[0] = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)v32), v28);
    v78[1] = v35;
    v79 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(v32 + 32)), *(float32x2_t *)v28.f32);
    v80 = (float)*(int *)(v32 + 40) * 0.000015259;
    if (v26)
    {
      v36 = 0;
      v37 = v34 + 8 * v33 * v25;
      do
      {
        v38 = (float32x4_t *)(*(_QWORD *)(v37 + 8 * v36) + 32);
        for (j = 4; j != 44; j += 4)
        {
          v40.i32[0] = *(_DWORD *)((char *)&v77 + j + 4);
          v41 = (float)(*(float *)((char *)v78 + j) - v40.f32[0]) * 0.0625;
          v42 = v41 + (float)(v41 + (float)(v40.f32[0] + v41));
          v40.f32[1] = v40.f32[0] + v41;
          v40.f32[2] = v41 + (float)(v40.f32[0] + v41);
          v40.f32[3] = v42;
          v43.f32[0] = v41 + v42;
          v44 = v41 + (float)(v41 + v42);
          *(float *)&v45 = v41 + v44;
          v43.f32[1] = v44;
          *(float *)&v46 = v41 + (float)(v41 + v44);
          v43.i64[1] = __PAIR64__(v46, v45);
          v47.f32[0] = v41 + *(float *)&v46;
          v47.f32[1] = v41 + (float)(v41 + *(float *)&v46);
          v48 = vminnmq_f32(vmaxnmq_f32(vmulq_f32(v43, v38[-1]), v29), v30);
          v47.f32[2] = v41 + v47.f32[1];
          v38[-2] = vminnmq_f32(vmaxnmq_f32(vmulq_f32(v40, v38[-2]), v29), v30);
          v38[-1] = v48;
          v47.f32[3] = v41 + (float)(v41 + v47.f32[1]);
          v40.f32[0] = v41 + v47.f32[3];
          v40.f32[1] = v41 + (float)(v41 + v47.f32[3]);
          v40.f32[2] = v41 + v40.f32[1];
          v40.f32[3] = v41 + (float)(v41 + v40.f32[1]);
          v49 = vmaxnmq_f32(vmulq_f32(v40, v38[1]), v29);
          *v38 = vminnmq_f32(vmaxnmq_f32(vmulq_f32(v47, *v38), v29), v30);
          v38[1] = vminnmq_f32(v49, v30);
          v38 += 4;
        }
        ++v36;
      }
      while (v36 != v26);
    }
    ++v25;
  }
  while (v25 != v22);
LABEL_36:
  if (!*((_DWORD *)this + 4))
  {
    v51 = (signed int *)*((_QWORD *)this + 9);
    v50 = (signed int *)*((_QWORD *)this + 10);
    v52 = (char *)v50 - (char *)v51;
    if (v50 == v51)
      goto LABEL_68;
    v53 = *v51;
    *((_DWORD *)this + 10) = *v51;
    v54 = (int *)((char *)this + 40);
    v55 = v22 - 2;
    if (v22 >= 2)
    {
      v56 = v52 >> 2;
      if (v56 <= 1)
        v56 = 1;
      if (v56 - 1 >= v55)
        v57 = v22 - 2;
      else
        v57 = v56 - 1;
      if (v57 < 0x10)
        goto LABEL_58;
      if (v56 - 1 < v55)
        v55 = v56 - 1;
      if (v54 >= &v51[v55 + 2] || v51 + 1 >= (signed int *)this + 11)
      {
        v59 = v57 + 1;
        v60 = (v57 + 1) & 7;
        if (!v60)
          v60 = 8;
        v61 = v59 - v60;
        v62 = v61 + 1;
        v63 = vdupq_n_s32(v53);
        v64 = (int32x4_t *)(v51 + 5);
        v65 = v63;
        do
        {
          v63 = vminq_s32(v64[-1], v63);
          v65 = vminq_s32(*v64, v65);
          v64 += 2;
          v61 -= 8;
        }
        while (v61);
        v66 = vminvq_s32(vminq_s32(v63, v65));
        *v54 = v66;
        v53 = v66;
      }
      else
      {
LABEL_58:
        v62 = 1;
      }
      v68 = &v51[v62];
      v69 = v22 - v62;
      v70 = v56 - v62;
      while (v70)
      {
        v72 = *v68++;
        v71 = v72;
        if (v72 < v53)
          v53 = v71;
        *v54 = v53;
        --v70;
        if (!--v69)
          goto LABEL_64;
      }
      goto LABEL_68;
    }
  }
LABEL_64:
  if ((v15 & 1) != 0)
    return 0xFFFFFFFFLL;
  result = 0;
  *((_BYTE *)this + 44) = 0;
  return result;
}

uint64_t webrtc::GainControlImpl::set_stream_analog_level(webrtc::GainControlImpl *this, int a2)
{
  uint64_t result;

  *((_BYTE *)this + 44) = 1;
  if (*((_DWORD *)this + 5) > a2)
    return 4294967290;
  if (*((_DWORD *)this + 6) < a2)
    return 4294967290;
  result = 0;
  *((_DWORD *)this + 10) = a2;
  return result;
}

uint64_t webrtc::GainControlImpl::stream_analog_level(webrtc::GainControlImpl *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t webrtc::GainControlImpl::set_mode(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
    return 4294967290;
  *(_DWORD *)(result + 16) = a2;
  if (*(_BYTE *)(result + 104) && *(_BYTE *)(result + 116))
  {
    webrtc::GainControlImpl::Initialize((webrtc::GainControlImpl *)result, *(_QWORD *)(result + 96), *(_DWORD *)(result + 112));
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void webrtc::GainControlImpl::Initialize(webrtc::GainControlImpl *this, unint64_t a2, int a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;

  *((_QWORD *)this + 12) = a2;
  *((_BYTE *)this + 104) = 1;
  *((_DWORD *)this + 28) = a3;
  *((_BYTE *)this + 116) = 1;
  v5 = (_QWORD *)*((_QWORD *)this + 6);
  v6 = *((_QWORD *)this + 7);
  v7 = (_QWORD *)v6;
  v8 = v6 - (_QWORD)v5;
  v9 = (uint64_t)(v6 - (_QWORD)v5) >> 3;
  v10 = a2 - v9;
  if (a2 <= v9)
  {
    if (a2 < v9)
    {
      v38 = &v5[a2];
      if ((_QWORD *)v6 != v38)
      {
        do
        {
          v40 = *--v7;
          v39 = v40;
          *v7 = 0;
          if (v40)
          {
            free(*(void **)(v39 + 48));
            MEMORY[0x20BD0ADEC](v39, 0x1080C40D70B5887);
          }
        }
        while (v7 != v38);
      }
      *((_QWORD *)this + 7) = v38;
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 8);
    if (v10 <= (uint64_t)(v11 - v6) >> 3)
    {
      v41 = v6 + 8 * v10;
      v42 = 8 * a2 - 8 * v9;
      do
      {
        if (!v7)
          goto LABEL_75;
        *v7++ = 0;
        v42 -= 8;
      }
      while (v42);
      *((_QWORD *)this + 7) = v41;
    }
    else
    {
      if (a2 >> 61)
        goto LABEL_76;
      v12 = v11 - (_QWORD)v5;
      v13 = (v11 - (uint64_t)v5) >> 2;
      if (v13 <= a2)
        v13 = a2;
      v14 = v12 >= 0x7FFFFFFFFFFFFFF8;
      v15 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v14)
        v15 = v13;
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v16 = 8 * v15;
      v17 = (char *)operator new(8 * v15);
      v18 = (unint64_t)&v17[8 * v9];
      v19 = &v17[8 * a2];
      v20 = 8 * a2 - v8 - 8;
      v21 = (char *)v18;
      if (v20 < 0x18)
        goto LABEL_80;
      v22 = (v20 >> 3) + 1;
      v21 = (char *)(v18 + 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL));
      v23 = (_OWORD *)(v18 + 16);
      v24 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        *(v23 - 1) = 0uLL;
        *v23 = 0uLL;
        v23 += 2;
        v24 -= 4;
      }
      while (v24);
      if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_80:
        do
        {
          *(_QWORD *)v21 = 0;
          v21 += 8;
        }
        while (v21 != v19);
      }
      v25 = &v17[v16];
      if ((_QWORD *)v6 == v5)
      {
        *((_QWORD *)this + 6) = v18;
        *((_QWORD *)this + 7) = v19;
        *((_QWORD *)this + 8) = v25;
      }
      else
      {
        v26 = v6 - (_QWORD)v5 - 8;
        if (v26 < 0x78
          || v6 - (v26 & 0xFFFFFFFFFFFFFFF8) - 8 < v18
          && (unint64_t)&v17[v8 - (v26 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
        {
          goto LABEL_81;
        }
        v27 = (v26 >> 3) + 1;
        v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        v7 = (_QWORD *)(v6 - v28);
        v18 -= v28;
        v29 = &v17[8 * v9 - 16];
        v30 = (__int128 *)(v6 - 16);
        v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = *(v30 - 1);
          v32 = *v30;
          *(v30 - 1) = 0uLL;
          *v30 = 0uLL;
          *((_OWORD *)v29 - 1) = v33;
          *(_OWORD *)v29 = v32;
          v29 -= 32;
          v30 -= 2;
          v31 -= 4;
        }
        while (v31);
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_81:
          do
          {
            v34 = *--v7;
            *v7 = 0;
            *(_QWORD *)(v18 - 8) = v34;
            v18 -= 8;
          }
          while (v7 != v5);
        }
        v7 = (_QWORD *)*((_QWORD *)this + 6);
        v35 = (_QWORD *)*((_QWORD *)this + 7);
        *((_QWORD *)this + 6) = v18;
        *((_QWORD *)this + 7) = v19;
        *((_QWORD *)this + 8) = v25;
        while (v35 != v7)
        {
          v37 = *--v35;
          v36 = v37;
          *v35 = 0;
          if (v37)
          {
            free(*(void **)(v36 + 48));
            MEMORY[0x20BD0ADEC](v36, 0x1080C40D70B5887);
          }
        }
      }
      if (v7)
        operator delete(v7);
    }
  }
  if (!*((_BYTE *)this + 104))
  {
LABEL_75:
    __break(1u);
LABEL_76:
    abort();
  }
  v43 = *((_QWORD *)this + 12);
  v44 = *((_QWORD *)this + 9);
  v45 = (*((_QWORD *)this + 10) - v44) >> 2;
  if (v43 <= v45)
  {
    if (v43 < v45)
      *((_QWORD *)this + 10) = v44 + 4 * v43;
  }
  else
  {
    std::vector<int>::__append((std::vector<unsigned int> *)this + 3, v43 - v45);
  }
  v46 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 7) != v46)
  {
    v47 = 0;
    do
    {
      if (!*(_QWORD *)(v46 + 8 * v47))
      {
        v48 = operator new();
        v49 = malloc_type_malloc(0x29CuLL, 0x10000401F2F63CFuLL);
        v49[6] = 0;
        *(_QWORD *)(v48 + 48) = v49;
        v50 = *(_QWORD *)(v46 + 8 * v47);
        *(_QWORD *)(v46 + 8 * v47) = v48;
        if (v50)
        {
          free(*(void **)(v50 + 48));
          MEMORY[0x20BD0ADEC](v50, 0x1080C40D70B5887);
        }
      }
      v51 = *((_QWORD *)this + 6);
      if (v47 >= (*((_QWORD *)this + 7) - v51) >> 3 || !*((_BYTE *)this + 116))
        goto LABEL_75;
      v52 = *((_DWORD *)this + 4);
      v53 = v52 < 3 ? v52 + 1 : -1;
      webrtc::WebRtcAgc_Init(*(webrtc **)(*(_QWORD *)(v51 + 8 * v47) + 48), (void *)*((unsigned int *)this + 5), *((_DWORD *)this + 6), v53, *((_DWORD *)this + 28));
      v54 = *((_QWORD *)this + 9);
      if (v47 >= (*((_QWORD *)this + 10) - v54) >> 2)
        goto LABEL_75;
      *(_DWORD *)(v54 + 4 * v47++) = *((_DWORD *)this + 10);
      v46 = *((_QWORD *)this + 6);
      v55 = *((_QWORD *)this + 7);
    }
    while (v47 < (v55 - v46) >> 3);
    if (v55 != v46)
    {
      v56 = 0;
      v57 = *((unsigned __int8 *)this + 28);
      v59 = *((_DWORD *)this + 8);
      v58 = *((_DWORD *)this + 9);
      do
      {
        v60 = *(_QWORD *)(*(_QWORD *)(v46 + 8 * v56) + 48);
        if (v60)
        {
          if (*(_WORD *)(v60 + 24) == 42)
          {
            *(_BYTE *)(v60 + 10) = v57;
            *(_WORD *)(v60 + 4) = v58;
            if ((unsigned __int16)v59 < 0x20u)
            {
              *(_WORD *)(v60 + 6) = v59;
              v61 = *(unsigned __int16 *)(v60 + 8);
              v62 = v58;
              if (v61 == 3)
              {
                *(_WORD *)(v60 + 4) = v59 + v58;
                v62 = v59 + v58;
              }
              if ((unsigned __int16)((__int16)(5 * v62 + 5) / 11) <= 0x7FFBu)
                v63 = (__int16)(5 * v62 + 5) / 11 + 4;
              else
                v63 = 4;
              if (v61 == 3)
                v64 = v62;
              else
                v64 = v63;
              *(_WORD *)(v60 + 58) = v64;
              *(_WORD *)(v60 + 56) = 20;
              *(_OWORD *)(v60 + 28) = xmmword_208F04AB0;
              *(_QWORD *)(v60 + 44) = 0x287984C00813652;
              *(_DWORD *)(v60 + 52) = 4244080;
              *(_QWORD *)(v60 + 92) = 0xA2AB200101CFECLL;
              if (webrtc::WebRtcAgc_CalculateGainTable((webrtc *)(v60 + 420), (int *)v62, (__int16)v59, v57, v64) != -1)
              {
                *(_WORD *)(v60 + 20) = v58;
                *(_BYTE *)(v60 + 22) = v57;
                *(_WORD *)(v60 + 18) = v59;
              }
            }
            else
            {
              *(_WORD *)(v60 + 26) = 18004;
            }
          }
          else
          {
            *(_WORD *)(v60 + 26) = 18002;
          }
        }
        ++v56;
        v46 = *((_QWORD *)this + 6);
      }
      while (v56 < (*((_QWORD *)this + 7) - v46) >> 3);
    }
  }
}

uint64_t webrtc::GainControlImpl::set_analog_level_limits(uint64_t this, int a2, int a3)
{
  uint64_t v3;

  v3 = 4294967290;
  if (a3 < a2 || a2 < 0 || a3 >= 0x10000)
    return v3;
  *(_DWORD *)(this + 20) = a2;
  *(_DWORD *)(this + 24) = a3;
  if (*(_BYTE *)(this + 104) && *(_BYTE *)(this + 116))
  {
    webrtc::GainControlImpl::Initialize((webrtc::GainControlImpl *)this, *(_QWORD *)(this + 96), *(_DWORD *)(this + 112));
    return 0;
  }
  __break(1u);
  return this;
}

uint64_t webrtc::GainControlImpl::set_target_level_dbfs(webrtc::GainControlImpl *this, unsigned int a2)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;

  if (a2 <= 0x1F)
  {
    v3 = a2;
    *((_DWORD *)this + 8) = a2;
    v5 = *((_QWORD *)this + 6);
    if (*((_QWORD *)this + 7) == v5)
      return 0;
    v2 = 0;
    v6 = 0;
    v7 = *((unsigned __int8 *)this + 28);
    v8 = a2 | (*((_DWORD *)this + 9) << 16);
    v9 = a2 + HIWORD(v8);
    v10 = HIWORD(v8);
    while (1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v5 + 8 * v6) + 48);
      if (!v11)
        goto LABEL_6;
      if (*(_WORD *)(v11 + 24) == 42)
      {
        *(_BYTE *)(v11 + 10) = v7;
        *(_WORD *)(v11 + 4) = v10;
        *(_WORD *)(v11 + 6) = v3;
        v12 = *(unsigned __int16 *)(v11 + 8);
        v13 = v10;
        if (v12 == 3)
        {
          *(_WORD *)(v11 + 4) = v9;
          v13 = v9;
        }
        if ((unsigned __int16)((__int16)(5 * v13 + 5) / 11) <= 0x7FFBu)
          v14 = (__int16)(5 * v13 + 5) / 11 + 4;
        else
          v14 = 4;
        if (v12 == 3)
          v15 = v13;
        else
          v15 = v14;
        *(_WORD *)(v11 + 58) = v15;
        *(_WORD *)(v11 + 56) = 20;
        *(_OWORD *)(v11 + 28) = xmmword_208F04AB0;
        *(_QWORD *)(v11 + 44) = 0x287984C00813652;
        *(_DWORD *)(v11 + 52) = 4244080;
        *(_QWORD *)(v11 + 92) = 0xA2AB200101CFECLL;
        if (webrtc::WebRtcAgc_CalculateGainTable((webrtc *)(v11 + 420), (int *)v13, v3, v7, v15) == -1)goto LABEL_6;
        *(_WORD *)(v11 + 20) = v10;
        *(_BYTE *)(v11 + 22) = v7;
        *(_WORD *)(v11 + 18) = v3;
        ++v6;
        v5 = *((_QWORD *)this + 6);
        if (v6 >= (*((_QWORD *)this + 7) - v5) >> 3)
          return v2;
      }
      else
      {
        *(_WORD *)(v11 + 26) = 18002;
LABEL_6:
        v2 = 0xFFFFFFFFLL;
        ++v6;
        v5 = *((_QWORD *)this + 6);
        if (v6 >= (*((_QWORD *)this + 7) - v5) >> 3)
          return v2;
      }
    }
  }
  return 4294967290;
}

uint64_t webrtc::GainControlImpl::set_compression_gain_db(webrtc::GainControlImpl *this, unsigned int a2)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  v2 = a2;
  if (a2 >= 0x5B)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/gain_control_impl.cc");
    return 4294967290;
  }
  *((_DWORD *)this + 9) = a2;
  v12 = *((_QWORD *)this + 6);
  v13 = *((_QWORD *)this + 7) - v12;
  if (!v13)
    return 0;
  v14 = *((unsigned __int8 *)this + 28);
  v15 = *((_DWORD *)this + 8);
  if ((unsigned __int16)v15 <= 0x1Fu)
  {
    v10 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v12 + 8 * v19) + 48);
      if (!v20)
        goto LABEL_15;
      if (*(_WORD *)(v20 + 24) == 42)
      {
        *(_BYTE *)(v20 + 10) = v14;
        *(_WORD *)(v20 + 4) = v2;
        *(_WORD *)(v20 + 6) = v15;
        v21 = *(unsigned __int16 *)(v20 + 8);
        v22 = v2;
        if (v21 == 3)
        {
          *(_WORD *)(v20 + 4) = v15 + v2;
          v22 = v15 + v2;
        }
        if ((unsigned __int16)((__int16)(5 * v22 + 5) / 11) <= 0x7FFBu)
          v23 = (__int16)(5 * v22 + 5) / 11 + 4;
        else
          v23 = 4;
        if (v21 == 3)
          v24 = v22;
        else
          v24 = v23;
        *(_WORD *)(v20 + 58) = v24;
        *(_WORD *)(v20 + 56) = 20;
        *(_OWORD *)(v20 + 28) = xmmword_208F04AB0;
        *(_QWORD *)(v20 + 44) = 0x287984C00813652;
        *(_DWORD *)(v20 + 52) = 4244080;
        *(_QWORD *)(v20 + 92) = 0xA2AB200101CFECLL;
        if (webrtc::WebRtcAgc_CalculateGainTable((webrtc *)(v20 + 420), (int *)v22, (__int16)v15, v14, v24) == -1)goto LABEL_15;
        *(_WORD *)(v20 + 20) = v2;
        *(_BYTE *)(v20 + 22) = v14;
        *(_WORD *)(v20 + 18) = v15;
        ++v19;
        v12 = *((_QWORD *)this + 6);
        if (v19 >= (*((_QWORD *)this + 7) - v12) >> 3)
          return v10;
      }
      else
      {
        *(_WORD *)(v20 + 26) = 18002;
LABEL_15:
        v10 = 0xFFFFFFFFLL;
        ++v19;
        v12 = *((_QWORD *)this + 6);
        if (v19 >= (*((_QWORD *)this + 7) - v12) >> 3)
          return v10;
      }
    }
  }
  v16 = v13 >> 3;
  if ((unint64_t)(v13 >> 3) <= 1)
    v16 = 1;
  v17 = *(_QWORD *)(*(_QWORD *)v12 + 48);
  if (v17)
  {
    if (*(_WORD *)(v17 + 24) == 42)
    {
      *(_BYTE *)(v17 + 10) = v14;
      *(_WORD *)(v17 + 4) = a2;
      v18 = 18004;
    }
    else
    {
      v18 = 18002;
    }
    *(_WORD *)(v17 + 26) = v18;
  }
  if ((unint64_t)v13 >= 0x10)
  {
    v26 = v16 - 1;
    v27 = v12 + 8;
    do
    {
      v29 = *(_QWORD *)(*(_QWORD *)v27 + 48);
      if (v29)
      {
        if (*(_WORD *)(v29 + 24) == 42)
        {
          *(_BYTE *)(v29 + 10) = v14;
          *(_WORD *)(v29 + 4) = a2;
          v28 = 18004;
        }
        else
        {
          v28 = 18002;
        }
        *(_WORD *)(v29 + 26) = v28;
      }
      v27 += 8;
      --v26;
    }
    while (v26);
  }
  return 0xFFFFFFFFLL;
}

uint64_t webrtc::GainControlImpl::enable_limiter(webrtc::GainControlImpl *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  *((_BYTE *)this + 28) = a2;
  v2 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7) - v2;
  if (!v3)
    return 0;
  v7 = *((_DWORD *)this + 8);
  v6 = *((_DWORD *)this + 9);
  if ((unsigned __int16)v7 <= 0x1Fu)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * v12) + 48);
      if (!v13)
        goto LABEL_11;
      if (*(_WORD *)(v13 + 24) == 42)
      {
        *(_BYTE *)(v13 + 10) = a2;
        *(_WORD *)(v13 + 4) = v6;
        *(_WORD *)(v13 + 6) = v7;
        v14 = *(unsigned __int16 *)(v13 + 8);
        v15 = v6;
        if (v14 == 3)
        {
          *(_WORD *)(v13 + 4) = v7 + v6;
          v15 = v7 + v6;
        }
        if ((unsigned __int16)((__int16)(5 * v15 + 5) / 11) <= 0x7FFBu)
          v16 = (__int16)(5 * v15 + 5) / 11 + 4;
        else
          v16 = 4;
        if (v14 == 3)
          v17 = v15;
        else
          v17 = v16;
        *(_WORD *)(v13 + 58) = v17;
        *(_WORD *)(v13 + 56) = 20;
        *(_OWORD *)(v13 + 28) = xmmword_208F04AB0;
        *(_QWORD *)(v13 + 44) = 0x287984C00813652;
        *(_DWORD *)(v13 + 52) = 4244080;
        *(_QWORD *)(v13 + 92) = 0xA2AB200101CFECLL;
        if (webrtc::WebRtcAgc_CalculateGainTable((webrtc *)(v13 + 420), (int *)v15, (__int16)v7, a2, v17) == -1)goto LABEL_11;
        *(_WORD *)(v13 + 20) = v6;
        *(_BYTE *)(v13 + 22) = a2;
        *(_WORD *)(v13 + 18) = v7;
        ++v12;
        v2 = *((_QWORD *)this + 6);
        if (v12 >= (*((_QWORD *)this + 7) - v2) >> 3)
          return v11;
      }
      else
      {
        *(_WORD *)(v13 + 26) = 18002;
LABEL_11:
        v11 = 0xFFFFFFFFLL;
        ++v12;
        v2 = *((_QWORD *)this + 6);
        if (v12 >= (*((_QWORD *)this + 7) - v2) >> 3)
          return v11;
      }
    }
  }
  v8 = v3 >> 3;
  if ((unint64_t)(v3 >> 3) <= 1)
    v8 = 1;
  v9 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  if (v9)
  {
    if (*(_WORD *)(v9 + 24) == 42)
    {
      *(_BYTE *)(v9 + 10) = a2;
      *(_WORD *)(v9 + 4) = v6;
      v10 = 18004;
    }
    else
    {
      v10 = 18002;
    }
    *(_WORD *)(v9 + 26) = v10;
  }
  if ((unint64_t)v3 >= 0x10)
  {
    v19 = v8 - 1;
    v20 = v2 + 8;
    do
    {
      v22 = *(_QWORD *)(*(_QWORD *)v20 + 48);
      if (v22)
      {
        if (*(_WORD *)(v22 + 24) == 42)
        {
          *(_BYTE *)(v22 + 10) = a2;
          *(_WORD *)(v22 + 4) = v6;
          v21 = 18004;
        }
        else
        {
          v21 = 18002;
        }
        *(_WORD *)(v22 + 26) = v21;
      }
      v20 += 8;
      --v19;
    }
    while (v19);
  }
  return 0xFFFFFFFFLL;
}

uint64_t webrtc::GainControlImpl::mode(webrtc::GainControlImpl *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t webrtc::GainControlImpl::target_level_dbfs(webrtc::GainControlImpl *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t webrtc::GainControlImpl::compression_gain_db(webrtc::GainControlImpl *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t webrtc::GainControlImpl::is_limiter_enabled(webrtc::GainControlImpl *this)
{
  return *((unsigned __int8 *)this + 28);
}

uint64_t webrtc::GainControlImpl::analog_level_minimum(webrtc::GainControlImpl *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t webrtc::GainControlImpl::analog_level_maximum(webrtc::GainControlImpl *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t webrtc::GainControlImpl::stream_is_saturated(webrtc::GainControlImpl *this)
{
  return *((unsigned __int8 *)this + 45);
}

uint64_t webrtc::GainController2::GainController2(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v12;
  unsigned int v13;
  float v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t i;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  int v64;
  float v65;
  uint64_t v66;
  void *__p[2];
  char v68;

  webrtc::field_trial::FindFullName((size_t)"WebRTC-Agc2SimdSse2KillSwitch", 0x1DuLL, (size_t *)__p);
  if (v68 < 0)
    operator delete(__p[0]);
  webrtc::field_trial::FindFullName((size_t)"WebRTC-Agc2SimdAvx2KillSwitch", 0x1DuLL, (size_t *)__p);
  if (v68 < 0)
    operator delete(__p[0]);
  webrtc::field_trial::FindFullName((size_t)"WebRTC-Agc2SimdNeonKillSwitch", 0x1DuLL, (size_t *)__p);
  if (v68 < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a1 + 2) = 0;
  *(_WORD *)a1 = 0;
  v12 = a1 + 3;
  do
    v13 = __ldaxr((unsigned int *)&webrtc::GainController2::instance_count_);
  while (__stlxr(v13 + 1, (unsigned int *)&webrtc::GainController2::instance_count_));
  v14 = __exp10f(*(float *)(a2 + 28) / 20.0);
  *(_OWORD *)(a1 + 24) = 0u;
  v15 = (uint64_t *)(a1 + 24);
  *(_BYTE *)(a1 + 4) = 0;
  *(float *)(a1 + 8) = v14;
  *(float *)(a1 + 12) = v14;
  *(_QWORD *)(a1 + 16) = 0xBF800000FFFFFFFFLL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  webrtc::InterpolatedGainCurve::InterpolatedGainCurve(a1 + 72, a1 + 3, "Agc2", 4uLL);
  *(_QWORD *)(a1 + 160) = v12;
  *(_DWORD *)(a1 + 168) = 0;
  v20 = (10 * a4 % 1000);
  if ((_DWORD)v20 || (*(_DWORD *)(a1 + 172) = a4 / 100, v20 = (a4 / 100 % 20), (_DWORD)v20))
  {
    result = (uint64_t)rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v16, v17, v18, v19, v20);
  }
  else
  {
    *(_DWORD *)(a1 + 176) = a4 / 2000;
    *(_QWORD *)(a1 + 184) = v12;
    bzero((void *)(a1 + 192), 0x7D4uLL);
    *(_QWORD *)(a1 + 2196) = 1065353216;
    *(_BYTE *)(a1 + 2204) = 0;
    *(_BYTE *)(a1 + 2208) = 0;
    v21 = (_BYTE *)(a2 + 4);
    if (*(unsigned __int8 *)(a2 + 1) | *(unsigned __int8 *)(a2 + 4))
    {
      v22 = operator new();
      v23 = v22;
      *(_QWORD *)v22 = v12;
      v24 = (float)(-20.0 - *(float *)(a2 + 16)) - *(float *)(a2 + 8);
      v25 = 30.0;
      if (v24 < 30.0)
        v25 = (float)(-20.0 - *(float *)(a2 + 16)) - *(float *)(a2 + 8);
      if (v24 > -90.0)
        v26 = v25;
      else
        v26 = -90.0;
      *(float *)(v22 + 8) = v26;
      *(_BYTE *)(v22 + 44) = 0;
      *(_QWORD *)(v22 + 12) = 0x1900000000CLL;
      *(float *)(v22 + 20) = v26;
      *(_QWORD *)(v22 + 24) = 0x1903F800000;
      *(float *)(v22 + 32) = v26;
      *(_DWORD *)(v22 + 36) = 1065353216;
      *(float *)(v22 + 40) = v26;
      *(_DWORD *)(v22 + 48) = 0;
      v27 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v23;
      if (v27)
        MEMORY[0x20BD0ADEC](v27, 0x1060C40D924619CLL);
      if (a6)
      {
        v28 = operator new();
        v29 = webrtc::VoiceActivityDetectorWrapper::VoiceActivityDetectorWrapper(v28, 1500, a1, a4);
        v30 = *(_QWORD **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v29;
        if (v30)
        {
          v31 = (void *)v30[12];
          if (v31)
          {
            v30[13] = v31;
            operator delete(v31);
          }
          v32 = v30[11];
          v30[11] = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          webrtc::PushResampler<float>::~PushResampler(v30 + 2);
          MEMORY[0x20BD0ADEC](v30, 0x10A0C40915EBB22);
        }
      }
    }
    if (!*(_BYTE *)(a2 + 1))
      goto LABEL_57;
    v33 = operator new();
    result = webrtc::InputVolumeController::InputVolumeController(v33, a5, a3);
    v35 = *(_QWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = result;
    if (v35)
    {
      v36 = (_QWORD *)v35[9];
      if (v36)
      {
        v37 = (_QWORD *)v35[10];
        v38 = (void *)v35[9];
        if (v37 != v36)
        {
          do
          {
            v40 = *--v37;
            v39 = v40;
            *v37 = 0;
            if (v40)
              MEMORY[0x20BD0ADEC](v39, 0x1000C4088480CCALL);
          }
          while (v37 != v36);
          v38 = (void *)v35[9];
        }
        v35[10] = v36;
        operator delete(v38);
      }
      v41 = v35[5];
      v35[5] = 0;
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      MEMORY[0x20BD0ADEC](v35, 0x1020C408821BEBCLL);
      result = *(_QWORD *)(a1 + 48);
    }
    v42 = *(char **)(result + 72);
    v43 = *(char **)(result + 80);
    if (v42 != v43)
    {
      v44 = v43 - v42;
      v45 = v43 - v42 - 8;
      v46 = *(char **)(result + 72);
      if (v45 < 8)
        goto LABEL_71;
      v47 = (v45 >> 3) + 1;
      v46 = &v42[8 * (v47 & 0x3FFFFFFFFFFFFFFELL)];
      v48 = (uint64_t *)(v42 + 8);
      v49 = v47 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v50 = *(v48 - 1);
        v51 = *v48;
        *(_DWORD *)(v50 + 8) = 255;
        *(_DWORD *)(v51 + 8) = 255;
        *(_WORD *)(v50 + 16) = 257;
        *(_WORD *)(v51 + 16) = 257;
        *(_QWORD *)(v50 + 32) = 0;
        *(_QWORD *)(v51 + 32) = 0;
        *(_BYTE *)(v50 + 40) = 1;
        *(_BYTE *)(v51 + 40) = 1;
        v48 += 2;
        v49 -= 2;
      }
      while (v49);
      if (v47 != (v47 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_71:
        do
        {
          v52 = *(_QWORD *)v46;
          v46 += 8;
          *(_DWORD *)(v52 + 8) = 255;
          *(_WORD *)(v52 + 16) = 257;
          *(_QWORD *)(v52 + 32) = 0;
          *(_BYTE *)(v52 + 40) = 1;
        }
        while (v46 != v43);
      }
      *(_BYTE *)(result + 20) = 1;
      v53 = *(_DWORD *)(*(_QWORD *)v42 + 20);
      *(_DWORD *)(result + 96) = 0;
      if ((unint64_t)v44 >= 9)
      {
        v54 = v44 >> 3;
        if (v54 <= 2)
          v54 = 2;
        for (i = 1; i != v54; ++i)
        {
          v56 = *(_DWORD *)(*(_QWORD *)&v42[8 * i] + 20);
          if (v56 < v53)
          {
            *(_DWORD *)(result + 96) = i;
            v53 = v56;
          }
        }
      }
      if (!*(_BYTE *)(result + 16))
      {
        *(_DWORD *)(result + 8) = v53;
        *(_QWORD *)(result + 56) = 0;
        if (*v21)
          goto LABEL_58;
        return a1;
      }
      if (*(int *)(result + 12) >= 1 && v53 <= *(_DWORD *)(result + 4))
        v53 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 8) = v53;
      *(_QWORD *)(result + 56) = 0;
      *(_BYTE *)(result + 16) = 0;
LABEL_57:
      if (*v21)
      {
LABEL_58:
        v57 = operator new();
        *(_QWORD *)v57 = &off_24C0B7968;
        *(_QWORD *)(v57 + 8) = v12;
        *(_QWORD *)(v57 + 16) = 0x44F000000000BB80;
        *(_WORD *)(v57 + 24) = 1;
        *(int32x2_t *)(v57 + 28) = vdup_n_s32(0x44F00000u);
        *(_DWORD *)(v57 + 36) = 500;
        v58 = *v15;
        *v15 = v57;
        if (v58)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
        v59 = (_QWORD *)operator new();
        *v59 = &off_24C0BEDD0;
        v59[1] = v12;
        v59[2] = 0xC41A00000;
        *(_QWORD *)((char *)v59 + 52) = 0;
        v59[11] = 0;
        v61 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v59;
        if (v61)
          (*(void (**)(uint64_t, float))(*(_QWORD *)v61 + 8))(v61, v60);
        v62 = operator new();
        *(_QWORD *)v62 = v12;
        v63 = __exp10f(*(float *)(a2 + 16) / 20.0);
        *(float *)(v62 + 12) = v63;
        *(float *)(v62 + 16) = v63;
        *(_QWORD *)(v62 + 44) = *(_QWORD *)(a2 + 20);
        *(_OWORD *)(v62 + 28) = *(_OWORD *)v21;
        v64 = *(_DWORD *)(v62 + 40);
        v65 = (float)(*(float *)(v62 + 44) * 10.0) / 1000.0;
        *(_BYTE *)(v62 + 8) = 0;
        *(_QWORD *)(v62 + 20) = 0xBF800000FFFFFFFFLL;
        *(_DWORD *)(v62 + 52) = 12;
        *(float *)(v62 + 56) = v65;
        *(_QWORD *)(v62 + 60) = 0xC00000000;
        *(_DWORD *)(v62 + 68) = v64;
        v66 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v62;
        if (v66)
          MEMORY[0x20BD0ADEC](v66, 0x1060C40CE23CE1BLL);
      }
      return a1;
    }
  }
  *(_BYTE *)(result + 20) = 1;
  __break(1u);
  return result;
}

void webrtc::GainController2::~GainController2(webrtc::GainController2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  if (*((_BYTE *)this + 144))
  {
    switch(*((_DWORD *)this + 37))
    {
      case 0:
        v2 = *((_QWORD *)this + 9);
        if (v2)
          goto LABEL_10;
        break;
      case 1:
        v2 = *((_QWORD *)this + 10);
        if (v2)
          goto LABEL_10;
        break;
      case 2:
        v2 = *((_QWORD *)this + 11);
        if (v2)
          goto LABEL_10;
        break;
      case 3:
        v2 = *((_QWORD *)this + 12);
        if (v2)
LABEL_10:
          webrtc::metrics::HistogramAdd(v2, (int)*((_QWORD *)this + 19) / 100);
        break;
      default:
        break;
    }
  }
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x20BD0ADEC](v3, 0x1060C40CE23CE1BLL);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    v6 = (_QWORD *)v5[9];
    if (v6)
    {
      v7 = (_QWORD *)v5[10];
      v8 = (void *)v5[9];
      if (v7 != v6)
      {
        do
        {
          v10 = *--v7;
          v9 = v10;
          *v7 = 0;
          if (v10)
            MEMORY[0x20BD0ADEC](v9, 0x1000C4088480CCALL);
        }
        while (v7 != v6);
        v8 = (void *)v5[9];
      }
      v5[10] = v6;
      operator delete(v8);
    }
    v11 = v5[5];
    v5[5] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    MEMORY[0x20BD0ADEC](v5, 0x1020C408821BEBCLL);
  }
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
    MEMORY[0x20BD0ADEC](v12, 0x1060C40D924619CLL);
  v13 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    v14 = (void *)v13[12];
    if (v14)
    {
      v13[13] = v14;
      operator delete(v14);
    }
    v15 = v13[11];
    v13[11] = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    webrtc::PushResampler<float>::~PushResampler(v13 + 2);
    MEMORY[0x20BD0ADEC](v13, 0x10A0C40915EBB22);
  }
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
}

void webrtc::GainController2::Process(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  char v28;
  float *v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  int v42;
  int v43;
  char v44;
  uint64_t v45;
  int v46;
  int v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  int v59;
  char v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  float v75;
  float v76;
  float v77;

  if (*(_BYTE *)(a1 + 2208))
    *(_BYTE *)(a1 + 2208) = 0;
  if (a3)
  {
    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
    {
      *(_DWORD *)(v11 + 16) = 400;
      v12 = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v11 + 20) = v12;
      *(_QWORD *)(v11 + 24) = 0x1903F800000;
      *(_DWORD *)(v11 + 32) = v12;
      *(_DWORD *)(v11 + 36) = 1065353216;
      *(_DWORD *)(v11 + 40) = v12;
      *(_DWORD *)(v11 + 48) = 0;
    }
    v13 = *(_QWORD *)(a1 + 56);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  }
  v14 = *(uint64_t **)(*(_QWORD *)(a4 + 80) + 8);
  v15 = *(_DWORD *)(a4 + 56);
  v16 = *(_QWORD *)(a4 + 24);
  v17 = v15 | ((unint64_t)v16 << 32);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = HIDWORD(v17);
  if (v18)
  {
    v20 = *(_DWORD *)(v18 + 8);
    v21 = __OFSUB__(v20--, 1);
    *(_DWORD *)(v18 + 8) = v20;
    if ((v20 < 0) ^ v21 | (v20 == 0))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v18 + 88) + 24))(*(_QWORD *)(v18 + 88));
      *(_DWORD *)(v18 + 8) = *(_DWORD *)v18;
    }
    if (v19)
      v22 = (char *)*v14;
    else
      v22 = 0;
    v23 = *(_QWORD *)(v18 + 104) - *(_QWORD *)(v18 + 96);
    if (v23)
      v24 = *(char **)(v18 + 96);
    else
      v24 = 0;
    webrtc::PushResampler<float>::Resample(v18 + 16, v22, (int)v16, v24, v23 >> 2, a6, a7, a8);
    v25 = *(_QWORD *)(v18 + 104) - *(_QWORD *)(v18 + 96);
    if (v25)
      v26 = *(_QWORD *)(v18 + 96);
    else
      v26 = 0;
    v27 = (*(float (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 88) + 32))(*(_QWORD *)(v18 + 88), v26, v25 >> 2);
    LODWORD(a2) = 1;
    v28 = 0;
    v29 = (float *)*v14;
    if (!(_DWORD)v16)
      v29 = 0;
    if (v19)
      goto LABEL_33;
LABEL_29:
    v30 = 0.0;
    goto LABEL_47;
  }
  LODWORD(v27) = a2;
  LODWORD(a2) = BYTE4(a2);
  if (BYTE4(a2))
  {
    v28 = 0;
    v29 = (float *)*v14;
    if (!(_DWORD)v16)
      v29 = 0;
    if (!v19)
      goto LABEL_29;
  }
  else
  {
    v28 = 1;
    v29 = (float *)*v14;
    if (!(_DWORD)v16)
      v29 = 0;
    if (!v19)
      goto LABEL_29;
  }
LABEL_33:
  v31 = 4 * (int)v16;
  v30 = 0.0;
  v32 = 0.0;
  do
  {
    v33 = *v29++;
    v34 = v33;
    v35 = fabsf(v33);
    if (v35 >= v32)
      v32 = v35;
    v30 = v30 + (float)(v34 * v34);
    v31 -= 4;
  }
  while (v31);
  if (v32 > 1.0)
  {
    v36 = (float)(log10f(v32) * 20.0) + -90.309;
    v37 = sqrtf(v30 / (float)(int)v16);
    if (v37 <= 1.0)
      goto LABEL_39;
    goto LABEL_48;
  }
LABEL_47:
  v36 = -90.309;
  v37 = sqrtf(v30 / (float)(int)v16);
  if (v37 <= 1.0)
  {
LABEL_39:
    v38 = -90.309;
    v39 = *(_QWORD *)(a1 + 24);
    if (v39)
      goto LABEL_40;
    goto LABEL_49;
  }
LABEL_48:
  v38 = (float)(log10f(v37) * 20.0) + -90.309;
  v39 = *(_QWORD *)(a1 + 24);
  if (v39)
  {
LABEL_40:
    v73 = (unint64_t)v14;
    v74 = v15;
    v75 = *(float *)&v16;
    v40 = (*(float (**)(uint64_t, unint64_t *))(*(_QWORD *)v39 + 16))(v39, &v73);
    v41 = *(_QWORD *)(a1 + 40);
    if (v41)
      goto LABEL_41;
    goto LABEL_50;
  }
LABEL_49:
  v40 = 0.0;
  v41 = *(_QWORD *)(a1 + 40);
  if (v41)
  {
LABEL_41:
    if (!(_DWORD)a2)
      goto LABEL_93;
    if (v27 >= 0.95)
    {
      v46 = *(_DWORD *)(v41 + 48) + 1;
      *(_DWORD *)(v41 + 48) = v46;
      v47 = *(_DWORD *)(v41 + 16);
      if (v47)
      {
        *(_DWORD *)(v41 + 16) = v47 - 10;
        v48 = 1.0;
      }
      else
      {
        v48 = 0.9975;
      }
      v49 = (float)(v27 * v38) + (float)(*(float *)(v41 + 20) * v48);
      v50 = v27 + (float)(*(float *)(v41 + 24) * v48);
      *(float *)(v41 + 20) = v49;
      *(float *)(v41 + 24) = v50;
      v42 = *(_DWORD *)(v41 + 12);
      if (v46 >= v42)
      {
        v51 = v49 / v50;
        v52 = 30.0;
        if (v51 < 30.0)
          v52 = v51;
        if (v51 > -90.0)
          v53 = v52;
        else
          v53 = -90.0;
        *(float *)(v41 + 40) = v53;
      }
      if (v42 == 1)
        goto LABEL_72;
    }
    else
    {
      v42 = *(_DWORD *)(v41 + 12);
      if (v42 >= 2)
      {
        v43 = *(_DWORD *)(v41 + 48);
        if (v43 >= v42)
        {
          *(_QWORD *)(v41 + 28) = *(_QWORD *)(v41 + 16);
          *(_DWORD *)(v41 + 36) = *(_DWORD *)(v41 + 24);
        }
        else if (v43 >= 1)
        {
          *(_QWORD *)(v41 + 16) = *(_QWORD *)(v41 + 28);
          *(_DWORD *)(v41 + 24) = *(_DWORD *)(v41 + 36);
        }
      }
      v46 = 0;
      *(_DWORD *)(v41 + 48) = 0;
      if (v42 == 1)
        goto LABEL_72;
    }
    if (!*(_DWORD *)(v41 + 28))
    {
      v54 = 1;
LABEL_74:
      *(_BYTE *)(v41 + 44) = v54;
      v56 = *(_QWORD *)(a1 + 40);
      v55 = *(_QWORD *)(a1 + 48);
      v45 = *(unsigned __int8 *)(v56 + 44);
      v38 = *(float *)(v56 + 40);
      if (v55)
        v57 = v28;
      else
        v57 = 1;
      if ((v57 & 1) == 0)
      {
        v58 = LODWORD(v38);
        if (!(_DWORD)v45)
          v58 = 0;
        webrtc::InputVolumeController::RecommendInputVolume(v55, v58 | (v45 << 32), v27);
        *(_DWORD *)(a1 + 2204) = v59;
        *(_BYTE *)(a1 + 2208) = v60;
      }
      goto LABEL_81;
    }
    if (v46 < v42)
    {
      v54 = 0;
      goto LABEL_74;
    }
LABEL_72:
    v54 = *(_DWORD *)(v41 + 16) == 0;
    goto LABEL_74;
  }
LABEL_50:
  if (*(_QWORD *)(a1 + 48))
    v44 = v28;
  else
    v44 = 1;
  if ((v44 & 1) == 0)
    goto LABEL_93;
  LOBYTE(v45) = 0;
LABEL_81:
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_89;
  if (!(_DWORD)a2
    || !v41
    || (((*(void (**)(_QWORD, float, float, float))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56), v27, v36, v38), v61 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)), v62 = *(float *)(a1 + 168), v62 <= 1.0)? (v63 = -90.309): (v63 = (float)(log10f(v62) * 20.0) + -90.309), v64 = *(_QWORD *)(a1 + 64), v73 = __PAIR64__(LODWORD(v38), LODWORD(v27)), LOBYTE(v74) = v45, !v39))
  {
LABEL_93:
    __break(1u);
    return;
  }
  v75 = v40;
  v76 = v61;
  v77 = v63;
  webrtc::AdaptiveDigitalGainController::Process(v64, (uint64_t)&v73, v14, v17);
LABEL_89:
  webrtc::GainApplier::ApplyGain((float32x4_t *)(a1 + 4), v14, v17);
  webrtc::Limiter::Process((float *)(a1 + 72), (uint64_t)v14, v17);
  v65 = *(_DWORD *)(a1 + 2200) + 1;
  *(_DWORD *)(a1 + 2200) = v65;
  if (v65 == 3000)
  {
    *(_DWORD *)(a1 + 2200) = 0;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v66, v67, v68, v69, v70, v71, v72, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/gain_controller2.cc");
  }
}

uint64_t webrtc::VCMDecodedFrameCallback::VCMDecodedFrameCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  pthread_mutexattr_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0B48E0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  v4 = (pthread_mutex_t *)(a1 + 40);
  pthread_mutexattr_init(&v13);
  pthread_mutexattr_setpolicy_np(&v13, 3);
  pthread_mutex_init(v4, &v13);
  pthread_mutexattr_destroy(&v13);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v6);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  if (v8 % 0x3E8uLL <= 0x1F3)
    v9 = 0;
  else
    v9 = -1;
  v10 = v9 - v8 / 0x3E8uLL;
  v11 = -v8 / 0x3E8uLL;
  if (-v8 % 0x3E8uLL > 0x1F4)
    ++v11;
  if (v8 < 0)
    v10 = v11;
  *(_QWORD *)(a1 + 152) = (uint64_t)((double)v7 / 4294967.3 + 0.5) + 1000 * HIDWORD(v7) + v10;
  return a1;
}

void webrtc::VCMDecodedFrameCallback::~VCMDecodedFrameCallback(webrtc::VCMDecodedFrameCallback *this)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C0B48E0;
  v2 = (void **)((char *)this + 104);
  std::deque<webrtc::FrameInfo>::clear((_QWORD *)this + 13);
  v3 = (void **)*((_QWORD *)this + 14);
  v4 = (void **)*((_QWORD *)this + 15);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = *((_QWORD *)this + 14);
    v6 = *((_QWORD *)this + 15);
    if (v6 != v7)
      *((_QWORD *)this + 15) = v6 + ((v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 40));
}

{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C0B48E0;
  v2 = (void **)((char *)this + 104);
  std::deque<webrtc::FrameInfo>::clear((_QWORD *)this + 13);
  v3 = (void **)*((_QWORD *)this + 14);
  v4 = (void **)*((_QWORD *)this + 15);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = *((_QWORD *)this + 14);
    v6 = *((_QWORD *)this + 15);
    if (v6 != v7)
      *((_QWORD *)this + 15) = v6 + ((v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 40));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::VCMDecodedFrameCallback::Decoded(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, -1);
}

uint64_t webrtc::VCMDecodedFrameCallback::Decoded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a3;
  if (a3 < 0)
    v3 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, (v3 | a3 & 0xFFFFFF00 | ((unint64_t)a3 >> 63 << 32)) ^ 0x100000000, 0);
  return 0;
}

void webrtc::VCMDecodedFrameCallback::Decoded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  pthread_mutex_t *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 **v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  __int128 **v78;
  unint64_t v79;
  uint64_t v80;
  __int128 *v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void **v91;
  unint64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int64_t v110;
  uint64_t *v111;
  __int128 *v112;
  __int128 *v113;
  void *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  __int128 *v128;
  uint64_t v129;
  uint64_t v130;
  int64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  void *v161;
  uint64_t v162;
  pthread_mutex_t *v163;
  _BOOL8 v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unint64_t v172;
  BOOL v173;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  BOOL v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v205;
  uint64_t v207;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v221;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  pthread_mutex_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int128 **v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  _BYTE v269[7];

  v5 = a1;
  v6 = (pthread_mutex_t *)(a1 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 40));
  v260 = a2;
  v7 = *(_DWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v5 + 136);
  v9 = *(_QWORD *)(v5 + 112);
  v10 = *(_QWORD *)(v5 + 120);
  v11 = (uint64_t *)(v9 + 8 * (v8 / 0x1C));
  if (v10 == v9)
  {
    v13 = 0;
    v16 = (_QWORD *)(v9 + 8 * (v8 / 0x1C));
    goto LABEL_13;
  }
  v12 = (char *)*v11;
  v13 = *v11 + 144 * (v8 % 0x1C);
  v14 = *(_QWORD *)(v9 + 8 * ((*(_QWORD *)(v5 + 144) + v8) / 0x1C)) + 144 * ((*(_QWORD *)(v5 + 144) + v8) % 0x1C);
  if (v13 == v14)
  {
    v16 = (_QWORD *)(v9 + 8 * (v8 / 0x1C));
    goto LABEL_13;
  }
  v15 = (char *)(*v11 + 144 * (v8 % 0x1C));
  v16 = (_QWORD *)(v9 + 8 * (v8 / 0x1C));
  while (1)
  {
    v17 = *(_DWORD *)v15 - v7;
    if (*(_DWORD *)v15 == v7)
      break;
    if (v17 == 0x80000000)
    {
      if (*(_DWORD *)v15 > v7)
        break;
    }
    else if ((v17 & 0x80000000) == 0)
    {
      break;
    }
    v15 += 144;
    if (v15 - v12 == 4032)
    {
      v18 = (char *)v16[1];
      ++v16;
      v12 = v18;
      v15 = v18;
    }
    if (v15 == (char *)v14)
    {
      v15 = (char *)(*(_QWORD *)(v9 + 8 * ((*(_QWORD *)(v5 + 144) + v8) / 0x1C))
                   + 144 * ((*(_QWORD *)(v5 + 144) + v8) % 0x1C));
      break;
    }
  }
  v13 = (unint64_t)v15;
  if (v15 == (char *)(*v11 + 144 * (v8 % 0x1C)))
  {
LABEL_13:
    LODWORD(v19) = 0;
    if (v10 != v9)
      goto LABEL_20;
    goto LABEL_14;
  }
  v19 = 28 * (v16 - v11)
      - 0x71C71C71C71C71C7 * ((uint64_t)&v15[-*v16] >> 4)
      + 0x71C71C71C71C71C7 * ((uint64_t)(144 * (v8 % 0x1C)) >> 4);
  if (v10 != v9)
  {
LABEL_20:
    if (v13 == *(_QWORD *)(v9 + 8 * ((*(_QWORD *)(v5 + 144) + v8) / 0x1C))
              + 144 * ((*(_QWORD *)(v5 + 144) + v8) % 0x1C))
      goto LABEL_27;
    goto LABEL_21;
  }
LABEL_14:
  if (!v13)
  {
LABEL_27:
    v250 = 0;
    v251 = 0;
    v20 = 0;
    v21 = 1;
    if (v10 != v9)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_21:
  if (*(_DWORD *)v13 != v7)
    goto LABEL_27;
  v245 = *(_QWORD *)(v13 + 8);
  v251 = *(unsigned __int8 *)(v13 + 16);
  v246 = *(_QWORD *)(v13 + 24);
  v20 = *(unsigned __int8 *)(v13 + 32);
  v243 = *(_DWORD *)(v13 + 40);
  v250 = *(unsigned __int8 *)(v13 + 48);
  v239 = *(_QWORD *)(v13 + 56);
  v240 = *(_QWORD *)(v13 + 64);
  v241 = *(_QWORD *)(v13 + 72);
  v238 = *(_QWORD *)(v13 + 80);
  v237 = *(_QWORD *)(v13 + 88);
  v236 = *(_QWORD *)(v13 + 96);
  v244 = *(_QWORD *)(v13 + 104);
  v247 = *(_QWORD *)(v13 + 112);
  v242 = *(_QWORD *)(v13 + 120);
  v255 = *(_QWORD *)(v13 + 128);
  *(_QWORD *)(v13 + 128) = 0;
  v13 += 144;
  if (v13 - *v16 != 4032)
  {
    v21 = 0;
    if (v10 != v9)
      goto LABEL_28;
LABEL_24:
    v23 = 0;
    if (!v13)
      goto LABEL_25;
LABEL_29:
    v24 = 28 * (v16 - v11)
        - 0x71C71C71C71C71C7 * ((uint64_t)(v13 - *v16) >> 4)
        + 0x71C71C71C71C71C7 * ((v23 - *v11) >> 4);
    if (v10 == v9)
      goto LABEL_26;
    goto LABEL_30;
  }
  v21 = 0;
  v22 = v16[1];
  ++v16;
  v13 = v22;
  if (v10 == v9)
    goto LABEL_24;
LABEL_28:
  v23 = *v11 + 144 * (v8 % 0x1C);
  if (v13 != v23)
    goto LABEL_29;
LABEL_25:
  v24 = 0;
  if (v10 == v9)
  {
LABEL_26:
    v25 = 0;
    goto LABEL_31;
  }
LABEL_30:
  v25 = *v11 + 144 * (v8 % 0x1C);
LABEL_31:
  v256 = v24;
  v248 = a3;
  v249 = v20;
  v254 = v6;
  v253 = v19;
  v252 = v21;
  if (v23 == v25)
  {
    v27 = 0;
    goto LABEL_38;
  }
  v26 = (uint64_t)(v25 - *v11) >> 4;
  v27 = 0x71C71C71C71C71C7 * v26 - 0x71C71C71C71C71C7 * ((v23 - *v11) >> 4);
  if (!v27)
  {
    v23 = v25;
LABEL_38:
    v29 = (uint64_t *)(v9 + 8 * (v8 / 0x1C));
    v30 = v25;
    v31 = *(_QWORD *)(v5 + 144);
    v32 = v24;
    v261 = v5;
    if (v24 < 1)
      goto LABEL_203;
    goto LABEL_39;
  }
  v28 = v27 - 0x71C71C71C71C71C7 * v26;
  if (v28 < 1)
  {
    v47 = 27 - v28;
    v29 = &v11[-(v47 / 0x1C)];
    v23 = *v29 + 144 * (28 * (v47 / 0x1C) - v47) + 3888;
    v30 = v25;
    v31 = *(_QWORD *)(v5 + 144);
    v32 = v24;
    v261 = v5;
    if (v24 < 1)
      goto LABEL_203;
  }
  else
  {
    v29 = &v11[v28 / 0x1CuLL];
    v23 = *v29 + 144 * (v28 % 0x1CuLL);
    v30 = v25;
    v31 = *(_QWORD *)(v5 + 144);
    v32 = v24;
    v261 = v5;
    if (v24 < 1)
      goto LABEL_203;
  }
LABEL_39:
  v33 = *v29;
  v34 = v32 - 0x71C71C71C71C71C7 * ((v23 - *v29) >> 4);
  if (v27 > (unint64_t)(v31 - v32) >> 1)
  {
    if (v34 < 1)
    {
      v76 = 27 - v34;
      v35 = (__int128 **)&v29[-(v76 / 0x1C)];
      v36 = *v35;
      v37 = &(*v35)[9 * (28 * (v76 / 0x1C) - v76) + 243];
    }
    else
    {
      v35 = (__int128 **)&v29[v34 / 0x1CuLL];
      v36 = *v35;
      v37 = &(*v35)[9 * (v34 % 0x1CuLL)];
    }
    v77 = v31 + v8;
    v78 = (__int128 **)(v9 + 8 * (v77 / 0x1C));
    if (v10 == v9)
    {
      v79 = 0;
      v80 = v24;
      if (v35 != v78)
        goto LABEL_88;
    }
    else
    {
      v79 = (unint64_t)&(*v78)[9 * (v77 % 0x1C)];
      v80 = v24;
      if (v35 != v78)
      {
LABEL_88:
        v81 = v36 + 252;
        if (v36 + 252 != v37)
        {
          for (++v29; ; ++v29)
          {
            v82 = 0x8E38E38E38E38E39 * ((v33 - v23 + 4032) >> 4);
            if ((uint64_t)(0x8E38E38E38E38E39 * (v81 - v37)) < v82)
              v82 = 0x8E38E38E38E38E39 * (v81 - v37);
            v37 = std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,webrtc::FrameInfo *,webrtc::FrameInfo *,webrtc::FrameInfo *,0>(v37, &v37[9 * v82], v23);
            if (v81 == v37)
              break;
            v84 = *v29;
            v33 = v84;
            v23 = v84;
          }
          v23 = v83;
          v33 = *(v29 - 1);
          if (v33 + 4032 == v83)
          {
            v33 = *v29;
            v23 = *v29;
          }
          else
          {
            --v29;
          }
          v80 = v256;
        }
        v106 = v35 + 1;
        if (v35 + 1 != v78)
        {
          v258 = v78;
          do
          {
            while (1)
            {
              v107 = 0;
              v262 = v106;
              v267 = *v106;
              while (1)
              {
                v109 = v267 + 144 * v107;
                v110 = 0x8E38E38E38E38E39 * ((v33 - v23 + 4032) >> 4);
                if ((uint64_t)(0x8E38E38E38E38E39 * ((4032 - 144 * v107) >> 4)) < v110)
                  v110 = 0x8E38E38E38E38E39 * ((4032 - 144 * v107) >> 4);
                if (v110)
                {
                  v111 = v29;
                  v112 = (__int128 *)(v109 + 144 * v110);
                  v113 = (__int128 *)(v267 + 144 * v107);
                  do
                  {
                    v115 = *v113;
                    v116 = v113[1];
                    v117 = v113[3];
                    *(_OWORD *)(v23 + 32) = v113[2];
                    *(_OWORD *)(v23 + 48) = v117;
                    *(_OWORD *)v23 = v115;
                    *(_OWORD *)(v23 + 16) = v116;
                    v118 = v113[4];
                    v119 = v113[5];
                    v120 = v113[7];
                    *(_OWORD *)(v23 + 96) = v113[6];
                    *(_OWORD *)(v23 + 112) = v120;
                    *(_OWORD *)(v23 + 64) = v118;
                    *(_OWORD *)(v23 + 80) = v119;
                    v121 = *((_QWORD *)v113 + 16);
                    *((_QWORD *)v113 + 16) = 0;
                    v122 = *(_QWORD *)(v23 + 128);
                    *(_QWORD *)(v23 + 128) = v121;
                    if (v122)
                    {
                      do
                      {
                        v123 = __ldaxr((unsigned int *)v122);
                        v124 = v123 - 1;
                      }
                      while (__stlxr(v124, (unsigned int *)v122));
                      if (!v124)
                      {
                        v125 = *(_QWORD *)(v122 + 8);
                        if (v125)
                        {
                          v126 = *(_QWORD *)(v122 + 16);
                          v114 = *(void **)(v122 + 8);
                          if (v126 != v125)
                          {
                            do
                            {
                              v127 = *(void **)(v126 - 96);
                              if (v127)
                              {
                                *(_QWORD *)(v126 - 88) = v127;
                                operator delete(v127);
                              }
                              v126 -= 104;
                            }
                            while (v126 != v125);
                            v114 = *(void **)(v122 + 8);
                          }
                          *(_QWORD *)(v122 + 16) = v125;
                          operator delete(v114);
                        }
                        MEMORY[0x20BD0ADEC](v122, 0x1020C40E72D6CFBLL);
                      }
                    }
                    *(_DWORD *)(v23 + 136) = *((_DWORD *)v113 + 34);
                    v113 += 9;
                    v23 += 144;
                  }
                  while (v113 != v112);
                  v29 = v111;
                  v107 -= 0x71C71C71C71C71C7 * (((uint64_t)v112 - v109) >> 4);
                  if (v107 == 28)
                    break;
                }
                v108 = v29[1];
                ++v29;
                v33 = v108;
                v23 = v108;
              }
              v33 = *v111;
              if (*v111 + 4032 == v23)
                break;
              v5 = v261;
              v78 = v258;
              v106 = v262 + 1;
              if (v262 + 1 == v258)
                goto LABEL_164;
            }
            v29 = v111 + 1;
            v33 = v111[1];
            v23 = v33;
            v5 = v261;
            v78 = v258;
            v106 = v262 + 1;
          }
          while (v262 + 1 != v258);
LABEL_164:
          v80 = v256;
        }
        v128 = *v78;
        if (*v78 == (__int128 *)v79)
        {
LABEL_173:
          v105 = *(_QWORD *)(v5 + 112);
          v104 = *(_QWORD *)(v5 + 120);
          if (v104 != v105)
            goto LABEL_174;
          goto LABEL_177;
        }
        v130 = *v29++;
        v129 = v130;
        while (1)
        {
          v131 = 0x8E38E38E38E38E39 * ((v129 - v23 + 4032) >> 4);
          if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v79 - (_QWORD)v128) >> 4)) < v131)
            v131 = 0x8E38E38E38E38E39 * ((uint64_t)(v79 - (_QWORD)v128) >> 4);
          v128 = std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,webrtc::FrameInfo *,webrtc::FrameInfo *,webrtc::FrameInfo *,0>(v128, &v128[9 * v131], v23);
          if (v128 == (__int128 *)v79)
            break;
          v133 = *v29++;
          v129 = v133;
          v23 = v133;
        }
        v23 = v132;
        if (*(v29 - 1) + 4032 != v132)
        {
          --v29;
          goto LABEL_173;
        }
LABEL_176:
        v23 = *v29;
        v105 = *(_QWORD *)(v5 + 112);
        v104 = *(_QWORD *)(v5 + 120);
        if (v104 != v105)
        {
LABEL_174:
          v134 = *(_QWORD *)(v5 + 144) + *(_QWORD *)(v5 + 136);
          v135 = *(_QWORD *)(v105 + 8 * (v134 / 0x1C)) + 144 * (v134 % 0x1C);
          if (v135 != v23)
            goto LABEL_180;
LABEL_196:
          if (v104 == v105)
            v144 = 0;
          else
            v144 = 28 * ((v104 - v105) >> 3) - 1;
          v145 = *(_QWORD *)(v5 + 136);
          v31 = *(_QWORD *)(v5 + 144) - v80;
          *(_QWORD *)(v5 + 144) = v31;
          if ((unint64_t)(v144 - (v145 + v31)) >= 0x38)
          {
            do
            {
              operator delete(*(void **)(v104 - 8));
              v104 = *(_QWORD *)(v5 + 120) - 8;
              v173 = v104 == *(_QWORD *)(v5 + 112);
              v146 = 28 * ((v104 - *(_QWORD *)(v5 + 112)) >> 3) - 1;
              *(_QWORD *)(v5 + 120) = v104;
              if (v173)
                v146 = 0;
              v31 = *(_QWORD *)(v5 + 144);
            }
            while ((unint64_t)(v146 - (v31 + *(_QWORD *)(v5 + 136))) >= 0x38);
          }
          goto LABEL_203;
        }
LABEL_177:
        v135 = 0;
        if (v23)
        {
          do
          {
LABEL_180:
            if (!v23)
              goto LABEL_368;
            v136 = v29;
            v137 = *(_QWORD *)(v23 + 128);
            if (v137)
            {
              do
              {
                v138 = __ldaxr((unsigned int *)v137);
                v139 = v138 - 1;
              }
              while (__stlxr(v139, (unsigned int *)v137));
              if (!v139)
              {
                v140 = *(_QWORD *)(v137 + 8);
                if (v140)
                {
                  v141 = *(_QWORD *)(v137 + 16);
                  v142 = *(void **)(v137 + 8);
                  if (v141 != v140)
                  {
                    do
                    {
                      v143 = *(void **)(v141 - 96);
                      if (v143)
                      {
                        *(_QWORD *)(v141 - 88) = v143;
                        operator delete(v143);
                      }
                      v141 -= 104;
                    }
                    while (v141 != v140);
                    v142 = *(void **)(v137 + 8);
                  }
                  *(_QWORD *)(v137 + 16) = v140;
                  operator delete(v142);
                }
                MEMORY[0x20BD0ADEC](v137, 0x1020C40E72D6CFBLL);
              }
            }
            v23 += 144;
            v29 = v136;
            if (v23 - *v136 == 4032)
            {
              v29 = v136 + 1;
              v23 = v136[1];
            }
          }
          while (v23 != v135);
          v105 = *(_QWORD *)(v5 + 112);
          v104 = *(_QWORD *)(v5 + 120);
        }
        goto LABEL_196;
      }
    }
    if (v37 == (__int128 *)v79)
      goto LABEL_173;
    for (++v29; ; ++v29)
    {
      v93 = 0x8E38E38E38E38E39 * ((v33 - v23 + 4032) >> 4);
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v79 - (_QWORD)v37) >> 4)) < v93)
        v93 = 0x8E38E38E38E38E39 * ((uint64_t)(v79 - (_QWORD)v37) >> 4);
      v37 = std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,webrtc::FrameInfo *,webrtc::FrameInfo *,webrtc::FrameInfo *,0>(v37, &v37[9 * v93], v23);
      if (v37 == (__int128 *)v79)
        break;
      v95 = *v29;
      v33 = v95;
      v23 = v95;
    }
    v23 = v94;
    if (*(v29 - 1) + 4032 != v94)
    {
      --v29;
      v105 = *(_QWORD *)(v5 + 112);
      v104 = *(_QWORD *)(v5 + 120);
      if (v104 != v105)
        goto LABEL_174;
      goto LABEL_177;
    }
    goto LABEL_176;
  }
  if (v34 < 1)
  {
    v85 = (27 - v34) / 0x1CuLL;
    v38 = &v29[-v85];
    v39 = *v38;
    v40 = v29;
    v41 = *v38 + 144 * (v34 - 27 + 28 * v85) + 3888;
    if (v11 != v40)
      goto LABEL_44;
  }
  else
  {
    v38 = &v29[v34 / 0x1CuLL];
    v39 = *v38;
    v40 = v29;
    v41 = *v38 + 144 * (v34 % 0x1CuLL);
    if (v11 != v40)
    {
LABEL_44:
      v42 = v40;
      if (v33 != v23)
      {
        while (1)
        {
          v43 = 0x8E38E38E38E38E39 * ((v41 - v39) >> 4);
          if ((uint64_t)(0x8E38E38E38E38E39 * ((v23 - v33) >> 4)) < v43)
            v43 = 0x8E38E38E38E38E39 * ((v23 - v33) >> 4);
          v44 = v23 - 144 * v43;
          v45 = std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,webrtc::FrameInfo *,webrtc::FrameInfo *,webrtc::FrameInfo *,0>(v44, v23, v41);
          if (v44 == v33)
            break;
          v46 = *--v38;
          v39 = v46;
          v41 = v46 + 4032;
          v23 = v44;
        }
        v41 = v45;
        v39 = *v38;
        if (*v38 + 4032 == v45)
        {
          v48 = v38[1];
          ++v38;
          v39 = v48;
          v41 = v48;
        }
      }
      v49 = v42 - 1;
      if (v42 - 1 != v11)
      {
        v264 = v11;
        do
        {
          while (1)
          {
            v266 = v49;
            v51 = *v49;
            for (i = *v49 + 4032; ; i = v54)
            {
              v53 = 0x8E38E38E38E38E39 * ((v41 - v39) >> 4);
              if ((uint64_t)(0x8E38E38E38E38E39 * ((i - v51) >> 4)) < v53)
                v53 = 0x8E38E38E38E38E39 * ((i - v51) >> 4);
              v54 = i - 144 * v53;
              if (v53)
              {
                do
                {
                  v58 = *(_OWORD *)(i - 144);
                  v59 = *(_OWORD *)(i - 128);
                  v60 = *(_OWORD *)(i - 96);
                  *(_OWORD *)(v41 - 112) = *(_OWORD *)(i - 112);
                  *(_OWORD *)(v41 - 96) = v60;
                  *(_OWORD *)(v41 - 144) = v58;
                  *(_OWORD *)(v41 - 128) = v59;
                  v61 = *(_OWORD *)(i - 80);
                  v62 = *(_OWORD *)(i - 64);
                  v63 = *(_OWORD *)(i - 32);
                  *(_OWORD *)(v41 - 48) = *(_OWORD *)(i - 48);
                  *(_OWORD *)(v41 - 32) = v63;
                  *(_OWORD *)(v41 - 80) = v61;
                  *(_OWORD *)(v41 - 64) = v62;
                  v64 = *(_QWORD *)(i - 16);
                  *(_QWORD *)(i - 16) = 0;
                  v65 = *(_QWORD *)(v41 - 16);
                  *(_QWORD *)(v41 - 16) = v64;
                  if (v65)
                  {
                    do
                    {
                      v66 = __ldaxr((unsigned int *)v65);
                      v67 = v66 - 1;
                    }
                    while (__stlxr(v67, (unsigned int *)v65));
                    if (!v67)
                    {
                      v68 = *(_QWORD *)(v65 + 8);
                      if (v68)
                      {
                        v69 = *(_QWORD *)(v65 + 16);
                        v57 = *(void **)(v65 + 8);
                        if (v69 != v68)
                        {
                          do
                          {
                            v70 = *(void **)(v69 - 96);
                            if (v70)
                            {
                              *(_QWORD *)(v69 - 88) = v70;
                              operator delete(v70);
                            }
                            v69 -= 104;
                          }
                          while (v69 != v68);
                          v57 = *(void **)(v65 + 8);
                        }
                        *(_QWORD *)(v65 + 16) = v68;
                        operator delete(v57);
                      }
                      MEMORY[0x20BD0ADEC](v65, 0x1020C40E72D6CFBLL);
                    }
                  }
                  v55 = v41 - 144;
                  *(_DWORD *)(v41 - 8) = *(_DWORD *)(i - 8);
                  v41 -= 144;
                  i -= 144;
                }
                while (i != v54);
              }
              else
              {
                v55 = v41;
              }
              if (v54 == v51)
                break;
              v56 = *--v38;
              v39 = v56;
              v41 = v56 + 4032;
            }
            v39 = *v38;
            if (*v38 + 4032 != v55)
              break;
            v50 = v38[1];
            ++v38;
            v39 = v50;
            v41 = v50;
            v11 = v264;
            v49 = v266 - 1;
            if (v266 - 1 == v264)
              goto LABEL_80;
          }
          v41 = v55;
          v11 = v264;
          v49 = v266 - 1;
        }
        while (v266 - 1 != v264);
      }
LABEL_80:
      v71 = *v11 + 4032;
      if (v71 == v30)
        goto LABEL_103;
      while (1)
      {
        v72 = 0x8E38E38E38E38E39 * ((v41 - v39) >> 4);
        if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v71 - v30) >> 4)) < v72)
          v72 = 0x8E38E38E38E38E39 * ((uint64_t)(v71 - v30) >> 4);
        v73 = v71 - 144 * v72;
        v74 = std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,webrtc::FrameInfo *,webrtc::FrameInfo *,webrtc::FrameInfo *,0>(v73, v71, v41);
        if (v73 == v30)
          break;
        v75 = *--v38;
        v39 = v75;
        v41 = v75 + 4032;
        v71 = v73;
      }
      goto LABEL_102;
    }
  }
  if (v23 == v30)
    goto LABEL_103;
  while (1)
  {
    v86 = 0x8E38E38E38E38E39 * ((v41 - v39) >> 4);
    if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v23 - v30) >> 4)) < v86)
      v86 = 0x8E38E38E38E38E39 * ((uint64_t)(v23 - v30) >> 4);
    v87 = v23 - 144 * v86;
    v74 = std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,webrtc::FrameInfo *,webrtc::FrameInfo *,webrtc::FrameInfo *,0>(v87, v23, v41);
    if (v87 == v30)
      break;
    v88 = *--v38;
    v39 = v88;
    v41 = v88 + 4032;
    v23 = v87;
  }
LABEL_102:
  v41 = v74;
  if (*v38 + 4032 == v74)
  {
    v41 = v38[1];
    v5 = v261;
    v89 = v256;
    if (v30 != v41)
    {
LABEL_118:
      while (v30)
      {
        v96 = *(_QWORD *)(v30 + 128);
        if (v96)
        {
          do
          {
            v97 = __ldaxr((unsigned int *)v96);
            v98 = v97 - 1;
          }
          while (__stlxr(v98, (unsigned int *)v96));
          if (!v98)
          {
            v99 = *(_QWORD *)(v96 + 8);
            if (v99)
            {
              v100 = *(_QWORD *)(v96 + 16);
              v101 = *(void **)(v96 + 8);
              if (v100 != v99)
              {
                do
                {
                  v102 = *(void **)(v100 - 96);
                  if (v102)
                  {
                    *(_QWORD *)(v100 - 88) = v102;
                    operator delete(v102);
                  }
                  v100 -= 104;
                }
                while (v100 != v99);
                v101 = *(void **)(v96 + 8);
              }
              *(_QWORD *)(v96 + 16) = v99;
              operator delete(v101);
            }
            MEMORY[0x20BD0ADEC](v96, 0x1020C40E72D6CFBLL);
          }
        }
        v30 += 144;
        if (v30 - *v11 == 4032)
        {
          v103 = v11[1];
          ++v11;
          v30 = v103;
        }
        if (v30 == v41)
          goto LABEL_104;
      }
      goto LABEL_368;
    }
    goto LABEL_104;
  }
LABEL_103:
  v5 = v261;
  v89 = v256;
  if (v30 != v41)
    goto LABEL_118;
LABEL_104:
  v31 = *(_QWORD *)(v5 + 144) - v89;
  v90 = *(_QWORD *)(v5 + 136) + v89;
  *(_QWORD *)(v5 + 136) = v90;
  *(_QWORD *)(v5 + 144) = v31;
  if (v90 >= 0x38)
  {
    v91 = *(void ***)(v5 + 112);
    do
    {
      operator delete(*v91);
      v91 = (void **)(*(_QWORD *)(v5 + 112) + 8);
      *(_QWORD *)(v5 + 112) = v91;
      v92 = *(_QWORD *)(v5 + 136) - 28;
      *(_QWORD *)(v5 + 136) = v92;
    }
    while (v92 >= 0x38);
    v31 = *(_QWORD *)(v5 + 144);
  }
LABEL_203:
  pthread_mutex_unlock(v254);
  if (v253 >= 1)
    (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 8))(*(_QWORD *)(v5 + 24));
  if (v252)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v147, v148, v149, v150, v151, v152, v153, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/generic_decoder.cc");
    return;
  }
  *(_QWORD *)(v260 + 24) = v242;
  if (v255)
  {
    do
      v154 = __ldxr((unsigned int *)v255);
    while (__stxr(v154 + 1, (unsigned int *)v255));
  }
  v155 = *(_QWORD *)(v260 + 184);
  *(_QWORD *)(v260 + 184) = v255;
  if (v155)
  {
    do
    {
      v156 = __ldaxr((unsigned int *)v155);
      v157 = v156 - 1;
    }
    while (__stlxr(v157, (unsigned int *)v155));
    if (!v157)
    {
      v158 = *(_QWORD *)(v155 + 8);
      if (v158)
      {
        v159 = *(_QWORD *)(v155 + 16);
        v160 = *(void **)(v155 + 8);
        if (v159 != v158)
        {
          do
          {
            v161 = *(void **)(v159 - 96);
            if (v161)
            {
              *(_QWORD *)(v159 - 88) = v161;
              operator delete(v161);
            }
            v159 -= 104;
          }
          while (v159 != v158);
          v160 = *(void **)(v155 + 8);
        }
        *(_QWORD *)(v155 + 16) = v158;
        operator delete(v160);
      }
      MEMORY[0x20BD0ADEC](v155, 0x1020C40E72D6CFBLL);
    }
  }
  *(_DWORD *)(v260 + 72) = v243;
  v162 = *(_QWORD *)(v5 + 32);
  v163 = (pthread_mutex_t *)(v162 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(v162 + 8));
  if (*(_QWORD *)(v162 + 104))
    v164 = 0;
  else
    v164 = *(_QWORD *)(v162 + 112) < 500001;
  v165 = *(_DWORD *)(v162 + 272);
  v166 = *(unsigned __int8 *)(v162 + 276);
  pthread_mutex_unlock(v163);
  LODWORD(v167) = (v165 - v31) & ~((int)(v165 - v31) >> 31);
  if (v166)
    v167 = v167;
  else
    v167 = v165;
  *(_QWORD *)(v260 + 148) = v164 | (v167 << 32);
  *(_DWORD *)(v260 + 156) = v166 != 0;
  v168 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 16))(*(_QWORD *)(v5 + 16));
  v169 = v168;
  if ((v248 & 0xFF00000000) != 0)
  {
    v170 = 1000 * (int)v248;
    v171 = v249;
  }
  else
  {
    v171 = v249;
    if (!v249)
    {
LABEL_368:
      __break(1u);
      goto LABEL_369;
    }
    v172 = v168 - v246;
    v173 = v246 == 0x7FFFFFFFFFFFFFFFLL || v168 == 0x8000000000000000;
    if (v173)
      v172 = 0x8000000000000000;
    if (v168 == 0x7FFFFFFFFFFFFFFFLL || v246 == 0x8000000000000000)
      v170 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v170 = v172;
  }
  v175 = *(_QWORD *)(v261 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(v175 + 8));
  v176 = v170 / 0x3E8uLL;
  if (v170 % 0x3E8uLL > 0x1F3)
    ++v176;
  if (-v170 % 0x3E8uLL <= 0x1F4)
    v177 = 0;
  else
    v177 = -1;
  v178 = v177 - -v170 / 0x3E8uLL;
  if (v170 < 0)
    v179 = v178;
  else
    v179 = v176;
  v180 = v169 / 0x3E8uLL;
  if (v169 % 0x3E8uLL > 0x1F3)
    ++v180;
  if (-v169 % 0x3E8uLL <= 0x1F4)
    v181 = 0;
  else
    v181 = -1;
  if (v169 < 0)
    v182 = v181 - -v169 / 0x3E8uLL;
  else
    v182 = v180;
  webrtc::DecodeTimePercentileFilter::AddTiming(*(webrtc::DecodeTimePercentileFilter **)(v175 + 88), v179, v182);
  ++*(_QWORD *)(v175 + 264);
  pthread_mutex_unlock((pthread_mutex_t *)(v175 + 8));
  if (!v171)
    goto LABEL_368;
  v183 = 0x7FFFFFFFFFFFFFFFLL;
  v184 = v246;
  if (v246 != 0x7FFFFFFFFFFFFFFFLL && v170 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v183 = 0x8000000000000000;
    if (v170 != 0x8000000000000000 && v246 != 0x8000000000000000)
      v183 = v170 + v246;
  }
  v186 = *(unsigned __int8 *)(v260 + 208);
  *(_QWORD *)(v260 + 192) = v246;
  *(_QWORD *)(v260 + 200) = v183;
  if (v186)
  {
    if (v250 == 255)
    {
LABEL_268:
      v265 = -1;
      v268 = -1;
      v187 = -1;
      v188 = -1;
      v263 = -1;
      v257 = -1;
      v259 = -1;
      goto LABEL_308;
    }
  }
  else
  {
    *(_BYTE *)(v260 + 208) = 1;
    if (v250 == 255)
      goto LABEL_268;
  }
  v189 = *(_QWORD *)(v260 + 24);
  v190 = *(_QWORD *)(v261 + 152);
  v191 = v189 - v190;
  v192 = v239 - v190;
  v193 = v240 - v190;
  v194 = v241 - v190;
  v195 = v238 - v190;
  v196 = v237 - v190;
  v197 = v236 - v190;
  if (v189 < 0)
  {
    if (v191 <= v192)
      v199 = v239 - v190;
    else
      v199 = v189 - v190;
    if (v199 <= v193)
      v199 = v240 - v190;
    if (v199 <= v194)
      v199 = v241 - v190;
    if (v199 <= v195)
      v200 = v238 - v190;
    else
      v200 = v199;
    if (v199 < v195)
      v199 = v195;
    v201 = v200 < v196;
    if (v200 <= v196)
      v200 = v196;
    if (v201)
      v199 = v196;
    if (v200 < v197)
      v199 = v197;
    v198 = v199 + 1;
  }
  else
  {
    v198 = 0;
  }
  v202 = v191 - v198;
  v187 = v192 - v198;
  v188 = v193 - v198;
  v203 = atomic_load(&_MergedGlobals_11);
  v268 = v202;
  if (v203)
  {
    webrtc::metrics::HistogramAdd(v203, v187 - v202);
  }
  else
  {
    while (!__ldaxr(&_MergedGlobals_11))
    {
      if (!__stlxr(0, &_MergedGlobals_11))
        goto LABEL_296;
    }
    __clrex();
  }
LABEL_296:
  v257 = v197 - v198;
  v205 = atomic_load(&qword_253EA5678);
  if (v205)
  {
    webrtc::metrics::HistogramAdd(v205, v188 - v187);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5678))
    {
      if (!__stlxr(0, &qword_253EA5678))
        goto LABEL_301;
    }
    __clrex();
  }
LABEL_301:
  v207 = atomic_load(&qword_253EA5680);
  v263 = v195 - v198;
  v265 = v194 - v198;
  v259 = v196 - v198;
  if (v207)
  {
    webrtc::metrics::HistogramAdd(v207, v195 - v198 - v188);
    v184 = v246;
  }
  else
  {
    v184 = v246;
    while (!__ldaxr(&qword_253EA5680))
    {
      if (!__stlxr(0, &qword_253EA5680))
        goto LABEL_308;
    }
    __clrex();
  }
LABEL_308:
  v209 = v184 / 0x3E8uLL;
  if (v184 % 0x3E8uLL > 0x1F3)
    ++v209;
  if (-v184 % 0x3E8uLL <= 0x1F4)
    v210 = 0;
  else
    v210 = -1;
  v211 = v210 - -v184 / 0x3E8uLL;
  if (v184 < 0)
    v212 = v211;
  else
    v212 = v209;
  v213 = v169 / 0x3E8uLL;
  if (v169 % 0x3E8uLL > 0x1F3)
    ++v213;
  if (-v169 % 0x3E8uLL <= 0x1F4)
    v214 = 0;
  else
    v214 = -1;
  if (v169 < 0)
    v215 = v214 - -v169 / 0x3E8uLL;
  else
    v215 = v213;
  if (!v251)
  {
    v216 = -1;
    v217 = *(_DWORD *)(v260 + 16);
    v218 = atomic_load(&qword_253EA5688);
    if (!v218)
      goto LABEL_339;
    goto LABEL_337;
  }
  if ((v245 & 0x8000000000000000) == 0)
  {
    if (v245 % 0x3E8 <= 0x1F3)
      v216 = v245 / 0x3E8;
    else
      v216 = v245 / 0x3E8 + 1;
    v217 = *(_DWORD *)(v260 + 16);
    v218 = atomic_load(&qword_253EA5688);
    if (!v218)
      goto LABEL_339;
    goto LABEL_337;
  }
  if (-(uint64_t)v245 % 0x3E8uLL <= 0x1F4)
    v219 = 0;
  else
    v219 = -1;
  v216 = v219 - -(uint64_t)v245 / 0x3E8uLL;
  v217 = *(_DWORD *)(v260 + 16);
  v218 = atomic_load(&qword_253EA5688);
  if (v218)
  {
LABEL_337:
    webrtc::metrics::HistogramAdd(v218, v247 - v244);
    goto LABEL_341;
  }
LABEL_339:
  while (!__ldaxr(&qword_253EA5688))
  {
    if (!__stlxr(0, &qword_253EA5688))
      goto LABEL_341;
  }
  __clrex();
LABEL_341:
  v221 = atomic_load(&qword_253EA5690);
  if (v221)
  {
    webrtc::metrics::HistogramAdd(v221, v212 - v247);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5690))
    {
      if (!__stlxr(0, &qword_253EA5690))
        goto LABEL_346;
    }
    __clrex();
  }
LABEL_346:
  v223 = v188;
  v224 = atomic_load(&qword_253EA5698);
  if (v224)
  {
    v225 = v187;
    webrtc::metrics::HistogramAdd(v224, v215 - v212);
  }
  else
  {
    v225 = v187;
    while (!__ldaxr(&qword_253EA5698))
    {
      if (!__stlxr(0, &qword_253EA5698))
        goto LABEL_353;
    }
    __clrex();
  }
LABEL_353:
  v227 = *(_QWORD *)(v261 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(v227 + 8));
  *(_DWORD *)(v227 + 144) = v217;
  *(_QWORD *)(v227 + 152) = v268;
  *(_QWORD *)(v227 + 160) = v225;
  *(_QWORD *)(v227 + 168) = v223;
  *(_QWORD *)(v227 + 176) = v265;
  *(_QWORD *)(v227 + 184) = v263;
  *(_QWORD *)(v227 + 192) = v259;
  *(_QWORD *)(v227 + 200) = v257;
  *(_QWORD *)(v227 + 208) = v244;
  *(_QWORD *)(v227 + 216) = v247;
  *(_QWORD *)(v227 + 224) = v212;
  *(_QWORD *)(v227 + 232) = v215;
  *(_QWORD *)(v227 + 240) = v216;
  *(_BYTE *)(v227 + 248) = v250;
  *(_DWORD *)(v227 + 249) = *(_DWORD *)v269;
  *(_DWORD *)(v227 + 252) = *(_DWORD *)&v269[3];
  *(_BYTE *)(v227 + 256) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)(v227 + 8));
  v228 = v245;
  if (!v251)
    v228 = -1;
  *(_QWORD *)(v260 + 32) = v228;
  (***(void (****)(_QWORD))(v261 + 24))(*(_QWORD *)(v261 + 24));
  v229 = v255;
  if (v255)
  {
    do
    {
      v230 = __ldaxr((unsigned int *)v255);
      v231 = v230 - 1;
    }
    while (__stlxr(v231, (unsigned int *)v255));
    if (!v231)
    {
      v232 = *(_QWORD *)(v255 + 8);
      if (v232)
      {
        v233 = *(_QWORD *)(v255 + 16);
        v234 = *(void **)(v255 + 8);
        if (v233 != v232)
        {
          do
          {
            v235 = *(void **)(v233 - 96);
            if (v235)
            {
              *(_QWORD *)(v233 - 88) = v235;
              operator delete(v235);
              v229 = v255;
            }
            v233 -= 104;
          }
          while (v233 != v232);
          v234 = *(void **)(v229 + 8);
        }
        *(_QWORD *)(v229 + 16) = v232;
        operator delete(v234);
      }
LABEL_369:
      JUMPOUT(0x20BD0ADECLL);
    }
  }
}

void std::deque<webrtc::FrameInfo>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v16 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x1C];
    v6 = (unint64_t)*v5 + 144 * (v4 % 0x1C);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x1C] + 144 * ((a1[5] + v4) % 0x1C);
    if (v6 != v7)
    {
      while (v6)
      {
        v8 = *(_QWORD *)(v6 + 128);
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            v11 = *(_QWORD *)(v8 + 8);
            if (v11)
            {
              v12 = *(_QWORD *)(v8 + 16);
              v13 = *(void **)(v8 + 8);
              if (v12 != v11)
              {
                do
                {
                  v14 = *(void **)(v12 - 96);
                  if (v14)
                  {
                    *(_QWORD *)(v12 - 88) = v14;
                    operator delete(v14);
                  }
                  v12 -= 104;
                }
                while (v12 != v11);
                v13 = *(void **)(v8 + 8);
              }
              *(_QWORD *)(v8 + 16) = v11;
              operator delete(v13);
            }
            MEMORY[0x20BD0ADEC](v8, 0x1020C40E72D6CFBLL);
          }
        }
        v6 += 144;
        if (v6 - (_QWORD)*v5 == 4032)
        {
          v15 = (unint64_t)v5[1];
          ++v5;
          v6 = v15;
        }
        if (v6 == v7)
        {
          v2 = (void **)a1[1];
          v3 = (void **)a1[2];
          goto LABEL_21;
        }
      }
      __break(1u);
      return;
    }
LABEL_21:
    a1[5] = 0;
    v16 = (char *)v3 - (char *)v2;
    if (v16 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v17 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v16 = v17 - (_QWORD)v2;
      }
      while (v16 > 0x10);
    }
  }
  if (v16 >> 3 == 1)
  {
    v18 = 14;
  }
  else
  {
    if (v16 >> 3 != 2)
      return;
    v18 = 28;
  }
  a1[4] = v18;
}

void webrtc::VCMGenericDecoder::~VCMGenericDecoder(webrtc::VCMGenericDecoder *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

uint64_t webrtc::VCMGenericDecoder::Configure(webrtc::VCMGenericDecoder *this, const webrtc::VideoDecoder::Settings *a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *__p[2];
  uint64_t v15;
  char v16;

  v3 = (*(uint64_t (**)(_QWORD, const webrtc::VideoDecoder::Settings *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 1) + 56))(__p);
  v4 = (void **)((char *)this + 24);
  if (*((char *)this + 47) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)__p;
  *((_QWORD *)this + 5) = v15;
  *((_BYTE *)this + 48) = v16;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    webrtc::VideoDecoder::DecoderInfo::ToString((webrtc::VCMGenericDecoder *)((char *)this + 24), (char *)__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/generic_decoder.cc");
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p[0]);
      v12 = *(_QWORD **)this;
      if (!*(_QWORD *)this)
        return v3;
      goto LABEL_6;
    }
  }
  v12 = *(_QWORD **)this;
  if (*(_QWORD *)this)
LABEL_6:
    (*(void (**)(_QWORD, char *))(*(_QWORD *)v12[3] + 24))(v12[3], (char *)this + 24);
  return v3;
}

uint64_t webrtc::VCMGenericDecoder::Decode(std::string *this, const webrtc::EncodedImage *a2, Timestamp a3, uint64_t a4)
{
  char v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void **v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  void **p_data;
  uint64_t v49;
  void *v50;
  std::string::size_type size;
  int v52;
  std::string *v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  size_t v63;
  void *v64;
  char *v65;
  std::string::size_type v66;
  pthread_mutex_t *v67;
  uint64_t v68;
  int64_t var0;
  char v71;
  uint64_t v72;
  std::string::value_type v73;
  BOOL v74;
  uint64_t v75;
  int v76;
  int v77;
  void *__p;
  char v79;
  void *__s1[2];
  int64_t v81;
  std::string::value_type v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD v86[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[23];
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v76 = *((_DWORD *)a2 + 38);
  v77 = *((_DWORD *)a2 + 7);
  v8 = *((_BYTE *)a2 + 40);
  v9 = *(_OWORD *)((char *)a2 + 57);
  v10 = *(_OWORD *)((char *)a2 + 89);
  v89 = *(_OWORD *)((char *)a2 + 73);
  *(_OWORD *)v90 = v10;
  *(_QWORD *)&v90[15] = *((_QWORD *)a2 + 13);
  v87 = *(_OWORD *)((char *)a2 + 41);
  v88 = v9;
  v75 = *((_QWORD *)a2 + 1);
  v11 = (unsigned int *)*((_QWORD *)a2 + 38);
  if (v11)
  {
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v74 = a4 >= 0;
  v13 = *((_DWORD *)a2 + 6);
  if (v13 == 3)
  {
    v73 = *((_BYTE *)a2 + 32);
    this->__r_.__value_.__s.__data_[16] = v73;
  }
  else
  {
    v73 = this->__r_.__value_.__s.__data_[16];
  }
  v14 = this->__r_.__value_.__r.__words[0];
  v72 = (1000 * a4) & ~(a4 >> 63);
  v85 = v89;
  v86[0] = *(_OWORD *)v90;
  *(_QWORD *)((char *)v86 + 15) = *(_QWORD *)&v90[15];
  v83 = v87;
  v84 = v88;
  pthread_mutex_lock((pthread_mutex_t *)(v14 + 40));
  v15 = v14 + 104;
  v16 = *(_QWORD *)(v14 + 144);
  if ((_DWORD)v16 == 10)
  {
    v17 = *(_QWORD *)(v14 + 136);
    v18 = *(_QWORD *)(*(_QWORD *)(v14 + 112) + 8 * (v17 / 0x1C));
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 144 * (v17 % 0x1C) + 128);
      if (v19)
      {
        do
        {
          v20 = __ldaxr((unsigned int *)v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, (unsigned int *)v19));
        if (!v21)
        {
          v71 = v8;
          v22 = *(_QWORD *)(v19 + 8);
          if (v22)
          {
            var0 = a3.var0;
            v23 = *(_QWORD *)(v19 + 16);
            v24 = *(void **)(v19 + 8);
            if (v23 != v22)
            {
              do
              {
                v25 = *(void **)(v23 - 96);
                if (v25)
                {
                  *(_QWORD *)(v23 - 88) = v25;
                  operator delete(v25);
                }
                v23 -= 104;
              }
              while (v23 != v22);
              v24 = *(void **)(v19 + 8);
            }
            *(_QWORD *)(v19 + 16) = v22;
            operator delete(v24);
            a3.var0 = var0;
          }
          MEMORY[0x20BD0ADEC](v19, 0x1020C40E72D6CFBLL);
          v8 = v71;
          v15 = v14 + 104;
        }
      }
      v35 = *(_QWORD *)(v14 + 144) - 1;
      v36 = *(_QWORD *)(v14 + 136) + 1;
      *(_QWORD *)(v14 + 136) = v36;
      *(_QWORD *)(v14 + 144) = v35;
      v37 = *(void ***)(v14 + 112);
      if (v36 >= 0x38)
      {
        v38 = v15;
        operator delete(*v37);
        v15 = v38;
        v37 = (void **)(*(_QWORD *)(v14 + 112) + 8);
        *(_QWORD *)(v14 + 112) = v37;
        v35 = *(_QWORD *)(v14 + 144);
        v36 = *(_QWORD *)(v14 + 136) - 28;
        *(_QWORD *)(v14 + 136) = v36;
      }
      v39 = *(void ***)(v14 + 120);
      v40 = 28 * (v39 - v37) - 1;
      if (v39 == v37)
        v40 = 0;
      if (v40 == v36 + v35)
      {
        std::deque<webrtc::FrameInfo>::__add_back_capacity(v15);
        v37 = *(void ***)(v14 + 112);
        v39 = *(void ***)(v14 + 120);
      }
      if (v39 != v37)
      {
        v41 = *(_QWORD *)(v14 + 144) + *(_QWORD *)(v14 + 136);
        v42 = (char *)v37[v41 / 0x1C];
        if (v42)
        {
          v43 = &v42[144 * (v41 % 0x1C)];
          v44 = v83;
          *(_OWORD *)(v43 + 65) = v84;
          v45 = v86[0];
          *(_OWORD *)(v43 + 81) = v85;
          *(_OWORD *)(v43 + 97) = v45;
          *(_DWORD *)v43 = v76;
          *((_QWORD *)v43 + 1) = v72;
          v43[16] = v74;
          *((Timestamp *)v43 + 3) = a3;
          v43[32] = 1;
          *((_DWORD *)v43 + 10) = v77;
          v43[44] = v73;
          v43[48] = v8;
          v46 = *(_QWORD *)((char *)v86 + 15);
          *(_OWORD *)(v43 + 49) = v44;
          *((_QWORD *)v43 + 14) = v46;
          *((_QWORD *)v43 + 15) = v75;
          *((_QWORD *)v43 + 16) = v11;
          *((_DWORD *)v43 + 34) = v13;
          ++*(_QWORD *)(v14 + 144);
          pthread_mutex_unlock((pthread_mutex_t *)(v14 + 40));
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v14 + 24) + 8))(*(_QWORD *)(v14 + 24), 1);
          goto LABEL_36;
        }
      }
    }
LABEL_83:
    __break(1u);
  }
  v26 = *(_QWORD *)(v14 + 112);
  v27 = *(_QWORD *)(v14 + 120);
  v28 = 28 * ((v27 - v26) >> 3) - 1;
  if (v27 == v26)
    v28 = 0;
  if (v28 == *(_QWORD *)(v14 + 136) + v16)
  {
    std::deque<webrtc::FrameInfo>::__add_back_capacity(v15);
    v26 = *(_QWORD *)(v14 + 112);
    v27 = *(_QWORD *)(v14 + 120);
  }
  if (v27 == v26)
    goto LABEL_83;
  v29 = *(_QWORD *)(v14 + 144) + *(_QWORD *)(v14 + 136);
  v30 = *(_QWORD *)(v26 + 8 * (v29 / 0x1C));
  if (!v30)
    goto LABEL_83;
  v31 = v30 + 144 * (v29 % 0x1C);
  v32 = v87;
  *(_OWORD *)(v31 + 65) = v88;
  v33 = *(_OWORD *)v90;
  *(_OWORD *)(v31 + 81) = v89;
  *(_OWORD *)(v31 + 97) = v33;
  *(_DWORD *)v31 = v76;
  *(_QWORD *)(v31 + 8) = v72;
  *(_BYTE *)(v31 + 16) = v74;
  *(Timestamp *)(v31 + 24) = a3;
  *(_BYTE *)(v31 + 32) = 1;
  *(_DWORD *)(v31 + 40) = v77;
  *(_BYTE *)(v31 + 44) = v73;
  *(_BYTE *)(v31 + 48) = v8;
  v34 = *(_QWORD *)&v90[15];
  *(_OWORD *)(v31 + 49) = v32;
  *(_QWORD *)(v31 + 112) = v34;
  *(_QWORD *)(v31 + 120) = v75;
  *(_QWORD *)(v31 + 128) = v11;
  *(_DWORD *)(v31 + 136) = v13;
  ++*(_QWORD *)(v14 + 144);
  pthread_mutex_unlock((pthread_mutex_t *)(v14 + 40));
LABEL_36:
  v47 = (*(uint64_t (**)(std::string::size_type, const webrtc::EncodedImage *, uint64_t))(*(_QWORD *)this->__r_.__value_.__l.__size_
                                                                                                 + 24))(this->__r_.__value_.__l.__size_, a2, a4);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)this->__r_.__value_.__l.__size_ + 56))(__s1);
  p_data = (void **)&this[1].__r_.__value_.__l.__data_;
  if (v82 == this[2].__r_.__value_.__s.__data_[0])
  {
    v49 = HIBYTE(v81);
    if (v81 >= 0)
      v50 = (void *)HIBYTE(v81);
    else
      v50 = __s1[1];
    size = HIBYTE(this[1].__r_.__value_.__r.__words[2]);
    v52 = (char)size;
    if ((size & 0x80u) != 0)
      size = this[1].__r_.__value_.__l.__size_;
    if (v50 == (void *)size)
    {
      if (v52 >= 0)
        v53 = this + 1;
      else
        v53 = (std::string *)*p_data;
      if (v81 < 0)
      {
        if (!memcmp(__s1[0], v53, (size_t)__s1[1]))
          goto LABEL_76;
      }
      else
      {
        if (!HIBYTE(v81))
          goto LABEL_76;
        v54 = __s1;
        while (*(unsigned __int8 *)v54 == v53->__r_.__value_.__s.__data_[0])
        {
          v54 = (void **)((char *)v54 + 1);
          v53 = (std::string *)((char *)v53 + 1);
          if (!--v49)
            goto LABEL_76;
        }
      }
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    webrtc::VideoDecoder::DecoderInfo::ToString((webrtc::VideoDecoder::DecoderInfo *)__s1, (char *)&__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v55, v56, v57, v58, v59, v60, v61, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/generic_decoder.cc");
    if (v79 < 0)
      operator delete(__p);
  }
  if (p_data != __s1)
  {
    if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
    {
      if (v81 >= 0)
        v62 = __s1;
      else
        v62 = (void **)__s1[0];
      if (v81 >= 0)
        v63 = HIBYTE(v81);
      else
        v63 = (size_t)__s1[1];
      std::string::__assign_no_alias<false>(this + 1, (const std::string::value_type *)v62, v63);
    }
    else if (v81 < 0)
    {
      std::string::__assign_no_alias<true>(this[1].__r_.__value_.__r.__words, (char *)__s1[0], (size_t)__s1[1]);
    }
    else
    {
      *(_OWORD *)p_data = *(_OWORD *)__s1;
      this[1].__r_.__value_.__r.__words[2] = v81;
    }
  }
  this[2].__r_.__value_.__s.__data_[0] = v82;
  v64 = (void *)HIBYTE(v81);
  if (v81 < 0)
    v64 = __s1[1];
  if (!v64)
  {
    if (SHIBYTE(v81) < 0)
    {
      __s1[1] = (void *)7;
      v65 = (char *)__s1[0];
    }
    else
    {
      HIBYTE(v81) = 7;
      v65 = (char *)__s1;
    }
    strcpy(v65, "unknown");
  }
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(this->__r_.__value_.__r.__words[0] + 24) + 24))(*(_QWORD *)(this->__r_.__value_.__r.__words[0] + 24), __s1);
LABEL_76:
  if ((v47 & 0x80000000) != 0 || (_DWORD)v47 == 1)
  {
    v66 = this->__r_.__value_.__r.__words[0];
    v67 = (pthread_mutex_t *)(this->__r_.__value_.__r.__words[0] + 40);
    pthread_mutex_lock(v67);
    v68 = *(unsigned int *)(v66 + 144);
    std::deque<webrtc::FrameInfo>::clear((_QWORD *)(v66 + 104));
    pthread_mutex_unlock(v67);
    if ((int)v68 >= 1)
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v66 + 24) + 8))(*(_QWORD *)(v66 + 24), v68);
  }
  if (SHIBYTE(v81) < 0)
    operator delete(__s1[0]);
  return v47;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,webrtc::FrameInfo *,webrtc::FrameInfo *,webrtc::FrameInfo *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  if (a2 == a1)
    return a3;
  v4 = a2;
  do
  {
    v8 = *(_OWORD *)(v4 - 144);
    v9 = *(_OWORD *)(v4 - 128);
    v10 = *(_OWORD *)(v4 - 96);
    *(_OWORD *)(v3 - 112) = *(_OWORD *)(v4 - 112);
    *(_OWORD *)(v3 - 96) = v10;
    *(_OWORD *)(v3 - 144) = v8;
    *(_OWORD *)(v3 - 128) = v9;
    v11 = *(_OWORD *)(v4 - 80);
    v12 = *(_OWORD *)(v4 - 64);
    v13 = *(_OWORD *)(v4 - 32);
    *(_OWORD *)(v3 - 48) = *(_OWORD *)(v4 - 48);
    *(_OWORD *)(v3 - 32) = v13;
    *(_OWORD *)(v3 - 80) = v11;
    *(_OWORD *)(v3 - 64) = v12;
    v14 = *(_QWORD *)(v4 - 16);
    *(_QWORD *)(v4 - 16) = 0;
    v15 = *(_QWORD *)(v3 - 16);
    *(_QWORD *)(v3 - 16) = v14;
    if (v15)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v15));
      if (!v17)
      {
        v18 = *(_QWORD *)(v15 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v15 + 16);
          v6 = *(void **)(v15 + 8);
          if (v19 != v18)
          {
            do
            {
              v20 = *(void **)(v19 - 96);
              if (v20)
              {
                *(_QWORD *)(v19 - 88) = v20;
                operator delete(v20);
              }
              v19 -= 104;
            }
            while (v19 != v18);
            v6 = *(void **)(v15 + 8);
          }
          *(_QWORD *)(v15 + 16) = v18;
          operator delete(v6);
        }
        MEMORY[0x20BD0ADEC](v15, 0x1020C40E72D6CFBLL);
      }
    }
    result = v3 - 144;
    *(_DWORD *)(v3 - 8) = *(_DWORD *)(v4 - 8);
    v3 -= 144;
    v4 -= 144;
  }
  while (v4 != a1);
  return result;
}

__int128 *std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,webrtc::FrameInfo *,webrtc::FrameInfo *,webrtc::FrameInfo *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v7 = *v4;
      v8 = v4[1];
      v9 = v4[3];
      *(_OWORD *)(a3 + 32) = v4[2];
      *(_OWORD *)(a3 + 48) = v9;
      *(_OWORD *)a3 = v7;
      *(_OWORD *)(a3 + 16) = v8;
      v10 = v4[4];
      v11 = v4[5];
      v12 = v4[7];
      *(_OWORD *)(a3 + 96) = v4[6];
      *(_OWORD *)(a3 + 112) = v12;
      *(_OWORD *)(a3 + 64) = v10;
      *(_OWORD *)(a3 + 80) = v11;
      v13 = *((_QWORD *)v4 + 16);
      *((_QWORD *)v4 + 16) = 0;
      v14 = *(_QWORD *)(a3 + 128);
      *(_QWORD *)(a3 + 128) = v13;
      if (v14)
      {
        do
        {
          v15 = __ldaxr((unsigned int *)v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, (unsigned int *)v14));
        if (!v16)
        {
          v17 = *(_QWORD *)(v14 + 8);
          if (v17)
          {
            v18 = *(_QWORD *)(v14 + 16);
            v6 = *(void **)(v14 + 8);
            if (v18 != v17)
            {
              do
              {
                v19 = *(void **)(v18 - 96);
                if (v19)
                {
                  *(_QWORD *)(v18 - 88) = v19;
                  operator delete(v19);
                }
                v18 -= 104;
              }
              while (v18 != v17);
              v6 = *(void **)(v14 + 8);
            }
            *(_QWORD *)(v14 + 16) = v17;
            operator delete(v6);
          }
          MEMORY[0x20BD0ADEC](v14, 0x1020C40E72D6CFBLL);
        }
      }
      *(_DWORD *)(a3 + 136) = *((_DWORD *)v4 + 34);
      v4 += 9;
      a3 += 144;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::deque<webrtc::FrameInfo>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  BOOL v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x1C;
  v4 = v2 - 28;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v30 = *(char **)a1;
    if ((unint64_t)v7 > *(_QWORD *)a1)
    {
      v31 = (uint64_t)&v7[-*(_QWORD *)a1] >> 3;
      if (v31 >= -1)
        v32 = v31 + 1;
      else
        v32 = v31 + 2;
      v33 = v32 >> 1;
      v34 = -v33;
      v35 = &v7[-8 * v33];
      v36 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v33], v7, v5 - v7);
        v7 = *(char **)(a1 + 8);
      }
      v5 = &v35[v36];
      v37 = &v7[8 * v34];
      goto LABEL_32;
    }
    v39 = (v5 - v30) >> 2;
    if (v5 == v30)
      v39 = 1;
    if (v39 >> 61)
      goto LABEL_108;
    v40 = v39 >> 2;
    v41 = 8 * v39;
    v42 = (char *)operator new(8 * v39);
    v43 = &v42[8 * v40];
    v45 = v5 - v7;
    v44 = v5 == v7;
    v5 = v43;
    if (!v44)
    {
      v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
      v46 = v45 - 8;
      if ((unint64_t)(v45 - 8) < 0x38)
      {
        v47 = &v42[8 * v40];
        do
        {
LABEL_91:
          v100 = *(_QWORD *)v7;
          v7 += 8;
          *(_QWORD *)v47 = v100;
          v47 += 8;
        }
        while (v47 != v5);
        goto LABEL_92;
      }
      v93 = &v42[8 * v40];
      v47 = v93;
      if ((unint64_t)(v93 - v7) < 0x20)
        goto LABEL_91;
      v94 = (v46 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v47 = &v43[v95];
      v7 += v95;
      v96 = (__int128 *)(v6 + 3);
      v97 = v93 + 16;
      v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v99 = *v96;
        *(v97 - 1) = *(v96 - 1);
        *v97 = v99;
        v96 += 2;
        v97 += 2;
        v98 -= 4;
      }
      while (v98);
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_91;
    }
LABEL_92:
    *(_QWORD *)a1 = v42;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = &v42[v41];
    if (v30)
    {
      operator delete(v30);
      v5 = *(char **)(a1 + 16);
    }
LABEL_4:
    if (!v5)
    {
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
LABEL_5:
    *(_QWORD *)v5 = v8;
LABEL_10:
    *(_QWORD *)(a1 + 16) += 8;
    return;
  }
  v10 = *(char **)(a1 + 16);
  v9 = *(char **)(a1 + 24);
  v12 = *(char **)a1;
  v11 = *(char **)(a1 + 8);
  v13 = v10 - v11;
  v14 = (v10 - v11) >> 3;
  v15 = (uint64_t)&v9[-*(_QWORD *)a1];
  if (v14 < (unint64_t)(v15 >> 3))
  {
    v16 = operator new(0xFC0uLL);
    v17 = v16;
    if (v9 != v10)
    {
      if (v10)
      {
        *(_QWORD *)v10 = v16;
        goto LABEL_10;
      }
      goto LABEL_107;
    }
    if (v11 == v12)
    {
      v70 = (v9 - v11) >> 2;
      if (v10 == v11)
        v70 = 1;
      if (v70 >> 61)
        goto LABEL_108;
      v71 = (v70 + 3) >> 2;
      v72 = 8 * v70;
      v73 = (char *)operator new(8 * v70);
      v38 = &v73[8 * v71];
      v74 = v38;
      if (v10 != v11)
      {
        v74 = &v38[8 * v14];
        v75 = &v73[8 * v71];
        v76 = v11;
        if ((unint64_t)(v13 - 8) < 0x38)
          goto LABEL_111;
        v77 = &v73[8 * v71];
        v75 = v77;
        v76 = v11;
        if ((unint64_t)(v77 - v11) < 0x20)
          goto LABEL_111;
        v78 = ((unint64_t)(v13 - 8) >> 3) + 1;
        v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v38[v79];
        v76 = &v11[v79];
        v80 = (__int128 *)(v11 + 16);
        v81 = v77 + 16;
        v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v83 = *v80;
          *(v81 - 1) = *(v80 - 1);
          *v81 = v83;
          v80 += 2;
          v81 += 2;
          v82 -= 4;
        }
        while (v82);
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_111:
          do
          {
            v84 = *(_QWORD *)v76;
            v76 += 8;
            *(_QWORD *)v75 = v84;
            v75 += 8;
          }
          while (v75 != v74);
        }
      }
      *(_QWORD *)a1 = v73;
      *(_QWORD *)(a1 + 8) = v38;
      *(_QWORD *)(a1 + 16) = v74;
      *(_QWORD *)(a1 + 24) = &v73[v72];
      if (v11)
      {
        operator delete(v11);
        v38 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v38 = v11;
    }
    *((_QWORD *)v38 - 1) = v17;
    v85 = *(char **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v85 - 8;
    v8 = *((_QWORD *)v85 - 1);
    *(_QWORD *)(a1 + 8) = v85;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v86 = *(char **)a1;
    if ((unint64_t)v85 > *(_QWORD *)a1)
    {
      v87 = (uint64_t)&v85[-*(_QWORD *)a1] >> 3;
      if (v87 >= -1)
        v88 = v87 + 1;
      else
        v88 = v87 + 2;
      v89 = v88 >> 1;
      v90 = -v89;
      v91 = &v85[-8 * v89];
      v92 = v5 - v85;
      if (v5 != v85)
      {
        memmove(&v85[-8 * v89], v85, v5 - v85);
        v85 = *(char **)(a1 + 8);
      }
      v5 = &v91[v92];
      v37 = &v85[8 * v90];
LABEL_32:
      *(_QWORD *)(a1 + 8) = v37;
      *(_QWORD *)(a1 + 16) = v5;
      goto LABEL_5;
    }
    v101 = (v5 - v86) >> 2;
    if (v5 == v86)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v85;
      v44 = v5 == v85;
      v5 = v105;
      if (v44)
        goto LABEL_105;
      v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
      v107 = v106 - 8;
      if ((unint64_t)(v106 - 8) >= 0x38)
      {
        v109 = &v104[8 * v102];
        v108 = v109;
        if ((unint64_t)(v109 - v85) >= 0x20)
        {
          v110 = (v107 >> 3) + 1;
          v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = &v105[v111];
          v112 = &v85[v111];
          v113 = (__int128 *)(v85 + 16);
          v114 = v109 + 16;
          v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          v85 = v112;
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_105:
            *(_QWORD *)a1 = v104;
            *(_QWORD *)(a1 + 8) = v105;
            *(_QWORD *)(a1 + 16) = v5;
            *(_QWORD *)(a1 + 24) = &v104[v103];
            if (v86)
            {
              operator delete(v86);
              v5 = *(char **)(a1 + 16);
            }
            goto LABEL_4;
          }
        }
      }
      else
      {
        v108 = &v104[8 * v102];
      }
      do
      {
        v117 = *(_QWORD *)v85;
        v85 += 8;
        *(_QWORD *)v108 = v117;
        v108 += 8;
      }
      while (v108 != v5);
      goto LABEL_105;
    }
LABEL_108:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v18 = v15 >> 2;
  if (v9 == v12)
    v19 = 1;
  else
    v19 = v18;
  if (v19 >> 61)
    goto LABEL_108;
  v20 = (char *)operator new(8 * v19);
  v21 = &v20[8 * v14];
  v22 = &v20[8 * v19];
  v23 = operator new(0xFC0uLL);
  v24 = v23;
  if (v14 != v19)
    goto LABEL_21;
  if (v13 >= 1)
  {
    v25 = v14 + 2;
    if (v14 >= -1)
      v25 = v14 + 1;
    v21 -= 8 * (v25 >> 1);
LABEL_21:
    *(_QWORD *)v21 = v23;
    v26 = v21 + 8;
    if (v10 != v11)
      goto LABEL_48;
    goto LABEL_22;
  }
  v48 = v13 >> 2;
  if (v10 == v11)
    v48 = 1;
  if (v48 >> 61)
    goto LABEL_108;
  v49 = 8 * v48;
  v21 = (char *)operator new(8 * v48);
  operator delete(v20);
  v22 = &v21[v49];
  v50 = *(char **)(a1 + 8);
  v10 = *(char **)(a1 + 16);
  v20 = v21;
  *(_QWORD *)v21 = v24;
  v26 = v21 + 8;
  if (v10 != v50)
  {
    while (1)
    {
LABEL_48:
      if (v21 == v20)
      {
        if (v26 >= v22)
        {
          v55 = (v22 - v21) >> 2;
          if (v22 == v21)
            v55 = 1;
          if (v55 >> 61)
            goto LABEL_108;
          v56 = (v55 + 3) >> 2;
          v57 = 8 * v55;
          v58 = (char *)operator new(8 * v55);
          v20 = v58;
          v51 = &v58[8 * v56];
          v28 = v51;
          v59 = v26 - v21;
          if (v26 != v21)
          {
            v28 = &v51[v59 & 0xFFFFFFFFFFFFFFF8];
            v60 = v59 - 8;
            v61 = &v58[8 * v56];
            v62 = v21;
            if (v60 < 0x38)
              goto LABEL_112;
            v61 = &v58[8 * v56];
            v62 = v21;
            if ((unint64_t)(v61 - v21) < 0x20)
              goto LABEL_112;
            v63 = (v60 >> 3) + 1;
            v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
            v61 = &v51[v64];
            v62 = &v21[v64];
            v65 = (__int128 *)(v21 + 16);
            v66 = &v58[8 * v56 + 16];
            v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v68 = *v65;
              *((_OWORD *)v66 - 1) = *(v65 - 1);
              *(_OWORD *)v66 = v68;
              v65 += 2;
              v66 += 32;
              v67 -= 4;
            }
            while (v67);
            if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_112:
              do
              {
                v69 = *(_QWORD *)v62;
                v62 += 8;
                *(_QWORD *)v61 = v69;
                v61 += 8;
              }
              while (v61 != v28);
            }
          }
          v22 = &v58[v57];
          operator delete(v21);
        }
        else
        {
          v53 = (v22 - v26) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v28 = &v26[8 * (v54 >> 1)];
          v51 = &v21[8 * (v54 >> 1)];
          if (v26 == v21)
          {
            v20 = v26;
          }
          else
          {
            memmove(&v21[8 * (v54 >> 1)], v21, v26 - v21);
            v20 = v21;
          }
        }
      }
      else
      {
        v51 = v21;
        v28 = v26;
      }
      v52 = *((_QWORD *)v10 - 1);
      v10 -= 8;
      *((_QWORD *)v51 - 1) = v52;
      v27 = v51 - 8;
      v26 = v28;
      v21 = v27;
      if (v10 == *(char **)(a1 + 8))
        goto LABEL_23;
    }
  }
LABEL_22:
  v27 = v21;
  v28 = v26;
LABEL_23:
  v29 = *(char **)a1;
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v28;
  *(_QWORD *)(a1 + 24) = v22;
  if (v29)
    operator delete(v29);
}

webrtc::GenericFrameInfo *webrtc::GenericFrameInfo::GenericFrameInfo(webrtc::GenericFrameInfo *this, const webrtc::GenericFrameInfo *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = 0;
  v4 = (unint64_t *)((char *)this + 8);
  v7 = *((_QWORD *)a2 + 1);
  v5 = (unint64_t *)((char *)a2 + 8);
  v6 = v7;
  if (v7 < 2)
  {
    *((_QWORD *)this + 7) = 0;
    v8 = (unint64_t *)((char *)this + 56);
    v9 = (unint64_t *)((char *)a2 + 56);
    v10 = *((_QWORD *)a2 + 7);
    if (v10 < 2)
      goto LABEL_3;
LABEL_10:
    if ((v10 & 1) != 0)
    {
      absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(v8, v9);
      *((_QWORD *)this + 10) = 0;
      v11 = (unint64_t *)((char *)this + 80);
      v12 = (unint64_t *)((char *)a2 + 80);
      v13 = *((_QWORD *)a2 + 10);
      if (v13 >= 2)
        goto LABEL_14;
    }
    else
    {
      *((_QWORD *)this + 7) = v10;
      *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
      *((_QWORD *)this + 10) = 0;
      v11 = (unint64_t *)((char *)this + 80);
      v12 = (unint64_t *)((char *)a2 + 80);
      v13 = *((_QWORD *)a2 + 10);
      if (v13 >= 2)
        goto LABEL_14;
    }
LABEL_4:
    *((_QWORD *)this + 13) = 0;
    v14 = (unint64_t *)((char *)this + 104);
    v15 = (unint64_t *)((char *)a2 + 104);
    v16 = *((_QWORD *)a2 + 13);
    if (v16 < 2)
      goto LABEL_21;
    goto LABEL_18;
  }
  if ((v6 & 1) != 0)
  {
    absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::InitFrom(v4, v5);
    *((_QWORD *)this + 7) = 0;
    v8 = (unint64_t *)((char *)this + 56);
    v9 = (unint64_t *)((char *)a2 + 56);
    v10 = *((_QWORD *)a2 + 7);
    if (v10 >= 2)
      goto LABEL_10;
  }
  else
  {
    *((_QWORD *)this + 1) = v6;
    v17 = *((_OWORD *)a2 + 1);
    v18 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 1) = v17;
    *((_OWORD *)this + 2) = v18;
    *((_QWORD *)this + 7) = 0;
    v8 = (unint64_t *)((char *)this + 56);
    v9 = (unint64_t *)((char *)a2 + 56);
    v10 = *((_QWORD *)a2 + 7);
    if (v10 >= 2)
      goto LABEL_10;
  }
LABEL_3:
  *((_QWORD *)this + 10) = 0;
  v11 = (unint64_t *)((char *)this + 80);
  v12 = (unint64_t *)((char *)a2 + 80);
  v13 = *((_QWORD *)a2 + 10);
  if (v13 < 2)
    goto LABEL_4;
LABEL_14:
  if ((v13 & 1) != 0)
  {
    absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(v11, v12);
    *((_QWORD *)this + 13) = 0;
    v14 = (unint64_t *)((char *)this + 104);
    v15 = (unint64_t *)((char *)a2 + 104);
    v16 = *((_QWORD *)a2 + 13);
    if (v16 < 2)
      goto LABEL_21;
  }
  else
  {
    *((_QWORD *)this + 10) = v13;
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 13) = 0;
    v14 = (unint64_t *)((char *)this + 104);
    v15 = (unint64_t *)((char *)a2 + 104);
    v16 = *((_QWORD *)a2 + 13);
    if (v16 < 2)
      goto LABEL_21;
  }
LABEL_18:
  if ((v16 & 1) != 0)
  {
    absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::InitFrom(v14, v15);
  }
  else
  {
    *((_QWORD *)this + 13) = v16;
    v19 = *((_OWORD *)a2 + 7);
    v20 = *((_OWORD *)a2 + 8);
    v21 = *((_OWORD *)a2 + 10);
    *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
    *((_OWORD *)this + 10) = v21;
    *((_OWORD *)this + 7) = v19;
    *((_OWORD *)this + 8) = v20;
  }
LABEL_21:
  std::vector<BOOL>::vector((_QWORD *)this + 22, (uint64_t)a2 + 176);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  return this;
}

void webrtc::GenericFrameInfo::~GenericFrameInfo(webrtc::GenericFrameInfo *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
    operator delete(v2);
  if ((*((_BYTE *)this + 104) & 1) != 0)
  {
    operator delete(*((void **)this + 14));
    if ((*((_BYTE *)this + 80) & 1) == 0)
    {
LABEL_5:
      if ((*((_BYTE *)this + 56) & 1) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 80) & 1) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)this + 11));
  if ((*((_BYTE *)this + 56) & 1) == 0)
  {
LABEL_6:
    if ((*((_BYTE *)this + 8) & 1) == 0)
      return;
LABEL_11:
    operator delete(*((void **)this + 2));
    return;
  }
LABEL_10:
  operator delete(*((void **)this + 8));
  if ((*((_BYTE *)this + 8) & 1) != 0)
    goto LABEL_11;
}

void *absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  void *v6;
  const void *v7;
  unint64_t v8;
  void *result;

  v2 = *a2;
  if (*a2 <= 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = v2 >> 1;
  if ((v2 & 1) != 0)
  {
    if (v5 <= 8)
      v8 = 8;
    else
      v8 = v2 >> 1;
    if (!(v8 >> 62))
    {
      v6 = operator new(4 * v8);
      a1[1] = (unint64_t)v6;
      a1[2] = v8;
      v7 = (const void *)a2[1];
      goto LABEL_9;
    }
LABEL_11:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v6 = a1 + 1;
  v7 = a2 + 1;
LABEL_9:
  result = memcpy(v6, v7, 4 * v5);
  *a1 = *a2;
  return result;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 < 0)
      abort();
    v5 = ((unint64_t)(v3 - 1) >> 6) + 1;
    v6 = operator new(8 * v5);
    *a1 = v6;
    a1[1] = 0;
    a1[2] = v5;
    v7 = *(_QWORD **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    a1[1] = v8;
    v9 = (v8 - 1) >> 6;
    if (v8 < 0x41)
      v9 = 0;
    v6[v9] = 0;
    v10 = v8 & 0x3F;
    if (v8 > 0x3F || (v8 & 0x3F) != 0)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = &v7[v8 >> 6];
      do
      {
        v15 = 1 << v11;
        if (((*v7 >> v13) & 1) != 0)
          v16 = *v6 | v15;
        else
          v16 = *v6 & ~v15;
        *v6 = v16;
        ++v13;
        v7 += v12 == 63;
        if (v12 == 63)
          v13 = 0;
        v6 += v11 == 63;
        if (v11 == 63)
          v11 = 0;
        else
          ++v11;
        v12 = v13;
      }
      while (v7 != v14 || v10 != v13);
    }
  }
  return a1;
}

void *absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::InitFrom(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  void *v6;
  const void *v7;
  unint64_t v8;
  void *result;

  v2 = *a2;
  if (*a2 <= 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = v2 >> 1;
  if ((v2 & 1) != 0)
  {
    if (v5 <= 0x10)
      v8 = 16;
    else
      v8 = v2 >> 1;
    if (!(v8 >> 61))
    {
      v6 = operator new(8 * v8);
      a1[1] = (unint64_t)v6;
      a1[2] = v8;
      v7 = (const void *)a2[1];
      goto LABEL_9;
    }
LABEL_11:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v6 = a1 + 1;
  v7 = a2 + 1;
LABEL_9:
  result = memcpy(v6, v7, 8 * v5);
  *a1 = *a2;
  return result;
}

uint64_t webrtc::GoogCcNetworkControllerFactory::Create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char v6;
  void (***v7)(__int128 *__return_ptr, _QWORD, _QWORD);
  uint64_t v8;
  void (***v9)(__int128 *__return_ptr);
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17[3];
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[3];

  v6 = *(_BYTE *)(a1 + 24);
  v7 = *(void (****)(__int128 *__return_ptr, _QWORD, _QWORD))(a1 + 8);
  if (v7)
  {
    (**v7)(v17, v7, *(_QWORD *)(a2 + 136));
    v8 = *(_QWORD *)&v17[0];
    v9 = *(void (****)(__int128 *__return_ptr))(a1 + 16);
    if (v9)
    {
LABEL_3:
      (**v9)(v17);
      v10 = *(_QWORD *)&v17[0];
      goto LABEL_6;
    }
  }
  else
  {
    v8 = 0;
    v9 = *(void (****)(__int128 *__return_ptr))(a1 + 16);
    if (v9)
      goto LABEL_3;
  }
  v10 = 0;
LABEL_6:
  v11 = operator new();
  v12 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v12;
  v17[2] = *(_OWORD *)(a2 + 32);
  v18 = *(_BYTE *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 72);
  v21 = *(_OWORD *)(a2 + 88);
  v22[0] = *(_OWORD *)(a2 + 104);
  *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)(a2 + 113);
  v19 = *(_OWORD *)(a2 + 56);
  v22[2] = *(_OWORD *)(a2 + 136);
  v14 = v8;
  v15 = v10;
  v16 = v6;
  webrtc::GoogCcNetworkController::GoogCcNetworkController(v11, v17, &v14);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = v14;
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  *a3 = v11;
  return result;
}

uint64_t webrtc::GoogCcNetworkControllerFactory::GetProcessInterval(webrtc::GoogCcNetworkControllerFactory *this)
{
  return 25000;
}

void webrtc::GoogCcNetworkControllerFactory::~GoogCcNetworkControllerFactory(webrtc::GoogCcNetworkControllerFactory *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24C0B4918;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24C0B4918;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::GoogCcNetworkController::GoogCcNetworkController(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  _OWORD *v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  BOOL v10;
  void **v11;
  unint64_t v12;
  BOOL v13;
  void **v14;
  unint64_t v15;
  BOOL v16;
  void **v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  void **v23;
  unint64_t v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *__p[2];
  __int128 v64;
  __int128 v65;
  _QWORD v66[3];

  v66[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0B4948;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = &unk_24C0B3F60;
  v6 = (__int128 *)((char *)a2 + 136);
  if (*((_QWORD *)a2 + 17))
    v7 = *((_QWORD *)a2 + 17);
  else
    v7 = a1 + 8;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 18);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a3 + 16);
  *(_QWORD *)(a1 + 64) = off_24C0B4170;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 119) = 7;
  if (a1 + 96 <= (unint64_t)"Enabled" && a1 + 103 > (unint64_t)"Enabled")
    goto LABEL_97;
  strcpy((char *)(a1 + 96), "Enabled");
  *(_QWORD *)(a1 + 128) = off_24C0B4170;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 64) = &unk_24C0B41A0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 183) = 3;
  if (a1 + 160 <= (unint64_t)"ack" && a1 + 163 > (unint64_t)"ack")
    goto LABEL_97;
  *(_BYTE *)(a1 + 162) = 107;
  *(_WORD *)(a1 + 160) = 25441;
  *(_BYTE *)(a1 + 163) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 128) = &unk_24C0B41A0;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v7 + 16))(__p, v7, "WebRTC-Bwe-MinAllocAsLowerBound", 31);
  if (SBYTE7(v64) < 0)
  {
    v9 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
      goto LABEL_97;
    v8 = (void **)__p[0];
    if (__p[1])
    {
      if (!__p[0])
        goto LABEL_97;
    }
  }
  else
  {
    v8 = __p;
    v9 = BYTE7(v64);
  }
  if (v9 >= 8)
  {
    v10 = *v8 == (void *)0x64656C6261736944;
    if ((BYTE7(v64) & 0x80) == 0)
      goto LABEL_18;
  }
  else
  {
    v10 = 0;
    if ((BYTE7(v64) & 0x80) == 0)
      goto LABEL_18;
  }
  operator delete(__p[0]);
LABEL_18:
  *(_BYTE *)(a1 + 192) = !v10;
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(__p, *(_QWORD *)(a1 + 40), "WebRTC-Bwe-IgnoreProbesLowerThanNetworkStateEstimate", 52);
  if (SBYTE7(v64) < 0)
  {
    v12 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
      goto LABEL_97;
    v11 = (void **)__p[0];
    if (__p[1])
    {
      if (!__p[0])
        goto LABEL_97;
    }
  }
  else
  {
    v11 = __p;
    v12 = BYTE7(v64);
  }
  if (v12 >= 8)
  {
    v13 = *v11 == (void *)0x64656C6261736944;
    if ((BYTE7(v64) & 0x80) == 0)
      goto LABEL_28;
  }
  else
  {
    v13 = 0;
    if ((BYTE7(v64) & 0x80) == 0)
      goto LABEL_28;
  }
  operator delete(__p[0]);
LABEL_28:
  *(_BYTE *)(a1 + 193) = !v13;
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(__p, *(_QWORD *)(a1 + 40), "WebRTC-Bwe-LimitProbesLowerThanThroughputEstimate", 49);
  if (SBYTE7(v64) < 0)
  {
    v15 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
      goto LABEL_97;
    v14 = (void **)__p[0];
    if (__p[1])
    {
      if (!__p[0])
        goto LABEL_97;
    }
  }
  else
  {
    v14 = __p;
    v15 = BYTE7(v64);
  }
  if (v15 >= 8)
  {
    v16 = *v14 == (void *)0x64656C6261736944;
    if ((BYTE7(v64) & 0x80) == 0)
      goto LABEL_38;
  }
  else
  {
    v16 = 0;
    if ((BYTE7(v64) & 0x80) == 0)
      goto LABEL_38;
  }
  operator delete(__p[0]);
LABEL_38:
  *(_BYTE *)(a1 + 194) = !v16;
  webrtc::RateControlSettings::RateControlSettings(a1 + 200, *(_QWORD *)(a1 + 40));
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(__p, *(_QWORD *)(a1 + 40), "WebRTC-Bwe-PaceAtMaxOfBweAndLowerLinkCapacity", 45);
  if (SBYTE7(v64) < 0)
  {
    v18 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
      goto LABEL_97;
    v17 = (void **)__p[0];
    if (__p[1])
    {
      if (!__p[0])
        goto LABEL_97;
    }
  }
  else
  {
    v17 = __p;
    v18 = BYTE7(v64);
  }
  if (v18 < 7)
  {
    v19 = 0;
    if ((BYTE7(v64) & 0x80) == 0)
      goto LABEL_54;
    goto LABEL_53;
  }
  v20 = *(_DWORD *)v17;
  v21 = *(_DWORD *)((char *)v17 + 3);
  v19 = v20 == 1650552389 && v21 == 1684368482;
  if ((BYTE7(v64) & 0x80) != 0)
LABEL_53:
    operator delete(__p[0]);
LABEL_54:
  *(_BYTE *)(a1 + 288) = v19;
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(__p, *(_QWORD *)(a1 + 40), "WebRTC-Bwe-LimitPacingFactorByUpperLinkCapacityEstimate", 55);
  if (SBYTE7(v64) < 0)
  {
    v24 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
      goto LABEL_97;
    v23 = (void **)__p[0];
    if (__p[1])
    {
      if (!__p[0])
        goto LABEL_97;
    }
  }
  else
  {
    v23 = __p;
    v24 = BYTE7(v64);
  }
  if (v24 >= 7)
  {
    v26 = *(_DWORD *)v23;
    v27 = *(_DWORD *)((char *)v23 + 3);
    v25 = v26 == 1650552389 && v27 == 1684368482;
    if ((BYTE7(v64) & 0x80) == 0)
      goto LABEL_70;
    goto LABEL_69;
  }
  v25 = 0;
  if ((BYTE7(v64) & 0x80) != 0)
LABEL_69:
    operator delete(__p[0]);
LABEL_70:
  *(_BYTE *)(a1 + 289) = v25;
  v29 = operator new();
  *(_QWORD *)(a1 + 296) = webrtc::ProbeController::ProbeController(v29, *(_QWORD *)(a1 + 40), *((_QWORD *)a2 + 18));
  if (*(_BYTE *)(a1 + 204) && *(_BYTE *)(a1 + 212))
  {
    v30 = *(_QWORD *)(a1 + 40);
    v31 = operator new();
    v32 = webrtc::CongestionWindowPushbackController::CongestionWindowPushbackController(v31, v30);
  }
  else
  {
    v32 = 0;
  }
  *(_QWORD *)(a1 + 304) = v32;
  v33 = (uint64_t *)operator new();
  webrtc::SendSideBandwidthEstimation::SendSideBandwidthEstimation(v33, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_QWORD *)(a1 + 312) = v34;
  v35 = operator new();
  v36 = *((_QWORD *)a2 + 18);
  *(_QWORD *)v35 = v37;
  *(_QWORD *)(v35 + 8) = v38;
  *(_QWORD *)(v35 + 16) = v39;
  *(_BYTE *)(v35 + 24) = 0;
  *(_BYTE *)(v35 + 32) = 0;
  *(_BYTE *)(v35 + 64) = 1;
  *(_DWORD *)(v35 + 40) = 0;
  *(_BYTE *)(v35 + 72) = 0;
  *(_BYTE *)(v35 + 80) = 0;
  *(_QWORD *)(v35 + 48) = 0;
  *(_QWORD *)(v35 + 56) = 0;
  *(_QWORD *)(v35 + 88) = v36;
  *(_QWORD *)(a1 + 320) = v35;
  v40 = operator new();
  v41 = *((_QWORD *)a2 + 18);
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)v40 = v40 + 8;
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 24) = v41;
  *(_BYTE *)(v40 + 32) = 0;
  *(_BYTE *)(v40 + 40) = 0;
  *(_QWORD *)(a1 + 328) = v40;
  v42 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 336) = v42;
  v43 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a1 + 344) = v43;
  v44 = operator new();
  *(_QWORD *)(a1 + 352) = webrtc::DelayBasedBwe::DelayBasedBwe(v44, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 344));
  v45 = *(_QWORD *)(a1 + 40);
  webrtc::RobustThroughputEstimatorSettings::RobustThroughputEstimatorSettings((uint64_t)__p, v45);
  if (LOBYTE(__p[0]))
  {
    v46 = operator new();
    v47 = v64;
    *(_OWORD *)(v46 + 8) = *(_OWORD *)__p;
    *(_QWORD *)v46 = &off_24C0BB910;
    *(_OWORD *)(v46 + 24) = v47;
    *(_OWORD *)(v46 + 40) = v65;
    *(_OWORD *)(v46 + 56) = 0u;
    *(_OWORD *)(v46 + 72) = 0u;
    *(_OWORD *)(v46 + 88) = 0u;
    *(_QWORD *)(v46 + 104) = 0x8000000000000000;
  }
  else
  {
    v46 = operator new();
    v48 = operator new();
    v49 = webrtc::BitrateEstimator::BitrateEstimator(v48, v45);
    *(_QWORD *)v46 = &off_24C0ACA98;
    *(_BYTE *)(v46 + 8) = 0;
    *(_BYTE *)(v46 + 16) = 0;
    *(_BYTE *)(v46 + 24) = 0;
    *(_QWORD *)(v46 + 32) = v49;
  }
  *(_QWORD *)(a1 + 360) = v46;
  v50 = *a2;
  v51 = a2[1];
  v52 = a2[2];
  *(_BYTE *)(a1 + 416) = *((_BYTE *)a2 + 48);
  *(_OWORD *)(a1 + 384) = v51;
  *(_OWORD *)(a1 + 400) = v52;
  *(_OWORD *)(a1 + 368) = v50;
  v53 = *(__int128 *)((char *)a2 + 88);
  v54 = *(__int128 *)((char *)a2 + 104);
  v55 = *(__int128 *)((char *)a2 + 113);
  *(_OWORD *)(a1 + 440) = *(__int128 *)((char *)a2 + 72);
  *(_OWORD *)(a1 + 481) = v55;
  *(_OWORD *)(a1 + 472) = v54;
  *(_OWORD *)(a1 + 456) = v53;
  *(_OWORD *)(a1 + 424) = *(__int128 *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 504) = *v6;
  *(_BYTE *)(a1 + 520) = 1;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_QWORD *)(a1 + 544) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 720) = 0x8000000000000000;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_QWORD *)(a1 + 776) = 0;
  if (!*((_BYTE *)a2 + 48))
    goto LABEL_97;
  v56 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 784) = v56;
  *(_QWORD *)(a1 + 792) = v56;
  *(_QWORD *)(a1 + 800) = v56;
  *(_DWORD *)(a1 + 808) = 3;
  *(_WORD *)(a1 + 812) = 256;
  *(_QWORD *)(a1 + 816) = 0x7FFFFFFFFFFFFFFFLL;
  if (*((_BYTE *)a2 + 80))
  {
    *(_QWORD *)(a1 + 824) = *((_QWORD *)a2 + 9);
    if (*((_BYTE *)a2 + 96))
      goto LABEL_80;
LABEL_83:
    *(_QWORD *)(a1 + 832) = 0;
    if (*((_BYTE *)a2 + 112))
      goto LABEL_81;
    goto LABEL_84;
  }
  *(double *)(a1 + 824) = 2.5;
  if (!*((_BYTE *)a2 + 96))
    goto LABEL_83;
LABEL_80:
  *(_QWORD *)(a1 + 832) = *((_QWORD *)a2 + 11);
  if (*((_BYTE *)a2 + 112))
  {
LABEL_81:
    v57 = *((_QWORD *)a2 + 13);
    goto LABEL_85;
  }
LABEL_84:
  v57 = 0;
LABEL_85:
  *(_QWORD *)(a1 + 840) = v57;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  v66[0] = a1 + 64;
  v66[1] = a1 + 128;
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(__p, *(_QWORD *)(a1 + 40), "WebRTC-Bwe-SafeResetOnRouteChange", 33);
  if ((SBYTE7(v64) & 0x80000000) == 0)
  {
    v58 = BYTE7(v64);
    v59 = (char *)__p;
    goto LABEL_90;
  }
  v58 = (uint64_t)__p[1];
  if (((unint64_t)__p[1] & 0x8000000000000000) != 0 || (v59 = (char *)__p[0], __p[1]) && !__p[0])
LABEL_97:
    __break(1u);
LABEL_90:
  webrtc::ParseFieldTrial(v66, 2, v59, v58);
  if (SBYTE7(v64) < 0)
    operator delete(__p[0]);
  v60 = *(_QWORD *)(a1 + 352);
  if (v60)
  {
    v61 = 5000;
    *(_QWORD *)(v60 + 152) = 5000;
    if (*(uint64_t *)(v60 + 168) > 5000)
      v61 = *(_QWORD *)(v60 + 168);
    *(_QWORD *)(v60 + 168) = v61;
  }
  return a1;
}

void webrtc::GoogCcNetworkController::~GoogCcNetworkController(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  webrtc::SendSideBandwidthEstimation *v8;
  void *v9;
  char *v10;
  void *v11;
  void *v12;
  void **v13;
  void **v14;
  void *v15;

  *this = &off_24C0B4948;
  std::deque<long long>::~deque[abi:sn180100](this + 92);
  v2 = this[45];
  this[45] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  v3 = this[44];
  this[44] = 0;
  if (v3)
    (*(void (**)(void *))(*(_QWORD *)v3 + 8))(v3);
  v4 = this[43];
  this[43] = 0;
  if (v4)
    (*(void (**)(void *))(*(_QWORD *)v4 + 8))(v4);
  v5 = this[42];
  this[42] = 0;
  if (v5)
    (*(void (**)(void *))(*(_QWORD *)v5 + 40))(v5);
  v6 = (uint64_t)this[41];
  this[41] = 0;
  if (v6)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v6, *(_QWORD **)(v6 + 8));
    MEMORY[0x20BD0ADEC](v6, 0x1060C4034819227);
  }
  v7 = this[40];
  this[40] = 0;
  if (v7)
    MEMORY[0x20BD0ADEC](v7, 0x1020C407CA1986DLL);
  v8 = (webrtc::SendSideBandwidthEstimation *)this[39];
  this[39] = 0;
  if (v8)
  {
    webrtc::SendSideBandwidthEstimation::~SendSideBandwidthEstimation(v8);
    MEMORY[0x20BD0ADEC]();
  }
  v9 = this[38];
  this[38] = 0;
  if (v9)
    MEMORY[0x20BD0ADEC](v9, 0x1000C40B46F825FLL);
  v10 = (char *)this[37];
  this[37] = 0;
  if (v10)
  {
    webrtc::ProbeControllerConfig::~ProbeControllerConfig((webrtc::ProbeControllerConfig *)(v10 + 304));
    MEMORY[0x20BD0ADEC](v10, 0x10B2C4087005462);
  }
  this[16] = off_24C0B4170;
  if ((*((char *)this + 183) & 0x80000000) == 0)
  {
    v11 = this[17];
    if (!v11)
      goto LABEL_22;
    goto LABEL_21;
  }
  operator delete(this[20]);
  v11 = this[17];
  if (v11)
  {
LABEL_21:
    this[18] = v11;
    operator delete(v11);
  }
LABEL_22:
  this[8] = off_24C0B4170;
  if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    v12 = this[9];
    if (!v12)
      goto LABEL_25;
    goto LABEL_24;
  }
  operator delete(this[12]);
  v12 = this[9];
  if (v12)
  {
LABEL_24:
    this[10] = v12;
    operator delete(v12);
  }
LABEL_25:
  this[1] = &unk_24C0B4260;
  v13 = (void **)this[2];
  if (v13)
  {
    v14 = (void **)this[3];
    v15 = this[2];
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v14 - 1) < 0)
          operator delete(*(v14 - 3));
        v14 -= 3;
      }
      while (v14 != v13);
      v15 = this[2];
    }
    this[3] = v13;
    operator delete(v15);
  }
}

{
  webrtc::GoogCcNetworkController::~GoogCcNetworkController(this);
  JUMPOUT(0x20BD0ADECLL);
}

double webrtc::GoogCcNetworkController::OnNetworkAvailability@<D0>(uint64_t a1@<X0>, Timestamp a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 152) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  v5 = *(_QWORD *)(a1 + 296);
  *(_BYTE *)v5 = a3 & 1;
  if ((a3 & 1) != 0)
  {
    if (!*(_DWORD *)(v5 + 20) && *(_QWORD *)(v5 + 192))
    {
      webrtc::ProbeController::InitiateExponentialProbing((webrtc::ProbeController *)v5, a2, (char **)&v7);
      goto LABEL_6;
    }
  }
  else if (*(_DWORD *)(v5 + 20) == 1)
  {
    *(_DWORD *)(v5 + 20) = 2;
    *(_QWORD *)(v5 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  }
  v7 = 0uLL;
  v8 = 0;
LABEL_6:
  result = *(double *)&v7;
  *(_OWORD *)(a4 + 56) = v7;
  *(_QWORD *)(a4 + 72) = v8;
  return result;
}

void webrtc::GoogCcNetworkController::OnNetworkRouteChange(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[3];
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  if (!*(_BYTE *)(a1 + 121))
    goto LABEL_9;
  if (*(_BYTE *)(a1 + 185))
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 24))(*(_QWORD *)(a1 + 360));
    v8 = v7;
    if (!v7)
    {
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 32))(*(_QWORD *)(a1 + 360));
      v8 = v9;
      if (!v9)
        goto LABEL_9;
    }
    if (*(_BYTE *)(a2 + 56))
      goto LABEL_6;
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 312);
    v29 = *(_QWORD *)(v28 + 488);
    if (!*(_BYTE *)(v28 + 1977) && *(_QWORD *)(v28 + 568) < v29)
      v29 = *(_QWORD *)(v28 + 568);
    v30 = *(_QWORD *)(v28 + 504);
    if (v30 <= v29)
      v6 = v29;
    else
      v6 = v30;
    v8 = 1;
    if (*(_BYTE *)(a2 + 56))
    {
LABEL_6:
      v10 = *(_QWORD *)(a2 + 48);
      if (v6 < v10)
        v10 = v6;
      *(_QWORD *)(a2 + 48) = v10;
LABEL_9:
      v11 = *(_QWORD *)(a1 + 40);
      webrtc::RobustThroughputEstimatorSettings::RobustThroughputEstimatorSettings((uint64_t)&v36, v11);
      if ((_BYTE)v36)
        goto LABEL_10;
      goto LABEL_34;
    }
  }
  *(_QWORD *)(a2 + 48) = v6;
  *(_BYTE *)(a2 + 56) = v8;
  v11 = *(_QWORD *)(a1 + 40);
  webrtc::RobustThroughputEstimatorSettings::RobustThroughputEstimatorSettings((uint64_t)&v36, v11);
  if ((_BYTE)v36)
  {
LABEL_10:
    v12 = operator new();
    v13 = v37;
    *(_OWORD *)(v12 + 8) = v36;
    *(_QWORD *)v12 = &off_24C0BB910;
    *(_OWORD *)(v12 + 24) = v13;
    *(_OWORD *)(v12 + 40) = v38;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_QWORD *)(v12 + 104) = 0x8000000000000000;
    v14 = *(_QWORD *)(a1 + 360);
    *(_QWORD *)(a1 + 360) = v12;
    if (!v14)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_34:
  v31 = operator new();
  v32 = operator new();
  v33 = webrtc::BitrateEstimator::BitrateEstimator(v32, v11);
  *(_QWORD *)v31 = &off_24C0ACA98;
  *(_BYTE *)(v31 + 8) = 0;
  *(_BYTE *)(v31 + 16) = 0;
  *(_BYTE *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = v33;
  v14 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v31;
  if (v14)
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_12:
  v15 = operator new();
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)v15 = v15 + 8;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = v16;
  *(_BYTE *)(v15 + 32) = 0;
  *(_BYTE *)(v15 + 40) = 0;
  v17 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v15;
  if (v17)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v17, *(_QWORD **)(v17 + 8));
    MEMORY[0x20BD0ADEC](v17, 0x1060C4034819227);
  }
  v18 = *(_QWORD *)(a1 + 336);
  if (v18)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 24))(v18, a2);
  v19 = operator new();
  webrtc::DelayBasedBwe::DelayBasedBwe(v19, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 344));
  v20 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(v21 + 464) = 0;
  *(_QWORD *)(v21 + 488) = 0;
  *(_QWORD *)(v21 + 504) = 5000;
  *(_OWORD *)(v21 + 512) = xmmword_208F0A8C0;
  *(_BYTE *)(v21 + 528) = 0;
  *(_QWORD *)(v21 + 536) = 0x8000000000000000;
  *(_QWORD *)(v21 + 544) = 0x8000000000000000;
  *(_WORD *)(v21 + 552) = 0;
  *(_OWORD *)(v21 + 560) = xmmword_208F0A8D0;
  *(_OWORD *)(v21 + 576) = xmmword_208F0A8E0;
  *(_QWORD *)(v21 + 592) = 0x8000000000000000;
  *(_DWORD *)(v21 + 600) = 0;
  *(_OWORD *)(v21 + 608) = 0u;
  *(_QWORD *)(v21 + 656) = 0x8000000000000000;
  v22 = *(_QWORD *)(v21 + 1904);
  if (*(_BYTE *)(v22 + 296) && *(_BYTE *)(v22 + 250))
  {
    v23 = operator new();
    webrtc::LossBasedBweV2::LossBasedBweV2(v23, *(_QWORD *)v21);
    std::unique_ptr<webrtc::LossBasedBweV2>::reset[abi:sn180100]((uint64_t *)(v21 + 1904), v23);
  }
  v24 = *(_QWORD *)(a1 + 296);
  v25 = *(_QWORD *)a2;
  *(_QWORD *)(v24 + 16) = 2;
  *(_BYTE *)(v24 + 1) = 0;
  *(_QWORD *)(v24 + 32) = 0;
  *(_QWORD *)(v24 + 40) = 0;
  *(_QWORD *)(v24 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  if (*(_BYTE *)(v24 + 184))
    *(_BYTE *)(v24 + 184) = 0;
  *(_OWORD *)(v24 + 192) = xmmword_208F0A8F0;
  *(_QWORD *)(v24 + 208) = v25;
  if (*(_BYTE *)(v24 + 240))
    *(_BYTE *)(v24 + 240) = 0;
  *(_QWORD *)(v24 + 264) = 0;
  *(_QWORD *)(v24 + 272) = 0;
  *(_QWORD *)(v24 + 256) = v25;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  v26 = *(_OWORD *)(a2 + 24);
  v34[0] = *(_OWORD *)(a2 + 8);
  v34[1] = v26;
  v34[2] = *(_OWORD *)(a2 + 40);
  v35 = *(_BYTE *)(a2 + 56);
  webrtc::GoogCcNetworkController::ResetConstraints((uint64_t)&v36, (webrtc::GoogCcNetworkController *)a1, (uint64_t)v34);
  v27 = *(_QWORD *)a2;
  *(_OWORD *)(a3 + 56) = v36;
  *(_QWORD *)(a3 + 72) = v37;
  webrtc::GoogCcNetworkController::MaybeTriggerOnNetworkChanged(a1, a3, v27);
}

void webrtc::GoogCcNetworkController::ResetConstraints(uint64_t a1, webrtc::GoogCcNetworkController *this, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Timestamp v29;
  void *__p;
  char v31;

  if (*(_BYTE *)(a3 + 16))
  {
    *((_QWORD *)this + 66) = *(_QWORD *)(a3 + 8);
    if (*(_BYTE *)(a3 + 32))
    {
LABEL_3:
      v6 = *(_QWORD *)(a3 + 24);
      goto LABEL_6;
    }
  }
  else
  {
    *((_QWORD *)this + 66) = 0;
    if (*(_BYTE *)(a3 + 32))
      goto LABEL_3;
  }
  v6 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_6:
  *((_QWORD *)this + 68) = v6;
  v7 = *(_QWORD *)(a3 + 40);
  *((_BYTE *)this + 560) = *(_BYTE *)(a3 + 48);
  *((_QWORD *)this + 69) = v7;
  webrtc::GoogCcNetworkController::ClampConstraints(this);
  v8 = *((_QWORD *)this + 39);
  v9 = *((_QWORD *)this + 69);
  v10 = *((unsigned __int8 *)this + 560);
  v11 = *((_QWORD *)this + 68);
  v12 = *(_QWORD *)a3;
  if (*((uint64_t *)this + 67) <= 5000)
    v13 = 5000;
  else
    v13 = *((_QWORD *)this + 67);
  v14 = v11 - 1;
  if (v13 > v11)
    v11 = v13;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v15 = 1000000000;
  else
    v15 = v11;
  *(_QWORD *)(v8 + 504) = v13;
  *(_QWORD *)(v8 + 512) = v15;
  webrtc::LossBasedBweV2::SetMinMaxBitrate(*(_QWORD *)(v8 + 1904), v13, v15);
  if (v10)
  {
    if ((unint64_t)(*(_QWORD *)(v8 + 400) - 0x7FFFFFFFFFFFFFFFLL) <= 1)
    {
      if (v9 == 0x8000000000000000)
      {
        v16 = -INFINITY;
      }
      else
      {
        v16 = INFINITY;
        if (v9 != 0x7FFFFFFFFFFFFFFFLL)
          v16 = (double)v9;
      }
      *(double *)(v8 + 392) = v16;
    }
    webrtc::SendSideBandwidthEstimation::SetSendBitrate((_QWORD *)v8, v9, v12);
  }
  if (*((_BYTE *)this + 560))
  {
    v17 = *((_QWORD *)this + 44);
    v18 = *((_QWORD *)this + 69);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      webrtc::ToString(v18, (char *)&__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/delay_based_bwe.cc");
      if (v31 < 0)
        operator delete(__p);
    }
    *(_QWORD *)(v17 + 168) = v18;
    *(_QWORD *)(v17 + 176) = v18;
    *(_BYTE *)(v17 + 384) = 1;
  }
  v26 = *((_QWORD *)this + 44);
  v27 = *((_QWORD *)this + 67);
  *(_QWORD *)(v26 + 152) = v27;
  if (*(_QWORD *)(v26 + 168) > v27)
    v27 = *(_QWORD *)(v26 + 168);
  *(_QWORD *)(v26 + 168) = v27;
  if (*((_BYTE *)this + 560))
    v28 = *((_QWORD *)this + 69);
  else
    v28 = 0;
  v29.var0 = *(_QWORD *)a3;
  webrtc::ProbeController::SetBitrates(*((webrtc::ProbeController **)this + 37), v29, *((_QWORD *)this + 67), v28, *((_QWORD *)this + 68), a1);
}

void webrtc::GoogCcNetworkController::MaybeTriggerOnNetworkChanged(int64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  BOOL v38;
  float v39;
  int v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  int v53;
  int v54;
  Timestamp v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD v66[2];
  char *v67;
  char *v68;

  v6 = *(_QWORD *)(a1 + 312);
  v7 = *(_QWORD *)(v6 + 488);
  if (!*(_BYTE *)(v6 + 1977) && *(_QWORD *)(v6 + 568) < v7)
    v7 = *(_QWORD *)(v6 + 568);
  v8 = *(unsigned __int8 *)(v6 + 552);
  v9 = *(_QWORD *)(v6 + 560);
  v10 = *(_QWORD *)(v6 + 504);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_QWORD *)(v6 + 504);
  v12 = *(_DWORD *)(v6 + 1912);
  v13 = *(_QWORD *)(a1 + 304);
  v14 = 0.0;
  if (!v13)
  {
    v10 = v11;
    goto LABEL_36;
  }
  if (!*(_BYTE *)(v13 + 16) || (v15 = *(_QWORD *)(v13 + 8)) == 0)
  {
    v10 = (int)v10;
    if ((int)v10 <= (uint64_t)v11)
      v10 = v11;
    if (*(_BYTE *)(a1 + 232))
      goto LABEL_35;
    goto LABEL_36;
  }
  v16 = *(_QWORD *)(v13 + 24);
  if (*(_BYTE *)v13)
    v16 += *(_QWORD *)(v13 + 32);
  v17 = (double)v16 / (double)v15;
  if (v17 <= 1.5)
  {
    if (v17 <= 1.0)
    {
      if (v17 < 0.1)
      {
        *(_QWORD *)(v13 + 40) = 0x3FF0000000000000;
        v18 = 1.0;
        goto LABEL_26;
      }
      v18 = *(double *)(v13 + 40) * 1.05;
      if (v18 > 1.0)
        v18 = 1.0;
    }
    else
    {
      v18 = *(double *)(v13 + 40) * 0.95;
    }
  }
  else
  {
    v18 = *(double *)(v13 + 40) * 0.9;
  }
  *(double *)(v13 + 40) = v18;
LABEL_26:
  v19 = *(_DWORD *)(v13 + 4);
  if (v19 >= v11)
    v20 = v11;
  else
    v20 = v19;
  if (v19 <= (v18 * (double)v11))
    v21 = (v18 * (double)v11);
  else
    v21 = v20;
  v10 = (int)v10;
  if ((int)v10 <= (uint64_t)v21)
    v10 = v21;
  if (*(_BYTE *)(a1 + 232))
LABEL_35:
    v14 = (double)(v11 - v10) / (double)v11;
LABEL_36:
  v22 = *(double *)(v6 + 392);
  v23 = (uint64_t)v22;
  if (v22 == -INFINITY)
    v23 = 0x8000000000000000;
  if (v22 == INFINITY)
    v23 = 0x7FFFFFFFFFFFFFFFLL;
  if (v10 < v23)
    v23 = v10;
  if (v11 != *(_QWORD *)(a1 + 784)
    || v12 != *(_DWORD *)(a1 + 808)
    || !*(_BYTE *)(a1 + 813)
    || v8 != *(unsigned __int8 *)(a1 + 812)
    || v9 != *(_QWORD *)(a1 + 816)
    || v10 != *(_QWORD *)(a1 + 792)
    || v23 != *(_QWORD *)(a1 + 800))
  {
    *(_QWORD *)(a1 + 784) = v11;
    *(_QWORD *)(a1 + 792) = v10;
    *(_WORD *)(a1 + 812) = v8 | 0x100;
    *(_QWORD *)(a1 + 816) = v9;
    *(_QWORD *)(a1 + 800) = v23;
    *(_DWORD *)(a1 + 808) = v12;
    v24 = *(_QWORD *)(a1 + 320);
    v25 = *(double *)v24 * (double)(int)v11 / 1000.0;
    *(_DWORD *)(v24 + 40) = (int)v25;
    v26 = 500 * (int)v25 / 8;
    if (*(_QWORD *)(v24 + 56) <= 500 * (int)v25 / -8)
      v27 = 500 * (int)v25 / -8;
    else
      v27 = *(_QWORD *)(v24 + 56);
    if (v26 < v27)
      v27 = 500 * (int)v25 / 8;
    *(_QWORD *)(v24 + 48) = v26;
    *(_QWORD *)(v24 + 56) = v27;
    v28 = *(_QWORD *)(a1 + 352);
    v29 = (double)((33333 * *(_QWORD *)(v28 + 168) + 4000000) / 8000000);
    v30 = llround(v29 / ceil(v29 / 1200.0));
    v31 = *(_QWORD *)(v28 + 408);
    v32 = 2 * v31 + 200000;
    if (v31 == 0x8000000000000000)
      v32 = 0;
    v33 = -2;
    if (v31 != 0x7FFFFFFFFFFFFFFFLL)
      v33 = v32;
    v34 = (uint64_t)(8000000 * v30) / v33;
    if (v34 == 0x8000000000000000)
    {
      v35 = -INFINITY;
      if (*(_BYTE *)(v28 + 560))
        goto LABEL_61;
    }
    else if (v34 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v35 = INFINITY;
      if (*(_BYTE *)(v28 + 560))
      {
LABEL_61:
        v36 = (double)*(uint64_t *)(v28 + 552) / fmax(v35, 4000.0) * 1000000.0;
        if (v36 == INFINITY)
        {
          v37 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if (v36 == -INFINITY)
        {
          v37 = 0x8000000000000000;
        }
        else
        {
          v37 = (uint64_t)v36;
        }
        if (v37 >= 50000000)
          v37 = 50000000;
        if (v37 <= 2000000)
          v37 = 2000000;
LABEL_74:
        v38 = *(_BYTE *)(a1 + 232) == 0;
        if (!*(_BYTE *)(a1 + 232))
          v14 = 0.0;
        v39 = (float)v8;
        v40 = *(unsigned __int8 *)(a2 + 152);
        *(_QWORD *)(a2 + 80) = a3;
        *(_QWORD *)(a2 + 88) = a3;
        v41 = 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)(a2 + 96) = 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)(a2 + 104) = v9;
        *(_QWORD *)(a2 + 112) = v37;
        *(float *)(a2 + 120) = v39 / 255.0;
        if (v38)
          v42 = v10;
        else
          v42 = v11;
        *(_QWORD *)(a2 + 128) = v42;
        *(_QWORD *)(a2 + 136) = v23;
        *(double *)(a2 + 144) = v14;
        if (!v40)
          *(_BYTE *)(a2 + 152) = 1;
        v43 = *(_QWORD *)(a1 + 296);
        v44 = *(_QWORD *)(a1 + 312);
        v45 = *(_DWORD *)(v44 + 1912);
        v46 = *(_QWORD *)(v44 + 384);
        if (v46 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v47 = *(_QWORD *)(v44 + 368);
          if (v47 != 0x8000000000000000)
          {
            v48 = v46 - v47 < 0 || v47 == 0x7FFFFFFFFFFFFFFFLL;
            v49 = v48 || v46 == 0x8000000000000000;
            v50 = v49 ? 0 : v46 - v47;
            if (v50 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v51 = *(_QWORD *)(v44 + 376);
              if (v51 != 0x7FFFFFFFFFFFFFFFLL)
              {
                v41 = v51 + v50;
                if (v51 == 0x8000000000000000)
                  v41 = 0x8000000000000000;
              }
            }
          }
        }
        v52 = *(_QWORD *)(v44 + 360);
        if (v45 == 3)
          v53 = 2;
        else
          v53 = v45 != 0;
        if (v41 > v52)
          v53 = 4;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 352) + 576) - 1) >= 2)
          v54 = v53;
        else
          v54 = 3;
        webrtc::ProbeController::SetEstimatedBitrate(v43, v11, v54, a3, (uint64_t)&v67);
        std::vector<webrtc::ProbeClusterConfig>::__insert_with_size[abi:sn180100]<std::__wrap_iter<webrtc::ProbeClusterConfig*>,std::__wrap_iter<webrtc::ProbeClusterConfig*>>(a2 + 56, *(_QWORD *)(a2 + 64), v67, v68, (v68 - v67) >> 5);
        v55.var0 = a1;
        webrtc::GoogCcNetworkController::GetPacingRates(v66, v55, a3);
        v56 = *(unsigned __int8 *)(a2 + 48);
        v57 = v66[1];
        *(_OWORD *)(a2 + 16) = v66[0];
        *(_OWORD *)(a2 + 32) = v57;
        if (v56)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
            goto LABEL_106;
        }
        else
        {
          *(_BYTE *)(a2 + 48) = 1;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
          {
LABEL_106:
            v65 = v67;
            if (!v67)
              return;
            goto LABEL_107;
          }
        }
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/goog_cc_network_control.cc");
        v65 = v67;
        if (!v67)
          return;
LABEL_107:
        v68 = v65;
        operator delete(v65);
        return;
      }
    }
    else
    {
      v35 = (double)v34;
      if (*(_BYTE *)(v28 + 560))
        goto LABEL_61;
    }
    v37 = 3000000;
    goto LABEL_74;
  }
}

void webrtc::GoogCcNetworkController::OnProcessInterval(webrtc::GoogCcNetworkController *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  Timestamp v11;
  uint64_t v12;
  Timestamp v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Timestamp v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char **v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _OWORD v36[3];
  char v37;
  void *__p;
  __int128 v39;

  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 56) = 0;
  v8 = a3 + 56;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  if (*((_BYTE *)this + 520))
  {
    v9 = *((_OWORD *)this + 24);
    v36[0] = *((_OWORD *)this + 23);
    v36[1] = v9;
    v36[2] = *((_OWORD *)this + 25);
    v37 = *((_BYTE *)this + 416);
    webrtc::GoogCcNetworkController::ResetConstraints((uint64_t)&__p, this, (uint64_t)v36);
    v10 = *(_QWORD *)a2;
    *(_QWORD *)(a3 + 56) = __p;
    v35 = v39;
    *(_OWORD *)(a3 + 64) = v39;
    v11.var0 = (int64_t)this;
    webrtc::GoogCcNetworkController::GetPacingRates(v7, v11, v10);
    *(_BYTE *)(a3 + 48) = 1;
    if (!*((_BYTE *)this + 520))
    {
      __break(1u);
      return;
    }
    if (*((_BYTE *)this + 433))
      *(_BYTE *)(*((_QWORD *)this + 37) + 248) = *((_BYTE *)this + 432);
    if (*((_BYTE *)this + 435))
      *(_BYTE *)(*((_QWORD *)this + 37) + 2) = *((_BYTE *)this + 434);
    if (!*((_BYTE *)this + 496))
      goto LABEL_11;
    webrtc::ProbeController::OnMaxTotalAllocatedBitrate(*((_QWORD *)this + 37), *((_QWORD *)this + 61), *(_QWORD *)a2, (uint64_t)&__p);
    std::vector<webrtc::ProbeClusterConfig>::__insert_with_size[abi:sn180100]<std::__wrap_iter<webrtc::ProbeClusterConfig*>,std::__wrap_iter<webrtc::ProbeClusterConfig*>>(v8, v35, (char *)__p, (char *)v39, (uint64_t)(v39 - (_QWORD)__p) >> 5);
    if (__p)
    {
      *(_QWORD *)&v39 = __p;
      operator delete(__p);
    }
    if (*((_BYTE *)this + 520))
LABEL_11:
      *((_BYTE *)this + 520) = 0;
  }
  v12 = *((_QWORD *)this + 38);
  if (v12 && *(_BYTE *)(a2 + 16))
    *(_QWORD *)(v12 + 32) = *(_QWORD *)(a2 + 8);
  v13.var0 = *(_QWORD *)a2;
  webrtc::SendSideBandwidthEstimation::UpdateEstimate(*((webrtc::SendSideBandwidthEstimation **)this + 39), v13, a4);
  v14 = *((_QWORD *)this + 40);
  v15 = *((_QWORD *)this + 37);
  if (*(_BYTE *)(v14 + 80))
  {
    v16 = 1000 * *(_QWORD *)(v14 + 72);
    if (!*(_BYTE *)(v15 + 224))
      *(_BYTE *)(v15 + 224) = 1;
    *(_QWORD *)(v15 + 216) = v16;
    v15 = *((_QWORD *)this + 37);
  }
  else if (*(_BYTE *)(v15 + 224))
  {
    *(_BYTE *)(v15 + 224) = 0;
  }
  v17.var0 = *(_QWORD *)a2;
  webrtc::ProbeController::Process((webrtc::ProbeController *)v15, v17, (uint64_t)&__p);
  std::vector<webrtc::ProbeClusterConfig>::__insert_with_size[abi:sn180100]<std::__wrap_iter<webrtc::ProbeClusterConfig*>,std::__wrap_iter<webrtc::ProbeClusterConfig*>>(v8, *(_QWORD *)(a3 + 64), (char *)__p, (char *)v39, (uint64_t)(v39 - (_QWORD)__p) >> 5);
  if (*((_BYTE *)this + 204))
  {
    v18 = *((_QWORD *)this + 97);
    if (v18)
    {
      v19 = *((_QWORD *)this + 93);
      v20 = *((_QWORD *)this + 96);
      v21 = (char **)(v19 + 8 * (v20 >> 9));
      v22 = *v21;
      v23 = &(*v21)[8 * (v20 & 0x1FF)];
      v24 = *(_QWORD *)(v19 + (((v20 + v18) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v20 + v18) & 0x1FF);
      if ((char *)v24 != v23)
      {
        v25 = v23 + 8;
        if (v23 + 8 - v22 != 4096)
          goto LABEL_26;
LABEL_25:
        v26 = v21[1];
        ++v21;
        v22 = v26;
        v25 = v26;
LABEL_26:
        while (v25 != (char *)v24)
        {
          if (*(_QWORD *)v25 < *(_QWORD *)v23)
            v23 = v25;
          v25 += 8;
          if (v25 - v22 == 4096)
            goto LABEL_25;
        }
      }
      v27 = (unsigned __int128)((1000 * *((_QWORD *)this + 98) * (*(_QWORD *)v23 + *((int *)this + 50)) + 4000000)
                              * (__int128)0x431BDE82D7B634DBLL) >> 64;
      v28 = (v27 >> 21) + ((unint64_t)v27 >> 63);
      if (*((_BYTE *)this + 864))
      {
        v29 = *((_QWORD *)this + 107);
        v30 = __OFADD__(v29, v28);
        v31 = v29 + v28;
        if (v31 < 0 != v30)
          ++v31;
        v28 = v31 >> 1;
        if (v28 <= 3000)
          v28 = 3000;
        if (v29 == 0x8000000000000000)
          v28 = 3000;
        if (v29 == 0x7FFFFFFFFFFFFFFFLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else
      {
        if (v28 <= 3000)
          v28 = 3000;
        *((_BYTE *)this + 864) = 1;
      }
      *((_QWORD *)this + 107) = v28;
    }
  }
  v32 = *((_QWORD *)this + 38);
  if (!v32 || !*((_BYTE *)this + 864))
  {
    *(_QWORD *)a3 = *((_QWORD *)this + 107);
    *(_BYTE *)(a3 + 8) = *((_BYTE *)this + 864);
    webrtc::GoogCcNetworkController::MaybeTriggerOnNetworkChanged((int64_t)this, a3, *(_QWORD *)a2);
    v34 = __p;
    if (!__p)
      return;
    goto LABEL_52;
  }
  v33 = *((_QWORD *)this + 107);
  if (!*(_BYTE *)(v32 + 16))
    *(_BYTE *)(v32 + 16) = 1;
  *(_QWORD *)(v32 + 8) = v33;
  webrtc::GoogCcNetworkController::MaybeTriggerOnNetworkChanged((int64_t)this, a3, *(_QWORD *)a2);
  v34 = __p;
  if (__p)
  {
LABEL_52:
    *(_QWORD *)&v39 = v34;
    operator delete(v34);
  }
}

_QWORD *webrtc::GoogCcNetworkController::GetPacingRates(_QWORD *this, Timestamp a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(a2.var0 + 288)
    || !*(_BYTE *)(a2.var0 + 712)
    || (v3 = *(_QWORD *)(*(_QWORD *)(a2.var0 + 312) + 1904), *(_BYTE *)(v3 + 296))
    && (unint64_t)(*(_QWORD *)(v3 + 312) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL
    && *(_DWORD *)(v3 + 320) >= *(_DWORD *)(v3 + 252)
    && *(_BYTE *)(v3 + 289)
    && *(_DWORD *)(v3 + 520) != 3)
  {
    v4 = *(_QWORD *)(a2.var0 + 832);
    v6 = *(_QWORD *)(a2.var0 + 784);
    if (v4 <= v6)
      v8 = *(_QWORD *)(a2.var0 + 784);
    else
      v8 = *(_QWORD *)(a2.var0 + 832);
    v7 = llround(*(double *)(a2.var0 + 824) * (double)v8);
    if (!*(_BYTE *)(a2.var0 + 289))
      goto LABEL_27;
    goto LABEL_18;
  }
  v4 = *(_QWORD *)(a2.var0 + 832);
  v5 = *(_QWORD *)(a2.var0 + 616);
  v6 = *(_QWORD *)(a2.var0 + 784);
  if (v4 > v5)
    v5 = *(_QWORD *)(a2.var0 + 832);
  if (v5 <= v6)
    v5 = *(_QWORD *)(a2.var0 + 784);
  v7 = llround(*(double *)(a2.var0 + 824) * (double)v5);
  if (*(_BYTE *)(a2.var0 + 289))
  {
LABEL_18:
    if (*(_BYTE *)(a2.var0 + 712))
    {
      v9 = *(_QWORD *)(a2.var0 + 624);
      if (v9 > v4)
        v4 = *(_QWORD *)(a2.var0 + 624);
      if (v4 <= v6)
        v4 = v6;
      if (v7 <= v9)
        v4 = v7;
      if ((unint64_t)(v9 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
        v7 = v4;
    }
  }
LABEL_27:
  v10 = (uint64_t *)(a2.var0 + 840);
  if (*(_DWORD *)(a2.var0 + 808) == 1 && *(_QWORD *)(a2.var0 + 840) < v6)
    v10 = (uint64_t *)(a2.var0 + 784);
  v11 = *v10;
  if (*(_QWORD *)(a2.var0 + 792) < *v10)
    v11 = *(_QWORD *)(a2.var0 + 792);
  v12 = (unsigned __int128)((1000000 * v7 + 4000000) * (__int128)0x431BDE82D7B634DBLL) >> 64;
  *this = a3;
  this[1] = (v12 >> 21) + ((unint64_t)v12 >> 63);
  v13 = (unsigned __int128)((1000000 * v11 + 4000000) * (__int128)0x431BDE82D7B634DBLL) >> 64;
  this[2] = 1000000;
  this[3] = (v13 >> 21) + ((unint64_t)v13 >> 63);
  return this;
}

void webrtc::GoogCcNetworkController::OnRemoteBitrateReport(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 56))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/goog_cc_network_control.cc");
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 312);
    v13 = 0x7FFFFFFFFFFFFFFFLL;
    if (a3)
      v13 = a3;
    *(_QWORD *)(v12 + 568) = v13;
    webrtc::SendSideBandwidthEstimation::UpdateTargetBitrate(v12, *(_QWORD *)(v12 + 488), a2);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 152) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_BYTE *)(a4 + 80) = 0;
}

unint64_t webrtc::GoogCcNetworkController::OnRoundTripTimeUpdate@<X0>(unint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  int v14;

  if (!*(_BYTE *)(result + 56) && !*((_BYTE *)a2 + 16))
  {
    v4 = *(_QWORD *)(result + 352);
    if (v4)
      *(_QWORD *)(v4 + 408) = a2[1];
    v5 = *(_QWORD *)(result + 312);
    v7 = *a2;
    v6 = a2[1];
    if (v6 >= 1)
      *(_QWORD *)(v5 + 560) = v6;
    v8 = *(_QWORD *)(v5 + 592);
    if ((unint64_t)(v8 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    {
      v9 = v7 - v8;
      v10 = v7 == 0x8000000000000000 || v9 < 2000000;
      v11 = v10;
      if ((v7 == 0x7FFFFFFFFFFFFFFFLL || !v11) && !*(_DWORD *)(v5 + 620))
      {
        *(_DWORD *)(v5 + 620) = 2;
        result = atomic_load(&webrtc::SendSideBandwidthEstimation::UpdateRtt(webrtc::TimeDelta,webrtc::Timestamp)::atomic_histogram_pointer);
        if (result)
        {
          v12 = v6 / 0x3E8uLL;
          if (v6 % 0x3E8uLL > 0x1F3)
            LODWORD(v12) = v12 + 1;
          if (-v6 % 0x3E8uLL <= 0x1F4)
            v13 = 0;
          else
            v13 = -1;
          if (v6 < 0)
            v14 = v13 - -v6 / 0x3E8uLL;
          else
            v14 = v12;
          result = webrtc::metrics::HistogramAdd(result, v14);
        }
        else
        {
          while (!__ldaxr(&webrtc::SendSideBandwidthEstimation::UpdateRtt(webrtc::TimeDelta,webrtc::Timestamp)::atomic_histogram_pointer))
          {
            if (!__stlxr(0, &webrtc::SendSideBandwidthEstimation::UpdateRtt(webrtc::TimeDelta,webrtc::Timestamp)::atomic_histogram_pointer))goto LABEL_30;
          }
          __clrex();
        }
      }
    }
  }
LABEL_30:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

void webrtc::GoogCcNetworkController::OnSentPacket(int64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 + 320);
  v7 = a2[1];
  v8 = *a2;
  v9 = *a2 / 0x3E8uLL;
  if (*a2 % 0x3E8uLL > 0x1F3)
    ++v9;
  if (-v8 % 0x3E8uLL <= 0x1F4)
    v10 = 0;
  else
    v10 = -1;
  if (v8 < 0)
    v11 = v10 - -v8 / 0x3E8uLL;
  else
    v11 = v9;
  webrtc::AlrDetector::OnBytesSent(v6, v7, v11);
  (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(a1 + 360) + 40))(*(_QWORD *)(a1 + 360), *(_BYTE *)(*(_QWORD *)(a1 + 320) + 80) != 0);
  if (*(_BYTE *)(a1 + 568))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 312) + 384) = *a2;
    v12 = *(_QWORD *)(a1 + 304);
    if (v12)
    {
LABEL_11:
      *(_QWORD *)(v12 + 24) = a2[8];
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 152) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_BYTE *)(a3 + 80) = 0;
      webrtc::GoogCcNetworkController::MaybeTriggerOnNetworkChanged(a1, a3, *a2);
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 568) = 1;
    v13 = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(v13 + 368) = *a2;
    *(_QWORD *)(v13 + 376) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 312) + 384) = *a2;
    v12 = *(_QWORD *)(a1 + 304);
    if (v12)
      goto LABEL_11;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 80) = 0;
}

void webrtc::GoogCcNetworkController::OnReceivedPacket(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
}

void webrtc::GoogCcNetworkController::OnStreamsConfig(webrtc::GoogCcNetworkController *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Timestamp v19;
  __int128 v20;
  uint64_t v21;

  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  v6 = (_QWORD *)(a3 + 16);
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  if (*(_BYTE *)(a2 + 9))
    *(_BYTE *)(*((_QWORD *)this + 37) + 248) = *(_BYTE *)(a2 + 8);
  if (*(_BYTE *)(a2 + 72))
  {
    webrtc::ProbeController::OnMaxTotalAllocatedBitrate(*((_QWORD *)this + 37), *(_QWORD *)(a2 + 64), *(_QWORD *)a2, (uint64_t)&v20);
    v7 = v21;
    *(_OWORD *)(a3 + 56) = v20;
    *(_QWORD *)(a3 + 72) = v7;
  }
  v8 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_BYTE *)(a2 + 24))
  {
LABEL_8:
    if (!*(_BYTE *)(a2 + 40))
      goto LABEL_24;
    goto LABEL_9;
  }
  v9 = *(double *)(a2 + 16);
  if (v9 != *((double *)this + 103))
  {
    *((double *)this + 103) = v9;
    v8 = 1;
    goto LABEL_8;
  }
  v8 = 0;
  if (!*(_BYTE *)(a2 + 40))
    goto LABEL_24;
LABEL_9:
  v10 = *(_QWORD *)(a2 + 32);
  if (v10 != *((_QWORD *)this + 104))
  {
    *((_QWORD *)this + 104) = v10;
    if (*((_BYTE *)this + 192))
    {
      webrtc::GoogCcNetworkController::ClampConstraints(this);
      v11 = *((_QWORD *)this + 44);
      v12 = *((_QWORD *)this + 67);
      *(_QWORD *)(v11 + 152) = v12;
      if (*(_QWORD *)(v11 + 168) > v12)
        v12 = *(_QWORD *)(v11 + 168);
      *(_QWORD *)(v11 + 168) = v12;
      v13 = (_QWORD *)*((_QWORD *)this + 39);
      v14 = *((_QWORD *)this + 68);
      if (*((uint64_t *)this + 67) <= 5000)
        v15 = 5000;
      else
        v15 = *((_QWORD *)this + 67);
      v16 = v14 - 1;
      if (v15 > v14)
        v14 = v15;
      if (v16 >= 0x7FFFFFFFFFFFFFFELL)
        v17 = 1000000000;
      else
        v17 = v14;
      v13[63] = v15;
      v13[64] = v17;
      webrtc::LossBasedBweV2::SetMinMaxBitrate(v13[238], v15, v17);
    }
    v8 = 1;
  }
LABEL_24:
  if (*(_BYTE *)(a2 + 56))
  {
    v18 = *(_QWORD *)(a2 + 48);
    if (v18 != *((_QWORD *)this + 105))
    {
      *((_QWORD *)this + 105) = v18;
      goto LABEL_29;
    }
  }
  if (v8)
  {
LABEL_29:
    v19.var0 = (int64_t)this;
    webrtc::GoogCcNetworkController::GetPacingRates(v6, v19, *(_QWORD *)a2);
    *(_BYTE *)(a3 + 48) = 1;
  }
}

void webrtc::GoogCcNetworkController::ClampConstraints(webrtc::GoogCcNetworkController *this)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *((_QWORD *)this + 66);
  if (v2 <= 5000)
    v2 = 5000;
  *((_QWORD *)this + 67) = v2;
  if (*((_BYTE *)this + 192))
  {
    v3 = v2 < *((_QWORD *)this + 104);
    v4 = 536;
    if (v3)
      v4 = 832;
    v2 = *(_QWORD *)((char *)this + v4);
    *((_QWORD *)this + 67) = v2;
  }
  if (*((_QWORD *)this + 68) < v2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/goog_cc_network_control.cc");
    v2 = *((_QWORD *)this + 67);
    *((_QWORD *)this + 68) = v2;
  }
  if (*((_BYTE *)this + 560) && *((_QWORD *)this + 69) < v2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/goog_cc_network_control.cc");
    v19 = *((_QWORD *)this + 67);
    if (!*((_BYTE *)this + 560))
      *((_BYTE *)this + 560) = 1;
    *((_QWORD *)this + 69) = v19;
  }
}

void webrtc::GoogCcNetworkController::OnTargetRateConstraints(webrtc::GoogCcNetworkController *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  uint64_t v7;
  _OWORD v8[3];
  char v9;
  __int128 v10;
  uint64_t v11;

  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  v8[2] = *(_OWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 48);
  webrtc::GoogCcNetworkController::ResetConstraints((uint64_t)&v10, this, (uint64_t)v8);
  v7 = *(_QWORD *)a2;
  *(_OWORD *)(a3 + 56) = v10;
  *(_QWORD *)(a3 + 72) = v11;
  webrtc::GoogCcNetworkController::MaybeTriggerOnNetworkChanged((int64_t)this, a3, v7);
}

unint64_t webrtc::GoogCcNetworkController::OnTransportLossReport@<X0>(unint64_t result@<X0>, int64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  Timestamp v11;
  Timestamp v12;

  if (!*(_BYTE *)(result + 56))
  {
    v5 = a2[3];
    v6 = v5 + a2[4];
    v7 = *(_QWORD *)(result + 312);
    v8 = *a2;
    *(_QWORD *)(v7 + 536) = *a2;
    if ((unint64_t)(*(_QWORD *)(v7 + 592) - 0x7FFFFFFFFFFFFFFFLL) <= 1)
      *(_QWORD *)(v7 + 592) = v8;
    if (v6 >= 1)
    {
      v9 = v6 + *(int *)(v7 + 468);
      if (v9 < 20)
      {
        *(_DWORD *)(v7 + 468) = v9;
        *(_DWORD *)(v7 + 464) += v5;
        goto LABEL_11;
      }
      *(_BYTE *)(v7 + 528) = 0;
      v10 = (((v5 + *(int *)(v7 + 464)) & ~((v5 + *(int *)(v7 + 464)) >> 63)) << 8) / v9;
      if ((int)v10 >= 255)
        LOBYTE(v10) = -1;
      *(_BYTE *)(v7 + 552) = v10;
      *(_QWORD *)(v7 + 464) = 0;
      *(_QWORD *)(v7 + 544) = v8;
      v11.var0 = v8;
      webrtc::SendSideBandwidthEstimation::UpdateEstimate((webrtc::SendSideBandwidthEstimation *)v7, v11, a4);
    }
    v12.var0 = v8;
    result = webrtc::SendSideBandwidthEstimation::UpdateUmaStatsPacketsLost(v7, v12, v5);
  }
LABEL_11:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

void webrtc::GoogCcNetworkController::OnTransportPacketsFeedback(int64_t a1@<X0>, webrtc::TransportPacketsFeedback *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  double v8;
  char *v9;
  char *v10;
  unint64_t v11;
  int64_t v12;
  char *v13;
  char v14;
  unint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v35;
  unint64_t v36;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void **v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char **v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  unint64_t v72;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  BOOL v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  int64_t v88;
  uint64_t *v89;
  int64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  unint64_t v100;
  Timestamp v101;
  Timestamp v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  _DWORD *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  int64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  uint64_t v146;
  uint64_t v147;
  webrtc::LossBasedBweV2 *v148;
  uint64_t v149;
  int64_t *v150;
  Timestamp v151;
  double v152;
  uint64_t v153;
  Timestamp v154;
  char v155;
  uint64_t v156;
  unint64_t v157;
  char **v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  __int128 v172;
  uint64_t *v173;
  uint64_t v174;
  char v175;
  _OWORD v176[9];
  uint64_t v177;
  __int128 __p;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _OWORD v185[2];
  char *v186;
  char *v187;

  v4 = (uint64_t *)((char *)a2 + 16);
  if (*((_QWORD *)a2 + 2) == *((_QWORD *)a2 + 3))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 152) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_BYTE *)(a3 + 80) = 0;
    return;
  }
  v7 = *(_QWORD *)(a1 + 304);
  if (v7)
    *(_QWORD *)(v7 + 24) = *((_QWORD *)a2 + 1);
  webrtc::TransportPacketsFeedback::ReceivedWithSendInfo(a2, &v186);
  v9 = v186;
  v10 = v187;
  if (v186 == v187)
  {
    v14 = 0;
    v12 = 0x8000000000000000;
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_179;
    goto LABEL_85;
  }
  v11 = v187 - v186 - 80;
  if (v11 >= 0x50)
  {
    v15 = v11 / 0x50 + 1;
    v13 = &v186[80 * (v15 & 0x7FFFFFFFFFFFFFELL)];
    v16 = v186 + 152;
    v17 = 0x8000000000000000;
    v18 = v15 & 0x7FFFFFFFFFFFFFELL;
    v19 = 0x8000000000000000;
    do
    {
      v20 = *((_QWORD *)v16 - 10);
      v22 = *(_QWORD *)v16;
      v16 += 160;
      v21 = v22;
      if (v17 <= v20)
        v17 = v20;
      if (v19 <= v21)
        v19 = v21;
      v18 -= 2;
    }
    while (v18);
    if (v17 <= v19)
      v12 = v19;
    else
      v12 = v17;
    if (v15 == (v15 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_23;
  }
  else
  {
    v12 = 0x8000000000000000;
    v13 = v186;
  }
  do
  {
    if (v12 <= *((_QWORD *)v13 + 9))
      v12 = *((_QWORD *)v13 + 9);
    v13 += 80;
  }
  while (v13 != v187);
LABEL_23:
  v23 = *(_QWORD *)a2;
  v24 = 0x8000000000000000;
  v25 = 0x7FFFFFFFFFFFFFFFLL;
  v26 = v186;
  do
  {
    v27 = v23 - *(_QWORD *)v26;
    if (*(_QWORD *)v26 == 0x7FFFFFFFFFFFFFFFLL || v23 == 0x8000000000000000)
      v27 = 0x8000000000000000;
    if (*(_QWORD *)v26 == 0x8000000000000000 || v23 == 0x7FFFFFFFFFFFFFFFLL)
      v30 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v30 = v27;
    v31 = *((_QWORD *)v26 + 9);
    v32 = v12 - v31;
    if (v31 == 0x7FFFFFFFFFFFFFFFLL || v12 == 0x8000000000000000)
      v32 = 0x8000000000000000;
    if (v31 == 0x8000000000000000 || v12 == 0x7FFFFFFFFFFFFFFFLL)
      v35 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v35 = v32;
    v36 = v30 - v35;
    if (v35 == 0x7FFFFFFFFFFFFFFFLL || v30 == 0x8000000000000000)
      v36 = 0x8000000000000000;
    if (v30 == 0x7FFFFFFFFFFFFFFFLL || v35 == 0x8000000000000000)
      v39 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v39 = v36;
    if (v24 <= v30)
      v24 = v30;
    if (v39 < v25)
      v25 = v39;
    v26 += 80;
  }
  while (v26 != v187);
  if ((unint64_t)(v24 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
  {
    v40 = v24 / 0x3E8uLL;
    if (v24 % 0x3E8uLL > 0x1F3)
      ++v40;
    if (-v24 % 0x3E8uLL <= 0x1F4)
      v41 = 0;
    else
      v41 = -1;
    if (v24 < 0)
      v42 = v41 - -v24 / 0x3E8uLL;
    else
      v42 = v40;
    v43 = *(void ***)(a1 + 752);
    v44 = *(void ***)(a1 + 744);
    if (v43 == v44)
      v45 = 0;
    else
      v45 = (((char *)v43 - (char *)v44) << 6) - 1;
    v46 = *(_QWORD *)(a1 + 776);
    if (v45 == v46 + *(_QWORD *)(a1 + 768))
    {
      std::deque<long long>::__add_back_capacity(a1 + 736);
      v46 = *(_QWORD *)(a1 + 776);
      v44 = *(void ***)(a1 + 744);
      v43 = *(void ***)(a1 + 752);
    }
    if (v43 != v44)
    {
      v47 = *(_QWORD *)(a1 + 768);
      v48 = *(uint64_t *)((char *)v44 + (((v47 + v46) >> 6) & 0x3FFFFFFFFFFFFF8));
      if (v48)
      {
        *(_QWORD *)(v48 + 8 * (((_WORD)v47 + (_WORD)v46) & 0x1FF)) = v42;
        *(_QWORD *)(a1 + 776) = v46 + 1;
        if ((unint64_t)(v46 + 1) < 0x21)
          goto LABEL_82;
        if (*(void **)((char *)v44 + ((v47 >> 6) & 0x3FFFFFFFFFFFFF8)))
        {
          *(_QWORD *)(a1 + 776) = v46;
          *(_QWORD *)(a1 + 768) = v47 + 1;
          if (v47 + 1 >= 0x400)
          {
            operator delete(*v44);
            *(_QWORD *)(a1 + 744) += 8;
            *(_QWORD *)(a1 + 768) -= 512;
          }
LABEL_82:
          v49 = *(_QWORD *)(a1 + 312);
          *(_QWORD *)(v49 + 368) = *(_QWORD *)a2;
          *(_QWORD *)(v49 + 376) = v25;
          v14 = 1;
          if (!*(_BYTE *)(a1 + 56))
            goto LABEL_179;
          goto LABEL_85;
        }
      }
    }
LABEL_298:
    __break(1u);
LABEL_299:
    abort();
  }
  v14 = 0;
  if (!*(_BYTE *)(a1 + 56))
    goto LABEL_179;
LABEL_85:
  v50 = *(_QWORD *)(a1 + 776);
  if (!v50)
    goto LABEL_95;
  v51 = *(_QWORD *)(a1 + 744);
  if (*(_QWORD *)(a1 + 752) == v51)
  {
    v57 = 0;
    goto LABEL_93;
  }
  v52 = *(_QWORD *)(a1 + 768);
  v53 = (char **)(v51 + 8 * (v52 >> 9));
  v54 = *v53;
  v55 = &(*v53)[8 * (v52 & 0x1FF)];
  v56 = *(_QWORD *)(v51 + (((v52 + v50) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v52 + v50) & 0x1FF);
  if (v55 != (char *)v56)
  {
    v57 = 0;
    do
    {
      v59 = *(_QWORD *)v55;
      v55 += 8;
      v58 = v59;
      if (v55 - v54 == 4096)
      {
        v60 = v53[1];
        ++v53;
        v54 = v60;
        v55 = v60;
      }
      v57 += v58;
    }
    while (v55 != (char *)v56);
LABEL_93:
    v61 = *(_QWORD *)(a1 + 352);
    if (!v61)
      goto LABEL_95;
    goto LABEL_94;
  }
  v57 = 0;
  v61 = *(_QWORD *)(a1 + 352);
  if (v61)
LABEL_94:
    *(_QWORD *)(v61 + 408) = 1000 * (v57 / v50);
LABEL_95:
  if (v9 != v10)
  {
    v62 = *(_QWORD *)a2;
    v63 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      v65 = *((_QWORD *)v9 + 9);
      v66 = v12 - v65;
      if (v65 == 0x7FFFFFFFFFFFFFFFLL || v12 == 0x8000000000000000)
        v66 = 0x8000000000000000;
      if (v65 == 0x8000000000000000 || v12 == 0x7FFFFFFFFFFFFFFFLL)
        v69 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v69 = v66;
      if (v62 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v64 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v70 = *(_QWORD *)v9;
        v64 = 0x7FFFFFFFFFFFFFFFLL;
        if (*(_QWORD *)v9 != 0x8000000000000000)
        {
          v71 = v70 == 0x7FFFFFFFFFFFFFFFLL || v62 == 0x8000000000000000;
          v72 = v71 ? 0x8000000000000000 : v62 - v70;
          if (v72 != 0x7FFFFFFFFFFFFFFFLL && v69 != 0x8000000000000000)
          {
            v64 = v72 - v69;
            if (v69 == 0x7FFFFFFFFFFFFFFFLL || v72 == 0x8000000000000000)
              v64 = 0x8000000000000000;
          }
        }
      }
      if (v63 >= v64)
        v63 = v64;
      v9 += 80;
    }
    while (v9 != v10);
    if ((unint64_t)(v63 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
    {
      v75 = *(_QWORD *)(a1 + 312);
      if (v63 >= 1)
        *(_QWORD *)(v75 + 560) = v63;
      v76 = *(_QWORD *)(v75 + 592);
      if ((unint64_t)(v76 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
      {
        v77 = v62 - v76;
        v78 = v62 == 0x8000000000000000 || v77 < 2000000;
        v79 = v78;
        if ((v62 == 0x7FFFFFFFFFFFFFFFLL || !v79) && !*(_DWORD *)(v75 + 620))
        {
          *(_DWORD *)(v75 + 620) = 2;
          v80 = atomic_load(&webrtc::SendSideBandwidthEstimation::UpdateRtt(webrtc::TimeDelta,webrtc::Timestamp)::atomic_histogram_pointer);
          if (v80)
          {
            v81 = v63 / 0x3E8uLL;
            if (v63 % 0x3E8uLL > 0x1F3)
              LODWORD(v81) = v81 + 1;
            if (-v63 % 0x3E8uLL <= 0x1F4)
              v82 = 0;
            else
              v82 = -1;
            if (v63 < 0)
              v83 = v82 - -v63 / 0x3E8uLL;
            else
              LODWORD(v83) = v81;
            webrtc::metrics::HistogramAdd(v80, v83);
          }
          else
          {
            while (!__ldaxr(&webrtc::SendSideBandwidthEstimation::UpdateRtt(webrtc::TimeDelta,webrtc::Timestamp)::atomic_histogram_pointer))
            {
              if (!__stlxr(0, &webrtc::SendSideBandwidthEstimation::UpdateRtt(webrtc::TimeDelta,webrtc::Timestamp)::atomic_histogram_pointer))goto LABEL_156;
            }
            __clrex();
          }
        }
      }
    }
  }
LABEL_156:
  v85 = *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2);
  if (v85)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v85 >> 4) > 0x333333333333333)
      goto LABEL_299;
    *(_DWORD *)(a1 + 732) -= 858993459 * ((80 * ((v85 - 80) / 0x50uLL) + 80) >> 4);
    v87 = (_BYTE *)*((_QWORD *)a2 + 2);
    v86 = (_BYTE *)*((_QWORD *)a2 + 3);
    v88 = v86 - v87;
    if (v86 != v87)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v88 >> 4) > 0x333333333333333)
        goto LABEL_299;
      v89 = (uint64_t *)operator new(v88);
      v90 = 80 * ((v88 - 80) / 0x50uLL) + 80;
      memcpy(v89, v87, v90);
      if (v90)
      {
        v91 = 80 * (v90 / 80);
        v92 = v89 + 9;
        do
        {
          v93 = *v92;
          v92 += 10;
          if (v93 == 0x7FFFFFFFFFFFFFFFLL)
            ++*(_DWORD *)(a1 + 728);
          v91 -= 80;
        }
        while (v91);
      }
      operator delete(v89);
    }
  }
  v94 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 > *(_QWORD *)(a1 + 720))
  {
    if (v94 != 0x7FFFFFFFFFFFFFFFLL)
      v94 += 1000000;
    *(_QWORD *)(a1 + 720) = v94;
    v95 = *(_QWORD *)(a1 + 312);
    v96 = *(int *)(a1 + 728);
    v97 = *(int *)(a1 + 732);
    v98 = *(_QWORD *)a2;
    *(_QWORD *)(v95 + 536) = *(_QWORD *)a2;
    if ((unint64_t)(*(_QWORD *)(v95 + 592) - 0x7FFFFFFFFFFFFFFFLL) <= 1)
      *(_QWORD *)(v95 + 592) = v98;
    if ((int)v97 >= 1)
    {
      v99 = *(int *)(v95 + 468) + v97;
      if (v99 < 20)
      {
        *(_DWORD *)(v95 + 468) = v99;
        *(_DWORD *)(v95 + 464) += v96;
LABEL_178:
        *(_QWORD *)(a1 + 728) = 0;
        goto LABEL_179;
      }
      *(_BYTE *)(v95 + 528) = 0;
      v100 = (((*(int *)(v95 + 464) + v96) & (unint64_t)~((*(int *)(v95 + 464) + v96) >> 63)) << 8) / v99;
      if ((int)v100 >= 255)
        LOBYTE(v100) = -1;
      *(_BYTE *)(v95 + 552) = v100;
      *(_QWORD *)(v95 + 464) = 0;
      *(_QWORD *)(v95 + 544) = v98;
      v101.var0 = v98;
      webrtc::SendSideBandwidthEstimation::UpdateEstimate((webrtc::SendSideBandwidthEstimation *)v95, v101, v8);
    }
    v102.var0 = v98;
    webrtc::SendSideBandwidthEstimation::UpdateUmaStatsPacketsLost(v95, v102, v96);
    goto LABEL_178;
  }
LABEL_179:
  v175 = v14;
  v103 = *(_QWORD *)(a1 + 320);
  v173 = v4;
  v174 = *(_QWORD *)(v103 + 72);
  v104 = *(unsigned __int8 *)(v103 + 80);
  if (*(_BYTE *)(a1 + 848) && !*(_BYTE *)(v103 + 80))
  {
    v105 = *(_QWORD *)a2;
    v106 = *(_QWORD *)a2 / 0x3E8uLL;
    if (*(_QWORD *)a2 % 0x3E8uLL > 0x1F3)
      ++v106;
    if (-v105 % 0x3E8uLL <= 0x1F4)
      v107 = 0;
    else
      v107 = -1;
    if (v105 < 0)
      v108 = v107 - -v105 / 0x3E8uLL;
    else
      v108 = v106;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 48))(*(_QWORD *)(a1 + 360));
    v109 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(v109 + 232) = 1000 * v108;
    *(_BYTE *)(v109 + 240) = 1;
  }
  *(_BYTE *)(a1 + 848) = v104 != 0;
  v110 = *(_QWORD *)(a1 + 360);
  webrtc::TransportPacketsFeedback::SortedByReceiveTime(a2, (uint64_t *)&__p);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v110 + 16))(v110, &__p);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v111 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 24))(*(_QWORD *)(a1 + 360));
  v113 = v112;
  webrtc::SendSideBandwidthEstimation::SetAcknowledgedRate(*(_QWORD *)(a1 + 312), v111, v112, *(_QWORD *)a2);
  webrtc::TransportPacketsFeedback::SortedByReceiveTime(a2, (uint64_t *)&__p);
  v115 = (_DWORD *)*((_QWORD *)&__p + 1);
  v114 = (_DWORD *)__p;
  if ((_QWORD)__p == *((_QWORD *)&__p + 1))
  {
    if ((_QWORD)__p)
    {
LABEL_194:
      *((_QWORD *)&__p + 1) = v114;
      operator delete(v114);
    }
  }
  else
  {
    do
    {
      if (v114[8] != -1)
        webrtc::ProbeBitrateEstimator::HandleProbeAndEstimateBitrate(*(uint64_t ***)(a1 + 328), (uint64_t *)v114);
      v114 += 20;
    }
    while (v114 != v115);
    v114 = (_DWORD *)__p;
    if ((_QWORD)__p)
      goto LABEL_194;
  }
  v116 = *(_QWORD *)(a1 + 336);
  if (!v116)
    goto LABEL_213;
  (*(void (**)(uint64_t, webrtc::TransportPacketsFeedback *))(*(_QWORD *)v116 + 8))(v116, a2);
  v117 = *(_QWORD *)(a1 + 664);
  v118 = *(unsigned __int8 *)(a1 + 712);
  (***(void (****)(__int128 *__return_ptr))(a1 + 336))(&__p);
  v119 = v185[0];
  *(_OWORD *)(a1 + 672) = v184;
  *(_OWORD *)(a1 + 688) = v119;
  *(_OWORD *)(a1 + 697) = *(_OWORD *)((char *)v185 + 9);
  v120 = v181;
  *(_OWORD *)(a1 + 608) = v180;
  *(_OWORD *)(a1 + 624) = v120;
  v121 = v183;
  *(_OWORD *)(a1 + 640) = v182;
  *(_OWORD *)(a1 + 656) = v121;
  v122 = v179;
  *(_OWORD *)(a1 + 576) = __p;
  *(_OWORD *)(a1 + 592) = v122;
  if (!*(_BYTE *)(a1 + 712) || v118 && *(_QWORD *)(a1 + 664) == v117)
    goto LABEL_213;
  v123 = *(_QWORD *)(a1 + 48);
  v124 = operator new();
  v172 = *(_OWORD *)(a1 + 616);
  *(_QWORD *)v124 = &unk_24C0BBBD0;
  if (rtc::g_clock)
  {
    v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v125 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
  }
  *(_QWORD *)v124 = &unk_24C0B49C8;
  *(_QWORD *)(v124 + 8) = 1000 * (v125 / 1000000);
  *(_OWORD *)(v124 + 16) = v172;
  v177 = v124;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v123 + 40))(v123, &v177);
  v126 = v177;
  v177 = 0;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  if (!*(_BYTE *)(a1 + 712))
    goto LABEL_298;
  v127 = *(_QWORD *)(a1 + 296);
  v128 = *(unsigned __int8 *)(v127 + 184);
  memmove((void *)(v127 + 48), (const void *)(a1 + 576), 0x88uLL);
  if (!v128)
  {
    *(_BYTE *)(v127 + 184) = 1;
    v129 = *(_QWORD *)(a1 + 328);
    v130 = *(_QWORD *)(v129 + 32);
    v131 = *(_QWORD *)(v129 + 40);
    if ((_BYTE)v131)
      goto LABEL_214;
LABEL_224:
    v132 = 0;
    v133 = *(_QWORD *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 194))
      goto LABEL_231;
    goto LABEL_225;
  }
LABEL_213:
  v129 = *(_QWORD *)(a1 + 328);
  v130 = *(_QWORD *)(v129 + 32);
  v131 = *(_QWORD *)(v129 + 40);
  if (!(_BYTE)v131)
    goto LABEL_224;
LABEL_214:
  *(_BYTE *)(v129 + 40) = 0;
  if (!*(_BYTE *)(a1 + 193) || !*(_BYTE *)(a1 + 712) || v130 >= *(_QWORD *)(*(_QWORD *)(a1 + 352) + 568))
  {
    v132 = 1;
    v133 = *(_QWORD *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 194))
      goto LABEL_231;
    goto LABEL_225;
  }
  if (v130 < *(_QWORD *)(a1 + 616))
    LOBYTE(v131) = 0;
  v132 = v131;
  v133 = *(_QWORD *)(a1 + 352);
  if (*(_BYTE *)(a1 + 194))
  {
LABEL_225:
    if (v132 && (_BYTE)v113)
    {
      v134 = *(_QWORD *)(v133 + 568);
      v135 = llround((double)v111 * 0.85);
      if (v135 < v134)
        v134 = v135;
      if (v130 <= v134)
        v130 = v134;
    }
  }
LABEL_231:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  v136 = *(_OWORD *)(a1 + 688);
  v176[6] = *(_OWORD *)(a1 + 672);
  v176[7] = v136;
  v176[8] = *(_OWORD *)(a1 + 704);
  v137 = *(_OWORD *)(a1 + 624);
  v176[2] = *(_OWORD *)(a1 + 608);
  v176[3] = v137;
  v138 = *(_OWORD *)(a1 + 656);
  v176[4] = *(_OWORD *)(a1 + 640);
  v176[5] = v138;
  v139 = *(_OWORD *)(a1 + 592);
  v176[0] = *(_OWORD *)(a1 + 576);
  v176[1] = v139;
  webrtc::DelayBasedBwe::IncomingPacketFeedbackVector(a2, v133, v111, v113, v130, v131, v176, v104 != 0, (uint64_t)&__p);
  v140 = __p;
  v141 = v179;
  if ((_BYTE)__p)
  {
    v142 = *((_QWORD *)&__p + 1);
    if (BYTE1(__p))
      webrtc::SendSideBandwidthEstimation::SetSendBitrate(*(_QWORD **)(a1 + 312), *((uint64_t *)&__p + 1), *(_QWORD *)a2);
    v143 = *(_QWORD *)(a1 + 312);
    v144 = *(_QWORD *)a2;
    if (*(_QWORD *)(v143 + 408) > v142)
    {
      v145 = (double)v142;
      if (v142 == 0x8000000000000000)
        v145 = -INFINITY;
      if (v145 >= *(double *)(v143 + 392))
        v145 = *(double *)(v143 + 392);
      *(double *)(v143 + 392) = v145;
      *(_QWORD *)(v143 + 400) = v144;
    }
    *(_QWORD *)(v143 + 408) = v142;
    v146 = 0x7FFFFFFFFFFFFFFFLL;
    if (v142)
      v146 = v142;
    *(_QWORD *)(v143 + 576) = v146;
    webrtc::SendSideBandwidthEstimation::UpdateTargetBitrate(v143, *(_QWORD *)(v143 + 488), v144);
  }
  v147 = *(_QWORD *)(a1 + 312);
  if (*(_BYTE *)(v147 + 680) && !*(_BYTE *)(*(_QWORD *)(v147 + 1904) + 296))
    webrtc::LossBasedBandwidthEstimation::UpdateLossStatistics(v147 + 680, v173, *(_QWORD *)a2);
  v148 = *(webrtc::LossBasedBweV2 **)(v147 + 1904);
  if (*((_BYTE *)v148 + 296))
  {
    v149 = *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2);
    if (v149)
      v150 = (int64_t *)*((_QWORD *)a2 + 2);
    else
      v150 = 0;
    webrtc::LossBasedBweV2::UpdateBandwidthEstimate(v148, v150, 0xCCCCCCCCCCCCCCCDLL * (v149 >> 4), *(_QWORD *)(v147 + 576), v104 != 0);
    v151.var0 = *(_QWORD *)a2;
    webrtc::SendSideBandwidthEstimation::UpdateEstimate((webrtc::SendSideBandwidthEstimation *)v147, v151, v152);
  }
  if (v140)
    webrtc::GoogCcNetworkController::MaybeTriggerOnNetworkChanged(a1, a3, *(_QWORD *)a2);
  if (v141)
  {
    v153 = *(_QWORD *)(a1 + 296);
    if (v104)
    {
      if (!*(_BYTE *)(v153 + 224))
        *(_BYTE *)(v153 + 224) = 1;
      *(_QWORD *)(v153 + 216) = 1000 * v174;
      v153 = *(_QWORD *)(a1 + 296);
    }
    else if (*(_BYTE *)(v153 + 224))
    {
      *(_BYTE *)(v153 + 224) = 0;
    }
    v154.var0 = *(_QWORD *)a2;
    webrtc::ProbeController::RequestProbe((webrtc::ProbeController *)v153, v154, (uint64_t)&__p);
    std::vector<webrtc::ProbeClusterConfig>::__insert_with_size[abi:sn180100]<std::__wrap_iter<webrtc::ProbeClusterConfig*>,std::__wrap_iter<webrtc::ProbeClusterConfig*>>(a3 + 56, *(_QWORD *)(a3 + 64), (char *)__p, *((char **)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 5);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  v155 = v175 ^ 1;
  if (!*(_BYTE *)(a1 + 204))
    v155 = 1;
  if ((v155 & 1) == 0)
  {
    v156 = *(_QWORD *)(a1 + 744);
    v157 = *(_QWORD *)(a1 + 768);
    v158 = (char **)(v156 + 8 * (v157 >> 9));
    v159 = *v158;
    v160 = &(*v158)[8 * (v157 & 0x1FF)];
    v161 = *(_QWORD *)(v156 + (((*(_QWORD *)(a1 + 776) + v157) >> 6) & 0x3FFFFFFFFFFFFF8))
         + 8 * ((*(_QWORD *)(a1 + 776) + v157) & 0x1FF);
    if ((char *)v161 != v160)
    {
      v162 = v160 + 8;
      if (v160 + 8 - v159 != 4096)
        goto LABEL_272;
LABEL_271:
      v163 = v158[1];
      ++v158;
      v159 = v163;
      v162 = v163;
LABEL_272:
      while (v162 != (char *)v161)
      {
        if (*(_QWORD *)v162 < *(_QWORD *)v160)
          v160 = v162;
        v162 += 8;
        if (v162 - v159 == 4096)
          goto LABEL_271;
      }
    }
    v164 = (unsigned __int128)((1000 * *(_QWORD *)(a1 + 784) * (*(_QWORD *)v160 + *(int *)(a1 + 200)) + 4000000)
                             * (__int128)0x431BDE82D7B634DBLL) >> 64;
    v165 = (v164 >> 21) + ((unint64_t)v164 >> 63);
    if (*(_BYTE *)(a1 + 864))
    {
      v166 = *(_QWORD *)(a1 + 856);
      v167 = __OFADD__(v166, v165);
      v168 = v166 + v165;
      if (v168 < 0 != v167)
        ++v168;
      v165 = v168 >> 1;
      if (v165 <= 3000)
        v165 = 3000;
      if (v166 == 0x8000000000000000)
        v165 = 3000;
      if (v166 == 0x7FFFFFFFFFFFFFFFLL)
        v165 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else
    {
      if (v165 <= 3000)
        v165 = 3000;
      *(_BYTE *)(a1 + 864) = 1;
    }
    *(_QWORD *)(a1 + 856) = v165;
  }
  v169 = *(_QWORD *)(a1 + 304);
  if (!v169 || !*(_BYTE *)(a1 + 864))
  {
    *(_QWORD *)a3 = *(_QWORD *)(a1 + 856);
    *(_BYTE *)(a3 + 8) = *(_BYTE *)(a1 + 864);
    v171 = v186;
    if (!v186)
      return;
    goto LABEL_294;
  }
  v170 = *(_QWORD *)(a1 + 856);
  if (!*(_BYTE *)(v169 + 16))
    *(_BYTE *)(v169 + 16) = 1;
  *(_QWORD *)(v169 + 8) = v170;
  v171 = v186;
  if (v186)
LABEL_294:
    operator delete(v171);
}

uint64_t webrtc::GoogCcNetworkController::OnNetworkStateEstimate@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *(unsigned __int8 *)(result + 712);
  *(_OWORD *)(result + 576) = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(result + 624) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(result + 640) = v4;
  *(_OWORD *)(result + 592) = v6;
  *(_OWORD *)(result + 608) = v5;
  v8 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v9 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(result + 704) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(result + 672) = v8;
  *(_OWORD *)(result + 688) = v7;
  *(_OWORD *)(result + 656) = v9;
  if (!v3)
    *(_BYTE *)(result + 712) = 1;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

void std::vector<webrtc::ProbeClusterConfig>::__insert_with_size[abi:sn180100]<std::__wrap_iter<webrtc::ProbeClusterConfig*>,std::__wrap_iter<webrtc::ProbeClusterConfig*>>(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  char *v8;
  __int128 *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  uint64_t v22;
  __int128 *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;

  if (a5 < 1)
    return;
  v6 = __src;
  v8 = *(char **)a1;
  v9 = *(__int128 **)(a1 + 8);
  v10 = a2 - *(_QWORD *)a1;
  v11 = (char *)(*(_QWORD *)a1 + (v10 & 0xFFFFFFFFFFFFFFE0));
  v12 = *(_QWORD *)(a1 + 16);
  if (a5 <= (v12 - (uint64_t)v9) >> 5)
  {
    v18 = ((char *)v9 - v11) >> 5;
    if (v18 >= a5)
    {
      v19 = &__src[32 * a5];
      v21 = *(char **)(a1 + 8);
      v22 = 32 * a5;
      v23 = &v9[-2 * a5];
      v24 = v21;
      if (v23 >= v9)
        goto LABEL_22;
    }
    else
    {
      v19 = &__src[32 * v18];
      v20 = a4 - v19;
      if (a4 != v19)
        memmove(*(void **)(a1 + 8), &__src[32 * v18], a4 - v19);
      v21 = (char *)v9 + v20;
      *(_QWORD *)(a1 + 8) = (char *)v9 + v20;
      if ((char *)v9 - v11 < 1)
        return;
      v22 = 32 * a5;
      v23 = (__int128 *)&v21[-32 * a5];
      v24 = (char *)v9 + v20;
      if (v23 >= v9)
      {
LABEL_22:
        v27 = &v11[v22];
        *(_QWORD *)(a1 + 8) = v24;
        if (v21 != v27)
          memmove(&v21[-32 * ((v21 - v27) >> 5)], v11, v21 - v27);
        if (v19 != v6)
          memmove(v11, v6, v19 - v6);
        return;
      }
    }
    v24 = v21;
    while (v24)
    {
      v25 = *v23;
      v26 = v23[1];
      v23 += 2;
      *(_OWORD *)v24 = v25;
      *((_OWORD *)v24 + 1) = v26;
      v24 += 32;
      if (v23 >= v9)
        goto LABEL_22;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    abort();
  }
  v13 = a5 + (((char *)v9 - v8) >> 5);
  if (v13 >> 59)
    goto LABEL_40;
  v14 = v12 - (_QWORD)v8;
  v15 = v14 >> 4;
  if (v14 >> 4 <= v13)
    v15 = v13;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
    v16 = 0x7FFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 >> 59)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v17 = (char *)operator new(32 * v16);
  }
  else
  {
    v17 = 0;
  }
  v28 = &v17[32 * (v10 >> 5)];
  v29 = &v17[32 * v16];
  v30 = 32 * a5;
  v31 = &v28[32 * a5];
  v32 = v28;
  do
  {
    if (!v32)
      goto LABEL_39;
    v33 = *(_OWORD *)v6;
    v34 = *((_OWORD *)v6 + 1);
    v6 += 32;
    *(_OWORD *)v32 = v33;
    *((_OWORD *)v32 + 1) = v34;
    v32 += 32;
    v30 -= 32;
  }
  while (v30);
  v35 = *(char **)a1;
  if (*(char **)a1 != v11)
  {
    v36 = v11;
    do
    {
      v37 = *((_OWORD *)v36 - 1);
      *((_OWORD *)v28 - 2) = *((_OWORD *)v36 - 2);
      *((_OWORD *)v28 - 1) = v37;
      v28 -= 32;
      v36 -= 32;
    }
    while (v36 != v35);
    v9 = *(__int128 **)(a1 + 8);
  }
  if (v9 != (__int128 *)v11)
    memmove(v31, v11, (char *)v9 - v11);
  v38 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = &v31[(char *)v9 - v11];
  *(_QWORD *)(a1 + 16) = v29;
  if (v38)
    operator delete(v38);
}

void webrtc::RtcEventRemoteEstimate::~RtcEventRemoteEstimate(webrtc::RtcEventRemoteEstimate *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventRemoteEstimate::GetType(webrtc::RtcEventRemoteEstimate *this)
{
  return 2;
}

uint64_t webrtc::RtcEventRemoteEstimate::IsConfigEvent(webrtc::RtcEventRemoteEstimate *this)
{
  return 0;
}

uint64_t webrtc::RtcEvent::GetGroupKey(webrtc::RtcEvent *this)
{
  return 0;
}

void **std::deque<long long>::~deque[abi:sn180100](void **result)
{
  void **v1;
  void **v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  _BYTE *v15;

  v1 = result;
  v2 = (void **)result[1];
  v3 = (void **)result[2];
  v4 = (char *)v3 - (char *)v2;
  if (v3 == v2)
  {
    v5 = result + 5;
  }
  else
  {
    v5 = result + 5;
    v6 = (unint64_t)result[4];
    v7 = &v2[v6 >> 9];
    v8 = (uint64_t)*v7;
    v9 = (uint64_t)*v7 + 8 * (v6 & 0x1FF);
    while ((void *)v9 != *(char **)((char *)v2 + ((((unint64_t)result[5] + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (((unint64_t)result[5] + v6) & 0x1FF))
    {
      if (!v9)
      {
        __break(1u);
        return result;
      }
      v9 += 8;
      if (v9 - v8 == 4096)
      {
        v10 = (uint64_t)v7[1];
        ++v7;
        v8 = v10;
        v9 = v10;
      }
    }
  }
  *v5 = 0;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)v1[2];
      v2 = (void **)((char *)v1[1] + 8);
      v1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v4 >> 3;
  if (v11 == 1)
  {
    v12 = 256;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_15;
    v12 = 512;
  }
  v1[4] = (void *)v12;
LABEL_15:
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = v1[1];
    v14 = v1[2];
    if (v14 != v15)
      v1[2] = &v14[(v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v1)
    operator delete(*v1);
  return v1;
}

void std::deque<long long>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  void *v92;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v27 = *(char **)a1;
    v28 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 > *(_QWORD *)a1)
    {
LABEL_23:
      v29 = v28 >> 3;
      if (v29 >= -1)
        v30 = v29 + 1;
      else
        v30 = v29 + 2;
      v31 = v30 >> 1;
      v32 = -v31;
      v33 = &v7[-8 * v31];
      v34 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v31], v7, v5 - v7);
        v7 = *(char **)(a1 + 8);
      }
      v5 = &v33[v34];
      *(_QWORD *)(a1 + 8) = &v7[8 * v32];
      *(_QWORD *)(a1 + 16) = &v33[v34];
LABEL_31:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v36 = (v5 - v27) >> 2;
    if (v5 == v27)
      v36 = 1;
    if (v36 >> 61)
      goto LABEL_86;
    v37 = v36 >> 2;
    v38 = 8 * v36;
    v39 = (char *)operator new(8 * v36);
    v40 = &v39[8 * v37];
    v42 = v5 - v7;
    v41 = v5 == v7;
    v5 = v40;
    if (!v41)
    {
      v5 = &v40[v42 & 0xFFFFFFFFFFFFFFF8];
      v43 = v42 - 8;
      if ((unint64_t)(v42 - 8) < 0x38)
      {
        v44 = &v39[8 * v37];
        do
        {
LABEL_76:
          v83 = *(_QWORD *)v7;
          v7 += 8;
          *(_QWORD *)v44 = v83;
          v44 += 8;
        }
        while (v44 != v5);
        goto LABEL_77;
      }
      v76 = &v39[8 * v37];
      v44 = v76;
      if ((unint64_t)(v76 - v7) < 0x20)
        goto LABEL_76;
      v77 = (v43 >> 3) + 1;
      v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
      v44 = &v40[v78];
      v7 += v78;
      v79 = (__int128 *)(v6 + 3);
      v80 = v76 + 16;
      v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v82 = *v79;
        *(v80 - 1) = *(v79 - 1);
        *v80 = v82;
        v79 += 2;
        v80 += 2;
        v81 -= 4;
      }
      while (v81);
      if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_76;
    }
LABEL_77:
    *(_QWORD *)a1 = v39;
    *(_QWORD *)(a1 + 8) = v40;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = &v39[v38];
    if (v27)
    {
      operator delete(v27);
      v5 = *(char **)(a1 + 16);
    }
LABEL_4:
    if (!v5)
      goto LABEL_5;
    goto LABEL_31;
  }
  while (1)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v10 - v11;
    v13 = (v10 - v11) >> 3;
    v14 = v9 - *(_QWORD *)a1;
    if (v13 >= (unint64_t)(v14 >> 3))
      break;
    if (v9 != v10)
    {
      v92 = operator new(0x1000uLL);
      std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_back((char **)a1, &v92);
      return;
    }
    v92 = operator new(0x1000uLL);
    std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front((void **)a1, &v92);
    v35 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v35 + 1);
    v8 = *v35;
    *(_QWORD *)(a1 + 8) = v35 + 1;
    if (v5 == *(char **)(a1 + 24))
    {
      v67 = *(char **)a1;
      v28 = (uint64_t)&v7[-*(_QWORD *)a1];
      if ((unint64_t)v7 > *(_QWORD *)a1)
        goto LABEL_23;
      v68 = (v5 - v67) >> 2;
      if (v5 == v67)
        v68 = 1;
      if (v68 >> 61)
        goto LABEL_86;
      v69 = v68 >> 2;
      v70 = 8 * v68;
      v71 = (char *)operator new(8 * v68);
      v72 = &v71[8 * v69];
      v73 = v5 - v7;
      v41 = v5 == v7;
      v5 = v72;
      if (!v41)
      {
        v5 = &v72[v73 & 0xFFFFFFFFFFFFFFF8];
        v74 = v73 - 8;
        if ((unint64_t)(v73 - 8) < 0x38)
        {
          v75 = &v71[8 * v69];
          goto LABEL_83;
        }
        v84 = &v71[8 * v69];
        v75 = v84;
        if ((unint64_t)(v84 - v7) < 0x20)
          goto LABEL_89;
        v85 = (v74 >> 3) + 1;
        v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v72[v86];
        v7 += v86;
        v87 = (__int128 *)(v35 + 3);
        v88 = v84 + 16;
        v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v90 = *v87;
          *(v88 - 1) = *(v87 - 1);
          *v88 = v90;
          v87 += 2;
          v88 += 2;
          v89 -= 4;
        }
        while (v89);
        if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_89:
          do
          {
LABEL_83:
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v75 = v91;
            v75 += 8;
          }
          while (v75 != v5);
        }
      }
      *(_QWORD *)a1 = v71;
      *(_QWORD *)(a1 + 8) = v72;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = &v71[v70];
      if (v67)
      {
        operator delete(v67);
        v5 = *(char **)(a1 + 16);
      }
    }
    if (v5)
      goto LABEL_31;
LABEL_5:
    __break(1u);
  }
  v15 = v14 >> 2;
  if (v9 == *(_QWORD *)a1)
    v16 = 1;
  else
    v16 = v15;
  if (v16 >> 61)
    goto LABEL_86;
  v17 = (char *)operator new(8 * v16);
  v18 = &v17[8 * v13];
  v19 = &v17[8 * v16];
  v20 = operator new(0x1000uLL);
  v21 = v20;
  if (v13 != v16)
  {
LABEL_18:
    *(_QWORD *)v18 = v20;
    v23 = v18 + 8;
    if (v10 != v11)
      goto LABEL_46;
    goto LABEL_19;
  }
  if (v12 >= 1)
  {
    v22 = v13 + 2;
    if (v13 >= -1)
      v22 = v13 + 1;
    v18 -= 8 * (v22 >> 1);
    goto LABEL_18;
  }
  v45 = v12 >> 2;
  if (v10 == v11)
    v45 = 1;
  if (v45 >> 61)
LABEL_86:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v46 = 8 * v45;
  v18 = (char *)operator new(8 * v45);
  operator delete(v17);
  v19 = &v18[v46];
  v47 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v17 = v18;
  *(_QWORD *)v18 = v21;
  v23 = v18 + 8;
  if (v10 != v47)
  {
    while (1)
    {
LABEL_46:
      if (v18 == v17)
      {
        if (v23 >= v19)
        {
          v52 = (v19 - v18) >> 2;
          if (v19 == v18)
            v52 = 1;
          if (v52 >> 61)
            goto LABEL_86;
          v53 = (v52 + 3) >> 2;
          v54 = 8 * v52;
          v55 = (char *)operator new(8 * v52);
          v17 = v55;
          v48 = &v55[8 * v53];
          v25 = v48;
          v56 = v23 - v18;
          if (v23 != v18)
          {
            v25 = &v48[v56 & 0xFFFFFFFFFFFFFFF8];
            v57 = v56 - 8;
            v58 = &v55[8 * v53];
            v59 = v18;
            if (v57 < 0x38)
              goto LABEL_90;
            v58 = &v55[8 * v53];
            v59 = v18;
            if ((unint64_t)(v58 - v18) < 0x20)
              goto LABEL_90;
            v60 = (v57 >> 3) + 1;
            v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
            v58 = &v48[v61];
            v59 = &v18[v61];
            v62 = (__int128 *)(v18 + 16);
            v63 = &v55[8 * v53 + 16];
            v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v65 = *v62;
              *((_OWORD *)v63 - 1) = *(v62 - 1);
              *(_OWORD *)v63 = v65;
              v62 += 2;
              v63 += 32;
              v64 -= 4;
            }
            while (v64);
            if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_90:
              do
              {
                v66 = *(_QWORD *)v59;
                v59 += 8;
                *(_QWORD *)v58 = v66;
                v58 += 8;
              }
              while (v58 != v25);
            }
          }
          v19 = &v55[v54];
          operator delete(v18);
        }
        else
        {
          v50 = (v19 - v23) >> 3;
          if (v50 >= -1)
            v51 = v50 + 1;
          else
            v51 = v50 + 2;
          v25 = &v23[8 * (v51 >> 1)];
          v48 = &v18[8 * (v51 >> 1)];
          if (v23 == v18)
          {
            v17 = v23;
          }
          else
          {
            memmove(&v18[8 * (v51 >> 1)], v18, v23 - v18);
            v17 = v18;
          }
        }
      }
      else
      {
        v48 = v18;
        v25 = v23;
      }
      v49 = *(_QWORD *)(v10 - 8);
      v10 -= 8;
      *((_QWORD *)v48 - 1) = v49;
      v24 = v48 - 8;
      v23 = v25;
      v18 = v24;
      if (v10 == *(_QWORD *)(a1 + 8))
        goto LABEL_20;
    }
  }
LABEL_19:
  v24 = v18;
  v25 = v23;
LABEL_20:
  v26 = *(char **)a1;
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v24;
  *(_QWORD *)(a1 + 16) = v25;
  *(_QWORD *)(a1 + 24) = v19;
  if (v26)
    operator delete(v26);
}

void webrtc::H264BitstreamParser::~H264BitstreamParser(webrtc::H264BitstreamParser *this)
{
  *(_QWORD *)this = &off_24C0B4A00;
}

{
  *(_QWORD *)this = &off_24C0B4A00;
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::H264BitstreamParser::ParseNonParameterSetNalu(webrtc::H264BitstreamParser *this, webrtc::H264 *a2, size_t __sz, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unsigned int v13;
  __int32 v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  __int32 v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  int v30;
  char *v31;
  int v32;
  __int32 v33;
  int v34;
  __int32 v35;
  int v36;
  int v37;
  char v38;
  char v39;
  unsigned int v40;
  __int32 v41;
  char v42;
  _BYTE *v43;
  int v44;
  unsigned __int32 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int32 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v59;
  char v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  signed int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::string *v78;
  const unsigned __int8 *v79;
  unint64_t v80;
  uint64_t v81;
  uint8x16_t v82;
  void *__p;
  void *v84;

  if (!*((_BYTE *)this + 60) || !*((_BYTE *)this + 88))
    return 1;
  if (*((_BYTE *)this + 96))
    *((_BYTE *)this + 96) = 0;
  webrtc::H264::ParseRbsp(a2, __sz, (unint64_t *)&__p);
  v11 = v84;
  v12 = (_BYTE *)v84 - (_BYTE *)__p;
  if (v84 == __p)
  {
    v15 = 1;
    if (v84)
      goto LABEL_111;
    return v15;
  }
  v82.i64[0] = (uint64_t)__p;
  if (((v12 >> 28) & 0x1FFFFFFFFLL) != 0)
    goto LABEL_167;
  v13 = 8 * v12;
  v82.i8[12] = 0;
  if (8 * (_DWORD)v12)
  {
    v14 = v13 - 8;
    v82.i64[0] = (uint64_t)__p + (int)((v13 >> 3) - ((v13 - 1) >> 3));
  }
  else
  {
    v14 = -1;
  }
  v82.i32[2] = v14;
  v16 = *(_BYTE *)a2;
  webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
  v17 = webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
  webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
  if (!*((_BYTE *)this + 60))
    goto LABEL_166;
  v18 = v82.i32[2];
  if (*((_DWORD *)this + 7) == 1)
  {
    if (v82.i32[2] >= 2)
    {
      v82.i64[0] += (int)(((v82.i32[2] + 7) >> 3) - ((v82.i32[2] + 5) >> 3));
      v18 = v82.i32[2] - 2;
    }
    else
    {
      v18 = -1;
    }
  }
  v19 = *((_DWORD *)this + 9);
  v82.i8[12] = 0;
  v20 = -1;
  if ((v19 & 0x80000000) == 0)
  {
    v21 = __OFSUB__(v18, v19);
    v22 = v18 - v19;
    if (v22 < 0 == v21)
    {
      v24 = v18 + 7;
      v23 = v18 < -7;
      v25 = v18 + 14;
      if (v23)
        v24 = v25;
      v26 = v24 >> 3;
      v27 = v22 + 7;
      if (v22 < -7)
        v27 = v22 + 14;
      v82.i64[0] += v26 - (v27 >> 3);
      v20 = v22;
    }
  }
  v28 = v16 & 0xF;
  v82.i32[2] = v20;
  if (!*((_DWORD *)this + 8))
  {
    v82.i8[12] = 0;
    v82.i32[2] = v20 - 1;
    if (v20 >= 1)
    {
      v31 = (char *)v82.i64[0];
      if ((((_BYTE)v20 - 1) & 7) != 0)
      {
        if (((*(unsigned __int8 *)v82.i64[0] >> ((v20 - 1) & 7)) & 1) != 0)
        {
LABEL_90:
          v82.i8[12] = 0;
          if (v20 == 1)
          {
            v54 = -1;
          }
          else
          {
            v54 = v20 - 2;
            v82.i64[0] = (uint64_t)&v31[((v20 + 6) >> 3) - ((v20 + 5) >> 3)];
          }
          v82.i32[2] = v54;
          v29 = 1;
          if (v28 != 5)
            goto LABEL_28;
          goto LABEL_27;
        }
      }
      else
      {
        ++v82.i64[0];
        v53 = *v31++;
        if ((v53 & 1) != 0)
          goto LABEL_90;
      }
    }
  }
  v29 = 0;
  if (v28 != 5)
    goto LABEL_28;
LABEL_27:
  webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
  if (!*((_BYTE *)this + 60))
    goto LABEL_166;
LABEL_28:
  v30 = *((_DWORD *)this + 11);
  if (v30)
  {
    if (v30 != 1)
      goto LABEL_56;
    goto LABEL_49;
  }
  v32 = *((_DWORD *)this + 10);
  v82.i8[12] = 0;
  v33 = -1;
  if ((v32 & 0x80000000) == 0)
  {
    v21 = __OFSUB__(v82.i32[2], v32);
    v34 = v82.i32[2] - v32;
    if (v34 < 0 == v21)
    {
      v35 = v82.i32[2] + 7;
      if (v82.i32[2] < -7)
        v35 = v82.i32[2] + 14;
      v36 = v35 >> 3;
      v37 = v34 + 7;
      if (v34 < -7)
        v37 = v34 + 14;
      v82.i64[0] += v36 - (v37 >> 3);
      v33 = v34;
    }
  }
  v82.i32[2] = v33;
  if (!*((_BYTE *)this + 88))
    goto LABEL_166;
  v38 = *((_BYTE *)this + 64) ? v29 : 1;
  if ((v38 & 1) == 0)
  {
    webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
    if (!*((_BYTE *)this + 60))
      goto LABEL_166;
  }
  if (*((_DWORD *)this + 11) == 1)
  {
LABEL_49:
    if (!*((_DWORD *)this + 6))
    {
      webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
      if (!*((_BYTE *)this + 88))
        goto LABEL_166;
      if (*((_BYTE *)this + 64))
        v39 = v29;
      else
        v39 = 1;
      if ((v39 & 1) == 0)
        webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
    }
  }
LABEL_56:
  if (!*((_BYTE *)this + 88))
    goto LABEL_166;
  v40 = v17 % 5;
  if (*((_DWORD *)this + 18))
    webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
  if (v40 == 1)
  {
    v41 = v82.i32[2] - 1;
    if (v82.i32[2] < 1)
    {
      v82.i8[12] = 0;
      v82.i32[2] = -2;
      goto LABEL_109;
    }
    v82.i64[0] += (int)(((v82.i32[2] + 7) >> 3) - ((v82.i32[2] + 6) >> 3));
    v82.i8[12] = 0;
    v42 = v82.i8[8] - 2;
    v82.i32[2] -= 2;
    if (v41 < 1)
      goto LABEL_109;
  }
  else
  {
    if (v40 > 3 || v40 == 2)
      goto LABEL_75;
    v82.i8[12] = 0;
    v42 = v82.i8[8] - 1;
    v23 = v82.i32[2]-- < 1;
    if (v23)
      goto LABEL_109;
  }
  v43 = (_BYTE *)v82.i64[0];
  v44 = v42 & 7;
  if (v44)
  {
    if (((*(unsigned __int8 *)v82.i64[0] >> v44) & 1) == 0)
      goto LABEL_75;
  }
  else
  {
    ++v82.i64[0];
    if ((*v43 & 1) == 0)
      goto LABEL_75;
  }
  webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
  if (v40 == 1)
    webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
LABEL_75:
  v45 = v82.u32[2];
  v15 = 1;
  v82.i8[12] = 1;
  if (v82.i32[2] < 0)
    goto LABEL_110;
  if ((a4 & 0xFE) == 0x14)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h264/h264_bitstream_parser.cc");
    goto LABEL_88;
  }
  if (v40 == 2 || v40 == 4)
  {
LABEL_81:
    v82.i8[12] = 1;
    goto LABEL_82;
  }
  v82.i8[12] = 0;
  v55 = --v82.i32[2];
  if (!v45)
  {
    v55 = -1;
    goto LABEL_105;
  }
  v56 = v82.i64[0];
  if ((v55 & 7) != 0)
  {
    LODWORD(v56) = *(unsigned __int8 *)v82.i64[0] >> (v55 & 7);
  }
  else
  {
    ++v82.i64[0];
    LOBYTE(v56) = *(_BYTE *)v56;
  }
  if ((v56 & 1) != 0)
  {
    do
    {
      v59 = webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
      if (v59 < 2 || v59 == 2)
      {
        webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
      }
      else if (v59 == 3)
      {
        v55 = v82.i32[2];
        break;
      }
      v82.i8[12] = 1;
      v55 = v82.i32[2];
    }
    while ((v82.i32[2] & 0x80000000) == 0);
  }
LABEL_105:
  if (v40 != 1)
    goto LABEL_136;
  v82.i8[12] = 0;
  v45 = v55 - 1;
  v82.i32[2] = v55 - 1;
  if (v55 < 1)
  {
LABEL_109:
    v15 = 1;
    goto LABEL_110;
  }
  v57 = v82.i64[0];
  if ((v45 & 7) != 0)
  {
    LODWORD(v57) = *(unsigned __int8 *)v82.i64[0] >> (v45 & 7);
  }
  else
  {
    ++v82.i64[0];
    LOBYTE(v57) = *(_BYTE *)v57;
  }
  if ((v57 & 1) == 0)
    goto LABEL_81;
  v15 = 1;
  while (1)
  {
    v64 = webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
    if (v64 >= 2 && v64 != 2)
      break;
    webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
LABEL_129:
    v82.i8[12] = 1;
    if (v82.i32[2] < 0)
      goto LABEL_110;
  }
  if (v64 != 3)
    goto LABEL_129;
  v55 = v82.i32[2];
LABEL_136:
  v15 = 1;
  v82.i8[12] = 1;
  v45 = v55;
  if (v55 < 0)
  {
LABEL_110:
    v11 = __p;
    if (__p)
    {
LABEL_111:
      v84 = v11;
      operator delete(v11);
    }
    return v15;
  }
LABEL_82:
  if (!*((_BYTE *)this + 88))
    goto LABEL_166;
  if (*((_BYTE *)this + 65))
  {
    v15 = 2;
    if (!v40 || v40 == 3)
      goto LABEL_110;
  }
  if (v40 == 1 && *((_DWORD *)this + 17) == 1)
  {
LABEL_88:
    v15 = 2;
    goto LABEL_110;
  }
  if ((v16 & 0x60) == 0)
  {
LABEL_151:
    if (*((_BYTE *)this + 66) && v40 != 2 && v40 != 4)
      webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
    v68 = webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
    if ((v68 & 1) != 0)
      v69 = (v68 + 1) >> 1;
    else
      v69 = -(v68 >> 1);
    v15 = 1;
    v82.i8[12] = 1;
    if ((v82.i32[2] & 0x80000000) == 0)
    {
      if (v69 >= 0)
        v70 = v69;
      else
        v70 = -v69;
      if (v70 < 0x34)
      {
        v15 = 0;
        *((_DWORD *)this + 23) = v69;
        *((_BYTE *)this + 96) = 1;
      }
      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        rtc::webrtc_logging_impl::Log("\r\t", v71, v72, v73, v74, v75, v76, v77, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h264/h264_bitstream_parser.cc");
      }
    }
    goto LABEL_110;
  }
  v82.i8[12] = 0;
  if (v28 == 5)
  {
    if (v45 >= 2)
    {
      v82.i64[0] += (int)(((v45 + 7) >> 3) - ((v45 + 5) >> 3));
      v82.i32[2] = v45 - 2;
    }
    else
    {
      v82.i32[2] = -1;
    }
    goto LABEL_151;
  }
  v61 = v45 - 1;
  v82.i32[2] = v45 - 1;
  if (!v45)
    goto LABEL_151;
  v62 = v82.i64[0];
  v63 = v61 & 7;
  if (v63)
  {
    LODWORD(v62) = *(unsigned __int8 *)v82.i64[0] >> v63;
  }
  else
  {
    ++v82.i64[0];
    LOBYTE(v62) = *(_BYTE *)v62;
  }
  if ((v62 & 1) == 0)
    goto LABEL_151;
  while (2)
  {
    v66 = webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
    if (v66 > 6)
    {
LABEL_143:
      v82.i8[12] = 1;
      if (v82.i32[2] < 0)
        goto LABEL_150;
      continue;
    }
    break;
  }
  v67 = v66;
  if (((1 << v66) & 0x54) != 0)
  {
LABEL_142:
    webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
    goto LABEL_143;
  }
  if (((1 << v66) & 0xA) != 0)
  {
    webrtc::BitstreamReader::ReadExponentialGolomb(&v82);
    if ((v67 & 0xFFFFFFFE) != 2)
      goto LABEL_143;
    goto LABEL_142;
  }
  if (v66)
    goto LABEL_143;
LABEL_150:
  if (*((_BYTE *)this + 88))
    goto LABEL_151;
LABEL_166:
  __break(1u);
LABEL_167:
  v78 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v7, v8, v9, v10, v81);
  return webrtc::H264BitstreamParser::ParseSlice((webrtc::H264BitstreamParser *)v78, v79, v80);
}

void webrtc::H264BitstreamParser::ParseSlice(webrtc::H264BitstreamParser *this, unsigned __int8 *a2, size_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  webrtc::H264 *v19;
  unsigned __int8 *v20;
  _BYTE v21[32];
  __int128 v22;
  int v23;
  unsigned __int8 v24;
  uint8x16_t v25;
  _BYTE *v26;
  _BYTE *v27;

  switch(*a2 & 0x1F)
  {
    case 6:
    case 9:
    case 0xE:
      return;
    case 7:
      webrtc::H264::ParseRbsp((webrtc::H264 *)(a2 + 1), a3 - 1, (unint64_t *)&v26);
      v8 = (uint64_t)v26;
      v9 = v27 - v26;
      if (v27 == v26)
        v8 = 0;
      v25.i64[0] = v8;
      if (((v9 >> 28) & 0x1FFFFFFFFLL) != 0)
      {
        v18 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v4, v5, v6, v7, *(uint64_t *)v21);
        webrtc::H264BitstreamParser::ParseBitstream(v18, v19, v20);
      }
      else
      {
        v25.i32[2] = 8 * v9;
        v25.i8[12] = 1;
        webrtc::SpsParser::ParseSpsUpToVui(&v25, (uint64_t)v21);
        if (v26)
        {
          v27 = v26;
          operator delete(v26);
        }
        v10 = (_OWORD *)((char *)this + 8);
        if (*((unsigned __int8 *)this + 60) == v24)
        {
          if (*((_BYTE *)this + 60))
          {
            v11 = *(_OWORD *)&v21[16];
            *v10 = *(_OWORD *)v21;
            *(_OWORD *)((char *)this + 24) = v11;
            *(_OWORD *)((char *)this + 40) = v22;
            *((_DWORD *)this + 14) = v23;
          }
        }
        else if (*((_BYTE *)this + 60))
        {
          *((_BYTE *)this + 60) = 0;
        }
        else
        {
          v17 = *(_OWORD *)&v21[16];
          *v10 = *(_OWORD *)v21;
          *(_OWORD *)((char *)this + 24) = v17;
          *(_OWORD *)((char *)this + 40) = v22;
          *((_DWORD *)this + 14) = v23;
          *((_BYTE *)this + 60) = 1;
        }
      }
      break;
    case 8:
      webrtc::H264::ParseRbsp((webrtc::H264 *)(a2 + 1), a3 - 1, (unint64_t *)&v26);
      if (v27 == v26)
        v16 = 0;
      else
        v16 = (uint64_t)v26;
      webrtc::PpsParser::ParseInternal(v16, v27 - v26, v12, v13, v14, v15, (uint64_t)v21);
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      *((_OWORD *)this + 4) = *(_OWORD *)v21;
      *(_OWORD *)((char *)this + 73) = *(_OWORD *)&v21[9];
      break;
    default:
      webrtc::H264BitstreamParser::ParseNonParameterSetNalu(this, (webrtc::H264 *)a2, a3, *a2 & 0x1F);
      break;
  }
}

void webrtc::H264BitstreamParser::ParseBitstream(webrtc::H264BitstreamParser *a1, webrtc::H264 *this, unsigned __int8 *a3)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;

  webrtc::H264::FindNaluIndices(this, a3, &v7);
  v5 = v7;
  v6 = v8;
  if (v7 != v8)
  {
    do
    {
      webrtc::H264BitstreamParser::ParseSlice(a1, (unsigned __int8 *)this + *((_QWORD *)v5 + 1), *((_QWORD *)v5 + 2));
      v5 += 24;
    }
    while (v5 != v6);
    v5 = v7;
  }
  if (v5)
  {
    v8 = v5;
    operator delete(v5);
  }
}

uint64_t webrtc::H264BitstreamParser::GetLastSliceQp(webrtc::H264BitstreamParser *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!*((_BYTE *)this + 96) || !*((_BYTE *)this + 88))
    return 0;
  v1 = (*((_DWORD *)this + 19) + *((_DWORD *)this + 23) + 26);
  if (v1 >= 0x34)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h264/h264_bitstream_parser.cc");
    return 0;
  }
  return v1 | 0x100000000;
}

void webrtc::H264::FindNaluIndices(webrtc::H264 *this@<X0>, const unsigned __int8 *a2@<X1>, char **a3@<X8>)
{
  const unsigned __int8 *v3;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = a2 - 3;
  if ((unint64_t)a2 >= 4)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *((unsigned __int8 *)this + v8 + 2);
      if (v11 < 2)
      {
        v10 = v8 + 1;
        if (v11 != 1)
          goto LABEL_6;
        if (!*((_BYTE *)this + v10) && !*((_BYTE *)this + v8))
          break;
      }
LABEL_5:
      v10 = v8 + 3;
LABEL_6:
      v8 = v10;
      if (v10 >= (unint64_t)v3)
      {
        if (v7 != *a3)
          *((_QWORD *)v7 - 1) = &a2[-*((_QWORD *)v7 - 2)];
        return;
      }
    }
    if (v8)
    {
      if (*((_BYTE *)this + v8 - 1))
        v12 = v8;
      else
        v12 = v8 - 1;
      v13 = v7 - v9;
      if (v7 != v9)
        goto LABEL_16;
    }
    else
    {
      v12 = 0;
      v13 = v7 - v9;
      if (v7 != v9)
LABEL_16:
        *((_QWORD *)v7 - 1) = v12 - *((_QWORD *)v7 - 2);
    }
    v14 = v8 + 3;
    v15 = (unint64_t)a3[2];
    if ((unint64_t)v7 < v15)
    {
      if (!v7)
        goto LABEL_39;
      *(_QWORD *)v7 = v12;
      *((_QWORD *)v7 + 1) = v14;
      *((_QWORD *)v7 + 2) = 0;
      v7 += 24;
      goto LABEL_4;
    }
    v16 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
    v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v9) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    if (!v17)
    {
LABEL_39:
      __break(1u);
LABEL_40:
      abort();
    }
    if (v17 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v24 = 24 * v17;
    v19 = (char *)operator new(24 * v17);
    v20 = &v19[24 * v16];
    *(_QWORD *)v20 = v12;
    *((_QWORD *)v20 + 1) = v14;
    *((_QWORD *)v20 + 2) = 0;
    if (v7 == v9)
    {
      v23 = &v19[24 * v16];
      v7 = v20 + 24;
      *a3 = v20;
      a3[1] = v20 + 24;
      a3[2] = &v19[v24];
      if (!v9)
      {
LABEL_3:
        v9 = v23;
LABEL_4:
        a3[1] = v7;
        goto LABEL_5;
      }
    }
    else
    {
      v21 = &v19[24 * v16];
      do
      {
        v22 = *(_OWORD *)(v7 - 24);
        v23 = v21 - 24;
        *((_QWORD *)v21 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v21 - 24) = v22;
        v7 -= 24;
        v21 -= 24;
      }
      while (v7 != v9);
      v7 = v20 + 24;
      *a3 = v23;
      a3[1] = v20 + 24;
      a3[2] = &v19[v24];
      if (!v9)
        goto LABEL_3;
    }
    operator delete(v9);
    goto LABEL_3;
  }
}

void webrtc::H264::ParseRbsp(webrtc::H264 *this@<X0>, size_t __sz@<X1>, unint64_t *a3@<X8>)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int64_t v20;
  char *v21;
  char *v22;
  BOOL v23;
  _BYTE *v24;
  char *v25;
  char v26;
  unint64_t v27;
  _OWORD *v28;
  __int128 *v29;
  unint64_t v30;
  __int128 v31;
  _QWORD *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  BOOL v44;
  _BYTE *v45;
  char *v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  size_t v52;
  int64_t v53;
  char *v54;
  char *v55;
  BOOL v56;
  _BYTE *v57;
  char *v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  unint64_t v64;
  __int128 v65;
  _QWORD *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  unint64_t v72;
  __int128 v73;
  _QWORD *v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
LABEL_114:
      abort();
    v6 = operator new(__sz);
    v7 = 0;
    *a3 = (unint64_t)v6;
    a3[1] = (unint64_t)v6;
    a3[2] = (unint64_t)&v6[__sz];
    while (1)
    {
      if (__sz - v7 >= 3 && !*((_BYTE *)this + v7))
      {
        v8 = v7 + 1;
        if (!*((_BYTE *)this + v7 + 1))
        {
          v9 = v7 + 2;
          if (*((_BYTE *)this + v7 + 2) == 3)
          {
            v10 = a3[2];
            if ((unint64_t)v6 < v10)
            {
              *v6 = 0;
              v11 = v6 + 1;
              a3[1] = (unint64_t)(v6 + 1);
              v12 = a3[2];
              if ((unint64_t)(v6 + 1) >= v12)
                goto LABEL_69;
LABEL_66:
              *v11 = *((_BYTE *)this + v8);
              v14 = (uint64_t)(v11 + 1);
              goto LABEL_35;
            }
            v36 = *a3;
            v37 = (unint64_t)&v6[-*a3];
            v38 = v37 + 1;
            if ((uint64_t)(v37 + 1) < 0)
              goto LABEL_114;
            v39 = v10 - v36;
            if (2 * v39 > v38)
              v38 = 2 * v39;
            if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
              v40 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (!v40)
              goto LABEL_115;
            v41 = (unint64_t)operator new(v40);
            v42 = (char *)(v41 + v40);
            v43 = (char *)(v41 + v37);
            *(_BYTE *)(v41 + v37) = 0;
            v11 = (_BYTE *)(v41 + v37 + 1);
            if (v6 == (_BYTE *)v36)
            {
              *a3 = (unint64_t)v43;
              a3[1] = (unint64_t)v11;
              a3[2] = (unint64_t)v42;
            }
            else
            {
              if (v37 < 8
                || (v41 + v37 - 1 - (unint64_t)&v6[~v36] <= v41 + v37 - 1
                  ? (v44 = v36 > (unint64_t)(v6 - 1))
                  : (v44 = 1),
                    v44 || v36 - v41 < 0x20))
              {
                v45 = v6;
                goto LABEL_62;
              }
              if (v37 >= 0x20)
              {
                v60 = v37 & 0xFFFFFFFFFFFFFFE0;
                v62 = (_OWORD *)(v41 + v37 - 16);
                v63 = (__int128 *)(v6 - 16);
                v64 = v37 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v65 = *v63;
                  *(v62 - 1) = *(v63 - 1);
                  *v62 = v65;
                  v62 -= 2;
                  v63 -= 2;
                  v64 -= 32;
                }
                while (v64);
                if (v37 != v60)
                {
                  if ((v37 & 0x18) == 0)
                  {
                    v43 -= v60;
                    v45 = &v6[-v60];
                    goto LABEL_62;
                  }
                  goto LABEL_99;
                }
              }
              else
              {
                v60 = 0;
LABEL_99:
                v45 = &v6[-(v37 & 0xFFFFFFFFFFFFFFF8)];
                v43 -= v37 & 0xFFFFFFFFFFFFFFF8;
                v66 = &v6[-v60 - v36 - 8 + v41];
                v67 = (uint64_t *)&v6[-v60 - 8];
                v68 = v60 - (v37 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v69 = *v67--;
                  *v66-- = v69;
                  v68 += 8;
                }
                while (v68);
                if (v37 != (v37 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_62:
                  v46 = v43 - 1;
                  do
                  {
                    v47 = *--v45;
                    *v46-- = v47;
                  }
                  while (v45 != (_BYTE *)v36);
                }
              }
              *a3 = v41;
              a3[1] = (unint64_t)v11;
              v6 = (_BYTE *)v36;
              a3[2] = (unint64_t)v42;
              if (!v36)
              {
                a3[1] = (unint64_t)v11;
                v12 = a3[2];
                if ((unint64_t)v11 >= v12)
                  goto LABEL_69;
                goto LABEL_66;
              }
            }
            operator delete(v6);
            a3[1] = (unint64_t)v11;
            v12 = a3[2];
            if ((unint64_t)v11 >= v12)
            {
LABEL_69:
              v48 = *a3;
              v49 = (unint64_t)&v11[-*a3];
              v50 = v49 + 1;
              if ((uint64_t)(v49 + 1) < 0)
                goto LABEL_114;
              v51 = v12 - v48;
              if (2 * v51 > v50)
                v50 = 2 * v51;
              if (v51 >= 0x3FFFFFFFFFFFFFFFLL)
                v52 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (!v52)
              {
LABEL_115:
                __break(1u);
                return;
              }
              v53 = (int64_t)operator new(v52);
              v54 = (char *)(v53 + v52);
              v55 = (char *)(v53 + v49);
              *(_BYTE *)(v53 + v49) = *((_BYTE *)this + v8);
              v14 = v53 + v49 + 1;
              if (v11 == (_BYTE *)v48)
              {
                *a3 = (unint64_t)v55;
                a3[1] = v14;
                a3[2] = (unint64_t)v54;
              }
              else
              {
                if (v49 < 8
                  || (v53 + v49 - 1 - (unint64_t)&v11[~v48] <= v53 + v49 - 1
                    ? (v56 = v48 > (unint64_t)(v11 - 1))
                    : (v56 = 1),
                      v56 || v48 - v53 < 0x20))
                {
                  v57 = v11;
                  goto LABEL_84;
                }
                if (v49 >= 0x20)
                {
                  v61 = v49 & 0xFFFFFFFFFFFFFFE0;
                  v70 = (_OWORD *)(v53 + v49 - 16);
                  v71 = (__int128 *)(v11 - 16);
                  v72 = v49 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v73 = *v71;
                    *(v70 - 1) = *(v71 - 1);
                    *v70 = v73;
                    v70 -= 2;
                    v71 -= 2;
                    v72 -= 32;
                  }
                  while (v72);
                  if (v49 != v61)
                  {
                    if ((v49 & 0x18) == 0)
                    {
                      v55 -= v61;
                      v57 = &v11[-v61];
                      goto LABEL_84;
                    }
                    goto LABEL_107;
                  }
                }
                else
                {
                  v61 = 0;
LABEL_107:
                  v57 = &v11[-(v49 & 0xFFFFFFFFFFFFFFF8)];
                  v55 -= v49 & 0xFFFFFFFFFFFFFFF8;
                  v74 = &v11[-v61 - v48 - 8 + v53];
                  v75 = (uint64_t *)&v11[-v61 - 8];
                  v76 = v61 - (v49 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v77 = *v75--;
                    *v74-- = v77;
                    v76 += 8;
                  }
                  while (v76);
                  if (v49 != (v49 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_84:
                    v58 = v55 - 1;
                    do
                    {
                      v59 = *--v57;
                      *v58-- = v59;
                    }
                    while (v57 != (_BYTE *)v48);
                  }
                }
                *a3 = v53;
                a3[1] = v14;
                v11 = (_BYTE *)v48;
                a3[2] = (unint64_t)v54;
                if (!v48)
                  goto LABEL_35;
              }
              operator delete(v11);
              goto LABEL_35;
            }
            goto LABEL_66;
          }
        }
      }
      v13 = a3[2];
      if ((unint64_t)v6 >= v13)
        break;
      *v6 = *((_BYTE *)this + v7);
      v14 = (uint64_t)(v6 + 1);
LABEL_34:
      v9 = v7;
LABEL_35:
      a3[1] = v14;
      v7 = v9 + 1;
      v6 = (_BYTE *)v14;
      if (v9 + 1 >= __sz)
        return;
    }
    v15 = *a3;
    v16 = (unint64_t)&v6[-*a3];
    v17 = v16 + 1;
    if ((uint64_t)(v16 + 1) < 0)
      goto LABEL_114;
    v18 = v13 - v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (!v19)
      goto LABEL_115;
    v20 = (int64_t)operator new(v19);
    v21 = (char *)(v20 + v19);
    v22 = (char *)(v20 + v16);
    *(_BYTE *)(v20 + v16) = *((_BYTE *)this + v7);
    v14 = v20 + v16 + 1;
    if (v6 == (_BYTE *)v15)
    {
      *a3 = (unint64_t)v22;
      a3[1] = v14;
      a3[2] = (unint64_t)v21;
LABEL_33:
      operator delete(v6);
      goto LABEL_34;
    }
    if (v16 < 8
      || (v20 + v16 - 1 - (unint64_t)&v6[~v15] <= v20 + v16 - 1
        ? (v23 = v15 > (unint64_t)(v6 - 1))
        : (v23 = 1),
          v23 || v15 - v20 < 0x20))
    {
      v24 = v6;
      goto LABEL_28;
    }
    if (v16 >= 0x20)
    {
      v27 = v16 & 0xFFFFFFFFFFFFFFE0;
      v28 = (_OWORD *)(v20 + v16 - 16);
      v29 = (__int128 *)(v6 - 16);
      v30 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v31 = *v29;
        *(v28 - 1) = *(v29 - 1);
        *v28 = v31;
        v28 -= 2;
        v29 -= 2;
        v30 -= 32;
      }
      while (v30);
      if (v16 == v27)
        goto LABEL_30;
      if ((v16 & 0x18) == 0)
      {
        v22 -= v27;
        v24 = &v6[-v27];
LABEL_28:
        v25 = v22 - 1;
        do
        {
          v26 = *--v24;
          *v25-- = v26;
        }
        while (v24 != (_BYTE *)v15);
        goto LABEL_30;
      }
    }
    else
    {
      v27 = 0;
    }
    v24 = &v6[-(v16 & 0xFFFFFFFFFFFFFFF8)];
    v22 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v32 = &v6[-v27 - v15 - 8 + v20];
    v33 = (uint64_t *)&v6[-v27 - 8];
    v34 = v27 - (v16 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v35 = *v33--;
      *v32-- = v35;
      v34 += 8;
    }
    while (v34);
    if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_28;
LABEL_30:
    *a3 = v20;
    a3[1] = v14;
    v6 = (_BYTE *)v15;
    a3[2] = (unint64_t)v21;
    if (!v15)
      goto LABEL_34;
    goto LABEL_33;
  }
}

unsigned __int8 *webrtc::H264::WriteRbsp(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  size_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;

  v4 = a2;
  v5 = result;
  v6 = *(_QWORD *)a3 + a2;
  if (*(_QWORD *)(a3 + 8) < v6)
  {
    result = (unsigned __int8 *)operator new[]();
    v7 = result;
    v8 = *(_QWORD *)(a3 + 16);
    if (v8)
    {
      memcpy(result, *(const void **)(a3 + 16), *(_QWORD *)a3);
      *(_QWORD *)(a3 + 16) = v7;
      result = (unsigned __int8 *)MEMORY[0x20BD0ADD4](v8, 0x1000C8077774924);
    }
    else
    {
      *(_QWORD *)(a3 + 16) = result;
    }
    *(_QWORD *)(a3 + 8) = v6;
  }
  if (v4)
  {
    v9 = 0;
    v10 = *(_QWORD *)a3;
    do
    {
      v12 = *v5++;
      v11 = v12;
      v13 = *(_QWORD *)(a3 + 8);
      if (v12 <= 3 && v9 >= 2)
      {
        v15 = v10 + 1;
        if (v13 < v10 + 1)
        {
          if (v13 + (v13 >> 1) <= v15)
            v16 = v10 + 1;
          else
            v16 = v13 + (v13 >> 1);
          result = (unsigned __int8 *)operator new[]();
          v17 = result;
          v18 = *(_QWORD *)(a3 + 16);
          if (v18)
          {
            memcpy(result, *(const void **)(a3 + 16), *(_QWORD *)a3);
            *(_QWORD *)(a3 + 16) = v17;
            result = (unsigned __int8 *)MEMORY[0x20BD0ADD4](v18, 0x1000C8077774924);
          }
          else
          {
            *(_QWORD *)(a3 + 16) = result;
          }
          *(_QWORD *)(a3 + 8) = v16;
          v10 = *(_QWORD *)a3;
        }
        v9 = 0;
        *(_BYTE *)(*(_QWORD *)(a3 + 16) + v10) = 3;
        *(_QWORD *)a3 = v15;
        v13 = *(_QWORD *)(a3 + 8);
        v10 = v15;
      }
      v19 = v10 + 1;
      if (v13 < v10 + 1)
      {
        if (v13 + (v13 >> 1) <= v19)
          v20 = v10 + 1;
        else
          v20 = v13 + (v13 >> 1);
        result = (unsigned __int8 *)operator new[]();
        v21 = result;
        v22 = *(_QWORD *)(a3 + 16);
        if (v22)
        {
          memcpy(result, *(const void **)(a3 + 16), *(_QWORD *)a3);
          *(_QWORD *)(a3 + 16) = v21;
          result = (unsigned __int8 *)MEMORY[0x20BD0ADD4](v22, 0x1000C8077774924);
        }
        else
        {
          *(_QWORD *)(a3 + 16) = result;
        }
        *(_QWORD *)(a3 + 8) = v20;
        v10 = *(_QWORD *)a3;
      }
      *(_BYTE *)(*(_QWORD *)(a3 + 16) + v10) = v11;
      *(_QWORD *)a3 = v19;
      if (v11)
        v9 = 0;
      else
        ++v9;
      v10 = v19;
      --v4;
    }
    while (v4);
  }
  return result;
}

unint64_t webrtc::ParseH264ProfileLevelId(webrtc *this, const char *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  _DWORD *v8;

  if (strlen((const char *)this) != 6)
    return 0;
  v3 = strtol((const char *)this, 0, 16);
  if (!v3)
    return 0;
  if (v3 > 0x34u)
    return 0;
  v4 = v3;
  if (((1 << v3) & 0x1C0701C0703400) != 0)
  {
    v4 = v3;
    v5 = BYTE1(v3);
    v6 = BYTE2(v3);
    v7 = BYTE2(v3) - 66;
LABEL_6:
    switch(v7)
    {
      case 0u:
        if ((v5 & 0x4F) != 0)
        {
          if ((v5 & 0x4F) != 0x40)
            return 0;
        }
        else
        {
          v8 = &unk_208F0A950;
        }
        return v8[1] & 0xFFFFFF00 | (unint64_t)(v4 << 32) | v8[1];
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
        return 0;
      case 0xBu:
        if ((v5 & 0xFFFFFF8F) == 0x80)
        {
          v8 = &unk_208F0A940;
          return v8[1] & 0xFFFFFF00 | (unint64_t)(v4 << 32) | v8[1];
        }
        if ((v5 & 0xAF) != 0)
          return 0;
        v8 = &unk_208F0A960;
        return v8[1] & 0xFFFFFF00 | (unint64_t)(v4 << 32) | v8[1];
      case 0x16u:
        if ((v5 & 0xFFFFFFCF) == 0x80)
        {
          v8 = &unk_208F0A958;
        }
        else
        {
          if ((v5 & 0xCF) != 0xC0)
            return 0;
          v8 = &unk_208F0A948;
        }
        return v8[1] & 0xFFFFFF00 | (unint64_t)(v4 << 32) | v8[1];
      case 0x22u:
        if (v5)
        {
          if (v5 != 12)
            return 0;
          v8 = &unk_208F0A970;
        }
        else
        {
          v8 = &unk_208F0A968;
        }
        break;
      default:
        goto LABEL_22;
    }
    return v8[1] & 0xFFFFFF00 | (unint64_t)(v4 << 32) | v8[1];
  }
  if (v3 != 11)
    return 0;
  if ((v3 & 0x1000) != 0)
    v4 = 0;
  v5 = BYTE1(v3);
  v6 = BYTE2(v3);
  v7 = BYTE2(v3) - 66;
  if (v7 <= 0x22)
    goto LABEL_6;
LABEL_22:
  if (v6 != 244 || v5)
    return 0;
  v8 = &unk_208F0A978;
  return v8[1] & 0xFFFFFF00 | (unint64_t)(v4 << 32) | v8[1];
}

unint64_t webrtc::ParseSdpForH264ProfileLevelId(unint64_t result)
{
  unint64_t v1;
  const char *v2;
  unsigned __int8 v3;
  unint64_t v4;
  size_t v5;
  _QWORD *v6;
  size_t v7;
  BOOL v8;
  size_t v9;
  int v10;
  webrtc *v11;
  char __s1[17];
  unsigned __int8 v13;

  v13 = 16;
  if (__s1 <= "profile-level-id" && &__s1[16] > "profile-level-id")
    goto LABEL_31;
  strcpy(__s1, "profile-level-id");
  v1 = result + 8;
  result = (unint64_t)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(result, (const void **)__s1, *(uint64_t **)(result + 8), (uint64_t *)(result + 8));
  v3 = v13;
  if (v1 == result)
    goto LABEL_21;
  v4 = result;
  if ((v13 & 0x80) != 0)
  {
    v5 = *(_QWORD *)&__s1[8];
    if ((*(_QWORD *)&__s1[8] & 0x8000000000000000) != 0)
      goto LABEL_31;
    result = *(_QWORD *)__s1;
    if (*(_QWORD *)&__s1[8])
    {
      if (!*(_QWORD *)__s1)
        goto LABEL_31;
    }
  }
  else
  {
    result = (unint64_t)__s1;
    v5 = v13;
  }
  v6 = (_QWORD *)(v4 + 32);
  if ((*(char *)(v4 + 55) & 0x80000000) == 0)
  {
    v7 = *(unsigned __int8 *)(v4 + 55);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v4 + 40);
  if ((v7 & 0x8000000000000000) != 0 || ((v6 = (_QWORD *)*v6, v7) ? (v8 = v6 == 0) : (v8 = 0), v8))
  {
LABEL_31:
    __break(1u);
    return result;
  }
LABEL_16:
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp((const void *)result, v6, v9);
  if (v10)
  {
    if ((v10 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (v5 < v7)
LABEL_21:
    v4 = v1;
LABEL_22:
  if ((v3 & 0x80) != 0)
  {
    operator delete(*(void **)__s1);
    if (v4 != v1)
      goto LABEL_24;
    return 0x1F00000000;
  }
  if (v4 == v1)
    return 0x1F00000000;
LABEL_24:
  v11 = (webrtc *)(v4 + 56);
  if (*(char *)(v4 + 79) < 0)
    v11 = *(webrtc **)v11;
  return webrtc::ParseH264ProfileLevelId(v11, v2);
}

int *webrtc::H264ProfileLevelIdToString@<X0>(int *this@<X0>, int *a2@<X8>)
{
  int v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  _BYTE *v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  int __str;

  v4 = this[1];
  v5 = *this;
  if (v4)
  {
    if (v5 < 6)
    {
      snprintf((char *)&__str, 7uLL, "%s%02x", off_24C0B4A20[v5], v4);
      v6 = strlen((const char *)&__str);
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_31;
      v7 = v6;
      if (v6 > 0x16)
      {
        v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v11 = v6 | 7;
        v12 = v11 + 1;
        this = (int *)operator new(v11 + 1);
        *((_QWORD *)a2 + 1) = v7;
        *((_QWORD *)a2 + 2) = v12 | 0x8000000000000000;
        *(_QWORD *)a2 = this;
        v8 = (char *)this + v7;
        v9 = (int *)((char *)this + v7) > &__str;
        if (this > &__str)
          goto LABEL_18;
      }
      else
      {
        *((_BYTE *)a2 + 23) = v6;
        this = a2;
        v8 = (char *)a2 + v7;
        v9 = (int *)((char *)a2 + v7) > &__str;
        if (a2 > &__str)
          goto LABEL_18;
      }
      if (!v9)
      {
LABEL_18:
        if (v7)
          this = (int *)memcpy(this, &__str, v7);
        *v8 = 0;
        goto LABEL_29;
      }
LABEL_30:
      __break(1u);
LABEL_31:
      abort();
    }
LABEL_13:
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 24) = 0;
    return this;
  }
  if ((_DWORD)v5 == 2)
  {
    *((_BYTE *)a2 + 23) = 6;
    if (a2 <= (int *)"4d100b" && (char *)a2 + 6 > "4d100b")
      goto LABEL_30;
    *((_WORD *)a2 + 2) = 25136;
    v13 = 25652;
LABEL_27:
    v10 = v13 | 0x30310000;
    goto LABEL_28;
  }
  if ((_DWORD)v5 == 1)
  {
    *((_BYTE *)a2 + 23) = 6;
    if (a2 <= (int *)"42100b" && (char *)a2 + 6 > "42100b")
      goto LABEL_30;
    *((_WORD *)a2 + 2) = 25136;
    v13 = 12852;
    goto LABEL_27;
  }
  if ((_DWORD)v5)
    goto LABEL_13;
  *((_BYTE *)a2 + 23) = 6;
  if (a2 <= (int *)"42f00b" && (char *)a2 + 6 > "42f00b")
    goto LABEL_30;
  *((_WORD *)a2 + 2) = 25136;
  v10 = 812003892;
LABEL_28:
  *a2 = v10;
  *((_BYTE *)a2 + 6) = 0;
LABEL_29:
  *((_BYTE *)a2 + 24) = 1;
  return this;
}

uint64_t webrtc::H264SpropParameterSets::DecodeSprop(uint64_t a1, void **a2)
{
  int v4;
  size_t v5;
  void *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL *v15;
  unint64_t v16;
  char *v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v33;
  unint64_t v34;
  size_t v35;
  void **v36;
  void **v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL *v45;
  void *p_p;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *__p;
  size_t v57;
  int64_t v58;
  void *v59;
  size_t v60;
  int64_t v61;

  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v5)
  {
    if (v4 >= 0)
      v6 = a2;
    else
      v6 = *a2;
    v7 = memchr(v6, 44, v5);
    if (v7)
      v8 = v7 - (_BYTE *)v6;
    else
      v8 = -1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      goto LABEL_12;
  }
  else
  {
    v8 = -1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
LABEL_12:
      rtc::webrtc_logging_impl::Log("\r\t\n\t", v9, v10, v11, v12, v13, v14, (uint64_t)v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h264_sprop_parameter_sets.cc");
  }
  if (v8)
  {
    v16 = *((unsigned __int8 *)a2 + 23);
    if (*((char *)a2 + 23) < 0)
    {
      v19 = (unint64_t)a2[1];
      if (v8 < v19 - 1)
      {
        v17 = (char *)*a2;
        if (v19 >= v8)
          v18 = v8;
        else
          v18 = (size_t)a2[1];
        if (v18 > 0x7FFFFFFFFFFFFFF7)
LABEL_83:
          abort();
LABEL_28:
        if (v18 > 0x16)
        {
          v29 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v29 = v18 | 7;
          v30 = v29 + 1;
          v20 = (char *)operator new(v29 + 1);
          v60 = v18;
          v61 = v30 | 0x8000000000000000;
          v59 = v20;
        }
        else
        {
          HIBYTE(v61) = v18;
          v20 = (char *)&v59;
        }
        v31 = &v20[v18];
        if (v20 > v17 || v31 <= v17)
        {
          if (v18)
            memmove(v20, v17, v18);
          *v31 = 0;
          if ((v16 & 0x80) != 0)
          {
            v16 = (unint64_t)a2[1];
            if (v16 <= v8)
              goto LABEL_83;
            v33 = (char *)*a2;
            v34 = v8 + 1;
            v35 = v16 - v34;
            if (v16 - v34 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_83;
          }
          else
          {
            v33 = (char *)a2;
            if (v8 >= v16)
              goto LABEL_83;
            v34 = v8 + 1;
            v35 = v16 - v34;
            if (v16 - v34 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_83;
          }
          v36 = (void **)&v33[v34];
          if (v35 > 0x16)
          {
            v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v35 | 7) != 0x17)
              v39 = v35 | 7;
            v40 = v39 + 1;
            v37 = (void **)operator new(v39 + 1);
            v57 = v35;
            v58 = v40 | 0x8000000000000000;
            __p = v37;
            v38 = (void **)((char *)v37 + v35);
            if (v37 > v36)
            {
LABEL_55:
              if (v16 != v34)
                memmove(v37, v36, v35);
              *(_BYTE *)v38 = 0;
              if (v61 >= 0)
                v41 = &v59;
              else
                v41 = v59;
              if (v61 >= 0)
                v42 = HIBYTE(v61);
              else
                v42 = v60;
              if ((rtc::Base64::DecodeFromArrayTemplate<std::vector<unsigned char>>((uint64_t)v41, v42, 21, a1, 0, v13, v14, v15) & 1) != 0)
              {
                if (v58 >= 0)
                  p_p = &__p;
                else
                  p_p = __p;
                if (v58 >= 0)
                  v47 = HIBYTE(v58);
                else
                  v47 = v57;
                if ((rtc::Base64::DecodeFromArrayTemplate<std::vector<unsigned char>>((uint64_t)p_p, v47, 21, a1 + 24, 0, v43, v44, v45) & 1) != 0)
                {
                  v28 = 1;
                  if ((SHIBYTE(v58) & 0x80000000) == 0)
                    goto LABEL_79;
LABEL_78:
                  operator delete(__p);
LABEL_79:
                  if (SHIBYTE(v61) < 0)
                    operator delete(v59);
                  return v28;
                }
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                {
LABEL_77:
                  v28 = 0;
                  if ((SHIBYTE(v58) & 0x80000000) == 0)
                    goto LABEL_79;
                  goto LABEL_78;
                }
              }
              else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
              {
                goto LABEL_77;
              }
              rtc::webrtc_logging_impl::Log("\r\t\n\t", v48, v49, v50, v51, v52, v53, v54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h264_sprop_parameter_sets.cc");
              goto LABEL_77;
            }
          }
          else
          {
            HIBYTE(v58) = v35;
            v37 = &__p;
            v38 = (void **)((char *)&__p + v35);
            if (&__p > v36)
              goto LABEL_55;
          }
          if (v38 <= v36)
            goto LABEL_55;
        }
        __break(1u);
        goto LABEL_83;
      }
    }
    else if (v8 < v16 - 1)
    {
      v17 = (char *)a2;
      if (v16 >= v8)
        v18 = v8;
      else
        v18 = *((unsigned __int8 *)a2 + 23);
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_83;
      goto LABEL_28;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h264_sprop_parameter_sets.cc");
  return 0;
}

void webrtc::video_coding::H264SpsPpsTracker::CopyAndFixBitstream(_QWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  int64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  unsigned int v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int v31;
  BOOL v32;
  _QWORD *v33;
  _QWORD *v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t *v50;
  int v51;
  uint64_t *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int16 *v69;
  _BYTE *v70;
  unsigned int v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::string *v92;
  uint64_t v93;
  uint64_t v96;
  char v97;
  _QWORD **v99;
  _QWORD **v100;
  uint64_t v101;
  __int128 v102;

  if (*(_QWORD *)(a4 + 1936) != 3)
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = a4;
  v11 = a3;
  v12 = (char *)a2;
  v13 = a4 + 296;
  v14 = a1 + 4;
  v15 = a1 + 1;
  v16 = *(_QWORD *)(a4 + 424);
  v99 = a1 + 4;
  v100 = a1 + 1;
  if (v16)
  {
    v96 = a9;
    v97 = 0;
    v17 = 0;
    v18 = a1 + 4;
    v19 = a1 + 1;
    do
    {
      v20 = *(unsigned __int8 *)(v13 + 12 * v17 + 8);
      switch(v20)
      {
        case 5:
          if (*(_BYTE *)(v10 + 165))
          {
            v29 = *(_DWORD *)(v13 + 12 * v17 + 16);
            if (v29 == -1)
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                rtc::webrtc_logging_impl::Log("\r\t", v85, v86, v87, v88, v89, v90, v91, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h264_sps_pps_tracker.cc");
              goto LABEL_90;
            }
            v30 = (_QWORD *)*v15;
            if (!*v15)
              goto LABEL_86;
            v19 = (_QWORD **)v15;
            do
            {
              v31 = *((_DWORD *)v30 + 8);
              v32 = v31 >= v29;
              if (v31 >= v29)
                v33 = v30;
              else
                v33 = v30 + 1;
              if (v32)
                v19 = (_QWORD **)v30;
              v30 = (_QWORD *)*v33;
            }
            while (*v33);
            if (v19 == v15 || v29 < *((_DWORD *)v19 + 8))
            {
LABEL_86:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_89:
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v73, v74, v75, v76, v77, v78, v79, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h264_sps_pps_tracker.cc");
LABEL_90:
              *(_DWORD *)v96 = 2;
              *(_QWORD *)(v96 + 16) = 0;
              *(_QWORD *)(v96 + 24) = 0;
              *(_QWORD *)(v96 + 8) = 0;
              return;
            }
            v34 = (_QWORD *)*v14;
            if (!*v14)
              goto LABEL_88;
            v35 = *((_DWORD *)v19 + 10);
            v18 = (_QWORD **)v14;
            do
            {
              v36 = *((_DWORD *)v34 + 8);
              v37 = v36 >= v35;
              if (v36 >= v35)
                v38 = v34;
              else
                v38 = v34 + 1;
              if (v37)
                v18 = (_QWORD **)v34;
              v34 = (_QWORD *)*v38;
            }
            while (*v38);
            if (v18 == v14 || v35 < *((_DWORD *)v18 + 8))
            {
LABEL_88:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                goto LABEL_89;
              goto LABEL_90;
            }
            *(_WORD *)(v10 + 156) = *((_DWORD *)v18 + 12);
            *(_WORD *)(v10 + 158) = *((_DWORD *)v18 + 13);
            if (v18[7])
              v97 |= v19[7] != 0;
          }
          break;
        case 8:
          v39 = v13 + 12 * v17;
          v41 = *(_DWORD *)(v39 + 12);
          v40 = *(_DWORD *)(v39 + 16);
          v42 = (uint64_t *)*v15;
          v43 = (uint64_t **)v15;
          v44 = (uint64_t **)v15;
          if (*v15)
          {
            while (1)
            {
              while (1)
              {
                v44 = (uint64_t **)v42;
                v45 = *((_DWORD *)v42 + 8);
                if (v40 >= v45)
                  break;
                v42 = *v44;
                v43 = v44;
                if (!*v44)
                  goto LABEL_54;
              }
              if (v45 >= v40)
                break;
              v42 = v44[1];
              if (!v42)
              {
                v43 = v44 + 1;
                goto LABEL_54;
              }
            }
          }
          else
          {
LABEL_54:
            v46 = v10;
            v47 = v13;
            v48 = (uint64_t *)v44;
            v44 = (uint64_t **)operator new(0x40uLL);
            *((_DWORD *)v44 + 8) = v40;
            *((_DWORD *)v44 + 10) = -1;
            v44[6] = 0;
            v44[7] = 0;
            *v44 = 0;
            v44[1] = 0;
            v44[2] = v48;
            *v43 = (uint64_t *)v44;
            v49 = (_QWORD *)**a1;
            v50 = (uint64_t *)v44;
            if (v49)
            {
              *a1 = v49;
              v50 = *v43;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v50);
            a1[2] = (_QWORD *)((char *)a1[2] + 1);
            v13 = v47;
            v10 = v46;
            v14 = v99;
            v15 = v100;
          }
          *((_DWORD *)v44 + 10) = v41;
          break;
        case 7:
          v21 = *(_DWORD *)(v13 + 12 * v17 + 12);
          v22 = (uint64_t *)*v14;
          v23 = (uint64_t **)v14;
          v24 = (uint64_t **)v14;
          if (*v14)
          {
            while (1)
            {
              while (1)
              {
                v24 = (uint64_t **)v22;
                v25 = *((_DWORD *)v22 + 8);
                if (v21 >= v25)
                  break;
                v22 = *v24;
                v23 = v24;
                if (!*v24)
                  goto LABEL_17;
              }
              if (v25 >= v21)
                break;
              v22 = v24[1];
              if (!v22)
              {
                v23 = v24 + 1;
                goto LABEL_17;
              }
            }
          }
          else
          {
LABEL_17:
            v26 = (uint64_t *)v24;
            v24 = (uint64_t **)operator new(0x40uLL);
            *((_DWORD *)v24 + 8) = v21;
            v24[5] = 0;
            v24[6] = (uint64_t *)-1;
            v24[7] = 0;
            *v24 = 0;
            v24[1] = 0;
            v24[2] = v26;
            *v23 = (uint64_t *)v24;
            v27 = (_QWORD *)*a1[3];
            v28 = (uint64_t *)v24;
            if (v27)
            {
              a1[3] = v27;
              v28 = *v23;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[4], v28);
            a1[5] = (_QWORD *)((char *)a1[5] + 1);
            v14 = v99;
            v15 = v100;
          }
          *((_DWORD *)v24 + 12) = *(unsigned __int16 *)(v10 + 156);
          *((_DWORD *)v24 + 13) = *(unsigned __int16 *)(v10 + 158);
          break;
      }
      ++v17;
      v16 = *(_QWORD *)(v10 + 424);
    }
    while (v17 < v16);
    if ((v97 & 1) != 0)
    {
      if (v18 == v14 || v19 == v15)
      {
        v92 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h264_sps_pps_tracker.cc", 120, "!append_sps_pps || (sps != sps_data_.end() && pps != pps_data_.end())", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v93);
        webrtc::video_coding::H264SpsPpsTracker::InsertSpsPpsNalus(v92);
        return;
      }
      v52 = (_QWORD *)((char *)v19[6] + (_QWORD)v18[5] + 8);
      v51 = 1;
    }
    else
    {
      v51 = 0;
      v52 = 0;
    }
    v99 = v18;
    v100 = v19;
    v11 = a3;
    a9 = v96;
    v12 = (char *)a2;
    if (*(_DWORD *)(v10 + 300) == 1)
      goto LABEL_57;
    goto LABEL_67;
  }
  v51 = 0;
  v52 = 0;
  if (*(_DWORD *)(a4 + 300) != 1)
  {
LABEL_67:
    if (v16)
      v55 = (uint64_t *)((char *)v52 + 4);
    else
      v55 = v52;
    v52 = (uint64_t *)((char *)v55 + v11);
    goto LABEL_71;
  }
LABEL_57:
  if (v11 >= 3)
  {
    v53 = (unsigned __int16 *)(v12 + 1);
    do
    {
      v54 = __rev16(*v53);
      v52 = (uint64_t *)((char *)v52 + v54 + 4);
      v53 = (unsigned __int16 *)((char *)v53 + v54 + 2);
    }
    while (v53 < (unsigned __int16 *)&v12[v11 - 1]);
  }
LABEL_71:
  v101 = 0;
  v102 = 0uLL;
  rtc::CopyOnWriteBuffer::EnsureCapacity(&v101, v52);
  if (v51)
  {
    rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v101, v99[7], (size_t)v99[5]);
    rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v101, v100[7], (size_t)v100[6]);
    v56 = *(_QWORD *)(v10 + 424);
    if ((unint64_t)(v56 + 2) > 0xA)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v62, v63, v64, v65, v66, v67, v68, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h264_sps_pps_tracker.cc");
    }
    else
    {
      v57 = *((_DWORD *)v99 + 8);
      v58 = *((_DWORD *)v100 + 8);
      *(_QWORD *)(v10 + 424) = v56 + 1;
      v59 = v13 + 8 + 12 * v56;
      *(_BYTE *)v59 = 7;
      *(_DWORD *)(v59 + 4) = v57;
      *(_DWORD *)(v59 + 8) = -1;
      v60 = *(_QWORD *)(v10 + 424);
      *(_QWORD *)(v10 + 424) = v60 + 1;
      v61 = v13 + 8 + 12 * v60;
      *(_BYTE *)v61 = 8;
      *(_DWORD *)(v61 + 4) = v57;
      *(_DWORD *)(v61 + 8) = v58;
    }
  }
  if (*(_DWORD *)(v10 + 300) != 1)
  {
    if (*(_QWORD *)(v10 + 424))
    rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v101, v12, v11);
    goto LABEL_85;
  }
  if (v11 < 3)
  {
LABEL_85:
    *(_DWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = v101;
    *(_OWORD *)(a9 + 16) = v102;
    return;
  }
  v69 = (unsigned __int16 *)(v12 + 1);
  while (1)
  {
    v71 = *v69;
    v70 = v69 + 1;
    v72 = __rev16(v71);
    if (v70 - v12 + v72 > v11)
      break;
    rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v101, v70, v72);
    v69 = (unsigned __int16 *)&v70[v72];
    if (v69 >= (unsigned __int16 *)&v12[v11 - 1])
      goto LABEL_85;
  }
  *(_DWORD *)a9 = 1;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)(a9 + 24) = 0;
  *(_QWORD *)(a9 + 8) = 0;
  v80 = v101;
  if (v101)
  {
    v81 = (unsigned int *)(v101 + 24);
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      v84 = *(_QWORD *)(v80 + 16);
      *(_QWORD *)(v80 + 16) = 0;
      if (v84)
        MEMORY[0x20BD0ADD4](v84, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v80, 0x1010C40EE34DA14);
    }
  }
}

void webrtc::video_coding::H264SpsPpsTracker::InsertSpsPpsNalus(uint64_t **a1, unint64_t *a2, const void **a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t *v20;
  void *v21;
  uint64_t *v22;
  uint64_t **v23;
  unsigned int v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  size_t v45;
  int v46;
  void *v47;
  uint64_t *v48;
  uint64_t **v49;
  unsigned int v50;
  uint64_t **v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::string *v67;
  _QWORD *v68;
  uint64_t v69;
  void *__p;
  _BYTE *v71;
  unsigned int v72;
  int v73;
  char v74;
  char v75[8];
  uint64_t *v76;
  unsigned int v77;
  char v78;
  uint8x16_t v79;

  v5 = *a2;
  v4 = a2[1];
  if (v4 == *a2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
    goto LABEL_49;
  }
  if ((*(_BYTE *)v5 & 0x1F) != 7)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
LABEL_56:
    rtc::webrtc_logging_impl::Log("\r\t", v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h264_sps_pps_tracker.cc");
    return;
  }
  if (a3[1] == *a3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
LABEL_49:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h264_sps_pps_tracker.cc");
    return;
  }
  if ((*(_BYTE *)*a3 & 0x1F) != 8)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
    goto LABEL_56;
  }
  webrtc::H264::ParseRbsp((webrtc::H264 *)(v5 + 1), ~v5 + v4, (unint64_t *)&__p);
  v12 = __p;
  v13 = v71 - (_BYTE *)__p;
  if (v71 == __p)
    v12 = 0;
  v79.i64[0] = (uint64_t)v12;
  if (((v13 >> 28) & 0x1FFFFFFFFLL) != 0)
  {
LABEL_59:
    v67 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v8, v9, v10, v11, v69);
    std::__tree<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>>>::destroy((uint64_t)v67, v68);
    return;
  }
  v79.i32[2] = 8 * v13;
  v79.i8[12] = 1;
  webrtc::SpsParser::ParseSpsUpToVui(&v79, (uint64_t)v75);
  if (__p)
  {
    v71 = __p;
    operator delete(__p);
  }
  webrtc::H264::ParseRbsp((webrtc::H264 *)((char *)*a3 + 1), (size_t)a3[1] + ~(unint64_t)*a3, (unint64_t *)&v79);
  if (v79.i64[1] == v79.i64[0])
    v18 = 0;
  else
    v18 = v79.i64[0];
  webrtc::PpsParser::ParseInternal(v18, v79.i64[1] - v79.i64[0], v14, v15, v16, v17, (uint64_t)&__p);
  if (v79.i64[0])
  {
    v79.i64[1] = v79.i64[0];
    operator delete((void *)v79.i64[0]);
  }
  if (!v78)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v60, v61, v62, v63, v64, v65, v66, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h264_sps_pps_tracker.cc");
    if (v74)
      return;
    goto LABEL_55;
  }
  if (!v74)
  {
LABEL_55:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
    goto LABEL_56;
  }
  v19 = a2[1] - *a2;
  v20 = v76;
  v21 = (void *)operator new[]();
  memcpy(v21, (const void *)*a2, v19);
  v23 = a1 + 4;
  v22 = a1[4];
  v24 = v77;
  if (v22)
  {
    while (1)
    {
      while (1)
      {
        v25 = (uint64_t **)v22;
        v40 = *((_DWORD *)v22 + 8);
        if (v77 >= v40)
          break;
        v22 = *v25;
        v23 = v25;
        if (!*v25)
          goto LABEL_28;
      }
      if (v40 >= v77)
        break;
      v22 = v25[1];
      if (!v22)
      {
        v23 = v25 + 1;
        goto LABEL_28;
      }
    }
  }
  else
  {
    v25 = a1 + 4;
LABEL_28:
    v41 = (uint64_t *)v25;
    v25 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v25 + 8) = v24;
    v25[5] = 0;
    v25[6] = (uint64_t *)-1;
    v25[7] = 0;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = v41;
    *v23 = (uint64_t *)v25;
    v42 = (uint64_t *)*a1[3];
    v43 = (uint64_t *)v25;
    if (v42)
    {
      a1[3] = v42;
      v43 = *v23;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[4], v43);
    a1[5] = (uint64_t *)((char *)a1[5] + 1);
  }
  v25[5] = (uint64_t *)v19;
  v25[6] = v20;
  v44 = v25[7];
  v25[7] = (uint64_t *)v21;
  if (v44)
    MEMORY[0x20BD0ADD4](v44, 0x1000C8077774924);
  v45 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  v46 = v73;
  v47 = (void *)operator new[]();
  memcpy(v47, *a3, v45);
  v49 = a1 + 1;
  v48 = a1[1];
  v50 = v72;
  if (v48)
  {
    while (1)
    {
      while (1)
      {
        v51 = (uint64_t **)v48;
        v52 = *((_DWORD *)v48 + 8);
        if (v72 >= v52)
          break;
        v48 = *v51;
        v49 = v51;
        if (!*v51)
          goto LABEL_40;
      }
      if (v52 >= v72)
        break;
      v48 = v51[1];
      if (!v48)
      {
        v49 = v51 + 1;
        goto LABEL_40;
      }
    }
  }
  else
  {
    v51 = a1 + 1;
LABEL_40:
    v53 = (uint64_t *)v51;
    v51 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v51 + 8) = v50;
    *((_DWORD *)v51 + 10) = -1;
    v51[6] = 0;
    v51[7] = 0;
    *v51 = 0;
    v51[1] = 0;
    v51[2] = v53;
    *v49 = (uint64_t *)v51;
    v54 = (uint64_t *)**a1;
    v55 = (uint64_t *)v51;
    if (v54)
    {
      *a1 = v54;
      v55 = *v49;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v55);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  *((_DWORD *)v51 + 10) = v46;
  v56 = v51[7];
  v51[6] = (uint64_t *)v45;
  v51[7] = (uint64_t *)v47;
  if (v56)
    MEMORY[0x20BD0ADD4](v56, 0x1000C8077774924);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    if (v78)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v57, v58, v59, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h264_sps_pps_tracker.cc");
      return;
    }
    __break(1u);
    goto LABEL_59;
  }
}

void std::__tree<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>>>::destroy(a1, a2[1]);
    v4 = a2[7];
    a2[7] = 0;
    if (v4)
      MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
    operator delete(a2);
  }
}

void webrtc::H265BitstreamParser::~H265BitstreamParser(webrtc::H265BitstreamParser *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_24C0B4A60;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *((_QWORD *)this + 5);
    v5 = (void *)*((_QWORD *)this + 4);
    if (v4 != v3)
    {
      do
      {
        v6 = *(void **)(v4 - 56);
        if (v6)
        {
          *(_QWORD *)(v4 - 48) = v6;
          operator delete(v6);
        }
        v7 = *(void **)(v4 - 88);
        if (v7)
        {
          *(_QWORD *)(v4 - 80) = v7;
          operator delete(v7);
        }
        v4 -= 168;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v3;
    operator delete(v5);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
}

{
  webrtc::H265BitstreamParser::~H265BitstreamParser(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::H265BitstreamParser::GetSPS(webrtc::H265BitstreamParser *this, webrtc::H265BitstreamParser *a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  webrtc::H265BitstreamParser *v6;
  unsigned int v7;
  webrtc::H265BitstreamParser *v8;
  webrtc::H265BitstreamParser *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 == this)
  {
    this = a2;
    v8 = a2;
  }
  else
  {
    v3 = 0xCF3CF3CF3CF3CF3DLL * ((a2 - this) >> 3);
    do
    {
      v4 = v3 >> 1;
      v5 = (unsigned int *)((char *)this + 168 * (v3 >> 1));
      v7 = *v5;
      v6 = (webrtc::H265BitstreamParser *)(v5 + 42);
      v3 += ~(v3 >> 1);
      if (v7 < a3)
        this = v6;
      else
        v3 = v4;
    }
    while (v3);
    v8 = a2;
    if (this != a2)
      v8 = (webrtc::H265BitstreamParser *)((char *)this + 168 * (*(_DWORD *)this <= a3));
  }
  if (v8 == this)
    v9 = a2;
  else
    v9 = this;
  if (v9 != a2)
    return (uint64_t)v9 + 8;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
  return 0;
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *__dst;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  v6 = __len;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    __dst = 0;
    v24 = 0;
    v25 = 0;
    if ((a2 & 0x8000000000000000) != 0)
      abort();
    v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((uint64_t)&__dst, v11);
    v12 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = v13 + v5;
    v24 = v13 + v5;
    v15 = (char *)__dst;
    if (v13 < 1)
    {
      LODWORD(v17) = 0;
      v16 = (char *)__dst;
    }
    else
    {
      v17 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40)
        memmove(__dst, v12, 8 * v17);
      v16 = &v15[8 * v17];
      if ((v13 & 0x3F) != 0)
      {
        *(_QWORD *)v16 = *(_QWORD *)v16 & ~(0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F)) | *((_QWORD *)v12 + v17) & (0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F));
        LODWORD(v17) = v13 & 0x3F;
      }
      else
      {
        LODWORD(v17) = 0;
      }
      v12 = *(void **)a1;
      v13 = *(_QWORD *)(a1 + 8);
      v15 = (char *)__dst;
      v14 = v24;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14;
    __dst = v12;
    v24 = v13;
    v18 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    v25 = v18;
    if (v12)
      operator delete(v12);
  }
  else
  {
    v16 = (char *)(*(_QWORD *)a1 + 8 * (v4 >> 6));
    v17 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    *(_QWORD *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v19 = v5;
        else
          v19 = (64 - v17);
        *(_QWORD *)v16 |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v19)) & (-1 << v17);
        v16 += 8;
        v5 -= v19;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        memset(v16, 255, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_44:
        *(_QWORD *)&v16[v20] = v21;
      }
    }
    else
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v22 = v5;
        else
          v22 = (64 - v17);
        *(_QWORD *)v16 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v22)) & (-1 << v17));
        v16 += 8;
        v5 -= v22;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        bzero(v16, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_44;
      }
    }
  }
}

void webrtc::H265BitstreamParser::ParseSlice(webrtc::H265BitstreamParser *this, webrtc::H264 *a2, size_t __sz)
{
  unint64_t v3;
  unint64_t v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  unsigned int *v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  _BYTE *v29;
  char *v30;
  char *v31;
  int v32;
  _BYTE *v33;
  _OWORD *v34;
  unint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  unsigned int *v38;
  _DWORD *v39;
  unsigned int v40;
  const unsigned __int8 *v41;
  webrtc::H265PpsParser *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  unsigned int ExponentialGolomb;
  unsigned int v50;
  _DWORD *SPS;
  int v52;
  void *v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int *v86;
  _DWORD *v87;
  unsigned int v88;
  __int32 v89;
  unsigned int v90;
  __int32 v91;
  unsigned int *v92;
  unsigned int *v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  __int128 v114;
  __int128 v115;
  _BYTE *v116;
  char *v117;
  _OWORD *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  __int128 v130;
  char *v131;
  char *v132;
  void *v133;
  void **v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  char *v138;
  void *v139;
  char *v140;
  void *v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  int64_t v145;
  unint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  char *v149;
  char *v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _BYTE *v182;
  void *v183;
  _OWORD *v184;
  void *v185;
  __int128 v186;
  _BYTE *v187;
  void *v188;
  _BYTE *v189;
  void *v190;
  char *v191;
  int64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  int v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  unint64_t v200;
  _DWORD *v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  _DWORD *v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  __int128 v210;
  _DWORD *v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  _DWORD *v217;
  void *v218;
  void *v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  char *v223;
  size_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char *v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  _BYTE *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  char *v244;
  __int128 v245;
  __int128 v246;
  char *v247;
  _OWORD *v248;
  char *v249;
  _OWORD *v250;
  char *v251;
  __int128 v252;
  __int128 v253;
  _OWORD *i;
  __int128 v255;
  __int128 v256;
  void *v257;
  __int128 v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  char *v262;
  int v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  BOOL v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  int v271;
  unsigned int v272;
  __int32 v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  uint64_t v278;
  __int32 v279;
  unsigned int v280;
  __int32 v281;
  int v282;
  int v283;
  int v284;
  uint64_t v285;
  int v286;
  int v287;
  unsigned int v288;
  unsigned int v289;
  char v290;
  unsigned int v291;
  __int32 v292;
  __int32 v293;
  unsigned int v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  uint64_t v312;
  unsigned int v313;
  unsigned int v314;
  unint64_t v315;
  unint64_t v316;
  unsigned int v317;
  unsigned int v318;
  int v319;
  int v320;
  __int32 v321;
  int v322;
  int v323;
  _BYTE *v324;
  int v325;
  int v326;
  int v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  char v335;
  uint64_t v336;
  int v337;
  int v338;
  char v339;
  uint64_t v340;
  int v341;
  int v342;
  int v343;
  uint64_t v344;
  int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned __int8 *v351;
  unsigned int v352;
  uint64_t v353;
  unint64_t v354;
  __int128 *v355;
  uint64_t v356;
  unsigned int v357;
  signed int v358;
  unsigned int v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int *v368;
  uint64_t v369;
  uint64_t v370;
  unsigned int v371;
  uint64_t v372;
  int32x4_t *v373;
  int32x4_t *v374;
  int8x16_t v375;
  int32x4_t v376;
  int32x4_t v377;
  uint64_t v378;
  int32x4_t *v379;
  int32x4_t *v380;
  uint64_t v381;
  int32x4_t *v382;
  int32x4_t *v383;
  uint64_t v384;
  int32x4_t *v385;
  int32x4_t *v386;
  uint64_t v387;
  int32x4_t *v388;
  int32x4_t *v389;
  uint64_t v390;
  int32x4_t *v391;
  int32x4_t *v392;
  uint64_t v393;
  int32x4_t *v394;
  int32x4_t *v395;
  uint64_t v396;
  int32x4_t *v397;
  int32x4_t v398;
  int32x4_t *v399;
  uint64_t v400;
  _DWORD *v401;
  uint64_t v403;
  int32x4_t v404;
  int32x4_t v405;
  int32x4_t *v406;
  uint64_t v407;
  int32x4_t v408;
  int32x4_t v409;
  uint64_t v410;
  _DWORD *v411;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  int32x4_t v416;
  int8x16_t v417;
  int64x2_t v418;
  int8x16_t v419;
  uint64x2_t v420;
  int8x16_t v421;
  int64x2_t v422;
  int32x4_t v423;
  const double *v424;
  int8x16_t v425;
  BOOL v426;
  unsigned int v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  _BYTE *v442;
  int v443;
  uint64_t v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  unsigned int v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unsigned int v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  _BYTE *v471;
  _DWORD *v472;
  unint64_t v473;
  unint64_t v474;
  char *v475;
  char *v476;
  unsigned int v477;
  char *v478;
  char *v479;
  unsigned int v480;
  uint64_t v481;
  char v482;
  char v483;
  _BYTE *v484;
  unint64_t v485;
  _BOOL4 v486;
  char v487;
  const char *v488;
  __int128 *v489;
  void *__p[2];
  __int128 v491;
  void *v492[2];
  uint64_t v493;
  uint8x16_t v494;
  _BYTE __src[1036];
  char v496;
  __int128 __dst[65];
  uint64_t v498;

  v498 = *MEMORY[0x24BDAC8D0];
  LODWORD(v5) = *(unsigned __int8 *)a2;
  v6 = (v5 >> 1) & 0x3F;
  v7 = __src;
  switch(v6)
  {
    case ' ':
      if (__sz >= 2)
      {
        webrtc::H264::ParseRbsp((webrtc::H264 *)((char *)a2 + 2), __sz - 2, (unint64_t *)__dst);
        if (*((_QWORD *)&__dst[0] + 1) == *(_QWORD *)&__dst[0])
          v12 = 0;
        else
          v12 = *(unsigned __int8 **)&__dst[0];
        webrtc::H265VpsParser::ParseInternal(v12, *((_QWORD *)&__dst[0] + 1) - *(_QWORD *)&__dst[0], v8, v9, v10, v11, (uint64_t)__src);
        if (*(_QWORD *)&__dst[0])
        {
          *((_QWORD *)&__dst[0] + 1) = *(_QWORD *)&__dst[0];
          operator delete(*(void **)&__dst[0]);
        }
        v14 = *(_DWORD *)__src;
        __dst[0] = *(_OWORD *)&__src[4];
        __dst[1] = *(_OWORD *)&__src[20];
        if (__src[36])
        {
          v15 = *((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          v17 = v16 - v15;
          if (v16 == v15)
          {
            v19 = (_DWORD *)*((_QWORD *)this + 2);
          }
          else
          {
            v18 = 0xCCCCCCCCCCCCCCCDLL * (v17 >> 3);
            v19 = (_DWORD *)*((_QWORD *)this + 1);
            do
            {
              v20 = v18 >> 1;
              v21 = &v19[10 * (v18 >> 1)];
              v23 = *v21;
              v22 = v21 + 10;
              v18 += ~(v18 >> 1);
              if (v23 < *(_DWORD *)__src)
                v19 = v22;
              else
                v18 = v20;
            }
            while (v18);
          }
          v107 = (unsigned __int128)(((uint64_t)v19 - v15) * (__int128)0x6666666666666667) >> 64;
          v108 = (v107 >> 4) + ((unint64_t)v107 >> 63);
          v34 = (_OWORD *)(v15 + 40 * v108);
          if (v34 != (_OWORD *)v16)
          {
            if (*(_DWORD *)__src < *(_DWORD *)v34)
            {
              memset(__src, 0, 36);
              v109 = *((_QWORD *)this + 3);
              if (v16 < v109)
              {
                v110 = (char *)v34 + 40;
                v111 = v16 - 40;
                if (v16 < 0x28)
                {
                  v113 = v16;
                }
                else
                {
                  v112 = v16 - 40;
                  v113 = v16;
                  do
                  {
                    v114 = *(_OWORD *)v112;
                    v115 = *(_OWORD *)(v112 + 16);
                    *(_QWORD *)(v113 + 32) = *(_QWORD *)(v112 + 32);
                    *(_OWORD *)v113 = v114;
                    *(_OWORD *)(v113 + 16) = v115;
                    v112 += 40;
                    v113 += 40;
                  }
                  while (v112 < v16);
                }
                *((_QWORD *)this + 2) = v113;
                if ((char *)v16 != v110)
                {
                  v237 = 8 * ((uint64_t)(v16 - (_QWORD)v110) >> 3);
                  do
                  {
                    *(_DWORD *)v111 = *(_DWORD *)((char *)v34 + v237 - 40);
                    v238 = *(_OWORD *)((char *)v34 + v237 - 36);
                    v239 = *(_OWORD *)((char *)v34 + v237 - 20);
                    *(_DWORD *)(v111 + 36) = *(_DWORD *)((char *)v34 + v237 - 4);
                    *(_OWORD *)(v111 + 20) = v239;
                    *(_OWORD *)(v111 + 4) = v238;
                    v111 -= 40;
                    v237 -= 40;
                  }
                  while (v237);
                }
                *(_DWORD *)v34 = v14;
                v240 = v15 + 40 * v108;
                *(_OWORD *)(v240 + 4) = 0u;
                *(_OWORD *)(v240 + 20) = 0u;
                *(_DWORD *)(v240 + 36) = 0;
                goto LABEL_267;
              }
LABEL_126:
              v16 = 0xCCCCCCCCCCCCCCCDLL * (v17 >> 3) + 1;
              if (v16 <= 0x666666666666666)
              {
                v144 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v109 - v15) >> 3);
                if (2 * v144 > v16)
                  v16 = 2 * v144;
                v17 = 0x333333333333333;
                if (v144 >= 0x333333333333333)
                  v3 = 0x666666666666666;
                else
                  v3 = v16;
                if (v3)
                {
                  if (v3 > 0x666666666666666)
                    goto LABEL_635;
                  v5 = (unint64_t)operator new(40 * v3);
                }
                else
                {
                  v5 = 0;
                }
                LODWORD(v15) = 40;
                v191 = (char *)(v5 + 40 * v108);
                v108 = v5 + 40 * v3;
                if (v191 != (char *)v108)
                  goto LABEL_258;
                v192 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v191[-v5] >> 3);
                if ((unint64_t)v191 > v5)
                {
                  if (v192 >= -1)
                    v193 = v192 + 1;
                  else
                    v193 = v192 + 2;
                  LODWORD(v16) = 40;
                  v15 = -40 * (v193 >> 1);
                  v108 = (uint64_t)v191;
                  v191 += v15;
                  goto LABEL_258;
                }
                v241 = 0x999999999999999ALL * ((uint64_t)&v191[-v5] >> 3);
                if (v191 == (char *)v5)
                  v241 = 1;
                if (v241 <= 0x666666666666666)
                {
                  v242 = v241 >> 2;
                  v243 = 40 * v241;
                  v244 = (char *)operator new(40 * v241);
                  LODWORD(v15) = 40;
                  v191 = &v244[40 * v242];
                  v108 = (uint64_t)&v244[v243];
                  if (v5)
                    operator delete((void *)v5);
LABEL_258:
                  if (v191)
                  {
                    *(_DWORD *)v191 = v14;
                    v245 = *(_OWORD *)__src;
                    v246 = *(_OWORD *)&__src[16];
                    *((_DWORD *)v191 + 9) = *(_DWORD *)&__src[32];
                    *(_OWORD *)(v191 + 20) = v246;
                    *(_OWORD *)(v191 + 4) = v245;
                    v247 = v191 + 40;
                    v248 = (_OWORD *)*((_QWORD *)this + 1);
                    v249 = v191;
                    if (v248 != v34)
                    {
                      v250 = v34;
                      v251 = v191;
                      do
                      {
                        v249 = v251 - 40;
                        v252 = *(_OWORD *)((char *)v250 - 40);
                        v253 = *(_OWORD *)((char *)v250 - 24);
                        *((_QWORD *)v251 - 1) = *((_QWORD *)v250 - 1);
                        *(_OWORD *)(v251 - 24) = v253;
                        *(_OWORD *)(v251 - 40) = v252;
                        v250 = (_OWORD *)((char *)v250 - 40);
                        v251 -= 40;
                      }
                      while (v250 != v248);
                    }
                    for (i = (_OWORD *)*((_QWORD *)this + 2); v34 != i; v247 += 40)
                    {
                      v255 = *v34;
                      v256 = v34[1];
                      *((_QWORD *)v247 + 4) = *((_QWORD *)v34 + 4);
                      *(_OWORD *)v247 = v255;
                      *((_OWORD *)v247 + 1) = v256;
                      v34 = (_OWORD *)((char *)v34 + 40);
                    }
                    v257 = (void *)*((_QWORD *)this + 1);
                    *((_QWORD *)this + 1) = v249;
                    *((_QWORD *)this + 2) = v247;
                    *((_QWORD *)this + 3) = v108;
                    if (v257)
                      operator delete(v257);
                    v34 = v191;
                    goto LABEL_267;
                  }
                  goto LABEL_556;
                }
LABEL_635:
                std::__throw_bad_array_new_length[abi:sn180100]();
              }
LABEL_634:
              abort();
            }
LABEL_267:
            *((_DWORD *)v34 + 1) = v14;
            v258 = __dst[0];
            *(_OWORD *)((char *)v34 + 24) = __dst[1];
            *(_OWORD *)((char *)v34 + 8) = v258;
            return;
          }
          memset(__src, 0, 36);
          v109 = *((_QWORD *)this + 3);
          if (v16 >= v109)
            goto LABEL_126;
          if (v15)
          {
            *(_DWORD *)v16 = v14;
            v142 = v15 + 40 * v108;
            *(_DWORD *)(v142 + 36) = 0;
            *(_OWORD *)(v142 + 20) = 0uLL;
            *(_OWORD *)(v142 + 4) = 0uLL;
            *((_QWORD *)this + 2) = v16 + 40;
            v34 = (_OWORD *)v16;
            goto LABEL_267;
          }
LABEL_556:
          __break(1u);
          goto LABEL_557;
        }
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        return;
      goto LABEL_81;
    case '!':
      if (__sz < 2)
        goto LABEL_51;
      webrtc::H264::ParseRbsp((webrtc::H264 *)((char *)a2 + 2), __sz - 2, (unint64_t *)__dst);
      if (*((_QWORD *)&__dst[0] + 1) == *(_QWORD *)&__dst[0])
        v28 = 0;
      else
        v28 = *(unsigned __int8 **)&__dst[0];
      webrtc::H265SpsParser::ParseSpsInternal(v28, *((_QWORD *)&__dst[0] + 1) - *(_QWORD *)&__dst[0], v24, v25, v26, v27, __src);
      if (*(_QWORD *)&__dst[0])
      {
        *((_QWORD *)&__dst[0] + 1) = *(_QWORD *)&__dst[0];
        operator delete(*(void **)&__dst[0]);
      }
      if (!__src[160])
      {
LABEL_51:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          return;
        goto LABEL_81;
      }
      __dst[1] = *(_OWORD *)&__src[16];
      __dst[2] = *(_OWORD *)&__src[32];
      __dst[3] = *(_OWORD *)&__src[48];
      LODWORD(__dst[4]) = *(_DWORD *)&__src[64];
      __dst[0] = *(_OWORD *)__src;
      v30 = *(char **)&__src[72];
      v29 = *(_BYTE **)&__src[80];
      memset(&__src[72], 0, 24);
      v3 = *(_QWORD *)&__src[104];
      v31 = *(char **)&__src[112];
      memset(&__src[104], 0, 24);
      v32 = *(_DWORD *)&__src[140];
      v494.i32[2] = *(_DWORD *)&__src[136];
      v494.i64[0] = *(_QWORD *)&__src[128];
      *(_OWORD *)v492 = *(_OWORD *)&__src[144];
      v33 = (_BYTE *)*((_QWORD *)this + 4);
      v34 = (_OWORD *)*((_QWORD *)this + 5);
      v15 = (char *)v34 - v33;
      v481 = *(_QWORD *)&__src[96];
      v484 = v29;
      if (v34 == (_OWORD *)v33)
      {
        v36 = (_DWORD *)*((_QWORD *)this + 5);
      }
      else
      {
        v35 = 0xCF3CF3CF3CF3CF3DLL * (v15 >> 3);
        v36 = (_DWORD *)*((_QWORD *)this + 4);
        do
        {
          v37 = v35 >> 1;
          v38 = &v36[42 * (v35 >> 1)];
          v40 = *v38;
          v39 = v38 + 42;
          v35 += ~(v35 >> 1);
          if (v40 < *(_DWORD *)&__src[140])
            v36 = v39;
          else
            v35 = v37;
        }
        while (v35);
      }
      v108 = (char *)v36 - v33;
      v17 = 0xCF3CF3CF3CF3CF3DLL * (((char *)v36 - v33) >> 3);
      if (v36 == (_DWORD *)v34)
      {
        memset(__src, 0, 72);
        *(_OWORD *)__p = 0u;
        v491 = 0u;
        v16 = *((_QWORD *)this + 6);
        if ((unint64_t)v34 < v16)
        {
          if (!v33)
            goto LABEL_556;
          *(_DWORD *)v34 = *(_DWORD *)&__src[140];
          v143 = &v33[8 * (((char *)v36 - v33) >> 3)];
          *((_DWORD *)v143 + 18) = 0;
          *(_OWORD *)(v143 + 56) = 0uLL;
          *(_OWORD *)(v143 + 40) = 0uLL;
          *(_OWORD *)(v143 + 24) = 0uLL;
          *(_OWORD *)(v143 + 8) = 0uLL;
          *((_OWORD *)v143 + 5) = 0uLL;
          *((_OWORD *)v143 + 6) = 0uLL;
          *((_OWORD *)v143 + 7) = 0uLL;
          *((_OWORD *)v143 + 8) = 0uLL;
          *((_OWORD *)v143 + 9) = 0uLL;
          *((_QWORD *)v143 + 20) = 0;
          *((_QWORD *)this + 5) = (char *)v34 + 168;
          v36 = v34;
          goto LABEL_222;
        }
        goto LABEL_135;
      }
      if (*(_DWORD *)&__src[140] < *v36)
      {
        memset(__src, 0, 72);
        *(_OWORD *)__p = 0u;
        v491 = 0u;
        v16 = *((_QWORD *)this + 6);
        if ((unint64_t)v34 < v16)
        {
          v470 = 0xCF3CF3CF3CF3CF3DLL * (((char *)v36 - v33) >> 3);
          v471 = v33;
          v116 = v36 + 42;
          v117 = (char *)v34 - 168;
          v473 = v3;
          v475 = v30;
          v478 = v31;
          v118 = v34;
          if ((unint64_t)v34 >= 0xA8)
          {
            do
            {
              *(_DWORD *)v118 = *(_DWORD *)v117;
              *(_OWORD *)((char *)v118 + 8) = *(_OWORD *)(v117 + 8);
              v119 = *(_OWORD *)(v117 + 24);
              v120 = *(_OWORD *)(v117 + 40);
              v121 = *(_OWORD *)(v117 + 56);
              *((_DWORD *)v118 + 18) = *((_DWORD *)v117 + 18);
              *(_OWORD *)((char *)v118 + 56) = v121;
              *(_OWORD *)((char *)v118 + 40) = v120;
              *(_OWORD *)((char *)v118 + 24) = v119;
              *((_QWORD *)v118 + 11) = 0;
              *((_QWORD *)v118 + 12) = 0;
              *((_QWORD *)v118 + 10) = 0;
              v118[5] = *((_OWORD *)v117 + 5);
              *((_QWORD *)v118 + 12) = *((_QWORD *)v117 + 12);
              *((_QWORD *)v117 + 11) = 0;
              *((_QWORD *)v117 + 12) = 0;
              *((_QWORD *)v117 + 10) = 0;
              v122 = *((_QWORD *)v117 + 13);
              *((_QWORD *)v118 + 15) = 0;
              *((_QWORD *)v118 + 16) = 0;
              *((_QWORD *)v118 + 13) = v122;
              *((_QWORD *)v118 + 14) = 0;
              v118[7] = *((_OWORD *)v117 + 7);
              *((_QWORD *)v118 + 16) = *((_QWORD *)v117 + 16);
              *((_QWORD *)v117 + 14) = 0;
              *((_QWORD *)v117 + 15) = 0;
              *((_QWORD *)v117 + 16) = 0;
              v123 = *(_OWORD *)(v117 + 136);
              *(_OWORD *)((char *)v118 + 152) = *(_OWORD *)(v117 + 152);
              *(_OWORD *)((char *)v118 + 136) = v123;
              v118 = (_OWORD *)((char *)v118 + 168);
              v117 += 168;
            }
            while (v117 < (char *)v34);
          }
          *((_QWORD *)this + 5) = v118;
          if (v34 != (_OWORD *)v116)
          {
            v124 = 0;
            v125 = 0xCF3CF3CF3CF3CF3DLL * (((char *)v34 - v116) >> 3);
            v126 = &v33[168 * v125 + 8 * (((char *)v36 - v33) >> 3)];
            v127 = -168 * v125;
            do
            {
              v131 = &v126[v124];
              v132 = (char *)v34 + v124;
              v134 = (void **)((char *)v34 + v124 - 88);
              v133 = *v134;
              *((_DWORD *)v134 - 20) = *(_DWORD *)&v126[v124 - 168];
              *(_OWORD *)(v134 - 9) = *(_OWORD *)&v126[v124 - 160];
              v135 = *(_OWORD *)&v126[v124 - 144];
              v136 = *(_OWORD *)&v126[v124 - 128];
              v137 = *(_OWORD *)&v126[v124 - 112];
              *((_DWORD *)v134 - 2) = *(_DWORD *)&v126[v124 - 96];
              *(_OWORD *)(v134 - 3) = v137;
              *(_OWORD *)(v134 - 5) = v136;
              *(_OWORD *)(v134 - 7) = v135;
              if (v133)
              {
                *((_QWORD *)v132 - 10) = v133;
                operator delete(v133);
                *v134 = 0;
                *(_QWORD *)((char *)v34 + v124 - 80) = 0;
                *(_QWORD *)((char *)v34 + v124 - 72) = 0;
              }
              v138 = v131 - 88;
              *(_OWORD *)v134 = *(_OWORD *)(v131 - 88);
              *((_QWORD *)v132 - 9) = *((_QWORD *)v131 - 9);
              *(_QWORD *)v138 = 0;
              *((_QWORD *)v138 + 1) = 0;
              *((_QWORD *)v138 + 2) = 0;
              v141 = (void *)*((_QWORD *)v132 - 7);
              v140 = v132 - 56;
              v139 = v141;
              *((_QWORD *)v140 - 1) = *((_QWORD *)v131 - 8);
              if (v141)
              {
                *(_QWORD *)((char *)v34 + v124 - 48) = v139;
                operator delete(v139);
                *(_QWORD *)v140 = 0;
                *((_QWORD *)v140 + 1) = 0;
                *((_QWORD *)v140 + 2) = 0;
              }
              v128 = &v126[v124];
              *(_OWORD *)v140 = *(_OWORD *)&v126[v124 - 56];
              v129 = (char *)v34 + v124;
              *((_QWORD *)v129 - 5) = *(_QWORD *)&v126[v124 - 40];
              *((_QWORD *)v128 - 7) = 0;
              *((_QWORD *)v128 - 6) = 0;
              *((_QWORD *)v128 - 5) = 0;
              v130 = *(_OWORD *)&v126[v124 - 16];
              *((_OWORD *)v129 - 2) = *(_OWORD *)&v126[v124 - 32];
              *((_OWORD *)v129 - 1) = v130;
              v124 -= 168;
            }
            while (v127 != v124);
          }
          *v36 = v32;
          v181 = v470;
          v182 = &v471[168 * v470];
          v185 = (void *)*((_QWORD *)v182 + 10);
          v184 = v182 + 80;
          v183 = v185;
          v186 = 0uLL;
          *(_OWORD *)((char *)v184 - 72) = 0u;
          *(_OWORD *)((char *)v184 - 56) = 0u;
          *(_OWORD *)((char *)v184 - 40) = 0u;
          *(_OWORD *)((char *)v184 - 24) = 0u;
          *((_DWORD *)v184 - 2) = 0;
          if (v185)
          {
            *(_QWORD *)&v471[168 * v470 + 88] = v183;
            operator delete(v183);
            v186 = 0uLL;
            v181 = v470;
          }
          v187 = &v471[168 * v181];
          v190 = (void *)*((_QWORD *)v187 + 14);
          v189 = v187 + 112;
          v188 = v190;
          *v184 = v186;
          v184[1] = v186;
          v3 = v473;
          v30 = v475;
          v31 = v478;
          if (v190)
          {
            *(_QWORD *)&v471[168 * v181 + 120] = v188;
            operator delete(v188);
          }
          *((_QWORD *)v189 + 6) = 0;
          *((_OWORD *)v189 + 1) = 0u;
          *((_OWORD *)v189 + 2) = 0u;
          *(_OWORD *)v189 = 0u;
          goto LABEL_222;
        }
LABEL_135:
        v479 = v31;
        v145 = 0xCF3CF3CF3CF3CF3DLL * (((char *)v36 - v33) >> 3);
        v146 = 0xCF3CF3CF3CF3CF3DLL * (v15 >> 3) + 1;
        if (v146 > 0x186186186186186)
          goto LABEL_634;
        v472 = v33;
        v474 = v3;
        v16 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v16 - (_QWORD)v33) >> 3);
        if (2 * v16 > v146)
          v146 = 2 * v16;
        v17 = 0xC30C30C30C30C3;
        if (v16 >= 0xC30C30C30C30C3)
          v5 = 0x186186186186186;
        else
          v5 = v146;
        v476 = v30;
        if (v5)
        {
          if (v5 > 0x186186186186186)
            goto LABEL_635;
          v34 = operator new(168 * v5);
        }
        else
        {
          v34 = 0;
        }
        LODWORD(v15) = 168;
        v3 = (unint64_t)v34 + 168 * v145;
        if (v145 == v5)
        {
          if (v108 < 1)
          {
            v259 = 2 * v145;
            if (v36 == v472)
              v259 = 1;
            if (v259 > 0x186186186186186)
              goto LABEL_635;
            v260 = v259 >> 2;
            v261 = 168 * v259;
            v262 = (char *)operator new(168 * v259);
            v3 = (unint64_t)&v262[168 * v260];
            v195 = &v262[v261];
            if (v34)
              operator delete(v34);
LABEL_205:
            v31 = v479;
            *(_DWORD *)v3 = v32;
            *(_OWORD *)(v3 + 8) = *(_OWORD *)__src;
            v196 = *(_DWORD *)&__src[64];
            v198 = *(_OWORD *)&__src[32];
            v197 = *(_OWORD *)&__src[48];
            *(_OWORD *)(v3 + 24) = *(_OWORD *)&__src[16];
            *(_OWORD *)(v3 + 40) = v198;
            *(_DWORD *)(v3 + 72) = v196;
            *(_OWORD *)(v3 + 56) = v197;
            *(_OWORD *)(v3 + 80) = 0u;
            *(_OWORD *)(v3 + 96) = 0u;
            *(_OWORD *)(v3 + 112) = 0u;
            *(_QWORD *)(v3 + 128) = 0;
            v199 = *(_OWORD *)__p;
            *(_OWORD *)(v3 + 152) = v491;
            *(_OWORD *)(v3 + 136) = v199;
            v200 = v3 + 168;
            v201 = (_DWORD *)*((_QWORD *)this + 4);
            v202 = v3;
            if (v201 != v36)
            {
              v203 = 0;
              do
              {
                v204 = v3 + v203 * 4;
                v205 = &v36[v203];
                *(_DWORD *)(v204 - 168) = v36[v203 - 42];
                *(_OWORD *)(v204 - 160) = *(_OWORD *)&v36[v203 - 40];
                v206 = *(_OWORD *)&v36[v203 - 36];
                v207 = *(_OWORD *)&v36[v203 - 32];
                v208 = *(_OWORD *)&v36[v203 - 28];
                *(_DWORD *)(v204 - 96) = v36[v203 - 24];
                *(_OWORD *)(v204 - 128) = v207;
                *(_OWORD *)(v204 - 112) = v208;
                *(_OWORD *)(v204 - 144) = v206;
                *(_QWORD *)(v204 - 80) = 0;
                *(_QWORD *)(v204 - 72) = 0;
                *(_QWORD *)(v204 - 88) = 0;
                *(_OWORD *)(v204 - 88) = *(_OWORD *)&v36[v203 - 22];
                *(_QWORD *)(v204 - 72) = *(_QWORD *)&v36[v203 - 18];
                *((_QWORD *)v205 - 10) = 0;
                *((_QWORD *)v205 - 9) = 0;
                v209 = *(_QWORD *)&v36[v203 - 16];
                *((_QWORD *)v205 - 11) = 0;
                *(_QWORD *)(v204 - 48) = 0;
                *(_QWORD *)(v204 - 40) = 0;
                *(_QWORD *)(v204 - 64) = v209;
                *(_QWORD *)(v204 - 56) = 0;
                *(_OWORD *)(v204 - 56) = *(_OWORD *)&v36[v203 - 14];
                *(_QWORD *)(v204 - 40) = *(_QWORD *)&v36[v203 - 10];
                *((_QWORD *)v205 - 7) = 0;
                *((_QWORD *)v205 - 6) = 0;
                *((_QWORD *)v205 - 5) = 0;
                v210 = *(_OWORD *)&v36[v203 - 4];
                *(_OWORD *)(v204 - 32) = *(_OWORD *)&v36[v203 - 8];
                *(_OWORD *)(v204 - 16) = v210;
                v203 -= 42;
              }
              while (&v36[v203] != v201);
              v202 = v3 + v203 * 4;
            }
            v211 = (_DWORD *)*((_QWORD *)this + 5);
            if (v211 != v36)
            {
              do
              {
                *(_DWORD *)v200 = *v36;
                *(_OWORD *)(v200 + 8) = *(_OWORD *)(v36 + 2);
                v212 = *(_OWORD *)(v36 + 6);
                v213 = *(_OWORD *)(v36 + 10);
                v214 = *(_OWORD *)(v36 + 14);
                *(_DWORD *)(v200 + 72) = v36[18];
                *(_OWORD *)(v200 + 56) = v214;
                *(_OWORD *)(v200 + 40) = v213;
                *(_OWORD *)(v200 + 24) = v212;
                *(_QWORD *)(v200 + 88) = 0;
                *(_QWORD *)(v200 + 96) = 0;
                *(_QWORD *)(v200 + 80) = 0;
                *(_OWORD *)(v200 + 80) = *((_OWORD *)v36 + 5);
                *(_QWORD *)(v200 + 96) = *((_QWORD *)v36 + 12);
                *((_QWORD *)v36 + 11) = 0;
                *((_QWORD *)v36 + 12) = 0;
                *((_QWORD *)v36 + 10) = 0;
                v215 = *((_QWORD *)v36 + 13);
                *(_QWORD *)(v200 + 120) = 0;
                *(_QWORD *)(v200 + 128) = 0;
                *(_QWORD *)(v200 + 104) = v215;
                *(_QWORD *)(v200 + 112) = 0;
                *(_OWORD *)(v200 + 112) = *((_OWORD *)v36 + 7);
                *(_QWORD *)(v200 + 128) = *((_QWORD *)v36 + 16);
                *((_QWORD *)v36 + 14) = 0;
                *((_QWORD *)v36 + 15) = 0;
                *((_QWORD *)v36 + 16) = 0;
                v216 = *(_OWORD *)(v36 + 34);
                *(_OWORD *)(v200 + 152) = *(_OWORD *)(v36 + 38);
                *(_OWORD *)(v200 + 136) = v216;
                v200 += 168;
                v36 += 42;
              }
              while (v36 != v211);
              v36 = (_DWORD *)*((_QWORD *)this + 5);
            }
            v217 = (_DWORD *)*((_QWORD *)this + 4);
            *((_QWORD *)this + 4) = v202;
            *((_QWORD *)this + 5) = v200;
            *((_QWORD *)this + 6) = v195;
            while (v36 != v217)
            {
              v218 = (void *)*((_QWORD *)v36 - 7);
              if (v218)
              {
                *((_QWORD *)v36 - 6) = v218;
                operator delete(v218);
              }
              v219 = (void *)*((_QWORD *)v36 - 11);
              if (v219)
              {
                *((_QWORD *)v36 - 10) = v219;
                operator delete(v219);
              }
              v36 -= 42;
            }
            if (v217)
              operator delete(v217);
            v36 = (_DWORD *)v3;
            v3 = v474;
            v30 = v476;
            goto LABEL_222;
          }
          v194 = v145 + 2;
          if (v145 >= -1)
            v194 = v145 + 1;
          v17 = 168;
          v16 = -168 * (v194 >> 1);
          v3 += v16;
        }
        if (!v3)
          goto LABEL_556;
        v195 = (char *)v34 + 168 * v5;
        goto LABEL_205;
      }
LABEL_222:
      v220 = __dst[1];
      v221 = __dst[2];
      v222 = __dst[3];
      v223 = (char *)*((_QWORD *)v36 + 10);
      v36[18] = __dst[4];
      *(_OWORD *)(v36 + 2) = __dst[0];
      *(_OWORD *)(v36 + 14) = v222;
      *(_OWORD *)(v36 + 10) = v221;
      *(_OWORD *)(v36 + 6) = v220;
      v224 = v484 - v30;
      v225 = 0x2F71AAFF02F71ABLL * ((v484 - v30) >> 2);
      v226 = *((_QWORD *)v36 + 12);
      if (0x2F71AAFF02F71ABLL * ((v226 - (uint64_t)v223) >> 2) >= v225)
      {
        v234 = (_BYTE *)*((_QWORD *)v36 + 11);
        if (0x2F71AAFF02F71ABLL * ((v234 - v223) >> 2) >= v225)
        {
          v233 = v481;
          if (v484 != v30)
            memmove(v223, v30, v484 - v30);
        }
        else
        {
          v235 = v31;
          v236 = &v30[4 * ((v234 - v223) >> 2)];
          v233 = v481;
          if (v234 != v223)
          {
            memmove(v223, v30, v234 - v223);
            v223 = (char *)*((_QWORD *)v36 + 11);
          }
          v224 = v484 - v236;
          if (v484 != v236)
            memmove(v223, v236, v484 - v236);
          v31 = v235;
        }
      }
      else
      {
        if (v223)
        {
          *((_QWORD *)v36 + 11) = v223;
          operator delete(v223);
          v226 = 0;
          *((_QWORD *)v36 + 10) = 0;
          *((_QWORD *)v36 + 11) = 0;
          *((_QWORD *)v36 + 12) = 0;
        }
        if (v225 > 0x3F42395403F423)
          goto LABEL_634;
        v227 = 0x2F71AAFF02F71ABLL * (v226 >> 2);
        v228 = 2 * v227;
        if (2 * v227 <= v225)
          v228 = 0x2F71AAFF02F71ABLL * ((v484 - v30) >> 2);
        v229 = v227 >= 0x1FA11CAA01FA11 ? 0x3F42395403F423 : v228;
        if (v229 > 0x3F42395403F423)
          goto LABEL_634;
        v230 = v31;
        v231 = 1036 * v229;
        v232 = (char *)operator new(1036 * v229);
        v223 = v232;
        *((_QWORD *)v36 + 10) = v232;
        *((_QWORD *)v36 + 11) = v232;
        *((_QWORD *)v36 + 12) = &v232[v231];
        if (v484 != v30)
          memcpy(v232, v30, v224);
        v31 = v230;
        v233 = v481;
      }
      *((_QWORD *)v36 + 11) = &v223[v224];
      *((_QWORD *)v36 + 13) = v233;
      std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>((_QWORD *)v36 + 14, (char *)v3, v31, (uint64_t)&v31[-v3] >> 2);
      *((_QWORD *)v36 + 17) = v494.i64[0];
      v36[36] = v494.i32[2];
      v36[37] = v32;
      *(_OWORD *)(v36 + 38) = *(_OWORD *)v492;
      if (v3)
        operator delete((void *)v3);
      if (v30)
        operator delete(v30);
      return;
    case '"':
      __src[0] = 0;
      __src[36] = 0;
      v41 = (const unsigned __int8 *)(__sz - 2);
      if (__sz < 2)
        goto LABEL_80;
      v42 = (webrtc::H264 *)((char *)a2 + 2);
      webrtc::H264::ParseRbsp((webrtc::H264 *)((char *)a2 + 2), __sz - 2, (unint64_t *)__p);
      v47 = __p[0];
      v48 = (char *)__p[1] - (char *)__p[0];
      if (__p[1] == __p[0])
        v47 = 0;
      v492[0] = v47;
      if (((v48 >> 28) & 0x1FFFFFFFFLL) != 0)
        goto LABEL_633;
      LODWORD(v492[1]) = 8 * v48;
      BYTE4(v492[1]) = 1;
      ExponentialGolomb = webrtc::BitstreamReader::ReadExponentialGolomb((uint8x16_t *)v492);
      BYTE4(v492[1]) = 1;
      if (((uint64_t)v492[1] & 0x80000000) != 0 || ExponentialGolomb >= 0x40)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          goto LABEL_68;
        *(_QWORD *)&__dst[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc"
                               "/common_video/h265/h265_bitstream_parser.cc";
        *((_QWORD *)&__dst[0] + 1) = 3690;
        *(_QWORD *)&__dst[1] = &v487;
        v488 = "Error in stream: invalid value, expected pps_id to be";
        v489 = __dst;
        v494.i64[0] = (uint64_t)" in range [";
        v494.i64[1] = (uint64_t)&v488;
      }
      else
      {
        v50 = webrtc::BitstreamReader::ReadExponentialGolomb((uint8x16_t *)v492);
        BYTE4(v492[1]) = 1;
        if (((uint64_t)v492[1] & 0x80000000) == 0 && v50 < 0x10)
        {
          SPS = (_DWORD *)webrtc::H265BitstreamParser::GetSPS(*((webrtc::H265BitstreamParser **)this + 4), *((webrtc::H265BitstreamParser **)this + 5), v50);
          webrtc::H265PpsParser::ParsePps(v42, v41, SPS, (uint64_t)__dst);
          *(_OWORD *)__src = __dst[0];
          *(_OWORD *)&__src[16] = __dst[1];
          *(_QWORD *)&__src[29] = *(_QWORD *)((char *)&__dst[1] + 13);
          v52 = 1;
          goto LABEL_69;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        {
LABEL_68:
          v52 = 0;
LABEL_69:
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (!v52)
            return;
          if (__src[36])
          {
            v81 = *((_QWORD *)this + 7);
            v82 = *((_QWORD *)this + 8);
            v83 = (unint64_t *)((char *)this + 56);
            if (v82 == v81)
            {
              v81 = v82;
            }
            else
            {
              v84 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v82 - v81) >> 3);
              do
              {
                v85 = v84 >> 1;
                v86 = (unsigned int *)(v81 + 40 * (v84 >> 1));
                v88 = *v86;
                v87 = v86 + 10;
                v84 += ~(v84 >> 1);
                if (v88 < *(_DWORD *)&__src[24])
                  v81 = (unint64_t)v87;
                else
                  v84 = v85;
              }
              while (v84);
            }
            if (v81 == v82 || *(_DWORD *)&__src[24] < *(_DWORD *)v81)
            {
              memset(__dst, 0, 36);
              v81 = std::vector<std::pair<unsigned int,webrtc::H265PpsParser::PpsState>>::emplace<unsigned int const&,webrtc::H265PpsParser::PpsState>(v83, v81, (int *)&__src[24], __dst);
            }
            *(_OWORD *)(v81 + 4) = *(_OWORD *)__src;
            *(_OWORD *)(v81 + 20) = *(_OWORD *)&__src[16];
            *(_DWORD *)(v81 + 36) = *(_DWORD *)&__src[32];
            return;
          }
LABEL_80:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
            return;
LABEL_81:
          rtc::webrtc_logging_impl::Log("\r\t", v63, v64, v65, v66, v67, v68, v69, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
          return;
        }
        *(_QWORD *)&__dst[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc"
                               "/common_video/h265/h265_bitstream_parser.cc";
        *((_QWORD *)&__dst[0] + 1) = 3714;
        *(_QWORD *)&__dst[1] = &v487;
        v488 = "Error in stream: invalid value, expected sps_id to be";
        v489 = __dst;
        v494.i64[0] = (uint64_t)" in range [";
        v494.i64[1] = (uint64_t)&v488;
      }
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v73, v74, v75, v76, v77, v78, v79, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
      goto LABEL_68;
    case '#':
    case '\'':
    case '(':
    case '0':
    case '1':
      return;
    default:
      if (*((_BYTE *)this + 84))
        *((_BYTE *)this + 84) = 0;
      if (*((_BYTE *)this + 92))
        *((_BYTE *)this + 92) = 0;
      webrtc::H264::ParseRbsp(a2, __sz, (unint64_t *)__p);
      v53 = __p[0];
      v54 = (char *)__p[1] - (char *)__p[0];
      if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)2)
      {
        v55 = 1;
        if (!__p[0])
        {
LABEL_46:
          if (v55 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v56, v57, v58, v59, v60, v61, v62, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
          return;
        }
LABEL_45:
        __p[1] = v53;
        operator delete(v53);
        goto LABEL_46;
      }
      if (__p[1] == __p[0])
        v70 = 0;
      else
        v70 = (char *)__p[0];
      v494.i64[0] = (uint64_t)v70;
      if (((v54 >> 28) & 0x1FFFFFFFFLL) != 0)
      {
LABEL_633:
        rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v43, v44, v45, v46, v469);
        goto LABEL_634;
      }
      v71 = 8 * v54;
      if (v71 >= 0x10)
      {
        v80 = &v70[(v71 >> 3) - ((v71 - 9) >> 3)];
        v494.i64[0] = (uint64_t)v80;
        v494.i8[12] = 0;
        v494.i32[2] = v71 - 17;
        if (v71 == 16)
        {
          v72 = 1;
          if ((v5 & 0x70) != 0x20)
            goto LABEL_87;
        }
        else
        {
          v72 = *v80 >= 0;
          if ((v5 & 0x70) != 0x20)
          {
LABEL_87:
            v90 = webrtc::BitstreamReader::ReadExponentialGolomb(&v494);
            LODWORD(v5) = v90;
            v494.i8[12] = 1;
            v91 = v494.i32[2];
            if (v494.i32[2] < 0 || v90 >= 0x40)
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                goto LABEL_307;
              goto LABEL_97;
            }
            v93 = (unsigned int *)*((_QWORD *)this + 7);
            v92 = (unsigned int *)*((_QWORD *)this + 8);
            if (v92 == v93)
            {
              v93 = (unsigned int *)*((_QWORD *)this + 8);
            }
            else
            {
              v94 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v92 - (char *)v93) >> 3);
              do
              {
                v95 = v94 >> 1;
                v96 = &v93[10 * (v94 >> 1)];
                v98 = *v96;
                v97 = v96 + 10;
                v94 += ~(v94 >> 1);
                if (v98 < v90)
                  v93 = v97;
                else
                  v94 = v95;
              }
              while (v94);
            }
            if (v92 == v93)
              v147 = (unsigned int *)*((_QWORD *)this + 8);
            else
              v147 = &v93[10 * (*v93 <= v90)];
            if (v147 == v93)
              v3 = *((_QWORD *)this + 8);
            else
              v3 = (unint64_t)v93;
            if (v92 == (unsigned int *)v3)
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v156, v157, v158, v159, v160, v161, v162, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
              v55 = 1;
              v494.i8[12] = 1;
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                goto LABEL_308;
            }
            else
            {
              v148 = *(_DWORD *)(v3 + 32);
              v150 = (char *)*((_QWORD *)this + 4);
              v149 = (char *)*((_QWORD *)this + 5);
              if (v149 == v150)
              {
                v150 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v151 = 0xCF3CF3CF3CF3CF3DLL * ((v149 - v150) >> 3);
                do
                {
                  v152 = v151 >> 1;
                  v153 = &v150[168 * (v151 >> 1)];
                  v155 = *(_DWORD *)v153;
                  v154 = v153 + 168;
                  v151 += ~(v151 >> 1);
                  if (v155 < v148)
                    v150 = v154;
                  else
                    v151 = v152;
                }
                while (v151);
              }
              if (v149 == v150)
                v170 = (char *)*((_QWORD *)this + 5);
              else
                v170 = &v150[168 * (*(_DWORD *)v150 <= v148)];
              if (v170 == v150)
                v7 = (char *)*((_QWORD *)this + 5);
              else
                v7 = v150;
              if (v149 == v7)
              {
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v174, v175, v176, v177, v178, v179, v180, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
                v55 = 1;
                v494.i8[12] = 1;
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                  goto LABEL_308;
              }
              else
              {
                if (!v72)
                {
LABEL_292:
                  if (*(_DWORD *)(v3 + 8))
                  {
                    v277 = 0;
                    v278 = v494.i64[0];
                    do
                    {
                      while (1)
                      {
                        v279 = v91 - 1;
                        if (v91 >= 1)
                          break;
                        v91 = -1;
                        v494.i32[2] = -1;
                        if (++v277 >= *(_DWORD *)(v3 + 8))
                          goto LABEL_297;
                      }
                      v278 += (int)(((v91 + 7) >> 3) - ((v91 + 6) >> 3));
                      v494.i64[0] = v278;
                      --v91;
                      v494.i32[2] = v279;
                      ++v277;
                    }
                    while (v277 < *(_DWORD *)(v3 + 8));
LABEL_297:
                    v494.i8[12] = 0;
                  }
                  v280 = webrtc::BitstreamReader::ReadExponentialGolomb(&v494);
                  LODWORD(v108) = v280;
                  v494.i8[12] = 1;
                  v281 = v494.i32[2];
                  if ((v494.i32[2] & 0x80000000) == 0 && v280 < 3)
                  {
                    if (*(_BYTE *)(v3 + 6))
                    {
                      v494.i8[12] = 0;
                      if (v494.i32[2])
                      {
                        v281 = v494.i32[2] - 1;
                        v494.i64[0] += (int)(((v494.i32[2] + 7) >> 3)
                                           - ((v494.i32[2] + 6) >> 3));
                      }
                      else
                      {
                        v281 = -1;
                      }
                      v494.i32[2] = v281;
                    }
                    if (*((_DWORD *)v7 + 4))
                    {
                      v494.i8[12] = 0;
                      if (v281 >= 2)
                      {
                        v494.i64[0] += (int)(((v281 + 7) >> 3) - ((v281 + 5) >> 3));
                        v281 -= 2;
                      }
                      else
                      {
                        v281 = -1;
                      }
                      v494.i32[2] = v281;
                    }
                    v492[0] = 0;
                    v492[1] = 0;
                    v493 = 0;
                    bzero(__dst, 0x40CuLL);
                    if (v6 - 21 > 0xFFFFFFFD)
                    {
                      v288 = 0;
                      v289 = 0;
                      v290 = 0;
                      v291 = 0;
                      goto LABEL_326;
                    }
                    v282 = *((_DWORD *)v7 + 7) + 4;
                    if (v282 < 0 || (v283 = v281 - v282, v281 < v282))
                    {
                      v494.i8[12] = 0;
                      v494.i32[2] = -2;
                    }
                    else
                    {
                      v284 = v283 + 7;
                      if (v283 < -7)
                        v284 = v283 + 14;
                      v285 = v494.i64[0] + (int)(((v281 + 7) >> 3) - (v284 >> 3));
                      v494.i64[0] = v285;
                      v494.i8[12] = 0;
                      v172 = __OFSUB__(v283, 1);
                      v286 = v283 - 1;
                      v494.i32[2] = v286;
                      if (v286 < 0 == v172)
                      {
                        v287 = v286 & 7;
                        if (v287)
                        {
                          LODWORD(v285) = *(unsigned __int8 *)v285 >> v287;
                        }
                        else
                        {
                          v494.i64[0] = v285 + 1;
                          LOBYTE(v285) = *(_BYTE *)v285;
                        }
                        if ((v285 & 1) != 0)
                        {
                          v310 = *((_DWORD *)v7 + 18);
                          v290 = 1;
                          if (v310 >= 2)
                          {
                            v311 = __clz(v310 - 1);
                            if (1 << -(char)v311 >= v310)
                              v312 = 32 - v311;
                            else
                              v312 = 33 - v311;
                            v313 = webrtc::BitstreamReader::ReadBits(&v494, v312);
                            v291 = v313;
                            v494.i8[12] = 1;
                            if (v494.i32[2] < 0 || *((_DWORD *)v7 + 18) - 1 < v313)
                            {
                              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                                goto LABEL_442;
                              goto LABEL_444;
                            }
LABEL_341:
                            if (*((_DWORD *)v7 + 26))
                            {
                              if (*((_DWORD *)v7 + 27))
                              {
                                v294 = webrtc::BitstreamReader::ReadExponentialGolomb(&v494);
                                v295 = v294;
                                v494.i8[12] = 1;
                                if (v494.i32[2] < 0 || v294 > *((_DWORD *)v7 + 27))
                                {
                                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                                    goto LABEL_442;
                                  goto LABEL_444;
                                }
                              }
                              else
                              {
                                v295 = 0;
                              }
                              v314 = webrtc::BitstreamReader::ReadExponentialGolomb(&v494);
                              v494.i8[12] = 1;
                              if (v494.i32[2] < 0 || v314 > 32 - v295)
                              {
                                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                                  goto LABEL_442;
                                goto LABEL_444;
                              }
                              v482 = v290;
                              v480 = v314;
                              v315 = v314 + v295;
                              std::vector<BOOL>::resize((uint64_t)v492, v315, 0);
                              if ((_DWORD)v315)
                              {
                                v316 = 0;
                                v477 = v295;
                                v485 = v295;
                                while (v316 < v485)
                                {
                                  v317 = *((_DWORD *)v7 + 27);
                                  if (v317 < 2)
                                  {
                                    LODWORD(v34) = 0;
                                  }
                                  else
                                  {
                                    v318 = webrtc::BitstreamReader::ReadBits(&v494, 32 - __clz(v317 - 1));
                                    LODWORD(v34) = v318;
                                    v494.i8[12] = 1;
                                    if (v494.i32[2] < 0 || *((_DWORD *)v7 + 27) - 1 < v318)
                                    {
                                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                                        goto LABEL_444;
LABEL_442:
                                      v351 = (unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
LABEL_443:
                                      rtc::webrtc_logging_impl::Log(v351, v296, v297, v298, v299, v300, v301, v302, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
                                      goto LABEL_444;
                                    }
                                  }
                                  LODWORD(v15) = (_DWORD)v34;
                                  v16 = *((_QWORD *)v7 + 14);
                                  v17 = *((_QWORD *)v7 + 15) - v16;
                                  if (v34 >= (unint64_t)(v17 >> 2))
                                    goto LABEL_556;
                                  v328 = *(_DWORD *)(v16 + 4 * v34);
                                  v329 = 1 << v316;
                                  v330 = 8 * (v316 >> 6);
                                  if (v328)
                                    v331 = *(_QWORD *)((char *)v492[0] + v330) | v329;
                                  else
                                    v331 = *(_QWORD *)((_BYTE *)v492[0] + v330) & ~v329;
                                  *(_QWORD *)((char *)v492[0] + v330) = v331;
LABEL_388:
                                  v494.i8[12] = 0;
                                  v335 = v494.i8[8] - 1;
                                  v426 = v494.i32[2]-- < 1;
                                  if (!v426)
                                  {
                                    v336 = v494.i64[0];
                                    v337 = v335 & 7;
                                    if (v337)
                                    {
                                      LODWORD(v336) = *(unsigned __int8 *)v494.i64[0] >> v337;
                                    }
                                    else
                                    {
                                      ++v494.i64[0];
                                      LOBYTE(v336) = *(_BYTE *)v336;
                                    }
                                    if ((v336 & 1) != 0)
                                    {
                                      v338 = webrtc::BitstreamReader::ReadExponentialGolomb(&v494);
                                      v494.i8[12] = 1;
                                      if (v494.i32[2] < 0
                                        || v338 < 0
                                        || exp2((double)(28 - *((_DWORD *)v7 + 7))) < (double)v338)
                                      {
                                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                                        {
                                          exp2((double)(28 - *((_DWORD *)v7 + 7)));
                                          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v429, v430, v431, v432, v433, v434, v435, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
                                        }
                                        goto LABEL_444;
                                      }
                                    }
                                  }
                                  if (v315 == ++v316)
                                  {
                                    v288 = v477;
                                    goto LABEL_406;
                                  }
                                }
                                v319 = *((_DWORD *)v7 + 7) + 4;
                                if (v319 < 0
                                  || (v172 = __OFSUB__(v494.i32[2], v319), v320 = v494.i32[2] - v319, (v320 < 0) ^ v172))
                                {
                                  v494.i8[12] = 0;
                                  v494.i32[2] = -2;
                                }
                                else
                                {
                                  v321 = v494.i32[2] + 14;
                                  if (v494.i32[2] >= -7)
                                    v321 = v494.i32[2] + 7;
                                  v322 = v321 >> 3;
                                  v323 = v320 + 7;
                                  if (v320 < -7)
                                    v323 = v320 + 14;
                                  v324 = (_BYTE *)(v494.i64[0] + v322 - (v323 >> 3));
                                  v494.i64[0] = (uint64_t)v324;
                                  v494.i8[12] = 0;
                                  v172 = __OFSUB__(v320, 1);
                                  v325 = v320 - 1;
                                  v494.i32[2] = v325;
                                  if (v325 < 0 == v172)
                                  {
                                    v326 = v325 & 7;
                                    if (v326)
                                    {
                                      v327 = *v324 >> v326;
                                    }
                                    else
                                    {
                                      v494.i64[0] = (uint64_t)(v324 + 1);
                                      LOBYTE(v327) = *v324;
                                    }
                                    v332 = (uint64_t *)((char *)v492[0] + 8 * (v316 >> 6));
                                    v333 = 1 << v316;
                                    if ((v327 & 1) != 0)
                                    {
                                      v334 = *v332 | v333;
                                      goto LABEL_385;
                                    }
LABEL_384:
                                    v334 = *v332 & ~v333;
LABEL_385:
                                    *v332 = v334;
                                    goto LABEL_388;
                                  }
                                }
                                v332 = (uint64_t *)((char *)v492[0] + 8 * (v316 >> 6));
                                v333 = 1 << v316;
                                goto LABEL_384;
                              }
                              v288 = v295;
LABEL_406:
                              v289 = v480;
                              v290 = v482;
                            }
                            else
                            {
                              v288 = 0;
                              v289 = 0;
                            }
                            if (*((_DWORD *)v7 + 34))
                            {
                              v494.i8[12] = 0;
                              v339 = v494.i8[8] - 1;
                              v426 = v494.i32[2]-- < 1;
                              if (v426)
                              {
                                v342 = 0;
                              }
                              else
                              {
                                v340 = v494.i64[0];
                                v341 = v339 & 7;
                                if (v341)
                                {
                                  LODWORD(v340) = *(unsigned __int8 *)v494.i64[0] >> v341;
                                }
                                else
                                {
                                  ++v494.i64[0];
                                  LOBYTE(v340) = *(_BYTE *)v340;
                                }
                                v342 = v340 & 1;
                              }
                              v13 = v342 != 0;
                              if (!*((_DWORD *)v7 + 17))
                                goto LABEL_415;
                              goto LABEL_327;
                            }
LABEL_326:
                            v13 = 0;
                            if (!*((_DWORD *)v7 + 17))
                              goto LABEL_415;
LABEL_327:
                            v494.i8[12] = 0;
                            v292 = v494.i32[2] - 1;
                            if (v494.i32[2] < 1)
                              v292 = -1;
                            else
                              v494.i64[0] += (int)(((v494.i32[2] + 7) >> 3)
                                                 - ((v494.i32[2] + 6) >> 3));
                            v494.i32[2] = v292;
                            if (!*((_DWORD *)v7 + 4) && *((_DWORD *)v7 + 3))
                            {
                              v494.i8[12] = 0;
                              v293 = v292 - 1;
                              if (v292 < 1)
                                v293 = -1;
                              else
                                v494.i64[0] += (int)(((v292 + 7) >> 3) - ((v292 + 6) >> 3));
                              v494.i32[2] = v293;
                            }
LABEL_415:
                            if (v108 > 1)
                            {
                              v345 = 1;
                              goto LABEL_445;
                            }
                            v494.i8[12] = 0;
                            v343 = v494.i32[2];
                            LODWORD(v15) = --v494.i32[2];
                            if (v343 <= 0)
                            {
                              v347 = *(_DWORD *)(v3 + 12);
                              v346 = *(_DWORD *)(v3 + 16);
                            }
                            else
                            {
                              v344 = v494.i64[0];
                              if ((v15 & 7) != 0)
                              {
                                LODWORD(v344) = *(unsigned __int8 *)v494.i64[0] >> (v15 & 7);
                              }
                              else
                              {
                                ++v494.i64[0];
                                LOBYTE(v344) = *(_BYTE *)v344;
                              }
                              v346 = *(_DWORD *)(v3 + 16);
                              if ((v344 & 1) != 0)
                              {
                                v483 = v290;
                                v486 = v13;
                                v348 = v288;
                                v349 = *(_DWORD *)(v3 + 16);
                                v350 = webrtc::BitstreamReader::ReadExponentialGolomb(&v494);
                                v347 = v350;
                                v494.i8[12] = 1;
                                LODWORD(v15) = v494.i32[2];
                                if (v494.i32[2] < 0 || v350 >= 0xF)
                                {
                                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                                  {
                                    v351 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
                                    goto LABEL_443;
                                  }
                                  goto LABEL_444;
                                }
                                if ((_DWORD)v108)
                                {
                                  v346 = v349;
                                  v288 = v348;
                                }
                                else
                                {
                                  v352 = v350;
                                  v346 = webrtc::BitstreamReader::ReadExponentialGolomb(&v494);
                                  v494.i8[12] = 1;
                                  LODWORD(v15) = v494.i32[2];
                                  if (v494.i32[2] < 0 || v346 >= 0xF)
                                  {
                                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                                    {
                                      v351 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
                                      goto LABEL_443;
                                    }
LABEL_444:
                                    v345 = 0;
                                    goto LABEL_445;
                                  }
                                  v288 = v348;
                                  v347 = v352;
                                }
                                v13 = v486;
                                v290 = v483;
                              }
                              else
                              {
                                v347 = *(_DWORD *)(v3 + 12);
                              }
                            }
                            if ((v290 & 1) == 0)
                              v291 = *((_DWORD *)v7 + 18);
                            v353 = *((_QWORD *)v7 + 10);
                            v354 = 0x2F71AAFF02F71ABLL * ((*((_QWORD *)v7 + 11) - v353) >> 2);
                            if (v354 <= v291)
                              v355 = __dst;
                            else
                              v355 = (__int128 *)(v353 + 1036 * v291);
                            v494.i8[12] = 1;
                            if ((v15 & 0x80000000) != 0 || (v356 = *(unsigned int *)v355, v356 >= 0x41))
                            {
                              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                                goto LABEL_442;
                              goto LABEL_444;
                            }
                            if (v354 <= v291)
                              v368 = (unsigned int *)__dst + 1;
                            else
                              v368 = (unsigned int *)(v353 + 1036 * v291 + 4);
                            v369 = *v368;
                            if (v369 > 0x40)
                            {
                              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                                goto LABEL_442;
                              goto LABEL_444;
                            }
                            LODWORD(v34) = v347;
                            LODWORD(v7) = v346;
                            if (!(_DWORD)v356)
                            {
                              v371 = 0;
                              goto LABEL_520;
                            }
                            if (v356 >= 8)
                            {
                              v370 = v356 & 0x78;
                              v372 = v353 + 1036 * v291;
                              v373 = (int32x4_t *)(v372 + 264);
                              if (v354 <= v291)
                                v373 = (int32x4_t *)((char *)&__dst[16] + 8);
                              v374 = (int32x4_t *)(v372 + 280);
                              if (v354 <= v291)
                                v374 = (int32x4_t *)((char *)&__dst[17] + 8);
                              v375.i64[0] = 0x100000001;
                              v375.i64[1] = 0x100000001;
                              v376 = (int32x4_t)vbicq_s8(v375, (int8x16_t)vceqzq_s32(*v373));
                              v377 = (int32x4_t)vbicq_s8(v375, (int8x16_t)vceqzq_s32(*v374));
                              if (v370 != 8)
                              {
                                v378 = v353 + 1036 * v291;
                                v379 = (int32x4_t *)(v378 + 296);
                                if (v354 <= v291)
                                  v379 = (int32x4_t *)((char *)&__dst[18] + 8);
                                v380 = (int32x4_t *)(v378 + 312);
                                if (v354 <= v291)
                                  v380 = (int32x4_t *)((char *)&__dst[19] + 8);
                                v376 = vsubq_s32(v376, vtstq_s32(*v379, *v379));
                                v377 = vsubq_s32(v377, vtstq_s32(*v380, *v380));
                                if (v370 != 16)
                                {
                                  v381 = v353 + 1036 * v291;
                                  v382 = (int32x4_t *)(v381 + 328);
                                  if (v354 <= v291)
                                    v382 = (int32x4_t *)((char *)&__dst[20] + 8);
                                  v383 = (int32x4_t *)(v381 + 344);
                                  if (v354 <= v291)
                                    v383 = (int32x4_t *)((char *)&__dst[21] + 8);
                                  v376 = vsubq_s32(v376, vtstq_s32(*v382, *v382));
                                  v377 = vsubq_s32(v377, vtstq_s32(*v383, *v383));
                                  if (v370 != 24)
                                  {
                                    v384 = v353 + 1036 * v291;
                                    v385 = (int32x4_t *)(v384 + 360);
                                    if (v354 <= v291)
                                      v385 = (int32x4_t *)((char *)&__dst[22] + 8);
                                    v386 = (int32x4_t *)(v384 + 376);
                                    if (v354 <= v291)
                                      v386 = (int32x4_t *)((char *)&__dst[23] + 8);
                                    v376 = vsubq_s32(v376, vtstq_s32(*v385, *v385));
                                    v377 = vsubq_s32(v377, vtstq_s32(*v386, *v386));
                                    if (v370 != 32)
                                    {
                                      v387 = v353 + 1036 * v291;
                                      v388 = (int32x4_t *)(v387 + 392);
                                      if (v354 <= v291)
                                        v388 = (int32x4_t *)((char *)&__dst[24] + 8);
                                      v389 = (int32x4_t *)(v387 + 408);
                                      if (v354 <= v291)
                                        v389 = (int32x4_t *)((char *)&__dst[25] + 8);
                                      v376 = vsubq_s32(v376, vtstq_s32(*v388, *v388));
                                      v377 = vsubq_s32(v377, vtstq_s32(*v389, *v389));
                                      if (v370 != 40)
                                      {
                                        v390 = v353 + 1036 * v291;
                                        v391 = (int32x4_t *)(v390 + 424);
                                        if (v354 <= v291)
                                          v391 = (int32x4_t *)((char *)&__dst[26] + 8);
                                        v392 = (int32x4_t *)(v390 + 440);
                                        if (v354 <= v291)
                                          v392 = (int32x4_t *)((char *)&__dst[27] + 8);
                                        v376 = vsubq_s32(v376, vtstq_s32(*v391, *v391));
                                        v377 = vsubq_s32(v377, vtstq_s32(*v392, *v392));
                                        if (v370 != 48)
                                        {
                                          v393 = v353 + 1036 * v291;
                                          v394 = (int32x4_t *)(v393 + 456);
                                          if (v354 <= v291)
                                            v394 = (int32x4_t *)((char *)&__dst[28] + 8);
                                          v395 = (int32x4_t *)(v393 + 472);
                                          if (v354 <= v291)
                                            v395 = (int32x4_t *)((char *)&__dst[29] + 8);
                                          v376 = vsubq_s32(v376, vtstq_s32(*v394, *v394));
                                          v377 = vsubq_s32(v377, vtstq_s32(*v395, *v395));
                                          if (v370 != 56)
                                          {
                                            v396 = v353 + 1036 * v291;
                                            if (v354 <= v291)
                                              v397 = (int32x4_t *)((char *)&__dst[30] + 8);
                                            else
                                              v397 = (int32x4_t *)(v396 + 488);
                                            v398 = *v397;
                                            v399 = (int32x4_t *)(v396 + 504);
                                            if (v354 <= v291)
                                              v399 = (int32x4_t *)((char *)&__dst[31] + 8);
                                            v376 = vsubq_s32(v376, vtstq_s32(v398, v398));
                                            v377 = vsubq_s32(v377, vtstq_s32(*v399, *v399));
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              v371 = vaddvq_s32(vaddq_s32(v377, v376));
                              if (v370 == v356)
                              {
LABEL_520:
                                if (!(_DWORD)v369)
                                  goto LABEL_530;
                                if (v369 >= 8)
                                {
                                  v403 = v369 & 0x78;
                                  v404 = 0uLL;
                                  v405 = (int32x4_t)v371;
                                  v406 = (int32x4_t *)((char *)v355 + 776);
                                  v407 = v369 & 0xFFFFFFF8;
                                  do
                                  {
                                    v408 = *v406;
                                    v409 = v406[1];
                                    v406 += 2;
                                    v405 = vsubq_s32(v405, vtstq_s32(v408, v408));
                                    v404 = vsubq_s32(v404, vtstq_s32(v409, v409));
                                    v407 -= 8;
                                  }
                                  while (v407);
                                  v371 = vaddvq_s32(vaddq_s32(v404, v405));
                                  if (v403 == v369)
                                    goto LABEL_530;
                                }
                                else
                                {
                                  v403 = 0;
                                }
                                v410 = v369 - v403;
                                v411 = (_DWORD *)v355 + v403 + 194;
                                do
                                {
                                  if (*v411++)
                                    ++v371;
                                  --v410;
                                }
                                while (v410);
LABEL_530:
                                v413 = v289 + v288;
                                if (v289 + v288)
                                {
                                  if (v413 >= 8)
                                  {
                                    v415 = 0;
                                    v416 = (int32x4_t)v371;
                                    v417 = (int8x16_t)xmmword_208F08AD0;
                                    v418 = vdupq_n_s64(4uLL);
                                    v419 = (int8x16_t)vdupq_n_s64(0x3FuLL);
                                    v420 = (uint64x2_t)vdupq_n_s64(1uLL);
                                    v421 = (int8x16_t)xmmword_208F05120;
                                    v422 = vdupq_n_s64(8uLL);
                                    v414 = v413 & 0xFFFFFFF8;
                                    v423 = 0uLL;
                                    do
                                    {
                                      v424 = (const double *)((char *)v492[0] + 8 * (v415 >> 6));
                                      v425 = (int8x16_t)vld1q_dup_f64(v424);
                                      v416 = vsubq_s32(v416, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v425, (int8x16_t)vshlq_u64(v420, (uint64x2_t)vandq_s8(v421, v419)))), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v425, (int8x16_t)vshlq_u64(v420, (uint64x2_t)vandq_s8(v417, v419)))))));
                                      v423 = vsubq_s32(v423, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v425, (int8x16_t)vshlq_u64(v420, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v421, v418), v419)))), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v425, (int8x16_t)vshlq_u64(v420, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v417, v418), v419)))))));
                                      v415 += 8;
                                      v417 = (int8x16_t)vaddq_s64((int64x2_t)v417, v422);
                                      v421 = (int8x16_t)vaddq_s64((int64x2_t)v421, v422);
                                    }
                                    while (v414 != v415);
                                    v371 = vaddvq_s32(vaddq_s32(v423, v416));
                                    if (v414 == v413)
                                      goto LABEL_537;
                                  }
                                  else
                                  {
                                    v414 = 0;
                                  }
                                  do
                                  {
                                    v371 += (*(_QWORD *)((char *)v492[0] + ((v414 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v414) & 1;
                                    ++v414;
                                  }
                                  while (v413 != v414);
                                }
LABEL_537:
                                if (*(_BYTE *)(v3 + 26))
                                  v426 = v371 > 1;
                                else
                                  v426 = 0;
                                if (!v426)
                                {
                                  if ((_DWORD)v108)
                                    goto LABEL_578;
                                  goto LABEL_542;
                                }
                                v427 = __clz(v371 - 1);
                                if (1 << -(char)v427 >= v371)
                                  LODWORD(v16) = 32 - v427;
                                else
                                  LODWORD(v16) = 33 - v427;
                                v494.i8[12] = 0;
                                v172 = __OFSUB__((_DWORD)v15, 1);
                                LODWORD(v15) = v15 - 1;
                                v494.i32[2] = v15;
                                if ((int)v15 < 0 != v172)
                                {
LABEL_572:
                                  if ((_DWORD)v108)
                                    goto LABEL_578;
                                  v494.i8[12] = 0;
                                  v172 = __OFSUB__((_DWORD)v15, 1);
                                  LODWORD(v15) = v15 - 1;
                                  v494.i32[2] = v15;
                                  if ((int)v15 < 0 != v172)
                                    goto LABEL_576;
                                  v442 = (_BYTE *)v494.i64[0];
                                  if ((v15 & 7) != 0)
                                  {
                                    v443 = *(unsigned __int8 *)v494.i64[0] >> (v15 & 7);
                                  }
                                  else
                                  {
                                    ++v494.i64[0];
                                    LOBYTE(v443) = *v442++;
                                  }
                                  if ((v443 & 1) != 0 && (_DWORD)v7)
                                  {
                                    if ((v16 & 0x80000000) != 0)
                                    {
                                      LODWORD(v15) = -1;
                                    }
                                    else
                                    {
                                      v446 = (int)v7;
                                      do
                                      {
                                        while (1)
                                        {
                                          v451 = v15 - v16;
                                          if ((int)v15 >= (int)v16)
                                            break;
                                          LODWORD(v15) = -1;
                                          if (!--v446)
                                            goto LABEL_632;
                                        }
                                        v447 = v15 + 7;
                                        v426 = (int)v15 < -7;
                                        v448 = v15 + 14;
                                        if (!v426)
                                          v448 = v447;
                                        v449 = v448 >> 3;
                                        v450 = v451 + 7;
                                        if (v451 < -7)
                                          v450 = v451 + 14;
                                        v442 += v449 - (v450 >> 3);
                                        v494.i64[0] = (uint64_t)v442;
                                        LODWORD(v15) = v451;
                                        --v446;
                                      }
                                      while (v446);
                                    }
LABEL_632:
                                    v494.i8[12] = 0;
                                    v494.i32[2] = v15;
                                  }
LABEL_542:
                                  v494.i8[12] = 0;
                                  if ((int)v15 >= 1)
                                  {
                                    v494.i64[0] += (int)(((v15 + 7) >> 3) - ((v15 + 6) >> 3));
                                    LODWORD(v15) = v15 - 1;
LABEL_577:
                                    v494.i32[2] = v15;
LABEL_578:
                                    if (*(_BYTE *)(v3 + 5))
                                    {
                                      v494.i8[12] = 0;
                                      if ((int)v15 < 1)
                                      {
                                        LODWORD(v15) = -1;
                                      }
                                      else
                                      {
                                        v494.i64[0] += (int)(((v15 + 7) >> 3)
                                                           - ((v15 + 6) >> 3));
                                        LODWORD(v15) = v15 - 1;
                                      }
                                      v494.i32[2] = v15;
                                    }
                                    if (v13)
                                    {
                                      if ((_DWORD)v108)
                                      {
                                        if ((_DWORD)v7)
                                        {
                                          webrtc::BitstreamReader::ReadExponentialGolomb(&v494);
                                          LODWORD(v15) = v494.i32[2];
                                        }
                                      }
                                      else
                                      {
                                        v494.i8[12] = 0;
                                        v172 = __OFSUB__((_DWORD)v15, 1);
                                        LODWORD(v15) = v15 - 1;
                                        v494.i32[2] = v15;
                                        if ((int)v15 < 0 != v172)
                                        {
                                          v445 = 0;
                                        }
                                        else
                                        {
                                          v444 = v494.i64[0];
                                          if ((v15 & 7) != 0)
                                          {
                                            LODWORD(v444) = *(unsigned __int8 *)v494.i64[0] >> (v15 & 7);
                                          }
                                          else
                                          {
                                            ++v494.i64[0];
                                            LOBYTE(v444) = *(_BYTE *)v444;
                                          }
                                          v445 = v444 & 1;
                                        }
                                        if (v445)
                                          v452 = (int)v34;
                                        else
                                          v452 = (int)v7;
                                        if (v452)
                                        {
                                          v453 = webrtc::BitstreamReader::ReadExponentialGolomb(&v494);
                                          v494.i8[12] = 1;
                                          if (v445)
                                          {
                                            if (v494.i32[2] < 0 || v453 > v34)
                                            {
                                              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                                                goto LABEL_442;
                                              goto LABEL_444;
                                            }
                                          }
                                          else if (v494.i32[2] < 0 || v453 > v7)
                                          {
                                            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                                              goto LABEL_442;
                                            goto LABEL_444;
                                          }
LABEL_618:
                                          if (*(_BYTE *)(v3 + 25) && !(_DWORD)v108)
                                          {
LABEL_620:
                                            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                                              rtc::webrtc_logging_impl::Log("\r\t", v454, v455, v456, v457, v458, v459, v460, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
                                            v345 = 0;
                                            v55 = 2;
                                            goto LABEL_446;
                                          }
                                          v461 = webrtc::BitstreamReader::ReadExponentialGolomb(&v494);
                                          v345 = 1;
                                          v494.i8[12] = 1;
                                          if (v494.i32[2] < 0 || v461 > 4)
                                          {
                                            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                                              goto LABEL_444;
                                            v55 = 1;
                                            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v462, v463, v464, v465, v466, v467, v468, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
                                            v345 = 0;
LABEL_446:
                                            if (v492[0])
                                              operator delete(v492[0]);
                                            if (v345)
                                              goto LABEL_449;
LABEL_308:
                                            v53 = __p[0];
                                            if (!__p[0])
                                              goto LABEL_46;
                                            goto LABEL_45;
                                          }
LABEL_445:
                                          v55 = 1;
                                          goto LABEL_446;
                                        }
                                      }
                                    }
                                    v494.i8[12] = 1;
                                    if ((v15 & 0x80000000) != 0 || *(_BYTE *)(v3 + 24) && (_DWORD)v108 == 1)
                                      goto LABEL_620;
                                    goto LABEL_618;
                                  }
LABEL_576:
                                  LODWORD(v15) = -1;
                                  goto LABEL_577;
                                }
                                v17 = v494.i64[0];
                                if ((v15 & 7) != 0)
                                {
                                  v428 = *(unsigned __int8 *)v494.i64[0] >> (v15 & 7);
LABEL_558:
                                  if ((v428 & 1) != 0 && (_DWORD)v34)
                                  {
                                    if ((v16 & 0x80000000) != 0)
                                    {
                                      LODWORD(v15) = -1;
                                    }
                                    else
                                    {
                                      v436 = (int)v34;
                                      do
                                      {
                                        while (1)
                                        {
                                          v441 = v15 - v16;
                                          if ((int)v15 >= (int)v16)
                                            break;
                                          LODWORD(v15) = -1;
                                          if (!--v436)
                                            goto LABEL_571;
                                        }
                                        v437 = v15 + 7;
                                        v426 = (int)v15 < -7;
                                        v438 = v15 + 14;
                                        if (!v426)
                                          v438 = v437;
                                        v439 = v438 >> 3;
                                        v440 = v441 + 7;
                                        if (v441 < -7)
                                          v440 = v441 + 14;
                                        v17 += v439 - (v440 >> 3);
                                        v494.i64[0] = v17;
                                        LODWORD(v15) = v441;
                                        --v436;
                                      }
                                      while (v436);
                                    }
LABEL_571:
                                    v494.i8[12] = 0;
                                    v494.i32[2] = v15;
                                  }
                                  goto LABEL_572;
                                }
LABEL_557:
                                v494.i64[0] = v17 + 1;
                                LOBYTE(v428) = *(_BYTE *)v17++;
                                goto LABEL_558;
                              }
                            }
                            else
                            {
                              v370 = 0;
                              v371 = 0;
                            }
                            v400 = v356 - v370;
                            v401 = (_DWORD *)v355 + v370 + 66;
                            do
                            {
                              if (*v401++)
                                ++v371;
                              --v400;
                            }
                            while (v400);
                            goto LABEL_520;
                          }
LABEL_340:
                          v291 = 0;
                          goto LABEL_341;
                        }
                      }
                    }
                    webrtc::H265SpsParser::ParseShortTermRefPicSet(*((_DWORD *)v7 + 18), *((_DWORD *)v7 + 18), (uint64_t *)v7 + 10, *(_DWORD *)&v7[4 * *((unsigned int *)v7 + 2) + 32], &v494, __src);
                    v494.i8[12] = 1;
                    if (v494.i32[2] < 0 || !v496)
                    {
                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                        rtc::webrtc_logging_impl::Log("\r\t\t", v303, v304, v305, v306, v307, v308, v309, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
                      goto LABEL_444;
                    }
                    memcpy(__dst, __src, 0x40CuLL);
                    v290 = 0;
                    goto LABEL_340;
                  }
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                    goto LABEL_307;
LABEL_97:
                  v106 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
LABEL_98:
                  rtc::webrtc_logging_impl::Log(v106, v99, v100, v101, v102, v103, v104, v105, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
                  goto LABEL_307;
                }
                v171 = *(_BYTE *)(v3 + 4);
                if (v171)
                {
                  v494.i8[12] = 0;
                  v172 = __OFSUB__(v494.i32[2], 1);
                  v91 = v494.i32[2] - 1;
                  v494.i32[2] = v91;
                  if (v91 < 0 != v172)
                  {
                    v263 = 0;
                  }
                  else
                  {
                    v173 = v494.i64[0];
                    if ((v91 & 7) != 0)
                    {
                      LODWORD(v173) = *(unsigned __int8 *)v494.i64[0] >> (v91 & 7);
                    }
                    else
                    {
                      ++v494.i64[0];
                      LOBYTE(v173) = *(_BYTE *)v173;
                    }
                    v263 = v173 & 1;
                  }
                  v171 = v263 != 0;
                }
                v264 = -1 << (v7[60] + v7[64] + 3);
                v265 = *((_DWORD *)v7 + 5);
                v266 = *((_DWORD *)v7 + 6);
                v267 = (v265 & ~v264) == 0;
                v268 = v265 >> (v7[60] + v7[64] + 3);
                if (!v267)
                  ++v268;
                v269 = v266 >> (v7[60] + v7[64] + 3);
                if ((v266 & ~v264) != 0)
                  ++v269;
                v270 = v269 * v268;
                if (v270)
                  v271 = 32;
                else
                  v271 = -1;
                v494.i8[12] = 1;
                if ((v91 & 0x80000000) == 0)
                {
                  v272 = v271 - __clz(v270 - 1);
                  if (v272 != -1)
                  {
                    v494.i8[12] = 0;
                    v273 = -1;
                    if ((v272 & 0x80000000) == 0)
                    {
                      v172 = __OFSUB__(v91, v272);
                      v274 = v91 - v272;
                      if (v274 < 0 == v172)
                      {
                        v275 = (v91 + 7) >> 3;
                        v276 = v274 + 7;
                        if (v274 < -7)
                          v276 = v274 + 14;
                        v494.i64[0] += (int)(v275 - (v276 >> 3));
                        v273 = v274;
                      }
                    }
                    v494.i32[2] = v273;
                    v91 = v273;
                    if ((v171 & 1) != 0)
                    {
LABEL_449:
                      v357 = webrtc::BitstreamReader::ReadExponentialGolomb(&v494);
                      if ((v357 & 1) != 0)
                        v358 = (v357 + 1) >> 1;
                      else
                        v358 = -(v357 >> 1);
                      v494.i8[12] = 1;
                      if (v358 >= 0)
                        v359 = v358;
                      else
                        v359 = -v358;
                      if (v494.i32[2] < 0 || v359 >= 0x34)
                      {
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                          rtc::webrtc_logging_impl::Log("\r\t", v361, v362, v363, v364, v365, v366, v367, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
                        goto LABEL_307;
                      }
                      v360 = *(_DWORD *)(v3 + 20) + v358 + 26;
                      if (v360 >= -*(_DWORD *)(v3 + 36) && v360 < 52)
                      {
                        v55 = 0;
                        *((_DWORD *)this + 20) = v358;
                        *((_BYTE *)this + 84) = 1;
                        *((_DWORD *)this + 22) = v5;
                        *((_BYTE *)this + 92) = 1;
                        goto LABEL_308;
                      }
                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                      {
                        v106 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
                        goto LABEL_98;
                      }
LABEL_307:
                      v55 = 1;
                      goto LABEL_308;
                    }
                    goto LABEL_292;
                  }
                }
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                  goto LABEL_307;
              }
            }
            rtc::webrtc_logging_impl::Log("\r\t\t", v163, v164, v165, v166, v167, v168, v169, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
            goto LABEL_307;
          }
          v89 = v71 - 18;
          if (v71 >= 0x12)
          {
            v494.i64[0] = (uint64_t)&v80[((v71 - 10) >> 3) - ((v71 - 11) >> 3)];
            goto LABEL_86;
          }
        }
      }
      else
      {
        v494.i8[12] = 0;
        v494.i32[2] = -2;
        v72 = 1;
        if ((v5 & 0x70) != 0x20)
          goto LABEL_87;
      }
      v89 = -1;
LABEL_86:
      v494.i32[2] = v89;
      goto LABEL_87;
  }
}

void webrtc::H265BitstreamParser::ParseBitstream(webrtc::H265BitstreamParser *a1, webrtc::H265 *this, unsigned __int8 *a3)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;

  webrtc::H265::FindNaluIndices(this, a3, &v7);
  v5 = v7;
  v6 = v8;
  if (v7 != v8)
  {
    do
    {
      webrtc::H265BitstreamParser::ParseSlice(a1, (webrtc::H265 *)((char *)this + *((_QWORD *)v5 + 1)), *((_QWORD *)v5 + 2));
      v5 += 24;
    }
    while (v5 != v6);
    v5 = v7;
  }
  if (v5)
  {
    v8 = v5;
    operator delete(v5);
  }
}

uint64_t webrtc::H265BitstreamParser::GetLastSliceQp(webrtc::H265BitstreamParser *this)
{
  unsigned int v1;
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!*((_BYTE *)this + 84) || !*((_BYTE *)this + 92))
    return 0;
  v1 = *((_DWORD *)this + 22);
  v3 = (char *)*((_QWORD *)this + 7);
  v2 = (char *)*((_QWORD *)this + 8);
  if (v2 == v3)
  {
    v3 = (char *)*((_QWORD *)this + 8);
  }
  else
  {
    v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 3);
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[40 * (v4 >> 1)];
      v8 = *(_DWORD *)v6;
      v7 = v6 + 40;
      v4 += ~(v4 >> 1);
      if (v8 < v1)
        v3 = v7;
      else
        v4 = v5;
    }
    while (v4);
    if (v2 != v3)
    {
      if (&v3[40 * (*(_DWORD *)v3 <= v1)] == v3)
        v3 = (char *)*((_QWORD *)this + 8);
      if (v2 != v3)
        goto LABEL_13;
LABEL_20:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
      return 0;
    }
  }
  if (v2 == v3)
    v3 = (char *)*((_QWORD *)this + 8);
  if (v2 == v3)
    goto LABEL_20;
LABEL_13:
  v9 = (*((_DWORD *)v3 + 5) + *((_DWORD *)this + 20) + 26);
  if (v9 >= 0x34)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_bitstream_parser.cc");
    return 0;
  }
  return v9 | 0x100000000;
}

unint64_t std::vector<std::pair<unsigned int,webrtc::H265PpsParser::PpsState>>::emplace<unsigned int const&,webrtc::H265PpsParser::PpsState>(unint64_t *a1, uint64_t a2, int *a3, __int128 *a4)
{
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t i;
  __int128 v49;
  __int128 v50;
  void *v51;
  __int128 v53;
  __int128 v54;
  int v55;

  v7 = (char *)*a1;
  v8 = a1[1];
  v9 = (uint64_t)(a2 - *a1) / 40;
  v10 = *a1 + 40 * v9;
  v11 = a1[2];
  if (v8 < v11)
  {
    if (v10 != v8)
    {
      v12 = *a3;
      v53 = *a4;
      v54 = a4[1];
      v55 = *((_DWORD *)a4 + 8);
      v13 = v10 + 40;
      v14 = v8 - 40;
      if (v8 < 0x28)
      {
        a1[1] = v8;
        if (v8 == v13)
        {
LABEL_29:
          *(_DWORD *)v10 = v12;
          v34 = &v7[40 * v9];
          *(_OWORD *)(v34 + 4) = v53;
          *(_OWORD *)(v34 + 20) = v54;
          *((_DWORD *)v34 + 9) = v55;
          return v10;
        }
      }
      else
      {
        v15 = v8 - 40;
        v16 = a1[1];
        do
        {
          v17 = *(_OWORD *)v15;
          v18 = *(_OWORD *)(v15 + 16);
          *(_QWORD *)(v16 + 32) = *(_QWORD *)(v15 + 32);
          *(_OWORD *)v16 = v17;
          *(_OWORD *)(v16 + 16) = v18;
          v15 += 40;
          v16 += 40;
        }
        while (v15 < v8);
        a1[1] = v16;
        if (v8 == v13)
          goto LABEL_29;
      }
      v31 = 8 * ((uint64_t)(v8 - v13) >> 3);
      do
      {
        *(_DWORD *)v14 = *(_DWORD *)(v10 + v31 - 40);
        v32 = *(_OWORD *)(v10 + v31 - 36);
        v33 = *(_OWORD *)(v10 + v31 - 20);
        *(_DWORD *)(v14 + 36) = *(_DWORD *)(v10 + v31 - 4);
        *(_OWORD *)(v14 + 20) = v33;
        *(_OWORD *)(v14 + 4) = v32;
        v14 -= 40;
        v31 -= 40;
      }
      while (v31);
      goto LABEL_29;
    }
    if (v7)
    {
      *(_DWORD *)v10 = *a3;
      v26 = &v7[40 * v9];
      v27 = *a4;
      v28 = a4[1];
      *((_DWORD *)v26 + 9) = *((_DWORD *)a4 + 8);
      *(_OWORD *)(v26 + 20) = v28;
      *(_OWORD *)(v26 + 4) = v27;
      a1[1] = v10 + 40;
      return v10;
    }
    goto LABEL_45;
  }
  v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)v7) >> 3) + 1;
  if (v19 > 0x666666666666666)
    goto LABEL_46;
  v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (_QWORD)v7) >> 3);
  v21 = 2 * v20;
  if (2 * v20 <= v19)
    v21 = v19;
  if (v20 >= 0x333333333333333)
    v22 = 0x666666666666666;
  else
    v22 = v21;
  if (v22)
  {
    if (v22 > 0x666666666666666)
      goto LABEL_47;
    v23 = (char *)operator new(40 * v22);
    v24 = (unint64_t)&v23[40 * v9];
    v25 = &v23[40 * v22];
    if ((char *)v24 != v25)
      goto LABEL_35;
  }
  else
  {
    v23 = 0;
    v24 = 40 * v9;
    v25 = 0;
    if (v24)
      goto LABEL_35;
  }
  v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - (_QWORD)v23) >> 3);
  if (v24 > (unint64_t)v23)
  {
    if (v29 >= -1)
      v30 = v29 + 1;
    else
      v30 = v29 + 2;
    v25 = (char *)v24;
    v24 -= 40 * (v30 >> 1);
    goto LABEL_35;
  }
  v35 = 0x999999999999999ALL * ((uint64_t)(v24 - (_QWORD)v23) >> 3);
  if ((char *)v24 == v23)
    v35 = 1;
  if (v35 > 0x666666666666666)
LABEL_47:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v36 = v35 >> 2;
  v37 = 40 * v35;
  v38 = (char *)operator new(40 * v35);
  v24 = (unint64_t)&v38[40 * v36];
  v25 = &v38[v37];
  if (v23)
    operator delete(v23);
LABEL_35:
  if (!v24)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    abort();
  }
  *(_DWORD *)v24 = *a3;
  v39 = *a4;
  v40 = a4[1];
  *(_DWORD *)(v24 + 36) = *((_DWORD *)a4 + 8);
  *(_OWORD *)(v24 + 20) = v40;
  *(_OWORD *)(v24 + 4) = v39;
  v41 = v24 + 40;
  v42 = (char *)*a1;
  v43 = v24;
  if (*a1 != v10)
  {
    v44 = v10;
    v45 = v24;
    do
    {
      v43 = v45 - 40;
      v46 = *(_OWORD *)(v44 - 40);
      v47 = *(_OWORD *)(v44 - 24);
      *(_QWORD *)(v45 - 8) = *(_QWORD *)(v44 - 8);
      *(_OWORD *)(v45 - 24) = v47;
      *(_OWORD *)(v45 - 40) = v46;
      v44 -= 40;
      v45 -= 40;
    }
    while ((char *)v44 != v42);
  }
  for (i = a1[1]; v10 != i; v41 += 40)
  {
    v49 = *(_OWORD *)v10;
    v50 = *(_OWORD *)(v10 + 16);
    *(_QWORD *)(v41 + 32) = *(_QWORD *)(v10 + 32);
    *(_OWORD *)v41 = v49;
    *(_OWORD *)(v41 + 16) = v50;
    v10 += 40;
  }
  v51 = (void *)*a1;
  *a1 = v43;
  a1[1] = v41;
  a1[2] = (unint64_t)v25;
  if (v51)
    operator delete(v51);
  return v24;
}

void webrtc::H265::FindNaluIndices(webrtc::H265 *this@<X0>, const unsigned __int8 *a2@<X1>, char **a3@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;

  webrtc::H264::FindNaluIndices(this, a2, &v21);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = v21;
  v5 = v22;
  if (v21 == v22)
    goto LABEL_24;
  v6 = 0;
  v7 = 0;
  do
  {
    while (1)
    {
      v8 = *(_QWORD *)v4;
      v9 = *((_QWORD *)v4 + 1);
      v10 = *((_QWORD *)v4 + 2);
      v11 = (unint64_t)a3[2];
      if ((unint64_t)v6 < v11)
        break;
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) + 1;
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_28;
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v7) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      if (!v14)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        abort();
      }
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v15 = 24 * v14;
      v16 = (char *)operator new(24 * v14);
      v17 = &v16[8 * ((v6 - v7) >> 3)];
      *(_QWORD *)v17 = v8;
      *((_QWORD *)v17 + 1) = v9;
      *((_QWORD *)v17 + 2) = v10;
      if (v6 != v7)
      {
        v18 = &v16[8 * ((v6 - v7) >> 3)];
        do
        {
          v19 = *(_OWORD *)(v6 - 24);
          v20 = v18 - 24;
          *((_QWORD *)v18 - 1) = *((_QWORD *)v6 - 1);
          *(_OWORD *)(v18 - 24) = v19;
          v6 -= 24;
          v18 -= 24;
        }
        while (v6 != v7);
        v6 = v17 + 24;
        *a3 = v20;
        a3[1] = v17 + 24;
        a3[2] = &v16[v15];
        if (!v7)
          goto LABEL_3;
LABEL_22:
        operator delete(v7);
        goto LABEL_3;
      }
      v20 = &v16[8 * ((v6 - v7) >> 3)];
      v6 = v17 + 24;
      *a3 = v17;
      a3[1] = v17 + 24;
      a3[2] = &v16[v15];
      if (v7)
        goto LABEL_22;
LABEL_3:
      v7 = v20;
      a3[1] = v6;
      v4 += 24;
      if (v4 == v5)
        goto LABEL_23;
    }
    if (!v6)
      goto LABEL_27;
    *(_QWORD *)v6 = v8;
    *((_QWORD *)v6 + 1) = v9;
    *((_QWORD *)v6 + 2) = v10;
    v6 += 24;
    a3[1] = v6;
    v4 += 24;
  }
  while (v4 != v5);
LABEL_23:
  v4 = v21;
LABEL_24:
  if (v4)
  {
    v22 = v4;
    operator delete(v4);
  }
}

void webrtc::H265PpsParser::ParsePps(webrtc::H265PpsParser *this@<X0>, const unsigned __int8 *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *__p;
  _BYTE *v13;

  webrtc::H264::ParseRbsp(this, (size_t)a2, (unint64_t *)&__p);
  if (v13 == __p)
    v11 = 0;
  else
    v11 = __p;
  webrtc::H265PpsParser::ParseInternal((uint64_t)v11, v13 - (_BYTE *)__p, a3, v7, v8, v9, v10, a4);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void webrtc::H265PpsParser::ParseInternal(uint64_t a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  unsigned __int32 v20;
  __int32 v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int32 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  char v37;
  int v38;
  unsigned __int8 *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  signed int v45;
  int v46;
  __int32 v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  signed int v51;
  unsigned int v52;
  webrtc::BitstreamReader *v53;
  signed int v54;
  __int32 v55;
  unsigned __int8 *v56;
  __int32 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  char v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned __int8 *v70;
  BOOL v71;
  unsigned __int8 *v72;
  unsigned __int8 v73;
  int v74;
  unsigned __int8 *v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  __int32 v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  int v92;
  uint64_t v93;
  _BYTE *v94;
  int v95;
  unsigned int v96;
  signed int v97;
  unsigned int v98;
  signed int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  BOOL v108;
  int v109;
  unsigned int v110;
  int v111;
  signed int v112;
  char v113;
  _QWORD v114[3];
  uint8x16_t v115;
  const char *v116;
  uint64_t v117;
  _BYTE *v118;
  _DWORD v119[19];
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v16 = a1;
  else
    v16 = 0;
  v115.i64[0] = v16;
  if (((a2 >> 28) & 0x1FFFFFFFFLL) != 0)
  {
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a4, a5, a6, a7, v105);
    goto LABEL_127;
  }
  v115.i32[2] = 8 * a2;
  v115.i8[12] = 1;
  if (!a3)
    goto LABEL_27;
  v18 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
  v8 = v18;
  v115.i8[12] = 1;
  if (v115.i32[2] < 0 || v18 >= 0x40)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_27;
    goto LABEL_25;
  }
  v19 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
  v9 = v19;
  v115.i8[12] = 1;
  v20 = v115.u32[2];
  if (v115.i32[2] < 0 || v19 >= 0x10)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_27;
    goto LABEL_25;
  }
  v115.i8[12] = 0;
  v21 = --v115.i32[2];
  if (!v20)
    goto LABEL_23;
  v22 = (unsigned __int8 *)v115.i64[0];
  if ((v21 & 7) != 0)
  {
    v13 = *(unsigned __int8 *)v115.i64[0] >> (v21 & 7);
    v23 = v20 - 2;
    v115.i32[2] = v20 - 2;
    v24 = (v20 - 2) & 7;
    if (v24)
      goto LABEL_13;
LABEL_22:
    v34 = v22 + 1;
    v115.i64[0] = (uint64_t)(v22 + 1);
    v35 = *v22;
    v115.i8[12] = 0;
    if (v23 >= 3)
    {
      LODWORD(v14) = 0;
      LOBYTE(v12) = v35 & 1;
      v26 = v20 - 5;
      v115.i32[2] = v20 - 5;
      v37 = 3;
      v22 = v34;
      goto LABEL_30;
    }
LABEL_23:
    v115.i32[2] = -1;
    v115.i8[12] = 1;
    goto LABEL_24;
  }
  ++v115.i64[0];
  LOBYTE(v13) = *v22;
  v115.i8[12] = 0;
  v23 = v20 - 2;
  v115.i32[2] = v20 - 2;
  if (!v21)
    goto LABEL_23;
  ++v22;
  v24 = v23 & 7;
  if ((v23 & 7) == 0)
    goto LABEL_22;
LABEL_13:
  v25 = *v22;
  v115.i8[12] = 0;
  if (v23 < 3)
    goto LABEL_23;
  v12 = (v25 >> v24) & 1;
  v26 = v20 - 5;
  v115.i32[2] = v20 - 5;
  if (v24 < 4)
  {
    v37 = 3 - v24;
    v38 = *v22++;
    v14 = (unint64_t)(v38 & ~(-1 << v24)) << (3 - v24);
    v115.i64[0] = (uint64_t)v22;
    if (v24 == 3)
      goto LABEL_31;
LABEL_30:
    LODWORD(v14) = v14 | (*v22 >> (8 - v37));
    goto LABEL_31;
  }
  LODWORD(v14) = (*v22 >> (v24 - 3)) & 7;
LABEL_31:
  v115.i8[12] = 1;
  if (v20 < 5 || v14 >= 3)
  {
LABEL_24:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_27;
    goto LABEL_25;
  }
  v11 = 0;
  if (v26)
  {
    v39 = &v22[((v20 + 2) >> 3) - ((v20 + 1) >> 3)];
    v115.i64[0] = (uint64_t)v39;
    v115.i8[12] = 0;
    v115.i32[2] = v20 - 7;
    if (v20 != 6)
    {
      if ((((_BYTE)v20 - 7) & 7) != 0)
      {
        v40 = *v39 >> ((v20 - 7) & 7);
      }
      else
      {
        v115.i64[0] = (uint64_t)(v39 + 1);
        LOBYTE(v40) = *v39;
      }
      v11 = v40 & 1;
    }
  }
  else
  {
    v115.i8[12] = 0;
    v115.i32[2] = -2;
  }
  v41 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
  v10 = v41;
  v115.i8[12] = 1;
  if (v115.i32[2] < 0 || v41 >= 0xF)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_27;
    goto LABEL_25;
  }
  v42 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
  v43 = v42;
  v115.i8[12] = 1;
  if (v115.i32[2] < 0 || v42 >= 0xF)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_27;
LABEL_25:
    v36 = (unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    goto LABEL_26;
  }
  v44 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
  if ((v44 & 1) != 0)
    v45 = (v44 + 1) >> 1;
  else
    v45 = -(v44 >> 1);
  v46 = 6 * a3[39];
  v115.i8[12] = 1;
  v47 = v115.i32[2];
  if (v115.i32[2] < 0 || v45 > 25 || v45 < -26 - v46)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_pps_parser.cc");
    goto LABEL_27;
  }
  v111 = v46;
  v112 = v45;
  if (v115.i32[2]
    && (v48 = (v115.i32[2] + 6) >> 3,
        v49 = v115.i64[0] - v48 + ((v115.i32[2] + 7) >> 3),
        v115.i64[0] = v49,
        v115.i32[2] != 1))
  {
    v65 = (_BYTE *)(v49 + v48 - ((v115.i32[2] + 5) >> 3));
    v115.i64[0] = (uint64_t)v65;
    v115.i8[12] = 0;
    v66 = v115.i8[8] - 3;
    v115.i32[2] -= 3;
    if (v47 != 2)
    {
      if ((v66 & 7) != 0)
      {
        v67 = *v65 >> (v66 & 7);
      }
      else
      {
        v115.i64[0] = (uint64_t)(v65 + 1);
        LOBYTE(v67) = *v65;
      }
      if ((v67 & 1) != 0)
      {
        v68 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
        v115.i8[12] = 1;
        if (v115.i32[2] < 0 || v68 > a3[14])
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
            goto LABEL_27;
          v116 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/"
                 "h265/h265_pps_parser.cc";
          v117 = 1130;
          v118 = v119;
          goto LABEL_88;
        }
      }
    }
  }
  else
  {
    v115.i8[12] = 0;
    v115.i32[2] = -2;
  }
  v110 = v43;
  v50 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
  if ((v50 & 1) != 0)
    v51 = (v50 + 1) >> 1;
  else
    v51 = -(v50 >> 1);
  v115.i8[12] = 1;
  if (v115.i32[2] < 0 || v51 < -12 || v51 >= 13)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_27;
    v36 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    goto LABEL_26;
  }
  v52 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
  if ((v52 & 1) != 0)
    v54 = (v52 + 1) >> 1;
  else
    v54 = -(v52 >> 1);
  v115.i8[12] = 1;
  v55 = v115.i32[2];
  if (v115.i32[2] < 0 || v54 < -12 || v54 >= 13)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_27;
    v36 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    goto LABEL_26;
  }
  if (!v115.i32[2])
    goto LABEL_27;
  v56 = (unsigned __int8 *)(v115.i64[0]
                          + (int)(((v115.i32[2] + 7) >> 3) - ((v115.i32[2] + 6) >> 3)));
  v115.i64[0] = (uint64_t)v56;
  v115.i8[12] = 0;
  v57 = v115.i32[2] - 2;
  v115.i32[2] -= 2;
  if (v55 == 1)
    goto LABEL_27;
  if ((v57 & 7) != 0)
  {
    v109 = *v56 >> (v57 & 7);
  }
  else
  {
    v115.i64[0] = (uint64_t)(v56 + 1);
    LOBYTE(v109) = *v56++;
  }
  v115.i8[12] = 0;
  v115.i32[2] = v55 - 3;
  if (!v57)
    goto LABEL_27;
  if ((((_BYTE)v55 - 3) & 7) != 0)
  {
    v69 = (1 << ((v55 - 3) & 7)) & *v56;
  }
  else
  {
    v115.i64[0] = (uint64_t)(v56 + 1);
    if (v55 == 3)
      goto LABEL_27;
    v69 = *v56++ & 1;
  }
  v108 = v69 != 0;
  v70 = &v56[((v55 + 4) >> 3) - ((v55 + 3) >> 3)];
  v115.i64[0] = (uint64_t)v70;
  v115.i8[12] = 0;
  v115.i32[2] = v55 - 5;
  if (v55 == 4)
    goto LABEL_27;
  if ((((_BYTE)v55 - 5) & 7) != 0)
  {
    v71 = ((*v70 >> ((v55 - 5) & 7)) & 1) == 0;
  }
  else
  {
    v72 = v70 + 1;
    v115.i64[0] = (uint64_t)(v70 + 1);
    v73 = *v70;
    v71 = (v73 & 1) == 0;
    v115.i8[12] = 0;
    if (v55 == 5)
    {
      v115.i32[2] = -1;
      if ((v73 & 1) == 0)
        goto LABEL_27;
      goto LABEL_106;
    }
    v70 = v72;
  }
  v74 = v55 - 6;
  v115.i64[0] = (uint64_t)&v70[((v55 + 2) >> 3) - ((v55 + 1) >> 3)];
  v115.i32[2] = v55 - 6;
  if (v71)
    goto LABEL_101;
LABEL_106:
  v78 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
  v79 = v78;
  v115.i8[12] = 1;
  if (v115.i32[2] < 0 || v78 > a3[37] - 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_27;
    v116 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h"
           "265_pps_parser.cc";
    v117 = 1322;
    v118 = v119;
    goto LABEL_88;
  }
  if (v78 >= 0x13)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_27;
LABEL_116:
    rtc::webrtc_logging_impl::Log("\r\t\t", v82, v83, v84, v85, v86, v87, v88, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_pps_parser.cc");
    goto LABEL_27;
  }
  v107 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
  v115.i8[12] = 1;
  v80 = v115.i32[2];
  if (v115.i32[2] < 0 || (v81 = a3[38] - 1, v107 > v81))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_27;
    v116 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h"
           "265_pps_parser.cc";
    v117 = 1362;
    v118 = v119;
LABEL_88:
    v36 = (unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    goto LABEL_26;
  }
  if (!(v79 | v107))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_27;
    goto LABEL_116;
  }
  if (v107 >= 0x15)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_27;
    goto LABEL_116;
  }
  v115.i8[12] = 0;
  v74 = --v115.i32[2];
  if (!v80
    || ((v93 = v115.i64[0], (v74 & 7) == 0)
      ? (++v115.i64[0], LOBYTE(v93) = *(_BYTE *)v93)
      : (LODWORD(v93) = *(unsigned __int8 *)v115.i64[0] >> (v74 & 7)),
        (v93 & 1) == 0))
  {
    v119[v79] = a3[37] - 1;
    if (v79)
    {
      v106 = 0;
      while (1)
      {
        v100 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
        v119[v106] = v100;
        v115.i8[12] = 1;
        v74 = v115.i32[2];
        if (v115.i32[2] < 0)
          break;
        if (v100 < 0)
          break;
        v101 = v119[v79];
        if (v100 >= v101)
          break;
        v119[v79] = v101 + ~v100;
        if (v79 == ++v106)
        {
          v81 = a3[38] - 1;
          goto LABEL_173;
        }
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_27;
      v116 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265"
             "/h265_pps_parser.cc";
      v117 = 1482;
      v118 = v114;
LABEL_185:
      v36 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
      goto LABEL_26;
    }
LABEL_173:
    *((_DWORD *)&v116 + v107) = v81;
    if (v107)
    {
      v102 = 0;
      while (1)
      {
        v103 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
        *(_DWORD *)((char *)&v116 + v102) = v103;
        v115.i8[12] = 1;
        v74 = v115.i32[2];
        if (v115.i32[2] < 0)
          break;
        if (v103 < 0)
          break;
        v104 = *((_DWORD *)&v116 + v107);
        if (v103 >= v104)
          break;
        *((_DWORD *)&v116 + v107) = v104 + ~v103;
        v102 += 4;
        if (4 * v107 == v102)
          goto LABEL_179;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_27;
      v114[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h"
                "265/h265_pps_parser.cc";
      v114[1] = 1562;
      v114[2] = &v113;
      goto LABEL_185;
    }
LABEL_179:
    if (v74 < 1)
    {
      v74 = -1;
    }
    else
    {
      v115.i64[0] += (int)(((v74 + 7) >> 3) - ((v74 + 6) >> 3));
      --v74;
    }
  }
LABEL_101:
  if (v74 < 1)
    goto LABEL_27;
  v75 = (unsigned __int8 *)(v115.i64[0] + (int)(((v74 + 7) >> 3) - ((v74 + 6) >> 3)));
  v115.i64[0] = (uint64_t)v75;
  v115.i8[12] = 0;
  v76 = v74 - 2;
  v115.i32[2] = v74 - 2;
  if (v74 == 1)
    goto LABEL_27;
  if ((v76 & 7) != 0)
  {
    v77 = *v75 >> (v76 & 7);
  }
  else
  {
    v115.i64[0] = (uint64_t)(v75 + 1);
    LOBYTE(v77) = *v75++;
  }
  if ((v77 & 1) != 0)
  {
    if (v74 != 2)
    {
      v91 = &v75[((v74 + 5) >> 3) - ((v74 + 4) >> 3)];
      v115.i64[0] = (uint64_t)v91;
      v115.i8[12] = 0;
      v76 = v74 - 4;
      v115.i32[2] = v74 - 4;
      if (v74 != 3)
      {
        if ((v76 & 7) != 0)
        {
          v92 = *v91 >> (v76 & 7);
        }
        else
        {
          v115.i64[0] = (uint64_t)(v91 + 1);
          LOBYTE(v92) = *v91;
        }
        if ((v92 & 1) != 0)
          goto LABEL_119;
      }
      goto LABEL_146;
    }
LABEL_127:
    v115.i8[12] = 0;
    v115.i32[2] = -2;
LABEL_146:
    v96 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
    if ((v96 & 1) != 0)
      v97 = (v96 + 1) >> 1;
    else
      v97 = -(v96 >> 1);
    v115.i8[12] = 1;
    if (v115.i32[2] < 0 || v97 < -6 || v97 >= 7)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_27;
      v36 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    }
    else
    {
      v98 = webrtc::BitstreamReader::ReadExponentialGolomb(&v115);
      if ((v98 & 1) != 0)
        v99 = (v98 + 1) >> 1;
      else
        v99 = -(v98 >> 1);
      v115.i8[12] = 1;
      v76 = v115.i32[2];
      if ((v115.i32[2] & 0x80000000) == 0 && v99 >= -6 && v99 < 7)
        goto LABEL_119;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_27;
      v36 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    }
LABEL_26:
    rtc::webrtc_logging_impl::Log(v36, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_pps_parser.cc");
    goto LABEL_27;
  }
LABEL_119:
  v115.i8[12] = 0;
  v89 = v76 - 1;
  v115.i32[2] = v76 - 1;
  if (v76 < 1)
    goto LABEL_27;
  v90 = v115.i64[0];
  if ((v89 & 7) != 0)
  {
    LODWORD(v90) = *(unsigned __int8 *)v115.i64[0] >> (v89 & 7);
  }
  else
  {
    ++v115.i64[0];
    LOBYTE(v90) = *(_BYTE *)v90;
  }
  if ((v90 & 1) != 0)
  {
    if (webrtc::H265SpsParser::ParseScalingListData(&v115, v53))
    {
      v89 = v115.i32[2];
      goto LABEL_137;
    }
LABEL_27:
    *(_BYTE *)a8 = 0;
    *(_BYTE *)(a8 + 36) = 0;
    return;
  }
LABEL_137:
  v115.i8[12] = 0;
  v115.i32[2] = v89 - 1;
  if (v89 < 1)
    goto LABEL_27;
  v94 = (_BYTE *)v115.i64[0];
  if ((((_BYTE)v89 - 1) & 7) != 0)
  {
    v95 = *(unsigned __int8 *)v115.i64[0] >> ((v89 - 1) & 7);
  }
  else
  {
    ++v115.i64[0];
    LOBYTE(v95) = *v94;
  }
  *(_BYTE *)a8 = v13 & 1;
  *(_BYTE *)(a8 + 1) = v11;
  *(_BYTE *)(a8 + 2) = v12;
  *(_DWORD *)(a8 + 4) = v14;
  *(_DWORD *)(a8 + 8) = v10;
  *(_DWORD *)(a8 + 12) = v110;
  *(_DWORD *)(a8 + 16) = v112;
  *(_BYTE *)(a8 + 20) = v109 & 1;
  *(_BYTE *)(a8 + 21) = v108;
  *(_BYTE *)(a8 + 22) = v95 & 1;
  *(_DWORD *)(a8 + 24) = v8;
  *(_DWORD *)(a8 + 28) = v9;
  *(_DWORD *)(a8 + 32) = v111;
  *(_BYTE *)(a8 + 36) = 1;
}

uint64_t webrtc::H265LevelToString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 120:
      a2[23] = 3;
      if (a2 <= "120" && a2 + 3 > "120")
        goto LABEL_42;
      *(_DWORD *)a2 = 3158577;
      return result;
    case 121:
    case 122:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 151:
    case 152:
    case 154:
    case 155:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 181:
    case 182:
    case 184:
    case 185:
      goto LABEL_42;
    case 123:
      a2[23] = 3;
      if (a2 <= "123" && a2 + 3 > "123")
        goto LABEL_42;
      *(_DWORD *)a2 = 3355185;
      break;
    case 150:
      a2[23] = 3;
      if (a2 <= "150" && a2 + 3 > "150")
        goto LABEL_42;
      *(_DWORD *)a2 = 3159345;
      break;
    case 153:
      a2[23] = 3;
      if (a2 <= "153" && a2 + 3 > "153")
        goto LABEL_42;
      *(_DWORD *)a2 = 3355953;
      break;
    case 156:
      a2[23] = 3;
      if (a2 <= "156" && a2 + 3 > "156")
        goto LABEL_42;
      *(_DWORD *)a2 = 3552561;
      break;
    case 180:
      a2[23] = 3;
      if (a2 <= "180" && a2 + 3 > "180")
        goto LABEL_42;
      *(_DWORD *)a2 = 3160113;
      break;
    case 183:
      a2[23] = 3;
      if (a2 <= "183" && a2 + 3 > "183")
        goto LABEL_42;
      *(_DWORD *)a2 = 3356721;
      break;
    case 186:
      a2[23] = 3;
      if (a2 <= "186" && a2 + 3 > "186")
LABEL_42:
        __break(1u);
      else
        *(_DWORD *)a2 = 3553329;
      break;
    default:
      switch((int)result)
      {
        case '<':
          a2[23] = 2;
          if (a2 <= "60" && a2 + 2 > "60")
            goto LABEL_42;
          strcpy(a2, "60");
          break;
        case '=':
        case '>':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case '[':
        case '\\':
          goto LABEL_42;
        case '?':
          a2[23] = 2;
          if (a2 <= "63" && a2 + 2 > "63")
            goto LABEL_42;
          strcpy(a2, "63");
          break;
        case 'Z':
          a2[23] = 2;
          if (a2 <= "90" && a2 + 2 > "90")
            goto LABEL_42;
          strcpy(a2, "90");
          break;
        case ']':
          a2[23] = 2;
          if (a2 <= "93" && a2 + 2 > "93")
            goto LABEL_42;
          strcpy(a2, "93");
          break;
        default:
          a2[23] = 2;
          if (a2 <= "30" && a2 + 2 > "30")
            goto LABEL_42;
          strcpy(a2, "30");
          break;
      }
      break;
  }
  return result;
}

void webrtc::ParseSdpForH265ProfileTierLevel(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned __int8 v4;
  uint64_t *v5;
  void **v6;
  void *v7;
  _QWORD *v8;
  size_t v9;
  size_t v11;
  int v12;
  void **v13;
  size_t v14;
  int64_t v15;
  char v16;
  uint64_t *v17;
  unsigned __int8 v18;
  uint64_t *v19;
  void **v20;
  void *v21;
  _QWORD *v22;
  size_t v23;
  size_t v24;
  int v25;
  void **v26;
  size_t v27;
  int64_t v28;
  char v29;
  uint64_t *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  void **v33;
  void *v34;
  _QWORD *v35;
  size_t v36;
  size_t v37;
  int v38;
  void **v39;
  size_t v40;
  void *__s1[2];
  unsigned __int8 v42;

  v42 = 10;
  if (__s1 <= (void **)"profile-id" && (char *)&__s1[1] + 2 > "profile-id")
    goto LABEL_103;
  strcpy((char *)__s1, "profile-id");
  v2 = (uint64_t *)(a1 + 8);
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(a1, (const void **)__s1, *(uint64_t **)(a1 + 8), (uint64_t *)(a1 + 8));
  v4 = v42;
  if (v2 == v3)
    goto LABEL_21;
  v5 = v3;
  if ((v42 & 0x80) != 0)
  {
    v7 = __s1[1];
    if (((unint64_t)__s1[1] & 0x8000000000000000) != 0)
      goto LABEL_103;
    v6 = (void **)__s1[0];
    if (__s1[1])
    {
      if (!__s1[0])
        goto LABEL_103;
    }
  }
  else
  {
    v6 = __s1;
    v7 = (void *)v42;
  }
  v8 = v5 + 4;
  if (*((char *)v5 + 55) < 0)
  {
    v9 = v5[5];
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_103;
    v8 = (_QWORD *)*v8;
    if (v9 && v8 == 0)
      goto LABEL_103;
  }
  else
  {
    v9 = *((unsigned __int8 *)v5 + 55);
  }
  if (v9 >= (unint64_t)v7)
    v11 = (size_t)v7;
  else
    v11 = v9;
  v12 = memcmp(v6, v8, v11);
  if (v12)
  {
    if ((v12 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  if ((unint64_t)v7 < v9)
LABEL_21:
    v5 = (uint64_t *)(a1 + 8);
LABEL_22:
  if ((v4 & 0x80) != 0)
  {
    operator delete(__s1[0]);
    if (v5 != v2)
      goto LABEL_24;
  }
  else if (v5 != v2)
  {
LABEL_24:
    v13 = (void **)(v5 + 7);
    if (*((char *)v5 + 79) < 0)
    {
      v14 = v5[8];
      if ((v14 & 0x8000000000000000) != 0)
        goto LABEL_103;
      v13 = (void **)*v13;
      if (v14)
      {
        if (!v13)
          goto LABEL_103;
      }
    }
    else
    {
      v14 = *((unsigned __int8 *)v5 + 79);
    }
    v15 = rtc::string_to_number_internal::ParseSigned(v13, v14, 10);
    if (!v16 || v15 < (uint64_t)0xFFFFFFFF80000000 || v15 > 0x7FFFFFFF || (v15 - 1) > 0xA)
      return;
  }
  v42 = 9;
  if (__s1 <= (void **)"tier-flag" && (char *)&__s1[1] + 1 > "tier-flag")
    goto LABEL_103;
  strcpy((char *)__s1, "tier-flag");
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(a1, (const void **)__s1, *(uint64_t **)(a1 + 8), (uint64_t *)(a1 + 8));
  v18 = v42;
  if (v2 == v17)
    goto LABEL_55;
  v19 = v17;
  if ((v42 & 0x80) != 0)
  {
    v21 = __s1[1];
    if (((unint64_t)__s1[1] & 0x8000000000000000) != 0)
      goto LABEL_103;
    v20 = (void **)__s1[0];
    if (__s1[1])
    {
      if (!__s1[0])
        goto LABEL_103;
    }
  }
  else
  {
    v20 = __s1;
    v21 = (void *)v42;
  }
  v22 = v19 + 4;
  if (*((char *)v19 + 55) < 0)
  {
    v23 = v19[5];
    if ((v23 & 0x8000000000000000) != 0)
      goto LABEL_103;
    v22 = (_QWORD *)*v22;
    if (v23)
    {
      if (!v22)
        goto LABEL_103;
    }
  }
  else
  {
    v23 = *((unsigned __int8 *)v19 + 55);
  }
  if (v23 >= (unint64_t)v21)
    v24 = (size_t)v21;
  else
    v24 = v23;
  v25 = memcmp(v20, v22, v24);
  if (v25)
  {
    if ((v25 & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
  if ((unint64_t)v21 < v23)
LABEL_55:
    v19 = (uint64_t *)(a1 + 8);
LABEL_56:
  if ((v18 & 0x80) != 0)
  {
    operator delete(__s1[0]);
    if (v19 == v2)
      goto LABEL_71;
  }
  else if (v19 == v2)
  {
    goto LABEL_71;
  }
  v26 = (void **)(v19 + 7);
  if (*((char *)v19 + 79) < 0)
  {
    v27 = v19[8];
    if ((v27 & 0x8000000000000000) != 0)
      goto LABEL_103;
    v26 = (void **)*v26;
    if (v27)
    {
      if (!v26)
        goto LABEL_103;
    }
  }
  else
  {
    v27 = *((unsigned __int8 *)v19 + 79);
  }
  v28 = rtc::string_to_number_internal::ParseSigned(v26, v27, 10);
  if (!v29 || v28 < (uint64_t)0xFFFFFFFF80000000 || v28 > 0x7FFFFFFF || v28 > 1)
    return;
LABEL_71:
  v42 = 8;
  if (__s1 <= (void **)"level-id" && &__s1[1] > (void **)"level-id")
    goto LABEL_103;
  strcpy((char *)__s1, "level-id");
  v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(a1, (const void **)__s1, *(uint64_t **)(a1 + 8), (uint64_t *)(a1 + 8));
  v31 = v42;
  if (v2 == v30)
    goto LABEL_89;
  v32 = v30;
  if ((v42 & 0x80) != 0)
  {
    v34 = __s1[1];
    if (((unint64_t)__s1[1] & 0x8000000000000000) != 0)
      goto LABEL_103;
    v33 = (void **)__s1[0];
    if (__s1[1])
    {
      if (!__s1[0])
        goto LABEL_103;
    }
  }
  else
  {
    v33 = __s1;
    v34 = (void *)v42;
  }
  v35 = v32 + 4;
  if (*((char *)v32 + 55) < 0)
  {
    v36 = v32[5];
    if ((v36 & 0x8000000000000000) == 0)
    {
      v35 = (_QWORD *)*v35;
      if (!v36 || v35)
        goto LABEL_84;
    }
LABEL_103:
    __break(1u);
    return;
  }
  v36 = *((unsigned __int8 *)v32 + 55);
LABEL_84:
  if (v36 >= (unint64_t)v34)
    v37 = (size_t)v34;
  else
    v37 = v36;
  v38 = memcmp(v33, v35, v37);
  if (v38)
  {
    if ((v38 & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_89;
  }
  if ((unint64_t)v34 < v36)
LABEL_89:
    v32 = v2;
LABEL_90:
  if ((v31 & 0x80) != 0)
  {
    operator delete(__s1[0]);
    if (v32 != v2)
      goto LABEL_92;
  }
  else if (v32 != v2)
  {
LABEL_92:
    v39 = (void **)(v32 + 7);
    if ((*((char *)v32 + 79) & 0x80000000) == 0)
    {
      v40 = *((unsigned __int8 *)v32 + 79);
LABEL_101:
      rtc::string_to_number_internal::ParseSigned(v39, v40, 10);
      return;
    }
    v40 = v32[8];
    if ((v40 & 0x8000000000000000) == 0)
    {
      v39 = (void **)*v39;
      if (!v40 || v39)
        goto LABEL_101;
    }
    goto LABEL_103;
  }
}

uint64_t webrtc::H265IsSameProfileTierLevel(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;

  if (*(_QWORD *)(a1 + 16))
    v2 = *(_QWORD *)(a2 + 16) == 0;
  else
    v2 = 1;
  if (v2)
    return 1;
  webrtc::ParseSdpForH265ProfileTierLevel(a1);
  v6 = v5;
  v8 = v7;
  webrtc::ParseSdpForH265ProfileTierLevel(a2);
  if ((v8 & 0xFF00000000) == 0)
    return 0;
  v12 = HIDWORD(v6) == v10 && v8 == v11;
  if ((_DWORD)v6 != v9)
    v12 = 0;
  return (v11 & 0xFF00000000) != 0 && v12;
}

void webrtc::H265SpsParser::ParseSpsInternal(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _BYTE *a7@<X8>)
{
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  __int32 v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  __int32 v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  int v50;
  int v51;
  char v52;
  char v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  __int32 v61;
  char v62;
  uint64_t v63;
  int v64;
  __int32 v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned __int32 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  _DWORD *v87;
  unsigned int v88;
  signed int v89;
  int32x2_t v90;
  int v91;
  int v92;
  void *v93;
  signed int v94;
  signed int v95;
  signed int v96;
  int v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  webrtc::BitstreamReader *v108;
  __int32 v109;
  int v110;
  uint64_t v111;
  int v112;
  __int32 v113;
  uint64_t v114;
  unsigned int v115;
  __int32 v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  char *v121;
  uint64_t v122;
  int v123;
  char v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  __int32 v128;
  BOOL v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  int *v134;
  unint64_t v135;
  unsigned __int8 *v136;
  int v137;
  int v138;
  __int32 v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  _BYTE *v145;
  int v146;
  char v147;
  int v148;
  __int32 v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  signed int v159;
  uint64_t v160;
  _OWORD *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  std::vector<unsigned int>::value_type __src[259];
  char v175;
  int v176;
  unsigned int v177;
  char v178;
  int v179;
  unsigned int v180;
  __int128 v181;
  _DWORD v182[12];
  __int128 __p;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  _QWORD v187[3];
  uint8x16_t v188;
  _QWORD v189[3];
  int v190;
  uint64_t v191;

  v191 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v8 = a1;
  else
    v8 = 0;
  v188.i64[0] = (uint64_t)v8;
  if (((a2 >> 28) & 0x1FFFFFFFFLL) != 0)
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a3, a4, a5, a6, v166);
  v9 = 8 * a2;
  memset(v182, 0, 44);
  v181 = 0u;
  __p = 0u;
  v184 = 0u;
  v185 = 0u;
  v186 = 0u;
  memset(v187, 0, sizeof(v187));
  v188.i8[12] = 0;
  if (!(8 * (_DWORD)a2))
  {
    v188.i32[2] = -1;
    v188.i8[12] = 1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_sps_parser.cc");
    goto LABEL_24;
  }
  v188.i32[2] = v9 - 4;
  v10 = *v8;
  v188.i8[12] = 0;
  v188.i32[2] = v9 - 7;
  v11 = ((unint64_t)*v8 >> 1) & 7;
  v188.i8[12] = 1;
  if ((_DWORD)v11 == 7)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      goto LABEL_23;
    goto LABEL_24;
  }
  v179 = v11;
  v188.i8[12] = 0;
  v188.i64[0] = (uint64_t)&v8[(int)((a2 & 0x1FFFFFFF) - ((8 * a2 - 1) >> 3))];
  v188.i32[2] = v9 - 8;
  webrtc::H265SpsParser::ParseProfileTierLevel((webrtc::H265SpsParser *)1, v11, (unsigned __int8 **)&v188, (uint64_t)&v176);
  if (!v178)
    goto LABEL_24;
  v26 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  HIDWORD(v187[0]) = v26;
  v188.i8[12] = 1;
  if (v188.i32[2] < 0 || v26 >= 0x10)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      goto LABEL_23;
    goto LABEL_24;
  }
  v27 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v28 = v27;
  v180 = v27;
  v188.i8[12] = 1;
  v29 = v188.i32[2];
  if (v188.i32[2] < 0 || v27 >= 4)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_23:
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_sps_parser.cc");
LABEL_24:
    *a7 = 0;
    a7[160] = 0;
LABEL_25:
    if ((_QWORD)__p)
      operator delete((void *)__p);
    return;
  }
  if (v27 == 3)
  {
    v188.i8[12] = 0;
    v30 = v188.i8[8] - 1;
    --v188.i32[2];
    if (v29)
    {
      v31 = v188.i64[0];
      v32 = v30 & 7;
      if (v32)
      {
        LODWORD(v31) = *(unsigned __int8 *)v188.i64[0] >> v32;
      }
      else
      {
        ++v188.i64[0];
        LOBYTE(v31) = *(_BYTE *)v31;
      }
      v33 = v31 & 1;
    }
    else
    {
      v33 = 0;
    }
    LODWORD(v181) = v33;
  }
  else
  {
    v33 = 0;
  }
  v34 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v188.i8[12] = 1;
  if (v188.i32[2] < 0 || (v35 = v34) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_24;
LABEL_83:
    rtc::webrtc_logging_impl::Log("\r\t\t", v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_sps_parser.cc");
    goto LABEL_24;
  }
  v36 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v188.i8[12] = 1;
  v37 = v188.i32[2];
  if (v188.i32[2] < 0 || !v36)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_24;
    goto LABEL_83;
  }
  if ((int)v177 >= 31)
  {
    if (v177 >= 0x3D)
    {
      if (v177 >= 0x40)
      {
        if (v177 >= 0x5B)
        {
          if (v177 >= 0x5E)
          {
            if (v177 >= 0x7C)
            {
              if (v177 >= 0x9D)
                v38 = 35651584;
              else
                v38 = 8912896;
            }
            else
            {
              v38 = 2228224;
            }
          }
          else
          {
            v38 = 983040;
          }
        }
        else
        {
          v38 = 552960;
        }
      }
      else
      {
        v38 = 245760;
      }
    }
    else
    {
      v38 = 122880;
    }
  }
  else
  {
    v38 = 36864;
  }
  v46 = v36 * v35;
  if ((v176 - 1) < 5)
    v47 = 6;
  else
    v47 = 7;
  if (v46 <= v38 >> 2)
  {
    v47 = 16;
  }
  else if (v46 <= v38 >> 1)
  {
    v47 *= 2;
  }
  else if (v46 <= (3 * v38) >> 2)
  {
    v47 = (684 * (v47 & 0x3F)) >> 9;
  }
  v188.i8[12] = 0;
  v48 = v188.i8[8] - 1;
  --v188.i32[2];
  if (v37)
  {
    v49 = v188.i64[0];
    v50 = v48 & 7;
    if (v50)
    {
      LODWORD(v49) = *(unsigned __int8 *)v188.i64[0] >> v50;
    }
    else
    {
      ++v188.i64[0];
      LOBYTE(v49) = *(_BYTE *)v49;
    }
    v51 = v49 & 1;
  }
  else
  {
    v51 = 0;
  }
  v172 = v36;
  v173 = v35;
  if (v33)
    v52 = 0;
  else
    v52 = v28 - 1 < 2;
  if (v33)
    v53 = 0;
  else
    v53 = v28 == 1;
  v171 = v51;
  if (!v51)
  {
    v169 = 0;
    v170 = 0;
    v55 = 0;
    v56 = 0;
    goto LABEL_85;
  }
  v54 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v55 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v56 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v57 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v188.i8[12] = 1;
  if (v188.i32[2] < 0 || (v55 + v54) << v52 >= v173)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_24;
    goto LABEL_83;
  }
  if ((v57 + v56) << v53 >= v172)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_24;
    goto LABEL_83;
  }
  v169 = v57;
  v170 = v54;
LABEL_85:
  v58 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  HIDWORD(v187[2]) = v58;
  v188.i8[12] = 1;
  if (v188.i32[2] < 0 || v58 >= 9)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  v59 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v188.i8[12] = 1;
  if (v188.i32[2] < 0 || v59 >= 9)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  v60 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  HIDWORD(v181) = v60;
  v188.i8[12] = 1;
  v61 = v188.i32[2];
  if (v188.i32[2] < 0 || v60 > 0x7FFFFFFB)
    goto LABEL_24;
  if (v60 >= 0xD)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  v188.i8[12] = 0;
  v62 = v188.i8[8] - 1;
  --v188.i32[2];
  v167 = v56;
  if (v61)
  {
    v63 = v188.i64[0];
    v64 = v62 & 7;
    if (v64)
    {
      LODWORD(v63) = *(unsigned __int8 *)v188.i64[0] >> v64;
    }
    else
    {
      ++v188.i64[0];
      LOBYTE(v63) = *(_BYTE *)v63;
    }
    v61 = v63 & 1;
  }
  v168 = v10 >> 4;
  memset(v189, 0, sizeof(v189));
  v190 = 0;
  v65 = v61;
  if (v61)
    v66 = 0;
  else
    v66 = v11;
  v67 = v11 - v66 + 1;
  v68 = v66;
  do
  {
    v69 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
    v70 = v69;
    v182[v68] = v69;
    v188.i8[12] = 1;
    if (v188.i32[2] < 0 || v69 > v47 - 1)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_142;
LABEL_122:
      v86 = (unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
      goto LABEL_123;
    }
    v71 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
    *(_DWORD *)((char *)v189 + v68 * 4) = v71;
    v188.i8[12] = 1;
    if (v188.i32[2] < 0 || v71 > v70)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        goto LABEL_122;
LABEL_142:
      *a7 = 0;
      a7[160] = 0;
      v93 = (void *)v185;
      if (!(_QWORD)v185)
        goto LABEL_25;
LABEL_143:
      operator delete(v93);
      goto LABEL_25;
    }
    if (v68 * 4)
    {
      if (v70 < v182[v68 - 1])
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          goto LABEL_142;
        goto LABEL_141;
      }
      if (v71 < v188.i32[v68 + 3])
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          goto LABEL_142;
LABEL_141:
        rtc::webrtc_logging_impl::Log("\r\t\t", v72, v73, v74, v75, v76, v77, v78, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_sps_parser.cc");
        goto LABEL_142;
      }
    }
    webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
    ++v68;
    --v67;
  }
  while (v67);
  if (!v65)
  {
    if ((_DWORD)v11)
    {
      v87 = &v182[v11];
      v182[0] = *v87;
      if ((_DWORD)v11 != 1)
      {
        v182[1] = *v87;
        if ((_DWORD)v11 != 2)
        {
          v182[2] = *v87;
          if ((_DWORD)v11 != 3)
          {
            v182[3] = *v87;
            if ((_DWORD)v11 != 4)
            {
              v182[4] = *v87;
              if ((_DWORD)v11 != 5)
                v182[5] = *v87;
            }
          }
        }
      }
    }
  }
  v88 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v89 = v88;
  v182[7] = v88;
  v188.i8[12] = 1;
  if (v188.i32[2] < 0 || v88 >= 0x1C)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_142;
    v86 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    goto LABEL_123;
  }
  v182[8] = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v91 = v89 + 3;
  v92 = v182[8] + v89 + 3;
  v188.i8[12] = 1;
  if (v188.i32[2] < 0 || v92 < 0 || v92 >= 31)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_142;
    v86 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    goto LABEL_123;
  }
  *(float *)v90.i32 = (float)(1 << v92);
  *(uint32x2_t *)((char *)&v187[1] + 4) = vcvt_u32_f32(vrndp_f32(vdiv_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v172, v173)), (float32x2_t)vdup_lane_s32(v90, 0))));
  v188.i8[12] = 1;
  if ((v173 & ~(-8 << v89)) != 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_142;
    goto LABEL_141;
  }
  if ((v172 & ~(-8 << v89)) != 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_142;
    goto LABEL_141;
  }
  v94 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v95 = v94;
  v188.i8[12] = 1;
  if (v188.i32[2] < 0 || v94 < 0 || v94 > v89)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_142;
    v86 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    goto LABEL_123;
  }
  v96 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v188.i8[12] = 1;
  if (v188.i32[2] < 0 || ((v97 = v95 + 2, v92 >= 5) ? (v98 = 5) : (v98 = v92), v96 > (int)(v98 - v97)))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_142;
    goto LABEL_141;
  }
  v99 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v188.i8[12] = 1;
  if (v188.i32[2] < 0 || v99 < 0 || v99 > v92 - v97)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v100, v101, v102, v103, v104, v105, v106, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_sps_parser.cc");
    goto LABEL_142;
  }
  v107 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v188.i8[12] = 1;
  v109 = v188.i32[2];
  if (v188.i32[2] < 0 || v107 < 0 || v107 > v92 - v97)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_142;
    v86 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    goto LABEL_123;
  }
  v188.i8[12] = 0;
  v110 = --v188.i32[2];
  if (!v109)
    goto LABEL_189;
  v111 = v188.i64[0];
  if ((v110 & 7) != 0)
  {
    v112 = *(unsigned __int8 *)v188.i64[0] >> (v110 & 7);
  }
  else
  {
    ++v188.i64[0];
    LOBYTE(v112) = *(_BYTE *)v111++;
  }
  if ((v112 & 1) == 0)
    goto LABEL_186;
  v188.i8[12] = 0;
  v113 = v109 - 2;
  v188.i32[2] = v113;
  if (!v110)
    goto LABEL_189;
  if ((v113 & 7) != 0)
  {
    LODWORD(v111) = *(unsigned __int8 *)v111 >> (v113 & 7);
  }
  else
  {
    v188.i64[0] = v111 + 1;
    LOBYTE(v111) = *(_BYTE *)v111;
  }
  v110 = v113;
  if ((v111 & 1) != 0)
  {
    if (!webrtc::H265SpsParser::ParseScalingListData(&v188, v108))
      goto LABEL_142;
    v110 = v188.i32[2];
  }
LABEL_186:
  if (v110 >= 1)
  {
    v114 = v188.i64[0] + (int)(((v110 + 7) >> 3) - ((v110 + 6) >> 3));
    v188.i64[0] = v114;
    v188.i8[12] = 0;
    v115 = v110 - 2;
    v188.i32[2] = v110 - 2;
    if (v110 == 1)
    {
      v116 = -2;
      goto LABEL_190;
    }
    if ((v115 & 7) != 0)
    {
      LODWORD(v114) = *(unsigned __int8 *)v114 >> (v115 & 7);
    }
    else
    {
      v188.i64[0] = v114 + 1;
      LOBYTE(v114) = *(_BYTE *)v114;
    }
    v182[9] = v114 & 1;
    v188.i8[12] = 0;
    v188.i32[2] = v110 - 3;
    if (v110 >= 3)
    {
      v145 = (_BYTE *)v188.i64[0];
      if ((((_BYTE)v110 - 3) & 7) != 0)
      {
        v146 = *(unsigned __int8 *)v188.i64[0] >> ((v110 - 3) & 7);
      }
      else
      {
        ++v188.i64[0];
        LOBYTE(v146) = *v145++;
      }
      if ((v146 & 1) != 0)
      {
        if (v115 > 4)
        {
          v150 = v110 >> 3;
          v151 = (uint64_t)&v145[((v110 + 4) >> 3) - v150];
          v188.i64[0] = v151;
          v188.i8[12] = 0;
          if ((v110 - 7) >= 4)
          {
            v149 = v110 - 11;
            v188.i64[0] = v151 + v150 - ((v110 - 4) >> 3);
          }
          else
          {
            v149 = -1;
          }
        }
        else
        {
          v188.i8[12] = 0;
          v149 = -1;
        }
        v188.i32[2] = v149;
        v156 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
        v188.i8[12] = 1;
        if (v188.i32[2] < 0 || v156 < 0 || v156 >= 3)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
            goto LABEL_142;
          v86 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
        }
        else
        {
          v157 = v156 + 3;
          if (v91 >= 5)
            v158 = 5;
          else
            v158 = v91;
          if (v157 >= v158 && v98 >= v157)
          {
            v159 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
            v188.i8[12] = 1;
            if (v188.i32[2] < 0 || v159 > (int)(v98 - v157))
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                goto LABEL_142;
              goto LABEL_141;
            }
            v188.i8[12] = 0;
            if (v188.i32[2])
            {
              v116 = v188.i32[2] - 1;
              v188.i64[0] += (int)(((v188.i32[2] + 7) >> 3) - ((v188.i32[2] + 6) >> 3));
            }
            else
            {
              v116 = -1;
            }
            goto LABEL_191;
          }
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
            goto LABEL_142;
          v86 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
        }
LABEL_123:
        rtc::webrtc_logging_impl::Log(v86, v79, v80, v81, v82, v83, v84, v85, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_sps_parser.cc");
        goto LABEL_142;
      }
    }
  }
  else
  {
LABEL_189:
    v116 = -3;
LABEL_190:
    v182[9] = 0;
    v188.i8[12] = 0;
LABEL_191:
    v188.i32[2] = v116;
  }
  v117 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  v182[10] = v117;
  v188.i8[12] = 1;
  if (v188.i32[2] < 0 || v117 >= 0x41)
    goto LABEL_142;
  std::vector<webrtc::H265SpsParser::ShortTermRefPicSet>::resize((void **)&__p, v117);
  v118 = v182[10];
  if (v182[10])
  {
    v119 = 0;
    v120 = v182[v179];
    v121 = (char *)__p;
    v122 = (*((_QWORD *)&__p + 1) - (_QWORD)__p) / 1036;
    do
    {
      webrtc::H265SpsParser::ParseShortTermRefPicSet(v119, v118, (uint64_t *)&__p, v120, &v188, __src);
      if (!v175)
        goto LABEL_142;
      if (v122 == v119)
        goto LABEL_291;
      memcpy(v121, __src, 0x40CuLL);
      ++v119;
      v121 += 1036;
    }
    while (v118 != v119);
  }
  v188.i8[12] = 0;
  v123 = v188.i32[2];
  v124 = v188.i8[8] - 1;
  --v188.i32[2];
  if (v123 <= 0)
  {
    v127 = 0;
    DWORD2(v184) = 0;
    v188.i8[12] = 0;
    v128 = v123 - 2;
    v188.i32[2] = v128;
    goto LABEL_237;
  }
  v125 = v188.i64[0];
  v126 = v124 & 7;
  if (v126)
  {
    LODWORD(v125) = *(unsigned __int8 *)v188.i64[0] >> v126;
  }
  else
  {
    ++v188.i64[0];
    LOBYTE(v125) = *(_BYTE *)v125;
  }
  DWORD2(v184) = v125 & 1;
  if ((v125 & 1) == 0)
    goto LABEL_207;
  v131 = webrtc::BitstreamReader::ReadExponentialGolomb(&v188);
  HIDWORD(v184) = v131;
  v188.i8[12] = 1;
  if (v188.i32[2] < 0 || v131 >= 0x21)
    goto LABEL_142;
  __src[0] = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)&v185, v131, __src);
  v132 = HIDWORD(v184);
  if (!HIDWORD(v184))
  {
LABEL_207:
    v188.i8[12] = 0;
    v129 = __OFSUB__(v188.i32[2], 1);
    v128 = v188.i32[2] - 1;
    v188.i32[2] = v128;
    if (v128 < 0 != v129)
    {
      v127 = 0;
    }
    else
    {
      v130 = v188.i64[0];
      if ((v128 & 7) != 0)
      {
        LODWORD(v130) = *(unsigned __int8 *)v188.i64[0] >> (v128 & 7);
      }
      else
      {
        ++v188.i64[0];
        LOBYTE(v130) = *(_BYTE *)v130;
      }
      v127 = v130 & 1;
    }
LABEL_237:
    *(_QWORD *)((char *)&v181 + 4) = __PAIR64__(v172, v173);
    *((_QWORD *)&v186 + 1) = __PAIR64__(v173, v127);
    LODWORD(v187[1]) = v168;
    LODWORD(v187[0]) = v172;
    if (v171)
    {
      v147 = v180 == 1;
      if ((_DWORD)v181)
        v147 = 0;
      if (v180 - 1 < 2 && (_DWORD)v181 == 0)
        v148 = -2;
      else
        v148 = -1;
      HIDWORD(v186) = v173 + v148 * (v55 + v170);
      LODWORD(v187[0]) = v172 - ((v169 + v167) << v147);
    }
    v188.i8[12] = 1;
    if (v128 < 0)
      goto LABEL_142;
    std::__optional_destruct_base<webrtc::H265SpsParser::SpsState,false>::__optional_destruct_base[abi:sn180100]<webrtc::H265SpsParser::SpsState&>((uint64_t)a7, (uint64_t)&v179);
    v93 = (void *)v185;
    if ((_QWORD)v185)
      goto LABEL_143;
    goto LABEL_25;
  }
  v133 = HIDWORD(v181) + 4;
  v134 = (int *)v185;
  v135 = (uint64_t)(*((_QWORD *)&v185 + 1) - v185) >> 2;
  if (HIDWORD(v181) + 4 < 0)
  {
    v152 = HIDWORD(v184) - 1;
    if (v135 >= v152)
      v153 = HIDWORD(v184) - 1;
    else
      v153 = (uint64_t)(*((_QWORD *)&v185 + 1) - v185) >> 2;
    v154 = v153 + 1;
    if (v154 <= 0xC)
      goto LABEL_261;
    if (v135 < v152)
      v152 = (uint64_t)(*((_QWORD *)&v185 + 1) - v185) >> 2;
    if ((unint64_t)&v188.u64[1] >= (unint64_t)v185 + 4 * v152 + 4
      || (unint64_t)v185 >= (unint64_t)&v188.u64[1] + 4)
    {
      v160 = v154 & 7;
      if ((v154 & 7) == 0)
        v160 = 8;
      v155 = v154 - v160;
      v188.i32[2] = -2;
      v161 = (_OWORD *)(v185 + 16);
      v162 = v155;
      do
      {
        *(v161 - 1) = 0uLL;
        *v161 = 0uLL;
        v161 += 2;
        v162 -= 8;
      }
      while (v162);
    }
    else
    {
LABEL_261:
      v155 = 0;
    }
    v163 = v135 - v155;
    v164 = v132 - v155;
    v165 = &v134[v155];
    while (1)
    {
      v188.i32[2] = -2;
      if (!v163)
        break;
      *v165++ = 0;
      --v163;
      if (!--v164)
        goto LABEL_207;
    }
    v188.i8[12] = 0;
  }
  else
  {
    v136 = (unsigned __int8 *)v188.i64[0];
    while (1)
    {
      v137 = v188.i32[2] - v133;
      if (v188.i32[2] >= v133)
      {
        v139 = v188.i32[2] + 14;
        if (v188.i32[2] >= -7)
          v139 = v188.i32[2] + 7;
        v140 = v139 >> 3;
        v141 = v137 + 7;
        if (v137 < -7)
          v141 = v137 + 14;
        v136 += v140 - (v141 >> 3);
        v188.i64[0] = (uint64_t)v136;
        v188.i8[12] = 0;
        v129 = __OFSUB__(v137, 1);
        v142 = v137 - 1;
        v188.i32[2] = v142;
        if (v142 < 0 != v129)
        {
          v138 = 0;
        }
        else
        {
          v143 = v142 & 7;
          if (v143)
          {
            v144 = *v136 >> v143;
          }
          else
          {
            v188.i64[0] = (uint64_t)(v136 + 1);
            LOBYTE(v144) = *v136++;
          }
          v138 = v144 & 1;
        }
      }
      else
      {
        v138 = 0;
        v188.i8[12] = 0;
        v188.i32[2] = -2;
      }
      if (!v135)
        break;
      *v134++ = v138;
      --v135;
      if (!--v132)
        goto LABEL_207;
    }
  }
LABEL_291:
  __break(1u);
}

uint64_t webrtc::H265SpsParser::ParseScalingListData(uint8x16_t *this, webrtc::BitstreamReader *a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  char v9;
  _BYTE *v10;
  int v11;
  signed int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  signed int v17;
  unsigned int i;
  char v19;
  _BYTE *v20;
  int v21;
  int ExponentialGolomb;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  signed int v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = 0;
  while (1)
  {
    v4 = 16 << (2 * v3);
    if (v4 >= 0x40)
      v4 = 64;
    v5 = v4 <= 1 ? 1 : v4;
    v6 = this->i32[2];
    v7 = v3 == 3 ? 3 : 1;
    if (v3 < 3)
      break;
    for (i = 0; i < 6; i += v7)
    {
      this->i8[12] = 0;
      v19 = v6 - 1;
      this->i32[2] = v6 - 1;
      if (v6 < 1)
      {
LABEL_39:
        ExponentialGolomb = webrtc::BitstreamReader::ReadExponentialGolomb(this);
        this->i8[12] = 1;
        v6 = this->i32[2];
        if (v6 < 0 || ExponentialGolomb < 0 || ExponentialGolomb > (i > 2))
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            goto LABEL_61;
          return 0;
        }
        continue;
      }
      v20 = (_BYTE *)this->i64[0];
      v21 = v19 & 7;
      if (v21)
      {
        if (((*v20 >> v21) & 1) == 0)
          goto LABEL_39;
      }
      else
      {
        this->i64[0] = (uint64_t)(v20 + 1);
        if ((*v20 & 1) == 0)
          goto LABEL_39;
      }
      v23 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
      if ((v23 & 1) != 0)
        v24 = (v23 + 1) >> 1;
      else
        v24 = -(v23 >> 1);
      this->i8[12] = 1;
      if (this->i32[2] < 0 || (v25 = v5, v24 - 248 < 0xFFFFFF01))
      {
LABEL_67:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          goto LABEL_61;
        return 0;
      }
      do
      {
        v26 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
        if ((v26 & 1) != 0)
          v27 = (v26 + 1) >> 1;
        else
          v27 = -(v26 >> 1);
        this->i8[12] = 1;
        v6 = this->i32[2];
        if (v6 < 0 || v27 < -128 || v27 >= 128)
          goto LABEL_60;
        --v25;
      }
      while (v25);
    }
LABEL_58:
    if (++v3 == 4)
    {
      result = 1;
      this->i8[12] = 1;
      return result;
    }
  }
  v8 = 0;
  while (1)
  {
    this->i8[12] = 0;
    v9 = v6 - 1;
    this->i32[2] = v6 - 1;
    if (v6 < 1)
      goto LABEL_15;
    v10 = (_BYTE *)this->i64[0];
    v11 = v9 & 7;
    if (!v11)
      break;
    if (((*v10 >> v11) & 1) != 0)
      goto LABEL_21;
LABEL_15:
    v12 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
    this->i8[12] = 1;
    v6 = this->i32[2];
    if (v6 < 0 || v12 < 0 || v12 > (int)v8)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        return 0;
      goto LABEL_61;
    }
LABEL_18:
    v8 += v7;
    if (v8 > 5)
      goto LABEL_58;
  }
  this->i64[0] = (uint64_t)(v10 + 1);
  if ((*v10 & 1) == 0)
    goto LABEL_15;
LABEL_21:
  v13 = v5;
  if (v3 >= 2)
  {
    v14 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
    v15 = (v14 & 1) != 0 ? (v14 + 1) >> 1 : -(v14 >> 1);
    this->i8[12] = 1;
    if (this->i32[2] < 0)
      goto LABEL_67;
    v13 = v5;
    if (v15 - 248 < 0xFFFFFF01)
      goto LABEL_67;
  }
  while (1)
  {
    v16 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
    v17 = (v16 & 1) != 0 ? (v16 + 1) >> 1 : -(v16 >> 1);
    this->i8[12] = 1;
    v6 = this->i32[2];
    if (v6 < 0 || v17 < -128 || v17 > 127)
      break;
    if (!--v13)
      goto LABEL_18;
  }
LABEL_60:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_61:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_sps_parser.cc");
  return 0;
}

void webrtc::H265SpsParser::ParseShortTermRefPicSet(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, uint8x16_t *a5@<X4>, _BYTE *a6@<X8>)
{
  __int32 v12;
  BOOL v13;
  int v14;
  _BYTE *v15;
  unsigned int ExponentialGolomb;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  char *v44;
  int v45;
  int v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  int *v59;
  unsigned __int8 *v60;
  _BYTE *v61;
  uint64_t v62;
  int v63;
  int v64;
  _DWORD *v65;
  int v66;
  int v67;
  _BYTE *v68;
  uint64_t v69;
  _DWORD *v70;
  _BYTE *v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  _DWORD *v76;
  uint64_t v77;
  _DWORD *v78;
  _BYTE *v79;
  int v80;
  int v81;
  _DWORD *v82;
  int *v83;
  int v84;
  int v85;
  _DWORD *v86;
  char v87;
  const char *v88;
  uint64_t v89;
  char *v90;
  _DWORD __src[259];
  _OWORD v92[4];
  _BYTE v93[72];
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  bzero(__src, 0x40CuLL);
  if (!a1
    || (a5->i8[12] = 0, v12 = a5->i32[2], v13 = __OFSUB__(v12, 1), v14 = v12 - 1, a5->i32[2] = v14, (v14 < 0) ^ v13))
  {
LABEL_5:
    ExponentialGolomb = webrtc::BitstreamReader::ReadExponentialGolomb(a5);
    __src[0] = ExponentialGolomb;
    v17 = webrtc::BitstreamReader::ReadExponentialGolomb(a5);
    __src[1] = v17;
    a5->i8[12] = 1;
    v18 = a5->i32[2];
    if (v18 < 0)
      goto LABEL_66;
    if (ExponentialGolomb > 0x10)
      goto LABEL_66;
    v19 = v17;
    if (v17 > 0x10 || v17 + ExponentialGolomb >= 0x11)
      goto LABEL_66;
    if (a4 < ExponentialGolomb)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_66;
LABEL_64:
      v51 = (unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
      goto LABEL_65;
    }
    if (v17 > a4 - ExponentialGolomb)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_66;
      goto LABEL_64;
    }
    if (ExponentialGolomb)
    {
      v29 = webrtc::BitstreamReader::ReadExponentialGolomb(a5);
      a5->i8[12] = 1;
      v30 = a5->i32[2];
      if ((v30 & 0x80000000) == 0 && (v29 & 0x80000000) == 0 && v29 < 0x8000)
      {
        __src[2] = ~v29;
        a5->i8[12] = 0;
        v18 = v30 - 1;
        a5->i32[2] = v30 - 1;
        if (v30)
        {
          v31 = (_BYTE *)a5->i64[0];
          if ((v18 & 7) != 0)
          {
            LODWORD(v31) = *v31 >> (v18 & 7);
          }
          else
          {
            a5->i64[0] = (uint64_t)(v31 + 1);
            LOBYTE(v31) = *v31;
          }
          v30 = v31 & 1;
        }
        __src[66] = v30;
        if (ExponentialGolomb == 1)
          goto LABEL_85;
        v69 = ExponentialGolomb - 1;
        v70 = __src;
        while (1)
        {
          v73 = webrtc::BitstreamReader::ReadExponentialGolomb(a5);
          a5->i8[12] = 1;
          v72 = a5->i32[2];
          if (v72 < 0 || v73 < 0 || v73 >= 0x8000)
            break;
          v70[3] = v70[2] + ~v73;
          a5->i8[12] = 0;
          v18 = v72 - 1;
          a5->i32[2] = v72 - 1;
          if (v72)
          {
            v71 = (_BYTE *)a5->i64[0];
            if ((v18 & 7) != 0)
            {
              LODWORD(v71) = *v71 >> (v18 & 7);
            }
            else
            {
              a5->i64[0] = (uint64_t)(v71 + 1);
              LOBYTE(v71) = *v71;
            }
            v72 = v71 & 1;
          }
          v70[67] = v72;
          ++v70;
          if (!--v69)
            goto LABEL_85;
        }
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_66;
      v51 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
      goto LABEL_65;
    }
LABEL_85:
    if (v19)
    {
      v66 = webrtc::BitstreamReader::ReadExponentialGolomb(a5);
      a5->i8[12] = 1;
      v67 = a5->i32[2];
      if ((v67 & 0x80000000) == 0 && (v66 & 0x80000000) == 0 && v66 < 0x8000)
      {
        __src[130] = v66 + 1;
        a5->i8[12] = 0;
        v18 = v67 - 1;
        a5->i32[2] = v67 - 1;
        if (v67)
        {
          v68 = (_BYTE *)a5->i64[0];
          if ((v18 & 7) != 0)
          {
            LODWORD(v68) = *v68 >> (v18 & 7);
          }
          else
          {
            a5->i64[0] = (uint64_t)(v68 + 1);
            LOBYTE(v68) = *v68;
          }
          v67 = v68 & 1;
        }
        __src[194] = v67;
        if (v19 == 1)
        {
          v19 = 1;
          goto LABEL_142;
        }
        v77 = v19 - 1;
        v78 = &__src[130];
        while (1)
        {
          v81 = webrtc::BitstreamReader::ReadExponentialGolomb(a5);
          a5->i8[12] = 1;
          v80 = a5->i32[2];
          if (v80 < 0 || v81 < 0 || v81 >= 0x8000)
            break;
          v78[1] = v81 + *v78 + 1;
          a5->i8[12] = 0;
          v18 = v80 - 1;
          a5->i32[2] = v80 - 1;
          if (v80)
          {
            v79 = (_BYTE *)a5->i64[0];
            if ((v18 & 7) != 0)
            {
              LODWORD(v79) = *v79 >> (v18 & 7);
            }
            else
            {
              a5->i64[0] = (uint64_t)(v79 + 1);
              LOBYTE(v79) = *v79;
            }
            v80 = v79 & 1;
          }
          v78[65] = v80;
          ++v78;
          if (!--v77)
            goto LABEL_142;
        }
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_66;
      v51 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
LABEL_65:
      rtc::webrtc_logging_impl::Log(v51, v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_sps_parser.cc");
      goto LABEL_66;
    }
LABEL_142:
    __src[258] = ExponentialGolomb + v19;
    a5->i8[12] = 1;
    if (v18 < 0)
      goto LABEL_66;
    memcpy(a6, __src, 0x40CuLL);
    a6[1036] = 1;
    return;
  }
  v15 = (_BYTE *)a5->i64[0];
  if ((v14 & 7) != 0)
  {
    if (((*v15 >> (v14 & 7)) & 1) == 0)
      goto LABEL_5;
  }
  else
  {
    a5->i64[0] = (uint64_t)(v15 + 1);
    if ((*v15 & 1) == 0)
      goto LABEL_5;
  }
  if (a1 == a2)
  {
    v27 = webrtc::BitstreamReader::ReadExponentialGolomb(a5);
    v28 = v27;
    a5->i8[12] = 1;
    v14 = a5->i32[2];
    if (v14 < 0 || v27 > a1 - 1)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_66;
      goto LABEL_64;
    }
  }
  else
  {
    v28 = 0;
  }
  a5->i8[12] = 0;
  if (v14)
  {
    v32 = v14 & 7;
    a5->i32[2] = v14 - 1;
    v33 = *(unsigned __int8 *)a5->i64[0];
    if (v32 < 2)
    {
      if (v32 == 1)
      {
        v34 = v33 & 1;
        ++a5->i64[0];
      }
      else
      {
        v34 = v33 >> 7;
      }
    }
    else
    {
      v34 = (v33 >> (v32 - 1)) & 1;
    }
  }
  else
  {
    v34 = 0;
    a5->i32[2] = -1;
  }
  v35 = webrtc::BitstreamReader::ReadExponentialGolomb(a5);
  a5->i8[12] = 1;
  v18 = a5->i32[2];
  if (v18 < 0 || v35 < 0 || v35 >= 0x8000)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_66;
    v51 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    goto LABEL_65;
  }
  v36 = ~v28 + a1;
  v37 = *a3;
  if (0x2F71AAFF02F71ABLL * ((a3[1] - *a3) >> 2) <= v36)
  {
    __break(1u);
    return;
  }
  v38 = (unsigned int *)(v37 + 1036 * v36);
  v39 = v38[258];
  if (v18 < 0 || v39 >= 0x41)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_66;
    goto LABEL_64;
  }
  v40 = 0;
  v41 = v35 + 1 - 2 * v34 * (v35 + 1);
  memset(v93, 0, 64);
  v42 = v39 + 1;
  *(_QWORD *)&v43 = 0x101010101010101;
  *((_QWORD *)&v43 + 1) = 0x101010101010101;
  v92[2] = v43;
  v92[3] = v43;
  v92[0] = v43;
  v92[1] = v43;
  v44 = (char *)a5->i64[0];
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            a5->i8[12] = 0;
            v45 = v18 - 1;
            a5->i32[2] = v18 - 1;
            if (v18 > 0)
              break;
            v93[v40] = 0;
            a5->i8[12] = 0;
            v18 -= 2;
            a5->i32[2] = v18;
            *((_BYTE *)v92 + v40++) = 0;
            if (v42 == v40)
              goto LABEL_57;
          }
          if ((v45 & 7) == 0)
            break;
          v46 = *v44 >> (v45 & 7);
          v93[v40] = v46 & 1;
          if ((v46 & 1) == 0)
            goto LABEL_47;
LABEL_52:
          --v18;
          if (v42 == ++v40)
            goto LABEL_57;
        }
        a5->i64[0] = (uint64_t)(v44 + 1);
        v47 = *v44++;
        v93[v40] = v47 & 1;
        if ((v47 & 1) != 0)
          goto LABEL_52;
LABEL_47:
        a5->i8[12] = 0;
        v18 -= 2;
        a5->i32[2] = v18;
        if (v45)
          break;
        v18 = -1;
        *((_BYTE *)v92 + v40++) = 0;
        if (v42 == v40)
          goto LABEL_57;
      }
      if ((v18 & 7) == 0)
        break;
      *((_BYTE *)v92 + v40++) = (*v44 >> (v18 & 7)) & 1;
      if (v42 == v40)
        goto LABEL_57;
    }
    a5->i64[0] = (uint64_t)(v44 + 1);
    v48 = *v44++;
    *((_BYTE *)v92 + v40++) = v48 & 1;
  }
  while (v42 != v40);
LABEL_57:
  a5->i8[12] = 1;
  if ((v18 & 0x80000000) == 0)
  {
    v49 = *(unsigned int *)(v37 + 1036 * v36 + 4);
    v50 = *v38;
    if ((v50 + v49) <= 0x40)
    {
      v52 = 0;
      v53 = (v49 - 1);
      if ((int)v49 - 1 >= 0)
      {
        do
        {
          v55 = *(_DWORD *)(v37 + 1036 * v36 + 520 + 4 * v53) + v41;
          if (v55 < 0)
          {
            v56 = (v50 + v53);
            if (*((_BYTE *)v92 + v56))
            {
              v57 = &__src[v52];
              v57[2] = v55;
              ++v52;
              v57[66] = v93[v56];
            }
          }
          v54 = v53-- <= 0;
        }
        while (!v54);
      }
      if (v41 < 0 && *((_BYTE *)v92 + v39))
      {
        v58 = &__src[v52];
        v58[2] = v41;
        ++v52;
        v58[66] = v93[v39];
      }
      if ((_DWORD)v50)
      {
        v59 = (int *)(v37 + 1036 * v36 + 8);
        v60 = v93;
        v61 = v92;
        v62 = v50;
        do
        {
          v63 = *v59++;
          v64 = v63 + v41;
          if (v63 + v41 < 0 && *v61)
          {
            v65 = &__src[v52];
            v65[2] = v64;
            ++v52;
            v65[66] = *v60;
          }
          ++v60;
          ++v61;
          --v62;
        }
        while (v62);
        __src[0] = v52;
        v19 = 0;
        v74 = (v50 - 1);
        if ((int)v50 - 1 >= 0)
        {
          do
          {
            v75 = *(_DWORD *)(v37 + 1036 * v36 + 8 + 4 * v74) + v41;
            if (v75 >= 1 && *((_BYTE *)v92 + v74))
            {
              v76 = &__src[v19];
              v76[130] = v75;
              ++v19;
              v76[194] = v93[v74];
            }
            v54 = v74-- <= 0;
          }
          while (!v54);
        }
      }
      else
      {
        v19 = 0;
        __src[0] = v52;
      }
      if (v41 > 0 && *((_BYTE *)v92 + v39))
      {
        v82 = &__src[v19];
        v82[130] = v41;
        ++v19;
        v82[194] = v93[v39];
      }
      if ((_DWORD)v49)
      {
        v83 = (int *)(v37 + 1036 * v36 + 520);
        do
        {
          v84 = *v83++;
          v85 = v84 + v41;
          if (v84 + v41 >= 1 && *((_BYTE *)v92 + v50))
          {
            v86 = &__src[v19];
            v86[130] = v85;
            ++v19;
            v86[194] = v93[v50];
          }
          LODWORD(v50) = v50 + 1;
          --v49;
        }
        while (v49);
      }
      __src[1] = v19;
      a5->i8[12] = 1;
      ExponentialGolomb = __src[0];
      if (a4 < __src[0])
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          goto LABEL_66;
        goto LABEL_64;
      }
      if (v19 > a4 - __src[0])
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          goto LABEL_66;
        goto LABEL_64;
      }
      goto LABEL_142;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    v88 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h2"
          "65_sps_parser.cc";
    v89 = 1690;
    v90 = &v87;
    goto LABEL_64;
  }
LABEL_66:
  *a6 = 0;
  a6[1036] = 0;
}

void webrtc::H265SpsParser::ParseProfileTierLevel(webrtc::H265SpsParser *this@<X0>, int a2@<W1>, unsigned __int8 **a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _BYTE *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned __int8 *v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  unsigned __int8 *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  uint64_t v96;
  _QWORD v97[2];

  v97[1] = *MEMORY[0x24BDAC8D0];
  if ((this & 1) == 0)
  {
    v7 = 0;
    LOBYTE(v8) = 0;
    LOBYTE(v9) = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    LODWORD(v13) = 0;
    v14 = *((_DWORD *)a3 + 2);
    goto LABEL_5;
  }
  *((_BYTE *)a3 + 12) = 0;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 <= 1)
  {
    *((_DWORD *)a3 + 2) = -1;
    *((_BYTE *)a3 + 12) = 1;
    goto LABEL_44;
  }
  v19 = (_DWORD)a3[1] & 7;
  *((_DWORD *)a3 + 2) = v6 - 2;
  v20 = *a3;
  if ((v6 & 7u) >= 3)
  {
    v21 = (*v20 >> (v19 - 2)) & 3;
    goto LABEL_43;
  }
  if ((v6 & 7) != 0)
  {
    v22 = *v20++;
    v21 = (unint64_t)(v22 & ~(-1 << v19)) << (2 - v19);
    *a3 = v20;
    if (v19 == 2)
      goto LABEL_43;
    v23 = 7;
  }
  else
  {
    v21 = 0;
    v23 = 6;
  }
  v21 |= *v20 >> v23;
LABEL_43:
  *((_BYTE *)a3 + 12) = 1;
  if (v21)
  {
LABEL_44:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t", v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_sps_parser.cc");
LABEL_46:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 20) = 0;
    return;
  }
  *((_BYTE *)a3 + 12) = 0;
  if (v6 == 2
    || (v40 = &v20[((v6 + 5) >> 3) - ((v6 + 4) >> 3)],
        *a3 = v40,
        *((_DWORD *)a3 + 2) = v6 - 3,
        (v6 - 2) <= 5))
  {
    *((_DWORD *)a3 + 2) = -1;
    *((_BYTE *)a3 + 12) = 1;
    goto LABEL_50;
  }
  v48 = ((_BYTE)v6 - 3) & 7;
  *((_DWORD *)a3 + 2) = v6 - 8;
  if (v48 >= 6)
  {
    LODWORD(v13) = (*v40 >> (v48 - 5)) & 0x1F;
    goto LABEL_70;
  }
  v49 = 5;
  if (!v48)
  {
    LODWORD(v13) = 0;
    goto LABEL_69;
  }
  v49 = 5 - v48;
  v50 = *v40++;
  v13 = (unint64_t)(v50 & ~(-1 << v48)) << (5 - v48);
  *a3 = v40;
  if (v48 != 5)
LABEL_69:
    LODWORD(v13) = v13 | (*v40 >> (8 - v49));
LABEL_70:
  *((_BYTE *)a3 + 12) = 1;
  if (v13 >= 0xC)
  {
LABEL_50:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_sps_parser.cc");
    goto LABEL_46;
  }
  *((_BYTE *)a3 + 12) = 0;
  if ((v6 - 8) < 0x10)
    goto LABEL_131;
  *((_DWORD *)a3 + 2) = v6 - 24;
  v51 = 16;
  if ((v6 & 7) != 0)
  {
    v51 = 16 - v19;
    v52 = *v40++;
    v53 = (unint64_t)(v52 & ~(-1 << v19)) << (16 - v19);
    *a3 = v40;
  }
  else
  {
    v53 = 0;
  }
  v54 = v51 - 8;
  v55 = v40 + 1;
  v56 = ((unint64_t)*v40 << (v51 - 8)) | v53;
  *a3 = v40 + 1;
  if (v51 >= 0x10)
  {
    v54 = v51 - 16;
    v56 |= (unint64_t)v40[1] << (v51 - 16);
    v57 = v40 + 2;
    *a3 = v40 + 2;
    ++v40;
    v55 = v57;
  }
  if (v54)
    LODWORD(v56) = v56 | (*v55 >> (8 - v54));
  *((_BYTE *)a3 + 12) = 0;
  if (v6 < 40)
    goto LABEL_131;
  *((_DWORD *)a3 + 2) = v6 - 40;
  v58 = 16;
  if ((v6 & 7) != 0)
  {
    v58 = 16 - v19;
    v59 = (unint64_t)(*v55 & ~(-1 << v19)) << (16 - v19);
    v55 = v40 + 2;
    *a3 = v40 + 2;
  }
  else
  {
    v59 = 0;
  }
  v60 = v58 - 8;
  v61 = v55 + 1;
  v62 = ((unint64_t)*v55 << (v58 - 8)) | v59;
  *a3 = v55 + 1;
  if (v58 >= 0x10)
  {
    v60 = v58 - 16;
    v62 |= (unint64_t)v55[1] << (v58 - 16);
    v63 = v55 + 2;
    *a3 = v55 + 2;
    ++v55;
    v61 = v63;
  }
  if (v60)
    LODWORD(v62) = v62 | (*v61 >> (8 - v60));
  *((_BYTE *)a3 + 12) = 0;
  if (v6 < 41
    || ((*((_DWORD *)a3 + 2) = v6 - 41, v64 = *v61, v19 < 2)
      ? (v19 != 1
       ? (unsigned __int8 *)(v65 = v64 >> 7)
       : (v65 = v64 & 1, v61 = v55 + 2, *a3 = v55 + 2))
      : (unsigned __int8 *)(v65 = (v64 >> (v19 - 1)) & 1),
        v11 = v65 != 0,
        *((_BYTE *)a3 + 12) = 0,
        v6 <= 0x29))
  {
LABEL_131:
    *((_DWORD *)a3 + 2) = -1;
    *((_BYTE *)a3 + 12) = 1;
    goto LABEL_132;
  }
  v85 = ((_BYTE)v6 - 41) & 7;
  *((_DWORD *)a3 + 2) = v6 - 42;
  v86 = *v61;
  if (v85 < 2)
  {
    if (v85 == 1)
    {
      v87 = v86 & 1;
      *a3 = ++v61;
    }
    else
    {
      v87 = v86 >> 7;
    }
  }
  else
  {
    v87 = (v86 >> (v85 - 1)) & 1;
  }
  v10 = v87 != 0;
  *((_BYTE *)a3 + 12) = 1;
  if (!v65 && v87)
  {
LABEL_132:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v78, v79, v80, v81, v82, v83, v84, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_sps_parser.cc");
    goto LABEL_46;
  }
  v12 = (unsigned __int16)v62 | ((unsigned __int16)v56 << 16);
  *((_BYTE *)a3 + 12) = 0;
  if (v6 == 42)
  {
    LOBYTE(v9) = 0;
LABEL_149:
    LOBYTE(v8) = 0;
    *((_BYTE *)a3 + 12) = 0;
LABEL_150:
    v7 = 0;
    v14 = -1;
    *((_DWORD *)a3 + 2) = -1;
    goto LABEL_5;
  }
  v88 = ((_BYTE)v6 - 42) & 7;
  *((_DWORD *)a3 + 2) = v6 - 43;
  v9 = *v61;
  if (v88 < 2)
  {
    if (v88 == 1)
    {
      LOBYTE(v9) = v9 & 1;
      *a3 = ++v61;
    }
    else
    {
      v9 >>= 7;
    }
  }
  else
  {
    LODWORD(v9) = (v9 >> (v88 - 1)) & 1;
  }
  *((_BYTE *)a3 + 12) = 0;
  if (v6 <= 0x2B)
    goto LABEL_149;
  v89 = ((_BYTE)v6 - 43) & 7;
  *((_DWORD *)a3 + 2) = v6 - 44;
  v8 = *v61;
  if (v89 < 2)
  {
    if (v89 == 1)
    {
      LOBYTE(v8) = v8 & 1;
      *a3 = ++v61;
    }
    else
    {
      v8 >>= 7;
    }
  }
  else
  {
    LODWORD(v8) = (v8 >> (v89 - 1)) & 1;
  }
  if (v6 <= 0x32)
    goto LABEL_150;
  v90 = &v61[((v6 - 37) >> 3) - ((v6 - 44) >> 3)];
  *a3 = v90;
  *((_BYTE *)a3 + 12) = 0;
  v7 = v6 - 51;
  if (v6 == 51)
    goto LABEL_165;
  v91 = v7 & 7;
  *((_DWORD *)a3 + 2) = v6 - 52;
  v92 = *v90;
  if (v91 < 2)
  {
    if (v91 == 1)
    {
      v93 = v92 & 1;
      *a3 = ++v90;
    }
    else
    {
      v93 = v92 >> 7;
    }
  }
  else
  {
    v93 = (v92 >> (v91 - 1)) & 1;
  }
  v7 = v93 != 0;
  if (v6 < 0x57
    || (v94 = (v6 - 80) >> 3, v95 = &v90[((v6 - 45) >> 3) - v94], *a3 = v95, v6 == 87))
  {
LABEL_165:
    v14 = -1;
  }
  else
  {
    v14 = v6 - 88;
    *a3 = &v95[v94 - ((v6 - 81) >> 3)];
  }
LABEL_5:
  *((_BYTE *)a3 + 12) = 0;
  if (v14 <= 7)
  {
    v15 = 0;
    v16 = -1;
    *((_DWORD *)a3 + 2) = -1;
    v96 = 0;
    v97[0] = 0;
    if (a2 < 1)
      goto LABEL_123;
    goto LABEL_17;
  }
  v16 = v14 - 8;
  *((_DWORD *)a3 + 2) = v14 - 8;
  v17 = *a3;
  v15 = **a3;
  v18 = v14 & 7;
  if (v18)
  {
    *a3 = v17 + 1;
    v15 = (v15 << (8 - v18)) & 0xFE | (v17[1] >> v18);
    v96 = 0;
    v97[0] = 0;
    if (a2 < 1)
      goto LABEL_123;
    goto LABEL_17;
  }
  *a3 = v17 + 1;
  v96 = 0;
  v97[0] = 0;
  if (a2 >= 1)
  {
LABEL_17:
    v24 = a2;
    v25 = *a3;
    v26 = v97;
    v27 = &v96;
    v28 = a2;
    while (1)
    {
      *((_BYTE *)a3 + 12) = 0;
      if (v16 <= 0)
      {
        *v26 = 0;
      }
      else
      {
        v30 = v16 & 7;
        *((_DWORD *)a3 + 2) = v16 - 1;
        v31 = *v25;
        if (v30 >= 2)
        {
          *v26 = (v31 >> (v30 - 1)) & 1;
          *((_BYTE *)a3 + 12) = 0;
LABEL_29:
          v32 = ((_BYTE)v16 - 1) & 7;
          v16 -= 2;
          *((_DWORD *)a3 + 2) = v16;
          v29 = *v25;
          if (v32 >= 2)
          {
            LODWORD(v29) = (v29 >> (v32 - 1)) & 1;
          }
          else if (v32 == 1)
          {
            LOBYTE(v29) = v29 & 1;
            *a3 = ++v25;
          }
          else
          {
            v29 >>= 7;
          }
          goto LABEL_19;
        }
        if (v30 == 1)
        {
          *a3 = ++v25;
          *v26 = v31 & 1;
          *((_BYTE *)a3 + 12) = 0;
          if (v16 > 1)
            goto LABEL_29;
        }
        else
        {
          *v26 = *v25 >> 7;
          *((_BYTE *)a3 + 12) = 0;
          if (v16 > 1)
            goto LABEL_29;
        }
      }
      LOBYTE(v29) = 0;
      v16 = -1;
      *((_DWORD *)a3 + 2) = -1;
LABEL_19:
      *(_BYTE *)v27 = v29;
      v27 = (uint64_t *)((char *)v27 + 1);
      ++v26;
      if (!--v28)
      {
        if (a2 < 8)
        {
          if (v16 >= 2)
          {
            v25 += (int)(((v16 + 7) >> 3) - ((v16 + 5) >> 3));
            *a3 = v25;
            v16 -= 2;
            if (a2 == 7)
              goto LABEL_99;
          }
          else
          {
            v16 = -1;
            if (a2 == 7)
              goto LABEL_99;
          }
          if (v16 >= 2)
          {
            v25 += (int)(((v16 + 7) >> 3) - ((v16 + 5) >> 3));
            *a3 = v25;
            v16 -= 2;
            if (a2 == 6)
              goto LABEL_99;
          }
          else
          {
            v16 = -1;
            if (a2 == 6)
              goto LABEL_99;
          }
          if (v16 >= 2)
          {
            v25 += (int)(((v16 + 7) >> 3) - ((v16 + 5) >> 3));
            *a3 = v25;
            v16 -= 2;
          }
          else
          {
            v16 = -1;
          }
          if (a2 != 5)
          {
            if (v16 >= 2)
            {
              v25 += (int)(((v16 + 7) >> 3) - ((v16 + 5) >> 3));
              *a3 = v25;
              v16 -= 2;
            }
            else
            {
              v16 = -1;
            }
            if (a2 != 4)
            {
              if (v16 >= 2)
              {
                v25 += (int)(((v16 + 7) >> 3) - ((v16 + 5) >> 3));
                *a3 = v25;
                v16 -= 2;
              }
              else
              {
                v16 = -1;
              }
              if (a2 != 3)
              {
                if (v16 >= 2)
                {
                  v25 += (int)(((v16 + 7) >> 3) - ((v16 + 5) >> 3));
                  *a3 = v25;
                  v16 -= 2;
                }
                else
                {
                  v16 = -1;
                }
                if (a2 != 2)
                {
                  if (v16 >= 2)
                  {
                    v25 += (int)(((v16 + 7) >> 3) - ((v16 + 5) >> 3));
                    *a3 = v25;
                    v16 -= 2;
                  }
                  else
                  {
                    v16 = -1;
                  }
                }
              }
            }
          }
LABEL_99:
          *((_DWORD *)a3 + 2) = v16;
        }
        v66 = &v96;
        v67 = (unsigned __int8 *)v97;
LABEL_104:
        if (!*v67++)
          goto LABEL_113;
        if (v16 < 2
          || (v69 = (v16 + 5) >> 3, v25 = &v25[((v16 + 7) >> 3) - v69], *a3 = v25, v16 == 2))
        {
          *((_DWORD *)a3 + 2) = -1;
          goto LABEL_108;
        }
        v70 = (v16 + 4) >> 3;
        v25 += v69 - v70;
        *a3 = v25;
        if ((v16 - 3) <= 4)
        {
LABEL_108:
          *((_BYTE *)a3 + 12) = 0;
        }
        else
        {
          v71 = (v16 - 1) >> 3;
          v25 += v70 - v71;
          *a3 = v25;
          if ((v16 - 8) >= 0x20)
          {
            v72 = (v16 - 33) >> 3;
            v25 += v71 - v72;
            *a3 = v25;
            if ((v16 & 0xFFFFFFFE) != 0x28)
            {
              v73 = (v16 - 35) >> 3;
              v25 += v72 - v73;
              *a3 = v25;
              if ((v16 & 0xFFFFFFFE) != 0x2A)
              {
                v74 = (v16 - 37) >> 3;
                v25 += v73 - v74;
                *a3 = v25;
                if ((v16 - 44) > 0x2A)
                {
                  v75 = (v16 - 80) >> 3;
                  v25 += v74 - v75;
                  *a3 = v25;
                  *((_BYTE *)a3 + 12) = 0;
                  if (v16 != 87)
                  {
                    v76 = v16 - 81;
                    v16 -= 88;
                    v25 += v75 - (v76 >> 3);
                    *a3 = v25;
LABEL_112:
                    *((_DWORD *)a3 + 2) = v16;
LABEL_113:
                    if (*(_BYTE *)v66)
                    {
                      *((_BYTE *)a3 + 12) = 0;
                      if (v16 >= 8)
                      {
                        v25 += (int)(((v16 + 7) >> 3) - ((v16 - 1) >> 3));
                        *a3 = v25;
                        v16 -= 8;
                      }
                      else
                      {
                        v16 = -1;
                      }
                      *((_DWORD *)a3 + 2) = v16;
                    }
                    v66 = (uint64_t *)((char *)v66 + 1);
                    if (!--v24)
                      break;
                    goto LABEL_104;
                  }
LABEL_111:
                  v16 = -1;
                  goto LABEL_112;
                }
LABEL_110:
                *((_BYTE *)a3 + 12) = 0;
                goto LABEL_111;
              }
            }
          }
        }
        *((_DWORD *)a3 + 2) = -1;
        goto LABEL_110;
      }
    }
  }
LABEL_123:
  *((_BYTE *)a3 + 12) = 1;
  if (v16 < 0)
  {
    v77 = 0;
    *(_BYTE *)a4 = 0;
  }
  else
  {
    *(_DWORD *)a4 = v13;
    *(_DWORD *)(a4 + 4) = v15;
    *(_DWORD *)(a4 + 8) = v12;
    *(_BYTE *)(a4 + 12) = v11;
    *(_BYTE *)(a4 + 13) = v10;
    *(_BYTE *)(a4 + 14) = v9;
    *(_BYTE *)(a4 + 15) = v8;
    v77 = 1;
    *(_BYTE *)(a4 + 16) = v7;
  }
  *(_BYTE *)(a4 + 20) = v77;
}

void std::vector<webrtc::H265SpsParser::ShortTermRefPicSet>::resize(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = v4 - (_BYTE *)*a1;
  v7 = 0x2F71AAFF02F71ABLL * (v6 >> 2);
  v8 = a2 - v7;
  if (a2 > v7)
  {
    v9 = a1[2];
    if (0x2F71AAFF02F71ABLL * ((v9 - v4) >> 2) >= v8)
    {
      v19 = &v4[1036 * v8];
      v20 = 1036 * a2 - 4 * (v6 >> 2);
      while (v4)
      {
        bzero(v4, 0x40CuLL);
        v4 += 1036;
        v20 -= 1036;
        if (!v20)
        {
          a1[1] = v19;
          return;
        }
      }
      __break(1u);
    }
    else if (a2 <= 0x3F42395403F423)
    {
      v10 = 0x2F71AAFF02F71ABLL * ((v9 - v5) >> 2);
      v11 = 2 * v10;
      if (2 * v10 <= a2)
        v11 = a2;
      if (v10 >= 0x1FA11CAA01FA11)
        v12 = 0x3F42395403F423;
      else
        v12 = v11;
      if (v12 > 0x3F42395403F423)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v13 = 1036 * v12;
      v14 = (char *)operator new(1036 * v12);
      v15 = &v14[4 * (v6 >> 2)];
      v16 = &v14[v13];
      v17 = 1036 * a2;
      bzero(v15, 1036 * ((v17 - v6 - 1036) / 0x40CuLL) + 1036);
      v18 = &v14[v17];
      if (v4 != v5)
      {
        do
        {
          v4 -= 1036;
          v15 -= 1036;
          memcpy(v15, v4, 0x40CuLL);
        }
        while (v4 != v5);
        v4 = v5;
      }
      *a1 = v15;
      a1[1] = v18;
      a1[2] = v16;
      if (v4)
        operator delete(v4);
      return;
    }
    abort();
  }
  if (a2 < v7)
    a1[1] = &v5[1036 * a2];
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  uint64_t v7;
  uint64_t v8;
  std::vector<unsigned int>::size_type v9;
  unsigned int *value;
  unint64_t v12;
  std::vector<unsigned int>::size_type v13;
  unint64_t v14;
  _BYTE *v15;
  unsigned int *v16;
  unsigned int *v17;
  std::vector<unsigned int>::value_type v18;
  std::vector<unsigned int>::size_type v19;
  unsigned int *v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  unsigned int *v34;
  std::vector<unsigned int>::size_type v35;

  begin = this->__begin_;
  end = this->__end_;
  v7 = (char *)end - (char *)this->__begin_;
  v8 = v7 >> 2;
  v9 = __sz - (v7 >> 2);
  if (__sz > v7 >> 2)
  {
    value = this->__end_cap_.__value_;
    if (v9 <= value - end)
    {
      v34 = &end[v9];
      v35 = 4 * __sz - 4 * v8;
      while (end)
      {
        *end++ = *__x;
        v35 -= 4;
        if (!v35)
          goto LABEL_29;
      }
      __break(1u);
    }
    else if (!(__sz >> 62))
    {
      v12 = (char *)value - (char *)begin;
      v13 = ((char *)value - (char *)begin) >> 1;
      if (v13 <= __sz)
        v13 = __sz;
      if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v15 = operator new(4 * v14);
      v16 = (unsigned int *)&v15[4 * v8];
      v17 = (unsigned int *)&v15[4 * __sz];
      v18 = *__x;
      v19 = 4 * __sz - v7 - 4;
      v20 = v16;
      if (v19 < 0x1C)
        goto LABEL_36;
      v21 = (v19 >> 2) + 1;
      v20 = &v16[v21 & 0x7FFFFFFFFFFFFFF8];
      v22 = vdupq_n_s32(v18);
      v23 = (int32x4_t *)(v16 + 4);
      v24 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23[-1] = v22;
        *v23 = v22;
        v23 += 2;
        v24 -= 8;
      }
      while (v24);
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_36:
        do
          *v20++ = v18;
        while (v20 != v17);
      }
      if (end != begin)
      {
        v25 = (char *)end - (char *)begin - 4;
        if (v25 < 0x2C)
          goto LABEL_37;
        if ((unint64_t)((char *)end - &v15[v7]) < 0x20)
          goto LABEL_37;
        v26 = (v25 >> 2) + 1;
        v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
        v28 = &end[v27 / 0xFFFFFFFFFFFFFFFCLL];
        v16 = (unsigned int *)((char *)v16 - v27);
        v29 = &v15[4 * v8 - 16];
        v30 = (__int128 *)(end - 4);
        v31 = v26 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v32 = *v30;
          *(v29 - 1) = *(v30 - 1);
          *v29 = v32;
          v29 -= 2;
          v30 -= 2;
          v31 -= 8;
        }
        while (v31);
        end = v28;
        if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_37:
          do
          {
            v33 = *--end;
            *--v16 = v33;
          }
          while (end != begin);
        }
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = (unsigned int *)&v15[4 * v14];
      if (begin)
        operator delete(begin);
      return;
    }
    abort();
  }
  if (__sz < v7 >> 2)
  {
    v34 = &begin[__sz];
LABEL_29:
    this->__end_ = v34;
  }
}

uint64_t std::__optional_destruct_base<webrtc::H265SpsParser::SpsState,false>::__optional_destruct_base[abi:sn180100]<webrtc::H265SpsParser::SpsState&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v8 = *(_BYTE **)(a2 + 72);
  v7 = *(_BYTE **)(a2 + 80);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if ((unint64_t)(0x2F71AAFF02F71ABLL * (v9 >> 2)) >= 0x3F42395403F424)
      goto LABEL_8;
    v10 = (char *)operator new(v9);
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v10;
    v11 = &v10[4 * (v9 >> 2)];
    *(_QWORD *)(a1 + 88) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 80) = v11;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v13 = *(_BYTE **)(a2 + 104);
  v12 = *(_BYTE **)(a2 + 112);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if ((v14 & 0x8000000000000000) == 0)
    {
      v15 = (char *)operator new(v12 - v13);
      *(_QWORD *)(a1 + 104) = v15;
      *(_QWORD *)(a1 + 112) = v15;
      v16 = &v15[4 * (v14 >> 2)];
      *(_QWORD *)(a1 + 120) = v16;
      memcpy(v15, v13, v14);
      *(_QWORD *)(a1 + 112) = v16;
      goto LABEL_7;
    }
LABEL_8:
    abort();
  }
LABEL_7:
  v17 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v17;
  *(_BYTE *)(a1 + 160) = 1;
  return a1;
}

void webrtc::H265VpsParser::ParseInternal(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  __int32 v18;
  __int32 v19;
  char v20;
  char *v21;
  int v22;
  _BOOL4 v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v29;
  _BOOL4 v30;
  _DWORD *v31;
  _DWORD *v32;
  __int128 v33;
  std::string *v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint8x16_t v40;

  if (a2)
    v8 = a1;
  else
    v8 = 0;
  if (((a2 >> 28) & 0x1FFFFFFFFLL) == 0)
  {
    v9 = 8 * a2;
    v38 = 0uLL;
    *((_QWORD *)&v37 + 1) = 0;
    v39 = 0;
    if (!(8 * (_DWORD)a2))
      goto LABEL_37;
    v10 = *v8;
    LODWORD(v37) = v10 >> 4;
    if (v9 - 6 < 6)
      goto LABEL_37;
    v12 = v8[1];
    v11 = v8 + 1;
    v13 = ((unint64_t)v12 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v10 & 3));
    DWORD1(v37) = (v12 >> 4) & 0xFFFFFFCF | (16 * (v10 & 3));
    if (v9 < 0xC || v13 >= 7)
      goto LABEL_37;
    v14 = (v9 - 8) >> 3;
    v15 = &v11[((v9 - 5) >> 3) - v14];
    v16 = (v9 - 9) >> 3;
    v17 = (uint64_t)&v15[v14 - v16];
    v40.i64[0] = v17;
    v40.i8[12] = 0;
    if ((v9 & 0xFFFFFFF0) == 0x10)
    {
      v18 = -1;
    }
    else
    {
      v18 = v9 - 32;
      v40.i64[0] = v17 + v16 - ((v9 - 25) >> 3);
    }
    v40.i32[2] = v18;
    webrtc::H265SpsParser::ParseProfileTierLevel((webrtc::H265SpsParser *)1, v13, (unsigned __int8 **)&v40, (uint64_t)&v35 + 4);
    v19 = v40.i32[2];
    if (v40.i32[2] < 0 || !v36)
    {
LABEL_37:
      *(_BYTE *)a7 = 0;
      *(_BYTE *)(a7 + 36) = 0;
      return;
    }
    v40.i8[12] = 0;
    v20 = v40.i8[8] - 1;
    --v40.i32[2];
    if (v19)
    {
      v21 = (char *)v40.i64[0];
      v22 = v20 & 7;
      if (v22)
      {
        v23 = ((*(unsigned __int8 *)v40.i64[0] >> v22) & 1) == 0;
        if (((*(unsigned __int8 *)v40.i64[0] >> v22) & 1) != 0)
          goto LABEL_21;
      }
      else
      {
        ++v40.i64[0];
        v24 = *v21;
        v23 = (v24 & 1) == 0;
        if ((v24 & 1) != 0)
        {
LABEL_21:
          v25 = 0;
LABEL_22:
          v26 = 4 * v25;
          v27 = ~(_DWORD)v13 + v25;
          while (1)
          {
            webrtc::BitstreamReader::ReadExponentialGolomb(&v40);
            v29 = webrtc::BitstreamReader::ReadExponentialGolomb(&v40);
            *(_DWORD *)((char *)&v37 + v26 + 8) = v29;
            v40.i8[12] = 1;
            if (v40.i32[2] < 0 || v26 && v29 < *(_DWORD *)((char *)&v37 + v26 + 4))
              goto LABEL_37;
            webrtc::BitstreamReader::ReadExponentialGolomb(&v40);
            v26 += 4;
            if (__CFADD__(v27++, 1))
            {
              if ((_DWORD)v13)
                v30 = v23;
              else
                v30 = 0;
              if (v30)
              {
                v31 = (_DWORD *)&v37 + 2;
                v32 = (_DWORD *)&v37 + v13 + 2;
                do
                {
                  *v31++ = *v32;
                  --v13;
                }
                while (v13);
              }
              if ((v40.i32[2] & 0x80000000) == 0 && v36)
              {
                v33 = v38;
                *(_OWORD *)a7 = v37;
                *(_OWORD *)(a7 + 16) = v33;
                *(_DWORD *)(a7 + 32) = v39;
                *(_BYTE *)(a7 + 36) = 1;
                return;
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
    else
    {
      v23 = 1;
    }
    v25 = v13;
    goto LABEL_22;
  }
  v34 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a3, a4, a5, a6, v35);
  webrtc::H26xPacketBuffer::InsertPacket((webrtc::H26xPacketBuffer *)v34);
}

void webrtc::H26xPacketBuffer::InsertPacket(webrtc::H26xPacketBuffer *this@<X0>, uint64_t *a2@<X1>, _BOOL8 a3@<X2>, _BOOL8 a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  _WORD *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;

  v10 = (_WORD *)((char *)this + 16448);
  v11 = *(unsigned __int16 *)(*a2 + 4);
  v12 = *(unsigned __int16 *)(*a2 + 4);
  if (*((_BYTE *)this + 16450))
  {
    v13 = (unsigned __int16)*v10;
    v14 = v11 >= v13;
    LODWORD(v15) = v11 - v13;
    v16 = (_DWORD)v15 != 0 && v14;
    v17 = (v15 & 0x8000u) == 0;
    if ((_DWORD)v15 == 0x8000)
      v17 = v16;
    if (v17)
      v15 = (unsigned __int16)v15;
    else
      v15 |= 0xFFFFFFFFFFFF0000;
    v12 = v15 + *((_QWORD *)this + 2055);
  }
  *((_QWORD *)this + 2055) = v12;
  *v10 = v11;
  *((_BYTE *)this + 16450) = 1;
  v18 = (char *)this + 8;
  if (v12 <= 0)
    v19 = -(-v12 & 0x7FF);
  else
    v19 = v12 & 0x7FF;
  v20 = v19 + 2048;
  if (v19 >= 0)
    v20 = v19;
  v21 = *(_QWORD *)&v18[8 * v20];
  v22 = *a2;
  if (v21)
  {
    v23 = *(_DWORD *)(v21 + 8);
    v24 = *(_DWORD *)(v22 + 8);
    v14 = v23 >= v24;
    v25 = v23 - v24;
    v26 = v25 != 0 && v14;
    v27 = v25 == 0x80000000 ? v26 : v25 >= 0;
    if (v27 == 1)
    {
      *(_QWORD *)a8 = 0;
      *(_QWORD *)(a8 + 8) = 0;
      *(_BYTE *)(a8 + 24) = 0;
      *(_QWORD *)(a8 + 16) = 0;
      return;
    }
  }
  *a2 = 0;
  v28 = 8 * v20;
  v29 = *(_QWORD *)&v18[v28];
  *(_QWORD *)&v18[v28] = v22;
  if (v29)
  {
    if (!*(_BYTE *)(v29 + 184))
      goto LABEL_31;
    if ((*(_BYTE *)(v29 + 152) & 1) != 0)
    {
      operator delete(*(void **)(v29 + 160));
      if ((*(_BYTE *)(v29 + 104) & 1) == 0)
      {
LABEL_29:
        if ((*(_BYTE *)(v29 + 56) & 1) == 0)
          goto LABEL_31;
        goto LABEL_30;
      }
    }
    else if ((*(_BYTE *)(v29 + 104) & 1) == 0)
    {
      goto LABEL_29;
    }
    operator delete(*(void **)(v29 + 112));
    if ((*(_BYTE *)(v29 + 56) & 1) == 0)
    {
LABEL_31:
      v30 = *(_QWORD *)(v29 + 16);
      if (v30)
      {
        v31 = (unsigned int *)(v30 + 24);
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v34 = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v30 + 16) = 0;
          if (v34)
            MEMORY[0x20BD0ADD4](v34, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v30, 0x1010C40EE34DA14);
        }
      }
      MEMORY[0x20BD0ADEC](v29, 0x10B2C4061102D9CLL);
      goto LABEL_39;
    }
LABEL_30:
    operator delete(*(void **)(v29 + 64));
    goto LABEL_31;
  }
LABEL_39:
  webrtc::H26xPacketBuffer::FindFrames(this, v12, a3, a4, a5, a6, a7, a8);
}

void webrtc::H26xPacketBuffer::FindFrames(webrtc::H26xPacketBuffer *this@<X0>, uint64_t a2@<X1>, _BOOL8 a3@<X2>, _BOOL8 a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  webrtc::H26xPacketBuffer *v13;
  char *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  webrtc::H265 *v25;
  char *v26;
  int v27;
  BOOL v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  webrtc::H26xPacketBuffer *v61;
  uint64_t v62;
  unint64_t v63;
  webrtc::H26xPacketBuffer *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  webrtc::H26xPacketBuffer *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  BOOL v82;
  int v83;
  int v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unsigned __int8 *v90;
  int v91;
  BOOL v93;
  int v94;
  uint64_t v96;
  uint64_t *v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  int fixed;
  uint64_t v109;
  std::string *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  webrtc::H26xPacketBuffer *v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  webrtc::H26xPacketBuffer *v129;
  char *v130;

  v8 = a8;
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_BYTE *)(a8 + 24) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  v9 = (char *)this + 8;
  if (a2 <= 0)
    v10 = -(-a2 & 0x7FF);
  else
    v10 = a2 & 0x7FF;
  v11 = *(_QWORD *)&v9[8 * v10 + 8 * (v10 < 0 ? 0x800uLL : 0)];
  if (!v11)
  {
    v110 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h26x_packet_buffer.cc", 159, "packet != nullptr", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, (uint64_t)v9, a7, v118);
    webrtc::H26xPacketBuffer::FixH264Packet((uint64_t)v110, v111, v112, v113, v114, v115, v116, v117);
    return;
  }
  v12 = a2;
  v13 = this;
  v14 = (char *)this + 16392;
  v15 = a2 - 1;
  v128 = (char *)this + 8;
  if (a2 - 1 != *((_QWORD *)this + 2049))
  {
    if (v15 == *((_QWORD *)this + 2050))
    {
      v14 = (char *)this + 16400;
    }
    else if (v15 == *((_QWORD *)this + 2051))
    {
      v14 = (char *)this + 16408;
    }
    else if (v15 == *((_QWORD *)this + 2052))
    {
      v14 = (char *)this + 16416;
    }
    else
    {
      if (v15 != *((_QWORD *)this + 2053))
      {
        v16 = *(_DWORD *)(v11 + 212);
        if (v16 == 5)
        {
          v23 = *(_QWORD *)(v11 + 16);
          v24 = a2;
          if (v23)
            v25 = (webrtc::H265 *)(*(_QWORD *)(v23 + 16) + *(_QWORD *)(v11 + 24));
          else
            v25 = 0;
          webrtc::H265::FindNaluIndices(v25, *(const unsigned __int8 **)(v11 + 32), (char **)&v129);
          this = v129;
          if (v129 == (webrtc::H26xPacketBuffer *)v130)
          {
            v28 = 0;
            v9 = v128;
          }
          else
          {
            v26 = (char *)v129 + 24;
            v9 = v128;
            do
            {
              v27 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 16) + *(_QWORD *)(v11 + 24) + *((_QWORD *)v26 - 2)) & 0x7E;
              v28 = v27 == 64;
              v29 = v27 == 64 || v26 == v130;
              v26 += 24;
            }
            while (!v29);
          }
          if (v129)
          {
            v130 = (char *)v129;
            operator delete(v129);
            v9 = v128;
          }
          v12 = v24;
          if (v28)
            goto LABEL_46;
        }
        else if (v16 == 4)
        {
          if (*(_QWORD *)(v11 + 1976) != 3)
            absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, a2, a3, a4, a5, a2, (uint64_t)v9, a7);
          v17 = *(_QWORD *)(v11 + 464);
          v18 = (_BYTE *)(v11 + 344);
          if (v17 - 11 < 0xFFFFFFFFFFFFFFF6)
            v18 = 0;
          v19 = v17 <= 0xA ? *(_QWORD *)(v11 + 464) : 0;
          if (v19)
          {
            v20 = 12 * v19;
            v21 = v18;
            do
            {
              if (*v21 == 7)
                goto LABEL_46;
              v21 += 12;
              v20 -= 12;
            }
            while (v20);
            if (*(_BYTE *)this)
            {
              v22 = 12 * v19;
              do
              {
                if (*v18 == 5)
                  goto LABEL_180;
                v18 += 12;
                v22 -= 12;
              }
              while (v22);
            }
          }
        }
        return;
      }
      v14 = (char *)this + 16424;
    }
  }
LABEL_52:
  v123 = v13;
  v124 = v12 + 2048;
  v126 = v12 + 1;
  v119 = v14;
  v120 = v8;
  while (1)
  {
    if (v12 == v124 || *(unsigned __int16 *)(v11 + 4) != (unsigned __int16)v12)
      return;
    *(_QWORD *)v14 = v12;
    v32 = v126;
    if (*(_BYTE *)(v11 + 1))
    {
      v33 = 0;
      v34 = 0;
      v35 = v126;
      do
      {
        v36 = v34;
        v37 = v12 + v34;
        if (v37 <= v12 - 2048)
          goto LABEL_53;
        v38 = v33;
        v39 = v35;
        v40 = v37 - 1;
        v41 = v40 & 0x7FF;
        v43 = -v40;
        v42 = v43 < 0;
        v44 = v43 & 0x7FF;
        if (v42)
          v45 = v41;
        else
          v45 = -v44;
        v46 = *(_QWORD *)&v9[8 * v45 + 8 * (v45 < 0 ? 0x800uLL : 0)];
        if (!v46)
          break;
        v47 = *(_DWORD *)(v46 + 8);
        v34 = v36 - 1;
        v33 = v38 + 1;
        --v35;
      }
      while (v47 == *(_DWORD *)(v11 + 8));
      v48 = v12 + v36;
      if (v12 + v36 <= v12)
        break;
    }
LABEL_53:
    if (++v12 <= 0)
      v31 = -(-v12 & 0x7FF);
    else
      v31 = v12 & 0x7FF;
    v11 = *(_QWORD *)&v9[8 * v31 + 8 * (v31 < 0 ? 0x800uLL : 0)];
    v126 = v32 + 1;
    if (!v11)
      return;
  }
  v121 = v38;
  v122 = v12 + v36;
  v49 = 0;
  v50 = 0;
  v11 = 0;
  v51 = 0;
  v52 = 0;
  v53 = -1;
  v54 = -1;
  v127 = v12;
  do
  {
    if (v48 <= 0)
      v56 = -(-v48 & 0x7FF);
    else
      v56 = v48 & 0x7FF;
    if (v56 >= 0)
      v57 = v56;
    else
      v57 = v56 + 2048;
    v58 = *(_QWORD *)&v9[8 * v57];
    v59 = *(_DWORD *)(v58 + 212);
    if (v59 != 5)
    {
      if (v59 != 4)
        goto LABEL_70;
      a7 = 12;
      if (*(_QWORD *)(v58 + 1976) != 3)
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, a2, a3, a4, a5, v12, (uint64_t)v9, 12);
      v60 = *(_QWORD *)(v58 + 464);
      v61 = (webrtc::H26xPacketBuffer *)(v58 + 344);
      if (v60 - 11 < 0xFFFFFFFFFFFFFFF6)
        v61 = 0;
      if (v60 <= 0xA)
        v62 = *(_QWORD *)(v58 + 464);
      else
        v62 = 0;
      if (!v62)
        goto LABEL_112;
      v63 = 12 * v62 - 12;
      if (v63 >= 0xC)
      {
        v82 = v49;
        v83 = 0;
        v84 = 0;
        v85 = 0;
        v86 = v63 / 0xC + 1;
        v64 = (webrtc::H26xPacketBuffer *)((char *)v61 + 12 * (v86 & 0x3FFFFFFFFFFFFFFELL));
        v87 = v86 & 0x3FFFFFFFFFFFFFFELL;
        this = v61;
        do
        {
          v88 = *(unsigned __int8 *)this;
          v89 = *((unsigned __int8 *)this + 12);
          LOBYTE(v52) = v52 | (v88 == 5);
          v85 |= v89 == 5;
          a4 = v88 == 7;
          a5 = v89 == 7;
          LODWORD(v11) = v11 | a4;
          v83 |= a5;
          a2 = v88 == 8;
          a3 = v89 == 8;
          v51 |= a2;
          v84 |= a3;
          this = (webrtc::H26xPacketBuffer *)((char *)this + 24);
          v87 -= 2;
        }
        while (v87);
        LOBYTE(v52) = v85 | v52;
        v51 |= v84;
        v11 = v83 | v11;
        v29 = v86 == (v86 & 0x3FFFFFFFFFFFFFFELL);
        v49 = v82;
        if (v29)
        {
LABEL_112:
          if ((v52 & 1) != 0)
          {
            v52 = 1;
            if (!*(_BYTE *)v123 && (v11 & v51 & 1) == 0)
              break;
          }
          else
          {
            v52 = 0;
          }
          goto LABEL_70;
        }
      }
      else
      {
        v64 = v61;
      }
      v90 = (unsigned __int8 *)v61 + 12 * v62;
      do
      {
        v91 = *(unsigned __int8 *)v64;
        v64 = (webrtc::H26xPacketBuffer *)((char *)v64 + 12);
        LOBYTE(v52) = v52 | (v91 == 5);
        v11 = v11 | (v91 == 7);
        v51 |= v91 == 8;
      }
      while (v64 != (webrtc::H26xPacketBuffer *)v90);
      goto LABEL_112;
    }
    v125 = v49;
    v65 = *(_QWORD *)(v58 + 16);
    if (v65)
    {
      webrtc::H265::FindNaluIndices((webrtc::H265 *)(*(_QWORD *)(v65 + 16) + *(_QWORD *)(v58 + 24)), *(const unsigned __int8 **)(v58 + 32), (char **)&v129);
      this = v129;
      v66 = v130;
      if (v129 == (webrtc::H26xPacketBuffer *)v130)
        goto LABEL_97;
    }
    else
    {
      webrtc::H265::FindNaluIndices(0, *(const unsigned __int8 **)(v58 + 32), (char **)&v129);
      this = v129;
      v66 = v130;
      if (v129 == (webrtc::H26xPacketBuffer *)v130)
      {
LABEL_97:
        v9 = v128;
        goto LABEL_102;
      }
    }
    v9 = v128;
    v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v128[8 * v57] + 16) + 16)
        + *(_QWORD *)(*(_QWORD *)&v128[8 * v57] + 24);
    v68 = v66 - (char *)this - 24;
    if (v68 >= 0x18)
    {
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = v68 / 0x18 + 1;
      v69 = (webrtc::H26xPacketBuffer *)((char *)this + 24 * (v74 & 0x1FFFFFFFFFFFFFFELL));
      v75 = (uint64_t *)((char *)this + 32);
      a2 = v74 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v76 = *(v75 - 3);
        v77 = *v75;
        v75 += 6;
        LODWORD(v76) = *(unsigned __int8 *)(v67 + v76);
        v78 = *(unsigned __int8 *)(v67 + v77);
        a5 = (v76 >> 1) & 0x3F;
        v79 = (v78 >> 1) & 0x3F;
        v52 |= (v76 & 0x70) == 32;
        v73 |= (v78 & 0x70) == 32;
        v50 |= (_DWORD)a5 == 32;
        v70 |= v79 == 32;
        LODWORD(v11) = v11 | ((_DWORD)a5 == 33);
        v71 |= v79 == 33;
        a3 = (_DWORD)a5 == 34;
        a4 = v79 == 34;
        v51 |= a3;
        v72 |= a4;
        a2 -= 2;
      }
      while (a2);
      v52 |= v73;
      v51 |= v72;
      v11 = v71 | v11;
      v50 |= v70;
      if (v74 == (v74 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_102;
    }
    else
    {
      v69 = this;
    }
    do
    {
      v80 = *(unsigned __int8 *)(v67 + *((_QWORD *)v69 + 1));
      v81 = (v80 >> 1) & 0x3F;
      v52 |= (v80 & 0x70) == 32;
      v50 |= v81 == 32;
      v11 = v11 | (v81 == 33);
      v51 |= v81 == 34;
      v69 = (webrtc::H26xPacketBuffer *)((char *)v69 + 24);
    }
    while (v69 != (webrtc::H26xPacketBuffer *)v66);
LABEL_102:
    if ((v52 & 1) != 0 && (v50 & v11 & v51 & 1) == 0)
    {
      if (this)
      {
        v130 = (char *)this;
        operator delete(this);
        v9 = v128;
      }
      v14 = v119;
      v8 = v120;
      v12 = v127;
      v13 = v123;
      if (v125)
      {
        v93 = v53 > 0 && v54 > 0;
        goto LABEL_133;
      }
      return;
    }
    if (this)
    {
      v130 = (char *)this;
      operator delete(this);
      v9 = v128;
    }
    v58 = *(_QWORD *)&v9[8 * v57];
    v12 = v127;
LABEL_70:
    if (v53 <= *(unsigned __int16 *)(v58 + 196))
      v53 = *(unsigned __int16 *)(v58 + 196);
    v55 = *(unsigned __int16 *)(v58 + 198);
    if (v54 <= v55)
      v54 = v55;
    v29 = v48 == v12;
    v49 = v48++ >= v12;
  }
  while (!v29);
  v14 = v119;
  v8 = v120;
  v13 = v123;
  if (!v49)
    return;
  v93 = v53 > 0 && v54 > 0;
  if ((v52 & 1) == 0)
  {
    v94 = 4;
    goto LABEL_134;
  }
LABEL_133:
  v94 = 3;
LABEL_134:
  if (v122 <= 0)
    v96 = -(-v122 & 0x7FF);
  else
    v96 = v122 & 0x7FF;
  v97 = (uint64_t *)&v9[8 * v96 + 8 * (v96 < 0 ? 0x800uLL : 0)];
  a2 = *v97;
  *(_BYTE *)(*v97 + 205) = 1;
  *(_BYTE *)(a2 + 206) = v36 == 0;
  if (!v93)
  {
    *(_DWORD *)(a2 + 192) = v94;
    v32 = v126;
    v11 = v121;
    if (*(_DWORD *)(a2 + 212) != 4
      || (v100 = webrtc::H26xPacketBuffer::FixH264Packet((uint64_t)v13, a2, a3, a4, a5, v12, (uint64_t)v9, a7),
          v12 = v127,
          v9 = v128,
          v100))
    {
      this = *(webrtc::H26xPacketBuffer **)(v8 + 8);
      v17 = *(_QWORD *)(v8 + 16);
      if ((unint64_t)this >= v17)
      {
        this = (webrtc::H26xPacketBuffer *)std::vector<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>::__push_back_slow_path<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>((_QWORD *)v8, v97);
        v12 = v127;
        v9 = v128;
        *(_QWORD *)(v8 + 8) = this;
        if (v36)
          goto LABEL_166;
      }
      else
      {
        if (!this)
          goto LABEL_179;
        v101 = *v97;
        *v97 = 0;
        *(_QWORD *)this = v101;
        this = (webrtc::H26xPacketBuffer *)((char *)this + 8);
        *(_QWORD *)(v8 + 8) = this;
        if (v36)
        {
          do
          {
            while (1)
            {
LABEL_166:
              if (v39 <= 0)
                v106 = -(-v39 & 0x7FF);
              else
                v106 = v39 & 0x7FF;
              v107 = (uint64_t *)&v9[8 * v106 + 8 * (v106 < 0 ? 0x800uLL : 0)];
              a2 = *v107;
              *(_BYTE *)(*v107 + 205) = 0;
              *(_BYTE *)(a2 + 206) = v11 == 1;
              if (*(_DWORD *)(a2 + 212) == 4)
              {
                fixed = webrtc::H26xPacketBuffer::FixH264Packet((uint64_t)v13, a2, a3, a4, a5, v12, (uint64_t)v9, a7);
                v12 = v127;
                v9 = v128;
                if (!fixed)
                  goto LABEL_176;
                this = *(webrtc::H26xPacketBuffer **)(v8 + 8);
              }
              v17 = *(_QWORD *)(v8 + 16);
              if ((unint64_t)this < v17)
                break;
              this = (webrtc::H26xPacketBuffer *)std::vector<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>::__push_back_slow_path<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>((_QWORD *)v8, v107);
              v12 = v127;
              v9 = v128;
              *(_QWORD *)(v8 + 8) = this;
              ++v39;
              if (!--v11)
                goto LABEL_53;
            }
            if (!this)
              goto LABEL_179;
            v109 = *v107;
            *v107 = 0;
            *(_QWORD *)this = v109;
            this = (webrtc::H26xPacketBuffer *)((char *)this + 8);
            *(_QWORD *)(v8 + 8) = this;
            ++v39;
            --v11;
          }
          while (v11);
        }
      }
      goto LABEL_53;
    }
LABEL_176:
    *(_BYTE *)(v8 + 24) = 1;
    return;
  }
  *(_WORD *)(a2 + 196) = v53;
  *(_WORD *)(a2 + 198) = v54;
  *(_DWORD *)(a2 + 192) = v94;
  v32 = v126;
  if (*(_DWORD *)(a2 + 212) == 4)
  {
    v98 = webrtc::H26xPacketBuffer::FixH264Packet((uint64_t)v13, a2, a3, a4, a5, v12, (uint64_t)v9, a7);
    v12 = v127;
    v9 = v128;
    if (!v98)
      goto LABEL_176;
  }
  this = *(webrtc::H26xPacketBuffer **)(v8 + 8);
  v17 = *(_QWORD *)(v8 + 16);
  if ((unint64_t)this >= v17)
  {
    this = (webrtc::H26xPacketBuffer *)std::vector<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>::__push_back_slow_path<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>((_QWORD *)v8, v97);
    v12 = v127;
    v9 = v128;
    *(_QWORD *)(v8 + 8) = this;
    if (!v36)
      goto LABEL_53;
LABEL_151:
    v11 = 0;
    do
    {
      while (1)
      {
        if (v39 + v11 <= 0)
          v102 = -(-(v39 + v11) & 0x7FF);
        else
          v102 = (v39 + v11) & 0x7FF;
        v103 = (uint64_t *)&v9[8 * v102 + 8 * (v102 < 0 ? 0x800uLL : 0)];
        a2 = *v103;
        *(_BYTE *)(*v103 + 205) = 0;
        *(_BYTE *)(a2 + 206) = v121 - 1 == v11;
        if (*(_DWORD *)(a2 + 212) == 4)
        {
          v104 = webrtc::H26xPacketBuffer::FixH264Packet((uint64_t)v13, a2, a3, a4, a5, v12, (uint64_t)v9, a7);
          v12 = v127;
          v9 = v128;
          if (!v104)
            goto LABEL_176;
          this = *(webrtc::H26xPacketBuffer **)(v8 + 8);
        }
        v17 = *(_QWORD *)(v8 + 16);
        if ((unint64_t)this < v17)
          break;
        this = (webrtc::H26xPacketBuffer *)std::vector<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>::__push_back_slow_path<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>((_QWORD *)v8, v103);
        v12 = v127;
        v9 = v128;
        *(_QWORD *)(v8 + 8) = this;
        if (v121 == ++v11)
          goto LABEL_53;
      }
      if (!this)
        goto LABEL_179;
      v105 = *v103;
      *v103 = 0;
      *(_QWORD *)this = v105;
      this = (webrtc::H26xPacketBuffer *)((char *)this + 8);
      *(_QWORD *)(v8 + 8) = this;
      ++v11;
    }
    while (v121 != v11);
    goto LABEL_53;
  }
  if (this)
  {
    v99 = *v97;
    *v97 = 0;
    *(_QWORD *)this = v99;
    this = (webrtc::H26xPacketBuffer *)((char *)this + 8);
    *(_QWORD *)(v8 + 8) = this;
    if (!v36)
      goto LABEL_53;
    goto LABEL_151;
  }
LABEL_179:
  while (1)
  {
    __break(1u);
LABEL_180:
    if (!v17 && *(_DWORD *)(v11 + 340) == 2)
      break;
LABEL_46:
    v17 = *((_QWORD *)v13 + 2054);
    if (v17 < 5)
    {
      *(_QWORD *)&v14[8 * v17] = v12;
      v17 = *((_QWORD *)v13 + 2054);
      if (v17 < 5)
      {
        v14 += 8 * v17;
        if (v17 == 4)
          v30 = 0;
        else
          v30 = v17 + 1;
        *((_QWORD *)v13 + 2054) = v30;
        goto LABEL_52;
      }
    }
  }
}

uint64_t webrtc::H26xPacketBuffer::FixH264Packet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  unsigned int v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t **v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  unsigned int v78;
  size_t v79;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  BOOL v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  std::string *v115;
  uint64_t v116;
  char v117;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  __int128 v122;
  int v123;

  v123 = 0x1000000;
  if (*(_QWORD *)(a2 + 1976) != 3)
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)a1, a2, a3, a4, a5, a6, a7, a8);
  v8 = a2;
  v121 = 0;
  v122 = 0uLL;
  if (*(_BYTE *)a1 && *(_QWORD *)(a2 + 464))
  {
    v117 = 0;
    v10 = 0;
    v11 = a2 + 336;
    v12 = (_QWORD *)(a1 + 16488);
    v13 = (_QWORD *)(a1 + 16464);
    v119 = (_QWORD *)(a1 + 16488);
    v120 = (_QWORD *)(a1 + 16464);
    do
    {
      v14 = *(unsigned __int8 *)(v11 + 12 * v10 + 8);
      switch(v14)
      {
        case 5:
          if (*(_BYTE *)(v8 + 205))
          {
            v23 = *(_DWORD *)(v11 + 12 * v10 + 16);
            if (v23 == -1)
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                goto LABEL_116;
              rtc::webrtc_logging_impl::Log("\r\t", v103, v104, v105, v106, v107, v108, v109, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h26x_packet_buffer.cc");
LABEL_119:
              v101 = 0;
              v102 = v121;
              if (!v121)
                return v101;
              goto LABEL_120;
            }
            v24 = *v120;
            if (!*v120)
              goto LABEL_60;
            v13 = v120;
            do
            {
              v25 = *(_DWORD *)(v24 + 32);
              v26 = v25 >= v23;
              if (v25 >= v23)
                v27 = (uint64_t *)v24;
              else
                v27 = (uint64_t *)(v24 + 8);
              if (v26)
                v13 = (_QWORD *)v24;
              v24 = *v27;
            }
            while (*v27);
            if (v13 == v120 || v23 < *((_DWORD *)v13 + 8))
            {
LABEL_60:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                goto LABEL_116;
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h26x_packet_buffer.cc");
              goto LABEL_119;
            }
            v28 = *v119;
            if (!*v119)
              goto LABEL_62;
            v29 = *((_DWORD *)v13 + 10);
            v12 = v119;
            do
            {
              v30 = *(_DWORD *)(v28 + 32);
              v31 = v30 >= v29;
              if (v30 >= v29)
                v32 = (uint64_t *)v28;
              else
                v32 = (uint64_t *)(v28 + 8);
              if (v31)
                v12 = (_QWORD *)v28;
              v28 = *v32;
            }
            while (*v32);
            if (v12 == v119 || v29 < *((_DWORD *)v12 + 8))
            {
LABEL_62:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                goto LABEL_116;
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v56, v57, v58, v59, v60, v61, v62, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h26x_packet_buffer.cc");
              goto LABEL_119;
            }
            *(_WORD *)(v8 + 196) = *((_DWORD *)v12 + 10);
            *(_WORD *)(v8 + 198) = *((_DWORD *)v12 + 11);
            if (v12[7])
              v117 |= v13[7] != 0;
          }
          break;
        case 8:
          v33 = v11 + 12 * v10;
          v35 = *(_DWORD *)(v33 + 12);
          v34 = *(_DWORD *)(v33 + 16);
          v36 = (uint64_t **)v120;
          while (1)
          {
            v37 = *v36;
            v38 = v36;
            if (!*v36)
              break;
            while (1)
            {
              v36 = (uint64_t **)v37;
              v39 = *((_DWORD *)v37 + 8);
              if (v34 < v39)
                break;
              if (v39 >= v34)
                goto LABEL_6;
              v37 = v36[1];
              if (!v37)
              {
                v38 = v36 + 1;
                goto LABEL_53;
              }
            }
          }
LABEL_53:
          v40 = (uint64_t *)v36;
          v36 = (uint64_t **)operator new(0x40uLL);
          *((_DWORD *)v36 + 8) = v34;
          v36[6] = 0;
          v36[7] = 0;
          v36[5] = 0;
          *v36 = 0;
          v36[1] = 0;
          v36[2] = v40;
          *v38 = (uint64_t *)v36;
          v41 = **(_QWORD **)(a1 + 16456);
          v42 = (uint64_t *)v36;
          if (v41)
          {
            *(_QWORD *)(a1 + 16456) = v41;
            v42 = *v38;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16464), v42);
          ++*(_QWORD *)(a1 + 16472);
          v8 = a2;
LABEL_6:
          *((_DWORD *)v36 + 10) = v35;
          break;
        case 7:
          v15 = *(_DWORD *)(v11 + 12 * v10 + 12);
          v16 = (uint64_t **)v119;
          while (1)
          {
            v17 = *v16;
            v18 = v16;
            if (!*v16)
              break;
            while (1)
            {
              v16 = (uint64_t **)v17;
              v19 = *((_DWORD *)v17 + 8);
              if (v15 < v19)
                break;
              if (v19 >= v15)
                goto LABEL_20;
              v17 = v16[1];
              if (!v17)
              {
                v18 = v16 + 1;
                goto LABEL_17;
              }
            }
          }
LABEL_17:
          v20 = (uint64_t *)v16;
          v16 = (uint64_t **)operator new(0x40uLL);
          *((_DWORD *)v16 + 8) = v15;
          v16[5] = (uint64_t *)-1;
          v16[6] = 0;
          v16[7] = 0;
          *v16 = 0;
          v16[1] = 0;
          v16[2] = v20;
          *v18 = (uint64_t *)v16;
          v21 = **(_QWORD **)(a1 + 16480);
          v22 = (uint64_t *)v16;
          if (v21)
          {
            *(_QWORD *)(a1 + 16480) = v21;
            v22 = *v18;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16488), v22);
          ++*(_QWORD *)(a1 + 16496);
LABEL_20:
          *((_DWORD *)v16 + 10) = *(unsigned __int16 *)(v8 + 196);
          *((_DWORD *)v16 + 11) = *(unsigned __int16 *)(v8 + 198);
          break;
      }
      ++v10;
    }
    while (v10 < *(_QWORD *)(v8 + 464));
    if ((v117 & 1) == 0)
      goto LABEL_66;
    if (v12 == v119 || v13 == v120)
    {
      v115 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h26x_packet_buffer.cc", 466, "!prepend_sps_pps || (sps != sps_data_.end() && pps != pps_data_.end())", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v116);
      return webrtc::H26xPacketBuffer::SetSpropParameterSets(v115);
    }
    rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v121, &v123, 4uLL);
    rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v121, (const void *)v12[7], v12[6]);
    rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v121, &v123, 4uLL);
    rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v121, (const void *)v13[7], v13[6]);
    v43 = *(_QWORD *)(v8 + 464);
    if ((unint64_t)(v43 + 2) > 0xA)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v63, v64, v65, v66, v67, v68, v69, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h26x_packet_buffer.cc");
    }
    else
    {
      v44 = *((_DWORD *)v12 + 8);
      v45 = *((_DWORD *)v13 + 8);
      *(_QWORD *)(v8 + 464) = v43 + 1;
      v46 = v11 + 8 + 12 * v43;
      *(_BYTE *)v46 = 7;
      *(_DWORD *)(v46 + 4) = v44;
      *(_DWORD *)(v46 + 8) = -1;
      v47 = *(_QWORD *)(v8 + 464);
      *(_QWORD *)(v8 + 464) = v47 + 1;
      v48 = v11 + 8 + 12 * v47;
      *(_BYTE *)v48 = 8;
      *(_DWORD *)(v48 + 4) = v44;
      *(_DWORD *)(v48 + 8) = v45;
    }
  }
LABEL_66:
  v70 = *(_DWORD *)(v8 + 340);
  if (!v70)
  {
    rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v121, &v123, 4uLL);
    v82 = (uint64_t *)(v8 + 16);
    v81 = *(_QWORD *)(v8 + 16);
    if (v81)
    {
      rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v121, (const void *)(*(_QWORD *)(v81 + 16) + *(_QWORD *)(v8 + 24)), *(_QWORD *)(v8 + 32));
      if (&v121 == v82)
        goto LABEL_113;
    }
    else
    {
      rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v121, 0, *(_QWORD *)(v8 + 32));
      if (&v121 == v82)
        goto LABEL_113;
    }
    v85 = v121;
    if (v121)
    {
      v92 = (unsigned int *)(v121 + 24);
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
    }
    v88 = *v82;
    if (!v88)
      goto LABEL_112;
    v94 = (unsigned int *)(v88 + 24);
    do
    {
      v95 = __ldaxr(v94);
      v91 = --v95 == 0;
    }
    while (__stlxr(v95, v94));
    goto LABEL_107;
  }
  if (v70 == 2)
  {
    if (*(_QWORD *)(v8 + 464))
      rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v121, &v123, 4uLL);
    v84 = (uint64_t *)(v8 + 16);
    v83 = *(_QWORD *)(v8 + 16);
    if (v83)
    {
      rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v121, (const void *)(*(_QWORD *)(v83 + 16) + *(_QWORD *)(v8 + 24)), *(_QWORD *)(v8 + 32));
      if (&v121 == v84)
        goto LABEL_113;
    }
    else
    {
      rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v121, 0, *(_QWORD *)(v8 + 32));
      if (&v121 == v84)
        goto LABEL_113;
    }
    v85 = v121;
    if (v121)
    {
      v96 = (unsigned int *)(v121 + 24);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v88 = *v84;
    v8 = a2;
    if (!v88)
      goto LABEL_112;
    v98 = (unsigned int *)(v88 + 24);
    do
    {
      v99 = __ldaxr(v98);
      v91 = --v99 == 0;
    }
    while (__stlxr(v99, v98));
    goto LABEL_107;
  }
  if (v70 != 1)
  {
LABEL_116:
    v101 = 0;
    v102 = v121;
    if (!v121)
      return v101;
LABEL_120:
    v110 = (unsigned int *)(v102 + 24);
    do
    {
      v111 = __ldaxr(v110);
      v112 = v111 - 1;
    }
    while (__stlxr(v112, v110));
    if (!v112)
    {
      v113 = *(_QWORD *)(v102 + 16);
      *(_QWORD *)(v102 + 16) = 0;
      if (v113)
        MEMORY[0x20BD0ADD4](v113, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v102, 0x1010C40EE34DA14);
    }
    return v101;
  }
  v72 = (uint64_t *)(v8 + 16);
  v71 = *(_QWORD *)(v8 + 16);
  if (v71)
    v71 = *(_QWORD *)(v71 + 16) + *(_QWORD *)(v8 + 24);
  v73 = *(_QWORD *)(v8 + 32);
  if (v73 >= 3)
  {
    v74 = v71 + v73;
    v75 = v71 + v73 - 1;
    v76 = (char *)(v71 + 1);
    do
    {
      v78 = *(unsigned __int16 *)v76;
      v77 = v76 + 2;
      v79 = __rev16(v78);
      v80 = &v77[v79];
      if ((unint64_t)&v77[v79] <= v74)
      {
        rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v121, &v123, 4uLL);
        rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v121, v77, v79);
      }
      v76 = &v77[v79];
    }
    while ((unint64_t)v80 < v75);
  }
  if (&v121 != v72)
  {
    v85 = v121;
    if (v121)
    {
      v86 = (unsigned int *)(v121 + 24);
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    v88 = *v72;
    if (!*v72)
      goto LABEL_112;
    v89 = (unsigned int *)(v88 + 24);
    do
    {
      v90 = __ldaxr(v89);
      v91 = --v90 == 0;
    }
    while (__stlxr(v90, v89));
LABEL_107:
    if (v91)
    {
      v100 = *(_QWORD *)(v88 + 16);
      *(_QWORD *)(v88 + 16) = 0;
      if (v100)
        MEMORY[0x20BD0ADD4](v100, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v88, 0x1010C40EE34DA14);
    }
LABEL_112:
    *(_QWORD *)(v8 + 16) = v85;
    *(_OWORD *)(v8 + 24) = v122;
  }
LABEL_113:
  v101 = 1;
  v102 = v121;
  if (v121)
    goto LABEL_120;
  return v101;
}

void webrtc::H26xPacketBuffer::SetSpropParameterSets(_BYTE *a1, void **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15[2];
  void *__p[2];
  __int128 v17;

  if (*a1)
  {
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    *(_OWORD *)v15 = 0u;
    if (webrtc::H264SpropParameterSets::DecodeSprop((uint64_t)v15, a2))
      webrtc::H26xPacketBuffer::InsertSpsPpsNalus((uint64_t)a1, (unint64_t *)v15, (const void **)&__p[1], v3, v4, v5, v6, v7);
    if (__p[1])
    {
      *(void **)&v17 = __p[1];
      operator delete(__p[1]);
    }
    if (v15[0])
    {
      v15[1] = v15[0];
      operator delete(v15[0]);
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h26x_packet_buffer.cc");
  }
}

void webrtc::H26xPacketBuffer::InsertSpsPpsNalus(uint64_t a1, unint64_t *a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t *v25;
  void *v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  size_t v50;
  int v51;
  void *v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t **v55;
  uint64_t **v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::string *v72;
  uint64_t *v73;
  uint64_t v74;
  void *__p;
  _BYTE *v76;
  unsigned int v77;
  int v78;
  char v79;
  char v80[8];
  uint64_t *v81;
  unsigned int v82;
  char v83;
  uint8x16_t v84;

  if (!*(_BYTE *)a1)
  {
LABEL_60:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h26x_packet_buffer.cc", 330, "h264_idr_only_keyframes_allowed_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v74);
LABEL_61:
    v72 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v13, v14, v15, v16, v74);
    std::vector<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>::__push_back_slow_path<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>(v72, v73);
    return;
  }
  v10 = *a2;
  v9 = a2[1];
  if (v9 == *a2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
    goto LABEL_50;
  }
  if ((*(_BYTE *)v10 & 0x1F) != 7)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
LABEL_57:
    rtc::webrtc_logging_impl::Log("\r\t", v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h26x_packet_buffer.cc");
    return;
  }
  if (a3[1] == *a3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
LABEL_50:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h26x_packet_buffer.cc");
    return;
  }
  if ((*(_BYTE *)*a3 & 0x1F) != 8)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
    goto LABEL_57;
  }
  webrtc::H264::ParseRbsp((webrtc::H264 *)(v10 + 1), ~v10 + v9, (unint64_t *)&__p);
  v17 = __p;
  v18 = v76 - (_BYTE *)__p;
  if (v76 == __p)
    v17 = 0;
  v84.i64[0] = (uint64_t)v17;
  if (((v18 >> 28) & 0x1FFFFFFFFLL) != 0)
    goto LABEL_61;
  v84.i32[2] = 8 * v18;
  v84.i8[12] = 1;
  webrtc::SpsParser::ParseSpsUpToVui(&v84, (uint64_t)v80);
  if (__p)
  {
    v76 = __p;
    operator delete(__p);
  }
  webrtc::H264::ParseRbsp((webrtc::H264 *)((char *)*a3 + 1), (size_t)a3[1] + ~(unint64_t)*a3, (unint64_t *)&v84);
  if (v84.i64[1] == v84.i64[0])
    v23 = 0;
  else
    v23 = v84.i64[0];
  webrtc::PpsParser::ParseInternal(v23, v84.i64[1] - v84.i64[0], v19, v20, v21, v22, (uint64_t)&__p);
  if (v84.i64[0])
  {
    v84.i64[1] = v84.i64[0];
    operator delete((void *)v84.i64[0]);
  }
  if (!v83)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v65, v66, v67, v68, v69, v70, v71, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h26x_packet_buffer.cc");
    if (v79)
      return;
    goto LABEL_56;
  }
  if (!v79)
  {
LABEL_56:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
    goto LABEL_57;
  }
  v24 = a2[1] - *a2;
  v25 = v81;
  v26 = (void *)operator new[]();
  memcpy(v26, (const void *)*a2, v24);
  v27 = *(uint64_t **)(a1 + 16488);
  v28 = v82;
  if (v27)
  {
    while (1)
    {
      while (1)
      {
        v30 = (uint64_t **)v27;
        v45 = *((_DWORD *)v27 + 8);
        if (v82 >= v45)
          break;
        v27 = *v30;
        v29 = v30;
        if (!*v30)
          goto LABEL_29;
      }
      if (v45 >= v82)
        break;
      v27 = v30[1];
      if (!v27)
      {
        v29 = v30 + 1;
        goto LABEL_29;
      }
    }
  }
  else
  {
    v29 = (uint64_t **)(a1 + 16488);
    v30 = (uint64_t **)(a1 + 16488);
LABEL_29:
    v46 = (uint64_t *)v30;
    v30 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v30 + 8) = v28;
    v30[5] = (uint64_t *)-1;
    v30[6] = 0;
    v30[7] = 0;
    *v30 = 0;
    v30[1] = 0;
    v30[2] = v46;
    *v29 = (uint64_t *)v30;
    v47 = **(_QWORD **)(a1 + 16480);
    v48 = (uint64_t *)v30;
    if (v47)
    {
      *(_QWORD *)(a1 + 16480) = v47;
      v48 = *v29;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16488), v48);
    ++*(_QWORD *)(a1 + 16496);
  }
  v30[5] = v25;
  v49 = v30[7];
  v30[6] = (uint64_t *)v24;
  v30[7] = (uint64_t *)v26;
  if (v49)
    MEMORY[0x20BD0ADD4](v49, 0x1000C8077774924);
  v50 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  v51 = v78;
  v52 = (void *)operator new[]();
  memcpy(v52, *a3, v50);
  v53 = *(uint64_t **)(a1 + 16464);
  v54 = v77;
  if (v53)
  {
    while (1)
    {
      while (1)
      {
        v56 = (uint64_t **)v53;
        v57 = *((_DWORD *)v53 + 8);
        if (v77 >= v57)
          break;
        v53 = *v56;
        v55 = v56;
        if (!*v56)
          goto LABEL_41;
      }
      if (v57 >= v77)
        break;
      v53 = v56[1];
      if (!v53)
      {
        v55 = v56 + 1;
        goto LABEL_41;
      }
    }
  }
  else
  {
    v55 = (uint64_t **)(a1 + 16464);
    v56 = (uint64_t **)(a1 + 16464);
LABEL_41:
    v58 = (uint64_t *)v56;
    v56 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v56 + 8) = v54;
    v56[6] = 0;
    v56[7] = 0;
    v56[5] = 0;
    *v56 = 0;
    v56[1] = 0;
    v56[2] = v58;
    *v55 = (uint64_t *)v56;
    v59 = **(_QWORD **)(a1 + 16456);
    v60 = (uint64_t *)v56;
    if (v59)
    {
      *(_QWORD *)(a1 + 16456) = v59;
      v60 = *v55;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16464), v60);
    ++*(_QWORD *)(a1 + 16472);
  }
  *((_DWORD *)v56 + 10) = v51;
  v61 = v56[7];
  v56[6] = (uint64_t *)v50;
  v56[7] = (uint64_t *)v52;
  if (v61)
    MEMORY[0x20BD0ADD4](v61, 0x1000C8077774924);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    if (v83)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v62, v63, v64, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/h26x_packet_buffer.cc");
      return;
    }
    __break(1u);
    goto LABEL_60;
  }
}

_QWORD *std::vector<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>::__push_back_slow_path<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v4)
    v4 = v6 >> 2;
  v18 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
  v7 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v18)
    v7 = v4;
  if (!v7)
  {
    __break(1u);
LABEL_44:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v7 >> 61)
    goto LABEL_44;
  v9 = 8 * v7;
  v10 = (char *)operator new(8 * v7);
  v11 = &v10[v9];
  v12 = &v10[8 * v3];
  v13 = *a2;
  *a2 = 0;
  *(_QWORD *)v12 = v13;
  v14 = v12 + 8;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 != (char *)*a1)
  {
    v17 = (unint64_t)&v16[-*a1 - 8];
    if (v17 < 0x78)
      goto LABEL_47;
    v18 = &v16[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] >= v12 || &v10[v2 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8] >= v16;
    if (!v18)
      goto LABEL_47;
    v19 = (v17 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = &v16[-v20];
    v12 -= v20;
    v22 = &v10[8 * v3 - 16];
    v23 = v16 - 16;
    v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *((_OWORD *)v23 - 1);
      v25 = *(_OWORD *)v23;
      *((_OWORD *)v23 - 1) = 0uLL;
      *(_OWORD *)v23 = 0uLL;
      *((_OWORD *)v22 - 1) = v26;
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    v16 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        v27 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v12 - 1) = v27;
        v12 -= 8;
      }
      while (v16 != v15);
    }
    v16 = (char *)*a1;
    v28 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v11;
    while (1)
    {
      do
      {
        if (v28 == v16)
          goto LABEL_39;
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        v29 = v30;
        *(_QWORD *)v28 = 0;
      }
      while (!v30);
      if (*(_BYTE *)(v29 + 184))
      {
        if ((*(_BYTE *)(v29 + 152) & 1) != 0)
        {
          operator delete(*(void **)(v29 + 160));
          if ((*(_BYTE *)(v29 + 104) & 1) != 0)
          {
LABEL_36:
            operator delete(*(void **)(v29 + 112));
            if ((*(_BYTE *)(v29 + 56) & 1) == 0)
              goto LABEL_29;
LABEL_28:
            operator delete(*(void **)(v29 + 64));
            goto LABEL_29;
          }
        }
        else if ((*(_BYTE *)(v29 + 104) & 1) != 0)
        {
          goto LABEL_36;
        }
        if ((*(_BYTE *)(v29 + 56) & 1) != 0)
          goto LABEL_28;
      }
LABEL_29:
      v31 = *(_QWORD *)(v29 + 16);
      if (v31)
      {
        v32 = (unsigned int *)(v31 + 24);
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v35 = *(_QWORD *)(v31 + 16);
          *(_QWORD *)(v31 + 16) = 0;
          if (v35)
            MEMORY[0x20BD0ADD4](v35, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v31, 0x1010C40EE34DA14);
        }
      }
      MEMORY[0x20BD0ADEC](v29, 0x10B2C4061102D9CLL);
    }
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v11;
LABEL_39:
  if (v16)
    operator delete(v16);
  return v14;
}

_BYTE *dcsctp::HeartbeatAckChunk::Parse@<X0>(_BYTE *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  size_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  unint64_t v15;
  char *v16;
  char *v17;

  if (a2)
    v4 = result;
  else
    v4 = 0;
  if (a2 < 4
    || *v4 != 5
    || ((v5 = __rev16(*((unsigned __int16 *)v4 + 1)), v5 >= 4) ? (v6 = a2 >= v5) : (v6 = 0),
        v6 ? (v7 = a2 - v5 >= 4) : (v7 = 1),
        v7))
  {
LABEL_14:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return result;
  }
  v8 = (unsigned __int16 *)(v4 + 4);
  if (v5 <= 4)
    v9 = 0;
  else
    v9 = v8;
  v10 = v5 - 4;
  if (v5 != 4)
  {
    v11 = v5 - 4;
    v12 = v9;
    while (v11 >= 4)
    {
      v13 = __rev16(v12[1]);
      if (v13 < 4 || v11 < v13)
        break;
      v15 = (unsigned __int16)(v13 + 3) & 0xFFFC;
      if (v11 > v15)
      {
        v12 = (unsigned __int16 *)((char *)v12 + v15);
        if (v11 - v15 < v11)
          v11 -= v15;
        if (v11)
          continue;
      }
      if ((v10 & 0x8000000000000000) != 0)
        abort();
      v16 = (char *)operator new(v10);
      v17 = &v16[v10];
      result = memcpy(v16, v9, v10);
      goto LABEL_33;
    }
    goto LABEL_14;
  }
  v16 = 0;
  v17 = 0;
LABEL_33:
  *(_QWORD *)a3 = &off_24C0B4A90;
  *(_QWORD *)(a3 + 8) = v16;
  *(_QWORD *)(a3 + 16) = v17;
  *(_QWORD *)(a3 + 24) = v17;
  *(_BYTE *)(a3 + 32) = 1;
  return result;
}

void dcsctp::HeartbeatAckChunk::~HeartbeatAckChunk(dcsctp::HeartbeatAckChunk *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0B4A90;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0B4A90;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::HeartbeatAckChunk::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  char *v16;
  uint64_t v17;

  v9 = *(_BYTE **)(a1 + 8);
  v10 = *(_BYTE **)(a1 + 16);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v13 = v10 - v9 + 4;
  if (v12 >= v12 + v13)
  {
    if (v12 > v12 + v13)
      *(_QWORD *)(a2 + 8) = &v11[v12 + v13];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v10 - v9 + 4);
    v11 = *(char **)a2;
  }
  v14 = &v11[v12];
  *v14 = 5;
  v14[2] = BYTE1(v13);
  v14[3] = v13;
  if ((unint64_t)(v10 - v9) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v17);
    dcsctp::HeartbeatAckChunk::ToString(v16);
  }
  else
  {
    if (v10 == v9)
      v15 = 0;
    else
      v15 = v9;
    if (v10 != v9)
    {
      if (v15)
        memcpy((void *)(*(_QWORD *)a2 + v12 + 4), v15, v10 - v9);
    }
  }
}

void dcsctp::HeartbeatAckChunk::ToString(char *a1@<X8>)
{
  a1[23] = 13;
  if (a1 <= "HEARTBEAT-ACK" && a1 + 13 > "HEARTBEAT-ACK")
    __break(1u);
  else
    strcpy(a1, "HEARTBEAT-ACK");
}

uint64_t dcsctp::HeartbeatHandler::HeartbeatHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  v9 = *(_DWORD *)(a4 + 108);
  if (v9 == 0x7FFFFFFF)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = 1000 * v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a4 + 166);
  v11 = (uint64_t *)(a1 + 48);
  v12 = operator new(0x20uLL);
  *v12 = &unk_24C0B4AC0;
  v12[1] = dcsctp::HeartbeatHandler::OnIntervalTimerExpiry;
  v12[2] = 0;
  v12[3] = a1;
  v42 = v12;
  v34 = v10;
  v35 = 0;
  v36 = 0;
  v37 = 0x7FFFFFFFFFFFFFFFLL;
  v38 = 0;
  dcsctp::TimerManager::CreateTimer(a6, "heartbeat-interval", 0x12uLL, v41, (uint64_t)&v34, v13, v14, v15, v11);
  v16 = v42;
  if (v42 == v41)
  {
    v17 = 4;
    v16 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_9;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_9:
  v18 = *(_QWORD *)(a1 + 24);
  v19 = operator new(0x20uLL);
  *v19 = &unk_24C0B4AC0;
  v19[1] = dcsctp::HeartbeatHandler::OnTimeoutTimerExpiry;
  v19[2] = 0;
  v19[3] = a1;
  v40 = v19;
  v23 = *(_DWORD *)(a4 + 76);
  v24 = 1000 * v23;
  if (v23 == 0x7FFFFFFF)
    v24 = 0x7FFFFFFFFFFFFFFFLL;
  v34 = v24;
  v35 = 1;
  v36 = 0x100000000;
  v37 = 0x7FFFFFFFFFFFFFFFLL;
  v38 = 0;
  dcsctp::TimerManager::CreateTimer(v18, "heartbeat-timeout", 0x11uLL, v39, (uint64_t)&v34, v20, v21, v22, (uint64_t *)(a1 + 56));
  v25 = v40;
  if (v40 == v39)
  {
    v26 = 4;
    v25 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_16;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_16:
  v27 = *(_QWORD *)(a1 + 32);
  if (v27)
  {
    v28 = *(_QWORD *)(a1 + 48);
    if (*(_BYTE *)(a1 + 40))
    {
      v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
      v30 = *(_QWORD *)(a1 + 32);
      v27 = 0x7FFFFFFFFFFFFFFFLL;
      if (v30 != 0x7FFFFFFFFFFFFFFFLL && v29 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v27 = 0x8000000000000000;
        v31 = v29 == 0x8000000000000000 || v30 == 0x8000000000000000;
        v32 = v30 + v29;
        if (!v31)
          v27 = v32;
      }
    }
    if (v27 >= 86400000000)
      v27 = 86400000000;
    *(_QWORD *)(v28 + 144) = v27;
    dcsctp::Timer::Start((dcsctp::Timer *)*v11);
  }
  return a1;
}

uint64_t dcsctp::HeartbeatHandler::OnIntervalTimerExpiry(dcsctp::HeartbeatHandler *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  void *v23[5];
  void (**v24)(dcsctp::HeartbeatInfoParameter *__hidden);
  void *__p;
  void *v26;
  void *v27;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2)))
  {
    v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    v4 = *((_QWORD *)this + 7);
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
    v6 = 86400000000;
    if (v5 < 86400000000)
      v6 = v5;
    *(_QWORD *)(v4 + 144) = v6;
    dcsctp::Timer::Start(*((dcsctp::Timer **)this + 7));
    memset(v23, 0, 24);
    v7 = v3 / 0x3E8uLL;
    if (v3 % 0x3E8uLL > 0x1F3)
      ++v7;
    if (-v3 % 0x3E8uLL <= 0x1F4)
      v8 = 0;
    else
      v8 = -1;
    if (v3 < 0)
      v9 = v8 - -v3 / 0x3E8uLL;
    else
      v9 = v7;
    v10 = operator new(8uLL);
    *v10 = bswap64(v9);
    v24 = &off_24C0B4B08;
    v11 = operator new(8uLL);
    __p = v11;
    *v11 = *v10;
    v26 = v11 + 1;
    v27 = v11 + 1;
    dcsctp::HeartbeatInfoParameter::SerializeTo((uint64_t)&v24, (uint64_t)v23, v12, v13, v14, v15, v16, v17);
    v22 = *(_OWORD *)v23;
    v18 = v23[2];
    memset(v23, 0, 24);
    if (__p)
      operator delete(__p);
    operator delete(v10);
    if (v23[0])
    {
      v23[1] = v23[0];
      operator delete(v23[0]);
    }
    v19 = *((_QWORD *)this + 2);
    (*(void (**)(void (***__return_ptr)(dcsctp::HeartbeatInfoParameter *__hidden), uint64_t))(*(_QWORD *)v19 + 88))(&v24, v19);
    v23[0] = &off_24C0B4B38;
    *(_OWORD *)&v23[1] = v22;
    v23[3] = v18;
    v20 = dcsctp::SctpPacket::Builder::Add((uint64_t)&v24, (uint64_t)v23);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 96))(v19, v20);
    v23[0] = &off_24C0B4B38;
    if (v23[1])
    {
      v23[2] = v23[1];
      operator delete(v23[1]);
    }
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
  }
  return 0;
}

uint64_t dcsctp::HeartbeatHandler::OnTimeoutTimerExpiry(dcsctp::HeartbeatHandler *this)
{
  (*(void (**)(_QWORD, const char *, uint64_t))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2), "HEARTBEAT timeout", 17);
  return 0;
}

void dcsctp::HeartbeatHandler::HandleHeartbeatAck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char *v9;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  unsigned __int16 *v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  unint64_t *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  const void *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53[2];
  __int16 v54;

  v12 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v12 + 156))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 136) + 24))(*(_QWORD *)(v12 + 136));
    *(_DWORD *)(v12 + 160) = 0;
    *(_BYTE *)(v12 + 156) = 0;
  }
  v13 = *(unsigned __int16 **)(a2 + 8);
  v14 = *(unsigned __int16 **)(a2 + 16);
  v51 = 0;
  v52 = 0;
  v50 = 0;
  v15 = (char *)((char *)v14 - (char *)v13);
  if (v14 == v13)
  {
    v23 = 0;
LABEL_25:
    v25 = 1;
    goto LABEL_39;
  }
  v16 = (char *)v13;
  do
  {
    if ((unint64_t)v15 <= 3)
    {
      rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 55, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v49);
      JUMPOUT(0x2085FC934);
    }
    v54 = 0;
    v54 = bswap32(*(unsigned __int16 *)v16) >> 16;
    v17 = __rev16(*((unsigned __int16 *)v16 + 1));
    if ((unint64_t)v15 >= v17)
      v18 = v17;
    else
      v18 = (uint64_t)v15;
    if (v18)
      v19 = (uint64_t)v16;
    else
      v19 = 0;
    v53[0] = v19;
    v53[1] = v18;
    std::vector<dcsctp::ParameterDescriptor>::emplace_back<unsigned short &,rtc::ArrayView<unsigned char const,-4711l>>((void **)&v50, &v54, v53);
    v20 = (unsigned __int16)(v17 + 3) & 0xFFFC;
    v21 = &v15[-v20];
    if ((unint64_t)v15 <= v20)
      break;
    v22 = &v16[v20];
    if (v21 < v15)
      v15 = v21;
    v16 = v15 ? v22 : 0;
  }
  while (v15);
  v23 = v50;
  if (v50 == v51)
    goto LABEL_25;
  v24 = v50;
  while (*(_WORD *)v24 != 1)
  {
    v24 += 3;
    if (v24 == v51)
      goto LABEL_25;
  }
  v26 = (unsigned __int16 *)v24[1];
  v27 = v24[2];
  if (!v27)
    v26 = 0;
  if (v27 < 4
    || __rev16(*v26) != 1
    || ((v28 = __rev16(v26[1]), v28 >= 4) ? (v29 = v27 >= v28) : (v29 = 0),
        v29 ? (v30 = v27 - v28 > 3) : (v30 = 1),
        v30))
  {
    v25 = 0;
    v8 = 1;
  }
  else
  {
    if (v28 < 5)
    {
      v8 = 0;
      v9 = 0;
      v15 = 0;
    }
    else
    {
      v47 = v28 - 4;
      v48 = v26 + 2;
      v15 = (char *)operator new(v28 - 4);
      v9 = &v15[v47];
      memcpy(v15, v48, v47);
      v8 = 0;
    }
    v25 = 0;
  }
LABEL_39:
  if (v23)
  {
    v51 = v23;
    operator delete(v23);
  }
  if (((v8 | v25) & 1) != 0)
  {
    v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v31 + 88))(v31, 3, "Failed to parse HEARTBEAT-ACK; No Heartbeat Info parameter",
      58);
    return;
  }
  if (v9 - v15 == 8)
  {
    if (v9 == v15)
      v32 = 0;
    else
      v32 = (unint64_t *)v15;
    v33 = 1000 * bswap64(*v32);
    v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 56))(v34);
    if (v33 >= 1 && v35 >= v33)
    {
      v37 = v35 - v33;
      if (v35 == 0x8000000000000000)
        v37 = 0x8000000000000000;
      if (v35 == 0x7FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), v38);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
    if (!v15)
      return;
LABEL_63:
    operator delete(v15);
    return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/net/dcsctp/socket/heartbeat_handler.cc");
  v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v46 + 88))(v46, 3, "Failed to parse HEARTBEAT-ACK; Failed to deserialized Heartbeat info parameter",
    78);
  if (v15)
    goto LABEL_63;
}

void std::__function::__func<std::__bind_front_t<webrtc::TimeDelta (dcsctp::HeartbeatHandler::*)(void),dcsctp::HeartbeatHandler*>,std::allocator<std::__bind_front_t<webrtc::TimeDelta (dcsctp::HeartbeatHandler::*)(void),dcsctp::HeartbeatHandler*>>,webrtc::TimeDelta ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

__n128 std::__function::__func<std::__bind_front_t<webrtc::TimeDelta (dcsctp::HeartbeatHandler::*)(void),dcsctp::HeartbeatHandler*>,std::allocator<std::__bind_front_t<webrtc::TimeDelta (dcsctp::HeartbeatHandler::*)(void),dcsctp::HeartbeatHandler*>>,webrtc::TimeDelta ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C0B4AC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind_front_t<webrtc::TimeDelta (dcsctp::HeartbeatHandler::*)(void),dcsctp::HeartbeatHandler*>,std::allocator<std::__bind_front_t<webrtc::TimeDelta (dcsctp::HeartbeatHandler::*)(void),dcsctp::HeartbeatHandler*>>,webrtc::TimeDelta ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C0B4AC0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind_front_t<webrtc::TimeDelta (dcsctp::HeartbeatHandler::*)(void),dcsctp::HeartbeatHandler*>,std::allocator<std::__bind_front_t<webrtc::TimeDelta (dcsctp::HeartbeatHandler::*)(void),dcsctp::HeartbeatHandler*>>,webrtc::TimeDelta ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void dcsctp::HeartbeatInfoParameter::~HeartbeatInfoParameter(dcsctp::HeartbeatInfoParameter *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0B4B08;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0B4B08;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::HeartbeatInfoParameter::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  const void *v17;
  size_t v18;
  BOOL v19;
  std::string *v20;
  uint64_t v21;

  v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v13 = v10 + 4;
  v14 = v12 + v10 + 4;
  if (v12 >= v14)
  {
    if (v12 > v14)
      *(_QWORD *)(a2 + 8) = &v11[v14];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v10 + 4);
    v11 = *(char **)a2;
  }
  v15 = &v11[v12];
  *(_WORD *)v15 = 256;
  v15[2] = HIBYTE(v13);
  v15[3] = v13;
  if (v10 >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v20 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v21);
    dcsctp::HeartbeatInfoParameter::ToString((dcsctp::HeartbeatInfoParameter *)v20);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    if (v16)
      v17 = *(const void **)(a1 + 8);
    else
      v17 = 0;
    if (v10 >= v16)
      v18 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    else
      v18 = v10;
    if (v17)
      v19 = v18 == 0;
    else
      v19 = 1;
    if (!v19)
      memcpy((void *)(*(_QWORD *)a2 + v12 + 4), v17, v18);
  }
}

void dcsctp::HeartbeatInfoParameter::ToString(dcsctp::HeartbeatInfoParameter *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string::size_type size;
  int v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v11;
  std::string v12;

  v4 = (char *)operator new(0x30uLL);
  if (v4 > "Heartbeat Info parameter (info_length=" || v4 + 38 <= "Heartbeat Info parameter (info_length=")
  {
    strcpy(v4, "Heartbeat Info parameter (info_length=");
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
    *(_OWORD *)&v12.__r_.__value_.__r.__words[1] = xmmword_208F0AAE0;
    v5 = rtc::StringBuilder::operator<<(&v12, *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
    size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    v7 = (char)size;
    if ((size & 0x80u) == 0)
      v8 = 22;
    else
      v8 = (v5->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((size & 0x80u) != 0)
      size = v5->__r_.__value_.__l.__size_;
    if (v8 == size)
    {
      std::string::__grow_by_and_replace(v5, v8, 1uLL, v8, v8, 0, 1uLL, ")");
LABEL_21:
      *a2 = v12;
      return;
    }
    if (v7 >= 0)
      v9 = v5;
    else
      v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
    if ((char *)v9 + size > ")" || (char *)&v9->__r_.__value_.__l.__data_ + size + 1 <= ")")
    {
      v9->__r_.__value_.__s.__data_[size] = 41;
      v11 = size + 1;
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
        v5->__r_.__value_.__l.__size_ = v11;
      else
        *((_BYTE *)&v5->__r_.__value_.__s + 23) = v11 & 0x7F;
      v9->__r_.__value_.__s.__data_[v11] = 0;
      goto LABEL_21;
    }
  }
  __break(1u);
}

_BYTE *dcsctp::HeartbeatRequestChunk::Parse@<X0>(_BYTE *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  size_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  unint64_t v15;
  char *v16;
  char *v17;

  if (a2)
    v4 = result;
  else
    v4 = 0;
  if (a2 < 4
    || *v4 != 4
    || ((v5 = __rev16(*((unsigned __int16 *)v4 + 1)), v5 >= 4) ? (v6 = a2 >= v5) : (v6 = 0),
        v6 ? (v7 = a2 - v5 >= 4) : (v7 = 1),
        v7))
  {
LABEL_14:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return result;
  }
  v8 = (unsigned __int16 *)(v4 + 4);
  if (v5 <= 4)
    v9 = 0;
  else
    v9 = v8;
  v10 = v5 - 4;
  if (v5 != 4)
  {
    v11 = v5 - 4;
    v12 = v9;
    while (v11 >= 4)
    {
      v13 = __rev16(v12[1]);
      if (v13 < 4 || v11 < v13)
        break;
      v15 = (unsigned __int16)(v13 + 3) & 0xFFFC;
      if (v11 > v15)
      {
        v12 = (unsigned __int16 *)((char *)v12 + v15);
        if (v11 - v15 < v11)
          v11 -= v15;
        if (v11)
          continue;
      }
      if ((v10 & 0x8000000000000000) != 0)
        abort();
      v16 = (char *)operator new(v10);
      v17 = &v16[v10];
      result = memcpy(v16, v9, v10);
      goto LABEL_33;
    }
    goto LABEL_14;
  }
  v16 = 0;
  v17 = 0;
LABEL_33:
  *(_QWORD *)a3 = &off_24C0B4B38;
  *(_QWORD *)(a3 + 8) = v16;
  *(_QWORD *)(a3 + 16) = v17;
  *(_QWORD *)(a3 + 24) = v17;
  *(_BYTE *)(a3 + 32) = 1;
  return result;
}

void dcsctp::HeartbeatRequestChunk::~HeartbeatRequestChunk(dcsctp::HeartbeatRequestChunk *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0B4B38;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0B4B38;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::HeartbeatRequestChunk::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  char *v16;
  uint64_t v17;

  v9 = *(_BYTE **)(a1 + 8);
  v10 = *(_BYTE **)(a1 + 16);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v13 = v10 - v9 + 4;
  if (v12 >= v12 + v13)
  {
    if (v12 > v12 + v13)
      *(_QWORD *)(a2 + 8) = &v11[v12 + v13];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v10 - v9 + 4);
    v11 = *(char **)a2;
  }
  v14 = &v11[v12];
  *v14 = 4;
  v14[2] = BYTE1(v13);
  v14[3] = v13;
  if ((unint64_t)(v10 - v9) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v17);
    dcsctp::HeartbeatRequestChunk::ToString(v16);
  }
  else
  {
    if (v10 == v9)
      v15 = 0;
    else
      v15 = v9;
    if (v10 != v9)
    {
      if (v15)
        memcpy((void *)(*(_QWORD *)a2 + v12 + 4), v15, v10 - v9);
    }
  }
}

void dcsctp::HeartbeatRequestChunk::ToString(char *a1@<X8>)
{
  a1[23] = 9;
  if (a1 <= "HEARTBEAT" && a1 + 9 > "HEARTBEAT")
    __break(1u);
  else
    strcpy(a1, "HEARTBEAT");
}

uint64_t rtc::InitRandom(rtc *this, const char *a2)
{
  rtc *v3;
  unsigned __int8 v4;
  _QWORD ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  const char *v19;

  v3 = this;
  v5 = (_QWORD ***)&unk_253EA7000;
  if ((v4 & 1) == 0)
  {
    v19 = a2;
    v3 = this;
    a2 = v19;
    if (v15)
    {
      v16 = (_QWORD *)operator new();
      v17 = (_QWORD *)operator new();
      *v17 = &unk_24C0B4B68;
      *v16 = v17;
      v5 = (_QWORD ***)&unk_253EA7000;
      v3 = this;
      a2 = v19;
    }
  }
  v6 = (*(uint64_t (**)(_QWORD, rtc *, const char *))(**v5[287] + 16))(*v5[287], v3, a2);
  if ((v6 & 1) == 0 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc");
  return v6;
}

uint64_t rtc::CreateRandomString@<X0>(rtc *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t vars0;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((result & 1) == 0)
  {
    v7 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v3, v4, v5, v6, vars0);
    return rtc::CreateRandomString((std::string::size_type)v7, v8, v9, v10);
  }
  return result;
}

uint64_t rtc::CreateRandomString(std::string::size_type a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  _QWORD *v29;

  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (256 % a3)
      goto LABEL_3;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
    if (256 % a3)
    {
LABEL_3:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc");
      return 0;
    }
  }
  v16 = operator new[]();
  if ((v17 & 1) == 0
  {
    v28 = (_QWORD *)operator new();
    v29 = (_QWORD *)operator new();
    *v29 = &unk_24C0B4B68;
    *v28 = v29;
  }
  if ((v15 & 1) != 0)
  {
    std::string::reserve((std::string *)a4, a1);
    if (a1)
    {
      v18 = (unsigned __int8 *)v16;
      do
      {
        v19 = *v18++;
        std::string::push_back((std::string *)a4, *(_BYTE *)(a2 + (v19 % a3)));
        --a1;
      }
      while (a1);
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc");
  }
  MEMORY[0x20BD0ADD4](v16, 0x1000C8077774924);
  return v15;
}

uint64_t rtc::CreateRandomUuid@<X0>(std::string *a1@<X8>)
{
  _BYTE *v3;
  unsigned __int8 v4;
  _QWORD ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  uint64_t v14;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v3 = (_BYTE *)operator new[]();
  v5 = (_QWORD ***)&unk_253EA7000;
  if ((v4 & 1) == 0
  {
    v10 = (_QWORD *)operator new();
    v11 = (_QWORD *)operator new();
    *v11 = &unk_24C0B4B68;
    *v10 = v11;
    v5 = (_QWORD ***)&unk_253EA7000;
  }
  if (((*(uint64_t (**)(_QWORD, _BYTE *, uint64_t))(**v5[287] + 24))(*v5[287], v3, 31) & 1) != 0)
  {
    std::string::reserve(a1, 0x24uLL);
    std::string::push_back(a1, 45);
    std::string::push_back(a1, 45);
    std::string::push_back(a1, 52);
    std::string::push_back(a1, 45);
    std::string::push_back(a1, 45);
    JUMPOUT(0x20BD0ADD4);
  }
  v12 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 178, "Rng().Generate(bytes.get(), 31)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v6, v7, v8, v9, v14);
  return rtc::CreateRandomId((rtc *)v12);
}

uint64_t rtc::CreateRandomId(rtc *this)
{
  unsigned __int8 v1;
  _QWORD ***v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;

  v11 = 0;
  v2 = (_QWORD ***)&unk_253EA7000;
  if ((v1 & 1) == 0
  {
    v8 = (_QWORD *)operator new();
    v9 = (_QWORD *)operator new();
    *v9 = &unk_24C0B4B68;
    *v8 = v9;
    v2 = (_QWORD ***)&unk_253EA7000;
  }
  if (((*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**v2[287] + 24))(*v2[287], &v11, 4) & 1) == 0)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 206, "Rng().Generate(&id, sizeof(id))", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v3, v4, v5, v6, v10);
    JUMPOUT(0x2085FD788);
  }
  return v11;
}

void rtc::`anonymous namespace'::SecureRandomGenerator::~SecureRandomGenerator(rtc::_anonymous_namespace_::SecureRandomGenerator *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::`anonymous namespace'::SecureRandomGenerator::Init(rtc::_anonymous_namespace_::SecureRandomGenerator *this, const void *a2)
{
  return 1;
}

uint64_t rtc::`anonymous namespace'::SecureRandomGenerator::Generate(rtc::_anonymous_namespace_::SecureRandomGenerator *this, uint64_t a2, unint64_t a3)
{
  RAND_bytes_with_additional_data(a2, a3, (uint64_t)&RAND_bytes_kZeroAdditionalData);
  return 1;
}

void SetVTSessionProperty(OpaqueVTCompressionSession *a1, const __CFString *a2, int a3)
{
  CFNumberRef v5;
  CFIndex Length;
  CFIndex v7;
  std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v16;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
  LODWORD(a1) = VTSessionSetProperty(a1, a2, v5);
  CFRelease(v5);
  if ((_DWORD)a1)
  {
    memset(&v16, 0, sizeof(v16));
    Length = CFStringGetLength(a2);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v8 = (std::string::value_type *)operator new[]();
    if (CFStringGetCString(a2, v8, v7, 0x8000100u))
      std::string::__assign_external(&v16, v8);
    MEMORY[0x20BD0ADD4](v8, 0x1000C8077774924);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/helpers.cc");
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

{
  CFTypeRef *v4;
  CFIndex Length;
  CFIndex v6;
  std::string::value_type *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string v15;

  v4 = (CFTypeRef *)MEMORY[0x24BDBD270];
  if (!a3)
    v4 = (CFTypeRef *)MEMORY[0x24BDBD268];
  if (VTSessionSetProperty(a1, a2, *v4))
  {
    memset(&v15, 0, sizeof(v15));
    Length = CFStringGetLength(a2);
    v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v7 = (std::string::value_type *)operator new[]();
    if (CFStringGetCString(a2, v7, v6, 0x8000100u))
      std::string::__assign_external(&v15, v7);
    MEMORY[0x20BD0ADD4](v7, 0x1000C8077774924);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/helpers.cc");
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void SetVTSessionProperty(OpaqueVTCompressionSession *a1, const __CFString *a2, double a3)
{
  CFNumberRef v5;
  CFIndex Length;
  CFIndex v7;
  std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v16;
  double valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberDoubleType, &valuePtr);
  LODWORD(a1) = VTSessionSetProperty(a1, a2, v5);
  CFRelease(v5);
  if ((_DWORD)a1)
  {
    memset(&v16, 0, sizeof(v16));
    Length = CFStringGetLength(a2);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v8 = (std::string::value_type *)operator new[]();
    if (CFStringGetCString(a2, v8, v7, 0x8000100u))
      std::string::__assign_external(&v16, v8);
    MEMORY[0x20BD0ADD4](v8, 0x1000C8077774924);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/helpers.cc");
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void SetVTSessionProperty(OpaqueVTCompressionSession *a1, const __CFString *a2, unsigned int a3)
{
  CFNumberRef v5;
  CFIndex Length;
  CFIndex v7;
  std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v16;
  uint64_t valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr);
  LODWORD(a1) = VTSessionSetProperty(a1, a2, v5);
  CFRelease(v5);
  if ((_DWORD)a1)
  {
    memset(&v16, 0, sizeof(v16));
    Length = CFStringGetLength(a2);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v8 = (std::string::value_type *)operator new[]();
    if (CFStringGetCString(a2, v8, v7, 0x8000100u))
      std::string::__assign_external(&v16, v8);
    MEMORY[0x20BD0ADD4](v8, 0x1000C8077774924);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/helpers.cc");
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void SetVTSessionProperty(OpaqueVTCompressionSession *a1, const __CFString *a2, const __CFString *a3)
{
  CFIndex Length;
  CFIndex v6;
  std::string::value_type *v7;
  CFIndex v8;
  CFIndex v9;
  std::string::value_type *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string v18;
  std::string v19;

  if (VTSessionSetProperty(a1, a2, a3))
  {
    memset(&v19, 0, sizeof(v19));
    Length = CFStringGetLength(a2);
    v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v7 = (std::string::value_type *)operator new[]();
    if (CFStringGetCString(a2, v7, v6, 0x8000100u))
      std::string::__assign_external(&v19, v7);
    MEMORY[0x20BD0ADD4](v7, 0x1000C8077774924);
    memset(&v18, 0, sizeof(v18));
    v8 = CFStringGetLength(a3);
    v9 = CFStringGetMaximumSizeForEncoding(v8, 0x8000100u) + 1;
    v10 = (std::string::value_type *)operator new[]();
    if (CFStringGetCString(a3, v10, v9, 0x8000100u))
      std::string::__assign_external(&v18, v10);
    MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    {
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_8;
    }
    else
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/helpers.cc");
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_8:
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
LABEL_12:
        operator delete(v19.__r_.__value_.__l.__data_);
        return;
      }
    }
    operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_12;
  }
}

webrtc::HighPassFilter *webrtc::HighPassFilter::HighPassFilter(webrtc::HighPassFilter *this, int a2, unint64_t a3)
{
  unint64_t *v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  _BYTE v16[20];

  *(_DWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v4 = (unint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a3)
  {
    std::vector<std::unique_ptr<webrtc::CascadedBiQuadFilter>>::__append(v4, a3);
    v6 = *((_QWORD *)this + 1);
    if (*(_DWORD *)this == 32000)
    if (*(_DWORD *)this == 48000)
    else
      v7 = v5;
    if (*((_QWORD *)this + 2) != v6)
    {
      v8 = 0;
      v15 = *(_OWORD *)v7;
      v9 = v7[4];
      do
      {
        v10 = (_QWORD *)operator new();
        *(_DWORD *)v16 = v9;
        *(_OWORD *)&v16[4] = 0uLL;
        v11 = operator new(0x24uLL);
        v10[1] = (char *)v11 + 36;
        v10[2] = (char *)v11 + 36;
        *v11 = v15;
        v11[1] = *(_OWORD *)v16;
        *((_DWORD *)v11 + 8) = (unsigned __int128)0 >> 96;
        *v10 = v11;
        v12 = *(_QWORD *)(v6 + 8 * v8);
        *(_QWORD *)(v6 + 8 * v8) = v10;
        if (v12)
        {
          v13 = *(void **)v12;
          if (*(_QWORD *)v12)
          {
            *(_QWORD *)(v12 + 8) = v13;
            operator delete(v13);
          }
          MEMORY[0x20BD0ADEC](v12, 0x20C40960023A9);
        }
        ++v8;
        v6 = *((_QWORD *)this + 1);
      }
      while (v8 < (*((_QWORD *)this + 2) - v6) >> 3);
    }
  }
  return this;
}

uint64_t webrtc::HighPassFilter::Process(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float **v9;
  float *v10;
  float *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;

  v2 = *a2;
  v3 = a2[1];
  v4 = v3 - *a2;
  if (v3 != *a2)
  {
    v5 = 0;
    v6 = *(_QWORD *)(result + 8);
    v7 = (*(_QWORD *)(result + 16) - v6) >> 3;
    v8 = v4 / 24;
    if (v8 <= 1)
      v8 = 1;
    while (v5 != v7)
    {
      v9 = *(float ***)(v6 + 8 * v5);
      v10 = *v9;
      v11 = v9[1];
      if (v10 != v11)
      {
        v12 = (uint64_t *)(v2 + 24 * v5);
        v13 = *v12;
        result = v12[1];
        v14 = result == *v12;
        v15 = result == *v12 ? 0 : *v12;
        if (!v14)
        {
          v16 = (result - v13) >> 2;
          do
          {
            v17 = *v10;
            v18 = v10[1];
            v20 = v10[7];
            v19 = v10[8];
            v21 = v10[5];
            v22 = v10[6];
            v23 = v10[2];
            v24 = -v10[3];
            v25 = -v10[4];
            result = v15;
            v26 = v16;
            do
            {
              v27 = v21;
              v28 = v19;
              v19 = v20;
              v21 = *(float *)result;
              v20 = (float)((float)((float)((float)(v18 * v27) + (float)(v17 * *(float *)result)) + (float)(v23 * v22))
                          + (float)(v24 * v20))
                  + (float)(v25 * v28);
              *(float *)result = v20;
              result += 4;
              v22 = v27;
              --v26;
            }
            while (v26);
            v10[5] = v21;
            v10[6] = v27;
            v10[7] = v20;
            v10[8] = v19;
            v10 += 9;
          }
          while (v10 != v11);
        }
      }
      if (++v5 == v8)
        return result;
    }
    __break(1u);
  }
  return result;
}

void std::vector<std::unique_ptr<webrtc::CascadedBiQuadFilter>>::__append(unint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;

  v5 = a1[1];
  v4 = a1[2];
  v6 = (_QWORD *)v5;
  if (a2 > (uint64_t)(v4 - v5) >> 3)
  {
    v7 = (_QWORD *)*a1;
    v8 = v5 - *a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (!(v10 >> 61))
    {
      v11 = v4 - (_QWORD)v7;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v15 = (unint64_t)&v13[8 * v9];
      v16 = 8 * a2;
      v17 = v15 + 8 * a2;
      v18 = (_QWORD *)v15;
      do
      {
        if (!v18)
          goto LABEL_39;
        *v18++ = 0;
        v16 -= 8;
      }
      while (v16);
      if ((_QWORD *)v5 != v7)
      {
        v19 = v5 - (_QWORD)v7 - 8;
        if (v19 < 0x78
          || v5 - (v19 & 0xFFFFFFFFFFFFFFF8) - 8 < v15
          && (unint64_t)&v13[v8 - (v19 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
        {
          goto LABEL_44;
        }
        v20 = (v19 >> 3) + 1;
        v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        v6 = (_QWORD *)(v5 - v21);
        v15 -= v21;
        v22 = &v13[8 * v9 - 16];
        v23 = (__int128 *)(v5 - 16);
        v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(v23 - 1);
          v25 = *v23;
          *(v23 - 1) = 0uLL;
          *v23 = 0uLL;
          *((_OWORD *)v22 - 1) = v26;
          *(_OWORD *)v22 = v25;
          v22 -= 32;
          v23 -= 2;
          v24 -= 4;
        }
        while (v24);
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_44:
          do
          {
            v27 = *--v6;
            *v6 = 0;
            *(_QWORD *)(v15 - 8) = v27;
            v15 -= 8;
          }
          while (v6 != v7);
        }
        v6 = (_QWORD *)a1[1];
      }
      v28 = (_QWORD *)*a1;
      *a1 = v15;
      a1[1] = v17;
      a1[2] = (unint64_t)&v13[8 * v12];
      while (v6 != v28)
      {
        v30 = *--v6;
        v29 = v30;
        *v6 = 0;
        if (v30)
        {
          v31 = *(void **)v29;
          if (*(_QWORD *)v29)
          {
            *(_QWORD *)(v29 + 8) = v31;
            operator delete(v31);
          }
          MEMORY[0x20BD0ADEC](v29, 0x20C40960023A9);
        }
      }
      if (v28)
        operator delete(v28);
      return;
    }
LABEL_40:
    abort();
  }
  if (!a2)
    goto LABEL_16;
  v14 = 8 * a2;
  do
  {
    if (!v6)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    *v6++ = 0;
    v14 -= 8;
  }
  while (v14);
  v6 = (_QWORD *)(v5 + 8 * a2);
LABEL_16:
  a1[1] = (unint64_t)v6;
}

void std::vector<unsigned long>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 > (v4 - (uint64_t)v5) >> 3)
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (!(v10 >> 61))
    {
      v11 = v4 - (_QWORD)v7;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v15 = &v13[8 * v9];
      v16 = 8 * a2;
      v17 = &v15[8 * a2];
      v18 = v15;
      do
      {
        if (!v18)
          goto LABEL_31;
        *(_QWORD *)v18 = 0;
        v18 += 8;
        v16 -= 8;
      }
      while (v16);
      if (v5 != v7)
      {
        v19 = v5 - v7 - 8;
        if (v19 < 0x58)
          goto LABEL_36;
        if ((unint64_t)(v5 - &v13[v8]) < 0x20)
          goto LABEL_36;
        v20 = (v19 >> 3) + 1;
        v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        v6 = &v5[-v21];
        v15 -= v21;
        v22 = &v13[8 * v9 - 16];
        v23 = v5 - 16;
        v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *(_OWORD *)v23;
          *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v22 = v25;
          v22 -= 32;
          v23 -= 32;
          v24 -= 4;
        }
        while (v24);
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_36:
          do
          {
            v26 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *((_QWORD *)v15 - 1) = v26;
            v15 -= 8;
          }
          while (v6 != v7);
        }
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v17;
      *(_QWORD *)(a1 + 16) = &v13[8 * v12];
      if (v7)
        operator delete(v7);
      return;
    }
LABEL_32:
    abort();
  }
  if (!a2)
    goto LABEL_16;
  v14 = 8 * a2;
  do
  {
    if (!v6)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    *(_QWORD *)v6 = 0;
    v6 += 8;
    v14 -= 8;
  }
  while (v14);
  v6 = &v5[8 * a2];
LABEL_16:
  *(_QWORD *)(a1 + 8) = v6;
}

void webrtc::Histogram::~Histogram(webrtc::Histogram *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0B4B98;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0B4B98;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::Histogram::Add(uint64_t this, int a2)
{
  int *v2;
  unint64_t v3;
  const float *v4;
  unint64_t v5;
  int v6;
  int *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  float32x2_t v23;
  unint64_t v24;
  int32x4_t v25;
  uint64_t v26;
  int32x4_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int32x4_t v32;
  int32x4_t v33;

  v3 = *(_QWORD *)(this + 8);
  v2 = *(int **)(this + 16);
  if ((int *)v3 == v2)
  {
    v6 = 0;
    v9 = a2;
    if (a2 < (unint64_t)((uint64_t)((uint64_t)v2 - v3) >> 2))
      goto LABEL_8;
LABEL_38:
    __break(1u);
LABEL_39:
    v21 = *(_DWORD *)(this + 32) + ((*(_DWORD *)(this + 36) - *(_DWORD *)(this + 32) + 3) >> 2);
    goto LABEL_40;
  }
  v4 = (const float *)(this + 32);
  v5 = (unint64_t)v2 - v3 - 4;
  if (v5 < 0x1C || v3 < this + 36 && (unint64_t)v4 < (v5 & 0xFFFFFFFFFFFFFFFCLL) + v3 + 4)
  {
    v6 = 0;
    v7 = *(int **)(this + 8);
    do
    {
LABEL_6:
      v8 = (unint64_t)(*(int *)v4 * (uint64_t)*v7) >> 15;
      *v7++ = v8;
      v6 += v8;
    }
    while (v7 != v2);
    goto LABEL_7;
  }
  v22 = (v5 >> 2) + 1;
  v7 = (int *)(v3 + 4 * (v22 & 0x7FFFFFFFFFFFFFF8));
  v23 = vld1_dup_f32(v4);
  v24 = v3 + 16;
  v25 = 0uLL;
  v26 = v22 & 0x7FFFFFFFFFFFFFF8;
  v27 = 0uLL;
  do
  {
    v28.i64[0] = v23.i32[0] * (uint64_t)(int)*(_QWORD *)(v24 - 8);
    v28.i64[1] = v23.i32[1] * (uint64_t)(int)HIDWORD(*(_OWORD *)(v24 - 16));
    v29.i64[0] = v23.i32[0] * (uint64_t)(int)*(_OWORD *)(v24 - 16);
    v29.i64[1] = v23.i32[1] * (uint64_t)(int)HIDWORD(*(_QWORD *)(v24 - 16));
    v30.i64[0] = v23.i32[0] * (uint64_t)(int)*(_QWORD *)(v24 + 8);
    v30.i64[1] = v23.i32[1] * (uint64_t)(int)HIDWORD(*(_OWORD *)v24);
    v31.i64[0] = v23.i32[0] * (uint64_t)(int)*(_OWORD *)v24;
    v31.i64[1] = v23.i32[1] * (uint64_t)(int)HIDWORD(*(_QWORD *)v24);
    v32 = vshrn_high_n_s64(vshrn_n_s64(v29, 0xFuLL), v28, 0xFuLL);
    v33 = vshrn_high_n_s64(vshrn_n_s64(v31, 0xFuLL), v30, 0xFuLL);
    *(int32x4_t *)(v24 - 16) = v32;
    *(int32x4_t *)v24 = v33;
    v25 = vaddq_s32(v25, v32);
    v27 = vaddq_s32(v27, v33);
    v24 += 32;
    v26 -= 8;
  }
  while (v26);
  v6 = vaddvq_s32(vaddq_s32(v27, v25));
  if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_6;
LABEL_7:
  v9 = a2;
  if (a2 >= (unint64_t)((uint64_t)((uint64_t)v2 - v3) >> 2))
    goto LABEL_38;
LABEL_8:
  *(_DWORD *)(v3 + 4 * v9) = *(_DWORD *)(v3 + 4 * v9) - (*(_DWORD *)(this + 32) << 15) + 0x40000000;
  if ((int *)v3 != v2)
  {
    v10 = v6 - (*(_DWORD *)(this + 32) << 15);
    if (v10)
    {
      v11 = v3 + 4;
      if (v10 < 1)
      {
        do
        {
          if (v10 >= 0)
            v15 = v10;
          else
            v15 = -v10;
          v16 = *(_DWORD *)(v11 - 4);
          if (v16 >> 4 < v15)
            v15 = v16 >> 4;
          *(_DWORD *)(v11 - 4) = v15 + v16;
          v10 += v15;
          if (v10)
            v17 = v11 == (_QWORD)v2;
          else
            v17 = 1;
          v11 += 4;
        }
        while (!v17);
      }
      else
      {
        do
        {
          if (v10 >= 0)
            v12 = v10;
          else
            v12 = -v10;
          v13 = *(_DWORD *)(v11 - 4);
          if (v13 >> 4 < v12)
            v12 = v13 >> 4;
          *(_DWORD *)(v11 - 4) = v13 - v12;
          v10 -= v12;
          if (v10)
            v14 = v11 == (_QWORD)v2;
          else
            v14 = 1;
          v11 += 4;
        }
        while (!v14);
      }
    }
  }
  v18 = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = v18 + 1;
  if (!*(_BYTE *)(this + 56))
    goto LABEL_39;
  v19 = *(_DWORD *)(this + 36);
  if (*(_DWORD *)(this + 32) == v19)
    return this;
  v20 = vcvtd_n_s64_f64(1.0 - *(double *)(this + 48) / (double)(v18 + 2), 0xFuLL);
  if (v19 < v20)
    v20 = *(_DWORD *)(this + 36);
  v21 = v20 & ~(v20 >> 31);
LABEL_40:
  *(_DWORD *)(this + 32) = v21;
  return this;
}

uint64_t webrtc::Histogram::Quantile(uint64_t this, int a2)
{
  int *v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  unint64_t v9;
  int v10;

  v2 = *(int **)(this + 8);
  v3 = *(_QWORD *)(this + 16) - (_QWORD)v2;
  if (v3)
  {
    v4 = v3 >> 2;
    v5 = *v2;
    v6 = (v3 >> 2) - 1;
    if (v6)
      v7 = v5 < a2;
    else
      v7 = 0;
    if (!v7)
      return 0;
    v8 = 0x40000000 - v5;
    if (v4 <= 1)
      v4 = 1;
    v9 = 1;
    while (v4 != v9)
    {
      v10 = v9 + 1;
      if (v9 < v6)
      {
        v8 -= v2[v9++];
        if (v8 > 0x40000000 - a2)
          continue;
      }
      return (v10 - 1);
    }
  }
  __break(1u);
  return this;
}

uint64_t webrtc::Histogram::Reset(uint64_t this)
{
  _DWORD *v1;
  _DWORD *v2;
  unsigned int v3;

  v1 = *(_DWORD **)(this + 8);
  v2 = *(_DWORD **)(this + 16);
  if (v1 != v2)
  {
    v3 = 16386;
    do
    {
      v3 >>= 1;
      *v1++ = v3 << 16;
    }
    while (v1 != v2);
  }
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t webrtc::Histogram::NumBuckets(webrtc::Histogram *this)
{
  return (*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 2;
}

uint64_t *rtc::HistogramPercentileCounter::Add(uint64_t *this, unsigned int a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;

  v5 = this;
  if (*((_DWORD *)this + 12) <= a2)
  {
    v8 = (uint64_t **)(this + 4);
    v7 = (uint64_t *)this[4];
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v9 = v7;
          v10 = *((_DWORD *)v7 + 8);
          if (v10 <= a2)
            break;
          v7 = (uint64_t *)*v9;
          v8 = (uint64_t **)v9;
          if (!*v9)
            goto LABEL_11;
        }
        if (v10 >= a2)
          break;
        v7 = (uint64_t *)v9[1];
        if (!v7)
        {
          v8 = (uint64_t **)(v9 + 1);
          goto LABEL_11;
        }
      }
    }
    else
    {
      v9 = this + 4;
LABEL_11:
      v11 = v9;
      v9 = operator new(0x30uLL);
      *((_DWORD *)v9 + 8) = a2;
      v9[5] = 0;
      *v9 = 0;
      v9[1] = 0;
      v9[2] = v11;
      *v8 = v9;
      v12 = *(_QWORD *)v5[3];
      v13 = v9;
      if (v12)
      {
        v5[3] = v12;
        v13 = *v8;
      }
      this = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[4], v13);
      ++v5[5];
    }
    v6 = v9 + 5;
    goto LABEL_15;
  }
  if (a2 < (unint64_t)((this[1] - *this) >> 3))
  {
    *(_QWORD *)(*this + 8 * a2) += a3;
    v6 = this + 8;
LABEL_15:
    *v6 += a3;
    v5[7] += a3;
    return this;
  }
  __break(1u);
  return this;
}

uint64_t webrtc::I010Buffer::Copy@<X0>(webrtc::I010Buffer *this@<X0>, const webrtc::I420BufferInterface *a2@<X1>, uint64_t *a3@<X8>)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  int8x16_t *v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int8x16_t v33;
  std::string *v35;
  _QWORD *v36;
  int v37;
  int8x16_t *v38;
  int v39;
  int8x16_t *v40;

  v5 = (*(uint64_t (**)(webrtc::I010Buffer *, const webrtc::I420BufferInterface *))(*(_QWORD *)this + 40))(this, a2);
  v6 = (*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 48))(this);
  v7 = v5 + 2;
  if (v5 >= -1)
    v7 = v5 + 1;
  v8 = v7 >> 1;
  v9 = operator new();
  *(_DWORD *)(v9 + 8) = v5;
  *(_DWORD *)(v9 + 12) = v6;
  *(_DWORD *)(v9 + 16) = v5;
  *(_DWORD *)(v9 + 20) = v8;
  *(_DWORD *)(v9 + 24) = v8;
  v10 = v6 + 2;
  if (v6 >= -1)
    v10 = v6 + 1;
  v11 = v6 * v5 + 2 * v8 * (v10 >> 1);
  if (v11)
  {
    v12 = malloc_type_malloc(2 * v11 + 71, 0xB9DC9477uLL);
    if (!v12)
    {
      v35 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/memory/aligned_malloc.cc", 66, "memory_pointer", "\t", v13, v14, v15, v16, (uint64_t)"Couldn't allocate memory in AlignedMalloc");
      return webrtc::I010Buffer::ToI420((webrtc::I010Buffer *)v35, v36);
    }
    v17 = ((unint64_t)v12 + 71) & 0xFFFFFFFFFFFFFFC0;
    *(_QWORD *)(v17 - 8) = v12;
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(v9 + 32) = v17;
  *(_QWORD *)v9 = off_24C0B4C88;
  *(_DWORD *)(v9 + 40) = 0;
  v18 = (unsigned int *)(v9 + 40);
  *a3 = v9;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  v40 = (int8x16_t *)(*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 136))(this);
  v39 = (*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 112))(this);
  v38 = (int8x16_t *)(*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 144))(this);
  v37 = (*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 120))(this);
  v20 = (int8x16_t *)(*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 152))(this);
  v21 = (*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 128))(this);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 112))(v9);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 144))(v9);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 120))(v9);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 152))(v9);
  v27 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 128))(v9);
  return I420ToI010(v40, v39, v38, v37, v20, v21, v22, v23, v27, v29, v30, v31, v32, v33, v24, v25, v26, v28, v5, v6);
}

uint64_t webrtc::I010Buffer::ToI420@<X0>(webrtc::I010Buffer *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  const unsigned __int16 *v20;
  int8x16_t *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t result;
  std::string *v30;
  unsigned __int8 *v31;
  uint16x8_t *v32;
  unsigned int v33;
  uint16x8_t *v34;
  unsigned int v35;
  libyuv *v36;
  _QWORD *v37;

  v4 = (*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 40))(this);
  v5 = (*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 48))(this);
  v6 = (_DWORD *)operator new();
  v7 = v6;
  v8 = v4 + 2;
  if (v4 >= -1)
    v8 = v4 + 1;
  v9 = v8 >> 1;
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v4;
  v6[5] = v9;
  v6[6] = v9;
  v10 = v5 + 2;
  if (v5 >= -1)
    v10 = v5 + 1;
  v11 = v5 * v4 + 2 * v9 * (v10 >> 1);
  if (v11)
  {
    v12 = malloc_type_malloc(v11 + 71, 0xB9DC9477uLL);
    if (!v12)
    {
      v30 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/memory/aligned_malloc.cc", 66, "memory_pointer", "\t", v13, v14, v15, v16, (uint64_t)"Couldn't allocate memory in AlignedMalloc");
      return webrtc::I010Buffer::width((webrtc::I010Buffer *)v30);
    }
    v17 = ((unint64_t)v12 + 71) & 0xFFFFFFFFFFFFFFC0;
    *(_QWORD *)(v17 - 8) = v12;
  }
  else
  {
    v17 = 0;
  }
  v37 = a2;
  *((_QWORD *)v7 + 4) = v17;
  *(_QWORD *)v7 = &unk_24C0B4DF0;
  v7[10] = 0;
  v18 = v7 + 10;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  v36 = (libyuv *)(*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 136))(this);
  v35 = (*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 112))(this);
  v34 = (uint16x8_t *)(*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 144))(this);
  v33 = (*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 120))(this);
  v32 = (uint16x8_t *)(*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 152))(this);
  v20 = (const unsigned __int16 *)(*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 128))(this);
  v21 = (int8x16_t *)webrtc::I420Buffer::DataY((webrtc::I420Buffer *)v7);
  v22 = (unsigned __int8 *)webrtc::I420Buffer::StrideY((webrtc::I420Buffer *)v7);
  v23 = webrtc::I420Buffer::DataU((webrtc::I420Buffer *)v7);
  v24 = webrtc::I420Buffer::StrideU((webrtc::I420Buffer *)v7);
  v25 = webrtc::I420Buffer::DataV((webrtc::I420Buffer *)v7);
  v26 = webrtc::I420Buffer::StrideV((webrtc::I420Buffer *)v7);
  v27 = (*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 40))(this);
  v28 = (*(uint64_t (**)(webrtc::I010Buffer *))(*(_QWORD *)this + 48))(this);
  LODWORD(v31) = v24;
  result = libyuv::Planar16bitTo8bit(v36, (const unsigned __int16 *)v35, v34, (const unsigned __int16 *)v33, v32, v20, v21, v22, v23, v31, v25, (unsigned __int8 *)__PAIR64__(v27, v26), v28, 1, 1, 10, (int)v32, SHIDWORD(v32));
  *v37 = v7;
  return result;
}

uint64_t webrtc::I010Buffer::width(webrtc::I010Buffer *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t webrtc::I010Buffer::height(webrtc::I010Buffer *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t webrtc::I010Buffer::DataY(webrtc::I010Buffer *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t webrtc::I010Buffer::DataU(webrtc::I010Buffer *this)
{
  return *((_QWORD *)this + 4) + 2 * *((_DWORD *)this + 3) * *((_DWORD *)this + 4);
}

uint64_t webrtc::I010Buffer::DataV(webrtc::I010Buffer *this)
{
  int v1;
  uint64_t v2;
  int v3;

  v1 = *((_DWORD *)this + 3);
  v2 = *((_QWORD *)this + 4) + 2 * v1 * *((_DWORD *)this + 4);
  if (v1 >= -1)
    v3 = v1 + 1;
  else
    v3 = v1 + 2;
  return v2 + 2 * (v3 >> 1) * *((_DWORD *)this + 5);
}

uint64_t webrtc::I010Buffer::StrideY(webrtc::I010Buffer *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t webrtc::I010Buffer::StrideU(webrtc::I010Buffer *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t webrtc::I010Buffer::StrideV(webrtc::I010Buffer *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t rtc::RefCountedObject<webrtc::I010Buffer>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::I010Buffer>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 10;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::I010Buffer>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C0B4BD8;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    free(*(void **)(v2 - 8));
  return a1;
}

void rtc::RefCountedObject<webrtc::I010Buffer>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C0B4BD8;
  v1 = a1[4];
  a1[4] = 0;
  if (v1)
    free(*(void **)(v1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::I010Buffer>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 40));
  return v1 == 1;
}

uint64_t webrtc::I420Buffer::Copy@<X0>(webrtc::I420Buffer *this@<X0>, const unsigned __int8 *a2@<X3>, const unsigned __int8 *a3@<X5>, const unsigned __int8 *a4@<X7>, int a5@<W1>, char *a6@<X2>, char *a7@<X4>, char *a8@<X6>, _QWORD *a9@<X8>, int a10)
{
  int v11;
  int v14;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t result;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  int v39;
  char *v40;
  int v41;
  char *v42;
  int v43;
  int v45;

  v45 = (int)a4;
  v43 = (int)a3;
  v11 = (int)a2;
  v14 = (int)this;
  v16 = (_DWORD *)operator new();
  v17 = v16;
  v18 = v14 + 2;
  if (v14 >= -1)
    v18 = v14 + 1;
  v19 = v18 >> 1;
  v16[2] = v14;
  v16[3] = a5;
  v16[4] = v14;
  v16[5] = v18 >> 1;
  v16[6] = v18 >> 1;
  v20 = a5 * v14;
  v21 = a5 + 2;
  if (a5 >= -1)
    v21 = a5 + 1;
  v22 = v21 >> 1;
  if (v20 + 2 * v19 * (v21 >> 1))
  {
    v23 = malloc_type_malloc(v20 + 2 * v19 * v22 + 71, 0xB9DC9477uLL);
    if (!v23)
    {
LABEL_13:
      v38 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/memory/aligned_malloc.cc", 66, "memory_pointer", "\t", v24, v25, v26, v27, (uint64_t)"Couldn't allocate memory in AlignedMalloc");
      return webrtc::I420Buffer::MutableDataY((webrtc::I420Buffer *)v38);
    }
    v28 = (char *)(((unint64_t)v23 + 71) & 0xFFFFFFFFFFFFFFC0);
    *((_QWORD *)v28 - 1) = v23;
  }
  else
  {
    v28 = 0;
  }
  *((_QWORD *)v17 + 4) = v28;
  *(_QWORD *)v17 = &unk_24C0B4DF0;
  v17[10] = 0;
  v29 = v17 + 10;
  *a9 = v17;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  result = I420Copy(a6, v11, a7, v43, a8, v45, v28, v14, &v28[v20], v19, &v28[v20 + v22 * v19], v19, v14, a5);
  if ((_DWORD)result)
  {
    v42 = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 136))(v17);
    v41 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 112))(v17);
    v40 = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 144))(v17);
    v39 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 120))(v17);
    v32 = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 152))(v17);
    v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 128))(v17);
    I420Copy(a6, v11, a7, v43, a8, v45, v42, v41, v40, v39, v32, v33, v14, a5);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i420_buffer.cc", 99, "0 == libyuv::I420Copy(data_y, stride_y, data_u, stride_u, data_v, stride_v, buffer->MutableDataY(), buffer->StrideY(), buffer->MutableDataU(), buffer->StrideU(), buffer->MutableDataV(), buffer->StrideV(), width, height)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v34, v35, v36, v37, 0);
    goto LABEL_13;
  }
  return result;
}

uint64_t webrtc::I420Buffer::MutableDataY(webrtc::I420Buffer *this)
{
  return (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 136))(this);
}

uint64_t webrtc::I420Buffer::MutableDataU(webrtc::I420Buffer *this)
{
  return (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 144))(this);
}

uint64_t webrtc::I420Buffer::MutableDataV(webrtc::I420Buffer *this)
{
  return (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 152))(this);
}

uint64_t webrtc::I420Buffer::Rotate@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _DWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  int v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  uint64_t result;
  char *v46;
  unsigned int v47;
  char *v48;
  uint64_t v49;
  char *v50;
  int v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::string *v60;
  uint64_t v61;
  char *v62;
  unsigned int v63;
  unsigned int v64;
  char *v65;
  char *v66;
  unsigned int v67;
  unsigned int v68;
  char *v69;
  char *v70;
  int v71;

  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1))
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i420_buffer.cc", 107, "src.DataY()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v7, v8, v9, v10, v61);
    goto LABEL_21;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1))
  {
LABEL_21:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i420_buffer.cc", 108, "src.DataU()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v11, v12, v13, v14, v61);
    goto LABEL_22;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1))
  {
LABEL_22:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i420_buffer.cc", 109, "src.DataV()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v15, v16, v17, v18, v61);
    goto LABEL_23;
  }
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v21 = v20;
  if (a2 == 270 || a2 == 90)
  {
    v22 = v19;
  }
  else
  {
    v22 = v20;
    v21 = v19;
  }
  v23 = (_DWORD *)operator new();
  v3 = v23;
  v24 = v21 + 2;
  if (v21 >= -1)
    v24 = v21 + 1;
  v25 = v24 >> 1;
  v23[2] = v21;
  v23[3] = v22;
  v23[4] = v21;
  v23[5] = v25;
  v23[6] = v25;
  v26 = v22 + 2;
  if (v22 >= -1)
    v26 = v22 + 1;
  v27 = v21 * v22 + 2 * (v26 >> 1) * v25;
  if (v27)
  {
    v28 = malloc_type_malloc(v27 + 71, 0xB9DC9477uLL);
    if (!v28)
    {
LABEL_24:
      v60 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/memory/aligned_malloc.cc", 66, "memory_pointer", "\t", v29, v30, v31, v32, (uint64_t)"Couldn't allocate memory in AlignedMalloc");
      return webrtc::I420Buffer::width((webrtc::I420Buffer *)v60);
    }
    v33 = ((unint64_t)v28 + 71) & 0xFFFFFFFFFFFFFFC0;
    *(_QWORD *)(v33 - 8) = v28;
  }
  else
  {
    v33 = 0;
  }
  v71 = a2;
  *((_QWORD *)v3 + 4) = v33;
  *(_QWORD *)v3 = &unk_24C0B4DF0;
  v3[10] = 0;
  v34 = v3 + 10;
  *a3 = v3;
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  v69 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v65 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v62 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v37 = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 136))(v3);
  v38 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 112))(v3);
  v39 = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 144))(v3);
  v40 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 120))(v3);
  v41 = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 152))(v3);
  v42 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 128))(v3);
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = I420Rotate(v69, v67, v65, v63, v62, v36, v37, v38, v39, v40, v41, v42, v43, v44, v71);
  if ((_DWORD)result)
  {
LABEL_23:
    v70 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    v66 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
    v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    v46 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    v48 = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 136))(v3);
    v49 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 112))(v3);
    v50 = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 144))(v3);
    v51 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 120))(v3);
    v52 = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 152))(v3);
    v53 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 128))(v3);
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    I420Rotate(v70, v68, v66, v64, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v71);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i420_buffer.cc", 127, "0 == libyuv::I420Rotate( src.DataY(), src.StrideY(), src.DataU(), src.StrideU(), src.DataV(), src.StrideV(), buffer->MutableDataY(), buffer->StrideY(), buffer->MutableDataU(), buffer->StrideU(), buffer->MutableDataV(), buffer->StrideV(), src.width(), src.height(), static_cast<libyuv::RotationMode>(rotation))", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v56, v57, v58, v59, 0);
    goto LABEL_24;
  }
  return result;
}

uint64_t webrtc::I420Buffer::width(webrtc::I420Buffer *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t webrtc::I420Buffer::height(webrtc::I420Buffer *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t webrtc::I420Buffer::DataY(webrtc::I420Buffer *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t webrtc::I420Buffer::DataU(webrtc::I420Buffer *this)
{
  return *((_QWORD *)this + 4) + *((int *)this + 3) * (uint64_t)*((int *)this + 4);
}

uint64_t webrtc::I420Buffer::DataV(webrtc::I420Buffer *this)
{
  int v1;
  uint64_t v2;
  int v3;

  v1 = *((_DWORD *)this + 3);
  v2 = *((_QWORD *)this + 4) + v1 * (uint64_t)*((int *)this + 4);
  if (v1 >= -1)
    v3 = v1 + 1;
  else
    v3 = v1 + 2;
  return v2 + *((int *)this + 5) * (uint64_t)(v3 >> 1);
}

uint64_t webrtc::I420Buffer::StrideY(webrtc::I420Buffer *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t webrtc::I420Buffer::StrideU(webrtc::I420Buffer *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t webrtc::I420Buffer::StrideV(webrtc::I420Buffer *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t webrtc::I420Buffer::SetBlack(webrtc::I420Buffer *this, webrtc::I420Buffer *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  const webrtc::I420BufferInterface *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = (*(uint64_t (**)(webrtc::I420Buffer *, webrtc::I420Buffer *))(*(_QWORD *)this + 136))(this, a2);
  v4 = (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 112))(this);
  v5 = (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 144))(this);
  v6 = (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 120))(this);
  v7 = (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 152))(this);
  v8 = (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 128))(this);
  v9 = (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 40))(this);
  v10 = (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 48))(this);
  result = I420Rect(v3, v4, v5, v6, v7, v8, 0, 0, v9, v10, 0, 0x80u, 128);
  if ((_DWORD)result)
  {
    v16 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i420_buffer.cc", 181, "libyuv::I420Rect(buffer->MutableDataY(), buffer->StrideY(), buffer->MutableDataU(), buffer->StrideU(), buffer->MutableDataV(), buffer->StrideV(), 0, 0, buffer->width(), buffer->height(), 0, 128, 128) == 0", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v12, v13, v14, v15, v22);
    return webrtc::I420Buffer::CropAndScaleFrom((webrtc::I420Buffer *)v16, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t webrtc::I420Buffer::CropAndScaleFrom(webrtc::I420Buffer *this, const webrtc::I420BufferInterface *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  signed int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::string *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  libyuv *v54;
  int v55;

  v13 = (*(uint64_t (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 40))(a2);
  v14 = *(_QWORD *)a2;
  if (v13 < (int)a5)
  {
    (*(void (**)(const webrtc::I420BufferInterface *))(v14 + 40))(a2);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i420_buffer.cc", 189, "crop_width <= src.width()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v33, v34, v35, v36, a5);
    goto LABEL_9;
  }
  if ((*(int (**)(const webrtc::I420BufferInterface *))(v14 + 48))(a2) < (int)a6)
  {
LABEL_9:
    (*(void (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 48))(a2);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i420_buffer.cc", 190, "crop_height <= src.height()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v37, v38, v39, v40, a6);
    goto LABEL_10;
  }
  v6 = (a5 + a3);
  if ((int)v6 > (*(int (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 40))(a2))
  {
LABEL_10:
    (*(void (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 40))(a2);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i420_buffer.cc", 191, "crop_width + offset_x <= src.width()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v41, v42, v43, v44, v6);
    goto LABEL_11;
  }
  v6 = (a6 + a4);
  if ((int)v6 > (*(int (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 48))(a2))
  {
LABEL_11:
    (*(void (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 48))(a2);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i420_buffer.cc", 192, "crop_height + offset_y <= src.height()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v45, v46, v47, v48, v6);
    goto LABEL_12;
  }
  if ((a3 & 0x80000000) != 0)
  {
LABEL_12:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i420_buffer.cc", 193, "offset_x >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v15, v16, v17, v18, a3);
    goto LABEL_13;
  }
  v54 = (libyuv *)a5;
  v55 = a6;
  if ((a4 & 0x80000000) == 0)
  {
    v19 = a3 >> 1;
    v20 = a4 >> 1;
    v21 = a4 & 0xFFFFFFFE;
    v22 = (*(uint64_t (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 136))(a2);
    v53 = (unsigned __int8 *)(v22
                            + (int)((*(uint64_t (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 112))(a2)
                                  * v21)
                            + (a3 & 0xFFFFFFFE));
    v23 = (*(uint64_t (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 144))(a2);
    v52 = (unsigned __int8 *)(v23
                            + v20
                            * (uint64_t)(*(int (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 120))(a2)
                            + v19);
    v24 = (*(uint64_t (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 152))(a2);
    v51 = (unsigned __int8 *)(v24
                            + v20
                            * (uint64_t)(*(int (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 128))(a2)
                            + v19);
    v50 = (*(uint64_t (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 112))(a2);
    v25 = (*(uint64_t (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 120))(a2);
    v26 = (*(uint64_t (**)(const webrtc::I420BufferInterface *))(*(_QWORD *)a2 + 128))(a2);
    v27 = (int8x16_t *)(*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 136))(this);
    LODWORD(v22) = (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 112))(this);
    v28 = (int8x16_t *)(*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 144))(this);
    LODWORD(v19) = (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 120))(this);
    v29 = (int8x16_t *)(*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 152))(this);
    LODWORD(v24) = (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 128))(this);
    v30 = (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 40))(this);
    v31 = (*(uint64_t (**)(webrtc::I420Buffer *))(*(_QWORD *)this + 48))(this);
    return I420Scale(v53, v50, v52, v25, v51, v26, v54, v55, v27, v22, v28, v19, v29, v24, v30, v31, 3);
  }
LABEL_13:
  v49 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i420_buffer.cc", 194, "offset_y >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v15, v16, v17, v18, a4);
  return rtc::RefCountedObject<webrtc::I420Buffer>::AddRef((uint64_t)v49);
}

uint64_t rtc::RefCountedObject<webrtc::I420Buffer>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::I420Buffer>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 10;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::I420Buffer>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C0B4D40;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    free(*(void **)(v2 - 8));
  return a1;
}

void rtc::RefCountedObject<webrtc::I420Buffer>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C0B4D40;
  v1 = a1[4];
  a1[4] = 0;
  if (v1)
    free(*(void **)(v1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::I420Buffer>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 40));
  return v1 == 1;
}

uint64_t webrtc::I422Buffer::ToI420@<X0>(webrtc::I422Buffer *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  const unsigned __int8 *v20;
  int8x16_t *v21;
  unsigned __int8 *v22;
  int8x16_t *v23;
  int v24;
  int8x16_t *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t result;
  std::string *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unsigned int v37;
  libyuv *v38;
  _QWORD *v39;

  v4 = (*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 40))(this);
  v5 = (*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 48))(this);
  v6 = (_DWORD *)operator new();
  v7 = v6;
  v8 = v4 + 2;
  if (v4 >= -1)
    v8 = v4 + 1;
  v9 = v8 >> 1;
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v4;
  v6[5] = v9;
  v6[6] = v9;
  v10 = v5 + 2;
  if (v5 >= -1)
    v10 = v5 + 1;
  v11 = v5 * v4 + 2 * v9 * (v10 >> 1);
  if (v11)
  {
    v12 = malloc_type_malloc(v11 + 71, 0xB9DC9477uLL);
    if (!v12)
    {
      v31 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/memory/aligned_malloc.cc", 66, "memory_pointer", "\t", v13, v14, v15, v16, (uint64_t)"Couldn't allocate memory in AlignedMalloc");
      return webrtc::I422Buffer::width((webrtc::I422Buffer *)v31);
    }
    v17 = ((unint64_t)v12 + 71) & 0xFFFFFFFFFFFFFFC0;
    *(_QWORD *)(v17 - 8) = v12;
  }
  else
  {
    v17 = 0;
  }
  v39 = a2;
  *((_QWORD *)v7 + 4) = v17;
  *(_QWORD *)v7 = &unk_24C0B4DF0;
  v7[10] = 0;
  v18 = v7 + 10;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  v38 = (libyuv *)(*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 136))(this);
  v37 = (*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 112))(this);
  v36 = (unsigned __int8 *)(*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 144))(this);
  v35 = (*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 120))(this);
  v34 = (unsigned __int8 *)(*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 152))(this);
  v20 = (const unsigned __int8 *)(*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 128))(this);
  v21 = (int8x16_t *)webrtc::I420Buffer::DataY((webrtc::I420Buffer *)v7);
  v22 = (unsigned __int8 *)webrtc::I420Buffer::StrideY((webrtc::I420Buffer *)v7);
  v23 = (int8x16_t *)webrtc::I420Buffer::DataU((webrtc::I420Buffer *)v7);
  v24 = webrtc::I420Buffer::StrideU((webrtc::I420Buffer *)v7);
  v25 = (int8x16_t *)webrtc::I420Buffer::DataV((webrtc::I420Buffer *)v7);
  v26 = webrtc::I420Buffer::StrideV((webrtc::I420Buffer *)v7);
  v27 = (*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 40))(this);
  v28 = (*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 48))(this);
  v29 = (v27 + 1) >> 1;
  if (v27 < 0)
    v29 = -((1 - v27) >> 1);
  LODWORD(v32) = v24;
  result = libyuv::I4xxToI420(v38, (const unsigned __int8 *)v37, v36, (const unsigned __int8 *)v35, v34, v20, v21, v22, v23, v32, v25, (unsigned __int8 *)__PAIR64__(v27, v26), v28, v29, v28, v33, (int)v34);
  *v39 = v7;
  return result;
}

uint64_t webrtc::I422Buffer::width(webrtc::I422Buffer *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t webrtc::I422Buffer::height(webrtc::I422Buffer *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t webrtc::I422Buffer::DataY(webrtc::I422Buffer *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t webrtc::I422Buffer::DataU(webrtc::I422Buffer *this)
{
  return *((_QWORD *)this + 4) + *((int *)this + 3) * (uint64_t)*((int *)this + 4);
}

uint64_t webrtc::I422Buffer::DataV(webrtc::I422Buffer *this)
{
  return *((_QWORD *)this + 4)
       + *((int *)this + 3) * (uint64_t)*((int *)this + 4)
       + *((int *)this + 5) * (uint64_t)*((int *)this + 3);
}

uint64_t webrtc::I422Buffer::StrideY(webrtc::I422Buffer *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t webrtc::I422Buffer::StrideU(webrtc::I422Buffer *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t webrtc::I422Buffer::StrideV(webrtc::I422Buffer *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t webrtc::I422Buffer::CropAndScaleFrom(webrtc::I422Buffer *this, const webrtc::I422BufferInterface *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::string *v48;
  int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  libyuv *v53;
  int v54;

  v13 = (*(uint64_t (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 40))(a2);
  v14 = *(_QWORD *)a2;
  if (v13 < (int)a5)
  {
    (*(void (**)(const webrtc::I422BufferInterface *))(v14 + 40))(a2);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i422_buffer.cc", 211, "crop_width <= src.width()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v32, v33, v34, v35, a5);
    goto LABEL_9;
  }
  if ((*(int (**)(const webrtc::I422BufferInterface *))(v14 + 48))(a2) < (int)a6)
  {
LABEL_9:
    (*(void (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 48))(a2);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i422_buffer.cc", 212, "crop_height <= src.height()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v36, v37, v38, v39, a6);
    goto LABEL_10;
  }
  v6 = (a5 + a3);
  if ((int)v6 > (*(int (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 40))(a2))
  {
LABEL_10:
    (*(void (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 40))(a2);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i422_buffer.cc", 213, "crop_width + offset_x <= src.width()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v40, v41, v42, v43, v6);
    goto LABEL_11;
  }
  v6 = (a6 + a4);
  if ((int)v6 > (*(int (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 48))(a2))
  {
LABEL_11:
    (*(void (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 48))(a2);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i422_buffer.cc", 214, "crop_height + offset_y <= src.height()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v44, v45, v46, v47, v6);
    goto LABEL_12;
  }
  if ((a3 & 0x80000000) != 0)
  {
LABEL_12:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i422_buffer.cc", 215, "offset_x >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v15, v16, v17, v18, a3);
    goto LABEL_13;
  }
  v53 = (libyuv *)a5;
  v54 = a6;
  if ((a4 & 0x80000000) == 0)
  {
    v19 = a3 >> 1;
    v20 = a3 & 0xFFFFFFFE;
    v21 = (*(uint64_t (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 136))(a2);
    v52 = (unsigned __int8 *)(v21
                            + (*(int (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 112))(a2)
                            * (uint64_t)(int)a4
                            + v20);
    v22 = (*(uint64_t (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 144))(a2);
    v51 = (unsigned __int8 *)(v22
                            + (*(int (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 120))(a2)
                            * (uint64_t)(int)a4
                            + v19);
    v23 = (*(uint64_t (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 152))(a2);
    v50 = (unsigned __int8 *)(v23
                            + (*(int (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 128))(a2)
                            * (uint64_t)(int)a4
                            + v19);
    v49 = (*(uint64_t (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 112))(a2);
    v24 = (*(uint64_t (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 120))(a2);
    v25 = (*(uint64_t (**)(const webrtc::I422BufferInterface *))(*(_QWORD *)a2 + 128))(a2);
    v26 = (int8x16_t *)(*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 136))(this);
    LODWORD(v21) = (*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 112))(this);
    v27 = (int8x16_t *)(*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 144))(this);
    LODWORD(v19) = (*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 120))(this);
    v28 = (int8x16_t *)(*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 152))(this);
    v29 = (*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 128))(this);
    LODWORD(v23) = (*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 40))(this);
    v30 = (*(uint64_t (**)(webrtc::I422Buffer *))(*(_QWORD *)this + 48))(this);
    return I422Scale(v52, v49, v51, v24, v50, v25, v53, v54, v26, v21, v27, v19, v28, v29, v23, v30, 3);
  }
LABEL_13:
  v48 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i422_buffer.cc", 216, "offset_y >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v15, v16, v17, v18, a4);
  return webrtc::I422Buffer::GetI420((webrtc::I422Buffer *)v48);
}

uint64_t webrtc::I422Buffer::GetI420(webrtc::I422Buffer *this)
{
  return 0;
}

uint64_t rtc::RefCountedObject<webrtc::I422Buffer>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::I422Buffer>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 10;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::I422Buffer>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C0B4EA8;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    free(*(void **)(v2 - 8));
  return a1;
}

void rtc::RefCountedObject<webrtc::I422Buffer>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C0B4EA8;
  v1 = a1[4];
  a1[4] = 0;
  if (v1)
    free(*(void **)(v1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::I422Buffer>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 40));
  return v1 == 1;
}

uint64_t webrtc::I444Buffer::ToI420@<X0>(webrtc::I444Buffer *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  const unsigned __int8 *v20;
  int8x16_t *v21;
  unsigned __int8 *v22;
  int8x16_t *v23;
  int v24;
  int8x16_t *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t result;
  std::string *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unsigned int v36;
  libyuv *v37;
  _QWORD *v38;

  v4 = (*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 40))(this);
  v5 = (*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 48))(this);
  v6 = (_DWORD *)operator new();
  v7 = v6;
  v8 = v4 + 2;
  if (v4 >= -1)
    v8 = v4 + 1;
  v9 = v8 >> 1;
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v4;
  v6[5] = v9;
  v6[6] = v9;
  v10 = v5 + 2;
  if (v5 >= -1)
    v10 = v5 + 1;
  v11 = v5 * v4 + 2 * v9 * (v10 >> 1);
  if (v11)
  {
    v12 = malloc_type_malloc(v11 + 71, 0xB9DC9477uLL);
    if (!v12)
    {
      v30 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/memory/aligned_malloc.cc", 66, "memory_pointer", "\t", v13, v14, v15, v16, (uint64_t)"Couldn't allocate memory in AlignedMalloc");
      return webrtc::I444Buffer::width((webrtc::I444Buffer *)v30);
    }
    v17 = ((unint64_t)v12 + 71) & 0xFFFFFFFFFFFFFFC0;
    *(_QWORD *)(v17 - 8) = v12;
  }
  else
  {
    v17 = 0;
  }
  v38 = a2;
  *((_QWORD *)v7 + 4) = v17;
  *(_QWORD *)v7 = &unk_24C0B4DF0;
  v7[10] = 0;
  v18 = v7 + 10;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  v37 = (libyuv *)(*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 136))(this);
  v36 = (*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 112))(this);
  v35 = (unsigned __int8 *)(*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 144))(this);
  v34 = (*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 120))(this);
  v33 = (unsigned __int8 *)(*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 152))(this);
  v20 = (const unsigned __int8 *)(*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 128))(this);
  v21 = (int8x16_t *)webrtc::I420Buffer::DataY((webrtc::I420Buffer *)v7);
  v22 = (unsigned __int8 *)webrtc::I420Buffer::StrideY((webrtc::I420Buffer *)v7);
  v23 = (int8x16_t *)webrtc::I420Buffer::DataU((webrtc::I420Buffer *)v7);
  v24 = webrtc::I420Buffer::StrideU((webrtc::I420Buffer *)v7);
  v25 = (int8x16_t *)webrtc::I420Buffer::DataV((webrtc::I420Buffer *)v7);
  v26 = webrtc::I420Buffer::StrideV((webrtc::I420Buffer *)v7);
  v27 = (*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 40))(this);
  v28 = (*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 48))(this);
  LODWORD(v31) = v24;
  result = libyuv::I4xxToI420(v37, (const unsigned __int8 *)v36, v35, (const unsigned __int8 *)v34, v33, v20, v21, v22, v23, v31, v25, (unsigned __int8 *)__PAIR64__(v27, v26), v28, v27, v28, v32, (int)v33);
  *v38 = v7;
  return result;
}

uint64_t webrtc::I444Buffer::width(webrtc::I444Buffer *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t webrtc::I444Buffer::height(webrtc::I444Buffer *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t webrtc::I444Buffer::DataY(webrtc::I444Buffer *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t webrtc::I444Buffer::DataU(webrtc::I444Buffer *this)
{
  return *((_QWORD *)this + 4) + *((int *)this + 3) * (uint64_t)*((int *)this + 4);
}

uint64_t webrtc::I444Buffer::DataV(webrtc::I444Buffer *this)
{
  return *((_QWORD *)this + 4)
       + *((int *)this + 3) * (uint64_t)*((int *)this + 4)
       + *((int *)this + 5) * (uint64_t)*((int *)this + 3);
}

uint64_t webrtc::I444Buffer::StrideY(webrtc::I444Buffer *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t webrtc::I444Buffer::StrideU(webrtc::I444Buffer *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t webrtc::I444Buffer::StrideV(webrtc::I444Buffer *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t webrtc::I444Buffer::CropAndScaleFrom(webrtc::I444Buffer *this, const webrtc::I444BufferInterface *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int8x16_t *v24;
  int v25;
  int8x16_t *v26;
  int v27;
  int8x16_t *v28;
  int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::string *v48;
  int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  libyuv *v53;
  int v54;

  v13 = (*(uint64_t (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 40))(a2);
  v14 = *(_QWORD *)a2;
  if (v13 < (int)a5)
  {
    (*(void (**)(const webrtc::I444BufferInterface *))(v14 + 40))(a2);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i444_buffer.cc", 192, "crop_width <= src.width()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v32, v33, v34, v35, a5);
    goto LABEL_9;
  }
  if ((*(int (**)(const webrtc::I444BufferInterface *))(v14 + 48))(a2) < (int)a6)
  {
LABEL_9:
    (*(void (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 48))(a2);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i444_buffer.cc", 193, "crop_height <= src.height()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v36, v37, v38, v39, a6);
    goto LABEL_10;
  }
  v6 = (a5 + a3);
  if ((int)v6 > (*(int (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 40))(a2))
  {
LABEL_10:
    (*(void (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 40))(a2);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i444_buffer.cc", 194, "crop_width + offset_x <= src.width()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v40, v41, v42, v43, v6);
    goto LABEL_11;
  }
  v6 = (a6 + a4);
  if ((int)v6 > (*(int (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 48))(a2))
  {
LABEL_11:
    (*(void (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 48))(a2);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i444_buffer.cc", 195, "crop_height + offset_y <= src.height()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v44, v45, v46, v47, v6);
    goto LABEL_12;
  }
  if ((a3 & 0x80000000) != 0)
  {
LABEL_12:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i444_buffer.cc", 196, "offset_x >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v15, v16, v17, v18, a3);
    goto LABEL_13;
  }
  v53 = (libyuv *)a5;
  v54 = a6;
  if ((a4 & 0x80000000) == 0)
  {
    v19 = (*(uint64_t (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 136))(a2);
    v52 = (unsigned __int8 *)(v19
                            + (*(int (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 112))(a2)
                            * (uint64_t)(int)a4
                            + a3);
    v20 = (*(uint64_t (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 144))(a2);
    v51 = (unsigned __int8 *)(v20
                            + (*(int (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 120))(a2)
                            * (uint64_t)(int)a4
                            + a3);
    v21 = (*(uint64_t (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 152))(a2);
    v50 = (unsigned __int8 *)(v21
                            + (*(int (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 128))(a2)
                            * (uint64_t)(int)a4
                            + a3);
    v49 = (*(uint64_t (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 112))(a2);
    v22 = (*(uint64_t (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 120))(a2);
    v23 = (*(uint64_t (**)(const webrtc::I444BufferInterface *))(*(_QWORD *)a2 + 128))(a2);
    v24 = (int8x16_t *)(*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 136))(this);
    v25 = (*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 112))(this);
    v26 = (int8x16_t *)(*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 144))(this);
    v27 = (*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 120))(this);
    v28 = (int8x16_t *)(*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 152))(this);
    v29 = (*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 128))(this);
    LODWORD(v21) = (*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 40))(this);
    v30 = (*(uint64_t (**)(webrtc::I444Buffer *))(*(_QWORD *)this + 48))(this);
    return I444Scale(v52, v49, v51, v22, v50, v23, v53, v54, v24, v25, v26, v27, v28, v29, v21, v30, 3);
  }
LABEL_13:
  v48 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i444_buffer.cc", 197, "offset_y >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v15, v16, v17, v18, a4);
  return webrtc::I444Buffer::GetI420((webrtc::I444Buffer *)v48);
}

uint64_t webrtc::I444Buffer::GetI420(webrtc::I444Buffer *this)
{
  return 0;
}

uint64_t rtc::RefCountedObject<webrtc::I444Buffer>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::I444Buffer>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 10;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::I444Buffer>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C0B5010;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    free(*(void **)(v2 - 8));
  return a1;
}

void rtc::RefCountedObject<webrtc::I444Buffer>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C0B5010;
  v1 = a1[4];
  a1[4] = 0;
  if (v1)
    free(*(void **)(v1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::I444Buffer>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 40));
  return v1 == 1;
}

void cricket::IceCredentialsIterator::~IceCredentialsIterator(cricket::IceCredentialsIterator *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_24C0B5178;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 == v2)
    {
LABEL_11:
      *((_QWORD *)this + 2) = v2;
      operator delete(v4);
      return;
    }
    while (1)
    {
      if (*(char *)(v3 - 9) < 0)
      {
        operator delete(*(void **)(v3 - 32));
        if (*(char *)(v3 - 33) < 0)
LABEL_9:
          operator delete(*(void **)(v3 - 56));
      }
      else if (*(char *)(v3 - 33) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 56;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 1);
        goto LABEL_11;
      }
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_24C0B5178;
  v2 = *((_QWORD *)this + 1);
  if (!v2)
LABEL_12:
    JUMPOUT(0x20BD0ADECLL);
  v3 = *((_QWORD *)this + 2);
  v4 = (void *)*((_QWORD *)this + 1);
  if (v3 == v2)
  {
LABEL_11:
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
    goto LABEL_12;
  }
  while (1)
  {
    if (*(char *)(v3 - 9) < 0)
    {
      operator delete(*(void **)(v3 - 32));
      if (*(char *)(v3 - 33) < 0)
LABEL_9:
        operator delete(*(void **)(v3 - 56));
    }
    else if (*(char *)(v3 - 33) < 0)
    {
      goto LABEL_9;
    }
    v3 -= 56;
    if (v3 == v2)
    {
      v4 = (void *)*((_QWORD *)this + 1);
      goto LABEL_11;
    }
  }
}

void cricket::IceCredentialsIterator::CreateRandomIceCredentials(_BYTE *a1@<X8>)
{
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _BYTE *v8;
  char *p_p;
  std::string *v10;
  void *__p;
  size_t v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  uint64_t v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
    goto LABEL_19;
  if (SHIBYTE(v16) < 0)
  {
    v7 = v15;
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_18;
    v8 = v14;
    if (v15)
    {
      if (!v14)
        goto LABEL_18;
    }
  }
  else
  {
    v7 = HIBYTE(v16);
    v8 = &v14;
  }
  __p = 0;
  v12 = 0;
  v13 = 0;
  {
LABEL_19:
    v10 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v3, v4, v5, v6, (uint64_t)__p);
    cricket::IceCredentialsIterator::GetIceCredentials((cricket::IceCredentialsIterator *)v10);
    return;
  }
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    v3 = HIBYTE(v13);
    p_p = (char *)&__p;
    goto LABEL_13;
  }
  v3 = v12;
  if ((v12 & 0x8000000000000000) != 0 || (p_p = (char *)__p, v12) && !__p)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_13:
  cricket::IceParameters::IceParameters(a1, v8, v7, p_p, v3, 0);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v14);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v16) < 0)
    goto LABEL_17;
}

void cricket::IceCredentialsIterator::GetIceCredentials(cricket::IceCredentialsIterator *this@<X0>, std::string *a2@<X8>)
{
  std::string *v2;
  uint64_t v3;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;

  v2 = a2;
  v3 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 1) == v3)
  {
    cricket::IceCredentialsIterator::CreateRandomIceCredentials(a2);
    return;
  }
  if (*(char *)(v3 - 33) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v3 - 56), *(_QWORD *)(v3 - 48));
    v6 = v2 + 1;
    if ((*(char *)(v3 - 9) & 0x80000000) == 0)
    {
LABEL_4:
      v7 = *(_OWORD *)(v3 - 32);
      v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 - 16);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      v2[2].__r_.__value_.__s.__data_[0] = *(_BYTE *)(v3 - 8);
      v8 = *((_QWORD *)this + 2);
      if (*((_QWORD *)this + 1) != v8)
        goto LABEL_5;
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
  }
  else
  {
    v5 = *(_OWORD *)(v3 - 56);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 - 40);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
    v6 = a2 + 1;
    if ((*(char *)(v3 - 9) & 0x80000000) == 0)
      goto LABEL_4;
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v3 - 32), *(_QWORD *)(v3 - 24));
  v2[2].__r_.__value_.__s.__data_[0] = *(_BYTE *)(v3 - 8);
  v8 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 1) == v8)
    goto LABEL_11;
LABEL_5:
  v2 = (std::string *)(v8 - 56);
  if ((*(char *)(v8 - 9) & 0x80000000) == 0)
  {
    if ((*(char *)(v8 - 33) & 0x80000000) == 0)
    {
LABEL_7:
      *((_QWORD *)this + 2) = v2;
      return;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(v8 - 32));
  if ((*(char *)(v8 - 33) & 0x80000000) == 0)
    goto LABEL_7;
LABEL_13:
  operator delete(v2->__r_.__value_.__l.__data_);
  *((_QWORD *)this + 2) = v2;
}

void std::vector<cricket::IceParameters>::__init_with_size[abi:sn180100]<cricket::IceParameters*,cricket::IceParameters*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;

  if (a4)
  {
    if (a4 >= 0x492492492492493)
      abort();
    v7 = 56 * a4;
    v8 = operator new(56 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[v7];
    if (a2 != a3)
    {
      v9 = 0;
      while (1)
      {
        v10 = (std::string *)&v8[v9];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
          v12 = (std::string *)&v8[v9 + 24];
          v13 = a2 + v9;
          v14 = a2 + v9 + 24;
          if ((*(char *)(a2 + v9 + 47) & 0x80000000) == 0)
          {
LABEL_11:
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)v14;
            v12->__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 16);
            goto LABEL_6;
          }
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
          v12 = (std::string *)&v8[v9 + 24];
          v13 = a2 + v9;
          v14 = a2 + v9 + 24;
          if ((*(char *)(a2 + v9 + 47) & 0x80000000) == 0)
            goto LABEL_11;
        }
        std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v14, *(_QWORD *)(v13 + 32));
LABEL_6:
        v8[v9 + 48] = *(_BYTE *)(a2 + v9 + 48);
        v9 += 56;
        if (a2 + v9 == a3)
        {
          v8 += v9;
          break;
        }
      }
    }
    a1[1] = v8;
  }
}

_BYTE *cricket::IceParameters::IceParameters(_BYTE *a1, _BYTE *__src, size_t __len, char *a4, size_t a5, char a6)
{
  _BYTE *v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_25;
  v11 = a1;
  if (__len > 0x16)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    a1 = operator new(v12 + 1);
    *((_QWORD *)v11 + 1) = __len;
    *((_QWORD *)v11 + 2) = v13 | 0x8000000000000000;
    *(_QWORD *)v11 = a1;
  }
  else
  {
    a1[23] = __len;
  }
  v14 = &a1[__len];
  if (a1 <= __src && v14 > __src)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (__len)
    memmove(a1, __src, __len);
  *v14 = 0;
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_25:
    abort();
  if (a5 <= 0x16)
  {
    v16 = v11 + 24;
    v11[47] = a5;
    v17 = &v11[a5 + 24];
    if (v11 + 24 > a4)
      goto LABEL_21;
    goto LABEL_20;
  }
  v18 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a5 | 7) != 0x17)
    v18 = a5 | 7;
  v19 = v18 + 1;
  v16 = (char *)operator new(v18 + 1);
  *((_QWORD *)v11 + 4) = a5;
  *((_QWORD *)v11 + 5) = v19 | 0x8000000000000000;
  *((_QWORD *)v11 + 3) = v16;
  v17 = &v16[a5];
  if (v16 <= a4)
  {
LABEL_20:
    if (v17 <= a4)
      goto LABEL_21;
    goto LABEL_24;
  }
LABEL_21:
  if (a5)
    memmove(v16, a4, a5);
  *v17 = 0;
  v11[48] = a6;
  return v11;
}

float *webrtc::IceEventLog::LogCandidatePairConfig(float *result, int a2, unsigned int a3, uint64_t a4)
{
  float *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  float *v11;
  unsigned int v12;

  v12 = a3;
  if (*(_QWORD *)result)
  {
    v6 = result;
    std::__hash_table<std::__hash_value_type<unsigned int,webrtc::IceCandidatePairDescription>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,webrtc::IceCandidatePairDescription>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,webrtc::IceCandidatePairDescription>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,webrtc::IceCandidatePairDescription>>>::__emplace_unique_key_args<unsigned int,unsigned int &,webrtc::IceCandidatePairDescription const&>(result + 2, &v12, &v12, a4);
    v7 = *(_QWORD *)v6;
    v8 = operator new();
    v9 = v12;
    if (rtc::g_clock)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v10 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    *(_QWORD *)v8 = &unk_24C0BBE38;
    *(_QWORD *)(v8 + 8) = 1000 * (v10 / 1000000);
    *(_DWORD *)(v8 + 16) = a2;
    *(_DWORD *)(v8 + 20) = v9;
    *(_OWORD *)(v8 + 24) = *(_OWORD *)a4;
    *(_QWORD *)(v8 + 40) = *(_QWORD *)(a4 + 16);
    *(_DWORD *)(v8 + 48) = *(_DWORD *)(a4 + 24);
    v11 = (float *)v8;
    (*(void (**)(uint64_t, float **))(*(_QWORD *)v7 + 40))(v7, &v11);
    result = v11;
    v11 = 0;
    if (result)
      return (float *)(*(uint64_t (**)(float *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t webrtc::IceEventLog::LogCandidatePairEvent(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v8 = operator new();
    if (rtc::g_clock)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v9 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
    }
    *(_QWORD *)v8 = &unk_24C0BBE00;
    *(_QWORD *)(v8 + 8) = 1000 * (v9 / 1000000);
    *(_DWORD *)(v8 + 16) = a2;
    *(_DWORD *)(v8 + 20) = a3;
    *(_DWORD *)(v8 + 24) = a4;
    v10 = v8;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 40))(v4, &v10);
    result = v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t *webrtc::IceEventLog::DumpCandidatePairDescriptionToMemoryAsConfigEvents(uint64_t *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;

  v1 = (uint64_t *)this[3];
  if (v1)
  {
    v2 = this;
    do
    {
      v3 = *v2;
      v4 = operator new();
      v5 = *((_DWORD *)v1 + 4);
      *(_QWORD *)v4 = &unk_24C0BBBD0;
      if (rtc::g_clock)
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v6 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
           / dword_253EA791C;
      }
      *(_QWORD *)v4 = &unk_24C0BBE38;
      *(_QWORD *)(v4 + 8) = 1000 * (v6 / 1000000);
      *(_DWORD *)(v4 + 16) = 1;
      *(_DWORD *)(v4 + 20) = v5;
      *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)v1 + 20);
      *(_QWORD *)(v4 + 40) = *(uint64_t *)((char *)v1 + 36);
      *(_DWORD *)(v4 + 48) = *((_DWORD *)v1 + 11);
      v7 = (uint64_t *)v4;
      (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v3 + 40))(v3, &v7);
      this = v7;
      v7 = 0;
      if (this)
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
      v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
  return this;
}

char *std::__hash_table<std::__hash_value_type<unsigned int,webrtc::IceCandidatePairDescription>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,webrtc::IceCandidatePairDescription>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,webrtc::IceCandidatePairDescription>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,webrtc::IceCandidatePairDescription>>>::__emplace_unique_key_args<unsigned int,unsigned int &,webrtc::IceCandidatePairDescription const&>(float *a1, unsigned int *a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _QWORD *v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  size_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  _QWORD *v41;
  unint64_t v42;

  v8 = *a2;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = *((_QWORD *)v12 + 1);
            if (v14 == v8)
            {
              if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v12 = *(char **)v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_DWORD *)v12 + 4) = *a3;
  *(_OWORD *)(v12 + 20) = *(_OWORD *)a4;
  *(_QWORD *)(v12 + 36) = *(_QWORD *)(a4 + 16);
  *((_DWORD *)v12 + 11) = *(_DWORD *)(a4 + 24);
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime > v9)
      goto LABEL_37;
    if (prime < v9)
    {
      v34 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v34);
        if (prime <= v40)
          prime = v40;
        if (prime >= v9)
        {
LABEL_60:
          v9 = *((_QWORD *)a1 + 1);
          if ((v9 & (v9 - 1)) == 0)
            goto LABEL_87;
          goto LABEL_74;
        }
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
        if (prime <= v34)
          prime = v34;
        if (prime >= v9)
          goto LABEL_60;
      }
      if (prime)
      {
LABEL_37:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v23 = operator new(8 * prime);
        v24 = *(_QWORD **)a1;
        *(_QWORD *)a1 = v23;
        if (v24)
          operator delete(v24);
        v25 = 0;
        *((_QWORD *)a1 + 1) = prime;
        do
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
        while (prime != v25);
        v27 = (uint64_t *)(a1 + 4);
        v26 = (_QWORD *)*((_QWORD *)a1 + 2);
        if (!v26)
          goto LABEL_73;
        v28 = v26[1];
        v29 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v30 = v28 & v29;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v27;
          for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
          {
            v32 = i[1] & v29;
            if (v32 == v30)
            {
              v26 = i;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
            {
              *v26 = *i;
              v33 = 8 * v32;
              *i = **(_QWORD **)(*(_QWORD *)a1 + v33);
              **(_QWORD **)(*(_QWORD *)a1 + v33) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v26;
              v26 = i;
              v30 = v32;
            }
          }
          goto LABEL_73;
        }
        if (v28 >= prime)
          v28 %= prime;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v27;
        v37 = (_QWORD *)*v26;
        if (!*v26)
        {
LABEL_73:
          v9 = prime;
          if ((prime & (prime - 1)) != 0)
            goto LABEL_74;
LABEL_87:
          v4 = ((_DWORD)v9 - 1) & v8;
          v17 = *(_QWORD **)a1;
          v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
          if (v18)
            goto LABEL_26;
          goto LABEL_88;
        }
        while (1)
        {
          v39 = v37[1];
          if (v39 >= prime)
            v39 %= prime;
          if (v39 == v28)
            goto LABEL_67;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
          {
            *v26 = *v37;
            v38 = 8 * v39;
            *v37 = **(_QWORD **)(*(_QWORD *)a1 + v38);
            **(_QWORD **)(*(_QWORD *)a1 + v38) = v37;
            v37 = v26;
LABEL_67:
            v26 = v37;
            v37 = (_QWORD *)*v37;
            if (!v37)
              goto LABEL_73;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v26;
            v26 = v37;
            v37 = (_QWORD *)*v37;
            v28 = v39;
            if (!v37)
              goto LABEL_73;
          }
        }
      }
      v41 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v41)
        operator delete(v41);
      v9 = 0;
      *((_QWORD *)a1 + 1) = 0;
    }
    if ((v9 & (v9 - 1)) == 0)
      goto LABEL_87;
LABEL_74:
    if (v9 <= v8)
    {
      v4 = v8 % v9;
      v17 = *(_QWORD **)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
      if (v18)
        goto LABEL_26;
    }
    else
    {
      v4 = v8;
      v17 = *(_QWORD **)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
      if (v18)
        goto LABEL_26;
    }
    goto LABEL_88;
  }
  v17 = *(_QWORD **)a1;
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
LABEL_26:
    *(_QWORD *)v12 = *v18;
LABEL_94:
    *v18 = v12;
    goto LABEL_95;
  }
LABEL_88:
  *(_QWORD *)v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v17[v4] = a1 + 4;
  if (*(_QWORD *)v12)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v42 >= v9)
        v42 %= v9;
    }
    else
    {
      v42 &= v9 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_94;
  }
LABEL_95:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void webrtc::ParseIceServersOrError(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  size_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
LABEL_26:
    *(_DWORD *)a4 = 0;
    *(_BYTE *)(a4 + 38) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 29) = 0;
    return;
  }
  while (1)
  {
    v9 = *(_QWORD *)(v5 + 24);
    v10 = *(_QWORD *)(v5 + 32);
    if (v9 != v10)
      break;
    if (*(char *)(v5 + 23) < 0)
    {
      v12 = *(_QWORD *)(v5 + 8);
      if (v12)
      {
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_38;
        v11 = *(_QWORD *)v5;
        if (!*(_QWORD *)v5)
          goto LABEL_38;
        goto LABEL_23;
      }
LABEL_33:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
      *(_DWORD *)a4 = 5;
      v22 = (char *)operator new(0x28uLL);
      *(_QWORD *)(a4 + 8) = v22;
      *(_OWORD *)(a4 + 16) = xmmword_208F086E0;
      if (v22 > "ICE server parsing failed: Empty uri." || v22 + 37 <= "ICE server parsing failed: Empty uri.")
        goto LABEL_31;
LABEL_38:
      __break(1u);
      return;
    }
    v11 = v5;
    v12 = *(unsigned __int8 *)(v5 + 23);
    if (!*(_BYTE *)(v5 + 23))
      goto LABEL_33;
LABEL_23:
    if (*(_DWORD *)a4)
      return;
    if (*(char *)(a4 + 31) < 0)
      operator delete(*(void **)(a4 + 8));
LABEL_3:
    v5 += 176;
    if (v5 == v6)
      goto LABEL_26;
  }
  while ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    v13 = v9;
    v14 = *(unsigned __int8 *)(v9 + 23);
    if (!*(_BYTE *)(v9 + 23))
      goto LABEL_27;
LABEL_16:
    if (*(_DWORD *)a4 || (*(char *)(a4 + 31) & 0x80000000) == 0)
    {
      if (*(_DWORD *)a4)
        return;
      v9 += 24;
      if (v9 == v10)
        goto LABEL_3;
    }
    else
    {
      operator delete(*(void **)(a4 + 8));
      v9 += 24;
      if (v9 == v10)
        goto LABEL_3;
    }
  }
  v14 = *(_QWORD *)(v9 + 8);
  if (v14)
  {
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_38;
    v13 = *(_QWORD *)v9;
    if (!*(_QWORD *)v9)
      goto LABEL_38;
    goto LABEL_16;
  }
LABEL_27:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
  *(_DWORD *)a4 = 5;
  v22 = (char *)operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v22;
  *(_OWORD *)(a4 + 16) = xmmword_208F086E0;
  if (v22 <= "ICE server parsing failed: Empty uri." && v22 + 37 > "ICE server parsing failed: Empty uri.")
    goto LABEL_38;
LABEL_31:
  strcpy(v22, "ICE server parsing failed: Empty uri.");
  *(_DWORD *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 36) = 0;
  *(_BYTE *)(a4 + 38) = 0;
}

void webrtc::`anonymous namespace'::ParseIceServerUrl(uint64_t a1, uint64_t a2, size_t __sz, unint64_t a4, uint64_t **a5, uint64_t a6)
{
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  char *v21;
  size_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  __int16 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  size_t v54;
  int v55;
  size_t v56;
  int v57;
  int v58;
  int v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  int v77;
  __int128 *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  int v107;
  char *v108;
  _BYTE *v109;
  uint64_t v110;
  int64_t v111;
  char v112;
  int v113;
  _BYTE *v114;
  size_t v115;
  size_t v116;
  size_t v117;
  unsigned __int8 *v118;
  int64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  __int128 **v155;
  __int128 *v156;
  size_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  size_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  size_t v179;
  int v180;
  uint64_t v181;
  uint64_t **v182;
  uint64_t v183;
  void *__p[6];
  int v185;
  __int16 v186;
  int v187;
  std::string *v188[3];
  std::string *v189[9];
  char *v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  _QWORD v194[3];
  __int16 v195;
  int v196;
  __int128 v197;
  char *v198;
  char *v199;
  size_t v200;
  unint64_t v201;

  v200 = __sz;
  v201 = a4;
  rtc::split(__sz, a4, 0x3Fu, &v198);
  if (v199 == v198)
    goto LABEL_218;
  v197 = *(_OWORD *)v198;
  if (v199 - v198 != 32)
  {
    v20 = 0;
    v22 = *((_QWORD *)&v197 + 1);
    v21 = (char *)v197;
    *(_OWORD *)__p = v197;
    if (!*((_QWORD *)&v197 + 1))
      goto LABEL_26;
    goto LABEL_21;
  }
  rtc::split(*((_QWORD *)v198 + 2), *((_QWORD *)v198 + 3), 0x3Du, (char **)__p);
  if (__p[1] == __p[0])
    goto LABEL_218;
  if (*((_QWORD *)__p[0] + 1) == 9
    && (**(_QWORD **)__p[0] == 0x726F70736E617274 ? (v10 = *(_BYTE *)(*(_QWORD *)__p[0] + 8) == 116) : (v10 = 0), v10))
  {
    if ((void *)((char *)__p[1] - (char *)__p[0]) > (void *)0x1F)
    {
      v95 = cricket::StringToProto(*((char **)__p[0] + 2), *((_QWORD *)__p[0] + 3));
      if ((v95 & 0xFF00000000) != 0)
      {
        v20 = v95;
        if (!(_DWORD)v95)
        {
          v19 = 1;
          goto LABEL_15;
        }
        if ((_DWORD)v95 == 1)
        {
          v19 = 1;
          v20 = 1;
          goto LABEL_15;
        }
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v190 = "SYNTAX_ERROR";
        v191 = 12;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v97, v98, v99, v100, v101, v102, v103, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
      }
      *(_DWORD *)a1 = 5;
      v104 = (char *)operator new(0x50uLL);
      *(_QWORD *)(a1 + 8) = v104;
      *(_OWORD *)(a1 + 16) = xmmword_208F0ABC0;
      if (v104 <= "ICE server parsing failed: Transport parameter should always be udp or tcp."
        && v104 + 75 > "ICE server parsing failed: Transport parameter should always be udp or tcp.")
      {
        goto LABEL_218;
      }
      v19 = 0;
      v20 = 0;
      strcpy(v104, "ICE server parsing failed: Transport parameter should always be udp or tcp.");
    }
    else
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v190 = "SYNTAX_ERROR";
        v191 = 12;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v68, v69, v70, v71, v72, v73, v74, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
      }
      *(_DWORD *)a1 = 5;
      v75 = (char *)operator new(0x40uLL);
      *(_QWORD *)(a1 + 8) = v75;
      *(_OWORD *)(a1 + 16) = xmmword_208F0ABD0;
      if (v75 <= "ICE server parsing failed: Transport parameter missing value."
        && v75 + 61 > "ICE server parsing failed: Transport parameter missing value.")
      {
        goto LABEL_218;
      }
      v19 = 0;
      v20 = 0;
      strcpy(v75, "ICE server parsing failed: Transport parameter missing value.");
    }
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v190 = "SYNTAX_ERROR";
      v191 = 12;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
    }
    *(_DWORD *)a1 = 5;
    v18 = (char *)operator new(0x40uLL);
    *(_QWORD *)(a1 + 8) = v18;
    *(_OWORD *)(a1 + 16) = xmmword_208F0ABB0;
    if (v18 <= "ICE server parsing failed: Invalid transport parameter key."
      && v18 + 59 > "ICE server parsing failed: Invalid transport parameter key.")
    {
      goto LABEL_218;
    }
    v19 = 0;
    v20 = 0;
    strcpy(v18, "ICE server parsing failed: Invalid transport parameter key.");
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 38) = 0;
LABEL_15:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!v19)
    goto LABEL_37;
  v22 = *((_QWORD *)&v197 + 1);
  v21 = (char *)v197;
  *(_OWORD *)__p = v197;
  if (!*((_QWORD *)&v197 + 1))
    goto LABEL_26;
LABEL_21:
  v23 = memchr(v21, 58, v22);
  if (!v23 || (v24 = v23, v25 = v23 - v21, v23 - v21 == -1))
  {
LABEL_26:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  v26 = v25 + 1;
  if (v22 == v25 + 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_28;
LABEL_27:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
    goto LABEL_28;
  }
  v183 = a2;
  if (v22 >= v25)
    v53 = v23 - v21;
  else
    v53 = v22;
  if ((v53 & 0x8000000000000000) != 0)
    goto LABEL_218;
  v181 = a6;
  if (!v21)
  {
    if (v53)
      goto LABEL_218;
  }
  if (v53 >= 4)
    v54 = 4;
  else
    v54 = v53;
  v55 = memcmp(v21, "stun", v54);
  v182 = a5;
  if ((v53 != 4 || v55) && (v53 >= 5 ? (v56 = 5) : (v56 = v53), (v57 = memcmp(v21, "stuns", v56), v53 != 5) || v57))
  {
    v96 = memcmp(v21, "turn", v54);
    if (v53 != 4 || v96)
    {
      v113 = memcmp(v21, "turns", v56);
      if (v53 != 5 || v113)
      {
LABEL_28:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v34, v35, v36, v37, v38, v39, v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
        v48 = "ICE server parsing failed: Invalid transport parameter in ICE URI";
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          __p[0] = "SYNTAX_ERROR";
          __p[1] = (void *)12;
          rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
        }
        *(_DWORD *)a1 = 5;
        v49 = (char *)operator new(0x48uLL);
        *(_QWORD *)(a1 + 8) = v49;
        *(_OWORD *)(a1 + 16) = xmmword_208F0ABF0;
        if (v49 > "ICE server parsing failed: Invalid transport parameter in ICE URI"
          || v49 + 65 <= "ICE server parsing failed: Invalid transport parameter in ICE URI")
        {
          v50 = 73;
LABEL_35:
          *((_WORD *)v49 + 32) = v50;
          v51 = *((_OWORD *)v48 + 1);
          *(_OWORD *)v49 = *(_OWORD *)v48;
          *((_OWORD *)v49 + 1) = v51;
          v52 = *((_OWORD *)v48 + 3);
          *((_OWORD *)v49 + 2) = *((_OWORD *)v48 + 2);
          *((_OWORD *)v49 + 3) = v52;
LABEL_36:
          *(_DWORD *)(a1 + 32) = 0;
          *(_BYTE *)(a1 + 36) = 0;
          *(_BYTE *)(a1 + 38) = 0;
          goto LABEL_37;
        }
        goto LABEL_218;
      }
      v59 = 0;
      v58 = 1;
    }
    else
    {
      v59 = 0;
      v58 = 0;
    }
  }
  else
  {
    v58 = 0;
    v59 = 1;
  }
  if (v22 <= v25)
    goto LABEL_219;
  v60 = v22 - v26;
  if ((uint64_t)(v22 - v26) < 0 || !v21)
    goto LABEL_218;
  if ((v59 & 1) != 0 && (unint64_t)(v199 - v198) >= 0x11)
  {
    v48 = "ICE server parsing failed: Invalid stun url with query parameters";
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __p[0] = "SYNTAX_ERROR";
      __p[1] = (void *)12;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v61, v62, v63, v64, v65, v66, v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
    }
    *(_DWORD *)a1 = 5;
    v49 = (char *)operator new(0x48uLL);
    *(_QWORD *)(a1 + 8) = v49;
    *(_OWORD *)(a1 + 16) = xmmword_208F0ABF0;
    if (v49 > "ICE server parsing failed: Invalid stun url with query parameters"
      || v49 + 65 <= "ICE server parsing failed: Invalid stun url with query parameters")
    {
      v50 = 115;
      goto LABEL_35;
    }
    goto LABEL_218;
  }
  if (v58)
    v76 = 5349;
  else
    v76 = 3478;
  if (v58)
    v77 = 3;
  else
    v77 = v20;
  v180 = v77;
  if (!v60)
    goto LABEL_159;
  v78 = (__int128 *)&v21[v26];
  v79 = memchr(&v21[v26], 64, v22 - v26);
  if (v79 && v79 - (_BYTE *)v78 != -1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v80, v81, v82, v83, v84, v85, v86, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __p[0] = "SYNTAX_ERROR";
      __p[1] = (void *)12;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v87, v88, v89, v90, v91, v92, v93, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
    }
    *(_DWORD *)a1 = 5;
    v94 = (char *)operator new(0x50uLL);
    *(_QWORD *)(a1 + 8) = v94;
    *(_OWORD *)(a1 + 16) = xmmword_208F0ABE0;
    if (v94 > "ICE server parsing failed: Invalid url with long deprecated user@host syntax"
      || v94 + 76 <= "ICE server parsing failed: Invalid url with long deprecated user@host syntax")
    {
      strcpy(v94, "ICE server parsing failed: Invalid url with long deprecated user@host syntax");
      goto LABEL_36;
    }
    goto LABEL_218;
  }
  if (*(_BYTE *)v78 == 91)
  {
    v105 = 0;
    v106 = &v21[v22];
    do
    {
      if (&v21[v22] - v24 + v105 == 1)
        goto LABEL_159;
      v107 = v106[--v105];
    }
    while (v107 != 93);
    v108 = (char *)(&v21[v22] - v24 + v105);
    if (v108)
    {
      if (v60 <= (unint64_t)(v108 - 1))
        goto LABEL_146;
      v109 = memchr(&v106[v105], 58, -v105);
      if (!v109 || v109 - (_BYTE *)v78 == -1)
        goto LABEL_146;
      if (v60 < &v21[v22] - v24 + v105 + 1)
        goto LABEL_219;
      if (-2 - v105 < 0)
        goto LABEL_218;
      if (v105 != -2)
      {
        v110 = v105 + 2;
        while ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v106[v110] + 60) & 0x400) != 0)
        {
          if (!++v110)
            goto LABEL_115;
        }
        v76 = 0;
        goto LABEL_146;
      }
LABEL_115:
      v111 = rtc::string_to_number_internal::ParseSigned((void **)&v21[v22 + 2 + v105], -2 - v105, 10);
      if (v112)
      {
        v76 = v111;
        if (v111 >= (uint64_t)0xFFFFFFFF80000000 && v111 <= 0x7FFFFFFF)
        {
LABEL_146:
          if (v60 - 1 >= &v21[v22] - v24 + v105 - 2)
            v60 = &v21[v22] - v24 + v105 - 2;
          else
            --v60;
          v78 = (__int128 *)((char *)v78 + 1);
          goto LABEL_150;
        }
      }
    }
    goto LABEL_159;
  }
  v114 = memchr(&v21[v26], 58, v22 - v26);
  if (v114)
  {
    v115 = v114 - (_BYTE *)v78;
    if (v114 - (_BYTE *)v78 != -1)
    {
      if (v60 <= v115)
        goto LABEL_219;
      v116 = v115 + 1;
      if ((uint64_t)(v60 - (v115 + 1)) < 0)
        goto LABEL_218;
      if (v60 == v116)
      {
LABEL_130:
        v119 = rtc::string_to_number_internal::ParseSigned((void **)((char *)v78 + v116), v60 - (v115 + 1), 10);
        if (!v120)
          goto LABEL_159;
        if (v119 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_159;
        v76 = v119;
        if (v119 > 0x7FFFFFFF)
          goto LABEL_159;
      }
      else
      {
        v117 = v60 - (v115 + 1);
        v118 = (unsigned __int8 *)v78 + v116;
        while ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v118 + 60) & 0x400) != 0)
        {
          ++v118;
          if (!--v117)
            goto LABEL_130;
        }
        v76 = 0;
      }
      if (v60 >= v115)
        v60 = v115;
      if (!v60)
        goto LABEL_159;
    }
  }
  v121 = 0;
  while (memchr("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~%!$&'()*+,;=",
            *((char *)v78 + v121),
            0x4EuLL))
  {
    if (v60 == ++v121)
      goto LABEL_150;
  }
  if (v121 != -1)
  {
LABEL_159:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v137, v138, v139, v140, v141, v142, v143, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __p[0] = "SYNTAX_ERROR";
      __p[1] = (void *)12;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v144, v145, v146, v147, v148, v149, v150, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
    }
    *(_DWORD *)a1 = 5;
    v151 = (char *)operator new(0x38uLL);
    *(_QWORD *)(a1 + 8) = v151;
    *(_OWORD *)(a1 + 16) = xmmword_208F08670;
    if (v151 > "ICE server parsing failed: Invalid hostname format"
      || v151 + 50 <= "ICE server parsing failed: Invalid hostname format")
    {
      strcpy(v151, "ICE server parsing failed: Invalid hostname format");
      goto LABEL_36;
    }
    goto LABEL_218;
  }
LABEL_150:
  if (!v60)
    goto LABEL_159;
  if ((v76 - 0x10000) <= 0xFFFF0000)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v122, v123, v124, v125, v126, v127, v128, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __p[0] = "SYNTAX_ERROR";
      __p[1] = (void *)12;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v129, v130, v131, v132, v133, v134, v135, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
    }
    *(_DWORD *)a1 = 5;
    v136 = (char *)operator new(0x28uLL);
    *(_QWORD *)(a1 + 8) = v136;
    *(_OWORD *)(a1 + 16) = xmmword_208F097B0;
    if (v136 > "ICE server parsing failed: Invalid port" || v136 + 39 <= "ICE server parsing failed: Invalid port")
    {
      strcpy(v136, "ICE server parsing failed: Invalid port");
      goto LABEL_36;
    }
    goto LABEL_218;
  }
  if (v59)
  {
    memset(__p, 0, 24);
    __p[3] = &unk_24C0ACDA0;
    __p[4] = 0;
    __p[5] = 0;
    v185 = 0;
    rtc::SocketAddress::SetIP((uint64_t)__p, v78, v60);
    v186 = v76;
    std::__tree<rtc::SocketAddress>::__emplace_unique_key_args<rtc::SocketAddress,rtc::SocketAddress>(v182, (char *)__p, (uint64_t)__p);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_217:
      *(_DWORD *)a1 = 0;
      *(_BYTE *)(a1 + 38) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 29) = 0;
      goto LABEL_37;
    }
    v152 = (char *)__p[0];
LABEL_216:
    operator delete(v152);
    goto LABEL_217;
  }
  v153 = *(unsigned __int8 *)(v183 + 71);
  if ((v153 & 0x80u) != 0)
    v153 = *(_QWORD *)(v183 + 56);
  if (!v153)
    goto LABEL_183;
  v154 = *(unsigned __int8 *)(v183 + 95);
  if ((v154 & 0x80u) != 0)
    v154 = *(_QWORD *)(v183 + 80);
  if (v154)
  {
    v155 = (__int128 **)(v183 + 104);
    if (*(char *)(v183 + 127) < 0)
    {
      v166 = *(_QWORD *)(v183 + 112);
      v156 = v78;
      v157 = v60;
      v158 = v181;
      if (v166)
      {
        if (v166 < 0)
          goto LABEL_218;
        v156 = *v155;
        v157 = *(_QWORD *)(v183 + 112);
        if (!*v155)
          goto LABEL_218;
      }
    }
    else
    {
      if (*(_BYTE *)(v183 + 127))
        v156 = (__int128 *)(v183 + 104);
      else
        v156 = v78;
      if (*(_BYTE *)(v183 + 127))
        v157 = *(unsigned __int8 *)(v183 + 127);
      else
        v157 = v60;
      v158 = v181;
    }
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v193 = &unk_24C0ACDA0;
    memset(v194, 0, 20);
    rtc::SocketAddress::SetIP((uint64_t)&v190, v156, v157);
    v195 = v76;
    v167 = v183;
    v168 = *(unsigned __int8 *)(v183 + 127);
    if ((v168 & 0x80u) != 0)
      v168 = *(_QWORD *)(v183 + 112);
    if (!v168)
      goto LABEL_194;
    memset(&__p[1], 0, 20);
    __p[0] = &unk_24C0ACDA0;
    if ((rtc::IPFromString((char *)v78, v60, (uint64_t)__p) & 1) != 0)
    {
      *(_OWORD *)((char *)v194 + 4) = *(_OWORD *)((char *)&__p[1] + 4);
      LODWORD(v194[0]) = __p[1];
      v196 = 0;
      v167 = v183;
LABEL_194:
      v169 = (_BYTE *)(v167 + 48);
      if (*(char *)(v167 + 71) < 0)
      {
        v170 = *(_QWORD *)(v167 + 56);
        if ((v170 & 0x8000000000000000) != 0)
          goto LABEL_218;
        v169 = *(_BYTE **)v169;
        if (v170)
        {
          if (!v169)
            goto LABEL_218;
        }
      }
      else
      {
        v170 = *(unsigned __int8 *)(v167 + 71);
      }
      v178 = (char *)(v167 + 72);
      if ((*(char *)(v167 + 95) & 0x80000000) == 0)
      {
        v179 = *(unsigned __int8 *)(v167 + 95);
LABEL_208:
        cricket::RelayServerConfig::RelayServerConfig((uint64_t)__p, (uint64_t)&v190, v169, v170, v178, v179, v180);
        if (*(_DWORD *)(v183 + 96) == 1)
          v187 = 1;
        if (v188 != (std::string **)(v183 + 128))
          std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>(v188, *(__int128 **)(v183 + 128), *(__int128 **)(v183 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v183 + 136) - *(_QWORD *)(v183 + 128)) >> 3));
        if (v189 != (std::string **)(v183 + 152))
          std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>(v189, *(__int128 **)(v183 + 152), *(__int128 **)(v183 + 160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v183 + 160) - *(_QWORD *)(v183 + 152)) >> 3));
        std::vector<cricket::RelayServerConfig>::push_back[abi:sn180100](v158, (char **)__p);
        cricket::RelayServerConfig::~RelayServerConfig(__p);
        if ((SHIBYTE(v192) & 0x80000000) == 0)
          goto LABEL_217;
        v152 = v190;
        goto LABEL_216;
      }
      v179 = *(_QWORD *)(v167 + 80);
      if ((v179 & 0x8000000000000000) == 0)
      {
        v178 = *(char **)v178;
        if (!v179 || v178)
          goto LABEL_208;
      }
LABEL_218:
      __break(1u);
LABEL_219:
      abort();
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v189[7] = (std::string *)"INVALID_PARAMETER";
      v189[8] = (std::string *)17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v171, v172, v173, v174, v175, v176, v177, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
    }
    webrtc::RTCError::RTCError(a1, 3, "ICE server parsing failed: IceServer has hostname field set, but URI does not contain an IP address.", 0x64uLL);
    if (SHIBYTE(v192) < 0)
      operator delete(v190);
  }
  else
  {
LABEL_183:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __p[0] = "INVALID_PARAMETER";
      __p[1] = (void *)17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v159, v160, v161, v162, v163, v164, v165, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/ice_server_parsing.cc");
    }
    webrtc::RTCError::RTCError(a1, 3, "ICE server parsing failed: TURN server with empty username or password", 0x46uLL);
  }
LABEL_37:
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
}

unint64_t std::vector<cricket::RelayServerConfig>::push_back[abi:sn180100](uint64_t a1, char **a2)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= *(_QWORD *)(a1 + 16))
  {
    result = std::vector<cricket::RelayServerConfig>::__push_back_slow_path<cricket::RelayServerConfig const&>((char ***)a1, a2);
    *(_QWORD *)(a1 + 8) = result;
  }
  else if (result)
  {
    result = cricket::RelayServerConfig::RelayServerConfig(result, a2) + 160;
    *(_QWORD *)(a1 + 8) = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__tree<rtc::SocketAddress>::__emplace_unique_key_args<rtc::SocketAddress,rtc::SocketAddress>(uint64_t **a1, char *__s1, uint64_t a3)
{
  char *v5;
  char **v6;
  char **v8;
  uint64_t v9;
  uint64_t result;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;

  v6 = (char **)(a1 + 1);
  v5 = (char *)a1[1];
  if (!v5)
  {
    v8 = (char **)(a1 + 1);
LABEL_10:
    v11 = (char *)operator new(0x68uLL);
    *((_QWORD *)v11 + 4) = 0;
    v12 = v11 + 32;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 8) = 0;
    *((_QWORD *)v11 + 9) = 0;
    *((_QWORD *)v11 + 7) = &unk_24C0ACDA0;
    *((_DWORD *)v11 + 20) = 0;
    if (v11 + 32 != (char *)a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        std::string::__assign_no_alias<true>(v12, *(char **)a3, *(_QWORD *)(a3 + 8));
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)a3;
        *((_QWORD *)v11 + 6) = *(_QWORD *)(a3 + 16);
      }
    }
    *((_DWORD *)v11 + 16) = *(_DWORD *)(a3 + 32);
    *(_OWORD *)(v11 + 68) = *(_OWORD *)(a3 + 36);
    *((_WORD *)v11 + 44) = *(_WORD *)(a3 + 56);
    v11[96] = *(_BYTE *)(a3 + 64);
    *((_DWORD *)v11 + 23) = *(_DWORD *)(a3 + 60);
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v8;
    *v6 = v11;
    v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      v11 = *v6;
    }
    result = (uint64_t)std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      v8 = (char **)v5;
      v9 = (uint64_t)(v5 + 32);
      if (!rtc::SocketAddress::operator<((uint64_t)__s1, v5 + 32))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    result = rtc::SocketAddress::operator<(v9, __s1);
    if (!(_DWORD)result)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  if (!*v6)
    goto LABEL_10;
  return result;
}

void std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>(std::string **a1, __int128 *a2, __int128 *a3, size_t __sz)
{
  std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  __int128 *v13;
  uint64_t v14;
  const std::string::value_type *v15;
  size_t size;
  char v17;
  __int128 v18;
  std::string *v19;
  const std::string::value_type *v20;
  size_t v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;

  v6 = (std::string *)a2;
  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 3) < __sz)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          --v10;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz <= 0xAAAAAAAAAAAAAAALL)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
      v25 = 2 * v24;
      if (2 * v24 <= __sz)
        v25 = __sz;
      v26 = v24 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v25;
      if (v26 <= 0xAAAAAAAAAAAAAAALL)
      {
        v27 = v26;
        v28 = (std::string *)operator new(24 * v26);
        *a1 = v28;
        a1[1] = v28;
        a1[2] = &v28[v27];
        while (v6 != (std::string *)a3)
        {
          if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v28, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
            v28->__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
          }
          ++v6;
          ++v28;
        }
        a1[1] = v28;
        return;
      }
    }
LABEL_71:
    abort();
  }
  v12 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) < __sz)
  {
    v13 = (__int128 *)((char *)a2 + 8 * (((char *)v12 - (char *)v9) >> 3));
    if (v12 != v9)
    {
      v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
      do
      {
        if (v6 != v9)
        {
          v17 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
          {
            if (v17 >= 0)
              v15 = (const std::string::value_type *)v6;
            else
              v15 = (const std::string::value_type *)v6->__r_.__value_.__r.__words[0];
            if (v17 >= 0)
              size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
            else
              size = v6->__r_.__value_.__l.__size_;
            std::string::__assign_no_alias<false>(v9, v15, size);
          }
          else if ((*((_BYTE *)&v6->__r_.__value_.__s + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v9, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
          }
          else
          {
            v18 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
            v9->__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v18;
          }
        }
        ++v6;
        ++v9;
        v14 -= 24;
      }
      while (v14);
      v9 = a1[1];
    }
    v29 = v9;
    if (v13 == a3)
    {
LABEL_62:
      a1[1] = v29;
      return;
    }
    v29 = v9;
    v30 = v9;
    while (v30)
    {
      if (*((char *)v13 + 23) < 0)
      {
        v32 = *(const std::string::value_type **)v13;
        v33 = *((_QWORD *)v13 + 1);
        v13 = (__int128 *)((char *)v13 + 24);
        std::string::__init_copy_ctor_external(v30++, v32, v33);
        ++v29;
        if (v13 == a3)
          goto LABEL_62;
      }
      else
      {
        v31 = *v13;
        v30->__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
        ++v30;
        v13 = (__int128 *)((char *)v13 + 24);
        ++v29;
        if (v13 == a3)
          goto LABEL_62;
      }
    }
    __break(1u);
    goto LABEL_71;
  }
  if (a2 == a3)
  {
    v19 = *a1;
  }
  else
  {
    v19 = *a1;
    do
    {
      if (v6 != v9)
      {
        v22 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
        {
          if (v22 >= 0)
            v20 = (const std::string::value_type *)v6;
          else
            v20 = (const std::string::value_type *)v6->__r_.__value_.__r.__words[0];
          if (v22 >= 0)
            v21 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
          else
            v21 = v6->__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>(v9, v20, v21);
        }
        else if ((*((_BYTE *)&v6->__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v9, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
        }
        else
        {
          v23 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
          v9->__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v23;
        }
      }
      ++v6;
      ++v9;
      ++v19;
    }
    while (v6 != (std::string *)a3);
    v12 = a1[1];
  }
  while (v12 != v19)
  {
    if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12[-1].__r_.__value_.__l.__data_);
    --v12;
  }
  a1[1] = v19;
}

char *cricket::IceSwitchReasonToString@<X0>(char *result@<X0>, unint64_t a2@<X8>)
{
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  char v11;
  const char *v12;
  const char *v13;
  __int128 v14;
  const char *v15;
  const char *v16;

  switch((int)result)
  {
    case 1:
      result = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_208F08F30;
      v3 = result + 41;
      if (result <= "remote candidate generation maybe changed" && v3 > "remote candidate generation maybe changed")
        goto LABEL_39;
      qmemcpy(result, "remote candidate generation maybe changed", 41);
      *v3 = 0;
      return result;
    case 2:
      result = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_208F0AC80;
      v5 = result + 26;
      if (result <= "network preference changed" && v5 > "network preference changed")
        goto LABEL_39;
      qmemcpy(result, "network preference changed", 26);
      *v5 = 0;
      return result;
    case 3:
      result = (char *)operator new(0x38uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_208F0AC70;
      v6 = result + 54;
      if (result <= "new candidate pairs created from a new local candidate"
        && v6 > "new candidate pairs created from a new local candidate")
      {
        goto LABEL_39;
      }
      qmemcpy(result, "new candidate pairs created from a new local candidate", 54);
      *v6 = 0;
      return result;
    case 4:
      result = (char *)operator new(0x38uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_208F0AC60;
      v7 = result + 55;
      if (result <= "new candidate pairs created from a new remote candidate"
        && v7 > "new candidate pairs created from a new remote candidate")
      {
        goto LABEL_39;
      }
      qmemcpy(result, "new candidate pairs created from a new remote candidate", 55);
      *v7 = 0;
      return result;
    case 5:
      result = (char *)operator new(0x40uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_208F0ABB0;
      v8 = result + 59;
      if (result <= "a new candidate pair created from an unknown remote address"
        && v8 > "a new candidate pair created from an unknown remote address")
      {
        goto LABEL_39;
      }
      qmemcpy(result, "a new candidate pair created from an unknown remote address", 59);
      *v8 = 0;
      return result;
    case 6:
      result = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_208F0AC50;
      v9 = result + 33;
      v10 = "nomination on the controlled side";
      if (result <= "nomination on the controlled side" && v9 > "nomination on the controlled side")
        goto LABEL_39;
      v11 = 101;
      goto LABEL_32;
    case 7:
      *(_BYTE *)(a2 + 23) = 13;
      v12 = (const char *)(a2 + 13);
      if (a2 <= (unint64_t)"data received" && v12 > "data received")
        goto LABEL_39;
      qmemcpy((void *)a2, "data received", 13);
      *v12 = 0;
      break;
    case 8:
      result = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_208F05180;
      v13 = result + 28;
      if (result <= "candidate pair state changed" && v13 > "candidate pair state changed")
        goto LABEL_39;
      qmemcpy(result, "candidate pair state changed", 28);
      *v13 = 0;
      break;
    case 9:
      result = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_208F0AC50;
      v9 = result + 33;
      v10 = "selected candidate pair destroyed";
      if (result <= "selected candidate pair destroyed" && v9 > "selected candidate pair destroyed")
        goto LABEL_39;
      v11 = 100;
LABEL_32:
      result[32] = v11;
      v14 = *((_OWORD *)v10 + 1);
      *(_OWORD *)result = *(_OWORD *)v10;
      *((_OWORD *)result + 1) = v14;
      *v9 = 0;
      break;
    case 10:
      result = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_208F05710;
      v15 = result + 30;
      if (result <= "ice-controller-request-recheck" && v15 > "ice-controller-request-recheck")
        goto LABEL_39;
      qmemcpy(result, "ice-controller-request-recheck", 30);
      *v15 = 0;
      break;
    case 11:
      *(_BYTE *)(a2 + 23) = 21;
      v16 = (const char *)(a2 + 21);
      if (a2 <= (unint64_t)"application requested" && v16 > "application requested")
        goto LABEL_39;
      qmemcpy((void *)a2, "application requested", 21);
      *v16 = 0;
      break;
    default:
      *(_BYTE *)(a2 + 23) = 7;
      v4 = (const char *)(a2 + 7);
      if (a2 <= (unint64_t)"unknown" && v4 > "unknown")
      {
LABEL_39:
        __break(1u);
      }
      else
      {
        *(_DWORD *)(a2 + 3) = 1853321070;
        *(_DWORD *)a2 = 1852534389;
        *v4 = 0;
      }
      break;
  }
  return result;
}

uint64_t webrtc::IceTransportWithPointer::internal(webrtc::IceTransportWithPointer *this)
{
  return *((_QWORD *)this + 2);
}

char *cricket::VerifyCandidate@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v16;
  int v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;

  v4 = *((_QWORD *)this + 11);
  if (this[103] >= 0)
    v4 = this[103];
  v5 = *((_DWORD *)this + 28);
  v6 = *((unsigned __int16 *)this + 68);
  if (v4)
    v7 = 0;
  else
    v7 = v5 == 0;
  if (v7 && v6 == 0)
    goto LABEL_21;
  if (v5 != 2)
  {
    if (v5 != 30)
      goto LABEL_26;
    if ((*(_QWORD *)(this + 116) != *MEMORY[0x24BDAE878]
       || *(_QWORD *)(this + 124) != *(_QWORD *)(MEMORY[0x24BDAE878] + 8))
      && (*(_QWORD *)(this + 116) != (_QWORD)rtc::kV4MappedPrefix
       || *(_QWORD *)(this + 124) != *((_QWORD *)&rtc::kV4MappedPrefix + 1)))
    {
      goto LABEL_26;
    }
LABEL_21:
    *(_DWORD *)a2 = 3;
    this = (char *)operator new(0x20uLL);
    *(_QWORD *)(a2 + 8) = this;
    *(_OWORD *)(a2 + 16) = xmmword_208F05190;
    if (this > "candidate has address of zero" || this + 29 <= "candidate has address of zero")
    {
      strcpy(this, "candidate has address of zero");
LABEL_24:
      *(_DWORD *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 36) = 0;
      *(_BYTE *)(a2 + 38) = 0;
      return this;
    }
    goto LABEL_86;
  }
  if (!*((_DWORD *)this + 29))
    goto LABEL_21;
LABEL_26:
  v11 = (unsigned __int16 *)(this + 32);
  if (this[55] < 0)
  {
    v12 = *((_QWORD *)this + 5);
    if (v12 < 0)
      goto LABEL_86;
    v11 = *(unsigned __int16 **)v11;
    if (v12)
    {
      if (!v11)
        goto LABEL_86;
    }
  }
  else
  {
    v12 = this[55];
  }
  if (v12 == 3)
  {
    v13 = *v11;
    v14 = *((unsigned __int8 *)v11 + 2);
    if (v13 == (unsigned __int16)cricket::TCP_PROTOCOL_NAME && v14 == 112)
    {
      v18 = this + 352;
      if (this[375] < 0)
      {
        v19 = *((_QWORD *)this + 45);
        if (v19 < 0)
          goto LABEL_86;
        v18 = *(char **)v18;
        if (v19)
        {
          if (!v18)
            goto LABEL_86;
        }
      }
      else
      {
        v19 = this[375];
      }
      if (v19 == 6)
      {
        v22 = *(_DWORD *)v18;
        v23 = *((unsigned __int16 *)v18 + 2);
        if (v22 == *(_DWORD *)"active" && v23 == *(unsigned __int16 *)"ve" || v6 == 0)
          goto LABEL_85;
      }
      else if (!*((_WORD *)this + 68))
      {
        goto LABEL_85;
      }
    }
  }
  if (v6 > 0x3FF)
    goto LABEL_85;
  if (v6 == 80 || v6 == 443)
  {
    if (v5 == 2)
    {
      v20 = *((_DWORD *)this + 29);
      if ((unsigned __int16)v20 == 65193)
        goto LABEL_65;
      if (*((_DWORD *)this + 29) == 127)
        goto LABEL_65;
      v21 = bswap32(v20);
      if (HIWORD(v21) == 49320 || (v21 & 0xFF000000) == 0xA000000 || (v21 & 0xFFF00000) == 0xAC100000)
        goto LABEL_65;
    }
    else
    {
      if (v5 == 30)
      {
        if ((*(_QWORD *)(this + 116) & 0xC0FFLL) == 0x80FE
          || (*(_QWORD *)(this + 116) == *MEMORY[0x24BDAE880]
            ? (v16 = *(_QWORD *)(this + 124) == *(_QWORD *)(MEMORY[0x24BDAE880] + 8))
            : (v16 = 0),
              v16 ? (v17 = 0) : (v17 = 1),
              *(_QWORD *)(this + 116) == 253 || !v17))
        {
LABEL_65:
          *(_DWORD *)a2 = 3;
          this = (char *)operator new(0x38uLL);
          *(_QWORD *)(a2 + 8) = this;
          *(_OWORD *)(a2 + 16) = xmmword_208F0AC60;
          if (this > "candidate has port of 80 or 443 with private IP address"
            || this + 55 <= "candidate has port of 80 or 443 with private IP address")
          {
            strcpy(this, "candidate has port of 80 or 443 with private IP address");
            goto LABEL_24;
          }
          goto LABEL_86;
        }
LABEL_85:
        *(_DWORD *)a2 = 0;
        *(_BYTE *)(a2 + 38) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 29) = 0;
        return this;
      }
      v20 = *((_DWORD *)this + 29);
    }
    if (v5 == 2 && (v20 & 0xC0FF) == 0x4064)
      goto LABEL_65;
    goto LABEL_85;
  }
  *(_DWORD *)a2 = 3;
  this = (char *)operator new(0x38uLL);
  *(_QWORD *)(a2 + 8) = this;
  *(_OWORD *)(a2 + 16) = xmmword_208F08650;
  if (this > "candidate has port below 1024, but not 80 or 443"
    || this + 48 <= "candidate has port below 1024, but not 80 or 443")
  {
    strcpy(this, "candidate has port below 1024, but not 80 or 443");
    goto LABEL_24;
  }
LABEL_86:
  __break(1u);
  return this;
}

double cricket::IceTransportInternal::IceTransportInternal(cricket::IceTransportInternal *this)
{
  double result;

  *((_QWORD *)this + 2) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *((_QWORD *)this + 3) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 7) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 8) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 9) = (char *)this + 72;
  *((_QWORD *)this + 10) = (char *)this + 72;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = (char *)this + 72;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 14) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 15) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 16) = (char *)this + 128;
  *((_QWORD *)this + 17) = (char *)this + 128;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = (char *)this + 128;
  *((_BYTE *)this + 160) = 0;
  *((_QWORD *)this + 21) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 22) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 23) = (char *)this + 184;
  *((_QWORD *)this + 24) = (char *)this + 184;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = (char *)this + 184;
  *((_BYTE *)this + 216) = 0;
  *((_QWORD *)this + 28) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 29) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 30) = (char *)this + 240;
  *((_QWORD *)this + 31) = (char *)this + 240;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = (char *)this + 240;
  *((_BYTE *)this + 272) = 0;
  *((_QWORD *)this + 35) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 36) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 37) = (char *)this + 296;
  *((_QWORD *)this + 38) = (char *)this + 296;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = (char *)this + 296;
  *((_BYTE *)this + 328) = 0;
  *((_BYTE *)this + 368) = 0;
  *((_QWORD *)this + 45) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_QWORD *)this + 49) = absl::internal_any_invocable::EmptyManager;
  *((_QWORD *)this + 50) = 0;
  *(_QWORD *)this = off_24C0B51D0;
  *((_QWORD *)this + 1) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *((_QWORD *)this + 51) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 52) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 53) = (char *)this + 424;
  *((_QWORD *)this + 54) = (char *)this + 424;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = (char *)this + 424;
  *((_BYTE *)this + 456) = 0;
  *((_QWORD *)this + 58) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 59) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 60) = (char *)this + 480;
  *((_QWORD *)this + 61) = (char *)this + 480;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = (char *)this + 480;
  *((_BYTE *)this + 512) = 0;
  *((_QWORD *)this + 65) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 66) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 67) = (char *)this + 536;
  *((_QWORD *)this + 68) = (char *)this + 536;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 70) = (char *)this + 536;
  *((_BYTE *)this + 568) = 0;
  *((_QWORD *)this + 72) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 73) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 74) = (char *)this + 592;
  *((_QWORD *)this + 75) = (char *)this + 592;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 77) = (char *)this + 592;
  *((_BYTE *)this + 624) = 0;
  *((_QWORD *)this + 79) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 80) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 81) = (char *)this + 648;
  *((_QWORD *)this + 82) = (char *)this + 648;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 84) = (char *)this + 648;
  *((_BYTE *)this + 680) = 0;
  *((_QWORD *)this + 86) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 87) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 88) = (char *)this + 704;
  *((_QWORD *)this + 89) = (char *)this + 704;
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 91) = (char *)this + 704;
  *((_BYTE *)this + 736) = 0;
  *((_BYTE *)this + 768) = 0;
  *((_QWORD *)this + 95) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_QWORD *)this + 99) = 0;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_BYTE *)this + 800) = 0;
  *((_QWORD *)this + 103) = 0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *((_BYTE *)this + 832) = 0;
  *((_QWORD *)this + 107) = absl::internal_any_invocable::EmptyManager;
  *((_QWORD *)this + 108) = 0;
  *((_QWORD *)this + 111) = absl::internal_any_invocable::EmptyManager;
  *((_QWORD *)this + 112) = 0;
  *((_QWORD *)this + 115) = absl::internal_any_invocable::EmptyManager;
  *((_QWORD *)this + 116) = 0;
  return result;
}

void cricket::IceTransportInternal::~IceTransportInternal(void (**this)(uint64_t, char *, char *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, char *, char *);
  void (*v7)(uint64_t, char *, char *);
  void (*v8)(uint64_t, char *, char *);
  void (*v9)(char *);
  void (*v10)(uint64_t, char *, char *);
  void (*v11)(uint64_t, char *, char *);
  void (*v12)(uint64_t, char *, char *);
  void (*v13)(char *);
  void (*v14)(uint64_t, char *, char *);
  void (*v15)(uint64_t, char *, char *);
  void (*v16)(uint64_t, char *, char *);
  void (*v17)(char *);
  void (*i)(uint64_t, char *, char *);
  void (*v19)(uint64_t, char *, char *);
  uint64_t v20;
  uint64_t v21;
  void (*j)(uint64_t, char *, char *);
  void (*v23)(uint64_t, char *, char *);
  uint64_t v24;
  uint64_t v25;
  void (*k)(uint64_t, char *, char *);
  void (*v27)(uint64_t, char *, char *);
  uint64_t v28;
  uint64_t v29;
  void (*m)(uint64_t, char *, char *);
  void (*v31)(uint64_t, char *, char *);
  uint64_t v32;
  uint64_t v33;
  void (*n)(uint64_t, char *, char *);
  void (*v35)(uint64_t, char *, char *);
  uint64_t v36;
  uint64_t v37;
  void (*ii)(uint64_t, char *, char *);
  void (*v39)(uint64_t, char *, char *);
  uint64_t v40;
  uint64_t v41;
  std::string *v42;
  uint64_t v43;

  *this = (void (*)(uint64_t, char *, char *))off_24C0B51D0;
  this[115](1, (char *)this + 904, (char *)this + 904);
  this[111](1, (char *)this + 872, (char *)this + 872);
  this[107](1, (char *)this + 840, (char *)this + 840);
  if (*((_BYTE *)this + 832))
    goto LABEL_41;
  v6 = this[101];
  if (v6)
  {
    v7 = this[102];
    v8 = this[101];
    if (v7 != v6)
    {
      do
      {
        v9 = (void (*)(char *))*((_QWORD *)v7 - 1);
        if (v9)
          v9((char *)v7 - 48);
        v7 = (void (*)(uint64_t, char *, char *))((char *)v7 - 56);
      }
      while (v7 != v6);
      v8 = this[101];
    }
    this[102] = v6;
    operator delete(v8);
  }
  if (*((_BYTE *)this + 800))
    goto LABEL_41;
  v10 = this[97];
  if (v10)
  {
    v11 = this[98];
    v12 = this[97];
    if (v11 != v10)
    {
      do
      {
        v13 = (void (*)(char *))*((_QWORD *)v11 - 1);
        if (v13)
          v13((char *)v11 - 48);
        v11 = (void (*)(uint64_t, char *, char *))((char *)v11 - 56);
      }
      while (v11 != v10);
      v12 = this[97];
    }
    this[98] = v10;
    operator delete(v12);
  }
  if (*((_BYTE *)this + 768))
  {
LABEL_41:
    v42 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 21, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v2, v3, v4, v5, v43);
    cricket::IceTransportInternal::~IceTransportInternal((cricket::IceTransportInternal *)v42);
  }
  v14 = this[93];
  if (v14)
  {
    v15 = this[94];
    v16 = this[93];
    if (v15 != v14)
    {
      do
      {
        v17 = (void (*)(char *))*((_QWORD *)v15 - 1);
        if (v17)
          v17((char *)v15 - 48);
        v15 = (void (*)(uint64_t, char *, char *))((char *)v15 - 56);
      }
      while (v15 != v14);
      v16 = this[93];
    }
    this[94] = v14;
    operator delete(v16);
  }
  for (i = this[90]; i; i = this[90])
  {
    v19 = this[89];
    v20 = *((_QWORD *)v19 + 3);
    v21 = *(_QWORD *)v19;
    *(_QWORD *)(v21 + 8) = *((_QWORD *)v19 + 1);
    **((_QWORD **)v19 + 1) = v21;
    this[90] = (void (*)(uint64_t, char *, char *))((char *)i - 1);
    operator delete(v19);
    (*(void (**)(uint64_t, char *))(v20 + 16))(v20, (char *)this + 688);
  }
  this[91] = (void (*)(uint64_t, char *, char *))(this + 88);
  for (j = this[83]; j; j = this[83])
  {
    v23 = this[82];
    v24 = *((_QWORD *)v23 + 3);
    v25 = *(_QWORD *)v23;
    *(_QWORD *)(v25 + 8) = *((_QWORD *)v23 + 1);
    **((_QWORD **)v23 + 1) = v25;
    this[83] = (void (*)(uint64_t, char *, char *))((char *)j - 1);
    operator delete(v23);
    (*(void (**)(uint64_t, char *))(v24 + 16))(v24, (char *)this + 632);
  }
  this[84] = (void (*)(uint64_t, char *, char *))(this + 81);
  for (k = this[76]; k; k = this[76])
  {
    v27 = this[75];
    v28 = *((_QWORD *)v27 + 3);
    v29 = *(_QWORD *)v27;
    *(_QWORD *)(v29 + 8) = *((_QWORD *)v27 + 1);
    **((_QWORD **)v27 + 1) = v29;
    this[76] = (void (*)(uint64_t, char *, char *))((char *)k - 1);
    operator delete(v27);
    (*(void (**)(uint64_t, char *))(v28 + 16))(v28, (char *)this + 576);
  }
  this[77] = (void (*)(uint64_t, char *, char *))(this + 74);
  for (m = this[69]; m; m = this[69])
  {
    v31 = this[68];
    v32 = *((_QWORD *)v31 + 3);
    v33 = *(_QWORD *)v31;
    *(_QWORD *)(v33 + 8) = *((_QWORD *)v31 + 1);
    **((_QWORD **)v31 + 1) = v33;
    this[69] = (void (*)(uint64_t, char *, char *))((char *)m - 1);
    operator delete(v31);
    (*(void (**)(uint64_t, char *))(v32 + 16))(v32, (char *)this + 520);
  }
  this[70] = (void (*)(uint64_t, char *, char *))(this + 67);
  for (n = this[62]; n; n = this[62])
  {
    v35 = this[61];
    v36 = *((_QWORD *)v35 + 3);
    v37 = *(_QWORD *)v35;
    *(_QWORD *)(v37 + 8) = *((_QWORD *)v35 + 1);
    **((_QWORD **)v35 + 1) = v37;
    this[62] = (void (*)(uint64_t, char *, char *))((char *)n - 1);
    operator delete(v35);
    (*(void (**)(uint64_t, char *))(v36 + 16))(v36, (char *)this + 464);
  }
  this[63] = (void (*)(uint64_t, char *, char *))(this + 60);
  for (ii = this[55]; ii; ii = this[55])
  {
    v39 = this[54];
    v40 = *((_QWORD *)v39 + 3);
    v41 = *(_QWORD *)v39;
    *(_QWORD *)(v41 + 8) = *((_QWORD *)v39 + 1);
    **((_QWORD **)v39 + 1) = v41;
    this[55] = (void (*)(uint64_t, char *, char *))((char *)ii - 1);
    operator delete(v39);
    (*(void (**)(uint64_t, char *))(v40 + 16))(v40, (char *)this + 408);
  }
  this[56] = (void (*)(uint64_t, char *, char *))(this + 53);
  rtc::PacketTransportInternal::~PacketTransportInternal(this);
}

void cricket::IceTransportInternal::SetIceCredentials(uint64_t a1, _BYTE *a2, size_t a3, char *a4, size_t a5)
{
  void *v6[2];
  char v7;
  void *__p;
  char v9;

  cricket::IceParameters::IceParameters(v6, a2, a3, a4, a5, 0);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, v6);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v6[0]);
    return;
  }
  operator delete(__p);
  if (v7 < 0)
    goto LABEL_5;
}

void cricket::IceTransportInternal::SetRemoteIceCredentials(uint64_t a1, _BYTE *a2, size_t a3, char *a4, size_t a5)
{
  void *v6[2];
  char v7;
  void *__p;
  char v9;

  cricket::IceParameters::IceParameters(v6, a2, a3, a4, a5, 0);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, v6);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v6[0]);
    return;
  }
  operator delete(__p);
  if (v7 < 0)
    goto LABEL_5;
}

char *cricket::IceTransportInternal::AddGatheringStateCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[3];

  v5 = (char *)(a1 + 808);
  v6 = operator new();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a3 + 16))(0, a3, v6);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a3 + 24) = 0;
  v13[0] = v6;
  v13[1] = (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::IceTransportInternal *)>::CallVoidPtr<absl::AnyInvocable<void ()(cricket::IceTransportInternal *)>>;
  v13[2] = (uint64_t)webrtc::UntypedFunction::PrepareArgs<void ()(cricket::IceTransportInternal *),absl::AnyInvocable<void ()(cricket::IceTransportInternal *)>,absl::AnyInvocable<void ()(cricket::IceTransportInternal *)>,(void *)0>(absl::AnyInvocable<void ()(cricket::IceTransportInternal *)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke;
  return webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>(v5, a2, v13, v7, v8, v9, v10, v11);
}

void cricket::IceTransportInternal::RemoveGatheringStateCallback(cricket::IceTransportInternal *this, const void *a2)
{
  webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((cricket::IceTransportInternal *)((char *)this + 808), a2);
}

uint64_t cricket::IceTransportInternal::GetDictionaryWriter(cricket::IceTransportInternal *this)
{
  return 0;
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::IceTransportInternal *)>::CallVoidPtr<absl::AnyInvocable<void ()(cricket::IceTransportInternal *)>>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 24))();
}

void webrtc::UntypedFunction::PrepareArgs<void ()(cricket::IceTransportInternal *),absl::AnyInvocable<void ()(cricket::IceTransportInternal *)>,absl::AnyInvocable<void ()(cricket::IceTransportInternal *)>,(void *)0>(absl::AnyInvocable<void ()(cricket::IceTransportInternal *)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke(_QWORD *a1)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*a1 + 16))(1, *a1, *a1);
  JUMPOUT(0x20BD0ADECLL);
}

_DWORD *dcsctp::IDataChunk::Parse@<X0>(_DWORD *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  char v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  size_t v21;
  char *v22;
  char *v23;
  void *__src;
  __int16 v25;
  char v26;
  unsigned int v27;

  if (a2)
    v4 = result;
  else
    v4 = 0;
  if (a2 < 0x14
    || *(_BYTE *)v4 != 64
    || ((v5 = __rev16(*((unsigned __int16 *)v4 + 1)), v5 >= 0x14) ? (v6 = a2 >= v5) : (v6 = 0),
        v6 ? (v7 = a2 - v5 >= 4) : (v7 = 1),
        v7))
  {
    v8 = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    v9 = *((unsigned __int8 *)v4 + 1);
    v10 = bswap32(v4[1]);
    v11 = bswap32(*((unsigned __int16 *)v4 + 4)) >> 16;
    v12 = v9 << 30;
    v13 = bswap32(v4[3]);
    v14 = (v9 >> 1) & 1;
    v15 = bswap32(v4[4]);
    v16 = v9 & 1;
    v17 = (v9 >> 2) & 1;
    v18 = (v9 >> 3) & 1;
    v19 = v15 & (v12 >> 31);
    if (v14)
      v20 = 0;
    else
      v20 = v15;
    if (v5 < 0x15)
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      v21 = v5 - 20;
      __src = v4 + 5;
      v26 = v18;
      v27 = v10;
      v25 = v11;
      v22 = (char *)operator new(v5 - 20);
      v23 = &v22[v21];
      result = memcpy(v22, __src, v21);
      LOWORD(v11) = v25;
      LOBYTE(v18) = v26;
      v10 = v27;
    }
    *(_DWORD *)(a3 + 8) = v10;
    *(_WORD *)(a3 + 16) = v11;
    *(_WORD *)(a3 + 18) = 0;
    *(_DWORD *)(a3 + 20) = v13;
    *(_DWORD *)(a3 + 24) = v20;
    *(_DWORD *)(a3 + 28) = v19;
    *(_QWORD *)(a3 + 32) = v22;
    *(_QWORD *)(a3 + 40) = v23;
    *(_QWORD *)(a3 + 48) = v23;
    *(_BYTE *)(a3 + 56) = v14;
    *(_BYTE *)(a3 + 57) = v16;
    *(_BYTE *)(a3 + 58) = v17;
    *(_BYTE *)(a3 + 64) = v18;
    v8 = 1;
    *(_QWORD *)a3 = &off_24C0B52E0;
  }
  *(_BYTE *)(a3 + 72) = v8;
  return result;
}

void dcsctp::IDataChunk::~IDataChunk(dcsctp::IDataChunk *this)
{
  void *v2;

  *(_QWORD *)this = &unk_24C0B1318;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &unk_24C0B1318;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::IDataChunk::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const void *v19;
  size_t v20;
  std::string *v21;
  uint64_t v22;

  v10 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v13 = v10 + 20;
  v14 = v12 + v10 + 20;
  if (v12 >= v14)
  {
    if (v12 > v14)
      *(_QWORD *)(a2 + 8) = &v11[v14];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v10 + 20);
    v11 = *(char **)a2;
  }
  v15 = &v11[v12];
  *v15 = 64;
  v15[2] = HIBYTE(v13);
  v15[3] = v13;
  if (v10 >= 0xFFFFFFFFFFFFFFECLL)
  {
    v21 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v22);
    dcsctp::IDataChunk::ToString((dcsctp::IDataChunk *)v21);
  }
  else
  {
    v16 = *(_QWORD *)a2 + v12;
    *(_BYTE *)(v16 + 1) = *(_BYTE *)(a1 + 57) | (2 * (*(_BYTE *)(a1 + 56) != 0)) | (4 * (*(_BYTE *)(a1 + 58) != 0)) | (8 * (*(_BYTE *)(a1 + 64) != 0));
    *(_DWORD *)(v16 + 4) = bswap32(*(_DWORD *)(a1 + 8));
    *(_WORD *)(v16 + 8) = bswap32(*(unsigned __int16 *)(a1 + 16)) >> 16;
    *(_DWORD *)(v16 + 12) = bswap32(*(_DWORD *)(a1 + 20));
    v17 = 28;
    if (!*(_BYTE *)(a1 + 56))
      v17 = 24;
    *(_DWORD *)(v16 + 16) = bswap32(*(_DWORD *)(a1 + v17));
    v18 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
    if (v18)
      v19 = *(const void **)(a1 + 32);
    else
      v19 = 0;
    if (v10 >= v18)
      v20 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
    else
      v20 = v10;
    if (v19)
    {
      if (v20)
        memcpy((void *)(v16 + 20), v19, v20);
    }
  }
}

void dcsctp::IDataChunk::ToString(dcsctp::IDataChunk *this@<X0>, std::string *a2@<X8>)
{
  char *v5;
  size_t v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type size;
  _WORD *v10;
  std::string::size_type v11;
  const char *v12;
  const char *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string *v19;
  char *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string *v24;
  char *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string *v28;
  int v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  std::string::size_type v34;
  std::string *v35;
  std::string *v36;
  int v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  unint64_t v45;
  int *v46;
  std::string *v47;
  _DWORD *v48;
  std::string::size_type v49;
  std::string *v50;
  char *v51;
  std::string::size_type v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string *v55;
  char *v56;
  std::string::size_type v57;
  std::string v58;

  memset(&v58, 0, sizeof(v58));
  if (&v58 <= (std::string *)"I-DATA, type=" && (char *)&v58.__r_.__value_.__r.__words[1] + 5 > "I-DATA, type=")
    goto LABEL_151;
  strcpy((char *)&v58, "I-DATA, type=");
  *((_BYTE *)&v58.__r_.__value_.__s + 23) = 13;
  v5 = *((_BYTE *)this + 58) ? "unordered" : "ordered";
  v6 = *((_BYTE *)this + 58) ? 9 : 7;
  if ((char *)&v58.__r_.__value_.__r.__words[1] + 5 <= v5 && (char *)&v58.__r_.__value_.__r.__words[1] + v6 + 5 > v5)
    goto LABEL_151;
  memcpy((char *)&v58.__r_.__value_.__r.__words[1] + 5, v5, v6);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    v58.__r_.__value_.__l.__size_ = v6 + 13;
  else
    *((_BYTE *)&v58.__r_.__value_.__s + 23) = v6 + 13;
  v7 = (uint64_t)&v58;
  v58.__r_.__value_.__s.__data_[v6 + 13] = 0;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = 22;
  else
    v8 = (v58.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    size = v58.__r_.__value_.__l.__size_;
  if (v8 - size >= 2)
  {
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = 0x202C415441442D49;
    v10 = (_WORD *)(v7 + size);
    if (v7 + size <= (unint64_t)"::" && v10 + 1 > (_WORD *)"::")
      goto LABEL_151;
    *v10 = 14906;
    v11 = size + 2;
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      v58.__r_.__value_.__l.__size_ = size + 2;
    else
      *((_BYTE *)&v58.__r_.__value_.__s + 23) = v11 & 0x7F;
    *(_BYTE *)(v7 + v11) = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v58, v8, size - v8 + 2, size, size, 0, 2uLL, "::");
  }
  v12 = "last";
  v13 = "complete";
  if (!*((_BYTE *)this + 57))
  {
    v12 = "middle";
    v13 = "first";
  }
  if (*((_BYTE *)this + 56))
    v14 = v13;
  else
    v14 = v12;
  v15 = strlen(v14);
  v16 = v15;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = 22;
  else
    v17 = (v58.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    v18 = v58.__r_.__value_.__l.__size_;
  if (v17 - v18 >= v15)
  {
    if (v15)
    {
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v58;
      else
        v19 = (std::string *)v58.__r_.__value_.__r.__words[0];
      v20 = (char *)v19 + v18;
      if ((char *)v19 + v18 <= v14 && &v20[v16] > v14)
        goto LABEL_151;
      memcpy(v20, v14, v16);
      v21 = v18 + v16;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        v58.__r_.__value_.__l.__size_ = v18 + v16;
      else
        *((_BYTE *)&v58.__r_.__value_.__s + 23) = v21 & 0x7F;
      v19->__r_.__value_.__s.__data_[v21] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v58, v17, v18 + v15 - v17, v18, v18, 0, v15, v14);
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = 22;
  else
    v22 = (v58.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    v23 = v58.__r_.__value_.__l.__size_;
  if (v22 - v23 >= 6)
  {
    v24 = &v58;
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v58.__r_.__value_.__r.__words[0];
    v25 = (char *)v24 + v23;
    if ((char *)v24 + v23 <= ", tsn=" && v25 + 6 > ", tsn=")
      goto LABEL_151;
    *((_WORD *)v25 + 2) = 15726;
    *(_DWORD *)v25 = 1936990252;
    v26 = v23 + 6;
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      v58.__r_.__value_.__l.__size_ = v23 + 6;
    else
      *((_BYTE *)&v58.__r_.__value_.__s + 23) = v26 & 0x7F;
    v24->__r_.__value_.__s.__data_[v26] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v58, v22, v23 - v22 + 6, v23, v23, 0, 6uLL, ", tsn=");
  }
  v27 = rtc::StringBuilder::operator<<(&v58, *((_DWORD *)this + 2));
  v28 = v27;
  v29 = SHIBYTE(v27->__r_.__value_.__r.__words[2]);
  if (v29 >= 0)
    v30 = 22;
  else
    v30 = (v27->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v29 >= 0)
    v31 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
  else
    v31 = v27->__r_.__value_.__l.__size_;
  if (v30 - v31 >= 0xC)
  {
    if (v29 >= 0)
      v32 = v27;
    else
      v32 = (std::string *)v27->__r_.__value_.__r.__words[0];
    v33 = (std::string::size_type)v32 + v31;
    if ((char *)v32 + v31 <= ", stream_id=" && v33 + 12 > (unint64_t)", stream_id=")
      goto LABEL_151;
    *(_DWORD *)(v33 + 8) = 1029990751;
    *(_QWORD *)v33 = *(_QWORD *)", stream_id=";
    v34 = v31 + 12;
    if (SHIBYTE(v27->__r_.__value_.__r.__words[2]) < 0)
      v27->__r_.__value_.__l.__size_ = v34;
    else
      *((_BYTE *)&v27->__r_.__value_.__s + 23) = v34 & 0x7F;
    v32->__r_.__value_.__s.__data_[v34] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(v27, v30, v31 - v30 + 12, v31, v31, 0, 0xCuLL, ", stream_id=");
  }
  v35 = rtc::StringBuilder::operator<<(v28, *((unsigned __int16 *)this + 8));
  v36 = v35;
  v37 = SHIBYTE(v35->__r_.__value_.__r.__words[2]);
  if (v37 >= 0)
    v38 = 22;
  else
    v38 = (v35->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v37 >= 0)
    v39 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
  else
    v39 = v35->__r_.__value_.__l.__size_;
  if (v38 - v39 >= 6)
  {
    if (v37 >= 0)
      v40 = v35;
    else
      v40 = (std::string *)v35->__r_.__value_.__r.__words[0];
    v41 = (std::string::size_type)v40 + v39;
    if ((char *)v40 + v39 <= ", mid=" && v41 + 6 > (unint64_t)", mid=")
      goto LABEL_151;
    *(_WORD *)(v41 + 4) = 15716;
    *(_DWORD *)v41 = 1768759340;
    v42 = v39 + 6;
    if (SHIBYTE(v35->__r_.__value_.__r.__words[2]) < 0)
      v35->__r_.__value_.__l.__size_ = v42;
    else
      *((_BYTE *)&v35->__r_.__value_.__s + 23) = v42 & 0x7F;
    v40->__r_.__value_.__s.__data_[v42] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(v35, v38, v39 - v38 + 6, v39, v39, 0, 6uLL, ", mid=");
  }
  rtc::StringBuilder::operator<<(v36, *((_DWORD *)this + 5));
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = 22;
  else
    v43 = (v58.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    v44 = v58.__r_.__value_.__l.__size_;
  v45 = v43 - v44;
  if (*((_BYTE *)this + 56))
  {
    if (v45 >= 7)
    {
      v47 = &v58;
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = (std::string *)v58.__r_.__value_.__r.__words[0];
      v48 = (_DWORD *)((char *)v47 + v44);
      if ((char *)v47 + v44 <= ", ppid=" && (char *)v48 + 7 > ", ppid=")
        goto LABEL_151;
      *(_DWORD *)((char *)v48 + 3) = 1029990768;
      *v48 = 1886396460;
      v49 = v44 + 7;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        v58.__r_.__value_.__l.__size_ = v44 + 7;
      else
        *((_BYTE *)&v58.__r_.__value_.__s + 23) = v49 & 0x7F;
      v47->__r_.__value_.__s.__data_[v49] = 0;
      v46 = (int *)((char *)this + 28);
    }
    else
    {
      std::string::__grow_by_and_replace(&v58, v43, v44 - v43 + 7, v44, v44, 0, 7uLL, ", ppid=");
      v46 = (int *)((char *)this + 28);
    }
  }
  else
  {
    if (v45 >= 6)
    {
      v50 = &v58;
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v50 = (std::string *)v58.__r_.__value_.__r.__words[0];
      v51 = (char *)v50 + v44;
      if ((char *)v50 + v44 <= ", fsn=" && v51 + 6 > ", fsn=")
        goto LABEL_151;
      *((_WORD *)v51 + 2) = 15726;
      *(_DWORD *)v51 = 1936072748;
      v52 = v44 + 6;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        v58.__r_.__value_.__l.__size_ = v44 + 6;
      else
        *((_BYTE *)&v58.__r_.__value_.__s + 23) = v52 & 0x7F;
      v50->__r_.__value_.__s.__data_[v52] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v58, v43, v44 - v43 + 6, v44, v44, 0, 6uLL, ", fsn=");
    }
    v46 = (int *)((char *)this + 24);
  }
  rtc::StringBuilder::operator<<(&v58, *v46);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = 22;
  else
    v53 = (v58.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    v54 = v58.__r_.__value_.__l.__size_;
  if (v53 - v54 < 9)
  {
    std::string::__grow_by_and_replace(&v58, v53, v54 - v53 + 9, v54, v54, 0, 9uLL, ", length=");
LABEL_150:
    rtc::StringBuilder::operator<<(&v58, *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
    *a2 = v58;
    return;
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &v58;
  else
    v55 = (std::string *)v58.__r_.__value_.__r.__words[0];
  v56 = (char *)v55 + v54;
  if ((char *)v55 + v54 > ", length=" || v56 + 9 <= ", length=")
  {
    v56[8] = 61;
    *(_QWORD *)v56 = *(_QWORD *)", length=";
    v57 = v54 + 9;
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      v58.__r_.__value_.__l.__size_ = v54 + 9;
    else
      *((_BYTE *)&v58.__r_.__value_.__s + 23) = v57 & 0x7F;
    v55->__r_.__value_.__s.__data_[v57] = 0;
    goto LABEL_150;
  }
LABEL_151:
  __break(1u);
}

uint64_t rtc::IfAddrsConverter::ConvertIfAddrsToIPAddress(rtc::IfAddrsConverter *this, const ifaddrs *a2, rtc::InterfaceAddress *a3, rtc::IPAddress *a4)
{
  sockaddr *ifa_addr;
  int sa_family;
  int v9;
  int v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  _DWORD v14[11];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  ifa_addr = a2->ifa_addr;
  sa_family = ifa_addr->sa_family;
  if (sa_family == 30)
  {
    v14[0] = 0;
    result = (*(uint64_t (**)(rtc::IfAddrsConverter *, const ifaddrs *, _DWORD *))(*(_QWORD *)this + 24))(this, a2, v14);
    if ((_DWORD)result)
    {
      v12 = *(_OWORD *)&a2->ifa_addr->sa_data[6];
      *((_DWORD *)a3 + 7) = v14[0];
      *((_DWORD *)a3 + 2) = 30;
      *(_OWORD *)((char *)a3 + 12) = v12;
      v13 = *(_OWORD *)&a2->ifa_netmask->sa_data[6];
      *((_DWORD *)a4 + 2) = 30;
      *(_OWORD *)((char *)a4 + 12) = v13;
    }
  }
  else if (sa_family == 2)
  {
    v9 = *(_DWORD *)&ifa_addr->sa_data[2];
    *((_DWORD *)a3 + 2) = 2;
    *((_DWORD *)a3 + 3) = v9;
    *((_QWORD *)a3 + 2) = 0;
    *((_QWORD *)a3 + 3) = 0;
    v10 = *(_DWORD *)&a2->ifa_netmask->sa_data[2];
    *((_DWORD *)a4 + 2) = 2;
    *((_DWORD *)a4 + 3) = v10;
    *((_QWORD *)a4 + 2) = 0;
    *((_DWORD *)a4 + 6) = 0;
    return 1;
  }
  else
  {
    return 0;
  }
  return result;
}

void rtc::InterfaceAddress::~InterfaceAddress(rtc::InterfaceAddress *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::IForwardTsnChunk::Parse(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 *v3;
  int v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  char v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *i;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  _BYTE *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;

  if (a2)
    v3 = a1;
  else
    v3 = 0;
  if (a2 < 8
    || *v3 != 194
    || ((v4 = v3[3], v5 = v4 | (v3[2] << 8), (v4 & 7) == 0) ? (v6 = v5 >= 8) : (v6 = 0),
        v6 ? (v7 = a2 >= v5) : (v7 = 0),
        v7 ? (v8 = a2 - v5 >= 4) : (v8 = 1),
        v8))
  {
    v9 = 0;
    *a3 = 0;
  }
  else
  {
    v38 = a3;
    v37 = *((_DWORD *)v3 + 1);
    v10 = v5 - 8;
    if (v5 - 8 >= 8)
    {
      v14 = v10 >> 3;
      v15 = 12 * (v10 >> 3);
      v16 = (char *)operator new(v15);
      v13 = v16;
      v21 = 0;
      v22 = 0;
      v11 = &v16[v15];
      if (v14 <= 1)
        v23 = 1;
      else
        v23 = v14;
      v24 = (v5 - 1) >> 3;
      v12 = v16;
      v40 = v23;
      v41 = v5;
      v39 = v24;
      while (1)
      {
        if (v22 + 16 > v5)
          goto LABEL_46;
        if (v21 == v24)
          break;
        v22 += 8;
        v25 = v5 - v22;
        if (v5 - v22 >= 8)
          v25 = 8;
        if (v25 <= 7)
          break;
        v26 = bswap32(*(unsigned __int16 *)&v3[v22]) >> 16;
        v27 = v3[v22 + 3] & 1;
        v28 = bswap32(*(_DWORD *)&v3[v22 + 4]);
        if (v12 < v11)
        {
          *(_WORD *)v12 = v26;
          *((_WORD *)v12 + 1) = 0;
          v12[4] = v27;
          *((_DWORD *)v12 + 2) = v28;
          v12 += 12;
          if (++v21 == v23)
            goto LABEL_44;
        }
        else
        {
          v29 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 2) + 1;
          if (v29 > 0x1555555555555555)
            goto LABEL_47;
          if (0x5555555555555556 * ((v11 - v13) >> 2) > v29)
            v29 = 0x5555555555555556 * ((v11 - v13) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v11 - v13) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v29 = 0x1555555555555555;
          if (!v29)
          {
            __break(1u);
LABEL_49:
            std::__throw_bad_array_new_length[abi:sn180100]();
          }
          if (v29 > 0x1555555555555555)
            goto LABEL_49;
          v30 = 12 * v29;
          v31 = (char *)operator new(12 * v29);
          v32 = &v31[4 * ((v12 - v13) >> 2)];
          *(_WORD *)v32 = v26;
          *((_WORD *)v32 + 1) = 0;
          v32[4] = v27;
          *((_DWORD *)v32 + 2) = v28;
          for (i = v32; v12 != v13; *((_DWORD *)i + 2) = v35)
          {
            v34 = *(_QWORD *)(v12 - 12);
            v12 -= 12;
            v35 = *((_DWORD *)v12 + 2);
            *(_QWORD *)(i - 12) = v34;
            i -= 12;
          }
          v11 = &v31[v30];
          v12 = v32 + 12;
          v5 = v41;
          if (v13)
            operator delete(v13);
          v13 = i;
          v24 = v39;
          v23 = v40;
          if (++v21 == v40)
            goto LABEL_44;
        }
      }
      rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 55, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v17, v18, v19, v20, v36);
LABEL_46:
      rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 80, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v17, v18, v19, v20, v36);
LABEL_47:
      abort();
    }
    v11 = 0;
    v12 = 0;
    v13 = 0;
LABEL_44:
    a3 = v38;
    *((_DWORD *)v38 + 2) = bswap32(v37);
    *((_QWORD *)v38 + 2) = v13;
    *((_QWORD *)v38 + 3) = v12;
    *((_QWORD *)v38 + 4) = v11;
    *(_QWORD *)v38 = &off_24C0B5330;
    v9 = 1;
  }
  a3[40] = v9;
}

void dcsctp::IForwardTsnChunk::~IForwardTsnChunk(dcsctp::IForwardTsnChunk *this)
{
  void *v2;

  *(_QWORD *)this = &unk_24C0B1348;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &unk_24C0B1348;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::IForwardTsnChunk::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  std::string *v28;
  uint64_t v29;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v13 = v11 - v10;
  v12 = v11 == v10;
  v14 = (unsigned __int128)((v11 - v10) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v15 = (v14 >> 1) + ((unint64_t)v14 >> 63);
  if (v12)
    v16 = 0;
  else
    v16 = *(_QWORD *)(a1 + 16);
  v17 = *(char **)a2;
  v18 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v19 = 8 * v15 + 8;
  if (v18 >= v19 + v18)
  {
    if (v18 > v19 + v18)
      *(_QWORD *)(a2 + 8) = &v17[v19 + v18];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 8 * v15 + 8);
    v17 = *(char **)a2;
  }
  v20 = &v17[v18];
  *v20 = -62;
  v20[2] = BYTE1(v19);
  v20[3] = v19;
  if (v13 == -12)
  {
LABEL_20:
    v28 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v29);
    dcsctp::IForwardTsnChunk::ToString((dcsctp::IForwardTsnChunk *)v28);
    return;
  }
  v21 = *(char **)a2;
  *(_DWORD *)(*(_QWORD *)a2 + v18 + 4) = bswap32(*(_DWORD *)(a1 + 8));
  if ((unint64_t)(v13 + 11) >= 0x17)
  {
    v22 = 0;
    if (v15 <= 1)
      v23 = 1;
    else
      v23 = v15;
    v24 = (unsigned int *)(v16 + 8);
    v25 = (uint64_t)&v21[v18 + 8];
    while (v22 + 16 <= v19)
    {
      if (8 * v15 == v22 || v19 <= v22 + 8)
        goto LABEL_20;
      v26 = v25 + v22;
      *(_WORD *)v26 = bswap32(*((unsigned __int16 *)v24 - 4)) >> 16;
      *(_BYTE *)(v26 + 3) = *((_BYTE *)v24 - 4);
      v27 = *v24;
      v24 += 3;
      *(_DWORD *)(v26 + 4) = bswap32(v27);
      v22 += 8;
      if (!--v23)
        return;
    }
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 84, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v29);
    goto LABEL_20;
  }
}

char *dcsctp::IForwardTsnChunk::ToString@<X0>(dcsctp::IForwardTsnChunk *this@<X0>, std::string *a2@<X8>)
{
  char *result;
  std::string v5;

  result = (char *)operator new(0x30uLL);
  if (result <= "I-FORWARD-TSN, new_cumulative_tsn=" && result + 34 > "I-FORWARD-TSN, new_cumulative_tsn=")
  {
    __break(1u);
  }
  else
  {
    strcpy(result, "I-FORWARD-TSN, new_cumulative_tsn=");
    v5.__r_.__value_.__r.__words[0] = (std::string::size_type)result;
    *(_OWORD *)&v5.__r_.__value_.__r.__words[1] = xmmword_208F0ACA0;
    result = (char *)rtc::StringBuilder::operator<<(&v5, *((_DWORD *)this + 2));
    *a2 = v5;
  }
  return result;
}

void dcsctp::IncomingSSNResetRequestParameter::Parse(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int16 *v3;
  int v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  char *v36;
  unint64_t v37;
  __int128 v38;
  __int16 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  unint64_t v45;

  if (a2)
    v3 = a1;
  else
    v3 = 0;
  if (a2 < 8
    || __rev16(*v3) != 14
    || (v4 = *((unsigned __int8 *)v3 + 3), (v4 & 1) != 0)
    || ((v5 = v4 | (*((unsigned __int8 *)v3 + 2) << 8), v5 >= 8) ? (v6 = a2 >= v5) : (v6 = 0),
        v6 ? (v7 = a2 - v5 >= 4) : (v7 = 1),
        v7))
  {
    v12 = 0;
    *a3 = 0;
    goto LABEL_17;
  }
  v43 = a3;
  HIDWORD(v42) = *((_DWORD *)v3 + 1);
  v8 = v5 - 8;
  if (v5 - 8 >= 2)
  {
    v13 = v8 >> 1;
    v11 = (char *)operator new(v8 & 0xFFFFFFFFFFFFFFFELL);
    v18 = 0;
    v19 = (v5 - 7) >> 1;
    v20 = v11;
    v9 = &v11[2 * v13];
    v44 = v19;
    v45 = v5;
    while (1)
    {
      while (1)
      {
        if (2 * v18 + 10 > v5)
          goto LABEL_52;
        if (v18 == v19)
          goto LABEL_51;
        v21 = 2 * v18 + 8;
        v22 = v5 - v21;
        if (v5 - v21 >= 2)
          v22 = 2;
        if (v22 <= 1)
        {
LABEL_51:
          rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 55, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v14, v15, v16, v17, v42);
LABEL_52:
          rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 80, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v14, v15, v16, v17, v42);
LABEL_53:
          abort();
        }
        v23 = bswap32(*(unsigned __int16 *)((char *)v3 + v21)) >> 16;
        if (v20 >= v9)
          break;
        *(_WORD *)v20 = v23;
        v20 += 2;
        v10 = v20;
        if (++v18 == v13)
          goto LABEL_50;
      }
      v24 = v20 - v11;
      if (v20 - v11 <= -3)
        goto LABEL_53;
      v25 = v24 >> 1;
      if (v9 - v11 <= (unint64_t)((v24 >> 1) + 1))
        v26 = v25 + 1;
      else
        v26 = v9 - v11;
      if ((unint64_t)(v9 - v11) >= 0x7FFFFFFFFFFFFFFELL)
        v26 = 0x7FFFFFFFFFFFFFFFLL;
      if (!v26)
      {
        __break(1u);
LABEL_55:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      if (v26 < 0)
        goto LABEL_55;
      v27 = 2 * v26;
      v28 = operator new(2 * v26);
      v29 = &v28[2 * v25];
      *(_WORD *)v29 = v23;
      v10 = v29 + 2;
      if (v20 != v11)
      {
        v30 = v20 - v11 - 2;
        if (v30 >= 0x5E)
        {
          v32 = (v20 - 2 - v11) & 0xFFFFFFFFFFFFFFFELL;
          if (&v28[(v24 & 0xFFFFFFFFFFFFFFFELL) - 2 - v32] > &v28[(v24 & 0xFFFFFFFFFFFFFFFELL) - 2])
          {
            v31 = v20;
          }
          else if (&v20[-v32 - 2] > v20 - 2)
          {
            v31 = v20;
          }
          else if ((unint64_t)(&v20[-(v24 & 0xFFFFFFFFFFFFFFFELL)] - v28) >= 0x20)
          {
            v33 = (v30 >> 1) + 1;
            v34 = 2 * (v33 & 0xFFFFFFFFFFFFFFF0);
            v31 = &v20[-v34];
            v29 -= v34;
            v35 = &v28[2 * v25 - 16];
            v36 = v20 - 16;
            v37 = v33 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v38 = *(_OWORD *)v36;
              *(v35 - 1) = *((_OWORD *)v36 - 1);
              *v35 = v38;
              v35 -= 2;
              v36 -= 32;
              v37 -= 16;
            }
            while (v37);
            if (v33 == (v33 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_47;
          }
          else
          {
            v31 = v20;
          }
        }
        else
        {
          v31 = v20;
        }
        do
        {
          v39 = *((_WORD *)v31 - 1);
          v31 -= 2;
          *((_WORD *)v29 - 1) = v39;
          v29 -= 2;
        }
        while (v31 != v11);
      }
LABEL_47:
      v9 = &v28[v27];
      if (v11)
      {
        v40 = v11;
        v41 = v10;
        operator delete(v40);
        v10 = v41;
      }
      v11 = v29;
      v19 = v44;
      v5 = v45;
      ++v18;
      v20 = v10;
      if (v18 == v13)
        goto LABEL_50;
    }
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
LABEL_50:
  a3 = v43;
  *(_QWORD *)v43 = &off_24C0B5360;
  *((_DWORD *)v43 + 2) = bswap32(HIDWORD(v42));
  *((_QWORD *)v43 + 2) = v11;
  *((_QWORD *)v43 + 3) = v10;
  *((_QWORD *)v43 + 4) = v9;
  v12 = 1;
LABEL_17:
  a3[40] = v12;
}

void dcsctp::IncomingSSNResetRequestParameter::~IncomingSSNResetRequestParameter(dcsctp::IncomingSSNResetRequestParameter *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0B5360;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0B5360;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::IncomingSSNResetRequestParameter::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  std::string *v20;
  uint64_t v21;

  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v13 = v10 + 8;
  v14 = v12 + v10 + 8;
  if (v12 >= v14)
  {
    if (v12 > v14)
      *(_QWORD *)(a2 + 8) = &v11[v14];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v10 + 8);
    v11 = *(char **)a2;
  }
  v15 = &v11[v12];
  *(_WORD *)v15 = 3584;
  v15[2] = BYTE1(v13);
  v15[3] = v13;
  if (v10 >= 0xFFFFFFFFFFFFFFF8)
  {
LABEL_14:
    v20 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v21);
    dcsctp::IncomingSSNResetRequestParameter::ToString((dcsctp::IncomingSSNResetRequestParameter *)v20);
    return;
  }
  v16 = *(_QWORD *)a2 + v12;
  *(_DWORD *)(v16 + 4) = bswap32(*(_DWORD *)(a1 + 8));
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 24) != v17)
  {
    v18 = 0;
    for (i = 8; i + 2 <= v13; i += 2)
    {
      if (v13 <= i || v10 <= 1)
        goto LABEL_14;
      *(_WORD *)(v16 + i) = bswap32(*(unsigned __int16 *)(v17 + 2 * v18++)) >> 16;
      v17 = *(_QWORD *)(a1 + 16);
      v10 -= 2;
      if (v18 >= (*(_QWORD *)(a1 + 24) - v17) >> 1)
        return;
    }
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 84, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v21);
    goto LABEL_14;
  }
}

char *dcsctp::IncomingSSNResetRequestParameter::ToString@<X0>(dcsctp::IncomingSSNResetRequestParameter *this@<X0>, std::string *a2@<X8>)
{
  char *result;
  std::string v5;

  result = (char *)operator new(0x30uLL);
  if (result <= "Incoming SSN Reset Request, req_seq_nbr=" && result + 40 > "Incoming SSN Reset Request, req_seq_nbr=")
  {
    __break(1u);
  }
  else
  {
    strcpy(result, "Incoming SSN Reset Request, req_seq_nbr=");
    v5.__r_.__value_.__r.__words[0] = (std::string::size_type)result;
    *(_OWORD *)&v5.__r_.__value_.__r.__words[1] = xmmword_208F086B0;
    result = (char *)rtc::StringBuilder::operator<<(&v5, *((_DWORD *)this + 2));
    *a2 = v5;
  }
  return result;
}

void webrtc::IncomingVideoStream::~IncomingVideoStream(webrtc::IncomingVideoStream *this)
{
  *(_QWORD *)this = &off_24C0B5390;
  (***((void (****)(_QWORD))this + 11))(*((_QWORD *)this + 11));
  *((_QWORD *)this + 11) = 0;
  webrtc::VideoRenderFrames::~VideoRenderFrames((webrtc::IncomingVideoStream *)((char *)this + 32));
}

{
  *(_QWORD *)this = &off_24C0B5390;
  (***((void (****)(_QWORD))this + 11))(*((_QWORD *)this + 11));
  *((_QWORD *)this + 11) = 0;
  webrtc::VideoRenderFrames::~VideoRenderFrames((webrtc::IncomingVideoStream *)((char *)this + 32));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::IncomingVideoStream::OnFrame(webrtc::IncomingVideoStream *this, const webrtc::VideoFrame *a2)
{
  _opaque_pthread_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  void (***v12)(_QWORD);
  __int128 v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t result;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  _QWORD v30[2];
  uint64_t (*v31)(uint64_t, uint64_t *, _QWORD *);
  void (*v32)(uint64_t ***);
  _BYTE v33[29];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = pthread_self();
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = v5 + 1;
  if (!v5)
    *((_QWORD *)this + 3) = v4;
  if (!pthread_equal(*((pthread_t *)this + 3), v4))
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/render/incoming_video_stream.cc", 46, "!race_checker46.RaceDetected()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v6, v7, v8, v9, v25);
  v10 = *((_QWORD *)this + 11);
  v11 = *(_WORD *)a2;
  v12 = (void (***)(_QWORD))*((_QWORD *)a2 + 1);
  if (v12)
    (**v12)(*((_QWORD *)a2 + 1));
  v13 = *((_OWORD *)a2 + 2);
  v38 = *((_OWORD *)a2 + 1);
  v39 = v13;
  v40[0] = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)v40 + 12) = *(_OWORD *)((char *)a2 + 60);
  v14 = *((unsigned __int8 *)a2 + 144);
  if (*((_BYTE *)a2 + 144))
  {
    v15 = *((_BYTE *)a2 + 76);
    v16 = *(_OWORD *)((char *)a2 + 93);
    v34 = *(_OWORD *)((char *)a2 + 77);
    v35 = v16;
    v17 = *(_OWORD *)((char *)a2 + 125);
    v36 = *(_OWORD *)((char *)a2 + 109);
    v37 = v17;
  }
  else
  {
    v15 = 0;
  }
  *(_OWORD *)v33 = *(_OWORD *)((char *)a2 + 148);
  *(_OWORD *)&v33[13] = *(_OWORD *)((char *)a2 + 161);
  v18 = (unsigned int *)*((_QWORD *)a2 + 23);
  if (v18)
  {
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v27 = *((_OWORD *)a2 + 12);
  v28 = *((_QWORD *)a2 + 26);
  v20 = operator new();
  *(_QWORD *)v20 = this;
  *(_WORD *)(v20 + 8) = v11;
  *(_QWORD *)(v20 + 16) = v12;
  v21 = v39;
  *(_OWORD *)(v20 + 24) = v38;
  *(_OWORD *)(v20 + 40) = v21;
  *(_OWORD *)(v20 + 56) = v40[0];
  *(_OWORD *)(v20 + 68) = *(_OWORD *)((char *)v40 + 12);
  *(_BYTE *)(v20 + 84) = 0;
  *(_BYTE *)(v20 + 152) = 0;
  if (v14)
  {
    *(_BYTE *)(v20 + 84) = v15;
    v22 = v35;
    *(_OWORD *)(v20 + 85) = v34;
    *(_OWORD *)(v20 + 101) = v22;
    v23 = v37;
    *(_OWORD *)(v20 + 117) = v36;
    *(_OWORD *)(v20 + 133) = v23;
    *(_BYTE *)(v20 + 152) = 1;
  }
  *(_OWORD *)(v20 + 156) = *(_OWORD *)v33;
  *(_OWORD *)(v20 + 169) = *(_OWORD *)&v33[13];
  *(_QWORD *)(v20 + 192) = v18;
  *(_OWORD *)(v20 + 200) = v27;
  *(_QWORD *)(v20 + 216) = v28;
  v30[0] = v20;
  v31 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::IncomingVideoStream::OnFrame(webrtc::VideoFrame const&)::$_0>;
  v32 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::IncomingVideoStream::OnFrame(webrtc::VideoFrame const&)::$_0 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v10 + 8))(v10, v30, &v29, &v26);
  result = v31(1, v30, v30);
  --*((_DWORD *)this + 4);
  return result;
}

void webrtc::IncomingVideoStream::Dequeue(webrtc::IncomingVideoStream *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  char v18;
  __n128 v19;
  __n128 (*v20)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v21)(webrtc::IncomingVideoStream **);
  char v22;

  webrtc::VideoRenderFrames::FrameToRender((webrtc::IncomingVideoStream *)((char *)this + 32), (uint64_t)v15);
  if (v18)
    (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10), v15);
  if (*((_QWORD *)this + 6))
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 48) / 1000;
    v3 = *((unsigned int *)this + 14);
    if (rtc::g_clock)
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v4 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
    }
    v5 = (v2 - v3 + v4 / -1000000) & ~((v2 - v3 + v4 / -1000000) >> 63);
    v6 = *((_QWORD *)this + 11);
    v22 = 1;
    v19.n128_u64[0] = (unint64_t)this;
    v20 = absl::internal_any_invocable::LocalManagerTrivial;
    v21 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::IncomingVideoStream::Dequeue(void)::$_1 &&>;
    (*(void (**)(uint64_t, __n128 *, uint64_t, char *, char *))(*(_QWORD *)v6 + 16))(v6, &v19, 1000 * v5, &v22, &v14);
    v20(1, &v19, &v19);
  }
  if (v18)
  {
    v7 = v17;
    if (v17)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        v10 = *(_QWORD *)(v7 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v7 + 16);
          v12 = *(void **)(v7 + 8);
          if (v11 != v10)
          {
            do
            {
              v13 = *(void **)(v11 - 96);
              if (v13)
              {
                *(_QWORD *)(v11 - 88) = v13;
                operator delete(v13);
              }
              v11 -= 104;
            }
            while (v11 != v10);
            v12 = *(void **)(v7 + 8);
          }
          *(_QWORD *)(v7 + 16) = v10;
          operator delete(v12);
        }
        MEMORY[0x20BD0ADEC](v7, 0x1020C40E72D6CFBLL);
      }
    }
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::IncomingVideoStream::OnFrame(webrtc::VideoFrame const&)::$_0 &&>(uint64_t ***a1)
{
  uint64_t *v1;

  v1 = **a1;
  if (webrtc::VideoRenderFrames::AddFrame(v1 + 4, (uint64_t)(*a1 + 1)) == 1)
    webrtc::IncomingVideoStream::Dequeue((webrtc::IncomingVideoStream *)v1);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::IncomingVideoStream::OnFrame(webrtc::VideoFrame const&)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 192);
      if (v4)
      {
        do
        {
          v5 = __ldaxr((unsigned int *)v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, (unsigned int *)v4));
        if (!v6)
        {
          v7 = *(_QWORD *)(v4 + 8);
          if (v7)
          {
            v8 = *(_QWORD *)(v4 + 16);
            v9 = *(void **)(v4 + 8);
            if (v8 != v7)
            {
              do
              {
                v10 = *(void **)(v8 - 96);
                if (v10)
                {
                  *(_QWORD *)(v8 - 88) = v10;
                  operator delete(v10);
                }
                v8 -= 104;
              }
              while (v8 != v7);
              v9 = *(void **)(v4 + 8);
            }
            *(_QWORD *)(v4 + 16) = v7;
            operator delete(v9);
          }
          MEMORY[0x20BD0ADEC](v4, 0x1020C40E72D6CFBLL);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::IncomingVideoStream::Dequeue(void)::$_1 &&>(webrtc::IncomingVideoStream **a1)
{
  return webrtc::IncomingVideoStream::Dequeue(*a1);
}

uint64_t dcsctp::InitAckChunk::Parse@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  int v21;
  int v22;
  unsigned __int16 *v23;
  int v24;
  size_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unint64_t v28;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;

  if (a2)
    v4 = result;
  else
    v4 = 0;
  if (a2 < 0x14
    || *(_BYTE *)v4 != 2
    || ((v5 = __rev16(*(unsigned __int16 *)(v4 + 2)), v5 >= 0x14) ? (v6 = a2 >= v5) : (v6 = 0),
        v6 ? (v7 = a2 - v5 >= 4) : (v7 = 1),
        v7))
  {
LABEL_14:
    v8 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_15;
  }
  v9 = *(unsigned __int8 *)(v4 + 4);
  v10 = *(unsigned __int8 *)(v4 + 5);
  v11 = *(unsigned __int8 *)(v4 + 6);
  v12 = *(unsigned __int8 *)(v4 + 7);
  v13 = *(unsigned __int8 *)(v4 + 8);
  v14 = *(unsigned __int8 *)(v4 + 9);
  v15 = *(unsigned __int8 *)(v4 + 10);
  v16 = *(unsigned __int8 *)(v4 + 11);
  v17 = *(unsigned __int8 *)(v4 + 12);
  v18 = *(unsigned __int8 *)(v4 + 13);
  v19 = *(unsigned __int8 *)(v4 + 14);
  v20 = *(unsigned __int8 *)(v4 + 15);
  v21 = *(unsigned __int8 *)(v4 + 16);
  v22 = *(unsigned __int8 *)(v4 + 17);
  result = *(unsigned __int8 *)(v4 + 18);
  if (v5 <= 0x14)
    v23 = 0;
  else
    v23 = (unsigned __int16 *)(v4 + 20);
  v24 = *(unsigned __int8 *)(v4 + 19);
  v25 = v5 - 20;
  if (v5 != 20)
  {
    v26 = v5 - 20;
    v27 = v23;
    while (v26 >= 4)
    {
      v28 = __rev16(v27[1]);
      if (v28 < 4 || v26 < v28)
        break;
      v30 = (unsigned __int16)(v28 + 3) & 0xFFFC;
      if (v26 > v30)
      {
        v27 = (unsigned __int16 *)((char *)v27 + v30);
        if (v26 - v30 < v26)
          v26 -= v30;
        if (v26)
          continue;
      }
      v33 = v16;
      v34 = v15;
      v35 = v14;
      v36 = v13;
      v37 = result;
      v38 = v22;
      v39 = v21;
      v40 = v12;
      v41 = v11;
      v42 = v10;
      v43 = v9;
      if ((v25 & 0x8000000000000000) != 0)
        abort();
      v31 = (char *)operator new(v25);
      v32 = &v31[v25];
      memcpy(v31, v23, v25);
      v10 = v42;
      v9 = v43;
      v12 = v40;
      v11 = v41;
      v22 = v38;
      v21 = v39;
      v13 = v36;
      result = v37;
      v15 = v34;
      v14 = v35;
      v16 = v33;
      goto LABEL_34;
    }
    goto LABEL_14;
  }
  v31 = 0;
  v32 = 0;
LABEL_34:
  *(_QWORD *)a3 = &off_24C0B53C8;
  *(_DWORD *)(a3 + 8) = (v9 << 24) | (v10 << 16) | (v11 << 8) | v12;
  *(_DWORD *)(a3 + 12) = (v13 << 24) | (v14 << 16) | (v15 << 8) | v16;
  *(_WORD *)(a3 + 16) = v18 | (v17 << 8);
  *(_WORD *)(a3 + 18) = v20 | (v19 << 8);
  *(_DWORD *)(a3 + 20) = (v21 << 24) | (v22 << 16) | ((_DWORD)result << 8) | v24;
  *(_QWORD *)(a3 + 24) = v31;
  *(_QWORD *)(a3 + 32) = v32;
  *(_QWORD *)(a3 + 40) = v32;
  v8 = 1;
LABEL_15:
  *(_BYTE *)(a3 + 48) = v8;
  return result;
}

void dcsctp::InitAckChunk::~InitAckChunk(dcsctp::InitAckChunk *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0B53C8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0B53C8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::InitAckChunk::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  const void *v17;
  std::string *v18;
  uint64_t v19;

  v10 = *(_BYTE **)(a1 + 24);
  v11 = *(_BYTE **)(a1 + 32);
  v12 = *(char **)a2;
  v13 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v14 = v11 - v10 + 20;
  if (v13 >= v13 + v14)
  {
    if (v13 > v13 + v14)
      *(_QWORD *)(a2 + 8) = &v12[v13 + v14];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v11 - v10 + 20);
    v12 = *(char **)a2;
  }
  v15 = &v12[v13];
  *v15 = 2;
  v15[2] = BYTE1(v14);
  v15[3] = v14;
  if ((unint64_t)(v11 - v10) >= 0xFFFFFFFFFFFFFFECLL)
  {
    v18 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v19);
    dcsctp::InitAckChunk::ToString((dcsctp::InitAckChunk *)v18);
  }
  else
  {
    v16 = *(_QWORD *)a2 + v13;
    *(_DWORD *)(v16 + 4) = bswap32(*(_DWORD *)(a1 + 8));
    *(_DWORD *)(v16 + 8) = bswap32(*(_DWORD *)(a1 + 12));
    *(_WORD *)(v16 + 12) = bswap32(*(unsigned __int16 *)(a1 + 16)) >> 16;
    *(_WORD *)(v16 + 14) = bswap32(*(unsigned __int16 *)(a1 + 18)) >> 16;
    *(_DWORD *)(v16 + 16) = bswap32(*(_DWORD *)(a1 + 20));
    if (v11 == v10)
      v17 = 0;
    else
      v17 = v10;
    if (v11 != v10)
    {
      if (v17)
        memcpy((void *)(v16 + 20), v17, v11 - v10);
    }
  }
}

unint64_t dcsctp::InitAckChunk::ToString@<X0>(dcsctp::InitAckChunk *this@<X0>, char *a2@<X8>)
{
  return rtc::StringFormat((rtc *)"INIT_ACK, initiate_tag=0x%0x, initial_tsn=%u", a2, *((unsigned int *)this + 2), *((unsigned int *)this + 5));
}

uint64_t dcsctp::InitChunk::Parse@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  int v21;
  int v22;
  unsigned __int16 *v23;
  int v24;
  size_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unint64_t v28;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;

  if (a2)
    v4 = result;
  else
    v4 = 0;
  if (a2 < 0x14
    || *(_BYTE *)v4 != 1
    || ((v5 = __rev16(*(unsigned __int16 *)(v4 + 2)), v5 >= 0x14) ? (v6 = a2 >= v5) : (v6 = 0),
        v6 ? (v7 = a2 - v5 >= 4) : (v7 = 1),
        v7))
  {
LABEL_14:
    v8 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_15;
  }
  v9 = *(unsigned __int8 *)(v4 + 4);
  v10 = *(unsigned __int8 *)(v4 + 5);
  v11 = *(unsigned __int8 *)(v4 + 6);
  v12 = *(unsigned __int8 *)(v4 + 7);
  v13 = *(unsigned __int8 *)(v4 + 8);
  v14 = *(unsigned __int8 *)(v4 + 9);
  v15 = *(unsigned __int8 *)(v4 + 10);
  v16 = *(unsigned __int8 *)(v4 + 11);
  v17 = *(unsigned __int8 *)(v4 + 12);
  v18 = *(unsigned __int8 *)(v4 + 13);
  v19 = *(unsigned __int8 *)(v4 + 14);
  v20 = *(unsigned __int8 *)(v4 + 15);
  v21 = *(unsigned __int8 *)(v4 + 16);
  v22 = *(unsigned __int8 *)(v4 + 17);
  result = *(unsigned __int8 *)(v4 + 18);
  if (v5 <= 0x14)
    v23 = 0;
  else
    v23 = (unsigned __int16 *)(v4 + 20);
  v24 = *(unsigned __int8 *)(v4 + 19);
  v25 = v5 - 20;
  if (v5 != 20)
  {
    v26 = v5 - 20;
    v27 = v23;
    while (v26 >= 4)
    {
      v28 = __rev16(v27[1]);
      if (v28 < 4 || v26 < v28)
        break;
      v30 = (unsigned __int16)(v28 + 3) & 0xFFFC;
      if (v26 > v30)
      {
        v27 = (unsigned __int16 *)((char *)v27 + v30);
        if (v26 - v30 < v26)
          v26 -= v30;
        if (v26)
          continue;
      }
      v33 = v16;
      v34 = v15;
      v35 = v14;
      v36 = v13;
      v37 = result;
      v38 = v22;
      v39 = v21;
      v40 = v12;
      v41 = v11;
      v42 = v10;
      v43 = v9;
      if ((v25 & 0x8000000000000000) != 0)
        abort();
      v31 = (char *)operator new(v25);
      v32 = &v31[v25];
      memcpy(v31, v23, v25);
      v10 = v42;
      v9 = v43;
      v12 = v40;
      v11 = v41;
      v22 = v38;
      v21 = v39;
      v13 = v36;
      result = v37;
      v15 = v34;
      v14 = v35;
      v16 = v33;
      goto LABEL_34;
    }
    goto LABEL_14;
  }
  v31 = 0;
  v32 = 0;
LABEL_34:
  *(_QWORD *)a3 = &off_24C0B53F8;
  *(_DWORD *)(a3 + 8) = (v9 << 24) | (v10 << 16) | (v11 << 8) | v12;
  *(_DWORD *)(a3 + 12) = (v13 << 24) | (v14 << 16) | (v15 << 8) | v16;
  *(_WORD *)(a3 + 16) = v18 | (v17 << 8);
  *(_WORD *)(a3 + 18) = v20 | (v19 << 8);
  *(_DWORD *)(a3 + 20) = (v21 << 24) | (v22 << 16) | ((_DWORD)result << 8) | v24;
  *(_QWORD *)(a3 + 24) = v31;
  *(_QWORD *)(a3 + 32) = v32;
  *(_QWORD *)(a3 + 40) = v32;
  v8 = 1;
LABEL_15:
  *(_BYTE *)(a3 + 48) = v8;
  return result;
}

void dcsctp::InitChunk::~InitChunk(dcsctp::InitChunk *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0B53F8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0B53F8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::InitChunk::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  const void *v17;
  std::string *v18;
  uint64_t v19;

  v10 = *(_BYTE **)(a1 + 24);
  v11 = *(_BYTE **)(a1 + 32);
  v12 = *(char **)a2;
  v13 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v14 = v11 - v10 + 20;
  if (v13 >= v13 + v14)
  {
    if (v13 > v13 + v14)
      *(_QWORD *)(a2 + 8) = &v12[v13 + v14];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v11 - v10 + 20);
    v12 = *(char **)a2;
  }
  v15 = &v12[v13];
  *v15 = 1;
  v15[2] = BYTE1(v14);
  v15[3] = v14;
  if ((unint64_t)(v11 - v10) >= 0xFFFFFFFFFFFFFFECLL)
  {
    v18 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v19);
    dcsctp::InitChunk::ToString((dcsctp::InitChunk *)v18);
  }
  else
  {
    v16 = *(_QWORD *)a2 + v13;
    *(_DWORD *)(v16 + 4) = bswap32(*(_DWORD *)(a1 + 8));
    *(_DWORD *)(v16 + 8) = bswap32(*(_DWORD *)(a1 + 12));
    *(_WORD *)(v16 + 12) = bswap32(*(unsigned __int16 *)(a1 + 16)) >> 16;
    *(_WORD *)(v16 + 14) = bswap32(*(unsigned __int16 *)(a1 + 18)) >> 16;
    *(_DWORD *)(v16 + 16) = bswap32(*(_DWORD *)(a1 + 20));
    if (v11 == v10)
      v17 = 0;
    else
      v17 = v10;
    if (v11 != v10)
    {
      if (v17)
        memcpy((void *)(v16 + 20), v17, v11 - v10);
    }
  }
}

unint64_t dcsctp::InitChunk::ToString@<X0>(dcsctp::InitChunk *this@<X0>, char *a2@<X8>)
{
  return rtc::StringFormat((rtc *)"INIT, initiate_tag=0x%0x, initial_tsn=%u", a2, *((unsigned int *)this + 2), *((unsigned int *)this + 5));
}

uint64_t webrtc::InputVolumeController::InputVolumeController(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int8 v6;
  size_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v27[4];
  __int128 v28;
  uint64_t v29;
  char v30;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a3 + 16);
  v6 = *(_BYTE *)(a3 + 20);
  v28 = xmmword_208F050E0;
  v29 = 0x40400000BF800000;
  v30 = 1;
  v27[0] = v6;
  webrtc::CreateClippingPredictor(a2, v27, (uint64_t *)(a1 + 40));
  *(_BYTE *)(a1 + 48) = *(_QWORD *)(a1 + 40) != 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (a2)
  {
    if (a2 < 0)
      goto LABEL_17;
    v7 = 8 * a2;
    v8 = (char *)operator new(v7);
    *(_QWORD *)(a1 + 72) = v8;
    v9 = &v8[v7];
    *(_QWORD *)(a1 + 88) = &v8[v7];
    bzero(v8, v7);
    *(_QWORD *)(a1 + 80) = v9;
  }
  *(_DWORD *)(a1 + 96) = 0;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/input_volume_controller.cc");
  v17 = *(uint64_t **)(a1 + 72);
  v18 = *(uint64_t **)(a1 + 80);
  if (v17 == v18)
    goto LABEL_16;
  do
  {
    v19 = operator new();
    v20 = v19;
    v21 = *(_DWORD *)(a3 + 4);
    v22 = *(_DWORD *)(a3 + 32);
    *(_DWORD *)v19 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(v19 + 4) = v21;
    *(_QWORD *)(v19 + 8) = 255;
    *(_WORD *)(v19 + 16) = 257;
    *(_BYTE *)(v19 + 18) = 1;
    *(_DWORD *)(v19 + 20) = 0;
    *(_BYTE *)(v19 + 24) = 0;
    if (v22 <= 1)
      v23 = 1;
    else
      v23 = v22;
    *(_QWORD *)(v19 + 32) = 0;
    *(_DWORD *)(v19 + 28) = v23;
    *(_BYTE *)(v19 + 40) = 1;
    *(_QWORD *)(v19 + 44) = *(_QWORD *)(a3 + 36);
    v24 = *v17;
    *v17 = v20;
    if (v24)
      MEMORY[0x20BD0ADEC](v24, 0x1000C4088480CCALL);
    ++v17;
  }
  while (v17 != v18);
  v25 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80) == v25)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    abort();
  }
  *(_BYTE *)(*(_QWORD *)v25 + 24) = 1;
  return a1;
}

uint64_t webrtc::InputVolumeController::AnalyzeInputAudio(uint64_t this, int a2, const webrtc::AudioBuffer *a3)
{
  char *v3;
  char *v4;
  int *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t i;
  int v20;
  int v21;
  int *v22;
  int v23;
  float v24;
  uint64_t v25;
  int v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  unint64_t v30;
  int v31;
  float32x4_t *v32;
  int32x4_t v33;
  unint64_t v34;
  int32x4_t v35;
  unint64_t v36;
  float *v37;
  float v38;
  int v39;
  float v40;
  float v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v52;
  float v53;
  unint64_t v54;
  char v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t *v60;
  uint64_t *j;
  uint64_t v62;
  signed int v63;
  signed int v64;
  signed int v65;
  signed int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  uint64_t k;
  int v83;
  uint64_t v84;
  int v85;
  int v86;

  *(_DWORD *)(this + 12) = a2;
  *(_BYTE *)(this + 16) = 1;
  v3 = *(char **)(this + 72);
  v4 = *(char **)(this + 80);
  if (v3 == v4)
  {
LABEL_118:
    __break(1u);
    return this;
  }
  v5 = (int *)this;
  v6 = v4 - v3;
  v7 = v4 - v3 - 8;
  v8 = *(char **)(this + 72);
  if (v7 < 8)
    goto LABEL_121;
  v9 = (v7 >> 3) + 1;
  v8 = &v3[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
  v10 = (uint64_t *)(v3 + 8);
  v11 = v9 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    v12 = *v10;
    *(_DWORD *)(*(v10 - 1) + 20) = a2;
    *(_DWORD *)(v12 + 20) = a2;
    v10 += 2;
    v11 -= 2;
  }
  while (v11);
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
  {
LABEL_121:
    do
    {
      v13 = *(_QWORD *)v8;
      v8 += 8;
      *(_DWORD *)(v13 + 20) = a2;
    }
    while (v8 != v4);
  }
  v14 = *(_DWORD *)(*(_QWORD *)v3 + 20);
  v15 = *(_QWORD *)(*((_QWORD *)a3 + 10) + 8);
  v16 = *((_QWORD *)a3 + 3);
  if ((unint64_t)v6 <= 8)
  {
    v21 = *(_DWORD *)(this + 12);
    v22 = (int *)(this + 8);
    *(_DWORD *)(this + 96) = 0;
    if (v21 <= 0)
      goto LABEL_17;
    goto LABEL_15;
  }
  v17 = v6 >> 3;
  v18 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 96) = 0;
  if (v17 <= 2)
    v17 = 2;
  for (i = 1; i != v17; ++i)
  {
    v20 = *(_DWORD *)(*(_QWORD *)&v3[8 * i] + 20);
    if (v20 < v14)
    {
      *(_DWORD *)(this + 96) = i;
      v14 = v20;
    }
  }
  v22 = (int *)(this + 8);
  if (v18 >= 1)
  {
LABEL_15:
    if (v14 <= *(_DWORD *)(this + 4))
      v14 = *(_DWORD *)(this + 4);
  }
LABEL_17:
  *(_DWORD *)(this + 8) = v14;
  if (*(_BYTE *)(this + 20))
  {
    this = *(_QWORD *)(this + 40);
    if (this)
    {
      v23 = *v5;
      v84 = v15;
      v85 = v23;
      v86 = v16;
      this = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)this + 24))(this, &v84);
    }
    v24 = 0.0;
    if (v16 && *v5)
    {
      v25 = 0;
      v26 = 0;
      v27 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
      v28.i64[0] = 0xC7000000C7000000;
      v28.i64[1] = 0xC7000000C7000000;
      while (1)
      {
        v29 = *(float32x4_t **)(v15 + 8 * v25);
        if (v16 < 8)
          break;
        v32 = v29 + 1;
        v33 = 0uLL;
        v34 = v16 & 0xFFFFFFFFFFFFFFF8;
        v35 = 0uLL;
        do
        {
          v33 = vsubq_s32(v33, (int32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(v32[-1], v27), (int8x16_t)vcgeq_f32(v28, v32[-1])));
          v35 = vsubq_s32(v35, (int32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(*v32, v27), (int8x16_t)vcgeq_f32(v28, *v32)));
          v32 += 2;
          v34 -= 8;
        }
        while (v34);
        v31 = vaddvq_s32(vaddq_s32(v35, v33));
        v30 = v16 & 0xFFFFFFFFFFFFFFF8;
        if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_31;
LABEL_23:
        if (v26 <= v31)
          v26 = v31;
        if (++v25 == *v5)
        {
          v24 = (float)v26;
          goto LABEL_39;
        }
      }
      v30 = 0;
      v31 = 0;
LABEL_31:
      v36 = v16 - v30;
      v37 = &v29->f32[v30];
      do
      {
        v38 = *v37++;
        v39 = v38 >= 32767.0;
        if (v38 <= -32768.0)
          v39 = 1;
        v31 += v39;
        --v36;
      }
      while (v36);
      goto LABEL_23;
    }
LABEL_39:
    v40 = v24 / (float)v16;
    v41 = *((float *)v5 + 15);
    if (v40 >= v41)
      v41 = v40;
    *((float *)v5 + 15) = v41;
    v42 = v5[14] + 1;
    v5[14] = v42;
    if (v42 == 3000)
    {
      v43 = llroundf(v41 * 100.0);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/input_volume_controller.cc");
      if (this)
      {
        this = webrtc::metrics::HistogramAdd(this, v43);
      }
      else
      {
        {
            goto LABEL_49;
        }
        __clrex();
      }
LABEL_49:
      *((_QWORD *)v5 + 7) = 0;
    }
    v52 = v5[13];
    if (v52 < v5[8])
    {
      v5[13] = v52 + 1;
      return this;
    }
    v53 = *((float *)v5 + 7);
    if (*((_QWORD *)v5 + 5) && *v5 >= 1)
    {
      v54 = 0;
      v55 = 0;
      v56 = 0;
      while (1)
      {
        v57 = *((_QWORD *)v5 + 9);
        if (v54 >= (*((_QWORD *)v5 + 10) - v57) >> 3)
          goto LABEL_118;
        this = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)v5 + 5) + 32))(*((_QWORD *)v5 + 5), v54, v5[2], v5[6], *(unsigned int *)(*(_QWORD *)(v57 + 8 * v54) + 4), 255);
        if (v56 <= (int)this)
          v58 = this;
        else
          v58 = v56;
        if ((this & 0xFF00000000) != 0)
        {
          v56 = v58;
          v55 = 1;
        }
        if ((uint64_t)++v54 >= *v5)
        {
          v59 = v5[6];
          if ((v55 & 1) != 0)
          {
            if (v56 <= v59)
              v75 = v5[6];
            else
              v75 = v56;
            if (*((_BYTE *)v5 + 48))
              v76 = v75;
            else
              v76 = v5[6];
            if (v40 <= v53)
              v59 = v75;
            else
              v59 = v76;
            if (v40 > v53 || *((_BYTE *)v5 + 48))
              goto LABEL_67;
          }
          else if (v40 > v53)
          {
            goto LABEL_67;
          }
          goto LABEL_104;
        }
      }
    }
    if (v40 > v53)
    {
      v59 = v5[6];
LABEL_67:
      v60 = (uint64_t *)*((_QWORD *)v5 + 9);
      for (j = (uint64_t *)*((_QWORD *)v5 + 10); v60 != j; ++v60)
      {
        v62 = *v60;
        v63 = *(_DWORD *)(*v60 + 4);
        v64 = *(_DWORD *)(*v60 + 8) - v59;
        if (v63 > v64)
          v64 = *(_DWORD *)(*v60 + 4);
        *(_DWORD *)(v62 + 8) = v64;
        v65 = *(_DWORD *)(v62 + 12);
        if (v65 > v63)
        {
          if (v63 <= v65 - v59)
            v63 = v65 - v59;
          v66 = *(_DWORD *)(v62 + 20);
          if (v66)
          {
            if (v66 < 0x100)
            {
              if (v66 > v65 + 25 || v66 < v65 - 25)
              {
                *(_DWORD *)(v62 + 12) = v66;
                if (v66 > v64)
                  *(_DWORD *)(v62 + 8) = v66;
              }
              else
              {
                if (v64 >= v63)
                  v64 = v63;
                if (v64 != v65)
                {
                  *(_DWORD *)(v62 + 20) = v64;
                  *(_DWORD *)(v62 + 12) = v64;
                }
              }
            }
            else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            {
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v67, v68, v69, v70, v71, v72, v73, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/input_volume_controller.cc");
            }
          }
          *(_BYTE *)(v62 + 40) = 0;
          *(_QWORD *)(v62 + 32) = 0;
        }
      }
      v5[13] = 0;
      this = *((_QWORD *)v5 + 5);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
    }
LABEL_104:
    v78 = *((_QWORD *)v5 + 9);
    v77 = *((_QWORD *)v5 + 10);
    v79 = v77 - v78;
    if (v77 == v78)
      goto LABEL_118;
    v80 = *(_DWORD *)(*(_QWORD *)v78 + 20);
    v5[24] = 0;
    if ((unint64_t)v79 >= 9)
    {
      v81 = v79 >> 3;
      if (v81 <= 2)
        v81 = 2;
      for (k = 1; k != v81; ++k)
      {
        v83 = *(_DWORD *)(*(_QWORD *)(v78 + 8 * k) + 20);
        if (v83 < v80)
        {
          v5[24] = k;
          v80 = v83;
        }
      }
    }
    if (*((_BYTE *)v5 + 16) && v5[3] >= 1 && v80 <= v5[1])
      v80 = v5[1];
    *v22 = v80;
  }
  return this;
}

void webrtc::InputVolumeController::RecommendInputVolume(uint64_t a1, uint64_t a2, float a3)
{
  int **v4;
  int **v5;
  uint64_t v6;
  int v8;
  unint64_t v9;
  uint64_t i;
  int v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t j;
  int v61;
  int v62;
  uint64_t v63;

  if (!*(_BYTE *)(a1 + 16))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/input_volume_controller.cc");
    return;
  }
  v5 = *(int ***)(a1 + 72);
  v4 = *(int ***)(a1 + 80);
  v6 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
LABEL_95:
    __break(1u);
    return;
  }
  v8 = (*v5)[5];
  *(_DWORD *)(a1 + 96) = 0;
  if ((unint64_t)v6 >= 9)
  {
    v9 = v6 >> 3;
    if (v9 <= 2)
      v9 = 2;
    for (i = 1; i != v9; ++i)
    {
      v11 = v5[i][5];
      if (v11 < v8)
      {
        *(_DWORD *)(a1 + 96) = i;
        v8 = v11;
      }
    }
  }
  if (*(int *)(a1 + 12) >= 1 && v8 <= *(_DWORD *)(a1 + 4))
    v8 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a1 + 8) = v8;
  if (!*(_BYTE *)(a1 + 20))
    return;
  v12 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) == 0)
    goto LABEL_27;
  v13 = 30.0;
  if (*(float *)&a2 < 30.0)
    v13 = *(float *)&a2;
  v14 = *(float *)&a2 > -90.0 ? v13 : -90.0;
  v15 = (float)*(int *)(a1 + 64);
  if (v14 > v15 || (v15 = (float)*(int *)(a1 + 68), v14 < v15))
    v16 = llroundf(v15 - v14);
  else
LABEL_27:
    v16 = 0;
  if (v16 >= 15)
    v16 = 15;
  if (v16 <= -15)
    v24 = -15;
  else
    v24 = v16;
  do
  {
    v25 = *v5;
    if (!*((_BYTE *)*v5 + 17))
      goto LABEL_44;
    *((_BYTE *)v25 + 17) = 0;
    v26 = v25[5];
    if (v26)
    {
      if (v26 >= 0x100)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/input_volume_controller.cc");
        goto LABEL_44;
      }
    }
    else if (!*((_BYTE *)v25 + 18))
    {
      goto LABEL_44;
    }
    v34 = *v25;
    if ((int)v26 < *v25)
    {
      v25[5] = v34;
      v26 = v34;
    }
    v25[3] = v26;
    *((_BYTE *)v25 + 18) = 0;
    *((_QWORD *)v25 + 4) = 0;
    *((_BYTE *)v25 + 40) = 1;
LABEL_44:
    if (*((float *)v25 + 11) <= a3)
      ++v25[9];
    v35 = v25[7];
    v36 = v25[8] + 1;
    v25[8] = v36;
    if (v36 >= v35)
    {
      v37 = v25[9];
      *((_QWORD *)v25 + 4) = 0;
      if (!*((_BYTE *)v25 + 40))
      {
        if (v12)
        {
          if ((float)((float)v37 / (float)v35) >= *((float *)v25 + 12) && v24 != 0)
          {
            v39 = v25[3];
            v40 = webrtc::kGainMap[v39];
            v41 = v39;
            if (v24 < 1)
            {
              v46 = v25[3];
              do
              {
                v47 = v46 - 1;
                if (v46 <= *v25)
                  break;
                v48 = webrtc::kGainMap[v46--] - v40;
              }
              while (v48 > v24);
              v44 = v47 + 1;
              v45 = v25[5];
              if (!v45)
                goto LABEL_34;
            }
            else
            {
              do
              {
                v42 = v41 + 1;
                if (v41 > 254)
                  break;
                v43 = webrtc::kGainMap[v41++] - v40;
              }
              while (v43 < v24);
              v44 = v42 - 1;
              v45 = v25[5];
              if (!v45)
                goto LABEL_34;
            }
            if (v45 < 0x100)
            {
              if (v45 > (int)v39 + 25 || v45 < (int)v39 - 25)
              {
                v25[3] = v45;
                if (v45 > v25[2])
                  v25[2] = v45;
                *((_QWORD *)v25 + 4) = 0;
              }
              else
              {
                if (v25[2] < v44)
                  v44 = v25[2];
                if (v44 != (_DWORD)v39)
                {
                  v25[5] = v44;
                  v25[3] = v44;
                }
              }
            }
            else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            {
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/input_volume_controller.cc");
            }
          }
        }
      }
    }
LABEL_34:
    *((_BYTE *)v25 + 40) = 0;
    ++v5;
  }
  while (v5 != v4);
  v56 = *(_QWORD *)(a1 + 72);
  v57 = *(_QWORD *)(a1 + 80) - v56;
  if (!v57)
    goto LABEL_95;
  v58 = *(_DWORD *)(*(_QWORD *)v56 + 20);
  *(_DWORD *)(a1 + 96) = 0;
  if ((unint64_t)v57 >= 9)
  {
    v59 = v57 >> 3;
    if (v59 <= 2)
      v59 = 2;
    for (j = 1; j != v59; ++j)
    {
      v61 = *(_DWORD *)(*(_QWORD *)(v56 + 8 * j) + 20);
      if (v61 < v58)
      {
        *(_DWORD *)(a1 + 96) = j;
        v58 = v61;
      }
    }
  }
  v62 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16) && *(int *)(a1 + 12) >= 1 && v58 <= *(_DWORD *)(a1 + 4))
    v58 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a1 + 8) = v58;
  if (v8 != v58)
  {
    v63 = atomic_load(&webrtc::UpdateHistogramOnRecommendedInputVolumeChangeToMatchTarget(int)::atomic_histogram_pointer);
    if (v63)
    {
      webrtc::metrics::HistogramAdd(v63, v58);
    }
    else
    {
      while (!__ldaxr(&webrtc::UpdateHistogramOnRecommendedInputVolumeChangeToMatchTarget(int)::atomic_histogram_pointer))
      {
        if (!__stlxr(0, &webrtc::UpdateHistogramOnRecommendedInputVolumeChangeToMatchTarget(int)::atomic_histogram_pointer))goto LABEL_91;
      }
      __clrex();
    }
LABEL_91:
    v62 = *(unsigned __int8 *)(a1 + 16);
  }
  if (v62)
    *(_BYTE *)(a1 + 16) = 0;
}

uint64_t webrtc::InputVolumeStatsReporter::InputVolumeStatsReporter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\v\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/input_volume_stats_reporter.cc");
  return a1;
}

uint64_t webrtc::InputVolumeStatsReporter::UpdateStatistics(uint64_t this, int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  webrtc::InputVolumeStatsReporter *v7;

  if (!*(_BYTE *)(this + 72))
  {
    v3 = this;
    if (!*(_BYTE *)(this + 84) || *(_DWORD *)(this + 80) == a2)
      goto LABEL_7;
    this = webrtc::metrics::HistogramAdd(*(_QWORD *)(this + 16), a2);
    if (*(_BYTE *)(v3 + 84))
    {
      v4 = a2 - *(_DWORD *)(v3 + 80);
      if (v4 < 0)
      {
        ++*(_DWORD *)v3;
        *(_DWORD *)(v3 + 8) -= v4;
        v6 = *(_DWORD *)(v3 + 76);
        *(_DWORD *)(v3 + 76) = v6 + 1;
        if (v6 < 5999)
          goto LABEL_9;
        goto LABEL_8;
      }
      ++*(_DWORD *)(v3 + 4);
      *(_DWORD *)(v3 + 12) += v4;
LABEL_7:
      v5 = *(_DWORD *)(v3 + 76);
      *(_DWORD *)(v3 + 76) = v5 + 1;
      if (v5 < 5999)
      {
LABEL_9:
        *(_DWORD *)(v3 + 80) = a2;
        *(_BYTE *)(v3 + 84) = 1;
        return this;
      }
LABEL_8:
      this = webrtc::InputVolumeStatsReporter::LogVolumeUpdateStats((webrtc::InputVolumeStatsReporter *)v3);
      *(_DWORD *)(v3 + 76) = 0;
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      goto LABEL_9;
    }
    std::__throw_bad_optional_access[abi:sn180100]();
    return webrtc::InputVolumeStatsReporter::LogVolumeUpdateStats(v7);
  }
  return this;
}

uint64_t webrtc::InputVolumeStatsReporter::LogVolumeUpdateStats(webrtc::InputVolumeStatsReporter *this)
{
  int v2;
  int v3;
  uint64_t result;

  webrtc::metrics::HistogramAdd(*((_QWORD *)this + 3), *(_DWORD *)this);
  if (*(int *)this >= 1)
    webrtc::metrics::HistogramAdd(*((_QWORD *)this + 4), llroundf((float)*((int *)this + 2) / (float)*(int *)this));
  webrtc::metrics::HistogramAdd(*((_QWORD *)this + 5), *((_DWORD *)this + 1));
  v2 = *((_DWORD *)this + 1);
  if (v2 >= 1)
  {
    webrtc::metrics::HistogramAdd(*((_QWORD *)this + 6), llroundf((float)*((int *)this + 3) / (float)v2));
    v2 = *((_DWORD *)this + 1);
  }
  v3 = *(_DWORD *)this + v2;
  result = webrtc::metrics::HistogramAdd(*((_QWORD *)this + 7), v3);
  if (v3 >= 1)
    return webrtc::metrics::HistogramAdd(*((_QWORD *)this + 8), llroundf((float)(*((_DWORD *)this + 3) + *((_DWORD *)this + 2)) / (float)v3));
  return result;
}

BOOL webrtc::InterArrival::ComputeDeltas(webrtc::InterArrival *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t *a7, int *a8)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 result;
  int v25;
  _BOOL4 v27;
  _BOOL4 v28;
  unsigned int v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v9 = *((_QWORD *)this + 4);
  if (v9 == -1)
  {
    result = 0;
    *((_DWORD *)this + 4) = a2;
    *((_DWORD *)this + 5) = a2;
    *((_QWORD *)this + 3) = a3;
LABEL_27:
    *((_QWORD *)this + 1) += a5;
    *((_QWORD *)this + 4) = a3;
    *((_QWORD *)this + 5) = a4;
    return result;
  }
  v10 = a2 - *((_DWORD *)this + 4);
  if (v10 >= 0)
  {
    v11 = *((_DWORD *)this + 5);
    v12 = (uint64_t)(*((double *)this + 11) * (double)(a2 - v11) + 0.5);
    if (!v12
      || a3 - v9 <= 5 && (_DWORD)a3 - (_DWORD)v9 - (_DWORD)v12 < 0 && a3 - *((_QWORD *)this + 3) < 100
      || v10 <= *(_DWORD *)this)
    {
      result = 0;
      v25 = v11 - a2;
      v27 = v11 != a2 && v25 >= 0;
      if (v25 == 0x80000000)
        v28 = v11 > a2;
      else
        v28 = v27;
      if (v28)
        v29 = v11;
      else
        v29 = a2;
      *((_DWORD *)this + 5) = v29;
      goto LABEL_27;
    }
    v13 = (_OWORD *)((char *)this + 8);
    v14 = (_OWORD *)((char *)this + 48);
    v15 = *((_QWORD *)this + 9);
    if (v15 < 0)
      goto LABEL_30;
    *a6 = v11 - *((_DWORD *)this + 15);
    v16 = v9 - v15;
    *a7 = v16;
    if (v16 - (*((_QWORD *)this + 5) - *((_QWORD *)this + 10)) >= 3000)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/inter_arrival.cc");
LABEL_12:
      result = 0;
      *((_DWORD *)this + 24) = 0;
      *((_QWORD *)this + 5) = v40;
      *(_QWORD *)&v39 = -1;
      *((_QWORD *)&v39 + 1) = -1;
      *v13 = 0uLL;
      *(_OWORD *)((char *)this + 24) = v39;
      *(_QWORD *)&v39 = -1;
      *((_QWORD *)&v39 + 1) = -1;
      *((_QWORD *)this + 10) = v40;
      *v14 = 0uLL;
      *((_OWORD *)this + 4) = v39;
      return result;
    }
    if ((v16 & 0x8000000000000000) == 0)
    {
      *((_DWORD *)this + 24) = 0;
      *a8 = *((_DWORD *)this + 2) - *((_DWORD *)this + 12);
LABEL_30:
      result = v15 >= 0;
      v30 = *(_OWORD *)((char *)this + 24);
      *v14 = *v13;
      *((_OWORD *)this + 4) = v30;
      *((_QWORD *)this + 10) = *((_QWORD *)this + 5);
      *((_DWORD *)this + 4) = a2;
      *((_DWORD *)this + 5) = a2;
      *((_QWORD *)this + 3) = a3;
      *((_QWORD *)this + 1) = 0;
      goto LABEL_27;
    }
    v31 = *((_DWORD *)this + 24);
    *((_DWORD *)this + 24) = v31 + 1;
    if (v31 >= 2)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/inter_arrival.cc");
      goto LABEL_12;
    }
  }
  return 0;
}

double webrtc::InterArrivalDelta::ComputeDeltas(webrtc::InterArrivalDelta *this, Timestamp a2, Timestamp a3, Timestamp a4, uint64_t a5, TimeDelta *a6, TimeDelta *a7, int *a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t var0;
  uint64_t v15;
  uint64_t v17;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  _BOOL4 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  int64x2_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v9 = *((_QWORD *)this + 5);
  if ((unint64_t)(v9 - 0x7FFFFFFFFFFFFFFFLL) > 1)
  {
    v10 = *((_QWORD *)this + 2);
    v11 = a2.var0 - v10;
    if (a2.var0 < v10)
      return *(double *)&v44;
    v12 = a3.var0 - v9;
    if (a3.var0 == 0x8000000000000000)
      v12 = 0x8000000000000000;
    if (a3.var0 == 0x7FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    var0 = *((_QWORD *)this + 3);
    v15 = 0x7FFFFFFFFFFFFFFFLL;
    if (a2.var0 != 0x7FFFFFFFFFFFFFFFLL && var0 != 0x8000000000000000)
    {
      if (a2.var0 == 0x8000000000000000 || var0 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_20;
      v15 = a2.var0 - var0;
      if (a2.var0 == var0)
        goto LABEL_79;
    }
    if (v13 != 0x7FFFFFFFFFFFFFFFLL && v15 != 0x8000000000000000)
    {
      v39 = v13 == 0x8000000000000000 || v15 == 0x7FFFFFFFFFFFFFFFLL;
      v40 = v39 || v13 < v15;
      v41 = v40;
      if (v13 <= 5000 && v41 && a3.var0 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v42 = *((_QWORD *)this + 4);
        if (v42 != 0x8000000000000000
          && (a3.var0 == 0x8000000000000000 || v42 == 0x7FFFFFFFFFFFFFFFLL || a3.var0 - v42 < 100000))
        {
LABEL_79:
          if (var0 <= a2.var0)
            var0 = a2.var0;
          *((_QWORD *)this + 3) = var0;
          goto LABEL_87;
        }
      }
    }
LABEL_20:
    v17 = 0x7FFFFFFFFFFFFFFFLL;
    if (a2.var0 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v10 == 0x7FFFFFFFFFFFFFFFLL || a2.var0 == 0x8000000000000000)
        v11 = 0x8000000000000000;
      if (v10 != 0x8000000000000000)
        v17 = v11;
    }
    if (v17 <= *(_QWORD *)this)
      goto LABEL_79;
    v19 = 0x7FFFFFFFFFFFFFFFLL;
    if ((unint64_t)(*((_QWORD *)this + 11) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v20 = *((_QWORD *)this + 9);
      v21 = var0 - v20;
      if (v20 == 0x7FFFFFFFFFFFFFFFLL || var0 == 0x8000000000000000)
        v21 = 0x8000000000000000;
      if (v20 == 0x8000000000000000 || var0 == 0x7FFFFFFFFFFFFFFFLL)
        v24 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v24 = v21;
      a6->var0 = v24;
      v25 = *((_QWORD *)this + 5);
      if (v25 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v26 = *((_QWORD *)this + 11);
        if (v26 != 0x8000000000000000)
        {
          v19 = v25 - v26;
          if (v26 == 0x7FFFFFFFFFFFFFFFLL || v25 == 0x8000000000000000)
            v19 = 0x8000000000000000;
        }
      }
      a7->var0 = v19;
      v28 = *((_QWORD *)this + 6);
      if (v28 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v30 = 0x7FFFFFFFFFFFFFFFLL;
        if (v19 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_61;
      }
      else
      {
        v29 = *((_QWORD *)this + 12);
        v30 = 0x7FFFFFFFFFFFFFFFLL;
        if (v29 != 0x8000000000000000)
        {
          if (v29 == 0x7FFFFFFFFFFFFFFFLL || v28 == 0x8000000000000000)
            v30 = 0x8000000000000000;
          else
            v30 = v28 - v29;
        }
        if (v19 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_61;
      }
      if (v30 == 0x8000000000000000
        || v19 != 0x8000000000000000 && v30 != 0x7FFFFFFFFFFFFFFFLL && (uint64_t)(v19 - v30) >= 3000000)
      {
LABEL_61:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/inter_arrival_delta.cc");
LABEL_88:
        *((_DWORD *)this + 26) = 0;
        *(_QWORD *)&v44 = 0;
        v45 = vdupq_n_s64(0x8000000000000000);
        *(_OWORD *)((char *)this + 8) = xmmword_208F08B90;
        *(int64x2_t *)((char *)this + 24) = v45;
        *(int64x2_t *)((char *)this + 40) = v45;
        *(_OWORD *)((char *)this + 56) = xmmword_208F08B90;
        *(int64x2_t *)((char *)this + 72) = v45;
        *(int64x2_t *)((char *)this + 88) = v45;
        return *(double *)&v44;
      }
      if (v19 < 0)
      {
        v46 = *((_DWORD *)this + 26);
        *((_DWORD *)this + 26) = v46 + 1;
        if (v46 < 2)
          return *(double *)&v44;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v47, v48, v49, v50, v51, v52, v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/inter_arrival_delta.cc");
        goto LABEL_88;
      }
      *((_DWORD *)this + 26) = 0;
      *a8 = *((_DWORD *)this + 2) - *((_DWORD *)this + 14);
    }
    v43 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)this + 8);
    *(_OWORD *)((char *)this + 72) = v43;
    v44 = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)((char *)this + 88) = v44;
    *((Timestamp *)this + 3) = a2;
    *((Timestamp *)this + 4) = a3;
    *((_QWORD *)this + 1) = 0;
    *((Timestamp *)this + 2) = a2;
    goto LABEL_87;
  }
  *((Timestamp *)this + 2) = a2;
  *((Timestamp *)this + 3) = a2;
  *((Timestamp *)this + 4) = a3;
LABEL_87:
  *((_QWORD *)this + 1) += a5;
  *((Timestamp *)this + 5) = a3;
  *((Timestamp *)this + 6) = a4;
  return *(double *)&v44;
}

unint64_t webrtc::InterFrameDelayVariationCalculator::Calculate(webrtc::InterFrameDelayVariationCalculator *this, unsigned int a2, Timestamp a3)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*((_BYTE *)this + 36))
  {
    v7 = a2;
    *((_QWORD *)this + 3) = a2;
    *((_DWORD *)this + 8) = a2;
    *((_BYTE *)this + 36) = 1;
    if (*((_BYTE *)this + 8))
      goto LABEL_10;
LABEL_15:
    *((_BYTE *)this + 8) = 1;
    *(Timestamp *)this = a3;
    *((_QWORD *)this + 2) = v7;
    return 0;
  }
  v3 = *((_DWORD *)this + 8);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  v6 = (_DWORD)v5 != 0 && v4;
  if ((_DWORD)v5 != 0x80000000)
    v6 = (int)v5 >= 0;
  if (!v6)
    v5 |= 0xFFFFFFFF00000000;
  v7 = v5 + *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v7;
  *((_DWORD *)this + 8) = a2;
  *((_BYTE *)this + 36) = 1;
  if (!*((_BYTE *)this + 8))
    goto LABEL_15;
LABEL_10:
  v8 = *((_QWORD *)this + 2);
  v9 = v7 - v8;
  if (v7 < v8)
    return 0;
  if (a2 - (_DWORD)v8 == 0x80000000)
  {
    if (a2 <= v8)
      return 0;
LABEL_18:
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (a3.var0 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_25;
    v12 = *(_QWORD *)this;
    if (*(_QWORD *)this == 0x8000000000000000)
      goto LABEL_25;
    if (a3.var0 != 0x8000000000000000 && v12 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v13 = a3.var0 - v12;
      if (v13 == 0x7FFFFFFFFFFFFFFFLL)
      {
LABEL_25:
        *(Timestamp *)this = a3;
        *((_QWORD *)this + 2) = v7;
        return v11;
      }
      if (v13 != 0x8000000000000000)
      {
        v11 = v13 + 1000000000 * v9 / -90000000;
        goto LABEL_25;
      }
    }
    v11 = 0x8000000000000000;
    goto LABEL_25;
  }
  if (a2 != (_DWORD)v8)
  {
    if (((a2 - (_DWORD)v8) & 0x80000000) != 0)
      return 0;
    goto LABEL_18;
  }
  return 0;
}

uint64_t dcsctp::InterleavedReassemblyStreams::Stream::TryToAssembleMessage(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t **v3;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  char *v25;
  char *v26;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t **v74;
  uint64_t v75;
  size_t v76;
  uint64_t **v77;
  _QWORD *v78;
  uint64_t v79;
  void *__dst[2];
  char *v81;
  unint64_t v82;
  void *__p[2];
  char *v84;
  _QWORD v85[3];

  v85[2] = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t **)(a1 + 24);
  v2 = *(_QWORD **)(a1 + 24);
  if (!v2)
    return 0;
  v5 = (_QWORD *)a1;
  v6 = (uint64_t **)(a1 + 24);
  do
  {
    v7 = v2[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v2;
    else
      v9 = v2 + 1;
    if (!v8)
      v6 = (uint64_t **)v2;
    v2 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3)
    return 0;
  if ((uint64_t)v6[4] > a2)
    return 0;
  v10 = v6[5];
  if (!*((_BYTE *)v10 + 88))
    return 0;
  v12 = (uint64_t *)(v6 + 6);
  v11 = v6[6];
  if (v11)
  {
    v13 = v6[6];
    do
    {
      v14 = v13;
      v13 = (uint64_t *)v13[1];
    }
    while (v13);
  }
  else
  {
    v15 = (uint64_t *)(v6 + 6);
    do
    {
      v14 = (uint64_t *)v15[2];
      v16 = *v14 == (_QWORD)v15;
      v15 = v14;
    }
    while (v16);
  }
  if (!*((_BYTE *)v14 + 89))
    return 0;
  if (v11)
  {
    do
    {
      v17 = v11;
      v11 = (uint64_t *)v11[1];
    }
    while (v11);
  }
  else
  {
    v18 = (uint64_t *)(v6 + 6);
    do
    {
      v17 = (uint64_t *)v18[2];
      v16 = *v17 == (_QWORD)v18;
      v18 = v17;
    }
    while (v16);
  }
  v19 = v6[7];
  if ((uint64_t *)((char *)v19 - 1) != (uint64_t *)(*((_DWORD *)v17 + 8) - *((_DWORD *)v10 + 8)))
    return 0;
  if (v19)
  {
    if (v19 == (uint64_t *)1)
    {
      v21 = (_BYTE *)v10[8];
      v20 = (_BYTE *)v10[9];
      v85[0] = v10[5];
      v22 = *((unsigned __int16 *)v10 + 24);
      v23 = *((unsigned int *)v10 + 15);
      v24 = v20 - v21;
      if (v20 == v21)
      {
        v26 = 0;
        v25 = 0;
LABEL_96:
        v64 = v5[1];
        v82 = v22 | (v23 << 32);
        __p[0] = v25;
        __p[1] = v26;
        v84 = v26;
        __dst[0] = v85;
        __dst[1] = (void *)1;
        v65 = *(_QWORD *)(v64 + 48);
        if (v65)
        {
          (*(void (**)(uint64_t, void **, unint64_t *))(*(_QWORD *)v65 + 48))(v65, __dst, &v82);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_99;
        }
        goto LABEL_121;
      }
      if ((v24 & 0x8000000000000000) == 0)
      {
        v25 = (char *)operator new(v20 - v21);
        v26 = &v25[v24];
        memcpy(v25, v21, v24);
        goto LABEL_96;
      }
LABEL_119:
      abort();
    }
    v77 = (uint64_t **)(a1 + 24);
    v78 = (_QWORD *)a1;
    if ((unint64_t)v19 >> 61)
      goto LABEL_119;
    v30 = 8 * (_QWORD)v19;
    v29 = (char *)operator new(8 * (_QWORD)v19);
    v28 = &v29[v30];
    v10 = v6[5];
  }
  else
  {
    v77 = (uint64_t **)(a1 + 24);
    v78 = (_QWORD *)a1;
    v28 = 0;
    v29 = 0;
  }
  v81 = 0;
  v31 = 0uLL;
  *(_OWORD *)__dst = 0u;
  if (v10 == v12)
  {
    v24 = 0;
    v37 = 0;
    v38 = v29;
    goto LABEL_84;
  }
  LODWORD(v32) = 0;
  v33 = v10;
  do
  {
    v34 = (uint64_t *)v33[1];
    v35 = v33;
    if (v34)
    {
      do
      {
        v36 = v34;
        v34 = (uint64_t *)*v34;
      }
      while (v34);
    }
    else
    {
      do
      {
        v36 = (uint64_t *)v35[2];
        v16 = *v36 == (_QWORD)v35;
        v35 = v36;
      }
      while (!v16);
    }
    v32 = v33[9] - v33[8] + v32;
    v33 = v36;
  }
  while (v36 != v12);
  if (v32 << 32)
  {
    if (v32 << 32 < 0)
      goto LABEL_119;
    v76 = (int)v32;
    __dst[0] = operator new((int)v32);
    __dst[1] = __dst[0];
    v81 = (char *)__dst[0] + v76;
  }
  else
  {
    v76 = 0;
  }
  v38 = v29;
  do
  {
    v39 = v10[5];
    if (v38 >= v28)
    {
      v40 = (v38 - v29) >> 3;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61)
        goto LABEL_119;
      if ((v28 - v29) >> 2 > v41)
        v41 = (v28 - v29) >> 2;
      if ((unint64_t)(v28 - v29) >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v41)
LABEL_118:
        __break(1u);
      if (v41 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v79 = 8 * v41;
      v42 = operator new(8 * v41);
      v43 = &v42[8 * v40];
      *(_QWORD *)v43 = v39;
      v44 = v43 + 8;
      if (v38 == v29)
      {
        v50 = &v42[v79];
        if (!v29)
          goto LABEL_70;
        goto LABEL_69;
      }
      v45 = v38 - v29 - 8;
      if (v45 >= 0x168
        && (v46 = (v38 - 8 - v29) & 0xFFFFFFFFFFFFFFF8, &v42[v38 - v29 - 8 - v46] <= &v42[v38 - v29 - 8])
        && &v38[-v46 - 8] <= v38 - 8
        && (unint64_t)(v29 - v42) >= 0x20)
      {
        v53 = (v45 >> 3) + 1;
        v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
        v47 = &v38[-v54];
        v43 -= v54;
        v55 = &v42[8 * v40 - 16];
        v56 = v38 - 16;
        v57 = v53 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v58 = *(_OWORD *)v56;
          *(v55 - 1) = *((_OWORD *)v56 - 1);
          *v55 = v58;
          v55 -= 2;
          v56 -= 32;
          v57 -= 4;
        }
        while (v57);
        v48 = v79;
        if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_68:
          v50 = &v42[v48];
          if (!v29)
          {
LABEL_70:
            v29 = v43;
            v38 = v44;
            v12 = (uint64_t *)(v6 + 6);
            v28 = v50;
            goto LABEL_71;
          }
LABEL_69:
          operator delete(v29);
          goto LABEL_70;
        }
      }
      else
      {
        v47 = v38;
        v48 = v79;
      }
      do
      {
        v49 = *((_QWORD *)v47 - 1);
        v47 -= 8;
        *((_QWORD *)v43 - 1) = v49;
        v43 -= 8;
      }
      while (v47 != v29);
      goto LABEL_68;
    }
    if (!v38)
      goto LABEL_118;
    *(_QWORD *)v38 = v39;
    v38 += 8;
LABEL_71:
    std::vector<unsigned char>::__insert_with_size[abi:sn180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((uint64_t)__dst, (char *)__dst[1], (char *)v10[8], (char *)v10[9], v10[9] - v10[8]);
    v51 = (uint64_t *)v10[1];
    if (v51)
    {
      do
      {
        v52 = v51;
        v51 = (uint64_t *)*v51;
      }
      while (v51);
    }
    else
    {
      do
      {
        v52 = (uint64_t *)v10[2];
        v16 = *v52 == (_QWORD)v10;
        v10 = v52;
      }
      while (!v16);
    }
    v10 = v52;
  }
  while (v52 != v12);
  v12 = v6[5];
  v31 = *(_OWORD *)__dst;
  v37 = v81;
  v24 = v76;
LABEL_84:
  v59 = *((unsigned __int16 *)v12 + 24);
  __dst[1] = 0;
  v81 = 0;
  __dst[0] = 0;
  v60 = v59 | ((unint64_t)*((unsigned int *)v12 + 15) << 32);
  v61 = v78[1];
  if (v38 == v29)
    v62 = 0;
  else
    v62 = v29;
  v82 = v60;
  *(_OWORD *)__p = v31;
  v84 = v37;
  v85[0] = v62;
  v85[1] = (v38 - v29) >> 3;
  v63 = *(_QWORD *)(v61 + 48);
  if (!v63)
  {
LABEL_121:
    v75 = std::__throw_bad_function_call[abi:sn180100]();
    return dcsctp::InterleavedReassemblyStreams::Add(v75);
  }
  (*(void (**)(uint64_t, _QWORD *, unint64_t *))(*(_QWORD *)v63 + 48))(v63, v85, &v82);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  if (v29)
    operator delete(v29);
  v3 = v77;
  v5 = v78;
LABEL_99:
  v66 = *v3;
  if (*v3)
  {
    v67 = v3;
    v68 = *v3;
    do
    {
      v69 = v68[4];
      v70 = v69 < a2;
      if (v69 >= a2)
        v71 = (uint64_t **)v68;
      else
        v71 = (uint64_t **)(v68 + 1);
      if (!v70)
        v67 = (uint64_t **)v68;
      v68 = *v71;
    }
    while (*v71);
    if (v67 != v3 && (uint64_t)v67[4] <= a2)
    {
      v72 = v67[1];
      if (v72)
      {
        do
        {
          v73 = v72;
          v72 = (uint64_t *)*v72;
        }
        while (v72);
      }
      else
      {
        v74 = v67;
        do
        {
          v73 = v74[2];
          v16 = *v73 == (_QWORD)v74;
          v74 = (uint64_t **)v73;
        }
        while (!v16);
      }
      if ((uint64_t **)v5[2] == v67)
        v5[2] = v73;
      --v5[4];
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v66, (uint64_t *)v67);
      std::__tree<std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>,std::__map_value_compare<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>,std::less<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>>,true>,std::allocator<std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>>::destroy(v67[6]);
      operator delete(v67);
    }
  }
  return v24;
}

uint64_t dcsctp::InterleavedReassemblyStreams::Add(uint64_t a1, uint64_t a2, __int16 *a3)
{
  __int16 v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  _BOOL4 v11;
  BOOL v12;
  uint64_t *v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  uint64_t v41;
  int v43;
  uint64_t v44;
  __int128 v45;
  __int16 v46;
  char v47;
  unsigned int v48;
  uint64_t v49;

  v5 = *a3;
  LOBYTE(v48) = *((_BYTE *)a3 + 42);
  HIWORD(v48) = v5;
  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
    goto LABEL_21;
  v7 = HIWORD(v48);
  v8 = (uint64_t **)(a1 + 64);
  do
  {
    v9 = *(_DWORD *)(v6 + 32);
    v11 = v48 > v9 || v7 > HIWORD(v9);
    v12 = !v11;
    if (v11)
      v13 = (uint64_t *)(v6 + 8);
    else
      v13 = (uint64_t *)v6;
    if (v12)
      v8 = (uint64_t **)v6;
    v6 = *v13;
  }
  while (*v13);
  if (v8 == (uint64_t **)(a1 + 64)
    || ((v14 = *((_DWORD *)v8 + 8), v48 >= v14)
      ? (v15 = v7 >= HIWORD(v14))
      : (v15 = 0),
        !v15))
  {
LABEL_21:
    v49 = a1;
    v8 = std::__tree<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::__map_value_compare<dcsctp::InterleavedReassemblyStreams::FullStreamId,std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::less<dcsctp::InterleavedReassemblyStreams::FullStreamId>,true>,std::allocator<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>>>::__emplace_unique_impl<std::piecewise_construct_t const&,std::tuple<dcsctp::InterleavedReassemblyStreams::FullStreamId const&>,std::tuple<dcsctp::InterleavedReassemblyStreams::FullStreamId const&,dcsctp::InterleavedReassemblyStreams*&&>>((uint64_t **)(a1 + 56), &v48, (int *)&v48, &v49);
  }
  v16 = *(_DWORD *)a3;
  v17 = *((unsigned int *)a3 + 1);
  v44 = *((_QWORD *)a3 + 1);
  v18 = (void *)*((_QWORD *)a3 + 2);
  v45 = *(_OWORD *)(a3 + 12);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 2) = 0;
  v46 = a3[20];
  v47 = *((_BYTE *)a3 + 42);
  if (*((_BYTE *)v8 + 92))
  {
    v19 = *((_DWORD *)v8 + 22);
    v15 = v17 >= v19;
    v20 = v17 - v19;
    v21 = (_DWORD)v20 != 0 && v15;
    if ((_DWORD)v20 != 0x80000000)
      v21 = (int)v20 >= 0;
    if (!v21)
      v20 |= 0xFFFFFFFF00000000;
    v22 = (uint64_t)v8[10] + v20;
  }
  else
  {
    v22 = v17;
  }
  v24 = v8 + 8;
  v23 = v8[8];
  v8[10] = (uint64_t *)v22;
  *((_DWORD *)v8 + 22) = v17;
  *((_BYTE *)v8 + 92) = 1;
  v43 = v16;
  if (v23)
  {
    while (1)
    {
      while (1)
      {
        v25 = v23;
        v26 = v23[4];
        if (v22 >= v26)
          break;
        v23 = (uint64_t *)*v25;
        v24 = (uint64_t **)v25;
        if (!*v25)
          goto LABEL_39;
      }
      if (v26 >= v22)
        break;
      v23 = (uint64_t *)v25[1];
      if (!v23)
      {
        v24 = (uint64_t **)(v25 + 1);
        goto LABEL_39;
      }
    }
    v27 = a2;
    v32 = v25 + 6;
    v31 = v25[6];
    if (v31)
      goto LABEL_44;
    goto LABEL_49;
  }
  v25 = v8 + 8;
LABEL_39:
  v27 = a2;
  v28 = v25;
  v25 = operator new(0x40uLL);
  v25[7] = 0;
  v25[6] = 0;
  v25[4] = v22;
  v25[5] = v25 + 6;
  *v25 = 0;
  v25[1] = 0;
  v25[2] = v28;
  *v24 = v25;
  v29 = (uint64_t *)*v8[7];
  v30 = v25;
  if (v29)
  {
    v8[7] = v29;
    v30 = *v24;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v8[8], v30);
  v8[9] = (uint64_t *)((char *)v8[9] + 1);
  v32 = v25 + 6;
  v31 = v25[6];
  if (!v31)
  {
LABEL_49:
    v33 = v32;
LABEL_50:
    v35 = (char *)operator new(0x60uLL);
    *((_DWORD *)v35 + 8) = v44;
    *((_QWORD *)v35 + 5) = v27;
    *((_DWORD *)v35 + 12) = v43;
    *((_DWORD *)v35 + 13) = v17;
    *((_QWORD *)v35 + 7) = v44;
    *((_QWORD *)v35 + 8) = v18;
    *(_OWORD *)(v35 + 72) = v45;
    *((_WORD *)v35 + 44) = v46;
    v35[90] = v47;
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = 0;
    *((_QWORD *)v35 + 2) = v33;
    *v32 = v35;
    v36 = *(_QWORD *)v25[5];
    if (v36)
    {
      v25[5] = v36;
      v37 = (uint64_t *)*v32;
    }
    else
    {
      v37 = (uint64_t *)v35;
    }
    v38 = v45 - (_QWORD)v18;
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v25[6], v37);
    ++v25[7];
    if (*((_BYTE *)v8 + 40))
      return (int)v38 - dcsctp::InterleavedReassemblyStreams::Stream::TryToAssembleMessage((uint64_t)(v8 + 5), v22);
    if ((uint64_t *)v22 == v8[12])
    {
      v39 = dcsctp::InterleavedReassemblyStreams::Stream::TryToAssembleMessage((uint64_t)(v8 + 5), v22);
      for (i = 0; v39; v39 = dcsctp::InterleavedReassemblyStreams::Stream::TryToAssembleMessage((uint64_t)(v8 + 5), v41))
      {
        i += v39;
        v41 = (uint64_t)v8[12] + 1;
        v8[12] = (uint64_t *)v41;
      }
      v38 -= i;
    }
    return v38;
  }
  while (1)
  {
LABEL_44:
    while (1)
    {
      v33 = (_QWORD *)v31;
      v34 = *(_DWORD *)(v31 + 32);
      if (v44 >= v34)
        break;
      v31 = *v33;
      v32 = v33;
      if (!*v33)
        goto LABEL_50;
    }
    if (v34 >= v44)
      break;
    v31 = v33[1];
    if (!v31)
    {
      v32 = v33 + 1;
      goto LABEL_50;
    }
  }
  if (v18)
    operator delete(v18);
  return 0;
}

uint64_t dcsctp::InterleavedReassemblyStreams::HandleForwardTsn(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4)
{
  __int16 *v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t **v7;
  uint64_t v8;
  __int16 v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t **v12;
  unsigned int v13;
  _BOOL4 v15;
  BOOL v16;
  uint64_t **v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t **v40;
  unsigned int v42;
  uint64_t v43;

  if (!a4)
    return 0;
  v4 = a3;
  v5 = 0;
  v6 = &a3[6 * a4];
  v40 = (uint64_t **)(a1 + 56);
  v7 = (uint64_t **)(a1 + 64);
  do
  {
    v9 = *v4;
    LOBYTE(v42) = *((_BYTE *)v4 + 4);
    HIWORD(v42) = v9;
    v10 = *v7;
    if (!*v7)
      goto LABEL_25;
    v11 = HIWORD(v42);
    v12 = v7;
    do
    {
      v13 = *((_DWORD *)v10 + 8);
      v15 = v42 > v13 || v11 > HIWORD(v13);
      v16 = !v15;
      if (v15)
        v17 = (uint64_t **)(v10 + 1);
      else
        v17 = (uint64_t **)v10;
      if (v16)
        v12 = (uint64_t **)v10;
      v10 = *v17;
    }
    while (*v17);
    if (v12 == v7
      || ((v18 = *((_DWORD *)v12 + 8), v42 >= v18)
        ? (v19 = v11 >= HIWORD(v18))
        : (v19 = 0),
          !v19))
    {
LABEL_25:
      v43 = a1;
      v12 = std::__tree<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::__map_value_compare<dcsctp::InterleavedReassemblyStreams::FullStreamId,std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::less<dcsctp::InterleavedReassemblyStreams::FullStreamId>,true>,std::allocator<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>>>::__emplace_unique_impl<std::piecewise_construct_t const&,std::tuple<dcsctp::InterleavedReassemblyStreams::FullStreamId const&>,std::tuple<dcsctp::InterleavedReassemblyStreams::FullStreamId const&,dcsctp::InterleavedReassemblyStreams*&&>>(v40, &v42, (int *)&v42, &v43);
    }
    v20 = *((_DWORD *)v4 + 2);
    if (*((_BYTE *)v12 + 92))
    {
      v21 = *((_DWORD *)v12 + 22);
      v19 = v20 >= v21;
      v22 = v20 - v21;
      v23 = (_DWORD)v22 != 0 && v19;
      if ((_DWORD)v22 != 0x80000000)
        v23 = (int)v22 >= 0;
      if (!v23)
        v22 |= 0xFFFFFFFF00000000;
      v24 = (uint64_t *)((char *)v12[10] + v22);
    }
    else
    {
      v24 = (uint64_t *)*((unsigned int *)v4 + 2);
    }
    v12[10] = v24;
    *((_DWORD *)v12 + 22) = v20;
    *((_BYTE *)v12 + 92) = 1;
    v25 = v12[7];
    if (v25 == (uint64_t *)(v12 + 8))
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        if (v25[4] > (uint64_t)v24)
          break;
        v27 = (uint64_t *)v25[5];
        if (v27 == v25 + 6)
        {
          LODWORD(v28) = 0;
        }
        else
        {
          LODWORD(v28) = 0;
          do
          {
            v29 = (uint64_t *)v27[1];
            v30 = v27;
            if (v29)
            {
              do
              {
                v31 = v29;
                v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                v31 = (uint64_t *)v30[2];
                v16 = *v31 == (_QWORD)v30;
                v30 = v31;
              }
              while (!v16);
            }
            v28 = v27[9] - v27[8] + v28;
            v27 = v31;
          }
          while (v31 != v25 + 6);
        }
        v32 = (uint64_t *)v25[1];
        v33 = v25;
        if (v32)
        {
          do
          {
            v34 = v32;
            v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v34 = (uint64_t *)v33[2];
            v16 = *v34 == (_QWORD)v33;
            v33 = v34;
          }
          while (!v16);
        }
        if (v12[7] == v25)
          v12[7] = v34;
        v8 += (int)v28;
        v26 = v12[8];
        v12[9] = (uint64_t *)((char *)v12[9] - 1);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v26, v25);
        std::__tree<std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>,std::__map_value_compare<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>,std::less<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>>,true>,std::allocator<std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>>::destroy((_QWORD *)v25[6]);
        operator delete(v25);
        v25 = v34;
      }
      while (v34 != (uint64_t *)(v12 + 8));
    }
    if (!*((_BYTE *)v12 + 40))
    {
      v35 = (uint64_t)v12[12];
      if ((uint64_t)v24 >= v35)
      {
        v35 = (uint64_t)v24 + 1;
        v12[12] = (uint64_t *)((char *)v24 + 1);
      }
      v36 = dcsctp::InterleavedReassemblyStreams::Stream::TryToAssembleMessage((uint64_t)(v12 + 5), v35);
      for (i = 0; v36; v36 = dcsctp::InterleavedReassemblyStreams::Stream::TryToAssembleMessage((uint64_t)(v12 + 5), v38))
      {
        i += v36;
        v38 = (uint64_t)v12[12] + 1;
        v12[12] = (uint64_t *)v38;
      }
      v8 += i;
    }
    v5 += v8;
    v4 += 6;
  }
  while (v4 != v6);
  return v5;
}

uint64_t **dcsctp::InterleavedReassemblyStreams::ResetStreams(uint64_t **result, __int16 *a2, uint64_t a3)
{
  uint64_t v3;
  __int16 *v4;
  uint64_t **v5;
  __int16 *v6;
  __int16 v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t **v10;
  unsigned int v11;
  _BOOL4 v13;
  BOOL v14;
  uint64_t **v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL4 v22;
  BOOL v23;
  uint64_t **v24;
  unsigned int v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t **v29;
  unsigned int v30;
  uint64_t v31;

  v3 = (uint64_t)result;
  if (a3)
  {
    v4 = a2;
    v5 = result + 8;
    v6 = &a2[a3];
    do
    {
      v7 = *v4;
      LOBYTE(v30) = 1;
      HIWORD(v30) = v7;
      v8 = *v5;
      if (!*v5)
        goto LABEL_25;
      v9 = HIWORD(v30);
      v10 = (uint64_t **)(v3 + 64);
      do
      {
        v11 = *((_DWORD *)v8 + 8);
        v13 = v30 > v11 || v9 > HIWORD(v11);
        v14 = !v13;
        if (v13)
          v15 = (uint64_t **)(v8 + 1);
        else
          v15 = (uint64_t **)v8;
        if (v14)
          v10 = (uint64_t **)v8;
        v8 = *v15;
      }
      while (*v15);
      if (v10 == v5
        || ((v16 = *((_DWORD *)v10 + 8), v30 >= v16)
          ? (v17 = v9 >= HIWORD(v16))
          : (v17 = 0),
            !v17))
      {
LABEL_25:
        v31 = v3;
        v10 = std::__tree<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::__map_value_compare<dcsctp::InterleavedReassemblyStreams::FullStreamId,std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::less<dcsctp::InterleavedReassemblyStreams::FullStreamId>,true>,std::allocator<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>>>::__emplace_unique_impl<std::piecewise_construct_t const&,std::tuple<dcsctp::InterleavedReassemblyStreams::FullStreamId const&>,std::tuple<dcsctp::InterleavedReassemblyStreams::FullStreamId const&,dcsctp::InterleavedReassemblyStreams*&&>>((uint64_t **)(v3 + 56), &v30, (int *)&v30, &v31);
      }
      v10[10] = 0;
      *((_DWORD *)v10 + 22) = 0;
      *((_BYTE *)v10 + 92) = 1;
      v10[12] = 0;
      LOBYTE(v30) = 0;
      HIWORD(v30) = v7;
      v18 = *v5;
      if (!*v5)
        goto LABEL_3;
      v19 = HIWORD(v30);
      result = (uint64_t **)(v3 + 64);
      do
      {
        v20 = *((_DWORD *)v18 + 8);
        v22 = v30 > v20 || v19 > HIWORD(v20);
        v23 = !v22;
        if (v22)
          v24 = (uint64_t **)(v18 + 1);
        else
          v24 = (uint64_t **)v18;
        if (v23)
          result = (uint64_t **)v18;
        v18 = *v24;
      }
      while (*v24);
      if (result == v5
        || ((v25 = *((_DWORD *)result + 8), v30 >= v25)
          ? (v26 = v19 >= HIWORD(v25))
          : (v26 = 0),
            !v26))
      {
LABEL_3:
        v31 = v3;
        result = std::__tree<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::__map_value_compare<dcsctp::InterleavedReassemblyStreams::FullStreamId,std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::less<dcsctp::InterleavedReassemblyStreams::FullStreamId>,true>,std::allocator<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>>>::__emplace_unique_impl<std::piecewise_construct_t const&,std::tuple<dcsctp::InterleavedReassemblyStreams::FullStreamId const&>,std::tuple<dcsctp::InterleavedReassemblyStreams::FullStreamId const&,dcsctp::InterleavedReassemblyStreams*&&>>((uint64_t **)(v3 + 56), &v30, (int *)&v30, &v31);
      }
      result[10] = 0;
      *((_DWORD *)result + 22) = 0;
      *((_BYTE *)result + 92) = 1;
      result[12] = 0;
      ++v4;
    }
    while (v4 != v6);
  }
  else
  {
    v27 = result[7];
    if (v27 != (uint64_t *)(result + 8))
    {
      do
      {
        v27[10] = 0;
        *((_DWORD *)v27 + 22) = 0;
        *((_BYTE *)v27 + 92) = 1;
        v27[12] = 0;
        v28 = (uint64_t *)v27[1];
        if (v28)
        {
          do
          {
            v29 = (uint64_t **)v28;
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (uint64_t **)v27[2];
            v14 = *v29 == v27;
            v27 = (uint64_t *)v29;
          }
          while (!v14);
        }
        v27 = (uint64_t *)v29;
      }
      while (v29 != result + 8);
    }
  }
  return result;
}

uint64_t dcsctp::InterleavedReassemblyStreams::GetHandoverReadiness(dcsctp::InterleavedReassemblyStreams *this)
{
  dcsctp::InterleavedReassemblyStreams *v1;
  dcsctp::InterleavedReassemblyStreams *v3;
  dcsctp::InterleavedReassemblyStreams *v4;
  BOOL v5;

  v1 = (dcsctp::InterleavedReassemblyStreams *)*((_QWORD *)this + 7);
  if (v1 == (dcsctp::InterleavedReassemblyStreams *)((char *)this + 64))
    return 0;
  while (!*((_QWORD *)v1 + 9))
  {
    v3 = (dcsctp::InterleavedReassemblyStreams *)*((_QWORD *)v1 + 1);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(dcsctp::InterleavedReassemblyStreams **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (dcsctp::InterleavedReassemblyStreams *)*((_QWORD *)v1 + 2);
        v5 = *(_QWORD *)v4 == (_QWORD)v1;
        v1 = v4;
      }
      while (!v5);
    }
    v1 = v4;
    if (v4 == (dcsctp::InterleavedReassemblyStreams *)((char *)this + 64))
      return 0;
  }
  if (*((_BYTE *)v1 + 32))
    return 256;
  else
    return 128;
}

void dcsctp::InterleavedReassemblyStreams::AddHandoverState(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  BOOL v50;

  v2 = *(_QWORD **)(a1 + 56);
  v3 = (_QWORD *)(a1 + 64);
  if (v2 != (_QWORD *)(a1 + 64))
  {
    do
    {
      v5 = *((unsigned __int16 *)v2 + 21);
      if (*((_BYTE *)v2 + 40))
      {
        v7 = (char *)a2[18];
        v6 = a2[19];
        if ((unint64_t)v7 >= v6)
        {
          v13 = (char *)a2[17];
          v14 = (v7 - v13) >> 2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            goto LABEL_55;
          v16 = v6 - (_QWORD)v13;
          if (v16 >> 1 > v15)
            v15 = v16 >> 1;
          v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL;
          v18 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v17)
            v18 = v15;
          if (!v18)
            goto LABEL_54;
          if (v18 >> 62)
            goto LABEL_56;
          v19 = 4 * v18;
          v20 = operator new(4 * v18);
          v21 = &v20[4 * v14];
          *v21 = v5;
          v22 = v21 + 1;
          if (v7 != v13)
          {
            v23 = v7 - v13 - 4;
            if (v23 < 0x2C)
              goto LABEL_59;
            if ((unint64_t)(v13 - v20) < 0x20)
              goto LABEL_59;
            v24 = (v23 >> 2) + 1;
            v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
            v26 = &v7[-v25];
            v21 = (_DWORD *)((char *)v21 - v25);
            v27 = &v20[4 * v14 - 16];
            v28 = v7 - 16;
            v29 = v24 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v30 = *(_OWORD *)v28;
              *(v27 - 1) = *((_OWORD *)v28 - 1);
              *v27 = v30;
              v27 -= 2;
              v28 -= 32;
              v29 -= 8;
            }
            while (v29);
            v7 = v26;
            if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_59:
              do
              {
                v31 = *((_DWORD *)v7 - 1);
                v7 -= 4;
                *--v21 = v31;
              }
              while (v7 != v13);
            }
          }
          a2[17] = v21;
          a2[18] = v22;
          a2[19] = &v20[v19];
          if (v13)
            operator delete(v13);
          a2[18] = v22;
          v8 = (_QWORD *)v2[1];
          if (v8)
            goto LABEL_48;
        }
        else
        {
          if (!v7)
            goto LABEL_54;
          *(_DWORD *)v7 = v5;
          a2[18] = v7 + 4;
          v8 = (_QWORD *)v2[1];
          if (v8)
            goto LABEL_48;
        }
      }
      else
      {
        v9 = v2[12];
        v11 = (uint64_t *)a2[15];
        v10 = a2[16];
        if ((unint64_t)v11 >= v10)
        {
          v32 = (char *)a2[14];
          v33 = ((char *)v11 - v32) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_55;
          v35 = v10 - (_QWORD)v32;
          if (v35 >> 2 > v34)
            v34 = v35 >> 2;
          v17 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8;
          v36 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v17)
            v36 = v34;
          if (!v36)
          {
LABEL_54:
            __break(1u);
LABEL_55:
            abort();
          }
          if (v36 >> 61)
LABEL_56:
            std::__throw_bad_array_new_length[abi:sn180100]();
          v37 = 8 * v36;
          v38 = (char *)operator new(8 * v36);
          v39 = &v38[8 * v33];
          *(_QWORD *)v39 = v5 | (v9 << 32);
          v12 = v39 + 8;
          if (v11 != (uint64_t *)v32)
          {
            v40 = (char *)v11 - v32 - 8;
            if (v40 < 0x58)
              goto LABEL_60;
            if ((unint64_t)(v32 - v38) < 0x20)
              goto LABEL_60;
            v41 = (v40 >> 3) + 1;
            v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
            v43 = &v11[v42 / 0xFFFFFFFFFFFFFFF8];
            v39 -= v42;
            v44 = &v38[8 * v33 - 16];
            v45 = (__int128 *)(v11 - 2);
            v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v47 = *v45;
              *((_OWORD *)v44 - 1) = *(v45 - 1);
              *(_OWORD *)v44 = v47;
              v44 -= 32;
              v45 -= 2;
              v46 -= 4;
            }
            while (v46);
            v11 = v43;
            if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_60:
              do
              {
                v48 = *--v11;
                *((_QWORD *)v39 - 1) = v48;
                v39 -= 8;
              }
              while (v11 != (uint64_t *)v32);
            }
            v11 = (uint64_t *)v32;
          }
          a2[14] = v39;
          a2[15] = v12;
          a2[16] = &v38[v37];
          if (v11)
            operator delete(v11);
        }
        else
        {
          if (!v11)
            goto LABEL_54;
          *v11 = v5 | (v9 << 32);
          v12 = v11 + 1;
        }
        a2[15] = v12;
        v8 = (_QWORD *)v2[1];
        if (v8)
        {
          do
          {
LABEL_48:
            v49 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
          goto LABEL_3;
        }
      }
      do
      {
        v49 = (_QWORD *)v2[2];
        v50 = *v49 == (_QWORD)v2;
        v2 = v49;
      }
      while (!v50);
LABEL_3:
      v2 = v49;
    }
    while (v49 != v3);
  }
}

void dcsctp::InterleavedReassemblyStreams::RestoreFromState(uint64_t a1, _QWORD *a2)
{
  int *v4;
  int *i;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  int *j;
  int *v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v31;

  v4 = (int *)a2[14];
  for (i = (int *)a2[15]; v4 != i; v4 += 2)
  {
    while (1)
    {
      v6 = *v4;
      v7 = v4[1];
      v8 = (uint64_t *)operator new(0x68uLL);
      v9 = v8;
      *((_DWORD *)v8 + 8) = v6 << 16;
      *((_DWORD *)v8 + 10) = v6 << 16;
      v8[8] = 0;
      v8[6] = a1;
      v8[7] = (uint64_t)(v8 + 8);
      v8[9] = 0;
      v8[10] = v7;
      *((_DWORD *)v8 + 22) = v7;
      *((_BYTE *)v8 + 92) = 1;
      v8[12] = v7;
      v10 = (uint64_t **)(a1 + 64);
      v11 = (uint64_t **)(a1 + 64);
      v12 = *(uint64_t **)(a1 + 64);
      if (v12)
        break;
LABEL_15:
      *v8 = 0;
      v8[1] = 0;
      v8[2] = (uint64_t)v11;
      *v10 = v8;
      v16 = **(_QWORD **)(a1 + 56);
      if (v16)
      {
        *(_QWORD *)(a1 + 56) = v16;
        v9 = *v10;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 64), v9);
      ++*(_QWORD *)(a1 + 72);
      v4 += 2;
      if (v4 == i)
        goto LABEL_18;
    }
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v12;
        v13 = *((_DWORD *)v12 + 8);
        v14 = HIWORD(v13);
        if (!(_BYTE)v13 && (unsigned __int16)v6 >= v14)
          break;
        v12 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_15;
      }
      if (v14 >= (unsigned __int16)v6)
        break;
      v12 = v11[1];
      if (!v12)
      {
        v10 = v11 + 1;
        goto LABEL_15;
      }
    }
    operator delete(v8);
  }
LABEL_18:
  v18 = (int *)a2[17];
  for (j = (int *)a2[18]; v18 != j; ++v18)
  {
    while (1)
    {
      v19 = *v18;
      v20 = (uint64_t *)operator new(0x68uLL);
      v21 = v20;
      v22 = (v19 << 16) | 1;
      *((_DWORD *)v20 + 8) = v22;
      *((_DWORD *)v20 + 10) = v22;
      v20[9] = 0;
      v20[10] = 0;
      v20[8] = 0;
      v20[6] = a1;
      v20[7] = (uint64_t)(v20 + 8);
      *((_DWORD *)v20 + 22) = 0;
      *((_BYTE *)v20 + 92) = 1;
      v20[12] = 0;
      v23 = (uint64_t **)(a1 + 64);
      v24 = (uint64_t **)(a1 + 64);
      v25 = *(uint64_t **)(a1 + 64);
      if (v25)
        break;
LABEL_35:
      *v20 = 0;
      v20[1] = 0;
      v20[2] = (uint64_t)v24;
      *v23 = v20;
      v31 = **(_QWORD **)(a1 + 56);
      if (v31)
      {
        *(_QWORD *)(a1 + 56) = v31;
        v21 = *v23;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 64), v21);
      ++*(_QWORD *)(a1 + 72);
      if (++v18 == j)
        return;
    }
    while (1)
    {
      while (1)
      {
        v24 = (uint64_t **)v25;
        v26 = *((_DWORD *)v25 + 8);
        v27 = v26;
        v28 = HIWORD(v26);
        if (v27 <= 1 && (unsigned __int16)v19 >= v28)
          break;
        v25 = *v24;
        v23 = v24;
        if (!*v24)
          goto LABEL_35;
      }
      if (v27 && v28 >= (unsigned __int16)v19)
        break;
      v25 = v24[1];
      if (!v25)
      {
        v23 = v24 + 1;
        goto LABEL_35;
      }
    }
    operator delete(v20);
  }
}

void dcsctp::InterleavedReassemblyStreams::~InterleavedReassemblyStreams(dcsctp::InterleavedReassemblyStreams *this)
{
  dcsctp::InterleavedReassemblyStreams *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0B5428;
  std::__tree<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::__map_value_compare<dcsctp::InterleavedReassemblyStreams::FullStreamId,std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::less<dcsctp::InterleavedReassemblyStreams::FullStreamId>,true>,std::allocator<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>>>::destroy(*((_QWORD **)this + 8));
  v2 = (dcsctp::InterleavedReassemblyStreams *)*((_QWORD *)this + 6);
  if (v2 == (dcsctp::InterleavedReassemblyStreams *)((char *)this + 24))
  {
    v3 = 4;
    v2 = (dcsctp::InterleavedReassemblyStreams *)((char *)this + 24);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

{
  dcsctp::InterleavedReassemblyStreams *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0B5428;
  std::__tree<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::__map_value_compare<dcsctp::InterleavedReassemblyStreams::FullStreamId,std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::less<dcsctp::InterleavedReassemblyStreams::FullStreamId>,true>,std::allocator<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>>>::destroy(*((_QWORD **)this + 8));
  v2 = (dcsctp::InterleavedReassemblyStreams *)*((_QWORD *)this + 6);
  if (v2 == (dcsctp::InterleavedReassemblyStreams *)((char *)this + 24))
  {
    v3 = 4;
    v2 = (dcsctp::InterleavedReassemblyStreams *)((char *)this + 24);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

char *std::vector<unsigned char>::__insert_with_size[abi:sn180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  __int128 v36;
  char *v37;
  char v38;
  char *v39;
  int64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  __int128 v46;
  char v47;
  char *v48;
  size_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  __int128 *v55;
  __int128 v56;
  char v57;

  v5 = __dst;
  v6 = a5 - 1;
  if (a5 < 1)
    return v5;
  v11 = *(char **)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 - (uint64_t)v11 < a5)
  {
    v12 = *(char **)a1;
    v13 = (uint64_t)&v11[a5 - *(_QWORD *)a1];
    if (v13 >= 0)
    {
      v14 = (char *)(__dst - v12);
      v15 = v10 - (_QWORD)v12;
      if (2 * v15 > v13)
        v13 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v13;
      if (v16)
        v17 = operator new(v16);
      else
        v17 = 0;
      v26 = &v14[(_QWORD)v17];
      v27 = &v14[(_QWORD)v17 + a5];
      v28 = v12 - &v5[(_QWORD)v17];
      if (v28 >= v6)
        v28 = v6;
      v29 = v28 + 1;
      v30 = &v14[(_QWORD)v17];
      v31 = __src;
      if (v29 >= 0x21)
      {
        v30 = &v14[(_QWORD)v17];
        v31 = __src;
        if ((char *)(&v5[(_QWORD)v17] - __src - (_QWORD)v12) >= (char *)0x20)
        {
          v32 = v29 & 0x1F;
          if ((v29 & 0x1F) == 0)
            v32 = 32;
          v33 = v29 - v32;
          v30 = &v26[v33];
          v31 = &__src[v33];
          v34 = (__int128 *)(__src + 16);
          v35 = (char *)v17 + (_QWORD)v14 + 16;
          do
          {
            v36 = *v34;
            *(v35 - 1) = *(v34 - 1);
            *v35 = v36;
            v34 += 2;
            v35 += 2;
            v33 -= 32;
          }
          while (v33);
        }
      }
      v37 = (char *)v17 + v16;
      do
      {
        if (!v30)
          goto LABEL_62;
        v38 = *v31++;
        *v30++ = v38;
      }
      while (v30 != v27);
      v39 = *(char **)a1;
      if (*(char **)a1 == v5)
      {
        v42 = &v14[(_QWORD)v17];
        v49 = v11 - v5;
        if (v11 == v5)
          goto LABEL_44;
      }
      else
      {
        v40 = v5 - v39;
        v41 = v5;
        v42 = &v14[(_QWORD)v17];
        if ((unint64_t)(v5 - v39) < 0x20)
          goto LABEL_66;
        v41 = v5;
        v42 = v26;
        if ((unint64_t)(v12 - (_BYTE *)v17) < 0x20)
          goto LABEL_66;
        v41 = &v5[-(v40 & 0xFFFFFFFFFFFFFFE0)];
        v42 = &v26[-(v40 & 0xFFFFFFFFFFFFFFE0)];
        v43 = v5 - 16;
        v44 = (char *)v17 + v5 - 16 - v12;
        v45 = v40 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v46 = *(_OWORD *)v43;
          *((_OWORD *)v44 - 1) = *((_OWORD *)v43 - 1);
          *(_OWORD *)v44 = v46;
          v44 -= 32;
          v43 -= 32;
          v45 -= 32;
        }
        while (v45);
        if (v40 != (v40 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_66:
          do
          {
            v47 = *--v41;
            *--v42 = v47;
          }
          while (v41 != v39);
        }
        v48 = *(char **)(a1 + 8);
        v49 = v48 - v5;
        if (v48 == v5)
          goto LABEL_44;
      }
      memmove(v27, v5, v49);
LABEL_44:
      v50 = *(char **)a1;
      *(_QWORD *)a1 = v42;
      *(_QWORD *)(a1 + 8) = &v27[v49];
      *(_QWORD *)(a1 + 16) = v37;
      if (v50)
        operator delete(v50);
      return v26;
    }
LABEL_63:
    abort();
  }
  v18 = v11 - __dst;
  if (v11 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
    v22 = &v11[-a5];
    v23 = v21;
    if ((unint64_t)v11 < a5)
    {
LABEL_57:
      *(_QWORD *)(a1 + 8) = v23;
      if (v21 != &v5[a5])
        memmove(&v5[a5], v5, v21 - &v5[a5]);
      if (v19 != __src)
        memmove(v5, __src, v19 - __src);
      return v5;
    }
LABEL_18:
    if (-(uint64_t)v21 < (unint64_t)&v11[a5 + ~(unint64_t)v21])
      v24 = -(uint64_t)v21;
    else
      v24 = (uint64_t)&v11[a5 + ~(unint64_t)v21];
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) > 0x20)
    {
      v23 = v21;
      if ((unint64_t)a5 >= 0x20)
      {
        v51 = v25 & 0x1F;
        if ((v25 & 0x1F) == 0)
          v51 = 32;
        v52 = v25 - v51;
        v53 = &v22[v52];
        v23 = &v21[v52];
        v54 = v21 + 16;
        v55 = (__int128 *)(v22 + 16);
        do
        {
          v56 = *v55;
          *(v54 - 1) = *(v55 - 1);
          *v54 = v56;
          v54 += 2;
          v55 += 2;
          v52 -= 32;
        }
        while (v52);
        v22 = v53;
      }
    }
    else
    {
      v23 = v21;
    }
    while (v23)
    {
      v57 = *v22++;
      *v23++ = v57;
      if (v22 == v11)
        goto LABEL_57;
    }
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v11[v20];
  *(_QWORD *)(a1 + 8) = &v11[v20];
  if (v18 >= 1)
  {
    v22 = &v21[-a5];
    v23 = &v11[v20];
    if (&v21[-a5] >= v11)
      goto LABEL_57;
    goto LABEL_18;
  }
  return v5;
}

void std::__tree<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::__map_value_compare<dcsctp::InterleavedReassemblyStreams::FullStreamId,std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::less<dcsctp::InterleavedReassemblyStreams::FullStreamId>,true>,std::allocator<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::__map_value_compare<dcsctp::InterleavedReassemblyStreams::FullStreamId,std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::less<dcsctp::InterleavedReassemblyStreams::FullStreamId>,true>,std::allocator<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>>>::destroy(*a1);
    std::__tree<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::__map_value_compare<dcsctp::InterleavedReassemblyStreams::FullStreamId,std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::less<dcsctp::InterleavedReassemblyStreams::FullStreamId>,true>,std::allocator<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>>>::destroy(a1[1]);
    std::__tree<std::__value_type<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::map<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>,std::__map_value_compare<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::__value_type<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::map<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>,std::less<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>>,true>,std::allocator<std::__value_type<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::map<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>>>::destroy((_QWORD *)a1[8]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::map<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>,std::__map_value_compare<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::__value_type<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::map<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>,std::less<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>>,true>,std::allocator<std::__value_type<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::map<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::map<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>,std::__map_value_compare<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::__value_type<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::map<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>,std::less<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>>,true>,std::allocator<std::__value_type<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::map<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>>>::destroy(*a1);
    std::__tree<std::__value_type<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::map<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>,std::__map_value_compare<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::__value_type<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::map<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>,std::less<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>>,true>,std::allocator<std::__value_type<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::MIDTag,unsigned int>>,std::map<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>,std::__map_value_compare<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>,std::less<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>>,true>,std::allocator<std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>>::destroy((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>,std::__map_value_compare<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>,std::less<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>>,true>,std::allocator<std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>,std::__map_value_compare<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>,std::less<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>>,true>,std::allocator<std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>>::destroy(*a1);
    std::__tree<std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>,std::__map_value_compare<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>,std::less<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>>,true>,std::allocator<std::__value_type<webrtc::StrongAlias<dcsctp::FSNTag,unsigned int>,std::pair<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,dcsctp::Data>>>>::destroy(a1[1]);
    v2 = (void *)a1[8];
    if (v2)
    {
      a1[9] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::__map_value_compare<dcsctp::InterleavedReassemblyStreams::FullStreamId,std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>,std::less<dcsctp::InterleavedReassemblyStreams::FullStreamId>,true>,std::allocator<std::__value_type<dcsctp::InterleavedReassemblyStreams::FullStreamId,dcsctp::InterleavedReassemblyStreams::Stream>>>::__emplace_unique_impl<std::piecewise_construct_t const&,std::tuple<dcsctp::InterleavedReassemblyStreams::FullStreamId const&>,std::tuple<dcsctp::InterleavedReassemblyStreams::FullStreamId const&,dcsctp::InterleavedReassemblyStreams*&&>>(uint64_t **a1, unsigned int *a2, int *a3, uint64_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t **v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v23;
  uint64_t *v24;

  v8 = operator new(0x68uLL);
  v9 = v8;
  v10 = *a2;
  *((_DWORD *)v8 + 8) = *a2;
  v11 = *a3;
  v12 = *a4;
  v8[8] = 0;
  *((_DWORD *)v8 + 10) = v11;
  v8[6] = v12;
  v8[7] = v8 + 8;
  v8[9] = 0;
  v8[10] = 0;
  *((_DWORD *)v8 + 22) = 0;
  *((_BYTE *)v8 + 92) = 1;
  v8[12] = 0;
  v13 = a1 + 1;
  v14 = a1[1];
  if (v14)
  {
    v15 = v10;
    v16 = HIWORD(v10);
    while (1)
    {
      while (1)
      {
        v17 = (uint64_t **)v14;
        v18 = *((_DWORD *)v14 + 8);
        v19 = v18;
        v20 = HIWORD(v18);
        if (v15 >= v19 && v16 >= v20)
          break;
        v14 = *v17;
        v13 = v17;
        if (!*v17)
          goto LABEL_16;
      }
      if (v19 >= v15 && v20 >= v16)
        break;
      v14 = v17[1];
      if (!v14)
      {
        v13 = v17 + 1;
        goto LABEL_16;
      }
    }
    operator delete(v8);
    return v17;
  }
  else
  {
    v17 = a1 + 1;
LABEL_16:
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v17;
    *v13 = v8;
    v23 = (uint64_t *)**a1;
    v24 = v8;
    if (v23)
    {
      *a1 = v23;
      v24 = *v13;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v24);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v9;
  }
}

uint64_t webrtc::InterpolatedGainCurve::InterpolatedGainCurve(uint64_t a1, uint64_t a2, char *__src, size_t __len)
{
  std::string::size_type size;
  uint64_t v9;
  size_t v10;
  std::string *v11;
  std::string::value_type *v12;
  int64_t v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string *v16;
  char *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  uint64_t v20;
  size_t v21;
  std::string *v22;
  std::string::value_type *v23;
  int64_t v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string *v27;
  char *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  uint64_t v31;
  size_t v32;
  std::string *v33;
  std::string::value_type *v34;
  int64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string *v38;
  char *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  uint64_t v42;
  size_t v43;
  std::string *v44;
  std::string::value_type *v45;
  int64_t v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string *p_p;
  char *v50;
  std::string::size_type v51;
  void *v53;
  std::string __p;
  std::string v55;
  std::string v56;
  std::string v57;

  *((_BYTE *)&v57.__r_.__value_.__s + 23) = 13;
  if (&v57 <= (std::string *)"WebRTC.Audio." && (char *)&v57.__r_.__value_.__r.__words[1] + 5 > "WebRTC.Audio.")
    goto LABEL_164;
  strcpy((char *)&v57, "WebRTC.Audio.");
  if (!__src)
  {
    if (__len)
      goto LABEL_164;
  }
  if (__len <= 9)
  {
    if (__len)
    {
      if ((char *)&v57.__r_.__value_.__r.__words[1] + 5 <= __src
        && (char *)&v57.__r_.__value_.__r.__words[1] + __len + 5 > __src)
      {
        goto LABEL_164;
      }
      memmove((char *)&v57.__r_.__value_.__r.__words[1] + 5, __src, __len);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        v57.__r_.__value_.__l.__size_ = __len + 13;
      else
        *((_BYTE *)&v57.__r_.__value_.__s + 23) = __len + 13;
      v57.__r_.__value_.__s.__data_[__len + 13] = 0;
    }
    v13 = v57.__r_.__value_.__r.__words[2];
    size = v57.__r_.__value_.__l.__size_;
  }
  else
  {
    if (__len - 0x7FFFFFFFFFFFFFEALL <= 0x800000000000001ELL)
      goto LABEL_165;
    size = __len + 13;
    v9 = 44;
    if (__len + 13 > 0x2C)
      v9 = __len + 13;
    v10 = (v9 | 7) + 1;
    v11 = (std::string *)operator new(v10);
    v12 = &v11->__r_.__value_.__s.__data_[13];
    if (&v57 >= v11 && (std::string *)((char *)&v11->__r_.__value_.__r.__words[1] + 5) > &v57
      || (qmemcpy(v11, "WebRTC.Audio.", 13), v12 <= __src) && &v12[__len] > __src)
    {
LABEL_164:
      __break(1u);
LABEL_165:
      abort();
    }
    memcpy(v12, __src, __len);
    v13 = v10 | 0x8000000000000000;
    v57.__r_.__value_.__l.__size_ = __len + 13;
    v57.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    v11->__r_.__value_.__s.__data_[size] = 0;
  }
  if (v13 >= 0)
    v14 = 22;
  else
    v14 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v13 >= 0)
    v15 = HIBYTE(v13);
  else
    v15 = size;
  if (v14 - v15 >= 0x25)
  {
    v16 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if (v13 >= 0)
      v16 = &v57;
    v17 = (char *)v16 + v15;
    if ((char *)v16 + v15 <= ".FixedDigitalGainCurveRegion.Identity"
      && v17 + 37 > ".FixedDigitalGainCurveRegion.Identity")
    {
      goto LABEL_164;
    }
    qmemcpy(v17, ".FixedDigitalGainCurveRegion.Identity", 37);
    v18 = v15 + 37;
    if (v13 < 0)
    {
      v57.__r_.__value_.__l.__size_ = v15 + 37;
      v16->__r_.__value_.__s.__data_[v18] = 0;
      if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_42;
    }
    else
    {
      *((_BYTE *)&v57.__r_.__value_.__s + 23) = v18 & 0x7F;
      v16->__r_.__value_.__s.__data_[v18] = 0;
      if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_42;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v57, v14, v15 - v14 + 37, v15, v15, 0, 0x25uLL, ".FixedDigitalGainCurveRegion.Identity");
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_42;
  }
  if ((v57.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v57.__r_.__value_.__l.__size_ && !v57.__r_.__value_.__r.__words[0])
  {
    goto LABEL_164;
  }
LABEL_42:
  *((_BYTE *)&v56.__r_.__value_.__s + 23) = 13;
  if (&v56 <= (std::string *)"WebRTC.Audio." && (char *)&v56.__r_.__value_.__r.__words[1] + 5 > "WebRTC.Audio.")
    goto LABEL_164;
  strcpy((char *)&v56, "WebRTC.Audio.");
  if (__len <= 9)
  {
    if (__len)
    {
      if ((char *)&v56.__r_.__value_.__r.__words[1] + 5 <= __src
        && (char *)&v56.__r_.__value_.__r.__words[1] + __len + 5 > __src)
      {
        goto LABEL_164;
      }
      memmove((char *)&v56.__r_.__value_.__r.__words[1] + 5, __src, __len);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        v56.__r_.__value_.__l.__size_ = __len + 13;
      else
        *((_BYTE *)&v56.__r_.__value_.__s + 23) = __len + 13;
      v56.__r_.__value_.__s.__data_[__len + 13] = 0;
    }
    v24 = v56.__r_.__value_.__r.__words[2];
    v19 = v56.__r_.__value_.__l.__size_;
  }
  else
  {
    v19 = __len + 13;
    v20 = 44;
    if (__len + 13 > 0x2C)
      v20 = __len + 13;
    v21 = (v20 | 7) + 1;
    v22 = (std::string *)operator new(v21);
    v23 = &v22->__r_.__value_.__s.__data_[13];
    if (&v56 >= v22 && (std::string *)((char *)&v22->__r_.__value_.__r.__words[1] + 5) > &v56)
      goto LABEL_164;
    qmemcpy(v22, "WebRTC.Audio.", 13);
    if (v23 <= __src && &v23[__len] > __src)
      goto LABEL_164;
    memcpy(v23, __src, __len);
    v24 = v21 | 0x8000000000000000;
    v56.__r_.__value_.__l.__size_ = __len + 13;
    v56.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    v22->__r_.__value_.__s.__data_[v19] = 0;
  }
  if (v24 >= 0)
    v25 = 22;
  else
    v25 = (v24 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v24 >= 0)
    v26 = HIBYTE(v24);
  else
    v26 = v19;
  if (v25 - v26 >= 0x21)
  {
    v27 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if (v24 >= 0)
      v27 = &v56;
    v28 = (char *)v27 + v26;
    if ((char *)v27 + v26 <= ".FixedDigitalGainCurveRegion.Knee" && v28 + 33 > ".FixedDigitalGainCurveRegion.Knee")
      goto LABEL_164;
    qmemcpy(v28, ".FixedDigitalGainCurveRegion.Knee", 33);
    v29 = v26 + 33;
    if (v24 < 0)
    {
      v56.__r_.__value_.__l.__size_ = v26 + 33;
      v27->__r_.__value_.__s.__data_[v29] = 0;
      if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_80;
    }
    else
    {
      *((_BYTE *)&v56.__r_.__value_.__s + 23) = v29 & 0x7F;
      v27->__r_.__value_.__s.__data_[v29] = 0;
      if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_80;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v56, v25, v26 - v25 + 33, v26, v26, 0, 0x21uLL, ".FixedDigitalGainCurveRegion.Knee");
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_80;
  }
  if ((v56.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v56.__r_.__value_.__l.__size_ && !v56.__r_.__value_.__r.__words[0])
  {
    goto LABEL_164;
  }
LABEL_80:
  *((_BYTE *)&v55.__r_.__value_.__s + 23) = 13;
  if (&v55 <= (std::string *)"WebRTC.Audio." && (char *)&v55.__r_.__value_.__r.__words[1] + 5 > "WebRTC.Audio.")
    goto LABEL_164;
  strcpy((char *)&v55, "WebRTC.Audio.");
  if (__len <= 9)
  {
    if (__len)
    {
      if ((char *)&v55.__r_.__value_.__r.__words[1] + 5 <= __src
        && (char *)&v55.__r_.__value_.__r.__words[1] + __len + 5 > __src)
      {
        goto LABEL_164;
      }
      memmove((char *)&v55.__r_.__value_.__r.__words[1] + 5, __src, __len);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        v55.__r_.__value_.__l.__size_ = __len + 13;
      else
        *((_BYTE *)&v55.__r_.__value_.__s + 23) = __len + 13;
      v55.__r_.__value_.__s.__data_[__len + 13] = 0;
    }
    v35 = v55.__r_.__value_.__r.__words[2];
    v30 = v55.__r_.__value_.__l.__size_;
  }
  else
  {
    v30 = __len + 13;
    v31 = 44;
    if (__len + 13 > 0x2C)
      v31 = __len + 13;
    v32 = (v31 | 7) + 1;
    v33 = (std::string *)operator new(v32);
    v34 = &v33->__r_.__value_.__s.__data_[13];
    if (&v55 >= v33 && (std::string *)((char *)&v33->__r_.__value_.__r.__words[1] + 5) > &v55)
      goto LABEL_164;
    qmemcpy(v33, "WebRTC.Audio.", 13);
    if (v34 <= __src && &v34[__len] > __src)
      goto LABEL_164;
    memcpy(v34, __src, __len);
    v35 = v32 | 0x8000000000000000;
    v55.__r_.__value_.__l.__size_ = __len + 13;
    v55.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
    v33->__r_.__value_.__s.__data_[v30] = 0;
  }
  if (v35 >= 0)
    v36 = 22;
  else
    v36 = (v35 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v35 >= 0)
    v37 = HIBYTE(v35);
  else
    v37 = v30;
  if (v36 - v37 >= 0x24)
  {
    v38 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if (v35 >= 0)
      v38 = &v55;
    v39 = (char *)v38 + v37;
    if ((char *)v38 + v37 <= ".FixedDigitalGainCurveRegion.Limiter"
      && v39 + 36 > ".FixedDigitalGainCurveRegion.Limiter")
    {
      goto LABEL_164;
    }
    qmemcpy(v39, ".FixedDigitalGainCurveRegion.Limiter", 36);
    v40 = v37 + 36;
    if (v35 < 0)
    {
      v55.__r_.__value_.__l.__size_ = v37 + 36;
      v38->__r_.__value_.__s.__data_[v40] = 0;
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_118;
    }
    else
    {
      *((_BYTE *)&v55.__r_.__value_.__s + 23) = v40 & 0x7F;
      v38->__r_.__value_.__s.__data_[v40] = 0;
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_118;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v55, v36, v37 - v36 + 36, v37, v37, 0, 0x24uLL, ".FixedDigitalGainCurveRegion.Limiter");
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_118;
  }
  if ((v55.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v55.__r_.__value_.__l.__size_ && !v55.__r_.__value_.__r.__words[0])
  {
    goto LABEL_164;
  }
LABEL_118:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
  if (&__p <= (std::string *)"WebRTC.Audio." && (char *)&__p.__r_.__value_.__r.__words[1] + 5 > "WebRTC.Audio.")
    goto LABEL_164;
  strcpy((char *)&__p, "WebRTC.Audio.");
  if (__len <= 9)
  {
    if (__len)
    {
      if ((char *)&__p.__r_.__value_.__r.__words[1] + 5 <= __src
        && (char *)&__p.__r_.__value_.__r.__words[1] + __len + 5 > __src)
      {
        goto LABEL_164;
      }
      memmove((char *)&__p.__r_.__value_.__r.__words[1] + 5, __src, __len);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        __p.__r_.__value_.__l.__size_ = __len + 13;
      else
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = __len + 13;
      __p.__r_.__value_.__s.__data_[__len + 13] = 0;
    }
    v46 = __p.__r_.__value_.__r.__words[2];
    v41 = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    v41 = __len + 13;
    v42 = 44;
    if (__len + 13 > 0x2C)
      v42 = __len + 13;
    v43 = (v42 | 7) + 1;
    v44 = (std::string *)operator new(v43);
    v45 = &v44->__r_.__value_.__s.__data_[13];
    if (&__p >= v44 && (std::string *)((char *)&v44->__r_.__value_.__r.__words[1] + 5) > &__p)
      goto LABEL_164;
    qmemcpy(v44, "WebRTC.Audio.", 13);
    if (v45 <= __src && &v45[__len] > __src)
      goto LABEL_164;
    memcpy(v45, __src, __len);
    v46 = v43 | 0x8000000000000000;
    __p.__r_.__value_.__l.__size_ = __len + 13;
    __p.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
    v44->__r_.__value_.__s.__data_[v41] = 0;
  }
  if (v46 >= 0)
    v47 = 22;
  else
    v47 = (v46 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v46 >= 0)
    v48 = HIBYTE(v46);
  else
    v48 = v41;
  if (v47 - v48 < 0x27)
  {
    std::string::__grow_by_and_replace(&__p, v47, v48 - v47 + 39, v48, v48, 0, 0x27uLL, ".FixedDigitalGainCurveRegion.Saturation");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_159;
LABEL_151:
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_153;
    goto LABEL_152;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v46 >= 0)
    p_p = &__p;
  v50 = (char *)p_p + v48;
  if ((char *)p_p + v48 <= ".FixedDigitalGainCurveRegion.Saturation"
    && v50 + 39 > ".FixedDigitalGainCurveRegion.Saturation")
  {
    goto LABEL_164;
  }
  qmemcpy(v50, ".FixedDigitalGainCurveRegion.Saturation", 39);
  v51 = v48 + 39;
  if (v46 < 0)
  {
    __p.__r_.__value_.__l.__size_ = v48 + 39;
    p_p->__r_.__value_.__s.__data_[v51] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_151;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v51 & 0x7F;
    p_p->__r_.__value_.__s.__data_[v51] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_151;
  }
LABEL_159:
  if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_164;
  v53 = (void *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_)
  {
    if (!__p.__r_.__value_.__r.__words[0])
      goto LABEL_164;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  operator delete(v53);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
LABEL_152:
    operator delete(v55.__r_.__value_.__l.__data_);
LABEL_153:
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v56.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_155;
LABEL_157:
    operator delete(v57.__r_.__value_.__l.__data_);
    goto LABEL_155;
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_157;
LABEL_155:
  *(_QWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  return a1;
}

uint64_t webrtc::InterpolatedGainCurve::LookUpGainToApply(uint64_t this, float a2)
{
  uint64_t v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  float *v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float v14;

  v3 = this;
  *(_BYTE *)(this + 72) = 1;
  v4 = (_QWORD *)(this + 64);
  if (a2 >= 36766.0)
  {
    v5 = 3;
  }
  else
  {
    v4 = (_QWORD *)(this + 56);
    v5 = 2;
  }
  if (a2 < 33725.0)
  {
    v4 = (_QWORD *)(this + 48);
    v5 = 1;
  }
  if (a2 >= 30057.0)
  {
    v6 = v5;
  }
  else
  {
    v4 = (_QWORD *)(this + 40);
    v6 = 0;
  }
  ++*v4;
  v7 = *(_DWORD *)(this + 76);
  v8 = *(_QWORD *)(this + 80);
  if (v6 == v7)
  {
    *(_QWORD *)(this + 80) = v8 + 1;
    if (a2 <= 30057.0)
      return this;
    goto LABEL_22;
  }
  switch(v7)
  {
    case 0:
      this = *(_QWORD *)this;
      if (*(_QWORD *)v3)
        goto LABEL_20;
      break;
    case 1:
      this = *(_QWORD *)(this + 8);
      if (this)
        goto LABEL_20;
      break;
    case 2:
      this = *(_QWORD *)(this + 16);
      if (this)
        goto LABEL_20;
      break;
    case 3:
      this = *(_QWORD *)(this + 24);
      if (this)
LABEL_20:
        this = webrtc::metrics::HistogramAdd(this, (int)v8 / 100);
      break;
    default:
      break;
  }
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 76) = v6;
  if (a2 > 30057.0)
  {
LABEL_22:
    if (a2 < 36766.0)
    {
      v9 = 32;
      v10 = (float *)&webrtc::InterpolatedGainCurve::approximation_params_x_;
      do
      {
        v11 = v9 >> 1;
        v12 = &v10[v9 >> 1];
        v14 = *v12;
        v13 = v12 + 1;
        v9 += ~(v9 >> 1);
        if (v14 < a2)
          v10 = v13;
        else
          v9 = v11;
      }
      while (v9);
      if ((unint64_t)((((char *)v10 - (char *)&webrtc::InterpolatedGainCurve::approximation_params_x_) >> 2) - 1) >= 0x20)
        __break(1u);
    }
  }
  return this;
}

double dcsctp::InvalidMandatoryParameterCause::SerializeTo(uint64_t a1, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  double result;

  v3 = *(char **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v4 > 0xFFFFFFFFFFFFFFFBLL)
  {
    *(_QWORD *)(a2 + 8) = &v3[v4 + 4];
    *(_QWORD *)&result = 67110656;
    *(_DWORD *)&v3[v4] = 67110656;
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 4uLL);
    *(_QWORD *)&result = 67110656;
    *(_DWORD *)(*(_QWORD *)a2 + v4) = 67110656;
  }
  return result;
}

char *dcsctp::InvalidMandatoryParameterCause::ToString@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_208F051A0;
  if (result <= "Invalid Mandatory Parameter" && result + 27 > "Invalid Mandatory Parameter")
    __break(1u);
  else
    strcpy(result, "Invalid Mandatory Parameter");
  return result;
}

void dcsctp::InvalidMandatoryParameterCause::~InvalidMandatoryParameterCause(dcsctp::InvalidMandatoryParameterCause *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

double dcsctp::InvalidStreamIdentifierCause::SerializeTo(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  double result;

  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v5 > 0xFFFFFFFFFFFFFFF7)
  {
    *(_QWORD *)(a2 + 8) = &v4[v5 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 8uLL);
    v4 = *(char **)a2;
  }
  *(_QWORD *)&result = 134217984;
  *(_DWORD *)&v4[v5] = 134217984;
  *(_WORD *)(*(_QWORD *)a2 + v5 + 4) = bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16;
  return result;
}

char *dcsctp::InvalidStreamIdentifierCause::ToString@<X0>(dcsctp::InvalidStreamIdentifierCause *this@<X0>, std::string *a2@<X8>)
{
  char *result;
  std::string v5;

  result = (char *)operator new(0x30uLL);
  if (result <= "Invalid Stream Identifier, stream_id=" && result + 37 > "Invalid Stream Identifier, stream_id=")
  {
    __break(1u);
  }
  else
  {
    strcpy(result, "Invalid Stream Identifier, stream_id=");
    v5.__r_.__value_.__r.__words[0] = (std::string::size_type)result;
    *(_OWORD *)&v5.__r_.__value_.__r.__words[1] = xmmword_208F0B250;
    result = (char *)rtc::StringBuilder::operator<<(&v5, *((unsigned __int16 *)this + 4));
    *a2 = v5;
  }
  return result;
}

void dcsctp::InvalidStreamIdentifierCause::~InvalidStreamIdentifierCause(dcsctp::InvalidStreamIdentifierCause *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::IPAddress::IsNil(rtc::IPAddress *this)
{
  return *((_DWORD *)this + 2) == 0;
}

uint64_t rtc::IPAddress::operator==(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    return 0;
  if (!v2)
    return 1;
  if (v2 != 30)
  {
    if (v2 == 2)
      return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
    return 0;
  }
  return *(_QWORD *)(a1 + 12) == *(_QWORD *)(a2 + 12) && *(_QWORD *)(a1 + 20) == *(_QWORD *)(a2 + 20);
}

uint64_t rtc::IPAddress::operator!=(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL4 v5;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    return 1;
  if (!v2)
    return 0;
  if (v2 != 30)
  {
    if (v2 == 2)
      return *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12);
    return 1;
  }
  v5 = *(_QWORD *)(a1 + 12) == *(_QWORD *)(a2 + 12) && *(_QWORD *)(a1 + 20) == *(_QWORD *)(a2 + 20);
  return !v5;
}

uint64_t rtc::IPAddress::ipv6_address(rtc::IPAddress *this)
{
  return *(_QWORD *)((char *)this + 12);
}

uint64_t rtc::IPAddress::ipv4_address(rtc::IPAddress *this)
{
  return *((unsigned int *)this + 3);
}

unint64_t rtc::IPAddress::ToString@<X0>(rtc::IPAddress *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t result;
  BOOL v5;
  size_t v6;
  _BYTE *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  result = *((unsigned int *)this + 2);
  v5 = (_DWORD)result == 2 || (_DWORD)result == 30;
  if (!v5
    || (memset(v11, 0, 46), (result = (unint64_t)inet_ntop(result, (char *)this + 12, (char *)v11, 0x2Eu)) == 0))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  result = strlen((const char *)v11);
  if (result >= 0x7FFFFFFFFFFFFFF8)
LABEL_21:
    abort();
  v6 = result;
  if (result > 0x16)
  {
    v9 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v9 = result | 7;
    v10 = v9 + 1;
    result = (unint64_t)operator new(v9 + 1);
    a2[1] = v6;
    a2[2] = v10 | 0x8000000000000000;
    *a2 = result;
    a2 = (_QWORD *)result;
    v7 = (_BYTE *)(result + v6);
    v8 = result + v6 > (unint64_t)v11;
    if (result > (unint64_t)v11)
      goto LABEL_17;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    v7 = (char *)a2 + result;
    v8 = (_OWORD *)((char *)a2 + result) > v11;
    if (a2 > (_QWORD *)v11)
      goto LABEL_17;
  }
  if (v8)
  {
    __break(1u);
    goto LABEL_21;
  }
LABEL_17:
  if (v6)
    result = (unint64_t)memcpy(a2, v11, v6);
  *v7 = 0;
  return result;
}

void rtc::IPAddress::ToSensitiveString(rtc::IPAddress *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  char v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  unint64_t v9;
  char *v10;
  int v11;
  int v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  int v16;
  unint64_t v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  _WORD *v21;
  std::string::size_type v22;
  std::string v23;

  v4 = *((_DWORD *)this + 2);
  if (v4 == 30)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    std::string::append((std::string *)a2, 0x2EuLL, 0);
    v12 = *(char *)(a2 + 23);
    if (v12 >= 0)
      v14 = (char *)a2;
    else
      v14 = *(char **)a2;
    if (v12 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 23);
    else
      v15 = *(_QWORD *)(a2 + 8);
    v13 = *(_QWORD *)((char *)this + 12);
    v16 = snprintf(v14, v15, "%x:%x:%x:x:x:x:x:x", bswap32(v13) >> 16, (v13 >> 8) & 0xFF00 | BYTE3(v13), (v13 >> 24) & 0xFF00 | BYTE5(v13));
    if (*(char *)(a2 + 23) < 0)
    {
      v17 = *(_QWORD *)(a2 + 8);
      if (v17 >= v16)
      {
        *(_QWORD *)(a2 + 8) = v16;
        *(_BYTE *)(*(_QWORD *)a2 + v16) = 0;
        return;
      }
    }
    else
    {
      v17 = *(unsigned __int8 *)(a2 + 23);
      if (v17 >= v16)
      {
        *(_BYTE *)(a2 + 23) = v16 & 0x7F;
        *(_BYTE *)(a2 + v16) = 0;
        return;
      }
    }
    std::string::append((std::string *)a2, v16 - v17, 0);
    return;
  }
  if (v4 != 2)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return;
  }
  rtc::IPAddress::ToString(this, &v23);
  v5 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  size = v23.__r_.__value_.__l.__size_;
  v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v23;
  else
    v8 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    v9 = v23.__r_.__value_.__l.__size_;
  if (!v9)
  {
LABEL_27:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    if (v5 < 0)
      operator delete(v6);
    return;
  }
  v10 = (char *)&v8[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!v9)
      goto LABEL_27;
    v11 = v10[v9--];
  }
  while (v11 != 46);
  if (v9 == -1)
    goto LABEL_27;
  if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v23.__r_.__value_.__l.__size_ >= v9)
    {
      v23.__r_.__value_.__l.__size_ = v9;
      goto LABEL_36;
    }
  }
  else
  {
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    if (v9 <= HIBYTE(v23.__r_.__value_.__r.__words[2]))
    {
      *((_BYTE *)&v23.__r_.__value_.__s + 23) = v9 & 0x7F;
      v6 = &v23;
LABEL_36:
      v6->__r_.__value_.__s.__data_[v9] = 0;
      goto LABEL_37;
    }
  }
  std::string::append(&v23, v9 - size, 0);
LABEL_37:
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = 22;
  else
    v18 = (v23.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    v19 = v23.__r_.__value_.__l.__size_;
  if (v18 - v19 < 2)
  {
    std::string::__grow_by_and_replace(&v23, v18, v19 - v18 + 2, v19, v19, 0, 2uLL, ".x");
LABEL_53:
    *(std::string *)a2 = v23;
    return;
  }
  v20 = &v23;
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)v23.__r_.__value_.__r.__words[0];
  v21 = (_WORD *)((char *)v20 + v19);
  if ((char *)v20 + v19 > ".x" || v21 + 1 <= (_WORD *)".x")
  {
    *v21 = 30766;
    v22 = v19 + 2;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      v23.__r_.__value_.__l.__size_ = v19 + 2;
    else
      *((_BYTE *)&v23.__r_.__value_.__s + 23) = v22 & 0x7F;
    v20->__r_.__value_.__s.__data_[v22] = 0;
    goto LABEL_53;
  }
  __break(1u);
}

__n128 rtc::InterfaceAddress::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(__n128 *)(a2 + 12);
  *(__n128 *)(a1 + 12) = result;
  return result;
}

uint64_t rtc::IPFromString(char *__src, size_t __len, uint64_t a3)
{
  int v6;
  uint64_t result;
  __int128 v8;
  int v9;

  if (!a3)
    return 0;
  if (rtc::inet_pton(2, __src, __len, &v9))
  {
    v6 = v9;
    *(_DWORD *)(a3 + 8) = 2;
    *(_DWORD *)(a3 + 12) = v6;
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    return 1;
  }
  else
  {
    result = rtc::inet_pton(30, __src, __len, &v8);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a3 + 8) = 30;
      *(_OWORD *)(a3 + 12) = v8;
      return 1;
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_DWORD *)(a3 + 24) = 0;
    }
  }
  return result;
}

uint64_t rtc::TruncateIP@<X0>(uint64_t this@<X0>, const rtc::IPAddress *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;

  if ((a2 & 0x80000000) != 0)
    goto LABEL_6;
  v3 = *(_DWORD *)(this + 8);
  if (v3 == 30)
  {
    if (a2 >= 0x80)
    {
      *(_QWORD *)a3 = &unk_24C0ACDA0;
      *(_DWORD *)(a3 + 8) = 30;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)(this + 12);
      return this;
    }
    if (!(_DWORD)a2)
    {
      *(_QWORD *)a3 = &unk_24C0ACDA0;
      *(_DWORD *)(a3 + 8) = 30;
      *(_OWORD *)(a3 + 12) = *MEMORY[0x24BDAE878];
      return this;
    }
    LODWORD(v5) = *(_DWORD *)(this + 16);
    v6 = *(_QWORD *)(this + 20);
    v7 = a2 >> 5;
    v8 = bswap32(0xFFFFFFFFLL << (32 - (a2 & 0x1Fu)));
    if (a2 >= 0x20)
      v9 = -1;
    else
      v9 = v8;
    v10 = v9 & *(_DWORD *)(this + 12);
    if (v7 == 1)
    {
      v5 = v8 & v5;
      if (a2 < 0x40)
        v6 &= 0xFFFFFFFF00000000;
    }
    else
    {
      if (a2 >= 0x20)
        v5 = v5;
      else
        v5 = 0;
      if (v7 == 2)
      {
        v6 = v6 & 0xFFFFFFFF00000000 | v8 & v6;
      }
      else
      {
        if (a2 < 0x40)
          v6 &= 0xFFFFFFFF00000000;
        if (v7 == 3)
        {
          v6 = v6 | ((unint64_t)(v8 & HIDWORD(v6)) << 32);
LABEL_32:
          *(_QWORD *)a3 = &unk_24C0ACDA0;
          *(_DWORD *)(a3 + 8) = 30;
          *(_QWORD *)(a3 + 12) = v10 | (v5 << 32);
          *(_QWORD *)(a3 + 20) = v6;
          return this;
        }
      }
    }
    if (a2 < 0x60)
      v6 = v6;
    goto LABEL_32;
  }
  if (v3 != 2)
  {
LABEL_6:
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = &unk_24C0ACDA0;
    *(_DWORD *)(a3 + 24) = 0;
    return this;
  }
  if (a2 < 0x20)
  {
    if ((_DWORD)a2)
    {
      v4 = *(_DWORD *)(this + 12);
      *(_QWORD *)a3 = &unk_24C0ACDA0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_DWORD *)(a3 + 24) = 0;
      *(_DWORD *)(a3 + 8) = 2;
      *(_DWORD *)(a3 + 12) = v4 & bswap32(-1 << -(char)a2);
    }
    else
    {
      *(_QWORD *)a3 = &unk_24C0ACDA0;
      *(_DWORD *)(a3 + 8) = 2;
      *(_QWORD *)(a3 + 20) = 0;
      *(_QWORD *)(a3 + 12) = 0;
    }
  }
  else
  {
    *(_QWORD *)a3 = &unk_24C0ACDA0;
    *(_DWORD *)(a3 + 8) = 2;
    *(_OWORD *)(a3 + 12) = *(_OWORD *)(this + 12);
  }
  return this;
}

uint64_t rtc::IPAddressPrecedence(rtc *this, const rtc::IPAddress *a2)
{
  int v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BOOL4 v7;

  v2 = *((_DWORD *)this + 2);
  if (v2 == 2)
    return 30;
  if (v2 != 30)
    return 0;
  if (*(_QWORD *)((char *)this + 12) == *MEMORY[0x24BDAE880]
    && *(_QWORD *)((char *)this + 20) == *(_QWORD *)(MEMORY[0x24BDAE880] + 8))
  {
    return 60;
  }
  v4 = *(_QWORD *)((char *)this + 12);
  if ((v4 & 0xFE) == 0xFC)
    return 50;
  v6 = *(_QWORD *)((char *)this + 20);
  if (!(v4 | v6 ^ 0xFFFF0000))
    return 30;
  if ((unsigned __int16)*(_QWORD *)((char *)this + 12) == 544)
    return 20;
  if ((_DWORD)v4 == 288)
    return 10;
  v7 = (v4 | v6) != 0;
  result = 1;
  if ((v4 & 0xC0FF) != 0xC0FE && v7)
  {
    if ((unsigned __int16)v4 == 65087)
      return 1;
    else
      return 40;
  }
  return result;
}

uint64_t WebRtcIsac_SplitAndFilterFloat()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  float64x2_t *v3;
  float64x2_t *v4;
  float *v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  int *v12;
  int v13;
  int *v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  int8x16_t *v31;
  uint64_t i;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  int *v141;
  int v142;
  int *v143;
  uint64_t v144;
  float v145;
  float v146;
  float v147;
  uint64_t v148;
  float v149;
  float v150;
  float v151;
  uint64_t v152;
  float v153;
  float v154;
  float v155;
  uint64_t v156;
  float v157;
  float v158;
  float v159;
  int8x16_t *v160;
  uint64_t j;
  int32x4_t v162;
  int8x16_t v163;
  int8x16_t v164;
  uint64_t v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  uint64_t v263;
  float v264;
  float v265;
  float v266;
  float v267;
  uint64_t v268;
  float v269;
  float v270;
  float v271;
  uint64_t v272;
  float v273;
  float v274;
  float v275;
  uint64_t k;
  float v277;
  float v278;
  uint64_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  const float *v283;
  uint64_t m;
  const float *v285;
  float32x4_t *v286;
  float32x4_t *v287;
  uint64_t v288;
  float v289;
  float v290;
  float v291;
  uint64_t v292;
  float v293;
  float v294;
  float v295;
  uint64_t v296;
  float v297;
  float v298;
  float v299;
  uint64_t v300;
  float v301;
  float v302;
  float v303;
  uint64_t n;
  float v305;
  float v306;
  uint64_t v307;
  uint64_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  _BYTE v345[32];
  _DWORD v346[470];
  int v347;
  int v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  uint64_t v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  _QWORD v398[363];
  float32x4x2_t v399;
  float32x4x2_t v400;

  result = MEMORY[0x24BDAC7A8]();
  v6 = 0;
  v398[362] = *MEMORY[0x24BDAC8D0];
  v7 = v5[196];
  v8 = v5[197];
  do
  {
    v9 = v7;
    v10 = *(float *)(result + v6);
    *(float *)&v345[v6] = (float)(v10 + (float)(v9 * -0.051018)) + (float)(v8 * 0.050155);
    v7 = (float)(v10 + (float)(v9 * 1.949)) + (float)(v8 * -0.94985);
    v5[197] = v9;
    v5[196] = v7;
    v6 += 4;
    v8 = v9;
  }
  while (v6 != 1920);
  v11 = 0;
  v12 = &v348;
  do
  {
    v13 = *(v12 - 2);
    v14 = (int *)&v398[v11 + 116];
    *v14 = *v12;
    v14[1] = v13;
    ++v11;
    v12 -= 4;
  }
  while (v11 != 120);
  v15 = 0;
  v16 = 0.0;
  do
  {
    v17 = *(float *)((char *)&v398[116] + v15);
    v18 = v16 + (float)(v17 * 0.0347);
    v16 = v17 + (float)(v18 * -0.0347);
    *(float *)((char *)&v398[116] + v15) = v18;
    v15 += 4;
  }
  while (v15 != 960);
  v19 = 0;
  v20 = 0.0;
  do
  {
    v21 = *(float *)((char *)&v398[116] + v19);
    v22 = v20 + (float)(v21 * 0.1544);
    v20 = v21 + (float)(v22 * -0.1544);
    *(float *)((char *)&v398[116] + v19) = v22;
    v19 += 4;
  }
  while (v19 != 960);
  v23 = 0;
  v24 = 0.0;
  do
  {
    v25 = *(float *)((char *)&v398[116] + v23);
    v26 = v24 + (float)(v25 * 0.3826);
    v24 = v25 + (float)(v26 * -0.3826);
    *(float *)((char *)&v398[116] + v23) = v26;
    v23 += 4;
  }
  while (v23 != 960);
  v27 = 0;
  v28 = 0.0;
  do
  {
    v29 = *(float *)((char *)&v398[116] + v27);
    v30 = v28 + (float)(v29 * 0.744);
    v28 = v29 + (float)(v30 * -0.744);
    *(float *)((char *)&v398[116] + v27) = v30;
    v27 += 4;
  }
  while (v27 != 960);
  v31 = (int8x16_t *)v398;
  for (i = 2; i != 122; i += 4)
  {
    v33 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v398[i + 114]);
    v34 = vextq_s8(v33, v33, 8uLL);
    v35 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v398[i + 116]);
    v31[-1] = vextq_s8(v35, v35, 8uLL);
    *v31 = v34;
    v31 -= 2;
  }
  v36 = 0;
  v37 = v5[149];
  v38 = v5[150];
  v39 = v5[151];
  v40 = v5[152];
  v41 = v5[153];
  v42 = v5[154];
  v43 = v5[155];
  v44 = v5[156];
  v45 = v5[157];
  v46 = v5[158];
  v47 = v5[159];
  v48 = v5[160];
  v49 = v5[161];
  v50 = v5[162];
  v51 = v5[144];
  v52 = v5[145];
  v53 = v5[146];
  v54 = v5[147];
  v55 = v5[148];
  v56 = v5[163];
  v57 = v5[164];
  v58 = v5[165];
  v59 = v5[166];
  v60 = v16 + (float)(v51 * 0.0347);
  v61 = (float)(v51 + (float)(v60 * -0.0347)) + (float)(v52 * 0.0347);
  v62 = (float)(v52 + (float)(v61 * -0.0347)) + (float)(v53 * 0.0347);
  v63 = (float)(v53 + (float)(v62 * -0.0347)) + (float)(v54 * 0.0347);
  v64 = (float)(v54 + (float)(v63 * -0.0347)) + (float)(v55 * 0.0347);
  v65 = (float)(v55 + (float)(v64 * -0.0347)) + (float)(v37 * 0.0347);
  v66 = (float)(v37 + (float)(v65 * -0.0347)) + (float)(v38 * 0.0347);
  v67 = (float)(v38 + (float)(v66 * -0.0347)) + (float)(v39 * 0.0347);
  v68 = (float)(v39 + (float)(v67 * -0.0347)) + (float)(v40 * 0.0347);
  v69 = (float)(v40 + (float)(v68 * -0.0347)) + (float)(v41 * 0.0347);
  v70 = (float)(v41 + (float)(v69 * -0.0347)) + (float)(v42 * 0.0347);
  v71 = (float)(v42 + (float)(v70 * -0.0347)) + (float)(v43 * 0.0347);
  v72 = (float)(v43 + (float)(v71 * -0.0347)) + (float)(v44 * 0.0347);
  v73 = (float)(v44 + (float)(v72 * -0.0347)) + (float)(v45 * 0.0347);
  v74 = (float)(v45 + (float)(v73 * -0.0347)) + (float)(v46 * 0.0347);
  v75 = (float)(v46 + (float)(v74 * -0.0347)) + (float)(v47 * 0.0347);
  v76 = (float)(v47 + (float)(v75 * -0.0347)) + (float)(v48 * 0.0347);
  v77 = (float)(v48 + (float)(v76 * -0.0347)) + (float)(v49 * 0.0347);
  v78 = (float)(v49 + (float)(v77 * -0.0347)) + (float)(v50 * 0.0347);
  v79 = (float)(v50 + (float)(v78 * -0.0347)) + (float)(v56 * 0.0347);
  v80 = (float)(v56 + (float)(v79 * -0.0347)) + (float)(v57 * 0.0347);
  v81 = (float)(v57 + (float)(v80 * -0.0347)) + (float)(v58 * 0.0347);
  v82 = (float)(v58 + (float)(v81 * -0.0347)) + (float)(v59 * 0.0347);
  v83 = v20 + (float)(v60 * 0.1544);
  v84 = (float)(v60 + (float)(v83 * -0.1544)) + (float)(v61 * 0.1544);
  v85 = (float)(v61 + (float)(v84 * -0.1544)) + (float)(v62 * 0.1544);
  v86 = (float)(v62 + (float)(v85 * -0.1544)) + (float)(v63 * 0.1544);
  v87 = (float)(v63 + (float)(v86 * -0.1544)) + (float)(v64 * 0.1544);
  v88 = (float)(v64 + (float)(v87 * -0.1544)) + (float)(v65 * 0.1544);
  v89 = (float)(v65 + (float)(v88 * -0.1544)) + (float)(v66 * 0.1544);
  v90 = (float)(v66 + (float)(v89 * -0.1544)) + (float)(v67 * 0.1544);
  v91 = (float)(v67 + (float)(v90 * -0.1544)) + (float)(v68 * 0.1544);
  v92 = (float)(v68 + (float)(v91 * -0.1544)) + (float)(v69 * 0.1544);
  v93 = (float)(v69 + (float)(v92 * -0.1544)) + (float)(v70 * 0.1544);
  v94 = (float)(v70 + (float)(v93 * -0.1544)) + (float)(v71 * 0.1544);
  v95 = (float)(v71 + (float)(v94 * -0.1544)) + (float)(v72 * 0.1544);
  v96 = (float)(v72 + (float)(v95 * -0.1544)) + (float)(v73 * 0.1544);
  v97 = (float)(v73 + (float)(v96 * -0.1544)) + (float)(v74 * 0.1544);
  v98 = (float)(v74 + (float)(v97 * -0.1544)) + (float)(v75 * 0.1544);
  v99 = (float)(v75 + (float)(v98 * -0.1544)) + (float)(v76 * 0.1544);
  v100 = (float)(v76 + (float)(v99 * -0.1544)) + (float)(v77 * 0.1544);
  v101 = (float)(v77 + (float)(v100 * -0.1544)) + (float)(v78 * 0.1544);
  v102 = (float)(v78 + (float)(v101 * -0.1544)) + (float)(v79 * 0.1544);
  v103 = (float)(v79 + (float)(v102 * -0.1544)) + (float)(v80 * 0.1544);
  v104 = (float)(v80 + (float)(v103 * -0.1544)) + (float)(v81 * 0.1544);
  v105 = (float)(v81 + (float)(v104 * -0.1544)) + (float)(v82 * 0.1544);
  v319 = (float)(v82 + (float)(v105 * -0.1544))
       + (float)((float)((float)(v59 + (float)(v82 * -0.0347)) + (float)(v5[167] * 0.0347)) * 0.1544);
  v317 = v24 + (float)(v83 * 0.3826);
  v342 = (float)(v83 + (float)(v317 * -0.3826)) + (float)(v84 * 0.3826);
  v332 = (float)(v85 + (float)((float)((float)(v84 + (float)(v342 * -0.3826)) + (float)(v85 * 0.3826)) * -0.3826))
       + (float)(v86 * 0.3826);
  v337 = (float)(v84 + (float)(v342 * -0.3826)) + (float)(v85 * 0.3826);
  v327 = (float)(v86 + (float)(v332 * -0.3826)) + (float)(v87 * 0.3826);
  v323 = (float)(v87 + (float)(v327 * -0.3826)) + (float)(v88 * 0.3826);
  v321 = (float)(v88 + (float)(v323 * -0.3826)) + (float)(v89 * 0.3826);
  v106 = (float)(v89 + (float)(v321 * -0.3826)) + (float)(v90 * 0.3826);
  v107 = (float)(v90 + (float)(v106 * -0.3826)) + (float)(v91 * 0.3826);
  v108 = (float)(v91 + (float)(v107 * -0.3826)) + (float)(v92 * 0.3826);
  v109 = (float)(v92 + (float)(v108 * -0.3826)) + (float)(v93 * 0.3826);
  v110 = (float)(v93 + (float)(v109 * -0.3826)) + (float)(v94 * 0.3826);
  v111 = (float)(v94 + (float)(v110 * -0.3826)) + (float)(v95 * 0.3826);
  v112 = (float)(v95 + (float)(v111 * -0.3826)) + (float)(v96 * 0.3826);
  v113 = (float)(v96 + (float)(v112 * -0.3826)) + (float)(v97 * 0.3826);
  v114 = (float)(v97 + (float)(v113 * -0.3826)) + (float)(v98 * 0.3826);
  v115 = (float)(v98 + (float)(v114 * -0.3826)) + (float)(v99 * 0.3826);
  v116 = (float)(v99 + (float)(v115 * -0.3826)) + (float)(v100 * 0.3826);
  v117 = (float)(v100 + (float)(v116 * -0.3826)) + (float)(v101 * 0.3826);
  v118 = (float)(v101 + (float)(v117 * -0.3826)) + (float)(v102 * 0.3826);
  v119 = (float)(v102 + (float)(v118 * -0.3826)) + (float)(v103 * 0.3826);
  v120 = (float)(v103 + (float)(v119 * -0.3826)) + (float)(v104 * 0.3826);
  v121 = (float)(v104 + (float)(v120 * -0.3826)) + (float)(v105 * 0.3826);
  v122 = (float)(v105 + (float)(v121 * -0.3826)) + (float)(v319 * 0.3826);
  *((_DWORD *)v5 + 144) = v348;
  v123 = (float)(v317 + (float)((float)(v28 + (float)(v317 * 0.744)) * -0.744)) + (float)(v342 * 0.744);
  v124 = (float)(v337 + (float)((float)((float)(v342 + (float)(v123 * -0.744)) + (float)(v337 * 0.744)) * -0.744))
       + (float)(v332 * 0.744);
  v125 = (float)(v327 + (float)((float)((float)(v332 + (float)(v124 * -0.744)) + (float)(v327 * 0.744)) * -0.744))
       + (float)(v323 * 0.744);
  v126 = (float)(v321 + (float)((float)((float)(v323 + (float)(v125 * -0.744)) + (float)(v321 * 0.744)) * -0.744))
       + (float)(v106 * 0.744);
  v127 = (float)(v106 + (float)(v126 * -0.744)) + (float)(v107 * 0.744);
  v128 = (float)(v107 + (float)(v127 * -0.744)) + (float)(v108 * 0.744);
  v129 = (float)(v108 + (float)(v128 * -0.744)) + (float)(v109 * 0.744);
  v130 = (float)(v109 + (float)(v129 * -0.744)) + (float)(v110 * 0.744);
  v131 = (float)(v110 + (float)(v130 * -0.744)) + (float)(v111 * 0.744);
  v132 = (float)(v111 + (float)(v131 * -0.744)) + (float)(v112 * 0.744);
  v133 = (float)(v112 + (float)(v132 * -0.744)) + (float)(v113 * 0.744);
  v134 = (float)(v113 + (float)(v133 * -0.744)) + (float)(v114 * 0.744);
  v135 = (float)(v114 + (float)(v134 * -0.744)) + (float)(v115 * 0.744);
  v136 = (float)(v115 + (float)(v135 * -0.744)) + (float)(v116 * 0.744);
  v137 = (float)(v116 + (float)(v136 * -0.744)) + (float)(v117 * 0.744);
  v138 = (float)(v117 + (float)(v137 * -0.744)) + (float)(v118 * 0.744);
  v139 = (float)(v118 + (float)(v138 * -0.744)) + (float)(v119 * 0.744);
  v397 = v28 + (float)(v317 * 0.744);
  v396 = v123;
  v5[145] = *(float *)&v346[469];
  v5[146] = *(float *)&v346[467];
  v395 = (float)(v342 + (float)(v123 * -0.744)) + (float)(v337 * 0.744);
  v394 = v124;
  v5[147] = *(float *)&v346[465];
  v5[148] = *(float *)&v346[463];
  v140 = (float)(v119 + (float)(v139 * -0.744)) + (float)(v120 * 0.744);
  v393 = (float)(v332 + (float)(v124 * -0.744)) + (float)(v327 * 0.744);
  v392 = v125;
  v5[149] = *(float *)&v346[461];
  v5[150] = *(float *)&v346[459];
  v391 = (float)(v323 + (float)(v125 * -0.744)) + (float)(v321 * 0.744);
  v390 = v126;
  v5[151] = *(float *)&v346[457];
  v5[152] = *(float *)&v346[455];
  v389 = v127;
  v388 = v128;
  v5[153] = *(float *)&v346[453];
  v5[154] = *(float *)&v346[451];
  v387 = v129;
  v386 = v130;
  v5[155] = *(float *)&v346[449];
  v5[156] = *(float *)&v346[447];
  v385 = v131;
  v384 = v132;
  v5[157] = *(float *)&v346[445];
  v5[158] = *(float *)&v346[443];
  v383 = v133;
  v382 = v134;
  v5[159] = *(float *)&v346[441];
  v5[160] = *(float *)&v346[439];
  v381 = v135;
  v380 = v136;
  v5[161] = *(float *)&v346[437];
  v5[162] = *(float *)&v346[435];
  v379 = v137;
  v378 = v138;
  v5[163] = *(float *)&v346[433];
  v5[164] = *(float *)&v346[431];
  v377 = v139;
  v376 = v140;
  v5[165] = *(float *)&v346[429];
  v5[166] = *(float *)&v346[427];
  v375 = (float)(v120 + (float)(v140 * -0.744)) + (float)(v121 * 0.744);
  v374 = (float)(v121 + (float)(v375 * -0.744)) + (float)(v122 * 0.744);
  v5[167] = *(float *)&v346[425];
  v141 = &v347;
  do
  {
    v142 = *(v141 - 2);
    v143 = (int *)&v398[v36 + 116];
    *v143 = *v141;
    v143[1] = v142;
    ++v36;
    v141 -= 4;
  }
  while (v36 != 120);
  v144 = 0;
  v145 = 0.0;
  do
  {
    v146 = *(float *)((char *)&v398[116] + v144);
    v147 = v145 + (float)(v146 * 0.0347);
    v145 = v146 + (float)(v147 * -0.0347);
    *(float *)((char *)&v398[116] + v144) = v147;
    v144 += 4;
  }
  while (v144 != 960);
  v148 = 0;
  v149 = 0.0;
  do
  {
    v150 = *(float *)((char *)&v398[116] + v148);
    v151 = v149 + (float)(v150 * 0.1544);
    v149 = v150 + (float)(v151 * -0.1544);
    *(float *)((char *)&v398[116] + v148) = v151;
    v148 += 4;
  }
  while (v148 != 960);
  v152 = 0;
  v153 = 0.0;
  do
  {
    v154 = *(float *)((char *)&v398[116] + v152);
    v155 = v153 + (float)(v154 * 0.3826);
    v153 = v154 + (float)(v155 * -0.3826);
    *(float *)((char *)&v398[116] + v152) = v155;
    v152 += 4;
  }
  while (v152 != 960);
  v156 = 0;
  v157 = 0.0;
  do
  {
    v158 = *(float *)((char *)&v398[116] + v156);
    v159 = v157 + (float)(v158 * 0.744);
    v157 = v158 + (float)(v159 * -0.744);
    *(float *)((char *)&v398[116] + v156) = v159;
    v156 += 4;
  }
  while (v156 != 960);
  v160 = (int8x16_t *)&v373;
  for (j = 2; j != 122; j += 4)
  {
    v162 = *(int32x4_t *)&v398[j + 116];
    v163 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v398[j + 114]);
    *v160 = vextq_s8(v163, v163, 8uLL);
    v164 = (int8x16_t)vrev64q_s32(v162);
    v160[-1] = vextq_s8(v164, v164, 8uLL);
    v160 -= 2;
  }
  v165 = 0;
  v166 = v5[173];
  v167 = v5[174];
  v168 = v5[175];
  v169 = v5[176];
  v170 = v5[177];
  v171 = v5[178];
  v172 = v5[179];
  v173 = v5[180];
  v174 = v5[181];
  v175 = v5[182];
  v176 = v5[183];
  v177 = v5[184];
  v178 = v5[185];
  v179 = v5[186];
  v180 = v5[168];
  v181 = v5[169];
  v182 = v5[170];
  v183 = v5[171];
  v184 = v5[172];
  v185 = v5[187];
  v186 = v5[188];
  v333 = v5[189];
  v338 = v5[190];
  v328 = v145 + (float)(v180 * 0.0347);
  v187 = (float)(v180 + (float)(v328 * -0.0347)) + (float)(v181 * 0.0347);
  v188 = (float)(v181 + (float)(v187 * -0.0347)) + (float)(v182 * 0.0347);
  v189 = (float)(v182 + (float)(v188 * -0.0347)) + (float)(v183 * 0.0347);
  v190 = (float)(v183 + (float)(v189 * -0.0347)) + (float)(v184 * 0.0347);
  v191 = (float)(v184 + (float)(v190 * -0.0347)) + (float)(v166 * 0.0347);
  v324 = (float)(v166 + (float)(v191 * -0.0347)) + (float)(v167 * 0.0347);
  v192 = (float)(v167 + (float)(v324 * -0.0347)) + (float)(v168 * 0.0347);
  v193 = (float)(v168 + (float)(v192 * -0.0347)) + (float)(v169 * 0.0347);
  v194 = (float)(v169 + (float)(v193 * -0.0347)) + (float)(v170 * 0.0347);
  v195 = (float)(v170 + (float)(v194 * -0.0347)) + (float)(v171 * 0.0347);
  v196 = (float)(v171 + (float)(v195 * -0.0347)) + (float)(v172 * 0.0347);
  v197 = (float)(v172 + (float)(v196 * -0.0347)) + (float)(v173 * 0.0347);
  v198 = (float)(v173 + (float)(v197 * -0.0347)) + (float)(v174 * 0.0347);
  v199 = (float)(v174 + (float)(v198 * -0.0347)) + (float)(v175 * 0.0347);
  v200 = (float)(v175 + (float)(v199 * -0.0347)) + (float)(v176 * 0.0347);
  v201 = (float)(v176 + (float)(v200 * -0.0347)) + (float)(v177 * 0.0347);
  v202 = (float)(v177 + (float)(v201 * -0.0347)) + (float)(v178 * 0.0347);
  v203 = (float)(v178 + (float)(v202 * -0.0347)) + (float)(v179 * 0.0347);
  v204 = (float)(v179 + (float)(v203 * -0.0347)) + (float)(v185 * 0.0347);
  v205 = (float)(v185 + (float)(v204 * -0.0347)) + (float)(v186 * 0.0347);
  v206 = (float)(v186 + (float)(v205 * -0.0347)) + (float)(v333 * 0.0347);
  v334 = (float)(v333 + (float)(v206 * -0.0347)) + (float)(v338 * 0.0347);
  v207 = (float)(v338 + (float)(v334 * -0.0347)) + (float)(v5[191] * 0.0347);
  v339 = v149 + (float)(v328 * 0.1544);
  v329 = (float)(v328 + (float)(v339 * -0.1544)) + (float)(v187 * 0.1544);
  v208 = (float)(v187 + (float)(v329 * -0.1544)) + (float)(v188 * 0.1544);
  v209 = (float)(v188 + (float)(v208 * -0.1544)) + (float)(v189 * 0.1544);
  v210 = (float)(v189 + (float)(v209 * -0.1544)) + (float)(v190 * 0.1544);
  v211 = (float)(v190 + (float)(v210 * -0.1544)) + (float)(v191 * 0.1544);
  v212 = (float)(v191 + (float)(v211 * -0.1544)) + (float)(v324 * 0.1544);
  v325 = (float)(v324 + (float)(v212 * -0.1544)) + (float)(v192 * 0.1544);
  v213 = (float)(v192 + (float)(v325 * -0.1544)) + (float)(v193 * 0.1544);
  v214 = (float)(v193 + (float)(v213 * -0.1544)) + (float)(v194 * 0.1544);
  v215 = (float)(v194 + (float)(v214 * -0.1544)) + (float)(v195 * 0.1544);
  v216 = (float)(v195 + (float)(v215 * -0.1544)) + (float)(v196 * 0.1544);
  v217 = (float)(v196 + (float)(v216 * -0.1544)) + (float)(v197 * 0.1544);
  v218 = (float)(v197 + (float)(v217 * -0.1544)) + (float)(v198 * 0.1544);
  v219 = (float)(v198 + (float)(v218 * -0.1544)) + (float)(v199 * 0.1544);
  v220 = (float)(v199 + (float)(v219 * -0.1544)) + (float)(v200 * 0.1544);
  v221 = (float)(v200 + (float)(v220 * -0.1544)) + (float)(v201 * 0.1544);
  v222 = (float)(v201 + (float)(v221 * -0.1544)) + (float)(v202 * 0.1544);
  v223 = (float)(v202 + (float)(v222 * -0.1544)) + (float)(v203 * 0.1544);
  v224 = (float)(v203 + (float)(v223 * -0.1544)) + (float)(v204 * 0.1544);
  v225 = (float)(v204 + (float)(v224 * -0.1544)) + (float)(v205 * 0.1544);
  v226 = (float)(v205 + (float)(v225 * -0.1544)) + (float)(v206 * 0.1544);
  v227 = (float)(v206 + (float)(v226 * -0.1544)) + (float)(v334 * 0.1544);
  v343 = (float)(v334 + (float)(v227 * -0.1544)) + (float)(v207 * 0.1544);
  v335 = v153 + (float)(v339 * 0.3826);
  v340 = (float)(v339 + (float)(v335 * -0.3826)) + (float)(v329 * 0.3826);
  v330 = (float)(v329 + (float)(v340 * -0.3826)) + (float)(v208 * 0.3826);
  v228 = (float)(v208 + (float)(v330 * -0.3826)) + (float)(v209 * 0.3826);
  v229 = (float)(v209 + (float)(v228 * -0.3826)) + (float)(v210 * 0.3826);
  v230 = (float)(v210 + (float)(v229 * -0.3826)) + (float)(v211 * 0.3826);
  v231 = (float)(v211 + (float)(v230 * -0.3826)) + (float)(v212 * 0.3826);
  v232 = (float)(v212 + (float)(v231 * -0.3826)) + (float)(v325 * 0.3826);
  v233 = (float)(v325 + (float)(v232 * -0.3826)) + (float)(v213 * 0.3826);
  v234 = (float)(v213 + (float)(v233 * -0.3826)) + (float)(v214 * 0.3826);
  v235 = (float)(v214 + (float)(v234 * -0.3826)) + (float)(v215 * 0.3826);
  v236 = (float)(v215 + (float)(v235 * -0.3826)) + (float)(v216 * 0.3826);
  v237 = (float)(v216 + (float)(v236 * -0.3826)) + (float)(v217 * 0.3826);
  v238 = (float)(v217 + (float)(v237 * -0.3826)) + (float)(v218 * 0.3826);
  v239 = (float)(v218 + (float)(v238 * -0.3826)) + (float)(v219 * 0.3826);
  v240 = (float)(v219 + (float)(v239 * -0.3826)) + (float)(v220 * 0.3826);
  v241 = (float)(v220 + (float)(v240 * -0.3826)) + (float)(v221 * 0.3826);
  v242 = (float)(v221 + (float)(v241 * -0.3826)) + (float)(v222 * 0.3826);
  v243 = (float)(v222 + (float)(v242 * -0.3826)) + (float)(v223 * 0.3826);
  v244 = (float)(v223 + (float)(v243 * -0.3826)) + (float)(v224 * 0.3826);
  v245 = (float)(v224 + (float)(v244 * -0.3826)) + (float)(v225 * 0.3826);
  v246 = (float)(v225 + (float)(v245 * -0.3826)) + (float)(v226 * 0.3826);
  v247 = (float)(v226 + (float)(v246 * -0.3826)) + (float)(v227 * 0.3826);
  v314 = (float)(v227 + (float)(v247 * -0.3826)) + (float)(v343 * 0.3826);
  v344 = v157 + (float)(v335 * 0.744);
  v336 = (float)(v335 + (float)(v344 * -0.744)) + (float)(v340 * 0.744);
  v341 = (float)(v340 + (float)(v336 * -0.744)) + (float)(v330 * 0.744);
  v326 = (float)(v330 + (float)(v341 * -0.744)) + (float)(v228 * 0.744);
  v331 = (float)(v228 + (float)(v326 * -0.744)) + (float)(v229 * 0.744);
  v320 = (float)(v229 + (float)(v331 * -0.744)) + (float)(v230 * 0.744);
  v322 = (float)(v230 + (float)(v320 * -0.744)) + (float)(v231 * 0.744);
  v316 = (float)(v231 + (float)(v322 * -0.744)) + (float)(v232 * 0.744);
  v318 = (float)(v232 + (float)(v316 * -0.744)) + (float)(v233 * 0.744);
  v315 = (float)(v233 + (float)(v318 * -0.744)) + (float)(v234 * 0.744);
  v248 = (float)(v234 + (float)(v315 * -0.744)) + (float)(v235 * 0.744);
  v249 = (float)(v235 + (float)(v248 * -0.744)) + (float)(v236 * 0.744);
  v250 = (float)(v238
               + (float)((float)((float)(v237
                                       + (float)((float)((float)(v236 + (float)(v249 * -0.744)) + (float)(v237 * 0.744))
                                               * -0.744))
                               + (float)(v238 * 0.744))
                       * -0.744))
       + (float)(v239 * 0.744);
  v251 = (float)(v239 + (float)(v250 * -0.744)) + (float)(v240 * 0.744);
  v252 = (float)(v240 + (float)(v251 * -0.744)) + (float)(v241 * 0.744);
  v253 = (float)(v242 + (float)((float)((float)(v241 + (float)(v252 * -0.744)) + (float)(v242 * 0.744)) * -0.744))
       + (float)(v243 * 0.744);
  v254 = (float)(v245
               + (float)((float)((float)(v244
                                       + (float)((float)((float)(v243 + (float)(v253 * -0.744)) + (float)(v244 * 0.744))
                                               * -0.744))
                               + (float)(v245 * 0.744))
                       * -0.744))
       + (float)(v246 * 0.744);
  v255 = (float)((float)(v5[128] + (float)(v16 * -0.0015868)) + (float)(v20 * 0.0012716)) + (float)(v24 * -0.0010481);
  v256 = (float)((float)(v5[129] + (float)(v16 * -0.0010481)) + (float)(v20 * 0.00084837)) + (float)(v24 * 0.0013447);
  *((_DWORD *)v5 + 168) = v347;
  v372 = v344;
  v371 = v336;
  v5[169] = *(float *)&v346[468];
  v5[170] = *(float *)&v346[466];
  v370 = v341;
  v369 = v326;
  v5[171] = *(float *)&v346[464];
  v5[172] = *(float *)&v346[462];
  v368 = v331;
  v367 = v320;
  v5[173] = *(float *)&v346[460];
  v5[174] = *(float *)&v346[458];
  v366 = v322;
  v365 = v316;
  v5[175] = *(float *)&v346[456];
  v5[176] = *(float *)&v346[454];
  v364 = v318;
  v363 = v315;
  v5[177] = *(float *)&v346[452];
  v5[178] = *(float *)&v346[450];
  v362 = v248;
  v361 = v249;
  v5[179] = *(float *)&v346[448];
  v5[180] = *(float *)&v346[446];
  v360 = (float)(v236 + (float)(v249 * -0.744)) + (float)(v237 * 0.744);
  v359 = (float)(v237 + (float)(v360 * -0.744)) + (float)(v238 * 0.744);
  v5[181] = *(float *)&v346[444];
  v5[182] = *(float *)&v346[442];
  v358 = v250;
  v357 = v251;
  v5[183] = *(float *)&v346[440];
  v5[184] = *(float *)&v346[438];
  v356 = v252;
  v355 = (float)(v241 + (float)(v252 * -0.744)) + (float)(v242 * 0.744);
  v5[185] = *(float *)&v346[436];
  v5[186] = *(float *)&v346[434];
  v354 = v253;
  v353 = (float)(v243 + (float)(v253 * -0.744)) + (float)(v244 * 0.744);
  v5[187] = *(float *)&v346[432];
  v5[188] = *(float *)&v346[430];
  v352 = (float)(v244 + (float)((float)((float)(v243 + (float)(v253 * -0.744)) + (float)(v244 * 0.744)) * -0.744))
       + (float)(v245 * 0.744);
  v351 = v254;
  v5[189] = *(float *)&v346[428];
  v5[190] = *(float *)&v346[426];
  v350 = (float)(v246 + (float)(v254 * -0.744)) + (float)(v247 * 0.744);
  v349 = (float)(v247 + (float)(v350 * -0.744)) + (float)(v314 * 0.744);
  v5[191] = *(float *)&v346[424];
  v257 = v255 + (float)(v28 * 0.00084837);
  v258 = v256 + (float)(v28 * -0.0010776);
  v259 = v5[132];
  v260 = v5[133];
  do
  {
    v261 = *(float *)((char *)&v374 + v165);
    v262 = v257 + (float)(v261 * 0.0347);
    v257 = v261 + (float)(v262 * -0.0347);
    *(float *)((char *)&v374 + v165) = v262;
    v165 += 4;
  }
  while (v165 != 960);
  v263 = 0;
  v264 = (float)((float)(v259 + (float)(v145 * -0.0017069)) + (float)(v149 * 0.0013678)) + (float)(v153 * -0.0011274);
  v265 = (float)((float)(v260 + (float)(v145 * -0.0011274)) + (float)(v149 * 0.00091257)) + (float)(v153 * 0.0010309);
  v5[128] = v257;
  do
  {
    v266 = *(float *)((char *)&v374 + v263);
    v267 = v258 + (float)(v266 * 0.3826);
    v258 = v266 + (float)(v267 * -0.3826);
    *(float *)((char *)&v374 + v263) = v267;
    v263 += 4;
  }
  while (v263 != 960);
  v268 = 0;
  v269 = v264 + (float)(v157 * 0.00091257);
  v5[129] = v258;
  do
  {
    v270 = *(float *)((char *)&v349 + v268);
    v271 = v269 + (float)(v270 * 0.1544);
    v269 = v270 + (float)(v271 * -0.1544);
    *(float *)((char *)&v349 + v268) = v271;
    v268 += 4;
  }
  while (v268 != 960);
  v272 = 0;
  v273 = v265 + (float)(v157 * -0.00082615);
  v5[132] = v269;
  do
  {
    v274 = *(float *)((char *)&v349 + v272);
    v275 = v273 + (float)(v274 * 0.744);
    v273 = v274 + (float)(v275 * -0.744);
    *(float *)((char *)&v349 + v272) = v275;
    v272 += 4;
  }
  while (v272 != 960);
  v5[133] = v273;
  if ((unint64_t)(v2 - v1) >= 0x10)
  {
    v279 = 0;
    v280.i64[0] = 0x3F0000003F000000;
    v280.i64[1] = 0x3F0000003F000000;
    do
    {
      v281 = *(float32x4_t *)((char *)&v374 + v279);
      v282 = *(float32x4_t *)((char *)&v349 + v279);
      *(float32x4_t *)(v1 + v279) = vmulq_f32(vaddq_f32(v281, v282), v280);
      *(float32x4_t *)(v2 + v279) = vmulq_f32(vsubq_f32(v281, v282), v280);
      v279 += 16;
    }
    while (v279 != 960);
  }
  else
  {
    for (k = 0; k != 960; k += 4)
    {
      v277 = *(float *)((char *)&v374 + k);
      v278 = *(float *)((char *)&v349 + k);
      *(float *)(v1 + k) = (float)(v277 + v278) * 0.5;
      *(float *)(v2 + k) = (float)(v277 - v278) * 0.5;
    }
  }
  v283 = (const float *)v346;
  for (m = 16; m != 976; m += 32)
  {
    v285 = v283 - 8;
    v399 = vld2q_f32(v285);
    v400 = vld2q_f32(v283);
    v286 = (float32x4_t *)((char *)&v374 + m);
    v286[-1] = v399.val[1];
    *v286 = v400.val[1];
    v287 = (float32x4_t *)((char *)&v349 + m);
    v287[-1] = v399.val[0];
    *v287 = v400.val[0];
    v283 += 16;
  }
  v288 = 0;
  v289 = v5[136];
  do
  {
    v290 = *(float *)((char *)&v374 + v288);
    v291 = v289 + (float)(v290 * 0.0347);
    v289 = v290 + (float)(v291 * -0.0347);
    *(float *)((char *)&v374 + v288) = v291;
    v288 += 4;
  }
  while (v288 != 960);
  v292 = 0;
  v5[136] = v289;
  v293 = v5[137];
  do
  {
    v294 = *(float *)((char *)&v374 + v292);
    v295 = v293 + (float)(v294 * 0.3826);
    v293 = v294 + (float)(v295 * -0.3826);
    *(float *)((char *)&v374 + v292) = v295;
    v292 += 4;
  }
  while (v292 != 960);
  v296 = 0;
  v5[137] = v293;
  v297 = v5[140];
  do
  {
    v298 = *(float *)((char *)&v349 + v296);
    v299 = v297 + (float)(v298 * 0.1544);
    v297 = v298 + (float)(v299 * -0.1544);
    *(float *)((char *)&v349 + v296) = v299;
    v296 += 4;
  }
  while (v296 != 960);
  v300 = 0;
  v5[140] = v297;
  v301 = v5[141];
  do
  {
    v302 = *(float *)((char *)&v349 + v300);
    v303 = v301 + (float)(v302 * 0.744);
    v301 = v302 + (float)(v303 * -0.744);
    *(float *)((char *)&v349 + v300) = v303;
    v300 += 4;
  }
  while (v300 != 960);
  v5[141] = v301;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x20)
  {
    v308 = 0;
    v309.i64[0] = 0x3F0000003F000000;
    v309.i64[1] = 0x3F0000003F000000;
    do
    {
      v310 = *(float32x4_t *)((char *)&v374 + v308);
      v311 = *(float32x4_t *)((char *)&v349 + v308);
      v312 = vmulq_f32(vaddq_f32(v310, v311), v309);
      *v3 = vcvtq_f64_f32(*(float32x2_t *)v312.f32);
      v3[1] = vcvt_hight_f64_f32(v312);
      v3 += 2;
      v313 = vmulq_f32(vsubq_f32(v310, v311), v309);
      *v4 = vcvtq_f64_f32(*(float32x2_t *)v313.f32);
      v4[1] = vcvt_hight_f64_f32(v313);
      v4 += 2;
      v308 += 16;
    }
    while (v308 != 960);
  }
  else
  {
    for (n = 0; n != 240; ++n)
    {
      v305 = *(&v374 + n);
      v306 = *(&v349 + n);
      v307 = n;
      v3->f64[v307] = (float)((float)(v305 + v306) * 0.5);
      v4->f64[v307] = (float)((float)(v305 - v306) * 0.5);
    }
  }
  return result;
}

BOOL webrtc::IvfFileWriter::WriteHeader(webrtc::IvfFileWriter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  int v10;
  int v11;
  uint64_t v12;
  size_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t __ptr;
  int v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  char v29;
  __int16 v30;
  char v31;
  char v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (fseek(*((FILE **)this + 9), 0, 0))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/ivf_file_writer.cc");
    return 0;
  }
  else
  {
    v24 = 0;
    __ptr = 0x20000046494B44;
    switch(*(_DWORD *)this)
    {
      case 1:
        v10 = 808996950;
        goto LABEL_12;
      case 2:
        v10 = 809062486;
        goto LABEL_12;
      case 3:
        v10 = 825251393;
        goto LABEL_12;
      case 4:
        v10 = 875967048;
        goto LABEL_12;
      case 5:
        v10 = 892744264;
LABEL_12:
        v24 = v10;
        break;
      default:
        v24 = 707406378;
        break;
    }
    v25 = *((_DWORD *)this + 8);
    if (*((_BYTE *)this + 48))
      v11 = 1000;
    else
      v11 = 90000;
    v26 = v11;
    v27 = BYTE2(v11);
    v28 = 256;
    v29 = 0;
    v12 = *((_QWORD *)this + 3);
    v30 = v12;
    v31 = BYTE2(v12);
    v32 = BYTE3(v12);
    v33 = 0;
    v13 = fwrite(&__ptr, 1uLL, 0x20uLL, *((FILE **)this + 9));
    v9 = v13 == 32;
    if (v13 == 32)
    {
      if (*((_QWORD *)this + 1) <= 0x1FuLL)
        *((_QWORD *)this + 1) = 32;
    }
    else
    {
      v14 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>();
      if ((v14 & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/ivf_file_writer.cc");
    }
  }
  return v9;
}

uint64_t webrtc::IvfFileWriter::WriteFrame(webrtc::IvfFileWriter *this, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const unsigned __int8 *v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;

  if (!*((_QWORD *)this + 9))
    return 0;
  if (!*((_QWORD *)this + 3))
  {
    if (*(_DWORD *)a2 && (v8 = *(_DWORD *)(a2 + 4)) != 0)
    {
      *((_WORD *)this + 16) = *(_DWORD *)a2;
    }
    else
    {
      *((_WORD *)this + 16) = 1280;
      LOWORD(v8) = 720;
    }
    *((_WORD *)this + 17) = v8;
    *((_BYTE *)this + 48) = *(_DWORD *)(a2 + 152) == 0;
    *(_DWORD *)this = a3;
    result = webrtc::IvfFileWriter::WriteHeader(this);
    if (!(_DWORD)result)
      return result;
    if (*(_DWORD *)this >= 6u)
      rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)result);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/ivf_file_writer.cc");
  }
  if (*((_BYTE *)this + 48))
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *((_QWORD *)this + 5);
    if (v6 == -1)
      goto LABEL_29;
    goto LABEL_26;
  }
  v9 = *(_DWORD *)(a2 + 152);
  if (*((_BYTE *)this + 68))
  {
    v10 = *((_DWORD *)this + 16);
    v11 = v9 >= v10;
    v12 = v9 - v10;
    v13 = (_DWORD)v12 != 0 && v11;
    if ((_DWORD)v12 != 0x80000000)
      v13 = (int)v12 >= 0;
    if (!v13)
      v12 |= 0xFFFFFFFF00000000;
    v5 = v12 + *((_QWORD *)this + 7);
  }
  else
  {
    v5 = *(unsigned int *)(a2 + 152);
  }
  *((_QWORD *)this + 7) = v5;
  *((_DWORD *)this + 16) = v9;
  *((_BYTE *)this + 68) = 1;
  v6 = *((_QWORD *)this + 5);
  if (v6 != -1)
  {
LABEL_26:
    if (v5 < v6 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/ivf_file_writer.cc");
  }
LABEL_29:
  *((_QWORD *)this + 5) = v5;
  v28 = *(_QWORD *)(a2 + 184);
  if ((v28 & 0xFF00000000) != 0)
    v29 = (int)v28;
  else
    v29 = 0;
  v30 = *(_QWORD *)(a2 + 136);
  if (v30)
    v31 = (const unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
  else
    v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = (uint64_t *)(a2 + 208);
  while (*v34)
  {
    while (1)
    {
      v35 = a2 + 208;
      v36 = *v34;
      do
      {
        v37 = *(_DWORD *)(v36 + 32);
        v38 = v37 < (int)v32;
        if (v37 >= (int)v32)
          v39 = (uint64_t *)v36;
        else
          v39 = (uint64_t *)(v36 + 8);
        if (!v38)
          v35 = v36;
        v36 = *v39;
      }
      while (*v39);
      if ((uint64_t *)v35 != v34 && *(_DWORD *)(v35 + 32) <= (int)v32)
      {
        v40 = *(_QWORD *)(v35 + 40);
        if (v40)
          break;
      }
      if (++v32 > v29)
        goto LABEL_55;
    }
    result = webrtc::IvfFileWriter::WriteOneSpatialLayer(this, v5, v31, *(_QWORD *)(v35 + 40));
    v31 += v40;
    ++v32;
    v33 = 1;
    if ((_DWORD)result)
      v41 = v32 > v29;
    else
      v41 = 1;
    if (v41)
      return result;
  }
LABEL_55:
  if ((v33 & 1) != 0)
    return 1;
  else
    return webrtc::IvfFileWriter::WriteOneSpatialLayer(this, v5, v31, *(_QWORD *)(a2 + 144));
}

uint64_t webrtc::IvfFileWriter::WriteOneSpatialLayer(webrtc::IvfFileWriter *this, uint64_t a2, const unsigned __int8 *a3, size_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 __ptr;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v7 = *((_QWORD *)this + 2);
  if (v7 && a4 + *((_QWORD *)this + 1) + 12 > v7)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/ivf_file_writer.cc");
    result = *((_QWORD *)this + 9);
    if (result)
    {
      if (!*((_QWORD *)this + 3) || (webrtc::IvfFileWriter::WriteHeader(this), (result = *((_QWORD *)this + 9)) != 0))
      {
        fclose((FILE *)result);
        result = 0;
        *((_QWORD *)this + 9) = 0;
      }
    }
  }
  else
  {
    __ptr = a4;
    v24 = BYTE2(a4);
    v25 = BYTE3(a4);
    v26 = a2;
    if (fwrite(&__ptr, 1uLL, 0xCuLL, *((FILE **)this + 9)) == 12 && fwrite(a3, 1uLL, a4, *((FILE **)this + 9)) == a4)
    {
      *((_QWORD *)this + 1) += a4 + 12;
      ++*((_QWORD *)this + 3);
      return 1;
    }
    else
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/ivf_file_writer.cc");
      return 0;
    }
  }
  return result;
}

double webrtc::JitterEstimator::JitterEstimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *p_p;
  double *v11;
  double *v12;
  double *v13;
  _QWORD *v14;
  uint64_t *v15;
  void *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  double *v39;
  float v40;
  _OWORD *v41;
  std::string *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *__p;
  unint64_t v48;
  unsigned __int8 v49;

  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a3 + 16))(&__p, a3, "WebRTC-JitterEstimatorConfig", 28);
  if ((char)v49 < 0)
  {
    if ((v48 & 0x8000000000000000) != 0)
      goto LABEL_73;
    p_p = __p;
    v9 = v48;
    if (v48)
    {
      if (!__p)
        goto LABEL_73;
    }
  }
  else
  {
    v9 = v49;
    p_p = &__p;
  }
  v45 = (uint64_t)p_p;
  v46 = v9;
  v44 = a2;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v11 = (double *)(a1 + 32);
  *(_BYTE *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  v12 = (double *)(a1 + 48);
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  v13 = (double *)(a1 + 64);
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  v14 = operator new(0x100uLL);
  *v14 = "avg_frame_size_median";
  v14[1] = a1;
  v14[2] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v14[3] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v14[4] = "max_frame_size_percentile";
  v14[5] = a1 + 8;
  v14[6] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Parse;
  v14[7] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Encode;
  v14[8] = "frame_size_window";
  v14[9] = a1 + 24;
  v14[10] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Parse;
  v14[11] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Encode;
  v14[12] = "num_stddev_delay_clamp";
  v14[13] = a1 + 32;
  v14[14] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Parse;
  v14[15] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Encode;
  v14[16] = "num_stddev_delay_outlier";
  v14[17] = a1 + 48;
  v14[18] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Parse;
  v14[19] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Encode;
  v14[20] = "num_stddev_size_outlier";
  v14[21] = a1 + 64;
  v14[22] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Parse;
  v14[23] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Encode;
  v14[24] = "congestion_rejection_factor";
  v14[25] = a1 + 80;
  v14[26] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Parse;
  v14[27] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Encode;
  v14[28] = "estimate_noise_when_congested";
  v14[29] = a1 + 96;
  v14[30] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v14[31] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v15 = (uint64_t *)operator new();
  *v15 = (uint64_t)v14;
  v15[1] = (uint64_t)(v14 + 32);
  v15[2] = (uint64_t)(v14 + 32);
  webrtc::StructParametersParser::Parse(v15, v45, v46);
  v16 = (void *)*v15;
  if (*v15)
  {
    v15[1] = (uint64_t)v16;
    operator delete(v16);
  }
  MEMORY[0x20BD0ADEC](v15, 0x20C40960023A9);
  if (*(_BYTE *)(a1 + 16))
  {
    v17 = *(double *)(a1 + 8);
    v18 = fmax(v17, 0.0);
    if (v18 > 1.0)
      v18 = 1.0;
    *(double *)(a1 + 8) = v18;
    *(_BYTE *)(a1 + 16) = 1;
    if (v18 != v17 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\a", v19, v20, v21, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/timing/jitter_estimator.cc");
  }
  if (*(_BYTE *)(a1 + 28) && *(int *)(a1 + 24) <= 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 28))
        goto LABEL_73;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v22, v23, v24, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/timing/jitter_estimator.cc");
    }
    *(_DWORD *)(a1 + 24) = 1;
    *(_BYTE *)(a1 + 28) = 1;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    if (*v11 == 0.0)
      v25 = 0;
    else
      v25 = -127;
    if (*v11 > 0.0)
      v25 = 1;
    if (*v11 < 0.0)
      v25 = -1;
    if (v25 != -127 && (v25 & 0x80) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        if (!*(_BYTE *)(a1 + 40))
          goto LABEL_73;
        rtc::webrtc_logging_impl::Log("\r\t\a", v26, v27, v28, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/timing/jitter_estimator.cc");
      }
      *(_QWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
  }
  if (*(_BYTE *)(a1 + 56))
  {
    if (*v12 == 0.0)
      v29 = 0;
    else
      v29 = -127;
    if (*v12 > 0.0)
      v29 = 1;
    if (*v12 < 0.0)
      v29 = -1;
    if (v29 != -127 && (v29 & 0x80) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        if (!*(_BYTE *)(a1 + 56))
          goto LABEL_73;
        rtc::webrtc_logging_impl::Log("\r\t\a", v30, v31, v32, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/timing/jitter_estimator.cc");
      }
      *(_QWORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 56) = 1;
    }
  }
  if (*(_BYTE *)(a1 + 72))
  {
    if (*v13 == 0.0)
      v33 = 0;
    else
      v33 = -127;
    if (*v13 > 0.0)
      v33 = 1;
    if (*v13 < 0.0)
      v33 = -1;
    if (v33 != -127 && (v33 & 0x80) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      {
LABEL_61:
        *(_QWORD *)(a1 + 64) = 0;
        *(_BYTE *)(a1 + 72) = 1;
        goto LABEL_62;
      }
      if (*(_BYTE *)(a1 + 72))
      {
        rtc::webrtc_logging_impl::Log("\r\t\a", v34, v35, v36, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/timing/jitter_estimator.cc");
        goto LABEL_61;
      }
LABEL_73:
      __break(1u);
LABEL_74:
      rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/moving_percentile_filter.h", 70, "window_size > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v5, v6, v7, v8, 0);
LABEL_75:
      rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/percentile_filter.h", 63, "percentile >= 0.0f", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double> const&)::t, v5, v6, v7, v8, COERCE__INT64(v40));
      goto LABEL_76;
    }
  }
LABEL_62:
  if ((char)v49 < 0)
    operator delete(__p);
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 104) = xmmword_208F0A070;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0x3F1A36E2EB1C432DLL;
  *(_OWORD *)(a1 + 144) = xmmword_208F0A080;
  *(_QWORD *)(a1 + 160) = 0x3DDB7CDFD9D7BDBBLL;
  if (*(_BYTE *)(a1 + 28))
    v37 = (int *)(a1 + 24);
  else
  v38 = *v37;
  *(_DWORD *)(a1 + 192) = 1056964608;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 208;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 240;
  *(_QWORD *)(a1 + 248) = a1 + 240;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = v38;
  if (!(_DWORD)v38)
    goto LABEL_74;
  v39 = (double *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 16))
  v40 = *v39;
  *(float *)(a1 + 280) = v40;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 296;
  *(_QWORD *)(a1 + 320) = 0;
  if (v40 < 0.0)
    goto LABEL_75;
  if (v40 <= 1.0)
  {
    *(_QWORD *)(a1 + 328) = a1 + 328;
    *(_QWORD *)(a1 + 336) = a1 + 328;
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = v38;
    *(_BYTE *)(a1 + 384) = 0;
    *(_BYTE *)(a1 + 392) = 0;
    *(_BYTE *)(a1 + 400) = 0;
    *(_BYTE *)(a1 + 408) = 0;
    *(_BYTE *)(a1 + 416) = 0;
    *(_BYTE *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 456) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    *(_BYTE *)(a1 + 524) = 0;
    *(_QWORD *)(a1 + 528) = 10;
    *(_QWORD *)(a1 + 576) = 10;
    *(_BYTE *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 504) = 0;
    *(_QWORD *)(a1 + 512) = 0;
    *(_QWORD *)(a1 + 496) = 0;
    *(_DWORD *)(a1 + 520) = 1;
    *(_QWORD *)(a1 + 568) = 0;
    *(_OWORD *)(a1 + 536) = 0u;
    *(_OWORD *)(a1 + 552) = 0u;
    *(_QWORD *)(a1 + 616) = 0;
    *(_OWORD *)(a1 + 584) = 0u;
    *(_OWORD *)(a1 + 600) = 0u;
    v41 = operator new(0xF0uLL);
    *(_QWORD *)(a1 + 712) = v41;
    *(_QWORD *)(a1 + 728) = v41 + 15;
    *v41 = 0u;
    v41[1] = 0u;
    v41[2] = 0u;
    v41[3] = 0u;
    v41[4] = 0u;
    v41[5] = 0u;
    v41[6] = 0u;
    v41[7] = 0u;
    v41[8] = 0u;
    v41[9] = 0u;
    v41[10] = 0u;
    v41[11] = 0u;
    v41[12] = 0u;
    v41[13] = 0u;
    v41[14] = 0u;
    *(_QWORD *)(a1 + 720) = v41 + 15;
    *(_QWORD *)(a1 + 696) = 0;
    *(_BYTE *)(a1 + 704) = 0;
    *(_BYTE *)(a1 + 688) = 0;
    *(_OWORD *)(a1 + 656) = 0u;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 624) = xmmword_208F08CC0;
    *(_OWORD *)(a1 + 640) = 0u;
    *(_QWORD *)(a1 + 736) = v44;
    return webrtc::JitterEstimator::Reset((webrtc::JitterEstimator *)a1);
  }
LABEL_76:
  v43 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/percentile_filter.h", 64, "percentile <= 1.0f", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double> const&)::t, v5, v6, v7, v8, COERCE__INT64(v40));
  return webrtc::JitterEstimator::Reset((webrtc::JitterEstimator *)v43);
}

double webrtc::JitterEstimator::Reset(webrtc::JitterEstimator *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  webrtc::JitterEstimator *v9;
  uint64_t v10;
  uint64_t v11;
  webrtc::JitterEstimator *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  double result;

  v3 = (_QWORD *)((char *)this + 208);
  v2 = (_QWORD *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 23) = 0x407F400000000000;
  *(_OWORD *)((char *)this + 168) = xmmword_208F0B2E0;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 200, v2);
  *(v3 - 1) = v3;
  *v3 = 0;
  v3[1] = 0;
  v3[2] = v3;
  v3[3] = 0;
  if (v3[6])
  {
    v4 = v3 + 4;
    v6 = *((_QWORD *)this + 30);
    v5 = (uint64_t *)*((_QWORD *)this + 31);
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 32) = 0;
    if (v5 != v4)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v4);
    }
  }
  *((_QWORD *)this + 33) = 0;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 288, *((_QWORD **)this + 37));
  *((_QWORD *)this + 36) = (char *)this + 296;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = (char *)this + 296;
  *((_QWORD *)this + 40) = 0;
  if (*((_QWORD *)this + 43))
  {
    v10 = *((_QWORD *)this + 41);
    v9 = (webrtc::JitterEstimator *)*((_QWORD *)this + 42);
    v11 = *(_QWORD *)v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *((_QWORD *)this + 43) = 0;
    if (v9 != (webrtc::JitterEstimator *)((char *)this + 328))
    {
      do
      {
        v12 = (webrtc::JitterEstimator *)*((_QWORD *)v9 + 1);
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (webrtc::JitterEstimator *)((char *)this + 328));
    }
  }
  *((_QWORD *)this + 44) = 0;
  if (*((_BYTE *)this + 392))
    *((_BYTE *)this + 392) = 0;
  if (*((_BYTE *)this + 408))
    *((_BYTE *)this + 408) = 0;
  if (*((_BYTE *)this + 424))
    *((_BYTE *)this + 424) = 0;
  *((_OWORD *)this + 27) = xmmword_208F0B2F0;
  *((_QWORD *)this + 56) = 1;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_BYTE *)this + 488) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_DWORD *)this + 130) = 1;
  v13 = *((_QWORD *)this + 66);
  if ((uint64_t)((4 * v13) & 0xFFFFFFFFFFFFFFF8) >= 1)
  {
    if ((v13 & 1) != 0)
      v14 = (char *)*((_QWORD *)this + 67);
    else
      v14 = (char *)this + 536;
    bzero(v14, 8 * (((unint64_t)(4 * v13) >> 3) - ((unint64_t)(4 * v13) > 7)) + 8);
  }
  v15 = *((_QWORD *)this + 72);
  if ((uint64_t)((4 * v15) & 0xFFFFFFFFFFFFFFF8) >= 1)
  {
    if ((v15 & 1) != 0)
      v16 = (char *)*((_QWORD *)this + 73);
    else
      v16 = (char *)this + 584;
    bzero(v16, 8 * (((unint64_t)(4 * v15) >> 3) - ((unint64_t)(4 * v15) > 7)) + 8);
  }
  *((_QWORD *)this + 87) = 0;
  *((_BYTE *)this + 704) = 0;
  *((_OWORD *)this + 39) = xmmword_208F08CC0;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_BYTE *)this + 688) = 0;
  *(_OWORD *)((char *)this + 104) = xmmword_208F0A070;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 15) = 0x3F1A36E2EB1C432DLL;
  result = 100.0;
  *((_OWORD *)this + 9) = xmmword_208F0A080;
  *((_QWORD *)this + 20) = 0x3DDB7CDFD9D7BDBBLL;
  return result;
}

void webrtc::JitterEstimator::~JitterEstimator(webrtc::JitterEstimator *this)
{
  void *v2;
  webrtc::JitterEstimator *v3;
  uint64_t v4;
  uint64_t v5;
  webrtc::JitterEstimator *v6;
  webrtc::JitterEstimator *v7;
  uint64_t v8;
  uint64_t v9;
  webrtc::JitterEstimator *v10;

  v2 = (void *)*((_QWORD *)this + 89);
  if (v2)
  {
    *((_QWORD *)this + 90) = v2;
    operator delete(v2);
  }
  if ((*((_BYTE *)this + 576) & 1) == 0)
  {
    if ((*((_BYTE *)this + 528) & 1) == 0)
      goto LABEL_5;
LABEL_8:
    operator delete(*((void **)this + 67));
    if (!*((_QWORD *)this + 43))
      goto LABEL_11;
    goto LABEL_9;
  }
  operator delete(*((void **)this + 73));
  if ((*((_BYTE *)this + 528) & 1) != 0)
    goto LABEL_8;
LABEL_5:
  if (!*((_QWORD *)this + 43))
    goto LABEL_11;
LABEL_9:
  v4 = *((_QWORD *)this + 41);
  v3 = (webrtc::JitterEstimator *)*((_QWORD *)this + 42);
  v5 = *(_QWORD *)v3;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
  **(_QWORD **)(v4 + 8) = v5;
  *((_QWORD *)this + 43) = 0;
  if (v3 != (webrtc::JitterEstimator *)((char *)this + 328))
  {
    do
    {
      v6 = (webrtc::JitterEstimator *)*((_QWORD *)v3 + 1);
      operator delete(v3);
      v3 = v6;
    }
    while (v6 != (webrtc::JitterEstimator *)((char *)this + 328));
  }
LABEL_11:
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 288, *((_QWORD **)this + 37));
  if (*((_QWORD *)this + 32))
  {
    v8 = *((_QWORD *)this + 30);
    v7 = (webrtc::JitterEstimator *)*((_QWORD *)this + 31);
    v9 = *(_QWORD *)v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *((_QWORD *)this + 32) = 0;
    if (v7 != (webrtc::JitterEstimator *)((char *)this + 240))
    {
      do
      {
        v10 = (webrtc::JitterEstimator *)*((_QWORD *)v7 + 1);
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (webrtc::JitterEstimator *)((char *)this + 240));
    }
  }
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
}

void webrtc::JitterEstimator::UpdateEstimate(webrtc::JitterEstimator *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double v30;
  double *v31;
  double *v32;
  double v33;
  double v34;
  int64_t v35;
  uint64_t v36;
  double v37;
  unint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;

  if (!a3)
    return;
  if (*((_BYTE *)this + 424))
  {
    v6 = *((_QWORD *)this + 52);
    v7 = *((_QWORD *)this + 47);
    v8 = (double)a3;
    if (v7 <= 4)
    {
LABEL_4:
      *((double *)this + 46) = *((double *)this + 46) + v8;
      v9 = v7 + 1;
      goto LABEL_8;
    }
  }
  else
  {
    v6 = 0;
    v7 = *((_QWORD *)this + 47);
    v8 = (double)a3;
    if (v7 <= 4)
      goto LABEL_4;
  }
  if (v7 != 5)
    goto LABEL_9;
  *((double *)this + 21) = *((double *)this + 46) / 5.0;
  v9 = 6;
LABEL_8:
  *((_QWORD *)this + 47) = v9;
LABEL_9:
  v11 = *((double *)this + 21);
  v10 = *((double *)this + 22);
  v12 = v8 * 0.03 + v11 * 0.97;
  v13 = sqrt(v10);
  if (v11 + v13 + v13 > v8)
    *((double *)this + 21) = v12;
  v14 = (v8 - v12) * (v8 - v12) * 0.03 + v10 * 0.97;
  if (v14 < 1.0)
    v14 = 1.0;
  v15 = *((double *)this + 23) * 0.9999;
  if (v15 < v8)
    v15 = v8;
  *((double *)this + 22) = v14;
  *((double *)this + 23) = v15;
  if (*(_BYTE *)this)
  {
    v46 = a3;
    webrtc::MovingPercentileFilter<long long>::Insert((_QWORD *)this + 24, &v46);
  }
  if (*((_BYTE *)this + 16))
  {
    v46 = a3;
    webrtc::MovingPercentileFilter<long long>::Insert((_QWORD *)this + 35, &v46);
  }
  if (!*((_BYTE *)this + 424))
  {
    *((_BYTE *)this + 424) = 1;
    *((_QWORD *)this + 52) = a3;
    return;
  }
  v16 = (double)(a3 - v6);
  *((_QWORD *)this + 52) = a3;
  v17 = (double *)((char *)this + 32);
  if (!*((_BYTE *)this + 40))
  v18 = sqrt(*((double *)this + 55));
  v19 = (*v17 * v18 + 0.5) * 1000.0;
  v20 = 0x8000000000000000;
  if (v19 == INFINITY)
  {
    v21 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v21 = (uint64_t)v19;
    if (v19 == -INFINITY || v21 == 0x8000000000000000)
    {
      v20 = 0x7FFFFFFFFFFFFFFFLL;
      v21 = 0x8000000000000000;
    }
    else if (v21 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v20 = -v21;
    }
  }
  if (a2 < v21)
    v21 = a2;
  if (v21 <= v20)
    v23 = v20;
  else
    v23 = v21;
  v24 = v23 / 0x3E8uLL;
  if (v23 % 0x3E8uLL > 0x1F3)
    ++v24;
  if (-v23 % 0x3E8uLL <= 0x1F4)
    v25 = 0;
  else
    v25 = -1;
  if (v23 < 0)
    v24 = v25 - -v23 / 0x3E8uLL;
  v26 = (double)v24;
  v27 = *((double *)this + 13) * v16 + *((double *)this + 14);
  v28 = (double)v24 - v27;
  v29 = (double *)((char *)this + 48);
  if (!*((_BYTE *)this + 56))
  v30 = *v29;
  if (vabdd_f64(v26, v27) >= v18 * *v29)
  {
    v31 = (double *)((char *)this + 64);
    if (!*((_BYTE *)this + 72))
    if (*((double *)this + 21) + *v31 * sqrt(*((double *)this + 22)) >= v8)
    {
      if (v28 < 0.0)
        v37 = -v30;
      else
        v37 = v30;
      v28 = v18 * v37;
LABEL_70:
      webrtc::JitterEstimator::EstimateRandomJitter(this, v28);
      goto LABEL_71;
    }
  }
  v32 = (double *)((char *)this + 80);
  if (!*((_BYTE *)this + 88))
  v33 = *v32;
  if (*((_BYTE *)this + 16))
  {
    if (*((_QWORD *)this + 38))
    {
      v34 = (double)*(uint64_t *)(*((_QWORD *)this + 39) + 32);
      if (v33 * v34 >= v16)
      {
LABEL_69:
        if (!*((_BYTE *)this + 96))
          goto LABEL_71;
        goto LABEL_70;
      }
    }
    else
    {
      v34 = 0.0;
      if (v33 * 0.0 >= v16)
        goto LABEL_69;
    }
  }
  else
  {
    v34 = *((double *)this + 23);
    if (v33 * v34 >= v16)
      goto LABEL_69;
  }
  webrtc::JitterEstimator::EstimateRandomJitter(this, v28);
  v35 = v23 / 0x3E8uLL;
  if (v23 % 0x3E8uLL > 0x1F3)
    ++v35;
  if (-v23 % 0x3E8uLL <= 0x1F4)
    v36 = 0;
  else
    v36 = -1;
  if (v23 < 0)
    v35 = v36 - -v23 / 0x3E8uLL;
  webrtc::FrameDelayVariationKalmanFilter::PredictAndUpdate((webrtc::JitterEstimator *)((char *)this + 104), (double)v35, v16, v34, *((double *)this + 55));
LABEL_71:
  v38 = *((_QWORD *)this + 58);
  if (v38 < 0x1E)
  {
    *((_QWORD *)this + 58) = v38 + 1;
    return;
  }
  if (*(_BYTE *)this)
  {
    if (*((_QWORD *)this + 27))
    {
      v39 = (double)*(uint64_t *)(*((_QWORD *)this + 28) + 32);
      if (!*((_BYTE *)this + 16))
        goto LABEL_81;
LABEL_78:
      if (*((_QWORD *)this + 38))
        v40 = (double)*(uint64_t *)(*((_QWORD *)this + 39) + 32);
      else
        v40 = 0.0;
      goto LABEL_83;
    }
    v39 = 0.0;
    if (*((_BYTE *)this + 16))
      goto LABEL_78;
  }
  else
  {
    v39 = *((double *)this + 21);
    if (*((_BYTE *)this + 16))
      goto LABEL_78;
  }
LABEL_81:
  v40 = *((double *)this + 23);
LABEL_83:
  v41 = *((double *)this + 13) * (v40 - v39);
  v42 = sqrt(*((double *)this + 55)) * 2.33 + -30.0;
  if (v42 < 1.0)
    v42 = 1.0;
  v43 = (v41 + v42) * 1000.0;
  if (v43 == INFINITY)
    goto LABEL_86;
  if (v43 == -INFINITY || (v44 = (uint64_t)v43, (uint64_t)v43 <= 999))
  {
    v45 = (unint64_t *)((char *)this + 400);
    if (!*((_BYTE *)this + 408))
    v44 = *v45;
    goto LABEL_92;
  }
  if (v44 > 0x989680)
LABEL_86:
    v44 = 10000000;
LABEL_92:
  if (!*((_BYTE *)this + 408))
    *((_BYTE *)this + 408) = 1;
  *((_QWORD *)this + 50) = v44;
  *((_QWORD *)this + 57) = v44;
}

void webrtc::MovingPercentileFilter<long long>::Insert(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  webrtc::PercentileFilter<long long>::Insert((uint64_t)a1, a2);
  v4 = operator new(0x18uLL);
  v5 = *a2;
  v6 = a1[6];
  v4[1] = a1 + 6;
  v4[2] = v5;
  *v4 = v6;
  *(_QWORD *)(v6 + 8) = v4;
  a1[6] = v4;
  v7 = a1[8] + 1;
  v8 = a1[9] + 1;
  a1[8] = v7;
  a1[9] = v8;
  if (v8 > a1[10])
  {
    if (v7 && (webrtc::PercentileFilter<long long>::Erase((uint64_t)a1, (uint64_t *)(a1[7] + 16)), (v9 = a1[8]) != 0))
    {
      v10 = (uint64_t *)a1[7];
      v11 = *v10;
      *(_QWORD *)(v11 + 8) = v10[1];
      *(_QWORD *)v10[1] = v11;
      a1[8] = v9 - 1;
      operator delete(v10);
      --a1[9];
    }
    else
    {
      __break(1u);
    }
  }
}

void webrtc::JitterEstimator::EstimateRandomJitter(webrtc::JitterEstimator *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  std::string *v38;
  uint64_t v39;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 92) + 16))(*((_QWORD *)this + 92));
  if (!*((_BYTE *)this + 392))
  {
    *((_BYTE *)this + 392) = 1;
    *((_QWORD *)this + 48) = v4;
    v23 = *((_QWORD *)this + 56);
    if (!v23)
      return;
LABEL_33:
    v29 = (double)(v23 - 1) / (double)v23;
    if (v23 + 1 < 0x190)
      v30 = v23 + 1;
    else
      v30 = 400;
    *((_QWORD *)this + 56) = v30;
    if (*((_QWORD *)this + 78))
    {
      v31 = *((double *)this + 81);
      if (v31 == INFINITY)
        goto LABEL_53;
      if (v31 == -INFINITY || (v32 = (uint64_t)v31, (uint64_t)v31 < 1))
      {
LABEL_49:
        v35 = *((double *)this + 54);
        v36 = (1.0 - v29) * a2 + v29 * v35;
        v37 = (a2 - v35) * ((1.0 - v29) * (a2 - v35)) + v29 * *((double *)this + 55);
        if (v37 < 1.0)
          v37 = 1.0;
        *((double *)this + 54) = v36;
        *((double *)this + 55) = v37;
        return;
      }
    }
    else
    {
      v32 = (uint64_t)0.0;
      if ((uint64_t)0.0 < 1)
        goto LABEL_49;
    }
    if (v32 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v33 = 0x3B9ACA00 / v32;
      if (v33 >= 0x30D40)
        v33 = 200000;
      if (v33)
      {
        v34 = 30000.0 / (double)(uint64_t)v33;
        if (v30 <= 0x1D)
          v34 = ((double)(30 - v30) + (double)v30 * v34) / 30.0;
        v29 = pow(v29, v34);
      }
      goto LABEL_49;
    }
LABEL_53:
    v38 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/api/units/frequency.h", 66, "interval.IsFinite()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v5, v6, v7, v8, v39);
    webrtc::JitterEstimator::GetJitterEstimate(v38);
    return;
  }
  v9 = *((_QWORD *)this + 48);
  v10 = 0x7FFFFFFFFFFFFFFFLL;
  if (v4 != 0x7FFFFFFFFFFFFFFFLL && v9 != 0x8000000000000000)
  {
    if (v9 == 0x7FFFFFFFFFFFFFFFLL || v4 == 0x8000000000000000)
      v10 = 0x8000000000000000;
    else
      v10 = v4 - v9;
  }
  v13 = *((_QWORD *)this + 78);
  v14 = *((_QWORD *)this + 89);
  v15 = (*((_QWORD *)this + 90) - v14) >> 3;
  v16 = *((_QWORD *)this + 84);
  if (v13 == v15)
  {
    if (v13 <= v16)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v17 = *(_QWORD *)(v14 + 8 * v16);
    v18 = v13 - 1;
    *((_QWORD *)this + 78) = v18;
    v19 = *((double *)this + 81);
    v20 = (double)v17 - v19;
    v21 = v19 - v20 / (double)v18;
    *((double *)this + 81) = v21;
    *((double *)this + 82) = *((double *)this + 82) - v20 * ((double)v17 - v21);
    if (v17 >= *((_QWORD *)this + 85))
      *((_BYTE *)this + 688) = 1;
    if (v17 <= *((_QWORD *)this + 87))
      *((_BYTE *)this + 704) = 1;
  }
  if (v15 <= v16)
    goto LABEL_52;
  *(_QWORD *)(v14 + 8 * v16) = v10;
  v22 = *((_QWORD *)this + 78);
  if (!v22)
  {
    *((_QWORD *)this + 85) = v10;
    *((_BYTE *)this + 688) = 0;
LABEL_27:
    *((_QWORD *)this + 87) = v10;
    *((_BYTE *)this + 704) = 0;
    goto LABEL_28;
  }
  if (*((_QWORD *)this + 85) <= v10)
  {
    *((_QWORD *)this + 85) = v10;
    *((_BYTE *)this + 688) = 0;
  }
  if (*((_QWORD *)this + 87) >= v10)
    goto LABEL_27;
LABEL_28:
  v24 = *((_QWORD *)this + 80);
  if (v24 <= v10)
    v24 = v10;
  *((_QWORD *)this + 80) = v24;
  v25 = *((_QWORD *)this + 79);
  if (v25 >= v10)
    v25 = v10;
  *((_QWORD *)this + 79) = v25;
  *((double *)this + 83) = *((double *)this + 83) + (double)v10;
  *((_QWORD *)this + 78) = v22 + 1;
  v26 = *((double *)this + 81);
  v27 = (double)v10 - v26;
  v28 = v26 + v27 / (double)(v22 + 1);
  *((double *)this + 81) = v28;
  *((double *)this + 82) = *((double *)this + 82) + v27 * ((double)v10 - v28);
  *((_QWORD *)this + 84) = (v16 + 1) % v15;
  *((_QWORD *)this + 48) = v4;
  v23 = *((_QWORD *)this + 56);
  if (v23)
    goto LABEL_33;
}

void webrtc::JitterEstimator::GetJitterEstimate(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  double v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;

  if (!*(_BYTE *)a1)
  {
    v2 = *(double *)(a1 + 168);
    if (*(_BYTE *)(a1 + 16))
      goto LABEL_6;
    goto LABEL_9;
  }
  if (!*(_QWORD *)(a1 + 216))
  {
    v2 = 0.0;
    if (*(_BYTE *)(a1 + 16))
      goto LABEL_6;
LABEL_9:
    v3 = *(double *)(a1 + 184);
    goto LABEL_11;
  }
  v2 = (double)*(uint64_t *)(*(_QWORD *)(a1 + 224) + 32);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_9;
LABEL_6:
  if (*(_QWORD *)(a1 + 304))
    v3 = (double)*(uint64_t *)(*(_QWORD *)(a1 + 312) + 32);
  else
    v3 = 0.0;
LABEL_11:
  v4 = *(double *)(a1 + 104) * (v3 - v2);
  v5 = sqrt(*(double *)(a1 + 440)) * 2.33 + -30.0;
  if (v5 < 1.0)
    v5 = 1.0;
  v6 = (v4 + v5) * 1000.0;
  if (v6 == INFINITY)
    goto LABEL_14;
  if (v6 == -INFINITY || (v7 = (uint64_t)v6, (uint64_t)v6 <= 999))
  {
    v8 = (unint64_t *)(a1 + 400);
    if (!*(_BYTE *)(a1 + 408))
    v7 = *v8;
  }
  else if (v7 > 0x989680)
  {
LABEL_14:
    v7 = 10000000;
  }
  if (!*(_BYTE *)(a1 + 408))
    *(_BYTE *)(a1 + 408) = 1;
  *(_QWORD *)(a1 + 400) = v7;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 736) + 16))(*(_QWORD *)(a1 + 736));
  v14 = *(_QWORD *)(a1 + 472);
  v15 = v9 == 0x7FFFFFFFFFFFFFFFLL || v14 == 0x8000000000000000;
  if (v15
    || (v9 != 0x8000000000000000 ? (v16 = v14 == 0x7FFFFFFFFFFFFFFFLL) : (v16 = 1),
        !v16 ? (v17 = v9 - v14 < 60000001) : (v17 = 1),
        !v17))
  {
    *(_QWORD *)(a1 + 480) = 0;
  }
  if (!*(_QWORD *)(a1 + 624))
  {
    v19 = (uint64_t)0.0;
    if ((uint64_t)0.0 < 1)
      return;
    goto LABEL_42;
  }
  v18 = *(double *)(a1 + 648);
  if (v18 == INFINITY)
    goto LABEL_47;
  if (v18 != -INFINITY)
  {
    v19 = (uint64_t)v18;
    if ((uint64_t)v18 >= 1)
    {
LABEL_42:
      if (v19 != 0x7FFFFFFFFFFFFFFFLL)
        return;
LABEL_47:
      rtc::webrtc_checks_impl::FatalLog("Source/webrtc/api/units/frequency.h", 66, "interval.IsFinite()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v10, v11, v12, v13, v21);
      webrtc::IceCandidateInterface::server_url(v20);
    }
  }
}

void webrtc::IceCandidateInterface::server_url(_BYTE *a1@<X8>)
{
  a1[23] = 0;
  *a1 = 0;
}

uint64_t webrtc::SessionDescriptionInterface::RemoveCandidates()
{
  return 0;
}

uint64_t webrtc::SdpTypeFromString(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v5;
  int v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v1 = *(unsigned __int8 *)(result + 23);
  v2 = (_QWORD *)result;
  v3 = v1;
  if (*(char *)(result + 23) < 0)
  {
    v3 = *(_QWORD *)(result + 8);
    if (v3 < 0)
      goto LABEL_38;
    v2 = *(_QWORD **)result;
    if (v3 && v2 == 0)
      goto LABEL_38;
  }
  if (v3 == 5)
  {
    v5 = *(_DWORD *)v2;
    v6 = *((unsigned __int8 *)v2 + 4);
    if (v5 == 1701209711 && v6 == 114)
      return 0x100000000;
  }
  v8 = (_QWORD *)result;
  v9 = *(unsigned __int8 *)(result + 23);
  if ((v1 & 0x80) != 0)
  {
    v9 = *(_QWORD *)(result + 8);
    if (v9 < 0)
      goto LABEL_38;
    v8 = *(_QWORD **)result;
    if (v9)
    {
      if (!v8)
        goto LABEL_38;
    }
  }
  if (v9 == 8 && *v8 == 0x726577736E617270)
    return 0x100000001;
  v10 = result;
  v11 = *(unsigned __int8 *)(result + 23);
  if ((v1 & 0x80) != 0)
  {
    v11 = *(_QWORD *)(result + 8);
    if (v11 < 0)
      goto LABEL_38;
    v10 = *(_QWORD *)result;
    if (v11)
    {
      if (!v10)
        goto LABEL_38;
    }
  }
  if (v11 == 6)
  {
    v12 = *(_DWORD *)v10;
    v13 = *(unsigned __int16 *)(v10 + 4);
    if (v12 == 2004053601 && v13 == 29285)
      return 0x100000002;
  }
  if ((v1 & 0x80) != 0 && ((v1 = *(_QWORD *)(result + 8), v1 < 0) || (result = *(_QWORD *)result, v1) && !result))
  {
LABEL_38:
    __break(1u);
  }
  else if (v1 == 8 && *(_QWORD *)result == 0x6B6361626C6C6F72)
  {
    return 0x100000003;
  }
  else
  {
    return 0;
  }
  return result;
}

void webrtc::CreateIceCandidate(uint64_t a1, int a2, unsigned __int8 *a3, char *a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  std::string *v15;
  uint64_t v16;

  v8 = operator new();
  *(_QWORD *)v8 = off_24C0B5550;
  v9 = (std::string *)(v8 + 8);
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    *(_QWORD *)(v8 + 24) = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(v8 + 40) = 0;
  *(_DWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
    goto LABEL_14;
  *(_DWORD *)(v8 + 64) = 1;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 144) = &unk_24C0ACDA0;
  *(_BYTE *)(v8 + 184) = 0;
  *(_WORD *)(v8 + 176) = 0;
  *(_DWORD *)(v8 + 180) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 160) = 0;
  *(_DWORD *)(v8 + 168) = 0;
  *(_DWORD *)(v8 + 192) = 0;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_DWORD *)(v8 + 248) = 0;
  *(_DWORD *)(v8 + 288) = 0;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_BYTE *)(v8 + 384) = 0;
  *(_WORD *)(v8 + 376) = 0;
  *(_DWORD *)(v8 + 380) = 0;
  *(_DWORD *)(v8 + 368) = 0;
  *(_QWORD *)(v8 + 344) = &unk_24C0ACDA0;
  *(_QWORD *)(v8 + 352) = 0;
  *(_QWORD *)(v8 + 360) = 0;
  *(_QWORD *)(v8 + 456) = 0;
  *(_QWORD *)(v8 + 464) = 0;
  *(_QWORD *)(v8 + 448) = 0;
  *(_DWORD *)(v8 + 440) = 0;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  if ((char)a3[23] < 0)
  {
    v14 = *((_QWORD *)a3 + 1);
    if ((v14 & 0x8000000000000000) == 0)
    {
      a3 = *(unsigned __int8 **)a3;
      if (!v14 || a3)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    v15 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v10, v11, v12, v13, v16);
    webrtc::JsepIceCandidate::~JsepIceCandidate((webrtc::JsepIceCandidate *)v15);
    return;
  }
  v14 = a3[23];
LABEL_10:
  if ((webrtc::SdpDeserializeCandidate(a3, v14, v8, a4) & 1) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void webrtc::JsepIceCandidate::~JsepIceCandidate(void **this)
{
  *this = off_24C0B5550;
  cricket::Candidate::~Candidate(this + 5);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24C0B5550;
  cricket::Candidate::~Candidate(this + 5);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::JsepCandidateCollection::Clone(webrtc::JsepCandidateCollection *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  std::string *v6;
  uint64_t v7;
  std::string *v8;
  uint64_t *v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;

  a2[1] = 0;
  *a2 = &off_24C0B5598;
  a2[2] = 0;
  a2[3] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  while (v3 != v4)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*v3 + 16))(__p);
    v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
    v6 = (std::string *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
    v7 = operator new();
    *(_QWORD *)v7 = off_24C0B5550;
    v8 = (std::string *)(v7 + 8);
    if (SHIBYTE(v12) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 24) = v12;
    }
    *(_DWORD *)(v7 + 32) = v5;
    cricket::Candidate::Candidate((std::string *)(v7 + 40), v6);
    v13 = v7;
    v9 = (uint64_t *)a2[2];
    if ((unint64_t)v9 >= a2[3])
    {
      a2[2] = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>(a2 + 1, &v13);
      v10 = v13;
      v13 = 0;
      if (v10)
        goto LABEL_12;
    }
    else
    {
      if (!v9)
      {
        __break(1u);
        return;
      }
      v13 = 0;
      *v9 = v7;
      a2[2] = v9 + 1;
      v10 = v13;
      v13 = 0;
      if (v10)
LABEL_12:
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    ++v3;
  }
}

BOOL webrtc::JsepIceCandidate::ToString(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  int v4;
  std::string v6;

  if (!a2)
    return 0;
  v3 = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  webrtc::SdpSerializeCandidate(v3, &v6);
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    *(std::string *)a2 = v6;
    v4 = *(char *)(a2 + 23);
    if ((v4 & 0x80000000) == 0)
      return v4 != 0;
  }
  else
  {
    *(std::string *)a2 = v6;
    v4 = *(char *)(a2 + 23);
    if ((v4 & 0x80000000) == 0)
      return v4 != 0;
  }
  return *(_QWORD *)(a2 + 8) != 0;
}

void webrtc::JsepIceCandidate::sdp_mid(webrtc::JsepIceCandidate *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

uint64_t webrtc::JsepIceCandidate::sdp_mline_index(webrtc::JsepIceCandidate *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t webrtc::JsepIceCandidate::candidate(webrtc::JsepIceCandidate *this)
{
  return (uint64_t)this + 40;
}

void webrtc::JsepIceCandidate::server_url(webrtc::JsepIceCandidate *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 471) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 56), *((_QWORD *)this + 57));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 28);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 58);
  }
}

uint64_t webrtc::JsepCandidateCollection::count(webrtc::JsepCandidateCollection *this)
{
  return (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
}

webrtc::JsepIceCandidate *webrtc::JsepCandidateCollection::add(webrtc::JsepIceCandidate *this, webrtc::JsepIceCandidate *a2)
{
  webrtc::JsepIceCandidate *v2;
  _QWORD *v3;
  _QWORD *v4;
  webrtc::JsepIceCandidate *v5;

  v2 = this;
  v5 = a2;
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if ((unint64_t)v3 >= *((_QWORD *)this + 3))
  {
    v4 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)this + 1, (uint64_t *)&v5);
    this = v5;
    *((_QWORD *)v2 + 2) = v4;
    v5 = 0;
    if (this)
      return (webrtc::JsepIceCandidate *)(*(uint64_t (**)(webrtc::JsepIceCandidate *))(*(_QWORD *)this + 8))(this);
  }
  else if (v3)
  {
    *v3 = a2;
    *((_QWORD *)this + 2) = v3 + 1;
  }
  else
  {
    __break(1u);
  }
  return this;
}

uint64_t webrtc::JsepCandidateCollection::at(uint64_t this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  if (a2 < (*(_QWORD *)(this + 16) - v2) >> 3)
    return *(_QWORD *)(v2 + 8 * a2);
  __break(1u);
  return this;
}

BOOL webrtc::JsepCandidateCollection::HasCandidate(webrtc::JsepCandidateCollection *this, const webrtc::IceCandidateInterface *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _BOOL8 IsEquivalent;
  int v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  void **v10;
  void **p_s1;
  int v12;
  cricket::Candidate *v13;
  const cricket::Candidate *v14;
  int v15;
  void *__p[2];
  unsigned __int8 v18;
  void *__s1;
  size_t __n;
  unsigned __int8 v21;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    while (1)
    {
      while (1)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)*v2 + 16))(&__s1);
        (*(void (**)(void **__return_ptr, const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 16))(__p, a2);
        v7 = v21;
        if ((v21 & 0x80u) == 0)
          v8 = v21;
        else
          v8 = __n;
        v9 = v18;
        if ((v18 & 0x80u) != 0)
          v9 = (unint64_t)__p[1];
        if (v8 != v9)
          goto LABEL_4;
        v10 = (v18 & 0x80u) == 0 ? __p : (void **)__p[0];
        if ((v21 & 0x80) == 0)
          break;
        if (memcmp(__s1, v10, __n))
          goto LABEL_4;
LABEL_24:
        v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2);
        if (v12 != (*(unsigned int (**)(const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 24))(a2))
          goto LABEL_4;
        v13 = (cricket::Candidate *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 32))(*v2);
        v14 = (const cricket::Candidate *)(*(uint64_t (**)(const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 32))(a2);
        IsEquivalent = cricket::Candidate::IsEquivalent(v13, v14);
        if ((char)v18 < 0)
          goto LABEL_26;
LABEL_5:
        if ((char)v21 < 0)
          goto LABEL_27;
LABEL_6:
        v6 = ++v2 == v3 || IsEquivalent;
        if (v6 == 1)
          return IsEquivalent;
      }
      if (!v21)
        goto LABEL_24;
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v10)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        v10 = (void **)((char *)v10 + 1);
        if (!--v7)
          goto LABEL_24;
      }
LABEL_4:
      IsEquivalent = 0;
      if (((char)v18 & 0x80000000) == 0)
        goto LABEL_5;
LABEL_26:
      operator delete(__p[0]);
      if (((char)v21 & 0x80000000) == 0)
        goto LABEL_6;
LABEL_27:
      operator delete(__s1);
      v15 = ++v2 == v3 || IsEquivalent;
      if (v15 == 1)
        return IsEquivalent;
    }
  }
  return 0;
}

uint64_t webrtc::JsepCandidateCollection::remove(webrtc::JsepCandidateCollection *this, const cricket::Candidate *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  const void **v6;
  rtc::SocketAddress *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  const void **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 == v3)
    return 0;
  v6 = (const void **)((char *)a2 + 32);
  v7 = (const cricket::Candidate *)((char *)a2 + 80);
  do
  {
    v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 32))(*v2);
    if (*((_DWORD *)a2 + 6) != *(_DWORD *)(v8 + 24))
      goto LABEL_4;
    v9 = v8;
    v10 = *((unsigned __int8 *)a2 + 55);
    if ((v10 & 0x80u) == 0)
      v11 = *((unsigned __int8 *)a2 + 55);
    else
      v11 = *((_QWORD *)a2 + 5);
    v12 = *(unsigned __int8 *)(v8 + 55);
    v13 = (char)v12;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(v8 + 40);
    if (v11 != v12)
      goto LABEL_4;
    if (v13 >= 0)
      v14 = (unsigned __int8 *)(v8 + 32);
    else
      v14 = *(unsigned __int8 **)(v8 + 32);
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*v6, v14, *((_QWORD *)a2 + 5)))
        goto LABEL_4;
    }
    else if (*((_BYTE *)a2 + 55))
    {
      v15 = v6;
      while (*(unsigned __int8 *)v15 == *v14)
      {
        v15 = (const void **)((char *)v15 + 1);
        ++v14;
        if (!--v10)
          goto LABEL_20;
      }
      goto LABEL_4;
    }
LABEL_20:
    if (rtc::SocketAddress::EqualIPs(v7, (const rtc::SocketAddress *)(v9 + 80))
      && *((unsigned __int16 *)a2 + 68) == *(unsigned __int16 *)(v9 + 136))
    {
      goto LABEL_24;
    }
LABEL_4:
    ++v2;
  }
  while (v2 != v3);
  v2 = v3;
LABEL_24:
  v16 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 == v16)
    return 0;
  v17 = v2 + 1;
  if (v2 + 1 != v16)
  {
    do
    {
      v18 = *(v17 - 1);
      *(v17 - 1) = *v17;
      *v17 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      ++v17;
    }
    while (v17 != v16);
    v16 = (_QWORD *)*((_QWORD *)this + 2);
    v2 = v17 - 1;
  }
  while (v16 != v2)
  {
    v21 = *--v16;
    v20 = v21;
    *v16 = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  *((_QWORD *)this + 2) = v2;
  return 1;
}

void webrtc::JsepCandidateCollection::~JsepCandidateCollection(webrtc::JsepCandidateCollection *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C0B5598;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C0B5598;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::SessionDescriptionInterface::GetType(webrtc::SessionDescriptionInterface *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 64))(__p);
  v1 = webrtc::SdpTypeFromString((uint64_t)__p);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if ((v1 & 0xFF00000000) != 0)
      return v1;
  }
  else if ((v1 & 0xFF00000000) != 0)
  {
    return v1;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_session_description.cc");
  return 0;
}

uint64_t webrtc::CreateSessionDescription@<X0>(int a1@<W0>, uint64_t **a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;

  result = operator new();
  v9 = result;
  *(_QWORD *)result = &off_24C0B55D8;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = a1;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 72) = 0;
  if (a1 == 3)
    goto LABEL_8;
  if (*((char *)a2 + 23) < 0)
  {
    v10 = (unint64_t)a2[1];
    if ((v10 & 0x8000000000000000) != 0 || (a2 = (uint64_t **)*a2, v10) && !a2)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + 23);
  }
  result = webrtc::SdpDeserialize(a2, v10, result, a3);
  if ((_DWORD)result)
  {
LABEL_8:
    *a4 = v9;
    return result;
  }
  *a4 = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

BOOL webrtc::JsepSessionDescription::Initialize(uint64_t a1, uint64_t *a2, std::string *a3, __int128 *a4)
{
  uint64_t v4;
  std::string *v8;
  char v9;
  __int128 v10;
  std::string *v11;
  const std::string::value_type *v12;
  size_t size;
  char v14;
  __int128 v15;
  const std::string::value_type *v16;
  size_t v17;
  uint64_t v18;
  cricket::SessionDescription *v19;
  unint64_t v20;
  void (***v21)(_QWORD, unint64_t);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (***v25)(_QWORD, unint64_t);
  void (***v26)(_QWORD, unint64_t);
  void (***v27)(_QWORD, unint64_t);
  void (**v28)(_QWORD, unint64_t);
  BOOL v29;

  v4 = *a2;
  if (!*a2)
    return v4 != 0;
  v8 = (std::string *)(a1 + 16);
  if (v8 != a3)
  {
    v9 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    {
      if ((*((_BYTE *)&a3->__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v8, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
        v11 = (std::string *)(a1 + 40);
        if ((__int128 *)(a1 + 40) == a4)
          goto LABEL_28;
      }
      else
      {
        v10 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
        v8->__r_.__value_.__r.__words[2] = a3->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
        v11 = (std::string *)(a1 + 40);
        if ((__int128 *)(a1 + 40) == a4)
          goto LABEL_28;
      }
LABEL_15:
      v14 = *((_BYTE *)a4 + 23);
      if (*(char *)(a1 + 63) < 0)
      {
        if (v14 >= 0)
          v16 = (const std::string::value_type *)a4;
        else
          v16 = *(const std::string::value_type **)a4;
        if (v14 >= 0)
          v17 = *((unsigned __int8 *)a4 + 23);
        else
          v17 = *((_QWORD *)a4 + 1);
        std::string::__assign_no_alias<false>(v11, v16, v17);
      }
      else if ((*((_BYTE *)a4 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v11, *(char **)a4, *((_QWORD *)a4 + 1));
      }
      else
      {
        v15 = *a4;
        v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v15;
      }
      goto LABEL_28;
    }
    if (v9 >= 0)
      v12 = (const std::string::value_type *)a3;
    else
      v12 = (const std::string::value_type *)a3->__r_.__value_.__r.__words[0];
    if (v9 >= 0)
      size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    else
      size = a3->__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(v8, v12, size);
  }
  v11 = (std::string *)(a1 + 40);
  if ((__int128 *)(a1 + 40) != a4)
    goto LABEL_15;
LABEL_28:
  v18 = *a2;
  *a2 = 0;
  v19 = *(cricket::SessionDescription **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v18;
  if (v19)
  {
    cricket::SessionDescription::~SessionDescription(v19);
    MEMORY[0x20BD0ADEC]();
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v22 = *(_QWORD *)(a1 + 72);
  v21 = *(void (****)(_QWORD, unint64_t))(a1 + 80);
  v23 = ((uint64_t)v21 - v22) >> 5;
  v24 = v20 - v23;
  if (v20 <= v23)
  {
    if (v20 < v23)
    {
      v25 = (void (***)(_QWORD, unint64_t))(v22 + 32 * v20);
      if (v21 != v25)
      {
        v26 = v21 - 4;
        v27 = v21 - 4;
        do
        {
          v28 = *v27;
          v27 -= 4;
          (*v28)(v26, v24);
          v29 = v26 == v25;
          v26 = v27;
        }
        while (!v29);
      }
      *(_QWORD *)(a1 + 80) = v25;
    }
  }
  else
  {
    std::vector<webrtc::JsepCandidateCollection>::__append((void **)(a1 + 72), v24);
  }
  return v4 != 0;
}

uint64_t webrtc::JsepSessionDescription::JsepSessionDescription(uint64_t a1, int a2, uint64_t *a3, char *__src, size_t __len, char *a6, size_t a7)
{
  uint64_t v7;
  char *v14;
  char *v15;
  size_t v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)a1 = &off_24C0B55D8;
  *(_QWORD *)(a1 + 8) = v7;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_26;
  if (__len > 0x16)
  {
    v16 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v16 = __len | 7;
    v17 = v16 + 1;
    v14 = (char *)operator new(v16 + 1);
    *(_QWORD *)(a1 + 24) = __len;
    *(_QWORD *)(a1 + 32) = v17 | 0x8000000000000000;
    *(_QWORD *)(a1 + 16) = v14;
    v15 = &v14[__len];
    if (v14 > __src)
      goto LABEL_9;
  }
  else
  {
    v14 = (char *)(a1 + 16);
    *(_BYTE *)(a1 + 39) = __len;
    v15 = (char *)(a1 + 16 + __len);
    if (a1 + 16 > (unint64_t)__src)
      goto LABEL_9;
  }
  if (v15 > __src)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_9:
  if (__len)
    memmove(v14, __src, __len);
  *v15 = 0;
  if (a7 > 0x7FFFFFFFFFFFFFF7)
LABEL_26:
    abort();
  if (a7 <= 0x16)
  {
    v18 = (char *)(a1 + 40);
    *(_BYTE *)(a1 + 63) = a7;
    v19 = (char *)(a1 + 40 + a7);
    if (a1 + 40 > (unint64_t)a6)
      goto LABEL_19;
    goto LABEL_18;
  }
  v20 = (a7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a7 | 7) != 0x17)
    v20 = a7 | 7;
  v21 = v20 + 1;
  v18 = (char *)operator new(v20 + 1);
  *(_QWORD *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 56) = v21 | 0x8000000000000000;
  *(_QWORD *)(a1 + 40) = v18;
  v19 = &v18[a7];
  if (v18 <= a6)
  {
LABEL_18:
    if (v19 <= a6)
      goto LABEL_19;
    goto LABEL_25;
  }
LABEL_19:
  if (a7)
    memmove(v18, a6, a7);
  *v19 = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v22 = *(_QWORD **)(a1 + 8);
  if (v22)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - *v22;
    if (v23)
      std::vector<webrtc::JsepCandidateCollection>::__append((void **)(a1 + 72), 0xCCCCCCCCCCCCCCCDLL * (v23 >> 3));
  }
  return a1;
}

void webrtc::JsepSessionDescription::~JsepSessionDescription(webrtc::JsepSessionDescription *this)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  cricket::SessionDescription *v9;

  *(_QWORD *)this = &off_24C0B55D8;
  v2 = (void (***)(_QWORD))*((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 10);
    v4 = (void *)*((_QWORD *)this + 9);
    if (v3 != v2)
    {
      v5 = v3 - 4;
      v6 = v3 - 4;
      do
      {
        v7 = *v6;
        v6 -= 4;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 63) < 0)
  {
    operator delete(*((void **)this + 5));
    if ((*((char *)this + 39) & 0x80000000) == 0)
    {
LABEL_10:
      v9 = (cricket::SessionDescription *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (!v9)
        return;
      goto LABEL_11;
    }
  }
  else if ((*((char *)this + 39) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(*((void **)this + 2));
  v9 = (cricket::SessionDescription *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v9)
    return;
LABEL_11:
  cricket::SessionDescription::~SessionDescription(v9);
  MEMORY[0x20BD0ADEC]();
}

{
  webrtc::JsepSessionDescription::~JsepSessionDescription(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::JsepSessionDescription::Clone(webrtc::JsepSessionDescription *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  cricket::SessionDescription **v6;
  _QWORD *v7;
  std::string *v8;
  char *v9;
  char v10;
  const cricket::SessionDescription *v11;
  cricket::SessionDescription *v12;
  cricket::SessionDescription *v13;
  webrtc::JsepCandidateCollection *v14;
  webrtc::JsepCandidateCollection *v15;
  void *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  void (***v35)(_QWORD);
  void (**v36)(_QWORD *);
  BOOL v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  const std::string::value_type *v42;
  size_t v43;
  _QWORD *v45;
  void (**v46)(webrtc::JsepCandidateCollection *__hidden);
  void *__p[2];
  uint64_t v48;

  v3 = operator new();
  v4 = v3;
  v5 = *((_DWORD *)this + 16);
  *(_QWORD *)v3 = &off_24C0B55D8;
  *(_OWORD *)(v3 + 8) = 0u;
  v6 = (cricket::SessionDescription **)(v3 + 8);
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_QWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 64) = v5;
  *(_QWORD *)(v3 + 72) = 0;
  v45 = (_QWORD *)(v3 + 72);
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  if ((webrtc::JsepSessionDescription *)v3 != this)
  {
    v7 = (_QWORD *)(v3 + 16);
    if (*((char *)this + 39) < 0)
    {
      std::string::__assign_no_alias<true>(v7, *((char **)this + 2), *((_QWORD *)this + 3));
      v9 = (char *)this + 40;
      v8 = (std::string *)(v4 + 40);
      v10 = *((_BYTE *)this + 63);
      if (*(char *)(v4 + 63) < 0)
      {
        if (v10 >= 0)
          v42 = (char *)this + 40;
        else
          v42 = (const std::string::value_type *)*((_QWORD *)this + 5);
        if (v10 >= 0)
          v43 = *((unsigned __int8 *)this + 63);
        else
          v43 = *((_QWORD *)this + 6);
        std::string::__assign_no_alias<false>(v8, v42, v43);
        v11 = (const cricket::SessionDescription *)*((_QWORD *)this + 1);
        if (!v11)
          goto LABEL_13;
        goto LABEL_11;
      }
      if ((*((_BYTE *)this + 63) & 0x80) == 0)
        goto LABEL_7;
    }
    else
    {
      *(_OWORD *)v7 = *((_OWORD *)this + 1);
      *(_QWORD *)(v4 + 32) = *((_QWORD *)this + 4);
      v8 = (std::string *)(v4 + 40);
      if ((*((char *)this + 63) & 0x80000000) == 0)
      {
        v9 = (char *)this + 40;
LABEL_7:
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)v9;
        v8->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        v11 = (const cricket::SessionDescription *)*((_QWORD *)this + 1);
        if (!v11)
          goto LABEL_13;
        goto LABEL_11;
      }
    }
    std::string::__assign_no_alias<true>(v8, *((char **)this + 5), *((_QWORD *)this + 6));
  }
  v11 = (const cricket::SessionDescription *)*((_QWORD *)this + 1);
  if (!v11)
    goto LABEL_13;
LABEL_11:
  v12 = (cricket::SessionDescription *)operator new();
  cricket::SessionDescription::SessionDescription(v12, v11);
  v13 = *v6;
  *v6 = v12;
  if (v13)
  {
    cricket::SessionDescription::~SessionDescription(v13);
    MEMORY[0x20BD0ADEC]();
  }
LABEL_13:
  v14 = (webrtc::JsepCandidateCollection *)*((_QWORD *)this + 9);
  v15 = (webrtc::JsepCandidateCollection *)*((_QWORD *)this + 10);
  if (v14 != v15)
  {
    while (1)
    {
      webrtc::JsepCandidateCollection::Clone(v14, &v46);
      v18 = *(_QWORD **)(v4 + 80);
      v17 = *(_QWORD *)(v4 + 88);
      if ((unint64_t)v18 >= v17)
        break;
      if (!v18)
        goto LABEL_54;
      *v18 = &off_24C0B5598;
      v18[1] = 0;
      v18[2] = 0;
      v18[3] = 0;
      *(_OWORD *)(v18 + 1) = *(_OWORD *)__p;
      v18[3] = v48;
      __p[0] = 0;
      __p[1] = 0;
      v48 = 0;
      *(_QWORD *)(v4 + 80) = v18 + 4;
      v46 = &off_24C0B5598;
LABEL_17:
      v14 = (webrtc::JsepCandidateCollection *)((char *)v14 + 32);
      if (v14 == v15)
        goto LABEL_45;
    }
    v19 = (_QWORD *)*v45;
    v20 = ((uint64_t)v18 - *v45) >> 5;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 59)
      goto LABEL_55;
    v22 = v17 - (_QWORD)v19;
    if (v22 >> 4 > v21)
      v21 = v22 >> 4;
    v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0;
    v24 = 0x7FFFFFFFFFFFFFFLL;
    if (!v23)
      v24 = v21;
    if (!v24)
    {
LABEL_54:
      __break(1u);
LABEL_55:
      abort();
    }
    if (v24 >> 59)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v25 = 32 * v24;
    v26 = (char *)operator new(32 * v24);
    v27 = &v26[v25];
    v28 = &v26[32 * v20];
    *(_QWORD *)v28 = &off_24C0B5598;
    *(_OWORD *)(v28 + 8) = *(_OWORD *)__p;
    *((_QWORD *)v28 + 3) = v48;
    __p[1] = 0;
    v48 = 0;
    __p[0] = 0;
    v29 = v28 + 32;
    if (v18 == v19)
    {
      *(_QWORD *)(v4 + 72) = v28;
      *(_QWORD *)(v4 + 80) = v29;
      *(_QWORD *)(v4 + 88) = v27;
      if (!v18)
      {
LABEL_37:
        v38 = __p[0];
        *(_QWORD *)(v4 + 80) = v29;
        v46 = &off_24C0B5598;
        if (v38)
        {
          v39 = __p[1];
          v16 = v38;
          if (__p[1] != v38)
          {
            do
            {
              v41 = *--v39;
              v40 = v41;
              *v39 = 0;
              if (v41)
                (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
            }
            while (v39 != v38);
            v16 = __p[0];
          }
          __p[1] = v38;
          operator delete(v16);
        }
        goto LABEL_17;
      }
    }
    else
    {
      v30 = 0;
      do
      {
        v31 = &v28[v30 * 8];
        *((_QWORD *)v31 - 4) = &off_24C0B5598;
        v32 = &v18[v30];
        *(_OWORD *)(v31 - 24) = *(_OWORD *)&v18[v30 - 3];
        *((_QWORD *)v31 - 1) = v18[v30 - 1];
        *(v32 - 3) = 0;
        *(v32 - 2) = 0;
        *(v32 - 1) = 0;
        v30 -= 4;
      }
      while (&v18[v30] != v19);
      v18 = *(_QWORD **)(v4 + 72);
      v33 = *(_QWORD **)(v4 + 80);
      *(_QWORD *)(v4 + 72) = &v28[v30 * 8];
      *(_QWORD *)(v4 + 80) = v29;
      *(_QWORD *)(v4 + 88) = v27;
      if (v33 != v18)
      {
        v34 = v33 - 4;
        v35 = (void (***)(_QWORD))(v33 - 4);
        do
        {
          v36 = (void (**)(_QWORD *))*v35;
          v35 -= 4;
          (*v36)(v34);
          v37 = v34 == v18;
          v34 = v35;
        }
        while (!v37);
      }
      if (!v18)
        goto LABEL_37;
    }
    operator delete(v18);
    goto LABEL_37;
  }
LABEL_45:
  *a2 = v4;
}

uint64_t webrtc::JsepSessionDescription::AddCandidate(webrtc::JsepSessionDescription *this, const webrtc::IceCandidateInterface *a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t i;
  std::string::size_type size;
  void *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 **v12;
  std::string::size_type v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  std::string::size_type v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string::size_type v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  uint64_t v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;
  cricket::MediaContentDescription *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  std::string __p[6];
  std::string v49;
  std::string v50;

  if (!a2)
    return 0;
  (*(void (**)(std::string *__return_ptr, const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 16))(__p, a2);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p[0].__r_.__value_.__l.__size_)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if (*((_BYTE *)&__p[0].__r_.__value_.__s + 23))
  {
    goto LABEL_14;
  }
  if (((*(uint64_t (**)(const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 24))(a2) & 0x80000000) != 0)
  {
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 0;
  }
  v4 = (*(uint64_t (**)(const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 24))(a2);
  v5 = v4;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1)) >> 3);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v6 <= v5)
      return 0;
  }
  else if (v6 <= v4)
  {
    return 0;
  }
LABEL_14:
  if (((*(uint64_t (**)(const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 24))(a2) & 0x80000000) != 0)
  {
    i = 0;
    if (!*((_QWORD *)this + 1))
      goto LABEL_51;
  }
  else
  {
    i = (*(int (**)(const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 24))(a2);
    if (!*((_QWORD *)this + 1))
      goto LABEL_51;
  }
  (*(void (**)(std::string *__return_ptr, const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 16))(__p, a2);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  else
    size = __p[0].__r_.__value_.__l.__size_;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!size)
      goto LABEL_51;
    goto LABEL_25;
  }
  if (size)
  {
LABEL_25:
    if (*(_QWORD *)(*((_QWORD *)this + 1) + 8) != **((_QWORD **)this + 1))
    {
      for (i = 0;
            i < 0xCCCCCCCCCCCCCCCDLL
              * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1)) >> 3);
            ++i)
      {
        (*(void (**)(std::string *__return_ptr, const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 16))(__p, a2);
        v11 = **((_QWORD **)this + 1);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*((_QWORD *)this + 1) + 8) - v11) >> 3) <= i)
          goto LABEL_106;
        v12 = (unsigned __int8 **)(v11 + 40 * i);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        else
          v13 = __p[0].__r_.__value_.__l.__size_;
        v14 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
        v15 = (char)v14;
        if ((char)v14 < 0)
          v14 = v12[1];
        if ((unsigned __int8 *)v13 == v14)
        {
          if (v15 >= 0)
            v16 = (unsigned __int8 *)(v11 + 40 * i);
          else
            v16 = *v12;
          if ((*((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v9 = (void *)__p[0].__r_.__value_.__r.__words[0];
            v10 = memcmp(__p[0].__r_.__value_.__l.__data_, v16, __p[0].__r_.__value_.__l.__size_);
            operator delete(v9);
            if (!v10)
              goto LABEL_51;
          }
          else
          {
            if (!*((_BYTE *)&__p[0].__r_.__value_.__s + 23))
              goto LABEL_51;
            v17 = 0;
            do
            {
              v18 = __p[0].__r_.__value_.__s.__data_[v17];
              v19 = v16[v17];
            }
            while (v18 == v19 && HIBYTE(__p[0].__r_.__value_.__r.__words[2]) - 1 != v17++);
            if (v18 == v19)
              goto LABEL_51;
          }
        }
        else if ((*((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x80) != 0)
        {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
      }
    }
    return 0;
  }
LABEL_51:
  if (i >= (*(uint64_t (**)(webrtc::JsepSessionDescription *))(*(_QWORD *)this + 88))(this))
    return 0;
  v21 = (_QWORD *)*((_QWORD *)this + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21[1] - *v21) >> 3) <= i)
    goto LABEL_105;
  v22 = v21[3];
  v23 = v21[4];
  if (v22 == v23)
    return 0;
  v24 = *v21 + 40 * i;
  v25 = *(_BYTE *)(v24 + 23);
  if (v25 >= 0)
    v26 = *(unsigned __int8 *)(v24 + 23);
  else
    v26 = *(_QWORD *)(v24 + 8);
  if (v25 >= 0)
    v27 = (unsigned __int8 *)v24;
  else
    v27 = *(unsigned __int8 **)v24;
  while (1)
  {
    v29 = *(unsigned __int8 *)(v22 + 23);
    v30 = (v29 & 0x80u) == 0 ? *(unsigned __int8 *)(v22 + 23) : *(_QWORD *)(v22 + 8);
    if (v30 == v26)
      break;
LABEL_61:
    result = 0;
    v22 += 112;
    if (v22 == v23)
      return result;
  }
  if ((v29 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v22, v27, *(_QWORD *)(v22 + 8)))
      goto LABEL_72;
    goto LABEL_61;
  }
  if (*(_BYTE *)(v22 + 23))
  {
    v31 = 0;
    do
    {
      if (*(unsigned __int8 *)(v22 + v31) != v27[v31])
        goto LABEL_61;
      ++v31;
    }
    while (v29 != v31);
    if (!v22)
      return 0;
  }
LABEL_72:
  v32 = (std::string *)(*(uint64_t (**)(const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 32))(a2);
  cricket::Candidate::Candidate(__p, v32);
  v33 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v33 = v49.__r_.__value_.__l.__size_;
  if (!v33)
  {
    v34 = (const std::string::value_type *)(v22 + 48);
    if ((*(char *)(v22 + 71) & 0x80000000) == 0)
    {
      v35 = *(unsigned __int8 *)(v22 + 71);
      goto LABEL_82;
    }
    v35 = *(_QWORD *)(v22 + 56);
    if ((v35 & 0x8000000000000000) == 0)
    {
      v34 = *(const std::string::value_type **)v34;
      if (!v35 || v34)
      {
LABEL_82:
        std::string::__assign_external(&v49, v34, v35);
        goto LABEL_83;
      }
    }
LABEL_105:
    __break(1u);
LABEL_106:
    abort();
  }
LABEL_83:
  v36 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v36 = v50.__r_.__value_.__l.__size_;
  if (!v36)
  {
    v37 = (const std::string::value_type *)(v22 + 72);
    if (*(char *)(v22 + 95) < 0)
    {
      v38 = *(_QWORD *)(v22 + 80);
      if ((v38 & 0x8000000000000000) != 0)
        goto LABEL_105;
      v37 = *(const std::string::value_type **)v37;
      if (v38)
      {
        if (!v37)
          goto LABEL_105;
      }
    }
    else
    {
      v38 = *(unsigned __int8 *)(v22 + 95);
    }
    std::string::__assign_external(&v50, v37, v38);
  }
  v39 = operator new();
  (*(void (**)(void **__return_ptr, const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 16))(v46, a2);
  *(_QWORD *)v39 = off_24C0B5550;
  v40 = (std::string *)(v39 + 8);
  if (SHIBYTE(v47) < 0)
  {
    std::string::__init_copy_ctor_external(v40, (const std::string::value_type *)v46[0], (std::string::size_type)v46[1]);
    *(_DWORD *)(v39 + 32) = i;
    cricket::Candidate::Candidate((std::string *)(v39 + 40), __p);
    if (SHIBYTE(v47) < 0)
LABEL_94:
      operator delete(v46[0]);
  }
  else
  {
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = *(_OWORD *)v46;
    *(_QWORD *)(v39 + 24) = v47;
    *(_DWORD *)(v39 + 32) = i;
    cricket::Candidate::Candidate((std::string *)(v39 + 40), __p);
    if (SHIBYTE(v47) < 0)
      goto LABEL_94;
  }
  v41 = *((_QWORD *)this + 9);
  if (i >= (*((_QWORD *)this + 10) - v41) >> 5)
    goto LABEL_105;
  if (((*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v41 + 32 * i) + 24))(v41 + 32 * i, v39) & 1) != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  }
  else
  {
    v42 = *((_QWORD *)this + 9);
    if (i >= (*((_QWORD *)this + 10) - v42) >> 5)
      goto LABEL_105;
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v42 + 32 * i) + 40))(v42 + 32 * i, v39);
    v44 = *((_QWORD *)this + 9);
    if (i >= (*((_QWORD *)this + 10) - v44) >> 5)
      goto LABEL_105;
    v45 = **((_QWORD **)this + 1);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*((_QWORD *)this + 1) + 8) - v45) >> 3) <= i)
      goto LABEL_105;
  }
  cricket::Candidate::~Candidate((void **)&__p[0].__r_.__value_.__l.__data_);
  return 1;
}

void webrtc::`anonymous namespace'::UpdateConnectionAddress(webrtc::_anonymous_namespace_ *this, const webrtc::JsepCandidateCollection *a2, cricket::MediaContentDescription *a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v14;
  int v15;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  const std::string::value_type *v23;
  size_t v24;
  size_t size;
  __int128 *v26;
  std::string *v27;
  std::string::size_type v28;
  int v29;
  std::string *p_p;
  size_t v31;
  char v32;
  size_t v33;
  std::string *v34;
  size_t v35;
  std::string v36;
  void *v37;
  _BYTE v38[20];
  __int16 v39;
  int v40;
  char v41;
  std::string __p;
  void *v43;
  _BYTE v44[20];
  __int16 v45;
  int v46;
  char v47;
  std::string __dst;
  std::string v49;
  std::string v50;
  int v51[5];

  *((_BYTE *)&v49.__r_.__value_.__s + 23) = 7;
  if (&v49 <= (std::string *)"0.0.0.0" && (char *)v49.__r_.__value_.__r.__words + 7 > "0.0.0.0")
    goto LABEL_98;
  strcpy((char *)&v49, "0.0.0.0");
  memset(&__dst, 0, sizeof(__dst));
  if ((*(uint64_t (**)(webrtc::_anonymous_namespace_ *, const webrtc::JsepCandidateCollection *, cricket::MediaContentDescription *))(*(_QWORD *)this + 16))(this, a2, a3))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 9;
    while (1)
    {
      v9 = (*(uint64_t (**)(webrtc::_anonymous_namespace_ *, unint64_t))(*(_QWORD *)this + 32))(this, v7);
      if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9) + 24) != 1)
        goto LABEL_29;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      v11 = (unsigned __int16 *)(v10 + 32);
      if (*(char *)(v10 + 55) < 0)
      {
        v12 = *(_QWORD *)(v10 + 40);
        if (v12 < 0)
          goto LABEL_98;
        v11 = *(unsigned __int16 **)v11;
        if (v12 && v11 == 0)
          goto LABEL_98;
      }
      else
      {
        v12 = *(unsigned __int8 *)(v10 + 55);
      }
      if (v12 != 3)
        goto LABEL_29;
      v14 = *v11;
      v15 = *((unsigned __int8 *)v11 + 2);
      if (v14 != (unsigned __int16)cricket::UDP_PROTOCOL_NAME || v15 != 112)
        goto LABEL_29;
      v17 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9) + 208);
      if (v17 == 3)
        v18 = 3;
      else
        v18 = 0;
      if (v17 == 1)
        v18 = 2;
      v19 = v17 ? v18 : 1;
      v20 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9) + 112);
      if (v19 > v5 || (_DWORD)v6 != (_DWORD)v20)
      {
        if ((_DWORD)v6 == 2 && (_DWORD)v20 == 30)
        {
          v20 = 2;
        }
        else
        {
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
          v8 = *(_WORD *)(v21 + 136);
          rtc::IPAddress::ToString((rtc::IPAddress *)(v21 + 104), &__p);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          v49 = __p;
          if (&__dst != (std::string *)(v21 + 80))
          {
            v22 = *(_BYTE *)(v21 + 103);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v22 >= 0)
                v23 = (const std::string::value_type *)(v21 + 80);
              else
                v23 = *(const std::string::value_type **)(v21 + 80);
              if (v22 >= 0)
                v24 = *(unsigned __int8 *)(v21 + 103);
              else
                v24 = *(_QWORD *)(v21 + 88);
              std::string::__assign_no_alias<false>(&__dst, v23, v24);
            }
            else if ((*(_BYTE *)(v21 + 103) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>(&__dst, *(char **)(v21 + 80), *(_QWORD *)(v21 + 88));
            }
            else
            {
              __dst = *(std::string *)(v21 + 80);
            }
          }
          v5 = v19;
        }
      }
      else
      {
LABEL_29:
        v20 = v6;
      }
      ++v7;
      v6 = v20;
      if (v7 >= (*(uint64_t (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this))
        goto LABEL_51;
    }
  }
  v8 = 9;
LABEL_51:
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v49.__r_.__value_.__l.__size_;
    if ((v49.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_98;
    v26 = (__int128 *)v49.__r_.__value_.__r.__words[0];
    if (v49.__r_.__value_.__l.__size_)
    {
      if (!v49.__r_.__value_.__r.__words[0])
        goto LABEL_98;
    }
  }
  else
  {
    size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    v26 = (__int128 *)&v49;
  }
  memset(&__p, 0, sizeof(__p));
  v43 = &unk_24C0ACDA0;
  memset(v44, 0, sizeof(v44));
  rtc::SocketAddress::SetIP((uint64_t)&__p, v26, size);
  v45 = v8;
  if (*(_DWORD *)v44)
    goto LABEL_57;
  v28 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v28 = __dst.__r_.__value_.__l.__size_;
  if (!v28)
    goto LABEL_57;
  memset(v38, 0, sizeof(v38));
  v37 = &unk_24C0ACDA0;
  *((_BYTE *)&v50.__r_.__value_.__s + 23) = 7;
  if (&v50 <= (std::string *)"0.0.0.0" && (char *)v50.__r_.__value_.__r.__words + 7 > "0.0.0.0")
  {
LABEL_98:
    __break(1u);
    return;
  }
  strcpy((char *)&v50, "0.0.0.0");
  v36 = v50;
  v29 = 2;
  if (rtc::inet_pton(2, "0.0.0.0", 7uLL, v51))
  {
    *(_DWORD *)v38 = 2;
    *(_DWORD *)&v38[4] = v51[0];
    *(_QWORD *)&v38[8] = 0;
    *(_DWORD *)&v38[16] = 0;
    goto LABEL_85;
  }
  v29 = 30;
  if (rtc::inet_pton(30, "0.0.0.0", 7uLL, &v50))
  {
    *(_DWORD *)v38 = 30;
    *(_OWORD *)&v38[4] = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
LABEL_85:
    v32 = 1;
    v41 = 1;
    v40 = 0;
    v39 = 9;
    v33 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_86:
      if ((v33 & 0x80) == 0)
      {
        __p = v36;
        *(_DWORD *)v44 = v29;
        *(_OWORD *)&v44[4] = *(_OWORD *)&v38[4];
        v45 = 9;
        v47 = v32;
        v46 = 0;
        goto LABEL_57;
      }
      std::string::__assign_no_alias<true>(&__p, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
      *(_DWORD *)v44 = v29;
      *(_OWORD *)&v44[4] = *(_OWORD *)&v38[4];
      v45 = 9;
      v47 = v32;
      v46 = 0;
      goto LABEL_97;
    }
    goto LABEL_90;
  }
  v32 = 0;
  v29 = 0;
  v41 = 0;
  memset(v38, 0, sizeof(v38));
  v40 = 0;
  v39 = 9;
  v33 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_86;
LABEL_90:
  if ((v33 & 0x80u) == 0)
    v34 = &v36;
  else
    v34 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if ((v33 & 0x80u) == 0)
    v35 = v33;
  else
    v35 = v36.__r_.__value_.__l.__size_;
  std::string::__assign_no_alias<false>(&__p, (const std::string::value_type *)v34, v35);
  *(_DWORD *)v44 = *(_DWORD *)v38;
  *(_OWORD *)&v44[4] = *(_OWORD *)&v38[4];
  v45 = v39;
  v47 = v41;
  v46 = v40;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
LABEL_97:
    operator delete(v36.__r_.__value_.__l.__data_);
LABEL_57:
  v27 = (std::string *)((char *)a2 + 128);
  if ((std::string *)((char *)a2 + 128) != &__p)
  {
    if (*((char *)a2 + 151) < 0)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v31 = __p.__r_.__value_.__l.__size_;
      std::string::__assign_no_alias<false>(v27, (const std::string::value_type *)p_p, v31);
    }
    else if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((_QWORD *)a2 + 18) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
  }
  *((_DWORD *)a2 + 40) = *(_DWORD *)v44;
  *(_OWORD *)((char *)a2 + 164) = *(_OWORD *)&v44[4];
  *((_WORD *)a2 + 92) = v45;
  *((_BYTE *)a2 + 192) = v47;
  *((_DWORD *)a2 + 47) = v46;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_78:
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_82:
      operator delete(v49.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_78;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_82;
}

void webrtc::JsepSessionDescription::RemoveCandidates(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  cricket::MediaContentDescription *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  const void *v29;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3 && *(_QWORD *)(a1[1] + 8) != *(_QWORD *)a1[1])
  {
    v5 = 0;
    while (1)
    {
      v6 = (uint64_t *)a1[1];
      v7 = *v6;
      v8 = v6[1] - *v6;
      if (!v8)
        goto LABEL_5;
      v9 = v8 / 40;
      v10 = *(_QWORD *)(v2 + 384);
      v11 = *(char *)(v2 + 399) >= 0 ? (uint64_t *)*(unsigned __int8 *)(v2 + 399) : *(uint64_t **)(v2 + 384);
      if ((*(_BYTE *)(v2 + 399) & 0x80) != 0)
        break;
      if (v9 <= 1)
        v9 = 1;
      v12 = 0;
      if (*(_BYTE *)(v2 + 399))
      {
        do
        {
          v15 = (uint64_t **)(v7 + 40 * v12);
          v16 = (uint64_t *)*((unsigned __int8 *)v15 + 23);
          v17 = (char)v16;
          if ((char)v16 < 0)
            v16 = v15[1];
          if (v11 == v16)
          {
            v18 = 0;
            if (v17 < 0)
              v15 = (uint64_t **)*v15;
            while (*(unsigned __int8 *)(v2 + v18 + 376) == *((unsigned __int8 *)v15 + v18))
            {
              if (*(unsigned __int8 *)(v2 + 399) == ++v18)
                goto LABEL_28;
            }
          }
          ++v12;
        }
        while (v12 != v9);
        goto LABEL_5;
      }
      v13 = (unsigned __int8 *)(v7 + 23);
      while (1)
      {
        v14 = (uint64_t *)*v13;
        if ((char)v14 < 0)
          v14 = *(uint64_t **)(v13 - 15);
        if (v11 == v14)
          break;
        v13 += 40;
        if (v9 == ++v12)
          goto LABEL_5;
      }
LABEL_28:
      if ((v12 & 0x80000000) == 0)
        goto LABEL_29;
LABEL_5:
      v2 += 432;
      if (v2 == v3)
        return;
    }
    v24 = v5;
    v12 = 0;
    v25 = *(const void **)(v2 + 376);
    if (v9 <= 1)
      v26 = 1;
    else
      v26 = v9;
    while (1)
    {
      v27 = (uint64_t *)*(unsigned __int8 *)(v7 + 23);
      v28 = (char)v27;
      if ((char)v27 < 0)
        v27 = *(uint64_t **)(v7 + 8);
      if (v11 == v27)
      {
        v29 = v28 >= 0 ? (const void *)v7 : *(const void **)v7;
        if (!memcmp(v25, v29, v10))
          break;
      }
      ++v12;
      v7 += 40;
      if (v26 == v12)
      {
        v5 = v24;
        goto LABEL_5;
      }
    }
    v5 = v24;
    if ((v12 & 0x80000000) != 0)
      goto LABEL_5;
LABEL_29:
    v19 = a1[9];
    if (v12 >= (unint64_t)((a1[10] - v19) >> 5)
      || (v20 = webrtc::JsepCandidateCollection::remove((webrtc::JsepCandidateCollection *)(v19 + 32 * v12), (const cricket::Candidate *)v2), v22 = a1[9], v12 >= (unint64_t)((a1[10] - v22) >> 5))|| (v23 = *(_QWORD *)a1[1], 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1[1] + 8) - v23) >> 3) <= v12))
    {
      __break(1u);
      return;
    }
    v5 += v20;
    goto LABEL_5;
  }
}

unint64_t webrtc::JsepSessionDescription::number_of_mediasections(webrtc::JsepSessionDescription *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  if (v1)
    return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v1[1] - *v1) >> 3);
  else
    return 0;
}

uint64_t webrtc::JsepSessionDescription::candidates(webrtc::JsepSessionDescription *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 9);
  v3 = *((_QWORD *)this + 10) - v2;
  v4 = v2 + 32 * a2;
  if (a2 >= v3 >> 5)
    return 0;
  else
    return v4;
}

BOOL webrtc::JsepSessionDescription::ToString(webrtc *this, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  result = 0;
  if (a2 && *((_QWORD *)this + 1))
  {
    webrtc::SdpSerialize(this, (const webrtc::JsepSessionDescription *)a2, (uint64_t)&v6);
    if (*(char *)(a2 + 23) < 0)
    {
      operator delete(*(void **)a2);
      *(_OWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v7;
      LODWORD(v5) = *(char *)(a2 + 23);
      if ((v5 & 0x80000000) == 0)
        goto LABEL_5;
    }
    else
    {
      *(_OWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v7;
      LODWORD(v5) = *(char *)(a2 + 23);
      if ((v5 & 0x80000000) == 0)
      {
LABEL_5:
        v5 = v5;
        return v5 != 0;
      }
    }
    v5 = *(_QWORD *)(a2 + 8);
    return v5 != 0;
  }
  return result;
}

void webrtc::SessionDescriptionInterface::Clone(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t webrtc::JsepSessionDescription::description(webrtc::JsepSessionDescription *this)
{
  return *((_QWORD *)this + 1);
}

{
  return *((_QWORD *)this + 1);
}

void webrtc::JsepSessionDescription::session_id(webrtc::JsepSessionDescription *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 4);
  }
}

void webrtc::JsepSessionDescription::session_version(webrtc::JsepSessionDescription *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
  }
}

uint64_t webrtc::JsepSessionDescription::GetType(webrtc::JsepSessionDescription *this)
{
  return *((unsigned int *)this + 16);
}

unint64_t webrtc::JsepSessionDescription::type@<X0>(webrtc::JsepSessionDescription *this@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  unint64_t result;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  v3 = *((int *)this + 16);
  if (v3 > 3)
    v4 = "";
  else
    v4 = off_24C0B56C8[v3];
  result = strlen(v4);
  if (result >= 0x7FFFFFFFFFFFFFF8)
LABEL_18:
    abort();
  v6 = result;
  if (result > 0x16)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    result = (unint64_t)operator new(v7 + 1);
    *((_QWORD *)a2 + 1) = v6;
    *((_QWORD *)a2 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)a2 = result;
    a2 = (char *)result;
  }
  else
  {
    a2[23] = result;
  }
  v9 = &a2[v6];
  if (a2 <= v4 && v9 > v4)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v6)
    result = (unint64_t)memcpy(a2, v4, v6);
  *v9 = 0;
  return result;
}

void std::vector<webrtc::JsepCandidateCollection>::__append(void **a1, unint64_t a2)
{
  char *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  void (***v23)(char *);
  void (**v24)(char *);
  BOOL v25;

  v4 = (char *)a1[1];
  v5 = a1[2];
  if (a2 > (v5 - v4) >> 5)
  {
    v6 = (v4 - (_BYTE *)*a1) >> 5;
    v7 = v6 + a2;
    if (!((v6 + a2) >> 59))
    {
      v8 = v5 - (_BYTE *)*a1;
      if (v8 >> 4 > v7)
        v7 = v8 >> 4;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
        v9 = 0x7FFFFFFFFFFFFFFLL;
      else
        v9 = v7;
      if (v9)
      {
        if (v9 >> 59)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v10 = (char *)operator new(32 * v9);
      }
      else
      {
        v10 = 0;
      }
      v12 = &v10[32 * v6];
      v13 = &v10[32 * v9];
      v14 = &v12[32 * a2];
      v15 = v12;
      do
      {
        if (!v15)
          goto LABEL_32;
        *(_QWORD *)v15 = &off_24C0B5598;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *((_QWORD *)v15 + 3) = 0;
        v15 += 32;
      }
      while (v15 != v14);
      v16 = (char *)*a1;
      v17 = (char *)a1[1];
      if (v17 == *a1)
      {
        *a1 = v12;
        a1[1] = v14;
        a1[2] = v13;
        if (!v17)
          return;
      }
      else
      {
        v18 = 0;
        do
        {
          v19 = &v12[v18];
          v20 = &v17[v18];
          *((_QWORD *)v19 - 4) = &off_24C0B5598;
          *((_QWORD *)v19 - 3) = 0;
          *((_QWORD *)v19 - 2) = 0;
          *((_QWORD *)v19 - 1) = 0;
          *(_OWORD *)(v19 - 24) = *(_OWORD *)&v17[v18 - 24];
          *((_QWORD *)v19 - 1) = *(_QWORD *)&v17[v18 - 8];
          *((_QWORD *)v20 - 3) = 0;
          *((_QWORD *)v20 - 2) = 0;
          *((_QWORD *)v20 - 1) = 0;
          v18 -= 32;
        }
        while (&v17[v18] != v16);
        v17 = (char *)*a1;
        v21 = (char *)a1[1];
        *a1 = &v12[v18];
        a1[1] = v14;
        a1[2] = v13;
        if (v21 != v17)
        {
          v22 = v21 - 32;
          v23 = (void (***)(char *))(v21 - 32);
          do
          {
            v24 = *v23;
            v23 -= 4;
            (*v24)(v22);
            v25 = v22 == v17;
            v22 = (char *)v23;
          }
          while (!v25);
        }
        if (!v17)
          return;
      }
      operator delete(v17);
      return;
    }
LABEL_33:
    abort();
  }
  if (!a2)
    goto LABEL_16;
  v11 = &v4[32 * a2];
  do
  {
    if (!v4)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    *(_QWORD *)v4 = &off_24C0B5598;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = 0;
    v4 += 32;
  }
  while (v4 != v11);
  v4 = v11;
LABEL_16:
  a1[1] = v4;
}

uint64_t cricket::JsepTransport::JsepTransport(uint64_t a1, __int128 *a2, unsigned int **a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t a12)
{
  std::string *v20;
  __int128 v21;
  uint64_t *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)a1 = rtc::Thread::Current((rtc::Thread *)a1);
  v20 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v22 = a10;
    *(_BYTE *)(a1 + 32) = 0;
    v23 = *a3;
    *(_QWORD *)(a1 + 40) = *a3;
    if (!v23)
      goto LABEL_4;
  }
  else
  {
    v21 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
    v22 = a10;
    *(_BYTE *)(a1 + 32) = 0;
    v23 = *a3;
    *(_QWORD *)(a1 + 40) = *a3;
    if (!v23)
      goto LABEL_4;
  }
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
LABEL_4:
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v25 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 64) = v25;
  v26 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 72) = v26;
  v27 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 80) = v27;
  v28 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 88) = v28;
  v29 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 96) = v29;
  if (!*a9)
  {
    *(_QWORD *)(a1 + 104) = 0;
    v34 = a12;
    if (*v22)
      goto LABEL_10;
LABEL_24:
    *(_QWORD *)(a1 + 112) = 0;
    if (*a11)
      goto LABEL_15;
    goto LABEL_25;
  }
  v30 = operator new();
  v31 = *a9;
  *a9 = 0;
  v49 = v31;
  webrtc::DtlsTransport::DtlsTransport(v30, &v49);
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  *(_QWORD *)v30 = off_24C0B56F8;
  *(_DWORD *)(v30 + 152) = 0;
  v32 = (unsigned int *)(v30 + 152);
  *(_QWORD *)(a1 + 104) = v30;
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
  v34 = a12;
  if (!*v22)
    goto LABEL_24;
LABEL_10:
  v35 = operator new();
  v36 = *v22;
  *v22 = 0;
  v49 = v36;
  webrtc::DtlsTransport::DtlsTransport(v35, &v49);
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  *(_QWORD *)v35 = off_24C0B56F8;
  *(_DWORD *)(v35 + 152) = 0;
  v37 = (unsigned int *)(v35 + 152);
  *(_QWORD *)(a1 + 112) = v35;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
  if (*a11)
  {
LABEL_15:
    v39 = operator new();
    v40 = v39;
    v41 = *a11;
    *a11 = 0;
    v42 = *(_QWORD *)(a1 + 104);
    v48 = v42;
    v49 = v41;
    if (v42)
    {
      (**(void (***)(uint64_t))v42)(v42);
      webrtc::SctpTransport::SctpTransport(v40, &v49, &v48);
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      v43 = v49;
      if (!v49)
        goto LABEL_18;
    }
    else
    {
      webrtc::SctpTransport::SctpTransport(v39, &v49, &v48);
      v43 = v49;
      if (!v49)
      {
LABEL_18:
        *(_QWORD *)v40 = off_24C0B5750;
        *(_QWORD *)(v40 + 8) = &unk_24C0B57E8;
        *(_DWORD *)(v40 + 88) = 0;
        v44 = (unsigned int *)(v40 + 88);
        *(_QWORD *)(a1 + 120) = v40;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        goto LABEL_26;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    goto LABEL_18;
  }
LABEL_25:
  *(_QWORD *)(a1 + 120) = 0;
LABEL_26:
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  v46 = *(_QWORD *)(v34 + 24);
  if (v46)
  {
    if (v46 == v34)
    {
      *(_QWORD *)(a1 + 224) = a1 + 200;
      (*(void (**)(_QWORD))(**(_QWORD **)(v34 + 24) + 24))(*(_QWORD *)(v34 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 224) = v46;
      *(_QWORD *)(v34 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 224) = 0;
  }
  return a1;
}

void cricket::JsepTransport::~JsepTransport(cricket::JsepTransport *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  webrtc::DtlsTransport *v5;
  cricket::JsepTransport *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 80);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)(v2 + 80) = 0;
    v4 = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    webrtc::SctpTransport::UpdateInformation(v2, 3);
  }
  webrtc::DtlsTransport::Clear(*((webrtc::DtlsTransport **)this + 13));
  v5 = (webrtc::DtlsTransport *)*((_QWORD *)this + 14);
  if (v5)
    webrtc::DtlsTransport::Clear(v5);
  v6 = (cricket::JsepTransport *)*((_QWORD *)this + 28);
  if (v6 == (cricket::JsepTransport *)((char *)this + 200))
  {
    v7 = 4;
    v6 = (cricket::JsepTransport *)((char *)this + 200);
    goto LABEL_13;
  }
  if (v6)
  {
    v7 = 5;
LABEL_13:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  if (*((_BYTE *)this + 192))
  {
    v8 = (void *)*((_QWORD *)this + 21);
    if (v8)
    {
      *((_QWORD *)this + 22) = v8;
      operator delete(v8);
    }
  }
  if (*((_BYTE *)this + 160))
  {
    v9 = (void *)*((_QWORD *)this + 17);
    if (v9)
    {
      *((_QWORD *)this + 18) = v9;
      operator delete(v9);
    }
  }
  v10 = *((_QWORD *)this + 15);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 14);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 13);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 9);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 8);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (_QWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v18)
  {
    cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)(v18 + 5));
    v19 = (void *)v18[1];
    if (v19)
    {
      v18[2] = v19;
      operator delete(v19);
    }
    MEMORY[0x20BD0ADEC](v18, 0x1032C40A0916259);
  }
  v20 = (_QWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v20)
  {
    cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)(v20 + 5));
    v21 = (void *)v20[1];
    if (v21)
    {
      v20[2] = v21;
      operator delete(v21);
    }
    MEMORY[0x20BD0ADEC](v20, 0x1032C40A0916259);
  }
  v22 = *((_QWORD *)this + 5);
  if (v22)
  {
    do
    {
      v23 = __ldaxr((unsigned int *)v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)v22));
    if (!v24)
    {
      v25 = *(_QWORD *)(v22 + 8);
      *(_QWORD *)(v22 + 8) = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      MEMORY[0x20BD0ADEC](v22, 0x1020C40D5A9D86FLL);
    }
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void cricket::JsepTransport::SetLocalJsepTransportDescription(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  const cricket::TransportDescription *v8;
  char *v9;
  char *v10;
  char *v11;
  const char *v12;
  webrtc::DtlsSrtpTransport *v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  char *v20;
  size_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  std::string::value_type v26;
  void *v27;
  char *v28;
  _QWORD *v29;
  size_t v30;
  uint64_t v31;
  const void *p_s2;
  const void *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  int64_t v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  _BYTE *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  char v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  size_t size;
  size_t v58;
  std::string::value_type *v59;
  void *v60;
  size_t v61;
  size_t v62;
  _BYTE *v63;
  char v64;
  std::string *p_p;
  std::string::size_type v66;
  size_t v67;
  size_t v68;
  std::string::size_type v69;
  std::string *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  char v74;
  std::string *v75;
  size_t v76;
  std::string *v77;
  uint64_t v78;
  uint64_t v79;
  std::string *v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  _QWORD *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int data;
  std::string::value_type v93;
  _QWORD *v94;
  void *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  _BYTE __src[38];
  char v107;
  int v108;
  void *v109;
  char v110;
  void *__s2;
  uint64_t v112;
  unsigned __int8 v113;
  void *v114;
  uint64_t v115;
  unsigned __int8 v116;
  int v117;
  __int16 v118;
  std::string __p;
  unsigned __int8 *v120;
  _QWORD v121[2];
  std::string v122[43];
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v121[0] = 0;
  *(_QWORD *)((char *)v121 + 7) = 0;
  v117 = 0;
  LOBYTE(v118) = 0;
  v8 = (const cricket::TransportDescription *)(a2 + 40);
  cricket::TransportDescription::GetIceParameters(a2 + 40, &__s2);
  cricket::IceParameters::Validate((cricket::IceParameters *)&__s2, (uint64_t)&v108);
  if (v108)
  {
    v9 = (char *)operator new(0x30uLL);
    v10 = v9;
    v11 = v9 + 24;
    if (v9 <= "Invalid ICE parameters: " && v11 > "Invalid ICE parameters: ")
      goto LABEL_184;
    strcpy(v9, "Invalid ICE parameters: ");
    v122[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    *(_OWORD *)&v122[0].__r_.__value_.__r.__words[1] = xmmword_208F0B3A0;
    if (v110 < 0)
    {
      v12 = (const char *)v109;
      if (!v109)
        goto LABEL_184;
    }
    else
    {
      v12 = (const char *)&v109;
    }
    v17 = strlen(v12);
    v18 = v17;
    if (v17 <= 0x17)
    {
      if (v17)
      {
        if (v11 <= v12 && &v11[v17] > v12)
          goto LABEL_184;
        memmove(v11, v12, v17);
        v122[0].__r_.__value_.__l.__size_ = v18 + 24;
        v10[v18 + 24] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(v122, 0x2FuLL, v17 - 23, 0x18uLL, 0x18uLL, 0, v17, v12);
    }
    *(std::string *)__src = v122[0];
    memset(v122, 0, 24);
    v19 = __src[23];
    if ((__src[23] & 0x80000000) == 0)
    {
      *(_DWORD *)a4 = 3;
      v20 = __src;
      v21 = v19;
LABEL_25:
      if (v21 > 0x16)
      {
        v24 = (v21 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v24 = v21 | 7;
        v25 = v24 + 1;
        v22 = (char *)operator new(v24 + 1);
        *(_QWORD *)(a4 + 16) = v21;
        *(_QWORD *)(a4 + 24) = v25 | 0x8000000000000000;
        *(_QWORD *)(a4 + 8) = v22;
        v23 = &v22[v21];
        if (v22 > v20)
        {
LABEL_32:
          if (v21)
            memmove(v22, v20, v21);
          *v23 = 0;
          *(_DWORD *)(a4 + 32) = 0;
          *(_BYTE *)(a4 + 36) = 0;
          *(_BYTE *)(a4 + 38) = 0;
          if ((v19 & 0x80) != 0)
          {
            operator delete(*(void **)__src);
            if (SHIBYTE(v122[0].__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v122[0].__r_.__value_.__l.__data_);
              v26 = 0;
              v27 = 0;
              if (v110 < 0)
                goto LABEL_180;
LABEL_170:
              if ((char)v116 < 0)
                goto LABEL_181;
LABEL_171:
              if ((char)v113 < 0)
                goto LABEL_182;
              goto LABEL_172;
            }
          }
LABEL_169:
          v26 = 0;
          v27 = 0;
          if (v110 < 0)
            goto LABEL_180;
          goto LABEL_170;
        }
      }
      else
      {
        v22 = (char *)(a4 + 8);
        *(_BYTE *)(a4 + 31) = v21;
        v23 = (char *)(a4 + 8 + v21);
        if (a4 + 8 > (unint64_t)v20)
          goto LABEL_32;
      }
      if (v23 <= v20)
        goto LABEL_32;
      goto LABEL_184;
    }
    v21 = *(_QWORD *)&__src[8];
    if ((*(_QWORD *)&__src[8] & 0x8000000000000000) == 0)
    {
      v20 = *(char **)__src;
      if (!*(_QWORD *)&__src[8] || *(_QWORD *)__src)
      {
        *(_DWORD *)a4 = 3;
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_185;
        goto LABEL_25;
      }
    }
LABEL_184:
    __break(1u);
    goto LABEL_185;
  }
  if ((cricket::JsepTransport::SetRtcpMux(a1, *a2, a3, 0) & 1) != 0)
  {
    v13 = *(webrtc::DtlsSrtpTransport **)(a1 + 96);
    if (v13)
      webrtc::DtlsSrtpTransport::UpdateRecvEncryptedHeaderExtensionIds(v13, (uint64_t)(a2 + 8));
    v14 = *(_QWORD *)(a1 + 48);
    if (v14)
    {
      v15 = (_QWORD *)(v14 + 64);
      if (*(char *)(v14 + 87) < 0)
      {
        v16 = *(_QWORD *)(v14 + 72);
        if ((v16 & 0x8000000000000000) != 0)
          goto LABEL_184;
        v15 = (_QWORD *)*v15;
        if (v16)
        {
          if (!v15)
            goto LABEL_184;
        }
      }
      else
      {
        v16 = *(unsigned __int8 *)(v14 + 87);
      }
      v29 = (_QWORD *)(v14 + 88);
      if (*(char *)(v14 + 111) < 0)
      {
        v30 = *(_QWORD *)(v14 + 96);
        if ((v30 & 0x8000000000000000) != 0)
          goto LABEL_184;
        v29 = (_QWORD *)*v29;
        if (v30)
        {
          if (!v29)
            goto LABEL_184;
        }
      }
      else
      {
        v30 = *(unsigned __int8 *)(v14 + 111);
      }
      if ((char)v113 < 0)
      {
        v31 = v112;
        if (v112 < 0)
          goto LABEL_184;
        p_s2 = __s2;
        if (v112)
        {
          if (!__s2)
            goto LABEL_184;
        }
      }
      else
      {
        v31 = v113;
        p_s2 = &__s2;
      }
      if ((char)v116 < 0)
      {
        v34 = v115;
        if (v115 < 0)
          goto LABEL_184;
        v33 = v114;
        if (v115)
        {
          if (!v114)
            goto LABEL_184;
        }
      }
      else
      {
        v33 = &v114;
        v34 = v116;
      }
      if (v16 == v31)
      {
        v35 = memcmp(v15, p_s2, v16);
        LODWORD(v14) = 1;
        if (v30 == v34 && !v35)
          LODWORD(v14) = memcmp(v29, v33, v30) != 0;
      }
      else
      {
        LODWORD(v14) = 1;
      }
    }
    v105 = v14;
    v36 = operator new();
    *(_BYTE *)v36 = *a2;
    *(_QWORD *)(v36 + 16) = 0;
    *(_QWORD *)(v36 + 24) = 0;
    *(_QWORD *)(v36 + 8) = 0;
    v38 = (_BYTE *)*((_QWORD *)a2 + 1);
    v37 = (_BYTE *)*((_QWORD *)a2 + 2);
    v39 = v37 - v38;
    if (v37 != v38)
    {
      if (v39 < 0)
        goto LABEL_185;
      v40 = (char *)operator new(v37 - v38);
      *(_QWORD *)(v36 + 8) = v40;
      *(_QWORD *)(v36 + 16) = v40;
      v41 = &v40[4 * (v39 >> 2)];
      *(_QWORD *)(v36 + 24) = v41;
      memcpy(v40, v38, v39);
      *(_QWORD *)(v36 + 16) = v41;
    }
    *(_DWORD *)(v36 + 32) = *((_DWORD *)a2 + 8);
    cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)(v36 + 40), v8);
    v42 = *(_QWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v36;
    if (v42)
    {
      cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)(v42 + 5));
      v43 = (void *)v42[1];
      if (v43)
      {
        v42[2] = v43;
        operator delete(v43);
      }
      MEMORY[0x20BD0ADEC](v42, 0x1032C40A0916259);
      v36 = *(_QWORD *)(a1 + 48);
    }
    v44 = *(_QWORD *)(v36 + 120);
    if (v44)
    {
      v45 = *(_QWORD *)(a1 + 40);
      if (!v45)
      {
        *(_DWORD *)__src = 3;
        v52 = (char *)operator new(0x30uLL);
        v27 = v52;
        *(_QWORD *)&__src[8] = v52;
        *(_OWORD *)&__src[16] = xmmword_208F0B3B0;
        if (v52 <= "Fingerprint provided but no identity available."
          && v52 + 47 > "Fingerprint provided but no identity available.")
        {
          goto LABEL_184;
        }
        v53 = 0;
        strcpy(v52, "Fingerprint provided but no identity available.");
        __src[36] = 0;
        v121[0] = *(_QWORD *)&__src[16];
        *(_QWORD *)((char *)v121 + 7) = *(_QWORD *)&__src[23];
        v118 = *(_WORD *)&__src[36];
        v26 = 0x80;
        v54 = 3;
        v117 = 0;
LABEL_152:
        v86 = *(_QWORD **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;
        if (v86)
        {
          cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)(v86 + 5));
          v87 = (void *)v86[1];
          if (v87)
          {
            v86[2] = v87;
            operator delete(v87);
          }
          MEMORY[0x20BD0ADEC](v86, 0x1032C40A0916259);
        }
        *(_DWORD *)a4 = v54;
        v88 = v121[0];
        *(_QWORD *)(a4 + 8) = v27;
        *(_QWORD *)(a4 + 16) = v88;
        *(_QWORD *)(a4 + 23) = *(_QWORD *)((char *)v121 + 7);
        *(_BYTE *)(a4 + 31) = v26;
        v121[0] = 0;
        *(_QWORD *)((char *)v121 + 7) = 0;
        *(_DWORD *)(a4 + 32) = v117;
        *(_WORD *)(a4 + 36) = v118;
        *(_BYTE *)(a4 + 38) = v53;
        v26 = 0;
        v27 = 0;
        if ((v110 & 0x80000000) == 0)
          goto LABEL_170;
        goto LABEL_180;
      }
      if (*(char *)(v44 + 23) < 0)
      {
        v46 = *(_QWORD *)(v44 + 8);
        if ((v46 & 0x8000000000000000) != 0)
          goto LABEL_184;
        v47 = *(_BYTE **)v44;
        if (v46)
        {
          if (!v47)
            goto LABEL_184;
        }
      }
      else
      {
        v46 = *(unsigned __int8 *)(v44 + 23);
        v47 = *(_BYTE **)(v36 + 120);
      }
      v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v45 + 8) + 16))(*(_QWORD *)(v45 + 8));
      rtc::SSLFingerprint::Create(v47, v46, v55, &v120);
      v56 = v120;
      if (rtc::SSLFingerprint::operator==(v120, (unsigned __int8 *)v44))
      {
        *(_DWORD *)__src = 0;
        v107 = 0;
        memset(&__src[8], 0, 29);
      }
      else
      {
        strcpy((char *)v122, "Local fingerprint does not match identity. Expected: ");
        rtc::SSLFingerprint::ToString((rtc::SSLFingerprint *)v56, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_184;
          v60 = (void *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__l.__size_)
          {
            if (!__p.__r_.__value_.__r.__words[0])
              goto LABEL_184;
          }
          if (__p.__r_.__value_.__l.__size_ >= 0x3CA)
            size = 970;
          else
            size = __p.__r_.__value_.__l.__size_;
          memcpy((char *)v122[2].__r_.__value_.__r.__words + 5, __p.__r_.__value_.__l.__data_, size);
          v58 = size + 53;
          v59 = &v122[2].__r_.__value_.__s.__data_[size + 5];
          *v59 = 0;
          operator delete(v60);
        }
        else
        {
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          memcpy((char *)v122[2].__r_.__value_.__r.__words + 5, &__p, HIBYTE(__p.__r_.__value_.__r.__words[2]));
          v58 = size + 53;
          v59 = &v122[2].__r_.__value_.__s.__data_[size + 5];
          *v59 = 0;
        }
        if (970 - size >= 6)
          v61 = 6;
        else
          v61 = 970 - size;
        memcpy(v59, " Got: ", v61);
        v62 = v61 + v58;
        v63 = (char *)v122 + v61 + v58;
        *v63 = 0;
        rtc::SSLFingerprint::ToString((rtc::SSLFingerprint *)v44, &__p);
        v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v66 = __p.__r_.__value_.__l.__size_;
          if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_184;
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__l.__size_)
          {
            if (!__p.__r_.__value_.__r.__words[0])
              goto LABEL_184;
          }
        }
        else
        {
          p_p = &__p;
          v66 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        if (v66 >= 1023 - v62)
          v67 = 1023 - v62;
        else
          v67 = v66;
        memcpy(v63, p_p, v67);
        v122[0].__r_.__value_.__s.__data_[v67 + v62] = 0;
        if (v64 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v68 = strlen((const char *)v122);
        if (v68 > 0x7FFFFFFFFFFFFFF7)
LABEL_185:
          abort();
        v69 = v68;
        if (v68 > 0x16)
        {
          v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v68 | 7) != 0x17)
            v71 = v68 | 7;
          v72 = v71 + 1;
          v70 = (std::string *)operator new(v71 + 1);
          __p.__r_.__value_.__l.__size_ = v69;
          __p.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v68;
          v70 = &__p;
        }
        v73 = (char *)v70 + v69;
        if (v70 <= v122 && (std::string *)((char *)v70 + v69) > v122)
          goto LABEL_184;
        if (v69)
          memcpy(v70, v122, v69);
        *v73 = 0;
        v74 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v76 = __p.__r_.__value_.__l.__size_;
          if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_184;
          v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__l.__size_)
          {
            if (!__p.__r_.__value_.__r.__words[0])
              goto LABEL_184;
          }
          *(_DWORD *)__src = 3;
          if (__p.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_185;
        }
        else
        {
          *(_DWORD *)__src = 3;
          v75 = &__p;
          v76 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        if (v76 > 0x16)
        {
          v78 = (v76 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v76 | 7) != 0x17)
            v78 = v76 | 7;
          v79 = v78 + 1;
          v77 = (std::string *)operator new(v78 + 1);
          *(_QWORD *)&__src[16] = v76;
          *(_QWORD *)&__src[24] = v79 | 0x8000000000000000;
          *(_QWORD *)&__src[8] = v77;
        }
        else
        {
          v77 = (std::string *)&__src[8];
          __src[31] = v76;
        }
        v80 = (std::string *)((char *)v77 + v76);
        if (v77 <= v75 && v80 > v75)
          goto LABEL_184;
        if (v76)
          memmove(v77, v75, v76);
        v80->__r_.__value_.__s.__data_[0] = 0;
        *(_DWORD *)&__src[32] = 0;
        __src[36] = 0;
        v107 = 0;
        if (v74 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v120 = 0;
      if (v56)
      {
        v81 = *((_QWORD *)v56 + 3);
        if (v81)
        {
          v82 = (unsigned int *)(v81 + 24);
          do
          {
            v83 = __ldaxr(v82);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v82));
          if (!v84)
          {
            v85 = *(_QWORD *)(v81 + 16);
            *(_QWORD *)(v81 + 16) = 0;
            if (v85)
              MEMORY[0x20BD0ADD4](v85, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v81, 0x1010C40EE34DA14);
          }
        }
        if ((char)v56[23] < 0)
          operator delete(*(void **)v56);
        MEMORY[0x20BD0ADEC](v56, 0x1032C40CD05A1E1);
      }
      v54 = *(_DWORD *)__src;
      v26 = __src[31];
      v53 = v107;
      v27 = *(void **)&__src[8];
      v121[0] = *(_QWORD *)&__src[16];
      *(_QWORD *)((char *)v121 + 7) = *(_QWORD *)&__src[23];
      v117 = *(_DWORD *)&__src[32];
      v118 = *(_WORD *)&__src[36];
      if (*(_DWORD *)__src)
        goto LABEL_152;
    }
    else
    {
      v48 = *(_QWORD *)(a1 + 40);
      if (v48)
      {
        do
        {
          v49 = __ldaxr((unsigned int *)v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, (unsigned int *)v48));
        if (!v50)
        {
          v51 = *(_QWORD *)(v48 + 8);
          *(_QWORD *)(v48 + 8) = 0;
          if (v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
          MEMORY[0x20BD0ADEC](v48, 0x1020C40D5A9D86FLL);
        }
      }
      v26 = 0;
      v27 = 0;
      *(_QWORD *)(a1 + 40) = 0;
    }
    v89 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 104) + 136) + 200))(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 136));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v89 + 144))(v89, &__s2);
    v90 = *(_QWORD *)(a1 + 112);
    if (v90)
    {
      v91 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v90 + 136) + 200))(*(_QWORD *)(v90 + 136));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v91 + 144))(v91, &__s2);
    }
    if ((a3 - 1) <= 1)
    {
      cricket::JsepTransport::NegotiateAndSetDtlsParameters((uint64_t)v122, (_QWORD *)a1, a3);
      data = (int)v122[0].__r_.__value_.__l.__data_;
      if (v26 < 0)
        operator delete(v27);
      v121[0] = *((_QWORD *)&v122[0].__r_.__value_.__l + 2);
      v27 = (void *)v122[0].__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v121 + 7) = *(std::string::size_type *)((char *)&v122[0].__r_.__value_.__r.__words[2] + 7);
      v26 = v122[1].__r_.__value_.__s.__data_[7];
      v117 = v122[1].__r_.__value_.__r.__words[1];
      v118 = WORD2(v122[1].__r_.__value_.__r.__words[1]);
      if (data)
      {
        v93 = v122[1].__r_.__value_.__s.__data_[14];
        v94 = *(_QWORD **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;
        if (v94)
        {
          cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)(v94 + 5));
          v95 = (void *)v94[1];
          if (v95)
          {
            v94[2] = v95;
            operator delete(v95);
          }
          MEMORY[0x20BD0ADEC](v94, 0x1032C40A0916259);
        }
        *(_DWORD *)a4 = data;
        v96 = v121[0];
        *(_QWORD *)(a4 + 8) = v27;
        *(_QWORD *)(a4 + 16) = v96;
        *(_QWORD *)(a4 + 23) = *(_QWORD *)((char *)v121 + 7);
        *(_BYTE *)(a4 + 31) = v26;
        v121[0] = 0;
        *(_QWORD *)((char *)v121 + 7) = 0;
        *(_DWORD *)(a4 + 32) = v117;
        *(_WORD *)(a4 + 36) = v118;
        *(_BYTE *)(a4 + 38) = v93;
        goto LABEL_169;
      }
    }
    v97 = v105;
    if (!*(_BYTE *)(a1 + 32))
      v97 = 0;
    if (v97 == 1)
    {
      *(_BYTE *)(a1 + 32) = 0;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v98, v99, v100, v101, v102, v103, v104, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport.cc");
    }
    *(_DWORD *)a4 = 0;
    *(_BYTE *)(a4 + 38) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 29) = 0;
    if ((v110 & 0x80000000) == 0)
      goto LABEL_170;
  }
  else
  {
    *(_DWORD *)a4 = 3;
    v28 = (char *)operator new(0x20uLL);
    *(_QWORD *)(a4 + 8) = v28;
    *(_OWORD *)(a4 + 16) = xmmword_208F05150;
    if (v28 <= "Failed to setup RTCP mux." && v28 + 25 > "Failed to setup RTCP mux.")
      goto LABEL_184;
    v26 = 0;
    v27 = 0;
    strcpy(v28, "Failed to setup RTCP mux.");
    *(_DWORD *)(a4 + 32) = 0;
    *(_BYTE *)(a4 + 36) = 0;
    *(_BYTE *)(a4 + 38) = 0;
    if ((v110 & 0x80000000) == 0)
      goto LABEL_170;
  }
LABEL_180:
  operator delete(v109);
  if (((char)v116 & 0x80000000) == 0)
    goto LABEL_171;
LABEL_181:
  operator delete(v114);
  if ((char)v113 < 0)
  {
LABEL_182:
    operator delete(__s2);
    if (v26 < 0)
      goto LABEL_183;
    return;
  }
LABEL_172:
  if (v26 < 0)
LABEL_183:
    operator delete(v27);
}

_BYTE *cricket::TransportDescription::GetIceParameters@<X0>(_BYTE *this@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  size_t v3;
  char *v5;
  size_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v12;
  int v13;
  char v15;
  _BYTE *v16;

  v2 = this + 24;
  if ((char)this[47] < 0)
  {
    v3 = *((_QWORD *)this + 4);
    if ((v3 & 0x8000000000000000) != 0)
      goto LABEL_32;
    v2 = *(_BYTE **)v2;
    if (v3 && v2 == 0)
      goto LABEL_32;
  }
  else
  {
    v3 = this[47];
  }
  v5 = this + 48;
  if ((char)this[71] < 0)
  {
    v6 = *((_QWORD *)this + 7);
    if ((v6 & 0x8000000000000000) == 0)
    {
      v5 = *(char **)v5;
      if (!v6 || v5)
        goto LABEL_13;
    }
LABEL_32:
    __break(1u);
    return this;
  }
  v6 = this[71];
LABEL_13:
  v7 = *(uint64_t ***)this;
  v8 = (uint64_t **)*((_QWORD *)this + 1);
  if (*(uint64_t ***)this == v8)
  {
LABEL_29:
    v15 = v7 != v8;
    v16 = a2;
  }
  else
  {
    do
    {
      if (*((char *)v7 + 23) < 0)
      {
        v9 = v7[1];
        if (((unint64_t)v9 & 0x8000000000000000) != 0)
          goto LABEL_32;
        v10 = *v7;
        if (v9 && v10 == 0)
          goto LABEL_32;
      }
      else
      {
        v9 = (uint64_t *)*((unsigned __int8 *)v7 + 23);
        v10 = (uint64_t *)v7;
      }
      if (v9 == (uint64_t *)12)
      {
        v12 = *v10;
        v13 = *((_DWORD *)v10 + 2);
        if (v12 == 0x616E696D6F6E6572 && v13 == 1852795252)
          goto LABEL_29;
      }
      v7 += 3;
    }
    while (v7 != v8);
    v15 = 0;
    v16 = a2;
  }
  return cricket::IceParameters::IceParameters(v16, v2, v3, v5, v6, v15);
}

uint64_t cricket::JsepTransport::SetRtcpMux(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v5;
  uint64_t result;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  webrtc::RtpTransport *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  webrtc::DtlsSrtpTransport *v30;
  uint64_t v31;
  cricket::DtlsTransportInternal *v32;
  uint64_t v33;

  switch(a3)
  {
    case 0:
      v7 = *(_DWORD *)(a1 + 128);
      if (v7)
      {
        if (v7 == 5)
        {
          if (!(_DWORD)a2)
            return 0;
          break;
        }
        if ((a4 || v7 != 2) && (a4 != 1 || v7 != 1))
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
LABEL_61:
            rtc::webrtc_logging_impl::Log("\r\t", v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtcp_mux_filter.cc");
            return 0;
          }
          return 0;
        }
      }
      *(_BYTE *)(a1 + 132) = a2;
      if (a4)
        v29 = 1;
      else
        v29 = 2;
      goto LABEL_35;
    case 2:
      v8 = (_DWORD *)(a1 + 128);
      result = cricket::RtcpMuxFilter::SetAnswer((int *)(a1 + 128), a2, a4);
      if (!(_DWORD)result)
        return result;
      if ((*v8 - 3) <= 2)
      {
        v15 = *(webrtc::RtpTransport **)(a1 + 80);
        if (v15 || (v15 = *(webrtc::RtpTransport **)(a1 + 88)) != 0)
        {
          webrtc::RtpTransport::SetRtcpPacketTransport(v15, 0, v9, v10, v11, v12, v13, v14);
        }
        else
        {
          v30 = *(webrtc::DtlsSrtpTransport **)(a1 + 96);
          if (v30)
          {
            v31 = *(_QWORD *)(a1 + 104);
            if (v31)
              v32 = *(cricket::DtlsTransportInternal **)(v31 + 136);
            else
              v32 = 0;
            webrtc::DtlsSrtpTransport::SetDtlsTransports(v30, v32, 0);
          }
        }
        v16 = *(_QWORD *)(a1 + 112);
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        *(_QWORD *)(a1 + 112) = 0;
        v17 = *(_QWORD *)(a1 + 224);
        if (!v17)
        {
          v33 = std::__throw_bad_function_call[abi:sn180100]();
          return cricket::JsepTransport::NegotiateAndSetDtlsParameters(v33);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
      }
      break;
    case 1:
      v5 = *(_DWORD *)(a1 + 128);
      if (v5 == 5)
      {
        if ((a2 & 1) == 0)
          return 0;
        break;
      }
      if (a4 != 1 || v5 != 2)
      {
        v19 = !a4 && (v5 & 0xFFFFFFFD) == 1;
        v20 = v19;
        v21 = v5 == 4 && a4 == 1;
        if (!v21 && !v20)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            goto LABEL_61;
          return 0;
        }
      }
      if (*(_BYTE *)(a1 + 132))
      {
        if ((_DWORD)a2)
        {
          if (a4 == 1)
            v29 = 4;
          else
            v29 = 3;
        }
        else if (a4 == 1)
        {
          v29 = 2;
        }
        else
        {
          v29 = 1;
        }
LABEL_35:
        *(_DWORD *)(a1 + 128) = v29;
        break;
      }
      if ((_DWORD)a2)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          goto LABEL_61;
        return 0;
      }
      break;
    default:
      return 0;
  }
  v18 = *(_QWORD *)(a1 + 96);
  if (!v18)
  {
    v18 = *(_QWORD *)(a1 + 88);
    if (!v18)
      v18 = *(_QWORD *)(a1 + 80);
  }
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v18 + 16))(v18, (*(_DWORD *)(a1 + 128) - 3) < 3);
  return 1;
}

char *cricket::JsepTransport::NegotiateAndSetDtlsParameters(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  __int128 *v9;
  BOOL v10;
  char *result;
  std::string *v12;
  uint64_t v13;
  __int128 v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t v27;
  void *v28;
  char v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _DWORD v47[2];

  v4 = a2[6];
  if (!v4 || (v6 = a2[7]) == 0)
  {
    *(_DWORD *)a1 = 6;
    result = (char *)operator new(0x48uLL);
    *(_QWORD *)(a1 + 8) = result;
    *(_OWORD *)(a1 + 16) = xmmword_208F0B3F0;
    if (result <= "Applying an answer transport description without applying any offer."
      && result + 68 > "Applying an answer transport description without applying any offer.")
    {
      goto LABEL_101;
    }
    strcpy(result, "Applying an answer transport description without applying any offer.");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(v4 + 120);
  v9 = *(__int128 **)(v6 + 120);
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (v10)
  {
    if (a3 != 2 || !v8)
    {
      v13 = operator new();
      v16 = 0;
      v17 = 0;
      *(_BYTE *)v13 = 0;
      *(_QWORD *)(v13 + 23) = 0;
      *(_QWORD *)(v13 + 39) = 0;
      *(_QWORD *)(v13 + 31) = 0;
      *(_BYTE *)(v13 + 47) = 0;
      v18 = a2[13];
      if (v18)
        goto LABEL_39;
      goto LABEL_65;
    }
    *(_DWORD *)a1 = 3;
    result = (char *)operator new(0x40uLL);
    *(_QWORD *)(a1 + 8) = result;
    *(_OWORD *)(a1 + 16) = xmmword_208F0B3C0;
    if (result <= "Local fingerprint supplied when caller didn't offer DTLS."
      && result + 57 > "Local fingerprint supplied when caller didn't offer DTLS.")
    {
      goto LABEL_101;
    }
    strcpy(result, "Local fingerprint supplied when caller didn't offer DTLS.");
LABEL_16:
    *(_DWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 36) = 0;
    *(_BYTE *)(a1 + 38) = 0;
    return result;
  }
  v12 = (std::string *)operator new();
  v13 = (uint64_t)v12;
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    v15 = *((_QWORD *)v9 + 3);
    *(_QWORD *)(v13 + 24) = v15;
    if (!v15)
      goto LABEL_25;
  }
  else
  {
    v14 = *v9;
    v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
    v15 = *((_QWORD *)v9 + 3);
    v12[1].__r_.__value_.__r.__words[0] = v15;
    if (!v15)
      goto LABEL_25;
  }
  v19 = (unsigned int *)(v15 + 24);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_25:
  *(_OWORD *)(v13 + 32) = v9[2];
  v21 = *(_DWORD *)(a2[6] + 116);
  v22 = *(_DWORD *)(a2[7] + 116);
  if (!a3)
  {
    if (v21 != 3)
    {
      *(_DWORD *)a1 = 3;
      result = (char *)operator new(0x38uLL);
      *(_QWORD *)(a1 + 8) = result;
      *(_OWORD *)(a1 + 16) = xmmword_208F0B3E0;
      if (result <= "Offerer must use actpass value for setup attribute."
        && result + 51 > "Offerer must use actpass value for setup attribute.")
      {
        goto LABEL_101;
      }
      strcpy(result, "Offerer must use actpass value for setup attribute.");
      *(_DWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 36) = 0;
      *(_BYTE *)(a1 + 38) = 0;
      if (*(_DWORD *)a1)
        goto LABEL_73;
      goto LABEL_62;
    }
    v24 = v22 == 2;
    if (v22 <= 2)
    {
LABEL_35:
      v25 = v24;
      v16 = v25 ^ 1u;
      *(_DWORD *)a1 = 0;
      *(_BYTE *)(a1 + 38) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v17 = 0x100000000;
      *(_QWORD *)(a1 + 29) = 0;
      v18 = a2[13];
      if (v18)
        goto LABEL_39;
LABEL_65:
      result = 0;
      v26 = *(char *)(v13 + 23);
      if ((v26 & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_66;
    }
    goto LABEL_41;
  }
  if (v22)
    v23 = v22 == 3;
  else
    v23 = 1;
  if (!v23)
  {
    LODWORD(v44) = 0;
    v29 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2[13] + 136) + 104))(*(_QWORD *)(a2[13] + 136), &v44);
    if ((v29 & 1) != 0)
    {
      v30 = v22 == 1 && (_DWORD)v44 == 0;
      if (v30 || (v22 == 2 ? (v31 = (_DWORD)v44 == 1) : (v31 = 0), v31))
      {
        *(_DWORD *)a1 = 3;
        result = (char *)operator new(0x40uLL);
        *(_QWORD *)(a1 + 8) = result;
        *(_OWORD *)(a1 + 16) = xmmword_208F0ABD0;
        if (result <= "Offerer must use current negotiated role for setup attribute."
          && result + 61 > "Offerer must use current negotiated role for setup attribute.")
        {
          goto LABEL_101;
        }
        strcpy(result, "Offerer must use current negotiated role for setup attribute.");
        *(_DWORD *)(a1 + 32) = 0;
        *(_BYTE *)(a1 + 36) = 0;
        *(_BYTE *)(a1 + 38) = 0;
        if (*(_DWORD *)a1)
          goto LABEL_73;
        goto LABEL_62;
      }
      goto LABEL_31;
    }
    if (v22 == 2)
    {
      if (v21 == 1)
        goto LABEL_32;
      v41 = "Answerer must be active when offerer is passive";
LABEL_99:
      webrtc::RTCError::RTCError(a1, 3, v41, 0x2FuLL);
      if (*(_DWORD *)a1)
        goto LABEL_73;
      goto LABEL_62;
    }
    if (v22 == 1)
    {
      if (v21 == 2)
        goto LABEL_32;
      v41 = "Answerer must be passive when offerer is active";
      goto LABEL_99;
    }
  }
LABEL_31:
  if ((v21 - 1) <= 1)
  {
LABEL_32:
    v24 = v21 == 1;
    goto LABEL_35;
  }
LABEL_41:
  *(_DWORD *)a1 = 3;
  result = (char *)operator new(0x48uLL);
  *(_QWORD *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 16) = xmmword_208F0B3D0;
  if (result <= "Answerer must use either active or passive value for setup attribute."
    && result + 69 > "Answerer must use either active or passive value for setup attribute.")
  {
    goto LABEL_101;
  }
  strcpy(result, "Answerer must use either active or passive value for setup attribute.");
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 38) = 0;
  if (*(_DWORD *)a1)
    goto LABEL_73;
LABEL_62:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  v16 = 0;
  v17 = 0;
  v18 = a2[13];
  if (!v18)
    goto LABEL_65;
LABEL_39:
  result = *(char **)(v18 + 136);
  v26 = *(char *)(v13 + 23);
  if ((v26 & 0x80000000) == 0)
  {
LABEL_40:
    v27 = v26;
    v28 = (void *)v13;
    goto LABEL_69;
  }
LABEL_66:
  v27 = *(_QWORD *)(v13 + 8);
  if (v27 < 0)
    goto LABEL_101;
  v28 = *(void **)v13;
  if (v27)
  {
    if (!v28)
      goto LABEL_101;
  }
LABEL_69:
  v32 = v17 | v16;
  v33 = *(_QWORD *)(v13 + 24);
  if (v33)
    v34 = *(_QWORD *)(v33 + 16) + *(_QWORD *)(v13 + 32);
  else
    v34 = 0;
  (*(void (**)(char *, void *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 192))(result, v28, v27, v34, *(_QWORD *)(v13 + 40), v32);
  if (!*(_DWORD *)a1)
  {
    v40 = a2[14];
    if (v40)
    {
      result = *(char **)(v40 + 136);
      if (result)
      {
        if ((*(char *)(v13 + 23) & 0x80000000) == 0
          || (v42 = *(_QWORD *)(v13 + 8), (v42 & 0x8000000000000000) == 0) && (!v42 || *(_QWORD *)v13))
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)result + 192))(&v44);
          *(_DWORD *)a1 = v44;
          v43 = (void **)(a1 + 8);
          if (*(char *)(a1 + 31) < 0)
            operator delete(*v43);
          *(_OWORD *)v43 = v45;
          *(_QWORD *)(a1 + 24) = v46;
          *(_DWORD *)(a1 + 32) = v47[0];
          *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)v47 + 3);
          goto LABEL_73;
        }
LABEL_101:
        __break(1u);
        return result;
      }
    }
  }
LABEL_73:
  v35 = *(_QWORD *)(v13 + 24);
  if (v35)
  {
    v36 = (unsigned int *)(v35 + 24);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      v39 = *(_QWORD *)(v35 + 16);
      *(_QWORD *)(v35 + 16) = 0;
      if (v39)
        MEMORY[0x20BD0ADD4](v39, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v35, 0x1010C40EE34DA14);
    }
  }
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  return (char *)MEMORY[0x20BD0ADEC](v13, 0x1032C40CD05A1E1);
}

void cricket::JsepTransport::SetRemoteJsepTransportDescription(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  const cricket::TransportDescription *v8;
  _QWORD *v9;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  const char *p_p;
  webrtc::DtlsSrtpTransport *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  char v30;
  char v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  char *p_src;
  size_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _BYTE v45[31];
  char v46;
  int v47;
  __int16 v48;
  char v49;
  __int128 __src;
  uint64_t v51;
  int v52;
  void *__p;
  char v54;
  void *v55[2];
  char v56;
  void *v57;
  char v58;
  int v59;
  __int16 v60;
  _QWORD v61[5];

  v61[2] = *MEMORY[0x24BDAC8D0];
  v61[0] = 0;
  *(_QWORD *)((char *)v61 + 7) = 0;
  v59 = 0;
  LOBYTE(v60) = 0;
  v8 = (const cricket::TransportDescription *)(a2 + 40);
  cricket::TransportDescription::GetIceParameters(a2 + 40, v55);
  cricket::IceParameters::Validate((cricket::IceParameters *)v55, (uint64_t)&v52);
  if (v52)
  {
    v9 = (_QWORD *)a1[7];
    a1[7] = 0;
    if (v9)
    {
      cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)(v9 + 5));
      v10 = (void *)v9[1];
      if (v10)
      {
        v9[2] = v10;
        operator delete(v10);
      }
      MEMORY[0x20BD0ADEC](v9, 0x1032C40A0916259);
    }
    v11 = (char *)operator new(0x30uLL);
    v12 = v11;
    v13 = v11 + 24;
    if (v11 <= "Invalid ICE parameters: " && v13 > "Invalid ICE parameters: ")
      goto LABEL_71;
    strcpy(v11, "Invalid ICE parameters: ");
    *(_QWORD *)v45 = v11;
    *(_OWORD *)&v45[8] = xmmword_208F0B3A0;
    if (v54 < 0)
    {
      p_p = (const char *)__p;
      if (!__p)
        goto LABEL_71;
    }
    else
    {
      p_p = (const char *)&__p;
    }
    v35 = strlen(p_p);
    v36 = v35;
    if (v35 <= 0x17)
    {
      if (v35)
      {
        if (v13 <= p_p && &v13[v35] > p_p)
          goto LABEL_71;
        memmove(v13, p_p, v35);
        *(_QWORD *)&v45[8] = v36 + 24;
        v12[v36 + 24] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace((std::string *)v45, 0x2FuLL, v35 - 23, 0x18uLL, 0x18uLL, 0, v35, p_p);
    }
    v51 = *(_QWORD *)&v45[16];
    __src = *(_OWORD *)v45;
    memset(v45, 0, 24);
    v37 = HIBYTE(v51);
    if ((SHIBYTE(v51) & 0x80000000) == 0)
    {
      *(_DWORD *)a4 = 3;
      p_src = (char *)&__src;
      v39 = v37;
LABEL_43:
      if (v39 > 0x16)
      {
        v42 = (v39 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v39 | 7) != 0x17)
          v42 = v39 | 7;
        v43 = v42 + 1;
        v40 = (char *)operator new(v42 + 1);
        *(_QWORD *)(a4 + 16) = v39;
        *(_QWORD *)(a4 + 24) = v43 | 0x8000000000000000;
        *(_QWORD *)(a4 + 8) = v40;
        v41 = &v40[v39];
        if (v40 > p_src)
          goto LABEL_50;
      }
      else
      {
        v40 = (char *)(a4 + 8);
        *(_BYTE *)(a4 + 31) = v39;
        v41 = (char *)(a4 + 8 + v39);
        if (a4 + 8 > (unint64_t)p_src)
          goto LABEL_50;
      }
      if (v41 <= p_src)
      {
LABEL_50:
        if (v39)
          memmove(v40, p_src, v39);
        *v41 = 0;
        *(_DWORD *)(a4 + 32) = 0;
        *(_BYTE *)(a4 + 36) = 0;
        *(_BYTE *)(a4 + 38) = 0;
        if ((v37 & 0x80) != 0)
        {
          operator delete((void *)__src);
          if ((v45[23] & 0x80000000) != 0)
            operator delete(*(void **)v45);
        }
        goto LABEL_55;
      }
      goto LABEL_71;
    }
    v39 = *((_QWORD *)&__src + 1);
    if ((*((_QWORD *)&__src + 1) & 0x8000000000000000) == 0)
    {
      p_src = (char *)__src;
      if (!*((_QWORD *)&__src + 1) || (_QWORD)__src)
      {
        *(_DWORD *)a4 = 3;
        if (v39 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_72;
        goto LABEL_43;
      }
    }
LABEL_71:
    __break(1u);
LABEL_72:
    abort();
  }
  if ((cricket::JsepTransport::SetRtcpMux((uint64_t)a1, *a2, a3, 1) & 1) == 0)
  {
    *(_DWORD *)a4 = 3;
    v44 = (char *)operator new(0x20uLL);
    *(_QWORD *)(a4 + 8) = v44;
    *(_OWORD *)(a4 + 16) = xmmword_208F05150;
    if (v44 > "Failed to setup RTCP mux." || v44 + 25 <= "Failed to setup RTCP mux.")
    {
      v30 = 0;
      v29 = 0;
      strcpy(v44, "Failed to setup RTCP mux.");
      *(_DWORD *)(a4 + 32) = 0;
      *(_BYTE *)(a4 + 36) = 0;
      *(_BYTE *)(a4 + 38) = 0;
      if ((v54 & 0x80000000) == 0)
        goto LABEL_61;
      goto LABEL_60;
    }
    goto LABEL_71;
  }
  v15 = (webrtc::DtlsSrtpTransport *)a1[12];
  if (v15)
  {
    webrtc::DtlsSrtpTransport::UpdateSendEncryptedHeaderExtensionIds(v15, (uint64_t)(a2 + 8));
    *(_DWORD *)(a1[12] + 636) = *((_DWORD *)a2 + 8);
  }
  v16 = operator new();
  *(_BYTE *)v16 = *a2;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v18 = (_BYTE *)*((_QWORD *)a2 + 1);
  v17 = (_BYTE *)*((_QWORD *)a2 + 2);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      goto LABEL_72;
    v20 = (char *)operator new(v17 - v18);
    *(_QWORD *)(v16 + 8) = v20;
    v21 = &v20[4 * (v19 >> 2)];
    *(_QWORD *)(v16 + 24) = v21;
    memcpy(v20, v18, v19);
    *(_QWORD *)(v16 + 16) = v21;
  }
  *(_DWORD *)(v16 + 32) = *((_DWORD *)a2 + 8);
  cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)(v16 + 40), v8);
  v22 = (_QWORD *)a1[7];
  a1[7] = v16;
  if (v22)
  {
    cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)(v22 + 5));
    v23 = (void *)v22[1];
    if (v23)
    {
      v22[2] = v23;
      operator delete(v23);
    }
    MEMORY[0x20BD0ADEC](v22, 0x1032C40A0916259);
  }
  v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[13] + 136) + 200))(*(_QWORD *)(a1[13] + 136));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 152))(v24, v55);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 160))(v24, *(unsigned int *)(a1[7] + 112));
  v25 = a1[14];
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 136);
    if (v26)
    {
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 200))(v26);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 152))(v27, v55);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 160))(v27, *(unsigned int *)(a1[7] + 112));
    }
  }
  if ((a3 - 1) > 1)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    cricket::JsepTransport::NegotiateAndSetDtlsParameters((uint64_t)v45, a1, 0);
    v28 = *(_DWORD *)v45;
    v61[0] = *(_QWORD *)&v45[16];
    v29 = *(void **)&v45[8];
    *(_QWORD *)((char *)v61 + 7) = *(_QWORD *)&v45[23];
    v30 = v46;
    v59 = v47;
    v60 = v48;
    if (*(_DWORD *)v45)
    {
      v31 = v49;
      v32 = (_QWORD *)a1[7];
      a1[7] = 0;
      if (v32)
      {
        cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)(v32 + 5));
        v33 = (void *)v32[1];
        if (v33)
        {
          v32[2] = v33;
          operator delete(v33);
        }
        MEMORY[0x20BD0ADEC](v32, 0x1032C40A0916259);
      }
      *(_DWORD *)a4 = v28;
      v34 = v61[0];
      *(_QWORD *)(a4 + 8) = v29;
      *(_QWORD *)(a4 + 16) = v34;
      *(_QWORD *)(a4 + 23) = *(_QWORD *)((char *)v61 + 7);
      *(_BYTE *)(a4 + 31) = v30;
      v61[0] = 0;
      *(_QWORD *)((char *)v61 + 7) = 0;
      *(_DWORD *)(a4 + 32) = v59;
      *(_WORD *)(a4 + 36) = v60;
      *(_BYTE *)(a4 + 38) = v31;
LABEL_55:
      v30 = 0;
      v29 = 0;
      if ((v54 & 0x80000000) == 0)
        goto LABEL_61;
      goto LABEL_60;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_BYTE *)(a4 + 38) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 29) = 0;
  if (v54 < 0)
LABEL_60:
    operator delete(__p);
LABEL_61:
  if (v58 < 0)
  {
    operator delete(v57);
    if ((v56 & 0x80000000) == 0)
    {
LABEL_63:
      if ((v30 & 0x80) == 0)
        return;
LABEL_67:
      operator delete(v29);
      return;
    }
  }
  else if ((v56 & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(v55[0]);
  if (v30 < 0)
    goto LABEL_67;
}

void cricket::JsepTransport::AddRemoteCandidates(uint64_t a1@<X0>, cricket::Candidate **a2@<X1>, uint64_t a3@<X8>)
{
  cricket::Candidate *v5;
  cricket::Candidate *v6;
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  int v10;
  size_t v11;
  unint64_t v12;
  const void **v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  char *v18;
  size_t v21;
  std::string *v22;
  size_t v23;
  std::string *v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type size;
  std::string *v33;
  char *v34;
  std::string::size_type v35;
  int v36;
  char *v37;
  size_t v38;
  BOOL v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string *v42;
  char *v43;
  std::string::size_type v44;
  size_t v45;
  std::string *p_src;
  size_t v47;
  std::string *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string __src;

  if (*(_QWORD *)(a1 + 48) && *(_QWORD *)(a1 + 56))
  {
    v5 = *a2;
    v6 = a2[1];
    if (*a2 == v6)
    {
LABEL_9:
      *(_DWORD *)a3 = 0;
      *(_BYTE *)(a3 + 38) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 29) = 0;
      return;
    }
    while (1)
    {
      v7 = *((_DWORD *)v5 + 6) == 1 ? 104 : 112;
      v8 = *(_QWORD ***)(a1 + v7);
      if (!v8)
        break;
      ((void (*)(_QWORD **))**v8)(v8);
      v9 = (*(uint64_t (**)(_QWORD *))(*v8[17] + 200))(v8[17]);
      (*(void (**)(uint64_t, cricket::Candidate *))(*(_QWORD *)v9 + 184))(v9, v5);
      ((void (*)(_QWORD **))(*v8)[1])(v8);
      v5 = (cricket::Candidate *)((char *)v5 + 432);
      if (v5 == v6)
        goto LABEL_9;
    }
    cricket::Candidate::ToStringInternal(v5, 1, &v52);
    v29 = std::string::insert(&v52, 0, "Candidate has an unknown component: ");
    v30 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = 22;
    else
      v31 = (v53.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      size = v53.__r_.__value_.__l.__size_;
    if (v31 - size >= 9)
    {
      v33 = &v53;
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = (std::string *)v53.__r_.__value_.__r.__words[0];
      v34 = (char *)v33 + size;
      if ((char *)v33 + size <= " for mid " && v34 + 9 > " for mid ")
        goto LABEL_111;
      v34[8] = 32;
      *(_QWORD *)v34 = *(_QWORD *)" for mid ";
      v35 = size + 9;
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        v53.__r_.__value_.__l.__size_ = size + 9;
      else
        *((_BYTE *)&v53.__r_.__value_.__s + 23) = v35 & 0x7F;
      v33->__r_.__value_.__s.__data_[v35] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v53, v31, size - v31 + 9, size, size, 0, 9uLL, " for mid ");
    }
    v54 = v53;
    memset(&v53, 0, sizeof(v53));
    v36 = *(char *)(a1 + 31);
    if (v36 < 0)
    {
      v37 = *(char **)(a1 + 8);
      v38 = *(_QWORD *)(a1 + 16);
      v39 = v38 == 0;
      if (!v37 && v38)
        goto LABEL_111;
    }
    else
    {
      v37 = (char *)(a1 + 8);
      v38 = *(unsigned __int8 *)(a1 + 31);
      v39 = v36 == 0;
    }
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = 22;
    else
      v40 = (v54.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    else
      v41 = v54.__r_.__value_.__l.__size_;
    if (v40 - v41 >= v38)
    {
      if (!v39)
      {
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v54;
        else
          v42 = (std::string *)v54.__r_.__value_.__r.__words[0];
        v43 = (char *)v42 + v41;
        if ((char *)v42 + v41 <= v37 && &v43[v38] > v37)
          goto LABEL_111;
        memmove(v43, v37, v38);
        v44 = v41 + v38;
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          v54.__r_.__value_.__l.__size_ = v41 + v38;
        else
          *((_BYTE *)&v54.__r_.__value_.__s + 23) = v44 & 0x7F;
        v42->__r_.__value_.__s.__data_[v44] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v54, v40, v41 + v38 - v40, v41, v41, 0, v38, v37);
    }
    __src = v54;
    memset(&v54, 0, sizeof(v54));
    v45 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *(_DWORD *)a3 = 3;
      p_src = &__src;
      v47 = v45;
LABEL_94:
      if (v47 > 0x16)
      {
        v50 = (v47 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v47 | 7) != 0x17)
          v50 = v47 | 7;
        v51 = v50 + 1;
        v48 = (std::string *)operator new(v50 + 1);
        *(_QWORD *)(a3 + 16) = v47;
        *(_QWORD *)(a3 + 24) = v51 | 0x8000000000000000;
        *(_QWORD *)(a3 + 8) = v48;
        v49 = (std::string *)((char *)v48 + v47);
        if (v48 > p_src)
          goto LABEL_101;
      }
      else
      {
        v48 = (std::string *)(a3 + 8);
        *(_BYTE *)(a3 + 31) = v47;
        v49 = (std::string *)(a3 + 8 + v47);
        if (a3 + 8 > (unint64_t)p_src)
          goto LABEL_101;
      }
      if (v49 <= p_src)
      {
LABEL_101:
        if (v47)
          memmove(v48, p_src, v47);
        v49->__r_.__value_.__s.__data_[0] = 0;
        *(_DWORD *)(a3 + 32) = 0;
        *(_BYTE *)(a3 + 36) = 0;
        *(_BYTE *)(a3 + 38) = 0;
        if ((v45 & 0x80) != 0)
        {
          operator delete(__src.__r_.__value_.__l.__data_);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v28 = (void *)v52.__r_.__value_.__r.__words[0];
LABEL_49:
        operator delete(v28);
        return;
      }
      goto LABEL_111;
    }
    v47 = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
    {
      p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
      if (!__src.__r_.__value_.__l.__size_ || __src.__r_.__value_.__r.__words[0])
      {
        *(_DWORD *)a3 = 3;
        if (v47 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_112;
        goto LABEL_94;
      }
    }
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  v10 = *(char *)(a1 + 31);
  if (v10 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 31);
  else
    v11 = *(_QWORD *)(a1 + 16);
  v12 = v11 + 93;
  if (v11 + 93 > 0x7FFFFFFFFFFFFFF7)
LABEL_112:
    abort();
  v13 = (const void **)(a1 + 8);
  if (v12 > 0x16)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = (std::string *)operator new(v15 + 1);
    __src.__r_.__value_.__l.__size_ = v11 + 93;
    __src.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  }
  else
  {
    memset(&__src, 0, sizeof(__src));
    v14 = &__src;
    *((_BYTE *)&__src.__r_.__value_.__s + 23) = v11 + 93;
  }
  if (v10 >= 0)
    v17 = (std::string *)v13;
  else
    v17 = (std::string *)*v13;
  v18 = (char *)v14 + v11;
  if (v17 >= v14 && v18 > (char *)v17)
    goto LABEL_111;
  if (v11)
    memmove(v14, v17, v11);
  if (v18 <= " is not ready to use the remote candidate because the local or remote description is not set."
    && v18 + 93 > " is not ready to use the remote candidate because the local or remote description is not set.")
  {
    goto LABEL_111;
  }
  strcpy(v18, " is not ready to use the remote candidate because the local or remote description is not set.");
  v21 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    v23 = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_111;
    v22 = (std::string *)__src.__r_.__value_.__r.__words[0];
    if (__src.__r_.__value_.__l.__size_)
    {
      if (!__src.__r_.__value_.__r.__words[0])
        goto LABEL_111;
    }
    *(_DWORD *)a3 = 6;
    if (v23 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_112;
  }
  else
  {
    *(_DWORD *)a3 = 6;
    v22 = &__src;
    v23 = v21;
  }
  if (v23 > 0x16)
  {
    v26 = (v23 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v24 = (std::string *)operator new(v26 + 1);
    *(_QWORD *)(a3 + 16) = v23;
    *(_QWORD *)(a3 + 24) = v27 | 0x8000000000000000;
    *(_QWORD *)(a3 + 8) = v24;
    v25 = (std::string *)((char *)v24 + v23);
    if (v24 > v22)
      goto LABEL_45;
  }
  else
  {
    v24 = (std::string *)(a3 + 8);
    *(_BYTE *)(a3 + 31) = v23;
    v25 = (std::string *)(a3 + 8 + v23);
    if (a3 + 8 > (unint64_t)v22)
      goto LABEL_45;
  }
  if (v25 > v22)
    goto LABEL_111;
LABEL_45:
  if (v23)
    memmove(v24, v22, v23);
  v25->__r_.__value_.__s.__data_[0] = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 38) = 0;
  if ((v21 & 0x80) != 0)
  {
    v28 = (void *)__src.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
}

uint64_t cricket::JsepTransport::GetStats(uint64_t a1, std::string *this)
{
  char v4;
  __int128 v5;
  std::string::size_type size;
  std::string::pointer data;
  const std::string::value_type *v8;
  size_t v9;
  uint64_t TransportStats;
  uint64_t v11;
  uint64_t v12;

  if ((std::string *)(a1 + 8) == this)
  {
LABEL_15:
    data = this[1].__r_.__value_.__l.__data_;
    size = this[1].__r_.__value_.__l.__size_;
    if ((std::string::pointer)size == data)
      goto LABEL_17;
    goto LABEL_16;
  }
  v4 = *(_BYTE *)(a1 + 31);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((*(_BYTE *)(a1 + 31) & 0x80) == 0)
    {
      v5 = *(_OWORD *)(a1 + 8);
      this->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
      data = this[1].__r_.__value_.__l.__data_;
      size = this[1].__r_.__value_.__l.__size_;
      if ((std::string::pointer)size == data)
        goto LABEL_17;
      goto LABEL_16;
    }
    std::string::__assign_no_alias<true>(this, *(char **)(a1 + 8), *(_QWORD *)(a1 + 16));
    goto LABEL_15;
  }
  if (v4 >= 0)
    v8 = (const std::string::value_type *)(a1 + 8);
  else
    v8 = *(const std::string::value_type **)(a1 + 8);
  if (v4 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 31);
  else
    v9 = *(_QWORD *)(a1 + 16);
  std::string::__assign_no_alias<false>(this, v8, v9);
  data = this[1].__r_.__value_.__l.__data_;
  size = this[1].__r_.__value_.__l.__size_;
  if ((std::string::pointer)size == data)
    goto LABEL_17;
  do
LABEL_16:
    cricket::TransportChannelStats::~TransportChannelStats((void **)(size - 168));
  while ((std::string::pointer)size != data);
LABEL_17:
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
  TransportStats = cricket::JsepTransport::GetTransportStats(size, *(_QWORD *)(*(_QWORD *)(a1 + 104) + 136), 1u, this);
  v11 = TransportStats;
  v12 = *(_QWORD *)(a1 + 112);
  if (v12)
    return TransportStats & cricket::JsepTransport::GetTransportStats(TransportStats, *(_QWORD *)(v12 + 136), 2u, this);
  return v11;
}

uint64_t cricket::JsepTransport::GetTransportStats(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  void **v26;
  void **v27;
  void **v28;
  void *v29;
  void **v30;
  void **v31;
  void *v32;
  int v34;
  _BYTE v35[28];
  void *v36[2];
  void *__p[2];
  __int128 v38;
  int v39;
  __int128 v40;
  __int128 v41;
  int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int16 v47;

  v35[20] = 0;
  *(_DWORD *)&v35[24] = 0;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)__p = 0u;
  v38 = 0u;
  v39 = 0;
  v40 = 0u;
  v41 = 0u;
  v35[16] = 0;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  v42 = 2;
  v46 = 0;
  v47 = 0;
  *(_OWORD *)v35 = a3;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 120))(a2, &v35[4]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 128))(a2, &v35[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 136))(a2, &v35[12]);
  *(_DWORD *)&v35[24] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  v34 = 0;
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v34))
  {
    *(_DWORD *)&v35[16] = v34;
    v35[20] = 1;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v7 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v6 + 216))(v6, v36);
  if ((_DWORD)v7)
  {
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 144))(a2);
    v9 = a4[4];
    v8 = a4[5];
    if (v9 >= v8)
    {
      v12 = a4[3];
      v13 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v9 - v12) >> 3);
      if (v13 + 1 > 0x186186186186186)
        goto LABEL_39;
      v14 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v8 - v12) >> 3);
      v15 = 2 * v14;
      if (2 * v14 <= v13 + 1)
        v15 = v13 + 1;
      if (v14 >= 0xC30C30C30C30C3)
        v16 = 0x186186186186186;
      else
        v16 = v15;
      if (v16)
      {
        if (v16 > 0x186186186186186)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v17 = 168 * v16;
        v18 = (char *)operator new(168 * v16);
        v19 = &v18[v17];
        v20 = &v18[168 * v13];
        *(_OWORD *)v20 = *(_OWORD *)v35;
        *(_OWORD *)(v20 + 12) = *(_OWORD *)&v35[12];
        cricket::IceTransportStats::IceTransportStats((uint64_t)(v20 + 32), (uint64_t *)v36);
        *((_WORD *)v20 + 80) = v47;
        v11 = v20 + 168;
        v22 = (char *)a4[3];
        v21 = (char *)a4[4];
        if (v21 == v22)
        {
          a4[3] = v20;
          a4[4] = v11;
          a4[5] = v19;
          if (!v21)
            goto LABEL_22;
        }
        else
        {
          v23 = 0;
          do
          {
            v24 = &v20[v23];
            v25 = *(_OWORD *)&v21[v23 - 168];
            *(_OWORD *)(v24 - 156) = *(_OWORD *)&v21[v23 - 156];
            *(_OWORD *)(v24 - 168) = v25;
            cricket::IceTransportStats::IceTransportStats((uint64_t)&v20[v23 - 136], (uint64_t *)&v21[v23 - 136]);
            *((_WORD *)v24 - 4) = *(_WORD *)&v21[v23 - 8];
            v23 -= 168;
          }
          while (&v21[v23] != v22);
          v21 = (char *)a4[3];
          v26 = (void **)a4[4];
          a4[3] = &v20[v23];
          a4[4] = v11;
          a4[5] = v19;
          while (v26 != (void **)v21)
            cricket::TransportChannelStats::~TransportChannelStats(v26 - 21);
          if (!v21)
            goto LABEL_22;
        }
        operator delete(v21);
LABEL_22:
        a4[4] = v11;
        goto LABEL_23;
      }
    }
    else if (v9)
    {
      v10 = *(_OWORD *)v35;
      *(_OWORD *)(v9 + 12) = *(_OWORD *)&v35[12];
      *(_OWORD *)v9 = v10;
      cricket::IceTransportStats::IceTransportStats(v9 + 32, (uint64_t *)v36);
      *(_WORD *)(v9 + 160) = v47;
      v11 = (char *)(v9 + 168);
      goto LABEL_22;
    }
    __break(1u);
LABEL_39:
    abort();
  }
LABEL_23:
  if (SHIBYTE(v45) < 0)
    operator delete(v43);
  v27 = (void **)__p[1];
  if (__p[1])
  {
    v28 = (void **)v38;
    v29 = __p[1];
    if ((void *)v38 != __p[1])
    {
      do
      {
        cricket::Candidate::~Candidate(v28 - 64);
        cricket::Candidate::~Candidate(v28 - 118);
        v28 -= 133;
      }
      while (v28 != v27);
      v29 = __p[1];
    }
    *(_QWORD *)&v38 = v27;
    operator delete(v29);
  }
  v30 = (void **)v36[0];
  if (v36[0])
  {
    v31 = (void **)v36[1];
    v32 = v36[0];
    if (v36[1] != v36[0])
    {
      do
        cricket::Candidate::~Candidate(v31 - 58);
      while (v31 != v30);
      v32 = v36[0];
    }
    v36[1] = v30;
    operator delete(v32);
  }
  return v7;
}

uint64_t rtc::RefCountedObject<webrtc::DtlsTransport>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 152);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::DtlsTransport>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 38;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::DtlsTransport>::~RefCountedObject(webrtc::DtlsTransport *a1)
{
  webrtc::DtlsTransport::~DtlsTransport(a1);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::DtlsTransport>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 152));
  return v1 == 1;
}

uint64_t rtc::RefCountedObject<webrtc::SctpTransport>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 88);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::SctpTransport>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 22;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::SctpTransport>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_24C0C0070;
  a1[1] = &unk_24C0C0100;
  v2 = a1[10];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[4];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void rtc::RefCountedObject<webrtc::SctpTransport>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_24C0C0070;
  a1[1] = &unk_24C0C0100;
  v2 = a1[10];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[4];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::SctpTransport>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 88));
  return v1 == 1;
}

uint64_t `non-virtual thunk to'rtc::RefCountedObject<webrtc::SctpTransport>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  *(a1 - 1) = &unk_24C0C0070;
  *a1 = &unk_24C0C0100;
  v2 = a1[9];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = a1[3];
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::SctpTransport>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(a1 - 1) = &unk_24C0C0070;
  *a1 = &unk_24C0C0100;
  v2 = a1[9];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[3];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::BundleManager::Update(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  char *v7;
  uint64_t **v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v17;
  char *v18;
  __int128 *v19;
  std::string *v20;
  std::string **v21;
  void **v22;
  void **v23;
  void **v24;
  void *v25;
  char v26;
  _QWORD *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  BOOL v31;
  int v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  size_t v37;
  size_t v39;
  int v40;
  const void *v41;
  _QWORD *v42;
  size_t v43;
  _QWORD *v44;
  size_t v45;
  size_t v47;
  int v48;
  size_t v49;
  int v50;
  uint64_t *v51;
  char v52;
  __int128 v53;
  const std::string::value_type *v54;
  size_t v55;
  char v56;
  char *v57;
  __int128 *v58;
  char *v59;
  _QWORD *v60;
  uint64_t *v61;
  void *__p[2];
  char v63;
  char *v64;
  char *v65;

  if (a3 == 2 || *(_DWORD *)a1 == 1)
  {
    v9 = *(_QWORD **)(a1 + 8);
    v10 = *(_QWORD **)(a1 + 16);
    while (v10 != v9)
    {
      v12 = *--v10;
      v11 = v12;
      *v10 = 0;
      if (v12)
      {
        v13 = *(_QWORD *)(v11 + 24);
        if (v13)
        {
          v14 = *(_QWORD *)(v11 + 32);
          v15 = *(void **)(v11 + 24);
          if (v14 != v13)
          {
            do
            {
              if (*(char *)(v14 - 1) < 0)
                operator delete(*(void **)(v14 - 24));
              v14 -= 24;
            }
            while (v14 != v13);
            v15 = *(void **)(v11 + 24);
          }
          *(_QWORD *)(v11 + 32) = v13;
          operator delete(v15);
        }
        if (*(char *)(v11 + 23) < 0)
          operator delete(*(void **)v11);
        MEMORY[0x20BD0ADEC](v11, 0x1032C402D514303);
      }
    }
    *(_QWORD *)(a1 + 16) = v9;
    v63 = 6;
    if (__p <= (void **)"BUNDLE" && (char *)__p + 6 > "BUNDLE")
      goto LABEL_141;
    strcpy((char *)__p, "BUNDLE");
    cricket::SessionDescription::GetGroupsByName(a2, (unsigned __int8 **)__p, &v64);
    if ((v63 & 0x80000000) == 0)
    {
      v17 = v64;
      v18 = v65;
      if (v64 != v65)
        goto LABEL_37;
LABEL_33:
      if (v17)
        goto LABEL_53;
      goto LABEL_54;
    }
    operator delete(__p[0]);
    v17 = v64;
    v18 = v65;
    if (v64 == v65)
      goto LABEL_33;
LABEL_37:
    while (1)
    {
      v19 = *(__int128 **)v17;
      v20 = (std::string *)operator new();
      __p[0] = cricket::ContentGroup::ContentGroup(v20, v19);
      v21 = *(std::string ***)(a1 + 16);
      if ((unint64_t)v21 < *(_QWORD *)(a1 + 24))
        break;
      *(_QWORD *)(a1 + 16) = std::vector<std::unique_ptr<cricket::ContentGroup>>::__push_back_slow_path<std::unique_ptr<cricket::ContentGroup>>((_QWORD *)(a1 + 8), (uint64_t *)__p);
      v22 = (void **)__p[0];
      __p[0] = 0;
      if (v22)
        goto LABEL_42;
LABEL_36:
      v17 += 8;
      if (v17 == v18)
      {
        v17 = v64;
        if (v64)
        {
LABEL_53:
          v65 = v17;
          operator delete(v17);
        }
LABEL_54:
        webrtc::BundleManager::RefreshEstablishedBundleGroupsByMid((char **)a1);
        return;
      }
    }
    if (!v21)
      goto LABEL_141;
    __p[0] = 0;
    *v21 = v20;
    *(_QWORD *)(a1 + 16) = v21 + 1;
    v22 = (void **)__p[0];
    __p[0] = 0;
    if (!v22)
      goto LABEL_36;
LABEL_42:
    v23 = (void **)v22[3];
    if (v23)
    {
      v24 = (void **)v22[4];
      v25 = v22[3];
      if (v24 != v23)
      {
        do
        {
          if (*((char *)v24 - 1) < 0)
            operator delete(*(v24 - 3));
          v24 -= 3;
        }
        while (v24 != v23);
        v25 = v22[3];
      }
      v22[4] = v23;
      operator delete(v25);
    }
    if (*((char *)v22 + 23) < 0)
      operator delete(*v22);
    MEMORY[0x20BD0ADEC](v22, 0x1032C402D514303);
    goto LABEL_36;
  }
  if (a3)
    return;
  v63 = 6;
  if (__p <= (void **)"BUNDLE" && (char *)__p + 6 > "BUNDLE")
    goto LABEL_141;
  strcpy((char *)__p, "BUNDLE");
  cricket::SessionDescription::GetGroupsByName(a2, (unsigned __int8 **)__p, &v64);
  if (v63 < 0)
  {
    operator delete(__p[0]);
    v6 = v64;
    v7 = v65;
    if (v64 != v65)
      goto LABEL_10;
LABEL_57:
    v26 = 0;
    if (!v6)
      goto LABEL_59;
    goto LABEL_58;
  }
  v6 = v64;
  v7 = v65;
  if (v64 == v65)
    goto LABEL_57;
LABEL_10:
  v56 = 0;
  v8 = (uint64_t **)(a1 + 64);
  v57 = v7;
  while (2)
  {
    v27 = *(_QWORD **)(*(_QWORD *)v6 + 24);
    v60 = *(_QWORD **)(*(_QWORD *)v6 + 32);
    if (v27 == v60)
      goto LABEL_63;
    v61 = *v8;
    if (!*v8)
      goto LABEL_63;
    v58 = *(__int128 **)v6;
    v59 = v6;
    while (2)
    {
      v28 = *((unsigned __int8 *)v27 + 23);
      v29 = (const void *)*v27;
      v30 = v27[1];
      if (v30)
        v31 = v29 == 0;
      else
        v31 = 0;
      v32 = !v31;
      v33 = (uint64_t **)(a1 + 64);
      v34 = v61;
      if ((*((_BYTE *)v27 + 23) & 0x80) != 0)
      {
        if ((v30 & 0x8000000000000000) == 0 && v32)
        {
          v33 = (uint64_t **)(a1 + 64);
          v35 = v61;
          while (1)
          {
            v44 = v35 + 4;
            if (*((char *)v35 + 55) < 0)
            {
              v45 = v35[5];
              if ((v45 & 0x8000000000000000) != 0)
                break;
              v44 = (_QWORD *)*v44;
              if (v45 && v44 == 0)
                break;
            }
            else
            {
              v45 = *((unsigned __int8 *)v35 + 55);
            }
            if (v30 >= v45)
              v47 = v45;
            else
              v47 = v30;
            v48 = memcmp(v44, v29, v47);
            if (v48)
            {
              if (v48 < 0)
                goto LABEL_104;
LABEL_101:
              v33 = (uint64_t **)v35;
              v35 = (uint64_t *)*v35;
              if (!v35)
                goto LABEL_95;
            }
            else
            {
              if (v45 >= v30)
                goto LABEL_101;
LABEL_104:
              v35 = (uint64_t *)v35[1];
              if (!v35)
                goto LABEL_95;
            }
          }
        }
LABEL_141:
        __break(1u);
        return;
      }
      do
      {
        while (1)
        {
          v36 = v34 + 4;
          if (*((char *)v34 + 55) < 0)
          {
            v37 = v34[5];
            if ((v37 & 0x8000000000000000) != 0)
              goto LABEL_141;
            v36 = (_QWORD *)*v36;
            if (v37 && v36 == 0)
              goto LABEL_141;
          }
          else
          {
            v37 = *((unsigned __int8 *)v34 + 55);
          }
          v39 = v28 >= v37 ? v37 : v28;
          v40 = memcmp(v36, v27, v39);
          if (v40)
            break;
          if (v37 >= v28)
            goto LABEL_94;
LABEL_79:
          v34 = (uint64_t *)v34[1];
          if (!v34)
            goto LABEL_95;
        }
        if (v40 < 0)
          goto LABEL_79;
LABEL_94:
        v33 = (uint64_t **)v34;
        v34 = (uint64_t *)*v34;
      }
      while (v34);
LABEL_95:
      if (v8 == v33)
        goto LABEL_68;
      v41 = v27;
      if ((v28 & 0x80) != 0)
      {
        if ((v30 & 0x8000000000000000) != 0)
          goto LABEL_141;
        v41 = v29;
        v28 = v30;
        if ((v32 & 1) == 0)
          goto LABEL_141;
      }
      v42 = v33 + 4;
      if (*((char *)v33 + 55) < 0)
      {
        v43 = (size_t)v33[5];
        if ((v43 & 0x8000000000000000) == 0)
        {
          v42 = (_QWORD *)*v42;
          if (!v43 || v42)
            goto LABEL_121;
        }
        goto LABEL_141;
      }
      v43 = *((unsigned __int8 *)v33 + 55);
LABEL_121:
      if (v43 >= v28)
        v49 = v28;
      else
        v49 = v43;
      v50 = memcmp(v41, v42, v49);
      if (!v50)
      {
        if (v28 >= v43)
          goto LABEL_126;
LABEL_68:
        v27 += 3;
        if (v27 == v60)
          goto LABEL_62;
        continue;
      }
      break;
    }
    if (v50 < 0)
      goto LABEL_68;
LABEL_126:
    v51 = v33[7];
    if (v51 == (uint64_t *)v58)
    {
      v56 = 1;
LABEL_62:
      v6 = v59;
      v7 = v57;
      goto LABEL_63;
    }
    v52 = *((_BYTE *)v58 + 23);
    v7 = v57;
    if (*((char *)v51 + 23) < 0)
    {
      if (v52 >= 0)
        v54 = (const std::string::value_type *)v58;
      else
        v54 = *(const std::string::value_type **)v58;
      if (v52 >= 0)
        v55 = *((unsigned __int8 *)v58 + 23);
      else
        v55 = *((_QWORD *)v58 + 1);
      std::string::__assign_no_alias<false>((std::string *)v33[7], v54, v55);
    }
    else if ((*((_BYTE *)v58 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v33[7], *(char **)v58, *((_QWORD *)v58 + 1));
    }
    else
    {
      v53 = *v58;
      v51[2] = *((_QWORD *)v58 + 2);
      *(_OWORD *)v51 = v53;
    }
    std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)v51 + 3, *((__int128 **)v58 + 3), *((__int128 **)v58 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v58 + 4) - *((_QWORD *)v58 + 3)) >> 3));
    v56 = 1;
    v6 = v59;
LABEL_63:
    v6 += 8;
    if (v6 != v7)
      continue;
    break;
  }
  v6 = v64;
  v26 = v56;
  if (v64)
  {
LABEL_58:
    v65 = v6;
    operator delete(v6);
  }
LABEL_59:
  if ((v26 & 1) != 0)
    goto LABEL_54;
}

void webrtc::BundleManager::RefreshEstablishedBundleGroupsByMid(char **this)
{
  uint64_t **v1;
  uint64_t *v2;
  __int128 *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  const std::string::value_type *v8;
  unint64_t v9;
  BOOL v10;
  char v11;
  const std::string::value_type *v12;
  unint64_t v13;
  const void **v14;
  unint64_t v15;
  const void *v16;
  unint64_t v17;
  size_t v18;
  int v19;
  const std::string::value_type *v20;
  unint64_t v21;
  size_t v22;
  int v23;
  _QWORD *v24;
  std::string *v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD **v43;
  uint64_t *v45;
  __int128 *v46;
  uint64_t **v47;
  uint64_t *v48;

  v1 = (uint64_t **)(this + 8);
  v43 = (_QWORD **)(this + 7);
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)(this + 7), this[8]);
  *(v1 - 1) = (uint64_t *)v1;
  *v1 = 0;
  v1[1] = 0;
  v2 = *(v1 - 7);
  v47 = v1;
  v42 = *(v1 - 6);
  if (v2 == v42)
    return;
  do
  {
    v3 = *(__int128 **)(*v2 + 24);
    v45 = v2;
    v46 = *(__int128 **)(*v2 + 32);
    if (v3 == v46)
      goto LABEL_3;
    while (2)
    {
      while (1)
      {
        v48 = (uint64_t *)*v2;
        v4 = v47;
        v5 = *v47;
        v6 = v47;
        if (*v47)
          break;
LABEL_47:
        v24 = operator new(0x40uLL);
        v25 = (std::string *)(v24 + 4);
        if (*((char *)v3 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
        }
        else
        {
          v26 = *v3;
          v24[6] = *((_QWORD *)v3 + 2);
          *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
        }
        v2 = v45;
        v24[7] = 0;
        *v24 = 0;
        v24[1] = 0;
        v24[2] = v4;
        *v6 = v24;
        v27 = (_QWORD *)**v43;
        v28 = v24;
        if (v27)
        {
          *v43 = v27;
          v28 = *v6;
        }
        v29 = *v47;
        v10 = v28 == *v47;
        *((_BYTE *)v28 + 24) = v10;
        if (!v10)
        {
          do
          {
            v30 = v28[2];
            if (*(_BYTE *)(v30 + 24))
              break;
            v31 = *(uint64_t **)(v30 + 16);
            v32 = *v31;
            if (*v31 == v30)
            {
              v35 = v31[1];
              if (!v35 || (v36 = *(unsigned __int8 *)(v35 + 24), v33 = (_BYTE *)(v35 + 24), v36))
              {
                if (*(uint64_t **)v30 == v28)
                {
                  *(_BYTE *)(v30 + 24) = 1;
                  *((_BYTE *)v31 + 24) = 0;
                  v39 = *(_QWORD *)(v30 + 8);
                  *v31 = v39;
                  if (v39)
                    goto LABEL_67;
                }
                else
                {
                  v37 = *(uint64_t **)(v30 + 8);
                  v38 = *v37;
                  *(_QWORD *)(v30 + 8) = *v37;
                  if (v38)
                  {
                    *(_QWORD *)(v38 + 16) = v30;
                    v31 = *(uint64_t **)(v30 + 16);
                  }
                  v37[2] = (uint64_t)v31;
                  *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8 * (**(_QWORD **)(v30 + 16) != v30)) = v37;
                  *v37 = v30;
                  *(_QWORD *)(v30 + 16) = v37;
                  v31 = (uint64_t *)v37[2];
                  v30 = *v31;
                  *((_BYTE *)v37 + 24) = 1;
                  *((_BYTE *)v31 + 24) = 0;
                  v39 = *(_QWORD *)(v30 + 8);
                  *v31 = v39;
                  if (v39)
LABEL_67:
                    *(_QWORD *)(v39 + 16) = v31;
                }
                *(_QWORD *)(v30 + 16) = v31[2];
                *(_QWORD *)(v31[2] + 8 * (*(_QWORD *)v31[2] != (_QWORD)v31)) = v30;
                *(_QWORD *)(v30 + 8) = v31;
LABEL_7:
                v31[2] = v30;
                break;
              }
            }
            else if (!v32 || (v34 = *(unsigned __int8 *)(v32 + 24), v33 = (_BYTE *)(v32 + 24), v34))
            {
              if (*(uint64_t **)v30 == v28)
              {
                v41 = v28[1];
                *(_QWORD *)v30 = v41;
                if (v41)
                {
                  *(_QWORD *)(v41 + 16) = v30;
                  v31 = *(uint64_t **)(v30 + 16);
                }
                v28[2] = (uint64_t)v31;
                *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8 * (**(_QWORD **)(v30 + 16) != v30)) = v28;
                v28[1] = v30;
                *(_QWORD *)(v30 + 16) = v28;
                v31 = (uint64_t *)v28[2];
                *((_BYTE *)v28 + 24) = 1;
                *((_BYTE *)v31 + 24) = 0;
                v30 = v31[1];
                v40 = *(uint64_t **)v30;
                v31[1] = *(_QWORD *)v30;
                if (!v40)
                  goto LABEL_6;
              }
              else
              {
                *(_BYTE *)(v30 + 24) = 1;
                *((_BYTE *)v31 + 24) = 0;
                v30 = v31[1];
                v40 = *(uint64_t **)v30;
                v31[1] = *(_QWORD *)v30;
                if (!v40)
                  goto LABEL_6;
              }
              v40[2] = (uint64_t)v31;
LABEL_6:
              *(_QWORD *)(v30 + 16) = v31[2];
              *(_QWORD *)(v31[2] + 8 * (*(_QWORD *)v31[2] != (_QWORD)v31)) = v30;
              *(_QWORD *)v30 = v31;
              goto LABEL_7;
            }
            *(_BYTE *)(v30 + 24) = 1;
            v28 = v31;
            *((_BYTE *)v31 + 24) = v31 == v29;
            *v33 = 1;
          }
          while (v31 != v29);
        }
        ++this[9];
        v24[7] = v48;
        v3 = (__int128 *)((char *)v3 + 24);
        if (v3 == v46)
          goto LABEL_3;
      }
      v7 = *((unsigned __int8 *)v3 + 23);
      v8 = *(const std::string::value_type **)v3;
      v9 = *((_QWORD *)v3 + 1);
      if (v9)
        v10 = v8 == 0;
      else
        v10 = 0;
      v11 = !v10;
      while (1)
      {
        while (1)
        {
          v4 = (uint64_t **)v5;
          v12 = (const std::string::value_type *)v3;
          v13 = v7;
          if ((v7 & 0x80) != 0)
          {
            if ((v9 & 0x8000000000000000) != 0)
              goto LABEL_80;
            v12 = v8;
            v13 = v9;
            if ((v11 & 1) == 0)
              goto LABEL_80;
          }
          v14 = (const void **)(v5 + 4);
          v15 = *((unsigned __int8 *)v5 + 55);
          v16 = v5 + 4;
          v17 = v15;
          if (*((char *)v5 + 55) < 0)
          {
            v17 = v5[5];
            if ((v17 & 0x8000000000000000) != 0 || (v16 = *v14, v17) && !v16)
            {
LABEL_80:
              __break(1u);
              return;
            }
          }
          v18 = v17 >= v13 ? v13 : v17;
          v19 = memcmp(v12, v16, v18);
          if (v19)
            break;
          if (v13 >= v17)
            goto LABEL_31;
LABEL_16:
          v5 = *v4;
          v6 = v4;
          if (!*v4)
            goto LABEL_47;
        }
        if (v19 < 0)
          goto LABEL_16;
LABEL_31:
        if ((v15 & 0x80) != 0)
        {
          v15 = (unint64_t)v4[5];
          if ((v15 & 0x8000000000000000) != 0)
            goto LABEL_80;
          v14 = (const void **)*v14;
          if (v15)
          {
            if (!v14)
              goto LABEL_80;
          }
        }
        v20 = (const std::string::value_type *)v3;
        v21 = v7;
        if ((v7 & 0x80) != 0)
        {
          if ((v9 & 0x8000000000000000) != 0)
            goto LABEL_80;
          v20 = v8;
          v21 = v9;
          if ((v11 & 1) == 0)
            goto LABEL_80;
        }
        v22 = v21 >= v15 ? v15 : v21;
        v23 = memcmp(v14, v20, v22);
        if (!v23)
          break;
        if ((v23 & 0x80000000) == 0)
          goto LABEL_69;
LABEL_45:
        v5 = v4[1];
        if (!v5)
        {
          v6 = v4 + 1;
          goto LABEL_47;
        }
      }
      if (v15 < v21)
        goto LABEL_45;
LABEL_69:
      v2 = v45;
      v4[7] = v48;
      v3 = (__int128 *)((char *)v3 + 24);
      if (v3 != v46)
        continue;
      break;
    }
LABEL_3:
    ++v2;
  }
  while (v2 != v42);
}

uint64_t webrtc::BundleManager::IsFirstMidInGroup(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  size_t v6;
  uint64_t result;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  BOOL v11;
  size_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  const void *v16;
  const void *v17;
  int v18;
  unsigned __int8 *v19;
  size_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;

  v2 = a2;
  v3 = (uint64_t *)(a1 + 64);
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 56, a2, *(uint64_t **)(a1 + 64), (uint64_t *)(a1 + 64));
  if (v3 == v4)
    return 1;
  v5 = v4;
  v6 = *((unsigned __int8 *)v2 + 23);
  result = (uint64_t)v2;
  v8 = v6;
  if (*((char *)v2 + 23) < 0)
  {
    v8 = (size_t)v2[1];
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_47;
    result = (uint64_t)*v2;
    if (v8)
    {
      if (!result)
        goto LABEL_47;
    }
  }
  v9 = v5 + 4;
  if ((*((char *)v5 + 55) & 0x80000000) == 0)
  {
    v10 = *((unsigned __int8 *)v5 + 55);
    goto LABEL_15;
  }
  v10 = v5[5];
  if ((v10 & 0x8000000000000000) != 0 || ((v9 = (_QWORD *)*v9, v10) ? (v11 = v9 == 0) : (v11 = 0), v11))
  {
LABEL_47:
    __break(1u);
    return result;
  }
LABEL_15:
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp((const void *)result, v9, v12);
  if (v13)
  {
    if (v13 < 0)
      return 1;
  }
  else if (v8 < v10)
  {
    return 1;
  }
  v14 = v5[7];
  if (!v14)
    return 1;
  if (*(_QWORD *)(v14 + 24) == *(_QWORD *)(v14 + 32))
    v15 = 0;
  else
    v15 = *(unsigned __int8 **)(v14 + 24);
  if ((v6 & 0x80u) == 0)
    v16 = (const void *)v6;
  else
    v16 = v2[1];
  v17 = (const void *)v15[23];
  v18 = (char)v17;
  if ((char)v17 < 0)
    v17 = (const void *)*((_QWORD *)v15 + 1);
  if (v16 != v17)
    return 0;
  if (v18 >= 0)
    v19 = v15;
  else
    v19 = *(unsigned __int8 **)v15;
  if ((v6 & 0x80) != 0)
    return memcmp(*v2, v19, (size_t)v2[1]) == 0;
  if (!(_DWORD)v6)
    return 1;
  v20 = v6 - 1;
  do
  {
    v22 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v21 = v22;
    v24 = *v19++;
    v23 = v24;
    v26 = v20-- != 0;
    result = v21 == v23;
  }
  while (v21 == v23 && v26);
  return result;
}

void webrtc::BundleManager::DeleteMid(uint64_t a1, cricket::ContentGroup *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  size_t v15;
  _QWORD *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  size_t v20;
  _QWORD *v21;
  size_t v22;
  BOOL v23;
  size_t v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  std::string __p;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
  {
    cricket::ContentGroup::ToString(a2, &__p);
    rtc::webrtc_logging_impl::Log("\r\t\n\t\n", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_collection.cc");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v13 = *(uint64_t **)(a1 + 8);
  v14 = *(uint64_t **)(a1 + 16);
  if (v13 != v14)
  {
    while ((cricket::ContentGroup *)*v13 != a2)
    {
      if (++v13 == v14)
      {
        v13 = *(uint64_t **)(a1 + 16);
        break;
      }
    }
  }
  if (*((char *)a3 + 23) < 0)
  {
    v15 = a3[1];
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_45;
    v16 = (_QWORD *)*a3;
    if (v15)
    {
      if (!v16)
        goto LABEL_45;
    }
  }
  else
  {
    v15 = *((unsigned __int8 *)a3 + 23);
    v16 = a3;
  }
  cricket::ContentGroup::RemoveContentName(*v13, v16, v15);
  v17 = (uint64_t **)(a1 + 56);
  v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 56, (const void **)a3, *(uint64_t **)(a1 + 64), (uint64_t *)(a1 + 64));
  if ((uint64_t *)(a1 + 64) == v18)
    goto LABEL_31;
  v19 = v18;
  if (*((char *)a3 + 23) < 0)
  {
    v20 = a3[1];
    if ((v20 & 0x8000000000000000) != 0)
      goto LABEL_45;
    a3 = (_QWORD *)*a3;
    if (v20)
    {
      if (!a3)
        goto LABEL_45;
    }
  }
  else
  {
    v20 = *((unsigned __int8 *)a3 + 23);
  }
  v21 = v18 + 4;
  if ((*((char *)v18 + 55) & 0x80000000) == 0)
  {
    v22 = *((unsigned __int8 *)v18 + 55);
    goto LABEL_26;
  }
  v22 = v18[5];
  if ((v22 & 0x8000000000000000) != 0 || ((v21 = (_QWORD *)*v21, v22) ? (v23 = v21 == 0) : (v23 = 0), v23))
  {
LABEL_45:
    __break(1u);
    return;
  }
LABEL_26:
  if (v22 >= v20)
    v24 = v20;
  else
    v24 = v22;
  v25 = memcmp(a3, v21, v24);
  if (!v25)
  {
    if (v20 >= v22)
      goto LABEL_32;
    goto LABEL_31;
  }
  if (v25 < 0)
LABEL_31:
    v19 = (uint64_t *)(a1 + 64);
LABEL_32:
  v26 = (uint64_t *)v19[1];
  if (v26)
  {
    do
    {
      v27 = v26;
      v26 = (uint64_t *)*v26;
    }
    while (v26);
  }
  else
  {
    v28 = v19;
    do
    {
      v27 = (uint64_t *)v28[2];
      v23 = *v27 == (_QWORD)v28;
      v28 = v27;
    }
    while (!v23);
  }
  if (*v17 == v19)
    *v17 = v27;
  v29 = *(uint64_t **)(a1 + 64);
  --*(_QWORD *)(a1 + 72);
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v29, v19);
  if (*((char *)v19 + 55) < 0)
    operator delete((void *)v19[4]);
  operator delete(v19);
}

void webrtc::BundleManager::DeleteGroup(webrtc::BundleManager *this, const cricket::ContentGroup *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  void **v9;
  uint64_t v10;
  __int128 *v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v4 = (uint64_t *)*((_QWORD *)this + 2);
  if (v5 != v4)
  {
    while ((const cricket::ContentGroup *)*v5 != a2)
    {
      if (++v5 == v4)
      {
        v5 = (uint64_t *)*((_QWORD *)this + 2);
        break;
      }
    }
  }
  v6 = *(_QWORD *)(*v5 + 24);
  v7 = *(_QWORD *)(*v5 + 32);
  v8 = v7 - v6;
  if (v7 == v6)
  {
    v9 = 0;
    v14 = 0;
LABEL_16:
    v17 = 1;
    goto LABEL_17;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
    goto LABEL_55;
  v9 = (void **)operator new(v8);
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = (__int128 *)(v6 + v10);
      v12 = (std::string *)&v9[(unint64_t)v10 / 8];
      if ((*(char *)(v6 + v10 + 23) & 0x80000000) == 0)
        break;
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
      v10 += 24;
      if (v6 + v10 == v7)
        goto LABEL_11;
    }
    v13 = *v11;
    v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    v10 += 24;
  }
  while (v6 + v10 != v7);
LABEL_11:
  v14 = &v9[3 * (v10 / 24)];
  if (!v10)
    goto LABEL_16;
  v15 = 0;
  v16 = 24 * (v10 / 24);
  do
  {
    webrtc::BundleManager::DeleteMid((uint64_t)this, a2, &v9[v15 / 8]);
    v15 += 24;
  }
  while (v16 != v15);
  v17 = 0;
LABEL_17:
  v18 = (uint64_t *)*((_QWORD *)this + 2);
  if (v18 == v5)
  {
    __break(1u);
LABEL_55:
    abort();
  }
  v19 = v5 + 1;
  if (v5 + 1 != v18)
  {
    do
    {
      v20 = *v19;
      *v19 = 0;
      v21 = *v5;
      *v5 = v20;
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 24);
        if (v22)
        {
          v23 = *(_QWORD *)(v21 + 32);
          v24 = *(void **)(v21 + 24);
          if (v23 != v22)
          {
            do
            {
              if (*(char *)(v23 - 1) < 0)
                operator delete(*(void **)(v23 - 24));
              v23 -= 24;
            }
            while (v23 != v22);
            v24 = *(void **)(v21 + 24);
          }
          *(_QWORD *)(v21 + 32) = v22;
          operator delete(v24);
        }
        if (*(char *)(v21 + 23) < 0)
          operator delete(*(void **)v21);
        MEMORY[0x20BD0ADEC](v21, 0x1032C402D514303);
      }
      ++v19;
      ++v5;
    }
    while (v19 != v18);
    v18 = (uint64_t *)*((_QWORD *)this + 2);
  }
  while (v18 != v5)
  {
    v26 = *--v18;
    v25 = v26;
    *v18 = 0;
    if (v26)
    {
      v27 = *(_QWORD *)(v25 + 24);
      if (v27)
      {
        v28 = *(_QWORD *)(v25 + 32);
        v29 = *(void **)(v25 + 24);
        if (v28 != v27)
        {
          do
          {
            if (*(char *)(v28 - 1) < 0)
              operator delete(*(void **)(v28 - 24));
            v28 -= 24;
          }
          while (v28 != v27);
          v29 = *(void **)(v25 + 24);
        }
        *(_QWORD *)(v25 + 32) = v27;
        operator delete(v29);
      }
      if (*(char *)(v25 + 23) < 0)
        operator delete(*(void **)v25);
      MEMORY[0x20BD0ADEC](v25, 0x1032C402D514303);
    }
  }
  *((_QWORD *)this + 2) = v5;
  if (v9)
  {
    if ((v17 & 1) == 0)
    {
      do
      {
        if (*((char *)v14 - 1) < 0)
          operator delete(*(v14 - 3));
        v14 -= 3;
      }
      while (v14 != v9);
    }
    operator delete(v9);
  }
}

void webrtc::BundleManager::Rollback(webrtc::BundleManager *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 **v10;
  __int128 **v11;
  __int128 *v12;
  std::string *v13;
  std::string **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::string *v19;

  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 8);
  while (v4 != v3)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 24);
      if (v7)
      {
        v8 = *(_QWORD *)(v5 + 32);
        v9 = *(void **)(v5 + 24);
        if (v8 != v7)
        {
          do
          {
            if (*(char *)(v8 - 1) < 0)
              operator delete(*(void **)(v8 - 24));
            v8 -= 24;
          }
          while (v8 != v7);
          v9 = *(void **)(v5 + 24);
        }
        *(_QWORD *)(v5 + 32) = v7;
        operator delete(v9);
      }
      if (*(char *)(v5 + 23) < 0)
        operator delete(*(void **)v5);
      MEMORY[0x20BD0ADEC](v5, 0x1032C402D514303);
    }
  }
  *((_QWORD *)this + 2) = v3;
  v10 = (__int128 **)*((_QWORD *)this + 4);
  v11 = (__int128 **)*((_QWORD *)this + 5);
  while (1)
  {
    if (v10 == v11)
    {
      webrtc::BundleManager::RefreshEstablishedBundleGroupsByMid((char **)this);
      return;
    }
    v12 = *v10;
    v13 = (std::string *)operator new();
    v19 = cricket::ContentGroup::ContentGroup(v13, v12);
    v14 = (std::string **)*((_QWORD *)this + 2);
    if ((unint64_t)v14 < *((_QWORD *)this + 3))
      break;
    *((_QWORD *)this + 2) = std::vector<std::unique_ptr<cricket::ContentGroup>>::__push_back_slow_path<std::unique_ptr<cricket::ContentGroup>>(v2, (uint64_t *)&v19);
    v15 = (uint64_t)v19;
    v19 = 0;
    if (!v15)
      goto LABEL_17;
LABEL_24:
    v16 = *(_QWORD *)(v15 + 24);
    if (v16)
    {
      v17 = *(_QWORD *)(v15 + 32);
      v18 = *(void **)(v15 + 24);
      if (v17 != v16)
      {
        do
        {
          if (*(char *)(v17 - 1) < 0)
            operator delete(*(void **)(v17 - 24));
          v17 -= 24;
        }
        while (v17 != v16);
        v18 = *(void **)(v15 + 24);
      }
      *(_QWORD *)(v15 + 32) = v16;
      operator delete(v18);
    }
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x20BD0ADEC](v15, 0x1032C402D514303);
LABEL_17:
    ++v10;
  }
  if (v14)
  {
    v19 = 0;
    *v14 = v13;
    *((_QWORD *)this + 2) = v14 + 1;
    v15 = (uint64_t)v19;
    v19 = 0;
    if (!v15)
      goto LABEL_17;
    goto LABEL_24;
  }
  __break(1u);
}

std::string **webrtc::BundleManager::Commit(std::string **this)
{
  std::string **v1;
  _QWORD *v2;
  std::string *v3;
  std::string *v4;
  std::string::size_type v5;
  std::string::size_type v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 **v10;
  __int128 **v11;
  __int128 *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  std::string *v18;

  v1 = this;
  v3 = this[4];
  v4 = this[5];
  v2 = this + 4;
  while (v4 != v3)
  {
    v6 = v4[-1].__r_.__value_.__r.__words[2];
    v4 = (std::string *)((char *)v4 - 8);
    v5 = v6;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 24);
      if (v7)
      {
        v8 = *(_QWORD *)(v5 + 32);
        v9 = *(void **)(v5 + 24);
        if (v8 != v7)
        {
          do
          {
            if (*(char *)(v8 - 1) < 0)
              operator delete(*(void **)(v8 - 24));
            v8 -= 24;
          }
          while (v8 != v7);
          v9 = *(void **)(v5 + 24);
        }
        *(_QWORD *)(v5 + 32) = v7;
        operator delete(v9);
      }
      if (*(char *)(v5 + 23) < 0)
        operator delete(*(void **)v5);
      this = (std::string **)MEMORY[0x20BD0ADEC](v5, 0x1032C402D514303);
    }
  }
  v1[5] = v3;
  v10 = (__int128 **)v1[1];
  v11 = (__int128 **)v1[2];
  while (v10 != v11)
  {
    v12 = *v10;
    v13 = (std::string *)operator new();
    v18 = cricket::ContentGroup::ContentGroup(v13, v12);
    this = (std::string **)v1[5];
    if (this >= (std::string **)v1[6])
    {
      this = (std::string **)std::vector<std::unique_ptr<cricket::ContentGroup>>::__push_back_slow_path<std::unique_ptr<cricket::ContentGroup>>(v2, (uint64_t *)&v18);
      v1[5] = (std::string *)this;
      v14 = (uint64_t)v18;
      v18 = 0;
      if (!v14)
        goto LABEL_17;
LABEL_24:
      v15 = *(_QWORD *)(v14 + 24);
      if (v15)
      {
        v16 = *(_QWORD *)(v14 + 32);
        v17 = *(void **)(v14 + 24);
        if (v16 != v15)
        {
          do
          {
            if (*(char *)(v16 - 1) < 0)
              operator delete(*(void **)(v16 - 24));
            v16 -= 24;
          }
          while (v16 != v15);
          v17 = *(void **)(v14 + 24);
        }
        *(_QWORD *)(v14 + 32) = v15;
        operator delete(v17);
      }
      if (*(char *)(v14 + 23) < 0)
        operator delete(*(void **)v14);
      this = (std::string **)MEMORY[0x20BD0ADEC](v14, 0x1032C402D514303);
      goto LABEL_17;
    }
    if (!this)
    {
      __break(1u);
      return this;
    }
    v18 = 0;
    *this++ = v13;
    v1[5] = (std::string *)this;
    v14 = (uint64_t)v18;
    v18 = 0;
    if (v14)
      goto LABEL_24;
LABEL_17:
    ++v10;
  }
  return this;
}

uint64_t webrtc::JsepTransportCollection::SetTransportForMid(_QWORD *a1, uint64_t a2, std::string::size_type a3)
{
  uint64_t *v6;
  _QWORD **v7;
  uint64_t *v8;
  uint64_t *v9;
  size_t v10;
  const void *v11;
  _QWORD *v12;
  size_t v13;
  BOOL v14;
  size_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  cricket::JsepTransport *v23;
  size_t v24;
  int v25;
  __int128 v26;
  BOOL v27;
  char v28;
  std::string *v29;
  size_t v30;
  const void **v31;
  size_t v32;
  const void *v33;
  size_t v34;
  size_t v35;
  int v36;
  std::string *v37;
  size_t v38;
  size_t v39;
  int v40;
  _OWORD *v41;
  std::string::size_type v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v46;
  uint64_t v47;
  std::string::size_type v48;
  _QWORD **v49;
  _QWORD *v50;
  unsigned int v51;
  std::string v52;
  std::string::size_type v53;

  v6 = a1 + 4;
  v7 = (_QWORD **)(a1 + 3);
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 24, (const void **)a2, (uint64_t *)a1[4], a1 + 4);
  if (v6 == v8)
    goto LABEL_22;
  v9 = v8;
  if (*(char *)(a2 + 23) < 0)
  {
    v10 = *(_QWORD *)(a2 + 8);
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_78;
    v11 = *(const void **)a2;
    if (v10)
    {
      if (!v11)
        goto LABEL_78;
    }
  }
  else
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
    v11 = (const void *)a2;
  }
  v12 = v9 + 4;
  if ((*((char *)v9 + 55) & 0x80000000) == 0)
  {
    v13 = *((unsigned __int8 *)v9 + 55);
    goto LABEL_14;
  }
  v13 = v9[5];
  if ((v13 & 0x8000000000000000) != 0 || ((v12 = (_QWORD *)*v12, v13) ? (v14 = v12 == 0) : (v14 = 0), v14))
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
LABEL_14:
  if (v13 >= v10)
    v15 = v10;
  else
    v15 = v13;
  v16 = memcmp(v11, v12, v15);
  if (!v16)
  {
    if (v10 >= v13)
      goto LABEL_19;
LABEL_22:
    v17 = 1;
    v9 = v6;
    goto LABEL_23;
  }
  if (v16 < 0)
    goto LABEL_22;
LABEL_19:
  if (v9[7] == a3)
    return 1;
  v17 = 0;
LABEL_23:
  v52.__r_.__value_.__r.__words[0] = a3;
  v18 = a1[12];
  if (!v18)
  {
LABEL_79:
    v46 = std::__throw_bad_function_call[abi:sn180100]();
    return std::map<std::string,std::unique_ptr<cricket::JsepTransport>>::operator[](v46, v47);
  }
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v18 + 48))(v18, a2, &v52);
  v20 = v19;
  if (!v17)
  {
    v23 = (cricket::JsepTransport *)v9[7];
    v9[7] = a3;
    webrtc::JsepTransportCollection::MaybeDestroyJsepTransport(a1, v23);
    return v20;
  }
  v49 = v7;
  v50 = a1;
  v51 = v19;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v52 = *(std::string *)a2;
    v53 = a3;
    v48 = a3;
    v21 = *v6;
    v22 = v6;
    if (!*v6)
      goto LABEL_69;
    goto LABEL_30;
  }
  std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  v48 = a3;
  v53 = a3;
  v21 = *v6;
  v22 = v6;
  if (*v6)
  {
LABEL_30:
    v24 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    v25 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
    v26 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v52.__r_.__value_.__l.__size_)
      v27 = v52.__r_.__value_.__r.__words[0] == 0;
    else
      v27 = 0;
    v28 = !v27;
    while (1)
    {
      v22 = (uint64_t *)v21;
      if (v25 < 0)
      {
        if ((*((_QWORD *)&v26 + 1) & 0x8000000000000000) != 0)
          goto LABEL_78;
        v30 = *((_QWORD *)&v26 + 1);
        v29 = (std::string *)v26;
        if ((v28 & 1) == 0)
          goto LABEL_78;
      }
      else
      {
        v29 = &v52;
        v30 = v24;
      }
      v31 = (const void **)(v21 + 32);
      v32 = *(unsigned __int8 *)(v21 + 55);
      v33 = (const void *)(v21 + 32);
      v34 = v32;
      if (*(char *)(v21 + 55) < 0)
      {
        v34 = *(_QWORD *)(v21 + 40);
        if ((v34 & 0x8000000000000000) != 0)
          goto LABEL_78;
        v33 = *v31;
        if (v34)
        {
          if (!v33)
            goto LABEL_78;
        }
      }
      if (v34 >= v30)
        v35 = v30;
      else
        v35 = v34;
      v36 = memcmp(v29, v33, v35);
      if (v36)
      {
        if (v36 < 0)
          goto LABEL_36;
LABEL_52:
        if ((v32 & 0x80) != 0)
        {
          v32 = v22[5];
          if ((v32 & 0x8000000000000000) != 0)
            goto LABEL_78;
          v31 = (const void **)*v31;
          if (v32)
          {
            if (!v31)
              goto LABEL_78;
          }
        }
        if (v25 < 0)
        {
          if ((*((_QWORD *)&v26 + 1) & 0x8000000000000000) != 0)
            goto LABEL_78;
          v38 = *((_QWORD *)&v26 + 1);
          v37 = (std::string *)v26;
          if ((v28 & 1) == 0)
            goto LABEL_78;
        }
        else
        {
          v37 = &v52;
          v38 = v24;
        }
        if (v38 >= v32)
          v39 = v32;
        else
          v39 = v38;
        v40 = memcmp(v31, v37, v39);
        if (v40)
        {
          if ((v40 & 0x80000000) == 0)
            goto LABEL_76;
        }
        else if (v32 >= v38)
        {
LABEL_76:
          v20 = v51;
          if ((v25 & 0x80) != 0)
            goto LABEL_74;
          return v20;
        }
        v21 = v22[1];
        if (!v21)
        {
          v6 = v22 + 1;
          break;
        }
      }
      else
      {
        if (v30 >= v34)
          goto LABEL_52;
LABEL_36:
        v21 = *v22;
        v6 = v22;
        if (!*v22)
          break;
      }
    }
  }
LABEL_69:
  v41 = operator new(0x40uLL);
  v41[2] = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
  v42 = v52.__r_.__value_.__r.__words[2];
  memset(&v52, 0, sizeof(v52));
  *((_QWORD *)v41 + 6) = v42;
  *((_QWORD *)v41 + 7) = v48;
  *(_QWORD *)v41 = 0;
  *((_QWORD *)v41 + 1) = 0;
  *((_QWORD *)v41 + 2) = v22;
  *v6 = (uint64_t)v41;
  v43 = (_QWORD *)**v49;
  if (v43)
  {
    *v49 = v43;
    v44 = (uint64_t *)*v6;
  }
  else
  {
    v44 = (uint64_t *)v41;
  }
  v20 = v51;
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v50[4], v44);
  ++v50[5];
  if ((*((_BYTE *)&v52.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_74:
    operator delete(v52.__r_.__value_.__l.__data_);
  return v20;
}

uint64_t std::map<std::string,std::unique_ptr<cricket::JsepTransport>>::operator[](uint64_t a1, uint64_t a2)
{
  const void **v4;
  uint64_t **v6;
  _QWORD *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v12, (const void **)a2);
  if (*v4)
    return (uint64_t)*v4 + 56;
  v6 = (uint64_t **)v4;
  v7 = operator new(0x40uLL);
  v8 = (std::string *)(v7 + 4);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7[6] = *(_QWORD *)(a2 + 16);
  }
  v7[7] = 0;
  v9 = v12;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = v9;
  *v6 = v7;
  v10 = **(_QWORD **)a1;
  v11 = v7;
  if (v10)
  {
    *(_QWORD *)a1 = v10;
    v11 = *v6;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v11);
  ++*(_QWORD *)(a1 + 16);
  return (uint64_t)(v7 + 7);
}

void webrtc::JsepTransportCollection::Transports(webrtc::JsepTransportCollection **this@<X0>, char **a2@<X8>)
{
  webrtc::JsepTransportCollection **v2;
  webrtc::JsepTransportCollection *v3;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  webrtc::JsepTransportCollection *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  webrtc::JsepTransportCollection **v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this + 1;
  v3 = *this;
  if (*this != (webrtc::JsepTransportCollection *)(this + 1))
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *((_QWORD *)v3 + 7);
      v8 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v8)
        break;
      if (!v5)
        goto LABEL_39;
      *(_QWORD *)v5 = v7;
      v5 += 8;
      a2[1] = v5;
      v9 = (webrtc::JsepTransportCollection *)*((_QWORD *)v3 + 1);
      if (v9)
      {
        do
        {
LABEL_27:
          v27 = (webrtc::JsepTransportCollection **)v9;
          v9 = *(webrtc::JsepTransportCollection **)v9;
        }
        while (v9);
        goto LABEL_3;
      }
      do
      {
LABEL_29:
        v27 = (webrtc::JsepTransportCollection **)*((_QWORD *)v3 + 2);
        v28 = *v27 == v3;
        v3 = (webrtc::JsepTransportCollection *)v27;
      }
      while (!v28);
LABEL_3:
      v3 = (webrtc::JsepTransportCollection *)v27;
      if (v27 == v2)
        return;
    }
    v10 = (v5 - v6) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      goto LABEL_40;
    v12 = v8 - (_QWORD)v6;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8;
    v14 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (!v14)
    {
LABEL_39:
      __break(1u);
LABEL_40:
      abort();
    }
    if (v14 >> 61)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v35 = 8 * v14;
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v10];
    *(_QWORD *)v16 = v7;
    v17 = v16 + 8;
    if (v5 == v6)
    {
      *a2 = v16;
      a2[1] = v17;
      a2[2] = &v15[v35];
      if (!v6)
      {
LABEL_26:
        v6 = v16;
        v5 = v17;
        a2[1] = v17;
        v9 = (webrtc::JsepTransportCollection *)*((_QWORD *)v3 + 1);
        if (v9)
          goto LABEL_27;
        goto LABEL_29;
      }
LABEL_25:
      operator delete(v6);
      goto LABEL_26;
    }
    v18 = v5 - v6 - 8;
    if (v18 < 0x168
      || ((v19 = (v5 - 8 - v6) & 0xFFFFFFFFFFFFFFF8,
           v20 = (unint64_t)&v15[v5 - v6 - 8],
           v21 = v20 - v19,
           v22 = (unint64_t)&v5[-v19 - 8],
           v21 <= v20)
        ? (v23 = v22 > (unint64_t)(v5 - 8))
        : (v23 = 1),
          v23 || (unint64_t)(v6 - v15) < 0x20))
    {
      v24 = v5;
      v25 = v35;
    }
    else
    {
      v29 = (v18 >> 3) + 1;
      v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
      v24 = &v5[-v30];
      v16 -= v30;
      v31 = &v15[8 * v10 - 16];
      v32 = v5 - 16;
      v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v34 = *(_OWORD *)v32;
        *(v31 - 1) = *((_OWORD *)v32 - 1);
        *v31 = v34;
        v31 -= 2;
        v32 -= 32;
        v33 -= 4;
      }
      while (v33);
      v25 = v35;
      if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_24:
        *a2 = v16;
        a2[1] = v17;
        a2[2] = &v15[v25];
        if (!v6)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    do
    {
      v26 = *((_QWORD *)v24 - 1);
      v24 -= 8;
      *((_QWORD *)v16 - 1) = v26;
      v16 -= 8;
    }
    while (v24 != v6);
    goto LABEL_24;
  }
}

void webrtc::JsepTransportCollection::ActiveTransports(webrtc::JsepTransportCollection *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  BOOL v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  v25 = &v26;
  v3 = (char *)*((_QWORD *)this + 3);
  v4 = (char *)this + 32;
  if (v3 == (char *)this + 32)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    do
    {
      v5 = v26;
      v6 = *((_QWORD *)v3 + 7);
      v7 = &v26;
      v8 = &v26;
      if (v26)
      {
        while (1)
        {
          while (1)
          {
            v8 = (uint64_t **)v5;
            v9 = v5[4];
            if (v6 >= v9)
              break;
            v5 = *v8;
            v7 = v8;
            if (!*v8)
              goto LABEL_11;
          }
          if (v9 >= v6)
            break;
          v5 = v8[1];
          if (!v5)
          {
            v7 = v8 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v10 = (uint64_t *)operator new(0x28uLL);
        v10[4] = v6;
        *v10 = 0;
        v10[1] = 0;
        v10[2] = (uint64_t)v8;
        *v7 = v10;
        if (*v25)
        {
          v25 = (uint64_t **)*v25;
          v11 = *v7;
        }
        else
        {
          v11 = v10;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v26, v11);
        ++v27;
      }
      v12 = (char *)*((_QWORD *)v3 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (char *)*((_QWORD *)v3 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != v4);
    v15 = (uint64_t *)v25;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    if (v25 != &v26)
    {
      v16 = 0;
      v17 = v25;
      do
      {
        v18 = v16;
        v19 = v17[1];
        if (v19)
        {
          do
          {
            v20 = (uint64_t **)v19;
            v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (uint64_t **)v17[2];
            v14 = *v20 == (uint64_t *)v17;
            v17 = v20;
          }
          while (!v14);
        }
        v16 = v18 + 1;
        v17 = v20;
      }
      while (v20 != &v26);
      if (v18 >= 0x1FFFFFFFFFFFFFFFLL)
        abort();
      v21 = v16;
      v22 = operator new(8 * v16);
      *a2 = v22;
      a2[1] = v22;
      a2[2] = &v22[v21];
      do
      {
        *v22 = v15[4];
        v23 = (uint64_t *)v15[1];
        if (v23)
        {
          do
          {
            v24 = (uint64_t **)v23;
            v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (uint64_t **)v15[2];
            v14 = *v24 == v15;
            v15 = (uint64_t *)v24;
          }
          while (!v14);
        }
        ++v22;
        v15 = (uint64_t *)v24;
      }
      while (v24 != &v26);
      a2[1] = v22;
    }
  }
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v26);
}

uint64_t webrtc::JsepTransportCollection::GetTransportForMid(uint64_t a1, char *__src, size_t __len)
{
  char *p_s1;
  size_t v7;
  size_t v8;
  char *v9;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  size_t v17;
  const void *v18;
  _QWORD *v19;
  size_t v20;
  size_t v21;
  int v22;
  void *__s1;
  size_t v25;
  unint64_t v26;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_39:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_s1 = (char *)operator new(v7 + 1);
    v25 = __len;
    v26 = v8 | 0x8000000000000000;
    __s1 = p_s1;
  }
  else
  {
    HIBYTE(v26) = __len;
    p_s1 = (char *)&__s1;
  }
  v9 = &p_s1[__len];
  if (p_s1 <= __src && v9 > __src)
    goto LABEL_38;
  v11 = a1 + 24;
  if (__len)
    memmove(p_s1, __src, __len);
  *v9 = 0;
  v13 = *(uint64_t **)(a1 + 32);
  v12 = (uint64_t *)(a1 + 32);
  v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(v11, (const void **)&__s1, v13, v12);
  if (v12 == v14)
  {
    v16 = HIBYTE(v26);
    goto LABEL_30;
  }
  v15 = v14;
  v16 = HIBYTE(v26);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    v17 = HIBYTE(v26);
    v18 = &__s1;
    goto LABEL_20;
  }
  v17 = v25;
  if ((v25 & 0x8000000000000000) != 0 || (v18 = __s1, v25) && !__s1)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_20:
  v19 = v15 + 4;
  if (*((char *)v15 + 55) < 0)
  {
    v20 = v15[5];
    if ((v20 & 0x8000000000000000) == 0)
    {
      v19 = (_QWORD *)*v19;
      if (!v20 || v19)
        goto LABEL_25;
    }
    goto LABEL_38;
  }
  v20 = *((unsigned __int8 *)v15 + 55);
LABEL_25:
  if (v20 >= v17)
    v21 = v17;
  else
    v21 = v20;
  v22 = memcmp(v18, v19, v21);
  if (v22)
  {
    if ((v22 & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (v17 < v20)
LABEL_30:
    v15 = v12;
LABEL_31:
  if (v16 < 0)
  {
    operator delete(__s1);
    if (v15 != v12)
      return v15[7];
  }
  else if (v15 != v12)
  {
    return v15[7];
  }
  return 0;
}

_QWORD *webrtc::JsepTransportCollection::MaybeDestroyJsepTransport(_QWORD *this, cricket::JsepTransport *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  size_t v16;
  _QWORD *v17;
  size_t v18;
  BOOL v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v2 = this;
  v3 = (_QWORD *)this[3];
  if (v3 == this + 4)
  {
LABEL_2:
    v4 = (_QWORD *)this[6];
    if (v4 != this + 7)
    {
      while ((cricket::JsepTransport *)v4[7] != a2)
      {
        v9 = (_QWORD *)v4[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v4[2];
            v19 = *v10 == (_QWORD)v4;
            v4 = v10;
          }
          while (!v19);
        }
        v4 = v10;
        if (v10 == this + 7)
          goto LABEL_3;
      }
      goto LABEL_48;
    }
LABEL_3:
    v5 = this + 1;
    v6 = (uint64_t *)*this;
    if ((_QWORD *)*this == this + 1)
      return this;
    while ((cricket::JsepTransport *)v6[7] != a2)
    {
      v11 = (uint64_t *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (uint64_t *)v6[2];
          v19 = *v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v19);
      }
      v6 = v12;
      if (v12 == v5)
        return this;
    }
    v13 = v6 + 4;
    v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)this, (const void **)v6 + 4, (uint64_t *)this[1], this + 1);
    if (v5 == v14)
      goto LABEL_48;
    v15 = (uint64_t)v14;
    if (*((char *)v6 + 55) < 0)
    {
      v16 = v6[5];
      if ((v16 & 0x8000000000000000) != 0)
        goto LABEL_52;
      v13 = (_QWORD *)*v13;
      if (v16)
      {
        if (!v13)
          goto LABEL_52;
      }
    }
    else
    {
      v16 = *((unsigned __int8 *)v6 + 55);
    }
    v17 = v14 + 4;
    if ((*((char *)v14 + 55) & 0x80000000) == 0)
    {
      v18 = *((unsigned __int8 *)v14 + 55);
LABEL_42:
      if (v18 >= v16)
        v20 = v16;
      else
        v20 = v18;
      v21 = memcmp(v13, v17, v20);
      if (v21)
      {
        if (v21 < 0)
          goto LABEL_48;
        goto LABEL_47;
      }
      if (v16 >= v18)
LABEL_47:
        std::__tree<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>>>::erase(v2, v15);
LABEL_48:
      v22 = v2[16];
      if (v22)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
      goto LABEL_53;
    }
    v18 = v14[5];
    if ((v18 & 0x8000000000000000) == 0)
    {
      v17 = (_QWORD *)*v17;
      v19 = v18 && v17 == 0;
      if (!v19)
        goto LABEL_42;
    }
LABEL_52:
    __break(1u);
LABEL_53:
    v23 = std::__throw_bad_function_call[abi:sn180100]();
    return (_QWORD *)webrtc::JsepTransportCollection::RemoveTransportForMid(v23);
  }
  while ((cricket::JsepTransport *)v3[7] != a2)
  {
    v7 = (_QWORD *)v3[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v3[2];
        v19 = *v8 == (_QWORD)v3;
        v3 = v8;
      }
      while (!v19);
    }
    v3 = v8;
    if (v8 == this + 4)
      goto LABEL_2;
  }
  return this;
}

uint64_t *webrtc::JsepTransportCollection::RemoveTransportForMid(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t *v6;
  size_t v7;
  const void *v8;
  _QWORD *v9;
  size_t v10;
  size_t v12;
  cricket::JsepTransport *v13;
  webrtc::JsepTransportCollection *v14;
  uint64_t v15;

  v15 = 0;
  v3 = *(_QWORD *)(a1 + 96);
  if (!v3)
    goto LABEL_25;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, a2, &v15);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 24, (const void **)a2, *(uint64_t **)(a1 + 32), (uint64_t *)(a1 + 32));
  if ((uint64_t *)(a1 + 32) == result)
    return result;
  v6 = result;
  if (*(char *)(a2 + 23) < 0)
  {
    v7 = *(_QWORD *)(a2 + 8);
    if ((v7 & 0x8000000000000000) != 0 || (v8 = *(const void **)a2, v7) && !v8)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      v14 = (webrtc::JsepTransportCollection *)std::__throw_bad_function_call[abi:sn180100]();
      return (uint64_t *)webrtc::JsepTransportCollection::RollbackTransports(v14);
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
    v8 = (const void *)a2;
  }
  v9 = v6 + 4;
  if ((*((char *)v6 + 55) & 0x80000000) == 0)
  {
    v10 = *((unsigned __int8 *)v6 + 55);
    goto LABEL_15;
  }
  v10 = v6[5];
  if ((v10 & 0x8000000000000000) != 0)
    goto LABEL_24;
  v9 = (_QWORD *)*v9;
  if (v10 && v9 == 0)
    goto LABEL_24;
LABEL_15:
  if (v10 >= v7)
    v12 = v7;
  else
    v12 = v10;
  result = (uint64_t *)memcmp(v8, v9, v12);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
      return result;
  }
  else if (v7 < v10)
  {
    return result;
  }
  v13 = (cricket::JsepTransport *)v6[7];
  if (v13)
  {
    std::__tree<std::__value_type<std::string,cricket::JsepTransport *>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::JsepTransport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::JsepTransport *>>>::__erase_unique<std::string>((uint64_t **)(a1 + 24), (const void **)a2);
    return webrtc::JsepTransportCollection::MaybeDestroyJsepTransport((_QWORD *)a1, v13);
  }
  return result;
}

_QWORD **webrtc::JsepTransportCollection::RollbackTransports(uint64_t ***this)
{
  webrtc::JsepTransportCollection *v1;
  uint64_t **v2;
  uint64_t **v3;
  int v4;
  uint64_t *v5;
  size_t v6;
  uint64_t *v7;
  size_t v8;
  BOOL v9;
  char v10;
  uint64_t *v11;
  size_t v12;
  const void **v13;
  size_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t *v19;
  size_t v20;
  size_t v21;
  int v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t **v25;
  const void **v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  size_t v30;
  const void *v31;
  _QWORD *v32;
  size_t v33;
  size_t v35;
  int v36;
  const void *v37;
  char v38;
  uint64_t v39;
  const void **v40;
  const void ***v41;
  uint64_t v42;
  _QWORD **v44;
  uint64_t **v45;
  char *v47;
  int v48;
  char v49;
  const void *v50;

  v1 = (webrtc::JsepTransportCollection *)this;
  v2 = this[3];
  v47 = (char *)(this + 3);
  v3 = (uint64_t **)(this + 4);
  v4 = 1;
  if (v2 != (uint64_t **)(this + 4))
  {
    v45 = (uint64_t **)(this + 4);
    while (1)
    {
      v48 = v4;
      v5 = (uint64_t *)*((_QWORD *)v1 + 7);
      if (v5)
        break;
LABEL_43:
      if ((v48 & 1) != 0)
      {
        v50 = 0;
        v1 = (webrtc::JsepTransportCollection *)this;
        v24 = this[12];
        if (!v24)
          goto LABEL_95;
        v4 = ((uint64_t (*)(uint64_t **, uint64_t **, const void **))(*v24)[6])(v24, v2 + 4, &v50);
        v3 = v45;
        v23 = v2[1];
        if (v23)
          goto LABEL_48;
      }
      else
      {
        v4 = 0;
        v3 = v45;
        v1 = (webrtc::JsepTransportCollection *)this;
        v23 = v2[1];
        if (v23)
          goto LABEL_48;
      }
      do
      {
LABEL_50:
        v25 = (uint64_t **)v2[2];
        v9 = *v25 == (uint64_t *)v2;
        v2 = v25;
      }
      while (!v9);
LABEL_3:
      v2 = v25;
      if (v25 == v3)
        goto LABEL_53;
    }
    v6 = *((unsigned __int8 *)v2 + 55);
    v7 = v2[4];
    v8 = (size_t)v2[5];
    if (v8)
      v9 = v7 == 0;
    else
      v9 = 0;
    v10 = !v9;
    v49 = v10;
    while (1)
    {
      v11 = (uint64_t *)(v2 + 4);
      v12 = v6;
      if ((v6 & 0x80) != 0)
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_94;
        v11 = v7;
        v12 = v8;
        if ((v49 & 1) == 0)
          goto LABEL_94;
      }
      v13 = (const void **)(v5 + 4);
      v14 = *((unsigned __int8 *)v5 + 55);
      v15 = v5 + 4;
      v16 = v14;
      if (*((char *)v5 + 55) < 0)
      {
        v16 = v5[5];
        if ((v16 & 0x8000000000000000) != 0 || (v15 = *v13, v16) && !v15)
        {
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
      }
      if (v16 >= v12)
        v17 = v12;
      else
        v17 = v16;
      v18 = memcmp(v11, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_14;
      }
      else if (v12 < v16)
      {
        goto LABEL_14;
      }
      if ((v14 & 0x80) != 0)
      {
        v14 = v5[5];
        if ((v14 & 0x8000000000000000) != 0)
          goto LABEL_94;
        v13 = (const void **)*v13;
        if (v14)
        {
          if (!v13)
            goto LABEL_94;
        }
      }
      v19 = (uint64_t *)(v2 + 4);
      v20 = v6;
      if ((v6 & 0x80) != 0)
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_94;
        v19 = v7;
        v20 = v8;
        if ((v49 & 1) == 0)
          goto LABEL_94;
      }
      if (v20 >= v14)
        v21 = v14;
      else
        v21 = v20;
      v22 = memcmp(v13, v19, v21);
      if (v22)
      {
        if ((v22 & 0x80000000) == 0)
        {
LABEL_41:
          v3 = v45;
          v1 = (webrtc::JsepTransportCollection *)this;
          v4 = v48;
          v23 = v2[1];
          if (!v23)
            goto LABEL_50;
          do
          {
LABEL_48:
            v25 = (uint64_t **)v23;
            v23 = (uint64_t *)*v23;
          }
          while (v23);
          goto LABEL_3;
        }
      }
      else if (v14 >= v20)
      {
        goto LABEL_41;
      }
      ++v5;
LABEL_14:
      v5 = (uint64_t *)*v5;
      if (!v5)
        goto LABEL_43;
    }
  }
LABEL_53:
  v26 = (const void **)*((_QWORD *)v1 + 6);
  if (v26 == (const void **)((char *)v1 + 56))
  {
    v27 = (char *)v1 + 56;
    goto LABEL_92;
  }
  do
  {
    v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)v47, v26 + 4, *v3, (uint64_t *)v3);
    if (v3 == (uint64_t **)v28)
    {
LABEL_78:
      if ((v4 & 1) == 0)
      {
        LOBYTE(v4) = 0;
LABEL_84:
        v40 = (const void **)v26[1];
        if (v40)
          goto LABEL_85;
        goto LABEL_88;
      }
      v37 = v26[7];
      goto LABEL_80;
    }
    v29 = v28;
    if (*((char *)v26 + 55) < 0)
    {
      v30 = (size_t)v26[5];
      if ((v30 & 0x8000000000000000) != 0)
        goto LABEL_94;
      v31 = v26[4];
      if (v30)
      {
        if (!v31)
          goto LABEL_94;
      }
    }
    else
    {
      v30 = *((unsigned __int8 *)v26 + 55);
      v31 = v26 + 4;
    }
    v32 = v29 + 4;
    if (*((char *)v29 + 55) < 0)
    {
      v33 = v29[5];
      if ((v33 & 0x8000000000000000) != 0)
        goto LABEL_94;
      v32 = (_QWORD *)*v32;
      if (v33 && v32 == 0)
        goto LABEL_94;
    }
    else
    {
      v33 = *((unsigned __int8 *)v29 + 55);
    }
    if (v33 >= v30)
      v35 = v30;
    else
      v35 = v33;
    v36 = memcmp(v31, v32, v35);
    if (v36)
    {
      if (v36 < 0)
        goto LABEL_78;
    }
    else if (v30 < v33)
    {
      goto LABEL_78;
    }
    v37 = v26[7];
    if ((const void *)v29[7] == v37)
    {
      LOBYTE(v4) = (v29[7] == (_QWORD)v37) & v4;
      v40 = (const void **)v26[1];
      if (v40)
        goto LABEL_85;
      goto LABEL_88;
    }
    v38 = v4 ^ 1;
    LOBYTE(v4) = (v29[7] == (_QWORD)v37) & v4;
    if ((v38 & 1) != 0)
      goto LABEL_84;
LABEL_80:
    v50 = v37;
    v39 = *((_QWORD *)v1 + 12);
    if (!v39)
      goto LABEL_95;
    LOBYTE(v4) = (*(uint64_t (**)(uint64_t, const void **, const void **))(*(_QWORD *)v39 + 48))(v39, v26 + 4, &v50);
    v40 = (const void **)v26[1];
    if (v40)
    {
      do
      {
LABEL_85:
        v41 = (const void ***)v40;
        v40 = (const void **)*v40;
      }
      while (v40);
      goto LABEL_55;
    }
    do
    {
LABEL_88:
      v41 = (const void ***)v26[2];
      v9 = *v41 == v26;
      v26 = (const void **)v41;
    }
    while (!v9);
LABEL_55:
    v26 = (const void **)v41;
  }
  while (v41 != (const void ***)((char *)v1 + 56));
  v27 = (char *)*((_QWORD *)v1 + 6);
LABEL_92:
  std::__tree<std::__value_type<std::string,cricket::JsepTransport *>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::JsepTransport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::JsepTransport *>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,cricket::JsepTransport *>,std::__tree_node<std::__value_type<std::string,cricket::JsepTransport *>,void *> *,long>>((uint64_t)v47, v27, (char *)v1 + 56);
  v42 = *((_QWORD *)v1 + 16);
  if (v42)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42);
    webrtc::JsepTransportCollection::DestroyUnusedTransports((_QWORD **)v1);
    return (_QWORD **)(v4 & 1);
  }
LABEL_95:
  v44 = (_QWORD **)std::__throw_bad_function_call[abi:sn180100]();
  return webrtc::JsepTransportCollection::DestroyUnusedTransports(v44);
}

_QWORD **webrtc::JsepTransportCollection::DestroyUnusedTransports(_QWORD **this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;

  v2 = this + 1;
  v1 = *this;
  if (*this != this + 1)
  {
    v3 = this;
    v4 = 0;
    v5 = this + 4;
    v6 = this + 7;
    while (1)
    {
      if ((_QWORD *)v3[3] != v5)
      {
        do
        {
          v7 = v1[7];
          v8 = (_QWORD *)v3[3];
          while (v8[7] != v7)
          {
            v9 = (_QWORD *)v8[1];
            if (v9)
            {
              do
              {
                v10 = v9;
                v9 = (_QWORD *)*v9;
              }
              while (v9);
            }
            else
            {
              do
              {
                v10 = (_QWORD *)v8[2];
                v11 = *v10 == (_QWORD)v8;
                v8 = v10;
              }
              while (!v11);
            }
            v8 = v10;
            if (v10 == v5)
            {
              v12 = (_QWORD *)v3[6];
              if (v12 == v6)
                goto LABEL_3;
              while (v12[7] != v7)
              {
                v13 = (_QWORD *)v12[1];
                if (v13)
                {
                  do
                  {
                    v14 = v13;
                    v13 = (_QWORD *)*v13;
                  }
                  while (v13);
                }
                else
                {
                  do
                  {
                    v14 = (_QWORD *)v12[2];
                    v11 = *v14 == (_QWORD)v12;
                    v12 = v14;
                  }
                  while (!v11);
                }
                v12 = v14;
                if (v14 == v6)
                  goto LABEL_3;
              }
              break;
            }
          }
          v15 = (_QWORD *)v1[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v1[2];
              v11 = *v16 == (_QWORD)v1;
              v1 = v16;
            }
            while (!v11);
          }
          v1 = v16;
        }
        while (v16 != v2);
        goto LABEL_47;
      }
      if ((_QWORD *)v3[6] != v6)
        break;
LABEL_3:
      this = (_QWORD **)std::__tree<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>>>::erase(v3, (uint64_t)v1);
      v1 = this;
      v4 = 1;
      if (v2 == this)
        goto LABEL_48;
    }
    do
    {
      v17 = (_QWORD *)v3[6];
      while (v17[7] != v1[7])
      {
        v18 = (_QWORD *)v17[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v17[2];
            v11 = *v19 == (_QWORD)v17;
            v17 = v19;
          }
          while (!v11);
        }
        v17 = v19;
        if (v19 == v6)
          goto LABEL_3;
      }
      v20 = (_QWORD *)v1[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v1[2];
          v11 = *v21 == (_QWORD)v1;
          v1 = v21;
        }
        while (!v11);
      }
      v1 = v21;
    }
    while (v21 != v2);
LABEL_47:
    if ((v4 & 1) == 0)
      return this;
LABEL_48:
    v22 = v3[16];
    if (v22)
    {
      return (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
    }
    else
    {
      v23 = (_QWORD *)std::__throw_bad_function_call[abi:sn180100]();
      return (_QWORD **)std::vector<std::unique_ptr<cricket::ContentGroup>>::__push_back_slow_path<std::unique_ptr<cricket::ContentGroup>>(v23, v24);
    }
  }
  return this;
}

_QWORD *std::vector<std::unique_ptr<cricket::ContentGroup>>::__push_back_slow_path<std::unique_ptr<cricket::ContentGroup>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v4)
    v4 = v6 >> 2;
  v18 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
  v7 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v18)
    v7 = v4;
  if (!v7)
  {
    __break(1u);
LABEL_39:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v7 >> 61)
    goto LABEL_39;
  v9 = 8 * v7;
  v10 = (char *)operator new(8 * v7);
  v11 = &v10[v9];
  v12 = &v10[8 * v3];
  v13 = *a2;
  *a2 = 0;
  *(_QWORD *)v12 = v13;
  v14 = v12 + 8;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == (char *)*a1)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v11;
  }
  else
  {
    v17 = (unint64_t)&v16[-*a1 - 8];
    if (v17 < 0x78)
      goto LABEL_42;
    v18 = &v16[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] >= v12 || &v10[v2 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8] >= v16;
    if (!v18)
      goto LABEL_42;
    v19 = (v17 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = &v16[-v20];
    v12 -= v20;
    v22 = &v10[8 * v3 - 16];
    v23 = v16 - 16;
    v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *((_OWORD *)v23 - 1);
      v25 = *(_OWORD *)v23;
      *((_OWORD *)v23 - 1) = 0uLL;
      *(_OWORD *)v23 = 0uLL;
      *((_OWORD *)v22 - 1) = v26;
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    v16 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v27 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v12 - 1) = v27;
        v12 -= 8;
      }
      while (v16 != v15);
    }
    v16 = (char *)*a1;
    v28 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v11;
    while (v28 != v16)
    {
      v30 = *((_QWORD *)v28 - 1);
      v28 -= 8;
      v29 = v30;
      *(_QWORD *)v28 = 0;
      if (v30)
      {
        v31 = *(_QWORD *)(v29 + 24);
        if (v31)
        {
          v32 = *(_QWORD *)(v29 + 32);
          v33 = *(void **)(v29 + 24);
          if (v32 != v31)
          {
            do
            {
              if (*(char *)(v32 - 1) < 0)
                operator delete(*(void **)(v32 - 24));
              v32 -= 24;
            }
            while (v32 != v31);
            v33 = *(void **)(v29 + 24);
          }
          *(_QWORD *)(v29 + 32) = v31;
          operator delete(v33);
        }
        if (*(char *)(v29 + 23) < 0)
          operator delete(*(void **)v29);
        MEMORY[0x20BD0ADEC](v29, 0x1032C402D514303);
      }
    }
  }
  if (v16)
    operator delete(v16);
  return v14;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>>>::destroy(uint64_t a1, char *a2)
{
  cricket::JsepTransport *v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (cricket::JsepTransport *)*((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = 0;
    if (v4)
    {
      cricket::JsepTransport::~JsepTransport(v4);
      MEMORY[0x20BD0ADEC]();
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,cricket::JsepTransport *>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::JsepTransport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::JsepTransport *>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  const void **v2;
  uint64_t *v4;
  uint64_t *result;
  uint64_t *v6;
  size_t v7;
  void **v8;
  size_t v9;
  void *v10;
  BOOL v11;
  size_t v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;

  v2 = a2;
  v4 = (uint64_t *)(a1 + 1);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1, a2, a1[1], (uint64_t *)a1 + 1);
  if (v4 == result)
    return 0;
  v6 = result;
  if (*((char *)v2 + 23) < 0)
  {
    v7 = (size_t)v2[1];
    if ((v7 & 0x8000000000000000) != 0)
      goto LABEL_32;
    v2 = (const void **)*v2;
    if (v7)
    {
      if (!v2)
        goto LABEL_32;
    }
  }
  else
  {
    v7 = *((unsigned __int8 *)v2 + 23);
  }
  v8 = (void **)(result + 4);
  if ((*((char *)result + 55) & 0x80000000) == 0)
  {
    v9 = *((unsigned __int8 *)result + 55);
    v10 = result + 4;
    goto LABEL_14;
  }
  v9 = result[5];
  if ((v9 & 0x8000000000000000) != 0 || ((v10 = *v8, v9) ? (v11 = v10 == 0) : (v11 = 0), v11))
  {
LABEL_32:
    __break(1u);
    return result;
  }
LABEL_14:
  if (v9 >= v7)
    v12 = v7;
  else
    v12 = v9;
  v13 = memcmp(v2, v10, v12);
  if (!v13)
  {
    if (v7 >= v9)
      goto LABEL_19;
    return 0;
  }
  if (v13 < 0)
    return 0;
LABEL_19:
  v14 = (uint64_t *)v6[1];
  if (v14)
  {
    do
    {
      v15 = v14;
      v14 = (uint64_t *)*v14;
    }
    while (v14);
  }
  else
  {
    v16 = v6;
    do
    {
      v15 = (uint64_t *)v16[2];
      v11 = *v15 == (_QWORD)v16;
      v16 = v15;
    }
    while (!v11);
  }
  if (*a1 == v6)
    *a1 = v15;
  v17 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v17, v6);
  if (*((char *)v6 + 55) < 0)
    operator delete(*v8);
  operator delete(v6);
  return (uint64_t *)1;
}

void std::__tree<std::__value_type<std::string,cricket::JsepTransport *>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::JsepTransport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::JsepTransport *>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,cricket::JsepTransport *>,std::__tree_node<std::__value_type<std::string,cricket::JsepTransport *>,void *> *,long>>(uint64_t a1, char *a2, char *a3)
{
  char *v4;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char v13;
  __int128 v14;
  const std::string::value_type *v15;
  size_t v16;
  char **leaf_high;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  BOOL v21;
  char *v22;
  char *v23;
  char *i;
  char *v25;
  uint64_t *v26;
  const void **v27;
  __int128 v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v8 = v6[1] ? (char *)v6[1] : (char *)v6;
    if (v8)
    {
      v9 = (char *)*((_QWORD *)v8 + 2);
      if (v9)
      {
        v10 = *(char **)v9;
        if (*(char **)v9 == v8)
        {
          *(_QWORD *)v9 = 0;
          while (1)
          {
            v34 = (char *)*((_QWORD *)v9 + 1);
            if (!v34)
              break;
            do
            {
              v9 = v34;
              v34 = *(char **)v34;
            }
            while (v34);
          }
        }
        else
        {
          for (*((_QWORD *)v9 + 1) = 0; v10; v10 = (char *)*((_QWORD *)v9 + 1))
          {
            do
            {
              v9 = v10;
              v10 = *(char **)v10;
            }
            while (v10);
          }
        }
      }
      if (a2 != a3)
      {
        v11 = a2;
        v12 = v8;
        do
        {
          v8 = v9;
          if (v12 != v11)
          {
            v13 = v11[55];
            if (v12[55] < 0)
            {
              if (v13 >= 0)
                v15 = v11 + 32;
              else
                v15 = (const std::string::value_type *)*((_QWORD *)v11 + 4);
              if (v13 >= 0)
                v16 = v11[55];
              else
                v16 = *((_QWORD *)v11 + 5);
              std::string::__assign_no_alias<false>((std::string *)(v12 + 32), v15, v16);
            }
            else if (v11[55] < 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)v12 + 4, *((char **)v11 + 4), *((_QWORD *)v11 + 5));
            }
            else
            {
              v14 = *((_OWORD *)v11 + 2);
              *((_QWORD *)v12 + 6) = *((_QWORD *)v11 + 6);
              *((_OWORD *)v12 + 2) = v14;
            }
          }
          *((_QWORD *)v12 + 7) = *((_QWORD *)v11 + 7);
          leaf_high = (char **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(a1, &v35, (const void **)v12 + 4);
          v18 = v35;
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 2) = v18;
          *leaf_high = v12;
          v19 = **(_QWORD **)a1;
          if (v19)
          {
            *(_QWORD *)a1 = v19;
            v12 = *leaf_high;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)v12);
          ++*(_QWORD *)(a1 + 16);
          if (v9)
          {
            v9 = (char *)*((_QWORD *)v9 + 2);
            if (v9)
            {
              v22 = *(char **)v9;
              if (*(char **)v9 == v8)
              {
                *(_QWORD *)v9 = 0;
                while (1)
                {
                  v23 = (char *)*((_QWORD *)v9 + 1);
                  if (!v23)
                    break;
                  do
                  {
                    v9 = v23;
                    v23 = *(char **)v23;
                  }
                  while (v23);
                }
              }
              else
              {
                for (*((_QWORD *)v9 + 1) = 0; v22; v22 = (char *)*((_QWORD *)v9 + 1))
                {
                  do
                  {
                    v9 = v22;
                    v22 = *(char **)v22;
                  }
                  while (v22);
                }
              }
            }
          }
          else
          {
            v9 = 0;
          }
          v20 = (char *)*((_QWORD *)v11 + 1);
          if (v20)
          {
            do
            {
              v4 = v20;
              v20 = *(char **)v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v4 = (char *)*((_QWORD *)v11 + 2);
              v21 = *(_QWORD *)v4 == (_QWORD)v11;
              v11 = v4;
            }
            while (!v21);
          }
          if (!v8)
            break;
          v11 = v4;
          v12 = v8;
        }
        while (v4 != a3);
      }
      std::__tree<rtc::SocketAddress>::destroy(a1, v8);
      if (v9)
      {
        for (i = (char *)*((_QWORD *)v9 + 2); i; i = (char *)*((_QWORD *)i + 2))
          v9 = i;
        std::__tree<rtc::SocketAddress>::destroy(a1, v9);
      }
    }
  }
  if (v4 != a3)
  {
    do
    {
      v25 = (char *)operator new(0x40uLL);
      v26 = (uint64_t *)v25;
      v27 = (const void **)(v25 + 32);
      if (v4[55] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v25 + 32), *((const std::string::value_type **)v4 + 4), *((_QWORD *)v4 + 5));
      }
      else
      {
        v28 = *((_OWORD *)v4 + 2);
        *((_QWORD *)v25 + 6) = *((_QWORD *)v4 + 6);
        *(_OWORD *)v27 = v28;
      }
      v26[7] = *((_QWORD *)v4 + 7);
      v29 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(a1, &v35, v27);
      v30 = v35;
      *v26 = 0;
      v26[1] = 0;
      v26[2] = v30;
      *v29 = v26;
      v31 = **(_QWORD **)a1;
      if (v31)
      {
        *(_QWORD *)a1 = v31;
        v26 = *v29;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v26);
      ++*(_QWORD *)(a1 + 16);
      v32 = (char *)*((_QWORD *)v4 + 1);
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = *(char **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (char *)*((_QWORD *)v4 + 2);
          v21 = *(_QWORD *)v33 == (_QWORD)v4;
          v4 = v33;
        }
        while (!v21);
      }
      v4 = v33;
    }
    while (v33 != a3);
  }
}

_QWORD *std::__tree<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  cricket::JsepTransport *v8;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  v8 = *(cricket::JsepTransport **)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  if (v8)
  {
    cricket::JsepTransport::~JsepTransport(v8);
    MEMORY[0x20BD0ADEC]();
  }
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
  return v4;
}

uint64_t webrtc::JsepTransportController::JsepTransportController(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  _QWORD v21[5];

  v21[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(_QWORD *)(a1 + 24) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_24C0B5848;
  *(_QWORD *)(a1 + 8) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  v9 = (_OWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  v10 = *a2;
  *(_QWORD *)(a1 + 312) = *a2;
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 336) = v13;
  *(_QWORD *)(a1 + 352) = a3;
  *(_QWORD *)(a1 + 360) = a4;
  v21[0] = &off_24C0B58B0;
  v21[1] = a1;
  v21[3] = v21;
  v20[0] = &off_24C0B58F8;
  v20[1] = a1;
  v20[3] = v20;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_QWORD *)(a1 + 368) = a5;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 400) = a1 + 408;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 424) = a1 + 432;
  *(_QWORD *)(a1 + 448) = &off_24C0B58B0;
  *(_QWORD *)(a1 + 456) = a1;
  *(_QWORD *)(a1 + 504) = a1 + 480;
  *(_QWORD *)(a1 + 472) = a1 + 448;
  *(_QWORD *)(a1 + 480) = &off_24C0B58F8;
  *(_QWORD *)(a1 + 488) = a1;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_QWORD *)(a1 + 528) = *(_QWORD *)a6;
  *(_DWORD *)(a1 + 536) = 65537;
  *(_BYTE *)(a1 + 540) = 0;
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a6 + 8);
  *(_BYTE *)(a1 + 540) = *(_BYTE *)(a6 + 12);
  v14 = *(_OWORD *)(a6 + 16);
  v15 = *(_OWORD *)(a6 + 32);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a6 + 48);
  *(_OWORD *)(a1 + 544) = v14;
  *(_OWORD *)(a1 + 560) = v15;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a6 + 72))(0, a6 + 56, a1 + 584);
  *v9 = *(_OWORD *)(a6 + 72);
  *(_QWORD *)(a6 + 72) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a6 + 80) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a6 + 104))(0, a6 + 88, a1 + 616);
  v9[2] = *(_OWORD *)(a6 + 104);
  *(_QWORD *)(a6 + 104) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a6 + 112) = 0;
  v16 = *(_OWORD *)(a6 + 120);
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a6 + 136);
  *(_OWORD *)(a1 + 648) = v16;
  v17 = *(_QWORD *)(a6 + 168);
  if (v17)
  {
    if (v17 == a6 + 144)
    {
      *(_QWORD *)(a1 + 696) = a1 + 672;
      (*(void (**)(_QWORD))(**(_QWORD **)(a6 + 168) + 24))(*(_QWORD *)(a6 + 168));
    }
    else
    {
      *(_QWORD *)(a1 + 696) = v17;
      *(_QWORD *)(a6 + 168) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 696) = 0;
  }
  *(_BYTE *)(a1 + 704) = *(_BYTE *)(a6 + 120);
  *(_WORD *)(a1 + 705) = 0;
  *(_BYTE *)(a1 + 708) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 716) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 724) = 0;
  *(_BYTE *)(a1 + 728) = 0;
  *(_BYTE *)(a1 + 732) = 0;
  *(_BYTE *)(a1 + 736) = 0;
  *(_WORD *)(a1 + 740) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 748) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 756) = 0;
  *(_DWORD *)(a1 + 760) = 2;
  *(_BYTE *)(a1 + 764) = 0;
  *(_BYTE *)(a1 + 768) = 0;
  *(_BYTE *)(a1 + 772) = 0;
  *(_BYTE *)(a1 + 776) = 0;
  *(_BYTE *)(a1 + 780) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 788) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 796) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 804) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 812) = 0;
  *(_BYTE *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 820) = 0;
  *(_BYTE *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 828) = 0;
  if (a4)
    v18 = *(_QWORD *)(a4 + 288);
  else
    v18 = 0;
  *(_QWORD *)(a1 + 840) = v18;
  *(_QWORD *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a6 + 16);
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_QWORD *)(a1 + 912) = a1 + 920;
  return a1;
}

void webrtc::JsepTransportController::~JsepTransportController(webrtc::JsepTransportController *this)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  webrtc::JsepTransportController *v28;
  uint64_t v29;
  webrtc::JsepTransportController *v30;
  uint64_t v31;
  webrtc::JsepTransportController *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void (*v65)(uint64_t);
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void (*v69)(uint64_t);
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void (*v73)(uint64_t);
  std::string *v74;
  uint64_t v75;
  uint64_t v76;

  *(_QWORD *)this = &off_24C0B5848;
  v2 = (char *)*((_QWORD *)this + 47);
  v3 = (char *)this + 384;
  if (v2 != (char *)this + 384)
  {
    while (1)
    {
      v76 = 0;
      v7 = *((_QWORD *)this + 59);
      if (!v7)
        break;
      (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, (_QWORD *)v2 + 4, &v76);
      v8 = (char *)*((_QWORD *)v2 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v2 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v2;
          v2 = v9;
        }
        while (!v10);
      }
      v2 = v9;
      if (v9 == v3)
        goto LABEL_2;
    }
    std::__throw_bad_function_call[abi:sn180100]();
    goto LABEL_146;
  }
LABEL_2:
  std::__tree<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>>>::destroy((uint64_t)this + 376, *((char **)this + 48));
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 47) = v3;
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)this + 912, *((char **)this + 115));
  v4 = (_QWORD *)*((_QWORD *)this + 111);
  if (v4)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 112);
    v6 = (void *)*((_QWORD *)this + 111);
    if (v5 != v4)
    {
      do
      {
        v12 = *--v5;
        v11 = v12;
        *v5 = 0;
        if (v12)
        {
          v13 = *(_QWORD *)(v11 + 24);
          if (v13)
          {
            v14 = *(_QWORD *)(v11 + 32);
            v15 = *(void **)(v11 + 24);
            if (v14 != v13)
            {
              do
              {
                if (*(char *)(v14 - 1) < 0)
                  operator delete(*(void **)(v14 - 24));
                v14 -= 24;
              }
              while (v14 != v13);
              v15 = *(void **)(v11 + 24);
            }
            *(_QWORD *)(v11 + 32) = v13;
            operator delete(v15);
          }
          if (*(char *)(v11 + 23) < 0)
            operator delete(*(void **)v11);
          MEMORY[0x20BD0ADEC](v11, 0x1032C402D514303);
        }
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 111);
    }
    *((_QWORD *)this + 112) = v4;
    operator delete(v6);
  }
  v16 = (_QWORD *)*((_QWORD *)this + 108);
  if (v16)
  {
    v17 = (_QWORD *)*((_QWORD *)this + 109);
    v18 = (void *)*((_QWORD *)this + 108);
    if (v17 != v16)
    {
      do
      {
        v20 = *--v17;
        v19 = v20;
        *v17 = 0;
        if (v20)
        {
          v21 = *(_QWORD *)(v19 + 24);
          if (v21)
          {
            v22 = *(_QWORD *)(v19 + 32);
            v23 = *(void **)(v19 + 24);
            if (v22 != v21)
            {
              do
              {
                if (*(char *)(v22 - 1) < 0)
                  operator delete(*(void **)(v22 - 24));
                v22 -= 24;
              }
              while (v22 != v21);
              v23 = *(void **)(v19 + 24);
            }
            *(_QWORD *)(v19 + 32) = v21;
            operator delete(v23);
          }
          if (*(char *)(v19 + 23) < 0)
            operator delete(*(void **)v19);
          MEMORY[0x20BD0ADEC](v19, 0x1032C402D514303);
        }
      }
      while (v17 != v16);
      v18 = (void *)*((_QWORD *)this + 108);
    }
    *((_QWORD *)this + 109) = v16;
    operator delete(v18);
  }
  v24 = *((_QWORD *)this + 106);
  if (v24)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v24));
    if (!v26)
    {
      v27 = *(_QWORD *)(v24 + 8);
      *(_QWORD *)(v24 + 8) = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      MEMORY[0x20BD0ADEC](v24, 0x1020C40D5A9D86FLL);
    }
  }
  v28 = (webrtc::JsepTransportController *)*((_QWORD *)this + 87);
  if (v28 == (webrtc::JsepTransportController *)((char *)this + 672))
  {
    v29 = 4;
    v28 = (webrtc::JsepTransportController *)((char *)this + 672);
  }
  else
  {
    if (!v28)
      goto LABEL_57;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_57:
  (*((void (**)(uint64_t, char *, char *))this + 79))(1, (char *)this + 616, (char *)this + 616);
  (*((void (**)(uint64_t, char *, char *))this + 75))(1, (char *)this + 584, (char *)this + 584);
  v30 = (webrtc::JsepTransportController *)*((_QWORD *)this + 63);
  if (v30 == (webrtc::JsepTransportController *)((char *)this + 480))
  {
    v31 = 4;
    v30 = (webrtc::JsepTransportController *)((char *)this + 480);
  }
  else
  {
    if (!v30)
      goto LABEL_62;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_62:
  v32 = (webrtc::JsepTransportController *)*((_QWORD *)this + 59);
  if (v32 == (webrtc::JsepTransportController *)((char *)this + 448))
  {
    v33 = 4;
    v32 = (webrtc::JsepTransportController *)((char *)this + 448);
    goto LABEL_66;
  }
  if (v32)
  {
    v33 = 5;
LABEL_66:
    (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
  }
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)this + 424, *((char **)this + 54));
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)this + 400, *((char **)this + 51));
  std::__tree<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<cricket::JsepTransport>>>>::destroy((uint64_t)this + 376, *((char **)this + 48));
  v38 = (unsigned int *)*((_QWORD *)this + 39);
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
  }
  if (*((_BYTE *)this + 304))
    goto LABEL_146;
  v42 = *((_QWORD *)this + 35);
  if (v42)
  {
    v43 = *((_QWORD *)this + 36);
    v44 = (void *)*((_QWORD *)this + 35);
    if (v43 != v42)
    {
      do
      {
        v45 = *(void (**)(uint64_t))(v43 - 8);
        if (v45)
          v45(v43 - 48);
        v43 -= 56;
      }
      while (v43 != v42);
      v44 = (void *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 36) = v42;
    operator delete(v44);
  }
  if (*((_BYTE *)this + 272))
    goto LABEL_146;
  v46 = *((_QWORD *)this + 31);
  if (v46)
  {
    v47 = *((_QWORD *)this + 32);
    v48 = (void *)*((_QWORD *)this + 31);
    if (v47 != v46)
    {
      do
      {
        v49 = *(void (**)(uint64_t))(v47 - 8);
        if (v49)
          v49(v47 - 48);
        v47 -= 56;
      }
      while (v47 != v46);
      v48 = (void *)*((_QWORD *)this + 31);
    }
    *((_QWORD *)this + 32) = v46;
    operator delete(v48);
  }
  if (*((_BYTE *)this + 240))
    goto LABEL_146;
  v50 = *((_QWORD *)this + 27);
  if (v50)
  {
    v51 = *((_QWORD *)this + 28);
    v52 = (void *)*((_QWORD *)this + 27);
    if (v51 != v50)
    {
      do
      {
        v53 = *(void (**)(uint64_t))(v51 - 8);
        if (v53)
          v53(v51 - 48);
        v51 -= 56;
      }
      while (v51 != v50);
      v52 = (void *)*((_QWORD *)this + 27);
    }
    *((_QWORD *)this + 28) = v50;
    operator delete(v52);
  }
  if (*((_BYTE *)this + 208))
    goto LABEL_146;
  v54 = *((_QWORD *)this + 23);
  if (v54)
  {
    v55 = *((_QWORD *)this + 24);
    v56 = (void *)*((_QWORD *)this + 23);
    if (v55 != v54)
    {
      do
      {
        v57 = *(void (**)(uint64_t))(v55 - 8);
        if (v57)
          v57(v55 - 48);
        v55 -= 56;
      }
      while (v55 != v54);
      v56 = (void *)*((_QWORD *)this + 23);
    }
    *((_QWORD *)this + 24) = v54;
    operator delete(v56);
  }
  if (*((_BYTE *)this + 176))
    goto LABEL_146;
  v58 = *((_QWORD *)this + 19);
  if (v58)
  {
    v59 = *((_QWORD *)this + 20);
    v60 = (void *)*((_QWORD *)this + 19);
    if (v59 != v58)
    {
      do
      {
        v61 = *(void (**)(uint64_t))(v59 - 8);
        if (v61)
          v61(v59 - 48);
        v59 -= 56;
      }
      while (v59 != v58);
      v60 = (void *)*((_QWORD *)this + 19);
    }
    *((_QWORD *)this + 20) = v58;
    operator delete(v60);
  }
  if (*((_BYTE *)this + 144))
    goto LABEL_146;
  v62 = *((_QWORD *)this + 15);
  if (v62)
  {
    v63 = *((_QWORD *)this + 16);
    v64 = (void *)*((_QWORD *)this + 15);
    if (v63 != v62)
    {
      do
      {
        v65 = *(void (**)(uint64_t))(v63 - 8);
        if (v65)
          v65(v63 - 48);
        v63 -= 56;
      }
      while (v63 != v62);
      v64 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v62;
    operator delete(v64);
  }
  if (*((_BYTE *)this + 112))
    goto LABEL_146;
  v66 = *((_QWORD *)this + 11);
  if (v66)
  {
    v67 = *((_QWORD *)this + 12);
    v68 = (void *)*((_QWORD *)this + 11);
    if (v67 != v66)
    {
      do
      {
        v69 = *(void (**)(uint64_t))(v67 - 8);
        if (v69)
          v69(v67 - 48);
        v67 -= 56;
      }
      while (v67 != v66);
      v68 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v66;
    operator delete(v68);
  }
  if (*((_BYTE *)this + 80))
  {
LABEL_146:
    v74 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 21, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v34, v35, v36, v37, v75);
    webrtc::JsepTransportController::~JsepTransportController((webrtc::JsepTransportController *)v74);
    return;
  }
  v70 = *((_QWORD *)this + 7);
  if (v70)
  {
    v71 = *((_QWORD *)this + 8);
    v72 = (void *)*((_QWORD *)this + 7);
    if (v71 != v70)
    {
      do
      {
        v73 = *(void (**)(uint64_t))(v71 - 8);
        if (v73)
          v73(v71 - 48);
        v71 -= 56;
      }
      while (v71 != v70);
      v72 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v70;
    operator delete(v72);
  }
  *(_QWORD *)this = &unk_24C0ACE30;
  (*((void (**)(webrtc::JsepTransportController *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

{
  webrtc::JsepTransportController::~JsepTransportController(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::JsepTransportController::SetLocalDescription(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  if (rtc::Thread::IsCurrent(*(rtc::Thread **)(a1 + 352)))
  {
    if (!*(_BYTE *)(a1 + 706))
    {
      *(_BYTE *)(a1 + 705) = a2 == 0;
      *(_BYTE *)(a1 + 706) = 1;
      if (a2)
      {
        *(_DWORD *)(a1 + 832) = 1;
        webrtc::JsepTransportController::GetDtlsTransports((webrtc::JsepTransportCollection **)a1, &v21);
        v10 = v21;
        v11 = v22;
        if (v21 != v22)
        {
          v12 = v21;
          do
          {
            v13 = *(_QWORD *)v12;
            v12 += 8;
            v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 200))(v13);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 112))(v14, *(unsigned int *)(a1 + 832));
          }
          while (v12 != v11);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 832) = 0;
        webrtc::JsepTransportController::GetDtlsTransports((webrtc::JsepTransportCollection **)a1, &v21);
        v10 = v21;
        v16 = v22;
        if (v21 != v22)
        {
          v17 = v21;
          do
          {
            v18 = *(_QWORD *)v17;
            v17 += 8;
            v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 200))(v18);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 112))(v19, *(unsigned int *)(a1 + 832));
          }
          while (v17 != v16);
        }
      }
      if (v10)
        operator delete(v10);
    }
    webrtc::JsepTransportController::ApplyDescription_n(a1, 1, a2, a3, a4, a5);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 352);
    v21 = (char *)a1;
    LODWORD(v22) = a2;
    v23 = a3;
    v24 = a4;
    *(_DWORD *)a5 = 0;
    *(_BYTE *)(a5 + 38) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 29) = 0;
    v25[0] = a5;
    v25[1] = &v21;
    (*(void (**)(uint64_t, _QWORD *, __n128 (*)(uint64_t *), char *))(*(_QWORD *)v15 + 96))(v15, v25, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::JsepTransportController::SetLocalDescription(webrtc::SdpType,cricket::SessionDescription const*,cricket::SessionDescription const*)::$_0,webrtc::RTCError,void>(webrtc::JsepTransportController::SetLocalDescription(webrtc::SdpType,cricket::SessionDescription const*,cricket::SessionDescription const*)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v20);
  }
}

void webrtc::JsepTransportController::ApplyDescription_n(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  size_t v6;
  unint64_t p_src;
  uint64_t v9;
  std::string::size_type v11;
  std::string::size_type *v12;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  size_t v16;
  BOOL v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  size_t v24;
  int v25;
  _QWORD *v26;
  size_t v27;
  size_t v29;
  int v30;
  const void *v31;
  size_t v32;
  _QWORD *v33;
  size_t v34;
  int v35;
  BOOL v36;
  std::string::size_type v37;
  size_t v38;
  int v39;
  __int128 v40;
  BOOL v41;
  char v42;
  _BYTE *v43;
  size_t v44;
  int v45;
  size_t v46;
  const void *v47;
  size_t v48;
  size_t v49;
  int v50;
  _BYTE *v51;
  size_t v52;
  size_t v53;
  int v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  std::string::size_type *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  _BYTE *v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  std::string::size_type v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::string::size_type v79;
  int v80;
  uint64_t **v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  size_t v87;
  uint64_t *v88;
  size_t v89;
  _QWORD *v90;
  size_t v91;
  size_t v93;
  int v94;
  std::string::size_type *v95;
  std::string *v96;
  std::string *v97;
  std::string *v98;
  std::string *v99;
  size_t v100;
  std::string *v101;
  uint64_t *v102;
  uint64_t *v103;
  std::string::size_type *v104;
  size_t v105;
  std::string::size_type *p_size;
  std::string::size_type v107;
  std::string::size_type v108;
  std::string::size_type *v109;
  std::string::size_type *v110;
  std::string *v111;
  std::string *v112;
  std::string *v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v125;
  std::string::size_type v126;
  std::string::size_type v127;
  std::string::size_type v128;
  std::string *v129;
  char *v130;
  std::string::size_type v131;
  char v132;
  _BYTE *v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  std::string::size_type v138;
  std::string::size_type i;
  __int128 *v140;
  __int128 *v141;
  std::string::size_type v142;
  std::string::size_type *v143;
  std::string::size_type *v144;
  const std::string::value_type *v145;
  size_t v146;
  BOOL v147;
  char v148;
  const std::string::value_type *v149;
  size_t v150;
  size_t v151;
  const void *v152;
  size_t v153;
  size_t v154;
  int v155;
  const std::string::value_type *v156;
  size_t v157;
  size_t v158;
  int v159;
  std::string *v160;
  __int128 v161;
  uint64_t *v162;
  std::string::size_type j;
  std::string::size_type v164;
  uint64_t v165;
  _QWORD *v166;
  BOOL v167;
  std::string *v168;
  std::string::size_type *v170;
  size_t v171;
  size_t v173;
  int v174;
  std::string::size_type v175;
  std::string::size_type v176;
  std::string *v177;
  std::string *v178;
  std::string *v179;
  std::string *v180;
  std::string::size_type v181;
  std::string::size_type v182;
  uint64_t *v183;
  uint64_t *v184;
  std::string *v185;
  std::string *v186;
  int v187;
  size_t v188;
  const void *v189;
  std::string::size_type *v190;
  size_t v191;
  size_t v193;
  int v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  char *v225;
  std::string::size_type v226;
  std::string::size_type v227;
  std::string *v228;
  char *v229;
  std::string::size_type v230;
  unint64_t v231;
  char *v232;
  int v233;
  unint64_t v234;
  char *v235;
  uint64_t v236;
  char *v237;
  std::string::size_type *v238;
  std::string::size_type v239;
  std::string::size_type v240;
  std::string::size_type v241;
  std::string *v242;
  char *v243;
  std::string::size_type v244;
  char v245;
  _BYTE *v246;
  _BYTE *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t *v254;
  const void *v255;
  _QWORD *v256;
  size_t v257;
  size_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unsigned __int8 *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  std::string::size_type v273;
  std::string::size_type v274;
  std::string::size_type v275;
  std::string *v276;
  char *v277;
  std::string::size_type v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v283;
  std::string::size_type v285;
  std::string::size_type v286;
  std::string::size_type v287;
  std::string *v288;
  char *v289;
  std::string::size_type v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  unint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v300;
  std::string::size_type v302;
  std::string::size_type v303;
  std::string::size_type v304;
  std::string *v305;
  char *v306;
  std::string::size_type v307;
  size_t v308;
  _BYTE *v309;
  _BYTE *v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  int v314;
  unint64_t v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  char *v321;
  std::string::size_type v322;
  std::string::size_type v323;
  std::string::size_type v324;
  char *v325;
  char v326;
  _BYTE *v327;
  uint64_t v328;
  uint64_t v329;
  _BYTE *v330;
  uint64_t v331;
  int v332;
  uint64_t **v333;
  uint64_t *v334;
  size_t v335;
  const void *v336;
  _QWORD *v337;
  size_t v338;
  size_t v340;
  int v341;
  std::string::size_type v342;
  std::string::size_type *v343;
  uint64_t **v344;
  size_t v345;
  std::string::size_type *v346;
  uint64_t *v347;
  uint64_t v348;
  int v349;
  __int32 *v350;
  __int32 *v351;
  __int32 *v352;
  unint64_t v353;
  char *v354;
  _DWORD *v355;
  char *v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _BYTE *v362;
  _DWORD *v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  _OWORD *v368;
  char *v369;
  uint64_t v370;
  __int128 v371;
  int v372;
  _QWORD *v373;
  _QWORD *v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t *v377;
  unint64_t v378;
  const void *v379;
  _QWORD *v380;
  unint64_t v381;
  size_t v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  std::string::size_type v392;
  rtc::PacketTransportInternal *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int v401;
  char v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  rtc::PacketTransportInternal *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  unsigned int v432;
  uint64_t v433;
  uint64_t v434;
  _BYTE *v435;
  void (**v436)(_BYTE *, uint64_t);
  _QWORD *v437;
  uint64_t v438;
  uint64_t v439;
  _QWORD *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  cricket::JsepTransport **v453;
  cricket::JsepTransport *v454;
  uint64_t *v455;
  unint64_t v456;
  uint64_t **v457;
  uint64_t v458;
  uint64_t v459;
  int v460;
  uint64_t *v461;
  unint64_t v462;
  const void *v463;
  _QWORD *v465;
  size_t v466;
  size_t v467;
  const void *v468;
  size_t v469;
  _QWORD *v471;
  size_t v472;
  size_t v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  int v480;
  unsigned __int8 *v481;
  unsigned __int8 *v482;
  size_t v484;
  int v485;
  std::string::size_type v486;
  unsigned __int8 *v487;
  size_t v488;
  uint64_t v489;
  int v490;
  unsigned __int8 *v491;
  unsigned __int8 *v492;
  unint64_t v493;
  int v494;
  unint64_t v495;
  int v496;
  BOOL v498;
  int v499;
  unsigned __int8 *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  unsigned __int8 *v505;
  unsigned __int8 *v506;
  int v507;
  unint64_t v508;
  char *v509;
  uint64_t v510;
  char *v511;
  BOOL v512;
  char *v513;
  uint64_t v515;
  std::string::size_type v516;
  std::string::size_type v517;
  _BYTE *v518;
  char *v519;
  std::string::size_type v520;
  uint64_t v521;
  uint64_t **v522;
  uint64_t **v523;
  uint64_t **v524;
  uint64_t *v525;
  uint64_t *v526;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  BOOL v535;
  BOOL v536;
  BOOL v537;
  BOOL v538;
  BOOL v539;
  BOOL v540;
  int v542;
  uint64_t *v543;
  const void *v544;
  _QWORD *v545;
  size_t v546;
  size_t v547;
  int v548;
  _QWORD *v549;
  int v550;
  const cricket::TransportDescription *v551;
  cricket::TransportDescription *v552;
  uint64_t v553;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  unint64_t v562;
  char *v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  char *v567;
  char *v569;
  char *v570;
  std::string::size_type v571;
  std::string::size_type v572;
  unint64_t v573;
  std::string *v574;
  _BYTE *v575;
  std::string::size_type v576;
  std::string::size_type *v577;
  std::string::size_type *v578;
  std::string::size_type *v579;
  std::string::size_type *v580;
  std::string::size_type v581;
  int v582;
  uint64_t v584;
  __int128 v585;
  uint64_t *v586;
  uint64_t v587;
  uint64_t v588;
  int v589;
  const void *v590;
  uint64_t v591;
  int v592;
  unint64_t v593;
  char *v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  char *v598;
  char *v600;
  char *v601;
  std::string::size_type v603;
  std::string::size_type v604;
  std::string *v605;
  _BYTE *v606;
  std::string::size_type v607;
  size_t v608;
  std::string *v609;
  std::string *v610;
  uint64_t v611;
  uint64_t v612;
  int v613;
  unint64_t v614;
  std::string *v615;
  uint64_t *v616;
  uint64_t *v617;
  size_t v618;
  _QWORD *v619;
  size_t v621;
  int v622;
  std::string::size_type v623;
  std::string *v624;
  std::string *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  char *v629;
  char *v630;
  char *v631;
  std::string::size_type v632;
  std::string::size_type v633;
  std::string *v634;
  char *v635;
  std::string::size_type v636;
  size_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  size_t v644;
  std::string::size_type v645;
  std::string::size_type v646;
  std::string *v647;
  char *v648;
  std::string::size_type v649;
  int v650;
  unint64_t v651;
  std::string *p_len;
  char *v653;
  uint64_t v654;
  char *v655;
  char *v656;
  std::string::size_type v657;
  std::string::size_type v658;
  std::string *v659;
  char *v660;
  std::string::size_type v661;
  size_t v662;
  size_t v663;
  std::string::size_type v664;
  std::string::size_type v665;
  std::string *v666;
  char *v667;
  std::string::size_type v668;
  size_t v669;
  std::string *v670;
  std::string *v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  _BYTE *v675;
  char *v676;
  uint64_t v677;
  uint64_t v678;
  char *v679;
  char *v681;
  char *v682;
  std::string::size_type v684;
  std::string::size_type v685;
  std::string *v686;
  _WORD *v687;
  std::string::size_type v688;
  size_t v689;
  _BYTE *v690;
  uint64_t v691;
  uint64_t v692;
  char *v693;
  unint64_t v694;
  char v695;
  std::string *v696;
  void *v697;
  uint64_t v698;
  uint64_t **v699;
  unsigned int **v701;
  int v702;
  uint64_t **v704;
  uint64_t **v705;
  std::string::size_type size;
  std::string::size_type v708;
  int v709;
  _OWORD *v710;
  uint64_t **v711;
  int v712[2];
  int v713[2];
  int v714[2];
  _QWORD *v715;
  int v717[2];
  int v718[2];
  int v719;
  char *__s;
  char *__sa;
  char *__sb;
  std::string::size_type v724;
  uint64_t *v725;
  uint64_t v726;
  std::string::size_type *__s2;
  void *__s2a;
  std::string **__s2b;
  int v730;
  int data;
  __int128 v732;
  std::string::pointer v733;
  _BYTE v734[7];
  std::string v735;
  std::string v736;
  std::string __len;
  std::string v738;
  _BYTE v739[7];
  std::string __src;
  _BYTE v741[32];
  rtc::PacketTransportInternal *v742;
  uint64_t v743;
  uint64_t v744;
  rtc::PacketTransportInternal *v745;
  rtc::PacketTransportInternal *v746;
  std::string __p[2];
  _BYTE v748[40];
  _QWORD v749[4];
  int v750;
  uint64_t v751;

  v751 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v9 = a4;
  else
    v9 = a5;
  v748[23] = 6;
  if (v748 <= "BUNDLE" && &v748[6] > "BUNDLE")
    goto LABEL_802;
  LODWORD(v705) = *(_DWORD *)"BUNDLE";
  strcpy(v748, "BUNDLE");
  LOWORD(v704) = *(_WORD *)"LE";
  v725 = (uint64_t *)v9;
  cricket::SessionDescription::GetGroupsByName(v9, (unsigned __int8 **)v748, &__p[0].__r_.__value_.__l.__data_);
  if ((v748[23] & 0x80000000) != 0)
    operator delete(*(void **)v748);
  *(_OWORD *)&v741[8] = 0uLL;
  *(_QWORD *)v741 = &v741[8];
  size = __p[0].__r_.__value_.__l.__size_;
  v11 = __p[0].__r_.__value_.__r.__words[0];
  v726 = a1;
  if (__p[0].__r_.__value_.__r.__words[0] != __p[0].__r_.__value_.__l.__size_)
  {
    do
    {
      *(_QWORD *)v712 = v11;
      __s = *(char **)v11;
      v12 = *(std::string::size_type **)(*(_QWORD *)v11 + 24);
      *(_QWORD *)v717 = *(_QWORD *)(*(_QWORD *)v11 + 32);
      if (v12 == *(std::string::size_type **)v717)
        goto LABEL_171;
      do
      {
        v13 = *(uint64_t **)&v741[8];
        __s2 = v12;
        v14 = *((char *)v12 + 23);
        if (!*(_QWORD *)&v741[8])
          goto LABEL_73;
        v15 = *((unsigned __int8 *)v12 + 23);
        v6 = *v12;
        v16 = v12[1];
        if (v16)
          v17 = v6 == 0;
        else
          v17 = 0;
        p_src = !v17;
        v18 = &v741[8];
        v19 = *(uint64_t **)&v741[8];
        if (v14 < 0)
        {
          if ((v16 & 0x8000000000000000) != 0 || !(_DWORD)p_src)
            goto LABEL_802;
          v18 = &v741[8];
          v20 = *(uint64_t **)&v741[8];
          while (1)
          {
            v26 = v20 + 4;
            if (*((char *)v20 + 55) < 0)
            {
              v27 = v20[5];
              if ((v27 & 0x8000000000000000) != 0)
                goto LABEL_802;
              v26 = (_QWORD *)*v26;
              if (v27 && v26 == 0)
                goto LABEL_802;
            }
            else
            {
              v27 = *((unsigned __int8 *)v20 + 55);
            }
            if (v16 >= v27)
              v29 = v27;
            else
              v29 = v16;
            v30 = memcmp(v26, (const void *)v6, v29);
            if (v30)
            {
              if ((v30 & 0x80000000) == 0)
                goto LABEL_56;
LABEL_40:
              v20 = (uint64_t *)v20[1];
              if (!v20)
                goto LABEL_57;
            }
            else
            {
              if (v27 < v16)
                goto LABEL_40;
LABEL_56:
              v18 = v20;
              v20 = (uint64_t *)*v20;
              if (!v20)
                goto LABEL_57;
            }
          }
        }
        do
        {
          while (1)
          {
            v21 = v19 + 4;
            if (*((char *)v19 + 55) < 0)
            {
              v22 = v19[5];
              if ((v22 & 0x8000000000000000) != 0)
                goto LABEL_802;
              v21 = (_QWORD *)*v21;
              if (v22 && v21 == 0)
                goto LABEL_802;
            }
            else
            {
              v22 = *((unsigned __int8 *)v19 + 55);
            }
            v24 = v15 >= v22 ? v22 : v14;
            v25 = memcmp(v21, __s2, v24);
            if (v25)
              break;
            if (v22 >= v15)
              goto LABEL_38;
LABEL_23:
            v19 = (uint64_t *)v19[1];
            if (!v19)
              goto LABEL_57;
          }
          if (v25 < 0)
            goto LABEL_23;
LABEL_38:
          v18 = v19;
          v19 = (uint64_t *)*v19;
        }
        while (v19);
LABEL_57:
        if (&v741[8] != v18)
        {
          v31 = __s2;
          v32 = v14;
          if (v14 < 0)
          {
            if ((v16 & 0x8000000000000000) != 0)
              goto LABEL_802;
            v31 = (const void *)v6;
            v32 = v16;
            if ((p_src & 1) == 0)
              goto LABEL_802;
          }
          v33 = v18 + 32;
          if ((char)v18[55] < 0)
          {
            v6 = *((_QWORD *)v18 + 5);
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_802;
            v33 = (_QWORD *)*v33;
            if (v6)
            {
              if (!v33)
                goto LABEL_802;
            }
          }
          else
          {
            v6 = v18[55];
          }
          if (v6 >= v32)
            v34 = v32;
          else
            v34 = v6;
          v35 = memcmp(v31, v33, v34);
          if (v35)
          {
            a1 = v726;
            if ((v35 & 0x80000000) == 0)
            {
LABEL_444:
              if (v14 >= 0)
                v6 = v14;
              else
                v6 = v16;
              v195 = v6 + 31;
              if (v6 + 31 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_1662;
              if (v195 > 0x16)
              {
                v236 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v195 | 7) != 0x17)
                  v236 = v195 | 7;
                p_src = v236 + 1;
                v196 = (char *)operator new(v236 + 1);
                v738.__r_.__value_.__l.__size_ = v6 + 31;
                v738.__r_.__value_.__r.__words[2] = p_src | 0x8000000000000000;
                v738.__r_.__value_.__r.__words[0] = (std::string::size_type)v196;
              }
              else
              {
                memset(&v738, 0, sizeof(v738));
                v196 = (char *)&v738;
                *((_BYTE *)&v738.__r_.__value_.__s + 23) = v6 + 31;
              }
              v237 = v196 + 31;
              if (v196 <= "A BUNDLE group contains a MID='" && v237 > "A BUNDLE group contains a MID='")
                goto LABEL_802;
              qmemcpy(v196, "A BUNDLE group contains a MID='", 31);
              v238 = v14 >= 0 ? __s2 : (std::string::size_type *)*__s2;
              p_src = (unint64_t)&v237[v6];
              if (v238 >= (std::string::size_type *)v237 && p_src > (unint64_t)v238)
                goto LABEL_802;
              if (v6)
                memmove(v237, v238, v6);
              *(_BYTE *)p_src = 0;
              v239 = v738.__r_.__value_.__r.__words[2];
              if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v240 = 22;
              else
                v240 = (v738.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v241 = HIBYTE(v738.__r_.__value_.__r.__words[2]);
              else
                v241 = v738.__r_.__value_.__l.__size_;
              if (v240 - v241 >= 0x24)
              {
                v242 = &v738;
                if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v242 = (std::string *)v738.__r_.__value_.__r.__words[0];
                v243 = (char *)v242 + v241;
                if ((char *)v242 + v241 <= "' that is already in a BUNDLE group."
                  && v243 + 36 > "' that is already in a BUNDLE group.")
                {
                  goto LABEL_802;
                }
                qmemcpy(v243, "' that is already in a BUNDLE group.", 36);
                v244 = v241 + 36;
                if ((v239 & 0x8000000000000000) != 0)
                  v738.__r_.__value_.__l.__size_ = v241 + 36;
                else
                  *((_BYTE *)&v738.__r_.__value_.__s + 23) = v244 & 0x7F;
                v242->__r_.__value_.__s.__data_[v244] = 0;
              }
              else
              {
                std::string::__grow_by_and_replace(&v738, v240, v241 - v240 + 36, v241, v241, 0, 0x24uLL, "' that is already in a BUNDLE group.");
              }
              __src = v738;
              memset(&v738, 0, sizeof(v738));
              v132 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              {
                v6 = __src.__r_.__value_.__l.__size_;
                if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                  goto LABEL_802;
                p_src = __src.__r_.__value_.__r.__words[0];
                if (__src.__r_.__value_.__l.__size_)
                {
                  if (!__src.__r_.__value_.__r.__words[0])
                    goto LABEL_802;
                }
                *(_DWORD *)v748 = 3;
                if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_1662;
              }
              else
              {
                *(_DWORD *)v748 = 3;
                p_src = (unint64_t)&__src;
                v6 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
              }
              if (v6 > 0x16)
              {
                v291 = (v6 & 0x7FFFFFFFFFFFFFF8) + 8;
                if ((v6 | 7) != 0x17)
                  v291 = v6 | 7;
                v292 = v291 + 1;
                v133 = operator new(v291 + 1);
                *(_QWORD *)&v748[16] = v6;
                *(_QWORD *)&v748[24] = v292 | 0x8000000000000000;
                *(_QWORD *)&v748[8] = v133;
              }
              else
              {
                v133 = &v748[8];
                v748[31] = v6;
              }
              v134 = &v133[v6];
              if ((unint64_t)v133 > p_src)
              {
LABEL_309:
                if (v6)
                  memmove(v133, (const void *)p_src, v6);
                *v134 = 0;
                *(_DWORD *)&v748[32] = 0;
                v748[36] = 0;
                v748[38] = 0;
                if (v132 < 0)
                  goto LABEL_312;
                goto LABEL_861;
              }
LABEL_308:
              if ((unint64_t)v134 > p_src)
                goto LABEL_802;
              goto LABEL_309;
            }
          }
          else
          {
            v36 = v32 >= v6;
            a1 = v726;
            if (v36)
              goto LABEL_444;
          }
        }
LABEL_73:
        if ((v14 & 0x80000000) == 0)
        {
          v37 = __s2[2];
          *(_OWORD *)v748 = *(_OWORD *)__s2;
          p_src = (unint64_t)&v741[8];
          *(_QWORD *)&v748[16] = v37;
          *(_QWORD *)&v748[24] = __s;
          v6 = (size_t)&v741[8];
          if (!v13)
            goto LABEL_116;
LABEL_77:
          v38 = v748[23];
          v39 = v748[23];
          v40 = *(_OWORD *)v748;
          if (*(_QWORD *)&v748[8])
            v41 = *(_QWORD *)v748 == 0;
          else
            v41 = 0;
          v42 = !v41;
          while (1)
          {
            p_src = (unint64_t)v13;
            if (v39 < 0)
            {
              if ((*((_QWORD *)&v40 + 1) & 0x8000000000000000) != 0)
                goto LABEL_802;
              v44 = *((_QWORD *)&v40 + 1);
              v43 = (_BYTE *)v40;
              if ((v42 & 1) == 0)
                goto LABEL_802;
            }
            else
            {
              v43 = v748;
              v44 = v38;
            }
            v6 = (size_t)(v13 + 4);
            v45 = *((char *)v13 + 55);
            v46 = *((unsigned __int8 *)v13 + 55);
            v47 = v13 + 4;
            v48 = v46;
            if (v45 < 0)
            {
              v48 = *(_QWORD *)(p_src + 40);
              if ((v48 & 0x8000000000000000) != 0)
                goto LABEL_802;
              v47 = *(const void **)v6;
              if (v48)
              {
                if (!v47)
                  goto LABEL_802;
              }
            }
            if (v48 >= v44)
              v49 = v44;
            else
              v49 = v48;
            v50 = memcmp(v43, v47, v49);
            if (v50)
            {
              if (v50 < 0)
                goto LABEL_83;
            }
            else if (v44 < v48)
            {
LABEL_83:
              v13 = *(uint64_t **)p_src;
              v6 = p_src;
              if (!*(_QWORD *)p_src)
                goto LABEL_116;
              continue;
            }
            if ((v46 & 0x80) != 0)
            {
              v46 = *(_QWORD *)(p_src + 40);
              if ((v46 & 0x8000000000000000) != 0)
                goto LABEL_802;
              v6 = *(_QWORD *)v6;
              if (v46)
              {
                if (!v6)
                  goto LABEL_802;
              }
            }
            if (v39 < 0)
            {
              if ((*((_QWORD *)&v40 + 1) & 0x8000000000000000) != 0)
                goto LABEL_802;
              v52 = *((_QWORD *)&v40 + 1);
              v51 = (_BYTE *)v40;
              if ((v42 & 1) == 0)
                goto LABEL_802;
            }
            else
            {
              v51 = v748;
              v52 = v38;
            }
            if (v52 >= v46)
              v53 = v46;
            else
              v53 = v52;
            v54 = memcmp((const void *)v6, v51, v53);
            if (v54)
            {
              if ((v54 & 0x80000000) == 0)
                goto LABEL_135;
            }
            else if (v46 >= v52)
            {
LABEL_135:
              a1 = v726;
              v58 = __s2;
              v69 = v725;
              if ((v39 & 0x80) != 0)
                goto LABEL_143;
              goto LABEL_144;
            }
            v13 = *(uint64_t **)(p_src + 8);
            if (!v13)
            {
              v6 = p_src + 8;
              goto LABEL_116;
            }
          }
        }
        std::string::__init_copy_ctor_external((std::string *)v748, (const std::string::value_type *)*__s2, __s2[1]);
        v13 = *(uint64_t **)&v741[8];
        p_src = (unint64_t)&v741[8];
        *(_QWORD *)&v748[24] = __s;
        v6 = (size_t)&v741[8];
        if (*(_QWORD *)&v741[8])
          goto LABEL_77;
LABEL_116:
        v55 = operator new(0x40uLL);
        v55[2] = *(_OWORD *)v748;
        v56 = *(_QWORD *)&v748[16];
        memset(v748, 0, 24);
        *((_QWORD *)v55 + 6) = v56;
        *((_QWORD *)v55 + 7) = __s;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
        *((_QWORD *)v55 + 2) = p_src;
        *(_QWORD *)v6 = v55;
        if (**(_QWORD **)v741)
        {
          *(_QWORD *)v741 = **(_QWORD **)v741;
          v55 = *(_OWORD **)v6;
        }
        v57 = *(uint64_t **)&v741[8];
        v17 = v55 == *(_OWORD **)&v741[8];
        *((_BYTE *)v55 + 24) = v55 == *(_OWORD **)&v741[8];
        a1 = v726;
        v58 = __s2;
        if (v17)
          goto LABEL_142;
        while (2)
        {
          v59 = (uint64_t *)*((_QWORD *)v55 + 2);
          if (*((_BYTE *)v59 + 24))
            goto LABEL_142;
          v60 = (uint64_t *)v59[2];
          v61 = (uint64_t *)*v60;
          if ((uint64_t *)*v60 != v59)
          {
            if (!v61 || (v63 = *((unsigned __int8 *)v61 + 24), v62 = v61 + 3, v63))
            {
              if ((_OWORD *)*v59 == v55)
              {
                v78 = *((_QWORD *)v55 + 1);
                *v59 = v78;
                if (v78)
                {
                  *(_QWORD *)(v78 + 16) = v59;
                  v60 = (uint64_t *)v59[2];
                }
                *((_QWORD *)v55 + 2) = v60;
                *(_QWORD *)(v59[2] + 8 * (*(_QWORD *)v59[2] != (_QWORD)v59)) = v55;
                *((_QWORD *)v55 + 1) = v59;
                v59[2] = (uint64_t)v55;
                v60 = (uint64_t *)*((_QWORD *)v55 + 2);
                *((_BYTE *)v55 + 24) = 1;
                *((_BYTE *)v60 + 24) = 0;
                v59 = (uint64_t *)v60[1];
                v70 = *v59;
                v60[1] = *v59;
                if (v70)
LABEL_139:
                  *(_QWORD *)(v70 + 16) = v60;
              }
              else
              {
                *((_BYTE *)v59 + 24) = 1;
                *((_BYTE *)v60 + 24) = 0;
                v59 = (uint64_t *)v60[1];
                v70 = *v59;
                v60[1] = *v59;
                if (v70)
                  goto LABEL_139;
              }
              v59[2] = v60[2];
              *(_QWORD *)(v60[2] + 8 * (*(_QWORD *)v60[2] != (_QWORD)v60)) = v59;
              *v59 = (uint64_t)v60;
              goto LABEL_141;
            }
LABEL_121:
            *((_BYTE *)v59 + 24) = 1;
            v55 = v60;
            *((_BYTE *)v60 + 24) = v60 == v57;
            *v62 = 1;
            if (v60 == v57)
              goto LABEL_142;
            continue;
          }
          break;
        }
        v64 = v60[1];
        if (v64)
        {
          v65 = *(unsigned __int8 *)(v64 + 24);
          v62 = (_BYTE *)(v64 + 24);
          if (!v65)
            goto LABEL_121;
        }
        if ((_OWORD *)*v59 == v55)
        {
          *((_BYTE *)v59 + 24) = 1;
          *((_BYTE *)v60 + 24) = 0;
          v68 = v59[1];
          *v60 = v68;
          if (v68)
            goto LABEL_133;
        }
        else
        {
          v66 = (uint64_t **)v59[1];
          v67 = *v66;
          v59[1] = (uint64_t)*v66;
          if (v67)
          {
            v67[2] = (uint64_t)v59;
            v60 = (uint64_t *)v59[2];
          }
          v66[2] = v60;
          *(_QWORD *)(v59[2] + 8 * (*(_QWORD *)v59[2] != (_QWORD)v59)) = v66;
          *v66 = v59;
          v59[2] = (uint64_t)v66;
          v60 = v66[2];
          v59 = (uint64_t *)*v60;
          *((_BYTE *)v66 + 24) = 1;
          *((_BYTE *)v60 + 24) = 0;
          v68 = v59[1];
          *v60 = v68;
          if (v68)
LABEL_133:
            *(_QWORD *)(v68 + 16) = v60;
        }
        v59[2] = v60[2];
        *(_QWORD *)(v60[2] + 8 * (*(_QWORD *)v60[2] != (_QWORD)v60)) = v59;
        v59[1] = (uint64_t)v60;
LABEL_141:
        v60[2] = (uint64_t)v59;
LABEL_142:
        ++*(_QWORD *)&v741[16];
        v69 = v725;
        if ((v748[23] & 0x80) != 0)
        {
LABEL_143:
          operator delete(*(void **)v748);
          v69 = v725;
        }
LABEL_144:
        v71 = *v69;
        v72 = v69[1];
        p_src = *((unsigned __int8 *)v58 + 23);
        if (*v69 == v72)
        {
          v73 = v58[1];
LABEL_260:
          v119 = (char)p_src;
          if ((p_src & 0x80u) == 0)
            v6 = p_src;
          else
            v6 = v73;
          v120 = v6 + 31;
          if (v6 + 31 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1662;
          if (v120 > 0x16)
          {
            v122 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v120 | 7) != 0x17)
              v122 = v120 | 7;
            p_src = v122 + 1;
            v121 = (char *)operator new(v122 + 1);
            v738.__r_.__value_.__l.__size_ = v6 + 31;
            v738.__r_.__value_.__r.__words[2] = p_src | 0x8000000000000000;
            v738.__r_.__value_.__r.__words[0] = (std::string::size_type)v121;
          }
          else
          {
            memset(&v738, 0, sizeof(v738));
            v121 = (char *)&v738;
            *((_BYTE *)&v738.__r_.__value_.__s + 23) = v6 + 31;
          }
          v123 = v121 + 31;
          if (v121 <= "A BUNDLE group contains a MID='" && v123 > "A BUNDLE group contains a MID='")
            goto LABEL_802;
          qmemcpy(v121, "A BUNDLE group contains a MID='", 31);
          v125 = v119 >= 0 ? (char *)v58 : (char *)*v58;
          p_src = (unint64_t)&v123[v6];
          if (v125 >= v123 && p_src > (unint64_t)v125)
            goto LABEL_802;
          if (v6)
            memmove(v123, v125, v6);
          *(_BYTE *)p_src = 0;
          v126 = v738.__r_.__value_.__r.__words[2];
          if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v127 = 22;
          else
            v127 = (v738.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v128 = HIBYTE(v738.__r_.__value_.__r.__words[2]);
          else
            v128 = v738.__r_.__value_.__l.__size_;
          if (v127 - v128 >= 0x19)
          {
            v129 = &v738;
            if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v129 = (std::string *)v738.__r_.__value_.__r.__words[0];
            v130 = (char *)v129 + v128;
            if ((char *)v129 + v128 <= "' matching no m= section." && v130 + 25 > "' matching no m= section.")
              goto LABEL_802;
            qmemcpy(v130, "' matching no m= section.", 25);
            v131 = v128 + 25;
            if ((v126 & 0x8000000000000000) != 0)
              v738.__r_.__value_.__l.__size_ = v128 + 25;
            else
              *((_BYTE *)&v738.__r_.__value_.__s + 23) = v131 & 0x7F;
            v129->__r_.__value_.__s.__data_[v131] = 0;
          }
          else
          {
            std::string::__grow_by_and_replace(&v738, v127, v128 - v127 + 25, v128, v128, 0, 0x19uLL, "' matching no m= section.");
          }
          __src = v738;
          memset(&v738, 0, sizeof(v738));
          v132 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          {
            v6 = __src.__r_.__value_.__l.__size_;
            if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
              goto LABEL_802;
            p_src = __src.__r_.__value_.__r.__words[0];
            if (__src.__r_.__value_.__l.__size_)
            {
              if (!__src.__r_.__value_.__r.__words[0])
                goto LABEL_802;
            }
            *(_DWORD *)v748 = 3;
            if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_1662;
          }
          else
          {
            *(_DWORD *)v748 = 3;
            p_src = (unint64_t)&__src;
            v6 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
          }
          if (v6 > 0x16)
          {
            v135 = (v6 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v6 | 7) != 0x17)
              v135 = v6 | 7;
            v136 = v135 + 1;
            v133 = operator new(v135 + 1);
            *(_QWORD *)&v748[16] = v6;
            *(_QWORD *)&v748[24] = v136 | 0x8000000000000000;
            *(_QWORD *)&v748[8] = v133;
            v134 = &v133[v6];
            if ((unint64_t)v133 > p_src)
              goto LABEL_309;
          }
          else
          {
            v133 = &v748[8];
            v748[31] = v6;
            v134 = &v748[v6 + 8];
            if ((unint64_t)&v748[8] > p_src)
              goto LABEL_309;
          }
          goto LABEL_308;
        }
        v73 = v58[1];
        if ((p_src & 0x80u) == 0)
          v74 = *((unsigned __int8 *)v58 + 23);
        else
          v74 = v58[1];
        if ((p_src & 0x80u) == 0)
          v6 = (size_t)v58;
        else
          v6 = *v58;
        while (2)
        {
          v75 = *(unsigned __int8 *)(v71 + 23);
          if ((v75 & 0x80u) == 0)
            v76 = *(unsigned __int8 *)(v71 + 23);
          else
            v76 = *(_QWORD *)(v71 + 8);
          if (v76 != v74)
            goto LABEL_152;
          if ((v75 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v71, (const void *)v6, *(_QWORD *)(v71 + 8)))
              goto LABEL_163;
LABEL_152:
            v71 += 40;
            if (v71 == v72)
              goto LABEL_260;
            continue;
          }
          break;
        }
        if (*(_BYTE *)(v71 + 23))
        {
          v77 = 0;
          do
          {
            if (*(unsigned __int8 *)(v71 + v77) != *(unsigned __int8 *)(v6 + v77))
              goto LABEL_152;
            ++v77;
          }
          while (v75 != v77);
          if (!v71)
            goto LABEL_260;
        }
LABEL_163:
        v12 = v58 + 3;
      }
      while (v12 != *(std::string::size_type **)v717);
LABEL_171:
      v11 = *(_QWORD *)v712 + 8;
    }
    while (*(_QWORD *)v712 + 8 != size);
  }
  if (a3 != 2)
  {
    if (a3)
      goto LABEL_452;
    *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = 0uLL;
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src.__r_.__value_.__l.__size_;
    *(_OWORD *)&v738.__r_.__value_.__r.__words[1] = 0uLL;
    v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v738.__r_.__value_.__l.__size_;
    __sa = (char *)__p[0].__r_.__value_.__l.__size_;
    v79 = __p[0].__r_.__value_.__r.__words[0];
    if (__p[0].__r_.__value_.__r.__words[0] == __p[0].__r_.__value_.__l.__size_)
    {
      v137 = 0;
    }
    else
    {
      v80 = a1 + 912;
      v81 = (uint64_t **)(a1 + 920);
      do
      {
        v724 = v79;
        v82 = *(_QWORD *)v79;
        p_src = *(_QWORD *)(*(_QWORD *)v79 + 24);
        v83 = *(_QWORD *)(*(_QWORD *)v79 + 32);
        while (p_src != v83)
        {
          v86 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(v80, (const void **)p_src, *v81, (uint64_t *)v81);
          if (v81 == (uint64_t **)v86)
            goto LABEL_181;
          v6 = (size_t)v86;
          v87 = *(unsigned __int8 *)(p_src + 23);
          v88 = (uint64_t *)p_src;
          v89 = v87;
          if (*(char *)(p_src + 23) < 0)
          {
            v89 = *(_QWORD *)(p_src + 8);
            if ((v89 & 0x8000000000000000) != 0)
              goto LABEL_802;
            v88 = *(uint64_t **)p_src;
            if (v89)
            {
              if (!v88)
                goto LABEL_802;
            }
          }
          v90 = (_QWORD *)(v6 + 32);
          if (*(char *)(v6 + 55) < 0)
          {
            v91 = *(_QWORD *)(v6 + 40);
            if ((v91 & 0x8000000000000000) != 0)
              goto LABEL_802;
            v90 = (_QWORD *)*v90;
            if (v91 && v90 == 0)
              goto LABEL_802;
          }
          else
          {
            v91 = *(unsigned __int8 *)(v6 + 55);
          }
          if (v91 >= v89)
            v93 = v89;
          else
            v93 = v91;
          v94 = memcmp(v88, v90, v93);
          if (v94)
          {
            if (v94 < 0)
              goto LABEL_181;
          }
          else if (v89 < v91)
          {
            goto LABEL_181;
          }
          v6 = *(_QWORD *)(v6 + 56);
          if (!v6)
            goto LABEL_181;
          v95 = (std::string::size_type *)__src.__r_.__value_.__l.__size_;
          v96 = (std::string *)&__src.__r_.__value_.__r.__words[1];
          v97 = (std::string *)__src.__r_.__value_.__l.__size_;
          if (!__src.__r_.__value_.__l.__size_)
          {
            v103 = (uint64_t *)operator new(0x30uLL);
            v103[4] = v6;
            v103[5] = v82;
            p_size = &__src.__r_.__value_.__l.__size_;
            *v103 = 0;
            v103[1] = 0;
            v103[2] = (uint64_t)&__src.__r_.__value_.__l.__size_;
            __src.__r_.__value_.__l.__size_ = (std::string::size_type)v103;
            v107 = *(_QWORD *)__src.__r_.__value_.__l.__data_;
            if (!*(_QWORD *)__src.__r_.__value_.__l.__data_)
              goto LABEL_225;
            goto LABEL_224;
          }
          do
          {
            v98 = v97;
            v99 = v96;
            v100 = v97[1].__r_.__value_.__l.__size_;
            if (v100 >= v6)
              v96 = v97;
            else
              v97 = (std::string *)((char *)v97 + 8);
            v97 = (std::string *)v97->__r_.__value_.__r.__words[0];
          }
          while (v97);
          if (v96 != (std::string *)&__src.__r_.__value_.__r.__words[1])
          {
            v101 = v100 >= v6 ? v98 : v99;
            if (v6 >= v101[1].__r_.__value_.__l.__size_)
            {
              if (v100 < v6)
                v98 = v99;
              if (v98[1].__r_.__value_.__r.__words[2] != v82)
              {
                if ((v87 & 0x80u) == 0)
                  v6 = v87;
                else
                  v6 = *(_QWORD *)(p_src + 8);
                v231 = v6 + 4;
                if (v6 + 4 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_1662;
                a1 = v726;
                if (v231 > 0x16)
                {
                  v269 = (v231 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v231 | 7) != 0x17)
                    v269 = v231 | 7;
                  v270 = v269 + 1;
                  v232 = (char *)operator new(v269 + 1);
                  v736.__r_.__value_.__l.__size_ = v6 + 4;
                  v736.__r_.__value_.__r.__words[2] = v270 | 0x8000000000000000;
                  v736.__r_.__value_.__r.__words[0] = (std::string::size_type)v232;
                }
                else
                {
                  memset(&v736, 0, sizeof(v736));
                  v232 = (char *)&v736;
                  *((_BYTE *)&v736.__r_.__value_.__s + 23) = v6 + 4;
                }
                v271 = v232 + 4;
                if (v232 <= "MID " && v271 > "MID ")
                  goto LABEL_802;
                *(_DWORD *)v232 = 541346125;
                v272 = (v87 & 0x80u) == 0 ? (char *)p_src : *(char **)p_src;
                p_src = (unint64_t)&v271[v6];
                if (v272 >= v271 && p_src > (unint64_t)v272)
                  goto LABEL_802;
                if (v6)
                  memmove(v271, v272, v6);
                *(_BYTE *)p_src = 0;
                v273 = v736.__r_.__value_.__r.__words[2];
                if ((v736.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v274 = 22;
                else
                  v274 = (v736.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if ((v736.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v275 = HIBYTE(v736.__r_.__value_.__r.__words[2]);
                else
                  v275 = v736.__r_.__value_.__l.__size_;
                if (v274 - v275 >= 0x20)
                {
                  v276 = &v736;
                  if ((v736.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v276 = (std::string *)v736.__r_.__value_.__r.__words[0];
                  v277 = (char *)v276 + v275;
                  if ((char *)v276 + v275 <= " in the offer has changed group."
                    && v277 + 32 > " in the offer has changed group.")
                  {
                    goto LABEL_802;
                  }
                  qmemcpy(v277, " in the offer has changed group.", 32);
                  v278 = v275 + 32;
                  if ((v273 & 0x8000000000000000) != 0)
                    v736.__r_.__value_.__l.__size_ = v275 + 32;
                  else
                    *((_BYTE *)&v736.__r_.__value_.__s + 23) = v278 & 0x7F;
                  v276->__r_.__value_.__s.__data_[v278] = 0;
                }
                else
                {
                  std::string::__grow_by_and_replace(&v736, v274, v275 - v274 + 32, v275, v275, 0, 0x20uLL, " in the offer has changed group.");
                }
                __len = v736;
                memset(&v736, 0, sizeof(v736));
                v308 = HIBYTE(__len.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
                {
                  v6 = __len.__r_.__value_.__l.__size_;
                  if ((__len.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                    goto LABEL_802;
                  p_src = __len.__r_.__value_.__r.__words[0];
                  if (__len.__r_.__value_.__l.__size_)
                  {
                    if (!__len.__r_.__value_.__r.__words[0])
                      goto LABEL_802;
                  }
                  *(_DWORD *)v748 = 3;
                  if (__len.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_1662;
LABEL_785:
                  if (v6 > 0x16)
                  {
                    v311 = (v6 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v6 | 7) != 0x17)
                      v311 = v6 | 7;
                    v312 = v311 + 1;
                    v309 = operator new(v311 + 1);
                    *(_QWORD *)&v748[16] = v6;
                    *(_QWORD *)&v748[24] = v312 | 0x8000000000000000;
                    *(_QWORD *)&v748[8] = v309;
                    v310 = &v309[v6];
                    if ((unint64_t)v309 > p_src)
                      goto LABEL_792;
                  }
                  else
                  {
                    v309 = &v748[8];
                    v748[31] = v6;
                    v310 = &v748[v6 + 8];
                    if ((unint64_t)&v748[8] > p_src)
                    {
LABEL_792:
                      if (v6)
                        memmove(v309, (const void *)p_src, v6);
                      *v310 = 0;
                      *(_DWORD *)&v748[32] = 0;
                      v748[36] = 0;
                      v748[38] = 0;
                      if ((v308 & 0x80) != 0)
                      {
                        operator delete(__len.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v736.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v736.__r_.__value_.__l.__data_);
                      }
                      std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy((_QWORD *)v738.__r_.__value_.__l.__size_);
                      std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy((_QWORD *)__src.__r_.__value_.__l.__size_);
                      goto LABEL_861;
                    }
                  }
                  if ((unint64_t)v310 > p_src)
                    goto LABEL_802;
                  goto LABEL_792;
                }
LABEL_780:
                *(_DWORD *)v748 = 3;
                p_src = (unint64_t)&__len;
                v6 = v308;
                goto LABEL_785;
              }
            }
          }
          v102 = (uint64_t *)operator new(0x30uLL);
          v103 = v102;
          v102[4] = v6;
          v102[5] = v82;
          while (1)
          {
            while (1)
            {
              v104 = v95;
              v105 = v95[4];
              if (v6 >= v105)
                break;
              v95 = (std::string::size_type *)*v95;
              if (!*v104)
              {
                p_size = v104;
                *v102 = 0;
                v102[1] = 0;
                v102[2] = (uint64_t)v104;
                *v104 = (std::string::size_type)v102;
                v107 = *(_QWORD *)__src.__r_.__value_.__l.__data_;
                if (*(_QWORD *)__src.__r_.__value_.__l.__data_)
                  goto LABEL_224;
LABEL_225:
                std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)__src.__r_.__value_.__l.__size_, v103);
                ++__src.__r_.__value_.__r.__words[2];
                v108 = v738.__r_.__value_.__l.__size_;
                v109 = &v738.__r_.__value_.__l.__size_;
                v110 = &v738.__r_.__value_.__l.__size_;
                if (!v738.__r_.__value_.__l.__size_)
                  goto LABEL_178;
LABEL_231:
                v111 = (std::string *)&v738.__r_.__value_.__r.__words[1];
                v112 = (std::string *)v108;
                do
                {
                  v113 = v112;
                  v114 = v111;
                  v115 = v112[1].__r_.__value_.__l.__size_;
                  if (v115 >= v82)
                    v111 = v112;
                  else
                    v112 = (std::string *)((char *)v112 + 8);
                  v112 = (std::string *)v112->__r_.__value_.__r.__words[0];
                }
                while (v112);
                if (v111 == (std::string *)&v738.__r_.__value_.__r.__words[1])
                  goto LABEL_247;
                v116 = v115 >= v82 ? v113 : v114;
                if (v82 < v116[1].__r_.__value_.__l.__size_)
                  goto LABEL_247;
                if (v115 < v82)
                  v113 = v114;
                if (v113[1].__r_.__value_.__r.__words[2] == v6)
                {
LABEL_247:
                  while (1)
                  {
                    while (1)
                    {
                      v110 = (std::string::size_type *)v108;
                      v117 = *(_QWORD *)(v108 + 32);
                      if (v82 >= v117)
                        break;
                      v108 = *v110;
                      v109 = v110;
                      if (!*v110)
                        goto LABEL_178;
                    }
                    if (v117 >= v82)
                      goto LABEL_181;
                    v108 = v110[1];
                    if (!v108)
                    {
                      v109 = v110 + 1;
                      goto LABEL_178;
                    }
                  }
                }
                v233 = *(char *)(p_src + 23);
                if (v233 >= 0)
                  v6 = *(unsigned __int8 *)(p_src + 23);
                else
                  v6 = *(_QWORD *)(p_src + 8);
                v234 = v6 + 4;
                if (v6 + 4 <= 0x7FFFFFFFFFFFFFF7)
                {
                  a1 = v726;
                  if (v234 > 0x16)
                  {
                    v279 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v234 | 7) != 0x17)
                      v279 = v234 | 7;
                    v280 = v279 + 1;
                    v235 = (char *)operator new(v279 + 1);
                    v736.__r_.__value_.__l.__size_ = v6 + 4;
                    v736.__r_.__value_.__r.__words[2] = v280 | 0x8000000000000000;
                    v736.__r_.__value_.__r.__words[0] = (std::string::size_type)v235;
                  }
                  else
                  {
                    memset(&v736, 0, sizeof(v736));
                    v235 = (char *)&v736;
                    *((_BYTE *)&v736.__r_.__value_.__s + 23) = v6 + 4;
                  }
                  v281 = v235 + 4;
                  if (v235 <= "MID " && v281 > "MID ")
                    goto LABEL_802;
                  *(_DWORD *)v235 = 541346125;
                  v283 = v233 >= 0 ? (char *)p_src : *(char **)p_src;
                  p_src = (unint64_t)&v281[v6];
                  if (v283 >= v281 && p_src > (unint64_t)v283)
                    goto LABEL_802;
                  if (v6)
                    memmove(v281, v283, v6);
                  *(_BYTE *)p_src = 0;
                  v285 = v736.__r_.__value_.__r.__words[2];
                  if ((v736.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v286 = 22;
                  else
                    v286 = (v736.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if ((v736.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v287 = HIBYTE(v736.__r_.__value_.__r.__words[2]);
                  else
                    v287 = v736.__r_.__value_.__l.__size_;
                  if (v286 - v287 >= 0x20)
                  {
                    v288 = &v736;
                    if ((v736.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v288 = (std::string *)v736.__r_.__value_.__r.__words[0];
                    v289 = (char *)v288 + v287;
                    if ((char *)v288 + v287 <= " in the offer has changed group."
                      && v289 + 32 > " in the offer has changed group.")
                    {
                      goto LABEL_802;
                    }
                    qmemcpy(v289, " in the offer has changed group.", 32);
                    v290 = v287 + 32;
                    if ((v285 & 0x8000000000000000) != 0)
                      v736.__r_.__value_.__l.__size_ = v287 + 32;
                    else
                      *((_BYTE *)&v736.__r_.__value_.__s + 23) = v290 & 0x7F;
                    v288->__r_.__value_.__s.__data_[v290] = 0;
                  }
                  else
                  {
                    std::string::__grow_by_and_replace(&v736, v286, v287 - v286 + 32, v287, v287, 0, 0x20uLL, " in the offer has changed group.");
                  }
                  __len = v736;
                  memset(&v736, 0, sizeof(v736));
                  v308 = HIBYTE(__len.__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v6 = __len.__r_.__value_.__l.__size_;
                    if ((__len.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                      goto LABEL_802;
                    p_src = __len.__r_.__value_.__r.__words[0];
                    if (__len.__r_.__value_.__l.__size_)
                    {
                      if (!__len.__r_.__value_.__r.__words[0])
                        goto LABEL_802;
                    }
                    *(_DWORD *)v748 = 3;
                    if (__len.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
                      goto LABEL_1662;
                    goto LABEL_785;
                  }
                  goto LABEL_780;
                }
LABEL_1662:
                abort();
              }
            }
            if (v105 >= v6)
              break;
            v95 = (std::string::size_type *)v95[1];
            if (!v95)
            {
              p_size = v104 + 1;
              *v102 = 0;
              v102[1] = 0;
              v102[2] = (uint64_t)v104;
              v104[1] = (std::string::size_type)v102;
              v107 = *(_QWORD *)__src.__r_.__value_.__l.__data_;
              if (!*(_QWORD *)__src.__r_.__value_.__l.__data_)
                goto LABEL_225;
LABEL_224:
              __src.__r_.__value_.__r.__words[0] = v107;
              v103 = (uint64_t *)*p_size;
              goto LABEL_225;
            }
          }
          operator delete(v102);
          v108 = v738.__r_.__value_.__l.__size_;
          v109 = &v738.__r_.__value_.__l.__size_;
          v110 = &v738.__r_.__value_.__l.__size_;
          if (v738.__r_.__value_.__l.__size_)
            goto LABEL_231;
LABEL_178:
          v84 = (uint64_t *)operator new(0x30uLL);
          v84[4] = v82;
          v84[5] = v6;
          *v84 = 0;
          v84[1] = 0;
          v84[2] = (uint64_t)v110;
          *v109 = (std::string::size_type)v84;
          if (*(_QWORD *)v738.__r_.__value_.__l.__data_)
          {
            v738.__r_.__value_.__r.__words[0] = *(_QWORD *)v738.__r_.__value_.__l.__data_;
            v85 = (uint64_t *)*v109;
          }
          else
          {
            v85 = v84;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v738.__r_.__value_.__l.__size_, v85);
          ++v738.__r_.__value_.__r.__words[2];
LABEL_181:
          p_src += 24;
        }
        v79 = v724 + 8;
      }
      while ((char *)(v724 + 8) != __sa);
      v137 = (_QWORD *)v738.__r_.__value_.__l.__size_;
      a1 = v726;
    }
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v137);
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy((_QWORD *)__src.__r_.__value_.__l.__size_);
    goto LABEL_452;
  }
  if (a2)
    v118 = a5;
  else
    v118 = a4;
  if (v118)
  {
    if (a2)
    {
      v748[23] = 6;
      if (v748 <= "BUNDLE" && &v748[6] > "BUNDLE")
        goto LABEL_802;
      strcpy(v748, "BUNDLE");
      cricket::SessionDescription::GetGroupsByName(a5, (unsigned __int8 **)v748, &__src.__r_.__value_.__l.__data_);
      if ((v748[23] & 0x80000000) != 0)
LABEL_318:
        operator delete(*(void **)v748);
    }
    else
    {
      v748[23] = 6;
      if (v748 <= "BUNDLE" && &v748[6] > "BUNDLE")
        goto LABEL_802;
      strcpy(v748, "BUNDLE");
      cricket::SessionDescription::GetGroupsByName(a4, (unsigned __int8 **)v748, &__src.__r_.__value_.__l.__data_);
      if ((v748[23] & 0x80000000) != 0)
        goto LABEL_318;
    }
    *(_OWORD *)&v738.__r_.__value_.__r.__words[1] = 0uLL;
    v738.__r_.__value_.__r.__words[0] = (std::string::size_type)&v738.__r_.__value_.__l.__size_;
    v138 = __src.__r_.__value_.__l.__size_;
    v708 = __src.__r_.__value_.__l.__size_;
    for (i = __src.__r_.__value_.__r.__words[0]; ; i = *(_QWORD *)v713 + 8)
    {
      if (i == v138)
      {
        *(_OWORD *)&__len.__r_.__value_.__r.__words[1] = 0uLL;
        __len.__r_.__value_.__r.__words[0] = (std::string::size_type)&__len.__r_.__value_.__l.__size_;
        v164 = __p[0].__r_.__value_.__l.__size_;
        for (j = __p[0].__r_.__value_.__r.__words[0]; j != v164; j += 8)
        {
          v165 = *(_QWORD *)j;
          v166 = *(_QWORD **)(*(_QWORD *)j + 24);
          if (v166)
            v167 = v166 == *(_QWORD **)(*(_QWORD *)j + 32);
          else
            v167 = 1;
          if (!v167)
          {
            p_src = (unint64_t)&v738.__r_.__value_.__l.__size_;
            v168 = (std::string *)std::__tree<std::__value_type<std::string,cricket::ContentGroup const*>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::ContentGroup const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::ContentGroup const*>>>::__lower_bound<std::string>(*(const void ***)(*(_QWORD *)j + 24), (uint64_t *)v738.__r_.__value_.__l.__size_, (uint64_t *)&v738.__r_.__value_.__l.__size_);
            if (&v738.__r_.__value_.__r.__words[1] == (std::string::size_type *)v168)
              goto LABEL_798;
            v6 = (size_t)v168;
            if (*((char *)v166 + 23) < 0)
            {
              p_src = v166[1];
              if ((p_src & 0x8000000000000000) != 0)
                goto LABEL_802;
              v166 = (_QWORD *)*v166;
              if (p_src && v166 == 0)
                goto LABEL_802;
            }
            else
            {
              p_src = *((unsigned __int8 *)v166 + 23);
            }
            v170 = &v168[1].__r_.__value_.__l.__size_;
            if (v168[2].__r_.__value_.__s.__data_[7] < 0)
            {
              v171 = v168[1].__r_.__value_.__r.__words[2];
              if ((v171 & 0x8000000000000000) != 0)
                goto LABEL_802;
              v170 = (std::string::size_type *)*v170;
              if (v171 && v170 == 0)
                goto LABEL_802;
            }
            else
            {
              v171 = v168[2].__r_.__value_.__s.__data_[7];
            }
            if (v171 >= p_src)
              v173 = p_src;
            else
              v173 = v171;
            v174 = memcmp(v166, v170, v173);
            if (v174)
            {
              if (v174 < 0)
                goto LABEL_798;
            }
            else if (p_src < v171)
            {
LABEL_798:
              *(_DWORD *)v748 = 3;
              v313 = (char *)operator new(0x48uLL);
              *(_QWORD *)&v748[8] = v313;
              *(_OWORD *)&v748[16] = xmmword_208F0B400;
              if (v313 <= "A BUNDLE group was added in the answer that did not exist in the offer."
                && v313 + 71 > "A BUNDLE group was added in the answer that did not exist in the offer.")
              {
                goto LABEL_802;
              }
              v6 = 0;
              strcpy(v313, "A BUNDLE group was added in the answer that did not exist in the offer.");
LABEL_801:
              *(_DWORD *)&v748[32] = 0;
              v748[36] = 0;
              v748[38] = 0;
              a1 = v726;
              goto LABEL_858;
            }
            v175 = *(_QWORD *)(v6 + 56);
            v176 = __len.__r_.__value_.__l.__size_;
            p_src = (unint64_t)&__len.__r_.__value_.__l.__size_;
            v6 = (size_t)&__len.__r_.__value_.__l.__size_;
            if (__len.__r_.__value_.__l.__size_)
            {
              v177 = (std::string *)&__len.__r_.__value_.__r.__words[1];
              v178 = (std::string *)__len.__r_.__value_.__l.__size_;
              do
              {
                v179 = v178;
                v180 = v177;
                v181 = v178[1].__r_.__value_.__l.__size_;
                if (v181 >= v175)
                  v177 = v178;
                else
                  v178 = (std::string *)((char *)v178 + 8);
                v178 = (std::string *)v178->__r_.__value_.__r.__words[0];
              }
              while (v178);
              if (v177 != (std::string *)&__len.__r_.__value_.__r.__words[1])
              {
                if (v181 < v175)
                  v179 = v180;
                if (v175 >= v179[1].__r_.__value_.__l.__size_)
                {
                  *(_DWORD *)v748 = 3;
                  v693 = (char *)operator new(0x28uLL);
                  *(_QWORD *)&v748[8] = v693;
                  *(_OWORD *)&v748[16] = xmmword_208F08680;
                  if (v693 <= "A MID in the answer has changed group."
                    && v693 + 38 > "A MID in the answer has changed group.")
                  {
                    goto LABEL_802;
                  }
                  v6 = 0;
                  strcpy(v693, "A MID in the answer has changed group.");
                  goto LABEL_801;
                }
              }
              do
              {
                while (1)
                {
                  v6 = v176;
                  v182 = *(_QWORD *)(v176 + 32);
                  if (v175 >= v182)
                    break;
                  v176 = *(_QWORD *)v6;
                  p_src = v6;
                  if (!*(_QWORD *)v6)
                    goto LABEL_415;
                }
                if (v182 >= v175)
                  goto LABEL_419;
                v176 = *(_QWORD *)(v6 + 8);
              }
              while (v176);
              p_src = v6 + 8;
            }
LABEL_415:
            v183 = (uint64_t *)operator new(0x30uLL);
            v183[4] = v175;
            v183[5] = v165;
            *v183 = 0;
            v183[1] = 0;
            v183[2] = v6;
            *(_QWORD *)p_src = v183;
            if (*(_QWORD *)__len.__r_.__value_.__l.__data_)
            {
              __len.__r_.__value_.__r.__words[0] = *(_QWORD *)__len.__r_.__value_.__l.__data_;
              v184 = *(uint64_t **)p_src;
            }
            else
            {
              v184 = v183;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)__len.__r_.__value_.__l.__size_, v184);
            ++__len.__r_.__value_.__r.__words[2];
LABEL_419:
            v6 = *(_QWORD *)(v165 + 24);
            p_src = *(_QWORD *)(v165 + 32);
            if (v6 != p_src)
            {
              while (1)
              {
                v185 = (std::string *)std::__tree<std::__value_type<std::string,cricket::ContentGroup const*>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::ContentGroup const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::ContentGroup const*>>>::__lower_bound<std::string>((const void **)v6, (uint64_t *)v738.__r_.__value_.__l.__size_, (uint64_t *)&v738.__r_.__value_.__l.__size_);
                if (&v738.__r_.__value_.__r.__words[1] == (std::string::size_type *)v185)
                  break;
                v186 = v185;
                v187 = *(char *)(v6 + 23);
                if (v187 < 0)
                {
                  v188 = *(_QWORD *)(v6 + 8);
                  if ((v188 & 0x8000000000000000) != 0)
                    goto LABEL_802;
                  v189 = *(const void **)v6;
                  if (v188)
                  {
                    if (!v189)
                      goto LABEL_802;
                  }
                }
                else
                {
                  v188 = *(unsigned __int8 *)(v6 + 23);
                  v189 = (const void *)v6;
                }
                v190 = &v186[1].__r_.__value_.__l.__size_;
                if (v186[2].__r_.__value_.__s.__data_[7] < 0)
                {
                  v191 = v186[1].__r_.__value_.__r.__words[2];
                  if ((v191 & 0x8000000000000000) != 0)
                    goto LABEL_802;
                  v190 = (std::string::size_type *)*v190;
                  if (v191 && v190 == 0)
                    goto LABEL_802;
                }
                else
                {
                  v191 = v186[2].__r_.__value_.__s.__data_[7];
                }
                if (v191 >= v188)
                  v193 = v188;
                else
                  v193 = v191;
                v194 = memcmp(v189, v190, v193);
                if (v194)
                {
                  a1 = v726;
                  if (v194 < 0)
                    goto LABEL_732;
                }
                else
                {
                  v36 = v188 >= v191;
                  a1 = v726;
                  if (!v36)
                    goto LABEL_732;
                }
                if (v186[2].__r_.__value_.__l.__size_ != v175)
                  goto LABEL_732;
                v6 += 24;
                if (v6 == p_src)
                  goto LABEL_371;
              }
              LOBYTE(v187) = *(_BYTE *)(v6 + 23);
              a1 = v726;
LABEL_732:
              v293 = (char)v187;
              if ((v187 & 0x80u) == 0)
                p_src = v187;
              else
                p_src = *(_QWORD *)(v6 + 8);
              v294 = p_src + 41;
              if (p_src + 41 <= 0x7FFFFFFFFFFFFFF7)
              {
                if (v294 > 0x16)
                {
                  v296 = (v294 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v294 | 7) != 0x17)
                    v296 = v294 | 7;
                  v297 = v296 + 1;
                  v295 = (char *)operator new(v296 + 1);
                  v735.__r_.__value_.__l.__size_ = p_src + 41;
                  v735.__r_.__value_.__r.__words[2] = v297 | 0x8000000000000000;
                  v735.__r_.__value_.__r.__words[0] = (std::string::size_type)v295;
                }
                else
                {
                  memset(&v735, 0, sizeof(v735));
                  v295 = (char *)&v735;
                  *((_BYTE *)&v735.__r_.__value_.__s + 23) = p_src + 41;
                }
                v298 = v295 + 41;
                if (v295 <= "A BUNDLE group in answer contains a MID='"
                  && v298 > "A BUNDLE group in answer contains a MID='")
                {
                  goto LABEL_802;
                }
                qmemcpy(v295, "A BUNDLE group in answer contains a MID='", 41);
                v300 = v293 >= 0 ? (char *)v6 : *(char **)v6;
                v6 = (size_t)&v298[p_src];
                if (v300 >= v298 && v6 > (unint64_t)v300)
                  goto LABEL_802;
                if (p_src)
                  memmove(v298, v300, p_src);
                *(_BYTE *)v6 = 0;
                v302 = v735.__r_.__value_.__r.__words[2];
                if ((v735.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v303 = 22;
                else
                  v303 = (v735.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if ((v735.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v304 = HIBYTE(v735.__r_.__value_.__r.__words[2]);
                else
                  v304 = v735.__r_.__value_.__l.__size_;
                if (v303 - v304 < 0x24)
                {
                  std::string::__grow_by_and_replace(&v735, v303, v304 - v303 + 36, v304, v304, 0, 0x24uLL, "' that was not in the offered group.");
                  goto LABEL_839;
                }
                v305 = &v735;
                if ((v735.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v305 = (std::string *)v735.__r_.__value_.__r.__words[0];
                v306 = (char *)v305 + v304;
                if ((char *)v305 + v304 <= "' that was not in the offered group."
                  && v306 + 36 > "' that was not in the offered group.")
                {
                  goto LABEL_802;
                }
                qmemcpy(v306, "' that was not in the offered group.", 36);
                v307 = v304 + 36;
                if ((v302 & 0x8000000000000000) != 0)
                  goto LABEL_837;
                goto LABEL_767;
              }
              goto LABEL_1662;
            }
          }
LABEL_371:
          ;
        }
        a1 = v726;
        v250 = *(_QWORD *)(v726 + 864);
        v251 = *(_QWORD *)(v726 + 872);
        if (v250 == v251)
        {
          v6 = 1;
          goto LABEL_858;
        }
        while (2)
        {
          v6 = *(_QWORD *)(*(_QWORD *)v250 + 24);
          v252 = *(_QWORD *)(*(_QWORD *)v250 + 32);
LABEL_617:
          if (v6 == v252)
          {
            v250 += 8;
            v6 = 1;
            if (v250 == v251)
              goto LABEL_858;
            continue;
          }
          break;
        }
        v253 = std::__tree<std::__value_type<std::string,cricket::ContentGroup const*>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::ContentGroup const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::ContentGroup const*>>>::__lower_bound<std::string>((const void **)v6, *(uint64_t **)&v741[8], (uint64_t *)&v741[8]);
        if (&v741[8] != (_BYTE *)v253)
        {
          v254 = v253;
          if (*(char *)(v6 + 23) < 0)
          {
            p_src = *(_QWORD *)(v6 + 8);
            if ((p_src & 0x8000000000000000) != 0)
              goto LABEL_802;
            v255 = *(const void **)v6;
            if (p_src)
            {
              if (!v255)
                goto LABEL_802;
            }
          }
          else
          {
            p_src = *(unsigned __int8 *)(v6 + 23);
            v255 = (const void *)v6;
          }
          v256 = v254 + 4;
          if (*((char *)v254 + 55) < 0)
          {
            v257 = v254[5];
            if ((v257 & 0x8000000000000000) != 0)
              goto LABEL_802;
            v256 = (_QWORD *)*v256;
            if (v257 && v256 == 0)
              goto LABEL_802;
          }
          else
          {
            v257 = *((unsigned __int8 *)v254 + 55);
          }
          if (v257 >= p_src)
            v259 = p_src;
          else
            v259 = v257;
          v260 = memcmp(v255, v256, v259);
          if (v260)
          {
            if ((v260 & 0x80000000) == 0)
              goto LABEL_616;
          }
          else if (p_src >= v257)
          {
            goto LABEL_616;
          }
        }
        v261 = *v725;
        v262 = v725[1];
        p_src = *(unsigned __int8 *)(v6 + 23);
        if (*v725 == v262)
          goto LABEL_803;
        v263 = *(_QWORD *)(v6 + 8);
        if ((p_src & 0x80u) == 0)
          v264 = *(unsigned __int8 *)(v6 + 23);
        else
          v264 = *(_QWORD *)(v6 + 8);
        if ((p_src & 0x80u) == 0)
          v265 = (unsigned __int8 *)v6;
        else
          v265 = *(unsigned __int8 **)v6;
        while (1)
        {
          v266 = *(unsigned __int8 *)(v261 + 23);
          if ((v266 & 0x80u) == 0)
            v267 = *(unsigned __int8 *)(v261 + 23);
          else
            v267 = *(_QWORD *)(v261 + 8);
          if (v267 == v264)
          {
            if ((v266 & 0x80) == 0)
            {
              if (*(_BYTE *)(v261 + 23))
              {
                v268 = 0;
                do
                {
                  if (*(unsigned __int8 *)(v261 + v268) != v265[v268])
                    goto LABEL_646;
                  ++v268;
                }
                while (v266 != v268);
                if (!v261)
                  goto LABEL_804;
              }
LABEL_615:
              a1 = v726;
              if (!*(_BYTE *)(v261 + 28))
                goto LABEL_805;
LABEL_616:
              v6 += 24;
              goto LABEL_617;
            }
            if (!memcmp(*(const void **)v261, v265, *(_QWORD *)(v261 + 8)))
              goto LABEL_615;
          }
LABEL_646:
          v261 += 40;
          if (v261 == v262)
            goto LABEL_804;
        }
      }
      *(_QWORD *)v713 = i;
      __sb = *(char **)i;
      v141 = *(__int128 **)(*(_QWORD *)i + 24);
      v140 = *(__int128 **)(*(_QWORD *)i + 32);
      *(_QWORD *)v718 = v140;
LABEL_325:
      if (v141 != v140)
        break;
      v138 = v708;
    }
    v142 = v738.__r_.__value_.__l.__size_;
    v143 = &v738.__r_.__value_.__l.__size_;
    v144 = &v738.__r_.__value_.__l.__size_;
    if (!v738.__r_.__value_.__l.__size_)
      goto LABEL_364;
    p_src = *((unsigned __int8 *)v141 + 23);
    v145 = *(const std::string::value_type **)v141;
    v146 = *((_QWORD *)v141 + 1);
    if (v146)
      v147 = v145 == 0;
    else
      v147 = 0;
    v148 = !v147;
    while (1)
    {
      v143 = (std::string::size_type *)v142;
      v149 = (const std::string::value_type *)v141;
      v150 = p_src;
      if ((p_src & 0x80) != 0)
      {
        if ((v146 & 0x8000000000000000) != 0)
          goto LABEL_802;
        v149 = v145;
        v150 = v146;
        if ((v148 & 1) == 0)
          goto LABEL_802;
      }
      v6 = v142 + 32;
      v151 = *(unsigned __int8 *)(v142 + 55);
      v152 = (const void *)(v142 + 32);
      v153 = v151;
      if (*(char *)(v142 + 55) < 0)
      {
        v153 = *(_QWORD *)(v142 + 40);
        if ((v153 & 0x8000000000000000) != 0)
          goto LABEL_802;
        v152 = *(const void **)v6;
        if (v153)
        {
          if (!v152)
            goto LABEL_802;
        }
      }
      if (v153 >= v150)
        v154 = v150;
      else
        v154 = v153;
      v155 = memcmp(v149, v152, v154);
      if (v155)
      {
        if (v155 < 0)
          goto LABEL_333;
LABEL_348:
        if ((v151 & 0x80) != 0)
        {
          v151 = v143[5];
          if ((v151 & 0x8000000000000000) != 0)
            goto LABEL_802;
          v6 = *(_QWORD *)v6;
          if (v151)
          {
            if (!v6)
              goto LABEL_802;
          }
        }
        v156 = (const std::string::value_type *)v141;
        v157 = p_src;
        if ((p_src & 0x80) != 0)
        {
          if ((v146 & 0x8000000000000000) != 0)
            goto LABEL_802;
          v156 = v145;
          v157 = v146;
          if ((v148 & 1) == 0)
            goto LABEL_802;
        }
        if (v157 >= v151)
          v158 = v151;
        else
          v158 = v157;
        v159 = memcmp((const void *)v6, v156, v158);
        if (v159)
        {
          if ((v159 & 0x80000000) == 0)
            goto LABEL_369;
        }
        else if (v151 >= v157)
        {
LABEL_369:
          v6 = (size_t)v143;
          goto LABEL_324;
        }
        v142 = v143[1];
        if (!v142)
        {
          v144 = v143 + 1;
LABEL_364:
          v6 = (size_t)operator new(0x40uLL);
          v160 = (std::string *)(v6 + 32);
          if (*((char *)v141 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v160, *(const std::string::value_type **)v141, *((_QWORD *)v141 + 1));
          }
          else
          {
            v161 = *v141;
            *(_QWORD *)(v6 + 48) = *((_QWORD *)v141 + 2);
            *(_OWORD *)&v160->__r_.__value_.__l.__data_ = v161;
          }
          *(_QWORD *)(v6 + 56) = 0;
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          *(_QWORD *)(v6 + 16) = v143;
          *v144 = v6;
          v162 = (uint64_t *)v6;
          if (*(_QWORD *)v738.__r_.__value_.__l.__data_)
          {
            v738.__r_.__value_.__r.__words[0] = *(_QWORD *)v738.__r_.__value_.__l.__data_;
            v162 = (uint64_t *)*v144;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v738.__r_.__value_.__l.__size_, v162);
          ++v738.__r_.__value_.__r.__words[2];
LABEL_324:
          *(_QWORD *)(v6 + 56) = __sb;
          v141 = (__int128 *)((char *)v141 + 24);
          v140 = *(__int128 **)v718;
          goto LABEL_325;
        }
      }
      else
      {
        if (v150 >= v153)
          goto LABEL_348;
LABEL_333:
        v142 = *v143;
        v144 = v143;
        if (!*v143)
          goto LABEL_364;
      }
    }
  }
  while (1)
  {
LABEL_452:
    if (*(_DWORD *)(a1 + 544) == 1)
    {
      *((_BYTE *)&__src.__r_.__value_.__s + 23) = 6;
      if (&__src <= (std::string *)"BUNDLE" && (char *)__src.__r_.__value_.__r.__words + 6 > "BUNDLE")
        goto LABEL_802;
      LODWORD(__src.__r_.__value_.__l.__data_) = (_DWORD)v705;
      WORD2(__src.__r_.__value_.__r.__words[0]) = (_WORD)v704;
      __src.__r_.__value_.__s.__data_[6] = 0;
      v6 = v725[6];
      v197 = v725[7];
      if (v6 != v197)
      {
        p_src = (unint64_t)&__src;
        do
        {
          v198 = *(unsigned __int8 *)(v6 + 23);
          if ((v198 & 0x80u) == 0)
            v199 = *(unsigned __int8 *)(v6 + 23);
          else
            v199 = *(_QWORD *)(v6 + 8);
          if (v199 == 6)
          {
            if ((v198 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v6, &__src, *(_QWORD *)(v6 + 8)))
                goto LABEL_473;
            }
            else
            {
              if (!*(_BYTE *)(v6 + 23))
                goto LABEL_473;
              v200 = 0;
              while (*(unsigned __int8 *)(v6 + v200) == __src.__r_.__value_.__s.__data_[v200])
              {
                if (v198 == ++v200)
                  goto LABEL_473;
              }
            }
          }
          v6 += 48;
        }
        while (v6 != v197);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v725[1] - *v725) >> 3) >= 2)
      {
        *(_DWORD *)v748 = 3;
        v201 = (char *)operator new(0x30uLL);
        *(_QWORD *)&v748[8] = v201;
        *(_OWORD *)&v748[16] = xmmword_208F08640;
        if (v201 <= "max-bundle is used but no bundle group found."
          && v201 + 45 > "max-bundle is used but no bundle group found.")
        {
          goto LABEL_802;
        }
        strcpy(v201, "max-bundle is used but no bundle group found.");
        *(_DWORD *)&v748[32] = 0;
        v748[36] = 0;
        v748[38] = 0;
        goto LABEL_861;
      }
    }
LABEL_473:
    webrtc::BundleManager::Update(a1 + 856, (uint64_t)v725, a3);
    v202 = *(_QWORD *)(a1 + 864);
    v203 = *(_QWORD *)(a1 + 872);
    while (1)
    {
      if (v202 == v203)
      {
        *(_DWORD *)v748 = 0;
        v748[38] = 0;
        memset(&v748[8], 0, 29);
LABEL_530:
        a1 = v726;
        goto LABEL_861;
      }
      v204 = *(_QWORD *)(*(_QWORD *)v202 + 24);
      v205 = *(_QWORD *)(*(_QWORD *)v202 + 32);
      if (v204 && v204 != v205)
        break;
LABEL_474:
      v202 += 8;
    }
    p_src = v725[1];
    v207 = *v725;
    if (*v725 == p_src)
      goto LABEL_527;
    v208 = *(_BYTE *)(v204 + 23);
    if (v208 >= 0)
      v209 = *(unsigned __int8 *)(v204 + 23);
    else
      v209 = *(_QWORD *)(v204 + 8);
    if (v208 >= 0)
      v6 = *(_QWORD *)(*(_QWORD *)v202 + 24);
    else
      v6 = *(_QWORD *)v204;
    v210 = *v725;
    while (2)
    {
      v211 = *(unsigned __int8 *)(v210 + 23);
      if ((v211 & 0x80u) == 0)
        v212 = *(unsigned __int8 *)(v210 + 23);
      else
        v212 = *(_QWORD *)(v210 + 8);
      if (v212 != v209)
        goto LABEL_489;
      if ((v211 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v210, (const void *)v6, *(_QWORD *)(v210 + 8)))
          goto LABEL_500;
LABEL_489:
        v210 += 40;
        if (v210 == p_src)
          goto LABEL_527;
        continue;
      }
      break;
    }
    if (*(_BYTE *)(v210 + 23))
    {
      v213 = 0;
      do
      {
        if (*(unsigned __int8 *)(v210 + v213) != *(unsigned __int8 *)(v6 + v213))
          goto LABEL_489;
        ++v213;
      }
      while (v211 != v213);
      if (!v210)
      {
LABEL_527:
        *(_DWORD *)v748 = 3;
        v222 = (char *)operator new(0x40uLL);
        *(_QWORD *)&v748[8] = v222;
        *(_OWORD *)&v748[16] = xmmword_208F0ABB0;
        if (v222 <= "An m= section associated with the BUNDLE-tag doesn't exist."
          && v222 + 59 > "An m= section associated with the BUNDLE-tag doesn't exist.")
        {
          goto LABEL_802;
        }
        strcpy(v222, "An m= section associated with the BUNDLE-tag doesn't exist.");
        *(_DWORD *)&v748[32] = 0;
        v748[36] = 0;
        v748[38] = 0;
        goto LABEL_530;
      }
    }
LABEL_500:
    if (!*(_BYTE *)(v210 + 28))
      goto LABEL_474;
    while (2)
    {
      v214 = *(char *)(v204 + 23);
      if (v214 >= 0)
        v6 = *(unsigned __int8 *)(v204 + 23);
      else
        v6 = *(_QWORD *)(v204 + 8);
      if (v214 >= 0)
        p_src = v204;
      else
        p_src = *(_QWORD *)v204;
      v215 = v207;
      while (2)
      {
        v216 = *(unsigned __int8 *)(v215 + 23);
        if ((v216 & 0x80u) == 0)
          v217 = *(unsigned __int8 *)(v215 + 23);
        else
          v217 = *(_QWORD *)(v215 + 8);
        if (v217 != v6)
        {
LABEL_509:
          v215 += 40;
          continue;
        }
        break;
      }
      if ((v216 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v215, (const void *)p_src, *(_QWORD *)(v215 + 8)))
          goto LABEL_519;
        goto LABEL_509;
      }
      if (*(_BYTE *)(v215 + 23))
      {
        v218 = 0;
        while (*(unsigned __int8 *)(v215 + v218) == *(unsigned __int8 *)(p_src + v218))
        {
          if (v216 == ++v218)
            goto LABEL_519;
        }
        goto LABEL_509;
      }
LABEL_519:
      if (*(_BYTE *)(v215 + 28))
      {
        v204 += 24;
        if (v204 == v205)
          goto LABEL_474;
        continue;
      }
      break;
    }
    v219 = v6 + 25;
    if (v6 + 25 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1662;
    if (v219 <= 0x16)
    {
      memset(&v738, 0, sizeof(v738));
      v220 = (char *)&v738;
      *((_BYTE *)&v738.__r_.__value_.__s + 23) = v6 + 25;
      a1 = v726;
      v221 = v739;
      if (&v738 > (std::string *)"The m= section with mid='")
        goto LABEL_535;
LABEL_534:
      if (v221 <= "The m= section with mid='")
        goto LABEL_535;
      goto LABEL_802;
    }
    v223 = (v219 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v219 | 7) != 0x17)
      v223 = v219 | 7;
    p_src = v223 + 1;
    v220 = (char *)operator new(v223 + 1);
    v738.__r_.__value_.__l.__size_ = v6 + 25;
    v738.__r_.__value_.__r.__words[2] = p_src | 0x8000000000000000;
    v738.__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
    a1 = v726;
    v221 = v220 + 25;
    if (v220 <= "The m= section with mid='")
      goto LABEL_534;
LABEL_535:
    qmemcpy(v220, "The m= section with mid='", 25);
    v224 = v214 >= 0 ? (char *)v204 : *(char **)v204;
    v225 = &v221[v6];
    if (v224 < v221 || v225 <= v224)
      break;
LABEL_802:
    while (2)
    {
      while (2)
      {
        while (2)
        {
          while (2)
          {
            while (2)
            {
              __break(1u);
LABEL_803:
              v263 = *(_QWORD *)(v6 + 8);
LABEL_804:
              a1 = v726;
LABEL_805:
              v314 = (char)p_src;
              if ((p_src & 0x80u) != 0)
                p_src = v263;
              v315 = p_src + 42;
              if (p_src + 42 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_1662;
              if (v315 > 0x16)
              {
                v317 = (v315 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v315 | 7) != 0x17)
                  v317 = v315 | 7;
                v318 = v317 + 1;
                v316 = (char *)operator new(v317 + 1);
                v735.__r_.__value_.__l.__size_ = p_src + 42;
                v735.__r_.__value_.__r.__words[2] = v318 | 0x8000000000000000;
                v735.__r_.__value_.__r.__words[0] = (std::string::size_type)v316;
              }
              else
              {
                memset(&v735, 0, sizeof(v735));
                v316 = (char *)&v735;
                *((_BYTE *)&v735.__r_.__value_.__s + 23) = p_src + 42;
              }
              v319 = v316 + 42;
              if (v316 <= "Answer cannot remove m= section with mid='"
                && v319 > "Answer cannot remove m= section with mid='")
              {
                continue;
              }
              break;
            }
            qmemcpy(v316, "Answer cannot remove m= section with mid='", 42);
            v321 = v314 >= 0 ? (char *)v6 : *(char **)v6;
            v6 = (size_t)&v319[p_src];
            if (v321 >= v319 && v6 > (unint64_t)v321)
              continue;
            break;
          }
          if (p_src)
            memmove(v319, v321, p_src);
          *(_BYTE *)v6 = 0;
          v322 = v735.__r_.__value_.__r.__words[2];
          if ((v735.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v323 = 22;
          else
            v323 = (v735.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v735.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v324 = HIBYTE(v735.__r_.__value_.__r.__words[2]);
          else
            v324 = v735.__r_.__value_.__l.__size_;
          if (v323 - v324 >= 0x28)
          {
            v305 = &v735;
            if ((v735.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v305 = (std::string *)v735.__r_.__value_.__r.__words[0];
            v325 = (char *)v305 + v324;
            if ((char *)v305 + v324 <= "' from already-established BUNDLE group."
              && v325 + 40 > "' from already-established BUNDLE group.")
            {
              continue;
            }
            qmemcpy(v325, "' from already-established BUNDLE group.", 40);
            v307 = v324 + 40;
            if ((v322 & 0x8000000000000000) != 0)
LABEL_837:
              v735.__r_.__value_.__l.__size_ = v307;
            else
LABEL_767:
              *((_BYTE *)&v735.__r_.__value_.__s + 23) = v307 & 0x7F;
            v305->__r_.__value_.__s.__data_[v307] = 0;
          }
          else
          {
            std::string::__grow_by_and_replace(&v735, v323, v324 - v323 + 40, v324, v324, 0, 0x28uLL, "' from already-established BUNDLE group.");
          }
          break;
        }
LABEL_839:
        v736 = v735;
        memset(&v735, 0, sizeof(v735));
        v326 = HIBYTE(v736.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v736.__r_.__value_.__r.__words[2]) < 0)
        {
          v6 = v736.__r_.__value_.__l.__size_;
          if ((v736.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            continue;
          p_src = v736.__r_.__value_.__r.__words[0];
          if (v736.__r_.__value_.__l.__size_)
          {
            if (!v736.__r_.__value_.__r.__words[0])
              continue;
          }
          *(_DWORD *)v748 = 3;
          if (v736.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1662;
        }
        else
        {
          *(_DWORD *)v748 = 3;
          p_src = (unint64_t)&v736;
          v6 = HIBYTE(v736.__r_.__value_.__r.__words[2]);
        }
        break;
      }
      if (v6 > 0x16)
      {
        v328 = (v6 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v328 = v6 | 7;
        v329 = v328 + 1;
        v327 = operator new(v328 + 1);
        *(_QWORD *)&v748[16] = v6;
        *(_QWORD *)&v748[24] = v329 | 0x8000000000000000;
        *(_QWORD *)&v748[8] = v327;
      }
      else
      {
        v327 = &v748[8];
        v748[31] = v6;
      }
      v330 = &v327[v6];
      if ((unint64_t)v327 <= p_src && (unint64_t)v330 > p_src)
        continue;
      break;
    }
    if (v6)
      memmove(v327, (const void *)p_src, v6);
    *v330 = 0;
    *(_DWORD *)&v748[32] = 0;
    v748[36] = 0;
    v748[38] = 0;
    if (v326 < 0)
    {
      operator delete(v736.__r_.__value_.__l.__data_);
      if (SHIBYTE(v735.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v735.__r_.__value_.__l.__data_);
    }
    v6 = 0;
LABEL_858:
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy((_QWORD *)__len.__r_.__value_.__l.__size_);
    std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v738, (char *)v738.__r_.__value_.__l.__size_);
    if (__src.__r_.__value_.__r.__words[0])
    {
      __src.__r_.__value_.__l.__size_ = __src.__r_.__value_.__r.__words[0];
      operator delete(__src.__r_.__value_.__l.__data_);
    }
    if (!(_DWORD)v6)
      goto LABEL_861;
  }
  if (v6)
    memmove(v221, v224, v6);
  *v225 = 0;
  if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v226 = 22;
  else
    v226 = (v738.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v227 = HIBYTE(v738.__r_.__value_.__r.__words[2]);
  else
    v227 = v738.__r_.__value_.__l.__size_;
  if (v226 - v227 >= 0x15)
  {
    v228 = &v738;
    if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v228 = (std::string *)v738.__r_.__value_.__r.__words[0];
    v229 = (char *)v228 + v227;
    if ((char *)v228 + v227 <= "' should be rejected." && v229 + 21 > "' should be rejected.")
      goto LABEL_802;
    qmemcpy(v229, "' should be rejected.", 21);
    v230 = v227 + 21;
    if (SHIBYTE(v738.__r_.__value_.__r.__words[2]) < 0)
      v738.__r_.__value_.__l.__size_ = v227 + 21;
    else
      *((_BYTE *)&v738.__r_.__value_.__s + 23) = v230 & 0x7F;
    v228->__r_.__value_.__s.__data_[v230] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v738, v226, v227 - v226 + 21, v227, v227, 0, 0x15uLL, "' should be rejected.");
  }
  __src = v738;
  memset(&v738, 0, sizeof(v738));
  v245 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *(_DWORD *)v748 = 3;
    p_src = (unint64_t)&__src;
    v6 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    goto LABEL_602;
  }
  v6 = __src.__r_.__value_.__l.__size_;
  if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_802;
  p_src = __src.__r_.__value_.__r.__words[0];
  if (__src.__r_.__value_.__l.__size_)
  {
    if (!__src.__r_.__value_.__r.__words[0])
      goto LABEL_802;
  }
  *(_DWORD *)v748 = 3;
  if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_1662;
LABEL_602:
  if (v6 > 0x16)
  {
    v248 = (v6 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v248 = v6 | 7;
    v249 = v248 + 1;
    v246 = operator new(v248 + 1);
    *(_QWORD *)&v748[16] = v6;
    *(_QWORD *)&v748[24] = v249 | 0x8000000000000000;
    *(_QWORD *)&v748[8] = v246;
    v247 = &v246[v6];
    if ((unint64_t)v246 <= p_src)
      goto LABEL_608;
  }
  else
  {
    v246 = &v748[8];
    v748[31] = v6;
    v247 = &v748[v6 + 8];
    if ((unint64_t)&v748[8] > p_src)
      goto LABEL_609;
LABEL_608:
    if ((unint64_t)v247 > p_src)
      goto LABEL_802;
  }
LABEL_609:
  if (v6)
    memmove(v246, (const void *)p_src, v6);
  *v247 = 0;
  *(_DWORD *)&v748[32] = 0;
  v748[36] = 0;
  v748[38] = 0;
  if (v245 < 0)
  {
LABEL_312:
    operator delete(__src.__r_.__value_.__l.__data_);
    if (SHIBYTE(v738.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v738.__r_.__value_.__l.__data_);
  }
LABEL_861:
  v6 = (size_t)&v732;
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)v741, *(char **)&v741[8]);
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  v732 = *(_OWORD *)&v748[8];
  v733 = *(std::string::pointer *)&v748[24];
  *(_DWORD *)v734 = *(_DWORD *)&v748[32];
  *(_DWORD *)&v734[3] = *(_DWORD *)&v748[35];
  if (*(_DWORD *)v748)
  {
    *(_DWORD *)a6 = *(_DWORD *)v748;
    *(_OWORD *)(a6 + 8) = v732;
    *(_QWORD *)(a6 + 24) = v733;
    *(_DWORD *)(a6 + 32) = *(_DWORD *)v734;
    *(_DWORD *)(a6 + 35) = *(_DWORD *)&v734[3];
    return;
  }
  *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = 0uLL;
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src.__r_.__value_.__l.__size_;
  if (*(_QWORD *)(a1 + 864) != *(_QWORD *)(a1 + 872))
  {
    p_src = *v725;
    v331 = v725[1];
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = 0uLL;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__l.__size_;
    if (p_src != v331)
    {
      v332 = a1 + 912;
      v333 = (uint64_t **)(a1 + 920);
      v709 = a1 + 912;
      *(_QWORD *)v714 = v331;
      v705 = (uint64_t **)(a1 + 920);
      while (1)
      {
        v334 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(v332, (const void **)p_src, *v333, (uint64_t *)v333);
        if (v333 != (uint64_t **)v334)
        {
          v6 = (size_t)v334;
          if (*(char *)(p_src + 23) < 0)
          {
            v335 = *(_QWORD *)(p_src + 8);
            if ((v335 & 0x8000000000000000) != 0)
              goto LABEL_802;
            v336 = *(const void **)p_src;
            if (v335)
            {
              if (!v336)
                goto LABEL_802;
            }
          }
          else
          {
            v335 = *(unsigned __int8 *)(p_src + 23);
            v336 = (const void *)p_src;
          }
          v337 = (_QWORD *)(v6 + 32);
          if (*(char *)(v6 + 55) < 0)
          {
            v338 = *(_QWORD *)(v6 + 40);
            if ((v338 & 0x8000000000000000) != 0)
              goto LABEL_802;
            v337 = (_QWORD *)*v337;
            if (v338 && v337 == 0)
              goto LABEL_802;
          }
          else
          {
            v338 = *(unsigned __int8 *)(v6 + 55);
          }
          if (v338 >= v335)
            v340 = v335;
          else
            v340 = v338;
          v341 = memcmp(v336, v337, v340);
          if (v341)
          {
            if ((v341 & 0x80000000) == 0)
              goto LABEL_890;
          }
          else if (v335 >= v338)
          {
LABEL_890:
            v6 = *(_QWORD *)(v6 + 56);
            if (v6)
            {
              v342 = __p[0].__r_.__value_.__l.__size_;
              v343 = &__p[0].__r_.__value_.__l.__size_;
LABEL_893:
              v344 = (uint64_t **)v343;
              if (v342)
              {
                do
                {
                  v343 = (std::string::size_type *)v342;
                  v345 = *(_QWORD *)(v342 + 32);
                  if (v6 < v345)
                  {
                    v342 = *v343;
                    goto LABEL_893;
                  }
                  if (v345 >= v6)
                    goto LABEL_901;
                  v342 = v343[1];
                }
                while (v342);
                v344 = (uint64_t **)(v343 + 1);
              }
              v346 = v343;
              v343 = (std::string::size_type *)operator new(0x40uLL);
              v343[4] = v6;
              v343[5] = 0;
              v343[6] = 0;
              v343[7] = 0;
              *v343 = 0;
              v343[1] = 0;
              v343[2] = (std::string::size_type)v346;
              *v344 = (uint64_t *)v343;
              v347 = (uint64_t *)v343;
              if (*(_QWORD *)__p[0].__r_.__value_.__l.__data_)
              {
                __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)__p[0].__r_.__value_.__l.__data_;
                v347 = *v344;
              }
              std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)__p[0].__r_.__value_.__l.__size_, v347);
              ++__p[0].__r_.__value_.__r.__words[2];
LABEL_901:
              webrtc::JsepTransportController::GetEncryptedHeaderExtensionIds((__int32 **)v748, *(_BYTE *)(a1 + 539), *(_QWORD *)(p_src + 32));
              v348 = *(_QWORD *)&v748[8];
              v6 = *(_QWORD *)v748;
              for (__s2a = *(void **)v748; v6 != v348; v6 += 4)
              {
                v349 = *(_DWORD *)v6;
                v350 = (__int32 *)v343[6];
                v351 = wmemchr((__int32 *)v343[5], *(_DWORD *)v6, (uint64_t)((uint64_t)v350 - v343[5]) >> 2);
                if (v351)
                  v352 = v351;
                else
                  v352 = v350;
                if (v352 == v350)
                {
                  v354 = (char *)v343[6];
                  v353 = v343[7];
                  if ((unint64_t)v354 >= v353)
                  {
                    v356 = (char *)v343[5];
                    v357 = (v354 - v356) >> 2;
                    v358 = v357 + 1;
                    if ((unint64_t)(v357 + 1) >> 62)
                      goto LABEL_1662;
                    v359 = v353 - (_QWORD)v356;
                    if (v359 >> 1 > v358)
                      v358 = v359 >> 1;
                    v36 = (unint64_t)v359 >= 0x7FFFFFFFFFFFFFFCLL;
                    v360 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v36)
                      v360 = v358;
                    if (!v360)
                      goto LABEL_802;
                    if (v360 >> 62)
                      std::__throw_bad_array_new_length[abi:sn180100]();
                    v361 = 4 * v360;
                    v362 = operator new(4 * v360);
                    v363 = &v362[4 * v357];
                    *v363 = v349;
                    v355 = v363 + 1;
                    if (v354 != v356)
                    {
                      v364 = v354 - v356 - 4;
                      if (v364 < 0x2C)
                        goto LABEL_1666;
                      if ((unint64_t)(v356 - v362) < 0x20)
                        goto LABEL_1666;
                      v365 = (v364 >> 2) + 1;
                      v366 = 4 * (v365 & 0x7FFFFFFFFFFFFFF8);
                      v367 = &v354[-v366];
                      v363 = (_DWORD *)((char *)v363 - v366);
                      v368 = &v362[v354 - v356 - 16];
                      v369 = v354 - 16;
                      v370 = v365 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v371 = *(_OWORD *)v369;
                        *(v368 - 1) = *((_OWORD *)v369 - 1);
                        *v368 = v371;
                        v368 -= 2;
                        v369 -= 32;
                        v370 -= 8;
                      }
                      while (v370);
                      v354 = v367;
                      if (v365 != (v365 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1666:
                        do
                        {
                          v372 = *((_DWORD *)v354 - 1);
                          v354 -= 4;
                          *--v363 = v372;
                        }
                        while (v354 != v356);
                      }
                    }
                    v343[5] = (std::string::size_type)v363;
                    v343[6] = (std::string::size_type)v355;
                    v343[7] = (std::string::size_type)&v362[v361];
                    if (v356)
                      operator delete(v356);
                    a1 = v726;
                  }
                  else
                  {
                    if (!v354)
                      goto LABEL_802;
                    *(_DWORD *)v354 = v349;
                    v355 = v354 + 4;
                  }
                  v343[6] = (std::string::size_type)v355;
                }
              }
              if (__s2a)
                operator delete(__s2a);
              v332 = v709;
              v331 = *(_QWORD *)v714;
              v333 = v705;
            }
          }
        }
        p_src += 40;
        if (p_src == v331)
        {
          v373 = (_QWORD *)__src.__r_.__value_.__l.__size_;
          goto LABEL_932;
        }
      }
    }
    v373 = 0;
LABEL_932:
    std::__tree<std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::__map_value_compare<cricket::ContentGroup const*,std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::less<cricket::ContentGroup const*>,true>,std::allocator<std::__value_type<cricket::ContentGroup const*,std::vector<int>>>>::destroy(v373);
    v374 = (_QWORD *)__p[0].__r_.__value_.__l.__size_;
    __src = __p[0];
    if (__p[0].__r_.__value_.__r.__words[2])
    {
      *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 16) = &__src.__r_.__value_.__l.__size_;
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__l.__size_;
      *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = 0uLL;
      v374 = 0;
    }
    else
    {
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src.__r_.__value_.__l.__size_;
    }
    std::__tree<std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::__map_value_compare<cricket::ContentGroup const*,std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::less<cricket::ContentGroup const*>,true>,std::allocator<std::__value_type<cricket::ContentGroup const*,std::vector<int>>>>::destroy(v374);
  }
  __s2b = (std::string **)(a1 + 856);
  p_src = *v725;
  v375 = v725[1];
  if (*v725 == v375)
  {
LABEL_1596:
    if (a3 == 2)
    {
      std::__tree<std::__value_type<std::string,cricket::JsepTransport *>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::JsepTransport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::JsepTransport *>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,cricket::JsepTransport *>,std::__tree_node<std::__value_type<std::string,cricket::JsepTransport *>,void *> *,long>>(a1 + 424, *(char **)(a1 + 400), (char *)(a1 + 408));
      webrtc::JsepTransportCollection::DestroyUnusedTransports((_QWORD **)(a1 + 376));
      webrtc::BundleManager::Commit(__s2b);
    }
    *(_DWORD *)a6 = 0;
    *(_BYTE *)(a6 + 38) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    *(_QWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 29) = 0;
    goto LABEL_1599;
  }
  v376 = (_QWORD *)(a1 + 376);
  v710 = (_OWORD *)(a1 + 360);
  v704 = (uint64_t **)(a1 + 384);
  v705 = (uint64_t **)(a1 + 708);
  v698 = a1 + 312;
  v701 = (unsigned int **)(a1 + 848);
  v697 = &unk_24C0BE6C8;
  v715 = (_QWORD *)(a1 + 376);
  do
  {
    if (*(_BYTE *)(p_src + 28)
      || !webrtc::BundleManager::IsFirstMidInGroup((uint64_t)__s2b, (const void **)p_src))
    {
      goto LABEL_939;
    }
    v377 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)v376, (const void **)p_src, *v704, (uint64_t *)v704);
    if (v704 == (uint64_t **)v377)
      goto LABEL_964;
    v6 = (size_t)v377;
    if (*(char *)(p_src + 23) < 0)
    {
      v378 = *(_QWORD *)(p_src + 8);
      if ((v378 & 0x8000000000000000) != 0)
        goto LABEL_802;
      v379 = *(const void **)p_src;
      if (v378)
      {
        if (!v379)
          goto LABEL_802;
      }
    }
    else
    {
      v378 = *(unsigned __int8 *)(p_src + 23);
      v379 = (const void *)p_src;
    }
    v380 = (_QWORD *)(v6 + 32);
    if (*(char *)(v6 + 55) < 0)
    {
      v381 = *(_QWORD *)(v6 + 40);
      if ((v381 & 0x8000000000000000) != 0)
        goto LABEL_802;
      v380 = (_QWORD *)*v380;
      if (v381 && v380 == 0)
        goto LABEL_802;
    }
    else
    {
      v381 = *(unsigned __int8 *)(v6 + 55);
    }
    v383 = v381 >= v378 ? v378 : v381;
    v384 = memcmp(v379, v380, v383);
    if (v384)
    {
      if (v384 < 0)
        goto LABEL_964;
    }
    else if (v378 < v381)
    {
      goto LABEL_964;
    }
    if (!*(_QWORD *)(v6 + 56))
    {
LABEL_964:
      *(_QWORD *)&v748[24] = 0;
      *(_QWORD *)&v748[32] = 0;
      v385 = *(_QWORD *)(a1 + 656);
      v386 = *(_QWORD *)(a1 + 320);
      v387 = *(_QWORD *)(a1 + 560);
      *(_OWORD *)v748 = *v710;
      *(_QWORD *)&v748[16] = v385;
      v749[0] = v386;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, _BYTE *))(*(_QWORD *)v387 + 16))(&v743, v387, p_src, 1, v748);
      v388 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v743 + 32))(v743);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v388 + 112))(v388, *(unsigned int *)(a1 + 832));
      v389 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v743 + 32))(v743);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v389 + 120))(v389, *(_QWORD *)(a1 + 840));
      v390 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v743 + 32))(v743);
      (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v390 + 168))(v390, v705);
      v391 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v743 + 32))(v743);
      webrtc::JsepTransportController::CreateDtlsTransport((uint64_t *)&v742, a1, v391);
      v392 = 0;
      if (*(_DWORD *)(a1 + 548) == 1)
      {
        v393 = 0;
        v429 = *(unsigned __int8 *)(v726 + 552);
        v402 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
        if (v429)
          goto LABEL_968;
      }
      else
      {
        v393 = 0;
        if (!*(_DWORD *)(p_src + 24))
        {
          *(_QWORD *)&v748[24] = 0;
          *(_QWORD *)&v748[32] = 0;
          v394 = *(_QWORD *)(v726 + 656);
          v395 = *(_QWORD *)(v726 + 320);
          v396 = *(_QWORD *)(v726 + 560);
          *(_OWORD *)v748 = *v710;
          *(_QWORD *)&v748[16] = v394;
          v749[0] = v395;
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unint64_t, uint64_t, _BYTE *))(*(_QWORD *)v396 + 16))(v741, v396, p_src, 2, v748);
          v397 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v741 + 32))(*(_QWORD *)v741);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v397 + 112))(v397, *(unsigned int *)(v726 + 832));
          v398 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v741 + 32))(*(_QWORD *)v741);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v398 + 120))(v398, *(_QWORD *)(v726 + 840));
          v399 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v741 + 32))(*(_QWORD *)v741);
          (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v399 + 168))(v399, v705);
          v392 = *(_QWORD *)v741;
          v400 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v741 + 32))(*(_QWORD *)v741);
          webrtc::JsepTransportController::CreateDtlsTransport((uint64_t *)v748, v726, v400);
          v393 = *(rtc::PacketTransportInternal **)v748;
        }
        v401 = *(unsigned __int8 *)(v726 + 552);
        v402 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
        if (v401)
        {
LABEL_968:
          if ((v402 & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v403, v404, v405, v406, v407, v408, v409, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc");
          v410 = v742;
          v411 = operator new();
          *(_QWORD *)(v411 + 16) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
          *(_QWORD *)(v411 + 24) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
          *(_QWORD *)(v411 + 48) = 0;
          *(_QWORD *)(v411 + 56) = 0;
          *(_QWORD *)(v411 + 40) = 0;
          *(_QWORD *)(v411 + 32) = v411 + 40;
          *(_QWORD *)(v411 + 64) = 0;
          *(_QWORD *)(v411 + 72) = 0;
          *(_BYTE *)(v411 + 80) = 0;
          *(_QWORD *)(v411 + 96) = 0;
          *(_QWORD *)(v411 + 104) = 0;
          *(_QWORD *)(v411 + 88) = 0;
          *(_BYTE *)(v411 + 112) = 0;
          *(_QWORD *)(v411 + 136) = absl::internal_any_invocable::LocalManagerTrivial;
          *(_QWORD *)(v411 + 144) = _ZN4absl22internal_any_invocable12LocalInvokerILb0EvRN6webrtc20RtpTransportInternal41callback_undemuxable_rtp_packet_received_MUlRNS2_17RtpPacketReceivedEE_EJS5_EEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
          *(_QWORD *)(v411 + 152) = 0;
          *(_QWORD *)(v411 + 160) = 0;
          *(_BYTE *)(v411 + 176) = 0;
          *(_QWORD *)(v411 + 168) = 0;
          *(_QWORD *)(v411 + 184) = 0;
          *(_QWORD *)(v411 + 192) = 0;
          *(_BYTE *)(v411 + 208) = 0;
          *(_QWORD *)(v411 + 200) = 0;
          *(_QWORD *)(v411 + 224) = 0;
          *(_QWORD *)(v411 + 232) = 0;
          *(_QWORD *)(v411 + 216) = 0;
          *(_BYTE *)(v411 + 240) = 0;
          *(_QWORD *)v411 = &unk_24C0BE6C8;
          *(_QWORD *)(v411 + 8) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
          *(_BYTE *)(v411 + 248) = v393 == 0;
          *(_DWORD *)(v411 + 271) = 0;
          *(_QWORD *)(v411 + 256) = 0;
          *(_QWORD *)(v411 + 264) = 0;
          *(_QWORD *)(v411 + 336) = 0;
          *(_QWORD *)(v411 + 344) = 0;
          *(_OWORD *)(v411 + 280) = 0u;
          *(_OWORD *)(v411 + 296) = 0u;
          *(_OWORD *)(v411 + 312) = 0u;
          *(_QWORD *)(v411 + 328) = v411 + 336;
          *(_QWORD *)(v411 + 464) = 0;
          *(_OWORD *)(v411 + 432) = 0u;
          *(_OWORD *)(v411 + 448) = 0u;
          *(_OWORD *)(v411 + 400) = 0u;
          *(_OWORD *)(v411 + 416) = 0u;
          *(_OWORD *)(v411 + 368) = 0u;
          *(_OWORD *)(v411 + 384) = 0u;
          *(_OWORD *)(v411 + 352) = 0u;
          *(_BYTE *)(v411 + 472) = 1;
          *(_QWORD *)(v411 + 488) = 0;
          *(_QWORD *)(v411 + 496) = 0;
          *(_QWORD *)(v411 + 480) = 0;
          v412 = operator new();
          *(_DWORD *)v412 = 0;
          *(_BYTE *)(v412 + 4) = 1;
          *(_QWORD *)(v411 + 504) = v412;
          do
            v419 = __ldxr((unsigned int *)v412);
          while (__stxr(v419 + 1, (unsigned int *)v412));
          webrtc::RtpTransport::SetRtpPacketTransport((webrtc::RtpTransport *)v411, v410, v413, v414, v415, v416, v417, v418);
          if (v393)
          {
            webrtc::RtpTransport::SetRtcpPacketTransport((webrtc::RtpTransport *)v411, v393, v420, v421, v422, v423, v424, v425);
            v426 = 0;
            v427 = *(_QWORD *)(v726 + 664);
            if (v427)
            {
LABEL_974:
              (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, rtc::PacketTransportInternal *))(*(_QWORD *)v427 + 16))(v748, v427, v698, v410);
              v428 = *(_QWORD *)v748;
              goto LABEL_1000;
            }
          }
          else
          {
            v426 = 0;
            v427 = *(_QWORD *)(v726 + 664);
            if (v427)
              goto LABEL_974;
          }
LABEL_999:
          v428 = 0;
LABEL_1000:
          v6 = operator new();
          v439 = v743;
          v742 = 0;
          v743 = 0;
          *(_QWORD *)v741 = v439;
          v738.__r_.__value_.__r.__words[0] = v392;
          __len.__r_.__value_.__r.__words[0] = v411;
          v736.__r_.__value_.__r.__words[0] = 0;
          v735.__r_.__value_.__r.__words[0] = v426;
          v746 = v410;
          v744 = v428;
          v745 = v393;
          a1 = v726;
          *(_QWORD *)v748 = &off_24C0B5868;
          *(_QWORD *)&v748[8] = v726;
          *(_QWORD *)&v748[24] = v748;
          cricket::JsepTransport::JsepTransport(v6, (__int128 *)p_src, v701, (uint64_t *)v741, (uint64_t *)&v738, (uint64_t *)&__len, (uint64_t *)&v736, (uint64_t *)&v735, (uint64_t *)&v746, (uint64_t *)&v745, &v744, (uint64_t)v748);
          v440 = *(_QWORD **)&v748[24];
          if (*(_BYTE **)&v748[24] == v748)
          {
            v440 = v748;
            v441 = 4;
            v376 = v715;
          }
          else
          {
            v376 = v715;
            if (!*(_QWORD *)&v748[24])
            {
LABEL_1005:
              v442 = v744;
              v744 = 0;
              if (v442)
                (*(void (**)(uint64_t))(*(_QWORD *)v442 + 8))(v442);
              v443 = (uint64_t)v745;
              v745 = 0;
              if (v443)
                (*(void (**)(uint64_t))(*(_QWORD *)v443 + 8))(v443);
              if (v746)
                (*(void (**)(rtc::PacketTransportInternal *))(*(_QWORD *)v746 + 8))(v746);
              if (v735.__r_.__value_.__r.__words[0])
                (*(void (**)(std::string::size_type))(*(_QWORD *)v735.__r_.__value_.__l.__data_ + 8))(v735.__r_.__value_.__r.__words[0]);
              if (v736.__r_.__value_.__r.__words[0])
                (*(void (**)(std::string::size_type))(*(_QWORD *)v736.__r_.__value_.__l.__data_ + 8))(v736.__r_.__value_.__r.__words[0]);
              if (__len.__r_.__value_.__r.__words[0])
                (*(void (**)(std::string::size_type))(*(_QWORD *)__len.__r_.__value_.__l.__data_ + 8))(__len.__r_.__value_.__r.__words[0]);
              if (v738.__r_.__value_.__r.__words[0])
                (*(void (**)(std::string::size_type))(*(_QWORD *)v738.__r_.__value_.__l.__data_ + 8))(v738.__r_.__value_.__r.__words[0]);
              if (*(_QWORD *)v741)
                (*(void (**)(_QWORD))(**(_QWORD **)v741 + 8))(*(_QWORD *)v741);
              v444 = *(_QWORD *)(v6 + 96);
              if (!v444)
              {
                v444 = *(_QWORD *)(v6 + 88);
                if (!v444)
                  v444 = *(_QWORD *)(v6 + 80);
              }
              *(_QWORD *)v748 = v726;
              v445 = (char *)(v444 + 88);
              v446 = operator new();
              *(_OWORD *)v446 = *(_OWORD *)v748;
              *(_QWORD *)(v446 + 16) = absl::internal_any_invocable::LocalManagerTrivial;
              *(_QWORD *)(v446 + 24) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::MaybeCreateJsepTransport(BOOL,cricket::ContentInfo const&,cricket::SessionDescription const&)::$_1 &,rtc::CopyOnWriteBuffer *,long long>;
              *(_QWORD *)&v748[16] = absl::internal_any_invocable::EmptyManager;
              *(_QWORD *)&v748[24] = 0;
              *(_QWORD *)v741 = v446;
              *(_QWORD *)&v741[8] = webrtc::webrtc_function_impl::CallHelpers<void ()(rtc::CopyOnWriteBuffer *,long long)>::CallVoidPtr<absl::AnyInvocable<void ()(rtc::CopyOnWriteBuffer *,long long)>>;
              *(_QWORD *)&v741[16] = webrtc::UntypedFunction::PrepareArgs<void ()(rtc::CopyOnWriteBuffer *,long long),absl::AnyInvocable<void ()(rtc::CopyOnWriteBuffer *,long long)>,absl::AnyInvocable<void ()(rtc::CopyOnWriteBuffer *,long long)>,(void *)0>(absl::AnyInvocable<void ()(rtc::CopyOnWriteBuffer *,long long)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke;
              webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>(v445, v726, (uint64_t *)v741, v447, v448, v449, v450, v451);
              (*(void (**)(uint64_t, _BYTE *, _BYTE *))&v748[16])(1, v748, v748);
              v452 = *(_QWORD *)(v6 + 96);
              if (!v452)
              {
                v452 = *(_QWORD *)(v6 + 88);
                if (!v452)
                  v452 = *(_QWORD *)(v6 + 80);
              }
              *(_QWORD *)v741 = v726;
              *(_QWORD *)&v741[16] = absl::internal_any_invocable::LocalManagerTrivial;
              *(_QWORD *)&v741[24] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::MaybeCreateJsepTransport(BOOL,cricket::ContentInfo const&,cricket::SessionDescription const&)::$_2 &,webrtc::RtpPacketReceived &>;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v452 + 136))(1, v452 + 120, v452 + 120);
              *(_QWORD *)(v452 + 136) = absl::internal_any_invocable::EmptyManager;
              *(_QWORD *)(v452 + 144) = 0;
              (*(void (**)(_QWORD, _BYTE *, uint64_t))&v741[16])(0, v741, v452 + 120);
              *(_OWORD *)(v452 + 136) = *(_OWORD *)&v741[16];
              *(_QWORD *)&v741[16] = absl::internal_any_invocable::EmptyManager;
              *(_QWORD *)&v741[24] = 0;
              webrtc::JsepTransportCollection::SetTransportForMid(v376, p_src, v6);
              v453 = (cricket::JsepTransport **)std::map<std::string,std::unique_ptr<cricket::JsepTransport>>::operator[]((uint64_t)v376, p_src);
              v454 = *v453;
              *v453 = (cricket::JsepTransport *)v6;
              if (v454)
              {
                cricket::JsepTransport::~JsepTransport(v454);
                MEMORY[0x20BD0ADEC]();
              }
              webrtc::JsepTransportController::UpdateAggregateStates_n((webrtc::JsepTransportController *)v726);
              *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = 0;
              *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 4) = 0;
              *(std::string::size_type *)((char *)__p[1].__r_.__value_.__r.__words + 1) = 0;
              *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = 0;
              if (v742)
                (*(void (**)(rtc::PacketTransportInternal *))(*(_QWORD *)v742 + 8))(v742);
              if (v743)
                (*(void (**)(uint64_t))(*(_QWORD *)v743 + 8))(v743);
              goto LABEL_1033;
            }
            v441 = 5;
          }
          (*(void (**)(void))(*v440 + 8 * v441))();
          goto LABEL_1005;
        }
      }
      if ((v402 & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v403, v404, v405, v406, v407, v408, v409, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc");
      v410 = v742;
      v430 = *(_QWORD *)(v726 + 320);
      v426 = operator new();
      *(_QWORD *)(v426 + 16) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
      *(_QWORD *)(v426 + 24) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
      *(_QWORD *)(v426 + 48) = 0;
      *(_QWORD *)(v426 + 56) = 0;
      *(_QWORD *)(v426 + 40) = 0;
      *(_QWORD *)(v426 + 32) = v426 + 40;
      *(_QWORD *)(v426 + 64) = 0;
      *(_QWORD *)(v426 + 72) = 0;
      *(_BYTE *)(v426 + 80) = 0;
      *(_QWORD *)(v426 + 96) = 0;
      *(_QWORD *)(v426 + 104) = 0;
      *(_QWORD *)(v426 + 88) = 0;
      *(_BYTE *)(v426 + 112) = 0;
      *(_QWORD *)(v426 + 136) = absl::internal_any_invocable::LocalManagerTrivial;
      *(_QWORD *)(v426 + 144) = _ZN4absl22internal_any_invocable12LocalInvokerILb0EvRN6webrtc20RtpTransportInternal41callback_undemuxable_rtp_packet_received_MUlRNS2_17RtpPacketReceivedEE_EJS5_EEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
      *(_QWORD *)(v426 + 152) = 0;
      *(_QWORD *)(v426 + 160) = 0;
      *(_BYTE *)(v426 + 176) = 0;
      *(_QWORD *)(v426 + 168) = 0;
      *(_QWORD *)(v426 + 184) = 0;
      *(_QWORD *)(v426 + 192) = 0;
      *(_BYTE *)(v426 + 208) = 0;
      *(_QWORD *)(v426 + 200) = 0;
      *(_QWORD *)(v426 + 224) = 0;
      *(_QWORD *)(v426 + 232) = 0;
      *(_QWORD *)(v426 + 216) = 0;
      *(_BYTE *)(v426 + 240) = 0;
      *(_QWORD *)v426 = &unk_24C0BE6C8;
      *(_QWORD *)(v426 + 8) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
      *(_BYTE *)(v426 + 248) = v393 == 0;
      *(_DWORD *)(v426 + 271) = 0;
      *(_QWORD *)(v426 + 256) = 0;
      *(_QWORD *)(v426 + 264) = 0;
      *(_QWORD *)(v426 + 336) = 0;
      *(_QWORD *)(v426 + 344) = 0;
      *(_OWORD *)(v426 + 280) = 0u;
      *(_OWORD *)(v426 + 296) = 0u;
      *(_OWORD *)(v426 + 312) = 0u;
      *(_QWORD *)(v426 + 328) = v426 + 336;
      *(_QWORD *)(v426 + 464) = 0;
      *(_OWORD *)(v426 + 432) = 0u;
      *(_OWORD *)(v426 + 448) = 0u;
      *(_OWORD *)(v426 + 400) = 0u;
      *(_OWORD *)(v426 + 416) = 0u;
      *(_OWORD *)(v426 + 368) = 0u;
      *(_OWORD *)(v426 + 384) = 0u;
      *(_OWORD *)(v426 + 352) = 0u;
      *(_BYTE *)(v426 + 472) = 1;
      *(_QWORD *)(v426 + 488) = 0;
      *(_QWORD *)(v426 + 496) = 0;
      *(_QWORD *)(v426 + 480) = 0;
      v431 = operator new();
      *(_DWORD *)v431 = 0;
      *(_BYTE *)(v431 + 4) = 1;
      *(_QWORD *)(v426 + 504) = v431;
      do
        v432 = __ldxr((unsigned int *)v431);
      while (__stxr(v432 + 1, (unsigned int *)v431));
      *(_BYTE *)(v426 + 572) = 0;
      *(_BYTE *)(v426 + 576) = 0;
      *(_BYTE *)(v426 + 580) = 0;
      *(_OWORD *)(v426 + 512) = 0u;
      *(_OWORD *)(v426 + 528) = 0u;
      *(_OWORD *)(v426 + 544) = 0u;
      *(_OWORD *)(v426 + 553) = 0u;
      *(_WORD *)(v426 + 632) = 0;
      *(_OWORD *)(v426 + 584) = 0u;
      *(_OWORD *)(v426 + 600) = 0u;
      *(_OWORD *)(v426 + 616) = 0u;
      *(_QWORD *)(v426 + 636) = 0xFFFFFFFFLL;
      *(_QWORD *)(v426 + 648) = v430;
      *(_QWORD *)v426 = &off_24C0B3258;
      *(_BYTE *)(v426 + 696) = 0;
      *(_BYTE *)(v426 + 704) = 0;
      *(_BYTE *)(v426 + 728) = 0;
      *(_BYTE *)(v426 + 736) = 0;
      *(_QWORD *)(v426 + 768) = 0;
      *(_BYTE *)(v426 + 672) = 0;
      *(_OWORD *)(v426 + 656) = 0u;
      if (*(_BYTE *)(v726 + 553))
        *(_BYTE *)(v426 + 633) = 1;
      webrtc::DtlsSrtpTransport::SetDtlsTransports((webrtc::DtlsSrtpTransport *)v426, v410, v393);
      *(_BYTE *)(v426 + 736) = *(_BYTE *)(v726 + 704);
      *(_QWORD *)v748 = &unk_24C0B5940;
      *(_QWORD *)&v748[8] = v726;
      *(_QWORD *)&v748[24] = v748;
      v433 = v426 + 744;
      v434 = *(_QWORD *)(v426 + 768);
      *(_QWORD *)(v426 + 768) = 0;
      if (v434 == v426 + 744)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v433 + 32))(v426 + 744);
        v435 = *(_BYTE **)&v748[24];
        if (*(_QWORD *)&v748[24])
          goto LABEL_985;
      }
      else
      {
        if (!v434)
        {
          v436 = (void (**)(_BYTE *, uint64_t))&unk_24C0B5940;
          goto LABEL_993;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v434 + 40))(v434);
        v435 = *(_BYTE **)&v748[24];
        if (*(_QWORD *)&v748[24])
        {
LABEL_985:
          if (v435 != v748)
          {
            *(_QWORD *)(v426 + 768) = v435;
            goto LABEL_998;
          }
          v436 = *(void (***)(_BYTE *, uint64_t))v748;
LABEL_993:
          *(_QWORD *)(v426 + 768) = v433;
          v436[3](v748, v426 + 744);
          v437 = *(_QWORD **)&v748[24];
          if (*(_BYTE **)&v748[24] == v748)
          {
            v437 = v748;
            v438 = 4;
          }
          else
          {
            if (!*(_QWORD *)&v748[24])
              goto LABEL_998;
            v438 = 5;
          }
          (*(void (**)(void))(*v437 + 8 * v438))();
LABEL_998:
          v411 = 0;
          v427 = *(_QWORD *)(v726 + 664);
          if (v427)
            goto LABEL_974;
          goto LABEL_999;
        }
      }
      *(_QWORD *)(v426 + 768) = 0;
      goto LABEL_998;
    }
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = 0;
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 4) = 0;
    *(std::string::size_type *)((char *)__p[1].__r_.__value_.__r.__words + 1) = 0;
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = 0;
LABEL_1033:
    if (SHIBYTE(v733) < 0)
    {
      v6 = (size_t)v734;
      operator delete((void *)v732);
    }
    v732 = *(_OWORD *)((char *)__p[0].__r_.__value_.__r.__words + 4);
    v733 = *(std::string::pointer *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4);
    *(_DWORD *)v734 = HIDWORD(__p[1].__r_.__value_.__r.__words[0]);
    *(_WORD *)&v734[4] = __p[1].__r_.__value_.__r.__words[1];
    v734[6] = 0;
LABEL_939:
    p_src += 40;
  }
  while (p_src != v375);
  v455 = v725;
  p_src = *v725;
  if (v725[1] == *v725)
    goto LABEL_1596;
  v456 = 0;
  v705 = (uint64_t **)&v748[8];
  v719 = a1 + 912;
  v457 = (uint64_t **)(a1 + 920);
  v702 = a1 + 400;
  v699 = (uint64_t **)(a1 + 408);
  v696 = (std::string *)(a6 + 8);
  v711 = (uint64_t **)(a1 + 920);
  while (1)
  {
    v458 = v455[3];
    if (0x6DB6DB6DB6DB6DB7 * ((v455[4] - v458) >> 4) <= v456)
      goto LABEL_802;
    v459 = p_src + 40 * v456;
    v460 = *(unsigned __int8 *)(v459 + 28);
    v461 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(v719, (const void **)v459, *v457, (uint64_t *)v457);
    v6 = (size_t)v461;
    if (!v460)
      break;
    if (v457 == (uint64_t **)v461)
      goto LABEL_1038;
    v462 = *(unsigned __int8 *)(v459 + 23);
    v463 = (const void *)(p_src + 40 * v456);
    p_src = v462;
    if (*(char *)(v459 + 23) < 0)
    {
      p_src = *(_QWORD *)(v459 + 8);
      if ((p_src & 0x8000000000000000) != 0)
        goto LABEL_802;
      v463 = *(const void **)v459;
      if (p_src && v463 == 0)
        goto LABEL_802;
    }
    v465 = (_QWORD *)(v6 + 32);
    if (*(char *)(v6 + 55) < 0)
    {
      v466 = *(_QWORD *)(v6 + 40);
      if ((v466 & 0x8000000000000000) != 0)
        goto LABEL_802;
      v465 = (_QWORD *)*v465;
      if (v466 && v465 == 0)
        goto LABEL_802;
    }
    else
    {
      v466 = *(unsigned __int8 *)(v6 + 55);
    }
    if (v466 >= p_src)
      v474 = p_src;
    else
      v474 = v466;
    v475 = memcmp(v463, v465, v474);
    if (v475)
    {
      if (v475 < 0)
        goto LABEL_1038;
    }
    else if (p_src < v466)
    {
      goto LABEL_1038;
    }
    v6 = *(_QWORD *)(v6 + 56);
    if (!v6)
    {
LABEL_1038:
      webrtc::JsepTransportCollection::RemoveTransportForMid((uint64_t)v376, v459);
      goto LABEL_1039;
    }
    v477 = *(_QWORD *)(v6 + 24);
    v476 = *(_QWORD *)(v6 + 32);
    if (v477 != v476)
    {
      if ((v462 & 0x80u) == 0)
        v478 = v462;
      else
        v478 = *(_QWORD *)(v459 + 8);
      v479 = *(unsigned __int8 *)(v477 + 23);
      v480 = (char)v479;
      if ((v479 & 0x80u) != 0)
        v479 = *(_QWORD *)(v477 + 8);
      if (v478 == v479)
      {
        if (v480 >= 0)
          v481 = *(unsigned __int8 **)(v6 + 24);
        else
          v481 = *(unsigned __int8 **)v477;
        if ((v462 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v459, v481, *(_QWORD *)(v459 + 8)))
          {
            do
            {
LABEL_1411:
              webrtc::JsepTransportCollection::RemoveTransportForMid((uint64_t)v376, v477);
              v477 += 24;
            }
            while (v477 != v476);
            webrtc::BundleManager::DeleteGroup((webrtc::BundleManager *)__s2b, (const cricket::ContentGroup *)v6);
            v457 = v711;
            goto LABEL_1039;
          }
        }
        else
        {
          v482 = (unsigned __int8 *)v459;
          if (!(_DWORD)v462)
            goto LABEL_1411;
          while (*v482 == *v481)
          {
            ++v482;
            ++v481;
            if (!--v462)
              goto LABEL_1411;
          }
        }
      }
    }
    webrtc::JsepTransportCollection::RemoveTransportForMid((uint64_t)v376, v459);
    webrtc::BundleManager::DeleteMid((uint64_t)__s2b, (cricket::ContentGroup *)v6, (_QWORD *)v459);
    v457 = v711;
LABEL_1039:
    ++v456;
    v455 = v725;
    p_src = *v725;
    if (v456 >= 0xCCCCCCCCCCCCCCCDLL * ((v725[1] - *v725) >> 3))
      goto LABEL_1596;
  }
  if (v457 == (uint64_t **)v461)
    goto LABEL_1118;
  v467 = *(unsigned __int8 *)(v459 + 23);
  v468 = (const void *)(p_src + 40 * v456);
  v469 = v467;
  if (*(char *)(v459 + 23) < 0)
  {
    v469 = *(_QWORD *)(v459 + 8);
    if ((v469 & 0x8000000000000000) != 0)
      goto LABEL_802;
    v468 = *(const void **)v459;
    if (v469 && v468 == 0)
      goto LABEL_802;
  }
  v471 = (_QWORD *)(v6 + 32);
  if (*(char *)(v6 + 55) < 0)
  {
    v472 = *(_QWORD *)(v6 + 40);
    if ((v472 & 0x8000000000000000) != 0)
      goto LABEL_802;
    v471 = (_QWORD *)*v471;
    if (v472 && v471 == 0)
      goto LABEL_802;
  }
  else
  {
    v472 = *(unsigned __int8 *)(v6 + 55);
  }
  if (v472 >= v469)
    v484 = v469;
  else
    v484 = v472;
  v485 = memcmp(v468, v471, v484);
  if (v485)
  {
    v457 = v711;
    if ((v485 & 0x80000000) == 0)
      goto LABEL_1098;
LABEL_1118:
    v486 = 0;
LABEL_1119:
    LOBYTE(v467) = 1;
LABEL_1120:
    v493 = p_src + 40 * v456;
    v496 = *(_DWORD *)(v493 + 24);
    v495 = v493 + 24;
    v494 = v496;
    v498 = *(_DWORD *)(a1 + 548) == 1 && v494 == 0 && *(_BYTE *)(v495 + 5) == 0;
    if (!v498 || *(_BYTE *)(*(_QWORD *)(v459 + 32) + 32))
    {
      v499 = 0;
      *(_DWORD *)v748 = 0;
      v748[38] = 0;
      memset(&v748[8], 0, 29);
      p_src = (unint64_t)"http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time";
      v730 = 0;
      if (SHIBYTE(v733) < 0)
        goto LABEL_1130;
      goto LABEL_1131;
    }
    v507 = *(char *)(v459 + 23);
    if (v507 >= 0)
      v6 = *(unsigned __int8 *)(v459 + 23);
    else
      v6 = *(_QWORD *)(v459 + 8);
    v508 = v6 + 25;
    if (v6 + 25 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1662;
    if (v508 > 0x16)
    {
      v510 = (v508 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v508 | 7) != 0x17)
        v510 = v508 | 7;
      p_src = v510 + 1;
      v509 = (char *)operator new(v510 + 1);
      *(_QWORD *)&v741[8] = v6 + 25;
      *(_QWORD *)&v741[16] = p_src | 0x8000000000000000;
      *(_QWORD *)v741 = v509;
    }
    else
    {
      memset(v741, 0, 24);
      v509 = v741;
      v741[23] = v6 + 25;
    }
    v511 = v509 + 25;
    v512 = v509 <= "The m= section with mid='" && v511 > "The m= section with mid='";
    a1 = v726;
    if (v512)
      goto LABEL_802;
    qmemcpy(v509, "The m= section with mid='", 25);
    v513 = v507 >= 0 ? (char *)v459 : *(char **)v459;
    p_src = (unint64_t)&v511[v6];
    if (v513 >= v511 && p_src > (unint64_t)v513)
      goto LABEL_802;
    if (v6)
      memmove(v511, v513, v6);
    *(_BYTE *)p_src = 0;
    v515 = *(_QWORD *)&v741[16];
    if (v741[23] >= 0)
      v516 = 22;
    else
      v516 = (*(_QWORD *)&v741[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v741[23] >= 0)
      v517 = v741[23];
    else
      v517 = *(_QWORD *)&v741[8];
    if (v516 - v517 >= 0x3A)
    {
      v518 = v741;
      if (v741[23] < 0)
        v518 = *(_BYTE **)v741;
      v519 = &v518[v517];
      if (&v518[v517] <= "' is invalid. RTCP-MUX is not enabled when it is required."
        && v519 + 58 > "' is invalid. RTCP-MUX is not enabled when it is required.")
      {
        goto LABEL_802;
      }
      qmemcpy(v519, "' is invalid. RTCP-MUX is not enabled when it is required.", 58);
      v520 = v517 + 58;
      if (v515 < 0)
        *(_QWORD *)&v741[8] = v517 + 58;
      else
        v741[23] = v520 & 0x7F;
      v518[v520] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace((std::string *)v741, v516, v517 - v516 + 58, v517, v517, 0, 0x3AuLL, "' is invalid. RTCP-MUX is not enabled when it is required.");
    }
    __p[0] = *(std::string *)v741;
    memset(v741, 0, 24);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      v6 = __p[0].__r_.__value_.__l.__size_;
      if ((__p[0].__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_802;
      v624 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if (__p[0].__r_.__value_.__l.__size_)
      {
        if (!__p[0].__r_.__value_.__r.__words[0])
          goto LABEL_802;
      }
      *(_DWORD *)v748 = 3;
      if (__p[0].__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1662;
    }
    else
    {
      *(_DWORD *)v748 = 3;
      v624 = __p;
      v6 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    }
    v695 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    if (v6 > 0x16)
    {
      v626 = (v6 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v626 = v6 | 7;
      v627 = v626 + 1;
      v625 = (std::string *)operator new(v626 + 1);
      *(_QWORD *)&v748[16] = v6;
      *(_QWORD *)&v748[24] = v627 | 0x8000000000000000;
      *(_QWORD *)&v748[8] = v625;
      p_src = (unint64_t)v625 + v6;
      if (v625 <= v624)
        goto LABEL_1455;
    }
    else
    {
      v748[31] = v6;
      v625 = (std::string *)&v748[8];
      p_src = (unint64_t)&v748[v6 + 8];
      if (&v748[8] > (_BYTE *)v624)
        goto LABEL_1456;
LABEL_1455:
      if (p_src > (unint64_t)v624)
        goto LABEL_802;
    }
LABEL_1456:
    if (v6)
      memmove(v625, v624, v6);
    *(_BYTE *)p_src = 0;
    *(_DWORD *)&v748[32] = 0;
    v748[36] = 0;
    v748[38] = 0;
    if (v695 < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((v741[23] & 0x80000000) != 0)
        operator delete(*(void **)v741);
    }
    v499 = *(_DWORD *)v748;
    v457 = v711;
    p_src = (unint64_t)"http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time";
    v730 = *(_DWORD *)v748;
    if (SHIBYTE(v733) < 0)
    {
LABEL_1130:
      operator delete((void *)v732);
      v499 = v730;
    }
LABEL_1131:
    v732 = *(_OWORD *)&v748[8];
    v733 = *(std::string::pointer *)&v748[24];
    *(_DWORD *)v734 = *(_DWORD *)&v748[32];
    *(_DWORD *)&v734[3] = *(_DWORD *)&v748[35];
    if (v499)
    {
      *(_DWORD *)a6 = v499;
      *(_OWORD *)&v696->__r_.__value_.__l.__data_ = v732;
      *(_QWORD *)(a6 + 24) = v733;
      v732 = 0uLL;
      v733 = 0;
      *(_DWORD *)(a6 + 32) = *(_DWORD *)v734;
      *(_DWORD *)(a6 + 35) = *(_DWORD *)&v734[3];
      goto LABEL_1599;
    }
    memset(v741, 0, 24);
    if ((v467 & 1) != 0)
      goto LABEL_1188;
    if (*(_QWORD *)(v486 + 24) == *(_QWORD *)(v486 + 32))
      v500 = 0;
    else
      v500 = *(unsigned __int8 **)(v486 + 24);
    v501 = *(unsigned __int8 *)(v459 + 23);
    if ((v501 & 0x80u) == 0)
      v502 = *(unsigned __int8 *)(v459 + 23);
    else
      v502 = *(_QWORD *)(v459 + 8);
    v503 = v500[23];
    v504 = (char)v503;
    if ((v503 & 0x80u) != 0)
      v503 = *((_QWORD *)v500 + 1);
    if (v502 != v503)
    {
LABEL_1188:
      webrtc::JsepTransportController::GetEncryptedHeaderExtensionIds((__int32 **)v748, *(_BYTE *)(a1 + 539), *(_QWORD *)(v459 + 32));
      v376 = v715;
      if (*(_QWORD *)v741)
      {
        *(_QWORD *)&v741[8] = *(_QWORD *)v741;
        operator delete(*(void **)v741);
      }
      *(_OWORD *)v741 = *(_OWORD *)v748;
      *(_QWORD *)&v741[16] = *(_QWORD *)&v748[16];
    }
    else
    {
      if (v504 >= 0)
        v505 = v500;
      else
        v505 = *(unsigned __int8 **)v500;
      if ((v501 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v459, v505, *(_QWORD *)(v459 + 8)))
          goto LABEL_1188;
      }
      else if (*(_BYTE *)(v459 + 23))
      {
        v506 = (unsigned __int8 *)v459;
        while (*v506 == *v505)
        {
          ++v506;
          ++v505;
          if (!--v501)
            goto LABEL_1297;
        }
        goto LABEL_1188;
      }
LABEL_1297:
      v577 = (std::string::size_type *)__src.__r_.__value_.__l.__size_;
      if (!__src.__r_.__value_.__l.__size_)
        goto LABEL_1307;
      v578 = &__src.__r_.__value_.__l.__size_;
      do
      {
        v579 = v577;
        v580 = v578;
        v581 = v577[4];
        if (v581 >= v486)
          v578 = v577;
        else
          ++v577;
        v577 = (std::string::size_type *)*v577;
      }
      while (v577);
      if (v578 == &__src.__r_.__value_.__r.__words[1])
        goto LABEL_1307;
      if (v581 < v486)
        v579 = v580;
      if (v486 < v579[4])
LABEL_1307:
        v578 = &__src.__r_.__value_.__l.__size_;
      v376 = v715;
      if (v741 != (_BYTE *)(v578 + 5))
        std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>(v741, (char *)v578[5], (char *)v578[6], (uint64_t)(v578[6] - v578[5]) >> 2);
    }
    if (!*(_BYTE *)(a1 + 553)
      || (v521 = *(_QWORD *)(v459 + 32), v522 = *(uint64_t ***)(v521 + 64),
                                         v523 = *(uint64_t ***)(v521 + 72),
                                         v522 == v523))
    {
LABEL_1232:
      v542 = -1;
    }
    else
    {
      v524 = 0;
      do
      {
        if (*((char *)v522 + 23) < 0)
        {
          v525 = v522[1];
          if (((unint64_t)v525 & 0x8000000000000000) != 0)
            goto LABEL_802;
          v526 = *v522;
          if (v525 && v526 == 0)
            goto LABEL_802;
        }
        else
        {
          v525 = (uint64_t *)*((unsigned __int8 *)v522 + 23);
          v526 = (uint64_t *)v522;
        }
        if (v525 == (uint64_t *)58)
        {
          v528 = *v526;
          v529 = v526[1];
          v530 = v526[2];
          v531 = v526[3];
          v532 = v526[4];
          v533 = v526[5];
          v6 = v526[6];
          v534 = *((unsigned __int16 *)v526 + 28);
          v535 = *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" == v528
              && *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/abs-send-time" == v529;
          v536 = v535 && *(_QWORD *)"c.org/experiments/rtp-hdrext/abs-send-time" == v530;
          v537 = v536 && *(_QWORD *)"periments/rtp-hdrext/abs-send-time" == v531;
          v538 = v537 && *(_QWORD *)"s/rtp-hdrext/abs-send-time" == v532;
          v539 = v538 && *(_QWORD *)"rext/abs-send-time" == v533;
          v540 = v539 && *(_QWORD *)"-send-time" == v6;
          if (v540 && *(unsigned __int16 *)"me" == v534)
          {
            if (*(_BYTE *)(a1 + 539))
            {
              v524 = v522;
              if (*((_BYTE *)v522 + 28))
              {
LABEL_1229:
                v524 = v522;
                goto LABEL_1231;
              }
            }
            else if (!*((_BYTE *)v522 + 28))
            {
              goto LABEL_1229;
            }
          }
        }
        v522 += 4;
      }
      while (v522 != v523);
      if (!v524)
        goto LABEL_1232;
LABEL_1231:
      v542 = *((_DWORD *)v524 + 6);
    }
    v543 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(v702, (const void **)v459, *v699, (uint64_t *)v699);
    if (v699 != (uint64_t **)v543)
    {
      v6 = (size_t)v543;
      if (*(char *)(v459 + 23) < 0)
      {
        p_src = *(_QWORD *)(v459 + 8);
        if ((p_src & 0x8000000000000000) != 0)
          goto LABEL_802;
        v544 = *(const void **)v459;
        if (p_src)
        {
          if (!v544)
            goto LABEL_802;
        }
      }
      else
      {
        p_src = *(unsigned __int8 *)(v459 + 23);
        v544 = (const void *)v459;
      }
      v545 = (_QWORD *)(v6 + 32);
      if (*(char *)(v6 + 55) < 0)
      {
        v546 = *(_QWORD *)(v6 + 40);
        if ((v546 & 0x8000000000000000) != 0)
          goto LABEL_802;
        v545 = (_QWORD *)*v545;
        if (v546)
        {
          if (!v545)
            goto LABEL_802;
        }
      }
      else
      {
        v546 = *(unsigned __int8 *)(v6 + 55);
      }
      if (v546 >= p_src)
        v547 = p_src;
      else
        v547 = v546;
      v548 = memcmp(v544, v545, v547);
      if (v548)
      {
        v457 = v711;
        if (v548 < 0)
          goto LABEL_1262;
LABEL_1252:
        v549 = *(_QWORD **)(v6 + 56);
        if (!v549)
          goto LABEL_1262;
        v550 = *(_DWORD *)(a1 + 832);
        v551 = (const cricket::TransportDescription *)(v458 + 112 * v456 + 24);
        v552 = cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)v748, v551);
        if (a2)
        {
          v553 = v549[7];
          if (v553 && *(_DWORD *)(v553 + 112) == 1 && !v750 && *(_DWORD *)(a1 + 832) == 1)
            v550 = 0;
        }
        else
        {
          v582 = *(_DWORD *)(a1 + 832);
          if (v750 == 1 && v582 == 1)
            v550 = 0;
          v584 = v549[6];
          if (v584 && *(_DWORD *)(v584 + 112) == 1 && !(v582 | v750))
            v550 = 1;
        }
        cricket::TransportDescription::~TransportDescription(v552);
        *(_DWORD *)(a1 + 832) = v550;
        webrtc::JsepTransportController::GetDtlsTransports((webrtc::JsepTransportCollection **)a1, (char **)v748);
        v585 = *(_OWORD *)v748;
        v586 = *(uint64_t **)v748;
        if (*(_QWORD *)v748 != *(_QWORD *)&v748[8])
        {
          do
          {
            v587 = *v586++;
            v588 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v587 + 200))(v587);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v588 + 112))(v588, *(unsigned int *)(a1 + 832));
          }
          while (v586 != *((uint64_t **)&v585 + 1));
        }
        if ((_QWORD)v585)
          operator delete((void *)v585);
        v589 = *(_DWORD *)v495;
        if (*(_DWORD *)v495 != 1)
          LOBYTE(v589) = *(_BYTE *)(*(_QWORD *)(v459 + 32) + 32) != 0;
        v748[0] = v589;
        memset(&v748[8], 0, 24);
        v590 = *(const void **)v741;
        p_src = *(_QWORD *)&v741[8] - *(_QWORD *)v741;
        if (*(_QWORD *)&v741[8] != *(_QWORD *)v741)
        {
          if ((p_src & 0x8000000000000000) != 0)
            goto LABEL_1662;
          *(_QWORD *)&v748[8] = operator new(*(_QWORD *)&v741[8] - *(_QWORD *)v741);
          *(_QWORD *)&v748[16] = *(_QWORD *)&v748[8];
          v591 = *(_QWORD *)&v748[8] + 4 * ((uint64_t)p_src >> 2);
          *(_QWORD *)&v748[24] = v591;
          memcpy(*(void **)&v748[8], v590, p_src);
          *(_QWORD *)&v748[16] = v591;
        }
        *(_DWORD *)&v748[32] = v542;
        cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)v749, v551);
        if (a2)
        {
          cricket::JsepTransport::SetLocalJsepTransportDescription((uint64_t)v549, v748, a3, (uint64_t)__p);
          data = (int)__p[0].__r_.__value_.__l.__data_;
          v457 = v711;
          v376 = v715;
          if (SHIBYTE(v733) < 0)
LABEL_1332:
            operator delete((void *)v732);
        }
        else
        {
          cricket::JsepTransport::SetRemoteJsepTransportDescription(v549, v748, a3, (uint64_t)__p);
          data = (int)__p[0].__r_.__value_.__l.__data_;
          v457 = v711;
          v376 = v715;
          if (SHIBYTE(v733) < 0)
            goto LABEL_1332;
        }
        v732 = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1];
        v733 = __p[1].__r_.__value_.__l.__data_;
        *(_DWORD *)v734 = __p[1].__r_.__value_.__r.__words[1];
        *(_DWORD *)&v734[3] = *(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + 3);
        if (!data)
        {
          v6 = 0;
          goto LABEL_1594;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        {
LABEL_1516:
          v650 = *(char *)(v459 + 23);
          if (v650 >= 0)
            v6 = *(unsigned __int8 *)(v459 + 23);
          else
            v6 = *(_QWORD *)(v459 + 8);
          v651 = v6 + 57;
          if (v6 + 57 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1662;
          if (v651 > 0x16)
          {
            v654 = (v651 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v651 | 7) != 0x17)
              v654 = v651 | 7;
            p_src = v654 + 1;
            p_len = (std::string *)operator new(v654 + 1);
            __len.__r_.__value_.__l.__size_ = v6 + 57;
            __len.__r_.__value_.__r.__words[2] = p_src | 0x8000000000000000;
            __len.__r_.__value_.__r.__words[0] = (std::string::size_type)p_len;
            v653 = &p_len[2].__r_.__value_.__s.__data_[9];
            if (p_len <= (std::string *)"Failed to apply the description for m= section with mid='")
              goto LABEL_1526;
          }
          else
          {
            memset(&__len, 0, sizeof(__len));
            p_len = &__len;
            *((_BYTE *)&__len.__r_.__value_.__s + 23) = v6 + 57;
            v653 = v739;
            if (&__len > (std::string *)"Failed to apply the description for m= section with mid='")
              goto LABEL_1527;
LABEL_1526:
            if (v653 > "Failed to apply the description for m= section with mid='")
              goto LABEL_802;
          }
LABEL_1527:
          qmemcpy(p_len, "Failed to apply the description for m= section with mid='", 57);
          if (v650 >= 0)
            v655 = (char *)v459;
          else
            v655 = *(char **)v459;
          v656 = &v653[v6];
          if (v655 >= v653 && v656 > v655)
            goto LABEL_802;
          if (v6)
            memmove(v653, v655, v6);
          *v656 = 0;
          if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v657 = 22;
          else
            v657 = (__len.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v658 = HIBYTE(__len.__r_.__value_.__r.__words[2]);
          else
            v658 = __len.__r_.__value_.__l.__size_;
          if (v657 - v658 >= 3)
          {
            v659 = &__len;
            if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v659 = (std::string *)__len.__r_.__value_.__r.__words[0];
            v660 = (char *)v659 + v658;
            if ((char *)v659 + v658 <= "': " && v660 + 3 > "': ")
              goto LABEL_802;
            v660[2] = 32;
            *(_WORD *)v660 = 14887;
            v661 = v658 + 3;
            if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
              __len.__r_.__value_.__l.__size_ = v658 + 3;
            else
              *((_BYTE *)&__len.__r_.__value_.__s + 23) = v661 & 0x7F;
            v659->__r_.__value_.__s.__data_[v661] = 0;
          }
          else
          {
            std::string::__grow_by_and_replace(&__len, v657, v658 - v657 + 3, v658, v658, 0, 3uLL, "': ");
          }
          v738 = __len;
          memset(&__len, 0, sizeof(__len));
          v6 = (size_t)&v732;
          if (SHIBYTE(v733) < 0)
          {
            v6 = v732;
            if (!(_QWORD)v732)
              goto LABEL_802;
          }
          v662 = strlen((const char *)v6);
          v663 = v662;
          if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v664 = 22;
          else
            v664 = (v738.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v665 = HIBYTE(v738.__r_.__value_.__r.__words[2]);
          else
            v665 = v738.__r_.__value_.__l.__size_;
          if (v664 - v665 >= v662)
          {
            if (v662)
            {
              if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v666 = &v738;
              else
                v666 = (std::string *)v738.__r_.__value_.__r.__words[0];
              v667 = (char *)v666 + v665;
              if ((unint64_t)v666 + v665 <= v6 && (unint64_t)&v667[v663] > v6)
                goto LABEL_802;
              memmove(v667, (const void *)v6, v663);
              v668 = v665 + v663;
              if (SHIBYTE(v738.__r_.__value_.__r.__words[2]) < 0)
                v738.__r_.__value_.__l.__size_ = v665 + v663;
              else
                *((_BYTE *)&v738.__r_.__value_.__s + 23) = v668 & 0x7F;
              v666->__r_.__value_.__s.__data_[v668] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(&v738, v664, v665 + v662 - v664, v665, v665, 0, v662, (const std::string::value_type *)v6);
          }
          __p[0] = v738;
          memset(&v738, 0, sizeof(v738));
          v669 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          {
            v6 = __p[0].__r_.__value_.__l.__size_;
            v457 = v711;
            if ((__p[0].__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
              goto LABEL_802;
            v670 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            if (__p[0].__r_.__value_.__l.__size_)
            {
              if (!__p[0].__r_.__value_.__r.__words[0])
                goto LABEL_802;
            }
            *(_DWORD *)a6 = 3;
            if (v6 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_1662;
          }
          else
          {
            *(_DWORD *)a6 = 3;
            v670 = __p;
            v6 = v669;
            v457 = v711;
          }
          if (v6 > 0x16)
          {
            v672 = (v6 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v6 | 7) != 0x17)
              v672 = v6 | 7;
            v673 = v672 + 1;
            v671 = (std::string *)operator new(v672 + 1);
            *(_QWORD *)(a6 + 16) = v6;
            *(_QWORD *)(a6 + 24) = v673 | 0x8000000000000000;
            *(_QWORD *)(a6 + 8) = v671;
            p_src = (unint64_t)v671 + v6;
            if (v671 <= v670)
              goto LABEL_1585;
          }
          else
          {
            *(_BYTE *)(a6 + 31) = v6;
            v671 = (std::string *)(a6 + 8);
            p_src = (unint64_t)v696 + v6;
            if (v696 > v670)
              goto LABEL_1586;
LABEL_1585:
            if (p_src > (unint64_t)v670)
              goto LABEL_802;
          }
LABEL_1586:
          if (v6)
            memmove(v671, v670, v6);
          *(_BYTE *)p_src = 0;
          *(_DWORD *)(a6 + 32) = 0;
          *(_BYTE *)(a6 + 36) = 0;
          *(_BYTE *)(a6 + 38) = 0;
          if ((v669 & 0x80) != 0)
          {
            operator delete(__p[0].__r_.__value_.__l.__data_);
            if (SHIBYTE(v738.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v738.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__len.__r_.__value_.__l.__data_);
          v6 = 1;
LABEL_1594:
          cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)v749);
          if (*(_QWORD *)&v748[8])
          {
            *(_QWORD *)&v748[16] = *(_QWORD *)&v748[8];
            operator delete(*(void **)&v748[8]);
          }
LABEL_1399:
          if (*(_QWORD *)v741)
          {
            *(_QWORD *)&v741[8] = *(_QWORD *)v741;
            operator delete(*(void **)v741);
          }
          if ((_DWORD)v6)
            goto LABEL_1599;
          goto LABEL_1039;
        }
        v613 = *(char *)(v459 + 23);
        if (v613 >= 0)
          v6 = *(unsigned __int8 *)(v459 + 23);
        else
          v6 = *(_QWORD *)(v459 + 8);
        v614 = v6 + 57;
        if (v6 + 57 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1662;
        if (v614 > 0x16)
        {
          v628 = (v614 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v614 | 7) != 0x17)
            v628 = v614 | 7;
          p_src = v628 + 1;
          v615 = (std::string *)operator new(v628 + 1);
          __len.__r_.__value_.__l.__size_ = v6 + 57;
          __len.__r_.__value_.__r.__words[2] = p_src | 0x8000000000000000;
          __len.__r_.__value_.__r.__words[0] = (std::string::size_type)v615;
        }
        else
        {
          memset(&__len, 0, sizeof(__len));
          v615 = &__len;
          *((_BYTE *)&__len.__r_.__value_.__s + 23) = v6 + 57;
        }
        v629 = &v615[2].__r_.__value_.__s.__data_[9];
        if (v615 <= (std::string *)"Failed to apply the description for m= section with mid='"
          && v629 > "Failed to apply the description for m= section with mid='")
        {
          goto LABEL_802;
        }
        qmemcpy(v615, "Failed to apply the description for m= section with mid='", 57);
        v630 = v613 >= 0 ? (char *)v459 : *(char **)v459;
        v631 = &v629[v6];
        if (v630 >= v629 && v631 > v630)
          goto LABEL_802;
        if (v6)
          memmove(v629, v630, v6);
        *v631 = 0;
        if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v632 = 22;
        else
          v632 = (__len.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v633 = HIBYTE(__len.__r_.__value_.__r.__words[2]);
        else
          v633 = __len.__r_.__value_.__l.__size_;
        if (v632 - v633 >= 3)
        {
          v634 = &__len;
          if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v634 = (std::string *)__len.__r_.__value_.__r.__words[0];
          v635 = (char *)v634 + v633;
          if ((char *)v634 + v633 <= "': " && v635 + 3 > "': ")
            goto LABEL_802;
          v635[2] = 32;
          *(_WORD *)v635 = 14887;
          v636 = v633 + 3;
          if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
            __len.__r_.__value_.__l.__size_ = v633 + 3;
          else
            *((_BYTE *)&__len.__r_.__value_.__s + 23) = v636 & 0x7F;
          v634->__r_.__value_.__s.__data_[v636] = 0;
        }
        else
        {
          std::string::__grow_by_and_replace(&__len, v632, v633 - v632 + 3, v633, v633, 0, 3uLL, "': ");
        }
        v738 = __len;
        memset(&__len, 0, sizeof(__len));
        v6 = (size_t)&v732;
        if (SHIBYTE(v733) < 0)
        {
          v6 = v732;
          if (!(_QWORD)v732)
            goto LABEL_802;
        }
        v637 = strlen((const char *)v6);
        v644 = v637;
        if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v645 = 22;
        else
          v645 = (v738.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v646 = HIBYTE(v738.__r_.__value_.__r.__words[2]);
        else
          v646 = v738.__r_.__value_.__l.__size_;
        if (v645 - v646 >= v637)
        {
          if (v637)
          {
            if ((v738.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v647 = &v738;
            else
              v647 = (std::string *)v738.__r_.__value_.__r.__words[0];
            v648 = (char *)v647 + v646;
            if ((unint64_t)v647 + v646 <= v6 && (unint64_t)&v648[v644] > v6)
              goto LABEL_802;
            memmove(v648, (const void *)v6, v644);
            v649 = v646 + v644;
            if (SHIBYTE(v738.__r_.__value_.__r.__words[2]) < 0)
              v738.__r_.__value_.__l.__size_ = v646 + v644;
            else
              *((_BYTE *)&v738.__r_.__value_.__s + 23) = v649 & 0x7F;
            v647->__r_.__value_.__s.__data_[v649] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&v738, v645, v646 + v637 - v645, v646, v646, 0, v637, (const std::string::value_type *)v6);
        }
        __p[0] = v738;
        memset(&v738, 0, sizeof(v738));
        v736.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
        v736.__r_.__value_.__l.__size_ = 17;
        rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v645, v638, v639, v640, v641, v642, v643, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc");
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p[0].__r_.__value_.__l.__data_);
          v376 = v715;
          if (SHIBYTE(v738.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_1549;
LABEL_1514:
          if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
LABEL_1550:
            operator delete(__len.__r_.__value_.__l.__data_);
        }
        else
        {
          v376 = v715;
          if ((SHIBYTE(v738.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_1514;
LABEL_1549:
          operator delete(v738.__r_.__value_.__l.__data_);
          if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_1550;
        }
        v694 = v694 & 0xFFFFFFFF00000000 | 0x15C3;
        goto LABEL_1516;
      }
      v36 = p_src >= v546;
      v457 = v711;
      if (v36)
        goto LABEL_1252;
    }
LABEL_1262:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    {
      p_src = (unint64_t)"'";
      goto LABEL_1341;
    }
    v561 = *(char *)(v459 + 23);
    if (v561 >= 0)
      v6 = *(unsigned __int8 *)(v459 + 23);
    else
      v6 = *(_QWORD *)(v459 + 8);
    v562 = v6 + 50;
    p_src = (unint64_t)"'";
    if (v6 + 50 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1662;
    if (v562 > 0x16)
    {
      v564 = (v562 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v562 | 7) != 0x17)
        v564 = v562 | 7;
      v565 = v564 + 1;
      v563 = (char *)operator new(v564 + 1);
      v566 = v565 | 0x8000000000000000;
      p_src = (unint64_t)"'";
      __p[0].__r_.__value_.__r.__words[2] = v566;
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v563;
      __p[0].__r_.__value_.__l.__size_ = v6 + 50;
    }
    else
    {
      memset(__p, 0, 24);
      v563 = (char *)__p;
      *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v6 + 50;
    }
    v567 = v563 + 50;
    if (v563 <= "Could not find transport for m= section with mid='"
      && v567 > "Could not find transport for m= section with mid='")
    {
      goto LABEL_802;
    }
    qmemcpy(v563, "Could not find transport for m= section with mid='", 50);
    v569 = v561 >= 0 ? (char *)v459 : *(char **)v459;
    v570 = &v567[v6];
    if (v569 >= v567 && v570 > v569)
      goto LABEL_802;
    if (v6)
      memmove(v567, v569, v6);
    *v570 = 0;
    v571 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v572 = 22;
    else
      v572 = (__p[0].__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v571 = __p[0].__r_.__value_.__l.__size_;
    if (v572 == v571)
    {
      std::string::__grow_by_and_replace(__p, v572, 1uLL, v572, v572, 0, 1uLL, "'");
      v573 = (unint64_t)v697;
    }
    else
    {
      v574 = __p;
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v574 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      v575 = (char *)v574 + v571;
      if ((char *)v574 + v571 <= "'" && v575 + 1 > "'")
        goto LABEL_802;
      *v575 = 39;
      v576 = v571 + 1;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        __p[0].__r_.__value_.__l.__size_ = v576;
      else
        *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v576 & 0x7F;
      v573 = (unint64_t)v697;
      v574->__r_.__value_.__s.__data_[v576] = 0;
    }
    *(std::string *)v748 = __p[0];
    memset(__p, 0, 24);
    v738.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
    v738.__r_.__value_.__l.__size_ = 17;
    v697 = (void *)(v573 & 0xFFFFFFFF00000000 | 0x1523);
    rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v572, v555, v556, v557, v558, v559, v560, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc");
    if ((v748[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v748);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_1377;
    }
    else
    {
      if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1341;
LABEL_1377:
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
LABEL_1341:
    v592 = *(char *)(v459 + 23);
    if (v592 >= 0)
      v6 = *(unsigned __int8 *)(v459 + 23);
    else
      v6 = *(_QWORD *)(v459 + 8);
    v593 = v6 + 50;
    if (v6 + 50 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1662;
    if (v593 > 0x16)
    {
      v595 = (v593 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v593 | 7) != 0x17)
        v595 = v593 | 7;
      v596 = v595 + 1;
      v594 = (char *)operator new(v595 + 1);
      v597 = v596 | 0x8000000000000000;
      p_src = (unint64_t)"'";
      __p[0].__r_.__value_.__r.__words[2] = v597;
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v594;
      __p[0].__r_.__value_.__l.__size_ = v6 + 50;
    }
    else
    {
      memset(__p, 0, 24);
      v594 = (char *)__p;
      *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v6 + 50;
    }
    v598 = v594 + 50;
    if (v594 <= "Could not find transport for m= section with mid='"
      && v598 > "Could not find transport for m= section with mid='")
    {
      goto LABEL_802;
    }
    qmemcpy(v594, "Could not find transport for m= section with mid='", 50);
    v600 = v592 >= 0 ? (char *)v459 : *(char **)v459;
    v601 = &v598[v6];
    if (v600 >= v598 && v601 > v600)
      goto LABEL_802;
    if (v6)
      memmove(v598, v600, v6);
    *v601 = 0;
    v603 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v604 = 22;
    else
      v604 = (__p[0].__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v603 = __p[0].__r_.__value_.__l.__size_;
    if (v604 == v603)
    {
      std::string::__grow_by_and_replace(__p, v604, 1uLL, v604, v604, 0, 1uLL, "'");
    }
    else
    {
      v605 = __p;
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v605 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      v606 = (char *)v605 + v603;
      if ((char *)v605 + v603 <= "'" && v606 + 1 > "'")
        goto LABEL_802;
      *v606 = 39;
      v607 = v603 + 1;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        __p[0].__r_.__value_.__l.__size_ = v607;
      else
        *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v607 & 0x7F;
      v605->__r_.__value_.__s.__data_[v607] = 0;
    }
    *(std::string *)v748 = __p[0];
    memset(__p, 0, 24);
    v608 = v748[23];
    if ((v748[23] & 0x80000000) != 0)
    {
      v6 = *(_QWORD *)&v748[8];
      if ((*(_QWORD *)&v748[8] & 0x8000000000000000) != 0)
        goto LABEL_802;
      v609 = *(std::string **)v748;
      if (*(_QWORD *)&v748[8])
      {
        if (!*(_QWORD *)v748)
          goto LABEL_802;
      }
      *(_DWORD *)a6 = 3;
      if (v6 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1662;
    }
    else
    {
      *(_DWORD *)a6 = 3;
      v609 = (std::string *)v748;
      v6 = v608;
    }
    if (v6 > 0x16)
    {
      v611 = (v6 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v611 = v6 | 7;
      v612 = v611 + 1;
      v610 = (std::string *)operator new(v611 + 1);
      *(_QWORD *)(a6 + 16) = v6;
      *(_QWORD *)(a6 + 24) = v612 | 0x8000000000000000;
      *(_QWORD *)(a6 + 8) = v610;
      p_src = (unint64_t)v610 + v6;
      if (v610 > v609)
        goto LABEL_1393;
    }
    else
    {
      *(_BYTE *)(a6 + 31) = v6;
      v610 = (std::string *)(a6 + 8);
      p_src = (unint64_t)v696 + v6;
      if (v696 > v609)
      {
LABEL_1393:
        if (v6)
          memmove(v610, v609, v6);
        *(_BYTE *)p_src = 0;
        *(_DWORD *)(a6 + 32) = 0;
        *(_BYTE *)(a6 + 36) = 0;
        *(_BYTE *)(a6 + 38) = 0;
        if ((v608 & 0x80) != 0)
        {
          operator delete(*(void **)v748);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        v6 = 1;
        goto LABEL_1399;
      }
    }
    if (p_src > (unint64_t)v609)
      goto LABEL_802;
    goto LABEL_1393;
  }
  v36 = v469 >= v472;
  v457 = v711;
  if (!v36)
    goto LABEL_1118;
LABEL_1098:
  v486 = *(_QWORD *)(v6 + 56);
  if (!v486)
    goto LABEL_1119;
  v6 = *(_QWORD *)(v486 + 24);
  if (v6 == *(_QWORD *)(v486 + 32))
    v487 = 0;
  else
    v487 = *(unsigned __int8 **)(v486 + 24);
  if ((v467 & 0x80u) == 0)
    v488 = v467;
  else
    v488 = *(_QWORD *)(v459 + 8);
  v489 = v487[23];
  v490 = (char)v489;
  if ((v489 & 0x80u) != 0)
    v489 = *((_QWORD *)v487 + 1);
  if (v488 != v489)
    goto LABEL_1414;
  if (v490 >= 0)
    v491 = v487;
  else
    v491 = *(unsigned __int8 **)v487;
  if ((v467 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v459, v491, *(_QWORD *)(v459 + 8)))
      goto LABEL_1414;
    LOBYTE(v467) = 0;
    v457 = v711;
    goto LABEL_1120;
  }
  if (!(_DWORD)v467)
  {
LABEL_1116:
    v457 = v711;
    goto LABEL_1120;
  }
  v492 = (unsigned __int8 *)(p_src + 40 * v456);
  while (*v492 == *v491)
  {
    ++v492;
    ++v491;
    if (!--v467)
      goto LABEL_1116;
  }
LABEL_1414:
  v616 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)v715, (const void **)v487, *v704, (uint64_t *)v704);
  if (v704 == (uint64_t **)v616)
  {
    v457 = v711;
    v376 = v715;
    if ((webrtc::JsepTransportCollection::SetTransportForMid(v715, p_src + 40 * v456, 0) & 1) == 0)
      goto LABEL_1603;
    goto LABEL_1039;
  }
  v617 = v616;
  if (((char)v487[23] & 0x80000000) == 0)
  {
    v618 = v487[23];
    goto LABEL_1423;
  }
  v618 = *((_QWORD *)v487 + 1);
  if ((v618 & 0x8000000000000000) != 0)
    goto LABEL_802;
  v6 = *(_QWORD *)v487;
  if (v618)
  {
    v457 = v711;
    if (!v6)
      goto LABEL_802;
  }
  else
  {
LABEL_1423:
    v457 = v711;
  }
  v619 = v616 + 4;
  if (*((char *)v616 + 55) < 0)
  {
    p_src = v616[5];
    if ((p_src & 0x8000000000000000) != 0)
      goto LABEL_802;
    v619 = (_QWORD *)*v619;
    if (p_src && v619 == 0)
      goto LABEL_802;
  }
  else
  {
    p_src = *((unsigned __int8 *)v616 + 55);
  }
  if (p_src >= v618)
    v621 = v618;
  else
    v621 = p_src;
  v622 = memcmp((const void *)v6, v619, v621);
  if (v622)
  {
    if (v622 < 0)
      goto LABEL_1439;
    goto LABEL_1436;
  }
  if (v618 >= p_src)
  {
LABEL_1436:
    v623 = v617[7];
    v376 = v715;
    if ((webrtc::JsepTransportCollection::SetTransportForMid(v715, v459, v623) & 1) == 0)
      goto LABEL_1603;
    goto LABEL_1039;
  }
LABEL_1439:
  v376 = v715;
  if ((webrtc::JsepTransportCollection::SetTransportForMid(v715, v459, 0) & 1) != 0)
    goto LABEL_1039;
LABEL_1603:
  p_src = *(char *)(v459 + 23);
  if ((p_src & 0x80000000) == 0)
    v6 = *(unsigned __int8 *)(v459 + 23);
  else
    v6 = *(_QWORD *)(v459 + 8);
  v674 = v6 + 51;
  if (v6 + 51 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_1662;
  v675 = (_BYTE *)(a6 + 8);
  if (v674 > 0x16)
  {
    v677 = (v674 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v674 | 7) != 0x17)
      v677 = v674 | 7;
    v678 = v677 + 1;
    v676 = (char *)operator new(v677 + 1);
    __p[0].__r_.__value_.__r.__words[2] = v678 | 0x8000000000000000;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v676;
    __p[0].__r_.__value_.__l.__size_ = v6 + 51;
  }
  else
  {
    memset(__p, 0, 24);
    v676 = (char *)__p;
    *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v6 + 51;
  }
  v679 = v676 + 51;
  if (v676 <= "Failed to process the bundled m= section with mid='"
    && v679 > "Failed to process the bundled m= section with mid='")
  {
    goto LABEL_802;
  }
  qmemcpy(v676, "Failed to process the bundled m= section with mid='", 51);
  v681 = (p_src & 0x80000000) == 0 ? (char *)v459 : *(char **)v459;
  v682 = &v679[v6];
  if (v681 >= v679 && v682 > v681)
    goto LABEL_802;
  if (v6)
    memmove(v679, v681, v6);
  *v682 = 0;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v684 = 22;
  else
    v684 = (__p[0].__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v685 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  else
    v685 = __p[0].__r_.__value_.__l.__size_;
  if (v684 - v685 >= 2)
  {
    v686 = __p;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v686 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v687 = (_WORD *)((char *)v686 + v685);
    if ((char *)v686 + v685 <= "'." && v687 + 1 > (_WORD *)"'.")
      goto LABEL_802;
    *v687 = 11815;
    v688 = v685 + 2;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      __p[0].__r_.__value_.__l.__size_ = v685 + 2;
    else
      *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v688 & 0x7F;
    v686->__r_.__value_.__s.__data_[v688] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(__p, v684, v685 - v684 + 2, v685, v685, 0, 2uLL, "'.");
  }
  *(std::string *)v748 = __p[0];
  memset(__p, 0, 24);
  v689 = v748[23];
  if ((v748[23] & 0x80000000) == 0)
  {
    *(_DWORD *)a6 = 3;
    v690 = v748;
    v6 = v689;
    goto LABEL_1647;
  }
  v6 = *(_QWORD *)&v748[8];
  if ((*(_QWORD *)&v748[8] & 0x8000000000000000) != 0)
    goto LABEL_802;
  v690 = *(_BYTE **)v748;
  if (*(_QWORD *)&v748[8])
  {
    if (!*(_QWORD *)v748)
      goto LABEL_802;
  }
  *(_DWORD *)a6 = 3;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_1662;
LABEL_1647:
  if (v6 > 0x16)
  {
    v691 = (v6 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v691 = v6 | 7;
    v692 = v691 + 1;
    v675 = operator new(v691 + 1);
    *(_QWORD *)(a6 + 16) = v6;
    *(_QWORD *)(a6 + 24) = v692 | 0x8000000000000000;
    *(_QWORD *)(a6 + 8) = v675;
  }
  else
  {
    *(_BYTE *)(a6 + 31) = v6;
  }
  p_src = (unint64_t)&v675[v6];
  if (v675 <= v690 && p_src > (unint64_t)v690)
    goto LABEL_802;
  if (v6)
    memmove(v675, v690, v6);
  *(_BYTE *)p_src = 0;
  *(_DWORD *)(a6 + 32) = 0;
  *(_BYTE *)(a6 + 36) = 0;
  *(_BYTE *)(a6 + 38) = 0;
  if ((v689 & 0x80) != 0)
  {
    operator delete(*(void **)v748);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_1599:
  std::__tree<std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::__map_value_compare<cricket::ContentGroup const*,std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::less<cricket::ContentGroup const*>,true>,std::allocator<std::__value_type<cricket::ContentGroup const*,std::vector<int>>>>::destroy((_QWORD *)__src.__r_.__value_.__l.__size_);
  if (SHIBYTE(v733) < 0)
    operator delete((void *)v732);
}

uint64_t *webrtc::JsepTransportController::GetDataChannelTransport(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t *v3;
  uint64_t *result;
  uint64_t *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  BOOL v9;
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a2;
  v3 = (uint64_t *)(a1 + 408);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 400, a2, *(uint64_t **)(a1 + 408), (uint64_t *)(a1 + 408));
  if (v3 == result)
    return 0;
  v5 = result;
  if (*((char *)v2 + 23) < 0)
  {
    v6 = (size_t)v2[1];
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_26;
    v2 = (const void **)*v2;
    if (v6)
    {
      if (!v2)
        goto LABEL_26;
    }
  }
  else
  {
    v6 = *((unsigned __int8 *)v2 + 23);
  }
  v7 = result + 4;
  if ((*((char *)result + 55) & 0x80000000) == 0)
  {
    v8 = *((unsigned __int8 *)result + 55);
    goto LABEL_14;
  }
  v8 = result[5];
  if ((v8 & 0x8000000000000000) != 0 || ((v7 = (_QWORD *)*v7, v8) ? (v9 = v7 == 0) : (v9 = 0), v9))
  {
LABEL_26:
    __break(1u);
    return result;
  }
LABEL_14:
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = memcmp(v2, v7, v10);
  if (v11)
  {
    if (v11 < 0)
      return 0;
  }
  else if (v6 < v8)
  {
    return 0;
  }
  v12 = v5[7];
  if (!v12)
    return 0;
  v13 = *(_QWORD *)(v12 + 120);
  if (v13)
    return (uint64_t *)(v13 + 8);
  else
    return 0;
}

uint64_t *webrtc::JsepTransportController::GetDtlsTransport(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t *v3;
  uint64_t *result;
  uint64_t *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a2;
  v3 = (uint64_t *)(a1 + 408);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 400, a2, *(uint64_t **)(a1 + 408), (uint64_t *)(a1 + 408));
  if (v3 == result)
    return 0;
  v5 = result;
  if (*((char *)v2 + 23) < 0)
  {
    v6 = (size_t)v2[1];
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_25;
    v2 = (const void **)*v2;
    if (v6)
    {
      if (!v2)
        goto LABEL_25;
    }
  }
  else
  {
    v6 = *((unsigned __int8 *)v2 + 23);
  }
  v7 = result + 4;
  if ((*((char *)result + 55) & 0x80000000) == 0)
  {
    v8 = *((unsigned __int8 *)result + 55);
    goto LABEL_14;
  }
  v8 = result[5];
  if ((v8 & 0x8000000000000000) == 0)
  {
    v7 = (_QWORD *)*v7;
    if (!v8 || v7 != 0)
    {
LABEL_14:
      if (v8 >= v6)
        v10 = v6;
      else
        v10 = v8;
      v11 = memcmp(v2, v7, v10);
      if (v11)
      {
        if (v11 < 0)
          return 0;
      }
      else if (v6 < v8)
      {
        return 0;
      }
      v12 = v5[7];
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 104);
        if (v13)
          return *(uint64_t **)(v13 + 136);
      }
      return 0;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t *webrtc::JsepTransportController::LookupDtlsTransportByMid@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  const void **v3;
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;

  v3 = a2;
  v5 = (uint64_t *)(a1 + 408);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 400, a2, *(uint64_t **)(a1 + 408), (uint64_t *)(a1 + 408));
  if (v5 == result)
    goto LABEL_24;
  v7 = result;
  if (*((char *)v3 + 23) < 0)
  {
    v8 = (size_t)v3[1];
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_26;
    v3 = (const void **)*v3;
    if (v8)
    {
      if (!v3)
        goto LABEL_26;
    }
  }
  else
  {
    v8 = *((unsigned __int8 *)v3 + 23);
  }
  v9 = result + 4;
  if ((*((char *)result + 55) & 0x80000000) == 0)
  {
    v10 = *((unsigned __int8 *)result + 55);
    goto LABEL_14;
  }
  v10 = result[5];
  if ((v10 & 0x8000000000000000) != 0 || ((v9 = (_QWORD *)*v9, v10) ? (v11 = v9 == 0) : (v11 = 0), v11))
  {
LABEL_26:
    __break(1u);
    return result;
  }
LABEL_14:
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  result = (uint64_t *)memcmp(v3, v9, v12);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
      goto LABEL_24;
  }
  else if (v8 < v10)
  {
LABEL_24:
    *a3 = 0;
    return result;
  }
  v13 = v7[7];
  if (!v13)
    goto LABEL_24;
  result = *(uint64_t **)(v13 + 104);
  *a3 = result;
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))*result)(result);
  return result;
}

uint64_t *webrtc::JsepTransportController::GetSctpTransport@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  const void **v3;
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;

  v3 = a2;
  v5 = (uint64_t *)(a1 + 408);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 400, a2, *(uint64_t **)(a1 + 408), (uint64_t *)(a1 + 408));
  if (v5 == result)
    goto LABEL_24;
  v7 = result;
  if (*((char *)v3 + 23) < 0)
  {
    v8 = (size_t)v3[1];
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_26;
    v3 = (const void **)*v3;
    if (v8)
    {
      if (!v3)
        goto LABEL_26;
    }
  }
  else
  {
    v8 = *((unsigned __int8 *)v3 + 23);
  }
  v9 = result + 4;
  if ((*((char *)result + 55) & 0x80000000) == 0)
  {
    v10 = *((unsigned __int8 *)result + 55);
    goto LABEL_14;
  }
  v10 = result[5];
  if ((v10 & 0x8000000000000000) != 0 || ((v9 = (_QWORD *)*v9, v10) ? (v11 = v9 == 0) : (v11 = 0), v11))
  {
LABEL_26:
    __break(1u);
    return result;
  }
LABEL_14:
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  result = (uint64_t *)memcmp(v3, v9, v12);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
      goto LABEL_24;
  }
  else if (v8 < v10)
  {
LABEL_24:
    *a3 = 0;
    return result;
  }
  v13 = v7[7];
  if (!v13)
    goto LABEL_24;
  result = *(uint64_t **)(v13 + 120);
  *a3 = result;
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))*result)(result);
  return result;
}

void webrtc::JsepTransportController::GetDtlsTransports(webrtc::JsepTransportCollection **this@<X0>, char **a2@<X8>)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  webrtc::JsepTransportCollection::Transports(this + 47, &v61);
  v3 = v61;
  v4 = v62;
  if (v61 == v62)
    goto LABEL_67;
  v5 = 0;
  v6 = 0;
  v59 = v62;
  do
  {
    v8 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(*(_QWORD *)v3 + 104);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 136);
      if (v10)
      {
        v11 = (unint64_t)a2[2];
        if ((unint64_t)v5 < v11)
        {
          if (!v5)
            goto LABEL_70;
          *(_QWORD *)v5 = v10;
          v12 = v5 + 8;
          goto LABEL_31;
        }
        v13 = (v5 - v6) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          goto LABEL_71;
        v15 = v11 - (_QWORD)v6;
        if (v15 >> 2 > v14)
          v14 = v15 >> 2;
        v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8;
        v17 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v16)
          v17 = v14;
        if (!v17)
          goto LABEL_70;
        if (v17 >> 61)
          goto LABEL_72;
        v60 = 8 * v17;
        v18 = operator new(8 * v17);
        v19 = &v18[8 * v13];
        *(_QWORD *)v19 = v10;
        v12 = v19 + 8;
        if (v5 == v6)
        {
          *a2 = v19;
          a2[1] = v12;
          a2[2] = &v18[v60];
          if (!v6)
            goto LABEL_30;
          goto LABEL_29;
        }
        v20 = v5 - v6 - 8;
        if (v20 < 0x168
          || ((v21 = (v5 - 8 - v6) & 0xFFFFFFFFFFFFFFF8,
               v22 = (unint64_t)&v18[v5 - v6 - 8],
               v23 = v22 - v21,
               v24 = (unint64_t)&v5[-v21 - 8],
               v23 <= v22)
            ? (v25 = v24 > (unint64_t)(v5 - 8))
            : (v25 = 1),
              v25 || (unint64_t)(v6 - v18) < 0x20))
        {
          v26 = v5;
          v27 = v60;
        }
        else
        {
          v46 = (v20 >> 3) + 1;
          v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
          v26 = &v5[-v47];
          v19 -= v47;
          v48 = &v18[8 * v13 - 16];
          v49 = v5 - 16;
          v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v51 = *(_OWORD *)v49;
            *(v48 - 1) = *((_OWORD *)v49 - 1);
            *v48 = v51;
            v48 -= 2;
            v49 -= 32;
            v50 -= 4;
          }
          while (v50);
          v27 = v60;
          if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_28:
            *a2 = v19;
            a2[1] = v12;
            a2[2] = &v18[v27];
            if (!v6)
            {
LABEL_30:
              v6 = v19;
              v4 = v59;
LABEL_31:
              a2[1] = v12;
              v5 = v12;
              goto LABEL_32;
            }
LABEL_29:
            operator delete(v6);
            goto LABEL_30;
          }
        }
        do
        {
          v28 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *((_QWORD *)v19 - 1) = v28;
          v19 -= 8;
        }
        while (v26 != v6);
        goto LABEL_28;
      }
    }
LABEL_32:
    v29 = *(_QWORD *)(v8 + 112);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 136);
      if (v30)
      {
        v31 = (unint64_t)a2[2];
        if ((unint64_t)v5 < v31)
        {
          if (!v5)
            goto LABEL_70;
          *(_QWORD *)v5 = v30;
          v7 = v5 + 8;
        }
        else
        {
          v32 = (v5 - v6) >> 3;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61)
            goto LABEL_71;
          v34 = v31 - (_QWORD)v6;
          if (v34 >> 2 > v33)
            v33 = v34 >> 2;
          v16 = (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8;
          v35 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v16)
            v35 = v33;
          if (!v35)
          {
LABEL_70:
            __break(1u);
LABEL_71:
            abort();
          }
          if (v35 >> 61)
LABEL_72:
            std::__throw_bad_array_new_length[abi:sn180100]();
          v36 = 8 * v35;
          v37 = operator new(8 * v35);
          v38 = &v37[8 * v32];
          *(_QWORD *)v38 = v30;
          v7 = v38 + 8;
          if (v5 != v6)
          {
            v39 = v5 - v6 - 8;
            if (v39 < 0x168)
            {
              v40 = v5;
              goto LABEL_62;
            }
            v41 = (v5 - 8 - v6) & 0xFFFFFFFFFFFFFFF8;
            v42 = (unint64_t)&v37[v5 - v6 - 8];
            v43 = v42 - v41;
            v44 = (unint64_t)&v5[-v41 - 8];
            if (v43 > v42 || v44 > (unint64_t)(v5 - 8))
            {
              v40 = v5;
              goto LABEL_62;
            }
            if ((unint64_t)(v6 - v37) < 0x20)
            {
              v40 = v5;
              goto LABEL_62;
            }
            v52 = (v39 >> 3) + 1;
            v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
            v40 = &v5[-v53];
            v38 -= v53;
            v54 = &v37[8 * v32 - 16];
            v55 = v5 - 16;
            v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v57 = *(_OWORD *)v55;
              *(v54 - 1) = *((_OWORD *)v55 - 1);
              *v54 = v57;
              v54 -= 2;
              v55 -= 32;
              v56 -= 4;
            }
            while (v56);
            if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_62:
                v58 = *((_QWORD *)v40 - 1);
                v40 -= 8;
                *((_QWORD *)v38 - 1) = v58;
                v38 -= 8;
              }
              while (v40 != v6);
            }
            v5 = v6;
          }
          v6 = v38;
          *a2 = v38;
          a2[1] = v7;
          a2[2] = &v37[v36];
          if (v5)
            operator delete(v5);
        }
        a2[1] = v7;
        v5 = v7;
      }
    }
    v3 += 8;
  }
  while (v3 != v4);
  v3 = v61;
LABEL_67:
  if (v3)
    operator delete(v3);
}

uint64_t *webrtc::JsepTransportController::NeedsIceRestart(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t *v3;
  uint64_t *result;
  uint64_t *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  size_t v10;
  int v11;
  uint64_t v12;

  v2 = a2;
  v3 = (uint64_t *)(a1 + 384);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 376, a2, *(uint64_t **)(a1 + 384), (uint64_t *)(a1 + 384));
  if (v3 == result)
    return 0;
  v5 = result;
  if (*((char *)v2 + 23) < 0)
  {
    v6 = (size_t)v2[1];
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_24;
    v2 = (const void **)*v2;
    if (v6)
    {
      if (!v2)
        goto LABEL_24;
    }
  }
  else
  {
    v6 = *((unsigned __int8 *)v2 + 23);
  }
  v7 = result + 4;
  if ((*((char *)result + 55) & 0x80000000) == 0)
  {
    v8 = *((unsigned __int8 *)result + 55);
    goto LABEL_14;
  }
  v8 = result[5];
  if ((v8 & 0x8000000000000000) == 0)
  {
    v7 = (_QWORD *)*v7;
    if (!v8 || v7 != 0)
    {
LABEL_14:
      if (v8 >= v6)
        v10 = v6;
      else
        v10 = v8;
      v11 = memcmp(v2, v7, v10);
      if (v11)
      {
        if (v11 < 0)
          return 0;
      }
      else if (v6 < v8)
      {
        return 0;
      }
      v12 = v5[7];
      if (v12)
        return (uint64_t *)(*(_BYTE *)(v12 + 32) != 0);
      return 0;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t *webrtc::JsepTransportController::GetDtlsRole(uint64_t a1, const void **a2)
{
  uint64_t *result;
  uint64_t *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  size_t v15;
  int v16;
  int v17;
  char v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t v21;

  if (!rtc::Thread::IsCurrent(*(rtc::Thread **)(a1 + 352)))
  {
    v7 = *(_QWORD *)(a1 + 352);
    v19[0] = a1;
    v19[1] = a2;
    LOBYTE(v21) = 0;
    BYTE4(v21) = 0;
    v20[0] = &v21;
    v20[1] = v19;
    (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t *), char *))(*(_QWORD *)v7 + 96))(v7, v20, rtc::FunctionView<void ()(void)>::CallVoidPtr<std::optional<rtc::SSLRole> rtc::Thread::BlockingCall<webrtc::JsepTransportController::GetDtlsRole(std::string const&)::$_0,std::optional<rtc::SSLRole>,void>(webrtc::JsepTransportController::GetDtlsRole(std::string const&)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v18);
    LOBYTE(v8) = v21;
    v9 = v21 & 0xFFFFFF00;
    v10 = v21 & 0xFFFFFF0000000000;
    v11 = v21 & 0xFF00000000;
    return (uint64_t *)(v11 | v10 | v8 | v9 & 0xFFFFFF00);
  }
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 400, a2, *(uint64_t **)(a1 + 408), (uint64_t *)(a1 + 408));
  if ((uint64_t *)(a1 + 408) == result)
    goto LABEL_26;
  v5 = result;
  if (*((char *)a2 + 23) < 0)
  {
    v6 = (size_t)a2[1];
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_29;
    a2 = (const void **)*a2;
    if (v6)
    {
      if (!a2)
        goto LABEL_29;
    }
  }
  else
  {
    v6 = *((unsigned __int8 *)a2 + 23);
  }
  v12 = result + 4;
  if ((*((char *)result + 55) & 0x80000000) == 0)
  {
    v13 = *((unsigned __int8 *)result + 55);
    goto LABEL_16;
  }
  v13 = result[5];
  if ((v13 & 0x8000000000000000) == 0)
  {
    v12 = (_QWORD *)*v12;
    if (!v13 || v12 != 0)
    {
LABEL_16:
      if (v13 >= v6)
        v15 = v6;
      else
        v15 = v13;
      v16 = memcmp(a2, v12, v15);
      if (v16)
      {
        if ((v16 & 0x80000000) == 0)
          goto LABEL_21;
      }
      else if (v6 >= v13)
      {
LABEL_21:
        v10 = v5[7];
        if (v10)
        {
          LODWORD(v20[0]) = 0;
          v17 = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(v10 + 104) + 136) + 104))(*(_QWORD *)(*(_QWORD *)(v10 + 104) + 136), v20);
          v10 = 0;
          v8 = LODWORD(v20[0]) | 0x100000000;
          if (!v17)
            v8 = 0;
          v9 = v8 & 0xFFFFFF00;
          v11 = v8 & 0x100000000;
          return (uint64_t *)(v11 | v10 | v8 | v9 & 0xFFFFFF00);
        }
        goto LABEL_27;
      }
LABEL_26:
      v10 = 0;
LABEL_27:
      v11 = 0;
      LOBYTE(v8) = 0;
      v9 = 0;
      return (uint64_t *)(v11 | v10 | v8 | v9 & 0xFFFFFF00);
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

BOOL webrtc::JsepTransportController::SetLocalCertificate(uint64_t a1, unsigned int **a2)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int **v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  _QWORD v29[2];
  char v30;

  if (rtc::Thread::IsCurrent(*(rtc::Thread **)(a1 + 352)))
  {
    if (*(_QWORD *)(a1 + 848))
      return 0;
    v6 = *a2;
    if (!*a2)
    {
      return 0;
    }
    else
    {
      v7 = (unsigned int **)(a1 + 848);
      do
        v8 = __ldxr(v6);
      while (__stxr(v8 + 1, v6));
      v9 = *v7;
      if (*v7)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          MEMORY[0x20BD0ADEC](v9, 0x1020C40D5A9D86FLL);
        }
      }
      *(_QWORD *)(a1 + 848) = v6;
      webrtc::JsepTransportCollection::Transports((webrtc::JsepTransportCollection **)(a1 + 376), &v26);
      v13 = v26;
      v14 = v27;
      if (v26 != v27)
      {
        do
        {
          v15 = *(_QWORD *)v13;
          v16 = *v7;
          if (*v7)
          {
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = *(_QWORD *)(v15 + 40);
          if (v18)
          {
            do
            {
              v19 = __ldaxr((unsigned int *)v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, (unsigned int *)v18));
            if (!v20)
            {
              v21 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)(v18 + 8) = 0;
              if (v21)
                (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
              MEMORY[0x20BD0ADEC](v18, 0x1020C40D5A9D86FLL);
            }
          }
          *(_QWORD *)(v15 + 40) = v16;
          v13 += 8;
        }
        while (v13 != v14);
        v13 = v26;
      }
      if (v13)
        operator delete(v13);
      webrtc::JsepTransportController::GetDtlsTransports((webrtc::JsepTransportCollection **)a1, &v26);
      v22 = v26;
      v23 = v27;
      if (v26 != v27)
      {
        v24 = v26;
        do
        {
          v25 = *(_QWORD *)v24;
          v24 += 8;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v25 + 160))(v25, v7);
        }
        while (v24 != v23);
      }
      if (v22)
        operator delete(v22);
      return 1;
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 352);
    v29[0] = a1;
    v29[1] = a2;
    v30 = 0;
    v26 = &v30;
    v27 = (char *)v29;
    (*(void (**)(uint64_t, char **, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v5 + 96))(v5, &v26, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::JsepTransportController::SetLocalCertificate(webrtc::scoped_refptr<rtc::RTCCertificate> const&)::$_0,BOOL,void>(webrtc::JsepTransportController::SetLocalCertificate(webrtc::scoped_refptr<rtc::RTCCertificate> const&)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v28);
    return v30 != 0;
  }
}

uint64_t *webrtc::JsepTransportController::GetLocalCertificate@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, unsigned int **a3@<X8>)
{
  const void **v3;
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  v3 = a2;
  v5 = (uint64_t *)(a1 + 384);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 376, a2, *(uint64_t **)(a1 + 384), (uint64_t *)(a1 + 384));
  if (v5 == result)
    goto LABEL_25;
  v7 = result;
  if (*((char *)v3 + 23) < 0)
  {
    v8 = (size_t)v3[1];
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_26;
    v3 = (const void **)*v3;
    if (v8)
    {
      if (!v3)
        goto LABEL_26;
    }
  }
  else
  {
    v8 = *((unsigned __int8 *)v3 + 23);
  }
  v9 = result + 4;
  if ((*((char *)result + 55) & 0x80000000) == 0)
  {
    v10 = *((unsigned __int8 *)result + 55);
    goto LABEL_14;
  }
  v10 = result[5];
  if ((v10 & 0x8000000000000000) != 0 || ((v9 = (_QWORD *)*v9, v10) ? (v11 = v9 == 0) : (v11 = 0), v11))
  {
LABEL_26:
    __break(1u);
    return result;
  }
LABEL_14:
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  result = (uint64_t *)memcmp(v3, v9, v12);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
      goto LABEL_25;
  }
  else if (v8 < v10)
  {
LABEL_25:
    *a3 = 0;
    return result;
  }
  v13 = v7[7];
  if (!v13)
    goto LABEL_25;
  v14 = *(unsigned int **)(v13 + 40);
  *a3 = v14;
  if (v14)
  {
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return result;
}

uint64_t *webrtc::JsepTransportController::GetRemoteSSLCertChain@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  const void **v3;
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  size_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  v5 = (uint64_t *)(a1 + 384);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 376, a2, *(uint64_t **)(a1 + 384), (uint64_t *)(a1 + 384));
  if (v5 == result)
    goto LABEL_25;
  v7 = result;
  if (*((char *)v3 + 23) < 0)
  {
    v8 = (size_t)v3[1];
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_26;
    v3 = (const void **)*v3;
    if (v8)
    {
      if (!v3)
        goto LABEL_26;
    }
  }
  else
  {
    v8 = *((unsigned __int8 *)v3 + 23);
  }
  v9 = result + 4;
  if ((*((char *)result + 55) & 0x80000000) == 0)
  {
    v10 = *((unsigned __int8 *)result + 55);
    goto LABEL_14;
  }
  v10 = result[5];
  if ((v10 & 0x8000000000000000) == 0)
  {
    v9 = (_QWORD *)*v9;
    if (!v10 || v9 != 0)
    {
LABEL_14:
      if (v10 >= v8)
        v12 = v8;
      else
        v12 = v10;
      result = (uint64_t *)memcmp(v3, v9, v12);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) != 0)
          goto LABEL_25;
      }
      else if (v8 < v10)
      {
LABEL_25:
        *a3 = 0;
        return result;
      }
      v13 = v7[7];
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 104);
        if (v14)
        {
          result = *(uint64_t **)(v14 + 136);
          if (result)
            return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 168))(result);
        }
      }
      goto LABEL_25;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

void webrtc::JsepTransportController::MaybeStartGathering(webrtc::JsepTransportCollection **this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  webrtc::JsepTransportCollection *v7;
  char *v8;
  char *v9;
  char v10;

  if (rtc::Thread::IsCurrent(this[44]))
  {
    webrtc::JsepTransportController::GetDtlsTransports(this, &v8);
    v2 = v8;
    v3 = v9;
    if (v8 != v9)
    {
      v4 = v8;
      do
      {
        v5 = *(_QWORD *)v4;
        v4 += 8;
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
      }
      while (v4 != v3);
    }
    if (v2)
      operator delete(v2);
  }
  else
  {
    v7 = this[44];
    v8 = (char *)this;
    (*(void (**)(webrtc::JsepTransportCollection *, char **, void (*)(uint64_t *), char *))(*(_QWORD *)v7 + 96))(v7, &v8, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::JsepTransportController::MaybeStartGathering(void)::$_0>, &v10);
  }
}

void webrtc::JsepTransportController::AddRemoteCandidates(uint64_t a1@<X0>, const void **a2@<X1>, cricket::Candidate **a3@<X2>, uint64_t a4@<X8>)
{
  const void **v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = a2;
  v7 = (uint64_t *)(a1 + 384);
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 376, a2, *(uint64_t **)(a1 + 384), (uint64_t *)(a1 + 384));
  if (v7 == v8)
    goto LABEL_23;
  v9 = v8;
  if (*((char *)v5 + 23) < 0)
  {
    v10 = (size_t)v5[1];
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_26;
    v5 = (const void **)*v5;
    if (v10)
    {
      if (!v5)
        goto LABEL_26;
    }
  }
  else
  {
    v10 = *((unsigned __int8 *)v5 + 23);
  }
  v11 = v8 + 4;
  if (*((char *)v8 + 55) < 0)
  {
    v12 = v8[5];
    if ((v12 & 0x8000000000000000) == 0)
    {
      v11 = (_QWORD *)*v11;
      if (!v12 || v11 != 0)
        goto LABEL_14;
    }
LABEL_26:
    __break(1u);
    return;
  }
  v12 = *((unsigned __int8 *)v8 + 55);
LABEL_14:
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v5, v11, v14);
  if (v15)
  {
    if (v15 < 0)
      goto LABEL_23;
LABEL_21:
    v16 = v9[7];
    if (v16)
    {
      cricket::JsepTransport::AddRemoteCandidates(v16, a3, a4);
      return;
    }
    goto LABEL_23;
  }
  if (v10 >= v12)
    goto LABEL_21;
LABEL_23:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc");
  *(_DWORD *)a4 = 0;
  *(_BYTE *)(a4 + 38) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 29) = 0;
}

void webrtc::JsepTransportController::RemoveRemoteCandidates(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  char **v13;
  char **v14;
  const void *v15;
  size_t v16;
  BOOL v17;
  char v18;
  const void *v19;
  size_t v20;
  const void **v21;
  size_t v22;
  const void *v23;
  size_t v24;
  size_t v25;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  char *v31;
  std::string *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  std::string *v42;
  uint64_t *v43;
  uint64_t **v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  size_t v48;
  _QWORD *v49;
  size_t v50;
  size_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  std::string v74;
  uint64_t *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 __p;
  _BYTE v80[15];

  if (!rtc::Thread::IsCurrent(*(rtc::Thread **)(a1 + 352)))
  {
    v8 = *(_QWORD *)(a1 + 352);
    v75 = (uint64_t *)a1;
    v76 = (char *)a2;
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 38) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 29) = 0;
    v78 = a3;
    *(_QWORD *)&__p = &v75;
    (*(void (**)(uint64_t, uint64_t *, __n128 (*)(uint64_t *), std::string *))(*(_QWORD *)v8 + 96))(v8, &v78, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::JsepTransportController::RemoveRemoteCandidates(std::vector<cricket::Candidate> const&)::$_0,webrtc::RTCError,void>(webrtc::JsepTransportController::RemoveRemoteCandidates(std::vector<cricket::Candidate> const&)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v74);
    return;
  }
  v7 = (char *)*a2;
  v6 = (char *)a2[1];
  if ((char *)*a2 == v6)
  {
    v69 = a1;
    v70 = a3;
    v9 = *a2;
  }
  else
  {
    do
    {
      cricket::VerifyCandidate(v7, (uint64_t)&v78);
      if ((_DWORD)v78)
      {
        *(_DWORD *)a3 = v78;
        *(_OWORD *)(a3 + 8) = __p;
        *(_QWORD *)(a3 + 24) = *(_QWORD *)v80;
        *(_DWORD *)(a3 + 32) = *(_DWORD *)&v80[8];
        *(_DWORD *)(a3 + 35) = *(_DWORD *)&v80[11];
        return;
      }
      if ((v80[7] & 0x80000000) != 0)
        operator delete((void *)__p);
      v7 += 432;
    }
    while (v7 != v6);
    v69 = a1;
    v70 = a3;
    v9 = *a2;
    v7 = (char *)a2[1];
  }
  LODWORD(v78) = 0;
  v80[14] = 0;
  *(_QWORD *)v80 = 0;
  __p = 0uLL;
  *(_QWORD *)&v80[5] = 0;
  v76 = 0;
  v77 = 0;
  v75 = (uint64_t *)&v76;
  if ((char *)v9 == v7)
    goto LABEL_111;
  v72 = v7;
  while (1)
  {
    v10 = *(unsigned __int8 *)(v9 + 399);
    if ((*(char *)(v9 + 399) & 0x80000000) == 0)
    {
      if (*(_BYTE *)(v9 + 399))
        break;
      goto LABEL_58;
    }
    if (*(_QWORD *)(v9 + 384))
      break;
LABEL_58:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      cricket::Candidate::ToStringInternal((cricket::Candidate *)v9, 1, &v74);
      v71 = v71 & 0xFFFFFFFF00000000 | 0xA7B;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v34, v35, v36, v37, v38, v39, v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc");
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
    }
LABEL_14:
    v9 += 432;
    if ((char *)v9 == v7)
    {
      v43 = v75;
      if (v75 != (uint64_t *)&v76)
      {
        v44 = (uint64_t **)(v69 + 384);
        do
        {
          v45 = v43 + 4;
          v46 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)v69 + 376, (const void **)v43 + 4, *v44, (uint64_t *)v44);
          if (v44 != (uint64_t **)v46)
          {
            v47 = v46;
            if (*((char *)v43 + 55) < 0)
            {
              v48 = v43[5];
              if ((v48 & 0x8000000000000000) != 0)
                goto LABEL_114;
              v45 = (_QWORD *)*v45;
              if (v48)
              {
                if (!v45)
                  goto LABEL_114;
              }
            }
            else
            {
              v48 = *((unsigned __int8 *)v43 + 55);
            }
            v49 = v46 + 4;
            if (*((char *)v46 + 55) < 0)
            {
              v50 = v46[5];
              if ((v50 & 0x8000000000000000) != 0)
                goto LABEL_114;
              v49 = (_QWORD *)*v49;
              if (v50 && v49 == 0)
                goto LABEL_114;
            }
            else
            {
              v50 = *((unsigned __int8 *)v46 + 55);
            }
            if (v50 >= v48)
              v52 = v48;
            else
              v52 = v50;
            v53 = memcmp(v45, v49, v52);
            if (v53)
            {
              if (v53 < 0)
                goto LABEL_103;
            }
            else if (v48 < v50)
            {
              goto LABEL_103;
            }
            v54 = v47[7];
            if (v54)
            {
              v55 = v43[7];
              v56 = v43[8];
              while (1)
              {
                if (v55 == v56)
                  goto LABEL_105;
                if (*(_DWORD *)(v55 + 24) == 1)
                {
                  v57 = *(_QWORD *)(v54 + 104);
                  if (!v57)
                    goto LABEL_95;
                }
                else
                {
                  v57 = *(_QWORD *)(v54 + 112);
                  if (!v57)
                    goto LABEL_95;
                }
                v58 = *(_QWORD *)(v57 + 136);
                if (v58)
                {
                  v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 200))(v58);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 192))(v59, v55);
                }
LABEL_95:
                v55 += 432;
              }
            }
          }
LABEL_103:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            v10 = v10 & 0xFFFFFFFF00000000 | 0xADA;
            rtc::webrtc_logging_impl::Log("\r\t", v60, v61, v62, v63, v64, v65, v66, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc");
          }
LABEL_105:
          v67 = (uint64_t *)v43[1];
          if (v67)
          {
            do
            {
              v68 = (uint64_t **)v67;
              v67 = (uint64_t *)*v67;
            }
            while (v67);
          }
          else
          {
            do
            {
              v68 = (uint64_t **)v43[2];
              v17 = *v68 == v43;
              v43 = (uint64_t *)v68;
            }
            while (!v17);
          }
          v43 = (uint64_t *)v68;
        }
        while (v68 != (uint64_t **)&v76);
      }
LABEL_111:
      *(_DWORD *)v70 = 0;
      *(_BYTE *)(v70 + 38) = 0;
      *(_QWORD *)(v70 + 16) = 0;
      *(_QWORD *)(v70 + 24) = 0;
      *(_QWORD *)(v70 + 8) = 0;
      *(_QWORD *)(v70 + 29) = 0;
      std::__tree<std::__value_type<std::string,std::vector<cricket::Candidate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<cricket::Candidate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<cricket::Candidate>>>>::destroy(v76);
      if ((v80[7] & 0x80000000) != 0)
        operator delete((void *)__p);
      return;
    }
  }
  v73 = v9;
  v11 = (_QWORD *)(v9 + 376);
  v12 = v76;
  v13 = &v76;
  v14 = &v76;
  if (!v76)
    goto LABEL_55;
  v15 = *(const void **)(v9 + 376);
  v16 = *(_QWORD *)(v9 + 384);
  if (v16)
    v17 = v15 == 0;
  else
    v17 = 0;
  v18 = !v17;
  while (2)
  {
    while (2)
    {
      v13 = (char **)v12;
      v19 = v11;
      v20 = v10;
      if ((v10 & 0x80) != 0)
      {
        if ((v16 & 0x8000000000000000) != 0)
          goto LABEL_114;
        v19 = v15;
        v20 = v16;
        if ((v18 & 1) == 0)
          goto LABEL_114;
      }
      v21 = (const void **)(v12 + 32);
      v22 = v12[55];
      v23 = v12 + 32;
      v24 = v22;
      if (v12[55] < 0)
      {
        v24 = *((_QWORD *)v12 + 5);
        if ((v24 & 0x8000000000000000) != 0)
          goto LABEL_114;
        v23 = *v21;
        if (v24)
        {
          if (!v23)
            goto LABEL_114;
        }
      }
      if (v24 >= v20)
        v25 = v20;
      else
        v25 = v24;
      v26 = memcmp(v19, v23, v25);
      if (v26)
      {
        if ((v26 & 0x80000000) == 0)
          break;
        goto LABEL_24;
      }
      if (v20 < v24)
      {
LABEL_24:
        v12 = *v13;
        v14 = v13;
        if (!*v13)
          goto LABEL_55;
        continue;
      }
      break;
    }
    if ((v22 & 0x80) != 0)
    {
      v22 = (size_t)v13[5];
      if ((v22 & 0x8000000000000000) != 0)
        goto LABEL_114;
      v21 = (const void **)*v21;
      if (v22)
      {
        if (!v21)
          goto LABEL_114;
      }
    }
    v27 = v11;
    v28 = v10;
    if ((v10 & 0x80) != 0)
    {
      if ((v16 & 0x8000000000000000) != 0)
        goto LABEL_114;
      v27 = v15;
      v28 = v16;
      if ((v18 & 1) == 0)
        goto LABEL_114;
    }
    if (v28 >= v22)
      v29 = v22;
    else
      v29 = v28;
    v30 = memcmp(v21, v27, v29);
    if (!v30)
    {
      if (v22 < v28)
        goto LABEL_53;
LABEL_66:
      v31 = (char *)v13;
      v7 = v72;
      v9 = v73;
      v42 = (std::string *)*((_QWORD *)v31 + 8);
      if ((unint64_t)v42 < *((_QWORD *)v31 + 9))
        goto LABEL_67;
LABEL_13:
      *((_QWORD *)v31 + 8) = std::vector<cricket::Candidate>::__push_back_slow_path<cricket::Candidate>((std::string **)v31 + 7, (std::string *)v9);
      goto LABEL_14;
    }
    if ((v30 & 0x80000000) == 0)
      goto LABEL_66;
LABEL_53:
    v12 = v13[1];
    if (v12)
      continue;
    break;
  }
  v14 = v13 + 1;
LABEL_55:
  v31 = (char *)operator new(0x50uLL);
  v32 = (std::string *)(v31 + 32);
  if ((v10 & 0x80) != 0)
  {
    v9 = v73;
    std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)(v73 + 376), *(_QWORD *)(v73 + 384));
  }
  else
  {
    v33 = *(_OWORD *)v11;
    *((_QWORD *)v31 + 6) = v11[2];
    *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
    v9 = v73;
  }
  *((_QWORD *)v31 + 7) = 0;
  *((_QWORD *)v31 + 8) = 0;
  *((_QWORD *)v31 + 9) = 0;
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  *((_QWORD *)v31 + 2) = v13;
  *v14 = v31;
  v41 = (uint64_t *)v31;
  if (*v75)
  {
    v75 = (uint64_t *)*v75;
    v41 = (uint64_t *)*v14;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v76, v41);
  ++v77;
  v7 = v72;
  v42 = (std::string *)*((_QWORD *)v31 + 8);
  if ((unint64_t)v42 >= *((_QWORD *)v31 + 9))
    goto LABEL_13;
LABEL_67:
  if (v42)
  {
    *((_QWORD *)v31 + 8) = cricket::Candidate::Candidate(v42, (std::string *)v9) + 18;
    goto LABEL_14;
  }
LABEL_114:
  __break(1u);
}

uint64_t *webrtc::JsepTransportController::GetStats(uint64_t a1, const void **a2, std::string *a3)
{
  const void **v4;
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  size_t v12;
  int v13;
  uint64_t v14;

  v4 = a2;
  v5 = (uint64_t *)(a1 + 384);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 376, a2, *(uint64_t **)(a1 + 384), (uint64_t *)(a1 + 384));
  if (v5 == result)
    return 0;
  v7 = result;
  if (*((char *)v4 + 23) < 0)
  {
    v8 = (size_t)v4[1];
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_24;
    v4 = (const void **)*v4;
    if (v8)
    {
      if (!v4)
        goto LABEL_24;
    }
  }
  else
  {
    v8 = *((unsigned __int8 *)v4 + 23);
  }
  v9 = result + 4;
  if ((*((char *)result + 55) & 0x80000000) == 0)
  {
    v10 = *((unsigned __int8 *)result + 55);
    goto LABEL_14;
  }
  v10 = result[5];
  if ((v10 & 0x8000000000000000) == 0)
  {
    v9 = (_QWORD *)*v9;
    if (!v10 || v9 != 0)
    {
LABEL_14:
      if (v10 >= v8)
        v12 = v8;
      else
        v12 = v10;
      v13 = memcmp(v4, v9, v12);
      if (v13)
      {
        if (v13 < 0)
          return 0;
      }
      else if (v8 < v10)
      {
        return 0;
      }
      v14 = v7[7];
      if (v14)
        return (uint64_t *)cricket::JsepTransport::GetStats(v14, a3);
      return 0;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

void webrtc::JsepTransportController::SetActiveResetSrtpParams(webrtc::JsepTransportController *this, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc");
  *((_BYTE *)this + 704) = a2;
  webrtc::JsepTransportCollection::Transports((webrtc::JsepTransportCollection **)this + 47, &v22);
  v11 = v22;
  v12 = v23;
  if (v22 != v23)
  {
    v13 = v22;
    do
    {
      v14 = *(_QWORD *)v13;
      if (*(_QWORD *)(*(_QWORD *)v13 + 96))
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport.cc");
        *(_BYTE *)(*(_QWORD *)(v14 + 96) + 736) = a2;
      }
      v13 += 8;
    }
    while (v13 != v12);
  }
  if (v11)
    operator delete(v11);
}

uint64_t *webrtc::JsepTransportController::RollbackTransports@<X0>(uint64_t *__return_ptr a1@<X8>, webrtc::JsepTransportController *this@<X0>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  webrtc::JsepTransportController *v14;
  const char *v15;
  uint64_t v16;

  if (rtc::Thread::IsCurrent(*((rtc::Thread **)this + 44)))
  {
    webrtc::BundleManager::Rollback((webrtc::JsepTransportController *)((char *)this + 856));
    result = (uint64_t *)webrtc::JsepTransportCollection::RollbackTransports((uint64_t ***)this + 47);
    if ((result & 1) != 0)
    {
      *(_DWORD *)a1 = 0;
      *((_BYTE *)a1 + 38) = 0;
      a1[2] = 0;
      a1[3] = 0;
      a1[1] = 0;
      *(uint64_t *)((char *)a1 + 29) = 0;
    }
    else
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v15 = "INTERNAL_ERROR";
        v16 = 14;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc");
      }
      *(_DWORD *)a1 = 10;
      result = (uint64_t *)operator new(0x28uLL);
      a1[1] = (uint64_t)result;
      *((_OWORD *)a1 + 1) = xmmword_208F08620;
      if (result <= (uint64_t *)"Failed to roll back transport state."
        && (char *)result + 36 > "Failed to roll back transport state.")
      {
        __break(1u);
      }
      else
      {
        strcpy((char *)result, "Failed to roll back transport state.");
        *((_DWORD *)a1 + 8) = 0;
        *((_BYTE *)a1 + 36) = 0;
        *((_BYTE *)a1 + 38) = 0;
      }
    }
  }
  else
  {
    v5 = *((_QWORD *)this + 44);
    v14 = this;
    v15 = (const char *)a1;
    *(_DWORD *)a1 = 0;
    *((_BYTE *)a1 + 38) = 0;
    a1[2] = 0;
    a1[3] = 0;
    a1[1] = 0;
    *(uint64_t *)((char *)a1 + 29) = 0;
    v16 = (uint64_t)&v14;
    return (uint64_t *)(*(uint64_t (**)(uint64_t, const char **, __n128 (*)(uint64_t *), char *))(*(_QWORD *)v5 + 96))(v5, &v15, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::JsepTransportController::RollbackTransports(void)::$_0,webrtc::RTCError,void>(webrtc::JsepTransportController::RollbackTransports(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v13);
  }
  return result;
}

char *webrtc::JsepTransportController::CreateDtlsTransport(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[3];

  v6 = *(_QWORD *)(a2 + 568);
  if (!v6)
  {
    v7 = operator new();
    v41 = *(_QWORD *)(a2 + 656);
    v42 = *(_DWORD *)(a2 + 532);
    v43 = rtc::PacketTransportInternal::PacketTransportInternal(v7);
    *(_QWORD *)(v43 + 408) = 0;
    *(_QWORD *)(v43 + 416) = 0;
    *(_BYTE *)(v43 + 432) = 0;
    *(_QWORD *)(v43 + 424) = 0;
    *(_QWORD *)(v43 + 448) = 0;
    *(_QWORD *)(v43 + 456) = 0;
    *(_QWORD *)(v43 + 440) = 0;
    *(_BYTE *)(v43 + 464) = 0;
    *(_QWORD *)v43 = &off_24C0B3460;
    *(_DWORD *)(v7 + 472) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 96))(a3);
    *(_DWORD *)(v7 + 476) = 0;
    *(_QWORD *)(v7 + 488) = 0;
    *(_QWORD *)(v7 + 496) = 0;
    *(_QWORD *)(v7 + 480) = a3;
    webrtc::CryptoOptions::GetSupportedDtlsSrtpCryptoSuites((webrtc::CryptoOptions *)(a2 + 536), v44, v45, v46, v47, (char **)(v7 + 504));
    *(_BYTE *)(v7 + 528) = 0;
    *(_QWORD *)(v7 + 536) = 0;
    *(_BYTE *)(v7 + 544) = 0;
    *(_BYTE *)(v7 + 548) = 0;
    *(_DWORD *)(v7 + 552) = v42;
    *(_OWORD *)(v7 + 560) = 0u;
    *(_OWORD *)(v7 + 576) = 0u;
    *(_OWORD *)(v7 + 592) = 0u;
    *(_OWORD *)(v7 + 608) = 0u;
    *(_OWORD *)(v7 + 618) = 0u;
    *(_QWORD *)(v7 + 640) = v41;
    cricket::DtlsTransport::ConnectToIceTransport((cricket::DtlsTransport *)v7);
    *a1 = v7;
    if (!*(_QWORD *)(a2 + 848))
      goto LABEL_4;
    goto LABEL_3;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v48, v6, a3, a2 + 536, *(unsigned int *)(a2 + 532));
  v7 = v48[0];
  *a1 = v48[0];
  if (*(_QWORD *)(a2 + 848))
LABEL_3:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 160))(v7, a2 + 848);
LABEL_4:
  v8 = operator new(0x30uLL);
  v8[2] = sigslot::_opaque_connection::emitter<webrtc::JsepTransportController,rtc::PacketTransportInternal *>;
  v8[3] = a2;
  v8[4] = webrtc::JsepTransportController::OnTransportWritableState_n;
  v8[5] = 0;
  v9 = *(_QWORD *)(v7 + 72);
  *v8 = v9;
  v8[1] = v7 + 72;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v7 + 72) = v8;
  ++*(_QWORD *)(v7 + 88);
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a2, v7 + 56);
  v10 = operator new(0x30uLL);
  v10[2] = sigslot::_opaque_connection::emitter<webrtc::JsepTransportController,rtc::PacketTransportInternal *>;
  v10[3] = a2;
  v10[4] = webrtc::JsepTransportController::OnTransportReceivingState_n;
  v10[5] = 0;
  v11 = *(_QWORD *)(v7 + 184);
  *v10 = v11;
  v10[1] = v7 + 184;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v7 + 184) = v10;
  ++*(_QWORD *)(v7 + 200);
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a2, v7 + 168);
  v12 = (char *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7) + 808);
  v13 = (_QWORD *)operator new();
  *v13 = a2;
  v13[2] = absl::internal_any_invocable::LocalManagerTrivial;
  v13[3] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::CreateDtlsTransport(cricket::ContentInfo const&,cricket::IceTransportInternal *)::$_1 &,cricket::IceTransportInternal *>;
  v48[0] = (uint64_t)v13;
  v48[1] = (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::IceTransportInternal *)>::CallVoidPtr<absl::AnyInvocable<void ()(cricket::IceTransportInternal *)>>;
  v48[2] = (uint64_t)webrtc::UntypedFunction::PrepareArgs<void ()(cricket::IceTransportInternal *),absl::AnyInvocable<void ()(cricket::IceTransportInternal *)>,absl::AnyInvocable<void ()(cricket::IceTransportInternal *)>,(void *)0>(absl::AnyInvocable<void ()(cricket::IceTransportInternal *)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke;
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>(v12, a2, v48, v14, v15, v16, v17, v18);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
  v20 = operator new(0x30uLL);
  v20[3] = a2;
  v20[4] = webrtc::JsepTransportController::OnTransportCandidateGathered_n;
  v20[5] = 0;
  v20[1] = v19 + 424;
  v20[2] = sigslot::_opaque_connection::emitter<webrtc::JsepTransportController,cricket::IceTransportInternal *,cricket::Candidate const&>;
  v21 = *(_QWORD *)(v19 + 424);
  *v20 = v21;
  *(_QWORD *)(v21 + 8) = v20;
  *(_QWORD *)(v19 + 424) = v20;
  ++*(_QWORD *)(v19 + 440);
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a2, v19 + 408);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 856))(1, v22 + 840, v22 + 840);
  *(_QWORD *)(v22 + 840) = a2;
  *(_QWORD *)(v22 + 856) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v22 + 864) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::CreateDtlsTransport(cricket::ContentInfo const&,cricket::IceTransportInternal *)::$_2 &,cricket::IceTransportInternal *,cricket::IceCandidateErrorEvent const&>;
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 888))(1, v23 + 872, v23 + 872);
  *(_QWORD *)(v23 + 872) = a2;
  *(_QWORD *)(v23 + 888) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v23 + 896) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::CreateDtlsTransport(cricket::ContentInfo const&,cricket::IceTransportInternal *)::$_3 &,cricket::IceTransportInternal *,std::vector<cricket::Candidate> const&>;
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
  v25 = operator new(0x30uLL);
  v25[3] = a2;
  v25[4] = webrtc::JsepTransportController::OnTransportRoleConflict_n;
  v25[5] = 0;
  v25[1] = v24 + 536;
  v25[2] = sigslot::_opaque_connection::emitter<webrtc::JsepTransportController,cricket::IceTransportInternal *>;
  v26 = *(_QWORD *)(v24 + 536);
  *v25 = v26;
  *(_QWORD *)(v26 + 8) = v25;
  *(_QWORD *)(v24 + 536) = v25;
  ++*(_QWORD *)(v24 + 552);
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a2, v24 + 520);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
  v28 = operator new(0x30uLL);
  v28[3] = a2;
  v28[4] = webrtc::JsepTransportController::OnTransportStateChanged_n;
  v28[5] = 0;
  v28[1] = v27 + 592;
  v28[2] = sigslot::_opaque_connection::emitter<webrtc::JsepTransportController,cricket::IceTransportInternal *>;
  v29 = *(_QWORD *)(v27 + 592);
  *v28 = v29;
  *(_QWORD *)(v29 + 8) = v28;
  *(_QWORD *)(v27 + 592) = v28;
  ++*(_QWORD *)(v27 + 608);
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a2, v27 + 576);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
  v31 = operator new(0x30uLL);
  v31[3] = a2;
  v31[4] = webrtc::JsepTransportController::OnTransportStateChanged_n;
  v31[5] = 0;
  v31[1] = v30 + 648;
  v31[2] = sigslot::_opaque_connection::emitter<webrtc::JsepTransportController,cricket::IceTransportInternal *>;
  v32 = *(_QWORD *)(v30 + 648);
  *v31 = v32;
  *(_QWORD *)(v32 + 8) = v31;
  *(_QWORD *)(v30 + 648) = v31;
  ++*(_QWORD *)(v30 + 664);
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a2, v30 + 632);
  v33 = (char *)*a1;
  v34 = (*(uint64_t (**)(char *))(*(_QWORD *)v33 + 200))(v33);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 920))(1, v34 + 904, v34 + 904);
  *(_QWORD *)(v34 + 904) = a2;
  *(_QWORD *)(v34 + 920) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v34 + 928) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::CreateDtlsTransport(cricket::ContentInfo const&,cricket::IceTransportInternal *)::$_4 &,cricket::CandidatePairChangeEvent const&>;
  return webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::TrivialUntypedFunctionArgs<1ul>>(v33 + 408, a2, (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(rtc::SSLHandshakeError)>::CallInlineStorage<webrtc::JsepTransportController::CreateDtlsTransport(cricket::ContentInfo const&,cricket::IceTransportInternal *)::$_5>, v35, v36, v37, v38, v39);
}

void webrtc::JsepTransportController::OnTransportWritableState_n(webrtc::JsepTransportController *this, rtc::PacketTransportInternal *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(rtc::PacketTransportInternal *))(*(_QWORD *)a2 + 16))(a2);
    (*(uint64_t (**)(rtc::PacketTransportInternal *))(*(_QWORD *)a2 + 24))(a2);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc");
  }
  webrtc::JsepTransportController::UpdateAggregateStates_n(this);
}

void webrtc::JsepTransportController::OnTransportCandidateGathered_n(webrtc::JsepTransportController *this, cricket::IceTransportInternal *a2, std::string *a3)
{
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE *v17;
  std::string *v18;
  std::string *v19;
  void *v20;
  std::string *v21;
  cricket::IceTransportInternal *v22;
  void *__p;
  std::string *v24;
  std::string *v25;
  std::string v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (LODWORD(a3[8].__r_.__value_.__r.__words[2]) != 2)
  {
    v5 = (*(uint64_t (**)(cricket::IceTransportInternal *))(*(_QWORD *)a2 + 16))(a2);
    cricket::Candidate::Candidate(&v26, a3);
    v6 = (std::string *)operator new(0x1B0uLL);
    v7 = v6 + 18;
    __p = v6;
    v25 = v6 + 18;
    cricket::Candidate::Candidate(v6, &v26);
    v13 = (char *)this + 208;
    v12 = *((unsigned __int8 *)this + 208);
    v24 = v7;
    if (v12)
    {
      v21 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v8, v9, v10, v11, (uint64_t)__p);
      webrtc::JsepTransportController::OnTransportRoleConflict_n((webrtc::JsepTransportController *)v21, v22);
      return;
    }
    *((_BYTE *)this + 208) = 1;
    v14 = *((_QWORD *)this + 23);
    v15 = *((_QWORD *)this + 24);
    if (v14 == v15)
    {
      *v13 = 0;
      v18 = (std::string *)__p;
      if (!__p)
      {
LABEL_15:
        cricket::Candidate::~Candidate((void **)&v26.__r_.__value_.__l.__data_);
        return;
      }
    }
    else
    {
      v16 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, void **))(v14 + 40))(v14 + 8, v5, &__p);
        v17 = *(_BYTE **)v14;
        v14 += 56;
        v16 |= v17 == v13;
      }
      while (v14 != v15);
      *v13 = 0;
      if ((v16 & 1) != 0)
        webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::JsepTransportController *)((char *)this + 184), (char *)this + 208);
      v18 = (std::string *)__p;
      if (!__p)
        goto LABEL_15;
    }
    v19 = v24;
    v20 = v18;
    if (v24 != v18)
    {
      do
        cricket::Candidate::~Candidate((void **)&v19[-18].__r_.__value_.__l.__data_);
      while (v19 != v18);
      v20 = __p;
    }
    v24 = v18;
    operator delete(v20);
    goto LABEL_15;
  }
}

void webrtc::JsepTransportController::OnTransportRoleConflict_n(webrtc::JsepTransportController *this, cricket::IceTransportInternal *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v3 = *((_DWORD *)this + 208);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc");
  *((_DWORD *)this + 208) = v3 == 0;
  webrtc::JsepTransportController::GetDtlsTransports((webrtc::JsepTransportCollection **)this, &v16);
  v11 = v16;
  v12 = v17;
  if (v16 != v17)
  {
    v13 = v16;
    do
    {
      v14 = *(_QWORD *)v13;
      v13 += 8;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 200))(v14);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 112))(v15, *((unsigned int *)this + 208));
    }
    while (v13 != v12);
  }
  if (v11)
    operator delete(v11);
}

void webrtc::JsepTransportController::OnTransportStateChanged_n(webrtc::JsepTransportController *this, cricket::IceTransportInternal *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(cricket::IceTransportInternal *))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(cricket::IceTransportInternal *))(*(_QWORD *)a2 + 96))(a2);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc");
  }
  webrtc::JsepTransportController::UpdateAggregateStates_n(this);
}

void webrtc::JsepTransportController::GetEncryptedHeaderExtensionIds(__int32 **a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int32 *v6;
  __int32 *v7;
  size_t v8;
  __int32 *v9;
  __int32 *v10;
  unint64_t v11;
  __int32 *v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  __int32 *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int32 *v23;
  _OWORD *v24;
  __int32 *v25;
  uint64_t v26;
  __int128 v27;
  __int32 v28;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v3 = *(_QWORD *)(a3 + 64);
    v4 = *(_QWORD *)(a3 + 72);
    if (v3 != v4)
    {
      v6 = 0;
      do
      {
        if (*(_BYTE *)(v3 + 28))
        {
          v7 = a1[1];
          v8 = v7 - v6;
          v9 = wmemchr(v6, *(_DWORD *)(v3 + 24), v8);
          v10 = v9 ? v9 : v7;
          if (v10 == v7)
          {
            v11 = (unint64_t)a1[2];
            if ((unint64_t)v7 >= v11)
            {
              v13 = v8 + 1;
              if ((v8 + 1) >> 62)
                abort();
              v14 = v11 - (_QWORD)v6;
              if (v14 >> 1 > v13)
                v13 = v14 >> 1;
              v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL;
              v16 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v15)
                v16 = v13;
              if (!v16)
              {
LABEL_32:
                __break(1u);
LABEL_33:
                std::__throw_bad_array_new_length[abi:sn180100]();
              }
              if (v16 >> 62)
                goto LABEL_33;
              v17 = 4 * v16;
              v18 = operator new(4 * v16);
              v19 = (__int32 *)&v18[4 * v8];
              *v19 = *(_DWORD *)(v3 + 24);
              v12 = v19 + 1;
              if (v7 != v6)
              {
                v20 = (char *)v7 - (char *)v6 - 4;
                if (v20 < 0x2C)
                  goto LABEL_37;
                if ((unint64_t)((char *)v6 - v18) < 0x20)
                  goto LABEL_37;
                v21 = (v20 >> 2) + 1;
                v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
                v23 = &v7[v22 / 0xFFFFFFFFFFFFFFFCLL];
                v19 = (__int32 *)((char *)v19 - v22);
                v24 = &v18[4 * v8 - 16];
                v25 = v7 - 4;
                v26 = v21 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v27 = *(_OWORD *)v25;
                  *(v24 - 1) = *((_OWORD *)v25 - 1);
                  *v24 = v27;
                  v24 -= 2;
                  v25 -= 8;
                  v26 -= 8;
                }
                while (v26);
                v7 = v23;
                if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_37:
                  do
                  {
                    v28 = *--v7;
                    *--v19 = v28;
                  }
                  while (v7 != v6);
                }
              }
              *a1 = v19;
              a1[1] = v12;
              a1[2] = (__int32 *)&v18[v17];
              if (v6)
                operator delete(v6);
              v6 = v19;
            }
            else
            {
              if (!v7)
                goto LABEL_32;
              *v7 = *(_DWORD *)(v3 + 24);
              v12 = v7 + 1;
            }
            a1[1] = v12;
          }
        }
        v3 += 32;
      }
      while (v3 != v4);
    }
  }
}

void webrtc::JsepTransportController::UpdateAggregateStates_n(webrtc::JsepTransportController *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t **v45;
  BOOL v46;
  BOOL v47;
  int v48;
  char v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t *v61;
  uint64_t **v62;
  uint64_t **v63;
  int v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t *v70;
  uint64_t **v71;
  uint64_t **v72;
  int v73;
  uint64_t *v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t v77;
  webrtc::JsepTransportController *v78;
  int v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  _BYTE *v84;
  uint64_t *v85;
  __int128 *v86;
  uint64_t **v87;
  uint64_t **v88;
  uint64_t *v89;
  int v90;
  uint64_t *v91;
  uint64_t *v92;
  int v93;
  uint64_t **v94;
  uint64_t **v95;
  uint64_t *v96;
  int v97;
  uint64_t *v98;
  uint64_t *v99;
  int v100;
  uint64_t **v101;
  uint64_t **v102;
  uint64_t *v103;
  int v104;
  uint64_t *v105;
  uint64_t *v106;
  int v107;
  uint64_t **v108;
  uint64_t **v109;
  uint64_t *v110;
  int v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t **v114;
  uint64_t **v115;
  uint64_t *v116;
  int v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t **v120;
  uint64_t **v121;
  uint64_t *v122;
  int v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t **v126;
  int v127;
  uint64_t *v128;
  uint64_t *v129;
  int v130;
  unint64_t v131;
  BOOL v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  char v137;
  BOOL v138;
  int v139;
  BOOL v140;
  BOOL v141;
  unsigned int v142;
  BOOL v143;
  char v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  _BYTE *v149;
  int v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  _BYTE *v155;
  uint64_t *v156;
  uint64_t **v157;
  uint64_t **v158;
  uint64_t *v159;
  int v160;
  uint64_t *v161;
  uint64_t *v162;
  int v163;
  uint64_t **v164;
  uint64_t **v165;
  webrtc::JsepTransportController *v166;
  uint64_t *v167;
  int v168;
  uint64_t *v169;
  uint64_t *v170;
  int v171;
  uint64_t **v172;
  uint64_t **v173;
  uint64_t *v174;
  int v175;
  uint64_t *v176;
  uint64_t *v177;
  int v178;
  uint64_t **v179;
  uint64_t **v180;
  uint64_t *v181;
  int v182;
  uint64_t *v183;
  uint64_t *v184;
  int v185;
  int v186;
  uint64_t **v187;
  int v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  webrtc::JsepTransportController *v192;
  int v193;
  unsigned int v194;
  int v195;
  _BYTE *v196;
  webrtc::JsepTransportController *v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  _BYTE *v201;
  uint64_t v202;
  int v203;
  _BYTE *v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  _BYTE *v208;
  std::string *v209;
  uint64_t v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  _BOOL4 v218;
  _BOOL4 v219;
  _BOOL4 v220;
  char *v221;
  uint64_t **v222;
  uint64_t *v223;
  uint64_t v224;
  void *__p;
  uint64_t *v226;
  uint64_t v227;

  webrtc::JsepTransportCollection::ActiveTransports((webrtc::JsepTransportController *)((char *)this + 376), &__p);
  v6 = (uint64_t *)__p;
  v5 = v226;
  if (__p != v226)
  {
    v7 = 0;
    v221 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v6;
      v12 = *(_QWORD *)(*v6 + 104);
      if (!v12)
        goto LABEL_10;
      v13 = *(_QWORD *)(v12 + 136);
      if (!v13)
        goto LABEL_10;
      if (v9 < v8)
      {
        if (!v9)
          goto LABEL_318;
        *(_QWORD *)v9 = v13;
        v9 += 8;
        v221 = v9;
LABEL_10:
        v14 = *(_QWORD *)(v11 + 112);
        if (!v14)
          goto LABEL_4;
        goto LABEL_11;
      }
      v16 = (v9 - v10) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_319;
      if ((v8 - v10) >> 2 > v17)
        v17 = (v8 - v10) >> 2;
      if ((unint64_t)(v8 - v10) >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v17)
        goto LABEL_318;
      if (v17 >> 61)
        goto LABEL_320;
      v18 = 8 * v17;
      v19 = operator new(8 * v17);
      v7 = &v19[8 * v16];
      *(_QWORD *)v7 = v13;
      v221 = v7 + 8;
      if (v9 != v10)
      {
        v20 = v9 - v10 - 8;
        if (v20 < 0x168)
        {
          v21 = v9;
          goto LABEL_25;
        }
        v29 = (v9 - 8 - v10) & 0xFFFFFFFFFFFFFFF8;
        if (&v19[v9 - v10 - 8 - v29] > &v19[v9 - v10 - 8])
        {
          v21 = v9;
          goto LABEL_25;
        }
        if (&v9[-v29 - 8] > v9 - 8)
        {
          v21 = v9;
          do
          {
LABEL_25:
            v22 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v7 - 1) = v22;
            v7 -= 8;
          }
          while (v21 != v10);
          goto LABEL_26;
        }
        if ((unint64_t)(v10 - v19) < 0x20)
        {
          v21 = v9;
          goto LABEL_25;
        }
        v31 = (v20 >> 3) + 1;
        v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v9[-v32];
        v7 -= v32;
        v33 = &v19[8 * v16 - 16];
        v34 = v9 - 16;
        v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 32;
          v35 -= 4;
        }
        while (v35);
        if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_25;
      }
LABEL_26:
      v8 = &v19[v18];
      if (v10)
        operator delete(v10);
      v9 = v221;
      v10 = v7;
      v14 = *(_QWORD *)(v11 + 112);
      if (!v14)
        goto LABEL_4;
LABEL_11:
      v15 = *(_QWORD *)(v14 + 136);
      if (v15)
      {
        if (v9 < v8)
        {
          if (!v9)
            goto LABEL_318;
          *(_QWORD *)v9 = v15;
          v9 += 8;
          v221 = v9;
          goto LABEL_4;
        }
        v23 = (v9 - v10) >> 3;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 61)
          goto LABEL_319;
        if ((v8 - v10) >> 2 > v24)
          v24 = (v8 - v10) >> 2;
        if ((unint64_t)(v8 - v10) >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v24)
        {
LABEL_318:
          __break(1u);
LABEL_319:
          abort();
        }
        if (v24 >> 61)
LABEL_320:
          std::__throw_bad_array_new_length[abi:sn180100]();
        v25 = 8 * v24;
        v26 = operator new(8 * v24);
        v7 = &v26[8 * v23];
        *(_QWORD *)v7 = v15;
        v221 = v7 + 8;
        if (v9 != v10)
        {
          v27 = v9 - v10 - 8;
          if (v27 < 0x168)
          {
            v28 = v9;
            goto LABEL_59;
          }
          v30 = (v9 - 8 - v10) & 0xFFFFFFFFFFFFFFF8;
          if (&v26[v9 - v10 - 8 - v30] > &v26[v9 - v10 - 8])
          {
            v28 = v9;
            goto LABEL_59;
          }
          if (&v9[-v30 - 8] > v9 - 8)
          {
            v28 = v9;
            goto LABEL_59;
          }
          if ((unint64_t)(v10 - v26) < 0x20)
          {
            v28 = v9;
            goto LABEL_59;
          }
          v37 = (v27 >> 3) + 1;
          v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          v28 = &v9[-v38];
          v7 -= v38;
          v39 = &v26[8 * v23 - 16];
          v40 = v9 - 16;
          v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            *v39 = v42;
            v39 -= 2;
            v40 -= 32;
            v41 -= 4;
          }
          while (v41);
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_59:
              v43 = *((_QWORD *)v28 - 1);
              v28 -= 8;
              *((_QWORD *)v7 - 1) = v43;
              v7 -= 8;
            }
            while (v28 != v10);
          }
          v9 = v10;
        }
        v8 = &v26[v25];
        if (v9)
          operator delete(v9);
        v9 = v221;
        v10 = v7;
      }
LABEL_4:
      if (++v6 == v5)
      {
        v6 = (uint64_t *)__p;
        if (__p)
          goto LABEL_64;
        goto LABEL_65;
      }
    }
  }
  v7 = 0;
  v221 = 0;
  if (__p)
  {
LABEL_64:
    v226 = v6;
    operator delete(v6);
  }
LABEL_65:
  v44 = &v226;
  v226 = 0;
  v227 = 0;
  v224 = 0;
  __p = &v226;
  v45 = &v223;
  v222 = &v223;
  v223 = 0;
  if (v7 == v221)
  {
    v77 = 0;
    v220 = 0;
    LOBYTE(v218) = 0;
    v219 = 1;
    v78 = this;
    if (!*((_DWORD *)this + 128))
      goto LABEL_122;
    goto LABEL_116;
  }
  v46 = 0;
  v47 = 0;
  LOBYTE(v48) = 1;
  v49 = 1;
  v50 = 1;
  v51 = v7;
  do
  {
    if (v46)
    {
      v46 = 1;
      if ((v48 & 1) == 0)
        goto LABEL_71;
    }
    else
    {
      v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 200))(*(_QWORD *)v51);
      v46 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v52 + 80))(v52) == 3;
      if ((v48 & 1) == 0)
      {
LABEL_71:
        v48 = 0;
        if ((v49 & 1) == 0)
          goto LABEL_78;
        goto LABEL_75;
      }
    }
    v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 24))(*(_QWORD *)v51);
    if ((v49 & 1) == 0)
      goto LABEL_78;
LABEL_75:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)v51 + 24))(*(_QWORD *)v51)
      || (v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 200))(*(_QWORD *)v51),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 80))(v53) != 2)
      || (v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 200))(*(_QWORD *)v51),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 104))(v54)))
    {
LABEL_78:
      v55 = 0;
      if (v47)
        goto LABEL_79;
      goto LABEL_82;
    }
    v56 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 200))(*(_QWORD *)v51);
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 208))(v56) == 2;
    if (v47)
    {
LABEL_79:
      v220 = 1;
      v218 = v55;
      if ((v50 & 1) == 0)
        goto LABEL_80;
      goto LABEL_83;
    }
LABEL_82:
    v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 200))(*(_QWORD *)v51);
    v220 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 208))(v57) != 0;
    v218 = v55;
    if ((v50 & 1) == 0)
    {
LABEL_80:
      v219 = 0;
      goto LABEL_84;
    }
LABEL_83:
    v58 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 200))(*(_QWORD *)v51);
    v219 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 208))(v58) == 2;
LABEL_84:
    v59 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 80))(*(_QWORD *)v51);
    v60 = v59;
    v61 = v223;
    v62 = &v223;
    v63 = &v223;
    if (v223)
    {
      while (1)
      {
        while (1)
        {
          v63 = (uint64_t **)v61;
          v64 = *((_DWORD *)v61 + 7);
          if (v59 >= v64)
            break;
          v61 = *v63;
          v62 = v63;
          if (!*v63)
            goto LABEL_91;
        }
        if (v64 >= v59)
          break;
        v61 = v63[1];
        if (!v61)
        {
          v62 = v63 + 1;
          goto LABEL_91;
        }
      }
    }
    else
    {
LABEL_91:
      v65 = (uint64_t *)v63;
      v63 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v63 + 7) = v60;
      *((_DWORD *)v63 + 8) = 0;
      *v63 = 0;
      v63[1] = 0;
      v63[2] = v65;
      *v62 = (uint64_t *)v63;
      v66 = (uint64_t *)v63;
      if (*v222)
      {
        v222 = (uint64_t **)*v222;
        v66 = *v62;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v223, v66);
      ++v224;
    }
    ++*((_DWORD *)v63 + 8);
    v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 200))(*(_QWORD *)v51);
    v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 88))(v67);
    v69 = v68;
    v70 = v226;
    v71 = &v226;
    v72 = &v226;
    if (v226)
    {
      while (1)
      {
        while (1)
        {
          v72 = (uint64_t **)v70;
          v73 = *((_DWORD *)v70 + 7);
          if (v68 >= v73)
            break;
          v70 = *v72;
          v71 = v72;
          if (!*v72)
            goto LABEL_101;
        }
        if (v73 >= v68)
          break;
        v70 = v72[1];
        if (!v70)
        {
          v71 = v72 + 1;
          goto LABEL_101;
        }
      }
    }
    else
    {
LABEL_101:
      v74 = (uint64_t *)v72;
      v72 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v72 + 7) = v69;
      *((_DWORD *)v72 + 8) = 0;
      *v72 = 0;
      v72[1] = 0;
      v72[2] = v74;
      *v71 = (uint64_t *)v72;
      v75 = (uint64_t *)v72;
      if (*(_QWORD *)__p)
      {
        __p = *(void **)__p;
        v75 = *v71;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v226, v75);
      ++v227;
    }
    v50 = v219;
    v47 = v220;
    ++*((_DWORD *)v72 + 8);
    v51 += 8;
    v49 = v218;
  }
  while (v51 != v221);
  if (v48)
    v76 = 2;
  else
    v76 = 0;
  if (v218)
    v76 = 3;
  if (v46)
    v77 = 1;
  else
    v77 = v76;
  v78 = this;
  if (*((_DWORD *)this + 128) == (_DWORD)v77)
  {
LABEL_122:
    v85 = v226;
    v86 = &xmmword_208F05000;
    v87 = &v226;
    v88 = &v226;
    if (v226)
      goto LABEL_123;
LABEL_130:
    v91 = (uint64_t *)v88;
    v88 = (uint64_t **)operator new(0x28uLL);
    *(uint64_t **)((char *)v88 + 28) = (uint64_t *)*((_QWORD *)v86 + 272);
    *v88 = 0;
    v88[1] = 0;
    v88[2] = v91;
    *v87 = (uint64_t *)v88;
    v92 = (uint64_t *)v88;
    if (*(_QWORD *)__p)
    {
      __p = *(void **)__p;
      v92 = *v87;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v226, v92);
    v85 = v226;
    ++v227;
    goto LABEL_133;
  }
LABEL_116:
  v80 = (char *)v78 + 80;
  v79 = *((unsigned __int8 *)v78 + 80);
  *((_DWORD *)v78 + 128) = v77;
  if (v79)
    goto LABEL_321;
  *((_BYTE *)v78 + 80) = 1;
  v81 = *((_QWORD *)v78 + 7);
  v82 = *((_QWORD *)v78 + 8);
  if (v81 != v82)
  {
    v83 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(v81 + 40))(v81 + 8, v77);
      v84 = *(_BYTE **)v81;
      v81 += 56;
      v83 |= v84 == v80;
    }
    while (v81 != v82);
    *v80 = 0;
    v78 = this;
    if ((v83 & 1) != 0)
      webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(v80 - 24), v80);
    goto LABEL_122;
  }
  *v80 = 0;
  v78 = this;
  v85 = v226;
  v86 = &xmmword_208F05000;
  v87 = &v226;
  v88 = &v226;
  if (!v226)
    goto LABEL_130;
LABEL_123:
  v89 = v85;
  while (1)
  {
    while (1)
    {
      v88 = (uint64_t **)v89;
      v90 = *((_DWORD *)v89 + 7);
      if (v90 < 2)
        break;
      v89 = *v88;
      v87 = v88;
      if (!*v88)
        goto LABEL_130;
    }
    if (v90 == 1)
      break;
    v89 = v88[1];
    if (!v89)
    {
      v87 = v88 + 1;
      goto LABEL_130;
    }
  }
LABEL_133:
  v93 = *((_DWORD *)v88 + 8);
  v94 = &v226;
  v95 = &v226;
  if (v85)
  {
    v96 = v85;
    while (1)
    {
      while (1)
      {
        v95 = (uint64_t **)v96;
        v97 = *((_DWORD *)v96 + 7);
        if (v97 < 3)
          break;
        v96 = *v95;
        v94 = v95;
        if (!*v95)
          goto LABEL_140;
      }
      if (v97 == 2)
        break;
      v96 = v95[1];
      if (!v96)
      {
        v94 = v95 + 1;
        goto LABEL_140;
      }
    }
  }
  else
  {
LABEL_140:
    v98 = (uint64_t *)v95;
    v95 = (uint64_t **)operator new(0x28uLL);
    *(uint64_t **)((char *)v95 + 28) = (uint64_t *)2;
    *v95 = 0;
    v95[1] = 0;
    v95[2] = v98;
    *v94 = (uint64_t *)v95;
    v99 = (uint64_t *)v95;
    if (*(_QWORD *)__p)
    {
      __p = *(void **)__p;
      v99 = *v94;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v226, v99);
    v85 = v226;
    ++v227;
  }
  v100 = *((_DWORD *)v95 + 8);
  v101 = &v226;
  v102 = &v226;
  if (v85)
  {
    v103 = v85;
    while (1)
    {
      while (1)
      {
        v102 = (uint64_t **)v103;
        v104 = *((_DWORD *)v103 + 7);
        if (v104 < 4)
          break;
        v103 = *v102;
        v101 = v102;
        if (!*v102)
          goto LABEL_150;
      }
      if (v104 == 3)
        break;
      v103 = v102[1];
      if (!v103)
      {
        v101 = v102 + 1;
        goto LABEL_150;
      }
    }
  }
  else
  {
LABEL_150:
    v105 = (uint64_t *)v102;
    v102 = (uint64_t **)operator new(0x28uLL);
    *(uint64_t **)((char *)v102 + 28) = (uint64_t *)3;
    *v102 = 0;
    v102[1] = 0;
    v102[2] = v105;
    *v101 = (uint64_t *)v102;
    v106 = (uint64_t *)v102;
    if (*(_QWORD *)__p)
    {
      __p = *(void **)__p;
      v106 = *v101;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v226, v106);
    v85 = v226;
    ++v227;
  }
  v107 = *((_DWORD *)v102 + 8);
  v108 = &v226;
  v109 = &v226;
  if (v85)
  {
    v110 = v85;
    while (1)
    {
      while (1)
      {
        v109 = (uint64_t **)v110;
        v111 = *((_DWORD *)v110 + 7);
        if (v111 < 5)
          break;
        v110 = *v109;
        v108 = v109;
        if (!*v109)
          goto LABEL_160;
      }
      if (v111 == 4)
        break;
      v110 = v109[1];
      if (!v110)
      {
        v108 = v109 + 1;
        goto LABEL_160;
      }
    }
  }
  else
  {
LABEL_160:
    v112 = (uint64_t *)v109;
    v109 = (uint64_t **)operator new(0x28uLL);
    *(uint64_t **)((char *)v109 + 28) = (uint64_t *)4;
    *v109 = 0;
    v109[1] = 0;
    v109[2] = v112;
    *v108 = (uint64_t *)v109;
    v113 = (uint64_t *)v109;
    if (*(_QWORD *)__p)
    {
      __p = *(void **)__p;
      v113 = *v108;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v226, v113);
    v85 = v226;
    ++v227;
  }
  v216 = *((_DWORD *)v109 + 8);
  v114 = &v226;
  v115 = &v226;
  if (v85)
  {
    v116 = v85;
    while (1)
    {
      while (1)
      {
        v115 = (uint64_t **)v116;
        v117 = *((_DWORD *)v116 + 7);
        if (v117 < 6)
          break;
        v116 = *v115;
        v114 = v115;
        if (!*v115)
          goto LABEL_170;
      }
      if (v117 == 5)
        break;
      v116 = v115[1];
      if (!v116)
      {
        v114 = v115 + 1;
        goto LABEL_170;
      }
    }
  }
  else
  {
LABEL_170:
    v118 = (uint64_t *)v115;
    v115 = (uint64_t **)operator new(0x28uLL);
    *(uint64_t **)((char *)v115 + 28) = (uint64_t *)5;
    *v115 = 0;
    v115[1] = 0;
    v115[2] = v118;
    *v114 = (uint64_t *)v115;
    v119 = (uint64_t *)v115;
    if (*(_QWORD *)__p)
    {
      __p = *(void **)__p;
      v119 = *v114;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v226, v119);
    v85 = v226;
    ++v227;
  }
  v215 = *((_DWORD *)v115 + 8);
  v120 = &v226;
  v121 = &v226;
  if (v85)
  {
    v122 = v85;
    while (1)
    {
      while (1)
      {
        v121 = (uint64_t **)v122;
        v123 = *((_DWORD *)v122 + 7);
        if (v123 < 7)
          break;
        v122 = *v121;
        v120 = v121;
        if (!*v121)
          goto LABEL_180;
      }
      if (v123 == 6)
        break;
      v122 = v121[1];
      if (!v122)
      {
        v120 = v121 + 1;
        goto LABEL_180;
      }
    }
  }
  else
  {
LABEL_180:
    v124 = (uint64_t *)v121;
    v121 = (uint64_t **)operator new(0x28uLL);
    *(uint64_t **)((char *)v121 + 28) = (uint64_t *)6;
    *v121 = 0;
    v121[1] = 0;
    v121[2] = v124;
    *v120 = (uint64_t *)v121;
    v125 = (uint64_t *)v121;
    if (*(_QWORD *)__p)
    {
      __p = *(void **)__p;
      v125 = *v120;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v226, v125);
    v85 = v226;
    ++v227;
  }
  v214 = *((_DWORD *)v121 + 8);
  v126 = &v226;
  if (v85)
  {
    while (1)
    {
      while (1)
      {
        v126 = (uint64_t **)v85;
        v127 = *((_DWORD *)v85 + 7);
        if (v127 < 1)
          break;
        v85 = *v126;
        v44 = v126;
        if (!*v126)
          goto LABEL_190;
      }
      if ((v127 & 0x80000000) == 0)
        break;
      v85 = v126[1];
      if (!v85)
      {
        v44 = v126 + 1;
        goto LABEL_190;
      }
    }
  }
  else
  {
LABEL_190:
    v128 = (uint64_t *)v126;
    v126 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v126 + 7) = 0;
    *((_DWORD *)v126 + 8) = 0;
    *v126 = 0;
    v126[1] = 0;
    v126[2] = v128;
    *v44 = (uint64_t *)v126;
    v129 = (uint64_t *)v126;
    if (*(_QWORD *)__p)
    {
      __p = *(void **)__p;
      v129 = *v44;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v226, v129);
    ++v227;
  }
  v130 = *((_DWORD *)v126 + 8);
  v131 = (unint64_t)(v221 - v7) >> 3;
  v212 = v100;
  v213 = v93;
  v211 = v130;
  if (v216 <= 0)
  {
    if (v215 <= 0)
    {
      v135 = v130 + v214;
      v136 = v130 + v93;
      v137 = v218;
      if (v214 + v107 == (_DWORD)v131)
        v137 = 1;
      v143 = (v137 & 1) == 0;
      v138 = (v137 & 1) != 0;
      if (v143)
        v139 = 2 * (v107 + v100 + v214 == (_DWORD)v131);
      else
        v139 = 3;
      v140 = v136 <= 0;
      v141 = v136 <= 0 && v138;
      if (v140)
        v142 = v139;
      else
        v142 = 1;
      v143 = v135 == (_DWORD)v131;
      v132 = v135 != (_DWORD)v131 && v141;
      if (v143)
        v133 = 0;
      else
        v133 = v142;
      v134 = *((_DWORD *)v78 + 129);
      if (v134 != (_DWORD)v133)
        goto LABEL_217;
    }
    else
    {
      v132 = 0;
      v133 = 5;
      v134 = *((_DWORD *)v78 + 129);
      if (v134 != 5)
        goto LABEL_217;
    }
    goto LABEL_233;
  }
  v132 = 0;
  v133 = 4;
  v134 = *((_DWORD *)v78 + 129);
  if (v134 == 4)
    goto LABEL_233;
LABEL_217:
  v144 = !v132;
  if (v134 != 1)
    v144 = 1;
  if ((v144 & 1) != 0)
  {
LABEL_227:
    v151 = (char *)this + 144;
    v150 = *((unsigned __int8 *)this + 144);
    *((_DWORD *)this + 129) = v133;
    if (v150)
      goto LABEL_321;
    *((_BYTE *)this + 144) = 1;
    v152 = *((_QWORD *)this + 15);
    v153 = *((_QWORD *)this + 16);
    if (v152 == v153)
    {
      *v151 = 0;
      v156 = v223;
      v157 = &v223;
      v158 = &v223;
      if (v223)
      {
LABEL_234:
        v159 = v156;
        while (1)
        {
          while (1)
          {
            v158 = (uint64_t **)v159;
            v160 = *((_DWORD *)v159 + 7);
            if (v160 < 3)
              break;
            v159 = *v158;
            v157 = v158;
            if (!*v158)
              goto LABEL_241;
          }
          if (v160 == 2)
            break;
          v159 = v158[1];
          if (!v159)
          {
            v157 = v158 + 1;
            goto LABEL_241;
          }
        }
LABEL_244:
        v163 = *((_DWORD *)v158 + 8);
        v164 = &v223;
        v165 = &v223;
        v166 = this;
        if (v156)
        {
          v167 = v156;
          while (1)
          {
            while (1)
            {
              v165 = (uint64_t **)v167;
              v168 = *((_DWORD *)v167 + 7);
              if (v168 < 2)
                break;
              v167 = *v165;
              v164 = v165;
              if (!*v165)
                goto LABEL_251;
            }
            if (v168 == 1)
              break;
            v167 = v165[1];
            if (!v167)
            {
              v164 = v165 + 1;
              goto LABEL_251;
            }
          }
        }
        else
        {
LABEL_251:
          v169 = (uint64_t *)v165;
          v165 = (uint64_t **)operator new(0x28uLL);
          *(uint64_t **)((char *)v165 + 28) = (uint64_t *)1;
          *v165 = 0;
          v165[1] = 0;
          v165[2] = v169;
          *v164 = (uint64_t *)v165;
          v170 = (uint64_t *)v165;
          if (*v222)
          {
            v222 = (uint64_t **)*v222;
            v170 = *v164;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v223, v170);
          v156 = v223;
          ++v224;
        }
        v171 = *((_DWORD *)v165 + 8);
        v172 = &v223;
        v173 = &v223;
        if (v156)
        {
          v174 = v156;
          while (1)
          {
            while (1)
            {
              v173 = (uint64_t **)v174;
              v175 = *((_DWORD *)v174 + 7);
              if (v175 < 5)
                break;
              v174 = *v173;
              v172 = v173;
              if (!*v173)
                goto LABEL_261;
            }
            if (v175 == 4)
              break;
            v174 = v173[1];
            if (!v174)
            {
              v172 = v173 + 1;
              goto LABEL_261;
            }
          }
        }
        else
        {
LABEL_261:
          v176 = (uint64_t *)v173;
          v173 = (uint64_t **)operator new(0x28uLL);
          *(uint64_t **)((char *)v173 + 28) = (uint64_t *)4;
          *v173 = 0;
          v173[1] = 0;
          v173[2] = v176;
          *v172 = (uint64_t *)v173;
          v177 = (uint64_t *)v173;
          if (*v222)
          {
            v222 = (uint64_t **)*v222;
            v177 = *v172;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v223, v177);
          v156 = v223;
          ++v224;
        }
        v178 = *((_DWORD *)v173 + 8);
        v179 = &v223;
        v180 = &v223;
        if (v156)
        {
          v181 = v156;
          while (1)
          {
            while (1)
            {
              v180 = (uint64_t **)v181;
              v182 = *((_DWORD *)v181 + 7);
              if (v182 < 4)
                break;
              v181 = *v180;
              v179 = v180;
              if (!*v180)
                goto LABEL_271;
            }
            if (v182 == 3)
              break;
            v181 = v180[1];
            if (!v181)
            {
              v179 = v180 + 1;
              goto LABEL_271;
            }
          }
        }
        else
        {
LABEL_271:
          v183 = (uint64_t *)v180;
          v180 = (uint64_t **)operator new(0x28uLL);
          *(uint64_t **)((char *)v180 + 28) = (uint64_t *)3;
          *v180 = 0;
          v180[1] = 0;
          v180[2] = v183;
          *v179 = (uint64_t *)v180;
          v184 = (uint64_t *)v180;
          if (*v222)
          {
            v222 = (uint64_t **)*v222;
            v184 = *v179;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v223, v184);
          v156 = v223;
          ++v224;
          v166 = this;
        }
        v185 = v178 + v216;
        v186 = *((_DWORD *)v180 + 8);
        v187 = &v223;
        if (v156)
        {
          while (1)
          {
            while (1)
            {
              v187 = (uint64_t **)v156;
              v188 = *((_DWORD *)v156 + 7);
              if (v188 < 1)
                break;
              v156 = *v187;
              v45 = v187;
              if (!*v187)
                goto LABEL_281;
            }
            if ((v188 & 0x80000000) == 0)
              break;
            v156 = v187[1];
            if (!v156)
            {
              v45 = v187 + 1;
              goto LABEL_281;
            }
          }
        }
        else
        {
LABEL_281:
          v189 = (uint64_t *)v187;
          v187 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v187 + 7) = 0;
          *((_DWORD *)v187 + 8) = 0;
          *v187 = 0;
          v187[1] = 0;
          v187[2] = v189;
          *v45 = (uint64_t *)v187;
          v190 = (uint64_t *)v187;
          if (*v222)
            v190 = *v45;
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v223, v190);
          ++v224;
          v166 = this;
        }
        if (v185 <= 0)
        {
          if (v215 <= 0)
          {
            v193 = *((_DWORD *)v187 + 8) + v211;
            v194 = 2 * (v107 + v212 + v163 + v186 + v214 == 2 * (_DWORD)v131);
            if (v171 + v213 + v193 > 0)
              v194 = 1;
            if (v193 + v186 + v214 == 2 * (_DWORD)v131)
              v191 = 0;
            else
              v191 = v194;
            v192 = v166;
            if (*((_DWORD *)v166 + 130) == (_DWORD)v191)
              goto LABEL_303;
          }
          else
          {
            v191 = 3;
            v192 = v166;
            if (*((_DWORD *)v166 + 130) == 3)
              goto LABEL_303;
          }
        }
        else
        {
          v191 = 4;
          v192 = v166;
          if (*((_DWORD *)v166 + 130) == 4)
            goto LABEL_303;
        }
        v196 = (char *)v192 + 112;
        v195 = *((unsigned __int8 *)v192 + 112);
        *((_DWORD *)v192 + 130) = v191;
        if (v195)
          goto LABEL_321;
        v197 = v192;
        *((_BYTE *)v192 + 112) = 1;
        v198 = *((_QWORD *)v192 + 11);
        v199 = *((_QWORD *)v197 + 12);
        if (v198 == v199)
        {
          *v196 = 0;
          v192 = this;
        }
        else
        {
          v200 = 0;
          do
          {
            (*(void (**)(uint64_t, uint64_t))(v198 + 40))(v198 + 8, v191);
            v201 = *(_BYTE **)v198;
            v198 += 56;
            v200 |= v201 == v196;
          }
          while (v198 != v199);
          *v196 = 0;
          v192 = this;
          if ((v200 & 1) != 0)
            webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(v196 - 24), v196);
        }
LABEL_303:
        if (v219)
          v202 = 2 * (v7 != v221);
        else
          v202 = v220;
        if (*((_DWORD *)v192 + 131) != (_DWORD)v202)
        {
          v204 = (char *)v192 + 176;
          v203 = *((unsigned __int8 *)v192 + 176);
          *((_DWORD *)v192 + 131) = v202;
          if (v203)
            goto LABEL_321;
          *((_BYTE *)v192 + 176) = 1;
          v205 = *((_QWORD *)v192 + 19);
          v206 = *((_QWORD *)v192 + 20);
          if (v205 == v206)
          {
            *v204 = 0;
            std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v223);
            std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v226);
            if (!v7)
              return;
LABEL_314:
            operator delete(v7);
            return;
          }
          v207 = 0;
          do
          {
            (*(void (**)(uint64_t, uint64_t))(v205 + 40))(v205 + 8, v202);
            v208 = *(_BYTE **)v205;
            v205 += 56;
            v207 |= v208 == v204;
          }
          while (v205 != v206);
          *v204 = 0;
          if ((v207 & 1) != 0)
            webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::JsepTransportController *)((char *)v192 + 152), (char *)v192 + 176);
        }
        std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v223);
        std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v226);
        if (!v7)
          return;
        goto LABEL_314;
      }
LABEL_241:
      v161 = (uint64_t *)v158;
      v158 = (uint64_t **)operator new(0x28uLL);
      *(uint64_t **)((char *)v158 + 28) = (uint64_t *)2;
      *v158 = 0;
      v158[1] = 0;
      v158[2] = v161;
      *v157 = (uint64_t *)v158;
      v162 = (uint64_t *)v158;
      if (*v222)
      {
        v222 = (uint64_t **)*v222;
        v162 = *v157;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v223, v162);
      v156 = v223;
      ++v224;
      goto LABEL_244;
    }
    v154 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(v152 + 40))(v152 + 8, v133);
      v155 = *(_BYTE **)v152;
      v152 += 56;
      v154 |= v155 == v151;
    }
    while (v152 != v153);
    *v151 = 0;
    if ((v154 & 1) != 0)
      webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::JsepTransportController *)((char *)this + 120), (char *)this + 144);
LABEL_233:
    v156 = v223;
    v157 = &v223;
    v158 = &v223;
    if (v223)
      goto LABEL_234;
    goto LABEL_241;
  }
  v145 = (char *)this + 144;
  if (!*((_BYTE *)this + 144))
  {
    *((_BYTE *)this + 144) = 1;
    v146 = *((_QWORD *)this + 15);
    v147 = *((_QWORD *)this + 16);
    if (v146 == v147)
    {
      *v145 = 0;
    }
    else
    {
      v148 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t))(v146 + 40))(v146 + 8, 2);
        v149 = *(_BYTE **)v146;
        v146 += 56;
        v148 |= v149 == v145;
      }
      while (v146 != v147);
      *v145 = 0;
      if ((v148 & 1) != 0)
        webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::JsepTransportController *)((char *)this + 120), (char *)this + 144);
    }
    goto LABEL_227;
  }
LABEL_321:
  v209 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v1, v2, v3, v4, v210);
  _ZN4absl22internal_any_invocable12LocalInvokerILb0EvRN6webrtc20RtpTransportInternal41callback_undemuxable_rtp_packet_received_MUlRNS2_17RtpPacketReceivedEE_EJS5_EEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE(v209);
}

void std::__function::__func<webrtc::JsepTransportController::MaybeCreateJsepTransport(BOOL,cricket::ContentInfo const&,cricket::SessionDescription const&)::$_0,std::allocator<webrtc::JsepTransportController::MaybeCreateJsepTransport(BOOL,cricket::ContentInfo const&,cricket::SessionDescription const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::JsepTransportController::MaybeCreateJsepTransport(BOOL,cricket::ContentInfo const&,cricket::SessionDescription const&)::$_0,std::allocator<webrtc::JsepTransportController::MaybeCreateJsepTransport(BOOL,cricket::ContentInfo const&,cricket::SessionDescription const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B5868;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::JsepTransportController::MaybeCreateJsepTransport(BOOL,cricket::ContentInfo const&,cricket::SessionDescription const&)::$_0,std::allocator<webrtc::JsepTransportController::MaybeCreateJsepTransport(BOOL,cricket::ContentInfo const&,cricket::SessionDescription const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B5868;
  a2[1] = v2;
  return result;
}

void std::__function::__func<webrtc::JsepTransportController::MaybeCreateJsepTransport(BOOL,cricket::ContentInfo const&,cricket::SessionDescription const&)::$_0,std::allocator<webrtc::JsepTransportController::MaybeCreateJsepTransport(BOOL,cricket::ContentInfo const&,cricket::SessionDescription const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  webrtc::JsepTransportController::UpdateAggregateStates_n(*(webrtc::JsepTransportController **)(a1 + 8));
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(rtc::CopyOnWriteBuffer *,long long)>::CallVoidPtr<absl::AnyInvocable<void ()(rtc::CopyOnWriteBuffer *,long long)>>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 24))();
}

void webrtc::UntypedFunction::PrepareArgs<void ()(rtc::CopyOnWriteBuffer *,long long),absl::AnyInvocable<void ()(rtc::CopyOnWriteBuffer *,long long)>,absl::AnyInvocable<void ()(rtc::CopyOnWriteBuffer *,long long)>,(void *)0>(absl::AnyInvocable<void ()(rtc::CopyOnWriteBuffer *,long long)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke(_QWORD *a1)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*a1 + 16))(1, *a1, *a1);
  JUMPOUT(0x20BD0ADECLL);
}

void std::__function::__func<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_0,std::allocator<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_0>,BOOL ()(std::string const&,cricket::JsepTransport *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_0,std::allocator<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_0>,BOOL ()(std::string const&,cricket::JsepTransport *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B58B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_0,std::allocator<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_0>,BOOL ()(std::string const&,cricket::JsepTransport *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B58B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_0,std::allocator<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_0>,BOOL ()(std::string const&,cricket::JsepTransport *)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (***v11)(_QWORD);
  void (***v13)(_QWORD);

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 576);
  if (!v3)
    return 0;
  v5 = (_QWORD *)*a3;
  if (*a3)
  {
    v6 = v5[12];
    if (!v6)
    {
      v6 = v5[11];
      if (!v6)
        v6 = v5[10];
    }
    v7 = (void (***)(_QWORD))v5[13];
    v13 = v7;
    if (v7)
      (**v7)(v7);
    v8 = v5[15];
    if (v8)
      v9 = v8 + 8;
    else
      v9 = 0;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void (****)(_QWORD), uint64_t))(*(_QWORD *)v3 + 16))(v3, a2, v6, &v13, v9);
    v11 = v13;
    if (!v13)
      return v10;
  }
  else
  {
    v13 = 0;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void (****)(_QWORD), _QWORD))(*(_QWORD *)v3 + 16))(v3, a2, 0, &v13, 0);
    v11 = v13;
    if (!v13)
      return v10;
  }
  (*v11)[1](v11);
  return v10;
}

void std::__function::__func<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_1,std::allocator<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_1,std::allocator<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B58F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_1,std::allocator<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B58F8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_1,std::allocator<webrtc::JsepTransportController::JsepTransportController(webrtc::Environment const&,rtc::Thread *,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,webrtc::JsepTransportController::Config)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  webrtc::JsepTransportController::UpdateAggregateStates_n(*(webrtc::JsepTransportController **)(a1 + 8));
}

__n128 rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::JsepTransportController::SetLocalDescription(webrtc::SdpType,cricket::SessionDescription const*,cricket::SessionDescription const*)::$_0,webrtc::RTCError,void>(webrtc::JsepTransportController::SetLocalDescription(webrtc::SdpType,cricket::SessionDescription const*,cricket::SessionDescription const*)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  void **v3;
  __n128 result;
  int v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _DWORD v9[2];

  webrtc::JsepTransportController::SetLocalDescription(&v6, *(_QWORD *)a1[1], *(unsigned int *)(a1[1] + 8), *(_QWORD *)(a1[1] + 16), *(_QWORD *)(a1[1] + 24));
  v2 = *a1;
  *(_DWORD *)v2 = v6;
  v3 = (void **)(v2 + 8);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);
  result = v7;
  *(_QWORD *)(v2 + 24) = v8;
  *(__n128 *)v3 = result;
  v5 = v9[0];
  *(_DWORD *)(v2 + 35) = *(_DWORD *)((char *)v9 + 3);
  *(_DWORD *)(v2 + 32) = v5;
  return result;
}

__n128 rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::JsepTransportController::SetRemoteDescription(webrtc::SdpType,cricket::SessionDescription const*,cricket::SessionDescription const*)::$_0,webrtc::RTCError,void>(webrtc::JsepTransportController::SetRemoteDescription(webrtc::SdpType,cricket::SessionDescription const*,cricket::SessionDescription const*)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  int v11;
  int v12;
  __n128 v13;
  _BYTE v14[15];
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v2 = a1[1];
  v3 = *(_QWORD *)v2;
  v4 = *(_DWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  if (rtc::Thread::IsCurrent(*(rtc::Thread **)(*(_QWORD *)v2 + 352)))
  {
    webrtc::JsepTransportController::ApplyDescription_n(v3, 0, v4, v6, v5, (uint64_t)&v12);
    v7 = *a1;
    *(_DWORD *)v7 = v12;
    v8 = v7 + 8;
    if (*(char *)(v7 + 31) < 0)
      goto LABEL_5;
  }
  else
  {
    v9 = *(_QWORD *)(v3 + 352);
    v16 = v3;
    v17 = v4;
    v18 = v6;
    v19 = v5;
    v12 = 0;
    v14[14] = 0;
    *(_QWORD *)v14 = 0;
    v13 = 0uLL;
    *(_QWORD *)&v14[5] = 0;
    v20[0] = &v12;
    v20[1] = &v16;
    (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(), char *))(*(_QWORD *)v9 + 96))(v9, v20, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::JsepTransportController::SetRemoteDescription(webrtc::SdpType,cricket::SessionDescription const*,cricket::SessionDescription const*)::$_0,webrtc::RTCError,void>(webrtc::JsepTransportController::SetRemoteDescription(webrtc::SdpType,cricket::SessionDescription const*,cricket::SessionDescription const*)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v15);
    v7 = *a1;
    *(_DWORD *)v7 = v12;
    v8 = v7 + 8;
    if (*(char *)(v7 + 31) < 0)
LABEL_5:
      operator delete(*(void **)v8);
  }
  result = v13;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)v14;
  *(__n128 *)v8 = result;
  v11 = *(_DWORD *)&v14[8];
  *(_DWORD *)(v7 + 35) = *(_DWORD *)&v14[11];
  *(_DWORD *)(v7 + 32) = v11;
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<std::optional<rtc::SSLRole> rtc::Thread::BlockingCall<webrtc::JsepTransportController::GetDtlsRole(std::string const&)::$_0,std::optional<rtc::SSLRole>,void>(webrtc::JsepTransportController::GetDtlsRole(std::string const&)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = webrtc::JsepTransportController::GetDtlsRole(*(_QWORD *)a1[1], *(_QWORD *)(a1[1] + 8));
  v3 = *a1;
  *(_DWORD *)v3 = result;
  *(_BYTE *)(v3 + 4) = BYTE4(result);
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::JsepTransportController::SetLocalCertificate(webrtc::scoped_refptr<rtc::RTCCertificate> const&)::$_0,BOOL,void>(webrtc::JsepTransportController::SetLocalCertificate(webrtc::scoped_refptr<rtc::RTCCertificate> const&)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  uint64_t result;

  result = webrtc::JsepTransportController::SetLocalCertificate(**(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  **(_BYTE **)a1 = result;
  return result;
}

void rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::JsepTransportController::MaybeStartGathering(void)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char v10;

  v1 = *a1;
  if (rtc::Thread::IsCurrent(*(rtc::Thread **)(*a1 + 352)))
  {
    webrtc::JsepTransportController::GetDtlsTransports((webrtc::JsepTransportCollection **)v1, &v8);
    v2 = v8;
    v3 = v9;
    if (v8 != v9)
    {
      v4 = v8;
      do
      {
        v5 = *(_QWORD *)v4;
        v4 += 8;
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
      }
      while (v4 != v3);
    }
    if (v2)
      operator delete(v2);
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 352);
    v8 = (char *)v1;
    (*(void (**)(uint64_t, char **, uint64_t (*)(), char *))(*(_QWORD *)v7 + 96))(v7, &v8, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::JsepTransportController::MaybeStartGathering(void)::$_0>, &v10);
  }
}

__n128 rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::JsepTransportController::RemoveRemoteCandidates(std::vector<cricket::Candidate> const&)::$_0,webrtc::RTCError,void>(webrtc::JsepTransportController::RemoveRemoteCandidates(std::vector<cricket::Candidate> const&)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  void **v3;
  __n128 result;
  int v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _DWORD v9[2];

  webrtc::JsepTransportController::RemoveRemoteCandidates(&v6, *(_QWORD *)a1[1], *(_QWORD *)(a1[1] + 8));
  v2 = *a1;
  *(_DWORD *)v2 = v6;
  v3 = (void **)(v2 + 8);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);
  result = v7;
  *(_QWORD *)(v2 + 24) = v8;
  *(__n128 *)v3 = result;
  v5 = v9[0];
  *(_DWORD *)(v2 + 35) = *(_DWORD *)((char *)v9 + 3);
  *(_DWORD *)(v2 + 32) = v5;
  return result;
}

void std::__tree<std::__value_type<std::string,std::vector<cricket::Candidate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<cricket::Candidate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<cricket::Candidate>>>>::destroy(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<cricket::Candidate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<cricket::Candidate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<cricket::Candidate>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::vector<cricket::Candidate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<cricket::Candidate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<cricket::Candidate>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 7);
    if (v2)
    {
      v3 = *((_QWORD *)a1 + 8);
      v4 = (void *)*((_QWORD *)a1 + 7);
      if (v3 != v2)
      {
        do
          cricket::Candidate::~Candidate((void **)(v3 - 432));
        while (v3 != v2);
        v4 = (void *)*((_QWORD *)a1 + 7);
      }
      *((_QWORD *)a1 + 8) = v2;
      operator delete(v4);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

__n128 rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::JsepTransportController::RollbackTransports(void)::$_0,webrtc::RTCError,void>(webrtc::JsepTransportController::RollbackTransports(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  void **v3;
  __n128 result;
  int v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _DWORD v9[2];

  webrtc::JsepTransportController::RollbackTransports(&v6, *(webrtc::JsepTransportController **)a1[1]);
  v2 = *a1;
  *(_DWORD *)v2 = v6;
  v3 = (void **)(v2 + 8);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);
  result = v7;
  *(_QWORD *)(v2 + 24) = v8;
  *(__n128 *)v3 = result;
  v5 = v9[0];
  *(_DWORD *)(v2 + 35) = *(_DWORD *)((char *)v9 + 3);
  *(_DWORD *)(v2 + 32) = v5;
  return result;
}

uint64_t sigslot::_opaque_connection::emitter<webrtc::JsepTransportController,rtc::PacketTransportInternal *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::CreateDtlsTransport(cricket::ContentInfo const&,cricket::IceTransportInternal *)::$_1 &,cricket::IceTransportInternal *>(webrtc::JsepTransportController **a1)
{
  webrtc::JsepTransportController::UpdateAggregateStates_n(*a1);
}

uint64_t sigslot::_opaque_connection::emitter<webrtc::JsepTransportController,cricket::IceTransportInternal *,cricket::Candidate const&>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::CreateDtlsTransport(cricket::ContentInfo const&,cricket::IceTransportInternal *)::$_2 &,cricket::IceTransportInternal *,cricket::IceCandidateErrorEvent const&>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  webrtc::callback_list_impl::CallbackListReceivers *v14;
  _BYTE *v15;
  std::string *v16;
  uint64_t v17;

  v8 = *a1;
  v9 = (_BYTE *)(*a1 + 240);
  if (*v9)
  {
    v16 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v17);
    absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::CreateDtlsTransport(cricket::ContentInfo const&,cricket::IceTransportInternal *)::$_3 &,cricket::IceTransportInternal *,std::vector<cricket::Candidate> const&>(v16);
  }
  else
  {
    *(_BYTE *)(v8 + 240) = 1;
    v10 = *(_QWORD *)(v8 + 216);
    v11 = *(_QWORD *)(v8 + 224);
    if (v10 == v11)
    {
      *v9 = 0;
    }
    else
    {
      v13 = 0;
      v14 = (webrtc::callback_list_impl::CallbackListReceivers *)(v8 + 216);
      do
      {
        (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v10 + 8, a3);
        v15 = *(_BYTE **)v10;
        v10 += 56;
        v13 |= v15 == v9;
      }
      while (v10 != v11);
      *v9 = 0;
      if ((v13 & 1) != 0)
        webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers(v14, v9);
    }
  }
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::CreateDtlsTransport(cricket::ContentInfo const&,cricket::IceTransportInternal *)::$_3 &,cricket::IceTransportInternal *,std::vector<cricket::Candidate> const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  webrtc::callback_list_impl::CallbackListReceivers *v14;
  _BYTE *v15;
  std::string *v16;
  uint64_t v17;

  v8 = *a1;
  if (*(_BYTE *)(*a1 + 272))
  {
    v16 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v17);
    sigslot::_opaque_connection::emitter<webrtc::JsepTransportController,cricket::IceTransportInternal *>(v16);
  }
  else
  {
    v9 = (_BYTE *)(v8 + 272);
    *(_BYTE *)(v8 + 272) = 1;
    v10 = *(_QWORD *)(v8 + 248);
    v11 = *(_QWORD *)(v8 + 256);
    if (v10 == v11)
    {
      *v9 = 0;
    }
    else
    {
      v13 = 0;
      v14 = (webrtc::callback_list_impl::CallbackListReceivers *)(v8 + 248);
      do
      {
        (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v10 + 8, a3);
        v15 = *(_BYTE **)v10;
        v10 += 56;
        v13 |= v15 == v9;
      }
      while (v10 != v11);
      *v9 = 0;
      if ((v13 & 1) != 0)
        webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers(v14, v9);
    }
  }
}

uint64_t sigslot::_opaque_connection::emitter<webrtc::JsepTransportController,cricket::IceTransportInternal *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::CreateDtlsTransport(cricket::ContentInfo const&,cricket::IceTransportInternal *)::$_4 &,cricket::CandidatePairChangeEvent const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  webrtc::callback_list_impl::CallbackListReceivers *v14;
  _BYTE *v15;
  std::string *v16;
  uint64_t v17;

  v8 = *a1;
  if (*(_BYTE *)(*a1 + 304))
  {
    v16 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v17);
    webrtc::webrtc_function_impl::CallHelpers<void ()(rtc::SSLHandshakeError)>::CallInlineStorage<webrtc::JsepTransportController::CreateDtlsTransport(cricket::ContentInfo const&,cricket::IceTransportInternal *)::$_5>(v16);
  }
  else
  {
    v9 = (_BYTE *)(v8 + 304);
    *(_BYTE *)(v8 + 304) = 1;
    v10 = *(_QWORD *)(v8 + 280);
    v11 = *(_QWORD *)(v8 + 288);
    if (v10 == v11)
    {
      *v9 = 0;
    }
    else
    {
      v13 = 0;
      v14 = (webrtc::callback_list_impl::CallbackListReceivers *)(v8 + 280);
      do
      {
        (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v10 + 8, a2);
        v15 = *(_BYTE **)v10;
        v10 += 56;
        v13 |= v15 == v9;
      }
      while (v10 != v11);
      *v9 = 0;
      if ((v13 & 1) != 0)
        webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers(v14, v9);
    }
  }
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(rtc::SSLHandshakeError)>::CallInlineStorage<webrtc::JsepTransportController::CreateDtlsTransport(cricket::ContentInfo const&,cricket::IceTransportInternal *)::$_5>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 696);
  v4 = a2;
  if (!v2)
  {
    std::__throw_bad_function_call[abi:sn180100]();
    JUMPOUT(0x20861FA98);
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

void std::__function::__func<webrtc::JsepTransportController::CreateDtlsSrtpTransport(std::string const&,cricket::DtlsTransportInternal *,cricket::DtlsTransportInternal *)::$_1,std::allocator<webrtc::JsepTransportController::CreateDtlsSrtpTransport(std::string const&,cricket::DtlsTransportInternal *,cricket::DtlsTransportInternal *)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::JsepTransportController::CreateDtlsSrtpTransport(std::string const&,cricket::DtlsTransportInternal *,cricket::DtlsTransportInternal *)::$_1,std::allocator<webrtc::JsepTransportController::CreateDtlsSrtpTransport(std::string const&,cricket::DtlsTransportInternal *,cricket::DtlsTransportInternal *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C0B5940;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::JsepTransportController::CreateDtlsSrtpTransport(std::string const&,cricket::DtlsTransportInternal *,cricket::DtlsTransportInternal *)::$_1,std::allocator<webrtc::JsepTransportController::CreateDtlsSrtpTransport(std::string const&,cricket::DtlsTransportInternal *,cricket::DtlsTransportInternal *)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C0B5940;
  a2[1] = v2;
  return result;
}

void std::__function::__func<webrtc::JsepTransportController::CreateDtlsSrtpTransport(std::string const&,cricket::DtlsTransportInternal *,cricket::DtlsTransportInternal *)::$_1,std::allocator<webrtc::JsepTransportController::CreateDtlsSrtpTransport(std::string const&,cricket::DtlsTransportInternal *,cricket::DtlsTransportInternal *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  webrtc::JsepTransportController::UpdateAggregateStates_n(*(webrtc::JsepTransportController **)(a1 + 8));
}

void std::__tree<std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::__map_value_compare<cricket::ContentGroup const*,std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::less<cricket::ContentGroup const*>,true>,std::allocator<std::__value_type<cricket::ContentGroup const*,std::vector<int>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::__map_value_compare<cricket::ContentGroup const*,std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::less<cricket::ContentGroup const*>,true>,std::allocator<std::__value_type<cricket::ContentGroup const*,std::vector<int>>>>::destroy(*a1);
    std::__tree<std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::__map_value_compare<cricket::ContentGroup const*,std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::less<cricket::ContentGroup const*>,true>,std::allocator<std::__value_type<cricket::ContentGroup const*,std::vector<int>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,cricket::ContentGroup const*>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::ContentGroup const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::ContentGroup const*>>>::__lower_bound<std::string>(const void **__s2, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  const void *v6;
  size_t v7;
  BOOL v8;
  int v9;
  _QWORD *v10;
  size_t v12;
  int v13;
  _QWORD *v15;
  size_t v16;
  size_t v18;
  int v19;

  if (a2)
  {
    v4 = a2;
    v6 = *__s2;
    v7 = (size_t)__s2[1];
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 0;
    v9 = !v8;
    if ((*((_BYTE *)__s2 + 23) & 0x80) == 0)
    {
      v6 = (const void *)*((unsigned __int8 *)__s2 + 23);
      while (1)
      {
        v10 = v4 + 4;
        if (*((char *)v4 + 55) < 0)
        {
          v7 = v4[5];
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_29;
          v10 = (_QWORD *)*v10;
          if (v7 && v10 == 0)
            goto LABEL_29;
        }
        else
        {
          v7 = *((unsigned __int8 *)v4 + 55);
        }
        if ((unint64_t)v6 >= v7)
          v12 = v7;
        else
          v12 = (size_t)v6;
        v13 = memcmp(v10, __s2, v12);
        if (v13)
        {
          if (v13 < 0)
            goto LABEL_10;
LABEL_25:
          a3 = v4;
          v4 = (uint64_t *)*v4;
          if (!v4)
            return a3;
        }
        else
        {
          if (v7 >= (unint64_t)v6)
            goto LABEL_25;
LABEL_10:
          v4 = (uint64_t *)v4[1];
          if (!v4)
            return a3;
        }
      }
    }
    if ((v7 & 0x8000000000000000) == 0 && v9)
    {
      while (1)
      {
LABEL_34:
        v15 = v4 + 4;
        if (*((char *)v4 + 55) < 0)
        {
          v16 = v4[5];
          if ((v16 & 0x8000000000000000) != 0)
            break;
          v15 = (_QWORD *)*v15;
          if (v16 && v15 == 0)
            break;
        }
        else
        {
          v16 = *((unsigned __int8 *)v4 + 55);
        }
        if (v7 >= v16)
          v18 = v16;
        else
          v18 = v7;
        v19 = memcmp(v15, v6, v18);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            goto LABEL_30;
        }
        else if (v16 >= v7)
        {
          goto LABEL_30;
        }
        v4 = (uint64_t *)v4[1];
        if (!v4)
          return a3;
      }
    }
LABEL_29:
    __break(1u);
LABEL_30:
    a3 = v4;
    v4 = (uint64_t *)*v4;
    if (v4)
      goto LABEL_34;
  }
  return a3;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::MaybeCreateJsepTransport(BOOL,cricket::ContentInfo const&,cricket::SessionDescription const&)::$_1 &,rtc::CopyOnWriteBuffer *,long long>(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 608))(*(_QWORD *)a1 + 584);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::JsepTransportController::MaybeCreateJsepTransport(BOOL,cricket::ContentInfo const&,cricket::SessionDescription const&)::$_2 &,webrtc::RtpPacketReceived &>(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 640))(*(_QWORD *)a1 + 616);
}

void webrtc::KeyframeIntervalSettings::ParseFromFieldTrials(uint64_t a1@<X8>)
{
  char *v3;
  uint64_t v4;
  char *p_p;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *__p;
  uint64_t v14;
  unsigned __int8 v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  v9 = &unk_24C0B3F60;
  v10 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = xmmword_208F05190;
  if (v3 <= "min_keyframe_send_interval_ms" && v3 + 29 > "min_keyframe_send_interval_ms")
    goto LABEL_19;
  strcpy(v3, "min_keyframe_send_interval_ms");
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)a1 = &unk_24C0B4110;
  *(_BYTE *)(a1 + 60) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  v16[0] = a1;
  webrtc::FieldTrialsRegistry::Lookup((uint64_t)&v9);
  if (((char)v15 & 0x80000000) == 0)
  {
    v4 = v15;
    p_p = (char *)&__p;
    goto LABEL_8;
  }
  v4 = v14;
  if (v14 < 0 || (p_p = (char *)__p, v14) && !__p)
LABEL_19:
    __break(1u);
LABEL_8:
  webrtc::ParseFieldTrial(v16, 1, p_p, v4);
  if ((char)v15 < 0)
    operator delete(__p);
  v9 = &unk_24C0B4260;
  v6 = (void **)v10;
  if (v10)
  {
    v7 = v11;
    v8 = v10;
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = v10;
    }
    v11 = v6;
    operator delete(v8);
  }
}

void webrtc::LegacyEncodedAudioFrame::~LegacyEncodedAudioFrame(webrtc::LegacyEncodedAudioFrame *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::LegacyEncodedAudioFrame::Duration(webrtc::LegacyEncodedAudioFrame *this)
{
  int v1;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1), *((_QWORD *)this + 4), *((_QWORD *)this + 2));
  return v1 & ~(v1 >> 31);
}

uint64_t webrtc::LegacyEncodedAudioFrame::Decode@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  char v15;
  int v16;

  v16 = 1;
  v7 = a1[4];
  v9 = a1[1];
  v8 = a1[2];
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 64))(v9, v7, v8);
  if ((v11 & 0x80000000) == 0
    && (v12 = v11,
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9),
        2 * v12 * result > (unint64_t)(2 * a3))
    || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v9 + 104))(v9, v7, v8, v10, a2, &v16), (result & 0x80000000) != 0))
  {
    v15 = 0;
    *(_BYTE *)a4 = 0;
  }
  else
  {
    v14 = v16;
    *(_QWORD *)a4 = result;
    *(_DWORD *)(a4 + 8) = v14;
    v15 = 1;
  }
  *(_BYTE *)(a4 + 16) = v15;
  return result;
}

void webrtc::LegacyEncodedAudioFrame::SplitBySamples(uint64_t a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, unsigned int a5@<W4>, char **a6@<X8>)
{
  int v6;
  unint64_t *v7;
  char **v9;
  unint64_t v10;
  size_t v11;
  size_t v12;
  char *v13;
  char *v14;
  int v15;
  unint64_t v16;
  size_t v17;
  const void *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  const double *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _DWORD *v66;
  char **v67;
  unint64_t v69;
  char *v72;
  float64x2x2_t v73;

  v6 = a3;
  v7 = a2;
  v9 = a6;
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v10 = *a2;
  if (20 * a4 < *a2)
  {
    v11 = *a2;
    do
    {
      v12 = v11;
      v11 >>= 1;
    }
    while (v12 >= 40 * a4);
    v13 = 0;
    v72 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v69 = v12 * a5 / a4;
    v67 = v9;
    while (1)
    {
      v17 = v10 - v16;
      if (v17 < v12)
        v12 = v17;
      if (v12)
      {
        v18 = (const void *)(v7[2] + v16);
        v19 = (void *)operator new[]();
        memcpy(v19, v18, v12);
      }
      else
      {
        v19 = 0;
      }
      v20 = (_QWORD *)operator new();
      v21 = v20;
      *v20 = &off_24C0B5988;
      v20[1] = a1;
      v20[2] = v12;
      v20[3] = v12;
      v22 = v15 + v6;
      v20[4] = v19;
      if (v14 >= v72)
        break;
      if (!v14)
        goto LABEL_85;
      *(_DWORD *)v14 = v22;
      *((_DWORD *)v14 + 1) = 0;
      v23 = v14 + 16;
      *((_QWORD *)v14 + 1) = v20;
      v7 = a2;
LABEL_6:
      v9[1] = v23;
      v16 += v12;
      v15 += v69;
      v10 = *v7;
      v14 = v23;
      if (v16 >= *v7)
        return;
    }
    v24 = v14 - v13;
    v25 = (v14 - v13) >> 4;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 60)
      goto LABEL_86;
    if ((v72 - v13) >> 3 > v26)
      v26 = (v72 - v13) >> 3;
    if ((unint64_t)(v72 - v13) >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    if (!v26)
    {
LABEL_85:
      __break(1u);
LABEL_86:
      abort();
    }
    if (v26 >> 60)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v27 = 16 * v26;
    v28 = (char *)operator new(16 * v26);
    v29 = &v28[16 * v25];
    v30 = &v28[v27];
    *(_DWORD *)v29 = v22;
    *((_DWORD *)v29 + 1) = 0;
    *((_QWORD *)v29 + 1) = v21;
    v23 = v29 + 16;
    v31 = v14 - v13;
    v72 = v30;
    if (v14 == v13)
    {
      v9 = v67;
      *v67 = v29;
      v67[1] = v23;
      v67[2] = v30;
      v7 = a2;
      if (!v13)
      {
LABEL_5:
        v13 = v29;
        v6 = a3;
        goto LABEL_6;
      }
LABEL_34:
      operator delete(v13);
      goto LABEL_5;
    }
    v32 = v31 - 16;
    v7 = a2;
    if ((unint64_t)(v31 - 16) < 0x370)
      goto LABEL_24;
    v38 = v14 - 16;
    v39 = v14 - 16 - v13;
    v40 = v39 & 0xFFFFFFFFFFFFFFF0;
    if (&v28[v24 - 16 - (v39 & 0xFFFFFFFFFFFFFFF0)] > &v28[v24 - 16])
      goto LABEL_24;
    v41 = (unint64_t)(v14 - 8);
    if (&v14[-v40 - 8] > v14 - 8 || &v28[v24 - 8 - v40] > &v28[v24 - 8] || &v38[-v40] > v38)
      goto LABEL_24;
    v42 = v39 & 0xFFFFFFFFFFFFFFF0;
    v43 = (unint64_t)&v28[v24 - v42 - 16];
    v44 = &v28[v24 - 8];
    v45 = v41 - v42;
    v46 = (unint64_t)&v28[v24 - v42 - 8];
    v47 = (unint64_t)&v38[-v42];
    v48 = v43 >= (unint64_t)v29 || v46 >= (unint64_t)v44;
    v49 = !v48;
    v50 = v43 >= v41 || v47 >= (unint64_t)v44;
    v51 = !v50;
    v52 = v45 >= (unint64_t)v29 || v46 >= (unint64_t)v14;
    v53 = !v52;
    v54 = v45 >= v41 || v47 >= (unint64_t)v14;
    v55 = !v54;
    v56 = v46 >= v41 || v47 >= (unint64_t)v29;
    v57 = !v56;
    if (v45 >= (unint64_t)v44 || v43 >= (unint64_t)v14)
    {
      v9 = v67;
      v33 = v14;
      if (!v49 && !v51 && !v53 && !v55 && !v57)
      {
        v59 = (v32 >> 4) + 1;
        v60 = 16 * (v59 & 0x1FFFFFFFFFFFFFFELL);
        v33 = &v14[-v60];
        v34 = &v29[-v60];
        v61 = (double *)(v29 - 32);
        v62 = (const double *)(v14 - 32);
        v63 = v59 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          v73 = vld2q_f64(v62);
          v62[3] = 0.0;
          v62[1] = 0.0;
          vst2q_f64(v61, v73);
          v61 -= 4;
          v62 -= 4;
          v63 -= 2;
        }
        while (v63);
        v29 = v34;
        if (v59 == (v59 & 0x1FFFFFFFFFFFFFFELL))
          goto LABEL_27;
      }
    }
    else
    {
LABEL_24:
      v33 = v14;
      v9 = v67;
    }
    v34 = v29;
    do
    {
      v35 = *((_QWORD *)v33 - 2);
      v33 -= 16;
      *((_QWORD *)v34 - 2) = v35;
      v34 -= 16;
      v36 = *((_QWORD *)v33 + 1);
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v34 + 1) = v36;
    }
    while (v33 != v13);
LABEL_27:
    *v9 = v34;
    v9[1] = v23;
    v9[2] = v72;
    do
    {
      v37 = *((_QWORD *)v14 - 1);
      *((_QWORD *)v14 - 1) = 0;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      v14 -= 16;
    }
    while (v14 != v13);
    v29 = v34;
    if (!v13)
      goto LABEL_5;
    goto LABEL_34;
  }
  v64 = operator new();
  *(_QWORD *)v64 = &off_24C0B5988;
  *(_QWORD *)(v64 + 8) = a1;
  *(_OWORD *)(v64 + 16) = *(_OWORD *)v7;
  v65 = v7[2];
  v7[1] = 0;
  v7[2] = 0;
  *(_QWORD *)(v64 + 32) = v65;
  *v7 = 0;
  v66 = operator new(0x10uLL);
  *v66 = v6;
  v66[1] = 0;
  *((_QWORD *)v66 + 1) = v64;
  v9[1] = (char *)(v66 + 4);
  v9[2] = (char *)(v66 + 4);
  *v9 = (char *)v66;
}

void webrtc::LegacyStatsCollector::~LegacyStatsCollector(webrtc::LegacyStatsCollector *this)
{
  void *v2;
  char *v3;
  uint64_t i;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  *(_QWORD *)this = &off_24C0B59C0;
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::string,webrtc::StatsReport *>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::StatsReport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::StatsReport *>>>::destroy(*((char **)this + 6));
  v3 = (char *)this + 8;
  for (i = *((_QWORD *)this + 2); (char *)i != v3; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD **)(i + 16);
    if (v5)
    {
      std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy((uint64_t)(v5 + 2), (_QWORD *)v5[3]);
      if (*v5)
        (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
      MEMORY[0x20BD0ADEC](v5, 0x1020C40FF594A20);
    }
  }
  if (*((_QWORD *)this + 3))
  {
    v7 = *((_QWORD *)this + 1);
    v6 = (char *)*((_QWORD *)this + 2);
    v8 = *(_QWORD *)v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    *((_QWORD *)this + 3) = 0;
    if (v6 != v3)
    {
      do
      {
        v9 = (char *)*((_QWORD *)v6 + 1);
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != v3);
    }
  }
}

{
  void *v2;
  char *v3;
  uint64_t i;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  *(_QWORD *)this = &off_24C0B59C0;
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::string,webrtc::StatsReport *>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::StatsReport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::StatsReport *>>>::destroy(*((char **)this + 6));
  v3 = (char *)this + 8;
  for (i = *((_QWORD *)this + 2); (char *)i != v3; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD **)(i + 16);
    if (v5)
    {
      std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy((uint64_t)(v5 + 2), (_QWORD *)v5[3]);
      if (*v5)
        (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
      MEMORY[0x20BD0ADEC](v5, 0x1020C40FF594A20);
    }
  }
  if (*((_QWORD *)this + 3))
  {
    v7 = *((_QWORD *)this + 1);
    v6 = (char *)*((_QWORD *)this + 2);
    v8 = *(_QWORD *)v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    *((_QWORD *)this + 3) = 0;
    if (v6 != v3)
    {
      do
      {
        v9 = (char *)*((_QWORD *)v6 + 1);
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != v3);
    }
  }
  JUMPOUT(0x20BD0ADECLL);
}

double webrtc::LegacyStatsCollector::GetTimeNow(webrtc::LegacyStatsCollector *this)
{
  uint64_t v1;
  timeval v3;

  if (rtc::g_clock)
  {
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock) / 1000;
  }
  else
  {
    gettimeofday(&v3, 0);
    v1 = v3.tv_usec + 1000000 * v3.tv_sec;
  }
  return (double)(v1 / 1000);
}

void webrtc::LegacyStatsCollector::AddStream(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *__p;
  uint64_t *v21;

  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(&__p, a2);
  v4 = (uint64_t *)(a1 + 8);
  v5 = a1 + 40;
  v6 = (uint64_t *)__p;
  v7 = v21;
  if (__p != v21)
  {
    do
    {
      v8 = *v6++;
    }
    while (v6 != v7);
    v6 = (uint64_t *)__p;
  }
  if (v6)
  {
    v9 = v21;
    v10 = v6;
    if (v21 != v6)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      while (v9 != v6);
      v10 = __p;
    }
    v21 = v6;
    operator delete(v10);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&__p, a2);
  v13 = (uint64_t *)__p;
  v14 = v21;
  if (__p != v21)
  {
    do
    {
      v15 = *v13++;
    }
    while (v13 != v14);
    v13 = (uint64_t *)__p;
  }
  if (v13)
  {
    v16 = v21;
    v17 = v13;
    if (v21 != v13)
    {
      do
      {
        v19 = *--v16;
        v18 = v19;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      while (v16 != v13);
      v17 = __p;
    }
    v21 = v13;
    operator delete(v17);
  }
}

void webrtc::LegacyStatsCollector::AddTrack(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *p_p;
  uint64_t v5;
  int v6;
  int v7;
  _BOOL4 v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  _BOOL4 v15;
  void *__p;
  uint64_t v17;
  unsigned __int8 v18;

  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(&__p, a2);
  if ((char)v18 < 0)
  {
    v5 = v17;
    if (v17 < 0)
      goto LABEL_38;
    p_p = (unsigned __int8 *)__p;
    if (v17)
    {
      if (!__p)
        goto LABEL_38;
    }
  }
  else
  {
    p_p = (unsigned __int8 *)&__p;
    v5 = v18;
  }
  if (v5 != 5)
  {
    v9 = 0;
    if ((v18 & 0x80) != 0)
      goto LABEL_19;
LABEL_16:
    if (!v9)
      goto LABEL_20;
LABEL_17:
    return;
  }
  v6 = *(_DWORD *)p_p;
  v7 = p_p[4];
  v9 = v6 == *(_DWORD *)"audio" && v7 == cricket::kMediaTypeAudio[4];
  if ((v18 & 0x80) == 0)
    goto LABEL_16;
LABEL_19:
  operator delete(__p);
  if (v9)
    goto LABEL_17;
LABEL_20:
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(&__p, a2);
  if (((char)v18 & 0x80000000) == 0)
  {
    v10 = (unsigned __int8 *)&__p;
    v11 = v18;
    goto LABEL_25;
  }
  v11 = v17;
  if (v17 < 0 || (v10 = (unsigned __int8 *)__p, v17) && !__p)
  {
LABEL_38:
    __break(1u);
    return;
  }
LABEL_25:
  if (v11 == 5)
  {
    v12 = *(_DWORD *)v10;
    v13 = v10[4];
    v15 = v12 == *(_DWORD *)"video" && v13 == cricket::kMediaTypeVideo[4];
    if ((v18 & 0x80) == 0)
      goto LABEL_36;
  }
  else
  {
    v15 = 0;
    if ((v18 & 0x80) == 0)
      goto LABEL_36;
  }
  operator delete(__p);
LABEL_36:
  if (v15)
}

void webrtc::`anonymous namespace'::CreateTrackReport<webrtc::AudioTrackInterface>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  std::string *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  void *__p[2];
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 40))(__p);
  v5 = operator new();
  *(_DWORD *)(v5 + 8) = 7;
  *(_QWORD *)v5 = &unk_24C0B5B70;
  v6 = (std::string *)(v5 + 16);
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(v5 + 32) = v11;
  }
  *(_QWORD *)v5 = off_24C0B5B28;
  *(_DWORD *)(v5 + 40) = 0;
  v7 = (unsigned int *)(v5 + 40);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v12 = v5;
  v9 = webrtc::StatsCollection::ReplaceOrAddNew(a2, &v12);
  webrtc::StatsReport::AddString((uint64_t)v9, 135, (uint64_t)__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)std::map<std::string,std::unique_ptr<cricket::JsepTransport>>::operator[](a3, (uint64_t)__p) = v9;
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

uint64_t webrtc::LegacyStatsCollector::AddLocalAudioTrack(webrtc::LegacyStatsCollector *this, webrtc::AudioTrackInterface *a2, unsigned int a3)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  std::string *v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void *__p[2];
  uint64_t v33;

  v5 = a3;
  v7 = (char *)*((_QWORD *)this + 13);
  v6 = *((_QWORD *)this + 14);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (char *)*((_QWORD *)this + 12);
    v10 = (v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      goto LABEL_33;
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14)
    {
      if (v14 >> 60)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v15 = 16 * v14;
      v16 = (char *)operator new(16 * v14);
      v17 = &v16[v15];
      v18 = &v16[16 * v10];
      *(_QWORD *)v18 = a2;
      *((_QWORD *)v18 + 1) = v5;
      v8 = v18 + 16;
      if (v7 != v9)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v7 - 1);
          v18 -= 16;
          v7 -= 16;
        }
        while (v7 != v9);
        v7 = v9;
      }
      *((_QWORD *)this + 12) = v18;
      *((_QWORD *)this + 13) = v8;
      *((_QWORD *)this + 14) = v17;
      if (v7)
        operator delete(v7);
      goto LABEL_16;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    abort();
  }
  if (!v7)
    goto LABEL_32;
  *(_QWORD *)v7 = a2;
  *((_QWORD *)v7 + 1) = a3;
  v8 = v7 + 16;
LABEL_16:
  *((_QWORD *)this + 13) = v8;
  (*(void (**)(void **__return_ptr, webrtc::AudioTrackInterface *))(*(_QWORD *)a2 + 40))(__p, a2);
  v19 = operator new();
  *(_DWORD *)(v19 + 8) = 7;
  *(_QWORD *)v19 = &unk_24C0B5B70;
  v20 = (std::string *)(v19 + 16);
  if (SHIBYTE(v33) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v23 = SHIBYTE(v33);
    *(_QWORD *)v19 = off_24C0B5B28;
    *(_DWORD *)(v19 + 40) = 0;
    v24 = (unsigned int *)(v19 + 40);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    if (v23 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(v19 + 32) = v33;
    *(_QWORD *)v19 = off_24C0B5B28;
    *(_DWORD *)(v19 + 40) = 0;
    v21 = (unsigned int *)(v19 + 40);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v26 = (char *)this + 8;
  v27 = *((_QWORD *)this + 2);
  if ((webrtc::LegacyStatsCollector *)v27 == (webrtc::LegacyStatsCollector *)((char *)this + 8))
    goto LABEL_27;
  while (((*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v27 + 16) + 40))(**(_QWORD **)(v27 + 16), v19) & 1) == 0)
  {
    v27 = *(_QWORD *)(v27 + 8);
    if ((char *)v27 == v26)
      goto LABEL_27;
  }
  if ((char *)v27 == v26 || !*(_QWORD *)(v27 + 16))
  {
LABEL_27:
    v28 = (_QWORD *)operator new();
    *v28 = v19;
    (**(void (***)(uint64_t))v19)(v19);
    v28[4] = 0;
    v28[3] = 0;
    v28[1] = 0;
    v28[2] = v28 + 3;
    v29 = operator new(0x18uLL);
    v29[1] = v26;
    v29[2] = v28;
    v30 = *((_QWORD *)this + 1);
    *v29 = v30;
    *(_QWORD *)(v30 + 8) = v29;
    *((_QWORD *)this + 1) = v29;
    ++*((_QWORD *)this + 3);
    (*(void (**)(void **__return_ptr, webrtc::AudioTrackInterface *))(*(_QWORD *)a2 + 40))(__p, a2);
    webrtc::StatsReport::AddString((uint64_t)v28, 135, (uint64_t)__p);
    if (SHIBYTE(v33) < 0)
      operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
}

uint64_t webrtc::LegacyStatsCollector::RemoveLocalAudioTrack(uint64_t result, uint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  int v8;

  v3 = *(_QWORD *)(result + 96);
  v4 = *(_QWORD *)(result + 104);
  if (v3 != v4)
  {
    while (*(_QWORD *)v3 != a2 || *(_DWORD *)(v3 + 8) != a3)
    {
      v3 += 16;
      if (v3 == v4)
        return result;
    }
  }
  v6 = v3 + 16;
  if (v3 != v4 && v6 != v4)
  {
    do
    {
      v8 = *(_DWORD *)(v6 + 8);
      if (*(_QWORD *)v6 != a2 || v8 != a3)
      {
        *(_QWORD *)v3 = *(_QWORD *)v6;
        *(_DWORD *)(v3 + 8) = v8;
        v3 += 16;
      }
      v6 += 16;
    }
    while (v6 != v4);
  }
  if (v4 < v3)
  {
    __break(1u);
  }
  else if (v3 != v4)
  {
    *(_QWORD *)(result + 104) = v3;
  }
  return result;
}

void webrtc::LegacyStatsCollector::GetStats(rtc::Thread *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  std::string *v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  char *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  char *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *i;
  _QWORD *v75;
  int *v76;
  uint64_t v77;
  int *v78;
  int v79;
  BOOL v80;
  uint64_t *v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  int v87;
  void **v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  char v94;
  _BOOL4 v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  int **v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  int *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  __int128 *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  _QWORD *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  _QWORD *v138;
  unint64_t v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v146;
  uint64_t v147;
  _OWORD *v148;
  __int128 *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  char v153;
  _BYTE *v154;
  uint64_t v155;
  void *__p[2];
  uint64_t v157;

  v6 = rtc::Thread::Current(a1);
  v7 = v6[217];
  v6[217] = 0;
  v8 = (_QWORD *)((char *)a1 + 8);
  v154 = v6;
  v155 = a2;
  v153 = v7;
  if (!a2)
  {
    v11 = *((_QWORD *)a1 + 3);
    v12 = *(char **)a3;
    if (v11 <= (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)a3) >> 3)
    {
LABEL_151:
      v125 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (v125 == v8)
        goto LABEL_182;
      v126 = *(char **)(a3 + 8);
      while (1)
      {
        v128 = v125[2];
        v129 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v126 < v129)
        {
          if (!v126)
            goto LABEL_183;
          *(_QWORD *)v126 = v128;
          v127 = v126 + 8;
          goto LABEL_155;
        }
        v130 = *(char **)a3;
        v131 = (uint64_t)&v126[-*(_QWORD *)a3];
        v132 = v131 >> 3;
        v133 = (v131 >> 3) + 1;
        if (v133 >> 61)
          goto LABEL_184;
        v134 = v129 - (_QWORD)v130;
        if (v134 >> 2 > v133)
          v133 = v134 >> 2;
        v31 = (unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8;
        v135 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v31)
          v135 = v133;
        if (!v135)
          goto LABEL_183;
        if (v135 >> 61)
          goto LABEL_185;
        v136 = 8 * v135;
        v137 = operator new(8 * v135);
        v138 = &v137[8 * v132];
        *v138 = v128;
        v127 = (char *)(v138 + 1);
        if (v126 != v130)
          break;
LABEL_180:
        *(_QWORD *)a3 = v138;
        *(_QWORD *)(a3 + 8) = v127;
        *(_QWORD *)(a3 + 16) = &v137[v136];
        if (v126)
          operator delete(v126);
LABEL_155:
        *(_QWORD *)(a3 + 8) = v127;
        v125 = (_QWORD *)v125[1];
        v126 = v127;
        if (v125 == v8)
          goto LABEL_182;
      }
      v139 = v126 - v130 - 8;
      if (v139 >= 0x168)
      {
        v141 = (v126 - 8 - v130) & 0xFFFFFFFFFFFFFFF8;
        v142 = (unint64_t)&v137[v131 - 8];
        v143 = v142 - v141;
        v144 = (unint64_t)&v126[-v141 - 8];
        if (v143 > v142 || v144 > (unint64_t)(v126 - 8))
        {
          v140 = v126;
        }
        else if ((unint64_t)(v126 - &v137[v131]) >= 0x20)
        {
          v146 = (v139 >> 3) + 1;
          v147 = 8 * (v146 & 0x3FFFFFFFFFFFFFFCLL);
          v140 = &v126[-v147];
          v138 = (_QWORD *)((char *)v138 - v147);
          v148 = &v137[8 * v132 - 16];
          v149 = (__int128 *)(v126 - 16);
          v150 = v146 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v151 = *v149;
            *(v148 - 1) = *(v149 - 1);
            *v148 = v151;
            v148 -= 2;
            v149 -= 2;
            v150 -= 4;
          }
          while (v150);
          if (v146 == (v146 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_179;
        }
        else
        {
          v140 = v126;
        }
      }
      else
      {
        v140 = v126;
      }
      do
      {
        v152 = *((_QWORD *)v140 - 1);
        v140 -= 8;
        *--v138 = v152;
      }
      while (v140 != v130);
LABEL_179:
      v126 = v130;
      goto LABEL_180;
    }
    if (v11 >> 61)
      goto LABEL_184;
    v13 = *(_BYTE **)(a3 + 8);
    v14 = 8 * v11;
    v15 = (char *)operator new(8 * v11);
    v16 = v13 - v12;
    v17 = &v15[(v13 - v12) & 0xFFFFFFFFFFFFFFF8];
    v18 = v17;
    if (v13 != v12)
    {
      if ((unint64_t)(v16 - 8) < 0x58)
      {
        v18 = &v15[(v13 - v12) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_148:
          v124 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v18 - 1) = v124;
          v18 -= 8;
        }
        while (v13 != v12);
        goto LABEL_149;
      }
      v18 = &v15[(v13 - v12) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v13 - &v15[v16 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_148;
      v116 = v16 >> 3;
      v117 = ((unint64_t)(v16 - 8) >> 3) + 1;
      v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
      v119 = &v13[-v118];
      v18 = &v17[-v118];
      v120 = &v15[8 * v116 - 16];
      v121 = (__int128 *)(v13 - 16);
      v122 = v117 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v123 = *v121;
        *((_OWORD *)v120 - 1) = *(v121 - 1);
        *(_OWORD *)v120 = v123;
        v120 -= 32;
        v121 -= 2;
        v122 -= 4;
      }
      while (v122);
      v13 = v119;
      if (v117 != (v117 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_148;
    }
LABEL_149:
    *(_QWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v17;
    *(_QWORD *)(a3 + 16) = &v15[v14];
    if (v12)
      operator delete(v12);
    goto LABEL_151;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(*((_QWORD *)a1 + 8) + 8) + 16))(__p, *((_QWORD *)a1 + 8) + 8);
  v9 = operator new();
  *(_DWORD *)(v9 + 8) = 0;
  *(_QWORD *)v9 = &unk_24C0B5B70;
  v10 = (std::string *)(v9 + 16);
  if (SHIBYTE(v157) < 0)
  {
    std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(v9 + 32) = v157;
  }
  *(_QWORD *)v9 = off_24C0B5B28;
  *(_DWORD *)(v9 + 40) = 0;
  v19 = (unsigned int *)(v9 + 40);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  v21 = *((_QWORD *)a1 + 2);
  if ((_QWORD *)v21 == v8)
    goto LABEL_19;
  while (((*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v21 + 16) + 40))(**(_QWORD **)(v21 + 16), v9) & 1) == 0)
  {
    v21 = *(_QWORD *)(v21 + 8);
    if ((_QWORD *)v21 == v8)
      goto LABEL_19;
  }
  if ((_QWORD *)v21 == v8)
  {
LABEL_19:
    v22 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (SHIBYTE(v157) < 0)
      goto LABEL_22;
LABEL_20:
    if (!v22)
      goto LABEL_46;
LABEL_23:
    v24 = *(char **)(a3 + 8);
    v23 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v24 < v23)
    {
      if (!v24)
        goto LABEL_183;
      *(_QWORD *)v24 = v22;
      v25 = v24 + 8;
      goto LABEL_45;
    }
    v26 = *(char **)a3;
    v27 = (uint64_t)&v24[-*(_QWORD *)a3];
    v28 = v27 >> 3;
    v29 = (v27 >> 3) + 1;
    if (v29 >> 61)
      goto LABEL_184;
    v30 = v23 - (_QWORD)v26;
    if (v30 >> 2 > v29)
      v29 = v30 >> 2;
    v31 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8;
    v32 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v31)
      v32 = v29;
    if (!v32)
      goto LABEL_183;
    if (v32 >> 61)
LABEL_185:
      std::__throw_bad_array_new_length[abi:sn180100]();
    v33 = 8 * v32;
    v34 = operator new(8 * v32);
    v35 = &v34[v33];
    v36 = &v34[8 * v28];
    *v36 = v22;
    v25 = v36 + 1;
    if (v24 == v26)
    {
      *(_QWORD *)a3 = v36;
      *(_QWORD *)(a3 + 8) = v25;
      *(_QWORD *)(a3 + 16) = v35;
      if (!v24)
        goto LABEL_45;
    }
    else
    {
      v37 = v24 - v26 - 8;
      if (v37 < 0x58)
        goto LABEL_188;
      if ((unint64_t)(v24 - &v34[v27]) < 0x20)
        goto LABEL_188;
      v38 = (v37 >> 3) + 1;
      v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      v40 = &v24[-v39];
      v36 = (_QWORD *)((char *)v36 - v39);
      v41 = &v34[8 * v28 - 16];
      v42 = v24 - 16;
      v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *(_OWORD *)v42;
        *(v41 - 1) = *((_OWORD *)v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 32;
        v43 -= 4;
      }
      while (v43);
      v24 = v40;
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_188:
        do
        {
          v45 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *--v36 = v45;
        }
        while (v24 != v26);
      }
      v24 = v26;
      *(_QWORD *)a3 = v36;
      *(_QWORD *)(a3 + 8) = v25;
      *(_QWORD *)(a3 + 16) = v35;
      if (!v26)
        goto LABEL_45;
    }
    operator delete(v24);
LABEL_45:
    *(_QWORD *)(a3 + 8) = v25;
    goto LABEL_46;
  }
  v22 = *(_QWORD *)(v21 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if ((SHIBYTE(v157) & 0x80000000) == 0)
    goto LABEL_20;
LABEL_22:
  operator delete(__p[0]);
  if (v22)
    goto LABEL_23;
LABEL_46:
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v155 + 40))(__p);
  v46 = operator new();
  *(_DWORD *)(v46 + 8) = 7;
  *(_QWORD *)v46 = &unk_24C0B5B70;
  v47 = (std::string *)(v46 + 16);
  if (SHIBYTE(v157) < 0)
  {
    std::string::__init_copy_ctor_external(v47, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v47->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(v46 + 32) = v157;
  }
  *(_QWORD *)v46 = off_24C0B5B28;
  *(_DWORD *)(v46 + 40) = 0;
  v48 = (unsigned int *)(v46 + 40);
  do
    v49 = __ldxr(v48);
  while (__stxr(v49 + 1, v48));
  v50 = *((_QWORD *)a1 + 2);
  if ((_QWORD *)v50 == v8)
    goto LABEL_58;
  while (((*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v50 + 16) + 40))(**(_QWORD **)(v50 + 16), v46) & 1) == 0)
  {
    v50 = *(_QWORD *)(v50 + 8);
    if ((_QWORD *)v50 == v8)
      goto LABEL_58;
  }
  if ((_QWORD *)v50 == v8)
  {
LABEL_58:
    v51 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    if (SHIBYTE(v157) < 0)
      goto LABEL_61;
LABEL_59:
    if (!v51)
      goto LABEL_182;
    goto LABEL_62;
  }
  v51 = *(_QWORD *)(v50 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  if ((SHIBYTE(v157) & 0x80000000) == 0)
    goto LABEL_59;
LABEL_61:
  operator delete(__p[0]);
  if (!v51)
    goto LABEL_182;
LABEL_62:
  v53 = *(char **)(a3 + 8);
  v52 = *(_QWORD *)(a3 + 16);
  if ((unint64_t)v53 < v52)
  {
    if (v53)
    {
      *(_QWORD *)v53 = v51;
      v54 = v53 + 8;
      goto LABEL_82;
    }
    goto LABEL_183;
  }
  v55 = *(char **)a3;
  v56 = (uint64_t)&v53[-*(_QWORD *)a3];
  v57 = v56 >> 3;
  v58 = (v56 >> 3) + 1;
  if (v58 >> 61)
    goto LABEL_184;
  v59 = v52 - (_QWORD)v55;
  if (v59 >> 2 > v58)
    v58 = v59 >> 2;
  v31 = (unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8;
  v60 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v31)
    v60 = v58;
  if (!v60)
  {
LABEL_183:
    __break(1u);
LABEL_184:
    abort();
  }
  if (v60 >> 61)
    goto LABEL_185;
  v61 = 8 * v60;
  v62 = operator new(8 * v60);
  v63 = &v62[v61];
  v64 = &v62[8 * v57];
  *v64 = v51;
  v54 = v64 + 1;
  if (v53 != v55)
  {
    v65 = v53 - v55 - 8;
    if (v65 < 0x58)
      goto LABEL_189;
    if ((unint64_t)(v53 - &v62[v56]) < 0x20)
      goto LABEL_189;
    v66 = (v65 >> 3) + 1;
    v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
    v68 = &v53[-v67];
    v64 = (_QWORD *)((char *)v64 - v67);
    v69 = &v62[8 * v57 - 16];
    v70 = v53 - 16;
    v71 = v66 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v72 = *(_OWORD *)v70;
      *(v69 - 1) = *((_OWORD *)v70 - 1);
      *v69 = v72;
      v69 -= 2;
      v70 -= 32;
      v71 -= 4;
    }
    while (v71);
    v53 = v68;
    if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_189:
      do
      {
        v73 = *((_QWORD *)v53 - 1);
        v53 -= 8;
        *--v64 = v73;
      }
      while (v53 != v55);
    }
    v53 = v55;
  }
  *(_QWORD *)a3 = v64;
  *(_QWORD *)(a3 + 8) = v54;
  *(_QWORD *)(a3 + 16) = v63;
  if (v53)
    operator delete(v53);
LABEL_82:
  *(_QWORD *)(a3 + 8) = v54;
  for (i = (_QWORD *)*((_QWORD *)a1 + 2); i != v8; i = (_QWORD *)i[1])
  {
    v76 = (int *)i[2];
    if (*(_DWORD *)(*(_QWORD *)v76 + 8) != 5)
      continue;
    v77 = *((_QWORD *)v76 + 3);
    if (!v77)
      continue;
    v78 = v76 + 6;
    do
    {
      v79 = *(_DWORD *)(v77 + 32);
      v80 = v79 < 135;
      if (v79 >= 135)
        v81 = (uint64_t *)v77;
      else
        v81 = (uint64_t *)(v77 + 8);
      if (!v80)
        v78 = (int *)v77;
      v77 = *v81;
    }
    while (*v81);
    if (v78 == v76 + 6)
      continue;
    if (v78[8] > 135)
      continue;
    v82 = *((_QWORD *)v78 + 5);
    if (!v82)
      continue;
    v83 = *(unsigned __int8 **)(v82 + 16);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v155 + 40))(__p);
    v84 = v83[23];
    if ((v84 & 0x80u) == 0)
      v85 = (void *)v83[23];
    else
      v85 = (void *)*((_QWORD *)v83 + 1);
    v86 = (void *)HIBYTE(v157);
    v87 = SHIBYTE(v157);
    if (v157 < 0)
      v86 = __p[1];
    if (v85 == v86)
    {
      if (v157 >= 0)
        v88 = __p;
      else
        v88 = (void **)__p[0];
      if ((v84 & 0x80) != 0)
      {
        v95 = memcmp(*(const void **)v83, v88, *((_QWORD *)v83 + 1)) == 0;
        if ((v87 & 0x80000000) == 0)
          goto LABEL_118;
      }
      else if (v83[23])
      {
        v89 = v84 - 1;
        do
        {
          v91 = *v83++;
          v90 = v91;
          v93 = *(unsigned __int8 *)v88;
          v88 = (void **)((char *)v88 + 1);
          v92 = v93;
          v31 = v89-- != 0;
          v94 = v31;
          v95 = v90 == v92;
        }
        while (v90 == v92 && (v94 & 1) != 0);
        if ((SHIBYTE(v157) & 0x80000000) == 0)
        {
LABEL_118:
          if (!v95)
            continue;
          goto LABEL_122;
        }
      }
      else
      {
        v95 = 1;
        if ((SHIBYTE(v157) & 0x80000000) == 0)
          goto LABEL_118;
      }
    }
    else
    {
      v95 = 0;
      if ((SHIBYTE(v157) & 0x80000000) == 0)
        goto LABEL_118;
    }
    operator delete(__p[0]);
    if (!v95)
      continue;
LABEL_122:
    v97 = *(char **)(a3 + 8);
    v96 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v97 < v96)
    {
      if (!v97)
        goto LABEL_183;
      *(_QWORD *)v97 = v76;
      v75 = v97 + 8;
    }
    else
    {
      v98 = *(char **)a3;
      v99 = (uint64_t)&v97[-*(_QWORD *)a3];
      v100 = v99 >> 3;
      v101 = (v99 >> 3) + 1;
      if (v101 >> 61)
        goto LABEL_184;
      v102 = v96 - (_QWORD)v98;
      if (v102 >> 2 > v101)
        v101 = v102 >> 2;
      v31 = (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8;
      v103 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v31)
        v103 = v101;
      if (!v103)
        goto LABEL_183;
      if (v103 >> 61)
        goto LABEL_185;
      v104 = 8 * v103;
      v105 = operator new(8 * v103);
      v106 = (int **)&v105[8 * v100];
      *v106 = v76;
      v75 = v106 + 1;
      if (v97 != v98)
      {
        v107 = v97 - v98 - 8;
        if (v107 < 0x58)
          goto LABEL_190;
        if ((unint64_t)(&v97[-v99] - v105) < 0x20)
          goto LABEL_190;
        v108 = (v107 >> 3) + 1;
        v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
        v110 = &v97[-v109];
        v106 = (int **)((char *)v106 - v109);
        v111 = &v105[8 * v100 - 16];
        v112 = v97 - 16;
        v113 = v108 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v114 = *(_OWORD *)v112;
          *(v111 - 1) = *((_OWORD *)v112 - 1);
          *v111 = v114;
          v111 -= 2;
          v112 -= 32;
          v113 -= 4;
        }
        while (v113);
        v97 = v110;
        if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_190:
          do
          {
            v115 = (int *)*((_QWORD *)v97 - 1);
            v97 -= 8;
            *--v106 = v115;
          }
          while (v97 != v98);
        }
        v97 = v98;
      }
      *(_QWORD *)a3 = v106;
      *(_QWORD *)(a3 + 8) = v75;
      *(_QWORD *)(a3 + 16) = &v105[v104];
      if (v97)
        operator delete(v97);
    }
    *(_QWORD *)(a3 + 8) = v75;
  }
LABEL_182:
  v154[217] = v153;
}

void webrtc::LegacyStatsCollector::UpdateStats(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  rtc::Thread *v5;
  double *v6;
  uint64_t v7;
  double *v8;
  double *v9;
  BOOL v10;
  uint64_t *v11[3];

  if (rtc::g_clock)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v2 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  v3 = v2 / 1000000;
  v4 = *((_QWORD *)a1 + 9);
  if (!v4 || v4 + 50 <= v3)
  {
    *((_QWORD *)a1 + 9) = v3;
    a1[10] = (*(double (**)(double *))(*(_QWORD *)a1 + 40))(a1);
    webrtc::LegacyStatsCollector::ExtractSessionAndDataInfo((webrtc::LegacyStatsCollector *)a1, v11);
    webrtc::LegacyStatsCollector::ExtractBweInfo((webrtc::LegacyStatsCollector *)a1);
    webrtc::LegacyStatsCollector::ExtractMediaInfo((unint64_t)a1, (uint64_t)v11);
    webrtc::LegacyStatsCollector::ExtractSenderInfo((webrtc::LegacyStatsCollector *)a1);
    rtc::Thread::Current(v5);
    v6 = (double *)*((_QWORD *)a1 + 5);
    if (v6 != a1 + 6)
    {
      v7 = *((_QWORD *)a1 + 10);
      do
      {
        *(_QWORD *)(*((_QWORD *)v6 + 7) + 8) = v7;
        v8 = (double *)*((_QWORD *)v6 + 1);
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = *(double **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (double *)*((_QWORD *)v6 + 2);
            v10 = *(_QWORD *)v9 == (_QWORD)v6;
            v6 = v9;
          }
          while (!v10);
        }
        v6 = v9;
      }
      while (v9 != a1 + 6);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v11, (uint64_t)v11[1]);
  }
}

void webrtc::LegacyStatsCollector::ExtractSessionAndDataInfo(webrtc::LegacyStatsCollector *this@<X0>, uint64_t **a2@<X8>)
{
  webrtc::LegacyStatsCollector *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _BYTE *v14;
  uint64_t v15;
  std::string *v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  int v23;
  char *i;
  char *v25;
  char *v26;
  _BOOL4 v28;
  _BOOL4 v30;
  _BOOL4 v32;
  _BOOL4 v34;
  _BOOL4 v36;
  _BOOL4 v38;
  _BOOL4 v40;
  _BOOL4 v42;
  rtc::SSLCertificateStats *v43;
  _QWORD *v44;
  void (***v45)(_QWORD);
  rtc::SSLCertificateStats *v46;
  _QWORD *v47;
  void (***v48)(_QWORD);
  uint64_t v49;
  int v50;
  uint64_t v51;
  std::string *v52;
  __int128 v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  char *v64;
  const char *v65;
  _QWORD *v66;
  uint64_t v67;
  void (***v68)(_QWORD);
  _QWORD *v69;
  _QWORD *v70;
  void (***v71)(_QWORD);
  char *v72;
  const char *v73;
  int v74;
  int v75;
  void *v76;
  std::string *v77;
  size_t v78;
  std::string::size_type v79;
  std::string *v80;
  std::string *v81;
  uint64_t v82;
  uint64_t v83;
  std::string::size_type size;
  void *v85;
  std::string::value_type **v86;
  size_t v87;
  std::string::value_type *v88;
  std::string::value_type *v89;
  std::string::value_type *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t j;
  _BYTE *v96;
  int v97;
  int v98;
  uint64_t v99;
  std::string *v100;
  __int128 v101;
  int v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  void (***v108)(_QWORD);
  _QWORD *v109;
  _QWORD *v110;
  void (***v111)(_QWORD);
  _QWORD *v112;
  uint64_t v113;
  int *v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  int v117;
  int *v118;
  int v119;
  BOOL v120;
  uint64_t *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  int *v127;
  _QWORD *v128;
  int v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t *v132;
  int *v133;
  BOOL v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  _BYTE *v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  int *v150;
  int v151;
  BOOL v152;
  uint64_t *v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  int *v161;
  int *v162;
  _QWORD *v163;
  int v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t *v167;
  int *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  _BYTE *v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  int v181;
  int v182;
  int *v183;
  int *v184;
  int v185;
  BOOL v186;
  int **v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  int *v195;
  int *v196;
  _QWORD *v197;
  int v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t *v201;
  int *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  _BYTE *v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  std::string::size_type v231;
  std::string *p_src;
  size_t v233;
  size_t v234;
  size_t v235;
  char *v236;
  size_t v237;
  std::string::size_type v238;
  std::string *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  _BYTE *v243;
  unsigned int v244;
  size_t v245;
  const char *v246;
  const char *v247;
  std::string::size_type v248;
  std::string *v249;
  size_t v250;
  size_t v251;
  size_t v252;
  char *v253;
  size_t v254;
  std::string::size_type v255;
  std::string *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  _BYTE *v260;
  unsigned int v261;
  size_t v262;
  const char *v263;
  const char *v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t *v271;
  char *v272;
  char *v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  char *v281;
  char *v282;
  void *v283;
  void **v284;
  void **v285;
  void *v286;
  _BOOL4 v287;
  _BOOL4 v288;
  char v289;
  _BYTE *v290;
  _BOOL4 v292;
  _BOOL4 v293;
  char *v294;
  uint64_t v295;
  unsigned int *v296;
  _BOOL4 v297;
  _BOOL4 v298;
  _BOOL4 v299;
  _BOOL4 v300;
  char *v301;
  webrtc::LegacyStatsCollector *v302;
  char *v303;
  _BYTE *v304;
  uint64_t v305;
  _QWORD *v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  _BYTE *v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  void *v314;
  char *v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  void *v319[2];
  void *v320[2];
  __int128 v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t *v324;
  void (***v325)(_QWORD);
  void (***v326)(_QWORD);
  uint64_t v327;
  std::string v328;
  std::string v329;
  char v330;
  char v331;
  std::string v332;
  std::string v333;
  char v334;
  char v335;
  std::string __src;
  char *v337;
  uint64_t v338;
  size_t v339;
  std::string::value_type *__s[3];
  char v341;
  void *__p;
  char v343;
  char v344;
  void **v345;
  webrtc::LegacyStatsCollector *v346;
  void **v347;
  uint64_t *v348;
  uint64_t v349;

  v2 = this;
  v349 = *MEMORY[0x24BDAC8D0];
  v323 = 0;
  v324 = 0;
  *(_OWORD *)v319 = 0u;
  *(_OWORD *)v320 = 0u;
  v321 = 0u;
  v322 = &v323;
  v316 = (uint64_t)&v316;
  v317 = &v316;
  v318 = 0;
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 8) + 544))(&v314);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 8) + 520))(*((_QWORD *)v2 + 8));
  (*(void (**)(std::string::value_type **__return_ptr))(**((_QWORD **)v2 + 8) + 560))(__s);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(*((_QWORD *)v2 + 8) + 8) + 32))(&__p, *((_QWORD *)v2 + 8) + 8);
  v345 = v319;
  v346 = v2;
  v347 = &v314;
  v348 = &v316;
  (*(void (**)(uint64_t, std::string::value_type **, void (*)(__int128 *), std::string *))(*(_QWORD *)v3 + 96))(v3, __s, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::LegacyStatsCollector::ExtractSessionAndDataInfo(void)::$_1>, &v333);
  if (v344 && v343 < 0)
    operator delete(__p);
  if (v341 && SHIBYTE(__s[2]) < 0)
    operator delete(__s[0]);
  v4 = (char *)v2 + 8;
  v311 = (uint64_t)&v311;
  v312 = &v311;
  v313 = 0;
  v5 = v318;
  if (v318)
  {
    v7 = v316;
    v6 = v317;
    v8 = *v317;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v316 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    v9 = v311;
    *(_QWORD *)(v311 + 8) = v6;
    *v6 = v9;
    *(_QWORD *)(v7 + 8) = &v311;
    v311 = v7;
    v313 = v5;
    v318 = 0;
  }
  v10 = (uint64_t *)webrtc::StatsCollection::MergeCollection((uint64_t)v2 + 8, (uint64_t)&v311);
  if (v313)
  {
    v11 = v311;
    v10 = v312;
    v12 = *v312;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v311 + 8);
    **(_QWORD **)(v11 + 8) = v12;
    v313 = 0;
    if (v10 != &v311)
    {
      do
      {
        v13 = (uint64_t *)v10[1];
        operator delete(v10);
        v10 = v13;
      }
      while (v13 != &v311);
    }
  }
  v14 = rtc::Thread::Current((rtc::Thread *)v10);
  v289 = v14[217];
  v290 = v14;
  v14[217] = 0;
  (*(void (**)(std::string::value_type **__return_ptr, uint64_t))(*(_QWORD *)(*((_QWORD *)v2 + 8) + 8) + 16))(__s, *((_QWORD *)v2 + 8) + 8);
  v15 = operator new();
  *(_DWORD *)(v15 + 8) = 0;
  *(_QWORD *)v15 = &unk_24C0B5B70;
  v16 = (std::string *)(v15 + 16);
  if (SHIBYTE(__s[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, __s[0], (std::string::size_type)__s[1]);
    v19 = SHIBYTE(__s[2]);
    *(_QWORD *)v15 = off_24C0B5B28;
    *(_DWORD *)(v15 + 40) = 0;
    v20 = (unsigned int *)(v15 + 40);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v327 = v15;
    if (v19 < 0)
      operator delete(__s[0]);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)__s;
    *(std::string::value_type **)(v15 + 32) = __s[2];
    *(_QWORD *)v15 = off_24C0B5B28;
    *(_DWORD *)(v15 + 40) = 0;
    v17 = (unsigned int *)(v15 + 40);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v327 = v15;
  }
  v22 = webrtc::StatsCollection::ReplaceOrAddNew((uint64_t *)v2 + 1, &v327);
  v22[1] = *((_QWORD *)v2 + 10);
  v23 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 8) + 536))(*((_QWORD *)v2 + 8));
  webrtc::StatsReport::AddBoolean(v22, 93, v23);
  v25 = (char *)v319[0];
  for (i = (char *)v319[1]; v25 != i; v25 += 464)
    webrtc::LegacyStatsCollector::AddCandidateReport(v2, (uint64_t)v25, 1);
  v26 = (char *)v320[1];
  v294 = (char *)v321;
  if (v320[1] == (void *)v321)
    goto LABEL_487;
  v28 = __s <= (std::string::value_type **)"AEAD_AES_256_GCM"
     && &__s[2] > (std::string::value_type **)"AEAD_AES_256_GCM";
  v293 = v28;
  v30 = __s <= (std::string::value_type **)"AEAD_AES_128_GCM"
     && &__s[2] > (std::string::value_type **)"AEAD_AES_128_GCM";
  v292 = v30;
  v32 = __s <= (std::string::value_type **)"AEAD_AES_256_GCM"
     && &__s[2] > (std::string::value_type **)"AEAD_AES_256_GCM";
  v34 = __s <= (std::string::value_type **)"AEAD_AES_128_GCM"
     && &__s[2] > (std::string::value_type **)"AEAD_AES_128_GCM";
  v287 = v34;
  v288 = v32;
  v36 = __s <= (std::string::value_type **)"stun" && (char *)__s + 4 > "stun";
  v300 = v36;
  v38 = __s <= (std::string::value_type **)"local" && (char *)__s + 5 > "local";
  v40 = __s <= (std::string::value_type **)"stun" && (char *)__s + 4 > "stun";
  v298 = v40;
  v299 = v38;
  v42 = __s <= (std::string::value_type **)"local" && (char *)__s + 5 > "local";
  v297 = v42;
  v301 = (char *)v2 + 8;
  v302 = v2;
  while (1)
  {
    v325 = 0;
    v326 = 0;
    v43 = (rtc::SSLCertificateStats *)*((_QWORD *)v26 + 9);
    if (v43)
    {
      *((_QWORD *)v26 + 9) = 0;
      v44 = webrtc::LegacyStatsCollector::AddCertificateReports((uint64_t)v2, (uint64_t)v43);
      rtc::SSLCertificateStats::~SSLCertificateStats(v43);
      MEMORY[0x20BD0ADEC]();
      if (v44)
      {
        v45 = (void (***)(_QWORD))*v44;
        if (*v44)
          (**v45)(*v44);
        if (v326)
          (*v326)[1](v326);
        v326 = v45;
      }
    }
    v46 = (rtc::SSLCertificateStats *)*((_QWORD *)v26 + 10);
    if (v46)
    {
      *((_QWORD *)v26 + 10) = 0;
      v47 = webrtc::LegacyStatsCollector::AddCertificateReports((uint64_t)v2, (uint64_t)v46);
      rtc::SSLCertificateStats::~SSLCertificateStats(v46);
      MEMORY[0x20BD0ADEC]();
      if (v47)
      {
        v48 = (void (***)(_QWORD))*v47;
        if (*v47)
          (**v48)(*v47);
        if (v325)
          (*v325)[1](v325);
        v325 = v48;
      }
    }
    v49 = *((_QWORD *)v26 + 6);
    v295 = *((_QWORD *)v26 + 7);
    v303 = v26;
    if (v49 != v295)
      break;
LABEL_87:
    if (v325)
      (*v325)[1](v325);
    if (v326)
      (*v326)[1](v326);
    v26 += 88;
    if (v26 == v294)
      goto LABEL_486;
  }
  while (1)
  {
    v50 = *(_DWORD *)v49;
    v51 = operator new();
    *(_DWORD *)(v51 + 8) = 2;
    *(_QWORD *)v51 = &unk_24C0B5CD0;
    v296 = (unsigned int *)v51;
    v52 = (std::string *)(v51 + 16);
    if (v26[23] < 0)
    {
      std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
    }
    else
    {
      v53 = *(_OWORD *)v26;
      v52->__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 2);
      *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
    }
    v296[10] = v50;
    *(_QWORD *)v296 = off_24C0B5C88;
    v296[11] = 0;
    v54 = v296 + 11;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
    v56 = *((_QWORD *)v2 + 2);
    if ((char *)v56 == v4)
      goto LABEL_102;
    while (((*(uint64_t (**)(_QWORD, unsigned int *))(***(_QWORD ***)(v56 + 16) + 40))(**(_QWORD **)(v56 + 16), v296) & 1) == 0)
    {
      v56 = *(_QWORD *)(v56 + 8);
      if ((char *)v56 == v4)
        goto LABEL_102;
    }
    if ((char *)v56 == v4)
    {
LABEL_102:
      v57 = (_QWORD *)operator new();
      *v57 = v296;
      (**(void (***)(unsigned int *))v296)(v296);
      v57[4] = 0;
      v57[3] = 0;
      v57[1] = 0;
      v57[2] = v57 + 3;
      v58 = operator new(0x18uLL);
      v59 = v57;
      v58[1] = v4;
      v58[2] = v57;
      v60 = *((_QWORD *)v2 + 1);
      *v58 = v60;
      *(_QWORD *)(v60 + 8) = v58;
      *((_QWORD *)v2 + 1) = v58;
      ++*((_QWORD *)v2 + 3);
      goto LABEL_103;
    }
    v66 = (_QWORD *)operator new();
    v67 = *(_QWORD *)(v56 + 16);
    v68 = *(void (****)(_QWORD))v67;
    *v66 = *(_QWORD *)v67;
    if (!v68)
    {
      v66[3] = 0;
      v66[4] = 0;
      v66[1] = 0;
      v66[2] = v66 + 3;
      v70 = v66;
      std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy(v67 + 16, *(_QWORD **)(v67 + 24));
      v71 = *(void (****)(_QWORD))v67;
      if (!*(_QWORD *)v67)
        goto LABEL_116;
      goto LABEL_115;
    }
    v69 = v66;
    (**v68)(v68);
    v59 = v69;
    v67 = *(_QWORD *)(v56 + 16);
    v59[3] = 0;
    v59[4] = 0;
    v59[1] = 0;
    v59[2] = v59 + 3;
    if (v67)
    {
      v70 = v59;
      std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy(v67 + 16, *(_QWORD **)(v67 + 24));
      v71 = *(void (****)(_QWORD))v67;
      if (!*(_QWORD *)v67)
      {
LABEL_116:
        MEMORY[0x20BD0ADEC](v67, 0x1020C40FF594A20);
        v59 = v70;
        goto LABEL_117;
      }
LABEL_115:
      (*v71)[1](v71);
      goto LABEL_116;
    }
LABEL_117:
    *(_QWORD *)(v56 + 16) = v59;
LABEL_103:
    v59[1] = *((_QWORD *)v2 + 10);
    v61 = (uint64_t)v59;
    webrtc::StatsReport::AddInt(v59, 53, *(_DWORD *)v49);
    if (v326)
      webrtc::StatsReport::AddId(v61, 102, &v326);
    v306 = (_QWORD *)v61;
    if (v325)
      webrtc::StatsReport::AddId(v61, 114, &v325);
    v62 = *(_DWORD *)(v49 + 8);
    if (v62)
      break;
LABEL_130:
    v74 = *(_DWORD *)(v49 + 12);
    v305 = v49;
    if (!v74)
      goto LABEL_175;
LABEL_131:
    v75 = (unsigned __int16)v74 | 0x3000000;
    LODWORD(__s[2]) = v75;
    v76 = bsearch(__s, bssl::kCiphers, 0x18uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))ssl_cipher_id_cmp_void);
    if (!v76)
      goto LABEL_175;
    v77 = (std::string *)*((_QWORD *)v76 + 1);
    if (!v77)
      goto LABEL_485;
    v78 = strlen(*((const char **)v76 + 1));
    if (v78 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_513;
    v79 = v78;
    if (v78 > 0x16)
    {
      v82 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v78 | 7) != 0x17)
        v82 = v78 | 7;
      v83 = v82 + 1;
      v80 = (std::string *)operator new(v82 + 1);
      v333.__r_.__value_.__r.__words[2] = v83 | 0x8000000000000000;
      v333.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
      v333.__r_.__value_.__l.__size_ = v79;
      v81 = (std::string *)((char *)v80 + v79);
      if (v80 > v77)
        goto LABEL_141;
    }
    else
    {
      *((_BYTE *)&v333.__r_.__value_.__s + 23) = v78;
      v80 = &v333;
      v81 = (std::string *)((char *)&v333 + v79);
      if (&v333 > v77)
        goto LABEL_141;
    }
    if (v81 > v77)
      goto LABEL_485;
LABEL_141:
    if (v79)
      memmove(v80, v77, v79);
    v81->__r_.__value_.__s.__data_[0] = 0;
    if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v333.__r_.__value_.__r.__words[2]);
    else
      size = v333.__r_.__value_.__l.__size_;
    if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v333.__r_.__value_.__l.__data_);
      v49 = v305;
      if (!size)
        goto LABEL_175;
    }
    else
    {
      v49 = v305;
      if (!size)
        goto LABEL_175;
    }
    LODWORD(__s[2]) = v75;
    v85 = bsearch(__s, bssl::kCiphers, 0x18uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))ssl_cipher_id_cmp_void);
    if (!v85)
    {
      memset(__s, 0, sizeof(__s));
      webrtc::StatsReport::AddString((uint64_t)v306, 68, (uint64_t)__s);
      if ((SHIBYTE(__s[2]) & 0x80000000) == 0)
        goto LABEL_175;
LABEL_174:
      operator delete(__s[0]);
      goto LABEL_175;
    }
    v86 = (std::string::value_type **)*((_QWORD *)v85 + 1);
    if (!v86)
      goto LABEL_485;
    v87 = strlen(*((const char **)v85 + 1));
    if (v87 > 0x7FFFFFFFFFFFFFF7)
LABEL_513:
      abort();
    v88 = (std::string::value_type *)v87;
    if (v87 > 0x16)
    {
      v92 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v87 | 7) != 0x17)
        v92 = v87 | 7;
      v93 = v92 + 1;
      v89 = (std::string::value_type *)operator new(v92 + 1);
      __s[2] = (std::string::value_type *)(v93 | 0x8000000000000000);
      __s[0] = v89;
      __s[1] = v88;
      v90 = &v88[(_QWORD)v89];
      if (v89 > (std::string::value_type *)v86)
        goto LABEL_171;
    }
    else
    {
      HIBYTE(__s[2]) = v87;
      v89 = (std::string::value_type *)__s;
      v90 = (char *)__s + (_QWORD)v88;
      if (__s > v86)
        goto LABEL_171;
    }
    if (v90 > (std::string::value_type *)v86)
      goto LABEL_485;
LABEL_171:
    if (v88)
      memmove(v89, v86, (size_t)v88);
    *v90 = 0;
    webrtc::StatsReport::AddString((uint64_t)v306, 68, (uint64_t)__s);
    if (SHIBYTE(__s[2]) < 0)
      goto LABEL_174;
LABEL_175:
    v94 = *(_QWORD *)(v49 + 32);
    for (j = *(_QWORD *)(v49 + 40); v94 != j; v94 += 464)
      webrtc::LegacyStatsCollector::AddCandidateReport(v2, v94, 1);
    v96 = *(_BYTE **)(v49 + 56);
    v304 = *(_BYTE **)(v49 + 64);
    if (v96 != v304)
    {
      v97 = 0;
      while (1)
      {
        v98 = *(_DWORD *)v49;
        v99 = operator new();
        *(_DWORD *)(v99 + 8) = 3;
        *(_QWORD *)v99 = &unk_24C0B5CD0;
        v100 = (std::string *)(v99 + 16);
        if (v26[23] < 0)
        {
          std::string::__init_copy_ctor_external(v100, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
        }
        else
        {
          v101 = *(_OWORD *)v26;
          *(_QWORD *)(v99 + 32) = *((_QWORD *)v26 + 2);
          *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v101;
        }
        v102 = v97 + 1;
        *(_DWORD *)(v99 + 40) = v98;
        *(_DWORD *)(v99 + 44) = v97;
        *(_QWORD *)v99 = off_24C0B5D10;
        *(_DWORD *)(v99 + 48) = 0;
        v103 = (unsigned int *)(v99 + 48);
        do
          v104 = __ldxr(v103);
        while (__stxr(v104 + 1, v103));
        v105 = *((_QWORD *)v2 + 2);
        v310 = v96;
        v308 = v99;
        v307 = v102;
        if ((char *)v105 != v4)
        {
          while (((*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v105 + 16) + 40))(**(_QWORD **)(v105 + 16), v99) & 1) == 0)
          {
            v105 = *(_QWORD *)(v105 + 8);
            if ((char *)v105 == v4)
              goto LABEL_209;
          }
          if ((char *)v105 != v4)
            break;
        }
LABEL_209:
        v112 = (_QWORD *)operator new();
        *v112 = v99;
        (**(void (***)(uint64_t))v99)(v99);
        v112[3] = 0;
        v114 = (int *)(v112 + 3);
        v112[4] = 0;
        v112[2] = v112 + 3;
        v123 = operator new(0x18uLL);
        v123[1] = v4;
        v123[2] = v112;
        v124 = *((_QWORD *)v2 + 1);
        *v123 = v124;
        *(_QWORD *)(v124 + 8) = v123;
        *((_QWORD *)v2 + 1) = v123;
        ++*((_QWORD *)v2 + 3);
        v112[1] = *((_QWORD *)v2 + 10);
        v115 = v96 + 2;
        v116 = v96 + 1;
        LOBYTE(v117) = *v96;
LABEL_210:
        v125 = operator new();
        *(_DWORD *)v125 = 0;
        *(_BYTE *)(v125 + 16) = v117;
        *(_QWORD *)(v125 + 8) = 0x500000001;
        v126 = (int *)v112[3];
        v127 = v114;
        v128 = v114;
        if (v126)
        {
          while (1)
          {
            while (1)
            {
              v128 = v126;
              v129 = v126[8];
              if (v129 < 1)
                break;
              v126 = (int *)*v128;
              v127 = (int *)v128;
              if (!*v128)
                goto LABEL_217;
            }
            if ((v129 & 0x80000000) == 0)
              break;
            v126 = (int *)v128[1];
            if (!v126)
            {
              v127 = (int *)(v128 + 1);
              goto LABEL_217;
            }
          }
        }
        else
        {
LABEL_217:
          v130 = v128;
          v128 = operator new(0x30uLL);
          *((_DWORD *)v128 + 8) = 0;
          v128[5] = 0;
          *v128 = 0;
          v128[1] = 0;
          v128[2] = v130;
          *(_QWORD *)v127 = v128;
          v131 = *(_QWORD *)v112[2];
          v132 = v128;
          if (v131)
          {
            v112[2] = v131;
            v132 = *(uint64_t **)v127;
          }
          v133 = *(int **)v114;
          v134 = v132 == *(uint64_t **)v114;
          *((_BYTE *)v132 + 24) = v134;
          if (!v134)
          {
            do
            {
              v135 = v132[2];
              if (*(_BYTE *)(v135 + 24))
                break;
              v136 = *(uint64_t **)(v135 + 16);
              v137 = *v136;
              if (*v136 == v135)
              {
                v140 = v136[1];
                if (!v140 || (v141 = *(unsigned __int8 *)(v140 + 24), v138 = (_BYTE *)(v140 + 24), v141))
                {
                  if (*(uint64_t **)v135 == v132)
                  {
                    *(_BYTE *)(v135 + 24) = 1;
                    *((_BYTE *)v136 + 24) = 0;
                    v144 = *(_QWORD *)(v135 + 8);
                    *v136 = v144;
                    if (v144)
                      goto LABEL_234;
                  }
                  else
                  {
                    v142 = *(uint64_t **)(v135 + 8);
                    v143 = *v142;
                    *(_QWORD *)(v135 + 8) = *v142;
                    if (v143)
                    {
                      *(_QWORD *)(v143 + 16) = v135;
                      v136 = *(uint64_t **)(v135 + 16);
                    }
                    v142[2] = (uint64_t)v136;
                    *(_QWORD *)(*(_QWORD *)(v135 + 16) + 8 * (**(_QWORD **)(v135 + 16) != v135)) = v142;
                    *v142 = v135;
                    *(_QWORD *)(v135 + 16) = v142;
                    v136 = (uint64_t *)v142[2];
                    v135 = *v136;
                    *((_BYTE *)v142 + 24) = 1;
                    *((_BYTE *)v136 + 24) = 0;
                    v144 = *(_QWORD *)(v135 + 8);
                    *v136 = v144;
                    if (v144)
LABEL_234:
                      *(_QWORD *)(v144 + 16) = v136;
                  }
                  *(_QWORD *)(v135 + 16) = v136[2];
                  *(_QWORD *)(v136[2] + 8 * (*(_QWORD *)v136[2] != (_QWORD)v136)) = v135;
                  *(_QWORD *)(v135 + 8) = v136;
LABEL_240:
                  v136[2] = v135;
                  break;
                }
              }
              else if (!v137 || (v139 = *(unsigned __int8 *)(v137 + 24), v138 = (_BYTE *)(v137 + 24), v139))
              {
                if (*(uint64_t **)v135 == v132)
                {
                  v266 = v132[1];
                  *(_QWORD *)v135 = v266;
                  if (v266)
                  {
                    *(_QWORD *)(v266 + 16) = v135;
                    v136 = *(uint64_t **)(v135 + 16);
                  }
                  v132[2] = (uint64_t)v136;
                  *(_QWORD *)(*(_QWORD *)(v135 + 16) + 8 * (**(_QWORD **)(v135 + 16) != v135)) = v132;
                  v132[1] = v135;
                  *(_QWORD *)(v135 + 16) = v132;
                  v136 = (uint64_t *)v132[2];
                  *((_BYTE *)v132 + 24) = 1;
                  *((_BYTE *)v136 + 24) = 0;
                  v135 = v136[1];
                  v145 = *(uint64_t **)v135;
                  v136[1] = *(_QWORD *)v135;
                  if (v145)
LABEL_238:
                    v145[2] = (uint64_t)v136;
                }
                else
                {
                  *(_BYTE *)(v135 + 24) = 1;
                  *((_BYTE *)v136 + 24) = 0;
                  v135 = v136[1];
                  v145 = *(uint64_t **)v135;
                  v136[1] = *(_QWORD *)v135;
                  if (v145)
                    goto LABEL_238;
                }
                *(_QWORD *)(v135 + 16) = v136[2];
                *(_QWORD *)(v136[2] + 8 * (*(_QWORD *)v136[2] != (_QWORD)v136)) = v135;
                *(_QWORD *)v135 = v136;
                goto LABEL_240;
              }
              *(_BYTE *)(v135 + 24) = 1;
              v132 = v136;
              *((_BYTE *)v136 + 24) = v136 == (uint64_t *)v133;
              *v138 = 1;
            }
            while (v136 != (uint64_t *)v133);
          }
          ++v112[4];
        }
        v146 = v128[5];
        v128[5] = v125;
        if (v146)
        {
          v147 = *(_DWORD *)(v146 + 8) - 1;
          *(_DWORD *)(v146 + 8) = v147;
          if (!v147)
          {
            v155 = *(_DWORD *)(v146 + 12);
            if (v155 == 6)
            {
              v159 = *(_QWORD **)(v146 + 16);
              if (v159)
              {
                if (*v159)
                  (*(void (**)(_QWORD))(*(_QWORD *)*v159 + 8))(*v159);
                v157 = v159;
                v158 = 0x20C4093837F09;
LABEL_268:
                MEMORY[0x20BD0ADEC](v157, v158);
              }
            }
            else if (v155 == 3)
            {
              v156 = *(_QWORD *)(v146 + 16);
              if (v156)
              {
                if (*(char *)(v156 + 23) < 0)
                  operator delete(*(void **)v156);
                v157 = (_QWORD *)v156;
                v158 = 0x1012C40EC159624;
                goto LABEL_268;
              }
            }
            MEMORY[0x20BD0ADEC](v146, 0x1072C40C6644164);
            v148 = *v115;
            v149 = *(_QWORD *)v114;
            if (!*(_QWORD *)v114)
              goto LABEL_270;
            goto LABEL_245;
          }
        }
LABEL_244:
        v148 = *v115;
        v149 = *(_QWORD *)v114;
        if (!*(_QWORD *)v114)
          goto LABEL_270;
LABEL_245:
        v150 = v114;
        do
        {
          v151 = *(_DWORD *)(v149 + 32);
          v152 = v151 < 19;
          if (v151 >= 19)
            v153 = (uint64_t *)v149;
          else
            v153 = (uint64_t *)(v149 + 8);
          if (!v152)
            v150 = (int *)v149;
          v149 = *v153;
        }
        while (*v153);
        if (v150 != v114 && v150[8] <= 19)
        {
          v154 = *((_QWORD *)v150 + 5);
          if (v154)
          {
            if (*(_DWORD *)(v154 + 12) == 5 && *(unsigned __int8 *)(v154 + 16) == v148)
              goto LABEL_304;
          }
        }
LABEL_270:
        v160 = operator new();
        *(_DWORD *)v160 = 19;
        *(_BYTE *)(v160 + 16) = v148;
        *(_QWORD *)(v160 + 8) = 0x500000001;
        v161 = *(int **)v114;
        v162 = v114;
        v163 = v114;
        if (*(_QWORD *)v114)
        {
          while (1)
          {
            while (1)
            {
              v163 = v161;
              v164 = v161[8];
              if (v164 < 20)
                break;
              v161 = (int *)*v163;
              v162 = (int *)v163;
              if (!*v163)
                goto LABEL_277;
            }
            if (v164 == 19)
              break;
            v161 = (int *)v163[1];
            if (!v161)
            {
              v162 = (int *)(v163 + 1);
              goto LABEL_277;
            }
          }
        }
        else
        {
LABEL_277:
          v165 = v163;
          v163 = operator new(0x30uLL);
          *((_DWORD *)v163 + 8) = 19;
          v163[5] = 0;
          *v163 = 0;
          v163[1] = 0;
          v163[2] = v165;
          *(_QWORD *)v162 = v163;
          v166 = *(_QWORD *)v112[2];
          v167 = v163;
          if (v166)
          {
            v112[2] = v166;
            v167 = *(uint64_t **)v162;
          }
          v168 = *(int **)v114;
          v134 = v167 == *(uint64_t **)v114;
          *((_BYTE *)v167 + 24) = v134;
          if (!v134)
          {
            do
            {
              v169 = v167[2];
              if (*(_BYTE *)(v169 + 24))
                break;
              v170 = *(uint64_t **)(v169 + 16);
              v171 = *v170;
              if (*v170 == v169)
              {
                v174 = v170[1];
                if (!v174 || (v175 = *(unsigned __int8 *)(v174 + 24), v172 = (_BYTE *)(v174 + 24), v175))
                {
                  if (*(uint64_t **)v169 == v167)
                  {
                    *(_BYTE *)(v169 + 24) = 1;
                    *((_BYTE *)v170 + 24) = 0;
                    v178 = *(_QWORD *)(v169 + 8);
                    *v170 = v178;
                    if (v178)
                      goto LABEL_294;
                  }
                  else
                  {
                    v176 = *(uint64_t **)(v169 + 8);
                    v177 = *v176;
                    *(_QWORD *)(v169 + 8) = *v176;
                    if (v177)
                    {
                      *(_QWORD *)(v177 + 16) = v169;
                      v170 = *(uint64_t **)(v169 + 16);
                    }
                    v176[2] = (uint64_t)v170;
                    *(_QWORD *)(*(_QWORD *)(v169 + 16) + 8 * (**(_QWORD **)(v169 + 16) != v169)) = v176;
                    *v176 = v169;
                    *(_QWORD *)(v169 + 16) = v176;
                    v170 = (uint64_t *)v176[2];
                    v169 = *v170;
                    *((_BYTE *)v176 + 24) = 1;
                    *((_BYTE *)v170 + 24) = 0;
                    v178 = *(_QWORD *)(v169 + 8);
                    *v170 = v178;
                    if (v178)
LABEL_294:
                      *(_QWORD *)(v178 + 16) = v170;
                  }
                  *(_QWORD *)(v169 + 16) = v170[2];
                  *(_QWORD *)(v170[2] + 8 * (*(_QWORD *)v170[2] != (_QWORD)v170)) = v169;
                  *(_QWORD *)(v169 + 8) = v170;
LABEL_300:
                  v170[2] = v169;
                  break;
                }
              }
              else if (!v171 || (v173 = *(unsigned __int8 *)(v171 + 24), v172 = (_BYTE *)(v171 + 24), v173))
              {
                if (*(uint64_t **)v169 == v167)
                {
                  v267 = v167[1];
                  *(_QWORD *)v169 = v267;
                  if (v267)
                  {
                    *(_QWORD *)(v267 + 16) = v169;
                    v170 = *(uint64_t **)(v169 + 16);
                  }
                  v167[2] = (uint64_t)v170;
                  *(_QWORD *)(*(_QWORD *)(v169 + 16) + 8 * (**(_QWORD **)(v169 + 16) != v169)) = v167;
                  v167[1] = v169;
                  *(_QWORD *)(v169 + 16) = v167;
                  v170 = (uint64_t *)v167[2];
                  *((_BYTE *)v167 + 24) = 1;
                  *((_BYTE *)v170 + 24) = 0;
                  v169 = v170[1];
                  v179 = *(uint64_t **)v169;
                  v170[1] = *(_QWORD *)v169;
                  if (v179)
LABEL_298:
                    v179[2] = (uint64_t)v170;
                }
                else
                {
                  *(_BYTE *)(v169 + 24) = 1;
                  *((_BYTE *)v170 + 24) = 0;
                  v169 = v170[1];
                  v179 = *(uint64_t **)v169;
                  v170[1] = *(_QWORD *)v169;
                  if (v179)
                    goto LABEL_298;
                }
                *(_QWORD *)(v169 + 16) = v170[2];
                *(_QWORD *)(v170[2] + 8 * (*(_QWORD *)v170[2] != (_QWORD)v170)) = v169;
                *(_QWORD *)v169 = v170;
                goto LABEL_300;
              }
              *(_BYTE *)(v169 + 24) = 1;
              v167 = v170;
              *((_BYTE *)v170 + 24) = v170 == (uint64_t *)v168;
              *v172 = 1;
            }
            while (v170 != (uint64_t *)v168);
          }
          ++v112[4];
        }
        v180 = v163[5];
        v163[5] = v160;
        if (!v180 || (v181 = *(_DWORD *)(v180 + 8) - 1, (*(_DWORD *)(v180 + 8) = v181) != 0))
        {
LABEL_304:
          v182 = *v116;
          v183 = *(int **)v114;
          if (*(_QWORD *)v114)
            goto LABEL_305;
          goto LABEL_330;
        }
        v189 = *(_DWORD *)(v180 + 12);
        if (v189 == 6)
        {
          v193 = *(_QWORD **)(v180 + 16);
          if (!v193)
            goto LABEL_329;
          if (*v193)
            (*(void (**)(_QWORD))(*(_QWORD *)*v193 + 8))(*v193);
          v191 = v193;
          v192 = 0x20C4093837F09;
          goto LABEL_328;
        }
        if (v189 == 3)
        {
          v190 = *(_QWORD *)(v180 + 16);
          if (v190)
          {
            if (*(char *)(v190 + 23) < 0)
              operator delete(*(void **)v190);
            v191 = (_QWORD *)v190;
            v192 = 0x1012C40EC159624;
LABEL_328:
            MEMORY[0x20BD0ADEC](v191, v192);
          }
        }
LABEL_329:
        MEMORY[0x20BD0ADEC](v180, 0x1072C40C6644164);
        v182 = *v116;
        v183 = *(int **)v114;
        if (*(_QWORD *)v114)
        {
LABEL_305:
          v184 = v114;
          do
          {
            v185 = v183[8];
            v186 = v185 < 138;
            if (v185 >= 138)
              v187 = (int **)v183;
            else
              v187 = (int **)(v183 + 2);
            if (!v186)
              v184 = v183;
            v183 = *v187;
          }
          while (*v187);
          if (v184 != v114 && v184[8] <= 138)
          {
            v188 = *((_QWORD *)v184 + 5);
            if (v188)
            {
              if (*(_DWORD *)(v188 + 12) == 5 && *(unsigned __int8 *)(v188 + 16) == v182)
                goto LABEL_376;
            }
          }
        }
LABEL_330:
        v194 = operator new();
        *(_DWORD *)v194 = 138;
        *(_BYTE *)(v194 + 16) = v182;
        *(_QWORD *)(v194 + 8) = 0x500000001;
        v195 = *(int **)v114;
        v196 = v114;
        v197 = v114;
        if (*(_QWORD *)v114)
        {
          while (1)
          {
            while (1)
            {
              v197 = v195;
              v198 = v195[8];
              if (v198 < 139)
                break;
              v195 = (int *)*v197;
              v196 = (int *)v197;
              if (!*v197)
                goto LABEL_337;
            }
            if (v198 == 138)
              break;
            v195 = (int *)v197[1];
            if (!v195)
            {
              v196 = (int *)(v197 + 1);
              goto LABEL_337;
            }
          }
        }
        else
        {
LABEL_337:
          v199 = v197;
          v197 = operator new(0x30uLL);
          *((_DWORD *)v197 + 8) = 138;
          v197[5] = 0;
          *v197 = 0;
          v197[1] = 0;
          v197[2] = v199;
          *(_QWORD *)v196 = v197;
          v200 = *(_QWORD *)v112[2];
          v201 = v197;
          if (v200)
          {
            v112[2] = v200;
            v201 = *(uint64_t **)v196;
          }
          v202 = *(int **)v114;
          v134 = v201 == *(uint64_t **)v114;
          *((_BYTE *)v201 + 24) = v134;
          if (!v134)
          {
            do
            {
              v203 = v201[2];
              if (*(_BYTE *)(v203 + 24))
                break;
              v204 = *(uint64_t **)(v203 + 16);
              v205 = *v204;
              if (*v204 == v203)
              {
                v208 = v204[1];
                if (!v208 || (v209 = *(unsigned __int8 *)(v208 + 24), v206 = (_BYTE *)(v208 + 24), v209))
                {
                  if (*(uint64_t **)v203 == v201)
                  {
                    *(_BYTE *)(v203 + 24) = 1;
                    *((_BYTE *)v204 + 24) = 0;
                    v212 = *(_QWORD *)(v203 + 8);
                    *v204 = v212;
                    if (v212)
                      goto LABEL_354;
                  }
                  else
                  {
                    v210 = *(uint64_t **)(v203 + 8);
                    v211 = *v210;
                    *(_QWORD *)(v203 + 8) = *v210;
                    if (v211)
                    {
                      *(_QWORD *)(v211 + 16) = v203;
                      v204 = *(uint64_t **)(v203 + 16);
                    }
                    v210[2] = (uint64_t)v204;
                    *(_QWORD *)(*(_QWORD *)(v203 + 16) + 8 * (**(_QWORD **)(v203 + 16) != v203)) = v210;
                    *v210 = v203;
                    *(_QWORD *)(v203 + 16) = v210;
                    v204 = (uint64_t *)v210[2];
                    v203 = *v204;
                    *((_BYTE *)v210 + 24) = 1;
                    *((_BYTE *)v204 + 24) = 0;
                    v212 = *(_QWORD *)(v203 + 8);
                    *v204 = v212;
                    if (v212)
LABEL_354:
                      *(_QWORD *)(v212 + 16) = v204;
                  }
                  *(_QWORD *)(v203 + 16) = v204[2];
                  *(_QWORD *)(v204[2] + 8 * (*(_QWORD *)v204[2] != (_QWORD)v204)) = v203;
                  *(_QWORD *)(v203 + 8) = v204;
LABEL_360:
                  v204[2] = v203;
                  break;
                }
              }
              else if (!v205 || (v207 = *(unsigned __int8 *)(v205 + 24), v206 = (_BYTE *)(v205 + 24), v207))
              {
                if (*(uint64_t **)v203 == v201)
                {
                  v268 = v201[1];
                  *(_QWORD *)v203 = v268;
                  if (v268)
                  {
                    *(_QWORD *)(v268 + 16) = v203;
                    v204 = *(uint64_t **)(v203 + 16);
                  }
                  v201[2] = (uint64_t)v204;
                  *(_QWORD *)(*(_QWORD *)(v203 + 16) + 8 * (**(_QWORD **)(v203 + 16) != v203)) = v201;
                  v201[1] = v203;
                  *(_QWORD *)(v203 + 16) = v201;
                  v204 = (uint64_t *)v201[2];
                  *((_BYTE *)v201 + 24) = 1;
                  *((_BYTE *)v204 + 24) = 0;
                  v203 = v204[1];
                  v213 = *(uint64_t **)v203;
                  v204[1] = *(_QWORD *)v203;
                  if (v213)
LABEL_358:
                    v213[2] = (uint64_t)v204;
                }
                else
                {
                  *(_BYTE *)(v203 + 24) = 1;
                  *((_BYTE *)v204 + 24) = 0;
                  v203 = v204[1];
                  v213 = *(uint64_t **)v203;
                  v204[1] = *(_QWORD *)v203;
                  if (v213)
                    goto LABEL_358;
                }
                *(_QWORD *)(v203 + 16) = v204[2];
                *(_QWORD *)(v204[2] + 8 * (*(_QWORD *)v204[2] != (_QWORD)v204)) = v203;
                *(_QWORD *)v203 = v204;
                goto LABEL_360;
              }
              *(_BYTE *)(v203 + 24) = 1;
              v201 = v204;
              *((_BYTE *)v204 + 24) = v204 == (uint64_t *)v202;
              *v206 = 1;
            }
            while (v204 != (uint64_t *)v202);
          }
          ++v112[4];
        }
        v214 = v197[5];
        v197[5] = v194;
        if (v214)
        {
          v215 = *(_DWORD *)(v214 + 8) - 1;
          *(_DWORD *)(v214 + 8) = v215;
          if (!v215)
          {
            v216 = *(_DWORD *)(v214 + 12);
            if (v216 == 6)
            {
              v220 = *(_QWORD **)(v214 + 16);
              if (v220)
              {
                if (*v220)
                  (*(void (**)(_QWORD))(*(_QWORD *)*v220 + 8))(*v220);
                v218 = v220;
                v219 = 0x20C4093837F09;
LABEL_374:
                MEMORY[0x20BD0ADEC](v218, v219);
              }
            }
            else if (v216 == 3)
            {
              v217 = *(_QWORD *)(v214 + 16);
              if (v217)
              {
                if (*(char *)(v217 + 23) < 0)
                  operator delete(*(void **)v217);
                v218 = (_QWORD *)v217;
                v219 = 0x1012C40EC159624;
                goto LABEL_374;
              }
            }
            MEMORY[0x20BD0ADEC](v214, 0x1072C40C6644164);
          }
        }
LABEL_376:
        webrtc::StatsReport::AddId((uint64_t)v112, 51, v306);
        cricket::Candidate::Candidate(&v332, (std::string *)v310 + 5);
        cricket::Candidate::Candidate(&v333, &v332);
        v334 = 0;
        v335 = 0;
        cricket::Candidate::~Candidate((void **)&v332.__r_.__value_.__l.__data_);
        cricket::Candidate::Candidate(&v328, (std::string *)v310 + 23);
        cricket::Candidate::Candidate(&v329, &v328);
        v330 = 0;
        v331 = 0;
        cricket::Candidate::~Candidate((void **)&v328.__r_.__value_.__l.__data_);
        v221 = webrtc::LegacyStatsCollector::AddCandidateReport(v2, (uint64_t)&v333, 1);
        webrtc::StatsReport::AddId((uint64_t)v112, 100, v221);
        v222 = webrtc::LegacyStatsCollector::AddCandidateReport(v2, (uint64_t)&v329, 0);
        webrtc::StatsReport::AddId((uint64_t)v112, 112, v222);
        v223 = *((_QWORD *)v310 + 3);
        v224 = *((_QWORD *)v310 + 1);
        v226 = *((_QWORD *)v310 + 5);
        v225 = *((_QWORD *)v310 + 6);
        v227 = *((_QWORD *)v310 + 7);
        v228 = *((_QWORD *)v310 + 8);
        v229 = *((_QWORD *)v310 + 9);
        v230 = *((_QWORD *)v310 + 13);
        v309 = *((_QWORD *)v310 + 14);
        webrtc::StatsReport::AddInt64(v112, 4, *((_QWORD *)v310 + 10));
        webrtc::StatsReport::AddInt64(v112, 5, v223);
        webrtc::StatsReport::AddInt64(v112, 16, v225);
        webrtc::StatsReport::AddInt64(v112, 126, v224);
        webrtc::StatsReport::AddInt64(v112, 129, v226);
        webrtc::StatsReport::AddInt64(v112, 27, v227);
        webrtc::StatsReport::AddInt64(v112, 28, v228);
        webrtc::StatsReport::AddInt64(v112, 29, v229);
        webrtc::StatsReport::AddInt64(v112, 30, v230);
        webrtc::StatsReport::AddInt64(v112, 31, v309);
        v337 = (char *)__s;
        v338 = 1024;
        LOBYTE(__s[0]) = 0;
        rtc::SocketAddress::HostAsURIString((rtc::SocketAddress *)(v310 + 200), &__src);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          v231 = __src.__r_.__value_.__l.__size_;
          v26 = v303;
          if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_485;
          p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
          if (__src.__r_.__value_.__l.__size_)
          {
            v4 = v301;
            v2 = v302;
            if (!__src.__r_.__value_.__r.__words[0])
              goto LABEL_485;
          }
          else
          {
            v4 = v301;
            v2 = v302;
          }
        }
        else
        {
          v231 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
          p_src = &__src;
          v4 = v301;
          v2 = v302;
          v26 = v303;
        }
        if (v231 >= 0x3FF)
          v233 = 1023;
        else
          v233 = v231;
        v234 = v231 < 0x3FF;
        if (v231 >= 0x3FF)
          v235 = v233;
        else
          v235 = v233 + 1;
        memcpy(__s, p_src, v233);
        *((_BYTE *)__s + v233) = 0;
        memcpy((char *)__s + v233, ":", v234);
        v339 = v235;
        *((_BYTE *)__s + v235) = 0;
        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v337, "%d", *((unsigned __int16 *)v310 + 128));
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__src.__r_.__value_.__l.__data_);
        v236 = v337;
        if (!v337)
          goto LABEL_485;
        v237 = strlen(v337);
        if (v237 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_513;
        v238 = v237;
        if (v237 > 0x16)
        {
          v241 = (v237 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v237 | 7) != 0x17)
            v241 = v237 | 7;
          v242 = v241 + 1;
          v239 = (std::string *)operator new(v241 + 1);
          __src.__r_.__value_.__r.__words[2] = v242 | 0x8000000000000000;
          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v239;
          __src.__r_.__value_.__l.__size_ = v238;
          v240 = (char *)v239 + v238;
          if (v239 > (std::string *)v236)
            goto LABEL_400;
        }
        else
        {
          *((_BYTE *)&__src.__r_.__value_.__s + 23) = v237;
          v239 = &__src;
          v240 = (char *)&__src + v238;
          if (&__src > (std::string *)v337)
            goto LABEL_400;
        }
        if (v240 > v236)
          goto LABEL_485;
LABEL_400:
        if (v238)
          memmove(v239, v236, v238);
        *v240 = 0;
        webrtc::StatsReport::AddString((uint64_t)v112, 99, (uint64_t)&__src);
        if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v243 = v310;
          v244 = *((_DWORD *)v310 + 82);
LABEL_404:
          switch(v244)
          {
            case 0u:
              HIBYTE(__s[2]) = 5;
              if (v299)
                goto LABEL_485;
              strcpy((char *)__s, "local");
              webrtc::StatsReport::AddString((uint64_t)v112, 101, (uint64_t)__s);
              if (SHIBYTE(__s[2]) < 0)
                goto LABEL_416;
              goto LABEL_417;
            case 1u:
              HIBYTE(__s[2]) = 4;
              if (v300)
                goto LABEL_485;
              strcpy((char *)__s, "stun");
              webrtc::StatsReport::AddString((uint64_t)v112, 101, (uint64_t)__s);
              if (SHIBYTE(__s[2]) < 0)
                goto LABEL_416;
              goto LABEL_417;
            case 2u:
              v245 = 5;
              v246 = "prflx";
              HIBYTE(__s[2]) = 5;
              v247 = (char *)__s + 5;
              if ("prflx" < (char *)__s)
                goto LABEL_415;
              goto LABEL_414;
            case 3u:
              v245 = 5;
              v246 = "relay";
              HIBYTE(__s[2]) = 5;
              v247 = (char *)__s + 5;
              if ("relay" >= (char *)__s)
                goto LABEL_414;
              goto LABEL_415;
            default:
              goto LABEL_409;
          }
        }
        operator delete(__src.__r_.__value_.__l.__data_);
        v243 = v310;
        v244 = *((_DWORD *)v310 + 82);
        if (v244 <= 3)
          goto LABEL_404;
LABEL_409:
        v245 = 4;
        v246 = "host";
        HIBYTE(__s[2]) = 4;
        v247 = (char *)__s + 4;
        if ("host" >= (char *)__s)
        {
LABEL_414:
          if (v247 > v246)
            goto LABEL_485;
        }
LABEL_415:
        memcpy(__s, v246, v245);
        *v247 = 0;
        webrtc::StatsReport::AddString((uint64_t)v112, 101, (uint64_t)__s);
        if (SHIBYTE(__s[2]) < 0)
LABEL_416:
          operator delete(__s[0]);
LABEL_417:
        v337 = (char *)__s;
        v338 = 1024;
        LOBYTE(__s[0]) = 0;
        rtc::SocketAddress::HostAsURIString((rtc::SocketAddress *)(v243 + 632), &__src);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          v248 = __src.__r_.__value_.__l.__size_;
          if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_485;
          v249 = (std::string *)__src.__r_.__value_.__r.__words[0];
          if (__src.__r_.__value_.__l.__size_)
          {
            if (!__src.__r_.__value_.__r.__words[0])
              goto LABEL_485;
          }
        }
        else
        {
          v248 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
          v249 = &__src;
        }
        if (v248 >= 0x3FF)
          v250 = 1023;
        else
          v250 = v248;
        v251 = v248 < 0x3FF;
        if (v248 >= 0x3FF)
          v252 = v250;
        else
          v252 = v250 + 1;
        memcpy(__s, v249, v250);
        *((_BYTE *)__s + v250) = 0;
        memcpy((char *)__s + v250, ":", v251);
        v339 = v252;
        *((_BYTE *)__s + v252) = 0;
        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v337, "%d", *((unsigned __int16 *)v243 + 344));
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__src.__r_.__value_.__l.__data_);
        v253 = v337;
        v49 = v305;
        if (!v337)
          goto LABEL_485;
        v254 = strlen(v337);
        if (v254 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_513;
        v255 = v254;
        if (v254 > 0x16)
        {
          v258 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v254 | 7) != 0x17)
            v258 = v254 | 7;
          v259 = v258 + 1;
          v256 = (std::string *)operator new(v258 + 1);
          __src.__r_.__value_.__r.__words[2] = v259 | 0x8000000000000000;
          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v256;
          __src.__r_.__value_.__l.__size_ = v255;
          v257 = (char *)v256 + v255;
          if (v256 > (std::string *)v253)
            goto LABEL_439;
        }
        else
        {
          *((_BYTE *)&__src.__r_.__value_.__s + 23) = v254;
          v256 = &__src;
          v257 = (char *)&__src + v255;
          if (&__src > (std::string *)v337)
            goto LABEL_439;
        }
        if (v257 > v253)
          goto LABEL_485;
LABEL_439:
        if (v255)
          memmove(v256, v253, v255);
        *v257 = 0;
        webrtc::StatsReport::AddString((uint64_t)v112, 111, (uint64_t)&__src);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__src.__r_.__value_.__l.__data_);
          v260 = v310;
          v261 = *((_DWORD *)v310 + 190);
          if (v261 > 3)
          {
LABEL_447:
            v262 = 4;
            v263 = "host";
            HIBYTE(__s[2]) = 4;
            v264 = (char *)__s + 4;
            if ("host" >= (char *)__s)
            {
LABEL_455:
              if (v264 > v263)
                goto LABEL_485;
            }
LABEL_456:
            memcpy(__s, v263, v262);
            *v264 = 0;
            goto LABEL_459;
          }
        }
        else
        {
          v260 = v310;
          v261 = *((_DWORD *)v310 + 190);
        }
        switch(v261)
        {
          case 0u:
            HIBYTE(__s[2]) = 5;
            if (v297)
              goto LABEL_485;
            strcpy((char *)__s, "local");
            break;
          case 1u:
            HIBYTE(__s[2]) = 4;
            if (v298)
              goto LABEL_485;
            strcpy((char *)__s, "stun");
            break;
          case 2u:
            v262 = 5;
            v263 = "prflx";
            HIBYTE(__s[2]) = 5;
            v264 = (char *)__s + 5;
            if ("prflx" < (char *)__s)
              goto LABEL_456;
            goto LABEL_455;
          case 3u:
            v262 = 5;
            v263 = "relay";
            HIBYTE(__s[2]) = 5;
            v264 = (char *)__s + 5;
            if ("relay" >= (char *)__s)
              goto LABEL_455;
            goto LABEL_456;
          default:
            goto LABEL_447;
        }
LABEL_459:
        webrtc::StatsReport::AddString((uint64_t)v112, 113, (uint64_t)__s);
        if (SHIBYTE(__s[2]) < 0)
          operator delete(__s[0]);
        webrtc::StatsReport::AddString((uint64_t)v112, 137, (uint64_t)(v260 + 152));
        webrtc::StatsReport::AddString((uint64_t)v112, 140, (uint64_t)(v260 + 176));
        cricket::Candidate::~Candidate((void **)&v329.__r_.__value_.__l.__data_);
        cricket::Candidate::~Candidate((void **)&v333.__r_.__value_.__l.__data_);
        (*(void (**)(uint64_t))(*(_QWORD *)v308 + 8))(v308);
        if (*v260)
          webrtc::StatsReport::AddId((uint64_t)v306, 20, v112);
        v96 = v260 + 1064;
        v97 = v307;
        if (v96 == v304)
          goto LABEL_93;
      }
      v106 = (_QWORD *)operator new();
      v107 = *(_QWORD *)(v105 + 16);
      v108 = *(void (****)(_QWORD))v107;
      *v106 = *(_QWORD *)v107;
      if (v108)
      {
        (**v108)(v108);
        v107 = *(_QWORD *)(v105 + 16);
        v109 = v106;
        v106[3] = 0;
        v106[4] = 0;
        v110 = v106 + 3;
        *(v110 - 2) = 0;
        *(v110 - 1) = v110;
        if (!v107)
        {
LABEL_195:
          v112 = v109;
          *(_QWORD *)(v105 + 16) = v109;
          v114 = (int *)(v109 + 3);
          v113 = v109[3];
          v109[1] = *((_QWORD *)v2 + 10);
          v115 = v96 + 2;
          v116 = v96 + 1;
          v117 = *v96;
          if (v113)
          {
            v118 = v114;
            do
            {
              v119 = *(_DWORD *)(v113 + 32);
              v120 = v119 < 0;
              if (v119 >= 0)
                v121 = (uint64_t *)v113;
              else
                v121 = (uint64_t *)(v113 + 8);
              if (!v120)
                v118 = (int *)v113;
              v113 = *v121;
            }
            while (*v121);
            if (v118 != v114 && v118[8] <= 0)
            {
              v122 = *((_QWORD *)v118 + 5);
              if (v122)
              {
                if (*(_DWORD *)(v122 + 12) == 5 && *(unsigned __int8 *)(v122 + 16) == v117)
                  goto LABEL_244;
              }
            }
          }
          goto LABEL_210;
        }
        std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy(v107 + 16, *(_QWORD **)(v107 + 24));
        v111 = *(void (****)(_QWORD))v107;
        if (!*(_QWORD *)v107)
        {
LABEL_194:
          MEMORY[0x20BD0ADEC](v107, 0x1020C40FF594A20);
          goto LABEL_195;
        }
      }
      else
      {
        v109 = v106;
        v106[3] = 0;
        v106[4] = 0;
        v265 = v106 + 3;
        *(v265 - 2) = 0;
        *(v265 - 1) = v265;
        std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy(v107 + 16, *(_QWORD **)(v107 + 24));
        v111 = *(void (****)(_QWORD))v107;
        if (!*(_QWORD *)v107)
          goto LABEL_194;
      }
      (*v111)[1](v111);
      goto LABEL_194;
    }
LABEL_93:
    (*(void (**)(unsigned int *))(*(_QWORD *)v296 + 8))(v296);
    v49 += 168;
    if (v49 == v295)
      goto LABEL_87;
  }
  v63 = v62 - 1;
  switch(v62)
  {
    case 1:
      v64 = (char *)operator new(0x19uLL);
      __s[0] = v64;
      *(_OWORD *)&__s[1] = xmmword_208F05110;
      v65 = "AES_CM_128_HMAC_SHA1_80";
      if (v64 > "AES_CM_128_HMAC_SHA1_80")
        goto LABEL_120;
      goto LABEL_119;
    case 2:
      v64 = (char *)operator new(0x19uLL);
      __s[0] = v64;
      *(_OWORD *)&__s[1] = xmmword_208F05110;
      v65 = "AES_CM_128_HMAC_SHA1_32";
      if (v64 > "AES_CM_128_HMAC_SHA1_32")
        goto LABEL_120;
LABEL_119:
      if (v64 + 23 <= v65)
      {
LABEL_120:
        *(_OWORD *)v64 = *(_OWORD *)v65;
        *(_QWORD *)(v64 + 15) = *(_QWORD *)(v65 + 15);
        v64[23] = 0;
        operator delete(v64);
LABEL_124:
        switch(v63)
        {
          case 0:
            v72 = (char *)operator new(0x19uLL);
            __s[0] = v72;
            *(_OWORD *)&__s[1] = xmmword_208F05110;
            v73 = "AES_CM_128_HMAC_SHA1_80";
            if (v72 > "AES_CM_128_HMAC_SHA1_80")
              goto LABEL_129;
            goto LABEL_128;
          case 1:
            v72 = (char *)operator new(0x19uLL);
            __s[0] = v72;
            *(_OWORD *)&__s[1] = xmmword_208F05110;
            v73 = "AES_CM_128_HMAC_SHA1_32";
            if (v72 > "AES_CM_128_HMAC_SHA1_32")
              goto LABEL_129;
LABEL_128:
            if (v72 + 23 > v73)
              goto LABEL_485;
LABEL_129:
            *(_OWORD *)v72 = *(_OWORD *)v73;
            *(_QWORD *)(v72 + 15) = *(_QWORD *)(v73 + 15);
            v72[23] = 0;
            webrtc::StatsReport::AddString((uint64_t)v306, 131, (uint64_t)__s);
            if ((SHIBYTE(__s[2]) & 0x80000000) == 0)
              goto LABEL_130;
            goto LABEL_163;
          case 6:
            HIBYTE(__s[2]) = 16;
            if (v287)
              goto LABEL_485;
            v91 = "AEAD_AES_128_GCM";
            goto LABEL_162;
          case 7:
            HIBYTE(__s[2]) = 16;
            if (v288)
              goto LABEL_485;
            v91 = "AEAD_AES_256_GCM";
LABEL_162:
            *(_OWORD *)__s = *(_OWORD *)v91;
            LOBYTE(__s[2]) = 0;
            webrtc::StatsReport::AddString((uint64_t)v306, 131, (uint64_t)__s);
            if ((SHIBYTE(__s[2]) & 0x80000000) == 0)
              goto LABEL_130;
LABEL_163:
            operator delete(__s[0]);
            v74 = *(_DWORD *)(v49 + 12);
            v305 = v49;
            if (!v74)
              goto LABEL_175;
            goto LABEL_131;
          default:
            memset(__s, 0, sizeof(__s));
            webrtc::StatsReport::AddString((uint64_t)v306, 131, (uint64_t)__s);
            if (SHIBYTE(__s[2]) < 0)
              goto LABEL_163;
            goto LABEL_130;
        }
      }
      break;
    case 7:
      HIBYTE(__s[2]) = 16;
      if (v292)
        break;
      goto LABEL_124;
    case 8:
      HIBYTE(__s[2]) = 16;
      if (!v293)
        goto LABEL_124;
      break;
    default:
      goto LABEL_130;
  }
LABEL_485:
  __break(1u);
LABEL_486:
  v15 = v327;
  if (v327)
LABEL_487:
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v290[217] = v289;
  v269 = v323;
  *a2 = v322;
  a2[1] = (uint64_t *)v269;
  v270 = (uint64_t *)(a2 + 1);
  v271 = v324;
  a2[2] = v324;
  if (v271)
  {
    *(_QWORD *)(v269 + 16) = v270;
    v322 = &v323;
    v323 = 0;
    v324 = 0;
    v272 = (char *)v314;
    if (!v314)
      goto LABEL_499;
LABEL_492:
    v273 = v315;
    v274 = v272;
    if (v315 != v272)
    {
      do
      {
        v276 = *((_QWORD *)v273 - 1);
        v273 -= 8;
        v275 = v276;
        if (v276)
          (*(void (**)(uint64_t))(*(_QWORD *)v275 + 8))(v275);
      }
      while (v273 != v272);
      v274 = v314;
    }
    v315 = v272;
    operator delete(v274);
  }
  else
  {
    *a2 = v270;
    v272 = (char *)v314;
    if (v314)
      goto LABEL_492;
  }
LABEL_499:
  if (v318)
  {
    v278 = v316;
    v277 = v317;
    v279 = *v317;
    *(_QWORD *)(v279 + 8) = *(_QWORD *)(v316 + 8);
    **(_QWORD **)(v278 + 8) = v279;
    v318 = 0;
    if (v277 != &v316)
    {
      do
      {
        v280 = (uint64_t *)v277[1];
        operator delete(v277);
        v277 = v280;
      }
      while (v280 != &v316);
    }
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v322, v323);
  v281 = (char *)v320[1];
  if (v320[1])
  {
    v282 = (char *)v321;
    v283 = v320[1];
    if ((void *)v321 != v320[1])
    {
      do
        webrtc::LegacyStatsCollector::TransportStats::~TransportStats((webrtc::LegacyStatsCollector::TransportStats *)(v282 - 88));
      while (v282 != v281);
      v283 = v320[1];
    }
    *(_QWORD *)&v321 = v281;
    operator delete(v283);
  }
  v284 = (void **)v319[0];
  if (v319[0])
  {
    v285 = (void **)v319[1];
    v286 = v319[0];
    if (v319[1] != v319[0])
    {
      do
        cricket::Candidate::~Candidate(v285 - 58);
      while (v285 != v284);
      v286 = v319[0];
    }
    v319[1] = v284;
    operator delete(v286);
  }
}

void webrtc::LegacyStatsCollector::ExtractBweInfo(webrtc::LegacyStatsCollector *this)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD v48[2];
  void *__p;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 424))(*((_QWORD *)this + 8)) != 5)
  {
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 8) + 584))(&v59);
    v56 = 0;
    v57 = 0;
    v54 = v59;
    v55 = v60;
    v58 = v61;
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 8) + 544))(&v52);
    __p = 0;
    v50 = 0;
    v51 = 0;
    v2 = v52;
    v3 = v53;
    if (v52 != v53)
    {
      v4 = 0;
      while (1)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v2 + 32))(*v2) != 1)
          goto LABEL_7;
        v6 = *(_QWORD *)(*(_QWORD *)(*v2 + 16) + 160);
        if (!v6)
          goto LABEL_7;
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
        v8 = v7;
        if (v4 < v51)
        {
          if (!v4)
            goto LABEL_58;
          *(_QWORD *)v4 = v7;
          v5 = v4 + 8;
          goto LABEL_6;
        }
        v9 = (char *)__p;
        v10 = v4 - (_BYTE *)__p;
        v11 = (v4 - (_BYTE *)__p) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_59;
        v13 = v51 - (_BYTE *)__p;
        if ((v51 - (_BYTE *)__p) >> 2 > v12)
          v12 = v13 >> 2;
        v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
        v15 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v14)
          v15 = v12;
        if (!v15)
        {
LABEL_58:
          __break(1u);
LABEL_59:
          abort();
        }
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v16 = 8 * v15;
        v17 = operator new(8 * v15);
        v18 = (uint64_t *)&v17[8 * v11];
        *v18 = v8;
        v5 = v18 + 1;
        if (v4 != v9)
          break;
LABEL_34:
        __p = v18;
        v50 = v5;
        v51 = &v17[v16];
        if (v4)
          operator delete(v4);
LABEL_6:
        v50 = v5;
        v4 = (char *)v5;
LABEL_7:
        if (++v2 == (_QWORD *)v3)
        {
          if (__p != v4)
          {
            v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 528))(*((_QWORD *)this + 8));
            v48[0] = &__p;
            v48[1] = &v54;
            (*(void (**)(uint64_t, _QWORD *, uint64_t ***(*)(uint64_t ***), char *))(*(_QWORD *)v33 + 96))(v33, v48, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::LegacyStatsCollector::ExtractBweInfo(void)::$_1>, &v47);
          }
          goto LABEL_38;
        }
      }
      v19 = v4 - v9 - 8;
      if (v19 >= 0x168)
      {
        v21 = (v4 - 8 - v9) & 0xFFFFFFFFFFFFFFF8;
        v22 = (unint64_t)&v17[v10 - 8];
        v23 = v22 - v21;
        v24 = (unint64_t)&v4[-v21 - 8];
        if (v23 > v22 || v24 > (unint64_t)(v4 - 8))
        {
          v20 = v4;
        }
        else if ((unint64_t)(&v4[-v10] - v17) >= 0x20)
        {
          v26 = (v19 >> 3) + 1;
          v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
          v20 = &v4[-v27];
          v18 = (uint64_t *)((char *)v18 - v27);
          v28 = &v17[8 * v11 - 16];
          v29 = v4 - 16;
          v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v31 = *(_OWORD *)v29;
            *(v28 - 1) = *((_OWORD *)v29 - 1);
            *v28 = v31;
            v28 -= 2;
            v29 -= 32;
            v30 -= 4;
          }
          while (v30);
          if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_33;
        }
        else
        {
          v20 = v4;
        }
      }
      else
      {
        v20 = v4;
      }
      do
      {
        v32 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *--v18 = v32;
      }
      while (v20 != v9);
LABEL_33:
      v4 = v9;
      goto LABEL_34;
    }
LABEL_38:
    v34 = (unsigned int *)operator new();
    *(_QWORD *)v34 = off_24C0B5AE0;
    v35 = v34 + 3;
    *((_QWORD *)v34 + 1) = 4;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    v37 = (char *)this + 8;
    v38 = *((_QWORD *)this + 2);
    if ((webrtc::LegacyStatsCollector *)v38 == (webrtc::LegacyStatsCollector *)((char *)this + 8))
      goto LABEL_43;
    while (((*(uint64_t (**)(_QWORD, unsigned int *))(***(_QWORD ***)(v38 + 16) + 40))(**(_QWORD **)(v38 + 16), v34) & 1) == 0)
    {
      v38 = *(_QWORD *)(v38 + 8);
      if ((char *)v38 == v37)
        goto LABEL_43;
    }
    if ((char *)v38 == v37 || (v39 = *(_QWORD **)(v38 + 16)) == 0)
    {
LABEL_43:
      v39 = (_QWORD *)operator new();
      *v39 = v34;
      (**(void (***)(unsigned int *))v34)(v34);
      v39[4] = 0;
      v39[3] = 0;
      v39[1] = 0;
      v39[2] = v39 + 3;
      v40 = operator new(0x18uLL);
      v40[1] = v37;
      v40[2] = v39;
      v41 = *((_QWORD *)this + 1);
      *v40 = v41;
      *(_QWORD *)(v41 + 8) = v40;
      *((_QWORD *)this + 1) = v40;
      ++*((_QWORD *)this + 3);
    }
    v39[1] = *((_QWORD *)this + 10);
    webrtc::StatsReport::AddInt(v39, 40, v54);
    webrtc::StatsReport::AddInt(v39, 39, v55);
    webrtc::StatsReport::AddInt(v39, 133, v56);
    webrtc::StatsReport::AddInt(v39, 37, SHIDWORD(v56));
    webrtc::StatsReport::AddInt(v39, 125, v57);
    webrtc::StatsReport::AddInt(v39, 136, SHIDWORD(v57));
    webrtc::StatsReport::AddInt64(v39, 43, v58);
    (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
    if (__p)
    {
      v50 = __p;
      operator delete(__p);
    }
    v42 = (char *)v52;
    if (v52)
    {
      v43 = v53;
      v44 = v52;
      if (v53 != v52)
      {
        do
        {
          v46 = *((_QWORD *)v43 - 1);
          v43 -= 8;
          v45 = v46;
          if (v46)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        }
        while (v43 != v42);
        v44 = v52;
      }
      v53 = v42;
      operator delete(v44);
    }
  }
}

void webrtc::LegacyStatsCollector::ExtractMediaInfo(unint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  _BYTE *v4;
  char *v5;
  char *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  char *v16;
  const std::string::value_type *v17;
  size_t v18;
  const std::string::value_type *v19;
  std::string *v20;
  size_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  char *v27;
  char *v28;
  size_t v29;
  const std::string::value_type *v30;
  const std::string::value_type *v31;
  size_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void (***v36)(_QWORD);
  _QWORD *v37;
  void **v38;
  _QWORD *v39;
  unsigned int v40;
  unsigned int v41;
  char *v42;
  char **v43;
  char **v44;
  unsigned int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  _BYTE *v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t *v72;
  int64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  char *v77;
  unint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  rtc::Thread *v93;
  _BYTE *v94;
  char v95;
  uint64_t *v96;
  char *v97;
  int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  std::string::size_type v105;
  std::string *v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  BOOL v110;
  uint64_t v111;
  std::string *v112;
  unsigned int *v113;
  unsigned int v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  int *v118;
  int v119;
  BOOL v120;
  uint64_t *v121;
  uint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  std::string::size_type v126;
  int v127;
  char *v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  BOOL v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  _BYTE *v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  char *v157;
  char v158;
  char *v160;
  _BYTE *v161;
  uint64_t v162;
  void *v163;
  char *v164;
  void *v165;
  char *v166;
  char *v167;
  std::string v168;
  char __str[8];
  std::string __p[4];
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v3 = (rtc::Thread *)(*(_QWORD *(**)(void **__return_ptr))(**(_QWORD **)(a1 + 64) + 544))(&v163);
  v4 = rtc::Thread::Current(v3);
  v152 = v4[217];
  v153 = v4;
  v4[217] = 0;
  v5 = (char *)v163;
  v157 = v164;
  if (v163 != v164)
  {
    v154 = a2;
    while (1)
    {
      v7 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 160);
      if (!v7)
        goto LABEL_6;
      v8 = (*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      v9 = *v7;
      if (v8)
      {
        v10 = (*(uint64_t (**)(uint64_t *))(v9 + 24))(v7);
        v11 = operator new();
        *(_QWORD *)(v11 + 64) = 0;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_QWORD *)(v11 + 56) = v11 + 64;
        *(_QWORD *)(v11 + 88) = 0;
        *(_QWORD *)(v11 + 72) = 0;
        *(_QWORD *)(v11 + 80) = v11 + 88;
        *(_QWORD *)v11 = off_24C0B5A70;
        *(_QWORD *)(v11 + 96) = 0;
        *(_QWORD *)(v11 + 104) = v10;
        *(_QWORD *)(v11 + 192) = 0;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_QWORD *)(v11 + 176) = 0;
        *(_QWORD *)(v11 + 184) = v11 + 192;
        *(_QWORD *)(v11 + 224) = 0;
        *(_QWORD *)(v11 + 216) = 0;
        *(_QWORD *)(v11 + 200) = 0;
        *(_QWORD *)(v11 + 208) = v11 + 216;
      }
      else
      {
        v12 = (*(uint64_t (**)(uint64_t *))(v9 + 32))(v7);
        v11 = operator new();
        *(_QWORD *)(v11 + 64) = 0;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_QWORD *)(v11 + 56) = v11 + 64;
        *(_QWORD *)(v11 + 88) = 0;
        *(_QWORD *)(v11 + 72) = 0;
        *(_QWORD *)(v11 + 80) = v11 + 88;
        *(_QWORD *)v11 = off_24C0B5A00;
        *(_QWORD *)(v11 + 168) = 0;
        *(_QWORD *)(v11 + 96) = 0;
        *(_QWORD *)(v11 + 104) = v12;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_QWORD *)(v11 + 160) = v11 + 168;
        *(_QWORD *)(v11 + 200) = 0;
        *(_QWORD *)(v11 + 192) = 0;
        *(_QWORD *)(v11 + 176) = 0;
        *(_QWORD *)(v11 + 184) = v11 + 192;
        *(_DWORD *)(v11 + 208) = 0;
      }
      v13 = (*(uint64_t (**)(uint64_t *))(*v7 + 96))(v7);
      if (v11 + 8 == v13)
        goto LABEL_23;
      v14 = *(_BYTE *)(v13 + 23);
      if (*(char *)(v11 + 31) < 0)
        break;
      if ((*(_BYTE *)(v13 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)(v11 + 8), *(char **)v13, *(_QWORD *)(v13 + 8));
        v16 = (char *)*std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a2, __str, (const void **)(v11 + 8));
        if (!v16)
          goto LABEL_227;
      }
      else
      {
        v15 = *(_OWORD *)v13;
        *(_QWORD *)(v11 + 24) = *(_QWORD *)(v13 + 16);
        *(_OWORD *)(v11 + 8) = v15;
        v16 = (char *)*std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a2, __str, (const void **)(v11 + 8));
        if (!v16)
          goto LABEL_227;
      }
LABEL_24:
      v19 = v16 + 56;
      v20 = (std::string *)(v11 + 32);
      if ((char *)(v11 + 32) == v16 + 56)
        goto LABEL_38;
      v21 = v16[79];
      if (*(char *)(v11 + 55) < 0)
      {
        v30 = (const std::string::value_type *)*((_QWORD *)v16 + 7);
        v29 = *((_QWORD *)v16 + 8);
        if ((v21 & 0x80u) == 0)
          v31 = v19;
        else
          v31 = v30;
        if ((v21 & 0x80u) == 0)
          v32 = v21;
        else
          v32 = v29;
        std::string::__assign_no_alias<false>(v20, v31, v32);
LABEL_38:
        v160 = v5;
        v33 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v24 = *(_QWORD *)(v33 + 32);
        v25 = *(_QWORD *)(v33 + 40);
        v26 = v25 - v24;
        if (v25 == v24)
          goto LABEL_28;
        goto LABEL_39;
      }
      if ((v21 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v20, *((char **)v16 + 7), *((_QWORD *)v16 + 8));
        v160 = v5;
        v90 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v24 = *(_QWORD *)(v90 + 32);
        v25 = *(_QWORD *)(v90 + 40);
        v26 = v25 - v24;
        if (v25 == v24)
        {
LABEL_28:
          v6 = v166;
          v27 = v167;
          if (v166 < v167)
            goto LABEL_29;
          goto LABEL_103;
        }
      }
      else
      {
        v22 = *(_OWORD *)v19;
        *(_QWORD *)(v11 + 48) = *((_QWORD *)v16 + 9);
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v22;
        v160 = v5;
        v23 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v24 = *(_QWORD *)(v23 + 32);
        v25 = *(_QWORD *)(v23 + 40);
        v26 = v25 - v24;
        if (v25 == v24)
          goto LABEL_28;
      }
LABEL_39:
      if ((v26 & 0x8000000000000000) != 0)
        goto LABEL_227;
      v34 = operator new(v26);
      v35 = 0;
      do
      {
        v36 = *(void (****)(_QWORD))(v24 + v35);
        v34[(unint64_t)v35 / 8] = v36;
        if (v36)
          (**v36)(v36);
        v35 += 8;
      }
      while (v24 + v35 != v25);
      if (v35)
      {
        v156 = v35 >> 3;
        v37 = (_QWORD *)((char *)v34 + (v35 & 0xFFFFFFFFFFFFFFF8));
        v38 = (void **)(v11 + 64);
        v39 = v34;
        while (1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v39 + 40))(&v162);
          if (v162)
          {
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v162 + 40))(&v168);
          }
          else
          {
            *((_BYTE *)&v168.__r_.__value_.__s + 23) = 0;
            v168.__r_.__value_.__s.__data_[0] = 0;
          }
          v40 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v39 + 56))(*v39);
          *(_DWORD *)__str = v40;
          if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            break;
          std::string::__init_copy_ctor_external(__p, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
          v41 = *(_DWORD *)__str;
          v42 = (char *)*v38;
          v43 = (char **)(v11 + 64);
          v44 = (char **)(v11 + 64);
          if (!*v38)
            goto LABEL_60;
          while (1)
          {
LABEL_56:
            while (1)
            {
              v44 = (char **)v42;
              v45 = *((_DWORD *)v42 + 8);
              if (v41 >= v45)
                break;
              v42 = *v44;
              v43 = v44;
              if (!*v44)
                goto LABEL_60;
            }
            if (v45 >= v41)
              break;
            v42 = v44[1];
            if (!v42)
            {
              v43 = v44 + 1;
              goto LABEL_60;
            }
          }
LABEL_85:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p[0].__r_.__value_.__l.__data_);
            if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_87:
              v60 = v162;
              if (!v162)
                goto LABEL_46;
LABEL_91:
              (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
              goto LABEL_46;
            }
          }
          else if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_87;
          }
          operator delete(v168.__r_.__value_.__l.__data_);
          v60 = v162;
          if (v162)
            goto LABEL_91;
LABEL_46:
          if (++v39 == v37)
          {
            a2 = v154;
            v62 = v156;
            do
            {
              v63 = v34[v62 - 1];
              if (v63)
                (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
              --v62;
            }
            while (v62 * 8);
            goto LABEL_102;
          }
        }
        v41 = v40;
        __p[0] = v168;
        v42 = (char *)*v38;
        v43 = (char **)(v11 + 64);
        v44 = (char **)(v11 + 64);
        if (*v38)
          goto LABEL_56;
LABEL_60:
        v46 = (char *)operator new(0x40uLL);
        *((_DWORD *)v46 + 8) = v41;
        *(std::string *)(v46 + 40) = __p[0];
        memset(__p, 0, 24);
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
        *((_QWORD *)v46 + 2) = v44;
        *v43 = v46;
        v47 = **(_QWORD **)(v11 + 56);
        if (v47)
        {
          *(_QWORD *)(v11 + 56) = v47;
          v46 = *v43;
        }
        v48 = *v38;
        v110 = v46 == *v38;
        v46[24] = v110;
        if (!v110)
        {
          do
          {
            v49 = *((_QWORD *)v46 + 2);
            if (*(_BYTE *)(v49 + 24))
              break;
            v50 = *(_BYTE **)(v49 + 16);
            v51 = *(_QWORD *)v50;
            if (*(_QWORD *)v50 == v49)
            {
              v54 = *((_QWORD *)v50 + 1);
              if (!v54 || (v55 = *(unsigned __int8 *)(v54 + 24), v52 = (_BYTE *)(v54 + 24), v55))
              {
                if (*(char **)v49 == v46)
                {
                  *(_BYTE *)(v49 + 24) = 1;
                  v50[24] = 0;
                  v58 = *(_QWORD *)(v49 + 8);
                  *(_QWORD *)v50 = v58;
                  if (v58)
                    goto LABEL_77;
                }
                else
                {
                  v56 = *(uint64_t **)(v49 + 8);
                  v57 = *v56;
                  *(_QWORD *)(v49 + 8) = *v56;
                  if (v57)
                  {
                    *(_QWORD *)(v57 + 16) = v49;
                    v50 = *(_BYTE **)(v49 + 16);
                  }
                  v56[2] = (uint64_t)v50;
                  *(_QWORD *)(*(_QWORD *)(v49 + 16) + 8 * (**(_QWORD **)(v49 + 16) != v49)) = v56;
                  *v56 = v49;
                  *(_QWORD *)(v49 + 16) = v56;
                  v50 = (_BYTE *)v56[2];
                  v49 = *(_QWORD *)v50;
                  *((_BYTE *)v56 + 24) = 1;
                  v50[24] = 0;
                  v58 = *(_QWORD *)(v49 + 8);
                  *(_QWORD *)v50 = v58;
                  if (v58)
LABEL_77:
                    *(_QWORD *)(v58 + 16) = v50;
                }
                *(_QWORD *)(v49 + 16) = *((_QWORD *)v50 + 2);
                *(_QWORD *)(*((_QWORD *)v50 + 2) + 8 * (**((_QWORD **)v50 + 2) != (_QWORD)v50)) = v49;
                *(_QWORD *)(v49 + 8) = v50;
LABEL_83:
                *((_QWORD *)v50 + 2) = v49;
                break;
              }
            }
            else if (!v51 || (v53 = *(unsigned __int8 *)(v51 + 24), v52 = (_BYTE *)(v51 + 24), v53))
            {
              if (*(char **)v49 == v46)
              {
                v61 = *((_QWORD *)v46 + 1);
                *(_QWORD *)v49 = v61;
                if (v61)
                {
                  *(_QWORD *)(v61 + 16) = v49;
                  v50 = *(_BYTE **)(v49 + 16);
                }
                *((_QWORD *)v46 + 2) = v50;
                *(_QWORD *)(*(_QWORD *)(v49 + 16) + 8 * (**(_QWORD **)(v49 + 16) != v49)) = v46;
                *((_QWORD *)v46 + 1) = v49;
                *(_QWORD *)(v49 + 16) = v46;
                v50 = (_BYTE *)*((_QWORD *)v46 + 2);
                v46[24] = 1;
                v50[24] = 0;
                v49 = *((_QWORD *)v50 + 1);
                v59 = *(char **)v49;
                *((_QWORD *)v50 + 1) = *(_QWORD *)v49;
                if (v59)
LABEL_81:
                  *((_QWORD *)v59 + 2) = v50;
              }
              else
              {
                *(_BYTE *)(v49 + 24) = 1;
                v50[24] = 0;
                v49 = *((_QWORD *)v50 + 1);
                v59 = *(char **)v49;
                *((_QWORD *)v50 + 1) = *(_QWORD *)v49;
                if (v59)
                  goto LABEL_81;
              }
              *(_QWORD *)(v49 + 16) = *((_QWORD *)v50 + 2);
              *(_QWORD *)(*((_QWORD *)v50 + 2) + 8 * (**((_QWORD **)v50 + 2) != (_QWORD)v50)) = v49;
              *(_QWORD *)v49 = v50;
              goto LABEL_83;
            }
            *(_BYTE *)(v49 + 24) = 1;
            v46 = v50;
            v50[24] = v50 == v48;
            *v52 = 1;
          }
          while (v50 != v48);
        }
        ++*(_QWORD *)(v11 + 72);
        goto LABEL_85;
      }
LABEL_102:
      operator delete(v34);
      v6 = v166;
      v27 = v167;
      if (v166 < v167)
      {
LABEL_29:
        if (!v6)
          goto LABEL_226;
        *(_QWORD *)v6 = v11;
        v28 = v6 + 8;
        v5 = v160;
        goto LABEL_5;
      }
LABEL_103:
      v64 = (char *)v165;
      v65 = v6 - (_BYTE *)v165;
      v66 = (v6 - (_BYTE *)v165) >> 3;
      v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v68 = v27 - (_BYTE *)v165;
      if (v68 >> 2 > v67)
        v67 = v68 >> 2;
      v79 = (unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8;
      v69 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v79)
        v69 = v67;
      if (!v69)
      {
LABEL_226:
        __break(1u);
LABEL_227:
        abort();
      }
      if (v69 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v70 = 8 * v69;
      v71 = (char *)operator new(8 * v69);
      v72 = (uint64_t *)&v71[8 * v66];
      *v72 = v11;
      v28 = (char *)(v72 + 1);
      v73 = v6 - v64;
      if (v6 == v64)
      {
        v165 = &v71[8 * v66];
        v167 = &v71[v70];
        v5 = v160;
        if (!v6)
          goto LABEL_5;
        goto LABEL_4;
      }
      v74 = v73 - 8;
      if ((unint64_t)(v73 - 8) >= 0x78)
      {
        v76 = (v6 - 8 - v64) & 0xFFFFFFFFFFFFFFF8;
        v77 = &v6[-v76 - 8];
        v78 = (unint64_t)&v71[v65 - v76 - 8];
        v79 = v77 >= (char *)v72 || v78 >= (unint64_t)v6;
        v75 = v6;
        v5 = v160;
        if (v79)
        {
          v80 = (v74 >> 3) + 1;
          v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
          v75 = &v6[-v81];
          v72 = (uint64_t *)((char *)v72 - v81);
          v82 = &v71[8 * v66 - 16];
          v83 = v6 - 16;
          v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v86 = *((_OWORD *)v83 - 1);
            v85 = *(_OWORD *)v83;
            *((_OWORD *)v83 - 1) = 0uLL;
            *(_OWORD *)v83 = 0uLL;
            *((_OWORD *)v82 - 1) = v86;
            *(_OWORD *)v82 = v85;
            v82 -= 32;
            v83 -= 32;
            v84 -= 4;
          }
          while (v84);
          if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_124;
        }
      }
      else
      {
        v75 = v6;
        v5 = v160;
      }
      do
      {
        v87 = *((_QWORD *)v75 - 1);
        v75 -= 8;
        *(_QWORD *)v75 = 0;
        *--v72 = v87;
      }
      while (v75 != v64);
LABEL_124:
      v165 = v72;
      v166 = v28;
      v167 = &v71[v70];
      do
      {
        v89 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        v88 = v89;
        *(_QWORD *)v6 = 0;
        if (v89)
          (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
      }
      while (v6 != v64);
      v6 = v64;
      if (!v64)
        goto LABEL_5;
LABEL_4:
      operator delete(v6);
LABEL_5:
      v166 = v28;
LABEL_6:
      v5 += 8;
      if (v5 == v157)
        goto LABEL_132;
    }
    if (v14 >= 0)
      v17 = (const std::string::value_type *)v13;
    else
      v17 = *(const std::string::value_type **)v13;
    if (v14 >= 0)
      v18 = *(unsigned __int8 *)(v13 + 23);
    else
      v18 = *(_QWORD *)(v13 + 8);
    std::string::__assign_no_alias<false>((std::string *)(v11 + 8), v17, v18);
LABEL_23:
    v16 = (char *)*std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a2, __str, (const void **)(v11 + 8));
    if (!v16)
      goto LABEL_227;
    goto LABEL_24;
  }
LABEL_132:
  v153[217] = v152;
  v91 = a1;
  v92 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 528))(*(_QWORD *)(a1 + 64));
  *(_QWORD *)__str = &v163;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
  v93 = (rtc::Thread *)(*(uint64_t (**)(uint64_t, char *, void (*)(rtc::Thread *), std::string *))(*(_QWORD *)v92 + 96))(v92, __str, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::LegacyStatsCollector::ExtractMediaInfo(std::map<std::string,std::string> const&)::$_1>, &v168);
  v94 = rtc::Thread::Current(v93);
  v95 = v94[217];
  v94[217] = 0;
  v96 = (uint64_t *)v165;
  v97 = v166;
  v161 = v94;
  v158 = v95;
  v98 = 0;
  if (v165 != v166)
  {
    do
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)*v96 + 24))(*v96, a1);
      v99 = *v96++;
      v98 |= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 32))(v99);
    }
    while (v96 != (uint64_t *)v97);
  }
  v100 = *(uint64_t **)(a1 + 96);
  v101 = *(uint64_t **)(a1 + 104);
  if (v100 != v101)
  {
    v102 = a1 + 8;
    v155 = v98 & 1;
    do
    {
      v103 = *v100;
      v104 = snprintf(__str, 0x20uLL, "%u", *((_DWORD *)v100 + 2));
      if (v104 < 0)
        goto LABEL_227;
      v105 = v104;
      if (v104 > 0x16)
      {
        v107 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v104 | 7) != 0x17)
          v107 = v104 | 7;
        v108 = v107 + 1;
        v106 = (std::string *)operator new(v107 + 1);
        v168.__r_.__value_.__l.__size_ = v105;
        v168.__r_.__value_.__r.__words[2] = v108 | 0x8000000000000000;
        v168.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
      }
      else
      {
        *((_BYTE *)&v168.__r_.__value_.__s + 23) = v104;
        v106 = &v168;
      }
      v109 = (char *)v106 + v105;
      v110 = v106 > (std::string *)__str || (char *)v106 + v105 <= __str;
      if (!v110)
        goto LABEL_226;
      if ((_DWORD)v105)
        memcpy(v106, __str, v105);
      *v109 = 0;
      v111 = operator new();
      *(_DWORD *)(v111 + 8) = 5;
      *(_QWORD *)v111 = &unk_24C0B5B70;
      v112 = (std::string *)(v111 + 16);
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v112, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v112->__r_.__value_.__l.__data_ = *(_OWORD *)&v168.__r_.__value_.__l.__data_;
        *(_QWORD *)(v111 + 32) = *((_QWORD *)&v168.__r_.__value_.__l + 2);
      }
      *(_QWORD *)v111 = off_24C0B5BF8;
      *(_DWORD *)(v111 + 44) = 0;
      v113 = (unsigned int *)(v111 + 44);
      *(_DWORD *)(v111 + 40) = 0;
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
      v115 = *(_QWORD *)(a1 + 16);
      if (v115 == v102)
        goto LABEL_162;
      while (((*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v115 + 16) + 40))(**(_QWORD **)(v115 + 16), v111) & 1) == 0)
      {
        v115 = *(_QWORD *)(v115 + 8);
        if (v115 == v102)
          goto LABEL_162;
      }
      if (v115 == v102)
      {
LABEL_162:
        v116 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
        if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_163:
          if (!v116)
            goto LABEL_196;
          goto LABEL_164;
        }
      }
      else
      {
        v116 = *(_QWORD **)(v115 + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
        if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_163;
      }
      operator delete(v168.__r_.__value_.__l.__data_);
      if (!v116)
      {
LABEL_196:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          v91 = v91 & 0xFFFFFFFF00000000 | 0x2A9B;
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v135, v136, v137, v138, v139, v140, v141, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/legacy_stats_collector.cc");
        }
        goto LABEL_136;
      }
LABEL_164:
      v117 = v116[3];
      if (!v117)
        goto LABEL_136;
      v118 = (int *)(v116 + 3);
      do
      {
        v119 = *(_DWORD *)(v117 + 32);
        v120 = v119 < 135;
        if (v119 >= 135)
          v121 = (uint64_t *)v117;
        else
          v121 = (uint64_t *)(v117 + 8);
        if (!v120)
          v118 = (int *)v117;
        v117 = *v121;
      }
      while (*v121);
      if (v118 == (int *)(v116 + 3))
        goto LABEL_136;
      if (v118[8] > 135)
        goto LABEL_136;
      v122 = *((_QWORD *)v118 + 5);
      if (!v122)
        goto LABEL_136;
      v123 = *(unsigned __int8 **)(v122 + 16);
      (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v103 + 40))(__str, v103);
      v124 = v123[23];
      if ((v124 & 0x80u) == 0)
        v125 = v123[23];
      else
        v125 = *((_QWORD *)v123 + 1);
      v126 = __p[0].__r_.__value_.__s.__data_[15];
      v127 = __p[0].__r_.__value_.__s.__data_[15];
      if (__p[0].__r_.__value_.__s.__data_[15] < 0)
        v126 = __p[0].__r_.__value_.__r.__words[0];
      if (v125 == v126)
      {
        if (__p[0].__r_.__value_.__s.__data_[15] >= 0)
          v128 = __str;
        else
          v128 = *(char **)__str;
        if ((v124 & 0x80) != 0)
        {
          v133 = memcmp(*(const void **)v123, v128, *((_QWORD *)v123 + 1)) != 0;
          if ((v127 & 0x80000000) == 0)
            goto LABEL_193;
        }
        else if (v123[23])
        {
          v129 = v124 - 1;
          do
          {
            v131 = *v123++;
            v130 = v131;
            v132 = *v128++;
            v133 = v130 != v132;
          }
          while (v130 == v132 && v129-- != 0);
          if ((__p[0].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
          {
LABEL_193:
            if (!v133)
              goto LABEL_200;
            goto LABEL_136;
          }
        }
        else
        {
          v133 = 0;
          if ((__p[0].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
            goto LABEL_193;
        }
      }
      else
      {
        v133 = 1;
        if ((__p[0].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
          goto LABEL_193;
      }
      operator delete(*(void **)__str);
      if (!v133)
      {
LABEL_200:
        v116[1] = *(_QWORD *)(a1 + 80);
        LODWORD(v162) = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v103 + 96))(v103, &v162))
          webrtc::StatsReport::AddInt(v116, 2, v162);
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v103 + 104))(&v168, v103);
        if (v168.__r_.__value_.__r.__words[0])
        {
          (*(void (**)(char *__return_ptr, std::string::size_type, _QWORD))(*(_QWORD *)v168.__r_.__value_.__l.__data_
                                                                                     + 32))(__str, v168.__r_.__value_.__r.__words[0], v155);
          if (v168.__r_.__value_.__r.__words[0])
            (*(void (**)(std::string::size_type))(*(_QWORD *)v168.__r_.__value_.__l.__data_ + 8))(v168.__r_.__value_.__r.__words[0]);
        }
      }
LABEL_136:
      v100 += 2;
    }
    while (v100 != v101);
  }
  v161[217] = v158;
  v142 = (char *)v163;
  if (v163)
  {
    v143 = v164;
    v144 = v163;
    if (v164 != v163)
    {
      do
      {
        v146 = *((_QWORD *)v143 - 1);
        v143 -= 8;
        v145 = v146;
        if (v146)
          (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
      }
      while (v143 != v142);
      v144 = v163;
    }
    v164 = v142;
    operator delete(v144);
  }
  v147 = (char *)v165;
  if (v165)
  {
    v148 = v166;
    v149 = v165;
    if (v166 != v165)
    {
      do
      {
        v151 = *((_QWORD *)v148 - 1);
        v148 -= 8;
        v150 = v151;
        *(_QWORD *)v148 = 0;
        if (v151)
          (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
      }
      while (v148 != v147);
      v149 = v165;
    }
    v166 = v147;
    operator delete(v149);
  }
}

void webrtc::LegacyStatsCollector::ExtractSenderInfo(webrtc::LegacyStatsCollector *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  unsigned __int8 *p_p;
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  int v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  unsigned int *v22;
  unsigned int v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35[2];
  unint64_t v36;
  int v37[2];
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  void *__p;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 8) + 128))(&v39);
  v2 = v39;
  v3 = v40;
  if (v39 != v40)
  {
    v4 = (char *)this + 8;
    while (1)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v2 + 56))(*v2))
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v2 + 40))(&v38);
        if (v38)
          break;
      }
LABEL_3:
      if (++v2 == v3)
      {
        v2 = v39;
        goto LABEL_54;
      }
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v38 + 32))(&__p);
    if ((char)v43 < 0)
    {
      v6 = v42;
      if (v42 < 0 || (p_p = (unsigned __int8 *)__p, v42) && !__p)
      {
LABEL_63:
        __break(1u);
LABEL_64:
        abort();
      }
    }
    else
    {
      p_p = (unsigned __int8 *)&__p;
      v6 = v43;
    }
    if (v6 == 5)
    {
      v7 = *(_DWORD *)p_p;
      v8 = p_p[4];
      v10 = v7 == *(_DWORD *)"video" && v8 == cricket::kMediaTypeVideo[4];
      if ((v43 & 0x80) != 0)
      {
LABEL_23:
        operator delete(__p);
        if (!v10)
          goto LABEL_48;
LABEL_24:
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 88))(v38);
        if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v11 + 64))(v11, v37))
        {
          v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 56))(*v2);
          v13 = snprintf((char *)&__p, 0x20uLL, "%u", v12);
          if (v13 < 0)
            goto LABEL_64;
          v14 = v13;
          if (v13 > 0x16)
          {
            v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v13 | 7) != 0x17)
              v18 = v13 | 7;
            v19 = v18 + 1;
            v15 = (void **)operator new(v18 + 1);
            v35[1] = (void *)v14;
            v36 = v19 | 0x8000000000000000;
            v35[0] = v15;
            v16 = (char *)v15 + v14;
            v17 = (void **)((char *)v15 + v14) > &__p;
            if (v15 > &__p)
            {
LABEL_33:
              if ((_DWORD)v14)
                memcpy(v15, &__p, v14);
              *v16 = 0;
              v20 = operator new();
              *(_DWORD *)(v20 + 8) = 5;
              *(_QWORD *)v20 = &unk_24C0B5B70;
              v21 = (std::string *)(v20 + 16);
              if (SHIBYTE(v36) < 0)
              {
                std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)v35[0], (std::string::size_type)v35[1]);
                v24 = SHIBYTE(v36);
                *(_QWORD *)v20 = off_24C0B5BF8;
                *(_DWORD *)(v20 + 44) = 0;
                v25 = (unsigned int *)(v20 + 44);
                *(_DWORD *)(v20 + 40) = 0;
                do
                  v26 = __ldxr(v25);
                while (__stxr(v26 + 1, v25));
                if (v24 < 0)
                  operator delete(v35[0]);
              }
              else
              {
                *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)v35;
                *(_QWORD *)(v20 + 32) = v36;
                *(_QWORD *)v20 = off_24C0B5BF8;
                *(_DWORD *)(v20 + 44) = 0;
                v22 = (unsigned int *)(v20 + 44);
                *(_DWORD *)(v20 + 40) = 0;
                do
                  v23 = __ldxr(v22);
                while (__stxr(v23 + 1, v22));
              }
              v27 = *((_QWORD *)this + 2);
              if ((char *)v27 == v4)
                goto LABEL_46;
              while (((*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v27 + 16) + 40))(**(_QWORD **)(v27 + 16), v20) & 1) == 0)
              {
                v27 = *(_QWORD *)(v27 + 8);
                if ((char *)v27 == v4)
                  goto LABEL_46;
              }
              if ((char *)v27 == v4 || (v28 = *(_QWORD **)(v27 + 16)) == 0)
              {
LABEL_46:
                v28 = (_QWORD *)operator new();
                *v28 = v20;
                (**(void (***)(uint64_t))v20)(v20);
                v28[4] = 0;
                v28[3] = 0;
                v28[1] = 0;
                v28[2] = v28 + 3;
                v29 = operator new(0x18uLL);
                v29[1] = v4;
                v29[2] = v28;
                v30 = *((_QWORD *)this + 1);
                *v29 = v30;
                *(_QWORD *)(v30 + 8) = v29;
                *((_QWORD *)this + 1) = v29;
                ++*((_QWORD *)this + 3);
              }
              webrtc::StatsReport::AddInt(v28, 88, v37[0]);
              webrtc::StatsReport::AddInt(v28, 80, v37[1]);
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
              goto LABEL_48;
            }
          }
          else
          {
            HIBYTE(v36) = v13;
            v15 = v35;
            v16 = (char *)v35 + v14;
            v17 = (void **)((char *)v35 + v14) > &__p;
            if (v35 > &__p)
              goto LABEL_33;
          }
          if (v17)
            goto LABEL_63;
          goto LABEL_33;
        }
LABEL_48:
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        goto LABEL_3;
      }
    }
    else
    {
      v10 = 0;
      if ((v43 & 0x80) != 0)
        goto LABEL_23;
    }
    if (!v10)
      goto LABEL_48;
    goto LABEL_24;
  }
LABEL_54:
  if (v2)
  {
    v31 = v40;
    v32 = v2;
    if (v40 != v2)
    {
      do
      {
        v34 = *--v31;
        v33 = v34;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      }
      while (v31 != v2);
      v32 = v39;
    }
    v40 = v2;
    operator delete(v32);
  }
}

_QWORD *webrtc::LegacyStatsCollector::PrepareReport(_QWORD *a1, int a2, unsigned int a3, uint64_t a4, _QWORD *a5, int a6)
{
  int v11;
  int v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  std::string *v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  unint64_t v34;
  char __str[32];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v11 = 5;
  else
    v11 = 6;
  v12 = snprintf(__str, 0x20uLL, "%u", a3);
  if (v12 < 0)
LABEL_37:
    abort();
  v13 = v12;
  if (v12 > 0x16)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = (char *)operator new(v15 + 1);
    __p[1] = (void *)v13;
    v34 = v16 | 0x8000000000000000;
    __p[0] = v14;
  }
  else
  {
    HIBYTE(v34) = v12;
    v14 = (char *)__p;
  }
  v17 = &v14[v13];
  if (v14 <= __str && &v14[v13] > __str)
  {
    __break(1u);
    goto LABEL_37;
  }
  if ((_DWORD)v13)
    memcpy(v14, __str, v13);
  *v17 = 0;
  v19 = operator new();
  *(_DWORD *)(v19 + 8) = v11;
  *(_QWORD *)v19 = &unk_24C0B5B70;
  v20 = (std::string *)(v19 + 16);
  if (SHIBYTE(v34) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v23 = SHIBYTE(v34);
    *(_DWORD *)(v19 + 40) = a6;
    *(_QWORD *)v19 = off_24C0B5BF8;
    *(_DWORD *)(v19 + 44) = 0;
    v24 = (unsigned int *)(v19 + 44);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    if (v23 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(v19 + 32) = v34;
    *(_DWORD *)(v19 + 40) = a6;
    *(_QWORD *)v19 = off_24C0B5BF8;
    *(_DWORD *)(v19 + 44) = 0;
    v21 = (unsigned int *)(v19 + 44);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v26 = a1 + 1;
  v27 = a1[2];
  if ((_QWORD *)v27 == a1 + 1)
    goto LABEL_28;
  while (((*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v27 + 16) + 40))(**(_QWORD **)(v27 + 16), v19) & 1) == 0)
  {
    v27 = *(_QWORD *)(v27 + 8);
    if ((_QWORD *)v27 == v26)
      goto LABEL_28;
  }
  if ((_QWORD *)v27 == v26 || (v28 = *(_QWORD **)(v27 + 16)) == 0)
  {
LABEL_28:
    v28 = (_QWORD *)operator new();
    *v28 = v19;
    (**(void (***)(uint64_t))v19)(v19);
    v28[4] = 0;
    v28[3] = 0;
    v28[1] = 0;
    v28[2] = v28 + 3;
    v29 = operator new(0x18uLL);
    v29[1] = v26;
    v29[2] = v28;
    v30 = a1[1];
    *v29 = v30;
    *(_QWORD *)(v30 + 8) = v29;
    a1[1] = v29;
    ++a1[3];
  }
  v28[1] = a1[10];
  webrtc::StatsReport::AddInt64(v28, 21, a3);
  v31 = *(unsigned __int8 *)(a4 + 23);
  if ((v31 & 0x80u) != 0)
    v31 = *(_QWORD *)(a4 + 8);
  if (v31)
    webrtc::StatsReport::AddString((uint64_t)v28, 135, a4);
  webrtc::StatsReport::AddId((uint64_t)v28, 26, a5);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return v28;
}

_QWORD *webrtc::LegacyStatsCollector::AddCertificateReports(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = a2;
  v4 = 0;
  v5 = 0;
  v6 = (uint64_t *)(a1 + 8);
  do
  {
    v7 = operator new();
    *(_DWORD *)(v7 + 8) = 10;
    *(_QWORD *)v7 = &unk_24C0B5B70;
    v8 = (std::string *)(v7 + 16);
    if (*(char *)(v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
    }
    else
    {
      v9 = *(_OWORD *)v2;
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(v2 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
    }
    *(_QWORD *)v7 = off_24C0B5B28;
    *(_DWORD *)(v7 + 40) = 0;
    v10 = (unsigned int *)(v7 + 40);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v15 = v7;
    v12 = webrtc::StatsCollection::ReplaceOrAddNew(v6, &v15);
    v12[1] = *(_QWORD *)(a1 + 80);
    webrtc::StatsReport::AddString((uint64_t)v12, 75, v2);
    webrtc::StatsReport::AddString((uint64_t)v12, 76, v2 + 24);
    webrtc::StatsReport::AddString((uint64_t)v12, 67, v2 + 48);
    v13 = v12;
    if (v5)
    {
      webrtc::StatsReport::AddId(v4, 95, &v15);
      v13 = v5;
    }
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v2 = *(_QWORD *)(v2 + 72);
    v4 = (uint64_t)v12;
    v5 = v13;
  }
  while (v2);
  return v13;
}

_QWORD *webrtc::LegacyStatsCollector::AddCandidateReport(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unsigned int *v7;
  int v8;
  std::string *v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  char *v20;
  float v21;
  float v22;
  std::string __p;

  v6 = operator new();
  v7 = (unsigned int *)v6;
  if (a3)
    v8 = 8;
  else
    v8 = 9;
  *(_DWORD *)(v6 + 8) = v8;
  *(_QWORD *)v6 = &unk_24C0B5B70;
  v9 = (std::string *)(v6 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_QWORD *)v7 = off_24C0B5C40;
  v7[10] = 0;
  v10 = v7 + 10;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  v12 = a1 + 1;
  v13 = a1[2];
  if ((_QWORD *)v13 != a1 + 1)
  {
    while (((*(uint64_t (**)(_QWORD, unsigned int *))(***(_QWORD ***)(v13 + 16) + 40))(**(_QWORD **)(v13 + 16), v7) & 1) == 0)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if ((_QWORD *)v13 == v12)
        goto LABEL_12;
    }
    if ((_QWORD *)v13 != v12)
    {
      v14 = *(_QWORD **)(v13 + 16);
      if (v14)
      {
        v14[1] = a1[10];
        if (!a3)
          goto LABEL_37;
        goto LABEL_35;
      }
    }
  }
LABEL_12:
  v14 = (_QWORD *)operator new();
  *v14 = v7;
  (**(void (***)(unsigned int *))v7)(v7);
  v14[4] = 0;
  v14[3] = 0;
  v14[2] = v14 + 3;
  v15 = operator new(0x18uLL);
  v15[1] = v12;
  v15[2] = v14;
  v16 = a1[1];
  *v15 = v16;
  *(_QWORD *)(v16 + 8) = v15;
  a1[1] = v15;
  ++a1[3];
  v14[1] = a1[10];
  if (a3)
  {
    v17 = *(_DWORD *)(a2 + 240);
    if (v17 > 127)
    {
      if (v17 == 128 || v17 == 256 || v17 == 512)
LABEL_23:
        v18 = "wwan";
      else
LABEL_42:
        v18 = &byte_208EB9246;
    }
    else
    {
      v18 = "unknown";
      switch(v17)
      {
        case 0:
          break;
        case 1:
          v18 = "lan";
          break;
        case 2:
          v18 = "wlan";
          break;
        case 4:
        case 64:
          goto LABEL_23;
        case 8:
          v18 = "vpn";
          break;
        case 16:
          v18 = "loopback";
          break;
        case 32:
          v18 = "wildcard";
          break;
        default:
          goto LABEL_42;
      }
    }
    webrtc::StatsReport::AddString((uint64_t)v14, 46, v18);
  }
  rtc::IPAddress::ToString((rtc::IPAddress *)(a2 + 104), &__p);
  webrtc::StatsReport::AddString((uint64_t)v14, 45, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::to_string(&__p, *(unsigned __int16 *)(a2 + 136));
  webrtc::StatsReport::AddString((uint64_t)v14, 47, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  webrtc::StatsReport::AddInt(v14, 48, *(_DWORD *)(a2 + 152));
  v19 = *(int *)(a2 + 208);
  if (v19 >= 3)
  {
    if ((_DWORD)v19 == 3)
      v20 = "relayed";
    else
      v20 = "unknown";
  }
  else
  {
    v20 = off_24C0B5A98[v19];
  }
  webrtc::StatsReport::AddString((uint64_t)v14, 50, v20);
  webrtc::StatsReport::AddString((uint64_t)v14, 49, a2 + 32);
  v14[1] = a1[10];
  if (a3)
  {
LABEL_35:
    if (*(_BYTE *)(a2 + 456))
    {
      webrtc::StatsReport::AddInt64(v14, 32, *(int *)(a2 + 432));
      webrtc::StatsReport::AddInt64(v14, 33, *(int *)(a2 + 436));
      v21 = *(double *)(a2 + 440);
      webrtc::StatsReport::AddFloat(v14, 34, v21);
      v22 = *(double *)(a2 + 448);
      webrtc::StatsReport::AddFloat(v14, 35, v22);
    }
  }
LABEL_37:
  (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  return v14;
}

_QWORD *webrtc::`anonymous namespace'::SetAudioProcessingStats(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  float v4;
  float v5;
  float v6;

  v3 = result;
  if (*(_BYTE *)(a2 + 60))
    result = webrtc::StatsReport::AddInt(result, 69, *(_DWORD *)(a2 + 56));
  if (*(_BYTE *)(a2 + 68))
    result = webrtc::StatsReport::AddInt(v3, 70, *(_DWORD *)(a2 + 64));
  if (*(_BYTE *)(a2 + 16))
    result = webrtc::StatsReport::AddInt(v3, 71, (int)*(double *)(a2 + 8));
  if (*(_BYTE *)(a2 + 32))
    result = webrtc::StatsReport::AddInt(v3, 72, (int)*(double *)(a2 + 24));
  if (*(_BYTE *)(a2 + 80))
  {
    v4 = *(double *)(a2 + 72);
    result = webrtc::StatsReport::AddFloat(v3, 116, v4);
  }
  if (*(_BYTE *)(a2 + 96))
  {
    v5 = *(double *)(a2 + 88);
    result = webrtc::StatsReport::AddFloat(v3, 117, v5);
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v6 = *(double *)(a2 + 40);
    return webrtc::StatsReport::AddFloat(v3, 1, v6);
  }
  return result;
}

void webrtc::LegacyStatsCollector::TransportStats::~TransportStats(webrtc::LegacyStatsCollector::TransportStats *this)
{
  rtc::SSLCertificateStats *v2;
  rtc::SSLCertificateStats *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = (rtc::SSLCertificateStats *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
  {
    rtc::SSLCertificateStats::~SSLCertificateStats(v2);
    MEMORY[0x20BD0ADEC]();
  }
  v3 = (rtc::SSLCertificateStats *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    rtc::SSLCertificateStats::~SSLCertificateStats(v3);
    MEMORY[0x20BD0ADEC]();
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    v5 = *((_QWORD *)this + 7);
    v6 = (void *)*((_QWORD *)this + 6);
    if (v5 != v4)
    {
      do
        cricket::TransportChannelStats::~TransportChannelStats((void **)(v5 - 168));
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v4;
    operator delete(v6);
  }
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(*(void **)this);
    return;
  }
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    goto LABEL_14;
}

void webrtc::`anonymous namespace'::VoiceChannelStatsGatherer::~VoiceChannelStatsGatherer(webrtc::_anonymous_namespace_::VoiceChannelStatsGatherer *this)
{
  cricket::VoiceMediaInfo::~VoiceMediaInfo((char **)this + 14);
  *(_QWORD *)this = off_24C0B5A38;
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((char **)this + 11));
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((char **)this + 8));
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*((void **)this + 1));
    return;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    goto LABEL_5;
}

{
  cricket::VoiceMediaInfo::~VoiceMediaInfo((char **)this + 14);
  *(_QWORD *)this = off_24C0B5A38;
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((char **)this + 11));
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((char **)this + 8));
  if (*((char *)this + 55) < 0)
  {
    operator delete(*((void **)this + 4));
    if ((*((char *)this + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x20BD0ADECLL);
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*((void **)this + 1));
  goto LABEL_6;
}

uint64_t webrtc::`anonymous namespace'::VoiceChannelStatsGatherer::GetStatsOnWorkerThread(webrtc::_anonymous_namespace_::VoiceChannelStatsGatherer *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD v17[2];
  uint64_t *v18;
  _QWORD v19[2];
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v27 = 0;
  v28 = 0uLL;
  v30 = 0;
  v31 = 0;
  v29 = &v30;
  v21 = 0uLL;
  v24 = 0;
  v25 = 0;
  v22 = 0;
  v23 = &v24;
  v26 = 0;
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13));
  v3 = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v2 + 224))(v2, &v27);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 80))(*((_QWORD *)this + 13));
  v5 = v3 & (*(unsigned int (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v4 + 216))(v4, &v21, 1);
  if ((_DWORD)v5 == 1)
  {
    v6 = v27;
    v12 = v27;
    v7 = v28;
    v27 = 0;
    v28 = 0uLL;
    v13 = v7;
    v14 = v21;
    v8 = v22;
    v21 = 0uLL;
    v22 = 0;
    v15 = v8;
    v16 = v29;
    v17[0] = v30;
    v17[1] = v31;
    if (v31)
    {
      *(_QWORD *)(v30 + 16) = v17;
      v29 = &v30;
      v30 = 0;
      v31 = 0;
    }
    else
    {
      v16 = v17;
    }
    v18 = v23;
    v19[0] = v24;
    v19[1] = v25;
    if (v25)
    {
      *(_QWORD *)(v24 + 16) = v19;
      v23 = &v24;
      v24 = 0;
      v25 = 0;
      v9 = v26;
      v20 = v26;
      v10 = (uint64_t *)((char *)this + 112);
      if ((char **)((char *)this + 112) == &v12)
      {
LABEL_8:
        *((_DWORD *)this + 52) = v9;
        cricket::VoiceMediaInfo::~VoiceMediaInfo(&v12);
        goto LABEL_9;
      }
    }
    else
    {
      v18 = v19;
      v9 = v26;
      v20 = v26;
      v10 = (uint64_t *)((char *)this + 112);
      if ((char **)((char *)this + 112) == &v12)
        goto LABEL_8;
    }
    std::vector<cricket::VoiceSenderInfo>::__assign_with_size[abi:sn180100]<cricket::VoiceSenderInfo*,cricket::VoiceSenderInfo*>(v10, (uint64_t)v6, v7, 0x7D6343EB1A1F58D1 * ((uint64_t)(v7 - (_QWORD)v6) >> 3));
    std::vector<cricket::VoiceReceiverInfo>::__assign_with_size[abi:sn180100]<cricket::VoiceReceiverInfo*,cricket::VoiceReceiverInfo*>((uint64_t *)this + 17, v14, *((uint64_t *)&v14 + 1), 0xF83E0F83E0F83E1 * ((uint64_t)(*((_QWORD *)&v14 + 1) - v14) >> 4));
    std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>((uint64_t)this + 160, v16, v17);
    std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>((uint64_t)this + 184, v18, v19);
    v9 = v20;
    goto LABEL_8;
  }
LABEL_9:
  cricket::VoiceMediaReceiveInfo::~VoiceMediaReceiveInfo((char **)&v21);
  cricket::VoiceMediaSendInfo::~VoiceMediaSendInfo(&v27);
  return v5;
}

_QWORD *webrtc::`anonymous namespace'::VoiceChannelStatsGatherer::ExtractStats(webrtc::_anonymous_namespace_::VoiceChannelStatsGatherer *this, webrtc::LegacyStatsCollector *a2)
{
  uint64_t v4;
  std::string *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  float v15;
  float v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  unsigned int *v26;
  unsigned int v27;
  char *v28;
  char **v29;
  unsigned int v30;
  BOOL v31;
  char **v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  std::string *v47;
  unsigned int *v48;
  unsigned int v49;
  int v50;
  unsigned int *v51;
  unsigned int v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  std::string __p;

  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 2;
  *(_QWORD *)v4 = &unk_24C0B5CD0;
  v5 = (std::string *)(v4 + 16);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    *(_QWORD *)(v4 + 32) = *((_QWORD *)this + 6);
  }
  *(_QWORD *)v4 = off_24C0B5C88;
  v6 = (unsigned int *)(v4 + 44);
  *(_QWORD *)(v4 + 40) = 1;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v58 = v4;
  v8 = *((_QWORD *)this + 17);
  for (i = *((_QWORD *)this + 18); v8 != i; v8 += 528)
  {
    v10 = *(unsigned int **)(v8 + 160);
    if (*(unsigned int **)(v8 + 168) == v10)
      v11 = 0;
    else
      v11 = *v10;
    v12 = webrtc::LegacyStatsCollector::PrepareReport(a2, 1, v11, (uint64_t)&__p, &v58, 1);
    if (v12)
    {
      v13 = v12;
      v14 = *((unsigned __int8 *)a2 + 88);
      webrtc::StatsReport::AddString((uint64_t)v12, 52, v8 + 128);
      v15 = *(double *)(v8 + 360);
      v16 = *(double *)(v8 + 376);
      webrtc::StatsReport::AddFloat(v13, 74, *(float *)(v8 + 432));
      webrtc::StatsReport::AddFloat(v13, 127, *(float *)(v8 + 440));
      webrtc::StatsReport::AddFloat(v13, 128, *(float *)(v8 + 444));
      webrtc::StatsReport::AddFloat(v13, 130, *(float *)(v8 + 436));
      webrtc::StatsReport::AddFloat(v13, 36, *(float *)(v8 + 448));
      webrtc::StatsReport::AddFloat(v13, 109, *(float *)(v8 + 452));
      webrtc::StatsReport::AddFloat(v13, 23, v15);
      webrtc::StatsReport::AddFloat(v13, 24, v16);
      webrtc::StatsReport::AddInt(v13, 57, *(_DWORD *)(v8 + 352));
      webrtc::StatsReport::AddInt(v13, 59, *(_DWORD *)(v8 + 476));
      webrtc::StatsReport::AddInt(v13, 60, *(_DWORD *)(v8 + 460));
      webrtc::StatsReport::AddInt(v13, 61, *(_DWORD *)(v8 + 456));
      webrtc::StatsReport::AddInt(v13, 62, *(_DWORD *)(v8 + 484));
      webrtc::StatsReport::AddInt(v13, 63, *(_DWORD *)(v8 + 464));
      webrtc::StatsReport::AddInt(v13, 64, *(_DWORD *)(v8 + 468));
      webrtc::StatsReport::AddInt(v13, 66, *(_DWORD *)(v8 + 480));
      webrtc::StatsReport::AddInt(v13, 96, *(_DWORD *)(v8 + 344));
      webrtc::StatsReport::AddInt(v13, 97, *(_DWORD *)(v8 + 340));
      webrtc::StatsReport::AddInt(v13, 14, *(_DWORD *)(v8 + 20));
      webrtc::StatsReport::AddInt(v13, 15, *(_DWORD *)(v8 + 16));
      webrtc::StatsReport::AddInt(v13, 110, *(_DWORD *)(v8 + 348));
      v17 = *(_DWORD *)(v8 + 356);
      if ((v17 & 0x80000000) == 0)
        webrtc::StatsReport::AddInt(v13, 3, v17);
      v18 = *(_DWORD *)(v8 + 472);
      if (v18)
        webrtc::StatsReport::AddInt(v13, 65, v18);
      v19 = *(_QWORD *)(v8 + 8);
      if (v14)
        v19 = 0;
      webrtc::StatsReport::AddInt64(v13, 4, v19 + *(_QWORD *)v8);
      v20 = *(_QWORD *)(v8 + 488);
      if ((v20 & 0x8000000000000000) == 0)
        webrtc::StatsReport::AddInt64(v13, 44, v20);
      webrtc::StatsReport::AddString((uint64_t)v13, 13, "audio");
    }
    if (*(_QWORD *)(v8 + 184) != *(_QWORD *)(v8 + 192))
    {
      result = webrtc::LegacyStatsCollector::PrepareReport(a2, 0, v11, (uint64_t)&__p, &v58, 1);
      if (result)
      {
        v22 = *(_QWORD *)(v8 + 184);
        if (*(_QWORD *)(v8 + 192) == v22)
        {
LABEL_103:
          __break(1u);
          return result;
        }
        result[1] = *(_QWORD *)(v22 + 8);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v23 = *((_QWORD *)this + 14);
  v24 = *((_QWORD *)this + 15);
  if (v23 != v24)
  {
    v25 = (char **)((char *)this + 64);
    do
    {
      v26 = *(unsigned int **)(v23 + 112);
      if (*(unsigned int **)(v23 + 120) == v26)
      {
        v27 = 0;
        v28 = *v25;
        if (!*v25)
          goto LABEL_45;
      }
      else
      {
        v27 = *v26;
        v28 = *v25;
        if (!*v25)
          goto LABEL_45;
      }
      v29 = (char **)((char *)this + 64);
      do
      {
        v30 = *((_DWORD *)v28 + 8);
        v31 = v30 >= v27;
        if (v30 >= v27)
          v32 = (char **)v28;
        else
          v32 = (char **)(v28 + 8);
        if (v31)
          v29 = (char **)v28;
        v28 = *v32;
      }
      while (*v32);
      if (v29 != v25 && *((_DWORD *)v29 + 8) <= v27)
      {
        if (*((char *)v29 + 63) < 0)
          std::string::__init_copy_ctor_external(&__p, v29[5], (std::string::size_type)v29[6]);
        else
          __p = *(std::string *)(v29 + 5);
        goto LABEL_46;
      }
LABEL_45:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
LABEL_46:
      v33 = webrtc::LegacyStatsCollector::PrepareReport(a2, 1, v27, (uint64_t)&__p, &v58, 0);
      if (v33)
      {
        v34 = v33;
        v35 = *((unsigned __int8 *)a2 + 88);
        webrtc::StatsReport::AddString((uint64_t)v33, 52, v23 + 80);
        v36 = *(_QWORD *)(v23 + 8);
        if (v35)
          v36 = 0;
        webrtc::StatsReport::AddInt64(v34, 5, v36 + *(_QWORD *)v23);
        v37 = *(_QWORD *)(v23 + 72);
        if ((v37 & 0x8000000000000000) == 0)
          webrtc::StatsReport::AddInt64(v34, 126, v37);
        v38 = *(double *)(v23 + 208);
        v39 = *(double *)(v23 + 216);
        webrtc::StatsReport::AddFloat(v34, 23, v38);
        webrtc::StatsReport::AddFloat(v34, 24, v39);
        v40 = *(_DWORD *)(v23 + 204);
        if ((v40 & 0x80000000) == 0)
          webrtc::StatsReport::AddInt(v34, 2, v40);
        v41 = *(_DWORD *)(v23 + 200);
        if ((v41 & 0x80000000) == 0)
          webrtc::StatsReport::AddInt(v34, 97, v41);
        v42 = *(_DWORD *)(v23 + 64);
        if ((v42 & 0x80000000) == 0)
          webrtc::StatsReport::AddInt(v34, 14, v42);
        v43 = *(_DWORD *)(v23 + 24);
        if ((v43 & 0x80000000) == 0)
          webrtc::StatsReport::AddInt(v34, 16, v43);
        webrtc::StatsReport::AddString((uint64_t)v34, 13, "audio");
        if (*(_BYTE *)(v23 + 228))
          webrtc::StatsReport::AddInt(v34, 118, *(_DWORD *)(v23 + 224));
        if (*(_BYTE *)(v23 + 236))
          webrtc::StatsReport::AddInt(v34, 119, *(_DWORD *)(v23 + 232));
        if (*(_BYTE *)(v23 + 244))
          webrtc::StatsReport::AddInt(v34, 120, *(_DWORD *)(v23 + 240));
        if (*(_BYTE *)(v23 + 252))
          webrtc::StatsReport::AddInt(v34, 121, *(_DWORD *)(v23 + 248));
        if (*(_BYTE *)(v23 + 260))
          webrtc::StatsReport::AddInt(v34, 122, *(_DWORD *)(v23 + 256));
        if (*(_BYTE *)(v23 + 268))
          webrtc::StatsReport::AddInt(v34, 123, *(_DWORD *)(v23 + 264));
        if (*(_BYTE *)(v23 + 276))
          webrtc::StatsReport::AddFloat(v34, 124, *(float *)(v23 + 272));
      }
      if (*(_QWORD *)(v23 + 136) != *(_QWORD *)(v23 + 144))
      {
        result = webrtc::LegacyStatsCollector::PrepareReport(a2, 0, v27, (uint64_t)&__p, &v58, 0);
        if (result)
        {
          v44 = *(_QWORD *)(v23 + 136);
          if (*(_QWORD *)(v23 + 144) == v44)
            goto LABEL_103;
          result[1] = *(_QWORD *)(v44 + 8);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v23 += 392;
    }
    while (v23 != v24);
  }
  result = (_QWORD *)v58;
  if (v58)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v45 = *((_DWORD *)this + 52);
  if (v45 == -2 || v45 >= 1)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)(*((_QWORD *)a2 + 8) + 8) + 16))(&__p, *((_QWORD *)a2 + 8) + 8);
    v46 = operator new();
    *(_DWORD *)(v46 + 8) = 0;
    *(_QWORD *)v46 = &unk_24C0B5B70;
    v47 = (std::string *)(v46 + 16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v50 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(_QWORD *)v46 = off_24C0B5B28;
      *(_DWORD *)(v46 + 40) = 0;
      v51 = (unsigned int *)(v46 + 40);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      if (v50 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      *(_OWORD *)&v47->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v46 + 32) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_QWORD *)v46 = off_24C0B5B28;
      *(_DWORD *)(v46 + 40) = 0;
      v48 = (unsigned int *)(v46 + 40);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v53 = (char *)a2 + 8;
    v54 = *((_QWORD *)a2 + 2);
    if ((webrtc::LegacyStatsCollector *)v54 == (webrtc::LegacyStatsCollector *)((char *)a2 + 8))
      goto LABEL_97;
    while (((*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v54 + 16) + 40))(**(_QWORD **)(v54 + 16), v46) & 1) == 0)
    {
      v54 = *(_QWORD *)(v54 + 8);
      if ((char *)v54 == v53)
        goto LABEL_97;
    }
    if ((char *)v54 == v53 || (v55 = *(_QWORD **)(v54 + 16)) == 0)
    {
LABEL_97:
      v55 = (_QWORD *)operator new();
      *v55 = v46;
      (**(void (***)(uint64_t))v46)(v46);
      v55[4] = 0;
      v55[3] = 0;
      v55[1] = 0;
      v55[2] = v55 + 3;
      v56 = operator new(0x18uLL);
      v56[1] = v53;
      v56[2] = v55;
      v57 = *((_QWORD *)a2 + 1);
      *v56 = v57;
      *(_QWORD *)(v57 + 8) = v56;
      *((_QWORD *)a2 + 1) = v56;
      ++*((_QWORD *)a2 + 3);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    return webrtc::StatsReport::AddInt(v55, 139, *((_DWORD *)this + 52));
  }
  return result;
}

BOOL webrtc::`anonymous namespace'::VoiceChannelStatsGatherer::HasRemoteAudio(webrtc::_anonymous_namespace_::VoiceChannelStatsGatherer *this)
{
  return *((_QWORD *)this + 17) != *((_QWORD *)this + 18);
}

void std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

void std::vector<cricket::VoiceSenderInfo>::__assign_with_size[abi:sn180100]<cricket::VoiceSenderInfo*,cricket::VoiceSenderInfo*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0x7D6343EB1A1F58D1 * ((v8 - *a1) >> 3) >= a4)
  {
    v17 = a1[1];
    if (0x7D6343EB1A1F58D1 * ((v17 - v9) >> 3) < a4)
    {
      v18 = a2 + 8 * ((v17 - v9) >> 3);
      if (v17 != v9)
      {
        do
        {
          cricket::MediaSenderInfo::operator=(v9, v6);
          v19 = *(_OWORD *)(v6 + 216);
          v20 = *(_OWORD *)(v6 + 232);
          v21 = *(_OWORD *)(v6 + 248);
          *(_OWORD *)(v9 + 200) = *(_OWORD *)(v6 + 200);
          *(_OWORD *)(v9 + 248) = v21;
          *(_OWORD *)(v9 + 232) = v20;
          *(_OWORD *)(v9 + 216) = v19;
          v22 = *(_OWORD *)(v6 + 312);
          v24 = *(_OWORD *)(v6 + 264);
          v23 = *(_OWORD *)(v6 + 280);
          *(_OWORD *)(v9 + 296) = *(_OWORD *)(v6 + 296);
          *(_OWORD *)(v9 + 312) = v22;
          *(_OWORD *)(v9 + 264) = v24;
          *(_OWORD *)(v9 + 280) = v23;
          v25 = *(_OWORD *)(v6 + 376);
          v27 = *(_OWORD *)(v6 + 328);
          v26 = *(_OWORD *)(v6 + 344);
          *(_OWORD *)(v9 + 360) = *(_OWORD *)(v6 + 360);
          *(_OWORD *)(v9 + 376) = v25;
          *(_OWORD *)(v9 + 328) = v27;
          *(_OWORD *)(v9 + 344) = v26;
          v6 += 392;
          v9 += 392;
        }
        while (v6 != v18);
        v9 = a1[1];
      }
      v28 = v9;
      if (v18 == a3)
      {
LABEL_22:
        a1[1] = v28;
        return;
      }
      v28 = v9;
      v29 = v9;
      while (v29)
      {
        v30 = cricket::MediaSenderInfo::MediaSenderInfo(v29, v18);
        v31 = *(_OWORD *)(v18 + 200);
        *(_QWORD *)(v30 + 216) = *(_QWORD *)(v18 + 216);
        *(_OWORD *)(v30 + 200) = v31;
        v32 = *(_OWORD *)(v18 + 224);
        v33 = *(_OWORD *)(v18 + 240);
        v34 = *(_OWORD *)(v18 + 256);
        *(_QWORD *)(v30 + 269) = *(_QWORD *)(v18 + 269);
        *(_OWORD *)(v30 + 240) = v33;
        *(_OWORD *)(v30 + 256) = v34;
        *(_OWORD *)(v30 + 224) = v32;
        v36 = *(_OWORD *)(v18 + 344);
        v35 = *(_OWORD *)(v18 + 360);
        v37 = *(_OWORD *)(v18 + 328);
        *(_OWORD *)(v30 + 373) = *(_OWORD *)(v18 + 373);
        *(_OWORD *)(v30 + 344) = v36;
        *(_OWORD *)(v30 + 360) = v35;
        *(_OWORD *)(v30 + 328) = v37;
        v38 = *(_OWORD *)(v18 + 280);
        v39 = *(_OWORD *)(v18 + 312);
        *(_OWORD *)(v30 + 296) = *(_OWORD *)(v18 + 296);
        *(_OWORD *)(v30 + 312) = v39;
        *(_OWORD *)(v30 + 280) = v38;
        v18 += 392;
        v28 += 392;
        v29 = v30 + 392;
        if (v18 == a3)
          goto LABEL_22;
      }
      __break(1u);
LABEL_53:
      abort();
    }
    if (a2 == a3)
    {
      v40 = *a1;
      if (v17 == v9)
      {
LABEL_51:
        a1[1] = v40;
        return;
      }
    }
    else
    {
      v40 = *a1;
      do
      {
        cricket::MediaSenderInfo::operator=(v9, v6);
        v41 = *(_OWORD *)(v6 + 216);
        v42 = *(_OWORD *)(v6 + 232);
        v43 = *(_OWORD *)(v6 + 248);
        *(_OWORD *)(v9 + 200) = *(_OWORD *)(v6 + 200);
        *(_OWORD *)(v9 + 248) = v43;
        *(_OWORD *)(v9 + 232) = v42;
        *(_OWORD *)(v9 + 216) = v41;
        v44 = *(_OWORD *)(v6 + 312);
        v46 = *(_OWORD *)(v6 + 264);
        v45 = *(_OWORD *)(v6 + 280);
        *(_OWORD *)(v9 + 296) = *(_OWORD *)(v6 + 296);
        *(_OWORD *)(v9 + 312) = v44;
        *(_OWORD *)(v9 + 264) = v46;
        *(_OWORD *)(v9 + 280) = v45;
        v47 = *(_OWORD *)(v6 + 376);
        v49 = *(_OWORD *)(v6 + 328);
        v48 = *(_OWORD *)(v6 + 344);
        *(_OWORD *)(v9 + 360) = *(_OWORD *)(v6 + 360);
        *(_OWORD *)(v9 + 376) = v47;
        *(_OWORD *)(v9 + 328) = v49;
        *(_OWORD *)(v9 + 344) = v48;
        v40 += 392;
        v6 += 392;
        v9 += 392;
      }
      while (v6 != a3);
      v17 = a1[1];
      if (v17 == v40)
        goto LABEL_51;
    }
    v62 = v17 - 312;
    do
    {
      v64 = *(void **)(v62 + 80);
      if (v64)
      {
        *(_QWORD *)(v62 + 88) = v64;
        operator delete(v64);
      }
      v65 = *(void **)(v62 + 56);
      if (v65)
      {
        *(_QWORD *)(v62 + 64) = v65;
        operator delete(v65);
      }
      v66 = *(void **)(v62 + 32);
      if (v66)
      {
        *(_QWORD *)(v62 + 40) = v66;
        operator delete(v66);
      }
      if (*(char *)(v62 + 23) < 0)
        operator delete(*(void **)v62);
      v63 = v62 - 80;
      v62 -= 392;
    }
    while (v63 != v40);
    goto LABEL_51;
  }
  if (v9)
  {
    v10 = a1[1];
    v11 = (void *)*a1;
    if (v10 != v9)
    {
      v12 = v10 - 312;
      do
      {
        v14 = *(void **)(v12 + 80);
        if (v14)
        {
          *(_QWORD *)(v12 + 88) = v14;
          operator delete(v14);
        }
        v15 = *(void **)(v12 + 56);
        if (v15)
        {
          *(_QWORD *)(v12 + 64) = v15;
          operator delete(v15);
        }
        v16 = *(void **)(v12 + 32);
        if (v16)
        {
          *(_QWORD *)(v12 + 40) = v16;
          operator delete(v16);
        }
        if (*(char *)(v12 + 23) < 0)
          operator delete(*(void **)v12);
        v13 = v12 - 80;
        v12 -= 392;
      }
      while (v13 != v9);
      v11 = (void *)*a1;
    }
    a1[1] = v9;
    operator delete(v11);
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  if (a4 > 0xA72F05397829CBLL)
    goto LABEL_53;
  v50 = 0x7D6343EB1A1F58D1 * (v8 >> 3);
  v51 = 2 * v50;
  if (2 * v50 <= a4)
    v51 = a4;
  v52 = v50 >= 0x5397829CBC14E5 ? 0xA72F05397829CBLL : v51;
  if (v52 > 0xA72F05397829CBLL)
    goto LABEL_53;
  v53 = 392 * v52;
  v54 = operator new(392 * v52);
  *a1 = (uint64_t)v54;
  a1[1] = (uint64_t)v54;
  for (a1[2] = (uint64_t)v54 + v53; v6 != a3; *(_OWORD *)(v57 + 48) = v60)
  {
    v55 = cricket::MediaSenderInfo::MediaSenderInfo((uint64_t)v54, v6);
    *(_OWORD *)(v55 + 200) = *(_OWORD *)(v6 + 200);
    *(_QWORD *)(v55 + 216) = *(_QWORD *)(v6 + 216);
    v56 = *(_OWORD *)(v6 + 240);
    *(_OWORD *)(v55 + 224) = *(_OWORD *)(v6 + 224);
    *(_OWORD *)(v55 + 240) = v56;
    *(_OWORD *)(v55 + 256) = *(_OWORD *)(v6 + 256);
    *(_QWORD *)(v55 + 269) = *(_QWORD *)(v6 + 269);
    v57 = v55 + 280;
    *(_OWORD *)(v55 + 373) = *(_OWORD *)(v6 + 373);
    v58 = *(_OWORD *)(v6 + 360);
    *(_OWORD *)(v55 + 344) = *(_OWORD *)(v6 + 344);
    *(_OWORD *)(v55 + 360) = v58;
    v59 = *(_OWORD *)(v6 + 296);
    *(_OWORD *)(v55 + 280) = *(_OWORD *)(v6 + 280);
    *(_OWORD *)(v55 + 296) = v59;
    v61 = *(_OWORD *)(v6 + 312);
    v60 = *(_OWORD *)(v6 + 328);
    v6 += 392;
    v54 = (void *)(v55 + 392);
    *(_OWORD *)(v57 + 32) = v61;
  }
  a1[1] = (uint64_t)v54;
}

uint64_t cricket::MediaSenderInfo::MediaSenderInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  char *v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = (std::string *)(a1 + 80);
  if ((*(char *)(a2 + 103) & 0x80000000) == 0)
  {
    v8 = *(_OWORD *)(a2 + 80);
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 96);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    v10 = *(_BYTE **)(a2 + 112);
    v9 = *(_BYTE **)(a2 + 120);
    v11 = v9 - v10;
    if (v9 == v10)
      goto LABEL_3;
LABEL_7:
    if (v11 < 0)
      goto LABEL_14;
    v19 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 112) = v19;
    *(_QWORD *)(a1 + 120) = v19;
    v20 = &v19[16 * (v11 >> 4)];
    *(_QWORD *)(a1 + 128) = v20;
    memcpy(v19, v10, v11);
    *(_QWORD *)(a1 + 120) = v20;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    v13 = *(_BYTE **)(a2 + 136);
    v21 = *(_BYTE **)(a2 + 144);
    v14 = v21 - v13;
    if (v21 == v13)
      goto LABEL_4;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v10 = *(_BYTE **)(a2 + 112);
  v18 = *(_BYTE **)(a2 + 120);
  v11 = v18 - v10;
  if (v18 != v10)
    goto LABEL_7;
LABEL_3:
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v13 = *(_BYTE **)(a2 + 136);
  v12 = *(_BYTE **)(a2 + 144);
  v14 = v12 - v13;
  if (v12 == v13)
  {
LABEL_4:
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    v16 = *(_BYTE **)(a2 + 160);
    v15 = *(_BYTE **)(a2 + 168);
    v17 = v15 - v16;
    if (v15 == v16)
      goto LABEL_13;
    goto LABEL_11;
  }
LABEL_9:
  if (v14 < 0)
    goto LABEL_14;
  v22 = (char *)operator new(v14);
  *(_QWORD *)(a1 + 136) = v22;
  *(_QWORD *)(a1 + 144) = v22;
  v23 = &v22[16 * (v14 >> 4)];
  *(_QWORD *)(a1 + 152) = v23;
  memcpy(v22, v13, v14);
  *(_QWORD *)(a1 + 144) = v23;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v16 = *(_BYTE **)(a2 + 160);
  v24 = *(_BYTE **)(a2 + 168);
  v17 = v24 - v16;
  if (v24 != v16)
  {
LABEL_11:
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v17 >> 3)) < 0x492492492492493)
    {
      v25 = (char *)operator new(v17);
      *(_QWORD *)(a1 + 160) = v25;
      *(_QWORD *)(a1 + 168) = v25;
      v26 = &v25[8 * (v17 >> 3)];
      *(_QWORD *)(a1 + 176) = v26;
      memcpy(v25, v16, v17);
      *(_QWORD *)(a1 + 168) = v26;
      goto LABEL_13;
    }
LABEL_14:
    abort();
  }
LABEL_13:
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  return a1;
}

uint64_t cricket::MediaSenderInfo::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  char v8;
  __int128 v9;
  const std::string::value_type *v10;
  size_t v11;
  int v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  if (a1 != a2)
  {
    v7 = (std::string *)(a1 + 80);
    v8 = *(_BYTE *)(a2 + 103);
    if (*(char *)(a1 + 103) < 0)
    {
      if (v8 >= 0)
        v10 = (const std::string::value_type *)(a2 + 80);
      else
        v10 = *(const std::string::value_type **)(a2 + 80);
      if (v8 >= 0)
        v11 = *(unsigned __int8 *)(a2 + 103);
      else
        v11 = *(_QWORD *)(a2 + 88);
      std::string::__assign_no_alias<false>(v7, v10, v11);
    }
    else if ((*(_BYTE *)(a2 + 103) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v7, *(char **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
    }
    v12 = *(_DWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
    *(_DWORD *)(a1 + 104) = v12;
    std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits>::__assign_with_size[abi:sn180100]<webrtc::VideoEncoder::ResolutionBitrateLimits*,webrtc::VideoEncoder::ResolutionBitrateLimits*>((_QWORD *)(a1 + 112), *(char **)(a2 + 112), *(char **)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 4);
    std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits>::__assign_with_size[abi:sn180100]<webrtc::VideoEncoder::ResolutionBitrateLimits*,webrtc::VideoEncoder::ResolutionBitrateLimits*>((_QWORD *)(a1 + 136), *(char **)(a2 + 136), *(char **)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4);
    std::vector<webrtc::ReportBlockData>::__assign_with_size[abi:sn180100]<webrtc::ReportBlockData*,webrtc::ReportBlockData*>((_QWORD *)(a1 + 160), *(char **)(a2 + 160), *(char **)(a2 + 168), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 3));
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  return a1;
}

_QWORD *std::vector<webrtc::ReportBlockData>::__assign_with_size[abi:sn180100]<webrtc::ReportBlockData*,webrtc::ReportBlockData*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x492492492492492)
      goto LABEL_23;
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x249249249249249 ? 0x492492492492492 : v11;
    if (v12 > 0x492492492492492)
LABEL_23:
      abort();
    v13 = 7 * v12;
    result = operator new(56 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v16 - v9) >> 3) >= a4)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void std::vector<cricket::VoiceReceiverInfo>::__assign_with_size[abi:sn180100]<cricket::VoiceReceiverInfo*,cricket::VoiceReceiverInfo*>(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  _OWORD *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;

  v6 = (__int128 *)a2;
  v8 = a1[2];
  v9 = *a1;
  if (0xF83E0F83E0F83E1 * ((v8 - *a1) >> 4) < __sz)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)*a1;
      if (v10 != v9)
      {
        v12 = v10 - 400;
        do
        {
          v14 = *(void **)(v12 + 56);
          if (v14)
          {
            *(_QWORD *)(v12 + 64) = v14;
            operator delete(v14);
          }
          v15 = *(void **)(v12 + 32);
          if (v15)
          {
            *(_QWORD *)(v12 + 40) = v15;
            operator delete(v15);
          }
          if (*(char *)(v12 + 23) < 0)
            operator delete(*(void **)v12);
          v13 = v12 - 128;
          v12 -= 528;
        }
        while (v13 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz <= 0x7C1F07C1F07C1FLL)
    {
      v36 = 0xF83E0F83E0F83E1 * (v8 >> 4);
      v37 = 2 * v36;
      if (2 * v36 <= __sz)
        v37 = __sz;
      v38 = v36 >= 0x3E0F83E0F83E0FLL ? 0x7C1F07C1F07C1FLL : v37;
      if (v38 <= 0x7C1F07C1F07C1FLL)
      {
        v39 = 528 * v38;
        v40 = operator new(528 * v38);
        *a1 = (uint64_t)v40;
        a1[1] = (uint64_t)v40;
        for (a1[2] = (uint64_t)v40 + v39; v6 != (__int128 *)a3; *((_OWORD *)v42 + 3) = v48)
        {
          v41 = (_OWORD *)cricket::MediaReceiverInfo::MediaReceiverInfo((uint64_t)v40, v6);
          v42 = (char *)v41 + 340;
          v43 = *(__int128 *)((char *)v6 + 484);
          *(_OWORD *)((char *)v41 + 468) = *(__int128 *)((char *)v6 + 468);
          *(_OWORD *)((char *)v41 + 484) = v43;
          *(_OWORD *)((char *)v41 + 500) = *(__int128 *)((char *)v6 + 500);
          v41[32] = v6[32];
          v44 = *(__int128 *)((char *)v6 + 420);
          *(_OWORD *)((char *)v41 + 404) = *(__int128 *)((char *)v6 + 404);
          *(_OWORD *)((char *)v41 + 420) = v44;
          v45 = *(__int128 *)((char *)v6 + 452);
          *(_OWORD *)((char *)v41 + 436) = *(__int128 *)((char *)v6 + 436);
          *(_OWORD *)((char *)v41 + 452) = v45;
          v46 = *(__int128 *)((char *)v6 + 356);
          *(_OWORD *)((char *)v41 + 340) = *(__int128 *)((char *)v6 + 340);
          *(_OWORD *)((char *)v41 + 356) = v46;
          v47 = *(__int128 *)((char *)v6 + 372);
          v48 = *(__int128 *)((char *)v6 + 388);
          v6 += 33;
          v40 = v41 + 33;
          *((_OWORD *)v42 + 2) = v47;
        }
        a1[1] = (uint64_t)v40;
        return;
      }
    }
LABEL_41:
    abort();
  }
  if (0xF83E0F83E0F83E1 * ((a1[1] - v9) >> 4) < __sz)
  {
    v16 = (__int128 *)(a2 + 16 * ((a1[1] - v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<cricket::VoiceReceiverInfo *,cricket::VoiceReceiverInfo *,cricket::VoiceReceiverInfo *>((uint64_t)&v49, a2, (uint64_t)v16, v9);
    v17 = a1[1];
    if (v16 == (__int128 *)a3)
    {
LABEL_17:
      a1[1] = v17;
      return;
    }
    v18 = a1[1];
    while (v18)
    {
      v19 = (_OWORD *)cricket::MediaReceiverInfo::MediaReceiverInfo(v18, v16);
      v20 = *(__int128 *)((char *)v16 + 340);
      v21 = *(__int128 *)((char *)v16 + 356);
      v22 = *(__int128 *)((char *)v16 + 388);
      *(_OWORD *)((char *)v19 + 372) = *(__int128 *)((char *)v16 + 372);
      *(_OWORD *)((char *)v19 + 388) = v22;
      *(_OWORD *)((char *)v19 + 340) = v20;
      *(_OWORD *)((char *)v19 + 356) = v21;
      v23 = *(__int128 *)((char *)v16 + 404);
      v24 = *(__int128 *)((char *)v16 + 420);
      v25 = *(__int128 *)((char *)v16 + 452);
      *(_OWORD *)((char *)v19 + 436) = *(__int128 *)((char *)v16 + 436);
      *(_OWORD *)((char *)v19 + 452) = v25;
      *(_OWORD *)((char *)v19 + 404) = v23;
      *(_OWORD *)((char *)v19 + 420) = v24;
      v26 = *(__int128 *)((char *)v16 + 468);
      v27 = *(__int128 *)((char *)v16 + 484);
      v28 = *(__int128 *)((char *)v16 + 500);
      v19[32] = v16[32];
      *(_OWORD *)((char *)v19 + 484) = v27;
      *(_OWORD *)((char *)v19 + 500) = v28;
      *(_OWORD *)((char *)v19 + 468) = v26;
      v16 += 33;
      v17 += 528;
      v18 = (uint64_t)(v19 + 33);
      if (v16 == (__int128 *)a3)
        goto LABEL_17;
    }
    __break(1u);
    goto LABEL_41;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<cricket::VoiceReceiverInfo *,cricket::VoiceReceiverInfo *,cricket::VoiceReceiverInfo *>((uint64_t)&v50, a2, a3, v9);
  v30 = v29;
  v31 = a1[1];
  if (v31 != v29)
  {
    v32 = v31 - 400;
    do
    {
      v34 = *(void **)(v32 + 56);
      if (v34)
      {
        *(_QWORD *)(v32 + 64) = v34;
        operator delete(v34);
      }
      v35 = *(void **)(v32 + 32);
      if (v35)
      {
        *(_QWORD *)(v32 + 40) = v35;
        operator delete(v35);
      }
      if (*(char *)(v32 + 23) < 0)
        operator delete(*(void **)v32);
      v33 = v32 - 128;
      v32 -= 528;
    }
    while (v33 != v30);
  }
  a1[1] = v30;
}

uint64_t cricket::MediaReceiverInfo::MediaReceiverInfo(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  v10 = (std::string *)(a1 + 128);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    v13 = (_BYTE *)*((_QWORD *)a2 + 20);
    v18 = (_BYTE *)*((_QWORD *)a2 + 21);
    v14 = v18 - v13;
    if (v18 == v13)
    {
LABEL_3:
      *(_QWORD *)(a1 + 184) = 0;
      *(_QWORD *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      v16 = (_BYTE *)*((_QWORD *)a2 + 23);
      v15 = (_BYTE *)*((_QWORD *)a2 + 24);
      v17 = v15 - v16;
      if (v15 == v16)
        goto LABEL_10;
      goto LABEL_8;
    }
  }
  else
  {
    v11 = a2[8];
    v10->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 18);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    v13 = (_BYTE *)*((_QWORD *)a2 + 20);
    v12 = (_BYTE *)*((_QWORD *)a2 + 21);
    v14 = v12 - v13;
    if (v12 == v13)
      goto LABEL_3;
  }
  if (v14 < 0)
    goto LABEL_11;
  v19 = (char *)operator new(v14);
  *(_QWORD *)(a1 + 160) = v19;
  *(_QWORD *)(a1 + 168) = v19;
  v20 = &v19[16 * (v14 >> 4)];
  *(_QWORD *)(a1 + 176) = v20;
  memcpy(v19, v13, v14);
  *(_QWORD *)(a1 + 168) = v20;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v16 = (_BYTE *)*((_QWORD *)a2 + 23);
  v21 = (_BYTE *)*((_QWORD *)a2 + 24);
  v17 = v21 - v16;
  if (v21 != v16)
  {
LABEL_8:
    if ((v17 & 0x8000000000000000) == 0)
    {
      v22 = (char *)operator new(v17);
      *(_QWORD *)(a1 + 184) = v22;
      *(_QWORD *)(a1 + 192) = v22;
      v23 = &v22[16 * (v17 >> 4)];
      *(_QWORD *)(a1 + 200) = v23;
      memcpy(v22, v16, v17);
      *(_QWORD *)(a1 + 192) = v23;
      goto LABEL_10;
    }
LABEL_11:
    abort();
  }
LABEL_10:
  *(_OWORD *)(a1 + 208) = a2[13];
  v24 = a2[14];
  v25 = a2[15];
  v26 = a2[17];
  *(_OWORD *)(a1 + 256) = a2[16];
  *(_OWORD *)(a1 + 272) = v26;
  *(_OWORD *)(a1 + 224) = v24;
  *(_OWORD *)(a1 + 240) = v25;
  v27 = a2[18];
  v28 = a2[19];
  v29 = a2[20];
  *(_DWORD *)(a1 + 336) = *((_DWORD *)a2 + 84);
  *(_OWORD *)(a1 + 304) = v28;
  *(_OWORD *)(a1 + 320) = v29;
  *(_OWORD *)(a1 + 288) = v27;
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<cricket::VoiceReceiverInfo *,cricket::VoiceReceiverInfo *,cricket::VoiceReceiverInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  const std::string::value_type *v8;
  size_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  std::string *v35;
  char **v36;
  char v37;
  __int128 v38;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v27 = a2 + v7;
    v28 = a4 + v7;
    v29 = *(_OWORD *)(a2 + v7);
    v30 = *(_OWORD *)(a2 + v7 + 16);
    v31 = *(_OWORD *)(a2 + v7 + 48);
    *(_OWORD *)(v28 + 32) = *(_OWORD *)(a2 + v7 + 32);
    *(_OWORD *)(v28 + 48) = v31;
    *(_OWORD *)v28 = v29;
    *(_OWORD *)(v28 + 16) = v30;
    v32 = *(_OWORD *)(a2 + v7 + 64);
    v33 = *(_OWORD *)(a2 + v7 + 80);
    v34 = *(_OWORD *)(a2 + v7 + 96);
    *(_OWORD *)(v28 + 105) = *(_OWORD *)(a2 + v7 + 105);
    *(_OWORD *)(v28 + 80) = v33;
    *(_OWORD *)(v28 + 96) = v34;
    *(_OWORD *)(v28 + 64) = v32;
    if (a4 != a2)
    {
      v35 = (std::string *)(v28 + 128);
      v36 = (char **)(v27 + 128);
      v37 = *(_BYTE *)(v27 + 151);
      if (*(char *)(v28 + 151) < 0)
      {
        if (v37 >= 0)
          v8 = (const std::string::value_type *)(v27 + 128);
        else
          v8 = *v36;
        if (v37 >= 0)
          v9 = *(unsigned __int8 *)(v27 + 151);
        else
          v9 = *(_QWORD *)(a2 + v7 + 136);
        std::string::__assign_no_alias<false>(v35, v8, v9);
      }
      else if ((*(_BYTE *)(v27 + 151) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v35, *v36, *(_QWORD *)(a2 + v7 + 136));
      }
      else
      {
        v38 = *(_OWORD *)v36;
        *(_QWORD *)(v28 + 144) = *(_QWORD *)(v27 + 144);
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v38;
      }
      v10 = a4 + v7;
      v11 = *(_DWORD *)(a2 + v7 + 152);
      *(_BYTE *)(v10 + 156) = *(_BYTE *)(a2 + v7 + 156);
      *(_DWORD *)(v10 + 152) = v11;
      std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits>::__assign_with_size[abi:sn180100]<webrtc::VideoEncoder::ResolutionBitrateLimits*,webrtc::VideoEncoder::ResolutionBitrateLimits*>((_QWORD *)(a4 + v7 + 160), *(char **)(a2 + v7 + 160), *(char **)(a2 + v7 + 168), (uint64_t)(*(_QWORD *)(a2 + v7 + 168) - *(_QWORD *)(a2 + v7 + 160)) >> 4);
      std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits>::__assign_with_size[abi:sn180100]<webrtc::VideoEncoder::ResolutionBitrateLimits*,webrtc::VideoEncoder::ResolutionBitrateLimits*>((_QWORD *)(a4 + v7 + 184), *(char **)(a2 + v7 + 184), *(char **)(a2 + v7 + 192), (uint64_t)(*(_QWORD *)(a2 + v7 + 192) - *(_QWORD *)(a2 + v7 + 184)) >> 4);
    }
    *(_OWORD *)(v28 + 208) = *(_OWORD *)(v27 + 208);
    v12 = *(_OWORD *)(v27 + 224);
    v13 = *(_OWORD *)(v27 + 240);
    v14 = *(_OWORD *)(v27 + 272);
    *(_OWORD *)(v28 + 256) = *(_OWORD *)(v27 + 256);
    *(_OWORD *)(v28 + 272) = v14;
    *(_OWORD *)(v28 + 224) = v12;
    *(_OWORD *)(v28 + 240) = v13;
    v15 = *(_OWORD *)(v27 + 288);
    v16 = *(_OWORD *)(v27 + 304);
    v17 = *(_OWORD *)(v27 + 320);
    *(_DWORD *)(v28 + 336) = *(_DWORD *)(v27 + 336);
    *(_OWORD *)(v28 + 304) = v16;
    *(_OWORD *)(v28 + 320) = v17;
    *(_OWORD *)(v28 + 288) = v15;
    v18 = *(_OWORD *)(v27 + 340);
    v19 = *(_OWORD *)(v27 + 356);
    v20 = *(_OWORD *)(v27 + 388);
    *(_OWORD *)(v28 + 372) = *(_OWORD *)(v27 + 372);
    *(_OWORD *)(v28 + 388) = v20;
    *(_OWORD *)(v28 + 340) = v18;
    *(_OWORD *)(v28 + 356) = v19;
    v21 = *(_OWORD *)(v27 + 404);
    v22 = *(_OWORD *)(v27 + 420);
    v23 = *(_OWORD *)(v27 + 452);
    *(_OWORD *)(v28 + 436) = *(_OWORD *)(v27 + 436);
    *(_OWORD *)(v28 + 452) = v23;
    *(_OWORD *)(v28 + 404) = v21;
    *(_OWORD *)(v28 + 420) = v22;
    v24 = *(_OWORD *)(v27 + 468);
    v25 = *(_OWORD *)(v27 + 484);
    v26 = *(_OWORD *)(v27 + 500);
    *(_OWORD *)(v28 + 512) = *(_OWORD *)(v27 + 512);
    *(_OWORD *)(v28 + 484) = v25;
    *(_OWORD *)(v28 + 500) = v26;
    *(_OWORD *)(v28 + 468) = v24;
    v7 += 528;
  }
  while (v27 + 528 != v6);
  return v6;
}

void std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  char ***v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char **v14;
  char **v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char *v20;
  char *v21;
  char *i;
  uint64_t **v23;
  _DWORD *v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  _QWORD v32[2];

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (char ***)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (char *)v6[1] : (char *)v6;
    if (v9)
    {
      v10 = (char *)*((_QWORD *)v9 + 2);
      if (v10)
      {
        v11 = *(char **)v10;
        if (*(char **)v10 == v9)
        {
          *(_QWORD *)v10 = 0;
          while (1)
          {
            v31 = (char *)*((_QWORD *)v10 + 1);
            if (!v31)
              break;
            do
            {
              v10 = v31;
              v31 = *(char **)v31;
            }
            while (v31);
          }
        }
        else
        {
          for (*((_QWORD *)v10 + 1) = 0; v11; v11 = (char *)*((_QWORD *)v10 + 1))
          {
            do
            {
              v10 = v11;
              v11 = *(char **)v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = a2;
        v13 = v9;
        while (1)
        {
          v9 = v10;
          v32[0] = v13 + 32;
          v32[1] = v13 + 40;
          std::pair<int &,webrtc::RtpCodecParameters &>::operator=[abi:sn180100]<int const,webrtc::RtpCodecParameters,(void *)0>((uint64_t)v32, (uint64_t)(v12 + 4));
          v14 = *v8;
          v15 = (char **)(a1 + 8);
          v16 = (char **)(a1 + 8);
          if (*v8)
            break;
LABEL_18:
          *(_QWORD *)v13 = 0;
          *((_QWORD *)v13 + 1) = 0;
          *((_QWORD *)v13 + 2) = v15;
          *v16 = v13;
          v17 = **(_QWORD **)a1;
          if (v17)
            goto LABEL_19;
LABEL_20:
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)v13);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (char *)*((_QWORD *)v10 + 2);
            if (v10)
            {
              v20 = *(char **)v10;
              if (*(char **)v10 == v9)
              {
                *(_QWORD *)v10 = 0;
                while (1)
                {
                  v21 = (char *)*((_QWORD *)v10 + 1);
                  if (!v21)
                    break;
                  do
                  {
                    v10 = v21;
                    v21 = *(char **)v21;
                  }
                  while (v21);
                }
              }
              else
              {
                for (*((_QWORD *)v10 + 1) = 0; v20; v20 = (char *)*((_QWORD *)v10 + 1))
                {
                  do
                  {
                    v10 = v20;
                    v20 = *(char **)v20;
                  }
                  while (v20);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v18 = (_QWORD *)v12[1];
          if (v18)
          {
            do
            {
              v4 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v12[2];
              v19 = *v4 == (_QWORD)v12;
              v12 = v4;
            }
            while (!v19);
          }
          if (v9)
          {
            v12 = v4;
            v13 = v9;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v15 = v14;
            if (*((_DWORD *)v13 + 8) >= *((_DWORD *)v14 + 8))
              break;
            v14 = (char **)*v14;
            v16 = v15;
            if (!*v15)
              goto LABEL_18;
          }
          v14 = (char **)v14[1];
        }
        while (v14);
        v16 = v15 + 1;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = v15;
        v15[1] = v13;
        v17 = **(_QWORD **)a1;
        if (!v17)
          goto LABEL_20;
LABEL_19:
        *(_QWORD *)a1 = v17;
        v13 = *v16;
        goto LABEL_20;
      }
LABEL_42:
      std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy(a1, v9);
      if (v10)
      {
        for (i = (char *)*((_QWORD *)v10 + 2); i; i = (char *)*((_QWORD *)i + 2))
          v10 = i;
        std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v23 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v24 = operator new(0x98uLL);
      v24[8] = *((_DWORD *)v4 + 8);
      webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v24 + 10), (const webrtc::RtpCodec *)(v4 + 5));
      *((_QWORD *)v24 + 5) = off_24C0BCC30;
      v24[36] = *((_DWORD *)v4 + 36);
      v25 = *v23;
      v26 = (_QWORD *)(a1 + 8);
      v27 = (_QWORD *)(a1 + 8);
      if (*v23)
        break;
LABEL_54:
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = v26;
      *v27 = v24;
      v28 = **(_QWORD **)a1;
      if (v28)
        goto LABEL_55;
LABEL_56:
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)v24);
      ++*(_QWORD *)(a1 + 16);
      v29 = (_QWORD *)v4[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v4[2];
          v19 = *v30 == (_QWORD)v4;
          v4 = v30;
        }
        while (!v19);
      }
      v4 = v30;
      if (v30 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v26 = v25;
        if (v24[8] >= *((_DWORD *)v25 + 8))
          break;
        v25 = (uint64_t *)*v25;
        v27 = v26;
        if (!*v26)
          goto LABEL_54;
      }
      v25 = (uint64_t *)v25[1];
    }
    while (v25);
    v27 = v26 + 1;
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v26;
    v26[1] = v24;
    v28 = **(_QWORD **)a1;
    if (!v28)
      goto LABEL_56;
LABEL_55:
    *(_QWORD *)a1 = v28;
    v24 = (_DWORD *)*v27;
    goto LABEL_56;
  }
}

uint64_t std::pair<int &,webrtc::RtpCodecParameters &>::operator=[abi:sn180100]<int const,webrtc::RtpCodecParameters,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *v5;
  char v6;
  __int128 v7;
  const std::string::value_type *v8;
  size_t v9;
  __int128 v10;

  v4 = *(_QWORD *)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)a2;
  if (v4 != a2 + 8)
  {
    v5 = (std::string *)(v4 + 8);
    v6 = *(_BYTE *)(a2 + 39);
    if (*(char *)(v4 + 31) < 0)
    {
      if (v6 >= 0)
        v8 = (const std::string::value_type *)(a2 + 16);
      else
        v8 = *(const std::string::value_type **)(a2 + 16);
      if (v6 >= 0)
        v9 = *(unsigned __int8 *)(a2 + 39);
      else
        v9 = *(_QWORD *)(a2 + 24);
      std::string::__assign_no_alias<false>(v5, v8, v9);
    }
    else if ((*(_BYTE *)(a2 + 39) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v5, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
    }
    v10 = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(v4 + 48) = *(_BYTE *)(a2 + 56);
    *(_OWORD *)(v4 + 32) = v10;
    std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>(v4 + 56, *(uint64_t **)(a2 + 64), *(uint64_t **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 2));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v4 + 80, *(char **)(a2 + 88), (char *)(a2 + 96));
  }
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a2 + 112);
  return a1;
}

_DWORD *std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>(uint64_t a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  _DWORD *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD **v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(_DWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 2) < __sz)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz <= 0x1555555555555555)
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
      v11 = 2 * v10;
      if (2 * v10 <= __sz)
        v11 = __sz;
      v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
      if (v12 <= 0x1555555555555555)
      {
        v13 = 3 * v12;
        result = operator new(12 * v12);
        *(_QWORD *)a1 = result;
        *(_QWORD *)(a1 + 8) = result;
        *(_QWORD *)(a1 + 16) = &result[v13];
        v14 = result;
        if (v6 != a3)
        {
          v14 = result;
          do
          {
            *(_QWORD *)v14 = *v6;
            *((_BYTE *)v14 + 8) = *((_BYTE *)v6 + 8);
            v6 = (uint64_t *)((char *)v6 + 12);
            v14 += 3;
          }
          while (v6 != a3);
        }
        *(_QWORD *)(a1 + 8) = v14;
        return result;
      }
    }
LABEL_30:
    abort();
  }
  v17 = *(_DWORD **)(a1 + 8);
  v16 = (_DWORD **)(a1 + 8);
  v15 = v17;
  v18 = 0xAAAAAAAAAAAAAAABLL * (v17 - result);
  if (v18 < __sz)
  {
    v19 = (uint64_t *)((char *)a2 + 12 * v18);
    if (v15 != result)
    {
      v20 = 12 * v18;
      do
      {
        v21 = *v6;
        result[2] = *((_DWORD *)v6 + 2);
        *(_QWORD *)result = v21;
        result += 3;
        v6 = (uint64_t *)((char *)v6 + 12);
        v20 -= 12;
      }
      while (v20);
      result = *v16;
    }
    v22 = result;
    if (v19 == a3)
    {
LABEL_24:
      *v16 = v22;
      return result;
    }
    v22 = result;
    v23 = result;
    while (v23)
    {
      v24 = *v19;
      *((_BYTE *)v23 + 8) = *((_BYTE *)v19 + 8);
      *(_QWORD *)v23 = v24;
      v23 += 3;
      v19 = (uint64_t *)((char *)v19 + 12);
      v22 += 3;
      if (v19 == a3)
        goto LABEL_24;
    }
    __break(1u);
    goto LABEL_30;
  }
  v25 = result;
  if (a2 != a3)
  {
    v26 = result;
    do
    {
      v27 = *v6;
      v26[2] = *((_DWORD *)v6 + 2);
      *(_QWORD *)v26 = v27;
      v26 += 3;
      v6 = (uint64_t *)((char *)v6 + 12);
      v25 += 3;
    }
    while (v6 != a3);
  }
  *v16 = v25;
  return result;
}

void std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy(uint64_t a1, char *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy(a1, *((_QWORD *)a2 + 1));
    *((_QWORD *)a2 + 5) = off_24C0BCBF0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(a2 + 120), *((_QWORD *)a2 + 16));
    v4 = (void *)*((_QWORD *)a2 + 12);
    if (v4)
    {
      *((_QWORD *)a2 + 13) = v4;
      operator delete(v4);
    }
    if (a2[71] < 0)
      operator delete(*((void **)a2 + 6));
    operator delete(a2);
  }
}

void webrtc::`anonymous namespace'::GetTrackIdBySsrc(std::string *this, unsigned int a2, uint64_t a3)
{
  std::string *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  const std::string::value_type *v22;
  std::string::size_type v23;

  v3 = this;
  v6 = *(_QWORD **)(a3 + 8);
  v4 = (_QWORD *)(a3 + 8);
  v5 = v6;
  if (!v6)
    goto LABEL_19;
  v7 = v4;
  v8 = v5;
  do
  {
    v9 = *((_DWORD *)v8 + 8);
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v10)
      v7 = v8;
    v8 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v7 == v4 || *((_DWORD *)v7 + 8) > a2)
  {
    do
    {
      v12 = v5;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
    if (v12 != v4 && !*((_DWORD *)v12 + 8))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/legacy_stats_collector.cc");
      if ((*((char *)v12 + 63) & 0x80000000) == 0)
      {
        v20 = v12 + 5;
LABEL_22:
        v21 = *(_OWORD *)v20;
        v3->__r_.__value_.__r.__words[2] = v20[2];
        *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v21;
        return;
      }
      v22 = (const std::string::value_type *)v12[5];
      v23 = v12[6];
      this = v3;
      goto LABEL_24;
    }
LABEL_19:
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    this->__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  if ((*((char *)v7 + 63) & 0x80000000) == 0)
  {
    v20 = v7 + 5;
    goto LABEL_22;
  }
  v22 = (const std::string::value_type *)v7[5];
  v23 = v7[6];
LABEL_24:
  std::string::__init_copy_ctor_external(this, v22, v23);
}

void webrtc::`anonymous namespace'::VideoChannelStatsGatherer::~VideoChannelStatsGatherer(webrtc::_anonymous_namespace_::VideoChannelStatsGatherer *this)
{
  cricket::VideoMediaInfo::~VideoMediaInfo((char **)this + 14);
  *(_QWORD *)this = off_24C0B5A38;
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((char **)this + 11));
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((char **)this + 8));
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*((void **)this + 1));
    return;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    goto LABEL_5;
}

{
  cricket::VideoMediaInfo::~VideoMediaInfo((char **)this + 14);
  *(_QWORD *)this = off_24C0B5A38;
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((char **)this + 11));
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((char **)this + 8));
  if (*((char *)this + 55) < 0)
  {
    operator delete(*((void **)this + 4));
    if ((*((char *)this + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x20BD0ADECLL);
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*((void **)this + 1));
  goto LABEL_6;
}

uint64_t webrtc::`anonymous namespace'::VideoChannelStatsGatherer::GetStatsOnWorkerThread(webrtc::_anonymous_namespace_::VideoChannelStatsGatherer *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  void **v10;
  void **v11;
  void *v12;
  char *v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD v21[2];
  char **v22;
  _QWORD v23[2];
  void *__p[2];
  uint64_t v25;
  char **v26;
  char *v27;
  uint64_t v28;
  char *v29[6];
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v31 = 0;
  v32 = 0;
  memset(v29, 0, sizeof(v29));
  v30 = &v31;
  __p[0] = 0;
  __p[1] = 0;
  v27 = 0;
  v28 = 0;
  v25 = 0;
  v26 = &v27;
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13));
  v3 = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v2 + 216))(v2, v29);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 72))(*((_QWORD *)this + 13));
  v5 = v3 & (*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v4 + 224))(v4, __p);
  if ((_DWORD)v5 == 1)
  {
    v6 = v29[0];
    v14 = v29[0];
    v7 = *(_OWORD *)&v29[1];
    memset(v29, 0, sizeof(v29));
    v15 = v7;
    v16 = *(_OWORD *)&v29[3];
    v17 = v29[5];
    v18 = *(_OWORD *)__p;
    v8 = v25;
    __p[1] = 0;
    v25 = 0;
    __p[0] = 0;
    v19 = v8;
    v20 = v30;
    v21[0] = v31;
    v21[1] = v32;
    if (v32)
    {
      *(_QWORD *)(v31 + 16) = v21;
      v30 = &v31;
      v31 = 0;
      v32 = 0;
    }
    else
    {
      v20 = v21;
    }
    v22 = v26;
    v23[0] = v27;
    v23[1] = v28;
    if (v28)
    {
      *((_QWORD *)v27 + 2) = v23;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
      v9 = (uint64_t *)((char *)this + 112);
      if ((char **)((char *)this + 112) == &v14)
      {
LABEL_8:
        cricket::VideoMediaInfo::~VideoMediaInfo(&v14);
        goto LABEL_9;
      }
    }
    else
    {
      v22 = (char **)v23;
      v9 = (uint64_t *)((char *)this + 112);
      if ((char **)((char *)this + 112) == &v14)
        goto LABEL_8;
    }
    std::vector<cricket::VideoSenderInfo>::__assign_with_size[abi:sn180100]<cricket::VideoSenderInfo*,cricket::VideoSenderInfo*>(v9, (uint64_t)v6, v7, 0x823EE08FB823EE09 * ((uint64_t)(v7 - (_QWORD)v6) >> 3));
    std::vector<cricket::VideoSenderInfo>::__assign_with_size[abi:sn180100]<cricket::VideoSenderInfo*,cricket::VideoSenderInfo*>((uint64_t *)this + 17, v16, *((uint64_t *)&v16 + 1), 0x823EE08FB823EE09 * ((uint64_t)(*((_QWORD *)&v16 + 1) - v16) >> 3));
    std::vector<cricket::VideoReceiverInfo>::__assign_with_size[abi:sn180100]<cricket::VideoReceiverInfo*,cricket::VideoReceiverInfo*>((uint64_t *)this + 20, (__int128 *)v18, *((__int128 **)&v18 + 1), 0x2FD2FD2FD2FD2FD3 * ((uint64_t)(*((_QWORD *)&v18 + 1) - v18) >> 3));
    std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>((uint64_t)this + 184, v20, v21);
    std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>((uint64_t)this + 208, v22, v23);
    goto LABEL_8;
  }
LABEL_9:
  std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)&v26, v27);
  v10 = (void **)__p[0];
  if (__p[0])
  {
    v11 = (void **)__p[1];
    v12 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        cricket::VideoReceiverInfo::~VideoReceiverInfo(v11 - 91);
      while (v11 != v10);
      v12 = __p[0];
    }
    __p[1] = v10;
    operator delete(v12);
  }
  cricket::VideoMediaSendInfo::~VideoMediaSendInfo(v29);
  return v5;
}

_QWORD *webrtc::`anonymous namespace'::VideoChannelStatsGatherer::ExtractStats(webrtc::_anonymous_namespace_::VideoChannelStatsGatherer *this, webrtc::LegacyStatsCollector *a2)
{
  uint64_t v4;
  std::string *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  BOOL v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  std::string v44;
  std::string __p;

  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 2;
  *(_QWORD *)v4 = &unk_24C0B5CD0;
  v5 = (std::string *)(v4 + 16);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    *(_QWORD *)(v4 + 32) = *((_QWORD *)this + 6);
  }
  *(_QWORD *)v4 = off_24C0B5C88;
  v6 = (unsigned int *)(v4 + 44);
  *(_QWORD *)(v4 + 40) = 1;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v43 = v4;
  v8 = *((_QWORD *)this + 20);
  for (i = *((_QWORD *)this + 21); v8 != i; v8 += 728)
  {
    v10 = *(unsigned int **)(v8 + 160);
    if (*(unsigned int **)(v8 + 168) == v10)
      v11 = 0;
    else
      v11 = *v10;
    v12 = webrtc::LegacyStatsCollector::PrepareReport(a2, 1, v11, (uint64_t)&v44, &v43, 1);
    if (v12)
    {
      v13 = v12;
      v14 = *((unsigned __int8 *)a2 + 88);
      webrtc::StatsReport::AddString((uint64_t)v12, 52, v8 + 128);
      std::optional<std::string>::value_or[abi:sn180100]<char const(&)[8]>((std::string *)"unknown", v8 + 368, &__p);
      webrtc::StatsReport::AddString((uint64_t)v13, 6, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v15 = *(_QWORD *)(v8 + 8);
      if (v14)
        v15 = 0;
      webrtc::StatsReport::AddInt64(v13, 4, v15 + *(_QWORD *)v8);
      v16 = *(_QWORD *)(v8 + 592);
      if ((v16 & 0x8000000000000000) == 0)
        webrtc::StatsReport::AddInt64(v13, 44, v16);
      v17 = *(_QWORD *)(v8 + 600);
      if ((v17 & 0x8000000000000000) == 0)
        webrtc::StatsReport::AddInt64(v13, 79, v17);
      if (*(_BYTE *)(v8 + 472))
        webrtc::StatsReport::AddInt64(v13, 18, *(_QWORD *)(v8 + 464));
      if (*(_BYTE *)(v8 + 60))
        webrtc::StatsReport::AddInt(v13, 106, *(_DWORD *)(v8 + 56));
      v18 = *(_DWORD *)(v8 + 452);
      webrtc::StatsReport::AddInt(v13, 57, *(_DWORD *)(v8 + 584));
      webrtc::StatsReport::AddInt(v13, 58, *(_DWORD *)(v8 + 560));
      webrtc::StatsReport::AddInt(v13, 78, *(_DWORD *)(v8 + 408));
      webrtc::StatsReport::AddInt(v13, 81, *(_DWORD *)(v8 + 420));
      webrtc::StatsReport::AddInt(v13, 83, *(_DWORD *)(v8 + 428));
      webrtc::StatsReport::AddInt(v13, 85, *(_DWORD *)(v8 + 432));
      webrtc::StatsReport::AddInt(v13, 86, *(_DWORD *)(v8 + 424));
      webrtc::StatsReport::AddInt(v13, 89, *(_DWORD *)(v8 + 416));
      webrtc::StatsReport::AddInt(v13, 96, *(_DWORD *)(v8 + 568));
      webrtc::StatsReport::AddInt(v13, 103, *(_DWORD *)(v8 + 564));
      webrtc::StatsReport::AddInt(v13, 104, *(_DWORD *)(v8 + 572));
      webrtc::StatsReport::AddInt(v13, 14, *(_DWORD *)(v8 + 20));
      webrtc::StatsReport::AddInt(v13, 15, *(_DWORD *)(v8 + 16));
      webrtc::StatsReport::AddInt(v13, 108, *(_DWORD *)(v8 + 412));
      webrtc::StatsReport::AddInt(v13, 115, *(_DWORD *)(v8 + 576));
      webrtc::StatsReport::AddInt(v13, 132, *(_DWORD *)(v8 + 580));
      webrtc::StatsReport::AddInt(v13, 10, v18);
      webrtc::StatsReport::AddString((uint64_t)v13, 13, "video");
      if (*(_BYTE *)(v8 + 720))
      {
        webrtc::TimingFrameInfo::ToString(v8 + 608, (char *)&__p);
        webrtc::StatsReport::AddString((uint64_t)v13, 134, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      webrtc::StatsReport::AddInt64(v13, 94, *(_QWORD *)(v8 + 528));
      if ((*(_BYTE *)(v8 + 556) & 1) != 0)
        v19 = "screen";
      else
        v19 = "realtime";
      webrtc::StatsReport::AddString((uint64_t)v13, 55, v19);
    }
    if (*(_QWORD *)(v8 + 184) != *(_QWORD *)(v8 + 192))
    {
      result = webrtc::LegacyStatsCollector::PrepareReport(a2, 0, v11, (uint64_t)&v44, &v43, 1);
      if (result)
      {
        v21 = *(_QWORD *)(v8 + 184);
        if (*(_QWORD *)(v8 + 192) == v21)
        {
LABEL_81:
          __break(1u);
          return result;
        }
        result[1] = *(_QWORD *)(v21 + 8);
      }
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
  }
  v23 = *((_QWORD *)this + 17);
  v22 = *((_QWORD *)this + 18);
  if (v23 != v22)
  {
    v24 = (_QWORD *)((char *)this + 64);
    do
    {
      v25 = *(unsigned int **)(v23 + 112);
      if (*(unsigned int **)(v23 + 120) == v25)
      {
        v26 = 0;
        v27 = *v24;
        if (!*v24)
          goto LABEL_55;
      }
      else
      {
        v26 = *v25;
        v27 = *v24;
        if (!*v24)
          goto LABEL_55;
      }
      v28 = v24;
      do
      {
        v29 = *(_DWORD *)(v27 + 32);
        v30 = v29 >= v26;
        if (v29 >= v26)
          v31 = (uint64_t *)v27;
        else
          v31 = (uint64_t *)(v27 + 8);
        if (v30)
          v28 = (_QWORD *)v27;
        v27 = *v31;
      }
      while (*v31);
      if (v28 != v24 && *((_DWORD *)v28 + 8) <= v26)
      {
        if (*((char *)v28 + 63) < 0)
          std::string::__init_copy_ctor_external(&v44, (const std::string::value_type *)v28[5], v28[6]);
        else
          v44 = *(std::string *)(v28 + 5);
        goto LABEL_56;
      }
LABEL_55:
      *((_BYTE *)&v44.__r_.__value_.__s + 23) = 0;
      v44.__r_.__value_.__s.__data_[0] = 0;
LABEL_56:
      v32 = webrtc::LegacyStatsCollector::PrepareReport(a2, 1, v26, (uint64_t)&v44, &v43, 0);
      if (v32)
      {
        v33 = v32;
        v34 = *((unsigned __int8 *)a2 + 88);
        webrtc::StatsReport::AddString((uint64_t)v32, 52, v23 + 80);
        v35 = *(_QWORD *)(v23 + 8);
        if (v34)
          v35 = 0;
        webrtc::StatsReport::AddInt64(v33, 5, v35 + *(_QWORD *)v23);
        v36 = *(_QWORD *)(v23 + 72);
        if ((v36 & 0x8000000000000000) == 0)
          webrtc::StatsReport::AddInt64(v33, 126, v36);
        std::optional<std::string>::value_or[abi:sn180100]<char const(&)[8]>((std::string *)"unknown", v23 + 224, &__p);
        webrtc::StatsReport::AddString((uint64_t)v33, 6, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        webrtc::StatsReport::AddBoolean(v33, 42, (*(_DWORD *)(v23 + 300) >> 1) & 1);
        webrtc::StatsReport::AddBoolean(v33, 56, *(_DWORD *)(v23 + 300) & 1);
        webrtc::StatsReport::AddBoolean(v33, 91, *(unsigned __int8 *)(v23 + 376));
        if (*(_BYTE *)(v23 + 392))
          webrtc::StatsReport::AddInt(v33, 18, *(_DWORD *)(v23 + 384));
        v37 = llround(*(double *)(v23 + 280));
        v38 = *(_DWORD *)(v23 + 40);
        v39 = *(_DWORD *)(v23 + 348);
        v40 = *(_DWORD *)(v23 + 408);
        webrtc::StatsReport::AddInt(v33, 38, *(_DWORD *)(v23 + 304));
        webrtc::StatsReport::AddInt(v33, 41, *(_DWORD *)(v23 + 340));
        webrtc::StatsReport::AddInt(v33, 73, *(_DWORD *)(v23 + 344));
        webrtc::StatsReport::AddInt(v33, 77, *(_DWORD *)(v23 + 256));
        webrtc::StatsReport::AddInt(v33, 82, *(_DWORD *)(v23 + 268));
        webrtc::StatsReport::AddInt(v33, 84, v37);
        webrtc::StatsReport::AddInt(v33, 87, *(_DWORD *)(v23 + 288));
        webrtc::StatsReport::AddInt(v33, 90, *(_DWORD *)(v23 + 264));
        webrtc::StatsReport::AddInt(v33, 105, v38);
        webrtc::StatsReport::AddInt(v33, 14, *(_DWORD *)(v23 + 64));
        webrtc::StatsReport::AddInt(v33, 16, *(_DWORD *)(v23 + 24));
        webrtc::StatsReport::AddInt(v33, 107, *(_DWORD *)(v23 + 260));
        webrtc::StatsReport::AddInt(v33, 11, v39);
        webrtc::StatsReport::AddInt(v33, 92, v40);
        webrtc::StatsReport::AddString((uint64_t)v33, 13, "video");
        if ((*(_BYTE *)(v23 + 400) & 1) != 0)
          v41 = "screen";
        else
          v41 = "realtime";
        webrtc::StatsReport::AddString((uint64_t)v33, 55, v41);
      }
      if (*(_QWORD *)(v23 + 136) != *(_QWORD *)(v23 + 144))
      {
        result = webrtc::LegacyStatsCollector::PrepareReport(a2, 0, v26, (uint64_t)&v44, &v43, 0);
        if (result)
        {
          v42 = *(_QWORD *)(v23 + 136);
          if (*(_QWORD *)(v23 + 144) == v42)
            goto LABEL_81;
          result[1] = *(_QWORD *)(v42 + 8);
        }
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v23 += 456;
    }
    while (v23 != v22);
  }
  result = (_QWORD *)v43;
  if (v43)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  return result;
}

uint64_t webrtc::`anonymous namespace'::VideoChannelStatsGatherer::HasRemoteAudio(webrtc::_anonymous_namespace_::VideoChannelStatsGatherer *this)
{
  return 0;
}

void std::vector<cricket::VideoSenderInfo>::__assign_with_size[abi:sn180100]<cricket::VideoSenderInfo*,cricket::VideoSenderInfo*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0x823EE08FB823EE09 * ((v8 - *a1) >> 3) < a4)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          cricket::VideoSenderInfo::~VideoSenderInfo((void **)(v10 - 456));
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 <= 0x8FB823EE08FB82)
    {
      v12 = 0x823EE08FB823EE09 * (v8 >> 3);
      v13 = 2 * v12;
      if (2 * v12 <= a4)
        v13 = a4;
      v14 = v12 >= 0x47DC11F7047DC1 ? 0x8FB823EE08FB82 : v13;
      if (v14 <= 0x8FB823EE08FB82)
      {
        v15 = 456 * v14;
        v16 = operator new(456 * v14);
        *a1 = (uint64_t)v16;
        a1[1] = (uint64_t)v16;
        for (a1[2] = (uint64_t)v16 + v15; v6 != a3; v16 = (void *)(v17 + 456))
        {
          v17 = cricket::VideoSenderInfo::VideoSenderInfo((uint64_t)v16, v6);
          v6 += 456;
        }
        a1[1] = (uint64_t)v16;
        return;
      }
    }
LABEL_27:
    abort();
  }
  if (0x823EE08FB823EE09 * ((a1[1] - v9) >> 3) < a4)
  {
    v18 = a2 + 8 * ((a1[1] - v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<cricket::VideoSenderInfo *,cricket::VideoSenderInfo *,cricket::VideoSenderInfo *>((uint64_t)&v25, a2, v18, v9);
    v19 = a1[1];
    if (v18 == a3)
    {
LABEL_22:
      a1[1] = v19;
      return;
    }
    v20 = a1[1];
    while (v20)
    {
      v21 = cricket::VideoSenderInfo::VideoSenderInfo(v20, v18);
      v18 += 456;
      v20 = v21 + 456;
      v19 += 456;
      if (v18 == a3)
        goto LABEL_22;
    }
    __break(1u);
    goto LABEL_27;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<cricket::VideoSenderInfo *,cricket::VideoSenderInfo *,cricket::VideoSenderInfo *>((uint64_t)&v26, a2, a3, v9);
  v23 = v22;
  v24 = a1[1];
  if (v24 != v22)
  {
    do
      cricket::VideoSenderInfo::~VideoSenderInfo((void **)(v24 - 456));
    while (v24 != v23);
  }
  a1[1] = v23;
}

uint64_t cricket::VideoSenderInfo::VideoSenderInfo(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 *v11;
  std::string *v12;
  __int128 v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  std::string *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;

  v4 = (_QWORD *)cricket::MediaSenderInfo::MediaSenderInfo(a1, a2);
  v4[25] = 0;
  v4[26] = 0;
  v4[27] = 0;
  v5 = *(_QWORD *)(a2 + 200);
  v6 = *(_QWORD *)(a2 + 208);
  v7 = v6 - v5;
  if (v6 != v5)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 4);
    if (v8 >= 0x555555555555556)
LABEL_23:
      abort();
    v9 = (char *)operator new(v7);
    v10 = 0;
    *(_QWORD *)(a1 + 200) = v9;
    *(_QWORD *)(a1 + 208) = v9;
    *(_QWORD *)(a1 + 216) = &v9[48 * v8];
    do
    {
      v11 = (__int128 *)(v5 + v10);
      v12 = (std::string *)&v9[v10];
      if (*(char *)(v5 + v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
      }
      else
      {
        v13 = *v11;
        v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v14 = &v9[v10];
      *((_QWORD *)v14 + 3) = 0;
      *((_QWORD *)v14 + 4) = 0;
      *((_QWORD *)v14 + 5) = 0;
      v16 = *(_BYTE **)(v5 + v10 + 24);
      v15 = *(_BYTE **)(v5 + v10 + 32);
      v17 = v15 - v16;
      if (v15 != v16)
      {
        if (v17 < 0)
          goto LABEL_23;
        v18 = (char *)operator new(v15 - v16);
        *((_QWORD *)v14 + 3) = v18;
        *((_QWORD *)v14 + 4) = v18;
        v19 = &v18[4 * (v17 >> 2)];
        *((_QWORD *)v14 + 5) = v19;
        memcpy(v18, v16, v17);
        *((_QWORD *)v14 + 4) = v19;
      }
      v10 += 48;
    }
    while (v5 + v10 != v6);
    *(_QWORD *)(a1 + 208) = &v9[v10];
  }
  *(_BYTE *)(a1 + 224) = 0;
  v20 = (std::string *)(a1 + 224);
  *(_BYTE *)(a1 + 248) = 0;
  if (*(_BYTE *)(a2 + 248))
  {
    if (*(char *)(a2 + 247) < 0)
    {
      std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)(a2 + 224), *(_QWORD *)(a2 + 232));
    }
    else
    {
      v21 = *(_OWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
    }
    *(_BYTE *)(a1 + 248) = 1;
  }
  v22 = *(_OWORD *)(a2 + 256);
  v23 = *(_OWORD *)(a2 + 288);
  v24 = *(_QWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v23;
  *(_OWORD *)(a1 + 256) = v22;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 304) = v24;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  std::map<int,unsigned long>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>((uint64_t *)(a1 + 312), *(int **)(a2 + 312), (int *)(a2 + 320));
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  v25 = *(_OWORD *)(a2 + 352);
  v26 = *(_OWORD *)(a2 + 368);
  v27 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v27;
  *(_OWORD *)(a1 + 352) = v25;
  *(_OWORD *)(a1 + 368) = v26;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  if (*(_BYTE *)(a2 + 440))
  {
    v28 = (std::string *)(a1 + 416);
    if (*(char *)(a2 + 439) < 0)
    {
      std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)(a2 + 416), *(_QWORD *)(a2 + 424));
    }
    else
    {
      v29 = *(_OWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
    }
    *(_BYTE *)(a1 + 440) = 1;
  }
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<cricket::VideoSenderInfo *,cricket::VideoSenderInfo *,cricket::VideoSenderInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v11 = a4 + v7;
    v12 = a2 + v7;
    cricket::MediaSenderInfo::operator=(a4 + v7, a2 + v7);
    if (a4 != a2)
    {
      std::vector<cricket::SsrcGroup>::__assign_with_size[abi:sn180100]<cricket::SsrcGroup*,cricket::SsrcGroup*>((std::string **)(v11 + 200), *(_QWORD *)(v12 + 200), *(_QWORD *)(v12 + 208), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v12 + 208) - *(_QWORD *)(v12 + 200)) >> 4));
      std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v11 + 224), (std::string *)(v12 + 224));
      v13 = *(_OWORD *)(v12 + 256);
      v14 = *(_OWORD *)(v12 + 272);
      v15 = *(_OWORD *)(v12 + 288);
      *(_QWORD *)(v11 + 304) = *(_QWORD *)(v12 + 304);
      *(_OWORD *)(v11 + 272) = v14;
      *(_OWORD *)(v11 + 288) = v15;
      *(_OWORD *)(v11 + 256) = v13;
      std::__tree<std::__value_type<webrtc::QualityLimitationReason,long long>,std::__map_value_compare<webrtc::QualityLimitationReason,std::__value_type<webrtc::QualityLimitationReason,long long>,std::less<webrtc::QualityLimitationReason>,true>,std::allocator<std::__value_type<webrtc::QualityLimitationReason,long long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<webrtc::QualityLimitationReason,long long>,std::__tree_node<std::__value_type<webrtc::QualityLimitationReason,long long>,void *> *,long>>(v11 + 312, *(_QWORD **)(v12 + 312), (_QWORD *)(a2 + 320 + v7));
    }
    *(_OWORD *)(v11 + 336) = *(_OWORD *)(v12 + 336);
    v8 = *(_OWORD *)(v12 + 352);
    v9 = *(_OWORD *)(v12 + 368);
    v10 = *(_OWORD *)(v12 + 400);
    *(_OWORD *)(v11 + 384) = *(_OWORD *)(v12 + 384);
    *(_OWORD *)(v11 + 400) = v10;
    *(_OWORD *)(v11 + 352) = v8;
    *(_OWORD *)(v11 + 368) = v9;
    std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v11 + 416), (std::string *)(v12 + 416));
    *(_DWORD *)(v11 + 448) = *(_DWORD *)(v12 + 448);
    v7 += 456;
  }
  while (v12 + 456 != v6);
  return v6;
}

void std::vector<cricket::SsrcGroup>::__assign_with_size[abi:sn180100]<cricket::SsrcGroup*,cricket::SsrcGroup*>(std::string **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string::pointer data;
  std::string *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const std::string::value_type *v17;
  size_t v18;
  std::string *v19;
  __int128 *v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  const std::string::value_type *v24;
  size_t v25;
  std::string *v26;
  __int128 *v27;
  char v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::string *v34;
  _BYTE *v35;
  _BYTE *v36;
  int64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  std::string *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  std::string *v45;
  __int128 *v46;
  __int128 v47;
  std::string::__raw *v48;
  _BYTE *v49;
  _BYTE *v50;
  int64_t v51;
  std::string::pointer v52;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 4) < a4)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          data = v10[-1].__r_.__value_.__l.__data_;
          if (data)
          {
            v10[-1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
            operator delete(data);
          }
          if (SHIBYTE(v10[-2].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v10[-2].__r_.__value_.__l.__data_);
          v10 -= 2;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x555555555555555)
      goto LABEL_73;
    v30 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v31 = 2 * v30;
    if (2 * v30 <= a4)
      v31 = a4;
    v32 = v30 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v31;
    if (v32 > 0x555555555555555)
LABEL_73:
      abort();
    v33 = 2 * v32;
    v34 = (std::string *)operator new(48 * v32);
    *a1 = v34;
    a1[1] = v34;
    a1[2] = &v34[v33];
    while (1)
    {
      if (v6 == a3)
      {
        a1[1] = v34;
        return;
      }
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
        v34[1].__r_.__value_.__r.__words[0] = 0;
        v34[1].__r_.__value_.__l.__size_ = 0;
        v34[1].__r_.__value_.__r.__words[2] = 0;
        v36 = *(_BYTE **)(v6 + 24);
        v38 = *(_BYTE **)(v6 + 32);
        v37 = v38 - v36;
        if (v38 == v36)
          goto LABEL_53;
      }
      else
      {
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
        v34->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
        v34[1].__r_.__value_.__r.__words[0] = 0;
        v34[1].__r_.__value_.__l.__size_ = 0;
        v34[1].__r_.__value_.__r.__words[2] = 0;
        v36 = *(_BYTE **)(v6 + 24);
        v35 = *(_BYTE **)(v6 + 32);
        v37 = v35 - v36;
        if (v35 == v36)
          goto LABEL_53;
      }
      if (v37 < 0)
        goto LABEL_73;
      v39 = (char *)operator new(v37);
      v34[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
      v34[1].__r_.__value_.__l.__size_ = (std::string::size_type)v39;
      v40 = &v39[4 * (v37 >> 2)];
      v34[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v40;
      memcpy(v39, v36, v37);
      v34[1].__r_.__value_.__l.__size_ = (std::string::size_type)v40;
LABEL_53:
      v6 += 48;
      v34 += 2;
    }
  }
  v13 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v9) >> 4) >= a4)
  {
    if (a2 != a3)
    {
      v23 = 0;
      do
      {
        if ((std::string *)v6 != v9)
        {
          v26 = &v9[v23 / 0x18];
          v27 = (__int128 *)(v6 + v23);
          v28 = *(_BYTE *)(v6 + v23 + 23);
          if (SHIBYTE(v9[v23 / 0x18].__r_.__value_.__r.__words[2]) < 0)
          {
            if (v28 >= 0)
              v24 = (const std::string::value_type *)(v6 + v23);
            else
              v24 = *(const std::string::value_type **)(v6 + v23);
            if (v28 >= 0)
              v25 = *(unsigned __int8 *)(v6 + v23 + 23);
            else
              v25 = *(_QWORD *)(v6 + v23 + 8);
            std::string::__assign_no_alias<false>(v26, v24, v25);
          }
          else if ((*(_BYTE *)(v6 + v23 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v26, *(char **)(v6 + v23), *(_QWORD *)(v6 + v23 + 8));
          }
          else
          {
            v29 = *v27;
            v26->__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
            *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v29;
          }
          std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>(v9[v23 / 0x18 + 1].__r_.__value_.__r.__words, *(char **)(v6 + v23 + 24), *(char **)(v6 + v23 + 32), (uint64_t)(*(_QWORD *)(v6 + v23 + 32) - *(_QWORD *)(v6 + v23 + 24)) >> 2);
        }
        v23 += 48;
      }
      while (v6 + v23 != a3);
      v13 = a1[1];
      v9 = (std::string *)((char *)v9 + v23);
    }
    while (v13 != v9)
    {
      v52 = v13[-1].__r_.__value_.__l.__data_;
      if (v52)
      {
        v13[-1].__r_.__value_.__l.__size_ = (std::string::size_type)v52;
        operator delete(v52);
      }
      if (SHIBYTE(v13[-2].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13[-2].__r_.__value_.__l.__data_);
      v13 -= 2;
    }
    a1[1] = v9;
  }
  else
  {
    v14 = a2 + 16 * (((char *)v13 - (char *)v9) >> 4);
    if (v13 != v9)
    {
      v15 = 0;
      v16 = 16 * (((char *)v13 - (char *)v9) >> 4);
      do
      {
        if ((std::string *)v6 != v9)
        {
          v19 = &v9[v15 / 0x18];
          v20 = (__int128 *)(v6 + v15);
          v21 = *(_BYTE *)(v6 + v15 + 23);
          if (SHIBYTE(v9[v15 / 0x18].__r_.__value_.__r.__words[2]) < 0)
          {
            if (v21 >= 0)
              v17 = (const std::string::value_type *)(v6 + v15);
            else
              v17 = *(const std::string::value_type **)(v6 + v15);
            if (v21 >= 0)
              v18 = *(unsigned __int8 *)(v6 + v15 + 23);
            else
              v18 = *(_QWORD *)(v6 + v15 + 8);
            std::string::__assign_no_alias<false>(v19, v17, v18);
          }
          else if ((*(_BYTE *)(v6 + v15 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v19, *(char **)(v6 + v15), *(_QWORD *)(v6 + v15 + 8));
          }
          else
          {
            v22 = *v20;
            v19->__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v22;
          }
          std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>(v9[v15 / 0x18 + 1].__r_.__value_.__r.__words, *(char **)(v6 + v15 + 24), *(char **)(v6 + v15 + 32), (uint64_t)(*(_QWORD *)(v6 + v15 + 32) - *(_QWORD *)(v6 + v15 + 24)) >> 2);
        }
        v15 += 48;
      }
      while (v16 != v15);
      v9 = a1[1];
    }
    v41 = v9;
    if (v14 == a3)
    {
LABEL_83:
      a1[1] = v41;
    }
    else
    {
      v42 = 0;
      while (1)
      {
        v45 = &v9[v42 / 0x18];
        if (!&v9[v42 / 0x18])
          break;
        v46 = (__int128 *)(v14 + v42);
        if (*(char *)(v14 + v42 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v45, *(const std::string::value_type **)(v14 + v42), *(_QWORD *)(v14 + v42 + 8));
        }
        else
        {
          v47 = *v46;
          v45->__r_.__value_.__r.__words[2] = *((_QWORD *)v46 + 2);
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v47;
        }
        v48 = (std::string::__raw *)&v9[v42 / 0x18];
        v48[1].__words[0] = 0;
        v48[1].__words[1] = 0;
        v48[1].__words[2] = 0;
        v50 = *(_BYTE **)(v14 + v42 + 24);
        v49 = *(_BYTE **)(v14 + v42 + 32);
        v51 = v49 - v50;
        if (v49 != v50)
        {
          if (v51 < 0)
            goto LABEL_73;
          v43 = (char *)operator new(v49 - v50);
          v48[1].__words[0] = (std::string::size_type)v43;
          v48[1].__words[1] = (std::string::size_type)v43;
          v44 = &v43[4 * (v51 >> 2)];
          v48[1].__words[2] = (std::string::size_type)v44;
          memcpy(v43, v50, v51);
          v48[1].__words[1] = (std::string::size_type)v44;
        }
        v42 += 48;
        if (v14 + v42 == a3)
        {
          v41 = &v9[v42 / 0x18];
          goto LABEL_83;
        }
      }
      __break(1u);
    }
  }
}

void std::__tree<std::__value_type<webrtc::QualityLimitationReason,long long>,std::__map_value_compare<webrtc::QualityLimitationReason,std::__value_type<webrtc::QualityLimitationReason,long long>,std::less<webrtc::QualityLimitationReason>,true>,std::allocator<std::__value_type<webrtc::QualityLimitationReason,long long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<webrtc::QualityLimitationReason,long long>,std::__tree_node<std::__value_type<webrtc::QualityLimitationReason,long long>,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t ***v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v33 = (uint64_t *)v10[1];
            if (!v33)
              break;
            do
            {
              v10 = v33;
              v33 = (uint64_t *)*v33;
            }
            while (v33);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = a2;
        v13 = v9;
        while (1)
        {
          v9 = v10;
          v14 = *((_DWORD *)v12 + 8);
          *((_DWORD *)v13 + 8) = v14;
          v13[5] = v12[5];
          v15 = *v8;
          v16 = (uint64_t **)(a1 + 8);
          v17 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v13 = 0;
          v13[1] = 0;
          v13[2] = (uint64_t)v16;
          *v17 = v13;
          v18 = **(_QWORD **)a1;
          if (v18)
            goto LABEL_15;
LABEL_16:
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v13);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (uint64_t *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v12[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v12[2];
              v20 = *v4 == (_QWORD)v12;
              v12 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            v12 = v4;
            v13 = v9;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v16 = (uint64_t **)v15;
            if (v14 >= *((_DWORD *)v15 + 8))
              break;
            v15 = (uint64_t *)*v15;
            v17 = v16;
            if (!*v16)
              goto LABEL_14;
          }
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
        v17 = v16 + 1;
        *v13 = 0;
        v13[1] = 0;
        v13[2] = (uint64_t)v16;
        v16[1] = v13;
        v18 = **(_QWORD **)a1;
        if (!v18)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v18;
        v13 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<sigslot::_signal_base_interface *>::destroy(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        std::__tree<sigslot::_signal_base_interface *>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      v25 = (uint64_t *)operator new(0x30uLL);
      v26 = v25;
      *((_OWORD *)v25 + 2) = *((_OWORD *)v4 + 2);
      v27 = *v24;
      v28 = (uint64_t **)(a1 + 8);
      v29 = (uint64_t **)(a1 + 8);
      if (*v24)
        break;
LABEL_54:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v28;
      *v29 = v25;
      v30 = **(_QWORD **)a1;
      if (v30)
        goto LABEL_55;
LABEL_56:
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v26);
      ++*(_QWORD *)(a1 + 16);
      v31 = (_QWORD *)v4[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v4[2];
          v20 = *v32 == (_QWORD)v4;
          v4 = v32;
        }
        while (!v20);
      }
      v4 = v32;
      if (v32 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v28 = v27;
        if (*((_DWORD *)v25 + 8) >= *((_DWORD *)v27 + 8))
          break;
        v27 = (uint64_t **)*v27;
        v29 = v28;
        if (!*v28)
          goto LABEL_54;
      }
      v27 = (uint64_t **)v27[1];
    }
    while (v27);
    v29 = v28 + 1;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v28;
    v28[1] = v25;
    v30 = **(_QWORD **)a1;
    if (!v30)
      goto LABEL_56;
LABEL_55:
    *(_QWORD *)a1 = v30;
    v26 = *v29;
    goto LABEL_56;
  }
}

