void webrtc::StreamCollection::RemoveStream(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  unsigned __int8 v6;
  const void *p_s2;
  unint64_t v8;
  unsigned __int8 v9;
  void *v10;
  void **v11;
  size_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__s2;
  unint64_t v22;
  unsigned __int8 v23;
  void *__p[2];
  unsigned __int8 v25;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a1 + 16))
    return;
  for (i = -v2; ; i -= 8)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v2 + 32))(__p);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(&__s2, a2);
    v6 = v23;
    if ((char)v23 < 0)
    {
      v8 = v22;
      if ((v22 & 0x8000000000000000) != 0)
        goto LABEL_40;
      p_s2 = __s2;
      if (v22)
      {
        if (!__s2)
          goto LABEL_40;
      }
    }
    else
    {
      p_s2 = &__s2;
      v8 = v23;
    }
    v9 = v25;
    v10 = (v25 & 0x80u) == 0 ? (void *)v25 : __p[1];
    v11 = (v25 & 0x80u) == 0 ? __p : (void **)__p[0];
    v12 = v8 >= (unint64_t)v10 ? (size_t)v10 : v8;
    v13 = memcmp(v11, p_s2, v12) == 0;
    v14 = (void *)v8 == v10 && v13;
    if ((v6 & 0x80) != 0)
      break;
    if ((v9 & 0x80) != 0)
      goto LABEL_25;
LABEL_22:
    if (v14)
      goto LABEL_28;
LABEL_26:
    v2 += 8;
    if (v2 == *(_QWORD *)(a1 + 16))
      return;
  }
  operator delete(__s2);
  if ((v25 & 0x80) == 0)
    goto LABEL_22;
LABEL_25:
  operator delete(__p[0]);
  if (!v14)
    goto LABEL_26;
LABEL_28:
  v15 = *(_QWORD **)(a1 + 16);
  if ((_QWORD *)v2 == v15)
  {
LABEL_40:
    __break(1u);
    return;
  }
  v16 = (_QWORD *)(8 - i);
  if ((_QWORD *)(8 - i) == v15)
  {
    v17 = -i;
  }
  else
  {
    do
    {
      v18 = *(v16 - 1);
      *(v16 - 1) = *v16;
      *v16 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      ++v16;
    }
    while (v16 != v15);
    v15 = *(_QWORD **)(a1 + 16);
    v17 = (uint64_t)(v16 - 1);
  }
  while (v15 != (_QWORD *)v17)
  {
    v20 = *--v15;
    v19 = v20;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  *(_QWORD *)(a1 + 16) = v17;
}

_QWORD *webrtc::TransceiverList::Remove(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  _QWORD *v9;

  v3 = result;
  v4 = (uint64_t *)*result;
  v5 = (uint64_t *)result[1];
  if ((uint64_t *)*result != v5)
  {
    while (*v4 != *a2)
    {
      if (++v4 == v5)
      {
        v4 = (uint64_t *)result[1];
        break;
      }
    }
  }
  v6 = v4 + 1;
  if (v4 != v5 && v6 != v5)
  {
    do
    {
      v8 = *v6;
      if (*v6 != *a2)
      {
        *v6 = 0;
        result = (_QWORD *)*v4;
        *v4 = v8;
        if (result)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        ++v4;
      }
      ++v6;
    }
    while (v6 != v5);
    v5 = (uint64_t *)v3[1];
  }
  if (v5 < v4)
  {
    __break(1u);
  }
  else if (v4 != v5)
  {
    while (v5 != v4)
    {
      v9 = (_QWORD *)*--v5;
      result = v9;
      if (v9)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
    v3[1] = v4;
  }
  return result;
}

uint64_t *webrtc::SdpOfferAnswerHandler::IceRestartPending(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t *v3;
  uint64_t *result;
  uint64_t *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  size_t v10;
  int v11;

  v2 = a2;
  v3 = (uint64_t *)(a1 + 184);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 176, a2, *(uint64_t **)(a1 + 184), (uint64_t *)(a1 + 184));
  if (v3 == result)
    goto LABEL_19;
  v5 = result;
  if (*((char *)v2 + 23) < 0)
  {
    v6 = (size_t)v2[1];
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_23;
    v2 = (const void **)*v2;
    if (v6)
    {
      if (!v2)
        goto LABEL_23;
    }
  }
  else
  {
    v6 = *((unsigned __int8 *)v2 + 23);
  }
  v7 = result + 4;
  if ((*((char *)result + 55) & 0x80000000) == 0)
  {
    v8 = *((unsigned __int8 *)result + 55);
    goto LABEL_14;
  }
  v8 = result[5];
  if ((v8 & 0x8000000000000000) == 0)
  {
    v7 = (_QWORD *)*v7;
    if (!v8 || v7 != 0)
    {
LABEL_14:
      if (v8 >= v6)
        v10 = v6;
      else
        v10 = v8;
      v11 = memcmp(v2, v7, v10);
      if (v11)
      {
        if ((v11 & 0x80000000) == 0)
          return (uint64_t *)(v3 != v5);
      }
      else if (v6 >= v8)
      {
        return (uint64_t *)(v3 != v5);
      }
LABEL_19:
      v5 = v3;
      return (uint64_t *)(v3 != v5);
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t webrtc::SdpOfferAnswerHandler::NeedsIceRestart(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t *webrtc::SdpOfferAnswerHandler::GetDtlsRole(uint64_t a1, const void **a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
  return webrtc::JsepTransportController::GetDtlsRole(v3, a2);
}

uint64_t webrtc::SdpOfferAnswerHandler::CheckIfNegotiationIsNeeded(webrtc::SdpOfferAnswerHandler *this)
{
  uint64_t v1;
  webrtc::SdpOfferAnswerHandler *v3;
  uint64_t v4;
  webrtc::RtpTransceiver *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  webrtc::TransceiverList *v19;
  const webrtc::SessionDescriptionInterface *v20;
  webrtc::_anonymous_namespace_ **v21;
  int v22;
  int v23;
  _QWORD *TransceiverMSection;
  webrtc::_anonymous_namespace_ *v25;
  webrtc::RtpTransceiver *v26;
  const webrtc::SessionDescriptionInterface *v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  unint64_t v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  char *v38;
  uint64_t v39;
  __int128 *v40;
  std::string *v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  std::string *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  std::string::size_type size;
  int v68;
  std::string *v69;
  uint64_t v70;
  int v72;
  int v73;
  int v74;
  webrtc::_anonymous_namespace_ *v75;
  webrtc::RtpTransceiver *v76;
  const webrtc::SessionDescriptionInterface *v77;
  _QWORD *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  _BOOL4 v85;
  BOOL v86;
  _BOOL4 v87;
  int v88;
  webrtc::SdpOfferAnswerHandler *v90;
  webrtc::RtpTransceiver *v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  webrtc::_anonymous_namespace_ **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void **v99;
  void **v100;
  char *v101;
  char *v102;

  if (*(_QWORD *)(*((_QWORD *)this + 25) + 16))
    return 1;
  v3 = this;
  v4 = (*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)this + 40))(this);
  if (!v4)
    return 1;
  v5 = (webrtc::RtpTransceiver *)v4;
  if (!*(_BYTE *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 1) + 120))(*((_QWORD *)v3 + 1)) + 72))
    goto LABEL_33;
  v6 = (*(uint64_t (**)(webrtc::RtpTransceiver *))(*(_QWORD *)v5 + 32))(v5);
  v8 = *(_QWORD **)v6;
  v7 = *(_QWORD **)(v6 + 8);
  if (*(_QWORD **)v6 == v7)
    return 1;
  while (1)
  {
    if (v8)
    {
      v9 = v8[4];
      if (v9)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9) == 2)
          break;
      }
    }
    v8 += 5;
    if (v8 == v7)
      return 1;
  }
  if (!(*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)v3 + 48))(v3))
    goto LABEL_33;
  v10 = (*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)v3 + 48))(v3);
  v11 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v12 = *v11;
  v13 = v11[1];
  if (*v11 == v13)
    goto LABEL_33;
  v14 = *((_BYTE *)v8 + 23);
  if (v14 >= 0)
    v15 = *((unsigned __int8 *)v8 + 23);
  else
    v15 = v8[1];
  if (v14 < 0)
    v8 = (_QWORD *)*v8;
  while (1)
  {
    v16 = *(unsigned __int8 *)(v12 + 23);
    v17 = (v16 & 0x80u) == 0 ? *(unsigned __int8 *)(v12 + 23) : *(_QWORD *)(v12 + 8);
    if (v17 == v15)
      break;
LABEL_21:
    v12 += 40;
    if (v12 == v13)
      goto LABEL_33;
  }
  if ((v16 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v12, v8, *(_QWORD *)(v12 + 8)))
      goto LABEL_32;
    goto LABEL_21;
  }
  if (*(_BYTE *)(v12 + 23))
  {
    v18 = 0;
    do
    {
      if (*(unsigned __int8 *)(v12 + v18) != *((unsigned __int8 *)v8 + v18))
        goto LABEL_21;
      ++v18;
    }
    while (v16 != v18);
    if (!v12)
    {
LABEL_33:
      if (!*(_QWORD *)(*((_QWORD *)v3 + 2) + 96))
        return 0;
      v19 = (webrtc::TransceiverList *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 1) + 64))(*((_QWORD *)v3 + 1));
      if (v19)
        v19 = (webrtc::TransceiverList *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 1) + 64))(*((_QWORD *)v3 + 1))
                                        + 8);
      webrtc::TransceiverList::ListInternal(v19, &v101);
      v21 = (webrtc::_anonymous_namespace_ **)v101;
      v94 = v102;
      if (v101 == v102)
      {
        v1 = 0;
        goto LABEL_209;
      }
      v90 = v3;
      v91 = v5;
LABEL_47:
      v25 = *v21;
      v26 = (webrtc::RtpTransceiver *)(*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)v3 + 48))(v3);
      if ((*(unsigned int (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)*v21 + 64))(*v21))
      {
        if (!TransceiverMSection || *((_BYTE *)TransceiverMSection + 28) || v28 && *((_BYTE *)v28 + 28))
          goto LABEL_46;
LABEL_207:
        v1 = 1;
LABEL_208:
        v21 = (webrtc::_anonymous_namespace_ **)v101;
LABEL_209:
        if (v21)
          operator delete(v21);
        return v1;
      }
      if ((*(unsigned int (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)*v21 + 72))(*v21))
      {
        if ((*(unsigned int (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)*v21 + 64))(*v21))
          v29 = TransceiverMSection == 0;
        else
          v29 = 1;
        if (v29)
          goto LABEL_207;
      }
      else if (!TransceiverMSection)
      {
        goto LABEL_207;
      }
      v30 = TransceiverMSection[4];
      v95 = v21;
      if ((*(unsigned int (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)*v21 + 80))(*v21) > 1)
        goto LABEL_154;
      v93 = v28;
      v31 = *(_QWORD *)(v30 + 96);
      v97 = *(_QWORD *)(v30 + 104);
      if (v97 == v31)
        goto LABEL_207;
      v92 = v30;
      v32 = 0;
      v33 = 0;
      v34 = 0;
LABEL_66:
      v35 = *(_QWORD *)(v31 + 96);
      v36 = *(_QWORD *)(v31 + 104);
      v37 = v36 - v35;
      if (v36 == v35)
        goto LABEL_65;
      if (0xAAAAAAAAAAAAAAABLL * (v37 >> 3) > 0xAAAAAAAAAAAAAAALL)
LABEL_211:
        abort();
      v38 = (char *)operator new(v37);
      v39 = 0;
      do
      {
        while (1)
        {
          v40 = (__int128 *)(v35 + v39);
          v41 = (std::string *)&v38[v39];
          if ((*(char *)(v35 + v39 + 23) & 0x80000000) == 0)
            break;
          std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v40, *((_QWORD *)v40 + 1));
          v39 += 24;
          if (v35 + v39 == v36)
            goto LABEL_72;
        }
        v42 = *v40;
        v41->__r_.__value_.__r.__words[2] = *((_QWORD *)v40 + 2);
        *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
        v39 += 24;
      }
      while (v35 + v39 != v36);
LABEL_72:
      if (!v39)
        goto LABEL_64;
      v96 = v39 / 24;
      v43 = &v38[24 * (v39 / 24)];
      v44 = (uint64_t)v38;
      while (1)
      {
        if ((unint64_t)v34 < v33)
        {
          if (!v34)
            goto LABEL_191;
          if (*(char *)(v44 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)v44, *(_QWORD *)(v44 + 8));
          }
          else
          {
            v45 = *(_OWORD *)v44;
            v34->__r_.__value_.__r.__words[2] = *(_QWORD *)(v44 + 16);
            *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v45;
          }
          ++v34;
          goto LABEL_75;
        }
        v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v32) >> 3) + 1;
        if (v46 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_211;
        if (0x5555555555555556 * ((uint64_t)(v33 - (_QWORD)v32) >> 3) > v46)
          v46 = 0x5555555555555556 * ((uint64_t)(v33 - (_QWORD)v32) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v32) >> 3) >= 0x555555555555555)
          v46 = 0xAAAAAAAAAAAAAAALL;
        if (!v46)
        {
LABEL_191:
          __break(1u);
          goto LABEL_192;
        }
        if (v46 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v47 = 24 * v46;
        v48 = (char *)operator new(24 * v46);
        v49 = v48;
        v50 = (std::string *)&v48[8 * (((char *)v34 - (char *)v32) >> 3)];
        if (*(char *)(v44 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v48[8 * (((char *)v34 - (char *)v32) >> 3)], *(const std::string::value_type **)v44, *(_QWORD *)(v44 + 8));
          if (v34 != v32)
          {
LABEL_90:
            v51 = v34;
            v52 = v50;
            do
            {
              v53 = *(_OWORD *)&v51[-1].__r_.__value_.__l.__data_;
              v52[-1].__r_.__value_.__r.__words[2] = v51[-1].__r_.__value_.__r.__words[2];
              *(_OWORD *)&v52[-1].__r_.__value_.__l.__data_ = v53;
              --v52;
              v51[-1].__r_.__value_.__l.__size_ = 0;
              v51[-1].__r_.__value_.__r.__words[2] = 0;
              v51[-1].__r_.__value_.__r.__words[0] = 0;
              --v51;
            }
            while (v51 != v32);
            do
            {
              if (SHIBYTE(v34[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v34[-1].__r_.__value_.__l.__data_);
              --v34;
            }
            while (v34 != v32);
            goto LABEL_98;
          }
        }
        else
        {
          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = *(_OWORD *)v44;
          v50->__r_.__value_.__r.__words[2] = *(_QWORD *)(v44 + 16);
          if (v34 != v32)
            goto LABEL_90;
        }
        v52 = v50;
LABEL_98:
        v33 = (unint64_t)&v49[v47];
        v34 = v50 + 1;
        if (v32)
          operator delete(v32);
        v32 = v52;
LABEL_75:
        v44 += 24;
        if ((char *)v44 == v43)
        {
          v54 = 24 * v96;
          do
          {
            if (v38[v54 - 1] < 0)
              operator delete(*(void **)&v38[v54 - 24]);
            v54 -= 24;
          }
          while (v54);
LABEL_64:
          operator delete(v38);
LABEL_65:
          v31 += 144;
          if (v31 != v97)
            goto LABEL_66;
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v95 + 48))(&v98);
          (*(void (**)(void ***__return_ptr))(*(_QWORD *)v98 + 80))(&v99);
          if (v98)
            (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
          v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v32) >> 3);
          v33 = (unint64_t)v99;
          v44 = (uint64_t)v100;
          v28 = v93;
          if (v55 != 0xAAAAAAAAAAAAAAABLL * (v100 - v99))
          {
LABEL_192:
            if (v33)
            {
              if (v44 != v33)
              {
                do
                {
                  if (*(char *)(v44 - 1) < 0)
                    operator delete(*(void **)(v44 - 24));
                  v44 -= 24;
                }
                while (v44 != v33);
                v44 = (uint64_t)v99;
              }
              v100 = (void **)v33;
              operator delete((void *)v44);
            }
            if (v32)
            {
              while (v34 != v32)
              {
                if (SHIBYTE(v34[-1].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v34[-1].__r_.__value_.__l.__data_);
                --v34;
              }
              operator delete(v32);
            }
            goto LABEL_207;
          }
          v56 = __clz(v55);
          v57 = 126 - 2 * v56;
          if (v100 == v99)
            v58 = 0;
          else
            v58 = 126 - 2 * v56;
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v99, (unint64_t)v100, v58, 1uLL);
          if (v34 == v32)
            v59 = 0;
          else
            v59 = v57;
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v32, (unint64_t)v34, v59, 1uLL);
          v60 = (uint64_t)v99;
          v61 = v100;
          if ((char *)v100 - (char *)v99 == (char *)v34 - (char *)v32)
          {
            v3 = v90;
            if (v99 == v100)
            {
              v64 = 1;
            }
            else
            {
              v62 = v32;
              v63 = (uint64_t)v99;
              do
              {
                v65 = *(unsigned __int8 *)(v63 + 23);
                if ((v65 & 0x80u) == 0)
                  v66 = *(unsigned __int8 *)(v63 + 23);
                else
                  v66 = *(_QWORD *)(v63 + 8);
                size = HIBYTE(v62->__r_.__value_.__r.__words[2]);
                v68 = (char)size;
                if ((size & 0x80u) != 0)
                  size = v62->__r_.__value_.__l.__size_;
                if (v66 != size)
                  goto LABEL_135;
                if (v68 >= 0)
                  v69 = v62;
                else
                  v69 = (std::string *)v62->__r_.__value_.__r.__words[0];
                if ((v65 & 0x80) != 0)
                {
                  if (memcmp(*(const void **)v63, v69, *(_QWORD *)(v63 + 8)))
                    goto LABEL_135;
                }
                else if (*(_BYTE *)(v63 + 23))
                {
                  v70 = 0;
                  while (*(unsigned __int8 *)(v63 + v70) == v69->__r_.__value_.__s.__data_[v70])
                  {
                    if (v65 == ++v70)
                      goto LABEL_119;
                  }
LABEL_135:
                  v64 = 0;
                  goto LABEL_136;
                }
LABEL_119:
                v63 += 24;
                ++v62;
              }
              while ((void **)v63 != v61);
              v64 = 1;
LABEL_136:
              v28 = v93;
            }
          }
          else
          {
            v64 = 0;
            v3 = v90;
          }
          if (v60)
          {
            if (v61 != (void **)v60)
            {
              do
              {
                if (*((char *)v61 - 1) < 0)
                  operator delete(*(v61 - 3));
                v61 -= 3;
              }
              while (v61 != (void **)v60);
              v61 = v99;
            }
            v100 = (void **)v60;
            operator delete(v61);
          }
          if (v32)
          {
            while (v34 != v32)
            {
              if (SHIBYTE(v34[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v34[-1].__r_.__value_.__l.__data_);
              --v34;
            }
            operator delete(v32);
          }
          v5 = v91;
          v30 = v92;
          if (!v64)
            goto LABEL_207;
LABEL_154:
          v21 = v95;
          if (!(*(unsigned int (**)(webrtc::RtpTransceiver *))(*(_QWORD *)v5 + 56))(v5))
          {
            if (!(*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)v3 + 48))(v3) || v28 == 0)
              goto LABEL_207;
            v72 = *(_DWORD *)(v30 + 124);
            v73 = *(_DWORD *)(v28[4] + 124);
            if ((*(unsigned int (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)*v95 + 80))(*v95) != v72)
            {
              v74 = (*(uint64_t (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)*v95 + 80))(*v95);
              if (v73 == 2)
              {
                v73 = 1;
              }
              else if (v73 == 1)
              {
                v73 = 2;
              }
              if (v74 != v73)
                goto LABEL_207;
            }
          }
          if ((*(unsigned int (**)(webrtc::RtpTransceiver *))(*(_QWORD *)v5 + 56))(v5) == 2)
          {
            if (!(*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)v3 + 32))(v3))
              goto LABEL_207;
            v75 = *v95;
            v76 = (webrtc::RtpTransceiver *)(*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)v3 + 32))(v3);
            if (v78)
            {
              v79 = *(_DWORD *)(v78[4] + 124);
              v80 = *(_DWORD *)(v30 + 124);
              v81 = (*(uint64_t (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)*v95 + 80))(*v95);
              if (v79 == 1)
                v82 = 2;
              else
                v82 = v79;
              if (v79 == 2)
                v83 = 1;
              else
                v83 = v82;
              v84 = v83 | v81;
              if ((v81 & 0xFFFFFFFD) != 0)
              {
LABEL_175:
                v85 = 0;
                v86 = v84 > 1;
                v87 = 1;
                goto LABEL_184;
              }
            }
            else
            {
              v80 = *(_DWORD *)(v30 + 124);
              v88 = (*(uint64_t (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)*v95 + 80))(*v95);
              v83 = 3;
              v84 = v88 | 3;
              if ((v88 & 0xFFFFFFFD) != 0)
                goto LABEL_175;
            }
            v29 = (v83 & 0xFFFFFFFD) == 0;
            v85 = v29;
            v87 = !v29;
            v86 = v84 > 1;
            if (v84 <= 1 && !v87)
            {
              v23 = 0;
            }
            else
            {
LABEL_184:
              if (v86 || v85)
              {
                v22 = v84 < 2 || v87;
                v23 = v22 ? 3 : 2;
              }
              else
              {
                v23 = 1;
              }
            }
            if (v80 != v23)
              goto LABEL_207;
          }
LABEL_46:
          if (++v21 == (webrtc::_anonymous_namespace_ **)v94)
          {
            v1 = 0;
            goto LABEL_208;
          }
          goto LABEL_47;
        }
      }
    }
  }
LABEL_32:
  if (!*(_BYTE *)(v12 + 28))
    goto LABEL_33;
  return 1;
}

_QWORD *webrtc::`anonymous namespace'::FindTransceiverMSection(webrtc::_anonymous_namespace_ *this, webrtc::RtpTransceiver *a2, const webrtc::SessionDescriptionInterface *a3)
{
  uint64_t *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *__p[2];
  unsigned __int8 v16;
  char v17;
  void *v18;
  char v19;
  char v20;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 40))(&v18);
  if (!v20)
    return 0;
  v5 = (uint64_t *)(*(uint64_t (**)(webrtc::RtpTransceiver *))(*(_QWORD *)a2 + 32))(a2);
  result = (*(_QWORD *(**)(void **__return_ptr, webrtc::_anonymous_namespace_ *))(*(_QWORD *)this + 40))(__p, this);
  if (v17)
  {
    v7 = *v5;
    v8 = v5[1];
    v9 = v16;
    if (*v5 != v8)
    {
      if ((v16 & 0x80u) == 0)
        v10 = v16;
      else
        v10 = (unint64_t)__p[1];
      if ((v16 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      do
      {
        v12 = *(unsigned __int8 *)(v7 + 23);
        if ((v12 & 0x80u) == 0)
          v13 = (void *)*(unsigned __int8 *)(v7 + 23);
        else
          v13 = *(void **)(v7 + 8);
        if (v13 == (void *)v10)
        {
          if ((v12 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v7, v11, *(_QWORD *)(v7 + 8)))
              goto LABEL_21;
          }
          else
          {
            if (!*(_BYTE *)(v7 + 23))
            {
LABEL_21:
              if ((v9 & 0x80) == 0)
                goto LABEL_22;
LABEL_26:
              operator delete(__p[0]);
              if (v20)
                goto LABEL_27;
              return (_QWORD *)v7;
            }
            v14 = 0;
            while (*(unsigned __int8 *)(v7 + v14) == *((unsigned __int8 *)v11 + v14))
            {
              if (v12 == ++v14)
                goto LABEL_21;
            }
          }
        }
        v7 += 40;
      }
      while (v7 != v8);
    }
    v7 = 0;
    if ((v9 & 0x80) != 0)
      goto LABEL_26;
LABEL_22:
    if (v20)
    {
LABEL_27:
      if (v19 < 0)
        operator delete(v18);
    }
    return (_QWORD *)v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void webrtc::`anonymous namespace'::ValidatePayloadTypes(webrtc::_anonymous_namespace_ *this, const cricket::SessionDescription *a2, const cricket::SessionDescription *a3)
{
  const cricket::SessionDescription *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  std::string *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type size;
  std::string *v19;
  char *v20;
  std::string::size_type v21;
  int v22;
  size_t v23;
  void **p_src;
  _BYTE *v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  BOOL v30;
  void **v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string *v34;
  char *v35;
  std::string::size_type v36;
  unint64_t v37;
  std::string::size_type v38;
  int v39;
  uint64_t v40;
  std::string::size_type v41;
  std::string::size_type v42;
  BOOL v43;
  std::string *v44;
  char *v45;
  std::string::size_type v46;
  char *v47;
  size_t v48;
  BOOL v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string *v52;
  char *v53;
  std::string::size_type v54;
  unint64_t v55;
  std::string::size_type v56;
  int v57;
  uint64_t v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string *v61;
  char *v62;
  std::string::size_type v63;
  unint64_t v64;
  const char *v65;
  size_t v66;
  std::string::size_type v67;
  int v68;
  uint64_t v69;
  std::string::size_type v70;
  std::string::size_type v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::string *v79;
  char *v80;
  std::string::size_type v81;
  std::string *v82;
  std::string::size_type v83;
  std::string::size_type v84;
  std::string::size_type v85;
  std::string::size_type v86;
  std::string *v87;
  char *v88;
  std::string::size_type v89;
  int v90;
  size_t v91;
  void **v92;
  _BYTE *v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  BOOL v98;
  void **v99;
  std::string::size_type v100;
  std::string::size_type v101;
  std::string *v102;
  char *v103;
  std::string::size_type v104;
  unint64_t v105;
  std::string::size_type v106;
  int v107;
  uint64_t v108;
  std::string::size_type v109;
  std::string::size_type v110;
  std::string *v111;
  char *v112;
  std::string::size_type v113;
  int v114;
  char *v115;
  size_t v116;
  BOOL v117;
  std::string::size_type v118;
  std::string::size_type v119;
  std::string *v120;
  char *v121;
  std::string::size_type v122;
  unint64_t v123;
  std::string::size_type v124;
  int v125;
  uint64_t v126;
  std::string::size_type v127;
  std::string::size_type v128;
  std::string *v129;
  char *v130;
  std::string::size_type v131;
  unint64_t v132;
  const char *v133;
  size_t v134;
  std::string::size_type v135;
  int v136;
  uint64_t v137;
  std::string::size_type v138;
  std::string::size_type v139;
  std::string *v140;
  char *v141;
  std::string::size_type v142;
  size_t v143;
  std::string *p_str;
  size_t v145;
  char *v146;
  std::string *v147;
  uint64_t v148;
  uint64_t v149;
  void **__src;
  size_t v151;
  unint64_t v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string v157;
  std::string v158;
  std::string v159;
  _BYTE v160[12];
  unsigned int v161;
  std::string __str;
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  if (a2 == a3)
  {
LABEL_20:
    *(_DWORD *)this = 0;
    *((_BYTE *)this + 38) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    *(_QWORD *)((char *)this + 29) = 0;
    return;
  }
  v5 = a2;
  while (1)
  {
    if (!*((_DWORD *)v5 + 6))
    {
      v6 = *((_QWORD *)v5 + 4);
      if (!*((_BYTE *)v5 + 28) && v6 != 0)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v6 + 96))(*((_QWORD *)v5 + 4)))
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) <= 1)
          {
            v8 = *(_QWORD *)(v6 + 280);
            v9 = *(_QWORD *)(v6 + 288);
            if (v8 != v9)
              break;
          }
        }
      }
    }
LABEL_3:
    v5 = (const cricket::SessionDescription *)((char *)v5 + 40);
    if (v5 == a3)
      goto LABEL_20;
  }
  while (1)
  {
    cricket::Codec::Codec((cricket::Codec *)v160, (const cricket::Codec *)v8);
    v10 = *(unsigned __int8 *)(v6 + 32);
    v11 = v161;
    v12 = v161 & 0xFFFFFFE0;
    cricket::Codec::~Codec((cricket::Codec *)v160);
    v13 = v12 != 64 || v10 == 0;
    if (!v13 || v11 >= 0x80)
      break;
    v8 += 216;
    if (v8 == v9)
      goto LABEL_3;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    goto LABEL_160;
  if (*((char *)v5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
  else
    v153 = *(std::string *)v5;
  v14 = std::string::insert(&v153, 0, "The media section with MID='");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = v154.__r_.__value_.__r.__words[2];
  if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = 22;
  else
    v17 = (v154.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v154.__r_.__value_.__r.__words[2]);
  else
    size = v154.__r_.__value_.__l.__size_;
  if (v17 - size >= 0x1F)
  {
    v19 = &v154;
    if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = (std::string *)v154.__r_.__value_.__r.__words[0];
    v20 = (char *)v19 + size;
    if ((char *)v19 + size <= "' used an invalid payload type " && v20 + 31 > "' used an invalid payload type ")
      goto LABEL_330;
    qmemcpy(v20, "' used an invalid payload type ", 31);
    v21 = size + 31;
    if ((v16 & 0x8000000000000000) != 0)
      v154.__r_.__value_.__l.__size_ = size + 31;
    else
      *((_BYTE *)&v154.__r_.__value_.__s + 23) = v21 & 0x7F;
    v19->__r_.__value_.__s.__data_[v21] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v154, v17, size - v17 + 31, size, size, 0, 0x1FuLL, "' used an invalid payload type ");
  }
  v155 = v154;
  memset(&v154, 0, sizeof(v154));
  v22 = snprintf((char *)&__str, 0x20uLL, "%d", *(_DWORD *)(v8 + 12));
  if (v22 < 0)
    goto LABEL_331;
  v23 = v22;
  if (v22 > 0x16)
  {
    v27 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v27 = v22 | 7;
    v28 = v27 + 1;
    p_src = (void **)operator new(v27 + 1);
    v151 = v23;
    v152 = v28 | 0x8000000000000000;
    __src = p_src;
    v25 = (char *)p_src + v23;
    v26 = (char *)p_src + v23 > (char *)&__str;
    if (p_src > (void **)&__str)
      goto LABEL_50;
  }
  else
  {
    HIBYTE(v152) = v22;
    p_src = (void **)&__src;
    v25 = (char *)&__src + v23;
    v26 = (char *)&__src + v23 > (char *)&__str;
    if (&__src > (void ***)&__str)
      goto LABEL_50;
  }
  if (v26)
    goto LABEL_330;
LABEL_50:
  if ((_DWORD)v23)
    memcpy(p_src, &__str, v23);
  *v25 = 0;
  if (SHIBYTE(v152) < 0)
  {
    v31 = __src;
    v29 = v151;
    v30 = v151 == 0;
    if (!__src && v151)
      goto LABEL_330;
  }
  else
  {
    v29 = HIBYTE(v152);
    v30 = HIBYTE(v152) == 0;
    v31 = (void **)&__src;
  }
  if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = 22;
  else
    v32 = (v155.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
  else
    v33 = v155.__r_.__value_.__l.__size_;
  if (v32 - v33 >= v29)
  {
    if (!v30)
    {
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v155;
      else
        v34 = (std::string *)v155.__r_.__value_.__r.__words[0];
      v35 = (char *)v34 + v33;
      if ((char *)v34 + v33 <= (char *)v31 && &v35[v29] > (char *)v31)
        goto LABEL_330;
      memmove(v35, v31, v29);
      v36 = v33 + v29;
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        v155.__r_.__value_.__l.__size_ = v33 + v29;
      else
        *((_BYTE *)&v155.__r_.__value_.__s + 23) = v36 & 0x7F;
      v34->__r_.__value_.__s.__data_[v36] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v155, v32, v33 + v29 - v32, v33, v33, 0, v29, (const std::string::value_type *)v31);
  }
  v37 = v155.__r_.__value_.__r.__words[2];
  v156 = v155;
  memset(&v155, 0, sizeof(v155));
  v38 = HIBYTE(v37);
  v39 = SHIBYTE(v37);
  v40 = (v37 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v39 >= 0)
    v41 = 22;
  else
    v41 = v40;
  if (v39 >= 0)
    v42 = v38;
  else
    v42 = v156.__r_.__value_.__l.__size_;
  if (v41 - v42 >= 0xC)
  {
    v43 = v39 < 0;
    v44 = &v156;
    if (v43)
      v44 = (std::string *)v156.__r_.__value_.__r.__words[0];
    v45 = (char *)v44 + v42;
    if ((char *)v44 + v42 <= " for codec '" && v45 + 12 > " for codec '")
      goto LABEL_330;
    *((_DWORD *)v45 + 2) = 656434021;
    *(_QWORD *)v45 = *(_QWORD *)" for codec '";
    v46 = v42 + 12;
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      v156.__r_.__value_.__l.__size_ = v42 + 12;
    else
      *((_BYTE *)&v156.__r_.__value_.__s + 23) = v46 & 0x7F;
    v44->__r_.__value_.__s.__data_[v46] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v156, v41, v42 - v41 + 12, v42, v42, 0, 0xCuLL, " for codec '");
  }
  v157 = v156;
  memset(&v156, 0, sizeof(v156));
  if (*(char *)(v8 + 39) < 0)
  {
    v47 = *(char **)(v8 + 16);
    v48 = *(_QWORD *)(v8 + 24);
    v49 = v48 == 0;
    if (!v47 && v48)
      goto LABEL_330;
  }
  else
  {
    v47 = (char *)(v8 + 16);
    v48 = *(unsigned __int8 *)(v8 + 39);
    v49 = *(_BYTE *)(v8 + 39) == 0;
  }
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = 22;
  else
    v50 = (v157.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
  else
    v51 = v157.__r_.__value_.__l.__size_;
  if (v50 - v51 >= v48)
  {
    if (!v49)
    {
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v157;
      else
        v52 = (std::string *)v157.__r_.__value_.__r.__words[0];
      v53 = (char *)v52 + v51;
      if ((char *)v52 + v51 <= v47 && &v53[v48] > v47)
        goto LABEL_330;
      memmove(v53, v47, v48);
      v54 = v51 + v48;
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        v157.__r_.__value_.__l.__size_ = v51 + v48;
      else
        *((_BYTE *)&v157.__r_.__value_.__s + 23) = v54 & 0x7F;
      v52->__r_.__value_.__s.__data_[v54] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v157, v50, v51 + v48 - v50, v51, v51, 0, v48, v47);
  }
  v55 = v157.__r_.__value_.__r.__words[2];
  v158 = v157;
  memset(&v157, 0, sizeof(v157));
  v56 = HIBYTE(v55);
  v57 = SHIBYTE(v55);
  v58 = (v55 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v57 >= 0)
    v59 = 22;
  else
    v59 = v58;
  if (v57 >= 0)
    v60 = v56;
  else
    v60 = v158.__r_.__value_.__l.__size_;
  if (v59 - v60 >= 0xB)
  {
    v43 = v57 < 0;
    v61 = &v158;
    if (v43)
      v61 = (std::string *)v158.__r_.__value_.__r.__words[0];
    v62 = (char *)v61 + v60;
    if ((char *)v61 + v60 <= ", rtcp-mux:" && v62 + 11 > ", rtcp-mux:")
      goto LABEL_330;
    *(_DWORD *)(v62 + 7) = 980972909;
    *(_QWORD *)v62 = *(_QWORD *)", rtcp-mux:";
    v63 = v60 + 11;
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
      v158.__r_.__value_.__l.__size_ = v60 + 11;
    else
      *((_BYTE *)&v158.__r_.__value_.__s + 23) = v63 & 0x7F;
    v61->__r_.__value_.__s.__data_[v63] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v158, v59, v60 - v59 + 11, v60, v60, 0, 0xBuLL, ", rtcp-mux:");
  }
  v64 = v158.__r_.__value_.__r.__words[2];
  v159 = v158;
  memset(&v158, 0, sizeof(v158));
  if (*(_BYTE *)(v6 + 32))
    v65 = "enabled";
  else
    v65 = "disabled";
  if (*(_BYTE *)(v6 + 32))
    v66 = 7;
  else
    v66 = 8;
  v67 = HIBYTE(v64);
  v68 = SHIBYTE(v64);
  v69 = (v64 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v68 >= 0)
    v70 = 22;
  else
    v70 = v69;
  if (v68 >= 0)
    v71 = v67;
  else
    v71 = v159.__r_.__value_.__l.__size_;
  if (v70 - v71 >= v66)
  {
    if (v68 >= 0)
      v79 = &v159;
    else
      v79 = (std::string *)v159.__r_.__value_.__r.__words[0];
    v80 = (char *)v79 + v71;
    if ((char *)v79 + v71 <= v65 && &v80[v66] > v65)
      goto LABEL_330;
    memcpy(v80, v65, v66);
    v81 = v71 + v66;
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
      v159.__r_.__value_.__l.__size_ = v71 + v66;
    else
      *((_BYTE *)&v159.__r_.__value_.__s + 23) = v81 & 0x7F;
    v79->__r_.__value_.__s.__data_[v81] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v159, v70, v71 + v66 - v70, v71, v71, 0, v66, v65);
  }
  __str = v159;
  memset(&v159, 0, sizeof(v159));
  rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v72, v73, v74, v75, v76, v77, v78, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_153:
      if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_154;
      goto LABEL_164;
    }
  }
  else if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_153;
  }
  operator delete(v159.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_154:
    if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_155;
    goto LABEL_165;
  }
LABEL_164:
  operator delete(v158.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_155:
    if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_156;
    goto LABEL_166;
  }
LABEL_165:
  operator delete(v157.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_156:
    if ((SHIBYTE(v152) & 0x80000000) == 0)
      goto LABEL_157;
    goto LABEL_167;
  }
LABEL_166:
  operator delete(v156.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v152) & 0x80000000) == 0)
  {
LABEL_157:
    if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_158;
LABEL_168:
    operator delete(v155.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v154.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_159:
      if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_160;
LABEL_170:
      operator delete(v153.__r_.__value_.__l.__data_);
      if ((*((char *)v5 + 23) & 0x80000000) == 0)
        goto LABEL_161;
      goto LABEL_171;
    }
    goto LABEL_169;
  }
LABEL_167:
  operator delete(__src);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_168;
LABEL_158:
  if ((SHIBYTE(v154.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_159;
LABEL_169:
  operator delete(v154.__r_.__value_.__l.__data_);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_170;
LABEL_160:
  if ((*((char *)v5 + 23) & 0x80000000) == 0)
  {
LABEL_161:
    v153 = *(std::string *)v5;
    goto LABEL_172;
  }
LABEL_171:
  std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
LABEL_172:
  v82 = std::string::insert(&v153, 0, "The media section with MID='");
  v83 = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  v84 = v154.__r_.__value_.__r.__words[2];
  if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v85 = 22;
  else
    v85 = (v154.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v86 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
  else
    v86 = v154.__r_.__value_.__l.__size_;
  if (v85 - v86 >= 0x1F)
  {
    v87 = &v154;
    if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v87 = (std::string *)v154.__r_.__value_.__r.__words[0];
    v88 = (char *)v87 + v86;
    if ((char *)v87 + v86 <= "' used an invalid payload type " && v88 + 31 > "' used an invalid payload type ")
      goto LABEL_330;
    qmemcpy(v88, "' used an invalid payload type ", 31);
    v89 = v86 + 31;
    if ((v84 & 0x8000000000000000) != 0)
      v154.__r_.__value_.__l.__size_ = v86 + 31;
    else
      *((_BYTE *)&v154.__r_.__value_.__s + 23) = v89 & 0x7F;
    v87->__r_.__value_.__s.__data_[v89] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v154, v85, v86 - v85 + 31, v86, v86, 0, 0x1FuLL, "' used an invalid payload type ");
  }
  v155 = v154;
  memset(&v154, 0, sizeof(v154));
  v90 = snprintf((char *)&__str, 0x20uLL, "%d", *(_DWORD *)(v8 + 12));
  if (v90 < 0)
    goto LABEL_331;
  v91 = v90;
  if (v90 > 0x16)
  {
    v95 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v90 | 7) != 0x17)
      v95 = v90 | 7;
    v96 = v95 + 1;
    v92 = (void **)operator new(v95 + 1);
    v151 = v91;
    v152 = v96 | 0x8000000000000000;
    __src = v92;
    v93 = (char *)v92 + v91;
    v94 = (char *)v92 + v91 > (char *)&__str;
    if (v92 > (void **)&__str)
      goto LABEL_196;
  }
  else
  {
    HIBYTE(v152) = v90;
    v92 = (void **)&__src;
    v93 = (char *)&__src + v91;
    v94 = (char *)&__src + v91 > (char *)&__str;
    if (&__src > (void ***)&__str)
      goto LABEL_196;
  }
  if (v94)
    goto LABEL_330;
LABEL_196:
  if ((_DWORD)v91)
    memcpy(v92, &__str, v91);
  *v93 = 0;
  if (SHIBYTE(v152) < 0)
  {
    v99 = __src;
    v97 = v151;
    v98 = v151 == 0;
    if (!__src && v151)
      goto LABEL_330;
  }
  else
  {
    v97 = HIBYTE(v152);
    v98 = HIBYTE(v152) == 0;
    v99 = (void **)&__src;
  }
  if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v100 = 22;
  else
    v100 = (v155.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v101 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
  else
    v101 = v155.__r_.__value_.__l.__size_;
  if (v100 - v101 >= v97)
  {
    if (!v98)
    {
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = &v155;
      else
        v102 = (std::string *)v155.__r_.__value_.__r.__words[0];
      v103 = (char *)v102 + v101;
      if ((char *)v102 + v101 <= (char *)v99 && &v103[v97] > (char *)v99)
        goto LABEL_330;
      memmove(v103, v99, v97);
      v104 = v101 + v97;
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        v155.__r_.__value_.__l.__size_ = v101 + v97;
      else
        *((_BYTE *)&v155.__r_.__value_.__s + 23) = v104 & 0x7F;
      v102->__r_.__value_.__s.__data_[v104] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v155, v100, v101 + v97 - v100, v101, v101, 0, v97, (const std::string::value_type *)v99);
  }
  v105 = v155.__r_.__value_.__r.__words[2];
  v156 = v155;
  memset(&v155, 0, sizeof(v155));
  v106 = HIBYTE(v105);
  v107 = SHIBYTE(v105);
  v108 = (v105 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v107 >= 0)
    v109 = 22;
  else
    v109 = v108;
  if (v107 >= 0)
    v110 = v106;
  else
    v110 = v156.__r_.__value_.__l.__size_;
  if (v109 - v110 >= 0xC)
  {
    v43 = v107 < 0;
    v111 = &v156;
    if (v43)
      v111 = (std::string *)v156.__r_.__value_.__r.__words[0];
    v112 = (char *)v111 + v110;
    if ((char *)v111 + v110 <= " for codec '" && v112 + 12 > " for codec '")
      goto LABEL_330;
    *((_DWORD *)v112 + 2) = 656434021;
    *(_QWORD *)v112 = *(_QWORD *)" for codec '";
    v113 = v110 + 12;
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      v156.__r_.__value_.__l.__size_ = v110 + 12;
    else
      *((_BYTE *)&v156.__r_.__value_.__s + 23) = v113 & 0x7F;
    v111->__r_.__value_.__s.__data_[v113] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v156, v109, v110 - v109 + 12, v110, v110, 0, 0xCuLL, " for codec '");
  }
  v157 = v156;
  memset(&v156, 0, sizeof(v156));
  v114 = *(char *)(v8 + 39);
  if (v114 < 0)
  {
    v115 = *(char **)(v8 + 16);
    v116 = *(_QWORD *)(v8 + 24);
    v117 = v116 == 0;
    if (!v115 && v116)
      goto LABEL_330;
  }
  else
  {
    v115 = (char *)(v8 + 16);
    v116 = *(unsigned __int8 *)(v8 + 39);
    v117 = v114 == 0;
  }
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v118 = 22;
  else
    v118 = (v157.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v119 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
  else
    v119 = v157.__r_.__value_.__l.__size_;
  if (v118 - v119 >= v116)
  {
    if (!v117)
    {
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v120 = &v157;
      else
        v120 = (std::string *)v157.__r_.__value_.__r.__words[0];
      v121 = (char *)v120 + v119;
      if ((char *)v120 + v119 <= v115 && &v121[v116] > v115)
        goto LABEL_330;
      memmove(v121, v115, v116);
      v122 = v119 + v116;
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        v157.__r_.__value_.__l.__size_ = v119 + v116;
      else
        *((_BYTE *)&v157.__r_.__value_.__s + 23) = v122 & 0x7F;
      v120->__r_.__value_.__s.__data_[v122] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v157, v118, v119 + v116 - v118, v119, v119, 0, v116, v115);
  }
  v123 = v157.__r_.__value_.__r.__words[2];
  v158 = v157;
  memset(&v157, 0, sizeof(v157));
  v124 = HIBYTE(v123);
  v125 = SHIBYTE(v123);
  v126 = (v123 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v125 >= 0)
    v127 = 22;
  else
    v127 = v126;
  if (v125 >= 0)
    v128 = v124;
  else
    v128 = v158.__r_.__value_.__l.__size_;
  if (v127 - v128 >= 0xB)
  {
    v43 = v125 < 0;
    v129 = &v158;
    if (v43)
      v129 = (std::string *)v158.__r_.__value_.__r.__words[0];
    v130 = (char *)v129 + v128;
    if ((char *)v129 + v128 <= ", rtcp-mux:" && v130 + 11 > ", rtcp-mux:")
      goto LABEL_330;
    *(_DWORD *)(v130 + 7) = 980972909;
    *(_QWORD *)v130 = *(_QWORD *)", rtcp-mux:";
    v131 = v128 + 11;
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
      v158.__r_.__value_.__l.__size_ = v128 + 11;
    else
      *((_BYTE *)&v158.__r_.__value_.__s + 23) = v131 & 0x7F;
    v129->__r_.__value_.__s.__data_[v131] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v158, v127, v128 - v127 + 11, v128, v128, 0, 0xBuLL, ", rtcp-mux:");
  }
  v132 = v158.__r_.__value_.__r.__words[2];
  v159 = v158;
  memset(&v158, 0, sizeof(v158));
  if (*(_BYTE *)(v6 + 32))
    v133 = "enabled";
  else
    v133 = "disabled";
  if (*(_BYTE *)(v6 + 32))
    v134 = 7;
  else
    v134 = 8;
  v135 = HIBYTE(v132);
  v136 = SHIBYTE(v132);
  v137 = (v132 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v136 >= 0)
    v138 = 22;
  else
    v138 = v137;
  if (v136 >= 0)
    v139 = v135;
  else
    v139 = v159.__r_.__value_.__l.__size_;
  if (v138 - v139 >= v134)
  {
    if (v136 >= 0)
      v140 = &v159;
    else
      v140 = (std::string *)v159.__r_.__value_.__r.__words[0];
    v141 = (char *)v140 + v139;
    if ((char *)v140 + v139 <= v133 && &v141[v134] > v133)
      goto LABEL_330;
    memcpy(v141, v133, v134);
    v142 = v139 + v134;
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
      v159.__r_.__value_.__l.__size_ = v139 + v134;
    else
      *((_BYTE *)&v159.__r_.__value_.__s + 23) = v142 & 0x7F;
    v140->__r_.__value_.__s.__data_[v142] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v159, v138, v139 + v134 - v138, v139, v139, 0, v134, v133);
  }
  __str = v159;
  memset(&v159, 0, sizeof(v159));
  v143 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *(_DWORD *)this = 3;
    p_str = &__str;
    v145 = v143;
    goto LABEL_303;
  }
  v145 = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_330;
  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (__str.__r_.__value_.__l.__size_)
  {
    if (!__str.__r_.__value_.__r.__words[0])
      goto LABEL_330;
  }
  *(_DWORD *)this = 3;
  if (v145 >= 0x7FFFFFFFFFFFFFF8)
LABEL_331:
    abort();
LABEL_303:
  if (v145 <= 0x16)
  {
    v146 = (char *)this + 8;
    *((_BYTE *)this + 31) = v145;
    v147 = (std::string *)((char *)this + v145 + 8);
    if ((char *)this + 8 > (char *)p_str)
      goto LABEL_310;
    goto LABEL_309;
  }
  v148 = (v145 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v145 | 7) != 0x17)
    v148 = v145 | 7;
  v149 = v148 + 1;
  v146 = (char *)operator new(v148 + 1);
  *((_QWORD *)this + 2) = v145;
  *((_QWORD *)this + 3) = v149 | 0x8000000000000000;
  *((_QWORD *)this + 1) = v146;
  v147 = (std::string *)&v146[v145];
  if (v146 <= (char *)p_str)
  {
LABEL_309:
    if (v147 <= p_str)
      goto LABEL_310;
LABEL_330:
    __break(1u);
  }
LABEL_310:
  if (v145)
    memmove(v146, p_str, v145);
  v147->__r_.__value_.__s.__data_[0] = 0;
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 36) = 0;
  *((_BYTE *)this + 38) = 0;
  if ((v143 & 0x80) != 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v159.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v158.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_317:
      if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_318;
      goto LABEL_325;
    }
  }
  else if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_317;
  }
  operator delete(v157.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_318:
    if ((SHIBYTE(v152) & 0x80000000) == 0)
      goto LABEL_319;
    goto LABEL_326;
  }
LABEL_325:
  operator delete(v156.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v152) & 0x80000000) == 0)
  {
LABEL_319:
    if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_320;
    goto LABEL_327;
  }
LABEL_326:
  operator delete(__src);
  if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_320:
    if ((SHIBYTE(v154.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_321;
    goto LABEL_328;
  }
LABEL_327:
  operator delete(v155.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v154.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_321:
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_329;
    return;
  }
LABEL_328:
  operator delete(v154.__r_.__value_.__l.__data_);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
LABEL_329:
    operator delete(v153.__r_.__value_.__l.__data_);
}

uint64_t webrtc::`anonymous namespace'::MediaSectionsInSameOrder(uint64_t result, _QWORD *a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;

  v4 = *(_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v5 - *(_QWORD *)result) >> 3) > 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3))
    return 0;
  if (v5 == v4)
    return 1;
  v9 = (uint64_t *)result;
  v10 = 0;
  while (1)
  {
    if (a2)
    {
      v11 = *a2 + 40 * v10;
      if (v10 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3))
        v11 = 0;
      v12 = *a3;
      if (0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3) <= v10)
      {
LABEL_37:
        __break(1u);
        return result;
      }
    }
    else
    {
      v11 = 0;
      v12 = *a3;
      if (0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3) <= v10)
        goto LABEL_37;
    }
    v13 = (unsigned __int8 *)(v12 + 40 * v10);
    if (a4 || v13[28])
      break;
    if ((!v4 || !*(_BYTE *)(v4 + 40 * v10 + 28)) && (!v11 || !*(_BYTE *)(v11 + 28)))
      break;
LABEL_5:
    if (++v10 >= 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3))
      return 1;
  }
  v14 = (unsigned __int8 **)(v4 + 40 * v10);
  v15 = v13[23];
  if ((v15 & 0x80u) == 0)
    v16 = (unsigned __int8 *)v13[23];
  else
    v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
  v18 = (char)v17;
  if ((char)v17 < 0)
    v17 = v14[1];
  if (v16 != v17)
    return 0;
  if (v18 >= 0)
    v19 = (unsigned __int8 *)(v4 + 40 * v10);
  else
    v19 = *v14;
  if ((v15 & 0x80) != 0)
  {
    result = memcmp(*(const void **)v13, v19, *((_QWORD *)v13 + 1));
    if ((_DWORD)result)
      return 0;
    goto LABEL_33;
  }
  if (!v13[23])
  {
LABEL_33:
    if (0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3) <= v10)
      goto LABEL_37;
    v20 = *(_QWORD *)(v4 + 40 * v10 + 32);
    v21 = (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(v12 + 40 * v10 + 32) + 16))(*(_QWORD *)(v12 + 40 * v10 + 32), v19);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    if (v21 != (_DWORD)result)
      return 0;
    v4 = *v9;
    v5 = v9[1];
    goto LABEL_5;
  }
  while (*v13 == *v19)
  {
    ++v13;
    ++v19;
    if (!--v15)
      goto LABEL_33;
  }
  return 0;
}

void webrtc::`anonymous namespace'::ValidateRtpHeaderExtensionsForSpecSimulcast(webrtc::_anonymous_namespace_ *this, const cricket::SessionDescription *a2, const cricket::SessionDescription *a3)
{
  const cricket::SessionDescription *v4;
  const cricket::SessionDescription *v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void **v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  int v15;
  __int128 *v16;
  std::string *v17;
  void **v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  int v34;
  int v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string::size_type v45;
  unint64_t v46;
  std::string *v47;
  char *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  std::string::size_type v52;
  std::string::size_type v53;
  std::string::size_type size;
  std::string *v55;
  char *v56;
  std::string::size_type v57;
  size_t v58;
  std::string *p_src;
  size_t v60;
  std::string *v61;
  std::string *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  std::string v68;
  std::string v69;
  std::string __src;

  if (a2 != a3)
  {
    v4 = a3;
    v5 = a2;
    v65 = (char *)this + 8;
    while (1)
    {
      if (*((_DWORD *)v5 + 6))
        v6 = 0;
      else
        v6 = *((_BYTE *)v5 + 28) == 0;
      if (!v6)
        goto LABEL_4;
      v7 = (_QWORD *)*((_QWORD *)v5 + 4);
      if (v7[26] == v7[27] && v7[29] == v7[30])
        goto LABEL_4;
      v8 = v7[8];
      v9 = v7[9];
      v10 = v9 - v8;
      if (v9 == v8)
        break;
      if ((v10 & 0x8000000000000000) != 0)
        goto LABEL_128;
      v11 = (void **)operator new(v10);
      v12 = 0;
      do
      {
        v16 = (__int128 *)(v8 + v12);
        v17 = (std::string *)&v11[(unint64_t)v12 / 8];
        if (*(char *)(v8 + v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
        }
        else
        {
          v13 = *v16;
          v17->__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v13;
        }
        v14 = (char *)&v11[(unint64_t)v12 / 8];
        v15 = *(_DWORD *)(v8 + v12 + 24);
        v14[28] = *(_BYTE *)(v8 + v12 + 28);
        *((_DWORD *)v14 + 6) = v15;
        v12 += 32;
      }
      while (v8 + v12 != v9);
      v18 = (void **)((char *)v11 + (v12 & 0xFFFFFFFFFFFFFFE0));
      if (!v12)
        goto LABEL_50;
      v19 = 0;
      while (1)
      {
        v20 = (char *)&v11[v19];
        if (SHIBYTE(v11[v19 + 2]) < 0)
        {
          v21 = *((_QWORD *)v20 + 1);
          if (v21 < 0)
            goto LABEL_127;
          v20 = *(char **)v20;
          if (v21 && v20 == 0)
            goto LABEL_127;
        }
        else
        {
          v21 = HIBYTE(v11[v19 + 2]);
        }
        if (v21 == 45)
        {
          v23 = *(char **)v20;
          v24 = *((_QWORD *)v20 + 1);
          v25 = *((_QWORD *)v20 + 2);
          v26 = *((_QWORD *)v20 + 3);
          v27 = *((_QWORD *)v20 + 4);
          v28 = *(_QWORD *)(v20 + 37);
          v29 = v23 == *(char **)"urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id"
             && v24 == *(_QWORD *)":params:rtp-hdrext:sdes:rtp-stream-id";
          v30 = v29 && v25 == *(_QWORD *)"rtp-hdrext:sdes:rtp-stream-id";
          v31 = v30 && v26 == *(_QWORD *)"xt:sdes:rtp-stream-id";
          v32 = v31 && v27 == *(_QWORD *)"rtp-stream-id";
          if (v32 && v28 == *(_QWORD *)"tream-id")
            break;
        }
        v19 += 4;
        if (4 * (v12 >> 5) == v19)
          goto LABEL_52;
      }
      if (v19 == 4 * (v12 >> 5))
      {
LABEL_52:
        v35 = 0;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          goto LABEL_53;
LABEL_75:
        if ((*((char *)v5 + 23) & 0x80000000) == 0)
        {
LABEL_76:
          v68 = *(std::string *)v5;
          goto LABEL_81;
        }
LABEL_80:
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
LABEL_81:
        v50 = std::string::insert(&v68, 0, "The media section with MID='");
        v51 = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        v52 = v69.__r_.__value_.__r.__words[2];
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = 22;
        else
          v53 = (v69.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
        else
          size = v69.__r_.__value_.__l.__size_;
        if (v53 - size >= 0x4B)
        {
          v55 = &v69;
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v55 = (std::string *)v69.__r_.__value_.__r.__words[0];
          v56 = (char *)v55 + size;
          if ((char *)v55 + size <= "' negotiates simulcast but does not negotiate the RID RTP header extension."
            && v56 + 75 > "' negotiates simulcast but does not negotiate the RID RTP header extension.")
          {
            goto LABEL_127;
          }
          qmemcpy(v56, "' negotiates simulcast but does not negotiate the RID RTP header extension.", 75);
          v57 = size + 75;
          if ((v52 & 0x8000000000000000) != 0)
            v69.__r_.__value_.__l.__size_ = size + 75;
          else
            *((_BYTE *)&v69.__r_.__value_.__s + 23) = v57 & 0x7F;
          v55->__r_.__value_.__s.__data_[v57] = 0;
        }
        else
        {
          std::string::__grow_by_and_replace(&v69, v53, size - v53 + 75, size, size, 0, 0x4BuLL, "' negotiates simulcast but does not negotiate the RID RTP header extension.");
        }
        __src = v69;
        memset(&v69, 0, sizeof(v69));
        v58 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          v60 = __src.__r_.__value_.__l.__size_;
          if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_127;
          p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
          if (__src.__r_.__value_.__l.__size_)
          {
            if (!__src.__r_.__value_.__r.__words[0])
              goto LABEL_127;
          }
          *(_DWORD *)this = 3;
          if (v60 >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_128;
        }
        else
        {
          *(_DWORD *)this = 3;
          p_src = &__src;
          v60 = v58;
        }
        if (v60 > 0x16)
        {
          v63 = (v60 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v60 | 7) != 0x17)
            v63 = v60 | 7;
          v64 = v63 + 1;
          v61 = (std::string *)operator new(v63 + 1);
          *((_QWORD *)this + 2) = v60;
          *((_QWORD *)this + 3) = v64 | 0x8000000000000000;
          *((_QWORD *)this + 1) = v61;
          v62 = (std::string *)((char *)v61 + v60);
          if (v61 <= p_src)
            goto LABEL_109;
        }
        else
        {
          *((_BYTE *)this + 31) = v60;
          v61 = (std::string *)v65;
          v62 = (std::string *)&v65[v60];
          if (v65 > (char *)p_src)
            goto LABEL_110;
LABEL_109:
          if (v62 > p_src)
            goto LABEL_127;
        }
LABEL_110:
        if (v60)
          memmove(v61, p_src, v60);
        v62->__r_.__value_.__s.__data_[0] = 0;
        *((_DWORD *)this + 8) = 0;
        *((_BYTE *)this + 36) = 0;
        *((_BYTE *)this + 38) = 0;
        if ((v58 & 0x80) != 0
          && (operator delete(__src.__r_.__value_.__l.__data_), SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0))
        {
          operator delete(v69.__r_.__value_.__l.__data_);
          v4 = a3;
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
LABEL_115:
            operator delete(v68.__r_.__value_.__l.__data_);
        }
        else
        {
          v4 = a3;
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_115;
        }
        if (!v11)
          return;
        if (v35)
        {
          operator delete(v11);
          return;
        }
        v34 = 0;
        goto LABEL_120;
      }
      v34 = 1;
      do
      {
LABEL_120:
        if (*((char *)v18 - 9) < 0)
          operator delete(*(v18 - 4));
        v18 -= 4;
      }
      while (v18 != v11);
      operator delete(v11);
      if (!v34)
        return;
LABEL_4:
      v5 = (const cricket::SessionDescription *)((char *)v5 + 40);
      if (v5 == v4)
        goto LABEL_124;
    }
    v18 = 0;
    v11 = 0;
LABEL_50:
    v35 = 1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_75;
LABEL_53:
    if (*((char *)v5 + 23) < 0)
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
    else
      v68 = *(std::string *)v5;
    v36 = std::string::insert(&v68, 0, "The media section with MID='");
    v42 = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v42;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v43 = v69.__r_.__value_.__r.__words[2];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = 22;
    else
      v44 = (v69.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v45 = v69.__r_.__value_.__l.__size_;
    if (v44 - v45 >= 0x4B)
    {
      v47 = &v69;
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = (std::string *)v69.__r_.__value_.__r.__words[0];
      v48 = (char *)v47 + v45;
      if ((char *)v47 + v45 <= "' negotiates simulcast but does not negotiate the RID RTP header extension."
        && v48 + 75 > "' negotiates simulcast but does not negotiate the RID RTP header extension.")
      {
LABEL_127:
        __break(1u);
LABEL_128:
        abort();
      }
      qmemcpy(v48, "' negotiates simulcast but does not negotiate the RID RTP header extension.", 75);
      v49 = v45 + 75;
      if ((v43 & 0x8000000000000000) != 0)
        v69.__r_.__value_.__l.__size_ = v45 + 75;
      else
        *((_BYTE *)&v69.__r_.__value_.__s + 23) = v49 & 0x7F;
      v46 = v66;
      v47->__r_.__value_.__s.__data_[v49] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v69, v44, v45 - v44 + 75, v45, v45, 0, 0x4BuLL, "' negotiates simulcast but does not negotiate the RID RTP header extension.");
      v46 = v66;
    }
    __src = v69;
    memset(&v69, 0, sizeof(v69));
    v66 = v46 & 0xFFFFFFFF00000000 | 0x1003;
    rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v44, v37, v45, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__src.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_74:
        if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_75;
        goto LABEL_79;
      }
    }
    else if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_74;
    }
    operator delete(v69.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_75;
LABEL_79:
    operator delete(v68.__r_.__value_.__l.__data_);
    if ((*((char *)v5 + 23) & 0x80000000) == 0)
      goto LABEL_76;
    goto LABEL_80;
  }
LABEL_124:
  *(_DWORD *)this = 0;
  *((_BYTE *)this + 38) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 29) = 0;
}

void webrtc::SdpOfferAnswerHandler::UpdateTransceiverChannel(uint64_t a1, uint64_t a2, webrtc::RtpTransceiver *this, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  size_t v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v16[5];
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 20);
  if (*(_BYTE *)(a4 + 28))
  {
    if (v6)
      webrtc::RtpTransceiver::ClearChannel(this);
    goto LABEL_5;
  }
  if (v6)
  {
LABEL_5:
    *(_DWORD *)a1 = 0;
    *(_BYTE *)(a1 + 38) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 29) = 0;
    return;
  }
  v7 = (char *)a4;
  if (*(char *)(a4 + 23) < 0)
  {
    v9 = *(_QWORD *)(a4 + 8);
    if ((v9 & 0x8000000000000000) != 0 || (v7 = *(char **)a4, v9) && !v7)
      __break(1u);
  }
  else
  {
    v9 = *(unsigned __int8 *)(a4 + 23);
  }
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 232))(*(_QWORD *)(a2 + 8));
  v11 = (uint64_t *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8)) + 124);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 240))(*(_QWORD *)(a2 + 8));
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a2 + 8) + 96))(v16);
  v13 = *(_QWORD *)(a2 + 368);
  v17[0] = &off_24C0C0818;
  v17[1] = a2;
  v18 = v17;
  webrtc::RtpTransceiver::CreateChannel(v7, v9, (uint64_t)this, v10, v11, v12, (uint64_t)v16, (_BYTE *)(a2 + 264), a1, (_BYTE *)(a2 + 344), v13, v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_17;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_17:
  if (!*(_DWORD *)a1)
  {
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    goto LABEL_5;
  }
}

void webrtc::SdpOfferAnswerHandler::GenerateMediaDescriptionOptions(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  __int128 **v10;
  __int128 *v11;
  __int128 *v12;
  void **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  __int128 v30;
  unint64_t v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  __int128 v45;
  char *v46;
  unint64_t v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v55;
  __int128 *v57;
  _BYTE v59[24];
  uint64_t v60;
  _OWORD v61[7];

  v10 = (__int128 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v12 = *v10;
  v11 = v10[1];
  if (*v10 != v11)
  {
    v13 = (void **)(a8 + 5);
    v55 = a7;
    v57 = v10[1];
    do
    {
      if (!v12)
        goto LABEL_21;
      v15 = *((_QWORD *)v12 + 4);
      if (!v15)
        goto LABEL_21;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15))
      {
        if (*(_BYTE *)(a5 + 8))
        {
          *(_DWORD *)v59 = 0;
          if (*((char *)v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v59[8], *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
          }
          else
          {
            v18 = *v12;
            v60 = *((_QWORD *)v12 + 2);
            *(_OWORD *)&v59[8] = v18;
          }
          LODWORD(v61[0]) = 3;
          BYTE4(v61[0]) = 1;
          memset((char *)v61 + 5, 0, 96);
          DWORD1(v61[6]) = 0;
          v31 = a8[6];
          if (v31 >= a8[7])
          {
            v33 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v13, (uint64_t)v59);
          }
          else
          {
            if (!v31)
              goto LABEL_85;
            *(_DWORD *)v31 = *(_DWORD *)v59;
            v32 = *(_OWORD *)&v59[8];
            *(_QWORD *)(v31 + 24) = v60;
            *(_OWORD *)(v31 + 8) = v32;
            *(_QWORD *)&v59[16] = 0;
            v60 = 0;
            *(_QWORD *)&v59[8] = 0;
            *(_QWORD *)(v31 + 32) = *(_QWORD *)&v61[0];
            *(_QWORD *)(v31 + 40) = 0;
            *(_QWORD *)(v31 + 48) = 0;
            *(_QWORD *)(v31 + 56) = 0;
            *(_OWORD *)(v31 + 40) = *(_OWORD *)((char *)v61 + 8);
            *(_OWORD *)((char *)v61 + 8) = 0uLL;
            *(_QWORD *)(v31 + 56) = *((_QWORD *)&v61[1] + 1);
            *(_QWORD *)(v31 + 64) = 0;
            *((_QWORD *)&v61[1] + 1) = 0;
            *(_QWORD *)(v31 + 72) = 0;
            *(_QWORD *)(v31 + 80) = 0;
            *(_OWORD *)(v31 + 64) = v61[2];
            v61[2] = 0uLL;
            *(_QWORD *)(v31 + 80) = *(_QWORD *)&v61[3];
            *(_QWORD *)(v31 + 88) = 0;
            *(_QWORD *)&v61[3] = 0;
            *(_QWORD *)(v31 + 96) = 0;
            *(_QWORD *)(v31 + 104) = 0;
            *(_OWORD *)(v31 + 88) = *(_OWORD *)((char *)&v61[3] + 8);
            *(_OWORD *)((char *)&v61[3] + 8) = 0uLL;
            *(_QWORD *)(v31 + 104) = *((_QWORD *)&v61[4] + 1);
            *(_QWORD *)(v31 + 112) = 0;
            *((_QWORD *)&v61[4] + 1) = 0;
            *(_QWORD *)(v31 + 120) = 0;
            *(_QWORD *)(v31 + 128) = 0;
            *(_OWORD *)(v31 + 112) = v61[5];
            *(_QWORD *)(v31 + 128) = *(_QWORD *)&v61[6];
            memset(&v61[5], 0, 24);
            v33 = (char *)(v31 + 136);
          }
          a8[6] = v33;
          cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)v59);
        }
        else
        {
          *(_DWORD *)v59 = 0;
          if (*((char *)v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v59[8], *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
          }
          else
          {
            v30 = *v12;
            v60 = *((_QWORD *)v12 + 2);
            *(_OWORD *)&v59[8] = v30;
          }
          LODWORD(v61[0]) = a3;
          BYTE4(v61[0]) = a3 == 3;
          memset((char *)v61 + 5, 0, 96);
          DWORD1(v61[6]) = 0;
          v35 = a8[6];
          if (v35 >= a8[7])
          {
            v37 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v13, (uint64_t)v59);
          }
          else
          {
            if (!v35)
              goto LABEL_85;
            *(_DWORD *)v35 = *(_DWORD *)v59;
            v36 = *(_OWORD *)&v59[8];
            *(_QWORD *)(v35 + 24) = v60;
            *(_OWORD *)(v35 + 8) = v36;
            *(_QWORD *)&v59[16] = 0;
            v60 = 0;
            *(_QWORD *)&v59[8] = 0;
            *(_QWORD *)(v35 + 32) = *(_QWORD *)&v61[0];
            *(_QWORD *)(v35 + 40) = 0;
            *(_QWORD *)(v35 + 48) = 0;
            *(_QWORD *)(v35 + 56) = 0;
            *(_OWORD *)(v35 + 40) = *(_OWORD *)((char *)v61 + 8);
            *(_OWORD *)((char *)v61 + 8) = 0uLL;
            *(_QWORD *)(v35 + 56) = *((_QWORD *)&v61[1] + 1);
            *(_QWORD *)(v35 + 64) = 0;
            *((_QWORD *)&v61[1] + 1) = 0;
            *(_QWORD *)(v35 + 72) = 0;
            *(_QWORD *)(v35 + 80) = 0;
            *(_OWORD *)(v35 + 64) = v61[2];
            v61[2] = 0uLL;
            *(_QWORD *)(v35 + 80) = *(_QWORD *)&v61[3];
            *(_QWORD *)(v35 + 88) = 0;
            *(_QWORD *)&v61[3] = 0;
            *(_QWORD *)(v35 + 96) = 0;
            *(_QWORD *)(v35 + 104) = 0;
            *(_OWORD *)(v35 + 88) = *(_OWORD *)((char *)&v61[3] + 8);
            *(_OWORD *)((char *)&v61[3] + 8) = 0uLL;
            *(_QWORD *)(v35 + 104) = *((_QWORD *)&v61[4] + 1);
            *(_QWORD *)(v35 + 112) = 0;
            *((_QWORD *)&v61[4] + 1) = 0;
            *(_QWORD *)(v35 + 120) = 0;
            *(_QWORD *)(v35 + 128) = 0;
            *(_OWORD *)(v35 + 112) = v61[5];
            *(_QWORD *)(v35 + 128) = *(_QWORD *)&v61[6];
            memset(&v61[5], 0, 24);
            v37 = (char *)(v35 + 136);
          }
          a8[6] = v37;
          cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)v59);
          *(_QWORD *)a5 = -1 - 0xF0F0F0F0F0F0F0FLL * ((uint64_t)(a8[6] - a8[5]) >> 3);
          *(_BYTE *)(a5 + 8) = 1;
        }
        v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 96) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96));
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v38 + 16))(v59);
        v39 = a8[6];
        if (a8[5] == v39)
          goto LABEL_85;
        v40 = (void **)(v39 - 48);
        v41 = *(_QWORD *)(v39 - 48);
        if (!v41)
          goto LABEL_81;
        v42 = *(_QWORD *)(v39 - 40);
        v43 = *(void **)(v39 - 48);
        if (v42 == v41)
          goto LABEL_80;
        do
        {
          if (*(char *)(v42 - 17) < 0)
            operator delete(*(void **)(v42 - 40));
          v42 -= 40;
        }
        while (v42 != v41);
        goto LABEL_79;
      }
      v16 = *((_QWORD *)v12 + 4);
      if (!v16)
        goto LABEL_21;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16) == 1)
      {
        if (*(_BYTE *)(a6 + 8))
        {
          *(_DWORD *)v59 = 1;
          if (*((char *)v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v59[8], *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
          }
          else
          {
            v17 = *v12;
            v60 = *((_QWORD *)v12 + 2);
            *(_OWORD *)&v59[8] = v17;
          }
          LODWORD(v61[0]) = 3;
          BYTE4(v61[0]) = 1;
          memset((char *)v61 + 5, 0, 96);
          DWORD1(v61[6]) = 0;
          v44 = a8[6];
          if (v44 >= a8[7])
          {
            v46 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v13, (uint64_t)v59);
          }
          else
          {
            if (!v44)
              goto LABEL_85;
            *(_DWORD *)v44 = *(_DWORD *)v59;
            v45 = *(_OWORD *)&v59[8];
            *(_QWORD *)(v44 + 24) = v60;
            *(_OWORD *)(v44 + 8) = v45;
            *(_QWORD *)&v59[16] = 0;
            v60 = 0;
            *(_QWORD *)&v59[8] = 0;
            *(_QWORD *)(v44 + 32) = *(_QWORD *)&v61[0];
            *(_QWORD *)(v44 + 40) = 0;
            *(_QWORD *)(v44 + 48) = 0;
            *(_QWORD *)(v44 + 56) = 0;
            *(_OWORD *)(v44 + 40) = *(_OWORD *)((char *)v61 + 8);
            *(_OWORD *)((char *)v61 + 8) = 0uLL;
            *(_QWORD *)(v44 + 56) = *((_QWORD *)&v61[1] + 1);
            *(_QWORD *)(v44 + 64) = 0;
            *((_QWORD *)&v61[1] + 1) = 0;
            *(_QWORD *)(v44 + 72) = 0;
            *(_QWORD *)(v44 + 80) = 0;
            *(_OWORD *)(v44 + 64) = v61[2];
            v61[2] = 0uLL;
            *(_QWORD *)(v44 + 80) = *(_QWORD *)&v61[3];
            *(_QWORD *)(v44 + 88) = 0;
            *(_QWORD *)&v61[3] = 0;
            *(_QWORD *)(v44 + 96) = 0;
            *(_QWORD *)(v44 + 104) = 0;
            *(_OWORD *)(v44 + 88) = *(_OWORD *)((char *)&v61[3] + 8);
            *(_OWORD *)((char *)&v61[3] + 8) = 0uLL;
            *(_QWORD *)(v44 + 104) = *((_QWORD *)&v61[4] + 1);
            *(_QWORD *)(v44 + 112) = 0;
            *((_QWORD *)&v61[4] + 1) = 0;
            *(_QWORD *)(v44 + 120) = 0;
            *(_QWORD *)(v44 + 128) = 0;
            *(_OWORD *)(v44 + 112) = v61[5];
            *(_QWORD *)(v44 + 128) = *(_QWORD *)&v61[6];
            memset(&v61[5], 0, 24);
            v46 = (char *)(v44 + 136);
          }
          a8[6] = v46;
          cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)v59);
        }
        else
        {
          *(_DWORD *)v59 = 1;
          if (*((char *)v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v59[8], *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
          }
          else
          {
            v34 = *v12;
            v60 = *((_QWORD *)v12 + 2);
            *(_OWORD *)&v59[8] = v34;
          }
          LODWORD(v61[0]) = a4;
          BYTE4(v61[0]) = a4 == 3;
          memset((char *)v61 + 5, 0, 96);
          DWORD1(v61[6]) = 0;
          v47 = a8[6];
          if (v47 >= a8[7])
          {
            v49 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v13, (uint64_t)v59);
          }
          else
          {
            if (!v47)
              goto LABEL_85;
            *(_DWORD *)v47 = *(_DWORD *)v59;
            v48 = *(_OWORD *)&v59[8];
            *(_QWORD *)(v47 + 24) = v60;
            *(_OWORD *)(v47 + 8) = v48;
            *(_QWORD *)&v59[16] = 0;
            v60 = 0;
            *(_QWORD *)&v59[8] = 0;
            *(_QWORD *)(v47 + 32) = *(_QWORD *)&v61[0];
            *(_QWORD *)(v47 + 40) = 0;
            *(_QWORD *)(v47 + 48) = 0;
            *(_QWORD *)(v47 + 56) = 0;
            *(_OWORD *)(v47 + 40) = *(_OWORD *)((char *)v61 + 8);
            *(_OWORD *)((char *)v61 + 8) = 0uLL;
            *(_QWORD *)(v47 + 56) = *((_QWORD *)&v61[1] + 1);
            *(_QWORD *)(v47 + 64) = 0;
            *((_QWORD *)&v61[1] + 1) = 0;
            *(_QWORD *)(v47 + 72) = 0;
            *(_QWORD *)(v47 + 80) = 0;
            *(_OWORD *)(v47 + 64) = v61[2];
            v61[2] = 0uLL;
            *(_QWORD *)(v47 + 80) = *(_QWORD *)&v61[3];
            *(_QWORD *)(v47 + 88) = 0;
            *(_QWORD *)&v61[3] = 0;
            *(_QWORD *)(v47 + 96) = 0;
            *(_QWORD *)(v47 + 104) = 0;
            *(_OWORD *)(v47 + 88) = *(_OWORD *)((char *)&v61[3] + 8);
            *(_OWORD *)((char *)&v61[3] + 8) = 0uLL;
            *(_QWORD *)(v47 + 104) = *((_QWORD *)&v61[4] + 1);
            *(_QWORD *)(v47 + 112) = 0;
            *((_QWORD *)&v61[4] + 1) = 0;
            *(_QWORD *)(v47 + 120) = 0;
            *(_QWORD *)(v47 + 128) = 0;
            *(_OWORD *)(v47 + 112) = v61[5];
            *(_QWORD *)(v47 + 128) = *(_QWORD *)&v61[6];
            memset(&v61[5], 0, 24);
            v49 = (char *)(v47 + 136);
          }
          a8[6] = v49;
          cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)v59);
          *(_QWORD *)a6 = -1 - 0xF0F0F0F0F0F0F0FLL * ((uint64_t)(a8[6] - a8[5]) >> 3);
          *(_BYTE *)(a6 + 8) = 1;
        }
        v50 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96));
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v50 + 16))(v59);
        v39 = a8[6];
        if (a8[5] == v39)
        {
LABEL_85:
          __break(1u);
          return;
        }
        v40 = (void **)(v39 - 48);
        v41 = *(_QWORD *)(v39 - 48);
        if (!v41)
          goto LABEL_81;
        v51 = *(_QWORD *)(v39 - 40);
        v43 = *(void **)(v39 - 48);
        if (v51 == v41)
        {
LABEL_80:
          *(_QWORD *)(v39 - 40) = v41;
          operator delete(v43);
          *v40 = 0;
          v40[1] = 0;
          v40[2] = 0;
          a7 = v55;
LABEL_81:
          *(_OWORD *)(v39 - 48) = *(_OWORD *)v59;
          *(_QWORD *)(v39 - 32) = *(_QWORD *)&v59[16];
          v13 = (void **)(a8 + 5);
          v11 = v57;
          goto LABEL_5;
        }
        do
        {
          if (*(char *)(v51 - 17) < 0)
            operator delete(*(void **)(v51 - 40));
          v51 -= 40;
        }
        while (v51 != v41);
LABEL_79:
        v43 = *v40;
        goto LABEL_80;
      }
      v19 = *((_QWORD *)v12 + 4);
      if (v19)
      {
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        v21 = (char *)v12 + 23;
        if (v20 == 3)
        {
          *(_DWORD *)v59 = 3;
          if (*v21 < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v59[8], *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
          }
          else
          {
            v22 = *v12;
            v60 = *((_QWORD *)v12 + 2);
            *(_OWORD *)&v59[8] = v22;
          }
          LODWORD(v61[0]) = 3;
          BYTE4(v61[0]) = 1;
          memset((char *)v61 + 5, 0, 96);
          DWORD1(v61[6]) = 0;
          v25 = a8[6];
          if (v25 >= a8[7])
            goto LABEL_3;
          if (!v25)
            goto LABEL_85;
LABEL_30:
          *(_DWORD *)v25 = *(_DWORD *)v59;
          v26 = *(_OWORD *)&v59[8];
          *(_QWORD *)(v25 + 24) = v60;
          *(_OWORD *)(v25 + 8) = v26;
          *(_QWORD *)&v59[16] = 0;
          v60 = 0;
          *(_QWORD *)&v59[8] = 0;
          *(_QWORD *)(v25 + 32) = *(_QWORD *)&v61[0];
          *(_QWORD *)(v25 + 40) = 0;
          *(_QWORD *)(v25 + 48) = 0;
          *(_QWORD *)(v25 + 56) = 0;
          *(_OWORD *)(v25 + 40) = *(_OWORD *)((char *)v61 + 8);
          *(_OWORD *)((char *)v61 + 8) = 0uLL;
          *(_QWORD *)(v25 + 56) = *((_QWORD *)&v61[1] + 1);
          *(_QWORD *)(v25 + 64) = 0;
          *((_QWORD *)&v61[1] + 1) = 0;
          *(_QWORD *)(v25 + 72) = 0;
          *(_QWORD *)(v25 + 80) = 0;
          *(_OWORD *)(v25 + 64) = v61[2];
          v61[2] = 0uLL;
          *(_QWORD *)(v25 + 80) = *(_QWORD *)&v61[3];
          *(_QWORD *)(v25 + 88) = 0;
          *(_QWORD *)&v61[3] = 0;
          *(_QWORD *)(v25 + 96) = 0;
          *(_QWORD *)(v25 + 104) = 0;
          *(_OWORD *)(v25 + 88) = *(_OWORD *)((char *)&v61[3] + 8);
          *(_OWORD *)((char *)&v61[3] + 8) = 0uLL;
          *(_QWORD *)(v25 + 104) = *((_QWORD *)&v61[4] + 1);
          *(_QWORD *)(v25 + 112) = 0;
          *((_QWORD *)&v61[4] + 1) = 0;
          *(_QWORD *)(v25 + 120) = 0;
          *(_QWORD *)(v25 + 128) = 0;
          *(_OWORD *)(v25 + 112) = v61[5];
          *(_QWORD *)(v25 + 128) = *(_QWORD *)&v61[6];
          memset(&v61[5], 0, 24);
          v14 = (char *)(v25 + 136);
          goto LABEL_4;
        }
      }
      else
      {
LABEL_21:
        v21 = (char *)v12 + 23;
      }
      if (*(_BYTE *)(a7 + 8))
      {
        *(_DWORD *)v59 = 2;
        if (*v21 < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v59[8], *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
        }
        else
        {
          v23 = *v12;
          v60 = *((_QWORD *)v12 + 2);
          *(_OWORD *)&v59[8] = v23;
        }
        LODWORD(v61[0]) = 3;
        BYTE4(v61[0]) = 1;
        memset((char *)v61 + 5, 0, 96);
        DWORD1(v61[6]) = 0;
        v25 = a8[6];
        if (v25 < a8[7])
        {
          if (!v25)
            goto LABEL_85;
          goto LABEL_30;
        }
LABEL_3:
        v14 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v13, (uint64_t)v59);
LABEL_4:
        a8[6] = v14;
        cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)v59);
        goto LABEL_5;
      }
      *(_DWORD *)v59 = 2;
      if (*v21 < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v59[8], *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
      }
      else
      {
        v24 = *v12;
        v60 = *((_QWORD *)v12 + 2);
        *(_OWORD *)&v59[8] = v24;
      }
      memset(v61, 0, 104);
      v27 = a8[6];
      if (v27 >= a8[7])
      {
        v29 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v13, (uint64_t)v59);
      }
      else
      {
        if (!v27)
          goto LABEL_85;
        *(_DWORD *)v27 = *(_DWORD *)v59;
        v28 = *(_OWORD *)&v59[8];
        *(_QWORD *)(v27 + 24) = v60;
        *(_OWORD *)(v27 + 8) = v28;
        *(_QWORD *)&v59[16] = 0;
        v60 = 0;
        *(_QWORD *)&v59[8] = 0;
        *(_QWORD *)(v27 + 32) = *(_QWORD *)&v61[0];
        *(_QWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        *(_QWORD *)(v27 + 56) = 0;
        *(_OWORD *)(v27 + 40) = *(_OWORD *)((char *)v61 + 8);
        *(_OWORD *)((char *)v61 + 8) = 0uLL;
        *(_QWORD *)(v27 + 56) = *((_QWORD *)&v61[1] + 1);
        *(_QWORD *)(v27 + 64) = 0;
        *((_QWORD *)&v61[1] + 1) = 0;
        *(_QWORD *)(v27 + 72) = 0;
        *(_QWORD *)(v27 + 80) = 0;
        *(_OWORD *)(v27 + 64) = v61[2];
        v61[2] = 0uLL;
        *(_QWORD *)(v27 + 80) = *(_QWORD *)&v61[3];
        *(_QWORD *)(v27 + 88) = 0;
        *(_QWORD *)&v61[3] = 0;
        *(_QWORD *)(v27 + 96) = 0;
        *(_QWORD *)(v27 + 104) = 0;
        *(_OWORD *)(v27 + 88) = *(_OWORD *)((char *)&v61[3] + 8);
        *(_OWORD *)((char *)&v61[3] + 8) = 0uLL;
        *(_QWORD *)(v27 + 104) = *((_QWORD *)&v61[4] + 1);
        *(_QWORD *)(v27 + 112) = 0;
        *((_QWORD *)&v61[4] + 1) = 0;
        *(_QWORD *)(v27 + 120) = 0;
        *(_QWORD *)(v27 + 128) = 0;
        *(_OWORD *)(v27 + 112) = v61[5];
        *(_QWORD *)(v27 + 128) = *(_QWORD *)&v61[6];
        memset(&v61[5], 0, 24);
        v29 = (char *)(v27 + 136);
      }
      a8[6] = v29;
      cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)v59);
      *(_QWORD *)a7 = -1 - 0xF0F0F0F0F0F0F0FLL * ((uint64_t)(a8[6] - a8[5]) >> 3);
      *(_BYTE *)(a7 + 8) = 1;
LABEL_5:
      v12 = (__int128 *)((char *)v12 + 40);
    }
    while (v12 != v11);
  }
}

void webrtc::`anonymous namespace'::AddPlanBRtpSenderOptions(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void *v16;
  void **v17;
  void *v18;
  void **v19;
  void **v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;
  void **v34;
  void *__p;
  void **v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void **v42;
  void *v43[2];
  char v44;
  uint64_t v45;
  uint64_t v46;

  if (a1 != a2)
  {
    v45 = v5;
    v46 = v6;
    for (i = a1; i != a2; ++i)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*i + 64))(*i))
      {
        if (a4)
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*i + 72))(v43);
          (*(void (**)(void **__return_ptr))(**(_QWORD **)(*i + 24) + 80))(&v41);
          v38 = 0;
          v39 = 0;
          v40 = 0;
          __p = 0;
          v36 = 0;
          v37 = 0;
          cricket::MediaDescriptionOptions::AddSenderInternal(a4, (uint64_t)v43, (uint64_t)&v41, (const cricket::RidDescription **)&v38, (uint64_t **)&__p, a5, v12, v13);
          v14 = (void **)__p;
          if (__p)
          {
            v15 = v36;
            v16 = __p;
            if (v36 != __p)
            {
              v17 = v36;
              do
              {
                v20 = (void **)*(v17 - 3);
                v17 -= 3;
                v19 = v20;
                if (v20)
                {
                  v21 = (void **)*(v15 - 2);
                  v18 = v19;
                  if (v21 != v19)
                  {
                    do
                    {
                      if (*((char *)v21 - 9) < 0)
                        operator delete(*(v21 - 4));
                      v21 -= 4;
                    }
                    while (v21 != v19);
                    v18 = *v17;
                  }
                  *(v15 - 2) = v19;
                  operator delete(v18);
                }
                v15 = v17;
              }
              while (v17 != v14);
              v16 = __p;
            }
            v36 = v14;
            operator delete(v16);
          }
          v30 = (char *)v38;
          if (v38)
          {
            v31 = v39;
            v32 = v38;
            if (v39 != v38)
            {
              do
              {
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v31 - 24), *((_QWORD *)v31 - 2));
                v33 = (void *)*((_QWORD *)v31 - 6);
                if (v33)
                {
                  *((_QWORD *)v31 - 5) = v33;
                  operator delete(v33);
                }
                if (*(v31 - 57) < 0)
                  operator delete(*((void **)v31 - 10));
                v31 -= 80;
              }
              while (v31 != v30);
              v32 = v38;
            }
            v39 = v30;
            operator delete(v32);
          }
          v27 = (void **)v41;
          if (v41)
          {
            v34 = v42;
            v29 = v41;
            if (v42 != v41)
            {
              do
              {
                if (*((char *)v34 - 1) < 0)
                  operator delete(*(v34 - 3));
                v34 -= 3;
              }
              while (v34 != v27);
              goto LABEL_43;
            }
LABEL_44:
            v42 = v27;
            operator delete(v29);
          }
          goto LABEL_45;
        }
      }
      else if (a3)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)*i + 72))(v43);
        (*(void (**)(void **__return_ptr))(**(_QWORD **)(*i + 24) + 80))(&v41);
        cricket::MediaDescriptionOptions::AddAudioSender(a3, (uint64_t)v43, (uint64_t)&v41, v22, v23, v24, v25, v26);
        v27 = (void **)v41;
        if (v41)
        {
          v28 = v42;
          v29 = v41;
          if (v42 == v41)
            goto LABEL_44;
          do
          {
            if (*((char *)v28 - 1) < 0)
              operator delete(*(v28 - 3));
            v28 -= 3;
          }
          while (v28 != v27);
LABEL_43:
          v29 = v41;
          goto LABEL_44;
        }
LABEL_45:
        if (v44 < 0)
          operator delete(v43[0]);
      }
    }
  }
}

void webrtc::`anonymous namespace'::GetMediaDescriptionOptionsForTransceiver(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  std::string *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void *v14;
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void (**v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  std::string *v32;
  __int128 v33;
  void *v34;
  int v35;
  std::string::size_type v36;
  char v37;
  char *v38;
  std::string *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  std::string *v43;
  uint64_t *v44;
  uint64_t *v45;
  void *v46;
  void **v47;
  void *v48;
  void **v49;
  void **v50;
  void **v51;
  std::string *v52;
  std::string *v53;
  void *v54;
  std::string::pointer data;
  std::string *v56;
  std::string v57;
  int v58;
  void *__p;
  void *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63[2];
  void *v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  std::string *v68;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _OWORD v78[3];
  int v79;

  v7 = 64;
  if (a4)
    v7 = 72;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + v7))(a2);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  *(_DWORD *)a1 = v9;
  v11 = (std::string *)(a1 + 8);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a3 + 16);
  }
  *(_DWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 36) = v8;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 69) = 0u;
  *(_OWORD *)(a1 + 85) = 0u;
  *(_OWORD *)(a1 + 101) = 0u;
  *(_OWORD *)(a1 + 117) = 0u;
  *(_DWORD *)(a1 + 132) = 0;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 152))(&v70, a2);
  v12 = *(void (****)(_QWORD))(a1 + 64);
  if (v12)
  {
    v13 = *(void (****)(_QWORD))(a1 + 72);
    v14 = *(void **)(a1 + 64);
    if (v13 != v12)
    {
      v15 = v13 - 20;
      v16 = v13 - 20;
      do
      {
        v17 = *v16;
        v16 -= 20;
        (*v17)(v15);
        v31 = v15 == v12;
        v15 = v16;
      }
      while (!v31);
      v14 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v12;
    operator delete(v14);
  }
  *(_OWORD *)(a1 + 64) = v70;
  *(_QWORD *)(a1 + 80) = v71;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 160))(&v70, a2);
  v18 = *(_QWORD *)(a1 + 88);
  if (v18)
  {
    v19 = *(_QWORD *)(a1 + 96);
    v20 = *(void **)(a1 + 88);
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 17) < 0)
          operator delete(*(void **)(v19 - 40));
        v19 -= 40;
      }
      while (v19 != v18);
      v20 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v18;
    operator delete(v20);
  }
  *(_OWORD *)(a1 + 88) = v70;
  *(_QWORD *)(a1 + 104) = v71;
  if ((v8 & 1) == 0
    && ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2) < 2 || *(_BYTE *)(a2 + 154)))
  {
    memset(v78, 0, sizeof(v78));
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v57, a2);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v57.__r_.__value_.__l.__data_ + 72))(&v70);
    v74 = v70;
    v75 = v71;
    HIBYTE(v71) = 0;
    LOBYTE(v70) = 0;
    if (v57.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v57.__r_.__value_.__l.__data_ + 8))(v57.__r_.__value_.__r.__words[0]);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v57, a2);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v57.__r_.__value_.__l.__data_ + 80))(&v70);
    v76 = v70;
    v77 = v71;
    v71 = 0;
    v70 = 0uLL;
    if (v57.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v57.__r_.__value_.__l.__data_ + 8))(v57.__r_.__value_.__r.__words[0]);
    v25 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(a2 + 40) - v25 != 8)
    {
      v56 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 476, "1u == senders_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v21, v22, v23, v24, 1);
      cricket::MediaDescriptionOptions::operator=(v56);
      return;
    }
    v26 = *(_QWORD *)(*(_QWORD *)v25 + 24);
    if (v26)
      (**(void (***)(uint64_t))v26)(v26);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v26 + 248))(&v70, v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v27 = v72;
    v28 = v73;
    if (v72 == v73)
    {
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v64 = 0;
      v65 = 0;
      v42 = 1;
      v66 = 0;
      goto LABEL_77;
    }
    v29 = v72 + 272;
    do
    {
      if (*(char *)(v29 - 121) >= 0)
        v30 = *(unsigned __int8 *)(v29 - 121);
      else
        v30 = *(_QWORD *)(v29 - 136);
      if (v30)
        v31 = 1;
      else
        v31 = v29 == v73;
      v29 += 272;
    }
    while (!v31);
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    while (1)
    {
      v32 = (std::string *)(v27 + 128);
      if (*(char *)(v27 + 151) < 0)
      {
        if (*(_QWORD *)(v27 + 136))
        {
          std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(v27 + 128), *(_QWORD *)(v27 + 136));
LABEL_48:
          v58 = 0;
          v60 = 0;
          v61 = 0;
          __p = 0;
          v63[0] = 0;
          v63[1] = 0;
          v62 = v63;
          if ((unint64_t)v68 >= v69)
          {
            v68 = (std::string *)std::vector<cricket::RidDescription>::__push_back_slow_path<cricket::RidDescription>((const cricket::RidDescription **)&v67, (const cricket::RidDescription *)&v57);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v62, v63[0]);
            v34 = __p;
            if (!__p)
              goto LABEL_54;
          }
          else
          {
            if (!v68)
              goto LABEL_107;
            v68 = (std::string *)((char *)cricket::RidDescription::RidDescription(v68, (const cricket::RidDescription *)&v57)+ 80);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v62, v63[0]);
            v34 = __p;
            if (!__p)
            {
LABEL_54:
              if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v57.__r_.__value_.__l.__data_);
                v35 = *(char *)(v27 + 151);
                if (v35 < 0)
                  goto LABEL_58;
LABEL_56:
                v36 = v35;
              }
              else
              {
                v35 = *(char *)(v27 + 151);
                if ((v35 & 0x80000000) == 0)
                  goto LABEL_56;
LABEL_58:
                v36 = *(_QWORD *)(v27 + 136);
                if ((v36 & 0x8000000000000000) != 0)
                  goto LABEL_107;
                v32 = (std::string *)v32->__r_.__value_.__r.__words[0];
                if (v36)
                {
                  if (!v32)
                    goto LABEL_107;
                }
                if (v36 >= 0x7FFFFFFFFFFFFFF8)
                  goto LABEL_108;
              }
              v37 = *(_BYTE *)(v27 + 124);
              if (v36 > 0x16)
              {
                v40 = (v36 & 0x7FFFFFFFFFFFFFF8) + 8;
                if ((v36 | 7) != 0x17)
                  v40 = v36 | 7;
                v41 = v40 + 1;
                v38 = (char *)operator new(v40 + 1);
                v57.__r_.__value_.__l.__size_ = v36;
                v57.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
                v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
                v39 = (std::string *)&v38[v36];
                if (v38 > (char *)v32)
                  goto LABEL_69;
              }
              else
              {
                *((_BYTE *)&v57.__r_.__value_.__s + 23) = v36;
                v38 = (char *)&v57;
                v39 = (std::string *)((char *)&v57 + v36);
                if (&v57 > v32)
                {
LABEL_69:
                  if (v36)
                    memmove(v38, v32, v36);
                  v39->__r_.__value_.__s.__data_[0] = 0;
                  LOBYTE(v58) = v37 ^ 1;
                  cricket::SimulcastLayerList::AddLayer((uint64_t)&v64, (uint64_t)&v57);
                  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v57.__r_.__value_.__l.__data_);
                  goto LABEL_42;
                }
              }
              if (v39 > v32)
                goto LABEL_107;
              goto LABEL_69;
            }
          }
          v60 = v34;
          operator delete(v34);
          goto LABEL_54;
        }
      }
      else if (*(_BYTE *)(v27 + 151))
      {
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 + 144);
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v33;
        goto LABEL_48;
      }
LABEL_42:
      v27 += 272;
      if (v27 == v28)
      {
        if (v30)
        {
          std::vector<cricket::RidDescription>::__assign_with_size[abi:sn180100]<cricket::RidDescription*,cricket::RidDescription*>((uint64_t)v78, (const cricket::RidDescription *)v67, (const cricket::RidDescription *)v68, 0xCCCCCCCCCCCCCCCDLL * (((char *)v68 - (_BYTE *)v67) >> 4));
          v42 = 0;
        }
        else
        {
          v42 = 1;
        }
LABEL_77:
        std::vector<std::vector<cricket::SimulcastLayer>>::__assign_with_size[abi:sn180100]<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>((uint64_t)&v78[1] + 8, (uint64_t *)v64, v65, 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - (_BYTE *)v64) >> 3));
        v79 = v42;
        v43 = *(std::string **)(a1 + 48);
        if ((unint64_t)v43 >= *(_QWORD *)(a1 + 56))
        {
          *(_QWORD *)(a1 + 48) = std::vector<cricket::SenderOptions>::__push_back_slow_path<cricket::SenderOptions const&>((std::string **)(a1 + 40), (const cricket::SenderOptions *)&v74);
          v44 = (uint64_t *)v64;
          if (!v64)
            goto LABEL_95;
        }
        else
        {
          if (!v43)
          {
LABEL_107:
            __break(1u);
LABEL_108:
            abort();
          }
          *(_QWORD *)(a1 + 48) = (char *)cricket::SenderOptions::SenderOptions(v43, (const cricket::SenderOptions *)&v74)+ 104;
          v44 = (uint64_t *)v64;
          if (!v64)
          {
LABEL_95:
            v52 = (std::string *)v67;
            if (v67)
            {
              v53 = v68;
              v54 = v67;
              if (v68 != v67)
              {
                do
                {
                  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v53[-1], v53[-1].__r_.__value_.__l.__size_);
                  data = v53[-2].__r_.__value_.__l.__data_;
                  if (data)
                  {
                    v53[-2].__r_.__value_.__l.__size_ = (std::string::size_type)data;
                    operator delete(data);
                  }
                  if (v53[-3].__r_.__value_.__s.__data_[15] < 0)
                    operator delete((void *)v53[-4].__r_.__value_.__r.__words[2]);
                  v53 = (std::string *)((char *)v53 - 80);
                }
                while (v53 != v52);
                v54 = v67;
              }
              v68 = v52;
              operator delete(v54);
            }
            webrtc::RtpParameters::~RtpParameters((void **)&v70);
            cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)&v74);
            return;
          }
        }
        v45 = v65;
        v46 = v44;
        if (v65 != v44)
        {
          v47 = (void **)v65;
          do
          {
            v50 = (void **)*(v47 - 3);
            v47 -= 3;
            v49 = v50;
            if (v50)
            {
              v51 = (void **)*(v45 - 2);
              v48 = v49;
              if (v51 != v49)
              {
                do
                {
                  if (*((char *)v51 - 9) < 0)
                    operator delete(*(v51 - 4));
                  v51 -= 4;
                }
                while (v51 != v49);
                v48 = *v47;
              }
              *(v45 - 2) = (uint64_t)v49;
              operator delete(v48);
            }
            v45 = (uint64_t *)v47;
          }
          while (v47 != (void **)v44);
          v46 = v64;
        }
        v65 = v44;
        operator delete(v46);
        goto LABEL_95;
      }
    }
  }
}

uint64_t cricket::MediaDescriptionOptions::operator=(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  void **v7;
  char *v8;
  char *v9;
  void *v10;
  void **v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void *v14;
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void (**v17)(_QWORD);
  BOOL v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;
  void (***v24)(_QWORD);
  void (***v25)(_QWORD);
  void *v26;
  void (***v27)(_QWORD);
  void (***v28)(_QWORD);
  void (**v29)(_QWORD);

  v4 = (__int128 *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v5);
  v6 = *v4;
  *(_QWORD *)(v5 + 16) = *((_QWORD *)v4 + 2);
  *(_OWORD *)v5 = v6;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v7 = (void **)(a1 + 40);
  v8 = *(char **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (v8)
  {
    v9 = *(char **)(a1 + 48);
    v10 = v8;
    if (v9 != v8)
    {
      do
        cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)(v9 - 104));
      while (v9 != v8);
      v10 = *v7;
    }
    *(_QWORD *)(a1 + 48) = v8;
    operator delete(v10);
    *v7 = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v11 = (void **)(a1 + 64);
  v12 = *(void (****)(_QWORD))(a1 + 64);
  if (v12)
  {
    v13 = *(void (****)(_QWORD))(a1 + 72);
    v14 = *(void **)(a1 + 64);
    if (v13 != v12)
    {
      v15 = v13 - 20;
      v16 = v13 - 20;
      do
      {
        v17 = *v16;
        v16 -= 20;
        (*v17)(v15);
        v18 = v15 == v12;
        v15 = v16;
      }
      while (!v18);
      v14 = *v11;
    }
    *(_QWORD *)(a1 + 72) = v12;
    operator delete(v14);
    *v11 = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v19 = (void **)(a1 + 88);
  v20 = *(_QWORD *)(a1 + 88);
  if (v20)
  {
    v21 = *(_QWORD *)(a1 + 96);
    v22 = *(void **)(a1 + 88);
    if (v21 != v20)
    {
      do
      {
        if (*(char *)(v21 - 17) < 0)
          operator delete(*(void **)(v21 - 40));
        v21 -= 40;
      }
      while (v21 != v20);
      v22 = *v19;
    }
    *(_QWORD *)(a1 + 96) = v20;
    operator delete(v22);
    *v19 = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  v23 = (void **)(a1 + 112);
  v24 = *(void (****)(_QWORD))(a1 + 112);
  if (v24)
  {
    v25 = *(void (****)(_QWORD))(a1 + 120);
    v26 = *(void **)(a1 + 112);
    if (v25 != v24)
    {
      v27 = v25 - 27;
      v28 = v25 - 27;
      do
      {
        v29 = *v28;
        v28 -= 27;
        (*v29)(v27);
        v18 = v27 == v24;
        v27 = v28;
      }
      while (!v18);
      v26 = *v23;
    }
    *(_QWORD *)(a1 + 120) = v24;
    operator delete(v26);
    *v23 = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  return a1;
}

void webrtc::SdpOfferAnswerHandler::RemoveRecvDirectionFromReceivingTransceiversOfType(uint64_t a1, int a2)
{
  unint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  _BOOL4 v7;
  _BOOL4 v9;
  _BOOL4 v11;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  void *v32[2];
  uint64_t v33;
  char v34;
  void *__p[2];
  uint64_t v36;
  void *v37[2];
  char v38;
  char v39;
  _QWORD v40[3];
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;

  webrtc::SdpOfferAnswerHandler::GetReceivingTransceiversOfType(&v45, a1, a2);
  v4 = v45;
  v5 = v46;
  if (v45 != v46)
  {
    v7 = __p <= (void **)"<not set>" && (char *)&__p[1] + 1 > "<not set>";
    v31 = v7;
    v9 = v37 <= (void **)"data" && (char *)v37 + 4 > "data";
    v30 = v9;
    v11 = v37 <= (void **)"video" && (char *)v37 + 5 > "video";
    v29 = v11;
    v13 = v37 <= (void **)"audio" && (char *)v37 + 5 > "audio";
    v28 = v13;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v4 + 80))(*v4) <= 1)
        v14 = 1;
      else
        v14 = 3;
      if (v14 != (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v4 + 80))(*v4))
      {
        v15 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
        if ((v15 & 1) == 0)
        {
          v2 = v2 & 0xFFFFFFFF00000000 | 0x8EA1;
          v40[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc";
          v40[1] = v2;
          v40[2] = &v39;
          v41[0] = "Changing ";
          v41[1] = v40;
          switch(a2)
          {
            case 0:
              v38 = 5;
              if (v28)
                goto LABEL_64;
              v16 = "audio";
              goto LABEL_39;
            case 1:
              v38 = 5;
              if (v29)
                goto LABEL_64;
              v16 = "video";
LABEL_39:
              LODWORD(v37[0]) = *(_DWORD *)v16;
              WORD2(v37[0]) = *((unsigned __int8 *)v16 + 4);
              break;
            case 2:
              v38 = 4;
              if (v30)
                goto LABEL_64;
              strcpy((char *)v37, "data");
              break;
            case 3:
              v38 = 0;
              LOBYTE(v37[0]) = 0;
              break;
            default:
              goto LABEL_65;
          }
          v42[0] = v37;
          v42[1] = v41;
          v43[0] = " transceiver (MID=";
          v43[1] = v42;
          v15 = (uint64_t)(*(_QWORD *(**)(void **__return_ptr))(*(_QWORD *)*v4 + 40))(v32);
          if (v34)
          {
            *(_OWORD *)__p = *(_OWORD *)v32;
            v36 = v33;
            v32[1] = 0;
            v33 = 0;
            v32[0] = 0;
          }
          else
          {
            HIBYTE(v36) = 9;
            if (v31)
            {
LABEL_64:
              __break(1u);
LABEL_65:
              rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v15);
            }
            strcpy((char *)__p, "<not set>");
          }
          v43[2] = __p;
          v44 = v43;
          (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 80))(*v4);
          rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t\t\t\t\t", v17, v18, v19, v20, v21, v22, v23, **(_QWORD **)(*(_QWORD *)(v44[1] + 8) + 8));
          if (SHIBYTE(v36) < 0)
            operator delete(__p[0]);
          if (v34 && SHIBYTE(v33) < 0)
            operator delete(v32[0]);
          if (v38 < 0)
            operator delete(v37[0]);
        }
        *(_DWORD *)(*(_QWORD *)(*v4 + 16) + 84) = v14;
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v45;
  }
  if (v4)
  {
    v24 = v46;
    v25 = v4;
    if (v46 != v4)
    {
      do
      {
        v27 = *--v24;
        v26 = v27;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      }
      while (v24 != v4);
      v25 = v45;
    }
    v46 = v4;
    operator delete(v25);
  }
}

void webrtc::SdpOfferAnswerHandler::AddUpToOneReceivingTransceiverOfType(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  void **v23;
  void **v24;
  void *v25;
  uint64_t v26;
  void *v27[3];
  char v28;
  uint64_t v29;
  char v30;
  void *__p;
  void *v32[2];
  void *v33[2];
  __int128 v34;

  webrtc::SdpOfferAnswerHandler::GetReceivingTransceiversOfType(&__p, a1, a2);
  v4 = (char *)__p;
  v5 = (char *)v32[0];
  if (__p)
  {
    v6 = __p;
    if (__p != v32[0])
    {
      v7 = (char *)v32[0];
      do
      {
        v9 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        v8 = v9;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v7 != v4);
      v6 = __p;
    }
    v32[0] = v4;
    operator delete(v6);
  }
  if (v4 == v5)
  {
    v10 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
    if ((v10 & 1) == 0)
    {
      switch((int)a2)
      {
        case 0:
          HIBYTE(v32[1]) = 5;
          v18 = "audio";
          if (&__p > (void **)"audio")
            goto LABEL_20;
          goto LABEL_19;
        case 1:
          HIBYTE(v32[1]) = 5;
          v18 = "video";
          if (&__p > (void **)"video")
            goto LABEL_20;
LABEL_19:
          if ((char *)&__p + 5 > v18)
          {
LABEL_44:
            __break(1u);
LABEL_45:
            rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v10);
          }
LABEL_20:
          LODWORD(__p) = *(_DWORD *)v18;
          WORD2(__p) = *((unsigned __int8 *)v18 + 4);
          break;
        case 2:
          HIBYTE(v32[1]) = 4;
          if (&__p <= (void **)"data" && (char *)&__p + 4 > "data")
            goto LABEL_44;
          strcpy((char *)&__p, "data");
          break;
        case 3:
          HIBYTE(v32[1]) = 0;
          LOBYTE(__p) = 0;
          break;
        default:
          goto LABEL_45;
      }
      rtc::webrtc_logging_impl::Log("\r\t\n\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      if (SHIBYTE(v32[1]) < 0)
        operator delete(__p);
    }
    *(_OWORD *)v33 = 0u;
    v34 = 0u;
    *(_OWORD *)v32 = 0u;
    LODWORD(__p) = 2;
    v19 = *(_QWORD *)(a1 + 8);
    v26 = 0;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t *, void **, _QWORD))(*(_QWORD *)v19 + 208))(v27, v19, a2, &v26, &__p, 0);
    if (v30 && v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    if (v28 < 0)
      operator delete(v27[1]);
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v20 = (char *)v33[1];
    if (v33[1])
    {
      v21 = (char *)v34;
      v22 = v33[1];
      if ((void *)v34 != v33[1])
      {
        do
          webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v21 - 272));
        while (v21 != v20);
        v22 = v33[1];
      }
      *(_QWORD *)&v34 = v20;
      operator delete(v22);
    }
    v23 = (void **)v32[0];
    if (v32[0])
    {
      v24 = (void **)v32[1];
      v25 = v32[0];
      if (v32[1] != v32[0])
      {
        do
        {
          if (*((char *)v24 - 1) < 0)
            operator delete(*(v24 - 3));
          v24 -= 3;
        }
        while (v24 != v23);
        v25 = v32[0];
      }
      v32[1] = v23;
      operator delete(v25);
    }
  }
}

void webrtc::SdpOfferAnswerHandler::GetReceivingTransceiversOfType(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  void (***v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  void (****v15)(_QWORD);
  _QWORD *v16;
  _QWORD *v17;
  void (***v18)(_QWORD);
  uint64_t v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 64))(*(_QWORD *)(a2 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 64))(*(_QWORD *)(a2 + 8));
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = v8 - v7;
  if (v8 != v7)
  {
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_27;
    v10 = (char *)operator new(v9);
    v11 = 0;
    do
    {
      v12 = *(void (****)(_QWORD))(v7 + v11);
      *(_QWORD *)&v10[v11] = v12;
      if (v12)
        (**v12)(v12);
      v11 += 8;
    }
    while (v7 + v11 != v8);
    if (v11)
    {
      v13 = 8 * (v11 >> 3);
      v14 = v13;
      v15 = (void (****)(_QWORD))v10;
      do
      {
        if ((((uint64_t (*)(_QWORD))(**v15)[8])(*v15) & 1) == 0
          && ((unsigned int (*)(_QWORD))(**v15)[4])(*v15) == a3
          && (((uint64_t (*)(_QWORD))(**v15)[10])(*v15) & 0xFFFFFFFD) == 0)
        {
          v17 = (_QWORD *)a1[1];
          if ((unint64_t)v17 >= a1[2])
          {
            v16 = std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>((uint64_t)a1, v15);
          }
          else
          {
            if (!v17)
            {
              __break(1u);
LABEL_27:
              abort();
            }
            v18 = *v15;
            *v17 = *v15;
            if (v18)
              (**v18)(v18);
            v16 = v17 + 1;
          }
          a1[1] = v16;
        }
        ++v15;
        v14 -= 8;
      }
      while (v14);
      do
      {
        v19 = *(_QWORD *)&v10[v13 - 8];
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v13 -= 8;
      }
      while (v13);
    }
    operator delete(v10);
  }
}

uint64_t std::vector<webrtc::RtpSenderInfo>::erase[abi:sn180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  v2 = *(_QWORD *)(result + 8);
  if (v2 != a2)
  {
    v4 = result;
    if (a2 + 56 == v2)
    {
      v6 = a2;
    }
    else
    {
      v5 = a2;
      do
      {
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        *(_OWORD *)v5 = *(_OWORD *)(v5 + 56);
        *(_QWORD *)(v5 + 16) = *(_QWORD *)(v5 + 72);
        *(_BYTE *)(v5 + 79) = 0;
        *(_BYTE *)(v5 + 56) = 0;
        v8 = (void **)(v5 + 24);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*v8);
        *(_OWORD *)v8 = *(_OWORD *)(v5 + 80);
        *(_QWORD *)(v5 + 40) = *(_QWORD *)(v5 + 96);
        *(_BYTE *)(v5 + 103) = 0;
        *(_BYTE *)(v5 + 80) = 0;
        *(_DWORD *)(v5 + 48) = *(_DWORD *)(v5 + 104);
        v6 = v5 + 56;
        v7 = v5 + 112;
        v5 += 56;
      }
      while (v7 != v2);
      v2 = *(_QWORD *)(v4 + 8);
    }
    while (1)
    {
      if (v2 == v6)
      {
        *(_QWORD *)(v4 + 8) = v6;
        return a2;
      }
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        if ((*(char *)(v2 - 33) & 0x80000000) == 0)
          goto LABEL_11;
      }
      else if ((*(char *)(v2 - 33) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(*(void **)(v2 - 56));
LABEL_11:
      v2 -= 56;
    }
  }
  __break(1u);
  return result;
}

void webrtc::SdpOfferAnswerHandler::FindContentInfo(webrtc::SdpOfferAnswerHandler *this, const webrtc::SessionDescriptionInterface *a2, const webrtc::IceCandidateInterface *a3)
{
  __int128 **v6;
  __int128 *v7;
  __int128 *v8;
  __int128 **v9;
  __int128 v10;
  char v11;
  std::string::size_type v12;
  std::string::size_type v13;
  int v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  BOOL v24;
  std::string::size_type size;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  std::string *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string::size_type v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  std::string::size_type v51;
  std::string *v52;
  _BYTE *v53;
  _BOOL4 v54;
  std::string *v55;
  char *v56;
  std::string::size_type v57;
  std::string *v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string *v63;
  char *v64;
  std::string::size_type v65;
  size_t v66;
  std::string *v67;
  std::string *v68;
  std::string *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  std::string *v75;
  std::string::size_type v76;
  std::string::size_type v77;
  std::string::size_type v78;
  std::string::size_type v79;
  std::string *v80;
  char *v81;
  std::string::size_type v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::string::size_type v88;
  std::string *v89;
  _BYTE *v90;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  BOOL v95;
  std::string *v96;
  std::string::size_type v97;
  std::string::size_type v98;
  std::string *v99;
  char *v100;
  std::string::size_type v101;
  unint64_t v102;
  std::string::size_type v103;
  int v104;
  uint64_t v105;
  std::string::size_type v106;
  std::string::size_type v107;
  BOOL v108;
  std::string *v109;
  _WORD *v110;
  std::string::size_type v111;
  int v112;
  int v113;
  std::string::size_type v114;
  std::string *v115;
  _BYTE *v116;
  _BOOL4 v117;
  uint64_t v118;
  uint64_t v119;
  std::string *v120;
  std::string::size_type v121;
  std::string::size_type v122;
  std::string::size_type v123;
  std::string::size_type v124;
  std::string *v125;
  char *v126;
  std::string::size_type v127;
  int v128;
  size_t v129;
  std::string *p_p;
  _BYTE *v131;
  _BOOL4 v132;
  uint64_t v133;
  uint64_t v134;
  size_t v135;
  BOOL v136;
  char *v137;
  std::string::size_type v138;
  std::string::size_type v139;
  std::string *v140;
  char *v141;
  std::string::size_type v142;
  std::string::size_type v143;
  std::string::size_type v144;
  std::string *v145;
  _WORD *v146;
  std::string::size_type v147;
  size_t v148;
  std::string *p_src;
  std::string *v150;
  std::string *v151;
  uint64_t v152;
  uint64_t v153;
  void *__p;
  uint64_t v155;
  unint64_t v156;
  std::string v157;
  std::string v158;
  std::string v159;
  std::string v160;
  std::string __src;
  std::string v162;
  unint64_t v163;
  _BYTE v164[7];
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(std::string *__return_ptr, const webrtc::IceCandidateInterface *))(*(_QWORD *)a3 + 16))(&v162, a3);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v162.__r_.__value_.__l.__size_;
    operator delete(v162.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_3;
LABEL_39:
    if (((*(uint64_t (**)(const webrtc::IceCandidateInterface *))(*(_QWORD *)a3 + 24))(a3) & 0x80000000) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v162.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
        v162.__r_.__value_.__l.__size_ = 17;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      }
      v48 = (char *)operator new(0x30uLL);
      if (v48 > "Neither sdp_mline_index nor sdp_mid specified."
        || v48 + 46 <= "Neither sdp_mline_index nor sdp_mid specified.")
      {
        strcpy(v48, "Neither sdp_mline_index nor sdp_mid specified.");
        *(_DWORD *)this = 3;
        *((_QWORD *)this + 1) = v48;
        *((_OWORD *)this + 1) = xmmword_208F1B0A0;
        *((_DWORD *)this + 8) = 0;
        *((_BYTE *)this + 36) = 0;
        *((_BYTE *)this + 38) = 0;
        *((_BYTE *)this + 40) = 0;
        *((_BYTE *)this + 48) = 0;
        return;
      }
      goto LABEL_302;
    }
    v26 = (*(int (**)(const webrtc::IceCandidateInterface *))(*(_QWORD *)a3 + 24))(a3);
    v27 = (_QWORD *)(*(uint64_t (**)(const webrtc::SessionDescriptionInterface *))(*(_QWORD *)a2 + 32))(a2);
    v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27[1] - *v27) >> 3);
    if (v28 > v26)
    {
      v29 = (uint64_t *)(*(uint64_t (**)(const webrtc::SessionDescriptionInterface *))(*(_QWORD *)a2 + 32))(a2);
      v30 = *v29;
      if (0xCCCCCCCCCCCCCCCDLL * ((v29[1] - *v29) >> 3) > v26)
      {
        *(_DWORD *)this = 0;
        *((_BYTE *)this + 38) = 0;
        *((_QWORD *)this + 2) = 0;
        *((_QWORD *)this + 3) = 0;
        *((_QWORD *)this + 1) = 0;
        *(_QWORD *)((char *)this + 29) = 0;
        *((_QWORD *)this + 5) = v30 + 40 * (int)v26;
        goto LABEL_45;
      }
      goto LABEL_302;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    {
LABEL_193:
      v112 = (*(uint64_t (**)(const webrtc::IceCandidateInterface *))(*(_QWORD *)a3 + 24))(a3);
      v113 = snprintf((char *)&v162, 0x20uLL, "%d", v112);
      if (v113 < 0)
        goto LABEL_303;
      v114 = v113;
      if (v113 > 0x16)
      {
        v118 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v113 | 7) != 0x17)
          v118 = v113 | 7;
        v119 = v118 + 1;
        v115 = (std::string *)operator new(v118 + 1);
        v157.__r_.__value_.__l.__size_ = v114;
        v157.__r_.__value_.__r.__words[2] = v119 | 0x8000000000000000;
        v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
        v116 = (char *)v115 + v114;
        v117 = (std::string *)((char *)v115 + v114) > &v162;
        if (v115 > &v162)
          goto LABEL_201;
      }
      else
      {
        *((_BYTE *)&v157.__r_.__value_.__s + 23) = v113;
        v115 = &v157;
        v116 = (char *)&v157 + v114;
        v117 = (std::string *)((char *)&v157 + v114) > &v162;
        if (&v157 > &v162)
          goto LABEL_201;
      }
      if (v117)
        goto LABEL_302;
LABEL_201:
      if ((_DWORD)v114)
        memcpy(v115, &v162, v114);
      *v116 = 0;
      v120 = std::string::insert(&v157, 0, "Media line index (");
      v121 = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v158.__r_.__value_.__l.__data_ = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v158.__r_.__value_.__r.__words[2] = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      v122 = v158.__r_.__value_.__r.__words[2];
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v123 = 22;
      else
        v123 = (v158.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v124 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
      else
        v124 = v158.__r_.__value_.__l.__size_;
      if (v123 - v124 >= 0x22)
      {
        v125 = &v158;
        if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v125 = (std::string *)v158.__r_.__value_.__r.__words[0];
        v126 = (char *)v125 + v124;
        if ((char *)v125 + v124 <= ") out of range (number of mlines: "
          && v126 + 34 > ") out of range (number of mlines: ")
        {
          goto LABEL_302;
        }
        qmemcpy(v126, ") out of range (number of mlines: ", 34);
        v127 = v124 + 34;
        if ((v122 & 0x8000000000000000) != 0)
          v158.__r_.__value_.__l.__size_ = v124 + 34;
        else
          *((_BYTE *)&v158.__r_.__value_.__s + 23) = v127 & 0x7F;
        v125->__r_.__value_.__s.__data_[v127] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(&v158, v123, v124 - v123 + 34, v124, v124, 0, 0x22uLL, ") out of range (number of mlines: ");
      }
      v159 = v158;
      memset(&v158, 0, sizeof(v158));
      v128 = snprintf((char *)&v162, 0x20uLL, "%lu", v28);
      if (v128 < 0)
        goto LABEL_303;
      v129 = v128;
      if (v128 > 0x16)
      {
        v133 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v128 | 7) != 0x17)
          v133 = v128 | 7;
        v134 = v133 + 1;
        p_p = (std::string *)operator new(v133 + 1);
        v155 = v129;
        v156 = v134 | 0x8000000000000000;
        __p = p_p;
        v131 = (char *)p_p + v129;
        v132 = (std::string *)((char *)p_p + v129) > &v162;
        if (p_p > &v162)
          goto LABEL_227;
      }
      else
      {
        HIBYTE(v156) = v128;
        p_p = (std::string *)&__p;
        v131 = (char *)&__p + v129;
        v132 = (char *)&__p + v129 > (char *)&v162;
        if (&__p > (void **)&v162)
          goto LABEL_227;
      }
      if (v132)
        goto LABEL_302;
LABEL_227:
      if ((_DWORD)v129)
        memcpy(p_p, &v162, v129);
      *v131 = 0;
      if (SHIBYTE(v156) < 0)
      {
        v137 = (char *)__p;
        v135 = v155;
        v136 = v155 == 0;
        if (!__p && v155)
          goto LABEL_302;
      }
      else
      {
        v135 = HIBYTE(v156);
        v136 = HIBYTE(v156) == 0;
        v137 = (char *)&__p;
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v138 = 22;
      else
        v138 = (v159.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v139 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      else
        v139 = v159.__r_.__value_.__l.__size_;
      if (v138 - v139 >= v135)
      {
        if (!v136)
        {
          if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v140 = &v159;
          else
            v140 = (std::string *)v159.__r_.__value_.__r.__words[0];
          v141 = (char *)v140 + v139;
          if ((char *)v140 + v139 <= v137 && &v141[v135] > v137)
            goto LABEL_302;
          memmove(v141, v137, v135);
          v142 = v139 + v135;
          if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
            v159.__r_.__value_.__l.__size_ = v139 + v135;
          else
            *((_BYTE *)&v159.__r_.__value_.__s + 23) = v142 & 0x7F;
          v140->__r_.__value_.__s.__data_[v142] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v159, v138, v139 + v135 - v138, v139, v139, 0, v135, v137);
      }
      v160 = v159;
      memset(&v159, 0, sizeof(v159));
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v143 = 22;
      else
        v143 = (v160.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v144 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
      else
        v144 = v160.__r_.__value_.__l.__size_;
      if (v143 - v144 >= 2)
      {
        v145 = &v160;
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v145 = (std::string *)v160.__r_.__value_.__r.__words[0];
        v146 = (_WORD *)((char *)v145 + v144);
        if ((char *)v145 + v144 <= ")." && v146 + 1 > (_WORD *)").")
          goto LABEL_302;
        *v146 = 11817;
        v147 = v144 + 2;
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          v160.__r_.__value_.__l.__size_ = v144 + 2;
        else
          *((_BYTE *)&v160.__r_.__value_.__s + 23) = v147 & 0x7F;
        v145->__r_.__value_.__s.__data_[v147] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(&v160, v143, v144 - v143 + 2, v144, v144, 0, 2uLL, ").");
      }
      __src = v160;
      memset(&v160, 0, sizeof(v160));
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      {
        v148 = __src.__r_.__value_.__l.__size_;
        if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_302;
        p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
        if (__src.__r_.__value_.__l.__size_)
        {
          if (!__src.__r_.__value_.__r.__words[0])
            goto LABEL_302;
        }
        LODWORD(v162.__r_.__value_.__l.__data_) = 4;
        if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_303;
        if (__src.__r_.__value_.__l.__size_ <= 0x16)
        {
LABEL_275:
          HIBYTE(v163) = v148;
          v150 = (std::string *)&v162.__r_.__value_.__r.__words[1];
          v151 = (std::string *)((char *)&v162.__r_.__value_.__r.__words[1] + v148);
          if (&v162.__r_.__value_.__r.__words[1] > (std::string::size_type *)p_src)
            goto LABEL_286;
LABEL_285:
          if (v151 > p_src)
            goto LABEL_302;
LABEL_286:
          if (v148)
            memmove(v150, p_src, v148);
          v151->__r_.__value_.__s.__data_[0] = 0;
          *(_DWORD *)v164 = 0;
          v164[4] = 0;
          v164[6] = 0;
          *(_DWORD *)this = v162.__r_.__value_.__l.__data_;
          *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v162.__r_.__value_.__r.__words[1];
          *((_QWORD *)this + 3) = v163;
          *(_OWORD *)&v162.__r_.__value_.__r.__words[1] = 0uLL;
          v163 = 0;
          *((_DWORD *)this + 8) = 0;
          *(_DWORD *)((char *)this + 35) = *(_DWORD *)&v164[3];
          *((_BYTE *)this + 40) = 0;
          *((_BYTE *)this + 48) = 0;
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__src.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_290:
              if ((SHIBYTE(v156) & 0x80000000) == 0)
                goto LABEL_291;
              goto LABEL_297;
            }
          }
          else if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_290;
          }
          operator delete(v160.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v156) & 0x80000000) == 0)
          {
LABEL_291:
            if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_292;
            goto LABEL_298;
          }
LABEL_297:
          operator delete(__p);
          if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_292:
            if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_293;
            goto LABEL_299;
          }
LABEL_298:
          operator delete(v159.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_293:
            if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return;
LABEL_300:
            v72 = (void *)v157.__r_.__value_.__r.__words[0];
            goto LABEL_301;
          }
LABEL_299:
          operator delete(v158.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return;
          goto LABEL_300;
        }
      }
      else
      {
        v148 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        LODWORD(v162.__r_.__value_.__l.__data_) = 4;
        p_src = &__src;
        if (HIBYTE(__src.__r_.__value_.__r.__words[2]) <= 0x16uLL)
          goto LABEL_275;
      }
      v152 = (v148 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v148 | 7) != 0x17)
        v152 = v148 | 7;
      v153 = v152 + 1;
      v150 = (std::string *)operator new(v152 + 1);
      v162.__r_.__value_.__r.__words[2] = v148;
      v163 = v153 | 0x8000000000000000;
      v162.__r_.__value_.__l.__size_ = (std::string::size_type)v150;
      v151 = (std::string *)((char *)v150 + v148);
      if (v150 > p_src)
        goto LABEL_286;
      goto LABEL_285;
    }
    v49 = (*(uint64_t (**)(const webrtc::IceCandidateInterface *))(*(_QWORD *)a3 + 24))(a3);
    v50 = snprintf((char *)&v162, 0x20uLL, "%d", v49);
    if (v50 < 0)
      goto LABEL_303;
    v51 = v50;
    if (v50 > 0x16)
    {
      v73 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v50 | 7) != 0x17)
        v73 = v50 | 7;
      v74 = v73 + 1;
      v52 = (std::string *)operator new(v73 + 1);
      v158.__r_.__value_.__l.__size_ = v51;
      v158.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
      v53 = (char *)v52 + v51;
      v54 = (std::string *)((char *)v52 + v51) > &v162;
      if (v52 > &v162)
        goto LABEL_121;
    }
    else
    {
      *((_BYTE *)&v158.__r_.__value_.__s + 23) = v50;
      v52 = &v158;
      v53 = (char *)&v158 + v51;
      v54 = (std::string *)((char *)&v158 + v51) > &v162;
      if (&v158 > &v162)
        goto LABEL_121;
    }
    if (v54)
      goto LABEL_302;
LABEL_121:
    if ((_DWORD)v51)
      memcpy(v52, &v162, v51);
    *v53 = 0;
    v75 = std::string::insert(&v158, 0, "Media line index (");
    v76 = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v159.__r_.__value_.__l.__data_ = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v159.__r_.__value_.__r.__words[2] = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    v77 = v159.__r_.__value_.__r.__words[2];
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = 22;
    else
      v78 = (v159.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
    else
      v79 = v159.__r_.__value_.__l.__size_;
    if (v78 - v79 >= 0x22)
    {
      v80 = &v159;
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v80 = (std::string *)v159.__r_.__value_.__r.__words[0];
      v81 = (char *)v80 + v79;
      if ((char *)v80 + v79 <= ") out of range (number of mlines: " && v81 + 34 > ") out of range (number of mlines: ")
        goto LABEL_302;
      qmemcpy(v81, ") out of range (number of mlines: ", 34);
      v82 = v79 + 34;
      if ((v77 & 0x8000000000000000) != 0)
        v159.__r_.__value_.__l.__size_ = v79 + 34;
      else
        *((_BYTE *)&v159.__r_.__value_.__s + 23) = v82 & 0x7F;
      v80->__r_.__value_.__s.__data_[v82] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v159, v78, v79 - v78 + 34, v79, v79, 0, 0x22uLL, ") out of range (number of mlines: ");
    }
    v160 = v159;
    memset(&v159, 0, sizeof(v159));
    v83 = snprintf((char *)&v162, 0x20uLL, "%lu", v28);
    if (v83 < 0)
      goto LABEL_303;
    v88 = v83;
    if (v83 > 0x16)
    {
      v92 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v83 | 7) != 0x17)
        v92 = v83 | 7;
      v93 = v92 + 1;
      v89 = (std::string *)operator new(v92 + 1);
      v157.__r_.__value_.__l.__size_ = v88;
      v157.__r_.__value_.__r.__words[2] = v93 | 0x8000000000000000;
      v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
      v90 = (char *)v89 + v88;
      v91 = (std::string *)((char *)v89 + v88) > &v162;
      if (v89 > &v162)
        goto LABEL_147;
    }
    else
    {
      *((_BYTE *)&v157.__r_.__value_.__s + 23) = v83;
      v89 = &v157;
      v90 = (char *)&v157 + v88;
      v91 = (std::string *)((char *)&v157 + v88) > &v162;
      if (&v157 > &v162)
        goto LABEL_147;
    }
    if (v91)
      goto LABEL_302;
LABEL_147:
    if ((_DWORD)v88)
      memcpy(v89, &v162, v88);
    *v90 = 0;
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    {
      v94 = v157.__r_.__value_.__l.__size_;
      v96 = (std::string *)v157.__r_.__value_.__r.__words[0];
      v95 = v157.__r_.__value_.__l.__size_ == 0;
      if (!v157.__r_.__value_.__r.__words[0] && v157.__r_.__value_.__l.__size_)
        goto LABEL_302;
    }
    else
    {
      v94 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
      v95 = HIBYTE(v157.__r_.__value_.__r.__words[2]) == 0;
      v96 = &v157;
    }
    if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v97 = 22;
    else
      v97 = (v160.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v98 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
    else
      v98 = v160.__r_.__value_.__l.__size_;
    if (v97 - v98 >= v94)
    {
      if (!v95)
      {
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v99 = &v160;
        else
          v99 = (std::string *)v160.__r_.__value_.__r.__words[0];
        v100 = (char *)v99 + v98;
        if ((std::string *)((char *)v99 + v98) <= v96 && &v100[v94] > (char *)v96)
          goto LABEL_302;
        memmove(v100, v96, v94);
        v101 = v98 + v94;
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          v160.__r_.__value_.__l.__size_ = v98 + v94;
        else
          *((_BYTE *)&v160.__r_.__value_.__s + 23) = v101 & 0x7F;
        v99->__r_.__value_.__s.__data_[v101] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v160, v97, v98 + v94 - v97, v98, v98, 0, v94, (const std::string::value_type *)v96);
    }
    v102 = v160.__r_.__value_.__r.__words[2];
    __src = v160;
    memset(&v160, 0, sizeof(v160));
    v103 = HIBYTE(v102);
    v104 = SHIBYTE(v102);
    v105 = (v102 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v104 >= 0)
      v106 = 22;
    else
      v106 = v105;
    if (v104 >= 0)
      v107 = v103;
    else
      v107 = __src.__r_.__value_.__l.__size_;
    if (v106 - v107 >= 2)
    {
      v108 = v104 < 0;
      v109 = &__src;
      if (v108)
        v109 = (std::string *)__src.__r_.__value_.__r.__words[0];
      v110 = (_WORD *)((char *)v109 + v107);
      if ((char *)v109 + v107 <= ")." && v110 + 1 > (_WORD *)").")
        goto LABEL_302;
      *v110 = 11817;
      v111 = v107 + 2;
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        __src.__r_.__value_.__l.__size_ = v107 + 2;
      else
        *((_BYTE *)&__src.__r_.__value_.__s + 23) = v111 & 0x7F;
      v109->__r_.__value_.__s.__data_[v111] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&__src, v106, v107 - v106 + 2, v107, v107, 0, 2uLL, ").");
    }
    v162 = __src;
    memset(&__src, 0, sizeof(__src));
    __p = "INVALID_RANGE";
    v155 = 13;
    rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v106, v84, v107, v85, v86, v87, (uint64_t)v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v162.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_189:
        if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_190;
        goto LABEL_251;
      }
    }
    else if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_189;
    }
    operator delete(__src.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_190:
      if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_191;
      goto LABEL_252;
    }
LABEL_251:
    operator delete(v157.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_191:
      if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_192;
      goto LABEL_253;
    }
LABEL_252:
    operator delete(v160.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_192:
      if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_193;
LABEL_254:
      operator delete(v158.__r_.__value_.__l.__data_);
      goto LABEL_193;
    }
LABEL_253:
    operator delete(v159.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_193;
    goto LABEL_254;
  }
  if (!*((_BYTE *)&v162.__r_.__value_.__s + 23))
    goto LABEL_39;
LABEL_3:
  v6 = (__int128 **)(*(uint64_t (**)(const webrtc::SessionDescriptionInterface *))(*(_QWORD *)a2 + 32))(a2);
  v7 = *v6;
  v8 = v6[1];
  if (*v6 == v8)
    goto LABEL_46;
  v9 = v6;
  do
  {
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v10 = *v7;
      v162.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v10;
    }
    (*(void (**)(std::string *__return_ptr, const webrtc::IceCandidateInterface *))(*(_QWORD *)a3 + 16))(&__src, a3);
    v11 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
    else
      v12 = v162.__r_.__value_.__l.__size_;
    v13 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    v14 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = __src.__r_.__value_.__l.__size_;
    if (v12 == v13)
    {
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &__src;
      else
        v15 = (std::string *)__src.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      {
        v24 = memcmp(v162.__r_.__value_.__l.__data_, v15, v162.__r_.__value_.__l.__size_) == 0;
        if ((v14 & 0x80000000) == 0)
          goto LABEL_26;
      }
      else if (*((_BYTE *)&v162.__r_.__value_.__s + 23))
      {
        v16 = HIBYTE(v162.__r_.__value_.__r.__words[2]) - 1;
        v17 = &v162;
        do
        {
          v19 = v17->__r_.__value_.__s.__data_[0];
          v17 = (std::string *)((char *)v17 + 1);
          v18 = v19;
          v21 = v15->__r_.__value_.__s.__data_[0];
          v15 = (std::string *)((char *)v15 + 1);
          v20 = v21;
          v23 = v16-- != 0;
          v24 = v18 == v20;
        }
        while (v18 == v20 && v23);
        if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_26:
          if ((v11 & 0x80) == 0)
            goto LABEL_27;
          goto LABEL_31;
        }
      }
      else
      {
        v24 = 1;
        if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_26;
      }
    }
    else
    {
      v24 = 0;
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
    }
    operator delete(__src.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&v162.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_27:
      if (v24)
        goto LABEL_43;
      goto LABEL_32;
    }
LABEL_31:
    operator delete(v162.__r_.__value_.__l.__data_);
    if (v24)
      goto LABEL_43;
LABEL_32:
    v7 = (__int128 *)((char *)v7 + 40);
  }
  while (v7 != v8);
  v7 = v8;
LABEL_43:
  if (v7 == v9[1])
  {
LABEL_46:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    {
LABEL_76:
      (*(void (**)(std::string *__return_ptr, const webrtc::IceCandidateInterface *))(*(_QWORD *)a3 + 16))(&v159, a3);
      v58 = std::string::insert(&v159, 0, "Mid ");
      v59 = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v160.__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v160.__r_.__value_.__r.__words[2] = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      v60 = v160.__r_.__value_.__r.__words[2];
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = 22;
      else
        v61 = (v160.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
      else
        v62 = v160.__r_.__value_.__l.__size_;
      if (v61 - v62 >= 0x34)
      {
        v63 = &v160;
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v63 = (std::string *)v160.__r_.__value_.__r.__words[0];
        v64 = (char *)v63 + v62;
        if ((char *)v63 + v62 <= " specified but no media section with that mid found."
          && v64 + 52 > " specified but no media section with that mid found.")
        {
          goto LABEL_302;
        }
        qmemcpy(v64, " specified but no media section with that mid found.", 52);
        v65 = v62 + 52;
        if ((v60 & 0x8000000000000000) != 0)
          v160.__r_.__value_.__l.__size_ = v62 + 52;
        else
          *((_BYTE *)&v160.__r_.__value_.__s + 23) = v65 & 0x7F;
        v63->__r_.__value_.__s.__data_[v65] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(&v160, v61, v62 - v61 + 52, v62, v62, 0, 0x34uLL, " specified but no media section with that mid found.");
      }
      __src = v160;
      memset(&v160, 0, sizeof(v160));
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v66 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        LODWORD(v162.__r_.__value_.__l.__data_) = 3;
        v67 = &__src;
        if (HIBYTE(__src.__r_.__value_.__r.__words[2]) <= 0x16uLL)
        {
LABEL_97:
          HIBYTE(v163) = v66;
          v68 = (std::string *)&v162.__r_.__value_.__r.__words[1];
          v69 = (std::string *)((char *)&v162.__r_.__value_.__r.__words[1] + v66);
          if (&v162.__r_.__value_.__r.__words[1] > (std::string::size_type *)v67)
            goto LABEL_108;
LABEL_107:
          if (v69 <= v67)
            goto LABEL_108;
          goto LABEL_302;
        }
LABEL_104:
        v70 = (v66 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v66 | 7) != 0x17)
          v70 = v66 | 7;
        v71 = v70 + 1;
        v68 = (std::string *)operator new(v70 + 1);
        v162.__r_.__value_.__r.__words[2] = v66;
        v163 = v71 | 0x8000000000000000;
        v162.__r_.__value_.__l.__size_ = (std::string::size_type)v68;
        v69 = (std::string *)((char *)v68 + v66);
        if (v68 > v67)
        {
LABEL_108:
          if (v66)
            memmove(v68, v67, v66);
          v69->__r_.__value_.__s.__data_[0] = 0;
          *(_DWORD *)v164 = 0;
          v164[4] = 0;
          v164[6] = 0;
          *(_DWORD *)this = v162.__r_.__value_.__l.__data_;
          *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v162.__r_.__value_.__r.__words[1];
          *((_QWORD *)this + 3) = v163;
          *(_OWORD *)&v162.__r_.__value_.__r.__words[1] = 0uLL;
          v163 = 0;
          *((_DWORD *)this + 8) = 0;
          *(_DWORD *)((char *)this + 35) = *(_DWORD *)&v164[3];
          *((_BYTE *)this + 40) = 0;
          *((_BYTE *)this + 48) = 0;
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__src.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_112:
              if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                return;
LABEL_116:
              v72 = (void *)v159.__r_.__value_.__r.__words[0];
LABEL_301:
              operator delete(v72);
              return;
            }
          }
          else if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_112;
          }
          operator delete(v160.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return;
          goto LABEL_116;
        }
        goto LABEL_107;
      }
      v66 = __src.__r_.__value_.__l.__size_;
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
      {
        v67 = (std::string *)__src.__r_.__value_.__r.__words[0];
        if (!__src.__r_.__value_.__l.__size_ || __src.__r_.__value_.__r.__words[0])
        {
          LODWORD(v162.__r_.__value_.__l.__data_) = 3;
          if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_303;
          if (__src.__r_.__value_.__l.__size_ <= 0x16)
            goto LABEL_97;
          goto LABEL_104;
        }
      }
LABEL_302:
      __break(1u);
LABEL_303:
      abort();
    }
    (*(void (**)(std::string *__return_ptr, const webrtc::IceCandidateInterface *))(*(_QWORD *)a3 + 16))(&v160, a3);
    v31 = std::string::insert(&v160, 0, "Mid ");
    v37 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__src.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    __src.__r_.__value_.__r.__words[2] = v37;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v38 = __src.__r_.__value_.__r.__words[2];
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = 22;
    else
      v39 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    else
      v40 = __src.__r_.__value_.__l.__size_;
    if (v39 - v40 >= 0x34)
    {
      v55 = &__src;
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v55 = (std::string *)__src.__r_.__value_.__r.__words[0];
      v56 = (char *)v55 + v40;
      if ((char *)v55 + v40 <= " specified but no media section with that mid found."
        && v56 + 52 > " specified but no media section with that mid found.")
      {
        goto LABEL_302;
      }
      qmemcpy(v56, " specified but no media section with that mid found.", 52);
      v57 = v40 + 52;
      if ((v38 & 0x8000000000000000) != 0)
        __src.__r_.__value_.__l.__size_ = v40 + 52;
      else
        *((_BYTE *)&__src.__r_.__value_.__s + 23) = v57 & 0x7F;
      v55->__r_.__value_.__s.__data_[v57] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&__src, v39, v40 - v39 + 52, v40, v40, 0, 0x34uLL, " specified but no media section with that mid found.");
    }
    v162 = __src;
    memset(&__src, 0, sizeof(__src));
    v159.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
    v159.__r_.__value_.__l.__size_ = 17;
    rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v39, v32, v40, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v162.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_75:
        if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_76;
LABEL_92:
        operator delete(v160.__r_.__value_.__l.__data_);
        goto LABEL_76;
      }
    }
    else if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_75;
    }
    operator delete(__src.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_76;
    goto LABEL_92;
  }
  *(_DWORD *)this = 0;
  *((_BYTE *)this + 38) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 29) = 0;
  *((_QWORD *)this + 5) = v7;
LABEL_45:
  *((_BYTE *)this + 48) = 1;
}

void webrtc::SdpOfferAnswerHandler::DestroyMediaChannels(webrtc::SdpOfferAnswerHandler *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  void (***v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
    v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(_QWORD *)(v2 + 16);
    v5 = v4 - v3;
    if (v4 != v3)
    {
      if ((v5 & 0x8000000000000000) != 0)
        abort();
      v6 = operator new(v5);
      v7 = 0;
      do
      {
        v8 = *(void (****)(_QWORD))(v3 + v7);
        v6[(unint64_t)v7 / 8] = v8;
        if (v8)
          (**v8)(v8);
        v7 += 8;
      }
      while (v3 + v7 != v4);
      if (v7)
      {
        v9 = 8 * (v7 >> 3);
        v10 = v9;
        v11 = v6;
        do
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v11 + 32))(*v11) == 1)
            webrtc::RtpTransceiver::ClearChannel(*(_QWORD **)(*v11 + 16));
          ++v11;
          v10 -= 8;
        }
        while (v10);
        v12 = v9;
        v13 = v6;
        do
        {
          if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13))
            webrtc::RtpTransceiver::ClearChannel(*(_QWORD **)(*v13 + 16));
          ++v13;
          v12 -= 8;
        }
        while (v12);
        do
        {
          v14 = v6[(unint64_t)v9 / 8 - 1];
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          v9 -= 8;
        }
        while (v9);
      }
      operator delete(v6);
    }
  }
}

uint64_t rtc::RefCountedObject<webrtc::StreamCollection>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::StreamCollection>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 8;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::StreamCollection>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_24C0C02D0;
  v2 = a1[1];
  if (v2)
  {
    v3 = a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 8);
        v3 -= 8;
        v5 = v6;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void rtc::RefCountedObject<webrtc::StreamCollection>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_24C0C02D0;
  v2 = a1[1];
  if (v2)
  {
    v3 = a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 8);
        v3 -= 8;
        v5 = v6;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::StreamCollection::count(webrtc::StreamCollection *this)
{
  return (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
}

uint64_t webrtc::StreamCollection::at(webrtc::StreamCollection *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (a2 >= (*((_QWORD *)this + 2) - v2) >> 3)
    abort();
  return *(_QWORD *)(v2 + 8 * a2);
}

_QWORD *webrtc::StreamCollection::find(uint64_t a1, const void **a2)
{
  uint64_t v2;
  _QWORD *result;
  size_t v6;
  const void *v7;
  int v8;
  void *v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _QWORD v15[2];
  unsigned __int8 v16;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a1 + 16))
    return 0;
  while (1)
  {
    result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)v2 + 32))(v15);
    if (*((char *)a2 + 23) < 0)
      break;
    v6 = *((unsigned __int8 *)a2 + 23);
    v7 = a2;
LABEL_7:
    v8 = (char)v16;
    v9 = (void *)v15[0];
    if ((v16 & 0x80u) == 0)
      v10 = v16;
    else
      v10 = v15[1];
    if ((v16 & 0x80u) == 0)
      v11 = v15;
    else
      v11 = (_QWORD *)v15[0];
    if (v6 >= v10)
      v12 = v10;
    else
      v12 = v6;
    v13 = memcmp(v11, v7, v12) == 0;
    v14 = v6 == v10 && v13;
    if (v8 < 0)
      operator delete(v9);
    if (v14)
      return *(_QWORD **)v2;
    v2 += 8;
    if (v2 == *(_QWORD *)(a1 + 16))
      return 0;
  }
  v6 = (size_t)a2[1];
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = *a2;
    if (!v6 || v7)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t webrtc::StreamCollection::FindAudioTrack(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) == v2)
    return 0;
  v5 = 0;
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 56))(&v8, *(_QWORD *)(v2 + 8 * v5), a2);
    v6 = v8;
    if (v8)
      break;
    ++v5;
    v2 = *(_QWORD *)(a1 + 8);
    if (v5 >= (*(_QWORD *)(a1 + 16) - v2) >> 3)
      return 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return v6;
}

uint64_t webrtc::StreamCollection::FindVideoTrack(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) == v2)
    return 0;
  v5 = 0;
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 64))(&v8, *(_QWORD *)(v2 + 8 * v5), a2);
    v6 = v8;
    if (v8)
      break;
    ++v5;
    v2 = *(_QWORD *)(a1 + 8);
    if (v5 >= (*(_QWORD *)(a1 + 16) - v2) >> 3)
      return 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return v6;
}

BOOL rtc::RefCountedObject<webrtc::StreamCollection>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 32));
  return v1 == 1;
}

void std::__function::__func<webrtc::SdpOfferAnswerHandler::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies &,webrtc::ConnectionContext *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies &,webrtc::ConnectionContext *)::$_0>,void ()(webrtc::scoped_refptr<rtc::RTCCertificate> const&)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::SdpOfferAnswerHandler::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies &,webrtc::ConnectionContext *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies &,webrtc::ConnectionContext *)::$_0>,void ()(webrtc::scoped_refptr<rtc::RTCCertificate> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0C0328;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies &,webrtc::ConnectionContext *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies &,webrtc::ConnectionContext *)::$_0>,void ()(webrtc::scoped_refptr<rtc::RTCCertificate> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0C0328;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<webrtc::SdpOfferAnswerHandler::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies &,webrtc::ConnectionContext *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies &,webrtc::ConnectionContext *)::$_0>,void ()(webrtc::scoped_refptr<rtc::RTCCertificate> const&)>::operator()(uint64_t a1, unsigned int **a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  return webrtc::JsepTransportController::SetLocalCertificate(v3, a2);
}

void webrtc::SdpOfferAnswerHandler::LocalIceCredentialsToReplace::AppendIceCredentialsFromSessionDescription(uint64_t **this, const webrtc::SessionDescriptionInterface *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  std::string v8;
  std::string __p;

  v3 = (*(uint64_t (**)(const webrtc::SessionDescriptionInterface *))(*(_QWORD *)a2 + 32))(a2);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(v3 + 32);
  while (v4 != v5)
  {
    if (*(char *)(v4 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(v4 + 48), *(_QWORD *)(v4 + 56));
      if ((*(char *)(v4 + 95) & 0x80000000) == 0)
      {
LABEL_6:
        v7 = *(_OWORD *)(v4 + 72);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 88);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
        std::__tree<std::pair<std::string,std::string>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(this, &v8, (uint64_t)&v8);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else
    {
      v6 = *(_OWORD *)(v4 + 48);
      v8.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 64);
      *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v6;
      if ((*(char *)(v4 + 95) & 0x80000000) == 0)
        goto LABEL_6;
    }
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 72), *(_QWORD *)(v4 + 80));
    std::__tree<std::pair<std::string,std::string>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(this, &v8, (uint64_t)&v8);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_7:
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_12;
      goto LABEL_3;
    }
LABEL_11:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
LABEL_12:
      operator delete(v8.__r_.__value_.__l.__data_);
LABEL_3:
    v4 += 112;
  }
}

uint64_t *std::__tree<std::pair<std::string,std::string>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  uint64_t v9;
  _OWORD *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = (uint64_t)(v5 + 4);
        if ((std::operator<=>[abi:sn180100]<std::string,std::string,std::string,std::string>((uint64_t)a2, v5 + 4) & 0x80) == 0)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_11;
      }
      if ((std::operator<=>[abi:sn180100]<std::string,std::string,std::string,std::string>(v9, a2) & 0x80) == 0)
        break;
      v6 = v8 + 1;
      v5 = v8[1];
      if (!v5)
        goto LABEL_11;
    }
    if (*v6)
      return *v6;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_11:
  v11 = operator new(0x50uLL);
  v11[2] = *(_OWORD *)a3;
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)((char *)v11 + 56) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = v8;
  *v6 = (uint64_t *)v11;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v11;
  if (v12)
  {
    *a1 = v12;
    v13 = *v6;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v11;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::scoped_refptr<webrtc::DtlsTransport> rtc::Thread::BlockingCall<webrtc::`anonymous namespace'::LookupDtlsTransportByMid(rtc::Thread*,webrtc::JsepTransportController *,std::string const&)::$_0,webrtc::scoped_refptr<webrtc::DtlsTransport>,void>(webrtc::`anonymous namespace'::LookupDtlsTransportByMid(rtc::Thread*,webrtc::JsepTransportController *,std::string const&)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;

  webrtc::JsepTransportController::LookupDtlsTransportByMid(*a1[1], (const void **)a1[1][1], &v3);
  result = **a1;
  **a1 = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t **std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>>>::__emplace_unique_key_args<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::piecewise_construct_t const&,std::tuple<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, void (****a3)(_QWORD))
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  _QWORD *v9;
  void (***v10)(_QWORD);
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      if (v8 >= a2)
        return v7;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_8:
    v9 = operator new(0xA8uLL);
    v10 = *a3;
    v9[4] = *a3;
    if (v10)
      (**v10)(v10);
    *((_BYTE *)v9 + 40) = 0;
    *((_BYTE *)v9 + 64) = 0;
    *((_BYTE *)v9 + 72) = 0;
    *((_BYTE *)v9 + 80) = 0;
    *((_BYTE *)v9 + 88) = 0;
    *((_BYTE *)v9 + 112) = 0;
    *((_BYTE *)v9 + 120) = 0;
    *((_BYTE *)v9 + 144) = 0;
    *((_WORD *)v9 + 76) = 0;
    *((_BYTE *)v9 + 156) = 0;
    *((_BYTE *)v9 + 164) = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v7;
    *v6 = v9;
    v11 = v9;
    v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v9;
  }
}

void webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SetAsSessionError(webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation *this)
{
  uint64_t v1;
  const char *v2;
  size_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  std::string *v10;
  void **v11;
  size_t v12;
  void *__p[2];
  int64_t v14;

  v1 = *(_QWORD *)this;
  v2 = (char *)this + 72;
  if (*((char *)this + 95) < 0)
  {
    v2 = *(const char **)v2;
    if (!v2)
      goto LABEL_32;
  }
  v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_33;
  v4 = (char *)v3;
  if (v3 > 0x16)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (char *)operator new(v6 + 1);
    __p[1] = v4;
    v14 = v7 | 0x8000000000000000;
    __p[0] = v5;
  }
  else
  {
    HIBYTE(v14) = v3;
    v5 = (char *)__p;
  }
  v8 = &v4[(_QWORD)v5];
  if (v5 <= v2 && v8 > v2)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    abort();
  }
  if (v4)
    memmove(v5, v2, (size_t)v4);
  *v8 = 0;
  if (*(_DWORD *)(v1 + 232) == 1
    || (*(_DWORD *)(v1 + 232) = 1, v10 = (std::string *)(v1 + 240), (void **)(v1 + 240) == __p))
  {
LABEL_28:
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
    goto LABEL_31;
  }
  if (*(char *)(v1 + 263) < 0)
  {
    if (v14 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if (v14 >= 0)
      v12 = HIBYTE(v14);
    else
      v12 = (size_t)__p[1];
    std::string::__assign_no_alias<false>(v10, (const std::string::value_type *)v11, v12);
    goto LABEL_28;
  }
  if (v14 < 0)
  {
    std::string::__assign_no_alias<true>(v10, (char *)__p[0], (size_t)__p[1]);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_31:
    operator delete(__p[0]);
    return;
  }
  *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  *(_QWORD *)(v1 + 256) = v14;
  if (SHIBYTE(v14) < 0)
    goto LABEL_31;
}

double webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SetError(uint64_t a1, int a2, __int128 *__src)
{
  __int128 *v3;
  size_t v5;
  BOOL v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  void **v12;
  double result;
  int v14;
  __int128 v15;
  unint64_t v16;
  _BYTE v17[7];

  v3 = __src;
  if (*((char *)__src + 23) < 0)
  {
    v5 = *((_QWORD *)__src + 1);
    if ((v5 & 0x8000000000000000) != 0 || ((v3 = *(__int128 **)__src, v5) ? (v6 = v3 == 0) : (v6 = 0), v6))
    {
LABEL_23:
      __break(1u);
LABEL_24:
      abort();
    }
    v14 = a2;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_24;
  }
  else
  {
    v5 = *((unsigned __int8 *)__src + 23);
    v14 = a2;
  }
  if (v5 > 0x16)
  {
    v8 = (v5 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&v15 + 1) = v5;
    v16 = v9 | 0x8000000000000000;
    *(_QWORD *)&v15 = v7;
  }
  else
  {
    HIBYTE(v16) = v5;
    v7 = &v15;
  }
  v10 = (__int128 *)((char *)v7 + v5);
  if (v7 <= v3 && v10 > v3)
    goto LABEL_23;
  if (v5)
    memmove(v7, v3, v5);
  *(_BYTE *)v10 = 0;
  *(_DWORD *)v17 = 0;
  v17[4] = 0;
  v17[6] = 0;
  *(_DWORD *)(a1 + 64) = v14;
  v12 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v12);
  result = *(double *)&v15;
  *(_OWORD *)v12 = v15;
  *(_QWORD *)(a1 + 88) = v16;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)v17;
  *(_DWORD *)(a1 + 99) = *(_DWORD *)&v17[3];
  return result;
}

void cricket::MediaSessionOptions::~MediaSessionOptions(cricket::MediaSessionOptions *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *((_QWORD *)this + 9);
    v4 = (void *)*((_QWORD *)this + 8);
    if (v3 == v2)
    {
LABEL_11:
      *((_QWORD *)this + 9) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 9) < 0)
      {
        operator delete(*(void **)(v3 - 32));
        if (*(char *)(v3 - 33) < 0)
LABEL_9:
          operator delete(*(void **)(v3 - 56));
      }
      else if (*(char *)(v3 - 33) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 56;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 8);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *((_QWORD *)this + 6);
    v7 = (void *)*((_QWORD *)this + 5);
    if (v6 != v5)
    {
      do
        cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)(v6 - 136));
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::~RemoteDescriptionOperation(webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SignalCompletion((uint64_t)this, a2, a3);
  v4 = *((_QWORD *)this + 7);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:sn180100]();
    JUMPOUT(0x208801128);
  }
  v5 = (char *)this + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)this + 104, *((char **)this + 14));
  if (*((char *)this + 95) < 0)
  {
    operator delete(*((void **)this + 9));
    v6 = (char *)*((_QWORD *)this + 7);
    if (v6 != v5)
      goto LABEL_4;
LABEL_7:
    v7 = 4;
    v6 = (char *)this + 32;
    goto LABEL_8;
  }
  v6 = (char *)*((_QWORD *)this + 7);
  if (v6 == v5)
    goto LABEL_7;
LABEL_4:
  if (!v6)
    goto LABEL_9;
  v7 = 5;
LABEL_8:
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_9:
  v8 = *((_QWORD *)this + 3);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

void std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_0>,void ()(webrtc::AudioTrackInterface *,webrtc::MediaStreamInterface *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_0>,void ()(webrtc::AudioTrackInterface *,webrtc::MediaStreamInterface *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C0C0370;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_0>,void ()(webrtc::AudioTrackInterface *,webrtc::MediaStreamInterface *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C0C0370;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_0>,void ()(webrtc::AudioTrackInterface *,webrtc::MediaStreamInterface *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  webrtc::SdpOfferAnswerHandler *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(webrtc::SdpOfferAnswerHandler **)(a1 + 8);
  v4 = *a2;
  v5 = *a3;
  result = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v3 + 1) + 184))(*((_QWORD **)v3 + 1));
  if ((result & 1) == 0)
  {
    v7 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v3 + 1) + 64))(*((_QWORD **)v3 + 1));
    webrtc::RtpTransmissionManager::AddAudioTrack(v7, v4, v5);
    return webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded(v3);
  }
  return result;
}

void std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_1,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_1>,void ()(webrtc::AudioTrackInterface *,webrtc::MediaStreamInterface *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_1,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_1>,void ()(webrtc::AudioTrackInterface *,webrtc::MediaStreamInterface *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0C03B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_1,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_1>,void ()(webrtc::AudioTrackInterface *,webrtc::MediaStreamInterface *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0C03B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_1,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_1>,void ()(webrtc::AudioTrackInterface *,webrtc::MediaStreamInterface *)>::operator()(uint64_t a1, uint64_t *a2)
{
  webrtc::SdpOfferAnswerHandler *v2;
  uint64_t v3;
  uint64_t result;
  webrtc::RtpTransmissionManager *v5;

  v2 = *(webrtc::SdpOfferAnswerHandler **)(a1 + 8);
  v3 = *a2;
  result = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v2 + 1) + 184))(*((_QWORD **)v2 + 1));
  if ((result & 1) == 0)
  {
    v5 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)v2 + 1) + 64))(*((_QWORD **)v2 + 1));
    webrtc::RtpTransmissionManager::RemoveAudioTrack(v5, v3);
    return webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded(v2);
  }
  return result;
}

void std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_2,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_2>,void ()(webrtc::VideoTrackInterface *,webrtc::MediaStreamInterface *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_2,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_2>,void ()(webrtc::VideoTrackInterface *,webrtc::MediaStreamInterface *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0C0400;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_2,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_2>,void ()(webrtc::VideoTrackInterface *,webrtc::MediaStreamInterface *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0C0400;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_2,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_2>,void ()(webrtc::VideoTrackInterface *,webrtc::MediaStreamInterface *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  webrtc::SdpOfferAnswerHandler *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(webrtc::SdpOfferAnswerHandler **)(a1 + 8);
  v4 = *a2;
  v5 = *a3;
  result = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v3 + 1) + 184))(*((_QWORD **)v3 + 1));
  if ((result & 1) == 0)
  {
    v7 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v3 + 1) + 64))(*((_QWORD **)v3 + 1));
    webrtc::RtpTransmissionManager::AddVideoTrack(v7, v4, v5);
    return webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded(v3);
  }
  return result;
}

void std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_3,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_3>,void ()(webrtc::VideoTrackInterface *,webrtc::MediaStreamInterface *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_3,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_3>,void ()(webrtc::VideoTrackInterface *,webrtc::MediaStreamInterface *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0C0448;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_3,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_3>,void ()(webrtc::VideoTrackInterface *,webrtc::MediaStreamInterface *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0C0448;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_3,std::allocator<webrtc::SdpOfferAnswerHandler::AddStream(webrtc::MediaStreamInterface *)::$_3>,void ()(webrtc::VideoTrackInterface *,webrtc::MediaStreamInterface *)>::operator()(uint64_t a1, uint64_t *a2)
{
  webrtc::SdpOfferAnswerHandler *v2;
  uint64_t v3;
  uint64_t result;
  webrtc::RtpTransmissionManager *v5;

  v2 = *(webrtc::SdpOfferAnswerHandler **)(a1 + 8);
  v3 = *a2;
  result = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v2 + 1) + 184))(*((_QWORD **)v2 + 1));
  if ((result & 1) == 0)
  {
    v5 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)v2 + 1) + 64))(*((_QWORD **)v2 + 1));
    webrtc::RtpTransmissionManager::RemoveVideoTrack(v5, v3);
    return webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded(v2);
  }
  return result;
}

void std::vector<webrtc::scoped_refptr<webrtc::MediaStreamInterface>>::__insert_with_size[abi:sn180100]<std::__wrap_iter<webrtc::scoped_refptr<webrtc::MediaStreamInterface>*>,std::__wrap_iter<webrtc::scoped_refptr<webrtc::MediaStreamInterface>*>>(char **a1, uint64_t a2, _QWORD *a3, void (****a4)(_QWORD), uint64_t a5)
{
  _QWORD *v6;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v20;
  char *v21;
  void (****v22)(_QWORD);
  char *v23;
  void (***v24)(_QWORD);
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (***v35)(_QWORD);
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (***v41)(_QWORD);
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;

  if (a5 < 1)
    return;
  v6 = a3;
  v8 = *a1;
  v9 = (unint64_t)a1[1];
  v10 = a2 - (_QWORD)*a1;
  v11 = v10 >> 3;
  v12 = &(*a1)[v10 & 0xFFFFFFFFFFFFFFF8];
  v13 = a1[2];
  v78 = *a1;
  if (a5 > (uint64_t)&v13[-v9] >> 3)
  {
    v14 = a5 + ((uint64_t)(v9 - (_QWORD)v8) >> 3);
    if (!(v14 >> 61))
    {
      v15 = v13 - v8;
      if (v15 >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v17 = (char *)operator new(8 * v16);
      }
      else
      {
        v17 = 0;
      }
      v77 = v10 >> 3;
      v36 = &v17[8 * v11];
      v37 = v17;
      v75 = &v17[8 * v16];
      v38 = 8 * a5;
      v39 = &v36[8 * a5];
      v40 = v36;
      do
      {
        if (!v40)
          goto LABEL_76;
        v41 = (void (***)(_QWORD))*v6;
        *(_QWORD *)v40 = *v6;
        if (v41)
          (**v41)(v41);
        v40 += 8;
        ++v6;
        v38 -= 8;
      }
      while (v38);
      v42 = *a1;
      if (*a1 == v12)
      {
        v43 = v78;
        v46 = v75;
      }
      else
      {
        v43 = v78;
        v44 = &v78[v10 & 0xFFFFFFFFFFFFFFF8] - v42 - 8;
        if (v44 >= 0x78)
        {
          v47 = (v10 & 0xFFFFFFFFFFFFFFF8) - (v44 & 0xFFFFFFFFFFFFFFF8) - 8;
          v48 = (unint64_t)&v78[v47];
          v49 = (unint64_t)&v37[v47];
          v50 = v48 >= (unint64_t)v36 || v49 >= (unint64_t)v12;
          v45 = v12;
          v46 = v75;
          if (v50)
          {
            v51 = (v44 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v45 = &v12[-v52];
            v36 -= v52;
            v53 = 8 * v77 - 16;
            v54 = &v37[v53];
            v55 = &v78[v53];
            v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v58 = *((_OWORD *)v55 - 1);
              v57 = *(_OWORD *)v55;
              *((_OWORD *)v55 - 1) = 0uLL;
              *(_OWORD *)v55 = 0uLL;
              *((_OWORD *)v54 - 1) = v58;
              *(_OWORD *)v54 = v57;
              v54 -= 32;
              v55 -= 32;
              v56 -= 4;
            }
            while (v56);
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_57;
          }
        }
        else
        {
          v45 = v12;
          v46 = v75;
        }
        do
        {
          v59 = *((_QWORD *)v45 - 1);
          v45 -= 8;
          *(_QWORD *)v45 = 0;
          *((_QWORD *)v36 - 1) = v59;
          v36 -= 8;
        }
        while (v45 != v42);
      }
LABEL_57:
      v60 = a1[1];
      if (v60 != v12)
      {
        v61 = v60 - &v43[v10 & 0xFFFFFFFFFFFFFFF8] - 8;
        if (v61 < 0xA8)
          goto LABEL_81;
        v62 = (v10 & 0xFFFFFFFFFFFFFFF8) + (v61 & 0xFFFFFFFFFFFFFFF8);
        if (v12 < &v37[8 * a5 + 8 + v62] && v39 < &v43[v62 + 8])
          goto LABEL_81;
        v64 = (v61 >> 3) + 1;
        v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
        v12 += v65;
        v39 += v65;
        v66 = &v37[8 * v77 + 16 + 8 * a5];
        v67 = (__int128 *)&v43[8 * v77 + 16];
        v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v69 = *(v67 - 1);
          v70 = *v67;
          *(v67 - 1) = 0uLL;
          *v67 = 0uLL;
          *((_OWORD *)v66 - 1) = v69;
          *(_OWORD *)v66 = v70;
          v66 += 32;
          v67 += 2;
          v68 -= 4;
        }
        while (v68);
        if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_81:
          do
          {
            v71 = *(_QWORD *)v12;
            *(_QWORD *)v12 = 0;
            v12 += 8;
            *(_QWORD *)v39 = v71;
            v39 += 8;
          }
          while (v12 != v60);
        }
        v12 = a1[1];
      }
      v72 = *a1;
      *a1 = v36;
      a1[1] = v39;
      a1[2] = v46;
      while (v12 != v72)
      {
        v74 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        v73 = v74;
        if (v74)
          (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      }
      if (v72)
        operator delete(v72);
      return;
    }
LABEL_77:
    abort();
  }
  v18 = (uint64_t)(v9 - (_QWORD)v12) >> 3;
  if (v18 >= a5)
  {
    v20 = &a3[a5];
    v21 = a1[1];
    v25 = 8 * a5;
    v26 = (uint64_t *)(v9 - 8 * a5);
    v27 = v21;
    if ((unint64_t)v26 < v9)
      goto LABEL_23;
  }
  else
  {
    v76 = v10 >> 3;
    v20 = &a3[v18];
    v21 = a1[1];
    if (v20 != a4)
    {
      v22 = (void (****)(_QWORD))&a3[v18];
      v23 = a1[1];
      while (v23)
      {
        v24 = *v22;
        *(_QWORD *)v23 = *v22;
        if (v24)
          (**v24)(v24);
        ++v22;
        v23 += 8;
        v21 += 8;
        if (v22 == a4)
          goto LABEL_21;
      }
      goto LABEL_76;
    }
LABEL_21:
    a1[1] = v21;
    if ((uint64_t)(v9 - (_QWORD)v12) < 1)
      return;
    v11 = v76;
    v25 = 8 * a5;
    v26 = (uint64_t *)&v21[-8 * a5];
    v27 = v21;
    if ((unint64_t)v26 < v9)
    {
LABEL_23:
      v27 = v21;
      while (v27)
      {
        v28 = *v26;
        *v26++ = 0;
        *(_QWORD *)v27 = v28;
        v27 += 8;
        if ((unint64_t)v26 >= v9)
          goto LABEL_26;
      }
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
  }
LABEL_26:
  v29 = &v12[v25];
  a1[1] = v27;
  if (v21 != v29)
  {
    v30 = (uint64_t *)(v21 - 8);
    v31 = 8 * ((v21 - v29) >> 3);
    v32 = (uint64_t)&v78[8 * v11 - 8];
    do
    {
      v33 = *(_QWORD *)(v32 + v31);
      *(_QWORD *)(v32 + v31) = 0;
      v34 = *v30;
      *v30 = v33;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      --v30;
      v31 -= 8;
    }
    while (v31);
  }
  for (; v6 != v20; ++v6)
  {
    v35 = (void (***)(_QWORD))*v6;
    if (*v6)
      (**v35)(*v6);
    if (*(_QWORD *)v12)
      (*(void (**)(_QWORD))(**(_QWORD **)v12 + 8))(*(_QWORD *)v12);
    *(_QWORD *)v12 = v35;
    v12 += 8;
  }
}

cricket::MediaDescriptionOptions *std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions const&>(cricket::MediaDescriptionOptions **a1, const cricket::MediaDescriptionOptions *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  cricket::MediaDescriptionOptions *v9;
  cricket::MediaDescriptionOptions *v10;
  cricket::MediaDescriptionOptions *v11;
  cricket::MediaDescriptionOptions *v12;
  cricket::MediaDescriptionOptions *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  cricket::MediaDescriptionOptions *v19;

  v2 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x1E1E1E1E1E1E1E1)
    abort();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0)
    v5 = 0x1E1E1E1E1E1E1E1;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_21:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x1E1E1E1E1E1E1E1)
    goto LABEL_21;
  v7 = 136 * v5;
  v8 = (char *)operator new(136 * v5);
  v9 = (cricket::MediaDescriptionOptions *)&v8[v7];
  v10 = cricket::MediaDescriptionOptions::MediaDescriptionOptions((cricket::MediaDescriptionOptions *)&v8[136 * v2], a2);
  v11 = (cricket::MediaDescriptionOptions *)((char *)v10 + 136);
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13)
      return v11;
    goto LABEL_15;
  }
  v14 = 0;
  do
  {
    v15 = (char *)v13 + v14;
    v16 = (char *)v10 + v14;
    *((_DWORD *)v16 - 34) = *(_DWORD *)((char *)v13 + v14 - 136);
    v17 = *(_OWORD *)((char *)v13 + v14 - 128);
    *((_QWORD *)v16 - 14) = *(_QWORD *)((char *)v13 + v14 - 112);
    *((_OWORD *)v16 - 8) = v17;
    *((_QWORD *)v15 - 15) = 0;
    *((_QWORD *)v15 - 14) = 0;
    *((_QWORD *)v15 - 16) = 0;
    v18 = *(_QWORD *)((char *)v13 + v14 - 104);
    *((_QWORD *)v16 - 11) = 0;
    *((_QWORD *)v16 - 10) = 0;
    *((_QWORD *)v16 - 13) = v18;
    *((_QWORD *)v16 - 12) = 0;
    *((_OWORD *)v16 - 6) = *(_OWORD *)((char *)v13 + v14 - 96);
    *((_QWORD *)v16 - 10) = *(_QWORD *)((char *)v13 + v14 - 80);
    *((_QWORD *)v15 - 12) = 0;
    *((_QWORD *)v15 - 11) = 0;
    *((_QWORD *)v15 - 10) = 0;
    *((_QWORD *)v16 - 9) = 0;
    *((_QWORD *)v16 - 8) = 0;
    *((_QWORD *)v16 - 7) = 0;
    *(_OWORD *)(v16 - 72) = *(_OWORD *)((char *)v13 + v14 - 72);
    *((_QWORD *)v16 - 7) = *(_QWORD *)((char *)v13 + v14 - 56);
    *((_QWORD *)v15 - 9) = 0;
    *((_QWORD *)v15 - 8) = 0;
    *((_QWORD *)v15 - 7) = 0;
    *((_QWORD *)v16 - 6) = 0;
    *((_QWORD *)v16 - 5) = 0;
    *((_QWORD *)v16 - 4) = 0;
    *((_OWORD *)v16 - 3) = *(_OWORD *)((char *)v13 + v14 - 48);
    *((_QWORD *)v16 - 4) = *(_QWORD *)((char *)v13 + v14 - 32);
    *((_QWORD *)v15 - 6) = 0;
    *((_QWORD *)v15 - 5) = 0;
    *((_QWORD *)v15 - 4) = 0;
    *((_QWORD *)v16 - 3) = 0;
    *((_QWORD *)v16 - 2) = 0;
    *((_QWORD *)v16 - 1) = 0;
    *(_OWORD *)(v16 - 24) = *(_OWORD *)((char *)v13 + v14 - 24);
    *((_QWORD *)v16 - 1) = *(_QWORD *)((char *)v13 + v14 - 8);
    *((_QWORD *)v15 - 3) = 0;
    *((_QWORD *)v15 - 2) = 0;
    *((_QWORD *)v15 - 1) = 0;
    v14 -= 136;
  }
  while ((cricket::MediaDescriptionOptions *)((char *)v13 + v14) != v12);
  v13 = *a1;
  v19 = a1[1];
  *a1 = (cricket::MediaDescriptionOptions *)((char *)v10 + v14);
  a1[1] = v11;
  a1[2] = v9;
  while (v19 != v13)
  {
    v19 = (cricket::MediaDescriptionOptions *)((char *)v19 - 136);
    cricket::MediaDescriptionOptions::~MediaDescriptionOptions(v19);
  }
  if (v13)
LABEL_15:
    operator delete(v13);
  return v11;
}

void cricket::MediaDescriptionOptions::~MediaDescriptionOptions(cricket::MediaDescriptionOptions *this)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void *v14;
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void (**v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v2 = (void (***)(_QWORD))*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 15);
    v4 = (void *)*((_QWORD *)this + 14);
    if (v3 != v2)
    {
      v5 = v3 - 27;
      v6 = v3 - 27;
      do
      {
        v7 = *v6;
        v6 -= 27;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)*((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v2;
    operator delete(v4);
  }
  v9 = *((_QWORD *)this + 11);
  if (v9)
  {
    v10 = *((_QWORD *)this + 12);
    v11 = (void *)*((_QWORD *)this + 11);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 17) < 0)
          operator delete(*(void **)(v10 - 40));
        v10 -= 40;
      }
      while (v10 != v9);
      v11 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v9;
    operator delete(v11);
  }
  v12 = (void (***)(_QWORD))*((_QWORD *)this + 8);
  if (v12)
  {
    v13 = (void (***)(_QWORD))*((_QWORD *)this + 9);
    v14 = (void *)*((_QWORD *)this + 8);
    if (v13 != v12)
    {
      v15 = v13 - 20;
      v16 = v13 - 20;
      do
      {
        v17 = *v16;
        v16 -= 20;
        (*v17)(v15);
        v8 = v15 == v12;
        v15 = v16;
      }
      while (!v8);
      v14 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v12;
    operator delete(v14);
  }
  v18 = *((_QWORD *)this + 5);
  if (v18)
  {
    v19 = *((_QWORD *)this + 6);
    v20 = (void *)*((_QWORD *)this + 5);
    if (v19 != v18)
    {
      do
        cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)(v19 - 104));
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v18;
    operator delete(v20);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

char *std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;

  v2 = 0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x1E1E1E1E1E1E1E1)
    abort();
  if (0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0xF0F0F0F0F0F0F0)
    v5 = 0x1E1E1E1E1E1E1E1;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_21:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x1E1E1E1E1E1E1E1)
    goto LABEL_21;
  v7 = 136 * v5;
  v8 = (char *)operator new(136 * v5);
  v9 = &v8[136 * v2];
  *(_DWORD *)v9 = *(_DWORD *)a2;
  v10 = &v8[v7];
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v9 + 3) = v11;
  *((_QWORD *)v9 + 4) = v12;
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v9 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = 0;
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v9 + 10) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *((_QWORD *)v9 + 12) = 0;
  *((_QWORD *)v9 + 13) = 0;
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(a2 + 88);
  *((_QWORD *)v9 + 13) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *((_QWORD *)v9 + 15) = 0;
  *((_QWORD *)v9 + 16) = 0;
  *((_OWORD *)v9 + 7) = *(_OWORD *)(a2 + 112);
  *((_QWORD *)v9 + 16) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v13 = v9 + 136;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
    if (!v15)
      return v13;
    goto LABEL_15;
  }
  v16 = 0;
  do
  {
    v17 = &v15[v16];
    v18 = &v9[v16];
    *((_DWORD *)v18 - 34) = *(_DWORD *)&v15[v16 - 136];
    v19 = *(_OWORD *)&v15[v16 - 128];
    *((_QWORD *)v18 - 14) = *(_QWORD *)&v15[v16 - 112];
    *((_OWORD *)v18 - 8) = v19;
    *((_QWORD *)v17 - 15) = 0;
    *((_QWORD *)v17 - 14) = 0;
    *((_QWORD *)v17 - 16) = 0;
    *((_QWORD *)v18 - 13) = *(_QWORD *)&v15[v16 - 104];
    *((_OWORD *)v18 - 6) = *(_OWORD *)&v15[v16 - 96];
    *((_QWORD *)v18 - 10) = *(_QWORD *)&v15[v16 - 80];
    *((_QWORD *)v17 - 12) = 0;
    *((_QWORD *)v17 - 11) = 0;
    *((_QWORD *)v17 - 10) = 0;
    *(_OWORD *)(v18 - 72) = *(_OWORD *)&v15[v16 - 72];
    *((_QWORD *)v18 - 7) = *(_QWORD *)&v15[v16 - 56];
    *((_QWORD *)v17 - 9) = 0;
    *((_QWORD *)v17 - 8) = 0;
    *((_QWORD *)v17 - 7) = 0;
    *((_OWORD *)v18 - 3) = *(_OWORD *)&v15[v16 - 48];
    *((_QWORD *)v18 - 4) = *(_QWORD *)&v15[v16 - 32];
    *((_QWORD *)v17 - 6) = 0;
    *((_QWORD *)v17 - 5) = 0;
    *((_QWORD *)v17 - 4) = 0;
    *(_OWORD *)(v18 - 24) = *(_OWORD *)&v15[v16 - 24];
    *((_QWORD *)v18 - 1) = *(_QWORD *)&v15[v16 - 8];
    *((_QWORD *)v17 - 3) = 0;
    *((_QWORD *)v17 - 2) = 0;
    *((_QWORD *)v17 - 1) = 0;
    v16 -= 136;
  }
  while (&v15[v16] != v14);
  v15 = (char *)*a1;
  v20 = (char *)a1[1];
  *a1 = &v9[v16];
  a1[1] = v13;
  a1[2] = v10;
  while (v20 != v15)
    cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)(v20 - 136));
  if (v15)
LABEL_15:
    operator delete(v15);
  return v13;
}

const cricket::RidDescription *std::vector<cricket::RidDescription>::__push_back_slow_path<cricket::RidDescription>(const cricket::RidDescription **a1, const cricket::RidDescription *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  const cricket::RidDescription *v9;
  std::string *v10;
  const cricket::RidDescription *v11;
  const cricket::RidDescription *v12;
  const cricket::RidDescription *v13;
  const cricket::RidDescription *v14;
  void *v15;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v5 = 0x333333333333333;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_24:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x333333333333333)
    goto LABEL_24;
  v7 = 80 * v5;
  v8 = (char *)operator new(80 * v5);
  v9 = (const cricket::RidDescription *)&v8[v7];
  v10 = cricket::RidDescription::RidDescription((std::string *)&v8[80 * v2], a2);
  v11 = (const cricket::RidDescription *)&v10[3].__r_.__value_.__r.__words[1];
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = (const cricket::RidDescription *)v10;
    a1[1] = v11;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v12 = (const cricket::RidDescription *)((char *)v12 - 80);
      v10 = cricket::RidDescription::RidDescription((std::string *)((char *)v10 - 80), v12);
    }
    while (v12 != v13);
    v12 = *a1;
    v14 = a1[1];
    *a1 = (const cricket::RidDescription *)v10;
    a1[1] = v11;
    a1[2] = v9;
    while (v14 != v12)
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v14 - 24, *((_QWORD *)v14 - 2));
      v15 = (void *)*((_QWORD *)v14 - 6);
      if (v15)
      {
        *((_QWORD *)v14 - 5) = v15;
        operator delete(v15);
      }
      if (*((char *)v14 - 57) < 0)
        operator delete(*((void **)v14 - 10));
      v14 = (const cricket::RidDescription *)((char *)v14 - 80);
    }
  }
  if (v12)
    operator delete(v12);
  return v11;
}

cricket::MediaDescriptionOptions *cricket::MediaDescriptionOptions::MediaDescriptionOptions(cricket::MediaDescriptionOptions *this, const cricket::MediaDescriptionOptions *a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  std::string *v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;

  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    v6 = *((_QWORD *)a2 + 5);
    v7 = *((_QWORD *)a2 + 6);
    v8 = v7 - v6;
    if (v7 == v6)
      goto LABEL_9;
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    v6 = *((_QWORD *)a2 + 5);
    v7 = *((_QWORD *)a2 + 6);
    v8 = v7 - v6;
    if (v7 == v6)
      goto LABEL_9;
  }
  v9 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
  if (v9 >= 0x276276276276277)
    goto LABEL_23;
  v10 = (char *)operator new(v8);
  v11 = 0;
  *((_QWORD *)this + 5) = v10;
  *((_QWORD *)this + 6) = v10;
  *((_QWORD *)this + 7) = &v10[104 * v9];
  do
  {
    cricket::SenderOptions::SenderOptions((std::string *)&v10[v11], (const cricket::SenderOptions *)(v6 + v11));
    v11 += 104;
  }
  while (v6 + v11 != v7);
  *((_QWORD *)this + 6) = &v10[v11];
LABEL_9:
  std::vector<webrtc::RtpCodecCapability>::vector((_QWORD *)this + 8, (uint64_t *)a2 + 8);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v12 = *((_QWORD *)a2 + 11);
  v13 = *((_QWORD *)a2 + 12);
  v14 = v13 - v12;
  if (v13 != v12)
  {
    v15 = 0xCCCCCCCCCCCCCCCDLL * (v14 >> 3);
    if (v15 >= 0x666666666666667)
      goto LABEL_23;
    v16 = (char *)operator new(v14);
    v17 = 0;
    *((_QWORD *)this + 11) = v16;
    *((_QWORD *)this + 12) = v16;
    *((_QWORD *)this + 13) = &v16[40 * v15];
    do
    {
      v18 = (std::string *)&v16[v17];
      v19 = (__int128 *)(v12 + v17);
      if (*(char *)(v12 + v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
      }
      else
      {
        v20 = *v19;
        v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
      }
      *(_OWORD *)&v16[v17 + 24] = *(_OWORD *)(v12 + v17 + 24);
      v17 += 40;
    }
    while (v12 + v17 != v13);
    *((_QWORD *)this + 12) = &v16[v17];
  }
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v21 = *((_QWORD *)a2 + 14);
  v22 = *((_QWORD *)a2 + 15);
  v23 = v22 - v21;
  if (v22 == v21)
    return this;
  v24 = 0x84BDA12F684BDA13 * (v23 >> 3);
  if (v24 >= 0x12F684BDA12F685)
LABEL_23:
    abort();
  v25 = (char *)operator new(v23);
  v26 = 0;
  *((_QWORD *)this + 14) = v25;
  *((_QWORD *)this + 15) = v25;
  *((_QWORD *)this + 16) = &v25[216 * v24];
  do
  {
    cricket::Codec::Codec((cricket::Codec *)&v25[v26], (const cricket::Codec *)(v21 + v26));
    v26 += 216;
  }
  while (v21 + v26 != v22);
  *((_QWORD *)this + 15) = &v25[v26];
  return this;
}

char *std::vector<webrtc::RtpSenderInfo>::__push_back_slow_path<webrtc::RtpSenderInfo>(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v2 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v5 = 0x492492492492492;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_25:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x492492492492492)
    goto LABEL_25;
  v7 = 56 * v5;
  v8 = (char *)operator new(56 * v5);
  v9 = &v8[56 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[v7];
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v9 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_DWORD *)v9 + 12) = *(_DWORD *)(a2 + 48);
  v11 = v9 + 56;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 7);
      *((_QWORD *)v9 - 5) = *(v13 - 5);
      *(_OWORD *)(v9 - 56) = v14;
      *(v13 - 6) = 0;
      *(v13 - 5) = 0;
      *(v13 - 7) = 0;
      v15 = *((_OWORD *)v13 - 2);
      *((_QWORD *)v9 - 2) = *(v13 - 2);
      *((_OWORD *)v9 - 2) = v15;
      *(v13 - 3) = 0;
      *(v13 - 2) = 0;
      *(v13 - 4) = 0;
      *((_DWORD *)v9 - 2) = *((_DWORD *)v13 - 2);
      v9 -= 56;
      v13 -= 7;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_20;
      if (*((char *)v16 - 9) < 0)
      {
        operator delete(*(v16 - 4));
        if ((*((char *)v16 - 33) & 0x80000000) == 0)
          goto LABEL_12;
      }
      else if ((*((char *)v16 - 33) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(*(v16 - 7));
LABEL_12:
      v16 -= 7;
    }
  }
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
LABEL_20:
  if (v13)
    operator delete(v13);
  return v11;
}

_QWORD *std::__function::__func<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24C0C0490;
  v2 = a1[1];
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void std::__function::__func<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24C0C0490;
  v1 = a1[1];
  if (v1)
  {
    v2 = (unsigned int *)(v1 + 4);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0C0490;
  result[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result[2] = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0C0490;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  a2[2] = *(_QWORD *)(result + 16);
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v2 = (unsigned int *)(result + 4);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

void std::__function::__func<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = __p[1];
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(webrtc::PeerConnectionSdpMethods *,webrtc::ConnectionContext *)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  _BYTE *v1;
  uint64_t v2;

  v1 = *(_BYTE **)(result + 8);
  if (v1)
  {
    if (*v1)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 184))(*(_QWORD *)(v2 + 8));
        if ((result & 1) == 0)
        {
          if (*(_BYTE *)(v2 + 216))
          {
            *(_BYTE *)(v2 + 216) = 0;
            result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 192))(*(_QWORD *)(v2 + 8));
            if ((_DWORD)result)
              return webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded((webrtc::SdpOfferAnswerHandler *)v2);
          }
        }
      }
    }
  }
  return result;
}

_QWORD *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::CreateOffer(webrtc::CreateSessionDescriptionObserver *,webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 4);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::CreateOffer(webrtc::CreateSessionDescriptionObserver *,webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 4);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::CreateOffer(webrtc::CreateSessionDescriptionObserver *,webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&)::$_1>::Run(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t result;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  _QWORD v24[3];
  uint64_t *v25;
  uint64_t v26;
  void *__p;
  __int128 v28;
  int v29;
  char v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v1 = *(_BYTE **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v22 = *(_OWORD *)(a1 + 32);
  v23 = *(_DWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    if (v4 == a1 + 56)
    {
      v25 = v24;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v4, v24);
      if (!v1)
        goto LABEL_13;
    }
    else
    {
      v25 = *(uint64_t **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = 0;
      if (!v1)
        goto LABEL_13;
    }
  }
  else
  {
    v25 = 0;
    if (!v1)
      goto LABEL_13;
  }
  if (*v1)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v9 = operator new();
    if (v3)
      (**(void (***)(uint64_t))v3)(v3);
    v10 = v25;
    if (v25)
    {
      if (v25 == v24)
      {
        *((_QWORD *)&v28 + 1) = &v26;
        (*(void (**)(_QWORD *, uint64_t *))(v24[0] + 24))(v24, &v26);
        v10 = (uint64_t *)*((_QWORD *)&v28 + 1);
        *(_QWORD *)v9 = &unk_24C0C0548;
        *(_QWORD *)(v9 + 8) = v3;
        if (!v10)
        {
          *(_QWORD *)(v9 + 40) = 0;
          goto LABEL_36;
        }
      }
      else
      {
        *((_QWORD *)&v28 + 1) = v25;
        v25 = 0;
        *(_QWORD *)v9 = &unk_24C0C0548;
        *(_QWORD *)(v9 + 8) = v3;
      }
      if (v10 == &v26)
      {
        *(_QWORD *)(v9 + 40) = v9 + 16;
        (*(void (**)(uint64_t *))(v26 + 24))(&v26);
        v11 = (uint64_t *)*((_QWORD *)&v28 + 1);
        if (*((uint64_t **)&v28 + 1) == &v26)
        {
          v12 = 4;
          v11 = &v26;
        }
        else
        {
          if (!*((_QWORD *)&v28 + 1))
            goto LABEL_36;
          v12 = 5;
        }
        (*(void (**)(void))(*v11 + 8 * v12))();
        goto LABEL_36;
      }
      *(_QWORD *)(v9 + 40) = v10;
    }
    else
    {
      *(_QWORD *)(v9 + 8) = v3;
      *(_QWORD *)(v9 + 40) = 0;
    }
LABEL_36:
    *(_QWORD *)v9 = off_24C0C0500;
    *(_DWORD *)(v9 + 48) = 0;
    v13 = (unsigned int *)(v9 + 48);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    if (*v1)
      v15 = v2;
    else
      v15 = 0;
    v26 = v9;
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    webrtc::SdpOfferAnswerHandler::DoCreateOffer(v15, (uint64_t)&v22, &v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v7 = v25;
    if (v25 != v24)
      goto LABEL_19;
LABEL_44:
    v8 = 4;
    v7 = v24;
    goto LABEL_45;
  }
LABEL_13:
  LODWORD(v26) = 10;
  v6 = (char *)operator new(0x38uLL);
  __p = v6;
  v28 = xmmword_208F0D7E0;
  if (v6 <= "CreateOffer failed because the session was shut down"
    && v6 + 52 > "CreateOffer failed because the session was shut down")
  {
    __break(1u);
  }
  strcpy(v6, "CreateOffer failed because the session was shut down");
  v29 = 0;
  v30 = 0;
  v31 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 40))(v3, &v26);
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  if (!v25)
  {
    v21 = std::__throw_bad_function_call[abi:sn180100]();
    return rtc::RefCountedObject<webrtc::CreateSessionDescriptionObserverOperationWrapper>::AddRef(v21);
  }
  (*(void (**)(uint64_t *))(*v25 + 48))(v25);
  v7 = v25;
  if (v25 == v24)
    goto LABEL_44;
LABEL_19:
  if (v7)
  {
    v8 = 5;
LABEL_45:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = (uint64_t)v1;
  if (v1)
  {
    v18 = (unsigned int *)(v1 + 4);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      return MEMORY[0x20BD0ADEC]();
  }
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::CreateSessionDescriptionObserverOperationWrapper>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 48);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::CreateSessionDescriptionObserverOperationWrapper>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 12;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::CreateSessionDescriptionObserverOperationWrapper>::~RefCountedObject(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_24C0C0548;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void rtc::RefCountedObject<webrtc::CreateSessionDescriptionObserverOperationWrapper>::~RefCountedObject(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_24C0C0548;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::CreateSessionDescriptionObserverOperationWrapper::OnSuccess(webrtc::CreateSessionDescriptionObserverOperationWrapper *this, webrtc::SessionDescriptionInterface *a2)
{
  uint64_t v3;
  uint64_t v6;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    return (*(uint64_t (**)(_QWORD, webrtc::SessionDescriptionInterface *))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), a2);
  }
  else
  {
    v6 = std::__throw_bad_function_call[abi:sn180100]();
    return webrtc::CreateSessionDescriptionObserverOperationWrapper::OnFailure(v6);
  }
}

void webrtc::CreateSessionDescriptionObserverOperationWrapper::OnFailure(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *__p[2];
  uint64_t v9;
  _DWORD v10[2];

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    v5 = *(_QWORD *)(a1 + 8);
    v7 = *a2;
    *(_OWORD *)__p = *(_OWORD *)(a2 + 2);
    v9 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 1) = 0;
    v10[0] = a2[8];
    *(_DWORD *)((char *)v10 + 3) = *(int *)((char *)a2 + 35);
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v5 + 40))(v5, &v7);
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = std::__throw_bad_function_call[abi:sn180100]();
    rtc::RefCountedObject<webrtc::CreateSessionDescriptionObserverOperationWrapper>::HasOneRef(v6);
  }
}

BOOL rtc::RefCountedObject<webrtc::CreateSessionDescriptionObserverOperationWrapper>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 48));
  return v1 == 1;
}

BOOL rtc::FinalRefCountedObject<webrtc::SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter>::Release(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = (unsigned int *)(a1 + 5);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  if (a1 && v3 == 1)
  {
    *a1 = &unk_24C0C0588;
    a1[1] = &unk_24C0C05C8;
    v4 = a1[4];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = a1[2];
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 4);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        MEMORY[0x20BD0ADEC]();
    }
    MEMORY[0x20BD0ADEC](a1, 0x10E1C406390733ALL);
  }
  return v3 != 1;
}

_QWORD *rtc::FinalRefCountedObject<webrtc::SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter>::~FinalRefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &unk_24C0C0588;
  a1[1] = &unk_24C0C05C8;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 4);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

BOOL `non-virtual thunk to'rtc::FinalRefCountedObject<webrtc::SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter>::Release(_QWORD *a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a1 - 1;
  v3 = (unsigned int *)(a1 + 4);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (v4 == 1)
  {
    *(a1 - 1) = &unk_24C0C0588;
    *a1 = &unk_24C0C05C8;
    v5 = a1[3];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = a1[1];
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 4);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        MEMORY[0x20BD0ADEC]();
    }
    MEMORY[0x20BD0ADEC](v2, 0x10E1C406390733ALL);
  }
  return v4 != 1;
}

uint64_t `non-virtual thunk to'rtc::FinalRefCountedObject<webrtc::SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter>::~FinalRefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(a1 - 1) = &unk_24C0C0588;
  *a1 = &unk_24C0C05C8;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = a1[1];
  if (result)
  {
    v4 = (unsigned int *)(result + 4);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      return MEMORY[0x20BD0ADEC]();
  }
  return result;
}

void webrtc::SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter::OnSetLocalDescriptionComplete(_QWORD *a1, uint64_t a2)
{
  int v2;
  _BYTE *v3;
  uint64_t v5;
  unsigned int **v6;
  void (***v7)(_QWORD);
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  int v12;
  void *__p[2];
  uint64_t v14;
  _DWORD v15[3];
  char v16;
  char v17;
  _QWORD v18[2];
  uint64_t (*v19)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v20)(uint64_t);

  v2 = *(_DWORD *)a2;
  v12 = *(_DWORD *)a2;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v15[0] = *(_DWORD *)(a2 + 32);
  *(_DWORD *)((char *)v15 + 3) = *(_DWORD *)(a2 + 35);
  v3 = (_BYTE *)a1[2];
  if (!v3 || !*v3 || (v5 = a1[3]) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(__p[0]);
    return;
  }
  v6 = (unsigned int **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 56))(*(_QWORD *)(v5 + 8));
  v7 = (void (***)(_QWORD))a1[4];
  if (v2)
  {
    webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionFailure((uint64_t)v6, (void (***)(_QWORD))a1[4], &v12);
    goto LABEL_6;
  }
  v9 = *v6;
  v8 = v6[1];
  if (*v6)
  {
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (v7)
    (**v7)(v7);
  v11 = (_QWORD *)operator new();
  *v11 = v9;
  v11[1] = v7;
  v11[3] = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionSuccess(webrtc::SetSessionDescriptionObserver *)::$_0>;
  v11[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionSuccess(webrtc::SetSessionDescriptionObserver *)::$_0 &&>;
  v18[0] = v11;
  v19 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v20 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(unsigned int *, _QWORD *, char *, char *))(*(_QWORD *)v8 + 8))(v8, v18, &v17, &v16);
  v19(1, v18, v18);
  if (SHIBYTE(v14) < 0)
    goto LABEL_13;
}

void webrtc::SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter::OnSetRemoteDescriptionComplete(_QWORD *a1, uint64_t a2)
{
  int v2;
  _BYTE *v3;
  uint64_t v5;
  unsigned int **v6;
  void (***v7)(_QWORD);
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  int v12;
  void *__p[2];
  uint64_t v14;
  _DWORD v15[3];
  char v16;
  char v17;
  _QWORD v18[2];
  uint64_t (*v19)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v20)(uint64_t);

  v2 = *(_DWORD *)a2;
  v12 = *(_DWORD *)a2;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v15[0] = *(_DWORD *)(a2 + 32);
  *(_DWORD *)((char *)v15 + 3) = *(_DWORD *)(a2 + 35);
  v3 = (_BYTE *)a1[2];
  if (!v3 || !*v3 || (v5 = a1[3]) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(__p[0]);
    return;
  }
  v6 = (unsigned int **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 56))(*(_QWORD *)(v5 + 8));
  v7 = (void (***)(_QWORD))a1[4];
  if (v2)
  {
    webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionFailure((uint64_t)v6, (void (***)(_QWORD))a1[4], &v12);
    goto LABEL_6;
  }
  v9 = *v6;
  v8 = v6[1];
  if (*v6)
  {
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (v7)
    (**v7)(v7);
  v11 = (_QWORD *)operator new();
  *v11 = v9;
  v11[1] = v7;
  v11[3] = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionSuccess(webrtc::SetSessionDescriptionObserver *)::$_0>;
  v11[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionSuccess(webrtc::SetSessionDescriptionObserver *)::$_0 &&>;
  v18[0] = v11;
  v19 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v20 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(unsigned int *, _QWORD *, char *, char *))(*(_QWORD *)v8 + 8))(v8, v18, &v17, &v16);
  v19(1, v18, v18);
  if (SHIBYTE(v14) < 0)
    goto LABEL_13;
}

void `non-virtual thunk to'webrtc::SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter::OnSetRemoteDescriptionComplete(uint64_t a1, uint64_t a2)
{
  webrtc::SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter::OnSetRemoteDescriptionComplete((_QWORD *)(a1 - 8), a2);
}

_QWORD *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetLocalDescription(webrtc::SetSessionDescriptionObserver *,webrtc::SessionDescriptionInterface *)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[3];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1];
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 4);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetLocalDescription(webrtc::SetSessionDescriptionObserver *,webrtc::SessionDescriptionInterface *)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[3];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1];
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 4);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetLocalDescription(webrtc::SetSessionDescriptionObserver *,webrtc::SessionDescriptionInterface *)::$_1>::Run(_QWORD *a1)
{
  _BYTE *v1;
  std::string::size_type v2;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  BOOL v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *result;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  size_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v1 = (_BYTE *)a1[1];
  v2 = a1[2];
  a1[1] = 0;
  v3 = a1[3];
  v4 = a1[4];
  a1[3] = 0;
  a1[4] = 0;
  v5 = (_QWORD *)a1[8];
  if (v5)
  {
    if (v5 == a1 + 5)
    {
      v21 = v20;
      (*(void (**)(_QWORD *, _BYTE *))(*v5 + 24))(v5, v20);
      if (!v1)
        goto LABEL_13;
    }
    else
    {
      v21 = (_BYTE *)a1[8];
      a1[8] = 0;
      if (!v1)
        goto LABEL_13;
    }
  }
  else
  {
    v21 = 0;
    if (!v1)
      goto LABEL_13;
  }
  if (*v1)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (v6)
  {
LABEL_13:
    v7 = v21;
    if (!v21)
      goto LABEL_39;
    goto LABEL_24;
  }
  v19 = v4;
  v8 = operator new();
  v9 = (unsigned int *)(v1 + 4);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  if (v3)
    (**(void (***)(uint64_t))v3)(v3);
  *(_QWORD *)(v8 + 16) = v1;
  *(_QWORD *)(v8 + 24) = v2;
  *(_QWORD *)(v8 + 32) = v3;
  *(_QWORD *)v8 = off_24C0C0628;
  *(_QWORD *)(v8 + 8) = &unk_24C0C0668;
  *(_DWORD *)(v8 + 40) = 0;
  v11 = (unsigned int *)(v8 + 40);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v18 = v8;
  webrtc::SdpOfferAnswerHandler::DoSetLocalDescription(v2, &v19, &v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v19)
    (*(void (**)(size_t))(*(_QWORD *)v19 + 8))(v19);
  v7 = v21;
  if (!v21)
LABEL_39:
    std::__throw_bad_function_call[abi:sn180100]();
  v4 = 0;
LABEL_24:
  (*(void (**)(_BYTE *))(*(_QWORD *)v7 + 48))(v7);
  result = v21;
  if (v21 == v20)
  {
    v14 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_29;
    v14 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
LABEL_29:
  if (v4)
    result = (_QWORD *)(*(uint64_t (**)(size_t))(*(_QWORD *)v4 + 8))(v4);
  if (v3)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v1)
  {
    v15 = (unsigned int *)(v1 + 4);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      return (_QWORD *)MEMORY[0x20BD0ADEC](v1, 0x1000C404A09149ALL);
  }
  return result;
}

uint64_t rtc::FinalRefCountedObject<webrtc::SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

void rtc::FinalRefCountedObject<webrtc::SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter>::~FinalRefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &unk_24C0C0588;
  a1[1] = &unk_24C0C05C8;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 4);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t `non-virtual thunk to'rtc::FinalRefCountedObject<webrtc::SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

void `non-virtual thunk to'rtc::FinalRefCountedObject<webrtc::SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter>::~FinalRefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(a1 - 1) = &unk_24C0C0588;
  *a1 = &unk_24C0C05C8;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 4);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetLocalDescription(std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[3];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1];
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 4);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetLocalDescription(std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[3];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1];
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 4);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetLocalDescription(std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>)::$_1>::Run(_QWORD *a1)
{
  _BYTE *v1;
  std::string::size_type v2;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  BOOL v6;
  char *v7;
  _BYTE *v8;
  size_t v9;
  _QWORD *result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  size_t v16;
  void *__p;
  __int128 v18;
  int v19;
  char v20;
  char v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v1 = (_BYTE *)a1[1];
  v2 = a1[2];
  a1[1] = 0;
  v3 = a1[3];
  v4 = a1[4];
  a1[3] = 0;
  a1[4] = 0;
  v5 = (_QWORD *)a1[8];
  if (v5)
  {
    if (v5 == a1 + 5)
    {
      v23 = v22;
      (*(void (**)(_QWORD *, _BYTE *))(*v5 + 24))(v5, v22);
      if (!v1)
        goto LABEL_13;
    }
    else
    {
      v23 = (_BYTE *)a1[8];
      a1[8] = 0;
      if (!v1)
        goto LABEL_13;
    }
LABEL_8:
    if (*v1)
      v6 = v2 == 0;
    else
      v6 = 1;
    if (v6)
      goto LABEL_13;
    v15 = v3;
    v16 = v4;
    if (v3)
    {
      (**(void (***)(uint64_t))v3)(v3);
      webrtc::SdpOfferAnswerHandler::DoSetLocalDescription(v2, &v16, &v15);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v9 = v16;
      if (!v16)
      {
LABEL_22:
        v8 = v23;
        if (!v23)
          goto LABEL_42;
        v4 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      webrtc::SdpOfferAnswerHandler::DoSetLocalDescription(v2, &v16, &v15);
      v9 = v16;
      if (!v16)
        goto LABEL_22;
    }
    (*(void (**)(size_t))(*(_QWORD *)v9 + 8))(v9);
    goto LABEL_22;
  }
  v23 = 0;
  if (v1)
    goto LABEL_8;
LABEL_13:
  LODWORD(v16) = 10;
  v7 = (char *)operator new(0x40uLL);
  __p = v7;
  v18 = xmmword_208F086A0;
  if (v7 <= "SetLocalDescription failed because the session was shut down"
    && v7 + 60 > "SetLocalDescription failed because the session was shut down")
  {
    __break(1u);
    goto LABEL_42;
  }
  strcpy(v7, "SetLocalDescription failed because the session was shut down");
  v19 = 0;
  v20 = 0;
  v21 = 0;
  (*(void (**)(uint64_t, size_t *))(*(_QWORD *)v3 + 32))(v3, &v16);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  v8 = v23;
  if (!v23)
LABEL_42:
    std::__throw_bad_function_call[abi:sn180100]();
LABEL_24:
  (*(void (**)(_BYTE *))(*(_QWORD *)v8 + 48))(v8);
  result = v23;
  if (v23 == v22)
  {
    v11 = 4;
    result = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_29;
    v11 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
LABEL_29:
  if (v4)
    result = (_QWORD *)(*(uint64_t (**)(size_t))(*(_QWORD *)v4 + 8))(v4);
  if (v3)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v1)
  {
    v12 = (unsigned int *)(v1 + 4);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      return (_QWORD *)MEMORY[0x20BD0ADEC](v1, 0x1000C404A09149ALL);
  }
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::SdpOfferAnswerHandler::ImplicitCreateSessionDescriptionObserver>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 72);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::SdpOfferAnswerHandler::ImplicitCreateSessionDescriptionObserver>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 18;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::SdpOfferAnswerHandler::ImplicitCreateSessionDescriptionObserver>::~RefCountedObject(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &unk_24C0C0710;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[4];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[2];
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 4);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void rtc::RefCountedObject<webrtc::SdpOfferAnswerHandler::ImplicitCreateSessionDescriptionObserver>::~RefCountedObject(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &unk_24C0C0710;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[4];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[2];
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 4);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::SdpOfferAnswerHandler::ImplicitCreateSessionDescriptionObserver::OnSuccess(webrtc::SdpOfferAnswerHandler::ImplicitCreateSessionDescriptionObserver *this, webrtc::SessionDescriptionInterface *a2)
{
  webrtc::SessionDescriptionInterface *v2;
  _BYTE *v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  webrtc::SessionDescriptionInterface *v12;

  v2 = a2;
  *((_BYTE *)this + 8) = 1;
  v4 = (_BYTE *)*((_QWORD *)this + 2);
  if (v4)
  {
    if (*v4)
    {
      v5 = *((_QWORD *)this + 3);
      if (v5)
      {
        v12 = a2;
        v6 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = 0;
        v11 = v6;
        webrtc::SdpOfferAnswerHandler::DoSetLocalDescription(v5, (size_t *)&v12, &v11);
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        if (v12)
          (*(void (**)(webrtc::SessionDescriptionInterface *))(*(_QWORD *)v12 + 8))(v12);
        v2 = (webrtc::SessionDescriptionInterface *)*((_QWORD *)this + 8);
        if (v2)
        {
          v7 = 6;
          return (*(uint64_t (**)(webrtc::SessionDescriptionInterface *))(*(_QWORD *)v2 + 8 * v7))(v2);
        }
        goto LABEL_15;
      }
    }
  }
  v8 = *((_QWORD *)this + 8);
  if (!v8)
  {
LABEL_15:
    v10 = std::__throw_bad_function_call[abi:sn180100]();
    return webrtc::SdpOfferAnswerHandler::ImplicitCreateSessionDescriptionObserver::OnFailure(v10);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  if (v2)
  {
    v7 = 1;
    return (*(uint64_t (**)(webrtc::SessionDescriptionInterface *))(*(_QWORD *)v2 + 8 * v7))(v2);
  }
  return result;
}

uint64_t webrtc::SdpOfferAnswerHandler::ImplicitCreateSessionDescriptionObserver::OnFailure(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  _OWORD *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  size_t v19;
  void **v20;
  void **p_src;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v27[4];
  void **__src;
  __int128 v29;
  int v30;
  void *__p[2];
  unint64_t v32;
  int v33;
  char v34;
  char v35;

  *(_BYTE *)(a1 + 8) = 1;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  v6 = (char *)operator new(0x40uLL);
  v7 = v6;
  v8 = v6 + 59;
  if (v6 <= "SetLocalDescription failed to create session description - "
    && v8 > "SetLocalDescription failed to create session description - ")
  {
    goto LABEL_41;
  }
  strcpy(v6, "SetLocalDescription failed to create session description - ");
  v9 = (const char *)(a2 + 2);
  if (*((char *)a2 + 31) < 0)
  {
    v9 = *(const char **)v9;
    if (!v9)
      goto LABEL_41;
  }
  qmemcpy(v27, "n description - eate session desion failed to crSetLocalDescript", sizeof(v27));
  v10 = strlen(v9);
  v11 = v10;
  if (v10 <= 4)
  {
    if (v10)
    {
      if (v8 <= v9 && &v8[v10] > v9)
        goto LABEL_41;
      memmove(v8, v9, v10);
      *(_QWORD *)&v18 = v11 + 59;
      *((_QWORD *)&v18 + 1) = 0x8000000000000040;
      v7[v11 + 59] = 0;
      __src = (void **)v7;
      v29 = v18;
    }
    else
    {
      __src = (void **)v7;
      v29 = xmmword_208F0ABB0;
    }
  }
  else
  {
    if (v10 - 0x7FFFFFFFFFFFFFBCLL < 0x8000000000000048)
      goto LABEL_42;
    v12 = v10 + 59;
    v13 = 126;
    if (v10 + 59 > 0x7E)
      v13 = v10 + 59;
    v14 = (v13 | 7) + 1;
    v15 = operator new(v14);
    v16 = (char *)v15 + 59;
    if (v7 >= (char *)v15 && v16 > v7)
      goto LABEL_41;
    *v15 = v27[3];
    v15[1] = v27[2];
    v15[2] = v27[1];
    *(_OWORD *)((char *)v15 + 43) = v27[0];
    if (v16 <= v9 && &v16[v11] > v9)
      goto LABEL_41;
    memcpy(v16, v9, v11);
    operator delete(v7);
    *(_QWORD *)&v17 = v11 + 59;
    *((_QWORD *)&v17 + 1) = v14 | 0x8000000000000000;
    *((_BYTE *)v15 + v12) = 0;
    __src = (void **)v15;
    v29 = v17;
    if (((char)((v14 | 0x8000000000000000) >> 56) & 0x80000000) == 0)
    {
      v19 = (v14 | 0x8000000000000000) >> 56;
      v30 = v5;
      v20 = __p;
      p_src = (void **)&__src;
      if (v19 > 0x16)
        goto LABEL_28;
      goto LABEL_20;
    }
  }
  v19 = v29;
  if ((v29 & 0x8000000000000000) != 0)
    goto LABEL_41;
  p_src = __src;
  if ((_QWORD)v29)
  {
    if (!__src)
      goto LABEL_41;
  }
  v30 = v5;
  if ((unint64_t)v29 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_42;
  v20 = __p;
  if ((unint64_t)v29 > 0x16)
  {
LABEL_28:
    v23 = (v19 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    v20 = (void **)operator new(v23 + 1);
    __p[1] = (void *)v19;
    v32 = v24 | 0x8000000000000000;
    __p[0] = v20;
    v22 = (void **)((char *)v20 + v19);
    if (v20 > p_src)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_20:
  HIBYTE(v32) = v19;
  v22 = (void **)((char *)__p + v19);
  if (__p > p_src)
    goto LABEL_32;
LABEL_31:
  if (v22 > p_src)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    abort();
  }
LABEL_32:
  if (v19)
    memmove(v20, p_src, v19);
  *(_BYTE *)v22 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v4 + 32))(v4, &v30);
  if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29) & 0x80000000) == 0)
      goto LABEL_36;
LABEL_39:
    operator delete(__src);
    v25 = *(_QWORD *)(a1 + 64);
    if (v25)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25);
    goto LABEL_40;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v29) < 0)
    goto LABEL_39;
LABEL_36:
  v25 = *(_QWORD *)(a1 + 64);
  if (!v25)
  {
LABEL_40:
    std::__throw_bad_function_call[abi:sn180100]();
    goto LABEL_41;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25);
}

BOOL rtc::RefCountedObject<webrtc::SdpOfferAnswerHandler::ImplicitCreateSessionDescriptionObserver>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 72));
  return v1 == 1;
}

_QWORD *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetLocalDescription(webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 4);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetLocalDescription(webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 4);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetLocalDescription(webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>)::$_1>::Run(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t v3;
  void (***v4)(_QWORD);
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  int v21;
  char *v22;
  __int128 v23;
  int v24;
  char v25;
  char v26;
  void (***v27)(_QWORD);
  void (***v28)(_QWORD);
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  void *__p;
  __int128 v34;
  int v35;
  char v36;
  char v37;
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[3];
  _QWORD *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)a1[1];
  v3 = a1[2];
  a1[1] = 0;
  v4 = (void (***)(_QWORD))a1[3];
  a1[3] = 0;
  v5 = (_QWORD *)a1[7];
  if (!v5)
  {
    v39 = 0;
    v41 = 0;
    v6 = v4 + 5;
    v7 = v4[8];
    v4[8] = 0;
    if (v7 != v4 + 5)
      goto LABEL_11;
LABEL_14:
    v8 = 4;
    v7 = v6;
    goto LABEL_15;
  }
  if (v5 == a1 + 4)
  {
    v39 = v38;
    (*(void (**)(_QWORD *, _QWORD *))(*v5 + 24))(v5, v38);
    v5 = v39;
    if (!v39)
    {
      v41 = 0;
      v6 = v4 + 5;
      v7 = v4[8];
      v4[8] = 0;
      if (v7 != v4 + 5)
        goto LABEL_11;
      goto LABEL_14;
    }
  }
  else
  {
    v39 = v5;
    a1[7] = 0;
  }
  if (v5 == v38)
  {
    v41 = v40;
    (*(void (**)(_QWORD *, _QWORD *))(v38[0] + 24))(v38, v40);
    v6 = v4 + 5;
    v7 = v4[8];
    v4[8] = 0;
    if (v7 != v4 + 5)
      goto LABEL_11;
    goto LABEL_14;
  }
  v41 = v5;
  v39 = 0;
  v6 = v4 + 5;
  v7 = v4[8];
  v4[8] = 0;
  if (v7 == v4 + 5)
    goto LABEL_14;
LABEL_11:
  if (!v7)
    goto LABEL_16;
  v8 = 5;
LABEL_15:
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  if (v41)
  {
    if (v41 == v40)
    {
      v4[8] = (void (**)(_QWORD))v6;
      (*(void (**)(_QWORD *, _QWORD *))(v40[0] + 24))(v40, v6);
      v9 = v41;
      if (v41 == v40)
      {
        v10 = 4;
        v9 = v40;
      }
      else
      {
        if (!v41)
          goto LABEL_25;
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
      goto LABEL_25;
    }
    v4[8] = (void (**)(_QWORD))v41;
    v41 = 0;
  }
  else
  {
    v4[8] = 0;
  }
LABEL_25:
  if (!v2 || !*v2 || !v3)
  {
    v32 = 10;
    v12 = (char *)operator new(0x40uLL);
    __p = v12;
    v34 = xmmword_208F086A0;
    if (v12 > "SetLocalDescription failed because the session was shut down"
      || v12 + 60 <= "SetLocalDescription failed because the session was shut down")
    {
      strcpy(v12, "SetLocalDescription failed because the session was shut down");
      v35 = 0;
      v36 = 0;
      v37 = 0;
      ((void (*)(void (***)(_QWORD), int *))(*v4)[5])(v4, &v32);
      if ((SHIBYTE(v34) & 0x80000000) == 0)
        goto LABEL_43;
      v13 = __p;
      goto LABEL_37;
    }
LABEL_58:
    __break(1u);
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  if (v11 > 5)
    goto LABEL_43;
  if (((1 << v11) & 0x13) != 0)
  {
    if (!*v2)
      v3 = 0;
    v29 = -1;
    v30 = 65537;
    v31 = 1;
    v28 = v4;
    (**v4)(v4);
    webrtc::SdpOfferAnswerHandler::DoCreateOffer(v3, (uint64_t)&v29, &v28);
LABEL_42:
    (*v4)[1](v4);
    goto LABEL_43;
  }
  if (((1 << v11) & 0xC) != 0)
  {
    if (!*v2)
      v3 = 0;
    v29 = -1;
    v30 = 65537;
    v31 = 1;
    v27 = v4;
    (**v4)(v4);
    webrtc::SdpOfferAnswerHandler::DoCreateAnswer(v3, (int *)&v29, &v27);
    goto LABEL_42;
  }
  v21 = 6;
  v20 = (char *)operator new(0x40uLL);
  v22 = v20;
  v23 = xmmword_208F0B3C0;
  if (v20 <= "SetLocalDescription called when PeerConnection is closed."
    && v20 + 57 > "SetLocalDescription called when PeerConnection is closed.")
  {
    goto LABEL_58;
  }
  strcpy(v20, "SetLocalDescription called when PeerConnection is closed.");
  v24 = 0;
  v25 = 0;
  v26 = 0;
  ((void (*)(void (***)(_QWORD), int *))(*v4)[5])(v4, &v21);
  if (SHIBYTE(v23) < 0)
  {
    v13 = v22;
LABEL_37:
    operator delete(v13);
  }
LABEL_43:
  v14 = v39;
  if (v39 == v38)
  {
    v15 = 4;
    v14 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_48;
    v15 = 5;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
LABEL_48:
  result = ((uint64_t (*)(_QWORD))(*v4)[1])(v4);
  if (v2)
  {
    v17 = (unsigned int *)(v2 + 4);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      return MEMORY[0x20BD0ADEC](v2, 0x1000C404A09149ALL);
  }
  return result;
}

_QWORD *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetRemoteDescription(webrtc::SetSessionDescriptionObserver *,webrtc::SessionDescriptionInterface *)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[3];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1];
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 4);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetRemoteDescription(webrtc::SetSessionDescriptionObserver *,webrtc::SessionDescriptionInterface *)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[3];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1];
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 4);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

char *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetRemoteDescription(webrtc::SetSessionDescriptionObserver *,webrtc::SessionDescriptionInterface *)::$_1>::Run(_QWORD *a1)
{
  _BYTE *v1;
  std::string::size_type v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  BOOL v6;
  char *result;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v1 = (_BYTE *)a1[1];
  v2 = a1[2];
  a1[1] = 0;
  v3 = a1[3];
  v4 = a1[4];
  a1[3] = 0;
  a1[4] = 0;
  v5 = (_QWORD *)a1[8];
  if (v5)
  {
    if (v5 == a1 + 5)
    {
      v32 = v31;
      (*(void (**)(_QWORD *, _QWORD *))(*v5 + 24))(v5, v31);
      if (!v1)
        goto LABEL_13;
    }
    else
    {
      v32 = (_QWORD *)a1[8];
      a1[8] = 0;
      if (!v1)
        goto LABEL_13;
    }
  }
  else
  {
    v32 = 0;
    if (!v1)
      goto LABEL_13;
  }
  if (*v1)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v9 = operator new();
    v10 = (unsigned int *)(v1 + 4);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if (v3)
      (**(void (***)(uint64_t))v3)(v3);
    *(_QWORD *)(v9 + 8) = &unk_24C0C0668;
    v12 = v9 + 8;
    *(_QWORD *)(v9 + 16) = v1;
    *(_QWORD *)(v9 + 24) = v2;
    *(_QWORD *)(v9 + 32) = v3;
    *(_QWORD *)v9 = off_24C0C0628;
    *(_DWORD *)(v9 + 40) = 0;
    v13 = (unsigned int *)(v9 + 40);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = (webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation *)operator new();
    v29 = v12;
    v30 = v4;
    if (v32)
    {
      if (v32 == v31)
      {
        v34 = v33;
        (*(void (**)(_QWORD *, _BYTE *))(v31[0] + 24))(v31, v33);
      }
      else
      {
        v34 = v32;
        v32 = 0;
      }
    }
    else
    {
      v34 = 0;
    }
    webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::RemoteDescriptionOperation((uint64_t)v15, v2, &v30, &v29, (uint64_t)v33);
    v28 = v15;
    v16 = v34;
    if (v34 == v33)
    {
      v17 = 4;
      v16 = v33;
    }
    else
    {
      if (!v34)
        goto LABEL_32;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_32:
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    webrtc::SdpOfferAnswerHandler::DoSetRemoteDescription(v2, (uint64_t *)&v28);
    if (v28)
    {
      webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::~RemoteDescriptionOperation(v28, v18, v19);
      MEMORY[0x20BD0ADEC]();
    }
    v4 = 0;
    result = (char *)v32;
    if (v32 != v31)
      goto LABEL_15;
LABEL_39:
    v8 = 4;
    result = (char *)v31;
    goto LABEL_40;
  }
LABEL_13:
  if (!v32)
  {
    v23 = std::__throw_bad_function_call[abi:sn180100]();
    return webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::RemoteDescriptionOperation(v23, v24, v25, v26, v27);
  }
  (*(void (**)(_QWORD *))(*v32 + 48))(v32);
  result = (char *)v32;
  if (v32 == v31)
    goto LABEL_39;
LABEL_15:
  if (result)
  {
    v8 = 5;
LABEL_40:
    result = (char *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v8))();
  }
  if (v4)
    result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v3)
    result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v1)
  {
    v20 = (unsigned int *)(v1 + 4);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      return (char *)MEMORY[0x20BD0ADEC](v1, 0x1000C404A09149ALL);
  }
  return result;
}

char *webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::RemoteDescriptionOperation(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  void *__p;
  __int128 v12;

  *(_QWORD *)a1 = a2;
  v6 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a5 + 24);
  if (v8)
  {
    if (v8 == a5)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v8;
      *(_QWORD *)(a5 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 102) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 93) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_BYTE *)(a1 + 132) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 192))(*(_QWORD *)(*(_QWORD *)a1 + 8));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    *(_DWORD *)(a1 + 128) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
    return (char *)a1;
  }
  *(_DWORD *)(a1 + 128) = -1;
  result = (char *)operator new(0x20uLL);
  if (result <= "SessionDescription is NULL." && result + 27 > "SessionDescription is NULL.")
  {
    __break(1u);
  }
  else
  {
    strcpy(result, "SessionDescription is NULL.");
    __p = result;
    v12 = xmmword_208F051A0;
    webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SetError(a1, 3, (__int128 *)&__p);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
      return (char *)a1;
    operator delete(__p);
    return (char *)a1;
  }
  return result;
}

_QWORD *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetRemoteDescription(std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetRemoteDescriptionObserverInterface>)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[3];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1];
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 4);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetRemoteDescription(std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetRemoteDescriptionObserverInterface>)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[3];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1];
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 4);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::SetRemoteDescription(std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetRemoteDescriptionObserverInterface>)::$_1>::Run(_QWORD *a1)
{
  _BYTE *v1;
  std::string::size_type v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  BOOL v6;
  char *v7;
  _QWORD *result;
  uint64_t v9;
  webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  int v24;
  void *__p;
  __int128 v26;
  int v27;
  char v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v1 = (_BYTE *)a1[1];
  v2 = a1[2];
  a1[1] = 0;
  v3 = a1[3];
  v4 = a1[4];
  a1[3] = 0;
  a1[4] = 0;
  v5 = (_QWORD *)a1[8];
  if (v5)
  {
    if (v5 == a1 + 5)
    {
      v23 = v22;
      (*(void (**)(_QWORD *, _QWORD *))(*v5 + 24))(v5, v22);
      if (!v3)
        goto LABEL_20;
    }
    else
    {
      v23 = (_QWORD *)a1[8];
      a1[8] = 0;
      if (!v3)
      {
LABEL_20:
        if (v23)
        {
          (*(void (**)(_QWORD *))(*v23 + 48))(v23);
          v3 = 0;
          result = v23;
          if (v23 != v22)
            goto LABEL_22;
LABEL_41:
          v9 = 4;
          result = v22;
          goto LABEL_42;
        }
        goto LABEL_54;
      }
    }
  }
  else
  {
    v23 = 0;
    if (!v3)
      goto LABEL_20;
  }
  if (!v1 || (*v1 ? (v6 = v2 == 0) : (v6 = 1), v6))
  {
    v24 = 10;
    v7 = (char *)operator new(0x40uLL);
    __p = v7;
    v26 = xmmword_208F0ABD0;
    if (v7 <= "SetRemoteDescription failed because the session was shut down"
      && v7 + 61 > "SetRemoteDescription failed because the session was shut down")
    {
      __break(1u);
    }
    strcpy(v7, "SetRemoteDescription failed because the session was shut down");
    v27 = 0;
    v28 = 0;
    v29 = 0;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v3 + 32))(v3, &v24);
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
    if (v23)
    {
      (*(void (**)(_QWORD *))(*v23 + 48))(v23);
      result = v23;
      if (v23 != v22)
        goto LABEL_22;
      goto LABEL_41;
    }
LABEL_54:
    v18 = std::__throw_bad_function_call[abi:sn180100]();
    return rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SdpOfferAnswerHandler::DoSetLocalDescription(std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>)::$_1>(v18);
  }
  v10 = (webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation *)operator new();
  v20 = v3;
  v21 = v4;
  if (v23)
  {
    if (v23 == v22)
    {
      *((_QWORD *)&v26 + 1) = &v24;
      (*(void (**)(_QWORD *, int *))(v22[0] + 24))(v22, &v24);
    }
    else
    {
      *((_QWORD *)&v26 + 1) = v23;
      v23 = 0;
    }
  }
  else
  {
    *((_QWORD *)&v26 + 1) = 0;
  }
  webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::RemoteDescriptionOperation((uint64_t)v10, v2, &v21, &v20, (uint64_t)&v24);
  v19 = v10;
  v11 = (int *)*((_QWORD *)&v26 + 1);
  if (*((int **)&v26 + 1) == &v24)
  {
    v12 = 4;
    v11 = &v24;
  }
  else
  {
    if (!*((_QWORD *)&v26 + 1))
      goto LABEL_34;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_34:
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  webrtc::SdpOfferAnswerHandler::DoSetRemoteDescription(v2, (uint64_t *)&v19);
  if (v19)
  {
    webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::~RemoteDescriptionOperation(v19, v13, v14);
    MEMORY[0x20BD0ADEC]();
  }
  v3 = 0;
  v4 = 0;
  result = v23;
  if (v23 == v22)
    goto LABEL_41;
LABEL_22:
  if (result)
  {
    v9 = 5;
LABEL_42:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  if (v4)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v3)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v1)
  {
    v15 = (unsigned int *)(v1 + 4);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      return (_QWORD *)MEMORY[0x20BD0ADEC](v1, 0x1000C404A09149ALL);
  }
  return result;
}

_QWORD *rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SdpOfferAnswerHandler::DoSetLocalDescription(std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>)::$_1>(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 128))(*(_QWORD *)(*(_QWORD *)a1 + 8));
  v2 = result;
  v3 = (_QWORD *)result[29];
  v4 = (_QWORD *)result[30];
  while (v4 != v3)
  {
    v5 = (_QWORD *)*--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v2[30] = v3;
  return result;
}

_QWORD *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::CreateAnswer(webrtc::CreateSessionDescriptionObserver *,webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 4);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::CreateAnswer(webrtc::CreateSessionDescriptionObserver *,webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 4);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::CreateAnswer(webrtc::CreateSessionDescriptionObserver *,webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&)::$_1>::Run(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  void (****v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  _QWORD v33[3];
  _QWORD *v34;
  void (***v35)(_QWORD);
  void *__p;
  __int128 v37;
  int v38;
  char v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v1 = *(_BYTE **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v31 = *(_OWORD *)(a1 + 32);
  v32 = *(_DWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    if (v4 == a1 + 56)
    {
      v34 = v33;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v4, v33);
      if (!v1)
        goto LABEL_13;
    }
    else
    {
      v34 = *(_QWORD **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = 0;
      if (!v1)
        goto LABEL_13;
    }
  }
  else
  {
    v34 = 0;
    if (!v1)
      goto LABEL_13;
  }
  if (*v1)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v14 = operator new();
    if (v3)
      (**(void (***)(uint64_t))v3)(v3);
    v15 = (void (****)(_QWORD))v34;
    if (v34)
    {
      if (v34 == v33)
      {
        *((_QWORD *)&v37 + 1) = &v35;
        (*(void (**)(_QWORD *, void (****)(_QWORD)))(v33[0] + 24))(v33, &v35);
        v15 = (void (****)(_QWORD))*((_QWORD *)&v37 + 1);
        *(_QWORD *)v14 = &unk_24C0C0548;
        *(_QWORD *)(v14 + 8) = v3;
        if (!v15)
        {
          *(_QWORD *)(v14 + 40) = 0;
          goto LABEL_36;
        }
      }
      else
      {
        *((_QWORD *)&v37 + 1) = v34;
        v34 = 0;
        *(_QWORD *)v14 = &unk_24C0C0548;
        *(_QWORD *)(v14 + 8) = v3;
      }
      if (v15 == &v35)
      {
        *(_QWORD *)(v14 + 40) = v14 + 16;
        ((void (*)(_QWORD))v35[3])(&v35);
        v21 = (_QWORD *)*((_QWORD *)&v37 + 1);
        if (*((void (*****)(_QWORD))&v37 + 1) == &v35)
        {
          v22 = 4;
          v21 = &v35;
        }
        else
        {
          if (!*((_QWORD *)&v37 + 1))
            goto LABEL_36;
          v22 = 5;
        }
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v21 + 8 * v22))(v21, v16, v17, v18, v19, v20);
        goto LABEL_36;
      }
      *(_QWORD *)(v14 + 40) = v15;
    }
    else
    {
      *(_QWORD *)(v14 + 8) = v3;
      *(_QWORD *)(v14 + 40) = 0;
    }
LABEL_36:
    *(_QWORD *)v14 = off_24C0C0500;
    *(_DWORD *)(v14 + 48) = 0;
    v23 = (unsigned int *)(v14 + 48);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    if (*v1)
      v25 = v2;
    else
      v25 = 0;
    v35 = (void (***)(_QWORD))v14;
    do
      v26 = __ldxr(v23);
    while (__stxr(v26 + 1, v23));
    webrtc::SdpOfferAnswerHandler::DoCreateAnswer(v25, (int *)&v31, &v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    result = v34;
    if (v34 != v33)
      goto LABEL_19;
LABEL_44:
    v13 = 4;
    result = v33;
    goto LABEL_45;
  }
LABEL_13:
  LODWORD(v35) = 10;
  v6 = (char *)operator new(0x38uLL);
  __p = v6;
  v37 = xmmword_208F08660;
  if (v6 <= "CreateAnswer failed because the session was shut down"
    && v6 + 53 > "CreateAnswer failed because the session was shut down")
  {
    __break(1u);
  }
  strcpy(v6, "CreateAnswer failed because the session was shut down");
  v38 = 0;
  v39 = 0;
  v40 = 0;
  (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, &v35);
  if (SHIBYTE(v37) < 0)
    operator delete(__p);
  if (!v34)
  {
    v30 = std::__throw_bad_function_call[abi:sn180100]();
    return rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SdpOfferAnswerHandler::SetRemoteDescriptionPostProcess(BOOL)::$_0>(v30);
  }
  (*(void (**)(_QWORD *))(*v34 + 48))(v34);
  result = v34;
  if (v34 == v33)
    goto LABEL_44;
LABEL_19:
  if (result)
  {
    v13 = 5;
LABEL_45:
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v13))(result, v7, v8, v9, v10, v11);
  }
  if (v3)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v1)
  {
    v27 = (unsigned int *)(v1 + 4);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      return (_QWORD *)MEMORY[0x20BD0ADEC](v1, 0x1000C404A09149ALL);
  }
  return result;
}

_QWORD *rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SdpOfferAnswerHandler::SetRemoteDescriptionPostProcess(BOOL)::$_0>(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 128))(*(_QWORD *)(*(_QWORD *)a1 + 8));
  v2 = result;
  v3 = (_QWORD *)result[29];
  v4 = (_QWORD *)result[30];
  while (v4 != v3)
  {
    v5 = (_QWORD *)*--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v2[30] = v3;
  return result;
}

_QWORD *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[7];
  if (v5 == a1 + 4)
  {
    v6 = 4;
    v5 = a1 + 4;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = a1[3];
  a1[3] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[1];
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 4);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1>::~OperationWithFunctor(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[7];
  if (v5 == a1 + 4)
  {
    v6 = 4;
    v5 = a1 + 4;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = a1[3];
  a1[3] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[1];
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 4);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

webrtc::SdpOfferAnswerHandler *rtc::rtc_operations_chain_internal::OperationWithFunctor<webrtc::SdpOfferAnswerHandler::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1>::Run(uint64_t a1)
{
  __int128 v2;
  webrtc::IceCandidateInterface *v3;
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  webrtc::SdpOfferAnswerHandler *v7;
  BOOL v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  webrtc::IceCandidateInterface *v15;
  webrtc::SdpOfferAnswerHandler *result;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  int v21;
  char *v22;
  __int128 v23;
  int v24;
  char v25;
  char v26;
  _BYTE v27[24];
  _BYTE *v28;
  webrtc::SdpOfferAnswerHandler *v29[2];
  webrtc::IceCandidateInterface *v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)v29 = v2;
  v3 = *(webrtc::IceCandidateInterface **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v30 = v3;
  v4 = v31;
  v5 = *(_BYTE **)(a1 + 56);
  if (!v5)
  {
    v32 = 0;
    v6 = *(_BYTE **)(a1 + 88);
    if (!v6)
      goto LABEL_8;
    goto LABEL_4;
  }
  if (v5 == (_BYTE *)(a1 + 32))
  {
    v32 = v31;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v5 + 24))(v5, v31);
    v6 = *(_BYTE **)(a1 + 88);
    if (!v6)
      goto LABEL_8;
LABEL_4:
    if (v6 == (_BYTE *)(a1 + 64))
    {
      v28 = v27;
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v6 + 24))(v6, v27);
      v7 = v29[0];
      if (!v29[0])
        goto LABEL_18;
    }
    else
    {
      v28 = v6;
      *(_QWORD *)(a1 + 88) = 0;
      v7 = v29[0];
      if (!v29[0])
        goto LABEL_18;
    }
    goto LABEL_13;
  }
  v32 = v5;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = *(_BYTE **)(a1 + 88);
  if (v6)
    goto LABEL_4;
LABEL_8:
  v28 = 0;
  v7 = v29[0];
  if (!v29[0])
    goto LABEL_18;
LABEL_13:
  if (*(_BYTE *)v7)
    v8 = v29[1] == 0;
  else
    v8 = 1;
  if (v8)
  {
LABEL_18:
    v9 = 1u;
    v10 = v28;
    if (!v28)
      goto LABEL_42;
LABEL_21:
    (*(void (**)(_BYTE *))(*(_QWORD *)v10 + 48))(v10);
    __asm { BR              X10 }
  }
  v11 = webrtc::SdpOfferAnswerHandler::AddIceCandidateInternal(v29[1], v30);
  v9 = v11;
  v10 = v28;
  if (v28)
    goto LABEL_21;
  do
  {
LABEL_42:
    std::__throw_bad_function_call[abi:sn180100]();
    v21 = 6;
    v20 = (char *)operator new(0x40uLL);
    v22 = v20;
    v23 = xmmword_208F1B0C0;
    if (v20 <= "AddIceCandidate failed because the session was shut down"
      && v20 + 56 > "AddIceCandidate failed because the session was shut down")
    {
      __break(1u);
    }
    strcpy(v20, "AddIceCandidate failed because the session was shut down");
    v24 = 0;
    v25 = 0;
    v26 = 0;
  }
  while (!v32);
  (*(void (**)(_BYTE *, int *))(*(_QWORD *)v32 + 48))(v32, &v21);
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v22);
    v12 = v28;
    if (v28 != v27)
      goto LABEL_24;
LABEL_27:
    v13 = 4;
    v12 = v27;
    goto LABEL_28;
  }
  v12 = v28;
  if (v28 == v27)
    goto LABEL_27;
LABEL_24:
  if (!v12)
    goto LABEL_29;
  v13 = 5;
LABEL_28:
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_29:
  if (v32 == v31)
  {
    v14 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_34;
    v14 = 5;
    v4 = v32;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v14))(v4);
LABEL_34:
  v15 = v30;
  v30 = 0;
  if (v15)
    (*(void (**)(webrtc::IceCandidateInterface *))(*(_QWORD *)v15 + 8))(v15);
  result = v29[0];
  if (v29[0])
  {
    v17 = (unsigned int *)((char *)v29[0] + 4);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      return (webrtc::SdpOfferAnswerHandler *)MEMORY[0x20BD0ADEC]();
  }
  return result;
}

void rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SdpOfferAnswerHandler::AllocateSctpSids(void)::$_1>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 152))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  if ((v2 & 0xFF00000000) != 0)
  {
    webrtc::DataChannelController::AllocateSctpSids(*(unsigned __int16 ***)a1, v2);
  }
  else
  {
    v3 = *(unsigned int **)(a1 + 16);
    if (*((_BYTE *)v3 + 4))
      webrtc::DataChannelController::AllocateSctpSids(*(unsigned __int16 ***)a1, *v3);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, unint64_t a2, uint64_t a3, size_t i)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  size_t v19;
  const void *v20;
  size_t v21;
  int v22;
  __int128 v23;
  size_t v24;
  void **v25;
  unint64_t v26;
  BOOL v27;
  char v28;
  char *v29;
  const void *v30;
  size_t v31;
  void **v33;
  size_t v34;
  size_t v35;
  int v36;
  unint64_t v37;
  size_t v38;
  const void *v39;
  void **v41;
  size_t v42;
  size_t v43;
  int v44;
  BOOL v45;
  size_t v46;
  const void *v47;
  void **v49;
  size_t v50;
  size_t v51;
  int v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  size_t v57;
  void **v58;
  BOOL v59;
  char v60;
  size_t v61;
  const void *v62;
  void **v64;
  size_t v65;
  size_t v66;
  int v67;
  size_t v68;
  char *v69;
  void **v71;
  size_t v72;
  size_t v73;
  int v74;
  __int128 *v75;
  __int128 v76;
  __int128 v77;
  char v78;
  __int128 v79;
  void **v80;
  void *v81;
  size_t v82;
  const void *v83;
  size_t v84;
  int v85;
  unint64_t v86;
  void **v87;
  BOOL v88;
  char v89;
  void **v90;
  const void **v91;
  size_t v92;
  const void *v93;
  size_t v94;
  int v95;
  unint64_t v96;
  void **v97;
  BOOL v98;
  char v99;
  void **v100;
  const void **v101;
  size_t v102;
  const void *v103;
  size_t v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  void **v108;
  BOOL v109;
  char v110;
  void **v111;
  const void **v112;
  size_t v113;
  const void *v114;
  size_t v115;
  int v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  unint64_t v120;
  void **v121;
  BOOL v122;
  char v123;
  void **v124;
  const void **v125;
  size_t v126;
  const void *v127;
  size_t v128;
  int v129;
  void **v130;
  const void **v131;
  size_t v132;
  const void *v133;
  size_t v134;
  int v135;
  __int128 *v136;
  __int128 v137;
  __int128 v138;
  const void *v139;
  _QWORD *v140;
  const void **v141;
  size_t v142;
  unint64_t v143;
  int64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  size_t v151;
  uint64_t v152;
  unint64_t v153;
  const void *v154;
  unint64_t v156;
  const void *v157;
  size_t v159;
  int v160;
  size_t v161;
  const void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v166;
  size_t v167;
  const void *v168;
  size_t v170;
  int v171;
  __int128 v172;
  __int128 v173;
  size_t v174;
  BOOL v175;
  char v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  size_t v180;
  const void *v181;
  int64_t v183;
  size_t v184;
  const void *v185;
  size_t v187;
  int v188;
  size_t v189;
  const void *v190;
  size_t v192;
  __int128 *v193;
  size_t v194;
  int v195;
  const void **v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  __int128 v201;
  uint64_t v202;
  const void *v203;
  size_t v205;
  char *v206;
  size_t v207;
  int v208;
  __int128 v209;
  unint64_t v210;
  BOOL v211;
  int v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  char *v216;
  const void **v217;
  size_t v218;
  char *v219;
  size_t v221;
  int v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  const void **v226;
  unint64_t v227;
  char *v228;
  size_t v230;
  int v231;
  int64_t v232;
  uint64_t v233;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  const void *v242;
  uint64_t v244;
  size_t v245;
  const void *v246;
  size_t v248;
  int v249;
  __int128 v250;
  void *v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  const void *v256;
  size_t v258;
  const void *v259;
  size_t v261;
  int v262;
  __int128 v263;
  unsigned __int8 v264;
  BOOL v265;
  int v266;
  __int128 v267;
  uint64_t v268;
  __int128 v269;
  unint64_t v270;
  size_t v271;
  const void *v272;
  size_t v274;
  int v275;
  __int128 v276;
  uint64_t v277;
  __int128 v278;
  unint64_t v279;
  size_t v280;
  const void *v281;
  size_t v283;
  int v284;
  __int128 v285;
  uint64_t v286;
  unint64_t v287;
  char *v288;
  __int128 v289;
  char *v290;
  const void *v291;
  size_t v293;
  char *v294;
  size_t v295;
  int v296;
  __int128 v297;
  unint64_t v298;
  size_t v299;
  BOOL v300;
  int v301;
  size_t v302;
  char *v303;
  uint64_t v304;
  size_t v305;
  char *v306;
  size_t v308;
  int v309;
  size_t v310;
  size_t v311;
  const void **v312;
  size_t v313;
  const void *v314;
  size_t v316;
  int v317;
  size_t v318;
  int v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 *v323;
  unint64_t v324;
  __int128 *v325;
  char v326;
  unsigned int __s2;
  __int128 *__s2a;
  void **__s2b;
  uint64_t v330;
  size_t v331;
  uint64_t v332;
  unint64_t v333;
  size_t v334;
  char v335;
  __int128 v337;
  unint64_t v338;
  void *__s1[2];
  uint64_t v340;
  uint64_t v341;

  v341 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v332 = a2 - 24;
  v323 = (__int128 *)(a2 - 72);
  v325 = (__int128 *)(a2 - 48);
  v7 = a1;
  while (2)
  {
    __s2 = i;
LABEL_4:
    v8 = v7;
    v9 = a2 - v7;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v7) >> 3);
    a1 = v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(char *)(a2 - 1) < 0)
        {
          a2 = *(_QWORD *)(a2 - 16);
          if ((a2 & 0x8000000000000000) != 0)
            goto LABEL_661;
          v139 = *(const void **)v332;
          v140 = (_QWORD *)v8;
          if (a2)
          {
            if (!v139)
              goto LABEL_661;
          }
        }
        else
        {
          a2 = *(unsigned __int8 *)(a2 - 1);
          v139 = (const void *)v332;
          v140 = (_QWORD *)v8;
        }
        if (*((char *)v140 + 23) < 0)
        {
          i = v140[1];
          if ((i & 0x8000000000000000) != 0)
            goto LABEL_661;
          v140 = (_QWORD *)*v140;
          if (i)
          {
            if (!v140)
              goto LABEL_661;
          }
        }
        else
        {
          i = *((unsigned __int8 *)v140 + 23);
        }
        if (i >= a2)
          v318 = a2;
        else
          v318 = i;
        v319 = memcmp(v139, v140, v318);
        if (!v319)
          goto LABEL_662;
        if (v319 < 0)
          goto LABEL_663;
        return;
      case 3uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__int128 *)v8, (const void **)(v8 + 24), (__int128 *)v332);
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v8, (__int128 *)(v8 + 24), (__int128 *)(v8 + 48), (__int128 *)v332);
        return;
      case 5uLL:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v8, v8 + 24, v8 + 48, v8 + 72, v332);
        return;
      default:
        if (v9 <= 575)
        {
          if ((i & 1) != 0)
          {
            if (v8 == a2)
              return;
            v141 = (const void **)(v8 + 24);
            if (v8 + 24 == a2)
              return;
            v142 = 0;
            v143 = v8;
            goto LABEL_581;
          }
          if (v8 == a2)
            return;
          v196 = (const void **)(v8 + 24);
          if (a1 + 24 == a2)
            return;
          v197 = 0;
          v198 = -1;
          v199 = 1;
          v200 = (char *)a1;
          while (1)
          {
            v202 = v197;
            v197 = v199;
            if (v200[47] < 0)
            {
              i = (size_t)v196[1];
              if ((i & 0x8000000000000000) != 0)
                goto LABEL_661;
              v203 = *v196;
              if (i && v203 == 0)
                goto LABEL_661;
            }
            else
            {
              i = v200[47];
              v203 = v196;
            }
            if (v200[23] < 0)
            {
              v205 = *((_QWORD *)v200 + 1);
              if ((v205 & 0x8000000000000000) != 0)
                goto LABEL_661;
              v206 = *(char **)v200;
              if (v205)
              {
                if (!v206)
                  goto LABEL_661;
              }
            }
            else
            {
              v205 = v200[23];
              v206 = v200;
            }
            if (v205 >= i)
              v207 = i;
            else
              v207 = v205;
            v208 = memcmp(v203, v206, v207);
            if (v208)
            {
              if ((v208 & 0x80000000) == 0)
                goto LABEL_414;
            }
            else if (i >= v205)
            {
              goto LABEL_414;
            }
            v209 = *(_OWORD *)v196;
            v338 = (unint64_t)v196[2];
            v337 = v209;
            v196[1] = 0;
            v196[2] = 0;
            *v196 = 0;
            v210 = *((_QWORD *)&v337 + 1);
            i = v337;
            if (*((_QWORD *)&v337 + 1))
              v211 = (_QWORD)v337 == 0;
            else
              v211 = 0;
            v212 = !v211;
            if ((v338 & 0x8000000000000000) == 0)
            {
              v213 = a1 + 24 * v202;
              v214 = *(_OWORD *)v213;
              i = HIBYTE(v338);
              v196[2] = *(const void **)(v213 + 16);
              *(_OWORD *)v196 = v214;
              *(_BYTE *)(v213 + 23) = 0;
              *(_BYTE *)v213 = 0;
              v215 = v198;
              v216 = v200;
              while (1)
              {
                v217 = (const void **)(v216 - 24);
                if (*(v216 - 1) < 0)
                {
                  v218 = *((_QWORD *)v216 - 2);
                  if ((v218 & 0x8000000000000000) != 0)
                    goto LABEL_661;
                  v219 = (char *)*v217;
                  if (v218 && v219 == 0)
                    goto LABEL_661;
                }
                else
                {
                  v218 = *(v216 - 1);
                  v219 = v216 - 24;
                }
                if (v218 >= i)
                  v221 = i;
                else
                  v221 = v218;
                v222 = memcmp(&v337, v219, v221);
                if (v222)
                {
                  if ((v222 & 0x80000000) == 0)
                    goto LABEL_413;
                }
                else if (v218 <= i)
                {
                  goto LABEL_413;
                }
                *(_OWORD *)v216 = *(_OWORD *)v217;
                *((_QWORD *)v216 + 2) = *((_QWORD *)v216 - 1);
                *(v216 - 1) = 0;
                *(v216 - 24) = 0;
                v216 -= 24;
                v45 = __CFADD__(v215++, 1);
                if (v45)
                  goto LABEL_661;
              }
            }
            v223 = a1 + 24 * v202;
            v224 = *(_OWORD *)v223;
            v196[2] = *(const void **)(v223 + 16);
            *(_OWORD *)v196 = v224;
            *(_BYTE *)(v223 + 23) = 0;
            *(_BYTE *)v223 = 0;
            if ((v210 & 0x8000000000000000) != 0 || !v212)
              goto LABEL_661;
            v225 = v198;
            v216 = v200;
            while (1)
            {
              v226 = (const void **)(v216 - 24);
              if (*(v216 - 1) < 0)
              {
                v227 = *((_QWORD *)v216 - 2);
                if ((v227 & 0x8000000000000000) != 0)
                  goto LABEL_661;
                v228 = (char *)*v226;
                if (v227 && v228 == 0)
                  goto LABEL_661;
              }
              else
              {
                v227 = *(v216 - 1);
                v228 = v216 - 24;
              }
              v230 = v227 >= v210 ? v210 : v227;
              v231 = memcmp((const void *)i, v228, v230);
              if (v231)
                break;
              if (v210 >= v227)
                goto LABEL_413;
LABEL_461:
              *(_OWORD *)v216 = *(_OWORD *)v226;
              *((_QWORD *)v216 + 2) = *((_QWORD *)v216 - 1);
              *(v216 - 1) = 0;
              *(v216 - 24) = 0;
              v216 -= 24;
              v45 = __CFADD__(v225++, 1);
              if (v45)
                goto LABEL_661;
            }
            if (v231 < 0)
              goto LABEL_461;
LABEL_413:
            v201 = v337;
            *((_QWORD *)v216 + 2) = v338;
            *(_OWORD *)v216 = v201;
LABEL_414:
            v200 += 24;
            v199 = v197 + 1;
            v196 = (const void **)(a1 + 24 * (v197 + 1));
            --v198;
            if (v196 == (const void **)a2)
              return;
          }
        }
        if (!a3)
        {
          if (v8 == a2)
            return;
          v324 = v9;
          v144 = (v10 - 2) >> 1;
          v145 = v144;
          v146 = v8;
          while (1)
          {
            v149 = v145;
            if (v144 < v145)
              goto LABEL_314;
            v332 = v145;
            v150 = (2 * v145) | 1;
            v151 = v146 + 24 * v150;
            v152 = 2 * v145 + 2;
            if (v152 >= (uint64_t)v10)
              goto LABEL_336;
            if (*(char *)(v151 + 23) < 0)
            {
              v153 = *(_QWORD *)(v151 + 8);
              if ((v153 & 0x8000000000000000) != 0)
                goto LABEL_661;
              v154 = *(const void **)v151;
              if (v153 && v154 == 0)
                goto LABEL_661;
            }
            else
            {
              v153 = *(unsigned __int8 *)(v151 + 23);
              v154 = (const void *)(v146 + 24 * v150);
            }
            i = v151 + 24;
            if (*(char *)(v151 + 47) < 0)
            {
              v156 = *(_QWORD *)(v151 + 32);
              if ((v156 & 0x8000000000000000) != 0)
                goto LABEL_661;
              v157 = *(const void **)i;
              if (v156 && v157 == 0)
                goto LABEL_661;
            }
            else
            {
              v156 = *(unsigned __int8 *)(v151 + 47);
              v157 = (const void *)(v151 + 24);
            }
            v159 = v156 >= v153 ? v153 : v156;
            v160 = memcmp(v154, v157, v159);
            if (v160)
              break;
            if (v153 >= v156)
              goto LABEL_336;
LABEL_337:
            if (*(char *)(i + 23) < 0)
            {
              v161 = *(_QWORD *)(i + 8);
              v163 = a1;
              v164 = v332;
              if ((v161 & 0x8000000000000000) != 0)
                goto LABEL_661;
              v162 = *(const void **)i;
              if (v161 && v162 == 0)
                goto LABEL_661;
            }
            else
            {
              v161 = *(unsigned __int8 *)(i + 23);
              v162 = (const void *)i;
              v163 = a1;
              v164 = v332;
            }
            v166 = v163 + 24 * v164;
            if (*(char *)(v166 + 23) < 0)
            {
              v167 = *(_QWORD *)(v166 + 8);
              if ((v167 & 0x8000000000000000) != 0)
                goto LABEL_661;
              v168 = *(const void **)v166;
              if (v167 && v168 == 0)
                goto LABEL_661;
            }
            else
            {
              v167 = *(unsigned __int8 *)(v166 + 23);
              v168 = (const void *)(v163 + 24 * v164);
            }
            if (v167 >= v161)
              v170 = v161;
            else
              v170 = v167;
            v171 = memcmp(v162, v168, v170);
            if (v171)
            {
              v146 = a1;
              v149 = v332;
              if ((v171 & 0x80000000) == 0)
                goto LABEL_358;
            }
            else
            {
              v146 = a1;
              v149 = v332;
              if (v161 >= v167)
              {
LABEL_358:
                v172 = *(_OWORD *)v166;
                v338 = *(_QWORD *)(v166 + 16);
                v337 = v172;
                *(_QWORD *)(v166 + 8) = 0;
                *(_QWORD *)(v166 + 16) = 0;
                *(_QWORD *)v166 = 0;
                v173 = *(_OWORD *)i;
                *(_QWORD *)(v166 + 16) = *(_QWORD *)(i + 16);
                *(_OWORD *)v166 = v173;
                *(_BYTE *)(i + 23) = 0;
                *(_BYTE *)i = 0;
                if (v144 < v152)
                {
LABEL_312:
                  v147 = i;
LABEL_313:
                  v148 = v337;
                  *(_QWORD *)(v147 + 16) = v338;
                  *(_OWORD *)v147 = v148;
                  v146 = a1;
                  v149 = v332;
                  goto LABEL_314;
                }
                v174 = HIBYTE(v338);
                v334 = *((_QWORD *)&v337 + 1);
                __s2a = (__int128 *)v337;
                v331 = HIBYTE(v338);
                if (*((_QWORD *)&v337 + 1))
                  v175 = (_QWORD)v337 == 0;
                else
                  v175 = 0;
                v176 = !v175;
                v326 = v176;
                while (2)
                {
                  v178 = (2 * v152) | 1;
                  v179 = a1 + 24 * v178;
                  v152 = 2 * v152 + 2;
                  if (v152 < (uint64_t)v10)
                  {
                    if (*(char *)(v179 + 23) < 0)
                    {
                      v180 = *(_QWORD *)(v179 + 8);
                      if ((v180 & 0x8000000000000000) != 0)
                        goto LABEL_661;
                      v181 = *(const void **)v179;
                      if (v180 && v181 == 0)
                        goto LABEL_661;
                    }
                    else
                    {
                      v180 = *(unsigned __int8 *)(v179 + 23);
                      v181 = (const void *)(a1 + 24 * v178);
                    }
                    v183 = v144;
                    v147 = v179 + 24;
                    if (*(char *)(v179 + 47) < 0)
                    {
                      v184 = *(_QWORD *)(v179 + 32);
                      if ((v184 & 0x8000000000000000) != 0)
                        goto LABEL_661;
                      v185 = *(const void **)v147;
                      if (v184 && v185 == 0)
                        goto LABEL_661;
                    }
                    else
                    {
                      v184 = *(unsigned __int8 *)(v179 + 47);
                      v185 = (const void *)(v179 + 24);
                    }
                    if (v184 >= v180)
                      v187 = v180;
                    else
                      v187 = v184;
                    v188 = memcmp(v181, v185, v187);
                    if (v188)
                    {
                      v144 = v183;
                      v174 = v331;
                      if ((v188 & 0x80000000) == 0)
                        break;
LABEL_389:
                      if (*(char *)(v147 + 23) < 0)
                      {
                        v189 = *(_QWORD *)(v147 + 8);
                        if ((v189 & 0x8000000000000000) != 0)
                          goto LABEL_661;
                        v190 = *(const void **)v147;
                        if (v189 && v190 == 0)
                          goto LABEL_661;
                      }
                      else
                      {
                        v189 = *(unsigned __int8 *)(v147 + 23);
                        v190 = (const void *)v147;
                      }
                      v192 = v334;
                      if ((v174 & 0x80) != 0)
                      {
                        if ((v334 & 0x8000000000000000) != 0)
                          goto LABEL_661;
                        v193 = __s2a;
                        if ((v326 & 1) == 0)
                          goto LABEL_661;
                      }
                      else
                      {
                        v193 = &v337;
                        v192 = v174;
                      }
                      if (v192 >= v189)
                        v194 = v189;
                      else
                        v194 = v192;
                      v195 = memcmp(v190, v193, v194);
                      if (v195)
                      {
                        if (v195 < 0)
                          goto LABEL_312;
                      }
                      else if (v189 < v192)
                      {
                        goto LABEL_312;
                      }
                      v177 = *(_OWORD *)v147;
                      *(_QWORD *)(i + 16) = *(_QWORD *)(v147 + 16);
                      *(_OWORD *)i = v177;
                      *(_BYTE *)(v147 + 23) = 0;
                      *(_BYTE *)v147 = 0;
                      i = v147;
                      if (v144 < v152)
                        goto LABEL_313;
                      continue;
                    }
                    v45 = v180 >= v184;
                    v144 = v183;
                    v174 = v331;
                    if (!v45)
                      goto LABEL_389;
                  }
                  break;
                }
                v147 = a1 + 24 * v178;
                v152 = v178;
                goto LABEL_389;
              }
            }
LABEL_314:
            v145 = v149 - 1;
            if (!v149)
            {
              v232 = v324 / 0x18;
              __s2b = (void **)(v146 + 8);
              while (1)
              {
                v235 = 0;
                v143 = a2;
                v236 = a1;
                v237 = *(void **)a1;
                __s1[0] = *__s2b;
                *(void **)((char *)__s1 + 7) = *(void **)((char *)__s2b + 7);
                v335 = *(_BYTE *)(a1 + 23);
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v238 = v232 - 2;
                v332 = (uint64_t)v237;
                if (v232 < 2)
                  v238 = v232 - 1;
                a2 = v238 >> 1;
                do
                {
                  v240 = v236 + 24 * v235 + 24;
                  v241 = (2 * v235) | 1;
                  v235 = 2 * v235 + 2;
                  if (v235 >= v232)
                    goto LABEL_502;
                  if (*(char *)(v240 + 23) < 0)
                  {
                    i = *(_QWORD *)(v240 + 8);
                    if ((i & 0x8000000000000000) != 0)
                      goto LABEL_661;
                    v242 = *(const void **)v240;
                    if (i && v242 == 0)
                      goto LABEL_661;
                  }
                  else
                  {
                    i = *(unsigned __int8 *)(v240 + 23);
                    v242 = (const void *)v240;
                  }
                  v244 = v240 + 24;
                  if (*(char *)(v240 + 47) < 0)
                  {
                    v245 = *(_QWORD *)(v240 + 32);
                    if ((v245 & 0x8000000000000000) != 0)
                      goto LABEL_661;
                    v246 = *(const void **)v244;
                    if (v245 && v246 == 0)
                      goto LABEL_661;
                  }
                  else
                  {
                    v245 = *(unsigned __int8 *)(v240 + 47);
                    v246 = (const void *)(v240 + 24);
                  }
                  if (v245 >= i)
                    v248 = i;
                  else
                    v248 = v245;
                  v249 = memcmp(v242, v246, v248);
                  if (v249)
                  {
                    if (v249 < 0)
                      goto LABEL_503;
LABEL_502:
                    v244 = v240;
                    v235 = v241;
                    goto LABEL_503;
                  }
                  if (i >= v245)
                    goto LABEL_502;
LABEL_503:
                  if (*(char *)(v236 + 23) < 0)
                    operator delete(*(void **)v236);
                  v239 = *(_OWORD *)v244;
                  *(_QWORD *)(v236 + 16) = *(_QWORD *)(v244 + 16);
                  *(_OWORD *)v236 = v239;
                  *(_BYTE *)(v244 + 23) = 0;
                  *(_BYTE *)v244 = 0;
                  v236 = v244;
                }
                while (v235 <= (uint64_t)a2);
                a2 = v143 - 24;
                if (v244 == v143 - 24)
                {
                  *(_QWORD *)v244 = v332;
                  v233 = *(uint64_t *)((char *)__s1 + 7);
                  *(void **)(v244 + 8) = __s1[0];
                  *(_QWORD *)(v244 + 15) = v233;
                  *(_BYTE *)(v244 + 23) = v335;
                }
                else
                {
                  v250 = *(_OWORD *)a2;
                  *(_QWORD *)(v244 + 16) = *(_QWORD *)(v143 - 8);
                  *(_OWORD *)v244 = v250;
                  *(_QWORD *)(v143 - 24) = v332;
                  v251 = __s1[0];
                  *(void **)(v143 - 9) = *(void **)((char *)__s1 + 7);
                  *(_QWORD *)(v143 - 16) = v251;
                  *(_BYTE *)(v143 - 1) = v335;
                  v252 = v244 - a1 + 24;
                  if (v252 >= 25)
                  {
                    v253 = v252 / 0x18uLL - 2;
                    v254 = v253 >> 1;
                    v255 = a1 + 24 * (v253 >> 1);
                    if (*(char *)(v255 + 23) < 0)
                    {
                      i = *(_QWORD *)(v255 + 8);
                      if ((i & 0x8000000000000000) != 0)
                        goto LABEL_661;
                      v256 = *(const void **)v255;
                      if (i && v256 == 0)
                        goto LABEL_661;
                    }
                    else
                    {
                      i = *(unsigned __int8 *)(v255 + 23);
                      v256 = (const void *)(a1 + 24 * (v253 >> 1));
                    }
                    if (*(char *)(v244 + 23) < 0)
                    {
                      v258 = *(_QWORD *)(v244 + 8);
                      if ((v258 & 0x8000000000000000) != 0)
                        goto LABEL_661;
                      v259 = *(const void **)v244;
                      if (v258 && v259 == 0)
                        goto LABEL_661;
                    }
                    else
                    {
                      v258 = *(unsigned __int8 *)(v244 + 23);
                      v259 = (const void *)v244;
                    }
                    if (v258 >= i)
                      v261 = i;
                    else
                      v261 = v258;
                    v262 = memcmp(v256, v259, v261);
                    if (v262)
                    {
                      if (v262 < 0)
                      {
LABEL_530:
                        v263 = *(_OWORD *)v244;
                        v338 = *(_QWORD *)(v244 + 16);
                        v337 = v263;
                        *(_QWORD *)(v244 + 8) = 0;
                        *(_QWORD *)(v244 + 16) = 0;
                        *(_QWORD *)v244 = 0;
                        v264 = HIBYTE(v338);
                        v142 = *((_QWORD *)&v337 + 1);
                        i = v337;
                        if (*((_QWORD *)&v337 + 1))
                          v265 = (_QWORD)v337 == 0;
                        else
                          v265 = 0;
                        v266 = !v265;
                        if ((v338 & 0x8000000000000000) == 0)
                        {
                          v267 = *(_OWORD *)v255;
                          *(_QWORD *)(v244 + 16) = *(_QWORD *)(v255 + 16);
                          *(_OWORD *)v244 = v267;
                          *(_BYTE *)(v255 + 23) = 0;
                          *(_BYTE *)v255 = 0;
                          if (v253 < 2)
                            goto LABEL_573;
                          i = v264;
                          v268 = a1 + 24 * (v253 >> 1);
                          while (1)
                          {
                            v270 = v254 - 1;
                            v254 = (v254 - 1) >> 1;
                            v255 = a1 + 24 * v254;
                            if (*(char *)(v255 + 23) < 0)
                            {
                              v271 = *(_QWORD *)(v255 + 8);
                              if ((v271 & 0x8000000000000000) != 0)
                                goto LABEL_661;
                              v272 = *(const void **)v255;
                              if (v271 && v272 == 0)
                                goto LABEL_661;
                            }
                            else
                            {
                              v271 = *(unsigned __int8 *)(v255 + 23);
                              v272 = (const void *)(a1 + 24 * v254);
                            }
                            if (i >= v271)
                              v274 = v271;
                            else
                              v274 = i;
                            v275 = memcmp(v272, &v337, v274);
                            if (v275)
                            {
                              if ((v275 & 0x80000000) == 0)
                              {
LABEL_553:
                                v255 = v268;
                                goto LABEL_573;
                              }
                            }
                            else if (v271 >= i)
                            {
                              goto LABEL_553;
                            }
                            v269 = *(_OWORD *)v255;
                            *(_QWORD *)(v268 + 16) = *(_QWORD *)(v255 + 16);
                            *(_OWORD *)v268 = v269;
                            *(_BYTE *)(v255 + 23) = 0;
                            *(_BYTE *)v255 = 0;
                            v268 = a1 + 24 * v254;
                            if (v270 <= 1)
                              goto LABEL_573;
                          }
                        }
                        v276 = *(_OWORD *)v255;
                        *(_QWORD *)(v244 + 16) = *(_QWORD *)(v255 + 16);
                        *(_OWORD *)v244 = v276;
                        *(_BYTE *)(v255 + 23) = 0;
                        *(_BYTE *)v255 = 0;
                        if ((v142 & 0x8000000000000000) == 0 && v266)
                        {
                          if (v253 < 2)
                            goto LABEL_573;
                          v277 = a1 + 24 * (v253 >> 1);
                          while (1)
                          {
                            v279 = v254 - 1;
                            v254 = (v254 - 1) >> 1;
                            v255 = a1 + 24 * v254;
                            if (*(char *)(v255 + 23) < 0)
                            {
                              v280 = *(_QWORD *)(v255 + 8);
                              if ((v280 & 0x8000000000000000) != 0)
                                goto LABEL_661;
                              v281 = *(const void **)v255;
                              if (v280 && v281 == 0)
                                goto LABEL_661;
                            }
                            else
                            {
                              v280 = *(unsigned __int8 *)(v255 + 23);
                              v281 = (const void *)(a1 + 24 * v254);
                            }
                            if (v142 >= v280)
                              v283 = v280;
                            else
                              v283 = v142;
                            v284 = memcmp(v281, (const void *)i, v283);
                            if (v284)
                            {
                              if ((v284 & 0x80000000) == 0)
                              {
LABEL_572:
                                v255 = v277;
                                goto LABEL_573;
                              }
                            }
                            else if (v280 >= v142)
                            {
                              goto LABEL_572;
                            }
                            v278 = *(_OWORD *)v255;
                            *(_QWORD *)(v277 + 16) = *(_QWORD *)(v255 + 16);
                            *(_OWORD *)v277 = v278;
                            *(_BYTE *)(v255 + 23) = 0;
                            *(_BYTE *)v255 = 0;
                            v277 = a1 + 24 * v254;
                            if (v279 < 2)
                              goto LABEL_573;
                          }
                        }
                        if (v253 >= 2)
                        {
                          v286 = a1;
                          v287 = a1 + 24 * ((v254 - 1) >> 1);
                          if ((*(char *)(v287 + 23) & 0x80000000) == 0
                            || (*(_QWORD *)(v287 + 8) & 0x8000000000000000) != 0)
                          {
                            goto LABEL_661;
                          }
                          __break(1u);
LABEL_578:
                          v288 = (char *)v286;
                          while (1)
                          {
LABEL_579:
                            v289 = v337;
                            *((_QWORD *)v288 + 2) = v338;
                            *(_OWORD *)v288 = v289;
                            do
                            {
                              while (1)
                              {
                                v141 = (const void **)(v143 + 24);
                                v142 += 24;
                                if (v143 + 24 == a2)
                                  return;
LABEL_581:
                                v290 = (char *)v143;
                                v143 = (unint64_t)v141;
                                if (v290[47] < 0)
                                {
                                  i = *((_QWORD *)v290 + 4);
                                  if ((i & 0x8000000000000000) != 0)
                                    goto LABEL_661;
                                  v291 = *v141;
                                  if (i && v291 == 0)
                                    goto LABEL_661;
                                }
                                else
                                {
                                  i = v290[47];
                                  v291 = v141;
                                }
                                if (v290[23] < 0)
                                {
                                  v293 = *((_QWORD *)v290 + 1);
                                  if ((v293 & 0x8000000000000000) != 0)
                                    goto LABEL_661;
                                  v294 = *(char **)v290;
                                  if (v293)
                                  {
                                    if (!v294)
                                      goto LABEL_661;
                                  }
                                }
                                else
                                {
                                  v293 = v290[23];
                                  v294 = v290;
                                }
                                v295 = v293 >= i ? i : v293;
                                v296 = memcmp(v291, v294, v295);
                                if (!v296)
                                  break;
                                if (v296 < 0)
                                  goto LABEL_600;
                              }
                            }
                            while (i >= v293);
LABEL_600:
                            v297 = *(_OWORD *)v143;
                            v338 = *(_QWORD *)(v143 + 16);
                            v337 = v297;
                            v298 = HIBYTE(v338);
                            v299 = *((_QWORD *)&v297 + 1);
                            i = v297;
                            if (*((_QWORD *)&v297 + 1))
                              v300 = (_QWORD)v297 == 0;
                            else
                              v300 = 0;
                            v301 = !v300;
                            if ((v338 & 0x8000000000000000) == 0)
                            {
                              *(_OWORD *)v143 = *(_OWORD *)v290;
                              *(_QWORD *)(v143 + 16) = *((_QWORD *)v290 + 2);
                              v290[23] = 0;
                              *v290 = 0;
                              v286 = a1;
                              v288 = (char *)a1;
                              if (v290 == (char *)a1)
                                continue;
                              v302 = v298;
                              i = v142;
                              while (1)
                              {
                                v303 = (char *)(v286 + i);
                                v304 = v286 + i - 24;
                                if (*(char *)(v286 + i - 1) < 0)
                                {
                                  v305 = *((_QWORD *)v303 - 2);
                                  if ((v305 & 0x8000000000000000) != 0)
                                    goto LABEL_661;
                                  v306 = *(char **)v304;
                                  if (v305 && v306 == 0)
                                    goto LABEL_661;
                                }
                                else
                                {
                                  v305 = *(unsigned __int8 *)(v286 + i - 1);
                                  v306 = (char *)(v286 + i - 24);
                                }
                                if (v305 >= v302)
                                  v308 = v302;
                                else
                                  v308 = v305;
                                v309 = memcmp(&v337, v306, v308);
                                if (v309)
                                {
                                  if ((v309 & 0x80000000) == 0)
                                    goto LABEL_623;
                                }
                                else if (v305 <= v302)
                                {
                                  v288 = (char *)(a1 + i);
                                  goto LABEL_579;
                                }
                                v290 -= 24;
                                *(_OWORD *)v303 = *(_OWORD *)v304;
                                *((_QWORD *)v303 + 2) = *(_QWORD *)(v304 + 16);
                                *(v303 - 1) = 0;
                                *(v303 - 24) = 0;
                                i -= 24;
                                v286 = a1;
                                if (!i)
                                  goto LABEL_578;
                              }
                            }
                            *(_OWORD *)v143 = *(_OWORD *)v290;
                            *(_QWORD *)(v143 + 16) = *((_QWORD *)v290 + 2);
                            v290[23] = 0;
                            *v290 = 0;
                            if ((*((_QWORD *)&v297 + 1) & 0x8000000000000000) != 0 || !v301)
                            {
                              v288 = (char *)a1;
                              if (v290 != (char *)a1)
                                goto LABEL_661;
                            }
                            else
                            {
                              v288 = (char *)a1;
                              if (v290 == (char *)a1)
                                continue;
                              v310 = v142;
                              do
                              {
                                v311 = a1 + v310;
                                v312 = (const void **)(a1 + v310 - 24);
                                if (*(char *)(a1 + v310 - 1) < 0)
                                {
                                  v313 = *(_QWORD *)(v311 - 16);
                                  if ((v313 & 0x8000000000000000) != 0)
                                    goto LABEL_661;
                                  v314 = *v312;
                                  if (v313 && v314 == 0)
                                    goto LABEL_661;
                                }
                                else
                                {
                                  v313 = *(unsigned __int8 *)(a1 + v310 - 1);
                                  v314 = (const void *)(a1 + v310 - 24);
                                }
                                if (v313 >= v299)
                                  v316 = v299;
                                else
                                  v316 = v313;
                                v317 = memcmp((const void *)i, v314, v316);
                                if (v317)
                                {
                                  if ((v317 & 0x80000000) == 0)
                                  {
                                    v288 = (char *)(a1 + v310);
                                    goto LABEL_579;
                                  }
                                }
                                else if (v299 >= v313)
                                {
LABEL_623:
                                  v288 = v290;
                                  goto LABEL_579;
                                }
                                v290 -= 24;
                                *(_OWORD *)v311 = *(_OWORD *)v312;
                                *(_QWORD *)(v311 + 16) = *(_QWORD *)(a1 + v310 - 8);
                                *(_BYTE *)(v311 - 1) = 0;
                                *(_BYTE *)(v311 - 24) = 0;
                                v310 -= 24;
                              }
                              while (v310);
                              v288 = (char *)a1;
                            }
                          }
                        }
LABEL_573:
                        v285 = v337;
                        *(_QWORD *)(v255 + 16) = v338;
                        *(_OWORD *)v255 = v285;
                      }
                    }
                    else if (i < v258)
                    {
                      goto LABEL_530;
                    }
                  }
                }
                if (v232-- <= 2)
                  return;
              }
            }
          }
          if (v160 < 0)
            goto LABEL_337;
LABEL_336:
          i = v151;
          v152 = v150;
          goto LABEL_337;
        }
        v11 = a2;
        v12 = v10 >> 1;
        v13 = v8 + 24 * (v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__int128 *)v13, (const void **)v8, (__int128 *)v332);
          a2 = v11;
          v330 = a3 - 1;
          if ((i & 1) != 0)
            goto LABEL_28;
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__int128 *)v8, (const void **)v13, (__int128 *)v332);
          v14 = 24 * v12;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__int128 *)(v8 + 24), (const void **)(v14 + v8 - 24), v325);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__int128 *)(v8 + 48), (const void **)(v8 + 24 + v14), v323);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__int128 *)(v14 + v8 - 24), (const void **)v13, (__int128 *)(v8 + 24 + v14));
          v15 = *(_OWORD *)v8;
          v338 = *(_QWORD *)(v8 + 16);
          v337 = v15;
          v16 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)v8 = *(_OWORD *)v13;
          *(_QWORD *)(v8 + 16) = v16;
          v17 = v337;
          *(_QWORD *)(v13 + 16) = v338;
          *(_OWORD *)v13 = v17;
          a2 = v11;
          v330 = a3 - 1;
          if ((i & 1) != 0)
            goto LABEL_28;
        }
        v18 = (_QWORD *)(v8 - 24);
        if (*(char *)(v8 - 1) < 0)
        {
          i = *(_QWORD *)(v8 - 16);
          if ((i & 0x8000000000000000) != 0)
            goto LABEL_661;
          v18 = (_QWORD *)*v18;
          if (i)
          {
            if (!v18)
              goto LABEL_661;
          }
        }
        else
        {
          i = *(unsigned __int8 *)(v8 - 1);
        }
        if (*(char *)(v8 + 23) < 0)
        {
          v19 = *(_QWORD *)(v8 + 8);
          if ((v19 & 0x8000000000000000) != 0)
            goto LABEL_661;
          v20 = *(const void **)v8;
          if (v19)
          {
            if (!v20)
              goto LABEL_661;
          }
        }
        else
        {
          v19 = *(unsigned __int8 *)(v8 + 23);
          v20 = (const void *)v8;
        }
        if (v19 >= i)
          v21 = i;
        else
          v21 = v19;
        v22 = memcmp(v18, v20, v21);
        if (v22)
        {
          if (v22 < 0)
            goto LABEL_28;
LABEL_159:
          v79 = *(_OWORD *)v8;
          v340 = *(_QWORD *)(v8 + 16);
          *(_OWORD *)__s1 = v79;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)v8 = 0;
          i = HIBYTE(v340);
          if (SHIBYTE(v340) < 0)
          {
            v81 = __s1[1];
            if (((unint64_t)__s1[1] & 0x8000000000000000) != 0)
              goto LABEL_661;
            v80 = (void **)__s1[0];
            if (__s1[1])
            {
              if (!__s1[0])
                goto LABEL_661;
            }
          }
          else
          {
            v80 = __s1;
            v81 = (void *)HIBYTE(v340);
          }
          if (*(char *)(a2 - 1) < 0)
          {
            v82 = *(_QWORD *)(a2 - 16);
            if ((v82 & 0x8000000000000000) != 0)
              goto LABEL_661;
            v83 = *(const void **)v332;
            if (v82)
            {
              if (!v83)
                goto LABEL_661;
            }
          }
          else
          {
            v82 = *(unsigned __int8 *)(a2 - 1);
            v83 = (const void *)v332;
          }
          if (v82 >= (unint64_t)v81)
            v84 = (size_t)v81;
          else
            v84 = v82;
          v85 = memcmp(v80, v83, v84);
          if (v85)
          {
            if (v85 < 0)
              goto LABEL_199;
          }
          else if ((unint64_t)v81 < v82)
          {
LABEL_199:
            v7 = v8 + 24;
            if (v8 + 24 == a2)
              goto LABEL_661;
            v97 = (void **)__s1[0];
            v96 = (unint64_t)__s1[1];
            if (__s1[1])
              v98 = __s1[0] == 0;
            else
              v98 = 0;
            v99 = !v98;
            while (1)
            {
              if ((i & 0x80) != 0)
              {
                if ((v96 & 0x8000000000000000) != 0)
                  goto LABEL_661;
                v100 = v97;
                v101 = (const void **)v96;
                if ((v99 & 1) == 0)
                  goto LABEL_661;
              }
              else
              {
                v100 = __s1;
                v101 = (const void **)i;
              }
              if (*(char *)(v7 + 23) < 0)
              {
                v102 = *(_QWORD *)(v7 + 8);
                if ((v102 & 0x8000000000000000) != 0)
                  goto LABEL_661;
                v103 = *(const void **)v7;
                if (v102)
                {
                  if (!v103)
                    goto LABEL_661;
                }
              }
              else
              {
                v102 = *(unsigned __int8 *)(v7 + 23);
                v103 = (const void *)v7;
              }
              if (v102 >= (unint64_t)v101)
                v104 = (size_t)v101;
              else
                v104 = v102;
              v105 = memcmp(v100, v103, v104);
              if (v105)
              {
                if (v105 < 0)
                  goto LABEL_222;
              }
              else if ((unint64_t)v101 < v102)
              {
                goto LABEL_222;
              }
              v7 += 24;
              if (v7 == a2)
                goto LABEL_661;
            }
          }
          v7 = v8 + 24;
          if (v8 + 24 < a2)
          {
            v87 = (void **)__s1[0];
            v86 = (unint64_t)__s1[1];
            if (__s1[1])
              v88 = __s1[0] == 0;
            else
              v88 = 0;
            v89 = !v88;
            do
            {
              if ((i & 0x80) != 0)
              {
                if ((v86 & 0x8000000000000000) != 0)
                  goto LABEL_661;
                v90 = v87;
                v91 = (const void **)v86;
                if ((v89 & 1) == 0)
                  goto LABEL_661;
              }
              else
              {
                v90 = __s1;
                v91 = (const void **)i;
              }
              if (*(char *)(v7 + 23) < 0)
              {
                v92 = *(_QWORD *)(v7 + 8);
                if ((v92 & 0x8000000000000000) != 0)
                  goto LABEL_661;
                v93 = *(const void **)v7;
                if (v92)
                {
                  if (!v93)
                    goto LABEL_661;
                }
              }
              else
              {
                v92 = *(unsigned __int8 *)(v7 + 23);
                v93 = (const void *)v7;
              }
              if (v92 >= (unint64_t)v91)
                v94 = (size_t)v91;
              else
                v94 = v92;
              v95 = memcmp(v90, v93, v94);
              if (v95)
              {
                if (v95 < 0)
                  break;
              }
              else if ((unint64_t)v91 < v92)
              {
                break;
              }
              v7 += 24;
            }
            while (v7 < a2);
          }
LABEL_222:
          v106 = a2;
          if (v7 < a2)
          {
            if (a2 == a1)
              goto LABEL_661;
            v108 = (void **)__s1[0];
            v107 = (unint64_t)__s1[1];
            if (__s1[1])
              v109 = __s1[0] == 0;
            else
              v109 = 0;
            v110 = !v109;
            v106 = v332;
            while (1)
            {
              if ((i & 0x80) != 0)
              {
                if ((v107 & 0x8000000000000000) != 0)
                  goto LABEL_661;
                v111 = v108;
                v112 = (const void **)v107;
                if ((v110 & 1) == 0)
                  goto LABEL_661;
              }
              else
              {
                v111 = __s1;
                v112 = (const void **)i;
              }
              if (*(char *)(v106 + 23) < 0)
              {
                v113 = *(_QWORD *)(v106 + 8);
                if ((v113 & 0x8000000000000000) != 0)
                  goto LABEL_661;
                v114 = *(const void **)v106;
                if (v113)
                {
                  if (!v114)
                    goto LABEL_661;
                }
              }
              else
              {
                v113 = *(unsigned __int8 *)(v106 + 23);
                v114 = (const void *)v106;
              }
              if (v113 >= (unint64_t)v112)
                v115 = (size_t)v112;
              else
                v115 = v113;
              v116 = memcmp(v111, v114, v115);
              if (v116)
              {
                if ((v116 & 0x80000000) == 0)
                  break;
              }
              else if ((unint64_t)v112 >= v113)
              {
                break;
              }
              v27 = v106 == a1;
              v106 -= 24;
              if (v27)
                goto LABEL_661;
            }
          }
LABEL_289:
          if (v7 < v106)
          {
            v117 = *(_OWORD *)v7;
            v338 = *(_QWORD *)(v7 + 16);
            v337 = v117;
            v118 = *(_OWORD *)v106;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v106 + 16);
            *(_OWORD *)v7 = v118;
            v7 += 24;
            v119 = v337;
            *(_QWORD *)(v106 + 16) = v338;
            *(_OWORD *)v106 = v119;
            if (v7 == a2)
              goto LABEL_661;
            i = HIBYTE(v340);
            v121 = (void **)__s1[0];
            v120 = (unint64_t)__s1[1];
            if (__s1[1])
              v122 = __s1[0] == 0;
            else
              v122 = 0;
            v123 = !v122;
            while (1)
            {
              if ((i & 0x80) != 0)
              {
                if ((v120 & 0x8000000000000000) != 0)
                  goto LABEL_661;
                v124 = v121;
                v125 = (const void **)v120;
                if ((v123 & 1) == 0)
                  goto LABEL_661;
              }
              else
              {
                v124 = __s1;
                v125 = (const void **)i;
              }
              if (*(char *)(v7 + 23) < 0)
              {
                v126 = *(_QWORD *)(v7 + 8);
                if ((v126 & 0x8000000000000000) != 0)
                  goto LABEL_661;
                v127 = *(const void **)v7;
                if (v126)
                {
                  if (!v127)
                    goto LABEL_661;
                }
              }
              else
              {
                v126 = *(unsigned __int8 *)(v7 + 23);
                v127 = (const void *)v7;
              }
              if (v126 >= (unint64_t)v125)
                v128 = (size_t)v125;
              else
                v128 = v126;
              v129 = memcmp(v124, v127, v128);
              if (v129)
              {
                if (v129 < 0)
                {
LABEL_271:
                  if (v106 == a1)
                    goto LABEL_661;
                  v106 -= 24;
                  while (1)
                  {
                    if ((i & 0x80) != 0)
                    {
                      if ((v120 & 0x8000000000000000) != 0)
                        goto LABEL_661;
                      v130 = v121;
                      v131 = (const void **)v120;
                      if ((v123 & 1) == 0)
                        goto LABEL_661;
                    }
                    else
                    {
                      v130 = __s1;
                      v131 = (const void **)i;
                    }
                    if (*(char *)(v106 + 23) < 0)
                    {
                      v132 = *(_QWORD *)(v106 + 8);
                      if ((v132 & 0x8000000000000000) != 0)
                        goto LABEL_661;
                      v133 = *(const void **)v106;
                      if (v132)
                      {
                        if (!v133)
                          goto LABEL_661;
                      }
                    }
                    else
                    {
                      v132 = *(unsigned __int8 *)(v106 + 23);
                      v133 = (const void *)v106;
                    }
                    if (v132 >= (unint64_t)v131)
                      v134 = (size_t)v131;
                    else
                      v134 = v132;
                    v135 = memcmp(v130, v133, v134);
                    if (v135)
                    {
                      if ((v135 & 0x80000000) == 0)
                        goto LABEL_289;
                    }
                    else if ((unint64_t)v131 >= v132)
                    {
                      goto LABEL_289;
                    }
                    v27 = v106 == a1;
                    v106 -= 24;
                    if (v27)
                      goto LABEL_661;
                  }
                }
              }
              else if ((unint64_t)v125 < v126)
              {
                goto LABEL_271;
              }
              v7 += 24;
              if (v7 == a2)
                goto LABEL_661;
            }
          }
          v136 = (__int128 *)(v7 - 24);
          if (v7 - 24 == a1)
          {
            a3 = v330;
            if (*(char *)(v7 - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            a3 = v330;
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v137 = *v136;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
            *(_OWORD *)a1 = v137;
            *(_BYTE *)(v7 - 1) = 0;
            *(_BYTE *)(v7 - 24) = 0;
          }
          v138 = *(_OWORD *)__s1;
          *(_QWORD *)(v7 - 8) = v340;
          *v136 = v138;
          i = 0;
          continue;
        }
        if (i >= v19)
          goto LABEL_159;
LABEL_28:
        v23 = *(_OWORD *)v8;
        v340 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)__s1 = v23;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)v8 = 0;
        if (v8 + 24 == a2)
          goto LABEL_661;
        i = 0;
        v24 = HIBYTE(v340);
        v25 = (void **)__s1[0];
        v26 = (unint64_t)__s1[1];
        if (__s1[1])
          v27 = __s1[0] == 0;
        else
          v27 = 0;
        v28 = !v27;
        while (2)
        {
          v29 = (char *)(v8 + i);
          if (*(char *)(v8 + i + 47) < 0)
          {
            v31 = *((_QWORD *)v29 + 4);
            if ((v31 & 0x8000000000000000) != 0)
              goto LABEL_661;
            v30 = (const void *)*((_QWORD *)v29 + 3);
            if (v31 && v30 == 0)
              goto LABEL_661;
          }
          else
          {
            v30 = v29 + 24;
            v31 = *(unsigned __int8 *)(v8 + i + 47);
          }
          if ((v24 & 0x80) != 0)
          {
            if ((v26 & 0x8000000000000000) != 0)
              goto LABEL_661;
            v33 = v25;
            v34 = v26;
            if ((v28 & 1) == 0)
              goto LABEL_661;
          }
          else
          {
            v33 = __s1;
            v34 = v24;
          }
          if (v34 >= v31)
            v35 = v31;
          else
            v35 = v34;
          v36 = memcmp(v30, v33, v35);
          if (!v36)
          {
            if (v31 >= v34)
              goto LABEL_53;
LABEL_36:
            i += 24;
            v8 = a1;
            if (a1 + i + 24 == a2)
              goto LABEL_661;
            continue;
          }
          break;
        }
        if (v36 < 0)
          goto LABEL_36;
LABEL_53:
        v37 = a1 + i + 24;
        v333 = v37;
        if (!i)
        {
          i = a2;
          if (v37 < a2)
          {
            for (i = v332; ; i -= 24)
            {
              if (*(char *)(i + 23) < 0)
              {
                v46 = *(_QWORD *)(i + 8);
                if ((v46 & 0x8000000000000000) != 0)
                  goto LABEL_661;
                v47 = *(const void **)i;
                if (v46 && v47 == 0)
                  goto LABEL_661;
              }
              else
              {
                v46 = *(unsigned __int8 *)(i + 23);
                v47 = (const void *)i;
              }
              if ((v24 & 0x80) != 0)
              {
                if ((v26 & 0x8000000000000000) != 0)
                  goto LABEL_661;
                v49 = v25;
                v50 = v26;
                if ((v28 & 1) == 0)
                  goto LABEL_661;
              }
              else
              {
                v49 = __s1;
                v50 = v24;
              }
              if (v50 >= v46)
                v51 = v46;
              else
                v51 = v50;
              v52 = memcmp(v47, v49, v51);
              if (v52)
              {
                v37 = v333;
                if (v52 < 0 || v333 >= i)
                  break;
              }
              else
              {
                v37 = v333;
                v45 = v46 < v50 || v333 >= i;
                if (v45)
                  break;
              }
            }
          }
LABEL_99:
          v7 = v37;
          if (v37 < i)
          {
            v53 = (char *)i;
            do
            {
              v54 = *(_OWORD *)v7;
              v338 = *(_QWORD *)(v7 + 16);
              v337 = v54;
              v55 = *(_OWORD *)v53;
              *(_QWORD *)(v7 + 16) = *((_QWORD *)v53 + 2);
              *(_OWORD *)v7 = v55;
              v7 += 24;
              v56 = v337;
              *((_QWORD *)v53 + 2) = v338;
              *(_OWORD *)v53 = v56;
              if (v7 == a2)
                goto LABEL_661;
              v57 = HIBYTE(v340);
              v58 = (void **)__s1[0];
              a2 = (unint64_t)__s1[1];
              if (__s1[1])
                v59 = __s1[0] == 0;
              else
                v59 = 0;
              v60 = !v59;
              while (1)
              {
                if (*(char *)(v7 + 23) < 0)
                {
                  v61 = *(_QWORD *)(v7 + 8);
                  if ((v61 & 0x8000000000000000) != 0)
                    goto LABEL_661;
                  v62 = *(const void **)v7;
                  if (v61 && v62 == 0)
                    goto LABEL_661;
                }
                else
                {
                  v61 = *(unsigned __int8 *)(v7 + 23);
                  v62 = (const void *)v7;
                }
                if ((v57 & 0x80) != 0)
                {
                  if ((a2 & 0x8000000000000000) != 0)
                    goto LABEL_661;
                  v64 = v58;
                  v65 = a2;
                  if ((v60 & 1) == 0)
                    goto LABEL_661;
                }
                else
                {
                  v64 = __s1;
                  v65 = v57;
                }
                if (v65 >= v61)
                  v66 = v61;
                else
                  v66 = v65;
                v67 = memcmp(v62, v64, v66);
                if (!v67)
                {
                  if (v61 >= v65)
                    break;
                  goto LABEL_110;
                }
                if ((v67 & 0x80000000) == 0)
                  break;
LABEL_110:
                v7 += 24;
                if (v7 == v11)
                  goto LABEL_661;
              }
              if (v53 == (char *)a1)
                goto LABEL_661;
              v53 -= 24;
              while (2)
              {
                if (v53[23] < 0)
                {
                  v68 = *((_QWORD *)v53 + 1);
                  if ((v68 & 0x8000000000000000) != 0)
                    goto LABEL_661;
                  v69 = *(char **)v53;
                  if (v68 && v69 == 0)
                    goto LABEL_661;
                }
                else
                {
                  v68 = v53[23];
                  v69 = v53;
                }
                if ((v57 & 0x80) != 0)
                {
                  if ((a2 & 0x8000000000000000) != 0)
                    goto LABEL_661;
                  v71 = v58;
                  v72 = a2;
                  if ((v60 & 1) == 0)
                    goto LABEL_661;
                }
                else
                {
                  v71 = __s1;
                  v72 = v57;
                }
                if (v72 >= v68)
                  v73 = v68;
                else
                  v73 = v72;
                v74 = memcmp(v69, v71, v73);
                if (!v74)
                {
                  if (v68 < v72)
                    goto LABEL_101;
LABEL_130:
                  v27 = v53 == (char *)a1;
                  v53 -= 24;
                  if (v27)
                    goto LABEL_661;
                  continue;
                }
                break;
              }
              if ((v74 & 0x80000000) == 0)
                goto LABEL_130;
LABEL_101:
              a2 = v11;
            }
            while (v7 < (unint64_t)v53);
          }
          v75 = (__int128 *)(v7 - 24);
          if (v7 - 24 == a1)
          {
            a3 = v330;
            if (*(char *)(v7 - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            a3 = v330;
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v76 = *v75;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
            *(_OWORD *)a1 = v76;
            *(_BYTE *)(v7 - 1) = 0;
            *(_BYTE *)(v7 - 24) = 0;
          }
          v77 = *(_OWORD *)__s1;
          *(_QWORD *)(v7 - 8) = v340;
          *v75 = v77;
          v45 = v333 >= i;
          i = __s2;
          if (!v45)
            goto LABEL_158;
          v78 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v7 - 24);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v7, a2))
          {
            if ((v78 & 1) != 0)
              goto LABEL_4;
LABEL_158:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v7 - 24, a3, __s2 & 1);
            i = 0;
            continue;
          }
          a2 = v7 - 24;
          if ((v78 & 1) != 0)
            return;
          goto LABEL_2;
        }
        i = v332;
        if (a2 != a1)
        {
          do
          {
            if (*(char *)(i + 23) < 0)
            {
              v38 = *(_QWORD *)(i + 8);
              if ((v38 & 0x8000000000000000) != 0)
                break;
              v39 = *(const void **)i;
              if (v38 && v39 == 0)
                break;
            }
            else
            {
              v38 = *(unsigned __int8 *)(i + 23);
              v39 = (const void *)i;
            }
            if ((v24 & 0x80) != 0)
            {
              if ((v26 & 0x8000000000000000) != 0)
                break;
              v41 = v25;
              v42 = v26;
              if ((v28 & 1) == 0)
                break;
            }
            else
            {
              v41 = __s1;
              v42 = v24;
            }
            if (v42 >= v38)
              v43 = v38;
            else
              v43 = v42;
            v44 = memcmp(v39, v41, v43);
            if (v44)
            {
              if (v44 < 0)
              {
LABEL_74:
                v37 = v333;
                goto LABEL_99;
              }
            }
            else if (v38 < v42)
            {
              goto LABEL_74;
            }
            v27 = i == a1;
            i -= 24;
          }
          while (!v27);
        }
LABEL_661:
        __break(1u);
LABEL_662:
        if (a2 < i)
        {
LABEL_663:
          v320 = *(_OWORD *)a1;
          v338 = *(_QWORD *)(a1 + 16);
          v337 = v320;
          v321 = *(_OWORD *)v332;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v332 + 16);
          *(_OWORD *)a1 = v321;
          v322 = v337;
          *(_QWORD *)(v332 + 16) = v338;
          *(_OWORD *)v332 = v322;
        }
        return;
    }
  }
}

const void *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__int128 *a1, const void **a2, __int128 *a3)
{
  size_t v6;
  const void *result;
  size_t v8;
  size_t v10;
  const void *v11;
  size_t v12;
  size_t v13;
  size_t v14;
  const void *v15;
  size_t v16;
  const void *v17;
  __int128 v18;
  const void *v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  __int128 v24;
  const void *v25;
  size_t v26;
  const void *v27;
  __int128 v28;
  uint64_t v29;
  size_t v30;
  const void *v31;
  size_t v32;
  const void *v33;
  size_t v34;
  size_t v35;
  const void *v36;
  __int128 v37;
  const void *v38;
  const void *v39;

  v6 = *((unsigned __int8 *)a2 + 23);
  result = a2;
  v8 = v6;
  if (*((char *)a2 + 23) < 0)
  {
    v8 = (size_t)a2[1];
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_87;
    result = *a2;
    if (v8 && result == 0)
      goto LABEL_87;
  }
  if (*((char *)a1 + 23) < 0)
  {
    v10 = *((_QWORD *)a1 + 1);
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_87;
    v11 = *(const void **)a1;
    if (v10)
    {
      if (!v11)
        goto LABEL_87;
    }
  }
  else
  {
    v10 = *((unsigned __int8 *)a1 + 23);
    v11 = a1;
  }
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  result = (const void *)memcmp(result, v11, v12);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_17;
LABEL_20:
    if (*((char *)a3 + 23) < 0)
    {
      v14 = *((_QWORD *)a3 + 1);
      if ((v14 & 0x8000000000000000) != 0)
        goto LABEL_87;
      result = *(const void **)a3;
      if (v14)
      {
        if (!result)
          goto LABEL_87;
      }
    }
    else
    {
      v14 = *((unsigned __int8 *)a3 + 23);
      result = a3;
    }
    v21 = a2;
    if ((v6 & 0x80) != 0)
    {
      v6 = (size_t)a2[1];
      if ((v6 & 0x8000000000000000) != 0)
        goto LABEL_87;
      v21 = *a2;
      if (v6)
      {
        if (!v21)
          goto LABEL_87;
      }
    }
    if (v6 >= v14)
      v22 = v14;
    else
      v22 = v6;
    result = (const void *)memcmp(result, v21, v22);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
LABEL_50:
        v23 = (const void *)*((_QWORD *)a1 + 2);
        v24 = *a1;
        v25 = a2[2];
        *a1 = *(_OWORD *)a2;
        *((_QWORD *)a1 + 2) = v25;
        *(_OWORD *)a2 = v24;
        a2[2] = v23;
        if (*((char *)a3 + 23) < 0)
        {
          v26 = *((_QWORD *)a3 + 1);
          if ((v26 & 0x8000000000000000) != 0)
            goto LABEL_87;
          result = *(const void **)a3;
          if (v26)
          {
            if (!result)
              goto LABEL_87;
          }
        }
        else
        {
          v26 = *((unsigned __int8 *)a3 + 23);
          result = a3;
        }
        if (*((char *)a2 + 23) < 0)
        {
          v32 = (size_t)a2[1];
          if ((v32 & 0x8000000000000000) != 0)
            goto LABEL_87;
          v33 = *a2;
          if (v32)
          {
            if (!v33)
              goto LABEL_87;
          }
        }
        else
        {
          v32 = *((unsigned __int8 *)a2 + 23);
          v33 = a2;
        }
        if (v32 >= v26)
          v35 = v26;
        else
          v35 = v32;
        result = (const void *)memcmp(result, v33, v35);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v26 >= v32)
        {
          return result;
        }
        v27 = a2[2];
        v28 = *(_OWORD *)a2;
        v39 = (const void *)*((_QWORD *)a3 + 2);
        *(_OWORD *)a2 = *a3;
        a2[2] = v39;
LABEL_86:
        *a3 = v28;
        *((_QWORD *)a3 + 2) = v27;
        return result;
      }
    }
    else if (v14 >= v6)
    {
      goto LABEL_50;
    }
    v27 = (const void *)*((_QWORD *)a1 + 2);
    v28 = *a1;
    v29 = *((_QWORD *)a3 + 2);
    *a1 = *a3;
    *((_QWORD *)a1 + 2) = v29;
    goto LABEL_86;
  }
  if (v8 < v10)
    goto LABEL_20;
LABEL_17:
  if (*((char *)a3 + 23) < 0)
  {
    v13 = *((_QWORD *)a3 + 1);
    if ((v13 & 0x8000000000000000) != 0)
      goto LABEL_87;
    result = *(const void **)a3;
    if (v13)
    {
      if (!result)
        goto LABEL_87;
    }
  }
  else
  {
    v13 = *((unsigned __int8 *)a3 + 23);
    result = a3;
  }
  v15 = a2;
  if ((v6 & 0x80) != 0)
  {
    v6 = (size_t)a2[1];
    if ((v6 & 0x8000000000000000) != 0 || (v15 = *a2, v6) && !v15)
    {
LABEL_87:
      __break(1u);
      return result;
    }
  }
  if (v6 >= v13)
    v16 = v13;
  else
    v16 = v6;
  result = (const void *)memcmp(result, v15, v16);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v13 >= v6)
  {
    return result;
  }
  v17 = a2[2];
  v18 = *(_OWORD *)a2;
  v19 = (const void *)*((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = *a3;
  a2[2] = v19;
  *a3 = v18;
  *((_QWORD *)a3 + 2) = v17;
  if (*((char *)a2 + 23) < 0)
  {
    v20 = (size_t)a2[1];
    if ((v20 & 0x8000000000000000) != 0)
      goto LABEL_87;
    result = *a2;
    if (v20)
    {
      if (!result)
        goto LABEL_87;
    }
  }
  else
  {
    v20 = *((unsigned __int8 *)a2 + 23);
    result = a2;
  }
  if (*((char *)a1 + 23) < 0)
  {
    v30 = *((_QWORD *)a1 + 1);
    if ((v30 & 0x8000000000000000) == 0)
    {
      v31 = *(const void **)a1;
      if (!v30 || v31)
        goto LABEL_67;
    }
    goto LABEL_87;
  }
  v30 = *((unsigned __int8 *)a1 + 23);
  v31 = a1;
LABEL_67:
  if (v30 >= v20)
    v34 = v20;
  else
    v34 = v30;
  result = (const void *)memcmp(result, v31, v34);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
      goto LABEL_83;
  }
  else if (v20 < v30)
  {
LABEL_83:
    v36 = (const void *)*((_QWORD *)a1 + 2);
    v37 = *a1;
    v38 = a2[2];
    *a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = v38;
    *(_OWORD *)a2 = v37;
    a2[2] = v36;
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  size_t v13;
  size_t v15;
  const void *v16;
  size_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  const void **v22;
  uint64_t v23;
  unint64_t v24;
  const void *v25;
  size_t v26;
  size_t v27;
  const void *v28;
  size_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void *__s1[2];
  uint64_t v37;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (uint64_t *)(a2 - 24);
      if (*(char *)(a2 - 1) < 0)
      {
        v7 = *(_QWORD *)(a2 - 16);
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_74;
        result = *v6;
        if (v7)
        {
          if (!result)
            goto LABEL_74;
        }
      }
      else
      {
        v7 = *(unsigned __int8 *)(a2 - 1);
        result = a2 - 24;
      }
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
        v27 = *(unsigned __int8 *)(a1 + 23);
        v28 = (const void *)a1;
LABEL_63:
        if (v27 >= v7)
          v29 = v7;
        else
          v29 = v27;
        v30 = memcmp((const void *)result, v28, v29);
        if (v30)
        {
          if ((v30 & 0x80000000) == 0)
            return 1;
        }
        else if (v7 >= v27)
        {
          return 1;
        }
        v31 = *(_QWORD *)(a1 + 16);
        v32 = *(_OWORD *)a1;
        v33 = v6[2];
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 16) = v33;
        *(_OWORD *)v6 = v32;
        v6[2] = v31;
        return 1;
      }
      v27 = *(_QWORD *)(a1 + 8);
      if ((v27 & 0x8000000000000000) == 0)
      {
        v28 = *(const void **)a1;
        if (!v27 || v28)
          goto LABEL_63;
      }
LABEL_74:
      __break(1u);
      return result;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__int128 *)a1, (const void **)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), (__int128 *)(a2 - 24));
      return 1;
    case 5uLL:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v8 = a1 + 48;
      result = (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__int128 *)a1, (const void **)(a1 + 24), (__int128 *)(a1 + 48));
      v9 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v35 = a2;
      v10 = 0;
      v34 = 0;
      while (2)
      {
        if (*(char *)(v9 + 23) < 0)
        {
          v13 = *(_QWORD *)(v9 + 8);
          if ((v13 & 0x8000000000000000) != 0)
            goto LABEL_74;
          result = *(_QWORD *)v9;
          if (v13 && result == 0)
            goto LABEL_74;
        }
        else
        {
          v13 = *(unsigned __int8 *)(v9 + 23);
          result = v9;
        }
        if (*(char *)(v8 + 23) < 0)
        {
          v15 = *(_QWORD *)(v8 + 8);
          if ((v15 & 0x8000000000000000) != 0)
            goto LABEL_74;
          v16 = *(const void **)v8;
          if (v15)
          {
            if (!v16)
              goto LABEL_74;
          }
        }
        else
        {
          v15 = *(unsigned __int8 *)(v8 + 23);
          v16 = (const void *)v8;
        }
        if (v15 >= v13)
          v17 = v13;
        else
          v17 = v15;
        result = memcmp((const void *)result, v16, v17);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) != 0)
            goto LABEL_29;
LABEL_9:
          v8 = v9;
          v10 += 24;
          v9 += 24;
          if (v9 == v35)
            return 1;
          continue;
        }
        break;
      }
      if (v13 >= v15)
        goto LABEL_9;
LABEL_29:
      *(_OWORD *)__s1 = *(_OWORD *)v9;
      v37 = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v9 = *(_OWORD *)v8;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v8 + 16);
      *(_BYTE *)(v8 + 23) = 0;
      *(_BYTE *)v8 = 0;
      v11 = a1;
      if (v8 == a1)
        goto LABEL_7;
      v18 = v10;
      while (1)
      {
        if (SHIBYTE(v37) < 0)
        {
          v19 = __s1[1];
          if (((unint64_t)__s1[1] & 0x8000000000000000) != 0)
            goto LABEL_74;
          result = (uint64_t)__s1[0];
          if (__s1[1] && __s1[0] == 0)
            goto LABEL_74;
        }
        else
        {
          v19 = (void *)HIBYTE(v37);
          result = (uint64_t)__s1;
        }
        v21 = a1 + v18;
        v22 = (const void **)(a1 + v18 + 24);
        v23 = a1 + v18;
        if (*(char *)(a1 + v18 + 47) < 0)
        {
          v24 = *(_QWORD *)(v23 + 32);
          if ((v24 & 0x8000000000000000) != 0)
            goto LABEL_74;
          v25 = *v22;
          if (v24)
          {
            if (!v25)
              goto LABEL_74;
          }
        }
        else
        {
          v24 = *(unsigned __int8 *)(a1 + v18 + 47);
          v25 = (const void *)(a1 + v18 + 24);
        }
        v26 = v24 >= (unint64_t)v19 ? (size_t)v19 : v24;
        result = memcmp((const void *)result, v25, v26);
        if (!(_DWORD)result)
          break;
        if ((result & 0x80000000) == 0)
        {
          v11 = v8;
          goto LABEL_7;
        }
LABEL_32:
        v8 -= 24;
        *(_OWORD *)(v21 + 48) = *(_OWORD *)v22;
        *(_QWORD *)(v21 + 64) = *(_QWORD *)(a1 + v18 + 40);
        *(_BYTE *)(v23 + 47) = 0;
        *(_BYTE *)v22 = 0;
        v18 -= 24;
        if (v18 == -48)
        {
          v11 = a1;
          goto LABEL_7;
        }
      }
      if ((unint64_t)v19 < v24)
        goto LABEL_32;
      v11 = a1 + v18 + 48;
LABEL_7:
      v12 = *(_OWORD *)__s1;
      *(_QWORD *)(v11 + 16) = v37;
      *(_OWORD *)v11 = v12;
      if (v34 != 7)
      {
        ++v34;
        goto LABEL_9;
      }
      return v9 + 24 == v35;
  }
}

__int128 *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 *result;
  size_t v9;
  size_t v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  __int128 *v18;
  size_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  const void *v25;
  size_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  result = (__int128 *)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__int128 *)a1, (const void **)a2, a3);
  if (*((char *)a4 + 23) < 0)
  {
    v9 = *((_QWORD *)a4 + 1);
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_53;
    result = *(__int128 **)a4;
    if (v9)
    {
      if (!result)
        goto LABEL_53;
    }
  }
  else
  {
    v9 = *((unsigned __int8 *)a4 + 23);
    result = a4;
  }
  if (*((char *)a3 + 23) < 0)
  {
    v10 = *((_QWORD *)a3 + 1);
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_53;
    v11 = *(const void **)a3;
    if (v10)
    {
      if (!v11)
        goto LABEL_53;
    }
  }
  else
  {
    v10 = *((unsigned __int8 *)a3 + 23);
    v11 = a3;
  }
  if (v10 >= v9)
    v12 = v9;
  else
    v12 = v10;
  result = (__int128 *)memcmp(result, v11, v12);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v9 >= v10)
  {
    return result;
  }
  v13 = *((_QWORD *)a3 + 2);
  v14 = *a3;
  v15 = *((_QWORD *)a4 + 2);
  *a3 = *a4;
  *((_QWORD *)a3 + 2) = v15;
  *a4 = v14;
  *((_QWORD *)a4 + 2) = v13;
  if (*((char *)a3 + 23) < 0)
  {
    v16 = *((_QWORD *)a3 + 1);
    if ((v16 & 0x8000000000000000) != 0)
      goto LABEL_53;
    result = *(__int128 **)a3;
    if (v16)
    {
      if (!result)
        goto LABEL_53;
    }
  }
  else
  {
    v16 = *((unsigned __int8 *)a3 + 23);
    result = a3;
  }
  if (*((char *)a2 + 23) < 0)
  {
    v17 = *((_QWORD *)a2 + 1);
    if ((v17 & 0x8000000000000000) != 0)
      goto LABEL_53;
    v18 = *(__int128 **)a2;
    if (v17)
    {
      if (!v18)
        goto LABEL_53;
    }
  }
  else
  {
    v17 = *((unsigned __int8 *)a2 + 23);
    v18 = a2;
  }
  if (v17 >= v16)
    v19 = v16;
  else
    v19 = v17;
  result = (__int128 *)memcmp(result, v18, v19);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v16 >= v17)
  {
    return result;
  }
  v20 = *((_QWORD *)a2 + 2);
  v21 = *a2;
  v22 = *((_QWORD *)a3 + 2);
  *a2 = *a3;
  *((_QWORD *)a2 + 2) = v22;
  *a3 = v21;
  *((_QWORD *)a3 + 2) = v20;
  if (*((char *)a2 + 23) < 0)
  {
    v23 = *((_QWORD *)a2 + 1);
    if ((v23 & 0x8000000000000000) != 0)
      goto LABEL_53;
    result = *(__int128 **)a2;
    if (v23)
    {
      if (!result)
        goto LABEL_53;
    }
  }
  else
  {
    v23 = *((unsigned __int8 *)a2 + 23);
    result = a2;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v24 = *(_QWORD *)(a1 + 8);
    if ((v24 & 0x8000000000000000) == 0)
    {
      v25 = *(const void **)a1;
      if (!v24 || v25)
        goto LABEL_45;
    }
LABEL_53:
    __break(1u);
    return result;
  }
  v24 = *(unsigned __int8 *)(a1 + 23);
  v25 = (const void *)a1;
LABEL_45:
  if (v24 >= v23)
    v26 = v23;
  else
    v26 = v24;
  result = (__int128 *)memcmp(result, v25, v26);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
      goto LABEL_52;
  }
  else if (v23 < v24)
  {
LABEL_52:
    v27 = *(_QWORD *)(a1 + 16);
    v28 = *(_OWORD *)a1;
    v29 = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = v29;
    *a2 = v28;
    *((_QWORD *)a2 + 2) = v27;
  }
  return result;
}

__int128 *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 *result;
  size_t v11;
  size_t v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  const void *v27;
  size_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  const void *v34;
  size_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (__int128 *)a2, (__int128 *)a3, (__int128 *)a4);
  if (*(char *)(a5 + 23) < 0)
  {
    v11 = *(_QWORD *)(a5 + 8);
    if ((v11 & 0x8000000000000000) != 0)
      goto LABEL_71;
    result = *(__int128 **)a5;
    if (v11)
    {
      if (!result)
        goto LABEL_71;
    }
  }
  else
  {
    v11 = *(unsigned __int8 *)(a5 + 23);
    result = (__int128 *)a5;
  }
  if (*(char *)(a4 + 23) < 0)
  {
    v12 = *(_QWORD *)(a4 + 8);
    if ((v12 & 0x8000000000000000) != 0)
      goto LABEL_71;
    v13 = *(const void **)a4;
    if (v12)
    {
      if (!v13)
        goto LABEL_71;
    }
  }
  else
  {
    v12 = *(unsigned __int8 *)(a4 + 23);
    v13 = (const void *)a4;
  }
  if (v12 >= v11)
    v14 = v11;
  else
    v14 = v12;
  result = (__int128 *)memcmp(result, v13, v14);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v11 >= v12)
  {
    return result;
  }
  v15 = *(_QWORD *)(a4 + 16);
  v16 = *(_OWORD *)a4;
  v17 = *(_QWORD *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_QWORD *)(a4 + 16) = v17;
  *(_OWORD *)a5 = v16;
  *(_QWORD *)(a5 + 16) = v15;
  if (*(char *)(a4 + 23) < 0)
  {
    v18 = *(_QWORD *)(a4 + 8);
    if ((v18 & 0x8000000000000000) != 0)
      goto LABEL_71;
    result = *(__int128 **)a4;
    if (v18)
    {
      if (!result)
        goto LABEL_71;
    }
  }
  else
  {
    v18 = *(unsigned __int8 *)(a4 + 23);
    result = (__int128 *)a4;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    v19 = *(_QWORD *)(a3 + 8);
    if ((v19 & 0x8000000000000000) != 0)
      goto LABEL_71;
    v20 = *(const void **)a3;
    if (v19)
    {
      if (!v20)
        goto LABEL_71;
    }
  }
  else
  {
    v19 = *(unsigned __int8 *)(a3 + 23);
    v20 = (const void *)a3;
  }
  if (v19 >= v18)
    v21 = v18;
  else
    v21 = v19;
  result = (__int128 *)memcmp(result, v20, v21);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v18 >= v19)
  {
    return result;
  }
  v22 = *(_QWORD *)(a3 + 16);
  v23 = *(_OWORD *)a3;
  v24 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v24;
  *(_OWORD *)a4 = v23;
  *(_QWORD *)(a4 + 16) = v22;
  if (*(char *)(a3 + 23) < 0)
  {
    v25 = *(_QWORD *)(a3 + 8);
    if ((v25 & 0x8000000000000000) != 0)
      goto LABEL_71;
    result = *(__int128 **)a3;
    if (v25)
    {
      if (!result)
        goto LABEL_71;
    }
  }
  else
  {
    v25 = *(unsigned __int8 *)(a3 + 23);
    result = (__int128 *)a3;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v26 = *(_QWORD *)(a2 + 8);
    if ((v26 & 0x8000000000000000) != 0)
      goto LABEL_71;
    v27 = *(const void **)a2;
    if (v26)
    {
      if (!v27)
        goto LABEL_71;
    }
  }
  else
  {
    v26 = *(unsigned __int8 *)(a2 + 23);
    v27 = (const void *)a2;
  }
  if (v26 >= v25)
    v28 = v25;
  else
    v28 = v26;
  result = (__int128 *)memcmp(result, v27, v28);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v25 >= v26)
  {
    return result;
  }
  v29 = *(_QWORD *)(a2 + 16);
  v30 = *(_OWORD *)a2;
  v31 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v31;
  *(_OWORD *)a3 = v30;
  *(_QWORD *)(a3 + 16) = v29;
  if (*(char *)(a2 + 23) < 0)
  {
    v32 = *(_QWORD *)(a2 + 8);
    if ((v32 & 0x8000000000000000) != 0)
      goto LABEL_71;
    result = *(__int128 **)a2;
    if (v32)
    {
      if (!result)
        goto LABEL_71;
    }
  }
  else
  {
    v32 = *(unsigned __int8 *)(a2 + 23);
    result = (__int128 *)a2;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v33 = *(_QWORD *)(a1 + 8);
    if ((v33 & 0x8000000000000000) == 0)
    {
      v34 = *(const void **)a1;
      if (!v33 || v34)
        goto LABEL_62;
    }
LABEL_71:
    __break(1u);
    return result;
  }
  v33 = *(unsigned __int8 *)(a1 + 23);
  v34 = (const void *)a1;
LABEL_62:
  if (v33 >= v32)
    v35 = v32;
  else
    v35 = v33;
  result = (__int128 *)memcmp(result, v34, v35);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
    goto LABEL_67;
  }
  if (v32 < v33)
  {
LABEL_67:
    v36 = *(_QWORD *)(a1 + 16);
    v37 = *(_OWORD *)a1;
    v38 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v38;
    *(_OWORD *)a2 = v37;
    *(_QWORD *)(a2 + 16) = v36;
  }
  return result;
}

void std::__function::__func<webrtc::SdpOfferAnswerHandler::UpdateTransceiverChannel(webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,cricket::ContentInfo const&,cricket::ContentGroup const*)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::UpdateTransceiverChannel(webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,cricket::ContentInfo const&,cricket::ContentGroup const*)::$_0>,webrtc::RtpTransportInternal * ()(std::string_view)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::SdpOfferAnswerHandler::UpdateTransceiverChannel(webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,cricket::ContentInfo const&,cricket::ContentGroup const*)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::UpdateTransceiverChannel(webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,cricket::ContentInfo const&,cricket::ContentGroup const*)::$_0>,webrtc::RtpTransportInternal * ()(std::string_view)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0C0818;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::UpdateTransceiverChannel(webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,cricket::ContentInfo const&,cricket::ContentGroup const*)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::UpdateTransceiverChannel(webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,cricket::ContentInfo const&,cricket::ContentGroup const*)::$_0>,webrtc::RtpTransportInternal * ()(std::string_view)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0C0818;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::UpdateTransceiverChannel(webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,cricket::ContentInfo const&,cricket::ContentGroup const*)::$_0,std::allocator<webrtc::SdpOfferAnswerHandler::UpdateTransceiverChannel(webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,cricket::ContentInfo const&,cricket::ContentGroup const*)::$_0>,webrtc::RtpTransportInternal * ()(std::string_view)>::operator()(uint64_t a1, uint64_t a2)
{
  char *v2;
  size_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(char **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  result = webrtc::JsepTransportCollection::GetTransportForMid(v4 + 376, v2, v3);
  if (result)
  {
    v6 = result;
    result = *(_QWORD *)(result + 96);
    if (!result)
    {
      result = *(_QWORD *)(v6 + 88);
      if (!result)
        return *(_QWORD *)(v6 + 80);
    }
  }
  return result;
}

double rtc::FunctionView<void ()(void)>::CallVoidPtr<std::vector<cricket::IceParameters> rtc::Thread::BlockingCall<webrtc::SdpOfferAnswerHandler::GetOptionsForOffer(webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&,cricket::MediaSessionOptions *)::$_1,std::vector<cricket::IceParameters>,void>(webrtc::SdpOfferAnswerHandler::GetOptionsForOffer(webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&,cricket::MediaSessionOptions *)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(void ***a1)
{
  uint64_t v2;
  cricket::PortAllocator *v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  double result;
  __int128 v9;
  void *v10;

  v2 = *((_QWORD *)*a1[1] + 1);
  v3 = (cricket::PortAllocator *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2);
  cricket::PortAllocator::GetPooledIceCredentials(v3, (char **)&v9);
  v4 = *a1;
  v5 = (void **)*v4;
  if (*v4)
  {
    v6 = (void **)v4[1];
    v7 = *v4;
    if (v6 == v5)
    {
LABEL_11:
      v4[1] = v5;
      operator delete(v7);
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      goto LABEL_12;
    }
    while (1)
    {
      if (*((char *)v6 - 9) < 0)
      {
        operator delete(*(v6 - 4));
        if (*((char *)v6 - 33) < 0)
LABEL_9:
          operator delete(*(v6 - 7));
      }
      else if (*((char *)v6 - 33) < 0)
      {
        goto LABEL_9;
      }
      v6 -= 7;
      if (v6 == v5)
      {
        v7 = *v4;
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  result = *(double *)&v9;
  *(_OWORD *)v4 = v9;
  v4[2] = v10;
  return result;
}

double rtc::FunctionView<void ()(void)>::CallVoidPtr<std::vector<cricket::IceParameters> rtc::Thread::BlockingCall<webrtc::SdpOfferAnswerHandler::GetOptionsForAnswer(webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&,cricket::MediaSessionOptions *)::$_1,std::vector<cricket::IceParameters>,void>(webrtc::SdpOfferAnswerHandler::GetOptionsForAnswer(webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&,cricket::MediaSessionOptions *)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(void ***a1)
{
  uint64_t v2;
  cricket::PortAllocator *v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  double result;
  __int128 v9;
  void *v10;

  v2 = *((_QWORD *)*a1[1] + 1);
  v3 = (cricket::PortAllocator *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2);
  cricket::PortAllocator::GetPooledIceCredentials(v3, (char **)&v9);
  v4 = *a1;
  v5 = (void **)*v4;
  if (*v4)
  {
    v6 = (void **)v4[1];
    v7 = *v4;
    if (v6 == v5)
    {
LABEL_11:
      v4[1] = v5;
      operator delete(v7);
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      goto LABEL_12;
    }
    while (1)
    {
      if (*((char *)v6 - 9) < 0)
      {
        operator delete(*(v6 - 4));
        if (*((char *)v6 - 33) < 0)
LABEL_9:
          operator delete(*(v6 - 7));
      }
      else if (*((char *)v6 - 33) < 0)
      {
        goto LABEL_9;
      }
      v6 -= 7;
      if (v6 == v5)
      {
        v7 = *v4;
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  result = *(double *)&v9;
  *(_OWORD *)v4 = v9;
  v4[2] = v10;
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::SdpOfferAnswerHandler::PushdownMediaDescription(webrtc::SdpType,cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::$_1,BOOL,void>(webrtc::SdpOfferAnswerHandler::PushdownMediaDescription(webrtc::SdpType,cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = 128;
  if (!**(_DWORD **)v2)
    v3 = 120;
  result = (*(uint64_t (**)(void))(***(_QWORD ***)(v2 + 8) + v3))();
  **(_BYTE **)a1 = result;
  return result;
}

void std::__function::__func<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_1,std::allocator<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_1>,webrtc::RtpTransportInternal * ()(std::string_view)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_1,std::allocator<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_1>,webrtc::RtpTransportInternal * ()(std::string_view)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0C0860;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_1,std::allocator<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_1>,webrtc::RtpTransportInternal * ()(std::string_view)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0C0860;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_1,std::allocator<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_1>,webrtc::RtpTransportInternal * ()(std::string_view)>::operator()(uint64_t a1, uint64_t a2)
{
  char *v2;
  size_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(char **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  result = webrtc::JsepTransportCollection::GetTransportForMid(v4 + 376, v2, v3);
  if (result)
  {
    v6 = result;
    result = *(_QWORD *)(result + 96);
    if (!result)
    {
      result = *(_QWORD *)(v6 + 88);
      if (!result)
        return *(_QWORD *)(v6 + 80);
    }
  }
  return result;
}

void std::__function::__func<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_2,std::allocator<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_2>,webrtc::RtpTransportInternal * ()(std::string_view)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_2,std::allocator<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_2>,webrtc::RtpTransportInternal * ()(std::string_view)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0C08A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_2,std::allocator<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_2>,webrtc::RtpTransportInternal * ()(std::string_view)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0C08A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_2,std::allocator<webrtc::SdpOfferAnswerHandler::CreateChannels(cricket::SessionDescription const&)::$_2>,webrtc::RtpTransportInternal * ()(std::string_view)>::operator()(uint64_t a1, uint64_t a2)
{
  char *v2;
  size_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(char **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  result = webrtc::JsepTransportCollection::GetTransportForMid(v4 + 376, v2, v3);
  if (result)
  {
    v6 = result;
    result = *(_QWORD *)(result + 96);
    if (!result)
    {
      result = *(_QWORD *)(v6 + 88);
      if (!result)
        return *(_QWORD *)(v6 + 80);
    }
  }
  return result;
}

void std::__tree<std::__value_type<cricket::ContentGroup const*,webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::PayloadTypes>,std::__map_value_compare<cricket::ContentGroup const*,std::__value_type<cricket::ContentGroup const*,webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::PayloadTypes>,std::less<cricket::ContentGroup const*>,true>,std::allocator<std::__value_type<cricket::ContentGroup const*,webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::PayloadTypes>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<cricket::ContentGroup const*,webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::PayloadTypes>,std::__map_value_compare<cricket::ContentGroup const*,std::__value_type<cricket::ContentGroup const*,webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::PayloadTypes>,std::less<cricket::ContentGroup const*>,true>,std::allocator<std::__value_type<cricket::ContentGroup const*,webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::PayloadTypes>>>::destroy(*a1);
    std::__tree<std::__value_type<cricket::ContentGroup const*,webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::PayloadTypes>,std::__map_value_compare<cricket::ContentGroup const*,std::__value_type<cricket::ContentGroup const*,webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::PayloadTypes>,std::less<cricket::ContentGroup const*>,true>,std::allocator<std::__value_type<cricket::ContentGroup const*,webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::PayloadTypes>>>::destroy(a1[1]);
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(a1 + 8), (_QWORD *)a1[9]);
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(a1 + 5), (_QWORD *)a1[6]);
    operator delete(a1);
  }
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::$_1,BOOL,void>(webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v2 = **(_QWORD ***)(a1 + 8);
  v3 = v2[1];
  if (*v2 == v3)
  {
    result = 1;
    **(_BYTE **)a1 = 1;
  }
  else
  {
    v4 = *v2 + 16;
    do
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 - 8) + 136))(*(_QWORD *)(v4 - 8), *(unsigned __int8 *)(v4 - 16));
      if ((_DWORD)result)
        v6 = v4 == v3;
      else
        v6 = 1;
      v4 += 16;
    }
    while (!v6);
    **(_BYTE **)a1 = result;
  }
  return result;
}

std::string *webrtc::SdpVideoFormat::SdpVideoFormat(std::string *this, __int128 *a2, _QWORD *a3)
{
  __int128 v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[1].__r_.__value_.__l.__size_;
  this[1].__r_.__value_.__r.__words[2] = 0;
  v8 = (_QWORD *)*a3;
  v6 = a3 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)&this[1], (uint64_t *)&this[1].__r_.__value_.__l.__size_, (uint64_t)(v7 + 4), (uint64_t)(v7 + 4));
      v10 = (_QWORD *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != v6);
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  return this;
}

std::string *webrtc::SdpVideoFormat::SdpVideoFormat(std::string *this, const webrtc::SdpVideoFormat *a2)
{
  __int128 v4;
  const webrtc::SdpVideoFormat *v5;
  std::string::size_type v6;
  __int128 v7;
  __int128 v8;
  const webrtc::SdpVideoFormat *v10;
  const webrtc::SdpVideoFormat *v11;
  BOOL v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[1].__r_.__value_.__l.__size_;
  this[1].__r_.__value_.__r.__words[2] = 0;
  v5 = (const webrtc::SdpVideoFormat *)*((_QWORD *)a2 + 3);
  if (v5 != (const webrtc::SdpVideoFormat *)((char *)a2 + 32))
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)&this[1], (uint64_t *)&this[1].__r_.__value_.__l.__size_, (uint64_t)v5 + 32, (uint64_t)v5 + 32);
      v10 = (const webrtc::SdpVideoFormat *)*((_QWORD *)v5 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(const webrtc::SdpVideoFormat **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (const webrtc::SdpVideoFormat *)*((_QWORD *)v5 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v12);
      }
      v5 = v11;
    }
    while (v11 != (const webrtc::SdpVideoFormat *)((char *)a2 + 32));
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  v6 = *((_QWORD *)a2 + 6);
  if (v6 < 2)
    return this;
  if ((v6 & 1) == 0)
  {
    this[2].__r_.__value_.__r.__words[0] = v6;
    v7 = *(_OWORD *)((char *)a2 + 56);
    v8 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v8;
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v7;
    return this;
  }
  absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom((unint64_t *)&this[2], (unint64_t *)a2 + 6);
  return this;
}

void webrtc::SdpVideoFormat::~SdpVideoFormat(webrtc::SdpVideoFormat *this)
{
  if ((*((_BYTE *)this + 48) & 1) == 0)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 24, *((_QWORD *)this + 4));
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)this);
    return;
  }
  operator delete(*((void **)this + 7));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 24, *((_QWORD *)this + 4));
  if (*((char *)this + 23) < 0)
    goto LABEL_5;
}

void webrtc::SdpVideoFormat::ToString(webrtc::SdpVideoFormat *this@<X0>, std::string *a2@<X8>)
{
  char *v3;
  size_t v5;
  BOOL v6;
  webrtc::SdpVideoFormat *v7;
  uint64_t v8;
  size_t v9;
  std::string *v10;
  BOOL v11;
  unint64_t v12;
  std::string::size_type v13;
  std::string::size_type size;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  char *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string::size_type v21;
  char *v22;
  int v23;
  size_t v24;
  BOOL v25;
  std::string *v26;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  const std::string::value_type *v35;
  int v36;
  std::string::size_type v37;
  BOOL v38;
  std::string *v39;
  _BYTE *v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string::size_type v43;
  char *v44;
  std::string *v45;
  std::string::size_type v46;
  char *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  webrtc::SdpVideoFormat *v50;
  std::string *v51;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string::size_type v55;
  unint64_t v56;
  char *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::string *v60;
  char *v61;
  std::string::size_type v62;
  unint64_t v63;
  unint64_t v64;
  std::string::size_type v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  std::string::size_type v68;
  uint64_t v69;
  std::string *v70;
  _BYTE *v71;
  std::string::size_type v72;
  std::string *v73;
  std::string::size_type v74;
  char *v75;
  uint64_t v76;
  std::string::size_type v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type v81;
  uint64_t v82;
  std::string::size_type v83;
  const std::string::value_type *v84;
  std::string::size_type v85;
  std::string::size_type v86;
  std::string *v87;
  std::string::size_type v88;
  webrtc::SdpVideoFormat *v89;
  std::string v91;

  memset(&v91, 0, sizeof(v91));
  v3 = &v91.__r_.__value_.__s.__data_[12];
  if (&v91 <= (std::string *)"Codec name: " && (char *)&v91.__r_.__value_.__r.__words[1] + 4 > "Codec name: ")
    goto LABEL_249;
  strcpy((char *)&v91, "Codec name: ");
  *((_BYTE *)&v91.__r_.__value_.__s + 23) = 12;
  if (*((char *)this + 23) < 0)
  {
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_249;
    v7 = *(webrtc::SdpVideoFormat **)this;
    v6 = v5 == 0;
    if (v5)
    {
      if (!v7)
        goto LABEL_249;
    }
  }
  else
  {
    v5 = *((unsigned __int8 *)this + 23);
    v6 = *((_BYTE *)this + 23) == 0;
    v7 = this;
  }
  if (v5 <= 0xA)
  {
    if (v6)
    {
      LODWORD(v12) = 12;
    }
    else
    {
      if ((char *)&v91.__r_.__value_.__r.__words[1] + 4 <= (char *)v7
        && (char *)&v91.__r_.__value_.__r.__words[1] + v5 + 4 > (char *)v7)
      {
        goto LABEL_249;
      }
      v3 = (char *)memmove((char *)&v91.__r_.__value_.__r.__words[1] + 4, v7, v5);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        v91.__r_.__value_.__l.__size_ = v5 + 12;
      else
        *((_BYTE *)&v91.__r_.__value_.__s + 23) = v5 + 12;
      v91.__r_.__value_.__s.__data_[v5 + 12] = 0;
      LODWORD(v12) = HIBYTE(v91.__r_.__value_.__r.__words[2]);
    }
  }
  else
  {
    if (v5 - 0x7FFFFFFFFFFFFFEBLL <= 0x800000000000001ELL)
      abort();
    v8 = 44;
    if (v5 + 12 > 0x2C)
      v8 = v5 + 12;
    v9 = (v8 | 7) + 1;
    v10 = (std::string *)operator new(v9);
    v3 = &v10->__r_.__value_.__s.__data_[12];
    v11 = &v91 < v10 || (std::string *)((char *)&v10->__r_.__value_.__r.__words[1] + 4) <= &v91;
    if (!v11)
      goto LABEL_249;
    LODWORD(v10->__r_.__value_.__r.__words[1]) = 540697965;
    v10->__r_.__value_.__r.__words[0] = *(_QWORD *)"Codec name: ";
    if (v3 <= (char *)v7 && &v3[v5] > (char *)v7)
      goto LABEL_249;
    v3 = (char *)memcpy(v3, v7, v5);
    v91.__r_.__value_.__l.__size_ = v5 + 12;
    v91.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    v91.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    v10->__r_.__value_.__s.__data_[v5 + 12] = 0;
    v12 = (v9 | 0x8000000000000000) >> 56;
  }
  if ((v12 & 0x80u) == 0)
    v13 = 22;
  else
    v13 = (v91.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v12 & 0x80u) == 0)
    size = v12;
  else
    size = v91.__r_.__value_.__l.__size_;
  if (v13 - size < 0xF)
  {
    std::string::__grow_by_and_replace(&v91, v13, size - v13 + 15, size, size, 0, 0xFuLL, ", parameters: {");
    v15 = (_QWORD *)*((_QWORD *)this + 3);
    v89 = this;
    v16 = (char *)this + 32;
    if (v15 != (_QWORD *)v16)
      goto LABEL_49;
    goto LABEL_133;
  }
  v17 = &v91;
  if ((v12 & 0x80u) != 0)
    v17 = (std::string *)v91.__r_.__value_.__r.__words[0];
  v18 = (char *)v17 + size;
  if ((char *)v17 + size <= ", parameters: {" && v18 + 15 > ", parameters: {")
    goto LABEL_249;
  qmemcpy(v18, ", parameters: {", 15);
  v19 = size + 15;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
  {
    v91.__r_.__value_.__l.__size_ = size + 15;
    v17->__r_.__value_.__s.__data_[v19] = 0;
    v15 = (_QWORD *)*((_QWORD *)this + 3);
    v89 = this;
    v16 = (char *)this + 32;
    if (v15 == (_QWORD *)v16)
      goto LABEL_133;
    while (1)
    {
LABEL_49:
      v20 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = 22;
      else
        v21 = (v91.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = v91.__r_.__value_.__l.__size_;
      if (v21 == v20)
      {
        std::string::__grow_by_and_replace(&v91, v21, 1uLL, v21, v21, 0, 1uLL, " ");
        v22 = (char *)(v15 + 4);
        v23 = *((char *)v15 + 55);
        if ((v23 & 0x80000000) == 0)
          goto LABEL_56;
      }
      else
      {
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v91;
        else
          v26 = (std::string *)v91.__r_.__value_.__r.__words[0];
        if ((char *)v26 + v20 <= " " && (char *)&v26->__r_.__value_.__l.__data_ + v20 + 1 > " ")
          goto LABEL_249;
        v26->__r_.__value_.__s.__data_[v20] = 32;
        v28 = v20 + 1;
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        {
          v91.__r_.__value_.__l.__size_ = v28;
          v26->__r_.__value_.__s.__data_[v28] = 0;
          v22 = (char *)(v15 + 4);
          v23 = *((char *)v15 + 55);
          if ((v23 & 0x80000000) == 0)
          {
LABEL_56:
            v24 = v23;
            v25 = v23 == 0;
            goto LABEL_69;
          }
        }
        else
        {
          *((_BYTE *)&v91.__r_.__value_.__s + 23) = v28 & 0x7F;
          v26->__r_.__value_.__s.__data_[v28] = 0;
          v22 = (char *)(v15 + 4);
          v23 = *((char *)v15 + 55);
          if ((v23 & 0x80000000) == 0)
            goto LABEL_56;
        }
      }
      v24 = v15[5];
      if ((v24 & 0x8000000000000000) != 0)
        goto LABEL_249;
      v22 = *(char **)v22;
      v25 = v24 == 0;
      if (v24)
      {
        if (!v22)
          goto LABEL_249;
      }
LABEL_69:
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = 22;
      else
        v29 = (v91.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
      else
        v30 = v91.__r_.__value_.__l.__size_;
      if (v29 - v30 >= v24)
      {
        if (!v25)
        {
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &v91;
          else
            v31 = (std::string *)v91.__r_.__value_.__r.__words[0];
          v3 = (char *)v31 + v30;
          if ((char *)v31 + v30 <= v22 && &v3[v24] > v22)
            goto LABEL_249;
          v3 = (char *)memmove(v3, v22, v24);
          v32 = v30 + v24;
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
            v91.__r_.__value_.__l.__size_ = v30 + v24;
          else
            *((_BYTE *)&v91.__r_.__value_.__s + 23) = v32 & 0x7F;
          v31->__r_.__value_.__s.__data_[v32] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v91, v29, v30 + v24 - v29, v30, v30, 0, v24, v22);
      }
      v33 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = 22;
      else
        v34 = (v91.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = v91.__r_.__value_.__l.__size_;
      if (v34 == v33)
      {
        std::string::__grow_by_and_replace(&v91, v34, 1uLL, v34, v34, 0, 1uLL, "=");
        v35 = (const std::string::value_type *)(v15 + 7);
        v36 = *((char *)v15 + 79);
        if ((v36 & 0x80000000) == 0)
          goto LABEL_96;
      }
      else
      {
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = &v91;
        else
          v39 = (std::string *)v91.__r_.__value_.__r.__words[0];
        v40 = (char *)v39 + v33;
        if ((char *)v39 + v33 <= "=" && v40 + 1 > "=")
          goto LABEL_249;
        *v40 = 61;
        v41 = v33 + 1;
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        {
          v91.__r_.__value_.__l.__size_ = v41;
          v39->__r_.__value_.__s.__data_[v41] = 0;
          v35 = (const std::string::value_type *)(v15 + 7);
          v36 = *((char *)v15 + 79);
          if ((v36 & 0x80000000) == 0)
          {
LABEL_96:
            v37 = v36;
            v38 = v36 == 0;
            goto LABEL_107;
          }
        }
        else
        {
          *((_BYTE *)&v91.__r_.__value_.__s + 23) = v41 & 0x7F;
          v39->__r_.__value_.__s.__data_[v41] = 0;
          v35 = (const std::string::value_type *)(v15 + 7);
          v36 = *((char *)v15 + 79);
          if ((v36 & 0x80000000) == 0)
            goto LABEL_96;
        }
      }
      v37 = v15[8];
      if ((v37 & 0x8000000000000000) != 0)
        goto LABEL_249;
      v35 = *(const std::string::value_type **)v35;
      v38 = v37 == 0;
      if (v37)
      {
        if (!v35)
          goto LABEL_249;
      }
LABEL_107:
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = 22;
      else
        v42 = (v91.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
      else
        v43 = v91.__r_.__value_.__l.__size_;
      if (v42 - v43 < v37)
      {
        std::string::__grow_by_and_replace(&v91, v42, v43 + v37 - v42, v43, v43, 0, v37, v35);
        v44 = (char *)v15[1];
        if (v44)
          goto LABEL_125;
        goto LABEL_130;
      }
      if (v38)
        goto LABEL_124;
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v91;
      else
        v45 = (std::string *)v91.__r_.__value_.__r.__words[0];
      v3 = (char *)v45 + v43;
      if ((char *)v45 + v43 <= v35 && &v3[v37] > v35)
        goto LABEL_249;
      v3 = (char *)memmove(v3, v35, v37);
      v46 = v43 + v37;
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        *((_BYTE *)&v91.__r_.__value_.__s + 23) = v46 & 0x7F;
        v45->__r_.__value_.__s.__data_[v46] = 0;
LABEL_124:
        v44 = (char *)v15[1];
        if (v44)
          goto LABEL_125;
        goto LABEL_130;
      }
      v91.__r_.__value_.__l.__size_ = v43 + v37;
      v45->__r_.__value_.__s.__data_[v46] = 0;
      v44 = (char *)v15[1];
      if (v44)
      {
        do
        {
LABEL_125:
          v47 = v44;
          v44 = *(char **)v44;
        }
        while (v44);
        goto LABEL_48;
      }
      do
      {
LABEL_130:
        v47 = (char *)v15[2];
        v11 = *(_QWORD *)v47 == (_QWORD)v15;
        v15 = v47;
      }
      while (!v11);
LABEL_48:
      v15 = v47;
      if (v47 == v16)
        goto LABEL_133;
    }
  }
  *((_BYTE *)&v91.__r_.__value_.__s + 23) = v19 & 0x7F;
  v17->__r_.__value_.__s.__data_[v19] = 0;
  v15 = (_QWORD *)*((_QWORD *)this + 3);
  v89 = this;
  v16 = (char *)this + 32;
  if (v15 != (_QWORD *)v16)
    goto LABEL_49;
LABEL_133:
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = 22;
  else
    v48 = (v91.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  else
    v49 = v91.__r_.__value_.__l.__size_;
  if (v48 - v49 < 2)
  {
    std::string::__grow_by_and_replace(&v91, v48, v49 - v48 + 2, v49, v49, 0, 2uLL, " }");
    v50 = v89;
    if (*((_QWORD *)v89 + 6) < 2uLL)
      goto LABEL_141;
LABEL_153:
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = 22;
    else
      v54 = (v91.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
    else
      v55 = v91.__r_.__value_.__l.__size_;
    if (v54 - v55 >= 0x16)
    {
      v60 = &v91;
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v60 = (std::string *)v91.__r_.__value_.__r.__words[0];
      v61 = (char *)v60 + v55;
      if ((char *)v60 + v55 <= ", scalability_modes: [" && v61 + 22 > ", scalability_modes: [")
        goto LABEL_249;
      qmemcpy(v61, ", scalability_modes: [", 22);
      v62 = v55 + 22;
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      {
        v91.__r_.__value_.__l.__size_ = v55 + 22;
        v60->__r_.__value_.__s.__data_[v62] = 0;
        v56 = *((_QWORD *)v50 + 6);
        v57 = (char *)v50 + 56;
        if ((v56 & 1) == 0)
          goto LABEL_162;
      }
      else
      {
        *((_BYTE *)&v91.__r_.__value_.__s + 23) = v62 & 0x7F;
        v60->__r_.__value_.__s.__data_[v62] = 0;
        v56 = *((_QWORD *)v50 + 6);
        v57 = (char *)v50 + 56;
        if ((v56 & 1) == 0)
          goto LABEL_162;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v91, v54, v55 - v54 + 22, v55, v55, 0, 0x16uLL, ", scalability_modes: [");
      v56 = *((_QWORD *)v50 + 6);
      v57 = (char *)v50 + 56;
      if ((v56 & 1) == 0)
      {
LABEL_162:
        if (v56 < 2)
        {
LABEL_163:
          v58 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v59 = 22;
          else
            v59 = (v91.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v58 = v91.__r_.__value_.__l.__size_;
          if (v59 == v58)
          {
            std::string::__grow_by_and_replace(&v91, v59, 1uLL, v59, v59, 0, 1uLL, "]");
            if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_142;
            goto LABEL_170;
          }
          v70 = &v91;
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v70 = (std::string *)v91.__r_.__value_.__r.__words[0];
          v71 = (char *)v70 + v58;
          if ((char *)v70 + v58 > "]" || v71 + 1 <= "]")
          {
            *v71 = 93;
            v72 = v58 + 1;
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
            {
              v91.__r_.__value_.__l.__size_ = v72;
              v70->__r_.__value_.__s.__data_[v72] = 0;
              if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_142;
            }
            else
            {
              *((_BYTE *)&v91.__r_.__value_.__s + 23) = v72 & 0x7F;
              v70->__r_.__value_.__s.__data_[v72] = 0;
              if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_142;
            }
            goto LABEL_170;
          }
          goto LABEL_249;
        }
        v63 = *v57;
        if (v63 >= 0x22)
          goto LABEL_250;
        v64 = v63;
        v65 = qword_208F1B380[v64];
        v66 = off_24C0C0970[v64];
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = 22;
        else
          v67 = (v91.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
        else
          v68 = v91.__r_.__value_.__l.__size_;
        if (v67 - v68 < v65)
        {
          std::string::__grow_by_and_replace(&v91, v67, v68 + v65 - v67, v68, v68, 0, v65, v66);
          v69 = (v56 >> 1) - 1;
          if (!v69)
            goto LABEL_163;
LABEL_210:
          v75 = v57 + 1;
          while (1)
          {
            v76 = *v75;
            if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v77 = 22;
            else
              v77 = (v91.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v78 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
            else
              v78 = v91.__r_.__value_.__l.__size_;
            if (v77 - v78 >= 2)
            {
              if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v79 = &v91;
              else
                v79 = (std::string *)v91.__r_.__value_.__r.__words[0];
              if ((char *)v79 + v78 <= ", " && &v79->__r_.__value_.__s.__data_[v78 + 2] > ", ")
                goto LABEL_249;
              *(_WORD *)((char *)&v79->__r_.__value_.__l.__data_ + v78) = 8236;
              v81 = v78 + 2;
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
              {
                v91.__r_.__value_.__l.__size_ = v78 + 2;
                v79->__r_.__value_.__s.__data_[v81] = 0;
                if (v76 >= 0x22)
                  goto LABEL_250;
              }
              else
              {
                *((_BYTE *)&v91.__r_.__value_.__s + 23) = v81 & 0x7F;
                v79->__r_.__value_.__s.__data_[v81] = 0;
                if (v76 >= 0x22)
                  goto LABEL_250;
              }
            }
            else
            {
              std::string::__grow_by_and_replace(&v91, v77, v78 - v77 + 2, v78, v78, 0, 2uLL, ", ");
              if (v76 >= 0x22)
                goto LABEL_250;
            }
            v82 = v76;
            v83 = qword_208F1B380[v76];
            v84 = off_24C0C0970[v82];
            if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v85 = 22;
            else
              v85 = (v91.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v86 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
            else
              v86 = v91.__r_.__value_.__l.__size_;
            if (v85 - v86 < v83)
            {
              std::string::__grow_by_and_replace(&v91, v85, v86 + v83 - v85, v86, v86, 0, v83, v84);
            }
            else
            {
              if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v87 = &v91;
              else
                v87 = (std::string *)v91.__r_.__value_.__r.__words[0];
              v3 = (char *)v87 + v86;
              if ((char *)v87 + v86 <= v84 && &v3[v83] > v84)
                goto LABEL_249;
              v3 = (char *)memmove(v3, v84, v83);
              v88 = v86 + v83;
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                v91.__r_.__value_.__l.__size_ = v86 + v83;
              else
                *((_BYTE *)&v91.__r_.__value_.__s + 23) = v88 & 0x7F;
              v87->__r_.__value_.__s.__data_[v88] = 0;
            }
            ++v75;
            if (!--v69)
              goto LABEL_163;
          }
        }
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = &v91;
        else
          v73 = (std::string *)v91.__r_.__value_.__r.__words[0];
        v3 = (char *)v73 + v68;
        if ((char *)v73 + v68 > v66 || &v3[v65] <= v66)
        {
          v3 = (char *)memmove(v3, v66, v65);
          v74 = v68 + v65;
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          {
            v91.__r_.__value_.__l.__size_ = v68 + v65;
            v73->__r_.__value_.__s.__data_[v74] = 0;
            v69 = (v56 >> 1) - 1;
            if (!v69)
              goto LABEL_163;
          }
          else
          {
            *((_BYTE *)&v91.__r_.__value_.__s + 23) = v74 & 0x7F;
            v73->__r_.__value_.__s.__data_[v74] = 0;
            v69 = (v56 >> 1) - 1;
            if (!v69)
              goto LABEL_163;
          }
          goto LABEL_210;
        }
LABEL_249:
        __break(1u);
LABEL_250:
        rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v3);
      }
    }
    v57 = *(char **)v57;
    goto LABEL_162;
  }
  v51 = &v91;
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v51 = (std::string *)v91.__r_.__value_.__r.__words[0];
  if ((char *)v51 + v49 <= " }" && &v51->__r_.__value_.__s.__data_[v49 + 2] > " }")
    goto LABEL_249;
  *(_WORD *)((char *)&v51->__r_.__value_.__l.__data_ + v49) = 32032;
  v53 = v49 + 2;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
  {
    v91.__r_.__value_.__l.__size_ = v49 + 2;
    v50 = v89;
    v51->__r_.__value_.__s.__data_[v53] = 0;
    if (*((_QWORD *)v89 + 6) >= 2uLL)
      goto LABEL_153;
  }
  else
  {
    *((_BYTE *)&v91.__r_.__value_.__s + 23) = v53 & 0x7F;
    v50 = v89;
    v51->__r_.__value_.__s.__data_[v53] = 0;
    if (*((_QWORD *)v89 + 6) >= 2uLL)
      goto LABEL_153;
  }
LABEL_141:
  if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_142:
    *a2 = v91;
    return;
  }
LABEL_170:
  std::string::__init_copy_ctor_external(a2, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
}

void webrtc::SdpVideoFormat::IsSameCodec(webrtc::SdpVideoFormat *this, const webrtc::SdpVideoFormat *a2)
{
  uint64_t v4;
  webrtc::SdpVideoFormat *v5;
  uint64_t v7;
  const webrtc::SdpVideoFormat *v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  char v18;
  char v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char v38;
  std::string::size_type size;
  std::string::size_type v40;
  int v41;
  std::string *v42;
  uint64_t v43;
  std::string *p_s1;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  char v50;
  _BOOL4 v51;
  char v52;
  size_t v53;
  std::string::size_type v54;
  std::string::size_type v55;
  int v56;
  std::string *v57;
  uint64_t v58;
  std::string *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  char v64;
  std::string::size_type v65;
  std::string::size_type v66;
  uint64_t v67;
  std::string *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  char v73;
  std::string v74;
  std::string __s1;
  void *__p[2];
  char v77;
  char __s2[19];
  char v79;

  if (*((char *)this + 23) < 0)
  {
    v4 = *((_QWORD *)this + 1);
    if (v4 < 0)
      goto LABEL_197;
    v5 = *(webrtc::SdpVideoFormat **)this;
    if (v4 && v5 == 0)
      goto LABEL_197;
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 23);
    v5 = this;
  }
  if (*((char *)a2 + 23) < 0)
  {
    v7 = *((_QWORD *)a2 + 1);
    if (v7 < 0)
      goto LABEL_197;
    v8 = *(const webrtc::SdpVideoFormat **)a2;
    if (v7)
    {
      if (!v8)
        goto LABEL_197;
    }
  }
  else
  {
    v7 = *((unsigned __int8 *)a2 + 23);
    v8 = a2;
  }
  if (v4 != v7)
    return;
  if (v4)
  {
    do
    {
      v12 = *(unsigned __int8 *)v5;
      v5 = (webrtc::SdpVideoFormat *)((char *)v5 + 1);
      v11 = v12;
      v14 = *(unsigned __int8 *)v8;
      v8 = (const webrtc::SdpVideoFormat *)((char *)v8 + 1);
      v13 = v14;
      if (v11 != v14)
      {
        if ((v11 - 65) < 0x1A)
          LOBYTE(v11) = v11 + 32;
        if ((v13 - 65) < 0x1A)
          LOBYTE(v13) = v13 + 32;
        if (v11 != v13)
          return;
      }
    }
    while (--v4);
  }
  v9 = (char *)this + 24;
  v10 = (char *)a2 + 24;
  switch(webrtc::PayloadStringToCodecType((uint64_t)this))
  {
    case 2u:
      webrtc::ParseSdpForVP9Profile((uint64_t **)this + 3);
      webrtc::ParseSdpForVP9Profile((uint64_t **)a2 + 3);
      return;
    case 3u:
      v15 = webrtc::ParseSdpForAV1Profile((uint64_t **)this + 3);
      v16 = webrtc::ParseSdpForAV1Profile((uint64_t **)a2 + 3);
      if (((unint64_t)v15 & 0xFF00000000) == 0
        || ((unint64_t)v16 & 0xFF00000000) == 0
        || (_DWORD)v15 != (_DWORD)v16)
      {
        return;
      }
      v79 = 4;
      if (__s2 <= "tier" && &__s2[4] > "tier")
        goto LABEL_197;
      strcpy(__s2, "tier");
      v77 = 1;
      if (__p <= (void **)"0" && (char *)__p + 1 > "0")
        goto LABEL_197;
      LOWORD(__p[0]) = 48;
      if (v77 < 0)
      {
        operator delete(__p[0]);
        if ((v79 & 0x80000000) == 0)
        {
LABEL_34:
          v79 = 4;
          if (__s2 > "tier")
            goto LABEL_96;
          goto LABEL_95;
        }
      }
      else if ((v79 & 0x80000000) == 0)
      {
        goto LABEL_34;
      }
      operator delete(*(void **)__s2);
      v79 = 4;
      if (__s2 > "tier")
        goto LABEL_96;
LABEL_95:
      if (&__s2[4] > "tier")
        goto LABEL_197;
LABEL_96:
      strcpy(__s2, "tier");
      v77 = 1;
      if (__p <= (void **)"0" && (char *)__p + 1 > "0")
        goto LABEL_197;
      LOWORD(__p[0]) = 48;
      if (v77 < 0)
        operator delete(__p[0]);
      if (v79 < 0)
        operator delete(*(void **)__s2);
      v38 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        size = __s1.__r_.__value_.__l.__size_;
      v40 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      v41 = SHIBYTE(v74.__r_.__value_.__r.__words[2]);
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v40 = v74.__r_.__value_.__l.__size_;
      if (size == v40)
      {
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v74;
        else
          v42 = (std::string *)v74.__r_.__value_.__r.__words[0];
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
          v51 = memcmp(__s1.__r_.__value_.__l.__data_, v42, __s1.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v43 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
          p_s1 = &__s1;
          do
          {
            v46 = p_s1->__r_.__value_.__s.__data_[0];
            p_s1 = (std::string *)((char *)p_s1 + 1);
            v45 = v46;
            v48 = v42->__r_.__value_.__s.__data_[0];
            v42 = (std::string *)((char *)v42 + 1);
            v47 = v48;
            v49 = v43-- != 0;
            v50 = v49;
            v51 = v45 == v47;
          }
          while (v45 == v47 && (v50 & 1) != 0);
        }
        else
        {
          v51 = 1;
        }
      }
      else
      {
        v51 = 0;
      }
      if ((v41 & 0x80000000) == 0)
      {
        if ((v38 & 0x80) == 0)
          goto LABEL_152;
LABEL_155:
        operator delete(__s1.__r_.__value_.__l.__data_);
        if (v51)
          goto LABEL_156;
        return;
      }
      operator delete(v74.__r_.__value_.__l.__data_);
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_155;
LABEL_152:
      if (v51)
      {
LABEL_156:
        v79 = 9;
        if (__s2 <= "level-idx" && &__s2[9] > "level-idx")
          goto LABEL_197;
        *(_QWORD *)__s2 = *(_QWORD *)"level-idx";
        *(_WORD *)&__s2[8] = cricket::kAv1FmtpLevelIdx[8];
        v77 = 1;
        if (__p <= (void **)"5" && (char *)__p + 1 > "5")
          goto LABEL_197;
        LOWORD(__p[0]) = 53;
        if (v77 < 0)
        {
          operator delete(__p[0]);
          if ((v79 & 0x80000000) == 0)
          {
LABEL_162:
            v79 = 9;
            if (__s2 > "level-idx")
              goto LABEL_167;
LABEL_166:
            if (&__s2[9] > "level-idx")
              goto LABEL_197;
LABEL_167:
            *(_QWORD *)__s2 = *(_QWORD *)"level-idx";
            *(_WORD *)&__s2[8] = cricket::kAv1FmtpLevelIdx[8];
            v77 = 1;
            if (__p <= (void **)"5" && (char *)__p + 1 > "5")
              goto LABEL_197;
            LOWORD(__p[0]) = 53;
            if (v77 < 0)
              operator delete(__p[0]);
            if (v79 < 0)
              operator delete(*(void **)__s2);
            v52 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            v53 = __s1.__r_.__value_.__l.__size_;
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v65 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            else
              v65 = __s1.__r_.__value_.__l.__size_;
            v66 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
            v56 = SHIBYTE(v74.__r_.__value_.__r.__words[2]);
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v66 = v74.__r_.__value_.__l.__size_;
            if (v65 == v66)
            {
              if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v57 = &v74;
              else
                v57 = (std::string *)v74.__r_.__value_.__r.__words[0];
              if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_192;
              if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
              {
                v67 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
                v68 = &__s1;
                do
                {
                  v70 = v68->__r_.__value_.__s.__data_[0];
                  v68 = (std::string *)((char *)v68 + 1);
                  v69 = v70;
                  v72 = v57->__r_.__value_.__s.__data_[0];
                  v57 = (std::string *)((char *)v57 + 1);
                  v71 = v72;
                  v49 = v67-- != 0;
                  v73 = v49;
                }
                while (v69 == v71 && (v73 & 1) != 0);
              }
            }
            goto LABEL_193;
          }
        }
        else if ((v79 & 0x80000000) == 0)
        {
          goto LABEL_162;
        }
        operator delete(*(void **)__s2);
        v79 = 9;
        if (__s2 > "level-idx")
          goto LABEL_167;
        goto LABEL_166;
      }
      return;
    case 4u:
      v17 = webrtc::ParseSdpForH264ProfileLevelId((unint64_t)this + 24);
      v19 = v18;
      v20 = webrtc::ParseSdpForH264ProfileLevelId((unint64_t)a2 + 24);
      if (!v19 || !v21 || v17 != v20)
        return;
      v79 = 18;
      if (__s2 <= "packetization-mode" && &__s2[18] > "packetization-mode")
        goto LABEL_197;
      strcpy(__s2, "packetization-mode");
      v77 = 1;
      if (__p <= (void **)"0" && (char *)__p + 1 > "0")
        goto LABEL_197;
      LOWORD(__p[0]) = 48;
      if (v77 < 0)
      {
        operator delete(__p[0]);
        if ((v79 & 0x80000000) == 0)
        {
LABEL_45:
          v79 = 18;
          if (__s2 > "packetization-mode")
            goto LABEL_124;
          goto LABEL_123;
        }
      }
      else if ((v79 & 0x80000000) == 0)
      {
        goto LABEL_45;
      }
      operator delete(*(void **)__s2);
      v79 = 18;
      if (__s2 > "packetization-mode")
        goto LABEL_124;
LABEL_123:
      if (&__s2[18] > "packetization-mode")
        goto LABEL_197;
LABEL_124:
      strcpy(__s2, "packetization-mode");
      v77 = 1;
      if (__p <= (void **)"0" && (char *)__p + 1 > "0")
        goto LABEL_197;
      LOWORD(__p[0]) = 48;
      if (v77 < 0)
        operator delete(__p[0]);
      if (v79 < 0)
        operator delete(*(void **)__s2);
      v52 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      v53 = __s1.__r_.__value_.__l.__size_;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v54 = __s1.__r_.__value_.__l.__size_;
      v55 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      v56 = SHIBYTE(v74.__r_.__value_.__r.__words[2]);
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v55 = v74.__r_.__value_.__l.__size_;
      if (v54 == v55)
      {
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v57 = &v74;
        else
          v57 = (std::string *)v74.__r_.__value_.__r.__words[0];
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_192:
          memcmp(__s1.__r_.__value_.__l.__data_, v57, v53);
        }
        else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v58 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
          v59 = &__s1;
          do
          {
            v61 = v59->__r_.__value_.__s.__data_[0];
            v59 = (std::string *)((char *)v59 + 1);
            v60 = v61;
            v63 = v57->__r_.__value_.__s.__data_[0];
            v57 = (std::string *)((char *)v57 + 1);
            v62 = v63;
            v49 = v58-- != 0;
            v64 = v49;
          }
          while (v60 == v62 && (v64 & 1) != 0);
        }
      }
LABEL_193:
      if (v56 < 0)
      {
        operator delete(v74.__r_.__value_.__l.__data_);
        v52 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      if ((v52 & 0x80) == 0)
        return;
      goto LABEL_196;
    case 5u:
      if (*((_QWORD *)this + 5))
      {
        if (*((_QWORD *)a2 + 5))
        {
          webrtc::ParseSdpForH265ProfileTierLevel((uint64_t)this + 24);
          v23 = v22;
          v25 = v24;
          webrtc::ParseSdpForH265ProfileTierLevel((uint64_t)a2 + 24);
          if ((v25 & 0xFF00000000) == 0 || (v27 & 0xFF00000000) == 0 || v23 != v26 || (_DWORD)v25 != (_DWORD)v27)
            return;
        }
      }
      v79 = 7;
      if (__s2 <= "tx-mode" && &__s2[7] > "tx-mode")
        goto LABEL_197;
      strcpy(__s2, "tx-mode");
      v77 = 4;
      if (__p <= (void **)"SRST" && (char *)__p + 4 > "SRST")
        goto LABEL_197;
      strcpy((char *)__p, "SRST");
      if (v77 < 0)
      {
        operator delete(__p[0]);
        if ((v79 & 0x80000000) == 0)
        {
LABEL_59:
          v28 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_60:
            v29 = v28;
            v30 = &__s1;
            goto LABEL_66;
          }
LABEL_63:
          v29 = __s1.__r_.__value_.__l.__size_;
          if ((__s1.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_197;
          v30 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          if (__s1.__r_.__value_.__l.__size_)
          {
            if (!__s1.__r_.__value_.__r.__words[0])
              goto LABEL_197;
          }
LABEL_66:
          v79 = 7;
          if (__s2 > "tx-mode" || &__s2[7] <= "tx-mode")
          {
            strcpy(__s2, "tx-mode");
            v77 = 4;
            if (__p > (void **)"SRST" || (char *)__p + 4 <= "SRST")
            {
              strcpy((char *)__p, "SRST");
              if (v77 < 0)
              {
                operator delete(__p[0]);
                if ((v79 & 0x80000000) == 0)
                {
LABEL_72:
                  v31 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
                  if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_73:
                    v32 = &v74;
                    v33 = v31;
                    goto LABEL_79;
                  }
LABEL_76:
                  v33 = v74.__r_.__value_.__l.__size_;
                  if ((v74.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                    goto LABEL_197;
                  v32 = (std::string *)v74.__r_.__value_.__r.__words[0];
                  if (v74.__r_.__value_.__l.__size_)
                  {
                    if (!v74.__r_.__value_.__r.__words[0])
                      goto LABEL_197;
                  }
LABEL_79:
                  if (v29 == v33 && v29)
                  {
                    do
                    {
                      v35 = v30->__r_.__value_.__s.__data_[0];
                      v30 = (std::string *)((char *)v30 + 1);
                      v34 = v35;
                      v37 = v32->__r_.__value_.__s.__data_[0];
                      v32 = (std::string *)((char *)v32 + 1);
                      v36 = v37;
                      if (v34 != v37)
                      {
                        if ((v34 - 65) < 0x1A)
                          LOBYTE(v34) = v34 + 32;
                        if ((v36 - 65) < 0x1A)
                          LOBYTE(v36) = v36 + 32;
                        if (v34 != v36)
                          break;
                      }
                      --v29;
                    }
                    while (v29);
                  }
                  if ((v31 & 0x80) != 0)
                    operator delete(v74.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return;
LABEL_196:
                  operator delete(__s1.__r_.__value_.__l.__data_);
                  return;
                }
              }
              else if ((v79 & 0x80000000) == 0)
              {
                goto LABEL_72;
              }
              operator delete(*(void **)__s2);
              v31 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_73;
              goto LABEL_76;
            }
          }
LABEL_197:
          __break(1u);
          return;
        }
      }
      else if ((v79 & 0x80000000) == 0)
      {
        goto LABEL_59;
      }
      operator delete(*(void **)__s2);
      v28 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_60;
      goto LABEL_63;
    default:
      return;
  }
}

BOOL webrtc::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  BOOL v29;
  unint64_t v31;
  unint64_t v32;
  char v34;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (*((_QWORD *)a1 + 5) != v6[5])
    return 0;
  v9 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  if (v9 != a1 + 32)
  {
    v10 = (unsigned __int8 *)v6[3];
    while ((std::__equal_to::operator()[abi:sn180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)&v34, v9 + 32, v10 + 32) & 1) != 0)
    {
      v11 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      v12 = v9;
      if (v11)
      {
        do
        {
          v9 = v11;
          v11 = *(unsigned __int8 **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v9 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
          v29 = *(_QWORD *)v9 == (_QWORD)v12;
          v12 = v9;
        }
        while (!v29);
      }
      v13 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(unsigned __int8 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
          v29 = *(_QWORD *)v14 == (_QWORD)v10;
          v10 = v14;
        }
        while (!v29);
      }
      v10 = v14;
      if (v9 == a1 + 32)
        goto LABEL_32;
    }
    return 0;
  }
LABEL_32:
  v17 = (unsigned __int8 *)*((_QWORD *)a1 + 7);
  v16 = a1 + 56;
  v15 = v17;
  v18 = *((_QWORD *)v16 - 1);
  if ((v18 & 1) == 0)
    v15 = v16;
  v21 = (unsigned __int8 *)v6[7];
  v20 = (unsigned __int8 *)(v6 + 7);
  v19 = v21;
  v22 = *((_QWORD *)v20 - 1);
  if ((v22 & 1) == 0)
    v19 = v20;
  v23 = v18 >> 1;
  v24 = v22 >> 1;
  if (v18 >> 1 != v22 >> 1)
    return 0;
  if (v18 >= 2 && v22 >= 2)
  {
    v31 = v23 - 1;
    v32 = v24 - 1;
    v27 = v15;
    v26 = v19;
    while (*v27 == *v26)
    {
      ++v27;
      ++v26;
      if (v31)
      {
        --v31;
        if (v32--)
          continue;
      }
      goto LABEL_42;
    }
    return 0;
  }
  v26 = v19;
  v27 = v15;
LABEL_42:
  v28 = &v19[v24];
  return v27 == &v15[v23] && v26 == v28;
}

void webrtc::H265GenerateProfileTierLevelForAnswer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  char *v11;
  char *v12;
  uint64_t **v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void *__p[2];
  uint64_t v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;

  {
    return;
  }
  webrtc::ParseSdpForH265ProfileTierLevel(a1);
  v7 = v6;
  webrtc::ParseSdpForH265ProfileTierLevel(a2);
  if ((v7 & 0xFF00000000) == 0
    || (v8 & 0xFF00000000) == 0
    || ((int)v7 >= (int)v8 ? (v9 = v8) : (v9 = v7),
        (webrtc::H265LevelToString(v9, (char *)v21), HIBYTE(v20) = 8, __p <= (void **)"level-id")
     && &__p[1] > (void **)"level-id"))
  {
    __break(1u);
    return;
  }
  strcpy((char *)__p, "level-id");
  v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a3, &v23, (const void **)__p);
  v11 = (char *)*v10;
  if (*v10)
  {
    v12 = v11 + 56;
    if ((v11[79] & 0x80000000) == 0)
      goto LABEL_12;
  }
  else
  {
    v13 = (uint64_t **)v10;
    v14 = operator new(0x50uLL);
    v14[2] = *(_OWORD *)__p;
    v15 = v20;
    __p[0] = 0;
    __p[1] = 0;
    v20 = 0;
    *((_QWORD *)v14 + 6) = v15;
    *((_QWORD *)v14 + 7) = 0;
    *((_QWORD *)v14 + 8) = 0;
    *((_QWORD *)v14 + 9) = 0;
    v16 = v23;
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = v16;
    *v13 = (uint64_t *)v14;
    v17 = **(_QWORD **)a3;
    v18 = (uint64_t *)v14;
    if (v17)
    {
      *(_QWORD *)a3 = v17;
      v18 = *v13;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a3 + 8), v18);
    ++*(_QWORD *)(a3 + 16);
    v12 = (char *)v14 + 56;
    if ((*((char *)v14 + 79) & 0x80000000) == 0)
      goto LABEL_12;
  }
  operator delete(*(void **)v12);
LABEL_12:
  *(_OWORD *)v12 = *(_OWORD *)v21;
  *((_QWORD *)v12 + 2) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(v21[0]) = 0;
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
  }
}

uint64_t webrtc::`anonymous namespace'::IsDefaultH265PTL(uint64_t result)
{
  uint64_t v1;
  _BOOL8 v2;
  void *__p[2];
  char v4;
  const void *v5[2];
  char v6;
  const void *v7[2];
  char v8;

  v1 = result;
  v8 = 10;
  if (v7 > (const void **)"profile-id" || (char *)&v7[1] + 2 <= "profile-id")
  {
    strcpy((char *)v7, "profile-id");
    result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(result, v7);
    v2 = 0;
    if (result)
      goto LABEL_13;
    v6 = 9;
    if (v5 > (const void **)"tier-flag" || (char *)&v5[1] + 1 <= "tier-flag")
    {
      strcpy((char *)v5, "tier-flag");
      result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v1, v5);
      if (result)
      {
        v2 = 0;
        goto LABEL_12;
      }
      v4 = 8;
      if (__p > (void **)"level-id" || &__p[1] <= (void **)"level-id")
      {
        strcpy((char *)__p, "level-id");
        v2 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v1, (const void **)__p) == 0;
        if (v4 < 0)
          operator delete(__p[0]);
LABEL_12:
        if (v6 < 0)
        {
          operator delete((void *)v5[0]);
          if ((v8 & 0x80000000) == 0)
            return v2;
LABEL_16:
          operator delete((void *)v7[0]);
          return v2;
        }
LABEL_13:
        if ((v8 & 0x80000000) == 0)
          return v2;
        goto LABEL_16;
      }
    }
  }
  __break(1u);
  return result;
}

void webrtc::H264GenerateProfileLevelIdForAnswer(unint64_t a1, unint64_t a2, uint64_t a3)
{
  BOOL v6;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  _BOOL4 v15;
  _BOOL4 v17;
  const void **v18;
  char *v19;
  char *v20;
  uint64_t **v21;
  _OWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27[2];
  _BYTE v28[24];
  char v29;
  void *__p[3];
  uint64_t v31;

  v28[23] = 16;
  if (v28 <= "profile-level-id" && &v28[16] > "profile-level-id")
    goto LABEL_42;
  strcpy(v28, "profile-level-id");
  v6 = 0;
  if (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(a1, (const void **)v28))
  {
    goto LABEL_7;
  }
  HIBYTE(__p[2]) = 16;
  if (__p <= (void **)"profile-level-id" && &__p[2] > (void **)"profile-level-id")
  {
LABEL_42:
    __break(1u);
    return;
  }
  strcpy((char *)__p, "profile-level-id");
  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(a2, (const void **)__p) == 0;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v28[23] & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_11;
  }
  operator delete(__p[0]);
  if ((v28[23] & 0x80000000) == 0)
  {
LABEL_8:
    if (v6)
      return;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)v28);
  if (v6)
    return;
LABEL_12:
  v7 = webrtc::ParseSdpForH264ProfileLevelId(a1);
  v9 = v8;
  v10 = webrtc::ParseSdpForH264ProfileLevelId(a2);
  v12 = v11;
  if (v13)
  if (!v9 || !v12)
    goto LABEL_42;
  v14 = HIDWORD(v7);
  v15 = SHIDWORD(v7) < SHIDWORD(v10);
  if (!HIDWORD(v10))
    v15 = HIDWORD(v7) == 10;
  v17 = HIDWORD(v10) != 10 && HIDWORD(v10) != 0;
  if (!HIDWORD(v7))
    v15 = v17;
  if (!(v13 | v15))
    LODWORD(v14) = HIDWORD(v10);
  v27[0] = v7;
  v27[1] = v14;
  webrtc::H264ProfileLevelIdToString(v27, (int *)v28);
  if (!v29)
    goto LABEL_42;
  HIBYTE(__p[2]) = 16;
  if (__p <= (void **)"profile-level-id" && &__p[2] > (void **)"profile-level-id")
    goto LABEL_42;
  strcpy((char *)__p, "profile-level-id");
  v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a3, &v31, (const void **)__p);
  v19 = (char *)*v18;
  if (!*v18)
  {
    v21 = (uint64_t **)v18;
    v22 = operator new(0x50uLL);
    v22[2] = *(_OWORD *)__p;
    v23 = __p[2];
    memset(__p, 0, sizeof(__p));
    *((_QWORD *)v22 + 6) = v23;
    *((_QWORD *)v22 + 7) = 0;
    *((_QWORD *)v22 + 8) = 0;
    *((_QWORD *)v22 + 9) = 0;
    v24 = v31;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = v24;
    *v21 = (uint64_t *)v22;
    v25 = **(_QWORD **)a3;
    v26 = (uint64_t *)v22;
    if (v25)
    {
      *(_QWORD *)a3 = v25;
      v26 = *v21;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a3 + 8), v26);
    ++*(_QWORD *)(a3 + 16);
    v20 = (char *)v22 + 56;
    if ((*((char *)v22 + 79) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_41;
  }
  v20 = v19 + 56;
  if (v19[79] < 0)
LABEL_41:
    operator delete(*(void **)v20);
LABEL_33:
  *(_OWORD *)v20 = *(_OWORD *)v28;
  *((_QWORD *)v20 + 2) = *(_QWORD *)&v28[16];
  v28[23] = 0;
  v28[0] = 0;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (v29)
    {
      if ((v28[23] & 0x80000000) != 0)
        operator delete(*(void **)v28);
    }
  }
}

char *webrtc::`anonymous namespace'::IsH264LevelAsymmetryAllowed(uint64_t a1)
{
  char *result;
  char *v3;
  char *v4;
  char v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  BOOL v9;
  size_t v10;
  int v11;
  const char *v12;
  void *__s1;
  __int128 v14;

  result = (char *)operator new(0x19uLL);
  __s1 = result;
  v14 = xmmword_208F05110;
  if (result <= "level-asymmetry-allowed" && result + 23 > "level-asymmetry-allowed")
    goto LABEL_32;
  strcpy(result, "level-asymmetry-allowed");
  v3 = (char *)(a1 + 8);
  result = (char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(a1, (const void **)&__s1, *(uint64_t **)(a1 + 8), (uint64_t *)(a1 + 8));
  if ((char *)(a1 + 8) == result)
  {
    v5 = HIBYTE(v14);
    goto LABEL_22;
  }
  v4 = result;
  v5 = HIBYTE(v14);
  if (SHIBYTE(v14) < 0)
  {
    v6 = v14;
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_32;
    result = (char *)__s1;
    if ((_QWORD)v14)
    {
      if (!__s1)
        goto LABEL_32;
    }
  }
  else
  {
    v6 = HIBYTE(v14);
    result = (char *)&__s1;
  }
  v7 = v4 + 32;
  if ((v4[55] & 0x80000000) == 0)
  {
    v8 = v4[55];
    goto LABEL_17;
  }
  v8 = *((_QWORD *)v4 + 5);
  if ((v8 & 0x8000000000000000) != 0 || ((v7 = (_QWORD *)*v7, v8) ? (v9 = v7 == 0) : (v9 = 0), v9))
  {
LABEL_32:
    __break(1u);
    return result;
  }
LABEL_17:
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = memcmp(result, v7, v10);
  if (v11)
  {
    if ((v11 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v6 < v8)
LABEL_22:
    v4 = v3;
LABEL_23:
  if (v5 < 0)
  {
    operator delete(__s1);
    if (v4 != v3)
      goto LABEL_25;
    return 0;
  }
  if (v4 == v3)
    return 0;
LABEL_25:
  v12 = v4 + 56;
  if (v4[79] < 0)
    v12 = *(const char **)v12;
  return (char *)(strcmp(v12, "1") == 0);
}

void webrtc::SupportsPerLayerPictureLossIndication(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unsigned __int8 v3;
  std::string::size_type size;
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  std::string::size_type v11;
  std::string *p_p;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string v16;
  std::string __p;

  v1 = a1 + 1;
  v2 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      if (*((char *)v2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)v2[4], v2[5]);
        if ((*((char *)v2 + 79) & 0x80000000) == 0)
        {
LABEL_6:
          __p = *(std::string *)(v2 + 7);
          v3 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_7;
          goto LABEL_10;
        }
      }
      else
      {
        v16 = *(std::string *)(v2 + 4);
        if ((*((char *)v2 + 79) & 0x80000000) == 0)
          goto LABEL_6;
      }
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v2[7], v2[8]);
      v3 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_7:
        size = v3;
        v5 = &v16;
        goto LABEL_13;
      }
LABEL_10:
      size = v16.__r_.__value_.__l.__size_;
      if ((v16.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || (v5 = (std::string *)v16.__r_.__value_.__r.__words[0], v16.__r_.__value_.__l.__size_)
        && !v16.__r_.__value_.__r.__words[0])
      {
LABEL_43:
        __break(1u);
        return;
      }
LABEL_13:
      if (size == 22)
      {
        v6 = v5->__r_.__value_.__r.__words[0];
        v7 = v5->__r_.__value_.__l.__size_;
        v8 = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 6);
        v9 = v6 == *(_QWORD *)"x-google-per-layer-pli" && v7 == *(_QWORD *)"-per-layer-pli";
        v10 = v9 && v8 == *(_QWORD *)"ayer-pli";
        v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (!v10)
          goto LABEL_33;
        p_p = &__p;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v11 = __p.__r_.__value_.__l.__size_;
          if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_43;
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__l.__size_)
          {
            if (!__p.__r_.__value_.__r.__words[0])
              goto LABEL_43;
          }
        }
        if (v11 == 1)
        {
          v13 = p_p->__r_.__value_.__s.__data_[0] == 49;
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_30;
        }
        else
        {
LABEL_33:
          v13 = 0;
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
          {
LABEL_30:
            if ((v3 & 0x80) != 0)
              goto LABEL_35;
            goto LABEL_31;
          }
        }
      }
      else
      {
        v13 = 0;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_30;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((_BYTE *)&v16.__r_.__value_.__s + 23) & 0x80) != 0)
      {
LABEL_35:
        operator delete(v16.__r_.__value_.__l.__data_);
        if (v13)
          return;
        goto LABEL_36;
      }
LABEL_31:
      if (v13)
        return;
LABEL_36:
      v14 = (_QWORD *)v2[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v2[2];
          v9 = *v15 == (_QWORD)v2;
          v2 = v15;
        }
        while (!v9);
      }
      v2 = v15;
    }
    while (v15 != v1);
  }
}

void webrtc::SendDelayStats::~SendDelayStats(webrtc::SendDelayStats *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  webrtc::SendDelayStats *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  webrtc::SendDelayStats *v25;
  webrtc::SendDelayStats *v26;
  BOOL v27;
  std::string __p;
  __int128 v29;
  uint64_t v30;

  if ((*((_QWORD *)this + 12) || *((_QWORD *)this + 13))
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/send_delay_stats.cc");
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v10 = (webrtc::SendDelayStats *)*((_QWORD *)this + 14);
  if (v10 != (webrtc::SendDelayStats *)((char *)this + 120))
  {
    do
    {
      v11 = *((_QWORD *)v10 + 8);
      v14 = *(_QWORD *)(v11 + 16);
      v12 = (__int128 *)(v11 + 16);
      v13 = v14;
      if (v14)
      {
        if (v13 >= 0)
          v15 = v13;
        else
          v15 = v13 + 1;
        *(_DWORD *)(*((_QWORD *)v10 + 8) + 32) = (*(_QWORD *)(*((_QWORD *)v10 + 8) + 8) + (v15 >> 1)) / v13;
      }
      v29 = *v12;
      v30 = *((_QWORD *)v12 + 2);
      if ((uint64_t)v29 >= 5)
      {
        v16 = atomic_load(&webrtc::SendDelayStats::UpdateHistograms(void)::atomic_histogram_pointer);
        if (v16)
        {
          webrtc::metrics::HistogramAdd(v16, v30);
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          {
LABEL_20:
            v1 = v1 & 0xFFFFFFFF00000000 | 0x189;
            webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&v29, 1, &__p);
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/send_delay_stats.cc");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          while (!__ldaxr(&webrtc::SendDelayStats::UpdateHistograms(void)::atomic_histogram_pointer))
          {
            if (!__stlxr(0, &webrtc::SendDelayStats::UpdateHistograms(void)::atomic_histogram_pointer))
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
                goto LABEL_23;
              goto LABEL_20;
            }
          }
          __clrex();
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            goto LABEL_20;
        }
      }
LABEL_23:
      v25 = (webrtc::SendDelayStats *)*((_QWORD *)v10 + 1);
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = *(webrtc::SendDelayStats **)v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (webrtc::SendDelayStats *)*((_QWORD *)v10 + 2);
          v27 = *(_QWORD *)v26 == (_QWORD)v10;
          v10 = v26;
        }
        while (!v27);
      }
      v10 = v26;
    }
    while (v26 != (webrtc::SendDelayStats *)((char *)this + 120));
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 8));
  std::__tree<std::__value_type<unsigned int,webrtc::AvgCounter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::AvgCounter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::AvgCounter>>>::destroy(*((_QWORD **)this + 15));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 10));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

uint64_t webrtc::SendDelayStats::AddSsrcs(uint64_t *a1, unsigned int **a2)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  pthread_mutex_t *v18;

  v18 = (pthread_mutex_t *)(a1 + 1);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1));
  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2 && (unint64_t)(a1[16] + v4 - *a2) <= 0x32)
  {
    v6 = a1 + 15;
    do
    {
      v7 = *v5;
      v8 = *v6;
      v9 = a1 + 15;
      v10 = a1 + 15;
      if (*v6)
      {
        while (1)
        {
          while (1)
          {
            v10 = (_QWORD *)v8;
            v11 = *(_DWORD *)(v8 + 32);
            if (v7 >= v11)
              break;
            v8 = *v10;
            v9 = v10;
            if (!*v10)
              goto LABEL_13;
          }
          if (v11 >= v7)
            break;
          v8 = v10[1];
          if (!v8)
          {
            v9 = v10 + 1;
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        v12 = operator new(0x80uLL);
        v12[8] = v7;
        v13 = *a1;
        *((_QWORD *)v12 + 5) = off_24C0C1308;
        *((_BYTE *)v12 + 48) = 0;
        *((_QWORD *)v12 + 7) = 2000;
        v14 = operator new();
        *(_DWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 16) = 0;
        *(_QWORD *)(v14 + 24) = -1;
        *(_DWORD *)(v14 + 32) = -1;
        *((_QWORD *)v12 + 8) = v14;
        v15 = (_QWORD *)operator new();
        v15[3] = 0;
        v15[2] = 0;
        *v15 = 0;
        v15[1] = v15 + 2;
        *((_QWORD *)v12 + 9) = v15;
        *((_QWORD *)v12 + 10) = v13;
        *((_QWORD *)v12 + 11) = 0;
        *((_QWORD *)v12 + 12) = -1;
        *((_BYTE *)v12 + 104) = 0;
        *((_OWORD *)v12 + 7) = xmmword_208F05A40;
        *((_QWORD *)v12 + 5) = &unk_24C0C1338;
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = v10;
        *v9 = v12;
        v16 = *(_QWORD *)a1[14];
        if (v16)
        {
          a1[14] = v16;
          v12 = (_DWORD *)*v9;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[15], (uint64_t *)v12);
        ++a1[16];
      }
      ++v5;
    }
    while (v5 != v4);
  }
  return pthread_mutex_unlock(v18);
}

uint64_t webrtc::SendDelayStats::OnSendPacket(webrtc::SendDelayStats *this, unsigned __int16 a2, Timestamp a3, unsigned int a4)
{
  pthread_mutex_t *v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  int64_t v13;
  Timestamp v14;
  _QWORD v16[3];
  unsigned __int16 v17;

  v17 = a2;
  v7 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v8 = *((_QWORD *)this + 15);
  if (v8)
  {
    v9 = (_DWORD *)((char *)this + 120);
    do
    {
      v10 = *(_DWORD *)(v8 + 32);
      v11 = v10 >= a4;
      if (v10 >= a4)
        v12 = (uint64_t *)v8;
      else
        v12 = (uint64_t *)(v8 + 8);
      if (v11)
        v9 = (_DWORD *)v8;
      v8 = *v12;
    }
    while (*v12);
    if (v9 != (_DWORD *)((char *)this + 120) && v9[8] <= a4)
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
      v14.var0 = v13;
      webrtc::SendDelayStats::RemoveOld(this, v14);
      if (*((_QWORD *)this + 11) < 0x7D1uLL)
      {
        v16[0] = v9 + 10;
        v16[1] = a3.var0;
        v16[2] = v13;
        std::__tree<std::__value_type<unsigned short,webrtc::SendDelayStats::Packet>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,webrtc::SendDelayStats::Packet>,webrtc::SendDelayStats::SequenceNumberOlderThan,true>,std::allocator<std::__value_type<unsigned short,webrtc::SendDelayStats::Packet>>>::__emplace_unique_key_args<unsigned short,unsigned short &,webrtc::SendDelayStats::Packet>((uint64_t **)this + 9, &v17, &v17, (uint64_t)v16);
      }
      else
      {
        ++*((_QWORD *)this + 13);
      }
    }
  }
  return pthread_mutex_unlock(v7);
}

void webrtc::SendDelayStats::RemoveOld(webrtc::SendDelayStats *this, Timestamp a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
    {
      do
      {
        v5 = (uint64_t *)*((_QWORD *)this + 9);
        v6 = (uint64_t *)v5[1];
        v7 = v5;
        if (v6)
        {
          do
          {
            v8 = v6;
            v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v7[2];
            v9 = *v8 == (_QWORD)v7;
            v7 = v8;
          }
          while (!v9);
        }
        *((_QWORD *)this + 9) = v8;
        *((_QWORD *)this + 11) = v2 - 1;
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 10), v5);
        operator delete(v5);
        v2 = *((_QWORD *)this + 11);
        ++*((_QWORD *)this + 12);
      }
      while (v2);
    }
    else if (a2.var0 == 0x8000000000000000)
    {
      do
      {
        v16 = (uint64_t *)*((_QWORD *)this + 9);
        if (v16[6] != 0x8000000000000000)
          break;
        v17 = (_QWORD *)v16[1];
        v18 = (_QWORD *)*((_QWORD *)this + 9);
        if (v17)
        {
          do
          {
            v19 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v18[2];
            v9 = *v19 == (_QWORD)v18;
            v18 = v19;
          }
          while (!v9);
        }
        *((_QWORD *)this + 9) = v19;
        *((_QWORD *)this + 11) = v2 - 1;
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 10), v16);
        operator delete(v16);
        v2 = *((_QWORD *)this + 11);
        ++*((_QWORD *)this + 12);
      }
      while (v2);
    }
    else
    {
      do
      {
        v10 = (uint64_t *)*((_QWORD *)this + 9);
        v11 = v10[6];
        if (v11 != 0x8000000000000000 && (v11 == 0x7FFFFFFFFFFFFFFFLL || a2.var0 - v11 < 11000000))
          break;
        v13 = (_QWORD *)v10[1];
        v14 = (_QWORD *)*((_QWORD *)this + 9);
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v14[2];
            v9 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v9);
        }
        *((_QWORD *)this + 9) = v15;
        *((_QWORD *)this + 11) = v2 - 1;
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 10), v10);
        operator delete(v10);
        v2 = *((_QWORD *)this + 11);
        ++*((_QWORD *)this + 12);
      }
      while (v2);
    }
  }
}

uint64_t webrtc::SendDelayStats::OnSentPacket(webrtc::SendDelayStats *this, int a2, Timestamp a3)
{
  unsigned __int16 v4;
  pthread_mutex_t *v6;
  char **v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  BOOL v15;
  char **v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v21;
  webrtc::StatsCounter *v22;
  unint64_t v23;
  int v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  char *v29;
  char *v30;
  uint64_t *v31;

  if (a2 != -1)
  {
    v4 = a2;
    v6 = (pthread_mutex_t *)((char *)this + 8);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
    v7 = (char **)*((_QWORD *)this + 10);
    if (!v7)
      goto LABEL_22;
    v8 = v4;
    v9 = (char *)this + 80;
    do
    {
      v10 = *((unsigned __int16 *)v7 + 16);
      v11 = v8 - v10;
      v12 = ((v8 - v10) & 0x8000) != 0 || v10 == v8;
      v13 = !v12;
      v14 = v10 < v8;
      if (v11 != 0x8000)
        v14 = v13;
      v15 = !v14;
      if (v14)
        v16 = v7 + 1;
      else
        v16 = v7;
      if (v15)
        v9 = (char *)v7;
      v7 = (char **)*v16;
    }
    while (*v16);
    if (v9 == (char *)this + 80)
      goto LABEL_22;
    v17 = *((unsigned __int16 *)v9 + 16);
    if (v17 - v8 == 0x8000)
    {
      if (v17 > v8)
      {
LABEL_22:
        v18 = 0;
LABEL_23:
        pthread_mutex_unlock(v6);
        return v18;
      }
    }
    else if (v17 != v8 && (((_WORD)v17 - (_WORD)v8) & 0x8000) == 0)
    {
      goto LABEL_22;
    }
    if (a3.var0 == 0x7FFFFFFFFFFFFFFFLL || (v21 = *((_QWORD *)v9 + 7), v21 == 0x8000000000000000))
    {
      v22 = (webrtc::StatsCounter *)*((_QWORD *)v9 + 5);
      v23 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      if (a3.var0 == 0x8000000000000000 || v21 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v22 = (webrtc::StatsCounter *)*((_QWORD *)v9 + 5);
        v23 = 0x8000000000000000;
        goto LABEL_42;
      }
      v22 = (webrtc::StatsCounter *)*((_QWORD *)v9 + 5);
      v23 = a3.var0 - v21;
      if ((v23 & 0x8000000000000000) != 0)
      {
LABEL_42:
        v26 = -(uint64_t)v23;
        v27 = v26 / 0x3E8;
        if (v26 % 0x3E8 <= 0x1F4)
          v28 = 0;
        else
          v28 = -1;
        webrtc::StatsCounter::Add(v22, v28 - v27);
        v25 = (char *)*((_QWORD *)v9 + 1);
        if (v25)
        {
          do
          {
LABEL_46:
            v29 = v25;
            v25 = *(char **)v25;
          }
          while (v25);
          goto LABEL_51;
        }
LABEL_48:
        v30 = v9;
        do
        {
          v29 = (char *)*((_QWORD *)v30 + 2);
          v12 = *(_QWORD *)v29 == (_QWORD)v30;
          v30 = v29;
        }
        while (!v12);
LABEL_51:
        if (*((char **)this + 9) == v9)
          *((_QWORD *)this + 9) = v29;
        v31 = (uint64_t *)*((_QWORD *)this + 10);
        --*((_QWORD *)this + 11);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v31, (uint64_t *)v9);
        operator delete(v9);
        v18 = 1;
        goto LABEL_23;
      }
    }
    if (v23 % 0x3E8 <= 0x1F3)
      v24 = v23 / 0x3E8;
    else
      v24 = v23 / 0x3E8 + 1;
    webrtc::StatsCounter::Add(v22, v24);
    v25 = (char *)*((_QWORD *)v9 + 1);
    if (v25)
      goto LABEL_46;
    goto LABEL_48;
  }
  return 0;
}

void std::__tree<std::__value_type<unsigned int,webrtc::AvgCounter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::AvgCounter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::AvgCounter>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,webrtc::AvgCounter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::AvgCounter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::AvgCounter>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,webrtc::AvgCounter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::AvgCounter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::AvgCounter>>>::destroy(a1[1]);
    a1[5] = off_24C0C1308;
    v2 = a1[11];
    a1[11] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    v3 = a1[9];
    a1[9] = 0;
    if (v3)
    {
      std::__tree<sigslot::_signal_base_interface *>::destroy(v3 + 8, *(_QWORD **)(v3 + 16));
      MEMORY[0x20BD0ADEC](v3, 0x1020C40C0D28DD2);
    }
    v4 = a1[8];
    a1[8] = 0;
    if (v4)
      MEMORY[0x20BD0ADEC](v4, 0x1000C407607B2BCLL);
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned short,webrtc::SendDelayStats::Packet>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,webrtc::SendDelayStats::Packet>,webrtc::SendDelayStats::SequenceNumberOlderThan,true>,std::allocator<std::__value_type<unsigned short,webrtc::SendDelayStats::Packet>>>::__emplace_unique_key_args<unsigned short,unsigned short &,webrtc::SendDelayStats::Packet>(uint64_t **a1, unsigned __int16 *a2, _WORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t **v10;
  unsigned int v11;
  uint64_t **v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      v10 = (uint64_t **)v7;
      v11 = *((unsigned __int16 *)v7 + 16);
      if (v11 - v9 == 0x8000)
      {
        if (v11 <= v9)
          goto LABEL_11;
LABEL_3:
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_22;
      }
      else
      {
        if (v11 != v9 && (((_WORD)v11 - (_WORD)v9) & 0x8000) == 0)
          goto LABEL_3;
LABEL_11:
        if (v9 - v11 == 0x8000)
        {
          if (v9 <= v11)
            return v10;
        }
        else if (v9 == v11 || (((_WORD)v9 - (_WORD)v11) & 0x8000) != 0)
        {
          return v10;
        }
        v7 = v10[1];
        if (!v7)
        {
          v8 = v10 + 1;
          goto LABEL_22;
        }
      }
    }
  }
  v10 = a1 + 1;
LABEL_22:
  v14 = v10;
  v15 = (char *)operator new(0x40uLL);
  *((_WORD *)v15 + 16) = *a3;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)a4;
  *((_QWORD *)v15 + 7) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = v14;
  *v8 = (uint64_t *)v15;
  v16 = (uint64_t *)**a1;
  v17 = (uint64_t *)v15;
  if (v16)
  {
    *a1 = v16;
    v17 = *v8;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v17);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v15;
}

void webrtc::SendSideBandwidthEstimation::SendSideBandwidthEstimation(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *p_p;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  _BOOL4 v13;
  int v14;
  int v15;
  float *v17;
  float *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  std::string *v45;
  void *__p;
  uint64_t v47;
  unsigned __int8 v48;
  void *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  a1[1] = (uint64_t)off_24C0B4170;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  *((_BYTE *)a1 + 63) = 8;
  if (a1 + 5 <= (uint64_t *)"Disabled" && a1 + 6 > (uint64_t *)"Disabled")
    goto LABEL_70;
  a1[9] = (uint64_t)off_24C0B4170;
  strcpy((char *)a1 + 40, "Disabled");
  *((_WORD *)a1 + 32) = 0;
  a1[1] = (uint64_t)&unk_24C0B41A0;
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = 0;
  *((_BYTE *)a1 + 127) = 5;
  if (a1 + 13 <= (uint64_t *)"limit" && (char *)a1 + 109 > "limit")
    goto LABEL_70;
  *((_BYTE *)a1 + 108) = 116;
  a1[18] = (uint64_t)off_24C0B4170;
  *((_DWORD *)a1 + 26) = 1768778092;
  *((_BYTE *)a1 + 109) = 0;
  *((_BYTE *)a1 + 128) = 0;
  a1[9] = (uint64_t)&unk_24C0B0268;
  a1[17] = 3000000;
  a1[20] = 0;
  a1[21] = 0;
  a1[19] = 0;
  *((_BYTE *)a1 + 199) = 8;
  if (a1 + 22 <= (uint64_t *)"fraction" && a1 + 23 > (uint64_t *)"fraction")
    goto LABEL_70;
  a1[27] = (uint64_t)off_24C0B4170;
  strcpy((char *)a1 + 176, "fraction");
  *((_BYTE *)a1 + 200) = 0;
  a1[18] = (uint64_t)&unk_24C0B3FF0;
  a1[26] = 0x3FE999999999999ALL;
  a1[29] = 0;
  a1[30] = 0;
  a1[28] = 0;
  *((_BYTE *)a1 + 271) = 8;
  if (a1 + 31 <= (uint64_t *)"interval" && a1 + 32 > (uint64_t *)"interval")
    goto LABEL_70;
  strcpy((char *)a1 + 248, "interval");
  *((_BYTE *)a1 + 272) = 0;
  a1[27] = (uint64_t)&unk_24C0B0268;
  a1[35] = 1000000;
  a1[36] = (uint64_t)off_24C0B4170;
  a1[38] = 0;
  a1[39] = 0;
  *((_BYTE *)a1 + 343) = 5;
  a1[37] = 0;
  if (a1 + 40 <= (uint64_t *)"floor" && (char *)a1 + 325 > "floor")
    goto LABEL_70;
  *((_BYTE *)a1 + 324) = 114;
  *((_DWORD *)a1 + 80) = 1869573222;
  *((_BYTE *)a1 + 325) = 0;
  *((_BYTE *)a1 + 344) = 0;
  a1[36] = (uint64_t)&unk_24C0B0208;
  *((_OWORD *)a1 + 22) = xmmword_208F1B4E0;
  *((_OWORD *)a1 + 23) = xmmword_208F16BF0;
  a1[48] = 0x8000000000000000;
  v49 = a1 + 1;
  v50 = (unint64_t)(a1 + 9);
  v51 = a1 + 18;
  v52 = a1 + 27;
  v53 = a1 + 36;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-Bwe-MaxRttLimit", 22);
  if ((char)v48 < 0)
  {
    v6 = v47;
    if (v47 < 0)
      goto LABEL_70;
    p_p = (char *)__p;
    if (v47)
    {
      if (!__p)
        goto LABEL_70;
    }
  }
  else
  {
    v6 = v48;
    p_p = (char *)&__p;
  }
  webrtc::ParseFieldTrial(&v49, 5, p_p, v6);
  if ((char)v48 < 0)
  {
    operator delete(__p);
    if (*((_BYTE *)a1 + 65))
      goto LABEL_18;
LABEL_23:
    a1[45] = a1[17];
    goto LABEL_18;
  }
  if (!*((_BYTE *)a1 + 65))
    goto LABEL_23;
LABEL_18:
  a1[49] = 0;
  *((_BYTE *)a1 + 480) = 0;
  *((_OWORD *)a1 + 25) = xmmword_208F180A0;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *(_OWORD *)((char *)a1 + 457) = 0u;
  *(_OWORD *)(a1 + 61) = 0u;
  *(_OWORD *)(a1 + 63) = xmmword_208F1B4F0;
  a1[65] = 0x8000000000000000;
  *((_BYTE *)a1 + 528) = 0;
  a1[67] = 0x8000000000000000;
  a1[68] = 0x8000000000000000;
  *((_WORD *)a1 + 276) = 0;
  *((_OWORD *)a1 + 35) = xmmword_208F0A8D0;
  *((_OWORD *)a1 + 36) = xmmword_208F0A8E0;
  a1[74] = 0x8000000000000000;
  *((_DWORD *)a1 + 150) = 0;
  *((_OWORD *)a1 + 38) = 0u;
  v8 = operator new(8uLL);
  a1[78] = (uint64_t)v8;
  a1[80] = 1;
  a1[79] = 3;
  *v8 = 0;
  a1[81] = a3;
  a1[82] = 0x8000000000000000;
  a1[83] = 0x3DCCCCCD3CA3D70ALL;
  a1[84] = 0;
  v9 = webrtc::LossBasedControlConfig::LossBasedControlConfig((uint64_t)(a1 + 85), a2);
  *(_OWORD *)(v9 + 1168) = 0u;
  *(_OWORD *)(v9 + 1152) = 0u;
  a1[233] = 0x8000000000000000;
  a1[234] = 0x8000000000000000;
  *((_BYTE *)a1 + 1880) = 0;
  a1[236] = 0x8000000000000000;
  a1[237] = 0;
  v10 = operator new();
  a1[238] = webrtc::LossBasedBweV2::LossBasedBweV2(v10, a2);
  *((_DWORD *)a1 + 478) = 3;
  a1[240] = (uint64_t)off_24C0B4170;
  a1[241] = 0;
  a1[243] = 0;
  a1[242] = 0;
  *((_BYTE *)a1 + 1975) = 8;
  if (a1 + 244 <= (uint64_t *)"Disabled" && a1 + 245 > (uint64_t *)"Disabled")
    goto LABEL_70;
  strcpy((char *)a1 + 1952, "Disabled");
  *((_WORD *)a1 + 988) = 0;
  a1[240] = (uint64_t)&unk_24C0B41A0;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)*a1 + 16))(&v49, *a1, "WebRTC-BweLossExperiment", 24);
  if (SHIBYTE(v51) < 0)
  {
    v12 = v50;
    if ((v50 & 0x8000000000000000) != 0)
      goto LABEL_70;
    v11 = (int *)v49;
    if (v50)
    {
      if (!v49)
        goto LABEL_70;
    }
  }
  else
  {
    v11 = (int *)&v49;
    v12 = HIBYTE(v51);
  }
  if (v12 >= 7)
  {
    v14 = *v11;
    v15 = *(int *)((char *)v11 + 3);
    v13 = v14 == 1650552389 && v15 == 1684368482;
    if ((HIBYTE(v51) & 0x80) != 0)
    {
LABEL_39:
      operator delete(v49);
      if (!v13)
        goto LABEL_60;
      goto LABEL_40;
    }
  }
  else
  {
    v13 = 0;
    if ((HIBYTE(v51) & 0x80) != 0)
      goto LABEL_39;
  }
  if (!v13)
    goto LABEL_60;
LABEL_40:
  v17 = (float *)(a1 + 83);
  v18 = (float *)a1 + 167;
  LODWORD(__p) = 0;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)*a1 + 16))(&v49, *a1, "WebRTC-BweLossExperiment", 24);
  if (SHIBYTE(v51) >= 0)
    v19 = (const char *)&v49;
  else
    v19 = (const char *)v49;
  v24 = sscanf(v19, "Enabled-%f,%f,%u", a1 + 83, (char *)a1 + 668, &__p);
  if (v24 == 3)
  {
    v25 = *v17;
    if (*v17 <= 0.0)
    {
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/send_side_bandwidth_estimation.cc", 85, "*low_loss_threshold > 0.0f", "\r\a\a\t", v20, v21, v22, v23, COERCE__INT64(v25));
    }
    else if (v25 <= 1.0)
    {
      v26 = *v18;
      if (*v18 > 0.0)
      {
        if (v26 <= 1.0)
        {
          if (v25 <= v26)
          {
            v27 = __p;
            if (__p < 0x20C49B)
            {
              if ((SHIBYTE(v51) & 0x80000000) == 0)
                goto LABEL_51;
              goto LABEL_56;
            }
LABEL_76:
            v45 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/send_side_bandwidth_estimation.cc", 99, "*bitrate_threshold_kbps < std::numeric_limits<int>::max() / 1000", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*> const&)::t, v20, v21, v22, v23, v27);
            webrtc::SendSideBandwidthEstimation::~SendSideBandwidthEstimation((webrtc::SendSideBandwidthEstimation *)v45);
            return;
          }
LABEL_75:
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/send_side_bandwidth_estimation.cc", 93, "*low_loss_threshold <= *high_loss_threshold", "\r\a\a\t", v20, v21, v22, v23, COERCE__INT64(v25));
          goto LABEL_76;
        }
LABEL_74:
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/send_side_bandwidth_estimation.cc", 91, "*high_loss_threshold <= 1.0f", "\r\a\a\t", v20, v21, v22, v23, COERCE__INT64(v26));
        goto LABEL_75;
      }
LABEL_73:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/send_side_bandwidth_estimation.cc", 89, "*high_loss_threshold > 0.0f", "\r\a\a\t", v20, v21, v22, v23, COERCE__INT64(v26));
      goto LABEL_74;
    }
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/send_side_bandwidth_estimation.cc", 87, "*low_loss_threshold <= 1.0f", "\r\a\a\t", v20, v21, v22, v23, COERCE__INT64(v25));
    goto LABEL_73;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/send_side_bandwidth_estimation.cc");
  *(_QWORD *)v17 = 0x3DCCCCCD3CA3D70ALL;
  LODWORD(__p) = 0;
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_51:
    if (v24 != 3)
      goto LABEL_60;
    goto LABEL_57;
  }
LABEL_56:
  operator delete(v49);
  if (v24 != 3)
    goto LABEL_60;
LABEL_57:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/send_side_bandwidth_estimation.cc");
  a1[84] = 1000 * __p;
LABEL_60:
  __p = a1 + 240;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&v49, a2, "WebRTC-Bwe-ReceiverLimitCapsOnly", 32);
  if (SHIBYTE(v51) < 0)
  {
    v42 = v50;
    if ((v50 & 0x8000000000000000) == 0)
    {
      v43 = (char *)v49;
      if (!v50 || v49)
        goto LABEL_65;
    }
LABEL_70:
    __break(1u);
  }
  v42 = HIBYTE(v51);
  v43 = (char *)&v49;
LABEL_65:
  webrtc::ParseFieldTrial(&__p, 1, v43, v42);
  if (SHIBYTE(v51) < 0)
    operator delete(v49);
  v44 = a1[238];
  if (*(_BYTE *)(v44 + 296))
    webrtc::LossBasedBweV2::SetMinMaxBitrate(v44, a1[63], a1[64]);
}

void webrtc::SendSideBandwidthEstimation::~SendSideBandwidthEstimation(webrtc::SendSideBandwidthEstimation *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *((_QWORD *)this + 240) = off_24C0B4170;
  if ((*((char *)this + 1975) & 0x80000000) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 241);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 244));
  v2 = (void *)*((_QWORD *)this + 241);
  if (v2)
  {
LABEL_3:
    *((_QWORD *)this + 242) = v2;
    operator delete(v2);
  }
LABEL_4:
  std::unique_ptr<webrtc::LossBasedBweV2>::reset[abi:sn180100]((uint64_t *)this + 238, 0);
  webrtc::LossBasedControlConfig::~LossBasedControlConfig((webrtc::SendSideBandwidthEstimation *)((char *)this + 680));
  v3 = (void *)*((_QWORD *)this + 78);
  if (v3)
    operator delete(v3);
  std::deque<webrtc::DecodeTimePercentileFilter::Sample>::~deque[abi:sn180100]((void **)this + 52);
  *((_QWORD *)this + 36) = off_24C0B4170;
  if ((*((char *)this + 343) & 0x80000000) == 0)
  {
    v4 = (void *)*((_QWORD *)this + 37);
    if (!v4)
      goto LABEL_9;
    goto LABEL_8;
  }
  operator delete(*((void **)this + 40));
  v4 = (void *)*((_QWORD *)this + 37);
  if (v4)
  {
LABEL_8:
    *((_QWORD *)this + 38) = v4;
    operator delete(v4);
  }
LABEL_9:
  *((_QWORD *)this + 27) = off_24C0B4170;
  if ((*((char *)this + 271) & 0x80000000) == 0)
  {
    v5 = (void *)*((_QWORD *)this + 28);
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  operator delete(*((void **)this + 31));
  v5 = (void *)*((_QWORD *)this + 28);
  if (v5)
  {
LABEL_11:
    *((_QWORD *)this + 29) = v5;
    operator delete(v5);
  }
LABEL_12:
  *((_QWORD *)this + 18) = off_24C0B4170;
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    v6 = (void *)*((_QWORD *)this + 19);
    if (!v6)
      goto LABEL_15;
    goto LABEL_14;
  }
  operator delete(*((void **)this + 22));
  v6 = (void *)*((_QWORD *)this + 19);
  if (v6)
  {
LABEL_14:
    *((_QWORD *)this + 20) = v6;
    operator delete(v6);
  }
LABEL_15:
  *((_QWORD *)this + 9) = off_24C0B4170;
  if ((*((char *)this + 127) & 0x80000000) == 0)
  {
    v7 = (void *)*((_QWORD *)this + 10);
    if (!v7)
      goto LABEL_18;
    goto LABEL_17;
  }
  operator delete(*((void **)this + 13));
  v7 = (void *)*((_QWORD *)this + 10);
  if (v7)
  {
LABEL_17:
    *((_QWORD *)this + 11) = v7;
    operator delete(v7);
  }
LABEL_18:
  *((_QWORD *)this + 1) = off_24C0B4170;
  if (*((char *)this + 63) < 0)
  {
    operator delete(*((void **)this + 5));
    v8 = (void *)*((_QWORD *)this + 2);
    if (!v8)
      return;
  }
  else
  {
    v8 = (void *)*((_QWORD *)this + 2);
    if (!v8)
      return;
  }
  *((_QWORD *)this + 3) = v8;
  operator delete(v8);
}

uint64_t *std::unique_ptr<webrtc::LossBasedBweV2>::reset[abi:sn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 448);
    if (v3)
    {
      *(_QWORD *)(v2 + 456) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 424);
    if (v4)
    {
      *(_QWORD *)(v2 + 432) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 328);
    if (v5)
    {
      *(_QWORD *)(v2 + 336) = v5;
      operator delete(v5);
    }
    if (*(_BYTE *)(v2 + 296))
    {
      v6 = *(void **)(v2 + 56);
      if (v6)
      {
        *(_QWORD *)(v2 + 64) = v6;
        operator delete(v6);
      }
    }
    JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

void webrtc::SendSideBandwidthEstimation::SetSendBitrate(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void **v4;
  unint64_t v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  a1[72] = 0x7FFFFFFFFFFFFFFFLL;
  webrtc::SendSideBandwidthEstimation::UpdateTargetBitrate((uint64_t)a1, a2, a3);
  v4 = (void **)a1[53];
  v5 = a1[54] - (_QWORD)v4;
  if (v5)
  {
    v6 = a1[56];
    v7 = &v4[v6 >> 8];
    v8 = (uint64_t)*v7;
    v9 = (uint64_t)*v7 + 16 * v6;
    v10 = a1 + 57;
    v11 = *(uint64_t *)((char *)v4 + (((a1[57] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)a1 + 456) + v6);
    while (v9 != v11)
    {
      if (!v9)
      {
        __break(1u);
        return;
      }
      v9 += 16;
      if (v9 - v8 == 4096)
      {
        v12 = (uint64_t)v7[1];
        ++v7;
        v8 = v12;
        v9 = v12;
      }
    }
  }
  else
  {
    v10 = a1 + 57;
  }
  *v10 = 0;
  if (v5 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v13 = a1[54];
      v4 = (void **)(a1[53] + 8);
      a1[53] = v4;
      v5 = v13 - (_QWORD)v4;
    }
    while (v5 > 0x10);
  }
  if (v5 >> 3 == 1)
  {
    v14 = 128;
  }
  else
  {
    if (v5 >> 3 != 2)
      return;
    v14 = 256;
  }
  a1[56] = v14;
}

void webrtc::SendSideBandwidthEstimation::UpdateTargetBitrate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  void *__p;
  char v32;
  void *v33[2];
  char v34;

  v5 = *(_QWORD *)(a1 + 576);
  if (*(_BYTE *)(a1 + 1977) && *(_QWORD *)(a1 + 568) < v5)
    v5 = *(_QWORD *)(a1 + 568);
  v6 = *(_QWORD *)(a1 + 504);
  if (*(_QWORD *)(a1 + 512) < v5)
    v5 = *(_QWORD *)(a1 + 512);
  if (v5 >= a2)
    v7 = a2;
  else
    v7 = v5;
  if (v7 < v6)
  {
    if (a3 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v8 = *(_QWORD *)(a1 + 520);
      if (v8 != 0x8000000000000000
        && (a3 == 0x8000000000000000 || v8 == 0x7FFFFFFFFFFFFFFFLL || a3 - v8 < 10000001))
      {
LABEL_19:
        *(_QWORD *)(a1 + 488) = v6;
        if (v6 != *(_QWORD *)(a1 + 496))
          goto LABEL_28;
LABEL_22:
        if (*(unsigned __int8 *)(a1 + 552) == *(unsigned __int8 *)(a1 + 553) && a3 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v16 = *(_QWORD *)(a1 + 656);
          if (v16 != 0x8000000000000000
            && (a3 == 0x8000000000000000 || v16 == 0x7FFFFFFFFFFFFFFFLL || a3 - v16 < 5000001))
          {
            goto LABEL_36;
          }
        }
        goto LABEL_28;
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      webrtc::ToString(v7, (char *)v33);
      webrtc::ToString(*(_QWORD *)(a1 + 504), (char *)&__p);
      rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/send_side_bandwidth_estimation.cc");
      if (v32 < 0)
      {
        operator delete(__p);
        if ((v34 & 0x80000000) == 0)
          goto LABEL_18;
      }
      else if ((v34 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(v33[0]);
    }
LABEL_18:
    *(_QWORD *)(a1 + 520) = a3;
    v6 = *(_QWORD *)(a1 + 504);
    goto LABEL_19;
  }
  v6 = v7;
  *(_QWORD *)(a1 + 488) = v7;
  if (v7 == *(_QWORD *)(a1 + 496))
    goto LABEL_22;
LABEL_28:
  v17 = *(_QWORD *)(a1 + 648);
  v18 = (_QWORD *)operator new();
  v19 = *(_BYTE *)(a1 + 552);
  v20 = *(_DWORD *)(a1 + 468);
  if (rtc::g_clock)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v21 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
        / dword_253EA791C;
  }
  *v18 = &unk_24C0BBD58;
  v18[1] = 1000 * (v21 / 1000000);
  *((_DWORD *)v18 + 4) = v6;
  *((_BYTE *)v18 + 20) = v19;
  *((_DWORD *)v18 + 6) = v20;
  v33[0] = v18;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, v33);
  v22 = v33[0];
  v33[0] = 0;
  if (v22)
    (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
  *(_BYTE *)(a1 + 553) = *(_BYTE *)(a1 + 552);
  v6 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 496) = v6;
  *(_QWORD *)(a1 + 656) = a3;
LABEL_36:
  if (!*(_BYTE *)(a1 + 480))
    return;
  if (*(_QWORD *)(a1 + 472) >= v6)
    v23 = v6;
  else
    v23 = *(_QWORD *)(a1 + 472);
  v24 = (double)v23;
  v25 = *(double *)(a1 + 392);
  if (v25 < (double)v23)
  {
    v26 = 0.0;
    if (a3 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v27 = *(_QWORD *)(a1 + 400);
      v28 = 0x8000000000000000;
      if (v27 != 0x8000000000000000)
      {
        if (v27 != 0x7FFFFFFFFFFFFFFFLL && a3 != 0x8000000000000000)
          v28 = a3 - v27;
        if ((unint64_t)(v28 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
          v26 = exp((double)v28 / -10000000.0);
      }
    }
    if (v23 == 0x8000000000000000)
    {
      v30 = 0xFFF0000000000000;
    }
    else
    {
      if (v23 != 0x7FFFFFFFFFFFFFFFLL)
      {
LABEL_55:
        *(double *)(a1 + 392) = (1.0 - v26) * v24 + v26 * v25;
        goto LABEL_56;
      }
      v30 = 0x7FF0000000000000;
    }
    v24 = *(double *)&v30;
    goto LABEL_55;
  }
LABEL_56:
  *(_QWORD *)(a1 + 400) = a3;
}

void webrtc::SendSideBandwidthEstimation::SetAcknowledgedRate(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  unint64_t v19;

  *(_QWORD *)(a1 + 472) = a2;
  *(_BYTE *)(a1 + 480) = a3;
  if (!a3)
    return;
  v6 = *(_QWORD *)(a1 + 1904);
  if (!*(_BYTE *)(a1 + 680) || *(_BYTE *)(v6 + 296))
  {
    if (!*(_BYTE *)(v6 + 296))
      return;
    goto LABEL_5;
  }
  v7 = *(_QWORD *)(a1 + 1864);
  v8 = v7 + 0x7FFFFFFFFFFFFFFFLL;
  v9 = a4 - v7;
  if (a4 == 0x8000000000000000)
    v9 = 0x8000000000000000;
  if (a4 == 0x7FFFFFFFFFFFFFFFLL)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  if (v8 <= 0xFFFFFFFFFFFFFFFDLL)
    v10 = v9;
  else
    v10 = 1000000;
  *(_QWORD *)(a1 + 1864) = a4;
  v11 = *(_QWORD *)(a1 + 1856);
  v12 = a2;
  if (v11 >= a2)
  {
    v13 = *(_QWORD *)(a1 + 1256);
    if (v13 < 1)
    {
      v16 = 1.0;
      v17 = 9.22337204e18;
      v12 = 0x7FFFFFFFFFFFFFFFLL;
      if (v11 == 0x7FFFFFFFFFFFFFFFLL)
      {
LABEL_30:
        if (v11 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v19 = llround(v16 * v17);
          if (v19 != 0x8000000000000000)
          {
            v12 = v11 - v19;
            if (v19 == 0x7FFFFFFFFFFFFFFFLL || v11 == 0x8000000000000000)
              v12 = 0x8000000000000000;
          }
        }
        goto LABEL_37;
      }
    }
    else
    {
      v14 = INFINITY;
      if (v10 != 0x7FFFFFFFFFFFFFFFLL)
        v14 = (double)v10;
      if (v10 == 0x8000000000000000)
        v14 = -INFINITY;
      v15 = (double)v13;
      if (v13 == 0x7FFFFFFFFFFFFFFFLL)
        v15 = INFINITY;
      v16 = 1.0 - exp(-v14 / v15);
      v17 = 9.22337204e18;
      v12 = 0x7FFFFFFFFFFFFFFFLL;
      if (v11 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_30;
    }
    if (a2 != 0x8000000000000000)
    {
      v18 = a2 == 0x7FFFFFFFFFFFFFFFLL || v11 == 0x8000000000000000;
      v17 = (double)(v11 - a2);
      if (v18)
        v17 = -9.22337204e18;
    }
    goto LABEL_30;
  }
LABEL_37:
  *(_QWORD *)(a1 + 1856) = v12;
  if (*(_BYTE *)(v6 + 296))
LABEL_5:
    webrtc::LossBasedBweV2::SetAcknowledgedBitrate(v6, a2);
}

void webrtc::SendSideBandwidthEstimation::UpdateEstimate(webrtc::SendSideBandwidthEstimation *this, Timestamp a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int64_t v16;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  void **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void **v36;
  void **v37;
  unint64_t v38;
  unint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  unint64_t v47;
  void **v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  uint64_t v62;
  Timestamp *v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  float v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  double v77;
  uint64_t v78;
  int v79;
  double v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  unint64_t v86;
  uint64_t v87;
  Timestamp *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;

  v5 = *((_QWORD *)this + 46);
  v6 = *((_QWORD *)this + 48);
  v7 = 0x7FFFFFFFFFFFFFFFLL;
  if (v6 != 0x7FFFFFFFFFFFFFFFLL && v5 != 0x8000000000000000)
  {
    v9 = v6 - v5 < 0 || v5 == 0x7FFFFFFFFFFFFFFFLL;
    v10 = v9 || v6 == 0x8000000000000000;
    v11 = v10 ? 0 : v6 - v5;
    v12 = *((_QWORD *)this + 47);
    v13 = v12 == 0x8000000000000000 ? *((_QWORD *)this + 47) : v12 + v11;
    if (v11 != 0x7FFFFFFFFFFFFFFFLL && v12 != 0x7FFFFFFFFFFFFFFFLL)
      v7 = v13;
  }
  if (v7 > *((_QWORD *)this + 45))
  {
    if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_31;
    v15 = *((_QWORD *)this + 73);
    v16 = 0x8000000000000000;
    if (v15 == 0x8000000000000000)
      goto LABEL_31;
    if (v15 != 0x7FFFFFFFFFFFFFFFLL && a2.var0 != 0x8000000000000000)
      v16 = a2.var0 - v15;
    if (v16 >= *((_QWORD *)this + 35))
    {
LABEL_31:
      v18 = *((_QWORD *)this + 44);
      v19 = *((_QWORD *)this + 61);
      if (v19 <= v18)
        goto LABEL_168;
      *((Timestamp *)this + 73) = a2;
      v20 = llround(*((double *)this + 26) * (double)v19);
      if (v20 <= v18)
        v19 = v18;
      else
        v19 = v20;
      if (v19 == 0x8000000000000000)
      {
        v21 = 0xFFF0000000000000;
      }
      else
      {
        if (v19 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v77 = (double)v19;
          goto LABEL_139;
        }
        v21 = 0x7FF0000000000000;
      }
      v77 = *(double *)&v21;
LABEL_139:
      if (v77 >= *((double *)this + 49))
        v77 = *((double *)this + 49);
      *((double *)this + 49) = v77;
      *((Timestamp *)this + 50) = a2;
      goto LABEL_168;
    }
LABEL_135:
    v19 = *((_QWORD *)this + 61);
    goto LABEL_168;
  }
  if (!*((_BYTE *)this + 552))
  {
    v25 = *((_QWORD *)this + 74);
    if ((unint64_t)(v25 - 0x7FFFFFFFFFFFFFFFLL) < 2
      || ((v26 = a2.var0 - v25, a2.var0 != 0x8000000000000000) ? (v27 = v26 < 2000000) : (v27 = 1),
          !v27 ? (v28 = 0) : (v28 = 1),
          a2.var0 != 0x7FFFFFFFFFFFFFFFLL && v28))
    {
      v29 = *((_QWORD *)this + 238);
      v30 = *(unsigned __int8 *)(v29 + 296);
      if (!*(_BYTE *)(v29 + 296)
        || (unint64_t)(*(_QWORD *)(v29 + 312) + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL
        || *(_DWORD *)(v29 + 320) < *(_DWORD *)(v29 + 252)
        || !*(_BYTE *)(v29 + 250))
      {
        v31 = *((_QWORD *)this + 61);
        v32 = *((_QWORD *)this + 71);
        v33 = v32 + 0x7FFFFFFFFFFFFFFFLL;
        if (v32 <= v31)
          v32 = *((_QWORD *)this + 61);
        if (v33 >= 0xFFFFFFFFFFFFFFFELL)
          v32 = *((_QWORD *)this + 61);
        v34 = *((_QWORD *)this + 72);
        v35 = v34 + 0x7FFFFFFFFFFFFFFFLL;
        if (v34 <= v32)
          v34 = v32;
        if (v35 >= 0xFFFFFFFFFFFFFFFELL)
          v19 = v32;
        else
          v19 = v34;
        if (!v30 && *((_BYTE *)this + 680))
        {
          *((_QWORD *)this + 231) = v19;
          a3 = 0.0;
          *(_OWORD *)((char *)this + 1832) = 0u;
        }
        if (v19 != v31)
        {
          v36 = (void **)*((_QWORD *)this + 53);
          v37 = (void **)*((_QWORD *)this + 54);
          v38 = (char *)v37 - (char *)v36;
          if (v37 == v36)
          {
            v43 = (_QWORD *)((char *)this + 456);
          }
          else
          {
            v39 = *((_QWORD *)this + 56);
            v40 = &v36[v39 >> 8];
            v41 = (uint64_t)*v40;
            v42 = (uint64_t)*v40 + 16 * v39;
            v43 = (_QWORD *)((char *)this + 456);
            v44 = *(uint64_t *)((char *)v36 + (((*((_QWORD *)this + 57) + v39) >> 5) & 0x7FFFFFFFFFFFFF8))
                + 16 * (*((_BYTE *)this + 456) + v39);
            while (v42 != v44)
            {
              if (!v42)
                goto LABEL_171;
              v42 += 16;
              if (v42 - v41 == 4096)
              {
                v45 = (uint64_t)v40[1];
                ++v40;
                v41 = v45;
                v42 = v45;
              }
            }
          }
          *v43 = 0;
          if (v38 >= 0x11)
          {
            do
            {
              operator delete(*v36);
              v37 = (void **)*((_QWORD *)this + 54);
              v36 = (void **)(*((_QWORD *)this + 53) + 8);
              *((_QWORD *)this + 53) = v36;
              v38 = (char *)v37 - (char *)v36;
            }
            while ((unint64_t)((char *)v37 - (char *)v36) > 0x10);
          }
          v81 = (_QWORD *)((char *)this + 416);
          v82 = v38 >> 3;
          if (v82 == 1)
          {
            v83 = 128;
          }
          else
          {
            if (v82 != 2)
            {
LABEL_153:
              if (*((_BYTE *)this + 680) && !*(_BYTE *)(*((_QWORD *)this + 238) + 296))
              {
                *(Timestamp *)&v97 = a2;
                *((_QWORD *)&v97 + 1) = v19;
                std::deque<std::pair<webrtc::Timestamp,webrtc::DataRate>>::push_back(v81, &v97);
                goto LABEL_168;
              }
              v84 = 32 * ((char *)v37 - (char *)v36) - 1;
              v85 = *((_QWORD *)this + 61);
              if (v37 == v36)
                v84 = 0;
              if (v84 == *((_QWORD *)this + 57) + *((_QWORD *)this + 56))
              {
                std::deque<std::pair<webrtc::Timestamp,webrtc::DataRate>>::__add_back_capacity((uint64_t)v81);
                v36 = (void **)*((_QWORD *)this + 53);
                v37 = (void **)*((_QWORD *)this + 54);
              }
              if (v37 != v36)
              {
                v86 = *((_QWORD *)this + 57) + *((_QWORD *)this + 56);
                v87 = *(uint64_t *)((char *)v36 + ((v86 >> 5) & 0x7FFFFFFFFFFFFF8));
                if (v87)
                {
                  v88 = (Timestamp *)(v87 + 16 * v86);
                  v88->var0 = a2.var0;
                  v88[1].var0 = v85;
                  ++*((_QWORD *)this + 57);
                  goto LABEL_168;
                }
              }
              goto LABEL_171;
            }
            v83 = 256;
          }
          *((_QWORD *)this + 56) = v83;
          goto LABEL_153;
        }
      }
    }
  }
  v22 = *((_QWORD *)this + 57);
  if (!v22)
    goto LABEL_99;
  if (a2.var0 == 0x8000000000000000)
  {
    v46 = (void **)*((_QWORD *)this + 53);
    v47 = *((_QWORD *)this + 56);
    while ((*(_QWORD **)((char *)v46 + ((v47 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v47] == 0x8000000000000000)
    {
      --v22;
      *((_QWORD *)this + 56) = ++v47;
      *((_QWORD *)this + 57) = v22;
      if (v47 >= 0x200)
      {
        operator delete(*v46);
        v46 = (void **)(*((_QWORD *)this + 53) + 8);
        *((_QWORD *)this + 53) = v46;
        v22 = *((_QWORD *)this + 57);
        v47 = *((_QWORD *)this + 56) - 256;
        *((_QWORD *)this + 56) = v47;
      }
      if (!v22)
        goto LABEL_99;
    }
  }
  else
  {
    if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v23 = (void **)*((_QWORD *)this + 53);
      v24 = *((_QWORD *)this + 56);
      do
      {
        --v22;
        *((_QWORD *)this + 56) = ++v24;
        *((_QWORD *)this + 57) = v22;
        if (v24 >= 0x200)
        {
          operator delete(*v23);
          v23 = (void **)(*((_QWORD *)this + 53) + 8);
          *((_QWORD *)this + 53) = v23;
          v22 = *((_QWORD *)this + 57);
          v24 = *((_QWORD *)this + 56) - 256;
          *((_QWORD *)this + 56) = v24;
        }
      }
      while (v22);
LABEL_99:
      v22 = 0;
      goto LABEL_100;
    }
    v48 = (void **)*((_QWORD *)this + 53);
    v49 = *((_QWORD *)this + 56);
    while (1)
    {
      v50 = (*(_QWORD **)((char *)v48 + ((v49 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v49];
      if (v50 != 0x8000000000000000 && (v50 == 0x7FFFFFFFFFFFFFFFLL || a2.var0 - v50 < 999001))
        break;
      --v22;
      *((_QWORD *)this + 56) = ++v49;
      *((_QWORD *)this + 57) = v22;
      if (v49 >= 0x200)
      {
        operator delete(*v48);
        v48 = (void **)(*((_QWORD *)this + 53) + 8);
        *((_QWORD *)this + 53) = v48;
        v22 = *((_QWORD *)this + 57);
        v49 = *((_QWORD *)this + 56) - 256;
        *((_QWORD *)this + 56) = v49;
      }
      if (!v22)
        goto LABEL_99;
    }
  }
  do
  {
    v52 = *((_QWORD *)this + 56);
    v53 = *((_QWORD *)this + 53);
    if (*((_QWORD *)this + 61) > *(_QWORD *)(*(_QWORD *)(v53
                                                        + (((unint64_t)(v52 + v22 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * (v52 + v22 - 1)
                                            + 8))
      break;
    v54 = *((_QWORD *)this + 54);
    *((_QWORD *)this + 57) = v22 - 1;
    if (v54 == v53)
      v55 = 0;
    else
      v55 = 32 * (v54 - v53) - 1;
    v56 = v55 - (v22 + v52) + 1;
    --v22;
    if (v56 >= 0x200)
    {
      operator delete(*(void **)(v54 - 8));
      *((_QWORD *)this + 54) -= 8;
      v22 = *((_QWORD *)this + 57);
    }
  }
  while (v22);
LABEL_100:
  v57 = *((_QWORD *)this + 53);
  v58 = *((_QWORD *)this + 54);
  v59 = 32 * (v58 - v57) - 1;
  v60 = *((_QWORD *)this + 61);
  if (v58 == v57)
    v59 = 0;
  if (v59 == *((_QWORD *)this + 56) + v22)
  {
    std::deque<std::pair<webrtc::Timestamp,webrtc::DataRate>>::__add_back_capacity((uint64_t)this + 416);
    v57 = *((_QWORD *)this + 53);
    v58 = *((_QWORD *)this + 54);
  }
  if (v58 == v57
    || (v61 = *((_QWORD *)this + 57) + *((_QWORD *)this + 56),
        (v62 = *(_QWORD *)(v57 + ((v61 >> 5) & 0x7FFFFFFFFFFFFF8))) == 0))
  {
LABEL_171:
    __break(1u);
    goto LABEL_172;
  }
  v63 = (Timestamp *)(v62 + 16 * v61);
  v63->var0 = a2.var0;
  v63[1].var0 = v60;
  ++*((_QWORD *)this + 57);
  v64 = *((_QWORD *)this + 68);
  if ((unint64_t)(v64 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
    goto LABEL_135;
  v65 = *((_QWORD *)this + 238);
  if (!*((_BYTE *)this + 680))
  {
    if (!*(_BYTE *)(v65 + 296))
      goto LABEL_114;
    goto LABEL_112;
  }
  if (*(_BYTE *)(v65 + 296))
  {
LABEL_112:
    if ((unint64_t)(*(_QWORD *)(v65 + 312) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL
      && *(_DWORD *)(v65 + 320) >= *(_DWORD *)(v65 + 252))
    {
      webrtc::LossBasedBweV2::GetLossBasedResult((webrtc::LossBasedBweV2 *)v65);
      v19 = v78;
      *((_DWORD *)this + 478) = v79;
      goto LABEL_168;
    }
    goto LABEL_114;
  }
  if ((unint64_t)(*((_QWORD *)this + 236) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v19 = webrtc::LossBasedBandwidthEstimation::Update((uint64_t)this + 680, a2.var0, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 53) + ((*((_QWORD *)this + 56) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * *((_QWORD *)this + 56)+ 8), *((_QWORD *)this + 72), *((_QWORD *)this + 70));
    goto LABEL_168;
  }
LABEL_114:
  if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_135;
  v66 = a2.var0 - v64;
  if (a2.var0 == 0x8000000000000000)
    v66 = 0x8000000000000000;
  if (v66 >= (uint64_t)llround(6000000.0))
    goto LABEL_135;
  v67 = *((_QWORD *)this + 61);
  v68 = *((_QWORD *)this + 84);
  if (v67 >= v68)
  {
    v69 = *((unsigned __int8 *)this + 552);
    v70 = (float)v69 * 0.0039062;
    if (v70 > *((float *)this + 166))
    {
      if (v67 <= v68 || v70 <= *((float *)this + 167) || *((_BYTE *)this + 528))
        goto LABEL_135;
      v71 = *((_QWORD *)this + 73);
      v72 = a2.var0 - v71;
      if (v71 == 0x7FFFFFFFFFFFFFFFLL || a2.var0 == 0x8000000000000000)
        v72 = 0x8000000000000000;
      v74 = *((_QWORD *)this + 70);
      v75 = v74 + 300000;
      if (v74 == 0x8000000000000000)
        v75 = *((_QWORD *)this + 70);
      v76 = v74 == 0x7FFFFFFFFFFFFFFFLL ? *((_QWORD *)this + 70) : v75;
      if (v71 != 0x8000000000000000 && v72 < v76)
        goto LABEL_135;
      *((Timestamp *)this + 73) = a2;
      a3 = (double)v67 * (double)(int)(512 - v69) * 0.001953125;
      if (a3 == INFINITY)
      {
        v19 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_175;
      }
LABEL_172:
      if (a3 == -INFINITY)
        v19 = 0x8000000000000000;
      else
        v19 = (uint64_t)a3;
LABEL_175:
      *((_BYTE *)this + 528) = 1;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v90, v91, v92, v93, v94, v95, v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/send_side_bandwidth_estimation.cc");
      goto LABEL_168;
    }
  }
  v80 = (double)*(uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 53) + ((*((_QWORD *)this + 56) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * *((_QWORD *)this + 56)
                           + 8)
      * 1.08
      + 0.5;
  if (v80 == INFINITY)
  {
    v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    if (v80 != -INFINITY)
    {
      v89 = (uint64_t)v80;
      v19 = 0x7FFFFFFFFFFFFFFFLL;
      if ((uint64_t)v80 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_168;
      if (v89 != 0x8000000000000000)
      {
        v19 = v89 + 1000;
        goto LABEL_168;
      }
    }
    v19 = 0x8000000000000000;
  }
LABEL_168:
  webrtc::SendSideBandwidthEstimation::UpdateTargetBitrate((uint64_t)this, v19, a2.var0);
}

unint64_t webrtc::SendSideBandwidthEstimation::UpdateUmaStatsPacketsLost(unint64_t this, Timestamp a2, int a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  char **v17;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;

  v4 = this;
  v5 = 0;
  v6 = (*(_QWORD *)(this + 488) + 500) / 1000;
  v7 = 1000 * v6;
  v8 = (unint64_t)((((125 * v6) & 0x1FFFFFFFFFFFFFFFLL) * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
  if (1000 * v6 - 1000 * v8 > 0x1F3)
    ++v8;
  v9 = -1000 * v6;
  v10 = v9 / 0x3E8;
  if (v9 % 0x3E8 <= 0x1F4)
    v11 = 0;
  else
    v11 = -1;
  v12 = v11 - v10;
  v42 = v7;
  if (v7 >= 0)
    v13 = v8;
  else
    v13 = v12;
  v14 = **(_QWORD **)(this + 624);
  do
  {
    if ((v14 & (1 << v5)) == 0)
    {
      if (v13 >= *((int *)v17 + 2))
      {
        if (v5 == 2)
        {
          this = atomic_load(&qword_253EA5810);
          if (!this)
          {
            if (!*v17)
              goto LABEL_91;
            while (!__ldaxr(&qword_253EA5810))
            {
              if (!__stlxr(0, &qword_253EA5810))
                goto LABEL_14;
            }
            goto LABEL_45;
          }
        }
        else if (v5 == 1)
        {
          this = atomic_load(&qword_253EA5808);
          if (!this)
          {
            if (!*v17)
            {
LABEL_91:
              __break(1u);
              return this;
            }
            while (!__ldaxr(&qword_253EA5808))
            {
              if (!__stlxr(0, &qword_253EA5808))
                goto LABEL_14;
            }
            goto LABEL_45;
          }
        }
        else
        {
          if (v5)
          {
LABEL_14:
            v16 = *(uint64_t **)(v4 + 624);
            v14 = *v16 | (1 << v5);
            *v16 = v14;
            goto LABEL_15;
          }
          this = atomic_load(&_MergedGlobals_19);
          if (!this)
          {
            if (!*v17)
              goto LABEL_91;
            while (!__ldaxr(&_MergedGlobals_19))
            {
              if (!__stlxr(0, &_MergedGlobals_19))
                goto LABEL_14;
            }
LABEL_45:
            __clrex();
            goto LABEL_14;
          }
        }
        v20 = 0x7FFFFFFFFFFFFFFFLL;
        if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL
          || (v21 = *(_QWORD *)(v4 + 592), v21 == 0x8000000000000000)
          || (v20 = 0x8000000000000000, a2.var0 != 0x8000000000000000)
          && v21 != 0x7FFFFFFFFFFFFFFFLL
          && (v20 = a2.var0 - v21, a2.var0 - v21 >= 0))
        {
          if (v20 % 0x3E8 <= 0x1F3)
            v15 = v20 / 0x3E8;
          else
            v15 = v20 / 0x3E8 + 1;
        }
        else
        {
          v22 = -(uint64_t)v20;
          v23 = v22 / 0x3E8;
          if (v22 % 0x3E8 <= 0x1F4)
            v24 = 0;
          else
            v24 = -1;
          v15 = v24 - v23;
        }
        this = webrtc::metrics::HistogramAdd(this, v15);
        goto LABEL_14;
      }
    }
LABEL_15:
    ++v5;
  }
  while (v5 != 3);
  v26 = *(_QWORD *)(v4 + 592);
  if ((unint64_t)(v26 - 0x7FFFFFFFFFFFFFFFLL) < 2
    || ((v27 = a2.var0 - v26, a2.var0 != 0x8000000000000000) ? (v28 = v27 < 2000000) : (v28 = 1),
        !v28 ? (v29 = 0) : (v29 = 1),
        a2.var0 != 0x7FFFFFFFFFFFFFFFLL && (v29 & 1) != 0))
  {
    *(_DWORD *)(v4 + 600) += a3;
    return this;
  }
  v30 = *(_DWORD *)(v4 + 616);
  if (v30 != 1)
  {
    if (v30)
      return this;
    *(_DWORD *)(v4 + 616) = 1;
    *(_QWORD *)(v4 + 608) = v42;
    v31 = atomic_load(&qword_253EA5818);
    if (v31)
    {
      webrtc::metrics::HistogramAdd(v31, *(_DWORD *)(v4 + 600));
    }
    else
    {
      while (!__ldaxr(&qword_253EA5818))
      {
        if (!__stlxr(0, &qword_253EA5818))
          goto LABEL_64;
      }
      __clrex();
    }
LABEL_64:
    this = atomic_load(&qword_253EA5820);
    if (this)
    {
      v33 = *(_QWORD *)(v4 + 608);
      v34 = v33 / 0x3E8uLL;
      if (v33 % 0x3E8uLL > 0x1F3)
        LODWORD(v34) = v34 + 1;
      if (-v33 % 0x3E8uLL <= 0x1F4)
        v35 = 0;
      else
        v35 = -1;
      if (v33 < 0)
        v36 = v35 - -v33 / 0x3E8uLL;
      else
        LODWORD(v36) = v34;
      return webrtc::metrics::HistogramAdd(this, v36);
    }
    while (!__ldaxr(&qword_253EA5820))
    {
      if (!__stlxr(0, &qword_253EA5820))
        return this;
    }
    goto LABEL_90;
  }
  if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL || v27 >= 20000000)
  {
    *(_DWORD *)(v4 + 616) = 2;
    v38 = *(_QWORD *)(v4 + 608);
    v39 = v38 / 0x3E8uLL;
    if (v38 % 0x3E8uLL > 0x1F3)
      LODWORD(v39) = v39 + 1;
    if (-v38 % 0x3E8uLL <= 0x1F4)
      v40 = 0;
    else
      v40 = -1;
    if (v38 < 0)
      v39 = v40 - -v38 / 0x3E8uLL;
    this = atomic_load(&qword_253EA5828);
    if (this)
    {
      LODWORD(v36) = (v39 - v13) & ~(((int)v39 - (int)v13) >> 31);
      return webrtc::metrics::HistogramAdd(this, v36);
    }
    while (!__ldaxr(&qword_253EA5828))
    {
      if (!__stlxr(0, &qword_253EA5828))
        return this;
    }
LABEL_90:
    __clrex();
  }
  return this;
}

void std::deque<std::pair<webrtc::Timestamp,webrtc::DataRate>>::push_back(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 32 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::pair<webrtc::Timestamp,webrtc::DataRate>>::__add_back_capacity((uint64_t)a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4 || (v7 = *(_QWORD *)(v4 + (((a1[5] + a1[4]) >> 5) & 0x7FFFFFFFFFFFFF8))) == 0)
  {
    __break(1u);
  }
  else
  {
    *(_OWORD *)(v7 + 16 * (*((_BYTE *)a1 + 40) + *((_BYTE *)a1 + 32))) = *a2;
    ++a1[5];
  }
}

void std::deque<std::pair<webrtc::Timestamp,webrtc::DataRate>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  BOOL v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v30 = *(char **)a1;
    if ((unint64_t)v7 > *(_QWORD *)a1)
    {
      v31 = (uint64_t)&v7[-*(_QWORD *)a1] >> 3;
      if (v31 >= -1)
        v32 = v31 + 1;
      else
        v32 = v31 + 2;
      v33 = v32 >> 1;
      v34 = -v33;
      v35 = &v7[-8 * v33];
      v36 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v33], v7, v5 - v7);
        v7 = *(char **)(a1 + 8);
      }
      v5 = &v35[v36];
      v37 = &v7[8 * v34];
      goto LABEL_32;
    }
    v39 = (v5 - v30) >> 2;
    if (v5 == v30)
      v39 = 1;
    if (v39 >> 61)
      goto LABEL_108;
    v40 = v39 >> 2;
    v41 = 8 * v39;
    v42 = (char *)operator new(8 * v39);
    v43 = &v42[8 * v40];
    v45 = v5 - v7;
    v44 = v5 == v7;
    v5 = v43;
    if (!v44)
    {
      v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
      v46 = v45 - 8;
      if ((unint64_t)(v45 - 8) < 0x38)
      {
        v47 = &v42[8 * v40];
        do
        {
LABEL_91:
          v100 = *(_QWORD *)v7;
          v7 += 8;
          *(_QWORD *)v47 = v100;
          v47 += 8;
        }
        while (v47 != v5);
        goto LABEL_92;
      }
      v93 = &v42[8 * v40];
      v47 = v93;
      if ((unint64_t)(v93 - v7) < 0x20)
        goto LABEL_91;
      v94 = (v46 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v47 = &v43[v95];
      v7 += v95;
      v96 = (__int128 *)(v6 + 3);
      v97 = v93 + 16;
      v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v99 = *v96;
        *(v97 - 1) = *(v96 - 1);
        *v97 = v99;
        v96 += 2;
        v97 += 2;
        v98 -= 4;
      }
      while (v98);
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_91;
    }
LABEL_92:
    *(_QWORD *)a1 = v42;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = &v42[v41];
    if (v30)
    {
      operator delete(v30);
      v5 = *(char **)(a1 + 16);
    }
LABEL_4:
    if (!v5)
    {
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
LABEL_5:
    *(_QWORD *)v5 = v8;
LABEL_10:
    *(_QWORD *)(a1 + 16) += 8;
    return;
  }
  v10 = *(char **)(a1 + 16);
  v9 = *(char **)(a1 + 24);
  v12 = *(char **)a1;
  v11 = *(char **)(a1 + 8);
  v13 = v10 - v11;
  v14 = (v10 - v11) >> 3;
  v15 = (uint64_t)&v9[-*(_QWORD *)a1];
  if (v14 < (unint64_t)(v15 >> 3))
  {
    v16 = operator new(0x1000uLL);
    v17 = v16;
    if (v9 != v10)
    {
      if (v10)
      {
        *(_QWORD *)v10 = v16;
        goto LABEL_10;
      }
      goto LABEL_107;
    }
    if (v11 == v12)
    {
      v70 = (v9 - v11) >> 2;
      if (v10 == v11)
        v70 = 1;
      if (v70 >> 61)
        goto LABEL_108;
      v71 = (v70 + 3) >> 2;
      v72 = 8 * v70;
      v73 = (char *)operator new(8 * v70);
      v38 = &v73[8 * v71];
      v74 = v38;
      if (v10 != v11)
      {
        v74 = &v38[8 * v14];
        v75 = &v73[8 * v71];
        v76 = v11;
        if ((unint64_t)(v13 - 8) < 0x38)
          goto LABEL_111;
        v77 = &v73[8 * v71];
        v75 = v77;
        v76 = v11;
        if ((unint64_t)(v77 - v11) < 0x20)
          goto LABEL_111;
        v78 = ((unint64_t)(v13 - 8) >> 3) + 1;
        v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v38[v79];
        v76 = &v11[v79];
        v80 = (__int128 *)(v11 + 16);
        v81 = v77 + 16;
        v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v83 = *v80;
          *(v81 - 1) = *(v80 - 1);
          *v81 = v83;
          v80 += 2;
          v81 += 2;
          v82 -= 4;
        }
        while (v82);
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_111:
          do
          {
            v84 = *(_QWORD *)v76;
            v76 += 8;
            *(_QWORD *)v75 = v84;
            v75 += 8;
          }
          while (v75 != v74);
        }
      }
      *(_QWORD *)a1 = v73;
      *(_QWORD *)(a1 + 8) = v38;
      *(_QWORD *)(a1 + 16) = v74;
      *(_QWORD *)(a1 + 24) = &v73[v72];
      if (v11)
      {
        operator delete(v11);
        v38 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v38 = v11;
    }
    *((_QWORD *)v38 - 1) = v17;
    v85 = *(char **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v85 - 8;
    v8 = *((_QWORD *)v85 - 1);
    *(_QWORD *)(a1 + 8) = v85;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v86 = *(char **)a1;
    if ((unint64_t)v85 > *(_QWORD *)a1)
    {
      v87 = (uint64_t)&v85[-*(_QWORD *)a1] >> 3;
      if (v87 >= -1)
        v88 = v87 + 1;
      else
        v88 = v87 + 2;
      v89 = v88 >> 1;
      v90 = -v89;
      v91 = &v85[-8 * v89];
      v92 = v5 - v85;
      if (v5 != v85)
      {
        memmove(&v85[-8 * v89], v85, v5 - v85);
        v85 = *(char **)(a1 + 8);
      }
      v5 = &v91[v92];
      v37 = &v85[8 * v90];
LABEL_32:
      *(_QWORD *)(a1 + 8) = v37;
      *(_QWORD *)(a1 + 16) = v5;
      goto LABEL_5;
    }
    v101 = (v5 - v86) >> 2;
    if (v5 == v86)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v85;
      v44 = v5 == v85;
      v5 = v105;
      if (v44)
        goto LABEL_105;
      v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
      v107 = v106 - 8;
      if ((unint64_t)(v106 - 8) >= 0x38)
      {
        v109 = &v104[8 * v102];
        v108 = v109;
        if ((unint64_t)(v109 - v85) >= 0x20)
        {
          v110 = (v107 >> 3) + 1;
          v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = &v105[v111];
          v112 = &v85[v111];
          v113 = (__int128 *)(v85 + 16);
          v114 = v109 + 16;
          v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          v85 = v112;
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_105:
            *(_QWORD *)a1 = v104;
            *(_QWORD *)(a1 + 8) = v105;
            *(_QWORD *)(a1 + 16) = v5;
            *(_QWORD *)(a1 + 24) = &v104[v103];
            if (v86)
            {
              operator delete(v86);
              v5 = *(char **)(a1 + 16);
            }
            goto LABEL_4;
          }
        }
      }
      else
      {
        v108 = &v104[8 * v102];
      }
      do
      {
        v117 = *(_QWORD *)v85;
        v85 += 8;
        *(_QWORD *)v108 = v117;
        v108 += 8;
      }
      while (v108 != v5);
      goto LABEL_105;
    }
LABEL_108:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v18 = v15 >> 2;
  if (v9 == v12)
    v19 = 1;
  else
    v19 = v18;
  if (v19 >> 61)
    goto LABEL_108;
  v20 = (char *)operator new(8 * v19);
  v21 = &v20[8 * v14];
  v22 = &v20[8 * v19];
  v23 = operator new(0x1000uLL);
  v24 = v23;
  if (v14 != v19)
    goto LABEL_21;
  if (v13 >= 1)
  {
    v25 = v14 + 2;
    if (v14 >= -1)
      v25 = v14 + 1;
    v21 -= 8 * (v25 >> 1);
LABEL_21:
    *(_QWORD *)v21 = v23;
    v26 = v21 + 8;
    if (v10 != v11)
      goto LABEL_48;
    goto LABEL_22;
  }
  v48 = v13 >> 2;
  if (v10 == v11)
    v48 = 1;
  if (v48 >> 61)
    goto LABEL_108;
  v49 = 8 * v48;
  v21 = (char *)operator new(8 * v48);
  operator delete(v20);
  v22 = &v21[v49];
  v50 = *(char **)(a1 + 8);
  v10 = *(char **)(a1 + 16);
  v20 = v21;
  *(_QWORD *)v21 = v24;
  v26 = v21 + 8;
  if (v10 != v50)
  {
    while (1)
    {
LABEL_48:
      if (v21 == v20)
      {
        if (v26 >= v22)
        {
          v55 = (v22 - v21) >> 2;
          if (v22 == v21)
            v55 = 1;
          if (v55 >> 61)
            goto LABEL_108;
          v56 = (v55 + 3) >> 2;
          v57 = 8 * v55;
          v58 = (char *)operator new(8 * v55);
          v20 = v58;
          v51 = &v58[8 * v56];
          v28 = v51;
          v59 = v26 - v21;
          if (v26 != v21)
          {
            v28 = &v51[v59 & 0xFFFFFFFFFFFFFFF8];
            v60 = v59 - 8;
            v61 = &v58[8 * v56];
            v62 = v21;
            if (v60 < 0x38)
              goto LABEL_112;
            v61 = &v58[8 * v56];
            v62 = v21;
            if ((unint64_t)(v61 - v21) < 0x20)
              goto LABEL_112;
            v63 = (v60 >> 3) + 1;
            v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
            v61 = &v51[v64];
            v62 = &v21[v64];
            v65 = (__int128 *)(v21 + 16);
            v66 = &v58[8 * v56 + 16];
            v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v68 = *v65;
              *((_OWORD *)v66 - 1) = *(v65 - 1);
              *(_OWORD *)v66 = v68;
              v65 += 2;
              v66 += 32;
              v67 -= 4;
            }
            while (v67);
            if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_112:
              do
              {
                v69 = *(_QWORD *)v62;
                v62 += 8;
                *(_QWORD *)v61 = v69;
                v61 += 8;
              }
              while (v61 != v28);
            }
          }
          v22 = &v58[v57];
          operator delete(v21);
        }
        else
        {
          v53 = (v22 - v26) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v28 = &v26[8 * (v54 >> 1)];
          v51 = &v21[8 * (v54 >> 1)];
          if (v26 == v21)
          {
            v20 = v26;
          }
          else
          {
            memmove(&v21[8 * (v54 >> 1)], v21, v26 - v21);
            v20 = v21;
          }
        }
      }
      else
      {
        v51 = v21;
        v28 = v26;
      }
      v52 = *((_QWORD *)v10 - 1);
      v10 -= 8;
      *((_QWORD *)v51 - 1) = v52;
      v27 = v51 - 8;
      v26 = v28;
      v21 = v27;
      if (v10 == *(char **)(a1 + 8))
        goto LABEL_23;
    }
  }
LABEL_22:
  v27 = v21;
  v28 = v26;
LABEL_23:
  v29 = *(char **)a1;
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v28;
  *(_QWORD *)(a1 + 24) = v22;
  if (v29)
    operator delete(v29);
}

uint64_t webrtc::SendStatisticsProxy::SendStatisticsProxy(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  std::string *v10;
  __int128 v11;
  pthread_mutexattr_t *sig;
  unint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  pthread_mutexattr_t *p_p;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const char *v31;
  char *v32;
  char *v34;
  size_t v35;
  char *opaque;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  size_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  char *v48;
  size_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  pthread_mutexattr_t __p;
  unsigned __int8 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0C0AC0;
  *(_QWORD *)(a1 + 8) = &unk_24C0C0B88;
  *(_QWORD *)(a1 + 16) = &unk_24C0C0BB0;
  *(_QWORD *)(a1 + 24) = &unk_24C0C0BD8;
  *(_QWORD *)(a1 + 32) = &unk_24C0C0C00;
  *(_QWORD *)(a1 + 40) = &unk_24C0C0C28;
  *(_QWORD *)(a1 + 48) = a2;
  v10 = (std::string *)(a1 + 56);
  if (*(char *)(a3 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a3 + 120), *(_QWORD *)(a3 + 128));
  }
  else
  {
    v11 = *(_OWORD *)(a3 + 120);
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 136);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  webrtc::RtpConfig::RtpConfig(a1 + 80, a3);
  (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a5 + 16))(&__p, a5, "WebRTC-VP8-Forced-Fallback-Encoder-v2", 37);
  if ((char)v54 < 0)
  {
    v13 = *(_QWORD *)__p.__opaque;
    if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0)
      goto LABEL_111;
    sig = (pthread_mutexattr_t *)__p.__sig;
    if (*(_QWORD *)__p.__opaque)
    {
      if (!__p.__sig)
        goto LABEL_111;
    }
  }
  else
  {
    sig = &__p;
    v13 = v54;
  }
  if (v13 < 7
    || ((v14 = sig->__sig, v15 = *(_DWORD *)((char *)&sig->__sig + 3), v14 == 1650552389)
      ? (v16 = v15 == 1684368482)
      : (v16 = 0),
        !v16))
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    if ((v54 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  if ((char)v54 < 0)
  {
    if (*(_QWORD *)__p.__opaque < 7uLL)
      goto LABEL_112;
    v34 = (char *)(__p.__sig + 7);
    v35 = *(_QWORD *)__p.__opaque - 7;
    if ((unint64_t)(*(_QWORD *)__p.__opaque - 7) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_112;
  }
  else
  {
    if ((char)v54 <= 6)
      goto LABEL_112;
    v34 = (char *)&__p.__sig + 7;
    v35 = v54 - 7;
    if (v35 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_112;
  }
  if (v35 > 0x16)
  {
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    v37 = (char *)operator new(v39 + 1);
    v49 = v35;
    v50 = v40 | 0x8000000000000000;
    v48 = v37;
    v38 = &v37[v35];
    if (v37 > v34)
      goto LABEL_56;
  }
  else
  {
    HIBYTE(v50) = v35;
    v37 = (char *)&v48;
    v38 = (char *)&v48 + v35;
    if (&v48 > (char **)v34)
      goto LABEL_56;
  }
  if (v38 > v34)
    goto LABEL_111;
LABEL_56:
  if (v35)
    memmove(v37, v34, v35);
  *v38 = 0;
  if (SHIBYTE(v50) < 0)
  {
    if (!v49)
    {
      v17 = 0;
      LOBYTE(v19) = 0;
      v18 = 0;
      goto LABEL_100;
    }
    v52 = 0;
    v51 = 0;
    v41 = v48;
  }
  else
  {
    if (!HIBYTE(v50))
    {
      v17 = 0;
      LOBYTE(v19) = 0;
      v18 = 0;
      goto LABEL_101;
    }
    v52 = 0;
    v41 = (const char *)&v48;
    v51 = 0;
  }
  if (sscanf(v41, "-%d,%d,%d", (char *)&v52 + 4, &v52, &v51) != 3)
  {
    v18 = 0;
    goto LABEL_92;
  }
  v18 = 0;
  if (SHIDWORD(v52) >= 1)
  {
    if ((int)v52 >= 1 && (int)v52 >= SHIDWORD(v52))
    {
      v18 = 0x100000000;
      LOBYTE(v19) = v52;
      v17 = v52 & 0xFFFFFF00;
      if ((SHIBYTE(v50) & 0x80000000) == 0)
        goto LABEL_101;
      goto LABEL_100;
    }
LABEL_92:
    LOBYTE(v19) = 0;
    v17 = 0;
    if ((SHIBYTE(v50) & 0x80000000) == 0)
      goto LABEL_101;
    goto LABEL_100;
  }
  LOBYTE(v19) = 0;
  v17 = 0;
  if (SHIBYTE(v50) < 0)
LABEL_100:
    operator delete(v48);
LABEL_101:
  v19 = v19;
  if ((v54 & 0x80) != 0)
LABEL_15:
    operator delete((void *)__p.__sig);
LABEL_16:
  *(_QWORD *)(a1 + 344) = v18 | v17 | v19;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a5 + 16))(&__p, a5, "WebRTC-VP8-Forced-Fallback-Encoder-v2", 37);
  v20 = v54;
  if ((char)v54 < 0)
  {
    v22 = *(_QWORD *)__p.__opaque;
    if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0)
      goto LABEL_111;
    p_p = (pthread_mutexattr_t *)__p.__sig;
    if (*(_QWORD *)__p.__opaque)
    {
      if (!__p.__sig)
        goto LABEL_111;
    }
  }
  else
  {
    p_p = &__p;
    v22 = v54;
  }
  if (v22 < 8 || p_p->__sig != 0x64656C6261736944)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    if ((v54 & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  if ((char)v54 < 0)
  {
    v20 = *(_QWORD *)__p.__opaque;
    if (*(_QWORD *)__p.__opaque >= 8uLL)
    {
      opaque = (char *)(__p.__sig + 8);
      if (*(uint64_t *)__p.__opaque > 7)
        goto LABEL_71;
    }
LABEL_112:
    abort();
  }
  if ((char)v54 <= 7)
    goto LABEL_112;
  opaque = __p.__opaque;
  if (v54 <= 7uLL)
    goto LABEL_112;
LABEL_71:
  v42 = v20 - 8;
  if ((unint64_t)(v20 - 8) <= 0x16)
  {
    HIBYTE(v50) = v20 - 8;
    v43 = (char *)&v48;
    v44 = (char *)&v48 + v42;
    if (&v48 > (char **)opaque)
      goto LABEL_78;
    goto LABEL_77;
  }
  v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17)
    v45 = v42 | 7;
  v46 = v45 + 1;
  v43 = (char *)operator new(v45 + 1);
  v49 = v42;
  v50 = v46 | 0x8000000000000000;
  v48 = v43;
  v44 = &v43[v42];
  if (v43 <= opaque)
  {
LABEL_77:
    if (v44 <= opaque)
      goto LABEL_78;
LABEL_111:
    __break(1u);
  }
LABEL_78:
  if (v42)
    memmove(v43, opaque, v42);
  *v44 = 0;
  if (SHIBYTE(v50) < 0)
  {
    if (!v49)
    {
      v23 = 0;
      LOBYTE(v25) = 0;
      v24 = 0;
      goto LABEL_104;
    }
    v52 = 0;
    v51 = 0;
    v47 = v48;
  }
  else
  {
    if (!HIBYTE(v50))
    {
      v23 = 0;
      LOBYTE(v25) = 0;
      v24 = 0;
      goto LABEL_105;
    }
    v52 = 0;
    v47 = (const char *)&v48;
    v51 = 0;
  }
  if (sscanf(v47, "-%d,%d,%d", (char *)&v52 + 4, &v52, &v51) != 3)
  {
    v24 = 0;
    goto LABEL_95;
  }
  v24 = 0;
  if (SHIDWORD(v52) >= 1)
  {
    if ((int)v52 >= 1 && (int)v52 >= SHIDWORD(v52))
    {
      v24 = 0x100000000;
      LOBYTE(v25) = v52;
      v23 = v52 & 0xFFFFFF00;
      if ((SHIBYTE(v50) & 0x80000000) == 0)
        goto LABEL_105;
      goto LABEL_104;
    }
LABEL_95:
    LOBYTE(v25) = 0;
    v23 = 0;
    if ((SHIBYTE(v50) & 0x80000000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
  LOBYTE(v25) = 0;
  v23 = 0;
  if (SHIBYTE(v50) < 0)
LABEL_104:
    operator delete(v48);
LABEL_105:
  v25 = v25;
  if ((v54 & 0x80) != 0)
LABEL_24:
    operator delete((void *)__p.__sig);
LABEL_25:
  *(_QWORD *)(a1 + 352) = v24 | v23 | v25;
  pthread_mutexattr_init(&__p);
  pthread_mutexattr_setpolicy_np(&__p, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 360), &__p);
  pthread_mutexattr_destroy(&__p);
  *(_DWORD *)(a1 + 424) = a4;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if ((v26 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v26 % 0x3E8uLL <= 0x1F4)
      v28 = 0;
    else
      v28 = -1;
    v27 = v28 - -(uint64_t)v26 / 0x3E8uLL;
  }
  else
  {
    v27 = v26 / 0x3E8;
    if (v26 % 0x3E8 > 0x1F3)
      ++v27;
  }
  *(_QWORD *)(a1 + 432) = v27;
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 556) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 560) = a1 + 568;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 589) = 0;
  *(_QWORD *)(a1 + 600) = a1 + 608;
  *(_BYTE *)(a1 + 624) = 0;
  *(_WORD *)(a1 + 636) = 0;
  *(_QWORD *)(a1 + 628) = 0;
  *(_DWORD *)(a1 + 648) = -1082130432;
  *(_QWORD *)(a1 + 640) = 0xBF8000003F000000;
  webrtc::QualityLimitationReasonTracker::QualityLimitationReasonTracker(a1 + 656, *(_QWORD *)(a1 + 48));
  *(_QWORD *)(a1 + 704) = &off_24C0BAFD8;
  *(_QWORD *)(a1 + 712) = 100;
  *(_QWORD *)(a1 + 720) = 10;
  *(_QWORD *)(a1 + 728) = operator new[]();
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 752) = -1;
  *(_QWORD *)(a1 + 768) = &off_24C0BAFD8;
  *(_QWORD *)(a1 + 776) = 100;
  *(_QWORD *)(a1 + 784) = 10;
  *(_QWORD *)(a1 + 792) = operator new[]();
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 816) = -1;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = a1 + 840;
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_WORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 900) = 0;
  *(_WORD *)(a1 + 908) = 0;
  *(_BYTE *)(a1 + 912) = 0;
  *(_BYTE *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 879) = 0;
  v29 = operator new();
  v30 = *(_DWORD *)(a1 + 424);
  v31 = "WebRTC.Video.Screenshare.";
  if (v30 != 1)
    v31 = 0;
  if (v30)
    v32 = (char *)v31;
  else
    v32 = "WebRTC.Video.";
  *(_QWORD *)(a1 + 968) = webrtc::SendStatisticsProxy::UmaSamplesContainer::UmaSamplesContainer(v29, v32, (__int128 *)(a1 + 440), a2);
  return a1;
}

void webrtc::SendStatisticsProxy::~SendStatisticsProxy(webrtc::SendStatisticsProxy *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  webrtc::SendStatisticsProxy::UmaSamplesContainer *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_24C0C0AC0;
  *((_QWORD *)this + 1) = &unk_24C0C0B88;
  *((_QWORD *)this + 2) = &unk_24C0C0BB0;
  *((_QWORD *)this + 3) = &unk_24C0C0BD8;
  *((_QWORD *)this + 4) = &unk_24C0C0C00;
  *((_QWORD *)this + 5) = &unk_24C0C0C28;
  v2 = (pthread_mutex_t *)((char *)this + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  webrtc::SendStatisticsProxy::UmaSamplesContainer::UpdateHistograms(*((webrtc::SendStatisticsProxy::UmaSamplesContainer **)this + 121), (webrtc::SendStatisticsProxy *)((char *)this + 80), (webrtc::SendStatisticsProxy *)((char *)this + 440));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  v4 = v3 / 0x3E8uLL;
  if (v3 % 0x3E8uLL > 0x1F3)
    LODWORD(v4) = v4 + 1;
  if (-v3 % 0x3E8uLL <= 0x1F4)
    v5 = 0;
  else
    v5 = -1;
  v6 = v5 - -v3 / 0x3E8uLL;
  if (v3 >= 0)
    v6 = v4;
  v7 = atomic_load(&webrtc::SendStatisticsProxy::~SendStatisticsProxy()::atomic_histogram_pointer);
  if (v7)
  {
    webrtc::metrics::HistogramAdd(v7, (int)(v6 - *((_QWORD *)this + 54)) / 1000);
  }
  else
  {
    while (!__ldaxr(&webrtc::SendStatisticsProxy::~SendStatisticsProxy()::atomic_histogram_pointer))
    {
      if (!__stlxr(0, &webrtc::SendStatisticsProxy::~SendStatisticsProxy()::atomic_histogram_pointer))
        goto LABEL_13;
    }
    __clrex();
  }
LABEL_13:
  pthread_mutex_unlock(v2);
  v9 = (webrtc::SendStatisticsProxy::UmaSamplesContainer *)*((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v9)
  {
    webrtc::SendStatisticsProxy::UmaSamplesContainer::~UmaSamplesContainer(v9);
    MEMORY[0x20BD0ADEC]();
  }
  if (*((_BYTE *)this + 960))
  {
    if (*((char *)this + 959) < 0)
    {
      operator delete(*((void **)this + 117));
      if ((*((char *)this + 935) & 0x80000000) == 0)
        goto LABEL_18;
    }
    else if ((*((char *)this + 935) & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(*((void **)this + 114));
  }
LABEL_18:
  std::__tree<std::__value_type<unsigned int,webrtc::SendStatisticsProxy::Trackers>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::SendStatisticsProxy::Trackers>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::SendStatisticsProxy::Trackers>>>::destroy(*((_QWORD **)this + 105));
  *((_QWORD *)this + 96) = &off_24C0BAFD8;
  v10 = *((_QWORD *)this + 99);
  if (v10)
    MEMORY[0x20BD0ADD4](v10, 0x1000C8000313F17);
  *((_QWORD *)this + 88) = &off_24C0BAFD8;
  v11 = *((_QWORD *)this + 91);
  if (v11)
    MEMORY[0x20BD0ADD4](v11, 0x1000C8000313F17);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 680, *((_QWORD **)this + 86));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 600, *((_QWORD **)this + 76));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 560, *((_QWORD **)this + 71));
  if (!*((_BYTE *)this + 464) || (*((char *)this + 463) & 0x80000000) == 0)
  {
    pthread_mutex_destroy(v2);
    webrtc::RtpConfig::~RtpConfig((webrtc::SendStatisticsProxy *)((char *)this + 80));
    if ((*((char *)this + 79) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(*((void **)this + 7));
    return;
  }
  operator delete(*((void **)this + 55));
  pthread_mutex_destroy(v2);
  webrtc::RtpConfig::~RtpConfig((webrtc::SendStatisticsProxy *)((char *)this + 80));
  if (*((char *)this + 79) < 0)
    goto LABEL_29;
}

{
  webrtc::SendStatisticsProxy::~SendStatisticsProxy(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::SendStatisticsProxy::UmaSamplesContainer::UpdateHistograms(webrtc::SendStatisticsProxy::UmaSamplesContainer *this, const webrtc::RtpConfig *a2, const webrtc::VideoSendStream::Stats *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  size_t v27;
  unint64_t v28;
  char *p_p;
  int v30;
  size_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v40;
  size_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  size_t v50;
  int v51;
  size_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  const void *v69;
  size_t v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  size_t v75;
  const void *v76;
  size_t v77;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  size_t v89;
  unint64_t v90;
  std::string *p_src;
  std::string *v92;
  char *v93;
  size_t v94;
  int v95;
  size_t v96;
  unint64_t v97;
  std::string *v98;
  std::string *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  const void *v107;
  size_t v108;
  size_t v109;
  std::string::size_type size;
  std::string *v111;
  size_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  size_t v124;
  unint64_t v125;
  std::string *v126;
  std::string *v127;
  char *v128;
  int v129;
  size_t v130;
  unint64_t v131;
  std::string *v132;
  std::string *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  int v138;
  size_t v139;
  unint64_t v140;
  std::string *v141;
  uint64_t v142;
  uint64_t v143;
  size_t v145;
  int v146;
  size_t v147;
  unint64_t v148;
  std::string *v149;
  uint64_t v150;
  uint64_t v151;
  std::string *v152;
  char *v153;
  uint64_t v157;
  uint64_t v158;
  std::string *v159;
  char *v160;
  const void *v164;
  size_t v165;
  size_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  size_t v170;
  const void *v171;
  size_t v172;
  size_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  std::string *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  size_t v184;
  unint64_t v185;
  std::string *v186;
  std::string *v187;
  char *v188;
  size_t v189;
  int v190;
  size_t v191;
  unint64_t v192;
  std::string *v193;
  std::string *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v199;
  uint64_t v200;
  const void *v202;
  size_t v203;
  size_t v204;
  std::string::size_type v205;
  std::string *v206;
  size_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  size_t v213;
  unint64_t v214;
  std::string *v215;
  std::string *v216;
  char *v217;
  int v218;
  size_t v219;
  unint64_t v220;
  std::string *v221;
  std::string *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  std::string::size_type v226;
  uint64_t v227;
  uint64_t v228;
  size_t v229;
  const void *v230;
  size_t v231;
  size_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  size_t v240;
  unint64_t v241;
  std::string *v242;
  std::string *v243;
  char *v244;
  int v245;
  size_t v246;
  unint64_t v247;
  std::string *v248;
  std::string *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v254;
  uint64_t v255;
  size_t v257;
  const void *v258;
  size_t v259;
  size_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  float v265;
  int v266;
  uint64_t v267;
  int v268;
  size_t v269;
  size_t v270;
  std::string *v271;
  std::string *v272;
  char *v273;
  int v274;
  size_t v275;
  size_t v276;
  std::string *v277;
  std::string *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v283;
  uint64_t v284;
  size_t v286;
  const void *v287;
  size_t v288;
  size_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  int v295;
  size_t v296;
  unint64_t v297;
  std::string *v298;
  std::string *v299;
  char *v300;
  int v301;
  size_t v302;
  unint64_t v303;
  std::string *v304;
  std::string *v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  std::string::size_type v309;
  uint64_t v310;
  uint64_t v311;
  size_t v312;
  const void *v313;
  size_t v314;
  size_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  size_t v321;
  unint64_t v322;
  std::string *v323;
  std::string *v324;
  char *v325;
  int v326;
  size_t v327;
  unint64_t v328;
  std::string *v329;
  std::string *v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  std::string::size_type v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  size_t v339;
  unint64_t v340;
  std::string *v341;
  std::string *v342;
  char *v343;
  int v344;
  size_t v345;
  unint64_t v346;
  std::string *v347;
  std::string *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  std::string::size_type v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  size_t v357;
  unint64_t v358;
  std::string *v359;
  std::string *v360;
  char *v361;
  int v362;
  size_t v363;
  unint64_t v364;
  std::string *v365;
  std::string *v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  std::string::size_type v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  size_t v375;
  unint64_t v376;
  std::string *v377;
  std::string *v378;
  char *v379;
  int v380;
  size_t v381;
  unint64_t v382;
  std::string *v383;
  std::string *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  size_t v393;
  unint64_t v394;
  std::string *v395;
  std::string *v396;
  char *v397;
  uint64_t v398;
  int v399;
  size_t v400;
  unint64_t v401;
  std::string *v402;
  std::string *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v408;
  uint64_t v409;
  uint64_t v411;
  uint64_t v412;
  int v413;
  size_t v414;
  unint64_t v415;
  std::string *v416;
  int v417;
  size_t v418;
  unint64_t v419;
  std::string *v420;
  uint64_t v421;
  uint64_t v422;
  std::string *v423;
  char *v424;
  uint64_t v428;
  uint64_t v429;
  std::string *v430;
  char *v431;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  size_t v440;
  unint64_t v441;
  std::string *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  size_t v451;
  unint64_t v452;
  std::string *v453;
  int v454;
  size_t v455;
  unint64_t v456;
  std::string *v457;
  int v458;
  size_t v459;
  unint64_t v460;
  std::string *v461;
  int v462;
  size_t v463;
  unint64_t v464;
  std::string *v465;
  int v466;
  size_t v467;
  unint64_t v468;
  std::string *v469;
  int v470;
  size_t v471;
  unint64_t v472;
  std::string *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  size_t v478;
  unint64_t v479;
  std::string *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  size_t v489;
  unint64_t v490;
  std::string *v491;
  int v492;
  size_t v493;
  unint64_t v494;
  std::string *v495;
  int v496;
  size_t v497;
  unint64_t v498;
  std::string *v499;
  int v500;
  size_t v501;
  unint64_t v502;
  std::string *v503;
  int v504;
  size_t v505;
  unint64_t v506;
  std::string *v507;
  int v508;
  size_t v509;
  unint64_t v510;
  std::string *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  size_t v516;
  unint64_t v517;
  std::string *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  size_t v527;
  unint64_t v528;
  std::string *v529;
  int v530;
  size_t v531;
  unint64_t v532;
  std::string *v533;
  int v534;
  size_t v535;
  unint64_t v536;
  std::string *v537;
  int v538;
  size_t v539;
  unint64_t v540;
  std::string *v541;
  int v542;
  size_t v543;
  unint64_t v544;
  std::string *v545;
  int v546;
  size_t v547;
  unint64_t v548;
  std::string *v549;
  char *v550;
  char *v551;
  int v552;
  size_t v553;
  unint64_t v554;
  std::string *v555;
  int v556;
  size_t v557;
  unint64_t v558;
  std::string *v559;
  int v560;
  size_t v561;
  unint64_t v562;
  std::string *v563;
  uint64_t v564;
  uint64_t v565;
  std::string *v566;
  char *v567;
  uint64_t v570;
  uint64_t v571;
  std::string *v572;
  char *v573;
  uint64_t v576;
  uint64_t v577;
  std::string *v578;
  char *v579;
  uint64_t v582;
  uint64_t v583;
  std::string *v584;
  char *v585;
  uint64_t v588;
  uint64_t v589;
  std::string *v590;
  char *v591;
  uint64_t v594;
  uint64_t v595;
  std::string *v596;
  char *v597;
  uint64_t v600;
  uint64_t v601;
  std::string *v602;
  char *v603;
  uint64_t v606;
  uint64_t v607;
  std::string *v608;
  char *v609;
  uint64_t v612;
  uint64_t v613;
  std::string *v614;
  char *v615;
  uint64_t v618;
  uint64_t v619;
  std::string *v620;
  char *v621;
  uint64_t v624;
  uint64_t v625;
  std::string *v626;
  char *v627;
  uint64_t v630;
  uint64_t v631;
  std::string *v632;
  char *v633;
  uint64_t v636;
  uint64_t v637;
  std::string *v638;
  char *v639;
  uint64_t v642;
  uint64_t v643;
  std::string *v644;
  char *v645;
  uint64_t v648;
  uint64_t v649;
  std::string *v650;
  char *v651;
  uint64_t v654;
  uint64_t v655;
  std::string *v656;
  char *v657;
  uint64_t v660;
  uint64_t v661;
  std::string *v662;
  char *v663;
  uint64_t v665;
  uint64_t v666;
  std::string *v667;
  char *v668;
  uint64_t v670;
  uint64_t v671;
  std::string *v672;
  char *v673;
  uint64_t v675;
  uint64_t v676;
  std::string *v677;
  char *v678;
  uint64_t v680;
  uint64_t v681;
  std::string *v682;
  char *v683;
  uint64_t v685;
  uint64_t v686;
  std::string *v687;
  char *v688;
  uint64_t v690;
  uint64_t v691;
  std::string *v692;
  char *v693;
  uint64_t v695;
  uint64_t v696;
  std::string *v697;
  char *v698;
  uint64_t v700;
  unint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  int v706;
  uint64_t v707;
  int v708;
  size_t v709;
  unint64_t v710;
  std::string *v711;
  int v712;
  size_t v713;
  unint64_t v714;
  std::string *v715;
  uint64_t v716;
  uint64_t v717;
  std::string *v718;
  char *v719;
  uint64_t v721;
  uint64_t v722;
  std::string *v723;
  char *v724;
  uint64_t v726;
  unint64_t v727;
  uint64_t v728;
  unint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  int v733;
  size_t v734;
  unint64_t v735;
  std::string *v736;
  std::string *v737;
  char *v738;
  int v739;
  size_t v740;
  unint64_t v741;
  std::string *v742;
  std::string *v743;
  char *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v748;
  uint64_t v749;
  uint64_t v751;
  unint64_t v752;
  uint64_t v753;
  unint64_t v754;
  uint64_t v755;
  unsigned int v756;
  signed int v757;
  int v758;
  size_t v759;
  unint64_t v760;
  std::string *v761;
  std::string *v762;
  char *v763;
  int v764;
  size_t v765;
  unint64_t v766;
  std::string *v767;
  std::string *v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  size_t v773;
  const void *v774;
  size_t v775;
  size_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  unsigned int *v780;
  unsigned int *v781;
  int32x4_t v782;
  char *v783;
  unsigned int v784;
  uint64_t v785;
  uint64_t v786;
  unsigned int v787;
  BOOL v788;
  uint64_t *v789;
  int32x4_t v790;
  char *v791;
  char *v792;
  unsigned int v793;
  BOOL v794;
  char **v795;
  unint64_t v796;
  uint64_t v797;
  uint64_t v798;
  int v799;
  size_t v800;
  unint64_t v801;
  std::string *v802;
  uint64_t v803;
  uint64_t v804;
  int v805;
  size_t v806;
  unint64_t v807;
  std::string *v808;
  int v809;
  size_t v810;
  unint64_t v811;
  std::string *v812;
  int v813;
  size_t v814;
  unint64_t v815;
  std::string *v816;
  uint64_t v817;
  uint64_t v818;
  std::string *v819;
  char *v820;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  std::string *v827;
  char *v828;
  uint64_t v832;
  uint64_t v833;
  std::string *v834;
  char *v835;
  int v839;
  size_t v840;
  unint64_t v841;
  std::string *v842;
  uint64_t v843;
  uint64_t v844;
  std::string *v845;
  char *v846;
  int v850;
  size_t v851;
  unint64_t v852;
  std::string *v853;
  uint64_t v854;
  uint64_t v855;
  __int32 v856;
  std::string *v857;
  char *v858;
  uint64_t v862;
  uint64_t v863;
  std::string *v864;
  char *v865;
  int v869;
  size_t v870;
  unint64_t v871;
  std::string *v872;
  uint64_t v873;
  uint64_t v874;
  std::string *v875;
  char *v876;
  uint64_t v879;
  unint64_t v880;
  uint64_t v881;
  uint64_t v882;
  int v883;
  size_t v884;
  unint64_t v885;
  std::string *v886;
  std::string *v887;
  char *v888;
  int v889;
  size_t v890;
  unint64_t v891;
  std::string *v892;
  std::string *v893;
  char *v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v898;
  uint64_t v899;
  size_t v901;
  const void *v902;
  size_t v903;
  size_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  int v909;
  int v910;
  size_t v911;
  unint64_t v912;
  std::string *v913;
  std::string *v914;
  char *v915;
  int v916;
  size_t v917;
  unint64_t v918;
  std::string *v919;
  std::string *v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  size_t v925;
  const void *v926;
  size_t v927;
  size_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  int v935;
  size_t v936;
  unint64_t v937;
  std::string *v938;
  int v939;
  size_t v940;
  unint64_t v941;
  std::string *v942;
  uint64_t v943;
  uint64_t v944;
  std::string *v945;
  char *v946;
  uint64_t v948;
  int v949;
  size_t v950;
  unint64_t v951;
  std::string *v952;
  uint64_t v953;
  uint64_t v954;
  std::string *v955;
  char *v956;
  int v958;
  size_t v959;
  unint64_t v960;
  std::string *v961;
  uint64_t v962;
  uint64_t v963;
  std::string *v964;
  char *v965;
  uint64_t v967;
  uint64_t v968;
  std::string *v969;
  char *v970;
  uint64_t v972;
  std::string *v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  int v978;
  size_t v979;
  unint64_t v980;
  std::string *v981;
  size_t v982;
  int v983;
  size_t v984;
  unint64_t v985;
  std::string *v986;
  uint64_t v987;
  uint64_t v988;
  std::string *v989;
  char *v990;
  uint64_t v994;
  uint64_t v995;
  std::string *v996;
  char *v997;
  const void *v1001;
  size_t v1002;
  size_t v1003;
  std::string::size_type v1004;
  std::string *v1005;
  size_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  std::string *v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  int v1016;
  size_t v1017;
  unint64_t v1018;
  std::string *v1019;
  size_t v1020;
  int v1021;
  size_t v1022;
  unint64_t v1023;
  std::string *v1024;
  uint64_t v1025;
  uint64_t v1026;
  std::string *v1027;
  char *v1028;
  uint64_t v1031;
  uint64_t v1032;
  std::string *v1033;
  char *v1034;
  const void *v1037;
  size_t v1038;
  size_t v1039;
  std::string::size_type v1040;
  std::string *v1041;
  size_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  std::string *v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  int v1052;
  size_t v1053;
  unint64_t v1054;
  std::string *v1055;
  std::string *v1056;
  char *v1057;
  size_t v1058;
  int v1059;
  size_t v1060;
  unint64_t v1061;
  std::string *v1062;
  std::string *v1063;
  char *v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1068;
  uint64_t v1069;
  const void *v1071;
  size_t v1072;
  size_t v1073;
  std::string::size_type v1074;
  std::string *v1075;
  size_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  std::string *v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  int v1086;
  size_t v1087;
  unint64_t v1088;
  std::string *v1089;
  std::string *v1090;
  char *v1091;
  size_t v1092;
  int v1093;
  size_t v1094;
  unint64_t v1095;
  std::string *v1096;
  std::string *v1097;
  char *v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1102;
  uint64_t v1103;
  const void *v1105;
  size_t v1106;
  size_t v1107;
  std::string::size_type v1108;
  std::string *v1109;
  size_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  std::string *v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  int v1119;
  size_t v1120;
  const void *v1121;
  size_t v1122;
  size_t v1123;
  std::string::size_type v1124;
  std::string *v1125;
  size_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  int v1131;
  size_t v1132;
  unint64_t v1133;
  std::string *v1134;
  std::string *v1135;
  char *v1136;
  int v1138;
  size_t v1139;
  unint64_t v1140;
  std::string *v1141;
  std::string *v1142;
  char *v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1151;
  std::string *v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  int v1157;
  size_t v1158;
  unint64_t v1159;
  std::string *v1160;
  int v1162;
  size_t v1163;
  unint64_t v1164;
  std::string *v1165;
  uint64_t v1166;
  uint64_t v1167;
  std::string *v1168;
  char *v1169;
  uint64_t v1173;
  uint64_t v1174;
  std::string *v1175;
  char *v1176;
  size_t v1180;
  const void *v1181;
  size_t v1182;
  size_t v1183;
  std::string::size_type v1184;
  std::string *v1185;
  size_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  size_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  size_t v1194;
  const void *v1195;
  size_t v1196;
  size_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  int v1202;
  size_t v1203;
  unint64_t v1204;
  std::string *v1205;
  std::string *v1206;
  char *v1207;
  size_t v1208;
  int v1209;
  size_t v1210;
  unint64_t v1211;
  std::string *v1212;
  std::string *v1213;
  char *v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1218;
  uint64_t v1219;
  const void *v1221;
  size_t v1222;
  size_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  int v1228;
  size_t v1229;
  unint64_t v1230;
  std::string *v1231;
  std::string *v1232;
  char *v1233;
  size_t v1234;
  int v1235;
  size_t v1236;
  unint64_t v1237;
  std::string *v1238;
  std::string *v1239;
  char *v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1244;
  uint64_t v1245;
  const void *v1247;
  size_t v1248;
  size_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  int v1254;
  size_t v1255;
  unint64_t v1256;
  std::string *v1257;
  std::string *v1258;
  char *v1259;
  size_t v1260;
  int v1261;
  size_t v1262;
  unint64_t v1263;
  std::string *v1264;
  std::string *v1265;
  char *v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1270;
  uint64_t v1271;
  const void *v1273;
  size_t v1274;
  size_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  int v1280;
  size_t v1281;
  unint64_t v1282;
  std::string *v1283;
  std::string *v1284;
  char *v1285;
  size_t v1286;
  int v1287;
  size_t v1288;
  unint64_t v1289;
  std::string *v1290;
  std::string *v1291;
  char *v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1296;
  uint64_t v1297;
  const void *v1299;
  size_t v1300;
  size_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  int v1306;
  size_t v1307;
  unint64_t v1308;
  std::string *v1309;
  std::string *v1310;
  char *v1311;
  size_t v1312;
  int v1313;
  size_t v1314;
  unint64_t v1315;
  std::string *v1316;
  std::string *v1317;
  char *v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1322;
  uint64_t v1323;
  size_t v1325;
  size_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  unint64_t v1335;
  unint64_t v1336;
  int32x4_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  std::string v1340;
  std::string v1341;
  std::string v1342;
  std::string v1343;
  std::string v1344;
  std::string v1345;
  std::string __src;
  __int128 __p;
  unint64_t v1348;
  char *v1349;
  __int128 v1350;
  char v1351;
  uint64_t v1352;

  v3 = MEMORY[0x24BDAC7A8](this, a2);
  v5 = v4;
  v1339 = v6;
  v7 = (char *)v3;
  v1352 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(v3 + 23) < 0)
  {
    v8 = *(_QWORD *)(v3 + 8);
    if (v8 < 0)
      goto LABEL_3598;
    v9 = *(_QWORD *)v3;
    v10 = v8 && v9 == 0;
    if (v10)
      goto LABEL_3598;
  }
  else
  {
    v8 = *(unsigned __int8 *)(v3 + 23);
    v9 = v3;
  }
  if (v8 == 25)
  {
    v11 = *(_QWORD *)v9;
    v12 = *(_QWORD *)(v9 + 8);
    v13 = *(_QWORD *)(v9 + 16);
    v14 = *(unsigned __int8 *)(v9 + 24);
    v18 = v11 == 0x562E435452626557 && v12 == 0x7263532E6F656469 && v13 == 0x65726168736E6565 && v14 == 46;
  }
  else
  {
    v18 = 0;
  }
  v1349 = &v1351;
  v1350 = xmmword_208F18840;
  v1351 = 0;
  v19 = *(_QWORD *)(v3 + 40);
  if (v19 < 200)
  {
    LODWORD(v20) = -1;
    v21 = *(_QWORD *)(v3 + 56);
    if (v21 >= 200)
      goto LABEL_24;
LABEL_27:
    LODWORD(v22) = -1;
    if ((_DWORD)v20 == -1)
      goto LABEL_183;
    goto LABEL_28;
  }
  v20 = (uint64_t)(*(_QWORD *)(v3 + 32) + ((unint64_t)v19 >> 1)) / v19;
  v21 = *(_QWORD *)(v3 + 56);
  if (v21 < 200)
    goto LABEL_27;
LABEL_24:
  v22 = (uint64_t)(*(_QWORD *)(v3 + 48) + ((unint64_t)v21 >> 1)) / v21;
  if ((_DWORD)v20 == -1)
    goto LABEL_183;
LABEL_28:
  if (v18)
  {
    v23 = atomic_load(&qword_253EA5838);
    if (!v23)
    {
      v26 = v7[23];
      if (v26 >= 0)
        v27 = v7[23];
      else
        v27 = *((_QWORD *)v7 + 1);
      v28 = v27 + 18;
      if (v27 + 18 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_3599;
      if (v28 > 0x16)
      {
        v34 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17)
          v34 = v28 | 7;
        v35 = v34 + 1;
        p_p = (char *)operator new(v34 + 1);
        *((_QWORD *)&__p + 1) = v27 + 18;
        v1348 = v35 | 0x8000000000000000;
        *(_QWORD *)&__p = p_p;
      }
      else
      {
        v1348 = 0;
        __p = 0uLL;
        p_p = (char *)&__p;
        HIBYTE(v1348) = v27 + 18;
      }
      if (v26 >= 0)
        v36 = v7;
      else
        v36 = *(char **)v7;
      v37 = &p_p[v27];
      if (v36 >= p_p && v37 > v36)
        goto LABEL_3598;
      if (v27)
        memmove(p_p, v36, v27);
      if (v37 <= "InputWidthInPixels" && v37 + 18 > "InputWidthInPixels")
        goto LABEL_3598;
      strcpy(v37, "InputWidthInPixels");
      if (SHIBYTE(v1348) < 0)
      {
        if ((*((_QWORD *)&__p + 1) & 0x8000000000000000) != 0 || *((_QWORD *)&__p + 1) && !(_QWORD)__p)
          goto LABEL_3598;
        operator delete((void *)__p);
      }
      while (!__ldaxr(&qword_253EA5838))
      {
        if (!__stlxr(0, &qword_253EA5838))
        {
          v24 = atomic_load(&qword_253EA5848);
          if (v24)
            goto LABEL_99;
          goto LABEL_69;
        }
      }
      __clrex();
      v24 = atomic_load(&qword_253EA5848);
      if (v24)
        goto LABEL_99;
      goto LABEL_69;
    }
    webrtc::metrics::HistogramAdd(v23, v20);
    v24 = atomic_load(&qword_253EA5848);
    if (!v24)
    {
LABEL_69:
      v40 = v7[23];
      if (v40 >= 0)
        v41 = v7[23];
      else
        v41 = *((_QWORD *)v7 + 1);
      v42 = v41 + 19;
      if (v41 + 19 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_3599;
      if (v42 > 0x16)
      {
        v55 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v55 = v42 | 7;
        v56 = v55 + 1;
        v43 = (char *)operator new(v55 + 1);
        *((_QWORD *)&__p + 1) = v41 + 19;
        v1348 = v56 | 0x8000000000000000;
        *(_QWORD *)&__p = v43;
      }
      else
      {
        v1348 = 0;
        __p = 0uLL;
        v43 = (char *)&__p;
        HIBYTE(v1348) = v41 + 19;
      }
      if (v40 >= 0)
        v57 = v7;
      else
        v57 = *(char **)v7;
      v58 = &v43[v41];
      if (v57 >= v43 && v58 > v57)
        goto LABEL_3598;
      if (v41)
        memmove(v43, v57, v41);
      if (v58 <= "InputHeightInPixels" && v58 + 19 > "InputHeightInPixels")
        goto LABEL_3598;
      strcpy(v58, "InputHeightInPixels");
      if (SHIBYTE(v1348) < 0)
      {
        if ((*((_QWORD *)&__p + 1) & 0x8000000000000000) != 0 || *((_QWORD *)&__p + 1) && !(_QWORD)__p)
          goto LABEL_3598;
        operator delete((void *)__p);
      }
      while (!__ldaxr(&qword_253EA5848))
      {
        if (!__stlxr(0, &qword_253EA5848))
          goto LABEL_155;
      }
      goto LABEL_157;
    }
LABEL_99:
    webrtc::metrics::HistogramAdd(v24, v22);
    LODWORD(v50) = v7[23];
    if ((v50 & 0x80000000) != 0)
      goto LABEL_158;
    goto LABEL_156;
  }
  v25 = atomic_load(&_MergedGlobals_20);
  if (v25)
  {
    webrtc::metrics::HistogramAdd(v25, v20);
    v24 = atomic_load(&qword_253EA5840);
    if (v24)
      goto LABEL_99;
  }
  else
  {
    v30 = v7[23];
    if (v30 >= 0)
      v31 = v7[23];
    else
      v31 = *((_QWORD *)v7 + 1);
    v32 = v31 + 18;
    if (v31 + 18 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v32 > 0x16)
    {
      v44 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v32 | 7) != 0x17)
        v44 = v32 | 7;
      v45 = v44 + 1;
      v33 = (char *)operator new(v44 + 1);
      *((_QWORD *)&__p + 1) = v31 + 18;
      v1348 = v45 | 0x8000000000000000;
      *(_QWORD *)&__p = v33;
    }
    else
    {
      v1348 = 0;
      __p = 0uLL;
      v33 = (char *)&__p;
      HIBYTE(v1348) = v31 + 18;
    }
    if (v30 >= 0)
      v46 = v7;
    else
      v46 = *(char **)v7;
    v47 = &v33[v31];
    if (v46 >= v33 && v47 > v46)
      goto LABEL_3598;
    if (v31)
      memmove(v33, v46, v31);
    if (v47 <= "InputWidthInPixels" && v47 + 18 > "InputWidthInPixels")
      goto LABEL_3598;
    strcpy(v47, "InputWidthInPixels");
    if (SHIBYTE(v1348) < 0)
    {
      if ((*((_QWORD *)&__p + 1) & 0x8000000000000000) != 0 || *((_QWORD *)&__p + 1) && !(_QWORD)__p)
        goto LABEL_3598;
      operator delete((void *)__p);
    }
    while (!__ldaxr(&_MergedGlobals_20))
    {
      if (!__stlxr(0, &_MergedGlobals_20))
      {
        v24 = atomic_load(&qword_253EA5840);
        if (!v24)
          goto LABEL_102;
        goto LABEL_99;
      }
    }
    __clrex();
    v24 = atomic_load(&qword_253EA5840);
    if (v24)
      goto LABEL_99;
  }
LABEL_102:
  v51 = v7[23];
  if (v51 >= 0)
    v52 = v7[23];
  else
    v52 = *((_QWORD *)v7 + 1);
  v53 = v52 + 19;
  if (v52 + 19 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v53 > 0x16)
  {
    v62 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17)
      v62 = v53 | 7;
    v63 = v62 + 1;
    v54 = (char *)operator new(v62 + 1);
    *((_QWORD *)&__p + 1) = v52 + 19;
    v1348 = v63 | 0x8000000000000000;
    *(_QWORD *)&__p = v54;
  }
  else
  {
    v1348 = 0;
    __p = 0uLL;
    v54 = (char *)&__p;
    HIBYTE(v1348) = v52 + 19;
  }
  if (v51 >= 0)
    v64 = v7;
  else
    v64 = *(char **)v7;
  v65 = &v54[v52];
  if (v64 >= v54 && v65 > v64)
    goto LABEL_3598;
  if (v52)
    memmove(v54, v64, v52);
  if (v65 <= "InputHeightInPixels" && v65 + 19 > "InputHeightInPixels")
    goto LABEL_3598;
  strcpy(v65, "InputHeightInPixels");
  if (SHIBYTE(v1348) < 0)
  {
    if ((*((_QWORD *)&__p + 1) & 0x8000000000000000) != 0 || *((_QWORD *)&__p + 1) && !(_QWORD)__p)
      goto LABEL_3598;
    operator delete((void *)__p);
  }
  while (!__ldaxr(&qword_253EA5840))
  {
    if (!__stlxr(0, &qword_253EA5840))
    {
LABEL_155:
      LODWORD(v50) = v7[23];
      if ((v50 & 0x80000000) != 0)
        goto LABEL_158;
      goto LABEL_156;
    }
  }
LABEL_157:
  __clrex();
  LODWORD(v50) = v7[23];
  if ((v50 & 0x80000000) != 0)
  {
LABEL_158:
    v50 = *((_QWORD *)v7 + 1);
    if ((v50 & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v69 = *(const void **)v7;
    if (v50)
    {
      if (!v69)
        goto LABEL_3598;
    }
    goto LABEL_161;
  }
LABEL_156:
  v50 = v50;
  v69 = v7;
LABEL_161:
  if (v50 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v70 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v70 = v50;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v69, v70);
  *((_QWORD *)&v1350 + 1) += v70;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x13uLL)
    v71 = 19;
  else
    v71 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "InputWidthInPixels ", v71);
  *((_QWORD *)&v1350 + 1) += v71;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%d", v20);
  v72 = v1350;
  v73 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v74 = *((_QWORD *)&v1350 + 1);
  if (v72 != v73)
    v74 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v74;
  v1349[v74] = 0;
  if (v7[23] < 0)
  {
    v75 = *((_QWORD *)v7 + 1);
    if ((v75 & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v76 = *(const void **)v7;
    if (v75)
    {
      if (!v76)
        goto LABEL_3598;
    }
  }
  else
  {
    v75 = v7[23];
    v76 = v7;
  }
  if (v75 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v77 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v77 = v75;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v76, v77);
  *((_QWORD *)&v1350 + 1) += v77;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x14uLL)
    v78 = 20;
  else
    v78 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "InputHeightInPixels ", v78);
  *((_QWORD *)&v1350 + 1) += v78;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%d", v22);
  v79 = v1350;
  v80 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v81 = *((_QWORD *)&v1350 + 1);
  if (v79 != v80)
    v81 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v81;
  v1349[v81] = 0;
LABEL_183:
  v82 = *((_QWORD *)v7 + 41);
  v85 = *(_QWORD *)(v82 + 16);
  v83 = (__int128 *)(v82 + 16);
  v84 = v85;
  if (v85)
  {
    if (v84 >= 0)
      v86 = v84;
    else
      v86 = v84 + 1;
    *(_DWORD *)(*((_QWORD *)v7 + 41) + 32) = (*(_QWORD *)(*((_QWORD *)v7 + 41) + 8) + (v86 >> 1)) / v84;
  }
  __p = *v83;
  v1348 = *((_QWORD *)v83 + 2);
  if ((uint64_t)__p < 6)
    goto LABEL_274;
  if (v18)
  {
    v87 = atomic_load(&qword_253EA5858);
    if (!v87)
    {
      v88 = v7[23];
      if (v88 >= 0)
        v89 = v7[23];
      else
        v89 = *((_QWORD *)v7 + 1);
      v90 = v89 + 20;
      if (v89 + 20 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_3599;
      if (v90 > 0x16)
      {
        v101 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v90 | 7) != 0x17)
          v101 = v90 | 7;
        v102 = v101 + 1;
        p_src = (std::string *)operator new(v101 + 1);
        __src.__r_.__value_.__l.__size_ = v89 + 20;
        __src.__r_.__value_.__r.__words[2] = v102 | 0x8000000000000000;
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)p_src;
        if (v88 >= 0)
          v92 = (std::string *)v7;
        else
          v92 = *(std::string **)v7;
        v93 = (char *)p_src + v89;
        if (v92 < p_src)
          goto LABEL_221;
      }
      else
      {
        memset(&__src, 0, sizeof(__src));
        p_src = &__src;
        *((_BYTE *)&__src.__r_.__value_.__s + 23) = v89 + 20;
        if (v88 >= 0)
          v92 = (std::string *)v7;
        else
          v92 = *(std::string **)v7;
        v93 = (char *)&__src + v89;
        if (v92 < &__src)
          goto LABEL_221;
      }
      if (v93 > (char *)v92)
        goto LABEL_3598;
LABEL_221:
      if (v89)
        memmove(p_src, v92, v89);
      if (v93 <= "InputFramesPerSecond" && v93 + 20 > "InputFramesPerSecond")
        goto LABEL_3598;
      strcpy(v93, "InputFramesPerSecond");
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      {
        if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
          || __src.__r_.__value_.__l.__size_ && !__src.__r_.__value_.__r.__words[0])
        {
          goto LABEL_3598;
        }
        operator delete(__src.__r_.__value_.__l.__data_);
      }
      while (!__ldaxr(&qword_253EA5858))
      {
        if (!__stlxr(0, &qword_253EA5858))
          goto LABEL_251;
      }
      goto LABEL_253;
    }
LABEL_202:
    webrtc::metrics::HistogramAdd(v87, v1348);
    LODWORD(v94) = v7[23];
    if ((v94 & 0x80000000) != 0)
      goto LABEL_254;
LABEL_252:
    v94 = v94;
    v107 = v7;
    goto LABEL_257;
  }
  v87 = atomic_load(&qword_253EA5850);
  if (v87)
    goto LABEL_202;
  v95 = v7[23];
  if (v95 >= 0)
    v96 = v7[23];
  else
    v96 = *((_QWORD *)v7 + 1);
  v97 = v96 + 20;
  if (v96 + 20 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v97 > 0x16)
  {
    v104 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17)
      v104 = v97 | 7;
    v105 = v104 + 1;
    v98 = (std::string *)operator new(v104 + 1);
    __src.__r_.__value_.__l.__size_ = v96 + 20;
    __src.__r_.__value_.__r.__words[2] = v105 | 0x8000000000000000;
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
    if (v95 >= 0)
      v99 = (std::string *)v7;
    else
      v99 = *(std::string **)v7;
    v100 = (char *)v98 + v96;
    if (v99 < v98)
      goto LABEL_240;
  }
  else
  {
    memset(&__src, 0, sizeof(__src));
    v98 = &__src;
    *((_BYTE *)&__src.__r_.__value_.__s + 23) = v96 + 20;
    if (v95 >= 0)
      v99 = (std::string *)v7;
    else
      v99 = *(std::string **)v7;
    v100 = (char *)&__src + v96;
    if (v99 < &__src)
      goto LABEL_240;
  }
  if (v100 > (char *)v99)
    goto LABEL_3598;
LABEL_240:
  if (v96)
    memmove(v98, v99, v96);
  if (v100 <= "InputFramesPerSecond" && v100 + 20 > "InputFramesPerSecond")
    goto LABEL_3598;
  strcpy(v100, "InputFramesPerSecond");
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || __src.__r_.__value_.__l.__size_ && !__src.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(__src.__r_.__value_.__l.__data_);
  }
  while (!__ldaxr(&qword_253EA5850))
  {
    if (!__stlxr(0, &qword_253EA5850))
    {
LABEL_251:
      LODWORD(v94) = v7[23];
      if ((v94 & 0x80000000) != 0)
        goto LABEL_254;
      goto LABEL_252;
    }
  }
LABEL_253:
  __clrex();
  LODWORD(v94) = v7[23];
  if ((v94 & 0x80000000) == 0)
    goto LABEL_252;
LABEL_254:
  v94 = *((_QWORD *)v7 + 1);
  if ((v94 & 0x8000000000000000) != 0)
    goto LABEL_3598;
  v107 = *(const void **)v7;
  if (v94)
  {
    if (!v107)
      goto LABEL_3598;
  }
LABEL_257:
  if (v94 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v108 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v108 = v94;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v107, v108);
  *((_QWORD *)&v1350 + 1) += v108;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x15uLL)
    v109 = 21;
  else
    v109 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "InputFramesPerSecond ", v109);
  *((_QWORD *)&v1350 + 1) += v109;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&__p, 1, &__src);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v111 = (std::string *)__src.__r_.__value_.__r.__words[0];
    if (__src.__r_.__value_.__l.__size_)
    {
      if (!__src.__r_.__value_.__r.__words[0])
        goto LABEL_3598;
    }
  }
  else
  {
    size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    v111 = &__src;
  }
  if (size >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v112 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v112 = size;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v111, v112);
  *((_QWORD *)&v1350 + 1) += v112;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  v113 = v1350;
  v114 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v115 = *((_QWORD *)&v1350 + 1);
  if (v113 != v114)
    v115 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v115;
  v1349[v115] = 0;
  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_274:
    v116 = *((_QWORD *)v7 + 9);
    if (v116 < 200)
      goto LABEL_275;
    goto LABEL_279;
  }
  operator delete(__src.__r_.__value_.__l.__data_);
  v116 = *((_QWORD *)v7 + 9);
  if (v116 < 200)
  {
LABEL_275:
    LODWORD(v117) = -1;
    v118 = *((_QWORD *)v7 + 11);
    if (v118 >= 200)
      goto LABEL_276;
LABEL_280:
    LODWORD(v119) = -1;
    if ((_DWORD)v117 == -1)
      goto LABEL_438;
    goto LABEL_281;
  }
LABEL_279:
  v117 = (uint64_t)(*((_QWORD *)v7 + 8) + ((unint64_t)v116 >> 1)) / v116;
  v118 = *((_QWORD *)v7 + 11);
  if (v118 < 200)
    goto LABEL_280;
LABEL_276:
  v119 = (uint64_t)(*((_QWORD *)v7 + 10) + ((unint64_t)v118 >> 1)) / v118;
  if ((_DWORD)v117 == -1)
    goto LABEL_438;
LABEL_281:
  if (v18)
  {
    v120 = atomic_load(&qword_253EA5868);
    if (v120)
    {
      webrtc::metrics::HistogramAdd(v120, v117);
      v121 = atomic_load(&qword_253EA5878);
      if (!v121)
      {
LABEL_327:
        v138 = v7[23];
        if (v138 >= 0)
          v139 = v7[23];
        else
          v139 = *((_QWORD *)v7 + 1);
        v140 = v139 + 18;
        if (v139 + 18 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_3599;
        if (v140 > 0x16)
        {
          v150 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v140 | 7) != 0x17)
            v150 = v140 | 7;
          v151 = v150 + 1;
          v141 = (std::string *)operator new(v150 + 1);
          __src.__r_.__value_.__l.__size_ = v139 + 18;
          __src.__r_.__value_.__r.__words[2] = v151 | 0x8000000000000000;
          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
        }
        else
        {
          memset(&__src, 0, sizeof(__src));
          v141 = &__src;
          *((_BYTE *)&__src.__r_.__value_.__s + 23) = v139 + 18;
        }
        if (v138 >= 0)
          v152 = (std::string *)v7;
        else
          v152 = *(std::string **)v7;
        v153 = (char *)v141 + v139;
        if (v152 >= v141 && v153 > (char *)v152)
          goto LABEL_3598;
        if (v139)
          memmove(v141, v152, v139);
        if (v153 <= "SentHeightInPixels" && v153 + 18 > "SentHeightInPixels")
          goto LABEL_3598;
        strcpy(v153, "SentHeightInPixels");
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
            || __src.__r_.__value_.__l.__size_ && !__src.__r_.__value_.__r.__words[0])
          {
            goto LABEL_3598;
          }
          operator delete(__src.__r_.__value_.__l.__data_);
        }
        while (!__ldaxr(&qword_253EA5878))
        {
          if (!__stlxr(0, &qword_253EA5878))
            goto LABEL_410;
        }
        goto LABEL_412;
      }
LABEL_354:
      webrtc::metrics::HistogramAdd(v121, v119);
      LODWORD(v145) = v7[23];
      if ((v145 & 0x80000000) != 0)
        goto LABEL_413;
      goto LABEL_411;
    }
    v123 = v7[23];
    if (v123 >= 0)
      v124 = v7[23];
    else
      v124 = *((_QWORD *)v7 + 1);
    v125 = v124 + 17;
    if (v124 + 17 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v125 > 0x16)
    {
      v135 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v125 | 7) != 0x17)
        v135 = v125 | 7;
      v136 = v135 + 1;
      v126 = (std::string *)operator new(v135 + 1);
      __src.__r_.__value_.__l.__size_ = v124 + 17;
      __src.__r_.__value_.__r.__words[2] = v136 | 0x8000000000000000;
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v126;
      if (v123 >= 0)
        v127 = (std::string *)v7;
      else
        v127 = *(std::string **)v7;
      v128 = (char *)v126 + v124;
      if (v127 < v126)
        goto LABEL_315;
    }
    else
    {
      memset(&__src, 0, sizeof(__src));
      v126 = &__src;
      *((_BYTE *)&__src.__r_.__value_.__s + 23) = v124 + 17;
      if (v123 >= 0)
        v127 = (std::string *)v7;
      else
        v127 = *(std::string **)v7;
      v128 = (char *)&__src + v124;
      if (v127 < &__src)
        goto LABEL_315;
    }
    if (v128 > (char *)v127)
      goto LABEL_3598;
LABEL_315:
    if (v124)
      memmove(v126, v127, v124);
    if (v128 <= "SentWidthInPixels" && v128 + 17 > "SentWidthInPixels")
      goto LABEL_3598;
    strcpy(v128, "SentWidthInPixels");
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || __src.__r_.__value_.__l.__size_ && !__src.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(__src.__r_.__value_.__l.__data_);
    }
    while (!__ldaxr(&qword_253EA5868))
    {
      if (!__stlxr(0, &qword_253EA5868))
      {
        v121 = atomic_load(&qword_253EA5878);
        if (v121)
          goto LABEL_354;
        goto LABEL_327;
      }
    }
    __clrex();
    v121 = atomic_load(&qword_253EA5878);
    if (v121)
      goto LABEL_354;
    goto LABEL_327;
  }
  v122 = atomic_load(&qword_253EA5860);
  if (!v122)
  {
    v129 = v7[23];
    if (v129 >= 0)
      v130 = v7[23];
    else
      v130 = *((_QWORD *)v7 + 1);
    v131 = v130 + 17;
    if (v130 + 17 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v131 > 0x16)
    {
      v142 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v131 | 7) != 0x17)
        v142 = v131 | 7;
      v143 = v142 + 1;
      v132 = (std::string *)operator new(v142 + 1);
      __src.__r_.__value_.__l.__size_ = v130 + 17;
      __src.__r_.__value_.__r.__words[2] = v143 | 0x8000000000000000;
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
      if (v129 >= 0)
        v133 = (std::string *)v7;
      else
        v133 = *(std::string **)v7;
      v134 = (char *)v132 + v130;
      if (v133 < v132)
        goto LABEL_342;
    }
    else
    {
      memset(&__src, 0, sizeof(__src));
      v132 = &__src;
      *((_BYTE *)&__src.__r_.__value_.__s + 23) = v130 + 17;
      if (v129 >= 0)
        v133 = (std::string *)v7;
      else
        v133 = *(std::string **)v7;
      v134 = (char *)&__src + v130;
      if (v133 < &__src)
        goto LABEL_342;
    }
    if (v134 > (char *)v133)
      goto LABEL_3598;
LABEL_342:
    if (v130)
      memmove(v132, v133, v130);
    if (v134 <= "SentWidthInPixels" && v134 + 17 > "SentWidthInPixels")
      goto LABEL_3598;
    strcpy(v134, "SentWidthInPixels");
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || __src.__r_.__value_.__l.__size_ && !__src.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(__src.__r_.__value_.__l.__data_);
    }
    while (!__ldaxr(&qword_253EA5860))
    {
      if (!__stlxr(0, &qword_253EA5860))
      {
        v121 = atomic_load(&qword_253EA5870);
        if (!v121)
          goto LABEL_357;
        goto LABEL_354;
      }
    }
    __clrex();
    v121 = atomic_load(&qword_253EA5870);
    if (v121)
      goto LABEL_354;
    goto LABEL_357;
  }
  webrtc::metrics::HistogramAdd(v122, v117);
  v121 = atomic_load(&qword_253EA5870);
  if (v121)
    goto LABEL_354;
LABEL_357:
  v146 = v7[23];
  if (v146 >= 0)
    v147 = v7[23];
  else
    v147 = *((_QWORD *)v7 + 1);
  v148 = v147 + 18;
  if (v147 + 18 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v148 > 0x16)
  {
    v157 = (v148 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v148 | 7) != 0x17)
      v157 = v148 | 7;
    v158 = v157 + 1;
    v149 = (std::string *)operator new(v157 + 1);
    __src.__r_.__value_.__l.__size_ = v147 + 18;
    __src.__r_.__value_.__r.__words[2] = v158 | 0x8000000000000000;
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v149;
  }
  else
  {
    memset(&__src, 0, sizeof(__src));
    v149 = &__src;
    *((_BYTE *)&__src.__r_.__value_.__s + 23) = v147 + 18;
  }
  if (v146 >= 0)
    v159 = (std::string *)v7;
  else
    v159 = *(std::string **)v7;
  v160 = (char *)v149 + v147;
  if (v159 >= v149 && v160 > (char *)v159)
    goto LABEL_3598;
  if (v147)
    memmove(v149, v159, v147);
  if (v160 <= "SentHeightInPixels" && v160 + 18 > "SentHeightInPixels")
    goto LABEL_3598;
  strcpy(v160, "SentHeightInPixels");
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || __src.__r_.__value_.__l.__size_ && !__src.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(__src.__r_.__value_.__l.__data_);
  }
  while (!__ldaxr(&qword_253EA5870))
  {
    if (!__stlxr(0, &qword_253EA5870))
    {
LABEL_410:
      LODWORD(v145) = v7[23];
      if ((v145 & 0x80000000) != 0)
        goto LABEL_413;
      goto LABEL_411;
    }
  }
LABEL_412:
  __clrex();
  LODWORD(v145) = v7[23];
  if ((v145 & 0x80000000) != 0)
  {
LABEL_413:
    v145 = *((_QWORD *)v7 + 1);
    if ((v145 & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v164 = *(const void **)v7;
    if (v145)
    {
      if (!v164)
        goto LABEL_3598;
    }
    goto LABEL_416;
  }
LABEL_411:
  v145 = v145;
  v164 = v7;
LABEL_416:
  if (v145 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v165 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v165 = v145;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v164, v165);
  *((_QWORD *)&v1350 + 1) += v165;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x12uLL)
    v166 = 18;
  else
    v166 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "SentWidthInPixels ", v166);
  *((_QWORD *)&v1350 + 1) += v166;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%d", v117);
  v167 = v1350;
  v168 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v169 = *((_QWORD *)&v1350 + 1);
  if (v167 != v168)
    v169 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v169;
  v1349[v169] = 0;
  if (v7[23] < 0)
  {
    v170 = *((_QWORD *)v7 + 1);
    if ((v170 & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v171 = *(const void **)v7;
    if (v170)
    {
      if (!v171)
        goto LABEL_3598;
    }
  }
  else
  {
    v170 = v7[23];
    v171 = v7;
  }
  if (v170 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v172 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v172 = v170;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v171, v172);
  *((_QWORD *)&v1350 + 1) += v172;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x13uLL)
    v173 = 19;
  else
    v173 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "SentHeightInPixels ", v173);
  *((_QWORD *)&v1350 + 1) += v173;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%d", v119);
  v174 = v1350;
  v175 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v176 = *((_QWORD *)&v1350 + 1);
  if (v174 != v175)
    v176 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v176;
  v1349[v176] = 0;
LABEL_438:
  v177 = *((_QWORD *)v7 + 52);
  v180 = *(_QWORD *)(v177 + 16);
  v178 = (std::string *)(v177 + 16);
  v179 = v180;
  if (v180)
  {
    if (v179 >= 0)
      v181 = v179;
    else
      v181 = v179 + 1;
    *(_DWORD *)(*((_QWORD *)v7 + 52) + 32) = (*(_QWORD *)(*((_QWORD *)v7 + 52) + 8) + (v181 >> 1)) / v179;
  }
  __src = *v178;
  if ((uint64_t)__src.__r_.__value_.__l.__data_ < 6)
    goto LABEL_602;
  if (v18)
  {
    v182 = atomic_load(&qword_253EA5888);
    if (!v182)
    {
      v183 = v7[23];
      if (v183 >= 0)
        v184 = v7[23];
      else
        v184 = *((_QWORD *)v7 + 1);
      v185 = v184 + 19;
      if (v184 + 19 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_3599;
      if (v185 > 0x16)
      {
        v196 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v185 | 7) != 0x17)
          v196 = v185 | 7;
        v197 = v196 + 1;
        v186 = (std::string *)operator new(v196 + 1);
        v1345.__r_.__value_.__l.__size_ = v184 + 19;
        v1345.__r_.__value_.__r.__words[2] = v197 | 0x8000000000000000;
        v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v186;
        if (v183 >= 0)
          v187 = (std::string *)v7;
        else
          v187 = *(std::string **)v7;
        v188 = (char *)v186 + v184;
        if (v187 < v186)
          goto LABEL_476;
      }
      else
      {
        memset(&v1345, 0, sizeof(v1345));
        v186 = &v1345;
        *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v184 + 19;
        if (v183 >= 0)
          v187 = (std::string *)v7;
        else
          v187 = *(std::string **)v7;
        v188 = (char *)&v1345 + v184;
        if (v187 < &v1345)
          goto LABEL_476;
      }
      if (v188 > (char *)v187)
        goto LABEL_3598;
LABEL_476:
      if (v184)
        memmove(v186, v187, v184);
      if (v188 <= "SentFramesPerSecond" && v188 + 19 > "SentFramesPerSecond")
        goto LABEL_3598;
      strcpy(v188, "SentFramesPerSecond");
      if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
      {
        if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
          || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
        {
          goto LABEL_3598;
        }
        operator delete(v1345.__r_.__value_.__l.__data_);
      }
      while (!__ldaxr(&qword_253EA5888))
      {
        if (!__stlxr(0, &qword_253EA5888))
          goto LABEL_506;
      }
      goto LABEL_508;
    }
LABEL_457:
    webrtc::metrics::HistogramAdd(v182, __src.__r_.__value_.__r.__words[2]);
    LODWORD(v189) = v7[23];
    if ((v189 & 0x80000000) != 0)
      goto LABEL_509;
LABEL_507:
    v189 = v189;
    v202 = v7;
    goto LABEL_512;
  }
  v182 = atomic_load(&qword_253EA5880);
  if (v182)
    goto LABEL_457;
  v190 = v7[23];
  if (v190 >= 0)
    v191 = v7[23];
  else
    v191 = *((_QWORD *)v7 + 1);
  v192 = v191 + 19;
  if (v191 + 19 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v192 > 0x16)
  {
    v199 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v192 | 7) != 0x17)
      v199 = v192 | 7;
    v200 = v199 + 1;
    v193 = (std::string *)operator new(v199 + 1);
    v1345.__r_.__value_.__l.__size_ = v191 + 19;
    v1345.__r_.__value_.__r.__words[2] = v200 | 0x8000000000000000;
    v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v193;
    if (v190 >= 0)
      v194 = (std::string *)v7;
    else
      v194 = *(std::string **)v7;
    v195 = (char *)v193 + v191;
    if (v194 < v193)
      goto LABEL_495;
  }
  else
  {
    memset(&v1345, 0, sizeof(v1345));
    v193 = &v1345;
    *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v191 + 19;
    if (v190 >= 0)
      v194 = (std::string *)v7;
    else
      v194 = *(std::string **)v7;
    v195 = (char *)&v1345 + v191;
    if (v194 < &v1345)
      goto LABEL_495;
  }
  if (v195 > (char *)v194)
    goto LABEL_3598;
LABEL_495:
  if (v191)
    memmove(v193, v194, v191);
  if (v195 <= "SentFramesPerSecond" && v195 + 19 > "SentFramesPerSecond")
    goto LABEL_3598;
  strcpy(v195, "SentFramesPerSecond");
  if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
  {
    if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(v1345.__r_.__value_.__l.__data_);
  }
  while (!__ldaxr(&qword_253EA5880))
  {
    if (!__stlxr(0, &qword_253EA5880))
    {
LABEL_506:
      LODWORD(v189) = v7[23];
      if ((v189 & 0x80000000) != 0)
        goto LABEL_509;
      goto LABEL_507;
    }
  }
LABEL_508:
  __clrex();
  LODWORD(v189) = v7[23];
  if ((v189 & 0x80000000) == 0)
    goto LABEL_507;
LABEL_509:
  v189 = *((_QWORD *)v7 + 1);
  if ((v189 & 0x8000000000000000) != 0)
    goto LABEL_3598;
  v202 = *(const void **)v7;
  if (v189)
  {
    if (!v202)
      goto LABEL_3598;
  }
LABEL_512:
  if (v189 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v203 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v203 = v189;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v202, v203);
  *((_QWORD *)&v1350 + 1) += v203;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x14uLL)
    v204 = 20;
  else
    v204 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "SentFramesPerSecond ", v204);
  *((_QWORD *)&v1350 + 1) += v204;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&__src, 1, &v1345);
  if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
  {
    v205 = v1345.__r_.__value_.__l.__size_;
    if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v206 = (std::string *)v1345.__r_.__value_.__r.__words[0];
    if (v1345.__r_.__value_.__l.__size_)
    {
      if (!v1345.__r_.__value_.__r.__words[0])
        goto LABEL_3598;
    }
  }
  else
  {
    v205 = HIBYTE(v1345.__r_.__value_.__r.__words[2]);
    v206 = &v1345;
  }
  if (v205 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v207 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v207 = v205;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v206, v207);
  *((_QWORD *)&v1350 + 1) += v207;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  v208 = v1350;
  v209 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v210 = *((_QWORD *)&v1350 + 1);
  if (v208 != v209)
    v210 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v210;
  v1349[v210] = 0;
  if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v1345.__r_.__value_.__l.__data_);
    if ((uint64_t)__p < 7)
      goto LABEL_602;
  }
  else if ((uint64_t)__p < 7)
  {
    goto LABEL_602;
  }
  if ((uint64_t)__src.__r_.__value_.__l.__data_ >= 6 && (int)v1348 >= 1)
  {
    if ((int)(100 * LODWORD(__src.__r_.__value_.__r.__words[2]) + (v1348 >> 1)) / (int)v1348 >= 100)
      v211 = 100;
    else
      v211 = (int)(100 * LODWORD(__src.__r_.__value_.__r.__words[2]) + (v1348 >> 1)) / (int)v1348;
    if (v18)
    {
      v212 = v7[23];
      if (v212 >= 0)
        v213 = v7[23];
      else
        v213 = *((_QWORD *)v7 + 1);
      v214 = v213 + 26;
      if (v213 + 26 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_3599;
      if (v214 > 0x16)
      {
        v224 = (v214 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v214 | 7) != 0x17)
          v224 = v214 | 7;
        v225 = v224 + 1;
        v215 = (std::string *)operator new(v224 + 1);
        v1345.__r_.__value_.__l.__size_ = v213 + 26;
        v1345.__r_.__value_.__r.__words[2] = v225 | 0x8000000000000000;
        v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v215;
        if (v212 >= 0)
          v216 = (std::string *)v7;
        else
          v216 = *(std::string **)v7;
        v217 = (char *)v215 + v213;
        if (v216 < v215)
          goto LABEL_565;
      }
      else
      {
        memset(&v1345, 0, sizeof(v1345));
        v215 = &v1345;
        *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v213 + 26;
        if (v212 >= 0)
          v216 = (std::string *)v7;
        else
          v216 = *(std::string **)v7;
        v217 = (char *)&v1345 + v213;
        if (v216 < &v1345)
        {
LABEL_565:
          if (v213)
            memmove(v215, v216, v213);
          if (v217 <= "SentToInputFpsRatioPercent" && v217 + 26 > "SentToInputFpsRatioPercent")
            goto LABEL_3598;
          strcpy(v217, "SentToInputFpsRatioPercent");
          if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_588;
          v226 = v1345.__r_.__value_.__l.__size_;
          if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_3598;
LABEL_585:
          if (v226 && !v1345.__r_.__value_.__r.__words[0])
            goto LABEL_3598;
          operator delete(v1345.__r_.__value_.__l.__data_);
LABEL_588:
          if (v7[23] < 0)
          {
            v229 = *((_QWORD *)v7 + 1);
            if ((v229 & 0x8000000000000000) != 0)
              goto LABEL_3598;
            v230 = *(const void **)v7;
            if (v229)
            {
              if (!v230)
                goto LABEL_3598;
            }
          }
          else
          {
            v229 = v7[23];
            v230 = v7;
          }
          if (v229 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
            v231 = v1350 + ~*((_QWORD *)&v1350 + 1);
          else
            v231 = v229;
          memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v230, v231);
          *((_QWORD *)&v1350 + 1) += v231;
          v1349[*((_QWORD *)&v1350 + 1)] = 0;
          if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x1BuLL)
            v232 = 27;
          else
            v232 = v1350 + ~*((_QWORD *)&v1350 + 1);
          memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "SentToInputFpsRatioPercent ", v232);
          *((_QWORD *)&v1350 + 1) += v232;
          v1349[*((_QWORD *)&v1350 + 1)] = 0;
          rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%d", v211);
          v233 = v1350;
          v234 = *((_QWORD *)&v1350 + 1) + 1;
          memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
          v235 = *((_QWORD *)&v1350 + 1);
          if (v233 != v234)
            v235 = *((_QWORD *)&v1350 + 1) + 1;
          *((_QWORD *)&v1350 + 1) = v235;
          v1349[v235] = 0;
          goto LABEL_602;
        }
      }
      if (v217 > (char *)v216)
        goto LABEL_3598;
      goto LABEL_565;
    }
    v218 = v7[23];
    if (v218 >= 0)
      v219 = v7[23];
    else
      v219 = *((_QWORD *)v7 + 1);
    v220 = v219 + 26;
    if (v219 + 26 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v220 > 0x16)
    {
      v227 = (v220 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v220 | 7) != 0x17)
        v227 = v220 | 7;
      v228 = v227 + 1;
      v221 = (std::string *)operator new(v227 + 1);
      v1345.__r_.__value_.__l.__size_ = v219 + 26;
      v1345.__r_.__value_.__r.__words[2] = v228 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v221;
      if (v218 >= 0)
        v222 = (std::string *)v7;
      else
        v222 = *(std::string **)v7;
      v223 = (char *)v221 + v219;
      if (v222 < v221)
        goto LABEL_579;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v221 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v219 + 26;
      if (v218 >= 0)
        v222 = (std::string *)v7;
      else
        v222 = *(std::string **)v7;
      v223 = (char *)&v1345 + v219;
      if (v222 < &v1345)
      {
LABEL_579:
        if (v219)
          memmove(v221, v222, v219);
        if (v223 <= "SentToInputFpsRatioPercent" && v223 + 26 > "SentToInputFpsRatioPercent")
          goto LABEL_3598;
        strcpy(v223, "SentToInputFpsRatioPercent");
        if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_588;
        v226 = v1345.__r_.__value_.__l.__size_;
        if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_3598;
        goto LABEL_585;
      }
    }
    if (v223 > (char *)v222)
      goto LABEL_3598;
    goto LABEL_579;
  }
LABEL_602:
  v236 = *((_QWORD *)v7 + 13);
  if (v236 < 200)
    goto LABEL_681;
  v237 = (uint64_t)(*((_QWORD *)v7 + 12) + ((unint64_t)v236 >> 1)) / v236;
  if ((_DWORD)v237 == -1)
    goto LABEL_681;
  if (!v18)
  {
    v238 = atomic_load(&qword_253EA5890);
    if (v238)
      goto LABEL_617;
    v245 = v7[23];
    if (v245 >= 0)
      v246 = v7[23];
    else
      v246 = *((_QWORD *)v7 + 1);
    v247 = v246 + 14;
    if (v246 + 14 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v247 > 0x16)
    {
      v254 = (v247 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v247 | 7) != 0x17)
        v254 = v247 | 7;
      v255 = v254 + 1;
      v248 = (std::string *)operator new(v254 + 1);
      v1345.__r_.__value_.__l.__size_ = v246 + 14;
      v1345.__r_.__value_.__r.__words[2] = v255 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v248;
      if (v245 >= 0)
        v249 = (std::string *)v7;
      else
        v249 = *(std::string **)v7;
      v250 = (char *)v248 + v246;
      if (v249 < v248)
        goto LABEL_654;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v248 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v246 + 14;
      if (v245 >= 0)
        v249 = (std::string *)v7;
      else
        v249 = *(std::string **)v7;
      v250 = (char *)&v1345 + v246;
      if (v249 < &v1345)
        goto LABEL_654;
    }
    if (v250 > (char *)v249)
      goto LABEL_3598;
LABEL_654:
    if (v246)
      memmove(v248, v249, v246);
    if (v250 <= "EncodeTimeInMs" && v250 + 14 > "EncodeTimeInMs")
      goto LABEL_3598;
    strcpy(v250, "EncodeTimeInMs");
    if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(v1345.__r_.__value_.__l.__data_);
    }
    while (!__ldaxr(&qword_253EA5890))
    {
      if (!__stlxr(0, &qword_253EA5890))
        goto LABEL_667;
    }
    goto LABEL_666;
  }
  v238 = atomic_load(&qword_253EA5898);
  if (!v238)
  {
    v239 = v7[23];
    if (v239 >= 0)
      v240 = v7[23];
    else
      v240 = *((_QWORD *)v7 + 1);
    v241 = v240 + 14;
    if (v240 + 14 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v241 > 0x16)
    {
      v251 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v241 | 7) != 0x17)
        v251 = v241 | 7;
      v252 = v251 + 1;
      v242 = (std::string *)operator new(v251 + 1);
      v1345.__r_.__value_.__l.__size_ = v240 + 14;
      v1345.__r_.__value_.__r.__words[2] = v252 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v242;
      if (v239 >= 0)
        v243 = (std::string *)v7;
      else
        v243 = *(std::string **)v7;
      v244 = (char *)v242 + v240;
      if (v243 < v242)
        goto LABEL_635;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v242 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v240 + 14;
      if (v239 >= 0)
        v243 = (std::string *)v7;
      else
        v243 = *(std::string **)v7;
      v244 = (char *)&v1345 + v240;
      if (v243 < &v1345)
        goto LABEL_635;
    }
    if (v244 > (char *)v243)
      goto LABEL_3598;
LABEL_635:
    if (v240)
      memmove(v242, v243, v240);
    if (v244 <= "EncodeTimeInMs" && v244 + 14 > "EncodeTimeInMs")
      goto LABEL_3598;
    strcpy(v244, "EncodeTimeInMs");
    if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(v1345.__r_.__value_.__l.__data_);
    }
    while (!__ldaxr(&qword_253EA5898))
    {
      if (!__stlxr(0, &qword_253EA5898))
        goto LABEL_667;
    }
LABEL_666:
    __clrex();
    goto LABEL_667;
  }
LABEL_617:
  webrtc::metrics::HistogramAdd(v238, (uint64_t)(*((_QWORD *)v7 + 12) + ((unint64_t)v236 >> 1)) / v236);
LABEL_667:
  if (v7[23] < 0)
  {
    v257 = *((_QWORD *)v7 + 1);
    if ((v257 & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v258 = *(const void **)v7;
    if (v257)
    {
      if (!v258)
        goto LABEL_3598;
    }
  }
  else
  {
    v257 = v7[23];
    v258 = v7;
  }
  if (v257 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v259 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v259 = v257;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v258, v259);
  *((_QWORD *)&v1350 + 1) += v259;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0xFuLL)
    v260 = 15;
  else
    v260 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "EncodeTimeInMs ", v260);
  *((_QWORD *)&v1350 + 1) += v260;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%d", v237);
  v261 = v1350;
  v262 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v263 = *((_QWORD *)&v1350 + 1);
  if (v261 != v262)
    v263 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v263;
  v1349[v263] = 0;
LABEL_681:
  v264 = *((_QWORD *)v7 + 15);
  if (v264 < 200)
    goto LABEL_760;
  v265 = (float)((float)((float)*((uint64_t *)v7 + 14) * 1000.0) / (float)v264) + 0.5;
  v266 = (int)v265;
  if ((int)v265 == -1)
    goto LABEL_760;
  if (!v18)
  {
    v267 = atomic_load(&qword_253EA58A0);
    if (v267)
      goto LABEL_696;
    v274 = v7[23];
    if (v274 >= 0)
      v275 = v7[23];
    else
      v275 = *((_QWORD *)v7 + 1);
    v276 = v275 + 23;
    if (v275 + 23 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v275 < 0xFFFFFFFFFFFFFFE9)
    {
      v283 = (v276 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v276 | 7) != 0x17)
        v283 = v276 | 7;
      v284 = v283 + 1;
      v277 = (std::string *)operator new(v283 + 1);
      v1345.__r_.__value_.__l.__size_ = v275 + 23;
      v1345.__r_.__value_.__r.__words[2] = v284 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v277;
      if (v274 >= 0)
        v278 = (std::string *)v7;
      else
        v278 = *(std::string **)v7;
      v279 = (char *)v277 + v275;
      if (v278 < v277)
        goto LABEL_733;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v277 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v275 + 23;
      if (v274 >= 0)
        v278 = (std::string *)v7;
      else
        v278 = *(std::string **)v7;
      v279 = (char *)&v1345 + v275;
      if (v278 < &v1345)
        goto LABEL_733;
    }
    if (v279 > (char *)v278)
      goto LABEL_3598;
LABEL_733:
    if (v275)
      memmove(v277, v278, v275);
    if (v279 <= "KeyFramesSentInPermille" && v279 + 23 > "KeyFramesSentInPermille")
      goto LABEL_3598;
    strcpy(v279, "KeyFramesSentInPermille");
    if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(v1345.__r_.__value_.__l.__data_);
    }
    while (!__ldaxr(&qword_253EA58A0))
    {
      if (!__stlxr(0, &qword_253EA58A0))
        goto LABEL_746;
    }
    goto LABEL_745;
  }
  v267 = atomic_load(&qword_253EA58A8);
  if (!v267)
  {
    v268 = v7[23];
    if (v268 >= 0)
      v269 = v7[23];
    else
      v269 = *((_QWORD *)v7 + 1);
    v270 = v269 + 23;
    if (v269 + 23 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v269 < 0xFFFFFFFFFFFFFFE9)
    {
      v280 = (v270 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v270 | 7) != 0x17)
        v280 = v270 | 7;
      v281 = v280 + 1;
      v271 = (std::string *)operator new(v280 + 1);
      v1345.__r_.__value_.__l.__size_ = v269 + 23;
      v1345.__r_.__value_.__r.__words[2] = v281 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v271;
      if (v268 >= 0)
        v272 = (std::string *)v7;
      else
        v272 = *(std::string **)v7;
      v273 = (char *)v271 + v269;
      if (v272 < v271)
        goto LABEL_714;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v271 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v269 + 23;
      if (v268 >= 0)
        v272 = (std::string *)v7;
      else
        v272 = *(std::string **)v7;
      v273 = (char *)&v1345 + v269;
      if (v272 < &v1345)
        goto LABEL_714;
    }
    if (v273 > (char *)v272)
      goto LABEL_3598;
LABEL_714:
    if (v269)
      memmove(v271, v272, v269);
    if (v273 <= "KeyFramesSentInPermille" && v273 + 23 > "KeyFramesSentInPermille")
      goto LABEL_3598;
    strcpy(v273, "KeyFramesSentInPermille");
    if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(v1345.__r_.__value_.__l.__data_);
    }
    while (!__ldaxr(&qword_253EA58A8))
    {
      if (!__stlxr(0, &qword_253EA58A8))
        goto LABEL_746;
    }
LABEL_745:
    __clrex();
    goto LABEL_746;
  }
LABEL_696:
  webrtc::metrics::HistogramAdd(v267, (int)v265);
LABEL_746:
  if (v7[23] < 0)
  {
    v286 = *((_QWORD *)v7 + 1);
    if ((v286 & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v287 = *(const void **)v7;
    if (v286)
    {
      if (!v287)
        goto LABEL_3598;
    }
  }
  else
  {
    v286 = v7[23];
    v287 = v7;
  }
  if (v286 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v288 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v288 = v286;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v287, v288);
  *((_QWORD *)&v1350 + 1) += v288;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x18uLL)
    v289 = 24;
  else
    v289 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "KeyFramesSentInPermille ", v289);
  *((_QWORD *)&v1350 + 1) += v289;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%d", v266);
  v290 = v1350;
  v291 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v292 = *((_QWORD *)&v1350 + 1);
  if (v290 != v291)
    v292 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v292;
  v1349[v292] = 0;
LABEL_760:
  v293 = *((_QWORD *)v7 + 17);
  if (v293 < 200)
    goto LABEL_827;
  v294 = (int)(float)((float)((float)((float)*((uint64_t *)v7 + 16) * 100.0) / (float)v293) + 0.5);
  if (v294 == -1)
    goto LABEL_827;
  if (!v18)
  {
    v301 = v7[23];
    if (v301 >= 0)
      v302 = v7[23];
    else
      v302 = *((_QWORD *)v7 + 1);
    v303 = v302 + 33;
    if (v302 + 33 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v303 > 0x16)
    {
      v310 = (v303 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v303 | 7) != 0x17)
        v310 = v303 | 7;
      v311 = v310 + 1;
      v304 = (std::string *)operator new(v310 + 1);
      v1345.__r_.__value_.__l.__size_ = v302 + 33;
      v1345.__r_.__value_.__r.__words[2] = v311 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v304;
      if (v301 >= 0)
        v305 = (std::string *)v7;
      else
        v305 = *(std::string **)v7;
      v306 = (char *)v304 + v302;
      if (v305 < v304)
        goto LABEL_804;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v304 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v302 + 33;
      if (v301 >= 0)
        v305 = (std::string *)v7;
      else
        v305 = *(std::string **)v7;
      v306 = (char *)&v1345 + v302;
      if (v305 < &v1345)
      {
LABEL_804:
        if (v302)
          memmove(v304, v305, v302);
        if (v306 <= "QualityLimitedResolutionInPercent" && v306 + 33 > "QualityLimitedResolutionInPercent")
          goto LABEL_3598;
        strcpy(v306, "QualityLimitedResolutionInPercent");
        if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_813;
        v309 = v1345.__r_.__value_.__l.__size_;
        if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_3598;
        goto LABEL_810;
      }
    }
    if (v306 > (char *)v305)
      goto LABEL_3598;
    goto LABEL_804;
  }
  v295 = v7[23];
  if (v295 >= 0)
    v296 = v7[23];
  else
    v296 = *((_QWORD *)v7 + 1);
  v297 = v296 + 33;
  if (v296 + 33 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v297 > 0x16)
  {
    v307 = (v297 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v297 | 7) != 0x17)
      v307 = v297 | 7;
    v308 = v307 + 1;
    v298 = (std::string *)operator new(v307 + 1);
    v1345.__r_.__value_.__l.__size_ = v296 + 33;
    v1345.__r_.__value_.__r.__words[2] = v308 | 0x8000000000000000;
    v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
    if (v295 >= 0)
      v299 = (std::string *)v7;
    else
      v299 = *(std::string **)v7;
    v300 = (char *)v298 + v296;
    if (v299 < v298)
      goto LABEL_790;
LABEL_789:
    if (v300 > (char *)v299)
      goto LABEL_3598;
    goto LABEL_790;
  }
  memset(&v1345, 0, sizeof(v1345));
  v298 = &v1345;
  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v296 + 33;
  if (v295 >= 0)
    v299 = (std::string *)v7;
  else
    v299 = *(std::string **)v7;
  v300 = (char *)&v1345 + v296;
  if (v299 >= &v1345)
    goto LABEL_789;
LABEL_790:
  if (v296)
    memmove(v298, v299, v296);
  if (v300 <= "QualityLimitedResolutionInPercent" && v300 + 33 > "QualityLimitedResolutionInPercent")
    goto LABEL_3598;
  strcpy(v300, "QualityLimitedResolutionInPercent");
  if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_813;
  v309 = v1345.__r_.__value_.__l.__size_;
  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_3598;
LABEL_810:
  if (v309 && !v1345.__r_.__value_.__r.__words[0])
    goto LABEL_3598;
  operator delete(v1345.__r_.__value_.__l.__data_);
LABEL_813:
  if (v7[23] < 0)
  {
    v312 = *((_QWORD *)v7 + 1);
    if ((v312 & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v313 = *(const void **)v7;
    if (v312)
    {
      if (!v313)
        goto LABEL_3598;
    }
  }
  else
  {
    v312 = v7[23];
    v313 = v7;
  }
  if (v312 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v314 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v314 = v312;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v313, v314);
  *((_QWORD *)&v1350 + 1) += v314;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x22uLL)
    v315 = 34;
  else
    v315 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "QualityLimitedResolutionInPercent ", v315);
  *((_QWORD *)&v1350 + 1) += v315;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%d", v294);
  v316 = v1350;
  v317 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v318 = *((_QWORD *)&v1350 + 1);
  if (v316 != v317)
    v318 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v318;
  v1349[v318] = 0;
LABEL_827:
  v319 = *((_QWORD *)v7 + 19);
  if (v319 < 200 || ((uint64_t)(*((_QWORD *)v7 + 18) + ((unint64_t)v319 >> 1)) / v319) == -1)
    goto LABEL_876;
  if (!v18)
  {
    v326 = v7[23];
    if (v326 >= 0)
      v327 = v7[23];
    else
      v327 = *((_QWORD *)v7 + 1);
    v328 = v327 + 34;
    if (v327 + 34 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v328 > 0x16)
    {
      v335 = (v328 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v328 | 7) != 0x17)
        v335 = v328 | 7;
      v336 = v335 + 1;
      v329 = (std::string *)operator new(v335 + 1);
      v1345.__r_.__value_.__l.__size_ = v327 + 34;
      v1345.__r_.__value_.__r.__words[2] = v336 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v329;
      if (v326 >= 0)
        v330 = (std::string *)v7;
      else
        v330 = *(std::string **)v7;
      v331 = (char *)v329 + v327;
      if (v330 < v329)
        goto LABEL_871;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v329 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v327 + 34;
      if (v326 >= 0)
        v330 = (std::string *)v7;
      else
        v330 = *(std::string **)v7;
      v331 = (char *)&v1345 + v327;
      if (v330 < &v1345)
        goto LABEL_871;
    }
    if (v331 > (char *)v330)
      goto LABEL_3598;
LABEL_871:
    if (v327)
      memmove(v329, v330, v327);
    if (v331 <= "QualityLimitedResolutionDownscales" && v331 + 34 > "QualityLimitedResolutionDownscales")
      goto LABEL_3598;
    strcpy(v331, "QualityLimitedResolutionDownscales");
    if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
    {
      v334 = v1345.__r_.__value_.__l.__size_;
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_3598;
      goto LABEL_930;
    }
LABEL_876:
    v337 = *((_QWORD *)v7 + 21);
    if (v337 < 200)
      goto LABEL_933;
    goto LABEL_877;
  }
  v320 = v7[23];
  if (v320 >= 0)
    v321 = v7[23];
  else
    v321 = *((_QWORD *)v7 + 1);
  v322 = v321 + 34;
  if (v321 + 34 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v322 > 0x16)
  {
    v332 = (v322 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v322 | 7) != 0x17)
      v332 = v322 | 7;
    v333 = v332 + 1;
    v323 = (std::string *)operator new(v332 + 1);
    v1345.__r_.__value_.__l.__size_ = v321 + 34;
    v1345.__r_.__value_.__r.__words[2] = v333 | 0x8000000000000000;
    v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v323;
    if (v320 >= 0)
      v324 = (std::string *)v7;
    else
      v324 = *(std::string **)v7;
    v325 = (char *)v323 + v321;
    if (v324 < v323)
      goto LABEL_857;
  }
  else
  {
    memset(&v1345, 0, sizeof(v1345));
    v323 = &v1345;
    *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v321 + 34;
    if (v320 >= 0)
      v324 = (std::string *)v7;
    else
      v324 = *(std::string **)v7;
    v325 = (char *)&v1345 + v321;
    if (v324 < &v1345)
      goto LABEL_857;
  }
  if (v325 > (char *)v324)
    goto LABEL_3598;
LABEL_857:
  if (v321)
    memmove(v323, v324, v321);
  if (v325 <= "QualityLimitedResolutionDownscales" && v325 + 34 > "QualityLimitedResolutionDownscales")
    goto LABEL_3598;
  strcpy(v325, "QualityLimitedResolutionDownscales");
  if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_876;
  v334 = v1345.__r_.__value_.__l.__size_;
  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_3598;
LABEL_930:
  if (v334 && !v1345.__r_.__value_.__r.__words[0])
    goto LABEL_3598;
  operator delete(v1345.__r_.__value_.__l.__data_);
  v337 = *((_QWORD *)v7 + 21);
  if (v337 < 200)
    goto LABEL_933;
LABEL_877:
  if ((int)(float)((float)((float)((float)*((uint64_t *)v7 + 20) * 100.0) / (float)v337) + 0.5) == -1)
    goto LABEL_933;
  if (v18)
  {
    v338 = v7[23];
    if (v338 >= 0)
      v339 = v7[23];
    else
      v339 = *((_QWORD *)v7 + 1);
    v340 = v339 + 29;
    if (v339 + 29 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v340 > 0x16)
    {
      v350 = (v340 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v340 | 7) != 0x17)
        v350 = v340 | 7;
      v351 = v350 + 1;
      v341 = (std::string *)operator new(v350 + 1);
      v1345.__r_.__value_.__l.__size_ = v339 + 29;
      v1345.__r_.__value_.__r.__words[2] = v351 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v341;
      if (v338 >= 0)
        v342 = (std::string *)v7;
      else
        v342 = *(std::string **)v7;
      v343 = (char *)v341 + v339;
      if (v342 < v341)
        goto LABEL_906;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v341 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v339 + 29;
      if (v338 >= 0)
        v342 = (std::string *)v7;
      else
        v342 = *(std::string **)v7;
      v343 = (char *)&v1345 + v339;
      if (v342 < &v1345)
        goto LABEL_906;
    }
    if (v343 > (char *)v342)
      goto LABEL_3598;
LABEL_906:
    if (v339)
      memmove(v341, v342, v339);
    if (v343 <= "CpuLimitedResolutionInPercent" && v343 + 29 > "CpuLimitedResolutionInPercent")
      goto LABEL_3598;
    strcpy(v343, "CpuLimitedResolutionInPercent");
    if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
    {
      v352 = v1345.__r_.__value_.__l.__size_;
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_3598;
      goto LABEL_926;
    }
    goto LABEL_933;
  }
  v344 = v7[23];
  if (v344 >= 0)
    v345 = v7[23];
  else
    v345 = *((_QWORD *)v7 + 1);
  v346 = v345 + 29;
  if (v345 + 29 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v346 > 0x16)
  {
    v353 = (v346 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v346 | 7) != 0x17)
      v353 = v346 | 7;
    v354 = v353 + 1;
    v347 = (std::string *)operator new(v353 + 1);
    v1345.__r_.__value_.__l.__size_ = v345 + 29;
    v1345.__r_.__value_.__r.__words[2] = v354 | 0x8000000000000000;
    v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v347;
    if (v344 >= 0)
      v348 = (std::string *)v7;
    else
      v348 = *(std::string **)v7;
    v349 = (char *)v347 + v345;
    if (v348 < v347)
      goto LABEL_920;
  }
  else
  {
    memset(&v1345, 0, sizeof(v1345));
    v347 = &v1345;
    *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v345 + 29;
    if (v344 >= 0)
      v348 = (std::string *)v7;
    else
      v348 = *(std::string **)v7;
    v349 = (char *)&v1345 + v345;
    if (v348 < &v1345)
      goto LABEL_920;
  }
  if (v349 > (char *)v348)
    goto LABEL_3598;
LABEL_920:
  if (v345)
    memmove(v347, v348, v345);
  if (v349 <= "CpuLimitedResolutionInPercent" && v349 + 29 > "CpuLimitedResolutionInPercent")
    goto LABEL_3598;
  strcpy(v349, "CpuLimitedResolutionInPercent");
  if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
  {
    v352 = v1345.__r_.__value_.__l.__size_;
    if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_3598;
LABEL_926:
    if (v352 && !v1345.__r_.__value_.__r.__words[0])
      goto LABEL_3598;
    operator delete(v1345.__r_.__value_.__l.__data_);
  }
LABEL_933:
  v355 = *((_QWORD *)v7 + 23);
  if (v355 < 200 || (int)(float)((float)((float)((float)*((uint64_t *)v7 + 22) * 100.0) / (float)v355) + 0.5) == -1)
    goto LABEL_982;
  if (!v18)
  {
    v362 = v7[23];
    if (v362 >= 0)
      v363 = v7[23];
    else
      v363 = *((_QWORD *)v7 + 1);
    v364 = v363 + 35;
    if (v363 + 35 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v364 > 0x16)
    {
      v371 = (v364 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v364 | 7) != 0x17)
        v371 = v364 | 7;
      v372 = v371 + 1;
      v365 = (std::string *)operator new(v371 + 1);
      v1345.__r_.__value_.__l.__size_ = v363 + 35;
      v1345.__r_.__value_.__r.__words[2] = v372 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v365;
      if (v362 >= 0)
        v366 = (std::string *)v7;
      else
        v366 = *(std::string **)v7;
      v367 = (char *)v365 + v363;
      if (v366 < v365)
        goto LABEL_977;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v365 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v363 + 35;
      if (v362 >= 0)
        v366 = (std::string *)v7;
      else
        v366 = *(std::string **)v7;
      v367 = (char *)&v1345 + v363;
      if (v366 < &v1345)
        goto LABEL_977;
    }
    if (v367 > (char *)v366)
      goto LABEL_3598;
LABEL_977:
    if (v363)
      memmove(v365, v366, v363);
    if (v367 <= "BandwidthLimitedResolutionInPercent" && v367 + 35 > "BandwidthLimitedResolutionInPercent")
      goto LABEL_3598;
    strcpy(v367, "BandwidthLimitedResolutionInPercent");
    if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
    {
      v370 = v1345.__r_.__value_.__l.__size_;
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_3598;
      goto LABEL_1034;
    }
LABEL_982:
    v373 = *((_QWORD *)v7 + 25);
    if (v373 < 200)
      goto LABEL_1037;
LABEL_983:
    if (((uint64_t)(*((_QWORD *)v7 + 24) + ((unint64_t)v373 >> 1)) / v373) == -1)
      goto LABEL_1037;
    if (v18)
    {
      v374 = v7[23];
      if (v374 >= 0)
        v375 = v7[23];
      else
        v375 = *((_QWORD *)v7 + 1);
      v376 = v375 + 35;
      if (v375 + 35 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_3599;
      if (v376 > 0x16)
      {
        v385 = (v376 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v376 | 7) != 0x17)
          v385 = v376 | 7;
        v386 = v385 + 1;
        v377 = (std::string *)operator new(v385 + 1);
        v1345.__r_.__value_.__l.__size_ = v375 + 35;
        v1345.__r_.__value_.__r.__words[2] = v386 | 0x8000000000000000;
        v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v377;
        if (v374 >= 0)
          v378 = (std::string *)v7;
        else
          v378 = *(std::string **)v7;
        v379 = (char *)v377 + v375;
        if (v378 < v377)
          goto LABEL_1012;
      }
      else
      {
        memset(&v1345, 0, sizeof(v1345));
        v377 = &v1345;
        *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v375 + 35;
        if (v374 >= 0)
          v378 = (std::string *)v7;
        else
          v378 = *(std::string **)v7;
        v379 = (char *)&v1345 + v375;
        if (v378 < &v1345)
          goto LABEL_1012;
      }
      if (v379 > (char *)v378)
        goto LABEL_3598;
LABEL_1012:
      if (v375)
        memmove(v377, v378, v375);
      if (v379 <= "BandwidthLimitedResolutionsDisabled" && v379 + 35 > "BandwidthLimitedResolutionsDisabled")
        goto LABEL_3598;
LABEL_1028:
      strcpy(v379, "BandwidthLimitedResolutionsDisabled");
      if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
      {
        if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
          || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
        {
          goto LABEL_3598;
        }
        operator delete(v1345.__r_.__value_.__l.__data_);
      }
      goto LABEL_1037;
    }
    v380 = v7[23];
    if (v380 >= 0)
      v381 = v7[23];
    else
      v381 = *((_QWORD *)v7 + 1);
    v382 = v381 + 35;
    if (v381 + 35 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v382 > 0x16)
    {
      v387 = (v382 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v382 | 7) != 0x17)
        v387 = v382 | 7;
      v388 = v387 + 1;
      v383 = (std::string *)operator new(v387 + 1);
      v1345.__r_.__value_.__l.__size_ = v381 + 35;
      v1345.__r_.__value_.__r.__words[2] = v388 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v383;
      if (v380 >= 0)
        v384 = (std::string *)v7;
      else
        v384 = *(std::string **)v7;
      v379 = (char *)v383 + v381;
      if (v384 < v383)
        goto LABEL_1024;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v383 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v381 + 35;
      if (v380 >= 0)
        v384 = (std::string *)v7;
      else
        v384 = *(std::string **)v7;
      v379 = (char *)&v1345 + v381;
      if (v384 < &v1345)
        goto LABEL_1024;
    }
    if (v379 > (char *)v384)
      goto LABEL_3598;
LABEL_1024:
    if (v381)
      memmove(v383, v384, v381);
    if (v379 <= "BandwidthLimitedResolutionsDisabled" && v379 + 35 > "BandwidthLimitedResolutionsDisabled")
      goto LABEL_3598;
    goto LABEL_1028;
  }
  v356 = v7[23];
  if (v356 >= 0)
    v357 = v7[23];
  else
    v357 = *((_QWORD *)v7 + 1);
  v358 = v357 + 35;
  if (v357 + 35 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v358 > 0x16)
  {
    v368 = (v358 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v358 | 7) != 0x17)
      v368 = v358 | 7;
    v369 = v368 + 1;
    v359 = (std::string *)operator new(v368 + 1);
    v1345.__r_.__value_.__l.__size_ = v357 + 35;
    v1345.__r_.__value_.__r.__words[2] = v369 | 0x8000000000000000;
    v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v359;
    if (v356 >= 0)
      v360 = (std::string *)v7;
    else
      v360 = *(std::string **)v7;
    v361 = (char *)v359 + v357;
    if (v360 < v359)
      goto LABEL_963;
  }
  else
  {
    memset(&v1345, 0, sizeof(v1345));
    v359 = &v1345;
    *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v357 + 35;
    if (v356 >= 0)
      v360 = (std::string *)v7;
    else
      v360 = *(std::string **)v7;
    v361 = (char *)&v1345 + v357;
    if (v360 < &v1345)
      goto LABEL_963;
  }
  if (v361 > (char *)v360)
    goto LABEL_3598;
LABEL_963:
  if (v357)
    memmove(v359, v360, v357);
  if (v361 <= "BandwidthLimitedResolutionInPercent" && v361 + 35 > "BandwidthLimitedResolutionInPercent")
    goto LABEL_3598;
  strcpy(v361, "BandwidthLimitedResolutionInPercent");
  if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_982;
  v370 = v1345.__r_.__value_.__l.__size_;
  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_3598;
LABEL_1034:
  if (v370 && !v1345.__r_.__value_.__r.__words[0])
    goto LABEL_3598;
  operator delete(v1345.__r_.__value_.__l.__data_);
  v373 = *((_QWORD *)v7 + 25);
  if (v373 >= 200)
    goto LABEL_983;
LABEL_1037:
  v389 = *((_QWORD *)v7 + 27);
  if (v389 < 200 || (v390 = (uint64_t)(*((_QWORD *)v7 + 26) + ((unint64_t)v389 >> 1)) / v389, (_DWORD)v390 == -1))
  {
LABEL_1101:
    v1338 = v5;
    v398 = *((_QWORD *)v7 + 29);
    if (v398 < 200)
      goto LABEL_1170;
    goto LABEL_1102;
  }
  if (v18)
  {
    v391 = atomic_load(&qword_253EA58B8);
    if (!v391)
    {
      v392 = v7[23];
      if (v392 >= 0)
        v393 = v7[23];
      else
        v393 = *((_QWORD *)v7 + 1);
      v394 = v393 + 17;
      if (v393 + 17 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_3599;
      if (v394 > 0x16)
      {
        v405 = (v394 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v394 | 7) != 0x17)
          v405 = v394 | 7;
        v406 = v405 + 1;
        v395 = (std::string *)operator new(v405 + 1);
        v1345.__r_.__value_.__l.__size_ = v393 + 17;
        v1345.__r_.__value_.__r.__words[2] = v406 | 0x8000000000000000;
        v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v395;
        if (v392 >= 0)
          v396 = (std::string *)v7;
        else
          v396 = *(std::string **)v7;
        v397 = (char *)v395 + v393;
        if (v396 < v395)
          goto LABEL_1071;
      }
      else
      {
        memset(&v1345, 0, sizeof(v1345));
        v395 = &v1345;
        *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v393 + 17;
        if (v392 >= 0)
          v396 = (std::string *)v7;
        else
          v396 = *(std::string **)v7;
        v397 = (char *)&v1345 + v393;
        if (v396 < &v1345)
          goto LABEL_1071;
      }
      if (v397 > (char *)v396)
        goto LABEL_3598;
LABEL_1071:
      if (v393)
        memmove(v395, v396, v393);
      if (v397 <= "SendSideDelayInMs" && v397 + 17 > "SendSideDelayInMs")
        goto LABEL_3598;
      strcpy(v397, "SendSideDelayInMs");
      if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
      {
        if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
          || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
        {
          goto LABEL_3598;
        }
        operator delete(v1345.__r_.__value_.__l.__data_);
      }
      while (!__ldaxr(&qword_253EA58B8))
      {
        if (!__stlxr(0, &qword_253EA58B8))
          goto LABEL_1101;
      }
      goto LABEL_1113;
    }
LABEL_1052:
    webrtc::metrics::HistogramAdd(v391, v390);
    v1338 = v5;
    v398 = *((_QWORD *)v7 + 29);
    if (v398 < 200)
      goto LABEL_1170;
    goto LABEL_1102;
  }
  v391 = atomic_load(&qword_253EA58B0);
  if (v391)
    goto LABEL_1052;
  v399 = v7[23];
  if (v399 >= 0)
    v400 = v7[23];
  else
    v400 = *((_QWORD *)v7 + 1);
  v401 = v400 + 17;
  if (v400 + 17 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v401 > 0x16)
  {
    v408 = (v401 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v401 | 7) != 0x17)
      v408 = v401 | 7;
    v409 = v408 + 1;
    v402 = (std::string *)operator new(v408 + 1);
    v1345.__r_.__value_.__l.__size_ = v400 + 17;
    v1345.__r_.__value_.__r.__words[2] = v409 | 0x8000000000000000;
    v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v402;
    if (v399 >= 0)
      v403 = (std::string *)v7;
    else
      v403 = *(std::string **)v7;
    v404 = (char *)v402 + v400;
    if (v403 < v402)
      goto LABEL_1090;
  }
  else
  {
    memset(&v1345, 0, sizeof(v1345));
    v402 = &v1345;
    *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v400 + 17;
    if (v399 >= 0)
      v403 = (std::string *)v7;
    else
      v403 = *(std::string **)v7;
    v404 = (char *)&v1345 + v400;
    if (v403 < &v1345)
      goto LABEL_1090;
  }
  if (v404 > (char *)v403)
    goto LABEL_3598;
LABEL_1090:
  if (v400)
    memmove(v402, v403, v400);
  if (v404 <= "SendSideDelayInMs" && v404 + 17 > "SendSideDelayInMs")
    goto LABEL_3598;
  strcpy(v404, "SendSideDelayInMs");
  if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
  {
    if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(v1345.__r_.__value_.__l.__data_);
  }
  while (!__ldaxr(&qword_253EA58B0))
  {
    if (!__stlxr(0, &qword_253EA58B0))
      goto LABEL_1101;
  }
LABEL_1113:
  __clrex();
  v1338 = v5;
  v398 = *((_QWORD *)v7 + 29);
  if (v398 < 200)
    goto LABEL_1170;
LABEL_1102:
  v411 = (uint64_t)(*((_QWORD *)v7 + 28) + ((unint64_t)v398 >> 1)) / v398;
  if ((_DWORD)v411 == -1)
    goto LABEL_1170;
  if (!v18)
  {
    v412 = atomic_load(&qword_253EA58C0);
    if (!v412)
    {
      v417 = v7[23];
      if (v417 >= 0)
        v418 = v7[23];
      else
        v418 = *((_QWORD *)v7 + 1);
      v419 = v418 + 20;
      if (v418 + 20 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_3599;
      if (v419 > 0x16)
      {
        v428 = (v419 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v419 | 7) != 0x17)
          v428 = v419 | 7;
        v429 = v428 + 1;
        v420 = (std::string *)operator new(v428 + 1);
        v1345.__r_.__value_.__l.__size_ = v418 + 20;
        v1345.__r_.__value_.__r.__words[2] = v429 | 0x8000000000000000;
        v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v420;
      }
      else
      {
        memset(&v1345, 0, sizeof(v1345));
        v420 = &v1345;
        *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v418 + 20;
      }
      if (v417 >= 0)
        v430 = (std::string *)v7;
      else
        v430 = *(std::string **)v7;
      v431 = (char *)v420 + v418;
      if (v430 >= v420 && v431 > (char *)v430)
        goto LABEL_3598;
      if (v418)
        memmove(v420, v430, v418);
      if (v431 <= "SendSideDelayMaxInMs" && v431 + 20 > "SendSideDelayMaxInMs")
        goto LABEL_3598;
      strcpy(v431, "SendSideDelayMaxInMs");
      if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
      {
        if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
          || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
        {
          goto LABEL_3598;
        }
        operator delete(v1345.__r_.__value_.__l.__data_);
      }
      while (!__ldaxr(&qword_253EA58C0))
      {
        if (!__stlxr(0, &qword_253EA58C0))
          goto LABEL_1170;
      }
      goto LABEL_1169;
    }
LABEL_1112:
    webrtc::metrics::HistogramAdd(v412, v411);
    goto LABEL_1170;
  }
  v412 = atomic_load(&qword_253EA58C8);
  if (v412)
    goto LABEL_1112;
  v413 = v7[23];
  if (v413 >= 0)
    v414 = v7[23];
  else
    v414 = *((_QWORD *)v7 + 1);
  v415 = v414 + 20;
  if (v414 + 20 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v415 > 0x16)
  {
    v421 = (v415 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v415 | 7) != 0x17)
      v421 = v415 | 7;
    v422 = v421 + 1;
    v416 = (std::string *)operator new(v421 + 1);
    v1345.__r_.__value_.__l.__size_ = v414 + 20;
    v1345.__r_.__value_.__r.__words[2] = v422 | 0x8000000000000000;
    v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v416;
  }
  else
  {
    memset(&v1345, 0, sizeof(v1345));
    v416 = &v1345;
    *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v414 + 20;
  }
  if (v413 >= 0)
    v423 = (std::string *)v7;
  else
    v423 = *(std::string **)v7;
  v424 = (char *)v416 + v414;
  if (v423 >= v416 && v424 > (char *)v423)
    goto LABEL_3598;
  if (v414)
    memmove(v416, v423, v414);
  if (v424 <= "SendSideDelayMaxInMs" && v424 + 20 > "SendSideDelayMaxInMs")
    goto LABEL_3598;
  strcpy(v424, "SendSideDelayMaxInMs");
  if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
  {
    if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(v1345.__r_.__value_.__l.__data_);
  }
  while (!__ldaxr(&qword_253EA58C8))
  {
    if (!__stlxr(0, &qword_253EA58C8))
      goto LABEL_1170;
  }
LABEL_1169:
  __clrex();
LABEL_1170:
  v435 = (char *)*((_QWORD *)v7 + 179);
  if (v435 != v7 + 1440)
  {
    do
    {
      v436 = *((_QWORD *)v435 + 6);
      if (v436 >= 200)
      {
        v437 = (uint64_t)(*((_QWORD *)v435 + 5) + ((unint64_t)v436 >> 1)) / v436;
        if ((_DWORD)v437 != -1)
        {
          switch(*((_DWORD *)v435 + 8))
          {
            case 0xFFFFFFFF:
              if (v18)
              {
                v438 = atomic_load(&qword_253EA58D8);
                if (v438)
                  goto LABEL_1232;
                v439 = v7[23];
                if (v439 >= 0)
                  v440 = v7[23];
                else
                  v440 = *((_QWORD *)v7 + 1);
                v441 = v440 + 14;
                if (v440 + 14 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v441 > 0x16)
                {
                  v564 = (v441 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v441 | 7) != 0x17)
                    v564 = v441 | 7;
                  v565 = v564 + 1;
                  v442 = (std::string *)operator new(v564 + 1);
                  v1345.__r_.__value_.__l.__size_ = v440 + 14;
                  v1345.__r_.__value_.__r.__words[2] = v565 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v442;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v442 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v440 + 14;
                }
                if (v439 >= 0)
                  v566 = (std::string *)v7;
                else
                  v566 = *(std::string **)v7;
                v567 = (char *)v442 + v440;
                if (v566 >= v442 && v567 > (char *)v566)
                  goto LABEL_3598;
                if (v440)
                  memmove(v442, v566, v440);
                if (v567 <= "Encoded.Qp.Vp8" && v567 + 14 > "Encoded.Qp.Vp8")
                  goto LABEL_3598;
                strcpy(v567, "Encoded.Qp.Vp8");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA58D8))
                    goto LABEL_1553;
                }
                while (__stlxr(0, &qword_253EA58D8));
              }
              else
              {
                v438 = atomic_load(&qword_253EA58D0);
                if (v438)
                  goto LABEL_1232;
                v462 = v7[23];
                if (v462 >= 0)
                  v463 = v7[23];
                else
                  v463 = *((_QWORD *)v7 + 1);
                v464 = v463 + 14;
                if (v463 + 14 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v464 > 0x16)
                {
                  v588 = (v464 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v464 | 7) != 0x17)
                    v588 = v464 | 7;
                  v589 = v588 + 1;
                  v465 = (std::string *)operator new(v588 + 1);
                  v1345.__r_.__value_.__l.__size_ = v463 + 14;
                  v1345.__r_.__value_.__r.__words[2] = v589 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v465;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v465 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v463 + 14;
                }
                if (v462 >= 0)
                  v590 = (std::string *)v7;
                else
                  v590 = *(std::string **)v7;
                v591 = (char *)v465 + v463;
                if (v590 >= v465 && v591 > (char *)v590)
                  goto LABEL_3598;
                if (v463)
                  memmove(v465, v590, v463);
                if (v591 <= "Encoded.Qp.Vp8" && v591 + 14 > "Encoded.Qp.Vp8")
                  goto LABEL_3598;
                strcpy(v591, "Encoded.Qp.Vp8");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA58D0))
                    goto LABEL_1553;
                }
                while (__stlxr(0, &qword_253EA58D0));
              }
              break;
            case 0:
              if (v18)
              {
                v438 = atomic_load(&qword_253EA58E8);
                if (v438)
                  goto LABEL_1232;
                v450 = v7[23];
                if (v450 >= 0)
                  v451 = v7[23];
                else
                  v451 = *((_QWORD *)v7 + 1);
                v452 = v451 + 17;
                if (v451 + 17 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v452 > 0x16)
                {
                  v570 = (v452 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v452 | 7) != 0x17)
                    v570 = v452 | 7;
                  v571 = v570 + 1;
                  v453 = (std::string *)operator new(v570 + 1);
                  v1345.__r_.__value_.__l.__size_ = v451 + 17;
                  v1345.__r_.__value_.__r.__words[2] = v571 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v453;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v453 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v451 + 17;
                }
                if (v450 >= 0)
                  v572 = (std::string *)v7;
                else
                  v572 = *(std::string **)v7;
                v573 = (char *)v453 + v451;
                if (v572 >= v453 && v573 > (char *)v572)
                  goto LABEL_3598;
                if (v451)
                  memmove(v453, v572, v451);
                if (v573 <= "Encoded.Qp.Vp8.S0" && v573 + 17 > "Encoded.Qp.Vp8.S0")
                  goto LABEL_3598;
                strcpy(v573, "Encoded.Qp.Vp8.S0");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA58E8))
                    goto LABEL_1553;
                }
                while (__stlxr(0, &qword_253EA58E8));
              }
              else
              {
                v438 = atomic_load(&qword_253EA58E0);
                if (v438)
                  goto LABEL_1232;
                v466 = v7[23];
                if (v466 >= 0)
                  v467 = v7[23];
                else
                  v467 = *((_QWORD *)v7 + 1);
                v468 = v467 + 17;
                if (v467 + 17 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v468 > 0x16)
                {
                  v594 = (v468 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v468 | 7) != 0x17)
                    v594 = v468 | 7;
                  v595 = v594 + 1;
                  v469 = (std::string *)operator new(v594 + 1);
                  v1345.__r_.__value_.__l.__size_ = v467 + 17;
                  v1345.__r_.__value_.__r.__words[2] = v595 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v469;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v469 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v467 + 17;
                }
                if (v466 >= 0)
                  v596 = (std::string *)v7;
                else
                  v596 = *(std::string **)v7;
                v597 = (char *)v469 + v467;
                if (v596 >= v469 && v597 > (char *)v596)
                  goto LABEL_3598;
                if (v467)
                  memmove(v469, v596, v467);
                if (v597 <= "Encoded.Qp.Vp8.S0" && v597 + 17 > "Encoded.Qp.Vp8.S0")
                  goto LABEL_3598;
                strcpy(v597, "Encoded.Qp.Vp8.S0");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA58E0))
                    goto LABEL_1553;
                }
                while (__stlxr(0, &qword_253EA58E0));
              }
              break;
            case 1:
              if (v18)
              {
                v438 = atomic_load(&qword_253EA58F8);
                if (v438)
                  goto LABEL_1232;
                v454 = v7[23];
                if (v454 >= 0)
                  v455 = v7[23];
                else
                  v455 = *((_QWORD *)v7 + 1);
                v456 = v455 + 17;
                if (v455 + 17 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v456 > 0x16)
                {
                  v576 = (v456 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v456 | 7) != 0x17)
                    v576 = v456 | 7;
                  v577 = v576 + 1;
                  v457 = (std::string *)operator new(v576 + 1);
                  v1345.__r_.__value_.__l.__size_ = v455 + 17;
                  v1345.__r_.__value_.__r.__words[2] = v577 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v457;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v457 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v455 + 17;
                }
                if (v454 >= 0)
                  v578 = (std::string *)v7;
                else
                  v578 = *(std::string **)v7;
                v579 = (char *)v457 + v455;
                if (v578 >= v457 && v579 > (char *)v578)
                  goto LABEL_3598;
                if (v455)
                  memmove(v457, v578, v455);
                if (v579 <= "Encoded.Qp.Vp8.S1" && v579 + 17 > "Encoded.Qp.Vp8.S1")
                  goto LABEL_3598;
                strcpy(v579, "Encoded.Qp.Vp8.S1");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA58F8))
                    goto LABEL_1553;
                }
                while (__stlxr(0, &qword_253EA58F8));
              }
              else
              {
                v438 = atomic_load(&qword_253EA58F0);
                if (v438)
                  goto LABEL_1232;
                v470 = v7[23];
                if (v470 >= 0)
                  v471 = v7[23];
                else
                  v471 = *((_QWORD *)v7 + 1);
                v472 = v471 + 17;
                if (v471 + 17 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v472 > 0x16)
                {
                  v600 = (v472 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v472 | 7) != 0x17)
                    v600 = v472 | 7;
                  v601 = v600 + 1;
                  v473 = (std::string *)operator new(v600 + 1);
                  v1345.__r_.__value_.__l.__size_ = v471 + 17;
                  v1345.__r_.__value_.__r.__words[2] = v601 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v473;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v473 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v471 + 17;
                }
                if (v470 >= 0)
                  v602 = (std::string *)v7;
                else
                  v602 = *(std::string **)v7;
                v603 = (char *)v473 + v471;
                if (v602 >= v473 && v603 > (char *)v602)
                  goto LABEL_3598;
                if (v471)
                  memmove(v473, v602, v471);
                if (v603 <= "Encoded.Qp.Vp8.S1" && v603 + 17 > "Encoded.Qp.Vp8.S1")
                  goto LABEL_3598;
                strcpy(v603, "Encoded.Qp.Vp8.S1");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA58F0))
                    goto LABEL_1553;
                }
                while (__stlxr(0, &qword_253EA58F0));
              }
              break;
            case 2:
              if (v18)
              {
                v438 = atomic_load(&qword_253EA5908);
                if (v438)
                  goto LABEL_1232;
                v458 = v7[23];
                if (v458 >= 0)
                  v459 = v7[23];
                else
                  v459 = *((_QWORD *)v7 + 1);
                v460 = v459 + 17;
                if (v459 + 17 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v460 > 0x16)
                {
                  v582 = (v460 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v460 | 7) != 0x17)
                    v582 = v460 | 7;
                  v583 = v582 + 1;
                  v461 = (std::string *)operator new(v582 + 1);
                  v1345.__r_.__value_.__l.__size_ = v459 + 17;
                  v1345.__r_.__value_.__r.__words[2] = v583 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v461;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v461 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v459 + 17;
                }
                if (v458 >= 0)
                  v584 = (std::string *)v7;
                else
                  v584 = *(std::string **)v7;
                v585 = (char *)v461 + v459;
                if (v584 >= v461 && v585 > (char *)v584)
                  goto LABEL_3598;
                if (v459)
                  memmove(v461, v584, v459);
                if (v585 <= "Encoded.Qp.Vp8.S2" && v585 + 17 > "Encoded.Qp.Vp8.S2")
                  goto LABEL_3598;
                strcpy(v585, "Encoded.Qp.Vp8.S2");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                while (!__ldaxr(&qword_253EA5908))
                {
                  if (!__stlxr(0, &qword_253EA5908))
                    goto LABEL_1233;
                }
              }
              else
              {
                v438 = atomic_load(&qword_253EA5900);
                if (v438)
                {
LABEL_1232:
                  webrtc::metrics::HistogramAdd(v438, v437);
                  break;
                }
                v552 = v7[23];
                if (v552 >= 0)
                  v553 = v7[23];
                else
                  v553 = *((_QWORD *)v7 + 1);
                v554 = v553 + 17;
                if (v553 + 17 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v554 > 0x16)
                {
                  v606 = (v554 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v554 | 7) != 0x17)
                    v606 = v554 | 7;
                  v607 = v606 + 1;
                  v555 = (std::string *)operator new(v606 + 1);
                  v1345.__r_.__value_.__l.__size_ = v553 + 17;
                  v1345.__r_.__value_.__r.__words[2] = v607 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v555;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v555 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v553 + 17;
                }
                if (v552 >= 0)
                  v608 = (std::string *)v7;
                else
                  v608 = *(std::string **)v7;
                v609 = (char *)v555 + v553;
                if (v608 >= v555 && v609 > (char *)v608)
                  goto LABEL_3598;
                if (v553)
                  memmove(v555, v608, v553);
                if (v609 <= "Encoded.Qp.Vp8.S2" && v609 + 17 > "Encoded.Qp.Vp8.S2")
                  goto LABEL_3598;
                strcpy(v609, "Encoded.Qp.Vp8.S2");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                while (!__ldaxr(&qword_253EA5900))
                {
                  if (!__stlxr(0, &qword_253EA5900))
                    goto LABEL_1233;
                }
              }
LABEL_1553:
              __clrex();
              break;
            default:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              {
                v1336 = v1336 & 0xFFFFFFFF00000000 | 0xDDA;
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v443, v444, v445, v446, v447, v448, v449, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/send_statistics_proxy.cc");
              }
              break;
          }
        }
      }
LABEL_1233:
      v474 = *((_QWORD *)v435 + 8);
      if (v474 >= 200)
      {
        v475 = (uint64_t)(*((_QWORD *)v435 + 7) + ((unint64_t)v474 >> 1)) / v474;
        if ((_DWORD)v475 != -1)
        {
          switch(*((_DWORD *)v435 + 8))
          {
            case 0xFFFFFFFF:
              if (v18)
              {
                v476 = atomic_load(&qword_253EA5918);
                if (v476)
                  goto LABEL_1292;
                v477 = v7[23];
                if (v477 >= 0)
                  v478 = v7[23];
                else
                  v478 = *((_QWORD *)v7 + 1);
                v479 = v478 + 14;
                if (v478 + 14 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v479 > 0x16)
                {
                  v612 = (v479 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v479 | 7) != 0x17)
                    v612 = v479 | 7;
                  v613 = v612 + 1;
                  v480 = (std::string *)operator new(v612 + 1);
                  v1345.__r_.__value_.__l.__size_ = v478 + 14;
                  v1345.__r_.__value_.__r.__words[2] = v613 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v480;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v480 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v478 + 14;
                }
                if (v477 >= 0)
                  v614 = (std::string *)v7;
                else
                  v614 = *(std::string **)v7;
                v615 = (char *)v480 + v478;
                if (v614 >= v480 && v615 > (char *)v614)
                  goto LABEL_3598;
                if (v478)
                  memmove(v480, v614, v478);
                if (v615 <= "Encoded.Qp.Vp9" && v615 + 14 > "Encoded.Qp.Vp9")
                  goto LABEL_3598;
                strcpy(v615, "Encoded.Qp.Vp9");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA5918))
                    goto LABEL_1730;
                }
                while (__stlxr(0, &qword_253EA5918));
              }
              else
              {
                v476 = atomic_load(&qword_253EA5910);
                if (v476)
                  goto LABEL_1292;
                v500 = v7[23];
                if (v500 >= 0)
                  v501 = v7[23];
                else
                  v501 = *((_QWORD *)v7 + 1);
                v502 = v501 + 14;
                if (v501 + 14 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v502 > 0x16)
                {
                  v636 = (v502 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v502 | 7) != 0x17)
                    v636 = v502 | 7;
                  v637 = v636 + 1;
                  v503 = (std::string *)operator new(v636 + 1);
                  v1345.__r_.__value_.__l.__size_ = v501 + 14;
                  v1345.__r_.__value_.__r.__words[2] = v637 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v503;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v503 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v501 + 14;
                }
                if (v500 >= 0)
                  v638 = (std::string *)v7;
                else
                  v638 = *(std::string **)v7;
                v639 = (char *)v503 + v501;
                if (v638 >= v503 && v639 > (char *)v638)
                  goto LABEL_3598;
                if (v501)
                  memmove(v503, v638, v501);
                if (v639 <= "Encoded.Qp.Vp9" && v639 + 14 > "Encoded.Qp.Vp9")
                  goto LABEL_3598;
                strcpy(v639, "Encoded.Qp.Vp9");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA5910))
                    goto LABEL_1730;
                }
                while (__stlxr(0, &qword_253EA5910));
              }
              break;
            case 0:
              if (v18)
              {
                v476 = atomic_load(&qword_253EA5928);
                if (v476)
                  goto LABEL_1292;
                v488 = v7[23];
                if (v488 >= 0)
                  v489 = v7[23];
                else
                  v489 = *((_QWORD *)v7 + 1);
                v490 = v489 + 17;
                if (v489 + 17 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v490 > 0x16)
                {
                  v618 = (v490 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v490 | 7) != 0x17)
                    v618 = v490 | 7;
                  v619 = v618 + 1;
                  v491 = (std::string *)operator new(v618 + 1);
                  v1345.__r_.__value_.__l.__size_ = v489 + 17;
                  v1345.__r_.__value_.__r.__words[2] = v619 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v491;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v491 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v489 + 17;
                }
                if (v488 >= 0)
                  v620 = (std::string *)v7;
                else
                  v620 = *(std::string **)v7;
                v621 = (char *)v491 + v489;
                if (v620 >= v491 && v621 > (char *)v620)
                  goto LABEL_3598;
                if (v489)
                  memmove(v491, v620, v489);
                if (v621 <= "Encoded.Qp.Vp9.S0" && v621 + 17 > "Encoded.Qp.Vp9.S0")
                  goto LABEL_3598;
                strcpy(v621, "Encoded.Qp.Vp9.S0");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA5928))
                    goto LABEL_1730;
                }
                while (__stlxr(0, &qword_253EA5928));
              }
              else
              {
                v476 = atomic_load(&qword_253EA5920);
                if (v476)
                  goto LABEL_1292;
                v504 = v7[23];
                if (v504 >= 0)
                  v505 = v7[23];
                else
                  v505 = *((_QWORD *)v7 + 1);
                v506 = v505 + 17;
                if (v505 + 17 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v506 > 0x16)
                {
                  v642 = (v506 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v506 | 7) != 0x17)
                    v642 = v506 | 7;
                  v643 = v642 + 1;
                  v507 = (std::string *)operator new(v642 + 1);
                  v1345.__r_.__value_.__l.__size_ = v505 + 17;
                  v1345.__r_.__value_.__r.__words[2] = v643 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v507;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v507 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v505 + 17;
                }
                if (v504 >= 0)
                  v644 = (std::string *)v7;
                else
                  v644 = *(std::string **)v7;
                v645 = (char *)v507 + v505;
                if (v644 >= v507 && v645 > (char *)v644)
                  goto LABEL_3598;
                if (v505)
                  memmove(v507, v644, v505);
                if (v645 <= "Encoded.Qp.Vp9.S0" && v645 + 17 > "Encoded.Qp.Vp9.S0")
                  goto LABEL_3598;
                strcpy(v645, "Encoded.Qp.Vp9.S0");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA5920))
                    goto LABEL_1730;
                }
                while (__stlxr(0, &qword_253EA5920));
              }
              break;
            case 1:
              if (v18)
              {
                v476 = atomic_load(&qword_253EA5938);
                if (v476)
                  goto LABEL_1292;
                v492 = v7[23];
                if (v492 >= 0)
                  v493 = v7[23];
                else
                  v493 = *((_QWORD *)v7 + 1);
                v494 = v493 + 17;
                if (v493 + 17 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v494 > 0x16)
                {
                  v624 = (v494 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v494 | 7) != 0x17)
                    v624 = v494 | 7;
                  v625 = v624 + 1;
                  v495 = (std::string *)operator new(v624 + 1);
                  v1345.__r_.__value_.__l.__size_ = v493 + 17;
                  v1345.__r_.__value_.__r.__words[2] = v625 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v495;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v495 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v493 + 17;
                }
                if (v492 >= 0)
                  v626 = (std::string *)v7;
                else
                  v626 = *(std::string **)v7;
                v627 = (char *)v495 + v493;
                if (v626 >= v495 && v627 > (char *)v626)
                  goto LABEL_3598;
                if (v493)
                  memmove(v495, v626, v493);
                if (v627 <= "Encoded.Qp.Vp9.S1" && v627 + 17 > "Encoded.Qp.Vp9.S1")
                  goto LABEL_3598;
                strcpy(v627, "Encoded.Qp.Vp9.S1");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA5938))
                    goto LABEL_1730;
                }
                while (__stlxr(0, &qword_253EA5938));
              }
              else
              {
                v476 = atomic_load(&qword_253EA5930);
                if (v476)
                  goto LABEL_1292;
                v508 = v7[23];
                if (v508 >= 0)
                  v509 = v7[23];
                else
                  v509 = *((_QWORD *)v7 + 1);
                v510 = v509 + 17;
                if (v509 + 17 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v510 > 0x16)
                {
                  v648 = (v510 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v510 | 7) != 0x17)
                    v648 = v510 | 7;
                  v649 = v648 + 1;
                  v511 = (std::string *)operator new(v648 + 1);
                  v1345.__r_.__value_.__l.__size_ = v509 + 17;
                  v1345.__r_.__value_.__r.__words[2] = v649 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v511;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v511 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v509 + 17;
                }
                if (v508 >= 0)
                  v650 = (std::string *)v7;
                else
                  v650 = *(std::string **)v7;
                v651 = (char *)v511 + v509;
                if (v650 >= v511 && v651 > (char *)v650)
                  goto LABEL_3598;
                if (v509)
                  memmove(v511, v650, v509);
                if (v651 <= "Encoded.Qp.Vp9.S1" && v651 + 17 > "Encoded.Qp.Vp9.S1")
                  goto LABEL_3598;
                strcpy(v651, "Encoded.Qp.Vp9.S1");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA5930))
                    goto LABEL_1730;
                }
                while (__stlxr(0, &qword_253EA5930));
              }
              break;
            case 2:
              if (v18)
              {
                v476 = atomic_load(&qword_253EA5948);
                if (v476)
                  goto LABEL_1292;
                v496 = v7[23];
                if (v496 >= 0)
                  v497 = v7[23];
                else
                  v497 = *((_QWORD *)v7 + 1);
                v498 = v497 + 17;
                if (v497 + 17 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v498 > 0x16)
                {
                  v630 = (v498 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v498 | 7) != 0x17)
                    v630 = v498 | 7;
                  v631 = v630 + 1;
                  v499 = (std::string *)operator new(v630 + 1);
                  v1345.__r_.__value_.__l.__size_ = v497 + 17;
                  v1345.__r_.__value_.__r.__words[2] = v631 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v499;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v499 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v497 + 17;
                }
                if (v496 >= 0)
                  v632 = (std::string *)v7;
                else
                  v632 = *(std::string **)v7;
                v633 = (char *)v499 + v497;
                if (v632 >= v499 && v633 > (char *)v632)
                  goto LABEL_3598;
                if (v497)
                  memmove(v499, v632, v497);
                if (v633 <= "Encoded.Qp.Vp9.S2" && v633 + 17 > "Encoded.Qp.Vp9.S2")
                  goto LABEL_3598;
                strcpy(v633, "Encoded.Qp.Vp9.S2");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                while (!__ldaxr(&qword_253EA5948))
                {
                  if (!__stlxr(0, &qword_253EA5948))
                    goto LABEL_1293;
                }
              }
              else
              {
                v476 = atomic_load(&qword_253EA5940);
                if (v476)
                {
LABEL_1292:
                  webrtc::metrics::HistogramAdd(v476, v475);
                  break;
                }
                v556 = v7[23];
                if (v556 >= 0)
                  v557 = v7[23];
                else
                  v557 = *((_QWORD *)v7 + 1);
                v558 = v557 + 17;
                if (v557 + 17 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v558 > 0x16)
                {
                  v654 = (v558 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v558 | 7) != 0x17)
                    v654 = v558 | 7;
                  v655 = v654 + 1;
                  v559 = (std::string *)operator new(v654 + 1);
                  v1345.__r_.__value_.__l.__size_ = v557 + 17;
                  v1345.__r_.__value_.__r.__words[2] = v655 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v559;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v559 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v557 + 17;
                }
                if (v556 >= 0)
                  v656 = (std::string *)v7;
                else
                  v656 = *(std::string **)v7;
                v657 = (char *)v559 + v557;
                if (v656 >= v559 && v657 > (char *)v656)
                  goto LABEL_3598;
                if (v557)
                  memmove(v559, v656, v557);
                if (v657 <= "Encoded.Qp.Vp9.S2" && v657 + 17 > "Encoded.Qp.Vp9.S2")
                  goto LABEL_3598;
                strcpy(v657, "Encoded.Qp.Vp9.S2");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                while (!__ldaxr(&qword_253EA5940))
                {
                  if (!__stlxr(0, &qword_253EA5940))
                    goto LABEL_1293;
                }
              }
LABEL_1730:
              __clrex();
              break;
            default:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              {
                v1335 = v1335 & 0xFFFFFFFF00000000 | 0xE7A;
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v481, v482, v483, v484, v485, v486, v487, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/send_statistics_proxy.cc");
              }
              break;
          }
        }
      }
LABEL_1293:
      v512 = *((_QWORD *)v435 + 10);
      if (v512 >= 200)
      {
        v513 = (uint64_t)(*((_QWORD *)v435 + 9) + ((unint64_t)v512 >> 1)) / v512;
        if ((_DWORD)v513 != -1)
        {
          switch(*((_DWORD *)v435 + 8))
          {
            case 0xFFFFFFFF:
              if (v18)
              {
                v514 = atomic_load(&qword_253EA5958);
                if (v514)
                  goto LABEL_1352;
                v515 = v7[23];
                if (v515 >= 0)
                  v516 = v7[23];
                else
                  v516 = *((_QWORD *)v7 + 1);
                v517 = v516 + 15;
                if (v516 + 15 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v517 > 0x16)
                {
                  v660 = (v517 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v517 | 7) != 0x17)
                    v660 = v517 | 7;
                  v661 = v660 + 1;
                  v518 = (std::string *)operator new(v660 + 1);
                  v1345.__r_.__value_.__l.__size_ = v516 + 15;
                  v1345.__r_.__value_.__r.__words[2] = v661 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v518;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v518 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v516 + 15;
                }
                if (v515 >= 0)
                  v662 = (std::string *)v7;
                else
                  v662 = *(std::string **)v7;
                v663 = (char *)v518 + v516;
                if (v662 >= v518 && v663 > (char *)v662)
                  goto LABEL_3598;
                if (v516)
                  memmove(v518, v662, v516);
                if (v663 <= "Encoded.Qp.H264" && v663 + 15 > "Encoded.Qp.H264")
                  goto LABEL_3598;
                strcpy(v663, "Encoded.Qp.H264");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA5958))
                    goto LABEL_1891;
                }
                while (__stlxr(0, &qword_253EA5958));
              }
              else
              {
                v514 = atomic_load(&qword_253EA5950);
                if (v514)
                  goto LABEL_1352;
                v538 = v7[23];
                if (v538 >= 0)
                  v539 = v7[23];
                else
                  v539 = *((_QWORD *)v7 + 1);
                v540 = v539 + 15;
                if (v539 + 15 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v540 > 0x16)
                {
                  v680 = (v540 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v540 | 7) != 0x17)
                    v680 = v540 | 7;
                  v681 = v680 + 1;
                  v541 = (std::string *)operator new(v680 + 1);
                  v1345.__r_.__value_.__l.__size_ = v539 + 15;
                  v1345.__r_.__value_.__r.__words[2] = v681 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v541;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v541 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v539 + 15;
                }
                if (v538 >= 0)
                  v682 = (std::string *)v7;
                else
                  v682 = *(std::string **)v7;
                v683 = (char *)v541 + v539;
                if (v682 >= v541 && v683 > (char *)v682)
                  goto LABEL_3598;
                if (v539)
                  memmove(v541, v682, v539);
                if (v683 <= "Encoded.Qp.H264" && v683 + 15 > "Encoded.Qp.H264")
                  goto LABEL_3598;
                strcpy(v683, "Encoded.Qp.H264");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA5950))
                    goto LABEL_1891;
                }
                while (__stlxr(0, &qword_253EA5950));
              }
              break;
            case 0:
              if (v18)
              {
                v514 = atomic_load(&qword_253EA5968);
                if (v514)
                  goto LABEL_1352;
                v526 = v7[23];
                if (v526 >= 0)
                  v527 = v7[23];
                else
                  v527 = *((_QWORD *)v7 + 1);
                v528 = v527 + 18;
                if (v527 + 18 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v528 > 0x16)
                {
                  v665 = (v528 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v528 | 7) != 0x17)
                    v665 = v528 | 7;
                  v666 = v665 + 1;
                  v529 = (std::string *)operator new(v665 + 1);
                  v1345.__r_.__value_.__l.__size_ = v527 + 18;
                  v1345.__r_.__value_.__r.__words[2] = v666 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v529;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v529 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v527 + 18;
                }
                if (v526 >= 0)
                  v667 = (std::string *)v7;
                else
                  v667 = *(std::string **)v7;
                v668 = (char *)v529 + v527;
                if (v667 >= v529 && v668 > (char *)v667)
                  goto LABEL_3598;
                if (v527)
                  memmove(v529, v667, v527);
                if (v668 <= "Encoded.Qp.H264.S0" && v668 + 18 > "Encoded.Qp.H264.S0")
                  goto LABEL_3598;
                strcpy(v668, "Encoded.Qp.H264.S0");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA5968))
                    goto LABEL_1891;
                }
                while (__stlxr(0, &qword_253EA5968));
              }
              else
              {
                v514 = atomic_load(&qword_253EA5960);
                if (v514)
                  goto LABEL_1352;
                v542 = v7[23];
                if (v542 >= 0)
                  v543 = v7[23];
                else
                  v543 = *((_QWORD *)v7 + 1);
                v544 = v543 + 18;
                if (v543 + 18 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v544 > 0x16)
                {
                  v685 = (v544 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v544 | 7) != 0x17)
                    v685 = v544 | 7;
                  v686 = v685 + 1;
                  v545 = (std::string *)operator new(v685 + 1);
                  v1345.__r_.__value_.__l.__size_ = v543 + 18;
                  v1345.__r_.__value_.__r.__words[2] = v686 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v545;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v545 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v543 + 18;
                }
                if (v542 >= 0)
                  v687 = (std::string *)v7;
                else
                  v687 = *(std::string **)v7;
                v688 = (char *)v545 + v543;
                if (v687 >= v545 && v688 > (char *)v687)
                  goto LABEL_3598;
                if (v543)
                  memmove(v545, v687, v543);
                if (v688 <= "Encoded.Qp.H264.S0" && v688 + 18 > "Encoded.Qp.H264.S0")
                  goto LABEL_3598;
                strcpy(v688, "Encoded.Qp.H264.S0");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA5960))
                    goto LABEL_1891;
                }
                while (__stlxr(0, &qword_253EA5960));
              }
              break;
            case 1:
              if (v18)
              {
                v514 = atomic_load(&qword_253EA5978);
                if (v514)
                  goto LABEL_1352;
                v530 = v7[23];
                if (v530 >= 0)
                  v531 = v7[23];
                else
                  v531 = *((_QWORD *)v7 + 1);
                v532 = v531 + 18;
                if (v531 + 18 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v532 > 0x16)
                {
                  v670 = (v532 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v532 | 7) != 0x17)
                    v670 = v532 | 7;
                  v671 = v670 + 1;
                  v533 = (std::string *)operator new(v670 + 1);
                  v1345.__r_.__value_.__l.__size_ = v531 + 18;
                  v1345.__r_.__value_.__r.__words[2] = v671 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v533;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v533 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v531 + 18;
                }
                if (v530 >= 0)
                  v672 = (std::string *)v7;
                else
                  v672 = *(std::string **)v7;
                v673 = (char *)v533 + v531;
                if (v672 >= v533 && v673 > (char *)v672)
                  goto LABEL_3598;
                if (v531)
                  memmove(v533, v672, v531);
                if (v673 <= "Encoded.Qp.H264.S1" && v673 + 18 > "Encoded.Qp.H264.S1")
                  goto LABEL_3598;
                strcpy(v673, "Encoded.Qp.H264.S1");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA5978))
                    goto LABEL_1891;
                }
                while (__stlxr(0, &qword_253EA5978));
              }
              else
              {
                v514 = atomic_load(&qword_253EA5970);
                if (v514)
                  goto LABEL_1352;
                v546 = v7[23];
                if (v546 >= 0)
                  v547 = v7[23];
                else
                  v547 = *((_QWORD *)v7 + 1);
                v548 = v547 + 18;
                if (v547 + 18 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v548 > 0x16)
                {
                  v690 = (v548 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v548 | 7) != 0x17)
                    v690 = v548 | 7;
                  v691 = v690 + 1;
                  v549 = (std::string *)operator new(v690 + 1);
                  v1345.__r_.__value_.__l.__size_ = v547 + 18;
                  v1345.__r_.__value_.__r.__words[2] = v691 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v549;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v549 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v547 + 18;
                }
                if (v546 >= 0)
                  v692 = (std::string *)v7;
                else
                  v692 = *(std::string **)v7;
                v693 = (char *)v549 + v547;
                if (v692 >= v549 && v693 > (char *)v692)
                  goto LABEL_3598;
                if (v547)
                  memmove(v549, v692, v547);
                if (v693 <= "Encoded.Qp.H264.S1" && v693 + 18 > "Encoded.Qp.H264.S1")
                  goto LABEL_3598;
                strcpy(v693, "Encoded.Qp.H264.S1");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                do
                {
                  if (__ldaxr(&qword_253EA5970))
                    goto LABEL_1891;
                }
                while (__stlxr(0, &qword_253EA5970));
              }
              break;
            case 2:
              if (v18)
              {
                v514 = atomic_load(&qword_253EA5988);
                if (v514)
                  goto LABEL_1352;
                v534 = v7[23];
                if (v534 >= 0)
                  v535 = v7[23];
                else
                  v535 = *((_QWORD *)v7 + 1);
                v536 = v535 + 18;
                if (v535 + 18 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v536 > 0x16)
                {
                  v675 = (v536 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v536 | 7) != 0x17)
                    v675 = v536 | 7;
                  v676 = v675 + 1;
                  v537 = (std::string *)operator new(v675 + 1);
                  v1345.__r_.__value_.__l.__size_ = v535 + 18;
                  v1345.__r_.__value_.__r.__words[2] = v676 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v537;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v537 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v535 + 18;
                }
                if (v534 >= 0)
                  v677 = (std::string *)v7;
                else
                  v677 = *(std::string **)v7;
                v678 = (char *)v537 + v535;
                if (v677 >= v537 && v678 > (char *)v677)
                  goto LABEL_3598;
                if (v535)
                  memmove(v537, v677, v535);
                if (v678 <= "Encoded.Qp.H264.S2" && v678 + 18 > "Encoded.Qp.H264.S2")
                  goto LABEL_3598;
                strcpy(v678, "Encoded.Qp.H264.S2");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                while (!__ldaxr(&qword_253EA5988))
                {
                  if (!__stlxr(0, &qword_253EA5988))
                    goto LABEL_1353;
                }
              }
              else
              {
                v514 = atomic_load(&qword_253EA5980);
                if (v514)
                {
LABEL_1352:
                  webrtc::metrics::HistogramAdd(v514, v513);
                  break;
                }
                v560 = v7[23];
                if (v560 >= 0)
                  v561 = v7[23];
                else
                  v561 = *((_QWORD *)v7 + 1);
                v562 = v561 + 18;
                if (v561 + 18 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_3599;
                if (v562 > 0x16)
                {
                  v695 = (v562 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v562 | 7) != 0x17)
                    v695 = v562 | 7;
                  v696 = v695 + 1;
                  v563 = (std::string *)operator new(v695 + 1);
                  v1345.__r_.__value_.__l.__size_ = v561 + 18;
                  v1345.__r_.__value_.__r.__words[2] = v696 | 0x8000000000000000;
                  v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v563;
                }
                else
                {
                  memset(&v1345, 0, sizeof(v1345));
                  v563 = &v1345;
                  *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v561 + 18;
                }
                if (v560 >= 0)
                  v697 = (std::string *)v7;
                else
                  v697 = *(std::string **)v7;
                v698 = (char *)v563 + v561;
                if (v697 >= v563 && v698 > (char *)v697)
                  goto LABEL_3598;
                if (v561)
                  memmove(v563, v697, v561);
                if (v698 <= "Encoded.Qp.H264.S2" && v698 + 18 > "Encoded.Qp.H264.S2")
                  goto LABEL_3598;
                strcpy(v698, "Encoded.Qp.H264.S2");
                if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
                  {
                    goto LABEL_3598;
                  }
                  operator delete(v1345.__r_.__value_.__l.__data_);
                }
                while (!__ldaxr(&qword_253EA5980))
                {
                  if (!__stlxr(0, &qword_253EA5980))
                    goto LABEL_1353;
                }
              }
LABEL_1891:
              __clrex();
              break;
            default:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              {
                v1334 = v1334 & 0xFFFFFFFF00000000 | 0xF1A;
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v519, v520, v521, v522, v523, v524, v525, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/send_statistics_proxy.cc");
              }
              break;
          }
        }
      }
LABEL_1353:
      v550 = (char *)*((_QWORD *)v435 + 1);
      if (v550)
      {
        do
        {
          v551 = v550;
          v550 = *(char **)v550;
        }
        while (v550);
      }
      else
      {
        do
        {
          v551 = (char *)*((_QWORD *)v435 + 2);
          v10 = *(_QWORD *)v551 == (_QWORD)v435;
          v435 = v551;
        }
        while (!v10);
      }
      v435 = v551;
    }
    while (v551 != v7 + 1440);
  }
  if (*((_QWORD *)v7 + 127) == -1)
    goto LABEL_2037;
  v700 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v7 + 3) + 16))(*((_QWORD *)v7 + 3));
  v701 = v700 / 0x3E8uLL;
  if (v700 % 0x3E8uLL > 0x1F3)
    ++v701;
  if (-v700 % 0x3E8uLL <= 0x1F4)
    v702 = 0;
  else
    v702 = -1;
  if (v700 < 0)
    v701 = v702 - -v700 / 0x3E8uLL;
  v703 = *((_QWORD *)v7 + 130);
  if (v703 == -1)
  {
    v704 = *((_QWORD *)v7 + 131);
  }
  else
  {
    v704 = *((_QWORD *)v7 + 131) + v701 - v703;
    *((_QWORD *)v7 + 131) = v704;
    *((_QWORD *)v7 + 130) = -1;
  }
  if (v704 >= 10000)
  {
    v705 = *(_DWORD *)(v1338 + 152) - *((_DWORD *)v7 + 334);
    v706 = *((_DWORD *)v7 + 357) + *((_DWORD *)v7 + 356);
    if (v706 > v705)
      v706 = 0;
    if (v18)
    {
      v707 = atomic_load(&qword_253EA5998);
      if (!v707)
      {
        v708 = v7[23];
        if (v708 >= 0)
          v709 = v7[23];
        else
          v709 = *((_QWORD *)v7 + 1);
        v710 = v709 + 29;
        if (v709 + 29 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_3599;
        if (v710 > 0x16)
        {
          v716 = (v710 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v710 | 7) != 0x17)
            v716 = v710 | 7;
          v717 = v716 + 1;
          v711 = (std::string *)operator new(v716 + 1);
          v1345.__r_.__value_.__l.__size_ = v709 + 29;
          v1345.__r_.__value_.__r.__words[2] = v717 | 0x8000000000000000;
          v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v711;
        }
        else
        {
          memset(&v1345, 0, sizeof(v1345));
          v711 = &v1345;
          *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v709 + 29;
        }
        if (v708 >= 0)
          v718 = (std::string *)v7;
        else
          v718 = *(std::string **)v7;
        v719 = (char *)v711 + v709;
        if (v718 >= v711 && v719 > (char *)v718)
          goto LABEL_3598;
        if (v709)
          memmove(v711, v718, v709);
        if (v719 <= "AdaptChangesPerMinute.Quality" && v719 + 29 > "AdaptChangesPerMinute.Quality")
          goto LABEL_3598;
        strcpy(v719, "AdaptChangesPerMinute.Quality");
        if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
        {
          if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
            || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
          {
            goto LABEL_3598;
          }
          operator delete(v1345.__r_.__value_.__l.__data_);
        }
        while (!__ldaxr(&qword_253EA5998))
        {
          if (!__stlxr(0, &qword_253EA5998))
            goto LABEL_1963;
        }
LABEL_1962:
        __clrex();
        goto LABEL_1963;
      }
    }
    else
    {
      v707 = atomic_load(&qword_253EA5990);
      if (!v707)
      {
        v712 = v7[23];
        if (v712 >= 0)
          v713 = v7[23];
        else
          v713 = *((_QWORD *)v7 + 1);
        v714 = v713 + 29;
        if (v713 + 29 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_3599;
        if (v714 > 0x16)
        {
          v721 = (v714 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v714 | 7) != 0x17)
            v721 = v714 | 7;
          v722 = v721 + 1;
          v715 = (std::string *)operator new(v721 + 1);
          v1345.__r_.__value_.__l.__size_ = v713 + 29;
          v1345.__r_.__value_.__r.__words[2] = v722 | 0x8000000000000000;
          v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v715;
        }
        else
        {
          memset(&v1345, 0, sizeof(v1345));
          v715 = &v1345;
          *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v713 + 29;
        }
        if (v712 >= 0)
          v723 = (std::string *)v7;
        else
          v723 = *(std::string **)v7;
        v724 = (char *)v715 + v713;
        if (v723 >= v715 && v724 > (char *)v723)
          goto LABEL_3598;
        if (v713)
          memmove(v715, v723, v713);
        if (v724 <= "AdaptChangesPerMinute.Quality" && v724 + 29 > "AdaptChangesPerMinute.Quality")
          goto LABEL_3598;
        strcpy(v724, "AdaptChangesPerMinute.Quality");
        if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
        {
          if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
            || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
          {
            goto LABEL_3598;
          }
          operator delete(v1345.__r_.__value_.__l.__data_);
        }
        while (!__ldaxr(&qword_253EA5990))
        {
          if (!__stlxr(0, &qword_253EA5990))
            goto LABEL_1963;
        }
        goto LABEL_1962;
      }
    }
    webrtc::metrics::HistogramAdd(v707, 60 * (v705 - v706) / (v704 / 1000));
  }
LABEL_1963:
  v726 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v7 + 3) + 16))(*((_QWORD *)v7 + 3));
  v727 = v726 / 0x3E8uLL;
  if (v726 % 0x3E8uLL > 0x1F3)
    ++v727;
  if (-v726 % 0x3E8uLL <= 0x1F4)
    v728 = 0;
  else
    v728 = -1;
  v729 = v728 - -v726 / 0x3E8uLL;
  if (v726 < 0)
    v727 = v729;
  v730 = *((_QWORD *)v7 + 128);
  if (v730 != -1)
  {
    v731 = *((_QWORD *)v7 + 129) + v727 - v730;
    *((_QWORD *)v7 + 129) = v731;
    *((_QWORD *)v7 + 128) = -1;
    if (v731 < 10000)
      goto LABEL_2037;
LABEL_1974:
    if (v18)
    {
      v732 = atomic_load(&qword_253EA59A8);
      if (!v732)
      {
        v733 = v7[23];
        if (v733 >= 0)
          v734 = v7[23];
        else
          v734 = *((_QWORD *)v7 + 1);
        v735 = v734 + 25;
        if (v734 + 25 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_3599;
        if (v735 > 0x16)
        {
          v745 = (v735 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v735 | 7) != 0x17)
            v745 = v735 | 7;
          v746 = v745 + 1;
          v736 = (std::string *)operator new(v745 + 1);
          v1345.__r_.__value_.__l.__size_ = v734 + 25;
          v1345.__r_.__value_.__r.__words[2] = v746 | 0x8000000000000000;
          v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v736;
          if (v733 >= 0)
            v737 = (std::string *)v7;
          else
            v737 = *(std::string **)v7;
          v738 = (char *)v736 + v734;
          if (v737 < v736)
            goto LABEL_2005;
        }
        else
        {
          memset(&v1345, 0, sizeof(v1345));
          v736 = &v1345;
          *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v734 + 25;
          if (v733 >= 0)
            v737 = (std::string *)v7;
          else
            v737 = *(std::string **)v7;
          v738 = (char *)&v1345 + v734;
          if (v737 < &v1345)
            goto LABEL_2005;
        }
        if (v738 > (char *)v737)
          goto LABEL_3598;
LABEL_2005:
        if (v734)
          memmove(v736, v737, v734);
        if (v738 <= "AdaptChangesPerMinute.Cpu" && v738 + 25 > "AdaptChangesPerMinute.Cpu")
          goto LABEL_3598;
        strcpy(v738, "AdaptChangesPerMinute.Cpu");
        if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
        {
          if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
            || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
          {
            goto LABEL_3598;
          }
          operator delete(v1345.__r_.__value_.__l.__data_);
        }
        while (!__ldaxr(&qword_253EA59A8))
        {
          if (!__stlxr(0, &qword_253EA59A8))
            goto LABEL_2037;
        }
LABEL_2036:
        __clrex();
        goto LABEL_2037;
      }
      goto LABEL_1987;
    }
    v732 = atomic_load(&qword_253EA59A0);
    if (v732)
    {
LABEL_1987:
      webrtc::metrics::HistogramAdd(v732, 60 * (*(int *)(v1338 + 148) - (uint64_t)*((int *)v7 + 333)) / (v731 / 1000));
      goto LABEL_2037;
    }
    v739 = v7[23];
    if (v739 >= 0)
      v740 = v7[23];
    else
      v740 = *((_QWORD *)v7 + 1);
    v741 = v740 + 25;
    if (v740 + 25 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v741 > 0x16)
    {
      v748 = (v741 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v741 | 7) != 0x17)
        v748 = v741 | 7;
      v749 = v748 + 1;
      v742 = (std::string *)operator new(v748 + 1);
      v1345.__r_.__value_.__l.__size_ = v740 + 25;
      v1345.__r_.__value_.__r.__words[2] = v749 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v742;
      if (v739 >= 0)
        v743 = (std::string *)v7;
      else
        v743 = *(std::string **)v7;
      v744 = (char *)v742 + v740;
      if (v743 < v742)
        goto LABEL_2024;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v742 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v740 + 25;
      if (v739 >= 0)
        v743 = (std::string *)v7;
      else
        v743 = *(std::string **)v7;
      v744 = (char *)&v1345 + v740;
      if (v743 < &v1345)
        goto LABEL_2024;
    }
    if (v744 > (char *)v743)
      goto LABEL_3598;
LABEL_2024:
    if (v740)
      memmove(v742, v743, v740);
    if (v744 <= "AdaptChangesPerMinute.Cpu" && v744 + 25 > "AdaptChangesPerMinute.Cpu")
      goto LABEL_3598;
    strcpy(v744, "AdaptChangesPerMinute.Cpu");
    if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(v1345.__r_.__value_.__l.__data_);
    }
    while (!__ldaxr(&qword_253EA59A0))
    {
      if (!__stlxr(0, &qword_253EA59A0))
        goto LABEL_2037;
    }
    goto LABEL_2036;
  }
  v731 = *((_QWORD *)v7 + 129);
  if (v731 >= 10000)
    goto LABEL_1974;
LABEL_2037:
  if (*((_QWORD *)v7 + 126) == -1)
    goto LABEL_2360;
  v751 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v7 + 3) + 16))(*((_QWORD *)v7 + 3));
  v752 = v751 / 0x3E8uLL;
  if (v751 % 0x3E8uLL > 0x1F3)
    ++v752;
  if (-v751 % 0x3E8uLL <= 0x1F4)
    v753 = 0;
  else
    v753 = -1;
  v754 = v753 - -v751 / 0x3E8uLL;
  if (v751 < 0)
    v752 = v754;
  v755 = v752 - *((_QWORD *)v7 + 126);
  if (v755 < 10000)
    goto LABEL_2360;
  v756 = *((_DWORD *)v7 + 288);
  if (!v756)
    goto LABEL_2110;
  v757 = 100 * ((255 * *((_DWORD *)v7 + 289) + (v756 >> 1)) / v756);
  if ((v757 + 509) < 0xFF)
    goto LABEL_2110;
  if (!v18)
  {
    v764 = v7[23];
    if (v764 >= 0)
      v765 = v7[23];
    else
      v765 = *((_QWORD *)v7 + 1);
    v766 = v765 + 24;
    if (v765 + 24 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v766 > 0x16)
    {
      v771 = (v766 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v766 | 7) != 0x17)
        v771 = v766 | 7;
      v772 = v771 + 1;
      v767 = (std::string *)operator new(v771 + 1);
      v1345.__r_.__value_.__l.__size_ = v765 + 24;
      v1345.__r_.__value_.__r.__words[2] = v772 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v767;
      if (v764 >= 0)
        v768 = (std::string *)v7;
      else
        v768 = *(std::string **)v7;
      v763 = (char *)v767 + v765;
      if (v768 < v767)
        goto LABEL_2087;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v767 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v765 + 24;
      if (v764 >= 0)
        v768 = (std::string *)v7;
      else
        v768 = *(std::string **)v7;
      v763 = (char *)&v1345 + v765;
      if (v768 < &v1345)
        goto LABEL_2087;
    }
    if (v763 > (char *)v768)
      goto LABEL_3598;
LABEL_2087:
    if (v765)
      memmove(v767, v768, v765);
    if (v763 > "SentPacketsLostInPercent")
      goto LABEL_2091;
LABEL_2090:
    if (v763 + 24 > "SentPacketsLostInPercent")
      goto LABEL_3598;
    goto LABEL_2091;
  }
  v758 = v7[23];
  if (v758 >= 0)
    v759 = v7[23];
  else
    v759 = *((_QWORD *)v7 + 1);
  v760 = v759 + 24;
  if (v759 + 24 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v760 > 0x16)
  {
    v769 = (v760 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v760 | 7) != 0x17)
      v769 = v760 | 7;
    v770 = v769 + 1;
    v761 = (std::string *)operator new(v769 + 1);
    v1345.__r_.__value_.__l.__size_ = v759 + 24;
    v1345.__r_.__value_.__r.__words[2] = v770 | 0x8000000000000000;
    v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v761;
    if (v758 >= 0)
      v762 = (std::string *)v7;
    else
      v762 = *(std::string **)v7;
    v763 = (char *)v761 + v759;
    if (v762 < v761)
      goto LABEL_2076;
  }
  else
  {
    memset(&v1345, 0, sizeof(v1345));
    v761 = &v1345;
    *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v759 + 24;
    if (v758 >= 0)
      v762 = (std::string *)v7;
    else
      v762 = *(std::string **)v7;
    v763 = (char *)&v1345 + v759;
    if (v762 < &v1345)
      goto LABEL_2076;
  }
  if (v763 > (char *)v762)
    goto LABEL_3598;
LABEL_2076:
  if (v759)
    memmove(v761, v762, v759);
  if (v763 <= "SentPacketsLostInPercent")
    goto LABEL_2090;
LABEL_2091:
  strcpy(v763, "SentPacketsLostInPercent");
  if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
  {
    if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(v1345.__r_.__value_.__l.__data_);
  }
  if (v7[23] < 0)
  {
    v773 = *((_QWORD *)v7 + 1);
    if ((v773 & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v774 = *(const void **)v7;
    if (v773)
    {
      if (!v774)
        goto LABEL_3598;
    }
  }
  else
  {
    v773 = v7[23];
    v774 = v7;
  }
  if (v773 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v775 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v775 = v773;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v774, v775);
  *((_QWORD *)&v1350 + 1) += v775;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x19uLL)
    v776 = 25;
  else
    v776 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "SentPacketsLostInPercent ", v776);
  *((_QWORD *)&v1350 + 1) += v776;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%d", v757 / 255);
  v777 = v1350;
  v778 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v779 = *((_QWORD *)&v1350 + 1);
  if (v777 != v778)
    v779 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v779;
  v1349[v779] = 0;
LABEL_2110:
  v780 = *(unsigned int **)v1339;
  v781 = *(unsigned int **)(v1339 + 8);
  v782 = 0uLL;
  if (*(unsigned int **)v1339 != v781 && *(_QWORD *)(v1338 + 168))
  {
    v783 = v7 + 1352;
    do
    {
      v784 = *v780;
      v785 = v1338 + 168;
      v786 = *(_QWORD *)(v1338 + 168);
      do
      {
        v787 = *(_DWORD *)(v786 + 32);
        v788 = v787 >= v784;
        if (v787 >= v784)
          v789 = (uint64_t *)v786;
        else
          v789 = (uint64_t *)(v786 + 8);
        if (v788)
          v785 = v786;
        v786 = *v789;
      }
      while (*v789);
      if (v785 != v1338 + 168 && v784 >= *(_DWORD *)(v785 + 32))
      {
        v790 = *(int32x4_t *)(v785 + 216);
        v791 = *(char **)v783;
        if (*(_QWORD *)v783)
        {
          v792 = v7 + 1352;
          do
          {
            v793 = *((_DWORD *)v791 + 8);
            v794 = v793 >= v784;
            if (v793 >= v784)
              v795 = (char **)v791;
            else
              v795 = (char **)(v791 + 8);
            if (v794)
              v792 = v791;
            v791 = *v795;
          }
          while (*v795);
          if (v792 != v783 && v784 >= *((_DWORD *)v792 + 8))
            v790 = vsubq_s32(v790, *(int32x4_t *)(v792 + 216));
        }
        v782 = vaddq_s32(v790, v782);
      }
      ++v780;
    }
    while (v780 != v781);
  }
  v796 = v755 / 1000;
  v1337 = v782;
  if (!v18)
  {
    v803 = atomic_load(&qword_253EA59B0);
    if (v803)
    {
      webrtc::metrics::HistogramAdd(v803, (60 * v782.i32[0]) / v796);
      v804 = atomic_load(&qword_253EA59C0);
      if (v804)
        goto LABEL_2218;
      goto LABEL_2148;
    }
    v813 = v7[23];
    if (v813 >= 0)
      v814 = v7[23];
    else
      v814 = *((_QWORD *)v7 + 1);
    v815 = v814 + 28;
    if (v814 + 28 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v815 > 0x16)
    {
      v825 = (v815 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v815 | 7) != 0x17)
        v825 = v815 | 7;
      v826 = v825 + 1;
      v816 = (std::string *)operator new(v825 + 1);
      v1345.__r_.__value_.__l.__size_ = v814 + 28;
      v1345.__r_.__value_.__r.__words[2] = v826 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v816;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v816 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v814 + 28;
    }
    if (v813 >= 0)
      v827 = (std::string *)v7;
    else
      v827 = *(std::string **)v7;
    v828 = (char *)v816 + v814;
    if (v827 >= v816 && v828 > (char *)v827)
      goto LABEL_3598;
    if (v814)
      memmove(v816, v827, v814);
    if (v828 <= "NackPacketsReceivedPerMinute" && v828 + 28 > "NackPacketsReceivedPerMinute")
      goto LABEL_3598;
    strcpy(v828, "NackPacketsReceivedPerMinute");
    if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(v1345.__r_.__value_.__l.__data_);
    }
    while (!__ldaxr(&qword_253EA59B0))
    {
      if (!__stlxr(0, &qword_253EA59B0))
      {
        v804 = atomic_load(&qword_253EA59C0);
        if (v804)
          goto LABEL_2218;
        goto LABEL_2148;
      }
    }
    __clrex();
    v804 = atomic_load(&qword_253EA59C0);
    if (v804)
    {
LABEL_2218:
      webrtc::metrics::HistogramAdd(v804, (60 * v1337.i32[1]) / v796);
      v824 = atomic_load(&qword_253EA59D0);
      if (v824)
        goto LABEL_2278;
      goto LABEL_2281;
    }
LABEL_2148:
    v805 = v7[23];
    if (v805 >= 0)
      v806 = v7[23];
    else
      v806 = *((_QWORD *)v7 + 1);
    v807 = v806 + 27;
    if (v806 + 27 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v807 > 0x16)
    {
      v843 = (v807 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v807 | 7) != 0x17)
        v843 = v807 | 7;
      v844 = v843 + 1;
      v808 = (std::string *)operator new(v843 + 1);
      v1345.__r_.__value_.__l.__size_ = v806 + 27;
      v1345.__r_.__value_.__r.__words[2] = v844 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v808;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v808 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v806 + 27;
    }
    if (v805 >= 0)
      v845 = (std::string *)v7;
    else
      v845 = *(std::string **)v7;
    v846 = (char *)v808 + v806;
    if (v845 >= v808 && v846 > (char *)v845)
      goto LABEL_3598;
    if (v806)
      memmove(v808, v845, v806);
    if (v846 <= "FirPacketsReceivedPerMinute" && v846 + 27 > "FirPacketsReceivedPerMinute")
      goto LABEL_3598;
    strcpy(v846, "FirPacketsReceivedPerMinute");
    if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(v1345.__r_.__value_.__l.__data_);
    }
    while (!__ldaxr(&qword_253EA59C0))
    {
      if (!__stlxr(0, &qword_253EA59C0))
      {
        v824 = atomic_load(&qword_253EA59D0);
        if (v824)
          goto LABEL_2278;
        goto LABEL_2281;
      }
    }
    __clrex();
    v824 = atomic_load(&qword_253EA59D0);
    if (v824)
      goto LABEL_2278;
LABEL_2281:
    v850 = v7[23];
    if (v850 >= 0)
      v851 = v7[23];
    else
      v851 = *((_QWORD *)v7 + 1);
    v852 = v851 + 27;
    if (v851 + 27 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v852 > 0x16)
    {
      v862 = (v852 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v852 | 7) != 0x17)
        v862 = v852 | 7;
      v863 = v862 + 1;
      v853 = (std::string *)operator new(v862 + 1);
      v1345.__r_.__value_.__l.__size_ = v851 + 27;
      v1345.__r_.__value_.__r.__words[2] = v863 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v853;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v853 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v851 + 27;
    }
    v856 = v1337.i32[3];
    if (v850 >= 0)
      v864 = (std::string *)v7;
    else
      v864 = *(std::string **)v7;
    v865 = (char *)v853 + v851;
    if (v864 >= v853 && v865 > (char *)v864)
      goto LABEL_3598;
    if (v851)
    {
      memmove(v853, v864, v851);
      v856 = v1337.i32[3];
    }
    if (v865 <= "PliPacketsReceivedPerMinute" && v865 + 27 > "PliPacketsReceivedPerMinute")
      goto LABEL_3598;
    strcpy(v865, "PliPacketsReceivedPerMinute");
    if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(v1345.__r_.__value_.__l.__data_);
      v856 = v1337.i32[3];
    }
    while (!__ldaxr(&qword_253EA59D0))
    {
      if (!__stlxr(0, &qword_253EA59D0))
      {
LABEL_2334:
        if (!v856)
          goto LABEL_2360;
        goto LABEL_2337;
      }
    }
LABEL_2336:
    __clrex();
    if (!v856)
      goto LABEL_2360;
    goto LABEL_2337;
  }
  v797 = atomic_load(&qword_253EA59B8);
  if (v797)
  {
    webrtc::metrics::HistogramAdd(v797, (60 * v782.i32[0]) / v796);
    v798 = atomic_load(&qword_253EA59C8);
    if (v798)
    {
LABEL_2190:
      webrtc::metrics::HistogramAdd(v798, (60 * v1337.i32[1]) / v796);
      v824 = atomic_load(&qword_253EA59D8);
      if (v824)
        goto LABEL_2278;
LABEL_2246:
      v839 = v7[23];
      if (v839 >= 0)
        v840 = v7[23];
      else
        v840 = *((_QWORD *)v7 + 1);
      v841 = v840 + 27;
      if (v840 + 27 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_3599;
      if (v841 > 0x16)
      {
        v854 = (v841 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v841 | 7) != 0x17)
          v854 = v841 | 7;
        v855 = v854 + 1;
        v842 = (std::string *)operator new(v854 + 1);
        v1345.__r_.__value_.__l.__size_ = v840 + 27;
        v1345.__r_.__value_.__r.__words[2] = v855 | 0x8000000000000000;
        v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v842;
      }
      else
      {
        memset(&v1345, 0, sizeof(v1345));
        v842 = &v1345;
        *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v840 + 27;
      }
      v856 = v1337.i32[3];
      if (v839 >= 0)
        v857 = (std::string *)v7;
      else
        v857 = *(std::string **)v7;
      v858 = (char *)v842 + v840;
      if (v857 >= v842 && v858 > (char *)v857)
        goto LABEL_3598;
      if (v840)
      {
        memmove(v842, v857, v840);
        v856 = v1337.i32[3];
      }
      if (v858 <= "PliPacketsReceivedPerMinute" && v858 + 27 > "PliPacketsReceivedPerMinute")
        goto LABEL_3598;
      strcpy(v858, "PliPacketsReceivedPerMinute");
      if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_2308;
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(v1345.__r_.__value_.__l.__data_);
      v856 = v1337.i32[3];
LABEL_2308:
      while (!__ldaxr(&qword_253EA59D8))
      {
        if (!__stlxr(0, &qword_253EA59D8))
          goto LABEL_2334;
      }
      goto LABEL_2336;
    }
  }
  else
  {
    v809 = v7[23];
    if (v809 >= 0)
      v810 = v7[23];
    else
      v810 = *((_QWORD *)v7 + 1);
    v811 = v810 + 28;
    if (v810 + 28 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v811 > 0x16)
    {
      v817 = (v811 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v811 | 7) != 0x17)
        v817 = v811 | 7;
      v818 = v817 + 1;
      v812 = (std::string *)operator new(v817 + 1);
      v1345.__r_.__value_.__l.__size_ = v810 + 28;
      v1345.__r_.__value_.__r.__words[2] = v818 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v812;
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v812 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v810 + 28;
    }
    if (v809 >= 0)
      v819 = (std::string *)v7;
    else
      v819 = *(std::string **)v7;
    v820 = (char *)v812 + v810;
    if (v819 >= v812 && v820 > (char *)v819)
      goto LABEL_3598;
    if (v810)
      memmove(v812, v819, v810);
    if (v820 <= "NackPacketsReceivedPerMinute" && v820 + 28 > "NackPacketsReceivedPerMinute")
      goto LABEL_3598;
    strcpy(v820, "NackPacketsReceivedPerMinute");
    if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(v1345.__r_.__value_.__l.__data_);
    }
    do
    {
      if (__ldaxr(&qword_253EA59B8))
      {
        __clrex();
        v798 = atomic_load(&qword_253EA59C8);
        if (v798)
          goto LABEL_2190;
        goto LABEL_2140;
      }
    }
    while (__stlxr(0, &qword_253EA59B8));
    v798 = atomic_load(&qword_253EA59C8);
    if (v798)
      goto LABEL_2190;
  }
LABEL_2140:
  v799 = v7[23];
  if (v799 >= 0)
    v800 = v7[23];
  else
    v800 = *((_QWORD *)v7 + 1);
  v801 = v800 + 27;
  if (v800 + 27 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v801 > 0x16)
  {
    v832 = (v801 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v801 | 7) != 0x17)
      v832 = v801 | 7;
    v833 = v832 + 1;
    v802 = (std::string *)operator new(v832 + 1);
    v1345.__r_.__value_.__l.__size_ = v800 + 27;
    v1345.__r_.__value_.__r.__words[2] = v833 | 0x8000000000000000;
    v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v802;
  }
  else
  {
    memset(&v1345, 0, sizeof(v1345));
    v802 = &v1345;
    *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v800 + 27;
  }
  if (v799 >= 0)
    v834 = (std::string *)v7;
  else
    v834 = *(std::string **)v7;
  v835 = (char *)v802 + v800;
  if (v834 >= v802 && v835 > (char *)v834)
    goto LABEL_3598;
  if (v800)
    memmove(v802, v834, v800);
  if (v835 <= "FirPacketsReceivedPerMinute" && v835 + 27 > "FirPacketsReceivedPerMinute")
    goto LABEL_3598;
  strcpy(v835, "FirPacketsReceivedPerMinute");
  if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_2243;
  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
  {
    goto LABEL_3598;
  }
  operator delete(v1345.__r_.__value_.__l.__data_);
  do
  {
LABEL_2243:
    if (__ldaxr(&qword_253EA59C8))
    {
      __clrex();
      v824 = atomic_load(&qword_253EA59D8);
      if (v824)
        goto LABEL_2278;
      goto LABEL_2246;
    }
  }
  while (__stlxr(0, &qword_253EA59C8));
  v824 = atomic_load(&qword_253EA59D8);
  if (!v824)
    goto LABEL_2246;
LABEL_2278:
  webrtc::metrics::HistogramAdd(v824, (60 * v1337.i32[2]) / v796);
  if (!v1337.i32[3])
  {
LABEL_2360:
    if (*((_QWORD *)v7 + 127) != -1)
      goto LABEL_2361;
    goto LABEL_2515;
  }
LABEL_2337:
  v869 = v7[23];
  if (v869 >= 0)
    v870 = v7[23];
  else
    v870 = *((_QWORD *)v7 + 1);
  v871 = v870 + 35;
  if (v870 + 35 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v871 > 0x16)
  {
    v873 = (v871 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v871 | 7) != 0x17)
      v873 = v871 | 7;
    v874 = v873 + 1;
    v872 = (std::string *)operator new(v873 + 1);
    v1345.__r_.__value_.__l.__size_ = v870 + 35;
    v1345.__r_.__value_.__r.__words[2] = v874 | 0x8000000000000000;
    v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v872;
  }
  else
  {
    memset(&v1345, 0, sizeof(v1345));
    v872 = &v1345;
    *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v870 + 35;
  }
  if (v869 >= 0)
    v875 = (std::string *)v7;
  else
    v875 = *(std::string **)v7;
  v876 = (char *)v872 + v870;
  if (v875 >= v872 && v876 > (char *)v875)
    goto LABEL_3598;
  if (v870)
    memmove(v872, v875, v870);
  if (v876 <= "UniqueNackRequestsReceivedInPercent" && v876 + 35 > "UniqueNackRequestsReceivedInPercent")
    goto LABEL_3598;
  strcpy(v876, "UniqueNackRequestsReceivedInPercent");
  if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_2360;
  if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
  {
    goto LABEL_3598;
  }
  operator delete(v1345.__r_.__value_.__l.__data_);
  if (*((_QWORD *)v7 + 127) == -1)
    goto LABEL_2515;
LABEL_2361:
  v879 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v7 + 3) + 16))(*((_QWORD *)v7 + 3));
  v880 = v879 / 0x3E8uLL;
  if (v879 % 0x3E8uLL > 0x1F3)
    ++v880;
  if (-v879 % 0x3E8uLL <= 0x1F4)
    v881 = 0;
  else
    v881 = -1;
  if (v879 < 0)
    v880 = v881 - -v879 / 0x3E8uLL;
  if ((uint64_t)(v880 - *((_QWORD *)v7 + 127)) >= 10000)
  {
    if (v18)
    {
      v882 = atomic_load(&qword_253EA59E8);
      if (!v882)
      {
        v883 = v7[23];
        if (v883 >= 0)
          v884 = v7[23];
        else
          v884 = *((_QWORD *)v7 + 1);
        v885 = v884 + 19;
        if (v884 + 19 <= 0x7FFFFFFFFFFFFFF7)
        {
          if (v885 > 0x16)
          {
            v895 = (v885 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v885 | 7) != 0x17)
              v895 = v885 | 7;
            v896 = v895 + 1;
            v886 = (std::string *)operator new(v895 + 1);
            v1345.__r_.__value_.__l.__size_ = v884 + 19;
            v1345.__r_.__value_.__r.__words[2] = v896 | 0x8000000000000000;
            v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v886;
            if (v883 >= 0)
              v887 = (std::string *)v7;
            else
              v887 = *(std::string **)v7;
            v888 = (char *)v886 + v884;
            if (v887 < v886)
              goto LABEL_2405;
          }
          else
          {
            memset(&v1345, 0, sizeof(v1345));
            v886 = &v1345;
            *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v884 + 19;
            if (v883 >= 0)
              v887 = (std::string *)v7;
            else
              v887 = *(std::string **)v7;
            v888 = (char *)&v1345 + v884;
            if (v887 < &v1345)
              goto LABEL_2405;
          }
          if (v888 <= (char *)v887)
          {
LABEL_2405:
            if (v884)
              memmove(v886, v887, v884);
            if (v888 > "NumberOfPauseEvents" || v888 + 19 <= "NumberOfPauseEvents")
            {
              strcpy(v888, "NumberOfPauseEvents");
              if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_2414;
              if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0
                && (!v1345.__r_.__value_.__l.__size_ || v1345.__r_.__value_.__r.__words[0]))
              {
                operator delete(v1345.__r_.__value_.__l.__data_);
LABEL_2414:
                while (!__ldaxr(&qword_253EA59E8))
                {
                  if (!__stlxr(0, &qword_253EA59E8))
                    goto LABEL_2437;
                }
                goto LABEL_2436;
              }
            }
          }
LABEL_3598:
          __break(1u);
        }
LABEL_3599:
        abort();
      }
LABEL_2382:
      webrtc::metrics::HistogramAdd(v882, *((_DWORD *)v7 + 268));
LABEL_2437:
      if (v7[23] < 0)
      {
        v901 = *((_QWORD *)v7 + 1);
        if ((v901 & 0x8000000000000000) != 0)
          goto LABEL_3598;
        v902 = *(const void **)v7;
        if (v901)
        {
          if (!v902)
            goto LABEL_3598;
        }
      }
      else
      {
        v901 = v7[23];
        v902 = v7;
      }
      if (v901 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
        v903 = v1350 + ~*((_QWORD *)&v1350 + 1);
      else
        v903 = v901;
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v902, v903);
      *((_QWORD *)&v1350 + 1) += v903;
      v1349[*((_QWORD *)&v1350 + 1)] = 0;
      if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x14uLL)
        v904 = 20;
      else
        v904 = v1350 + ~*((_QWORD *)&v1350 + 1);
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "NumberOfPauseEvents ", v904);
      *((_QWORD *)&v1350 + 1) += v904;
      v1349[*((_QWORD *)&v1350 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%d", *((_DWORD *)v7 + 268));
      v905 = v1350;
      v906 = *((_QWORD *)&v1350 + 1) + 1;
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
      v907 = *((_QWORD *)&v1350 + 1);
      if (v905 != v906)
        v907 = *((_QWORD *)&v1350 + 1) + 1;
      *((_QWORD *)&v1350 + 1) = v907;
      v1349[v907] = 0;
      v908 = *((_QWORD *)v7 + 133);
      if (v908 < 10000)
        goto LABEL_2515;
      v909 = (int)(float)((float)((float)((float)*((uint64_t *)v7 + 132) * 100.0) / (float)v908) + 0.5);
      if (v909 == -1)
        goto LABEL_2515;
      if (v18)
      {
        v910 = v7[23];
        if (v910 >= 0)
          v911 = v7[23];
        else
          v911 = *((_QWORD *)v7 + 1);
        v912 = v911 + 19;
        if (v911 + 19 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_3599;
        if (v912 > 0x16)
        {
          v921 = (v912 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v912 | 7) != 0x17)
            v921 = v912 | 7;
          v922 = v921 + 1;
          v913 = (std::string *)operator new(v921 + 1);
          v1345.__r_.__value_.__l.__size_ = v911 + 19;
          v1345.__r_.__value_.__r.__words[2] = v922 | 0x8000000000000000;
          v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v913;
          if (v910 >= 0)
            v914 = (std::string *)v7;
          else
            v914 = *(std::string **)v7;
          v915 = (char *)v913 + v911;
          if (v914 < v913)
            goto LABEL_2480;
        }
        else
        {
          memset(&v1345, 0, sizeof(v1345));
          v913 = &v1345;
          *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v911 + 19;
          if (v910 >= 0)
            v914 = (std::string *)v7;
          else
            v914 = *(std::string **)v7;
          v915 = (char *)&v1345 + v911;
          if (v914 < &v1345)
          {
LABEL_2480:
            if (v911)
              memmove(v913, v914, v911);
            if (v915 <= "PausedTimeInPercent" && v915 + 19 > "PausedTimeInPercent")
              goto LABEL_3598;
            goto LABEL_2496;
          }
        }
        if (v915 > (char *)v914)
          goto LABEL_3598;
        goto LABEL_2480;
      }
      v916 = v7[23];
      if (v916 >= 0)
        v917 = v7[23];
      else
        v917 = *((_QWORD *)v7 + 1);
      v918 = v917 + 19;
      if (v917 + 19 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_3599;
      if (v918 > 0x16)
      {
        v923 = (v918 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v918 | 7) != 0x17)
          v923 = v918 | 7;
        v924 = v923 + 1;
        v919 = (std::string *)operator new(v923 + 1);
        v1345.__r_.__value_.__l.__size_ = v917 + 19;
        v1345.__r_.__value_.__r.__words[2] = v924 | 0x8000000000000000;
        v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v919;
        if (v916 >= 0)
          v920 = (std::string *)v7;
        else
          v920 = *(std::string **)v7;
        v915 = (char *)v919 + v917;
        if (v920 >= v919)
          goto LABEL_2491;
      }
      else
      {
        memset(&v1345, 0, sizeof(v1345));
        v919 = &v1345;
        *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v917 + 19;
        if (v916 >= 0)
          v920 = (std::string *)v7;
        else
          v920 = *(std::string **)v7;
        v915 = (char *)&v1345 + v917;
        if (v920 < &v1345)
          goto LABEL_2492;
LABEL_2491:
        if (v915 > (char *)v920)
          goto LABEL_3598;
      }
LABEL_2492:
      if (v917)
        memmove(v919, v920, v917);
      if (v915 <= "PausedTimeInPercent" && v915 + 19 > "PausedTimeInPercent")
        goto LABEL_3598;
LABEL_2496:
      strcpy(v915, "PausedTimeInPercent");
      if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
      {
        if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
          || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
        {
          goto LABEL_3598;
        }
        operator delete(v1345.__r_.__value_.__l.__data_);
      }
      if (v7[23] < 0)
      {
        v925 = *((_QWORD *)v7 + 1);
        if ((v925 & 0x8000000000000000) != 0)
          goto LABEL_3598;
        v926 = *(const void **)v7;
        if (v925)
        {
          if (!v926)
            goto LABEL_3598;
        }
      }
      else
      {
        v925 = v7[23];
        v926 = v7;
      }
      if (v925 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
        v927 = v1350 + ~*((_QWORD *)&v1350 + 1);
      else
        v927 = v925;
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v926, v927);
      *((_QWORD *)&v1350 + 1) += v927;
      v1349[*((_QWORD *)&v1350 + 1)] = 0;
      if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x14uLL)
        v928 = 20;
      else
        v928 = v1350 + ~*((_QWORD *)&v1350 + 1);
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "PausedTimeInPercent ", v928);
      *((_QWORD *)&v1350 + 1) += v928;
      v1349[*((_QWORD *)&v1350 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%d", v909);
      v929 = v1350;
      v930 = *((_QWORD *)&v1350 + 1) + 1;
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
      v931 = *((_QWORD *)&v1350 + 1);
      if (v929 != v930)
        v931 = *((_QWORD *)&v1350 + 1) + 1;
      *((_QWORD *)&v1350 + 1) = v931;
      v1349[v931] = 0;
      goto LABEL_2515;
    }
    v882 = atomic_load(&qword_253EA59E0);
    if (v882)
      goto LABEL_2382;
    v889 = v7[23];
    if (v889 >= 0)
      v890 = v7[23];
    else
      v890 = *((_QWORD *)v7 + 1);
    v891 = v890 + 19;
    if (v890 + 19 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v891 > 0x16)
    {
      v898 = (v891 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v891 | 7) != 0x17)
        v898 = v891 | 7;
      v899 = v898 + 1;
      v892 = (std::string *)operator new(v898 + 1);
      v1345.__r_.__value_.__l.__size_ = v890 + 19;
      v1345.__r_.__value_.__r.__words[2] = v899 | 0x8000000000000000;
      v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v892;
      if (v889 >= 0)
        v893 = (std::string *)v7;
      else
        v893 = *(std::string **)v7;
      v894 = (char *)v892 + v890;
      if (v893 < v892)
      {
LABEL_2424:
        if (v890)
          memmove(v892, v893, v890);
        if (v894 <= "NumberOfPauseEvents" && v894 + 19 > "NumberOfPauseEvents")
          goto LABEL_3598;
        strcpy(v894, "NumberOfPauseEvents");
        if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_2433;
        if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
          || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
        {
          goto LABEL_3598;
        }
        operator delete(v1345.__r_.__value_.__l.__data_);
LABEL_2433:
        while (!__ldaxr(&qword_253EA59E0))
        {
          if (!__stlxr(0, &qword_253EA59E0))
            goto LABEL_2437;
        }
LABEL_2436:
        __clrex();
        goto LABEL_2437;
      }
    }
    else
    {
      memset(&v1345, 0, sizeof(v1345));
      v892 = &v1345;
      *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v890 + 19;
      if (v889 >= 0)
        v893 = (std::string *)v7;
      else
        v893 = *(std::string **)v7;
      v894 = (char *)&v1345 + v890;
      if (v893 < &v1345)
        goto LABEL_2424;
    }
    if (v894 > (char *)v893)
      goto LABEL_3598;
    goto LABEL_2424;
  }
LABEL_2515:
  if (v7[1104])
  {
    v932 = *((_QWORD *)v7 + 137);
    if (v932 >= 20000)
    {
      v933 = *((_QWORD *)v7 + 139);
      if ((int)(float)((float)((float)((float)*((uint64_t *)v7 + 136) * 100.0) / (float)v932) + 0.5) != -1
        && v933 >= 20000)
      {
        if (v18)
        {
          v935 = v7[23];
          if (v935 >= 0)
            v936 = v7[23];
          else
            v936 = *((_QWORD *)v7 + 1);
          v937 = v936 + 41;
          if (v936 + 41 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_3599;
          if (v937 > 0x16)
          {
            v943 = (v937 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v937 | 7) != 0x17)
              v943 = v937 | 7;
            v944 = v943 + 1;
            v938 = (std::string *)operator new(v943 + 1);
            v1345.__r_.__value_.__l.__size_ = v936 + 41;
            v1345.__r_.__value_.__r.__words[2] = v944 | 0x8000000000000000;
            v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v938;
          }
          else
          {
            memset(&v1345, 0, sizeof(v1345));
            v938 = &v1345;
            *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v936 + 41;
          }
          if (v935 >= 0)
            v945 = (std::string *)v7;
          else
            v945 = *(std::string **)v7;
          v946 = (char *)v938 + v936;
          if (v945 >= v938 && v946 > (char *)v945)
            goto LABEL_3598;
          if (v936)
            memmove(v938, v945, v936);
          if (v946 <= "Encoder.ForcedSwFallbackTimeInPercent.Vp8"
            && v946 + 41 > "Encoder.ForcedSwFallbackTimeInPercent.Vp8")
          {
            goto LABEL_3598;
          }
          strcpy(v946, "Encoder.ForcedSwFallbackTimeInPercent.Vp8");
          if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
          {
            if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
              || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
            {
              goto LABEL_3598;
            }
            operator delete(v1345.__r_.__value_.__l.__data_);
          }
          v948 = atomic_load(&qword_253EA59F8);
          if (!v948)
          {
            v949 = v7[23];
            if (v949 >= 0)
              v950 = v7[23];
            else
              v950 = *((_QWORD *)v7 + 1);
            v951 = v950 + 44;
            if (v950 + 44 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_3599;
            if (v951 > 0x16)
            {
              v962 = (v951 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v951 | 7) != 0x17)
                v962 = v951 | 7;
              v963 = v962 + 1;
              v952 = (std::string *)operator new(v962 + 1);
              v1345.__r_.__value_.__l.__size_ = v950 + 44;
              v1345.__r_.__value_.__r.__words[2] = v963 | 0x8000000000000000;
              v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v952;
            }
            else
            {
              memset(&v1345, 0, sizeof(v1345));
              v952 = &v1345;
              *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v950 + 44;
            }
            if (v949 >= 0)
              v964 = (std::string *)v7;
            else
              v964 = *(std::string **)v7;
            v965 = (char *)v952 + v950;
            if (v964 >= v952 && v965 > (char *)v964)
              goto LABEL_3598;
            if (v950)
              memmove(v952, v964, v950);
            if (v965 <= "Encoder.ForcedSwFallbackChangesPerMinute.Vp8"
              && v965 + 44 > "Encoder.ForcedSwFallbackChangesPerMinute.Vp8")
            {
              goto LABEL_3598;
            }
            strcpy(v965, "Encoder.ForcedSwFallbackChangesPerMinute.Vp8");
            if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_2604;
            if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
              || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
            {
              goto LABEL_3598;
            }
            operator delete(v1345.__r_.__value_.__l.__data_);
LABEL_2604:
            while (!__ldaxr(&qword_253EA59F8))
            {
              if (!__stlxr(0, &qword_253EA59F8))
                goto LABEL_2628;
            }
            goto LABEL_2627;
          }
LABEL_2580:
          webrtc::metrics::HistogramAdd(v948, 60 * *((int *)v7 + 277) / (uint64_t)(v933 / 0x3E8uLL));
        }
        else
        {
          v939 = v7[23];
          if (v939 >= 0)
            v940 = v7[23];
          else
            v940 = *((_QWORD *)v7 + 1);
          v941 = v940 + 41;
          if (v940 + 41 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_3599;
          if (v941 > 0x16)
          {
            v953 = (v941 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v941 | 7) != 0x17)
              v953 = v941 | 7;
            v954 = v953 + 1;
            v942 = (std::string *)operator new(v953 + 1);
            v1345.__r_.__value_.__l.__size_ = v940 + 41;
            v1345.__r_.__value_.__r.__words[2] = v954 | 0x8000000000000000;
            v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v942;
          }
          else
          {
            memset(&v1345, 0, sizeof(v1345));
            v942 = &v1345;
            *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v940 + 41;
          }
          if (v939 >= 0)
            v955 = (std::string *)v7;
          else
            v955 = *(std::string **)v7;
          v956 = (char *)v942 + v940;
          if (v955 >= v942 && v956 > (char *)v955)
            goto LABEL_3598;
          if (v940)
            memmove(v942, v955, v940);
          if (v956 <= "Encoder.ForcedSwFallbackTimeInPercent.Vp8"
            && v956 + 41 > "Encoder.ForcedSwFallbackTimeInPercent.Vp8")
          {
            goto LABEL_3598;
          }
          strcpy(v956, "Encoder.ForcedSwFallbackTimeInPercent.Vp8");
          if (SHIBYTE(v1345.__r_.__value_.__r.__words[2]) < 0)
          {
            if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
              || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
            {
              goto LABEL_3598;
            }
            operator delete(v1345.__r_.__value_.__l.__data_);
          }
          v948 = atomic_load(&qword_253EA59F0);
          if (v948)
            goto LABEL_2580;
          v958 = v7[23];
          if (v958 >= 0)
            v959 = v7[23];
          else
            v959 = *((_QWORD *)v7 + 1);
          v960 = v959 + 44;
          if (v959 + 44 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_3599;
          if (v960 > 0x16)
          {
            v967 = (v960 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v960 | 7) != 0x17)
              v967 = v960 | 7;
            v968 = v967 + 1;
            v961 = (std::string *)operator new(v967 + 1);
            v1345.__r_.__value_.__l.__size_ = v959 + 44;
            v1345.__r_.__value_.__r.__words[2] = v968 | 0x8000000000000000;
            v1345.__r_.__value_.__r.__words[0] = (std::string::size_type)v961;
          }
          else
          {
            memset(&v1345, 0, sizeof(v1345));
            v961 = &v1345;
            *((_BYTE *)&v1345.__r_.__value_.__s + 23) = v959 + 44;
          }
          if (v958 >= 0)
            v969 = (std::string *)v7;
          else
            v969 = *(std::string **)v7;
          v970 = (char *)v961 + v959;
          if (v969 >= v961 && v970 > (char *)v969)
            goto LABEL_3598;
          if (v959)
            memmove(v961, v969, v959);
          if (v970 <= "Encoder.ForcedSwFallbackChangesPerMinute.Vp8"
            && v970 + 44 > "Encoder.ForcedSwFallbackChangesPerMinute.Vp8")
          {
            goto LABEL_3598;
          }
          strcpy(v970, "Encoder.ForcedSwFallbackChangesPerMinute.Vp8");
          if ((SHIBYTE(v1345.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_2624;
          if ((v1345.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
            || v1345.__r_.__value_.__l.__size_ && !v1345.__r_.__value_.__r.__words[0])
          {
            goto LABEL_3598;
          }
          operator delete(v1345.__r_.__value_.__l.__data_);
LABEL_2624:
          while (!__ldaxr(&qword_253EA59F0))
          {
            if (!__stlxr(0, &qword_253EA59F0))
              goto LABEL_2628;
          }
LABEL_2627:
          __clrex();
        }
      }
    }
  }
LABEL_2628:
  v972 = *((_QWORD *)v7 + 63);
  v975 = *(_QWORD *)(v972 + 16);
  v973 = (std::string *)(v972 + 16);
  v974 = v975;
  if (v975)
  {
    if (v974 >= 0)
      v976 = v974;
    else
      v976 = v974 + 1;
    *(_DWORD *)(*((_QWORD *)v7 + 63) + 32) = (*(_QWORD *)(*((_QWORD *)v7 + 63) + 8) + (v976 >> 1)) / v974;
  }
  v1345 = *v973;
  if ((uint64_t)v1345.__r_.__value_.__l.__data_ < 7)
    goto LABEL_2722;
  if (!v18)
  {
    v977 = atomic_load(&qword_253EA5A00);
    if (!v977)
    {
      v983 = v7[23];
      if (v983 >= 0)
        v984 = v7[23];
      else
        v984 = *((_QWORD *)v7 + 1);
      v985 = v984 + 17;
      if (v984 + 17 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_3599;
      if (v985 > 0x16)
      {
        v994 = (v985 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v985 | 7) != 0x17)
          v994 = v985 | 7;
        v995 = v994 + 1;
        v986 = (std::string *)operator new(v994 + 1);
        v1344.__r_.__value_.__l.__size_ = v984 + 17;
        v1344.__r_.__value_.__r.__words[2] = v995 | 0x8000000000000000;
        v1344.__r_.__value_.__r.__words[0] = (std::string::size_type)v986;
      }
      else
      {
        memset(&v1344, 0, sizeof(v1344));
        v986 = &v1344;
        *((_BYTE *)&v1344.__r_.__value_.__s + 23) = v984 + 17;
      }
      if (v983 >= 0)
        v996 = (std::string *)v7;
      else
        v996 = *(std::string **)v7;
      v997 = (char *)v986 + v984;
      if (v996 >= v986 && v997 > (char *)v996)
        goto LABEL_3598;
      if (v984)
        memmove(v986, v996, v984);
      if (v997 <= "BitrateSentInKbps" && v997 + 17 > "BitrateSentInKbps")
        goto LABEL_3598;
      strcpy(v997, "BitrateSentInKbps");
      if ((SHIBYTE(v1344.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_2696;
      if ((v1344.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || v1344.__r_.__value_.__l.__size_ && !v1344.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(v1344.__r_.__value_.__l.__data_);
      do
      {
LABEL_2696:
        if (__ldaxr(&qword_253EA5A00))
          goto LABEL_2700;
      }
      while (__stlxr(0, &qword_253EA5A00));
LABEL_2698:
      LODWORD(v982) = v7[23];
      if ((v982 & 0x80000000) == 0)
        goto LABEL_2699;
LABEL_2701:
      v982 = *((_QWORD *)v7 + 1);
      if ((v982 & 0x8000000000000000) != 0)
        goto LABEL_3598;
      v1001 = *(const void **)v7;
      if (v982)
      {
        if (!v1001)
          goto LABEL_3598;
      }
      goto LABEL_2704;
    }
LABEL_2643:
    webrtc::metrics::HistogramAdd(v977, SLODWORD(v1345.__r_.__value_.__r.__words[2]) / 125);
    LODWORD(v982) = v7[23];
    if ((v982 & 0x80000000) != 0)
      goto LABEL_2701;
    goto LABEL_2699;
  }
  v977 = atomic_load(&qword_253EA5A08);
  if (v977)
    goto LABEL_2643;
  v978 = v7[23];
  if (v978 >= 0)
    v979 = v7[23];
  else
    v979 = *((_QWORD *)v7 + 1);
  v980 = v979 + 17;
  if (v979 + 17 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v980 > 0x16)
  {
    v987 = (v980 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v980 | 7) != 0x17)
      v987 = v980 | 7;
    v988 = v987 + 1;
    v981 = (std::string *)operator new(v987 + 1);
    v1344.__r_.__value_.__l.__size_ = v979 + 17;
    v1344.__r_.__value_.__r.__words[2] = v988 | 0x8000000000000000;
    v1344.__r_.__value_.__r.__words[0] = (std::string::size_type)v981;
  }
  else
  {
    memset(&v1344, 0, sizeof(v1344));
    v981 = &v1344;
    *((_BYTE *)&v1344.__r_.__value_.__s + 23) = v979 + 17;
  }
  if (v978 >= 0)
    v989 = (std::string *)v7;
  else
    v989 = *(std::string **)v7;
  v990 = (char *)v981 + v979;
  if (v989 >= v981 && v990 > (char *)v989)
    goto LABEL_3598;
  if (v979)
    memmove(v981, v989, v979);
  if (v990 <= "BitrateSentInKbps" && v990 + 17 > "BitrateSentInKbps")
    goto LABEL_3598;
  strcpy(v990, "BitrateSentInKbps");
  if ((SHIBYTE(v1344.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_2672;
  if ((v1344.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v1344.__r_.__value_.__l.__size_ && !v1344.__r_.__value_.__r.__words[0])
  {
    goto LABEL_3598;
  }
  operator delete(v1344.__r_.__value_.__l.__data_);
LABEL_2672:
  while (!__ldaxr(&qword_253EA5A08))
  {
    if (!__stlxr(0, &qword_253EA5A08))
      goto LABEL_2698;
  }
LABEL_2700:
  __clrex();
  LODWORD(v982) = v7[23];
  if ((v982 & 0x80000000) != 0)
    goto LABEL_2701;
LABEL_2699:
  v982 = v982;
  v1001 = v7;
LABEL_2704:
  if (v982 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1002 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1002 = v982;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1001, v1002);
  *((_QWORD *)&v1350 + 1) += v1002;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x11uLL)
    v1003 = 17;
  else
    v1003 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "BitrateSentInBps ", v1003);
  *((_QWORD *)&v1350 + 1) += v1003;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&v1345, 8, &v1344);
  if (SHIBYTE(v1344.__r_.__value_.__r.__words[2]) < 0)
  {
    v1004 = v1344.__r_.__value_.__l.__size_;
    if ((v1344.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v1005 = (std::string *)v1344.__r_.__value_.__r.__words[0];
    if (v1344.__r_.__value_.__l.__size_)
    {
      if (!v1344.__r_.__value_.__r.__words[0])
        goto LABEL_3598;
    }
  }
  else
  {
    v1004 = HIBYTE(v1344.__r_.__value_.__r.__words[2]);
    v1005 = &v1344;
  }
  if (v1004 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1006 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1006 = v1004;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1005, v1006);
  *((_QWORD *)&v1350 + 1) += v1006;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  v1007 = v1350;
  v1008 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v1009 = *((_QWORD *)&v1350 + 1);
  if (v1007 != v1008)
    v1009 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v1009;
  v1349[v1009] = 0;
  if (SHIBYTE(v1344.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1344.__r_.__value_.__l.__data_);
LABEL_2722:
  v1010 = *((_QWORD *)v7 + 74);
  v1013 = *(_QWORD *)(v1010 + 16);
  v1011 = (std::string *)(v1010 + 16);
  v1012 = v1013;
  if (v1013)
  {
    if (v1012 >= 0)
      v1014 = v1012;
    else
      v1014 = v1012 + 1;
    *(_DWORD *)(*((_QWORD *)v7 + 74) + 32) = (*(_QWORD *)(*((_QWORD *)v7 + 74) + 8) + (v1014 >> 1)) / v1012;
  }
  v1344 = *v1011;
  if ((uint64_t)v1344.__r_.__value_.__l.__data_ < 7)
    goto LABEL_2812;
  if (!v18)
  {
    v1015 = atomic_load(&qword_253EA5A10);
    if (!v1015)
    {
      v1021 = v7[23];
      if (v1021 >= 0)
        v1022 = v7[23];
      else
        v1022 = *((_QWORD *)v7 + 1);
      v1023 = v1022 + 22;
      if (v1022 + 22 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_3599;
      if (v1023 > 0x16)
      {
        v1031 = (v1023 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v1023 | 7) != 0x17)
          v1031 = v1023 | 7;
        v1032 = v1031 + 1;
        v1024 = (std::string *)operator new(v1031 + 1);
        v1343.__r_.__value_.__l.__size_ = v1022 + 22;
        v1343.__r_.__value_.__r.__words[2] = v1032 | 0x8000000000000000;
        v1343.__r_.__value_.__r.__words[0] = (std::string::size_type)v1024;
      }
      else
      {
        memset(&v1343, 0, sizeof(v1343));
        v1024 = &v1343;
        *((_BYTE *)&v1343.__r_.__value_.__s + 23) = v1022 + 22;
      }
      if (v1021 >= 0)
        v1033 = (std::string *)v7;
      else
        v1033 = *(std::string **)v7;
      v1034 = (char *)v1024 + v1022;
      if (v1033 >= v1024 && v1034 > (char *)v1033)
        goto LABEL_3598;
      if (v1022)
        memmove(v1024, v1033, v1022);
      if (v1034 <= "MediaBitrateSentInKbps" && v1034 + 22 > "MediaBitrateSentInKbps")
        goto LABEL_3598;
      strcpy(v1034, "MediaBitrateSentInKbps");
      if ((SHIBYTE(v1343.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_2786;
      if ((v1343.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || v1343.__r_.__value_.__l.__size_ && !v1343.__r_.__value_.__r.__words[0])
      {
        goto LABEL_3598;
      }
      operator delete(v1343.__r_.__value_.__l.__data_);
      do
      {
LABEL_2786:
        if (__ldaxr(&qword_253EA5A10))
          goto LABEL_2790;
      }
      while (__stlxr(0, &qword_253EA5A10));
LABEL_2788:
      LODWORD(v1020) = v7[23];
      if ((v1020 & 0x80000000) == 0)
        goto LABEL_2789;
LABEL_2791:
      v1020 = *((_QWORD *)v7 + 1);
      if ((v1020 & 0x8000000000000000) != 0)
        goto LABEL_3598;
      v1037 = *(const void **)v7;
      if (v1020)
      {
        if (!v1037)
          goto LABEL_3598;
      }
      goto LABEL_2794;
    }
LABEL_2737:
    webrtc::metrics::HistogramAdd(v1015, SLODWORD(v1344.__r_.__value_.__r.__words[2]) / 125);
    LODWORD(v1020) = v7[23];
    if ((v1020 & 0x80000000) != 0)
      goto LABEL_2791;
    goto LABEL_2789;
  }
  v1015 = atomic_load(&qword_253EA5A18);
  if (v1015)
    goto LABEL_2737;
  v1016 = v7[23];
  if (v1016 >= 0)
    v1017 = v7[23];
  else
    v1017 = *((_QWORD *)v7 + 1);
  v1018 = v1017 + 22;
  if (v1017 + 22 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v1018 > 0x16)
  {
    v1025 = (v1018 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1018 | 7) != 0x17)
      v1025 = v1018 | 7;
    v1026 = v1025 + 1;
    v1019 = (std::string *)operator new(v1025 + 1);
    v1343.__r_.__value_.__l.__size_ = v1017 + 22;
    v1343.__r_.__value_.__r.__words[2] = v1026 | 0x8000000000000000;
    v1343.__r_.__value_.__r.__words[0] = (std::string::size_type)v1019;
  }
  else
  {
    memset(&v1343, 0, sizeof(v1343));
    v1019 = &v1343;
    *((_BYTE *)&v1343.__r_.__value_.__s + 23) = v1017 + 22;
  }
  if (v1016 >= 0)
    v1027 = (std::string *)v7;
  else
    v1027 = *(std::string **)v7;
  v1028 = (char *)v1019 + v1017;
  if (v1027 >= v1019 && v1028 > (char *)v1027)
    goto LABEL_3598;
  if (v1017)
    memmove(v1019, v1027, v1017);
  if (v1028 <= "MediaBitrateSentInKbps" && v1028 + 22 > "MediaBitrateSentInKbps")
    goto LABEL_3598;
  strcpy(v1028, "MediaBitrateSentInKbps");
  if ((SHIBYTE(v1343.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_2764;
  if ((v1343.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v1343.__r_.__value_.__l.__size_ && !v1343.__r_.__value_.__r.__words[0])
  {
    goto LABEL_3598;
  }
  operator delete(v1343.__r_.__value_.__l.__data_);
LABEL_2764:
  while (!__ldaxr(&qword_253EA5A18))
  {
    if (!__stlxr(0, &qword_253EA5A18))
      goto LABEL_2788;
  }
LABEL_2790:
  __clrex();
  LODWORD(v1020) = v7[23];
  if ((v1020 & 0x80000000) != 0)
    goto LABEL_2791;
LABEL_2789:
  v1020 = v1020;
  v1037 = v7;
LABEL_2794:
  if (v1020 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1038 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1038 = v1020;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1037, v1038);
  *((_QWORD *)&v1350 + 1) += v1038;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x16uLL)
    v1039 = 22;
  else
    v1039 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "MediaBitrateSentInBps ", v1039);
  *((_QWORD *)&v1350 + 1) += v1039;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&v1344, 8, &v1343);
  if (SHIBYTE(v1343.__r_.__value_.__r.__words[2]) < 0)
  {
    v1040 = v1343.__r_.__value_.__l.__size_;
    if ((v1343.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v1041 = (std::string *)v1343.__r_.__value_.__r.__words[0];
    if (v1343.__r_.__value_.__l.__size_)
    {
      if (!v1343.__r_.__value_.__r.__words[0])
        goto LABEL_3598;
    }
  }
  else
  {
    v1040 = HIBYTE(v1343.__r_.__value_.__r.__words[2]);
    v1041 = &v1343;
  }
  if (v1040 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1042 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1042 = v1040;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1041, v1042);
  *((_QWORD *)&v1350 + 1) += v1042;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  v1043 = v1350;
  v1044 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v1045 = *((_QWORD *)&v1350 + 1);
  if (v1043 != v1044)
    v1045 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v1045;
  v1349[v1045] = 0;
  if (SHIBYTE(v1343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1343.__r_.__value_.__l.__data_);
LABEL_2812:
  v1046 = *((_QWORD *)v7 + 96);
  v1049 = *(_QWORD *)(v1046 + 16);
  v1047 = (std::string *)(v1046 + 16);
  v1048 = v1049;
  if (v1049)
  {
    if (v1048 >= 0)
      v1050 = v1048;
    else
      v1050 = v1048 + 1;
    *(_DWORD *)(*((_QWORD *)v7 + 96) + 32) = (*(_QWORD *)(*((_QWORD *)v7 + 96) + 8) + (v1050 >> 1)) / v1048;
  }
  v1343 = *v1047;
  if ((uint64_t)v1343.__r_.__value_.__l.__data_ < 7)
    goto LABEL_2904;
  if (!v18)
  {
    v1051 = atomic_load(&qword_253EA5A20);
    if (v1051)
    {
LABEL_2831:
      webrtc::metrics::HistogramAdd(v1051, SLODWORD(v1343.__r_.__value_.__r.__words[2]) / 125);
      LODWORD(v1058) = v7[23];
      if ((v1058 & 0x80000000) != 0)
        goto LABEL_2883;
      goto LABEL_2881;
    }
    v1059 = v7[23];
    if (v1059 >= 0)
      v1060 = v7[23];
    else
      v1060 = *((_QWORD *)v7 + 1);
    v1061 = v1060 + 24;
    if (v1060 + 24 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v1061 > 0x16)
    {
      v1068 = (v1061 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1061 | 7) != 0x17)
        v1068 = v1061 | 7;
      v1069 = v1068 + 1;
      v1062 = (std::string *)operator new(v1068 + 1);
      v1342.__r_.__value_.__l.__size_ = v1060 + 24;
      v1342.__r_.__value_.__r.__words[2] = v1069 | 0x8000000000000000;
      v1342.__r_.__value_.__r.__words[0] = (std::string::size_type)v1062;
      if (v1059 >= 0)
        v1063 = (std::string *)v7;
      else
        v1063 = *(std::string **)v7;
      v1064 = (char *)v1062 + v1060;
      if (v1063 < v1062)
        goto LABEL_2869;
    }
    else
    {
      memset(&v1342, 0, sizeof(v1342));
      v1062 = &v1342;
      *((_BYTE *)&v1342.__r_.__value_.__s + 23) = v1060 + 24;
      if (v1059 >= 0)
        v1063 = (std::string *)v7;
      else
        v1063 = *(std::string **)v7;
      v1064 = (char *)&v1342 + v1060;
      if (v1063 < &v1342)
        goto LABEL_2869;
    }
    if (v1064 > (char *)v1063)
      goto LABEL_3598;
LABEL_2869:
    if (v1060)
      memmove(v1062, v1063, v1060);
    if (v1064 <= "PaddingBitrateSentInKbps" && v1064 + 24 > "PaddingBitrateSentInKbps")
      goto LABEL_3598;
    strcpy(v1064, "PaddingBitrateSentInKbps");
    if ((SHIBYTE(v1342.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_2878;
    if ((v1342.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || v1342.__r_.__value_.__l.__size_ && !v1342.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(v1342.__r_.__value_.__l.__data_);
    do
    {
LABEL_2878:
      if (__ldaxr(&qword_253EA5A20))
        goto LABEL_2882;
    }
    while (__stlxr(0, &qword_253EA5A20));
LABEL_2880:
    LODWORD(v1058) = v7[23];
    if ((v1058 & 0x80000000) != 0)
      goto LABEL_2883;
    goto LABEL_2881;
  }
  v1051 = atomic_load(&qword_253EA5A28);
  if (v1051)
    goto LABEL_2831;
  v1052 = v7[23];
  if (v1052 >= 0)
    v1053 = v7[23];
  else
    v1053 = *((_QWORD *)v7 + 1);
  v1054 = v1053 + 24;
  if (v1053 + 24 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v1054 > 0x16)
  {
    v1065 = (v1054 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1054 | 7) != 0x17)
      v1065 = v1054 | 7;
    v1066 = v1065 + 1;
    v1055 = (std::string *)operator new(v1065 + 1);
    v1342.__r_.__value_.__l.__size_ = v1053 + 24;
    v1342.__r_.__value_.__r.__words[2] = v1066 | 0x8000000000000000;
    v1342.__r_.__value_.__r.__words[0] = (std::string::size_type)v1055;
    if (v1052 >= 0)
      v1056 = (std::string *)v7;
    else
      v1056 = *(std::string **)v7;
    v1057 = (char *)v1055 + v1053;
    if (v1056 < v1055)
      goto LABEL_2850;
  }
  else
  {
    memset(&v1342, 0, sizeof(v1342));
    v1055 = &v1342;
    *((_BYTE *)&v1342.__r_.__value_.__s + 23) = v1053 + 24;
    if (v1052 >= 0)
      v1056 = (std::string *)v7;
    else
      v1056 = *(std::string **)v7;
    v1057 = (char *)&v1342 + v1053;
    if (v1056 < &v1342)
      goto LABEL_2850;
  }
  if (v1057 > (char *)v1056)
    goto LABEL_3598;
LABEL_2850:
  if (v1053)
    memmove(v1055, v1056, v1053);
  if (v1057 <= "PaddingBitrateSentInKbps" && v1057 + 24 > "PaddingBitrateSentInKbps")
    goto LABEL_3598;
  strcpy(v1057, "PaddingBitrateSentInKbps");
  if ((SHIBYTE(v1342.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_2859;
  if ((v1342.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v1342.__r_.__value_.__l.__size_ && !v1342.__r_.__value_.__r.__words[0])
  {
    goto LABEL_3598;
  }
  operator delete(v1342.__r_.__value_.__l.__data_);
LABEL_2859:
  while (!__ldaxr(&qword_253EA5A28))
  {
    if (!__stlxr(0, &qword_253EA5A28))
      goto LABEL_2880;
  }
LABEL_2882:
  __clrex();
  LODWORD(v1058) = v7[23];
  if ((v1058 & 0x80000000) == 0)
  {
LABEL_2881:
    v1058 = v1058;
    v1071 = v7;
    goto LABEL_2886;
  }
LABEL_2883:
  v1058 = *((_QWORD *)v7 + 1);
  if ((v1058 & 0x8000000000000000) != 0)
    goto LABEL_3598;
  v1071 = *(const void **)v7;
  if (v1058)
  {
    if (!v1071)
      goto LABEL_3598;
  }
LABEL_2886:
  if (v1058 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1072 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1072 = v1058;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1071, v1072);
  *((_QWORD *)&v1350 + 1) += v1072;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x18uLL)
    v1073 = 24;
  else
    v1073 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "PaddingBitrateSentInBps ", v1073);
  *((_QWORD *)&v1350 + 1) += v1073;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&v1343, 8, &v1342);
  if (SHIBYTE(v1342.__r_.__value_.__r.__words[2]) < 0)
  {
    v1074 = v1342.__r_.__value_.__l.__size_;
    if ((v1342.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v1075 = (std::string *)v1342.__r_.__value_.__r.__words[0];
    if (v1342.__r_.__value_.__l.__size_)
    {
      if (!v1342.__r_.__value_.__r.__words[0])
        goto LABEL_3598;
    }
  }
  else
  {
    v1074 = HIBYTE(v1342.__r_.__value_.__r.__words[2]);
    v1075 = &v1342;
  }
  if (v1074 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1076 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1076 = v1074;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1075, v1076);
  *((_QWORD *)&v1350 + 1) += v1076;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  v1077 = v1350;
  v1078 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v1079 = *((_QWORD *)&v1350 + 1);
  if (v1077 != v1078)
    v1079 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v1079;
  v1349[v1079] = 0;
  if (SHIBYTE(v1342.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1342.__r_.__value_.__l.__data_);
LABEL_2904:
  v1080 = *((_QWORD *)v7 + 107);
  v1083 = *(_QWORD *)(v1080 + 16);
  v1081 = (std::string *)(v1080 + 16);
  v1082 = v1083;
  if (v1083)
  {
    if (v1082 >= 0)
      v1084 = v1082;
    else
      v1084 = v1082 + 1;
    *(_DWORD *)(*((_QWORD *)v7 + 107) + 32) = (*(_QWORD *)(*((_QWORD *)v7 + 107) + 8) + (v1084 >> 1)) / v1082;
  }
  v1342 = *v1081;
  if ((uint64_t)v1342.__r_.__value_.__l.__data_ < 7)
    goto LABEL_2995;
  if (!v18)
  {
    v1085 = atomic_load(&qword_253EA5A30);
    if (v1085)
    {
LABEL_2923:
      webrtc::metrics::HistogramAdd(v1085, SLODWORD(v1342.__r_.__value_.__r.__words[2]) / 125);
      LODWORD(v1092) = v7[23];
      if ((v1092 & 0x80000000) != 0)
        goto LABEL_2975;
      goto LABEL_2973;
    }
    v1093 = v7[23];
    if (v1093 >= 0)
      v1094 = v7[23];
    else
      v1094 = *((_QWORD *)v7 + 1);
    v1095 = v1094 + 30;
    if (v1094 + 30 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v1095 > 0x16)
    {
      v1102 = (v1095 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1095 | 7) != 0x17)
        v1102 = v1095 | 7;
      v1103 = v1102 + 1;
      v1096 = (std::string *)operator new(v1102 + 1);
      v1341.__r_.__value_.__l.__size_ = v1094 + 30;
      v1341.__r_.__value_.__r.__words[2] = v1103 | 0x8000000000000000;
      v1341.__r_.__value_.__r.__words[0] = (std::string::size_type)v1096;
      if (v1093 >= 0)
        v1097 = (std::string *)v7;
      else
        v1097 = *(std::string **)v7;
      v1098 = (char *)v1096 + v1094;
      if (v1097 < v1096)
        goto LABEL_2961;
    }
    else
    {
      memset(&v1341, 0, sizeof(v1341));
      v1096 = &v1341;
      *((_BYTE *)&v1341.__r_.__value_.__s + 23) = v1094 + 30;
      if (v1093 >= 0)
        v1097 = (std::string *)v7;
      else
        v1097 = *(std::string **)v7;
      v1098 = (char *)&v1341 + v1094;
      if (v1097 < &v1341)
        goto LABEL_2961;
    }
    if (v1098 > (char *)v1097)
      goto LABEL_3598;
LABEL_2961:
    if (v1094)
      memmove(v1096, v1097, v1094);
    if (v1098 <= "RetransmittedBitrateSentInKbps" && v1098 + 30 > "RetransmittedBitrateSentInKbps")
      goto LABEL_3598;
    strcpy(v1098, "RetransmittedBitrateSentInKbps");
    if ((SHIBYTE(v1341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_2970;
    if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || v1341.__r_.__value_.__l.__size_ && !v1341.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(v1341.__r_.__value_.__l.__data_);
    do
    {
LABEL_2970:
      if (__ldaxr(&qword_253EA5A30))
        goto LABEL_2974;
    }
    while (__stlxr(0, &qword_253EA5A30));
LABEL_2972:
    LODWORD(v1092) = v7[23];
    if ((v1092 & 0x80000000) != 0)
      goto LABEL_2975;
    goto LABEL_2973;
  }
  v1085 = atomic_load(&qword_253EA5A38);
  if (v1085)
    goto LABEL_2923;
  v1086 = v7[23];
  if (v1086 >= 0)
    v1087 = v7[23];
  else
    v1087 = *((_QWORD *)v7 + 1);
  v1088 = v1087 + 30;
  if (v1087 + 30 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v1088 > 0x16)
  {
    v1099 = (v1088 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1088 | 7) != 0x17)
      v1099 = v1088 | 7;
    v1100 = v1099 + 1;
    v1089 = (std::string *)operator new(v1099 + 1);
    v1341.__r_.__value_.__l.__size_ = v1087 + 30;
    v1341.__r_.__value_.__r.__words[2] = v1100 | 0x8000000000000000;
    v1341.__r_.__value_.__r.__words[0] = (std::string::size_type)v1089;
    if (v1086 >= 0)
      v1090 = (std::string *)v7;
    else
      v1090 = *(std::string **)v7;
    v1091 = (char *)v1089 + v1087;
    if (v1090 < v1089)
      goto LABEL_2942;
  }
  else
  {
    memset(&v1341, 0, sizeof(v1341));
    v1089 = &v1341;
    *((_BYTE *)&v1341.__r_.__value_.__s + 23) = v1087 + 30;
    if (v1086 >= 0)
      v1090 = (std::string *)v7;
    else
      v1090 = *(std::string **)v7;
    v1091 = (char *)&v1341 + v1087;
    if (v1090 < &v1341)
      goto LABEL_2942;
  }
  if (v1091 > (char *)v1090)
    goto LABEL_3598;
LABEL_2942:
  if (v1087)
    memmove(v1089, v1090, v1087);
  if (v1091 <= "RetransmittedBitrateSentInKbps" && v1091 + 30 > "RetransmittedBitrateSentInKbps")
    goto LABEL_3598;
  strcpy(v1091, "RetransmittedBitrateSentInKbps");
  if ((SHIBYTE(v1341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_2951;
  if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v1341.__r_.__value_.__l.__size_ && !v1341.__r_.__value_.__r.__words[0])
  {
    goto LABEL_3598;
  }
  operator delete(v1341.__r_.__value_.__l.__data_);
LABEL_2951:
  while (!__ldaxr(&qword_253EA5A38))
  {
    if (!__stlxr(0, &qword_253EA5A38))
      goto LABEL_2972;
  }
LABEL_2974:
  __clrex();
  LODWORD(v1092) = v7[23];
  if ((v1092 & 0x80000000) == 0)
  {
LABEL_2973:
    v1092 = v1092;
    v1105 = v7;
    goto LABEL_2978;
  }
LABEL_2975:
  v1092 = *((_QWORD *)v7 + 1);
  if ((v1092 & 0x8000000000000000) != 0)
    goto LABEL_3598;
  v1105 = *(const void **)v7;
  if (v1092)
  {
    if (!v1105)
      goto LABEL_3598;
  }
LABEL_2978:
  if (v1092 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1106 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1106 = v1092;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1105, v1106);
  *((_QWORD *)&v1350 + 1) += v1106;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x1EuLL)
    v1107 = 30;
  else
    v1107 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "RetransmittedBitrateSentInBps ", v1107);
  *((_QWORD *)&v1350 + 1) += v1107;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&v1342, 8, &v1341);
  if (SHIBYTE(v1341.__r_.__value_.__r.__words[2]) < 0)
  {
    v1108 = v1341.__r_.__value_.__l.__size_;
    if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v1109 = (std::string *)v1341.__r_.__value_.__r.__words[0];
    if (v1341.__r_.__value_.__l.__size_)
    {
      if (!v1341.__r_.__value_.__r.__words[0])
        goto LABEL_3598;
    }
  }
  else
  {
    v1108 = HIBYTE(v1341.__r_.__value_.__r.__words[2]);
    v1109 = &v1341;
  }
  if (v1108 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1110 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1110 = v1108;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1109, v1110);
  *((_QWORD *)&v1350 + 1) += v1110;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  v1111 = v1350;
  v1112 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v1113 = *((_QWORD *)&v1350 + 1);
  if (v1111 != v1112)
    v1113 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v1113;
  v1349[v1113] = 0;
  if (SHIBYTE(v1341.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v1341.__r_.__value_.__l.__data_);
    if (*(_QWORD *)(v1339 + 200) == *(_QWORD *)(v1339 + 208))
      goto LABEL_3096;
LABEL_2996:
    v1114 = *((_QWORD *)v7 + 85);
    v1117 = *(_QWORD *)(v1114 + 16);
    v1115 = (std::string *)(v1114 + 16);
    v1116 = v1117;
    if (v1117)
    {
      if (v1116 >= 0)
        v1118 = v1116;
      else
        v1118 = v1116 + 1;
      *(_DWORD *)(*((_QWORD *)v7 + 85) + 32) = (*(_QWORD *)(*((_QWORD *)v7 + 85) + 8) + (v1118 >> 1)) / v1116;
    }
    v1341 = *v1115;
    if ((uint64_t)v1341.__r_.__value_.__l.__data_ < 7)
    {
      if ((uint64_t)v1345.__r_.__value_.__l.__data_ <= 6)
        goto LABEL_3096;
      v1119 = 0;
    }
    else
    {
      v1119 = v1341.__r_.__value_.__r.__words[2];
      if (v7[23] < 0)
      {
        v1120 = *((_QWORD *)v7 + 1);
        if ((v1120 & 0x8000000000000000) != 0)
          goto LABEL_3598;
        v1121 = *(const void **)v7;
        if (v1120)
        {
          if (!v1121)
            goto LABEL_3598;
        }
      }
      else
      {
        v1120 = v7[23];
        v1121 = v7;
      }
      if (v1120 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
        v1122 = v1350 + ~*((_QWORD *)&v1350 + 1);
      else
        v1122 = v1120;
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1121, v1122);
      *((_QWORD *)&v1350 + 1) += v1122;
      v1349[*((_QWORD *)&v1350 + 1)] = 0;
      if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x14uLL)
        v1123 = 20;
      else
        v1123 = v1350 + ~*((_QWORD *)&v1350 + 1);
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "RtxBitrateSentInBps ", v1123);
      *((_QWORD *)&v1350 + 1) += v1123;
      v1349[*((_QWORD *)&v1350 + 1)] = 0;
      webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&v1341, 8, &v1340);
      if (SHIBYTE(v1340.__r_.__value_.__r.__words[2]) < 0)
      {
        v1124 = v1340.__r_.__value_.__l.__size_;
        if ((v1340.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_3598;
        v1125 = (std::string *)v1340.__r_.__value_.__r.__words[0];
        if (v1340.__r_.__value_.__l.__size_)
        {
          if (!v1340.__r_.__value_.__r.__words[0])
            goto LABEL_3598;
        }
      }
      else
      {
        v1124 = HIBYTE(v1340.__r_.__value_.__r.__words[2]);
        v1125 = &v1340;
      }
      if (v1124 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
        v1126 = v1350 + ~*((_QWORD *)&v1350 + 1);
      else
        v1126 = v1124;
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1125, v1126);
      *((_QWORD *)&v1350 + 1) += v1126;
      v1349[*((_QWORD *)&v1350 + 1)] = 0;
      v1127 = v1350;
      v1128 = *((_QWORD *)&v1350 + 1) + 1;
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
      v1129 = *((_QWORD *)&v1350 + 1);
      if (v1127 != v1128)
        v1129 = *((_QWORD *)&v1350 + 1) + 1;
      *((_QWORD *)&v1350 + 1) = v1129;
      v1349[v1129] = 0;
      if (SHIBYTE(v1340.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v1340.__r_.__value_.__l.__data_);
        if (v1119 == -1)
          goto LABEL_3096;
      }
      else if (v1119 == -1)
      {
        goto LABEL_3096;
      }
    }
    if (v18)
    {
      v1130 = atomic_load(&qword_253EA5A48);
      if (!v1130)
      {
        v1131 = v7[23];
        if (v1131 >= 0)
          v1132 = v7[23];
        else
          v1132 = *((_QWORD *)v7 + 1);
        v1133 = v1132 + 20;
        if (v1132 + 20 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_3599;
        if (v1133 > 0x16)
        {
          v1144 = (v1133 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1133 | 7) != 0x17)
            v1144 = v1133 | 7;
          v1145 = v1144 + 1;
          v1134 = (std::string *)operator new(v1144 + 1);
          v1340.__r_.__value_.__l.__size_ = v1132 + 20;
          v1340.__r_.__value_.__r.__words[2] = v1145 | 0x8000000000000000;
          v1340.__r_.__value_.__r.__words[0] = (std::string::size_type)v1134;
          if (v1131 >= 0)
            v1135 = (std::string *)v7;
          else
            v1135 = *(std::string **)v7;
          v1136 = (char *)v1134 + v1132;
          if (v1135 < v1134)
          {
LABEL_3066:
            if (v1132)
              memmove(v1134, v1135, v1132);
            if (v1136 <= "RtxBitrateSentInKbps" && v1136 + 20 > "RtxBitrateSentInKbps")
              goto LABEL_3598;
            strcpy(v1136, "RtxBitrateSentInKbps");
            if ((SHIBYTE(v1340.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_3075;
            if ((v1340.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
              || v1340.__r_.__value_.__l.__size_ && !v1340.__r_.__value_.__r.__words[0])
            {
              goto LABEL_3598;
            }
            operator delete(v1340.__r_.__value_.__l.__data_);
LABEL_3075:
            while (!__ldaxr(&qword_253EA5A48))
            {
              if (!__stlxr(0, &qword_253EA5A48))
                goto LABEL_3096;
            }
            goto LABEL_3116;
          }
        }
        else
        {
          memset(&v1340, 0, sizeof(v1340));
          v1134 = &v1340;
          *((_BYTE *)&v1340.__r_.__value_.__s + 23) = v1132 + 20;
          if (v1131 >= 0)
            v1135 = (std::string *)v7;
          else
            v1135 = *(std::string **)v7;
          v1136 = (char *)&v1340 + v1132;
          if (v1135 < &v1340)
            goto LABEL_3066;
        }
        if (v1136 > (char *)v1135)
          goto LABEL_3598;
        goto LABEL_3066;
      }
LABEL_3044:
      webrtc::metrics::HistogramAdd(v1130, v1119 / 125);
      if (*(_DWORD *)(v1339 + 168) != -1 || *(_DWORD *)(v1339 + 160) != -1)
        goto LABEL_3100;
      goto LABEL_3199;
    }
    v1130 = atomic_load(&qword_253EA5A40);
    if (v1130)
      goto LABEL_3044;
    v1138 = v7[23];
    if (v1138 >= 0)
      v1139 = v7[23];
    else
      v1139 = *((_QWORD *)v7 + 1);
    v1140 = v1139 + 20;
    if (v1139 + 20 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v1140 > 0x16)
    {
      v1147 = (v1140 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1140 | 7) != 0x17)
        v1147 = v1140 | 7;
      v1148 = v1147 + 1;
      v1141 = (std::string *)operator new(v1147 + 1);
      v1340.__r_.__value_.__l.__size_ = v1139 + 20;
      v1340.__r_.__value_.__r.__words[2] = v1148 | 0x8000000000000000;
      v1340.__r_.__value_.__r.__words[0] = (std::string::size_type)v1141;
      if (v1138 >= 0)
        v1142 = (std::string *)v7;
      else
        v1142 = *(std::string **)v7;
      v1143 = (char *)v1141 + v1139;
      if (v1142 < v1141)
      {
LABEL_3085:
        if (v1139)
          memmove(v1141, v1142, v1139);
        if (v1143 <= "RtxBitrateSentInKbps" && v1143 + 20 > "RtxBitrateSentInKbps")
          goto LABEL_3598;
        strcpy(v1143, "RtxBitrateSentInKbps");
        if ((SHIBYTE(v1340.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_3094;
        if ((v1340.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
          || v1340.__r_.__value_.__l.__size_ && !v1340.__r_.__value_.__r.__words[0])
        {
          goto LABEL_3598;
        }
        operator delete(v1340.__r_.__value_.__l.__data_);
LABEL_3094:
        while (!__ldaxr(&qword_253EA5A40))
        {
          if (!__stlxr(0, &qword_253EA5A40))
            goto LABEL_3096;
        }
LABEL_3116:
        __clrex();
        if (*(_DWORD *)(v1339 + 168) != -1 || *(_DWORD *)(v1339 + 160) != -1)
          goto LABEL_3100;
        goto LABEL_3199;
      }
    }
    else
    {
      memset(&v1340, 0, sizeof(v1340));
      v1141 = &v1340;
      *((_BYTE *)&v1340.__r_.__value_.__s + 23) = v1139 + 20;
      if (v1138 >= 0)
        v1142 = (std::string *)v7;
      else
        v1142 = *(std::string **)v7;
      v1143 = (char *)&v1340 + v1139;
      if (v1142 < &v1340)
        goto LABEL_3085;
    }
    if (v1143 > (char *)v1142)
      goto LABEL_3598;
    goto LABEL_3085;
  }
LABEL_2995:
  if (*(_QWORD *)(v1339 + 200) != *(_QWORD *)(v1339 + 208))
    goto LABEL_2996;
LABEL_3096:
  if (*(_DWORD *)(v1339 + 168) != -1 || *(_DWORD *)(v1339 + 160) != -1)
  {
LABEL_3100:
    v1151 = *((_QWORD *)v7 + 118);
    v1154 = *(_QWORD *)(v1151 + 16);
    v1152 = (std::string *)(v1151 + 16);
    v1153 = v1154;
    if (v1154)
    {
      if (v1153 >= 0)
        v1155 = v1153;
      else
        v1155 = v1153 + 1;
      *(_DWORD *)(*((_QWORD *)v7 + 118) + 32) = (*(_QWORD *)(*((_QWORD *)v7 + 118) + 8) + (v1155 >> 1)) / v1153;
    }
    v1341 = *v1152;
    if ((uint64_t)v1341.__r_.__value_.__l.__data_ >= 7)
    {
      if (v18)
      {
        v1156 = atomic_load(&qword_253EA5A58);
        if (!v1156)
        {
          v1157 = v7[23];
          if (v1157 >= 0)
            v1158 = v7[23];
          else
            v1158 = *((_QWORD *)v7 + 1);
          v1159 = v1158 + 20;
          if (v1158 + 20 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_3599;
          if (v1159 > 0x16)
          {
            v1166 = (v1159 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v1159 | 7) != 0x17)
              v1166 = v1159 | 7;
            v1167 = v1166 + 1;
            v1160 = (std::string *)operator new(v1166 + 1);
            v1340.__r_.__value_.__l.__size_ = v1158 + 20;
            v1340.__r_.__value_.__r.__words[2] = v1167 | 0x8000000000000000;
            v1340.__r_.__value_.__r.__words[0] = (std::string::size_type)v1160;
          }
          else
          {
            memset(&v1340, 0, sizeof(v1340));
            v1160 = &v1340;
            *((_BYTE *)&v1340.__r_.__value_.__s + 23) = v1158 + 20;
          }
          if (v1157 >= 0)
            v1168 = (std::string *)v7;
          else
            v1168 = *(std::string **)v7;
          v1169 = (char *)v1160 + v1158;
          if (v1168 >= v1160 && v1169 > (char *)v1168)
            goto LABEL_3598;
          if (v1158)
            memmove(v1160, v1168, v1158);
          if (v1169 <= "FecBitrateSentInKbps" && v1169 + 20 > "FecBitrateSentInKbps")
            goto LABEL_3598;
          strcpy(v1169, "FecBitrateSentInKbps");
          if ((SHIBYTE(v1340.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_3148;
          if ((v1340.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
            || v1340.__r_.__value_.__l.__size_ && !v1340.__r_.__value_.__r.__words[0])
          {
            goto LABEL_3598;
          }
          operator delete(v1340.__r_.__value_.__l.__data_);
LABEL_3148:
          while (!__ldaxr(&qword_253EA5A58))
          {
            if (!__stlxr(0, &qword_253EA5A58))
              goto LABEL_3176;
          }
          goto LABEL_3175;
        }
LABEL_3115:
        webrtc::metrics::HistogramAdd(v1156, SLODWORD(v1341.__r_.__value_.__r.__words[2]) / 125);
      }
      else
      {
        v1156 = atomic_load(&qword_253EA5A50);
        if (v1156)
          goto LABEL_3115;
        v1162 = v7[23];
        if (v1162 >= 0)
          v1163 = v7[23];
        else
          v1163 = *((_QWORD *)v7 + 1);
        v1164 = v1163 + 20;
        if (v1163 + 20 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_3599;
        if (v1164 > 0x16)
        {
          v1173 = (v1164 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1164 | 7) != 0x17)
            v1173 = v1164 | 7;
          v1174 = v1173 + 1;
          v1165 = (std::string *)operator new(v1173 + 1);
          v1340.__r_.__value_.__l.__size_ = v1163 + 20;
          v1340.__r_.__value_.__r.__words[2] = v1174 | 0x8000000000000000;
          v1340.__r_.__value_.__r.__words[0] = (std::string::size_type)v1165;
        }
        else
        {
          memset(&v1340, 0, sizeof(v1340));
          v1165 = &v1340;
          *((_BYTE *)&v1340.__r_.__value_.__s + 23) = v1163 + 20;
        }
        if (v1162 >= 0)
          v1175 = (std::string *)v7;
        else
          v1175 = *(std::string **)v7;
        v1176 = (char *)v1165 + v1163;
        if (v1175 >= v1165 && v1176 > (char *)v1175)
          goto LABEL_3598;
        if (v1163)
          memmove(v1165, v1175, v1163);
        if (v1176 <= "FecBitrateSentInKbps" && v1176 + 20 > "FecBitrateSentInKbps")
          goto LABEL_3598;
        strcpy(v1176, "FecBitrateSentInKbps");
        if ((SHIBYTE(v1340.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_3172;
        if ((v1340.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
          || v1340.__r_.__value_.__l.__size_ && !v1340.__r_.__value_.__r.__words[0])
        {
          goto LABEL_3598;
        }
        operator delete(v1340.__r_.__value_.__l.__data_);
LABEL_3172:
        while (!__ldaxr(&qword_253EA5A50))
        {
          if (!__stlxr(0, &qword_253EA5A50))
            goto LABEL_3176;
        }
LABEL_3175:
        __clrex();
      }
LABEL_3176:
      if (v7[23] < 0)
      {
        v1180 = *((_QWORD *)v7 + 1);
        if ((v1180 & 0x8000000000000000) != 0)
          goto LABEL_3598;
        v1181 = *(const void **)v7;
        if (v1180)
        {
          if (!v1181)
            goto LABEL_3598;
        }
      }
      else
      {
        v1180 = v7[23];
        v1181 = v7;
      }
      if (v1180 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
        v1182 = v1350 + ~*((_QWORD *)&v1350 + 1);
      else
        v1182 = v1180;
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1181, v1182);
      *((_QWORD *)&v1350 + 1) += v1182;
      v1349[*((_QWORD *)&v1350 + 1)] = 0;
      if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x14uLL)
        v1183 = 20;
      else
        v1183 = v1350 + ~*((_QWORD *)&v1350 + 1);
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "FecBitrateSentInBps ", v1183);
      *((_QWORD *)&v1350 + 1) += v1183;
      v1349[*((_QWORD *)&v1350 + 1)] = 0;
      webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&v1341, 8, &v1340);
      if (SHIBYTE(v1340.__r_.__value_.__r.__words[2]) < 0)
      {
        v1184 = v1340.__r_.__value_.__l.__size_;
        if ((v1340.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_3598;
        v1185 = (std::string *)v1340.__r_.__value_.__r.__words[0];
        if (v1340.__r_.__value_.__l.__size_)
        {
          if (!v1340.__r_.__value_.__r.__words[0])
            goto LABEL_3598;
        }
      }
      else
      {
        v1184 = HIBYTE(v1340.__r_.__value_.__r.__words[2]);
        v1185 = &v1340;
      }
      if (v1184 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
        v1186 = v1350 + ~*((_QWORD *)&v1350 + 1);
      else
        v1186 = v1184;
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1185, v1186);
      *((_QWORD *)&v1350 + 1) += v1186;
      v1349[*((_QWORD *)&v1350 + 1)] = 0;
      v1187 = v1350;
      v1188 = *((_QWORD *)&v1350 + 1) + 1;
      memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
      v1189 = *((_QWORD *)&v1350 + 1);
      if (v1187 != v1188)
        v1189 = *((_QWORD *)&v1350 + 1) + 1;
      *((_QWORD *)&v1350 + 1) = v1189;
      v1349[v1189] = 0;
      if (SHIBYTE(v1340.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v1340.__r_.__value_.__l.__data_);
    }
  }
LABEL_3199:
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0xFuLL)
    v1190 = 15;
  else
    v1190 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "Frames encoded ", v1190);
  *((_QWORD *)&v1350 + 1) += v1190;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%u", *(_DWORD *)(v1338 + 52));
  v1191 = v1350;
  v1192 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v1193 = *((_QWORD *)&v1350 + 1);
  if (v1191 != v1192)
    v1193 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v1193;
  v1349[v1193] = 0;
  if (v7[23] < 0)
  {
    v1194 = *((_QWORD *)v7 + 1);
    if ((v1194 & 0x8000000000000000) != 0)
      goto LABEL_3598;
    v1195 = *(const void **)v7;
    if (v1194)
    {
      if (!v1195)
        goto LABEL_3598;
    }
  }
  else
  {
    v1194 = v7[23];
    v1195 = v7;
  }
  if (v1194 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1196 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1196 = v1194;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1195, v1196);
  *((_QWORD *)&v1350 + 1) += v1196;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x17uLL)
    v1197 = 23;
  else
    v1197 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "DroppedFrames.Capturer ", v1197);
  *((_QWORD *)&v1350 + 1) += v1197;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%u", *(_DWORD *)(v1338 + 76));
  v1198 = v1350;
  v1199 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v1200 = *((_QWORD *)&v1350 + 1);
  if (v1198 != v1199)
    v1200 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v1200;
  v1349[v1200] = 0;
  if (!v18)
  {
    v1201 = atomic_load(&qword_253EA5A60);
    if (v1201)
    {
LABEL_3230:
      webrtc::metrics::HistogramAdd(v1201, *(_DWORD *)(v1338 + 76));
      LODWORD(v1208) = v7[23];
      if ((v1208 & 0x80000000) != 0)
        goto LABEL_3282;
      goto LABEL_3280;
    }
    v1209 = v7[23];
    if (v1209 >= 0)
      v1210 = v7[23];
    else
      v1210 = *((_QWORD *)v7 + 1);
    v1211 = v1210 + 22;
    if (v1210 + 22 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v1211 > 0x16)
    {
      v1218 = (v1211 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1211 | 7) != 0x17)
        v1218 = v1211 | 7;
      v1219 = v1218 + 1;
      v1212 = (std::string *)operator new(v1218 + 1);
      v1341.__r_.__value_.__l.__size_ = v1210 + 22;
      v1341.__r_.__value_.__r.__words[2] = v1219 | 0x8000000000000000;
      v1341.__r_.__value_.__r.__words[0] = (std::string::size_type)v1212;
      if (v1209 >= 0)
        v1213 = (std::string *)v7;
      else
        v1213 = *(std::string **)v7;
      v1214 = (char *)v1212 + v1210;
      if (v1213 < v1212)
        goto LABEL_3268;
    }
    else
    {
      memset(&v1341, 0, sizeof(v1341));
      v1212 = &v1341;
      *((_BYTE *)&v1341.__r_.__value_.__s + 23) = v1210 + 22;
      if (v1209 >= 0)
        v1213 = (std::string *)v7;
      else
        v1213 = *(std::string **)v7;
      v1214 = (char *)&v1341 + v1210;
      if (v1213 < &v1341)
        goto LABEL_3268;
    }
    if (v1214 > (char *)v1213)
      goto LABEL_3598;
LABEL_3268:
    if (v1210)
      memmove(v1212, v1213, v1210);
    if (v1214 <= "DroppedFrames.Capturer" && v1214 + 22 > "DroppedFrames.Capturer")
      goto LABEL_3598;
    strcpy(v1214, "DroppedFrames.Capturer");
    if ((SHIBYTE(v1341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3277;
    if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || v1341.__r_.__value_.__l.__size_ && !v1341.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(v1341.__r_.__value_.__l.__data_);
    do
    {
LABEL_3277:
      if (__ldaxr(&qword_253EA5A60))
        goto LABEL_3281;
    }
    while (__stlxr(0, &qword_253EA5A60));
LABEL_3279:
    LODWORD(v1208) = v7[23];
    if ((v1208 & 0x80000000) != 0)
      goto LABEL_3282;
    goto LABEL_3280;
  }
  v1201 = atomic_load(&qword_253EA5A68);
  if (v1201)
    goto LABEL_3230;
  v1202 = v7[23];
  if (v1202 >= 0)
    v1203 = v7[23];
  else
    v1203 = *((_QWORD *)v7 + 1);
  v1204 = v1203 + 22;
  if (v1203 + 22 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v1204 > 0x16)
  {
    v1215 = (v1204 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1204 | 7) != 0x17)
      v1215 = v1204 | 7;
    v1216 = v1215 + 1;
    v1205 = (std::string *)operator new(v1215 + 1);
    v1341.__r_.__value_.__l.__size_ = v1203 + 22;
    v1341.__r_.__value_.__r.__words[2] = v1216 | 0x8000000000000000;
    v1341.__r_.__value_.__r.__words[0] = (std::string::size_type)v1205;
    if (v1202 >= 0)
      v1206 = (std::string *)v7;
    else
      v1206 = *(std::string **)v7;
    v1207 = (char *)v1205 + v1203;
    if (v1206 < v1205)
      goto LABEL_3249;
  }
  else
  {
    memset(&v1341, 0, sizeof(v1341));
    v1205 = &v1341;
    *((_BYTE *)&v1341.__r_.__value_.__s + 23) = v1203 + 22;
    if (v1202 >= 0)
      v1206 = (std::string *)v7;
    else
      v1206 = *(std::string **)v7;
    v1207 = (char *)&v1341 + v1203;
    if (v1206 < &v1341)
      goto LABEL_3249;
  }
  if (v1207 > (char *)v1206)
    goto LABEL_3598;
LABEL_3249:
  if (v1203)
    memmove(v1205, v1206, v1203);
  if (v1207 <= "DroppedFrames.Capturer" && v1207 + 22 > "DroppedFrames.Capturer")
    goto LABEL_3598;
  strcpy(v1207, "DroppedFrames.Capturer");
  if ((SHIBYTE(v1341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_3258;
  if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v1341.__r_.__value_.__l.__size_ && !v1341.__r_.__value_.__r.__words[0])
  {
    goto LABEL_3598;
  }
  operator delete(v1341.__r_.__value_.__l.__data_);
LABEL_3258:
  while (!__ldaxr(&qword_253EA5A68))
  {
    if (!__stlxr(0, &qword_253EA5A68))
      goto LABEL_3279;
  }
LABEL_3281:
  __clrex();
  LODWORD(v1208) = v7[23];
  if ((v1208 & 0x80000000) == 0)
  {
LABEL_3280:
    v1208 = v1208;
    v1221 = v7;
    goto LABEL_3285;
  }
LABEL_3282:
  v1208 = *((_QWORD *)v7 + 1);
  if ((v1208 & 0x8000000000000000) != 0)
    goto LABEL_3598;
  v1221 = *(const void **)v7;
  if (v1208)
  {
    if (!v1221)
      goto LABEL_3598;
  }
LABEL_3285:
  if (v1208 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1222 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1222 = v1208;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1221, v1222);
  *((_QWORD *)&v1350 + 1) += v1222;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x1AuLL)
    v1223 = 26;
  else
    v1223 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "DroppedFrames.BadTimestamp", v1223);
  *((_QWORD *)&v1350 + 1) += v1223;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%u", *(_DWORD *)(v1338 + 80));
  v1224 = v1350;
  v1225 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v1226 = *((_QWORD *)&v1350 + 1);
  if (v1224 != v1225)
    v1226 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v1226;
  v1349[v1226] = 0;
  if (!v18)
  {
    v1227 = atomic_load(&qword_253EA5A70);
    if (v1227)
    {
LABEL_3306:
      webrtc::metrics::HistogramAdd(v1227, *(_DWORD *)(v1338 + 80));
      LODWORD(v1234) = v7[23];
      if ((v1234 & 0x80000000) != 0)
        goto LABEL_3358;
      goto LABEL_3356;
    }
    v1235 = v7[23];
    if (v1235 >= 0)
      v1236 = v7[23];
    else
      v1236 = *((_QWORD *)v7 + 1);
    v1237 = v1236 + 26;
    if (v1236 + 26 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v1237 > 0x16)
    {
      v1244 = (v1237 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1237 | 7) != 0x17)
        v1244 = v1237 | 7;
      v1245 = v1244 + 1;
      v1238 = (std::string *)operator new(v1244 + 1);
      v1341.__r_.__value_.__l.__size_ = v1236 + 26;
      v1341.__r_.__value_.__r.__words[2] = v1245 | 0x8000000000000000;
      v1341.__r_.__value_.__r.__words[0] = (std::string::size_type)v1238;
      if (v1235 >= 0)
        v1239 = (std::string *)v7;
      else
        v1239 = *(std::string **)v7;
      v1240 = (char *)v1238 + v1236;
      if (v1239 < v1238)
        goto LABEL_3344;
    }
    else
    {
      memset(&v1341, 0, sizeof(v1341));
      v1238 = &v1341;
      *((_BYTE *)&v1341.__r_.__value_.__s + 23) = v1236 + 26;
      if (v1235 >= 0)
        v1239 = (std::string *)v7;
      else
        v1239 = *(std::string **)v7;
      v1240 = (char *)&v1341 + v1236;
      if (v1239 < &v1341)
        goto LABEL_3344;
    }
    if (v1240 > (char *)v1239)
      goto LABEL_3598;
LABEL_3344:
    if (v1236)
      memmove(v1238, v1239, v1236);
    if (v1240 <= "DroppedFrames.BadTimestamp" && v1240 + 26 > "DroppedFrames.BadTimestamp")
      goto LABEL_3598;
    strcpy(v1240, "DroppedFrames.BadTimestamp");
    if ((SHIBYTE(v1341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3353;
    if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || v1341.__r_.__value_.__l.__size_ && !v1341.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(v1341.__r_.__value_.__l.__data_);
    do
    {
LABEL_3353:
      if (__ldaxr(&qword_253EA5A70))
        goto LABEL_3357;
    }
    while (__stlxr(0, &qword_253EA5A70));
LABEL_3355:
    LODWORD(v1234) = v7[23];
    if ((v1234 & 0x80000000) != 0)
      goto LABEL_3358;
    goto LABEL_3356;
  }
  v1227 = atomic_load(&qword_253EA5A78);
  if (v1227)
    goto LABEL_3306;
  v1228 = v7[23];
  if (v1228 >= 0)
    v1229 = v7[23];
  else
    v1229 = *((_QWORD *)v7 + 1);
  v1230 = v1229 + 26;
  if (v1229 + 26 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v1230 > 0x16)
  {
    v1241 = (v1230 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1230 | 7) != 0x17)
      v1241 = v1230 | 7;
    v1242 = v1241 + 1;
    v1231 = (std::string *)operator new(v1241 + 1);
    v1341.__r_.__value_.__l.__size_ = v1229 + 26;
    v1341.__r_.__value_.__r.__words[2] = v1242 | 0x8000000000000000;
    v1341.__r_.__value_.__r.__words[0] = (std::string::size_type)v1231;
    if (v1228 >= 0)
      v1232 = (std::string *)v7;
    else
      v1232 = *(std::string **)v7;
    v1233 = (char *)v1231 + v1229;
    if (v1232 < v1231)
      goto LABEL_3325;
  }
  else
  {
    memset(&v1341, 0, sizeof(v1341));
    v1231 = &v1341;
    *((_BYTE *)&v1341.__r_.__value_.__s + 23) = v1229 + 26;
    if (v1228 >= 0)
      v1232 = (std::string *)v7;
    else
      v1232 = *(std::string **)v7;
    v1233 = (char *)&v1341 + v1229;
    if (v1232 < &v1341)
      goto LABEL_3325;
  }
  if (v1233 > (char *)v1232)
    goto LABEL_3598;
LABEL_3325:
  if (v1229)
    memmove(v1231, v1232, v1229);
  if (v1233 <= "DroppedFrames.BadTimestamp" && v1233 + 26 > "DroppedFrames.BadTimestamp")
    goto LABEL_3598;
  strcpy(v1233, "DroppedFrames.BadTimestamp");
  if ((SHIBYTE(v1341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_3334;
  if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v1341.__r_.__value_.__l.__size_ && !v1341.__r_.__value_.__r.__words[0])
  {
    goto LABEL_3598;
  }
  operator delete(v1341.__r_.__value_.__l.__data_);
LABEL_3334:
  while (!__ldaxr(&qword_253EA5A78))
  {
    if (!__stlxr(0, &qword_253EA5A78))
      goto LABEL_3355;
  }
LABEL_3357:
  __clrex();
  LODWORD(v1234) = v7[23];
  if ((v1234 & 0x80000000) == 0)
  {
LABEL_3356:
    v1234 = v1234;
    v1247 = v7;
    goto LABEL_3361;
  }
LABEL_3358:
  v1234 = *((_QWORD *)v7 + 1);
  if ((v1234 & 0x8000000000000000) != 0)
    goto LABEL_3598;
  v1247 = *(const void **)v7;
  if (v1234)
  {
    if (!v1247)
      goto LABEL_3598;
  }
LABEL_3361:
  if (v1234 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1248 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1248 = v1234;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1247, v1248);
  *((_QWORD *)&v1350 + 1) += v1248;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x1BuLL)
    v1249 = 27;
  else
    v1249 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "DroppedFrames.EncoderQueue ", v1249);
  *((_QWORD *)&v1350 + 1) += v1249;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%u", *(_DWORD *)(v1338 + 84));
  v1250 = v1350;
  v1251 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v1252 = *((_QWORD *)&v1350 + 1);
  if (v1250 != v1251)
    v1252 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v1252;
  v1349[v1252] = 0;
  if (!v18)
  {
    v1253 = atomic_load(&qword_253EA5A80);
    if (v1253)
    {
LABEL_3382:
      webrtc::metrics::HistogramAdd(v1253, *(_DWORD *)(v1338 + 84));
      LODWORD(v1260) = v7[23];
      if ((v1260 & 0x80000000) != 0)
        goto LABEL_3434;
      goto LABEL_3432;
    }
    v1261 = v7[23];
    if (v1261 >= 0)
      v1262 = v7[23];
    else
      v1262 = *((_QWORD *)v7 + 1);
    v1263 = v1262 + 26;
    if (v1262 + 26 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v1263 > 0x16)
    {
      v1270 = (v1263 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1263 | 7) != 0x17)
        v1270 = v1263 | 7;
      v1271 = v1270 + 1;
      v1264 = (std::string *)operator new(v1270 + 1);
      v1341.__r_.__value_.__l.__size_ = v1262 + 26;
      v1341.__r_.__value_.__r.__words[2] = v1271 | 0x8000000000000000;
      v1341.__r_.__value_.__r.__words[0] = (std::string::size_type)v1264;
      if (v1261 >= 0)
        v1265 = (std::string *)v7;
      else
        v1265 = *(std::string **)v7;
      v1266 = (char *)v1264 + v1262;
      if (v1265 < v1264)
        goto LABEL_3420;
    }
    else
    {
      memset(&v1341, 0, sizeof(v1341));
      v1264 = &v1341;
      *((_BYTE *)&v1341.__r_.__value_.__s + 23) = v1262 + 26;
      if (v1261 >= 0)
        v1265 = (std::string *)v7;
      else
        v1265 = *(std::string **)v7;
      v1266 = (char *)&v1341 + v1262;
      if (v1265 < &v1341)
        goto LABEL_3420;
    }
    if (v1266 > (char *)v1265)
      goto LABEL_3598;
LABEL_3420:
    if (v1262)
      memmove(v1264, v1265, v1262);
    if (v1266 <= "DroppedFrames.EncoderQueue" && v1266 + 26 > "DroppedFrames.EncoderQueue")
      goto LABEL_3598;
    strcpy(v1266, "DroppedFrames.EncoderQueue");
    if ((SHIBYTE(v1341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3429;
    if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || v1341.__r_.__value_.__l.__size_ && !v1341.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(v1341.__r_.__value_.__l.__data_);
    do
    {
LABEL_3429:
      if (__ldaxr(&qword_253EA5A80))
        goto LABEL_3433;
    }
    while (__stlxr(0, &qword_253EA5A80));
LABEL_3431:
    LODWORD(v1260) = v7[23];
    if ((v1260 & 0x80000000) != 0)
      goto LABEL_3434;
    goto LABEL_3432;
  }
  v1253 = atomic_load(&qword_253EA5A88);
  if (v1253)
    goto LABEL_3382;
  v1254 = v7[23];
  if (v1254 >= 0)
    v1255 = v7[23];
  else
    v1255 = *((_QWORD *)v7 + 1);
  v1256 = v1255 + 26;
  if (v1255 + 26 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v1256 > 0x16)
  {
    v1267 = (v1256 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1256 | 7) != 0x17)
      v1267 = v1256 | 7;
    v1268 = v1267 + 1;
    v1257 = (std::string *)operator new(v1267 + 1);
    v1341.__r_.__value_.__l.__size_ = v1255 + 26;
    v1341.__r_.__value_.__r.__words[2] = v1268 | 0x8000000000000000;
    v1341.__r_.__value_.__r.__words[0] = (std::string::size_type)v1257;
    if (v1254 >= 0)
      v1258 = (std::string *)v7;
    else
      v1258 = *(std::string **)v7;
    v1259 = (char *)v1257 + v1255;
    if (v1258 < v1257)
      goto LABEL_3401;
  }
  else
  {
    memset(&v1341, 0, sizeof(v1341));
    v1257 = &v1341;
    *((_BYTE *)&v1341.__r_.__value_.__s + 23) = v1255 + 26;
    if (v1254 >= 0)
      v1258 = (std::string *)v7;
    else
      v1258 = *(std::string **)v7;
    v1259 = (char *)&v1341 + v1255;
    if (v1258 < &v1341)
      goto LABEL_3401;
  }
  if (v1259 > (char *)v1258)
    goto LABEL_3598;
LABEL_3401:
  if (v1255)
    memmove(v1257, v1258, v1255);
  if (v1259 <= "DroppedFrames.EncoderQueue" && v1259 + 26 > "DroppedFrames.EncoderQueue")
    goto LABEL_3598;
  strcpy(v1259, "DroppedFrames.EncoderQueue");
  if ((SHIBYTE(v1341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_3410;
  if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v1341.__r_.__value_.__l.__size_ && !v1341.__r_.__value_.__r.__words[0])
  {
    goto LABEL_3598;
  }
  operator delete(v1341.__r_.__value_.__l.__data_);
LABEL_3410:
  while (!__ldaxr(&qword_253EA5A88))
  {
    if (!__stlxr(0, &qword_253EA5A88))
      goto LABEL_3431;
  }
LABEL_3433:
  __clrex();
  LODWORD(v1260) = v7[23];
  if ((v1260 & 0x80000000) == 0)
  {
LABEL_3432:
    v1260 = v1260;
    v1273 = v7;
    goto LABEL_3437;
  }
LABEL_3434:
  v1260 = *((_QWORD *)v7 + 1);
  if ((v1260 & 0x8000000000000000) != 0)
    goto LABEL_3598;
  v1273 = *(const void **)v7;
  if (v1260)
  {
    if (!v1273)
      goto LABEL_3598;
  }
LABEL_3437:
  if (v1260 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1274 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1274 = v1260;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1273, v1274);
  *((_QWORD *)&v1350 + 1) += v1274;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x16uLL)
    v1275 = 22;
  else
    v1275 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "DroppedFrames.Encoder ", v1275);
  *((_QWORD *)&v1350 + 1) += v1275;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%u", *(_DWORD *)(v1338 + 96));
  v1276 = v1350;
  v1277 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v1278 = *((_QWORD *)&v1350 + 1);
  if (v1276 != v1277)
    v1278 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v1278;
  v1349[v1278] = 0;
  if (!v18)
  {
    v1279 = atomic_load(&qword_253EA5A90);
    if (v1279)
    {
LABEL_3458:
      webrtc::metrics::HistogramAdd(v1279, *(_DWORD *)(v1338 + 96));
      LODWORD(v1286) = v7[23];
      if ((v1286 & 0x80000000) != 0)
        goto LABEL_3510;
      goto LABEL_3508;
    }
    v1287 = v7[23];
    if (v1287 >= 0)
      v1288 = v7[23];
    else
      v1288 = *((_QWORD *)v7 + 1);
    v1289 = v1288 + 21;
    if (v1288 + 21 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v1289 > 0x16)
    {
      v1296 = (v1289 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1289 | 7) != 0x17)
        v1296 = v1289 | 7;
      v1297 = v1296 + 1;
      v1290 = (std::string *)operator new(v1296 + 1);
      v1341.__r_.__value_.__l.__size_ = v1288 + 21;
      v1341.__r_.__value_.__r.__words[2] = v1297 | 0x8000000000000000;
      v1341.__r_.__value_.__r.__words[0] = (std::string::size_type)v1290;
      if (v1287 >= 0)
        v1291 = (std::string *)v7;
      else
        v1291 = *(std::string **)v7;
      v1292 = (char *)v1290 + v1288;
      if (v1291 < v1290)
        goto LABEL_3496;
    }
    else
    {
      memset(&v1341, 0, sizeof(v1341));
      v1290 = &v1341;
      *((_BYTE *)&v1341.__r_.__value_.__s + 23) = v1288 + 21;
      if (v1287 >= 0)
        v1291 = (std::string *)v7;
      else
        v1291 = *(std::string **)v7;
      v1292 = (char *)&v1341 + v1288;
      if (v1291 < &v1341)
        goto LABEL_3496;
    }
    if (v1292 > (char *)v1291)
      goto LABEL_3598;
LABEL_3496:
    if (v1288)
      memmove(v1290, v1291, v1288);
    if (v1292 <= "DroppedFrames.Encoder" && v1292 + 21 > "DroppedFrames.Encoder")
      goto LABEL_3598;
    strcpy(v1292, "DroppedFrames.Encoder");
    if ((SHIBYTE(v1341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3505;
    if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || v1341.__r_.__value_.__l.__size_ && !v1341.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(v1341.__r_.__value_.__l.__data_);
    do
    {
LABEL_3505:
      if (__ldaxr(&qword_253EA5A90))
        goto LABEL_3509;
    }
    while (__stlxr(0, &qword_253EA5A90));
LABEL_3507:
    LODWORD(v1286) = v7[23];
    if ((v1286 & 0x80000000) != 0)
      goto LABEL_3510;
    goto LABEL_3508;
  }
  v1279 = atomic_load(&qword_253EA5A98);
  if (v1279)
    goto LABEL_3458;
  v1280 = v7[23];
  if (v1280 >= 0)
    v1281 = v7[23];
  else
    v1281 = *((_QWORD *)v7 + 1);
  v1282 = v1281 + 21;
  if (v1281 + 21 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v1282 > 0x16)
  {
    v1293 = (v1282 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1282 | 7) != 0x17)
      v1293 = v1282 | 7;
    v1294 = v1293 + 1;
    v1283 = (std::string *)operator new(v1293 + 1);
    v1341.__r_.__value_.__l.__size_ = v1281 + 21;
    v1341.__r_.__value_.__r.__words[2] = v1294 | 0x8000000000000000;
    v1341.__r_.__value_.__r.__words[0] = (std::string::size_type)v1283;
    if (v1280 >= 0)
      v1284 = (std::string *)v7;
    else
      v1284 = *(std::string **)v7;
    v1285 = (char *)v1283 + v1281;
    if (v1284 < v1283)
      goto LABEL_3477;
  }
  else
  {
    memset(&v1341, 0, sizeof(v1341));
    v1283 = &v1341;
    *((_BYTE *)&v1341.__r_.__value_.__s + 23) = v1281 + 21;
    if (v1280 >= 0)
      v1284 = (std::string *)v7;
    else
      v1284 = *(std::string **)v7;
    v1285 = (char *)&v1341 + v1281;
    if (v1284 < &v1341)
      goto LABEL_3477;
  }
  if (v1285 > (char *)v1284)
    goto LABEL_3598;
LABEL_3477:
  if (v1281)
    memmove(v1283, v1284, v1281);
  if (v1285 <= "DroppedFrames.Encoder" && v1285 + 21 > "DroppedFrames.Encoder")
    goto LABEL_3598;
  strcpy(v1285, "DroppedFrames.Encoder");
  if ((SHIBYTE(v1341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_3486;
  if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v1341.__r_.__value_.__l.__size_ && !v1341.__r_.__value_.__r.__words[0])
  {
    goto LABEL_3598;
  }
  operator delete(v1341.__r_.__value_.__l.__data_);
LABEL_3486:
  while (!__ldaxr(&qword_253EA5A98))
  {
    if (!__stlxr(0, &qword_253EA5A98))
      goto LABEL_3507;
  }
LABEL_3509:
  __clrex();
  LODWORD(v1286) = v7[23];
  if ((v1286 & 0x80000000) == 0)
  {
LABEL_3508:
    v1286 = v1286;
    v1299 = v7;
    goto LABEL_3513;
  }
LABEL_3510:
  v1286 = *((_QWORD *)v7 + 1);
  if ((v1286 & 0x8000000000000000) != 0)
    goto LABEL_3598;
  v1299 = *(const void **)v7;
  if (v1286)
  {
    if (!v1299)
      goto LABEL_3598;
  }
LABEL_3513:
  if (v1286 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1300 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1300 = v1286;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v1299, v1300);
  *((_QWORD *)&v1350 + 1) += v1300;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x1AuLL)
    v1301 = 26;
  else
    v1301 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "DroppedFrames.Ratelimiter ", v1301);
  *((_QWORD *)&v1350 + 1) += v1301;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%u", *(_DWORD *)(v1338 + 88));
  v1302 = v1350;
  v1303 = *((_QWORD *)&v1350 + 1) + 1;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "\n", v1350 != *((_QWORD *)&v1350 + 1) + 1);
  v1304 = *((_QWORD *)&v1350 + 1);
  if (v1302 != v1303)
    v1304 = *((_QWORD *)&v1350 + 1) + 1;
  *((_QWORD *)&v1350 + 1) = v1304;
  v1349[v1304] = 0;
  if (!v18)
  {
    v1305 = atomic_load(&qword_253EA5AA0);
    if (v1305)
    {
LABEL_3534:
      webrtc::metrics::HistogramAdd(v1305, *(_DWORD *)(v1338 + 88));
      LODWORD(v1312) = v7[23];
      if ((v1312 & 0x80000000) != 0)
        goto LABEL_3586;
      goto LABEL_3584;
    }
    v1313 = v7[23];
    if (v1313 >= 0)
      v1314 = v7[23];
    else
      v1314 = *((_QWORD *)v7 + 1);
    v1315 = v1314 + 25;
    if (v1314 + 25 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_3599;
    if (v1315 > 0x16)
    {
      v1322 = (v1315 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1315 | 7) != 0x17)
        v1322 = v1315 | 7;
      v1323 = v1322 + 1;
      v1316 = (std::string *)operator new(v1322 + 1);
      v1341.__r_.__value_.__l.__size_ = v1314 + 25;
      v1341.__r_.__value_.__r.__words[2] = v1323 | 0x8000000000000000;
      v1341.__r_.__value_.__r.__words[0] = (std::string::size_type)v1316;
      if (v1313 >= 0)
        v1317 = (std::string *)v7;
      else
        v1317 = *(std::string **)v7;
      v1318 = (char *)v1316 + v1314;
      if (v1317 < v1316)
        goto LABEL_3572;
    }
    else
    {
      memset(&v1341, 0, sizeof(v1341));
      v1316 = &v1341;
      *((_BYTE *)&v1341.__r_.__value_.__s + 23) = v1314 + 25;
      if (v1313 >= 0)
        v1317 = (std::string *)v7;
      else
        v1317 = *(std::string **)v7;
      v1318 = (char *)&v1341 + v1314;
      if (v1317 < &v1341)
        goto LABEL_3572;
    }
    if (v1318 > (char *)v1317)
      goto LABEL_3598;
LABEL_3572:
    if (v1314)
      memmove(v1316, v1317, v1314);
    if (v1318 <= "DroppedFrames.Ratelimiter" && v1318 + 25 > "DroppedFrames.Ratelimiter")
      goto LABEL_3598;
    strcpy(v1318, "DroppedFrames.Ratelimiter");
    if ((SHIBYTE(v1341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3581;
    if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || v1341.__r_.__value_.__l.__size_ && !v1341.__r_.__value_.__r.__words[0])
    {
      goto LABEL_3598;
    }
    operator delete(v1341.__r_.__value_.__l.__data_);
    do
    {
LABEL_3581:
      if (__ldaxr(&qword_253EA5AA0))
        goto LABEL_3585;
    }
    while (__stlxr(0, &qword_253EA5AA0));
LABEL_3583:
    LODWORD(v1312) = v7[23];
    if ((v1312 & 0x80000000) != 0)
      goto LABEL_3586;
    goto LABEL_3584;
  }
  v1305 = atomic_load(&qword_253EA5AA8);
  if (v1305)
    goto LABEL_3534;
  v1306 = v7[23];
  if (v1306 >= 0)
    v1307 = v7[23];
  else
    v1307 = *((_QWORD *)v7 + 1);
  v1308 = v1307 + 25;
  if (v1307 + 25 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_3599;
  if (v1308 > 0x16)
  {
    v1319 = (v1308 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1308 | 7) != 0x17)
      v1319 = v1308 | 7;
    v1320 = v1319 + 1;
    v1309 = (std::string *)operator new(v1319 + 1);
    v1341.__r_.__value_.__l.__size_ = v1307 + 25;
    v1341.__r_.__value_.__r.__words[2] = v1320 | 0x8000000000000000;
    v1341.__r_.__value_.__r.__words[0] = (std::string::size_type)v1309;
    if (v1306 >= 0)
      v1310 = (std::string *)v7;
    else
      v1310 = *(std::string **)v7;
    v1311 = (char *)v1309 + v1307;
    if (v1310 < v1309)
      goto LABEL_3553;
  }
  else
  {
    memset(&v1341, 0, sizeof(v1341));
    v1309 = &v1341;
    *((_BYTE *)&v1341.__r_.__value_.__s + 23) = v1307 + 25;
    if (v1306 >= 0)
      v1310 = (std::string *)v7;
    else
      v1310 = *(std::string **)v7;
    v1311 = (char *)&v1341 + v1307;
    if (v1310 < &v1341)
      goto LABEL_3553;
  }
  if (v1311 > (char *)v1310)
    goto LABEL_3598;
LABEL_3553:
  if (v1307)
    memmove(v1309, v1310, v1307);
  if (v1311 <= "DroppedFrames.Ratelimiter" && v1311 + 25 > "DroppedFrames.Ratelimiter")
    goto LABEL_3598;
  strcpy(v1311, "DroppedFrames.Ratelimiter");
  if ((SHIBYTE(v1341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_3562;
  if ((v1341.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v1341.__r_.__value_.__l.__size_ && !v1341.__r_.__value_.__r.__words[0])
  {
    goto LABEL_3598;
  }
  operator delete(v1341.__r_.__value_.__l.__data_);
LABEL_3562:
  while (!__ldaxr(&qword_253EA5AA8))
  {
    if (!__stlxr(0, &qword_253EA5AA8))
      goto LABEL_3583;
  }
LABEL_3585:
  __clrex();
  LODWORD(v1312) = v7[23];
  if ((v1312 & 0x80000000) == 0)
  {
LABEL_3584:
    v1312 = v1312;
    goto LABEL_3589;
  }
LABEL_3586:
  v1312 = *((_QWORD *)v7 + 1);
  if ((v1312 & 0x8000000000000000) != 0)
    goto LABEL_3598;
  v7 = *(char **)v7;
  if (v1312)
  {
    if (!v7)
      goto LABEL_3598;
  }
LABEL_3589:
  if (v1312 >= (_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1))
    v1325 = v1350 + ~*((_QWORD *)&v1350 + 1);
  else
    v1325 = v1312;
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], v7, v1325);
  *((_QWORD *)&v1350 + 1) += v1325;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  if ((_QWORD)v1350 + ~*((_QWORD *)&v1350 + 1) >= 0x1FuLL)
    v1326 = 31;
  else
    v1326 = v1350 + ~*((_QWORD *)&v1350 + 1);
  memcpy(&v1349[*((_QWORD *)&v1350 + 1)], "DroppedFrames.CongestionWindow ", v1326);
  *((_QWORD *)&v1350 + 1) += v1326;
  v1349[*((_QWORD *)&v1350 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v1349, "%u", *(_DWORD *)(v1338 + 92));
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v1327, v1328, v1329, v1330, v1331, v1332, v1333, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/send_statistics_proxy.cc");
}

void `non-virtual thunk to'webrtc::SendStatisticsProxy::~SendStatisticsProxy(webrtc::SendStatisticsProxy *this)
{
  webrtc::SendStatisticsProxy::~SendStatisticsProxy((webrtc::SendStatisticsProxy *)((char *)this - 8));
}

{
  webrtc::SendStatisticsProxy::~SendStatisticsProxy((webrtc::SendStatisticsProxy *)((char *)this - 16));
}

{
  webrtc::SendStatisticsProxy::~SendStatisticsProxy((webrtc::SendStatisticsProxy *)((char *)this - 24));
}

{
  webrtc::SendStatisticsProxy::~SendStatisticsProxy((webrtc::SendStatisticsProxy *)((char *)this - 32));
}

{
  webrtc::SendStatisticsProxy::~SendStatisticsProxy((webrtc::SendStatisticsProxy *)((char *)this - 40));
}

{
  webrtc::SendStatisticsProxy::~SendStatisticsProxy((webrtc::SendStatisticsProxy *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::SendStatisticsProxy::~SendStatisticsProxy((webrtc::SendStatisticsProxy *)((char *)this - 16));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::SendStatisticsProxy::~SendStatisticsProxy((webrtc::SendStatisticsProxy *)((char *)this - 24));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::SendStatisticsProxy::~SendStatisticsProxy((webrtc::SendStatisticsProxy *)((char *)this - 32));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::SendStatisticsProxy::~SendStatisticsProxy((webrtc::SendStatisticsProxy *)((char *)this - 40));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::SendStatisticsProxy::UmaSamplesContainer::UmaSamplesContainer(uint64_t a1, char *__s, __int128 *a3, uint64_t a4)
{
  size_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t **v48;
  uint64_t **v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t **v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t **v69;
  unsigned int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t **v79;
  uint64_t **v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t **v89;
  uint64_t *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  _QWORD *v100;

  if (!__s)
    goto LABEL_90;
  v8 = strlen(__s);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_91;
  v9 = v8;
  if (v8 > 0x16)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = (char *)operator new(v11 + 1);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v12 | 0x8000000000000000;
    *(_QWORD *)a1 = v10;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = v8;
    v10 = (char *)a1;
  }
  v13 = &v10[v9];
  if (v10 <= __s && v13 > __s)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    abort();
  }
  if (v9)
    memmove(v10, __s, v9);
  *v13 = 0;
  *(_QWORD *)(a1 + 24) = a4;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = &off_24C0BAFD8;
  *(_OWORD *)(a1 + 248) = xmmword_208F18830;
  *(_QWORD *)(a1 + 264) = operator new[]();
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 288) = -1;
  *(_QWORD *)(a1 + 304) = off_24C0C1308;
  *(_BYTE *)(a1 + 312) = 1;
  *(_QWORD *)(a1 + 320) = 2000;
  v15 = operator new();
  *(_DWORD *)v15 = 0;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_QWORD *)(v15 + 24) = -1;
  *(_DWORD *)(v15 + 32) = -1;
  *(_QWORD *)(a1 + 328) = v15;
  v16 = operator new();
  *(_OWORD *)(v16 + 16) = 0u;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = v16 + 16;
  *(_QWORD *)(a1 + 336) = v16;
  *(_QWORD *)(a1 + 344) = a4;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = -1;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = -1;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 304) = &unk_24C0C1398;
  *(_QWORD *)(a1 + 392) = off_24C0C1308;
  *(_BYTE *)(a1 + 400) = 1;
  *(_QWORD *)(a1 + 408) = 2000;
  v17 = operator new();
  *(_DWORD *)v17 = 0;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_QWORD *)(v17 + 24) = -1;
  *(_DWORD *)(v17 + 32) = -1;
  *(_QWORD *)(a1 + 416) = v17;
  v18 = operator new();
  *(_OWORD *)(v18 + 16) = 0u;
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = v18 + 16;
  *(_QWORD *)(a1 + 424) = v18;
  *(_QWORD *)(a1 + 432) = a4;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = -1;
  *(_BYTE *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_208F05A40;
  *(_QWORD *)(a1 + 392) = &unk_24C0C1398;
  *(_QWORD *)(a1 + 480) = off_24C0C1308;
  *(_BYTE *)(a1 + 488) = 1;
  *(_QWORD *)(a1 + 496) = 2000;
  v19 = operator new();
  *(_DWORD *)v19 = 0;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_QWORD *)(v19 + 24) = -1;
  *(_DWORD *)(v19 + 32) = -1;
  *(_QWORD *)(a1 + 504) = v19;
  v20 = operator new();
  *(_OWORD *)(v20 + 16) = 0u;
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = v20 + 16;
  *(_QWORD *)(a1 + 512) = v20;
  *(_QWORD *)(a1 + 520) = a4;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = -1;
  *(_BYTE *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = -1;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 480) = &unk_24C0C13C8;
  *(_QWORD *)(a1 + 568) = off_24C0C1308;
  *(_BYTE *)(a1 + 576) = 1;
  *(_QWORD *)(a1 + 584) = 2000;
  v21 = operator new();
  *(_DWORD *)v21 = 0;
  *(_OWORD *)(v21 + 8) = 0u;
  *(_QWORD *)(v21 + 24) = -1;
  *(_DWORD *)(v21 + 32) = -1;
  *(_QWORD *)(a1 + 592) = v21;
  v22 = operator new();
  *(_OWORD *)(v22 + 16) = 0u;
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = v22 + 16;
  *(_QWORD *)(a1 + 600) = v22;
  *(_QWORD *)(a1 + 608) = a4;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 624) = -1;
  *(_BYTE *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 640) = xmmword_208F05A40;
  *(_QWORD *)(a1 + 568) = &unk_24C0C13C8;
  *(_QWORD *)(a1 + 656) = off_24C0C1308;
  *(_BYTE *)(a1 + 664) = 1;
  *(_QWORD *)(a1 + 672) = 2000;
  v23 = operator new();
  *(_DWORD *)v23 = 0;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_QWORD *)(v23 + 24) = -1;
  *(_DWORD *)(v23 + 32) = -1;
  *(_QWORD *)(a1 + 680) = v23;
  v24 = operator new();
  *(_OWORD *)(v24 + 16) = 0u;
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = v24 + 16;
  *(_QWORD *)(a1 + 688) = v24;
  *(_QWORD *)(a1 + 696) = a4;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 712) = -1;
  *(_BYTE *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 728) = -1;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 656) = &unk_24C0C13C8;
  *(_QWORD *)(a1 + 744) = off_24C0C1308;
  *(_BYTE *)(a1 + 752) = 1;
  *(_QWORD *)(a1 + 760) = 2000;
  v25 = operator new();
  *(_DWORD *)v25 = 0;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_QWORD *)(v25 + 24) = -1;
  *(_DWORD *)(v25 + 32) = -1;
  *(_QWORD *)(a1 + 768) = v25;
  v26 = operator new();
  *(_OWORD *)(v26 + 16) = 0u;
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = v26 + 16;
  *(_QWORD *)(a1 + 776) = v26;
  *(_QWORD *)(a1 + 784) = a4;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 800) = -1;
  *(_BYTE *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 816) = xmmword_208F05A40;
  *(_QWORD *)(a1 + 744) = &unk_24C0C13C8;
  *(_QWORD *)(a1 + 832) = off_24C0C1308;
  *(_BYTE *)(a1 + 840) = 1;
  *(_QWORD *)(a1 + 848) = 2000;
  v27 = operator new();
  *(_DWORD *)v27 = 0;
  *(_OWORD *)(v27 + 8) = 0u;
  *(_QWORD *)(v27 + 24) = -1;
  *(_DWORD *)(v27 + 32) = -1;
  *(_QWORD *)(a1 + 856) = v27;
  v28 = operator new();
  *(_OWORD *)(v28 + 16) = 0u;
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = v28 + 16;
  *(_QWORD *)(a1 + 864) = v28;
  *(_QWORD *)(a1 + 872) = a4;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 888) = -1;
  *(_BYTE *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 904) = -1;
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 832) = &unk_24C0C13C8;
  *(_QWORD *)(a1 + 920) = off_24C0C1308;
  *(_BYTE *)(a1 + 928) = 1;
  *(_QWORD *)(a1 + 936) = 2000;
  v29 = operator new();
  *(_DWORD *)v29 = 0;
  *(_OWORD *)(v29 + 8) = 0u;
  *(_QWORD *)(v29 + 24) = -1;
  *(_DWORD *)(v29 + 32) = -1;
  *(_QWORD *)(a1 + 944) = v29;
  v30 = operator new();
  *(_OWORD *)(v30 + 16) = 0u;
  *(_QWORD *)v30 = 0;
  *(_QWORD *)(v30 + 8) = v30 + 16;
  *(_QWORD *)(a1 + 952) = v30;
  *(_QWORD *)(a1 + 960) = a4;
  *(_QWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 976) = -1;
  *(_BYTE *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 992) = xmmword_208F05A40;
  *(_QWORD *)(a1 + 920) = &unk_24C0C13C8;
  *(_QWORD *)(a1 + 1008) = -1;
  *(_QWORD *)(a1 + 1016) = -1;
  *(_QWORD *)(a1 + 1024) = -1;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1040) = -1;
  *(_QWORD *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_QWORD *)(a1 + 1069) = 0;
  *(_QWORD *)(a1 + 1080) = -1;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_WORD *)(a1 + 1104) = 1;
  *(_DWORD *)(a1 + 1108) = 0;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1128) = 0;
  *(_DWORD *)(a1 + 1136) = 2000;
  *(_WORD *)(a1 + 1144) = 1;
  v31 = 0uLL;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1160) = a1 + 1168;
  *(_BYTE *)(a1 + 1184) = 0;
  *(_BYTE *)(a1 + 1208) = 0;
  if (*((_BYTE *)a3 + 24))
  {
    if (*((char *)a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a1 + 1184), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
      v31 = 0uLL;
    }
    else
    {
      v32 = *a3;
      *(_QWORD *)(a1 + 1200) = *((_QWORD *)a3 + 2);
      *(_OWORD *)(a1 + 1184) = v32;
    }
    *(_BYTE *)(a1 + 1208) = 1;
  }
  v33 = a3[2];
  *(_OWORD *)(a1 + 1232) = a3[3];
  *(_OWORD *)(a1 + 1216) = v33;
  v34 = a3[4];
  v35 = a3[5];
  v36 = a3[6];
  *(_QWORD *)(a1 + 1296) = *((_QWORD *)a3 + 14);
  *(_OWORD *)(a1 + 1280) = v36;
  *(_OWORD *)(a1 + 1264) = v35;
  *(_OWORD *)(a1 + 1248) = v34;
  *(_OWORD *)(a1 + 1312) = v31;
  *(_QWORD *)(a1 + 1304) = a1 + 1312;
  std::map<int,unsigned long>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>((uint64_t *)(a1 + 1304), *((int **)a3 + 15), (int *)a3 + 32);
  v37 = *(_QWORD *)((char *)a3 + 149);
  v38 = *((_QWORD *)a3 + 18);
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_QWORD *)(a1 + 1328) = v38;
  *(_QWORD *)(a1 + 1333) = v37;
  *(_QWORD *)(a1 + 1344) = a1 + 1352;
  std::map<unsigned int,webrtc::VideoSendStream::StreamStats>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,webrtc::VideoSendStream::StreamStats>,std::__tree_node<std::__value_type<unsigned int,webrtc::VideoSendStream::StreamStats>,void *> *,long>>>((uint64_t *)(a1 + 1344), *((_QWORD **)a3 + 20), (_QWORD *)a3 + 21);
  v39 = *((_QWORD *)a3 + 23);
  *(_QWORD *)(a1 + 1374) = *(_QWORD *)((char *)a3 + 190);
  *(_QWORD *)(a1 + 1368) = v39;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_QWORD *)(a1 + 1400) = a1 + 1408;
  *(_QWORD *)(a1 + 1424) = 0;
  *(_QWORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 1440) = 0;
  *(_QWORD *)(a1 + 1432) = a1 + 1440;
  v40 = (_QWORD *)*((_QWORD *)a3 + 20);
  v100 = (_QWORD *)a3 + 21;
  if (v40 != (_QWORD *)((char *)a3 + 168))
  {
    while (1)
    {
      v42 = *((_DWORD *)v40 + 8);
      v43 = v40[12];
      v44 = v40[13];
      v45 = v40[14];
      v46 = *(_QWORD *)(a1 + 512);
      v48 = (uint64_t **)(v46 + 16);
      v47 = *(uint64_t **)(v46 + 16);
      if (v47)
      {
        while (1)
        {
          while (1)
          {
            v49 = (uint64_t **)v47;
            v50 = *((_DWORD *)v47 + 8);
            if (v50 <= v42)
              break;
            v47 = *v49;
            v48 = v49;
            if (!*v49)
              goto LABEL_29;
          }
          if (v50 >= v42)
            break;
          v47 = v49[1];
          if (!v47)
          {
            v48 = v49 + 1;
            goto LABEL_29;
          }
        }
        v54 = (uint64_t *)v40[14];
      }
      else
      {
        v49 = (uint64_t **)(v46 + 16);
LABEL_29:
        v51 = (uint64_t *)v49;
        v49 = (uint64_t **)operator new(0x48uLL);
        *((_DWORD *)v49 + 8) = v42;
        v49[5] = (uint64_t *)0x80000000;
        v49[6] = 0;
        v49[7] = 0;
        v49[8] = 0;
        *v49 = 0;
        v49[1] = 0;
        v49[2] = v51;
        *v48 = (uint64_t *)v49;
        v52 = **(_QWORD **)(v46 + 8);
        v53 = (uint64_t *)v49;
        if (v52)
        {
          *(_QWORD *)(v46 + 8) = v52;
          v53 = *v48;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v46 + 16), v53);
        ++*(_QWORD *)(v46 + 24);
        v54 = (uint64_t *)v40[14];
      }
      v49[8] = (uint64_t *)(v44 + v43 + v45);
      v55 = *(_QWORD *)(a1 + 776);
      v57 = (uint64_t **)(v55 + 16);
      v56 = *(uint64_t **)(v55 + 16);
      if (v56)
      {
        while (1)
        {
          while (1)
          {
            v58 = (uint64_t **)v56;
            v59 = *((_DWORD *)v56 + 8);
            if (v59 <= v42)
              break;
            v56 = *v58;
            v57 = v58;
            if (!*v58)
              goto LABEL_40;
          }
          if (v59 >= v42)
            break;
          v56 = v58[1];
          if (!v56)
          {
            v57 = v58 + 1;
            goto LABEL_40;
          }
        }
      }
      else
      {
        v58 = (uint64_t **)(v55 + 16);
LABEL_40:
        v60 = (uint64_t *)v58;
        v58 = (uint64_t **)operator new(0x48uLL);
        *((_DWORD *)v58 + 8) = v42;
        v58[5] = (uint64_t *)0x80000000;
        v58[6] = 0;
        v58[7] = 0;
        v58[8] = 0;
        *v58 = 0;
        v58[1] = 0;
        v58[2] = v60;
        *v57 = (uint64_t *)v58;
        v61 = **(_QWORD **)(v55 + 8);
        v62 = (uint64_t *)v58;
        if (v61)
        {
          *(_QWORD *)(v55 + 8) = v61;
          v62 = *v57;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v55 + 16), v62);
        ++*(_QWORD *)(v55 + 24);
      }
      v58[8] = v54;
      v63 = v40[17];
      v64 = v40[18];
      v65 = v40[19];
      v66 = *(_QWORD *)(a1 + 864);
      v68 = (uint64_t **)(v66 + 16);
      v67 = *(uint64_t **)(v66 + 16);
      if (v67)
      {
        while (1)
        {
          while (1)
          {
            v69 = (uint64_t **)v67;
            v70 = *((_DWORD *)v67 + 8);
            if (v70 <= v42)
              break;
            v67 = *v69;
            v68 = v69;
            if (!*v69)
              goto LABEL_50;
          }
          if (v70 >= v42)
            break;
          v67 = v69[1];
          if (!v67)
          {
            v68 = v69 + 1;
            goto LABEL_50;
          }
        }
      }
      else
      {
        v69 = (uint64_t **)(v66 + 16);
LABEL_50:
        v71 = (uint64_t *)v69;
        v69 = (uint64_t **)operator new(0x48uLL);
        *((_DWORD *)v69 + 8) = v42;
        v69[5] = (uint64_t *)0x80000000;
        v69[6] = 0;
        v69[7] = 0;
        v69[8] = 0;
        *v69 = 0;
        v69[1] = 0;
        v69[2] = v71;
        *v68 = (uint64_t *)v69;
        v72 = **(_QWORD **)(v66 + 8);
        v73 = (uint64_t *)v69;
        if (v72)
        {
          *(_QWORD *)(v66 + 8) = v72;
          v73 = *v68;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v66 + 16), v73);
        ++*(_QWORD *)(v66 + 24);
      }
      v69[8] = (uint64_t *)(v64 + v63 + v65);
      v74 = v40[22];
      v75 = v40[23];
      v76 = v40[24];
      v77 = *(_QWORD *)(a1 + 952);
      v79 = (uint64_t **)(v77 + 16);
      v78 = *(uint64_t **)(v77 + 16);
      if (v78)
      {
        while (1)
        {
          while (1)
          {
            v80 = (uint64_t **)v78;
            v81 = *((_DWORD *)v78 + 8);
            if (v81 <= v42)
              break;
            v78 = *v80;
            v79 = v80;
            if (!*v80)
              goto LABEL_60;
          }
          if (v81 >= v42)
            break;
          v78 = v80[1];
          if (!v78)
          {
            v79 = v80 + 1;
            goto LABEL_60;
          }
        }
      }
      else
      {
        v80 = (uint64_t **)(v77 + 16);
LABEL_60:
        v82 = (uint64_t *)v80;
        v80 = (uint64_t **)operator new(0x48uLL);
        *((_DWORD *)v80 + 8) = v42;
        v80[5] = (uint64_t *)0x80000000;
        v80[6] = 0;
        v80[7] = 0;
        v80[8] = 0;
        *v80 = 0;
        v80[1] = 0;
        v80[2] = v82;
        *v79 = (uint64_t *)v80;
        v83 = **(_QWORD **)(v77 + 8);
        v84 = (uint64_t *)v80;
        if (v83)
        {
          *(_QWORD *)(v77 + 8) = v83;
          v84 = *v79;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v77 + 16), v84);
        ++*(_QWORD *)(v77 + 24);
      }
      v80[8] = (uint64_t *)(v75 + v74 + v76);
      v85 = *((_DWORD *)v40 + 10);
      if (v85 == 1)
        break;
      if (!v85)
      {
        v86 = v40[13] - (v40[18] + v40[23]);
        v87 = *(_QWORD *)(a1 + 600);
        v89 = (uint64_t **)(v87 + 16);
        v88 = *(_QWORD *)(v87 + 16);
        if (!v88)
          goto LABEL_73;
        while (1)
        {
          while (1)
          {
            v90 = (uint64_t *)v88;
            v91 = *(_DWORD *)(v88 + 32);
            if (v91 <= v42)
              break;
            v88 = *v90;
            v89 = (uint64_t **)v90;
            if (!*v90)
              goto LABEL_79;
          }
          if (v91 >= v42)
            goto LABEL_83;
          v88 = v90[1];
          if (!v88)
            goto LABEL_78;
        }
      }
LABEL_84:
      v97 = (_QWORD *)v40[1];
      if (v97)
      {
        do
        {
          v98 = v97;
          v97 = (_QWORD *)*v97;
        }
        while (v97);
      }
      else
      {
        do
        {
          v98 = (_QWORD *)v40[2];
          v99 = *v98 == (_QWORD)v40;
          v40 = v98;
        }
        while (!v99);
      }
      v40 = v98;
      if (v98 == v100)
        return a1;
    }
    v86 = v40[13] + v40[12] + v40[14];
    v87 = *(_QWORD *)(a1 + 688);
    v89 = (uint64_t **)(v87 + 16);
    v92 = *(_QWORD *)(v87 + 16);
    if (v92)
    {
      while (1)
      {
        while (1)
        {
          v90 = (uint64_t *)v92;
          v93 = *(_DWORD *)(v92 + 32);
          if (v93 <= v42)
            break;
          v92 = *v90;
          v89 = (uint64_t **)v90;
          if (!*v90)
            goto LABEL_79;
        }
        if (v93 >= v42)
          break;
        v92 = v90[1];
        if (!v92)
        {
LABEL_78:
          v89 = (uint64_t **)(v90 + 1);
          goto LABEL_79;
        }
      }
    }
    else
    {
LABEL_73:
      v90 = (uint64_t *)v89;
LABEL_79:
      v94 = (uint64_t *)operator new(0x48uLL);
      v95 = v94;
      *((_DWORD *)v94 + 8) = v42;
      v94[5] = 0x80000000;
      v94[6] = 0;
      v94[7] = 0;
      v94[8] = 0;
      *v94 = 0;
      v94[1] = 0;
      v94[2] = (uint64_t)v90;
      *v89 = v94;
      v96 = **(_QWORD **)(v87 + 8);
      if (v96)
      {
        *(_QWORD *)(v87 + 8) = v96;
        v90 = v94;
        v95 = *v89;
      }
      else
      {
        v90 = v94;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v87 + 16), v95);
      ++*(_QWORD *)(v87 + 24);
    }
LABEL_83:
    v90[8] = v86;
    goto LABEL_84;
  }
  return a1;
}

void webrtc::SendStatisticsProxy::UmaSamplesContainer::~UmaSamplesContainer(webrtc::SendStatisticsProxy::UmaSamplesContainer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 180));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 176));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 1344, *((_QWORD **)this + 169));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 1304, *((_QWORD **)this + 164));
  if (*((_BYTE *)this + 1208) && *((char *)this + 1207) < 0)
    operator delete(*((void **)this + 148));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 1160, *((_QWORD **)this + 146));
  *((_QWORD *)this + 115) = off_24C0C1308;
  v2 = *((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v3)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v3 + 8, *(_QWORD **)(v3 + 16));
    MEMORY[0x20BD0ADEC](v3, 0x1020C40C0D28DD2);
  }
  v4 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v4)
    MEMORY[0x20BD0ADEC](v4, 0x1000C407607B2BCLL);
  *((_QWORD *)this + 104) = off_24C0C1308;
  v5 = *((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v6 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v6)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v6 + 8, *(_QWORD **)(v6 + 16));
    MEMORY[0x20BD0ADEC](v6, 0x1020C40C0D28DD2);
  }
  v7 = *((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v7)
    MEMORY[0x20BD0ADEC](v7, 0x1000C407607B2BCLL);
  *((_QWORD *)this + 93) = off_24C0C1308;
  v8 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v9 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v9)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v9 + 8, *(_QWORD **)(v9 + 16));
    MEMORY[0x20BD0ADEC](v9, 0x1020C40C0D28DD2);
  }
  v10 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v10)
    MEMORY[0x20BD0ADEC](v10, 0x1000C407607B2BCLL);
  *((_QWORD *)this + 82) = off_24C0C1308;
  v11 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  v12 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v12)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v12 + 8, *(_QWORD **)(v12 + 16));
    MEMORY[0x20BD0ADEC](v12, 0x1020C40C0D28DD2);
  }
  v13 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v13)
    MEMORY[0x20BD0ADEC](v13, 0x1000C407607B2BCLL);
  *((_QWORD *)this + 71) = off_24C0C1308;
  v14 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  v15 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v15)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v15 + 8, *(_QWORD **)(v15 + 16));
    MEMORY[0x20BD0ADEC](v15, 0x1020C40C0D28DD2);
  }
  v16 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v16)
    MEMORY[0x20BD0ADEC](v16, 0x1000C407607B2BCLL);
  *((_QWORD *)this + 60) = off_24C0C1308;
  v17 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  v18 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v18)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v18 + 8, *(_QWORD **)(v18 + 16));
    MEMORY[0x20BD0ADEC](v18, 0x1020C40C0D28DD2);
  }
  v19 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v19)
    MEMORY[0x20BD0ADEC](v19, 0x1000C407607B2BCLL);
  *((_QWORD *)this + 49) = off_24C0C1308;
  v20 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  v21 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v21)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v21 + 8, *(_QWORD **)(v21 + 16));
    MEMORY[0x20BD0ADEC](v21, 0x1020C40C0D28DD2);
  }
  v22 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v22)
    MEMORY[0x20BD0ADEC](v22, 0x1000C407607B2BCLL);
  *((_QWORD *)this + 38) = off_24C0C1308;
  v23 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  v24 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v24)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v24 + 8, *(_QWORD **)(v24 + 16));
    MEMORY[0x20BD0ADEC](v24, 0x1020C40C0D28DD2);
  }
  v25 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v25)
    MEMORY[0x20BD0ADEC](v25, 0x1000C407607B2BCLL);
  *((_QWORD *)this + 30) = &off_24C0BAFD8;
  v26 = *((_QWORD *)this + 33);
  if (v26)
    MEMORY[0x20BD0ADD4](v26, 0x1000C8000313F17);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t webrtc::SendStatisticsProxy::OnEncoderReconfigured(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  char *v11;
  webrtc::SendStatisticsProxy::UmaSamplesContainer *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  if (*(_DWORD *)(a1 + 424) != *(_DWORD *)(a2 + 136))
  {
    webrtc::SendStatisticsProxy::UmaSamplesContainer::UpdateHistograms(*(webrtc::SendStatisticsProxy::UmaSamplesContainer **)(a1 + 968), (const webrtc::RtpConfig *)(a1 + 80), (const webrtc::VideoSendStream::Stats *)(a1 + 440));
    v7 = operator new();
    v8 = v7;
    v9 = *(_DWORD *)(a2 + 136);
    v10 = "WebRTC.Video.Screenshare.";
    if (v9 != 1)
      v10 = 0;
    if (v9)
      v11 = (char *)v10;
    else
      v11 = "WebRTC.Video.";
    webrtc::SendStatisticsProxy::UmaSamplesContainer::UmaSamplesContainer(v7, v11, (__int128 *)(a1 + 440), *(_QWORD *)(a1 + 48));
    v12 = *(webrtc::SendStatisticsProxy::UmaSamplesContainer **)(a1 + 968);
    *(_QWORD *)(a1 + 968) = v8;
    if (v12)
    {
      webrtc::SendStatisticsProxy::UmaSamplesContainer::~UmaSamplesContainer(v12);
      MEMORY[0x20BD0ADEC]();
    }
    *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 136);
  }
  v13 = *(_QWORD *)(a1 + 968);
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(v13 + 1408));
  *(_QWORD *)(v13 + 1400) = v13 + 1408;
  *(_QWORD *)(v13 + 1416) = 0;
  *(_QWORD *)(v13 + 1408) = 0;
  v14 = a3[1];
  v15 = v14 == *a3;
  v16 = *(_QWORD *)(a1 + 968);
  *(_QWORD *)(v16 + 1384) = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a3) >> 5);
  if (v15)
    v17 = 0;
  else
    v17 = *(_QWORD *)(v14 - 88) * *(_QWORD *)(v14 - 96);
  *(_QWORD *)(v16 + 1392) = v17;
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::SendStatisticsProxy::OnEncodedFrameTimeMeasured(webrtc::SendStatisticsProxy *this, int a2, int a3)
{
  pthread_mutex_t *v6;
  int64x2_t v7;
  float v8;
  float v9;
  float v10;

  v6 = (pthread_mutex_t *)((char *)this + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  v7 = vdupq_n_s64(1uLL);
  v7.i64[0] = a2;
  *(int64x2_t *)(*((_QWORD *)this + 121) + 96) = vaddq_s64(*(int64x2_t *)(*((_QWORD *)this + 121) + 96), v7);
  v8 = (float)a2;
  v9 = *((float *)this + 161);
  if (v9 != -1.0)
    v8 = (float)((float)(1.0 - *((float *)this + 160)) * v8) + (float)(*((float *)this + 160) * v9);
  v10 = *((float *)this + 162);
  if (v8 > v10 && v10 != -1.0)
    v8 = *((float *)this + 162);
  *((float *)this + 161) = v8;
  *((_DWORD *)this + 121) = llroundf(v8);
  *((_QWORD *)this + 62) += a2;
  *((_DWORD *)this + 122) = a3;
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::SendStatisticsProxy::OnSuspendChange(webrtc::SendStatisticsProxy *this, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  v5 = v4 / 0x3E8uLL;
  if (v4 % 0x3E8uLL > 0x1F3)
    ++v5;
  if (-v4 % 0x3E8uLL <= 0x1F4)
    v6 = 0;
  else
    v6 = -1;
  if (v4 < 0)
    v7 = v6 - -v4 / 0x3E8uLL;
  else
    v7 = v5;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  *((_BYTE *)this + 548) = a2;
  if (!a2)
  {
    v17 = *((_QWORD *)this + 121);
    if (*((_BYTE *)this + 896) && *(_QWORD *)(v17 + 1024) == -1)
      *(_QWORD *)(v17 + 1024) = v7;
    if (*((_BYTE *)this + 908) && *(_QWORD *)(v17 + 1040) == -1)
      *(_QWORD *)(v17 + 1040) = v7;
    v18 = v17;
    if (*(_QWORD *)(v17 + 712) != -1)
    {
      webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(v17 + 656));
      v18 = *((_QWORD *)this + 121);
    }
    *(_BYTE *)(v17 + 720) = 0;
    *(_QWORD *)(v17 + 736) = 0;
    v19 = v18;
    if (*(_QWORD *)(v18 + 800) != -1)
    {
      webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(v18 + 744));
      v19 = *((_QWORD *)this + 121);
    }
    *(_BYTE *)(v18 + 808) = 0;
    *(_QWORD *)(v18 + 824) = 0;
    v20 = v19;
    if (*(_QWORD *)(v19 + 888) != -1)
    {
      webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(v19 + 832));
      v20 = *((_QWORD *)this + 121);
    }
    *(_BYTE *)(v19 + 896) = 0;
    *(_QWORD *)(v19 + 912) = 0;
    if (*(_QWORD *)(v20 + 976) != -1)
      webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(v20 + 920));
    *(_BYTE *)(v20 + 984) = 0;
    *(_QWORD *)(v20 + 1000) = 0;
    return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 360));
  }
  v8 = *((_QWORD *)this + 121);
  if (*(_QWORD *)(v8 + 360) != -1)
    webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(v8 + 304));
  *(_BYTE *)(v8 + 368) = 1;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 344) + 16))(*(_QWORD *)(v8 + 344));
  if ((v9 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v9 % 0x3E8uLL <= 0x1F4)
      v21 = 0;
    else
      v21 = -1;
    *(_QWORD *)(v8 + 376) = v21 - -(uint64_t)v9 / 0x3E8uLL;
    *(_QWORD *)(v8 + 384) = 500;
    v11 = *((_QWORD *)this + 121);
    if (*(_QWORD *)(v11 + 448) != -1)
LABEL_16:
      webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(v11 + 392));
  }
  else
  {
    v10 = v9 / 0x3E8;
    if (v9 % 0x3E8 > 0x1F3)
      ++v10;
    *(_QWORD *)(v8 + 376) = v10;
    *(_QWORD *)(v8 + 384) = 500;
    v11 = *((_QWORD *)this + 121);
    if (*(_QWORD *)(v11 + 448) != -1)
      goto LABEL_16;
  }
  *(_BYTE *)(v11 + 456) = 1;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 432) + 16))(*(_QWORD *)(v11 + 432));
  if ((v12 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v12 % 0x3E8uLL <= 0x1F4)
      v22 = 0;
    else
      v22 = -1;
    *(_QWORD *)(v11 + 464) = v22 - -(uint64_t)v12 / 0x3E8uLL;
    *(_QWORD *)(v11 + 472) = 500;
    v14 = *((_QWORD *)this + 121);
    if (*(_QWORD *)(v14 + 536) != -1)
LABEL_21:
      webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(v14 + 480));
  }
  else
  {
    v13 = v12 / 0x3E8;
    if (v12 % 0x3E8 > 0x1F3)
      ++v13;
    *(_QWORD *)(v11 + 464) = v13;
    *(_QWORD *)(v11 + 472) = 500;
    v14 = *((_QWORD *)this + 121);
    if (*(_QWORD *)(v14 + 536) != -1)
      goto LABEL_21;
  }
  *(_BYTE *)(v14 + 544) = 1;
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 520) + 16))(*(_QWORD *)(v14 + 520));
  if ((v15 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v15 % 0x3E8uLL <= 0x1F4)
      v23 = 0;
    else
      v23 = -1;
    v16 = v23 - -(uint64_t)v15 / 0x3E8uLL;
  }
  else
  {
    v16 = v15 / 0x3E8;
    if (v15 % 0x3E8 > 0x1F3)
      ++v16;
  }
  *(_QWORD *)(v14 + 552) = v16;
  *(_QWORD *)(v14 + 560) = 500;
  v24 = *((_QWORD *)this + 121);
  if (*(_QWORD *)(v24 + 624) != -1)
    webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(v24 + 568));
  *(_BYTE *)(v24 + 632) = 1;
  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 + 608) + 16))(*(_QWORD *)(v24 + 608));
  if ((v25 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v25 % 0x3E8uLL <= 0x1F4)
      v27 = 0;
    else
      v27 = -1;
    v26 = v27 - -(uint64_t)v25 / 0x3E8uLL;
  }
  else
  {
    v26 = v25 / 0x3E8;
    if (v25 % 0x3E8 > 0x1F3)
      ++v26;
  }
  *(_QWORD *)(v24 + 640) = v26;
  *(_QWORD *)(v24 + 648) = 500;
  v28 = *((_QWORD *)this + 121);
  if (*(_QWORD *)(v28 + 712) != -1)
    webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(v28 + 656));
  *(_BYTE *)(v28 + 720) = 1;
  v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 696) + 16))(*(_QWORD *)(v28 + 696));
  if ((v29 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v29 % 0x3E8uLL <= 0x1F4)
      v31 = 0;
    else
      v31 = -1;
    v30 = v31 - -(uint64_t)v29 / 0x3E8uLL;
  }
  else
  {
    v30 = v29 / 0x3E8;
    if (v29 % 0x3E8 > 0x1F3)
      ++v30;
  }
  *(_QWORD *)(v28 + 728) = v30;
  *(_QWORD *)(v28 + 736) = 500;
  v32 = *((_QWORD *)this + 121);
  if (*(_QWORD *)(v32 + 800) != -1)
    webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(v32 + 744));
  *(_BYTE *)(v32 + 808) = 1;
  v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v32 + 784) + 16))(*(_QWORD *)(v32 + 784));
  if ((v33 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v33 % 0x3E8uLL <= 0x1F4)
      v35 = 0;
    else
      v35 = -1;
    v34 = v35 - -(uint64_t)v33 / 0x3E8uLL;
  }
  else
  {
    v34 = v33 / 0x3E8;
    if (v33 % 0x3E8 > 0x1F3)
      ++v34;
  }
  *(_QWORD *)(v32 + 816) = v34;
  *(_QWORD *)(v32 + 824) = 500;
  v36 = *((_QWORD *)this + 121);
  if (*(_QWORD *)(v36 + 888) != -1)
    webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(v36 + 832));
  *(_BYTE *)(v36 + 896) = 1;
  v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v36 + 872) + 16))(*(_QWORD *)(v36 + 872));
  if ((v37 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v37 % 0x3E8uLL <= 0x1F4)
      v39 = 0;
    else
      v39 = -1;
    v38 = v39 - -(uint64_t)v37 / 0x3E8uLL;
  }
  else
  {
    v38 = v37 / 0x3E8;
    if (v37 % 0x3E8 > 0x1F3)
      ++v38;
  }
  *(_QWORD *)(v36 + 904) = v38;
  *(_QWORD *)(v36 + 912) = 500;
  v40 = *((_QWORD *)this + 121);
  if (*(_QWORD *)(v40 + 976) != -1)
    webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(v40 + 920));
  *(_BYTE *)(v40 + 984) = 1;
  v41 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v40 + 960) + 16))(*(_QWORD *)(v40 + 960));
  if ((v41 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v41 % 0x3E8uLL <= 0x1F4)
      v43 = 0;
    else
      v43 = -1;
    v42 = v43 - -(uint64_t)v41 / 0x3E8uLL;
  }
  else
  {
    v42 = v41 / 0x3E8;
    if (v41 % 0x3E8 > 0x1F3)
      ++v42;
  }
  *(_QWORD *)(v40 + 992) = v42;
  *(_QWORD *)(v40 + 1000) = 500;
  v44 = (_QWORD *)*((_QWORD *)this + 121);
  v45 = v44[128];
  if (v45 != -1)
  {
    v44[129] += v7 - v45;
    v44[128] = -1;
  }
  v46 = v44[130];
  if (v46 != -1)
  {
    v44[131] += v7 - v46;
    v44[130] = -1;
    return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 360));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 360));
}

uint64_t webrtc::SendStatisticsProxy::GetStats@<X0>(webrtc::SendStatisticsProxy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unsigned int v9;
  uint64_t **v10;
  char *v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  pthread_mutex_t *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char **v37;
  unsigned int v38;
  char **v39;
  unsigned int v40;
  BOOL v41;
  char **v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t *v50;
  pthread_mutex_t *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;

  v53 = (pthread_mutex_t *)((char *)this + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  v4 = (char *)*((_QWORD *)this + 75);
  v5 = (char *)this + 608;
  if (v4 != (char *)this + 608)
  {
    v6 = v3;
    v7 = (char **)((char *)this + 840);
    do
    {
      v8 = *v7;
      v9 = *((_DWORD *)v4 + 8);
      v10 = (uint64_t **)((char *)this + 840);
      v11 = (char *)this + 840;
      if (*v7)
      {
        while (1)
        {
          while (1)
          {
            v11 = v8;
            v12 = *((_DWORD *)v8 + 8);
            if (v9 >= v12)
              break;
            v8 = *(char **)v11;
            v10 = (uint64_t **)v11;
            if (!*(_QWORD *)v11)
              goto LABEL_11;
          }
          if (v12 >= v9)
            break;
          v8 = (char *)*((_QWORD *)v11 + 1);
          if (!v8)
          {
            v10 = (uint64_t **)(v11 + 8);
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v13 = v11;
        v11 = (char *)operator new(0xB0uLL);
        *((_DWORD *)v11 + 8) = v9;
        *((_QWORD *)v11 + 5) = 0x8000000000000000;
        *((_QWORD *)v11 + 6) = &off_24C0BAFD8;
        *(_OWORD *)(v11 + 56) = xmmword_208F18830;
        *((_QWORD *)v11 + 9) = operator new[]();
        *((_QWORD *)v11 + 10) = 0;
        *((_QWORD *)v11 + 12) = -1;
        *((_OWORD *)v11 + 7) = 0u;
        *((_OWORD *)v11 + 8) = 0u;
        *((_OWORD *)v11 + 9) = 0u;
        *((_OWORD *)v11 + 10) = 0u;
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v13;
        *v10 = (uint64_t *)v11;
        v14 = **((_QWORD **)this + 104);
        v15 = (uint64_t *)v11;
        if (v14)
        {
          *((_QWORD *)this + 104) = v14;
          v15 = *v10;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 105), v15);
        ++*((_QWORD *)this + 106);
      }
      if (v6 == 0x7FFFFFFFFFFFFFFFLL
        || (v16 = *((_QWORD *)v11 + 5), v16 == 0x8000000000000000)
        || v6 != 0x8000000000000000 && v16 != 0x7FFFFFFFFFFFFFFFLL && v6 - v16 >= 5000000)
      {
        *((_DWORD *)v4 + 15) = 0;
        *((_DWORD *)v4 + 16) = 0;
      }
      v17 = (char *)*((_QWORD *)v4 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(char **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (char *)*((_QWORD *)v4 + 2);
          v19 = *(_QWORD *)v18 == (_QWORD)v4;
          v4 = v18;
        }
        while (!v19);
      }
      v4 = v18;
    }
    while (v18 != v5);
  }
  *((double *)this + 59) = rtc::RateTracker::ComputeRateForInterval((rtc::RateTracker *)(*((_QWORD *)this + 121) + 240), *(_QWORD *)(*((_QWORD *)this + 121) + 256) * *(_QWORD *)(*((_QWORD *)this + 121) + 248));
  *((_DWORD *)this + 128) = *(_QWORD *)(*((_QWORD *)this + 121) + 272);
  *((_BYTE *)this + 624) = *((_DWORD *)this + 106) != 0;
  *((_DWORD *)this + 120) = llround(rtc::RateTracker::ComputeRateForInterval((webrtc::SendStatisticsProxy *)((char *)this + 768), *((_QWORD *)this + 98) * *((_QWORD *)this + 97)));
  *((_DWORD *)this + 136) = vcvtd_n_s64_f64(rtc::RateTracker::ComputeRateForInterval((webrtc::SendStatisticsProxy *)((char *)this + 704), *((_QWORD *)this + 90) * *((_QWORD *)this + 89)), 3uLL);
  v55 = 0;
  v56 = 0;
  v54 = &v55;
  std::map<int,unsigned long>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>((uint64_t *)&v54, *((int **)this + 85), (int *)this + 172);
  v20 = v55;
  if (!v55)
    goto LABEL_35;
  v21 = *((_DWORD *)this + 166);
  v22 = &v55;
  do
  {
    v23 = v20;
    v24 = v22;
    v25 = *((_DWORD *)v20 + 8);
    v26 = v20 + 1;
    if (v25 >= v21)
    {
      v26 = v23;
      v22 = v23;
    }
    v20 = (_QWORD *)*v26;
  }
  while (v20);
  if (v22 == &v55)
    goto LABEL_35;
  if (v25 < v21)
    v23 = v24;
  if (v21 < *((_DWORD *)v23 + 8))
LABEL_35:
    v22 = &v55;
  v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 82) + 16))(*((_QWORD *)this + 82));
  v28 = v27 / 0x3E8uLL;
  if (v27 % 0x3E8uLL > 0x1F3)
    ++v28;
  if (-v27 % 0x3E8uLL <= 0x1F4)
    v29 = 0;
  else
    v29 = -1;
  if (v27 < 0)
    v28 = v29 - -v27 / 0x3E8uLL;
  v22[5] += v28 - *((_QWORD *)this + 84);
  v30 = (char *)this + 568;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 560, *((_QWORD **)this + 71));
  v31 = v55;
  *((_QWORD *)this + 70) = v54;
  *((_QWORD *)this + 71) = v31;
  v32 = v56;
  *((_QWORD *)this + 72) = v56;
  if (v32)
  {
    v31[2] = v30;
    v54 = &v55;
    v55 = 0;
    v56 = 0;
    v34 = a2;
    v33 = v53;
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v54, 0);
    v35 = (char *)*((_QWORD *)this + 75);
    if (v35 == v5)
      goto LABEL_75;
  }
  else
  {
    *((_QWORD *)this + 70) = v30;
    v34 = a2;
    v33 = v53;
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v54, v31);
    v35 = (char *)*((_QWORD *)this + 75);
    if (v35 == v5)
      goto LABEL_75;
  }
  v36 = (char *)*((_QWORD *)this + 105);
  if (v36)
  {
    v37 = (char **)((char *)this + 840);
LABEL_49:
    v38 = *((_DWORD *)v35 + 8);
    v39 = (char **)((char *)this + 840);
    do
    {
      v40 = *((_DWORD *)v36 + 8);
      v41 = v40 >= v38;
      if (v40 >= v38)
        v42 = (char **)v36;
      else
        v42 = (char **)(v36 + 8);
      if (v41)
        v39 = (char **)v36;
      v36 = *v42;
    }
    while (*v42);
    if (v39 != v37 && v38 >= *((_DWORD *)v39 + 8))
      *((double *)v35 + 38) = rtc::RateTracker::ComputeRateForInterval((rtc::RateTracker *)(v39 + 6), (_QWORD)v39[8] * (_QWORD)v39[7]);
    while (1)
    {
      v43 = (char *)*((_QWORD *)v35 + 1);
      if (v43)
      {
        do
        {
          v44 = v43;
          v43 = *(char **)v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (char *)*((_QWORD *)v35 + 2);
          v19 = *(_QWORD *)v44 == (_QWORD)v35;
          v35 = v44;
        }
        while (!v19);
      }
      if (v44 == v5)
        break;
      v36 = *v37;
      v35 = v44;
      if (*v37)
        goto LABEL_49;
    }
  }
  else
  {
    do
    {
      v45 = (char *)*((_QWORD *)v35 + 1);
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = *(char **)v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (char *)*((_QWORD *)v35 + 2);
          v19 = *(_QWORD *)v46 == (_QWORD)v35;
          v35 = v46;
        }
        while (!v19);
      }
      v35 = v46;
    }
    while (v46 != v5);
  }
LABEL_75:
  *(_BYTE *)v34 = 0;
  *(_BYTE *)(v34 + 24) = 0;
  if (*((_BYTE *)this + 464))
  {
    if (*((char *)this + 463) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v34, *((const std::string::value_type **)this + 55), *((_QWORD *)this + 56));
    }
    else
    {
      *(_OWORD *)v34 = *(_OWORD *)((char *)this + 440);
      *(_QWORD *)(v34 + 16) = *((_QWORD *)this + 57);
    }
    *(_BYTE *)(v34 + 24) = 1;
  }
  v47 = *(_OWORD *)((char *)this + 520);
  *(_OWORD *)(v34 + 64) = *(_OWORD *)((char *)this + 504);
  *(_OWORD *)(v34 + 80) = v47;
  *(_OWORD *)(v34 + 96) = *(_OWORD *)((char *)this + 536);
  *(_QWORD *)(v34 + 112) = *((_QWORD *)this + 69);
  v48 = *(_OWORD *)((char *)this + 488);
  *(_OWORD *)(v34 + 32) = *(_OWORD *)((char *)this + 472);
  *(_OWORD *)(v34 + 48) = v48;
  *(_QWORD *)(v34 + 136) = 0;
  *(_QWORD *)(v34 + 128) = 0;
  *(_QWORD *)(v34 + 120) = v34 + 128;
  std::map<int,unsigned long>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>((uint64_t *)(v34 + 120), *((int **)this + 70), (int *)this + 142);
  v49 = *((_QWORD *)this + 73);
  *(_QWORD *)(v34 + 168) = 0;
  *(_QWORD *)(v34 + 160) = v34 + 168;
  v50 = (uint64_t *)(v34 + 160);
  *(v50 - 2) = v49;
  *(uint64_t *)((char *)v50 - 11) = *(_QWORD *)((char *)this + 589);
  v50[2] = 0;
  std::map<unsigned int,webrtc::VideoSendStream::StreamStats>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,webrtc::VideoSendStream::StreamStats>,std::__tree_node<std::__value_type<unsigned int,webrtc::VideoSendStream::StreamStats>,void *> *,long>>>(v50, *((_QWORD **)this + 75), (_QWORD *)this + 76);
  v50[3] = *((_QWORD *)this + 78);
  *(uint64_t *)((char *)v50 + 30) = *(_QWORD *)((char *)this + 630);
  return pthread_mutex_unlock(v33);
}

char *webrtc::SendStatisticsProxy::GetStatsEntry(webrtc::SendStatisticsProxy *this, unsigned int __c)
{
  unsigned int **v4;
  char *v5;
  unsigned int **v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  _BOOL4 v13;
  __int32 *v14;
  __int32 *v15;
  __int32 *v16;
  char *result;
  unsigned int *v18;
  char *v19;
  unsigned int v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int *v31;

  v4 = (unsigned int **)((char *)this + 608);
  v5 = (char *)*((_QWORD *)this + 76);
  if (v5)
  {
    v6 = (unsigned int **)((char *)this + 608);
    do
    {
      v7 = *((_DWORD *)v5 + 8);
      v8 = v7 >= __c;
      if (v7 >= __c)
        v9 = (char **)v5;
      else
        v9 = (char **)(v5 + 8);
      if (v8)
        v6 = (unsigned int **)v5;
      v5 = *v9;
    }
    while (*v9);
    if (v6 != v4 && *((_DWORD *)v6 + 8) <= __c)
      return (char *)(v6 + 5);
  }
  v10 = (__int32 *)*((_QWORD *)this + 11);
  v11 = wmemchr(*((__int32 **)this + 10), __c, ((uint64_t)v10 - *((_QWORD *)this + 10)) >> 2);
  if (v11)
    v12 = v11;
  else
    v12 = v10;
  v13 = *((_DWORD *)this + 62) != -1 && *((_DWORD *)this + 63) == __c;
  v14 = (__int32 *)*((_QWORD *)this + 36);
  v15 = wmemchr(*((__int32 **)this + 35), __c, ((uint64_t)v14 - *((_QWORD *)this + 35)) >> 2);
  if (v15)
    v16 = v15;
  else
    v16 = v14;
  if (v12 == v10 && !v13 && v16 == v14)
    return 0;
  v18 = *v4;
  v19 = (char *)v4;
  if (*v4)
  {
    while (1)
    {
      while (1)
      {
        v19 = (char *)v18;
        v20 = v18[8];
        if (v20 <= __c)
          break;
        v18 = *(unsigned int **)v19;
        v4 = (unsigned int **)v19;
        if (!*(_QWORD *)v19)
          goto LABEL_32;
      }
      if (v20 >= __c)
        break;
      v18 = (unsigned int *)*((_QWORD *)v19 + 1);
      if (!v18)
      {
        v4 = (unsigned int **)(v19 + 8);
        goto LABEL_32;
      }
    }
  }
  else
  {
LABEL_32:
    v21 = v19;
    v19 = (char *)operator new(0x168uLL);
    *((_DWORD *)v19 + 8) = __c;
    *((_DWORD *)v19 + 10) = 0;
    v19[44] = 0;
    v19[48] = 0;
    *(_OWORD *)(v19 + 52) = 0u;
    *(_OWORD *)(v19 + 68) = 0u;
    *((_QWORD *)v19 + 11) = 0x7FFFFFFFFFFFFFFFLL;
    v19[240] = 0;
    v19[296] = 0;
    *((_QWORD *)v19 + 38) = 0;
    *((_DWORD *)v19 + 78) = 0;
    v19[320] = 0;
    v19[328] = 0;
    *((_QWORD *)v19 + 42) = 0;
    *((_QWORD *)v19 + 43) = 0;
    *(_QWORD *)(v19 + 350) = 0;
    *((_OWORD *)v19 + 6) = 0u;
    *((_OWORD *)v19 + 7) = 0u;
    *((_OWORD *)v19 + 8) = 0u;
    *((_OWORD *)v19 + 9) = 0u;
    *((_OWORD *)v19 + 10) = 0u;
    *((_OWORD *)v19 + 11) = 0u;
    *((_OWORD *)v19 + 12) = 0u;
    *((_OWORD *)v19 + 13) = 0u;
    *(_OWORD *)(v19 + 220) = 0u;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = v21;
    *v4 = (unsigned int *)v19;
    v22 = (uint64_t *)v19;
    v23 = **((_QWORD **)this + 75);
    if (v23)
    {
      *((_QWORD *)this + 75) = v23;
      v22 = (uint64_t *)*v4;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 76), v22);
    ++*((_QWORD *)this + 77);
  }
  result = v19 + 40;
  if (v12 != v10)
  {
    *(_DWORD *)result = 0;
    return result;
  }
  if (v16 != v14)
  {
    *(_DWORD *)result = 1;
LABEL_40:
    v25 = *((_QWORD *)this + 35);
    v24 = *((_QWORD *)this + 36);
    v26 = v24 - v25;
    if (v24 == v25)
    {
LABEL_45:
      v30 = 0;
LABEL_55:
      *((_DWORD *)v19 + 11) = v30;
      v19[48] = 1;
      return result;
    }
    v27 = 0;
    v28 = *((_QWORD *)this + 10);
    v29 = v26 >> 2;
    if (v29 <= 1)
      v29 = 1;
    while (*(_DWORD *)(v25 + 4 * v27) != __c)
    {
      if (v29 == ++v27)
        goto LABEL_45;
    }
    if (v27 < (*((_QWORD *)this + 11) - v28) >> 2)
    {
      v30 = *(_DWORD *)(v28 + 4 * v27);
      goto LABEL_55;
    }
    goto LABEL_56;
  }
  if (v13)
  {
    *(_DWORD *)result = 2;
    goto LABEL_53;
  }
  if (*(_DWORD *)result == 2)
  {
LABEL_53:
    v31 = (int *)*((_QWORD *)this + 32);
    if (*((int **)this + 33) != v31)
    {
      v30 = *v31;
      goto LABEL_55;
    }
LABEL_56:
    __break(1u);
    return result;
  }
  if (*(_DWORD *)result == 1)
    goto LABEL_40;
  return result;
}

uint64_t webrtc::SendStatisticsProxy::OnSetEncoderTargetRate(webrtc::SendStatisticsProxy *this, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v4 = (pthread_mutex_t *)((char *)this + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  if (!a2 && *(_QWORD *)(*((_QWORD *)this + 121) + 1080) == -1)
    return pthread_mutex_unlock(v4);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  v6 = v5 / 0x3E8uLL;
  if (v5 % 0x3E8uLL > 0x1F3)
    ++v6;
  if (-v5 % 0x3E8uLL <= 0x1F4)
    v7 = 0;
  else
    v7 = -1;
  if (v5 < 0)
    v6 = v7 - -v5 / 0x3E8uLL;
  v8 = *((_QWORD *)this + 121);
  v9 = *(_QWORD *)(v8 + 1080);
  if (v9 != -1)
  {
    v10 = *((_DWORD *)this + 135);
    v11 = v6 - v9;
    if (!v10)
      *(_QWORD *)(v8 + 1056) += v11;
    *(_QWORD *)(v8 + 1064) += v11;
    if (*(_BYTE *)(v8 + 1076))
      ++*(_DWORD *)(v8 + 1072);
    *(_BYTE *)(v8 + 1076) = (a2 == 0) ^ (v10 == 0);
  }
  *(_QWORD *)(v8 + 1080) = v6;
  *((_DWORD *)this + 135) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::SendStatisticsProxy::OnMinPixelLimitReached(webrtc::SendStatisticsProxy *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  *(_BYTE *)(*((_QWORD *)this + 121) + 1145) = 1;
  return pthread_mutex_unlock(v2);
}

void webrtc::SendStatisticsProxy::OnSendEncodedImage(webrtc::SendStatisticsProxy *this, const webrtc::EncodedImage *a2, const webrtc::CodecSpecificInfo *a3)
{
  const webrtc::EncodedImage *v4;
  int v6;
  pthread_mutex_t *v7;
  char *v8;
  double v9;
  double v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  void **v24;
  int v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  _BOOL4 v31;
  char *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *StatsEntry;
  char *v43;
  char *v44;
  uint64_t **v45;
  char *v46;
  unsigned int v47;
  const webrtc::EncodedImage *v48;
  char *v49;
  pthread_mutex_t *v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t **v60;
  char *v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  uint64_t **v69;
  char *v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t **v79;
  char *v80;
  int v81;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int v104;
  int v105;
  int64x2_t v106;
  unint64_t v107;
  int v108;
  int v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  unsigned int v114;
  uint64_t **v115;
  uint64_t *v116;
  uint64_t **v117;
  uint64_t v118;
  char *v119;
  int v120;
  unsigned int v121;
  int v122;
  _BOOL4 v124;
  _BOOL4 v125;
  BOOL v126;
  uint64_t *v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t **v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  _DWORD *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int64x2_t *v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  pthread_mutex_t *v170;
  char *v171;
  int v172;
  int v173;
  const webrtc::CodecSpecificInfo *v174;
  int64x2_t v175;

  v4 = a2;
  if ((*(_QWORD *)((_BYTE *)a2 + 156) & 0xFF00000000) != 0)
    v6 = *(_QWORD *)((char *)a2 + 156);
  else
    v6 = 0;
  v7 = (pthread_mutex_t *)((char *)this + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  ++*((_DWORD *)this + 123);
  v8 = (char *)this + 768;
  v9 = rtc::RateTracker::ComputeRateForInterval((webrtc::SendStatisticsProxy *)((char *)this + 768), *((_QWORD *)this + 98) * *((_QWORD *)this + 97));
  if (v9 >= 1.0)
    v10 = v9 * 8.0;
  else
    v10 = 8.0;
  *((_QWORD *)this + 63) = (unint64_t)(round((double)*((int *)this + 135) / v10)
                                            + (double)*((unint64_t *)this + 63));
  if (!a3)
    goto LABEL_79;
  v11 = *((_DWORD *)v4 + 1) * *(_DWORD *)v4;
  if (*((_BYTE *)this + 356))
  {
    v12 = *((_QWORD *)this + 121);
    if (*(_BYTE *)(v12 + 1144))
    {
      if (!*((_BYTE *)this + 596))
      {
        if (v6 || *(_DWORD *)a3 != 1 || (*((_BYTE *)a3 + 9) + 1) > 1u)
          goto LABEL_28;
        if (!*((_BYTE *)this + 464))
          goto LABEL_274;
        v13 = (char *)this + 440;
        if (*((char *)this + 463) < 0)
        {
          v14 = *((_QWORD *)this + 56);
          if (v14 < 0)
            goto LABEL_271;
          v13 = *(char **)v13;
          if (v14)
          {
            if (!v13)
              goto LABEL_271;
          }
        }
        else
        {
          v14 = *((unsigned __int8 *)this + 463);
        }
        if (v14 == 6
          && ((v15 = *(_DWORD *)v13, v16 = *((unsigned __int16 *)v13 + 2), v15 == 1986161004)
            ? (v17 = v16 == 30832)
            : (v17 = 0),
              v17))
        {
LABEL_28:
          *(_BYTE *)(v12 + 1144) = 0;
        }
        else
        {
LABEL_274:
          if (*((_DWORD *)this + 88) >= v11 || *(_BYTE *)(v12 + 1145))
            *((_BYTE *)this + 596) = 1;
        }
      }
    }
  }
  if (!*((_BYTE *)this + 348) || (v18 = *((_QWORD *)this + 121), !*(_BYTE *)(v18 + 1104)))
  {
LABEL_79:
    v39 = v6;
    v40 = *((_QWORD *)this + 10);
    if (v6 < (unint64_t)((*((_QWORD *)this + 11) - v40) >> 2))
      goto LABEL_80;
    goto LABEL_268;
  }
  if (v6 || *(_DWORD *)a3 != 1 || (*((_BYTE *)a3 + 9) + 1) >= 2u)
    goto LABEL_78;
  v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  v20 = v19 / 0x3E8uLL;
  if (v19 % 0x3E8uLL > 0x1F3)
    ++v20;
  if (-v19 % 0x3E8uLL <= 0x1F4)
    v21 = 0;
  else
    v21 = -1;
  if (v19 < 0)
    v22 = v21 - -v19 / 0x3E8uLL;
  else
    v22 = v20;
  LOBYTE(v23) = *(_BYTE *)(v18 + 1105) != 0;
  if (!*((_BYTE *)this + 960))
  {
LABEL_262:
    if (*(_BYTE *)(v18 + 1128))
    {
      v160 = v22 - *(_QWORD *)(v18 + 1120);
      if (v160 < *(int *)(v18 + 1136))
      {
        v161 = *((_QWORD *)this + 121);
        if (*(_BYTE *)(v18 + 1105))
          *(_QWORD *)(v161 + 1088) += v160;
        *(_QWORD *)(v161 + 1096) += v160;
        *(_QWORD *)(v18 + 1112) += v160;
      }
    }
    *(_BYTE *)(v18 + 1105) = v23;
    *(_QWORD *)(v18 + 1120) = v22;
    *(_BYTE *)(v18 + 1128) = 1;
    v39 = v6;
    v40 = *((_QWORD *)this + 10);
    if (v6 < (unint64_t)((*((_QWORD *)this + 11) - v40) >> 2))
    {
LABEL_80:
      v41 = *(_DWORD *)(v40 + 4 * v39);
      StatsEntry = webrtc::SendStatisticsProxy::GetStatsEntry(this, v41);
      if (!StatsEntry)
      {
LABEL_270:
        pthread_mutex_unlock(v7);
        return;
      }
      v43 = StatsEntry;
      v44 = (char *)*((_QWORD *)this + 105);
      if (v44)
      {
        while (1)
        {
          while (1)
          {
            v46 = v44;
            v47 = *((_DWORD *)v44 + 8);
            if (v41 >= v47)
              break;
            v44 = *(char **)v46;
            v45 = (uint64_t **)v46;
            if (!*(_QWORD *)v46)
              goto LABEL_88;
          }
          if (v47 >= v41)
            break;
          v44 = (char *)*((_QWORD *)v46 + 1);
          if (!v44)
          {
            v45 = (uint64_t **)(v46 + 8);
            goto LABEL_88;
          }
        }
      }
      else
      {
        v45 = (uint64_t **)((char *)this + 840);
        v46 = (char *)this + 840;
LABEL_88:
        v174 = a3;
        v48 = v4;
        v49 = v8;
        v50 = v7;
        v51 = v6;
        v52 = v46;
        v46 = (char *)operator new(0xB0uLL);
        *((_DWORD *)v46 + 8) = v41;
        *((_QWORD *)v46 + 5) = 0x8000000000000000;
        *((_QWORD *)v46 + 6) = &off_24C0BAFD8;
        *(_OWORD *)(v46 + 56) = xmmword_208F18830;
        *((_QWORD *)v46 + 9) = operator new[]();
        *((_QWORD *)v46 + 10) = 0;
        *((_QWORD *)v46 + 12) = -1;
        *((_OWORD *)v46 + 7) = 0u;
        *((_OWORD *)v46 + 8) = 0u;
        *((_OWORD *)v46 + 9) = 0u;
        *((_OWORD *)v46 + 10) = 0u;
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
        *((_QWORD *)v46 + 2) = v52;
        *v45 = (uint64_t *)v46;
        v53 = **((_QWORD **)this + 104);
        v54 = (uint64_t *)v46;
        if (v53)
        {
          *((_QWORD *)this + 104) = v53;
          v54 = *v45;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 105), v54);
        ++*((_QWORD *)this + 106);
        v6 = v51;
        v7 = v50;
        v8 = v49;
        v4 = v48;
        a3 = v174;
      }
      ++*((_DWORD *)v43 + 68);
      *((_QWORD *)v43 + 37) += *((_QWORD *)v4 + 7) - *((_QWORD *)v4 + 6);
      if (a3)
      {
        *((_WORD *)v43 + 158) = *((_WORD *)a3 + 996);
        v55 = *((_BYTE *)a3 + 1632) != 0;
        if (!*((_DWORD *)v43 + 5))
          goto LABEL_96;
      }
      else
      {
        *((_WORD *)v43 + 158) = 0;
        v55 = 1;
        if (!*((_DWORD *)v43 + 5))
        {
LABEL_96:
          *(_QWORD *)(v43 + 20) = *(_QWORD *)v4;
          *((_QWORD *)v46 + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
LABEL_97:
          v56 = *((_QWORD *)this + 121);
          if (*((_DWORD *)v4 + 6) == 3)
            ++*(_QWORD *)(v56 + 112);
          ++*(_QWORD *)(v56 + 120);
          LODWORD(v56) = *((_DWORD *)v4 + 9);
          v169 = v55;
          v171 = v8;
          v173 = v6;
          if ((_DWORD)v56 != -1)
          {
            if (v43[288])
            {
              v56 = (int)v56;
              *((_QWORD *)v43 + 35) += (int)v56;
              if (!a3)
                goto LABEL_150;
            }
            else
            {
              v43[288] = 1;
              *((_QWORD *)v43 + 35) = 0;
              v56 = *((int *)v4 + 9);
              *((_QWORD *)v43 + 35) = v56;
              if (!a3)
                goto LABEL_150;
            }
            v57 = *(_DWORD *)a3;
            if (*(_DWORD *)a3 == 4)
            {
              if (*((_QWORD *)this + 11) - *((_QWORD *)this + 10) == 4)
                v6 = -1;
              v67 = *((_QWORD *)this + 121);
              v68 = *(char **)(v67 + 1440);
              if (v68)
              {
                while (1)
                {
                  while (1)
                  {
                    v70 = v68;
                    v71 = *((_DWORD *)v68 + 8);
                    if (v6 >= v71)
                      break;
                    v68 = *(char **)v70;
                    v69 = (uint64_t **)v70;
                    if (!*(_QWORD *)v70)
                      goto LABEL_129;
                  }
                  if (v71 >= v6)
                    break;
                  v68 = (char *)*((_QWORD *)v70 + 1);
                  if (!v68)
                  {
                    v69 = (uint64_t **)(v70 + 8);
                    goto LABEL_129;
                  }
                }
              }
              else
              {
                v69 = (uint64_t **)(v67 + 1440);
                v70 = (char *)(v67 + 1440);
LABEL_129:
                v72 = v70;
                v70 = (char *)operator new(0x58uLL);
                *((_DWORD *)v70 + 8) = v6;
                *(_OWORD *)(v70 + 40) = 0u;
                *(_OWORD *)(v70 + 56) = 0u;
                *(_OWORD *)(v70 + 72) = 0u;
                *(_QWORD *)v70 = 0;
                *((_QWORD *)v70 + 1) = 0;
                *((_QWORD *)v70 + 2) = v72;
                *v69 = (uint64_t *)v70;
                v73 = **(_QWORD **)(v67 + 1432);
                v74 = (uint64_t *)v70;
                if (v73)
                {
                  *(_QWORD *)(v67 + 1432) = v73;
                  v74 = *v69;
                }
                std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v67 + 1440), v74);
                ++*(_QWORD *)(v67 + 1448);
                v56 = *((int *)v4 + 9);
              }
              *((_QWORD *)v70 + 9) += v56;
              v66 = v70 + 80;
            }
            else if (v57 == 2)
            {
              v75 = *(_QWORD *)((char *)v4 + 156);
              if ((v75 & 0xFF00000000) == 0)
                LODWORD(v75) = -1;
              if ((*((_QWORD *)v4 + 23) & 0xFF00000000) != 0)
                v76 = *((_QWORD *)v4 + 23);
              else
                v76 = v75;
              v77 = *((_QWORD *)this + 121);
              v78 = *(char **)(v77 + 1440);
              if (v78)
              {
                while (1)
                {
                  while (1)
                  {
                    v80 = v78;
                    v81 = *((_DWORD *)v78 + 8);
                    if (v76 >= v81)
                      break;
                    v78 = *(char **)v80;
                    v79 = (uint64_t **)v80;
                    if (!*(_QWORD *)v80)
                      goto LABEL_145;
                  }
                  if (v81 >= v76)
                    break;
                  v78 = (char *)*((_QWORD *)v80 + 1);
                  if (!v78)
                  {
                    v79 = (uint64_t **)(v80 + 8);
                    goto LABEL_145;
                  }
                }
              }
              else
              {
                v79 = (uint64_t **)(v77 + 1440);
                v80 = (char *)(v77 + 1440);
LABEL_145:
                v82 = v80;
                v80 = (char *)operator new(0x58uLL);
                *((_DWORD *)v80 + 8) = v76;
                *(_OWORD *)(v80 + 40) = 0u;
                *(_OWORD *)(v80 + 56) = 0u;
                *(_OWORD *)(v80 + 72) = 0u;
                *(_QWORD *)v80 = 0;
                *((_QWORD *)v80 + 1) = 0;
                *((_QWORD *)v80 + 2) = v82;
                *v79 = (uint64_t *)v80;
                v83 = **(_QWORD **)(v77 + 1432);
                v84 = (uint64_t *)v80;
                if (v83)
                {
                  *(_QWORD *)(v77 + 1432) = v83;
                  v84 = *v79;
                }
                std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v77 + 1440), v84);
                ++*(_QWORD *)(v77 + 1448);
                v56 = *((int *)v4 + 9);
              }
              *((_QWORD *)v80 + 7) += v56;
              v66 = v80 + 64;
            }
            else
            {
              if (v57 != 1)
                goto LABEL_150;
              if (*((_QWORD *)this + 11) - *((_QWORD *)this + 10) == 4)
                v6 = -1;
              v58 = *((_QWORD *)this + 121);
              v59 = *(char **)(v58 + 1440);
              if (v59)
              {
                while (1)
                {
                  while (1)
                  {
                    v61 = v59;
                    v62 = *((_DWORD *)v59 + 8);
                    if (v6 >= v62)
                      break;
                    v59 = *(char **)v61;
                    v60 = (uint64_t **)v61;
                    if (!*(_QWORD *)v61)
                      goto LABEL_116;
                  }
                  if (v62 >= v6)
                    break;
                  v59 = (char *)*((_QWORD *)v61 + 1);
                  if (!v59)
                  {
                    v60 = (uint64_t **)(v61 + 8);
                    goto LABEL_116;
                  }
                }
              }
              else
              {
                v60 = (uint64_t **)(v58 + 1440);
                v61 = (char *)(v58 + 1440);
LABEL_116:
                v63 = v61;
                v61 = (char *)operator new(0x58uLL);
                *((_DWORD *)v61 + 8) = v6;
                *(_OWORD *)(v61 + 40) = 0u;
                *(_OWORD *)(v61 + 56) = 0u;
                *(_OWORD *)(v61 + 72) = 0u;
                *(_QWORD *)v61 = 0;
                *((_QWORD *)v61 + 1) = 0;
                *((_QWORD *)v61 + 2) = v63;
                *v60 = (uint64_t *)v61;
                v64 = **(_QWORD **)(v58 + 1432);
                v65 = (uint64_t *)v61;
                if (v64)
                {
                  *(_QWORD *)(v58 + 1432) = v64;
                  v65 = *v60;
                }
                std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v58 + 1440), v65);
                ++*(_QWORD *)(v58 + 1448);
                v56 = *((int *)v4 + 9);
              }
              *((_QWORD *)v61 + 5) += v56;
              v66 = v61 + 48;
            }
            ++*v66;
          }
LABEL_150:
          if ((*((_BYTE *)v4 + 40) & 2) == 0)
            goto LABEL_156;
          ++*((_DWORD *)v43 + 78);
          if (*((_BYTE *)this + 864))
          {
            v85 = *((_QWORD *)v4 + 2);
            if (*((_QWORD *)this + 107) >= v85)
            {
LABEL_156:
              v86 = *((_QWORD *)v4 + 18);
              v87 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 88) + 16))((char *)this + 704);
              if (*((_QWORD *)this + 94) == -1)
              {
                v88 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 88) + 16))((char *)this + 704);
                *((_QWORD *)this + 95) = v88;
                *((_QWORD *)this + 94) = v88;
                *((_QWORD *)this + 93) = 0;
                **((_QWORD **)this + 91) = 0;
              }
              v89 = 0;
              v90 = *((_QWORD *)this + 90);
              v170 = v7;
              while (1)
              {
                v91 = *((_QWORD *)this + 94);
                v92 = *((_QWORD *)this + 89);
                if (v92 + v91 > v87)
                  break;
                *((_QWORD *)this + 94) = v92 + v91;
                v93 = (*((_QWORD *)this + 93) + 1) % (v90 + 1);
                *((_QWORD *)this + 93) = v93;
                v94 = *((_QWORD *)this + 91);
                *(_QWORD *)(v94 + 8 * v93) = 0;
                if (++v89 > v90)
                {
                  v92 = *((_QWORD *)this + 89);
                  v91 = *((_QWORD *)this + 94);
                  goto LABEL_163;
                }
              }
              v94 = *((_QWORD *)this + 91);
              v93 = *((_QWORD *)this + 93);
LABEL_163:
              *((_QWORD *)this + 94) = v91 + (v87 - v91) / v92 * v92;
              *(_QWORD *)(v94 + 8 * v93) += v86;
              *((_QWORD *)this + 92) += v86;
              v95 = *((_QWORD *)this + 121);
              v96 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v95 + 24) + 16))(*(_QWORD *)(v95 + 24));
              v97 = v96 / 0x3E8uLL;
              if (v96 % 0x3E8uLL > 0x1F3)
                ++v97;
              if (-v96 % 0x3E8uLL <= 0x1F4)
                v98 = 0;
              else
                v98 = -1;
              if (v96 < 0)
                v99 = v98 - -v96 / 0x3E8uLL;
              else
                v99 = v97;
              v100 = *(_QWORD *)(v95 + 1416);
              if (v100)
              {
                v175 = vdupq_n_s64(1uLL);
                while (1)
                {
                  v101 = *(_QWORD *)(v95 + 1400);
                  if (*(_QWORD *)(v101 + 40) > (int64_t)(v99 - 800))
                    break;
                  v102.i64[1] = v175.i64[1];
                  v103.i64[1] = v175.i64[1];
                  v104 = *(_DWORD *)(v101 + 48);
                  v105 = *(_DWORD *)(v101 + 52);
                  v103.i64[0] = v104;
                  v102.i64[0] = v105;
                  v106 = vaddq_s64(*(int64x2_t *)(v95 + 80), v102);
                  *(int64x2_t *)(v95 + 64) = vaddq_s64(*(int64x2_t *)(v95 + 64), v103);
                  *(int64x2_t *)(v95 + 80) = v106;
                  v107 = *(_QWORD *)(v95 + 1384);
                  if (v107 >= 2)
                  {
                    v108 = *(_DWORD *)(v101 + 56);
                    if (v107 > v108)
                    {
                      v109 = v107 + ~v108;
                      v110 = (_QWORD *)(v95 + 184);
                      if (v109 >= 1)
                      {
                        v110 = (_QWORD *)(v95 + 184);
                        if (*(_QWORD *)(v95 + 1392) > (unint64_t)(v105 * v104))
                        {
                          *(int64x2_t *)(v95 + 176) = vaddq_s64(*(int64x2_t *)(v95 + 176), vdupq_n_s64(1uLL));
                          *(_QWORD *)(v95 + 192) += v109;
                          v110 = (_QWORD *)(v95 + 200);
                        }
                      }
                      ++*v110;
                    }
                  }
                  v111 = *(_QWORD **)(v101 + 8);
                  v112 = (_QWORD *)v101;
                  if (v111)
                  {
                    do
                    {
                      v113 = v111;
                      v111 = (_QWORD *)*v111;
                    }
                    while (v111);
                  }
                  else
                  {
                    do
                    {
                      v113 = (_QWORD *)v112[2];
                      v17 = *v113 == (_QWORD)v112;
                      v112 = v113;
                    }
                    while (!v17);
                  }
                  *(_QWORD *)(v95 + 1400) = v113;
                  *(_QWORD *)(v95 + 1416) = v100 - 1;
                  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v95 + 1408), (uint64_t *)v101);
                  operator delete((void *)v101);
                  v100 = *(_QWORD *)(v95 + 1416);
                  if (!v100)
                    goto LABEL_190;
                }
                if (v100 > 0x96 || (*((_DWORD *)v4 + 38) - *(_DWORD *)(v101 + 32)) >= 0xDBBA1)
                {
                  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(v95 + 1408));
                  *(_QWORD *)(v95 + 1400) = v95 + 1408;
                  *(_OWORD *)(v95 + 1408) = 0u;
                }
              }
LABEL_190:
              v114 = *((_DWORD *)v4 + 38);
              v115 = (uint64_t **)(v95 + 1408);
              v116 = *(uint64_t **)(v95 + 1408);
              if (!v116)
              {
                v129 = *(_QWORD *)v4;
                v130 = (uint64_t **)(v95 + 1408);
                v119 = v171;
                v120 = v169;
LABEL_237:
                v136 = operator new(0x40uLL);
                v136[8] = v114;
                *((_QWORD *)v136 + 5) = v99;
                *((_QWORD *)v136 + 6) = v129;
                v136[14] = v173;
                *(_QWORD *)v136 = 0;
                *((_QWORD *)v136 + 1) = 0;
                *((_QWORD *)v136 + 2) = v130;
                *v115 = (uint64_t *)v136;
                v137 = **(_QWORD **)(v95 + 1400);
                if (v137)
                {
                  *(_QWORD *)(v95 + 1400) = v137;
                  v138 = *v115;
                }
                else
                {
                  v138 = (uint64_t *)v136;
                }
                std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v95 + 1408), v138);
                ++*(_QWORD *)(v95 + 1416);
LABEL_241:
                webrtc::StatsCounter::Add((webrtc::StatsCounter *)(v95 + 392), 1);
                v139 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 96) + 16))(v119);
                if (*((_QWORD *)this + 102) == -1)
                {
                  v140 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 96) + 16))(v119);
                  *((_QWORD *)this + 103) = v140;
                  *((_QWORD *)this + 102) = v140;
                  *((_QWORD *)this + 101) = 0;
                  **((_QWORD **)this + 99) = 0;
                }
                v141 = 0;
                v142 = *((_QWORD *)this + 98);
                v7 = v170;
                while (1)
                {
                  v143 = *((_QWORD *)this + 102);
                  v144 = *((_QWORD *)this + 97);
                  if (v144 + v143 > v139)
                    break;
                  *((_QWORD *)this + 102) = v144 + v143;
                  v145 = (*((_QWORD *)this + 101) + 1) % (v142 + 1);
                  *((_QWORD *)this + 101) = v145;
                  v146 = *((_QWORD *)this + 99);
                  *(_QWORD *)(v146 + 8 * v145) = 0;
                  if (++v141 > v142)
                  {
                    v144 = *((_QWORD *)this + 97);
                    v143 = *((_QWORD *)this + 102);
                    goto LABEL_248;
                  }
                }
                v146 = *((_QWORD *)this + 99);
                v145 = *((_QWORD *)this + 101);
LABEL_248:
                *((_QWORD *)this + 102) = v143 + (v139 - v143) / v144 * v144;
                ++*(_QWORD *)(v146 + 8 * v145);
                ++*((_QWORD *)this + 100);
                if (!v120)
                  goto LABEL_257;
                goto LABEL_249;
              }
              v117 = (uint64_t **)(v95 + 1408);
              v118 = *(_QWORD *)(v95 + 1408);
              v119 = v171;
              v120 = v169;
              do
              {
                v121 = *(_DWORD *)(v118 + 32);
                v122 = v114 - v121;
                v124 = v114 != v121 && v122 >= 0;
                v125 = v114 > v121;
                if (v122 != 0x80000000)
                  v125 = v124;
                v126 = !v125;
                if (v125)
                  v127 = (uint64_t *)(v118 + 8);
                else
                  v127 = (uint64_t *)v118;
                if (v126)
                  v117 = (uint64_t **)v118;
                v118 = *v127;
              }
              while (*v127);
              if (v117 != v115)
              {
                v128 = *((_DWORD *)v117 + 8);
                if (v128 - v114 == 0x80000000)
                {
                  if (v128 <= v114)
                    goto LABEL_228;
                }
                else if (v128 == v114 || ((v128 - v114) & 0x80000000) != 0)
                {
LABEL_228:
                  v132 = *(_DWORD *)v4;
                  v133 = *((_DWORD *)v117 + 13);
                  if (*((_DWORD *)v117 + 12) > *(_DWORD *)v4)
                    v132 = *((_DWORD *)v117 + 12);
                  *((_DWORD *)v117 + 12) = v132;
                  v134 = *((_DWORD *)v4 + 1);
                  if (v133 > v134)
                    v134 = v133;
                  v135 = *((_DWORD *)v117 + 14);
                  if (v135 <= v173)
                    v135 = v173;
                  *((_DWORD *)v117 + 13) = v134;
                  *((_DWORD *)v117 + 14) = v135;
                  v7 = v170;
                  if (!v169)
                  {
LABEL_257:
                    if (*((_BYTE *)this + 908))
                    {
                      v155 = *((unsigned int *)this + 225);
                      v156 = (int64x2_t *)*((_QWORD *)this + 121);
                      *((_BYTE *)this + 549) |= (int)v155 > 0;
                      if ((int)v155 <= 0)
                      {
                        ++v156[8].i64[1];
                      }
                      else
                      {
                        v157 = vdupq_n_s64(1uLL);
                        v158 = vaddq_s64(v156[8], v157);
                        v157.i64[0] = v155;
                        v159 = vaddq_s64(v156[9], v157);
                        v156[8] = v158;
                        v156[9] = v159;
                      }
                    }
                    goto LABEL_270;
                  }
LABEL_249:
                  v147 = (*(uint64_t (**)(char *))(*((_QWORD *)v46 + 6) + 16))(v46 + 48);
                  if (*((_QWORD *)v46 + 12) == -1)
                  {
                    v148 = (*(uint64_t (**)(char *))(*((_QWORD *)v46 + 6) + 16))(v46 + 48);
                    *((_QWORD *)v46 + 12) = v148;
                    *((_QWORD *)v46 + 13) = v148;
                    *((_QWORD *)v46 + 11) = 0;
                    **((_QWORD **)v46 + 9) = 0;
                  }
                  v149 = 0;
                  v150 = *((_QWORD *)v46 + 8);
                  while (1)
                  {
                    v151 = *((_QWORD *)v46 + 12);
                    v152 = *((_QWORD *)v46 + 7);
                    if (v152 + v151 > v147)
                      break;
                    v153 = (*((_QWORD *)v46 + 11) + 1) % (v150 + 1);
                    *((_QWORD *)v46 + 11) = v153;
                    *((_QWORD *)v46 + 12) = v152 + v151;
                    v154 = *((_QWORD *)v46 + 9);
                    *(_QWORD *)(v154 + 8 * v153) = 0;
                    if (++v149 > v150)
                    {
                      v152 = *((_QWORD *)v46 + 7);
                      v151 = *((_QWORD *)v46 + 12);
                      goto LABEL_256;
                    }
                  }
                  v154 = *((_QWORD *)v46 + 9);
                  v153 = *((_QWORD *)v46 + 11);
LABEL_256:
                  *((_QWORD *)v46 + 12) = v151 + (v147 - v151) / v152 * v152;
                  ++*(_QWORD *)(v154 + 8 * v153);
                  ++*((_QWORD *)v46 + 10);
                  goto LABEL_257;
                }
              }
              v129 = *(_QWORD *)v4;
              while (1)
              {
                while (1)
                {
                  v130 = (uint64_t **)v116;
                  v131 = *((_DWORD *)v116 + 8);
                  if (v131 - v114 == 0x80000000)
                    break;
                  if (v131 == v114 || ((v131 - v114) & 0x80000000) != 0)
                    goto LABEL_221;
LABEL_215:
                  v116 = *v130;
                  if (!*v130)
                  {
                    v115 = v130;
                    goto LABEL_237;
                  }
                }
                if (v131 > v114)
                  goto LABEL_215;
LABEL_221:
                if (v114 - v131 == 0x80000000)
                {
                  if (v131 >= v114)
                    goto LABEL_241;
                }
                else if (v131 == v114 || ((v114 - v131) & 0x80000000) != 0)
                {
                  goto LABEL_241;
                }
                v116 = v130[1];
                if (!v116)
                {
                  v115 = v130 + 1;
                  goto LABEL_237;
                }
              }
            }
          }
          else
          {
            v85 = *((_QWORD *)v4 + 2);
          }
          *((_QWORD *)this + 107) = v85;
          *((_BYTE *)this + 864) = 1;
          ++*((_DWORD *)this + 158);
          goto LABEL_156;
        }
      }
      if (((*((_DWORD *)v43 + 6) != 0) & ~v55) != 0)
        goto LABEL_97;
      goto LABEL_96;
    }
LABEL_268:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v162, v163, v164, v165, v166, v167, v168, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/send_statistics_proxy.cc");
    goto LABEL_270;
  }
  v172 = v6;
  v24 = (void **)((char *)this + 912);
  v25 = *((char *)this + 935);
  if (v25 < 0)
  {
    v26 = *((_QWORD *)this + 115);
    if (v26 < 0)
      goto LABEL_271;
    v27 = (char *)*v24;
    if (v26)
    {
      if (!v27)
        goto LABEL_271;
    }
  }
  else
  {
    v26 = *((unsigned __int8 *)this + 935);
    v27 = (char *)this + 912;
  }
  if (v26 == 6)
  {
    v28 = *(_DWORD *)v27;
    v29 = *((unsigned __int16 *)v27 + 2);
    v31 = v28 == 1986161004 && v29 == 30832;
  }
  else
  {
    v31 = 0;
  }
  v32 = (char *)this + 936;
  if (*((char *)this + 959) < 0)
  {
    v33 = *((_QWORD *)this + 118);
    if (v33 < 0)
      goto LABEL_271;
    v32 = *(char **)v32;
    if (v33)
    {
      if (!v32)
        goto LABEL_271;
    }
  }
  else
  {
    v33 = *((unsigned __int8 *)this + 959);
  }
  if (v33 == 6)
  {
    v34 = *(_DWORD *)v32;
    v35 = *((unsigned __int16 *)v32 + 2);
    v23 = v34 == 1986161004 && v35 == 30832;
  }
  else
  {
    v23 = 0;
  }
  if ((*((_BYTE *)this + 959) & 0x80) == 0)
  {
    if ((v25 & 0x80) == 0)
      goto LABEL_71;
LABEL_74:
    operator delete(*v24);
    *((_BYTE *)this + 960) = 0;
    v38 = v23 || v31;
    v8 = (char *)this + 768;
    v6 = v172;
    if (v38 != 1)
      goto LABEL_79;
    goto LABEL_75;
  }
  operator delete(*((void **)this + 117));
  if ((*((_BYTE *)this + 935) & 0x80) != 0)
    goto LABEL_74;
LABEL_71:
  *((_BYTE *)this + 960) = 0;
  v37 = v23 || v31;
  v8 = (char *)this + 768;
  v6 = v172;
  if (v37 != 1)
    goto LABEL_79;
LABEL_75:
  if (!v23)
  {
LABEL_261:
    *((_BYTE *)this + 596) = 1;
    ++*(_DWORD *)(v18 + 1108);
    goto LABEL_262;
  }
  if (*((_BYTE *)this + 348))
  {
    if (*((_DWORD *)this + 86) < v11)
    {
LABEL_78:
      *(_BYTE *)(v18 + 1104) = 0;
      goto LABEL_79;
    }
    goto LABEL_261;
  }
LABEL_271:
  __break(1u);
}

uint64_t webrtc::SendStatisticsProxy::OnEncoderImplementationChanged(uint64_t a1, __int128 *a2, unsigned __int8 a3)
{
  pthread_mutex_t *v6;
  __int128 *v7;
  __int128 v8;
  void **v9;
  void **v10;
  int v11;
  char v12;
  __int128 v13;
  const std::string::value_type *v14;
  size_t v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  std::string __p;
  std::string v23;

  v6 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  v7 = (__int128 *)(a1 + 440);
  std::optional<std::string>::value_or[abi:sn180100]<char const(&)[8]>((std::string *)"unknown", a1 + 440, &__p);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v9 = (void **)(a1 + 912);
    if (*(_BYTE *)(a1 + 960))
      goto LABEL_3;
LABEL_9:
    *(std::string *)v9 = __p;
    *(std::string *)(a1 + 936) = v23;
    *(_BYTE *)(a1 + 960) = 1;
    if (!*(_BYTE *)(a1 + 464))
      goto LABEL_25;
    goto LABEL_13;
  }
  v8 = *a2;
  v23.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v9 = (void **)(a1 + 912);
  if (!*(_BYTE *)(a1 + 960))
    goto LABEL_9;
LABEL_3:
  if (*(char *)(a1 + 935) < 0)
    operator delete(*v9);
  *(std::string *)v9 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  v10 = (void **)(a1 + 936);
  if (*(char *)(a1 + 959) < 0)
  {
    operator delete(*v10);
    v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_OWORD *)v10 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 952) = *((_QWORD *)&v23.__r_.__value_.__l + 2);
    *((_BYTE *)&v23.__r_.__value_.__s + 23) = 0;
    v23.__r_.__value_.__s.__data_[0] = 0;
    if (v11 < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 464))
        goto LABEL_13;
    }
    else if (*(_BYTE *)(a1 + 464))
    {
      goto LABEL_13;
    }
LABEL_25:
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a1 + 440), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v16 = *a2;
      *(_QWORD *)(a1 + 456) = *((_QWORD *)a2 + 2);
      *v7 = v16;
    }
    *(_BYTE *)(a1 + 464) = 1;
    goto LABEL_30;
  }
  *(_OWORD *)v10 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 952) = *((_QWORD *)&v23.__r_.__value_.__l + 2);
  if (!*(_BYTE *)(a1 + 464))
    goto LABEL_25;
LABEL_13:
  if (v7 != a2)
  {
    v12 = *((_BYTE *)a2 + 23);
    if (*(char *)(a1 + 463) < 0)
    {
      if (v12 >= 0)
        v14 = (const std::string::value_type *)a2;
      else
        v14 = *(const std::string::value_type **)a2;
      if (v12 >= 0)
        v15 = *((unsigned __int8 *)a2 + 23);
      else
        v15 = *((_QWORD *)a2 + 1);
      std::string::__assign_no_alias<false>((std::string *)(a1 + 440), v14, v15);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)(a1 + 440), *(char **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      *(_QWORD *)(a1 + 456) = *((_QWORD *)a2 + 2);
      *v7 = v13;
    }
  }
LABEL_30:
  *(_WORD *)(a1 + 636) = a3 | 0x100;
  v17 = *(_QWORD **)(a1 + 600);
  if (v17 != (_QWORD *)(a1 + 608))
  {
    do
    {
      if (*((_BYTE *)v17 + 357))
        *((_BYTE *)v17 + 357) = 0;
      v19 = (_QWORD *)v17[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v17[2];
          v21 = *v20 == (_QWORD)v17;
          v17 = v20;
        }
        while (!v21);
      }
      v17 = v20;
    }
    while (v20 != (_QWORD *)(a1 + 608));
  }
  return pthread_mutex_unlock(v6);
}

webrtc::SendStatisticsProxy *webrtc::SendStatisticsProxy::GetInputFrameRate(webrtc::SendStatisticsProxy *this)
{
  webrtc::SendStatisticsProxy *v1;
  pthread_mutex_t *v2;

  v1 = this;
  v2 = (pthread_mutex_t *)((char *)this + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  LODWORD(v1) = llround(rtc::RateTracker::ComputeRateForInterval((rtc::RateTracker *)(*((_QWORD *)v1 + 121) + 240), *(_QWORD *)(*((_QWORD *)v1 + 121) + 256) * *(_QWORD *)(*((_QWORD *)v1 + 121) + 248)));
  pthread_mutex_unlock(v2);
  return v1;
}

uint64_t webrtc::SendStatisticsProxy::OnIncomingFrame(webrtc::SendStatisticsProxy *this, int a2, int a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v6 = (pthread_mutex_t *)((char *)this + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  v7 = *((_QWORD *)this + 121);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 240) + 16))(v7 + 240);
  if (*(_QWORD *)(v7 + 288) == -1)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 240) + 16))(v7 + 240);
    *(_QWORD *)(v7 + 288) = v9;
    *(_QWORD *)(v7 + 296) = v9;
    *(_QWORD *)(v7 + 280) = 0;
    **(_QWORD **)(v7 + 264) = 0;
  }
  v10 = 0;
  v11 = *(_QWORD *)(v7 + 256);
  while (1)
  {
    v12 = *(_QWORD *)(v7 + 288);
    v13 = *(_QWORD *)(v7 + 248);
    if (v13 + v12 > v8)
      break;
    v14 = (*(_QWORD *)(v7 + 280) + 1) % (v11 + 1);
    *(_QWORD *)(v7 + 280) = v14;
    *(_QWORD *)(v7 + 288) = v13 + v12;
    v15 = *(_QWORD *)(v7 + 264);
    *(_QWORD *)(v15 + 8 * v14) = 0;
    if (++v10 > v11)
    {
      v13 = *(_QWORD *)(v7 + 248);
      v12 = *(_QWORD *)(v7 + 288);
      goto LABEL_8;
    }
  }
  v15 = *(_QWORD *)(v7 + 264);
  v14 = *(_QWORD *)(v7 + 280);
LABEL_8:
  *(_QWORD *)(v7 + 288) = v12 + (v8 - v12) / v13 * v13;
  ++*(_QWORD *)(v15 + 8 * v14);
  ++*(_QWORD *)(v7 + 272);
  webrtc::StatsCounter::Add((webrtc::StatsCounter *)(*((_QWORD *)this + 121) + 304), 1);
  v16 = (int64x2_t *)*((_QWORD *)this + 121);
  v17 = vdupq_n_s64(1uLL);
  v18.i64[1] = v17.i64[1];
  v18.i64[0] = a2;
  v17.i64[0] = a3;
  v19 = vaddq_s64(v16[3], v17);
  v16[2] = vaddq_s64(v16[2], v18);
  v16[3] = v19;
  if (*((_BYTE *)this + 896))
  {
    if (*((_BYTE *)this + 550))
      ++v16[10].i64[0];
    ++v16[10].i64[1];
  }
  if (!*((_QWORD *)this + 100))
  {
    v20 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 96) + 16))((char *)this + 768);
    if (*((_QWORD *)this + 102) == -1)
    {
      v21 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 96) + 16))((char *)this + 768);
      *((_QWORD *)this + 103) = v21;
      *((_QWORD *)this + 102) = v21;
      *((_QWORD *)this + 101) = 0;
      **((_QWORD **)this + 99) = 0;
    }
    v22 = 0;
    v23 = *((_QWORD *)this + 98);
    while (1)
    {
      v24 = *((_QWORD *)this + 102);
      v25 = *((_QWORD *)this + 97);
      if (v25 + v24 > v20)
        break;
      *((_QWORD *)this + 102) = v25 + v24;
      v26 = (*((_QWORD *)this + 101) + 1) % (v23 + 1);
      *((_QWORD *)this + 101) = v26;
      *(_QWORD *)(*((_QWORD *)this + 99) + 8 * v26) = 0;
      if (++v22 > v23)
      {
        v25 = *((_QWORD *)this + 97);
        v24 = *((_QWORD *)this + 102);
        break;
      }
    }
    *((_QWORD *)this + 102) = v24 + (v20 - v24) / v25 * v25;
  }
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::SendStatisticsProxy::OnFrameDropped(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  uint64_t result;

  v4 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  switch(a2)
  {
    case 0:
      ++*(_DWORD *)(a1 + 516);
      goto LABEL_3;
    case 1:
      ++*(_DWORD *)(a1 + 520);
      result = pthread_mutex_unlock(v4);
      break;
    case 2:
      ++*(_DWORD *)(a1 + 524);
      result = pthread_mutex_unlock(v4);
      break;
    case 3:
      ++*(_DWORD *)(a1 + 536);
      result = pthread_mutex_unlock(v4);
      break;
    case 4:
      ++*(_DWORD *)(a1 + 528);
      result = pthread_mutex_unlock(v4);
      break;
    case 5:
      ++*(_DWORD *)(a1 + 532);
      result = pthread_mutex_unlock(v4);
      break;
    default:
LABEL_3:
      result = pthread_mutex_unlock(v4);
      break;
  }
  return result;
}

uint64_t webrtc::SendStatisticsProxy::ClearAdaptationStats(webrtc::SendStatisticsProxy *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  *((_QWORD *)this + 111) = 0;
  *(_QWORD *)((char *)this + 900) = 0;
  webrtc::SendStatisticsProxy::UpdateAdaptationStats(this);
  return pthread_mutex_unlock(v2);
}

uint64_t webrtc::SendStatisticsProxy::UpdateAdaptationStats(webrtc::SendStatisticsProxy *this)
{
  int v2;
  int v3;
  BOOL v4;
  char v5;
  BOOL v6;
  int v7;
  int v8;
  BOOL v9;
  char v10;
  BOOL v11;
  char v12;
  char *v13;
  int v14;
  uint64_t result;
  BOOL v16;
  char v17;
  int v18;
  _BYTE *v19;

  v2 = *((unsigned __int8 *)this + 897);
  if (*((_BYTE *)this + 897))
    v3 = *((_DWORD *)this + 223);
  else
    v3 = 0;
  if (*((_BYTE *)this + 896))
    v4 = *((_DWORD *)this + 222) <= 0;
  else
    v4 = 1;
  v5 = !v4;
  if (*((_BYTE *)this + 897))
    v6 = v3 <= 0;
  else
    v6 = 1;
  v7 = !v6;
  if ((v5 & 1) != 0)
    v8 = 1;
  else
    v8 = v7;
  if (*((_BYTE *)this + 908))
    v9 = *((_DWORD *)this + 225) <= 0;
  else
    v9 = 1;
  v10 = !v9;
  if (*((_BYTE *)this + 909))
    v11 = *((_DWORD *)this + 226) <= 0;
  else
    v11 = 1;
  v12 = !v11;
  if ((v10 & 1) != 0 || (v12 & 1) != 0 || *((_BYTE *)this + 885) || *((_BYTE *)this + 886))
  {
    v13 = (char *)this + 656;
    v14 = 2;
  }
  else
  {
    v13 = (char *)this + 656;
    v14 = v8 != 0;
  }
  result = webrtc::QualityLimitationReasonTracker::SetReason((uint64_t)v13, v14);
  *((_BYTE *)this + 550) = v5;
  if (v2)
    v16 = v3 <= 0;
  else
    v16 = 1;
  v17 = !v16;
  *((_BYTE *)this + 552) = v17;
  *((_BYTE *)this + 549) = v10;
  *((_BYTE *)this + 551) = v12;
  if (*((_BYTE *)this + 885))
  {
    v18 = *((_DWORD *)this + 106);
    v19 = (char *)this + 549;
    if (v18)
    {
      if (v18 != 1)
        goto LABEL_47;
      v19 = (char *)this + 551;
    }
    *v19 = 1;
  }
LABEL_47:
  if (*((_BYTE *)this + 886))
    *((_BYTE *)this + 549) = 1;
  *((_DWORD *)this + 139) = *((_DWORD *)this + 166);
  return result;
}

uint64_t webrtc::SendStatisticsProxy::UpdateAdaptationSettings(uint64_t a1, __int16 a2, __int16 a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  *(_WORD *)(a1 + 896) = a2;
  *(_WORD *)(a1 + 908) = a3;
  v7 = *(_QWORD *)(a1 + 968);
  if (a2)
  {
    if (!*(_BYTE *)(a1 + 548))
    {
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
      v9 = v8 / 0x3E8uLL;
      if (v8 % 0x3E8uLL > 0x1F3)
        ++v9;
      if (-v8 % 0x3E8uLL <= 0x1F4)
        v10 = 0;
      else
        v10 = -1;
      if (v8 < 0)
        v9 = v10 - -v8 / 0x3E8uLL;
      if (*(_QWORD *)(v7 + 1024) == -1)
        goto LABEL_21;
    }
  }
  else
  {
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
    v12 = v11 / 0x3E8uLL;
    if (v11 % 0x3E8uLL > 0x1F3)
      ++v12;
    if (-v11 % 0x3E8uLL <= 0x1F4)
      v13 = 0;
    else
      v13 = -1;
    if (v11 < 0)
      v12 = v13 - -v11 / 0x3E8uLL;
    v14 = *(_QWORD *)(v7 + 1024);
    if (v14 != -1)
    {
      *(_QWORD *)(v7 + 1032) += v12 - v14;
      v9 = -1;
LABEL_21:
      *(_QWORD *)(v7 + 1024) = v9;
    }
  }
  v15 = *(_QWORD *)(a1 + 968);
  if (*(unsigned __int8 *)(a1 + 909) | *(unsigned __int8 *)(a1 + 908))
  {
    if (!*(_BYTE *)(a1 + 548))
    {
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
      v17 = v16 / 0x3E8uLL;
      if (v16 % 0x3E8uLL > 0x1F3)
        ++v17;
      v18 = -v16 % 0x3E8uLL <= 0x1F4 ? 0 : -1;
      if (v16 < 0)
        v17 = v18 - -v16 / 0x3E8uLL;
      if (*(_QWORD *)(v15 + 1040) == -1)
        goto LABEL_42;
    }
  }
  else
  {
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
    v20 = v19 / 0x3E8uLL;
    if (v19 % 0x3E8uLL > 0x1F3)
      ++v20;
    if (-v19 % 0x3E8uLL <= 0x1F4)
      v21 = 0;
    else
      v21 = -1;
    if (v19 < 0)
      v20 = v21 - -v19 / 0x3E8uLL;
    v22 = *(_QWORD *)(v15 + 1040);
    if (v22 != -1)
    {
      *(_QWORD *)(v15 + 1048) += v20 - v22;
      v17 = -1;
LABEL_42:
      *(_QWORD *)(v15 + 1040) = v17;
    }
  }
  webrtc::SendStatisticsProxy::UpdateAdaptationStats((webrtc::SendStatisticsProxy *)a1);
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::SendStatisticsProxy::OnAdaptationChanged(uint64_t a1, int a2, _QWORD *a3, uint64_t *a4)
{
  pthread_mutex_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v17;

  v8 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  v9 = *(unsigned __int8 *)(a1 + 908);
  v10 = *(_DWORD *)(a1 + 900);
  *(_QWORD *)(a1 + 888) = *a3;
  v11 = *a4;
  *(_QWORD *)(a1 + 900) = *a4;
  if (a2)
  {
    if (a2 == 1)
      ++*(_DWORD *)(a1 + 588);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 968);
    v13 = *(_DWORD *)(v12 + 1424);
    if (v9)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (!v14 && v10 >= 1 && v10 > (int)v11)
    {
      v17 = *(_DWORD *)(v12 + 1428);
      if (v13 > v17)
        *(_DWORD *)(v12 + 1428) = v17 + 1;
    }
    ++*(_DWORD *)(a1 + 592);
  }
  webrtc::SendStatisticsProxy::UpdateAdaptationStats((webrtc::SendStatisticsProxy *)a1);
  return pthread_mutex_unlock(v8);
}

uint64_t webrtc::SendStatisticsProxy::OnBitrateAllocationUpdated(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  pthread_mutex_t *v27;
  int v30;
  char v31;

  if (*(_BYTE *)(a3 + 8))
    v5 = *(_DWORD *)(a3 + 4);
  else
    v5 = 0;
  if (*(_BYTE *)(a3 + 16))
    v6 = *(_DWORD *)(a3 + 12);
  else
    v6 = 0;
  if (*(_BYTE *)(a3 + 24))
    v7 = *(_DWORD *)(a3 + 20);
  else
    v7 = 0;
  if (*(_BYTE *)(a3 + 32))
    v8 = *(_DWORD *)(a3 + 28);
  else
    v8 = 0;
  LOBYTE(v30) = v6 + v5 + v7 + v8 != 0;
  if (*(_BYTE *)(a3 + 40))
    v9 = *(_DWORD *)(a3 + 36);
  else
    v9 = 0;
  if (*(_BYTE *)(a3 + 48))
    v10 = *(_DWORD *)(a3 + 44);
  else
    v10 = 0;
  if (*(_BYTE *)(a3 + 56))
    v11 = *(_DWORD *)(a3 + 52);
  else
    v11 = 0;
  if (*(_BYTE *)(a3 + 64))
    v12 = *(_DWORD *)(a3 + 60);
  else
    v12 = 0;
  BYTE1(v30) = v10 + v9 + v11 + v12 != 0;
  if (*(_BYTE *)(a3 + 72))
    v13 = *(_DWORD *)(a3 + 68);
  else
    v13 = 0;
  if (*(_BYTE *)(a3 + 80))
    v14 = *(_DWORD *)(a3 + 76);
  else
    v14 = 0;
  if (*(_BYTE *)(a3 + 88))
    v15 = *(_DWORD *)(a3 + 84);
  else
    v15 = 0;
  if (*(_BYTE *)(a3 + 96))
    v16 = *(_DWORD *)(a3 + 92);
  else
    v16 = 0;
  BYTE2(v30) = v14 + v13 + v15 + v16 != 0;
  if (*(_BYTE *)(a3 + 104))
    v17 = *(_DWORD *)(a3 + 100);
  else
    v17 = 0;
  if (*(_BYTE *)(a3 + 112))
    v18 = *(_DWORD *)(a3 + 108);
  else
    v18 = 0;
  if (*(_BYTE *)(a3 + 120))
    v19 = *(_DWORD *)(a3 + 116);
  else
    v19 = 0;
  if (*(_BYTE *)(a3 + 128))
    v20 = *(_DWORD *)(a3 + 124);
  else
    v20 = 0;
  HIBYTE(v30) = v18 + v17 + v19 + v20 != 0;
  if (*(_BYTE *)(a3 + 136))
    v21 = *(_DWORD *)(a3 + 132);
  else
    v21 = 0;
  if (*(_BYTE *)(a3 + 144))
    v22 = *(_DWORD *)(a3 + 140);
  else
    v22 = 0;
  if (*(_BYTE *)(a3 + 152))
    v23 = *(_DWORD *)(a3 + 148);
  else
    v23 = 0;
  if (*(_BYTE *)(a3 + 160))
    v24 = *(_DWORD *)(a3 + 156);
  else
    v24 = 0;
  v31 = v22 + v21 + v23 + v24 != 0;
  v25 = a2[104] + a2[68] + a2[140];
  v26 = a2[212] + a2[176] + a2[248] + a2[284] + a2[320];
  v27 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  *(_BYTE *)(a1 + 885) = *(_BYTE *)(a3 + 164);
  webrtc::SendStatisticsProxy::UpdateAdaptationStats((webrtc::SendStatisticsProxy *)a1);
  if (v30 != *(_DWORD *)(a1 + 880) || v31 != *(_BYTE *)(a1 + 884))
  {
    if (*(_DWORD *)(a1 + 872) == v26 && *(_DWORD *)(a1 + 876) == v25)
      ++*(_DWORD *)(a1 + 584);
    *(_DWORD *)(a1 + 880) = v30;
    *(_BYTE *)(a1 + 884) = v31;
  }
  *(_DWORD *)(a1 + 872) = v26;
  *(_DWORD *)(a1 + 876) = v25;
  return pthread_mutex_unlock(v27);
}

uint64_t webrtc::SendStatisticsProxy::OnEncoderInternalScalerUpdate(webrtc::SendStatisticsProxy *this, char a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  *((_BYTE *)this + 886) = a2;
  webrtc::SendStatisticsProxy::UpdateAdaptationStats(this);
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::SendStatisticsProxy::OnInitialQualityResolutionAdaptDown(webrtc::SendStatisticsProxy *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  ++*(_DWORD *)(*((_QWORD *)this + 121) + 1424);
  return pthread_mutex_unlock(v2);
}

uint64_t webrtc::SendStatisticsProxy::RtcpPacketTypesCounterUpdated(uint64_t a1, unsigned int a2, __int128 *a3)
{
  pthread_mutex_t *v6;
  char *StatsEntry;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v6 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  StatsEntry = webrtc::SendStatisticsProxy::GetStatsEntry((webrtc::SendStatisticsProxy *)a1, a2);
  if (!StatsEntry)
    return pthread_mutex_unlock(v6);
  v8 = *a3;
  *((_DWORD *)StatsEntry + 48) = *((_DWORD *)a3 + 4);
  *((_OWORD *)StatsEntry + 11) = v8;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 968) + 1008) != -1)
    return pthread_mutex_unlock(v6);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  v10 = v9 / 0x3E8uLL;
  if (v9 % 0x3E8uLL > 0x1F3)
    ++v10;
  if (-v9 % 0x3E8uLL <= 0x1F4)
    v11 = 0;
  else
    v11 = -1;
  if (v9 < 0)
    v10 = v11 - -v9 / 0x3E8uLL;
  *(_QWORD *)(*(_QWORD *)(a1 + 968) + 1008) = v10;
  return pthread_mutex_unlock(v6);
}

uint64_t `non-virtual thunk to'webrtc::SendStatisticsProxy::RtcpPacketTypesCounterUpdated(uint64_t a1, unsigned int a2, __int128 *a3)
{
  webrtc::SendStatisticsProxy *v6;
  pthread_mutex_t *v7;
  char *StatsEntry;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = (webrtc::SendStatisticsProxy *)(a1 - 16);
  v7 = (pthread_mutex_t *)(a1 + 344);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 344));
  StatsEntry = webrtc::SendStatisticsProxy::GetStatsEntry(v6, a2);
  if (!StatsEntry)
    return pthread_mutex_unlock(v7);
  v9 = *a3;
  *((_DWORD *)StatsEntry + 48) = *((_DWORD *)a3 + 4);
  *((_OWORD *)StatsEntry + 11) = v9;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 952) + 1008) != -1)
    return pthread_mutex_unlock(v7);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  v11 = v10 / 0x3E8uLL;
  if (v10 % 0x3E8uLL > 0x1F3)
    ++v11;
  if (-v10 % 0x3E8uLL <= 0x1F4)
    v12 = 0;
  else
    v12 = -1;
  if (v10 < 0)
    v11 = v12 - -v10 / 0x3E8uLL;
  *(_QWORD *)(*(_QWORD *)(a1 + 952) + 1008) = v11;
  return pthread_mutex_unlock(v7);
}

uint64_t webrtc::SendStatisticsProxy::OnReportBlockDataUpdated(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  char *StatsEntry;
  char *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v4 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  StatsEntry = webrtc::SendStatisticsProxy::GetStatsEntry((webrtc::SendStatisticsProxy *)a1, *(_DWORD *)(a2 + 4));
  if (!StatsEntry)
    return pthread_mutex_unlock(v4);
  v6 = StatsEntry;
  webrtc::ReportBlockStats::Store((uint64_t *)(*(_QWORD *)(a1 + 968) + 1152), *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16));
  v7 = v6[256];
  v9 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 200) = *(_OWORD *)a2;
  *((_QWORD *)v6 + 31) = v10;
  *(_OWORD *)(v6 + 232) = v8;
  *(_OWORD *)(v6 + 216) = v9;
  if (v7)
    return pthread_mutex_unlock(v4);
  v6[256] = 1;
  return pthread_mutex_unlock(v4);
}

uint64_t `non-virtual thunk to'webrtc::SendStatisticsProxy::OnReportBlockDataUpdated(uint64_t a1, uint64_t a2)
{
  webrtc::SendStatisticsProxy *v4;
  pthread_mutex_t *v5;
  char *StatsEntry;
  char *v7;
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v4 = (webrtc::SendStatisticsProxy *)(a1 - 8);
  v5 = (pthread_mutex_t *)(a1 + 352);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 352));
  StatsEntry = webrtc::SendStatisticsProxy::GetStatsEntry(v4, *(_DWORD *)(a2 + 4));
  if (!StatsEntry)
    return pthread_mutex_unlock(v5);
  v7 = StatsEntry;
  webrtc::ReportBlockStats::Store((uint64_t *)(*(_QWORD *)(a1 + 960) + 1152), *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16));
  v8 = v7[256];
  v10 = *(_OWORD *)(a2 + 16);
  v9 = *(_OWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v7 + 200) = *(_OWORD *)a2;
  *((_QWORD *)v7 + 31) = v11;
  *(_OWORD *)(v7 + 232) = v9;
  *(_OWORD *)(v7 + 216) = v10;
  if (v8)
    return pthread_mutex_unlock(v5);
  v7[256] = 1;
  return pthread_mutex_unlock(v5);
}

uint64_t webrtc::SendStatisticsProxy::DataCountersUpdated(uint64_t a1, __int128 *a2, unsigned int a3)
{
  pthread_mutex_t *v6;
  char *StatsEntry;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;

  v6 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  StatsEntry = webrtc::SendStatisticsProxy::GetStatsEntry((webrtc::SendStatisticsProxy *)a1, a3);
  if (*(_DWORD *)StatsEntry != 2)
  {
    v8 = StatsEntry;
    v9 = *a2;
    v10 = a2[1];
    v11 = a2[3];
    *((_OWORD *)StatsEntry + 5) = a2[2];
    *((_OWORD *)StatsEntry + 6) = v11;
    *((_OWORD *)StatsEntry + 3) = v9;
    *((_OWORD *)StatsEntry + 4) = v10;
    v12 = a2[4];
    v13 = a2[5];
    v14 = a2[7];
    *((_OWORD *)StatsEntry + 9) = a2[6];
    *((_OWORD *)StatsEntry + 10) = v14;
    *((_OWORD *)StatsEntry + 7) = v12;
    *((_OWORD *)StatsEntry + 8) = v13;
    v15 = *(_QWORD **)(a1 + 968);
    if (v15[127] == -1)
    {
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
      v17 = v16 / 0x3E8uLL;
      if (v16 % 0x3E8uLL > 0x1F3)
        ++v17;
      if (-v16 % 0x3E8uLL <= 0x1F4)
        v18 = 0;
      else
        v18 = -1;
      v19 = v18 - -v16 / 0x3E8uLL;
      if (v16 >= 0)
        v19 = v17;
      v15 = *(_QWORD **)(a1 + 968);
      v15[127] = v19;
      v15[129] = 0;
      if (v15[128] != -1)
        v15[128] = v19;
      v15[131] = 0;
      if (v15[130] != -1)
        v15[130] = v19;
    }
    webrtc::StatsCounter::Set((unint64_t)(v15 + 60), (uint64_t *)(*((_QWORD *)a2 + 2) + *((_QWORD *)a2 + 1) + *((_QWORD *)a2 + 3)), a3);
    webrtc::StatsCounter::Set(*(_QWORD *)(a1 + 968) + 744, *((uint64_t **)a2 + 3), a3);
    webrtc::StatsCounter::Set(*(_QWORD *)(a1 + 968) + 832, (uint64_t *)(*((_QWORD *)a2 + 7) + *((_QWORD *)a2 + 6) + *((_QWORD *)a2 + 8)), a3);
    webrtc::StatsCounter::Set(*(_QWORD *)(a1 + 968) + 920, (uint64_t *)(*((_QWORD *)a2 + 12) + *((_QWORD *)a2 + 11) + *((_QWORD *)a2 + 13)), a3);
    if (*(_DWORD *)v8 == 1)
    {
      v20 = *(_QWORD *)(a1 + 968) + 656;
      v21 = (uint64_t *)(*((_QWORD *)a2 + 2) + *((_QWORD *)a2 + 1) + *((_QWORD *)a2 + 3));
      goto LABEL_18;
    }
    if (!*(_DWORD *)v8)
    {
      v20 = *(_QWORD *)(a1 + 968) + 568;
      v21 = (uint64_t *)(*((_QWORD *)a2 + 2) - (*((_QWORD *)a2 + 7) + *((_QWORD *)a2 + 12)));
LABEL_18:
      webrtc::StatsCounter::Set(v20, v21, a3);
    }
  }
  return pthread_mutex_unlock(v6);
}

uint64_t `non-virtual thunk to'webrtc::SendStatisticsProxy::DataCountersUpdated(uint64_t a1, __int128 *a2, unsigned int a3)
{
  return webrtc::SendStatisticsProxy::DataCountersUpdated(a1 - 24, a2, a3);
}

uint64_t webrtc::SendStatisticsProxy::Notify(webrtc::SendStatisticsProxy *this, int a2, int a3, unsigned int a4)
{
  pthread_mutex_t *v8;
  char *StatsEntry;

  v8 = (pthread_mutex_t *)((char *)this + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  StatsEntry = webrtc::SendStatisticsProxy::GetStatsEntry(this, a4);
  if (StatsEntry)
  {
    *((_DWORD *)StatsEntry + 7) = a2;
    *((_DWORD *)StatsEntry + 8) = a3;
  }
  return pthread_mutex_unlock(v8);
}

uint64_t `non-virtual thunk to'webrtc::SendStatisticsProxy::Notify(webrtc::SendStatisticsProxy *this, int a2, int a3, unsigned int a4)
{
  webrtc::SendStatisticsProxy *v7;
  pthread_mutex_t *v8;
  char *StatsEntry;

  v7 = (webrtc::SendStatisticsProxy *)((char *)this - 32);
  v8 = (pthread_mutex_t *)((char *)this + 328);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 328));
  StatsEntry = webrtc::SendStatisticsProxy::GetStatsEntry(v7, a4);
  if (StatsEntry)
  {
    *((_DWORD *)StatsEntry + 7) = a2;
    *((_DWORD *)StatsEntry + 8) = a3;
  }
  return pthread_mutex_unlock(v8);
}

uint64_t webrtc::SendStatisticsProxy::FrameCountUpdated(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  pthread_mutex_t *v6;
  char *StatsEntry;

  v6 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  StatsEntry = webrtc::SendStatisticsProxy::GetStatsEntry((webrtc::SendStatisticsProxy *)a1, a3);
  if (StatsEntry)
    *(_QWORD *)(StatsEntry + 12) = *a2;
  return pthread_mutex_unlock(v6);
}

uint64_t `non-virtual thunk to'webrtc::SendStatisticsProxy::FrameCountUpdated(pthread_mutex_t *a1, _QWORD *a2, unsigned int a3)
{
  webrtc::SendStatisticsProxy *v5;
  pthread_mutex_t *v6;
  char *StatsEntry;

  v5 = (webrtc::SendStatisticsProxy *)&a1[-1].__opaque[16];
  v6 = a1 + 5;
  pthread_mutex_lock(a1 + 5);
  StatsEntry = webrtc::SendStatisticsProxy::GetStatsEntry(v5, a3);
  if (StatsEntry)
    *(_QWORD *)(StatsEntry + 12) = *a2;
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::SendStatisticsProxy::OnSendPacket(webrtc::SendStatisticsProxy *this, char *a2, Timestamp a3)
{
  webrtc::SendStatisticsProxy *v5;
  uint64_t v6;
  pthread_mutex_t *v7;
  char *StatsEntry;
  uint64_t v9;
  unsigned int *v10;
  uint64_t **v11;
  char *v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  webrtc::SendStatisticsProxy *v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  void *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  int64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  unint64_t v81;
  pthread_mutex_t *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  __int128 *v93;
  _OWORD *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  BOOL v104;
  unint64_t v105;
  uint64_t *v106;
  void **v107;
  unint64_t v108;
  void **v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  int64x2_t *v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  int64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  __int128 *v153;
  _OWORD *v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  int64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  __int128 *v171;
  _OWORD *v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  pthread_mutex_t *v176;
  pthread_mutex_t *v177;
  uint64_t v178;
  size_t __sz;
  uint64_t v180;

  v5 = this;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  v7 = (pthread_mutex_t *)((char *)v5 + 360);
  pthread_mutex_lock((pthread_mutex_t *)((char *)v5 + 360));
  StatsEntry = webrtc::SendStatisticsProxy::GetStatsEntry(v5, a2);
  if (!StatsEntry)
    return pthread_mutex_unlock(v7);
  v9 = (uint64_t)StatsEntry;
  v10 = (unsigned int *)*((_QWORD *)v5 + 105);
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        v12 = (char *)v10;
        v13 = v10[8];
        if (v13 <= a2)
          break;
        v10 = *(unsigned int **)v12;
        v11 = (uint64_t **)v12;
        if (!*(_QWORD *)v12)
          goto LABEL_9;
      }
      if (v13 >= a2)
        break;
      v10 = (unsigned int *)*((_QWORD *)v12 + 1);
      if (!v10)
      {
        v11 = (uint64_t **)(v12 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v11 = (uint64_t **)((char *)v5 + 840);
    v12 = (char *)v5 + 840;
LABEL_9:
    v14 = v12;
    v12 = (char *)operator new(0xB0uLL);
    *((_DWORD *)v12 + 8) = (_DWORD)a2;
    *((_QWORD *)v12 + 5) = 0x8000000000000000;
    *((_QWORD *)v12 + 6) = &off_24C0BAFD8;
    *(_OWORD *)(v12 + 56) = xmmword_208F18830;
    *((_QWORD *)v12 + 9) = operator new[]();
    *((_QWORD *)v12 + 10) = 0;
    *((_QWORD *)v12 + 12) = -1;
    *((_OWORD *)v12 + 7) = 0u;
    *((_OWORD *)v12 + 8) = 0u;
    *((_OWORD *)v12 + 9) = 0u;
    *((_OWORD *)v12 + 10) = 0u;
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = v14;
    *v11 = (uint64_t *)v12;
    v15 = **((_QWORD **)v5 + 104);
    v16 = (uint64_t *)v12;
    if (v15)
    {
      *((_QWORD *)v5 + 104) = v15;
      v16 = *v11;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v5 + 105), v16);
    ++*((_QWORD *)v5 + 106);
  }
  v17 = v6 - a3.var0;
  v18 = a3.var0 == 0x7FFFFFFFFFFFFFFFLL || v6 == 0x8000000000000000;
  if (v18)
    v17 = 0x8000000000000000;
  if (a3.var0 == 0x8000000000000000)
    v19 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v19 = v17;
  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
    v20 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v20 = v19;
  v22 = (char *)*((_QWORD *)v12 + 15);
  v21 = (char *)*((_QWORD *)v12 + 16);
  v23 = v21 - v22;
  if (v21 == v22)
    v24 = 0;
  else
    v24 = 32 * (v21 - v22) - 1;
  v25 = *((_QWORD *)v12 + 18);
  if (v24 != *((_QWORD *)v12 + 19) + v25)
    goto LABEL_106;
  v26 = v25 >= 0x100;
  v27 = v25 - 256;
  v180 = v20;
  if (!v26)
  {
    v178 = v9;
    __sz = (size_t)v5;
    v9 = v23 >> 3;
    v29 = (char *)*((_QWORD *)v12 + 17);
    v30 = (char *)*((_QWORD *)v12 + 14);
    if (v23 >> 3 < (unint64_t)((v29 - v30) >> 3))
    {
      v31 = (char *)operator new(0x1000uLL);
      a2 = v31;
      if (v29 != v21)
      {
        if (!v21)
          goto LABEL_171;
        *(_QWORD *)v21 = v31;
        v21 = (char *)(*((_QWORD *)v12 + 16) + 8);
        *((_QWORD *)v12 + 16) = v21;
        v9 = v178;
        v5 = (webrtc::SendStatisticsProxy *)__sz;
        goto LABEL_105;
      }
      if (v22 != v30)
      {
        v48 = v22;
        v5 = (webrtc::SendStatisticsProxy *)__sz;
        goto LABEL_102;
      }
      v81 = (v29 - v22) >> 2;
      if (v21 == v22)
        v81 = 1;
      if (!(v81 >> 61))
      {
        v82 = v7;
        v83 = (v81 + 3) >> 2;
        v84 = 8 * v81;
        v85 = (char *)operator new(8 * v81);
        v48 = &v85[8 * v83];
        v86 = &v85[v84];
        v87 = v48;
        v5 = (webrtc::SendStatisticsProxy *)__sz;
        if (v21 != v22)
        {
          v87 = &v48[8 * v9];
          v88 = &v85[8 * v83];
          v89 = v22;
          if ((unint64_t)(v23 - 8) < 0x38)
            goto LABEL_202;
          v90 = &v85[8 * v83];
          v88 = v90;
          v89 = v22;
          if ((unint64_t)(v90 - v22) < 0x20)
            goto LABEL_202;
          v91 = ((unint64_t)(v23 - 8) >> 3) + 1;
          v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
          v88 = &v48[v92];
          v89 = &v22[v92];
          v93 = (__int128 *)(v22 + 16);
          v94 = v90 + 16;
          v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v96 = *v93;
            *(v94 - 1) = *(v93 - 1);
            *v94 = v96;
            v93 += 2;
            v94 += 2;
            v95 -= 4;
          }
          while (v95);
          if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_202:
            do
            {
              v97 = *(_QWORD *)v89;
              v89 += 8;
              *(_QWORD *)v88 = v97;
              v88 += 8;
            }
            while (v88 != v87);
          }
        }
        *((_QWORD *)v12 + 14) = v85;
        *((_QWORD *)v12 + 15) = v48;
        *((_QWORD *)v12 + 16) = v87;
        *((_QWORD *)v12 + 17) = v86;
        v7 = v82;
        if (v22)
        {
          operator delete(v22);
          v48 = (char *)*((_QWORD *)v12 + 15);
        }
LABEL_102:
        *((_QWORD *)v48 - 1) = a2;
        a2 = (char *)*((_QWORD *)v12 + 15);
        v21 = (char *)*((_QWORD *)v12 + 16);
        *((_QWORD *)v12 + 15) = a2 - 8;
        v23 = *((_QWORD *)a2 - 1);
        *((_QWORD *)v12 + 15) = a2;
        v9 = v178;
        if (v21 == *((char **)v12 + 17))
          goto LABEL_172;
        goto LABEL_103;
      }
LABEL_199:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    v176 = v7;
    if (v29 == v30)
      v32 = 1;
    else
      v32 = (v29 - v30) >> 2;
    if (v32 >> 61)
      goto LABEL_199;
    a2 = (char *)operator new(8 * v32);
    v33 = &a2[8 * v9];
    v34 = &a2[8 * v32];
    v35 = operator new(0x1000uLL);
    if (v9 == v32)
    {
      if (v23 < 1)
      {
        v58 = v23 >> 2;
        if (v21 == v22)
          v58 = 1;
        if (v58 >> 61)
          goto LABEL_199;
        v59 = v35;
        v60 = 8 * v58;
        v33 = (char *)operator new(8 * v58);
        operator delete(a2);
        v34 = &v33[v60];
        v61 = (char *)*((_QWORD *)v12 + 15);
        v21 = (char *)*((_QWORD *)v12 + 16);
        a2 = v33;
        *(_QWORD *)v33 = v59;
        v37 = v33 + 8;
        if (v21 != v61)
        {
          while (1)
          {
LABEL_71:
            if (v33 == a2)
            {
              if (v37 >= v34)
              {
                v66 = (v34 - v33) >> 2;
                if (v34 == v33)
                  v66 = 1;
                if (v66 >> 61)
                  goto LABEL_199;
                v67 = (v66 + 3) >> 2;
                v68 = 8 * v66;
                v69 = (char *)operator new(8 * v66);
                a2 = v69;
                v62 = &v69[8 * v67];
                v23 = (uint64_t)v62;
                v70 = v37 - v33;
                if (v37 != v33)
                {
                  v23 = (uint64_t)&v62[v70 & 0xFFFFFFFFFFFFFFF8];
                  v71 = v70 - 8;
                  v72 = &v69[8 * v67];
                  v73 = v33;
                  if (v71 < 0x38)
                    goto LABEL_203;
                  v72 = &v69[8 * v67];
                  v73 = v33;
                  if ((unint64_t)(v72 - v33) < 0x20)
                    goto LABEL_203;
                  v74 = (v71 >> 3) + 1;
                  v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
                  v72 = &v62[v75];
                  v73 = &v33[v75];
                  v76 = (__int128 *)(v33 + 16);
                  v77 = &v69[8 * v67 + 16];
                  v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v79 = *v76;
                    *((_OWORD *)v77 - 1) = *(v76 - 1);
                    *(_OWORD *)v77 = v79;
                    v76 += 2;
                    v77 += 32;
                    v78 -= 4;
                  }
                  while (v78);
                  if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_203:
                    do
                    {
                      v80 = *(_QWORD *)v73;
                      v73 += 8;
                      *(_QWORD *)v72 = v80;
                      v72 += 8;
                    }
                    while (v72 != (char *)v23);
                  }
                }
                v34 = &v69[v68];
                operator delete(v33);
              }
              else
              {
                v64 = (v34 - v37) >> 3;
                if (v64 >= -1)
                  v65 = v64 + 1;
                else
                  v65 = v64 + 2;
                v23 = (uint64_t)&v37[8 * (v65 >> 1)];
                v62 = &v33[8 * (v65 >> 1)];
                if (v37 == v33)
                {
                  a2 = v37;
                }
                else
                {
                  memmove(&v33[8 * (v65 >> 1)], v33, v37 - v33);
                  a2 = v33;
                }
              }
            }
            else
            {
              v62 = v33;
              v23 = (uint64_t)v37;
            }
            v63 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v62 - 1) = v63;
            v38 = v62 - 8;
            v37 = (char *)v23;
            v33 = v38;
            if (v21 == *((char **)v12 + 15))
              goto LABEL_47;
          }
        }
LABEL_46:
        v38 = v33;
        v23 = (uint64_t)v37;
LABEL_47:
        v39 = (void *)*((_QWORD *)v12 + 14);
        *((_QWORD *)v12 + 14) = a2;
        *((_QWORD *)v12 + 15) = v38;
        v21 = (char *)v23;
        *((_QWORD *)v12 + 16) = v23;
        *((_QWORD *)v12 + 17) = v34;
        v7 = v176;
        v9 = v178;
        v5 = (webrtc::SendStatisticsProxy *)__sz;
        if (v39)
        {
          operator delete(v39);
          v21 = (char *)*((_QWORD *)v12 + 16);
        }
        goto LABEL_105;
      }
      v36 = v9 + 2;
      if (v9 >= -1)
        v36 = v9 + 1;
      v33 -= 8 * (v36 >> 1);
    }
    *(_QWORD *)v33 = v35;
    v37 = v33 + 8;
    if (v21 != v22)
      goto LABEL_71;
    goto LABEL_46;
  }
  v28 = v5;
  *((_QWORD *)v12 + 18) = v27;
  a2 = v22 + 8;
  v23 = *(_QWORD *)v22;
  *((_QWORD *)v12 + 15) = v22 + 8;
  if (v21 != *((char **)v12 + 17))
    goto LABEL_30;
  v40 = (char *)*((_QWORD *)v12 + 14);
  __sz = v23;
  if (a2 > v40)
  {
    v41 = (a2 - v40) >> 3;
    if (v41 >= -1)
      v42 = v41 + 1;
    else
      v42 = v41 + 2;
    v43 = v42 >> 1;
    v44 = -v43;
    v45 = &a2[-8 * v43];
    v46 = v21 - a2;
    if (v21 != a2)
    {
      memmove(&a2[-8 * v43], a2, v21 - a2);
      v21 = (char *)*((_QWORD *)v12 + 15);
    }
    v47 = &v21[8 * v44];
    v21 = &v45[v46];
    *((_QWORD *)v12 + 15) = v47;
    *((_QWORD *)v12 + 16) = &v45[v46];
    v23 = __sz;
    goto LABEL_31;
  }
  v177 = v7;
  v49 = (v21 - v40) >> 2;
  if (v21 == v40)
    v49 = 1;
  if (v49 >> 61)
    goto LABEL_199;
  v50 = v49 >> 2;
  v51 = 8 * v49;
  v52 = (char *)operator new(8 * v49);
  v53 = &v52[8 * v50];
  v54 = &v52[v51];
  v55 = v21 - a2;
  v18 = v21 == a2;
  v21 = v53;
  v7 = v177;
  if (!v18)
  {
    v21 = &v53[v55 & 0xFFFFFFFFFFFFFFF8];
    v56 = v55 - 8;
    if ((unint64_t)(v55 - 8) < 0x38)
    {
      v57 = &v52[8 * v50];
      do
      {
LABEL_183:
        v157 = *(_QWORD *)a2;
        a2 += 8;
        *(_QWORD *)v57 = v157;
        v57 += 8;
      }
      while (v57 != v21);
      goto LABEL_184;
    }
    v150 = &v52[8 * v50];
    v57 = v150;
    if ((unint64_t)(v150 - a2) < 0x20)
      goto LABEL_183;
    v151 = (v56 >> 3) + 1;
    v152 = 8 * (v151 & 0x3FFFFFFFFFFFFFFCLL);
    v57 = &v53[v152];
    a2 += v152;
    v153 = (__int128 *)(v22 + 24);
    v154 = v150 + 16;
    v155 = v151 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v156 = *v153;
      *(v154 - 1) = *(v153 - 1);
      *v154 = v156;
      v153 += 2;
      v154 += 2;
      v155 -= 4;
    }
    while (v155);
    if (v151 != (v151 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_183;
  }
LABEL_184:
  *((_QWORD *)v12 + 14) = v52;
  *((_QWORD *)v12 + 15) = v53;
  *((_QWORD *)v12 + 16) = v21;
  *((_QWORD *)v12 + 17) = v54;
  v23 = __sz;
  if (v40)
  {
    operator delete(v40);
    v21 = (char *)*((_QWORD *)v12 + 16);
  }
LABEL_30:
  if (v21)
  {
LABEL_31:
    *(_QWORD *)v21 = v23;
    v21 = (char *)(*((_QWORD *)v12 + 16) + 8);
    *((_QWORD *)v12 + 16) = v21;
    v5 = v28;
    goto LABEL_105;
  }
LABEL_171:
  while (2)
  {
    while (2)
    {
      while (1)
      {
        __break(1u);
LABEL_172:
        v143 = (char *)*((_QWORD *)v12 + 14);
        if (a2 > v143)
          break;
        v158 = (v21 - v143) >> 2;
        if (v21 == v143)
          v158 = 1;
        if (v158 >> 61)
          goto LABEL_199;
        v159 = v158 >> 2;
        v160 = 8 * v158;
        v161 = (char *)operator new(8 * v158);
        v162 = &v161[8 * v159];
        v163 = &v161[v160];
        v164 = v21 - a2;
        v18 = v21 == a2;
        v21 = v162;
        v5 = (webrtc::SendStatisticsProxy *)__sz;
        if (v18)
          goto LABEL_197;
        v21 = &v162[v164 & 0xFFFFFFFFFFFFFFF8];
        v165 = v164 - 8;
        if ((unint64_t)(v164 - 8) >= 0x38)
        {
          v167 = &v161[8 * v159];
          v166 = v167;
          if ((unint64_t)(v167 - a2) >= 0x20)
          {
            v168 = (v165 >> 3) + 1;
            v169 = 8 * (v168 & 0x3FFFFFFFFFFFFFFCLL);
            v166 = &v162[v169];
            v170 = &a2[v169];
            v171 = (__int128 *)(a2 + 16);
            v172 = v167 + 16;
            v173 = v168 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v174 = *v171;
              *(v172 - 1) = *(v171 - 1);
              *v172 = v174;
              v171 += 2;
              v172 += 2;
              v173 -= 4;
            }
            while (v173);
            a2 = v170;
            if (v168 == (v168 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_197;
          }
        }
        else
        {
          v166 = &v161[8 * v159];
        }
        do
        {
          v175 = *(_QWORD *)a2;
          a2 += 8;
          *(_QWORD *)v166 = v175;
          v166 += 8;
        }
        while (v166 != v21);
LABEL_197:
        *((_QWORD *)v12 + 14) = v161;
        *((_QWORD *)v12 + 15) = v162;
        *((_QWORD *)v12 + 16) = v21;
        *((_QWORD *)v12 + 17) = v163;
        if (v143)
        {
          operator delete(v143);
          v21 = (char *)*((_QWORD *)v12 + 16);
        }
LABEL_103:
        if (v21)
          goto LABEL_104;
      }
      v144 = (a2 - v143) >> 3;
      if (v144 >= -1)
        v145 = v144 + 1;
      else
        v145 = v144 + 2;
      v146 = v145 >> 1;
      v147 = -v146;
      v148 = &a2[-8 * v146];
      v149 = v21 - a2;
      if (v21 != a2)
      {
        memmove(&a2[-8 * v146], a2, v21 - a2);
        a2 = (char *)*((_QWORD *)v12 + 15);
      }
      v21 = &v148[v149];
      *((_QWORD *)v12 + 15) = &a2[8 * v147];
      *((_QWORD *)v12 + 16) = &v148[v149];
      v5 = (webrtc::SendStatisticsProxy *)__sz;
LABEL_104:
      *(_QWORD *)v21 = v23;
      v21 = (char *)(*((_QWORD *)v12 + 16) + 8);
      *((_QWORD *)v12 + 16) = v21;
LABEL_105:
      v22 = (char *)*((_QWORD *)v12 + 15);
      v20 = v180;
LABEL_106:
      if (v21 == v22)
        continue;
      break;
    }
    v98 = *((_QWORD *)v12 + 19) + *((_QWORD *)v12 + 18);
    v99 = *(_QWORD *)&v22[(v98 >> 5) & 0x7FFFFFFFFFFFFF8];
    if (!v99)
      continue;
    break;
  }
  v100 = (uint64_t *)(v99 + 16 * v98);
  *v100 = v6;
  v100[1] = v20;
  v101 = *((_QWORD *)v12 + 19);
  v102 = *((_QWORD *)v12 + 20);
  *((_QWORD *)v12 + 19) = v101 + 1;
  v103 = 0x7FFFFFFFFFFFFFFFLL;
  if (v102 != 0x7FFFFFFFFFFFFFFFLL && v20 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v103 = 0x8000000000000000;
    v104 = v20 == 0x8000000000000000 || v102 == 0x8000000000000000;
    v105 = v102 + v20;
    if (!v104)
      v103 = v105;
  }
  *((_QWORD *)v12 + 20) = v103;
  v106 = (uint64_t *)*((_QWORD *)v12 + 21);
  if (v106 && *v106 > v20)
  {
    v107 = (void **)*((_QWORD *)v12 + 15);
    v108 = *((_QWORD *)v12 + 18);
  }
  else
  {
    v108 = *((_QWORD *)v12 + 18);
    v107 = (void **)*((_QWORD *)v12 + 15);
    *((_QWORD *)v12 + 21) = *(char **)((char *)v107 + (((v108 + v101) >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * (v108 + v101)
                          + 8;
  }
  v23 = 0x7FFFFFFFFFFFFFFFLL;
  v21 = (char *)0x8000000000000000;
  while (1)
  {
    v109 = &v107[v108 >> 8];
    v110 = *v109;
    if (v6 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v111 = v110[2 * v108];
      if (v111 != 0x8000000000000000)
      {
        if (v6 == 0x8000000000000000)
          break;
        if (v111 == 0x7FFFFFFFFFFFFFFFLL || v6 - v111 < 1000001)
          break;
      }
    }
    v113 = v110[2 * v108 + 1];
    v114 = *((_QWORD *)v12 + 20);
    v115 = (char *)*((_QWORD *)v12 + 21);
    v116 = v114 - v113;
    if (v113 == 0x7FFFFFFFFFFFFFFFLL || v114 == 0x8000000000000000)
      v116 = 0x8000000000000000;
    if (v114 == 0x7FFFFFFFFFFFFFFFLL || v113 == 0x8000000000000000)
      v119 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v119 = v116;
    *((_QWORD *)v12 + 20) = v119;
    v120 = *v109;
    if (v115 == (char *)*v109 + 16 * v108 + 8)
    {
      *((_QWORD *)v12 + 21) = 0;
      v120 = *v109;
    }
    if (!v120)
      goto LABEL_171;
    v121 = *((_QWORD *)v12 + 19) - 1;
    *((_QWORD *)v12 + 18) = ++v108;
    *((_QWORD *)v12 + 19) = v121;
    if (v108 >= 0x200)
    {
      operator delete(*v107);
      v107 = (void **)(*((_QWORD *)v12 + 15) + 8);
      *((_QWORD *)v12 + 15) = v107;
      v108 = *((_QWORD *)v12 + 18) - 256;
      *((_QWORD *)v12 + 18) = v108;
    }
  }
  v122 = (uint64_t *)*((_QWORD *)v12 + 21);
  if (v122)
  {
    v123 = *((_QWORD *)v12 + 19);
    goto LABEL_145;
  }
  v122 = &v110[2 * v108 + 1];
  *((_QWORD *)v12 + 21) = v122;
  v123 = *((_QWORD *)v12 + 19);
  if (*((void ***)v12 + 16) != v107)
  {
    v139 = (uint64_t)*v109;
    v140 = (uint64_t)*v109 + 16 * v108;
    v141 = *(uint64_t *)((char *)v107 + (((v123 + v108) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (v123 + v108);
    while (1)
    {
      while (1)
      {
        if (v140 == v141)
          goto LABEL_145;
        if (*(_QWORD *)(v140 + 8) < *v122)
          break;
        *((_QWORD *)v12 + 21) = v140 + 8;
        v139 = (uint64_t)*v109;
        v122 = (uint64_t *)(v140 + 8);
        v140 += 16;
        if (v140 - (_QWORD)*v109 == 4096)
          goto LABEL_170;
      }
      v140 += 16;
      if (v140 - v139 == 4096)
      {
LABEL_170:
        v142 = (uint64_t)v109[1];
        ++v109;
        v139 = v142;
        v140 = v142;
      }
    }
  }
LABEL_145:
  v124 = *((_QWORD *)v12 + 20) / v123;
  v125 = v124 / 0x3E8uLL;
  if (v124 % 0x3E8uLL > 0x1F3)
    LODWORD(v125) = v125 + 1;
  if (-v124 % 0x3E8uLL <= 0x1F4)
    v126 = 0;
  else
    v126 = -1;
  v127 = v126 - -v124 / 0x3E8uLL;
  if (v124 < 0)
    v128 = v127;
  else
    v128 = v125;
  v129 = (int64x2_t *)*((_QWORD *)v5 + 121);
  v130 = vdupq_n_s64(1uLL);
  v131.i64[1] = v130.i64[1];
  v131.i64[0] = v128;
  v132 = v129[14];
  v133 = vaddq_s64(v129[13], v131);
  v134 = *v122;
  v135 = v134 / 0x3E8uLL;
  if (v134 % 0x3E8uLL > 0x1F3)
    LODWORD(v135) = v135 + 1;
  if (-v134 % 0x3E8uLL <= 0x1F4)
    v136 = 0;
  else
    v136 = -1;
  if (v134 < 0)
    v137 = v136 - -v134 / 0x3E8uLL;
  else
    LODWORD(v137) = v135;
  *(_DWORD *)(v9 + 36) = v128;
  *(_DWORD *)(v9 + 40) = v137;
  v130.i64[0] = (int)v137;
  v129[13] = v133;
  v129[14] = vaddq_s64(v132, v130);
  return pthread_mutex_unlock(v7);
}

uint64_t *std::map<unsigned int,webrtc::VideoSendStream::StreamStats>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,webrtc::VideoSendStream::StreamStats>,std::__tree_node<std::__value_type<unsigned int,webrtc::VideoSendStream::StreamStats>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    while (1)
    {
      v7 = *((_DWORD *)v4 + 8);
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        v10 = v5[1];
        v11 = v6;
        if (v8)
        {
          do
          {
            v9 = (uint64_t *)v10;
            v10 = *(_QWORD *)(v10 + 8);
          }
          while (v10);
        }
        else
        {
          do
          {
            v9 = (uint64_t *)v11[2];
            v12 = *v9 == (_QWORD)v11;
            v11 = v9;
          }
          while (v12);
        }
        if (*((_DWORD *)v9 + 8) >= v7)
          break;
      }
      if (v8)
        v13 = (uint64_t **)v9;
      else
        v13 = (uint64_t **)v6;
      if (v8)
        v14 = (uint64_t **)(v9 + 1);
      else
        v14 = (uint64_t **)v6;
      if (!*v14)
        goto LABEL_25;
LABEL_28:
      v18 = (_QWORD *)v4[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v4[2];
          v12 = *v19 == (_QWORD)v4;
          v4 = v19;
        }
        while (!v12);
      }
      v4 = v19;
      if (v19 == a3)
        return result;
    }
    v14 = (uint64_t **)v6;
    v13 = (uint64_t **)v6;
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v8;
          v15 = *((_DWORD *)v8 + 8);
          if (v15 <= v7)
            break;
          v8 = *v13;
          v14 = v13;
          if (!*v13)
            goto LABEL_25;
        }
        if (v15 >= v7)
          goto LABEL_28;
        v8 = v13[1];
        if (!v8)
        {
          v14 = v13 + 1;
          break;
        }
      }
    }
LABEL_25:
    v16 = (uint64_t *)operator new(0x168uLL);
    memcpy(v16 + 4, v4 + 4, 0x148uLL);
    *v16 = 0;
    v16[1] = 0;
    v16[2] = (uint64_t)v13;
    *v14 = v16;
    v17 = *(_QWORD *)*v5;
    if (v17)
    {
      *v5 = v17;
      v16 = *v14;
    }
    result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v16);
    ++v5[2];
    goto LABEL_28;
  }
  return result;
}

void std::__tree<std::__value_type<unsigned int,webrtc::SendStatisticsProxy::Trackers>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::SendStatisticsProxy::Trackers>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::SendStatisticsProxy::Trackers>>>::destroy(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  if (!a1)
    return;
  std::__tree<std::__value_type<unsigned int,webrtc::SendStatisticsProxy::Trackers>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::SendStatisticsProxy::Trackers>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::SendStatisticsProxy::Trackers>>>::destroy(*a1);
  std::__tree<std::__value_type<unsigned int,webrtc::SendStatisticsProxy::Trackers>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::SendStatisticsProxy::Trackers>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::SendStatisticsProxy::Trackers>>>::destroy(a1[1]);
  v2 = (void **)a1[15];
  v3 = (void **)a1[16];
  v4 = (char *)v3 - (char *)v2;
  if (v3 == v2)
  {
    v5 = a1 + 19;
  }
  else
  {
    v5 = a1 + 19;
    v6 = a1[18];
    v7 = &v2[v6 >> 8];
    v8 = (uint64_t)*v7;
    v9 = (uint64_t)*v7 + 16 * v6;
    while ((void *)v9 != *(char **)((char *)v2 + (((a1[19] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (*((_BYTE *)a1 + 152) + v6))
    {
      if (!v9)
      {
        __break(1u);
        return;
      }
      v9 += 16;
      if (v9 - v8 == 4096)
      {
        v10 = (uint64_t)v7[1];
        ++v7;
        v8 = v10;
        v9 = v10;
      }
    }
  }
  *v5 = 0;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[16];
      v2 = (void **)(a1[15] + 8);
      a1[15] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v4 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_17;
    v12 = 256;
  }
  a1[18] = v12;
LABEL_17:
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = a1[15];
    v14 = a1[16];
    if (v14 != v15)
      a1[16] = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v16 = (void *)a1[14];
  if (v16)
    operator delete(v16);
  a1[6] = &off_24C0BAFD8;
  v17 = a1[9];
  if (v17)
    MEMORY[0x20BD0ADD4](v17, 0x1000C8000313F17);
  operator delete(a1);
}

void webrtc::rtcp::SenderReport::~SenderReport(webrtc::rtcp::SenderReport *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0C0C50;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0C0C50;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

BOOL webrtc::rtcp::SenderReport::Parse(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  webrtc::rtcp::ReportBlock *v8;
  webrtc::rtcp::ReportBlock *v9;
  webrtc::rtcp::ReportBlock *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const unsigned __int8 *v19;

  v2 = *(unsigned __int8 *)(a2 + 1);
  v3 = *(unsigned int *)(a2 + 4);
  v4 = 24 * v2 + 24;
  if (v4 > v3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/sender_report.cc");
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    v9 = *(webrtc::rtcp::ReportBlock **)(a1 + 40);
    v7 = a1 + 40;
    v8 = v9;
    *(_DWORD *)(v7 - 32) = bswap32(*(_DWORD *)v6);
    *(_QWORD *)(v7 - 24) = bswap64(*(_QWORD *)(v6 + 4));
    *(_DWORD *)(v7 - 16) = bswap32(*(_DWORD *)(v6 + 12));
    *(_DWORD *)(v7 - 12) = bswap32(*(_DWORD *)(v6 + 16));
    *(_DWORD *)(v7 - 8) = bswap32(*(_DWORD *)(v6 + 20));
    v10 = *(webrtc::rtcp::ReportBlock **)(v7 + 8);
    v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v9) >> 2);
    if (v2 <= v11)
    {
      if (v2 < v11)
      {
        v10 = (webrtc::rtcp::ReportBlock *)((char *)v8 + 28 * v2);
        *(_QWORD *)(a1 + 48) = v10;
      }
    }
    else
    {
      std::vector<webrtc::rtcp::ReportBlock>::__append((void **)v7, v2 - v11);
      v8 = *(webrtc::rtcp::ReportBlock **)(a1 + 40);
      v10 = *(webrtc::rtcp::ReportBlock **)(a1 + 48);
    }
    if (v8 != v10)
    {
      v19 = (const unsigned __int8 *)(v6 + 24);
      do
      {
        webrtc::rtcp::ReportBlock::Parse(v8, v19, 0x18uLL);
        v8 = (webrtc::rtcp::ReportBlock *)((char *)v8 + 28);
        v19 += 24;
      }
      while (v8 != v10);
    }
  }
  return v4 <= v3;
}

uint64_t webrtc::rtcp::SenderReport::BlockLength(webrtc::rtcp::SenderReport *this)
{
  return 0x4924924924924928 * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2) + 28;
}

uint64_t webrtc::rtcp::SenderReport::Create(unsigned int *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;

  v12 = *a3;
  if ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1) + v12 <= a4)
  {
LABEL_4:
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1);
    v13 = (a1[12] - a1[10]) >> 2;
    v14 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1);
    *(_BYTE *)(a2 + *a3) = (-73 * v13) | 0x80;
    *(_BYTE *)(*a3 + a2 + 1) = -56;
    *(_BYTE *)(*a3 + a2 + 2) = (unint64_t)(v14 - 4) >> 10;
    *(_BYTE *)(*a3 + a2 + 3) = (unint64_t)(v14 - 4) >> 2;
    v15 = *a3 + 4;
    *a3 = v15;
    *(_DWORD *)(a2 + v15) = bswap32(a1[2]);
    v16 = (_BYTE *)(*a3 + a2);
    v17 = *((_QWORD *)a1 + 2);
    v16[4] = HIBYTE(v17);
    v16[5] = BYTE6(v17);
    v16[6] = BYTE5(v17);
    v16[7] = BYTE4(v17);
    *(_DWORD *)(*a3 + a2 + 8) = bswap32(a1[4]);
    *(_DWORD *)(*a3 + a2 + 12) = bswap32(a1[6]);
    *(_DWORD *)(*a3 + a2 + 16) = bswap32(a1[7]);
    *(_DWORD *)(*a3 + a2 + 20) = bswap32(a1[8]);
    v18 = *a3 + 24;
    *a3 = v18;
    v20 = *((_QWORD *)a1 + 5);
    for (i = *((_QWORD *)a1 + 6); v20 != i; v20 += 28)
    {
      webrtc::rtcp::ReportBlock::Create(v20, (unsigned __int8 *)(a2 + v18));
      v18 = *a3 + 24;
      *a3 = v18;
    }
    return 1;
  }
  else
  {
    while (*a3)
    {
      a6(a5, a2);
      *a3 = 0;
      if ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1) <= a4)
        goto LABEL_4;
    }
    return 0;
  }
}

__n128 rtc::PacketInfo::PacketInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t rtc::SentPacket::SentPacket(uint64_t this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = a3;
  *(_WORD *)(this + 16) = 0;
  *(_BYTE *)(this + 30) = 0;
  *(_QWORD *)(this + 20) = 0;
  *(_BYTE *)(this + 28) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

pthread_mutex_t *webrtc::webrtc_sequence_checker_internal::SequenceCheckerImpl::SequenceCheckerImpl(pthread_mutex_t *this, char a2)
{
  pthread_mutexattr_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  pthread_mutexattr_init(&v5);
  pthread_mutexattr_setpolicy_np(&v5, 3);
  pthread_mutex_init(this, &v5);
  pthread_mutexattr_destroy(&v5);
  LOBYTE(this[1].__sig) = a2;
  *(_QWORD *)this[1].__opaque = pthread_self();
  return this;
}

BOOL webrtc::webrtc_sequence_checker_internal::SequenceCheckerImpl::IsCurrent(webrtc::webrtc_sequence_checker_internal::SequenceCheckerImpl *this)
{
  uint64_t v2;
  _opaque_pthread_t *v3;
  uint64_t v4;
  _BOOL8 v5;

  v3 = pthread_self();
  pthread_mutex_lock((pthread_mutex_t *)this);
  if (*((_BYTE *)this + 64))
  {
    v4 = *((_QWORD *)this + 10);
    if (v4)
      v5 = v4 == v2;
    else
      v5 = pthread_equal(*((pthread_t *)this + 9), v3) != 0;
  }
  else
  {
    v5 = 1;
    *((_BYTE *)this + 64) = 1;
    *((_QWORD *)this + 9) = v3;
    *((_QWORD *)this + 10) = v2;
  }
  pthread_mutex_unlock((pthread_mutex_t *)this);
  return v5;
}

std::string *cricket::ContentGroup::ContentGroup(std::string *this, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 *v12;
  std::string *v13;
  __int128 v14;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v5 = *((_QWORD *)a2 + 3);
    v6 = *((_QWORD *)a2 + 4);
    v7 = v6 - v5;
    if (v6 == v5)
      return this;
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v5 = *((_QWORD *)a2 + 3);
    v6 = *((_QWORD *)a2 + 4);
    v7 = v6 - v5;
    if (v6 == v5)
      return this;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
  if (v9 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  v10 = (char *)operator new(v7);
  v11 = 0;
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v10[24 * v9];
  do
  {
    while (1)
    {
      v12 = (__int128 *)(v5 + v11);
      v13 = (std::string *)&v10[v11];
      if ((*(char *)(v5 + v11 + 23) & 0x80000000) == 0)
        break;
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
      v11 += 24;
      if (v5 + v11 == v6)
        goto LABEL_10;
    }
    v14 = *v12;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    v11 += 24;
  }
  while (v5 + v11 != v6);
LABEL_10:
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v10[v11];
  return this;
}

void cricket::ContentGroup::~ContentGroup(cricket::ContentGroup *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

char *cricket::ContentGroup::AddContentName(char *result, char *__src, size_t __len)
{
  char *v5;
  void **v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v12;
  char *v13;
  size_t v14;
  size_t v15;
  char *v16[2];

  v5 = result;
  v16[0] = __src;
  v16[1] = (char *)__len;
  v8 = (char *)*((_QWORD *)result + 3);
  v7 = *((_QWORD *)result + 4);
  v6 = (void **)(result + 24);
  if (v8 != (char *)v7)
  {
    while (1)
    {
      if (v8[23] < 0)
      {
        v9 = *((_QWORD *)v8 + 1);
        if (v9 < 0)
          goto LABEL_29;
        v10 = *(char **)v8;
        if (v9 && v10 == 0)
          goto LABEL_29;
      }
      else
      {
        v9 = v8[23];
        v10 = v8;
      }
      if (__len == v9)
      {
        result = (char *)memcmp(__src, v10, __len);
        if (!(_DWORD)result)
          break;
      }
      v8 += 24;
      if (v8 == (char *)v7)
        goto LABEL_14;
    }
  }
  if (v8 == (char *)v7)
  {
LABEL_14:
    if (v7 >= *((_QWORD *)v5 + 5))
    {
      result = std::vector<std::string>::__emplace_back_slow_path<std::string_view &>(v6, v16);
LABEL_28:
      *((_QWORD *)v5 + 4) = result;
      return result;
    }
    if (v7)
    {
      if (__len >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_30;
      if (__len > 0x16)
      {
        v14 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len | 7) != 0x17)
          v14 = __len | 7;
        v15 = v14 + 1;
        v12 = (char *)operator new(v14 + 1);
        *(_QWORD *)(v7 + 8) = __len;
        *(_QWORD *)(v7 + 16) = v15 | 0x8000000000000000;
        *(_QWORD *)v7 = v12;
        v13 = &v12[__len];
        if (v12 > __src)
          goto LABEL_25;
      }
      else
      {
        *(_BYTE *)(v7 + 23) = __len;
        v12 = (char *)v7;
        v13 = (char *)(v7 + __len);
        if (v7 > (unint64_t)__src)
          goto LABEL_25;
      }
      if (v13 <= __src)
      {
LABEL_25:
        if (__len)
          memmove(v12, __src, __len);
        *v13 = 0;
        result = (char *)(v7 + 24);
        goto LABEL_28;
      }
    }
LABEL_29:
    __break(1u);
LABEL_30:
    abort();
  }
  return result;
}

uint64_t cricket::ContentGroup::RemoveContentName(uint64_t result, void *__s1, size_t __n)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char *v12;
  char *v13;
  void **v14;
  char *v15;

  v3 = result;
  v5 = *(char **)(result + 24);
  v4 = *(char **)(result + 32);
  if (v5 == v4)
  {
    v8 = *(char **)(result + 24);
  }
  else
  {
    v8 = *(char **)(result + 24);
    while (1)
    {
      if (v8[23] < 0)
      {
        v9 = *((_QWORD *)v8 + 1);
        if (v9 < 0 || ((v10 = *(char **)v8, v9) ? (v11 = v10 == 0) : (v11 = 0), v11))
        {
          __break(1u);
          return result;
        }
      }
      else
      {
        v9 = v8[23];
        v10 = v8;
      }
      if (__n == v9)
      {
        result = memcmp(__s1, v10, __n);
        if (!(_DWORD)result)
          break;
      }
      v8 += 24;
      if (v8 == v4)
      {
        v8 = v4;
        break;
      }
    }
    if (v8 != v4)
    {
      if (v8 + 24 == v4)
      {
        v13 = v8;
        v15 = v4;
      }
      else
      {
        v12 = &v5[8 * ((v8 - v5) >> 3) + 23];
        v13 = v8;
        do
        {
          v14 = (void **)(v12 - 23);
          if (*v12 < 0)
            operator delete(*v14);
          *(_OWORD *)v14 = *(_OWORD *)(v12 + 1);
          *(_QWORD *)(v12 - 7) = *(_QWORD *)(v12 + 17);
          v12[24] = 0;
          v12 += 24;
          *(v12 - 23) = 0;
          v13 += 24;
        }
        while (v12 + 1 != v4);
        v15 = *(char **)(v3 + 32);
      }
      while (v15 != v13)
      {
        if (*(v15 - 1) < 0)
          operator delete(*((void **)v15 - 3));
        v15 -= 24;
      }
      *(_QWORD *)(v3 + 32) = v13;
    }
  }
  return v8 != v4;
}

double cricket::ContentGroup::ToString@<D0>(cricket::ContentGroup *this@<X0>, std::string *a2@<X8>)
{
  size_t size;
  BOOL v5;
  cricket::ContentGroup *v6;
  uint64_t v8;
  size_t v9;
  cricket::ContentGroup *v10;
  std::string::size_type v12;
  unint64_t v13;
  unint64_t v14;
  cricket::ContentGroup *v15;
  int v16;
  uint64_t v17;
  std::string::size_type v18;
  char *v19;
  char *v20;
  std::string *p_dst;
  _BYTE *v22;
  std::string::size_type v23;
  size_t v24;
  BOOL v25;
  char *v26;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  std::string *v35;
  _BYTE *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string *v40;
  _BYTE *v41;
  std::string::size_type v42;
  double result;
  std::string __dst;

  memset(&__dst, 0, sizeof(__dst));
  if (*((char *)this + 23) < 0)
  {
    size = *((_QWORD *)this + 1);
    if ((size & 0x8000000000000000) != 0)
      goto LABEL_102;
    v6 = *(cricket::ContentGroup **)this;
    v5 = size == 0;
    if (size && v6 == 0)
      goto LABEL_102;
  }
  else
  {
    size = *((unsigned __int8 *)this + 23);
    v5 = *((_BYTE *)this + 23) == 0;
    v6 = this;
  }
  if (size <= 0x16)
  {
    if (v5)
    {
      size = 0;
      v13 = 0;
      LODWORD(v14) = 0;
    }
    else
    {
      v15 = (cricket::ContentGroup *)((char *)&__dst + size);
      if (&__dst <= (std::string *)v6 && v15 > v6)
        goto LABEL_102;
      memmove(&__dst, v6, size);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        __dst.__r_.__value_.__l.__size_ = size;
      else
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size;
      *(_BYTE *)v15 = 0;
      LODWORD(v14) = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      v13 = __dst.__r_.__value_.__r.__words[2];
      size = __dst.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    if (size - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      goto LABEL_103;
    v8 = 44;
    if (size > 0x2C)
      v8 = size;
    v9 = (v8 | 7) + 1;
    v10 = (cricket::ContentGroup *)operator new(v9);
    if (v10 <= v6 && (cricket::ContentGroup *)((char *)v10 + size) > v6)
      goto LABEL_102;
    v12 = (std::string::size_type)v10;
    memcpy(v10, v6, size);
    v13 = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__l.__size_ = size;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = v12;
    *(_BYTE *)(v12 + size) = 0;
    v14 = (v9 | 0x8000000000000000) >> 56;
  }
  v16 = (char)v14;
  v17 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  v14 = v14;
  if ((v14 & 0x80u) == 0)
    v18 = 22;
  else
    v18 = v17;
  if ((v14 & 0x80u) != 0)
    v14 = size;
  if (v18 == v14)
  {
    std::string::__grow_by_and_replace(&__dst, v18, 1uLL, v18, v18, 0, 1uLL, "(");
    v19 = (char *)*((_QWORD *)this + 3);
    v20 = (char *)*((_QWORD *)this + 4);
    if (v19 != v20)
      goto LABEL_44;
    goto LABEL_86;
  }
  p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if (v16 >= 0)
    p_dst = &__dst;
  v22 = (char *)p_dst + v14;
  if ((char *)p_dst + v14 <= "(" && v22 + 1 > "(")
  {
LABEL_102:
    __break(1u);
LABEL_103:
    abort();
  }
  *v22 = 40;
  v23 = v14 + 1;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    __dst.__r_.__value_.__l.__size_ = v23;
    p_dst->__r_.__value_.__s.__data_[v23] = 0;
    v19 = (char *)*((_QWORD *)this + 3);
    v20 = (char *)*((_QWORD *)this + 4);
    while (v19 != v20)
    {
LABEL_44:
      if (v19[23] < 0)
      {
        v24 = *((_QWORD *)v19 + 1);
        if ((v24 & 0x8000000000000000) != 0)
          goto LABEL_102;
        v26 = *(char **)v19;
        v25 = v24 == 0;
        if (v24 && v26 == 0)
          goto LABEL_102;
      }
      else
      {
        v24 = v19[23];
        v25 = v19[23] == 0;
        v26 = v19;
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = 22;
      else
        v28 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v29 = __dst.__r_.__value_.__l.__size_;
      if (v28 - v29 >= v24)
      {
        if (!v25)
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = &__dst;
          else
            v30 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((char *)v30 + v29 <= v26 && (char *)v30 + v29 + v24 > v26)
            goto LABEL_102;
          memmove((char *)v30 + v29, v26, v24);
          v32 = v29 + v24;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            __dst.__r_.__value_.__l.__size_ = v29 + v24;
          else
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v32 & 0x7F;
          v30->__r_.__value_.__s.__data_[v32] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&__dst, v28, v29 + v24 - v28, v29, v29, 0, v24, v26);
      }
      v33 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = 22;
      else
        v34 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = __dst.__r_.__value_.__l.__size_;
      if (v34 == v33)
      {
        std::string::__grow_by_and_replace(&__dst, v34, 1uLL, v34, v34, 0, 1uLL, " ");
      }
      else
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &__dst;
        else
          v35 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v36 = (char *)v35 + v33;
        if ((char *)v35 + v33 <= " " && v36 + 1 > " ")
          goto LABEL_102;
        *v36 = 32;
        v37 = v33 + 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          __dst.__r_.__value_.__l.__size_ = v37;
        else
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 & 0x7F;
        v35->__r_.__value_.__s.__data_[v37] = 0;
      }
      v19 += 24;
    }
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v23 & 0x7F;
    p_dst->__r_.__value_.__s.__data_[v23] = 0;
    v19 = (char *)*((_QWORD *)this + 3);
    v20 = (char *)*((_QWORD *)this + 4);
    if (v19 != v20)
      goto LABEL_44;
  }
LABEL_86:
  v38 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = 22;
  else
    v39 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v38 = __dst.__r_.__value_.__l.__size_;
  if (v39 == v38)
  {
    std::string::__grow_by_and_replace(&__dst, v39, 1uLL, v39, v39, 0, 1uLL, ")");
    goto LABEL_101;
  }
  v40 = &__dst;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v40 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v41 = (char *)v40 + v38;
  if ((char *)v40 + v38 <= ")" && v41 + 1 > ")")
    goto LABEL_102;
  *v41 = 41;
  v42 = v38 + 1;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    __dst.__r_.__value_.__l.__size_ = v42;
  else
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v42 & 0x7F;
  v40->__r_.__value_.__s.__data_[v42] = 0;
LABEL_101:
  result = *(double *)&__dst.__r_.__value_.__l.__data_;
  *a2 = __dst;
  return result;
}

cricket::SessionDescription *cricket::SessionDescription::SessionDescription(cricket::SessionDescription *this, const cricket::SessionDescription *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
    if (v7 >= 0x666666666666667)
      goto LABEL_23;
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)this = v8;
    *((_QWORD *)this + 1) = v8;
    *((_QWORD *)this + 2) = &v8[40 * v7];
    do
    {
      v11 = (__int128 *)(v4 + v9);
      v12 = (std::string *)&v8[v9];
      if (*(char *)(v4 + v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
      }
      else
      {
        v13 = *v11;
        v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v10 = &v8[v9];
      *((_DWORD *)v10 + 6) = *(_DWORD *)(v4 + v9 + 24);
      *((_WORD *)v10 + 14) = *(_WORD *)(v4 + v9 + 28);
      *((_QWORD *)v10 + 4) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + v9 + 32) + 104))(*(_QWORD *)(v4 + v9 + 32));
      v9 += 40;
    }
    while (v4 + v9 != v5);
    *((_QWORD *)this + 1) = &v8[v9];
  }
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v14 = *((_QWORD *)a2 + 3);
  v15 = *((_QWORD *)a2 + 4);
  v16 = v15 - v14;
  if (v15 != v14)
  {
    v17 = 0x6DB6DB6DB6DB6DB7 * (v16 >> 4);
    if (v17 >= 0x24924924924924ALL)
      goto LABEL_23;
    v18 = (char *)operator new(v16);
    v19 = 0;
    *((_QWORD *)this + 3) = v18;
    *((_QWORD *)this + 4) = v18;
    *((_QWORD *)this + 5) = &v18[112 * v17];
    do
    {
      v20 = (__int128 *)(v14 + v19);
      v21 = (std::string *)&v18[v19];
      if (*(char *)(v14 + v19 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
      }
      else
      {
        v22 = *v20;
        v21->__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&v18[v19 + 24], (const cricket::TransportDescription *)(v14 + v19 + 24));
      v19 += 112;
    }
    while (v14 + v19 != v15);
    *((_QWORD *)this + 4) = &v18[v19];
  }
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v23 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 7);
  v25 = v24 - v23;
  if (v24 == v23)
    goto LABEL_22;
  v26 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 4);
  if (v26 >= 0x555555555555556)
LABEL_23:
    abort();
  v27 = (char *)operator new(v25);
  v28 = 0;
  *((_QWORD *)this + 6) = v27;
  *((_QWORD *)this + 7) = v27;
  *((_QWORD *)this + 8) = &v27[48 * v26];
  do
  {
    cricket::ContentGroup::ContentGroup((std::string *)&v27[v28], (__int128 *)(v23 + v28));
    v28 += 48;
  }
  while (v23 + v28 != v24);
  *((_QWORD *)this + 7) = &v27[v28];
LABEL_22:
  v29 = *((_DWORD *)a2 + 18);
  *((_BYTE *)this + 76) = *((_BYTE *)a2 + 76);
  *((_DWORD *)this + 18) = v29;
  return this;
}

void cricket::SessionDescription::~SessionDescription(cricket::SessionDescription *this)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v2 = (void **)*((_QWORD *)this + 6);
  if (v2)
  {
    v3 = (void **)*((_QWORD *)this + 7);
    v4 = (void *)*((_QWORD *)this + 6);
    if (v3 != v2)
    {
      do
      {
        v5 = (void **)*(v3 - 3);
        if (v5)
        {
          v6 = (void **)*(v3 - 2);
          v7 = *(v3 - 3);
          if (v6 != v5)
          {
            do
            {
              if (*((char *)v6 - 1) < 0)
                operator delete(*(v6 - 3));
              v6 -= 3;
            }
            while (v6 != v5);
            v7 = *(v3 - 3);
          }
          *(v3 - 2) = v5;
          operator delete(v7);
        }
        v8 = v3 - 6;
        if (*((char *)v3 - 25) < 0)
          operator delete(*v8);
        v3 -= 6;
      }
      while (v8 != v2);
      v4 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v2;
    operator delete(v4);
  }
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *((_QWORD *)this + 4);
    v11 = (void *)*((_QWORD *)this + 3);
    if (v10 != v9)
    {
      do
      {
        cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)(v10 - 88));
        if (*(char *)(v10 - 89) < 0)
          operator delete(*(void **)(v10 - 112));
        v10 -= 112;
      }
      while (v10 != v9);
      v11 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v9;
    operator delete(v11);
  }
  v12 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v13 = *((_QWORD *)this + 1);
    v14 = *(void **)this;
    if (v13 != v12)
    {
      do
      {
        v15 = *(_QWORD *)(v13 - 8);
        *(_QWORD *)(v13 - 8) = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        if (*(char *)(v13 - 17) < 0)
          operator delete(*(void **)(v13 - 40));
        v13 -= 40;
      }
      while (v13 != v12);
      v14 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v12;
    operator delete(v14);
  }
}

void cricket::SessionDescription::AddContent(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  int v18;
  __int16 v19;
  uint64_t v20;

  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  v18 = a3;
  v19 = 0;
  v20 = 0;
  if (__p == (void **)a2)
    goto LABEL_4;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v17 = *(_QWORD *)(a2 + 16);
LABEL_4:
    LOBYTE(v19) = a4;
    v8 = *a5;
    *a5 = 0;
    v20 = v8;
    goto LABEL_5;
  }
  std::string::__assign_no_alias<true>(__p, *(char **)a2, *(_QWORD *)(a2 + 8));
  v14 = v20;
  LOBYTE(v19) = a4;
  v15 = *a5;
  *a5 = 0;
  v20 = v15;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_5:
  if (*(_BYTE *)(a1 + 76))
    *(_DWORD *)(v20 + 200) = 1;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 >= *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = std::vector<cricket::ContentInfo>::__push_back_slow_path<cricket::ContentInfo>((void **)a1, (uint64_t)__p);
    v13 = v20;
    v20 = 0;
    if (!v13)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!v9)
  {
    __break(1u);
    return;
  }
  v10 = *(_OWORD *)__p;
  *(_QWORD *)(v9 + 16) = v17;
  *(_OWORD *)v9 = v10;
  __p[0] = 0;
  __p[1] = 0;
  v11 = v19;
  *(_DWORD *)(v9 + 24) = v18;
  *(_WORD *)(v9 + 28) = v11;
  v12 = v20;
  v17 = 0;
  v20 = 0;
  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(a1 + 8) = v9 + 40;
  v13 = v20;
  v20 = 0;
  if (v13)
LABEL_12:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_13:
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

void cricket::SessionDescription::AddContent(uint64_t a1, uint64_t a2, int a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  int v20;
  __int16 v21;
  uint64_t v22;

  __p[0] = 0;
  __p[1] = 0;
  v19 = 0;
  v20 = a3;
  v21 = 0;
  v22 = 0;
  if (__p == (void **)a2)
    goto LABEL_4;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v19 = *(_QWORD *)(a2 + 16);
LABEL_4:
    LOBYTE(v21) = a4;
    HIBYTE(v21) = a5;
    v10 = *a6;
    *a6 = 0;
    v22 = v10;
    goto LABEL_5;
  }
  std::string::__assign_no_alias<true>(__p, *(char **)a2, *(_QWORD *)(a2 + 8));
  v16 = v22;
  LOBYTE(v21) = a4;
  HIBYTE(v21) = a5;
  v17 = *a6;
  *a6 = 0;
  v22 = v17;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
LABEL_5:
  if (*(_BYTE *)(a1 + 76))
    *(_DWORD *)(v22 + 200) = 1;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11 >= *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = std::vector<cricket::ContentInfo>::__push_back_slow_path<cricket::ContentInfo>((void **)a1, (uint64_t)__p);
    v15 = v22;
    v22 = 0;
    if (!v15)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!v11)
  {
    __break(1u);
    return;
  }
  v12 = *(_OWORD *)__p;
  *(_QWORD *)(v11 + 16) = v19;
  *(_OWORD *)v11 = v12;
  __p[0] = 0;
  __p[1] = 0;
  v13 = v21;
  *(_DWORD *)(v11 + 24) = v20;
  *(_WORD *)(v11 + 28) = v13;
  v14 = v22;
  v19 = 0;
  v22 = 0;
  *(_QWORD *)(v11 + 32) = v14;
  *(_QWORD *)(a1 + 8) = v11 + 40;
  v15 = v22;
  v22 = 0;
  if (v15)
LABEL_12:
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_13:
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
}

char *cricket::SessionDescription::AddTransportInfo(char *result, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  __int128 v5;

  v3 = result;
  v4 = *((_QWORD *)result + 4);
  if (v4 >= *((_QWORD *)result + 5))
  {
    result = std::vector<cricket::TransportInfo>::__push_back_slow_path<cricket::TransportInfo const&>((void **)result + 3, a2);
    *((_QWORD *)v3 + 4) = result;
  }
  else if (v4)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*((std::string **)result + 4), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v5 = *(_OWORD *)a2;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v4 = v5;
    }
    cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)(v4 + 24), (const cricket::TransportDescription *)(a2 + 24));
    result = (char *)(v4 + 112);
    *((_QWORD *)v3 + 4) = v4 + 112;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void cricket::SessionDescription::GetGroupsByName(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, char **a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  char *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  _BYTE *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if (v3 != v4)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *(unsigned __int8 *)(v3 + 23);
      if ((v9 & 0x80u) == 0)
        v10 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v10 = *(unsigned __int8 **)(v3 + 8);
      v11 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      v12 = (char)v11;
      if ((char)v11 < 0)
        v11 = a2[1];
      if (v10 != v11)
        goto LABEL_5;
      if (v12 >= 0)
        v13 = (unsigned __int8 *)a2;
      else
        v13 = *a2;
      if ((v9 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v3, v13, *(_QWORD *)(v3 + 8)))
          goto LABEL_5;
      }
      else if (*(_BYTE *)(v3 + 23))
      {
        v14 = 0;
        while (*(unsigned __int8 *)(v3 + v14) == v13[v14])
        {
          if (v9 == ++v14)
            goto LABEL_22;
        }
        goto LABEL_5;
      }
LABEL_22:
      v15 = (unint64_t)a3[2];
      if ((unint64_t)v7 < v15)
      {
        if (!v7)
          goto LABEL_50;
        *(_QWORD *)v7 = v3;
        v16 = v7 + 8;
        goto LABEL_4;
      }
      v17 = (v7 - v8) >> 3;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        goto LABEL_51;
      v19 = v15 - (_QWORD)v8;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      v20 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8;
      v21 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v20)
        v21 = v18;
      if (!v21)
      {
LABEL_50:
        __break(1u);
LABEL_51:
        abort();
      }
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v39 = 8 * v21;
      v22 = operator new(8 * v21);
      v23 = &v22[8 * v17];
      *(_QWORD *)v23 = v3;
      v16 = v23 + 8;
      if (v7 != v8)
        break;
      *a3 = v23;
      a3[1] = v16;
      a3[2] = &v22[v39];
      if (v8)
        goto LABEL_44;
LABEL_3:
      v8 = v23;
LABEL_4:
      a3[1] = v16;
      v7 = v16;
LABEL_5:
      v3 += 48;
      if (v3 == v4)
        return;
    }
    v24 = v7 - v8 - 8;
    if (v24 < 0x168
      || ((v25 = (v7 - 8 - v8) & 0xFFFFFFFFFFFFFFF8,
           v26 = (unint64_t)&v22[v7 - v8 - 8],
           v27 = v26 - v25,
           v28 = (unint64_t)&v7[-v25 - 8],
           v27 <= v26)
        ? (v29 = v28 > (unint64_t)(v7 - 8))
        : (v29 = 1),
          v29 || (unint64_t)(v8 - v22) < 0x20))
    {
      v30 = v7;
      v31 = v39;
    }
    else
    {
      v33 = (v24 >> 3) + 1;
      v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
      v30 = &v7[-v34];
      v23 -= v34;
      v35 = &v22[8 * v17 - 16];
      v36 = v7 - 16;
      v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = *(_OWORD *)v36;
        *(v35 - 1) = *((_OWORD *)v36 - 1);
        *v35 = v38;
        v35 -= 2;
        v36 -= 32;
        v37 -= 4;
      }
      while (v37);
      v31 = v39;
      if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_41:
        *a3 = v23;
        a3[1] = v16;
        a3[2] = &v22[v31];
        if (!v8)
          goto LABEL_3;
LABEL_44:
        operator delete(v8);
        goto LABEL_3;
      }
    }
    do
    {
      v32 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      *((_QWORD *)v23 - 1) = v32;
      v23 -= 8;
    }
    while (v30 != v8);
    goto LABEL_41;
  }
}

char *std::vector<std::string>::__emplace_back_slow_path<std::string_view &>(void **a1, char **a2)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  void **v21;

  v3 = (void **)*a1;
  v2 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_30;
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)v3) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)v3) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  if (!v5)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v8 = 24 * v5;
  v9 = (char *)operator new(24 * v5);
  v10 = (size_t)a2[1];
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    abort();
  v11 = v9;
  v12 = &v9[24 * v4];
  v13 = *a2;
  if (v10 <= 0x16)
  {
    v12[23] = v10;
    v14 = &v9[24 * v4];
    v15 = &v12[v10];
    if (v12 > v13)
      goto LABEL_16;
    goto LABEL_15;
  }
  v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v10 | 7) != 0x17)
    v16 = v10 | 7;
  v17 = v16 + 1;
  v14 = (char *)operator new(v16 + 1);
  *((_QWORD *)v12 + 1) = v10;
  *((_QWORD *)v12 + 2) = v17 | 0x8000000000000000;
  *(_QWORD *)v12 = v14;
  v15 = &v14[v10];
  if (v14 <= v13)
  {
LABEL_15:
    if (v15 <= v13)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_16:
  if (v10)
    memmove(v14, v13, v10);
  v18 = &v11[v8];
  *v15 = 0;
  v19 = v12 + 24;
  if (v2 == v3)
  {
    *a1 = v12;
    a1[1] = v19;
    a1[2] = v18;
  }
  else
  {
    do
    {
      v20 = *(_OWORD *)(v2 - 3);
      *((_QWORD *)v12 - 1) = *(v2 - 1);
      *(_OWORD *)(v12 - 24) = v20;
      v12 -= 24;
      *(v2 - 2) = 0;
      *(v2 - 1) = 0;
      *(v2 - 3) = 0;
      v2 -= 3;
    }
    while (v2 != v3);
    v2 = (void **)*a1;
    v21 = (void **)a1[1];
    *a1 = v12;
    a1[1] = v19;
    a1[2] = v18;
    while (v21 != v2)
    {
      if (*((char *)v21 - 1) < 0)
        operator delete(*(v21 - 3));
      v21 -= 3;
    }
  }
  if (v2)
    operator delete(v2);
  return v19;
}

char *std::vector<cricket::ContentInfo>::__push_back_slow_path<cricket::ContentInfo>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v2 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v5 = 0x666666666666666;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_24:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x666666666666666)
    goto LABEL_24;
  v7 = 40 * v5;
  v8 = (char *)operator new(40 * v5);
  v9 = &v8[40 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[v7];
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *((_DWORD *)v9 + 6) = *(_DWORD *)(a2 + 24);
  *((_WORD *)v9 + 14) = *(_WORD *)(a2 + 28);
  v11 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *((_QWORD *)v9 + 4) = v11;
  v12 = v9 + 40;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *(_OWORD *)(v14 - 40);
      *((_QWORD *)v9 - 3) = *((_QWORD *)v14 - 3);
      *(_OWORD *)(v9 - 40) = v15;
      *((_QWORD *)v14 - 4) = 0;
      *((_QWORD *)v14 - 3) = 0;
      *((_QWORD *)v14 - 5) = 0;
      v16 = *((_DWORD *)v14 - 4);
      *((_WORD *)v9 - 6) = *((_WORD *)v14 - 6);
      *((_DWORD *)v9 - 4) = v16;
      v17 = *((_QWORD *)v14 - 1);
      *((_QWORD *)v14 - 1) = 0;
      *((_QWORD *)v9 - 1) = v17;
      v9 -= 40;
      v14 -= 40;
    }
    while (v14 != v13);
    v14 = (char *)*a1;
    v18 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v18 != v14)
    {
      v19 = *((_QWORD *)v18 - 1);
      *((_QWORD *)v18 - 1) = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      if (*(v18 - 17) < 0)
        operator delete(*((void **)v18 - 5));
      v18 -= 40;
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

char *std::vector<cricket::TransportInfo>::__push_back_slow_path<cricket::TransportInfo const&>(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  __int128 v15;
  cricket::TransportDescription *v16;
  void **v17;

  v2 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)) >= 0x124924924924924)
    v5 = 0x249249249249249;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_25:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x249249249249249)
    goto LABEL_25;
  v7 = 112 * v5;
  v8 = (char *)operator new(112 * v5);
  v9 = v8;
  v10 = &v8[112 * v2];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v8[112 * v2], *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  v11 = &v9[v7];
  cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&v9[112 * v2 + 24], (const cricket::TransportDescription *)(a2 + 24));
  v12 = v10 + 112;
  v14 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 7);
      *((_QWORD *)v10 - 12) = *(v13 - 12);
      *((_OWORD *)v10 - 7) = v15;
      v16 = (cricket::TransportDescription *)(v10 - 88);
      v10 -= 112;
      *(v13 - 13) = 0;
      *(v13 - 12) = 0;
      *(v13 - 14) = 0;
      cricket::TransportDescription::TransportDescription(v16, (const cricket::TransportDescription *)(v13 - 11));
      v13 -= 14;
    }
    while (v13 != v14);
    v13 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    while (v17 != v13)
    {
      cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)(v17 - 11));
      if (*((char *)v17 - 89) < 0)
        operator delete(*(v17 - 14));
      v17 -= 14;
    }
  }
  if (v13)
    operator delete(v13);
  return v12;
}

void dcsctp::ShutdownAckChunk::SerializeTo(uint64_t a1, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  char *v5;

  v3 = *(char **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v4 > 0xFFFFFFFFFFFFFFFBLL)
  {
    *(_QWORD *)(a2 + 8) = &v3[v4 + 4];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 4uLL);
    v3 = *(char **)a2;
  }
  v5 = &v3[v4];
  *v5 = 8;
  *((_WORD *)v5 + 1) = 1024;
}

void dcsctp::ShutdownAckChunk::ToString(char *a1@<X8>)
{
  a1[23] = 12;
  if (a1 <= "SHUTDOWN-ACK" && a1 + 12 > "SHUTDOWN-ACK")
    __break(1u);
  else
    strcpy(a1, "SHUTDOWN-ACK");
}

void dcsctp::ShutdownAckChunk::~ShutdownAckChunk(dcsctp::ShutdownAckChunk *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::ShutdownChunk::SerializeTo(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  char *v6;

  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v5 > 0xFFFFFFFFFFFFFFF7)
  {
    *(_QWORD *)(a2 + 8) = &v4[v5 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 8uLL);
    v4 = *(char **)a2;
  }
  v6 = &v4[v5];
  *v6 = 7;
  *((_WORD *)v6 + 1) = 2048;
  *(_DWORD *)(*(_QWORD *)a2 + v5 + 4) = bswap32(*(_DWORD *)(a1 + 8));
}

void dcsctp::ShutdownChunk::ToString(char *a1@<X8>)
{
  a1[23] = 8;
  if (a1 <= "SHUTDOWN" && a1 + 8 > "SHUTDOWN")
    __break(1u);
  else
    strcpy(a1, "SHUTDOWN");
}

void dcsctp::ShutdownChunk::~ShutdownChunk(dcsctp::ShutdownChunk *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::ShutdownCompleteChunk::SerializeTo(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  char *v6;

  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v5 > 0xFFFFFFFFFFFFFFFBLL)
  {
    *(_QWORD *)(a2 + 8) = &v4[v5 + 4];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 4uLL);
    v4 = *(char **)a2;
  }
  v6 = &v4[v5];
  *v6 = 14;
  *((_WORD *)v6 + 1) = 1024;
  *(_BYTE *)(*(_QWORD *)a2 + v5 + 1) = *(_BYTE *)(a1 + 8);
}

void dcsctp::ShutdownCompleteChunk::ToString(char *a1@<X8>)
{
  a1[23] = 17;
  if (a1 <= "SHUTDOWN-COMPLETE" && a1 + 17 > "SHUTDOWN-COMPLETE")
    __break(1u);
  else
    strcpy(a1, "SHUTDOWN-COMPLETE");
}

void dcsctp::ShutdownCompleteChunk::~ShutdownCompleteChunk(dcsctp::ShutdownCompleteChunk *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

webrtc::SignalDependentErleEstimator *webrtc::SignalDependentErleEstimator::SignalDependentErleEstimator(webrtc::SignalDependentErleEstimator *this, const webrtc::EchoCanceller3Config *a2, unint64_t a3, int32x2_t a4, int32x2_t a5)
{
  const webrtc::EchoCanceller3Config *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t i;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  int32x4_t v18;
  unint64_t v19;
  int32x4_t *v20;
  unint64_t v21;
  int32x4_t *v22;
  unint64_t v23;
  unint64_t v24;
  int32x4_t *v25;
  int32x4_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  BOOL v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int64x2_t v53;
  int64x2_t *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char **v68;
  char **v69;
  int64_t v70;
  uint64_t v71;
  char **v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void *v76;
  char **v77;
  int64_t v78;
  uint64_t v79;
  char **v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char **v89;
  int64_t v90;
  uint64_t v91;
  char **v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  const webrtc::EchoCanceller3Config *v100;
  unint64_t v101;

  v6 = a2;
  *(_DWORD *)this = *((_DWORD *)a2 + 60);
  v8 = *((_QWORD *)a2 + 32);
  v9 = *((_QWORD *)a2 + 15);
  *((_QWORD *)this + 1) = v8;
  *((_QWORD *)this + 2) = v9;
  v10 = *((_QWORD *)a2 + 5) >> 6;
  *((_QWORD *)this + 3) = v10;
  v11 = 1;
  for (i = 4; i != 69; ++i)
  {
      ++v11;
    *((_QWORD *)this + i) = v11 - 1;
  }
  v13 = (char *)this + 552;
  a4.i32[0] = *((_DWORD *)a2 + 62);
  v14 = *((_QWORD *)this + 36);
  if (v14 < 1)
    goto LABEL_14;
  a5.i32[0] = *((_DWORD *)a2 + 61);
  v15 = v14 & 0x3FFFFFFFFFFFFFFFLL;
  v16 = (v14 & 0x3FFFFFFFFFFFFFFFLL) - ((v14 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
  if (v16 < 8)
  {
    v17 = (char *)this + 552;
LABEL_11:
    v21 = v15 + 1;
    do
    {
      *(_DWORD *)v17 = a5.i32[0];
      v17 += 4;
      --v21;
    }
    while (v21 > 1);
    goto LABEL_13;
  }
  v17 = &v13[4 * (v16 & 0xFFFFFFFFFFFFFFF8)];
  v15 -= v16 & 0xFFFFFFFFFFFFFFF8;
  v18 = vdupq_lane_s32(a5, 0);
  v19 = v16 & 0xFFFFFFFFFFFFFFF8;
  v20 = (int32x4_t *)((char *)this + 552);
  do
  {
    *v20 = v18;
    v20[1] = v18;
    v20 += 2;
    v19 -= 8;
  }
  while (v19);
  if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_11;
LABEL_13:
  if (v14 > 5)
    goto LABEL_21;
LABEL_14:
  v22 = (int32x4_t *)&v13[4 * v14];
  v23 = (unint64_t)(24 - 4 * v14) >> 2;
  v24 = v23 - (v14 != 6) + 1;
  if (v24 < 8)
  {
    v25 = v22;
LABEL_19:
    v28 = v23 + 1;
    do
    {
      v25->i32[0] = a4.i32[0];
      v25 = (int32x4_t *)((char *)v25 + 4);
      --v28;
    }
    while (v28 > 1);
    goto LABEL_21;
  }
  v25 = (int32x4_t *)((char *)v22 + 4 * (v24 & 0xFFFFFFFFFFFFFFF8));
  v23 -= v24 & 0xFFFFFFFFFFFFFFF8;
  v26 = vdupq_lane_s32(a4, 0);
  v27 = v24 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    *v22 = v26;
    v22[1] = v26;
    v22 += 2;
    v27 -= 8;
  }
  while (v27);
  if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_19;
LABEL_21:
  v29 = 0;
  v30 = 0;
  *((_QWORD *)this + 74) = 0;
  *((_OWORD *)this + 36) = 0u;
  v31 = __CFADD__(v8, 1);
  v32 = v8 + 1;
  if (!v31)
  {
    if (v32 >> 61)
      goto LABEL_121;
    v33 = 8 * v32;
    v29 = (char *)operator new(8 * v32);
    *((_QWORD *)this + 72) = v29;
    v30 = &v29[v33];
    *((_QWORD *)this + 74) = &v29[v33];
    bzero(v29, v33);
    *((_QWORD *)this + 73) = &v29[v33];
  }
  v34 = v30 - v29;
  v101 = a3;
  if (v30 - v29 == 16)
  {
    *(_QWORD *)v29 = 0;
    *((_QWORD *)v29 + 1) = v9;
    goto LABEL_65;
  }
  v100 = v6;
  v35 = v34 >> 3;
  v36 = v9 - v10;
  v37 = (v34 >> 3) - 1;
  if (v34 >> 3 != 1)
  {
    if (v37 >> 61)
      goto LABEL_121;
    v38 = (char *)operator new(8 * v37);
    bzero(v38, 8 * v37);
    v39 = 0;
    if (v37 < 2 || v36 <= 2 * v37)
    {
      v44 = v37;
      v42 = &v38[8 * v37];
      v45 = (uint64_t)(8 * v37) >> 3;
      v46 = v36 / v37;
    }
    else
    {
      v39 = 0;
      v40 = v35 - 2;
      v41 = 2;
      v42 = &v38[8 * v37];
      do
      {
        if (v37 == v39)
          goto LABEL_120;
        *(_QWORD *)&v38[8 * v39] = v41;
        v36 -= v41;
        ++v39;
        if (v40 < 2)
          break;
        v41 *= 2;
        v43 = v40 * v41;
        --v40;
      }
      while (v36 > v43);
      v44 = v37 - v39;
      v45 = (uint64_t)(8 * v37) >> 3;
      v46 = v36 / (v37 - v39);
      if (v39 >= v37)
        goto LABEL_53;
    }
LABEL_39:
    if (v39 <= v45)
      v47 = v45;
    else
      v47 = v39;
    v48 = v35 - v39 - 2;
    if (v48 >= v47 - v39)
      v48 = v47 - v39;
    v49 = v48 + 1;
    if (v49 >= 5)
    {
      v50 = v49 & 3;
      if ((v49 & 3) == 0)
        v50 = 4;
      v51 = v49 - v50;
      v52 = v39 + v51;
      v53 = vdupq_n_s64(v46);
      v54 = (int64x2_t *)&v38[8 * v39 + 16];
      do
      {
        v54[-1] = v53;
        *v54 = v53;
        v54 += 2;
        v51 -= 4;
      }
      while (v51);
      v39 = v52;
    }
    v55 = (unint64_t *)&v38[8 * v39];
    v56 = ~v39 + v35;
    v57 = v47 - v39;
    while (v57)
    {
      *v55++ = v46;
      --v57;
      if (!--v56)
        goto LABEL_53;
    }
    goto LABEL_120;
  }
  v38 = 0;
  v42 = 0;
  v44 = 0;
  v39 = 0;
  v45 = 0;
  v46 = v36 / 0;
  if (v37)
    goto LABEL_39;
LABEL_53:
  if (v45 <= v35 - 2)
    goto LABEL_120;
  *(_QWORD *)&v38[8 * v35 - 16] += v36 - v46 * v44;
  if (v30 == v29)
    goto LABEL_120;
  *(_QWORD *)v29 = v10;
  v58 = (v42 - v38) >> 3;
  v6 = v100;
  if (v9 > v10)
  {
    v59 = 0;
    v60 = 0;
    while (v58 > v60)
    {
      if ((unint64_t)++v59 < *(_QWORD *)&v38[8 * v60])
      {
        if (++v10 == v9)
          goto LABEL_63;
      }
      else
      {
        if (++v60 == v58)
          goto LABEL_63;
        if (v35 <= v60)
          goto LABEL_120;
        v59 = 0;
        *(_QWORD *)&v29[8 * v60] = ++v10;
        if (v10 == v9)
          goto LABEL_63;
      }
    }
    goto LABEL_120;
  }
LABEL_63:
  if (v35 <= v58)
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  *(_QWORD *)&v29[8 * v58] = v9;
  operator delete(v38);
  a3 = v101;
LABEL_65:
  *((_BYTE *)this + 600) = *((_BYTE *)v6 + 252);
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 77) = 0;
  if (a3)
  {
    if (a3 > 0xFC0FC0FC0FC0FCLL)
      goto LABEL_121;
    v61 = (char *)operator new(260 * a3);
    *((_QWORD *)this + 76) = v61;
    v62 = &v61[260 * a3];
    *((_QWORD *)this + 78) = v62;
    bzero(v61, 260 * ((260 * a3 - 260) / 0x104) + 260);
    *((_QWORD *)this + 77) = v62;
    v63 = (char *)operator new(260 * a3);
    *((_QWORD *)this + 79) = v63;
    v64 = &v63[260 * a3];
    *((_QWORD *)this + 81) = v64;
    bzero(v63, 260 * ((260 * a3 - 260) / 0x104) + 260);
    *((_QWORD *)this + 80) = v64;
    v65 = *((_QWORD *)this + 1);
    if (v65)
    {
LABEL_68:
      if (v65 > 0xFC0FC0FC0FC0FCLL)
        goto LABEL_121;
      v66 = (char *)operator new(260 * v65);
      v67 = &v66[260 * v65];
      bzero(v66, 260 * ((260 * v65 - 260) / 0x104) + 260);
      *((_QWORD *)this + 82) = 0;
      *((_QWORD *)this + 83) = 0;
      *((_QWORD *)this + 84) = 0;
      if (!a3)
        goto LABEL_80;
      goto LABEL_73;
    }
  }
  else
  {
    *((_QWORD *)this + 81) = 0;
    *(_OWORD *)((char *)this + 632) = 0u;
    v65 = *((_QWORD *)this + 1);
    if (v65)
      goto LABEL_68;
  }
  v66 = 0;
  v67 = 0;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 84) = 0;
  if (!a3)
    goto LABEL_80;
LABEL_73:
  v68 = (char **)operator new(24 * a3);
  *((_QWORD *)this + 82) = v68;
  *((_QWORD *)this + 83) = v68;
  v69 = &v68[3 * a3];
  *((_QWORD *)this + 84) = v69;
  v70 = v67 - v66;
  if (v67 == v66)
  {
    bzero(v68, 24 * ((24 * a3 - 24) / 0x18) + 24);
  }
  else
  {
    if ((unint64_t)(0xFC0FC0FC0FC0FC1 * (v70 >> 2)) > 0xFC0FC0FC0FC0FCLL)
      goto LABEL_122;
    v71 = 24 * a3;
    v72 = v68 + 1;
    do
    {
      *v72 = 0;
      v72[1] = 0;
      v73 = (char *)operator new(v70);
      *(v72 - 1) = v73;
      v74 = &v73[4 * (v70 >> 2)];
      v72[1] = v74;
      memcpy(v73, v66, v70);
      *v72 = v74;
      v72 += 3;
      v71 -= 24;
    }
    while (v71);
  }
  *((_QWORD *)this + 83) = v69;
  a3 = v101;
LABEL_80:
  if (v66)
  {
    operator delete(v66);
    v65 = *((_QWORD *)this + 1);
  }
  if (v65)
  {
    if (v65 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_121;
    v75 = 24 * v65;
    v76 = operator new(24 * v65);
    v65 = (unint64_t)v76 + 24 * v65;
    bzero(v76, 24 * ((v75 - 24) / 0x18uLL) + 24);
    *((_QWORD *)this + 85) = 0;
    *((_QWORD *)this + 86) = 0;
    *((_QWORD *)this + 87) = 0;
    if (!a3)
      goto LABEL_95;
  }
  else
  {
    v76 = 0;
    *((_QWORD *)this + 85) = 0;
    *((_QWORD *)this + 86) = 0;
    *((_QWORD *)this + 87) = 0;
    if (!a3)
      goto LABEL_95;
  }
  if (a3 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_121;
  v68 = (char **)operator new(24 * a3);
  *((_QWORD *)this + 85) = v68;
  *((_QWORD *)this + 86) = v68;
  v77 = &v68[3 * a3];
  *((_QWORD *)this + 87) = v77;
  v78 = v65 - (_QWORD)v76;
  if ((void *)v65 == v76)
  {
    bzero(v68, 24 * ((24 * a3 - 24) / 0x18) + 24);
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v78 >> 3) > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_122;
    v79 = 24 * a3;
    v80 = v68 + 1;
    do
    {
      *v80 = 0;
      v80[1] = 0;
      v81 = (char *)operator new(v78);
      *(v80 - 1) = v81;
      v82 = &v81[8 * (v78 >> 3)];
      v80[1] = v82;
      memcpy(v81, v76, v78);
      *v80 = v82;
      v80 += 3;
      v79 -= 24;
    }
    while (v79);
  }
  *((_QWORD *)this + 86) = v77;
  a3 = v101;
LABEL_95:
  if (v76)
    operator delete(v76);
  *((_QWORD *)this + 90) = 0;
  *((_OWORD *)this + 44) = 0u;
  if (a3)
  {
    if (a3 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_121;
    v83 = (char *)operator new(24 * a3);
    *((_QWORD *)this + 88) = v83;
    v84 = &v83[24 * a3];
    *((_QWORD *)this + 90) = v84;
    bzero(v83, 24 * ((24 * a3 - 24) / 0x18) + 24);
    *((_QWORD *)this + 89) = v84;
  }
  v85 = *((_QWORD *)this + 1);
  if (!v85)
  {
    v87 = 0;
    v88 = 0;
    *((_QWORD *)this + 91) = 0;
    *((_QWORD *)this + 92) = 0;
    *((_QWORD *)this + 93) = 0;
    if (!a3)
      goto LABEL_112;
    goto LABEL_105;
  }
  if (v85 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_121;
  v86 = 24 * v85;
  v87 = (char *)operator new(24 * v85);
  v88 = &v87[v86];
  bzero(v87, 24 * ((v86 - 24) / 0x18uLL) + 24);
  *((_QWORD *)this + 91) = 0;
  *((_QWORD *)this + 92) = 0;
  *((_QWORD *)this + 93) = 0;
  if (a3)
  {
LABEL_105:
    v68 = (char **)operator new(24 * a3);
    *((_QWORD *)this + 91) = v68;
    *((_QWORD *)this + 92) = v68;
    v89 = &v68[3 * a3];
    *((_QWORD *)this + 93) = v89;
    v90 = v88 - v87;
    if (v88 == v87)
    {
      bzero(v68, 24 * ((24 * a3 - 24) / 0x18) + 24);
LABEL_111:
      *((_QWORD *)this + 92) = v89;
      a3 = v101;
      goto LABEL_112;
    }
    if (0xAAAAAAAAAAAAAAABLL * (v90 >> 3) <= 0xAAAAAAAAAAAAAAALL)
    {
      v91 = 24 * a3;
      v92 = v68 + 1;
      do
      {
        *v92 = 0;
        v92[1] = 0;
        v93 = (char *)operator new(v90);
        *(v92 - 1) = v93;
        v94 = &v93[8 * (v90 >> 3)];
        v92[1] = v94;
        memcpy(v93, v87, v90);
        *v92 = v94;
        v92 += 3;
        v91 -= 24;
      }
      while (v91);
      goto LABEL_111;
    }
LABEL_122:
    *v68 = 0;
    v68[1] = 0;
    v68[2] = 0;
    abort();
  }
LABEL_112:
  if (v87)
    operator delete(v87);
  *((_QWORD *)this + 96) = 0;
  *((_OWORD *)this + 47) = 0u;
  if (!a3)
  {
    *((_QWORD *)this + 99) = 0;
    *(_OWORD *)((char *)this + 776) = 0uLL;
    goto LABEL_119;
  }
  if (a3 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_121;
  v95 = (char *)operator new(24 * a3);
  *((_QWORD *)this + 94) = v95;
  v96 = &v95[24 * a3];
  *((_QWORD *)this + 96) = v96;
  bzero(v95, 24 * ((24 * a3 - 24) / 0x18) + 24);
  *((_QWORD *)this + 95) = v96;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 99) = 0;
  *((_QWORD *)this + 98) = 0;
  if (a3 >= 0x7E07E07E07E07FLL)
LABEL_121:
    abort();
  v97 = (char *)operator new(520 * a3);
  *((_QWORD *)this + 97) = v97;
  v98 = &v97[520 * a3];
  *((_QWORD *)this + 99) = v98;
  bzero(v97, 520 * ((520 * a3 - 520) / 0x208) + 520);
  *((_QWORD *)this + 98) = v98;
LABEL_119:
  webrtc::SignalDependentErleEstimator::Reset(this);
  return this;
}

void webrtc::SignalDependentErleEstimator::Reset(webrtc::SignalDependentErleEstimator *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *i;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;

  v1 = *((_QWORD *)this + 76);
  if (*((_QWORD *)this + 77) != v1)
  {
    v3 = 0;
    while (1)
    {
      std::array<float,65ul>::fill[abi:sn180100]((_DWORD *)(v1 + 260 * v3), this);
      v4 = *((_QWORD *)this + 79);
      if (0xFC0FC0FC0FC0FC1 * ((*((_QWORD *)this + 80) - v4) >> 2) <= v3)
        break;
      std::array<float,65ul>::fill[abi:sn180100]((_DWORD *)(v4 + 260 * v3), this);
      v5 = *((_QWORD *)this + 85);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 86) - v5) >> 3) <= v3)
        break;
      v6 = v5 + 24 * v3;
      v7 = *(_DWORD **)v6;
      for (i = *(_DWORD **)(v6 + 8); v7 != i; v7 += 6)
      {
        *v7 = *(_DWORD *)this;
        v7[1] = *(_DWORD *)this;
        v7[2] = *(_DWORD *)this;
        v7[3] = *(_DWORD *)this;
        v7[4] = *(_DWORD *)this;
        v7[5] = *(_DWORD *)this;
      }
      v9 = *((_QWORD *)this + 88);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 89) - v9) >> 3) <= v3)
        break;
      v10 = (_DWORD *)(v9 + 24 * v3);
      *v10 = *(_DWORD *)this;
      v10[1] = *(_DWORD *)this;
      v10[2] = *(_DWORD *)this;
      v10[3] = *(_DWORD *)this;
      v10[4] = *(_DWORD *)this;
      v10[5] = *(_DWORD *)this;
      v11 = *((_QWORD *)this + 91);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 92) - v11) >> 3) <= v3)
        break;
      v12 = v11 + 24 * v3;
      v13 = *(_BYTE **)v12;
      v14 = *(_BYTE **)(v12 + 8);
      if (v13 != v14)
        memset_pattern16(v13, &unk_208F0E0B0, 24 * ((v14 - v13 - 24) / 0x18uLL) + 24);
      v15 = *((_QWORD *)this + 94);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 95) - v15) >> 3) <= v3)
        break;
      v16 = (_QWORD *)(v15 + 24 * v3);
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      v17 = *((_QWORD *)this + 97);
      if (0xFC0FC0FC0FC0FC1 * ((*((_QWORD *)this + 98) - v17) >> 3) <= v3)
        break;
      v18 = (void *)(v17 + 520 * v3++);
      bzero(v18, 0x208uLL);
      v1 = *((_QWORD *)this + 76);
      if (v3 >= 0xFC0FC0FC0FC0FC1 * ((*((_QWORD *)this + 77) - v1) >> 2))
        return;
    }
    __break(1u);
  }
}

void webrtc::SignalDependentErleEstimator::~SignalDependentErleEstimator(webrtc::SignalDependentErleEstimator *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v2 = (void *)*((_QWORD *)this + 97);
  if (v2)
  {
    *((_QWORD *)this + 98) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 94);
  if (v3)
  {
    *((_QWORD *)this + 95) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 91);
  if (v4)
  {
    v5 = *((_QWORD *)this + 92);
    v6 = (void *)*((_QWORD *)this + 91);
    if (v5 != v4)
    {
      v7 = *((_QWORD *)this + 92);
      do
      {
        v9 = *(void **)(v7 - 24);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *(_QWORD *)(v5 - 16) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = (void *)*((_QWORD *)this + 91);
    }
    *((_QWORD *)this + 92) = v4;
    operator delete(v6);
  }
  v10 = (void *)*((_QWORD *)this + 88);
  if (v10)
  {
    *((_QWORD *)this + 89) = v10;
    operator delete(v10);
  }
  v11 = *((_QWORD *)this + 85);
  if (v11)
  {
    v12 = *((_QWORD *)this + 86);
    v13 = (void *)*((_QWORD *)this + 85);
    if (v12 != v11)
    {
      v14 = *((_QWORD *)this + 86);
      do
      {
        v16 = *(void **)(v14 - 24);
        v14 -= 24;
        v15 = v16;
        if (v16)
        {
          *(_QWORD *)(v12 - 16) = v15;
          operator delete(v15);
        }
        v12 = v14;
      }
      while (v14 != v11);
      v13 = (void *)*((_QWORD *)this + 85);
    }
    *((_QWORD *)this + 86) = v11;
    operator delete(v13);
  }
  v17 = *((_QWORD *)this + 82);
  if (v17)
  {
    v18 = *((_QWORD *)this + 83);
    v19 = (void *)*((_QWORD *)this + 82);
    if (v18 != v17)
    {
      v20 = *((_QWORD *)this + 83);
      do
      {
        v22 = *(void **)(v20 - 24);
        v20 -= 24;
        v21 = v22;
        if (v22)
        {
          *(_QWORD *)(v18 - 16) = v21;
          operator delete(v21);
        }
        v18 = v20;
      }
      while (v20 != v17);
      v19 = (void *)*((_QWORD *)this + 82);
    }
    *((_QWORD *)this + 83) = v17;
    operator delete(v19);
  }
  v23 = (void *)*((_QWORD *)this + 79);
  if (v23)
  {
    *((_QWORD *)this + 80) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 76);
  if (v24)
  {
    *((_QWORD *)this + 77) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 72);
  if (v25)
  {
    *((_QWORD *)this + 73) = v25;
    operator delete(v25);
  }
}

void webrtc::SignalDependentErleEstimator::Update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, uint64_t a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  float32x4_t v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t *v75;
  float32x4_t *v76;
  uint64_t v77;
  unint64_t v78;
  float32x4_t *v79;
  uint64_t v80;
  unint64_t v81;
  float32x4_t *v82;
  uint64_t v83;
  float32x4_t *v84;
  uint64_t v85;
  unint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  BOOL v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  BOOL v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  BOOL v157;
  uint64_t v158;
  BOOL v159;
  unint64_t v160;
  BOOL v161;
  uint64_t v162;
  BOOL v163;
  uint64_t v164;
  BOOL v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  BOOL v173;
  uint64_t v174;
  BOOL v175;
  uint64_t v176;
  BOOL v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  BOOL v183;
  uint64_t v184;
  BOOL v185;
  unint64_t v186;
  BOOL v187;
  unint64_t v188;
  BOOL v189;
  unint64_t v190;
  BOOL v191;
  unint64_t v192;
  BOOL v193;
  unint64_t v194;
  BOOL v195;
  unint64_t v196;
  BOOL v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  BOOL v203;
  uint64_t v204;
  BOOL v205;
  unint64_t v206;
  BOOL v207;
  unint64_t v208;
  BOOL v209;
  unint64_t v210;
  BOOL v211;
  unint64_t v212;
  BOOL v213;
  unint64_t v214;
  BOOL v215;
  unint64_t v216;
  BOOL v217;
  unint64_t v218;
  BOOL v219;
  unint64_t v220;
  BOOL v221;
  unint64_t v222;
  BOOL v223;
  unint64_t v224;
  BOOL v225;
  unint64_t v226;
  BOOL v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  BOOL v231;
  unint64_t v232;
  BOOL v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  float v241;
  uint64_t v242;
  char v243;
  float v244;
  float v245;
  uint64_t v246;
  char v247;
  float v248;
  float v249;
  uint64_t v250;
  char v251;
  float v252;
  float v253;
  uint64_t v254;
  char v255;
  float v256;
  float v257;
  uint64_t v258;
  char v259;
  float v260;
  float v261;
  uint64_t v262;
  char v263;
  float v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  unint64_t v268;
  float *v269;
  float v270;
  float v271;
  float v272;
  float v273;
  uint64_t v274;
  float *v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  uint64_t v282;
  float *v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  uint64_t v290;
  float *v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  uint64_t v298;
  float *v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  uint64_t v306;
  float *v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  uint64_t v314;
  float *v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  float v388;
  float v389;
  float v390;
  unint64_t v391;
  unint64_t v392;
  float v393;
  float v394;
  float v395;
  float v396;
  uint64_t v397;
  uint64_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x4_t v410;
  uint64_t v411;
  float v412[6];
  float v413;
  float v414;
  float v415;
  float v416;
  float v417;
  float v418;
  float v419;
  float v420;
  float v421;
  float v422;
  float v423;
  float v424;

  if (a4)
    v16 = a3;
  else
    v16 = 0;
  v17 = *(int **)(a2 + 8);
  v19 = (char *)*((_QWORD *)v17 + 1);
  v18 = (char *)*((_QWORD *)v17 + 2);
  v20 = v18 - v19;
  if (v18 == v19)
    goto LABEL_478;
  v401 = *(_QWORD *)(a1 + 656);
  v22 = *(_QWORD *)(a1 + 664) - v401;
  if (!v22)
    goto LABEL_48;
  if ((unint64_t)(v22 / 24) <= 1)
    v23 = 1;
  else
    v23 = v22 / 24;
  v24 = *(char **)(a1 + 584);
  v25 = *(char **)(a1 + 576);
  v26 = v24 - v25;
  if (v24 == v25)
    goto LABEL_478;
  v27 = *(_QWORD *)(a1 + 8);
  if (!v27)
  {
LABEL_48:
    v96 = *(_QWORD *)(a1 + 776);
    v97 = *(_QWORD *)(a1 + 784) - v96;
    if (v97)
    {
      v98 = 0;
      v99 = v97 / 520;
      v100 = 0xAAAAAAAAAAAAAAABLL * (v22 >> 3);
      if (v99 <= 1)
        v101 = 1;
      else
        v101 = v99;
      do
      {
        bzero((void *)(v96 + 520 * v98), 0x208uLL);
        if (v98 == v100)
          goto LABEL_478;
        v102 = 0;
        v103 = *(_QWORD *)(v401 + 24 * v98);
        v104 = 0xFC0FC0FC0FC0FC1 * ((*(_QWORD *)(v401 + 24 * v98 + 8) - v103) >> 2);
        v105 = v103 - 260;
        do
        {
          v106 = *(_QWORD *)(a1 + 8);
          v107 = v106 - 1;
          if (v104 <= v106 - 1)
            goto LABEL_478;
          v108 = *(float *)(v103 + 260 * v107 + 4 * v102) * 0.9;
          v109 = (float *)(v105 + 260 * v106);
          do
          {
            if (*v109 < v108)
              break;
            *(_QWORD *)(v96 + 520 * v98 + 8 * v102) = v107--;
            v109 -= 65;
          }
          while (v107 != -1);
          ++v102;
          v105 += 4;
        }
        while (v102 != 65);
      }
      while (++v98 != v101);
    }
    v110 = a6;
    if (!a7)
      v110 = 0;
    v411 = v110;
    if (a11)
      v111 = a10;
    else
      v111 = 0;
    v112 = a16[1];
    if (!v112)
    {
LABEL_454:
      v369 = *(_QWORD *)(a1 + 616);
      v370 = *(_QWORD *)(a1 + 608);
      v371 = v369 - v370;
      if (v369 != v370)
      {
        v372 = 0;
        v373 = 0;
        v374 = 0;
        v377 = v371 / 260;
        v378 = *(_QWORD *)(a1 + 728);
        v379 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 736) - v378) >> 3);
        v380 = a1 + 552;
        if (v377 <= 1)
          v377 = 1;
LABEL_459:
        if (v374 != v379)
        {
          v381 = *(_QWORD *)(a1 + 776);
          if (0xFC0FC0FC0FC0FC1 * ((*(_QWORD *)(a1 + 784) - v381) >> 3) > v374)
          {
            v382 = 0;
            v383 = (uint64_t *)(v378 + 24 * v374);
            v384 = v383[1];
            v385 = *v383;
            v386 = 0xAAAAAAAAAAAAAAABLL * ((v384 - v385) >> 3);
            v387 = v381 + v372;
            while (1)
            {
              v391 = *(_QWORD *)(v387 + 8 * v382);
              if (v386 <= v391)
                break;
              v392 = *(_QWORD *)(a1 + 32 + 8 * v382);
              if (v392 >= 6)
                break;
              v393 = *(float *)(v385 + 24 * v391 + 4 * v392);
              v394 = v393 * *(float *)(a12 + 4 * v382);
              v395 = *(float *)(v380 + 4 * v392);
              if (v394 < v395)
                v395 = v393 * *(float *)(a12 + 4 * v382);
              if (v394 > *(float *)a1)
                v396 = v395;
              else
                v396 = *(float *)a1;
              *(float *)(v370 + 4 * v382) = v396;
              if (*(_BYTE *)(a1 + 600))
              {
                v397 = *(_QWORD *)(a1 + 632);
                if (0xFC0FC0FC0FC0FC1 * ((*(_QWORD *)(a1 + 640) - v397) >> 2) <= v374)
                  goto LABEL_478;
                v388 = v393 * *(float *)(a14 + 4 * v382);
                v389 = *(float *)(v380 + 4 * v392);
                if (v388 < v389)
                  v389 = v388;
                if (v388 > *(float *)a1)
                  v390 = v389;
                else
                  v390 = *(float *)a1;
                *(float *)(v397 + v373 + 4 * v382) = v390;
              }
              if (++v382 == 64)
              {
                ++v374;
                v373 += 260;
                a14 += 260;
                v370 += 260;
                a12 += 260;
                v372 += 520;
                if (v374 == v377)
                  return;
                goto LABEL_459;
              }
            }
          }
        }
        goto LABEL_478;
      }
      return;
    }
    v113 = 0;
    while (1)
    {
      if (((*(_QWORD *)(*a16 + ((v113 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v113) & 1) == 0)
        goto LABEL_70;
      webrtc::SignalDependentErleEstimator::UpdateCorrectionFactors(rtc::ArrayView<float const,65l>,rtc::ArrayView<std::array<float,65ul> const,-4711l>,rtc::ArrayView<std::array<float,65ul> const,-4711l>,std::vector<BOOL> const&)::$_0::operator()(a5, 65, &v419);
      webrtc::SignalDependentErleEstimator::UpdateCorrectionFactors(rtc::ArrayView<float const,65l>,rtc::ArrayView<std::array<float,65ul> const,-4711l>,rtc::ArrayView<std::array<float,65ul> const,-4711l>,std::vector<BOOL> const&)::$_0::operator()((float *)(v111 + 260 * v113), 65, &v413);
      webrtc::SignalDependentErleEstimator::UpdateCorrectionFactors(rtc::ArrayView<float const,65l>,rtc::ArrayView<std::array<float,65ul> const,-4711l>,rtc::ArrayView<std::array<float,65ul> const,-4711l>,std::vector<BOOL> const&)::$_0::operator()((float *)(v411 + 260 * v113), 65, v412);
      v114 = *(_QWORD *)(a1 + 776);
      if (0xFC0FC0FC0FC0FC1 * ((*(_QWORD *)(a1 + 784) - v114) >> 3) <= v113)
        goto LABEL_478;
      v115 = (_QWORD *)(v114 + 520 * v113);
      v117 = v115[5];
      v116 = v115[6];
      v119 = v115[3];
      v118 = v115[4];
      v121 = v115[1];
      v120 = v115[2];
      v122 = v120 >= v121;
      if (v120 >= v121)
        v120 = v115[1];
      v123 = 8;
      if (!v122)
        v123 = 16;
      if (v119 < v120)
      {
        v124 = 24;
      }
      else
      {
        v119 = v120;
        v124 = v123;
      }
      v125 = v118 >= v119;
      if (v118 >= v119)
        v118 = v119;
      v126 = 32;
      if (v125)
        v126 = v124;
      v127 = v117 >= v118;
      if (v117 >= v118)
        v117 = v118;
      v128 = 40;
      if (v127)
        v128 = v126;
      v129 = v116 >= v117;
      if (v116 >= v117)
        v116 = v117;
      v130 = 48;
      if (v129)
        v130 = v128;
      v131 = v115[8];
      v122 = v115[7] >= v116;
      v132 = 56;
      if (v122)
        v132 = v130;
      v134 = v115[13];
      v133 = v115[14];
      v136 = v115[11];
      v135 = v115[12];
      v138 = v115[9];
      v137 = v115[10];
      v139 = v138 >= v131;
      if (v138 < v131)
        v131 = v115[9];
      v140 = 64;
      if (!v139)
        v140 = 72;
      v141 = v137 >= v131;
      if (v137 < v131)
        v131 = v115[10];
      v142 = 80;
      if (v141)
        v142 = v140;
      v143 = v136 >= v131;
      if (v136 < v131)
        v131 = v115[11];
      v144 = 88;
      if (v143)
        v144 = v142;
      v145 = v135 >= v131;
      if (v135 < v131)
        v131 = v115[12];
      v146 = 96;
      if (v145)
        v146 = v144;
      v147 = v134 >= v131;
      if (v134 >= v131)
        v134 = v131;
      v148 = 104;
      if (v147)
        v148 = v146;
      v149 = v133 >= v134;
      if (v133 >= v134)
        v133 = v134;
      v150 = 112;
      if (v149)
        v150 = v148;
      v151 = v115[16];
      v122 = v115[15] >= v133;
      v152 = 120;
      if (v122)
        v152 = v150;
      v154 = v115[21];
      v153 = v115[22];
      v156 = v115[17];
      v155 = v115[18];
      v157 = v156 >= v151;
      if (v156 < v151)
        v151 = v115[17];
      v158 = 128;
      if (!v157)
        v158 = 136;
      v159 = v155 >= v151;
      if (v155 < v151)
        v151 = v115[18];
      v160 = v115[20];
      if (!v159)
        v158 = 144;
      if (v115[19] < v151)
      {
        v151 = v115[19];
        v158 = 152;
      }
      v161 = v160 >= v151;
      if (v160 < v151)
        v151 = v115[20];
      v162 = 160;
      if (v161)
        v162 = v158;
      v163 = v154 >= v151;
      if (v154 >= v151)
        v154 = v151;
      v164 = 168;
      if (v163)
        v164 = v162;
      v165 = v153 >= v154;
      if (v153 >= v154)
        v153 = v154;
      v166 = 176;
      if (v165)
        v166 = v164;
      v167 = v115[24];
      v122 = v115[23] >= v153;
      v168 = 184;
      if (v122)
        v168 = v166;
      v170 = v115[27];
      v169 = v115[28];
      v172 = v115[25];
      v171 = v115[26];
      v173 = v172 >= v167;
      if (v172 < v167)
        v167 = v115[25];
      v174 = 192;
      if (!v173)
        v174 = 200;
      v175 = v171 >= v167;
      if (v171 < v167)
        v167 = v115[26];
      v176 = 208;
      if (v175)
        v176 = v174;
      if (v170 < v167)
        v176 = 216;
      else
        v170 = v167;
      v177 = v169 >= v170;
      if (v169 >= v170)
        v169 = v170;
      v178 = 224;
      if (v177)
        v178 = v176;
      if (v115[29] < v169)
      {
        v169 = v115[29];
        v178 = 232;
      }
      if (v115[30] < v169)
      {
        v169 = v115[30];
        v178 = 240;
      }
      v179 = v115[32];
      if (v115[31] >= v169)
        v180 = v178;
      else
        v180 = 248;
      v182 = v115[33];
      v181 = v115[34];
      v183 = v182 >= v179;
      if (v182 >= v179)
        v182 = v115[32];
      v184 = 256;
      if (!v183)
        v184 = 264;
      v185 = v181 >= v182;
      if (v181 >= v182)
        v181 = v182;
      v186 = v115[36];
      if (!v185)
        v184 = 272;
      if (v115[35] < v181)
      {
        v181 = v115[35];
        v184 = 280;
      }
      v187 = v186 >= v181;
      if (v186 < v181)
        v181 = v115[36];
      v188 = v115[38];
      if (!v187)
        v184 = 288;
      if (v115[37] < v181)
      {
        v181 = v115[37];
        v184 = 296;
      }
      v189 = v188 >= v181;
      if (v188 < v181)
        v181 = v115[38];
      v190 = v115[40];
      if (!v189)
        v184 = 304;
      if (v115[39] < v181)
      {
        v181 = v115[39];
        v184 = 312;
      }
      v191 = v190 >= v181;
      if (v190 < v181)
        v181 = v115[40];
      v192 = v115[42];
      if (!v191)
        v184 = 320;
      if (v115[41] < v181)
      {
        v181 = v115[41];
        v184 = 328;
      }
      v193 = v192 >= v181;
      if (v192 < v181)
        v181 = v115[42];
      v194 = v115[44];
      if (!v193)
        v184 = 336;
      if (v115[43] < v181)
      {
        v181 = v115[43];
        v184 = 344;
      }
      v195 = v194 >= v181;
      if (v194 < v181)
        v181 = v115[44];
      v196 = v115[46];
      if (!v195)
        v184 = 352;
      if (v115[45] < v181)
      {
        v181 = v115[45];
        v184 = 360;
      }
      v197 = v196 >= v181;
      if (v196 < v181)
        v181 = v115[46];
      v198 = 368;
      if (v197)
        v198 = v184;
      v199 = v115[48];
      if (v115[47] >= v181)
        v200 = v198;
      else
        v200 = 376;
      v202 = v115[49];
      v201 = v115[50];
      v203 = v202 >= v199;
      if (v202 >= v199)
        v202 = v115[48];
      v204 = 384;
      if (!v203)
        v204 = 392;
      v205 = v201 >= v202;
      if (v201 >= v202)
        v201 = v202;
      v206 = v115[51];
      if (!v205)
        v204 = 400;
      v207 = v206 >= v201;
      if (v206 < v201)
        v201 = v115[51];
      v208 = v115[52];
      if (!v207)
        v204 = 408;
      v209 = v208 >= v201;
      if (v208 < v201)
        v201 = v115[52];
      v210 = v115[53];
      if (!v209)
        v204 = 416;
      v211 = v210 >= v201;
      if (v210 < v201)
        v201 = v115[53];
      v212 = v115[54];
      if (!v211)
        v204 = 424;
      v213 = v212 >= v201;
      if (v212 < v201)
        v201 = v115[54];
      v214 = v115[55];
      if (!v213)
        v204 = 432;
      v215 = v214 >= v201;
      if (v214 < v201)
        v201 = v115[55];
      v216 = v115[56];
      if (!v215)
        v204 = 440;
      v217 = v216 >= v201;
      if (v216 < v201)
        v201 = v115[56];
      v218 = v115[57];
      if (!v217)
        v204 = 448;
      v219 = v218 >= v201;
      if (v218 < v201)
        v201 = v115[57];
      v220 = v115[58];
      if (!v219)
        v204 = 456;
      v221 = v220 >= v201;
      if (v220 < v201)
        v201 = v115[58];
      v222 = v115[59];
      if (!v221)
        v204 = 464;
      v223 = v222 >= v201;
      if (v222 < v201)
        v201 = v115[59];
      v224 = v115[60];
      if (!v223)
        v204 = 472;
      v225 = v224 >= v201;
      if (v224 < v201)
        v201 = v115[60];
      v226 = v115[61];
      if (!v225)
        v204 = 480;
      v227 = v226 >= v201;
      if (v226 < v201)
        v201 = v115[61];
      v228 = v115[62];
      v229 = *(_QWORD *)((char *)v115 + v132);
      v230 = 488;
      if (v227)
        v230 = v204;
      v231 = v228 >= v201;
      if (v228 < v201)
        v201 = v115[62];
      v232 = v115[63];
      if (!v231)
        v230 = 496;
      v233 = v232 >= v201;
      if (v232 >= v201)
        v232 = v201;
      v234 = *(_QWORD *)((char *)v115 + v152);
      v235 = *(_QWORD *)((char *)v115 + v168);
      if (v233)
        v236 = v230;
      else
        v236 = 504;
      v237 = *(_QWORD *)((char *)v115 + v180);
      v238 = *(_QWORD *)((char *)v115 + v200);
      v239 = 512;
      if (v115[64] >= v232)
        v239 = v236;
      v240 = *(_QWORD *)((char *)v115 + v239);
      v241 = 0.0;
      if (v419 <= 44015000.0 || v413 <= 0.0)
      {
        v243 = 1;
        v245 = 0.0;
        v244 = 0.0;
        if (v420 <= 44015000.0)
          goto LABEL_304;
      }
      else
      {
        v242 = *(_QWORD *)(a1 + 752);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 760) - v242) >> 3) <= v113)
          goto LABEL_478;
        v243 = 0;
        v244 = v412[0] / v413;
        ++*(_DWORD *)(v242 + 24 * v113);
        v245 = 1.0;
        if (v420 <= 44015000.0)
        {
LABEL_304:
          v247 = 1;
          v248 = 0.0;
          v249 = 0.0;
          if (v421 <= 44015000.0)
            goto LABEL_309;
          goto LABEL_305;
        }
      }
      if (v414 <= 0.0)
        goto LABEL_304;
      v246 = *(_QWORD *)(a1 + 752);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 760) - v246) >> 3) <= v113)
        goto LABEL_478;
      v247 = 0;
      v248 = v412[1] / v414;
      ++*(_DWORD *)(v246 + 24 * v113 + 4);
      v241 = 1.0;
      v249 = 0.0;
      if (v421 <= 44015000.0)
      {
LABEL_309:
        v251 = 1;
        v253 = 0.0;
        v252 = 0.0;
        if (v422 <= 44015000.0)
          goto LABEL_314;
        goto LABEL_310;
      }
LABEL_305:
      if (v415 <= 0.0)
        goto LABEL_309;
      v250 = *(_QWORD *)(a1 + 752);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 760) - v250) >> 3) <= v113)
        goto LABEL_478;
      v251 = 0;
      v252 = v412[2] / v415;
      ++*(_DWORD *)(v250 + 24 * v113 + 8);
      v253 = 1.0;
      if (v422 <= 44015000.0)
      {
LABEL_314:
        v255 = 1;
        v256 = 0.0;
        v257 = 0.0;
        if (v423 <= 44015000.0)
          goto LABEL_319;
        goto LABEL_315;
      }
LABEL_310:
      if (v416 <= 0.0)
        goto LABEL_314;
      v254 = *(_QWORD *)(a1 + 752);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 760) - v254) >> 3) <= v113)
        goto LABEL_478;
      v255 = 0;
      v256 = v412[3] / v416;
      ++*(_DWORD *)(v254 + 24 * v113 + 12);
      v249 = 1.0;
      v257 = 0.0;
      if (v423 <= 44015000.0)
      {
LABEL_319:
        v259 = 1;
        v261 = 0.0;
        v260 = 0.0;
        if (v424 <= 44015000.0)
          goto LABEL_323;
        goto LABEL_320;
      }
LABEL_315:
      if (v417 <= 0.0)
        goto LABEL_319;
      v258 = *(_QWORD *)(a1 + 752);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 760) - v258) >> 3) <= v113)
        goto LABEL_478;
      v259 = 0;
      v260 = v412[4] / v417;
      ++*(_DWORD *)(v258 + 24 * v113 + 16);
      v261 = 1.0;
      if (v424 <= 44015000.0)
      {
LABEL_323:
        v263 = 1;
        v264 = 0.0;
        goto LABEL_324;
      }
LABEL_320:
      if (v418 <= 0.0)
        goto LABEL_323;
      v262 = *(_QWORD *)(a1 + 752);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 760) - v262) >> 3) <= v113)
        goto LABEL_478;
      v263 = 0;
      v264 = v412[5] / v418;
      ++*(_DWORD *)(v262 + 24 * v113 + 20);
      v257 = 1.0;
LABEL_324:
      v265 = *(_QWORD *)(a1 + 680);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 688) - v265) >> 3) <= v113)
        goto LABEL_478;
      v267 = (uint64_t *)(v265 + 24 * v113);
      v266 = *v267;
      v268 = 0xAAAAAAAAAAAAAAABLL * ((v267[1] - *v267) >> 3);
      if (v268 <= v229)
        goto LABEL_478;
      v269 = (float *)(v266 + 24 * v229);
      v270 = 0.1;
      if (v244 > *v269)
        v270 = 0.05;
      v271 = *v269 + (float)((float)(v245 * v270) * (float)(v244 - *v269));
      *v269 = v271;
      v272 = *(float *)(a1 + 552);
      if (v271 < v272)
        v272 = v271;
      v273 = v271 > *(float *)a1 ? v272 : *(float *)a1;
      *v269 = v273;
      if (v268 <= v234)
        goto LABEL_478;
      v274 = v266 + 24 * v234;
      v276 = *(float *)(v274 + 4);
      v275 = (float *)(v274 + 4);
      v277 = v276;
      v278 = 0.1;
      if (v248 > v276)
        v278 = 0.05;
      v279 = v277 + (float)((float)(v241 * v278) * (float)(v248 - v277));
      *v275 = v279;
      v280 = *(float *)(a1 + 556);
      if (v279 < v280)
        v280 = v279;
      v281 = v279 > *(float *)a1 ? v280 : *(float *)a1;
      *v275 = v281;
      if (v268 <= v235)
        goto LABEL_478;
      v282 = v266 + 24 * v235;
      v284 = *(float *)(v282 + 8);
      v283 = (float *)(v282 + 8);
      v285 = v284;
      v286 = 0.1;
      if (v252 > v284)
        v286 = 0.05;
      v287 = v285 + (float)((float)(v253 * v286) * (float)(v252 - v285));
      *v283 = v287;
      v288 = *(float *)(a1 + 560);
      if (v287 < v288)
        v288 = v287;
      v289 = v287 > *(float *)a1 ? v288 : *(float *)a1;
      *v283 = v289;
      if (v268 <= v237)
        goto LABEL_478;
      v290 = v266 + 24 * v237;
      v292 = *(float *)(v290 + 12);
      v291 = (float *)(v290 + 12);
      v293 = v292;
      v294 = 0.1;
      if (v256 > v292)
        v294 = 0.05;
      v295 = v293 + (float)((float)(v249 * v294) * (float)(v256 - v293));
      *v291 = v295;
      v296 = *(float *)(a1 + 564);
      if (v295 < v296)
        v296 = v295;
      v297 = v295 > *(float *)a1 ? v296 : *(float *)a1;
      *v291 = v297;
      if (v268 <= v238)
        goto LABEL_478;
      v298 = v266 + 24 * v238;
      v300 = *(float *)(v298 + 16);
      v299 = (float *)(v298 + 16);
      v301 = v300;
      v302 = 0.1;
      if (v260 > v300)
        v302 = 0.05;
      v303 = v301 + (float)((float)(v261 * v302) * (float)(v260 - v301));
      *v299 = v303;
      v304 = *(float *)(a1 + 568);
      if (v303 < v304)
        v304 = v303;
      v305 = v303 > *(float *)a1 ? v304 : *(float *)a1;
      *v299 = v305;
      if (v268 <= v240)
        goto LABEL_478;
      v306 = v266 + 24 * v240;
      v308 = *(float *)(v306 + 20);
      v307 = (float *)(v306 + 20);
      v309 = v308;
      v310 = 0.1;
      if (v264 > v308)
        v310 = 0.05;
      v311 = v309 + (float)((float)(v257 * v310) * (float)(v264 - v309));
      *v307 = v311;
      v312 = *(float *)(a1 + 572);
      if (v311 < v312)
        v312 = v311;
      v313 = v311 > *(float *)a1 ? v312 : *(float *)a1;
      *v307 = v313;
      v314 = *(_QWORD *)(a1 + 704);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 712) - v314) >> 3) <= v113)
        goto LABEL_478;
      v315 = (float *)(v314 + 24 * v113);
      v316 = v315[1];
      if (v244 <= *v315)
        v317 = 0.1;
      else
        v317 = 0.05;
      v318 = *v315 + (float)((float)(v245 * v317) * (float)(v244 - *v315));
      *v315 = v318;
      v319 = *(float *)(a1 + 552);
      if (v318 < v319)
        v319 = v318;
      if (v318 > *(float *)a1)
        v320 = v319;
      else
        v320 = *(float *)a1;
      if (v248 <= v316)
        v321 = 0.1;
      else
        v321 = 0.05;
      v322 = v316 + (float)((float)(v241 * v321) * (float)(v248 - v316));
      *v315 = v320;
      v315[1] = v322;
      v323 = *(float *)(a1 + 556);
      if (v322 < v323)
        v323 = v322;
      if (v322 > *(float *)a1)
        v324 = v323;
      else
        v324 = *(float *)a1;
      v325 = v315[2];
      v326 = v315[3];
      if (v252 <= v325)
        v327 = 0.1;
      else
        v327 = 0.05;
      v328 = v325 + (float)((float)(v253 * v327) * (float)(v252 - v325));
      v315[1] = v324;
      v315[2] = v328;
      v329 = *(float *)a1;
      v330 = *(float *)(a1 + 560);
      if (v328 < v330)
        v330 = v328;
      if (v328 > v329)
        v329 = v330;
      if (v256 <= v326)
        v331 = 0.1;
      else
        v331 = 0.05;
      v332 = v326 + (float)((float)(v249 * v331) * (float)(v256 - v326));
      v315[2] = v329;
      v315[3] = v332;
      v333 = *(float *)a1;
      v334 = *(float *)(a1 + 564);
      if (v332 < v334)
        v334 = v332;
      if (v332 > v333)
        v333 = v334;
      v335 = v315[4];
      v336 = v315[5];
      if (v260 <= v335)
        v337 = 0.1;
      else
        v337 = 0.05;
      v338 = v335 + (float)((float)(v261 * v337) * (float)(v260 - v335));
      v315[3] = v333;
      v315[4] = v338;
      v339 = *(float *)a1;
      v340 = *(float *)(a1 + 568);
      if (v338 < v340)
        v340 = v338;
      if (v338 > v339)
        v339 = v340;
      if (v264 <= v336)
        v341 = 0.1;
      else
        v341 = 0.05;
      v342 = v336 + (float)((float)(v257 * v341) * (float)(v264 - v336));
      v315[4] = v339;
      v315[5] = v342;
      v343 = *(float *)a1;
      v344 = *(float *)(a1 + 572);
      if (v342 < v344)
        v344 = v342;
      if (v342 > v343)
        v343 = v344;
      v315[5] = v343;
      if ((v243 & 1) != 0)
        goto LABEL_421;
      v345 = *(_QWORD *)(a1 + 752);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 760) - v345) >> 3) <= v113)
        goto LABEL_478;
      if (*(int *)(v345 + 24 * v113) < 51)
      {
LABEL_421:
        if ((v247 & 1) != 0)
          goto LABEL_430;
LABEL_422:
        v346 = *(_QWORD *)(a1 + 752);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 760) - v346) >> 3) <= v113)
          goto LABEL_478;
        if (*(int *)(v346 + 24 * v113 + 4) >= 51)
        {
          v347 = *(_QWORD *)(a1 + 728);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 736) - v347) >> 3) <= v113)
            goto LABEL_478;
          v349 = (uint64_t *)(v347 + 24 * v113);
          v348 = *v349;
          if (0xAAAAAAAAAAAAAAABLL * ((v349[1] - *v349) >> 3) <= v234)
            goto LABEL_478;
          *(float *)(v348 + 24 * v234 + 4) = *(float *)(v348 + 24 * v234 + 4)
                                           + (float)((float)((float)(*v275 / v315[1]) - *(float *)(v348 + 24 * v234 + 4))
                                                   * 0.1);
        }
        goto LABEL_430;
      }
      v350 = *(_QWORD *)(a1 + 728);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 736) - v350) >> 3) <= v113)
        goto LABEL_478;
      v352 = (uint64_t *)(v350 + 24 * v113);
      v351 = *v352;
      if (0xAAAAAAAAAAAAAAABLL * ((v352[1] - *v352) >> 3) <= v229)
        goto LABEL_478;
      *(float *)(v351 + 24 * v229) = *(float *)(v351 + 24 * v229)
                                   + (float)((float)((float)(*v269 / v320) - *(float *)(v351 + 24 * v229)) * 0.1);
      if ((v247 & 1) == 0)
        goto LABEL_422;
LABEL_430:
      if ((v251 & 1) == 0)
      {
        v353 = *(_QWORD *)(a1 + 752);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 760) - v353) >> 3) <= v113)
          goto LABEL_478;
        if (*(int *)(v353 + 24 * v113 + 8) >= 51)
        {
          v358 = *(_QWORD *)(a1 + 728);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 736) - v358) >> 3) <= v113)
            goto LABEL_478;
          v360 = (uint64_t *)(v358 + 24 * v113);
          v359 = *v360;
          if (0xAAAAAAAAAAAAAAABLL * ((v360[1] - *v360) >> 3) <= v235)
            goto LABEL_478;
          *(float *)(v359 + 24 * v235 + 8) = *(float *)(v359 + 24 * v235 + 8)
                                           + (float)((float)((float)(*v283 / v315[2]) - *(float *)(v359 + 24 * v235 + 8))
                                                   * 0.1);
          if ((v255 & 1) != 0)
            goto LABEL_442;
LABEL_434:
          v354 = *(_QWORD *)(a1 + 752);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 760) - v354) >> 3) <= v113)
            goto LABEL_478;
          if (*(int *)(v354 + 24 * v113 + 12) >= 51)
          {
            v355 = *(_QWORD *)(a1 + 728);
            if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 736) - v355) >> 3) <= v113)
              goto LABEL_478;
            v357 = (uint64_t *)(v355 + 24 * v113);
            v356 = *v357;
            if (0xAAAAAAAAAAAAAAABLL * ((v357[1] - *v357) >> 3) <= v237)
              goto LABEL_478;
            *(float *)(v356 + 24 * v237 + 12) = *(float *)(v356 + 24 * v237 + 12)
                                              + (float)((float)((float)(*v291 / v315[3])
                                                              - *(float *)(v356 + 24 * v237 + 12))
                                                      * 0.1);
          }
          goto LABEL_442;
        }
      }
      if ((v255 & 1) == 0)
        goto LABEL_434;
LABEL_442:
      if ((v259 & 1) == 0)
      {
        v361 = *(_QWORD *)(a1 + 752);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 760) - v361) >> 3) <= v113)
          goto LABEL_478;
        if (*(int *)(v361 + 24 * v113 + 16) >= 51)
        {
          v362 = *(_QWORD *)(a1 + 728);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 736) - v362) >> 3) <= v113)
            goto LABEL_478;
          v364 = (uint64_t *)(v362 + 24 * v113);
          v363 = *v364;
          if (0xAAAAAAAAAAAAAAABLL * ((v364[1] - *v364) >> 3) <= v238)
            goto LABEL_478;
          *(float *)(v363 + 24 * v238 + 16) = *(float *)(v363 + 24 * v238 + 16)
                                            + (float)((float)((float)(*v299 / v315[4])
                                                            - *(float *)(v363 + 24 * v238 + 16))
                                                    * 0.1);
        }
      }
      if ((v263 & 1) == 0)
      {
        v365 = *(_QWORD *)(a1 + 752);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 760) - v365) >> 3) <= v113)
          goto LABEL_478;
        if (*(int *)(v365 + 24 * v113 + 20) >= 51)
        {
          v366 = *(_QWORD *)(a1 + 728);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 736) - v366) >> 3) <= v113)
            goto LABEL_478;
          v368 = (uint64_t *)(v366 + 24 * v113);
          v367 = *v368;
          if (0xAAAAAAAAAAAAAAABLL * ((v368[1] - *v368) >> 3) <= v240)
            goto LABEL_478;
          *(float *)(v367 + 24 * v240 + 20) = *(float *)(v367 + 24 * v240 + 20)
                                            + (float)((float)((float)(*v307 / v315[5])
                                                            - *(float *)(v367 + 24 * v240 + 20))
                                                    * 0.1);
        }
      }
      v112 = a16[1];
LABEL_70:
      if (++v113 >= v112)
        goto LABEL_454;
    }
  }
  v28 = 0;
  *(float *)&a8 = 1.0
                / (float)(unint64_t)(0xFC0FC0FC0FC0FC1 * ((uint64_t)(*((_QWORD *)v19 + 1) - *(_QWORD *)v19) >> 2));
  v29 = v26 >> 3;
  v30 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
  v31 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 36) + *(_DWORD *)v25;
  v32 = *v17;
  v33 = (v31 + v32) % v32;
  v34 = v32 - 1;
  if (v29 <= 1)
    v35 = 1;
  else
    v35 = v29;
  v36 = v35 - 1;
  v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
LABEL_16:
  v38 = 0;
  v39 = (_QWORD *)(v16 + 24 * v28);
  v40 = v39 + 1;
  v41 = (uint64_t *)(v401 + 24 * v28);
  v42 = v33;
  while (1)
  {
    if (v38 == v36)
      goto LABEL_478;
    v43 = v38 + 1;
    v44 = (unint64_t)(0xFC0FC0FC0FC0FC1 * ((uint64_t)(*v40 - *v39) >> 2)) >= *(_QWORD *)&v25[8 * v38 + 8]
        ? *(_QWORD *)&v25[8 * v38 + 8]
        : 0xFC0FC0FC0FC0FC1 * ((uint64_t)(*v40 - *v39) >> 2);
    v45 = *(_QWORD *)&v25[8 * v38];
    v46 = 0uLL;
    v47 = 0.0;
    v48 = 0uLL;
    v49 = 0uLL;
    v50 = 0uLL;
    v51 = 0uLL;
    v52 = 0uLL;
    v53 = 0uLL;
    v54 = 0uLL;
    v55 = 0uLL;
    v56 = 0uLL;
    v57 = 0uLL;
    v58 = 0uLL;
    v59 = 0uLL;
    v60 = 0uLL;
    v61 = 0uLL;
    v62 = 0uLL;
    v63 = 0.0;
    v64 = 0uLL;
    if (v45 < v44)
      break;
    v409 = 0uLL;
    v410 = 0uLL;
    v407 = 0uLL;
    v408 = 0uLL;
    v405 = 0uLL;
    v406 = 0uLL;
    v403 = 0uLL;
    v404 = 0uLL;
    v65 = 0uLL;
    v402 = 0uLL;
    v66 = 0uLL;
    v67 = 0uLL;
    v68 = 0uLL;
    v69 = 0uLL;
    v70 = 0uLL;
LABEL_36:
    if (v22 / 24 <= v28)
      goto LABEL_478;
    v80 = *v41;
    v81 = 0xFC0FC0FC0FC0FC1 * ((v41[1] - *v41) >> 2);
    if (v81 <= v38)
      goto LABEL_478;
    v82 = (float32x4_t *)(v80 + 260 * v38);
    *v82 = vmulq_f32(v62, v70);
    v82[1] = vmulq_f32(v61, v69);
    v82[2] = vmulq_f32(v60, v68);
    v82[3] = vmulq_f32(v59, v64);
    v82[4] = vmulq_f32(v58, v67);
    v82[5] = vmulq_f32(v57, v66);
    v82[6] = vmulq_f32(v56, v402);
    v82[7] = vmulq_f32(v55, v65);
    v82[8] = vmulq_f32(v54, v403);
    v82[9] = vmulq_f32(v53, v404);
    v82[10] = vmulq_f32(v52, v405);
    v82[11] = vmulq_f32(v51, v406);
    v82[12] = vmulq_f32(v50, v407);
    v82[13] = vmulq_f32(v49, v408);
    v82[14] = vmulq_f32(v48, v409);
    v82[15] = vmulq_f32(v46, v410);
    v82[16].f32[0] = v47 * v63;
    ++v38;
    if (v43 == v27)
    {
      if (v27 >= 2)
      {
        if (v81 <= 1)
          v83 = 1;
        else
          v83 = v81;
        v84 = (float32x4_t *)(v80 + 260);
        v85 = v83 - 1;
        v86 = v27 - 1;
        while (v81 && v85)
        {
          v87 = vaddq_f32(*(float32x4_t *)((char *)v84 - 244), v84[1]);
          *v84 = vaddq_f32(*(float32x4_t *)((char *)v84 - 260), *v84);
          v84[1] = v87;
          v88 = vaddq_f32(*(float32x4_t *)((char *)v84 - 212), v84[3]);
          v84[2] = vaddq_f32(*(float32x4_t *)((char *)v84 - 228), v84[2]);
          v84[3] = v88;
          v89 = vaddq_f32(*(float32x4_t *)((char *)v84 - 180), v84[5]);
          v84[4] = vaddq_f32(*(float32x4_t *)((char *)v84 - 196), v84[4]);
          v84[5] = v89;
          v90 = vaddq_f32(*(float32x4_t *)((char *)v84 - 148), v84[7]);
          v84[6] = vaddq_f32(*(float32x4_t *)((char *)v84 - 164), v84[6]);
          v84[7] = v90;
          v91 = vaddq_f32(*(float32x4_t *)((char *)v84 - 116), v84[9]);
          v84[8] = vaddq_f32(*(float32x4_t *)((char *)v84 - 132), v84[8]);
          v84[9] = v91;
          v92 = vaddq_f32(*(float32x4_t *)((char *)v84 - 84), v84[11]);
          v84[10] = vaddq_f32(*(float32x4_t *)((char *)v84 - 100), v84[10]);
          v84[11] = v92;
          v93 = vaddq_f32(*(float32x4_t *)((char *)v84 - 52), v84[13]);
          v84[12] = vaddq_f32(*(float32x4_t *)((char *)v84 - 68), v84[12]);
          v84[13] = v93;
          v94 = vaddq_f32(*(float32x4_t *)((char *)v84 - 20), v84[15]);
          v95 = v84[-1].f32[3] + v84[16].f32[0];
          v84[14] = vaddq_f32(*(float32x4_t *)((char *)v84 - 36), v84[14]);
          v84[15] = v94;
          v84[16].f32[0] = v95;
          v84 = (float32x4_t *)((char *)v84 + 260);
          --v85;
          --v81;
          if (!--v86)
            goto LABEL_15;
        }
        goto LABEL_478;
      }
LABEL_15:
      if (++v28 == v23)
        goto LABEL_48;
      goto LABEL_16;
    }
  }
  v409 = 0uLL;
  v410 = 0uLL;
  v407 = 0uLL;
  v408 = 0uLL;
  v405 = 0uLL;
  v406 = 0uLL;
  v403 = 0uLL;
  v404 = 0uLL;
  v65 = 0uLL;
  v402 = 0uLL;
  v66 = 0uLL;
  v67 = 0uLL;
  v68 = 0uLL;
  v69 = 0uLL;
  v70 = 0uLL;
  while (v30 > v42)
  {
    v76 = *(float32x4_t **)&v19[24 * v42];
    v77 = *(_QWORD *)&v19[24 * v42 + 8] - (_QWORD)v76;
    if (v77)
    {
      v78 = v77 / 260;
      if (v78 <= 1)
        v78 = 1;
      v79 = v76 + 8;
      v71 = v408;
      v72 = v406;
      v73 = v404;
      v74 = v402;
      do
      {
        v62 = vmlaq_f32(v62, v37, v79[-8]);
        v61 = vmlaq_f32(v61, v37, v79[-7]);
        v60 = vmlaq_f32(v60, v37, v79[-6]);
        v59 = vmlaq_f32(v59, v37, v79[-5]);
        v58 = vmlaq_f32(v58, v37, v79[-4]);
        v57 = vmlaq_f32(v57, v37, v79[-3]);
        v56 = vmlaq_f32(v56, v37, v79[-2]);
        v55 = vmlaq_f32(v55, v37, v79[-1]);
        v54 = vmlaq_f32(v54, v37, *v79);
        v53 = vmlaq_f32(v53, v37, v79[1]);
        v52 = vmlaq_f32(v52, v37, v79[2]);
        v51 = vmlaq_f32(v51, v37, v79[3]);
        v50 = vmlaq_f32(v50, v37, v79[4]);
        v49 = vmlaq_f32(v49, v37, v79[5]);
        v48 = vmlaq_f32(v48, v37, v79[6]);
        v46 = vmlaq_f32(v46, v37, v79[7]);
        v47 = v47 + (float)(v79[8].f32[0] * *(float *)&a8);
        v79 = (float32x4_t *)((char *)v79 + 260);
        --v78;
      }
      while (v78);
    }
    else
    {
      v71 = v408;
      v72 = v406;
      v73 = v404;
      v74 = v402;
    }
    v75 = (float32x4_t *)(*v39 + 260 * v45);
    v70 = vaddq_f32(v70, *v75);
    v69 = vaddq_f32(v69, v75[1]);
    v68 = vaddq_f32(v68, v75[2]);
    v64 = vaddq_f32(v64, v75[3]);
    v67 = vaddq_f32(v67, v75[4]);
    v66 = vaddq_f32(v66, v75[5]);
    v402 = vaddq_f32(v74, v75[6]);
    v65 = vaddq_f32(v65, v75[7]);
    v403 = vaddq_f32(v403, v75[8]);
    v404 = vaddq_f32(v73, v75[9]);
    v405 = vaddq_f32(v405, v75[10]);
    v406 = vaddq_f32(v72, v75[11]);
    v407 = vaddq_f32(v407, v75[12]);
    v408 = vaddq_f32(v71, v75[13]);
    v409 = vaddq_f32(v409, v75[14]);
    v410 = vaddq_f32(v410, v75[15]);
    v63 = v63 + v75[16].f32[0];
    if (v34 <= (int)v42)
      v42 = 0;
    else
      v42 = (int)v42 + 1;
    if (++v45 == v44)
      goto LABEL_36;
  }
LABEL_478:
  __break(1u);
}

float webrtc::SignalDependentErleEstimator::UpdateCorrectionFactors(rtc::ArrayView<float const,65l>,rtc::ArrayView<std::array<float,65ul> const,-4711l>,rtc::ArrayView<std::array<float,65ul> const,-4711l>,std::vector<BOOL> const&)::$_0::operator()(float *a1, uint64_t a2, float *a3)
{
  float result;

  *a3 = (float)((float)((float)((float)((float)((float)(a1[1] + 0.0) + a1[2]) + a1[3]) + a1[4]) + a1[5]) + a1[6])
      + a1[7];
  a3[1] = (float)((float)((float)((float)((float)((float)((float)(a1[8] + 0.0) + a1[9]) + a1[10]) + a1[11]) + a1[12])
                        + a1[13])
                + a1[14])
        + a1[15];
  a3[2] = (float)((float)((float)((float)((float)((float)((float)(a1[16] + 0.0) + a1[17]) + a1[18]) + a1[19]) + a1[20])
                        + a1[21])
                + a1[22])
        + a1[23];
  a3[3] = (float)((float)((float)((float)((float)((float)((float)(a1[24] + 0.0) + a1[25]) + a1[26]) + a1[27]) + a1[28])
                        + a1[29])
                + a1[30])
        + a1[31];
  a3[4] = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(a1[32] + 0.0) + a1[33]) + a1[34]) + a1[35])
                                                                                                + a1[36])
                                                                                        + a1[37])
                                                                                + a1[38])
                                                                        + a1[39])
                                                                + a1[40])
                                                        + a1[41])
                                                + a1[42])
                                        + a1[43])
                                + a1[44])
                        + a1[45])
                + a1[46])
        + a1[47];
  result = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(a1[48] + 0.0) + a1[49]) + a1[50]) + a1[51]) + a1[52])
                                                                                                 + a1[53])
                                                                                         + a1[54])
                                                                                 + a1[55])
                                                                         + a1[56])
                                                                 + a1[57])
                                                         + a1[58])
                                                 + a1[59])
                                         + a1[60])
                                 + a1[61])
                         + a1[62])
                 + a1[63])
         + a1[64];
  a3[5] = result;
  return result;
}

void webrtc::SignalModelEstimator::Update(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, float *a5, float a6, float a7)
{
  uint64_t i;
  uint64_t v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  int v38;
  float v39;
  unint64_t v40;
  float v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v47;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint32x4_t v61;
  uint64_t v62;
  float v63;
  float v64;
  uint64_t v65;

  for (i = 1; i != 129; ++i)
  {
    if (a5[i] == 0.0)
    {
      v23 = *(float *)(a1 + 12044) + (float)(*(float *)(a1 + 12044) * -0.3);
      goto LABEL_8;
    }
  }
  v15 = 0;
  v16 = 0.0;
  v17.i64[0] = 0x3400000034000000;
  v17.i64[1] = 0x3400000034000000;
  v18 = (float32x4_t)vdupq_n_s32(0xC2FDE2A9);
  v19 = (float32x4_t)vdupq_n_s32(0x3F317218u);
  do
  {
    v20 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(*(uint32x4_t *)&a5[v15 + 1]), v17), v18), v19);
    v21 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(*(uint32x4_t *)&a5[v15 + 5]), v17), v18), v19);
    v16 = (float)((float)((float)((float)((float)((float)((float)(v16 + v20.f32[0]) + v20.f32[1]) + v20.f32[2])
                                        + v20.f32[3])
                                + v21.f32[0])
                        + v21.f32[1])
                + v21.f32[2])
        + v21.f32[3];
    v15 += 8;
  }
  while (v15 != 128);
  v22 = (float)(a6 - *a5) * 0.0077519;
  v23 = *(float *)(a1 + 12044)
      + (float)((float)((float)(exp2f((float)((float)(v16 * 0.0077519) * 0.43429) * 3.3073) / v22)
                      - *(float *)(a1 + 12044))
              * 0.3);
LABEL_8:
  v24 = 0;
  *(float *)(a1 + 12044) = v23;
  v25 = 0.0;
  do
  {
    v25 = (float)(v25 + *(float *)(a4 + v24)) + *(float *)(a4 + v24 + 4);
    v24 += 8;
  }
  while (v24 != 512);
  v26 = 0;
  v27 = (float)(v25 + *(float *)(a4 + 512)) * 0.0077519;
  v28 = a6 * 0.0077519;
  v29 = 0.0;
  v30 = 0.0;
  v31 = 0.0;
  do
  {
    v32 = a5[v26] - v28;
    v33 = a5[v26 + 1] - v28;
    v34 = *(float *)(a4 + v26 * 4) - v27;
    v35 = *(float *)(a4 + v26 * 4 + 4) - v27;
    v29 = (float)(v29 + (float)(v32 * v32)) + (float)(v33 * v33);
    v30 = (float)(v30 + (float)(v34 * v34)) + (float)(v35 * v35);
    v31 = (float)(v31 + (float)(v32 * v34)) + (float)(v33 * v35);
    v26 += 2;
  }
  while (v26 != 128);
  v36 = a5[128] - v28;
  v37 = *(float *)(a1 + 12040)
      + (float)((float)((float)((float)((float)((float)(v29 + (float)(v36 * v36)) * 0.0077519)
                                      - (float)((float)((float)((float)(v31
                                                                      + (float)(v36 * (float)(*(float *)(a4 + 512) - v27)))
                                                              * 0.0077519)
                                                      * (float)((float)(v31
                                                                      + (float)(v36 * (float)(*(float *)(a4 + 512) - v27)))
                                                              * 0.0077519))
                                              / (float)((float)((float)(v30
                                                                      + (float)((float)(*(float *)(a4 + 512) - v27)
                                                                              * (float)(*(float *)(a4 + 512) - v27)))
                                                              * 0.0077519)
                                                      + 0.0001)))
                              / (float)(*(float *)a1 + 0.0001))
                      - *(float *)(a1 + 12040))
              * 0.3);
  *(float *)(a1 + 12040) = v37;
  *(float *)(a1 + 4) = *(float *)(a1 + 4) + a7;
  v38 = *(_DWORD *)(a1 + 12008);
  *(_DWORD *)(a1 + 12008) = v38 - 1;
  if (v38 < 2)
  {
    webrtc::PriorSignalModelEstimator::Update((float *)(a1 + 12012), (int *)(a1 + 8));
    bzero((void *)(a1 + 8), 0x2EE0uLL);
    *(_DWORD *)(a1 + 12008) = 500;
    *(float *)a1 = (float)((float)(*(float *)(a1 + 4) / 500.0) + *(float *)a1) * 0.5;
    *(_DWORD *)(a1 + 4) = 0;
    goto LABEL_26;
  }
  v39 = *(float *)(a1 + 12036);
  if (v39 < 100.0 && v39 >= 0.0)
  {
    v40 = (unint64_t)(float)(v39 * 10.0);
    if (v40 >= 0x3E8)
      goto LABEL_45;
    ++*(_DWORD *)(a1 + 8 + 4 * v40);
  }
  if (v23 < 50.0 && v23 >= 0.0)
  {
    v41 = v23 * 20.0;
    if ((unint64_t)v41 >= 0x3E8)
      goto LABEL_45;
    ++*(_DWORD *)(a1 + 4 * (unint64_t)v41 + 4008);
  }
  if (v37 < 100.0 && v37 >= 0.0)
  {
    v42 = (unint64_t)(float)(v37 * 10.0);
    if (v42 < 0x3E8)
    {
      ++*(_DWORD *)(a1 + 4 * v42 + 8008);
      goto LABEL_26;
    }
LABEL_45:
    __break(1u);
    return;
  }
LABEL_26:
  v43 = 0;
  v44 = a1 + 12048;
  v45 = a1 + 12564;
  v47 = a1 + 12048 < a3 + 516 && v45 > a3;
  _CF = v45 <= a2 || v44 >= a2 + 516;
  if (_CF && !v47)
  {
    v49 = 0;
    v50.i64[0] = 0x4000000040000000;
    v50.i64[1] = 0x4000000040000000;
    __asm { FMOV            V1.4S, #1.0 }
    v55 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    v56 = (float32x4_t)vdupq_n_s32(0xC2FDE2A9);
    v57.i64[0] = 0x3400000034000000;
    v57.i64[1] = 0x3400000034000000;
    v58 = (float32x4_t)vdupq_n_s32(0xBF317218);
    v59.i64[0] = 0x3F0000003F000000;
    v59.i64[1] = 0x3F0000003F000000;
    v43 = 128;
    do
    {
      v60 = *(float32x4_t *)(a2 + v49);
      v61 = (uint32x4_t)vmlaq_f32(_Q1, v50, v60);
      *(float32x4_t *)(v44 + v49) = vmlaq_f32(*(float32x4_t *)(v44 + v49), v59, vsubq_f32(vaddq_f32(vmulq_f32(vaddq_f32(*(float32x4_t *)(a3 + v49), _Q1), vdivq_f32(vaddq_f32(v60, v60), vaddq_f32((float32x4_t)v61, v55))), vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(v61), v57), v56), v58)), *(float32x4_t *)(v44 + v49)));
      v49 += 16;
    }
    while (v49 != 512);
  }
  v62 = 4 * v43;
  do
  {
    v63 = *(float *)(a2 + v62);
    *(float *)(v44 + v62) = *(float *)(v44 + v62)
                          + (float)((float)((float)((float)((float)(*(float *)(a3 + v62) + 1.0)
                                                          * (float)((float)(v63 + v63)
                                                                  / (float)((float)((float)(v63 * 2.0) + 1.0) + 0.0001)))
                                                  + (float)((float)((float)((float)COERCE_UNSIGNED_INT((float)(v63 * 2.0) + 1.0)
                                                                          * 0.00000011921)
                                                                  + -126.94)
                                                          * -0.69315))
                                          - *(float *)(v44 + v62))
                                  * 0.5);
    v62 += 4;
  }
  while (v62 != 516);
  v64 = 0.0;
  v65 = -512;
  do
  {
    v64 = (float)(v64 + *(float *)(a1 + v65 + 12560)) + *(float *)(a1 + v65 + 12564);
    v65 += 8;
  }
  while (v65);
  *(float *)(a1 + 12036) = (float)(v64 + *(float *)(a1 + 12560)) * 0.0077519;
}

void webrtc::SimulatedNetwork::~SimulatedNetwork(webrtc::SimulatedNetwork *this)
{
  *(_QWORD *)this = &off_24C0C0D10;
  (*((void (**)(uint64_t, char *, char *))this + 26))(1, (char *)this + 192, (char *)this + 192);
  std::deque<webrtc::SimulatedNetwork::PacketInfo>::~deque[abi:sn180100]((void **)this + 17);
  std::deque<webrtc::SimulatedNetwork::PacketInfo>::~deque[abi:sn180100]((void **)this + 11);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_24C0C0D10;
  (*((void (**)(uint64_t, char *, char *))this + 26))(1, (char *)this + 192, (char *)this + 192);
  std::deque<webrtc::SimulatedNetwork::PacketInfo>::~deque[abi:sn180100]((void **)this + 17);
  std::deque<webrtc::SimulatedNetwork::PacketInfo>::~deque[abi:sn180100]((void **)this + 11);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::SimulatedNetwork::SetConfig(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  double v13;
  uint64_t v14;
  double v15;
  std::string *v17;

  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  v10 = *(_OWORD *)(a2 + 16);
  v9 = *(_OWORD *)(a2 + 32);
  v11 = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v10;
  *(_DWORD *)(a1 + 272) = v11;
  *(_OWORD *)(a1 + 256) = v9;
  v12 = *(_DWORD *)(a1 + 240);
  if (v12)
    *(_QWORD *)(a1 + 248) = 1000 * v12;
  v13 = *(double *)(a2 + 32) / 100.0;
  if (*(_DWORD *)(a1 + 268) == -1)
  {
    *(double *)(a1 + 280) = v13;
    goto LABEL_7;
  }
  v14 = *(unsigned int *)(a2 + 44);
  v15 = v13 / (1.0 - v13);
  if ((int)v14 > (int)vcvtpd_s64_f64(v15))
  {
    *(double *)(a1 + 280) = 1.0 - 1.0 / (double)(int)v14;
    v13 = v15 / (double)(int)v14;
LABEL_7:
    *(double *)(a1 + 288) = v13;
    return pthread_mutex_unlock(v4);
  }
  v17 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/test/network/simulated_network.cc", 85, "avg_burst_loss_length > min_avg_burst_loss_length", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*> const&)::t, v5, v6, v7, v8, v14);
  return webrtc::SimulatedNetwork::UpdateConfig(v17);
}

uint64_t webrtc::SimulatedNetwork::UpdateConfig(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  int v6;
  webrtc::SimulatedNetwork *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  v10 = a1 + 224;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v10);
    v6 = *(_DWORD *)(a1 + 240);
    if (v6)
      *(_QWORD *)(a1 + 248) = 1000 * v6;
    return pthread_mutex_unlock(v4);
  }
  else
  {
    v8 = (webrtc::SimulatedNetwork *)std::__throw_bad_function_call[abi:sn180100]();
    return webrtc::SimulatedNetwork::PauseTransmissionUntil(v8, v9);
  }
}

uint64_t webrtc::SimulatedNetwork::PauseTransmissionUntil(webrtc::SimulatedNetwork *this, uint64_t a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  *((_QWORD *)this + 37) = a2;
  return pthread_mutex_unlock(v4);
}

void webrtc::SimulatedNetwork::EnqueuePacket(uint64_t a1, _QWORD *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 224);
  v6 = *(_QWORD *)(a1 + 248);
  v7 = *(int *)(a1 + 272);
  pthread_mutex_unlock(v4);
  v8 = *a2 + v7;
  *a2 = v8;
  v9 = *(_QWORD *)(a1 + 128);
  if (v5 - 1 >= v9)
  {
    v10 = a2[1];
    if (v9)
    {
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 328);
      if (v10 > v12)
        v12 = a2[1];
      v11 = v12;
      if ((unint64_t)(v6 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
      {
        v11 = 0x7FFFFFFFFFFFFFFFLL;
        if (v6)
        {
          v13 = v6 / 0x3E8uLL;
          if (v6 % 0x3E8uLL > 0x1F3)
            ++v13;
          if (-v6 % 0x3E8uLL <= 0x1F4)
            v14 = 0;
          else
            v14 = -1;
          if (v6 < 0)
            v13 = v14 - -v6 / 0x3E8uLL;
          if (v12 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v15 = (8000 * v8 + v13 - 1) / v13;
            if (v15 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v16 = v15 == 0x8000000000000000 || v12 == 0x8000000000000000;
              v17 = v15 + v12;
              if (v16)
                v11 = 0x8000000000000000;
              else
                v11 = v17;
            }
          }
        }
      }
    }
    v18 = *(_QWORD *)(a1 + 96);
    v19 = *(_QWORD *)(a1 + 104);
    v20 = 85 * ((v19 - v18) >> 3) - 1;
    v24 = *(_OWORD *)a2;
    v25 = a2[2];
    if (v19 == v18)
      v20 = 0;
    if (v20 == *(_QWORD *)(a1 + 120) + v9)
    {
      std::deque<webrtc::SimulatedNetwork::PacketInfo>::__add_back_capacity(a1 + 88);
      v18 = *(_QWORD *)(a1 + 96);
      v19 = *(_QWORD *)(a1 + 104);
    }
    if (v19 == v18
      || (v21 = *(_QWORD *)(a1 + 128) + *(_QWORD *)(a1 + 120), (v22 = *(_QWORD *)(v18 + 8 * (v21 / 0x55))) == 0))
    {
      __break(1u);
    }
    else
    {
      v23 = v22 + 48 * (v21 % 0x55);
      *(_OWORD *)v23 = v24;
      *(_QWORD *)(v23 + 16) = v25;
      *(_QWORD *)(v23 + 24) = v10;
      *(_QWORD *)(v23 + 32) = 8 * v8;
      *(_QWORD *)(v23 + 40) = v11;
      ++*(_QWORD *)(a1 + 128);
      if ((unint64_t)(*(_QWORD *)(a1 + 184) - 0x7FFFFFFFFFFFFFFFLL) <= 1
        && v11 + 0x7FFFFFFFFFFFFFFFLL <= 0xFFFFFFFFFFFFFFFDLL)
      {
        *(_QWORD *)(a1 + 184) = v11;
      }
      *(_QWORD *)(a1 + 320) = a2[1];
    }
  }
}

uint64_t webrtc::SimulatedNetwork::NextDeliveryTimeUs(webrtc::SimulatedNetwork *this)
{
  if ((unint64_t)(*((_QWORD *)this + 23) + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
    return 0;
  else
    return *((_QWORD *)this + 23);
}

void webrtc::SimulatedNetwork::DequeueDeliverablePackets(webrtc::SimulatedNetwork *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  pthread_mutex_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  void **v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  long double v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  int64_t v50;
  int v51;
  BOOL v52;
  int64_t v53;
  BOOL v54;
  int64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int64_t v66;
  unint64_t v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  char **v75;
  char *v76;
  int64_t v77;
  unint64_t v78;
  const std::nothrow_t *v79;
  __int128 *v80;
  BOOL v81;
  char **v82;
  uint64_t v83;
  void **v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  BOOL v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 *v107;
  unint64_t v108;
  void **v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int64_t v115;
  int v116;
  int v117;
  void **v118;
  __int128 v120;
  __int128 v121;
  uint64_t v122;

  v5 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v7 = *((_DWORD *)this + 58);
  v6 = *((_DWORD *)this + 59);
  v8 = *((_QWORD *)this + 31);
  v116 = *((unsigned __int8 *)this + 264);
  v9 = *((double *)this + 35);
  v10 = *((double *)this + 36);
  v11 = *((_QWORD *)this + 37);
  pthread_mutex_unlock(v5);
  if (!*((_QWORD *)this + 16))
    goto LABEL_109;
  v12 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * (*((_QWORD *)this + 15) / 0x55uLL))
      + 48 * (*((_QWORD *)this + 15) % 0x55uLL);
  v13 = *(_QWORD *)(v12 + 24);
  if (v13 <= *((_QWORD *)this + 41))
    v13 = *((_QWORD *)this + 41);
  *(_QWORD *)(v12 + 24) = v13;
  v14 = *((_QWORD *)this + 15);
  v15 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * (v14 / 0x55));
  v16 = v14 % 0x55;
  v17 = v15 + 48 * v16;
  v18 = *(_QWORD *)(v17 + 24);
  v19 = v18;
  if ((unint64_t)(v8 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
  {
    v19 = 0x7FFFFFFFFFFFFFFFLL;
    if (v8)
    {
      v20 = v8 / 0x3E8uLL;
      if (v8 % 0x3E8uLL > 0x1F3)
        ++v20;
      if (-v8 % 0x3E8uLL <= 0x1F4)
        v21 = 0;
      else
        v21 = -1;
      if (v8 < 0)
        v20 = v21 - -v8 / 0x3E8uLL;
      if (v18 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v22 = (1000 * *(_QWORD *)(v17 + 32) + v20 - 1) / v20;
        if (v22 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v19 = 0x8000000000000000;
          v23 = v22 == 0x8000000000000000 || v18 == 0x8000000000000000;
          v24 = v22 + v18;
          if (!v23)
            v19 = v24;
        }
      }
    }
  }
  *(_QWORD *)(v15 + 48 * v16 + 40) = v19;
  if (!*((_QWORD *)this + 16)
    || (v25 = (void **)*((_QWORD *)this + 12),
        v26 = *((_QWORD *)this + 15),
        *((_QWORD *)v25[v26 / 0x55] + 6 * (v26 % 0x55) + 5) > a2))
  {
LABEL_109:
    v82 = a3;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v83 = *((_QWORD *)this + 22);
    if (!v83)
      goto LABEL_141;
    goto LABEL_110;
  }
  v117 = 0;
  v27 = (double)(1000 * v6);
  v28 = v8 / 0x3E8uLL;
  if (v8 % 0x3E8uLL > 0x1F3)
    ++v28;
  if (-v8 % 0x3E8uLL <= 0x1F4)
    v29 = 0;
  else
    v29 = -1;
  v30 = v29 - -v8 / 0x3E8uLL;
  if (v8 >= 0)
    v30 = v28;
  v115 = v30;
  do
  {
    v31 = (unint64_t)v25[v26 / 0x55] + 48 * (v26 % 0x55);
    v120 = *(_OWORD *)v31;
    v121 = *(_OWORD *)(v31 + 16);
    v32 = *(_QWORD *)(v31 + 40);
    v122 = *(_QWORD *)(v31 + 32);
    v33 = *((_QWORD *)this + 16) - 1;
    v34 = v26 + 1;
    *((_QWORD *)this + 15) = v34;
    *((_QWORD *)this + 16) = v33;
    if (v34 >= 0xAA)
    {
      operator delete(*v25);
      *((_QWORD *)this + 12) += 8;
      *((_QWORD *)this + 15) -= 85;
    }
    if (v11 > v32)
      v32 = v11;
    *((_QWORD *)this + 41) = v32;
    v35 = *((unsigned __int8 *)this + 312);
    v36 = *((_QWORD *)this + 38) ^ (*((_QWORD *)this + 38) >> 12);
    v37 = v36 ^ (v36 << 25) ^ ((v36 ^ (unint64_t)(v36 << 25)) >> 27);
    *((_QWORD *)this + 38) = v37;
    v38 = (double)(0x2545F4914F6CDD1DLL * v37 - 1) * 5.42101086e-20;
    if (v35)
    {
      if (v38 < v9)
        goto LABEL_37;
    }
    else if (v38 < v10)
    {
LABEL_37:
      *((_BYTE *)this + 312) = 1;
      v39 = *((_QWORD *)this + 22);
      v40 = 0x8000000000000000;
      goto LABEL_71;
    }
    *((_BYTE *)this + 312) = 0;
    v41 = v37 ^ (v37 >> 12) ^ ((v37 ^ (v37 >> 12)) << 25);
    v42 = v41 ^ (v41 >> 27);
    v43 = (double)(0x2545F4914F6CDD1DLL * v42) * 5.42101086e-20;
    v44 = v42 ^ (v42 >> 12) ^ ((v42 ^ (v42 >> 12)) << 25);
    v45 = v44 ^ (v44 >> 27);
    *((_QWORD *)this + 38) = v45;
    v46 = (double)(0x2545F4914F6CDD1DLL * v45) * 5.42101086e-20;
    v47 = sqrt(log(v43) * -2.0) * v27;
    v48 = (double)(1000 * v7) + v47 * cos(v46 * 6.28318531);
    if (v48 < 0.0)
      v48 = 0.0;
    if (v48 == INFINITY)
      v49 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v49 = (uint64_t)v48;
    v39 = *((_QWORD *)this + 22);
    if (!v39)
    {
      v50 = 0x8000000000000000;
LABEL_48:
      v51 = v117;
      v40 = 0x7FFFFFFFFFFFFFFFLL;
      if (v32 != 0x7FFFFFFFFFFFFFFFLL && v49 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v52 = v49 == 0x8000000000000000 || v32 == 0x8000000000000000;
        v53 = v49 + v32;
        if (v52)
          v40 = 0x8000000000000000;
        else
          v40 = v53;
      }
      goto LABEL_70;
    }
    v50 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 18) + 8 * ((v39 + *((_QWORD *)this + 21) - 1) / 0x55uLL))
                    + 48 * ((v39 + *((_QWORD *)this + 21) - 1) % 0x55uLL)
                    + 40);
    if (v116 || v32 == 0x7FFFFFFFFFFFFFFFLL || v49 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_48;
    v54 = v49 == 0x8000000000000000 || v32 == 0x8000000000000000;
    v55 = v49 + v32;
    if (v54)
      v55 = 0x8000000000000000;
    if (v55 >= v50)
    {
      v49 = (uint64_t)v48;
      goto LABEL_48;
    }
    if (v32 != 0x8000000000000000 && v50 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v49 = v50 - v32;
      goto LABEL_48;
    }
    v40 = 0x7FFFFFFFFFFFFFFFLL;
    v51 = v117;
LABEL_70:
    v117 = (v50 > v40) | v51;
LABEL_71:
    v57 = *((_QWORD *)this + 18);
    v58 = *((_QWORD *)this + 19);
    v59 = 85 * ((v58 - v57) >> 3) - 1;
    if (v58 == v57)
      v59 = 0;
    if (v59 == *((_QWORD *)this + 21) + v39)
    {
      std::deque<webrtc::SimulatedNetwork::PacketInfo>::__add_back_capacity((uint64_t)this + 136);
      v57 = *((_QWORD *)this + 18);
      v58 = *((_QWORD *)this + 19);
    }
    if (v58 == v57
      || (v60 = *((_QWORD *)this + 22) + *((_QWORD *)this + 21), (v61 = *(_QWORD *)(v57 + 8 * (v60 / 0x55))) == 0))
    {
LABEL_152:
      __break(1u);
LABEL_153:
      abort();
    }
    v62 = v61 + 48 * (v60 % 0x55);
    *(_OWORD *)v62 = v120;
    *(_OWORD *)(v62 + 16) = v121;
    *(_QWORD *)(v62 + 32) = v122;
    *(_QWORD *)(v62 + 40) = v40;
    ++*((_QWORD *)this + 22);
    if (!*((_QWORD *)this + 16))
      break;
    v63 = *((_QWORD *)this + 15);
    v64 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * (v63 / 0x55));
    v65 = v63 % 0x55;
    v66 = *((_QWORD *)this + 41);
    if (v66 <= *(_QWORD *)(v64 + 48 * v65 + 24))
      v66 = *(_QWORD *)(v64 + 48 * v65 + 24);
    if ((unint64_t)(v8 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
      v67 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v67 = v66;
    if (v8 != 0x8000000000000000)
    {
      if (v8)
      {
        if (v8 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v67 = 0x7FFFFFFFFFFFFFFFLL;
          if (v66 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v68 = (v115 + 8000 * *(_QWORD *)(v64 + 48 * v65) - 1) / v115;
            if (v68 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v69 = v68 == 0x8000000000000000 || v66 == 0x8000000000000000;
              v67 = v68 + v66;
              if (v69)
                v67 = 0x8000000000000000;
            }
          }
        }
      }
    }
    *(_QWORD *)(v64 + 48 * v65 + 40) = v67;
    v25 = (void **)*((_QWORD *)this + 12);
    v26 = *((_QWORD *)this + 15);
  }
  while (*((_QWORD *)v25[v26 / 0x55] + 6 * (v26 % 0x55) + 5) <= a2);
  if (((v116 != 0) & v117) != 1)
    goto LABEL_109;
  v70 = *((_QWORD *)this + 21);
  v71 = *((_QWORD *)this + 18);
  v72 = (_QWORD *)(v71 + 8 * (v70 / 0x55));
  if (*((_QWORD *)this + 19) == v71)
  {
    v73 = 0;
    v76 = 0;
    v75 = (char **)(v71 + 8 * ((*((_QWORD *)this + 22) + v70) / 0x55));
    goto LABEL_107;
  }
  v73 = *(_QWORD *)(v71 + 8 * (v70 / 0x55)) + 48 * (v70 % 0x55);
  v74 = *((_QWORD *)this + 22) + v70;
  v75 = (char **)(v71 + 8 * (v74 / 0x55));
  v76 = &(*v75)[48 * (v74 % 0x55)];
  if (v76 == (char *)v73)
  {
LABEL_107:
    v77 = 0;
    goto LABEL_108;
  }
  v77 = 85 * (v75 - (char **)v72)
      - 0x5555555555555555 * ((uint64_t)(48 * (v74 % 0x55)) >> 4)
      + 0x5555555555555555 * ((uint64_t)(v73 - *v72) >> 4);
  if (v77 < 129)
  {
LABEL_108:
    std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(v72, v73, v75, v76, v77, 0, 0);
    goto LABEL_109;
  }
  if (v77 >= 0x2AAAAAAAAAAAAAALL)
    v78 = 0x2AAAAAAAAAAAAAALL;
  else
    v78 = 85 * (v75 - (char **)v72)
        - 0x5555555555555555 * ((uint64_t)(48 * (v74 % 0x55)) >> 4)
        + 0x5555555555555555 * ((uint64_t)(v73 - *v72) >> 4);
  v79 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    v80 = (__int128 *)operator new(48 * v78, v79);
    if (v80)
      break;
    v81 = v78 > 1;
    v78 >>= 1;
    if (!v81)
      goto LABEL_108;
  }
  v107 = v80;
  std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(v72, v73, v75, v76, v77, v80, v78);
  operator delete(v107);
  v82 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v83 = *((_QWORD *)this + 22);
  if (!v83)
  {
LABEL_141:
    *((_QWORD *)this + 23) = 0x7FFFFFFFFFFFFFFFLL;
    v84 = (void **)*((_QWORD *)this + 18);
    if (*((void ***)this + 19) != v84)
      goto LABEL_142;
LABEL_148:
    if (*((_QWORD *)this + 16))
    {
      v113 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 8 * (*((_QWORD *)this + 15) / 0x55uLL))
                       + 48 * (*((_QWORD *)this + 15) % 0x55uLL)
                       + 40);
      goto LABEL_150;
    }
    return;
  }
LABEL_110:
  v84 = (void **)*((_QWORD *)this + 18);
  v85 = *((_QWORD *)this + 21);
  v86 = v85 / 0x55;
  v87 = v84[v85 / 0x55];
  v88 = v85 % 0x55;
  v89 = v87[6 * (v85 % 0x55) + 5];
  if (v89 <= a2)
  {
    v90 = 0;
    v91 = 0;
    do
    {
      v92 = v87[6 * v88 + 2];
      if ((unint64_t)(v89 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
        v93 = -1;
      else
        v93 = v89;
      v94 = (unint64_t)v82[2];
      if ((unint64_t)v91 >= v94)
      {
        v95 = a2;
        v96 = ((char *)v91 - (char *)v90) >> 4;
        v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 60)
          goto LABEL_153;
        v98 = v94 - (_QWORD)v90;
        if (v98 >> 3 > v97)
          v97 = v98 >> 3;
        v99 = (unint64_t)v98 >= 0x7FFFFFFFFFFFFFF0;
        v100 = 0xFFFFFFFFFFFFFFFLL;
        if (!v99)
          v100 = v97;
        if (!v100)
          goto LABEL_152;
        v118 = v84;
        if (v100 >> 60)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v101 = 16 * v100;
        v102 = (char *)operator new(16 * v100);
        v103 = (uint64_t *)&v102[16 * v96];
        *v103 = v93;
        v103[1] = v92;
        if (v91 == v90)
        {
          v105 = &v102[16 * v96];
          a2 = v95;
        }
        else
        {
          v104 = &v102[16 * v96];
          a2 = v95;
          do
          {
            v105 = v104 - 16;
            *((_OWORD *)v104 - 1) = *((_OWORD *)v91 - 1);
            v91 -= 2;
            v104 -= 16;
          }
          while (v91 != v90);
        }
        v106 = &v102[v101];
        v91 = v103 + 2;
        v82 = a3;
        *a3 = v105;
        a3[1] = (char *)(v103 + 2);
        a3[2] = v106;
        if (v90)
        {
          operator delete(v90);
          v84 = (void **)*((_QWORD *)this + 18);
          v85 = *((_QWORD *)this + 21);
          v86 = v85 / 0x55;
          v90 = (uint64_t *)v105;
        }
        else
        {
          v90 = (uint64_t *)v105;
          v84 = v118;
        }
      }
      else
      {
        if (!v91)
          goto LABEL_152;
        *v91 = v93;
        v91[1] = v92;
        v91 += 2;
      }
      v82[1] = (char *)v91;
      if (!v84[v86])
        goto LABEL_152;
      v83 = *((_QWORD *)this + 22) - 1;
      *((_QWORD *)this + 21) = ++v85;
      *((_QWORD *)this + 22) = v83;
      if (v85 >= 0xAA)
      {
        operator delete(*v84);
        v84 = (void **)(*((_QWORD *)this + 18) + 8);
        *((_QWORD *)this + 18) = v84;
        v83 = *((_QWORD *)this + 22);
        v85 = *((_QWORD *)this + 21) - 85;
        *((_QWORD *)this + 21) = v85;
      }
      if (!v83)
        break;
      v86 = v85 / 0x55;
      v87 = v84[v85 / 0x55];
      v88 = v85 % 0x55;
      v89 = v87[6 * (v85 % 0x55) + 5];
    }
    while (v89 <= a2);
  }
  *((_QWORD *)this + 23) = 0x7FFFFFFFFFFFFFFFLL;
  if (*((void ***)this + 19) == v84)
    goto LABEL_148;
LABEL_142:
  v108 = *((_QWORD *)this + 21);
  v109 = &v84[v108 / 0x55];
  v110 = (unint64_t)*v109;
  v111 = (unint64_t)*v109 + 48 * (v108 % 0x55);
  v112 = (unint64_t)v84[(v108 + v83) / 0x55] + 48 * ((v108 + v83) % 0x55);
  if (v111 == v112)
    goto LABEL_148;
  while (1)
  {
    v113 = *(_QWORD *)(v111 + 40);
    if ((unint64_t)(v113 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
      break;
    v111 += 48;
    if (v111 - v110 == 4080)
    {
      v114 = (unint64_t)v109[1];
      ++v109;
      v110 = v114;
      v111 = v114;
    }
    if (v111 == v112)
      goto LABEL_148;
  }
LABEL_150:
  *((_QWORD *)this + 23) = v113;
}

__n128 webrtc::SimulatedNetwork::RegisterDeliveryTimeChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  v4 = a1 + 192;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 208))(1, v4, v4);
  *(_QWORD *)(a1 + 208) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 216) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a2 + 16))(0, a2, v4);
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 208) = result;
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void **std::deque<webrtc::SimulatedNetwork::PacketInfo>::~deque[abi:sn180100](void **result)
{
  void **v1;
  void **v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  _BYTE *v15;

  v1 = result;
  v2 = (void **)result[1];
  v3 = (void **)result[2];
  v4 = (char *)v3 - (char *)v2;
  if (v3 == v2)
  {
    v5 = result + 5;
  }
  else
  {
    v5 = result + 5;
    v6 = (unint64_t)result[4];
    v7 = &v2[v6 / 0x55];
    v8 = (unint64_t)*v7;
    v9 = (unint64_t)*v7 + 48 * (v6 % 0x55);
    while ((void *)v9 != (char *)v2[((unint64_t)result[5] + v6) / 0x55]
                        + 48 * (((unint64_t)result[5] + v6) % 0x55))
    {
      if (!v9)
      {
        __break(1u);
        return result;
      }
      v9 += 48;
      if (v9 - v8 == 4080)
      {
        v10 = (unint64_t)v7[1];
        ++v7;
        v8 = v10;
        v9 = v10;
      }
    }
  }
  *v5 = 0;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)v1[2];
      v2 = (void **)((char *)v1[1] + 8);
      v1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v4 >> 3;
  if (v11 == 1)
  {
    v12 = 42;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_15;
    v12 = 85;
  }
  v1[4] = (void *)v12;
LABEL_15:
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = v1[1];
    v14 = v1[2];
    if (v14 != v15)
      v1[2] = &v14[(v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v1)
    operator delete(*v1);
  return v1;
}

void std::deque<webrtc::SimulatedNetwork::PacketInfo>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  BOOL v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x55;
  v4 = v2 - 85;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v30 = *(char **)a1;
    if ((unint64_t)v7 > *(_QWORD *)a1)
    {
      v31 = (uint64_t)&v7[-*(_QWORD *)a1] >> 3;
      if (v31 >= -1)
        v32 = v31 + 1;
      else
        v32 = v31 + 2;
      v33 = v32 >> 1;
      v34 = -v33;
      v35 = &v7[-8 * v33];
      v36 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v33], v7, v5 - v7);
        v7 = *(char **)(a1 + 8);
      }
      v5 = &v35[v36];
      v37 = &v7[8 * v34];
      goto LABEL_32;
    }
    v39 = (v5 - v30) >> 2;
    if (v5 == v30)
      v39 = 1;
    if (v39 >> 61)
      goto LABEL_108;
    v40 = v39 >> 2;
    v41 = 8 * v39;
    v42 = (char *)operator new(8 * v39);
    v43 = &v42[8 * v40];
    v45 = v5 - v7;
    v44 = v5 == v7;
    v5 = v43;
    if (!v44)
    {
      v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
      v46 = v45 - 8;
      if ((unint64_t)(v45 - 8) < 0x38)
      {
        v47 = &v42[8 * v40];
        do
        {
LABEL_91:
          v100 = *(_QWORD *)v7;
          v7 += 8;
          *(_QWORD *)v47 = v100;
          v47 += 8;
        }
        while (v47 != v5);
        goto LABEL_92;
      }
      v93 = &v42[8 * v40];
      v47 = v93;
      if ((unint64_t)(v93 - v7) < 0x20)
        goto LABEL_91;
      v94 = (v46 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v47 = &v43[v95];
      v7 += v95;
      v96 = (__int128 *)(v6 + 3);
      v97 = v93 + 16;
      v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v99 = *v96;
        *(v97 - 1) = *(v96 - 1);
        *v97 = v99;
        v96 += 2;
        v97 += 2;
        v98 -= 4;
      }
      while (v98);
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_91;
    }
LABEL_92:
    *(_QWORD *)a1 = v42;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = &v42[v41];
    if (v30)
    {
      operator delete(v30);
      v5 = *(char **)(a1 + 16);
    }
LABEL_4:
    if (!v5)
    {
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
LABEL_5:
    *(_QWORD *)v5 = v8;
LABEL_10:
    *(_QWORD *)(a1 + 16) += 8;
    return;
  }
  v10 = *(char **)(a1 + 16);
  v9 = *(char **)(a1 + 24);
  v12 = *(char **)a1;
  v11 = *(char **)(a1 + 8);
  v13 = v10 - v11;
  v14 = (v10 - v11) >> 3;
  v15 = (uint64_t)&v9[-*(_QWORD *)a1];
  if (v14 < (unint64_t)(v15 >> 3))
  {
    v16 = operator new(0xFF0uLL);
    v17 = v16;
    if (v9 != v10)
    {
      if (v10)
      {
        *(_QWORD *)v10 = v16;
        goto LABEL_10;
      }
      goto LABEL_107;
    }
    if (v11 == v12)
    {
      v70 = (v9 - v11) >> 2;
      if (v10 == v11)
        v70 = 1;
      if (v70 >> 61)
        goto LABEL_108;
      v71 = (v70 + 3) >> 2;
      v72 = 8 * v70;
      v73 = (char *)operator new(8 * v70);
      v38 = &v73[8 * v71];
      v74 = v38;
      if (v10 != v11)
      {
        v74 = &v38[8 * v14];
        v75 = &v73[8 * v71];
        v76 = v11;
        if ((unint64_t)(v13 - 8) < 0x38)
          goto LABEL_111;
        v77 = &v73[8 * v71];
        v75 = v77;
        v76 = v11;
        if ((unint64_t)(v77 - v11) < 0x20)
          goto LABEL_111;
        v78 = ((unint64_t)(v13 - 8) >> 3) + 1;
        v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v38[v79];
        v76 = &v11[v79];
        v80 = (__int128 *)(v11 + 16);
        v81 = v77 + 16;
        v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v83 = *v80;
          *(v81 - 1) = *(v80 - 1);
          *v81 = v83;
          v80 += 2;
          v81 += 2;
          v82 -= 4;
        }
        while (v82);
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_111:
          do
          {
            v84 = *(_QWORD *)v76;
            v76 += 8;
            *(_QWORD *)v75 = v84;
            v75 += 8;
          }
          while (v75 != v74);
        }
      }
      *(_QWORD *)a1 = v73;
      *(_QWORD *)(a1 + 8) = v38;
      *(_QWORD *)(a1 + 16) = v74;
      *(_QWORD *)(a1 + 24) = &v73[v72];
      if (v11)
      {
        operator delete(v11);
        v38 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v38 = v11;
    }
    *((_QWORD *)v38 - 1) = v17;
    v85 = *(char **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v85 - 8;
    v8 = *((_QWORD *)v85 - 1);
    *(_QWORD *)(a1 + 8) = v85;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v86 = *(char **)a1;
    if ((unint64_t)v85 > *(_QWORD *)a1)
    {
      v87 = (uint64_t)&v85[-*(_QWORD *)a1] >> 3;
      if (v87 >= -1)
        v88 = v87 + 1;
      else
        v88 = v87 + 2;
      v89 = v88 >> 1;
      v90 = -v89;
      v91 = &v85[-8 * v89];
      v92 = v5 - v85;
      if (v5 != v85)
      {
        memmove(&v85[-8 * v89], v85, v5 - v85);
        v85 = *(char **)(a1 + 8);
      }
      v5 = &v91[v92];
      v37 = &v85[8 * v90];
LABEL_32:
      *(_QWORD *)(a1 + 8) = v37;
      *(_QWORD *)(a1 + 16) = v5;
      goto LABEL_5;
    }
    v101 = (v5 - v86) >> 2;
    if (v5 == v86)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v85;
      v44 = v5 == v85;
      v5 = v105;
      if (v44)
        goto LABEL_105;
      v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
      v107 = v106 - 8;
      if ((unint64_t)(v106 - 8) >= 0x38)
      {
        v109 = &v104[8 * v102];
        v108 = v109;
        if ((unint64_t)(v109 - v85) >= 0x20)
        {
          v110 = (v107 >> 3) + 1;
          v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = &v105[v111];
          v112 = &v85[v111];
          v113 = (__int128 *)(v85 + 16);
          v114 = v109 + 16;
          v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          v85 = v112;
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_105:
            *(_QWORD *)a1 = v104;
            *(_QWORD *)(a1 + 8) = v105;
            *(_QWORD *)(a1 + 16) = v5;
            *(_QWORD *)(a1 + 24) = &v104[v103];
            if (v86)
            {
              operator delete(v86);
              v5 = *(char **)(a1 + 16);
            }
            goto LABEL_4;
          }
        }
      }
      else
      {
        v108 = &v104[8 * v102];
      }
      do
      {
        v117 = *(_QWORD *)v85;
        v85 += 8;
        *(_QWORD *)v108 = v117;
        v108 += 8;
      }
      while (v108 != v5);
      goto LABEL_105;
    }
LABEL_108:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v18 = v15 >> 2;
  if (v9 == v12)
    v19 = 1;
  else
    v19 = v18;
  if (v19 >> 61)
    goto LABEL_108;
  v20 = (char *)operator new(8 * v19);
  v21 = &v20[8 * v14];
  v22 = &v20[8 * v19];
  v23 = operator new(0xFF0uLL);
  v24 = v23;
  if (v14 != v19)
    goto LABEL_21;
  if (v13 >= 1)
  {
    v25 = v14 + 2;
    if (v14 >= -1)
      v25 = v14 + 1;
    v21 -= 8 * (v25 >> 1);
LABEL_21:
    *(_QWORD *)v21 = v23;
    v26 = v21 + 8;
    if (v10 != v11)
      goto LABEL_48;
    goto LABEL_22;
  }
  v48 = v13 >> 2;
  if (v10 == v11)
    v48 = 1;
  if (v48 >> 61)
    goto LABEL_108;
  v49 = 8 * v48;
  v21 = (char *)operator new(8 * v48);
  operator delete(v20);
  v22 = &v21[v49];
  v50 = *(char **)(a1 + 8);
  v10 = *(char **)(a1 + 16);
  v20 = v21;
  *(_QWORD *)v21 = v24;
  v26 = v21 + 8;
  if (v10 != v50)
  {
    while (1)
    {
LABEL_48:
      if (v21 == v20)
      {
        if (v26 >= v22)
        {
          v55 = (v22 - v21) >> 2;
          if (v22 == v21)
            v55 = 1;
          if (v55 >> 61)
            goto LABEL_108;
          v56 = (v55 + 3) >> 2;
          v57 = 8 * v55;
          v58 = (char *)operator new(8 * v55);
          v20 = v58;
          v51 = &v58[8 * v56];
          v28 = v51;
          v59 = v26 - v21;
          if (v26 != v21)
          {
            v28 = &v51[v59 & 0xFFFFFFFFFFFFFFF8];
            v60 = v59 - 8;
            v61 = &v58[8 * v56];
            v62 = v21;
            if (v60 < 0x38)
              goto LABEL_112;
            v61 = &v58[8 * v56];
            v62 = v21;
            if ((unint64_t)(v61 - v21) < 0x20)
              goto LABEL_112;
            v63 = (v60 >> 3) + 1;
            v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
            v61 = &v51[v64];
            v62 = &v21[v64];
            v65 = (__int128 *)(v21 + 16);
            v66 = &v58[8 * v56 + 16];
            v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v68 = *v65;
              *((_OWORD *)v66 - 1) = *(v65 - 1);
              *(_OWORD *)v66 = v68;
              v65 += 2;
              v66 += 32;
              v67 -= 4;
            }
            while (v67);
            if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_112:
              do
              {
                v69 = *(_QWORD *)v62;
                v62 += 8;
                *(_QWORD *)v61 = v69;
                v61 += 8;
              }
              while (v61 != v28);
            }
          }
          v22 = &v58[v57];
          operator delete(v21);
        }
        else
        {
          v53 = (v22 - v26) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v28 = &v26[8 * (v54 >> 1)];
          v51 = &v21[8 * (v54 >> 1)];
          if (v26 == v21)
          {
            v20 = v26;
          }
          else
          {
            memmove(&v21[8 * (v54 >> 1)], v21, v26 - v21);
            v20 = v21;
          }
        }
      }
      else
      {
        v51 = v21;
        v28 = v26;
      }
      v52 = *((_QWORD *)v10 - 1);
      v10 -= 8;
      *((_QWORD *)v51 - 1) = v52;
      v27 = v51 - 8;
      v26 = v28;
      v21 = v27;
      if (v10 == *(char **)(a1 + 8))
        goto LABEL_23;
    }
  }
LABEL_22:
  v27 = v21;
  v28 = v26;
LABEL_23:
  v29 = *(char **)a1;
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v28;
  *(_QWORD *)(a1 + 24) = v22;
  if (v29)
    operator delete(v29);
}

_QWORD *std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(_QWORD *result, unint64_t a2, char **a3, char *a4, unint64_t a5, __int128 *a6, uint64_t a7)
{
  char *v7;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  __int128 *v36;
  __int128 *v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  if (a5 < 2)
    return result;
  v7 = a4;
  v9 = a2;
  if (a5 == 2)
  {
    if (*a3 == a4)
      v7 = *(a3 - 1) + 4080;
    if (*((_QWORD *)v7 - 1) < *(_QWORD *)(a2 + 40))
    {
      v10 = *(_OWORD *)a2;
      v11 = *(_OWORD *)(a2 + 16);
      v12 = *(_OWORD *)(a2 + 32);
      v14 = *((_OWORD *)v7 - 2);
      v13 = *((_OWORD *)v7 - 1);
      *(_OWORD *)a2 = *((_OWORD *)v7 - 3);
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 32) = v13;
      *((_OWORD *)v7 - 2) = v11;
      *((_OWORD *)v7 - 1) = v12;
      *((_OWORD *)v7 - 3) = v10;
    }
    return result;
  }
  v16 = result;
  if ((uint64_t)a5 <= 128)
  {
    if ((char *)a2 == a4)
      return result;
    v17 = a2 + 48;
    v18 = *result;
    while (1)
    {
      if (v17 - v18 == 4080)
      {
        v20 = v16[1];
        ++v16;
        v18 = v20;
        v17 = v20;
      }
      if ((char *)v17 == a4)
        return result;
      v21 = v16;
      v22 = v17;
      if (v17 == v18)
      {
        v21 = v16 - 1;
        v22 = *(v16 - 1) + 4080;
        if (*(_QWORD *)(v17 + 40) >= *(_QWORD *)(*(v16 - 1) + 4072))
          goto LABEL_13;
      }
      else if (*(_QWORD *)(v17 + 40) >= *(_QWORD *)(v17 - 8))
      {
        goto LABEL_13;
      }
      v53 = *(_QWORD *)(v17 + 32);
      v51 = *(_OWORD *)v17;
      v52 = *(_OWORD *)(v17 + 16);
      v23 = *(_QWORD *)(v17 + 40);
      v19 = (_OWORD *)v17;
      while (1)
      {
        v25 = v22;
        v26 = *(_OWORD *)(v22 - 48);
        v27 = *(_OWORD *)(v22 - 16);
        v19[1] = *(_OWORD *)(v22 - 32);
        v19[2] = v27;
        *v19 = v26;
        v19 = (_OWORD *)(v22 - 48);
        if (v22 - 48 == a2)
          break;
        if (v19 == (_OWORD *)*v21)
        {
          v24 = *--v21;
          v22 = v24 + 4080;
          if (v23 >= *(_QWORD *)(v24 + 4072))
            goto LABEL_12;
        }
        else
        {
          v22 -= 48;
          if (v23 >= *((_QWORD *)v19 - 1))
            goto LABEL_12;
        }
      }
      v19 = (_OWORD *)a2;
LABEL_12:
      *((_QWORD *)v19 + 4) = v53;
      *v19 = v51;
      v19[1] = v52;
      *(_QWORD *)(v25 - 8) = v23;
      v18 = *v16;
LABEL_13:
      v17 += 48;
    }
  }
  v29 = a6;
  v30 = a5 >> 1;
  v31 = (a5 >> 1) - 0x5555555555555555 * ((uint64_t)(a2 - *result) >> 4);
  if (v31 < 1)
  {
    v34 = 84 - v31;
    v32 = (void **)&result[-(v34 / 0x55)];
    v33 = (char *)*v32 + 48 * (85 * (v34 / 0x55) - v34) + 4032;
  }
  else
  {
    v32 = (void **)&result[v31 / 0x55uLL];
    v33 = (char *)*v32 + 48 * (v31 % 0x55uLL);
  }
  v50 = a5 - v30;
  v35 = a5 >> 1;
  if ((uint64_t)a5 > a7)
  {
    std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(result, a2, v32, v33, v35, a6, a7);
    std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(v32, v33, a3, v7, v50, v29, a7);
    return (_QWORD *)std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>((uint64_t)v16, (char *)v9, v32, v33, a3, v7, v30, v50, v29, a7);
  }
  std::__stable_sort_move<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(result, a2, v32, (uint64_t)v33, v35, a6);
  v36 = &v29[3 * v30];
  result = std::__stable_sort_move<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(v32, (unint64_t)v33, a3, (uint64_t)v7, v50, v36);
  v37 = &v29[3 * a5];
  v38 = v36;
  while (v38 != v37)
  {
    if (*((_QWORD *)v38 + 5) >= *((_QWORD *)v29 + 5))
    {
      v41 = *v29;
      v42 = v29[2];
      *(_OWORD *)(v9 + 16) = v29[1];
      *(_OWORD *)(v9 + 32) = v42;
      *(_OWORD *)v9 = v41;
      v9 += 48;
      v29 += 3;
      if (v9 - *v16 == 4080)
      {
LABEL_39:
        v43 = v16[1];
        ++v16;
        v9 = v43;
      }
    }
    else
    {
      v39 = *v38;
      v40 = v38[2];
      *(_OWORD *)(v9 + 16) = v38[1];
      *(_OWORD *)(v9 + 32) = v40;
      *(_OWORD *)v9 = v39;
      v9 += 48;
      v38 += 3;
      if (v9 - *v16 == 4080)
        goto LABEL_39;
    }
    if (v29 == v36)
    {
      while (v38 != v37)
      {
        v44 = *v38;
        v45 = v38[2];
        *(_OWORD *)(v9 + 16) = v38[1];
        *(_OWORD *)(v9 + 32) = v45;
        *(_OWORD *)v9 = v44;
        v9 += 48;
        if (v9 - *v16 == 4080)
        {
          v46 = v16[1];
          ++v16;
          v9 = v46;
        }
        v38 += 3;
      }
      return result;
    }
  }
  while (v29 != v36)
  {
    v47 = *v29;
    v48 = v29[2];
    *(_OWORD *)(v9 + 16) = v29[1];
    *(_OWORD *)(v9 + 32) = v48;
    *(_OWORD *)v9 = v47;
    v9 += 48;
    if (v9 - *v16 == 4080)
    {
      v49 = v16[1];
      ++v16;
      v9 = v49;
    }
    v29 += 3;
  }
  return result;
}

_QWORD *std::__stable_sort_move<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(_QWORD *result, unint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5, _OWORD *a6)
{
  _OWORD *v6;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  unint64_t v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;

  if (!a5)
    return result;
  v6 = a6;
  v10 = a2;
  if (a5 == 2)
  {
    if (*a3 == a4)
    {
      v13 = (__int128 *)(*(a3 - 1) + 4032);
      v14 = a6 + 3;
      if (*(_QWORD *)(*(a3 - 1) + 4072) < *(_QWORD *)(a2 + 40))
        goto LABEL_7;
    }
    else
    {
      v13 = (__int128 *)(a4 - 48);
      v14 = a6 + 3;
      if (*(_QWORD *)(a4 - 8) < *(_QWORD *)(a2 + 40))
      {
LABEL_7:
        v15 = *v13;
        v16 = v13[2];
        a6[1] = v13[1];
        a6[2] = v16;
        *a6 = v15;
        v17 = *(_OWORD *)a2;
        v18 = *(_OWORD *)(a2 + 16);
        v19 = *(_OWORD *)(a2 + 32);
LABEL_25:
        v14[1] = v18;
        v14[2] = v19;
        *v14 = v17;
        return result;
      }
    }
    v37 = *(_OWORD *)a2;
    v38 = *(_OWORD *)(a2 + 32);
    a6[1] = *(_OWORD *)(a2 + 16);
    a6[2] = v38;
    *a6 = v37;
    v17 = *v13;
    v18 = v13[1];
    v19 = v13[2];
    goto LABEL_25;
  }
  if (a5 == 1)
  {
    v11 = *(_OWORD *)a2;
    v12 = *(_OWORD *)(a2 + 32);
    a6[1] = *(_OWORD *)(a2 + 16);
    a6[2] = v12;
    *a6 = v11;
  }
  else
  {
    v20 = result;
    if ((uint64_t)a5 > 8)
    {
      v33 = a5 >> 1;
      v34 = (a5 >> 1) - 0x5555555555555555 * ((uint64_t)(a2 - *result) >> 4);
      if (v34 < 1)
      {
        v39 = 84 - v34;
        v35 = &result[-(v39 / 0x55)];
        v36 = *v35 + 48 * (85 * (v39 / 0x55) - v39) + 4032;
      }
      else
      {
        v35 = &result[v34 / 0x55uLL];
        v36 = *v35 + 48 * (v34 % 0x55uLL);
      }
      std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(result, a2, v35, v36, a5 >> 1, a6, a5 >> 1);
      result = (_QWORD *)std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(v35, v36, a3, a4, a5 - v33, &v6[3 * v33], a5 - v33);
      if (v36 == v10)
      {
LABEL_38:
        while (v10 != a4)
        {
          v47 = *(_OWORD *)v10;
          v48 = *(_OWORD *)(v10 + 32);
          v6[1] = *(_OWORD *)(v10 + 16);
          v6[2] = v48;
          *v6 = v47;
          v10 += 48;
          if (v10 - *v35 == 4080)
          {
            v49 = v35[1];
            ++v35;
            v10 = v49;
          }
          v6 += 3;
        }
      }
      else
      {
        v40 = v10;
        v10 = v36;
        while (v10 != a4)
        {
          if (*(_QWORD *)(v10 + 40) >= *(_QWORD *)(v40 + 40))
          {
            v44 = *(_OWORD *)v40;
            v45 = *(_OWORD *)(v40 + 32);
            v6[1] = *(_OWORD *)(v40 + 16);
            v6[2] = v45;
            *v6 = v44;
            v40 += 48;
            if (v40 - *v20 == 4080)
            {
              v46 = v20[1];
              ++v20;
              v40 = v46;
            }
          }
          else
          {
            v41 = *(_OWORD *)v10;
            v42 = *(_OWORD *)(v10 + 32);
            v6[1] = *(_OWORD *)(v10 + 16);
            v6[2] = v42;
            *v6 = v41;
            v10 += 48;
            if (v10 - *v35 == 4080)
            {
              v43 = v35[1];
              ++v35;
              v10 = v43;
            }
          }
          v6 += 3;
          if (v40 == v36)
            goto LABEL_38;
        }
        while (v40 != v36)
        {
          v50 = *(_OWORD *)v40;
          v51 = *(_OWORD *)(v40 + 32);
          v6[1] = *(_OWORD *)(v40 + 16);
          v6[2] = v51;
          *v6 = v50;
          v40 += 48;
          if (v40 - *v20 == 4080)
          {
            v52 = v20[1];
            ++v20;
            v40 = v52;
          }
          v6 += 3;
        }
      }
    }
    else if (a2 != a4)
    {
      v21 = 0;
      v22 = *(_OWORD *)a2;
      v23 = *(_OWORD *)(a2 + 32);
      a6[1] = *(_OWORD *)(a2 + 16);
      a6[2] = v23;
      *a6 = v22;
      v24 = a6;
      while (1)
      {
        v27 = v24;
        v10 += 48;
        if (v10 - *v20 == 4080)
        {
          v28 = v20[1];
          ++v20;
          v10 = v28;
        }
        if (v10 == a4)
          break;
        v24 += 3;
        v29 = v27 + 3;
        if (*(_QWORD *)(v10 + 40) < *((_QWORD *)v27 + 5))
        {
          v30 = v27[1];
          *v24 = *v27;
          v27[4] = v30;
          v27[5] = v27[2];
          v29 = a6;
          if (v27 != a6)
          {
            v31 = v21;
            while (1)
            {
              v29 = (_OWORD *)((char *)a6 + v31);
              if (*(_QWORD *)(v10 + 40) >= *(_QWORD *)((char *)a6 + v31 - 8))
                break;
              v32 = *(v29 - 2);
              *v29 = *(v29 - 3);
              v29[1] = v32;
              v29[2] = *(v29 - 1);
              v31 -= 48;
              if (!v31)
              {
                v29 = a6;
                break;
              }
            }
          }
        }
        v25 = *(_OWORD *)v10;
        v26 = *(_OWORD *)(v10 + 32);
        v29[1] = *(_OWORD *)(v10 + 16);
        v29[2] = v26;
        *v29 = v25;
        v21 += 48;
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(uint64_t result, char *a2, void **a3, char *a4, _QWORD *a5, char *a6, uint64_t a7, uint64_t a8, __int128 *a9, uint64_t a10)
{
  _QWORD *v14;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void **v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void **v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *n;
  int64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void **v71;
  char *v72;
  char *v73;
  char *v74;
  unint64_t *v75;
  void **v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  char *m;
  int64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t j;
  int64_t v92;
  char *v93;
  char *v94;
  void **v95;
  unint64_t i;
  int64_t v97;
  char *v98;
  void **v99;
  void **k;
  _BYTE *v101;
  char *v102;
  int64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  _BYTE *v108;
  int64_t v109;
  char *v110;
  char *v111;
  char *v112;
  void **ii;
  uint64_t v114;
  char *v115;
  int64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  int64_t v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _OWORD *v130;
  unint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  _OWORD *v134;
  _OWORD *v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  _QWORD *v150;
  __int128 *v151;
  __int128 v152;
  __int128 v153;
  char *v154;
  uint64_t v155;
  char *v156;
  _QWORD *v157;
  __int128 *v158;
  __int128 v159;
  __int128 v160;
  char *v161;
  __int128 *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 *v174;
  __int128 *v175;
  __int128 v176;
  __int128 v177;
  char *v178;
  __int128 v179;
  __int128 v180;
  char *v181;
  __int128 v182;
  __int128 v183;
  char *v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  char *v189;
  char *v190;
  char **v191;
  char *v192;
  __int128 *v193;
  unint64_t v194;
  char *v195;
  void **v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void **v201;
  __int128 *v202;
  char *v203;
  void **v204;
  void **v205;
  _QWORD *v206;
  char *__dst;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;

  if (!a8)
    return result;
  v14 = (_QWORD *)result;
  result = 0x5555555555555555;
  do
  {
    if (a7 <= a10 || a8 <= a10)
    {
      if (a7 > a8)
      {
        if (a4 == a6)
          return result;
        v148 = 0;
        v149 = a4;
        v150 = a3;
        do
        {
          v151 = &a9[v148];
          v152 = *(_OWORD *)v149;
          v153 = *((_OWORD *)v149 + 2);
          v151[1] = *((_OWORD *)v149 + 1);
          v151[2] = v153;
          *v151 = v152;
          v149 += 48;
          if (&v149[-*v150] == (char *)4080)
          {
            v154 = (char *)v150[1];
            ++v150;
            v149 = v154;
          }
          v148 += 3;
        }
        while (v149 != a6);
        if (!(v148 * 16))
          return result;
        v162 = &a9[v148];
        while (1)
        {
          if (a4 == a2)
          {
            v184 = (char *)*a5;
            do
            {
              v185 = (uint64_t)a6;
              if (a6 == v184)
                v185 = *(a5 - 1) + 4080;
              v186 = *(v162 - 3);
              v187 = *(v162 - 2);
              v162 -= 3;
              v188 = v162[2];
              *(_OWORD *)(v185 - 32) = v187;
              *(_OWORD *)(v185 - 16) = v188;
              *(_OWORD *)(v185 - 48) = v186;
              v184 = (char *)*a5;
              if (a6 == (char *)*a5)
              {
                v189 = (char *)*--a5;
                v184 = v189;
                a6 = v189 + 4080;
              }
              a6 -= 48;
            }
            while (v162 != a9);
            return result;
          }
          if (a4 == *a3)
          {
            v169 = (uint64_t)*(a3 - 1);
            if (*((_QWORD *)v162 - 1) < *(_QWORD *)(v169 + 4072))
            {
              v164 = (char *)(v169 + 4080);
              v165 = (uint64_t)a6;
              if (a6 == (char *)*a5)
LABEL_260:
                v165 = *(a5 - 1) + 4080;
LABEL_254:
              v166 = *((_OWORD *)v164 - 3);
              v167 = *((_OWORD *)v164 - 1);
              *(_OWORD *)(v165 - 32) = *((_OWORD *)v164 - 2);
              *(_OWORD *)(v165 - 16) = v167;
              *(_OWORD *)(v165 - 48) = v166;
              if (a4 == *a3)
              {
                v168 = (uint64_t)*--a3;
                a4 = (char *)(v168 + 4080);
              }
              a4 -= 48;
              if (a6 != (char *)*a5)
                goto LABEL_249;
              goto LABEL_248;
            }
          }
          else
          {
            v164 = a4;
            if (*((_QWORD *)v162 - 1) < *((_QWORD *)a4 - 1))
            {
              v165 = (uint64_t)a6;
              if (a6 == (char *)*a5)
                goto LABEL_260;
              goto LABEL_254;
            }
          }
          v170 = (uint64_t)a6;
          if (a6 == (char *)*a5)
            v170 = *(a5 - 1) + 4080;
          v171 = *(v162 - 3);
          v172 = *(v162 - 2);
          v162 -= 3;
          v173 = v162[2];
          *(_OWORD *)(v170 - 32) = v172;
          *(_OWORD *)(v170 - 16) = v173;
          *(_OWORD *)(v170 - 48) = v171;
          if (a6 != (char *)*a5)
            goto LABEL_249;
LABEL_248:
          v163 = *--a5;
          a6 = (char *)(v163 + 4080);
LABEL_249:
          a6 -= 48;
          if (v162 == a9)
            return result;
        }
      }
      if (a2 == a4)
        return result;
      v155 = 0;
      v156 = a2;
      v157 = v14;
      do
      {
        v158 = &a9[v155];
        v159 = *(_OWORD *)v156;
        v160 = *((_OWORD *)v156 + 2);
        v158[1] = *((_OWORD *)v156 + 1);
        v158[2] = v160;
        *v158 = v159;
        v156 += 48;
        if (&v156[-*v157] == (char *)4080)
        {
          v161 = (char *)v157[1];
          ++v157;
          v156 = v161;
        }
        v155 += 3;
      }
      while (v156 != a4);
      if (!(v155 * 16))
        return result;
      v174 = &a9[v155];
      v175 = a9;
      while (1)
      {
        if (a4 == a6)
        {
          v192 = (char *)*v14;
          v191 = (char **)(v14 + 1);
          v190 = v192;
          v193 = &a9[v155];
          while (1)
          {
            if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (v193 - v175)) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL
                                                                            * ((v190 - a2 + 4080) >> 4)))
              v194 = 0xAAAAAAAAAAAAAAABLL * ((v190 - a2 + 4080) >> 4);
            else
              v194 = 0xAAAAAAAAAAAAAAABLL * (v193 - v175);
            if (v194)
              result = (uint64_t)memmove(a2, v175, 48 * v194);
            v175 += 3 * v194;
            if (v174 == v175)
              break;
            v195 = *v191++;
            v190 = v195;
            a2 = v195;
          }
          return result;
        }
        if (*((_QWORD *)a4 + 5) >= *((_QWORD *)v175 + 5))
        {
          v179 = *v175;
          v180 = v175[2];
          *((_OWORD *)a2 + 1) = v175[1];
          *((_OWORD *)a2 + 2) = v180;
          *(_OWORD *)a2 = v179;
          a2 += 48;
          v175 += 3;
          if (&a2[-*v14] == (char *)4080)
          {
LABEL_276:
            v181 = (char *)v14[1];
            ++v14;
            a2 = v181;
          }
        }
        else
        {
          v176 = *(_OWORD *)a4;
          v177 = *((_OWORD *)a4 + 2);
          *((_OWORD *)a2 + 1) = *((_OWORD *)a4 + 1);
          *((_OWORD *)a2 + 2) = v177;
          *(_OWORD *)a2 = v176;
          a4 += 48;
          if (a4 - (_BYTE *)*a3 == 4080)
          {
            v178 = (char *)a3[1];
            ++a3;
            a4 = v178;
            a2 += 48;
            if (&a2[-*v14] == (char *)4080)
              goto LABEL_276;
          }
          else
          {
            a2 += 48;
            if (&a2[-*v14] == (char *)4080)
              goto LABEL_276;
          }
        }
        if (v174 == v175)
          return result;
      }
    }
    if (!a7)
      return result;
    while (*((_QWORD *)a4 + 5) >= *((_QWORD *)a2 + 5))
    {
      a2 += 48;
      if (&a2[-*v14] == (char *)4080)
      {
        v17 = (char *)v14[1];
        ++v14;
        a2 = v17;
      }
      if (!--a7)
        return result;
    }
    v206 = v14;
    v203 = a6;
    if (a7 >= a8)
    {
      if (a7 == 1)
      {
        v216 = *((_OWORD *)a2 + 1);
        v221 = *((_OWORD *)a2 + 2);
        v212 = *(_OWORD *)a2;
        v182 = *(_OWORD *)a4;
        v183 = *((_OWORD *)a4 + 2);
        *((_OWORD *)a2 + 1) = *((_OWORD *)a4 + 1);
        *((_OWORD *)a2 + 2) = v183;
        *(_OWORD *)a2 = v182;
        *((_OWORD *)a4 + 1) = v216;
        *((_OWORD *)a4 + 2) = v221;
        *(_OWORD *)a4 = v212;
        return result;
      }
      if (a7 >= 0)
        v34 = a7;
      else
        v34 = a7 + 1;
      v35 = v34 >> 1;
      v26 = v14;
      v27 = (unint64_t)a2;
      if ((unint64_t)(a7 + 1) >= 3)
      {
        v36 = v35 - 0x5555555555555555 * ((uint64_t)&a2[-*v14] >> 4);
        if (v36 < 1)
        {
          v47 = 84 - v36;
          v26 = &v14[-(v47 / 0x55)];
          v27 = *v26 + 48 * (85 * (v47 / 0x55) - v47) + 4032;
          v197 = v35;
          if (a4 == a6)
            goto LABEL_61;
LABEL_38:
          v37 = 85 * ((void **)a5 - a3)
              - 0x5555555555555555 * ((uint64_t)&a6[-*a5] >> 4)
              + 0x5555555555555555 * ((a4 - (_BYTE *)*a3) >> 4);
          if (v37)
          {
            v38 = *(_QWORD *)(v27 + 40);
            v21 = (unint64_t)a4;
            v20 = a3;
            while (1)
            {
              v39 = v37 >> 1;
              if (v37 == 1)
              {
                v40 = v21;
                v41 = v20;
                if (*(_QWORD *)(v21 + 40) < v38)
                  goto LABEL_49;
              }
              else
              {
                v42 = v39 - 0x5555555555555555 * ((uint64_t)(v21 - (_QWORD)*v20) >> 4);
                if (v42 < 1)
                {
                  v43 = 84 - v42;
                  v41 = &v20[-(v43 / 0x55)];
                  v40 = (unint64_t)*v41 + 48 * (85 * (v43 / 0x55) - v43) + 4032;
                  if (*(_QWORD *)(v40 + 40) < v38)
                  {
LABEL_49:
                    v21 = v40 + 48;
                    if (v40 + 48 - (_QWORD)*v41 == 4080)
                    {
                      v44 = (unint64_t)v41[1];
                      ++v41;
                      v21 = v44;
                    }
                    v39 = v37 + ~v39;
                    v20 = v41;
                  }
                }
                else
                {
                  v41 = &v20[v42 / 0x55uLL];
                  v40 = (unint64_t)*v41 + 48 * (v42 % 0x55uLL);
                  if (*(_QWORD *)(v40 + 40) < v38)
                    goto LABEL_49;
                }
              }
              v37 = v39;
              if (!v39)
                goto LABEL_62;
            }
          }
LABEL_61:
          v20 = a3;
          v21 = (unint64_t)a4;
LABEL_62:
          if (a4 != (char *)v21)
          {
            v198 = 85 * (v20 - a3)
                 - 0x5555555555555555 * ((uint64_t)(v21 - (_QWORD)*v20) >> 4)
                 + 0x5555555555555555 * ((a4 - (_BYTE *)*a3) >> 4);
            v204 = (void **)v26;
            __dst = (char *)v27;
            v201 = (void **)a5;
            v202 = a9;
            v199 = a8;
            v200 = a10;
            if ((char *)v27 == a4)
              goto LABEL_92;
            goto LABEL_64;
          }
          v198 = 0;
          v21 = (unint64_t)a4;
          v204 = (void **)v26;
          __dst = (char *)v27;
          v201 = (void **)a5;
          v202 = a9;
          v199 = a8;
          v200 = a10;
          if ((char *)v27 != a4)
            goto LABEL_64;
LABEL_92:
          a4 = (char *)v21;
          a3 = v20;
          goto LABEL_230;
        }
        v26 = &v14[v36 / 0x55uLL];
        v27 = *v26 + 48 * (v36 % 0x55uLL);
      }
      v197 = v35;
      if (a4 == a6)
        goto LABEL_61;
      goto LABEL_38;
    }
    if (a8 >= 0)
      v18 = a8;
    else
      v18 = a8 + 1;
    v19 = v18 >> 1;
    if ((unint64_t)(a8 + 1) > 2)
    {
      v45 = v19 - 0x5555555555555555 * ((a4 - (_BYTE *)*a3) >> 4);
      if (v45 < 1)
      {
        v46 = 84 - v45;
        v20 = &a3[-(v46 / 0x55)];
        v21 = (unint64_t)*v20 + 48 * (85 * (v46 / 0x55) - v46) + 4032;
        v198 = v19;
        if (a4 == a2)
        {
LABEL_53:
          v197 = 0;
          a2 = a4;
          v204 = (void **)v206;
          __dst = a4;
          v201 = (void **)a5;
          v202 = a9;
          v199 = a8;
          v200 = a10;
          goto LABEL_92;
        }
      }
      else
      {
        v20 = &a3[v45 / 0x55uLL];
        v21 = (unint64_t)*v20 + 48 * (v45 % 0x55uLL);
        v198 = v19;
        if (a4 == a2)
          goto LABEL_53;
      }
    }
    else
    {
      v20 = a3;
      v21 = (unint64_t)a4;
      v198 = v18 >> 1;
      if (a4 == a2)
        goto LABEL_53;
    }
    v22 = *v206;
    v23 = 0x5555555555555555 * ((uint64_t)&a2[-*v206] >> 4);
    v24 = 85 * (a3 - (void **)v206) - 0x5555555555555555 * ((a4 - (_BYTE *)*a3) >> 4) + v23;
    if (!v24)
    {
      v197 = 0;
      v26 = v206;
      goto LABEL_91;
    }
    v25 = *(_QWORD *)(v21 + 40);
    v26 = v206;
    v27 = (unint64_t)a2;
    do
    {
      v28 = v24 >> 1;
      v29 = v27;
      v30 = v26;
      if (v24 == 1)
      {
        if (*(_QWORD *)(v27 + 40) > v25)
          goto LABEL_20;
      }
      else
      {
        v31 = v28 - 0x5555555555555555 * ((uint64_t)(v27 - v22) >> 4);
        if (v31 < 1)
        {
          v32 = 84 - v31;
          v30 = &v26[-(v32 / 0x55)];
          v29 = *v30 + 48 * (85 * (v32 / 0x55) - v32) + 4032;
          if (*(_QWORD *)(v29 + 40) > v25)
            goto LABEL_20;
        }
        else
        {
          v30 = &v26[v31 / 0x55uLL];
          v29 = *v30 + 48 * (v31 % 0x55uLL);
          if (*(_QWORD *)(v29 + 40) > v25)
            goto LABEL_20;
        }
      }
      v27 = v29 + 48;
      v22 = *v30;
      if (v29 + 48 - *v30 == 4080)
      {
        v33 = v30[1];
        ++v30;
        v22 = v33;
        v27 = v33;
      }
      v28 = v24 + ~v28;
      v26 = v30;
LABEL_20:
      v24 = v28;
    }
    while (v28);
    if ((char *)v27 == a2)
    {
      v197 = 0;
LABEL_91:
      v27 = (unint64_t)a2;
      v204 = (void **)v26;
      __dst = a2;
      v201 = (void **)a5;
      v202 = a9;
      v199 = a8;
      v200 = a10;
      if (a2 == a4)
        goto LABEL_92;
      goto LABEL_64;
    }
    v197 = v23 - 0x5555555555555555 * ((uint64_t)(v27 - v22) >> 4) + 85 * (v26 - v206);
    v204 = (void **)v26;
    __dst = (char *)v27;
    v201 = (void **)a5;
    v202 = a9;
    v199 = a8;
    v200 = a10;
    if ((char *)v27 == a4)
      goto LABEL_92;
LABEL_64:
    if (a4 == (char *)v21)
    {
      a4 = (char *)v27;
      a3 = (void **)v26;
      goto LABEL_230;
    }
    v48 = (char *)*v26;
    v49 = v27 - *v26;
    v50 = v49 >> 4;
    v51 = 0xAAAAAAAAAAAAAAABLL * (v49 >> 4);
    v205 = v20;
    if (v49 < -47)
    {
      v61 = (83 - v51) / 0x55;
      v52 = (void **)&v26[-v61];
      v53 = (char *)*v52;
      if ((char *)*v52 + 4080 * v61 + 48 * v51 + 48 == a4)
        goto LABEL_75;
LABEL_67:
      v54 = a4 - (_BYTE *)*a3;
      v55 = 0xAAAAAAAAAAAAAAABLL * (v54 >> 4);
      if (v54 >= -47)
      {
        v56 = __dst;
        if ((char *)a3[(v55 + 1) / 0x55] + 48 * ((v55 + 1) % 0x55) != (void *)v21)
          goto LABEL_69;
LABEL_88:
        v67 = (char *)*v20;
        v68 = v21 - (_QWORD)*v20;
        v69 = 0xAAAAAAAAAAAAAAABLL * (v68 >> 4);
        if (v68 < 49)
        {
          v90 = 85 - v69;
          v71 = &v20[-(v90 / 0x55)];
          v72 = (char *)*v71;
          v73 = (char *)*v71 + 48 * (85 * (v90 / 0x55) - v90) + 4032;
        }
        else
        {
          v70 = v69 - 1;
          v71 = &v20[v70 / 0x55];
          v72 = (char *)*v71;
          v73 = (char *)*v71 + 48 * (v70 % 0x55);
        }
        v210 = *(_OWORD *)v73;
        v215 = *((_OWORD *)v73 + 1);
        v219 = *((_OWORD *)v73 + 2);
        if (v71 == v204)
        {
          a3 = v20;
          if (v73 == __dst)
          {
            a4 = (char *)v21;
          }
          else
          {
            for (i = v21; ; i = (unint64_t)(v98 + 4080))
            {
              v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(i - (_QWORD)v67) >> 4);
              if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v73 - __dst) >> 4)) < v97)
                v97 = 0xAAAAAAAAAAAAAAABLL * ((v73 - __dst) >> 4);
              v73 -= 48 * v97;
              a4 = (char *)(i - 48 * v97);
              if (v97)
                memmove(a4, v73, 48 * v97);
              if (v73 == __dst)
                break;
              v98 = (char *)*--a3;
              v67 = v98;
            }
            if ((char *)*a3 + 4080 == a4)
            {
              v112 = (char *)a3[1];
              ++a3;
              a4 = v112;
            }
          }
          v106 = __dst;
        }
        else
        {
          v196 = v71;
          a3 = v20;
          if (v72 == v73)
          {
            a4 = (char *)v21;
          }
          else
          {
            for (j = v21; ; j = (unint64_t)(v93 + 4080))
            {
              v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(j - (_QWORD)v67) >> 4);
              if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v73 - v72) >> 4)) < v92)
                v92 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v72) >> 4);
              v73 -= 48 * v92;
              a4 = (char *)(j - 48 * v92);
              if (v92)
                memmove(a4, v73, 48 * v92);
              if (v73 == v72)
                break;
              v93 = (char *)*--a3;
              v67 = v93;
            }
            v67 = (char *)*a3;
            if ((char *)*a3 + 4080 == a4)
            {
              v94 = (char *)a3[1];
              ++a3;
              v67 = v94;
              a4 = v94;
            }
          }
          v99 = v204;
          for (k = v196 - 1; k != v99; --k)
          {
            v101 = *k;
            v102 = (char *)*k + 4080;
            while (1)
            {
              v103 = 0xAAAAAAAAAAAAAAABLL * ((a4 - v67) >> 4);
              if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v102 - v101) >> 4)) < v103)
                v103 = 0xAAAAAAAAAAAAAAABLL * ((v102 - v101) >> 4);
              v102 -= 48 * v103;
              a4 -= 48 * v103;
              if (v103)
                memmove(a4, v102, 48 * v103);
              if (v102 == v101)
                break;
              v104 = (char *)*--a3;
              v67 = v104;
              a4 = v104 + 4080;
            }
            v67 = (char *)*a3;
            if ((char *)*a3 + 4080 == a4)
            {
              v105 = (char *)a3[1];
              ++a3;
              v67 = v105;
              a4 = v105;
            }
            v99 = v204;
            v20 = v205;
          }
          v106 = __dst;
          v107 = (char *)*v99 + 4080;
          if (v107 != __dst)
          {
            v108 = *a3;
            while (1)
            {
              v109 = 0xAAAAAAAAAAAAAAABLL * ((a4 - v108) >> 4);
              if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v107 - __dst) >> 4)) < v109)
                v109 = 0xAAAAAAAAAAAAAAABLL * ((v107 - __dst) >> 4);
              v107 -= 48 * v109;
              a4 -= 48 * v109;
              if (v109)
                memmove(a4, v107, 48 * v109);
              if (v107 == __dst)
                break;
              v110 = (char *)*--a3;
              v108 = v110;
              a4 = v110 + 4080;
            }
            if ((char *)*a3 + 4080 == a4)
            {
              v111 = (char *)a3[1];
              ++a3;
              a4 = v111;
            }
          }
        }
        *((_OWORD *)v106 + 1) = v215;
        *((_OWORD *)v106 + 2) = v219;
        *(_OWORD *)v106 = v210;
        goto LABEL_230;
      }
      v56 = __dst;
      if ((char *)a3[-((83 - v55) / 0x55)] + 4080 * ((83 - v55) / 0x55) + 48 * v55 + 48 == (void *)v21)
        goto LABEL_88;
LABEL_69:
      if (v56 != a4)
      {
        v57 = 85 * (((char *)a3 - (char *)v26) >> 3) + 0x5555555555555555 * v50 - 0x5555555555555555 * (v54 >> 4);
        if ((char *)v21 != a4)
          goto LABEL_71;
LABEL_94:
        v58 = 0;
        v59 = 0;
        v60 = v57;
        if (!v57)
          goto LABEL_95;
        do
        {
LABEL_106:
          v82 = v60;
          v60 = v59;
          v59 = v82 % v59;
        }
        while (v59);
        if (!v60)
          goto LABEL_223;
        v83 = v60 + v51;
        if (v83 < 1)
        {
          v125 = 84 - v83;
          v84 = &v26[-(v125 / 0x55)];
          v85 = *v84 + 48 * (85 * (v125 / 0x55) - v125) + 4032;
        }
        else
        {
          v84 = &v26[v83 / 0x55uLL];
          v85 = *v84 + 48 * (v83 % 0x55uLL);
        }
        while (2)
        {
          if ((char *)v85 == v56)
          {
LABEL_223:
            a4 = v56;
            a3 = (void **)v26;
            if (v58)
            {
              v145 = v58 - 0x5555555555555555 * ((uint64_t)&v56[-*v26] >> 4);
              if (v145 < 1)
              {
                v146 = 84 - v145;
                a3 = (void **)&v26[-(v146 / 0x55)];
                a4 = (char *)*a3 + 48 * (85 * (v146 / 0x55) - v146) + 4032;
              }
              else
              {
                a3 = (void **)&v26[v145 / 0x55uLL];
                a4 = (char *)*a3 + 48 * (v145 % 0x55uLL);
              }
            }
            goto LABEL_230;
          }
          if (v85 == *v84)
          {
            v126 = *--v84;
            v85 = v126 + 4080;
          }
          v127 = *(_OWORD *)(v85 - 48);
          v128 = *(_OWORD *)(v85 - 32);
          v129 = *(_OWORD *)(v85 - 16);
          v85 -= 48;
          v220 = v129;
          v211 = v127;
          v130 = (_OWORD *)v85;
          v131 = v84;
          if (v57)
          {
            v132 = v57 - 0x5555555555555555 * ((uint64_t)(v85 - *v84) >> 4);
            if (v132 < 1)
            {
              v133 = 84 - v132;
              v131 = &v84[-(v133 / 0x55)];
              v130 = (_OWORD *)(*v131 + 48 * (85 * (v133 / 0x55) - v133) + 4032);
            }
            else
            {
              v131 = &v84[v132 / 0x55uLL];
              v130 = (_OWORD *)(*v131 + 48 * (v132 % 0x55uLL));
            }
          }
          v134 = (_OWORD *)v85;
LABEL_210:
          v135 = v130;
          v136 = *v130;
          v137 = v130[2];
          v134[1] = v130[1];
          v134[2] = v137;
          *v134 = v136;
          if (v130 == (_OWORD *)v21)
          {
            v140 = v57;
            v139 = v57 == 0;
            if (v57 >= 0)
              goto LABEL_216;
LABEL_212:
            if (!v57)
            {
              v130 = v135;
              goto LABEL_209;
            }
            v141 = v57 - 0x5555555555555555 * ((uint64_t)((uint64_t)v135 - *v131) >> 4);
            if (v141 >= 1)
            {
              v142 = v141 / 0x55uLL;
              v131 += v141 / 0x55uLL;
              goto LABEL_219;
            }
            v143 = 84 - v141;
            v144 = v143 / 0x55;
            v131 -= v143 / 0x55;
          }
          else
          {
            v138 = 85 * (((char *)v20 - (char *)v131) >> 3)
                 - 0x5555555555555555 * ((uint64_t)(v21 - (_QWORD)*v20) >> 4)
                 + 0x5555555555555555 * ((uint64_t)((uint64_t)v130 - *v131) >> 4);
            v140 = v57 - v138;
            v139 = v57 == v138;
            if (v57 < v138)
              goto LABEL_212;
LABEL_216:
            v130 = v56;
            v131 = v26;
            if (v139)
              goto LABEL_209;
            v141 = v140 - 0x5555555555555555 * ((uint64_t)&v56[-*v26] >> 4);
            if (v141 >= 1)
            {
              v142 = v141 / 0x55uLL;
              v131 = &v26[v141 / 0x55uLL];
LABEL_219:
              v130 = (_OWORD *)(*v131 + 48 * (v141 - 85 * v142));
LABEL_209:
              v134 = v135;
              if (v130 == (_OWORD *)v85)
              {
                v135[1] = v128;
                v135[2] = v220;
                *v135 = v211;
                continue;
              }
              goto LABEL_210;
            }
            v143 = 84 - v141;
            v144 = v143 / 0x55;
            v131 = &v26[-(v143 / 0x55)];
          }
          break;
        }
        v130 = (_OWORD *)(*v131 + 48 * (85 * v144 - v143) + 4032);
        goto LABEL_209;
      }
      v57 = 0;
      if ((char *)v21 == a4)
        goto LABEL_94;
LABEL_71:
      v58 = 85 * (v20 - a3)
          + 0x5555555555555555 * (v54 >> 4)
          - 0x5555555555555555 * ((uint64_t)(v21 - (_QWORD)*v20) >> 4);
      v59 = v58;
      v60 = v57;
      if (v57 != v58)
        goto LABEL_106;
LABEL_95:
      if (v56 == a4 || (char *)v21 == a4)
        goto LABEL_230;
      v74 = v56;
      v75 = v26;
      v76 = a3;
      v77 = a4;
      while (2)
      {
        v214 = *((_OWORD *)v74 + 1);
        v218 = *((_OWORD *)v74 + 2);
        v209 = *(_OWORD *)v74;
        v78 = *(_OWORD *)v77;
        v79 = *((_OWORD *)v77 + 2);
        *((_OWORD *)v74 + 1) = *((_OWORD *)v77 + 1);
        *((_OWORD *)v74 + 2) = v79;
        *(_OWORD *)v74 = v78;
        v74 += 48;
        *((_OWORD *)v77 + 1) = v214;
        *((_OWORD *)v77 + 2) = v218;
        *(_OWORD *)v77 = v209;
        if (&v74[-*v75] == (char *)4080)
        {
          v80 = (char *)v75[1];
          ++v75;
          v74 = v80;
          v77 += 48;
          if (v77 - (_BYTE *)*v76 != 4080)
          {
LABEL_100:
            if (v74 == a4)
              goto LABEL_230;
            goto LABEL_104;
          }
        }
        else
        {
          v77 += 48;
          if (v77 - (_BYTE *)*v76 != 4080)
            goto LABEL_100;
        }
        v81 = (char *)v76[1];
        ++v76;
        v77 = v81;
        if (v74 == a4)
          goto LABEL_230;
LABEL_104:
        if (v77 == (char *)v21)
          goto LABEL_230;
        continue;
      }
    }
    v52 = (void **)&v26[(v51 + 1) / 0x55];
    v53 = (char *)*v52;
    if ((char *)*v52 + 48 * ((v51 + 1) % 0x55) != a4)
      goto LABEL_67;
LABEL_75:
    v213 = *((_OWORD *)__dst + 1);
    v217 = *((_OWORD *)__dst + 2);
    v208 = *(_OWORD *)__dst;
    if (v52 == v20)
    {
      if ((char *)v21 == a4)
      {
        a3 = (void **)v26;
        a4 = __dst;
      }
      else
      {
        a3 = (void **)(v26 + 1);
        for (m = __dst; ; m = v89)
        {
          v87 = 0xAAAAAAAAAAAAAAABLL * ((v48 - m + 4080) >> 4);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)a4) >> 4)) >= v87)
            v88 = v87;
          else
            v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)a4) >> 4);
          if (v88)
            memmove(m, a4, 48 * v88);
          a4 += 48 * v88;
          if (a4 == (char *)v21)
            break;
          v89 = (char *)*a3++;
          v48 = v89;
        }
        a4 = &m[48 * v88];
        v95 = a3 - 1;
        if ((char *)*(a3 - 1) + 4080 == a4)
          goto LABEL_135;
LABEL_194:
        a3 = v95;
LABEL_195:
        v20 = v205;
      }
    }
    else
    {
      v62 = v53 + 4080;
      if (v53 + 4080 == a4)
      {
        a3 = (void **)v26;
        a4 = __dst;
      }
      else
      {
        a3 = (void **)(v26 + 1);
        for (n = __dst; ; n = v66)
        {
          v64 = 0xAAAAAAAAAAAAAAABLL * ((v48 - n + 4080) >> 4);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v62 - a4) >> 4)) >= v64)
            v65 = v64;
          else
            v65 = 0xAAAAAAAAAAAAAAABLL * ((v62 - a4) >> 4);
          if (v65)
            memmove(n, a4, 48 * v65);
          a4 += 48 * v65;
          if (a4 == v62)
            break;
          v66 = (char *)*a3++;
          v48 = v66;
        }
        a4 = &n[48 * v65];
        v48 = (char *)*(a3 - 1);
        if (v48 + 4080 == a4)
        {
          v48 = (char *)*a3;
          a4 = (char *)*a3;
        }
        else
        {
          --a3;
        }
      }
      v20 = v205;
      for (ii = v52 + 1; ii != v20; ++ii)
      {
        v114 = 0;
        v115 = (char *)*ii;
        for (++a3; ; ++a3)
        {
          v116 = 0xAAAAAAAAAAAAAAABLL * ((v48 - a4 + 4080) >> 4);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((4080 - 48 * v114) >> 4)) >= v116)
            v117 = v116;
          else
            v117 = 0xAAAAAAAAAAAAAAABLL * ((4080 - 48 * v114) >> 4);
          if (v117)
            memmove(a4, &v115[48 * v114], 48 * v117);
          v114 += v117;
          if (v114 == 85)
            break;
          v118 = (char *)*a3;
          v48 = v118;
          a4 = v118;
        }
        a4 += 48 * v117;
        v48 = (char *)*(a3 - 1);
        if (v48 + 4080 == a4)
        {
          v48 = (char *)*a3;
          a4 = (char *)*a3;
        }
        else
        {
          --a3;
        }
        v20 = v205;
      }
      v119 = (char *)*v20;
      if (*v20 != (void *)v21)
      {
        v121 = (char *)*a3++;
        v120 = v121;
        while (1)
        {
          v122 = 0xAAAAAAAAAAAAAAABLL * ((v120 - a4 + 4080) >> 4);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v119) >> 4)) >= v122)
            v123 = v122;
          else
            v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v119) >> 4);
          if (v123)
            memmove(a4, v119, 48 * v123);
          v119 += 48 * v123;
          if (v119 == (char *)v21)
            break;
          v124 = (char *)*a3++;
          v120 = v124;
          a4 = v124;
        }
        a4 += 48 * v123;
        v95 = a3 - 1;
        if ((char *)*(a3 - 1) + 4080 != a4)
          goto LABEL_194;
LABEL_135:
        a4 = (char *)*a3;
        goto LABEL_195;
      }
    }
    *(_OWORD *)a4 = v208;
    *((_OWORD *)a4 + 1) = v213;
    *((_OWORD *)a4 + 2) = v217;
LABEL_230:
    v147 = v199 - v198;
    if (v197 + v198 >= v199 - (v197 + v198) + a7)
    {
      std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(a3, a4, v20, v21, v201, v203, a7 - v197, v199 - v198, v202, v200);
      v20 = v204;
      v21 = (unint64_t)__dst;
      v147 = v198;
      a7 = v197;
      v201 = a3;
      v203 = a4;
    }
    else
    {
      a7 -= v197;
      std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::SimulatedNetwork::UpdateCapacityQueue(webrtc::SimulatedNetwork::ConfigState,webrtc::Timestamp)::$_0 &,std::__deque_iterator<webrtc::SimulatedNetwork::PacketInfo,webrtc::SimulatedNetwork::PacketInfo*,webrtc::SimulatedNetwork::PacketInfo&,webrtc::SimulatedNetwork::PacketInfo**,long,85l>>(v206, a2, v204, __dst, a3, a4, v197, v198, v202, v200);
      v206 = a3;
      a2 = a4;
    }
    a8 = v147;
    a4 = (char *)v21;
    a3 = v20;
    a9 = v202;
    a6 = v203;
    a10 = v200;
    a5 = v201;
    v14 = v206;
    result = 0x5555555555555555;
  }
  while (v147);
  return result;
}

unint64_t cricket::LimitSimulcastLayerCount(int a1, int a2, unint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  _QWORD *p_p;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  int *v17;
  unint64_t v18;
  char v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v32;
  unint64_t v33;
  unsigned __int8 v34;
  void *__p;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39[2];
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a5 + 16))(&__p, a5, "WebRTC-LegacySimulcastLayerLimit", 32);
  if (SHIBYTE(v37) < 0)
  {
    v13 = (unint64_t)v36;
    if (((unint64_t)v36 & 0x8000000000000000) != 0)
      goto LABEL_51;
    p_p = __p;
    if (v36)
    {
      if (!__p)
        goto LABEL_51;
    }
  }
  else
  {
    p_p = &__p;
    v13 = HIBYTE(v37);
  }
  if (v13 >= 8)
  {
    v14 = *p_p == 0x64656C6261736944;
    if ((HIBYTE(v37) & 0x80) != 0)
      goto LABEL_12;
LABEL_10:
    if (!v14)
      goto LABEL_13;
    return a4;
  }
  v14 = 0;
  if ((HIBYTE(v37) & 0x80) == 0)
    goto LABEL_10;
LABEL_12:
  operator delete(__p);
  if (v14)
    return a4;
LABEL_13:
  __p = off_24C0B4170;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v40 = 9;
  if (v39 <= (void **)"max_ratio" && (char *)&v39[1] + 1 > "max_ratio")
    goto LABEL_51;
  strcpy((char *)v39, "max_ratio");
  v41 = 0;
  __p = &unk_24C0B40E0;
  LOBYTE(v42) = 0;
  LOBYTE(v43) = 0;
  v44[0] = &__p;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a5 + 16))(&v32, a5, "WebRTC-SimulcastLayerLimitRoundUp", 33);
  if ((char)v34 < 0)
  {
    v15 = v33;
    if ((v33 & 0x8000000000000000) != 0)
      goto LABEL_51;
    v16 = (char *)v32;
    if (v33)
    {
      if (!v32)
        goto LABEL_51;
    }
  }
  else
  {
    v15 = v34;
    v16 = (char *)&v32;
  }
  webrtc::ParseFieldTrial(v44, 1, v16, v15);
  if ((char)v34 < 0)
    operator delete(v32);
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a5 + 16))(&v32, a5, "WebRTC-LowresSimulcastBitrateInterpolation", 42);
  if (((char)v34 & 0x80000000) == 0)
  {
    v17 = (int *)&v32;
    v18 = v34;
    goto LABEL_27;
  }
  v18 = v33;
  if ((v33 & 0x8000000000000000) != 0 || (v17 = (int *)v32, v33) && !v32)
LABEL_51:
    __break(1u);
LABEL_27:
  if (v18 >= 7)
  {
    v20 = *v17;
    v21 = *(int *)((char *)v17 + 3);
    v19 = v20 == 1650552389 && v21 == 1684368482;
    if ((v34 & 0x80) == 0)
      goto LABEL_38;
  }
  else
  {
    v19 = 0;
    if ((v34 & 0x80) == 0)
      goto LABEL_38;
  }
  operator delete(v32);
LABEL_38:
  cricket::InterpolateSimulcastFormat((uint64_t)&v32, a1, a2, v42, v43, v19, a6);
  if (v33 > a3)
    a3 = v33;
  if (a3 >= a4)
  {
    a3 = a4;
    __p = off_24C0B4170;
    if (v40 < 0)
      goto LABEL_49;
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
    {
      __p = off_24C0B4170;
      if ((v40 & 0x80000000) == 0)
        goto LABEL_43;
LABEL_49:
      operator delete(v39[0]);
      v30 = v36;
      if (!v36)
        return a3;
      goto LABEL_44;
    }
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/config/simulcast.cc");
    __p = off_24C0B4170;
    if (v40 < 0)
      goto LABEL_49;
  }
LABEL_43:
  v30 = v36;
  if (v36)
  {
LABEL_44:
    v37 = v30;
    operator delete(v30);
  }
  return a3;
}

void cricket::InterpolateSimulcastFormat(uint64_t a1, int a2, int a3, uint64_t a4, char a5, char a6, int a7)
{
  uint64_t v14;
  int v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  double v19;
  char *v20;
  char *v21;
  double v22;
  char *v23;
  uint64_t v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v42;
  uint64_t v43;
  __int128 v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;

  if (v48 == v47)
  {
    if (v47)
LABEL_7:
      operator delete(v47);
    v15 = -1;
LABEL_10:
    v16 = v15 - 1;
    v17 = v45;
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - v45) >> 3);
    if (v18 > v16 && v18 > v15)
    {
      v19 = *(double *)&a4;
      v20 = &v45[40 * v16];
      v21 = &v45[40 * v15];
      v22 = (float)((float)(*((_DWORD *)v20 + 1) * *(_DWORD *)v20 - a3 * a2)
                  / (float)(*((_DWORD *)v20 + 1) * *(_DWORD *)v20 - *((_DWORD *)v21 + 1) * *(_DWORD *)v21));
      if (!a5)
        v19 = 0.1;
      if (v19 <= v22)
        v23 = &v45[40 * v15];
      else
        v23 = &v45[40 * v16];
      v24 = *((_QWORD *)v23 + 1);
      v25 = 1.0 - v22;
      v26 = llround((1.0 - v22) * (double)*((uint64_t *)v20 + 2));
      v27 = llround((double)*((uint64_t *)v21 + 2) * v22);
      v28 = 0x8000000000000000;
      v29 = v27 == 0x8000000000000000 || v26 == 0x8000000000000000;
      v30 = v26 + v27;
      if (v29)
        v30 = 0x8000000000000000;
      if (v26 == 0x7FFFFFFFFFFFFFFFLL || v27 == 0x7FFFFFFFFFFFFFFFLL)
        v32 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      v33 = llround(v25 * (double)*(uint64_t *)&v45[40 * v16 + 24]);
      v34 = llround(v22 * (double)*(uint64_t *)&v45[40 * v15 + 24]);
      v35 = v34 == 0x8000000000000000 || v33 == 0x8000000000000000;
      v36 = v34 + v33;
      if (v35)
        v36 = 0x8000000000000000;
      if (v33 == 0x7FFFFFFFFFFFFFFFLL || v34 == 0x7FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      v39 = llround(v25 * (double)*(uint64_t *)&v45[40 * v16 + 32]);
      v40 = llround(v22 * (double)*(uint64_t *)&v45[40 * v15 + 32]);
      if (v40 != 0x8000000000000000 && v39 != 0x8000000000000000)
        v28 = v40 + v39;
      *(_DWORD *)a1 = a2;
      *(_DWORD *)(a1 + 4) = a3;
      v42 = v39 == 0x7FFFFFFFFFFFFFFFLL || v40 == 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(a1 + 8) = v24;
      *(_QWORD *)(a1 + 16) = v32;
      if (v42)
        v43 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v43 = v28;
      *(_QWORD *)(a1 + 24) = v38;
      goto LABEL_51;
    }
    goto LABEL_54;
  }
  v14 = 0;
  v15 = 0;
  while (a3 * a2 < *(_DWORD *)&v47[40 * v14 + 4] * *(_DWORD *)&v47[40 * v14])
  {
    v14 = ++v15;
    if (0xCCCCCCCCCCCCCCCDLL * ((v48 - v47) >> 3) <= v15)
      goto LABEL_7;
  }
  operator delete(v47);
  if (v15)
    goto LABEL_10;
  v17 = v45;
  if (v46 != v45)
  {
    v44 = *((_OWORD *)v45 + 1);
    *(_OWORD *)a1 = *(_OWORD *)v45;
    *(_OWORD *)(a1 + 16) = v44;
    v43 = *((_QWORD *)v17 + 4);
LABEL_51:
    *(_QWORD *)(a1 + 32) = v43;
    operator delete(v17);
    return;
  }
LABEL_54:
  __break(1u);
}

char *cricket::GetScreenshareLayers@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, char **a6@<X8>, double a7@<D0>)
{
  int v9;
  uint64_t v10;
  char *result;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;

  if (a1 >= 2)
    v9 = 2;
  else
    v9 = a1;
  if (!v9)
    goto LABEL_29;
  v10 = v9;
  if (v9 < 0)
    goto LABEL_30;
  result = (char *)operator new(96 * v9);
  *a6 = result;
  v17 = &result[96 * v10];
  a6[2] = v17;
  v18 = result;
  do
  {
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = -1;
    *((_QWORD *)v18 + 3) = -1;
    *((_QWORD *)v18 + 4) = 0xBFF0000000000000;
    *((_DWORD *)v18 + 10) = -1;
    v18[48] = 0;
    v18[56] = 0;
    v18[64] = 0;
    v18[72] = 0;
    *((_WORD *)v18 + 40) = 0;
    v18[82] = 1;
    v18[84] = 0;
    v18[92] = 0;
    v18 += 96;
  }
  while (v18 != v17);
  a6[1] = v17;
  *(_QWORD *)result = a2;
  *((_QWORD *)result + 1) = a3;
  *((_DWORD *)result + 10) = a4;
  *((_OWORD *)result + 1) = xmmword_208F1B5E0;
  if (result[56])
  {
    if (a5)
      v19 = 2;
    else
      v19 = 1;
    *((_QWORD *)result + 6) = v19;
    if (a1 < 2)
      goto LABEL_28;
  }
  else
  {
    result[56] = 1;
    if (a5)
      v19 = 2;
    else
      v19 = 1;
    *((_QWORD *)result + 6) = v19;
    if (a1 < 2)
      goto LABEL_28;
  }
  v20 = a5 ? 1250000 : 750000;
  if (v10 <= 1)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    abort();
  }
  *((_QWORD *)result + 12) = a2;
  *((_QWORD *)result + 13) = a3;
  *((_DWORD *)result + 34) = a4;
  *((_DWORD *)result + 28) = 60;
  if (!result[152])
    result[152] = 1;
  *((_QWORD *)result + 18) = v19;
  if (a5)
    v21 = 600000;
  else
    v21 = 400000;
  *((_DWORD *)result + 29) = v21;
  *((_DWORD *)result + 30) = v20;
  *((_DWORD *)result + 31) = v20;
LABEL_28:
  *((double *)result + 8) = a7;
  result[72] = 1;
  return result;
}

void cricket::GetNormalSimulcastLayers(unint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, __int32 a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, int32x2_t **a9@<X8>, double a10@<D0>)
{
  int v16;
  int v17;
  uint64_t v18;
  int32x2_t *v19;
  char *v20;
  int32x2_t *v21;
  int *p_p;
  unint64_t v23;
  char v24;
  int v25;
  int v26;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t Base2Exponent;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  char v42;
  int v43;
  int v45;
  char *v46;
  uint64_t v47;
  float v48;
  unint64_t v49;
  char *v50;
  int32x2_t *v51;
  int v52;
  float v53;
  unsigned int v54;
  int v55;
  int v56;
  int32x2_t *v58;
  unsigned int v59;
  int v61;
  void *__p;
  unint64_t v63;
  __int32 v64;
  unsigned __int8 v65;
  uint64_t v66;
  unsigned int v67;

  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a1)
  {
    if (a1 >= 0x2AAAAAAAAAAAAABLL)
      goto LABEL_76;
    v16 = a5;
    v17 = a3;
    v18 = 12 * a1;
    v19 = (int32x2_t *)operator new(96 * a1);
    *a9 = v19;
    v20 = (char *)&v19[v18];
    a9[2] = &v19[v18];
    v21 = v19;
    do
    {
      *v21 = 0;
      v21[1] = 0;
      v21[2] = (int32x2_t)-1;
      v21[3] = (int32x2_t)-1;
      v21[4] = (int32x2_t)0xBFF0000000000000;
      v21[5].i32[0] = -1;
      v21[6].i8[0] = 0;
      v21[7].i8[0] = 0;
      v21[8].i8[0] = 0;
      v21[9].i8[0] = 0;
      v21[10].i16[0] = 0;
      v21[10].i8[2] = 1;
      v21[10].i8[4] = 0;
      v21[11].i8[4] = 0;
      v21 += 12;
    }
    while (v21 != (int32x2_t *)v20);
    a9[1] = (int32x2_t *)v20;
  }
  else
  {
    v16 = a5;
    v17 = a3;
    v19 = 0;
    v20 = 0;
  }
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a7 + 16))(&__p, a7, "WebRTC-LowresSimulcastBitrateInterpolation", 42);
  if ((char)v65 < 0)
  {
    v23 = v63;
    if ((v63 & 0x8000000000000000) != 0)
      goto LABEL_75;
    p_p = (int *)__p;
    if (v63)
    {
      if (!__p)
        goto LABEL_75;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v23 = v65;
  }
  if (v23 < 7)
  {
    v24 = 0;
    if ((v65 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  v25 = *p_p;
  v26 = *(int *)((char *)p_p + 3);
  v24 = v25 == 1650552389 && v26 == 1684368482;
  if ((v65 & 0x80) != 0)
LABEL_22:
    operator delete(__p);
LABEL_23:
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a7 + 16))(&__p, a7, "WebRTC-VP8ConferenceTemporalLayers", 34);
  if ((char)v65 < 0)
  {
    if (!v63)
    {
      v59 = 3;
      goto LABEL_39;
    }
    v61 = 3;
    v28 = (const char *)__p;
  }
  else
  {
    if (!v65)
    {
      v59 = 3;
      goto LABEL_40;
    }
    v61 = 3;
    v28 = (const char *)&__p;
  }
  if (sscanf(v28, "%d", &v61) == 1 && v61 >= 1 && v61 < 5)
  {
    v59 = v61;
    if (((char)v65 & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_39;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/config/simulcast.cc");
  v59 = 3;
  if ((char)v65 < 0)
LABEL_39:
    operator delete(__p);
LABEL_40:
  Base2Exponent = (unint64_t)webrtc::NormalizeSimulcastSizeExperiment::GetBase2Exponent(a7);
  v37 = (unint64_t)webrtc::NormalizeSimulcastSizeExperiment::GetBase2Exponent(a7);
  v38 = a1 - 1;
  v39 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (char *)v19) >> 5);
  if (v39 <= a1 - 1)
  {
LABEL_75:
    __break(1u);
LABEL_76:
    abort();
  }
  v40 = a1 - 1;
  if (1 << v37 >= v17 || (v37 & 0xFF00000000) == 0)
    v42 = a1 - 1;
  else
    v42 = v37;
  v43 = (-1 << v42) & v17;
  if (1 << Base2Exponent < a2 && (Base2Exponent & 0xFF00000000) != 0)
    v40 = Base2Exponent;
  v45 = (-1 << v40) & a2;
  v46 = (char *)&v19[12 * v38];
  *(_QWORD *)v46 = v45;
  *((_QWORD *)v46 + 1) = v43;
  *((_DWORD *)v46 + 10) = a4;
  if (v16)
    v47 = v59;
  else
    v47 = 1;
  if (a6)
    v48 = 0.66667;
  else
    v48 = 1.0;
  v49 = a1 - 2;
  v58 = v19;
  v50 = (char *)&v19[12 * a1];
  v51 = (int32x2_t *)(v50 - 80);
  v52 = v43;
  if (!*(v50 - 40))
  {
LABEL_59:
    v51[5].i8[0] = 1;
    goto LABEL_60;
  }
  while (1)
  {
LABEL_60:
    v51[4] = (int32x2_t)v47;
    cricket::InterpolateSimulcastFormat((uint64_t)&__p, v45, v52, 0, 0, v24, a8);
    v51[1].i32[1] = v64;
    cricket::InterpolateSimulcastFormat((uint64_t)&__p, v45, v52, 0, 0, v24, a8);
    v51[1].i32[0] = v66;
    if (!v38)
    {
      v53 = v48;
      if (v59 != 3)
      v58[3] = vcvt_s32_f32(vmul_n_f32(vcvt_f32_s32(v58[3]), v53));
    }
    cricket::InterpolateSimulcastFormat((uint64_t)&__p, v45, v52, 0, 0, v24, a8);
    v54 = v67;
    v51[1] = vmax_s32(v51[1], vdup_n_s32(v67));
    v51->i32[0] = 60;
    v51->i32[1] = v54;
    v55 = v45 >= 0 ? v45 : v45 + 1;
    v56 = v52 >= 0 ? v52 : v52 + 1;
    if (!v38)
      break;
    if (v49 >= v39)
      goto LABEL_75;
    v45 = v55 >> 1;
    v52 = v56 >> 1;
    --v38;
    v51[-14] = (int32x2_t)(v55 >> 1);
    v51[-13] = (int32x2_t)(v56 >> 1);
    v51[-9].i32[0] = a4;
    v51 -= 12;
    if (!v51[5].i8[0])
      goto LABEL_59;
  }
  *(double *)&v58[8] = a10;
  v58[9].i8[0] = 1;
}

void cricket::`anonymous namespace'::GetSimulcastFormats(_QWORD *a1, char a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  char *v11;
  char *v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 == 2)
  {
    if ((a2 & 1) != 0)
      return;
  }
  else
  {
    if ((a2 & 1) != 0)
      return;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3) <= 1)
  {
    v10 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/config/simulcast.cc", 171, "formats.size() >= 2u", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, v5, v6, v7, v8, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3));
  }
  else
  {
    v9 = *a1 + 8 * ((uint64_t)(a1[1] - *a1) >> 3);
    *(_OWORD *)(v9 - 24) = *(_OWORD *)(v9 - 64);
    *(_QWORD *)(v9 - 8) = *(_QWORD *)(v9 - 48);
  }
}

void std::vector<cricket::`anonymous namespace'::SimulcastFormat>::insert<cricket::`anonymous namespace'::SimulcastFormat const*,0>(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  char *v35;

  if (a3 - __src < 1)
    return;
  v3 = __src;
  v5 = (a3 - __src) / 40;
  v6 = *(char **)a1;
  v7 = *(char **)(a1 + 8);
  v8 = -*(_QWORD *)a1 / 40;
  v9 = (char *)(*(_QWORD *)a1 + 40 * v8);
  v10 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v7) >> 3)) >= v5)
  {
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v7 - v9) >> 3)) >= v5)
    {
      v16 = &__src[40 * v5];
      v18 = *(char **)(a1 + 8);
      v19 = 40 * v5;
      v20 = &v7[-40 * v5];
      v21 = v18;
      if (v20 >= v7)
        goto LABEL_22;
    }
    else
    {
      v16 = &__src[8 * ((v7 - v9) >> 3)];
      v17 = a3 - v16;
      if (a3 != v16)
        memmove(*(void **)(a1 + 8), &__src[8 * ((v7 - v9) >> 3)], a3 - v16);
      v18 = &v7[v17];
      *(_QWORD *)(a1 + 8) = &v7[v17];
      if (v7 - v9 < 1)
        return;
      v19 = 40 * v5;
      v20 = &v18[-40 * v5];
      v21 = &v7[v17];
      if (v20 >= v7)
      {
LABEL_22:
        v24 = &v9[v19];
        *(_QWORD *)(a1 + 8) = v21;
        if (v18 != v24)
          memmove(v24, v9, v18 - v24);
        if (v16 != v3)
          memmove(v9, v3, v16 - v3);
        return;
      }
    }
    v21 = v18;
    while (v21)
    {
      v22 = *(_OWORD *)v20;
      v23 = *((_OWORD *)v20 + 1);
      *((_QWORD *)v21 + 4) = *((_QWORD *)v20 + 4);
      *(_OWORD *)v21 = v22;
      *((_OWORD *)v21 + 1) = v23;
      v20 += 40;
      v21 += 40;
      if (v20 >= v7)
        goto LABEL_22;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v11 = v5 - 0x3333333333333333 * ((v7 - v6) >> 3);
  if (v11 > 0x666666666666666)
    goto LABEL_40;
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v6) >> 3);
  v13 = 2 * v12;
  if (2 * v12 <= v11)
    v13 = v11;
  if (v12 >= 0x333333333333333)
    v14 = 0x666666666666666;
  else
    v14 = v13;
  if (v14)
  {
    if (v14 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v15 = (char *)operator new(40 * v14);
  }
  else
  {
    v15 = 0;
  }
  v25 = &v15[40 * v8];
  v26 = &v15[40 * v14];
  v27 = 40 * v5;
  v28 = &v25[40 * v5];
  v29 = v25;
  do
  {
    if (!v29)
      goto LABEL_39;
    v30 = *((_OWORD *)v3 + 1);
    *(_OWORD *)v29 = *(_OWORD *)v3;
    *((_OWORD *)v29 + 1) = v30;
    *((_QWORD *)v29 + 4) = *((_QWORD *)v3 + 4);
    v29 += 40;
    v3 += 40;
    v27 -= 40;
  }
  while (v27);
  v31 = *(char **)a1;
  if (*(char **)a1 != v9)
  {
    v32 = v9;
    do
    {
      v33 = *(_OWORD *)(v32 - 40);
      v34 = *(_OWORD *)(v32 - 24);
      *((_QWORD *)v25 - 1) = *((_QWORD *)v32 - 1);
      *(_OWORD *)(v25 - 24) = v34;
      *(_OWORD *)(v25 - 40) = v33;
      v25 -= 40;
      v32 -= 40;
    }
    while (v32 != v31);
    v7 = *(char **)(a1 + 8);
  }
  if (v7 != v9)
    memmove(v28, v9, v7 - v9);
  v35 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = &v28[v7 - v9];
  *(_QWORD *)(a1 + 16) = v26;
  if (v35)
    operator delete(v35);
}

void cricket::SimulcastLayerList::AddLayer(uint64_t a1, uint64_t a2)
{
  std::string::value_type v4;
  std::string *v5;
  std::string *v6;
  std::string::value_type *v7;
  std::string **v8;
  void **v9;
  char *v10;
  void **v11;
  void *v12;
  void *__p;
  std::string::value_type *v14;
  std::string::value_type *v15;
  std::string v16;
  std::string::value_type v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v16 = *(std::string *)a2;
  v4 = *(_BYTE *)(a2 + 24);
  v17 = v4;
  v5 = (std::string *)operator new(0x20uLL);
  v6 = v5;
  v7 = &v5[1].__r_.__value_.__s.__data_[8];
  __p = v5;
  v15 = &v5[1].__r_.__value_.__s.__data_[8];
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
    v6[1].__r_.__value_.__s.__data_[0] = v17;
    v14 = v7;
    v8 = *(std::string ***)(a1 + 8);
    if ((unint64_t)v8 < *(_QWORD *)(a1 + 16))
      goto LABEL_6;
  }
  else
  {
    *v5 = v16;
    v5[1].__r_.__value_.__s.__data_[0] = v4;
    v14 = &v5[1].__r_.__value_.__s.__data_[8];
    v8 = *(std::string ***)(a1 + 8);
    if ((unint64_t)v8 < *(_QWORD *)(a1 + 16))
    {
LABEL_6:
      if (!v8)
        __break(1u);
      *v8 = v6;
      v8[1] = (std::string *)v7;
      v8[2] = (std::string *)v7;
      v14 = 0;
      v15 = 0;
      __p = 0;
      *(_QWORD *)(a1 + 8) = v8 + 3;
      goto LABEL_17;
    }
  }
  v9 = std::vector<std::vector<cricket::SimulcastLayer>>::__push_back_slow_path<std::vector<cricket::SimulcastLayer>>((void ***)a1, (uint64_t)&__p);
  v10 = (char *)__p;
  *(_QWORD *)(a1 + 8) = v9;
  if (v10)
  {
    v11 = (void **)v14;
    v12 = v10;
    if (v14 != v10)
    {
      do
      {
        if (*((char *)v11 - 9) < 0)
          operator delete(*(v11 - 4));
        v11 -= 4;
      }
      while (v11 != (void **)v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
LABEL_17:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

_QWORD *cricket::SimulcastLayerList::AddLayerWithAlternatives(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  std::string *v10;
  __int128 *v11;
  __int128 v12;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v3 < *(_QWORD *)(a1 + 16))
  {
    if (v3)
    {
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      v4 = *a2;
      v5 = a2[1];
      v6 = v5 - *a2;
      if (v5 == *a2)
      {
LABEL_12:
        result = v3 + 3;
        goto LABEL_13;
      }
      if ((v6 & 0x8000000000000000) == 0)
      {
        v7 = v6 >> 5;
        v8 = operator new(v6);
        v9 = 0;
        *v3 = v8;
        v3[1] = v8;
        v3[2] = &v8[32 * v7];
        do
        {
          v10 = (std::string *)&v8[v9];
          v11 = (__int128 *)(v4 + v9);
          if (*(char *)(v4 + v9 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
          }
          else
          {
            v12 = *v11;
            v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
            *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
          }
          v8[v9 + 24] = *(_BYTE *)(v4 + v9 + 24);
          v9 += 32;
        }
        while (v4 + v9 != v5);
        v3[1] = &v8[v9];
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    abort();
  }
  result = std::vector<std::vector<cricket::SimulcastLayer>>::__push_back_slow_path<std::vector<cricket::SimulcastLayer> const&>(a1, a2);
LABEL_13:
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void cricket::SimulcastLayerList::GetAllLayers(__int128 ***this@<X0>, std::string **a2@<X8>)
{
  __int128 **v3;
  __int128 **v4;
  std::string *v5;
  __int128 *v6;
  unint64_t v7;
  __int128 v8;
  std::string *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  std::string *v20;
  std::string *v21;
  unint64_t v22;
  __int128 v23;
  std::string *v24;
  const std::string::value_type **v25;
  std::string *v26;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *this;
  v3 = this[1];
  if (*this != v3)
  {
    v5 = 0;
    do
    {
      v6 = *v4;
      if (*v4 != v4[1])
      {
        do
        {
          while (1)
          {
            v7 = (unint64_t)a2[2];
            if ((unint64_t)v5 >= v7)
              break;
            if (!v5)
              goto LABEL_40;
            if (*((char *)v6 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
            }
            else
            {
              v8 = *v6;
              v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
              *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
            }
            v5[1].__r_.__value_.__s.__data_[0] = *((_BYTE *)v6 + 24);
            v5 = (std::string *)((char *)v5 + 32);
            a2[1] = v5;
            v6 += 2;
            if (v6 == v4[1])
              goto LABEL_3;
          }
          v9 = *a2;
          v10 = ((char *)v5 - (char *)*a2) >> 5;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 59)
            goto LABEL_41;
          v12 = v7 - (_QWORD)v9;
          if (v12 >> 4 > v11)
            v11 = v12 >> 4;
          v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0;
          v14 = 0x7FFFFFFFFFFFFFFLL;
          if (!v13)
            v14 = v11;
          if (!v14)
          {
LABEL_40:
            __break(1u);
LABEL_41:
            abort();
          }
          if (v14 >> 59)
            std::__throw_bad_array_new_length[abi:sn180100]();
          v15 = 32 * v14;
          v16 = (char *)operator new(32 * v14);
          v17 = v16;
          v18 = &v16[32 * v10];
          if (*((char *)v6 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v16[32 * v10], *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
          }
          else
          {
            v19 = *v6;
            *((_QWORD *)v18 + 2) = *((_QWORD *)v6 + 2);
            *(_OWORD *)v18 = v19;
          }
          v20 = (std::string *)&v17[v15];
          v17[32 * v10 + 24] = *((_BYTE *)v6 + 24);
          v21 = (std::string *)(v18 + 32);
          if (v5 == v9)
          {
            *a2 = (std::string *)v18;
            a2[1] = v21;
            a2[2] = v20;
          }
          else
          {
            v22 = 0;
            do
            {
              v24 = (std::string *)&v18[v22 - 32];
              v25 = (const std::string::value_type **)((char *)&v5[-1] + v22 - 8);
              if (v5->__r_.__value_.__s.__data_[v22 - 9] < 0)
              {
                std::string::__init_copy_ctor_external(v24, *v25, v5[-1].__r_.__value_.__r.__words[v22 / 8]);
              }
              else
              {
                v23 = *(_OWORD *)v25;
                *(_QWORD *)&v18[v22 - 16] = *(_QWORD *)((char *)&v5->__r_.__value_.__l + v22 - 16);
                *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v23;
              }
              v18[v22 - 8] = v5->__r_.__value_.__s.__data_[v22 - 8];
              v22 -= 32;
            }
            while ((std::string *)((char *)v5 + v22) != v9);
            v5 = *a2;
            v26 = a2[1];
            *a2 = (std::string *)&v18[v22];
            a2[1] = v21;
            a2[2] = v20;
            while (v26 != v5)
            {
              if (v26[-1].__r_.__value_.__s.__data_[15] < 0)
                operator delete((void *)v26[-2].__r_.__value_.__r.__words[2]);
              v26 = (std::string *)((char *)v26 - 32);
            }
          }
          if (v5)
            operator delete(v5);
          v5 = (std::string *)(v18 + 32);
          a2[1] = v21;
          v6 += 2;
        }
        while (v6 != v4[1]);
LABEL_3:
        v3 = this[1];
      }
      v4 += 3;
    }
    while (v4 != v3);
  }
}

void **std::vector<std::vector<cricket::SimulcastLayer>>::__push_back_slow_path<std::vector<cricket::SimulcastLayer>>(void ***a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  void **v9;
  char *v10;
  void **v11;
  void **v12;
  void **v13;
  __int128 v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void **v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (a1[2] - *a1) > v3)
    v3 = 0x5555555555555556 * (a1[2] - *a1);
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_28:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_28;
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = (void **)&v8[v7];
  v10 = &v8[24 * v2];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = (void **)(v10 + 24);
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = (void **)v10;
    a1[1] = v11;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 3);
      v13 -= 3;
      *(_OWORD *)(v10 - 24) = v14;
      v10 -= 24;
      *((_QWORD *)v10 + 2) = v13[2];
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = (void **)v10;
    a1[1] = v11;
    a1[2] = v9;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v19 = (void **)*(v16 - 3);
        v16 -= 3;
        v18 = v19;
        if (v19)
        {
          v20 = (void **)*(v15 - 2);
          v17 = v18;
          if (v20 != v18)
          {
            do
            {
              if (*((char *)v20 - 9) < 0)
                operator delete(*(v20 - 4));
              v20 -= 4;
            }
            while (v20 != v18);
            v17 = *v16;
          }
          *(v15 - 2) = v18;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

_QWORD *std::vector<std::vector<cricket::SimulcastLayer>>::__push_back_slow_path<std::vector<cricket::SimulcastLayer> const&>(uint64_t a1, uint64_t *a2)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  char *v20;
  _QWORD *v21;
  __int128 v22;
  void **v23;
  void **v24;
  void *v25;
  void **v26;
  void **v27;
  void **v28;
  char *v30;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_33;
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  if (!v5)
  {
    __break(1u);
LABEL_35:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_35;
  v8 = 24 * v5;
  v9 = (char *)operator new(24 * v5);
  v10 = &v9[24 * v4];
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v12 = *a2;
  v11 = a2[1];
  v13 = v11 - v12;
  if (v11 == v12)
    goto LABEL_16;
  v30 = v9;
  if (v13 < 0)
LABEL_33:
    abort();
  v14 = v13 >> 5;
  v15 = operator new(v13);
  v16 = 0;
  *(_QWORD *)v10 = v15;
  *((_QWORD *)v10 + 2) = &v15[32 * v14];
  do
  {
    v17 = (std::string *)&v15[v16];
    v18 = (__int128 *)(v12 + v16);
    if (*(char *)(v12 + v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
    }
    else
    {
      v19 = *v18;
      v17->__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
    }
    v15[v16 + 24] = *(_BYTE *)(v12 + v16 + 24);
    v16 += 32;
  }
  while (v12 + v16 != v11);
  *((_QWORD *)v10 + 1) = &v15[v16];
  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v9 = v30;
LABEL_16:
  v20 = &v9[v8];
  v21 = v10 + 24;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v21;
    *(_QWORD *)(a1 + 16) = v20;
  }
  else
  {
    do
    {
      v22 = *(_OWORD *)(v3 - 3);
      v3 -= 3;
      *(_OWORD *)(v10 - 24) = v22;
      v10 -= 24;
      *((_QWORD *)v10 + 2) = v3[2];
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
    }
    while (v3 != v2);
    v2 = *(void ***)a1;
    v23 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v21;
    *(_QWORD *)(a1 + 16) = v20;
    if (v23 != v2)
    {
      v24 = v23;
      do
      {
        v27 = (void **)*(v24 - 3);
        v24 -= 3;
        v26 = v27;
        if (v27)
        {
          v28 = (void **)*(v23 - 2);
          v25 = v26;
          if (v28 != v26)
          {
            do
            {
              if (*((char *)v28 - 9) < 0)
                operator delete(*(v28 - 4));
              v28 -= 4;
            }
            while (v28 != v26);
            v25 = *v24;
          }
          *(v23 - 2) = v26;
          operator delete(v25);
        }
        v23 = v24;
      }
      while (v24 != v2);
    }
  }
  if (v2)
    operator delete(v2);
  return v21;
}

void webrtc::SimulcastEncoderAdapter::StreamContext::~StreamContext(webrtc::SimulcastEncoderAdapter::StreamContext *this)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;

  *(_QWORD *)this = &off_24C0C0D68;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 && *v2)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 48))(*v2);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 40))(*v2, 0);
  }
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    MEMORY[0x20BD0ADEC](v3, 0x1000C4057661CB1);
  v4 = (void **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v4 + 33);
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v4 + 2);
    v5 = *v4;
    *v4 = 0;
    if (v5)
      (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
    MEMORY[0x20BD0ADEC](v4, 0x10B2C400EB17E4BLL);
  }
}

{
  webrtc::SimulcastEncoderAdapter::StreamContext::~StreamContext(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::SimulcastEncoderAdapter::StreamContext::OnEncodedImage(webrtc::SimulcastEncoderAdapter::StreamContext *this, const webrtc::EncodedImage *a2, const webrtc::CodecSpecificInfo *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void (***v16)(_QWORD);
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  void **v23;
  void **v24;
  void *v25;
  _OWORD v27[8];
  char v28;
  void (***v29)(_QWORD);
  __int128 v30;
  __int128 v31;
  _BYTE v32[21];
  _QWORD *v33;
  _QWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  char v40;
  int v41;
  unsigned int *v42;
  __int16 v43;
  _BYTE __dst[1640];
  char v45[8];
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  void *v54;
  char v55;
  _BYTE v56[24];
  void *v57;
  char v58;
  void *v59;
  void *__p;
  void **v61;
  char v62;
  __int16 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)this + 1);
  if (!v8)
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc", 225, "parent_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, *(uint64_t *)&v27[0]);
  v11 = *((_DWORD *)this + 8);
  v12 = *((_OWORD *)a2 + 7);
  v27[6] = *((_OWORD *)a2 + 6);
  v27[7] = v12;
  v28 = *((_BYTE *)a2 + 128);
  v13 = *((_OWORD *)a2 + 3);
  v27[2] = *((_OWORD *)a2 + 2);
  v27[3] = v13;
  v14 = *((_OWORD *)a2 + 5);
  v27[4] = *((_OWORD *)a2 + 4);
  v27[5] = v14;
  v15 = *((_OWORD *)a2 + 1);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v15;
  v16 = (void (***)(_QWORD))*((_QWORD *)a2 + 17);
  v29 = v16;
  if (v16)
    (**v16)(v16);
  v17 = *((_OWORD *)a2 + 10);
  v30 = *((_OWORD *)a2 + 9);
  v31 = v17;
  *(_OWORD *)v32 = *((_OWORD *)a2 + 11);
  *(_QWORD *)&v32[13] = *(_QWORD *)((char *)a2 + 189);
  v34[0] = 0;
  v34[1] = 0;
  v33 = v34;
  std::map<int,unsigned long>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>((uint64_t *)&v33, *((int **)a2 + 25), (int *)a2 + 52);
  LOBYTE(v35) = 0;
  v40 = 0;
  if (*((_BYTE *)a2 + 292))
  {
    v18 = *((_OWORD *)a2 + 17);
    v37 = *((_OWORD *)a2 + 16);
    v38 = v18;
    v39 = *((_BYTE *)a2 + 288);
    v19 = *((_OWORD *)a2 + 15);
    v35 = *((_OWORD *)a2 + 14);
    v36 = v19;
    v40 = 1;
  }
  v41 = *((_DWORD *)a2 + 74);
  v20 = (unsigned int *)*((_QWORD *)a2 + 38);
  v42 = v20;
  if (v20)
  {
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v43 = *((_WORD *)a2 + 156);
  memcpy(__dst, a3, 0x661uLL);
  v45[0] = 0;
  v55 = 0;
  if (*((_BYTE *)a3 + 1848))
  {
    webrtc::GenericFrameInfo::GenericFrameInfo((webrtc::GenericFrameInfo *)v45, (const webrtc::CodecSpecificInfo *)((char *)a3 + 1640));
    v55 = 1;
  }
  v56[0] = 0;
  v62 = 0;
  if (*((_BYTE *)a3 + 1984))
  {
    webrtc::FrameDependencyStructure::FrameDependencyStructure((webrtc::FrameDependencyStructure *)v56, (const webrtc::CodecSpecificInfo *)((char *)a3 + 1856));
    v62 = 1;
  }
  v63 = *((_WORD *)a3 + 996);
  HIDWORD(v30) = v11;
  LOBYTE(v31) = 1;
  v22 = (*(uint64_t (**)(_QWORD, _OWORD *, _BYTE *))(**(_QWORD **)(v8 + 584) + 16))(*(_QWORD *)(v8 + 584), v27, __dst);
  if (v62)
  {
    v23 = (void **)__p;
    if (!__p)
    {
LABEL_26:
      if ((v58 & 1) != 0)
        operator delete(v59);
      if ((v56[16] & 1) != 0)
        operator delete(v57);
      goto LABEL_30;
    }
    v24 = v61;
    v25 = __p;
    if (v61 == __p)
    {
LABEL_25:
      v61 = v23;
      operator delete(v25);
      goto LABEL_26;
    }
    while (1)
    {
      if ((*(_BYTE *)(v24 - 3) & 1) != 0)
      {
        operator delete(*(v24 - 2));
        if ((*(_BYTE *)(v24 - 6) & 1) == 0)
        {
LABEL_19:
          if ((*(_BYTE *)(v24 - 12) & 1) != 0)
            goto LABEL_23;
          goto LABEL_16;
        }
      }
      else if ((*(_BYTE *)(v24 - 6) & 1) == 0)
      {
        goto LABEL_19;
      }
      operator delete(*(v24 - 5));
      if ((*(_BYTE *)(v24 - 12) & 1) != 0)
LABEL_23:
        operator delete(*(v24 - 11));
LABEL_16:
      v24 -= 13;
      if (v24 == v23)
      {
        v25 = __p;
        goto LABEL_25;
      }
    }
  }
LABEL_30:
  if (!v55)
    goto LABEL_38;
  if (v54)
    operator delete(v54);
  if ((v52 & 1) != 0)
  {
    operator delete(v53);
    if ((v50 & 1) == 0)
    {
LABEL_35:
      if ((v48 & 1) == 0)
        goto LABEL_36;
LABEL_41:
      operator delete(v49);
      if ((v46 & 1) == 0)
        goto LABEL_38;
      goto LABEL_37;
    }
  }
  else if ((v50 & 1) == 0)
  {
    goto LABEL_35;
  }
  operator delete(v51);
  if ((v48 & 1) != 0)
    goto LABEL_41;
LABEL_36:
  if ((v46 & 1) != 0)
LABEL_37:
    operator delete(v47);
LABEL_38:
  webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)v27);
  return v22;
}

uint64_t webrtc::SimulcastEncoderAdapter::StreamContext::OnDroppedFrame(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  webrtc::SdpVideoFormat *v12;
  uint64_t vars0;

  if (!*(_QWORD *)(result + 8))
  {
    v8 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc", 232, "parent_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, vars0);
    return webrtc::SimulcastEncoderAdapter::SimulcastEncoderAdapter(v8, v9, v10, v11, v12);
  }
  return result;
}

_QWORD *webrtc::SimulcastEncoderAdapter::SimulcastEncoderAdapter(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, webrtc::SdpVideoFormat *a5)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v11;
  _QWORD *result;
  int *p_p;
  unint64_t v14;
  BOOL v15;
  uint64_t *v16;
  int v17;
  int v18;
  char v20;
  void *__p;
  unint64_t v22;
  unsigned __int8 v23;
  char v24;

  *(_QWORD *)a1 = &off_24C0C0D98;
  v8 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 32) = v11;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = a4;
  webrtc::SdpVideoFormat::SdpVideoFormat((std::string *)(a1 + 72), a5);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 1;
  *(_DWORD *)(a1 + 196) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_BYTE *)(a1 + 216) = 1;
  *(_QWORD *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 228) = 0;
  *(_BYTE *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 252) = 1;
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 288) = 1;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 292) = 0;
  *(_BYTE *)(a1 + 308) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_BYTE *)(a1 + 324) = 1;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 360) = 1;
  *(_QWORD *)(a1 + 372) = 0;
  *(_QWORD *)(a1 + 364) = 0;
  *(_BYTE *)(a1 + 380) = 0;
  *(_BYTE *)(a1 + 396) = 1;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 432) = 1;
  *(_QWORD *)(a1 + 444) = 0;
  *(_QWORD *)(a1 + 436) = 0;
  *(_BYTE *)(a1 + 452) = 0;
  *(_BYTE *)(a1 + 468) = 1;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 492) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 548) = 0;
  *(_QWORD *)(a1 + 532) = 0;
  *(_QWORD *)(a1 + 524) = 0;
  *(_WORD *)(a1 + 540) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 556) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_QWORD *)(a1 + 592) = a1 + 592;
  *(_QWORD *)(a1 + 600) = a1 + 592;
  *(_QWORD *)(a1 + 608) = 0;
  webrtc::RateControlSettings::RateControlSettings((uint64_t)&__p, *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a1 + 616) = v24;
  result = (*(_QWORD *(**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(&__p, *(_QWORD *)(a1 + 16), "WebRTC-Video-PreferTemporalSupportOnBaseLayer", 45);
  if (((char)v23 & 0x80000000) == 0)
  {
    p_p = (int *)&__p;
    v14 = v23;
    goto LABEL_9;
  }
  v14 = v22;
  if ((v22 & 0x8000000000000000) == 0)
  {
    p_p = (int *)__p;
    if (!v22 || __p)
    {
LABEL_9:
      if (v14 >= 7)
      {
        v17 = *p_p;
        v18 = *(int *)((char *)p_p + 3);
        v15 = v17 == 1650552389 && v18 == 1684368482;
        v16 = a2 + 1;
        if ((v23 & 0x80) == 0)
          goto LABEL_20;
      }
      else
      {
        v15 = 0;
        v16 = a2 + 1;
        if ((v23 & 0x80) == 0)
        {
LABEL_20:
          *(_BYTE *)(a1 + 617) = v15;
          webrtc::SupportsPerLayerPictureLossIndication((_QWORD *)a5 + 3);
          *(_BYTE *)(a1 + 618) = v20;
          webrtc::EncoderInfoSettings::EncoderInfoSettings(a1 + 624, *v16, (uint64_t)"WebRTC-SimulcastEncoderAdapter-GetEncoderInfoOverride", 53);
          *(_QWORD *)(a1 + 624) = &unk_24C0B3AB0;
          return (_QWORD *)a1;
        }
      }
      operator delete(__p);
      goto LABEL_20;
    }
  }
  __break(1u);
  return result;
}

void webrtc::SimulcastEncoderAdapter::~SimulcastEncoderAdapter(webrtc::SimulcastEncoderAdapter *this)
{
  uint64_t i;
  webrtc::SimulcastEncoderAdapter *v3;
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  void **v18;
  webrtc::SimulcastEncoderAdapter *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  *(_QWORD *)this = &off_24C0C0D98;
  for (i = *((_QWORD *)this + 76); i; i = *((_QWORD *)this + 76))
  {
    v14 = (uint64_t *)*((_QWORD *)this + 74);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = v14[1];
    *(_QWORD *)v14[1] = v15;
    *((_QWORD *)this + 76) = i - 1;
    v16 = (void **)v14[2];
    v14[2] = 0;
    if (v16)
    {
      webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v16 + 33);
      webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v16 + 2);
      v17 = *v16;
      *v16 = 0;
      if (v17)
        (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
      MEMORY[0x20BD0ADEC](v16, 0x10B2C400EB17E4BLL);
    }
    operator delete(v14);
  }
  webrtc::EncoderInfoSettings::~EncoderInfoSettings((webrtc::SimulcastEncoderAdapter *)((char *)this + 624));
  if (*((_QWORD *)this + 76))
  {
    v3 = (webrtc::SimulcastEncoderAdapter *)*((_QWORD *)this + 75);
    v4 = *((_QWORD *)this + 74);
    v5 = *(_QWORD *)v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *((_QWORD *)this + 76) = 0;
    if (v3 != (webrtc::SimulcastEncoderAdapter *)((char *)this + 592))
    {
      do
      {
        v19 = (webrtc::SimulcastEncoderAdapter *)*((_QWORD *)v3 + 1);
        v18 = (void **)*((_QWORD *)v3 + 2);
        *((_QWORD *)v3 + 2) = 0;
        if (v18)
        {
          webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v18 + 33);
          webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v18 + 2);
          v20 = *v18;
          *v18 = 0;
          if (v20)
            (*(void (**)(void *))(*(_QWORD *)v20 + 8))(v20);
          MEMORY[0x20BD0ADEC](v18, 0x10B2C400EB17E4BLL);
        }
        operator delete(v3);
        v3 = v19;
      }
      while (v19 != (webrtc::SimulcastEncoderAdapter *)((char *)this + 592));
    }
  }
  v6 = (void (***)(_QWORD))*((_QWORD *)this + 70);
  if (v6)
  {
    v7 = (void (***)(_QWORD))*((_QWORD *)this + 71);
    v8 = (void *)*((_QWORD *)this + 70);
    if (v7 != v6)
    {
      v9 = v7 - 6;
      v10 = v7 - 6;
      do
      {
        v11 = *v10;
        v10 -= 6;
        (*v11)(v9);
        v12 = v9 == v6;
        v9 = v10;
      }
      while (!v12);
      v8 = (void *)*((_QWORD *)this + 70);
    }
    *((_QWORD *)this + 71) = v6;
    operator delete(v8);
  }
  if ((*((_BYTE *)this + 120) & 1) == 0)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 96, *((_QWORD *)this + 13));
    if ((*((char *)this + 95) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_26:
    operator delete(*((void **)this + 9));
    v13 = (unsigned int *)*((_QWORD *)this + 1);
    if (!v13)
      return;
    goto LABEL_27;
  }
  operator delete(*((void **)this + 16));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 96, *((_QWORD *)this + 13));
  if (*((char *)this + 95) < 0)
    goto LABEL_26;
LABEL_13:
  v13 = (unsigned int *)*((_QWORD *)this + 1);
  if (!v13)
    return;
LABEL_27:
  v21 = v13 + 2;
  do
  {
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (!v23)
    (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
}

{
  webrtc::SimulcastEncoderAdapter::~SimulcastEncoderAdapter(this);
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webrtc::SimulcastEncoderAdapter::Release(webrtc::SimulcastEncoderAdapter *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  void (**v7)(uint64_t);

  v2 = *((_QWORD *)this + 71);
  if (*((_QWORD *)this + 70) == v2)
  {
LABEL_6:
    *((_BYTE *)this + 556) = 0;
    atomic_store(0, (unsigned int *)this + 12);
    return 0;
  }
  else
  {
    while (1)
    {
      v3 = *(_QWORD **)(v2 - 32);
      if (*v3)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 48))(*v3);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, 0);
        v3 = *(_QWORD **)(v2 - 32);
      }
      *(_QWORD *)(v2 - 32) = 0;
      result = operator new(0x18uLL);
      v5 = (_QWORD *)*((_QWORD *)this + 75);
      *result = (char *)this + 592;
      result[1] = v5;
      result[2] = v3;
      *v5 = result;
      *((_QWORD *)this + 75) = result;
      ++*((_QWORD *)this + 76);
      v6 = *((_QWORD *)this + 71);
      if (*((_QWORD *)this + 70) == v6)
        break;
      v7 = *(void (***)(uint64_t))(v6 - 48);
      v2 = v6 - 48;
      (*v7)(v2);
      *((_QWORD *)this + 71) = v2;
      if (*((_QWORD *)this + 70) == v2)
        goto LABEL_6;
    }
    __break(1u);
  }
  return result;
}

uint64_t webrtc::SimulcastEncoderAdapter::InitEncode(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int32 *v11;
  int32x4_t v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int32 *v34;
  int32x4_t v35;
  uint64_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _BOOL4 v49;
  int v50;
  int v51;
  BOOL v52;
  char v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  float v57;
  float v58;
  _BOOL4 v59;
  _BOOL4 v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  int v70;
  int v71;
  BOOL v72;
  char v73;
  unsigned int v74;
  unsigned int v75;
  BOOL v76;
  float v77;
  float v78;
  char v79;
  _BOOL4 v80;
  _BOOL4 v81;
  BOOL v82;
  uint64_t v83;
  int v84;
  int v85;
  BOOL v86;
  char v87;
  unsigned int v88;
  unsigned int v89;
  BOOL v90;
  float v91;
  float v92;
  int v94;
  int v95;
  BOOL v96;
  char v97;
  unsigned int v98;
  unsigned int v99;
  BOOL v100;
  float v101;
  float v102;
  int v103;
  int v104;
  BOOL v105;
  unsigned __int8 v106;
  unsigned int v107;
  unsigned int v108;
  BOOL v109;
  float v110;
  float v111;
  int v112;
  BOOL v113;
  char v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  float v118;
  float v119;
  uint64_t v121;
  void **v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  __int32 *v127;
  int32x4_t v128;
  uint64_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  uint64_t v133;
  unsigned __int8 *v134;
  int v135;
  uint64_t v136;
  int v137;
  int v138;
  unsigned __int8 *v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  unsigned __int8 *v144;
  int v145;
  BOOL v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  webrtc::SimulcastRateAllocator *v156;
  webrtc::SimulcastRateAllocator *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  unint64_t v175;
  int v176;
  char *v177;
  __int32 *v178;
  int32x4_t v179;
  uint64_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  uint64_t v184;
  int *v185;
  int v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int *v190;
  uint64_t v191;
  _OWORD *v192;
  int v193;
  int v194;
  _OWORD *v195;
  int v196;
  int v197;
  unsigned int v198;
  unsigned int *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  unint64_t v205;
  unsigned int *v206;
  unsigned int v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _OWORD *v211;
  unsigned int *v212;
  uint64_t v213;
  __int128 v214;
  int v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  _DWORD *v223;
  unint64_t v224;
  char *v225;
  void **v226;
  unsigned int v227;
  __int16 v228;
  uint64_t v229;
  char v230;
  int v231;
  int v232;
  int v233;
  unsigned int v234;
  int v235;
  int v236;
  uint64_t v237;
  _BYTE *v238;
  BOOL v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void **v248;
  uint64_t v249;
  uint64_t v250;
  BOOL v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  unint64_t v256;
  int v257;
  char *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  __int16 v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  char *v275;
  void (**v276)(char *, uint64_t);
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  void **v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  void **v292;
  void *v293;
  void **v294;
  void *v295;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  __int16 v308;
  unsigned int v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  _DWORD *__src;
  webrtc::SimulcastRateAllocator *v314;
  uint64_t v315;
  int v316;
  void **v317;
  uint64_t v318;
  uint64_t v319;
  double v320;
  _OWORD __dst[24];
  uint64_t v322;

  v322 = *MEMORY[0x24BDAC8D0];
  v3 = 4294967292;
  if (!a2)
    return v3;
  if (*(int *)(a3 + 4) < 1)
    return v3;
  if (!*((_DWORD *)a2 + 5))
    return v3;
  v7 = *((_DWORD *)a2 + 3);
  if (v7)
  {
    if (*((_DWORD *)a2 + 2) > v7)
      return v3;
  }
  if (*((unsigned __int16 *)a2 + 2) < 2u || *((unsigned __int16 *)a2 + 3) < 2u)
    return v3;
  if (*(_DWORD *)a2 == 1)
  {
    if (a2[358])
    {
      v8 = a2[32];
      if (a2[32])
      {
        if (v8 >= 8)
        {
          v9 = v8 & 0xF8;
          v11 = (__int32 *)(a2 + 160);
          v12 = 0uLL;
          v13 = v9;
          v14 = 0uLL;
          do
          {
            v15.i32[0] = *(v11 - 27);
            v15.i32[1] = *(v11 - 18);
            v15.i32[2] = *(v11 - 9);
            v15.i32[3] = *v11;
            v16.i32[0] = v11[9];
            v16.i32[1] = v11[18];
            v16.i32[2] = v11[27];
            v16.i32[3] = v11[36];
            v12 = vaddq_s32(v15, v12);
            v14 = vaddq_s32(v16, v14);
            v11 += 72;
            v13 -= 8;
          }
          while (v13);
          v10 = vaddvq_s32(vaddq_s32(v14, v12));
          if (v9 == v8)
          {
LABEL_18:
            if (!v10)
              goto LABEL_28;
            if (v8 >= 2)
            {
              v22 = 0;
              v23 = 0;
              v20 = v8 & 0xFE;
              v24 = a2 + 104;
              v25 = v20;
              do
              {
                v26 = *(v24 - 36);
                v27 = *v24;
                v24 += 72;
                v22 += v26;
                v23 += v27;
                v25 -= 2;
              }
              while (v25);
              v21 = v23 + v22;
              if (v20 == v8)
              {
LABEL_26:
                if (v21 > 1)
                  return 4294967292;
                goto LABEL_28;
              }
            }
            else
            {
              v20 = 0;
              v21 = 0;
            }
            v28 = v8 - v20;
            v29 = &a2[36 * v20 + 68];
            do
            {
              v30 = *v29;
              v29 += 36;
              v21 += v30;
              --v28;
            }
            while (v28);
            goto LABEL_26;
          }
        }
        else
        {
          v9 = 0;
          v10 = 0;
        }
        v17 = v8 - v9;
        v18 = &a2[36 * v9 + 52];
        do
        {
          v19 = *(_DWORD *)v18;
          v18 += 36;
          v10 += v19;
          --v17;
        }
        while (v17);
        goto LABEL_18;
      }
    }
  }
LABEL_28:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  memcpy((void *)(a1 + 168), a2, 0x17DuLL);
  if (a2[32] <= 1u)
    v31 = 1;
  else
    v31 = a2[32];
  if (v31 >= 8)
  {
    v32 = v31 & 0xF8;
    v34 = (__int32 *)(a2 + 160);
    v35 = 0uLL;
    v36 = v32;
    v37 = 0uLL;
    do
    {
      v38.i32[0] = *(v34 - 27);
      v38.i32[1] = *(v34 - 18);
      v38.i32[2] = *(v34 - 9);
      v38.i32[3] = *v34;
      v39.i32[0] = v34[9];
      v39.i32[1] = v34[18];
      v39.i32[2] = v34[27];
      v39.i32[3] = v34[36];
      v35 = vaddq_s32(v38, v35);
      v37 = vaddq_s32(v39, v37);
      v34 += 72;
      v36 -= 8;
    }
    while (v36);
    v33 = vaddvq_s32(vaddq_s32(v37, v35));
    if (v32 == v31)
      goto LABEL_38;
  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  v40 = v31 - v32;
  v41 = &a2[36 * v32 + 52];
  do
  {
    v42 = *(_DWORD *)v41;
    v41 += 36;
    v33 += v42;
    --v40;
  }
  while (v40);
LABEL_38:
  if (v33)
    v43 = v31;
  else
    v43 = 1;
  *(_DWORD *)(a1 + 552) = v43;
  v316 = *(unsigned __int8 *)(a1 + 200);
  if (*(_BYTE *)(a1 + 200))
  {
    v44 = (_DWORD *)(a1 + 204);
    if (v43 >= 2)
    {
      v46 = a1 + 240;
      v50 = *(_DWORD *)(a1 + 244);
      v51 = *(_DWORD *)(a1 + 208);
      v52 = v50 == v51;
      if (v50 < v51)
        v53 = -1;
      else
        v53 = 1;
      if (v52)
      {
        v53 = *(_DWORD *)v46 < *v44 ? -1 : 1;
        if (*(_DWORD *)v46 == *v44)
        {
          v54 = *(_DWORD *)(a1 + 256);
          v55 = *(_DWORD *)(a1 + 220);
          v56 = v54 == v55;
          v53 = v54 < v55 ? -1 : 1;
          if (v56)
          {
            v57 = *(float *)(a1 + 248);
            v58 = *(float *)(a1 + 212);
            if (v57 == v58)
              v53 = 0;
            else
              v53 = -127;
            if (v57 > v58)
              v53 = 1;
            if (v57 < v58)
              v53 = -1;
          }
        }
      }
      v59 = v53 != 129;
      v60 = v53 < 0;
      v61 = !v59 || !v60;
      if (v59 && v60)
        v45 = a1 + 240;
      else
        v45 = a1 + 204;
      if (!v61)
        v46 = a1 + 204;
      if ((_DWORD)v43 != 2)
      {
        v62 = 0;
        v63 = 36 * v43;
        v64 = 36 * v43 - 108;
        v65 = v63 - 72;
        while (1)
        {
          v67 = a1 + v62;
          v68 = a1 + v62 + 276;
          if (v64 == v62)
            break;
          v69 = (_DWORD *)(v67 + 312);
          v70 = *(_DWORD *)(v67 + 316);
          v71 = *(_DWORD *)(v67 + 280);
          v72 = v70 == v71;
          if (v70 < v71)
            v73 = -1;
          else
            v73 = 1;
          if (v72)
          {
            v73 = *v69 < *(_DWORD *)v68 ? -1 : 1;
            if (*v69 == *(_DWORD *)v68)
            {
              v74 = *(_DWORD *)(v67 + 328);
              v75 = *(_DWORD *)(v67 + 292);
              v76 = v74 == v75;
              v73 = v74 < v75 ? -1 : 1;
              if (v76)
              {
                v77 = *(float *)(v67 + 320);
                v78 = *(float *)(v67 + 284);
                if (v77 == v78)
                  v79 = 0;
                else
                  v79 = -127;
                if (v77 > v78)
                  v79 = 1;
                if (v77 < v78)
                  v73 = -1;
                else
                  v73 = v79;
              }
            }
          }
          v80 = v73 != 129;
          v81 = v73 < 0;
          v82 = !v80 || !v81;
          if (v80 && v81)
            v83 = (uint64_t)v69;
          else
            v83 = a1 + v62 + 276;
          if (v82)
            v68 = (uint64_t)v69;
          v84 = *(_DWORD *)(v83 + 4);
          v85 = *(_DWORD *)(v45 + 4);
          v86 = v84 == v85;
          if (v84 < v85)
            v87 = -1;
          else
            v87 = 1;
          if (v86)
          {
            v87 = *(_DWORD *)v83 < *(_DWORD *)v45 ? -1 : 1;
            if (*(_DWORD *)v83 == *(_DWORD *)v45)
            {
              v88 = *(_DWORD *)(v83 + 16);
              v89 = *(_DWORD *)(v45 + 16);
              v90 = v88 == v89;
              v87 = v88 < v89 ? -1 : 1;
              if (v90)
              {
                v91 = *(float *)(v83 + 8);
                v92 = *(float *)(v45 + 8);
                if (v91 == v92)
                  v87 = 0;
                else
                  v87 = -127;
                if (v91 > v92)
                  v87 = 1;
                if (v91 < v92)
                  v87 = -1;
              }
            }
          }
          if (v87 < 0 && v87 != 129)
            v45 = v83;
          v94 = *(_DWORD *)(v68 + 4);
          v95 = *(_DWORD *)(v46 + 4);
          v96 = v94 == v95;
          if (v94 < v95)
            v97 = -1;
          else
            v97 = 1;
          if (v96)
          {
            v97 = *(_DWORD *)v68 < *(_DWORD *)v46 ? -1 : 1;
            if (*(_DWORD *)v68 == *(_DWORD *)v46)
            {
              v98 = *(_DWORD *)(v68 + 16);
              v99 = *(_DWORD *)(v46 + 16);
              v100 = v98 == v99;
              v97 = v98 < v99 ? -1 : 1;
              if (v100)
              {
                v101 = *(float *)(v68 + 8);
                v102 = *(float *)(v46 + 8);
                if (v101 == v102)
                  v97 = 0;
                else
                  v97 = -127;
                if (v101 > v102)
                  v97 = 1;
                if (v101 < v102)
                  v97 = -1;
              }
            }
          }
          if (v97 >= 0 || v97 == 129)
            v46 = v68;
          v62 += 72;
          if (v65 == v62)
            goto LABEL_207;
        }
        v103 = *(_DWORD *)(v67 + 280);
        v104 = *(_DWORD *)(v45 + 4);
        v105 = v103 == v104;
        if (v103 < v104)
          v106 = -1;
        else
          v106 = 1;
        if (v105)
        {
          v106 = *(_DWORD *)v68 < *(_DWORD *)v45 ? -1 : 1;
          if (*(_DWORD *)v68 == *(_DWORD *)v45)
          {
            v107 = *(_DWORD *)(v67 + 292);
            v108 = *(_DWORD *)(v45 + 16);
            v109 = v107 == v108;
            v106 = v107 < v108 ? -1 : 1;
            if (v109)
            {
              v110 = *(float *)(v67 + 284);
              v111 = *(float *)(v45 + 8);
              if (v110 == v111)
                v106 = 0;
              else
                v106 = -127;
              if (v110 > v111)
                v106 = 1;
              if (v110 < v111)
                v106 = -1;
            }
          }
        }
        if (v106 == 129 || (v106 & 0x80) == 0)
        {
          v112 = *(_DWORD *)(v46 + 4);
          v113 = v103 == v112;
          if (v103 < v112)
            v114 = -1;
          else
            v114 = 1;
          if (v113)
          {
            v114 = *(_DWORD *)v68 < *(_DWORD *)v46 ? -1 : 1;
            if (*(_DWORD *)v68 == *(_DWORD *)v46)
            {
              v115 = *(_DWORD *)(v67 + 292);
              v116 = *(_DWORD *)(v46 + 16);
              v117 = v115 == v116;
              v114 = v115 < v116 ? -1 : 1;
              if (v117)
              {
                v118 = *(float *)(v67 + 284);
                v119 = *(float *)(v46 + 8);
                if (v118 == v119)
                  v114 = 0;
                else
                  v114 = -127;
                if (v118 > v119)
                  v114 = 1;
                if (v118 < v119)
                  v114 = -1;
              }
            }
          }
          if (v114 >= 0 || v114 == 129)
            v46 = v68;
        }
        else
        {
          v45 = v68;
        }
      }
    }
    else
    {
      v45 = a1 + 204;
      v46 = a1 + 204;
    }
LABEL_207:
    v121 = (v45 - (uint64_t)v44) >> 2;
    v48 = 0x8E38E38E38E38E39 * v121;
    v47 = 0x8E38E38E38E38E39 * ((v46 - (uint64_t)v44) >> 2);
    v49 = *(_BYTE *)(a1 + 34359738372 * (_DWORD)v121 + 236) != 0;
  }
  else
  {
    LODWORD(v47) = 0;
    v48 = 0;
    v49 = 1;
  }
  webrtc::SimulcastEncoderAdapter::FetchOrCreateEncoderContext((webrtc::SimulcastEncoderAdapter *)&v317, a1, v49);
  v122 = v317;
  if (!v317)
    return 4294967293;
  v123 = a2[32];
  if (!a2[32])
  {
    v126 = 1;
    goto LABEL_228;
  }
  if (v123 < 8)
  {
    v124 = 0;
    v125 = 0;
LABEL_217:
    v133 = v123 - v124;
    v134 = &a2[36 * v124 + 52];
    do
    {
      v135 = *(_DWORD *)v134;
      v134 += 36;
      v125 += v135;
      --v133;
    }
    while (v133);
    goto LABEL_219;
  }
  v124 = v123 & 0xF8;
  v127 = (__int32 *)(a2 + 160);
  v128 = 0uLL;
  v129 = v124;
  v130 = 0uLL;
  do
  {
    v131.i32[0] = *(v127 - 27);
    v131.i32[1] = *(v127 - 18);
    v131.i32[2] = *(v127 - 9);
    v131.i32[3] = *v127;
    v132.i32[0] = v127[9];
    v132.i32[1] = v127[18];
    v132.i32[2] = v127[27];
    v132.i32[3] = v127[36];
    v128 = vaddq_s32(v131, v128);
    v130 = vaddq_s32(v132, v130);
    v127 += 72;
    v129 -= 8;
  }
  while (v129);
  v125 = vaddvq_s32(vaddq_s32(v130, v128));
  if (v124 != v123)
    goto LABEL_217;
LABEL_219:
  if (v125)
  {
    if (v123 >= 2)
    {
      v137 = 0;
      v138 = 0;
      v136 = v123 & 0xFE;
      v139 = a2 + 104;
      v140 = v136;
      do
      {
        v141 = *(v139 - 36);
        v142 = *v139;
        v139 += 72;
        v137 += v141;
        v138 += v142;
        v140 -= 2;
      }
      while (v140);
      v126 = v138 + v137;
      if (v136 == v123)
        goto LABEL_228;
    }
    else
    {
      v136 = 0;
      v126 = 0;
    }
    v143 = v123 - v136;
    v144 = &a2[36 * v136 + 68];
    do
    {
      v145 = *v144;
      v144 += 36;
      v126 += v145;
      --v143;
    }
    while (v143);
  }
  else
  {
    v126 = a2[68];
  }
LABEL_228:
  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)*v317 + 96))(__dst);
  if (BYTE8(__dst[12]))
    v146 = v126 == 1;
  else
    v146 = 1;
  v147 = v146 || *(_BYTE *)(a1 + 618) != 0;
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)__dst);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v148, v149, v150, v151, v152, v153, v154, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc");
  if (*(_DWORD *)(a1 + 552) == 1 || !v147)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v166, v167, v168, v169, v170, v171, v172, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc");
    v173 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)*v122 + 32))(*v122, a1 + 168, a3);
    if ((v173 & 0x80000000) == 0)
    {
      v174 = v126 == 0;
      v175 = *(_QWORD *)(a1 + 568);
      if (v175 >= *(_QWORD *)(a1 + 576))
      {
        v177 = std::vector<webrtc::SimulcastEncoderAdapter::StreamContext>::__emplace_back_slow_path<decltype(nullptr),std::unique_ptr<webrtc::SimulcastEncoderAdapter::EncoderContext>,decltype(nullptr),int,unsigned short &,unsigned short &,BOOL>((void **)(a1 + 560), (uint64_t *)&v317, 0, *(_WORD *)(a1 + 172), *(_WORD *)(a1 + 174), v174);
      }
      else
      {
        if (!v175)
LABEL_419:
          __break(1u);
        v317 = 0;
        v176 = *(_DWORD *)(a1 + 172);
        *(_QWORD *)v175 = &off_24C0C0D68;
        *(_QWORD *)(v175 + 8) = 0;
        *(_QWORD *)(v175 + 16) = v122;
        *(_QWORD *)(v175 + 24) = 0;
        *(_DWORD *)(v175 + 32) = 0;
        *(_DWORD *)(v175 + 36) = v176;
        *(_BYTE *)(v175 + 40) = 0;
        *(_BYTE *)(v175 + 41) = v174;
        v177 = (char *)(v175 + 48);
      }
      *(_QWORD *)(a1 + 568) = v177;
      *(_BYTE *)(a1 + 556) = 1;
      while (1)
      {
        v289 = *(_QWORD *)(a1 + 608);
        if (!v289)
          break;
        v290 = *(uint64_t **)(a1 + 592);
        v291 = *v290;
        *(_QWORD *)(v291 + 8) = v290[1];
        *(_QWORD *)v290[1] = v291;
        *(_QWORD *)(a1 + 608) = v289 - 1;
        v292 = (void **)v290[2];
        v290[2] = 0;
        if (v292)
        {
          webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v292 + 33);
          webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v292 + 2);
          v293 = *v292;
          *v292 = 0;
          if (v293)
            (*(void (**)(void *))(*(_QWORD *)v293 + 8))(v293);
          MEMORY[0x20BD0ADEC](v292, 0x10B2C400EB17E4BLL);
        }
        operator delete(v290);
      }
      v3 = 0;
      atomic_store(1u, (unsigned int *)(a1 + 48));
      goto LABEL_409;
    }
    v3 = v173;
    if (*v122)
    {
      (*(void (**)(void *))(*(_QWORD *)*v122 + 48))(*v122);
      (*(void (**)(void *, _QWORD))(*(_QWORD *)*v122 + 40))(*v122, 0);
    }
    if (*(_DWORD *)(a1 + 552) == 1)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        webrtc::WebRtcVideoCodecErrorToString((webrtc *)v3);
        rtc::webrtc_logging_impl::Log("\r\t\t", v282, v283, v284, v285, v286, v287, v288, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc");
      }
      goto LABEL_409;
    }
  }
  v156 = (webrtc::SimulcastRateAllocator *)operator new();
  v157 = webrtc::SimulcastRateAllocator::SimulcastRateAllocator(v156, (const webrtc::VideoCodec *)(a1 + 168));
  v318 = (1000 * *(_DWORD *)(a1 + 176));
  v319 = v318;
  LODWORD(v158) = *(_DWORD *)(a1 + 188);
  v320 = (double)v158;
  v314 = v157;
  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)v157 + 24))(__dst);
  if (*(unsigned __int8 *)(a1 + 200) <= 1u)
    v163 = 1;
  else
    v163 = *(unsigned __int8 *)(a1 + 200);
  if (v163 >= 8)
  {
    v164 = v163 & 0xF8;
    v178 = (__int32 *)(a1 + 256);
    v179 = 0uLL;
    v180 = v164;
    v181 = 0uLL;
    do
    {
      v182.i32[0] = *(v178 - 9);
      v182.i32[1] = *v178;
      v182.i32[2] = v178[9];
      v182.i32[3] = v178[18];
      v183.i32[0] = v178[27];
      v183.i32[1] = v178[36];
      v183.i32[2] = v178[45];
      v183.i32[3] = v178[54];
      v179 = vaddq_s32(v182, v179);
      v181 = vaddq_s32(v183, v181);
      v178 += 72;
      v180 -= 8;
    }
    while (v180);
    v165 = vaddvq_s32(vaddq_s32(v181, v179));
    if (v164 == v163)
      goto LABEL_256;
  }
  else
  {
    v164 = 0;
    v165 = 0;
  }
  v184 = v163 - v164;
  v185 = (int *)(a1 + 36 * v164 + 220);
  do
  {
    v186 = *v185;
    v185 += 9;
    v165 += v186;
    --v184;
  }
  while (v184);
LABEL_256:
  v309 = v47;
  v311 = v48;
  __src = (_DWORD *)(a1 + 168);
  v306 = a3;
  v307 = a1;
  if (v165)
  {
    v187 = 0;
    v188 = 0;
    v189 = 0;
    v190 = 0;
    v191 = 0;
    while (1)
    {
      if (v191 == 5)
      {
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 73, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v159, v160, v161, v162, 5);
LABEL_421:
        abort();
      }
      v192 = &__dst[2 * v191];
      v193 = *((unsigned __int8 *)v192 + 8);
      if (*((_BYTE *)v192 + 8))
        v193 = *((_DWORD *)v192 + 1);
      if (!*((_BYTE *)v192 + 16))
        break;
      v194 = *((_DWORD *)v192 + 3);
      v195 = &__dst[2 * v191];
      v196 = *((unsigned __int8 *)v195 + 24);
      if (*((_BYTE *)v195 + 24))
        goto LABEL_264;
LABEL_265:
      if (*((_BYTE *)v195 + 32))
        v197 = *((_DWORD *)v195 + 7);
      else
        v197 = 0;
      v198 = (v194 + v193 + v196 + v197) / 0x3E8u;
      if (v190 >= v189)
      {
        v200 = v190 - v188;
        v201 = v200 + 1;
        if ((unint64_t)(v200 + 1) >> 62)
          goto LABEL_421;
        if (((char *)v189 - (char *)v188) >> 1 > v201)
          v201 = ((char *)v189 - (char *)v188) >> 1;
        if ((unint64_t)((char *)v189 - (char *)v188) >= 0x7FFFFFFFFFFFFFFCLL)
          v201 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v201)
          goto LABEL_419;
        if (v201 >> 62)
LABEL_422:
          std::__throw_bad_array_new_length[abi:sn180100]();
        v202 = v163;
        v203 = 4 * v201;
        v204 = operator new(4 * v201);
        v187 = (unsigned int *)&v204[4 * v200];
        *v187 = v198;
        v199 = v187 + 1;
        if (v190 != v188)
        {
          v205 = (char *)v190 - (char *)v188 - 4;
          if (v205 >= 0xBC)
          {
            v208 = ((char *)(v190 - 1) - (char *)v188) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v204[(char *)v190 - (char *)v188 - 4 - v208] > &v204[(char *)v190 - (char *)v188 - 4])
            {
              v206 = v190;
            }
            else if ((unsigned int *)((char *)v190 - v208 - 4) > v190 - 1)
            {
              v206 = v190;
            }
            else if ((unint64_t)((char *)v188 - v204) >= 0x20)
            {
              v209 = (v205 >> 2) + 1;
              v210 = 4 * (v209 & 0x7FFFFFFFFFFFFFF8);
              v206 = &v190[v210 / 0xFFFFFFFFFFFFFFFCLL];
              v187 = (unsigned int *)((char *)v187 - v210);
              v211 = &v204[4 * v200 - 16];
              v212 = v190 - 4;
              v213 = v209 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v214 = *(_OWORD *)v212;
                *(v211 - 1) = *((_OWORD *)v212 - 1);
                *v211 = v214;
                v211 -= 2;
                v212 -= 8;
                v213 -= 8;
              }
              while (v213);
              if (v209 == (v209 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_285;
            }
            else
            {
              v206 = v190;
            }
          }
          else
          {
            v206 = v190;
          }
          do
          {
            v207 = *--v206;
            *--v187 = v207;
          }
          while (v206 != v188);
        }
LABEL_285:
        v189 = (unsigned int *)&v204[v203];
        if (v188)
          operator delete(v188);
        v188 = v187;
        v163 = v202;
        ++v191;
        v190 = v199;
        if (v191 == v202)
          goto LABEL_310;
      }
      else
      {
        if (!v190)
          goto LABEL_419;
        *v190++ = v198;
        v199 = v190;
        if (++v191 == v163)
          goto LABEL_310;
      }
    }
    v194 = 0;
    v195 = &__dst[2 * v191];
    v196 = *((unsigned __int8 *)v195 + 24);
    if (!*((_BYTE *)v195 + 24))
      goto LABEL_265;
LABEL_264:
    v196 = *((_DWORD *)v195 + 5);
    goto LABEL_265;
  }
  if (BYTE8(__dst[0]))
    v215 = DWORD1(__dst[0]);
  else
    v215 = 0;
  if (LOBYTE(__dst[1]))
    v216 = HIDWORD(__dst[0]);
  else
    v216 = 0;
  if (BYTE8(__dst[1]))
    v217 = DWORD1(__dst[1]);
  else
    v217 = 0;
  if (LOBYTE(__dst[2]))
    v218 = HIDWORD(__dst[1]);
  else
    v218 = 0;
  v219 = (v216 + v215 + v217 + v218) / 0x3E8u;
  v187 = (unsigned int *)operator new(4uLL);
  *v187 = v219;
  v199 = v187 + 1;
LABEL_310:
  (*(void (**)(webrtc::SimulcastRateAllocator *))(*(_QWORD *)v314 + 8))(v314);
  v221 = v306;
  v220 = v307;
  v222 = *(_DWORD *)(v307 + 552);
  v223 = __src;
  if (v222 < 1)
  {
LABEL_388:
    while (1)
    {
      v277 = *(_QWORD *)(v220 + 608);
      if (!v277)
        break;
      v278 = *(uint64_t **)(v220 + 592);
      v279 = *v278;
      *(_QWORD *)(v279 + 8) = v278[1];
      *(_QWORD *)v278[1] = v279;
      *(_QWORD *)(v220 + 608) = v277 - 1;
      v280 = (void **)v278[2];
      v278[2] = 0;
      if (v280)
      {
        webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v280 + 33);
        webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v280 + 2);
        v281 = *v280;
        *v280 = 0;
        if (v281)
          (*(void (**)(void *))(*(_QWORD *)v281 + 8))(v281);
        MEMORY[0x20BD0ADEC](v280, 0x10B2C400EB17E4BLL);
      }
      operator delete(v278);
    }
    v3 = 0;
    atomic_store(1u, (unsigned int *)(v220 + 48));
    goto LABEL_393;
  }
  v224 = 0;
  v312 = v199 - v187;
  v315 = v311;
  v305 = v309;
  while (1)
  {
    if (v316 && !*(_BYTE *)(v220 + 36 * v224 + 236))
      goto LABEL_314;
    v226 = v317;
    if (!v317)
    {
      webrtc::SimulcastEncoderAdapter::FetchOrCreateEncoderContext((webrtc::SimulcastEncoderAdapter *)__dst, v220, v224 == v315);
      v226 = *(void ***)&__dst[0];
      v317 = *(void ***)&__dst[0];
      if (!*(_QWORD *)&__dst[0])
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v220 + 48))(v220);
        v3 = 4294967293;
        goto LABEL_393;
      }
    }
    if (v312 <= v224)
      goto LABEL_419;
    v227 = v187[v224];
    memcpy(__dst, v223, sizeof(__dst));
    v228 = 0;
    v229 = v220 + 36 * v224;
    LOBYTE(__dst[2]) = 0;
    v230 = *(_BYTE *)(v229 + 236);
    v229 += 236;
    v231 = *(_DWORD *)(v229 - 32);
    v232 = *(_DWORD *)(v229 - 28);
    WORD2(__dst[0]) = v231;
    WORD3(__dst[0]) = v232;
    v233 = *(_DWORD *)(v229 - 16);
    DWORD1(__dst[1]) = *(float *)(v229 - 24);
    v234 = *(_DWORD *)(v229 - 8);
    v235 = *(_DWORD *)(v229 - 4);
    HIDWORD(__dst[0]) = v233;
    LODWORD(__dst[1]) = v234;
    HIDWORD(__dst[1]) = v235;
    BYTE8(__dst[1]) = v230;
    v236 = *(unsigned __int8 *)(v229 - 20);
    if ((v236 - 4) >= 0xFFFFFFFD)
      v228 = webrtc::SimulcastStream::GetScalabilityMode(void)const::scalability_modes[v236 - 1];
    if (*(unsigned __int16 *)(v220 + 540) < 0x100u)
      goto LABEL_323;
    if (*(_BYTE *)(v220 + 200))
    {
      v237 = 0;
      v238 = (_BYTE *)(v307 + 236);
      while (v224 == v237 || !*v238)
      {
        ++v237;
        v238 += 36;
        if (*(unsigned __int8 *)(v220 + 200) == v237)
          goto LABEL_331;
      }
LABEL_323:
      if ((v236 - 4) < 0xFFFFFFFD)
        goto LABEL_333;
      goto LABEL_332;
    }
LABEL_331:
    v228 = *(_WORD *)(v220 + 540);
LABEL_332:
    WORD2(__dst[23]) = v228 | 0x100;
LABEL_333:
    if (v224 == v315 && !*(_DWORD *)(v220 + 492) && *(_BYTE *)(v220 + 616))
      HIDWORD(__dst[1]) = 45;
    if (*v223 == 4)
    {
      BYTE8(__dst[22]) = v236;
    }
    else if (*v223 == 1)
    {
      BYTE4(__dst[22]) = v236;
      if (v224 != v305)
      {
        if (((unsigned __int16)v232 * (unsigned __int16)v231) >> 10 <= 0x62)
          DWORD2(__dst[23]) = 2;
        BYTE5(__dst[22]) = 0;
      }
    }
    if (v234 <= v227)
      v234 = v227;
    DWORD2(__dst[0]) = v234;
    if (v224)
      v239 = 1;
    else
      v239 = *(_BYTE *)(v220 + 520) == 0;
    v240 = !v239;
    LOBYTE(__dst[22]) = v240;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v311 = v311 & 0xFFFFFFFF00000000 | 0xC89;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v241, v242, v243, v244, v245, v246, v247, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc");
    }
    v248 = v226;
    v249 = (*(uint64_t (**)(void *, _OWORD *, uint64_t))(*(_QWORD *)*v226 + 32))(*v226, __dst, v221);
    if ((v249 & 0x80000000) != 0)
      break;
    if (v224)
      v250 = v220;
    else
      v250 = 0;
    v251 = v187[v224] == 0;
    v252 = operator new();
    v253 = v252;
    LODWORD(v254) = DWORD1(__dst[1]);
    *(double *)v252 = (double)v254;
    *(_BYTE *)(v252 + 8) = 0;
    *(_BYTE *)(v252 + 16) = 0;
    v255 = *(char **)(v220 + 568);
    v256 = *(_QWORD *)(v220 + 576);
    if ((unint64_t)v255 < v256)
    {
      if (!v255)
        goto LABEL_419;
      v317 = 0;
      v257 = DWORD1(__dst[0]);
      *(_QWORD *)v255 = &off_24C0C0D68;
      *((_QWORD *)v255 + 1) = v250;
      *((_QWORD *)v255 + 2) = v248;
      *((_QWORD *)v255 + 3) = v252;
      *((_DWORD *)v255 + 8) = v224;
      *((_DWORD *)v255 + 9) = v257;
      v255[40] = 0;
      v255[41] = v251;
      if (v250)
        (*(void (**)(void *, char *))(*(_QWORD *)*v248 + 40))(*v248, v255);
      v225 = v255 + 48;
      v223 = __src;
      goto LABEL_313;
    }
    v258 = *(char **)(v220 + 560);
    v259 = 0xAAAAAAAAAAAAAAABLL * ((v255 - v258) >> 4) + 1;
    if (v259 > 0x555555555555555)
      goto LABEL_421;
    v260 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v256 - (_QWORD)v258) >> 4);
    if (2 * v260 > v259)
      v259 = 2 * v260;
    if (v260 >= 0x2AAAAAAAAAAAAAALL)
      v261 = 0x555555555555555;
    else
      v261 = v259;
    if (!v261)
      goto LABEL_419;
    if (v261 > 0x555555555555555)
      goto LABEL_422;
    v262 = WORD2(__dst[0]);
    v308 = WORD3(__dst[0]);
    v310 = 48 * v261;
    v263 = (char *)operator new(48 * v261);
    v317 = 0;
    v264 = &v263[16 * ((v255 - v258) >> 4)];
    *(_QWORD *)v264 = &off_24C0C0D68;
    *((_QWORD *)v264 + 1) = v250;
    *((_QWORD *)v264 + 2) = v248;
    *((_QWORD *)v264 + 3) = v253;
    *((_DWORD *)v264 + 8) = v224;
    *((_WORD *)v264 + 18) = v262;
    *((_WORD *)v264 + 19) = v308;
    v264[40] = 0;
    v264[41] = v251;
    if (v250)
    {
      v265 = v263;
      (*(void (**)(void *, char *))(*(_QWORD *)*v248 + 40))(*v248, v264);
      v220 = v307;
      v255 = *(char **)(v307 + 568);
      v258 = *(char **)(v307 + 560);
      v223 = __src;
      v266 = &v265[v310];
      v225 = v264 + 48;
      if (v255 == v258)
        goto LABEL_382;
    }
    else
    {
      v220 = v307;
      v223 = __src;
      v266 = &v263[v310];
      v225 = v264 + 48;
      if (v255 == v258)
      {
LABEL_382:
        *(_QWORD *)(v220 + 560) = v264;
        *(_QWORD *)(v220 + 568) = v225;
        *(_QWORD *)(v220 + 576) = v266;
LABEL_383:
        v221 = v306;
        goto LABEL_384;
      }
    }
    v267 = 0;
    do
    {
      v268 = &v264[v267];
      *(_QWORD *)&v264[v267 - 48] = &off_24C0C0D68;
      v269 = (uint64_t)&v264[v267 - 48];
      v270 = &v255[v267];
      *((_QWORD *)v268 - 5) = *(_QWORD *)&v255[v267 - 40];
      v271 = *(_QWORD *)&v255[v267 - 32];
      *((_QWORD *)v270 - 4) = 0;
      *((_QWORD *)v268 - 4) = v271;
      v272 = *(_QWORD *)&v255[v267 - 24];
      *((_QWORD *)v270 - 3) = 0;
      *((_QWORD *)v268 - 3) = v272;
      *((_DWORD *)v268 - 4) = *(_DWORD *)&v255[v267 - 16];
      *((_WORD *)v268 - 6) = *(_WORD *)&v255[v267 - 12];
      *(_DWORD *)(v268 - 10) = *(_DWORD *)&v255[v267 - 10];
      if (*(_QWORD *)&v264[v267 - 40])
        (*(void (**)(_QWORD, uint64_t))(***((_QWORD ***)v268 - 4) + 40))(**((_QWORD **)v268 - 4), v269);
      v267 -= 48;
    }
    while (&v255[v267] != v258);
    v258 = *(char **)(v220 + 560);
    v273 = *(char **)(v220 + 568);
    *(_QWORD *)(v220 + 560) = &v264[v267];
    *(_QWORD *)(v220 + 568) = v225;
    *(_QWORD *)(v220 + 576) = v266;
    if (v273 == v258)
      goto LABEL_383;
    v274 = v273 - 48;
    v275 = v273 - 48;
    v221 = v306;
    do
    {
      v276 = *(void (***)(char *, uint64_t))v275;
      v275 -= 48;
      (*v276)(v274, v269);
      v52 = v274 == v258;
      v274 = v275;
    }
    while (!v52);
LABEL_384:
    if (v258)
      operator delete(v258);
LABEL_313:
    *(_QWORD *)(v220 + 568) = v225;
    v222 = *(_DWORD *)(v220 + 552);
LABEL_314:
    if ((uint64_t)++v224 >= v222)
      goto LABEL_388;
  }
  v3 = v249;
  v317 = 0;
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v226 + 33);
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v226 + 2);
  v297 = *v226;
  *v226 = 0;
  if (v297)
    (*(void (**)(void *))(*(_QWORD *)v297 + 8))(v297);
  MEMORY[0x20BD0ADEC](v226, 0x10B2C400EB17E4BLL);
  (*(void (**)(uint64_t))(*(_QWORD *)v220 + 48))(v220);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    webrtc::WebRtcVideoCodecErrorToString((webrtc *)v3);
    rtc::webrtc_logging_impl::Log("\r\t\t", v298, v299, v300, v301, v302, v303, v304, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc");
  }
LABEL_393:
  if (v187)
    operator delete(v187);
LABEL_409:
  v294 = v317;
  if (v317)
  {
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v317 + 33);
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v294 + 2);
    v295 = *v294;
    *v294 = 0;
    if (v295)
      (*(void (**)(void *))(*(_QWORD *)v295 + 8))(v295);
    MEMORY[0x20BD0ADEC](v294, 0x10B2C400EB17E4BLL);
  }
  return v3;
}

uint64_t webrtc::SimulcastEncoderAdapter::FetchOrCreateEncoderContext(webrtc::SimulcastEncoderAdapter *this, uint64_t a2, int a3)
{
  BOOL v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  __int16 v40;
  char v41[24];
  __int16 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  void *v56;
  char v57;
  uint64_t v58;
  __int16 v59;
  char v60[24];
  __int16 v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  int v73;
  __int16 v74;
  void *v75[31];
  __int128 v76[15];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 64))
    v5 = a3 == 0;
  else
    v5 = 1;
  if (v5)
  {
    v8 = 0;
    v6 = (uint64_t *)(a2 + 592);
    v7 = *(uint64_t **)(a2 + 600);
    if (v7 != (uint64_t *)(a2 + 592))
      goto LABEL_9;
  }
  else
  {
    v8 = *(_BYTE *)(a2 + 617) != 0;
    v6 = (uint64_t *)(a2 + 592);
    v7 = *(uint64_t **)(a2 + 600);
    if (v7 != (uint64_t *)(a2 + 592))
    {
LABEL_9:
      while (1)
      {
        v9 = (unsigned __int8 *)v7[2];
        if (v9[8] == v8)
          break;
        v7 = (uint64_t *)v7[1];
        if (v7 == v6)
          goto LABEL_11;
      }
      if (v7 != v6)
      {
        v7[2] = 0;
        v12 = *v7;
        *(_QWORD *)(v12 + 8) = v7[1];
        *(_QWORD *)v7[1] = v12;
        --*(_QWORD *)(a2 + 608);
        v13 = (void **)v7[2];
        v7[2] = 0;
        if (v13)
        {
          webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v13 + 33);
          webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v13 + 2);
          v14 = *v13;
          *v13 = 0;
          if (v14)
            (*(void (**)(void *))(*(_QWORD *)v14 + 8))(v14);
          MEMORY[0x20BD0ADEC](v13, 0x10B2C400EB17E4BLL);
        }
        operator delete(v7);
        goto LABEL_37;
      }
    }
  }
LABEL_11:
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(&v36, *(_QWORD *)(a2 + 56), a2 + 8, a2 + 72);
  v10 = *(_QWORD *)(a2 + 64);
  if (v10)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v76, v10, a2 + 8, a2 + 72);
    v11 = *(_QWORD *)&v76[0];
  }
  else
  {
    v11 = 0;
  }
  LOBYTE(v56) = 0;
  v57 = 0;
  v58 = 0x10000E100;
  v59 = 0;
  v60[23] = 7;
  if (v60 <= "unknown" && &v60[7] > "unknown")
    goto LABEL_43;
  strcpy(v60, "unknown");
  v61 = 256;
  v63 = -1;
  v62 = 2;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v69 = 0;
  v70 = 0;
  v68 = 0;
  v71 = 0;
  v73 = 1;
  v72 = 2;
  v74 = 0;
  LOBYTE(v37) = 0;
  v38 = 0;
  v39 = 0x10000E100;
  v40 = 0;
  v41[23] = 7;
  if (v41 <= "unknown" && &v41[7] > "unknown")
LABEL_43:
    __break(1u);
  strcpy(v41, "unknown");
  v42 = 256;
  v44 = -1;
  v43 = 2;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v52 = 0;
  v54 = 1;
  v53 = 2;
  v55 = 0;
  if (v36)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v36 + 96))(v76);
    webrtc::VideoEncoder::EncoderInfo::operator=((uint64_t)&v56, v76);
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)v76);
    webrtc::VideoEncoder::EncoderInfo::operator=((uint64_t)&v37, (__int128 *)&v56);
    if (v11)
    {
      v15 = v36;
      v35 = v11;
      v36 = 0;
      v34 = v15;
      webrtc::CreateVideoEncoderSoftwareFallbackWrapper(a2 + 8, &v35, &v34, v8, (uint64_t *)v76);
      v11 = *(_QWORD *)&v76[0];
      *(_QWORD *)&v76[0] = 0;
      v16 = v34;
      v34 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = v35;
      v35 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    else
    {
      v11 = v36;
      v36 = 0;
    }
LABEL_35:
    v9 = (unsigned __int8 *)operator new();
    webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)v76, (const webrtc::VideoEncoder::EncoderInfo *)&v56);
    webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)v75, (const webrtc::VideoEncoder::EncoderInfo *)&v37);
    *(_QWORD *)v9 = v11;
    v9[8] = v8;
    webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)(v9 + 16), (const webrtc::VideoEncoder::EncoderInfo *)v76);
    webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)(v9 + 264), (const webrtc::VideoEncoder::EncoderInfo *)v75);
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v75);
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)v76);
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(&v37);
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(&v56);
    v25 = v36;
    v36 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
LABEL_37:
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v9 + 40))(*(_QWORD *)v9, *(_QWORD *)(a2 + 584));
    *(_QWORD *)this = v9;
    return result;
  }
  if (v11)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\n\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc");
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v11 + 96))(v76, v11);
    webrtc::VideoEncoder::EncoderInfo::operator=((uint64_t)&v37, v76);
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)v76);
    webrtc::VideoEncoder::EncoderInfo::operator=((uint64_t)&v56, (__int128 *)&v37);
    goto LABEL_35;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\n\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc");
  *(_QWORD *)this = 0;
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(&v37);
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(&v56);
  result = v36;
  v36 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t webrtc::SimulcastEncoderAdapter::Encode(uint64_t a1, uint64_t a2, char **a3, __n128 a4)
{
  unsigned int v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  _DWORD *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  _DWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (***v61)(_QWORD);
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unsigned int *v65;
  unsigned int v66;
  void (***v67)(_QWORD);
  int v68;
  int v69;
  unsigned int v70;
  _BOOL4 v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int128 *v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  __int128 *v108;
  void (***v110)(_QWORD);
  void *__p;
  _DWORD *v112;
  char *v113;
  void *v114;
  void (***v115)(_QWORD);
  __int128 v116;
  __int128 v117;
  _BYTE v118[28];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char v123;
  char v124;
  _BYTE v125[29];
  unsigned int *v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned int *)(a1 + 48));
  if (v4 != 1 || !*(_QWORD *)(a1 + 584))
    return 4294967289;
  if (*(_BYTE *)(a1 + 696) && !*(_DWORD *)(a1 + 692))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/encoder_info_settings.cc");
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 692);
    if ((v7 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)v7)
        goto LABEL_154;
      v8 = *(_QWORD *)(a2 + 8);
      if (v8)
        LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      if ((int)v8 % (int)v7)
        goto LABEL_13;
      v9 = *(_QWORD *)(a2 + 8);
      if (v9)
        LODWORD(v9) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
      if ((int)v9 % (int)v7)
      {
LABEL_13:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        {
          v17 = *(_QWORD *)(a2 + 8);
          if (v17)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
            v18 = *(_QWORD *)(a2 + 8);
            if (v18)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
          }
LABEL_143:
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc");
        }
        return 0xFFFFFFFFLL;
      }
      if (*(_BYTE *)(a1 + 761))
      {
        v89 = *(_QWORD *)(a1 + 560);
        v90 = *(_QWORD *)(a1 + 568);
        if (v89 != v90)
        {
          while (!(*(unsigned __int16 *)(v89 + 36) % (int)v7) && !(*(unsigned __int16 *)(v89 + 38) % (int)v7))
          {
            v89 += 48;
            if (v89 == v90)
              goto LABEL_20;
          }
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            goto LABEL_143;
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
LABEL_20:
  for (i = *(_QWORD *)(a1 + 560); ; i += 48)
  {
    if (i == *(_QWORD *)(a1 + 568))
    {
      v106 = 1;
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
        goto LABEL_29;
LABEL_26:
      v103 = 0;
      v29 = *(_QWORD *)(a1 + 560);
      v30 = *(_QWORD *)(a1 + 568);
      if (v29 == v30)
        return 0;
      goto LABEL_31;
    }
    if (!*(_BYTE *)(i + 41) && *(_BYTE *)(i + 40))
      break;
  }
  v106 = 0;
  v28 = *(_QWORD *)(a2 + 8);
  if (!v28)
    goto LABEL_26;
LABEL_29:
  HIDWORD(v103) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
  v31 = *(_QWORD *)(a2 + 8);
  if (v31)
  {
    LODWORD(v103) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 48))(v31);
    v29 = *(_QWORD *)(a1 + 560);
    v30 = *(_QWORD *)(a1 + 568);
    if (v29 != v30)
      goto LABEL_31;
    return 0;
  }
  LODWORD(v103) = 0;
  v29 = *(_QWORD *)(a1 + 560);
  v30 = *(_QWORD *)(a1 + 568);
  if (v29 == v30)
    return 0;
LABEL_31:
  v32 = 0;
  v108 = (__int128 *)(a2 + 16);
  v100 = (__int128 *)(a2 + 76);
  v102 = (_OWORD *)(a2 + 148);
  v101 = (__int128 *)(a2 + 192);
  v107 = -1;
  v104 = v30;
  v105 = a2;
  do
  {
    if (*(_BYTE *)(v29 + 41))
      goto LABEL_33;
    v33 = *(unsigned __int8 *)(a1 + 556);
    if (*(_BYTE *)(a1 + 556))
    {
      if (*(unsigned __int8 *)(a1 + 200) <= 1u)
        v34 = 1;
      else
        v34 = *(unsigned __int8 *)(a1 + 200);
    }
    else
    {
      v34 = 1;
    }
    v35 = 1000 * *(_DWORD *)v108 / 0x5Au;
    v36 = operator new(4 * v34);
    __p = v36;
    v113 = (char *)&v36[v34];
    memset_pattern16(v36, &unk_208F097F0, 4 * v34);
    v112 = &v36[v34];
    if ((v106 & 1) == 0)
    {
      memset_pattern16(v36, &unk_208F1B880, 4 * v34);
      goto LABEL_49;
    }
    if (a3)
    {
      if (v33)
      {
        v38 = *a3;
        v37 = a3[1];
        if (&__p != (void **)a3)
        {
          v39 = (v37 - v38) >> 2;
          if (v34 >= v39)
          {
            if (v37 != v38)
              memmove(v36, *a3, v37 - v38);
          }
          else
          {
            v112 = v36;
            operator delete(v36);
            __p = 0;
            v112 = 0;
            v113 = 0;
            if (v37 - v38 < 0)
              goto LABEL_157;
            v40 = operator new(v37 - v38);
            v36 = v40;
            __p = v40;
            v112 = v40;
            v113 = (char *)&v40[v39];
            if (v37 != v38)
              memcpy(v40, v38, v37 - v38);
          }
          v112 = &v36[v39];
          v38 = *a3;
          v37 = a3[1];
        }
        if (v38 != v37)
        {
          while (*(_DWORD *)v38 != 3)
          {
            v38 += 4;
            if (v38 == v37)
              goto LABEL_67;
          }
LABEL_49:
          *(_BYTE *)(v29 + 40) = 0;
          v41 = *(_QWORD *)(v29 + 24);
          v42 = v105;
          if (v41)
          {
            if (*(double *)v41 >= 0.5)
            {
              v43 = (uint64_t)(1000000000.0 / *(double *)v41);
              if (v43 >= 1)
              {
                v44 = 1000 * v35;
                if (*(_BYTE *)(v41 + 16))
                {
                  v45 = *(_QWORD *)(v41 + 8);
                  v46 = v45 - v44;
                  if (v45 - v44 < 0)
                    v46 = v44 - v45;
                  if (v46 < 2 * v43)
                    goto LABEL_78;
                }
LABEL_80:
                *(_QWORD *)(v41 + 8) = v44 + ((unint64_t)v43 >> 1);
                *(_BYTE *)(v41 + 16) = 1;
                goto LABEL_81;
              }
            }
          }
          goto LABEL_81;
        }
      }
      else
      {
        v47 = *(int *)(v29 + 32);
        v48 = (a3[1] - *a3) >> 2;
        if (v48 >= v47)
        {
          if (v48 <= v47)
            goto LABEL_156;
          if (*(_DWORD *)&(*a3)[4 * v47] == 3)
          {
            *v36 = 3;
            goto LABEL_49;
          }
        }
      }
    }
LABEL_67:
    v41 = *(_QWORD *)(v29 + 24);
    v42 = v105;
    if (v41)
    {
      a4.n128_u64[0] = *(_QWORD *)v41;
      if (*(double *)v41 < 0.5)
        goto LABEL_69;
      a4.n128_f64[0] = 1000000000.0 / a4.n128_f64[0];
      v43 = (uint64_t)a4.n128_f64[0];
      if ((uint64_t)a4.n128_f64[0] >= 1)
      {
        v44 = 1000 * v35;
        if (*(_BYTE *)(v41 + 16))
        {
          v45 = *(_QWORD *)(v41 + 8);
          v51 = v45 - v44 >= 0 ? v45 - v44 : v44 - v45;
          if (v51 < 2 * v43)
          {
            if (v45 - v44 > 0)
            {
LABEL_69:
              v49 = 7;
              v50 = __p;
              if (__p)
                goto LABEL_133;
              goto LABEL_134;
            }
LABEL_78:
            *(_QWORD *)(v41 + 8) = v45 + v43;
            if (HIDWORD(v103) != *(unsigned __int16 *)(v29 + 36))
              goto LABEL_83;
            goto LABEL_82;
          }
        }
        goto LABEL_80;
      }
    }
LABEL_81:
    if (HIDWORD(v103) != *(unsigned __int16 *)(v29 + 36))
      goto LABEL_83;
LABEL_82:
    if ((_DWORD)v103 == *(unsigned __int16 *)(v29 + 38))
      goto LABEL_116;
LABEL_83:
    v52 = *(_QWORD *)(v42 + 8);
    if (v52)
      (**(void (***)(_QWORD))v52)(*(_QWORD *)(v42 + 8));
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v52 + 32))(v52))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    }
    else
    {
      (*(void (**)(void **__return_ptr))(***(_QWORD ***)(v29 + 16) + 96))(&v114);
      v80 = BYTE5(v116);
      webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(&v114);
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      if (v80)
      {
LABEL_116:
        v81 = (*(uint64_t (**)(_QWORD, uint64_t, void **))(***(_QWORD ***)(v29 + 16) + 56))(**(_QWORD **)(v29 + 16), v42, &__p);
        if (!v81)
          goto LABEL_132;
        v49 = 1;
        v107 = v81;
        v50 = __p;
        if (__p)
          goto LABEL_133;
        goto LABEL_134;
      }
    }
    if (!v32)
    {
      v32 = *(_QWORD *)(v42 + 8);
      if (v32)
        (**(void (***)(_QWORD))v32)(*(_QWORD *)(v42 + 8));
    }
    v53 = *(unsigned __int16 *)(v29 + 36);
    v54 = *(unsigned __int16 *)(v29 + 38);
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32);
    (*(void (**)(void (****__return_ptr)(_QWORD), uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 72))(&v110, v32, 0, 0, v55, v56, v53, v54);
    if (v110)
    {
      LOWORD(v114) = *(_WORD *)v42;
      v61 = *(void (****)(_QWORD))(v42 + 8);
      v115 = v61;
      if (v61)
        (**v61)(v61);
      v62 = v108[1];
      v116 = *v108;
      v117 = v62;
      *(_OWORD *)v118 = v108[2];
      *(_OWORD *)&v118[12] = *(__int128 *)((char *)v108 + 44);
      LOBYTE(v119) = 0;
      v124 = 0;
      if (*(_BYTE *)(v42 + 144))
      {
        v63 = v100[3];
        v121 = v100[2];
        v122 = v63;
        v123 = *((_BYTE *)v100 + 64);
        v64 = v100[1];
        v119 = *v100;
        v120 = v64;
        v124 = 1;
      }
      *(_OWORD *)v125 = *v102;
      *(_OWORD *)&v125[13] = *(_OWORD *)((char *)v102 + 13);
      v65 = *(unsigned int **)(v42 + 184);
      v126 = v65;
      if (v65)
      {
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v127 = *v101;
      v128 = *((_QWORD *)v101 + 2);
      v67 = v110;
      if (!v110)
      {
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_frame.cc", 332, "buffer", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v57, v58, v59, v60, v98);
LABEL_154:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v91, v92, v93, v94, v95, v96, v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/encoder_info_settings.cc");
LABEL_156:
        __break(1u);
LABEL_157:
        abort();
      }
      (**v110)(v110);
      if (v115)
        (*v115)[1](v115);
      v115 = v67;
      *(_DWORD *)&v118[24] = 0;
      v68 = ((uint64_t (*)(_QWORD))(*v67)[5])(v67);
      v69 = (int)v115;
      if (v115)
        v69 = ((uint64_t (*)(_QWORD))(*v115)[6])(v115);
      *(_QWORD *)&v125[12] = 0;
      *(_DWORD *)&v125[20] = v68;
      *(_DWORD *)&v125[24] = v69;
      if (!v125[28])
        v125[28] = 1;
      v70 = (*(uint64_t (**)(_QWORD, void **, void **))(***(_QWORD ***)(v29 + 16) + 56))(**(_QWORD **)(v29 + 16), &v114, &__p);
      v71 = v70 != 0;
      v72 = v107;
      if (v70)
        v72 = v70;
      v107 = v72;
      v73 = v126;
      if (v126)
      {
        do
        {
          v74 = __ldaxr(v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, v73));
        if (!v75)
        {
          v76 = *((_QWORD *)v73 + 1);
          if (v76)
          {
            v77 = *((_QWORD *)v73 + 2);
            v78 = (void *)*((_QWORD *)v73 + 1);
            if (v77 != v76)
            {
              do
              {
                v79 = *(void **)(v77 - 96);
                if (v79)
                {
                  *(_QWORD *)(v77 - 88) = v79;
                  operator delete(v79);
                }
                v77 -= 104;
              }
              while (v77 != v76);
              v78 = (void *)*((_QWORD *)v73 + 1);
            }
            *((_QWORD *)v73 + 2) = v76;
            operator delete(v78);
          }
          MEMORY[0x20BD0ADEC](v73, 0x1020C40E72D6CFBLL);
        }
      }
      if (v115)
        (*v115)[1](v115);
    }
    else
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v99 = v99 & 0xFFFFFFFF00000000 | 0x1163;
        rtc::webrtc_logging_impl::Log("\r\t", v82, v83, v84, v85, v86, v87, v88, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc");
      }
      v107 = -16;
      v71 = 1;
    }
    if (v110)
      (*v110)[1](v110);
    if (!v71)
    {
LABEL_132:
      v49 = 0;
      v50 = __p;
      if (!__p)
        goto LABEL_134;
LABEL_133:
      v112 = v50;
      operator delete(v50);
      goto LABEL_134;
    }
    v49 = 1;
    v50 = __p;
    if (__p)
      goto LABEL_133;
LABEL_134:
    if (v49 == 7)
    {
      v30 = v104;
    }
    else
    {
      v30 = v104;
      if (v49)
        goto LABEL_138;
    }
LABEL_33:
    v29 += 48;
  }
  while (v29 != v30);
  v107 = 0;
LABEL_138:
  if (v32)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v32 + 8))(v32, a4);
  return v107;
}

uint64_t webrtc::SimulcastEncoderAdapter::RegisterEncodeCompleteCallback(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  a1[73] = a2;
  v2 = a1[70];
  if (v2 == a1[71] || *(_DWORD *)(v2 + 32))
    return 0;
  (*(void (**)(_QWORD))(***(_QWORD ***)(v2 + 16) + 40))(**(_QWORD **)(v2 + 16));
  return 0;
}

void webrtc::SimulcastEncoderAdapter::SetRates(webrtc::SimulcastEncoderAdapter *this, const webrtc::VideoEncoder::RateControlParameters *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  char *v29;
  unsigned int *v30;
  int v31;
  unsigned int *v32;
  int v33;
  char *v34;
  unsigned int *v35;
  int v36;
  unsigned int *v37;
  int v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  std::string *v51;
  float v52;
  void (**v53)(webrtc::VideoEncoder::RateControlParameters *__hidden);
  _QWORD v54[44];

  v9 = atomic_load((unsigned int *)this + 12);
  if (v9 == 1)
  {
    v11 = *((double *)a2 + 43);
    if (v11 >= 1.0)
    {
      *((_DWORD *)this + 47) = (v11 + 0.5);
      v26 = *((_QWORD *)this + 70);
      v27 = *((_QWORD *)this + 71);
      if (*((_BYTE *)this + 556))
      {
        if (v26 != v27)
        {
          (*(void (**)(_QWORD, const webrtc::VideoEncoder::RateControlParameters *))(***(_QWORD ***)(v26 + 16)
                                                                                              + 64))(**(_QWORD **)(v26 + 16), a2);
          return;
        }
        __break(1u);
      }
      else
      {
        if (v26 == v27)
          return;
        while (1)
        {
          v8 = *(int *)(v26 + 32);
          if (v8 > 4)
            break;
          v29 = (char *)a2 + 32 * v8;
          v30 = (unsigned int *)(v29 + 180);
          v31 = v29[184];
          if (v29[184])
            v31 = *v30;
          v32 = (unsigned int *)(v29 + 188);
          v33 = v29[192];
          if (v33)
            v33 = *v32;
          v34 = (char *)a2 + 32 * v8;
          v35 = (unsigned int *)(v34 + 196);
          v36 = v34[200];
          if (v34[200])
            v36 = *v35;
          v37 = (unsigned int *)(v34 + 204);
          v38 = v34[208];
          if (v38)
            v38 = *v37;
          v39 = v33 + v31 + v36 + v38;
          if (v39 >= 0x3E8 && *(_BYTE *)(v26 + 41))
            *(_BYTE *)(v26 + 40) = 1;
          *(_BYTE *)(v26 + 41) = v39 < 0x3E8;
          v53 = &off_24C0C3368;
          memcpy(v54, (char *)a2 + 8, sizeof(v54));
          LODWORD(v54[21]) = 0;
          BYTE4(v54[21]) = 0;
          LOBYTE(v54[22]) = 0;
          BYTE4(v54[22]) = 0;
          LOBYTE(v54[23]) = 0;
          BYTE4(v54[23]) = 0;
          LOBYTE(v54[24]) = 0;
          BYTE4(v54[24]) = 0;
          LOBYTE(v54[25]) = 0;
          BYTE4(v54[25]) = 0;
          LOBYTE(v54[26]) = 0;
          BYTE4(v54[26]) = 0;
          LOBYTE(v54[27]) = 0;
          BYTE4(v54[27]) = 0;
          LOBYTE(v54[28]) = 0;
          BYTE4(v54[28]) = 0;
          LOBYTE(v54[29]) = 0;
          BYTE4(v54[29]) = 0;
          LOBYTE(v54[30]) = 0;
          BYTE4(v54[30]) = 0;
          LOBYTE(v54[31]) = 0;
          BYTE4(v54[31]) = 0;
          LOBYTE(v54[32]) = 0;
          BYTE4(v54[32]) = 0;
          LOBYTE(v54[33]) = 0;
          BYTE4(v54[33]) = 0;
          LOBYTE(v54[34]) = 0;
          BYTE4(v54[34]) = 0;
          LOBYTE(v54[35]) = 0;
          BYTE4(v54[35]) = 0;
          LOBYTE(v54[36]) = 0;
          BYTE4(v54[36]) = 0;
          LOBYTE(v54[37]) = 0;
          BYTE4(v54[37]) = 0;
          LOBYTE(v54[38]) = 0;
          BYTE4(v54[38]) = 0;
          LOBYTE(v54[39]) = 0;
          BYTE4(v54[39]) = 0;
          LOBYTE(v54[40]) = 0;
          BYTE4(v54[40]) = 0;
          LOBYTE(v54[41]) = 0;
          BYTE4(v54[41]) = 0;
          v40 = (char *)a2 + 32 * v8;
          if (v40[184])
          {
            v41 = *v30;
            v42 = v41 + LODWORD(v54[21]);
            if (v42 <= 0xFFFFFFFFLL)
            {
              LOBYTE(v54[22]) = 1;
              v54[21] = __PAIR64__(v41, v42);
            }
          }
          if (v40[192])
          {
            v43 = *v32;
            if (v43 + LODWORD(v54[21]) <= 0xFFFFFFFFLL)
            {
              LOBYTE(v54[23]) = 1;
              HIDWORD(v54[22]) = v43;
              LODWORD(v54[21]) += v43;
            }
          }
          v44 = (char *)a2 + 32 * v8;
          if (v44[200])
          {
            v45 = *v35;
            if (v45 + LODWORD(v54[21]) <= 0xFFFFFFFFLL)
            {
              LOBYTE(v54[24]) = 1;
              HIDWORD(v54[23]) = v45;
              LODWORD(v54[21]) += v45;
            }
          }
          if (v44[208])
          {
            v46 = *v37;
            if (v46 + LODWORD(v54[21]) <= 0xFFFFFFFFLL)
            {
              LOBYTE(v54[25]) = 1;
              HIDWORD(v54[24]) = v46;
              LODWORD(v54[21]) += v46;
            }
          }
          v47 = *((_QWORD *)a2 + 44);
          if (v47)
          {
            v48 = *((unsigned int *)a2 + 44);
            if ((_DWORD)v48)
            {
              v49 = v47 * LODWORD(v54[21]) / v48;
              if (v49 <= LODWORD(v54[21]))
                v49 = LODWORD(v54[21]);
              v54[43] = v49;
            }
          }
          v50 = *(double **)(v26 + 24);
          if (v50)
            v28 = *v50;
          else
            v28 = 0.0;
          if (!v50)
            v28 = *((double *)a2 + 43);
          if (v28 >= *((double *)a2 + 43))
            v28 = *((double *)a2 + 43);
          *(double *)&v54[42] = v28;
          (*(void (**)(_QWORD, void (***)(webrtc::VideoEncoder::RateControlParameters *__hidden)))(***(_QWORD ***)(v26 + 16) + 64))(**(_QWORD **)(v26 + 16), &v53);
          v26 += 48;
          if (v26 == v27)
            return;
        }
      }
      v51 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 73, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v8);
      webrtc::SimulcastEncoderAdapter::OnPacketLossRateUpdate((uint64_t)v51, v52);
      return;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\a", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc");
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc");
  }
}

uint64_t webrtc::SimulcastEncoderAdapter::OnPacketLossRateUpdate(uint64_t this, float a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(this + 560);
  for (i = *(_QWORD *)(this + 568); v2 != i; v2 += 48)
    this = (*(uint64_t (**)(_QWORD, float))(***(_QWORD ***)(v2 + 16) + 72))(**(_QWORD **)(v2 + 16), a2);
  return this;
}

uint64_t webrtc::SimulcastEncoderAdapter::OnRttUpdate(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(this + 560);
  for (i = *(_QWORD *)(this + 568); v2 != i; v2 += 48)
    this = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 16) + 80))(**(_QWORD **)(v2 + 16), a2);
  return this;
}

uint64_t webrtc::SimulcastEncoderAdapter::OnLossNotification(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(result + 560);
  for (i = *(_QWORD *)(result + 568); v2 != i; v2 += 48)
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 16) + 88))(**(_QWORD **)(v2 + 16), a2);
  return result;
}

void webrtc::SimulcastEncoderAdapter::OverrideFromFieldTrial(webrtc::SimulcastEncoderAdapter *this, webrtc::VideoEncoder::EncoderInfo *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _BYTE *v18;
  _BYTE *v19;
  size_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (*((_BYTE *)this + 696) && !*((_DWORD *)this + 173))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/encoder_info_settings.cc");
  }
  else
  {
    v4 = *(_QWORD *)((char *)this + 692);
    if ((v4 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)v4)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/encoder_info_settings.cc");
        __break(1u);
        goto LABEL_24;
      }
      v5 = *((_DWORD *)a2 + 4);
      v6 = v5 % (int)v4;
      v7 = *(_QWORD *)((char *)this + 692);
      if (v5 % (int)v4)
      {
        v8 = *(_QWORD *)((char *)this + 692);
        do
        {
          LODWORD(v7) = v6;
          v6 = (int)v8 % v6;
          LODWORD(v8) = v7;
        }
        while (v6);
      }
      *((_DWORD *)a2 + 4) = (int)v4 / (int)v7 * v5;
      if (*((_BYTE *)a2 + 20))
        v9 = 1;
      else
        v9 = *((_BYTE *)this + 761) != 0;
      *((_BYTE *)a2 + 20) = v9;
    }
  }
  v17 = (void *)*((_QWORD *)a2 + 22);
  if (v17 != *((void **)a2 + 23))
    return;
  v18 = (_BYTE *)*((_QWORD *)this + 96);
  v19 = (_BYTE *)*((_QWORD *)this + 97);
  v20 = v19 - v18;
  if (v19 == v18)
    return;
  if (v19 - v18 < 0)
LABEL_24:
    abort();
  v21 = (char *)operator new(v19 - v18);
  v22 = &v21[v20];
  memcpy(v21, v18, v20);
  if (v17)
  {
    *((_QWORD *)a2 + 23) = v17;
    operator delete(v17);
  }
  *((_QWORD *)a2 + 22) = v21;
  *((_QWORD *)a2 + 23) = v22;
  *((_QWORD *)a2 + 24) = v22;
}

void webrtc::SimulcastEncoderAdapter::GetEncoderInfo(webrtc::SimulcastEncoderAdapter *this@<X0>, uint64_t a2@<X8>)
{
  webrtc::SimulcastEncoderAdapter *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  std::string::size_type v9;
  std::string::size_type v10;
  unsigned __int8 v11;
  size_t v12;
  BOOL v13;
  char *v14;
  unsigned __int8 v15;
  size_t v16;
  BOOL v17;
  char *v18;
  std::string::size_type v19;
  std::string::size_type v21;
  int v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string::size_type v25;
  char *v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string::size_type v30;
  int v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  char *v35;
  std::string::size_type v36;
  __int16 v37;
  BOOL v38;
  __int16 v39;
  unint64_t *v40;
  webrtc::SimulcastEncoderAdapter *v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  unint64_t v58;
  _BYTE *v59;
  char v60;
  char *v61;
  size_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  _OWORD *v67;
  __int128 *v68;
  unint64_t v69;
  __int128 v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char v78;
  int v79;
  unsigned int v80;
  int v81;
  signed int v82;
  int v83;
  uint64_t v84;
  int v85;
  std::string::size_type v86;
  unsigned __int8 *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  std::string::size_type v93;
  _BYTE *v94;
  uint64_t v95;
  BOOL v96;
  BOOL v97;
  _QWORD *v98;
  uint64_t v99;
  std::string *v100;
  void *v101[2];
  signed int v102;
  char v103;
  char v104;
  char *v105;
  size_t v106;
  unsigned __int8 v107;
  __int16 v108;
  unint64_t v109;
  _QWORD *v110;
  __int16 v111;
  uint64_t v112;

  v2 = this;
  v112 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 71);
  v5 = *((_QWORD *)this + 70);
  if (v4 - v5 != 48)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 12) = 0x10000E100;
    *(_WORD *)(a2 + 20) = 0;
    *(_BYTE *)(a2 + 47) = 7;
    v100 = (std::string *)(a2 + 24);
    if (a2 + 24 <= (unint64_t)"unknown" && a2 + 31 > (unint64_t)"unknown")
      goto LABEL_187;
    strcpy((char *)(a2 + 24), "unknown");
    *(_WORD *)(a2 + 48) = 256;
    *(_BYTE *)(a2 + 64) = -1;
    *(_QWORD *)(a2 + 56) = 2;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_BYTE *)(a2 + 200) = 0;
    *(_DWORD *)(a2 + 216) = 1;
    *(_QWORD *)(a2 + 208) = 2;
    *(_WORD *)(a2 + 240) = 0;
    std::string::__assign_external(v100, "SimulcastEncoderAdapter", 0x17uLL);
    *(_DWORD *)(a2 + 16) = 1;
    *(_WORD *)(a2 + 20) = 256;
    if (*(_BYTE *)(a2 + 8))
      *(_BYTE *)(a2 + 8) = 0;
    v6 = *((_QWORD *)v2 + 70);
    if (v6 == *((_QWORD *)v2 + 71))
    {
      webrtc::SimulcastEncoderAdapter::FetchOrCreateEncoderContext((webrtc::SimulcastEncoderAdapter *)v101, (uint64_t)v2, 1);
      v87 = (unsigned __int8 *)v101[0];
      if (v101[0])
      {
        v88 = *((_DWORD *)v101[0] + 8);
        v89 = *((_DWORD *)v101[0] + 70);
        v90 = v88 % v89;
        if (v88 % v89)
        {
          v91 = *((_DWORD *)v101[0] + 70);
          do
          {
            v92 = v90;
            v90 = v91 % v90;
            v91 = v92;
          }
          while (v90);
        }
        else
        {
          v92 = *((_DWORD *)v101[0] + 70);
        }
        *(_DWORD *)(a2 + 16) = v89 / v92 * v88;
        v96 = (v87[36] | v87[284]) != 0;
        *(_BYTE *)(a2 + 20) = v96;
        if (v87[464])
          v97 = v87[216] == 0;
        else
          v97 = 1;
        if (v97)
          v96 = 1;
        *(_BYTE *)(a2 + 20) = v96;
        v98 = operator new(0x18uLL);
        v98[1] = (char *)v2 + 592;
        v98[2] = v87;
        v99 = *((_QWORD *)v2 + 74);
        *v98 = v99;
        *(_QWORD *)(v99 + 8) = v98;
        *((_QWORD *)v2 + 74) = v98;
        ++*((_QWORD *)v2 + 76);
LABEL_185:
        webrtc::SimulcastEncoderAdapter::OverrideFromFieldTrial(v2, (webrtc::VideoEncoder::EncoderInfo *)a2);
      }
      return;
    }
    v7 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = 57600;
    while (1)
    {
      (*(void (**)(void **__return_ptr))(***(_QWORD ***)(v6 + 48 * v7 + 16) + 96))(v101);
      v8 = *(char *)(a2 + 47);
      if (v8 >= 0)
        v9 = 22;
      else
        v9 = (*(_QWORD *)(a2 + 40) & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(a2 + 47);
      else
        v10 = *(_QWORD *)(a2 + 32);
      if (v7)
      {
        if (v9 - v10 >= 2)
        {
          if (v8 >= 0)
            v19 = a2 + 24;
          else
            v19 = v100->__r_.__value_.__r.__words[0];
          if (v19 + v10 <= (unint64_t)", " && v19 + v10 + 2 > (unint64_t)", ")
            goto LABEL_187;
          *(_WORD *)(v19 + v10) = 8236;
          v21 = v10 + 2;
          if (*(char *)(a2 + 47) < 0)
          {
            *(_QWORD *)(a2 + 32) = v21;
            *(_BYTE *)(v19 + v21) = 0;
            v11 = v107;
            if ((char)v107 < 0)
              goto LABEL_35;
          }
          else
          {
            *(_BYTE *)(a2 + 47) = v21 & 0x7F;
            *(_BYTE *)(v19 + v21) = 0;
            v11 = v107;
            if ((char)v107 < 0)
              goto LABEL_35;
          }
LABEL_22:
          v12 = v11;
          v13 = v11 == 0;
          v14 = (char *)&v105;
        }
        else
        {
          std::string::__grow_by_and_replace(v100, v9, v10 - v9 + 2, v10, v10, 0, 2uLL, ", ");
          v11 = v107;
          if (((char)v107 & 0x80000000) == 0)
            goto LABEL_22;
LABEL_35:
          v14 = v105;
          v12 = v106;
          v13 = v106 == 0;
          if (!v105 && v106)
            goto LABEL_187;
        }
        v22 = *(char *)(a2 + 47);
        if (v22 >= 0)
          v23 = 22;
        else
          v23 = (*(_QWORD *)(a2 + 40) & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(a2 + 47);
        else
          v24 = *(_QWORD *)(a2 + 32);
        if (v23 - v24 >= v12)
        {
          if (!v13)
          {
            if (v22 >= 0)
              v25 = a2 + 24;
            else
              v25 = v100->__r_.__value_.__r.__words[0];
            v26 = (char *)(v25 + v24);
            if (v25 + v24 <= (unint64_t)v14 && &v26[v12] > v14)
              goto LABEL_187;
            memmove(v26, v14, v12);
            v27 = v24 + v12;
            if (*(char *)(a2 + 47) < 0)
              *(_QWORD *)(a2 + 32) = v27;
            else
              *(_BYTE *)(a2 + 47) = v27 & 0x7F;
            *(_BYTE *)(v25 + v27) = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(v100, v23, v24 + v12 - v23, v24, v24, 0, v12, v14);
        }
        *(_BYTE *)(a2 + 21) |= v104;
        *(_BYTE *)(a2 + 48) &= v108;
        *(_BYTE *)(a2 + 49) |= HIBYTE(v108);
        if (!*(_BYTE *)(a2 + 241) || (v37 = *(unsigned __int8 *)(a2 + 240), *(_BYTE *)(a2 + 240)))
        {
          if (HIBYTE(v111))
            v38 = v111 == 0;
          else
            v38 = 0;
          v37 = !v38;
        }
        v39 = v37 | 0x100;
        goto LABEL_98;
      }
      if (v9 - v10 >= 2)
      {
        if (v8 >= 0)
          v28 = a2 + 24;
        else
          v28 = v100->__r_.__value_.__r.__words[0];
        if (v28 + v10 <= (unint64_t)" (" && v28 + v10 + 2 > (unint64_t)" (")
          goto LABEL_187;
        *(_WORD *)(v28 + v10) = 10272;
        v30 = v10 + 2;
        if (*(char *)(a2 + 47) < 0)
        {
          *(_QWORD *)(a2 + 32) = v30;
          *(_BYTE *)(v28 + v30) = 0;
          v15 = v107;
          if ((char)v107 < 0)
          {
LABEL_62:
            v18 = v105;
            v16 = v106;
            v17 = v106 == 0;
            if (!v105 && v106)
              goto LABEL_187;
            goto LABEL_64;
          }
        }
        else
        {
          *(_BYTE *)(a2 + 47) = v30 & 0x7F;
          *(_BYTE *)(v28 + v30) = 0;
          v15 = v107;
          if ((char)v107 < 0)
            goto LABEL_62;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(v100, v9, v10 - v9 + 2, v10, v10, 0, 2uLL, " (");
        v15 = v107;
        if ((char)v107 < 0)
          goto LABEL_62;
      }
      v16 = v15;
      v17 = v15 == 0;
      v18 = (char *)&v105;
LABEL_64:
      v31 = *(char *)(a2 + 47);
      if (v31 >= 0)
        v32 = 22;
      else
        v32 = (*(_QWORD *)(a2 + 40) & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v31 >= 0)
        v33 = *(unsigned __int8 *)(a2 + 47);
      else
        v33 = *(_QWORD *)(a2 + 32);
      if (v32 - v33 >= v16)
      {
        if (!v17)
        {
          if (v31 >= 0)
            v34 = a2 + 24;
          else
            v34 = v100->__r_.__value_.__r.__words[0];
          v35 = (char *)(v34 + v33);
          if (v34 + v33 <= (unint64_t)v18 && &v35[v16] > v18)
            goto LABEL_187;
          memmove(v35, v18, v16);
          v36 = v33 + v16;
          if (*(char *)(a2 + 47) < 0)
            *(_QWORD *)(a2 + 32) = v36;
          else
            *(_BYTE *)(a2 + 47) = v36 & 0x7F;
          *(_BYTE *)(v34 + v36) = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(v100, v32, v33 + v16 - v32, v33, v33, 0, v16, v18);
      }
      *(_BYTE *)(a2 + 21) = v104;
      *(_WORD *)(a2 + 48) = v108;
      v39 = v111;
LABEL_98:
      *(_WORD *)(a2 + 240) = v39;
      v40 = (unint64_t *)(a2 + 24 * v7 + 56);
      if (v40 == &v109)
        goto LABEL_148;
      v41 = v2;
      v42 = v109;
      if ((v109 & 1) != 0)
        v43 = v110;
      else
        v43 = &v110;
      v44 = *v40;
      if ((*v40 & 1) != 0)
      {
        v45 = *(_QWORD *)(a2 + 24 * v7 + 64);
        v46 = *(_QWORD *)(a2 + 24 * v7 + 72);
        v47 = v109 >> 1;
        if (v46 < v109 >> 1)
        {
LABEL_122:
          if (2 * v46 <= v47)
            v62 = v47;
          else
            v62 = 2 * v46;
          v61 = (char *)operator new(v62);
          v63 = v61;
          v64 = 0;
          if (v47 < 8)
            goto LABEL_129;
          goto LABEL_126;
        }
      }
      else
      {
        v45 = a2 + 24 * v7 + 64;
        v46 = 16;
        v47 = v109 >> 1;
        if (v109 >> 1 > 0x10)
          goto LABEL_122;
      }
      v48 = v44 >> 1;
      v49 = v47 >= v44 >> 1;
      v50 = v47 - (v44 >> 1);
      if (!v49)
        v50 = 0;
      if (v48 >= v47)
        v51 = v47;
      else
        v51 = v48;
      if (v51)
      {
        v52 = 0;
        if (v51 < 0x20)
          goto LABEL_115;
        if ((unint64_t)(v45 - (_QWORD)v43) < 0x20)
          goto LABEL_115;
        v52 = v51 & 0x7FFFFFFFFFFFFFE0;
        v53 = (char *)v43 + (v51 & 0x7FFFFFFFFFFFFFE0);
        v54 = (_OWORD *)(v45 + 16);
        v55 = (__int128 *)(v43 + 2);
        v56 = v51 & 0x7FFFFFFFFFFFFFE0;
        do
        {
          v57 = *v55;
          *(v54 - 1) = *(v55 - 1);
          *v54 = v57;
          v54 += 2;
          v55 += 2;
          v56 -= 32;
        }
        while (v56);
        v43 = (_QWORD *)((char *)v43 + (v51 & 0x7FFFFFFFFFFFFFE0));
        if (v51 != v52)
        {
LABEL_115:
          v58 = v51 - v52;
          v59 = (_BYTE *)(v45 + v52);
          v53 = (char *)v43;
          do
          {
            v60 = *v53++;
            *v59++ = v60;
            --v58;
          }
          while (v58);
        }
        if (v48 < v47)
        {
LABEL_118:
          if (!v45)
            goto LABEL_187;
          v61 = 0;
          v62 = 0;
          v63 = (char *)(v45 + v48);
          v47 = v50;
          v43 = v53;
          v64 = 0;
          if (v47 < 8)
          {
LABEL_129:
            v65 = (char *)v43;
            goto LABEL_141;
          }
LABEL_126:
          if ((unint64_t)(v63 - (char *)v43) < 0x20)
            goto LABEL_129;
          if (v47 >= 0x20)
          {
            v64 = v47 & 0xFFFFFFFFFFFFFFE0;
            v67 = v63 + 16;
            v68 = (__int128 *)(v43 + 2);
            v69 = v47 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v70 = *v68;
              *(v67 - 1) = *(v68 - 1);
              *v67 = v70;
              v67 += 2;
              v68 += 2;
              v69 -= 32;
            }
            while (v69);
            if (v47 != v64)
            {
              if ((v47 & 0x18) == 0)
              {
                v65 = (char *)v43 + v64;
                goto LABEL_141;
              }
              goto LABEL_136;
            }
          }
          else
          {
            v64 = 0;
LABEL_136:
            v71 = v64;
            v64 = v47 & 0xFFFFFFFFFFFFFFF8;
            v65 = (char *)v43 + (v47 & 0xFFFFFFFFFFFFFFF8);
            v72 = &v63[v71];
            v73 = (_QWORD *)((char *)v43 + v71);
            v74 = v71 - (v47 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v75 = *v73++;
              *(_QWORD *)v72 = v75;
              v72 += 8;
              v74 += 8;
            }
            while (v74);
            if (v47 != v64)
            {
LABEL_141:
              v76 = v47 - v64;
              v77 = &v63[v64];
              do
              {
                v78 = *v65++;
                *v77++ = v78;
                --v76;
              }
              while (v76);
            }
          }
          v66 = *v40;
          if (v61)
          {
            if ((v66 & 1) != 0)
              operator delete(*(void **)(a2 + 24 * v7 + 64));
            *(_QWORD *)(a2 + 24 * v7 + 64) = v61;
            *(_QWORD *)(a2 + 24 * v7 + 72) = v62;
            LOBYTE(v66) = 1;
          }
          goto LABEL_147;
        }
      }
      else
      {
        v53 = (char *)v43;
        if (v48 < v47)
          goto LABEL_118;
      }
      v66 = *v40;
LABEL_147:
      *v40 = v42 & 0xFFFFFFFFFFFFFFFELL | v66 & 1;
      v2 = v41;
LABEL_148:
      v79 = *(_DWORD *)(a2 + 16);
      v80 = v102;
      v81 = v79 % v102;
      if (v79 % v102)
      {
        v82 = v102;
        do
        {
          v83 = v81;
          v81 = v82 % v81;
          v82 = v83;
        }
        while (v81);
        *(_DWORD *)(a2 + 16) = v102 / v83 * v79;
        if (!v103)
        {
LABEL_152:
          if (v80 < 2
            || *((_DWORD *)v2 + 9 * v7 + 52) >= (int)*((unsigned __int16 *)v2 + 87)
            && *((_DWORD *)v2 + 9 * v7 + 51) >= (int)*((unsigned __int16 *)v2 + 86))
          {
            goto LABEL_12;
          }
        }
      }
      else
      {
        *(_DWORD *)(a2 + 16) = v102 / v102 * v79;
        if (!v103)
          goto LABEL_152;
      }
      *(_BYTE *)(a2 + 20) = 1;
LABEL_12:
      webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v101);
      ++v7;
      v6 = *((_QWORD *)v2 + 70);
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v2 + 71) - v6) >> 4))
      {
        v84 = *(unsigned __int8 *)(a2 + 47);
        v85 = (char)v84;
        if ((v84 & 0x80u) == 0)
          v86 = 22;
        else
          v86 = (*(_QWORD *)(a2 + 40) & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v84 & 0x80u) != 0)
          v84 = *(_QWORD *)(a2 + 32);
        if (v86 == v84)
        {
          std::string::__grow_by_and_replace(v100, v86, 1uLL, v86, v86, 0, 1uLL, ")");
          goto LABEL_185;
        }
        if (v85 >= 0)
          v93 = a2 + 24;
        else
          v93 = v100->__r_.__value_.__r.__words[0];
        v94 = (_BYTE *)(v93 + v84);
        if (v93 + v84 > (unint64_t)")" || v94 + 1 <= ")")
        {
          *v94 = 41;
          v95 = v84 + 1;
          if (*(char *)(a2 + 47) < 0)
            *(_QWORD *)(a2 + 32) = v95;
          else
            *(_BYTE *)(a2 + 47) = v95 & 0x7F;
          *(_BYTE *)(v93 + v95) = 0;
          goto LABEL_185;
        }
LABEL_187:
        __break(1u);
      }
    }
  }
  if (v5 == v4)
    goto LABEL_187;
  (*(void (**)(_QWORD))(***(_QWORD ***)(v5 + 16) + 96))(**(_QWORD **)(v5 + 16));
  webrtc::SimulcastEncoderAdapter::OverrideFromFieldTrial(v2, (webrtc::VideoEncoder::EncoderInfo *)a2);
}

char *std::vector<webrtc::SimulcastEncoderAdapter::StreamContext>::__emplace_back_slow_path<decltype(nullptr),std::unique_ptr<webrtc::SimulcastEncoderAdapter::EncoderContext>,decltype(nullptr),int,unsigned short &,unsigned short &,BOOL>(void **a1, uint64_t *a2, int a3, __int16 a4, __int16 a5, char a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (***v31)(char *);
  void (**v32)(char *);
  BOOL v33;

  v6 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v7)
    v7 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v7;
  if (!v9)
  {
    __break(1u);
LABEL_25:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v9 > 0x555555555555555)
    goto LABEL_25;
  v15 = 48 * v9;
  v16 = (char *)operator new(48 * v9);
  v17 = &v16[v15];
  v18 = *a2;
  *a2 = 0;
  v19 = &v16[48 * v6];
  *(_QWORD *)v19 = &off_24C0C0D68;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = v18;
  *((_QWORD *)v19 + 3) = 0;
  *((_DWORD *)v19 + 8) = a3;
  *((_WORD *)v19 + 18) = a4;
  *((_WORD *)v19 + 19) = a5;
  v19[40] = 0;
  v19[41] = a6;
  v20 = v19 + 48;
  v22 = (char *)*a1;
  v21 = (char *)a1[1];
  if (v21 == *a1)
  {
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v17;
    if (!v21)
      return v19 + 48;
    goto LABEL_19;
  }
  v23 = 0;
  do
  {
    *(_QWORD *)&v19[v23 - 48] = &off_24C0C0D68;
    v24 = (uint64_t)&v19[v23 - 48];
    v25 = &v21[v23];
    v26 = *(_QWORD *)&v21[v23 - 40];
    *(_QWORD *)(v24 + 8) = v26;
    v27 = *(_QWORD **)&v21[v23 - 32];
    *((_QWORD *)v25 - 4) = 0;
    *(_QWORD *)(v24 + 16) = v27;
    v28 = *(_QWORD *)&v21[v23 - 24];
    *((_QWORD *)v25 - 3) = 0;
    *(_QWORD *)(v24 + 24) = v28;
    *(_DWORD *)(v24 + 32) = *(_DWORD *)&v21[v23 - 16];
    *(_WORD *)(v24 + 36) = *(_WORD *)&v21[v23 - 12];
    *(_DWORD *)(v24 + 38) = *(_DWORD *)&v21[v23 - 10];
    if (v26)
      (*(void (**)(_QWORD))(*(_QWORD *)*v27 + 40))(*v27);
    v23 -= 48;
  }
  while (&v21[v23] != v22);
  v21 = (char *)*a1;
  v29 = (char *)a1[1];
  *a1 = &v19[v23];
  a1[1] = v20;
  a1[2] = v17;
  if (v29 != v21)
  {
    v30 = v29 - 48;
    v31 = (void (***)(char *))(v29 - 48);
    do
    {
      v32 = *v31;
      v31 -= 6;
      (*v32)(v30);
      v33 = v30 == v21;
      v30 = (char *)v31;
    }
    while (!v33);
  }
  if (v21)
LABEL_19:
    operator delete(v21);
  return v19 + 48;
}

webrtc::SimulcastRateAllocator *webrtc::SimulcastRateAllocator::SimulcastRateAllocator(webrtc::SimulcastRateAllocator *this, const webrtc::VideoCodec *a2)
{
  void **v3;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void *v8;
  void *v10;
  void *__p;
  void **v12;
  uint64_t v13;

  *(_QWORD *)this = off_24C0C0E10;
  memcpy((char *)this + 8, a2, 0x180uLL);
  v12 = 0;
  v13 = 0;
  v10 = &unk_24C0B3F60;
  __p = 0;
  webrtc::StableTargetRateExperiment::StableTargetRateExperiment((uint64_t)this + 392, (uint64_t)&v10, 1.2, 1.35);
  v10 = &unk_24C0B4260;
  v3 = (void **)__p;
  if (__p)
  {
    v4 = v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  v12 = 0;
  v13 = 0;
  v10 = &unk_24C0B3F60;
  __p = 0;
  webrtc::RateControlSettings::RateControlSettings((uint64_t)this + 600, (uint64_t)&v10);
  v10 = &unk_24C0B4260;
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v12;
    v8 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v12 = v6;
    operator delete(v8);
  }
  *((_BYTE *)this + 712) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_OWORD *)this + 43) = 0u;
  return this;
}

void webrtc::SimulcastRateAllocator::~SimulcastRateAllocator(webrtc::SimulcastRateAllocator *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_24C0C0E10;
  v2 = (void *)*((_QWORD *)this + 86);
  if (v2)
    operator delete(v2);
  *((_QWORD *)this + 66) = off_24C0B4170;
  if ((*((char *)this + 583) & 0x80000000) == 0)
  {
    v3 = (void *)*((_QWORD *)this + 67);
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*((void **)this + 70));
  v3 = (void *)*((_QWORD *)this + 67);
  if (v3)
  {
LABEL_5:
    *((_QWORD *)this + 68) = v3;
    operator delete(v3);
  }
LABEL_6:
  *((_QWORD *)this + 57) = off_24C0B4170;
  if ((*((char *)this + 511) & 0x80000000) == 0)
  {
    v4 = (void *)*((_QWORD *)this + 58);
    if (!v4)
      goto LABEL_9;
    goto LABEL_8;
  }
  operator delete(*((void **)this + 61));
  v4 = (void *)*((_QWORD *)this + 58);
  if (v4)
  {
LABEL_8:
    *((_QWORD *)this + 59) = v4;
    operator delete(v4);
  }
LABEL_9:
  *((_QWORD *)this + 49) = off_24C0B4170;
  if (*((char *)this + 447) < 0)
  {
    operator delete(*((void **)this + 53));
    v5 = (void *)*((_QWORD *)this + 50);
    if (!v5)
      return;
  }
  else
  {
    v5 = (void *)*((_QWORD *)this + 50);
    if (!v5)
      return;
  }
  *((_QWORD *)this + 51) = v5;
  operator delete(v5);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_24C0C0E10;
  v2 = (void *)*((_QWORD *)this + 86);
  if (v2)
    operator delete(v2);
  *((_QWORD *)this + 66) = off_24C0B4170;
  if (*((char *)this + 583) < 0)
  {
    operator delete(*((void **)this + 70));
    v3 = (void *)*((_QWORD *)this + 67);
    if (!v3)
    {
LABEL_6:
      *((_QWORD *)this + 57) = off_24C0B4170;
      if (*((char *)this + 511) < 0)
      {
        operator delete(*((void **)this + 61));
        v4 = (void *)*((_QWORD *)this + 58);
        if (!v4)
        {
LABEL_9:
          *((_QWORD *)this + 49) = off_24C0B4170;
          if (*((char *)this + 447) < 0)
          {
            operator delete(*((void **)this + 53));
            v5 = (void *)*((_QWORD *)this + 50);
            if (!v5)
              goto LABEL_18;
          }
          else
          {
            v5 = (void *)*((_QWORD *)this + 50);
            if (!v5)
              goto LABEL_18;
          }
          *((_QWORD *)this + 51) = v5;
          operator delete(v5);
LABEL_18:
          JUMPOUT(0x20BD0ADECLL);
        }
      }
      else
      {
        v4 = (void *)*((_QWORD *)this + 58);
        if (!v4)
          goto LABEL_9;
      }
      *((_QWORD *)this + 59) = v4;
      operator delete(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v3 = (void *)*((_QWORD *)this + 67);
    if (!v3)
      goto LABEL_6;
  }
  *((_QWORD *)this + 68) = v3;
  operator delete(v3);
  goto LABEL_6;
}

void webrtc::SimulcastRateAllocator::Allocate(webrtc::SimulcastRateAllocator *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 20) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 28) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 44) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 52) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 60) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 68) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 76) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 84) = 0;
  *(_BYTE *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 92) = 0;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 100) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  *(_BYTE *)(a3 + 108) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 116) = 0;
  *(_BYTE *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 124) = 0;
  *(_BYTE *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 132) = 0;
  *(_BYTE *)(a3 + 136) = 0;
  *(_BYTE *)(a3 + 140) = 0;
  *(_BYTE *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 148) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 156) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  *(_BYTE *)(a3 + 164) = 0;
  v5 = *a2;
  if (*((_BYTE *)a1 + 449))
  {
    v6 = a2[1];
    if (*a2 >= v6)
      v7 = a2[1];
    else
      v7 = *a2;
    if (v6 <= 0)
      v5 = *a2;
    else
      v5 = v7;
  }
  webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers((uint64_t)a1, *a2, v5, (unsigned int *)a3);
  webrtc::SimulcastRateAllocator::DistributeAllocationToTemporalLayers(a1, (webrtc::VideoBitrateAllocation *)a3, v8, v9, v10, v11, v12, v13);
}

void webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64x2_t *v12;
  __n128 *v13;
  unint64_t v14;
  uint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64x2_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  int64x2_t v24;
  uint64_t v25;
  const std::nothrow_t *v26;
  unint64_t v27;
  char *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  _DWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  std::string *v74;
  webrtc::VideoBitrateAllocation *v75;
  uint64_t v76;

  v6 = *(_DWORD *)(a1 + 20);
  v7 = 1000 * v6;
  if (v7 >= a2)
    v8 = a2;
  else
    v8 = 1000 * v6;
  if (v7 >= a3)
    v7 = a3;
  if (v6)
    v9 = v7;
  else
    v9 = a3;
  if (v6)
    v10 = v8;
  else
    v10 = a2;
  v11 = *(unsigned __int8 *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40))
  {
    v12 = (int64x2_t *)operator new(8 * v11);
    v13 = (__n128 *)((char *)v12 + 8 * v11);
    bzero(v12, 8 * v11);
    v14 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v14 >= 3)
    {
      v20 = v14 + 1;
      v15 = (v14 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v16 = (__n128 *)((char *)v12 + 8 * v15);
      v21 = (int64x2_t)xmmword_208F05120;
      v22 = v12 + 1;
      v23 = vdupq_n_s64(2uLL);
      v24 = vdupq_n_s64(4uLL);
      v25 = v15;
      do
      {
        v22[-1] = v21;
        *v22 = vaddq_s64(v21, v23);
        v21 = vaddq_s64(v21, v24);
        v22 += 2;
        v25 -= 4;
      }
      while (v25);
      if (v20 == v15)
      {
LABEL_26:
        v76 = a1;
        if (v11 < 0x81)
        {
LABEL_30:
          std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(v12->i8, v13, &v76, v11, 0, 0);
          v34 = *(unsigned __int8 *)(a1 + 40);
          if (!*(_BYTE *)(a1 + 40))
          {
LABEL_37:
            v35 = 0;
LABEL_38:
            if (v35 == v34)
              goto LABEL_115;
            if (v35 >= v11)
              goto LABEL_119;
            v37 = 1000 * *(unsigned int *)(a1 + 36 * v12->i64[v35] + 68);
            if (v10 <= v37)
              v38 = 1000 * *(unsigned int *)(a1 + 36 * v12->i64[v35] + 68);
            else
              v38 = v10;
            if (v9 <= v37)
              v39 = 1000 * *(unsigned int *)(a1 + 36 * v12->i64[v35] + 68);
            else
              v39 = v9;
            v40 = (_QWORD *)(a1 + 688);
            v41 = *(_QWORD *)(a1 + 696);
            if (v41)
            {
              if (v35 < v34)
                goto LABEL_48;
            }
            else
            {
              std::vector<BOOL>::resize(a1 + 688, v34, 0);
              v34 = *(unsigned __int8 *)(a1 + 40);
              if (v35 < v34)
              {
LABEL_48:
                if (v35 <= v11)
                  v42 = v11;
                else
                  v42 = v35;
                v43 = v35;
                while (v42 != v35)
                {
                  v44 = v12->u64[v35];
                  v45 = v44 >> 3;
                  if (*(_BYTE *)(a1 + 36 * v44 + 76))
                  {
                    v46 = 1000 * *(unsigned int *)(a1 + 36 * v44 + 68);
                    v47 = 1000 * *(unsigned int *)(a1 + 36 * v44 + 64);
                    if (*(_DWORD *)(a1 + 332))
                      v30 = 592;
                    else
                      v30 = 520;
                    if (v41)
                    {
                      v32 = v45 & 0x1FFFFFFFFFFFFFF8;
                      v31 = *(_QWORD *)(*v40 + (v45 & 0x1FFFFFFFFFFFFFF8)) >> v44;
                      if ((v31 & 1) == 0)
                      {
                        v46 = llround(*(double *)(a1 + v30) * (double)v46);
                        if (v47 < v46)
                          v46 = 1000 * *(unsigned int *)(a1 + 36 * v44 + 64);
                      }
                    }
                    if (v39 < v46)
                    {
                      *((_BYTE *)a4 + 164) = 1;
                      v34 = v34;
                      v57 = v34 - v35;
                      if (v34 > v35)
                        goto LABEL_93;
                      goto LABEL_97;
                    }
                    *(_QWORD *)(*v40 + (v45 & 0x1FFFFFFFFFFFFFF8)) |= 1 << v44;
                    if (v47 >= v38)
                      v48 = v38;
                    else
                      v48 = v47;
                    v34 = v12->u64[v35];
                    if (v34 >= 5)
                      goto LABEL_120;
                    v49 = *a4;
                    v50 = &a4[8 * v34];
                    v51 = v50 + 1;
                    if (*((_BYTE *)v50 + 8))
                      v49 -= *v51;
                    v52 = v49 + v48;
                    if (v52 <= 0xFFFFFFFFLL)
                    {
                      *v51 = v48;
                      *((_BYTE *)v50 + 8) = 1;
                      *a4 = v52;
                    }
                    v53 = v38 - v48;
                    if (v38 == 0x8000000000000000)
                      v53 = 0x8000000000000000;
                    if (v48 == 0x8000000000000000 || v38 == 0x7FFFFFFFFFFFFFFFLL)
                      v38 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v38 = v53;
                    if (v47 >= v39)
                      v55 = v39;
                    else
                      v55 = v47;
                    if (v39 == 0x7FFFFFFFFFFFFFFFLL || v55 == 0x8000000000000000)
                    {
                      v39 = 0x7FFFFFFFFFFFFFFFLL;
                      v43 = v44;
                      ++v35;
                      v34 = *(unsigned __int8 *)(a1 + 40);
                      if (v35 >= v34)
                        goto LABEL_92;
                    }
                    else
                    {
                      v56 = v39 - v55;
                      if (v39 != 0x8000000000000000)
                        v39 = v56;
                      v43 = v44;
                      ++v35;
                      v34 = *(unsigned __int8 *)(a1 + 40);
                      if (v35 >= v34)
                        goto LABEL_92;
                    }
                  }
                  else
                  {
                    *(_QWORD *)(*v40 + (v45 & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v44);
                    ++v35;
                    v34 = *(unsigned __int8 *)(a1 + 40);
                    if (v35 >= v34)
                      goto LABEL_92;
                  }
                }
                goto LABEL_119;
              }
            }
            v43 = v35;
LABEL_92:
            v57 = v34 - v35;
            if (v34 > v35)
            {
LABEL_93:
              v58 = &v12->i64[v35];
              v59 = v11 - v35;
              if (v11 < v35)
                v59 = 0;
              while (v59)
              {
                v60 = *v58++;
                *(_QWORD *)(*v40 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v60);
                --v59;
                if (!--v57)
                  goto LABEL_97;
              }
LABEL_119:
              __break(1u);
LABEL_120:
              rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 27, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v30, v31, v32, v33, v34);
              goto LABEL_121;
            }
LABEL_97:
            if (v38 < 1)
              goto LABEL_115;
            if (v43 > 4)
            {
LABEL_121:
              v74 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 73, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v30, v31, v32, v33, v43);
              webrtc::SimulcastRateAllocator::DistributeAllocationToTemporalLayers((webrtc::SimulcastRateAllocator *)v74, v75);
              return;
            }
            v61 = &a4[8 * v43];
            v62 = v61 + 1;
            v63 = *((unsigned __int8 *)v61 + 8);
            if (*((_BYTE *)v61 + 8))
            {
              v64 = *v62;
              if (*((_BYTE *)v61 + 16))
                goto LABEL_101;
            }
            else
            {
              v64 = 0;
              if (*((_BYTE *)v61 + 16))
              {
LABEL_101:
                v65 = v61[3];
                v66 = &a4[8 * v43];
                v67 = *((unsigned __int8 *)v66 + 24);
                if (!*((_BYTE *)v66 + 24))
                {
LABEL_103:
                  if (*((_BYTE *)v66 + 32))
                    v68 = v66[7];
                  else
                    v68 = 0;
                  v69 = v65 + v64 + v67 + v68;
                  v70 = 1000 * *(unsigned int *)(a1 + 36 * v43 + 60) - v69;
                  if (v70 >= v38)
                    LODWORD(v70) = v38;
                  v71 = v69 + v70;
                  v72 = *a4;
                  if (v63)
                    v72 -= *v62;
                  v73 = v72 + v71;
                  if (v73 <= 0xFFFFFFFFLL)
                  {
                    *v62 = v71;
                    *((_BYTE *)v62 + 4) = 1;
                    *a4 = v73;
                  }
LABEL_115:
                  operator delete(v12);
                  return;
                }
LABEL_102:
                v67 = v66[5];
                goto LABEL_103;
              }
            }
            v65 = 0;
            v66 = &a4[8 * v43];
            v67 = *((unsigned __int8 *)v66 + 24);
            if (!*((_BYTE *)v66 + 24))
              goto LABEL_103;
            goto LABEL_102;
          }
        }
        else
        {
          v26 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          v27 = v11;
          while (1)
          {
            v28 = (char *)operator new(8 * v27, v26);
            if (v28)
              break;
            v29 = v27 > 1;
            v27 >>= 1;
            if (!v29)
              goto LABEL_30;
          }
          v36 = v28;
          std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(v12->i8, v13, &v76, v11, v28, v27);
          operator delete(v36);
          v34 = *(unsigned __int8 *)(a1 + 40);
          if (!*(_BYTE *)(a1 + 40))
            goto LABEL_37;
        }
        v35 = 0;
        while (v11 != v35)
        {
          if (*(_BYTE *)(a1 + 36 * v12->i64[v35] + 76))
            goto LABEL_38;
          if (v34 == ++v35)
            goto LABEL_115;
        }
        goto LABEL_119;
      }
    }
    else
    {
      v15 = 0;
      v16 = (__n128 *)v12;
    }
    do
    {
      v16->n128_u64[0] = v15;
      v16 = (__n128 *)((char *)v16 + 8);
      ++v15;
    }
    while (v16 != v13);
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v17 = 1000 * *(unsigned int *)(a1 + 24);
    if (v17 <= v10)
      LODWORD(v17) = v10;
    v18 = *a4;
    if (*((_BYTE *)a4 + 8))
      v18 -= a4[1];
    v19 = v18 + v17;
    if (v19 <= 0xFFFFFFFFLL)
    {
      *((_BYTE *)a4 + 8) = 1;
      *a4 = v19;
      a4[1] = v17;
    }
  }
}

void webrtc::SimulcastRateAllocator::DistributeAllocationToTemporalLayers(webrtc::SimulcastRateAllocator *this, webrtc::VideoBitrateAllocation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  webrtc::VideoBitrateAllocation *v8;
  webrtc::SimulcastRateAllocator *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  unsigned int v15;
  int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  float v31;
  BOOL v32;
  float *v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  webrtc::SimulcastRateAllocator *v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int *v40;
  unint64_t v41;
  unsigned int *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  unsigned int *v47;
  uint64_t v48;
  __int128 v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  BOOL v56;
  unsigned int v57;
  unsigned int *v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  char *v66;
  int *v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  char *v72;
  int *v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  char *v78;
  int *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  std::string *v83;
  char v84;
  char *v85;
  uint64_t v86;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;

  v8 = a2;
  v9 = this;
  v10 = 0;
  if (*((unsigned __int8 *)this + 40) <= 1u)
    v11 = 1;
  else
    v11 = *((unsigned __int8 *)this + 40);
  v12 = (char *)this + 364;
  v86 = v11;
  v85 = (char *)this + 364;
  while (1)
  {
    if (v10 == 5)
    {
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 54, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, 5);
      goto LABEL_125;
    }
    v13 = (char *)v8 + 32 * v10;
    if (v13[8])
    {
      v14 = (int *)(v13 + 4);
      v15 = *((_DWORD *)v13 + 1);
      if (v15 >= 0x3E8)
        break;
    }
LABEL_6:
    if (++v10 == v11)
      return;
  }
  v16 = *((_DWORD *)v9 + 2);
  if (v16 != 1 || (v17 = (unsigned __int8 *)v12, *((_BYTE *)v9 + 40)))
    v17 = (unsigned __int8 *)v9 + 36 * v10 + 56;
  v18 = v15 / 0x3E8;
  v19 = *v17;
  v91 = v14;
  if (*((_DWORD *)v9 + 83) == 1 && !v10 && *((_BYTE *)v9 + 712))
  {
    v20 = v12;
    if (v18 >= 0x3E8)
      v21 = 1000;
    else
      v21 = v18;
    if (v18 >= 0xC8)
      v18 = 200;
    if (v19 > 1)
    {
      v22 = (unsigned int *)operator new(4uLL);
      *v22 = v18;
      v23 = v22 + 1;
      v56 = v21 >= v18;
      v57 = v21 - v18;
      if (v57 != 0 && v56)
      {
        v58 = (unsigned int *)operator new(8uLL);
        *v58 = v18;
        v58[1] = v57;
        v23 = v58 + 2;
        operator delete(v22);
        v22 = v58;
      }
      v12 = v20;
      goto LABEL_87;
    }
    v12 = v20;
LABEL_24:
    v22 = (unsigned int *)operator new(4uLL);
    *v22 = v18;
    v23 = v22 + 1;
    goto LABEL_87;
  }
  if (v19 < 2)
    goto LABEL_24;
  if (v16 != 1 || (v24 = (unsigned __int8 *)v12, *((_BYTE *)v9 + 40)))
    v24 = (unsigned __int8 *)v9 + 36 * v10 + 56;
  v89 = v10;
  v90 = v18;
  v25 = *v24;
  v88 = v25;
  if (v25 <= 1)
    v26 = 1;
  else
    v26 = v25;
  if (v26 > 4)
    goto LABEL_126;
  v22 = 0;
  v27 = 0;
  v23 = 0;
  v28 = 0;
  v29 = 0;
  v30 = (v26 - 1);
  v31 = (float)(int)v18;
  v92 = v30;
  v93 = v26;
  do
  {
    while (1)
    {
      if (v28 == v26)
        goto LABEL_121;
      if (*((_BYTE *)v9 + 681))
        v32 = (_DWORD)v26 == 3;
      else
        v32 = 0;
      if (v32)
      v34 = ((float)(v33[v28] * v31) + 0.5);
      if (v23 < v27)
        break;
      v35 = v23 - v29;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 62)
        goto LABEL_122;
      if (((char *)v27 - (char *)v29) >> 1 > v36)
        v36 = ((char *)v27 - (char *)v29) >> 1;
      if ((unint64_t)((char *)v27 - (char *)v29) >= 0x7FFFFFFFFFFFFFFCLL)
        v36 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v36)
        goto LABEL_120;
      if (v36 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v37 = v9;
      v38 = 4 * v36;
      v39 = operator new(4 * v36);
      v22 = (unsigned int *)&v39[4 * v35];
      *v22 = v34;
      v40 = v22 + 1;
      if (v23 != v29)
      {
        v41 = (char *)v23 - (char *)v29 - 4;
        if (v41 >= 0xBC)
        {
          v43 = ((char *)(v23 - 1) - (char *)v29) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v39[(char *)v23 - (char *)v29 - 4 - v43] > &v39[(char *)v23 - (char *)v29 - 4])
          {
            v42 = v23;
          }
          else if ((unsigned int *)((char *)v23 - v43 - 4) > v23 - 1)
          {
            v42 = v23;
          }
          else if ((unint64_t)((char *)v29 - v39) >= 0x20)
          {
            v44 = (v41 >> 2) + 1;
            v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
            v42 = &v23[v45 / 0xFFFFFFFFFFFFFFFCLL];
            v22 = (unsigned int *)((char *)v22 - v45);
            v46 = &v39[4 * v35 - 16];
            v47 = v23 - 4;
            v48 = v44 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v49 = *(_OWORD *)v47;
              *(v46 - 1) = *((_OWORD *)v47 - 1);
              *v46 = v49;
              v46 -= 2;
              v47 -= 8;
              v48 -= 8;
            }
            while (v48);
            if (v44 == (v44 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_64;
          }
          else
          {
            v42 = v23;
          }
        }
        else
        {
          v42 = v23;
        }
        do
        {
          v50 = *--v42;
          *--v22 = v50;
        }
        while (v42 != v29);
      }
LABEL_64:
      v27 = (unsigned int *)&v39[v38];
      if (v29)
        operator delete(v29);
      v29 = v22;
      v23 = v40;
      v9 = v37;
      v30 = v92;
      v26 = v93;
      if (++v28 == v93)
        goto LABEL_66;
    }
    if (!v23)
      goto LABEL_120;
    *v23++ = v34;
    ++v28;
  }
  while (v28 != v26);
LABEL_66:
  v51 = (char *)v23 - (char *)v22;
  v11 = v86;
  v8 = a2;
  v10 = v89;
  v12 = v85;
  if (v23 == v22)
    goto LABEL_120;
  if (*v22 >= v90)
  {
    v55 = 1;
    goto LABEL_79;
  }
  if (v88 >= 2)
  {
    if (v51 != 4)
    {
      v52 = v22[1];
      v22[1] = v52 - *v22;
      if (v52 >= v90)
      {
        v55 = 2;
        goto LABEL_79;
      }
      if ((_DWORD)v26 == 2)
        goto LABEL_81;
      if (v51 != 8)
      {
        v53 = v22[2];
        v22[2] = v53 - v52;
        if (v53 >= v90)
        {
          v55 = 3;
          goto LABEL_79;
        }
        if ((_DWORD)v26 == 3)
          goto LABEL_81;
        if (v51 != 12)
        {
          v54 = v22[3];
          v22[3] = v54 - v53;
          if (v54 >= v90)
          {
            v55 = 4;
LABEL_79:
            if (v51 >> 2 > v55)
              v23 = &v22[v55];
          }
          goto LABEL_81;
        }
      }
    }
LABEL_120:
    __break(1u);
LABEL_121:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/simulcast_rate_allocator.cc", 54, "temporal_id < num_layers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v26);
LABEL_122:
    abort();
  }
LABEL_81:
  if (v23 == v22)
  {
LABEL_5:
    operator delete(v22);
    goto LABEL_6;
  }
LABEL_87:
  v59 = v23 - v22;
  if (v59 <= 1)
    v59 = 1;
  v60 = *v22;
  if (*v22)
  {
    v61 = *(unsigned int *)v8;
    if (*((_BYTE *)v91 + 4))
      v61 -= *v91;
    v62 = 1000 * v60;
    v63 = v61 + 1000 * v60;
    if (v63 <= 0xFFFFFFFFLL)
    {
      *v91 = v62;
      *((_BYTE *)v91 + 4) = 1;
      *(_DWORD *)v8 = v63;
    }
  }
  if ((unint64_t)((char *)v23 - (char *)v22) < 8)
    goto LABEL_5;
  v64 = v22[1];
  if (v64)
  {
    v65 = *(unsigned int *)v8;
    v66 = (char *)v8 + 32 * v10;
    v67 = (int *)(v66 + 12);
    if (v66[16])
      v65 -= *v67;
    v68 = 1000 * v64;
    v69 = v65 + 1000 * v64;
    if (v69 <= 0xFFFFFFFFLL)
    {
      *v67 = v68;
      *((_BYTE *)v67 + 4) = 1;
      *(_DWORD *)v8 = v69;
    }
  }
  if (v59 == 2)
    goto LABEL_5;
  v70 = v22[2];
  if (v70)
  {
    v71 = *(unsigned int *)v8;
    v72 = (char *)v8 + 32 * v10;
    v73 = (int *)(v72 + 20);
    if (v72[24])
      v71 -= *v73;
    v74 = 1000 * v70;
    v75 = v71 + 1000 * v70;
    if (v75 <= 0xFFFFFFFFLL)
    {
      *v73 = v74;
      *((_BYTE *)v73 + 4) = 1;
      *(_DWORD *)v8 = v75;
    }
  }
  if (v59 == 3)
    goto LABEL_5;
  v76 = v22[3];
  if (v76)
  {
    v77 = *(unsigned int *)v8;
    v78 = (char *)v8 + 32 * v10;
    v79 = (int *)(v78 + 28);
    if (v78[32])
      v77 -= *v79;
    v80 = 1000 * v76;
    v81 = v77 + 1000 * v76;
    if (v81 <= 0xFFFFFFFFLL)
    {
      *v79 = v80;
      *((_BYTE *)v79 + 4) = 1;
      *(_DWORD *)v8 = v81;
    }
  }
  if (v59 == 4)
    goto LABEL_5;
  v82 = 4;
  while (!v22[v82])
  {
    if (v59 == ++v82)
      goto LABEL_5;
  }
LABEL_125:
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 28, "temporal_index < kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v82);
LABEL_126:
  v83 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/simulcast_rate_allocator.cc", 52, "num_layers <= kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v26);
  webrtc::SimulcastRateAllocator::SetLegacyConferenceMode((uint64_t)v83, v84);
}

uint64_t webrtc::SimulcastRateAllocator::SetLegacyConferenceMode(uint64_t this, char a2)
{
  *(_BYTE *)(this + 712) = a2;
  return this;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(char *a1, __n128 *a2, uint64_t *a3, unint64_t a4, char *a5, uint64_t a6)
{
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  __n128 result;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __n128 *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  __n128 *v44;
  char v45;
  char *v46;
  uint64_t v47;
  __n128 *v48;
  __n128 v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  __n128 *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 *v59;
  __n128 v60;

  if (a4 >= 2)
  {
    v8 = (__n128 *)a1;
    if (a4 == 2)
    {
      v9 = a2[-1].n128_u64[1];
      v10 = *(_QWORD *)a1;
      if (*(_DWORD *)(*a3 + 44 + 36 * v9 + 16) < *(_DWORD *)(*a3 + 44 + 36 * *(_QWORD *)a1 + 16))
      {
        *(_QWORD *)a1 = v9;
        a2[-1].n128_u64[1] = v10;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      v23 = a4 >> 1;
      v24 = &a1[8 * (a4 >> 1)];
      v25 = a4 >> 1;
      if ((uint64_t)a4 > a6)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(a1, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(&v8->n128_u64[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        result.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(v8, (__n128 *)((char *)v8 + 8 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6).n128_u64[0];
        return result;
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(a1, v24, a3, v25, a5);
      v27 = &a5[8 * v23];
      result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(&v8->n128_i8[8 * (a4 >> 1)], (char *)a2, a3, a4 - (a4 >> 1), v27).n128_u64[0];
      v28 = &a5[8 * a4];
      v29 = *a3 + 44;
      v30 = v27;
      v31 = a5;
      v32 = v8;
      do
      {
        if (v30 == v28)
        {
          if (v31 == v27)
            return result;
          v51 = &a5[8 * v23] - v31 - 8;
          if (v51 >= 0x38 && (unint64_t)((char *)v8 - v31) >= 0x20)
          {
            v55 = 0;
            v56 = (v51 >> 3) + 1;
            v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
            v52 = &v31[v57];
            v53 = (__n128 *)((char *)v32 + v57);
            v58 = v56 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v59 = &v32[v55];
              result = *(__n128 *)&v31[v55 * 16];
              v60 = *(__n128 *)&v31[v55 * 16 + 16];
              *v59 = result;
              v59[1] = v60;
              v55 += 2;
              v58 -= 4;
            }
            while (v58);
            if (v56 == (v56 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v52 = v31;
            v53 = v32;
          }
          do
          {
            v54 = *(_QWORD *)v52;
            v52 += 8;
            v53->n128_u64[0] = v54;
            v53 = (__n128 *)((char *)v53 + 8);
          }
          while (v52 != v27);
          return result;
        }
        v33 = v30;
        v34 = *(_QWORD *)v30;
        v35 = *(_QWORD *)v31;
        v36 = *(_DWORD *)(v29 + 36 * v34 + 16);
        v37 = *(_DWORD *)(v29 + 36 * *(_QWORD *)v31 + 16);
        if (v36 < v37)
          v35 = v34;
        v31 += 8 * (v36 >= v37);
        v30 = &v33[8 * (v36 < v37)];
        v32->n128_u64[0] = v35;
        v32 = (__n128 *)((char *)v32 + 8);
        v8 = (__n128 *)((char *)v8 + 8);
      }
      while (v31 != v27);
      if (v30 != v28)
      {
        v38 = -8;
        if (v36 >= v37)
          v38 = 0;
        v39 = &a5[8 * a4] - v33 + v38 - 8;
        if (v39 < 0x78 || (unint64_t)((char *)v8 - &v33[8 * (v36 < v37)]) < 0x20)
          goto LABEL_48;
        v40 = 0;
        v41 = (v39 >> 3) + 1;
        v42 = v36 >= v37;
        v43 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
        v30 += v43;
        v44 = (__n128 *)((char *)v32 + v43);
        v45 = v42 ? 2 : 1;
        v46 = &v33[8 * (v45 & 1)];
        v47 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v48 = &v32[v40];
          result = *(__n128 *)&v46[v40 * 16];
          v49 = *(__n128 *)&v46[v40 * 16 + 16];
          *v48 = result;
          v48[1] = v49;
          v40 += 2;
          v47 -= 4;
        }
        while (v47);
        v32 = v44;
        if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            v50 = *(_QWORD *)v30;
            v30 += 8;
            v32->n128_u64[0] = v50;
            v32 = (__n128 *)((char *)v32 + 8);
          }
          while (v30 != v28);
        }
      }
    }
    else if (a1 != (char *)a2)
    {
      v12 = a1 + 8;
      if (a1 + 8 != (char *)a2)
      {
        v13 = 0;
        v14 = *a3;
        v15 = a1;
        do
        {
          v17 = *(_QWORD *)v15;
          v15 = v12;
          v18 = *(_QWORD *)v12;
          v19 = *(_DWORD *)(v14 + 44 + 36 * v18 + 16);
          if (v19 < *(_DWORD *)(v14 + 44 + 36 * v17 + 16))
          {
            v20 = v13;
            do
            {
              *(_QWORD *)&a1[v20 + 8] = v17;
              if (!v20)
              {
                v16 = a1;
                goto LABEL_10;
              }
              v17 = *(_QWORD *)&a1[v20 - 8];
              v20 -= 8;
            }
            while (v19 < *(_DWORD *)(v14 + 36 * v17 + 60));
            v16 = &a1[v20 + 8];
LABEL_10:
            *(_QWORD *)v16 = v18;
          }
          v12 = v15 + 8;
          v13 += 8;
        }
        while (v15 + 8 != (char *)a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(char *a1, char *a2, uint64_t *a3, unint64_t a4, char *a5)
{
  char *v5;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  __n128 result;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;

  v5 = a5;
  if (a4 == 2)
  {
    v9 = *((_QWORD *)a2 - 1);
    v10 = *a3 + 44;
    v11 = *(_DWORD *)(v10 + 36 * v9 + 16);
    v12 = *(_DWORD *)(v10 + 36 * *(_QWORD *)a1 + 16);
    if (v11 >= v12)
      v9 = *(_QWORD *)a1;
    *(_QWORD *)a5 = v9;
    if (v11 >= v12)
      v13 = a2 - 8;
    else
      v13 = a1;
    *((_QWORD *)a5 + 1) = *(_QWORD *)v13;
  }
  else if ((uint64_t)a4 > 8)
  {
    v26 = a4 >> 1;
    v27 = 8 * (a4 >> 1);
    v28 = &a1[v27];
    std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(a1, &a1[v27], a3, a4 >> 1, a5, a4 >> 1);
    std::__stable_sort<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(&a1[v27], a2, a3, a4 - v26, &v5[v27], a4 - v26);
    v30 = *a3 + 44;
    v31 = v5;
    v32 = a1;
    v33 = &a1[v27];
    do
    {
      if (v33 == a2)
      {
        if (v32 == v28)
          return result;
        v51 = &a1[8 * v26] - v32 - 8;
        if (v51 >= 0x38 && (unint64_t)(v31 - v32) >= 0x20)
        {
          v55 = 0;
          v56 = (v51 >> 3) + 1;
          v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
          v52 = &v5[v57];
          v53 = &v32[v57];
          v58 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v59 = &v5[v55];
            result = *(__n128 *)&v32[v55];
            v60 = *(_OWORD *)&v32[v55 + 16];
            *(__n128 *)v59 = result;
            *((_OWORD *)v59 + 1) = v60;
            v55 += 32;
            v58 -= 4;
          }
          while (v58);
          if (v56 == (v56 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v52 = v5;
          v53 = v32;
        }
        do
        {
          v54 = *(_QWORD *)v53;
          v53 += 8;
          *(_QWORD *)v52 = v54;
          v52 += 8;
        }
        while (v53 != v28);
        return result;
      }
      v34 = v33;
      v35 = *(_QWORD *)v33;
      v36 = *(_QWORD *)v32;
      v37 = *(_DWORD *)(v30 + 36 * v35 + 16);
      v38 = *(_DWORD *)(v30 + 36 * *(_QWORD *)v32 + 16);
      if (v37 < v38)
        v36 = v35;
      v33 = &v34[8 * (v37 < v38)];
      v32 += 8 * (v37 >= v38);
      *(_QWORD *)v5 = v36;
      v5 += 8;
      v31 += 8;
    }
    while (v32 != v28);
    if (v33 != a2)
    {
      v39 = -8;
      if (v37 >= v38)
        v39 = 0;
      v40 = a2 - v34 + v39 - 8;
      if (v40 < 0x68)
        goto LABEL_48;
      if ((unint64_t)(v31 - &v34[8 * (v37 < v38)]) < 0x20)
        goto LABEL_48;
      v41 = 0;
      v42 = (v40 >> 3) + 1;
      v43 = v37 < v38;
      v44 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      v45 = &v5[v44];
      v33 += v44;
      v46 = &v34[8 * v43];
      v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v48 = &v5[v41];
        result = *(__n128 *)&v46[v41];
        v49 = *(_OWORD *)&v46[v41 + 16];
        *(__n128 *)v48 = result;
        *((_OWORD *)v48 + 1) = v49;
        v41 += 32;
        v47 -= 4;
      }
      while (v47);
      v5 = v45;
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_48:
        do
        {
          v50 = *(_QWORD *)v33;
          v33 += 8;
          *(_QWORD *)v5 = v50;
          v5 += 8;
        }
        while (v33 != a2);
      }
    }
  }
  else if (a1 != a2)
  {
    v15 = *a3;
    v16 = a1 + 8;
    *(_QWORD *)a5 = *(_QWORD *)a1;
    if (a1 + 8 != a2)
    {
      v17 = 0;
      v18 = a5;
      v19 = (uint64_t *)a5;
      do
      {
        while (1)
        {
          v21 = *v19++;
          v20 = v21;
          if (*(_DWORD *)(v15 + 44 + 36 * *(_QWORD *)v16 + 16) < *(_DWORD *)(v15 + 44 + 36 * v21 + 16))
            break;
          *v19 = *(_QWORD *)v16;
          v16 += 8;
          v17 += 8;
          v18 = (char *)v19;
          if (v16 == a2)
            return result;
        }
        *((_QWORD *)v18 + 1) = v20;
        v22 = a5;
        if (v18 != a5)
        {
          v23 = v17;
          while (1)
          {
            v22 = &a5[v23];
            v24 = *(_QWORD *)&a5[v23 - 8];
            if (*(_DWORD *)(v15 + 44 + 36 * *(_QWORD *)v16 + 16) >= *(_DWORD *)(v15 + 44 + 36 * v24 + 16))
              break;
            *(_QWORD *)v22 = v24;
            v23 -= 8;
            if (!v23)
            {
              v22 = a5;
              break;
            }
          }
        }
        v25 = *(_QWORD *)v16;
        v16 += 8;
        *(_QWORD *)v22 = v25;
        v17 += 8;
        v18 = (char *)v19;
      }
      while (v16 != a2);
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(__n128 *a1, __n128 *a2, __n128 *a3, _QWORD *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __n128 *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  __n128 *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __n128 *v42;
  size_t v43;
  __n128 *v44;
  uint64_t v45;
  unint64_t v46;
  __n128 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 *v54;
  __n128 *v55;
  __n128 *v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  __n128 *v66;
  __n128 result;
  __n128 *v68;
  __n128 *v69;
  __n128 *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  __n128 *v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  char *v81;
  __n128 *v82;
  uint64_t v83;
  uint64_t v84;
  __n128 *v85;
  __n128 *v86;
  uint64_t v87;
  __n128 v88;
  unint64_t v89;
  char *v90;
  __n128 *v91;
  uint64_t v92;
  uint64_t v93;
  __n128 *v94;
  __n128 *v95;
  uint64_t v96;
  __n128 v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BOOL4 v101;
  unint64_t v102;
  __n128 *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  __n128 *v109;
  char *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __n128 *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;

  if (!a6)
    return result;
  v8 = a6;
  while (a5 > a8 && v8 > a8)
  {
    if (!a5)
      return result;
    v13 = 0;
    v14 = *a4;
    v15 = -a5;
    while (1)
    {
      v16 = a1->n128_i64[v13 / 8];
      if (*(_DWORD *)(*a4 + 36 * a2->n128_u64[0] + 60) < *(_DWORD *)(v14 + 36 * v16 + 60))
        break;
      v13 += 8;
      if (__CFADD__(v15++, 1))
        return result;
    }
    v18 = &a1->n128_u64[v13 / 8];
    if (-v15 >= v8)
    {
      if (v15 == -1)
      {
        a1->n128_u64[v13 / 8] = a2->n128_u64[0];
        a2->n128_u64[0] = v16;
        return result;
      }
      if (v15 <= 0)
        v36 = -v15;
      else
        v36 = 1 - v15;
      v28 = v36 >> 1;
      v22 = (__n128 *)((char *)a1 + 8 * (v36 >> 1) + v13);
      v21 = (char *)a2;
      if (a2 != a3)
      {
        v37 = ((char *)a3 - (char *)a2) >> 3;
        v21 = (char *)a2;
        do
        {
          v38 = v37 >> 1;
          v39 = &v21[8 * (v37 >> 1)];
          v41 = *(_QWORD *)v39;
          v40 = v39 + 8;
          v37 += ~(v37 >> 1);
          if (*(_DWORD *)(v14 + 36 * v41 + 60) < *(_DWORD *)(v14 + 36 * v22->n128_u64[0] + 60))
            v21 = v40;
          else
            v37 = v38;
        }
        while (v37);
      }
      v20 = (v21 - (char *)a2) >> 3;
      if (v22 != a2)
      {
LABEL_22:
        v29 = v21 - (char *)a2;
        if (v21 == (char *)a2)
        {
          a2 = v22;
        }
        else
        {
          v30 = (__n128 *)&v22->n128_i8[8];
          v126 = v28;
          if (&v22->n128_i8[8] == (__int8 *)a2)
          {
            v118 = v22->n128_u64[0];
            v120 = v20;
            v42 = a2;
            v43 = v21 - (char *)a2;
            v122 = a7;
            v124 = a4;
            v44 = a3;
            v45 = a8;
            memmove(v22, v42, v43);
            v20 = v120;
            v18 = &a1->n128_u64[v13 / 8];
            a4 = v124;
            v28 = v126;
            a8 = v45;
            a3 = v44;
            a7 = v122;
            a2 = (__n128 *)((char *)v22 + v29);
            *(unint64_t *)((char *)v22->n128_u64 + v29) = v118;
          }
          else
          {
            v31 = v20;
            v32 = &a2->n128_i8[8];
            if (&a2->n128_i8[8] == v21)
            {
              v46 = *((_QWORD *)v21 - 1);
              a2 = (__n128 *)&v22->n128_i8[8];
              if (v21 - 8 != (char *)v22)
              {
                v123 = a7;
                v125 = a4;
                v47 = a3;
                v121 = a8;
                v119 = *((_QWORD *)v21 - 1);
                memmove(&v22->n128_i8[8], v22, v21 - 8 - (char *)v22);
                v46 = v119;
                a8 = v121;
                v18 = &a1->n128_u64[v13 / 8];
                a7 = v123;
                a4 = v125;
                a3 = v47;
              }
              v22->n128_u64[0] = v46;
              v28 = v126;
              v20 = v31;
            }
            else
            {
              v33 = ((char *)a2 - (char *)v22) >> 3;
              if (v33 == v29 >> 3)
              {
                do
                {
                  v34 = v30[-1].n128_i64[1];
                  v30[-1].n128_u64[1] = *((_QWORD *)v32 - 1);
                  *((_QWORD *)v32 - 1) = v34;
                  if (v30 == a2)
                    break;
                  v30 = (__n128 *)((char *)v30 + 8);
                  v35 = v32 == v21;
                  v32 += 8;
                }
                while (!v35);
              }
              else
              {
                v48 = v29 >> 3;
                v49 = ((char *)a2 - (char *)v22) >> 3;
                do
                {
                  v50 = v49;
                  v49 = v48;
                  v48 = v50 % v48;
                }
                while (v48);
                if (v49)
                {
                  v51 = (__n128 *)((char *)v22 + 8 * v49);
                  do
                  {
                    v53 = v51[-1].n128_i64[1];
                    v51 = (__n128 *)((char *)v51 - 8);
                    v52 = v53;
                    v54 = (__n128 *)((char *)v51 + 8 * v33);
                    v55 = v51;
                    do
                    {
                      v56 = v54;
                      v55->n128_u64[0] = v54->n128_u64[0];
                      v57 = (v21 - (char *)v54) >> 3;
                      v58 = __OFSUB__(v33, v57);
                      v60 = v33 - v57;
                      v59 = (v60 < 0) ^ v58;
                      v54 = (__n128 *)((char *)v22 + 8 * v60);
                      if (v59)
                        v54 = (__n128 *)((char *)v56 + 8 * v33);
                      v55 = v56;
                    }
                    while (v54 != v51);
                    v56->n128_u64[0] = v52;
                  }
                  while (v51 != v22);
                }
                a2 = (__n128 *)((char *)v22 + 8 * (v29 >> 3));
              }
            }
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (v8 >= 0)
        v19 = v8;
      else
        v19 = v8 + 1;
      v20 = v19 >> 1;
      v21 = &a2->n128_i8[8 * (v19 >> 1)];
      v22 = a2;
      if ((char *)a2 - (char *)a1 != v13)
      {
        v23 = (uint64_t)((char *)a2 - (char *)a1 - v13) >> 3;
        v22 = (__n128 *)((char *)a1 + v13);
        do
        {
          v24 = v23 >> 1;
          v25 = &v22->n128_u64[v23 >> 1];
          v27 = *v25;
          v26 = (__n128 *)(v25 + 1);
          v23 += ~(v23 >> 1);
          if (*(_DWORD *)(v14 + 36 * *(_QWORD *)v21 + 60) < *(_DWORD *)(v14 + 36 * v27 + 60))
            v23 = v24;
          else
            v22 = v26;
        }
        while (v23);
      }
      v28 = (uint64_t)((char *)v22 - (char *)a1 - v13) >> 3;
      if (v22 != a2)
        goto LABEL_22;
    }
    a2 = (__n128 *)v21;
LABEL_57:
    a5 = -(v28 + v15);
    v61 = v8 - v20;
    if (v28 + v20 >= v8 - (v28 + v20) - v15)
    {
      v69 = a2;
      v70 = a2;
      v71 = v21;
      v72 = a4;
      v73 = v28;
      v74 = v20;
      v75 = a7;
      v76 = a8;
      v77 = (__n128 *)v18;
      std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(v70, v71, a3);
      a8 = v76;
      a4 = v72;
      a7 = v75;
      a2 = v22;
      v78 = v74;
      a5 = v73;
      a3 = v69;
      v8 = v78;
      a1 = v77;
      if (!v78)
        return result;
    }
    else
    {
      v62 = &a1->n128_u64[v13 / 8];
      v63 = a4;
      v64 = a7;
      v65 = a8;
      v66 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::SimulcastRateAllocator::DistributeAllocationToSimulcastLayers(webrtc::DataRate,webrtc::DataRate,webrtc::VideoBitrateAllocation *)::$_0 &,std::__wrap_iter<unsigned long *>>(v62, v22, a2);
      a8 = v65;
      a4 = v63;
      a3 = v66;
      a7 = v64;
      v68 = a2;
      a2 = (__n128 *)v21;
      v8 = v61;
      a1 = v68;
      if (!v61)
        return result;
    }
  }
  if (a5 <= v8)
  {
    if (a1 != a2)
    {
      v89 = (char *)a2 - (char *)a1 - 8;
      v90 = a7;
      v91 = a1;
      if (v89 < 0x18)
        goto LABEL_109;
      v90 = a7;
      v91 = a1;
      if ((unint64_t)(a7 - (char *)a1) < 0x20)
        goto LABEL_109;
      v92 = (v89 >> 3) + 1;
      v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
      v90 = &a7[v93];
      v91 = (__n128 *)((char *)a1 + v93);
      v94 = a1 + 1;
      v95 = (__n128 *)(a7 + 16);
      v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = v94[-1];
        v97 = *v94;
        v95[-1] = result;
        *v95 = v97;
        v94 += 2;
        v95 += 2;
        v96 -= 4;
      }
      while (v96);
      if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_109:
        do
        {
          v98 = v91->n128_u64[0];
          v91 = (__n128 *)((char *)v91 + 8);
          *(_QWORD *)v90 = v98;
          v90 += 8;
        }
        while (v91 != a2);
      }
      if (v90 != a7)
      {
        v99 = *a4 + 44;
        while (a2 != a3)
        {
          v100 = a2->n128_u64[0];
          v101 = *(_DWORD *)(v99 + 36 * a2->n128_u64[0] + 16) >= *(_DWORD *)(v99 + 36 * *(_QWORD *)a7 + 16);
          if (*(_DWORD *)(v99 + 36 * a2->n128_u64[0] + 16) >= *(_DWORD *)(v99 + 36 * *(_QWORD *)a7 + 16))
            v100 = *(_QWORD *)a7;
          a2 = (__n128 *)((char *)a2
                        + 8
                        * (*(_DWORD *)(v99 + 36 * a2->n128_u64[0] + 16) < *(_DWORD *)(v99 + 36 * *(_QWORD *)a7 + 16)));
          a7 += 8 * v101;
          a1->n128_u64[0] = v100;
          a1 = (__n128 *)((char *)a1 + 8);
          if (a7 == v90)
            return result;
        }
        memmove(a1, a7, v90 - a7);
      }
    }
    return result;
  }
  v79 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v80 = v79 - 8;
  if ((unint64_t)(v79 - 8) < 0x18)
  {
    v81 = a7;
    v82 = a2;
    do
    {
LABEL_87:
      v102 = v82->n128_u64[0];
      v82 = (__n128 *)((char *)v82 + 8);
      *(_QWORD *)v81 = v102;
      v81 += 8;
    }
    while (v82 != a3);
    goto LABEL_88;
  }
  v81 = a7;
  v82 = a2;
  if ((unint64_t)(a7 - (char *)a2) < 0x20)
    goto LABEL_87;
  v83 = (v80 >> 3) + 1;
  v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
  v81 = &a7[v84];
  v82 = (__n128 *)((char *)a2 + v84);
  v85 = a2 + 1;
  v86 = (__n128 *)(a7 + 16);
  v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = v85[-1];
    v88 = *v85;
    v86[-1] = result;
    *v86 = v88;
    v85 += 2;
    v86 += 2;
    v87 -= 4;
  }
  while (v87);
  if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_87;
LABEL_88:
  if (v81 != a7)
  {
    v103 = a3;
    while (a2 != a1)
    {
      v104 = a2[-1].n128_i64[1];
      v105 = *a4 + 44;
      v106 = *(_DWORD *)(v105 + 36 * *((_QWORD *)v81 - 1) + 16);
      v107 = *(_DWORD *)(v105 + 36 * v104 + 16);
      if (v106 < v107)
        a2 = (__n128 *)((char *)a2 - 8);
      else
        v104 = *((_QWORD *)v81 - 1);
      if (v106 >= v107)
        v81 -= 8;
      a3[-1].n128_u64[1] = v104;
      a3 = (__n128 *)((char *)a3 - 8);
      v103 = (__n128 *)((char *)v103 - 8);
      if (v81 == a7)
        return result;
    }
    v108 = v81 - a7 - 8;
    if (v108 < 0x58 || (unint64_t)(v81 - (char *)v103) < 0x20)
    {
      v109 = a3;
      v110 = v81;
      goto LABEL_101;
    }
    v113 = 0;
    v114 = (v108 >> 3) + 1;
    v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
    v109 = (__n128 *)((char *)a3 - v115);
    v110 = &v81[-v115];
    v116 = v114 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = *(__n128 *)&v81[v113 * 16 - 16];
      v117 = &a3[v113];
      v117[-2] = *(__n128 *)&v81[v113 * 16 - 32];
      v117[-1] = result;
      v113 -= 2;
      v116 -= 4;
    }
    while (v116);
    if (v114 != (v114 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_101:
      v111 = &v109[-1].n128_u64[1];
      do
      {
        v112 = *((_QWORD *)v110 - 1);
        v110 -= 8;
        *v111-- = v112;
      }
      while (v110 != a7);
    }
  }
  return result;
}

void webrtc::SimulcastSdpSerializer::SerializeSimulcastDescription(const cricket::SimulcastDescription *a1@<X1>, std::string *a2@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _WORD *p_p_new_stuff;
  size_t v8;
  BOOL v9;
  char *v10;
  std::string::size_type v11;
  std::string::size_type size;
  std::string *v13;
  char *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string *v18;
  _DWORD *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  _BYTE *v24;
  std::string::size_type v25;
  std::string::value_type *__p_new_stuff;
  uint64_t v27;
  uint64_t v28;
  std::string v29;

  memset(&v29, 0, sizeof(v29));
  __p_new_stuff = 0;
  v27 = 0;
  v28 = 0;
  v5 = *(_QWORD **)a1;
  v6 = (_QWORD *)*((_QWORD *)a1 + 1);
  if (v5 != v6)
  {
    if (&v29 <= (std::string *)"send" && (char *)v29.__r_.__value_.__r.__words + 4 > "send")
      goto LABEL_73;
    strcpy((char *)&v29, "send");
    *((_BYTE *)&v29.__r_.__value_.__s + 23) = 4;
    if ((char *)v29.__r_.__value_.__r.__words + 4 <= " " && (char *)v29.__r_.__value_.__r.__words + 5 > " ")
      goto LABEL_73;
    WORD2(v29.__r_.__value_.__r.__words[0]) = 32;
    *((_BYTE *)&v29.__r_.__value_.__s + 23) = 5;
    if (SHIBYTE(v28) < 0)
    {
      v27 = 1;
      p_p_new_stuff = __p_new_stuff;
    }
    else
    {
      HIBYTE(v28) = 1;
      p_p_new_stuff = &__p_new_stuff;
    }
    *p_p_new_stuff = 32;
  }
  if (*((_QWORD *)a1 + 3) == *((_QWORD *)a1 + 4))
    goto LABEL_66;
  if (SHIBYTE(v28) < 0)
  {
    v8 = v27;
    if (v27 < 0)
      goto LABEL_73;
    v10 = __p_new_stuff;
    v9 = v27 == 0;
    if (v27)
    {
      if (!__p_new_stuff)
        goto LABEL_73;
    }
  }
  else
  {
    v8 = HIBYTE(v28);
    v9 = HIBYTE(v28) == 0;
    v10 = (char *)&__p_new_stuff;
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = 22;
  else
    v11 = (v29.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    size = v29.__r_.__value_.__l.__size_;
  if (v11 - size >= v8)
  {
    if (!v9)
    {
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v29;
      else
        v13 = (std::string *)v29.__r_.__value_.__r.__words[0];
      v14 = (char *)v13 + size;
      if ((char *)v13 + size <= v10 && &v14[v8] > v10)
        goto LABEL_73;
      memmove(v14, v10, v8);
      v15 = size + v8;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        v29.__r_.__value_.__l.__size_ = size + v8;
      else
        *((_BYTE *)&v29.__r_.__value_.__s + 23) = v15 & 0x7F;
      v13->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v29, v11, size + v8 - v11, size, size, 0, v8, v10);
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = 22;
  else
    v16 = (v29.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    v17 = v29.__r_.__value_.__l.__size_;
  if (v16 - v17 >= 4)
  {
    v18 = &v29;
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = (std::string *)v29.__r_.__value_.__r.__words[0];
    v19 = (_DWORD *)((char *)v18 + v17);
    if ((char *)v18 + v17 <= "recv" && v19 + 1 > (_DWORD *)"recv")
      goto LABEL_73;
    *v19 = 1986225522;
    v20 = v17 + 4;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      v29.__r_.__value_.__l.__size_ = v17 + 4;
    else
      *((_BYTE *)&v29.__r_.__value_.__s + 23) = v20 & 0x7F;
    v18->__r_.__value_.__s.__data_[v20] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v29, v16, v17 - v16 + 4, v17, v17, 0, 4uLL, "recv");
  }
  v21 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = 22;
  else
    v22 = (v29.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = v29.__r_.__value_.__l.__size_;
  if (v22 != v21)
  {
    v23 = &v29;
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v23 = (std::string *)v29.__r_.__value_.__r.__words[0];
    v24 = (char *)v23 + v21;
    if ((char *)v23 + v21 > " " || v24 + 1 <= " ")
    {
      *v24 = 32;
      v25 = v21 + 1;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        v29.__r_.__value_.__l.__size_ = v25;
      else
        *((_BYTE *)&v29.__r_.__value_.__s + 23) = v25 & 0x7F;
      v23->__r_.__value_.__s.__data_[v25] = 0;
      goto LABEL_65;
    }
LABEL_73:
    __break(1u);
    return;
  }
  std::string::__grow_by_and_replace(&v29, v22, 1uLL, v22, v22, 0, 1uLL, " ");
LABEL_65:
LABEL_66:
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
LABEL_68:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_72:
      operator delete(v29.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    *a2 = v29;
    if ((SHIBYTE(v28) & 0x80000000) == 0)
      goto LABEL_68;
  }
  operator delete(__p_new_stuff);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_72;
}

std::string *webrtc::`anonymous namespace'::operator<<(std::string *this, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  char v5;
  std::string::size_type size;
  int v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string *v10;
  std::string::size_type v12;
  std::string::size_type v13;
  int v14;
  std::string::size_type v15;
  int v16;
  std::string *v17;
  std::string::size_type v19;
  std::string::size_type v20;
  BOOL v21;
  const std::string::value_type *v22;
  int v24;
  std::string::size_type v25;
  std::string::size_type v26;
  char *v27;
  std::string *v28;
  std::string::size_type v30;
  _BYTE *v31;
  std::string::size_type v32;
  int v33;
  size_t v34;
  std::string *v35;
  unint64_t v36;
  uint64_t v37;
  std::string *v38;
  std::string *v39;
  std::string::size_type v41;
  std::string *v42;
  unint64_t v44;
  uint64_t v45;
  std::string::size_type v46;
  int v47;
  size_t v48;
  std::string *v49;
  unint64_t v50;
  uint64_t v51;
  std::string *v52;
  std::string *v53;
  _BYTE *v54;
  std::string::size_type v55;
  std::string::value_type *v56;
  std::string *v57;
  unint64_t v58;
  uint64_t v59;
  size_t v60;
  BOOL v61;
  char *v62;
  int v63;
  std::string::size_type v64;
  size_t v65;
  std::string::size_type v66;
  std::string *v67;
  unint64_t v68;
  uint64_t v69;
  std::string *v70;
  char *v71;
  std::string *v72;
  char *v73;
  std::string::size_type v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v79;
  char *v80;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = 1;
    do
    {
      if ((v5 & 1) == 0)
      {
        size = HIBYTE(this->__r_.__value_.__r.__words[2]);
        v7 = (char)size;
        if ((size & 0x80u) == 0)
          v8 = 22;
        else
          v8 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((size & 0x80u) != 0)
          size = this->__r_.__value_.__l.__size_;
        if (v8 == size)
        {
          std::string::__grow_by_and_replace(this, v8, 1uLL, v8, v8, 0, 1uLL, ";");
          v9 = *v4;
          v79 = v4;
          v80 = (char *)v4[1];
          if ((char *)*v4 == v80)
            goto LABEL_3;
          goto LABEL_23;
        }
        if (v7 >= 0)
          v10 = this;
        else
          v10 = (std::string *)this->__r_.__value_.__r.__words[0];
        if ((char *)v10 + size <= ";" && (char *)&v10->__r_.__value_.__l.__data_ + size + 1 > ";")
          goto LABEL_210;
        v10->__r_.__value_.__s.__data_[size] = 59;
        v12 = size + 1;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          this->__r_.__value_.__l.__size_ = v12;
          v10->__r_.__value_.__s.__data_[v12] = 0;
          v9 = *v4;
          v79 = v4;
          v80 = (char *)v4[1];
          if ((char *)*v4 == v80)
            goto LABEL_3;
          goto LABEL_23;
        }
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v12 & 0x7F;
        v10->__r_.__value_.__s.__data_[v12] = 0;
      }
      v9 = *v4;
      v79 = v4;
      v80 = (char *)v4[1];
      if ((char *)*v4 == v80)
        goto LABEL_3;
LABEL_23:
      if (!*(_BYTE *)(v9 + 24))
        goto LABEL_41;
      v13 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v14 = (char)v13;
      if ((v13 & 0x80u) == 0)
        v15 = 22;
      else
        v15 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v13 & 0x80u) != 0)
        v13 = this->__r_.__value_.__l.__size_;
      if (v15 == v13)
      {
        std::string::__grow_by_and_replace(this, v15, 1uLL, v15, v15, 0, 1uLL, "~");
        v16 = *(char *)(v9 + 23);
        if ((v16 & 0x80000000) == 0)
          goto LABEL_42;
        goto LABEL_46;
      }
      if (v14 >= 0)
        v17 = this;
      else
        v17 = (std::string *)this->__r_.__value_.__r.__words[0];
      if ((char *)v17 + v13 <= "~" && (char *)&v17->__r_.__value_.__l.__data_ + v13 + 1 > "~")
        goto LABEL_210;
      v17->__r_.__value_.__s.__data_[v13] = 126;
      v19 = v13 + 1;
      if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v19 & 0x7F;
        v17->__r_.__value_.__s.__data_[v19] = 0;
LABEL_41:
        v16 = *(char *)(v9 + 23);
        if ((v16 & 0x80000000) == 0)
          goto LABEL_42;
        goto LABEL_46;
      }
      this->__r_.__value_.__l.__size_ = v19;
      v17->__r_.__value_.__s.__data_[v19] = 0;
      v16 = *(char *)(v9 + 23);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_42:
        v20 = v16;
        v21 = v16 == 0;
        v22 = (const std::string::value_type *)v9;
        goto LABEL_51;
      }
LABEL_46:
      v20 = *(_QWORD *)(v9 + 8);
      if ((v20 & 0x8000000000000000) != 0)
        goto LABEL_210;
      v22 = *(const std::string::value_type **)v9;
      v21 = v20 == 0;
      if (v20 && v22 == 0)
        goto LABEL_210;
LABEL_51:
      v24 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v24 >= 0)
        v25 = 22;
      else
        v25 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v24 >= 0)
        v26 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      else
        v26 = this->__r_.__value_.__l.__size_;
      if (v25 - v26 < v20)
      {
        std::string::__grow_by_and_replace(this, v25, v26 + v20 - v25, v26, v26, 0, v20, v22);
        v27 = (char *)(v9 + 32);
        if ((char *)(v9 + 32) != v80)
          goto LABEL_77;
        goto LABEL_3;
      }
      if (v21)
        goto LABEL_70;
      if (v24 >= 0)
        v28 = this;
      else
        v28 = (std::string *)this->__r_.__value_.__r.__words[0];
      if ((char *)v28 + v26 <= v22 && (char *)v28 + v26 + v20 > v22)
      {
LABEL_210:
        __break(1u);
LABEL_211:
        abort();
      }
      memmove((char *)v28 + v26, v22, v20);
      v30 = v26 + v20;
      if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v30 & 0x7F;
        v28->__r_.__value_.__s.__data_[v30] = 0;
LABEL_70:
        v27 = (char *)(v9 + 32);
        if ((char *)(v9 + 32) != v80)
          goto LABEL_77;
        goto LABEL_3;
      }
      this->__r_.__value_.__l.__size_ = v30;
      v28->__r_.__value_.__s.__data_[v30] = 0;
      v27 = (char *)(v9 + 32);
      if ((char *)(v9 + 32) != v80)
      {
        while (1)
        {
LABEL_77:
          v32 = HIBYTE(this->__r_.__value_.__r.__words[2]);
          v33 = (char)v32;
          if ((v32 & 0x80u) == 0)
            v34 = 22;
          else
            v34 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v32 & 0x80u) != 0)
            v32 = this->__r_.__value_.__l.__size_;
          if (v34 == v32)
            break;
          if (v33 >= 0)
            v39 = this;
          else
            v39 = (std::string *)this->__r_.__value_.__r.__words[0];
          if ((char *)v39 + v32 <= "," && (char *)&v39->__r_.__value_.__l.__data_ + v32 + 1 > ",")
            goto LABEL_210;
          v39->__r_.__value_.__s.__data_[v32] = 44;
          v41 = v32 + 1;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          {
            this->__r_.__value_.__l.__size_ = v41;
            v39->__r_.__value_.__s.__data_[v41] = 0;
            if (v27[24])
              goto LABEL_123;
          }
          else
          {
            *((_BYTE *)&this->__r_.__value_.__s + 23) = v41 & 0x7F;
            v39->__r_.__value_.__s.__data_[v41] = 0;
            if (v27[24])
              goto LABEL_123;
          }
LABEL_165:
          if (v27[23] < 0)
          {
            v60 = *((_QWORD *)v27 + 1);
            if ((v60 & 0x8000000000000000) != 0)
              goto LABEL_210;
            v62 = *(char **)v27;
            v61 = v60 == 0;
            if (v60)
            {
              if (!v62)
                goto LABEL_210;
            }
          }
          else
          {
            v60 = v27[23];
            v61 = v27[23] == 0;
            v62 = v27;
          }
          v63 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
          if (v63 >= 0)
            v64 = 22;
          else
            v64 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v63 >= 0)
            v65 = HIBYTE(this->__r_.__value_.__r.__words[2]);
          else
            v65 = this->__r_.__value_.__l.__size_;
          if (v64 - v65 < v60)
          {
            v66 = v65 + v60;
            if (0x7FFFFFFFFFFFFFF6 - v64 < v65 + v60 - v64)
              goto LABEL_211;
            if (v63 >= 0)
              v67 = this;
            else
              v67 = (std::string *)this->__r_.__value_.__r.__words[0];
            if (v64 >= 0x3FFFFFFFFFFFFFF3)
            {
              v69 = 0x7FFFFFFFFFFFFFF7;
              v70 = (std::string *)operator new(0x7FFFFFFFFFFFFFF7uLL);
              if (v65)
                goto LABEL_201;
            }
            else
            {
              v68 = 2 * v64;
              if (v66 > 2 * v64)
                v68 = v65 + v60;
              if (v68 < 0x17)
              {
                v69 = 23;
                v70 = (std::string *)operator new(0x17uLL);
                if (!v65)
                  goto LABEL_186;
LABEL_201:
                if (v67 >= v70 && (std::string *)((char *)v70 + v65) > v67)
                  goto LABEL_210;
                memmove(v70, v67, v65);
                v71 = (char *)v70 + v65;
                if ((char *)v70 + v65 <= v62)
                {
LABEL_204:
                  if (&v71[v60] > v62)
                    goto LABEL_210;
                }
LABEL_205:
                memcpy(v71, v62, v60);
                if (v64 != 22)
                  operator delete(v67);
                this->__r_.__value_.__l.__size_ = v66;
                this->__r_.__value_.__r.__words[2] = v69 | 0x8000000000000000;
                this->__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
                v31 = (char *)v70 + v66;
                goto LABEL_75;
              }
              v75 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
              v76 = v68 | 7;
              if (v76 == 23)
                v76 = v75;
              v69 = v76 + 1;
              v70 = (std::string *)operator new(v76 + 1);
              if (v65)
                goto LABEL_201;
            }
LABEL_186:
            v71 = (char *)v70 + v65;
            if ((char *)v70 + v65 <= v62)
              goto LABEL_204;
            goto LABEL_205;
          }
          if (v61)
            goto LABEL_76;
          if (v63 >= 0)
            v72 = this;
          else
            v72 = (std::string *)this->__r_.__value_.__r.__words[0];
          v73 = (char *)v72 + v65;
          if ((char *)v72 + v65 <= v62 && &v73[v60] > v62)
            goto LABEL_210;
          memmove(v73, v62, v60);
          v74 = v65 + v60;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
            this->__r_.__value_.__l.__size_ = v74;
          else
            *((_BYTE *)&this->__r_.__value_.__s + 23) = v74 & 0x7F;
          v31 = (char *)v72 + v74;
LABEL_75:
          *v31 = 0;
LABEL_76:
          v27 += 32;
          if (v27 == v80)
            goto LABEL_3;
        }
        if (v34 == 0x7FFFFFFFFFFFFFF6)
          goto LABEL_211;
        if (v33 >= 0)
          v35 = this;
        else
          v35 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v34 >= 0x3FFFFFFFFFFFFFF3)
        {
          v37 = 0x7FFFFFFFFFFFFFF7;
          v38 = (std::string *)operator new(0x7FFFFFFFFFFFFFF7uLL);
          goto LABEL_105;
        }
        if (v34 + 1 > 2 * v34)
          v36 = v34 + 1;
        else
          v36 = 2 * v34;
        if (v36 >= 0x17)
        {
          v44 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
          v45 = v36 | 7;
          if (v45 == 23)
            v45 = v44;
          v37 = v45 + 1;
          v38 = (std::string *)operator new(v45 + 1);
          if (v34)
            goto LABEL_105;
LABEL_118:
          if (v38 <= (std::string *)"," && (char *)&v38->__r_.__value_.__l.__data_ + 1 > ",")
            goto LABEL_210;
          v38->__r_.__value_.__s.__data_[0] = 44;
        }
        else
        {
          v37 = 23;
          v38 = (std::string *)operator new(0x17uLL);
          if (!v34)
            goto LABEL_118;
LABEL_105:
          v42 = (std::string *)((char *)v38 + v34);
          if (v35 >= v38 && v42 > v35)
            goto LABEL_210;
          memmove(v38, v35, v34);
          if (v42 <= (std::string *)"," && (char *)&v42->__r_.__value_.__l.__data_ + 1 > ",")
            goto LABEL_210;
          v42->__r_.__value_.__s.__data_[0] = 44;
          if (v34 == 22)
          {
LABEL_122:
            this->__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
            this->__r_.__value_.__l.__size_ = v34 + 1;
            this->__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
            v38->__r_.__value_.__s.__data_[v34 + 1] = 0;
            if (!v27[24])
              goto LABEL_165;
LABEL_123:
            v46 = HIBYTE(this->__r_.__value_.__r.__words[2]);
            v47 = (char)v46;
            if ((v46 & 0x80u) == 0)
              v48 = 22;
            else
              v48 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if ((v46 & 0x80u) != 0)
              v46 = this->__r_.__value_.__l.__size_;
            if (v48 == v46)
            {
              if (v48 == 0x7FFFFFFFFFFFFFF6)
                goto LABEL_211;
              if (v47 >= 0)
                v49 = this;
              else
                v49 = (std::string *)this->__r_.__value_.__r.__words[0];
              if (v48 >= 0x3FFFFFFFFFFFFFF3)
              {
                v51 = 0x7FFFFFFFFFFFFFF7;
                v52 = (std::string *)operator new(0x7FFFFFFFFFFFFFF7uLL);
                goto LABEL_149;
              }
              if (v48 + 1 > 2 * v48)
                v50 = v48 + 1;
              else
                v50 = 2 * v48;
              if (v50 >= 0x17)
              {
                v58 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
                v59 = v50 | 7;
                if (v59 == 23)
                  v59 = v58;
                v51 = v59 + 1;
                v52 = (std::string *)operator new(v59 + 1);
                if (v48)
                  goto LABEL_149;
LABEL_159:
                if (v52 <= (std::string *)"~" && (char *)&v52->__r_.__value_.__l.__data_ + 1 > "~")
                  goto LABEL_210;
                v52->__r_.__value_.__s.__data_[0] = 126;
              }
              else
              {
                v51 = 23;
                v52 = (std::string *)operator new(0x17uLL);
                if (!v48)
                  goto LABEL_159;
LABEL_149:
                v57 = (std::string *)((char *)v52 + v48);
                if (v49 >= v52 && v57 > v49)
                  goto LABEL_210;
                memmove(v52, v49, v48);
                if (v57 <= (std::string *)"~" && (char *)&v57->__r_.__value_.__l.__data_ + 1 > "~")
                  goto LABEL_210;
                v57->__r_.__value_.__s.__data_[0] = 126;
                if (v48 == 22)
                {
LABEL_163:
                  this->__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
                  this->__r_.__value_.__l.__size_ = v48 + 1;
                  this->__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
                  v56 = &v52->__r_.__value_.__s.__data_[v48 + 1];
LABEL_164:
                  *v56 = 0;
                  goto LABEL_165;
                }
              }
              operator delete(v49);
              goto LABEL_163;
            }
            if (v47 >= 0)
              v53 = this;
            else
              v53 = (std::string *)this->__r_.__value_.__r.__words[0];
            v54 = (char *)v53 + v46;
            if ((char *)v53 + v46 <= "~" && v54 + 1 > "~")
              goto LABEL_210;
            *v54 = 126;
            v55 = v46 + 1;
            if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
              this->__r_.__value_.__l.__size_ = v55;
            else
              *((_BYTE *)&this->__r_.__value_.__s + 23) = v55 & 0x7F;
            v56 = (char *)v53 + v55;
            goto LABEL_164;
          }
        }
        operator delete(v35);
        goto LABEL_122;
      }
LABEL_3:
      v5 = 0;
      v4 = v79 + 3;
    }
    while (v79 + 3 != a3);
  }
  return this;
}

void webrtc::SimulcastSdpSerializer::DeserializeSimulcastDescription(void **__src@<X1>, size_t __len@<X2>, uint64_t a3@<X8>)
{
  void **v6;
  size_t v7;
  size_t v8;
  void **v9;
  unint64_t v11;
  void **v12;
  void **v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  void **v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  void **v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  void **v43;
  int v44;
  void *v45;
  void **v46;
  void **v47;
  void **v48;
  void *v49;
  void **v50;
  void **v51;
  void **v52;
  int v53;
  char v54;
  _DWORD *v55;
  uint64_t v56;
  void **v57;
  void **v58;
  void **v59;
  void *v60;
  void **v61;
  void **v62;
  void **v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  void **v68;
  void **v69;
  void **v70;
  void *v71;
  void **v72;
  void **v73;
  void **v74;
  void **v75;
  void **v76;
  void **v77;
  void *v78;
  void **v79;
  void **v80;
  void **v81;
  int v82;
  void *v83[4];
  void *v84[2];
  uint64_t v85;
  char v86;
  int v87;
  void *v88[3];
  _DWORD v89[2];
  void *v90[2];
  uint64_t v91;
  char v92;
  void *__p;
  void **v94;
  uint64_t v95;
  void **v96;
  __int128 v97;
  void *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  char v102;

  __p = 0;
  v94 = 0;
  v95 = 0;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_194:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    *(_QWORD *)&v97 = __len;
    *((_QWORD *)&v97 + 1) = v8 | 0x8000000000000000;
    v96 = v6;
  }
  else
  {
    HIBYTE(v97) = __len;
    v6 = (void **)&v96;
  }
  v9 = (void **)((char *)v6 + __len);
  if (v6 <= __src && v9 > __src)
    goto LABEL_193;
  if (__len)
    memmove(v6, __src, __len);
  *(_BYTE *)v9 = 0;
  if (SHIBYTE(v97) < 0)
  {
    v11 = v97;
    if ((v97 & 0x8000000000000000) != 0)
      goto LABEL_193;
    v12 = v96;
    if ((_QWORD)v97)
    {
      if (!v96)
        goto LABEL_193;
    }
  }
  else
  {
    v11 = HIBYTE(v97);
    v12 = (void **)&v96;
  }
  rtc::tokenize((uint64_t)v12, v11, 0x20u, (uint64_t)&__p);
  if (SHIBYTE(v97) < 0)
    operator delete(v96);
  v13 = (void **)__p;
  v14 = (char *)v94 - (_BYTE *)__p;
  v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (_BYTE *)__p) >> 3);
  if (v15 != 2 && v15 != 4)
  {
    v30 = (char *)operator new(0x38uLL);
    if (v30 > "Must have one or two <direction, streams> pairs."
      || v30 + 48 <= "Must have one or two <direction, streams> pairs.")
    {
      strcpy(v30, "Must have one or two <direction, streams> pairs.");
      *(_DWORD *)a3 = 5;
      *(_QWORD *)(a3 + 8) = v30;
      v29 = xmmword_208F08650;
LABEL_56:
      *(_OWORD *)(a3 + 16) = v29;
      *(_DWORD *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      *(_BYTE *)(a3 + 38) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 88) = 0;
      if (!v13)
        return;
      goto LABEL_57;
    }
    goto LABEL_193;
  }
  v17 = *((unsigned __int8 *)__p + 23);
  v18 = __p;
  v19 = v17;
  if (*((char *)__p + 23) < 0)
  {
    v19 = *((_QWORD *)__p + 1);
    if (v19 < 0)
      goto LABEL_193;
    v18 = *(_DWORD **)__p;
    if (v19)
    {
      if (!v18)
        goto LABEL_193;
    }
  }
  if (v19 != 4 || *v18 != 1684956531)
  {
    v20 = __p;
    v21 = *((unsigned __int8 *)__p + 23);
    if ((v17 & 0x80) != 0)
    {
      v21 = *((_QWORD *)__p + 1);
      if (v21 < 0)
        goto LABEL_193;
      v20 = *(_DWORD **)__p;
      if (v21)
      {
        if (!v20)
          goto LABEL_193;
      }
    }
    if (v21 != 4 || *v20 != 1986225522)
    {
LABEL_50:
      v28 = (char *)operator new(0x20uLL);
      if (v28 > "Valid values: send / recv." || v28 + 26 <= "Valid values: send / recv.")
      {
        strcpy(v28, "Valid values: send / recv.");
        *(_DWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v28;
        v29 = xmmword_208F0AC80;
        goto LABEL_56;
      }
      goto LABEL_193;
    }
  }
  if (v14 == 96)
  {
    v22 = (unsigned __int8 **)((char *)__p + 48);
    v23 = *((_BYTE *)__p + 71);
    v24 = (unsigned __int8 *)__p + 48;
    v25 = v23;
    if ((char)v23 < 0)
    {
      v25 = *((_QWORD *)__p + 7);
      if (v25 < 0)
        goto LABEL_193;
      v24 = *v22;
      if (v25)
      {
        if (!v24)
          goto LABEL_193;
      }
    }
    if (v25 != 4 || *(_DWORD *)v24 != 1684956531)
    {
      v26 = (unsigned __int8 *)__p + 48;
      v27 = *((unsigned __int8 *)__p + 71);
      if ((*((_BYTE *)__p + 71) & 0x80) != 0)
      {
        v27 = *((_QWORD *)__p + 7);
        if (v27 < 0)
          goto LABEL_193;
        v26 = *v22;
        if (v27)
        {
          if (!v26)
            goto LABEL_193;
        }
      }
      if (v27 != 4 || *(_DWORD *)v26 != 1986225522)
        goto LABEL_50;
    }
    if ((v17 & 0x80u) == 0)
      v33 = *((unsigned __int8 *)__p + 23);
    else
      v33 = *((_QWORD *)__p + 1);
    if ((v23 & 0x80u) == 0)
      v34 = *((unsigned __int8 *)__p + 71);
    else
      v34 = *((_QWORD *)__p + 7);
    if (v33 == v34)
    {
      if ((v23 & 0x80u) == 0)
        v35 = (unsigned __int8 *)__p + 48;
      else
        v35 = *v22;
      if ((v17 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)__p, v35, *((_QWORD *)__p + 1)))
          goto LABEL_50;
      }
      else
      {
        if (!(_DWORD)v17)
          goto LABEL_50;
        v36 = (unsigned __int8 *)__p;
        while (*v36 == *v35)
        {
          ++v36;
          ++v35;
          if (!--v17)
            goto LABEL_50;
        }
      }
    }
  }
  LOBYTE(v90[0]) = 0;
  v92 = 0;
  v82 = 10;
  BYTE6(v83[3]) = 0;
  memset(v83, 0, 29);
  LOBYTE(v84[0]) = 0;
  v86 = 0;
  if (v15 <= 1)
    goto LABEL_193;
  *(_OWORD *)v88 = v97;
  v88[2] = v98;
  HIBYTE(v98) = 0;
  LOBYTE(v97) = 0;
  v87 = (int)v96;
  v89[0] = v99;
  *(_DWORD *)((char *)v89 + 3) = *(_DWORD *)((char *)&v99 + 3);
  std::__optional_storage_base<cricket::SimulcastLayerList,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<cricket::SimulcastLayerList,false>>((uint64_t)v90, (uint64_t)&v100);
  if (v102)
  {
    v37 = (void **)v100;
    if ((_QWORD)v100)
    {
      v38 = (void **)*((_QWORD *)&v100 + 1);
      if (*((_QWORD *)&v100 + 1) != (_QWORD)v100)
      {
        v39 = (void **)*((_QWORD *)&v100 + 1);
        do
        {
          v42 = (void **)*(v39 - 3);
          v39 -= 3;
          v41 = v42;
          if (v42)
          {
            v43 = (void **)*(v38 - 2);
            v40 = v41;
            if (v43 != v41)
            {
              do
              {
                if (*((char *)v43 - 9) < 0)
                  operator delete(*(v43 - 4));
                v43 -= 4;
              }
              while (v43 != v41);
              v40 = *v39;
            }
            *(v38 - 2) = v41;
            operator delete(v40);
          }
          v38 = v39;
        }
        while (v39 != v37);
      }
      operator delete(v37);
    }
  }
  if (SHIBYTE(v98) < 0)
  {
    operator delete((void *)v97);
    v44 = v87;
    if (v87)
    {
LABEL_99:
      v45 = v88[1];
      *(void **)(a3 + 8) = v88[0];
      *(_QWORD *)(a3 + 16) = v45;
      *(void **)(a3 + 23) = *(void **)((char *)&v88[1] + 7);
      LOBYTE(v45) = HIBYTE(v88[2]);
      memset(v88, 0, sizeof(v88));
      *(_DWORD *)(a3 + 32) = v89[0];
      *(_DWORD *)(a3 + 35) = *(_DWORD *)((char *)v89 + 3);
      *(_DWORD *)a3 = v44;
      *(_BYTE *)(a3 + 31) = (_BYTE)v45;
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 88) = 0;
      if (!v86)
        goto LABEL_172;
      goto LABEL_159;
    }
  }
  else
  {
    v44 = v87;
    if (v87)
      goto LABEL_99;
  }
  if (v14 == 96)
  {
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (_BYTE *)__p) >> 3) <= 3)
      goto LABEL_193;
    *(_OWORD *)v83 = v97;
    v83[2] = v98;
    HIBYTE(v98) = 0;
    LOBYTE(v97) = 0;
    v82 = (int)v96;
    LODWORD(v83[3]) = v99;
    *(_DWORD *)((char *)&v83[3] + 3) = *(_DWORD *)((char *)&v99 + 3);
    std::__optional_storage_base<cricket::SimulcastLayerList,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<cricket::SimulcastLayerList,false>>((uint64_t)v84, (uint64_t)&v100);
    if (v102)
    {
      v46 = (void **)v100;
      if ((_QWORD)v100)
      {
        v47 = (void **)*((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1) != (_QWORD)v100)
        {
          v48 = (void **)*((_QWORD *)&v100 + 1);
          do
          {
            v51 = (void **)*(v48 - 3);
            v48 -= 3;
            v50 = v51;
            if (v51)
            {
              v52 = (void **)*(v47 - 2);
              v49 = v50;
              if (v52 != v50)
              {
                do
                {
                  if (*((char *)v52 - 9) < 0)
                    operator delete(*(v52 - 4));
                  v52 -= 4;
                }
                while (v52 != v50);
                v49 = *v48;
              }
              *(v47 - 2) = v50;
              operator delete(v49);
            }
            v47 = v48;
          }
          while (v48 != v46);
        }
        operator delete(v46);
      }
    }
    if (SHIBYTE(v98) < 0)
      operator delete((void *)v97);
    v53 = v82;
    if (v82)
    {
      *(_OWORD *)(a3 + 8) = *(_OWORD *)v83;
      *(void **)(a3 + 23) = *(void **)((char *)&v83[1] + 7);
      v54 = HIBYTE(v83[2]);
      HIBYTE(v83[2]) = 0;
      v83[0] = 0;
      *(_DWORD *)(a3 + 32) = v83[3];
      *(_DWORD *)(a3 + 35) = *(_DWORD *)((char *)&v83[3] + 3);
      *(_DWORD *)a3 = v82;
      *(_BYTE *)(a3 + 31) = v54;
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 88) = 0;
      if (!v86)
        goto LABEL_172;
      goto LABEL_159;
    }
  }
  else
  {
    v53 = 10;
  }
  v55 = __p;
  if (v94 == __p)
    goto LABEL_193;
  if (*((char *)__p + 23) < 0)
  {
    v56 = *((_QWORD *)__p + 1);
    if (v56 < 0)
      goto LABEL_193;
    v55 = *(_DWORD **)__p;
    if (v56)
    {
      if (!v55)
        goto LABEL_193;
    }
  }
  else
  {
    v56 = *((unsigned __int8 *)__p + 23);
  }
  if (v56 == 4 && *v55 == 1684956531)
    goto LABEL_197;
  LODWORD(v96) = 0;
  v97 = *(_OWORD *)v88;
  v98 = v88[2];
  LODWORD(v99) = v89[0];
  *(_DWORD *)((char *)&v99 + 3) = *(_DWORD *)((char *)v89 + 3);
  LOBYTE(v100) = 0;
  v102 = 0;
  if (v92)
  {
    v100 = *(_OWORD *)v90;
    v101 = v91;
    v90[1] = 0;
    v91 = 0;
    v90[0] = 0;
    v102 = 1;
  }
  v87 = v53;
  *(_OWORD *)v88 = *(_OWORD *)v83;
  v88[2] = v83[2];
  v89[0] = v83[3];
  *(_DWORD *)((char *)v89 + 3) = *(_DWORD *)((char *)&v83[3] + 3);
  std::__optional_storage_base<cricket::SimulcastLayerList,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<cricket::SimulcastLayerList,false>>((uint64_t)v90, (uint64_t)v84);
  v82 = 0;
  v83[0] = (void *)v97;
  HIBYTE(v83[2]) = HIBYTE(v98);
  HIBYTE(v98) = 0;
  LOBYTE(v97) = 0;
  std::__optional_storage_base<cricket::SimulcastLayerList,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<cricket::SimulcastLayerList,false>>((uint64_t)v84, (uint64_t)&v100);
  if (v102)
  {
    v57 = (void **)v100;
    if ((_QWORD)v100)
    {
      v58 = (void **)*((_QWORD *)&v100 + 1);
      if (*((_QWORD *)&v100 + 1) != (_QWORD)v100)
      {
        v59 = (void **)*((_QWORD *)&v100 + 1);
        do
        {
          v62 = (void **)*(v59 - 3);
          v59 -= 3;
          v61 = v62;
          if (v62)
          {
            v63 = (void **)*(v58 - 2);
            v60 = v61;
            if (v63 != v61)
            {
              do
              {
                if (*((char *)v63 - 9) < 0)
                  operator delete(*(v63 - 4));
                v63 -= 4;
              }
              while (v63 != v61);
              v60 = *v59;
            }
            *(v58 - 2) = v61;
            operator delete(v60);
          }
          v58 = v59;
        }
        while (v59 != v57);
      }
      operator delete(v57);
    }
  }
  if (SHIBYTE(v98) < 0)
    operator delete((void *)v97);
  if (!v87)
  {
LABEL_197:
    if (!v92)
      goto LABEL_193;
    v65 = *(_OWORD *)v90;
    v64 = v91;
    v90[0] = 0;
    v90[1] = 0;
    v91 = 0;
  }
  else
  {
    v64 = 0;
    v65 = 0uLL;
  }
  if (v82)
  {
    v66 = 0;
    v67 = 0uLL;
    goto LABEL_158;
  }
  if (!v86)
  {
LABEL_193:
    __break(1u);
    goto LABEL_194;
  }
  v67 = *(_OWORD *)v84;
  v66 = v85;
  v84[0] = 0;
  v84[1] = 0;
  v85 = 0;
LABEL_158:
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 38) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 29) = 0;
  *(_OWORD *)(a3 + 40) = v65;
  *(_QWORD *)(a3 + 56) = v64;
  v96 = 0;
  v97 = 0uLL;
  v98 = 0;
  *(_OWORD *)(a3 + 64) = v67;
  *(_QWORD *)(a3 + 80) = v66;
  v99 = 0;
  *(_QWORD *)&v100 = 0;
  *(_BYTE *)(a3 + 88) = 1;
  cricket::SimulcastDescription::~SimulcastDescription((cricket::SimulcastDescription *)&v96);
  if (!v86)
    goto LABEL_172;
LABEL_159:
  v68 = (void **)v84[0];
  if (v84[0])
  {
    v69 = (void **)v84[1];
    if (v84[1] != v84[0])
    {
      v70 = (void **)v84[1];
      do
      {
        v73 = (void **)*(v70 - 3);
        v70 -= 3;
        v72 = v73;
        if (v73)
        {
          v74 = (void **)*(v69 - 2);
          v71 = v72;
          if (v74 != v72)
          {
            do
            {
              if (*((char *)v74 - 9) < 0)
                operator delete(*(v74 - 4));
              v74 -= 4;
            }
            while (v74 != v72);
            v71 = *v70;
          }
          *(v69 - 2) = v72;
          operator delete(v71);
        }
        v69 = v70;
      }
      while (v70 != v68);
    }
    operator delete(v68);
  }
LABEL_172:
  if (SHIBYTE(v83[2]) < 0)
    operator delete(v83[0]);
  if (v92)
  {
    v75 = (void **)v90[0];
    if (v90[0])
    {
      v76 = (void **)v90[1];
      if (v90[1] != v90[0])
      {
        v77 = (void **)v90[1];
        do
        {
          v80 = (void **)*(v77 - 3);
          v77 -= 3;
          v79 = v80;
          if (v80)
          {
            v81 = (void **)*(v76 - 2);
            v78 = v79;
            if (v81 != v79)
            {
              do
              {
                if (*((char *)v81 - 9) < 0)
                  operator delete(*(v81 - 4));
                v81 -= 4;
              }
              while (v81 != v79);
              v78 = *v77;
            }
            *(v76 - 2) = v79;
            operator delete(v78);
          }
          v76 = v77;
        }
        while (v77 != v75);
      }
      operator delete(v75);
    }
  }
  if (SHIBYTE(v88[2]) < 0)
  {
    operator delete(v88[0]);
    v13 = (void **)__p;
    if (!__p)
      return;
  }
  else
  {
    v13 = (void **)__p;
    if (!__p)
      return;
  }
LABEL_57:
  v31 = v94;
  v32 = v13;
  if (v94 != v13)
  {
    do
    {
      if (*((char *)v31 - 1) < 0)
        operator delete(*(v31 - 3));
      v31 -= 3;
    }
    while (v31 != v13);
    v32 = __p;
  }
  v94 = v13;
  operator delete(v32);
}

void webrtc::`anonymous namespace'::ParseSimulcastLayerList(uint64_t a1, size_t __sz)
{
  unint64_t v2;
  char *v4;
  _BOOL4 v6;
  unint64_t v7;
  char *v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  std::string *v31;
  unint64_t v32;
  std::string *v33;
  const std::string::value_type **v34;
  __int128 v35;
  std::string *v36;
  char *v37;
  int v38;
  int v39;
  std::string *v40;
  std::string *v41;
  void *v42;
  char *v43;
  char *v44;
  void **v45;
  void **v46;
  void *v47;
  void **v48;
  void *v49;
  void **v50;
  void **v51;
  void **v52;
  _BOOL4 v53;
  _OWORD *v54;
  char *v56;
  char *v57;
  _BYTE __p[32];
  _BYTE v59[7];
  void *v60;
  std::string *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;

  if (*(char *)(__sz + 23) < 0)
  {
    v2 = *(_QWORD *)(__sz + 8);
    if ((v2 & 0x8000000000000000) != 0)
      goto LABEL_113;
    __sz = *(_QWORD *)__sz;
    if (v2 && __sz == 0)
      goto LABEL_113;
  }
  else
  {
    v2 = *(unsigned __int8 *)(__sz + 23);
  }
  rtc::split(__sz, v2, 0x3Bu, &v67);
  v4 = v67;
  v56 = v68;
  if (v67 == v68)
  {
    v43 = (char *)operator new(0x20uLL);
    if (v43 <= "Layer list cannot be empty." && v43 + 27 > "Layer list cannot be empty.")
      goto LABEL_113;
    strcpy(v43, "Layer list cannot be empty.");
    *(_DWORD *)a1 = 5;
    *(_QWORD *)(a1 + 8) = v43;
    *(_OWORD *)(a1 + 16) = xmmword_208F051A0;
    *(_DWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 36) = 0;
    *(_BYTE *)(a1 + 38) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 64) = 0;
    if (v4)
    {
LABEL_111:
      v68 = v4;
      operator delete(v4);
    }
  }
  else
  {
    v65 = 0uLL;
    v66 = 0;
    v6 = &__p[8] <= "Rid must not be empty." && &__p[30] > "Rid must not be empty.";
    v53 = v6;
    v54 = (_OWORD *)(a1 + 8);
    while (1)
    {
      v7 = *((_QWORD *)v4 + 1);
      if (!v7)
        break;
      rtc::split(*(_QWORD *)v4, v7, 0x2Cu, &v63);
      v8 = v63;
      v9 = v64;
      v57 = v4;
      if (v63 != v64)
      {
        v60 = 0;
        v61 = 0;
        v62 = 0;
        while (1)
        {
          v10 = *((_QWORD *)v8 + 1);
          if (v10 == 1)
            break;
          if (!v10)
            goto LABEL_73;
          v11 = *(_BYTE **)v8;
          v12 = **(unsigned __int8 **)v8;
          v13 = v12 == 126;
          if (v12 == 126)
          {
            if ((--v10 & 0x8000000000000000) != 0)
              goto LABEL_113;
            ++v11;
          }
          if (v10 >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_114;
          if (v10 <= 0x16)
            goto LABEL_32;
          v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v14 = v10 | 7;
          v15 = v14 + 1;
          v16 = operator new(v14 + 1);
          *(_QWORD *)&__p[8] = v10;
          *(_QWORD *)&__p[16] = v15 | 0x8000000000000000;
          *(_QWORD *)__p = v16;
LABEL_33:
          if (v16 <= v11 && &v16[v10] > v11)
            goto LABEL_113;
          memmove(v16, v11, v10);
          v16[v10] = 0;
          __p[24] = v13;
          v18 = v61;
          if ((unint64_t)v61 >= v62)
          {
            v20 = (std::string *)v60;
            v21 = ((char *)v61 - (_BYTE *)v60) >> 5;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 59)
              goto LABEL_114;
            v23 = v62 - (_QWORD)v60;
            if ((uint64_t)(v62 - (_QWORD)v60) >> 4 > v22)
              v22 = v23 >> 4;
            v24 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0;
            v25 = 0x7FFFFFFFFFFFFFFLL;
            if (!v24)
              v25 = v22;
            if (!v25)
              goto LABEL_113;
            if (v25 >> 59)
              std::__throw_bad_array_new_length[abi:sn180100]();
            v26 = 32 * v25;
            v27 = operator new(32 * v25);
            v28 = v27;
            v29 = &v27[32 * v21];
            if ((__p[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v27[32 * v21], *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
              v20 = (std::string *)v60;
              v18 = v61;
              v30 = &v28[v26];
              v28[32 * v21 + 24] = __p[24];
              v31 = (std::string *)(v29 + 32);
              if (v18 == v20)
                goto LABEL_61;
LABEL_50:
              v32 = 0;
              do
              {
                v33 = (std::string *)&v29[v32 - 32];
                v34 = (const std::string::value_type **)((char *)&v18[-1] + v32 - 8);
                if (v18->__r_.__value_.__s.__data_[v32 - 9] < 0)
                {
                  std::string::__init_copy_ctor_external(v33, *v34, v18[-1].__r_.__value_.__r.__words[v32 / 8]);
                }
                else
                {
                  v35 = *(_OWORD *)v34;
                  *(_QWORD *)&v29[v32 - 16] = *(_QWORD *)((char *)&v18->__r_.__value_.__l + v32 - 16);
                  *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v35;
                }
                v29[v32 - 8] = v18->__r_.__value_.__s.__data_[v32 - 8];
                v32 -= 32;
              }
              while ((std::string *)((char *)v18 + v32) != v20);
              v20 = (std::string *)v60;
              v36 = v61;
              v60 = &v29[v32];
              v61 = v31;
              v62 = (unint64_t)v30;
              while (v36 != v20)
              {
                if (v36[-1].__r_.__value_.__s.__data_[15] < 0)
                  operator delete((void *)v36[-2].__r_.__value_.__r.__words[2]);
                v36 = (std::string *)((char *)v36 - 32);
              }
            }
            else
            {
              *(_OWORD *)v29 = *(_OWORD *)__p;
              *((_QWORD *)v29 + 2) = *(_QWORD *)&__p[16];
              v30 = &v27[v26];
              v27[32 * v21 + 24] = v13;
              v31 = (std::string *)(v29 + 32);
              if (v18 != v20)
                goto LABEL_50;
LABEL_61:
              v60 = v29;
              v61 = v31;
              v62 = (unint64_t)v30;
            }
            if (v20)
              operator delete(v20);
            v61 = v31;
            if ((__p[23] & 0x80000000) == 0)
              goto LABEL_19;
            goto LABEL_68;
          }
          if (!v61)
            goto LABEL_113;
          if ((__p[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v61, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
          }
          else
          {
            v19 = *(_OWORD *)__p;
            v61->__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          }
          v18[1].__r_.__value_.__s.__data_[0] = __p[24];
          v61 = (std::string *)((char *)v18 + 32);
          if ((__p[23] & 0x80000000) == 0)
            goto LABEL_19;
LABEL_68:
          operator delete(*(void **)__p);
LABEL_19:
          v8 += 16;
          if (v8 == v9)
          {
            cricket::SimulcastLayerList::AddLayerWithAlternatives((uint64_t)&v65, (uint64_t *)&v60);
            v38 = 0;
            v40 = (std::string *)v60;
            if (!v60)
              goto LABEL_84;
LABEL_77:
            v41 = v61;
            v42 = v40;
            if (v61 != v40)
            {
              do
              {
                if (v41[-1].__r_.__value_.__s.__data_[15] < 0)
                  operator delete((void *)v41[-2].__r_.__value_.__r.__words[2]);
                v41 = (std::string *)((char *)v41 - 32);
              }
              while (v41 != v40);
              v42 = v60;
            }
            v61 = v40;
            operator delete(v42);
LABEL_84:
            v8 = v63;
            if (v63)
              goto LABEL_85;
            goto LABEL_86;
          }
        }
        v11 = *(_BYTE **)v8;
        if (**(_BYTE **)v8 == 126)
        {
LABEL_73:
          *(_DWORD *)__p = 5;
          __p[31] = 22;
          if (!v53)
          {
            strcpy(&__p[8], "Rid must not be ");
            __p[30] = 0;
            *(_DWORD *)v59 = 0;
            v59[4] = 0;
            v59[6] = 0;
            *(_DWORD *)a1 = 5;
            *v54 = *(_OWORD *)&__p[8];
            *(_QWORD *)(a1 + 24) = *(_QWORD *)&__p[24];
            *(_QWORD *)&__p[16] = 0;
            __p[25] = 0;
            *(_WORD *)&__p[26] = 0;
            *(_DWORD *)&__p[28] = 0;
            *(_QWORD *)&__p[8] = 0;
            v39 = *(_DWORD *)v59;
            *(_DWORD *)(a1 + 35) = *(_DWORD *)&v59[3];
            *(_DWORD *)(a1 + 32) = v39;
            *(_BYTE *)(a1 + 40) = 0;
            v38 = 1;
            *(_BYTE *)(a1 + 64) = 0;
            v40 = (std::string *)v60;
            if (!v60)
              goto LABEL_84;
            goto LABEL_77;
          }
LABEL_113:
          __break(1u);
LABEL_114:
          abort();
        }
        v13 = 0;
        v10 = 1;
LABEL_32:
        __p[23] = v10;
        v16 = __p;
        goto LABEL_33;
      }
      v37 = (char *)operator new(0x30uLL);
      if (v37 <= "Simulcast alternative layer list is malformed."
        && v37 + 46 > "Simulcast alternative layer list is malformed.")
      {
        goto LABEL_113;
      }
      strcpy(v37, "Simulcast alternative layer list is malformed.");
      *(_DWORD *)a1 = 5;
      *(_QWORD *)(a1 + 8) = v37;
      *(_OWORD *)(a1 + 16) = xmmword_208F1B0A0;
      *(_DWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 36) = 0;
      *(_BYTE *)(a1 + 38) = 0;
      *(_BYTE *)(a1 + 40) = 0;
      v38 = 1;
      *(_BYTE *)(a1 + 64) = 0;
      if (v8)
      {
LABEL_85:
        v64 = v8;
        operator delete(v8);
      }
LABEL_86:
      if (v38)
        goto LABEL_96;
      v4 = v57 + 16;
      if (v57 + 16 == v56)
      {
        *(_DWORD *)a1 = 0;
        *(_BYTE *)(a1 + 38) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)v54 = 0;
        *(_QWORD *)(a1 + 29) = 0;
        *(_OWORD *)(a1 + 40) = v65;
        *(_QWORD *)(a1 + 56) = v66;
        *(_BYTE *)(a1 + 64) = 1;
        goto LABEL_110;
      }
    }
    v44 = (char *)operator new(0x30uLL);
    if (v44 <= "Simulcast alternative layer list is empty." && v44 + 42 > "Simulcast alternative layer list is empty.")
      goto LABEL_113;
    strcpy(v44, "Simulcast alternative layer list is empty.");
    *(_DWORD *)a1 = 5;
    *(_QWORD *)(a1 + 8) = v44;
    *(_OWORD *)(a1 + 16) = xmmword_208F1AA00;
    *(_DWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 36) = 0;
    *(_BYTE *)(a1 + 38) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 64) = 0;
LABEL_96:
    v45 = (void **)v65;
    if ((_QWORD)v65)
    {
      v46 = (void **)*((_QWORD *)&v65 + 1);
      v47 = (void *)v65;
      if (*((_QWORD *)&v65 + 1) != (_QWORD)v65)
      {
        v48 = (void **)*((_QWORD *)&v65 + 1);
        do
        {
          v51 = (void **)*(v48 - 3);
          v48 -= 3;
          v50 = v51;
          if (v51)
          {
            v52 = (void **)*(v46 - 2);
            v49 = v50;
            if (v52 != v50)
            {
              do
              {
                if (*((char *)v52 - 9) < 0)
                  operator delete(*(v52 - 4));
                v52 -= 4;
              }
              while (v52 != v50);
              v49 = *v48;
            }
            *(v46 - 2) = v50;
            operator delete(v49);
          }
          v46 = v48;
        }
        while (v48 != v45);
        v47 = (void *)v65;
      }
      *((_QWORD *)&v65 + 1) = v45;
      operator delete(v47);
    }
LABEL_110:
    v4 = v67;
    if (v67)
      goto LABEL_111;
  }
}

void webrtc::SimulcastSdpSerializer::SerializeRidDescription(const cricket::RidDescription *__src@<X1>, std::string *a2@<X8>)
{
  size_t size;
  BOOL v6;
  const cricket::RidDescription *v7;
  BOOL v8;
  uint64_t v9;
  size_t v10;
  const cricket::RidDescription *v11;
  std::string::size_type v13;
  unint64_t v14;
  unint64_t v15;
  const cricket::RidDescription *v16;
  int v17;
  uint64_t v18;
  std::string::size_type v19;
  std::string *p_dst;
  _BYTE *v21;
  std::string::size_type v22;
  const char *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  const std::string::value_type *v26;
  std::string *v27;
  _DWORD *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string *v32;
  _BYTE *v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::string::size_type v36;
  std::string *v37;
  _WORD *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  int *v42;
  int *v43;
  int *v44;
  int v45;
  int v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v51;
  std::string *v52;
  _BYTE *v53;
  std::string::size_type v54;
  _QWORD *v55;
  char *v56;
  std::string::size_type v57;
  std::string::size_type v58;
  const std::string::value_type *v59;
  int v60;
  std::string::size_type v61;
  BOOL v62;
  std::string *v63;
  std::string::size_type v65;
  std::string::size_type v66;
  std::string::size_type v67;
  int v68;
  std::string *v69;
  char *v70;
  std::string::size_type v71;
  std::string::size_type v72;
  std::string::size_type v73;
  const std::string::value_type *v74;
  int v75;
  std::string::size_type v76;
  BOOL v77;
  std::string *v78;
  _BYTE *v79;
  std::string::size_type v80;
  std::string::size_type v81;
  std::string::size_type v82;
  char *v83;
  std::string *v84;
  char *v85;
  std::string::size_type v86;
  char *v87;
  std::string *v88;
  std::string __dst;

  memset(&__dst, 0, sizeof(__dst));
  if (*((char *)__src + 23) < 0)
  {
    size = *((_QWORD *)__src + 1);
    if ((size & 0x8000000000000000) != 0)
      goto LABEL_226;
    v7 = *(const cricket::RidDescription **)__src;
    v6 = size == 0;
    v8 = size && v7 == 0;
    if (v8)
      goto LABEL_226;
  }
  else
  {
    size = *((unsigned __int8 *)__src + 23);
    v6 = *((_BYTE *)__src + 23) == 0;
    v7 = __src;
  }
  if (size <= 0x16)
  {
    if (v6)
    {
      size = 0;
      v14 = 0;
      LODWORD(v15) = 0;
    }
    else
    {
      v16 = (const cricket::RidDescription *)((char *)&__dst + size);
      if (&__dst <= (std::string *)v7 && v16 > v7)
        goto LABEL_226;
      memmove(&__dst, v7, size);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        __dst.__r_.__value_.__l.__size_ = size;
      else
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size;
      *(_BYTE *)v16 = 0;
      LODWORD(v15) = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      v14 = __dst.__r_.__value_.__r.__words[2];
      size = __dst.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    if (size - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      goto LABEL_227;
    v9 = 44;
    if (size > 0x2C)
      v9 = size;
    v10 = (v9 | 7) + 1;
    v11 = (const cricket::RidDescription *)operator new(v10);
    if (v11 <= v7 && (const cricket::RidDescription *)((char *)v11 + size) > v7)
      goto LABEL_226;
    v13 = (std::string::size_type)v11;
    memcpy(v11, v7, size);
    v14 = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__l.__size_ = size;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = v13;
    *(_BYTE *)(v13 + size) = 0;
    v15 = (v10 | 0x8000000000000000) >> 56;
  }
  v17 = (char)v15;
  v18 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  v15 = v15;
  if ((v15 & 0x80u) == 0)
    v19 = 22;
  else
    v19 = v18;
  if ((v15 & 0x80u) != 0)
    v15 = size;
  if (v19 == v15)
  {
    std::string::__grow_by_and_replace(&__dst, v19, 1uLL, v19, v19, 0, 1uLL, " ");
  }
  else
  {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (v17 >= 0)
      p_dst = &__dst;
    v21 = (char *)p_dst + v15;
    if ((char *)p_dst + v15 <= " " && v21 + 1 > " ")
      goto LABEL_226;
    *v21 = 32;
    v22 = v15 + 1;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      __dst.__r_.__value_.__l.__size_ = v22;
    else
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22 & 0x7F;
    p_dst->__r_.__value_.__s.__data_[v22] = 0;
  }
  if (*((_DWORD *)__src + 6))
    v23 = "recv";
  else
    v23 = "send";
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = 22;
  else
    v24 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v25 = __dst.__r_.__value_.__l.__size_;
  if (v24 - v25 >= 4)
  {
    v27 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v28 = (_DWORD *)((char *)v27 + v25);
    if ((char *)v27 + v25 <= v23 && v28 + 1 > (_DWORD *)v23)
      goto LABEL_226;
    *v28 = *(_DWORD *)v23;
    v29 = v25 + 4;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      __dst.__r_.__value_.__l.__size_ = v25 + 4;
    else
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v29 & 0x7F;
    v27->__r_.__value_.__s.__data_[v29] = 0;
    v26 = " ";
    v88 = a2;
    if (*((_QWORD *)__src + 4) == *((_QWORD *)__src + 5))
      goto LABEL_128;
  }
  else
  {
    std::string::__grow_by_and_replace(&__dst, v24, v25 - v24 + 4, v25, v25, 0, 4uLL, v23);
    v26 = " ";
    v88 = a2;
    if (*((_QWORD *)__src + 4) == *((_QWORD *)__src + 5))
      goto LABEL_128;
  }
  v30 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = 22;
  else
    v31 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v30 = __dst.__r_.__value_.__l.__size_;
  if (v31 == v30)
  {
    std::string::__grow_by_and_replace(&__dst, v31, 1uLL, v31, v31, 0, 1uLL, " ");
  }
  else
  {
    v32 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v32 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v33 = (char *)v32 + v30;
    if ((char *)v32 + v30 <= " " && v33 + 1 > " ")
      goto LABEL_226;
    *v33 = 32;
    v34 = v30 + 1;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      __dst.__r_.__value_.__l.__size_ = v34;
    else
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v34 & 0x7F;
    v32->__r_.__value_.__s.__data_[v34] = 0;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = 22;
  else
    v35 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v36 = __dst.__r_.__value_.__l.__size_;
  if (v35 - v36 < 2)
  {
    std::string::__grow_by_and_replace(&__dst, v35, v36 - v35 + 2, v36, v36, 0, 2uLL, "pt");
    goto LABEL_91;
  }
  v37 = &__dst;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v37 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v38 = (_WORD *)((char *)v37 + v36);
  if ((char *)v37 + v36 <= "pt" && v38 + 1 > (_WORD *)"pt")
  {
LABEL_226:
    __break(1u);
LABEL_227:
    abort();
  }
  *v38 = 29808;
  v39 = v36 + 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    __dst.__r_.__value_.__l.__size_ = v36 + 2;
  else
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v39 & 0x7F;
  v37->__r_.__value_.__s.__data_[v39] = 0;
LABEL_91:
  v40 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = 22;
  else
    v41 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v40 = __dst.__r_.__value_.__l.__size_;
  if (v41 != v40)
  {
    v52 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v52 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v53 = (char *)v52 + v40;
    if ((char *)v52 + v40 > "=" || v53 + 1 <= "=")
    {
      *v53 = 61;
      v54 = v40 + 1;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        __dst.__r_.__value_.__l.__size_ = v54;
        v52->__r_.__value_.__s.__data_[v54] = 0;
        v42 = (int *)*((_QWORD *)__src + 4);
        v43 = (int *)*((_QWORD *)__src + 5);
        if (v42 != v43)
          goto LABEL_98;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v54 & 0x7F;
        v52->__r_.__value_.__s.__data_[v54] = 0;
        v42 = (int *)*((_QWORD *)__src + 4);
        v43 = (int *)*((_QWORD *)__src + 5);
        if (v42 != v43)
          goto LABEL_98;
      }
LABEL_125:
      v26 = ";";
      v55 = (_QWORD *)*((_QWORD *)__src + 7);
      v56 = (char *)__src + 64;
      if (v55 != (_QWORD *)((char *)__src + 64))
        goto LABEL_131;
      goto LABEL_219;
    }
    goto LABEL_226;
  }
  std::string::__grow_by_and_replace(&__dst, v41, 1uLL, v41, v41, 0, 1uLL, "=");
  v42 = (int *)*((_QWORD *)__src + 4);
  v43 = (int *)*((_QWORD *)__src + 5);
  if (v42 == v43)
    goto LABEL_125;
LABEL_98:
  v45 = *v42;
  v44 = v42 + 1;
  rtc::StringBuilder::operator<<(&__dst, v45);
  if (v44 != v43)
  {
    v26 = ";";
    while (1)
    {
      v46 = *v44;
      v47 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = 22;
      else
        v48 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = __dst.__r_.__value_.__l.__size_;
      if (v48 == v47)
      {
        std::string::__grow_by_and_replace(&__dst, v48, 1uLL, v48, v48, 0, 1uLL, ",");
      }
      else
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = &__dst;
        else
          v49 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((char *)v49 + v47 <= "," && (char *)&v49->__r_.__value_.__l.__data_ + v47 + 1 > ",")
          goto LABEL_226;
        v49->__r_.__value_.__s.__data_[v47] = 44;
        v51 = v47 + 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          __dst.__r_.__value_.__l.__size_ = v51;
        else
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v51 & 0x7F;
        v49->__r_.__value_.__s.__data_[v51] = 0;
      }
      rtc::StringBuilder::operator<<(&__dst, v46);
      if (++v44 == v43)
        goto LABEL_128;
    }
  }
  v26 = ";";
LABEL_128:
  v55 = (_QWORD *)*((_QWORD *)__src + 7);
  v56 = (char *)__src + 64;
  if (v55 != (_QWORD *)((char *)__src + 64))
  {
    do
    {
LABEL_131:
      v57 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = 22;
      else
        v58 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v57 = __dst.__r_.__value_.__l.__size_;
      if (v58 == v57)
      {
        std::string::__grow_by_and_replace(&__dst, v58, 1uLL, v58, v58, 0, 1uLL, v26);
        v59 = (const std::string::value_type *)(v55 + 4);
        v60 = *((char *)v55 + 55);
        if ((v60 & 0x80000000) == 0)
          goto LABEL_138;
      }
      else
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = &__dst;
        else
          v63 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((char *)v63 + v57 <= v26 && (char *)&v63->__r_.__value_.__l.__data_ + v57 + 1 > v26)
          goto LABEL_226;
        v63->__r_.__value_.__s.__data_[v57] = *v26;
        v65 = v57 + 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          __dst.__r_.__value_.__l.__size_ = v65;
          v63->__r_.__value_.__s.__data_[v65] = 0;
          v59 = (const std::string::value_type *)(v55 + 4);
          v60 = *((char *)v55 + 55);
          if ((v60 & 0x80000000) == 0)
          {
LABEL_138:
            v61 = v60;
            v62 = v60 == 0;
            goto LABEL_151;
          }
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v65 & 0x7F;
          v63->__r_.__value_.__s.__data_[v65] = 0;
          v59 = (const std::string::value_type *)(v55 + 4);
          v60 = *((char *)v55 + 55);
          if ((v60 & 0x80000000) == 0)
            goto LABEL_138;
        }
      }
      v61 = v55[5];
      if ((v61 & 0x8000000000000000) != 0)
        goto LABEL_226;
      v59 = *(const std::string::value_type **)v59;
      v62 = v61 == 0;
      if (v61)
      {
        if (!v59)
          goto LABEL_226;
      }
LABEL_151:
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = 22;
      else
        v66 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v67 = __dst.__r_.__value_.__l.__size_;
      if (v66 - v67 < v61)
      {
        std::string::__grow_by_and_replace(&__dst, v66, v67 + v61 - v66, v67, v67, 0, v61, v59);
        v68 = *((char *)v55 + 79);
        if (v68 < 0)
          goto LABEL_159;
        goto LABEL_170;
      }
      if (v62)
        goto LABEL_169;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = &__dst;
      else
        v69 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      v70 = (char *)v69 + v67;
      if ((char *)v69 + v67 <= v59 && &v70[v61] > v59)
        goto LABEL_226;
      memmove(v70, v59, v61);
      v71 = v67 + v61;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v71 & 0x7F;
        v69->__r_.__value_.__s.__data_[v71] = 0;
LABEL_169:
        v68 = *((char *)v55 + 79);
        if (v68 < 0)
          goto LABEL_159;
        goto LABEL_170;
      }
      __dst.__r_.__value_.__l.__size_ = v67 + v61;
      v69->__r_.__value_.__s.__data_[v71] = 0;
      v68 = *((char *)v55 + 79);
      if (v68 < 0)
      {
LABEL_159:
        if (!v55[8])
          goto LABEL_206;
        goto LABEL_171;
      }
LABEL_170:
      if (!(_BYTE)v68)
        goto LABEL_206;
LABEL_171:
      v72 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v73 = 22;
      else
        v73 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v72 = __dst.__r_.__value_.__l.__size_;
      if (v73 == v72)
      {
        std::string::__grow_by_and_replace(&__dst, v73, 1uLL, v73, v73, 0, 1uLL, "=");
        v74 = (const std::string::value_type *)(v55 + 7);
        v75 = *((char *)v55 + 79);
        if ((v75 & 0x80000000) == 0)
          goto LABEL_178;
      }
      else
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = &__dst;
        else
          v78 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v79 = (char *)v78 + v72;
        if ((char *)v78 + v72 <= "=" && v79 + 1 > "=")
          goto LABEL_226;
        *v79 = 61;
        v80 = v72 + 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          __dst.__r_.__value_.__l.__size_ = v80;
          v78->__r_.__value_.__s.__data_[v80] = 0;
          v74 = (const std::string::value_type *)(v55 + 7);
          v75 = *((char *)v55 + 79);
          if ((v75 & 0x80000000) == 0)
          {
LABEL_178:
            v76 = v75;
            v77 = v75 == 0;
            goto LABEL_189;
          }
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v80 & 0x7F;
          v78->__r_.__value_.__s.__data_[v80] = 0;
          v74 = (const std::string::value_type *)(v55 + 7);
          v75 = *((char *)v55 + 79);
          if ((v75 & 0x80000000) == 0)
            goto LABEL_178;
        }
      }
      v76 = v55[8];
      if ((v76 & 0x8000000000000000) != 0)
        goto LABEL_226;
      v74 = *(const std::string::value_type **)v74;
      v77 = v76 == 0;
      if (v76)
      {
        if (!v74)
          goto LABEL_226;
      }
LABEL_189:
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = 22;
      else
        v81 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v82 = __dst.__r_.__value_.__l.__size_;
      if (v81 - v82 < v76)
      {
        std::string::__grow_by_and_replace(&__dst, v81, v82 + v76 - v81, v82, v82, 0, v76, v74);
        v83 = (char *)v55[1];
        if (!v83)
          goto LABEL_216;
        goto LABEL_207;
      }
      if (v77)
        goto LABEL_206;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = &__dst;
      else
        v84 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      v85 = (char *)v84 + v82;
      if ((char *)v84 + v82 <= v74 && &v85[v76] > v74)
        goto LABEL_226;
      memmove(v85, v74, v76);
      v86 = v82 + v76;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v86 & 0x7F;
        v84->__r_.__value_.__s.__data_[v86] = 0;
LABEL_206:
        v83 = (char *)v55[1];
        if (!v83)
          goto LABEL_216;
        goto LABEL_207;
      }
      __dst.__r_.__value_.__l.__size_ = v82 + v76;
      v84->__r_.__value_.__s.__data_[v86] = 0;
      v83 = (char *)v55[1];
      if (!v83)
      {
        do
        {
LABEL_216:
          v87 = (char *)v55[2];
          v8 = *(_QWORD *)v87 == (_QWORD)v55;
          v55 = v87;
        }
        while (!v8);
        goto LABEL_130;
      }
      do
      {
LABEL_207:
        v87 = v83;
        v83 = *(char **)v83;
      }
      while (v83);
LABEL_130:
      v26 = ";";
      v55 = v87;
    }
    while (v87 != v56);
  }
LABEL_219:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v88, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    *v88 = __dst;
  }
}

void webrtc::SimulcastSdpSerializer::DeserializeRidDescription(std::string *__src@<X1>, size_t __len@<X2>, void **a3@<X8>)
{
  std::string *p_p;
  size_t v7;
  size_t v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  void **v20;
  char *v21;
  uint64_t v22;
  const std::string::value_type *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v34;
  char *v35;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string *v39;
  _BYTE *v40;
  std::string::size_type v41;
  char *v42;
  char *v43;
  _DWORD **v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  std::string *v52;
  std::string::size_type *p_size;
  std::string *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _BOOL4 v58;
  int v59;
  __int128 v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  _DWORD *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v69;
  unint64_t v70;
  int v71;
  size_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v79;
  char *v80;
  char v82;
  std::string *v83;
  size_t v84;
  uint64_t v85;
  _WORD *v86;
  std::string *v87;
  std::string *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  void **v93;
  void **v94;
  void *v95;
  uint64_t *v97;
  size_t v98;
  _QWORD *v99;
  size_t v100;
  size_t v101;
  int v102;
  _QWORD *v103;
  int v104;
  size_t v105;
  unint64_t v106;
  char *v107;
  void **v108;
  void **v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  char *v121;
  char *v122;
  std::string::size_type v123;
  std::string *v124;
  std::string::size_type v125;
  std::string::size_type v126;
  char *v127;
  size_t v128;
  void **v129;
  int64_t v131;
  char v132;
  BOOL v133;
  int v135;
  __int32 *v136;
  __int32 *v137;
  __int32 *v138;
  char *v139;
  char *v140;
  int64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  BOOL v145;
  unint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  int v159;
  char *v160;
  char *v161;
  int v162;
  _QWORD *v163;
  size_t v164;
  unint64_t v165;
  void **v166;
  int v167;
  _QWORD *v168;
  size_t v169;
  unint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v176;
  char *v177;
  char v179;
  void **v180;
  size_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v186;
  char *v187;
  void **v189;
  uint64_t v190;
  uint64_t v191;
  void **v192;
  std::string::size_type v193;
  std::string::size_type v194;
  void *v195;
  int v196;
  void **v197;
  void **v198;
  void *v199;
  char *v200;
  int v201;
  size_t v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  size_t v210;
  std::string *v211;
  std::string *v212;
  uint64_t v213;
  uint64_t v214;
  std::string *v215;
  void **v216;
  void *v217;
  std::string::size_type v218;
  uint64_t v219;
  std::string::size_type v220;
  uint64_t *v221;
  uint64_t ***v222;
  _OWORD *v223;
  std::string v224;
  void *v225;
  void **v226;
  uint64_t v227;
  _BYTE __srca[39];
  void *v229;
  uint64_t *v230;
  uint64_t v231;
  std::string __p;
  unint64_t v233;
  void *v234;
  char *v235;
  char *v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  void **v243;
  unint64_t v244;
  unint64_t v245;
  std::string v246;

  v240 = 0;
  v241 = 0;
  v242 = 0;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_487;
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_p = (std::string *)operator new(v7 + 1);
    __p.__r_.__value_.__l.__size_ = __len;
    __p.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = __len;
    p_p = &__p;
  }
  v9 = (std::string *)((char *)p_p + __len);
  if (p_p <= __src && v9 > __src)
    goto LABEL_484;
  if (__len)
    memmove(p_p, __src, __len);
  v9->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_484;
    v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_)
    {
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_484;
    }
  }
  else
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v12 = &__p;
  }
  rtc::tokenize((uint64_t)v12, size, 0x20u, (uint64_t)&v240);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = v240;
  v13 = v241;
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v241 - v240) >> 3);
  if (v15 <= 1)
  {
    v16 = (char *)operator new(0x30uLL);
    if (v16 <= "RID Description must contain <RID> <direction>."
      && v16 + 47 > "RID Description must contain <RID> <direction>.")
    {
      goto LABEL_484;
    }
    strcpy(v16, "RID Description must contain <RID> <direction>.");
    *(_DWORD *)a3 = 5;
    a3[1] = v16;
    v17 = xmmword_208F0B3B0;
    goto LABEL_28;
  }
  if (v15 >= 4)
  {
    v18 = (char *)operator new(0x38uLL);
    if (v18 <= "Invalid RID Description format. Too many arguments."
      && v18 + 51 > "Invalid RID Description format. Too many arguments.")
    {
      goto LABEL_484;
    }
    strcpy(v18, "Invalid RID Description format. Too many arguments.");
    *(_DWORD *)a3 = 5;
    a3[1] = v18;
    v17 = xmmword_208F0B3E0;
    goto LABEL_28;
  }
  if (v240[23] < 0)
  {
    v22 = *((_QWORD *)v240 + 1);
    if (v22 < 0)
      goto LABEL_484;
    v23 = *(const std::string::value_type **)v240;
    if (v22)
    {
      if (!v23)
        goto LABEL_484;
    }
  }
  else
  {
    v22 = v240[23];
    v23 = v240;
  }
  if ((unint64_t)(v22 - 17) < 0xFFFFFFFFFFFFFFF0)
    goto LABEL_50;
  v24 = MEMORY[0x24BDAC740];
  do
  {
    v25 = *v23;
    if ((v25 & 0x80000000) != 0)
    {
      if (!__maskrune(v25, 0x500uLL))
        goto LABEL_49;
    }
    else if ((*(_DWORD *)(v24 + 4 * v25 + 60) & 0x500) == 0)
    {
LABEL_49:
      v14 = v240;
      v13 = v241;
LABEL_50:
      if (v13 == v14)
        goto LABEL_484;
      v26 = v14[23];
      if (v26 >= 0)
        v27 = v14[23];
      else
        v27 = *((_QWORD *)v14 + 1);
      v28 = v27 + 19;
      if (v27 + 19 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_487;
      if (v28 > 0x16)
      {
        v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17)
          v30 = v28 | 7;
        v31 = v30 + 1;
        v29 = (char *)operator new(v30 + 1);
        v246.__r_.__value_.__l.__size_ = v27 + 19;
        v246.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        v246.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      }
      else
      {
        memset(&v246, 0, sizeof(v246));
        v29 = (char *)&v246;
        *((_BYTE *)&v246.__r_.__value_.__s + 23) = v27 + 19;
      }
      v32 = v29 + 19;
      if (v29 > "Invalid RID value: " || v32 <= "Invalid RID value: ")
      {
        *(_DWORD *)(v29 + 15) = 540697973;
        *(_OWORD *)v29 = *(_OWORD *)"Invalid RID value: ";
        v34 = v26 >= 0 ? v14 : *(char **)v14;
        v35 = &v32[v27];
        if (v34 < v32 || v35 <= v34)
        {
          if (v27)
            memmove(v32, v34, v27);
          *v35 = 0;
          v37 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
          if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = 22;
          else
            v38 = (v246.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v37 = v246.__r_.__value_.__l.__size_;
          if (v38 == v37)
          {
            std::string::__grow_by_and_replace(&v246, v38, 1uLL, v38, v38, 0, 1uLL, ".");
            goto LABEL_104;
          }
          v39 = &v246;
          if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v39 = (std::string *)v246.__r_.__value_.__r.__words[0];
          v40 = (char *)v39 + v37;
          if ((char *)v39 + v37 > "." || v40 + 1 <= ".")
          {
            *v40 = 46;
            v41 = v37 + 1;
            if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
              v246.__r_.__value_.__l.__size_ = v41;
            else
              *((_BYTE *)&v246.__r_.__value_.__s + 23) = v41 & 0x7F;
            v39->__r_.__value_.__s.__data_[v41] = 0;
LABEL_104:
            *(std::string *)__srca = v246;
            memset(&v246, 0, sizeof(v246));
            if ((__srca[23] & 0x80000000) == 0)
            {
              v51 = __srca[23];
              LODWORD(__p.__r_.__value_.__l.__data_) = 5;
              v52 = (std::string *)__srca;
              if (__srca[23] <= 0x16uLL)
                goto LABEL_106;
LABEL_113:
              v55 = (v51 & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((v51 | 7) != 0x17)
                v55 = v51 | 7;
              v56 = v55 + 1;
              p_size = (std::string::size_type *)operator new(v55 + 1);
              __p.__r_.__value_.__r.__words[2] = v51;
              v233 = v56 | 0x8000000000000000;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
              v54 = (std::string *)((char *)p_size + v51);
              if (p_size <= (std::string::size_type *)v52)
                goto LABEL_116;
LABEL_117:
              if (v51)
                memmove(p_size, v52, v51);
              v54->__r_.__value_.__s.__data_[0] = 0;
              LODWORD(v234) = 0;
              BYTE4(v234) = 0;
              BYTE6(v234) = 0;
              *(_DWORD *)a3 = __p.__r_.__value_.__l.__data_;
              *(_OWORD *)(a3 + 1) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
              a3[3] = (void *)v233;
              *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
              v233 = 0;
              *((_DWORD *)a3 + 8) = 0;
              *(_DWORD *)((char *)a3 + 35) = *(_DWORD *)((char *)&v234 + 3);
              *((_BYTE *)a3 + 40) = 0;
              *((_BYTE *)a3 + 120) = 0;
              if ((__srca[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)__srca);
                if ((SHIBYTE(v246.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_29;
              }
              else if ((SHIBYTE(v246.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_29;
              }
              v57 = (void *)v246.__r_.__value_.__r.__words[0];
              goto LABEL_124;
            }
            v51 = *(_QWORD *)&__srca[8];
            if ((*(_QWORD *)&__srca[8] & 0x8000000000000000) == 0)
            {
              v52 = *(std::string **)__srca;
              if (!*(_QWORD *)&__srca[8] || *(_QWORD *)__srca)
              {
                LODWORD(__p.__r_.__value_.__l.__data_) = 5;
                if (*(_QWORD *)&__srca[8] <= 0x7FFFFFFFFFFFFFF7uLL)
                {
                  if (*(_QWORD *)&__srca[8] > 0x16uLL)
                    goto LABEL_113;
LABEL_106:
                  HIBYTE(v233) = v51;
                  p_size = &__p.__r_.__value_.__l.__size_;
                  v54 = (std::string *)((char *)&__p.__r_.__value_.__r.__words[1] + v51);
                  if (&__p.__r_.__value_.__r.__words[1] > (std::string::size_type *)v52)
                    goto LABEL_117;
LABEL_116:
                  if (v54 <= v52)
                    goto LABEL_117;
                  goto LABEL_484;
                }
LABEL_487:
                abort();
              }
            }
          }
        }
      }
LABEL_484:
      __break(1u);
LABEL_485:
      v217 = v229;
      goto LABEL_486;
    }
    ++v23;
    --v22;
  }
  while (v22);
  v42 = v240;
  v43 = v241;
  if (0xAAAAAAAAAAAAAAABLL * ((v241 - v240) >> 3) <= 1)
    goto LABEL_484;
  v44 = (_DWORD **)(v240 + 24);
  v45 = v240[47];
  v46 = v240 + 24;
  v47 = v45;
  if (v240[47] < 0)
  {
    v47 = *((_QWORD *)v240 + 4);
    if (v47 < 0)
      goto LABEL_484;
    v46 = *v44;
    if (v47)
    {
      if (!v46)
        goto LABEL_484;
    }
  }
  if (v47 != 4 || *v46 != 1684956531)
  {
    v48 = v240 + 24;
    v49 = v240[47];
    if ((v45 & 0x80) != 0)
    {
      v49 = *((_QWORD *)v240 + 4);
      if (v49 < 0)
        goto LABEL_484;
      v48 = *v44;
      if (v49)
      {
        if (!v48)
          goto LABEL_484;
      }
    }
    if (v49 != 4 || *v48 != 1986225522)
    {
      v50 = (char *)operator new(0x38uLL);
      if (v50 <= "Invalid RID direction. Supported values: send / recv."
        && v50 + 53 > "Invalid RID direction. Supported values: send / recv.")
      {
        goto LABEL_484;
      }
      strcpy(v50, "Invalid RID direction. Supported values: send / recv.");
      *(_DWORD *)a3 = 5;
      a3[1] = v50;
      v17 = xmmword_208F08660;
LABEL_28:
      *((_OWORD *)a3 + 1) = v17;
      *((_DWORD *)a3 + 8) = 0;
      *((_BYTE *)a3 + 36) = 0;
      *((_BYTE *)a3 + 38) = 0;
      *((_BYTE *)a3 + 40) = 0;
      *((_BYTE *)a3 + 120) = 0;
      goto LABEL_29;
    }
  }
  if ((v45 & 0x80) != 0)
  {
    v45 = *((_QWORD *)v240 + 4);
    if (v45 < 0)
      goto LABEL_484;
    v44 = (_DWORD **)*v44;
    if (v45)
    {
      if (!v44)
        goto LABEL_484;
    }
  }
  v58 = v45 == 4 && *(_DWORD *)v44 == 1684956531;
  v59 = !v58;
  if (v240[23] < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v240, *((_QWORD *)v240 + 1));
    v42 = v240;
    v43 = v241;
  }
  else
  {
    v60 = *(_OWORD *)v240;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v240 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
  }
  LODWORD(v233) = v59;
  v234 = 0;
  v235 = 0;
  v222 = &v237;
  v238 = 0;
  v239 = 0;
  v236 = 0;
  v237 = &v238;
  if (v43 - v42 != 72)
    goto LABEL_444;
  v229 = 0;
  v230 = 0;
  v231 = 0;
  v61 = v42 + 48;
  if (v42[71] < 0)
  {
    v62 = *((_QWORD *)v42 + 7);
    if ((v62 & 0x8000000000000000) != 0)
      goto LABEL_484;
    v61 = (_QWORD *)*v61;
    if (v62)
    {
      if (!v61)
        goto LABEL_484;
    }
  }
  else
  {
    v62 = v42[71];
  }
  rtc::tokenize((uint64_t)v61, v62, 0x3Bu, (uint64_t)&v229);
  v64 = (uint64_t *)v229;
  v63 = v230;
  if (v229 == v230)
  {
    v200 = v240;
    if (0xAAAAAAAAAAAAAAABLL * ((v241 - v240) >> 3) <= 2)
      goto LABEL_484;
    v201 = v240[71];
    if (v201 >= 0)
      v202 = v240[71];
    else
      v202 = *((_QWORD *)v240 + 7);
    v203 = v202 + 30;
    if (v202 + 30 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_487;
    if (v203 > 0x16)
    {
      v205 = (v203 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v203 | 7) != 0x17)
        v205 = v203 | 7;
      v206 = v205 + 1;
      v204 = (char *)operator new(v205 + 1);
      v246.__r_.__value_.__l.__size_ = v202 + 30;
      v246.__r_.__value_.__r.__words[2] = v206 | 0x8000000000000000;
      v246.__r_.__value_.__r.__words[0] = (std::string::size_type)v204;
    }
    else
    {
      memset(&v246, 0, sizeof(v246));
      v204 = (char *)&v246;
      *((_BYTE *)&v246.__r_.__value_.__s + 23) = v202 + 30;
    }
    v207 = v204 + 30;
    if (v204 <= "Invalid RID restriction list: " && v207 > "Invalid RID restriction list: ")
      goto LABEL_484;
    qmemcpy(v204, "Invalid RID restriction list: ", 30);
    v208 = v201 >= 0 ? v200 + 48 : (char *)*((_QWORD *)v200 + 6);
    v209 = &v207[v202];
    if (v208 >= v207 && v209 > v208)
      goto LABEL_484;
    if (v202)
      memmove(v207, v208, v202);
    *v209 = 0;
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    {
      v210 = v246.__r_.__value_.__l.__size_;
      if ((v246.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_484;
      v211 = (std::string *)v246.__r_.__value_.__r.__words[0];
      if (v246.__r_.__value_.__l.__size_)
      {
        if (!v246.__r_.__value_.__r.__words[0])
          goto LABEL_484;
      }
      *(_DWORD *)__srca = 5;
      if (v246.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_487;
    }
    else
    {
      v210 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
      *(_DWORD *)__srca = 5;
      v211 = &v246;
    }
    if (v210 > 0x16)
    {
      v213 = (v210 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v210 | 7) != 0x17)
        v213 = v210 | 7;
      v214 = v213 + 1;
      v212 = (std::string *)operator new(v213 + 1);
      *(_QWORD *)&__srca[16] = v210;
      *(_QWORD *)&__srca[24] = v214 | 0x8000000000000000;
      *(_QWORD *)&__srca[8] = v212;
    }
    else
    {
      __srca[31] = v210;
      v212 = (std::string *)&__srca[8];
    }
    v215 = (std::string *)((char *)v212 + v210);
    if (v212 <= v211 && v215 > v211)
      goto LABEL_484;
    if (v210)
      memmove(v212, v211, v210);
    v215->__r_.__value_.__s.__data_[0] = 0;
    *(_DWORD *)&__srca[32] = 0;
    __srca[36] = 0;
    __srca[38] = 0;
    *(_DWORD *)a3 = *(_DWORD *)__srca;
    *(_OWORD *)(a3 + 1) = *(_OWORD *)&__srca[8];
    a3[3] = *(void **)&__srca[24];
    memset(&__srca[8], 0, 24);
    *((_DWORD *)a3 + 8) = 0;
    *(_DWORD *)((char *)a3 + 35) = *(_DWORD *)&__srca[35];
    *((_BYTE *)a3 + 40) = 0;
    *((_BYTE *)a3 + 120) = 0;
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v246.__r_.__value_.__l.__data_);
    a3 = (void **)v229;
    if (!v229)
      goto LABEL_445;
    v216 = (void **)v230;
    v217 = v229;
    if (v230 != v229)
    {
      do
      {
        if (*((char *)v216 - 1) < 0)
          operator delete(*(v216 - 3));
        v216 -= 3;
      }
      while (v216 != a3);
      goto LABEL_485;
    }
LABEL_486:
    v230 = (uint64_t *)a3;
    operator delete(v217);
    goto LABEL_445;
  }
  v223 = a3 + 1;
  v65 = a3 + 4;
  v221 = v230;
  while (2)
  {
    v226 = 0;
    v227 = 0;
    v225 = 0;
    if (*((char *)v64 + 23) < 0)
    {
      v66 = v64[1];
      if ((v66 & 0x8000000000000000) != 0)
        goto LABEL_484;
      v67 = *v64;
      if (v66 && v67 == 0)
        goto LABEL_484;
    }
    else
    {
      v66 = *((unsigned __int8 *)v64 + 23);
      v67 = (uint64_t)v64;
    }
    rtc::tokenize(v67, v66, 0x3Du, (uint64_t)&v225);
    v69 = v225;
    if (v225 == v226 || (v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v226 - (_BYTE *)v225) >> 3), v70 >= 3))
    {
      v71 = *((char *)v64 + 23);
      if (v71 >= 0)
        v72 = *((unsigned __int8 *)v64 + 23);
      else
        v72 = v64[1];
      v73 = v72 + 32;
      if (v72 + 32 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_487;
      if (v73 > 0x16)
      {
        v75 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v73 | 7) != 0x17)
          v75 = v73 | 7;
        v76 = v75 + 1;
        v74 = (char *)operator new(v75 + 1);
        v246.__r_.__value_.__l.__size_ = v72 + 32;
        v246.__r_.__value_.__r.__words[2] = v76 | 0x8000000000000000;
        v246.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
      }
      else
      {
        memset(&v246, 0, sizeof(v246));
        v74 = (char *)&v246;
        *((_BYTE *)&v246.__r_.__value_.__s + 23) = v72 + 32;
      }
      v77 = v74 + 32;
      if (v74 <= "Invalid format for restriction: " && v77 > "Invalid format for restriction: ")
        goto LABEL_484;
      qmemcpy(v74, "Invalid format for restriction: ", 32);
      v79 = v71 >= 0 ? (char *)v64 : (char *)*v64;
      v80 = &v77[v72];
      if (v79 >= v77 && v80 > v79)
        goto LABEL_484;
      if (v72)
        memmove(v77, v79, v72);
      *v80 = 0;
      v82 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      {
        v84 = v246.__r_.__value_.__l.__size_;
        if ((v246.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_484;
        v83 = (std::string *)v246.__r_.__value_.__r.__words[0];
        if (v246.__r_.__value_.__l.__size_)
        {
          if (!v246.__r_.__value_.__r.__words[0])
            goto LABEL_484;
        }
        *(_DWORD *)__srca = 5;
        if (v246.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_487;
      }
      else
      {
        *(_DWORD *)__srca = 5;
        v83 = &v246;
        v84 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
      }
      if (v84 > 0x16)
      {
        v89 = (v84 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v84 | 7) != 0x17)
          v89 = v84 | 7;
        v90 = v89 + 1;
        v87 = (std::string *)operator new(v89 + 1);
        v91 = v90 | 0x8000000000000000;
        v63 = v221;
        *(_QWORD *)&__srca[16] = v84;
        *(_QWORD *)&__srca[24] = v91;
        *(_QWORD *)&__srca[8] = v87;
        v88 = (std::string *)((char *)v87 + v84);
        if (v87 > v83)
          goto LABEL_190;
      }
      else
      {
        __srca[31] = v84;
        v87 = (std::string *)&__srca[8];
        v88 = (std::string *)&__srca[v84 + 8];
        if (&__srca[8] > (_BYTE *)v83)
          goto LABEL_190;
      }
      if (v88 > v83)
        goto LABEL_484;
LABEL_190:
      if (v84)
        memmove(v87, v83, v84);
      v88->__r_.__value_.__s.__data_[0] = 0;
      *(_DWORD *)&__srca[32] = 0;
      __srca[36] = 0;
      __srca[38] = 0;
      *(_DWORD *)a3 = *(_DWORD *)__srca;
      *v223 = *(_OWORD *)&__srca[8];
      a3[3] = *(void **)&__srca[24];
      memset(&__srca[8], 0, 24);
      *v65 = *(_DWORD *)&__srca[32];
      *(_DWORD *)((char *)a3 + 35) = *(_DWORD *)&__srca[35];
      *((_BYTE *)a3 + 40) = 0;
      *((_BYTE *)a3 + 120) = 0;
      if (v82 < 0)
        operator delete(v246.__r_.__value_.__l.__data_);
      v92 = 1;
      goto LABEL_195;
    }
    if (*((char *)v225 + 23) < 0)
    {
      v85 = *((_QWORD *)v225 + 1);
      if (v85 < 0)
        goto LABEL_484;
      v86 = *(_WORD **)v225;
      if (v85 && v86 == 0)
        goto LABEL_484;
    }
    else
    {
      v85 = *((unsigned __int8 *)v225 + 23);
      v86 = v225;
    }
    if (v85 != 2 || *v86 != 29808)
    {
      v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)&v237, (const void **)v225, v238, (uint64_t *)&v238);
      if (&v238 != (uint64_t **)v97)
      {
        if (*((char *)v69 + 23) < 0)
        {
          v98 = v69[1];
          if ((v98 & 0x8000000000000000) != 0)
            goto LABEL_484;
          v69 = (_QWORD *)*v69;
          if (v98)
          {
            if (!v69)
              goto LABEL_484;
          }
        }
        else
        {
          v98 = *((unsigned __int8 *)v69 + 23);
        }
        v99 = v97 + 4;
        if (*((char *)v97 + 55) < 0)
        {
          v100 = v97[5];
          if ((v100 & 0x8000000000000000) != 0)
            goto LABEL_484;
          v99 = (_QWORD *)*v99;
          if (v100)
          {
            if (!v99)
              goto LABEL_484;
          }
        }
        else
        {
          v100 = *((unsigned __int8 *)v97 + 55);
        }
        if (v100 >= v98)
          v101 = v98;
        else
          v101 = v100;
        v102 = memcmp(v69, v99, v101);
        if (v102)
        {
          if ((v102 & 0x80000000) == 0)
          {
LABEL_229:
            v103 = v225;
            if (v226 == v225)
              goto LABEL_484;
            v104 = *((char *)v225 + 23);
            if (v104 >= 0)
              v105 = *((unsigned __int8 *)v225 + 23);
            else
              v105 = *((_QWORD *)v225 + 1);
            v106 = v105 + 33;
            if (v105 + 33 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_487;
            if (v106 > 0x16)
            {
              v110 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v106 | 7) != 0x17)
                v110 = v106 | 7;
              v111 = v110 + 1;
              v107 = (char *)operator new(v110 + 1);
              v246.__r_.__value_.__l.__size_ = v105 + 33;
              v246.__r_.__value_.__r.__words[2] = v111 | 0x8000000000000000;
              v246.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
            }
            else
            {
              memset(&v246, 0, sizeof(v246));
              v107 = (char *)&v246;
              *((_BYTE *)&v246.__r_.__value_.__s + 23) = v105 + 33;
            }
            v112 = v107 + 33;
            if (v107 <= "Duplicate restriction specified: " && v112 > "Duplicate restriction specified: ")
              goto LABEL_484;
            qmemcpy(v107, "Duplicate restriction specified: ", 33);
            v114 = v104 >= 0 ? (char *)v103 : (char *)*v103;
            v115 = &v112[v105];
            if (v114 >= v112 && v115 > v114)
              goto LABEL_484;
            if (v105)
              memmove(v112, v114, v105);
            *v115 = 0;
            v82 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
            {
              v84 = v246.__r_.__value_.__l.__size_;
              if ((v246.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                goto LABEL_484;
              v83 = (std::string *)v246.__r_.__value_.__r.__words[0];
              if (v246.__r_.__value_.__l.__size_)
              {
                if (!v246.__r_.__value_.__r.__words[0])
                  goto LABEL_484;
              }
              *(_DWORD *)__srca = 5;
              if (v246.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_487;
            }
            else
            {
              *(_DWORD *)__srca = 5;
              v83 = &v246;
              v84 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
            }
            if (v84 > 0x16)
            {
              v116 = (v84 & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((v84 | 7) != 0x17)
                v116 = v84 | 7;
              v117 = v116 + 1;
              v87 = (std::string *)operator new(v116 + 1);
              *(_QWORD *)&__srca[16] = v84;
              *(_QWORD *)&__srca[24] = v117 | 0x8000000000000000;
              *(_QWORD *)&__srca[8] = v87;
            }
            else
            {
              __srca[31] = v84;
              v87 = (std::string *)&__srca[8];
            }
            v63 = v221;
            v88 = (std::string *)((char *)v87 + v84);
            if (v87 <= v83 && v88 > v83)
              goto LABEL_484;
            goto LABEL_190;
          }
        }
        else if (v98 >= v100)
        {
          goto LABEL_229;
        }
      }
      v108 = (void **)v225;
      v109 = v226;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v226 - (_BYTE *)v225) >> 3) < 2)
      {
        memset(__srca, 0, 24);
      }
      else if (*((char *)v225 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__srca, *((const std::string::value_type **)v225 + 3), *((_QWORD *)v225 + 4));
        v108 = (void **)v225;
        v109 = v226;
      }
      else
      {
        *(_OWORD *)__srca = *(_OWORD *)((char *)v225 + 24);
        *(_QWORD *)&__srca[16] = *((_QWORD *)v225 + 5);
      }
      if (v109 != v108)
      {
        v118 = std::map<std::string,std::string>::operator[]((uint64_t)&v237, (uint64_t)v108);
        v119 = v118;
        if (*(char *)(v118 + 23) < 0)
          operator delete(*(void **)v118);
        v92 = 0;
        v120 = *(_OWORD *)__srca;
        *(_QWORD *)(v119 + 16) = *(_QWORD *)&__srca[16];
        *(_OWORD *)v119 = v120;
        goto LABEL_195;
      }
      goto LABEL_484;
    }
    if (v70 < 2)
    {
      memset(&v224, 0, sizeof(v224));
    }
    else if (*((char *)v225 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v224, *((const std::string::value_type **)v225 + 3), *((_QWORD *)v225 + 4));
    }
    else
    {
      v224 = *(std::string *)((_BYTE *)v225 + 1);
    }
    if (v234 != v235)
    {
      *(_DWORD *)__srca = 5;
      v121 = (char *)operator new(0x28uLL);
      *(_QWORD *)&__srca[8] = v121;
      *(_OWORD *)&__srca[16] = xmmword_208F08680;
      if (v121 <= "Multiple pt= found in RID Description." && v121 + 38 > "Multiple pt= found in RID Description.")
        goto LABEL_484;
      strcpy(v121, "Multiple pt= found in RID Description.");
      goto LABEL_287;
    }
    if (v239)
    {
      *(_DWORD *)__srca = 5;
      v122 = (char *)operator new(0x38uLL);
      *(_QWORD *)&__srca[8] = v122;
      *(_OWORD *)&__srca[16] = xmmword_208F0B3E0;
      if (v122 <= "Payload list must appear first in the restrictions."
        && v122 + 51 > "Payload list must appear first in the restrictions.")
      {
        goto LABEL_484;
      }
      strcpy(v122, "Payload list must appear first in the restrictions.");
      goto LABEL_287;
    }
    if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
    {
      v123 = v224.__r_.__value_.__l.__size_;
      if (!v224.__r_.__value_.__l.__size_)
      {
LABEL_347:
        *(_DWORD *)__srca = 5;
        v161 = (char *)operator new(0x30uLL);
        *(_QWORD *)&__srca[8] = v161;
        *(_OWORD *)&__srca[16] = xmmword_208F1AA00;
        if (v161 <= "Payload list must have at least one value."
          && v161 + 42 > "Payload list must have at least one value.")
        {
          goto LABEL_484;
        }
        strcpy(v161, "Payload list must have at least one value.");
LABEL_287:
        *(_DWORD *)&__srca[32] = 0;
        __srca[36] = 0;
        __srca[38] = 0;
        goto LABEL_288;
      }
      memset(&v246, 0, sizeof(v246));
      if ((v224.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_484;
      v124 = (std::string *)v224.__r_.__value_.__r.__words[0];
      if (!v224.__r_.__value_.__r.__words[0])
        goto LABEL_484;
    }
    else
    {
      v123 = HIBYTE(v224.__r_.__value_.__r.__words[2]);
      if (!*((_BYTE *)&v224.__r_.__value_.__s + 23))
        goto LABEL_347;
      memset(&v246, 0, sizeof(v246));
      v124 = &v224;
    }
    rtc::tokenize((uint64_t)v124, v123, 0x2Cu, (uint64_t)&v246);
    v125 = v246.__r_.__value_.__l.__size_;
    v218 = v246.__r_.__value_.__l.__size_;
    v126 = v246.__r_.__value_.__r.__words[0];
    if (v246.__r_.__value_.__r.__words[0] == v246.__r_.__value_.__l.__size_)
    {
      *(_DWORD *)__srca = 5;
      v127 = (char *)operator new(0x30uLL);
      *(_QWORD *)&__srca[8] = v127;
      *(_OWORD *)&__srca[16] = xmmword_208F1AA00;
      if (v127 > "Payload list must have at least one value."
        || v127 + 42 <= "Payload list must have at least one value.")
      {
        strcpy(v127, "Payload list must have at least one value.");
        *(_DWORD *)&__srca[32] = 0;
        __srca[36] = 0;
        __srca[38] = 0;
        goto LABEL_419;
      }
      goto LABEL_484;
    }
    while (1)
    {
      if (*(char *)(v126 + 23) < 0)
      {
        v128 = *(_QWORD *)(v126 + 8);
        if ((v128 & 0x8000000000000000) != 0)
          goto LABEL_484;
        v129 = *(void ***)v126;
        if (v128 && v129 == 0)
          goto LABEL_484;
      }
      else
      {
        v128 = *(unsigned __int8 *)(v126 + 23);
        v129 = (void **)v126;
      }
      v131 = rtc::string_to_number_internal::ParseSigned(v129, v128, 10);
      if (v132)
        v133 = v131 < (uint64_t)0xFFFFFFFF80000000;
      else
        v133 = 1;
      if (v133 || v131 >= 0x80000000)
      {
        v162 = *(char *)(v126 + 23);
        v163 = (_QWORD *)v126;
        if (v162 >= 0)
          v164 = *(unsigned __int8 *)(v126 + 23);
        else
          v164 = *(_QWORD *)(v126 + 8);
        v165 = v164 + 22;
        if (v164 + 22 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_487;
        if (v165 > 0x16)
        {
          v172 = (v165 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v165 | 7) != 0x17)
            v172 = v165 | 7;
          v173 = v172 + 1;
          v166 = (void **)operator new(v172 + 1);
          v244 = v164 + 22;
          v245 = v173 | 0x8000000000000000;
          v243 = v166;
        }
        else
        {
          v244 = 0;
          v245 = 0;
          v243 = 0;
          v166 = (void **)&v243;
          HIBYTE(v245) = v164 + 22;
        }
        v174 = (char *)v166 + 22;
        if (v166 <= (void **)"Invalid payload type: " && v174 > "Invalid payload type: ")
          goto LABEL_484;
        qmemcpy(v166, "Invalid payload type: ", 22);
        v176 = v162 >= 0 ? (char *)v163 : (char *)*v163;
        v177 = &v174[v164];
        if (v176 >= v174 && v177 > v176)
          goto LABEL_484;
        if (v164)
          memmove(v174, v176, v164);
        *v177 = 0;
        v179 = HIBYTE(v245);
        if (SHIBYTE(v245) < 0)
        {
          v181 = v244;
          if ((v244 & 0x8000000000000000) != 0)
            goto LABEL_484;
          v180 = v243;
          if (v244)
          {
            if (!v243)
              goto LABEL_484;
          }
          *(_DWORD *)__srca = 5;
          if (v244 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_487;
        }
        else
        {
          *(_DWORD *)__srca = 5;
          v180 = (void **)&v243;
          v181 = HIBYTE(v245);
        }
        if (v181 > 0x16)
          goto LABEL_410;
LABEL_404:
        __srca[31] = v181;
        v189 = (void **)&__srca[8];
        goto LABEL_413;
      }
      v135 = v131;
      v136 = (__int32 *)v235;
      v137 = wmemchr((__int32 *)v234, v131, (v235 - (_BYTE *)v234) >> 2);
      v138 = v137 ? v137 : v136;
      if (v138 != v136)
        break;
      v139 = v235;
      if (v235 >= v236)
      {
        v220 = v126;
        v140 = (char *)v234;
        v141 = v235 - (_BYTE *)v234;
        v142 = (v235 - (_BYTE *)v234) >> 2;
        v143 = v142 + 1;
        if ((unint64_t)(v142 + 1) >> 62)
          goto LABEL_487;
        v144 = v236 - (_BYTE *)v234;
        if ((v236 - (_BYTE *)v234) >> 1 > v143)
          v143 = v144 >> 1;
        v145 = (unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL;
        v146 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v145)
          v146 = v143;
        if (!v146)
          goto LABEL_484;
        if (v146 >> 62)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v219 = 4 * v146;
        v147 = (char *)operator new(4 * v146);
        v148 = &v147[4 * v142];
        *(_DWORD *)v148 = v135;
        v149 = v148 + 4;
        if (v139 == v140)
        {
          v63 = v221;
          v151 = v219;
        }
        else
        {
          v150 = v139 - v140 - 4;
          v63 = v221;
          if (v150 >= 0x2C)
          {
            v151 = v219;
            if ((unint64_t)(&v139[-v141] - v147) >= 0x20)
            {
              v152 = (v150 >> 2) + 1;
              v153 = 4 * (v152 & 0x7FFFFFFFFFFFFFF8);
              v154 = &v139[-v153];
              v148 -= v153;
              v155 = &v147[v141 - 16];
              v156 = v139 - 16;
              v157 = v152 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v158 = *(_OWORD *)v156;
                *((_OWORD *)v155 - 1) = *((_OWORD *)v156 - 1);
                *(_OWORD *)v155 = v158;
                v155 -= 32;
                v156 -= 32;
                v157 -= 8;
              }
              while (v157);
              v139 = v154;
              if (v152 == (v152 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_345;
            }
          }
          else
          {
            v151 = v219;
          }
          do
          {
            v159 = *((_DWORD *)v139 - 1);
            v139 -= 4;
            *((_DWORD *)v148 - 1) = v159;
            v148 -= 4;
          }
          while (v139 != v140);
        }
LABEL_345:
        v234 = v148;
        v235 = v149;
        v236 = &v147[v151];
        if (v140)
        {
          v160 = v149;
          operator delete(v140);
          v149 = v160;
        }
        v125 = v218;
        v235 = v149;
        v126 = v220 + 24;
        if (v220 + 24 == v218)
          goto LABEL_362;
      }
      else
      {
        if (!v235)
          goto LABEL_484;
        *(_DWORD *)v235 = v135;
        v63 = v221;
        v235 = v139 + 4;
        v126 += 24;
        if (v126 == v125)
        {
LABEL_362:
          *(_DWORD *)__srca = 0;
          __srca[38] = 0;
          memset(&__srca[8], 0, 29);
          goto LABEL_419;
        }
      }
    }
    v167 = *(char *)(v126 + 23);
    v168 = (_QWORD *)v126;
    if (v167 >= 0)
      v169 = *(unsigned __int8 *)(v126 + 23);
    else
      v169 = *(_QWORD *)(v126 + 8);
    v170 = v169 + 32;
    if (v169 + 32 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_487;
    if (v170 > 0x16)
    {
      v182 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v170 | 7) != 0x17)
        v182 = v170 | 7;
      v183 = v182 + 1;
      v171 = (void **)operator new(v182 + 1);
      v244 = v169 + 32;
      v245 = v183 | 0x8000000000000000;
      v243 = v171;
    }
    else
    {
      v244 = 0;
      v245 = 0;
      v243 = 0;
      v171 = (void **)&v243;
      HIBYTE(v245) = v169 + 32;
    }
    v184 = (char *)(v171 + 4);
    if (v171 <= (void **)"Duplicate payload type in list: " && v184 > "Duplicate payload type in list: ")
      goto LABEL_484;
    qmemcpy(v171, "Duplicate payload type in list: ", 32);
    v186 = v167 >= 0 ? (char *)v168 : (char *)*v168;
    v187 = &v184[v169];
    if (v186 >= v184 && v187 > v186)
      goto LABEL_484;
    if (v169)
      memmove(v184, v186, v169);
    *v187 = 0;
    v179 = HIBYTE(v245);
    if ((SHIBYTE(v245) & 0x80000000) == 0)
    {
      *(_DWORD *)__srca = 5;
      v180 = (void **)&v243;
      v181 = HIBYTE(v245);
      goto LABEL_409;
    }
    v181 = v244;
    if ((v244 & 0x8000000000000000) != 0)
      goto LABEL_484;
    v180 = v243;
    if (v244)
    {
      if (!v243)
        goto LABEL_484;
    }
    *(_DWORD *)__srca = 5;
    if (v244 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_487;
LABEL_409:
    if (v181 <= 0x16)
      goto LABEL_404;
LABEL_410:
    v190 = (v181 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v181 | 7) != 0x17)
      v190 = v181 | 7;
    v191 = v190 + 1;
    v189 = (void **)operator new(v190 + 1);
    *(_QWORD *)&__srca[16] = v181;
    *(_QWORD *)&__srca[24] = v191 | 0x8000000000000000;
    *(_QWORD *)&__srca[8] = v189;
LABEL_413:
    v192 = (void **)((char *)v189 + v181);
    v63 = v221;
    if (v189 <= v180 && v192 > v180)
      goto LABEL_484;
    if (v181)
      memmove(v189, v180, v181);
    *(_BYTE *)v192 = 0;
    *(_DWORD *)&__srca[32] = 0;
    __srca[36] = 0;
    __srca[38] = 0;
    if (v179 < 0)
      operator delete(v243);
LABEL_419:
    v193 = v246.__r_.__value_.__r.__words[0];
    if (v246.__r_.__value_.__r.__words[0])
    {
      v194 = v246.__r_.__value_.__l.__size_;
      v195 = (void *)v246.__r_.__value_.__r.__words[0];
      if (v246.__r_.__value_.__l.__size_ != v246.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v194 - 1) < 0)
            operator delete(*(void **)(v194 - 24));
          v194 -= 24;
        }
        while (v194 != v193);
        v195 = (void *)v246.__r_.__value_.__r.__words[0];
      }
      v246.__r_.__value_.__l.__size_ = v193;
      operator delete(v195);
    }
LABEL_288:
    if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v224.__r_.__value_.__l.__data_);
    if (*(_DWORD *)__srca)
    {
      *(_DWORD *)a3 = *(_DWORD *)__srca;
      *v223 = *(_OWORD *)&__srca[8];
      a3[3] = *(void **)&__srca[24];
      memset(&__srca[8], 0, 24);
      *v65 = *(_DWORD *)&__srca[32];
      *(_DWORD *)((char *)a3 + 35) = *(_DWORD *)&__srca[35];
      *((_BYTE *)a3 + 40) = 0;
      v92 = 1;
      *((_BYTE *)a3 + 120) = 0;
    }
    else
    {
      if ((__srca[31] & 0x80000000) != 0)
        operator delete(*(void **)&__srca[8]);
      v92 = 3;
    }
LABEL_195:
    v93 = (void **)v225;
    if (v225)
    {
      v94 = v226;
      v95 = v225;
      if (v226 != v225)
      {
        do
        {
          if (*((char *)v94 - 1) < 0)
            operator delete(*(v94 - 3));
          v94 -= 3;
        }
        while (v94 != v93);
        v95 = v225;
      }
      v226 = v93;
      operator delete(v95);
    }
    if (v92 == 3 || !v92)
    {
      v64 += 3;
      if (v64 == v63)
      {
        LOBYTE(v92) = 2;
        break;
      }
      continue;
    }
    break;
  }
  v196 = v92 & 1;
  v197 = (void **)v229;
  if (v229)
  {
    v198 = (void **)v230;
    v199 = v229;
    if (v230 != v229)
    {
      do
      {
        if (*((char *)v198 - 1) < 0)
          operator delete(*(v198 - 3));
        v198 -= 3;
      }
      while (v198 != v197);
      v199 = v229;
    }
    v230 = (uint64_t *)v197;
    operator delete(v199);
  }
  if (!v196)
  {
LABEL_444:
    *(_DWORD *)a3 = 0;
    *((_BYTE *)a3 + 38) = 0;
    a3[2] = 0;
    a3[3] = 0;
    a3[1] = 0;
    *(void **)((char *)a3 + 29) = 0;
    cricket::RidDescription::RidDescription((std::string *)(a3 + 5), (const cricket::RidDescription *)&__p);
    *((_BYTE *)a3 + 120) = 1;
  }
LABEL_445:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v222, (uint64_t)v238);
  if (v234)
  {
    v235 = (char *)v234;
    operator delete(v234);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v57 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_124:
    operator delete(v57);
  }
LABEL_29:
  v19 = v240;
  if (v240)
  {
    v20 = (void **)v241;
    v21 = v240;
    if (v241 != v240)
    {
      do
      {
        if (*((char *)v20 - 1) < 0)
          operator delete(*(v20 - 3));
        v20 -= 3;
      }
      while (v20 != (void **)v19);
      v21 = v240;
    }
    v241 = v19;
    operator delete(v21);
  }
}

void std::__optional_storage_base<cricket::SimulcastLayerList,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<cricket::SimulcastLayerList,false>>(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void *v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void *v16;
  void **v17;
  void **v18;
  void **v19;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = *(void ***)a1;
      if (*(_QWORD *)a1)
      {
        v5 = *(void ***)(a1 + 8);
        v6 = *(void ***)a1;
        if (v5 != v4)
        {
          v7 = *(void ***)(a1 + 8);
          do
          {
            v10 = (void **)*(v7 - 3);
            v7 -= 3;
            v9 = v10;
            if (v10)
            {
              v11 = (void **)*(v5 - 2);
              v8 = v9;
              if (v11 != v9)
              {
                do
                {
                  if (*((char *)v11 - 9) < 0)
                    operator delete(*(v11 - 4));
                  v11 -= 4;
                }
                while (v11 != v9);
                v8 = *v7;
              }
              *(v5 - 2) = v9;
              operator delete(v8);
            }
            v5 = v7;
          }
          while (v7 != v4);
          v6 = *(void ***)a1;
        }
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v6);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v12 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v13 = *(void ***)(a1 + 8);
      v14 = *(void ***)a1;
      if (v13 != v12)
      {
        v15 = *(void ***)(a1 + 8);
        do
        {
          v18 = (void **)*(v15 - 3);
          v15 -= 3;
          v17 = v18;
          if (v18)
          {
            v19 = (void **)*(v13 - 2);
            v16 = v17;
            if (v19 != v17)
            {
              do
              {
                if (*((char *)v19 - 9) < 0)
                  operator delete(*(v19 - 4));
                v19 -= 4;
              }
              while (v19 != v17);
              v16 = *v15;
            }
            *(v13 - 2) = v17;
            operator delete(v16);
          }
          v13 = v15;
        }
        while (v15 != v12);
        v14 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v12;
      operator delete(v14);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
}

BOOL webrtc::SimulcastUtility::ValidSimulcastParameters(webrtc::SimulcastUtility *this, const VideoCodec *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  float v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;

  v2 = *((unsigned __int16 *)this + 2);
  v3 = (int)a2 - 1;
  if (*((_DWORD *)this + 9 * v3 + 9) != v2)
    return 0;
  v4 = *((unsigned __int16 *)this + 3);
  if (*((_DWORD *)this + 9 * v3 + 10) != v4)
    return 0;
  if ((int)a2 >= 1)
  {
    v5 = (_DWORD *)((char *)this + 40);
    v6 = a2;
    while (*v5 * v2 == *(v5 - 1) * v4)
    {
      v5 += 9;
      if (!--v6)
      {
        if ((int)a2 < 2)
          goto LABEL_14;
        v7 = *((_DWORD *)this + 9);
        v8 = (int *)((char *)this + 72);
        v9 = a2 - 1;
        v10 = v9;
        while (1)
        {
          v12 = *v8;
          v8 += 9;
          v11 = v12;
          if (v12 < v7)
            return 0;
          v7 = v11;
          if (!--v10)
          {
            v13 = *((float *)this + 11);
            v14 = (float *)((char *)this + 80);
            while (1)
            {
              v15 = v13;
              v13 = *v14;
              if (vabds_f32(*v14, v15) > 0.000000001)
                return 0;
              v14 += 9;
              if (!--v9)
                goto LABEL_14;
            }
          }
        }
      }
    }
    return 0;
  }
LABEL_14:
  v16 = 0;
  v17 = v3 & ~((int)v3 >> 31);
  v18 = (unsigned __int8 *)this + 48;
  while (v17 != v16)
  {
    v19 = *v18;
    ++v16;
    v20 = v18[36];
    v18 += 36;
    if (v19 != v20)
    {
      v17 = v16 - 1;
      return v17 >= v3;
    }
  }
  return v17 >= v3;
}

float webrtc::SimulcastUtility::NumberOfTemporalLayers(webrtc::SimulcastUtility *this, const webrtc::VideoCodec *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  std::string *v9;
  const float *v10;
  const float *v11;
  const float *v12;
  double v13;
  float result;

  if (*((unsigned __int16 *)this + 186) >= 0x100u)
  {
    v8 = *((_WORD *)this + 186);
    if (v8 >= 0x22)
    {
      v9 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/svc/scalability_mode_util.cc", 309, "index < kNumScalabilityModes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v8);
      return webrtc::SincResampler::Convolve_C((webrtc::SincResampler *)v9, v10, v11, v12, v13);
    }
  }
  return result;
}

float webrtc::SincResampler::Convolve_C(webrtc::SincResampler *this, const float *a2, const float *a3, const float *a4, double a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;

  v5 = *((float *)this + 1);
  v6 = (float)((float)(*(float *)this * *a2) + 0.0) + (float)(v5 * a2[1]);
  v7 = (float)((float)(*(float *)this * *a3) + 0.0) + (float)(v5 * a3[1]);
  v8 = *((float *)this + 2);
  v9 = *((float *)this + 3);
  v10 = (float)(v6 + (float)(v8 * a2[2])) + (float)(v9 * a2[3]);
  v11 = (float)(v7 + (float)(v8 * a3[2])) + (float)(v9 * a3[3]);
  v12 = *((float *)this + 4);
  v13 = *((float *)this + 5);
  v14 = (float)(v10 + (float)(v12 * a2[4])) + (float)(v13 * a2[5]);
  v15 = (float)(v11 + (float)(v12 * a3[4])) + (float)(v13 * a3[5]);
  v16 = *((float *)this + 6);
  v17 = *((float *)this + 7);
  v18 = (float)(v14 + (float)(v16 * a2[6])) + (float)(v17 * a2[7]);
  v19 = (float)(v15 + (float)(v16 * a3[6])) + (float)(v17 * a3[7]);
  v20 = *((float *)this + 8);
  v21 = *((float *)this + 9);
  v22 = (float)(v18 + (float)(v20 * a2[8])) + (float)(v21 * a2[9]);
  v23 = (float)(v19 + (float)(v20 * a3[8])) + (float)(v21 * a3[9]);
  v24 = *((float *)this + 10);
  v25 = *((float *)this + 11);
  v26 = (float)(v22 + (float)(v24 * a2[10])) + (float)(v25 * a2[11]);
  v27 = (float)(v23 + (float)(v24 * a3[10])) + (float)(v25 * a3[11]);
  v28 = *((float *)this + 12);
  v29 = *((float *)this + 13);
  v30 = (float)(v26 + (float)(v28 * a2[12])) + (float)(v29 * a2[13]);
  v31 = (float)(v27 + (float)(v28 * a3[12])) + (float)(v29 * a3[13]);
  v32 = *((float *)this + 14);
  v33 = *((float *)this + 15);
  v34 = (float)(v30 + (float)(v32 * a2[14])) + (float)(v33 * a2[15]);
  v35 = (float)(v31 + (float)(v32 * a3[14])) + (float)(v33 * a3[15]);
  v36 = *((float *)this + 16);
  v37 = *((float *)this + 17);
  v38 = (float)(v34 + (float)(v36 * a2[16])) + (float)(v37 * a2[17]);
  v39 = (float)(v35 + (float)(v36 * a3[16])) + (float)(v37 * a3[17]);
  v40 = *((float *)this + 18);
  v41 = *((float *)this + 19);
  v42 = (float)(v38 + (float)(v40 * a2[18])) + (float)(v41 * a2[19]);
  v43 = (float)(v39 + (float)(v40 * a3[18])) + (float)(v41 * a3[19]);
  v44 = *((float *)this + 20);
  v45 = *((float *)this + 21);
  v46 = (float)(v42 + (float)(v44 * a2[20])) + (float)(v45 * a2[21]);
  v47 = (float)(v43 + (float)(v44 * a3[20])) + (float)(v45 * a3[21]);
  v48 = *((float *)this + 22);
  v49 = *((float *)this + 23);
  v50 = (float)(v46 + (float)(v48 * a2[22])) + (float)(v49 * a2[23]);
  v51 = (float)(v47 + (float)(v48 * a3[22])) + (float)(v49 * a3[23]);
  v52 = *((float *)this + 24);
  v53 = *((float *)this + 25);
  v54 = (float)(v50 + (float)(v52 * a2[24])) + (float)(v53 * a2[25]);
  v55 = (float)(v51 + (float)(v52 * a3[24])) + (float)(v53 * a3[25]);
  v56 = *((float *)this + 26);
  v57 = *((float *)this + 27);
  return (float)((float)((float)((float)((float)((float)(v55 + (float)(v56 * a3[26])) + (float)(v57 * a3[27]))
                                       + (float)(*((float *)this + 28) * a3[28]))
                               + (float)(*((float *)this + 29) * a3[29]))
                       + (float)(*((float *)this + 30) * a3[30]))
               + (float)(*((float *)this + 31) * a3[31]))
       * a5
       + (1.0 - a5)
       * (float)((float)((float)((float)((float)((float)(v54 + (float)(v56 * a2[26])) + (float)(v57 * a2[27]))
                                       + (float)(*((float *)this + 28) * a2[28]))
                               + (float)(*((float *)this + 29) * a2[29]))
                       + (float)(*((float *)this + 30) * a2[30]))
               + (float)(*((float *)this + 31) * a2[31]));
}

void webrtc::SincResampler::SincResampler(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v44;
  float v46;
  float v47;
  double v48;
  long double v49;
  float v50;
  double v51;
  float32x2_t v52;
  int32x2_t v53;
  float32x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  int8x16_t v58;
  float64x2_t v59;
  std::string *v60;
  int8x16_t v61;
  int64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  long double v70;
  float64x2_t __x;
  float64x2_t __xa;
  float64x2_t __xb;
  long double v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  uint64x2_t v78;
  int64x2_t v79;
  double v80;

  *(_QWORD *)a1 = &off_24C0C0E48;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 56) = a2 + 32;
  v5 = malloc_type_malloc(0x10A7uLL, 0xB9DC9477uLL);
  if (!v5)
    goto LABEL_28;
  v10 = ((unint64_t)v5 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v10 - 8) = v5;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = malloc_type_malloc(0x10A7uLL, 0xB9DC9477uLL);
  if (!v11)
    goto LABEL_28;
  v12 = ((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v12 - 8) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  v13 = malloc_type_malloc(0x10A7uLL, 0xB9DC9477uLL);
  if (!v13)
    goto LABEL_28;
  v14 = ((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v14 - 8) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  v15 = 4 * *(_QWORD *)(a1 + 56);
  if (v15)
  {
    v16 = malloc_type_malloc(v15 + 39, 0xB9DC9477uLL);
    if (v16)
    {
      v17 = v16;
      v18 = (_QWORD *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFE0);
      *(v18 - 1) = v17;
      v19 = 4 * *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    }
LABEL_28:
    v60 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/memory/aligned_malloc.cc", 66, "memory_pointer", "\t", v6, v7, v8, v9, (uint64_t)"Couldn't allocate memory in AlignedMalloc");
    webrtc::SincResampler::~SincResampler((webrtc::SincResampler *)v60);
    return;
  }
  v19 = 0;
  v18 = 0;
LABEL_8:
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v18 + 8;
  *(_QWORD *)(a1 + 88) = v18;
  *(_QWORD *)(a1 + 96) = webrtc::SincResampler::Convolve_C;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  bzero(v18, v19);
  v20 = *(_QWORD *)(a1 + 88) + 64;
  *(_QWORD *)(a1 + 104) = v20;
  v21 = v20 + 4 * *(_QWORD *)(a1 + 40);
  v22 = v21 - 128;
  v21 -= 64;
  *(_QWORD *)(a1 + 128) = v22;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 48) = (v21 - *(_QWORD *)(a1 + 120)) >> 2;
  bzero(*(void **)(a1 + 64), 0x1080uLL);
  bzero(*(void **)(a1 + 72), 0x1080uLL);
  bzero(*(void **)(a1 + 80), 0x1080uLL);
  v23 = *(double *)(a1 + 8);
  if (v23 <= 1.0)
    v24 = 0.9;
  else
    v24 = 1.0 / v23 * 0.9;
  v25 = 0;
  v27 = *(_QWORD *)(a1 + 72);
  v26 = *(_QWORD *)(a1 + 80);
  v28 = *(_QWORD *)(a1 + 64);
  v67 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
  v68 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  __asm { FMOV            V1.2D, #-0.5 }
  v65 = _Q1;
  v66 = (float64x2_t)vdupq_n_s64(0x3FDAE147AE147AE1uLL);
  v33 = (uint64x2_t)vdupq_n_s64(0x402921FB54442D18uLL);
  v63 = (float64x2_t)vdupq_n_s64(0x3FB47AE147AE147BuLL);
  v64 = (float64x2_t)v33;
  v62 = vdupq_n_s64(2uLL);
  v34 = v27;
  v35 = v26;
  v36 = v28;
  v80 = v24;
  v61 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v24, 0);
  do
  {
    *(float *)v33.i32 = (float)v25 * 0.03125;
    v37 = (v25 << 7) + v28;
    v38 = (v25 << 7) + v27;
    v39 = (v25 << 7) + v26;
    v40 = v39 - v38;
    v41 = v37 - v38;
    v42 = v37 - v39;
    _CF = v40 >= 8 && v41 >= 8;
    v44 = 0;
    if (_CF && v42 > 7)
    {
      v52 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 0);
      v33 = (uint64x2_t)xmmword_208F05120;
      v53 = (int32x2_t)0x100000000;
      do
      {
        v79 = (int64x2_t)v33;
        v54 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(vsub_f32(vcvt_f32_s32(vadd_s32(v53, (int32x2_t)0xF0000000FLL)), v52)), v68));
        *(float32x2_t *)(v34 + v44) = v54;
        v76 = vcvtq_f64_f32(vmul_f32(vsub_f32(vcvt_f32_f64(vcvtq_f64_u64(v33)), v52), (float32x2_t)0x3D0000003D000000));
        __x = vmulq_f64(v76, v67);
        v74 = cos(__x.f64[1]);
        v55.f64[0] = cos(__x.f64[0]);
        v55.f64[1] = v74;
        v75 = vmlaq_f64(v66, v65, v55);
        __xa = vmulq_f64(v76, v64);
        v76.f64[0] = cos(__xa.f64[1]);
        v56.f64[0] = cos(__xa.f64[0]);
        v56.f64[1] = v76.f64[0];
        *(float32x2_t *)&v56.f64[0] = vcvt_f32_f64(vmlaq_f64(v75, v63, v56));
        *(float64_t *)(v35 + v44) = v56.f64[0];
        v57 = vcvtq_f64_f32(*(float32x2_t *)&v56.f64[0]);
        *(int32x2_t *)&v56.f64[0] = vceqz_f32(v54);
        v58.i64[0] = SLODWORD(v56.f64[0]);
        v58.i64[1] = SHIDWORD(v56.f64[0]);
        v77 = v57;
        __xb = vcvtq_f64_f32(v54);
        v69 = vmulq_n_f64(__xb, v80);
        v70 = sin(v69.f64[1]);
        v59.f64[0] = sin(v69.f64[0]);
        v59.f64[1] = v70;
        *(float32x2_t *)(v36 + v44) = vcvt_f32_f64(vmulq_f64((float64x2_t)vbslq_s8(v58, v61, (int8x16_t)vdivq_f64(v59, __xb)), v77));
        v33 = (uint64x2_t)vaddq_s64(v79, v62);
        v53 = vadd_s32(v53, (int32x2_t)0x200000002);
        v44 += 8;
      }
      while (v44 != 128);
    }
    else
    {
      v78 = v33;
      do
      {
        v47 = (float)((float)((int)v44 - 16) - *(float *)v33.i32) * 3.14159265;
        *(float *)(v34 + 4 * v44) = v47;
        v48 = (float)((float)((float)v44 - *(float *)v33.i32) * 0.03125);
        v49 = cos(v48 * 6.28318531) * -0.5 + 0.42;
        v50 = v49 + cos(v48 * 12.5663706) * 0.08;
        *(float *)(v35 + 4 * v44) = v50;
        v51 = v80;
        if (v47 != 0.0)
          v51 = sin(v80 * v47) / v47;
        v46 = v51 * v50;
        *(float *)(v36 + 4 * v44++) = v46;
        v33 = v78;
      }
      while (v44 != 32);
    }
    ++v25;
    v36 += 128;
    v35 += 128;
    v34 += 128;
  }
  while (v25 != 33);
}

void webrtc::SincResampler::~SincResampler(webrtc::SincResampler *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0C0E48;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    free(*(void **)(v2 - 8));
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    free(*(void **)(v3 - 8));
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    free(*(void **)(v4 - 8));
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    free(*(void **)(v5 - 8));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0C0E48;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    free(*(void **)(v2 - 8));
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    free(*(void **)(v3 - 8));
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    free(*(void **)(v4 - 8));
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    free(*(void **)(v5 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::SincResampler::Resample(webrtc::SincResampler *this, uint64_t a2, float *a3)
{
  uint64_t v4;
  double v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;
  int v21;
  int v22;
  double v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2;
  if (!a2 || *((_BYTE *)this + 24))
  {
    if (!a2)
      return;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), *((_QWORD *)this + 5), *((_QWORD *)this + 13));
    *((_BYTE *)this + 24) = 1;
  }
  v6 = *((double *)this + 1);
  v7 = *((_QWORD *)this + 8);
  while (1)
  {
    v18 = (double)*((unint64_t *)this + 6);
    v19 = *((double *)this + 2);
    v20 = vcvtpd_s64_f64((v18 - v19) / v6);
    if (v20 >= 1)
      break;
LABEL_6:
    *((double *)this + 2) = v19 - v18;
    v8 = (_OWORD *)*((_QWORD *)this + 14);
    v9 = (__int128 *)*((_QWORD *)this + 16);
    v10 = v9[7];
    v12 = v9[4];
    v11 = v9[5];
    v8[6] = v9[6];
    v8[7] = v10;
    v8[4] = v12;
    v8[5] = v11;
    v13 = *v9;
    v14 = v9[1];
    v15 = v9[3];
    v8[2] = v9[2];
    v8[3] = v15;
    *v8 = v13;
    v8[1] = v14;
    v16 = *((_QWORD *)this + 13);
    v17 = *((_QWORD *)this + 5);
    if (v16 == *((_QWORD *)this + 15))
    {
      v25 = *((_QWORD *)this + 11) + 128;
      *((_QWORD *)this + 13) = v25;
      v26 = v25 + 4 * v17;
      v27 = v26 - 128;
      v26 -= 64;
      *((_QWORD *)this + 16) = v27;
      *((_QWORD *)this + 17) = v26;
      *((_QWORD *)this + 6) = (v26 - v16) >> 2;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
  }
  v21 = v20 + 1;
  while (1)
  {
    v22 = (int)v19;
    v23 = v19 - (double)(int)v19;
    v24 = vcvtd_n_s64_f64(v23, 5uLL);
    *a3 = (*((float (**)(uint64_t, uint64_t, uint64_t, double))this + 12))(*((_QWORD *)this + 14) + 4 * v22, v7 + ((uint64_t)v24 << 7), v7 + ((uint64_t)v24 << 7) + 128, v23 * 32.0 - (double)v24);
    v19 = v6 + *((double *)this + 2);
    *((double *)this + 2) = v19;
    if (!--v4)
      break;
    ++a3;
    if (--v21 <= 1)
    {
      v18 = (double)*((unint64_t *)this + 6);
      goto LABEL_6;
    }
  }
}

void webrtc::SmoothingFilterImpl::~SmoothingFilterImpl(webrtc::SmoothingFilterImpl *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::SmoothingFilterImpl::AddSample(webrtc::SmoothingFilterImpl *this, float a2)
{
  uint64_t v4;
  uint64_t v5;

  if (rtc::g_clock)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v4 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  v5 = v4 / 1000000;
  if (*((_BYTE *)this + 32))
  {
    webrtc::SmoothingFilterImpl::ExtrapolateLastSample(this, v5);
  }
  else
  {
    *((float *)this + 12) = a2;
    *((_QWORD *)this + 3) = v5 + *((int *)this + 2);
    *((_BYTE *)this + 32) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  *((float *)this + 10) = a2;
}

void webrtc::SmoothingFilterImpl::ExtrapolateLastSample(webrtc::SmoothingFilterImpl *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  int v8;
  float v9;
  float v10;
  float v11;

  if (*((_BYTE *)this + 32))
  {
    v4 = *((_QWORD *)this + 3);
    v5 = a2 - v4;
    if (a2 <= v4)
    {
      v8 = *((_DWORD *)this + 2);
      if (v8)
      {
        if (v8 == 1)
        {
          v7 = exp((double)(*((_QWORD *)this + 7) - a2));
        }
        else
        {
          v9 = *((float *)this + 3);
          v10 = powf(v9, (float)(*((_QWORD *)this + 7) - v4));
          v11 = powf(v9, (float)v5);
          v7 = expf((float)-(float)(v10 - v11) / *((float *)this + 4));
        }
      }
      else
      {
        v7 = 0.0;
      }
    }
    else
    {
      v6 = *((_QWORD *)this + 7);
      if (v6 < v4)
      {
        webrtc::SmoothingFilterImpl::ExtrapolateLastSample(this, v4);
        v6 = *((_QWORD *)this + 7);
      }
      v7 = powf(*((float *)this + 11), (float)(a2 - v6));
    }
    *((float *)this + 12) = (float)((float)(1.0 - v7) * *((float *)this + 10)) + (float)(v7 * *((float *)this + 12));
    *((_QWORD *)this + 7) = a2;
  }
  else
  {
    __break(1u);
  }
}

uint64_t webrtc::SmoothingFilterImpl::GetAverage(webrtc::SmoothingFilterImpl *this)
{
  uint64_t v2;

  if (!*((_BYTE *)this + 32))
    return 0;
  if (rtc::g_clock)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v2 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  webrtc::SmoothingFilterImpl::ExtrapolateLastSample(this, v2 / 1000000);
  return *((unsigned int *)this + 12) | 0x100000000;
}

uint64_t webrtc::SmoothingFilterImpl::SetTimeConstantMs(webrtc::SmoothingFilterImpl *this, int a2)
{
  if (!*((_BYTE *)this + 32) || *((_QWORD *)this + 7) < *((_QWORD *)this + 3))
    return 0;
  if (a2)
    *((float *)this + 11) = expf(-1.0 / (float)a2);
  else
    *((_DWORD *)this + 11) = 0;
  return 1;
}

uint64_t rtc::Socket::RecvFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;

  v22 = -1;
  v4 = *(_QWORD *)(a2 + 96);
  v5 = *(_QWORD *)(v4 + 8);
  if (!(v5 >> 16))
  {
    v6 = (void *)operator new[]();
    v7 = v6;
    v8 = *(_QWORD *)(v4 + 16);
    if (v8)
    {
      memcpy(v6, *(const void **)(v4 + 16), *(_QWORD *)v4);
      *(_QWORD *)(v4 + 16) = v7;
      MEMORY[0x20BD0ADD4](v8, 0x1000C8077774924);
    }
    else
    {
      *(_QWORD *)(v4 + 16) = v6;
    }
    *(_QWORD *)(v4 + 8) = 0x10000;
    v4 = *(_QWORD *)(a2 + 96);
    v5 = *(_QWORD *)(v4 + 8);
  }
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, *(_QWORD *)(v4 + 16), v5, a2 + 16, &v22);
  v10 = v9;
  v11 = *(_QWORD *)(a2 + 96);
  v12 = v9 & ~((int)v9 >> 31);
  v13 = *(_QWORD *)(v11 + 8);
  if (v13 < v12)
  {
    v14 = v13 + (v13 >> 1);
    if (v14 <= v12)
      v15 = v9 & ~((int)v9 >> 31);
    else
      v15 = v14;
    v16 = (void *)operator new[]();
    v17 = v16;
    v18 = *(_QWORD *)(v11 + 16);
    if (v18)
    {
      memcpy(v16, *(const void **)(v11 + 16), *(_QWORD *)v11);
      *(_QWORD *)(v11 + 16) = v17;
      MEMORY[0x20BD0ADD4](v18, 0x1000C8077774924);
    }
    else
    {
      *(_QWORD *)(v11 + 16) = v16;
    }
    *(_QWORD *)(v11 + 8) = v15;
  }
  *(_QWORD *)v11 = v12;
  v19 = v22;
  if ((int)v10 >= 1 && v22 != -1)
  {
    if (!*(_BYTE *)(a2 + 8))
      *(_BYTE *)(a2 + 8) = 1;
    *(_QWORD *)a2 = v19;
  }
  return v10;
}

void rtc::Socket::RecvFrom(rtc::webrtc_checks_impl *a1)
{
  rtc::webrtc_checks_impl::UnreachableCodeReached(a1);
}

uint64_t rtc::BufferedReadAdapter::Send(rtc::BufferedReadAdapter *this, const void *a2)
{
  if (!*((_BYTE *)this + 448))
    return (*(uint64_t (**)(_QWORD, const void *))(**((_QWORD **)this + 52) + 48))(*((_QWORD *)this + 52), a2);
  (*(void (**)(rtc::BufferedReadAdapter *, uint64_t))(*(_QWORD *)this + 120))(this, 35);
  return 0xFFFFFFFFLL;
}

uint64_t rtc::BufferedReadAdapter::Recv(size_t *this, char *__dst, size_t a3, uint64_t *a4)
{
  uint64_t result;
  size_t v7;
  char *v8;
  size_t v9;
  size_t v10;
  size_t v11;

  if (*((_BYTE *)this + 448))
  {
    (*(void (**)(size_t *, uint64_t, size_t, uint64_t *))(*this + 120))(this, 35, a3, a4);
    return 0xFFFFFFFFLL;
  }
  else
  {
    v7 = a3;
    v8 = __dst;
    v9 = this[55];
    if (v9)
    {
      if (v9 >= a3)
        v10 = a3;
      else
        v10 = this[55];
      memcpy(__dst, (const void *)this[53], v10);
      v11 = this[55];
      this[55] = v11 - v10;
      if (v11 != v10)
        memmove((void *)this[53], (const void *)(this[53] + v10), v11 - v10);
      v8 += v10;
      v7 -= v10;
    }
    else
    {
      v10 = 0;
    }
    LODWORD(result) = (*(uint64_t (**)(size_t, char *, size_t, uint64_t *))(*(_QWORD *)this[52] + 64))(this[52], v8, v7, a4);
    if ((result & 0x80000000) != 0)
    {
      if (v10)
        return v10;
      else
        return result;
    }
    else
    {
      return (result + v10);
    }
  }
}

void rtc::BufferedReadAdapter::OnReadEvent(rtc::BufferedReadAdapter *this, rtc::Socket *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  void (*v15)(_QWORD *, rtc::BufferedReadAdapter *);
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  int v26;
  int v27;

  if (*((_BYTE *)this + 448))
  {
    v4 = *((_QWORD *)this + 54);
    v3 = *((_QWORD *)this + 55);
    if (v3 >= v4)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/socket_adapters.cc");
      v3 = 0;
      *((_QWORD *)this + 55) = 0;
      v4 = *((_QWORD *)this + 54);
    }
    v12 = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t, _QWORD))(**((_QWORD **)this + 52) + 64))(*((_QWORD *)this + 52), *((_QWORD *)this + 53) + v3, v4 - v3, 0);
    if ((v12 & 0x80000000) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v16 = *__error();
        v24 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/socket_adapters.cc";
        v25 = 873;
        v26 = 1;
        v27 = v16;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)&v24);
      }
    }
    else
    {
      *((_QWORD *)this + 55) += v12;
      (*(void (**)(rtc::BufferedReadAdapter *, _QWORD, char *))(*(_QWORD *)this + 184))(this, *((_QWORD *)this + 53), (char *)this + 440);
    }
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
    v13 = (_QWORD *)*((_QWORD *)this + 12);
    for (*((_QWORD *)this + 14) = v13; v13 != (_QWORD *)((char *)this + 88); v13 = (_QWORD *)*((_QWORD *)this + 14))
    {
      v15 = (void (*)(_QWORD *, rtc::BufferedReadAdapter *))v13[2];
      v14 = v13 + 2;
      *((_QWORD *)this + 14) = *(v14 - 1);
      v15(v14, this);
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 24));
  }
}

uint64_t rtc::AsyncSSLSocket::Connect(uint64_t a1)
{
  *(_BYTE *)(a1 + 448) = 1;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 416) + 40))(*(_QWORD *)(a1 + 416));
}

_QWORD *rtc::AsyncSSLSocket::OnConnectEvent(rtc::AsyncSSLSocket *this, rtc::Socket *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(_QWORD *, rtc::AsyncSSLSocket *, _QWORD);

  result = (_QWORD *)(*(uint64_t (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 52) + 48))(*((_QWORD *)this + 52), &rtc::kSslClientHello, 72);
  if ((_DWORD)result != 72)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/socket_adapters.cc");
    (*(void (**)(rtc::AsyncSSLSocket *))(*(_QWORD *)this + 104))(this);
    result = (_QWORD *)*((_QWORD *)this + 41);
    for (*((_QWORD *)this + 43) = result;
          result != (_QWORD *)((char *)this + 320);
          result = (_QWORD *)*((_QWORD *)this + 43))
    {
      v12 = (void (*)(_QWORD *, rtc::AsyncSSLSocket *, _QWORD))result[2];
      v11 = result + 2;
      *((_QWORD *)this + 43) = *(v11 - 1);
      v12(v11, this, 0);
    }
  }
  return result;
}

uint64_t rtc::AsyncSSLSocket::ProcessInput(uint64_t this, char *a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, _QWORD);
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);

  v3 = *a3;
  if (*a3 < 0x4F)
    return this;
  v6 = this;
  if (memcmp(&rtc::kSslServerHello, a2, 0x4FuLL))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/socket_adapters.cc");
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
    this = *(_QWORD *)(v6 + 328);
    for (*(_QWORD *)(v6 + 344) = this; this != v6 + 320; this = *(_QWORD *)(v6 + 344))
    {
      v15 = *(void (**)(uint64_t, uint64_t, _QWORD))(this + 16);
      v14 = this + 16;
      *(_QWORD *)(v6 + 344) = *(_QWORD *)(v14 - 8);
      v15(v14, v6, 0);
    }
    return this;
  }
  *a3 = v3 - 79;
  if (v3 == 79)
  {
    v16 = 1;
    *(_BYTE *)(v6 + 448) = 0;
    v17 = v6 + 264;
    this = *(_QWORD *)(v6 + 272);
    *(_QWORD *)(v6 + 288) = this;
    if (this == v6 + 264)
      goto LABEL_14;
  }
  else
  {
    memmove(a2, a2 + 79, v3 - 79);
    v16 = *a3 == 0;
    *(_BYTE *)(v6 + 448) = 0;
    v17 = v6 + 264;
    this = *(_QWORD *)(v6 + 272);
    *(_QWORD *)(v6 + 288) = this;
    if (this == v6 + 264)
      goto LABEL_14;
  }
  do
  {
    v19 = *(void (**)(uint64_t, uint64_t))(this + 16);
    v18 = this + 16;
    *(_QWORD *)(v6 + 288) = *(_QWORD *)(v18 - 8);
    v19(v18, v6);
    this = *(_QWORD *)(v6 + 288);
  }
  while (this != v17);
LABEL_14:
  if (!v16)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v6 + 24));
    v20 = *(_QWORD *)(v6 + 96);
    for (*(_QWORD *)(v6 + 112) = v20; v20 != v6 + 88; v20 = *(_QWORD *)(v6 + 112))
    {
      v22 = *(void (**)(uint64_t, uint64_t))(v20 + 16);
      v21 = v20 + 16;
      *(_QWORD *)(v6 + 112) = *(_QWORD *)(v21 - 8);
      v22(v21, v6);
    }
    return pthread_mutex_unlock((pthread_mutex_t *)(v6 + 24));
  }
  return this;
}

void rtc::AsyncSSLSocket::~AsyncSSLSocket(rtc::AsyncSSLSocket *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0C0F48;
  v2 = (char *)this + 360;
  *((_QWORD *)this + 45) = &unk_24C0C1018;
  v3 = *((_QWORD *)this + 53);
  if (v3)
    MEMORY[0x20BD0ADD4](v3, 0x1000C8077774924);
  *(_QWORD *)this = &off_24C0ACE50;
  *((_QWORD *)this + 45) = &unk_24C0ACF18;
  v4 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 45) = &unk_24C0ACE30;
  (*((void (**)(char *))this + 48))(v2);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 392, *((_QWORD **)this + 50));
  rtc::Socket::~Socket(this);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0C0F48;
  v2 = (char *)this + 360;
  *((_QWORD *)this + 45) = &unk_24C0C1018;
  v3 = *((_QWORD *)this + 53);
  if (v3)
    MEMORY[0x20BD0ADD4](v3, 0x1000C8077774924);
  *(_QWORD *)this = &off_24C0ACE50;
  *((_QWORD *)this + 45) = &unk_24C0ACF18;
  v4 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 45) = &unk_24C0ACE30;
  (*((void (**)(char *))this + 48))(v2);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 392, *((_QWORD **)this + 50));
  rtc::Socket::~Socket(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'rtc::AsyncSSLSocket::~AsyncSSLSocket(rtc::AsyncSSLSocket *this)
{
  rtc::Socket *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (rtc::AsyncSSLSocket *)((char *)this - 360);
  *((_QWORD *)this - 45) = off_24C0C0F48;
  *(_QWORD *)this = &unk_24C0C1018;
  v3 = *((_QWORD *)this + 8);
  if (v3)
    MEMORY[0x20BD0ADD4](v3, 0x1000C8077774924);
  *(_QWORD *)v2 = &off_24C0ACE50;
  *(_QWORD *)this = &unk_24C0ACF18;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)this = &unk_24C0ACE30;
  (*((void (**)(rtc::AsyncSSLSocket *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  rtc::Socket::~Socket(v2);
}

{
  rtc::Socket *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (rtc::AsyncSSLSocket *)((char *)this - 360);
  *((_QWORD *)this - 45) = off_24C0C0F48;
  *(_QWORD *)this = &unk_24C0C1018;
  v3 = *((_QWORD *)this + 8);
  if (v3)
    MEMORY[0x20BD0ADD4](v3, 0x1000C8077774924);
  *(_QWORD *)v2 = &off_24C0ACE50;
  *(_QWORD *)this = &unk_24C0ACF18;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)this = &unk_24C0ACE30;
  (*((void (**)(rtc::AsyncSSLSocket *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  rtc::Socket::~Socket(v2);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::SocketAddress::SocketAddress(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = &unk_24C0ACDA0;
  *(_BYTE *)(this + 64) = 0;
  *(_WORD *)(this + 56) = 0;
  *(_DWORD *)(this + 60) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t rtc::SocketAddress::SetIP(uint64_t a1, __int128 *__src, size_t __len)
{
  __int128 *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  uint64_t result;
  int v12;
  __int128 v13;
  unint64_t v14;
  int v15;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&v13 + 1) = __len;
    v14 = v8 | 0x8000000000000000;
    *(_QWORD *)&v13 = v6;
  }
  else
  {
    HIBYTE(v14) = __len;
    v6 = &v13;
  }
  v9 = (__int128 *)((char *)v6 + __len);
  if (v6 <= __src && v9 > __src)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (__len)
    memmove(v6, __src, __len);
  *(_BYTE *)v9 = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = v13;
  *(_QWORD *)(a1 + 16) = v14;
  result = rtc::inet_pton(2, (char *)__src, __len, &v15);
  if ((_DWORD)result)
  {
    v12 = v15;
    *(_DWORD *)(a1 + 32) = 2;
    *(_DWORD *)(a1 + 36) = v12;
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
LABEL_19:
    *(_BYTE *)(a1 + 64) = 1;
    *(_DWORD *)(a1 + 60) = 0;
    return result;
  }
  result = rtc::inet_pton(30, (char *)__src, __len, &v13);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 32) = 30;
    *(_OWORD *)(a1 + 36) = v13;
    goto LABEL_19;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  return result;
}

uint64_t rtc::SocketAddress::SetPort(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 56) = a2;
  return this;
}

uint64_t rtc::SocketAddress::SocketAddress(uint64_t a1, __int128 *a2, size_t a3, __int16 a4)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C0ACDA0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  rtc::SocketAddress::SetIP(a1, a2, a3);
  *(_WORD *)(a1 + 56) = a4;
  return a1;
}

__n128 rtc::SocketAddress::SocketAddress(rtc::SocketAddress *this, const rtc::IPAddress *a2, __int16 a3)
{
  int v3;
  __n128 result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_24C0ACDA0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  v3 = *((_DWORD *)a2 + 2);
  *((_BYTE *)this + 64) = 0;
  *((_DWORD *)this + 8) = v3;
  result = *(__n128 *)((char *)a2 + 12);
  *(__n128 *)((char *)this + 36) = result;
  *((_DWORD *)this + 15) = 0;
  *((_WORD *)this + 28) = a3;
  return result;
}

std::string *rtc::SocketAddress::operator=(std::string *this, std::string *a2)
{
  std::string *v2;
  __int128 v4;
  size_t size;

  v2 = a2;
  if (this != a2)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      else
      {
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
        size = v2->__r_.__value_.__l.__size_;
      }
      std::string::__assign_no_alias<false>(this, (const std::string::value_type *)a2, size);
    }
    else if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
  }
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = v2[1].__r_.__value_.__r.__words[1];
  *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[1] + 4) = *(_OWORD *)((char *)&v2[1].__r_.__value_.__r.__words[1]
                                                                             + 4);
  LOWORD(this[2].__r_.__value_.__r.__words[1]) = v2[2].__r_.__value_.__r.__words[1];
  this[2].__r_.__value_.__s.__data_[16] = v2[2].__r_.__value_.__s.__data_[16];
  HIDWORD(this[2].__r_.__value_.__r.__words[1]) = HIDWORD(v2[2].__r_.__value_.__r.__words[1]);
  return this;
}

rtc::SocketAddress *rtc::SocketAddress::SocketAddress(rtc::SocketAddress *this, const rtc::SocketAddress *a2)
{
  __int128 v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_24C0ACDA0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  if (this != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__assign_no_alias<true>(this, *(char **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *(_OWORD *)a2;
      *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)this = v4;
    }
  }
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *(_OWORD *)((char *)this + 36) = *(_OWORD *)((char *)a2 + 36);
  *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  return this;
}

BOOL rtc::SocketAddress::IsNil(rtc::SocketAddress *this)
{
  if (*((char *)this + 23) < 0)
  {
    if (*((_QWORD *)this + 1))
      return 0;
  }
  else if (*((_BYTE *)this + 23))
  {
    return 0;
  }
  return !*((_DWORD *)this + 8) && *((_WORD *)this + 28) == 0;
}

__n128 rtc::SocketAddress::SetResolvedIP(rtc::SocketAddress *this, const rtc::IPAddress *a2)
{
  __n128 result;

  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 2);
  result = *(__n128 *)((char *)a2 + 12);
  *(__n128 *)((char *)this + 36) = result;
  *((_DWORD *)this + 15) = 0;
  return result;
}

uint64_t rtc::SocketAddress::ipaddr(rtc::SocketAddress *this)
{
  return (uint64_t)this + 24;
}

uint64_t rtc::SocketAddress::port(rtc::SocketAddress *this)
{
  return *((unsigned __int16 *)this + 28);
}

void rtc::SocketAddress::HostAsURIString(rtc::SocketAddress *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type size;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string v11;
  std::string v12;

  if (!*((_BYTE *)this + 64))
  {
    if (*((char *)this + 23) < 0)
    {
      v10 = *((_QWORD *)this + 1);
      if (v10)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, v10);
        return;
      }
    }
    else if (*((_BYTE *)this + 23))
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
      return;
    }
  }
  if (*((_DWORD *)this + 8) != 30)
  {
    rtc::IPAddress::ToString((rtc::SocketAddress *)((char *)this + 24), a2);
    return;
  }
  rtc::IPAddress::ToString((rtc::SocketAddress *)((char *)this + 24), &v11);
  v3 = std::string::insert(&v11, 0, "[");
  v4 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = 22;
  else
    v6 = (v12.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v12.__r_.__value_.__l.__size_;
  if (v6 == size)
  {
    std::string::__grow_by_and_replace(&v12, v6, 1uLL, v6, v6, 0, 1uLL, "]");
  }
  else
  {
    v7 = &v12;
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((char *)v7 + size <= "]" && (char *)&v7->__r_.__value_.__l.__data_ + size + 1 > "]")
    {
      __break(1u);
      return;
    }
    v7->__r_.__value_.__s.__data_[size] = 93;
    v9 = size + 1;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      v12.__r_.__value_.__l.__size_ = v9;
    else
      *((_BYTE *)&v12.__r_.__value_.__s + 23) = v9 & 0x7F;
    v7->__r_.__value_.__s.__data_[v9] = 0;
  }
  *a2 = v12;
  memset(&v12, 0, sizeof(v12));
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void rtc::SocketAddress::HostAsSensitiveURIString(rtc::SocketAddress *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type size;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string v11;
  std::string v12;

  if (!*((_BYTE *)this + 64))
  {
    if (*((char *)this + 23) < 0)
    {
      v10 = *((_QWORD *)this + 1);
      if (v10)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, v10);
        return;
      }
    }
    else if (*((_BYTE *)this + 23))
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
      return;
    }
  }
  if (*((_DWORD *)this + 8) != 30)
  {
    rtc::IPAddress::ToSensitiveString((rtc::SocketAddress *)((char *)this + 24), (uint64_t)a2);
    return;
  }
  rtc::IPAddress::ToSensitiveString((rtc::SocketAddress *)((char *)this + 24), (uint64_t)&v11);
  v3 = std::string::insert(&v11, 0, "[");
  v4 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = 22;
  else
    v6 = (v12.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v12.__r_.__value_.__l.__size_;
  if (v6 == size)
  {
    std::string::__grow_by_and_replace(&v12, v6, 1uLL, v6, v6, 0, 1uLL, "]");
  }
  else
  {
    v7 = &v12;
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((char *)v7 + size <= "]" && (char *)&v7->__r_.__value_.__l.__data_ + size + 1 > "]")
    {
      __break(1u);
      return;
    }
    v7->__r_.__value_.__s.__data_[size] = 93;
    v9 = size + 1;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      v12.__r_.__value_.__l.__size_ = v9;
    else
      *((_BYTE *)&v12.__r_.__value_.__s + 23) = v9 & 0x7F;
    v7->__r_.__value_.__s.__data_[v9] = 0;
  }
  *a2 = v12;
  memset(&v12, 0, sizeof(v12));
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

unint64_t rtc::SocketAddress::ToString@<X0>(rtc::SocketAddress *this@<X0>, char *a2@<X8>)
{
  std::string::size_type size;
  std::string *p_src;
  size_t v6;
  size_t v7;
  size_t v8;
  char *v9;
  unint64_t result;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  std::string __src;
  char *__s[3];
  _BYTE __dst[1024];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  __s[0] = __dst;
  __s[1] = (char *)1024;
  __dst[0] = 0;
  rtc::SocketAddress::HostAsURIString(this, &__src);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || (p_src = (std::string *)__src.__r_.__value_.__r.__words[0], __src.__r_.__value_.__l.__size_)
      && !__src.__r_.__value_.__r.__words[0])
    {
LABEL_26:
      __break(1u);
LABEL_27:
      abort();
    }
  }
  else
  {
    size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    p_src = &__src;
  }
  if (size >= 0x3FF)
    v6 = 1023;
  else
    v6 = size;
  v7 = size < 0x3FF;
  if (size >= 0x3FF)
    v8 = v6;
  else
    v8 = v6 + 1;
  memcpy(__dst, p_src, v6);
  __dst[v6] = 0;
  memcpy(&__dst[v6], ":", v7);
  __s[2] = (char *)v8;
  __dst[v8] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)__s, "%d", *((unsigned __int16 *)this + 28));
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  v9 = __s[0];
  if (!__s[0])
    goto LABEL_26;
  result = strlen(__s[0]);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_27;
  v11 = result;
  if (result <= 0x16)
  {
    a2[23] = result;
    v12 = &a2[result];
    if (a2 > v9)
      goto LABEL_23;
    goto LABEL_22;
  }
  v13 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((result | 7) != 0x17)
    v13 = result | 7;
  v14 = v13 + 1;
  result = (unint64_t)operator new(v13 + 1);
  *((_QWORD *)a2 + 1) = v11;
  *((_QWORD *)a2 + 2) = v14 | 0x8000000000000000;
  *(_QWORD *)a2 = result;
  a2 = (char *)result;
  v12 = (char *)(result + v11);
  if (result <= (unint64_t)v9)
  {
LABEL_22:
    if (v12 <= v9)
      goto LABEL_23;
    goto LABEL_26;
  }
LABEL_23:
  if (v11)
    result = (unint64_t)memmove(a2, v9, v11);
  *v12 = 0;
  return result;
}

unint64_t rtc::SocketAddress::ToSensitiveString@<X0>(rtc::SocketAddress *this@<X0>, char *a2@<X8>)
{
  std::string::size_type size;
  std::string *p_src;
  size_t v6;
  size_t v7;
  size_t v8;
  char *v9;
  unint64_t result;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  std::string __src;
  char *__s[3];
  _BYTE __dst[1024];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  __s[0] = __dst;
  __s[1] = (char *)1024;
  __dst[0] = 0;
  rtc::SocketAddress::HostAsSensitiveURIString(this, &__src);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || (p_src = (std::string *)__src.__r_.__value_.__r.__words[0], __src.__r_.__value_.__l.__size_)
      && !__src.__r_.__value_.__r.__words[0])
    {
LABEL_26:
      __break(1u);
LABEL_27:
      abort();
    }
  }
  else
  {
    size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    p_src = &__src;
  }
  if (size >= 0x3FF)
    v6 = 1023;
  else
    v6 = size;
  v7 = size < 0x3FF;
  if (size >= 0x3FF)
    v8 = v6;
  else
    v8 = v6 + 1;
  memcpy(__dst, p_src, v6);
  __dst[v6] = 0;
  memcpy(&__dst[v6], ":", v7);
  __s[2] = (char *)v8;
  __dst[v8] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)__s, "%d", *((unsigned __int16 *)this + 28));
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  v9 = __s[0];
  if (!__s[0])
    goto LABEL_26;
  result = strlen(__s[0]);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_27;
  v11 = result;
  if (result <= 0x16)
  {
    a2[23] = result;
    v12 = &a2[result];
    if (a2 > v9)
      goto LABEL_23;
    goto LABEL_22;
  }
  v13 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((result | 7) != 0x17)
    v13 = result | 7;
  v14 = v13 + 1;
  result = (unint64_t)operator new(v13 + 1);
  *((_QWORD *)a2 + 1) = v11;
  *((_QWORD *)a2 + 2) = v14 | 0x8000000000000000;
  *(_QWORD *)a2 = result;
  a2 = (char *)result;
  v12 = (char *)(result + v11);
  if (result <= (unint64_t)v9)
  {
LABEL_22:
    if (v12 <= v9)
      goto LABEL_23;
    goto LABEL_26;
  }
LABEL_23:
  if (v11)
    result = (unint64_t)memmove(a2, v9, v11);
  *v12 = 0;
  return result;
}

unint64_t rtc::SocketAddress::ToSensitiveNameAndAddressString@<X0>(rtc::SocketAddress *this@<X0>, unint64_t a2@<X8>)
{
  int v4;
  unint64_t result;
  std::string::size_type size;
  std::string *p_src;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  std::string __src;
  char *__s;
  __int128 v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 8))
  {
    if (*((_BYTE *)this + 64))
      return rtc::SocketAddress::ToSensitiveString(this, (char *)a2);
    LOBYTE(v4) = *((_BYTE *)this + 23);
  }
  else
  {
    if (*((_BYTE *)this + 64))
      return rtc::SocketAddress::ToSensitiveString(this, (char *)a2);
    v4 = *((char *)this + 23);
    if (v4 < 0)
    {
      if (*((_QWORD *)this + 1))
        return rtc::SocketAddress::ToSensitiveString(this, (char *)a2);
    }
    else if (*((_BYTE *)this + 23))
    {
      return rtc::SocketAddress::ToSensitiveString(this, (char *)a2);
    }
  }
  if ((v4 & 0x80) != 0)
  {
    if (*((_QWORD *)this + 1))
      goto LABEL_13;
    return rtc::SocketAddress::ToSensitiveString(this, (char *)a2);
  }
  if (!(_BYTE)v4)
    return rtc::SocketAddress::ToSensitiveString(this, (char *)a2);
LABEL_13:
  __s = &v39;
  v38 = xmmword_208F05840;
  v39 = 0;
  rtc::SocketAddress::HostAsSensitiveURIString(this, &__src);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_71;
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    if (__src.__r_.__value_.__l.__size_)
    {
      if (!__src.__r_.__value_.__r.__words[0])
        goto LABEL_71;
    }
  }
  else
  {
    size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    p_src = &__src;
  }
  if (size >= (_QWORD)v38 + ~*((_QWORD *)&v38 + 1))
    v8 = v38 + ~*((_QWORD *)&v38 + 1);
  else
    v8 = size;
  memcpy(&__s[*((_QWORD *)&v38 + 1)], p_src, v8);
  *((_QWORD *)&v38 + 1) += v8;
  __s[*((_QWORD *)&v38 + 1)] = 0;
  v9 = v38;
  v10 = *((_QWORD *)&v38 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v38 + 1)], ":", v38 != *((_QWORD *)&v38 + 1) + 1);
  v11 = *((_QWORD *)&v38 + 1);
  if (v9 != v10)
    v11 = *((_QWORD *)&v38 + 1) + 1;
  *((_QWORD *)&v38 + 1) = v11;
  __s[v11] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int16 *)this + 28));
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  if ((_QWORD)v38 + ~*((_QWORD *)&v38 + 1) >= 2uLL)
    v12 = 2;
  else
    v12 = v38 + ~*((_QWORD *)&v38 + 1);
  memcpy(&__s[*((_QWORD *)&v38 + 1)], " (", v12);
  *((_QWORD *)&v38 + 1) += v12;
  __s[*((_QWORD *)&v38 + 1)] = 0;
  if (*((_DWORD *)this + 8) == 30)
  {
    v13 = v38;
    v14 = *((_QWORD *)&v38 + 1) + 1;
    memcpy(&__s[*((_QWORD *)&v38 + 1)], "[", v38 != *((_QWORD *)&v38 + 1) + 1);
    v15 = *((_QWORD *)&v38 + 1);
    if (v13 != v14)
      v15 = *((_QWORD *)&v38 + 1) + 1;
    *((_QWORD *)&v38 + 1) = v15;
    __s[v15] = 0;
    rtc::IPAddress::ToSensitiveString((rtc::SocketAddress *)((char *)this + 24), (uint64_t)&__src);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = __src.__r_.__value_.__l.__size_;
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_71;
      v17 = (std::string *)__src.__r_.__value_.__r.__words[0];
      if (__src.__r_.__value_.__l.__size_)
      {
        if (!__src.__r_.__value_.__r.__words[0])
          goto LABEL_71;
      }
    }
    else
    {
      v16 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      v17 = &__src;
    }
    if (v16 >= (_QWORD)v38 + ~*((_QWORD *)&v38 + 1))
      v20 = v38 + ~*((_QWORD *)&v38 + 1);
    else
      v20 = v16;
    memcpy(&__s[*((_QWORD *)&v38 + 1)], v17, v20);
    *((_QWORD *)&v38 + 1) += v20;
    __s[*((_QWORD *)&v38 + 1)] = 0;
    v21 = v38;
    v22 = *((_QWORD *)&v38 + 1) + 1;
    memcpy(&__s[*((_QWORD *)&v38 + 1)], "]", v38 != *((_QWORD *)&v38 + 1) + 1);
    v23 = *((_QWORD *)&v38 + 1);
    if (v21 != v22)
      v23 = *((_QWORD *)&v38 + 1) + 1;
    *((_QWORD *)&v38 + 1) = v23;
    __s[v23] = 0;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
LABEL_54:
      operator delete(__src.__r_.__value_.__l.__data_);
  }
  else
  {
    rtc::IPAddress::ToSensitiveString((rtc::SocketAddress *)((char *)this + 24), (uint64_t)&__src);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      v18 = __src.__r_.__value_.__l.__size_;
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_71;
      v19 = (std::string *)__src.__r_.__value_.__r.__words[0];
      if (__src.__r_.__value_.__l.__size_)
      {
        if (!__src.__r_.__value_.__r.__words[0])
          goto LABEL_71;
      }
    }
    else
    {
      v18 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      v19 = &__src;
    }
    if (v18 >= (_QWORD)v38 + ~*((_QWORD *)&v38 + 1))
      v24 = v38 + ~*((_QWORD *)&v38 + 1);
    else
      v24 = v18;
    memcpy(&__s[*((_QWORD *)&v38 + 1)], v19, v24);
    *((_QWORD *)&v38 + 1) += v24;
    __s[*((_QWORD *)&v38 + 1)] = 0;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_54;
  }
  v25 = v38;
  v26 = *((_QWORD *)&v38 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v38 + 1)], ":", v38 != *((_QWORD *)&v38 + 1) + 1);
  v27 = *((_QWORD *)&v38 + 1);
  if (v25 != v26)
    v27 = *((_QWORD *)&v38 + 1) + 1;
  *((_QWORD *)&v38 + 1) = v27;
  __s[v27] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int16 *)this + 28));
  v28 = v38;
  v29 = *((_QWORD *)&v38 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v38 + 1)], ")", v38 != *((_QWORD *)&v38 + 1) + 1);
  v30 = *((_QWORD *)&v38 + 1);
  if (v28 != v29)
    v30 = *((_QWORD *)&v38 + 1) + 1;
  *((_QWORD *)&v38 + 1) = v30;
  __s[v30] = 0;
  v31 = __s;
  if (!__s)
    goto LABEL_71;
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v32 = result;
  if (result > 0x16)
  {
    v34 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v34 = result | 7;
    v35 = v34 + 1;
    result = (unint64_t)operator new(v34 + 1);
    *(_QWORD *)(a2 + 8) = v32;
    *(_QWORD *)(a2 + 16) = v35 | 0x8000000000000000;
    *(_QWORD *)a2 = result;
    a2 = result;
    v33 = (char *)(result + v32);
    if (result > (unint64_t)v31)
      goto LABEL_68;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = result;
    v33 = (char *)(a2 + result);
    if (a2 > (unint64_t)v31)
      goto LABEL_68;
  }
  if (v33 > v31)
LABEL_71:
    __break(1u);
LABEL_68:
  if (v32)
    result = (unint64_t)memmove((void *)a2, v31, v32);
  *v33 = 0;
  return result;
}

BOOL rtc::SocketAddress::IsUnresolvedIP(rtc::SocketAddress *this)
{
  if (*((_DWORD *)this + 8))
    return 0;
  if (*((_BYTE *)this + 64))
    return 0;
  if (*((char *)this + 23) < 0)
    return *((_QWORD *)this + 1) != 0;
  return *((_BYTE *)this + 23) != 0;
}

BOOL rtc::SocketAddress::IsLoopbackIP(rtc::SocketAddress *this)
{
  int v1;

  v1 = *((_DWORD *)this + 8);
  if (v1 == 2)
  {
    if (*((_DWORD *)this + 9) == 127)
      return 1;
    if (!*((_DWORD *)this + 9))
      goto LABEL_16;
    return 0;
  }
  if (v1 != 30)
    return 0;
  if (*(_QWORD *)((char *)this + 36) == *MEMORY[0x24BDAE880]
    && *(_QWORD *)((char *)this + 44) == *(_QWORD *)(MEMORY[0x24BDAE880] + 8))
  {
    return 1;
  }
  if ((*(_QWORD *)((char *)this + 36) != *MEMORY[0x24BDAE878]
     || *(_QWORD *)((char *)this + 44) != *(_QWORD *)(MEMORY[0x24BDAE878] + 8))
    && (*(_QWORD *)((char *)this + 36) != (_QWORD)rtc::kV4MappedPrefix
     || *(_QWORD *)((char *)this + 44) != *((_QWORD *)&rtc::kV4MappedPrefix + 1)))
  {
    return 0;
  }
LABEL_16:
  if (*((char *)this + 23) < 0)
    this = *(rtc::SocketAddress **)this;
  return strcmp((const char *)this, "localhost") == 0;
}

BOOL rtc::SocketAddress::IsPrivateIP(rtc::SocketAddress *this)
{
  int v1;
  uint64_t v2;
  BOOL v3;
  _BOOL4 v4;
  _BOOL8 result;
  unsigned int v7;

  v1 = *((_DWORD *)this + 8);
  if (v1 == 2)
  {
    LODWORD(v2) = *((_DWORD *)this + 9);
    result = 1;
    if ((unsigned __int16)v2 == 65193)
      return result;
    if (v2 == 127)
      return result;
    v7 = bswap32(v2);
    if (HIWORD(v7) == 49320 || (v7 & 0xFF000000) == 0xA000000 || (v7 & 0xFFF00000) == 0xAC100000)
      return result;
  }
  else if (v1 == 30)
  {
    v2 = *(_QWORD *)((char *)this + 36);
    if ((v2 & 0xC0FF) == 0x80FE)
      return 1;
    v3 = *(_QWORD *)((char *)this + 36) == *MEMORY[0x24BDAE880]
      && *(_QWORD *)((char *)this + 44) == *(_QWORD *)(MEMORY[0x24BDAE880] + 8);
    v4 = !v3;
    if (*(_QWORD *)((char *)this + 36) == 253 || !v4)
      return 1;
  }
  else
  {
    LODWORD(v2) = *((_DWORD *)this + 9);
  }
  return v1 == 2 && (v2 & 0xC0FF) == 16484;
}

BOOL rtc::SocketAddress::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  _BOOL8 result;

  result = rtc::SocketAddress::EqualIPs((rtc::SocketAddress *)a1, (const rtc::SocketAddress *)a2);
  if (result)
    return a1[28] == a2[28];
  return result;
}

BOOL rtc::SocketAddress::EqualIPs(rtc::SocketAddress *this, const rtc::SocketAddress *a2)
{
  int v2;
  _BOOL8 v3;
  BOOL v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;

  v2 = *((_DWORD *)this + 8);
  if (v2 != *((_DWORD *)a2 + 8))
    return 0;
  if (!v2)
    goto LABEL_24;
  if (v2 != 30)
  {
    if (v2 == 2)
    {
      if (*((_DWORD *)this + 9) != *((_DWORD *)a2 + 9))
        return 0;
      if (*((_DWORD *)this + 9))
        return 1;
      goto LABEL_24;
    }
    return 0;
  }
  v5 = *(_QWORD *)((char *)this + 36) == *(_QWORD *)((char *)a2 + 36)
    && *(_QWORD *)((char *)this + 44) == *(_QWORD *)((char *)a2 + 44);
  if (!v5)
    return 0;
  if ((*(_QWORD *)((char *)this + 36) != *MEMORY[0x24BDAE878]
     || *(_QWORD *)((char *)this + 44) != *(_QWORD *)(MEMORY[0x24BDAE878] + 8))
    && (*(_QWORD *)((char *)this + 36) != (_QWORD)rtc::kV4MappedPrefix
     || *(_QWORD *)((char *)this + 44) != *((_QWORD *)&rtc::kV4MappedPrefix + 1)))
  {
    return 1;
  }
LABEL_24:
  v8 = *((unsigned __int8 *)this + 23);
  if ((v8 & 0x80u) == 0)
    v9 = *((unsigned __int8 *)this + 23);
  else
    v9 = *((_QWORD *)this + 1);
  v10 = *((unsigned __int8 *)a2 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)a2 + 1);
  if (v9 != v10)
    return 0;
  if (v11 < 0)
    a2 = *(const rtc::SocketAddress **)a2;
  if ((v8 & 0x80) == 0)
  {
    if (*((_BYTE *)this + 23))
    {
      v12 = v8 - 1;
      do
      {
        v14 = *(unsigned __int8 *)this;
        this = (rtc::SocketAddress *)((char *)this + 1);
        v13 = v14;
        v16 = *(unsigned __int8 *)a2;
        a2 = (const rtc::SocketAddress *)((char *)a2 + 1);
        v15 = v16;
        v18 = v12-- != 0;
        v5 = v13 == v15;
        v3 = v13 == v15;
      }
      while (v5 && v18);
      return v3;
    }
    return 1;
  }
  return memcmp(*(const void **)this, a2, *((_QWORD *)this + 1)) == 0;
}

uint64_t rtc::SocketAddress::operator<(uint64_t __s1, char *__s2)
{
  int v2;
  int v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  _BOOL4 v9;
  int v10;
  int v11;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  size_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  size_t v30;
  int v31;

  v2 = *(_DWORD *)(__s1 + 32);
  v3 = *((_DWORD *)__s2 + 8);
  if (v2 != v3)
  {
    v13 = v2 == 2 && v3 == 30;
    return !v2 || v13;
  }
  v4 = (unsigned __int16 *)__s2;
  v5 = (unsigned __int16 *)__s1;
  switch(v2)
  {
    case 0:
      goto LABEL_46;
    case 30:
      v14 = bswap64(*(_QWORD *)(__s1 + 36));
      v15 = bswap64(*(_QWORD *)(__s2 + 36));
      if (v14 == v15 && (v14 = bswap64(*(_QWORD *)(__s1 + 44)), v15 = bswap64(*(_QWORD *)(__s2 + 44)), v14 == v15))
      {
        v11 = 0;
      }
      else if (v14 < v15)
      {
        v11 = -1;
      }
      else
      {
        v11 = 1;
      }
      break;
    case 2:
      v6 = bswap32(*(_DWORD *)(__s1 + 36));
      v7 = bswap32(*((_DWORD *)__s2 + 9));
      v8 = v6 >= v7;
      v9 = v6 > v7;
      v10 = !v8;
      v11 = v9 - v10;
      break;
    default:
      return 0;
  }
  if (!v11)
  {
    if (v2 == 2)
    {
      if (*(_DWORD *)(__s1 + 36))
        goto LABEL_69;
    }
    else if ((*(_QWORD *)(__s1 + 36) != *MEMORY[0x24BDAE878]
            || *(_QWORD *)(__s1 + 44) != *(_QWORD *)(MEMORY[0x24BDAE878] + 8))
           && (*(_QWORD *)(__s1 + 36) != (_QWORD)rtc::kV4MappedPrefix
            || *(_QWORD *)(__s1 + 44) != *((_QWORD *)&rtc::kV4MappedPrefix + 1)))
    {
      goto LABEL_69;
    }
LABEL_46:
    v23 = *(_QWORD *)(__s1 + 8);
    if (*(char *)(__s1 + 23) >= 0)
      v24 = *(unsigned __int8 *)(__s1 + 23);
    else
      v24 = *(_QWORD *)(__s1 + 8);
    v25 = __s2[23];
    v26 = *((_QWORD *)__s2 + 1);
    if ((v25 & 0x80u) == 0)
      v27 = __s2[23];
    else
      v27 = *((_QWORD *)__s2 + 1);
    if (v24 != v27)
      goto LABEL_61;
    if ((v25 & 0x80u) != 0)
      __s2 = *(char **)__s2;
    if ((*(_BYTE *)(__s1 + 23) & 0x80) != 0)
    {
      __s1 = memcmp(*(const void **)__s1, __s2, *(_QWORD *)(__s1 + 8));
      if ((_DWORD)__s1)
        goto LABEL_64;
    }
    else if (*(_BYTE *)(__s1 + 23))
    {
      v28 = (unsigned __int8 *)__s1;
      v29 = *(unsigned __int8 *)(__s1 + 23);
      while (*v28 == *__s2)
      {
        ++v28;
        ++__s2;
        if (!--v29)
          goto LABEL_69;
      }
LABEL_61:
      if ((*(_BYTE *)(__s1 + 23) & 0x80) == 0)
      {
        v23 = *(unsigned __int8 *)(__s1 + 23);
LABEL_67:
        if ((v25 & 0x80) == 0)
        {
          v26 = v25;
          goto LABEL_74;
        }
        if ((v26 & 0x8000000000000000) == 0)
        {
          v4 = *(unsigned __int16 **)v4;
          if (!v26 || v4)
          {
LABEL_74:
            if (v26 >= v23)
              v30 = v23;
            else
              v30 = v26;
            v31 = memcmp(v5, v4, v30);
            if (v31)
            {
              if ((v31 & 0x80000000) == 0)
                return 0;
            }
            else if (v23 >= v26)
            {
              return 0;
            }
            return 1;
          }
        }
LABEL_82:
        __break(1u);
        return __s1;
      }
LABEL_64:
      if ((v23 & 0x8000000000000000) != 0)
        goto LABEL_82;
      v5 = *(unsigned __int16 **)v5;
      if (v23)
      {
        if (!v5)
          goto LABEL_82;
      }
      goto LABEL_67;
    }
LABEL_69:
    v16 = v5[28];
    v17 = v4[28];
    return v16 < v17;
  }
  if (v2 != 30)
  {
    v16 = bswap32(*(_DWORD *)(__s1 + 36));
    v17 = bswap32(*((_DWORD *)__s2 + 9));
    return v16 < v17;
  }
  v20 = bswap64(*(_QWORD *)(__s1 + 36));
  v21 = bswap64(*(_QWORD *)(__s2 + 36));
  if (v20 == v21)
  {
    v20 = bswap64(*(_QWORD *)(__s1 + 44));
    v21 = bswap64(*(_QWORD *)(__s2 + 44));
    if (v20 == v21)
      return 0;
  }
  if (v20 < v21)
    v22 = -1;
  else
    v22 = 1;
  return v22 >> 31;
}

unint64_t rtc::SocketAddress::Hash(rtc::SocketAddress *this)
{
  int v1;

  v1 = *((_DWORD *)this + 8);
  if (v1 == 30)
    return *(_QWORD *)((char *)this + 36) ^ *(_QWORD *)((char *)this + 44) ^ ((*(_QWORD *)((char *)this + 44) ^ *(_QWORD *)((char *)this + 36)) >> 32) ^ ((*((unsigned __int16 *)this + 28) << 16) & 0xFFFFFFFFFFFF0000 | *((unsigned __int16 *)this + 28));
  if (v1 == 2)
    return *((unsigned int *)this + 9) ^ ((*((unsigned __int16 *)this + 28) << 16) & 0xFFFFFFFFFFFF0000 | *((unsigned __int16 *)this + 28));
  return (*((unsigned __int16 *)this + 28) << 16) & 0xFFFFFFFFFFFF0000 | *((unsigned __int16 *)this + 28);
}

uint64_t rtc::SocketAddressFromSockAddrStorage(rtc *this, std::string *a2, rtc::SocketAddress *a3)
{
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v9;
  char *v10;
  __int16 v11;
  char v12;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  char v17;
  int v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  __int128 v24;
  __int16 v25;
  int v26;
  char v27;

  if (!a2)
    return 0;
  v5 = *((unsigned __int8 *)this + 1);
  if (v5 == 30)
  {
    v9 = bswap32(*((unsigned __int16 *)this + 1)) >> 16;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v22 = &unk_24C0ACDA0;
    v27 = 0;
    v23 = 30;
    v24 = *(_OWORD *)((char *)this + 8);
    v26 = 0;
    v25 = v9;
    if (&__p != (void **)a2)
    {
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__assign_no_alias<false>(a2, (const std::string::value_type *)&__p, 0);
        v15 = v23;
        v16 = v25;
        v17 = v27;
        HIDWORD(a2[2].__r_.__value_.__r.__words[1]) = v26;
        v10 = &a2[2].__r_.__value_.__s.__data_[12];
        v18 = SHIBYTE(v21);
        *((_DWORD *)v10 - 7) = v15;
        *(_OWORD *)(v10 - 24) = v24;
        *((_WORD *)v10 - 2) = v16;
        v10[4] = v17;
        if (v18 < 0)
          operator delete(__p);
        goto LABEL_13;
      }
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
    }
    LODWORD(a2[1].__r_.__value_.__r.__words[1]) = 30;
    *(_OWORD *)((char *)&a2[1].__r_.__value_.__r.__words[1] + 4) = v24;
    LOWORD(a2[2].__r_.__value_.__r.__words[1]) = v9;
    a2[2].__r_.__value_.__s.__data_[16] = 0;
    v10 = &a2[2].__r_.__value_.__s.__data_[12];
LABEL_13:
    *(_DWORD *)v10 = *((_DWORD *)this + 6);
    return 1;
  }
  if (v5 != 2)
    return 0;
  v6 = *((_DWORD *)this + 1);
  v7 = bswap32(*((unsigned __int16 *)this + 1)) >> 16;
  __p = 0;
  v20 = 0;
  v21 = 0;
  v22 = &unk_24C0ACDA0;
  v27 = 0;
  v23 = 2;
  LODWORD(v24) = v6;
  *(_QWORD *)((char *)&v24 + 4) = 0;
  HIDWORD(v24) = 0;
  v26 = 0;
  v25 = v7;
  if (&__p == (void **)a2)
  {
LABEL_7:
    LODWORD(a2[1].__r_.__value_.__r.__words[1]) = 2;
    *(_OWORD *)((char *)&a2[1].__r_.__value_.__r.__words[1] + 4) = v24;
    LOWORD(a2[2].__r_.__value_.__r.__words[1]) = v7;
    a2[2].__r_.__value_.__s.__data_[16] = 0;
    HIDWORD(a2[2].__r_.__value_.__r.__words[1]) = 0;
    return 1;
  }
  if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_7;
  }
  std::string::__assign_no_alias<false>(a2, (const std::string::value_type *)&__p, 0);
  v11 = v25;
  v12 = v27;
  v13 = v26;
  v14 = SHIBYTE(v21);
  LODWORD(a2[1].__r_.__value_.__r.__words[1]) = v23;
  *(_OWORD *)((char *)&a2[1].__r_.__value_.__r.__words[1] + 4) = v24;
  LOWORD(a2[2].__r_.__value_.__r.__words[1]) = v11;
  a2[2].__r_.__value_.__s.__data_[16] = v12;
  HIDWORD(a2[2].__r_.__value_.__r.__words[1]) = v13;
  if ((v14 & 0x80000000) == 0)
    return 1;
  operator delete(__p);
  return 1;
}

void webrtc::SourceTracker::OnFrameDelivered(webrtc::SourceTracker *this, RtpPacketInfos a2)
{
  unsigned __int8 v4;
  int64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  RenderResolution *var0;
  _QWORD *v10;
  _QWORD *v11;
  Timestamp v12;
  uint64_t v13;
  char v14;
  char v15;
  _QWORD v16[2];
  uint64_t (*v17)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v18)(uint64_t);

  if (a2.var0.var0->var0.var0)
  {
    if (*((_QWORD *)a2.var0.var0->var0.var0 + 1) == *((_QWORD *)a2.var0.var0->var0.var0 + 2))
      return;
    goto LABEL_6;
  }
  {
    v13 = operator new();
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)v13 = 0;
    webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v13;
  }
  if (*(_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value != *((_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value
                                                                        + 1))
  {
LABEL_6:
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
    v6 = *(_QWORD **)this;
    {
      v12.var0 = v5;
      webrtc::SourceTracker::OnFrameDeliveredInternal(this, v12, (const RtpPacketInfos *)a2.var0.var0);
    }
    else
    {
      v7 = (unsigned int *)*((_QWORD *)this + 10);
      if (v7)
      {
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      var0 = a2.var0.var0->var0.var0;
      a2.var0.var0->var0.var0 = 0;
      v10 = (_QWORD *)operator new();
      *v10 = this;
      v10[1] = var0;
      v10[2] = v5;
      v11 = (_QWORD *)operator new();
      *v11 = v7;
      v11[1] = v10;
      v11[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::SourceTracker::OnFrameDelivered(webrtc::RtpPacketInfos)::$_1>;
      v11[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::SourceTracker::OnFrameDelivered(webrtc::RtpPacketInfos)::$_1 &&>;
      v16[0] = v11;
      v17 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
      v18 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
      (*(void (**)(_QWORD *, _QWORD *, char *, char *))(*v6 + 8))(v6, v16, &v15, &v14);
      v17(1, v16, v16);
    }
  }
}

void webrtc::SourceTracker::OnFrameDeliveredInternal(webrtc::SourceTracker *this, Timestamp a2, const RtpPacketInfos *a3)
{
  unint64_t v3;
  unsigned __int8 *v4;
  Data *var0;
  unsigned int *var1;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  char *v12;
  unsigned __int8 *v13;
  int8x8_t v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unsigned int *v66;

  var0 = a3->var0.var0;
  if (!a3->var0.var0)
  {
    v9 = (uint64_t)a3;
    v3 = 0x25453D000uLL;
    if ((v10 & 1) == 0)
      goto LABEL_90;
    goto LABEL_5;
  }
  var1 = (unsigned int *)var0->var0.var1;
  v66 = *(unsigned int **)&var0->var1.var0[16];
  if (var1 == v66)
    goto LABEL_78;
  do
  {
LABEL_10:
    v9 = (uint64_t)this + 40;
    v12 = (char *)this + 16;
    while (1)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)var1 + 1);
      v13 = (unsigned __int8 *)*((_QWORD *)var1 + 2);
      if (v4 != v13)
        break;
LABEL_45:
      v3 = *var1;
      v37 = *(int8x8_t *)((char *)this + 48);
      if (!*(_QWORD *)&v37)
        goto LABEL_71;
      v38 = 0x99B75E94FD069879 * v3;
      v39 = (uint8x8_t)vcnt_s8(v37);
      v39.i16[0] = vaddlv_u8(v39);
      if (v39.u32[0] > 1uLL)
      {
        v40 = 0x99B75E94FD069879 * v3;
        if (v38 >= *(_QWORD *)&v37)
          v40 = v38 % *(_QWORD *)&v37;
      }
      else
      {
        v40 = v38 & (*(_QWORD *)&v37 - 1);
      }
      v41 = *(uint64_t ***)(*(_QWORD *)v9 + 8 * v40);
      if (!v41 || (v42 = *v41) == 0)
      {
LABEL_71:
        v48 = operator new(0x60uLL);
        v48[2] = v3 << 32;
        v48[3] = 0x8000000000000000;
        *((_OWORD *)v48 + 2) = 0u;
        *((_OWORD *)v48 + 3) = 0u;
        *((_OWORD *)v48 + 4) = 0u;
        *((_OWORD *)v48 + 5) = 0u;
        v49 = (_QWORD *)*((_QWORD *)this + 3);
        v50 = *((_QWORD *)this + 4);
        *v48 = v12;
        v48[1] = v49;
        *v49 = v48;
        *((_QWORD *)this + 3) = v48;
        *((_QWORD *)this + 4) = v50 + 1;
        std::__hash_table<std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,std::__unordered_map_hasher<webrtc::SourceTracker::SourceKey,std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,webrtc::SourceTracker::SourceKeyHasher,webrtc::SourceTracker::SourceKeyComparator,true>,std::__unordered_map_equal<webrtc::SourceTracker::SourceKey,std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,webrtc::SourceTracker::SourceKeyComparator,webrtc::SourceTracker::SourceKeyHasher,true>,std::allocator<std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>>>::__emplace_unique_key_args<webrtc::SourceTracker::SourceKey,webrtc::SourceTracker::SourceKey const&,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>((float *)this + 10, 0, v3, v3 << 32, (uint64_t)v48);
        goto LABEL_72;
      }
      if (v39.u32[0] < 2uLL)
      {
        v43 = *(_QWORD *)&v37 - 1;
        while (1)
        {
          v47 = v42[1];
          if (v47 == v38)
          {
            if (*((_DWORD *)v42 + 4))
              v46 = 0;
            else
              v46 = *((_DWORD *)v42 + 5) == (_DWORD)v3;
            if (v46)
              goto LABEL_75;
          }
          else if ((v47 & v43) != v40)
          {
            goto LABEL_71;
          }
          v42 = (uint64_t *)*v42;
          if (!v42)
            goto LABEL_71;
        }
      }
      while (1)
      {
        v45 = v42[1];
        if (v45 == v38)
          break;
        if (v45 >= *(_QWORD *)&v37)
          v45 %= *(_QWORD *)&v37;
        if (v45 != v40)
          goto LABEL_71;
LABEL_58:
        v42 = (uint64_t *)*v42;
        if (!v42)
          goto LABEL_71;
      }
      if (*((_DWORD *)v42 + 4))
        v44 = 0;
      else
        v44 = *((_DWORD *)v42 + 5) == (_DWORD)v3;
      if (!v44)
        goto LABEL_58;
LABEL_75:
      v54 = (uint64_t *)*((_QWORD *)this + 3);
      v55 = (uint64_t *)v42[3];
      if (v55 != v54)
      {
        v56 = (uint64_t *)v55[1];
        if (v56 != v54)
        {
          v57 = *v55;
          *(_QWORD *)(v57 + 8) = v56;
          *(_QWORD *)v55[1] = v57;
          v58 = *v54;
          *(_QWORD *)(v58 + 8) = v55;
          *v55 = v58;
          *v54 = (uint64_t)v55;
          v55[1] = (uint64_t)v54;
        }
      }
LABEL_72:
      if (!*((_QWORD *)this + 4))
        goto LABEL_89;
      v51 = *((_QWORD *)this + 3);
      *(Timestamp *)(v51 + 24) = a2;
      *(_WORD *)(v51 + 32) = *((_WORD *)var1 + 24);
      v52 = *(_OWORD *)(var1 + 14);
      *(_OWORD *)(v51 + 49) = *(_OWORD *)((char *)var1 + 65);
      *(_OWORD *)(v51 + 40) = v52;
      v53 = *((_QWORD *)var1 + 11);
      *(_BYTE *)(v51 + 80) = *((_BYTE *)var1 + 96);
      *(_QWORD *)(v51 + 72) = v53;
      *(_DWORD *)(v51 + 88) = var1[8];
      var1 += 26;
      if (var1 == v66)
        goto LABEL_78;
    }
    while (2)
    {
      v3 = *(unsigned int *)v4;
      v14 = *(int8x8_t *)((char *)this + 48);
      if (!*(_QWORD *)&v14)
        goto LABEL_38;
      v15 = 1 - 0x6648A16B02F96787 * v3;
      v16 = (uint8x8_t)vcnt_s8(v14);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v17 = 1 - 0x6648A16B02F96787 * v3;
        if (v15 >= *(_QWORD *)&v14)
          v17 = v15 % *(_QWORD *)&v14;
      }
      else
      {
        v17 = v15 & (*(_QWORD *)&v14 - 1);
      }
      v18 = *(uint64_t ***)(*(_QWORD *)v9 + 8 * v17);
      if (!v18 || (v19 = *v18) == 0)
      {
LABEL_38:
        v25 = operator new(0x60uLL);
        v26 = (v3 << 32) | 1;
        v25[2] = v26;
        v25[3] = 0x8000000000000000;
        *((_OWORD *)v25 + 2) = 0u;
        *((_OWORD *)v25 + 3) = 0u;
        *((_OWORD *)v25 + 4) = 0u;
        *((_OWORD *)v25 + 5) = 0u;
        v27 = (_QWORD *)*((_QWORD *)this + 3);
        v28 = *((_QWORD *)this + 4);
        *v25 = v12;
        v25[1] = v27;
        *v27 = v25;
        *((_QWORD *)this + 3) = v25;
        *((_QWORD *)this + 4) = v28 + 1;
        std::__hash_table<std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,std::__unordered_map_hasher<webrtc::SourceTracker::SourceKey,std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,webrtc::SourceTracker::SourceKeyHasher,webrtc::SourceTracker::SourceKeyComparator,true>,std::__unordered_map_equal<webrtc::SourceTracker::SourceKey,std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,webrtc::SourceTracker::SourceKeyComparator,webrtc::SourceTracker::SourceKeyHasher,true>,std::allocator<std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>>>::__emplace_unique_key_args<webrtc::SourceTracker::SourceKey,webrtc::SourceTracker::SourceKey const&,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>((float *)this + 10, 1, v3, v26, (uint64_t)v25);
        goto LABEL_39;
      }
      if (v16.u32[0] < 2uLL)
      {
        v20 = *(_QWORD *)&v14 - 1;
        while (1)
        {
          v24 = v19[1];
          if (v24 == v15)
          {
            if (*((_DWORD *)v19 + 4) == 1 && *((_DWORD *)v19 + 5) == (_DWORD)v3)
              goto LABEL_42;
          }
          else if ((v24 & v20) != v17)
          {
            goto LABEL_38;
          }
          v19 = (uint64_t *)*v19;
          if (!v19)
            goto LABEL_38;
        }
      }
      while (2)
      {
        v22 = v19[1];
        if (v22 != v15)
        {
          if (v22 >= *(_QWORD *)&v14)
            v22 %= *(_QWORD *)&v14;
          if (v22 != v17)
            goto LABEL_38;
          goto LABEL_25;
        }
        if (*((_DWORD *)v19 + 4) != 1 || *((_DWORD *)v19 + 5) != (_DWORD)v3)
        {
LABEL_25:
          v19 = (uint64_t *)*v19;
          if (!v19)
            goto LABEL_38;
          continue;
        }
        break;
      }
LABEL_42:
      v32 = (uint64_t *)*((_QWORD *)this + 3);
      v33 = (uint64_t *)v19[3];
      if (v33 != v32)
      {
        v34 = (uint64_t *)v33[1];
        if (v34 != v32)
        {
          v35 = *v33;
          *(_QWORD *)(v35 + 8) = v34;
          *(_QWORD *)v33[1] = v35;
          v36 = *v32;
          *(_QWORD *)(v36 + 8) = v33;
          *v33 = v36;
          *v32 = (uint64_t)v33;
          v33[1] = (uint64_t)v32;
        }
      }
LABEL_39:
      if (*((_QWORD *)this + 4))
      {
        v29 = *((_QWORD *)this + 3);
        *(Timestamp *)(v29 + 24) = a2;
        *(_WORD *)(v29 + 32) = *((_WORD *)var1 + 24);
        v30 = *(_OWORD *)(var1 + 14);
        *(_OWORD *)(v29 + 49) = *(_OWORD *)((char *)var1 + 65);
        *(_OWORD *)(v29 + 40) = v30;
        v31 = *((_QWORD *)var1 + 11);
        *(_BYTE *)(v29 + 80) = *((_BYTE *)var1 + 96);
        *(_QWORD *)(v29 + 72) = v31;
        *(_DWORD *)(v29 + 88) = var1[8];
        v4 += 4;
        if (v4 == v13)
          goto LABEL_45;
        continue;
      }
      break;
    }
LABEL_89:
    __break(1u);
LABEL_90:
    {
      v64 = (_QWORD *)operator new();
      v64[1] = 0;
      v64[2] = 0;
      *v64 = 0;
      *(_QWORD *)(v3 + 1936) = v64;
    }
LABEL_5:
    var1 = **(unsigned int ***)(v3 + 1936);
    if (*(_QWORD *)v9)
    {
      v66 = *(unsigned int **)(*(_QWORD *)v9 + 16);
      if (var1 == v66)
        break;
      goto LABEL_10;
    }
    v11 = atomic_load(v4);
    {
      v65 = (_QWORD *)operator new();
      v65[1] = 0;
      v65[2] = 0;
      *v65 = 0;
      *(_QWORD *)(v3 + 1936) = v65;
    }
    v66 = *(unsigned int **)(*(_QWORD *)(v3 + 1936) + 8);
  }
  while (var1 != v66);
LABEL_78:
  v59 = a2.var0 - 10000000;
  if (a2.var0 == 0x8000000000000000)
    v59 = 0x8000000000000000;
  if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v9 = v59;
  if (*((_QWORD *)this + 4))
  {
    a2.var0 = (int64_t)this + 40;
    do
    {
      v60 = *((_QWORD *)this + 2);
      if (*(_QWORD *)(v60 + 24) >= v9)
        break;
      std::__hash_table<std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,std::__unordered_map_hasher<webrtc::SourceTracker::SourceKey,std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,webrtc::SourceTracker::SourceKeyHasher,webrtc::SourceTracker::SourceKeyComparator,true>,std::__unordered_map_equal<webrtc::SourceTracker::SourceKey,std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,webrtc::SourceTracker::SourceKeyComparator,webrtc::SourceTracker::SourceKeyHasher,true>,std::allocator<std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>>>::__erase_unique<webrtc::SourceTracker::SourceKey>((uint64_t *)this + 5, (int *)(v60 + 16));
      v61 = *((_QWORD *)this + 4);
      if (!v61)
        goto LABEL_89;
      v62 = (uint64_t *)*((_QWORD *)this + 2);
      v63 = *v62;
      *(_QWORD *)(v63 + 8) = v62[1];
      *(_QWORD *)v62[1] = v63;
      *((_QWORD *)this + 4) = v61 - 1;
      operator delete(v62);
    }
    while (*((_QWORD *)this + 4));
  }
}

void webrtc::SourceTracker::GetSources(webrtc::SourceTracker *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t i;
  __int16 v12;
  _OWORD v13[2];
  uint64_t v14;
  char v15;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  v5 = v4 - 10000000;
  if (v4 == 0x8000000000000000)
    v5 = 0x8000000000000000;
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v6 = v5;
  v7 = (char *)this + 16;
  if (*((_QWORD *)this + 4))
  {
    while (*(_QWORD *)(*(_QWORD *)v7 + 24) < v6)
    {
      std::__hash_table<std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,std::__unordered_map_hasher<webrtc::SourceTracker::SourceKey,std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,webrtc::SourceTracker::SourceKeyHasher,webrtc::SourceTracker::SourceKeyComparator,true>,std::__unordered_map_equal<webrtc::SourceTracker::SourceKey,std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,webrtc::SourceTracker::SourceKeyComparator,webrtc::SourceTracker::SourceKeyHasher,true>,std::allocator<std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>>>::__erase_unique<webrtc::SourceTracker::SourceKey>((uint64_t *)this + 5, (int *)(*(_QWORD *)v7 + 16));
      v8 = *((_QWORD *)this + 4);
      if (!v8)
      {
        __break(1u);
        return;
      }
      v9 = (uint64_t *)*((_QWORD *)this + 2);
      v10 = *v9;
      *(_QWORD *)(v10 + 8) = v9[1];
      *(_QWORD *)v9[1] = v10;
      *((_QWORD *)this + 4) = v8 - 1;
      operator delete(v9);
      if (!*((_QWORD *)this + 4))
        break;
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  for (i = *((_QWORD *)this + 3); (char *)i != v7; i = *(_QWORD *)(i + 8))
  {
    v12 = *(_WORD *)(i + 32);
    v13[0] = *(_OWORD *)(i + 40);
    *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)(i + 49);
    v14 = *(_QWORD *)(i + 72);
    v15 = *(_BYTE *)(i + 80);
    std::vector<webrtc::RtpSource>::emplace_back<webrtc::Timestamp const&,unsigned int const&,webrtc::RtpSourceType const&,unsigned int const&,webrtc::RtpSource::Extensions>((void **)a2, (_QWORD *)(i + 24), (int *)(i + 20), (int *)(i + 16), (int *)(i + 88), (__int128 *)&v12);
  }
}

char *std::vector<webrtc::RtpSource>::emplace_back<webrtc::Timestamp const&,unsigned int const&,webrtc::RtpSourceType const&,unsigned int const&,webrtc::RtpSource::Extensions>(void **a1, _QWORD *a2, int *a3, int *a4, int *a5, __int128 *a6)
{
  unint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v13 = (char *)a1[1];
  v12 = (unint64_t)a1[2];
  if ((unint64_t)v13 < v12)
  {
    if (v13)
    {
      v14 = *a3;
      v15 = *a4;
      v16 = *a5;
      *(_QWORD *)v13 = *a2;
      *((_DWORD *)v13 + 2) = v14;
      *((_DWORD *)v13 + 3) = v15;
      v17 = *a6;
      v18 = a6[1];
      v19 = a6[2];
      *((_QWORD *)v13 + 8) = *((_QWORD *)a6 + 6);
      *((_OWORD *)v13 + 2) = v18;
      *((_OWORD *)v13 + 3) = v19;
      *((_OWORD *)v13 + 1) = v17;
      *((_DWORD *)v13 + 18) = v16;
      v20 = v13 + 80;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v21 = (char *)*a1;
  v22 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - (_BYTE *)*a1) >> 4);
  v23 = v22 + 1;
  if (v22 + 1 > 0x333333333333333)
    goto LABEL_19;
  v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (_QWORD)v21) >> 4);
  if (2 * v24 > v23)
    v23 = 2 * v24;
  if (v24 >= 0x199999999999999)
    v25 = 0x333333333333333;
  else
    v25 = v23;
  if (!v25)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    abort();
  }
  if (v25 > 0x333333333333333)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v26 = 80 * v25;
  v27 = (char *)operator new(80 * v25);
  v28 = *a3;
  v29 = &v27[80 * v22];
  v30 = *a4;
  v31 = *a5;
  *(_QWORD *)v29 = *a2;
  *((_DWORD *)v29 + 2) = v28;
  *((_DWORD *)v29 + 3) = v30;
  v32 = a6[1];
  *((_OWORD *)v29 + 1) = *a6;
  *((_OWORD *)v29 + 2) = v32;
  *((_OWORD *)v29 + 3) = a6[2];
  *((_QWORD *)v29 + 8) = *((_QWORD *)a6 + 6);
  v20 = v29 + 80;
  *((_DWORD *)v29 + 18) = v31;
  if (v13 != v21)
  {
    do
    {
      *((_OWORD *)v29 - 5) = *((_OWORD *)v13 - 5);
      v33 = *((_OWORD *)v13 - 4);
      v34 = *((_OWORD *)v13 - 3);
      v35 = *((_OWORD *)v13 - 2);
      *(_OWORD *)(v29 - 20) = *(_OWORD *)(v13 - 20);
      *((_OWORD *)v29 - 3) = v34;
      *((_OWORD *)v29 - 2) = v35;
      *((_OWORD *)v29 - 4) = v33;
      v29 -= 80;
      v13 -= 80;
    }
    while (v13 != v21);
    v13 = v21;
  }
  *a1 = v29;
  a1[1] = v20;
  a1[2] = &v27[v26];
  if (v13)
    operator delete(v13);
LABEL_17:
  a1[1] = v20;
  return v20 - 80;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::SourceTracker::OnFrameDelivered(webrtc::RtpPacketInfos)::$_1 &&>(webrtc::SourceTracker ***a1)
{
  Timestamp v1;

  v1.var0 = (int64_t)(*a1)[2];
  webrtc::SourceTracker::OnFrameDeliveredInternal(**a1, v1, (const RtpPacketInfos *)*a1 + 1);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::SourceTracker::OnFrameDelivered(webrtc::RtpPacketInfos)::$_1>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        do
        {
          v5 = __ldaxr((unsigned int *)v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, (unsigned int *)v4));
        if (!v6)
        {
          v7 = *(_QWORD *)(v4 + 8);
          if (v7)
          {
            v8 = *(_QWORD *)(v4 + 16);
            v9 = *(void **)(v4 + 8);
            if (v8 != v7)
            {
              do
              {
                v10 = *(void **)(v8 - 96);
                if (v10)
                {
                  *(_QWORD *)(v8 - 88) = v10;
                  operator delete(v10);
                }
                v8 -= 104;
              }
              while (v8 != v7);
              v9 = *(void **)(v4 + 8);
            }
            *(_QWORD *)(v4 + 16) = v7;
            operator delete(v9);
          }
          MEMORY[0x20BD0ADEC](v4, 0x1020C40E72D6CFBLL);
        }
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,std::__unordered_map_hasher<webrtc::SourceTracker::SourceKey,std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,webrtc::SourceTracker::SourceKeyHasher,webrtc::SourceTracker::SourceKeyComparator,true>,std::__unordered_map_equal<webrtc::SourceTracker::SourceKey,std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,webrtc::SourceTracker::SourceKeyComparator,webrtc::SourceTracker::SourceKeyHasher,true>,std::allocator<std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>>>::__emplace_unique_key_args<webrtc::SourceTracker::SourceKey,webrtc::SourceTracker::SourceKey const&,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>(float *a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  float v20;
  float v21;
  _QWORD *v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  _QWORD *i;
  size_t v37;
  uint64_t v38;
  size_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  size_t v45;
  size_t v46;
  _QWORD *v47;
  unint64_t v48;

  v9 = 0x99B75E94FD069879 * a3;
  v10 = v9 + a2;
  v11 = *((_QWORD *)a1 + 1);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v5 = v9 + a2;
      if (v10 >= v11)
        v5 = v10 % v11;
    }
    else
    {
      v5 = (v11 - 1) & v10;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v5);
    if (v13)
    {
      v14 = *v13;
      if (v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v14[1];
            if (v18 == v10)
            {
              if (*((_DWORD *)v14 + 4) == a2 && *((_DWORD *)v14 + 5) == a3)
                return;
            }
            else if ((v18 & (v11 - 1)) != v5)
            {
              goto LABEL_28;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_28;
          }
        }
        do
        {
          v16 = v14[1];
          if (v16 == v10)
          {
            if (*((_DWORD *)v14 + 4) == a2 && *((_DWORD *)v14 + 5) == a3)
              return;
          }
          else
          {
            if (v16 >= v11)
              v16 %= v11;
            if (v16 != v5)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_28:
  v19 = operator new(0x20uLL);
  *v19 = 0;
  v19[1] = v10;
  v19[2] = a4;
  v19[3] = a5;
  v20 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v21 = a1[8];
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *((_QWORD *)a1 + 1);
    }
    if (prime > v11)
      goto LABEL_42;
    if (prime < v11)
    {
      v39 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v11 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v46 = std::__next_prime(v39);
        if (prime <= v46)
          prime = v46;
        if (prime >= v11)
        {
LABEL_65:
          v11 = *((_QWORD *)a1 + 1);
          v42 = v11 - 1;
          if ((v11 & (v11 - 1)) == 0)
            goto LABEL_92;
          goto LABEL_79;
        }
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
        if (prime <= v39)
          prime = v39;
        if (prime >= v11)
          goto LABEL_65;
      }
      if (prime)
      {
LABEL_42:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v28 = operator new(8 * prime);
        v29 = *(_QWORD **)a1;
        *(_QWORD *)a1 = v28;
        if (v29)
          operator delete(v29);
        v30 = 0;
        *((_QWORD *)a1 + 1) = prime;
        do
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30++) = 0;
        while (prime != v30);
        v32 = (uint64_t *)(a1 + 4);
        v31 = (_QWORD *)*((_QWORD *)a1 + 2);
        if (!v31)
          goto LABEL_78;
        v33 = v31[1];
        v34 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v35 = v33 & v34;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v32;
          for (i = (_QWORD *)*v31; *v31; i = (_QWORD *)*v31)
          {
            v37 = i[1] & v34;
            if (v37 == v35)
            {
              v31 = i;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
            {
              *v31 = *i;
              v38 = 8 * v37;
              *i = **(_QWORD **)(*(_QWORD *)a1 + v38);
              **(_QWORD **)(*(_QWORD *)a1 + v38) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v31;
              v31 = i;
              v35 = v37;
            }
          }
          goto LABEL_78;
        }
        if (v33 >= prime)
          v33 %= prime;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v32;
        v43 = (_QWORD *)*v31;
        if (!*v31)
        {
LABEL_78:
          v11 = prime;
          v42 = prime - 1;
          if ((prime & (prime - 1)) != 0)
            goto LABEL_79;
LABEL_92:
          v5 = v42 & v10;
          v22 = *(_QWORD **)a1;
          v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v10));
          if (v23)
            goto LABEL_31;
          goto LABEL_93;
        }
        while (1)
        {
          v45 = v43[1];
          if (v45 >= prime)
            v45 %= prime;
          if (v45 == v33)
            goto LABEL_72;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v45))
          {
            *v31 = *v43;
            v44 = 8 * v45;
            *v43 = **(_QWORD **)(*(_QWORD *)a1 + v44);
            **(_QWORD **)(*(_QWORD *)a1 + v44) = v43;
            v43 = v31;
LABEL_72:
            v31 = v43;
            v43 = (_QWORD *)*v43;
            if (!v43)
              goto LABEL_78;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v31;
            v31 = v43;
            v43 = (_QWORD *)*v43;
            v33 = v45;
            if (!v43)
              goto LABEL_78;
          }
        }
      }
      v47 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v47)
        operator delete(v47);
      v11 = 0;
      *((_QWORD *)a1 + 1) = 0;
    }
    v42 = v11 - 1;
    if ((v11 & (v11 - 1)) == 0)
      goto LABEL_92;
LABEL_79:
    if (v10 >= v11)
    {
      v5 = v10 % v11;
      v22 = *(_QWORD **)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
      if (v23)
        goto LABEL_31;
    }
    else
    {
      v5 = v10;
      v22 = *(_QWORD **)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
      if (v23)
        goto LABEL_31;
    }
    goto LABEL_93;
  }
  v22 = *(_QWORD **)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
LABEL_31:
    *v19 = *v23;
LABEL_99:
    *v23 = v19;
    goto LABEL_100;
  }
LABEL_93:
  *v19 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v19;
  v22[v5] = a1 + 4;
  if (*v19)
  {
    v48 = *(_QWORD *)(*v19 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v48 >= v11)
        v48 %= v11;
    }
    else
    {
      v48 &= v11 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v48);
    goto LABEL_99;
  }
LABEL_100:
  ++*((_QWORD *)a1 + 3);
}

uint64_t std::__hash_table<std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,std::__unordered_map_hasher<webrtc::SourceTracker::SourceKey,std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,webrtc::SourceTracker::SourceKeyHasher,webrtc::SourceTracker::SourceKeyComparator,true>,std::__unordered_map_equal<webrtc::SourceTracker::SourceKey,std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>,webrtc::SourceTracker::SourceKeyComparator,webrtc::SourceTracker::SourceKeyHasher,true>,std::allocator<std::__hash_value_type<webrtc::SourceTracker::SourceKey,std::__list_iterator<std::pair<webrtc::SourceTracker::SourceKey const,webrtc::SourceTracker::SourceEntry>,void *>>>>::__erase_unique<webrtc::SourceTracker::SourceKey>(uint64_t *a1, int *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v15;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1];
  v4 = *a2;
  v5 = v4 - 0x6648A16B02F96787 * v3;
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4 - 0x6648A16B02F96787 * v3;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *a1;
  v9 = *(void ***)(*a1 + 8 * v7);
  if (!v9)
    return 0;
  v10 = (uint64_t *)*v9;
  if (!v10)
    return 0;
  v11 = *(_QWORD *)&v2 - 1;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v13 = v10[1];
      if (v13 == v5)
      {
        if (*((_DWORD *)v10 + 4) == (_DWORD)v4 && *((_DWORD *)v10 + 5) == (_DWORD)v3)
          goto LABEL_28;
      }
      else if ((v13 & v11) != v7)
      {
        return 0;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        return 0;
    }
  }
  while (1)
  {
    v15 = v10[1];
    if (v15 == v5)
      break;
    if (v15 >= *(_QWORD *)&v2)
      v15 %= *(_QWORD *)&v2;
    if (v15 != v7)
      return 0;
LABEL_22:
    v10 = (uint64_t *)*v10;
    if (!v10)
      return 0;
  }
  if (*((_DWORD *)v10 + 4) != (_DWORD)v4 || *((_DWORD *)v10 + 5) != (_DWORD)v3)
    goto LABEL_22;
LABEL_28:
  if (v6.u32[0] > 1uLL)
  {
    if (v5 >= *(_QWORD *)&v2)
      v5 %= *(_QWORD *)&v2;
  }
  else
  {
    v5 &= v11;
  }
  v17 = *(uint64_t **)(v8 + 8 * v5);
  do
  {
    v18 = v17;
    v17 = (uint64_t *)*v17;
  }
  while (v17 != v10);
  if (v18 == a1 + 2)
    goto LABEL_45;
  v19 = v18[1];
  if (v6.u32[0] > 1uLL)
  {
    if (v19 >= *(_QWORD *)&v2)
      v19 %= *(_QWORD *)&v2;
  }
  else
  {
    v19 &= v11;
  }
  if (v19 != v5)
  {
LABEL_45:
    if (!*v10)
      goto LABEL_46;
    v20 = *(_QWORD *)(*v10 + 8);
    if (v6.u32[0] > 1uLL)
    {
      if (v20 >= *(_QWORD *)&v2)
        v20 %= *(_QWORD *)&v2;
    }
    else
    {
      v20 &= v11;
    }
    if (v20 != v5)
LABEL_46:
      *(_QWORD *)(v8 + 8 * v5) = 0;
  }
  v21 = *v10;
  if (*v10)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if (v6.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&v2)
        v22 %= *(_QWORD *)&v2;
    }
    else
    {
      v22 &= v11;
    }
    if (v22 != v5)
    {
      *(_QWORD *)(*a1 + 8 * v22) = v18;
      v21 = *v10;
    }
  }
  *v18 = v21;
  *v10 = 0;
  --a1[3];
  operator delete(v10);
  return 1;
}

webrtc::rnn_vad::SpectralFeaturesExtractor *webrtc::rnn_vad::SpectralFeaturesExtractor::SpectralFeaturesExtractor(webrtc::rnn_vad::SpectralFeaturesExtractor *this)
{
  uint64_t v2;
  int32x4_t v3;
  int64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int32x4_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  webrtc::rnn_vad *v32;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t __x;
  float64x2_t __xa;
  long double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  int32x4_t v45;

  bzero(this, 0x3C0uLL);
  v2 = 0;
  v3 = (int32x4_t)xmmword_208F071C0;
  __asm { FMOV            V1.2D, #0.5 }
  v36 = _Q1;
  v42 = (float64x2_t)vdupq_n_s64(0x3FF921FB54442D18uLL);
  v34 = (float64x2_t)vdupq_n_s64(0x3F61111120000000uLL);
  v35 = (float64x2_t)vdupq_n_s64(0x406E000000000000uLL);
  do
  {
    v45 = v3;
    v9.i64[0] = v3.i32[2];
    v9.i64[1] = v3.i32[3];
    v10 = vcvtq_f64_s64(v9);
    v9.i64[0] = v45.i32[0];
    v9.i64[1] = v45.i32[1];
    v43 = vdivq_f64(vmulq_f64(vaddq_f64(vcvtq_f64_s64(v9), v36), v42), v35);
    __x = vdivq_f64(vmulq_f64(vaddq_f64(v10, v36), v42), v35);
    v39 = sin(__x.f64[1]);
    v11.f64[0] = sin(__x.f64[0]);
    v11.f64[1] = v39;
    v40 = v11;
    __x.f64[0] = sin(v43.f64[1]);
    v12.f64[0] = sin(v43.f64[0]);
    v12.f64[1] = __x.f64[0];
    v44 = vmulq_f64(v40, vmulq_f64(v40, v42));
    __xa = vmulq_f64(v12, vmulq_f64(v12, v42));
    v40.f64[0] = sin(__xa.f64[1]);
    v13.f64[0] = sin(__xa.f64[0]);
    v13.f64[1] = v40.f64[0];
    v41 = v13;
    __xa.f64[0] = sin(v44.f64[1]);
    v14.f64[0] = sin(v44.f64[0]);
    v14.f64[1] = __xa.f64[0];
    *(float32x4_t *)((char *)this + v2) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v41, v34)), vmulq_f64(v14, v34));
    v15.i64[0] = 0x400000004;
    v15.i64[1] = 0x400000004;
    v3 = vaddq_s32(v45, v15);
    v2 += 16;
  }
  while (v2 != 960);
  *((_QWORD *)this + 120) = 480;
  *((_DWORD *)this + 242) = 0;
  *((_QWORD *)this + 122) = pffft_new_setup(480, 0);
  v16 = (unint64_t)malloc_type_malloc(4 * (*((_QWORD *)this + 120) << (*((_DWORD *)this + 242) != 0)) + 64, 0x9F4221E6uLL);
  if (v16)
  {
    v17 = (v16 & 0xFFFFFFFFFFFFFFC0) + 64;
    *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFC0) + 0x38) = v16;
  }
  else
  {
    v17 = 0;
  }
  *((_QWORD *)this + 123) = v17;
  v18 = (_QWORD *)operator new();
  v19 = *((_QWORD *)this + 120) << (*((_DWORD *)this + 242) != 0);
  *v18 = v19;
  v20 = (unint64_t)malloc_type_malloc(4 * v19 + 64, 0x9F4221E6uLL);
  if (v20)
  {
    v21 = (v20 & 0xFFFFFFFFFFFFFFC0) + 64;
    *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFC0) + 0x38) = v20;
  }
  else
  {
    v21 = 0;
  }
  v18[1] = v21;
  *((_QWORD *)this + 124) = v18;
  v22 = (_QWORD *)operator new();
  v23 = *((_QWORD *)this + 120) << (*((_DWORD *)this + 242) != 0);
  *v22 = v23;
  v24 = (unint64_t)malloc_type_malloc(4 * v23 + 64, 0x9F4221E6uLL);
  if (v24)
  {
    v25 = (v24 & 0xFFFFFFFFFFFFFFC0) + 64;
    *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFC0) + 0x38) = v24;
  }
  else
  {
    v25 = 0;
  }
  v22[1] = v25;
  *((_QWORD *)this + 125) = v22;
  v26 = (_QWORD *)operator new();
  v27 = *((_QWORD *)this + 120) << (*((_DWORD *)this + 242) != 0);
  *v26 = v27;
  v28 = (unint64_t)malloc_type_malloc(4 * v27 + 64, 0x9F4221E6uLL);
  if (v28)
  {
    v29 = (v28 & 0xFFFFFFFFFFFFFFC0) + 64;
    *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFC0) + 0x38) = v28;
  }
  else
  {
    v29 = 0;
  }
  v26[1] = v29;
  *((_QWORD *)this + 126) = v26;
  v30 = (char *)operator new(0x3C0uLL);
  *((_QWORD *)this + 127) = v30;
  v31 = v30 + 960;
  *((_QWORD *)this + 129) = v30 + 960;
  *((_QWORD *)this + 128) = v31;
  webrtc::rnn_vad::ComputeDctTable(v32, (uint64_t)this + 1280);
  bzero((char *)this + 3216, 0x388uLL);
  return this;
}

void webrtc::rnn_vad::SpectralFeaturesExtractor::~SpectralFeaturesExtractor(webrtc::rnn_vad::SpectralFeaturesExtractor *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (void *)*((_QWORD *)this + 127);
  if (v2)
  {
    *((_QWORD *)this + 128) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      free(*(void **)(v4 - 8));
    MEMORY[0x20BD0ADEC](v3, 0x10C0C4003E0BC0ALL);
  }
  v5 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      free(*(void **)(v6 - 8));
    MEMORY[0x20BD0ADEC](v5, 0x10C0C4003E0BC0ALL);
  }
  v7 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      free(*(void **)(v8 - 8));
    MEMORY[0x20BD0ADEC](v7, 0x10C0C4003E0BC0ALL);
  }
  v9 = (_QWORD *)*((_QWORD *)this + 122);
  v10 = v9[9];
  if (v10)
    free(*(void **)(v10 - 8));
  free(v9);
  v11 = *((_QWORD *)this + 123);
  if (v11)
    free(*(void **)(v11 - 8));
}

BOOL webrtc::rnn_vad::SpectralFeaturesExtractor::CheckSilenceComputeFeatures(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, float *a6, float *a7, float32x2_t *a8, float *a9)
{
  float v9;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  float *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  float32x4_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  float *v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  float *f32;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  float *v57;
  int v58;
  unint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float32x4_t v75;
  float v76;
  float v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float32x4_t v92;
  __int8 *v93;
  uint64_t v94;
  __int32 v95;
  __int32 v96;
  __int32 v97;
  __int32 v98;
  float *v99;
  float v100;
  uint64_t v101;
  int v102;
  __int32 v103;
  __int32 v104;
  __int32 v105;
  unsigned int v106;
  int32x2_t v107;
  int32x2_t v108;
  int32x2_t v109;
  int v110;
  int v111;
  float *v112;
  float *v113;
  float *v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t *v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  float *v122;
  int v123;
  unint64_t v124;
  float v125;
  float v126;
  float v127;
  uint64_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32_t v131;
  float32_t v132;
  float32_t v133;
  float32_t v134;
  float32_t v135;
  float32_t v136;
  float32_t v137;
  float32_t v138;
  float32_t v139;
  float32_t v140;
  float32_t v141;
  float32_t v142;
  float32_t v143;
  float32_t v144;
  float32_t v145;
  float32_t v146;
  float32_t v147;
  float32_t v148;
  float32_t v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float *v195;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  _DWORD v219[9];

  v16 = 0;
  v17 = (float32x4_t *)((char *)a1 + 1368);
  v18 = a1[62].i64[1];
  v19 = *(_QWORD *)(a1[62].i64[0] + 8);
  if (*(_QWORD *)a1[62].i64[0])
    v20 = *(_QWORD *)(a1[62].i64[0] + 8);
  else
    v20 = 0;
  for (i = 1916; i != 956; i -= 4)
  {
    *(float *)(v20 + v16 * 4) = *(float *)(a2 + v16 * 4) * a1->f32[v16];
    *(float *)(v20 + i) = *(float *)(a2 + i) * a1->f32[v16++];
  }
  pffft_transform_internal(a1[61].i64[0], v19, *(float32x4_t **)(v18 + 8), a1[61].i64[1], 0, 1);
  v23 = 0;
  v24 = 0;
  v25 = *(_QWORD *)(v18 + 8);
  if (!*(_QWORD *)v18)
    v25 = 0;
  *(_DWORD *)(v25 + 4) = 0;
  v26 = a1 + 65;
  if (*(_QWORD *)a1[62].i64[1])
    v27 = *(_QWORD *)(a1[62].i64[1] + 8);
  else
    v27 = 0;
  a1[65].i32[0] = 0;
  do
  {
    v28 = v23++;
    v26->i32[v23] = 0;
    v29 = __const__ZNK6webrtc7rnn_vad18SpectralCorrelator23ComputeCrossCorrelationEN3rtc9ArrayViewIKfLln4711EEES5_NS3_IfLl20EEE_kOpusScaleNumBins24kHz20ms[v28];
    if (v29 >= 1)
    {
      v30 = a1[63].i64[1];
      v31 = (a1[64].i64[0] - v30) >> 2;
      v32 = (float *)(v30 + 4 * v24);
      v33 = 2 * v24;
      v34 = v31 >= v24;
      v35 = v31 - v24;
      if (!v34)
        v35 = 0;
      v36 = 0.0;
      while (v35)
      {
        v37 = *(float *)(v27 + 4 * (v33 + 1));
        v38 = (float)(v37 * v37) + (float)(*(float *)(v27 + 4 * v33) * *(float *)(v27 + 4 * v33));
        v39 = *v32++;
        v26->f32[v28] = v26->f32[v28] + (float)(v38 - (float)(v39 * v38));
        v36 = v36 + (float)(v39 * v38);
        v26->f32[v23] = v36;
        ++v24;
        v33 += 2;
        --v35;
        if (!--v29)
          goto LABEL_12;
      }
      goto LABEL_88;
    }
LABEL_12:
    ;
  }
  while (v23 != 19);
  v40 = a1[65].f32[0] + a1[65].f32[0];
  a1[65].f32[0] = v40;
  v9 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v40 + 0.0) + a1[65].f32[1]) + a1[65].f32[2]) + a1[65].f32[3]) + a1[66].f32[0]) + a1[66].f32[1]) + a1[66].f32[2]) + a1[66].f32[3])
                                                                                             + a1[67].f32[0])
                                                                                     + a1[67].f32[1])
                                                                             + a1[67].f32[2])
                                                                     + a1[67].f32[3])
                                                             + a1[68].f32[0])
                                                     + a1[68].f32[1])
                                             + a1[68].f32[2])
                                     + a1[68].f32[3])
                             + a1[69].f32[0])
                     + a1[69].f32[1])
             + a1[69].f32[2])
     + a1[69].f32[3];
  if (v9 < 0.04)
    return v9 < 0.04;
  v195 = a7;
  v41 = 0;
  v42 = a1[63].i64[0];
  v43 = *(_QWORD *)(a1[62].i64[0] + 8);
  if (*(_QWORD *)a1[62].i64[0])
    v44 = *(_QWORD *)(a1[62].i64[0] + 8);
  else
    v44 = 0;
  for (j = 1916; j != 956; j -= 4)
  {
    *(float *)(v44 + v41 * 4) = *(float *)(a3 + v41 * 4) * a1->f32[v41];
    *(float *)(v44 + j) = *(float *)(a3 + j) * a1->f32[v41++];
  }
  pffft_transform_internal(a1[61].i64[0], v43, *(float32x4_t **)(v42 + 8), a1[61].i64[1], 0, 1);
  v46 = 0;
  v47 = 0;
  v48 = *(_QWORD *)(v42 + 8);
  if (!*(_QWORD *)v42)
    v48 = 0;
  *(_DWORD *)(v48 + 4) = 0;
  v49 = (uint64_t *)a1[63].i64[0];
  v51 = *v49;
  v50 = v49[1];
  f32 = a1[70].f32;
  if (!v51)
    v50 = 0;
  a1[70].i32[0] = 0;
  while (1)
  {
    v53 = v46++;
    f32[v46] = 0.0;
    v54 = __const__ZNK6webrtc7rnn_vad18SpectralCorrelator23ComputeCrossCorrelationEN3rtc9ArrayViewIKfLln4711EEES5_NS3_IfLl20EEE_kOpusScaleNumBins24kHz20ms[v53];
    if (v54 >= 1)
      break;
LABEL_31:
    if (v46 == 19)
    {
      v64 = 0;
      *f32 = *f32 + *f32;
      v65 = -2.0;
      v66 = -2.0;
      do
      {
        v67 = log10f(v26->f32[v64] + 0.01);
        if ((float)(v65 + -1.5) >= v67)
          v67 = v65 + -1.5;
        if ((float)(v66 + -7.0) >= v67)
          v67 = v66 + -7.0;
        if (v66 < v67)
          v66 = v67;
        if ((float)(v65 + -1.5) >= v67)
          v65 = v65 + -1.5;
        else
          v65 = v67;
        *(float *)((char *)&v197 + v64 * 4) = v67;
        ++v64;
      }
      while (v64 != 20);
      v68 = 0;
      v69 = v66 + -7.0;
      v70 = v65 + -1.5;
      if ((float)(v65 + -1.5) >= -2.0)
        v71 = v65 + -1.5;
      else
        v71 = -2.0;
      if (v69 < v71)
        v69 = v71;
      if (v66 >= v69)
        v72 = v66;
      else
        v72 = v69;
      if (v70 < v69)
        v70 = v69;
      v73 = v72 + -7.0;
      v74 = v70 + -1.5;
      if ((float)(v70 + -1.5) < -2.0)
        v74 = -2.0;
      if (v73 < v74)
        v73 = v74;
      v75 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(
                                                    vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, a1[81], v197), v17[1], v198),
                                                    a1[92],
                                                    v199),
                                                  v17[12],
                                                  v200),
                                                a1[103],
                                                v201),
                                              v17[23],
                                              v202),
                                            a1[114],
                                            v203),
                                          v17[34],
                                          v204),
                                        a1[125],
                                        v205),
                                      v17[45],
                                      v206),
                                    a1[136],
                                    v207),
                                  v17[56],
                                  v208),
                                a1[147],
                                v209),
                              v17[67],
                              v210),
                            a1[158],
                            v211),
                          v17[78],
                          v212),
                        a1[169],
                        v213),
                      v17[89],
                      v214),
                    a1[180],
                    v215),
                  v17[100],
                  v216),
                a1[191],
                v69),
              v17[111],
              v73);
      v76 = (float)((float)((float)((float)((float)((float)((float)((float)(v197 * a1[85].f32[0]) + 0.0)
                                                          + (float)(v198 * a1[90].f32[2]))
                                                  + (float)(v199 * a1[96].f32[0]))
                                          + (float)(v200 * a1[101].f32[2]))
                                  + (float)(v201 * a1[107].f32[0]))
                          + (float)(v202 * a1[112].f32[2]))
                  + (float)(v203 * a1[118].f32[0]))
          + (float)(v204 * a1[123].f32[2]);
      v77 = (float)((float)((float)((float)((float)((float)((float)((float)(v197 * a1[85].f32[1]) + 0.0)
                                                          + (float)(v198 * a1[90].f32[3]))
                                                  + (float)(v199 * a1[96].f32[1]))
                                          + (float)(v200 * a1[101].f32[3]))
                                  + (float)(v201 * a1[107].f32[1]))
                          + (float)(v202 * a1[112].f32[3]))
                  + (float)(v203 * a1[118].f32[1]))
          + (float)(v204 * a1[123].f32[3]);
      v78 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(
                                                    vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, a1[82], v197), v17[2], v198),
                                                    a1[93],
                                                    v199),
                                                  v17[13],
                                                  v200),
                                                a1[104],
                                                v201),
                                              v17[24],
                                              v202),
                                            a1[115],
                                            v203),
                                          v17[35],
                                          v204),
                                        a1[126],
                                        v205),
                                      v17[46],
                                      v206),
                                    a1[137],
                                    v207),
                                  v17[57],
                                  v208),
                                a1[148],
                                v209),
                              v17[68],
                              v210),
                            a1[159],
                            v211),
                          v17[79],
                          v212),
                        a1[170],
                        v213),
                      v17[90],
                      v214),
                    a1[181],
                    v215),
                  v17[101],
                  v216),
                a1[192],
                v69),
              v17[112],
              v73);
      v79 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(
                                                    vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, a1[83], v197), v17[3], v198),
                                                    a1[94],
                                                    v199),
                                                  v17[14],
                                                  v200),
                                                a1[105],
                                                v201),
                                              v17[25],
                                              v202),
                                            a1[116],
                                            v203),
                                          v17[36],
                                          v204),
                                        a1[127],
                                        v205),
                                      v17[47],
                                      v206),
                                    a1[138],
                                    v207),
                                  v17[58],
                                  v208),
                                a1[149],
                                v209),
                              v17[69],
                              v210),
                            a1[160],
                            v211),
                          v17[80],
                          v212),
                        a1[171],
                        v213),
                      v17[91],
                      v214),
                    a1[182],
                    v215),
                  v17[102],
                  v216),
                a1[193],
                v69),
              v17[113],
              v73);
      v80 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(
                                                    vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, a1[84], v197), v17[4], v198),
                                                    a1[95],
                                                    v199),
                                                  v17[15],
                                                  v200),
                                                a1[106],
                                                v201),
                                              v17[26],
                                              v202),
                                            a1[117],
                                            v203),
                                          v17[37],
                                          v204),
                                        a1[128],
                                        v205),
                                      v17[48],
                                      v206),
                                    a1[139],
                                    v207),
                                  v17[59],
                                  v208),
                                a1[150],
                                v209),
                              v17[70],
                              v210),
                            a1[161],
                            v211),
                          v17[81],
                          v212),
                        a1[172],
                        v213),
                      v17[92],
                      v214),
                    a1[183],
                    v215),
                  v17[103],
                  v216),
                a1[194],
                v69),
              v17[114],
              v73);
      v81 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(
                                                    vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, a1[80], v197), *v17, v198),
                                                    a1[91],
                                                    v199),
                                                  v17[11],
                                                  v200),
                                                a1[102],
                                                v201),
                                              v17[22],
                                              v202),
                                            a1[113],
                                            v203),
                                          v17[33],
                                          v204),
                                        a1[124],
                                        v205),
                                      v17[44],
                                      v206),
                                    a1[135],
                                    v207),
                                  v17[55],
                                  v208),
                                a1[146],
                                v209),
                              v17[66],
                              v210),
                            a1[157],
                            v211),
                          v17[77],
                          v212),
                        a1[168],
                        v213),
                      v17[88],
                      v214),
                    a1[179],
                    v215),
                  v17[99],
                  v216),
                a1[190],
                v69),
              v17[110],
              v73);
      v82 = (float32x4_t)vdupq_n_s32(0x3E9A5FB2u);
      v217 = v69;
      v218 = v73;
      v83 = (int8x16_t)vmulq_f32(v75, v82);
      v84 = vmulq_f32(v78, v82);
      v85 = vmulq_f32(v79, v82);
      v86 = vmulq_f32(v80, v82);
      v92 = vmulq_f32(v81, v82);
      v87 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v76 + (float)(v205 * a1[129].f32[0])) + (float)(v206 * a1[134].f32[2])) + (float)(v207 * a1[140].f32[0]))
                                                                                                  + (float)(v208 * a1[145].f32[2]))
                                                                                          + (float)(v209 * a1[151].f32[0]))
                                                                                  + (float)(v210 * a1[156].f32[2]))
                                                                          + (float)(v211 * a1[162].f32[0]))
                                                                  + (float)(v212 * a1[167].f32[2]))
                                                          + (float)(v213 * a1[173].f32[0]))
                                                  + (float)(v214 * a1[178].f32[2]))
                                          + (float)(v215 * a1[184].f32[0]))
                                  + (float)(v216 * a1[189].f32[2]))
                          + (float)(v69 * a1[195].f32[0]))
                  + (float)(v73 * a1[200].f32[2]))
          * 0.30151;
      v88 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v77 + (float)(v205 * a1[129].f32[1])) + (float)(v206 * a1[134].f32[3]))
                                                                                                  + (float)(v207 * a1[140].f32[1]))
                                                                                          + (float)(v208 * a1[145].f32[3]))
                                                                                  + (float)(v209 * a1[151].f32[1]))
                                                                          + (float)(v210 * a1[156].f32[3]))
                                                                  + (float)(v211 * a1[162].f32[1]))
                                                          + (float)(v212 * a1[167].f32[3]))
                                                  + (float)(v213 * a1[173].f32[1]))
                                          + (float)(v214 * a1[178].f32[3]))
                                  + (float)(v215 * a1[184].f32[1]))
                          + (float)(v216 * a1[189].f32[3]))
                  + (float)(v69 * a1[195].f32[1]))
          + (float)(v73 * a1[200].f32[3]);
      v89 = v92.f32[0] + -12.0;
      v92.f32[0] = v92.f32[0] + -12.0;
      v90 = v88 * 0.30151;
      v91 = v92.f32[1] + -4.0;
      v92.f32[1] = v92.f32[1] + -4.0;
      v93 = &a1[201].i8[4];
      v94 = (uint64_t)&a1[201].i64[11 * a1[201].i32[0]] + 4;
      *(float32x4_t *)v94 = v92;
      *(int8x16_t *)(v94 + 16) = v83;
      *(float32x4_t *)(v94 + 32) = v84;
      *(float32x4_t *)(v94 + 48) = v85;
      *(float32x4_t *)(v94 + 64) = v86;
      *(float *)(v94 + 80) = v87;
      *(float *)(v94 + 84) = v90;
      v95 = a1[201].i32[0];
      if (v95 == 7)
        v96 = 0;
      else
        v96 = v95 + 1;
      a1[201].i32[0] = v96;
      v97 = v96 + 6;
      do
      {
        v98 = v97 - 8;
        if (v97 - 8 < 0)
          v98 = v97;
        v99 = (float *)&v93[88 * v98];
        v100 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v89 - *v99) * (float)(v89 - *v99)) + 0.0) + (float)((float)(v91 - v99[1]) * (float)(v91 - v99[1]))) + (float)((float)(v92.f32[2] - v99[2]) * (float)(v92.f32[2] - v99[2]))) + (float)((float)(v92.f32[3] - v99[3]) * (float)(v92.f32[3] - v99[3]))) + (float)((float)(*(float *)v83.i32 - v99[4]) * (float)(*(float *)v83.i32 - v99[4])))
                                                                                             + (float)((float)(*(float *)&v83.i32[1] - v99[5]) * (float)(*(float *)&v83.i32[1] - v99[5])))
                                                                                     + (float)((float)(*(float *)&v83.i32[2] - v99[6])
                                                                                             * (float)(*(float *)&v83.i32[2] - v99[6])))
                                                                             + (float)((float)(*(float *)&v83.i32[3]
                                                                                             - v99[7])
                                                                                     * (float)(*(float *)&v83.i32[3]
                                                                                             - v99[7])))
                                                                     + (float)((float)(v84.f32[0] - v99[8])
                                                                             * (float)(v84.f32[0] - v99[8])))
                                                             + (float)((float)(v84.f32[1] - v99[9])
                                                                     * (float)(v84.f32[1] - v99[9])))
                                                     + (float)((float)(v84.f32[2] - v99[10])
                                                             * (float)(v84.f32[2] - v99[10])))
                                             + (float)((float)(v84.f32[3] - v99[11]) * (float)(v84.f32[3] - v99[11])))
                                     + (float)((float)(v85.f32[0] - v99[12]) * (float)(v85.f32[0] - v99[12])))
                             + (float)((float)(v85.f32[1] - v99[13]) * (float)(v85.f32[1] - v99[13])))
                     + (float)((float)(v85.f32[2] - v99[14]) * (float)(v85.f32[2] - v99[14])))
             + (float)((float)(v85.f32[3] - v99[15]) * (float)(v85.f32[3] - v99[15]));
        *(float *)&v219[v68++] = (float)((float)((float)((float)((float)(v100
                                                                       + (float)((float)(v86.f32[0] - v99[16])
                                                                               * (float)(v86.f32[0] - v99[16])))
                                                               + (float)((float)(v86.f32[1] - v99[17])
                                                                       * (float)(v86.f32[1] - v99[17])))
                                                       + (float)((float)(v86.f32[2] - v99[18])
                                                               * (float)(v86.f32[2] - v99[18])))
                                               + (float)((float)(v86.f32[3] - v99[19]) * (float)(v86.f32[3] - v99[19])))
                                       + (float)((float)(v87 - v99[20]) * (float)(v87 - v99[20])))
                               + (float)((float)(v90 - v99[21]) * (float)(v90 - v99[21]));
        --v97;
      }
      while (v68 != 7);
      v192 = v84;
      v193 = v85;
      v194 = v86;
      memmove(&a1[245].i32[1], &a1[247].i32[1], 0xA4uLL);
      v101 = 0;
      v102 = 0;
      v103 = v219[1];
      a1[257].i32[1] = v219[0];
      a1[255].i32[2] = v103;
      v104 = v219[3];
      a1[253].i32[3] = v219[2];
      a1[252].i32[0] = v104;
      v105 = v219[5];
      a1[250].i32[1] = v219[4];
      a1[248].i32[2] = v105;
      a1[246].i32[3] = v219[6];
      *(_QWORD *)a4 = vextq_s8(v83, v83, 8uLL).u64[0];
      *(float32x4_t *)(a4 + 8) = v192;
      *(float32x4_t *)(a4 + 24) = v193;
      *(float32x4_t *)(a4 + 40) = v194;
      *(float *)(a4 + 56) = v87;
      *(float *)(a4 + 60) = v90;
      v106 = a1[201].u32[0];
      v107 = vdup_n_s32(v106);
      v108 = vadd_s32(v107, (int32x2_t)0xFFFFFFFEFFFFFFFFLL);
      v109 = vmul_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v108), (int8x8_t)vadd_s32(v107, (int32x2_t)0x600000007), (int8x8_t)v108), (int32x2_t)0x1600000016);
      v110 = v106 - 3;
      v111 = v106 + 5;
      if (v110 >= 0)
        v111 = v110;
      v112 = (float *)&v93[4 * v109.i32[0]];
      v113 = (float *)&v93[4 * v109.i32[1]];
      v114 = (float *)&v93[88 * v111];
      *a5 = (float)(*v112 + *v113) + *v114;
      *a6 = *v112 - *v114;
      *v195 = (float)(*v112 + (float)(*v113 * -2.0)) + *v114;
      a5[1] = (float)(v112[1] + v113[1]) + v114[1];
      a6[1] = v112[1] - v114[1];
      v195[1] = (float)(v112[1] + (float)(v113[1] * -2.0)) + v114[1];
      a5[2] = (float)(v112[2] + v113[2]) + v114[2];
      a6[2] = v112[2] - v114[2];
      v195[2] = (float)(v112[2] + (float)(v113[2] * -2.0)) + v114[2];
      a5[3] = (float)(v112[3] + v113[3]) + v114[3];
      a6[3] = v112[3] - v114[3];
      v195[3] = (float)(v112[3] + (float)(v113[3] * -2.0)) + v114[3];
      a5[4] = (float)(v112[4] + v113[4]) + v114[4];
      a6[4] = v112[4] - v114[4];
      v195[4] = (float)(v112[4] + (float)(v113[4] * -2.0)) + v114[4];
      a5[5] = (float)(v112[5] + v113[5]) + v114[5];
      a6[5] = v112[5] - v114[5];
      v195[5] = (float)(v112[5] + (float)(v113[5] * -2.0)) + v114[5];
      if (*(_QWORD *)a1[62].i64[1])
        v115 = *(_QWORD *)(a1[62].i64[1] + 8);
      else
        v115 = 0;
      if (*(_QWORD *)a1[63].i64[0])
        v116 = *(_QWORD *)(a1[63].i64[0] + 8);
      else
        v116 = 0;
      v117 = a1 + 75;
      a1[75].i32[0] = 0;
      v22 = a9;
      while (1)
      {
        v118 = v101++;
        v117->i32[v101] = 0;
        v119 = __const__ZNK6webrtc7rnn_vad18SpectralCorrelator23ComputeCrossCorrelationEN3rtc9ArrayViewIKfLln4711EEES5_NS3_IfLl20EEE_kOpusScaleNumBins24kHz20ms[v118];
        if (v119 >= 1)
          break;
LABEL_80:
        if (v101 == 19)
          goto LABEL_89;
      }
      v120 = a1[63].i64[1];
      v121 = (a1[64].i64[0] - v120) >> 2;
      v122 = (float *)(v120 + 4 * v102);
      v123 = 2 * v102;
      v34 = v121 >= v102;
      v124 = v121 - v102;
      if (!v34)
        v124 = 0;
      v125 = 0.0;
      while (v124)
      {
        v126 = (float)(*(float *)(v115 + 4 * (v123 + 1)) * *(float *)(v116 + 4 * (v123 + 1)))
             + (float)(*(float *)(v115 + 4 * v123) * *(float *)(v116 + 4 * v123));
        v127 = *v122++;
        v117->f32[v118] = v117->f32[v118] + (float)(v126 - (float)(v127 * v126));
        v125 = v125 + (float)(v127 * v126);
        v117->f32[v101] = v125;
        ++v102;
        v123 += 2;
        --v124;
        if (!--v119)
          goto LABEL_80;
      }
      goto LABEL_88;
    }
  }
  v55 = a1[63].i64[1];
  v56 = (a1[64].i64[0] - v55) >> 2;
  v57 = (float *)(v55 + 4 * v47);
  v58 = 2 * v47;
  v34 = v56 >= v47;
  v59 = v56 - v47;
  if (!v34)
    v59 = 0;
  v60 = 0.0;
  while (v59)
  {
    v61 = *(float *)(v50 + 4 * (v58 + 1));
    v62 = (float)(v61 * v61) + (float)(*(float *)(v50 + 4 * v58) * *(float *)(v50 + 4 * v58));
    v63 = *v57++;
    f32[v53] = f32[v53] + (float)(v62 - (float)(v63 * v62));
    v60 = v60 + (float)(v63 * v62);
    f32[v46] = v60;
    ++v47;
    v58 += 2;
    --v59;
    if (!--v54)
      goto LABEL_31;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  v128 = 0;
  v129.f32[0] = a1[75].f32[0] + a1[75].f32[0];
  v130 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
  v129.i32[1] = a1[75].i32[1];
  v129.i64[1] = a1[75].i64[1];
  a1[75] = vdivq_f32(v129, vsqrtq_f32(vmlaq_f32(v130, a1[70], a1[65])));
  a1[76] = vdivq_f32(a1[76], vsqrtq_f32(vmlaq_f32(v130, a1[71], a1[66])));
  a1[77] = vdivq_f32(a1[77], vsqrtq_f32(vmlaq_f32(v130, a1[72], a1[67])));
  a1[78] = vdivq_f32(a1[78], vsqrtq_f32(vmlaq_f32(v130, a1[73], a1[68])));
  a1[79] = vdivq_f32(a1[79], vsqrtq_f32(vmlaq_f32(v130, a1[74], a1[69])));
  do
  {
    a8->i32[v128] = 0;
    v131 = (float)(a1[75].f32[0] * a1[80].f32[v128]) + 0.0;
    a8->f32[v128] = v131;
    v132 = v131 + (float)(a1[75].f32[1] * a1[85].f32[v128 + 2]);
    a8->f32[v128] = v132;
    v133 = v132 + (float)(a1[75].f32[2] * a1[91].f32[v128]);
    a8->f32[v128] = v133;
    v134 = v133 + (float)(a1[75].f32[3] * a1[96].f32[v128 + 2]);
    a8->f32[v128] = v134;
    v135 = v134 + (float)(a1[76].f32[0] * a1[102].f32[v128]);
    a8->f32[v128] = v135;
    v136 = v135 + (float)(a1[76].f32[1] * a1[107].f32[v128 + 2]);
    a8->f32[v128] = v136;
    v137 = v136 + (float)(a1[76].f32[2] * a1[113].f32[v128]);
    a8->f32[v128] = v137;
    v138 = v137 + (float)(a1[76].f32[3] * a1[118].f32[v128 + 2]);
    a8->f32[v128] = v138;
    v139 = v138 + (float)(a1[77].f32[0] * a1[124].f32[v128]);
    a8->f32[v128] = v139;
    v140 = v139 + (float)(a1[77].f32[1] * a1[129].f32[v128 + 2]);
    a8->f32[v128] = v140;
    v141 = v140 + (float)(a1[77].f32[2] * a1[135].f32[v128]);
    a8->f32[v128] = v141;
    v142 = v141 + (float)(a1[77].f32[3] * a1[140].f32[v128 + 2]);
    a8->f32[v128] = v142;
    v143 = v142 + (float)(a1[78].f32[0] * a1[146].f32[v128]);
    a8->f32[v128] = v143;
    v144 = v143 + (float)(a1[78].f32[1] * a1[151].f32[v128 + 2]);
    a8->f32[v128] = v144;
    v145 = v144 + (float)(a1[78].f32[2] * a1[157].f32[v128]);
    a8->f32[v128] = v145;
    v146 = v145 + (float)(a1[78].f32[3] * a1[162].f32[v128 + 2]);
    a8->f32[v128] = v146;
    v147 = v146 + (float)(a1[79].f32[0] * a1[168].f32[v128]);
    a8->f32[v128] = v147;
    v148 = v147 + (float)(a1[79].f32[1] * a1[173].f32[v128 + 2]);
    a8->f32[v128] = v148;
    v149 = v148 + (float)(a1[79].f32[2] * a1[179].f32[v128]);
    a8->f32[v128] = v149;
    a8->f32[v128] = (float)(v149 + (float)(a1[79].f32[3] * a1[184].f32[v128 + 2])) * 0.30151;
    ++v128;
  }
  while (v128 != 6);
  *a8 = vadd_f32(*a8, (float32x2_t)0xBF666666BFA66666);
  v150 = a1[255].f32[2];
  v151 = a1[253].f32[3];
  v152 = a1[252].f32[0];
  v153 = a1[250].f32[1];
  v154 = a1[248].f32[2];
  v155 = a1[246].f32[3];
  v156 = a1[255].f32[1];
  v157 = a1[253].f32[2];
  v158 = a1[251].f32[3];
  v159 = a1[250].f32[0];
  v160 = a1[248].f32[1];
  v161 = a1[246].f32[2];
  v162 = a1[253].f32[1];
  v163 = a1[251].f32[2];
  v164 = a1[249].f32[3];
  v165 = a1[248].f32[0];
  v166 = a1[246].f32[1];
  v167 = a1[251].f32[1];
  v168 = a1[249].f32[2];
  v169 = a1[247].f32[3];
  v170 = a1[246].f32[0];
  v171 = a1[249].f32[1];
  v172 = a1[247].f32[2];
  v173 = a1[245].f32[3];
  v174 = a1[247].f32[1];
  v175 = a1[245].f32[2];
  v176 = a1[245].f32[1];
  v177 = fminf(v155, 3.4028e38);
  if (v161 < v177)
    v177 = a1[246].f32[2];
  if (v166 < v177)
    v177 = a1[246].f32[1];
  if (v170 < v177)
    v177 = a1[246].f32[0];
  if (v173 < v177)
    v177 = a1[245].f32[3];
  if (v175 < v177)
    v177 = a1[245].f32[2];
  if (v176 < v177)
    v177 = a1[245].f32[1];
  v178 = fminf(a1[257].f32[1], 3.4028e38);
  if (v150 >= v178)
    v179 = v178;
  else
    v179 = a1[255].f32[2];
  if (v151 < v179)
    v179 = a1[253].f32[3];
  if (v152 < v179)
    v179 = a1[252].f32[0];
  if (v153 < v179)
    v179 = a1[250].f32[1];
  if (v154 < v179)
    v179 = a1[248].f32[2];
  if (v155 >= v179)
    v155 = v179;
  v180 = v155 + 0.0;
  if (v156 < v178)
    v178 = a1[255].f32[1];
  if (v157 < v178)
    v178 = a1[253].f32[2];
  if (v158 < v178)
    v178 = a1[251].f32[3];
  if (v159 < v178)
    v178 = a1[250].f32[0];
  if (v160 < v178)
    v178 = a1[248].f32[1];
  if (v161 < v178)
    v178 = a1[246].f32[2];
  v181 = v180 + v178;
  v182 = fminf(v150, 3.4028e38);
  if (v156 < v182)
    v182 = a1[255].f32[1];
  if (v162 < v182)
    v182 = a1[253].f32[1];
  if (v163 < v182)
    v182 = a1[251].f32[2];
  if (v164 < v182)
    v182 = a1[249].f32[3];
  if (v165 < v182)
    v182 = a1[248].f32[0];
  if (v166 < v182)
    v182 = a1[246].f32[1];
  v183 = v181 + v182;
  v184 = fminf(v151, 3.4028e38);
  if (v157 < v184)
    v184 = a1[253].f32[2];
  if (v162 < v184)
    v184 = a1[253].f32[1];
  if (v167 < v184)
    v184 = a1[251].f32[1];
  if (v168 < v184)
    v184 = a1[249].f32[2];
  if (v169 < v184)
    v184 = a1[247].f32[3];
  if (v170 < v184)
    v184 = a1[246].f32[0];
  v185 = v183 + v184;
  v186 = fminf(v152, 3.4028e38);
  if (v158 < v186)
    v186 = a1[251].f32[3];
  if (v163 < v186)
    v186 = a1[251].f32[2];
  if (v167 < v186)
    v186 = a1[251].f32[1];
  if (v171 < v186)
    v186 = a1[249].f32[1];
  if (v172 < v186)
    v186 = a1[247].f32[2];
  if (v173 < v186)
    v186 = a1[245].f32[3];
  v187 = v185 + v186;
  v188 = fminf(v153, 3.4028e38);
  if (v159 < v188)
    v188 = a1[250].f32[0];
  if (v164 < v188)
    v188 = a1[249].f32[3];
  if (v168 < v188)
    v188 = a1[249].f32[2];
  if (v171 < v188)
    v188 = a1[249].f32[1];
  if (v174 < v188)
    v188 = a1[247].f32[1];
  if (v175 < v188)
    v188 = a1[245].f32[2];
  v189 = v187 + v188;
  v190 = fminf(v154, 3.4028e38);
  if (v160 < v190)
    v190 = a1[248].f32[1];
  if (v165 < v190)
    v190 = a1[248].f32[0];
  if (v169 < v190)
    v190 = a1[247].f32[3];
  if (v172 < v190)
    v190 = a1[247].f32[2];
  if (v174 < v190)
    v190 = a1[247].f32[1];
  if (v176 < v190)
    v190 = a1[245].f32[1];
  *v22 = (float)((float)(v177 + (float)(v190 + v189)) * 0.125) + -2.1;
  return v9 < 0.04;
}

void webrtc::rnn_vad::ComputeDctTable(webrtc::rnn_vad *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float v9;
  float v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t __x;
  float64x2_t __xa;
  float64x2_t __xb;
  float64x2_t __xc;
  long double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;

  v3 = 0;
  v38 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  __asm { FMOV            V0.2D, #22.0 }
  v37 = _Q0;
  do
  {
    v39 = (double)(int)v3 + 0.5;
    v9 = cos(v39 * 0.0 * 3.14159265 / 22.0);
    v10 = cos(v39 * 3.14159265 / 22.0);
    *(float *)(a2 + 4) = v10;
    v32 = vdivq_f64(vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_208F1B9E0, v39), v38), v37);
    __x = vdivq_f64(vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_208F1B9F0, v39), v38), v37);
    v26 = cos(__x.f64[1]);
    v11.f64[0] = cos(__x.f64[0]);
    v11.f64[1] = v26;
    v27 = v11;
    __x.f64[0] = cos(v32.f64[1]);
    v12.f64[0] = cos(v32.f64[0]);
    v12.f64[1] = __x.f64[0];
    *(float32x4_t *)(a2 + 8) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v27);
    v33 = vdivq_f64(vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_208F1BA00, v39), v38), v37);
    __xa = vdivq_f64(vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_208F1BA10, v39), v38), v37);
    v27.f64[0] = cos(__xa.f64[1]);
    v13.f64[0] = cos(__xa.f64[0]);
    v13.f64[1] = v27.f64[0];
    v28 = v13;
    __xa.f64[0] = cos(v33.f64[1]);
    v14.f64[0] = cos(v33.f64[0]);
    v14.f64[1] = __xa.f64[0];
    *(float32x4_t *)(a2 + 24) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v14), v28);
    v34 = vdivq_f64(vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_208F1BA20, v39), v38), v37);
    __xb = vdivq_f64(vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_208F1BA30, v39), v38), v37);
    v28.f64[0] = cos(__xb.f64[1]);
    v15.f64[0] = cos(__xb.f64[0]);
    v15.f64[1] = v28.f64[0];
    v29 = v15;
    __xb.f64[0] = cos(v34.f64[1]);
    v16.f64[0] = cos(v34.f64[0]);
    v16.f64[1] = __xb.f64[0];
    *(float32x4_t *)(a2 + 40) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16), v29);
    v35 = vdivq_f64(vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_208F1BA40, v39), v38), v37);
    __xc = vdivq_f64(vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_208F1BA50, v39), v38), v37);
    v29.f64[0] = cos(__xc.f64[1]);
    v17.f64[0] = cos(__xc.f64[0]);
    v17.f64[1] = v29.f64[0];
    v30 = v17;
    __xc.f64[0] = cos(v35.f64[1]);
    v18.f64[0] = cos(v35.f64[0]);
    v18.f64[1] = __xc.f64[0];
    *(float32x4_t *)(a2 + 56) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v18), v30);
    v19 = vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_208F1BA70, v39), v38);
    v40 = vdivq_f64(vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_208F1BA60, v39), v38), v37);
    v31 = vdivq_f64(v19, v37);
    v35.f64[0] = cos(v31.f64[1]);
    v20.f64[0] = cos(v31.f64[0]);
    v20.f64[1] = v35.f64[0];
    v36 = v20;
    v31.f64[0] = cos(v40.f64[1]);
    v21.f64[0] = cos(v40.f64[0]);
    v21.f64[1] = v31.f64[0];
    *(float32x4_t *)(a2 + 72) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21), v36);
    *(float *)v21.f64 = v9 * 0.707106781;
    *(_DWORD *)a2 = LODWORD(v21.f64[0]);
    a2 += 88;
    ++v3;
  }
  while (v3 != 22);
}

webrtc::SpectrumBuffer *webrtc::SpectrumBuffer::SpectrumBuffer(webrtc::SpectrumBuffer *this, unint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  void **v10;
  void **v11;
  int64_t v12;
  uint64_t v13;
  char **v14;
  char *v15;
  char *v16;
  _BYTE *v17;

  *(_DWORD *)this = a2;
  v5 = (_QWORD *)((char *)this + 8);
  if (a3)
  {
    if (a3 > 0xFC0FC0FC0FC0FCLL)
      goto LABEL_22;
    v6 = 260 * a3;
    v7 = (char *)operator new(260 * a3);
    v8 = &v7[v6];
    bzero(v7, 260 * ((v6 - 260) / 0x104uLL) + 260);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    if (a2)
    {
LABEL_4:
      if (a2 < 0xAAAAAAAAAAAAAABLL)
      {
        v9 = operator new(24 * a2);
        v10 = (void **)v9;
        *((_QWORD *)this + 1) = v9;
        *((_QWORD *)this + 2) = v9;
        v11 = (void **)&v9[3 * a2];
        *((_QWORD *)this + 3) = v11;
        v12 = v8 - v7;
        if (v12)
        {
          if ((unint64_t)(0xFC0FC0FC0FC0FC1 * (v12 >> 2)) > 0xFC0FC0FC0FC0FCLL)
          {
            *v9 = 0;
            v9[1] = 0;
            v9[2] = 0;
            abort();
          }
          v13 = 24 * a2;
          v14 = (char **)(v9 + 1);
          do
          {
            *v14 = 0;
            v14[1] = 0;
            v15 = (char *)operator new(v12);
            *(v14 - 1) = v15;
            v16 = &v15[4 * (v12 >> 2)];
            v14[1] = v16;
            memcpy(v15, v7, v12);
            *v14 = v16;
            v14 += 3;
            v13 -= 24;
          }
          while (v13);
        }
        else
        {
          bzero(v9, 24 * ((24 * a2 - 24) / 0x18) + 24);
        }
        *((_QWORD *)this + 2) = v11;
        if (v7)
          goto LABEL_15;
        goto LABEL_16;
      }
LABEL_22:
      abort();
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
    *v5 = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    if (a2)
      goto LABEL_4;
  }
  v11 = 0;
  v10 = 0;
  if (v7)
  {
LABEL_15:
    operator delete(v7);
    v10 = (void **)*((_QWORD *)this + 1);
    v11 = (void **)*((_QWORD *)this + 2);
  }
LABEL_16:
  for (*((_QWORD *)this + 4) = 0; v10 != v11; v10 += 3)
  {
    v17 = v10[1];
    if (*v10 != v17)
      bzero(*v10, 260 * ((v17 - (_BYTE *)*v10 - 260) / 0x104uLL) + 260);
  }
  return this;
}

float webrtc::SpeechProbabilityEstimator::Update(float *a1, int a2, unint64_t a3, unint64_t a4, uint64_t a5, float *a6, float a7, float a8)
{
  float32x4_t *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unint64_t v21;
  float v22;
  float v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  float v29;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float result;
  float32x4_t v53;
  float32x4_t v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59[32];
  float v60;

  v9 = (float32x4_t *)(a1 + 3142);
  if (a2 <= 199)
    *a1 = (float)((float)(*a1 * (float)a2) + a8) / (float)(a2 + 1);
  webrtc::SignalModelEstimator::Update((uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v10 = a1[3009];
  v11 = a1[3003];
  if (v10 >= v11)
    v12 = 4.0;
  else
    v12 = 8.0;
  v13 = (float)(tanhf((float)(v10 - v11) * v12) + 1.0) * 0.5;
  v14 = a1[3011];
  v15 = a1[3004];
  if (v14 <= v15)
    v16 = 4.0;
  else
    v16 = 8.0;
  v17 = (float)(tanhf((float)(v15 - v14) * v16) + 1.0) * 0.5;
  v18 = a1[3010];
  v19 = a1[3005];
  if (v18 >= v19)
    v20 = 4.0;
  else
    v20 = 8.0;
  v21 = 0;
  v22 = a1[3141]
      + (float)((float)((float)((float)((float)(v17 * a1[3007]) + (float)(a1[3006] * v13))
                              + (float)(a1[3008] * (float)((float)(tanhf((float)(v18 - v19) * v20) + 1.0) * 0.5)))
                      - a1[3141])
              * 0.1);
  if (v22 > 1.0)
    v22 = 1.0;
  if (v22 >= 0.01)
    v23 = v22;
  else
    v23 = 0.01;
  a1[3141] = v23;
  v53 = (float32x4_t)vdupq_n_s32(0x4053AAE0u);
  v54 = (float32x4_t)vdupq_n_s32(0xBEDE5BD9);
  do
  {
    v58 = vmulq_f32(vmulq_f32(*(float32x4_t *)&a1[v21 / 4 + 3012], v54), v53);
    v55 = exp2f(v58.f32[1]);
    v24.f32[0] = exp2f(v58.f32[0]);
    v24.f32[1] = v55;
    v56 = v24;
    v25 = exp2f(v58.f32[2]);
    v26 = v56;
    v26.f32[2] = v25;
    v57 = v26;
    v27 = exp2f(v58.f32[3]);
    v28 = v57;
    v28.f32[3] = v27;
    v59[v21 / 0x10] = v28;
    v21 += 16;
  }
  while (v21 != 512);
  v60 = exp2f((float)(a1[3140] * -0.43429) * 3.3073);
  v29 = (float)(1.0 - v23) / (float)(v23 + 0.0001);
  __asm { FMOV            V2.4S, #1.0 }
  v35 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[1], v29));
  *v9 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[0], v29));
  v9[1] = v35;
  v36 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[3], v29));
  v9[2] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[2], v29));
  v9[3] = v36;
  v37 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[5], v29));
  v9[4] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[4], v29));
  v9[5] = v37;
  v38 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[7], v29));
  v9[6] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[6], v29));
  v9[7] = v38;
  v39 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[9], v29));
  v9[8] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[8], v29));
  v9[9] = v39;
  v40 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[11], v29));
  v9[10] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[10], v29));
  v9[11] = v40;
  v41 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[13], v29));
  v9[12] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[12], v29));
  v9[13] = v41;
  v42 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[15], v29));
  v9[14] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[14], v29));
  v9[15] = v42;
  v43 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[17], v29));
  v9[16] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[16], v29));
  v9[17] = v43;
  v44 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[19], v29));
  v9[18] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[18], v29));
  v9[19] = v44;
  v45 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[21], v29));
  v9[20] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[20], v29));
  v9[21] = v45;
  v46 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[23], v29));
  v9[22] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[22], v29));
  v9[23] = v46;
  v47 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[25], v29));
  v9[24] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[24], v29));
  v9[25] = v47;
  v48 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[27], v29));
  v9[26] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[26], v29));
  v9[27] = v48;
  v49 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[29], v29));
  v9[28] = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[28], v29));
  v9[29] = v49;
  v50 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[30], v29));
  v51 = vdivq_f32(_Q2, vmlaq_n_f32(_Q2, v59[31], v29));
  v9[30] = v50;
  v9[31] = v51;
  result = 1.0 / (float)((float)(v29 * v60) + 1.0);
  a1[3270] = result;
  return result;
}

uint64_t WebRtcSpl_SqrtFloor(int a1)
{
  int v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;

  v1 = a1 > 0x3FFFFFFF;
  v2 = a1 - 0x40000000;
  if (a1 <= 0x3FFFFFFF)
    v2 = a1;
  v3 = v1 << 16;
  v4 = (v1 << 30) | 0x10000000;
  if (v2 >= v4)
    v5 = (v1 << 30) | 0x10000000;
  else
    v5 = 0;
  if (v2 >= v4)
    v3 = ((a1 > 0x3FFFFFFF) << 16) | 0x8000;
  v6 = v2 - v5;
  v7 = (((v3 >> 15) & 3) << 28) | 0x4000000;
  v8 = v3 | 0x4000;
  if (v6 < v7)
  {
    v7 = 0;
    v8 = v3;
  }
  v9 = v6 - v7;
  v10 = ((v8 >> 14) << 26) | 0x1000000;
  if (v9 >= v10)
    v8 |= 0x2000u;
  else
    v10 = 0;
  v11 = v9 - v10;
  v12 = (v8 << 11) + 0x400000;
  if (v11 >= v12)
    v8 |= 0x1000u;
  else
    v12 = 0;
  v13 = v11 - v12;
  v14 = (v8 << 10) + 0x100000;
  if (v13 >= v14)
    v8 |= 0x800u;
  else
    v14 = 0;
  v15 = v13 - v14;
  v16 = (v8 << 9) + 0x40000;
  if (v15 >= v16)
    v8 |= 0x400u;
  else
    v16 = 0;
  v17 = v15 - v16;
  v18 = (v8 << 8) + 0x10000;
  if (v17 >= v18)
    v8 |= 0x200u;
  else
    v18 = 0;
  v19 = v17 - v18;
  v20 = (v8 << 7) + 0x4000;
  if (v19 >= v20)
    v8 |= 0x100u;
  else
    v20 = 0;
  v21 = v19 - v20;
  v22 = (v8 << 6) + 4096;
  if (v21 >= v22)
    v8 |= 0x80u;
  else
    v22 = 0;
  v23 = v21 - v22;
  v24 = 32 * v8 + 1024;
  if (v23 >= v24)
    v8 |= 0x40u;
  else
    v24 = 0;
  v25 = v23 - v24;
  v26 = 16 * v8 + 256;
  if (v25 >= v26)
    v8 |= 0x20u;
  else
    v26 = 0;
  v27 = v25 - v26;
  v28 = 8 * v8 + 64;
  if (v27 >= v28)
    v8 |= 0x10u;
  else
    v28 = 0;
  v29 = v27 - v28;
  v30 = 4 * v8 + 16;
  if (v29 >= v30)
    v8 |= 8u;
  else
    v30 = 0;
  v31 = v29 - v30;
  v32 = 2 * v8 + 4;
  if (v31 >= v32)
    v8 |= 4u;
  else
    v32 = 0;
  return (v31 - v32 > (int)v8) | (v8 >> 1);
}

unsigned int *WebRtcSpl_AnalysisQMF(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  int16x8_t *v4;
  int16x8_t *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned int *result;
  int16x8_t *v11;
  int16x8_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int32x4_t *v17;
  int32x4_t *v18;
  const __int16 *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  int32x4_t v28;
  uint64_t v29;
  int16x8_t *v30;
  int16x8_t *v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  unint64_t v38;
  __int16 *v39;
  __int16 *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51[320];
  unsigned int v52[320];
  unsigned int v53[320];
  unsigned int v54[320];
  uint64_t v55;
  int16x8x2_t v56;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v8 = v7;
  v55 = *MEMORY[0x24BDAC8D0];
  v9 = v3 >> 1;
  if (v3 < 2)
  {
    WebRtcSpl_AllPassQMF(v54, v3 >> 1, v52, WebRtcSpl_kAllPassFilter1, v6);
    return WebRtcSpl_AllPassQMF(v53, v9, v51, WebRtcSpl_kAllPassFilter2, v8);
  }
  v11 = v5;
  v12 = v4;
  if (v9 <= 1)
    v13 = 1;
  else
    v13 = v3 >> 1;
  if (v13 - 8 > 0x3FF8)
  {
    v16 = 0;
    v15 = 0;
LABEL_12:
    v20 = v13 - v15;
    v21 = v15;
    v22 = &v54[v15];
    v23 = &v53[v21];
    do
    {
      v24 = 2 * (__int16)v16;
      *v23++ = *(__int16 *)(v2 + v24) << 10;
      *v22++ = *(__int16 *)(v2 + (v24 | 2)) << 10;
      v16 += 2;
      --v20;
    }
    while (v20);
    goto LABEL_14;
  }
  v14 = 0;
  v15 = v13 & 0x7FFFFFFFFFFFFFF8;
  v16 = 2 * (v13 & 0xFFFFFFF8);
  v17 = (int32x4_t *)v53;
  v18 = (int32x4_t *)v54;
  do
  {
    v19 = (const __int16 *)(v2 + 2 * (__int16)(2 * v14));
    v56 = vld2q_s16(v19);
    *v17 = vshll_n_s16(*(int16x4_t *)v56.val[0].i8, 0xAuLL);
    v17[1] = vshll_high_n_s16(v56.val[0], 0xAuLL);
    v17 += 2;
    *v18 = vshll_n_s16(*(int16x4_t *)v56.val[1].i8, 0xAuLL);
    v18[1] = vshll_high_n_s16(v56.val[1], 0xAuLL);
    v18 += 2;
    v14 += 8;
  }
  while (v15 != v14);
  if (v13 != v15)
    goto LABEL_12;
LABEL_14:
  WebRtcSpl_AllPassQMF(v54, v3 >> 1, v52, WebRtcSpl_kAllPassFilter1, v6);
  result = WebRtcSpl_AllPassQMF(v53, v9, v51, WebRtcSpl_kAllPassFilter2, v8);
  v25 = 0;
  if (v13 < 8)
    goto LABEL_19;
  if ((unint64_t)((char *)v11 - (char *)v12) < 0x10)
    goto LABEL_19;
  v25 = v13 & 0x7FFFFFFFFFFFFFF8;
  v26 = v52;
  v27 = v51;
  v28.i64[0] = 0x40000000400;
  v28.i64[1] = 0x40000000400;
  v29 = v13 & 0x7FFFFFFFFFFFFFF8;
  v30 = v11;
  v31 = v12;
  do
  {
    v32 = *(int32x4_t *)v26;
    v33 = *((int32x4_t *)v26 + 1);
    v26 += 8;
    v35 = *(int32x4_t *)v27;
    v34 = *((int32x4_t *)v27 + 1);
    v27 += 8;
    v36 = vaddq_s32(v33, v28);
    v37 = vaddq_s32(v32, v28);
    *v31++ = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v37, v35), 0xBuLL)), vshrq_n_s32(vaddq_s32(v36, v34), 0xBuLL));
    *v30++ = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vsubq_s32(v37, v35), 0xBuLL)), vshrq_n_s32(vsubq_s32(v36, v34), 0xBuLL));
    v29 -= 8;
  }
  while (v29);
  if (v13 != v25)
  {
LABEL_19:
    v38 = v13 - v25;
    v39 = &v11->i16[v25];
    v40 = &v12->i16[v25];
    v41 = v25;
    v42 = &v51[v25];
    v43 = &v52[v41];
    do
    {
      v45 = *v43++;
      v44 = v45;
      v47 = *v42++;
      v46 = v47;
      v48 = v44 + 1024;
      v49 = (v48 + v47) >> 11;
      if (v49 <= -32768)
        v49 = -32768;
      if (v49 >= 0x7FFF)
        LOWORD(v49) = 0x7FFF;
      *v40++ = v49;
      v50 = (v48 - v46) >> 11;
      if (v50 <= -32768)
        v50 = -32768;
      if (v50 >= 0x7FFF)
        LOWORD(v50) = 0x7FFF;
      *v39++ = v50;
      --v38;
    }
    while (v38);
  }
  return result;
}

unsigned int *WebRtcSpl_AllPassQMF(unsigned int *result, unint64_t a2, unsigned int *a3, unsigned __int16 *a4, _DWORD *a5)
{
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  signed int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  int v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  signed int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  signed int v28;
  int v29;
  unsigned int v30;
  unsigned int *v31;
  _DWORD *v32;
  unint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  BOOL v37;
  signed int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  signed int v44;
  int v45;
  unsigned int v46;
  unsigned int *v47;
  _DWORD *v48;
  int v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  signed int v53;

  v5 = a5[1];
  v6 = *result - v5;
  v7 = *result >> 31;
  v8 = v5 >> 31;
  if (v7 == v6 >> 31 || v7 == v8)
    v10 = v6;
  else
    v10 = (v6 >> 31) ^ 0x80000000;
  v11 = *a4;
  v12 = *a5 + (v10 >> 16) * v11 + (((unsigned __int16)v10 * v11) >> 16);
  *a3 = v12;
  if (a2 >= 2)
  {
    v13 = a2 - 1;
    v14 = a3 + 1;
    v15 = result + 1;
    do
    {
      v16 = *v15 - v12;
      v17 = *v15 >> 31;
      v18 = v12 >> 31;
      v19 = v17 == v16 >> 31 || v17 == v18;
      v20 = (v16 >> 31) ^ 0x80000000;
      if (v19)
        v20 = v16;
      v12 = *(v15 - 1) + (v20 >> 16) * v11 + (((unsigned __int16)v20 * v11) >> 16);
      *v14++ = v12;
      ++v15;
      --v13;
    }
    while (v13);
  }
  v21 = a2 - 1;
  v22 = a2 - 1;
  *a5 = result[v22];
  a5[1] = a3[v22];
  v23 = a5[3];
  v24 = *a3 - v23;
  v25 = *a3 >> 31;
  v26 = v23 >> 31;
  if (v25 == v24 >> 31 || v25 == v26)
    v28 = v24;
  else
    v28 = (v24 >> 31) ^ 0x80000000;
  v29 = a4[1];
  v30 = a5[2] + (v28 >> 16) * v29 + (((unsigned __int16)v28 * v29) >> 16);
  *result = v30;
  if (a2 >= 2)
  {
    v31 = result + 1;
    v32 = a3 + 1;
    v33 = a2 - 1;
    do
    {
      v34 = *v32 - v30;
      v35 = *v32 >> 31;
      v36 = v30 >> 31;
      v37 = v35 == v34 >> 31 || v35 == v36;
      v38 = (v34 >> 31) ^ 0x80000000;
      if (v37)
        v38 = v34;
      v30 = *(v32 - 1) + (v38 >> 16) * v29 + (((unsigned __int16)v38 * v29) >> 16);
      *v31++ = v30;
      ++v32;
      --v33;
    }
    while (v33);
  }
  a5[2] = a3[v22];
  a5[3] = result[v22];
  v39 = a5[5];
  v40 = *result - v39;
  v41 = *result >> 31;
  v42 = v39 >> 31;
  if (v41 == v40 >> 31 || v41 == v42)
    v44 = v40;
  else
    v44 = (v40 >> 31) ^ 0x80000000;
  v45 = a4[2];
  v46 = a5[4] + (v44 >> 16) * v45 + (((unsigned __int16)v44 * v45) >> 16);
  *a3 = v46;
  if (a2 >= 2)
  {
    v47 = a3 + 1;
    v48 = result + 1;
    do
    {
      v49 = *v48 - v46;
      v50 = *v48 >> 31;
      v51 = v46 >> 31;
      v52 = v50 == v49 >> 31 || v50 == v51;
      v53 = (v49 >> 31) ^ 0x80000000;
      if (v52)
        v53 = v49;
      v46 = *(v48 - 1) + (v53 >> 16) * v45 + (((unsigned __int16)v53 * v45) >> 16);
      *v47++ = v46;
      ++v48;
      --v21;
    }
    while (v21);
  }
  a5[4] = result[v22];
  a5[5] = a3[v22];
  return result;
}

unsigned int *WebRtcSpl_SynthesisQMF(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  int16x8_t *v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int32x4_t *v12;
  int32x4_t *v13;
  unint64_t v14;
  int16x8_t *v15;
  int16x8_t *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  __int16 *v24;
  __int16 *v25;
  int v26;
  int v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  __int16 *v49;
  unsigned int v50[320];
  unsigned int v51[320];
  unsigned int v52[320];
  unsigned int v53[320];
  uint64_t v54;
  int16x8x2_t v55;

  result = (unsigned int *)MEMORY[0x24BDAC7A8](a1, a2);
  v54 = *MEMORY[0x24BDAC8D0];
  if (!v4)
    return result;
  v8 = v7;
  v9 = v5;
  v10 = v4;
  if (v4 >= 8)
  {
    v11 = v4 & 0xFFFFFFFFFFFFFFF8;
    v12 = (int32x4_t *)v53;
    v13 = (int32x4_t *)v52;
    v14 = v4 & 0xFFFFFFFFFFFFFFF8;
    v15 = v3;
    v16 = (int16x8_t *)result;
    do
    {
      v17 = *v16++;
      v18 = v17;
      v19 = *v15++;
      *v12 = vshlq_n_s32(vaddl_s16(*(int16x4_t *)v19.i8, *(int16x4_t *)v18.i8), 0xAuLL);
      v12[1] = vshlq_n_s32(vaddl_high_s16(v19, v18), 0xAuLL);
      v12 += 2;
      *v13 = vshlq_n_s32(vsubl_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v19.i8), 0xAuLL);
      v13[1] = vshlq_n_s32(vsubl_high_s16(v18, v19), 0xAuLL);
      v13 += 2;
      v14 -= 8;
    }
    while (v14);
    if (v11 == v4)
      goto LABEL_9;
  }
  else
  {
    v11 = 0;
  }
  v20 = v4 - v11;
  v21 = &v52[v11];
  v22 = &v53[v11];
  v23 = 2 * v11;
  v24 = &v3->i16[v11];
  v25 = (__int16 *)((char *)result + v23);
  do
  {
    v27 = *v25++;
    v26 = v27;
    v28 = *v24++;
    *v22++ = (v28 + v26) << 10;
    *v21++ = (v26 - v28) << 10;
    --v20;
  }
  while (v20);
LABEL_9:
  WebRtcSpl_AllPassQMF(v53, v4, v51, WebRtcSpl_kAllPassFilter2, v6);
  result = WebRtcSpl_AllPassQMF(v52, v10, v50, WebRtcSpl_kAllPassFilter1, v8);
  if (v10 >= 0x10)
  {
    v30 = 0;
    v29 = 0;
    v40 = 4 * (v10 - 1);
    if (v9 + 2 + v40 >= v9 + 2 && v9 + v40 >= v9)
    {
      v41 = (v10 - 1) >> 14;
      if (!v41)
      {
        v30 = v10 & 0xFFFFFFFFFFFFFFF8;
        v29 = 2 * (v10 & 0xFFF8);
        v42 = v50;
        v43 = v51;
        v44.i64[0] = 0x20000000200;
        v44.i64[1] = 0x20000000200;
        do
        {
          v46 = *(int32x4_t *)v42;
          v45 = *((int32x4_t *)v42 + 1);
          v42 += 8;
          v55.val[0] = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v46, v44), 0xAuLL)), vshrq_n_s32(vaddq_s32(v45, v44), 0xAuLL));
          v48 = *(int32x4_t *)v43;
          v47 = *((int32x4_t *)v43 + 1);
          v43 += 8;
          v55.val[1] = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v48, v44), 0xAuLL)), vshrq_n_s32(vaddq_s32(v47, v44), 0xAuLL));
          v49 = (__int16 *)(v9 - 2 + 2 * (__int16)((2 * v41) | 1));
          vst2q_s16(v49, v55);
          v41 += 8;
        }
        while (v30 != v41);
        if (v30 == v10)
          return result;
      }
    }
  }
  else
  {
    v29 = 0;
    v30 = 0;
  }
  v31 = v10 - v30;
  v32 = v30;
  v33 = &v51[v30];
  v34 = &v50[v32];
  do
  {
    v35 = *v34++;
    v36 = (v35 + 512) >> 10;
    if (v36 <= -32768)
      v36 = -32768;
    if (v36 >= 0x7FFF)
      LOWORD(v36) = 0x7FFF;
    v37 = 2 * v29;
    *(_WORD *)(v9 + v37) = v36;
    v38 = *v33++;
    v39 = (v38 + 512) >> 10;
    if (v39 <= -32768)
      v39 = -32768;
    if (v39 >= 0x7FFF)
      LOWORD(v39) = 0x7FFF;
    v29 += 2;
    *(_WORD *)(v9 + (v37 | 2)) = v39;
    --v31;
  }
  while (v31);
  return result;
}

webrtc::SplittingFilter *webrtc::SplittingFilter::SplittingFilter(webrtc::SplittingFilter *this, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2 && a3 == 2)
  {
    if (a2 < 0x2AAAAAAAAAAAAABLL)
    {
      v9 = 96 * a2;
      v10 = (char *)operator new(96 * a2);
      *((_QWORD *)this + 1) = v10;
      v11 = &v10[v9];
      *((_QWORD *)this + 3) = &v10[v9];
      bzero(v10, 96 * ((v9 - 96) / 0x60uLL) + 96);
      *((_QWORD *)this + 2) = v11;
      *((_QWORD *)this + 5) = 0;
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 4) = 0;
      return this;
    }
LABEL_12:
    abort();
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  if (!a2 || a3 != 3)
  {
    if ((a3 & 0xFFFFFFFFFFFFFFFELL) == 2)
      return this;
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/splitting_filter.cc", 34, "num_bands_ == 2 || num_bands_ == 3", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v16);
    goto LABEL_12;
  }
  if (a2 >= 0x369D0369D0369ELL)
    goto LABEL_12;
  v13 = 1200 * a2;
  v14 = (char *)operator new(1200 * a2);
  *((_QWORD *)this + 4) = v14;
  v15 = &v14[v13];
  *((_QWORD *)this + 6) = &v14[v13];
  bzero(v14, 1200 * ((v13 - 1200) / 0x4B0uLL) + 1200);
  *((_QWORD *)this + 5) = v15;
  return this;
}

void webrtc::SplittingFilter::Analysis(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a3[7];
  if (v6 == 3)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(a1 + 40) != v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *(uint64_t **)(a2 + 88);
        if (*(uint64_t **)(a2 + 96) == v12)
          break;
        v13 = a3[8];
        if (0xAAAAAAAAAAAAAAABLL * ((a3[9] - v13) >> 3) <= v11)
          break;
        v14 = *v12;
        if (*(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) == v14)
          v14 = 0;
        if (*(_QWORD *)(v13 + v9 + 8) == *(_QWORD *)(v13 + v9))
          v15 = 0;
        else
          v15 = *(_QWORD *)(v13 + v9);
        webrtc::ThreeBandFilterBank::Analysis(v7 + v8, *(_QWORD *)(v14 + v10), v15);
        ++v11;
        v7 = *(_QWORD *)(a1 + 32);
        v10 += 16;
        v9 += 24;
        v8 += 1200;
        if (v11 >= 0x2FC962FC962FC963 * ((*(_QWORD *)(a1 + 40) - v7) >> 4))
          return;
      }
      __break(1u);
    }
  }
  else if (v6 == 2)
  {
    webrtc::SplittingFilter::TwoBandsAnalysis((unsigned int *)a1, a2, (uint64_t)a3);
  }
}

unsigned int *webrtc::SplittingFilter::TwoBandsAnalysis(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v7;
  unint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t **v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x16_t v84;
  _BYTE v85[640];
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;

  v3 = *((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 2);
  if (v4 != v3)
  {
    v7 = result;
    v8 = 0;
    v9 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
    v10.i64[0] = 0xC7000000C7000000;
    v10.i64[1] = 0xC7000000C7000000;
    v11.i64[0] = 0x3F0000003F000000;
    v11.i64[1] = 0x3F0000003F000000;
    v12.i64[0] = 0x8000000080000000;
    v12.i64[1] = 0x8000000080000000;
    v84 = v9;
    while (1)
    {
      v13 = 0;
      v14 = *(int8x16_t **)(*(_QWORD *)(a2 + 8) + 8 * v8);
      do
      {
        v15 = *v14;
        v16 = v14[1];
        v14 += 2;
        v17 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v15, (float32x4_t)v9), v9, v15);
        v18 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v16, (float32x4_t)v9), v9, v16);
        v19 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v10, (float32x4_t)v17), v10, v17);
        v20 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v10, (float32x4_t)v18), v10, v18);
        *(int16x8_t *)&v85[v13] = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v19, (float32x4_t)vbslq_s8(v12, v11, v19))), (int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v20, (float32x4_t)vbslq_s8(v12, v11, v20))));
        v13 += 16;
      }
      while (v13 != 640);
      if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 5) <= v8)
        break;
      result = WebRtcSpl_AnalysisQMF((uint64_t)v85, *(_QWORD *)(a2 + 24));
      v12.i64[0] = 0x8000000080000000;
      v12.i64[1] = 0x8000000080000000;
      v11.i64[0] = 0x3F0000003F000000;
      v11.i64[1] = 0x3F0000003F000000;
      v10.i64[0] = 0xC7000000C7000000;
      v10.i64[1] = 0xC7000000C7000000;
      v9 = v84;
      v21 = (float32x4_t **)(*(_QWORD *)(a3 + 8) + 8 * v8);
      v22 = *v21;
      v23 = vcvtq_f32_s32(vmovl_high_s16(v86));
      v24 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v87.i8));
      v25 = vcvtq_f32_s32(vmovl_high_s16(v87));
      *v22 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v86.i8));
      v22[1] = v23;
      v22[2] = v24;
      v22[3] = v25;
      v26 = vcvtq_f32_s32(vmovl_high_s16(v88));
      v27 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v89.i8));
      v28 = vcvtq_f32_s32(vmovl_high_s16(v89));
      v22[4] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v88.i8));
      v22[5] = v26;
      v22[6] = v27;
      v22[7] = v28;
      v29 = vcvtq_f32_s32(vmovl_high_s16(v90));
      v30 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v91.i8));
      v31 = vcvtq_f32_s32(vmovl_high_s16(v91));
      v22[8] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v90.i8));
      v22[9] = v29;
      v22[10] = v30;
      v22[11] = v31;
      v32 = vcvtq_f32_s32(vmovl_high_s16(v92));
      v33 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v93.i8));
      v34 = vcvtq_f32_s32(vmovl_high_s16(v93));
      v22[12] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v92.i8));
      v22[13] = v32;
      v22[14] = v33;
      v22[15] = v34;
      v35 = vcvtq_f32_s32(vmovl_high_s16(v94));
      v36 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v95.i8));
      v37 = vcvtq_f32_s32(vmovl_high_s16(v95));
      v22[16] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v94.i8));
      v22[17] = v35;
      v22[18] = v36;
      v22[19] = v37;
      v38 = vcvtq_f32_s32(vmovl_high_s16(v96));
      v39 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v97.i8));
      v40 = vcvtq_f32_s32(vmovl_high_s16(v97));
      v22[20] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v96.i8));
      v22[21] = v38;
      v22[22] = v39;
      v22[23] = v40;
      v41 = vcvtq_f32_s32(vmovl_high_s16(v98));
      v42 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v99.i8));
      v43 = vcvtq_f32_s32(vmovl_high_s16(v99));
      v22[24] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v98.i8));
      v22[25] = v41;
      v22[26] = v42;
      v22[27] = v43;
      v44 = vcvtq_f32_s32(vmovl_high_s16(v100));
      v45 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v101.i8));
      v46 = vcvtq_f32_s32(vmovl_high_s16(v101));
      v22[28] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v100.i8));
      v22[29] = v44;
      v22[30] = v45;
      v22[31] = v46;
      v47 = vcvtq_f32_s32(vmovl_high_s16(v102));
      v48 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v103.i8));
      v49 = vcvtq_f32_s32(vmovl_high_s16(v103));
      v22[32] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v102.i8));
      v22[33] = v47;
      v22[34] = v48;
      v22[35] = v49;
      v50 = vcvtq_f32_s32(vmovl_high_s16(v104));
      v51 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v105.i8));
      v52 = vcvtq_f32_s32(vmovl_high_s16(v105));
      v22[36] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v104.i8));
      v22[37] = v50;
      v22[38] = v51;
      v22[39] = v52;
      v53 = v21[*(_QWORD *)(a3 + 40)];
      v54 = vcvtq_f32_s32(vmovl_high_s16(v106));
      v55 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v107.i8));
      v56 = vcvtq_f32_s32(vmovl_high_s16(v107));
      *v53 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v106.i8));
      v53[1] = v54;
      v53[2] = v55;
      v53[3] = v56;
      v57 = vcvtq_f32_s32(vmovl_high_s16(v108));
      v58 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v109.i8));
      v59 = vcvtq_f32_s32(vmovl_high_s16(v109));
      v53[4] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v108.i8));
      v53[5] = v57;
      v53[6] = v58;
      v53[7] = v59;
      v60 = vcvtq_f32_s32(vmovl_high_s16(v110));
      v61 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v111.i8));
      v62 = vcvtq_f32_s32(vmovl_high_s16(v111));
      v53[8] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v110.i8));
      v53[9] = v60;
      v53[10] = v61;
      v53[11] = v62;
      v63 = vcvtq_f32_s32(vmovl_high_s16(v112));
      v64 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v113.i8));
      v65 = vcvtq_f32_s32(vmovl_high_s16(v113));
      v53[12] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v112.i8));
      v53[13] = v63;
      v53[14] = v64;
      v53[15] = v65;
      v66 = vcvtq_f32_s32(vmovl_high_s16(v114));
      v67 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v115.i8));
      v68 = vcvtq_f32_s32(vmovl_high_s16(v115));
      v53[16] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v114.i8));
      v53[17] = v66;
      v53[18] = v67;
      v53[19] = v68;
      v69 = vcvtq_f32_s32(vmovl_high_s16(v116));
      v70 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v117.i8));
      v71 = vcvtq_f32_s32(vmovl_high_s16(v117));
      v53[20] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v116.i8));
      v53[21] = v69;
      v53[22] = v70;
      v53[23] = v71;
      v72 = vcvtq_f32_s32(vmovl_high_s16(v118));
      v73 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v119.i8));
      v74 = vcvtq_f32_s32(vmovl_high_s16(v119));
      v53[24] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v118.i8));
      v53[25] = v72;
      v53[26] = v73;
      v53[27] = v74;
      v75 = vcvtq_f32_s32(vmovl_high_s16(v120));
      v76 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v121.i8));
      v77 = vcvtq_f32_s32(vmovl_high_s16(v121));
      v53[28] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v120.i8));
      v53[29] = v75;
      v53[30] = v76;
      v53[31] = v77;
      v78 = vcvtq_f32_s32(vmovl_high_s16(v122));
      v79 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v123.i8));
      v80 = vcvtq_f32_s32(vmovl_high_s16(v123));
      v53[32] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v122.i8));
      v53[33] = v78;
      v53[34] = v79;
      v53[35] = v80;
      v81 = vcvtq_f32_s32(vmovl_high_s16(v124));
      v82 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v125.i8));
      v83 = vcvtq_f32_s32(vmovl_high_s16(v125));
      v53[36] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v124.i8));
      v53[37] = v81;
      ++v8;
      v53[38] = v82;
      v53[39] = v83;
      v3 = *((_QWORD *)v7 + 1);
      v4 = *((_QWORD *)v7 + 2);
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 5))
        return result;
    }
    __break(1u);
  }
  return result;
}

void webrtc::SplittingFilter::Synthesis(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  float32x4_t **v15;
  uint64_t v16;

  v6 = a2[7];
  if (v6 == 3)
  {
    if (a3[6])
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *(_QWORD *)(a1 + 32);
        if (0x2FC962FC962FC963 * ((*(_QWORD *)(a1 + 40) - v11) >> 4) <= v10)
          break;
        v12 = a2[8];
        if (0xAAAAAAAAAAAAAAABLL * ((a2[9] - v12) >> 3) <= v10)
          break;
        v13 = (uint64_t *)a3[11];
        if ((uint64_t *)a3[12] == v13)
          break;
        v14 = v11 + v7;
        if (*(_QWORD *)(v12 + v9 + 8) == *(_QWORD *)(v12 + v9))
          v15 = 0;
        else
          v15 = *(float32x4_t ***)(v12 + v9);
        v16 = *v13;
        if (v13[1] == *v13)
          v16 = 0;
        webrtc::ThreeBandFilterBank::Synthesis(v14, v15, *(char **)(v16 + v8));
        ++v10;
        v9 += 24;
        v8 += 16;
        v7 += 1200;
        if (v10 >= a3[6])
          return;
      }
      __break(1u);
    }
  }
  else if (v6 == 2)
  {
    webrtc::SplittingFilter::TwoBandsSynthesis((unsigned int *)a1, (uint64_t)a2, (uint64_t)a3);
  }
}

unsigned int *webrtc::SplittingFilter::TwoBandsSynthesis(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  int8x16_t *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t *v28;
  int8x16_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  _BYTE v70[320];
  uint64_t v71;

  if (*(_QWORD *)(a3 + 48))
  {
    v5 = result;
    v6 = 0;
    v7 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
    v8.i64[0] = 0xC7000000C7000000;
    v8.i64[1] = 0xC7000000C7000000;
    v9.i64[0] = 0x3F0000003F000000;
    v9.i64[1] = 0x3F0000003F000000;
    v10.i64[0] = 0x8000000080000000;
    v10.i64[1] = 0x8000000080000000;
    v29 = v7;
    while (1)
    {
      v11 = 0;
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(int8x16_t **)(v12 + 8 * v6);
      do
      {
        v14 = *v13;
        v15 = v13[1];
        v13 += 2;
        v16 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v14, (float32x4_t)v7), v7, v14);
        v17 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v15, (float32x4_t)v7), v7, v15);
        v18 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v8, (float32x4_t)v16), v8, v16);
        v19 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v8, (float32x4_t)v17), v8, v17);
        *(int16x8_t *)&v70[v11] = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v18, (float32x4_t)vbslq_s8(v10, v9, v18))), (int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v19, (float32x4_t)vbslq_s8(v10, v9, v19))));
        v11 += 16;
      }
      while (v11 != 320);
      v20 = 0;
      v21 = *(int8x16_t **)(v12 + 8 * *(_QWORD *)(a2 + 40) + 8 * v6);
      do
      {
        v22 = *v21;
        v23 = v21[1];
        v21 += 2;
        v24 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v22, (float32x4_t)v7), v7, v22);
        v25 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v23, (float32x4_t)v7), v7, v23);
        v26 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v8, (float32x4_t)v24), v8, v24);
        v27 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v8, (float32x4_t)v25), v8, v25);
        *(int16x8_t *)&v70[v20 + 320] = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v26, (float32x4_t)vbslq_s8(v10, v9, v26))), (int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v27, (float32x4_t)vbslq_s8(v10, v9, v27))));
        v20 += 16;
      }
      while (v20 != 320);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + 2) - *((_QWORD *)v5 + 1)) >> 5) <= v6)
        break;
      result = WebRtcSpl_SynthesisQMF((uint64_t)v70, (uint64_t)&v71);
      v10.i64[0] = 0x8000000080000000;
      v10.i64[1] = 0x8000000080000000;
      v9.i64[0] = 0x3F0000003F000000;
      v9.i64[1] = 0x3F0000003F000000;
      v8.i64[0] = 0xC7000000C7000000;
      v8.i64[1] = 0xC7000000C7000000;
      v7 = v29;
      v28 = *(float32x4_t **)(*(_QWORD *)(a3 + 8) + 8 * v6);
      *v28 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v30.i8));
      v28[1] = vcvtq_f32_s32(vmovl_high_s16(v30));
      v28[2] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v31.i8));
      v28[3] = vcvtq_f32_s32(vmovl_high_s16(v31));
      v28[4] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v32.i8));
      v28[5] = vcvtq_f32_s32(vmovl_high_s16(v32));
      v28[6] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v33.i8));
      v28[7] = vcvtq_f32_s32(vmovl_high_s16(v33));
      v28[8] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v34.i8));
      v28[9] = vcvtq_f32_s32(vmovl_high_s16(v34));
      v28[10] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v35.i8));
      v28[11] = vcvtq_f32_s32(vmovl_high_s16(v35));
      v28[12] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v36.i8));
      v28[13] = vcvtq_f32_s32(vmovl_high_s16(v36));
      v28[14] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v37.i8));
      v28[15] = vcvtq_f32_s32(vmovl_high_s16(v37));
      v28[16] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v38.i8));
      v28[17] = vcvtq_f32_s32(vmovl_high_s16(v38));
      v28[18] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v39.i8));
      v28[19] = vcvtq_f32_s32(vmovl_high_s16(v39));
      v28[20] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v40.i8));
      v28[21] = vcvtq_f32_s32(vmovl_high_s16(v40));
      v28[22] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v41.i8));
      v28[23] = vcvtq_f32_s32(vmovl_high_s16(v41));
      v28[24] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v42.i8));
      v28[25] = vcvtq_f32_s32(vmovl_high_s16(v42));
      v28[26] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v43.i8));
      v28[27] = vcvtq_f32_s32(vmovl_high_s16(v43));
      v28[28] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v44.i8));
      v28[29] = vcvtq_f32_s32(vmovl_high_s16(v44));
      v28[30] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v45.i8));
      v28[31] = vcvtq_f32_s32(vmovl_high_s16(v45));
      v28[32] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v46.i8));
      v28[33] = vcvtq_f32_s32(vmovl_high_s16(v46));
      v28[34] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v47.i8));
      v28[35] = vcvtq_f32_s32(vmovl_high_s16(v47));
      v28[36] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v48.i8));
      v28[37] = vcvtq_f32_s32(vmovl_high_s16(v48));
      v28[38] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v49.i8));
      v28[39] = vcvtq_f32_s32(vmovl_high_s16(v49));
      v28[40] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v50.i8));
      v28[41] = vcvtq_f32_s32(vmovl_high_s16(v50));
      v28[42] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v51.i8));
      v28[43] = vcvtq_f32_s32(vmovl_high_s16(v51));
      v28[44] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v52.i8));
      v28[45] = vcvtq_f32_s32(vmovl_high_s16(v52));
      v28[46] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v53.i8));
      v28[47] = vcvtq_f32_s32(vmovl_high_s16(v53));
      v28[48] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v54.i8));
      v28[49] = vcvtq_f32_s32(vmovl_high_s16(v54));
      v28[50] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v55.i8));
      v28[51] = vcvtq_f32_s32(vmovl_high_s16(v55));
      v28[52] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v56.i8));
      v28[53] = vcvtq_f32_s32(vmovl_high_s16(v56));
      v28[54] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v57.i8));
      v28[55] = vcvtq_f32_s32(vmovl_high_s16(v57));
      v28[56] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v58.i8));
      v28[57] = vcvtq_f32_s32(vmovl_high_s16(v58));
      v28[58] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v59.i8));
      v28[59] = vcvtq_f32_s32(vmovl_high_s16(v59));
      v28[60] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v60.i8));
      v28[61] = vcvtq_f32_s32(vmovl_high_s16(v60));
      v28[62] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v61.i8));
      v28[63] = vcvtq_f32_s32(vmovl_high_s16(v61));
      v28[65] = vcvtq_f32_s32(vmovl_high_s16(v62));
      v28[64] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v62.i8));
      v28[67] = vcvtq_f32_s32(vmovl_high_s16(v63));
      v28[66] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v63.i8));
      v28[69] = vcvtq_f32_s32(vmovl_high_s16(v64));
      v28[68] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v64.i8));
      v28[71] = vcvtq_f32_s32(vmovl_high_s16(v65));
      v28[70] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v65.i8));
      v28[73] = vcvtq_f32_s32(vmovl_high_s16(v66));
      v28[72] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v66.i8));
      v28[75] = vcvtq_f32_s32(vmovl_high_s16(v67));
      v28[74] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v67.i8));
      v28[77] = vcvtq_f32_s32(vmovl_high_s16(v68));
      v28[76] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v68.i8));
      v28[79] = vcvtq_f32_s32(vmovl_high_s16(v69));
      v28[78] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v69.i8));
      if (++v6 >= *(_QWORD *)(a3 + 48))
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t webrtc::SpsParser::ParseSpsUpToVui@<X0>(uint8x16_t *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  int ExponentialGolomb;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  char v13;
  _BYTE *v14;
  int v15;
  int v16;
  _BYTE *v17;
  int v18;
  uint64_t result;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  _BYTE *v27;
  int v28;
  unsigned int v29;
  int v30;
  BOOL v31;
  _BYTE *v32;
  int v33;
  int v34;
  char v35;
  signed int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  char *v48;
  int v49;
  _BYTE *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  char v56;
  char v57;
  int v58;
  int v59;
  _BYTE *v60;
  int v61;
  int v62;
  int v63;
  char v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;

  this->i8[12] = 0;
  v5 = this->i32[2];
  if (v5 > 7)
  {
    this->i32[2] = v5 - 8;
    v9 = (unsigned __int8 *)(this->i64[0] + 1);
    v10 = *(unsigned __int8 *)this->i64[0];
    this->i64[0] = (uint64_t)v9;
    if ((v5 & 7) != 0)
      v10 = ((v10 & ~(-1 << (v5 & 7))) << (8 - (v5 & 7))) | (*v9 >> (v5 & 7));
    this->i8[12] = 0;
    v11 = v5 - 24;
    if (v5 >= 0x18)
      this->i64[0] = (uint64_t)&v9[((v5 - 1) >> 3) - ((v5 - 17) >> 3)];
    else
      v11 = -1;
    this->i32[2] = v11;
    ExponentialGolomb = webrtc::BitstreamReader::ReadExponentialGolomb(this);
    v7 = 0;
    v8 = 1;
    switch((char)v10)
    {
      case 44:
      case 83:
      case 86:
      case 100:
      case 110:
      case 118:
      case 122:
      case -128:
      case -122:
      case -118:
      case -117:
        break;
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 84:
      case 85:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 119:
      case 120:
      case 121:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case -127:
      case -126:
      case -125:
      case -124:
      case -123:
      case -121:
      case -120:
      case -119:
        goto LABEL_24;
      default:
        if (v10 != 244)
          goto LABEL_24;
        break;
    }
    v8 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
    if (v8 == 3 && (this->i8[12] = 0, v12 = this->i32[2], v13 = v12 - 1, this->i32[2] = v12 - 1, v12 >= 1))
    {
      v14 = (_BYTE *)this->i64[0];
      v15 = v13 & 7;
      if (v15)
      {
        LODWORD(v14) = *v14 >> v15;
      }
      else
      {
        this->i64[0] = (uint64_t)(v14 + 1);
        LOBYTE(v14) = *v14;
      }
      v7 = v14 & 1;
    }
    else
    {
      v7 = 0;
    }
    webrtc::BitstreamReader::ReadExponentialGolomb(this);
    webrtc::BitstreamReader::ReadExponentialGolomb(this);
    this->i8[12] = 0;
    v16 = this->i32[2];
    if (v16 <= 0)
    {
      this->i32[2] = -2;
      goto LABEL_24;
    }
    v17 = (_BYTE *)(this->i64[0] + (int)(((v16 + 7) >> 3) - ((v16 + 6) >> 3)));
    this->i64[0] = (uint64_t)v17;
    this->i8[12] = 0;
    v18 = v16 - 2;
    this->i32[2] = v16 - 2;
    if (v16 != 1)
    {
      if ((v18 & 7) != 0)
      {
        if (((*v17 >> (v18 & 7)) & 1) == 0)
          goto LABEL_24;
      }
      else
      {
        this->i64[0] = (uint64_t)(v17 + 1);
        if ((*v17 & 1) == 0)
          goto LABEL_24;
      }
      v29 = 0;
      if (v8 == 3)
        v30 = 12;
      else
        v30 = 8;
      do
      {
        this->i8[12] = 0;
        v31 = __OFSUB__(v18--, 1);
        this->i32[2] = v18;
        if (v18 < 0 == v31)
        {
          v32 = (_BYTE *)this->i64[0];
          if ((v18 & 7) != 0)
          {
            if (((*v32 >> (v18 & 7)) & 1) != 0)
              goto LABEL_46;
          }
          else
          {
            this->i64[0] = (uint64_t)(v32 + 1);
            if ((*v32 & 1) != 0)
            {
LABEL_46:
              if (v29 >= 6)
                v33 = 64;
              else
                v33 = 16;
              v34 = 8;
              v35 = 8;
              while (1)
              {
                if (!v34)
                  goto LABEL_50;
                result = webrtc::BitstreamReader::ReadExponentialGolomb(this);
                v36 = (result + 1) >> 1;
                if ((result & 1) == 0)
                  v36 = -(result >> 1);
                this->i8[12] = 1;
                v18 = this->i32[2];
                if (v18 < 0 || v36 < -128 || v36 > 127)
                  goto LABEL_67;
                v34 = (v36 + v35);
                if (v34)
                {
                  v35 = v34;
                  if (!--v33)
                    break;
                }
                else
                {
LABEL_50:
                  v34 = 0;
                  if (!--v33)
                    break;
                }
              }
            }
          }
        }
        ++v29;
      }
      while (v29 != v30);
    }
  }
  else
  {
    this->i32[2] = -1;
    ExponentialGolomb = webrtc::BitstreamReader::ReadExponentialGolomb(this);
    v7 = 0;
    v8 = 1;
  }
LABEL_24:
  result = webrtc::BitstreamReader::ReadExponentialGolomb(this);
  this->i8[12] = 1;
  if (this->i32[2] < 0)
    goto LABEL_67;
  v20 = result;
  if (result >= 0xD)
    goto LABEL_67;
  v21 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
  v22 = v21;
  if (v21 == 1)
  {
    this->i8[12] = 0;
    v25 = this->i32[2];
    v26 = v25 - 1;
    this->i32[2] = v25 - 1;
    if (v25 < 1)
    {
      v23 = 0;
    }
    else
    {
      v27 = (_BYTE *)this->i64[0];
      v28 = v26 & 7;
      if (v28)
      {
        LODWORD(v27) = *v27 >> v28;
      }
      else
      {
        this->i64[0] = (uint64_t)(v27 + 1);
        LOBYTE(v27) = *v27;
      }
      v23 = v27 & 1;
    }
    webrtc::BitstreamReader::ReadExponentialGolomb(this);
    webrtc::BitstreamReader::ReadExponentialGolomb(this);
    v37 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
    if (v37)
    {
      v38 = v23;
      v39 = v37;
      while (1)
      {
        result = webrtc::BitstreamReader::ReadExponentialGolomb(this);
        this->i8[12] = 1;
        if (this->i32[2] < 0)
          goto LABEL_67;
        if (!--v39)
        {
          v68 = 4;
          v23 = v38;
          goto LABEL_70;
        }
      }
    }
LABEL_68:
    v24 = 4;
    goto LABEL_69;
  }
  if (v21)
  {
    v23 = 0;
    goto LABEL_68;
  }
  result = webrtc::BitstreamReader::ReadExponentialGolomb(this);
  this->i8[12] = 1;
  if (this->i32[2] < 0 || result > 0xC)
  {
LABEL_67:
    v40 = 0;
LABEL_91:
    *(_BYTE *)a2 = 0;
    goto LABEL_92;
  }
  v23 = 0;
  v24 = result + 4;
LABEL_69:
  v68 = v24;
LABEL_70:
  v41 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
  this->i8[12] = 0;
  v42 = this->i32[2];
  v43 = v42 - 1;
  v70 = ExponentialGolomb;
  if (v42 < 1)
    v43 = -1;
  else
    this->i64[0] += (int)(((v42 + 7) >> 3) - ((v42 + 6) >> 3));
  this->i32[2] = v43;
  v44 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
  result = webrtc::BitstreamReader::ReadExponentialGolomb(this);
  v45 = result;
  this->i8[12] = 0;
  v46 = this->i32[2];
  v47 = v46 - 1;
  this->i32[2] = v46 - 1;
  v69 = v41;
  if (v46 < 1)
    goto LABEL_79;
  v48 = (char *)this->i64[0];
  if ((v47 & 7) != 0)
  {
    if (((*v48 >> (v47 & 7)) & 1) == 0)
      goto LABEL_76;
LABEL_87:
    v49 = 1;
    this->i8[12] = 0;
    if (v47 >= 1)
      goto LABEL_80;
LABEL_88:
    v52 = -3;
    goto LABEL_89;
  }
  this->i64[0] = (uint64_t)(v48 + 1);
  v57 = *v48++;
  if ((v57 & 1) != 0)
    goto LABEL_87;
LABEL_76:
  if (v46 == 1)
  {
LABEL_79:
    this->i32[2] = -1;
    this->i8[12] = 0;
    goto LABEL_88;
  }
  v47 = v46 - 2;
  this->i64[0] = (uint64_t)&v48[((v46 + 6) >> 3) - ((v46 + 5) >> 3)];
  v49 = 0;
  this->i32[2] = v46 - 2;
  this->i8[12] = 0;
  if (v46 - 2 < 1)
    goto LABEL_88;
LABEL_80:
  v50 = (_BYTE *)(this->i64[0] + (int)(((v47 + 7) >> 3) - ((v47 + 6) >> 3)));
  this->i64[0] = (uint64_t)v50;
  this->i8[12] = 0;
  v51 = v47 - 2;
  this->i32[2] = v47 - 2;
  if (v47 == 1)
  {
    v52 = -2;
LABEL_89:
    this->i32[2] = v52;
LABEL_90:
    v40 = 0;
    this->i8[12] = 1;
    goto LABEL_91;
  }
  if ((v51 & 7) != 0)
  {
    v65 = v23;
    v66 = v7;
    v67 = v44;
    if (((*v50 >> (v51 & 7)) & 1) == 0)
      goto LABEL_84;
  }
  else
  {
    this->i64[0] = (uint64_t)(v50 + 1);
    v65 = v23;
    v66 = v7;
    v67 = v44;
    if ((*v50 & 1) == 0)
    {
LABEL_84:
      v53 = 0;
      v54 = 0;
      v55 = 0;
      result = 0;
      this->i8[12] = 0;
      v56 = v47 - 3;
      this->i32[2] = v47 - 3;
      if (v51 < 1)
        goto LABEL_90;
      goto LABEL_95;
    }
  }
  v58 = result;
  v53 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
  v54 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
  v55 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
  result = webrtc::BitstreamReader::ReadExponentialGolomb(this);
  v45 = v58;
  v59 = this->i32[2];
  this->i8[12] = 0;
  v56 = v59 - 1;
  this->i32[2] = v59 - 1;
  if (v59 < 1)
    goto LABEL_90;
LABEL_95:
  v60 = (_BYTE *)this->i64[0];
  v61 = v56 & 7;
  if (v61)
  {
    v62 = *v60 >> v61;
  }
  else
  {
    this->i64[0] = (uint64_t)(v60 + 1);
    LOBYTE(v62) = *v60;
  }
  v63 = v62 & 1;
  this->i8[12] = 1;
  if (v66 || !v8)
  {
    result = (result * (2 - v49));
    v55 *= 2 - v49;
  }
  else
  {
    v64 = (v8 - 1) < 2;
    v53 <<= v64;
    v54 <<= v64;
    if (v8 == 1)
    {
      v55 *= 2;
      result = (2 * result);
    }
  }
  *(_DWORD *)a2 = v67;
  *(_DWORD *)(a2 + 4) = v45;
  *(_DWORD *)(a2 + 8) = 16 * v67 - (v53 + v54) + 16;
  *(_DWORD *)(a2 + 12) = 32 - 16 * v49 + (32 - 16 * v49) * v45 - (v55 + result);
  *(_DWORD *)(a2 + 16) = v65;
  *(_DWORD *)(a2 + 20) = v66;
  *(_DWORD *)(a2 + 24) = v49;
  *(_DWORD *)(a2 + 28) = v20 + 4;
  *(_DWORD *)(a2 + 32) = v68;
  *(_DWORD *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 40) = v69;
  *(_DWORD *)(a2 + 44) = v63;
  v40 = 1;
  *(_DWORD *)(a2 + 48) = v70;
LABEL_92:
  *(_BYTE *)(a2 + 52) = v40;
  return result;
}

uint64_t webrtc::SpsVuiRewriter::ParseAndRewriteSps(webrtc::H264 *a1, size_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  __int128 v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  int v49;
  unint64_t v50;
  char *v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  size_t v57;
  unsigned int v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unsigned __int8 *v73;
  unsigned int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  BOOL v79;
  int v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  _BOOL4 v90;
  __int32 v91;
  char v92;
  char v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  char v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unint64_t v110;
  unsigned __int8 *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  int v121;
  int v122;
  int v123;
  size_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  __int32 v137;
  unsigned int v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  size_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unsigned __int8 *v146;
  unsigned __int8 v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  BOOL v154;
  char *v160;
  unsigned int v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  unint64_t v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  _BYTE *v170;
  unsigned int v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  char v177;
  unint64_t v178;
  unint64_t v179;
  _BYTE *v180;
  __int32 v181;
  unsigned int v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  char v189;
  char *v190;
  unint64_t v191;
  unint64_t v192;
  _BYTE *v193;
  __int8 v194;
  unsigned __int8 *v195;
  int v196;
  unsigned int v197;
  unint64_t v198;
  int v199;
  unsigned __int8 *v200;
  int v201;
  unsigned int v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char v206;
  char *v207;
  unint64_t v208;
  unint64_t v209;
  _BYTE *v210;
  unsigned int v211;
  unint64_t v212;
  char *v213;
  unsigned int v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  unsigned int v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  size_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  unsigned int v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  char *v230;
  unsigned int v231;
  unint64_t v232;
  char *v233;
  int v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v244;
  char v245;
  uint64_t v246;
  int v247;
  unint64_t v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned __int32 v253;
  unint64_t v254;
  unint64_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int8x16_t v265;
  int64x2_t v266;
  unint64_t v267;
  unsigned int v268;
  char v269;
  unint64_t v270;
  unint64_t v271;
  uint8x16_t *v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  BOOL v276;
  unint64_t v277;
  uint64_t v278;
  int64x2_t v279;
  int64x2_t v280;
  int64x2_t v281;
  int64x2_t v282;
  int64x2_t v283;
  int64x2_t v284;
  int64x2_t v285;
  int64x2_t v286;
  int64x2_t v287;
  int64x2_t v288;
  int64x2_t v289;
  int64x2_t v290;
  int64x2_t v291;
  int8x16_t v292;
  int8x16_t v293;
  unint64_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  uint8x16_t v301;
  uint16x8_t v302;
  uint16x8_t v303;
  uint32x4_t v304;
  uint32x4_t v305;
  uint64x2_t v306;
  int8x16_t v307;
  uint32x4_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  uint32x4_t v312;
  int8x16_t v313;
  int8x16_t v314;
  int8x16_t v315;
  int8x16_t v316;
  uint64_t v317;
  unint64_t v318;
  BOOL v319;
  unint64_t v320;
  char *v321;
  unint64_t v322;
  char v323;
  unint64_t v324;
  unint64_t v325;
  _BYTE *v326;
  unint64_t v327;
  unsigned int v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  char *v332;
  unint64_t v333;
  char v334;
  unint64_t v335;
  unint64_t v336;
  _BYTE *v337;
  unsigned int v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  char *v342;
  unint64_t v343;
  char v344;
  unint64_t v345;
  unint64_t v346;
  _BYTE *v347;
  unint64_t v348;
  unint64_t v349;
  unsigned int v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  char *v354;
  unint64_t v355;
  char v356;
  unint64_t v357;
  unint64_t v358;
  _BYTE *v359;
  unsigned int v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  char *v364;
  unint64_t v365;
  char v366;
  unint64_t v367;
  unint64_t v368;
  _BYTE *v369;
  unint64_t v370;
  unint64_t v371;
  int v372;
  unsigned int v373;
  char *v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  char *v379;
  unint64_t v380;
  char v381;
  unint64_t v382;
  unint64_t v383;
  _BYTE *v384;
  unsigned int v385;
  unint64_t v386;
  unsigned __int8 *v387;
  unint64_t v388;
  unsigned int v389;
  unint64_t v390;
  unsigned __int8 *v391;
  unint64_t v392;
  unint64_t v393;
  unsigned __int8 *v394;
  unsigned __int8 *v395;
  unint64_t v396;
  char *v397;
  char v398;
  size_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  __int32 v405;
  unsigned __int8 *v406;
  std::string *v407;
  uint64_t v408;
  int v409;
  int v410;
  int v411;
  unsigned int v412;
  unint64_t v413[2];
  unsigned int v414;
  unint64_t v415[2];
  unsigned int v416;
  int64x2_t v417;
  _BOOL4 v418;
  int v419;
  int64x2_t v420;
  int v421;
  char *v422;
  size_t v423;
  unint64_t v424;
  uint64_t v425;
  _OWORD v426[2];
  rtc::BitBufferWriter *v427[2];
  int v428;
  char v429;
  uint8x16_t v430;
  _BYTE *v431;
  _BYTE *v432;

  webrtc::H264::ParseRbsp(a1, a2, (unint64_t *)&v431);
  v13 = (uint64_t)v431;
  v14 = v432 - v431;
  if (v432 == v431)
    v13 = 0;
  v430.i64[0] = v13;
  if (((v14 >> 28) & 0x1FFFFFFFFLL) != 0)
  {
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v9, v10, v11, v12, v408);
    goto LABEL_620;
  }
  v430.i32[2] = 8 * v14;
  v430.i8[12] = 1;
  webrtc::SpsParser::ParseSpsUpToVui(&v430, (uint64_t)v426);
  if (v429)
  {
    v15 = *(unsigned __int8 *)(a3 + 52);
    v16 = v426[1];
    *(_OWORD *)a3 = v426[0];
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)v427;
    *(_DWORD *)(a3 + 48) = v428;
    if (v15)
    {
      v17 = a2 + 64;
      if (a2 != -64)
      {
LABEL_7:
        v18 = (char *)operator new[]();
        goto LABEL_11;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 52) = 1;
      v17 = a2 + 64;
      if (a2 != -64)
        goto LABEL_7;
    }
    v18 = 0;
LABEL_11:
    v20 = v430.i32[2];
    v21 = 8 * (v432 - v431) - v430.i32[2];
    v22 = v21 >> 3;
    if ((v21 & 7) != 0)
      v23 = v22 + 1;
    else
      v23 = v21 >> 3;
    v422 = v18;
    v423 = v17;
    v424 = 0;
    v425 = 0;
    v430.i8[12] = 1;
    v24 = (v21 & 7) == 0;
    if ((v21 & 7) != 0)
      v25 = (v21 & 7) - 1;
    else
      v25 = 7;
    memcpy(v18, v431, v23);
    v26 = 0;
    v27 = 0;
    if (v17 >= v22 - v24)
    {
      if (v25 && v17 == v22 - v24)
      {
        v26 = 0;
        v27 = 0;
      }
      else
      {
        v424 = v22 - v24;
        v425 = v25;
        v26 = v25;
        v27 = v22 - v24;
      }
    }
    if (v429)
    {
      if (v26 == 8 * (v17 - v27))
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
          goto LABEL_384;
        goto LABEL_383;
      }
      v18[v27] = (-129 >> v26) & v18[v27] | (0x80u >> v26);
      v35 = v26 + 1;
      v36 = v27 + ((unint64_t)(v26 + 1) >> 3);
      v37 = v35 & 7;
      v424 = v36;
      v425 = v37;
      if (HIDWORD(v427[1]))
      {
        v430.i8[12] = 0;
        v38 = v20 - 1;
        if (v20 < 1)
        {
          if (v37 == 8 * (v17 - v36))
            goto LABEL_73;
          v41 = 0;
          v38 = -1;
        }
        else
        {
          v39 = v20 & 7;
          v430.i32[2] = v20 - 1;
          v40 = *(unsigned __int8 *)v430.i64[0];
          if (v39 < 2)
          {
            if (v39 == 1)
            {
              v41 = v40 & 1;
              ++v430.i64[0];
              if (v37 == 8 * (v17 - v36))
                goto LABEL_67;
            }
            else
            {
              v41 = v40 >> 7;
              if (v37 == 8 * (v17 - v36))
                goto LABEL_67;
            }
          }
          else
          {
            v41 = (v40 >> (v39 - 1)) & 1;
            if (v37 == 8 * (v17 - v36))
            {
LABEL_67:
              if (!v41)
                goto LABEL_73;
              goto LABEL_68;
            }
          }
        }
        v18[v36] = (-129 >> v37) & v18[v36] | ((_DWORD)v41 << 7 >> v37);
        v42 = v37 + 1;
        v36 += v42 >> 3;
        v37 = v42 & 7;
        v424 = v36;
        v425 = v37;
        if (!v41)
        {
          v57 = v17;
          goto LABEL_125;
        }
        v430.i8[12] = 0;
        v43 = v38 - 8;
        if (v38 >= 8)
        {
          v430.i32[2] = v38 - 8;
          v44 = v430.i64[0];
          v45 = *(unsigned __int8 *)v430.i64[0];
          v46 = v38 & 7;
          if (v46)
          {
            ++v430.i64[0];
            v45 = ((unint64_t)(v45 & ~(-1 << v46)) << (8 - v46)) | (*(unsigned __int8 *)(v44 + 1) >> v46);
            if (8 * (v17 - v36) - v37 < 8)
              goto LABEL_69;
          }
          else
          {
            ++v430.i64[0];
            if (8 * (v17 - v36) - v37 < 8)
            {
LABEL_69:
              if ((_BYTE)v45 == 0xFF)
              {
                v430.i8[12] = 0;
                goto LABEL_71;
              }
LABEL_73:
              v57 = v17;
LABEL_74:
              v430.i8[12] = 0;
              goto LABEL_75;
            }
          }
LABEL_42:
          v18[v36] = v18[v36] & ~((255 << v37) >> v37) | (v45 >> v37);
          if (v37)
            v18[v36 + 1] = v18[v36 + 1] & ~(-1 << (8 - v37)) | (v45 << 56 << (8 - v37) >> 56);
          v424 = ++v36;
          v425 = v37;
          if ((_BYTE)v45 != 0xFF)
          {
            v57 = v17;
            v38 = v43;
            goto LABEL_125;
          }
          v430.i8[12] = 0;
          if (v43 > 31)
          {
            v430.i32[2] = v43 - 32;
            v47 = 32;
            v48 = (unsigned __int8 *)v430.i64[0];
            v49 = v43 & 7;
            if ((v43 & 7) != 0)
            {
              v47 = 32 - v49;
              v48 = (unsigned __int8 *)(v430.i64[0] + 1);
              v50 = (unint64_t)(*(unsigned __int8 *)v430.i64[0]++ & ~(-1 << v49)) << (32 - v49);
            }
            else
            {
              v50 = 0;
            }
            v109 = v47;
            v110 = v47 - 8;
            v111 = v48 + 1;
            v62 = ((unint64_t)*v48 << v110) | v50;
            v430.i64[0] = (uint64_t)(v48 + 1);
            if (v47 >= 0x10)
            {
              v112 = v47 - 16;
              v62 |= (unint64_t)v48[1] << (v109 - 16);
              v111 = v48 + 2;
              v430.i64[0] = (uint64_t)(v48 + 2);
              if (v110 < 0x10)
              {
                LODWORD(v110) = v109 - 16;
              }
              else
              {
                LODWORD(v110) = v109 - 24;
                v62 |= (unint64_t)v48[2] << (v109 - 24);
                v111 = v48 + 3;
                v430.i64[0] = (uint64_t)(v48 + 3);
                if (v112 >= 0x10)
                {
                  LODWORD(v110) = v109 - 32;
                  v62 |= (unint64_t)v48[3] << (v109 - 32);
                  v111 = v48 + 4;
                  v430.i64[0] = (uint64_t)(v48 + 4);
                }
              }
            }
            if ((_DWORD)v110)
              v62 |= *v111 >> (8 - v110);
            goto LABEL_72;
          }
LABEL_71:
          v62 = 0;
          v430.i32[2] = -1;
LABEL_72:
          v63 = 8 * (v17 - v36) - v37;
          if (v63 < 0x20)
            goto LABEL_73;
          v18[v36] = v18[v36] & ~((255 << v37) >> v37) | (BYTE3(v62) >> v37);
          v76 = v37 | 0x18;
          v77 = v62 << 32 << (8 - v37);
          v78 = v18 + 1;
          do
          {
            v78[v36] = HIBYTE(v77);
            v77 <<= 8;
            v76 -= 8;
            ++v78;
          }
          while (v76 > 7);
          if (v76)
          {
            v78[v36] = v78[v36] & ~(255 << (8 - v76)) | HIBYTE(v77);
            v57 = v423;
            v36 = v424;
            v37 = v425;
            v63 = 8 * (v423 - v424) - v425;
          }
          else
          {
            v57 = v17;
          }
          if (v63 < 0x20)
            goto LABEL_74;
          v38 = v430.i32[2];
          v36 += (unint64_t)(v37 + 32) >> 3;
          v37 &= 7u;
          v424 = v36;
          v425 = v37;
LABEL_125:
          v430.i8[12] = 0;
          if (v38 >= 1)
          {
            v97 = v38 & 7;
            v430.i32[2] = v38 - 1;
            v98 = *(unsigned __int8 *)v430.i64[0];
            if (v97 < 2)
            {
              if (v97 == 1)
              {
                v64 = v98 & 1;
                ++v430.i64[0];
              }
              else
              {
                v64 = v98 >> 7;
              }
            }
            else
            {
              v64 = (v98 >> (v97 - 1)) & 1;
            }
            goto LABEL_76;
          }
LABEL_75:
          v64 = 0;
          v430.i32[2] = -1;
LABEL_76:
          if (v37 == 8 * (v57 - v36))
            goto LABEL_80;
          v65 = &v422[v36];
          *v65 = *v65 & ~(((v37 != 8) << 7) >> v37) | ((_DWORD)v64 << 7 >> v37);
          if (v37 == 8)
            v65[1] = v65[1] & 0x7F | ((v64 & 1) << 7);
          v57 = v423;
          v36 = v424;
          v37 = 8 * (v423 - v424);
          if (v37 == v425)
          {
LABEL_80:
            if (!v64)
              goto LABEL_182;
            v430.i8[12] = 0;
          }
          else
          {
            v36 = v424 + ((unint64_t)(v425 + 1) >> 3);
            v37 = (v425 + 1) & 7;
            v424 = v36;
            v425 = v37;
            v70 = v430.i32[2];
            if (!v64)
              goto LABEL_93;
            v430.i8[12] = 0;
            if (*(uint64_t *)((char *)v430.i64 + 4) > 0)
            {
              v71 = v430.i8[8] & 7;
              --v430.i32[2];
              v66 = *(unsigned __int8 *)v430.i64[0];
              if ((v70 & 7u) < 2)
              {
                if (v71 == 1)
                {
                  LODWORD(v66) = v66 & 1;
                  ++v430.i64[0];
                }
                else
                {
                  v66 >>= 7;
                }
              }
              else
              {
                LODWORD(v66) = (v66 >> (v71 - 1)) & 1;
              }
              goto LABEL_83;
            }
          }
          LODWORD(v66) = 0;
          v430.i32[2] = -1;
LABEL_83:
          if (v37 == 8 * (v57 - v36))
            goto LABEL_182;
          v67 = &v422[v36];
          *v67 = *v67 & ~(((v37 != 8) << 7) >> v37) | ((_DWORD)v66 << 7 >> v37);
          if (v37 == 8)
          {
            v67[1] = v67[1] & 0x7F | ((v66 & 1) << 7);
            v57 = v423;
            v68 = v424;
            v69 = v425;
            if (v425 == 8 * (v423 - v424))
              goto LABEL_182;
          }
          else
          {
            v57 = v423;
            v68 = v424;
            v69 = v425;
            if (v425 == 8 * (v423 - v424))
              goto LABEL_182;
          }
          v72 = v69 + 1;
          v36 = v68 + (v72 >> 3);
          v37 = v72 & 7;
          v424 = v36;
          v425 = v37;
          v70 = v430.i32[2];
LABEL_93:
          v430.i8[12] = 0;
          v430.i32[2] = v70 - 1;
          if (v70 < 1)
          {
LABEL_184:
            v430.i8[12] = 1;
            goto LABEL_185;
          }
          v73 = (unsigned __int8 *)v430.i64[0];
          v74 = ((_BYTE)v70 - 1) & 7;
          if ((((_BYTE)v70 - 1) & 7) != 0)
          {
            v75 = *(unsigned __int8 *)v430.i64[0] >> v74;
          }
          else
          {
            ++v430.i64[0];
            LOBYTE(v75) = *v73++;
          }
          v79 = (v75 & 1) == 0;
          if ((v75 & 1) == 0)
          {
            v80 = 0;
            v81 = 0;
            v82 = 3;
            v83 = 5;
            v84 = 3;
            v85 = 3;
            v430.i8[12] = 1;
            v86 = 0;
            if (a4)
            {
LABEL_109:
              v87 = *((_DWORD *)a4 + 1);
              v88 = *a4;
              v89 = v87 == 2;
              if (v87 == 2)
              {
                if (v88 != 2)
                {
                  v89 = 1;
                  v90 = 1;
                  goto LABEL_176;
                }
LABEL_161:
                v90 = a4[1] != 2 || a4[2] != 2;
                v88 = 2;
LABEL_176:
                if (v37 != 8 * (v57 - v36))
                {
                  v122 = a4[1];
                  v123 = a4[2];
                  v422[v36] = (-129 >> v37) & v422[v36] | (0x80u >> v37);
                  v124 = v423;
                  if (v425 != 8 * (v423 - v424))
                  {
                    v125 = v424 + ((unint64_t)(v425 + 1) >> 3);
                    v126 = (v425 + 1) & 7;
                    v424 = v125;
                    v425 = v126;
                    v127 = 5;
                    v128 = 1;
                    goto LABEL_575;
                  }
                }
LABEL_208:
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_186:
                  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v130, v82, v131, v132, v133, v134, v135, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h264/sps_vui_rewriter.cc");
LABEL_187:
                v136 = 1;
                v430.i8[12] = 0;
                v137 = v430.i32[2];
                if (*(uint64_t *)((char *)v430.i64 + 4) > 0)
                  goto LABEL_188;
                goto LABEL_240;
              }
              if (v88 != 2)
              {
                v89 = 0;
                v90 = 1;
                goto LABEL_176;
              }
              if (a4[1] != 2 || a4[2] != 2)
                goto LABEL_161;
              v419 = v81;
              v99 = v82;
              v100 = v84;
              v101 = v83;
              v102 = v85;
              v103 = rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, 0, 1uLL);
              v81 = v419;
              if ((v103 & 1) == 0)
                goto LABEL_208;
              v85 = v102;
              LODWORD(v83) = v101;
              v84 = v100;
              v82 = v99;
LABEL_217:
              v150 = 0;
              LODWORD(v127) = v83;
              v89 = v81;
              v151 = v80;
              v88 = v82;
              v152 = v84;
              v153 = v85;
              goto LABEL_218;
            }
LABEL_206:
            if (v37 == 8 * (v57 - v36))
              goto LABEL_208;
            v422[v36] = (-129 >> v37) & v422[v36] | ((v86 << 7) >> v37);
            v124 = v423;
            if (v425 == 8 * (v423 - v424))
              goto LABEL_208;
            v125 = v424 + ((unint64_t)(v425 + 1) >> 3);
            v126 = (v425 + 1) & 7;
            v424 = v125;
            v425 = v126;
            if (!v79)
            {
              v128 = v86;
              v127 = v83;
              v89 = v81;
              v90 = v80;
              v88 = v82;
              v122 = v84;
              v123 = v85;
LABEL_575:
              if (8 * (v124 - v125) - v126 >= 3)
              {
                v397 = &v422[v125];
                v398 = 3;
                if (8 - v126 < 3)
                  v398 = 8 - v126;
                *v397 = *v397 & ~(((255 << (8 - v398)) & 0xFEu) >> v126) | ((32 * (v127 & 7)) >> v126);
                if (v126 <= 5)
                {
                  v399 = v423;
                  v400 = v424;
                  v401 = v425;
                  if (8 * (v423 - v424) - v425 >= 3)
                  {
LABEL_580:
                    v402 = v401 + 3;
                    v403 = v400 + (v402 >> 3);
                    v404 = v402 & 7;
                    v424 = v403;
                    v425 = v404;
                    if (v404 == 8 * (v399 - v403)
                      || (v422[v403] = (-129 >> v404) & v422[v403] | ((v89 << 7) >> v404),
                          v425 == 8 * (v423 - v424)))
                    {
                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                        goto LABEL_186;
                      goto LABEL_187;
                    }
                    v409 = v128;
                    v410 = v85;
                    v412 = v82;
                    v414 = v123;
                    v416 = v122;
                    v411 = v84;
                    v421 = v81;
                    v424 += (unint64_t)(v425 + 1) >> 3;
                    v425 = (v425 + 1) & 7;
                    v418 = v90;
                    if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, v90, 1uLL) & 1) == 0)
                    {
                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                        goto LABEL_186;
                      goto LABEL_187;
                    }
                    v151 = v418;
                    if (v418)
                    {
                      if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, v88, 8uLL) & 1) == 0)
                      {
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                          goto LABEL_186;
                        goto LABEL_187;
                      }
                      if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, v416, 8uLL) & 1) == 0)
                      {
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                          goto LABEL_186;
                        goto LABEL_187;
                      }
                      if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, v414, 8uLL) & 1) == 0)
                      {
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                          goto LABEL_186;
                        goto LABEL_187;
                      }
                      v151 = 1;
                    }
                    v81 = v421;
                    v84 = v411;
                    v82 = v412;
                    v150 = v409;
                    v85 = v410;
                    v152 = v416;
                    v153 = v414;
LABEL_218:
                    v154 = v153 == v85 && v152 == v84;
                    if (v154
                      && v88 == (_DWORD)v82
                      && v151 == v80
                      && v89 == v81
                      && (_DWORD)v127 == (_DWORD)v83
                      && v150 == v86)
                    {
                      v136 = 1;
                    }
                    else
                    {
                      v136 = 2;
                    }
                    v430.i8[12] = 0;
                    v137 = v430.i32[2];
                    if (v430.i32[2] > 0)
                    {
LABEL_188:
                      v138 = v137 & 7;
                      v430.i32[2] = v137 - 1;
                      v139 = *(unsigned __int8 *)v430.i64[0];
                      if (v138 < 2)
                      {
                        if (v138 == 1)
                        {
                          v140 = v139 & 1;
                          ++v430.i64[0];
                          v142 = v423;
                          v141 = v424;
                          v143 = 8 * (v423 - v424);
                          v144 = v425;
                          if (v143 == v425)
                            goto LABEL_244;
                        }
                        else
                        {
                          v140 = v139 >> 7;
                          v142 = v423;
                          v141 = v424;
                          v143 = 8 * (v423 - v424);
                          v144 = v425;
                          if (v143 == v425)
                            goto LABEL_244;
                        }
                      }
                      else
                      {
                        v140 = (v139 >> (v138 - 1)) & 1;
                        v142 = v423;
                        v141 = v424;
                        v143 = 8 * (v423 - v424);
                        v144 = v425;
                        if (v143 == v425)
                          goto LABEL_244;
                      }
LABEL_241:
                      v160 = &v422[v141];
                      v422[v141] = v422[v141] & ~(((v144 != 8) << 7) >> v144) | ((_DWORD)v140 << 7 >> v144);
                      if (v144 == 8)
                        v160[1] = v160[1] & 0x7F | ((v140 & 1) << 7);
                      v142 = v423;
                      v141 = v424;
                      v143 = 8 * (v423 - v424);
                      if (v143 != v425)
                      {
                        v141 = v424 + ((unint64_t)(v425 + 1) >> 3);
                        v143 = (v425 + 1) & 7;
                        v424 = v141;
                        v425 = v143;
                        if (v140)
                        {
LABEL_245:
                          v161 = webrtc::BitstreamReader::ReadExponentialGolomb(&v430);
                          if (v161 == -1)
                            goto LABEL_256;
                          v162 = v161 + 1;
                          v163 = (2 * __clz(v162)) ^ 0x7F;
                          if (8 * (v423 - v424) - v425 < v163)
                            goto LABEL_256;
                          v164 = v162 << -(char)v163;
                          v165 = &v422[v424];
                          v166 = 8 - v425;
                          if (8 - v425 >= v163)
                            v167 = v163;
                          else
                            v167 = 8 - v425;
                          *v165 = *v165 & ~((255 << (8 - v167)) >> v425) | (HIBYTE(v164) >> v425);
                          v168 = v163 - v166;
                          if (v163 > v166)
                          {
                            v169 = v164 << v166;
                            v170 = v165 + 1;
                            if (v168 >= 8)
                            {
                              do
                              {
                                *v170++ = HIBYTE(v169);
                                v169 <<= 8;
                                v168 -= 8;
                              }
                              while (v168 > 7);
                            }
                            if (v168)
                              *v170 = *v170 & ~(-1 << (8 - v168)) | HIBYTE(v169);
                          }
                          if (8 * (v423 - v424) - v425 < v163)
                          {
LABEL_256:
                            v430.i32[2] = -1;
                            v171 = webrtc::BitstreamReader::ReadExponentialGolomb(&v430);
                            v142 = v423;
                            v141 = v424;
                            v143 = v425;
                            if (v171 != -1)
                            {
LABEL_257:
                              v172 = v171 + 1;
                              v173 = (2 * __clz(v172)) ^ 0x7F;
                              if (8 * (v142 - v141) - v143 >= v173)
                              {
                                v174 = v172 << -(char)v173;
                                v175 = &v422[v141];
                                v176 = 8 - v143;
                                if (8 - v143 >= v173)
                                  v177 = v173;
                                else
                                  v177 = 8 - v143;
                                *v175 = *v175 & ~((255 << (8 - v177)) >> v143) | (HIBYTE(v174) >> v143);
                                v178 = v173 - v176;
                                if (v173 > v176)
                                {
                                  v179 = v174 << v176;
                                  v180 = v175 + 1;
                                  if (v178 >= 8)
                                  {
                                    do
                                    {
                                      *v180++ = HIBYTE(v179);
                                      v179 <<= 8;
                                      v178 -= 8;
                                    }
                                    while (v178 > 7);
                                  }
                                  if (v178)
                                    *v180 = *v180 & ~(-1 << (8 - v178)) | HIBYTE(v179);
                                }
                                v142 = v423;
                                v141 = v424;
                                v143 = v425;
                                if (8 * (v423 - v424) - v425 >= v173)
                                {
                                  v141 = v424 + ((v425 + v173) >> 3);
                                  v143 = (v425 + v173) & 7;
                                  v424 = v141;
                                  v425 = v143;
                                  v181 = v430.i32[2];
                                  v430.i8[12] = 0;
                                  if (v430.i32[2] <= 0)
                                    goto LABEL_278;
LABEL_271:
                                  v182 = v181 & 7;
                                  v430.i32[2] = v181 - 1;
                                  v183 = *(unsigned __int8 *)v430.i64[0];
                                  if (v182 < 2)
                                  {
                                    if (v182 == 1)
                                    {
                                      v184 = v183 & 1;
                                      ++v430.i64[0];
                                    }
                                    else
                                    {
                                      v184 = v183 >> 7;
                                    }
                                  }
                                  else
                                  {
                                    v184 = (v183 >> (v182 - 1)) & 1;
                                  }
                                  goto LABEL_279;
                                }
                              }
                            }
                          }
                          else
                          {
                            v185 = v425 + v163;
                            v424 += v185 >> 3;
                            v425 = v185 & 7;
                            v171 = webrtc::BitstreamReader::ReadExponentialGolomb(&v430);
                            v142 = v423;
                            v141 = v424;
                            v143 = v425;
                            if (v171 != -1)
                              goto LABEL_257;
                          }
                          v430.i8[12] = 0;
                          goto LABEL_278;
                        }
LABEL_270:
                        v181 = v430.i32[2];
                        v430.i8[12] = 0;
                        if (*(uint64_t *)((char *)v430.i64 + 4) > 0)
                          goto LABEL_271;
LABEL_278:
                        v184 = 0;
                        v430.i32[2] = -1;
LABEL_279:
                        if (v143 == 8 * (v142 - v141))
                          goto LABEL_283;
                        v186 = &v422[v141];
                        *v186 = *v186 & ~(((v143 != 8) << 7) >> v143) | ((_DWORD)v184 << 7 >> v143);
                        if (v143 == 8)
                          v186[1] = v186[1] & 0x7F | ((v184 & 1) << 7);
                        v142 = v423;
                        v141 = v424;
                        v143 = 8 * (v423 - v424);
                        if (v143 == v425)
                        {
LABEL_283:
                          v430.i8[12] = 0;
                          if (!v184)
                            goto LABEL_328;
                        }
                        else
                        {
                          v141 = v424 + ((unint64_t)(v425 + 1) >> 3);
                          v143 = (v425 + 1) & 7;
                          v424 = v141;
                          v425 = v143;
                          v199 = v430.i32[2];
                          if (!v184)
                          {
LABEL_325:
                            v430.i8[12] = 0;
                            if (v199 > 0)
                            {
                              v214 = v199 & 7;
                              v430.i32[2] = v199 - 1;
                              v215 = *(unsigned __int8 *)v430.i64[0];
                              if (v214 < 2)
                              {
                                if (v214 == 1)
                                {
                                  v216 = v215 & 1;
                                  ++v430.i64[0];
                                }
                                else
                                {
                                  v216 = v215 >> 7;
                                }
                              }
                              else
                              {
                                v216 = (v215 >> (v214 - 1)) & 1;
                              }
                              goto LABEL_329;
                            }
LABEL_328:
                            v216 = 0;
                            v430.i32[2] = -1;
LABEL_329:
                            if (v143 == 8 * (v142 - v141))
                              goto LABEL_333;
                            v217 = &v422[v141];
                            *v217 = *v217 & ~(((v143 != 8) << 7) >> v143) | ((_DWORD)v216 << 7 >> v143);
                            if (v143 == 8)
                              v217[1] = v217[1] & 0x7F | ((v216 & 1) << 7);
                            if (v425 == 8 * (v423 - v424))
                            {
LABEL_333:
                              v430.i32[2] = -1;
                              if (!v216)
                                goto LABEL_335;
                            }
                            else
                            {
                              v424 += (unint64_t)(v425 + 1) >> 3;
                              v425 = (v425 + 1) & 7;
                              if (!v216)
                              {
LABEL_335:
                                v430.i8[12] = 0;
                                if (*(uint64_t *)((char *)v430.i64 + 4) <= 0)
                                {
                                  v220 = 0;
                                  v430.i32[2] = -1;
                                  v222 = v423;
                                  v221 = v424;
                                  v223 = 8 * (v423 - v424);
                                  v224 = v425;
                                  if (v223 == v425)
                                    goto LABEL_350;
                                }
                                else
                                {
                                  v218 = v430.i8[8] & 7;
                                  --v430.i32[2];
                                  v219 = *(unsigned __int8 *)v430.i64[0];
                                  if (v218 < 2)
                                  {
                                    if (v218 == 1)
                                    {
                                      v220 = v219 & 1;
                                      ++v430.i64[0];
                                      v222 = v423;
                                      v221 = v424;
                                      v223 = 8 * (v423 - v424);
                                      v224 = v425;
                                      if (v223 == v425)
                                        goto LABEL_350;
                                    }
                                    else
                                    {
                                      v220 = v219 >> 7;
                                      v222 = v423;
                                      v221 = v424;
                                      v223 = 8 * (v423 - v424);
                                      v224 = v425;
                                      if (v223 == v425)
                                        goto LABEL_350;
                                    }
                                  }
                                  else
                                  {
                                    v220 = (v219 >> (v218 - 1)) & 1;
                                    v222 = v423;
                                    v221 = v424;
                                    v223 = 8 * (v423 - v424);
                                    v224 = v425;
                                    if (v223 == v425)
                                      goto LABEL_350;
                                  }
                                }
                                v225 = &v422[v221];
                                *v225 = *v225 & ~(((v224 != 8) << 7) >> v224) | ((_DWORD)v220 << 7 >> v224);
                                if (v224 == 8)
                                  v225[1] = v225[1] & 0x7F | ((v220 & 1) << 7);
                                v222 = v423;
                                v221 = v424;
                                v223 = 8 * (v423 - v424);
                                if (v223 != v425)
                                {
                                  v221 = v424 + ((unint64_t)(v425 + 1) >> 3);
                                  v223 = (v425 + 1) & 7;
                                  v424 = v221;
                                  v425 = v223;
                                  if (v220)
                                    goto LABEL_351;
                                  goto LABEL_353;
                                }
LABEL_350:
                                v430.i32[2] = -1;
                                if (v220)
                                {
LABEL_351:
LABEL_354:
                                  v430.i8[12] = 0;
                                  if (*(uint64_t *)((char *)v430.i64 + 4) <= 0)
                                  {
                                    LODWORD(v228) = 0;
                                    v430.i32[2] = -1;
                                    v222 = v423;
                                    v221 = v424;
                                    v223 = 8 * (v423 - v424);
                                    v229 = v425;
                                    if (v223 == v425)
                                      goto LABEL_367;
                                  }
                                  else
                                  {
                                    v226 = v430.i8[8] & 7;
                                    --v430.i32[2];
                                    v227 = *(unsigned __int8 *)v430.i64[0];
                                    if (v226 < 2)
                                    {
                                      if (v226 == 1)
                                      {
                                        LODWORD(v228) = v227 & 1;
                                        ++v430.i64[0];
                                        v222 = v423;
                                        v221 = v424;
                                        v223 = 8 * (v423 - v424);
                                        v229 = v425;
                                        if (v223 == v425)
                                          goto LABEL_367;
                                      }
                                      else
                                      {
                                        v228 = v227 >> 7;
                                        v222 = v423;
                                        v221 = v424;
                                        v223 = 8 * (v423 - v424);
                                        v229 = v425;
                                        if (v223 == v425)
                                        {
LABEL_367:
                                          v430.i8[12] = 0;
                                          goto LABEL_372;
                                        }
                                      }
                                    }
                                    else
                                    {
                                      LODWORD(v228) = (v227 >> (v226 - 1)) & 1;
                                      v222 = v423;
                                      v221 = v424;
                                      v223 = 8 * (v423 - v424);
                                      v229 = v425;
                                      if (v223 == v425)
                                        goto LABEL_367;
                                    }
                                  }
                                  v230 = &v422[v221];
                                  *v230 = *v230 & ~(((v229 != 8) << 7) >> v229) | ((_DWORD)v228 << 7 >> v229);
                                  if (v229 == 8)
                                    v230[1] = v230[1] & 0x7F | ((v228 & 1) << 7);
                                  v222 = v423;
                                  v221 = v424;
                                  v223 = 8 * (v423 - v424);
                                  if (v223 == v425)
                                    goto LABEL_367;
                                  v221 = v424 + ((unint64_t)(v425 + 1) >> 3);
                                  v223 = (v425 + 1) & 7;
                                  v424 = v221;
                                  v425 = v223;
LABEL_369:
                                  v430.i8[12] = 0;
                                  if (*(uint64_t *)((char *)v430.i64 + 4) > 0)
                                  {
                                    v231 = v430.i8[8] & 7;
                                    --v430.i32[2];
                                    v232 = *(unsigned __int8 *)v430.i64[0];
                                    if (v231 < 2)
                                    {
                                      if (v231 == 1)
                                      {
                                        LODWORD(v232) = v232 & 1;
                                        ++v430.i64[0];
                                      }
                                      else
                                      {
                                        v232 >>= 7;
                                      }
                                    }
                                    else
                                    {
                                      LODWORD(v232) = (v232 >> (v231 - 1)) & 1;
                                    }
                                    goto LABEL_373;
                                  }
LABEL_372:
                                  LODWORD(v232) = 0;
                                  v430.i32[2] = -1;
LABEL_373:
                                  if (v223 == 8 * (v222 - v221))
                                    goto LABEL_377;
                                  v233 = &v422[v221];
                                  *v233 = *v233 & ~(((v223 != 8) << 7) >> v223) | ((_DWORD)v232 << 7 >> v223);
                                  if (v223 == 8)
                                    v233[1] = v233[1] & 0x7F | ((v232 & 1) << 7);
                                  v222 = v423;
                                  v221 = v424;
                                  v223 = 8 * (v423 - v424);
                                  if (v223 == v425)
                                  {
LABEL_377:
                                    v234 = 0;
                                    v430.i8[12] = 0;
                                    v430.i32[2] = -2;
                                  }
                                  else
                                  {
                                    v221 = v424 + ((unint64_t)(v425 + 1) >> 3);
                                    v223 = (v425 + 1) & 7;
                                    v424 = v221;
                                    v425 = v223;
                                    v244 = v430.i32[2];
                                    v430.i8[12] = 0;
                                    v245 = v430.i8[8] - 1;
                                    --v430.i32[2];
                                    if (v244 < 1)
                                    {
                                      v234 = 0;
                                    }
                                    else
                                    {
                                      v246 = v430.i64[0];
                                      v247 = v245 & 7;
                                      if (v247)
                                      {
                                        LODWORD(v246) = *(unsigned __int8 *)v430.i64[0] >> v247;
                                      }
                                      else
                                      {
                                        ++v430.i64[0];
                                        LOBYTE(v246) = *(_BYTE *)v246;
                                      }
                                      v234 = v246 & 1;
                                    }
                                  }
                                  if (v223 == 8 * (v222 - v221))
                                    goto LABEL_382;
                                  v235 = &v422[v221];
                                  *v235 = *v235 & ~(((v223 != 8) << 7) >> v223) | (0x80u >> v223);
                                  if (v223 == 8)
                                    v235[1] |= 0x80u;
                                  if (v425 == 8 * (v423 - v424))
                                  {
LABEL_382:
                                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
                                      goto LABEL_384;
                                    goto LABEL_383;
                                  }
                                  v248 = v424 + ((unint64_t)(v425 + 1) >> 3);
                                  v249 = (v425 + 1) & 7;
                                  v424 = v248;
                                  v425 = v249;
                                  if (!v234)
                                  {
                                    {
                                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_383:
                                        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h264/sps_vui_rewriter.cc");
LABEL_384:
                                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
                                      {
LABEL_386:
                                        v19 = 0;
                                        goto LABEL_387;
                                      }
LABEL_385:
                                      rtc::webrtc_logging_impl::Log("\r\t", v236, v237, v238, v239, v240, v241, v242, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h264/sps_vui_rewriter.cc");
                                      goto LABEL_386;
                                    }
                                    goto LABEL_403;
                                  }
                                  v430.i8[12] = 0;
                                  if (*(uint64_t *)((char *)v430.i64 + 4) <= 0)
                                  {
                                    v252 = 0;
                                    v430.i32[2] = -1;
                                  }
                                  else
                                  {
                                    v250 = v430.i8[8] & 7;
                                    --v430.i32[2];
                                    v251 = *(unsigned __int8 *)v430.i64[0];
                                    if (v250 < 2)
                                    {
                                      if (v250 == 1)
                                      {
                                        v252 = v251 & 1;
                                        ++v430.i64[0];
                                      }
                                      else
                                      {
                                        v252 = v251 >> 7;
                                      }
                                    }
                                    else
                                    {
                                      v252 = (v251 >> (v250 - 1)) & 1;
                                    }
                                  }
                                  if (v249 == 8 * (v423 - v248)
                                    || (v422[v248] = (-129 >> v249) & v422[v248] | ((v252 << 7) >> v249),
                                        v425 == 8 * (v423 - v424)))
                                  {
                                    v430.i32[2] = -1;
                                    v328 = webrtc::BitstreamReader::ReadExponentialGolomb(&v430);
                                    if (v328 == -1)
                                      goto LABEL_479;
                                  }
                                  else
                                  {
                                    v424 += (unint64_t)(v425 + 1) >> 3;
                                    v425 = (v425 + 1) & 7;
                                    v328 = webrtc::BitstreamReader::ReadExponentialGolomb(&v430);
                                    if (v328 == -1)
                                      goto LABEL_479;
                                  }
                                  v329 = v328 + 1;
                                  v330 = (2 * __clz(v329)) ^ 0x7F;
                                  if (8 * (v423 - v424) - v425 >= v330)
                                  {
                                    v331 = v329 << -(char)v330;
                                    v332 = &v422[v424];
                                    v333 = 8 - v425;
                                    if (8 - v425 >= v330)
                                      v334 = v330;
                                    else
                                      v334 = 8 - v425;
                                    *v332 = *v332 & ~((255 << (8 - v334)) >> v425) | (HIBYTE(v331) >> v425);
                                    v335 = v330 - v333;
                                    if (v330 > v333)
                                    {
                                      v336 = v331 << v333;
                                      v337 = v332 + 1;
                                      if (v335 >= 8)
                                      {
                                        do
                                        {
                                          *v337++ = HIBYTE(v336);
                                          v336 <<= 8;
                                          v335 -= 8;
                                        }
                                        while (v335 > 7);
                                      }
                                      if (v335)
                                        *v337 = *v337 & ~(-1 << (8 - v335)) | HIBYTE(v336);
                                    }
                                    if (8 * (v423 - v424) - v425 >= v330)
                                    {
                                      v349 = v425 + v330;
                                      v424 += v349 >> 3;
                                      v425 = v349 & 7;
                                      v338 = webrtc::BitstreamReader::ReadExponentialGolomb(&v430);
                                      if (v338 == -1)
                                        goto LABEL_492;
LABEL_480:
                                      v339 = v338 + 1;
                                      v340 = (2 * __clz(v339)) ^ 0x7F;
                                      if (8 * (v423 - v424) - v425 >= v340)
                                      {
                                        v341 = v339 << -(char)v340;
                                        v342 = &v422[v424];
                                        v343 = 8 - v425;
                                        if (8 - v425 >= v340)
                                          v344 = v340;
                                        else
                                          v344 = 8 - v425;
                                        *v342 = *v342 & ~((255 << (8 - v344)) >> v425) | (HIBYTE(v341) >> v425);
                                        v345 = v340 - v343;
                                        if (v340 > v343)
                                        {
                                          v346 = v341 << v343;
                                          v347 = v342 + 1;
                                          if (v345 >= 8)
                                          {
                                            do
                                            {
                                              *v347++ = HIBYTE(v346);
                                              v346 <<= 8;
                                              v345 -= 8;
                                            }
                                            while (v345 > 7);
                                          }
                                          if (v345)
                                            *v347 = *v347 & ~(-1 << (8 - v345)) | HIBYTE(v346);
                                        }
                                        if (8 * (v423 - v424) - v425 >= v340)
                                        {
                                          v348 = v425 + v340;
                                          v424 += v348 >> 3;
                                          v425 = v348 & 7;
                                          goto LABEL_493;
                                        }
                                      }
LABEL_492:
                                      v430.i32[2] = -1;
LABEL_493:
                                      v350 = webrtc::BitstreamReader::ReadExponentialGolomb(&v430);
                                      if (v350 == -1)
                                        goto LABEL_504;
                                      v351 = v350 + 1;
                                      v352 = (2 * __clz(v351)) ^ 0x7F;
                                      if (8 * (v423 - v424) - v425 < v352)
                                        goto LABEL_504;
                                      v353 = v351 << -(char)v352;
                                      v354 = &v422[v424];
                                      v355 = 8 - v425;
                                      if (8 - v425 >= v352)
                                        v356 = v352;
                                      else
                                        v356 = 8 - v425;
                                      *v354 = *v354 & ~((255 << (8 - v356)) >> v425) | (HIBYTE(v353) >> v425);
                                      v357 = v352 - v355;
                                      if (v352 > v355)
                                      {
                                        v358 = v353 << v355;
                                        v359 = v354 + 1;
                                        if (v357 >= 8)
                                        {
                                          do
                                          {
                                            *v359++ = HIBYTE(v358);
                                            v358 <<= 8;
                                            v357 -= 8;
                                          }
                                          while (v357 > 7);
                                        }
                                        if (v357)
                                          *v359 = *v359 & ~(-1 << (8 - v357)) | HIBYTE(v358);
                                      }
                                      if (8 * (v423 - v424) - v425 < v352)
                                      {
LABEL_504:
                                        v430.i32[2] = -1;
                                        v360 = webrtc::BitstreamReader::ReadExponentialGolomb(&v430);
                                        if (v360 == -1)
                                          goto LABEL_517;
                                      }
                                      else
                                      {
                                        v371 = v425 + v352;
                                        v424 += v371 >> 3;
                                        v425 = v371 & 7;
                                        v360 = webrtc::BitstreamReader::ReadExponentialGolomb(&v430);
                                        if (v360 == -1)
                                          goto LABEL_517;
                                      }
                                      v361 = v360 + 1;
                                      v362 = (2 * __clz(v361)) ^ 0x7F;
                                      if (8 * (v423 - v424) - v425 >= v362)
                                      {
                                        v363 = v361 << -(char)v362;
                                        v364 = &v422[v424];
                                        v365 = 8 - v425;
                                        if (8 - v425 >= v362)
                                          v366 = v362;
                                        else
                                          v366 = 8 - v425;
                                        *v364 = *v364 & ~((255 << (8 - v366)) >> v425) | (HIBYTE(v363) >> v425);
                                        v367 = v362 - v365;
                                        if (v362 > v365)
                                        {
                                          v368 = v363 << v365;
                                          v369 = v364 + 1;
                                          if (v367 >= 8)
                                          {
                                            do
                                            {
                                              *v369++ = HIBYTE(v368);
                                              v368 <<= 8;
                                              v367 -= 8;
                                            }
                                            while (v367 > 7);
                                          }
                                          if (v367)
                                            *v369 = *v369 & ~(-1 << (8 - v367)) | HIBYTE(v368);
                                        }
                                        if (8 * (v423 - v424) - v425 >= v362)
                                        {
                                          v370 = v425 + v362;
                                          v424 += v370 >> 3;
                                          v425 = v370 & 7;
LABEL_518:
                                          v372 = webrtc::BitstreamReader::ReadExponentialGolomb(&v430);
                                          v373 = webrtc::BitstreamReader::ReadExponentialGolomb(&v430);
                                          if (v425 == 8 * (v423 - v424))
                                            goto LABEL_523;
                                          v374 = &v422[v424];
                                          v154 = v425 == 8;
                                          v422[v424] = v422[v424] & ~(((v425 != 8) << 7) >> v425) | (0x80u >> v425);
                                          if (v154)
                                            v374[1] |= 0x80u;
                                          if (v425 == 8 * (v423 - v424))
                                          {
LABEL_523:
                                            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                                              goto LABEL_383;
                                            goto LABEL_384;
                                          }
                                          v375 = v424 + ((unint64_t)(v425 + 1) >> 3);
                                          v376 = (v425 + 1) & 7;
                                          v424 = v375;
                                          v425 = v376;
                                          if (LODWORD(v427[1]) == -1)
                                            goto LABEL_536;
                                          v377 = (2 * __clz(LODWORD(v427[1]) + 1)) ^ 0x7F;
                                          if (8 * (v423 - v375) - v376 < v377)
                                            goto LABEL_536;
                                          v378 = (LODWORD(v427[1]) + 1) << -(char)v377;
                                          v379 = &v422[v375];
                                          v380 = 8 - v376;
                                          if (8 - v376 >= v377)
                                            v381 = v377;
                                          else
                                            v381 = 8 - v376;
                                          *v379 = *v379 & ~((255 << (8 - v381)) >> v376) | (HIBYTE(v378) >> v376);
                                          v382 = v377 - v380;
                                          if (v377 > v380)
                                          {
                                            v383 = v378 << v380;
                                            v384 = v379 + 1;
                                            if (v382 >= 8)
                                            {
                                              do
                                              {
                                                *v384++ = HIBYTE(v383);
                                                v383 <<= 8;
                                                v382 -= 8;
                                              }
                                              while (v382 > 7);
                                            }
                                            if (v382)
                                              *v384 = *v384 & ~(-1 << (8 - v382)) | HIBYTE(v383);
                                          }
                                          if (8 * (v423 - v424) - v425 < v377)
                                          {
LABEL_536:
                                            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                                              goto LABEL_383;
                                            goto LABEL_384;
                                          }
                                          v396 = v425 + v377;
                                          v424 += v396 >> 3;
                                          v425 = v396 & 7;
                                          if (!v372 && v373 <= LODWORD(v427[1]))
                                          {
                                            v430.i8[12] = 1;
                                            v253 = v430.u32[2];
                                            if (v430.i32[2] < 0)
                                              goto LABEL_384;
                                            if (v136 == 1)
                                            {
                                              v19 = 1;
LABEL_387:
                                              if (v18)
                                                MEMORY[0x20BD0ADD4](v18, 0x1000C8077774924);
                                              goto LABEL_389;
                                            }
LABEL_404:
                                            if (v253)
                                            {
                                              v254 = v253 & 7;
                                              if ((v253 & 7) == 0)
                                              {
LABEL_408:
                                                v256 = (int64x2_t)xmmword_208F05970;
                                                v257 = (int64x2_t)xmmword_208F05980;
                                                v258 = (int64x2_t)xmmword_208F05990;
                                                v259 = (int64x2_t)xmmword_208F059A0;
                                                v260 = (int64x2_t)xmmword_208F059B0;
                                                v261 = (int64x2_t)xmmword_208F059C0;
                                                v262 = (int64x2_t)xmmword_208F059D0;
                                                v263 = (int64x2_t)xmmword_208F059E0;
                                                v264 = vdupq_n_s64(0xFFFFFFF8uLL);
                                                v265.i64[0] = 0xFFFFFFFFLL;
                                                v265.i64[1] = 0xFFFFFFFFLL;
                                                v266 = vdupq_n_s64(0xFFFFFFFFFFFFFF80);
                                                while (1)
                                                {
                                                  if (v253 >= 0x20)
                                                    v267 = 32;
                                                  else
                                                    v267 = v253;
                                                  v430.i8[12] = 0;
                                                  v268 = v253 & 7;
                                                  v430.i32[2] = v253 - v267;
                                                  v269 = (v253 & 7) - v267;
                                                  if (v268 > v267)
                                                  {
                                                    v270 = (*(unsigned __int8 *)v430.i64[0] >> v269) & ~(-1 << v267);
                                                    goto LABEL_437;
                                                  }
                                                  if (v268)
                                                  {
                                                    LODWORD(v271) = v267 - v268;
                                                    v270 = (unint64_t)(*(unsigned __int8 *)v430.i64[0]++ & ~(-1 << v268)) << (v267 - v268);
                                                  }
                                                  else
                                                  {
                                                    v270 = 0;
                                                    LODWORD(v271) = v267;
                                                  }
                                                  if ((int)v271 >= 8)
                                                  {
                                                    v272 = (uint8x16_t *)v430.i64[0];
                                                    v273 = v271;
                                                    v276 = v271 >= 0xFuLL;
                                                    v274 = v271 - 15;
                                                    if (!v276)
                                                      v274 = 0;
                                                    if (v274 < 0x71)
                                                      goto LABEL_432;
                                                    v275 = v273 - 15;
                                                    if (v273 < 0xF)
                                                      v275 = 0;
                                                    v276 = (unint64_t)&v430 >= v430.i64[0]
                                                                                    + ((v275 + 7) >> 3)
                                                                                    + 1
                                                        || v430.i64[0] >= (unint64_t)&v430.u64[1];
                                                    if (!v276)
                                                    {
LABEL_432:
                                                      v271 = v273;
                                                      v278 = v430.i64[0];
LABEL_433:
                                                      v317 = v278 + 1;
                                                      v318 = v271;
                                                      do
                                                      {
                                                        LODWORD(v271) = v318 - 8;
                                                        v270 |= (unint64_t)*(unsigned __int8 *)(v317 - 1) << (v318 - 8);
                                                        v430.i64[0] = v317++;
                                                        v319 = v318 > 0xF;
                                                        v318 -= 8;
                                                      }
                                                      while (v319);
                                                      goto LABEL_435;
                                                    }
                                                    v277 = ((v274 + 7) >> 3) + 1;
                                                    v271 = v273 - 8 * (v277 & 0x7FFFFFF0);
                                                    v278 = v430.i64[0] + (v277 & 0x7FFFFFF0);
                                                    v279 = vdupq_n_s64(v273);
                                                    v417 = v257;
                                                    v420 = v256;
                                                    v280 = vaddq_s64(v279, v256);
                                                    v281 = vaddq_s64(v279, v257);
                                                    *(int64x2_t *)v413 = v259;
                                                    *(int64x2_t *)v415 = v258;
                                                    v282 = vaddq_s64(v279, v258);
                                                    v283 = vaddq_s64(v279, v259);
                                                    v284 = v260;
                                                    v285 = vaddq_s64(v279, v260);
                                                    v286 = v261;
                                                    v287 = vaddq_s64(v279, v261);
                                                    v288 = v262;
                                                    v289 = vaddq_s64(v279, v262);
                                                    v290 = v263;
                                                    v291 = vaddq_s64(v279, v263);
                                                    v292 = 0uLL;
                                                    v293 = (int8x16_t)v270;
                                                    v294 = v277 & 0x7FFFFFF0;
                                                    v295 = 0uLL;
                                                    v296 = 0uLL;
                                                    v297 = 0uLL;
                                                    v298 = 0uLL;
                                                    v299 = 0uLL;
                                                    v300 = 0uLL;
                                                    do
                                                    {
                                                      v301 = *v272++;
                                                      v302 = vmovl_u8(*(uint8x8_t *)v301.i8);
                                                      v303 = vmovl_high_u8(v301);
                                                      v304 = vmovl_u16(*(uint16x4_t *)v303.i8);
                                                      v305 = vmovl_high_u16(v303);
                                                      v306.i64[0] = v305.u32[2];
                                                      v306.i64[1] = v305.u32[3];
                                                      v307 = (int8x16_t)vshlq_u64(v306, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v280, v264), v265));
                                                      v308 = vmovl_u16(*(uint16x4_t *)v302.i8);
                                                      v306.i64[0] = v305.u32[0];
                                                      v306.i64[1] = v305.u32[1];
                                                      v309 = (int8x16_t)vshlq_u64(v306, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v281, v264), v265));
                                                      v306.i64[0] = v308.u32[0];
                                                      v306.i64[1] = v308.u32[1];
                                                      v310 = (int8x16_t)vshlq_u64(v306, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v291, v264), v265));
                                                      v306.i64[0] = v304.u32[2];
                                                      v306.i64[1] = v304.u32[3];
                                                      v311 = (int8x16_t)vshlq_u64(v306, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v282, v264), v265));
                                                      v312 = vmovl_high_u16(v302);
                                                      v306.i64[0] = v308.u32[2];
                                                      v306.i64[1] = v308.u32[3];
                                                      v313 = (int8x16_t)vshlq_u64(v306, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v289, v264), v265));
                                                      v306.i64[0] = v312.u32[0];
                                                      v306.i64[1] = v312.u32[1];
                                                      v314 = (int8x16_t)vshlq_u64(v306, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v287, v264), v265));
                                                      v306.i64[0] = v304.u32[0];
                                                      v306.i64[1] = v304.u32[1];
                                                      v315 = (int8x16_t)vshlq_u64(v306, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v283, v264), v265));
                                                      v306.i64[0] = v312.u32[2];
                                                      v306.i64[1] = v312.u32[3];
                                                      v296 = vorrq_s8((int8x16_t)vshlq_u64(v306, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v285, v264), v265)), v296);
                                                      v297 = vorrq_s8(v315, v297);
                                                      v295 = vorrq_s8(v314, v295);
                                                      v292 = vorrq_s8(v313, v292);
                                                      v298 = vorrq_s8(v311, v298);
                                                      v293 = vorrq_s8(v310, v293);
                                                      v299 = vorrq_s8(v309, v299);
                                                      v300 = vorrq_s8(v307, v300);
                                                      v289 = vaddq_s64(v289, v266);
                                                      v291 = vaddq_s64(v291, v266);
                                                      v287 = vaddq_s64(v287, v266);
                                                      v285 = vaddq_s64(v285, v266);
                                                      v283 = vaddq_s64(v283, v266);
                                                      v282 = vaddq_s64(v282, v266);
                                                      v281 = vaddq_s64(v281, v266);
                                                      v280 = vaddq_s64(v280, v266);
                                                      v294 -= 16;
                                                    }
                                                    while (v294);
                                                    v430.i64[0] = (uint64_t)v272;
                                                    v316 = vorrq_s8(vorrq_s8(vorrq_s8(v293, v297), vorrq_s8(v295, v299)), vorrq_s8(vorrq_s8(v292, v298), vorrq_s8(v296, v300)));
                                                    v270 = (unint64_t)vorr_s8(*(int8x8_t *)v316.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v316, v316, 8uLL));
                                                    v257 = v417;
                                                    v256 = v420;
                                                    v259 = *(int64x2_t *)v413;
                                                    v258 = *(int64x2_t *)v415;
                                                    v260 = v284;
                                                    v261 = v286;
                                                    v262 = v288;
                                                    v263 = v290;
                                                    if (v277 != (v277 & 0x7FFFFFF0))
                                                      goto LABEL_433;
                                                  }
LABEL_435:
                                                  if ((int)v271 >= 1)
                                                    v270 |= *(unsigned __int8 *)v430.i64[0] >> (8 - v271);
LABEL_437:
                                                  if (8 * (v423 - v424) - v425 < v267)
                                                    goto LABEL_549;
                                                  v320 = v270 << -(char)v267;
                                                  v321 = &v422[v424];
                                                  v322 = 8 - v425;
                                                  if (8 - v425 >= v267)
                                                    v323 = v267;
                                                  else
                                                    v323 = 8 - v425;
                                                  v105 = *v321;
                                                  *v321 = v105 & ~((255 << (8 - v323)) >> v425) | (HIBYTE(v320) >> v425);
                                                  v324 = v267 - v322;
                                                  if (v267 > v322)
                                                  {
                                                    v325 = v320 << v322;
                                                    v326 = v321 + 1;
                                                    if (v324 >= 8)
                                                    {
                                                      do
                                                      {
                                                        *v326++ = HIBYTE(v325);
                                                        v325 <<= 8;
                                                        v324 -= 8;
                                                      }
                                                      while (v324 > 7);
                                                    }
                                                    if (v324)
                                                      *v326 = *v326 & ~(-1 << (8 - v324)) | HIBYTE(v325);
                                                  }
                                                  if (8 * (v423 - v424) - v425 < v267)
                                                    goto LABEL_549;
                                                  v327 = v425 + v267;
                                                  v424 += v327 >> 3;
                                                  v425 = v327 & 7;
                                                  v253 = v430.u32[2];
                                                  v430.i8[12] = 1;
                                                  if (v430.i32[2] <= 0)
                                                    goto LABEL_448;
                                                }
                                              }
                                              v430.i8[12] = 1;
                                              v255 = webrtc::BitstreamReader::ReadBits(&v430, v253 & 7);
                                              if (rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, v255, v254))
                                              {
                                                v253 = v430.u32[2];
                                                if (v430.i32[2] >= 1)
                                                  goto LABEL_408;
LABEL_448:
                                                v430.i8[12] = 1;
                                                if (!v253)
                                                  goto LABEL_559;
                                              }
                                              else
                                              {
LABEL_549:
                                                v430.i32[2] = -1;
                                                v430.i8[12] = 1;
                                              }
                                              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
                                                goto LABEL_386;
                                              goto LABEL_385;
                                            }
                                            v430.i8[12] = 1;
LABEL_559:
                                            v393 = v424;
                                            if (v425)
                                            {
                                              rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, 0, 8 - v425);
                                              ++v393;
                                            }
                                            if (a5)
                                            {
                                              if (v17 >= v393)
                                              {
                                                v395 = (unsigned __int8 *)v18;
                                              }
                                              else
                                              {
                                                v394 = (unsigned __int8 *)operator new[]();
                                                v395 = v394;
                                                if (v18)
                                                {
                                                  memcpy(v394, v18, v17);
                                                  MEMORY[0x20BD0ADD4](v18, 0x1000C8077774924);
                                                }
                                              }
                                              webrtc::H264::WriteRbsp(v395, v393, a5);
                                              v19 = 2;
                                              v18 = (char *)v395;
                                              goto LABEL_387;
                                            }
LABEL_620:
                                            v407 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h264/sps_vui_rewriter.cc", 204, "destination != nullptr", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v105, v106, v107, v108, v408);
                                            return webrtc::SpsVuiRewriter::ParseOutgoingBitstreamAndRewrite(v407);
                                          }
LABEL_403:
                                          v430.i8[12] = 1;
                                          v253 = v430.u32[2];
                                          if (v430.i32[2] < 0)
                                            goto LABEL_384;
                                          goto LABEL_404;
                                        }
                                      }
LABEL_517:
                                      v430.i32[2] = -1;
                                      goto LABEL_518;
                                    }
                                  }
LABEL_479:
                                  v430.i32[2] = -1;
                                  v338 = webrtc::BitstreamReader::ReadExponentialGolomb(&v430);
                                  if (v338 == -1)
                                    goto LABEL_492;
                                  goto LABEL_480;
                                }
LABEL_353:
                                if (!v216)
                                  goto LABEL_369;
                                goto LABEL_354;
                              }
                            }
                            goto LABEL_335;
                          }
                          v430.i8[12] = 0;
                          if (v430.i32[2] > 31)
                          {
                            v430.i32[2] -= 32;
                            v200 = (unsigned __int8 *)v430.i64[0];
                            v201 = v199 & 7;
                            if ((v199 & 7) != 0)
                            {
                              v202 = 32 - v201;
                              v200 = (unsigned __int8 *)(v430.i64[0] + 1);
                              v203 = (unint64_t)(*(unsigned __int8 *)v430.i64[0]++ & ~(-1 << v201)) << (32 - v201);
                            }
                            else
                            {
                              v203 = 0;
                              v202 = 32;
                            }
                            v389 = v202;
                            v390 = v202 - 8;
                            v391 = v200 + 1;
                            v187 = ((unint64_t)*v200 << v390) | v203;
                            v430.i64[0] = (uint64_t)(v200 + 1);
                            if (v202 >= 0x10)
                            {
                              v392 = v202 - 16;
                              v187 |= (unint64_t)v200[1] << (v389 - 16);
                              v391 = v200 + 2;
                              v430.i64[0] = (uint64_t)(v200 + 2);
                              if (v390 < 0x10)
                              {
                                LODWORD(v390) = v389 - 16;
                              }
                              else
                              {
                                LODWORD(v390) = v389 - 24;
                                v187 |= (unint64_t)v200[2] << (v389 - 24);
                                v391 = v200 + 3;
                                v430.i64[0] = (uint64_t)(v200 + 3);
                                if (v392 >= 0x10)
                                {
                                  LODWORD(v390) = v389 - 32;
                                  v187 |= (unint64_t)v200[3] << (v389 - 32);
                                  v391 = v200 + 4;
                                  v430.i64[0] = (uint64_t)(v200 + 4);
                                }
                              }
                            }
                            if ((_DWORD)v390)
                              v187 |= *v391 >> (8 - v390);
LABEL_285:
                            if (8 * (v142 - v141) - v143 >= 0x20)
                            {
                              v188 = 8 - v143;
                              v189 = 32;
                              if ((unint64_t)(8 - v143) < 0x20)
                                v189 = 8 - v143;
                              v190 = &v422[v141];
                              v422[v141] = v422[v141] & ~((255 << (8 - v189)) >> v143) | (BYTE3(v187) >> v143);
                              if (v188 >= 0x20)
                              {
                                v142 = v423;
                                v141 = v424;
                                v143 = v425;
                                if (8 * (v423 - v424) - v425 >= 0x20)
                                  goto LABEL_294;
                              }
                              else
                              {
                                v191 = v187 << 32 << v188;
                                v192 = v143 + 24;
                                v193 = v190 + 1;
                                if (v192 < 8)
                                  goto LABEL_292;
                                do
                                {
                                  *v193++ = HIBYTE(v191);
                                  v191 <<= 8;
                                  v192 -= 8;
                                }
                                while (v192 > 7);
                                if (v192)
LABEL_292:
                                  *v193 = *v193 & ~(-1 << (8 - v192)) | HIBYTE(v191);
                                v142 = v423;
                                v141 = v424;
                                v143 = v425;
                                if (8 * (v423 - v424) - v425 > 0x1F)
                                {
LABEL_294:
                                  v141 += (unint64_t)(v143 + 32) >> 3;
                                  v143 &= 7u;
                                  v424 = v141;
                                  v425 = v143;
                                  v194 = v430.i8[8];
                                  v430.i8[12] = 0;
                                  if (v430.i32[2] > 31)
                                  {
                                    v430.i32[2] -= 32;
                                    v195 = (unsigned __int8 *)v430.i64[0];
                                    v196 = v194 & 7;
                                    if (v196)
                                    {
                                      v197 = 32 - v196;
                                      v195 = (unsigned __int8 *)(v430.i64[0] + 1);
                                      v198 = (unint64_t)(*(unsigned __int8 *)v430.i64[0]++ & ~(-1 << v196)) << (32 - v196);
                                    }
                                    else
                                    {
                                      v198 = 0;
                                      v197 = 32;
                                    }
                                    v385 = v197;
                                    v386 = v197 - 8;
                                    v387 = v195 + 1;
                                    v204 = ((unint64_t)*v195 << v386) | v198;
                                    v430.i64[0] = (uint64_t)(v195 + 1);
                                    if (v197 >= 0x10)
                                    {
                                      v388 = v197 - 16;
                                      v204 |= (unint64_t)v195[1] << (v385 - 16);
                                      v387 = v195 + 2;
                                      v430.i64[0] = (uint64_t)(v195 + 2);
                                      if (v386 < 0x10)
                                      {
                                        LODWORD(v386) = v385 - 16;
                                      }
                                      else
                                      {
                                        LODWORD(v386) = v385 - 24;
                                        v204 |= (unint64_t)v195[2] << (v385 - 24);
                                        v387 = v195 + 3;
                                        v430.i64[0] = (uint64_t)(v195 + 3);
                                        if (v388 >= 0x10)
                                        {
                                          LODWORD(v386) = v385 - 32;
                                          v204 |= (unint64_t)v195[3] << (v385 - 32);
                                          v387 = v195 + 4;
                                          v430.i64[0] = (uint64_t)(v195 + 4);
                                        }
                                      }
                                    }
                                    if ((_DWORD)v386)
                                      v204 |= *v387 >> (8 - v386);
LABEL_304:
                                    if (8 * (v142 - v141) - v143 >= 0x20)
                                    {
                                      v205 = 8 - v143;
                                      v206 = 32;
                                      if ((unint64_t)(8 - v143) < 0x20)
                                        v206 = 8 - v143;
                                      v207 = &v422[v141];
                                      v422[v141] = v422[v141] & ~((255 << (8 - v206)) >> v143) | (BYTE3(v204) >> v143);
                                      if (v205 >= 0x20)
                                      {
                                        v142 = v423;
                                        v141 = v424;
                                        v143 = v425;
                                        if (8 * (v423 - v424) - v425 >= 0x20)
                                          goto LABEL_313;
                                      }
                                      else
                                      {
                                        v208 = v204 << 32 << v205;
                                        v209 = v143 + 24;
                                        v210 = v207 + 1;
                                        if (v209 < 8)
                                          goto LABEL_311;
                                        do
                                        {
                                          *v210++ = HIBYTE(v208);
                                          v208 <<= 8;
                                          v209 -= 8;
                                        }
                                        while (v209 > 7);
                                        if (v209)
LABEL_311:
                                          *v210 = *v210 & ~(-1 << (8 - v209)) | HIBYTE(v208);
                                        v142 = v423;
                                        v141 = v424;
                                        v143 = v425;
                                        if (8 * (v423 - v424) - v425 > 0x1F)
                                        {
LABEL_313:
                                          v141 += (unint64_t)(v143 + 32) >> 3;
                                          v143 &= 7u;
                                          v424 = v141;
                                          v425 = v143;
                                          v430.i8[12] = 0;
                                          if (*(uint64_t *)((char *)v430.i64 + 4) > 0)
                                          {
                                            v211 = v430.i8[8] & 7;
                                            --v430.i32[2];
                                            v212 = *(unsigned __int8 *)v430.i64[0];
                                            if (v211 < 2)
                                            {
                                              if (v211 == 1)
                                              {
                                                LODWORD(v212) = v212 & 1;
                                                ++v430.i64[0];
                                              }
                                              else
                                              {
                                                v212 >>= 7;
                                              }
                                            }
                                            else
                                            {
                                              LODWORD(v212) = (v212 >> (v211 - 1)) & 1;
                                            }
LABEL_319:
                                            if (v143 == 8 * (v142 - v141))
                                              goto LABEL_323;
                                            v213 = &v422[v141];
                                            *v213 = *v213 & ~(((v143 != 8) << 7) >> v143) | ((_DWORD)v212 << 7 >> v143);
                                            if (v143 == 8)
                                              v213[1] = v213[1] & 0x7F | ((v212 & 1) << 7);
                                            v142 = v423;
                                            v141 = v424;
                                            v143 = 8 * (v423 - v424);
                                            if (v143 == v425)
                                            {
LABEL_323:
                                              v430.i8[12] = 0;
                                              goto LABEL_328;
                                            }
                                            v141 = v424 + ((unint64_t)(v425 + 1) >> 3);
                                            v143 = (v425 + 1) & 7;
                                            v424 = v141;
                                            v425 = v143;
                                            v199 = v430.i32[2];
                                            goto LABEL_325;
                                          }
LABEL_318:
                                          LODWORD(v212) = 0;
                                          v430.i32[2] = -1;
                                          goto LABEL_319;
                                        }
                                      }
                                    }
                                    v430.i8[12] = 0;
                                    goto LABEL_318;
                                  }
LABEL_303:
                                  v204 = 0;
                                  v430.i32[2] = -1;
                                  goto LABEL_304;
                                }
                              }
                            }
                            v430.i8[12] = 0;
                            goto LABEL_303;
                          }
                        }
                        v187 = 0;
                        v430.i32[2] = -1;
                        goto LABEL_285;
                      }
LABEL_244:
                      v430.i32[2] = -1;
                      if (v140)
                        goto LABEL_245;
                      goto LABEL_270;
                    }
LABEL_240:
                    v140 = 0;
                    v430.i32[2] = -1;
                    v142 = v423;
                    v141 = v424;
                    v143 = 8 * (v423 - v424);
                    v144 = v425;
                    if (v143 == v425)
                      goto LABEL_244;
                    goto LABEL_241;
                  }
                }
                else
                {
                  v397[1] = v397[1] & ~(255 << (13 - v126)) | ((unint64_t)(v127 << 61 << (8 - v126)) >> 56);
                  v399 = v423;
                  v400 = v424;
                  v401 = v425;
                  if (8 * (v423 - v424) - v425 > 2)
                    goto LABEL_580;
                }
              }
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                goto LABEL_186;
              goto LABEL_187;
            }
            goto LABEL_217;
          }
          v430.i8[12] = 0;
          if (v70 < 4)
          {
            v91 = -3;
LABEL_183:
            v430.i32[2] = v91;
            goto LABEL_184;
          }
          v430.i32[2] = v70 - 4;
          if (v74 >= 4)
          {
            v83 = (*v73 >> (v74 - 3)) & 7;
            goto LABEL_181;
          }
          v120 = 3;
          if ((((_BYTE)v70 - 1) & 7) != 0)
          {
            v120 = 3 - v74;
            v121 = *v73++;
            v83 = (unint64_t)(v121 & ~(-1 << v74)) << (3 - v74);
            v430.i64[0] = (uint64_t)v73;
            if (v74 == 3)
            {
LABEL_181:
              v430.i8[12] = 0;
              v129 = v70 - 5;
              v430.i32[2] = v70 - 5;
              if (v70 >= 5)
              {
                if ((v129 & 7) != 0)
                {
                  v81 = (*v73 >> (v129 & 7)) & 1;
                  v145 = v70 - 6;
                  v430.i32[2] = v145;
                }
                else
                {
                  v146 = v73 + 1;
                  v430.i64[0] = (uint64_t)(v73 + 1);
                  v147 = *v73;
                  v430.i8[12] = 0;
                  v145 = v70 - 6;
                  v430.i32[2] = v145;
                  if (!v129)
                    goto LABEL_184;
                  v81 = v147 & 1;
                  v73 = v146;
                }
                v148 = v145 & 7;
                if ((v145 & 7) != 0)
                {
                  v149 = *v73 >> v148;
                }
                else
                {
                  v430.i64[0] = (uint64_t)(v73 + 1);
                  LOBYTE(v149) = *v73++;
                }
                if ((v149 & 1) == 0)
                {
                  v86 = 1;
                  v430.i8[12] = 1;
                  if (v145 < 0)
                  {
LABEL_185:
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
                      goto LABEL_187;
                    goto LABEL_186;
                  }
                  v80 = 0;
                  v79 = 0;
                  v85 = 3;
                  v84 = 3;
                  v82 = 3;
                  if (a4)
                    goto LABEL_109;
                  goto LABEL_206;
                }
                v430.i8[12] = 0;
                if (v145 < 8)
                  goto LABEL_214;
                v430.i32[2] = v145 - 8;
                v82 = *v73;
                v430.i64[0] = (uint64_t)(v73 + 1);
                if ((v145 & 7) != 0)
                  v82 = (((v82 & ~(-1 << v148)) << (8 - v148)) | (v73[1] >> v148));
                v430.i8[12] = 0;
                if (v145 > 15)
                {
                  v430.i32[2] = v145 - 16;
                  v84 = v73[1];
                  v430.i64[0] = (uint64_t)(v73 + 2);
                  if ((v145 & 7) != 0)
                    v84 = (((v84 & ~(-1 << v148)) << (8 - v148)) | (v73[2] >> v148));
                  v430.i8[12] = 0;
                  v276 = v145 >= 0x18;
                  v405 = v145 - 24;
                  if (v276)
                  {
                    v430.i32[2] = v405;
                    v85 = v73[2];
                    v406 = v73 + 3;
                    v430.i64[0] = (uint64_t)v406;
                    if (v148)
                      v85 = (((v85 & ~(-1 << v148)) << (8 - v148)) | (*v406 >> v148));
                    v80 = 1;
                    v430.i8[12] = 1;
                    v86 = 1;
                    if (a4)
                      goto LABEL_109;
                    goto LABEL_206;
                  }
                }
                else
                {
LABEL_214:
                  v430.i8[12] = 0;
                }
                v91 = -1;
                goto LABEL_183;
              }
LABEL_182:
              v91 = -2;
              goto LABEL_183;
            }
          }
          else
          {
            v83 = 0;
          }
          v83 |= *v73 >> (8 - v120);
          goto LABEL_181;
        }
LABEL_68:
        v45 = 0;
        v43 = -1;
        if (8 * (v17 - v36) - v37 < 8)
          goto LABEL_69;
        goto LABEL_42;
      }
      if (8 * (v17 - v36) - v37 < 2)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
          goto LABEL_384;
        goto LABEL_383;
      }
      v51 = &v18[v36];
      v52 = 8 - v37;
      if ((unint64_t)(8 - v37) >= 2)
        v52 = 2;
      *v51 &= ~(((255 << (8 - v52)) & 0xFEu) >> v37);
      if (v37 == 7)
        v51[1] &= ~0x80u;
      v53 = v37 + 2;
      v54 = v36 + (v53 >> 3);
      v55 = v53 & 7;
      v424 = v54;
      v425 = v55;
      if (a4)
      {
        v56 = *((_DWORD *)a4 + 1) != 2 && *a4 == 2 && a4[1] == 2 && a4[2] == 2;
        if (v55 != 8 * (v17 - v54))
        {
          if (v56)
            v58 = 0;
          else
            v58 = 128;
          v18[v54] = (-129 >> v55) & v18[v54] | (v58 >> v55);
          v59 = v55 + 1;
          v60 = v54 + ((unint64_t)(v55 + 1) >> 3);
          v61 = v59 & 7;
          v424 = v60;
          v425 = v61;
          if (v56)
          {
            if (8 * (v17 - v60) - v61 < 5)
              goto LABEL_147;
LABEL_115:
            v93 = 5;
            if ((unint64_t)(8 - v61) < 5)
              v93 = 8 - v61;
            v94 = &v422[v60];
            *v94 &= ~(((255 << (8 - v93)) & 0xFEu) >> v61);
            if ((unint64_t)(8 - v61) >= 5)
            {
              v95 = v424;
              v96 = v425;
              if (8 * (v423 - v424) - v425 >= 5)
                goto LABEL_149;
            }
            else
            {
              v94[1] &= ~(255 << (11 - v61));
              v95 = v424;
              v96 = v425;
              if (8 * (v423 - v424) - v425 > 4)
              {
LABEL_149:
                v104 = v96 + 5;
                v424 = v95 + (v104 >> 3);
                v425 = v104 & 7;
                if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, 1, 1uLL) & 1) == 0)
                {
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
                    goto LABEL_384;
                  goto LABEL_383;
                }
                {
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
                    goto LABEL_384;
                  goto LABEL_383;
                }
                goto LABEL_403;
              }
            }
LABEL_147:
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
              goto LABEL_384;
            goto LABEL_383;
          }
          if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, 5, 3uLL) & 1) == 0)
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
              goto LABEL_609;
            goto LABEL_608;
          }
          if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, *((_DWORD *)a4 + 1) == 2, 1uLL) & 1) == 0)
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
              goto LABEL_609;
            goto LABEL_608;
          }
          if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, 1, 1uLL) & 1) == 0)
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
              goto LABEL_609;
            goto LABEL_608;
          }
          if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, *a4, 8uLL) & 1) == 0)
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
              goto LABEL_609;
            goto LABEL_608;
          }
          if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, a4[1], 8uLL) & 1) != 0)
          {
            if (rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v422, a4[2], 8uLL))
            {
              v60 = v424;
              v61 = v425;
              if (8 * (v423 - v424) - v425 < 5)
                goto LABEL_147;
              goto LABEL_115;
            }
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
            {
LABEL_609:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                goto LABEL_383;
              goto LABEL_384;
            }
LABEL_608:
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v113, v114, v115, v116, v117, v118, v119, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h264/sps_vui_rewriter.cc");
            goto LABEL_609;
          }
LABEL_598:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
            goto LABEL_609;
          goto LABEL_608;
        }
      }
      else if (v55 != 8 * (v17 - v54))
      {
        v18[v54] &= ~(0x80u >> v55);
        v92 = v55 + 1;
        v60 = v54 + ((unint64_t)(v55 + 1) >> 3);
        v61 = v92 & 7;
        v424 = v60;
        v425 = v61;
        if (8 * (v17 - v60) - v61 < 5)
          goto LABEL_147;
        goto LABEL_115;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_384;
      goto LABEL_383;
    }
    __break(1u);
    goto LABEL_598;
  }
  v19 = 0;
LABEL_389:
  if (v431)
  {
    v432 = v431;
    operator delete(v431);
  }
  return v19;
}

void webrtc::SpsVuiRewriter::ParseOutgoingBitstreamAndRewrite(webrtc::H264 *a1@<X0>, const unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, size_t *a4@<X8>)
{
  webrtc::H264 *v5;
  char *v7;
  char *v8;
  size_t v9;
  char *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  size_t *v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  size_t v20;
  void *v21;
  void *v22;
  void *v23;
  const void *v24;
  size_t v25;
  void *v26;
  void *v27;
  size_t v28;
  char *v29;
  char *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  char *v34;
  char *v35;
  size_t v36;
  size_t v37;
  char *v38;
  char *v39;
  size_t v40;
  size_t v41;
  char *v42;
  char *v43;
  char *v45;
  webrtc::H264 *v46;
  size_t v47;
  size_t v48;
  char *v49;
  char *v50;
  size_t v51;
  size_t v52;
  size_t __n;
  uint64_t v54;
  void *__src;
  _BYTE v56[56];
  char *v57;
  char *v58;

  v5 = a1;
  webrtc::H264::FindNaluIndices(a1, a2, &v57);
  v7 = v57;
  v8 = v58;
  v9 = (size_t)&a2[0xAAAAAAAAAAAAAAC0 * ((unint64_t)(v58 - v57) >> 3)];
  *a4 = 0;
  a4[1] = v9;
  if (!v9)
  {
    v10 = 0;
    a4[2] = 0;
    if (v7 == v8)
      goto LABEL_67;
    goto LABEL_5;
  }
  v10 = (char *)operator new[]();
  v7 = v57;
  v8 = v58;
  a4[2] = (size_t)v10;
  if (v7 != v8)
  {
LABEL_5:
    v11 = 0;
    v45 = v8;
    v46 = v5;
    while (1)
    {
      v12 = v9;
      v13 = *((_QWORD *)v7 + 1);
      v14 = (char *)v5 + v13;
      v15 = *((_BYTE *)v5 + v13) & 0x1F;
      if (v15 == 9)
      {
        v9 = v12;
        goto LABEL_7;
      }
      v16 = a4;
      v17 = *(_QWORD *)v7;
      v18 = (char *)v5 + *(_QWORD *)v7;
      v19 = v13 - *(_QWORD *)v7;
      v20 = *((_QWORD *)v7 + 2);
      if (v15 != 7)
        goto LABEL_20;
      v47 = v13 - *(_QWORD *)v7;
      v49 = (char *)v5 + *(_QWORD *)v7;
      v51 = v11;
      __n = 0;
      v56[0] = 0;
      v56[52] = 0;
      v54 = 0;
      __src = 0;
      v21 = (void *)operator new[]();
      v22 = v21;
      v23 = __src;
      if (__src)
      {
        memcpy(v21, __src, __n);
        __src = v22;
        MEMORY[0x20BD0ADD4](v23, 0x1000C8077774924);
        v22 = __src;
      }
      else
      {
        __src = v21;
      }
      v54 = 1;
      *((_BYTE *)v22 + __n) = *v14;
      __n = 1;
      if (webrtc::SpsVuiRewriter::ParseAndRewriteSps((webrtc::H264 *)(v14 + 1), v20 - 1, (uint64_t)v56, a3, (uint64_t)&__n) != 2)
      {
        v27 = __src;
        __src = 0;
        v5 = v46;
        if (v27)
          MEMORY[0x20BD0ADD4](v27, 0x1000C8077774924);
        v18 = v49;
        v11 = v51;
        v19 = v47;
LABEL_20:
        if (v13 == v17)
        {
          a4 = v16;
          v8 = v45;
          v9 = v12;
          if (!v20)
            goto LABEL_7;
        }
        else
        {
          v28 = v19 + v11;
          v9 = v12;
          if (v12 >= v19 + v11)
          {
            v30 = v10;
            a4 = v16;
            v8 = v45;
          }
          else
          {
            v48 = v19;
            v50 = v18;
            v52 = v11;
            if (v12 + (v12 >> 1) <= v28)
              v9 = v19 + v11;
            else
              v9 = v12 + (v12 >> 1);
            v29 = (char *)operator new[]();
            v30 = v29;
            if (v10)
            {
              memcpy(v29, v10, v52);
              a4 = v16;
              v16[2] = (size_t)v30;
              MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
              v11 = v52;
              v8 = v45;
            }
            else
            {
              a4 = v16;
              v16[2] = (size_t)v29;
              v8 = v45;
              v11 = v52;
            }
            v19 = v48;
            v18 = v50;
            a4[1] = v9;
            v10 = v30;
          }
          memcpy(&v30[v11], v18, v19);
          *a4 = v28;
          v11 = v28;
          v5 = v46;
          if (!v20)
            goto LABEL_7;
        }
        v36 = v11 + v20;
        if (v9 >= v11 + v20)
        {
          v39 = v10;
        }
        else
        {
          v37 = v11;
          if (v9 + (v9 >> 1) <= v36)
            v9 = v11 + v20;
          else
            v9 += v9 >> 1;
          v38 = (char *)operator new[]();
          v39 = v38;
          if (v10)
          {
            memcpy(v38, v10, v37);
            a4[2] = (size_t)v39;
            MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
          }
          else
          {
            a4[2] = (size_t)v38;
          }
          v11 = v37;
          v5 = v46;
          a4[1] = v9;
          v10 = v39;
        }
        memcpy(&v39[v11], v14, v20);
        *a4 = v36;
LABEL_65:
        v11 = v36;
        goto LABEL_7;
      }
      v5 = v46;
      v24 = v49;
      if (v13 == v17)
        break;
      v31 = v51;
      v32 = v47;
      v33 = v47 + v51;
      v9 = v12;
      if (v12 >= v47 + v51)
      {
        v35 = v10;
        a4 = v16;
        v8 = v45;
      }
      else
      {
        if (v12 + (v12 >> 1) <= v33)
          v9 = v47 + v51;
        else
          v9 = v12 + (v12 >> 1);
        v34 = (char *)operator new[]();
        v35 = v34;
        a4 = v16;
        if (v10)
        {
          memcpy(v34, v10, v51);
          v16[2] = (size_t)v35;
          MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
        }
        else
        {
          v16[2] = (size_t)v34;
        }
        v8 = v45;
        v24 = v49;
        v31 = v51;
        a4[1] = v9;
        v10 = v35;
        v32 = v47;
      }
      memcpy(&v35[v31], v24, v32);
      *a4 = v33;
      v11 = v47 + v51;
      v26 = __src;
      v25 = __n;
      if (__n)
        goto LABEL_53;
LABEL_63:
      __src = 0;
      if (v26)
      {
        v36 = v11;
        MEMORY[0x20BD0ADD4](v26, 0x1000C8077774924);
        goto LABEL_65;
      }
LABEL_7:
      v7 += 24;
      if (v7 == v8)
      {
        v8 = v57;
        goto LABEL_67;
      }
    }
    a4 = v16;
    v8 = v45;
    v9 = v12;
    v11 = v51;
    v25 = __n;
    v26 = __src;
    if (!__n)
      goto LABEL_63;
LABEL_53:
    v40 = v25 + v11;
    if (v9 >= v25 + v11)
    {
      v43 = v10;
    }
    else
    {
      v41 = v11;
      if (v9 + (v9 >> 1) <= v40)
        v9 = v25 + v11;
      else
        v9 += v9 >> 1;
      v42 = (char *)operator new[]();
      v43 = v42;
      if (v10)
      {
        memcpy(v42, v10, v41);
        a4[2] = (size_t)v43;
        MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
      }
      else
      {
        a4[2] = (size_t)v42;
      }
      v11 = v41;
      v5 = v46;
      a4[1] = v9;
      v10 = v43;
    }
    memcpy(&v43[v11], v26, v25);
    *a4 = v40;
    v26 = __src;
    v11 = v40;
    goto LABEL_63;
  }
LABEL_67:
  if (v8)
  {
    v58 = v8;
    operator delete(v8);
  }
}

uint64_t webrtc::`anonymous namespace'::AddBitstreamRestriction(webrtc::_anonymous_namespace_ *this, rtc::BitBufferWriter *a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a2;
  if ((rtc::BitBufferWriter::WriteBits(this, 1, 1uLL) & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
LABEL_23:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h264/sps_vui_rewriter.cc");
    return 0;
  }
  if ((rtc::BitBufferWriter::WriteBits(this, 3, 3uLL) & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_23;
  }
  if ((rtc::BitBufferWriter::WriteBits(this, 2, 3uLL) & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_23;
  }
  if ((rtc::BitBufferWriter::WriteBits(this, 17, 9uLL) & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_23;
  }
  if ((rtc::BitBufferWriter::WriteBits(this, 17, 9uLL) & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_23;
  }
  if ((rtc::BitBufferWriter::WriteBits(this, 1, 1uLL) & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_23;
  }
  if (v2 != -1 && (rtc::BitBufferWriter::WriteBits(this, v2 + 1, (2 * __clz(v2 + 1)) ^ 0x7F) & 1) != 0)
    return 1;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    goto LABEL_23;
  return 0;
}

uint64_t webrtc::`anonymous namespace'::CopyHrdParameters(uint8x16_t *this, webrtc::BitstreamReader *a2, rtc::BitBufferWriter *a3)
{
  unsigned int ExponentialGolomb;
  unsigned int v6;
  int v7;
  __int32 *v8;
  __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;
  int v30;
  unsigned __int8 *v31;
  int v32;

  ExponentialGolomb = webrtc::BitstreamReader::ReadExponentialGolomb(this);
  v6 = ExponentialGolomb;
  if (ExponentialGolomb == -1
    || (rtc::BitBufferWriter::WriteBits(a2, ExponentialGolomb + 1, (2 * __clz(ExponentialGolomb + 1)) ^ 0x7F) & 1) == 0)
  {
    this->i8[12] = 0;
    v9 = &this->i8[12];
    v8 = &this->i32[2];
  }
  else
  {
    v8 = &this->i32[2];
    v7 = this->i32[2];
    this->i8[12] = 0;
    v9 = &this->i8[12];
    if (v7 > 7)
    {
      this->i32[2] = v7 - 8;
      v10 = this->i64[0];
      v11 = *(unsigned __int8 *)this->i64[0];
      v12 = v7 & 7;
      if (v12)
      {
        this->i64[0] = v10 + 1;
        if (!rtc::BitBufferWriter::WriteBits(a2, ((unint64_t)(v11 & ~(-1 << v12)) << (8 - v12)) | (*(unsigned __int8 *)(v10 + 1) >> v12), 8uLL))goto LABEL_33;
      }
      else
      {
        this->i64[0] = v10 + 1;
        if (!rtc::BitBufferWriter::WriteBits(a2, v11, 8uLL))
          goto LABEL_33;
      }
      goto LABEL_9;
    }
  }
  *v8 = -1;
  if (!rtc::BitBufferWriter::WriteBits(a2, 0, 8uLL))
  {
LABEL_33:
    *v9 = 0;
    goto LABEL_34;
  }
LABEL_9:
  v13 = *v8;
  *v9 = 1;
  if (v13 < 0)
    goto LABEL_33;
  v14 = 0;
  do
  {
    v15 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
    if (v15 == -1 || (rtc::BitBufferWriter::WriteBits(a2, v15 + 1, (2 * __clz(v15 + 1)) ^ 0x7F) & 1) == 0)
      *v8 = -1;
    v16 = webrtc::BitstreamReader::ReadExponentialGolomb(this);
    if (v16 == -1 || (rtc::BitBufferWriter::WriteBits(a2, v16 + 1, (2 * __clz(v16 + 1)) ^ 0x7F) & 1) == 0)
    {
      *v9 = 0;
LABEL_20:
      v20 = 0;
      *v8 = -1;
      goto LABEL_21;
    }
    v17 = *v8;
    *v9 = 0;
    if (v17 <= 0)
      goto LABEL_20;
    v18 = v17 & 7;
    this->i32[2] = v17 - 1;
    v19 = *(unsigned __int8 *)this->i64[0];
    if (v18 < 2)
    {
      if (v18 == 1)
      {
        v20 = v19 & 1;
        ++this->i64[0];
      }
      else
      {
        v20 = v19 >> 7;
      }
    }
    else
    {
      v20 = (v19 >> (v18 - 1)) & 1;
    }
LABEL_21:
    if (!rtc::BitBufferWriter::WriteBits(a2, v20, 1uLL))
      goto LABEL_33;
    v21 = *v8;
    *v9 = 1;
    if (v21 < 0)
      break;
    v22 = v14++ >= v6;
  }
  while (!v22);
  *v9 = 0;
  if (v21 < 20)
  {
LABEL_34:
    v28 = 0;
    *v8 = -1;
    goto LABEL_35;
  }
  this->i32[2] = v21 - 20;
  v23 = (unsigned __int8 *)this->i64[0];
  v24 = v21 & 7;
  if ((v21 & 7) != 0)
  {
    v25 = 20 - v24;
    v26 = *v23++;
    v27 = (unint64_t)(v26 & ~(-1 << v24)) << (20 - v24);
    this->i64[0] = (uint64_t)v23;
  }
  else
  {
    v27 = 0;
    v25 = 20;
  }
  v30 = v25 - 8;
  v31 = v23 + 1;
  v28 = ((unint64_t)*v23 << (v25 - 8)) | v27;
  this->i64[0] = (uint64_t)(v23 + 1);
  v22 = v25 >= 0x10;
  v32 = v25 - 16;
  if (v22)
  {
    v28 |= (unint64_t)v23[1] << v32;
    v31 = v23 + 2;
    this->i64[0] = (uint64_t)(v23 + 2);
    v30 = v32;
  }
  if (v30)
    v28 |= *v31 >> (8 - v30);
LABEL_35:
  result = rtc::BitBufferWriter::WriteBits(a2, v28, 0x14uLL);
  if ((result & 1) == 0)
    *v8 = -1;
  return result;
}

void cricket::SrtpSession::~SrtpSession(cricket::SrtpSession *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  pthread_mutexattr_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    *(_QWORD *)(v2 + 16) = 0;
    v3 = (_QWORD *)*((_QWORD *)this + 1);
    v4 = (_QWORD *)*v3;
    while (v4)
    {
      v5 = (_QWORD *)v4[15];
      v6 = srtp_stream_dealloc(v4, v3[1]);
      v4 = v5;
      if (v6)
        goto LABEL_11;
    }
    v7 = (_QWORD *)v3[1];
    if (!v7 || !srtp_stream_dealloc(v7, 0))
    {
      if (srtp_mod_alloc)
        srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v3);
      free(v3);
    }
  }
LABEL_11:
  if (*((_BYTE *)this + 24))
  {
    if ((v8 & 1) == 0
    {
      v18 = operator new();
      *(_OWORD *)v18 = 0u;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_QWORD *)(v18 + 64) = 0;
      pthread_mutexattr_init(&v19);
      pthread_mutexattr_setpolicy_np(&v19, 3);
      pthread_mutex_init((pthread_mutex_t *)v18, &v19);
      pthread_mutexattr_destroy(&v19);
      *(_DWORD *)(v18 + 64) = 0;
    }
    v10 = *(_DWORD *)(v9 + 64) - 1;
    *(_DWORD *)(v9 + 64) = v10;
    if (!v10
      && srtp_crypto_kernel_shutdown()
      && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
    }
    pthread_mutex_unlock((pthread_mutex_t *)v9);
  }
}

uint64_t cricket::SrtpSession::SetKey(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  pthread_mutexattr_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 8))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
    return 0;
  }
  if ((v19 & 1) == 0
  {
    v30 = operator new();
    *(_OWORD *)v30 = 0u;
    *(_OWORD *)(v30 + 16) = 0u;
    *(_OWORD *)(v30 + 32) = 0u;
    *(_OWORD *)(v30 + 48) = 0u;
    *(_QWORD *)(v30 + 64) = 0;
    pthread_mutexattr_init(&v31);
    pthread_mutexattr_setpolicy_np(&v31, 3);
    pthread_mutex_init((pthread_mutex_t *)v30, &v31);
    pthread_mutexattr_destroy(&v31);
    *(_DWORD *)(v30 + 64) = 0;
  }
  v21 = *(_DWORD *)(v20 + 64);
  if (v21)
  {
LABEL_6:
    *(_DWORD *)(v20 + 64) = v21 + 1;
    pthread_mutex_unlock((pthread_mutex_t *)v20);
    *(_BYTE *)(a1 + 24) = 1;
    return cricket::SrtpSession::DoSetKey(a1, a2, a3, a4, a5, a6);
  }
  if (srtp_crypto_kernel_init() || srtp_crypto_kernel_load_debug_module((uint64_t)&mod_srtp))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_10:
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
  }
  else
  {
    srtp_event_handler[0] = (uint64_t (*)())cricket::SrtpSession::HandleEventThunk;
    if (!external_crypto_init())
    {
      v21 = *(_DWORD *)(v20 + 64);
      goto LABEL_6;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      goto LABEL_10;
  }
  pthread_mutex_unlock((pthread_mutex_t *)v20);
  return 0;
}

uint64_t cricket::SrtpSession::ProtectRtp(cricket::SrtpSession *this, unsigned __int8 *a2, int a3, int a4, unsigned int *a5, __n128 a6)
{
  cricket::SrtpSession *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v7 = (cricket::SrtpSession *)*((_QWORD *)this + 1);
  if (!v7)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
    return 0;
  }
  if (*((_DWORD *)this + 4) + a3 > a4)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
    return 0;
  }
  if (*((_BYTE *)this + 40))
  {
    cricket::SrtpSession::DumpPacket(v7, a2, a3, 1);
    v7 = (cricket::SrtpSession *)*((_QWORD *)this + 1);
  }
  *a5 = a3;
  v25 = srtp_protect_mki((uint64_t *)v7, (uint64_t)a2, a5, 0, 0, a6);
  if (a3)
    v26 = a2;
  else
    v26 = 0;
  v27 = __rev16(*((unsigned __int16 *)v26 + 1));
  if (v25)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
    return 0;
  }
  *((_DWORD *)this + 7) = v27;
  return 1;
}

void cricket::SrtpSession::DumpPacket(cricket::SrtpSession *this, unsigned __int8 *a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;
  int v19;
  char v20;
  char v21;
  _QWORD v22[3];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  std::string v26;
  _QWORD *v27;
  std::string v28;
  std::string *v29;
  _QWORD v30[2];
  _QWORD v31[2];
  std::string v32;
  _QWORD *v33;
  std::string v34;
  std::string *v35;
  _QWORD v36[2];
  _QWORD v37[2];
  std::string v38;
  _QWORD *v39;
  std::string v40;
  std::string *v41;
  _QWORD v42[2];
  _QWORD v43[2];
  std::string v44;
  _QWORD *v45;
  std::string v46;
  std::string *v47;
  std::string v48;

  if (rtc::g_clock)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock) / 1000;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
      return;
  }
  else
  {
    gettimeofday((timeval *)&v46, 0);
    v7 = SLODWORD(v46.__r_.__value_.__r.__words[1]) + 1000000 * v46.__r_.__value_.__r.__words[0];
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
      return;
  }
  v8 = v7 / 1000 % 86400000;
  v22[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc";
  v22[1] = 4112;
  v22[2] = &v21;
  v23[0] = "\n";
  v23[1] = v22;
  v9 = "I";
  if (a4)
    v9 = "O";
  v24[0] = v9;
  v24[1] = v23;
  v25[0] = " ";
  v25[1] = v24;
  v20 = 48;
  rtc::webrtc_logging_impl::MakeVal<std::__iom_t4<char>,std::__iom_t4<char>,(void *)0>((char *)&v46, &v20);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    v27 = v25;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  else
  {
    v26 = v46;
    v27 = v25;
  }
  v19 = 2;
  rtc::webrtc_logging_impl::MakeVal<std::__iom_t6,std::__iom_t6,(void *)0>((char *)&v46, &v19);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    v29 = &v26;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  else
  {
    v28 = v46;
    v29 = &v26;
  }
  v30[0] = (int)v8 / 3600000;
  v30[1] = &v28;
  v31[0] = ":";
  v31[1] = v30;
  v18 = 48;
  rtc::webrtc_logging_impl::MakeVal<std::__iom_t4<char>,std::__iom_t4<char>,(void *)0>((char *)&v46, &v18);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    v33 = v31;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  else
  {
    v32 = v46;
    v33 = v31;
  }
  v17 = 2;
  rtc::webrtc_logging_impl::MakeVal<std::__iom_t6,std::__iom_t6,(void *)0>((char *)&v46, &v17);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    v35 = &v32;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  else
  {
    v34 = v46;
    v35 = &v32;
  }
  v36[0] = (__int16)((int)v8 / 60000
                   - 60
                   * (((__int16)((34953 * (__int16)((int)v8 / 60000)) >> 16) >> 5)
                    + ((unsigned __int16)(((34953 * (__int16)((int)v8 / 60000)) >> 16) & 0x8000) >> 15)));
  v36[1] = &v34;
  v37[0] = ":";
  v37[1] = v36;
  v16 = 48;
  rtc::webrtc_logging_impl::MakeVal<std::__iom_t4<char>,std::__iom_t4<char>,(void *)0>((char *)&v46, &v16);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v38, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    v39 = v37;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  else
  {
    v38 = v46;
    v39 = v37;
  }
  v15 = 2;
  rtc::webrtc_logging_impl::MakeVal<std::__iom_t6,std::__iom_t6,(void *)0>((char *)&v46, &v15);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    v41 = &v38;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  else
  {
    v40 = v46;
    v41 = &v38;
  }
  v42[0] = (int)v8 / 1000 % 60;
  v42[1] = &v40;
  v43[0] = ".";
  v43[1] = v42;
  v14 = 48;
  rtc::webrtc_logging_impl::MakeVal<std::__iom_t4<char>,std::__iom_t4<char>,(void *)0>((char *)&v46, &v14);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    v45 = v43;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  else
  {
    v44 = v46;
    v45 = v43;
  }
  v13 = 3;
  rtc::webrtc_logging_impl::MakeVal<std::__iom_t6,std::__iom_t6,(void *)0>((char *)&v48, &v13);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v46, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    v47 = &v44;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
  }
  else
  {
    v46 = v48;
    v47 = &v44;
  }
  if (a3 < 0 || !a2 && a3)
  {
    __break(1u);
    return;
  }
  rtc::hex_encode_with_delimiter(a2, a3, 32, &v48);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47[1].__r_.__value_.__r.__words[0] + 8) + 8) + 24)
                                                                                          + 24)
                                                                              + 8)
                                                                  + 8)
                                                      + 24)
                                          + 24)
                              + 8)
                  + 8);
  v11 = *(_QWORD *)(v10 + 24);
  v12 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 8) + 8);
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v10, v11, **(_QWORD **)(v11 + 24), **(_QWORD **)(*(_QWORD *)(v11 + 24) + 8), **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 8), v12[1], *v12, *v12);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_44:
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_45;
      goto LABEL_54;
    }
  }
  else if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_44;
  }
  operator delete(v46.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_45:
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_55;
  }
LABEL_54:
  operator delete(v44.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_56;
  }
LABEL_55:
  operator delete(v40.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_47:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_57;
  }
LABEL_56:
  operator delete(v38.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_48:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_49:
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v32.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_50:
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_60:
    operator delete(v26.__r_.__value_.__l.__data_);
    return;
  }
LABEL_59:
  operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_60;
}

uint64_t cricket::SrtpSession::ProtectRtcp(cricket::SrtpSession *this, unsigned __int8 *a2, int a3, int a4, int *a5)
{
  cricket::SrtpSession *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = (cricket::SrtpSession *)*((_QWORD *)this + 1);
  if (!v6)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
    return 0;
  }
  if (a3 + *((_DWORD *)this + 5) + 4 > a4)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
    return 0;
  }
  if (*((_BYTE *)this + 40))
  {
    cricket::SrtpSession::DumpPacket(v6, a2, a3, 1);
    v6 = (cricket::SrtpSession *)*((_QWORD *)this + 1);
  }
  *a5 = a3;
  if (srtp_protect_rtcp_mki((int8x8_t *)v6, (uint64_t)a2, a5, 0, 0))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
    return 0;
  }
  return 1;
}

uint64_t cricket::SrtpSession::UnprotectRtp(cricket::SrtpSession *this, unsigned __int8 *a2, int a3, int *a4)
{
  _QWORD *v5;
  cricket::SrtpSession *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (v5)
  {
    *a4 = a3;
    v8 = (cricket::SrtpSession *)srtp_unprotect_mki(v5, (uint64_t)a2, a4, 0);
    if ((_DWORD)v8)
    {
      v9 = *((_DWORD *)this + 9);
      HIDWORD(v10) = -1030792151 * v9 + 85899344;
      LODWORD(v10) = HIDWORD(v10);
      if ((v10 >> 2) <= 0x28F5C28)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
        v9 = *((_DWORD *)this + 9);
      }
      result = 0;
      *((_DWORD *)this + 9) = v9 + 1;
    }
    else
    {
      if (*((_BYTE *)this + 40))
        cricket::SrtpSession::DumpPacket(v8, a2, *a4, 0);
      return 1;
    }
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
    return 0;
  }
  return result;
}

uint64_t cricket::SrtpSession::UnprotectRtcp(cricket::SrtpSession *this, unsigned __int8 *a2, int a3, int *a4, __n128 a5)
{
  _QWORD *v6;
  cricket::SrtpSession *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v6)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    rtc::webrtc_logging_impl::Log("\r\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
    return 0;
  }
  *a4 = a3;
  v9 = (cricket::SrtpSession *)srtp_unprotect_rtcp_mki(v6, (uint64_t)a2, a4, 0, a5);
  if ((_DWORD)v9)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
    return 0;
  }
  if (*((_BYTE *)this + 40))
    cricket::SrtpSession::DumpPacket(v9, a2, *a4, 0);
  return 1;
}

uint64_t cricket::SrtpSession::DoSetKey(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  _DWORD v40[2];
  __int128 v41;
  _OWORD v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = 0;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  memset(v42, 0, sizeof(v42));
  v41 = 0u;
  v7 = 10;
  switch(a3)
  {
    case 1:
      goto LABEL_3;
    case 2:
      v7 = 4;
LABEL_3:
      *(_QWORD *)&v41 = 0x1E00000001;
      DWORD2(v41) = 3;
      v8 = 0xA00000014;
      v9 = 0x30000001ELL;
      v10 = 0x100000003;
      goto LABEL_10;
    case 5:
      DWORD2(v41) = 3;
      v8 = 0xA00000014;
      v9 = 0x300000000;
      v10 = 2;
      v7 = 10;
      goto LABEL_10;
    case 7:
      *(_QWORD *)&v41 = 0x1C00000006;
      v8 = 0x1000000000;
      v9 = 28;
      v10 = 0x600000003;
      goto LABEL_9;
    case 8:
      *(_QWORD *)&v41 = 0x2C00000007;
      v8 = 0x1000000000;
      v9 = 44;
      v10 = 0x700000003;
LABEL_9:
      v7 = 16;
LABEL_10:
      HIDWORD(v41) = v8;
      LODWORD(v42[0]) = v7;
      *(_QWORD *)((char *)v42 + 4) = v10;
      *(_QWORD *)((char *)v42 + 12) = v9;
      *(_QWORD *)((char *)&v42[1] + 4) = v8;
      HIDWORD(v42[1]) = v10;
      if (a4 && v9 == a5)
      {
        v40[0] = a2;
        v40[1] = 0;
        *(_QWORD *)&v43 = a4;
        *(_QWORD *)&v45 = 1024;
        DWORD2(v45) = 1;
        if (a2 == 3 && *(_BYTE *)(a1 + 33) && (a3 - 7) >= 2)
          DWORD2(v41) = 4;
        v19 = *a6;
        v20 = a6[1];
        if (*a6 != v20)
        {
          *(_QWORD *)&v46 = *a6;
          DWORD2(v46) = (unint64_t)(v20 - v19) >> 2;
        }
        v47 = 0;
        v22 = (_QWORD *)(a1 + 8);
        v21 = *(uint64_t **)(a1 + 8);
        if (v21)
        {
          v23 = v40;
          while (!srtp_update_stream(v21, (uint64_t)v23))
          {
            v23 = (_DWORD *)*((_QWORD *)v23 + 15);
            if (!v23)
              goto LABEL_33;
          }
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
            return 0;
        }
        else
        {
          if (!srtp_create((uint64_t **)(a1 + 8), (uint64_t)v40))
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) = a1;
LABEL_33:
            v38 = DWORD2(v42[1]);
            v39 = DWORD2(v41);
            *(_DWORD *)(a1 + 16) = v42[0];
            *(_DWORD *)(a1 + 20) = v38;
            *(_BYTE *)(a1 + 32) = v39 == 4;
            return 1;
          }
          *v22 = 0;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
            return 0;
        }
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
      }
      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        rtc::webrtc_logging_impl::Log("\r\t\t\t", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
      }
      return 0;
    default:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        return 0;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
      return 0;
  }
}

void cricket::SrtpSession::HandleEventThunk(_DWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    switch(a1[3])
    {
      case 0:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          goto LABEL_10;
        break;
      case 1:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          goto LABEL_10;
        break;
      case 2:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          goto LABEL_10;
        break;
      case 3:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
LABEL_10:
          rtc::webrtc_logging_impl::Log("\r\t", v1, v2, v3, v4, v5, v6, v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
        break;
      default:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
        break;
    }
  }
}

uint64_t rtc::webrtc_logging_impl::MakeVal<std::__iom_t4<char>,std::__iom_t4<char>,(void *)0>(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const std::locale::facet *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *__src;
  unint64_t v29;
  void *__p[2];
  __int128 v31;
  int v32;
  uint64_t v33[19];
  std::locale v34;

  v4 = MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v6 = (uint64_t *)MEMORY[0x24BEDB800];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v8 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v33[0] = MEMORY[0x24BEDB870] + 64;
  v24 = v7;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v24 + *(_QWORD *)(v24 - 24));
  std::ios_base::init(v9, &v25);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v24 = v4 + 24;
  v33[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  v25 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v31 = 0u;
  v32 = 16;
  v11 = (char *)&v24 + *(_QWORD *)(v24 - 24);
  v12 = *a2;
  if (*((_DWORD *)v11 + 36) != -1)
  {
    v13 = 0;
    *((_DWORD *)v11 + 36) = v12;
    v14 = v29;
    if (!v29)
      goto LABEL_4;
    goto LABEL_3;
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v24 + *(_QWORD *)(v24 - 24)));
  v22 = std::locale::use_facet(&v34, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 32);
  std::locale::~locale(&v34);
  v23 = v32;
  *((_DWORD *)v11 + 36) = v12;
  if ((v23 & 0x10) != 0)
  {
    v13 = *((_QWORD *)&v31 + 1);
    v14 = v29;
    if (*((_QWORD *)&v31 + 1) >= v29)
    {
LABEL_4:
      v15 = (char *)__src;
      v16 = v13 - (_QWORD)__src;
      if ((uint64_t)(v13 - (_QWORD)__src) >= 0)
        goto LABEL_5;
LABEL_25:
      __break(1u);
LABEL_26:
      abort();
    }
LABEL_3:
    *((_QWORD *)&v31 + 1) = v14;
    v13 = v14;
    goto LABEL_4;
  }
  if ((v23 & 8) == 0)
  {
    v15 = 0;
    v16 = 0;
    a1[23] = 0;
    v17 = a1;
    if (!a1)
      goto LABEL_12;
    goto LABEL_13;
  }
  v15 = v26;
  v16 = v27 - (_QWORD)v26;
  if (v27 - (uint64_t)v26 < 0)
    goto LABEL_25;
LABEL_5:
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_26;
  if (v16 <= 0x16)
  {
    a1[23] = v16;
    v17 = &a1[v16];
    if (a1 > v15)
      goto LABEL_13;
    goto LABEL_12;
  }
  v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v16 | 7) != 0x17)
    v18 = v16 | 7;
  v19 = v18 + 1;
  v20 = (char *)operator new(v18 + 1);
  *((_QWORD *)a1 + 1) = v16;
  *((_QWORD *)a1 + 2) = v19 | 0x8000000000000000;
  *(_QWORD *)a1 = v20;
  a1 = v20;
  v17 = &v20[v16];
  if (v20 <= v15)
  {
LABEL_12:
    if (v17 <= v15)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_13:
  if (v16)
    memmove(a1, v15, v16);
  *v17 = 0;
  v24 = *v6;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = v6[3];
  v25 = v10 + 16;
  if (SBYTE7(v31) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD0AD8C](v33);
}

uint64_t rtc::webrtc_logging_impl::MakeVal<std::__iom_t6,std::__iom_t6,(void *)0>(char *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  _QWORD v20[5];
  void *__src;
  char *v22;
  void *__p[2];
  __int128 v24;
  int v25;
  uint64_t v26[20];

  v4 = MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v6 = (uint64_t *)MEMORY[0x24BEDB800];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v8 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v26[0] = MEMORY[0x24BEDB870] + 64;
  v19 = v7;
  *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v9, v20);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v19 = v4 + 24;
  v26[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  v20[0] = MEMORY[0x24BEDB848] + 16;
  v24 = 0u;
  *(_OWORD *)__p = 0u;
  v25 = 16;
  v11 = v22;
  *(_QWORD *)((char *)&v20[2] + *(_QWORD *)(v19 - 24)) = *a2;
  if (v11)
    *((_QWORD *)&v24 + 1) = v11;
  v12 = (char *)__src;
  v13 = v11 - (_BYTE *)__src;
  if (v11 - (_BYTE *)__src < 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    abort();
  }
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_18;
  if (v13 <= 0x16)
  {
    a1[23] = v13;
    v14 = &a1[v13];
    if (a1 > v12)
      goto LABEL_12;
    goto LABEL_11;
  }
  v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v15 = v13 | 7;
  v16 = v15 + 1;
  v17 = (char *)operator new(v15 + 1);
  *((_QWORD *)a1 + 1) = v13;
  *((_QWORD *)a1 + 2) = v16 | 0x8000000000000000;
  *(_QWORD *)a1 = v17;
  a1 = v17;
  v14 = &v17[v13];
  if (v17 <= v12)
  {
LABEL_11:
    if (v14 <= v12)
      goto LABEL_12;
    goto LABEL_17;
  }
LABEL_12:
  if (v11 != v12)
    memmove(a1, v12, v13);
  *v14 = 0;
  v19 = *v6;
  *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = v6[3];
  v20[0] = v10 + 16;
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD0AD8C](v26);
}

uint64_t webrtc::SrtpTransport::SendRtpPacket(webrtc::SrtpTransport *this, rtc::CopyOnWriteBuffer *a2, const rtc::PacketOptions *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  cricket::SrtpSession *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::string *v62;
  rtc::CopyOnWriteBuffer *v63;
  const rtc::PacketOptions *v64;
  int v65;
  uint64_t v66;
  unsigned int v67[7];
  void *__p;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int16 v75;

  if (((*(uint64_t (**)(webrtc::SrtpTransport *))(*(_QWORD *)this + 96))(this) & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
    return 0;
  }
  *(_OWORD *)&v67[1] = *(_OWORD *)a3;
  v67[5] = *((_DWORD *)a3 + 4);
  v69 = 0;
  v70 = 0;
  __p = 0;
  v13 = (_BYTE *)*((_QWORD *)a3 + 3);
  v12 = (_BYTE *)*((_QWORD *)a3 + 4);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_34;
    v15 = (char *)operator new(v12 - v13);
    v16 = &v15[v14];
    __p = v15;
    v70 = &v15[v14];
    memcpy(v15, v13, v14);
    v69 = v16;
  }
  v17 = *((_OWORD *)a3 + 4);
  v71 = *((_OWORD *)a3 + 3);
  v72 = v17;
  v73 = *((_OWORD *)a3 + 5);
  v74 = *((_QWORD *)a3 + 12);
  v75 = *((_WORD *)a3 + 52);
  if (*(_QWORD *)a2)
  {
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2, (uint64_t *)(*(_QWORD *)(*(_QWORD *)a2 + 8) - *((_QWORD *)a2 + 1)));
    v18 = *((_QWORD *)a2 + 2);
    if (!(v18 >> 31))
    {
      v19 = *(_QWORD *)a2;
      v20 = *((_QWORD *)a2 + 1);
      v21 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + v20);
      v67[0] = *((_QWORD *)a2 + 2);
      v22 = *(_DWORD *)(v19 + 8) - v20;
      if (((*(uint64_t (**)(webrtc::SrtpTransport *))(*(_QWORD *)this + 96))(this) & 1) != 0)
        goto LABEL_8;
LABEL_17:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
      goto LABEL_19;
    }
    goto LABEL_33;
  }
  v18 = *((_QWORD *)a2 + 2);
  if (v18 >> 31)
  {
LABEL_33:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v8, v9, v10, v11, v66);
LABEL_34:
    abort();
  }
  v21 = 0;
  v22 = 0;
  v67[0] = *((_QWORD *)a2 + 2);
  if (((*(uint64_t (**)(webrtc::SrtpTransport *))(*(_QWORD *)this + 96))(this) & 1) == 0)
    goto LABEL_17;
LABEL_8:
  v28 = (cricket::SrtpSession *)*((_QWORD *)this + 67);
  if (v28)
  {
    if ((cricket::SrtpSession::ProtectRtp(v28, v21, v18, v22, v67, v27) & 1) != 0)
    {
      rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2, (uint64_t *)(int)v67[0]);
      v29 = *((_QWORD *)this + 32);
      if (*(_QWORD *)a2)
        v30 = *(_QWORD *)(*(_QWORD *)a2 + 16) + *((_QWORD *)a2 + 1);
      else
        v30 = 0;
      if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, unsigned int *, uint64_t))(*(_QWORD *)v29 + 40))(*((_QWORD *)this + 32), v30, *((_QWORD *)a2 + 2), &v67[1], a4) == *((_DWORD *)a2 + 4))
      {
        v38 = 1;
        v53 = (char *)__p;
        if (!__p)
          return v38;
        goto LABEL_22;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 64))(v29) == 57)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v55, v56, v57, v58, v59, v60, v61, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transport.cc");
        *((_BYTE *)this + 273) = 0;
        webrtc::RtpTransport::MaybeSignalReadyToSend(this, v55, v56, v57, v58, v59, v60, v61);
        v38 = 0;
        v53 = (char *)__p;
        if (!__p)
          return v38;
        goto LABEL_22;
      }
LABEL_21:
      v38 = 0;
      v53 = (char *)__p;
      if (!__p)
        return v38;
LABEL_22:
      v69 = v53;
      operator delete(v53);
      return v38;
    }
LABEL_19:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
    goto LABEL_21;
  }
  v62 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc", 303, "send_session_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v23, v24, v25, v26, v66);
  return webrtc::SrtpTransport::SendRtcpPacket((webrtc::SrtpTransport *)v62, v63, v64, v65);
}

uint64_t webrtc::SrtpTransport::SendRtcpPacket(webrtc::SrtpTransport *this, rtc::CopyOnWriteBuffer *a2, const rtc::PacketOptions *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  cricket::SrtpSession *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string *v54;
  uint64_t v55;
  unint64_t v56;

  if (((*(uint64_t (**)(webrtc::SrtpTransport *))(*(_QWORD *)this + 96))(this) & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v25, v26, v27, v28, v29, v30, v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
    return 0;
  }
  if (!*(_QWORD *)a2)
  {
    v12 = *((_QWORD *)a2 + 2);
    if (!(v12 >> 31))
    {
      v15 = 0;
      v16 = 0;
      LODWORD(v56) = *((_QWORD *)a2 + 2);
      if (((*(uint64_t (**)(webrtc::SrtpTransport *))(*(_QWORD *)this + 96))(this) & 1) != 0)
        goto LABEL_5;
LABEL_16:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
      goto LABEL_18;
    }
LABEL_28:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v8, v9, v10, v11, v55);
    goto LABEL_29;
  }
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2, (uint64_t *)(*(_QWORD *)(*(_QWORD *)a2 + 8) - *((_QWORD *)a2 + 1)));
  v12 = *((_QWORD *)a2 + 2);
  if (v12 >> 31)
    goto LABEL_28;
  v13 = *(_QWORD *)a2;
  v14 = *((_QWORD *)a2 + 1);
  v15 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + v14);
  LODWORD(v56) = *((_QWORD *)a2 + 2);
  v16 = *(_DWORD *)(v13 + 8) - v14;
  if (((*(uint64_t (**)(webrtc::SrtpTransport *))(*(_QWORD *)this + 96))(this) & 1) == 0)
    goto LABEL_16;
LABEL_5:
  v21 = (cricket::SrtpSession *)*((_QWORD *)this + 69);
  if (v21 || (v21 = (cricket::SrtpSession *)*((_QWORD *)this + 67)) != 0)
  {
    if ((cricket::SrtpSession::ProtectRtcp(v21, v15, v12, v16, (int *)&v56) & 1) != 0)
    {
      rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2, (uint64_t *)(int)v56);
      v22 = 256;
      if (!*((_BYTE *)this + 248))
        v22 = 264;
      v23 = *(_QWORD *)((char *)this + v22);
      if (*(_QWORD *)a2)
        v24 = *(_QWORD *)(*(_QWORD *)a2 + 16) + *((_QWORD *)a2 + 1);
      else
        v24 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, const rtc::PacketOptions *, uint64_t))(*(_QWORD *)v23 + 40))(v23, v24, *((_QWORD *)a2 + 2), a3, a4) == *((_DWORD *)a2 + 4))return 1;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 64))(v23) == 57)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v47, v48, v49, v50, v51, v52, v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transport.cc");
        *((_BYTE *)this + 274) = 0;
        webrtc::RtpTransport::MaybeSignalReadyToSend(this, v47, v48, v49, v50, v51, v52, v53);
      }
      return 0;
    }
LABEL_18:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
    return 0;
  }
LABEL_29:
  v54 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc", 331, "send_session_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v17, v18, v19, v20, v55);
  return webrtc::SrtpTransport::OnRtpPacketReceived(v54);
}

void webrtc::SrtpTransport::OnRtpPacketReceived(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  const void *v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  cricket::SrtpSession *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  std::string *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t *v58;
  int v59;
  __int128 v60;
  uint64_t *v61;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) & 1) != 0)
  {
    v4 = *(uint64_t **)(a2 + 8);
    if (v4)
    {
      v5 = *(const void **)a2;
      v6 = operator new();
      *(_QWORD *)v6 = v4;
      *(_QWORD *)(v6 + 8) = v4;
      v7 = (void *)operator new[]();
      *(_QWORD *)(v6 + 16) = v7;
      *(_DWORD *)(v6 + 24) = 0;
      v8 = (unsigned int *)(v6 + 24);
      *(_QWORD *)&v60 = v6;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      memcpy(v7, v5, (size_t)v4);
      *((_QWORD *)&v60 + 1) = 0;
      v61 = v4;
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)&v60, v4);
      LODWORD(v4) = (_DWORD)v61;
      if ((unint64_t)v61 >> 31)
      {
        rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v10, v11, v12, v13, v56);
        goto LABEL_38;
      }
      v14 = (unsigned __int8 *)(*(_QWORD *)(v60 + 16) + *((_QWORD *)&v60 + 1));
      v59 = (int)v61;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) & 1) != 0)
      {
LABEL_7:
        v19 = *(cricket::SrtpSession **)(a1 + 544);
        if (v19)
        {
          if ((cricket::SrtpSession::UnprotectRtp(v19, v14, (int)v4, &v59) & 1) != 0)
          {
            rtc::CopyOnWriteBuffer::SetSize((uint64_t *)&v60, (uint64_t *)v59);
            v20 = v60;
            v60 = 0uLL;
            v57 = v20;
            v58 = v61;
            v61 = 0;
            if (*(_BYTE *)(a2 + 24))
              v21 = *(_QWORD *)(a2 + 16);
            else
              v21 = 0x8000000000000000;
            webrtc::RtpTransport::DemuxPacket(a1, (uint64_t *)&v57, v21, *(_DWORD *)(a2 + 40));
            v22 = v57;
            if ((_QWORD)v57)
            {
              v23 = (unsigned int *)(v57 + 24);
              do
              {
                v24 = __ldaxr(v23);
                v25 = v24 - 1;
              }
              while (__stlxr(v25, v23));
              if (!v25)
              {
                v26 = *(_QWORD *)(v22 + 16);
                *(_QWORD *)(v22 + 16) = 0;
                if (v26)
                  MEMORY[0x20BD0ADD4](v26, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v22, 0x1010C40EE34DA14);
              }
            }
LABEL_30:
            v50 = v60;
            if ((_QWORD)v60)
            {
              v51 = (unsigned int *)(v60 + 24);
              do
              {
                v52 = __ldaxr(v51);
                v53 = v52 - 1;
              }
              while (__stlxr(v53, v51));
              if (!v53)
              {
                v54 = *(_QWORD *)(v50 + 16);
                *(_QWORD *)(v50 + 16) = 0;
                if (v54)
                  MEMORY[0x20BD0ADD4](v54, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v50, 0x1010C40EE34DA14);
              }
            }
            return;
          }
LABEL_25:
          v41 = *(_DWORD *)(a1 + 640);
          HIDWORD(v42) = -1030792151 * v41 + 85899344;
          LODWORD(v42) = HIDWORD(v42);
          if ((v42 >> 2) <= 0x28F5C28)
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v43, v44, v45, v46, v47, v48, v49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
            v41 = *(_DWORD *)(a1 + 640);
          }
          *(_DWORD *)(a1 + 640) = v41 + 1;
          goto LABEL_30;
        }
LABEL_38:
        v55 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc", 341, "recv_session_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v15, v16, v17, v18, v56);
        webrtc::SrtpTransport::OnRtcpPacketReceived(v55);
        return;
      }
    }
    else
    {
      v14 = 0;
      v60 = 0uLL;
      v61 = 0;
      v59 = 0;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) & 1) != 0)
        goto LABEL_7;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v34, v35, v36, v37, v38, v39, v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
    goto LABEL_25;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
}

void webrtc::SrtpTransport::OnRtcpPacketReceived(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  const void *v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  cricket::SrtpSession *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  std::string *v57;
  uint64_t v58;
  int v59[3];
  uint64_t v60;
  unsigned __int8 *v61;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) & 1) != 0)
  {
    v4 = *(unsigned __int8 **)(a2 + 8);
    if (v4)
    {
      v5 = *(const void **)a2;
      v6 = operator new();
      *(_QWORD *)v6 = v4;
      *(_QWORD *)(v6 + 8) = v4;
      v7 = (void *)operator new[]();
      *(_QWORD *)(v6 + 16) = v7;
      *(_DWORD *)(v6 + 24) = 0;
      v8 = (unsigned int *)(v6 + 24);
      *(_QWORD *)&v59[1] = v6;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      memcpy(v7, v5, (size_t)v4);
      v60 = 0;
      v61 = v4;
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)&v59[1], *(uint64_t **)(v6 + 8));
      v14 = (int)v61;
      if ((unint64_t)v61 >> 31)
      {
        rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v10, v11, v12, v13, v58);
LABEL_38:
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v21, v22, v23, v24, v58);
LABEL_39:
        v57 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc", 353, "recv_session_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v15, v16, v17, v18, v58);
        webrtc::SrtpTransport::OnNetworkRouteChanged(v57);
        return;
      }
      v4 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v59[1] + 16) + v60);
      v59[0] = (int)v61;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      v14 = 0;
      v60 = 0;
      v61 = 0;
      memset(v59, 0, sizeof(v59));
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) & 1) != 0)
      {
LABEL_7:
        v20 = *(cricket::SrtpSession **)(a1 + 560);
        if (!v20)
        {
          v20 = *(cricket::SrtpSession **)(a1 + 544);
          if (!v20)
            goto LABEL_39;
        }
        if ((cricket::SrtpSession::UnprotectRtcp(v20, v4, v14, v59, v19) & 1) != 0)
        {
          rtc::CopyOnWriteBuffer::SetSize((uint64_t *)&v59[1], (uint64_t *)v59[0]);
          if (*(_BYTE *)(a2 + 24))
            v25 = *(_QWORD *)(a2 + 16);
          else
            v25 = -1;
          v26 = (_BYTE *)(a1 + 112);
          if (!*(_BYTE *)(a1 + 112))
          {
            *(_BYTE *)(a1 + 112) = 1;
            v27 = *(_QWORD *)(a1 + 88);
            v28 = *(_QWORD *)(a1 + 96);
            if (v27 == v28)
            {
              *v26 = 0;
              v31 = *(_QWORD *)&v59[1];
              if (!*(_QWORD *)&v59[1])
                return;
              goto LABEL_29;
            }
            v29 = 0;
            do
            {
              (*(void (**)(uint64_t, int *, uint64_t))(v27 + 40))(v27 + 8, &v59[1], v25);
              v30 = *(_BYTE **)v27;
              v27 += 56;
              v29 |= v30 == v26;
            }
            while (v27 != v28);
            *v26 = 0;
            if ((v29 & 1) != 0)
            {
              webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(a1 + 88), (const void *)(a1 + 112));
              v31 = *(_QWORD *)&v59[1];
              if (!*(_QWORD *)&v59[1])
                return;
LABEL_29:
              v53 = (unsigned int *)(v31 + 24);
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
              {
                v56 = *(_QWORD *)(v31 + 16);
                *(_QWORD *)(v31 + 16) = 0;
                if (v56)
                  MEMORY[0x20BD0ADD4](v56, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v31, 0x1010C40EE34DA14);
              }
              return;
            }
LABEL_28:
            v31 = *(_QWORD *)&v59[1];
            if (!*(_QWORD *)&v59[1])
              return;
            goto LABEL_29;
          }
          goto LABEL_38;
        }
LABEL_26:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
        goto LABEL_28;
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
    goto LABEL_26;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
}

void webrtc::SrtpTransport::OnNetworkRouteChanged(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  void (*v19)(_QWORD *, _OWORD *);
  _BYTE *v20;
  std::string *v21;
  rtc::PacketTransportInternal *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;

  if (!*((_BYTE *)a2 + 36))
    goto LABEL_11;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) & 1) != 0)
    {
      v10 = *(_QWORD *)(a1 + 536);
      if (!v10)
      {
LABEL_21:
        v21 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc", 376, "send_session_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v23);
        webrtc::SrtpTransport::OnWritableState((webrtc::SrtpTransport *)v21, v22);
        return;
      }
      v11 = *(_DWORD *)(v10 + 16);
      goto LABEL_9;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
  }
  v11 = 0;
LABEL_9:
  if (!*((_BYTE *)a2 + 36))
  {
    __break(1u);
    goto LABEL_20;
  }
  *((_DWORD *)a2 + 8) += v11;
LABEL_11:
  v24 = *a2;
  v25 = a2[1];
  v26 = *((_QWORD *)a2 + 4);
  v15 = (_BYTE *)(a1 + 176);
  if (*(_BYTE *)(a1 + 176))
  {
LABEL_20:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v23);
    goto LABEL_21;
  }
  *(_BYTE *)(a1 + 176) = 1;
  v16 = *(_QWORD **)(a1 + 152);
  v17 = *(_QWORD **)(a1 + 160);
  if (v16 == v17)
  {
    *v15 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = (void (*)(_QWORD *, _OWORD *))v16[5];
      v27[0] = v24;
      v27[1] = v25;
      v28 = v26;
      v19(v16 + 1, v27);
      v20 = (_BYTE *)*v16;
      v16 += 7;
      v18 |= v20 == v15;
    }
    while (v16 != v17);
    *v15 = 0;
    if ((v18 & 1) != 0)
      webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(a1 + 152), (const void *)(a1 + 176));
  }
}

void webrtc::SrtpTransport::OnWritableState(webrtc::SrtpTransport *this, rtc::PacketTransportInternal *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  std::string *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v14 = 0;
  if ((*(unsigned int (**)(webrtc::SrtpTransport *, _QWORD))(*(_QWORD *)this + 64))(this, 0))
    v14 = (*(uint64_t (**)(webrtc::SrtpTransport *, uint64_t))(*(_QWORD *)this + 64))(this, 1);
  v15 = (char *)this + 208;
  if (*((_BYTE *)this + 208))
  {
    v20 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v10, v11, v12, v13, v28);
    webrtc::SrtpTransport::SetRtpParams((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27, a9);
  }
  else
  {
    *((_BYTE *)this + 208) = 1;
    v16 = *((_QWORD *)this + 23);
    v17 = *((_QWORD *)this + 24);
    if (v16 == v17)
    {
      *v15 = 0;
    }
    else
    {
      v18 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t))(v16 + 40))(v16 + 8, v14);
        v19 = *(_BYTE **)v16;
        v16 += 56;
        v18 |= v19 == v15;
      }
      while (v16 != v17);
      *v15 = 0;
      if ((v18 & 1) != 0)
        webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::SrtpTransport *)((char *)this + 184), (char *)this + 208);
    }
  }
}

void webrtc::SrtpTransport::SetRtpParams(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t *a5, int a6, uint64_t a7, int a8, uint64_t *a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *p_p;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  int v36;
  cricket::SrtpSession *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  unint64_t v42;
  BOOL v43;
  int v44;
  int v45;
  cricket::SrtpSession *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _BYTE *v62;
  std::string *v63;
  uint64_t v64;
  int v65;
  void *__p;
  unint64_t v68;
  unsigned __int8 v69;

  v17 = *(_QWORD *)(a1 + 536);
  if (!v17)
  {
    v19 = operator new();
    v20 = *(_QWORD *)(a1 + 648);
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_BYTE *)(v19 + 24) = 0;
    *(_DWORD *)(v19 + 28) = -1;
    *(_WORD *)(v19 + 32) = 0;
    *(_DWORD *)(v19 + 36) = 0;
    (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v20 + 16))(&__p, v20, "WebRTC-Debugging-RtpDump", 24);
    if ((char)v69 < 0)
    {
      v26 = v68;
      if ((v68 & 0x8000000000000000) != 0)
        goto LABEL_64;
      p_p = (int *)__p;
      if (v68)
      {
        if (!__p)
          goto LABEL_64;
      }
    }
    else
    {
      p_p = (int *)&__p;
      v26 = v69;
    }
    v65 = a6;
    if (v26 >= 7)
    {
      v35 = *p_p;
      v36 = *(int *)((char *)p_p + 3);
      v34 = v35 == *(_DWORD *)"Enabled" && v36 == *(_DWORD *)"bled";
      if ((v69 & 0x80) == 0)
        goto LABEL_25;
    }
    else
    {
      v34 = 0;
      if ((v69 & 0x80) == 0)
      {
LABEL_25:
        *(_BYTE *)(v19 + 40) = v34;
        v38 = *(cricket::SrtpSession **)(a1 + 536);
        *(_QWORD *)(a1 + 536) = v19;
        if (v38)
        {
          cricket::SrtpSession::~SrtpSession(v38);
          MEMORY[0x20BD0ADEC]();
        }
        v39 = operator new();
        v40 = *(_QWORD *)(a1 + 648);
        *(_QWORD *)(v39 + 8) = 0;
        *(_QWORD *)(v39 + 16) = 0;
        *(_BYTE *)(v39 + 24) = 0;
        *(_DWORD *)(v39 + 28) = -1;
        *(_WORD *)(v39 + 32) = 0;
        *(_DWORD *)(v39 + 36) = 0;
        (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v40 + 16))(&__p, v40, "WebRTC-Debugging-RtpDump", 24);
        if (((char)v69 & 0x80000000) == 0)
        {
          v41 = (int *)&__p;
          v42 = v69;
          goto LABEL_32;
        }
        v42 = v68;
        if ((v68 & 0x8000000000000000) == 0)
        {
          v41 = (int *)__p;
          if (!v68 || __p)
          {
LABEL_32:
            if (v42 >= 7)
            {
              v44 = *v41;
              v45 = *(int *)((char *)v41 + 3);
              v43 = v44 == *(_DWORD *)"Enabled" && v45 == *(_DWORD *)"bled";
              if ((v69 & 0x80) == 0)
              {
LABEL_43:
                *(_BYTE *)(v39 + 40) = v43;
                v47 = *(cricket::SrtpSession **)(a1 + 544);
                *(_QWORD *)(a1 + 544) = v39;
                if (v47)
                {
                  cricket::SrtpSession::~SrtpSession(v47);
                  MEMORY[0x20BD0ADEC]();
                }
                v48 = *(_QWORD *)(a1 + 536);
                if (*(_BYTE *)(a1 + 633))
                  *(_BYTE *)(v48 + 33) = 1;
                if ((cricket::SrtpSession::SetKey(v48, 3, a2, a3, a4, a5) & 1) == 0
                  || (cricket::SrtpSession::SetKey(*(_QWORD *)(a1 + 544), 2, v65, a7, a8, a9) & 1) == 0)
                {
                  goto LABEL_54;
                }
                goto LABEL_49;
              }
            }
            else
            {
              v43 = 0;
              if ((v69 & 0x80) == 0)
                goto LABEL_43;
            }
            operator delete(__p);
            goto LABEL_43;
          }
        }
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
    }
    operator delete(__p);
    goto LABEL_25;
  }
  if (!*(_QWORD *)(v17 + 8))
    goto LABEL_9;
  if ((cricket::SrtpSession::DoSetKey(*(_QWORD *)(a1 + 536), 3, a2, a3, a4, a5) & 1) == 0)
  {
LABEL_54:
    webrtc::SrtpTransport::ResetParams((webrtc::SrtpTransport *)a1);
    return;
  }
  v18 = *(_QWORD *)(a1 + 544);
  if (!*(_QWORD *)(v18 + 8))
  {
LABEL_9:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_session.cc");
    goto LABEL_54;
  }
  if ((cricket::SrtpSession::DoSetKey(v18, 2, a6, a7, a8, a9) & 1) == 0)
    goto LABEL_54;
LABEL_49:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 1))
  {
    v56 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0);
    if (*(unsigned __int8 *)(a1 + 632) == (_DWORD)v56)
      return;
  }
  else
  {
    v56 = 0;
    if (!*(_BYTE *)(a1 + 632))
      return;
  }
  v58 = (_BYTE *)(a1 + 208);
  v57 = *(unsigned __int8 *)(a1 + 208);
  *(_BYTE *)(a1 + 632) = v56;
  if (v57)
  {
LABEL_65:
    v63 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v21, v22, v23, v24, v64);
    webrtc::SrtpTransport::ResetParams((webrtc::SrtpTransport *)v63);
    return;
  }
  *(_BYTE *)(a1 + 208) = 1;
  v59 = *(_QWORD *)(a1 + 184);
  v60 = *(_QWORD *)(a1 + 192);
  if (v59 == v60)
  {
    *v58 = 0;
  }
  else
  {
    v61 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(v59 + 40))(v59 + 8, v56);
      v62 = *(_BYTE **)v59;
      v59 += 56;
      v61 |= v62 == v58;
    }
    while (v59 != v60);
    *v58 = 0;
    if ((v61 & 1) != 0)
      webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(a1 + 184), (const void *)(a1 + 208));
  }
}

void webrtc::SrtpTransport::ResetParams(webrtc::SrtpTransport *this)
{
  cricket::SrtpSession *v2;
  cricket::SrtpSession *v3;
  cricket::SrtpSession *v4;
  cricket::SrtpSession *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;

  v2 = (cricket::SrtpSession *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v2)
  {
    cricket::SrtpSession::~SrtpSession(v2);
    MEMORY[0x20BD0ADEC]();
  }
  v3 = (cricket::SrtpSession *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v3)
  {
    cricket::SrtpSession::~SrtpSession(v3);
    MEMORY[0x20BD0ADEC]();
  }
  v4 = (cricket::SrtpSession *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v4)
  {
    cricket::SrtpSession::~SrtpSession(v4);
    MEMORY[0x20BD0ADEC]();
  }
  v5 = (cricket::SrtpSession *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v5)
  {
    cricket::SrtpSession::~SrtpSession(v5);
    MEMORY[0x20BD0ADEC]();
  }
  if ((*(unsigned int (**)(webrtc::SrtpTransport *, uint64_t))(*(_QWORD *)this + 64))(this, 1))
  {
    v10 = (*(uint64_t (**)(webrtc::SrtpTransport *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
    if (*((unsigned __int8 *)this + 632) == (_DWORD)v10)
      goto LABEL_19;
  }
  else
  {
    v10 = 0;
    if (!*((_BYTE *)this + 632))
      goto LABEL_19;
  }
  v12 = (char *)this + 208;
  v11 = *((unsigned __int8 *)this + 208);
  *((_BYTE *)this + 632) = v10;
  if (v11)
  {
    v24 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v6, v7, v8, v9, v25);
    webrtc::SrtpTransport::SetRtcpParams(v24);
    return;
  }
  *((_BYTE *)this + 208) = 1;
  v13 = *((_QWORD *)this + 23);
  v14 = *((_QWORD *)this + 24);
  if (v13 != v14)
  {
    v15 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v13 + 8, v10);
      v16 = *(_BYTE **)v13;
      v13 += 56;
      v15 |= v16 == v12;
    }
    while (v13 != v14);
    *v12 = 0;
    if ((v15 & 1) != 0)
      webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::SrtpTransport *)((char *)this + 184), (char *)this + 208);
LABEL_19:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      return;
    goto LABEL_20;
  }
  *v12 = 0;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
LABEL_20:
    rtc::webrtc_logging_impl::Log("\r\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
}

uint64_t webrtc::SrtpTransport::SetRtcpParams(uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t *a5, int a6, uint64_t a7, int a8, uint64_t *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int *p_p;
  unint64_t v28;
  BOOL v29;
  int v30;
  int v31;
  cricket::SrtpSession *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  unint64_t v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  int v41;
  cricket::SrtpSession *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  size_t v58;
  const char *v59;
  char *v60;
  const char *v61;
  int v62;
  char v63;
  void *__p;
  unint64_t v65;
  unsigned __int8 v66;

  if (*(_QWORD *)(a1 + 552) || *(_QWORD *)(a1 + 560))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
    return 0;
  }
  v25 = operator new();
  v26 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  *(_BYTE *)(v25 + 24) = 0;
  *(_DWORD *)(v25 + 28) = -1;
  *(_WORD *)(v25 + 32) = 0;
  *(_DWORD *)(v25 + 36) = 0;
  result = (uint64_t)(*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v26 + 16))(&__p, v26, "WebRTC-Debugging-RtpDump", 24);
  if ((char)v66 < 0)
  {
    v28 = v65;
    if ((v65 & 0x8000000000000000) != 0)
      goto LABEL_53;
    p_p = (int *)__p;
    if (v65)
    {
      if (!__p)
        goto LABEL_53;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v28 = v66;
  }
  if (v28 < 7)
  {
    v29 = 0;
    if ((v66 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  v30 = *p_p;
  v31 = *(int *)((char *)p_p + 3);
  v29 = v30 == *(_DWORD *)"Enabled" && v31 == *(_DWORD *)"bled";
  if ((v66 & 0x80) != 0)
LABEL_22:
    operator delete(__p);
LABEL_23:
  *(_BYTE *)(v25 + 40) = v29;
  v33 = *(cricket::SrtpSession **)(a1 + 552);
  *(_QWORD *)(a1 + 552) = v25;
  if (v33)
  {
    cricket::SrtpSession::~SrtpSession(v33);
    MEMORY[0x20BD0ADEC]();
    v25 = *(_QWORD *)(a1 + 552);
  }
  result = cricket::SrtpSession::SetKey(v25, 3, (int)a2, a3, a4, a5);
  if (!(_DWORD)result)
    return result;
  v34 = operator new();
  v35 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  *(_BYTE *)(v34 + 24) = 0;
  *(_DWORD *)(v34 + 28) = -1;
  *(_WORD *)(v34 + 32) = 0;
  *(_DWORD *)(v34 + 36) = 0;
  result = (uint64_t)(*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v35 + 16))(&__p, v35, "WebRTC-Debugging-RtpDump", 24);
  if (((char)v66 & 0x80000000) == 0)
  {
    v36 = (int *)&__p;
    v37 = v66;
    goto LABEL_31;
  }
  v37 = v65;
  if ((v65 & 0x8000000000000000) != 0 || (v36 = (int *)__p, v65) && !__p)
  {
LABEL_53:
    __break(1u);
    return result;
  }
LABEL_31:
  if (v37 < 7)
  {
    v38 = 0;
    v39 = a9;
    if ((v66 & 0x80) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
  v40 = *v36;
  v41 = *(int *)((char *)v36 + 3);
  v38 = v40 == *(_DWORD *)"Enabled" && v41 == *(_DWORD *)"bled";
  v39 = a9;
  if ((v66 & 0x80) != 0)
LABEL_41:
    operator delete(__p);
LABEL_42:
  *(_BYTE *)(v34 + 40) = v38;
  v43 = *(cricket::SrtpSession **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = v34;
  if (v43)
  {
    cricket::SrtpSession::~SrtpSession(v43);
    MEMORY[0x20BD0ADEC]();
    v34 = *(_QWORD *)(a1 + 560);
  }
  result = cricket::SrtpSession::SetKey(v34, 2, a6, a7, a8, v39);
  if ((_DWORD)result)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    {
      v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 1);
      if (v51)
        goto LABEL_47;
    }
    else
    {
      v61 = " recv crypto_suite ";
      v62 = a6;
      v59 = "SRTCP activated with negotiated parameters: send crypto_suite ";
      v60 = a2;
      v58 = 2121;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
      v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 1);
      if (v51)
      {
LABEL_47:
        v51 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0);
        if (*(unsigned __int8 *)(a1 + 632) == v51)
          return 1;
        goto LABEL_51;
      }
    }
    if (*(unsigned __int8 *)(a1 + 632) == v51)
      return 1;
LABEL_51:
    *(_BYTE *)(a1 + 632) = v51;
    v63 = v51;
    __p = &v63;
    webrtc::callback_list_impl::CallbackListReceivers::Foreach(a1 + 184, (uint64_t)&__p, (void (*)(uint64_t, _QWORD *))rtc::FunctionView<void ()(webrtc::UntypedFunction &)>::CallVoidPtr<void webrtc::CallbackList<BOOL>::Send<BOOL &>(BOOL &)::{lambda(webrtc::UntypedFunction &)#1}>, v52, v53, v54, v55, v56, v57, v58, (int)v59, SHIDWORD(v59), v60, (size_t)v61, v62, SHIWORD(v62));
    return 1;
  }
  return result;
}

BOOL webrtc::SrtpTransport::IsSrtpActive(webrtc::SrtpTransport *this)
{
  return *((_QWORD *)this + 67) && *((_QWORD *)this + 68) != 0;
}

uint64_t webrtc::SrtpTransport::IsWritable(webrtc::SrtpTransport *this, int a2)
{
  uint64_t v4;

  if ((*(unsigned int (**)(webrtc::SrtpTransport *))(*(_QWORD *)this + 96))(this))
  {
    if (a2 && !*((_BYTE *)this + 248))
    {
      v4 = *((_QWORD *)this + 33);
      if (v4)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      v4 = *((_QWORD *)this + 32);
      if (v4)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
  }
  return 0;
}

_QWORD *webrtc::SrtpTransport::UnregisterRtpDemuxerSink(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *result;
  int *p_p;
  unint64_t v7;
  _BOOL4 v8;
  int v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  _DWORD *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *__p;
  unint64_t v43;
  uint64_t v44;

  if (!*(_QWORD *)(a1 + 544))
    goto LABEL_55;
  result = (*(_QWORD *(**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 648) + 16))(&__p, *(_QWORD *)(a1 + 648), "WebRTC-SrtpRemoveReceiveStream", 30);
  if (SHIBYTE(v44) < 0)
  {
    v7 = v43;
    if ((v43 & 0x8000000000000000) != 0 || (p_p = (int *)__p, v43) && !__p)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v7 = HIBYTE(v44);
  }
  if (v7 >= 7)
  {
    v9 = *p_p;
    v10 = *(int *)((char *)p_p + 3);
    v8 = v9 == 1650552389 && v10 == 1684368482;
    if (v44 < 0)
      goto LABEL_17;
  }
  else
  {
    v8 = 0;
    if (v44 < 0)
LABEL_17:
      operator delete(__p);
  }
  if (v8)
  {
    __p = 0;
    v43 = 0;
    v44 = 0;
    if (a2)
    {
      v12 = *(_QWORD *)(a1 + 304);
      v13 = *(_QWORD *)(a1 + 312);
      if (v12 != v13)
      {
        while (1)
        {
          if (*(_QWORD *)(v12 + 8) == a2)
          {
            v14 = __p;
            if ((void *)v43 == __p)
            {
              v14 = (_DWORD *)v43;
            }
            else
            {
              v15 = (uint64_t)(v43 - (_QWORD)__p) >> 2;
              do
              {
                v16 = v15 >> 1;
                v17 = &v14[v15 >> 1];
                v19 = *v17;
                v18 = v17 + 1;
                v15 += ~(v15 >> 1);
                if (v19 < *(_DWORD *)v12)
                  v14 = v18;
                else
                  v15 = v16;
              }
              while (v15);
              if (v14 != (_DWORD *)v43 && *(_DWORD *)v12 >= *v14)
                goto LABEL_23;
            }
            std::vector<unsigned int>::emplace<unsigned int const&>((char **)&__p, (uint64_t)v14, (int *)v12);
          }
LABEL_23:
          v12 += 16;
          if (v12 == v13)
          {
            v21 = (unsigned int *)__p;
            v20 = (unsigned int *)v43;
            if (__p == (void *)v43)
            {
LABEL_53:
              if (v20)
              {
                v43 = (unint64_t)v20;
                operator delete(v20);
              }
              break;
            }
            while (2)
            {
              v22 = *(_QWORD *)(*(_QWORD *)(a1 + 544) + 8);
              if (v22)
              {
                v23 = *(_QWORD **)v22;
                if (*(_QWORD *)v22)
                {
                  v24 = bswap32(*v21);
                  if (*(_DWORD *)v23 == v24)
                  {
                    *(_QWORD *)v22 = v23[15];
                    if (!srtp_stream_dealloc(v23, *(_QWORD *)(v22 + 8)))
                      goto LABEL_38;
                  }
                  else
                  {
                    while (1)
                    {
                      v25 = v23;
                      v23 = (_QWORD *)v23[15];
                      if (!v23)
                        break;
                      if (*(_DWORD *)v23 == v24)
                      {
                        if (v25 != v23)
                        {
                          v25[15] = v23[15];
                          if (srtp_stream_dealloc(v23, *(_QWORD *)(v22 + 8)))
                            break;
                          goto LABEL_38;
                        }
                        *(_QWORD *)v22 = v25;
                        if (!srtp_stream_dealloc(v25, *(_QWORD *)(v22 + 8)))
                          goto LABEL_38;
                        break;
                      }
                    }
                  }
                }
              }
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              {
                v2 = v2 & 0xFFFFFFFF00000000 | 0xE2A;
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/srtp_transport.cc");
              }
LABEL_38:
              if (++v21 == v20)
              {
                v20 = (unsigned int *)__p;
                goto LABEL_53;
              }
              continue;
            }
          }
        }
      }
    }
  }
LABEL_55:
  webrtc::RtpDemuxer::RemoveSink((_QWORD *)(a1 + 280), a2);
  v34 = v33;
  if ((v33 & 1) == 0 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transport.cc");
  return (_QWORD *)v34;
}

void rtc::SSLCertificateStats::~SSLCertificateStats(rtc::SSLCertificateStats *this)
{
  rtc::SSLCertificateStats *v2;

  v2 = (rtc::SSLCertificateStats *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
  {
    rtc::SSLCertificateStats::~SSLCertificateStats(v2);
    MEMORY[0x20BD0ADEC]();
  }
  if (*((char *)this + 71) < 0)
  {
    operator delete(*((void **)this + 6));
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*((char *)this + 23) & 0x80000000) == 0)
        return;
LABEL_9:
      operator delete(*(void **)this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    goto LABEL_9;
}

double rtc::SSLCertificateStats::Copy@<D0>(rtc::SSLCertificateStats *this@<X0>, std::string **a2@<X8>)
{
  rtc::SSLCertificateStats *v4;
  uint64_t v5;
  std::string *v6;
  double result;
  uint64_t v8;
  std::string v9;
  std::string v10;
  std::string v11;

  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v10 = *(std::string *)((_BYTE *)this + 1);
      if ((*((char *)this + 71) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
      v4 = (rtc::SSLCertificateStats *)*((_QWORD *)this + 9);
      if (v4)
        goto LABEL_5;
LABEL_9:
      v5 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v11 = *(std::string *)this;
    if ((*((char *)this + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  if (*((char *)this + 71) < 0)
    goto LABEL_8;
LABEL_4:
  v9 = *(std::string *)((_BYTE *)this + 2);
  v4 = (rtc::SSLCertificateStats *)*((_QWORD *)this + 9);
  if (!v4)
    goto LABEL_9;
LABEL_5:
  rtc::SSLCertificateStats::Copy(&v8, v4);
  v5 = v8;
LABEL_10:
  v6 = (std::string *)operator new();
  *v6 = v11;
  v6[1] = v10;
  result = *(double *)&v9.__r_.__value_.__l.__data_;
  v6[2] = v9;
  v6[3].__r_.__value_.__r.__words[0] = v5;
  *a2 = v6;
  return result;
}

void rtc::SSLCertificate::GetStats(rtc::SSLCertificate *this@<X0>, uint64_t *a2@<X8>)
{
  size_t v4;
  __int128 *v5;
  void **v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  std::string::size_type v13;
  std::string *v14;
  char *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  std::string v20;
  int v21[2];
  uint64_t v22;
  int v23[2];
  void *__p[2];
  uint64_t v25;
  void **v26;
  __int128 v27;
  uint64_t v28;

  v27 = 0uLL;
  v28 = 0;
  if (((*(uint64_t (**)(rtc::SSLCertificate *, __int128 *))(*(_QWORD *)this + 40))(this, &v27) & 1) == 0)
    goto LABEL_11;
  if (SHIBYTE(v28) < 0)
  {
    v4 = *((_QWORD *)&v27 + 1);
    if ((*((_QWORD *)&v27 + 1) & 0x8000000000000000) != 0)
      goto LABEL_35;
    v5 = (__int128 *)v27;
    if (*((_QWORD *)&v27 + 1))
    {
      if (!(_QWORD)v27)
        goto LABEL_35;
    }
  }
  else
  {
    v4 = HIBYTE(v28);
    v5 = &v27;
  }
  rtc::SSLFingerprint::Create(v5, v4, (uint64_t)this, &v26);
  v6 = v26;
  if (v26)
  {
    v7 = v26[3];
    if (v7)
    {
      v8 = (unint64_t)v26[5];
      v9 = (unsigned __int8 *)v26[4] + v7[2];
      if ((v8 & 0x8000000000000000) != 0)
        goto LABEL_35;
    }
    else
    {
      v9 = 0;
      v8 = (unint64_t)v26[5];
      if ((v8 & 0x8000000000000000) != 0)
      {
LABEL_35:
        __break(1u);
        return;
      }
    }
    if (!v9 && v8)
      goto LABEL_35;
    v10 = __p;
    rtc::hex_encode_with_delimiter(v9, v8, 58, __p);
    if (v25 >= 0)
    {
      v11 = (char *)HIBYTE(v25);
    }
    else
    {
      v10 = (void **)__p[0];
      v11 = (char *)__p[1];
    }
    for (; v11; --v11)
    {
      *(_BYTE *)v10 = __toupper(*(char *)v10);
      v10 = (void **)((char *)v10 + 1);
    }
    *(_QWORD *)v21 = 0;
    v22 = 0;
    *(_QWORD *)v23 = 0;
    (*(void (**)(rtc::SSLCertificate *, int *))(*(_QWORD *)this + 32))(this, v21);
    memset(&v20, 0, sizeof(v20));
    rtc::Base64::EncodeFromArray(*(std::string **)v23, *(unint64_t *)v21, &v20);
    v12 = operator new();
    *(_OWORD *)v12 = *(_OWORD *)__p;
    *(_QWORD *)(v12 + 16) = v25;
    __p[0] = 0;
    __p[1] = 0;
    v25 = 0;
    *(_OWORD *)(v12 + 24) = v27;
    *(_QWORD *)(v12 + 40) = v28;
    v27 = 0uLL;
    v28 = 0;
    v13 = v20.__r_.__value_.__r.__words[2];
    *(_OWORD *)(v12 + 48) = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
    *(_QWORD *)(v12 + 64) = v13;
    *(_QWORD *)(v12 + 72) = 0;
    *a2 = v12;
    v14 = *(std::string **)v23;
    *(_QWORD *)v23 = 0;
    if (v14)
    {
      MEMORY[0x20BD0ADD4](v14, 0x1000C8077774924);
      if (SHIBYTE(v25) < 0)
        operator delete(__p[0]);
    }
    v26 = 0;
    v15 = (char *)v6[3];
    if (v15)
    {
      v16 = (unsigned int *)(v15 + 24);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = *((_QWORD *)v15 + 2);
        *((_QWORD *)v15 + 2) = 0;
        if (v19)
          MEMORY[0x20BD0ADD4](v19, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v15, 0x1010C40EE34DA14);
      }
    }
    if (*((char *)v6 + 23) < 0)
      operator delete(*v6);
    MEMORY[0x20BD0ADEC](v6, 0x1032C40CD05A1E1);
    if (SHIBYTE(v28) < 0)
LABEL_34:
      operator delete((void *)v27);
  }
  else
  {
LABEL_11:
    *a2 = 0;
    if (SHIBYTE(v28) < 0)
      goto LABEL_34;
  }
}

void rtc::SSLCertChain::~SSLCertChain(rtc::SSLCertChain *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 1);
    v4 = *(void **)this;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v2;
    operator delete(v4);
  }
}

_QWORD *rtc::SSLCertChain::Clone@<X0>(rtc::SSLCertChain *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;

  v4 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  v5 = v3 - *(_QWORD *)this;
  if (v3 == *(_QWORD *)this)
  {
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      abort();
    v6 = v5 >> 3;
    v7 = (char *)operator new(v3 - *(_QWORD *)this);
    bzero(v7, v5);
    v8 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v4 + v8) + 16))(&v13);
      v9 = v13;
      v13 = 0;
      v10 = *(_QWORD *)&v7[v8];
      *(_QWORD *)&v7[v8] = v9;
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v11 = v13;
        v13 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      v8 += 8;
    }
    while (v4 + v8 != v3);
    v5 = (int64_t)&v7[8 * v6];
  }
  result = (_QWORD *)operator new();
  *result = v7;
  result[1] = v5;
  result[2] = v5;
  *a2 = result;
  return result;
}

void rtc::SSLCertChain::GetStats(rtc::SSLCertChain *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  rtc::SSLCertificateStats *v8;
  rtc::SSLCertificateStats *v9;
  uint64_t v10;

  *a2 = 0;
  v3 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v3 >= 1)
  {
    v5 = 0;
    v6 = ((unint64_t)v3 >> 3) - 1;
    while (v6 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)
    {
      v8 = (rtc::SSLCertificateStats *)v5;
      rtc::SSLCertificate::GetStats(*(rtc::SSLCertificate **)(*(_QWORD *)this + 8 * v6), &v10);
      v5 = v10;
      if (v10)
      {
        v9 = *(rtc::SSLCertificateStats **)(v10 + 72);
        *(_QWORD *)(v10 + 72) = v8;
        if (v9)
        {
          rtc::SSLCertificateStats::~SSLCertificateStats(v9);
          MEMORY[0x20BD0ADEC]();
        }
        *a2 = v5;
      }
      else
      {
        *a2 = 0;
        if (v8)
        {
          rtc::SSLCertificateStats::~SSLCertificateStats(v8);
          MEMORY[0x20BD0ADEC]();
        }
      }
      v7 = v6-- + 1;
      if (v7 <= 1)
        return;
    }
    __break(1u);
  }
}

_BYTE *rtc::SSLFingerprint::Create@<X0>(_BYTE *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE *result;
  _QWORD *v8;
  size_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  size_t v18;
  _BYTE __src[64];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  result = (_BYTE *)(*(uint64_t (**)(uint64_t, _BYTE *, size_t, _BYTE *, uint64_t, size_t *))(*(_QWORD *)a3 + 48))(a3, a1, a2, __src, 64, &v18);
  v8 = 0;
  if (!(_DWORD)result)
    goto LABEL_17;
  v9 = v18;
  result = (_BYTE *)operator new();
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v8 = result;
  if (a2 > 0x16)
  {
    v11 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v11 = a2 | 7;
    v12 = v11 + 1;
    result = operator new(v11 + 1);
    v8[1] = a2;
    v8[2] = v12 | 0x8000000000000000;
    *v8 = result;
    v10 = &result[a2];
    if (result > a1)
      goto LABEL_10;
    goto LABEL_9;
  }
  result[23] = a2;
  v10 = &result[a2];
  if (result <= a1)
  {
LABEL_9:
    if (v10 > a1)
      __break(1u);
  }
LABEL_10:
  if (a2)
    result = memmove(result, a1, a2);
  *v10 = 0;
  v13 = v8 + 3;
  if (v9)
  {
    v14 = operator new();
    *(_QWORD *)v14 = v9;
    *(_QWORD *)(v14 + 8) = v9;
    v15 = (void *)operator new[]();
    *(_QWORD *)(v14 + 16) = v15;
    *(_DWORD *)(v14 + 24) = 0;
    v16 = (unsigned int *)(v14 + 24);
    *v13 = v14;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    result = memcpy(v15, __src, v9);
    v8[4] = 0;
    v8[5] = v9;
  }
  else
  {
    *v13 = 0;
    v8[4] = 0;
    v8[5] = 0;
  }
LABEL_17:
  *a4 = v8;
  return result;
}

uint64_t rtc::SSLFingerprint::CreateUniqueFromRfc4572@<X0>(uint64_t result@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v9;
  size_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  _BYTE __src[64];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v9 = (char *)result;
    result = rtc::IsFips180DigestAlgorithm(result, a2);
    if ((result & 1) != 0)
    {
      if (a4)
      {
        result = rtc::hex_decode_with_delimiter((uint64_t)__src, 0x40uLL, a3, a4, 0x3Au);
        if (!result)
        {
          v12 = 0;
LABEL_19:
          *a5 = v12;
          return result;
        }
        v10 = result;
        v11 = operator new();
        if (a2 < 0x7FFFFFFFFFFFFFF8)
        {
          v12 = (_QWORD *)v11;
          if (a2 > 0x16)
          {
            v14 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((a2 | 7) != 0x17)
              v14 = a2 | 7;
            v15 = v14 + 1;
            v13 = (char *)operator new(v14 + 1);
            v12[1] = a2;
            v12[2] = v15 | 0x8000000000000000;
            *v12 = v13;
            if (v13 > v9)
              goto LABEL_16;
          }
          else
          {
            *(_BYTE *)(v11 + 23) = a2;
            v13 = (char *)v11;
            if (v11 > (unint64_t)v9)
            {
LABEL_16:
              memmove(v13, v9, a2);
              v13[a2] = 0;
              v16 = operator new();
              *(_QWORD *)v16 = v10;
              *(_QWORD *)(v16 + 8) = v10;
              v17 = (void *)operator new[]();
              *(_QWORD *)(v16 + 16) = v17;
              *(_DWORD *)(v16 + 24) = 0;
              v18 = (unsigned int *)(v16 + 24);
              v12[3] = v16;
              do
                v19 = __ldxr(v18);
              while (__stxr(v19 + 1, v18));
              result = (uint64_t)memcpy(v17, __src, v10);
              v12[4] = 0;
              v12[5] = v10;
              goto LABEL_19;
            }
          }
          if (&v13[a2] <= v9)
            goto LABEL_16;
          __break(1u);
        }
        abort();
      }
    }
  }
  *a5 = 0;
  return result;
}

void rtc::SSLFingerprint::CreateFromCertificate(rtc::SSLFingerprint *this@<X0>, const rtc::RTCCertificate *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  size_t v6;
  _BYTE *p_p;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p;
  size_t v24;
  uint64_t v25;

  __p = 0;
  v24 = 0;
  v25 = 0;
  v5 = (*(uint64_t (**)(_QWORD, const rtc::RTCCertificate *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2);
  if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v5 + 40))(v5, &__p) & 1) != 0)
  {
    if (SHIBYTE(v25) < 0)
    {
      v6 = v24;
      if ((v24 & 0x8000000000000000) != 0 || (p_p = __p, v24) && !__p)
      {
        __break(1u);
        return;
      }
    }
    else
    {
      v6 = HIBYTE(v25);
      p_p = &__p;
    }
    v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
    rtc::SSLFingerprint::Create(p_p, v6, v15, a3);
    if (!*a3 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/ssl_fingerprint.cc");
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/ssl_fingerprint.cc");
    *a3 = 0;
  }
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
}

uint64_t rtc::SSLFingerprint::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  unsigned __int8 *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v9 = *((_QWORD *)a1 + 5);
  if (v9 != v6[5])
    return 0;
  v10 = *((_QWORD *)a1 + 3);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16) + *((_QWORD *)a1 + 4);
    v12 = v6[3];
    if (v12)
      goto LABEL_19;
LABEL_25:
    if (v11)
      goto LABEL_20;
    return 1;
  }
  v11 = 0;
  v12 = v6[3];
  if (!v12)
    goto LABEL_25;
LABEL_19:
  if (v11 == *(_QWORD *)(v12 + 16) + v6[4])
    return 1;
LABEL_20:
  if (v10)
  {
    v13 = (const void *)(*(_QWORD *)(v10 + 16) + *((_QWORD *)a1 + 4));
    if (v12)
      return memcmp(v13, (const void *)(*(_QWORD *)(v12 + 16) + v6[4]), v9) == 0;
  }
  else
  {
    v13 = 0;
    if (v12)
      return memcmp(v13, (const void *)(*(_QWORD *)(v12 + 16) + v6[4]), v9) == 0;
  }
  return memcmp(v13, 0, v9) == 0;
}

void rtc::SSLFingerprint::ToString(rtc::SSLFingerprint *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  int v5;
  std::string::size_type v6;
  uint64_t v7;
  std::string *v8;
  std::string::size_type v10;
  unint64_t v11;
  unsigned __int8 *v12;
  void **p_src;
  unsigned int v14;
  size_t v15;
  size_t v16;
  BOOL v17;
  void **v18;
  int v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v24;
  void **__src;
  size_t v26;
  std::string::size_type __n_add;

  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = (char)size;
  if ((size & 0x80u) == 0)
    v6 = 22;
  else
    v6 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (v6 != size)
  {
    if (v5 >= 0)
      v8 = a2;
    else
      v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if ((char *)v8 + size <= " " && (char *)&v8->__r_.__value_.__l.__data_ + size + 1 > " ")
      goto LABEL_60;
    v8->__r_.__value_.__s.__data_[size] = 32;
    v10 = size + 1;
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      a2->__r_.__value_.__l.__size_ = v10;
      v8->__r_.__value_.__s.__data_[v10] = 0;
      v7 = *((_QWORD *)this + 3);
      if (!v7)
        goto LABEL_24;
    }
    else
    {
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = v10 & 0x7F;
      v8->__r_.__value_.__s.__data_[v10] = 0;
      v7 = *((_QWORD *)this + 3);
      if (!v7)
        goto LABEL_24;
    }
LABEL_21:
    v11 = *((_QWORD *)this + 5);
    v12 = (unsigned __int8 *)(*(_QWORD *)(v7 + 16) + *((_QWORD *)this + 4));
    if ((v11 & 0x8000000000000000) != 0)
      goto LABEL_60;
    goto LABEL_25;
  }
  std::string::__grow_by_and_replace(a2, v6, 1uLL, v6, v6, 0, 1uLL, " ");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    goto LABEL_21;
LABEL_24:
  v12 = 0;
  v11 = *((_QWORD *)this + 5);
  if ((v11 & 0x8000000000000000) != 0)
    goto LABEL_60;
LABEL_25:
  if (!v12 && v11)
    goto LABEL_60;
  p_src = (void **)&__src;
  rtc::hex_encode_with_delimiter(v12, v11, 58, &__src);
  v14 = __n_add;
  if ((__n_add & 0x80u) == 0)
  {
    v15 = __n_add;
  }
  else
  {
    p_src = __src;
    v15 = v26;
  }
  if (v15)
  {
    do
    {
      *(_BYTE *)p_src = __toupper(*(char *)p_src);
      p_src = (void **)((char *)p_src + 1);
      --v15;
    }
    while (v15);
    v14 = __n_add;
  }
  if ((v14 & 0x80) != 0)
  {
    v18 = __src;
    v16 = v26;
    v17 = v26 == 0;
    if (!__src && v26)
      goto LABEL_60;
  }
  else
  {
    v16 = v14;
    v17 = v14 == 0;
    v18 = (void **)&__src;
  }
  v19 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v19 >= 0)
    v20 = 22;
  else
    v20 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v19 >= 0)
    v21 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v21 = a2->__r_.__value_.__l.__size_;
  if (v20 - v21 >= v16)
  {
    if (v17)
      goto LABEL_56;
    if (v19 >= 0)
      v22 = a2;
    else
      v22 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if ((char *)v22 + v21 > (char *)v18 || (char *)v22 + v21 + v16 <= (char *)v18)
    {
      memmove((char *)v22 + v21, v18, v16);
      v24 = v21 + v16;
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        a2->__r_.__value_.__l.__size_ = v24;
        v22->__r_.__value_.__s.__data_[v24] = 0;
        if (((char)__n_add & 0x80000000) == 0)
          return;
LABEL_59:
        operator delete(__src);
        return;
      }
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = v24 & 0x7F;
      v22->__r_.__value_.__s.__data_[v24] = 0;
LABEL_56:
      if (((char)__n_add & 0x80000000) == 0)
        return;
      goto LABEL_59;
    }
LABEL_60:
    __break(1u);
    return;
  }
  std::string::__grow_by_and_replace(a2, v20, v21 + v16 - v20, v21, v21, 0, v16, (const std::string::value_type *)v18);
  if ((char)__n_add < 0)
    goto LABEL_59;
}

uint64_t rtc::ASN1TimeToSec(rtc *this, const unsigned __int8 *a2, int a3)
{
  uint64_t result;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  int v18;
  _BOOL4 v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  if (!a2)
    return -1;
  if (*((_BYTE *)this + (_QWORD)a2 - 1) != 90
    || (const unsigned __int8 *)(strspn((const char *)this, "0123456789") + 1) != a2)
  {
    return -1;
  }
  if (a3)
  {
    if ((unint64_t)a2 < 0xB)
      return -1;
    v9 = (unsigned __int8 *)this + 4;
    v8 = *((unsigned __int8 *)this + 3)
       + 10 * (*((unsigned __int8 *)this + 2) + 10 * (*((unsigned __int8 *)this + 1) + 10 * *(unsigned __int8 *)this))
       - 55228;
    if (a2 != (const unsigned __int8 *)15)
      return -1;
  }
  else
  {
    if ((unint64_t)a2 < 9)
      return -1;
    v7 = *((unsigned __int8 *)this + 1) + 10 * *(unsigned __int8 *)this;
    v8 = v7 - 528;
    v9 = (unsigned __int8 *)this + 2;
    v10 = v7 - 428;
    if (v8 < 50)
      v8 = v10;
    if (a2 != (const unsigned __int8 *)13)
      return -1;
  }
  v11 = v8 + 1900;
  if ((v8 & 3) != 0)
  {
    v12 = 0;
  }
  else
  {
    HIDWORD(v13) = -1030792151 * v11 + 85899344;
    LODWORD(v13) = HIDWORD(v13);
    if ((v13 >> 2) <= 0x28F5C28)
    {
      HIDWORD(v14) = -1030792151 * v11 + 85899344;
      LODWORD(v14) = HIDWORD(v14);
      v12 = (v14 >> 4) < 0xA3D70B;
    }
    else
    {
      v12 = 1;
    }
  }
  result = -1;
  v15 = __OFSUB__(v8, 70);
  v16 = v8 - 70;
  if (v16 < 0 == v15)
  {
    v17 = v9[1] + 10 * *v9 - 529;
    if (v17 <= 0xB)
    {
      v18 = v9[3] + 10 * v9[2] - 528;
      if (v18 >= 1)
      {
        v19 = v9[1] + 10 * *v9 == 530 && v12;
        if (v18 <= rtc::TmToSeconds(tm const&)::mdays[v17] + v19)
        {
          v20 = v9[5] + 10 * v9[4] - 528;
          if (v20 <= 0x17)
          {
            v21 = v9[7] + 10 * v9[6] - 528;
            if (v21 <= 0x3B)
            {
              v22 = v9[9] + 10 * v9[8] - 528;
              if (v22 <= 0x3B)
              {
                if (v17 >= 2)
                  v12 = 0;
                return 60
                     * (60
                      * (24
                       * (rtc::TmToSeconds(tm const&)::cumul_mdays[v17]
                        + (uint64_t)(int)(v11 / 0x190 - v11 / 0x64 + (v11 >> 2) + v18 - v12 - 478)
                        + 365 * v16)
                       + v20)
                      + v21)
                     + v22;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t rtc::KeyParams::RSA(rtc::KeyParams *this)
{
  return (_QWORD)this << 32;
}

uint64_t rtc::KeyParams::ECDSA(uint64_t a1)
{
  return (a1 << 32) | 1;
}

uint64_t rtc::SSLIdentity::PemToDer(char *__src, size_t __len, void *a3, unint64_t a4, uint64_t a5)
{
  char *v10;
  size_t v11;
  size_t v12;
  char *v13;
  int v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v23;
  void **v24;
  std::string::size_type v25;
  std::string::size_type size;
  std::string *v27;
  char *v28;
  std::string::size_type v29;
  char v30;
  std::string *p_p;
  int64_t v32;
  char *v33;
  unint64_t v34;
  int v35;
  int64_t v36;
  void *v37;
  int64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  size_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  void **v52;
  void **v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string *v56;
  char *v57;
  std::string::size_type v58;
  char v59;
  std::string *v60;
  int64_t v61;
  char *v62;
  uint64_t v63;
  int v64;
  int64_t v65;
  void *v66;
  int64_t v67;
  char *v68;
  char *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string *v72;
  std::string *v73;
  uint64_t v75;
  uint64_t v76;
  std::string::size_type v77;
  std::string *v78;
  uint64_t v79;
  std::string v80;
  std::string __p;
  void *v82;
  size_t v83;
  int64_t v84;

  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_170;
  if (__len > 0x16)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    v10 = (char *)operator new(v11 + 1);
    v83 = __len;
    v84 = v12 | 0x8000000000000000;
    v82 = v10;
  }
  else
  {
    HIBYTE(v84) = __len;
    v10 = (char *)&v82;
  }
  v13 = &v10[__len];
  if (v10 <= __src && v13 > __src)
    goto LABEL_169;
  if (__len)
    memmove(v10, __src, __len);
  *v13 = 0;
  v15 = SHIBYTE(v84);
  v16 = v84 >= 0 ? HIBYTE(v84) : v83;
  v17 = v16 + 11;
  if (v16 + 11 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_170;
  if (v17 > 0x16)
  {
    v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v19 = v17 | 7;
    v20 = v19 + 1;
    v18 = (char *)operator new(v19 + 1);
    v80.__r_.__value_.__l.__size_ = v16 + 11;
    v80.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  }
  else
  {
    memset(&v80, 0, sizeof(v80));
    v18 = (char *)&v80;
    *((_BYTE *)&v80.__r_.__value_.__s + 23) = v16 + 11;
  }
  v21 = (void **)(v18 + 11);
  if (v18 <= "-----BEGIN " && v21 > (void **)"-----BEGIN ")
    goto LABEL_169;
  *(_DWORD *)(v18 + 7) = 542001479;
  *(_QWORD *)v18 = *(_QWORD *)"-----BEGIN ";
  v23 = v15 >= 0 ? &v82 : (void **)v82;
  v24 = (void **)((char *)v21 + v16);
  if (v23 >= v21 && v24 > v23)
    goto LABEL_169;
  if (v16)
    memmove(v21, v23, v16);
  *(_BYTE *)v24 = 0;
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = 22;
  else
    v25 = (v80.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  else
    size = v80.__r_.__value_.__l.__size_;
  v79 = a5;
  if (v25 - size >= 5)
  {
    v27 = &v80;
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v80.__r_.__value_.__r.__words[0];
    v28 = (char *)v27 + size;
    if ((char *)v27 + size <= "-----" && v28 + 5 > "-----")
      goto LABEL_169;
    v28[4] = 45;
    *(_DWORD *)v28 = 757935405;
    v29 = size + 5;
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      v80.__r_.__value_.__l.__size_ = size + 5;
    else
      *((_BYTE *)&v80.__r_.__value_.__s + 23) = v29 & 0x7F;
    v27->__r_.__value_.__s.__data_[v29] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v80, v25, size - v25 + 5, size, size, 0, 5uLL, "-----");
  }
  __p = v80;
  memset(&v80, 0, sizeof(v80));
  v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v32 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_169;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_)
    {
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_169;
    }
  }
  else
  {
    p_p = &__p;
    v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (!v32)
  {
    v34 = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_72;
    goto LABEL_60;
  }
  if (!p_p)
    goto LABEL_169;
  v33 = (char *)a3 + a4;
  if ((uint64_t)a4 >= v32)
  {
    v35 = p_p->__r_.__value_.__s.__data_[0];
    v36 = a4;
    v37 = a3;
    do
    {
      v38 = v36 - v32;
      if (v38 == -1)
        break;
      v39 = (char *)memchr(v37, v35, v38 + 1);
      if (!v39)
        break;
      v40 = v39;
      if (!memcmp(v39, p_p, v32))
      {
        if (v40 == v33)
          v34 = -1;
        else
          v34 = v40 - (_BYTE *)a3;
        if (v30 < 0)
          goto LABEL_60;
        goto LABEL_72;
      }
      v37 = v40 + 1;
      v36 = v33 - (v40 + 1);
    }
    while (v36 >= v32);
  }
  v34 = -1;
  if (v30 < 0)
  {
LABEL_60:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
  }
LABEL_72:
  v41 = 0;
  if (v34 == -1)
    goto LABEL_148;
  if (a4 <= v34)
    goto LABEL_148;
  v42 = (char *)memchr((char *)a3 + v34, 10, a4 - v34);
  v41 = 0;
  if (!v42)
    goto LABEL_148;
  v43 = (char *)(v42 - (_BYTE *)a3);
  if (v42 - (_BYTE *)a3 == -1)
    goto LABEL_148;
  v44 = SHIBYTE(v84);
  if (v84 >= 0)
    v45 = HIBYTE(v84);
  else
    v45 = v83;
  v46 = v45 + 9;
  if (v45 + 9 > 0x7FFFFFFFFFFFFFF7)
LABEL_170:
    abort();
  if (v46 > 0x16)
  {
    v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v48 = v46 | 7;
    v49 = v48 + 1;
    v47 = (char *)operator new(v48 + 1);
    v80.__r_.__value_.__l.__size_ = v45 + 9;
    v80.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
  }
  else
  {
    memset(&v80, 0, sizeof(v80));
    v47 = (char *)&v80;
    *((_BYTE *)&v80.__r_.__value_.__s + 23) = v45 + 9;
  }
  v50 = (void **)(v47 + 9);
  if (v47 <= "-----END " && v50 > (void **)"-----END ")
    goto LABEL_169;
  v47[8] = 32;
  *(_QWORD *)v47 = *(_QWORD *)"-----END ";
  v52 = v44 >= 0 ? &v82 : (void **)v82;
  v53 = (void **)((char *)v50 + v45);
  if (v52 >= v50 && v53 > v52)
    goto LABEL_169;
  if (v45)
    memmove(v50, v52, v45);
  *(_BYTE *)v53 = 0;
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = 22;
  else
    v54 = (v80.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  else
    v55 = v80.__r_.__value_.__l.__size_;
  if (v54 - v55 >= 5)
  {
    v56 = &v80;
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v56 = (std::string *)v80.__r_.__value_.__r.__words[0];
    v57 = (char *)v56 + v55;
    if ((char *)v56 + v55 <= "-----" && v57 + 5 > "-----")
      goto LABEL_169;
    v57[4] = 45;
    *(_DWORD *)v57 = 757935405;
    v58 = v55 + 5;
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      v80.__r_.__value_.__l.__size_ = v55 + 5;
    else
      *((_BYTE *)&v80.__r_.__value_.__s + 23) = v58 & 0x7F;
    v56->__r_.__value_.__s.__data_[v58] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v80, v54, v55 - v54 + 5, v55, v55, 0, 5uLL, "-----");
  }
  __p = v80;
  memset(&v80, 0, sizeof(v80));
  v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v61 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_169;
    v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_)
    {
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_169;
    }
  }
  else
  {
    v60 = &__p;
    v61 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v61)
  {
    if (!v60)
      goto LABEL_169;
    v62 = (char *)a3 + a4;
    if ((uint64_t)a4 >= v61)
    {
      v64 = v60->__r_.__value_.__s.__data_[0];
      v65 = a4;
      v66 = a3;
      do
      {
        v67 = v65 - v61;
        if (v67 == -1)
          break;
        v68 = (char *)memchr(v66, v64, v67 + 1);
        if (!v68)
          break;
        v69 = v68;
        if (!memcmp(v68, v60, v61))
        {
          if (v69 == v62)
            v63 = -1;
          else
            v63 = v69 - (_BYTE *)a3;
          if (v59 < 0)
            goto LABEL_123;
          goto LABEL_135;
        }
        v66 = v69 + 1;
        v65 = v62 - (v69 + 1);
      }
      while (v65 >= v61);
    }
    v63 = -1;
    if ((v59 & 0x80) == 0)
      goto LABEL_135;
    goto LABEL_123;
  }
  v63 = 0;
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
LABEL_123:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
  }
LABEL_135:
  if (v63 != -1)
  {
    if (a4 <= (unint64_t)v43)
      goto LABEL_170;
    if (a4 - (unint64_t)(v43 + 1) >= v63 - (uint64_t)(v43 + 1))
      v70 = v63 - (_QWORD)(v43 + 1);
    else
      v70 = a4 - (_QWORD)(v43 + 1);
    if ((v70 & 0x8000000000000000) != 0 || !a3 && v70)
      goto LABEL_169;
    if (v70 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_170;
    v71 = (std::string *)&v43[(_QWORD)a3 + 1];
    if (v70 > 0x16)
    {
      v75 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v70 | 7) != 0x17)
        v75 = v70 | 7;
      v76 = v75 + 1;
      v72 = (std::string *)operator new(v75 + 1);
      __p.__r_.__value_.__l.__size_ = v70;
      __p.__r_.__value_.__r.__words[2] = v76 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      v73 = (std::string *)((char *)v72 + v70);
      if (v72 > v71)
        goto LABEL_155;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v70;
      v72 = &__p;
      v73 = (std::string *)((char *)&__p + v70);
      if (&__p > v71)
        goto LABEL_155;
    }
    if (v73 <= v71)
    {
LABEL_155:
      if (v70)
        memmove(v72, v71, v70);
      v73->__r_.__value_.__s.__data_[0] = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v78 = &__p;
LABEL_162:
        memset(&v80, 0, sizeof(v80));
        rtc::Base64::DecodeFromArrayTemplate<std::string>((uint64_t)v78, (const char *)v77, 26, &v80, 0);
        if (*(char *)(v79 + 23) < 0)
        {
          operator delete(*(void **)v79);
          *(std::string *)v79 = v80;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_164:
            v41 = 1;
            if ((SHIBYTE(v84) & 0x80000000) == 0)
              return v41;
            goto LABEL_149;
          }
        }
        else
        {
          *(std::string *)v79 = v80;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_164;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        v41 = 1;
        if ((SHIBYTE(v84) & 0x80000000) == 0)
          return v41;
LABEL_149:
        operator delete(v82);
        return v41;
      }
      v77 = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
      {
        v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__l.__size_ || __p.__r_.__value_.__r.__words[0])
          goto LABEL_162;
      }
    }
LABEL_169:
    __break(1u);
    goto LABEL_170;
  }
  v41 = 0;
LABEL_148:
  if (SHIBYTE(v84) < 0)
    goto LABEL_149;
  return v41;
}

void rtc::SSLIdentity::DerToPem(char *__src@<X0>, size_t __len@<X1>, std::string *a3@<X2>, unint64_t a4@<X3>, std::string *a5@<X8>)
{
  size_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  std::string::value_type *v15;
  unint64_t v16;
  std::string::size_type v17;
  std::string::size_type size;
  std::string *v19;
  char *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  unint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  const std::string::value_type *v28;
  uint64_t v29;
  std::string::size_type v30;
  unint64_t i;
  std::string *p_p;
  size_t v33;
  std::string::value_type *p_p_new_stuff;
  uint64_t v35;
  uint64_t v36;
  std::string::value_type *v37;
  std::string::value_type *v38;
  std::string::size_type v40;
  BOOL v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string *v45;
  char *v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string *v50;
  _BYTE *v51;
  std::string::size_type v52;
  std::string *v53;
  char *v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string::size_type v57;
  std::string *v58;
  char *v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string *v63;
  char *v64;
  std::string::size_type v65;
  std::string::value_type *v66;
  size_t v67;
  std::string *v68;
  std::string::value_type *__p_new_stuff;
  size_t v70;
  unint64_t v71;
  std::string __p;
  std::string v73;

  memset(&v73, 0, sizeof(v73));
  if (&v73 <= (std::string *)"-----BEGIN " && (char *)&v73.__r_.__value_.__r.__words[1] + 3 > "-----BEGIN ")
    goto LABEL_161;
  strcpy((char *)&v73, "-----BEGIN ");
  *((_BYTE *)&v73.__r_.__value_.__s + 23) = 11;
  if (!__src)
  {
    if (__len)
      goto LABEL_161;
  }
  if (__len <= 0xB)
  {
    if (__len)
    {
      if ((char *)&v73.__r_.__value_.__r.__words[1] + 3 <= __src
        && (char *)&v73.__r_.__value_.__r.__words[1] + __len + 3 > __src)
      {
        goto LABEL_161;
      }
      memmove((char *)&v73.__r_.__value_.__r.__words[1] + 3, __src, __len);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        v73.__r_.__value_.__l.__size_ = __len + 11;
      else
        *((_BYTE *)&v73.__r_.__value_.__s + 23) = __len + 11;
      v73.__r_.__value_.__s.__data_[__len + 11] = 0;
      LODWORD(v16) = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    }
    else
    {
      LODWORD(v16) = 11;
    }
  }
  else
  {
    if (__len - 0x7FFFFFFFFFFFFFECLL <= 0x800000000000001ELL)
      goto LABEL_162;
    v11 = __len + 11;
    v12 = 44;
    if (__len + 11 > 0x2C)
      v12 = __len + 11;
    v13 = (v12 | 7) + 1;
    v14 = (std::string *)operator new(v13);
    v15 = &v14->__r_.__value_.__s.__data_[11];
    if (&v73 >= v14 && (std::string *)((char *)&v14->__r_.__value_.__r.__words[1] + 3) > &v73)
      goto LABEL_161;
    *(_DWORD *)((char *)v14->__r_.__value_.__r.__words + 7) = 542001479;
    v14->__r_.__value_.__r.__words[0] = *(_QWORD *)"-----BEGIN ";
    if (v15 <= __src && &v15[__len] > __src)
      goto LABEL_161;
    memcpy(v15, __src, __len);
    v73.__r_.__value_.__l.__size_ = __len + 11;
    v73.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    v14->__r_.__value_.__s.__data_[v11] = 0;
    v16 = (v13 | 0x8000000000000000) >> 56;
  }
  if ((v16 & 0x80u) == 0)
    v17 = 22;
  else
    v17 = (v73.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v16 & 0x80u) == 0)
    size = v16;
  else
    size = v73.__r_.__value_.__l.__size_;
  v67 = __len;
  v68 = a5;
  v66 = __src;
  if (v17 - size >= 6)
  {
    v19 = &v73;
    if ((v16 & 0x80u) != 0)
      v19 = (std::string *)v73.__r_.__value_.__r.__words[0];
    v20 = (char *)v19 + size;
    if ((char *)v19 + size <= "-----\n" && v20 + 6 > "-----\n")
      goto LABEL_161;
    *((_WORD *)v20 + 2) = 2605;
    *(_DWORD *)v20 = 757935405;
    v21 = size + 6;
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      v73.__r_.__value_.__l.__size_ = size + 6;
    else
      *((_BYTE *)&v73.__r_.__value_.__s + 23) = v21 & 0x7F;
    v19->__r_.__value_.__s.__data_[v21] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v73, v17, size - v17 + 6, size, size, 0, 6uLL, "-----\n");
  }
  memset(&__p, 0, sizeof(__p));
  rtc::Base64::EncodeFromArray(a3, a4, &__p);
  v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v22 = __p.__r_.__value_.__l.__size_;
  v23 = v22 + 63;
  if (v23 >= 0x40)
  {
    v29 = 0;
    v30 = 0;
    for (i = v23 >> 6; i; --i)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ < v30)
          goto LABEL_162;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ + v29 >= 0x40)
          v33 = 64;
        else
          v33 = __p.__r_.__value_.__l.__size_ + v29;
        if (v33 <= 0x16)
        {
LABEL_60:
          HIBYTE(v71) = v33;
          p_p_new_stuff = (std::string::value_type *)&__p_new_stuff;
          goto LABEL_69;
        }
      }
      else
      {
        if (v30 > HIBYTE(__p.__r_.__value_.__r.__words[2]))
          goto LABEL_162;
        p_p = &__p;
        if ((unint64_t)HIBYTE(__p.__r_.__value_.__r.__words[2]) + v29 >= 0x40)
          v33 = 64;
        else
          v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]) + v29;
        if (v33 <= 0x16)
          goto LABEL_60;
      }
      v35 = (v33 & 0x78) + 8;
      if ((v33 | 7) != 0x17)
        v35 = v33 | 7;
      v36 = v35 + 1;
      p_p_new_stuff = (std::string::value_type *)operator new(v35 + 1);
      v70 = v33;
      v71 = v36 | 0x8000000000000000;
      __p_new_stuff = p_p_new_stuff;
LABEL_69:
      v37 = (char *)p_p + v30;
      v38 = &p_p_new_stuff[v33];
      if (p_p_new_stuff <= v37 && v38 > v37)
        goto LABEL_161;
      if (v33)
        memmove(p_p_new_stuff, v37, v33);
      *v38 = 0;
      if (SHIBYTE(v71) < 0)
      {
        v40 = v70;
        if ((v70 & 0x8000000000000000) != 0)
          goto LABEL_161;
        v42 = __p_new_stuff;
        v41 = v70 == 0;
        if (v70)
        {
          if (!__p_new_stuff)
            goto LABEL_161;
        }
      }
      else
      {
        v40 = HIBYTE(v71);
        v41 = HIBYTE(v71) == 0;
        v42 = (const std::string::value_type *)&__p_new_stuff;
      }
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = 22;
      else
        v43 = (v73.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      else
        v44 = v73.__r_.__value_.__l.__size_;
      if (v43 - v44 < v40)
      {
        std::string::__grow_by_and_replace(&v73, v43, v44 + v40 - v43, v44, v44, 0, v40, v42);
        if ((SHIBYTE(v71) & 0x80000000) == 0)
          goto LABEL_98;
LABEL_88:
        operator delete(__p_new_stuff);
        goto LABEL_98;
      }
      if (v41)
        goto LABEL_97;
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v73;
      else
        v45 = (std::string *)v73.__r_.__value_.__r.__words[0];
      v46 = (char *)v45 + v44;
      if ((char *)v45 + v44 <= v42 && &v46[v40] > v42)
        goto LABEL_161;
      memmove(v46, v42, v40);
      v47 = v44 + v40;
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        *((_BYTE *)&v73.__r_.__value_.__s + 23) = v47 & 0x7F;
        v45->__r_.__value_.__s.__data_[v47] = 0;
LABEL_97:
        if (SHIBYTE(v71) < 0)
          goto LABEL_88;
        goto LABEL_98;
      }
      v73.__r_.__value_.__l.__size_ = v44 + v40;
      v45->__r_.__value_.__s.__data_[v47] = 0;
      if (SHIBYTE(v71) < 0)
        goto LABEL_88;
LABEL_98:
      v48 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = 22;
      else
        v49 = (v73.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v48 = v73.__r_.__value_.__l.__size_;
      if (v49 == v48)
      {
        std::string::__grow_by_and_replace(&v73, v49, 1uLL, v49, v49, 0, 1uLL, "\n");
      }
      else
      {
        if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = &v73;
        else
          v50 = (std::string *)v73.__r_.__value_.__r.__words[0];
        v51 = (char *)v50 + v48;
        if ((char *)v50 + v48 <= "\n" && v51 + 1 > "\n")
          goto LABEL_161;
        *v51 = 10;
        v52 = v48 + 1;
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          v73.__r_.__value_.__l.__size_ = v52;
        else
          *((_BYTE *)&v73.__r_.__value_.__s + 23) = v52 & 0x7F;
        v50->__r_.__value_.__s.__data_[v52] = 0;
      }
      v30 += 64;
      v29 -= 64;
    }
  }
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = 22;
  else
    v24 = (v73.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  else
    v25 = v73.__r_.__value_.__l.__size_;
  if (v24 - v25 >= 9)
  {
    v53 = &v73;
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v53 = (std::string *)v73.__r_.__value_.__r.__words[0];
    v54 = (char *)v53 + v25;
    v27 = v67;
    v26 = v68;
    v28 = v66;
    if ((char *)v53 + v25 <= "-----END " && v54 + 9 > "-----END ")
      goto LABEL_161;
    v54[8] = 32;
    *(_QWORD *)v54 = *(_QWORD *)"-----END ";
    v55 = v25 + 9;
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      v73.__r_.__value_.__l.__size_ = v25 + 9;
    else
      *((_BYTE *)&v73.__r_.__value_.__s + 23) = v55 & 0x7F;
    v53->__r_.__value_.__s.__data_[v55] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v73, v24, v25 - v24 + 9, v25, v25, 0, 9uLL, "-----END ");
    v27 = v67;
    v26 = v68;
    v28 = v66;
  }
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = 22;
  else
    v56 = (v73.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  else
    v57 = v73.__r_.__value_.__l.__size_;
  if (v56 - v57 < v27)
  {
    std::string::__grow_by_and_replace(&v73, v56, v57 + v27 - v56, v57, v57, 0, v27, v28);
    goto LABEL_141;
  }
  if (v27)
  {
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v73;
    else
      v58 = (std::string *)v73.__r_.__value_.__r.__words[0];
    v59 = (char *)v58 + v57;
    if ((char *)v58 + v57 > v28 || &v59[v27] <= v28)
    {
      memmove(v59, v28, v27);
      v60 = v57 + v27;
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        v73.__r_.__value_.__l.__size_ = v57 + v27;
      else
        *((_BYTE *)&v73.__r_.__value_.__s + 23) = v60 & 0x7F;
      v58->__r_.__value_.__s.__data_[v60] = 0;
      goto LABEL_141;
    }
LABEL_161:
    __break(1u);
LABEL_162:
    abort();
  }
LABEL_141:
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = 22;
  else
    v61 = (v73.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  else
    v62 = v73.__r_.__value_.__l.__size_;
  if (v61 - v62 >= 6)
  {
    v63 = &v73;
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v63 = (std::string *)v73.__r_.__value_.__r.__words[0];
    v64 = (char *)v63 + v62;
    if ((char *)v63 + v62 > "-----\n" || v64 + 6 <= "-----\n")
    {
      *((_WORD *)v64 + 2) = 2605;
      *(_DWORD *)v64 = 757935405;
      v65 = v62 + 6;
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        v73.__r_.__value_.__l.__size_ = v62 + 6;
      else
        *((_BYTE *)&v73.__r_.__value_.__s + 23) = v65 & 0x7F;
      v63->__r_.__value_.__s.__data_[v65] = 0;
      goto LABEL_157;
    }
    goto LABEL_161;
  }
  std::string::__grow_by_and_replace(&v73, v61, v62 - v61 + 6, v62, v62, 0, 6uLL, "-----\n");
LABEL_157:
  *v26 = v73;
  memset(&v73, 0, sizeof(v73));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
  }
}

char *rtc::SrtpCryptoSuiteToName@<X0>(char *this@<X0>, unint64_t a2@<X8>)
{
  const char *v3;
  const char *v4;

  switch((int)this)
  {
    case 1:
      this = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = this;
      *(_OWORD *)(a2 + 8) = xmmword_208F05110;
      v3 = "AES_CM_128_HMAC_SHA1_80";
      if (this <= "AES_CM_128_HMAC_SHA1_80")
        goto LABEL_5;
      goto LABEL_6;
    case 2:
      this = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = this;
      *(_OWORD *)(a2 + 8) = xmmword_208F05110;
      v3 = "AES_CM_128_HMAC_SHA1_32";
      if (this > "AES_CM_128_HMAC_SHA1_32")
        goto LABEL_6;
LABEL_5:
      if (this + 23 > v3)
        goto LABEL_13;
LABEL_6:
      *(_OWORD *)this = *(_OWORD *)v3;
      *(_QWORD *)(this + 15) = *(_QWORD *)(v3 + 15);
      this[23] = 0;
      break;
    case 7:
      *(_BYTE *)(a2 + 23) = 16;
      v4 = "AEAD_AES_128_GCM";
      if (a2 > (unint64_t)"AEAD_AES_128_GCM")
        goto LABEL_12;
      goto LABEL_11;
    case 8:
      *(_BYTE *)(a2 + 23) = 16;
      v4 = "AEAD_AES_256_GCM";
      if (a2 > (unint64_t)"AEAD_AES_256_GCM")
        goto LABEL_12;
LABEL_11:
      if (a2 + 16 > (unint64_t)v4)
      {
LABEL_13:
        __break(1u);
      }
      else
      {
LABEL_12:
        *(_OWORD *)a2 = *(_OWORD *)v4;
        *(_BYTE *)(a2 + 16) = 0;
      }
      break;
    default:
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      return this;
  }
  return this;
}

uint64_t webrtc::StableTargetRateExperiment::StableTargetRateExperiment(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char *v8;
  char *v9;
  uint64_t v10;
  char *p_p;
  void *__p;
  uint64_t v14;
  unsigned __int8 v15;
  _QWORD v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C0B4170;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 55) = 7;
  if (a1 + 32 <= (unint64_t)"enabled" && a1 + 39 > (unint64_t)"enabled")
    goto LABEL_15;
  strcpy((char *)(a1 + 32), "enabled");
  *(_WORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = &unk_24C0B3FC0;
  *(_QWORD *)(a1 + 64) = off_24C0B4170;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v8 = (char *)operator new(0x19uLL);
  *(_QWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 104) = xmmword_208F05110;
  if (v8 <= "video_hysteresis_factor" && v8 + 23 > "video_hysteresis_factor")
    goto LABEL_15;
  strcpy(v8, "video_hysteresis_factor");
  *(_QWORD *)(a1 + 136) = off_24C0B4170;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 64) = &unk_24C0B3FF0;
  *(double *)(a1 + 128) = a3;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v9 = (char *)operator new(0x20uLL);
  *(_QWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = xmmword_208F05190;
  if (v9 <= "screenshare_hysteresis_factor" && v9 + 29 > "screenshare_hysteresis_factor")
    goto LABEL_15;
  strcpy(v9, "screenshare_hysteresis_factor");
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 136) = &unk_24C0B3FF0;
  *(double *)(a1 + 200) = a4;
  v16[0] = a1;
  v16[1] = a1 + 64;
  v16[2] = a1 + 136;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-StableTargetRate", 23);
  if (((char)v15 & 0x80000000) == 0)
  {
    v10 = v15;
    p_p = (char *)&__p;
    goto LABEL_12;
  }
  v10 = v14;
  if (v14 < 0 || (p_p = (char *)__p, v14) && !__p)
LABEL_15:
    __break(1u);
LABEL_12:
  webrtc::ParseFieldTrial(v16, 3, p_p, v10);
  if ((char)v15 < 0)
    operator delete(__p);
  return a1;
}

double dcsctp::StaleCookieErrorCause::SerializeTo(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  double result;

  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v5 > 0xFFFFFFFFFFFFFFF7)
  {
    *(_QWORD *)(a2 + 8) = &v4[v5 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 8uLL);
    v4 = *(char **)a2;
  }
  *(_QWORD *)&result = 134218496;
  *(_DWORD *)&v4[v5] = 134218496;
  *(_DWORD *)(*(_QWORD *)a2 + v5 + 4) = bswap32(*(_DWORD *)(a1 + 8));
  return result;
}

char *dcsctp::StaleCookieErrorCause::ToString@<X0>(dcsctp::StaleCookieErrorCause *this@<X0>, std::string *a2@<X8>)
{
  char *result;
  std::string v5;

  result = (char *)operator new(0x30uLL);
  if (result <= "Stale Cookie Error, staleness_us=" && result + 33 > "Stale Cookie Error, staleness_us=")
  {
    __break(1u);
  }
  else
  {
    strcpy(result, "Stale Cookie Error, staleness_us=");
    v5.__r_.__value_.__r.__words[0] = (std::string::size_type)result;
    *(_OWORD *)&v5.__r_.__value_.__r.__words[1] = xmmword_208F1C010;
    result = (char *)rtc::StringBuilder::operator<<(&v5, *((_DWORD *)this + 2));
    *a2 = v5;
  }
  return result;
}

void dcsctp::StaleCookieErrorCause::~StaleCookieErrorCause(dcsctp::StaleCookieErrorCause *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::StandaloneVad::AddAudio(webrtc::StandaloneVad *this, const __int16 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (a3 != 160)
    return 0xFFFFFFFFLL;
  v4 = *((_QWORD *)this + 121);
  if ((unint64_t)(v4 - 321) <= 0xFFFFFFFFFFFFFE1ELL)
  {
    v4 = 0;
    *((_QWORD *)this + 121) = 0;
  }
  memcpy((char *)this + 2 * v4 + 8, a2, 0x140uLL);
  result = 0;
  *((_QWORD *)this + 121) += 160;
  return result;
}

uint64_t webrtc::StandaloneVad::GetActivity(webrtc::StandaloneVad *this, double *a2, unint64_t a3)
{
  unint64_t v3;
  __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  double v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  double *v15;
  unint64_t v16;
  unint64_t v17;
  double *v18;
  _WORD v19[240];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 121);
  if (!v3)
    return 0xFFFFFFFFLL;
  if (v3 / 0xA0 > a3)
    return 0xFFFFFFFFLL;
  v7 = *(_QWORD *)this;
  v5 = (__int16 *)((char *)this + 8);
  v6 = v7;
  if (!v7 || *(_DWORD *)(v6 + 732) != 42 || v3 != 160 && v3 != 480 && v3 != 320)
    return 0xFFFFFFFFLL;
  WebRtcVad_Downsampling(v5, v19, (unsigned int *)(v6 + 4), v3);
  LODWORD(result) = WebRtcVad_CalcVad8khz(v6, (uint64_t)v19, v3 >> 1);
  result = (int)result >= 1 ? 1 : result;
  if ((result & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v10 = 0.01;
  if ((_DWORD)result)
    v10 = 0.5;
  *a2 = v10;
  if (v3 >= 0x140)
  {
    v11 = 2;
    if (v3 / 0xA0 > 2)
      v11 = v3 / 0xA0;
    if (v11 >= 5)
    {
      v13 = (v11 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      v12 = v13 | 1;
      v14 = vdupq_lane_s64(*(uint64_t *)&v10, 0);
      v15 = a2 + 3;
      v16 = v13;
      do
      {
        *((int64x2_t *)v15 - 1) = v14;
        *(int64x2_t *)v15 = v14;
        v15 += 4;
        v16 -= 4;
      }
      while (v16);
      if (v11 - 1 == v13)
        goto LABEL_25;
    }
    else
    {
      v12 = 1;
    }
    v17 = v11 - v12;
    v18 = &a2[v12];
    do
    {
      *v18++ = v10;
      --v17;
    }
    while (v17);
  }
LABEL_25:
  *((_QWORD *)this + 121) = 0;
  return result;
}

void dcsctp::StateCookie::Serialize(dcsctp::StateCookie *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<unsigned char>::__append((char **)a2, 0x2DuLL);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = v8 - *(_QWORD *)a2;
  if (v8 == *(_QWORD *)a2)
    v10 = 0;
  else
    v10 = *(char **)a2;
  if (v9 <= 0x2C)
  {
    v12 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v4, v5, v6, v7, v15);
    dcsctp::StateCookie::Deserialize((uint64_t)v12, v13, v14);
  }
  else
  {
    *(_QWORD *)v10 = 0x3030505443536364;
    *((_DWORD *)v10 + 2) = bswap32(*(_DWORD *)this);
    *((_DWORD *)v10 + 3) = bswap32(*((_DWORD *)this + 1));
    *((_DWORD *)v10 + 4) = bswap32(*((_DWORD *)this + 2));
    *((_DWORD *)v10 + 5) = bswap32(*((_DWORD *)this + 3));
    *((_DWORD *)v10 + 6) = bswap32(*((_DWORD *)this + 4));
    v11 = *((_QWORD *)this + 3);
    v10[28] = HIBYTE(v11);
    v10[29] = BYTE6(v11);
    v10[30] = BYTE5(v11);
    v10[31] = BYTE4(v11);
    *((_DWORD *)v10 + 8) = bswap32(*((_DWORD *)this + 6));
    v10[36] = *((_BYTE *)this + 32);
    v10[37] = *((_BYTE *)this + 33);
    v10[38] = *((_BYTE *)this + 34);
    *((_WORD *)v10 + 20) = bswap32(*((unsigned __int16 *)this + 18)) >> 16;
    *((_WORD *)v10 + 21) = bswap32(*((unsigned __int16 *)this + 19)) >> 16;
    v10[44] = *((_BYTE *)this + 35);
  }
}

uint64_t dcsctp::StateCookie::Deserialize@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 == 45
    && ((v3 = bswap32(*(_DWORD *)(result + 4)), bswap32(*(_DWORD *)result) == 1684230979)
      ? (v4 = v3 == 1414541360)
      : (v4 = 0),
        v4))
  {
    v5 = bswap32(*(_DWORD *)(result + 8));
    v6 = bswap32(*(_DWORD *)(result + 12));
    v7 = bswap32(*(_DWORD *)(result + 16));
    v8 = bswap32(*(_DWORD *)(result + 20));
    v9 = bswap32(*(_DWORD *)(result + 24));
    v10 = bswap64(*(_QWORD *)(result + 28));
    v11 = *(_BYTE *)(result + 36) != 0;
    v12 = *(_BYTE *)(result + 37) != 0;
    v13 = *(_BYTE *)(result + 38) != 0;
    v14 = *(unsigned __int8 *)(result + 40);
    v15 = *(unsigned __int8 *)(result + 41);
    v16 = *(unsigned __int8 *)(result + 42);
    v17 = *(unsigned __int8 *)(result + 43);
    result = *(unsigned __int8 *)(result + 44) != 0;
    *(_DWORD *)a3 = v5;
    *(_DWORD *)(a3 + 4) = v6;
    *(_DWORD *)(a3 + 8) = v7;
    *(_DWORD *)(a3 + 12) = v8;
    *(_DWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 24) = v10;
    *(_QWORD *)(a3 + 32) = v11 | (v12 << 8) | (v13 << 16) | (v14 << 40) | (v15 << 32) | (v16 << 56) | (v17 << 48) | (result << 24);
    *(_BYTE *)(a3 + 40) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
  }
  return result;
}

void dcsctp::StateCookieParameter::~StateCookieParameter(dcsctp::StateCookieParameter *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0C1200;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0C1200;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::StateCookieParameter::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  const void *v17;
  size_t v18;
  BOOL v19;
  std::string *v20;
  uint64_t v21;

  v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v13 = v10 + 4;
  v14 = v12 + v10 + 4;
  if (v12 >= v14)
  {
    if (v12 > v14)
      *(_QWORD *)(a2 + 8) = &v11[v14];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v10 + 4);
    v11 = *(char **)a2;
  }
  v15 = &v11[v12];
  *(_WORD *)v15 = 1792;
  v15[2] = HIBYTE(v13);
  v15[3] = v13;
  if (v10 >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v20 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v21);
    dcsctp::StateCookieParameter::ToString((dcsctp::StateCookieParameter *)v20);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    if (v16)
      v17 = *(const void **)(a1 + 8);
    else
      v17 = 0;
    if (v10 >= v16)
      v18 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    else
      v18 = v10;
    if (v17)
      v19 = v18 == 0;
    else
      v19 = 1;
    if (!v19)
      memcpy((void *)(*(_QWORD *)a2 + v12 + 4), v17, v18);
  }
}

void dcsctp::StateCookieParameter::ToString(dcsctp::StateCookieParameter *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string::size_type size;
  int v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v11;
  std::string v12;

  v4 = (char *)operator new(0x30uLL);
  if (v4 > "State Cookie parameter (cookie_length=" || v4 + 38 <= "State Cookie parameter (cookie_length=")
  {
    strcpy(v4, "State Cookie parameter (cookie_length=");
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
    *(_OWORD *)&v12.__r_.__value_.__r.__words[1] = xmmword_208F0AAE0;
    v5 = rtc::StringBuilder::operator<<(&v12, *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
    size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    v7 = (char)size;
    if ((size & 0x80u) == 0)
      v8 = 22;
    else
      v8 = (v5->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((size & 0x80u) != 0)
      size = v5->__r_.__value_.__l.__size_;
    if (v8 == size)
    {
      std::string::__grow_by_and_replace(v5, v8, 1uLL, v8, v8, 0, 1uLL, ")");
LABEL_21:
      *a2 = v12;
      return;
    }
    if (v7 >= 0)
      v9 = v5;
    else
      v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
    if ((char *)v9 + size > ")" || (char *)&v9->__r_.__value_.__l.__data_ + size + 1 <= ")")
    {
      v9->__r_.__value_.__s.__data_[size] = 41;
      v11 = size + 1;
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
        v5->__r_.__value_.__l.__size_ = v11;
      else
        *((_BYTE *)&v5->__r_.__value_.__s + 23) = v11 & 0x7F;
      v9->__r_.__value_.__s.__data_[v11] = 0;
      goto LABEL_21;
    }
  }
  __break(1u);
}

float32x4_t *webrtc::StationarityEstimator::NoiseSpectrum::Update(float32x4_t *result, float32x4_t *__src, int a3, float32x4_t a4)
{
  float32x4_t *v5;
  float32x4_t *v6;
  uint64_t v7;
  __int8 *v8;
  uint64_t v9;
  char *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t i;
  float v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL4 v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x16_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int8x16_t v104;
  int8x16_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int8x16_t v112;
  int8x16_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int8x16_t v120;
  int8x16_t v121;
  uint64_t v122;
  float v123;
  float v124;
  float v125;
  _BYTE __dst[4];
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  uint64_t v143;

  v5 = __src;
  v6 = result;
  if (a3 != 1)
  {
    result = (float32x4_t *)memmove(__dst, __src, 0x104uLL);
    if (a3 >= 2)
    {
      v7 = 0;
      v8 = &v5[16].i8[8];
      v9 = 1;
      do
      {
        v19 = (char *)v5 + 260 * v7;
        v20 = v19 + 520;
        v21 = v19 + 264;
        if (&v127 >= (float32x4_t *)v20 || v21 >= (char *)&v143)
        {
          v10 = (char *)v5 + 260 * v9;
          v11 = vaddq_f32(*(float32x4_t *)(v10 + 20), v128);
          v127 = vaddq_f32(*(float32x4_t *)(v10 + 4), v127);
          v128 = v11;
          v12 = vaddq_f32(*(float32x4_t *)(v10 + 52), v130);
          v129 = vaddq_f32(*(float32x4_t *)(v10 + 36), v129);
          v130 = v12;
          v13 = vaddq_f32(*(float32x4_t *)(v10 + 84), v132);
          v131 = vaddq_f32(*(float32x4_t *)(v10 + 68), v131);
          v132 = v13;
          v14 = vaddq_f32(*(float32x4_t *)(v10 + 116), v134);
          v133 = vaddq_f32(*(float32x4_t *)(v10 + 100), v133);
          v134 = v14;
          v15 = vaddq_f32(*(float32x4_t *)(v10 + 148), v136);
          v135 = vaddq_f32(*(float32x4_t *)(v10 + 132), v135);
          v136 = v15;
          v16 = vaddq_f32(*(float32x4_t *)(v10 + 180), v138);
          v137 = vaddq_f32(*(float32x4_t *)(v10 + 164), v137);
          v138 = v16;
          v17 = vaddq_f32(*(float32x4_t *)(v10 + 212), v140);
          v139 = vaddq_f32(*(float32x4_t *)(v10 + 196), v139);
          v140 = v17;
          v18 = vaddq_f32(*(float32x4_t *)(v10 + 244), v142);
          v141 = vaddq_f32(*(float32x4_t *)(v10 + 228), v141);
          v142 = v18;
        }
        else
        {
          for (i = 0; i != 64; ++i)
            v127.f32[i] = *(float *)&v8[i * 4] + v127.f32[i];
        }
        ++v9;
        ++v7;
        v8 += 260;
      }
      while (v9 != a3);
    }
    v24 = 1.0 / (float)a3;
    v127 = vmulq_n_f32(v127, v24);
    v128 = vmulq_n_f32(v128, v24);
    v129 = vmulq_n_f32(v129, v24);
    v130 = vmulq_n_f32(v130, v24);
    v131 = vmulq_n_f32(v131, v24);
    v132 = vmulq_n_f32(v132, v24);
    v133 = vmulq_n_f32(v133, v24);
    v134 = vmulq_n_f32(v134, v24);
    v135 = vmulq_n_f32(v135, v24);
    v136 = vmulq_n_f32(v136, v24);
    v137 = vmulq_n_f32(v137, v24);
    v138 = vmulq_n_f32(v138, v24);
    v139 = vmulq_n_f32(v139, v24);
    v140 = vmulq_n_f32(v140, v24);
    v141 = vmulq_n_f32(v141, v24);
    a4 = vmulq_n_f32(v142, v24);
    v142 = a4;
    v5 = (float32x4_t *)__dst;
  }
  v25 = v6[16].i64[1];
  v26 = v25 + 1;
  v6[16].i64[1] = v25 + 1;
  a4.f32[0] = (float)((float)(unint64_t)(v25 - 19) * -0.000072) + 0.04;
  if ((unint64_t)(v25 + 1) > 0x208)
    a4.f32[0] = 0.004;
  if (v26 > 0x14)
  {
    v29 = &v5[16].i32[1] > (__int32 *)v6 && v5 < (float32x4_t *)&v6[16].i32[1];
    if (v26 <= 0x1F4)
    {
      if (v29)
      {
        v41 = 0;
      }
      else
      {
        v59 = v5[1];
        v60 = v6[1];
        v61 = vsubq_f32(*v5, *v6);
        v62 = vsubq_f32(v59, v60);
        v63 = (int8x16_t)vmlaq_n_f32(*v6, v61, a4.f32[0]);
        v64 = (int8x16_t)vmlaq_n_f32(v60, v62, a4.f32[0]);
        __asm { FMOV            V1.4S, #10.0 }
        *(int8x16_t *)v6 = vbslq_s8((int8x16_t)vcgtq_f32(*v5, *v6), (int8x16_t)vmlaq_f32(*v6, v61, vmulq_n_f32(vdivq_f32(*v6, *v5), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v63), _Q1, v63));
        v6[1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v59, v60), (int8x16_t)vmlaq_f32(v60, v62, vmulq_n_f32(vdivq_f32(v60, v59), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v64), _Q1, v64));
        v66 = v5[2];
        v67 = v5[3];
        v68 = v6[2];
        v69 = v6[3];
        v70 = vsubq_f32(v66, v68);
        v71 = vsubq_f32(v67, v69);
        v72 = (int8x16_t)vmlaq_n_f32(v68, v70, a4.f32[0]);
        v73 = (int8x16_t)vmlaq_n_f32(v69, v71, a4.f32[0]);
        v6[2] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v66, v68), (int8x16_t)vmlaq_f32(v68, v70, vmulq_n_f32(vdivq_f32(v68, v66), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v72), _Q1, v72));
        v6[3] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v67, v69), (int8x16_t)vmlaq_f32(v69, v71, vmulq_n_f32(vdivq_f32(v69, v67), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v73), _Q1, v73));
        v74 = v5[4];
        v75 = v5[5];
        v76 = v6[4];
        v77 = v6[5];
        v78 = vsubq_f32(v74, v76);
        v79 = vsubq_f32(v75, v77);
        v80 = (int8x16_t)vmlaq_n_f32(v76, v78, a4.f32[0]);
        v81 = (int8x16_t)vmlaq_n_f32(v77, v79, a4.f32[0]);
        v6[4] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v74, v76), (int8x16_t)vmlaq_f32(v76, v78, vmulq_n_f32(vdivq_f32(v76, v74), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v80), _Q1, v80));
        v6[5] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v75, v77), (int8x16_t)vmlaq_f32(v77, v79, vmulq_n_f32(vdivq_f32(v77, v75), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v81), _Q1, v81));
        v82 = v5[6];
        v83 = v5[7];
        v84 = v6[6];
        v85 = v6[7];
        v86 = vsubq_f32(v82, v84);
        v87 = vsubq_f32(v83, v85);
        v88 = (int8x16_t)vmlaq_n_f32(v84, v86, a4.f32[0]);
        v89 = (int8x16_t)vmlaq_n_f32(v85, v87, a4.f32[0]);
        v6[6] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v82, v84), (int8x16_t)vmlaq_f32(v84, v86, vmulq_n_f32(vdivq_f32(v84, v82), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v88), _Q1, v88));
        v6[7] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v83, v85), (int8x16_t)vmlaq_f32(v85, v87, vmulq_n_f32(vdivq_f32(v85, v83), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v89), _Q1, v89));
        v90 = v5[8];
        v91 = v5[9];
        v92 = v6[8];
        v93 = v6[9];
        v94 = vsubq_f32(v90, v92);
        v95 = vsubq_f32(v91, v93);
        v96 = (int8x16_t)vmlaq_n_f32(v92, v94, a4.f32[0]);
        v97 = (int8x16_t)vmlaq_n_f32(v93, v95, a4.f32[0]);
        v6[8] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v90, v92), (int8x16_t)vmlaq_f32(v92, v94, vmulq_n_f32(vdivq_f32(v92, v90), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v96), _Q1, v96));
        v6[9] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v91, v93), (int8x16_t)vmlaq_f32(v93, v95, vmulq_n_f32(vdivq_f32(v93, v91), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v97), _Q1, v97));
        v98 = v5[10];
        v99 = v5[11];
        v100 = v6[10];
        v101 = v6[11];
        v102 = vsubq_f32(v98, v100);
        v103 = vsubq_f32(v99, v101);
        v104 = (int8x16_t)vmlaq_n_f32(v100, v102, a4.f32[0]);
        v105 = (int8x16_t)vmlaq_n_f32(v101, v103, a4.f32[0]);
        v6[10] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v98, v100), (int8x16_t)vmlaq_f32(v100, v102, vmulq_n_f32(vdivq_f32(v100, v98), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v104), _Q1, v104));
        v6[11] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v99, v101), (int8x16_t)vmlaq_f32(v101, v103, vmulq_n_f32(vdivq_f32(v101, v99), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v105), _Q1, v105));
        v106 = v5[12];
        v107 = v5[13];
        v108 = v6[12];
        v109 = v6[13];
        v110 = vsubq_f32(v106, v108);
        v111 = vsubq_f32(v107, v109);
        v112 = (int8x16_t)vmlaq_n_f32(v108, v110, a4.f32[0]);
        v113 = (int8x16_t)vmlaq_n_f32(v109, v111, a4.f32[0]);
        v6[12] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v106, v108), (int8x16_t)vmlaq_f32(v108, v110, vmulq_n_f32(vdivq_f32(v108, v106), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v112), _Q1, v112));
        v6[13] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v107, v109), (int8x16_t)vmlaq_f32(v109, v111, vmulq_n_f32(vdivq_f32(v109, v107), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v113), _Q1, v113));
        v114 = v5[14];
        v115 = v5[15];
        v116 = v6[14];
        v117 = v6[15];
        v118 = vsubq_f32(v114, v116);
        v119 = vsubq_f32(v115, v117);
        v120 = (int8x16_t)vmlaq_n_f32(v116, v118, a4.f32[0]);
        v121 = (int8x16_t)vmlaq_n_f32(v117, v119, a4.f32[0]);
        v6[14] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v114, v116), (int8x16_t)vmlaq_f32(v116, v118, vmulq_n_f32(vdivq_f32(v116, v114), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v120), _Q1, v120));
        v6[15] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v115, v117), (int8x16_t)vmlaq_f32(v117, v119, vmulq_n_f32(vdivq_f32(v117, v115), a4.f32[0])), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q1, (float32x4_t)v121), _Q1, v121));
        v41 = 64;
      }
      v122 = v41;
      do
      {
        while (1)
        {
          v123 = v5->f32[v122];
          v124 = v6->f32[v122];
          if (v124 >= v123)
            break;
          v6->f32[v122++] = v124 + (float)((float)(a4.f32[0] * (float)(v124 / v123)) * (float)(v123 - v124));
          if (v122 == 65)
            return result;
        }
        v125 = v124 + (float)(a4.f32[0] * (float)(v123 - v124));
        if (v125 < 10.0)
          v125 = 10.0;
        v6->f32[v122++] = v125;
      }
      while (v122 != 65);
    }
    else
    {
      if (v29)
      {
        v30 = 0;
      }
      else
      {
        v42 = 0;
        v43 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
        __asm { FMOV            V2.4S, #10.0 }
        v48 = (float32x4_t)vdupq_n_s32(0x3DCCCCCDu);
        v30 = 64;
        do
        {
          v49 = v5[v42];
          v50 = v6[v42];
          v51 = vsubq_f32(v49, v50);
          v52 = (int8x16_t)vmlaq_f32(v50, v51, v43);
          v53 = (int8x16_t)vmulq_n_f32(vdivq_f32(v50, v49), a4.f32[0]);
          v6[v42++] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v49, v50), (int8x16_t)vmlaq_f32(v50, v51, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v49, vmulq_f32(v50, (float32x4_t)_Q2)), (int8x16_t)vmulq_f32((float32x4_t)v53, v48), v53)), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)_Q2, (float32x4_t)v52), _Q2, v52));
        }
        while (v42 != 16);
      }
      v54 = v30;
      do
      {
        while (1)
        {
          v56 = v5->f32[v54];
          v57 = v6->f32[v54];
          if (v57 >= v56)
            break;
          v58 = a4.f32[0] * (float)(v57 / v56);
          if ((float)(v57 * 10.0) < v56)
            v58 = v58 * 0.1;
          v6->f32[v54++] = v57 + (float)(v58 * (float)(v56 - v57));
          if (v54 == 65)
            return result;
        }
        v55 = v57 + (float)(a4.f32[0] * (float)(v56 - v57));
        if (v55 < 10.0)
          v55 = 10.0;
        v6->f32[v54++] = v55;
      }
      while (v54 != 65);
    }
  }
  else
  {
    if (&v5[16].i32[1] <= (__int32 *)v6 || v5 >= (float32x4_t *)&v6[16].i32[1])
    {
      v31 = (float32x4_t)vdupq_n_s32(0x3D4CCCCDu);
      v32 = vmlaq_f32(v6[1], v31, v5[1]);
      *v6 = vmlaq_f32(*v6, v31, *v5);
      v6[1] = v32;
      v33 = vmlaq_f32(v6[3], v31, v5[3]);
      v6[2] = vmlaq_f32(v6[2], v31, v5[2]);
      v6[3] = v33;
      v34 = vmlaq_f32(v6[5], v31, v5[5]);
      v6[4] = vmlaq_f32(v6[4], v31, v5[4]);
      v6[5] = v34;
      v35 = vmlaq_f32(v6[7], v31, v5[7]);
      v6[6] = vmlaq_f32(v6[6], v31, v5[6]);
      v6[7] = v35;
      v36 = vmlaq_f32(v6[9], v31, v5[9]);
      v6[8] = vmlaq_f32(v6[8], v31, v5[8]);
      v6[9] = v36;
      v37 = vmlaq_f32(v6[11], v31, v5[11]);
      v6[10] = vmlaq_f32(v6[10], v31, v5[10]);
      v6[11] = v37;
      v38 = vmlaq_f32(v6[13], v31, v5[13]);
      v6[12] = vmlaq_f32(v6[12], v31, v5[12]);
      v6[13] = v38;
      v39 = vmlaq_f32(v6[15], v31, v5[15]);
      v6[14] = vmlaq_f32(v6[14], v31, v5[14]);
      v6[15] = v39;
      v27 = 64;
    }
    else
    {
      v27 = 0;
    }
    v40 = v27;
    do
    {
      v6->f32[v40] = v6->f32[v40] + (float)(v5->f32[v40] * 0.05);
      ++v40;
    }
    while (v40 != 65);
  }
  return result;
}

__n128 webrtc::StationarityEstimator::UpdateStationarityFlags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  int8x16_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int8x16_t v95;
  int v96;
  int v97;
  uint64_t v98;
  _DWORD *v99;
  int8x8_t v100;
  uint64_t i;
  char v102;
  __int128 v103;
  __n128 result;
  int32x4_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t *v115;
  unint64_t v116;
  int8x16_t *v117;
  _OWORD v118[3];
  __int128 v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)a2;
  if (a6 <= 11)
    a5 = (((int)a5 - a6 + v6 + 12) % v6);
  if ((int)a5 <= 0)
    v7 = *(_DWORD *)a2;
  else
    v7 = a5;
  v8 = v7 - 1;
  if (v7 <= 1)
    v9 = *(_DWORD *)a2;
  else
    v9 = v7 - 1;
  v10 = v9 - 1;
  if (v9 <= 1)
    v11 = *(_DWORD *)a2;
  else
    v11 = v9 - 1;
  v12 = v11 - 1;
  if (v11 <= 1)
    v13 = *(_DWORD *)a2;
  else
    v13 = v11 - 1;
  v14 = v13 - 1;
  if (v13 <= 1)
    v15 = *(_DWORD *)a2;
  else
    v15 = v13 - 1;
  v16 = v15 - 1;
  if (v15 <= 1)
    v17 = *(_DWORD *)a2;
  else
    v17 = v15 - 1;
  v18 = v17 - 1;
  if (v17 <= 1)
    v19 = *(_DWORD *)a2;
  else
    v19 = v17 - 1;
  v20 = v19 - 1;
  if (v19 <= 1)
    v21 = *(_DWORD *)a2;
  else
    v21 = v19 - 1;
  v22 = v21 - 1;
  if (v21 <= 1)
    v23 = *(_DWORD *)a2;
  else
    v23 = v21 - 1;
  v24 = v23 - 1;
  if (v23 <= 1)
    v25 = *(_DWORD *)a2;
  else
    v25 = v23 - 1;
  v26 = v25 - 1;
  if (v25 <= 1)
    v27 = *(_DWORD *)a2;
  else
    v27 = v25 - 1;
  v28 = v27 - 1;
  if (v27 > 1)
    v6 = v27 - 1;
  if (!a4)
    a3 = 0;
  v29 = *(_QWORD **)(a2 + 8);
  v30 = *(_QWORD *)(a2 + 16) - (_QWORD)v29;
  if (!v30)
  {
LABEL_197:
    __break(1u);
LABEL_198:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/stationarity_estimator.cc", 114, "0.f < noise", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double> const&)::t, a5, v20, v22, v24, 0);
  }
  v31 = 0;
  v32 = 0;
  v117 = (int8x16_t *)(a1 + 540);
  v105 = (int32x4_t *)(a1 + 280);
  v33 = v6 - 1;
  v34 = 0xAAAAAAAAAAAAAAABLL * (v30 >> 3);
  v116 = (int)a5;
  v115 = &v29[3 * (int)a5];
  v114 = &v29[3 * v8];
  v113 = v10;
  v35 = &v29[3 * v10];
  v112 = v12;
  v36 = &v29[3 * v12];
  v111 = v14;
  v37 = &v29[3 * v14];
  v110 = v16;
  v38 = &v29[3 * v16];
  v39 = &v29[3 * v18];
  v109 = v20;
  v40 = &v29[3 * v20];
  v108 = v22;
  v41 = &v29[3 * v22];
  v107 = v24;
  v42 = &v29[3 * v24];
  v43 = &v29[3 * v26];
  v106 = v28;
  v44 = &v29[3 * v28];
  v45 = v33;
  v46 = &v29[3 * v33];
  v47 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v29[1] - *v29) >> 2);
  v48 = 1.0 / (float)(int)v47;
  v49 = a1 + 8;
  a5 = (int)v47;
  v22 = (v47 - 1);
  do
  {
    if ((int)v47 <= 0)
    {
      v50 = 0.0;
      v62 = *(float *)(v49 + 4 * v32) * 13.0;
      if (v62 <= 0.0)
        goto LABEL_198;
    }
    else
    {
      v20 = v116;
      if (v34 <= v116)
        goto LABEL_197;
      v20 = *v115;
      v24 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v115[1] - *v115) >> 2);
      if (v24 <= v22)
        goto LABEL_197;
      v24 = v20 + v31;
      v50 = 0.0;
      v51 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)v24 * v48);
        v24 += 260;
        --v51;
      }
      while (v51);
      v20 = v8;
      if (v34 <= v8)
        goto LABEL_197;
      v24 = *v114;
      v20 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v114[1] - *v114) >> 2);
      if (v20 <= v22)
        goto LABEL_197;
      v52 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)(v24 + v31) * v48);
        v24 += 260;
        --v52;
      }
      while (v52);
      v20 = v113;
      if (v34 <= v113)
        goto LABEL_197;
      v24 = *v35;
      v20 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v35[1] - *v35) >> 2);
      if (v20 <= v22)
        goto LABEL_197;
      v53 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)(v24 + v31) * v48);
        v24 += 260;
        --v53;
      }
      while (v53);
      v20 = v112;
      if (v34 <= v112)
        goto LABEL_197;
      v24 = *v36;
      v20 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v36[1] - *v36) >> 2);
      if (v20 <= v22)
        goto LABEL_197;
      v54 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)(v24 + v31) * v48);
        v24 += 260;
        --v54;
      }
      while (v54);
      v20 = v111;
      if (v34 <= v111)
        goto LABEL_197;
      v24 = *v37;
      v20 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v37[1] - *v37) >> 2);
      if (v20 <= v22)
        goto LABEL_197;
      v55 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)(v24 + v31) * v48);
        v24 += 260;
        --v55;
      }
      while (v55);
      v20 = v110;
      if (v34 <= v110)
        goto LABEL_197;
      v24 = *v38;
      v20 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v38[1] - *v38) >> 2);
      if (v20 <= v22)
        goto LABEL_197;
      v56 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)(v24 + v31) * v48);
        v24 += 260;
        --v56;
      }
      while (v56);
      v20 = v18;
      if (v34 <= v18)
        goto LABEL_197;
      v24 = *v39;
      v20 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v39[1] - *v39) >> 2);
      if (v20 <= v22)
        goto LABEL_197;
      v57 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)(v24 + v31) * v48);
        v24 += 260;
        --v57;
      }
      while (v57);
      v20 = v109;
      if (v34 <= v109)
        goto LABEL_197;
      v24 = *v40;
      v20 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v40[1] - *v40) >> 2);
      if (v20 <= v22)
        goto LABEL_197;
      v58 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)(v24 + v31) * v48);
        v24 += 260;
        --v58;
      }
      while (v58);
      v20 = v108;
      if (v34 <= v108)
        goto LABEL_197;
      v24 = *v41;
      v20 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v41[1] - *v41) >> 2);
      if (v20 <= v22)
        goto LABEL_197;
      v59 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)(v24 + v31) * v48);
        v24 += 260;
        --v59;
      }
      while (v59);
      v20 = v107;
      if (v34 <= v107)
        goto LABEL_197;
      v24 = *v42;
      v20 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v42[1] - *v42) >> 2);
      if (v20 <= v22)
        goto LABEL_197;
      v60 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)(v24 + v31) * v48);
        v24 += 260;
        --v60;
      }
      while (v60);
      v20 = v26;
      if (v34 <= v26)
        goto LABEL_197;
      v24 = *v43;
      v20 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v43[1] - *v43) >> 2);
      if (v20 <= v22)
        goto LABEL_197;
      v61 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)(v24 + v31) * v48);
        v24 += 260;
        --v61;
      }
      while (v61);
      v20 = v106;
      if (v34 <= v106)
        goto LABEL_197;
      v24 = *v44;
      v20 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v44[1] - *v44) >> 2);
      if (v20 <= v22)
        goto LABEL_197;
      v20 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)(v24 + v31) * v48);
        v24 += 260;
        --v20;
      }
      while (v20);
      if (v34 <= v45)
        goto LABEL_197;
      v24 = *v46;
      v20 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v46[1] - *v46) >> 2);
      if (v20 <= v22)
        goto LABEL_197;
      v20 = (int)v47;
      do
      {
        v50 = v50 + (float)(*(float *)(v24 + v31) * v48);
        v24 += 260;
        --v20;
      }
      while (v20);
      v62 = *(float *)(v49 + 4 * v32) * 13.0;
      if (v62 <= 0.0)
        goto LABEL_198;
    }
    v20 = (float)(v50 + *(float *)(a3 + 4 * v32)) < (float)(v62 * 10.0);
    v24 = a1 + 540;
    v117->i8[v32++] = v20;
    v31 += 4;
  }
  while (v32 != 65);
  if (v117->i8[0]
    && *(_BYTE *)(a1 + 541)
    && *(_BYTE *)(a1 + 542)
    && *(_BYTE *)(a1 + 543)
    && *(_BYTE *)(a1 + 544)
    && *(_BYTE *)(a1 + 545)
    && *(_BYTE *)(a1 + 546)
    && *(_BYTE *)(a1 + 547)
    && *(_BYTE *)(a1 + 548)
    && *(_BYTE *)(a1 + 549)
    && *(_BYTE *)(a1 + 550)
    && *(_BYTE *)(a1 + 551)
    && *(_BYTE *)(a1 + 552)
    && *(_BYTE *)(a1 + 553)
    && *(_BYTE *)(a1 + 554)
    && *(_BYTE *)(a1 + 555)
    && *(_BYTE *)(a1 + 556)
    && *(_BYTE *)(a1 + 557)
    && *(_BYTE *)(a1 + 558)
    && *(_BYTE *)(a1 + 559)
    && *(_BYTE *)(a1 + 560)
    && *(_BYTE *)(a1 + 561)
    && *(_BYTE *)(a1 + 562)
    && *(_BYTE *)(a1 + 563)
    && *(_BYTE *)(a1 + 564)
    && *(_BYTE *)(a1 + 565)
    && *(_BYTE *)(a1 + 566)
    && *(_BYTE *)(a1 + 567)
    && *(_BYTE *)(a1 + 568)
    && *(_BYTE *)(a1 + 569)
    && *(_BYTE *)(a1 + 570)
    && *(_BYTE *)(a1 + 571)
    && *(_BYTE *)(a1 + 572)
    && *(_BYTE *)(a1 + 573)
    && *(_BYTE *)(a1 + 574)
    && *(_BYTE *)(a1 + 575)
    && *(_BYTE *)(a1 + 576)
    && *(_BYTE *)(a1 + 577)
    && *(_BYTE *)(a1 + 578)
    && *(_BYTE *)(a1 + 579)
    && *(_BYTE *)(a1 + 580)
    && *(_BYTE *)(a1 + 581)
    && *(_BYTE *)(a1 + 582)
    && *(_BYTE *)(a1 + 583)
    && *(_BYTE *)(a1 + 584)
    && *(_BYTE *)(a1 + 585)
    && *(_BYTE *)(a1 + 586)
    && *(_BYTE *)(a1 + 587)
    && *(_BYTE *)(a1 + 588)
    && *(_BYTE *)(a1 + 589)
    && *(_BYTE *)(a1 + 590)
    && *(_BYTE *)(a1 + 591)
    && *(_BYTE *)(a1 + 592)
    && *(_BYTE *)(a1 + 593)
    && *(_BYTE *)(a1 + 594)
    && *(_BYTE *)(a1 + 595)
    && *(_BYTE *)(a1 + 596)
    && *(_BYTE *)(a1 + 597)
    && *(_BYTE *)(a1 + 598)
    && *(_BYTE *)(a1 + 599)
    && *(_BYTE *)(a1 + 600)
    && *(_BYTE *)(a1 + 601)
    && *(_BYTE *)(a1 + 602)
    && *(_BYTE *)(a1 + 603)
    && *(_BYTE *)(a1 + 604))
  {
    v63 = *(int8x16_t *)(a1 + 556);
    v64 = vceqzq_s8(*v117);
    v65 = vmovl_high_s8(v64);
    v66 = (int8x16_t)vmovl_high_s16(v65);
    v67 = (int8x16_t)vmovl_s16(*(int16x4_t *)v65.i8);
    v68 = vmovl_s8(*(int8x8_t *)v64.i8);
    v69 = (int8x16_t)vmovl_high_s16(v68);
    v70 = (int8x16_t)vmovl_s16(*(int16x4_t *)v68.i8);
    v68.i64[0] = 0x100000001;
    v68.i64[1] = 0x100000001;
    v65.i64[0] = -1;
    v65.i64[1] = -1;
    v71.i64[0] = 0xC0000000CLL;
    v71.i64[1] = 0xC0000000CLL;
    v72 = vbslq_s8(v70, v71, (int8x16_t)vaddq_s32(vmaxq_s32(*v105, (int32x4_t)v68), (int32x4_t)v65));
    v73 = vbslq_s8(v69, v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 296), (int32x4_t)v68), (int32x4_t)v65));
    v74 = vbslq_s8(v66, v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 328), (int32x4_t)v68), (int32x4_t)v65));
    *(int8x16_t *)(a1 + 312) = vbslq_s8(v67, v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 312), (int32x4_t)v68), (int32x4_t)v65));
    *(int8x16_t *)(a1 + 328) = v74;
    *v105 = (int32x4_t)v72;
    *(int8x16_t *)(a1 + 296) = v73;
    v75 = vceqzq_s8(v63);
    v76 = vmovl_high_s8(v75);
    v77 = vmovl_s8(*(int8x8_t *)v75.i8);
    v78 = (int8x16_t)vmovl_high_s16(v77);
    v79 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v77.i8), v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 344), (int32x4_t)v68), (int32x4_t)v65));
    v80 = vbslq_s8(v78, v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 360), (int32x4_t)v68), (int32x4_t)v65));
    v81 = vbslq_s8((int8x16_t)vmovl_high_s16(v76), v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 392), (int32x4_t)v68), (int32x4_t)v65));
    *(int8x16_t *)(a1 + 376) = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v76.i8), v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 376), (int32x4_t)v68), (int32x4_t)v65));
    *(int8x16_t *)(a1 + 392) = v81;
    *(int8x16_t *)(a1 + 344) = v79;
    *(int8x16_t *)(a1 + 360) = v80;
    v82 = *(int8x16_t *)(a1 + 588);
    v83 = vceqzq_s8(*(int8x16_t *)(a1 + 572));
    v84 = vmovl_high_s8(v83);
    v85 = vmovl_s8(*(int8x8_t *)v83.i8);
    v86 = (int8x16_t)vmovl_high_s16(v85);
    v87 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v85.i8), v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 408), (int32x4_t)v68), (int32x4_t)v65));
    v88 = vbslq_s8(v86, v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 424), (int32x4_t)v68), (int32x4_t)v65));
    v89 = vbslq_s8((int8x16_t)vmovl_high_s16(v84), v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 456), (int32x4_t)v68), (int32x4_t)v65));
    *(int8x16_t *)(a1 + 440) = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v84.i8), v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 440), (int32x4_t)v68), (int32x4_t)v65));
    *(int8x16_t *)(a1 + 456) = v89;
    *(int8x16_t *)(a1 + 408) = v87;
    *(int8x16_t *)(a1 + 424) = v88;
    v90 = vceqzq_s8(v82);
    v91 = vmovl_high_s8(v90);
    v92 = vmovl_s8(*(int8x8_t *)v90.i8);
    v93 = *(int32x4_t *)(a1 + 488);
    v94 = vmaxq_s32(*(int32x4_t *)(a1 + 472), (int32x4_t)v68);
    v95 = vbslq_s8((int8x16_t)vmovl_high_s16(v91), v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 520), (int32x4_t)v68), (int32x4_t)v65));
    *(int8x16_t *)(a1 + 504) = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v91.i8), v71, (int8x16_t)vaddq_s32(vmaxq_s32(*(int32x4_t *)(a1 + 504), (int32x4_t)v68), (int32x4_t)v65));
    *(int8x16_t *)(a1 + 520) = v95;
    *(int8x16_t *)(a1 + 472) = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v92.i8), v71, (int8x16_t)vaddq_s32(v94, (int32x4_t)v65));
    *(int8x16_t *)(a1 + 488) = vbslq_s8((int8x16_t)vmovl_high_s16(v92), v71, (int8x16_t)vaddq_s32(vmaxq_s32(v93, (int32x4_t)v68), (int32x4_t)v65));
    if (!*(_BYTE *)(a1 + 604))
      goto LABEL_188;
    v96 = *(_DWORD *)(a1 + 536);
    if (v96 <= 1)
      v96 = 1;
    v97 = v96 - 1;
LABEL_189:
    *(_DWORD *)(a1 + 536) = v97;
    goto LABEL_190;
  }
  v98 = 0;
  v99 = (_DWORD *)(a1 + 308);
  do
  {
    v100 = vceqz_s8(*(int8x8_t *)(a1 + 280 + v98 + 260));
    if ((v100.i8[0] & 1) != 0)
    {
      *(v99 - 7) = 12;
      if ((v100.i8[1] & 1) == 0)
        goto LABEL_172;
    }
    else if ((v100.i8[1] & 1) == 0)
    {
LABEL_172:
      if ((v100.i8[2] & 1) != 0)
        goto LABEL_173;
      goto LABEL_181;
    }
    *(v99 - 6) = 12;
    if ((v100.i8[2] & 1) != 0)
    {
LABEL_173:
      *(v99 - 5) = 12;
      if ((v100.i8[3] & 1) == 0)
        goto LABEL_174;
      goto LABEL_182;
    }
LABEL_181:
    if ((v100.i8[3] & 1) == 0)
    {
LABEL_174:
      if ((v100.i8[4] & 1) != 0)
        goto LABEL_175;
      goto LABEL_183;
    }
LABEL_182:
    *(v99 - 4) = 12;
    if ((v100.i8[4] & 1) != 0)
    {
LABEL_175:
      *(v99 - 3) = 12;
      if ((v100.i8[5] & 1) == 0)
        goto LABEL_176;
      goto LABEL_184;
    }
LABEL_183:
    if ((v100.i8[5] & 1) == 0)
    {
LABEL_176:
      if ((v100.i8[6] & 1) == 0)
        goto LABEL_185;
      goto LABEL_177;
    }
LABEL_184:
    *(v99 - 2) = 12;
    if ((v100.i8[6] & 1) == 0)
    {
LABEL_185:
      if ((v100.i8[7] & 1) == 0)
        goto LABEL_169;
      goto LABEL_186;
    }
LABEL_177:
    *(v99 - 1) = 12;
    if ((v100.i8[7] & 1) == 0)
      goto LABEL_169;
LABEL_186:
    *v99 = 12;
LABEL_169:
    v98 += 8;
    v99 += 8;
  }
  while (v98 != 64);
  if (!*(_BYTE *)(a1 + 604))
  {
LABEL_188:
    v97 = 12;
    goto LABEL_189;
  }
LABEL_190:
  for (i = 0; i != 63; ++i)
  {
    if (*(_BYTE *)(a1 + i + 540))
    {
      v102 = *(_BYTE *)(a1 + i + 541);
      if (v102)
        v102 = *(_BYTE *)(a1 + i + 542) != 0;
    }
    else
    {
      v102 = 0;
    }
    *((_BYTE *)v118 + i + 1) = v102;
  }
  LOBYTE(v118[0]) = BYTE1(v118[0]);
  v103 = v119;
  *(_OWORD *)(a1 + 572) = v118[2];
  *(_OWORD *)(a1 + 588) = v103;
  *(_BYTE *)(a1 + 604) = HIBYTE(v119);
  result = (__n128)v118[1];
  *v117 = (int8x16_t)v118[0];
  *(__n128 *)(a1 + 556) = result;
  return result;
}

uint64_t webrtc::StatisticsCalculator::PeriodicUmaCount::Metric(webrtc::StatisticsCalculator::PeriodicUmaCount *this)
{
  return *((unsigned int *)this + 11);
}

void webrtc::StatisticsCalculator::PeriodicUmaCount::~PeriodicUmaCount(webrtc::StatisticsCalculator::PeriodicUmaCount *this)
{
  uint64_t v2;
  void *v3;
  BOOL v4;

  if (*((char *)this + 31) < 0)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2 < 0 || ((v3 = (void *)*((_QWORD *)this + 1), v2) ? (v4 = v3 == 0) : (v4 = 0), v4))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)this = off_24C0C1230;
      operator delete(v3);
    }
  }
  else
  {
    *(_QWORD *)this = off_24C0C1230;
  }
}

{
  uint64_t v2;
  void *v3;
  BOOL v4;

  if (*((char *)this + 31) < 0)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2 < 0 || ((v3 = (void *)*((_QWORD *)this + 1), v2) ? (v4 = v3 == 0) : (v4 = 0), v4))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)this = off_24C0C1230;
      operator delete(v3);
    }
  }
  else
  {
    *(_QWORD *)this = off_24C0C1230;
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::StatisticsCalculator::PeriodicUmaCount::Reset(uint64_t this)
{
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t webrtc::StatisticsCalculator::PeriodicUmaAverage::Metric(webrtc::StatisticsCalculator::PeriodicUmaAverage *this)
{
  int v1;

  v1 = *((_DWORD *)this + 14);
  if (v1)
    return (int)(*((double *)this + 6) / (double)v1);
  else
    return 0;
}

void webrtc::StatisticsCalculator::PeriodicUmaAverage::~PeriodicUmaAverage(webrtc::StatisticsCalculator::PeriodicUmaAverage *this)
{
  uint64_t v2;
  void *v3;
  BOOL v4;

  if (*((char *)this + 31) < 0)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2 < 0 || ((v3 = (void *)*((_QWORD *)this + 1), v2) ? (v4 = v3 == 0) : (v4 = 0), v4))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)this = off_24C0C1230;
      operator delete(v3);
    }
  }
  else
  {
    *(_QWORD *)this = off_24C0C1230;
  }
}

{
  uint64_t v2;
  void *v3;
  BOOL v4;

  if (*((char *)this + 31) < 0)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2 < 0 || ((v3 = (void *)*((_QWORD *)this + 1), v2) ? (v4 = v3 == 0) : (v4 = 0), v4))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)this = off_24C0C1230;
      operator delete(v3);
    }
  }
  else
  {
    *(_QWORD *)this = off_24C0C1230;
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::StatisticsCalculator::PeriodicUmaAverage::Reset(uint64_t this)
{
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

char *webrtc::StatisticsCalculator::StatisticsCalculator(webrtc::StatisticsCalculator *this)
{
  char *result;

  *(_QWORD *)this = &off_24C0C12C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 193) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 260) = 0u;
  *((_DWORD *)this + 82) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = off_24C0C1230;
  result = (char *)operator new(0x30uLL);
  *((_QWORD *)this + 44) = result;
  *((_QWORD *)this + 45) = 47;
  *((_QWORD *)this + 46) = 0x8000000000000030;
  if (result <= "WebRTC.Audio.DelayedPacketOutageEventsPerMinute"
    && result + 47 > "WebRTC.Audio.DelayedPacketOutageEventsPerMinute")
  {
    goto LABEL_8;
  }
  strcpy(result, "WebRTC.Audio.DelayedPacketOutageEventsPerMinute");
  *((_QWORD *)this + 43) = off_24C0C1260;
  *(_OWORD *)((char *)this + 376) = xmmword_208F1C030;
  *((_QWORD *)this + 49) = off_24C0C1230;
  result = (char *)operator new(0x28uLL);
  *((_QWORD *)this + 50) = result;
  *((_QWORD *)this + 51) = 39;
  *((_QWORD *)this + 52) = 0x8000000000000028;
  if (result <= "WebRTC.Audio.AverageExcessBufferDelayMs" && result + 39 > "WebRTC.Audio.AverageExcessBufferDelayMs")
    goto LABEL_8;
  strcpy(result, "WebRTC.Audio.AverageExcessBufferDelayMs");
  *((_QWORD *)this + 53) = 0x3E80000EA60;
  *((_DWORD *)this + 108) = 0;
  *((_QWORD *)this + 49) = off_24C0C1290;
  *((_QWORD *)this + 55) = 0;
  *((_DWORD *)this + 112) = 0;
  *((_QWORD *)this + 57) = off_24C0C1230;
  result = (char *)operator new(0x28uLL);
  *((_QWORD *)this + 58) = result;
  *((_QWORD *)this + 59) = 38;
  *((_QWORD *)this + 60) = 0x8000000000000028;
  if (result > "WebRTC.Audio.JitterBufferFullPerMinute")
    goto LABEL_7;
  if (result + 38 > "WebRTC.Audio.JitterBufferFullPerMinute")
  {
LABEL_8:
    __break(1u);
  }
  else
  {
LABEL_7:
    strcpy(result, "WebRTC.Audio.JitterBufferFullPerMinute");
    *((_QWORD *)this + 57) = off_24C0C1260;
    *(_OWORD *)((char *)this + 488) = xmmword_208F1C030;
    *((_BYTE *)this + 504) = 0;
    return (char *)this;
  }
  return result;
}

void webrtc::StatisticsCalculator::~StatisticsCalculator(webrtc::StatisticsCalculator *this)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  *(_QWORD *)this = &off_24C0C12C0;
  if (*((char *)this + 487) < 0)
  {
    v12 = *((_QWORD *)this + 59);
    if (v12 < 0)
      goto LABEL_39;
    v13 = (void *)*((_QWORD *)this + 58);
    if (v12 && v13 == 0)
      goto LABEL_39;
    *((_QWORD *)this + 57) = off_24C0C1230;
    operator delete(v13);
    if ((*((char *)this + 423) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    *((_QWORD *)this + 57) = off_24C0C1230;
    if ((*((char *)this + 423) & 0x80000000) == 0)
    {
LABEL_3:
      *((_QWORD *)this + 49) = off_24C0C1230;
      if ((*((char *)this + 375) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  v15 = *((_QWORD *)this + 51);
  if (v15 < 0)
    goto LABEL_39;
  v16 = (void *)*((_QWORD *)this + 50);
  if (v15)
  {
    if (!v16)
      goto LABEL_39;
  }
  *((_QWORD *)this + 49) = off_24C0C1230;
  operator delete(v16);
  if ((*((char *)this + 375) & 0x80000000) == 0)
  {
LABEL_4:
    *((_QWORD *)this + 43) = off_24C0C1230;
    v2 = (void **)*((_QWORD *)this + 36);
    v3 = (void **)*((_QWORD *)this + 37);
    v4 = (char *)v3 - (char *)v2;
    if (v3 != v2)
      goto LABEL_5;
LABEL_24:
    v9 = (_QWORD *)((char *)this + 320);
    goto LABEL_25;
  }
LABEL_20:
  v17 = *((_QWORD *)this + 45);
  if (v17 < 0 || (v18 = (void *)*((_QWORD *)this + 44), v17) && !v18)
  {
LABEL_39:
    __break(1u);
    return;
  }
  *((_QWORD *)this + 43) = off_24C0C1230;
  operator delete(v18);
  v2 = (void **)*((_QWORD *)this + 36);
  v3 = (void **)*((_QWORD *)this + 37);
  v4 = (char *)v3 - (char *)v2;
  if (v3 == v2)
    goto LABEL_24;
LABEL_5:
  v5 = *((_QWORD *)this + 39);
  v6 = &v2[v5 >> 10];
  v7 = (uint64_t)*v6;
  v8 = (uint64_t)*v6 + 4 * (v5 & 0x3FF);
  v9 = (_QWORD *)((char *)this + 320);
  v10 = *(uint64_t *)((char *)v2 + (((*((_QWORD *)this + 40) + v5) >> 7) & 0x1FFFFFFFFFFFFF8))
      + 4 * ((*((_QWORD *)this + 40) + v5) & 0x3FF);
  while (v8 != v10)
  {
    if (!v8)
      goto LABEL_39;
    v8 += 4;
    if (v8 - v7 == 4096)
    {
      v11 = (uint64_t)v6[1];
      ++v6;
      v7 = v11;
      v8 = v11;
    }
  }
LABEL_25:
  *v9 = 0;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)*((_QWORD *)this + 37);
      v2 = (void **)(*((_QWORD *)this + 36) + 8);
      *((_QWORD *)this + 36) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v19 = v4 >> 3;
  if (v19 == 1)
  {
    v20 = 512;
  }
  else
  {
    if (v19 != 2)
      goto LABEL_32;
    v20 = 1024;
  }
  *((_QWORD *)this + 39) = v20;
LABEL_32:
  if (v2 != v3)
  {
    do
    {
      v21 = *v2++;
      operator delete(v21);
    }
    while (v2 != v3);
    v23 = *((_QWORD *)this + 36);
    v22 = *((_QWORD *)this + 37);
    if (v22 != v23)
      *((_QWORD *)this + 37) = v22 + ((v23 - v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v24 = (void *)*((_QWORD *)this + 35);
  if (v24)
    operator delete(v24);
}

{
  webrtc::StatisticsCalculator::~StatisticsCalculator(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::StatisticsCalculator::PacketsDiscarded(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 104) += a2;
  return this;
}

uint64_t webrtc::StatisticsCalculator::SecondaryPacketsDiscarded(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 336) += a2;
  *(_QWORD *)(this + 96) += a2;
  return this;
}

uint64_t webrtc::StatisticsCalculator::SecondaryPacketsReceived(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 88) += a2;
  return this;
}

uint64_t webrtc::StatisticsCalculator::IncreaseCounter(uint64_t this, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  std::string *v17;
  uint64_t v18;

  v10 = 1000 * (int)a2 / a3;
  v11 = (1000 * (int)a2 % a3);
  if ((_DWORD)v11)
    goto LABEL_24;
  v12 = this;
  v13 = *(_DWORD *)(this + 384) + v10;
  *(_DWORD *)(this + 384) = v13;
  if (v13 >= *(_DWORD *)(this + 376))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(this + 344) + 16))(this + 344);
    if (*(char *)(v12 + 375) < 0)
    {
      v11 = *(_QWORD *)(v12 + 360);
      if (v11 < 0)
        goto LABEL_23;
      if (v11)
      {
        v11 = *(_QWORD *)(v12 + 352);
        if (!v11)
          goto LABEL_23;
      }
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 344) + 24))(v12 + 344);
    *(_DWORD *)(v12 + 384) -= *(_DWORD *)(v12 + 376);
  }
  v14 = *(_DWORD *)(v12 + 432) + v10;
  *(_DWORD *)(v12 + 432) = v14;
  if (v14 < *(_DWORD *)(v12 + 424))
    goto LABEL_14;
  (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 392) + 16))(v12 + 392);
  if (*(char *)(v12 + 423) < 0)
  {
    v11 = *(_QWORD *)(v12 + 408);
    if (v11 < 0 || v11 && (v11 = *(_QWORD *)(v12 + 400)) == 0)
    {
LABEL_23:
      __break(1u);
LABEL_24:
      v17 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v11);
      return webrtc::StatisticsCalculator::RelativePacketArrivalDelay((uint64_t)v17, v18);
    }
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 392) + 24))(v12 + 392);
  *(_DWORD *)(v12 + 432) -= *(_DWORD *)(v12 + 424);
LABEL_14:
  v15 = *(_DWORD *)(v12 + 496) + v10;
  *(_DWORD *)(v12 + 496) = v15;
  if (v15 >= *(_DWORD *)(v12 + 488))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 456) + 16))(v12 + 456);
    if ((*(char *)(v12 + 487) & 0x80000000) == 0
      || (v11 = *(_QWORD *)(v12 + 472), (v11 & 0x8000000000000000) == 0)
      && (!v11 || (v11 = *(_QWORD *)(v12 + 464)) != 0))
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 456) + 24))(v12 + 456);
      *(_DWORD *)(v12 + 496) -= *(_DWORD *)(v12 + 488);
      goto LABEL_20;
    }
    goto LABEL_23;
  }
LABEL_20:
  v16 = *(_DWORD *)(v12 + 272) + a2;
  if (v16 > 60 * a3)
    v16 = 0;
  *(_DWORD *)(v12 + 272) = v16;
  *(_QWORD *)(v12 + 8) += a2;
  return this;
}

uint64_t webrtc::StatisticsCalculator::RelativePacketArrivalDelay(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 128) += a2;
  return this;
}

int64x2_t webrtc::StatisticsCalculator::LogDelayedPacketOutageEvent(int64x2_t *this, int a2, int a3)
{
  uint64_t v5;
  int64x2_t v7;
  int64x2_t result;

  v5 = atomic_load(&webrtc::StatisticsCalculator::LogDelayedPacketOutageEvent(int,int)::atomic_histogram_pointer);
  if (v5)
  {
    webrtc::metrics::HistogramAdd(v5, a2 / (a3 / 1000));
  }
  else
  {
    while (!__ldaxr(&webrtc::StatisticsCalculator::LogDelayedPacketOutageEvent(int,int)::atomic_histogram_pointer))
    {
      if (!__stlxr(0, &webrtc::StatisticsCalculator::LogDelayedPacketOutageEvent(int,int)::atomic_histogram_pointer))
        goto LABEL_6;
    }
    __clrex();
  }
LABEL_6:
  ++this[24].i32[1];
  v7 = vdupq_n_s64(1uLL);
  v7.i64[0] = a2;
  result = vaddq_s64(this[7], v7);
  this[7] = result;
  return result;
}

void webrtc::StatisticsCalculator::StoreWaitingTime(webrtc::StatisticsCalculator *this, int a2)
{
  uint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  *((double *)this + 55) = *((double *)this + 55) + (double)a2;
  ++*((_DWORD *)this + 112);
  v4 = *((_QWORD *)this + 40);
  if (v4 == 100)
  {
    v5 = (void **)*((_QWORD *)this + 36);
    v6 = *((_QWORD *)this + 39);
    if (!*(void **)((char *)v5 + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)))
      goto LABEL_13;
    v4 = 99;
    v7 = v6 + 1;
    *((_QWORD *)this + 39) = v7;
    *((_QWORD *)this + 40) = 99;
    if (v7 >= 0x800)
    {
      operator delete(*v5);
      v5 = (void **)(*((_QWORD *)this + 36) + 8);
      *((_QWORD *)this + 36) = v5;
      v4 = *((_QWORD *)this + 40);
      v7 = *((_QWORD *)this + 39) - 1024;
      *((_QWORD *)this + 39) = v7;
    }
  }
  else
  {
    v5 = (void **)*((_QWORD *)this + 36);
    v7 = *((_QWORD *)this + 39);
  }
  v8 = (void **)*((_QWORD *)this + 37);
  v9 = (((char *)v8 - (char *)v5) << 7) - 1;
  if (v8 == v5)
    v9 = 0;
  if (v9 == v7 + v4)
  {
    std::deque<int>::__add_back_capacity((uint64_t)this + 280);
    v4 = *((_QWORD *)this + 40);
    v5 = (void **)*((_QWORD *)this + 36);
    v8 = (void **)*((_QWORD *)this + 37);
  }
  if (v8 != v5)
  {
    v10 = *((_QWORD *)this + 39) + v4;
    v11 = *(uint64_t *)((char *)v5 + ((v10 >> 7) & 0x1FFFFFFFFFFFFF8));
    if (v11)
    {
      *(_DWORD *)(v11 + 4 * (v10 & 0x3FF)) = a2;
      *((_QWORD *)this + 40) = v4 + 1;
      *((_QWORD *)this + 23) = a2;
      return;
    }
  }
LABEL_13:
  __break(1u);
}

void webrtc::StatisticsCalculator::GetNetworkStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  void **v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  void **v34;
  int *v35;
  int *v36;
  double v37;
  uint64_t v38;
  int v39;
  int v40;
  int *v41;
  unint64_t v42;
  unint64_t v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = *(_QWORD *)(a1 + 240);
  v6 = *(unsigned int *)(a1 + 272);
  if (v5)
  {
    if (v5 >= v6)
    {
      *(_WORD *)(a3 + 12) = 0x4000;
      v8 = (_OWORD *)(a1 + 232);
      v7 = *(_QWORD *)(a1 + 232);
      if (!v7)
        goto LABEL_9;
      goto LABEL_7;
    }
    v5 = (v5 << 14) / v6;
  }
  *(_WORD *)(a3 + 12) = v5;
  v8 = (_OWORD *)(a1 + 232);
  v7 = *(_QWORD *)(a1 + 232);
  if (!v7)
  {
LABEL_9:
    *(_WORD *)(a3 + 10) = v7;
    v9 = *(_QWORD *)(a1 + 248);
    v10 = *(_QWORD *)(a1 + 256) + v9;
    if (!v10)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_7:
  if (v7 < v6)
  {
    v7 = (v7 << 14) / v6;
    goto LABEL_9;
  }
  *(_WORD *)(a3 + 10) = 0x4000;
  v9 = *(_QWORD *)(a1 + 248);
  v10 = *(_QWORD *)(a1 + 256) + v9;
  if (!v10)
    goto LABEL_14;
LABEL_12:
  if (v10 >= v6)
  {
    *(_WORD *)(a3 + 6) = 0x4000;
    if (!v9)
      goto LABEL_19;
    goto LABEL_17;
  }
  v10 = (v10 << 14) / v6;
LABEL_14:
  *(_WORD *)(a3 + 6) = v10;
  if (!v9)
  {
LABEL_19:
    *(_WORD *)(a3 + 8) = v9;
    v11 = *(unsigned int *)(a1 + 328);
    if ((_DWORD)v11)
      goto LABEL_20;
    goto LABEL_24;
  }
LABEL_17:
  if (v9 < v6)
  {
    v9 = (v9 << 14) / v6;
    goto LABEL_19;
  }
  *(_WORD *)(a3 + 8) = 0x4000;
  v11 = *(unsigned int *)(a1 + 328);
  if ((_DWORD)v11)
  {
LABEL_20:
    if (v6 <= v11)
    {
      *(_WORD *)(a3 + 14) = 0x4000;
      v12 = *(_QWORD *)(a1 + 336) * a2;
      if (!v12)
        goto LABEL_29;
    }
    else
    {
      *(_WORD *)(a3 + 14) = (v11 << 14) / v6;
      v12 = *(_QWORD *)(a1 + 336) * a2;
      if (!v12)
        goto LABEL_29;
    }
    goto LABEL_27;
  }
LABEL_24:
  *(_WORD *)(a3 + 14) = 0;
  v12 = *(_QWORD *)(a1 + 336) * a2;
  if (!v12)
  {
LABEL_29:
    *(_WORD *)(a3 + 16) = v12;
    v14 = *(_QWORD *)(a1 + 320);
    if (v14)
      goto LABEL_30;
LABEL_34:
    v23 = 0;
    *(_QWORD *)(a3 + 28) = -1;
    *(_QWORD *)(a3 + 20) = -1;
    v24 = *(void ***)(a1 + 288);
    v25 = *(void ***)(a1 + 296);
    goto LABEL_48;
  }
LABEL_27:
  v13 = (v11 + v12);
  if (v12 < v13)
  {
    v12 = (v12 << 14) / v13;
    goto LABEL_29;
  }
  *(_WORD *)(a3 + 16) = 0x4000;
  v14 = *(_QWORD *)(a1 + 320);
  if (!v14)
    goto LABEL_34;
LABEL_30:
  v15 = *(_QWORD *)(a1 + 312);
  v16 = *(_QWORD *)(a1 + 288);
  v17 = *(_QWORD *)(a1 + 296);
  v18 = (char *)(v16 + 8 * (v15 >> 10));
  if (v17 == v16)
  {
    v19 = 0;
    v22 = 0;
    v21 = (char *)(v16 + 8 * ((v15 + v14) >> 10));
  }
  else
  {
    v19 = (int *)(*(_QWORD *)v18 + 4 * (v15 & 0x3FF));
    v20 = v15 + v14;
    v21 = (char *)(v16 + 8 * (v20 >> 10));
    v22 = *(_QWORD *)v21 + 4 * (v20 & 0x3FF);
    if ((int *)v22 != v19)
    {
      v26 = ((uint64_t)(4 * (v20 & 0x3FF)) >> 2) + ((v21 - v18) << 7);
      v27 = (uint64_t)(4 * (v15 & 0x3FF)) >> 2;
      if (v26 != v27)
      {
        v28 = 63 - __clz(v26 - v27);
        goto LABEL_39;
      }
    }
  }
  v28 = 0;
LABEL_39:
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>((unint64_t)v18, v19, v21, v22, 2 * v28, 1);
  v29 = *(_QWORD *)(a1 + 312);
  v23 = *(_QWORD *)(a1 + 320);
  v24 = *(void ***)(a1 + 288);
  v25 = *(void ***)(a1 + 296);
  v30 = (*(_DWORD **)((char *)v24 + (((v29 + ((v23 - 1) >> 1)) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v29 + ((v23 - 1) >> 1)) & 0x3FF];
  v31 = (*(_DWORD **)((char *)v24 + (((v29 + (v23 >> 1)) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v29 + (v23 >> 1)) & 0x3FF];
  v32 = __OFADD__(v31, v30);
  v33 = v31 + v30;
  if (v33 < 0 != v32)
    ++v33;
  *(_DWORD *)(a3 + 24) = v33 >> 1;
  v34 = &v24[v29 >> 10];
  v35 = (int *)*v34;
  v36 = (int *)((char *)*v34 + 4 * (v29 & 0x3FF));
  *(_DWORD *)(a3 + 28) = *v36;
  *(_DWORD *)(a3 + 32) = (*(_DWORD **)((char *)v24 + (((v23 - 1 + v29) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v23 - 1 + v29) & 0x3FF];
  v37 = 0.0;
  if (v25 != v24)
  {
    v38 = *(uint64_t *)((char *)v24 + (((v29 + v23) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v29 + v23) & 0x3FF);
    while (v36 != (int *)v38)
    {
      v40 = *v36++;
      v39 = v40;
      if ((char *)v36 - (char *)v35 == 4096)
      {
        v41 = (int *)v34[1];
        ++v34;
        v35 = v41;
        v36 = v41;
      }
      v37 = v37 + (double)v39;
    }
  }
  *(_DWORD *)(a3 + 20) = (int)(v37 / (double)v23);
LABEL_48:
  *(_DWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *v8 = 0u;
  v8[1] = 0u;
  v42 = (char *)v25 - (char *)v24;
  if (v42)
  {
    v43 = *(_QWORD *)(a1 + 312);
    v44 = &v24[v43 >> 10];
    v45 = (uint64_t)*v44;
    v46 = (uint64_t)*v44 + 4 * (v43 & 0x3FF);
    v47 = *(uint64_t *)((char *)v24 + (((v43 + v23) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v43 + v23) & 0x3FF);
    while (v46 != v47)
    {
      if (!v46)
      {
        __break(1u);
        return;
      }
      v46 += 4;
      if (v46 - v45 == 4096)
      {
        v48 = (uint64_t)v44[1];
        ++v44;
        v45 = v48;
        v46 = v48;
      }
    }
  }
  *(_QWORD *)(a1 + 320) = 0;
  if (v42 >= 0x11)
  {
    do
    {
      operator delete(*v24);
      v49 = *(_QWORD *)(a1 + 296);
      v24 = (void **)(*(_QWORD *)(a1 + 288) + 8);
      *(_QWORD *)(a1 + 288) = v24;
      v42 = v49 - (_QWORD)v24;
    }
    while ((unint64_t)(v49 - (_QWORD)v24) > 0x10);
  }
  if (v42 >> 3 == 1)
  {
    v50 = 512;
  }
  else
  {
    if (v42 >> 3 != 2)
      return;
    v50 = 1024;
  }
  *(_QWORD *)(a1 + 312) = v50;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(unint64_t a1, int *a2, char *a3, unint64_t a4, uint64_t a5, char a6)
{
  unint64_t v8;
  int *v10;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  int *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int *v33;
  uint64_t v34;
  unint64_t v35;
  int *v36;
  int *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int *v43;
  uint64_t v44;
  unint64_t v45;
  int *v46;
  int *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int *v52;
  int *v53;
  int *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  int v62;
  int v63;
  int *v64;
  char *v65;
  int v66;
  unint64_t v67;
  int *v68;
  char *v69;
  int v70;
  uint64_t v71;
  char *v72;
  int *v73;
  int v74;
  int *v75;
  int v76;
  int *v77;
  _BOOL4 v79;
  char *v80;
  int v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int *v87;
  char *v88;
  char *v89;
  int *v90;
  int v91;
  int *v92;
  unint64_t v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  int *v98;
  int v99;
  char *v100;
  int v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  int v106;
  int v107;
  int *v108;
  int *v109;
  unint64_t v110;
  _QWORD *v111;
  int *v112;
  unint64_t v113;
  char *i;
  int *v115;
  char *v116;
  int **v117;
  uint64_t v118;
  int *v119;
  int v120;
  int v121;
  int v122;
  int *v123;
  uint64_t v124;
  int64_t v125;
  int64_t v126;
  BOOL v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  int *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int *v152;
  int **v153;
  int *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int *v160;
  int *v161;
  int *v162;
  int *v163;
  int *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  int *v168;
  int *v169;
  int v170;
  int v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  int *v176;
  int v177;
  int v178;
  int v179;
  int *v180;
  _QWORD *v181;
  int *v182;
  unint64_t v183;
  _QWORD *v184;
  int *v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  __int16 v197;
  char **v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  __int16 v204;
  char **v205;
  unint64_t v206;
  char *v207;
  char *v208;
  int v209;
  int v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;

  if ((int *)a4 == a2)
    return;
  v8 = a4;
  v10 = a2;
  while (2)
  {
    v12 = *(int **)a3;
    v13 = v8 - *(_QWORD *)a3;
    v14 = v13 >> 2;
    v15 = *(char **)a1;
    v16 = (uint64_t)v10 - *(_QWORD *)a1;
    v17 = v16 >> 2;
    v18 = (v13 >> 2) + ((_QWORD)&a3[-a1] << 7) - (v16 >> 2);
    switch(v18)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((int *)v8 == v12)
          v8 = *((_QWORD *)a3 - 1) + 4096;
        v106 = *(_DWORD *)(v8 - 4);
        v107 = *v10;
        if (v106 < *v10)
        {
          *v10 = v106;
          *(_DWORD *)(v8 - 4) = v107;
        }
        return;
      case 3:
        if (v16 < -3)
          v108 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v17) >> 10))
                       + 4 * (~(1022 - (_WORD)v17) & 0x3FF));
        else
          v108 = (int *)(*(_QWORD *)(a1 + (((unint64_t)(v17 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v17 + 1) & 0x3FF));
        if ((int *)v8 == v12)
          v8 = *((_QWORD *)a3 - 1) + 4096;
        v177 = *v108;
        v178 = *v10;
        v179 = *(_DWORD *)(v8 - 4);
        if (*v108 >= *v10)
        {
          if (v179 < v177)
          {
            *v108 = v179;
            *(_DWORD *)(v8 - 4) = v177;
            v187 = *v10;
            if (*v108 < *v10)
            {
              *v10 = *v108;
              *v108 = v187;
            }
          }
        }
        else if (v179 >= v177)
        {
          *v10 = v177;
          *v108 = v178;
          v189 = *(_DWORD *)(v8 - 4);
          if (v189 < v178)
          {
            *v108 = v189;
            *(_DWORD *)(v8 - 4) = v178;
          }
        }
        else
        {
          *v10 = v179;
          *(_DWORD *)(v8 - 4) = v178;
        }
        return;
      case 4:
        if (v16 >= -3)
        {
          v109 = (int *)(*(_QWORD *)(a1 + (((unint64_t)(v17 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v17 + 1) & 0x3FF));
          v110 = v17 + 2;
LABEL_309:
          v180 = (int *)(*(_QWORD *)(a1 + ((v110 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v110 & 0x3FF));
          goto LABEL_325;
        }
        v109 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v17) >> 10))
                     + 4 * (~(1022 - (_WORD)v17) & 0x3FF));
        if ((unint64_t)v16 >= 0xFFFFFFFFFFFFFFF9)
        {
          v110 = 1;
          goto LABEL_309;
        }
        v180 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1021 - v17) >> 10))
                     + 4 * (~(1021 - (_WORD)v17) & 0x3FF));
LABEL_325:
        if ((int *)v8 == v12)
          v8 = *((_QWORD *)a3 - 1) + 4096;
        v190 = *v109;
        v191 = *v10;
        v192 = *v180;
        if (*v109 >= *v10)
        {
          if (v192 >= v190)
          {
            v190 = *v180;
          }
          else
          {
            *v109 = v192;
            *v180 = v190;
            v193 = *v10;
            if (*v109 < *v10)
            {
              *v10 = *v109;
              *v109 = v193;
              v190 = *v180;
            }
          }
        }
        else
        {
          if (v192 >= v190)
          {
            *v10 = v190;
            *v109 = v191;
            v190 = *v180;
            if (*v180 >= v191)
              goto LABEL_339;
            *v109 = v190;
          }
          else
          {
            *v10 = v192;
          }
          *v180 = v191;
          v190 = v191;
        }
LABEL_339:
        v194 = *(_DWORD *)(v8 - 4);
        if (v194 < v190)
        {
          *v180 = v194;
          *(_DWORD *)(v8 - 4) = v190;
          v195 = *v109;
          if (*v180 < *v109)
          {
            *v109 = *v180;
            *v180 = v195;
            v196 = *v10;
            if (*v109 < *v10)
            {
              *v10 = *v109;
              *v109 = v196;
            }
          }
        }
        return;
      case 5:
        if (v16 >= -3)
        {
          v111 = (_QWORD *)(a1 + 8 * ((unint64_t)(v17 + 1) >> 10));
          v112 = (int *)(*v111 + 4 * ((v17 + 1) & 0x3FF));
          v113 = v17 + 2;
LABEL_312:
          v181 = (_QWORD *)(a1 + 8 * (v113 >> 10));
          v182 = (int *)(*v181 + 4 * (v113 & 0x3FF));
          v183 = v17 + 3;
          goto LABEL_313;
        }
        v111 = (_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v17) >> 10));
        v112 = (int *)(*v111 + 4 * (~(1022 - (_WORD)v17) & 0x3FF));
        if ((unint64_t)v16 >= 0xFFFFFFFFFFFFFFF9)
        {
          v113 = 1;
          goto LABEL_312;
        }
        v181 = (_QWORD *)(a1 - 8 * ((unint64_t)(1021 - v17) >> 10));
        v182 = (int *)(*v181 + 4 * (~(1021 - (_WORD)v17) & 0x3FF));
        if ((unint64_t)v16 >= 0xFFFFFFFFFFFFFFF5)
        {
          v183 = 1;
LABEL_313:
          v184 = (_QWORD *)(a1 + 8 * (v183 >> 10));
          v185 = (int *)(*v184 + 4 * (v183 & 0x3FF));
          if ((int *)v8 != v12)
            goto LABEL_315;
          goto LABEL_314;
        }
        v199 = 1020 - v17;
        v184 = (_QWORD *)(a1 - 8 * (v199 >> 10));
        v185 = (int *)(*v184 + 4 * (~(_WORD)v199 & 0x3FF));
        if ((int *)v8 == v12)
        {
LABEL_314:
          v186 = *((_QWORD *)a3 - 1);
          a3 -= 8;
          v8 = v186 + 4096;
        }
LABEL_315:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, v10, (uint64_t)v111, v112, (uint64_t)v181, v182, (uint64_t)v184, v185, (uint64_t)a3, (int *)(v8 - 4));
        return;
      default:
        if (v18 <= 23)
        {
          if ((a6 & 1) != 0)
          {
            for (i = (char *)(v10 + 1); ; i += 4)
            {
              if (i - v15 == 4096)
              {
                v116 = *(char **)(a1 + 8);
                a1 += 8;
                v15 = v116;
                i = v116;
              }
              if (i == (char *)v8)
                break;
              v117 = (int **)a1;
              v118 = (uint64_t)i;
              if (i == v15)
              {
                v117 = (int **)(a1 - 8);
                v118 = *(_QWORD *)(a1 - 8) + 4096;
              }
              v121 = *(_DWORD *)(v118 - 4);
              v119 = (int *)(v118 - 4);
              v120 = v121;
              v122 = *(_DWORD *)i;
              if (*(_DWORD *)i < v121)
              {
                v123 = (int *)i;
                while (1)
                {
                  *v123 = v120;
                  if (v119 == v10)
                    break;
                  v115 = v119;
                  if (v119 == *v117)
                  {
                    v124 = (uint64_t)*--v117;
                    v119 = (int *)(v124 + 4092);
                    v120 = *(_DWORD *)(v124 + 4092);
                    v123 = v115;
                    if (v122 >= v120)
                      goto LABEL_207;
                  }
                  else
                  {
                    --v119;
                    v120 = *(v115 - 1);
                    v123 = v115;
                    if (v122 >= v120)
                      goto LABEL_207;
                  }
                }
                v115 = v10;
LABEL_207:
                *v115 = v122;
              }
            }
            return;
          }
          if (v10 == (int *)v8)
            return;
          if (v16 < 5)
          {
            v188 = *(_QWORD *)(a1 - 8 * ((unint64_t)(1024 - v17) >> 10)) + 4 * (~(1024 - (_WORD)v17) & 0x3FF);
            if (v16 < -3)
            {
              v200 = 1022 - v17;
              v197 = ~(_WORD)v200;
              v198 = (char **)(a1 - 8 * (v200 >> 10));
LABEL_348:
              v201 = *v198;
              v202 = &(*v198)[4 * (v197 & 0x3FF)];
              if (v202 != (char *)v8)
              {
                while (1)
                {
                  v203 = (v202 - v201) >> 2;
                  if (v202 - v201 < 5)
                  {
                    v206 = 1024 - v203;
                    v204 = ~(_WORD)v206;
                    v205 = &v198[-(v206 >> 10)];
                  }
                  else
                  {
                    v204 = v203 - 1;
                    v205 = &v198[(unint64_t)(v203 - 1) >> 10];
                  }
                  v207 = *v205;
                  v208 = &(*v205)[4 * (v204 & 0x3FF)];
                  v209 = *(_DWORD *)v202;
                  v210 = *(_DWORD *)v208;
                  if (*(_DWORD *)v202 < *(_DWORD *)v208)
                    break;
LABEL_361:
                  v202 += 4;
                  if (v202 - v201 == 4096)
                  {
                    v214 = v198[1];
                    ++v198;
                    v201 = v214;
                    v202 = v214;
                  }
                  if (v202 == (char *)v8)
                    return;
                }
                v211 = v202;
                while (1)
                {
                  *(_DWORD *)v211 = v210;
                  if (v208 == (char *)v188)
                    goto LABEL_364;
                  v213 = v208;
                  if (v208 == v207)
                  {
                    v212 = *--v205;
                    v207 = v212;
                    v208 = v212 + 4092;
                    v210 = *((_DWORD *)v212 + 1023);
                    v211 = v213;
                    if (v209 >= v210)
                      goto LABEL_360;
                  }
                  else
                  {
                    v208 -= 4;
                    v210 = *((_DWORD *)v213 - 1);
                    v211 = v213;
                    if (v209 >= v210)
                    {
LABEL_360:
                      *(_DWORD *)v213 = v209;
                      goto LABEL_361;
                    }
                  }
                }
              }
              return;
            }
          }
          else
          {
            v188 = *(_QWORD *)(a1 + (((unint64_t)(v17 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v17 - 1) & 0x3FF);
          }
          v197 = v17 + 1;
          v198 = (char **)(a1 + 8 * ((unint64_t)(v17 + 1) >> 10));
          goto LABEL_348;
        }
        if (!a5)
        {
          if (v10 == (int *)v8)
            return;
          v125 = (unint64_t)(v18 - 2) >> 1;
          v126 = v125;
          while (v126)
          {
            v128 = v126 + v17;
            if (v126 + v17 < 1)
            {
              v139 = 1023 - v128;
              v129 = (uint64_t *)(a1 - 8 * (v139 >> 10));
              v130 = *v129;
              v131 = (int *)(*v129 + 4 * (~(_DWORD)v139 & 0x3FFLL));
              if (v131 == v10)
                break;
            }
            else
            {
              v129 = (uint64_t *)(a1 + 8 * (v128 >> 10));
              v130 = *v129;
              v131 = (int *)(*v129 + 4 * (v128 & 0x3FF));
              if (v131 == v10)
                break;
            }
            v132 = (((_QWORD)v129 - a1) << 7) - v17 + (((uint64_t)v131 - v130) >> 2);
            if (v125 >= v132)
            {
              v133 = (2 * v132) | 1;
              v134 = v133 + v17;
              if (v133 + v17 >= 1)
                goto LABEL_230;
LABEL_234:
              v140 = 1023 - v134;
              v135 = (uint64_t *)(a1 - 8 * (v140 >> 10));
              v136 = *v135;
              v137 = (int *)(*v135 + 4 * (~(_DWORD)v140 & 0x3FFLL));
              v138 = 2 * v132 + 2;
              if (v138 < v18)
                goto LABEL_235;
LABEL_237:
              v138 = v133;
              goto LABEL_238;
            }
LABEL_224:
            v127 = v126-- <= 0;
            if (v127)
            {
              while (1)
              {
                v150 = 0;
                v151 = *v10;
                v152 = v10;
                v153 = (int **)a1;
                do
                {
                  v154 = v152;
                  if (v150 == -1)
                  {
                    v155 = -1;
                    v150 = 0;
                    if (v18 <= 0)
                      goto LABEL_259;
                  }
                  else
                  {
                    v156 = v150 + 1 + v152 - *v153;
                    if (v156 < 1)
                    {
                      v157 = 1023 - v156;
                      v153 -= v157 >> 10;
                      v152 = &(*v153)[~(_WORD)v157 & 0x3FF];
                      v155 = (2 * v150) | 1;
                      v150 = 2 * v150 + 2;
                      if (v150 >= v18)
                        goto LABEL_259;
                    }
                    else
                    {
                      v153 += (unint64_t)v156 >> 10;
                      v152 = &(*v153)[v156 & 0x3FF];
                      v155 = (2 * v150) | 1;
                      v150 = 2 * v150 + 2;
                      if (v150 >= v18)
                        goto LABEL_259;
                    }
                  }
                  v158 = (char *)v152 - (char *)*v153;
                  v159 = v158 >> 2;
                  if (v158 < -3)
                  {
                    if (*v152 >= v153[-((unint64_t)(1022 - v159) >> 10)][~(1022 - (_WORD)v159) & 0x3FF])
                    {
LABEL_259:
                      v150 = v155;
                      goto LABEL_260;
                    }
                  }
                  else if (*v152 >= (*(int **)((char *)v153
                                              + (((unint64_t)(v159 + 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v159 + 1) & 0x3FF])
                  {
                    goto LABEL_259;
                  }
                  if ((char *)++v152 - (char *)*v153 == 4096)
                  {
                    v160 = v153[1];
                    ++v153;
                    v152 = v160;
                  }
LABEL_260:
                  *v154 = *v152;
                }
                while (v150 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
                if (v12 != (int *)v8)
                {
                  v161 = (int *)(v8 - 4);
                  if (v152 != (int *)(v8 - 4))
                    goto LABEL_276;
LABEL_285:
                  *v152 = v151;
                  goto LABEL_297;
                }
                v161 = (int *)(*((_QWORD *)a3 - 1) + 4092);
                if (v152 == v161)
                  goto LABEL_285;
LABEL_276:
                *v152 = *v161;
                v162 = v152 + 1;
                v163 = *v153;
                if ((char *)v162 - (char *)*v153 == 4096)
                {
                  v164 = v153[1];
                  ++v153;
                  v163 = v164;
                  v162 = v164;
                }
                *v161 = v151;
                if (v162 != v10)
                {
                  v165 = v162 - v163 - v17 + (((_QWORD)v153 - a1) << 7);
                  v166 = v165 - 2;
                  if (v165 >= 2)
                  {
                    v167 = v166 >> 1;
                    v168 = v10;
                    if (v166 >= 2)
                    {
                      v173 = v167 + v17;
                      if ((uint64_t)(v167 + v17) < 1)
                      {
                        v168 = (int *)(*(_QWORD *)(a1 - 8 * ((1023 - v173) >> 10))
                                     + 4 * (~(1023 - (_WORD)v173) & 0x3FF));
                        if (v163 != v162)
                          goto LABEL_282;
                      }
                      else
                      {
                        v168 = (int *)(*(_QWORD *)(a1 + ((v173 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v173 & 0x3FF));
                        if (v163 != v162)
                          goto LABEL_282;
                      }
                    }
                    else if (v163 != v162)
                    {
LABEL_282:
                      v171 = *(v162 - 1);
                      v169 = v162 - 1;
                      v170 = v171;
                      v172 = *v168;
                      if (*v168 >= v171)
                        goto LABEL_297;
                      do
                      {
LABEL_292:
                        *v169 = v172;
                        v169 = v168;
                        if (!v167)
                          break;
                        v174 = (v167 - 1) >> 1;
                        v168 = v10;
                        if (v167 >= 3)
                        {
                          v175 = v174 + v17;
                          if ((uint64_t)(v174 + v17) < 1)
                            v168 = (int *)(*(_QWORD *)(a1 - 8 * ((1023 - v175) >> 10))
                                         + 4 * (~(1023 - (_WORD)v175) & 0x3FF));
                          else
                            v168 = (int *)(*(_QWORD *)(a1 + ((v175 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v175 & 0x3FF));
                        }
                        v172 = *v168;
                        v167 = v174;
                      }
                      while (*v168 < v170);
                      *v169 = v170;
                      goto LABEL_297;
                    }
                    v169 = *(v153 - 1) + 1023;
                    v170 = *v169;
                    v172 = *v168;
                    if (*v168 >= *v169)
                      goto LABEL_297;
                    goto LABEL_292;
                  }
                }
LABEL_297:
                if (v12 == (int *)v8)
                {
                  v176 = (int *)*((_QWORD *)a3 - 1);
                  a3 -= 8;
                  v12 = v176;
                  v8 = (unint64_t)(v176 + 1024);
                }
                v8 -= 4;
                v127 = v18-- <= 2;
                if (v127)
                  return;
              }
            }
          }
          v132 = 0;
          v131 = v10;
          v133 = 1;
          v134 = v17 + 1;
          if (v17 + 1 < 1)
            goto LABEL_234;
LABEL_230:
          v135 = (uint64_t *)(a1 + 8 * (v134 >> 10));
          v136 = *v135;
          v137 = (int *)(*v135 + 4 * (v134 & 0x3FF));
          v138 = 2 * v132 + 2;
          if (v138 >= v18)
            goto LABEL_237;
LABEL_235:
          v141 = ((uint64_t)v137 - v136) >> 2;
          if ((uint64_t)v137 - v136 < -3)
          {
            if (*v137 >= *(_DWORD *)(v135[-((unint64_t)(1022 - v141) >> 10)]
                                    + 4 * (~(1022 - (_WORD)v141) & 0x3FF)))
              goto LABEL_237;
          }
          else if (*v137 >= *(_DWORD *)(*(uint64_t *)((char *)v135
                                                    + (((unint64_t)(v141 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                       + 4 * ((v141 + 1) & 0x3FF)))
          {
            goto LABEL_237;
          }
          if ((int *)((char *)++v137 - v136) == (int *)4096)
            v137 = (int *)v135[1];
LABEL_238:
          v142 = *v137;
          v143 = *v131;
          if (*v137 < *v131)
            goto LABEL_224;
          while (1)
          {
            *v131 = v142;
            v131 = v137;
            if (v125 < v138)
            {
LABEL_223:
              *v131 = v143;
              goto LABEL_224;
            }
            v144 = (2 * v138) | 1;
            v145 = v144 + v17;
            if (v144 + v17 < 1)
            {
              v148 = 1023 - v145;
              v146 = (uint64_t *)(a1 - 8 * (v148 >> 10));
              v147 = *v146;
              v137 = (int *)(*v146 + 4 * (~(_DWORD)v148 & 0x3FFLL));
              v138 = 2 * v138 + 2;
              if (v138 >= v18)
                goto LABEL_240;
            }
            else
            {
              v146 = (uint64_t *)(a1 + 8 * (v145 >> 10));
              v147 = *v146;
              v137 = (int *)(*v146 + 4 * (v145 & 0x3FF));
              v138 = 2 * v138 + 2;
              if (v138 >= v18)
                goto LABEL_240;
            }
            v149 = ((uint64_t)v137 - v147) >> 2;
            if ((uint64_t)v137 - v147 < -3)
            {
              if (*v137 < *(_DWORD *)(v146[-((unint64_t)(1022 - v149) >> 10)]
                                     + 4 * (~(1022 - (_WORD)v149) & 0x3FF)))
              {
LABEL_251:
                if ((int *)((char *)++v137 - v147) == (int *)4096)
                  v137 = (int *)v146[1];
                goto LABEL_241;
              }
            }
            else if (*v137 < *(_DWORD *)(*(uint64_t *)((char *)v146
                                                     + (((unint64_t)(v149 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                        + 4 * ((v149 + 1) & 0x3FF)))
            {
              goto LABEL_251;
            }
LABEL_240:
            v138 = v144;
LABEL_241:
            v142 = *v137;
            if (*v137 < v143)
              goto LABEL_223;
          }
        }
        v19 = (unint64_t)v18 >> 1;
        v20 = ((unint64_t)v18 >> 1) + v17;
        if ((unint64_t)v18 < 0x81)
        {
          if (v20 < 1)
          {
            v27 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v20) >> 10))
                        + 4 * (~(1023 - (_WORD)v20) & 0x3FF));
            if (v13 >= 5)
            {
LABEL_15:
              v28 = (int *)(*(_QWORD *)&a3[((unint64_t)(v14 - 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                          + 4 * ((v14 - 1) & 0x3FF));
              v29 = *v10;
              v30 = *v27;
              v31 = *v28;
              if (*v10 >= *v27)
              {
LABEL_16:
                if (v31 < v29)
                {
                  *v10 = v31;
                  *v28 = v29;
                  v32 = *v27;
                  if (*v10 < *v27)
                  {
                    *v27 = *v10;
                    *v10 = v32;
                    --a5;
                    if ((a6 & 1) == 0)
                      goto LABEL_85;
LABEL_47:
                    v42 = *v10;
                    goto LABEL_98;
                  }
                }
                goto LABEL_46;
              }
LABEL_26:
              if (v31 >= v29)
              {
                *v27 = v29;
                *v10 = v30;
                if (*v28 >= v30)
                  goto LABEL_46;
                *v10 = *v28;
              }
              else
              {
                *v27 = v31;
              }
              *v28 = v30;
LABEL_46:
              --a5;
              if ((a6 & 1) == 0)
                goto LABEL_85;
              goto LABEL_47;
            }
          }
          else
          {
            v27 = (int *)(*(_QWORD *)(a1 + (((unint64_t)v20 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v20 & 0x3FF));
            if (v13 >= 5)
              goto LABEL_15;
          }
          v28 = (int *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1024 - v14) >> 10)]
                      + 4 * (~(1024 - (_WORD)v14) & 0x3FF));
          v29 = *v10;
          v30 = *v27;
          v31 = *v28;
          if (*v10 >= *v27)
            goto LABEL_16;
          goto LABEL_26;
        }
        if (v20 >= 1)
        {
          v21 = (int *)(*(_QWORD *)(a1 + (((unint64_t)v20 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v20 & 0x3FF));
          if (v13 >= 5)
            goto LABEL_9;
LABEL_21:
          v22 = (int *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1024 - v14) >> 10)]
                      + 4 * (~(1024 - (_WORD)v14) & 0x3FF));
          v23 = *v21;
          v24 = *v10;
          v25 = *v22;
          if (*v21 >= *v10)
            goto LABEL_10;
          goto LABEL_22;
        }
        v21 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v20) >> 10)) + 4
                                                                                   * (~(1023 - (_WORD)v20) & 0x3FF));
        if (v13 < 5)
          goto LABEL_21;
LABEL_9:
        v22 = (int *)(*(_QWORD *)&a3[((unint64_t)(v14 - 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v14 - 1) & 0x3FF));
        v23 = *v21;
        v24 = *v10;
        v25 = *v22;
        if (*v21 >= *v10)
        {
LABEL_10:
          if (v25 < v23)
          {
            *v21 = v25;
            *v22 = v23;
            v26 = *v10;
            if (*v21 < *v10)
            {
              *v10 = *v21;
              *v21 = v26;
            }
          }
          goto LABEL_31;
        }
LABEL_22:
        if (v25 >= v23)
        {
          *v10 = v23;
          *v21 = v24;
          if (*v22 >= v24)
            goto LABEL_31;
          *v21 = *v22;
        }
        else
        {
          *v10 = v25;
        }
        *v22 = v24;
LABEL_31:
        if (v16 < -3)
        {
          v33 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v17) >> 10))
                      + 4 * (~(1022 - (_WORD)v17) & 0x3FF));
          v34 = v17 + v19 - 1;
          v35 = (unint64_t)v34 >> 7;
          if (v34 < 1)
          {
LABEL_33:
            v36 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v34) >> 10))
                        + 4 * (~(1023 - (_WORD)v34) & 0x3FF));
            if (v13 < 9)
              goto LABEL_34;
LABEL_40:
            v37 = (int *)(*(_QWORD *)&a3[((unint64_t)(v14 - 2) >> 7) & 0x1FFFFFFFFFFFFF8]
                        + 4 * ((v14 - 2) & 0x3FF));
            v38 = *v36;
            v39 = *v33;
            v40 = *v37;
            if (*v36 >= *v33)
              goto LABEL_35;
            goto LABEL_41;
          }
        }
        else
        {
          v33 = (int *)(*(_QWORD *)(a1 + (((unint64_t)(v17 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v17 + 1) & 0x3FF));
          v34 = v17 + v19 - 1;
          v35 = (unint64_t)v34 >> 7;
          if (v34 < 1)
            goto LABEL_33;
        }
        v36 = (int *)(*(_QWORD *)(a1 + (v35 & 0x1FFFFFFFFFFFFF8)) + 4 * (v34 & 0x3FF));
        if (v13 >= 9)
          goto LABEL_40;
LABEL_34:
        v37 = (int *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1025 - v14) >> 10)] + 4 * (~(1025 - (_WORD)v14) & 0x3FF));
        v38 = *v36;
        v39 = *v33;
        v40 = *v37;
        if (*v36 >= *v33)
        {
LABEL_35:
          if (v40 < v38)
          {
            *v36 = v40;
            *v37 = v38;
            v41 = *v33;
            if (*v36 < *v33)
            {
              *v33 = *v36;
              *v36 = v41;
            }
          }
          goto LABEL_51;
        }
LABEL_41:
        if (v40 >= v38)
        {
          *v33 = v38;
          *v36 = v39;
          if (*v37 >= v39)
            goto LABEL_51;
          *v36 = *v37;
        }
        else
        {
          *v33 = v40;
        }
        *v37 = v39;
LABEL_51:
        if (v16 < -7)
        {
          v43 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1021 - v17) >> 10))
                      + 4 * (~(1021 - (_WORD)v17) & 0x3FF));
          v44 = v17 + v19 + 1;
          v45 = (unint64_t)v44 >> 7;
          if (v44 < 1)
          {
LABEL_53:
            v46 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v44) >> 10))
                        + 4 * (~(1023 - (_WORD)v44) & 0x3FF));
            if (v13 < 13)
              goto LABEL_54;
LABEL_60:
            v47 = (int *)(*(_QWORD *)&a3[((unint64_t)(v14 - 3) >> 7) & 0x1FFFFFFFFFFFFF8]
                        + 4 * ((v14 - 3) & 0x3FF));
            v48 = *v46;
            v49 = *v43;
            v50 = *v47;
            if (*v46 >= *v43)
              goto LABEL_55;
            goto LABEL_61;
          }
        }
        else
        {
          v43 = (int *)(*(_QWORD *)(a1 + (((unint64_t)(v17 + 2) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v17 + 2) & 0x3FF));
          v44 = v17 + v19 + 1;
          v45 = (unint64_t)v44 >> 7;
          if (v44 < 1)
            goto LABEL_53;
        }
        v46 = (int *)(*(_QWORD *)(a1 + (v45 & 0x1FFFFFFFFFFFFF8)) + 4 * (v44 & 0x3FF));
        if (v13 >= 13)
          goto LABEL_60;
LABEL_54:
        v47 = (int *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1026 - v14) >> 10)] + 4 * (~(1026 - (_WORD)v14) & 0x3FF));
        v48 = *v46;
        v49 = *v43;
        v50 = *v47;
        if (*v46 >= *v43)
        {
LABEL_55:
          if (v50 < v48)
          {
            *v46 = v50;
            *v47 = v48;
            v51 = *v43;
            if (*v46 < *v43)
            {
              *v43 = *v46;
              *v46 = v51;
            }
          }
          goto LABEL_66;
        }
LABEL_61:
        if (v50 >= v48)
        {
          *v43 = v48;
          *v46 = v49;
          if (*v47 >= v49)
            goto LABEL_66;
          *v46 = *v47;
        }
        else
        {
          *v43 = v50;
        }
        *v47 = v49;
LABEL_66:
        if (v34 < 1)
        {
          v52 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v34) >> 10))
                      + 4 * (~(1023 - (_WORD)v34) & 0x3FF));
          if (v20 >= 1)
          {
LABEL_68:
            v53 = (int *)(*(_QWORD *)(a1 + (((unint64_t)v20 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v20 & 0x3FF));
            if (v44 >= 1)
              goto LABEL_69;
LABEL_74:
            v54 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v44) >> 10))
                        + 4 * (~(1023 - (_WORD)v44) & 0x3FF));
            v55 = *v53;
            v56 = *v52;
            v57 = *v54;
            if (*v53 < *v52)
              goto LABEL_70;
LABEL_75:
            if (v57 < v55)
            {
              *v53 = v57;
              *v54 = v55;
              v58 = *v52;
              if (*v53 < *v52)
              {
                *v52 = *v53;
                *v53 = v58;
              }
            }
            goto LABEL_81;
          }
        }
        else
        {
          v52 = (int *)(*(_QWORD *)(a1 + (v35 & 0x1FFFFFFFFFFFFF8)) + 4 * (v34 & 0x3FF));
          if (v20 >= 1)
            goto LABEL_68;
        }
        v53 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v20) >> 10)) + 4
                                                                                   * (~(1023 - (_WORD)v20) & 0x3FF));
        if (v44 < 1)
          goto LABEL_74;
LABEL_69:
        v54 = (int *)(*(_QWORD *)(a1 + (v45 & 0x1FFFFFFFFFFFFF8)) + 4 * (v44 & 0x3FF));
        v55 = *v53;
        v56 = *v52;
        v57 = *v54;
        if (*v53 >= *v52)
          goto LABEL_75;
LABEL_70:
        if (v57 >= v55)
        {
          *v52 = v55;
          *v53 = v56;
          if (*v54 >= v56)
            goto LABEL_81;
          *v53 = *v54;
        }
        else
        {
          *v52 = v57;
        }
        *v54 = v56;
LABEL_81:
        if (v20 < 1)
        {
          v60 = 1023 - v20;
          LOWORD(v20) = ~(1023 - v20);
          v59 = *(_QWORD *)(a1 - 8 * (v60 >> 10));
        }
        else
        {
          v59 = *(_QWORD *)(a1 + (((unint64_t)v20 >> 7) & 0x1FFFFFFFFFFFFF8));
        }
        v61 = (int *)(v59 + 4 * (v20 & 0x3FF));
        v62 = *v10;
        *v10 = *v61;
        *v61 = v62;
        --a5;
        if ((a6 & 1) != 0)
          goto LABEL_47;
LABEL_85:
        if (v16 >= 5)
        {
          v63 = *(_DWORD *)(*(_QWORD *)(a1 + (((unint64_t)(v17 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((v17 - 1) & 0x3FF));
          v42 = *v10;
          if (v63 >= *v10)
            goto LABEL_87;
LABEL_98:
          v67 = a1;
          v68 = v10;
          do
          {
            if ((char *)++v68 - v15 == 4096)
            {
              v69 = *(char **)(v67 + 8);
              v67 += 8;
              v15 = v69;
              v68 = (int *)v69;
            }
            if (v68 == (int *)v8)
              goto LABEL_364;
            v70 = *v68;
          }
          while (*v68 < v42);
          v71 = ((char *)v68 - v15) >> 2;
          if ((char *)v68 - v15 < 5)
          {
            if ((int *)(*(_QWORD *)(v67 - 8 * ((unint64_t)(1024 - v71) >> 10))
                       + 4 * (~(1024 - (_WORD)v71) & 0x3FF)) != v10)
            {
LABEL_105:
              v72 = a3;
              v73 = (int *)v8;
              while (v73 != v10)
              {
                if (v73 == v12)
                {
                  v75 = (int *)*((_QWORD *)v72 - 1);
                  v72 -= 8;
                  v12 = v75;
                  v73 = v75 + 1024;
                }
                v74 = *--v73;
                if (v74 < v42)
                  goto LABEL_119;
              }
              goto LABEL_364;
            }
          }
          else if ((int *)(*(_QWORD *)(v67 + (((unint64_t)(v71 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((v71 - 1) & 0x3FF)) != v10)
          {
            goto LABEL_105;
          }
          v72 = a3;
          v73 = (int *)v8;
          while (v67 < (unint64_t)v72 || (char *)v67 == v72 && v68 < v73)
          {
            if (v73 == v12)
            {
              v77 = (int *)*((_QWORD *)v72 - 1);
              v72 -= 8;
              v12 = v77;
              v73 = v77 + 1023;
              if (v77[1023] < v42)
                break;
            }
            else
            {
              v76 = *--v73;
              if (v76 < v42)
                break;
            }
          }
LABEL_119:
          v79 = (char *)v67 != v72 || v68 >= v73;
          if (v67 < (unint64_t)v72)
            v79 = 0;
LABEL_127:
          if (v67 < (unint64_t)v72 || (char *)v67 == v72 && v68 < v73)
          {
            *v68 = *v73;
            *v73 = v70;
            while (1)
            {
              if ((char *)++v68 - v15 == 4096)
              {
                v80 = *(char **)(v67 + 8);
                v67 += 8;
                v15 = v80;
                v68 = (int *)v80;
              }
              if (v68 == (int *)v8)
                goto LABEL_364;
              v70 = *v68;
              if (*v68 >= v42)
              {
                while (v73 != v10)
                {
                  if (v73 == v12)
                  {
                    v82 = (int *)*((_QWORD *)v72 - 1);
                    v72 -= 8;
                    v12 = v82;
                    v73 = v82 + 1024;
                  }
                  v81 = *--v73;
                  if (v81 < v42)
                    goto LABEL_127;
                }
                goto LABEL_364;
              }
            }
          }
          v83 = (char *)v68 - v15;
          v84 = v83 >> 2;
          if (v83 < 5)
          {
            v93 = 1024 - v84;
            v86 = v67 - 8 * (v93 >> 10);
            v87 = (int *)(*(_QWORD *)v86 + 4 * (~(_WORD)v93 & 0x3FF));
            if (v87 == v10)
              goto LABEL_159;
          }
          else
          {
            v85 = v84 - 1;
            v86 = v67 + 8 * (v85 >> 10);
            v87 = (int *)(*(_QWORD *)v86 + 4 * (v85 & 0x3FF));
            if (v87 == v10)
            {
LABEL_159:
              *v87 = v42;
              if (!v79)
              {
LABEL_163:
                std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(a1, v10, v86, v87, a5, a6 & 1);
                a6 = 0;
LABEL_164:
                v97 = v87 + 1;
                if ((int *)((char *)v87 - *(_QWORD *)v86 + 4) == (int *)4096)
                {
                  v98 = *(int **)(v86 + 8);
                  v86 += 8;
                  v97 = v98;
                }
                a1 = v86;
                v10 = v97;
                if ((int *)v8 != v97)
                  continue;
                return;
              }
              v94 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v10, (char *)v86, (uint64_t)v87);
              v95 = (uint64_t)v87 - *(_QWORD *)v86;
              v96 = v95 >> 2;
              if (v95 < -3)
              {
                if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)(v86 - 8 * ((unint64_t)(1022 - v96) >> 10)), (int *)(*(_QWORD *)(v86 - 8 * ((unint64_t)(1022 - v96) >> 10))+ 4 * (~(1022 - (_WORD)v96) & 0x3FF)), a3, v8))
                {
LABEL_162:
                  if (v94)
                    goto LABEL_164;
                  goto LABEL_163;
                }
              }
              else if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)(v86 + 8 * ((unint64_t)(v96 + 1) >> 10)), (int *)(*(_QWORD *)(v86 + 8 * ((unint64_t)(v96 + 1) >> 10)) + 4 * ((v96 + 1) & 0x3FF)), a3, v8))
              {
                goto LABEL_162;
              }
              v8 = (unint64_t)v87;
              a3 = (char *)v86;
              if (!v94 && v87 != v10)
                continue;
              return;
            }
          }
          *v10 = *v87;
          goto LABEL_159;
        }
        v66 = *(_DWORD *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1024 - v17) >> 10))
                        + 4 * (~(1024 - (_WORD)v17) & 0x3FF));
        v42 = *v10;
        if (v66 < *v10)
          goto LABEL_98;
LABEL_87:
        if (v13 < 5)
        {
          if (v42 >= *(_DWORD *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1024 - v14) >> 10)]
                                + 4 * (~(1024 - (_WORD)v14) & 0x3FF)))
            goto LABEL_89;
LABEL_144:
          v64 = v10;
          while (1)
          {
            if ((char *)++v64 - v15 == 4096)
            {
              v88 = *(char **)(a1 + 8);
              a1 += 8;
              v15 = v88;
              v64 = (int *)v88;
            }
            if (v64 == (int *)v8)
              goto LABEL_364;
            if (v42 < *v64)
              goto LABEL_149;
          }
        }
        if (v42 < *(_DWORD *)(*(_QWORD *)&a3[((unint64_t)(v14 - 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                             + 4 * ((v14 - 1) & 0x3FF)))
          goto LABEL_144;
LABEL_89:
        v64 = v10;
        do
        {
          if ((char *)++v64 - v15 == 4096)
          {
            v65 = *(char **)(a1 + 8);
            a1 += 8;
            v15 = v65;
            v64 = (int *)v65;
          }
        }
        while ((a1 < (unint64_t)a3 || (char *)a1 == a3 && (unint64_t)v64 < v8) && v42 >= *v64);
LABEL_149:
        if (a1 < (unint64_t)a3 || (char *)a1 == a3 && (unint64_t)v64 < v8)
        {
          v89 = a3;
          v90 = (int *)v8;
          while (v90 != v10)
          {
            if (v90 == v12)
            {
              v92 = (int *)*((_QWORD *)v89 - 1);
              v89 -= 8;
              v12 = v92;
              v90 = v92 + 1024;
            }
            v91 = *--v90;
            if (v42 >= v91)
              goto LABEL_169;
          }
          goto LABEL_364;
        }
        v89 = a3;
        v90 = (int *)v8;
LABEL_169:
        if (a1 < (unint64_t)v89 || (char *)a1 == v89 && v64 < v90)
        {
          v99 = *v64;
          *v64 = *v90;
          *v90 = v99;
          while (1)
          {
            if ((char *)++v64 - v15 == 4096)
            {
              v100 = *(char **)(a1 + 8);
              a1 += 8;
              v15 = v100;
              v64 = (int *)v100;
            }
            if (v64 == (int *)v8)
              break;
            if (v42 < *v64)
            {
              while (v90 != v10)
              {
                if (v90 == v12)
                {
                  v102 = (int *)*((_QWORD *)v89 - 1);
                  v89 -= 8;
                  v12 = v102;
                  v90 = v102 + 1024;
                }
                v101 = *--v90;
                if (v42 >= v101)
                  goto LABEL_169;
              }
              break;
            }
          }
LABEL_364:
          __break(1u);
          return;
        }
        v103 = (char *)v64 - v15;
        v104 = v103 >> 2;
        if (v103 < 5)
          v105 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1024 - v104) >> 10))
                       + 4 * (~(1024 - (_WORD)v104) & 0x3FF));
        else
          v105 = (int *)(*(_QWORD *)(a1 + (((unint64_t)(v104 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v104 - 1) & 0x3FF));
        if (v105 != v10)
          *v10 = *v105;
        a6 = 0;
        *v105 = v42;
        v10 = v64;
        if ((int *)v8 != v64)
          continue;
        return;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *a1, int *a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  char *v8;
  char *v9;
  int *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int *v16;
  char *v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  char *v28;
  int *v29;
  unint64_t v30;
  char *v31;
  int *v32;
  uint64_t v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  uint64_t v45;
  unint64_t v46;
  int *v47;
  int v48;
  int *v49;
  char *v50;
  _DWORD *v51;
  int v52;
  int v53;
  int *v54;
  _DWORD *v55;
  int *v56;
  int v57;
  int v58;
  int v59;
  _DWORD *v60;
  unint64_t v61;

  if ((int *)a4 == a2)
    return 1;
  v4 = *(_QWORD *)a3;
  v5 = (uint64_t)a2 - *(_QWORD *)a1;
  v6 = v5 >> 2;
  switch(((a4 - *(_QWORD *)a3) >> 2) + ((a3 - a1) << 7) - (v5 >> 2))
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (v4 == a4)
        a4 = *((_QWORD *)a3 - 1) + 4096;
      v14 = *(_DWORD *)(a4 - 4);
      v15 = *a2;
      if (v14 < *a2)
      {
        *a2 = v14;
        *(_DWORD *)(a4 - 4) = v15;
      }
      return 1;
    case 3:
      if (v5 < -3)
      {
        v16 = (int *)(*(_QWORD *)&a1[-8 * ((unint64_t)(1022 - v6) >> 10)] + 4 * (~(1022 - (_WORD)v6) & 0x3FF));
        if (v4 != a4)
          goto LABEL_26;
      }
      else
      {
        v16 = (int *)(*(_QWORD *)&a1[((unint64_t)(v6 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v6 + 1) & 0x3FF));
        if (v4 != a4)
          goto LABEL_26;
      }
      a4 = *((_QWORD *)a3 - 1) + 4096;
LABEL_26:
      v25 = *v16;
      v26 = *a2;
      v27 = *(_DWORD *)(a4 - 4);
      if (*v16 >= *a2)
      {
        if (v27 >= v25)
          return 1;
        *v16 = v27;
        *(_DWORD *)(a4 - 4) = v25;
        goto LABEL_86;
      }
      if (v27 < v25)
      {
        *a2 = v27;
        *(_DWORD *)(a4 - 4) = v26;
        return 1;
      }
      *a2 = v25;
      *v16 = v26;
      v57 = *(_DWORD *)(a4 - 4);
      if (v57 < v26)
      {
        *v16 = v57;
        *(_DWORD *)(a4 - 4) = v26;
        return 1;
      }
      return 1;
    case 4:
      if (v5 >= -3)
      {
        v16 = (int *)(*(_QWORD *)&a1[((unint64_t)(v6 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v6 + 1) & 0x3FF));
        v20 = v6 + 2;
        goto LABEL_39;
      }
      v16 = (int *)(*(_QWORD *)&a1[-8 * ((unint64_t)(1022 - v6) >> 10)] + 4 * (~(1022 - (_WORD)v6) & 0x3FF));
      if ((unint64_t)v5 >= 0xFFFFFFFFFFFFFFF9)
      {
        v20 = 1;
LABEL_39:
        v34 = (int *)(*(_QWORD *)&a1[(v20 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v20 & 0x3FF));
        if (v4 != a4)
          goto LABEL_41;
        goto LABEL_40;
      }
      v34 = (int *)(*(_QWORD *)&a1[-8 * ((unint64_t)(1021 - v6) >> 10)] + 4 * (~(1021 - (_WORD)v6) & 0x3FF));
      if (v4 == a4)
LABEL_40:
        a4 = *((_QWORD *)a3 - 1) + 4096;
LABEL_41:
      v35 = *v16;
      v36 = *a2;
      v37 = *v34;
      if (*v16 < *a2)
      {
        if (v37 >= v35)
        {
          *a2 = v35;
          *v16 = v36;
          v35 = *v34;
          if (*v34 >= v36)
            goto LABEL_81;
          *v16 = v35;
        }
        else
        {
          *a2 = v37;
        }
        *v34 = v36;
        v35 = v36;
LABEL_81:
        v39 = *(_DWORD *)(a4 - 4);
        if (v39 >= v35)
          return 1;
        goto LABEL_84;
      }
      if (v37 < v35)
      {
        *v16 = v37;
        *v34 = v35;
        v38 = *a2;
        if (*v16 < *a2)
        {
          *a2 = *v16;
          *v16 = v38;
          v35 = *v34;
          v39 = *(_DWORD *)(a4 - 4);
          if (v39 >= *v34)
            return 1;
          goto LABEL_84;
        }
        goto LABEL_81;
      }
      v35 = *v34;
      v39 = *(_DWORD *)(a4 - 4);
      if (v39 >= v37)
        return 1;
LABEL_84:
      *v34 = v39;
      *(_DWORD *)(a4 - 4) = v35;
      v58 = *v16;
      if (*v34 >= *v16)
        return 1;
      *v16 = *v34;
      *v34 = v58;
LABEL_86:
      v59 = *a2;
      if (*v16 >= *a2)
        return 1;
      *a2 = *v16;
      *v16 = v59;
      return 1;
    case 5:
      if (v5 >= -3)
      {
        v17 = &a1[8 * ((unint64_t)(v6 + 1) >> 10)];
        v18 = (int *)(*(_QWORD *)v17 + 4 * ((v6 + 1) & 0x3FF));
        v19 = v6 + 2;
LABEL_31:
        v28 = &a1[8 * (v19 >> 10)];
        v29 = (int *)(*(_QWORD *)v28 + 4 * (v19 & 0x3FF));
        v30 = v6 + 3;
        goto LABEL_32;
      }
      v17 = &a1[-8 * ((unint64_t)(1022 - v6) >> 10)];
      v18 = (int *)(*(_QWORD *)v17 + 4 * (~(1022 - (_WORD)v6) & 0x3FF));
      if ((unint64_t)v5 >= 0xFFFFFFFFFFFFFFF9)
      {
        v19 = 1;
        goto LABEL_31;
      }
      v28 = &a1[-8 * ((unint64_t)(1021 - v6) >> 10)];
      v29 = (int *)(*(_QWORD *)v28 + 4 * (~(1021 - (_WORD)v6) & 0x3FF));
      if ((unint64_t)v5 >= 0xFFFFFFFFFFFFFFF5)
      {
        v30 = 1;
LABEL_32:
        v31 = &a1[8 * (v30 >> 10)];
        v32 = (int *)(*(_QWORD *)v31 + 4 * (v30 & 0x3FF));
        if (v4 != a4)
          goto LABEL_34;
        goto LABEL_33;
      }
      v61 = 1020 - v6;
      v31 = &a1[-8 * (v61 >> 10)];
      v32 = (int *)(*(_QWORD *)v31 + 4 * (~(_WORD)v61 & 0x3FF));
      if (v4 == a4)
      {
LABEL_33:
        v33 = *((_QWORD *)a3 - 1);
        a3 -= 8;
        a4 = v33 + 4096;
      }
LABEL_34:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, a2, (uint64_t)v17, v18, (uint64_t)v28, v29, (uint64_t)v31, v32, (uint64_t)a3, (int *)(a4 - 4));
      return 1;
    default:
      if (v5 <= -8)
      {
        v8 = &a1[-8 * ((unint64_t)(1021 - v6) >> 10)];
        v9 = *(char **)v8;
        v10 = (int *)(*(_QWORD *)v8 + 4 * (~(1021 - (_WORD)v6) & 0x3FF));
        v13 = 1022 - v6;
      }
      else
      {
        v8 = &a1[8 * ((unint64_t)(v6 + 2) >> 10)];
        v9 = *(char **)v8;
        v10 = (int *)(*(_QWORD *)v8 + 4 * ((v6 + 2) & 0x3FF));
        v11 = __CFADD__(v6, 1);
        v12 = v6 + 1;
        if (!v11)
        {
          v21 = (int *)(*(_QWORD *)&a1[(v12 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v12 & 0x3FF));
          v22 = *v21;
          v23 = *a2;
          v24 = *v10;
          if (*v21 >= *a2)
            goto LABEL_49;
          goto LABEL_22;
        }
        v13 = 1023;
      }
      v21 = (int *)(*(_QWORD *)&a1[-8 * (v13 >> 10)] + 4 * (~(_WORD)v13 & 0x3FF));
      v22 = *v21;
      v23 = *a2;
      v24 = *v10;
      if (*v21 >= *a2)
      {
LABEL_49:
        if (v24 < v22)
        {
          *v21 = v24;
          *v10 = v22;
          v40 = *a2;
          if (*v21 < *a2)
          {
            *a2 = *v21;
            *v21 = v40;
          }
        }
        goto LABEL_55;
      }
LABEL_22:
      if (v24 >= v22)
      {
        *a2 = v22;
        *v21 = v23;
        if (*v10 >= v23)
          goto LABEL_55;
        *v21 = *v10;
      }
      else
      {
        *a2 = v24;
      }
      *v10 = v23;
LABEL_55:
      v41 = ((char *)v10 - v9) >> 2;
      if ((char *)v10 - v9 < -3)
      {
        v46 = 1022 - v41;
        v43 = &v8[-8 * (v46 >> 10)];
        v44 = *(_DWORD **)v43;
        v45 = ~(_DWORD)v46 & 0x3FFLL;
      }
      else
      {
        v42 = v41 + 1;
        v43 = &v8[8 * (v42 >> 10)];
        v44 = *(_DWORD **)v43;
        v45 = v42 & 0x3FF;
      }
      v47 = &v44[v45];
      if (v47 == (int *)a4)
        return 1;
      v48 = 0;
      while (1)
      {
        v49 = v47;
        v50 = v43;
        v51 = v44;
        v52 = *v47;
        v53 = *v10;
        if (v52 < *v10)
        {
          v54 = v49;
          while (1)
          {
            *v54 = v53;
            if (v10 == a2)
              break;
            v56 = v10;
            if (v10 == (int *)v9)
            {
              v55 = (_DWORD *)*((_QWORD *)v8 - 1);
              v8 -= 8;
              v9 = (char *)v55;
              v10 = v55 + 1023;
              v53 = v55[1023];
              v54 = v56;
              if (v52 >= v53)
                goto LABEL_69;
            }
            else
            {
              --v10;
              v53 = *(v56 - 1);
              v54 = v56;
              if (v52 >= v53)
                goto LABEL_69;
            }
          }
          v56 = a2;
LABEL_69:
          *v56 = v52;
          if (++v48 == 8)
            break;
        }
        v47 = v49 + 1;
        v44 = v51;
        v43 = v50;
        if ((char *)(v49 + 1) - (char *)v51 == 4096)
        {
          v43 = v50 + 8;
          v44 = (_DWORD *)*((_QWORD *)v50 + 1);
          v47 = v44;
        }
        v9 = (char *)v51;
        v8 = v50;
        v10 = v49;
        if (v47 == (int *)a4)
          return 1;
      }
      v60 = v49 + 1;
      if ((char *)(v49 + 1) - (char *)v51 == 4096)
        v60 = (_DWORD *)*((_QWORD *)v50 + 1);
      result = v60 == (_DWORD *)a4;
      break;
  }
  return result;
}

void std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, uint64_t a9, int *a10)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v10 = *a4;
  v11 = *a2;
  v12 = *a6;
  if (*a4 >= *a2)
  {
    if (v12 >= v10)
    {
      v10 = *a6;
      v14 = *a8;
      if (*a8 >= v12)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a4 = v12;
    *a6 = v10;
    v13 = *a2;
    if (*a4 < *a2)
    {
      *a2 = *a4;
      *a4 = v13;
      v10 = *a6;
      v14 = *a8;
      if (*a8 >= *a6)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 >= v10)
    {
      *a2 = v10;
      *a4 = v11;
      v10 = *a6;
      if (*a6 >= v11)
        goto LABEL_11;
      *a4 = v10;
    }
    else
    {
      *a2 = v12;
    }
    *a6 = v11;
    v10 = v11;
  }
LABEL_11:
  v14 = *a8;
  if (*a8 >= v10)
    goto LABEL_17;
LABEL_14:
  *a6 = v14;
  *a8 = v10;
  v15 = *a4;
  if (*a6 < *a4)
  {
    *a4 = *a6;
    *a6 = v15;
    v16 = *a2;
    if (*a4 < *a2)
    {
      *a2 = *a4;
      *a4 = v16;
    }
  }
LABEL_17:
  v17 = *a8;
  if (*a10 < *a8)
  {
    *a8 = *a10;
    *a10 = v17;
    v18 = *a6;
    if (*a8 < *a6)
    {
      *a6 = *a8;
      *a8 = v18;
      v19 = *a4;
      if (*a6 < *a4)
      {
        *a4 = *a6;
        *a6 = v19;
        v20 = *a2;
        if (*a4 < *a2)
        {
          *a2 = *a4;
          *a4 = v20;
        }
      }
    }
  }
}

void std::deque<int>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  BOOL v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v30 = *(char **)a1;
    if ((unint64_t)v7 > *(_QWORD *)a1)
    {
      v31 = (uint64_t)&v7[-*(_QWORD *)a1] >> 3;
      if (v31 >= -1)
        v32 = v31 + 1;
      else
        v32 = v31 + 2;
      v33 = v32 >> 1;
      v34 = -v33;
      v35 = &v7[-8 * v33];
      v36 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v33], v7, v5 - v7);
        v7 = *(char **)(a1 + 8);
      }
      v5 = &v35[v36];
      v37 = &v7[8 * v34];
      goto LABEL_32;
    }
    v39 = (v5 - v30) >> 2;
    if (v5 == v30)
      v39 = 1;
    if (v39 >> 61)
      goto LABEL_108;
    v40 = v39 >> 2;
    v41 = 8 * v39;
    v42 = (char *)operator new(8 * v39);
    v43 = &v42[8 * v40];
    v45 = v5 - v7;
    v44 = v5 == v7;
    v5 = v43;
    if (!v44)
    {
      v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
      v46 = v45 - 8;
      if ((unint64_t)(v45 - 8) < 0x38)
      {
        v47 = &v42[8 * v40];
        do
        {
LABEL_91:
          v100 = *(_QWORD *)v7;
          v7 += 8;
          *(_QWORD *)v47 = v100;
          v47 += 8;
        }
        while (v47 != v5);
        goto LABEL_92;
      }
      v93 = &v42[8 * v40];
      v47 = v93;
      if ((unint64_t)(v93 - v7) < 0x20)
        goto LABEL_91;
      v94 = (v46 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v47 = &v43[v95];
      v7 += v95;
      v96 = (__int128 *)(v6 + 3);
      v97 = v93 + 16;
      v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v99 = *v96;
        *(v97 - 1) = *(v96 - 1);
        *v97 = v99;
        v96 += 2;
        v97 += 2;
        v98 -= 4;
      }
      while (v98);
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_91;
    }
LABEL_92:
    *(_QWORD *)a1 = v42;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = &v42[v41];
    if (v30)
    {
      operator delete(v30);
      v5 = *(char **)(a1 + 16);
    }
LABEL_4:
    if (!v5)
    {
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
LABEL_5:
    *(_QWORD *)v5 = v8;
LABEL_10:
    *(_QWORD *)(a1 + 16) += 8;
    return;
  }
  v10 = *(char **)(a1 + 16);
  v9 = *(char **)(a1 + 24);
  v12 = *(char **)a1;
  v11 = *(char **)(a1 + 8);
  v13 = v10 - v11;
  v14 = (v10 - v11) >> 3;
  v15 = (uint64_t)&v9[-*(_QWORD *)a1];
  if (v14 < (unint64_t)(v15 >> 3))
  {
    v16 = operator new(0x1000uLL);
    v17 = v16;
    if (v9 != v10)
    {
      if (v10)
      {
        *(_QWORD *)v10 = v16;
        goto LABEL_10;
      }
      goto LABEL_107;
    }
    if (v11 == v12)
    {
      v70 = (v9 - v11) >> 2;
      if (v10 == v11)
        v70 = 1;
      if (v70 >> 61)
        goto LABEL_108;
      v71 = (v70 + 3) >> 2;
      v72 = 8 * v70;
      v73 = (char *)operator new(8 * v70);
      v38 = &v73[8 * v71];
      v74 = v38;
      if (v10 != v11)
      {
        v74 = &v38[8 * v14];
        v75 = &v73[8 * v71];
        v76 = v11;
        if ((unint64_t)(v13 - 8) < 0x38)
          goto LABEL_111;
        v77 = &v73[8 * v71];
        v75 = v77;
        v76 = v11;
        if ((unint64_t)(v77 - v11) < 0x20)
          goto LABEL_111;
        v78 = ((unint64_t)(v13 - 8) >> 3) + 1;
        v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v38[v79];
        v76 = &v11[v79];
        v80 = (__int128 *)(v11 + 16);
        v81 = v77 + 16;
        v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v83 = *v80;
          *(v81 - 1) = *(v80 - 1);
          *v81 = v83;
          v80 += 2;
          v81 += 2;
          v82 -= 4;
        }
        while (v82);
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_111:
          do
          {
            v84 = *(_QWORD *)v76;
            v76 += 8;
            *(_QWORD *)v75 = v84;
            v75 += 8;
          }
          while (v75 != v74);
        }
      }
      *(_QWORD *)a1 = v73;
      *(_QWORD *)(a1 + 8) = v38;
      *(_QWORD *)(a1 + 16) = v74;
      *(_QWORD *)(a1 + 24) = &v73[v72];
      if (v11)
      {
        operator delete(v11);
        v38 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v38 = v11;
    }
    *((_QWORD *)v38 - 1) = v17;
    v85 = *(char **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v85 - 8;
    v8 = *((_QWORD *)v85 - 1);
    *(_QWORD *)(a1 + 8) = v85;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v86 = *(char **)a1;
    if ((unint64_t)v85 > *(_QWORD *)a1)
    {
      v87 = (uint64_t)&v85[-*(_QWORD *)a1] >> 3;
      if (v87 >= -1)
        v88 = v87 + 1;
      else
        v88 = v87 + 2;
      v89 = v88 >> 1;
      v90 = -v89;
      v91 = &v85[-8 * v89];
      v92 = v5 - v85;
      if (v5 != v85)
      {
        memmove(&v85[-8 * v89], v85, v5 - v85);
        v85 = *(char **)(a1 + 8);
      }
      v5 = &v91[v92];
      v37 = &v85[8 * v90];
LABEL_32:
      *(_QWORD *)(a1 + 8) = v37;
      *(_QWORD *)(a1 + 16) = v5;
      goto LABEL_5;
    }
    v101 = (v5 - v86) >> 2;
    if (v5 == v86)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v85;
      v44 = v5 == v85;
      v5 = v105;
      if (v44)
        goto LABEL_105;
      v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
      v107 = v106 - 8;
      if ((unint64_t)(v106 - 8) >= 0x38)
      {
        v109 = &v104[8 * v102];
        v108 = v109;
        if ((unint64_t)(v109 - v85) >= 0x20)
        {
          v110 = (v107 >> 3) + 1;
          v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = &v105[v111];
          v112 = &v85[v111];
          v113 = (__int128 *)(v85 + 16);
          v114 = v109 + 16;
          v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          v85 = v112;
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_105:
            *(_QWORD *)a1 = v104;
            *(_QWORD *)(a1 + 8) = v105;
            *(_QWORD *)(a1 + 16) = v5;
            *(_QWORD *)(a1 + 24) = &v104[v103];
            if (v86)
            {
              operator delete(v86);
              v5 = *(char **)(a1 + 16);
            }
            goto LABEL_4;
          }
        }
      }
      else
      {
        v108 = &v104[8 * v102];
      }
      do
      {
        v117 = *(_QWORD *)v85;
        v85 += 8;
        *(_QWORD *)v108 = v117;
        v108 += 8;
      }
      while (v108 != v5);
      goto LABEL_105;
    }
LABEL_108:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v18 = v15 >> 2;
  if (v9 == v12)
    v19 = 1;
  else
    v19 = v18;
  if (v19 >> 61)
    goto LABEL_108;
  v20 = (char *)operator new(8 * v19);
  v21 = &v20[8 * v14];
  v22 = &v20[8 * v19];
  v23 = operator new(0x1000uLL);
  v24 = v23;
  if (v14 != v19)
    goto LABEL_21;
  if (v13 >= 1)
  {
    v25 = v14 + 2;
    if (v14 >= -1)
      v25 = v14 + 1;
    v21 -= 8 * (v25 >> 1);
LABEL_21:
    *(_QWORD *)v21 = v23;
    v26 = v21 + 8;
    if (v10 != v11)
      goto LABEL_48;
    goto LABEL_22;
  }
  v48 = v13 >> 2;
  if (v10 == v11)
    v48 = 1;
  if (v48 >> 61)
    goto LABEL_108;
  v49 = 8 * v48;
  v21 = (char *)operator new(8 * v48);
  operator delete(v20);
  v22 = &v21[v49];
  v50 = *(char **)(a1 + 8);
  v10 = *(char **)(a1 + 16);
  v20 = v21;
  *(_QWORD *)v21 = v24;
  v26 = v21 + 8;
  if (v10 != v50)
  {
    while (1)
    {
LABEL_48:
      if (v21 == v20)
      {
        if (v26 >= v22)
        {
          v55 = (v22 - v21) >> 2;
          if (v22 == v21)
            v55 = 1;
          if (v55 >> 61)
            goto LABEL_108;
          v56 = (v55 + 3) >> 2;
          v57 = 8 * v55;
          v58 = (char *)operator new(8 * v55);
          v20 = v58;
          v51 = &v58[8 * v56];
          v28 = v51;
          v59 = v26 - v21;
          if (v26 != v21)
          {
            v28 = &v51[v59 & 0xFFFFFFFFFFFFFFF8];
            v60 = v59 - 8;
            v61 = &v58[8 * v56];
            v62 = v21;
            if (v60 < 0x38)
              goto LABEL_112;
            v61 = &v58[8 * v56];
            v62 = v21;
            if ((unint64_t)(v61 - v21) < 0x20)
              goto LABEL_112;
            v63 = (v60 >> 3) + 1;
            v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
            v61 = &v51[v64];
            v62 = &v21[v64];
            v65 = (__int128 *)(v21 + 16);
            v66 = &v58[8 * v56 + 16];
            v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v68 = *v65;
              *((_OWORD *)v66 - 1) = *(v65 - 1);
              *(_OWORD *)v66 = v68;
              v65 += 2;
              v66 += 32;
              v67 -= 4;
            }
            while (v67);
            if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_112:
              do
              {
                v69 = *(_QWORD *)v62;
                v62 += 8;
                *(_QWORD *)v61 = v69;
                v61 += 8;
              }
              while (v61 != v28);
            }
          }
          v22 = &v58[v57];
          operator delete(v21);
        }
        else
        {
          v53 = (v22 - v26) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v28 = &v26[8 * (v54 >> 1)];
          v51 = &v21[8 * (v54 >> 1)];
          if (v26 == v21)
          {
            v20 = v26;
          }
          else
          {
            memmove(&v21[8 * (v54 >> 1)], v21, v26 - v21);
            v20 = v21;
          }
        }
      }
      else
      {
        v51 = v21;
        v28 = v26;
      }
      v52 = *((_QWORD *)v10 - 1);
      v10 -= 8;
      *((_QWORD *)v51 - 1) = v52;
      v27 = v51 - 8;
      v26 = v28;
      v21 = v27;
      if (v10 == *(char **)(a1 + 8))
        goto LABEL_23;
    }
  }
LABEL_22:
  v27 = v21;
  v28 = v26;
LABEL_23:
  v29 = *(char **)a1;
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v28;
  *(_QWORD *)(a1 + 24) = v22;
  if (v29)
    operator delete(v29);
}

void webrtc::AggregatedStats::ToStringWithMultiplier(webrtc::AggregatedStats *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  std::string *v7;
  int v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string *v17;
  _DWORD *v18;
  std::string::size_type v19;
  std::string *v20;
  int v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string *v24;
  _WORD *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *v29;
  _DWORD *v30;
  std::string::size_type v31;
  std::string *v32;
  int v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::string *v36;
  _WORD *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string *v41;
  _DWORD *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  int v46;
  std::string::size_type v47;
  std::string *v48;
  _BYTE *v49;
  std::string::size_type v50;
  std::string v51;

  memset(&v51, 0, sizeof(v51));
  if (&v51 > (std::string *)"periodic_samples:" || (char *)&v51.__r_.__value_.__r.__words[2] + 1 <= "periodic_samples:")
  {
    strcpy((char *)&v51, "periodic_samples:");
    *((_BYTE *)&v51.__r_.__value_.__s + 23) = 17;
    v7 = rtc::StringBuilder::operator<<(&v51, *(_QWORD *)this);
    v8 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
    if (v8 >= 0)
      v9 = 22;
    else
      v9 = (v7->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v8 >= 0)
      size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    else
      size = v7->__r_.__value_.__l.__size_;
    if (v9 - size >= 3)
    {
      if (v8 >= 0)
        v11 = v7;
      else
        v11 = (std::string *)v7->__r_.__value_.__r.__words[0];
      v12 = (std::string::size_type)v11 + size;
      if ((char *)v11 + size <= ", {" && (char *)v11->__r_.__value_.__r.__words + size + 3 > ", {")
        goto LABEL_123;
      *(_BYTE *)(v12 + 2) = 123;
      *(_WORD *)v12 = 8236;
      v14 = size + 3;
      if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
        v7->__r_.__value_.__l.__size_ = v14;
      else
        *((_BYTE *)&v7->__r_.__value_.__s + 23) = v14 & 0x7F;
      v11->__r_.__value_.__s.__data_[v14] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(v7, v9, size - v9 + 3, size, size, 0, 3uLL, ", {");
    }
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = 22;
    else
      v15 = (v51.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    else
      v16 = v51.__r_.__value_.__l.__size_;
    if (v15 - v16 >= 4)
    {
      v17 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v17 = (std::string *)v51.__r_.__value_.__r.__words[0];
      v18 = (_DWORD *)((char *)v17 + v16);
      if ((char *)v17 + v16 <= "min:" && v18 + 1 > (_DWORD *)"min:")
        goto LABEL_123;
      *v18 = 980314477;
      v19 = v16 + 4;
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        v51.__r_.__value_.__l.__size_ = v16 + 4;
      else
        *((_BYTE *)&v51.__r_.__value_.__s + 23) = v19 & 0x7F;
      v17->__r_.__value_.__s.__data_[v19] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v51, v15, v16 - v15 + 4, v16, v16, 0, 4uLL, "min:");
    }
    v20 = rtc::StringBuilder::operator<<(&v51, *((_DWORD *)this + 2) * a2);
    v21 = SHIBYTE(v20->__r_.__value_.__r.__words[2]);
    if (v21 >= 0)
      v22 = 22;
    else
      v22 = (v20->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v21 >= 0)
      v23 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    else
      v23 = v20->__r_.__value_.__l.__size_;
    if (v22 - v23 >= 2)
    {
      if (v21 >= 0)
        v24 = v20;
      else
        v24 = (std::string *)v20->__r_.__value_.__r.__words[0];
      v25 = (_WORD *)((char *)v24 + v23);
      if ((char *)v24 + v23 <= ", " && v25 + 1 > (_WORD *)", ")
        goto LABEL_123;
      *v25 = 8236;
      v26 = v23 + 2;
      if (SHIBYTE(v20->__r_.__value_.__r.__words[2]) < 0)
        v20->__r_.__value_.__l.__size_ = v26;
      else
        *((_BYTE *)&v20->__r_.__value_.__s + 23) = v26 & 0x7F;
      v24->__r_.__value_.__s.__data_[v26] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(v20, v22, v23 - v22 + 2, v23, v23, 0, 2uLL, ", ");
    }
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = 22;
    else
      v27 = (v51.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    else
      v28 = v51.__r_.__value_.__l.__size_;
    if (v27 - v28 >= 4)
    {
      v29 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v29 = (std::string *)v51.__r_.__value_.__r.__words[0];
      v30 = (_DWORD *)((char *)v29 + v28);
      if ((char *)v29 + v28 <= "avg:" && v30 + 1 > (_DWORD *)"avg:")
        goto LABEL_123;
      *v30 = 979859041;
      v31 = v28 + 4;
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        v51.__r_.__value_.__l.__size_ = v28 + 4;
      else
        *((_BYTE *)&v51.__r_.__value_.__s + 23) = v31 & 0x7F;
      v29->__r_.__value_.__s.__data_[v31] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v51, v27, v28 - v27 + 4, v28, v28, 0, 4uLL, "avg:");
    }
    v32 = rtc::StringBuilder::operator<<(&v51, *((_DWORD *)this + 4) * a2);
    v33 = SHIBYTE(v32->__r_.__value_.__r.__words[2]);
    if (v33 >= 0)
      v34 = 22;
    else
      v34 = (v32->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v33 >= 0)
      v35 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
    else
      v35 = v32->__r_.__value_.__l.__size_;
    if (v34 - v35 >= 2)
    {
      if (v33 >= 0)
        v36 = v32;
      else
        v36 = (std::string *)v32->__r_.__value_.__r.__words[0];
      v37 = (_WORD *)((char *)v36 + v35);
      if ((char *)v36 + v35 <= ", " && v37 + 1 > (_WORD *)", ")
        goto LABEL_123;
      *v37 = 8236;
      v38 = v35 + 2;
      if (SHIBYTE(v32->__r_.__value_.__r.__words[2]) < 0)
        v32->__r_.__value_.__l.__size_ = v38;
      else
        *((_BYTE *)&v32->__r_.__value_.__s + 23) = v38 & 0x7F;
      v36->__r_.__value_.__s.__data_[v38] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(v32, v34, v35 - v34 + 2, v35, v35, 0, 2uLL, ", ");
    }
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = 22;
    else
      v39 = (v51.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    else
      v40 = v51.__r_.__value_.__l.__size_;
    if (v39 - v40 >= 4)
    {
      v41 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v41 = (std::string *)v51.__r_.__value_.__r.__words[0];
      v42 = (_DWORD *)((char *)v41 + v40);
      if ((char *)v41 + v40 <= "max:" && v42 + 1 > (_DWORD *)"max:")
        goto LABEL_123;
      *v42 = 980967789;
      v43 = v40 + 4;
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        v51.__r_.__value_.__l.__size_ = v40 + 4;
      else
        *((_BYTE *)&v51.__r_.__value_.__s + 23) = v43 & 0x7F;
      v41->__r_.__value_.__s.__data_[v43] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v51, v39, v40 - v39 + 4, v40, v40, 0, 4uLL, "max:");
    }
    v44 = rtc::StringBuilder::operator<<(&v51, *((_DWORD *)this + 3) * a2);
    v45 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
    v46 = (char)v45;
    if ((v45 & 0x80u) == 0)
      v47 = 22;
    else
      v47 = (v44->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v45 & 0x80u) != 0)
      v45 = v44->__r_.__value_.__l.__size_;
    if (v47 == v45)
    {
      std::string::__grow_by_and_replace(v44, v47, 1uLL, v47, v47, 0, 1uLL, "}");
LABEL_122:
      *a3 = v51;
      return;
    }
    if (v46 >= 0)
      v48 = v44;
    else
      v48 = (std::string *)v44->__r_.__value_.__r.__words[0];
    v49 = (char *)v48 + v45;
    if ((char *)v48 + v45 > "}" || v49 + 1 <= "}")
    {
      *v49 = 125;
      v50 = v45 + 1;
      if (SHIBYTE(v44->__r_.__value_.__r.__words[2]) < 0)
        v44->__r_.__value_.__l.__size_ = v50;
      else
        *((_BYTE *)&v44->__r_.__value_.__s + 23) = v50 & 0x7F;
      v48->__r_.__value_.__s.__data_[v50] = 0;
      goto LABEL_122;
    }
  }
LABEL_123:
  __break(1u);
}

unint64_t webrtc::StatsCounter::TryProcess(webrtc::StatsCounter *this)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
  v3 = result / 0x3E8;
  if (result % 0x3E8 > 0x1F3)
    ++v3;
  if (-(uint64_t)result % 0x3E8uLL <= 0x1F4)
    v4 = 0;
  else
    v4 = -1;
  v5 = v4 - -(uint64_t)result / 0x3E8uLL;
  if ((result & 0x8000000000000000) == 0)
    v5 = v3;
  v6 = *((_QWORD *)this + 7);
  if (v6 == -1)
  {
    *((_QWORD *)this + 7) = v5;
    v6 = v5;
    v7 = 0;
    v8 = *((_QWORD *)this + 2);
    if (v8 > 0)
      return result;
  }
  else
  {
    v7 = v5 - v6;
    v8 = *((_QWORD *)this + 2);
    if (v7 < v8)
      return result;
  }
  v9 = v7 / v8;
  *((_QWORD *)this + 7) = v6 + v7 / v8 * v8;
  v27 = 0;
  result = (*(uint64_t (**)(webrtc::StatsCounter *, int *))(*(_QWORD *)this + 16))(this, &v27);
  if ((_DWORD)result)
  {
    v10 = v27;
    v11 = *((_QWORD *)this + 3);
    *(_DWORD *)v11 = v27;
    v12 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v11 + 8) += v10;
    *(_QWORD *)(v11 + 16) = v12 + 1;
    v13 = v10;
    v14 = v10;
    if (v12)
    {
      v14 = *(_DWORD *)(v11 + 24);
      v13 = *(_DWORD *)(v11 + 28);
    }
    if (v14 >= (int)v10)
      v14 = v10;
    if (v13 <= (int)v10)
      v13 = v10;
    *(_DWORD *)(v11 + 24) = v14;
    *(_DWORD *)(v11 + 28) = v13;
    result = *((_QWORD *)this + 6);
    if (result)
      result = (**(uint64_t (***)(unint64_t))result)(result);
  }
  if (*((_BYTE *)this + 8))
  {
    if (!*((_BYTE *)this + 64))
    {
      if (*(_QWORD *)(*((_QWORD *)this + 3) + 16))
      {
        v20 = v9 - (**((_QWORD **)this + 4) != 0);
        result = (*(uint64_t (**)(webrtc::StatsCounter *))(*(_QWORD *)this + 24))(this);
        if (v20 >= 1)
        {
          v21 = result;
          v22 = (int)result;
          do
          {
            v23 = *((_QWORD *)this + 3);
            *(_DWORD *)v23 = v21;
            v24 = *(_QWORD *)(v23 + 16);
            *(_QWORD *)(v23 + 8) += v22;
            *(_QWORD *)(v23 + 16) = v24 + 1;
            v25 = v21;
            v26 = v21;
            if (v24)
            {
              v26 = *(_DWORD *)(v23 + 24);
              v25 = *(_DWORD *)(v23 + 28);
            }
            if (v26 >= (int)v21)
              v26 = v21;
            if (v25 <= (int)v21)
              v25 = v21;
            *(_DWORD *)(v23 + 24) = v26;
            *(_DWORD *)(v23 + 28) = v25;
            result = *((_QWORD *)this + 6);
            if (result)
              result = (**(uint64_t (***)(unint64_t, unint64_t))result)(result, v21);
            --v20;
          }
          while (v20);
        }
      }
    }
  }
  v15 = (_QWORD *)*((_QWORD *)this + 4);
  v16 = (_QWORD *)v15[1];
  if (v16 != v15 + 2)
  {
    do
    {
      if ((uint64_t)v16[6] >= 1)
        v16[8] = v16[7];
      v16[6] = 0;
      v16[7] = 0;
      *((_DWORD *)v16 + 10) = 0x80000000;
      v17 = (_QWORD *)v16[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v16[2];
          v19 = *v18 == (_QWORD)v16;
          v16 = v18;
        }
        while (!v19);
      }
      v16 = v18;
    }
    while (v18 != v15 + 2);
  }
  *v15 = 0;
  return result;
}

unint64_t webrtc::StatsCounter::Add(webrtc::StatsCounter *this, int a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  result = webrtc::StatsCounter::TryProcess(this);
  v5 = *((_QWORD *)this + 4);
  v7 = (uint64_t **)(v5 + 16);
  v6 = *(uint64_t **)(v5 + 16);
  if (v6)
  {
    while (1)
    {
      v7 = (uint64_t **)v6;
      if (!*((_DWORD *)v6 + 8))
        break;
      v6 = (uint64_t *)*v6;
      if (!*v7)
        goto LABEL_4;
    }
    v8 = v6;
  }
  else
  {
LABEL_4:
    v8 = operator new(0x48uLL);
    v8[8] = 0;
    *((_QWORD *)v8 + 5) = 0x80000000;
    *((_QWORD *)v8 + 6) = 0;
    *((_QWORD *)v8 + 7) = 0;
    *((_QWORD *)v8 + 8) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v7;
    *v7 = (uint64_t *)v8;
    v9 = **(_QWORD **)(v5 + 8);
    v10 = (uint64_t *)v8;
    if (v9)
    {
      *(_QWORD *)(v5 + 8) = v9;
      v10 = *v7;
    }
    result = (unint64_t)std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 16), v10);
    ++*(_QWORD *)(v5 + 24);
  }
  v11 = *((_QWORD *)v8 + 7) + a2;
  ++*((_QWORD *)v8 + 6);
  *((_QWORD *)v8 + 7) = v11;
  v12 = v8[10];
  if (v12 <= a2)
    v12 = a2;
  v8[10] = v12;
  ++*(_QWORD *)v5;
  if (*((_BYTE *)this + 64))
  {
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
    v13 = result / 0x3E8;
    if (result % 0x3E8 > 0x1F3)
      ++v13;
    if (-(uint64_t)result % 0x3E8uLL <= 0x1F4)
      v14 = 0;
    else
      v14 = -1;
    if ((result & 0x8000000000000000) != 0)
      v13 = v14 - -(uint64_t)result / 0x3E8uLL;
    if ((int64_t)(v13 - *((_QWORD *)this + 9)) >= *((_QWORD *)this + 10))
    {
      *((_BYTE *)this + 64) = 0;
      *((_QWORD *)this + 10) = 0;
    }
  }
  return result;
}

unint64_t webrtc::StatsCounter::Set(unint64_t this, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;

  v5 = this;
  if (!*(_BYTE *)(this + 64))
    goto LABEL_13;
  v6 = *(_QWORD *)(this + 32);
  v8 = (uint64_t **)(v6 + 16);
  v7 = *(uint64_t **)(v6 + 16);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = *((_DWORD *)v7 + 8);
        if (v10 <= a3)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= a3)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(v6 + 16);
LABEL_9:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x48uLL);
    *((_DWORD *)v9 + 8) = a3;
    v9[5] = (uint64_t *)0x80000000;
    v9[6] = 0;
    v9[7] = 0;
    v9[8] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v8 = (uint64_t *)v9;
    v12 = **(_QWORD **)(v6 + 8);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(v6 + 8) = v12;
      v13 = *v8;
    }
    this = (unint64_t)std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 16), v13);
    ++*(_QWORD *)(v6 + 24);
  }
  if (v9[8] != a2)
  {
LABEL_13:
    this = webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)v5);
    v14 = *(_QWORD *)(v5 + 32);
    v16 = (uint64_t **)(v14 + 16);
    v15 = *(uint64_t **)(v14 + 16);
    if (v15)
    {
      while (1)
      {
        while (1)
        {
          v17 = (uint64_t **)v15;
          v18 = *((_DWORD *)v15 + 8);
          if (v18 <= a3)
            break;
          v15 = *v17;
          v16 = v17;
          if (!*v17)
            goto LABEL_20;
        }
        if (v18 >= a3)
          break;
        v15 = v17[1];
        if (!v15)
        {
          v16 = v17 + 1;
          goto LABEL_20;
        }
      }
    }
    else
    {
      v17 = (uint64_t **)(v14 + 16);
LABEL_20:
      v19 = (uint64_t *)v17;
      v17 = (uint64_t **)operator new(0x48uLL);
      *((_DWORD *)v17 + 8) = a3;
      v17[5] = (uint64_t *)0x80000000;
      v17[6] = 0;
      v17[7] = 0;
      v17[8] = 0;
      *v17 = 0;
      v17[1] = 0;
      v17[2] = v19;
      *v16 = (uint64_t *)v17;
      v20 = **(_QWORD **)(v14 + 8);
      v21 = (uint64_t *)v17;
      if (v20)
      {
        *(_QWORD *)(v14 + 8) = v20;
        v21 = *v16;
      }
      this = (unint64_t)std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v14 + 16), v21);
      ++*(_QWORD *)(v14 + 24);
    }
    v17[6] = (uint64_t *)((char *)v17[6] + 1);
    v17[7] = a2;
    ++*(_QWORD *)v14;
    if (*(_BYTE *)(v5 + 64))
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 40) + 16))(*(_QWORD *)(v5 + 40));
      v22 = this / 0x3E8;
      if (this % 0x3E8 > 0x1F3)
        ++v22;
      if (-(uint64_t)this % 0x3E8uLL <= 0x1F4)
        v23 = 0;
      else
        v23 = -1;
      if ((this & 0x8000000000000000) != 0)
        v22 = v23 - -(uint64_t)this / 0x3E8uLL;
      if ((int64_t)(v22 - *(_QWORD *)(v5 + 72)) >= *(_QWORD *)(v5 + 80))
      {
        *(_BYTE *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 80) = 0;
      }
    }
  }
  return this;
}

BOOL webrtc::AvgCounter::GetMetric(webrtc::AvgCounter *this, int *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;

  v2 = (uint64_t *)*((_QWORD *)this + 4);
  v3 = *v2;
  if (*v2)
  {
    v4 = (_QWORD *)v2[1];
    v5 = v2 + 2;
    if (v4 == v5)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = (_QWORD *)v4[1];
        v8 = v4;
        if (v7)
        {
          do
          {
            v9 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v8[2];
            v10 = *v9 == (_QWORD)v8;
            v8 = v9;
          }
          while (!v10);
        }
        v6 += v4[7];
        v4 = v9;
      }
      while (v9 != v5);
    }
    if (v3 >= 0)
      v11 = v3;
    else
      v11 = v3 + 1;
    *a2 = (v6 + (v11 >> 1)) / v3;
  }
  return v3 != 0;
}

uint64_t webrtc::AvgCounter::GetValueForEmptyInterval(webrtc::AvgCounter *this)
{
  return **((unsigned int **)this + 3);
}

BOOL webrtc::MaxCounter::GetMetric(webrtc::MaxCounter *this, int *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v2 = (uint64_t *)*((_QWORD *)this + 4);
  v3 = *v2;
  if (*v2)
  {
    v4 = (_QWORD *)v2[1];
    v5 = v2 + 2;
    v6 = 0x80000000;
    if (v4 != v5)
    {
      do
      {
        if (*((_DWORD *)v4 + 10) > v6)
          v6 = *((_DWORD *)v4 + 10);
        v8 = (_QWORD *)v4[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v4[2];
            v10 = *v9 == (_QWORD)v4;
            v4 = v9;
          }
          while (!v10);
        }
        v4 = v9;
      }
      while (v9 != v5);
    }
    *a2 = v6;
  }
  return v3 != 0;
}

uint64_t webrtc::MaxCounter::GetValueForEmptyInterval(webrtc::MaxCounter *this)
{
  return 0;
}

BOOL webrtc::RateCounter::GetMetric(webrtc::RateCounter *this, int *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (uint64_t *)*((_QWORD *)this + 4);
  v3 = *v2;
  if (*v2)
  {
    v4 = (_QWORD *)v2[1];
    v5 = v2 + 2;
    if (v4 == v5)
    {
      v11 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = (_QWORD *)v4[1];
        v8 = v4;
        if (v7)
        {
          do
          {
            v9 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v8[2];
            v10 = *v9 == (_QWORD)v8;
            v8 = v9;
          }
          while (!v10);
        }
        v6 += v4[7];
        v4 = v9;
      }
      while (v9 != v5);
      v11 = 1000 * v6;
    }
    v12 = *((_QWORD *)this + 2);
    if (v12 >= 0)
      v13 = *((_QWORD *)this + 2);
    else
      v13 = v12 + 1;
    *a2 = (v11 + (v13 >> 1)) / v12;
  }
  return v3 != 0;
}

uint64_t webrtc::RateCounter::GetValueForEmptyInterval(webrtc::RateCounter *this)
{
  return 0;
}

uint64_t webrtc::RateAccCounter::GetMetric(webrtc::RateAccCounter *this, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD **)(v2 + 8);
  v4 = (_QWORD *)(v2 + 16);
  if (v3 == v4)
    return 0;
  v5 = 0;
  v6 = 0;
  do
  {
    if ((uint64_t)v3[6] >= 1)
    {
      v7 = v3[7] - v3[8];
      v6 += v7 >= 0;
      v5 += v7 & ~(v7 >> 63);
    }
    v8 = (_QWORD *)v3[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v3[2];
        v10 = *v9 == (_QWORD)v3;
        v3 = v9;
      }
      while (!v10);
    }
    v3 = v9;
  }
  while (v9 != v4);
  v11 = 0;
  if (v6 < 1)
    return v11;
  if (v5 < 0)
    return v11;
  if (!v5)
  {
    v11 = *((unsigned __int8 *)this + 8);
    if (!*((_BYTE *)this + 8))
      return v11;
  }
  v13 = 1000 * v5;
  v14 = *((_QWORD *)this + 2);
  if (v14 >= 0)
    v15 = *((_QWORD *)this + 2);
  else
    v15 = v14 + 1;
  *a2 = (v13 + (v15 >> 1)) / v14;
  return 1;
}

uint64_t webrtc::RateAccCounter::GetValueForEmptyInterval(webrtc::RateAccCounter *this)
{
  return 0;
}

void webrtc::AvgCounter::~AvgCounter(webrtc::AvgCounter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0C1308;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v3 + 8, *(_QWORD **)(v3 + 16));
    MEMORY[0x20BD0ADEC](v3, 0x1020C40C0D28DD2);
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    MEMORY[0x20BD0ADEC](v4, 0x1000C407607B2BCLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0C1308;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v3 + 8, *(_QWORD **)(v3 + 16));
    MEMORY[0x20BD0ADEC](v3, 0x1020C40C0D28DD2);
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    MEMORY[0x20BD0ADEC](v4, 0x1000C407607B2BCLL);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::MaxCounter::~MaxCounter(webrtc::MaxCounter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0C1308;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v3 + 8, *(_QWORD **)(v3 + 16));
    MEMORY[0x20BD0ADEC](v3, 0x1020C40C0D28DD2);
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    MEMORY[0x20BD0ADEC](v4, 0x1000C407607B2BCLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0C1308;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v3 + 8, *(_QWORD **)(v3 + 16));
    MEMORY[0x20BD0ADEC](v3, 0x1020C40C0D28DD2);
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    MEMORY[0x20BD0ADEC](v4, 0x1000C407607B2BCLL);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RateCounter::~RateCounter(webrtc::RateCounter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0C1308;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v3 + 8, *(_QWORD **)(v3 + 16));
    MEMORY[0x20BD0ADEC](v3, 0x1020C40C0D28DD2);
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    MEMORY[0x20BD0ADEC](v4, 0x1000C407607B2BCLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0C1308;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v3 + 8, *(_QWORD **)(v3 + 16));
    MEMORY[0x20BD0ADEC](v3, 0x1020C40C0D28DD2);
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    MEMORY[0x20BD0ADEC](v4, 0x1000C407607B2BCLL);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RateAccCounter::~RateAccCounter(webrtc::RateAccCounter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0C1308;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v3 + 8, *(_QWORD **)(v3 + 16));
    MEMORY[0x20BD0ADEC](v3, 0x1020C40C0D28DD2);
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    MEMORY[0x20BD0ADEC](v4, 0x1000C407607B2BCLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0C1308;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v3 + 8, *(_QWORD **)(v3 + 16));
    MEMORY[0x20BD0ADEC](v3, 0x1020C40C0D28DD2);
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    MEMORY[0x20BD0ADEC](v4, 0x1000C407607B2BCLL);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::StreamInterface::Flush(rtc::StreamInterface *this)
{
  return 0;
}

std::string *cricket::StreamParams::operator=(std::string *this, std::string *a2)
{
  std::string *v3;
  __int128 v4;
  size_t size;
  std::string *v6;
  char v7;
  __int128 v8;
  const std::string::value_type *data;
  size_t v10;

  if (this != a2)
  {
    v3 = a2;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      else
      {
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
        size = v3->__r_.__value_.__l.__size_;
      }
      std::string::__assign_no_alias<false>(this, (const std::string::value_type *)a2, size);
    }
    else if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>(this[1].__r_.__value_.__r.__words, v3[1].__r_.__value_.__l.__data_, (char *)v3[1].__r_.__value_.__l.__size_, (uint64_t)(v3[1].__r_.__value_.__l.__size_ - v3[1].__r_.__value_.__r.__words[0]) >> 2);
    std::vector<cricket::SsrcGroup>::__assign_with_size[abi:sn180100]<cricket::SsrcGroup*,cricket::SsrcGroup*>((std::string **)&this[2], (uint64_t)v3[2].__r_.__value_.__l.__data_, v3[2].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2].__r_.__value_.__l.__size_ - v3[2].__r_.__value_.__r.__words[0]) >> 4));
    v6 = this + 3;
    v7 = HIBYTE(v3[3].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
    {
      if (v7 >= 0)
        data = (const std::string::value_type *)&v3[3];
      else
        data = v3[3].__r_.__value_.__l.__data_;
      if (v7 >= 0)
        v10 = HIBYTE(v3[3].__r_.__value_.__r.__words[2]);
      else
        v10 = v3[3].__r_.__value_.__l.__size_;
      std::string::__assign_no_alias<false>(v6, data, v10);
    }
    else if ((*((_BYTE *)&v3[3].__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v6, v3[3].__r_.__value_.__l.__data_, v3[3].__r_.__value_.__l.__size_);
    }
    else
    {
      v8 = *(_OWORD *)&v3[3].__r_.__value_.__l.__data_;
      this[3].__r_.__value_.__r.__words[2] = v3[3].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
    }
    std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)&this[4], (__int128 *)v3[4].__r_.__value_.__l.__data_, (__int128 *)v3[4].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[4].__r_.__value_.__l.__size_ - v3[4].__r_.__value_.__r.__words[0]) >> 3));
    std::vector<cricket::RidDescription>::__assign_with_size[abi:sn180100]<cricket::RidDescription*,cricket::RidDescription*>((uint64_t)&this[5], (const cricket::RidDescription *)v3[5].__r_.__value_.__l.__data_, (const cricket::RidDescription *)v3[5].__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3[5].__r_.__value_.__l.__size_ - v3[5].__r_.__value_.__r.__words[0]) >> 4));
  }
  return this;
}

unint64_t cricket::SsrcGroup::ToString(cricket::SsrcGroup *this, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  char *v9;
  char *v10;
  size_t v11;
  int64_t v12;
  _DWORD *v13;
  int *v14;
  int *v15;
  uint64_t v16;
  size_t v17;
  int v18;
  int v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  char *v27;
  unint64_t result;
  size_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *__s;
  uint64_t v34;
  size_t v35;
  char v36[1024];
  uint64_t v37;

  v2 = a2;
  v37 = *MEMORY[0x24BDAC8D0];
  __s = v36;
  v34 = 1024;
  strcpy(v36, "{semantics:");
  if (*((char *)a2 + 23) < 0)
  {
    v4 = a2[1];
    if ((v4 & 0x8000000000000000) != 0 || (a2 = (_QWORD *)*a2, v4) && !a2)
    {
LABEL_40:
      __break(1u);
LABEL_41:
      abort();
    }
  }
  else
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  if (v4 >= 0x3F4)
    v5 = 1012;
  else
    v5 = v4;
  v6 = v5 + 11;
  v7 = v4 < 0x3F4;
  if (v4 < 0x3F4)
    v8 = v5 + 12;
  else
    v8 = v5 + 11;
  memcpy(&v36[11], a2, v5);
  v36[v6] = 0;
  memcpy(&v36[v6], ";", v7);
  v36[v8] = 0;
  v9 = (char *)v2[3];
  v10 = (char *)v2[4];
  if (1023 - v8 >= 7)
    v11 = 7;
  else
    v11 = 1023 - v8;
  memcpy(&v36[v8], "ssrcs:[", v11);
  v35 = v11 + v8;
  v36[v11 + v8] = 0;
  v12 = v10 - v9;
  if (v10 == v9)
    v13 = 0;
  else
    v13 = v9;
  if (v10 != v9)
  {
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", *(_DWORD *)v9);
    if (v12 != 4)
    {
      v14 = (_DWORD *)((char *)v13 + v12);
      v15 = (int *)(v9 + 4);
      do
      {
        v16 = v34;
        v17 = v35 + 1;
        v19 = *v15++;
        v18 = v19;
        memcpy(&__s[v35], ",", v34 != v35 + 1);
        v20 = v35;
        if (v16 != v17)
          v20 = v35 + 1;
        v35 = v20;
        __s[v20] = 0;
        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", v18);
      }
      while (v15 != v14);
    }
  }
  v21 = v34;
  v22 = v35 + 1;
  memcpy(&__s[v35], "]", v34 != v35 + 1);
  v23 = v35;
  if (v21 != v22)
    v23 = v35 + 1;
  v35 = v23;
  __s[v23] = 0;
  v24 = v34;
  v25 = v35 + 1;
  memcpy(&__s[v35], "}", v34 != v35 + 1);
  v26 = v35;
  if (v24 != v25)
    v26 = v35 + 1;
  v35 = v26;
  __s[v26] = 0;
  v27 = __s;
  if (!__s)
    goto LABEL_40;
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_41;
  v29 = result;
  if (result <= 0x16)
  {
    *((_BYTE *)this + 23) = result;
    v30 = (char *)this + result;
    if (this > (cricket::SsrcGroup *)v27)
      goto LABEL_37;
    goto LABEL_36;
  }
  v31 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((result | 7) != 0x17)
    v31 = result | 7;
  v32 = v31 + 1;
  result = (unint64_t)operator new(v31 + 1);
  *((_QWORD *)this + 1) = v29;
  *((_QWORD *)this + 2) = v32 | 0x8000000000000000;
  *(_QWORD *)this = result;
  this = (cricket::SsrcGroup *)result;
  v30 = (char *)(result + v29);
  if (result <= (unint64_t)v27)
  {
LABEL_36:
    if (v30 <= v27)
      goto LABEL_37;
    goto LABEL_40;
  }
LABEL_37:
  if (v29)
    result = (unint64_t)memmove(this, v27, v29);
  *v30 = 0;
  return result;
}

std::string *cricket::StreamParams::StreamParams(std::string *this, const cricket::StreamParams *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  _BYTE *v19;
  void *v20;
  std::string::size_type v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  char *v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  __int128 *v37;
  std::string *v38;
  __int128 v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v19 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v19 - v6;
    if (v19 == v6)
    {
LABEL_3:
      this[2].__r_.__value_.__r.__words[0] = 0;
      this[2].__r_.__value_.__l.__size_ = 0;
      this[2].__r_.__value_.__r.__words[2] = 0;
      v8 = *((_QWORD *)a2 + 6);
      v9 = *((_QWORD *)a2 + 7);
      v10 = v9 - v8;
      if (v9 == v8)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      goto LABEL_3;
  }
  if (v7 < 0)
    goto LABEL_20;
  v20 = operator new(v7);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v20;
  v21 = (std::string::size_type)v20 + 4 * (v7 >> 2);
  this[1].__r_.__value_.__r.__words[2] = v21;
  memcpy(v20, v6, v7);
  this[1].__r_.__value_.__l.__size_ = v21;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  v8 = *((_QWORD *)a2 + 6);
  v9 = *((_QWORD *)a2 + 7);
  v10 = v9 - v8;
  if (v9 == v8)
  {
LABEL_4:
    v11 = this + 3;
    if ((*((char *)a2 + 95) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_11:
  v22 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 4);
  if (v22 >= 0x555555555555556)
    goto LABEL_20;
  v23 = (char *)operator new(v10);
  v24 = 0;
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  this[2].__r_.__value_.__l.__size_ = (std::string::size_type)v23;
  this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)&v23[48 * v22];
  do
  {
    v27 = (std::string *)&v23[v24];
    v28 = (__int128 *)(v8 + v24);
    if (*(char *)(v8 + v24 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
    }
    else
    {
      v29 = *v28;
      v27->__r_.__value_.__r.__words[2] = *((_QWORD *)v28 + 2);
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
    }
    v30 = &v23[v24];
    *((_QWORD *)v30 + 3) = 0;
    *((_QWORD *)v30 + 4) = 0;
    *((_QWORD *)v30 + 5) = 0;
    v32 = *(_BYTE **)(v8 + v24 + 24);
    v31 = *(_BYTE **)(v8 + v24 + 32);
    v33 = v31 - v32;
    if (v31 != v32)
    {
      if (v33 < 0)
        goto LABEL_20;
      v25 = (char *)operator new(v31 - v32);
      *((_QWORD *)v30 + 3) = v25;
      *((_QWORD *)v30 + 4) = v25;
      v26 = &v25[4 * (v33 >> 2)];
      *((_QWORD *)v30 + 5) = v26;
      memcpy(v25, v32, v33);
      *((_QWORD *)v30 + 4) = v26;
    }
    v24 += 48;
  }
  while (v8 + v24 != v9);
  this[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v23[v24];
  v11 = this + 3;
  if ((*((char *)a2 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    v12 = *(_OWORD *)((char *)a2 + 72);
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    this[4].__r_.__value_.__r.__words[0] = 0;
    this[4].__r_.__value_.__l.__size_ = 0;
    this[4].__r_.__value_.__r.__words[2] = 0;
    v13 = *((_QWORD *)a2 + 12);
    v14 = *((_QWORD *)a2 + 13);
    v15 = v14 - v13;
    if (v14 == v13)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  v13 = *((_QWORD *)a2 + 12);
  v14 = *((_QWORD *)a2 + 13);
  v15 = v14 - v13;
  if (v14 == v13)
  {
LABEL_6:
    this[5].__r_.__value_.__r.__words[0] = 0;
    this[5].__r_.__value_.__l.__size_ = 0;
    this[5].__r_.__value_.__r.__words[2] = 0;
    v16 = *((_QWORD *)a2 + 15);
    v17 = *((_QWORD *)a2 + 16);
    v18 = v17 - v16;
    if (v17 == v16)
      return this;
    goto LABEL_29;
  }
LABEL_23:
  v34 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
  if (v34 >= 0xAAAAAAAAAAAAAABLL)
    goto LABEL_20;
  v35 = (char *)operator new(v15);
  v36 = 0;
  this[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)v35;
  this[4].__r_.__value_.__r.__words[2] = (std::string::size_type)&v35[24 * v34];
  do
  {
    while (1)
    {
      v37 = (__int128 *)(v13 + v36);
      v38 = (std::string *)&v35[v36];
      if ((*(char *)(v13 + v36 + 23) & 0x80000000) == 0)
        break;
      std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)v37, *((_QWORD *)v37 + 1));
      v36 += 24;
      if (v13 + v36 == v14)
        goto LABEL_28;
    }
    v39 = *v37;
    v38->__r_.__value_.__r.__words[2] = *((_QWORD *)v37 + 2);
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
    v36 += 24;
  }
  while (v13 + v36 != v14);
LABEL_28:
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)&v35[v36];
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  v16 = *((_QWORD *)a2 + 15);
  v17 = *((_QWORD *)a2 + 16);
  v18 = v17 - v16;
  if (v17 != v16)
  {
LABEL_29:
    v40 = 0xCCCCCCCCCCCCCCCDLL * (v18 >> 4);
    if (v40 < 0x333333333333334)
    {
      v41 = (char *)operator new(v18);
      v42 = 0;
      this[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
      this[5].__r_.__value_.__l.__size_ = (std::string::size_type)v41;
      this[5].__r_.__value_.__r.__words[2] = (std::string::size_type)&v41[80 * v40];
      do
      {
        cricket::RidDescription::RidDescription((std::string *)&v41[v42], (const cricket::RidDescription *)(v16 + v42));
        v42 += 80;
      }
      while (v16 + v42 != v17);
      this[5].__r_.__value_.__l.__size_ = (std::string::size_type)&v41[v42];
      return this;
    }
LABEL_20:
    abort();
  }
  return this;
}

void cricket::StreamParams::~StreamParams(cricket::StreamParams *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    v3 = *((_QWORD *)this + 16);
    v4 = (void *)*((_QWORD *)this + 15);
    if (v3 != v2)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3 - 24, *(_QWORD *)(v3 - 16));
        v5 = *(void **)(v3 - 48);
        if (v5)
        {
          *(_QWORD *)(v3 - 40) = v5;
          operator delete(v5);
        }
        if (*(char *)(v3 - 57) < 0)
          operator delete(*(void **)(v3 - 80));
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v2;
    operator delete(v4);
  }
  v6 = *((_QWORD *)this + 12);
  if (v6)
  {
    v7 = *((_QWORD *)this + 13);
    v8 = (void *)*((_QWORD *)this + 12);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v6;
    operator delete(v8);
  }
  if (*((char *)this + 95) < 0)
  {
    operator delete(*((void **)this + 9));
    v9 = (char *)*((_QWORD *)this + 6);
    if (!v9)
    {
LABEL_21:
      v10 = (void *)*((_QWORD *)this + 3);
      if (!v10)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  else
  {
    v9 = (char *)*((_QWORD *)this + 6);
    if (!v9)
      goto LABEL_21;
  }
  v11 = (char *)*((_QWORD *)this + 7);
  if (v11 == v9)
  {
    *((_QWORD *)this + 7) = v9;
    operator delete(v9);
    v10 = (void *)*((_QWORD *)this + 3);
    if (!v10)
      goto LABEL_23;
LABEL_22:
    *((_QWORD *)this + 4) = v10;
    operator delete(v10);
    goto LABEL_23;
  }
  do
  {
    v12 = (void *)*((_QWORD *)v11 - 3);
    if (v12)
    {
      *((_QWORD *)v11 - 2) = v12;
      operator delete(v12);
    }
    if (*(v11 - 25) < 0)
      operator delete(*((void **)v11 - 6));
    v11 -= 48;
  }
  while (v11 != v9);
  v13 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 7) = v9;
  operator delete(v13);
  v10 = (void *)*((_QWORD *)this + 3);
  if (v10)
    goto LABEL_22;
LABEL_23:
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t cricket::StreamParams::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void **v11;
  __int128 v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v6 = (void **)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(void **)(a1 + 48);
    if (v8 != v7)
    {
      do
      {
        v10 = *(void **)(v8 - 24);
        if (v10)
        {
          *(_QWORD *)(v8 - 16) = v10;
          operator delete(v10);
        }
        if (*(char *)(v8 - 25) < 0)
          operator delete(*(void **)(v8 - 48));
        v8 -= 48;
      }
      while (v8 != v7);
      v9 = *v6;
    }
    *(_QWORD *)(a1 + 56) = v7;
    operator delete(v9);
    *v6 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  v11 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v11);
  v12 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v11 = v12;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  v13 = (void **)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 96);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 104);
    v16 = *(void **)(a1 + 96);
    if (v15 != v14)
    {
      do
      {
        if (*(char *)(v15 - 1) < 0)
          operator delete(*(void **)(v15 - 24));
        v15 -= 24;
      }
      while (v15 != v14);
      v16 = *v13;
    }
    *(_QWORD *)(a1 + 104) = v14;
    operator delete(v16);
    *v13 = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  v17 = (void **)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 120);
  if (v18)
  {
    v19 = *(_QWORD *)(a1 + 128);
    v20 = *(void **)(a1 + 120);
    if (v19 != v18)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v19 - 24, *(_QWORD *)(v19 - 16));
        v21 = *(void **)(v19 - 48);
        if (v21)
        {
          *(_QWORD *)(v19 - 40) = v21;
          operator delete(v21);
        }
        if (*(char *)(v19 - 57) < 0)
          operator delete(*(void **)(v19 - 80));
        v19 -= 80;
      }
      while (v19 != v18);
      v20 = *v17;
    }
    *(_QWORD *)(a1 + 128) = v18;
    operator delete(v20);
    *v17 = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  return a1;
}

unint64_t cricket::StreamParams::ToString@<X0>(cricket::StreamParams *this@<X0>, char *a2@<X8>)
{
  unint64_t v4;
  cricket::StreamParams *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  size_t v12;
  int64_t v13;
  _DWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  const void *p_src;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  size_t v39;
  size_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  const void *v47;
  size_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  char *v57;
  size_t v58;
  char *v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const void **v64;
  const void **v65;
  size_t v66;
  size_t v67;
  const void *v68;
  char *v69;
  char *v70;
  size_t v71;
  char *v72;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t result;
  size_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  size_t v97;
  char *v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *__s;
  uint64_t v104;
  uint64_t v105;
  void *__src;
  size_t v107;
  unsigned __int8 v108;
  char v109[2048];
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  __s = v109;
  v104 = 2048;
  strcpy(v109, "{");
  if (*((char *)this + 23) < 0)
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
    {
      strcpy(&v109[1], "id:");
      v105 = 4;
      if ((v4 & 0x8000000000000000) != 0)
        goto LABEL_159;
      v5 = *(cricket::StreamParams **)this;
      if (!*(_QWORD *)this)
        goto LABEL_159;
      goto LABEL_7;
    }
LABEL_14:
    v9 = 1;
    goto LABEL_15;
  }
  v4 = *((unsigned __int8 *)this + 23);
  if (!*((_BYTE *)this + 23))
    goto LABEL_14;
  strcpy(&v109[1], "id:");
  v105 = 4;
  v5 = this;
LABEL_7:
  if (v4 >= 0x7FB)
    v6 = 2043;
  else
    v6 = v4;
  v7 = v6 + 4;
  v8 = v4 < 0x7FB;
  if (v4 < 0x7FB)
    v9 = v6 + 5;
  else
    v9 = v6 + 4;
  memcpy(&v109[4], v5, v6);
  v109[v7] = 0;
  memcpy(&v109[v7], ";", v8);
  v109[v9] = 0;
LABEL_15:
  v10 = (char *)*((_QWORD *)this + 3);
  v11 = (char *)*((_QWORD *)this + 4);
  if ((unint64_t)(2047 - v9) >= 7)
    v12 = 7;
  else
    v12 = 2047 - v9;
  memcpy(&v109[v9], "ssrcs:[", v12);
  v105 = v9 + v12;
  v109[v9 + v12] = 0;
  v13 = v11 - v10;
  if (v11 == v10)
    v14 = 0;
  else
    v14 = v10;
  if (v11 != v10)
  {
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", *(_DWORD *)v10);
    if (v13 != 4)
    {
      v15 = (int *)(v10 + 4);
      do
      {
        v16 = v104;
        v17 = v105 + 1;
        v19 = *v15++;
        v18 = v19;
        memcpy(&__s[v105], ",", v104 != v105 + 1);
        v20 = v105;
        if (v16 != v17)
          v20 = v105 + 1;
        v105 = v20;
        __s[v20] = 0;
        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", v18);
      }
      while (v15 != (_DWORD *)((char *)v14 + v13));
    }
  }
  v21 = v104;
  v22 = v105 + 1;
  memcpy(&__s[v105], "]", v104 != v105 + 1);
  v23 = v105;
  if (v21 != v22)
    v23 = v105 + 1;
  v105 = v23;
  __s[v23] = 0;
  v24 = v104;
  v25 = v105 + 1;
  memcpy(&__s[v105], ";", v104 != v105 + 1);
  v26 = v105;
  if (v24 != v25)
    v26 = v105 + 1;
  v105 = v26;
  __s[v26] = 0;
  if ((unint64_t)(v104 + ~v105) >= 0xC)
    v27 = 12;
  else
    v27 = v104 + ~v105;
  v28 = (_QWORD *)*((_QWORD *)this + 6);
  v29 = *((_QWORD *)this + 7);
  memcpy(&__s[v105], "ssrc_groups:", v27);
  v105 += v27;
  __s[v105] = 0;
  v30 = v29 - (_QWORD)v28;
  if (v30)
    v31 = v28;
  else
    v31 = 0;
  if (v30)
  {
    __s[v105] = 0;
    cricket::SsrcGroup::ToString((cricket::SsrcGroup *)&__src, v28);
    if ((char)v108 < 0)
    {
      v32 = v107;
      if ((v107 & 0x8000000000000000) != 0)
        goto LABEL_159;
      p_src = __src;
      if (v107)
      {
        if (!__src)
          goto LABEL_159;
      }
    }
    else
    {
      v32 = v108;
      p_src = &__src;
    }
    if (v32 >= v104 + ~v105)
      v34 = v104 + ~v105;
    else
      v34 = v32;
    memcpy(&__s[v105], p_src, v34);
    v105 += v34;
    __s[v105] = 0;
    if ((char)v108 < 0)
    {
      operator delete(__src);
      if (v30 == 48)
        goto LABEL_50;
    }
    else if (v30 == 48)
    {
      goto LABEL_50;
    }
    v41 = (_QWORD *)((char *)v31 + v30);
    v42 = v28 + 6;
    do
    {
      v43 = v104;
      v44 = v105 + 1;
      memcpy(&__s[v105], ",", v104 != v105 + 1);
      v45 = v105;
      if (v43 != v44)
        v45 = v105 + 1;
      v105 = v45;
      __s[v45] = 0;
      cricket::SsrcGroup::ToString((cricket::SsrcGroup *)&__src, v42);
      if ((char)v108 < 0)
      {
        v46 = v107;
        if ((v107 & 0x8000000000000000) != 0)
          goto LABEL_159;
        v47 = __src;
        if (v107)
        {
          if (!__src)
            goto LABEL_159;
        }
      }
      else
      {
        v46 = v108;
        v47 = &__src;
      }
      if (v46 >= v104 + ~v105)
        v48 = v104 + ~v105;
      else
        v48 = v46;
      memcpy(&__s[v105], v47, v48);
      v105 += v48;
      __s[v105] = 0;
      if ((char)v108 < 0)
        operator delete(__src);
      v42 += 6;
    }
    while (v42 != v41);
  }
LABEL_50:
  v35 = v104;
  v36 = v105 + 1;
  memcpy(&__s[v105], ";", v104 != v105 + 1);
  v37 = v105;
  if (v35 != v36)
    v37 = v105 + 1;
  v105 = v37;
  __s[v37] = 0;
  if (*((char *)this + 95) < 0)
  {
    if (!*((_QWORD *)this + 10))
      goto LABEL_84;
  }
  else if (!*((_BYTE *)this + 95))
  {
    goto LABEL_84;
  }
  v38 = (_QWORD *)((char *)this + 72);
  if ((unint64_t)(v104 + ~v105) >= 6)
    v39 = 6;
  else
    v39 = v104 + ~v105;
  memcpy(&__s[v105], "cname:", v39);
  v105 += v39;
  __s[v105] = 0;
  if (*((char *)this + 95) < 0)
  {
    v40 = *((_QWORD *)this + 10);
    if ((v40 & 0x8000000000000000) != 0)
      goto LABEL_159;
    v38 = (_QWORD *)*v38;
    if (v40)
    {
      if (!v38)
        goto LABEL_159;
    }
  }
  else
  {
    v40 = *((unsigned __int8 *)this + 95);
  }
  if (v40 >= v104 + ~v105)
    v49 = v104 + ~v105;
  else
    v49 = v40;
  memcpy(&__s[v105], v38, v49);
  v105 += v49;
  __s[v105] = 0;
  v50 = v104;
  v51 = v105 + 1;
  memcpy(&__s[v105], ";", v104 != v105 + 1);
  v52 = v105;
  if (v50 != v51)
    v52 = v105 + 1;
  v105 = v52;
  __s[v52] = 0;
LABEL_84:
  v53 = (char *)*((_QWORD *)this + 12);
  v54 = *((_QWORD *)this + 13);
  if ((unint64_t)(v104 + ~v105) >= 0xB)
    v55 = 11;
  else
    v55 = v104 + ~v105;
  memcpy(&__s[v105], "stream_ids:", v55);
  v105 += v55;
  __s[v105] = 0;
  v56 = v54 - (_QWORD)v53;
  if (v56)
    v57 = v53;
  else
    v57 = 0;
  if (v56)
  {
    __s[v105] = 0;
    if (v53[23] < 0)
    {
      v58 = *((_QWORD *)v53 + 1);
      if ((v58 & 0x8000000000000000) != 0)
        goto LABEL_159;
      v59 = *(char **)v53;
      if (v58)
      {
        if (!v59)
          goto LABEL_159;
      }
    }
    else
    {
      v58 = v53[23];
      v59 = v53;
    }
    if (v58 >= v104 + ~v105)
      v60 = v104 + ~v105;
    else
      v60 = v58;
    memcpy(&__s[v105], v59, v60);
    v105 += v60;
    __s[v105] = 0;
    if (v56 != 24)
    {
      v69 = &v57[v56];
      v70 = v53 + 24;
      do
      {
        v74 = v104;
        v75 = v105 + 1;
        memcpy(&__s[v105], ",", v104 != v105 + 1);
        v76 = v105;
        if (v74 != v75)
          v76 = v105 + 1;
        v105 = v76;
        __s[v76] = 0;
        if (v70[23] < 0)
        {
          v71 = *((_QWORD *)v70 + 1);
          if ((v71 & 0x8000000000000000) != 0)
            goto LABEL_159;
          v72 = *(char **)v70;
          if (v71)
          {
            if (!v72)
              goto LABEL_159;
          }
        }
        else
        {
          v71 = v70[23];
          v72 = v70;
        }
        if (v71 >= v104 + ~v105)
          v73 = v104 + ~v105;
        else
          v73 = v71;
        memcpy(&__s[v105], v72, v73);
        v105 += v73;
        __s[v105] = 0;
        v70 += 24;
      }
      while (v70 != v69);
    }
  }
  v61 = v104;
  v62 = v105 + 1;
  memcpy(&__s[v105], ";", v104 != v105 + 1);
  v63 = v105;
  if (v61 != v62)
    v63 = v105 + 1;
  v105 = v63;
  __s[v63] = 0;
  v64 = (const void **)*((_QWORD *)this + 15);
  v65 = (const void **)*((_QWORD *)this + 16);
  if (v64 == v65)
    goto LABEL_133;
  if ((unint64_t)(v104 + ~v105) >= 6)
    v66 = 6;
  else
    v66 = v104 + ~v105;
  memcpy(&__s[v105], "rids:[", v66);
  v105 += v66;
  __s[v105] = 0;
  __s[v105] = 0;
  if ((*((char *)v64 + 23) & 0x80000000) == 0)
  {
    v67 = *((unsigned __int8 *)v64 + 23);
    v68 = v64;
    goto LABEL_124;
  }
  v67 = (size_t)v64[1];
  if ((v67 & 0x8000000000000000) != 0 || (v68 = *v64, v67) && !v68)
  {
LABEL_159:
    __break(1u);
LABEL_160:
    abort();
  }
LABEL_124:
  v77 = (char *)v65 - (char *)v64;
  if (v67 >= v104 + ~v105)
    v78 = v104 + ~v105;
  else
    v78 = v67;
  memcpy(&__s[v105], v68, v78);
  v105 += v78;
  __s[v105] = 0;
  if (v77 != 80)
  {
    v94 = v77 / 80;
    v95 = (char *)(v64 + 10);
    v96 = 80 * v94 - 80;
    do
    {
      v100 = v104;
      v101 = v105 + 1;
      memcpy(&__s[v105], ",", v104 != v105 + 1);
      v102 = v105;
      if (v100 != v101)
        v102 = v105 + 1;
      v105 = v102;
      __s[v102] = 0;
      if (v95[23] < 0)
      {
        v97 = *((_QWORD *)v95 + 1);
        if ((v97 & 0x8000000000000000) != 0)
          goto LABEL_159;
        v98 = *(char **)v95;
        if (v97)
        {
          if (!v98)
            goto LABEL_159;
        }
      }
      else
      {
        v97 = v95[23];
        v98 = v95;
      }
      if (v97 >= v104 + ~v105)
        v99 = v104 + ~v105;
      else
        v99 = v97;
      memcpy(&__s[v105], v98, v99);
      v105 += v99;
      __s[v105] = 0;
      v95 += 80;
      v96 -= 80;
    }
    while (v96);
  }
  v79 = v104;
  v80 = v105 + 1;
  memcpy(&__s[v105], "]", v104 != v105 + 1);
  v81 = v105;
  if (v79 != v80)
    v81 = v105 + 1;
  v105 = v81;
  __s[v81] = 0;
  v82 = v104;
  v83 = v105 + 1;
  memcpy(&__s[v105], ";", v104 != v105 + 1);
  v84 = v105;
  if (v82 != v83)
    v84 = v105 + 1;
  v105 = v84;
  __s[v84] = 0;
LABEL_133:
  v85 = v104;
  v86 = v105 + 1;
  memcpy(&__s[v105], "}", v104 != v105 + 1);
  v87 = v105;
  if (v85 != v86)
    v87 = v105 + 1;
  v105 = v87;
  __s[v87] = 0;
  v88 = __s;
  if (!__s)
    goto LABEL_159;
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_160;
  v90 = result;
  if (result <= 0x16)
  {
    a2[23] = result;
    v91 = &a2[result];
    if (a2 > v88)
      goto LABEL_144;
    goto LABEL_143;
  }
  v92 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((result | 7) != 0x17)
    v92 = result | 7;
  v93 = v92 + 1;
  result = (unint64_t)operator new(v92 + 1);
  *((_QWORD *)a2 + 1) = v90;
  *((_QWORD *)a2 + 2) = v93 | 0x8000000000000000;
  *(_QWORD *)a2 = result;
  a2 = (char *)result;
  v91 = (char *)(result + v90);
  if (result <= (unint64_t)v88)
  {
LABEL_143:
    if (v91 <= v88)
      goto LABEL_144;
    goto LABEL_159;
  }
LABEL_144:
  if (v90)
    result = (unint64_t)memmove(a2, v88, v90);
  *v91 = 0;
  return result;
}

void cricket::StreamParams::GenerateSsrcs(char **this, int a2, int a3, int a4, rtc::UniqueRandomIdGenerator *a5)
{
  int v6;
  cricket::StreamParams *v7;
  int v8;
  unsigned __int32 *v9;
  unsigned __int32 *v10;
  unsigned __int32 *v11;
  int Id;
  int v13;
  uint64_t v14;
  unint64_t v15;
  rtc::UniqueRandomIdGenerator *v16;
  uint64_t v17;
  _BYTE *v18;
  int *v19;
  unsigned __int32 *v20;
  unint64_t v21;
  unsigned __int32 *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  unsigned __int32 *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  void *v31;
  void *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  int64x2_t *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int64x2_t *v41;
  int64x2_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  int64x2_t *v48;
  int64_t v49;
  void *v50;
  unint64_t v51;
  char *v52;
  int64x2_t v53;
  char *v54;
  void *v55;
  unsigned __int32 *v56;
  unsigned __int32 v57;
  uint64_t v58;
  unsigned __int32 *v59;
  unsigned __int32 v60;
  uint64_t v61;
  uint64_t v62;
  rtc::UniqueRandomIdGenerator *v63;
  _BYTE *__srca;
  void *__p[2];
  char v70;

  if (a2 < 1)
    return;
  v6 = a2;
  v7 = (cricket::StreamParams *)this;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  do
  {
    while (1)
    {
      Id = rtc::UniqueRandomIdGenerator::GenerateId(a5);
      v13 = Id;
      if (v10 < v11)
        break;
      v14 = v10 - v9;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62)
        goto LABEL_90;
      if (((char *)v11 - (char *)v9) >> 1 > v15)
        v15 = ((char *)v11 - (char *)v9) >> 1;
      if ((unint64_t)((char *)v11 - (char *)v9) >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15)
        goto LABEL_88;
      if (v15 >> 62)
        goto LABEL_89;
      v16 = a5;
      v17 = 4 * v15;
      v18 = operator new(4 * v15);
      v19 = (int *)&v18[4 * v14];
      *v19 = v13;
      v20 = (unsigned __int32 *)(v19 + 1);
      if (v10 != v9)
      {
        v21 = (char *)v10 - (char *)v9 - 4;
        if (v21 >= 0xBC)
        {
          v23 = ((char *)(v10 - 1) - (char *)v9) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v18[(char *)v10 - (char *)v9 - 4 - v23] > &v18[(char *)v10 - (char *)v9 - 4])
          {
            v22 = v10;
          }
          else if ((unsigned __int32 *)((char *)v10 - v23 - 4) > v10 - 1)
          {
            v22 = v10;
          }
          else if ((unint64_t)((char *)v9 - v18) >= 0x20)
          {
            v24 = (v21 >> 2) + 1;
            v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
            v22 = &v10[v25 / 0xFFFFFFFFFFFFFFFCLL];
            v19 = (int *)((char *)v19 - v25);
            v26 = &v18[4 * v14 - 16];
            v27 = v10 - 4;
            v28 = v24 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v29 = *(_OWORD *)v27;
              *(v26 - 1) = *((_OWORD *)v27 - 1);
              *v26 = v29;
              v26 -= 2;
              v27 -= 8;
              v28 -= 8;
            }
            while (v28);
            if (v24 == (v24 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_28;
          }
          else
          {
            v22 = v10;
          }
        }
        else
        {
          v22 = v10;
        }
        do
        {
          v30 = *--v22;
          *--v19 = v30;
        }
        while (v22 != v9);
      }
LABEL_28:
      v11 = (unsigned __int32 *)&v18[v17];
      if (v9)
        operator delete(v9);
      v9 = (unsigned __int32 *)v19;
      v10 = v20;
      a5 = v16;
      v7 = (cricket::StreamParams *)this;
      v6 = a2;
      cricket::StreamParams::add_ssrc((cricket::StreamParams *)this, v13);
      if (++v8 == a2)
        goto LABEL_30;
    }
    if (!v10)
      goto LABEL_88;
    *v10++ = Id;
    cricket::StreamParams::add_ssrc(v7, Id);
    ++v8;
  }
  while (v8 != v6);
LABEL_30:
  if (v6 <= 1)
    goto LABEL_67;
  v70 = 3;
  if (__p <= (void **)"SIM" && (char *)__p + 3 > "SIM")
  {
LABEL_88:
    __break(1u);
LABEL_89:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  LODWORD(__p[0]) = 5065043;
  v32 = __p[0];
  v31 = __p[1];
  v33 = (char *)v10 - (char *)v9;
  if (v10 == v9)
  {
    v35 = 0;
    v34 = 0;
    v37 = (int64x2_t *)*((_QWORD *)v7 + 7);
    v36 = *((_QWORD *)v7 + 8);
    if ((unint64_t)v37 >= v36)
      goto LABEL_42;
LABEL_36:
    if (v37)
    {
      v37->i64[0] = (uint64_t)v32;
      v37->i64[1] = (uint64_t)v31;
      v37[1].i8[7] = 3;
      v37[2].i64[0] = 0;
      v37[2].i64[1] = 0;
      v37[1].i64[1] = 0;
      v38 = v35 - v34;
      if (v35 != v34)
      {
        if (v38 < 0)
          goto LABEL_90;
        v39 = (char *)operator new(v35 - v34);
        v37[1].i64[1] = (uint64_t)v39;
        v37[2].i64[0] = (uint64_t)v39;
        v40 = &v39[4 * (v38 >> 2)];
        v37[2].i64[1] = (uint64_t)v40;
        memcpy(v39, v34, v35 - v34);
        v37[2].i64[0] = (uint64_t)v40;
      }
      v41 = v37 + 3;
      goto LABEL_65;
    }
    goto LABEL_88;
  }
  if (v33 < 0)
    goto LABEL_90;
  v34 = (char *)operator new((char *)v10 - (char *)v9);
  v35 = &v34[4 * (v33 >> 2)];
  memcpy(v34, v9, (char *)v10 - (char *)v9);
  v37 = (int64x2_t *)*((_QWORD *)v7 + 7);
  v36 = *((_QWORD *)v7 + 8);
  if ((unint64_t)v37 < v36)
    goto LABEL_36;
LABEL_42:
  __srca = v34;
  v42 = (int64x2_t *)*((_QWORD *)v7 + 6);
  v43 = 0xAAAAAAAAAAAAAAABLL * (v37 - v42) + 1;
  if (v43 > 0x555555555555555)
    goto LABEL_90;
  v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v42) >> 4);
  if (2 * v44 > v43)
    v43 = 2 * v44;
  if (v44 >= 0x2AAAAAAAAAAAAAALL)
    v45 = 0x555555555555555;
  else
    v45 = v43;
  if (!v45)
    goto LABEL_88;
  v63 = a5;
  if (v45 > 0x555555555555555)
    goto LABEL_89;
  v46 = (uint64_t)v31;
  v62 = 48 * v45;
  v47 = (char *)operator new(48 * v45);
  v48 = (int64x2_t *)&v47[16 * (v37 - v42)];
  v48->i64[0] = (uint64_t)v32;
  v48->i64[1] = v46;
  v48[1].i64[1] = 0;
  v48[1].i8[7] = 3;
  v48[2].i64[0] = 0;
  v48[2].i64[1] = 0;
  v49 = v35 - __srca;
  if (!v49)
    goto LABEL_53;
  if (v49 < 0)
LABEL_90:
    abort();
  v50 = operator new(v49);
  v48[1].i64[1] = (uint64_t)v50;
  v51 = (unint64_t)v50 + 4 * (v49 >> 2);
  memcpy(v50, __srca, v49);
  v48[2] = vdupq_n_s64(v51);
LABEL_53:
  v52 = &v47[v62];
  v41 = v48 + 3;
  if (v37 == v42)
  {
    v34 = __srca;
    v7 = (cricket::StreamParams *)this;
    this[6] = (char *)v48;
    this[7] = (char *)v41;
    this[8] = v52;
    a5 = v63;
    goto LABEL_63;
  }
  do
  {
    v53 = v37[-3];
    v48[-2].i64[0] = v37[-2].i64[0];
    v48[-3] = v53;
    v37[-3].i64[1] = 0;
    v37[-2].i64[0] = 0;
    v37[-3].i64[0] = 0;
    v48[-2].i64[1] = 0;
    v48[-1].i64[0] = 0;
    v48[-1].i64[1] = 0;
    *(int64x2_t *)((char *)v48 - 24) = *(int64x2_t *)((char *)v37 - 24);
    v48[-1].i64[1] = v37[-1].i64[1];
    v48 -= 3;
    v37[-2].i64[1] = 0;
    v37[-1].i64[0] = 0;
    v37[-1].i64[1] = 0;
    v37 -= 3;
  }
  while (v37 != v42);
  v34 = __srca;
  v7 = (cricket::StreamParams *)this;
  v37 = (int64x2_t *)this[6];
  v54 = this[7];
  this[6] = (char *)v48;
  this[7] = (char *)v41;
  this[8] = v52;
  if (v54 == (char *)v37)
  {
    a5 = v63;
    if (v37)
      goto LABEL_64;
  }
  else
  {
    a5 = v63;
    do
    {
      v55 = (void *)*((_QWORD *)v54 - 3);
      if (v55)
      {
        *((_QWORD *)v54 - 2) = v55;
        operator delete(v55);
      }
      if (*(v54 - 25) < 0)
        operator delete(*((void **)v54 - 6));
      v54 -= 48;
    }
    while (v54 != (char *)v37);
LABEL_63:
    if (v37)
LABEL_64:
      operator delete(v37);
  }
LABEL_65:
  *((_QWORD *)v7 + 7) = v41;
  if (v34)
    operator delete(v34);
LABEL_67:
  if (a3 && v9 != v10)
  {
    v56 = v9;
    if (__p > (void **)"FID")
      goto LABEL_73;
    v56 = v9;
    if ((char *)__p + 3 <= "FID")
      goto LABEL_73;
    rtc::UniqueRandomIdGenerator::GenerateId(a5);
    v70 = 3;
    __break(1u);
    while (++v56 != v10)
    {
LABEL_73:
      v57 = *v56;
      v58 = rtc::UniqueRandomIdGenerator::GenerateId(a5);
      v70 = 3;
      LODWORD(__p[0]) = 4475206;
      cricket::StreamParams::AddSecondarySsrc((uint64_t)v7, (uint64_t)__p, v57, v58);
      if (v70 < 0)
        operator delete(__p[0]);
    }
  }
  if (a4 && v9 != v10)
  {
    v59 = v9;
    if (__p > (void **)"FEC-FR")
      goto LABEL_81;
    v59 = v9;
    if ((char *)__p + 6 <= "FEC-FR")
      goto LABEL_81;
    rtc::UniqueRandomIdGenerator::GenerateId(a5);
    v70 = 6;
    __break(1u);
    while (++v59 != v10)
    {
LABEL_81:
      v60 = *v59;
      v61 = rtc::UniqueRandomIdGenerator::GenerateId(a5);
      v70 = 6;
      strcpy((char *)__p, "FEC-FR");
      cricket::StreamParams::AddSecondarySsrc((uint64_t)v7, (uint64_t)__p, v60, v61);
      if (v70 < 0)
        operator delete(__p[0]);
    }
  }
  if (v9)
    operator delete(v9);
}

void cricket::StreamParams::GetPrimarySsrcs(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _DWORD *v25;
  char *v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  char *v51;
  char *v52;
  char *v53;
  int v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  _DWORD *v60;
  int v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  size_t v71;
  const void *v72;
  char *v73;
  _DWORD __s2[5];
  char v75;

  v75 = 3;
  if (__s2 <= (_DWORD *)"SIM" && (char *)__s2 + 3 > "SIM")
  {
LABEL_83:
    __break(1u);
LABEL_84:
    abort();
  }
  __s2[0] = 5065043;
  v4 = a1[6];
  v5 = a1[7];
  if (v4 == v5)
  {
LABEL_19:
    v12 = (int *)a1[3];
    if (v12 == (int *)a1[4])
    {
      v13 = 0;
      v15 = *(char **)(a2 + 8);
      v14 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v15 < v14)
      {
LABEL_21:
        if (v15)
        {
          *(_DWORD *)v15 = v13;
          *(_QWORD *)(a2 + 8) = v15 + 4;
          return;
        }
        goto LABEL_83;
      }
    }
    else
    {
      v13 = *v12;
      v15 = *(char **)(a2 + 8);
      v14 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v15 < v14)
        goto LABEL_21;
    }
    v16 = *(char **)a2;
    v17 = (uint64_t)&v15[-*(_QWORD *)a2];
    v18 = v17 >> 2;
    v19 = (v17 >> 2) + 1;
    if (v19 >> 62)
      goto LABEL_84;
    v20 = v14 - (_QWORD)v16;
    if (v20 >> 1 > v19)
      v19 = v20 >> 1;
    v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL;
    v22 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v21)
      v22 = v19;
    if (v22)
    {
      if (!(v22 >> 62))
      {
        v23 = 4 * v22;
        v24 = operator new(4 * v22);
        v25 = &v24[4 * v18];
        v26 = &v24[v23];
        *v25 = v13;
        v27 = v25 + 1;
        if (v15 != v16)
        {
          v28 = v15 - v16 - 4;
          if (v28 < 0x2C)
            goto LABEL_88;
          if ((unint64_t)(v15 - &v24[v17]) < 0x20)
            goto LABEL_88;
          v29 = (v28 >> 2) + 1;
          v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
          v31 = &v15[-v30];
          v25 = (_DWORD *)((char *)v25 - v30);
          v32 = &v24[4 * v18 - 16];
          v33 = v15 - 16;
          v34 = v29 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *v32 = v35;
            v32 -= 2;
            v33 -= 32;
            v34 -= 8;
          }
          while (v34);
          v15 = v31;
          if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_88:
            do
            {
              v36 = *((_DWORD *)v15 - 1);
              v15 -= 4;
              *--v25 = v36;
            }
            while (v15 != v16);
          }
        }
        *(_QWORD *)a2 = v25;
        *(_QWORD *)(a2 + 8) = v27;
        *(_QWORD *)(a2 + 16) = v26;
        if (v16)
          operator delete(v16);
        *(_QWORD *)(a2 + 8) = v27;
        return;
      }
LABEL_85:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    goto LABEL_83;
  }
  while (1)
  {
    v9 = *(unsigned __int8 *)(v4 + 23);
    if ((v9 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v4 + 23);
    else
      v10 = *(_QWORD *)(v4 + 8);
    if (v10 != 3)
      goto LABEL_6;
    if ((v9 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, __s2, *(_QWORD *)(v4 + 8)))
        goto LABEL_6;
    }
    else if (*(_BYTE *)(v4 + 23))
    {
      v11 = 0;
      while (*(unsigned __int8 *)(v4 + v11) == *((unsigned __int8 *)__s2 + v11))
      {
        if (v9 == ++v11)
          goto LABEL_5;
      }
      goto LABEL_6;
    }
LABEL_5:
    v7 = *(char **)(v4 + 24);
    v6 = *(char **)(v4 + 32);
    v8 = v6 - v7;
    if (v6 != v7)
      break;
LABEL_6:
    v4 += 48;
    if (v4 == v5)
      goto LABEL_19;
  }
  if (v8 < 1)
    return;
  v37 = v8 >> 2;
  v39 = *(char **)a2;
  v38 = *(char **)(a2 + 8);
  v40 = (uint64_t)&v38[-*(_QWORD *)a2];
  v41 = (char *)(*(_QWORD *)a2 + (v40 & 0xFFFFFFFFFFFFFFFCLL));
  v42 = *(_QWORD *)(a2 + 16);
  if (v37 <= (v42 - (uint64_t)v38) >> 2)
  {
    v48 = (v38 - v41) >> 2;
    if (v48 >= v37)
    {
      v49 = &v7[4 * v37];
      v51 = *(char **)(a2 + 8);
    }
    else
    {
      v49 = &v7[4 * v48];
      v50 = v6 - v49;
      if (v6 != v49)
        memmove(*(void **)(a2 + 8), &v7[4 * v48], v6 - v49);
      v51 = &v38[v50];
      *(_QWORD *)(a2 + 8) = &v38[v50];
      if (v38 - v41 < 1)
        return;
    }
    v52 = &v51[-4 * v37];
    v53 = v51;
    if (v52 >= v38)
    {
LABEL_63:
      v55 = &v41[4 * v37];
      *(_QWORD *)(a2 + 8) = v53;
      if (v51 != v55)
        memmove(&v51[-4 * ((v51 - v55) >> 2)], v41, v51 - v55);
      if (v49 != v7)
        memmove(v41, v7, v49 - v7);
      return;
    }
    v53 = v51;
    while (v53)
    {
      v54 = *(_DWORD *)v52;
      v52 += 4;
      *(_DWORD *)v53 = v54;
      v53 += 4;
      if (v52 >= v38)
        goto LABEL_63;
    }
    goto LABEL_83;
  }
  v43 = v40 >> 2;
  v44 = (v40 >> 2) + v37;
  if (v44 >> 62)
    goto LABEL_84;
  v45 = v42 - (_QWORD)v39;
  if (v45 >> 1 > v44)
    v44 = v45 >> 1;
  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
    v46 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v46 = v44;
  if (!v46)
  {
    v47 = 0;
    goto LABEL_68;
  }
  if (v46 >> 62)
    goto LABEL_85;
  v47 = operator new(4 * v46);
LABEL_68:
  v56 = &v47[4 * v43];
  v57 = &v47[4 * v46];
  v58 = 4 * v37;
  v59 = (char *)&v56[v37];
  v60 = v56;
  do
  {
    if (!v60)
      goto LABEL_83;
    v61 = *(_DWORD *)v7;
    v7 += 4;
    *v60++ = v61;
    v58 -= 4;
  }
  while (v58);
  if (v39 != v38)
  {
    if ((unint64_t)(v40 - 4) < 0x3C)
    {
      v62 = v41;
      goto LABEL_78;
    }
    v62 = v41;
    if ((unint64_t)(&v39[v40 & 0xFFFFFFFFFFFFFFFCLL] - &v47[v40 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_89;
    v63 = ((unint64_t)(v40 - 4) >> 2) + 1;
    v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
    v62 = &v41[-v64];
    v56 = (_DWORD *)((char *)v56 - v64);
    v65 = 4 * v43 - 16;
    v66 = &v47[v65];
    v67 = &v39[v65];
    v68 = v63 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v69 = *(_OWORD *)v67;
      *(v66 - 1) = *((_OWORD *)v67 - 1);
      *v66 = v69;
      v66 -= 2;
      v67 -= 32;
      v68 -= 8;
    }
    while (v68);
    if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_89:
      do
      {
LABEL_78:
        v70 = *((_DWORD *)v62 - 1);
        v62 -= 4;
        *--v56 = v70;
      }
      while (v62 != v39);
    }
  }
  v71 = v38 - v41;
  if (v71)
  {
    v72 = v41;
    v73 = v57;
    memmove(v59, v72, v71);
    v57 = v73;
  }
  *(_QWORD *)a2 = v56;
  *(_QWORD *)(a2 + 8) = &v59[v71];
  *(_QWORD *)(a2 + 16) = v57;
  if (v39)
    operator delete(v39);
}

void cricket::StreamParams::GetSecondarySsrcs(uint64_t a1, unsigned __int8 **a2, int **a3, _QWORD *a4)
{
  int *v4;
  int *v5;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  unint64_t v22;
  char *v23;
  _DWORD *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char *v45;
  _DWORD *v46;
  uint64_t v47;

  v4 = *a3;
  v5 = a3[1];
  if (*a3 == v5 || *(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56))
    return;
  while (2)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    if (v9 == v10)
      goto LABEL_5;
    v11 = *v4;
    v12 = *((_BYTE *)a2 + 23);
    if (v12 >= 0)
      v13 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v13 = a2[1];
    if (v12 >= 0)
      v14 = (unsigned __int8 *)a2;
    else
      v14 = *a2;
    while (1)
    {
      v15 = *(unsigned __int8 *)(v9 + 23);
      if ((v15 & 0x80u) == 0)
        v16 = (unsigned __int8 *)*(unsigned __int8 *)(v9 + 23);
      else
        v16 = *(unsigned __int8 **)(v9 + 8);
      if (v16 != v13)
        goto LABEL_14;
      if ((v15 & 0x80) == 0)
        break;
      if (!memcmp(*(const void **)v9, v14, *(_QWORD *)(v9 + 8)))
        goto LABEL_24;
LABEL_14:
      v9 += 48;
      if (v9 == v10)
        goto LABEL_5;
    }
    if (*(_BYTE *)(v9 + 23))
    {
      v17 = 0;
      while (*(unsigned __int8 *)(v9 + v17) == v14[v17])
      {
        if (v15 == ++v17)
          goto LABEL_24;
      }
      goto LABEL_14;
    }
LABEL_24:
    v18 = *(_DWORD **)(v9 + 24);
    v19 = *(_QWORD *)(v9 + 32) - (_QWORD)v18;
    if (v19)
      v20 = v19 >= 5;
    else
      v20 = 0;
    if (!v20 || *v18 != v11)
      goto LABEL_14;
    v21 = v18[1];
    v23 = (char *)a4[1];
    v22 = a4[2];
    if ((unint64_t)v23 < v22)
    {
      if (v23)
      {
        *(_DWORD *)v23 = v21;
        v24 = v23 + 4;
        goto LABEL_4;
      }
LABEL_52:
      __break(1u);
LABEL_53:
      abort();
    }
    v25 = a4;
    v26 = (char *)*a4;
    v27 = (uint64_t)&v23[-*a4];
    v28 = v27 >> 2;
    v29 = (v27 >> 2) + 1;
    if (v29 >> 62)
      goto LABEL_53;
    v30 = v22 - (_QWORD)v26;
    if (v30 >> 1 > v29)
      v29 = v30 >> 1;
    v20 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL;
    v31 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v20)
      v31 = v29;
    if (!v31)
      goto LABEL_52;
    if (v31 >> 62)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v47 = 4 * v31;
    v32 = operator new(4 * v31);
    v33 = &v32[4 * v28];
    *v33 = v21;
    v24 = v33 + 1;
    if (v23 == v26)
    {
      a4 = v25;
      v35 = v47;
    }
    else
    {
      v34 = v23 - v26 - 4;
      if (v34 < 0x2C)
      {
        a4 = v25;
        v35 = v47;
        goto LABEL_48;
      }
      v36 = &v23[-v27] - v32;
      a4 = v25;
      v35 = v47;
      if (v36 < 0x20)
        goto LABEL_57;
      v37 = (v34 >> 2) + 1;
      v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      v39 = &v23[-v38];
      v33 = (_DWORD *)((char *)v33 - v38);
      v40 = &v32[4 * v28 - 16];
      v41 = v23 - 16;
      v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v43 = *(_OWORD *)v41;
        *(v40 - 1) = *((_OWORD *)v41 - 1);
        *v40 = v43;
        v40 -= 2;
        v41 -= 32;
        v42 -= 8;
      }
      while (v42);
      v23 = v39;
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_57:
        do
        {
LABEL_48:
          v44 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *--v33 = v44;
        }
        while (v23 != v26);
      }
    }
    *a4 = v33;
    a4[1] = v24;
    a4[2] = &v32[v35];
    if (v26)
    {
      v45 = v26;
      v46 = v24;
      operator delete(v45);
      v24 = v46;
    }
LABEL_4:
    a4[1] = v24;
LABEL_5:
    if (++v4 != v5)
      continue;
    break;
  }
}

BOOL cricket::StreamParams::AddSecondarySsrc(uint64_t a1, uint64_t a2, unsigned __int32 __c, uint64_t a4)
{
  __int32 *v8;
  __int32 *v9;
  __int32 *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  char *v23;
  _DWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  _QWORD *v34;
  unint64_t v35;
  __int128 v36;
  char *v37;
  void *v38;
  __int32 *v40;
  std::string v41;
  void *__p[2];
  _QWORD *v43;

  v8 = *(__int32 **)(a1 + 32);
  v9 = wmemchr(*(__int32 **)(a1 + 24), __c, ((uint64_t)v8 - *(_QWORD *)(a1 + 24)) >> 2);
  if (v9)
    v10 = v9;
  else
    v10 = v8;
  if (v10 == v8)
    return v10 != v8;
  v12 = *(char **)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v12 >= v11)
  {
    v40 = v10;
    v14 = *(char **)(a1 + 24);
    v15 = (v12 - v14) >> 2;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62)
      goto LABEL_36;
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    v18 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL;
    v19 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v18)
      v19 = v16;
    if (v19)
    {
      if (v19 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v20 = 4 * v19;
      v21 = operator new(4 * v19);
      v22 = &v21[4 * v15];
      v23 = &v21[v20];
      *v22 = a4;
      v24 = v22 + 1;
      if (v12 != v14)
      {
        v25 = v12 - v14 - 4;
        if (v25 < 0x2C)
          goto LABEL_40;
        if ((unint64_t)(v14 - v21) < 0x20)
          goto LABEL_40;
        v26 = (v25 >> 2) + 1;
        v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
        v28 = &v12[-v27];
        v22 = (_DWORD *)((char *)v22 - v27);
        v29 = &v21[4 * v15 - 16];
        v30 = v12 - 16;
        v31 = v26 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 8;
        }
        while (v31);
        v12 = v28;
        if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_40:
          do
          {
            v33 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *--v22 = v33;
          }
          while (v12 != v14);
        }
      }
      *(_QWORD *)(a1 + 24) = v22;
      *(_QWORD *)(a1 + 32) = v24;
      *(_QWORD *)(a1 + 40) = v23;
      if (v14)
        operator delete(v14);
      v10 = v40;
      *(_QWORD *)(a1 + 32) = v24;
      v13 = __c | (unint64_t)(a4 << 32);
      if (*(char *)(a2 + 23) < 0)
        goto LABEL_8;
      goto LABEL_26;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    abort();
  }
  if (!v12)
    goto LABEL_35;
  *(_DWORD *)v12 = a4;
  *(_QWORD *)(a1 + 32) = v12 + 4;
  v13 = __c | (unint64_t)(a4 << 32);
  if (*(char *)(a2 + 23) < 0)
  {
LABEL_8:
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    goto LABEL_27;
  }
LABEL_26:
  v41 = *(std::string *)a2;
LABEL_27:
  v34 = operator new(8uLL);
  __p[0] = v34;
  *v34 = v13;
  __p[1] = v34 + 1;
  v43 = v34 + 1;
  v35 = *(_QWORD *)(a1 + 56);
  if (v35 >= *(_QWORD *)(a1 + 64))
  {
    v37 = std::vector<cricket::SsrcGroup>::__push_back_slow_path<cricket::SsrcGroup>((void **)(a1 + 48), (uint64_t)&v41);
    v38 = __p[0];
    *(_QWORD *)(a1 + 56) = v37;
    if (v38)
    {
      __p[1] = v38;
      operator delete(v38);
    }
    goto LABEL_32;
  }
  if (!v35)
    goto LABEL_35;
  v36 = *(_OWORD *)&v41.__r_.__value_.__l.__data_;
  *(_QWORD *)(v35 + 16) = *((_QWORD *)&v41.__r_.__value_.__l + 2);
  *(_QWORD *)(v35 + 24) = 0;
  *(_OWORD *)v35 = v36;
  memset(&v41, 0, sizeof(v41));
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)(v35 + 40) = 0;
  *(_OWORD *)(v35 + 24) = *(_OWORD *)__p;
  *(_QWORD *)(v35 + 40) = v43;
  __p[0] = 0;
  __p[1] = 0;
  v43 = 0;
  *(_QWORD *)(a1 + 56) = v35 + 48;
LABEL_32:
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  return v10 != v8;
}

void cricket::StreamParams::stream_ids(cricket::StreamParams *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 *v9;
  std::string *v10;
  __int128 v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 12);
  v3 = *((_QWORD *)this + 13);
  v4 = v3 - v2;
  if (v3 != v2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v7 = (char *)operator new(v4);
    v8 = 0;
    *a2 = v7;
    a2[2] = &v7[24 * v6];
    do
    {
      while (1)
      {
        v9 = (__int128 *)(v2 + v8);
        v10 = (std::string *)&v7[v8];
        if ((*(char *)(v2 + v8 + 23) & 0x80000000) == 0)
          break;
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
        v8 += 24;
        if (v2 + v8 == v3)
          goto LABEL_7;
      }
      v11 = *v9;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      v8 += 24;
    }
    while (v2 + v8 != v3);
LABEL_7:
    a2[1] = &v7[v8];
  }
}

char *std::vector<cricket::SsrcGroup>::__push_back_slow_path<cricket::SsrcGroup>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  void *v16;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v5 = 0x555555555555555;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_24:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x555555555555555)
    goto LABEL_24;
  v7 = 48 * v5;
  v8 = (char *)operator new(48 * v5);
  v9 = &v8[48 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[v7];
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v9 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v9 + 48;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v9 - 4) = *((_QWORD *)v13 - 4);
      *((_OWORD *)v9 - 3) = v14;
      *((_QWORD *)v13 - 5) = 0;
      *((_QWORD *)v13 - 4) = 0;
      *((_QWORD *)v13 - 6) = 0;
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(v13 - 24);
      *((_QWORD *)v9 - 1) = *((_QWORD *)v13 - 1);
      v9 -= 48;
      *((_QWORD *)v13 - 3) = 0;
      *((_QWORD *)v13 - 2) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v13 -= 48;
    }
    while (v13 != v12);
    v13 = (char *)*a1;
    v15 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v15 != v13)
    {
      v16 = (void *)*((_QWORD *)v15 - 3);
      if (v16)
      {
        *((_QWORD *)v15 - 2) = v16;
        operator delete(v16);
      }
      if (*(v15 - 25) < 0)
        operator delete(*((void **)v15 - 6));
      v15 -= 48;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void dcsctp::StreamResetHandler::HandleReConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int v21;
  _BYTE *v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  _BYTE *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  _BOOL4 v71;
  uint64_t v72;
  void *v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  __int128 v84;
  char *v85;
  char *v86;
  void (**v87)(char *);
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  __int128 v96;
  char *v97;
  char *v98;
  void (**v99)(char *);
  void *v100;
  void (**v101)(uint64_t, uint64_t, uint64_t);
  void (**v102)(uint64_t, uint64_t, uint64_t);
  void *v103;
  void (**v104)(void *);
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  __int128 v113;
  char *v114;
  char *v115;
  void (**v116)(char *);
  uint64_t v117;
  unint64_t v118;
  char *v119;
  __int128 v120;
  char *v121;
  char *v122;
  void (**v123)(char *);
  uint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  __int128 v128;
  char *v129;
  char *v130;
  void (**v131)(char *);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void (*v136)(void);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  void *v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  __int128 v147;
  char *v148;
  char *v149;
  void (**v150)(char *);
  uint64_t v151;
  char *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  __int128 v156;
  char *v157;
  char *v158;
  void (**v159)(char *);
  uint64_t v160;
  uint64_t v161;
  unsigned __int16 *v162;
  void *v163;
  void *v164[2];
  uint64_t v165;
  void *v166[2];
  uint64_t v167;
  void *__p;
  _BYTE *v169;
  void *v170;
  void *v171;
  _BYTE *v172;
  char v173;
  char v174;

  v10 = *(unsigned __int16 **)(a2 + 8);
  v11 = *(unsigned __int16 **)(a2 + 16);
  __p = 0;
  v169 = 0;
  v170 = 0;
  v12 = (char *)v11 - (char *)v10;
  if (v11 != v10)
  {
    v13 = (char *)v10;
    while (v12 > 3)
    {
      LOWORD(v166[0]) = 0;
      LOWORD(v166[0]) = bswap32(*(unsigned __int16 *)v13) >> 16;
      v14 = __rev16(*((unsigned __int16 *)v13 + 1));
      if (v12 >= v14)
        v15 = (void *)v14;
      else
        v15 = (void *)v12;
      if (v15)
        v16 = v13;
      else
        v16 = 0;
      v163 = v16;
      v164[0] = v15;
      std::vector<dcsctp::ParameterDescriptor>::emplace_back<unsigned short &,rtc::ArrayView<unsigned char const,-4711l>>(&__p, v166, (uint64_t *)&v163);
      v17 = (unsigned __int16)(v14 + 3) & 0xFFFC;
      v18 = v12 - v17;
      if (v12 > v17)
      {
        v19 = &v13[v17];
        if (v18 < v12)
          v12 = v18;
        v13 = v12 ? v19 : 0;
        if (v12)
          continue;
      }
      goto LABEL_17;
    }
LABEL_322:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 55, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v160);
LABEL_323:
    abort();
  }
LABEL_17:
  v20 = 0xAAAAAAAAAAAAAAABLL * ((v169 - (_BYTE *)__p) >> 3);
  if (v20 == 2)
  {
    if (v169 != __p)
    {
      switch(*(_WORD *)__p)
      {
        case 0xD:
          v23 = *((unsigned __int16 *)__p + 12);
          v24 = v23 == 14 || v23 == 16;
          if (!v24)
            goto LABEL_39;
          goto LABEL_20;
        case 0xE:
          if (*((_WORD *)__p + 12) != 13)
            goto LABEL_39;
          goto LABEL_20;
        case 0x10:
          v25 = *((unsigned __int16 *)__p + 12);
          if (v25 != 13 && v25 != 16)
            goto LABEL_39;
          goto LABEL_20;
        case 0x11:
          if (*((_WORD *)__p + 12) != 18)
            goto LABEL_39;
          goto LABEL_20;
        case 0x12:
          if (*((_WORD *)__p + 12) != 17)
            goto LABEL_39;
          goto LABEL_20;
        default:
          goto LABEL_39;
      }
    }
LABEL_321:
    __break(1u);
    goto LABEL_322;
  }
  if (v20 == 1 && *(unsigned __int16 *)__p - 13 < 6)
  {
LABEL_20:
    v21 = 1;
    v22 = __p;
    if (!__p)
      goto LABEL_43;
LABEL_42:
    v169 = v22;
    operator delete(v22);
    goto LABEL_43;
  }
LABEL_39:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/net/dcsctp/socket/stream_reset_handler.cc");
  v21 = 0;
  v22 = __p;
  if (__p)
    goto LABEL_42;
LABEL_43:
  if (!v21)
  {
    v151 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v151 + 88))(v151, 3, "Failed to parse RE-CONFIG command", 33);
    return;
  }
  v30 = *(unsigned __int16 **)(a2 + 8);
  v31 = *(unsigned __int16 **)(a2 + 16);
  v164[0] = 0;
  v164[1] = 0;
  v163 = 0;
  v32 = (char *)v31 - (char *)v30;
  if (v31 != v30)
  {
    v33 = (char *)v30;
    while (v32 > 3)
    {
      LOWORD(v166[0]) = 0;
      LOWORD(v166[0]) = bswap32(*(unsigned __int16 *)v33) >> 16;
      v34 = __rev16(*((unsigned __int16 *)v33 + 1));
      if (v32 >= v34)
        v35 = (_BYTE *)v34;
      else
        v35 = (_BYTE *)v32;
      if (v35)
        v36 = v33;
      else
        v36 = 0;
      __p = v36;
      v169 = v35;
      std::vector<dcsctp::ParameterDescriptor>::emplace_back<unsigned short &,rtc::ArrayView<unsigned char const,-4711l>>(&v163, v166, (uint64_t *)&__p);
      v37 = (unsigned __int16)(v34 + 3) & 0xFFFC;
      v38 = v32 - v37;
      if (v32 > v37)
      {
        v39 = &v33[v37];
        if (v38 < v32)
          v32 = v38;
        v33 = v32 ? v39 : 0;
        if (v32)
          continue;
      }
      goto LABEL_60;
    }
    goto LABEL_322;
  }
LABEL_60:
  v40 = (unsigned __int16 *)v163;
  v41 = (unsigned __int16 *)v164[0];
  if (v163 != v164[0])
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v162 = (unsigned __int16 *)v164[0];
    while (1)
    {
      v46 = *v40;
      if (v46 != 16)
        break;
      dcsctp::ReconfigurationResponseParameter::Parse(*((unsigned __int16 **)v40 + 1), *((_QWORD *)v40 + 2), (uint64_t)&__p);
      if ((_BYTE)v172)
      {
        if (!*(_BYTE *)(a1 + 120) || !*(_BYTE *)(a1 + 84) || (_DWORD)v169 != *(_DWORD *)(a1 + 80))
          goto LABEL_63;
        v53 = *(_QWORD *)(a1 + 64);
        if (*(_BYTE *)(v53 + 156))
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v53 + 136) + 24))(*(_QWORD *)(v53 + 136));
          *(_DWORD *)(v53 + 160) = 0;
          *(_BYTE *)(v53 + 156) = 0;
          if (!(_BYTE)v172)
            goto LABEL_321;
        }
        if ((HIDWORD(v169) - 2) >= 4)
        {
          if (HIDWORD(v169) >= 2)
          {
            if (HIDWORD(v169) == 6)
            {
              if (!*(_BYTE *)(a1 + 120))
                goto LABEL_321;
              if (*(_BYTE *)(a1 + 84))
                *(_BYTE *)(a1 + 84) = 0;
              v137 = *(_QWORD *)(a1 + 64);
              v138 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
              v139 = 86400000000;
              if (v138 < 86400000000)
                v139 = v138;
              *(_QWORD *)(v137 + 144) = v139;
              dcsctp::Timer::Start(*(dcsctp::Timer **)(a1 + 64));
            }
            goto LABEL_63;
          }
          v132 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
          if (!*(_BYTE *)(a1 + 120))
            goto LABEL_321;
          v133 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
          if (v133)
            v134 = *(_QWORD *)(a1 + 96);
          else
            v134 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132 + 136))(v132, v134, v133 >> 1);
          if (*(_BYTE *)(a1 + 120))
          {
            v135 = *(void **)(a1 + 96);
            if (v135)
            {
              *(_QWORD *)(a1 + 104) = v135;
              operator delete(v135);
            }
            *(_BYTE *)(a1 + 120) = 0;
          }
          v136 = *(void (**)(void))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 376) + 56);
        }
        else
        {
          v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
          if (!*(_BYTE *)(a1 + 120) || !(_BYTE)v172)
            goto LABEL_321;
          v55 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
          if (v55)
            v56 = *(_QWORD *)(a1 + 96);
          else
            v56 = 0;
          if ((HIDWORD(v169) - 1) > 5)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v54 + 128))(v54, v56, v55 >> 1, "Success: nothing to do", 22);
            if (!*(_BYTE *)(a1 + 120))
              goto LABEL_255;
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD))(*(_QWORD *)v54 + 128))(v54, v56, v55 >> 1, off_24C0C1430[HIDWORD(v169) - 1], qword_208F1C078[HIDWORD(v169) - 1]);
            if (!*(_BYTE *)(a1 + 120))
              goto LABEL_255;
          }
          v140 = *(void **)(a1 + 96);
          if (v140)
          {
            *(_QWORD *)(a1 + 104) = v140;
            operator delete(v140);
          }
          *(_BYTE *)(a1 + 120) = 0;
LABEL_255:
          v136 = *(void (**)(void))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 376) + 64);
        }
        v136();
        goto LABEL_63;
      }
      v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v45 + 88))(v45, 3, "Failed to parse Reconfiguration Response command", 48);
LABEL_63:
      v40 += 12;
      if (v40 == v41)
      {
        v40 = (unsigned __int16 *)v163;
        if (v163)
          goto LABEL_296;
        goto LABEL_297;
      }
    }
    if (v46 == 14)
    {
      dcsctp::IncomingSSNResetRequestParameter::Parse(*((unsigned __int16 **)v40 + 1), *((_QWORD *)v40 + 2), &__p);
      if (!v173)
      {
        v63 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
        (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v63 + 88))(v63, 3, "Failed to parse Incoming Reset command", 38);
        if (v173)
          goto LABEL_230;
        goto LABEL_63;
      }
      v57 = (int)v169;
      if (*(_BYTE *)(a1 + 60))
      {
        v58 = *(_DWORD *)(a1 + 56);
        v49 = v169 >= v58;
        v59 = v169 - v58;
        v60 = (_DWORD)v59 != 0 && v49;
        if ((_DWORD)v59 != 0x80000000)
          v60 = (int)v59 >= 0;
        if (!v60)
          v59 |= 0xFFFFFFFF00000000;
        v61 = v59 + *(_QWORD *)(a1 + 48);
      }
      else
      {
        v61 = v169;
      }
      *(_QWORD *)(a1 + 48) = v61;
      *(_DWORD *)(a1 + 56) = v57;
      *(_BYTE *)(a1 + 60) = 1;
      v75 = *(_QWORD *)(a1 + 128);
      if (v75 == v61)
      {
        v76 = *(_DWORD *)(a1 + 136);
        if (v43 < v44)
        {
          if (!v43)
            goto LABEL_321;
          *(_QWORD *)v43 = &off_24C0BB370;
          *((_DWORD *)v43 + 2) = v61;
          *((_DWORD *)v43 + 3) = v76;
          goto LABEL_170;
        }
        v88 = (v43 - v42) >> 5;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 59)
          goto LABEL_323;
        if ((v44 - v42) >> 4 > v89)
          v89 = (v44 - v42) >> 4;
        if ((unint64_t)(v44 - v42) >= 0x7FFFFFFFFFFFFFE0)
          v89 = 0x7FFFFFFFFFFFFFFLL;
        if (!v89)
          goto LABEL_321;
        if (v89 >> 59)
          goto LABEL_324;
        v90 = 32 * v89;
        v91 = (char *)operator new(32 * v89);
        v92 = v91;
        v93 = &v91[32 * v88];
        *(_QWORD *)v93 = &off_24C0BB370;
        *((_DWORD *)v93 + 2) = v61;
        *((_DWORD *)v93 + 3) = v76;
        v93[16] = 0;
        v93[20] = 0;
        v93[24] = 0;
        v93[28] = 0;
        if (v43 != v42)
        {
          v94 = v43;
          v95 = v93;
          do
          {
            *((_QWORD *)v95 - 4) = &off_24C0BB370;
            v95 -= 32;
            v96 = *(_OWORD *)(v94 - 24);
            *(_QWORD *)(v95 + 21) = *(_QWORD *)(v94 - 11);
            *(_OWORD *)(v95 + 8) = v96;
            v94 -= 32;
          }
          while (v94 != v42);
          v97 = v43 - 32;
          v98 = v97;
          do
          {
            v99 = *(void (***)(char *))v98;
            v98 -= 32;
            (*v99)(v97);
            v24 = v97 == v42;
            v97 = v98;
          }
          while (!v24);
          goto LABEL_227;
        }
        v95 = v93;
        v44 = &v91[v90];
        v43 = v93 + 32;
        if (!v42)
        {
LABEL_229:
          v42 = v95;
          v41 = v162;
          if (v173)
            goto LABEL_230;
          goto LABEL_63;
        }
      }
      else
      {
        if (v75 + 1 == v61)
        {
          if (v43 < v44)
          {
            if (!v43)
              goto LABEL_321;
            *(_QWORD *)v43 = &off_24C0BB370;
            *((_DWORD *)v43 + 2) = v57;
            *((_DWORD *)v43 + 3) = 0;
            v43[16] = 0;
            v43[20] = 0;
            v43[24] = 0;
            v43[28] = 0;
            v43 += 32;
            *(_QWORD *)(a1 + 128) = v61;
            if (!v173)
              goto LABEL_63;
LABEL_230:
            __p = &off_24C0B5360;
            if (v170)
            {
              v171 = v170;
              operator delete(v170);
            }
            goto LABEL_63;
          }
          v105 = (v43 - v42) >> 5;
          v106 = v105 + 1;
          if ((unint64_t)(v105 + 1) >> 59)
            goto LABEL_323;
          if ((v44 - v42) >> 4 > v106)
            v106 = (v44 - v42) >> 4;
          if ((unint64_t)(v44 - v42) >= 0x7FFFFFFFFFFFFFE0)
            v106 = 0x7FFFFFFFFFFFFFFLL;
          if (!v106)
            goto LABEL_321;
          if (v106 >> 59)
            goto LABEL_324;
          v107 = 32 * v106;
          v108 = (char *)operator new(32 * v106);
          v109 = v108;
          v110 = &v108[32 * v105];
          *(_QWORD *)v110 = &off_24C0BB370;
          *((_DWORD *)v110 + 2) = v57;
          *((_DWORD *)v110 + 3) = 0;
          v110[16] = 0;
          v110[20] = 0;
          v110[24] = 0;
          v110[28] = 0;
          if (v43 == v42)
          {
            v112 = v110;
            v44 = &v108[v107];
            v43 = v110 + 32;
            if (v42)
              goto LABEL_197;
          }
          else
          {
            v161 = v107;
            v111 = v43;
            v112 = v110;
            do
            {
              *((_QWORD *)v112 - 4) = &off_24C0BB370;
              v112 -= 32;
              v113 = *(_OWORD *)(v111 - 24);
              *(_QWORD *)(v112 + 21) = *(_QWORD *)(v111 - 11);
              *(_OWORD *)(v112 + 8) = v113;
              v111 -= 32;
            }
            while (v111 != v42);
            v114 = v43 - 32;
            v115 = v114;
            do
            {
              v116 = *(void (***)(char *))v115;
              v115 -= 32;
              (*v116)(v114);
              v24 = v114 == v42;
              v114 = v115;
            }
            while (!v24);
            v44 = &v109[v161];
            v43 = v110 + 32;
            if (v42)
LABEL_197:
              operator delete(v42);
          }
          v42 = v112;
          v41 = v162;
          *(_QWORD *)(a1 + 128) = v61;
          if (v173)
            goto LABEL_230;
          goto LABEL_63;
        }
        if (v43 < v44)
        {
          if (!v43)
            goto LABEL_321;
          *(_QWORD *)v43 = &off_24C0BB370;
          *((_DWORD *)v43 + 2) = v61;
          *((_DWORD *)v43 + 3) = 5;
LABEL_170:
          v43[16] = 0;
          v43[20] = 0;
          v43[24] = 0;
          v43[28] = 0;
          v43 += 32;
          if (v173)
            goto LABEL_230;
          goto LABEL_63;
        }
        v124 = (v43 - v42) >> 5;
        v125 = v124 + 1;
        if ((unint64_t)(v124 + 1) >> 59)
          goto LABEL_323;
        if ((v44 - v42) >> 4 > v125)
          v125 = (v44 - v42) >> 4;
        if ((unint64_t)(v44 - v42) >= 0x7FFFFFFFFFFFFFE0)
          v125 = 0x7FFFFFFFFFFFFFFLL;
        if (!v125)
          goto LABEL_321;
        if (v125 >> 59)
          goto LABEL_324;
        v90 = 32 * v125;
        v126 = (char *)operator new(32 * v125);
        v92 = v126;
        v93 = &v126[32 * v124];
        *(_QWORD *)v93 = &off_24C0BB370;
        *((_DWORD *)v93 + 2) = v61;
        *((_DWORD *)v93 + 3) = 5;
        v93[16] = 0;
        v93[20] = 0;
        v93[24] = 0;
        v93[28] = 0;
        if (v43 == v42)
        {
          v95 = v93;
          v44 = &v126[v90];
          v43 = v93 + 32;
          if (!v42)
            goto LABEL_229;
        }
        else
        {
          v127 = v43;
          v95 = v93;
          do
          {
            *((_QWORD *)v95 - 4) = &off_24C0BB370;
            v95 -= 32;
            v128 = *(_OWORD *)(v127 - 24);
            *(_QWORD *)(v95 + 21) = *(_QWORD *)(v127 - 11);
            *(_OWORD *)(v95 + 8) = v128;
            v127 -= 32;
          }
          while (v127 != v42);
          v129 = v43 - 32;
          v130 = v129;
          do
          {
            v131 = *(void (***)(char *))v130;
            v130 -= 32;
            (*v131)(v129);
            v24 = v129 == v42;
            v129 = v130;
          }
          while (!v24);
LABEL_227:
          v44 = &v92[v90];
          v43 = v93 + 32;
          if (!v42)
            goto LABEL_229;
        }
      }
      operator delete(v42);
      goto LABEL_229;
    }
    if (v46 != 13)
      goto LABEL_63;
    dcsctp::OutgoingSSNResetRequestParameter::Parse(*((unsigned __int16 **)v40 + 1), *((_QWORD *)v40 + 2), &__p);
    if (!v174)
    {
      v62 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v62 + 88))(v62, 3, "Failed to parse Outgoing Reset command", 38);
      if (v174)
        goto LABEL_290;
      goto LABEL_63;
    }
    v47 = (int)v169;
    if (*(_BYTE *)(a1 + 60))
    {
      v48 = *(_DWORD *)(a1 + 56);
      v49 = v169 >= v48;
      v50 = v169 - v48;
      v51 = (_DWORD)v50 != 0 && v49;
      if ((_DWORD)v50 != 0x80000000)
        v51 = (int)v50 >= 0;
      if (!v51)
        v50 |= 0xFFFFFFFF00000000;
      v52 = v50 + *(_QWORD *)(a1 + 48);
    }
    else
    {
      v52 = v169;
    }
    *(_QWORD *)(a1 + 48) = v52;
    *(_DWORD *)(a1 + 56) = v47;
    *(_BYTE *)(a1 + 60) = 1;
    v64 = *(_QWORD *)(a1 + 128);
    if (v64 == v52)
    {
      v65 = *(_DWORD *)(a1 + 136);
      if (v43 < v44)
      {
        if (!v43)
          goto LABEL_321;
        *(_QWORD *)v43 = &off_24C0BB370;
        *((_DWORD *)v43 + 2) = v52;
        *((_DWORD *)v43 + 3) = v65;
        goto LABEL_272;
      }
      v77 = (v43 - v42) >> 5;
      v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 59)
        goto LABEL_323;
      if ((v44 - v42) >> 4 > v78)
        v78 = (v44 - v42) >> 4;
      if ((unint64_t)(v44 - v42) >= 0x7FFFFFFFFFFFFFE0)
        v78 = 0x7FFFFFFFFFFFFFFLL;
      if (!v78)
        goto LABEL_321;
      if (v78 >> 59)
        goto LABEL_324;
      v79 = 32 * v78;
      v80 = (char *)operator new(32 * v78);
      v81 = &v80[32 * v77];
      *(_QWORD *)v81 = &off_24C0BB370;
      *((_DWORD *)v81 + 2) = v52;
      *((_DWORD *)v81 + 3) = v65;
      v81[16] = 0;
      v81[20] = 0;
      v81[24] = 0;
      v81[28] = 0;
      if (v43 != v42)
      {
        v82 = v43;
        v83 = v81;
        do
        {
          *((_QWORD *)v83 - 4) = &off_24C0BB370;
          v83 -= 32;
          v84 = *(_OWORD *)(v82 - 24);
          *(_QWORD *)(v83 + 21) = *(_QWORD *)(v82 - 11);
          *(_OWORD *)(v83 + 8) = v84;
          v82 -= 32;
        }
        while (v82 != v42);
        v85 = v43 - 32;
        v86 = v85;
        do
        {
          v87 = *(void (***)(char *))v86;
          v86 -= 32;
          (*v87)(v85);
          v24 = v85 == v42;
          v85 = v86;
        }
        while (!v24);
        goto LABEL_287;
      }
LABEL_292:
      v83 = v81;
      v44 = &v80[v79];
      v43 = v81 + 32;
      if (!v42)
      {
LABEL_289:
        v42 = v83;
        v41 = v162;
        if (v174)
        {
LABEL_290:
          __p = &off_24C0B8218;
          if (v171)
          {
            v172 = v171;
            operator delete(v171);
          }
          goto LABEL_63;
        }
        goto LABEL_63;
      }
LABEL_288:
      operator delete(v42);
      goto LABEL_289;
    }
    if (v64 + 1 != v52)
    {
      if (v43 < v44)
      {
        if (!v43)
          goto LABEL_321;
        *(_QWORD *)v43 = &off_24C0BB370;
        *((_DWORD *)v43 + 2) = v52;
        *((_DWORD *)v43 + 3) = 5;
        goto LABEL_272;
      }
      v117 = (v43 - v42) >> 5;
      v118 = v117 + 1;
      if ((unint64_t)(v117 + 1) >> 59)
        goto LABEL_323;
      if ((v44 - v42) >> 4 > v118)
        v118 = (v44 - v42) >> 4;
      if ((unint64_t)(v44 - v42) >= 0x7FFFFFFFFFFFFFE0)
        v118 = 0x7FFFFFFFFFFFFFFLL;
      if (!v118)
        goto LABEL_321;
      if (v118 >> 59)
        goto LABEL_324;
      v79 = 32 * v118;
      v80 = (char *)operator new(32 * v118);
      v81 = &v80[32 * v117];
      *(_QWORD *)v81 = &off_24C0BB370;
      *((_DWORD *)v81 + 2) = v52;
      *((_DWORD *)v81 + 3) = 5;
      v81[16] = 0;
      v81[20] = 0;
      v81[24] = 0;
      v81[28] = 0;
      if (v43 == v42)
        goto LABEL_292;
      v119 = v43;
      v83 = v81;
      do
      {
        *((_QWORD *)v83 - 4) = &off_24C0BB370;
        v83 -= 32;
        v120 = *(_OWORD *)(v119 - 24);
        *(_QWORD *)(v83 + 21) = *(_QWORD *)(v119 - 11);
        *(_OWORD *)(v83 + 8) = v120;
        v119 -= 32;
      }
      while (v119 != v42);
      v121 = v43 - 32;
      v122 = v121;
      do
      {
        v123 = *(void (***)(char *))v122;
        v122 -= 32;
        (*v123)(v121);
        v24 = v121 == v42;
        v121 = v122;
      }
      while (!v24);
LABEL_287:
      v44 = &v80[v79];
      v43 = v81 + 32;
      if (!v42)
        goto LABEL_289;
      goto LABEL_288;
    }
    v66 = v44;
    *(_QWORD *)(a1 + 128) = v52;
    v67 = *(_QWORD *)(a1 + 24);
    v68 = v170;
    if (*(_BYTE *)(v67 + 52))
    {
      v69 = *(_DWORD *)(v67 + 48);
      v49 = v170 >= v69;
      v70 = v170 - v69;
      v71 = (_DWORD)v70 != 0 && v49;
      if ((_DWORD)v70 != 0x80000000)
        v71 = (int)v70 >= 0;
      if (!v71)
        v70 |= 0xFFFFFFFF00000000;
      v68 = v70 + *(_QWORD *)(v67 + 40);
    }
    v72 = *(_QWORD *)(a1 + 32);
    if (v172 == v171)
      v73 = 0;
    else
      v73 = v171;
    if (v68 > *(_QWORD *)(v67 + 56))
    {
      dcsctp::ReassemblyQueue::EnterDeferredReset(*(_QWORD *)(a1 + 32), v170, v73, (v172 - (_BYTE *)v171) >> 1);
      v74 = 6;
LABEL_268:
      v44 = v66;
      *(_DWORD *)(a1 + 136) = v74;
      if (!v174)
        goto LABEL_321;
      v143 = (int)v169;
      if (v43 < v44)
      {
        if (!v43)
          goto LABEL_321;
        *(_QWORD *)v43 = &off_24C0BB370;
        *((_DWORD *)v43 + 2) = v143;
        *((_DWORD *)v43 + 3) = v74;
LABEL_272:
        v43[16] = 0;
        v43[20] = 0;
        v43[24] = 0;
        v43[28] = 0;
        v43 += 32;
        if (v174)
          goto LABEL_290;
        goto LABEL_63;
      }
      v144 = (v43 - v42) >> 5;
      v145 = v144 + 1;
      if ((unint64_t)(v144 + 1) >> 59)
        goto LABEL_323;
      if ((v44 - v42) >> 4 > v145)
        v145 = (v44 - v42) >> 4;
      if ((unint64_t)(v44 - v42) >= 0x7FFFFFFFFFFFFFE0)
        v145 = 0x7FFFFFFFFFFFFFFLL;
      if (!v145)
        goto LABEL_321;
      if (v145 >> 59)
LABEL_324:
        std::__throw_bad_array_new_length[abi:sn180100]();
      v79 = 32 * v145;
      v80 = (char *)operator new(32 * v145);
      v81 = &v80[32 * v144];
      *(_QWORD *)v81 = &off_24C0BB370;
      *((_DWORD *)v81 + 2) = v143;
      *((_DWORD *)v81 + 3) = v74;
      v81[16] = 0;
      v81[20] = 0;
      v81[24] = 0;
      v81[28] = 0;
      if (v43 == v42)
        goto LABEL_292;
      v146 = v43;
      v83 = v81;
      do
      {
        *((_QWORD *)v83 - 4) = &off_24C0BB370;
        v83 -= 32;
        v147 = *(_OWORD *)(v146 - 24);
        *(_QWORD *)(v83 + 21) = *(_QWORD *)(v146 - 11);
        *(_OWORD *)(v83 + 8) = v147;
        v146 -= 32;
      }
      while (v146 != v42);
      v148 = v43 - 32;
      v149 = v148;
      do
      {
        v150 = *(void (***)(char *))v149;
        v149 -= 32;
        (*v150)(v148);
        v24 = v148 == v42;
        v148 = v149;
      }
      while (!v24);
      goto LABEL_287;
    }
    if (v172 == v171)
      v100 = 0;
    else
      v100 = v73;
    (*(void (**)(_QWORD, void *, int64_t))(**(_QWORD **)(v72 + 144) + 32))(*(_QWORD *)(v72 + 144), v100, (v172 - (_BYTE *)v171) >> 1);
    if (*(_BYTE *)(v72 + 128))
    {
      v102 = *(void (***)(uint64_t, uint64_t, uint64_t))(v72 + 104);
      v101 = *(void (***)(uint64_t, uint64_t, uint64_t))(v72 + 112);
      *(_QWORD *)(v72 + 112) = 0;
      *(_QWORD *)(v72 + 120) = 0;
      *(_QWORD *)(v72 + 104) = 0;
      v103 = *(void **)(v72 + 80);
      if (v103)
      {
        *(_QWORD *)(v72 + 88) = v103;
        operator delete(v103);
      }
      *(_BYTE *)(v72 + 128) = 0;
      v104 = (void (**)(void *))v102;
      if (v102 != v101)
      {
        do
        {
          v104[3](v104);
          v104 += 4;
        }
        while (v104 != (void (**)(void *))v101);
        if (!v102)
          goto LABEL_263;
        do
        {
          (*(v101 - 2))(1, (uint64_t)(v101 - 4), (uint64_t)(v101 - 4));
          v101 -= 4;
        }
        while (v101 != v102);
        goto LABEL_262;
      }
      if (v102)
LABEL_262:
        operator delete(v102);
    }
LABEL_263:
    v141 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
    if (!v174)
      goto LABEL_321;
    if (v172 == v171)
      v142 = 0;
    else
      v142 = v171;
    (*(void (**)(uint64_t, void *, int64_t))(*(_QWORD *)v141 + 144))(v141, v142, (v172 - (_BYTE *)v171) >> 1);
    v74 = 1;
    v41 = v162;
    goto LABEL_268;
  }
  v42 = 0;
  v43 = 0;
  if (v163)
  {
LABEL_296:
    v164[0] = v40;
    operator delete(v40);
  }
LABEL_297:
  if (v42 == v43)
  {
    if (!v42)
      return;
    goto LABEL_319;
  }
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 16) + 88))(&__p);
  v166[0] = 0;
  v166[1] = 0;
  v152 = v42;
  v167 = 0;
  do
  {
    v153 = (char *)v166[1] - (char *)v166[0];
    if ((((char *)v166[1] - (char *)v166[0]) & 3) != 0)
    {
      v154 = (v153 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      if (v154 > v153)
      {
        std::vector<unsigned char>::__append((char **)v166, v154 - v153);
      }
      else if (v154 < v153)
      {
        v166[1] = (char *)v166[0] + v154;
      }
    }
    (*(void (**)(char *, void **))(*(_QWORD *)v152 + 16))(v152, v166);
    v152 += 32;
  }
  while (v152 != v43);
  v155 = v167;
  v156 = *(_OWORD *)v166;
  v166[1] = 0;
  v167 = 0;
  v166[0] = 0;
  v163 = &off_24C0BB340;
  *(_OWORD *)v164 = v156;
  v165 = v155;
  dcsctp::SctpPacket::Builder::Add((uint64_t)&__p, (uint64_t)&v163);
  v163 = &off_24C0BB340;
  if (v164[0])
  {
    v164[1] = v164[0];
    operator delete(v164[0]);
  }
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16), &__p);
  if (v166[0])
  {
    v166[1] = v166[0];
    operator delete(v166[0]);
  }
  if (v170)
  {
    v171 = v170;
    operator delete(v170);
  }
  if (v42)
  {
    v157 = v43 - 32;
    v158 = v43 - 32;
    do
    {
      v159 = *(void (***)(char *))v158;
      v158 -= 32;
      (*v159)(v157);
      v24 = v157 == v42;
      v157 = v158;
    }
    while (!v24);
LABEL_319:
    operator delete(v42);
  }
}

double dcsctp::StreamResetHandler::MakeStreamResetRequest@<D0>(dcsctp::StreamResetHandler *this@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  uint64_t v29;

  if (*((_BYTE *)this + 120)
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 5) + 376) + 40))(*(_QWORD *)(*((_QWORD *)this + 5) + 376)) & 1) == 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }
  v5 = *((_QWORD *)this + 5);
  v6 = *(_QWORD *)(v5 + 392);
  v7 = *(_QWORD *)(v5 + 472);
  v8 = v6 + (int)v7 + 1;
  *(_QWORD *)v28 = v8;
  v9 = *(_BYTE **)(v5 + 544);
  v10 = *(_BYTE **)(v5 + 552);
  if (v10 == v9)
  {
    v9 = *(_BYTE **)(v5 + 552);
LABEL_14:
    std::vector<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>>::emplace<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>>((void **)(v5 + 544), v9, (uint64_t *)v28);
    goto LABEL_15;
  }
  v11 = (v10 - v9) >> 3;
  do
  {
    v12 = v11 >> 1;
    v13 = &v9[8 * (v11 >> 1)];
    v15 = *v13;
    v14 = v13 + 1;
    v11 += ~(v11 >> 1);
    if (v15 < v8)
      v9 = v14;
    else
      v11 = v12;
  }
  while (v11);
  if (v9 == v10 || v8 < *(_QWORD *)v9)
    goto LABEL_14;
LABEL_15:
  v16 = v7 + v6;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v5 + 376) + 48))(v28);
  if (*((_BYTE *)this + 120))
  {
    v17 = (void *)*((_QWORD *)this + 12);
    if (v17)
    {
      *((_QWORD *)this + 13) = v17;
      operator delete(v17);
    }
  }
  v18 = *(_QWORD *)&v28[16];
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 84) = 0;
  *((_DWORD *)this + 22) = v16;
  *((_OWORD *)this + 6) = *(_OWORD *)v28;
  *((_QWORD *)this + 14) = v18;
  *((_BYTE *)this + 120) = 1;
  v19 = *((_QWORD *)this + 8);
  v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
  v21 = 86400000000;
  if (v20 < 86400000000)
    v21 = v20;
  *(_QWORD *)(v19 + 144) = v21;
  dcsctp::Timer::Start(*((dcsctp::Timer **)this + 8));
  dcsctp::StreamResetHandler::MakeReconfigChunk(this, v22, v23, v24, v25, v26, v27, v28);
  *(_QWORD *)a2 = &off_24C0BB340;
  result = *(double *)&v28[8];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)&v28[8];
  *(_QWORD *)(a2 + 24) = v29;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

void dcsctp::StreamResetHandler::MakeReconfigChunk(dcsctp::StreamResetHandler *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  int v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  void *v17;
  size_t v18;
  char *v19;
  char *v20;
  void *v21;
  void (**v22)(dcsctp::OutgoingSSNResetRequestParameter *__hidden);
  int v23;
  int v24;
  int v25;
  void *__p;
  char *v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;

  if (!*((_BYTE *)this + 120))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (!*((_BYTE *)this + 84))
  {
    v9 = *((_DWORD *)this + 18);
    *((_BYTE *)this + 84) = 1;
    *((_DWORD *)this + 20) = v9;
    *((_DWORD *)this + 18) = v9 + 1;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v10 = *((_DWORD *)this + 22);
    v12 = (_BYTE *)*((_QWORD *)this + 12);
    v16 = (_BYTE *)*((_QWORD *)this + 13);
    v13 = v16 - v12;
    if (v16 != v12)
      goto LABEL_4;
LABEL_7:
    v14 = 0;
    v15 = 0;
    goto LABEL_8;
  }
  v9 = *((_DWORD *)this + 20);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v10 = *((_DWORD *)this + 22);
  v12 = (_BYTE *)*((_QWORD *)this + 12);
  v11 = (_BYTE *)*((_QWORD *)this + 13);
  v13 = v11 - v12;
  if (v11 == v12)
    goto LABEL_7;
LABEL_4:
  if (v13 < 0)
    goto LABEL_18;
  v14 = (char *)operator new(v13);
  v15 = &v14[2 * (v13 >> 1)];
  memcpy(v14, v12, v13);
LABEL_8:
  v22 = &off_24C0B8218;
  v23 = v9;
  v24 = v9;
  v25 = v10;
  __p = v14;
  v27 = v15;
  v28 = v15;
  dcsctp::OutgoingSSNResetRequestParameter::SerializeTo((uint64_t)&v22, (uint64_t)&v29, a2, a3, a4, a5, a6, a7);
  v17 = v29;
  v18 = v30 - v29;
  if (v30 != v29)
  {
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = (char *)operator new(v30 - v29);
      v20 = &v19[v18];
      memcpy(v19, v17, v18);
      v21 = __p;
      if (!__p)
        goto LABEL_12;
      goto LABEL_11;
    }
LABEL_18:
    abort();
  }
  v20 = 0;
  v19 = 0;
  v21 = __p;
  if (__p)
  {
LABEL_11:
    operator delete(v21);
    v17 = v29;
  }
LABEL_12:
  if (v17)
  {
    v30 = v17;
    operator delete(v17);
  }
  *a8 = &off_24C0BB340;
  a8[1] = v19;
  a8[2] = v20;
  a8[3] = v20;
}

uint64_t dcsctp::StreamResetHandler::OnReconfigTimerExpiry(uint64_t this)
{
  dcsctp::StreamResetHandler *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(dcsctp::ReConfigChunk *__hidden);
  void *__p;
  void *v12;
  void *v13[2];
  void *v14;
  void *v15;

  if (*(_BYTE *)(this + 120))
  {
    v1 = (dcsctp::StreamResetHandler *)this;
    if (*(_BYTE *)(this + 84)
      && !(*(unsigned int (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(this + 16) + 64))(*(_QWORD *)(this + 16), "RECONFIG timeout", 16))
    {
      return 0;
    }
    else
    {
      v2 = *((_QWORD *)v1 + 2);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v2 + 88))(v13, v2);
      dcsctp::StreamResetHandler::MakeReconfigChunk(v1, v3, v4, v5, v6, v7, v8, &v10);
      v9 = dcsctp::SctpPacket::Builder::Add((uint64_t)v13, (uint64_t)&v10);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 96))(v2, v9);
      v10 = &off_24C0BB340;
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 2) + 56))(*((_QWORD *)v1 + 2));
    }
  }
  else
  {
    __break(1u);
  }
  return this;
}

void dcsctp::StreamScheduler::Produce(dcsctp::StreamScheduler *this@<X0>, Timestamp a2@<0:X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  dcsctp::StreamScheduler::Stream ***v8;
  dcsctp::StreamScheduler::Stream **v9;
  dcsctp::StreamScheduler::Stream **v10;
  dcsctp::StreamScheduler::Stream ***v11;
  dcsctp::StreamScheduler::Stream **v12;
  dcsctp::StreamScheduler::Stream *v13;
  int64_t v14;
  double *v15;
  double v16;
  _BOOL4 v17;
  double *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  dcsctp::StreamScheduler::Stream *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 40))
  {
    v8 = (dcsctp::StreamScheduler::Stream ***)((char *)this + 48);
    v9 = (dcsctp::StreamScheduler::Stream **)*((_QWORD *)this + 6);
    v11 = (dcsctp::StreamScheduler::Stream ***)((char *)this + 56);
    v10 = (dcsctp::StreamScheduler::Stream **)*((_QWORD *)this + 7);
    if (v9 != v10)
    {
      v12 = (dcsctp::StreamScheduler::Stream **)((char *)this + 32);
      goto LABEL_7;
    }
    goto LABEL_23;
  }
  v17 = *((_BYTE *)this + 41) == 0;
  v8 = (dcsctp::StreamScheduler::Stream ***)((char *)this + 48);
  v9 = (dcsctp::StreamScheduler::Stream **)*((_QWORD *)this + 6);
  v11 = (dcsctp::StreamScheduler::Stream ***)((char *)this + 56);
  v10 = (dcsctp::StreamScheduler::Stream **)*((_QWORD *)this + 7);
  if (v9 == v10)
  {
LABEL_23:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 80) = 0;
    return;
  }
  v12 = (dcsctp::StreamScheduler::Stream **)((char *)this + 32);
  if (*((_BYTE *)this + 41))
  {
    do
    {
      v18 = (double *)*v12;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, int64_t, uint64_t))(**((_QWORD **)*v12 + 1) + 16))(&v37, *((_QWORD *)*v12 + 1), a2.var0, a3);
      if (v47)
      {
        v19 = v18[4];
        if (*(_BYTE *)(*(_QWORD *)v18 + 40))
        {
          v18[4] = v19 + (double)(unint64_t)(v40 - v39) * v18[3];
          if (v47)
            goto LABEL_25;
        }
        else
        {
          v18[4] = v19 + 1.0;
          if (v47)
            goto LABEL_25;
        }
      }
    }
    while (*v8 != *v11);
    goto LABEL_23;
  }
  while (1)
  {
LABEL_7:
    v13 = *v9;
    *v12 = *v9;
    v14 = (char *)v10 - (char *)(v9 + 1);
    if (v10 != v9 + 1)
    {
      memmove(v9, v9 + 1, (char *)v10 - (char *)(v9 + 1));
      v13 = *v12;
    }
    *v11 = (dcsctp::StreamScheduler::Stream **)((char *)v9 + v14);
    *((_QWORD *)v13 + 5) = 0;
    v15 = (double *)*v12;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, int64_t, uint64_t))(**((_QWORD **)*v12 + 1) + 16))(&v37, *((_QWORD *)*v12 + 1), a2.var0, a3);
    if (!v47)
      goto LABEL_12;
    v16 = v15[4];
    if (!*(_BYTE *)(*(_QWORD *)v15 + 40))
      break;
    v15[4] = v16 + (double)(unint64_t)(v40 - v39) * v15[3];
    if (v47)
      goto LABEL_24;
LABEL_12:
    v9 = *v8;
    v10 = *v11;
    if (*v8 == *v11)
      goto LABEL_23;
  }
  v15[4] = v16 + 1.0;
  if (!v47)
    goto LABEL_12;
LABEL_24:
  v17 = 1;
LABEL_25:
  v35 = v37;
  v50 = v38;
  v20 = v39;
  v36 = v40;
  v21 = v41;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v22 = v42;
  v23 = v43;
  v24 = v44;
  v48 = v45;
  v49 = v46;
  *((_BYTE *)this + 41) = v43 ^ 1;
  v25 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = *(_QWORD *)(v25 + 32);
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 8) + 24))(*(_QWORD *)(v25 + 8));
  if (v17 && v26)
  {
    dcsctp::StreamScheduler::Stream::MakeActive(*v12, v26);
    goto LABEL_32;
  }
  if (v26)
    v27 = 1;
  else
    v27 = v17;
  if ((v27 & 1) != 0
    || (v28 = *v12,
        *((_QWORD *)v28 + 5) = 0,
        v29 = *(_QWORD *)v28,
        v31 = *(char **)(*(_QWORD *)v28 + 48),
        v30 = *(char **)(*(_QWORD *)v28 + 56),
        v31 == v30))
  {
LABEL_32:
    *(_DWORD *)a4 = v35;
    *(_OWORD *)(a4 + 8) = v50;
    *(_QWORD *)(a4 + 24) = v20;
    *(_QWORD *)(a4 + 32) = v36;
    *(_QWORD *)(a4 + 40) = v21;
    *(_BYTE *)(a4 + 48) = v22;
    *(_BYTE *)(a4 + 49) = v23;
    *(_BYTE *)(a4 + 50) = v24;
    *(_OWORD *)(a4 + 56) = v48;
    *(_QWORD *)(a4 + 72) = v49;
    *(_BYTE *)(a4 + 80) = 1;
  }
  else
  {
    while (*(dcsctp::StreamScheduler::Stream **)v31 != v28)
    {
      v31 += 8;
      if (v31 == v30)
        goto LABEL_32;
    }
    if (v31 != v30)
    {
      v32 = v31 + 8;
      if (v31 + 8 != v30)
      {
        do
        {
          if (*(dcsctp::StreamScheduler::Stream **)v32 != v28)
          {
            *(_QWORD *)v31 = *(_QWORD *)v32;
            v31 += 8;
          }
          v32 += 8;
        }
        while (v32 != v30);
        v30 = *(char **)(v29 + 56);
      }
    }
    if (v30 >= v31)
    {
      if (v31 != v30)
      {
        v33 = &v31[8 * ((v30 - v31) >> 3)];
        v34 = v30 - v33;
        if (v30 != v33)
          memmove(v31, v33, v30 - v33);
        *(_QWORD *)(v29 + 56) = &v31[v34];
      }
      goto LABEL_32;
    }
    __break(1u);
  }
}

void dcsctp::StreamScheduler::Stream::MakeActive(dcsctp::StreamScheduler::Stream *this, unint64_t a2)
{
  uint64_t v3;
  double v4;
  double v5;
  unint64_t v6;
  double v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  double v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  size_t v38;
  void *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;

  v3 = *(_QWORD *)this;
  v4 = *(double *)(*(_QWORD *)this + 24);
  *((double *)this + 4) = v4;
  v5 = v4;
  if (*(_BYTE *)(v3 + 40))
  {
    v6 = *(_QWORD *)(v3 + 16);
    if (v6 >= a2)
      v6 = a2;
    v7 = v5 + (double)v6 * *((double *)this + 3);
    *((double *)this + 5) = v7;
    v9 = *(char **)(v3 + 48);
    v8 = *(char **)(v3 + 56);
    v10 = v8 - v9;
    if (v8 != v9)
      goto LABEL_5;
  }
  else
  {
    v7 = v4 + 1.0;
    *((double *)this + 5) = v4 + 1.0;
    v9 = *(char **)(v3 + 48);
    v8 = *(char **)(v3 + 56);
    v10 = v8 - v9;
    if (v8 != v9)
    {
LABEL_5:
      v11 = v10 >> 3;
      v12 = v9;
      while (1)
      {
        v13 = v11 >> 1;
        v14 = &v12[8 * (v11 >> 1)];
        v15 = *(double *)(*(_QWORD *)v14 + 40);
        if (v15 == v7)
        {
          if (*(unsigned __int16 *)(*(_QWORD *)v14 + 16) >= *((unsigned __int16 *)this + 8))
            goto LABEL_7;
        }
        else if (v15 >= v7)
        {
          goto LABEL_7;
        }
        v12 = v14 + 8;
        v13 = v11 + ~v13;
LABEL_7:
        v11 = v13;
        if (!v13)
          goto LABEL_15;
      }
    }
  }
  v12 = v9;
LABEL_15:
  v16 = v12 - v9;
  v17 = (v12 - v9) >> 3;
  v18 = &v9[(v12 - v9) & 0xFFFFFFFFFFFFFFF8];
  if (v18 == v8)
  {
    v20 = *(_QWORD *)(v3 + 64);
    if ((unint64_t)v8 < v20)
    {
      if (v9)
      {
        *(_QWORD *)v8 = this;
        *(_QWORD *)(v3 + 56) = v8 + 8;
        return;
      }
LABEL_69:
      __break(1u);
LABEL_70:
      abort();
    }
  }
  else
  {
    v19 = *(double *)(*(_QWORD *)v18 + 40);
    if (v7 == v19)
    {
      if (*((unsigned __int16 *)this + 8) >= *(unsigned __int16 *)(*(_QWORD *)v18 + 16))
        return;
    }
    else if (v7 >= v19)
    {
      return;
    }
    v20 = *(_QWORD *)(v3 + 64);
    if ((unint64_t)v8 < v20)
    {
      v21 = v8 - 8;
      if ((unint64_t)v8 < 8)
      {
        v22 = v8;
      }
      else
      {
        v22 = v8;
        do
        {
          v49 = *(_QWORD *)v21;
          v21 += 8;
          *(_QWORD *)v22 = v49;
          v22 += 8;
        }
        while (v21 < v8);
      }
      *(_QWORD *)(v3 + 56) = v22;
      if (v8 != v18 + 8)
        memmove(&v8[-8 * ((v8 - (v18 + 8)) >> 3)], &v9[(v12 - v9) & 0xFFFFFFFFFFFFFFF8], v8 - (v18 + 8));
      *(_QWORD *)v18 = this;
      return;
    }
  }
  v23 = (v10 >> 3) + 1;
  if (v23 >> 61)
    goto LABEL_70;
  v24 = v20 - (_QWORD)v9;
  v25 = (uint64_t)(v20 - (_QWORD)v9) >> 2;
  if (v25 > v23)
    v23 = v25;
  if (v24 >= 0x7FFFFFFFFFFFFFF8)
    v26 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v26 = v23;
  if (v26)
  {
    if (v26 >> 61)
      goto LABEL_71;
    v27 = (char *)operator new(8 * v26);
    v28 = &v27[8 * v17];
    if (v17 != v26)
      goto LABEL_41;
  }
  else
  {
    v27 = 0;
    v28 = (char *)(8 * v17);
    if (v17)
      goto LABEL_41;
  }
  if (v16 >= 1)
  {
    v29 = v17 + 2;
    if (v17 >= -1)
      v29 = v17 + 1;
    v28 -= 8 * (v29 >> 1);
LABEL_41:
    if (v28)
    {
      v30 = &v27[8 * v26];
      goto LABEL_43;
    }
    goto LABEL_69;
  }
  v41 = v16 >> 2;
  if (v12 == v9)
    v41 = 1;
  if (v41 >> 61)
LABEL_71:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v42 = 8 * v41;
  v28 = (char *)operator new(8 * v41);
  v30 = &v28[v42];
  if (v27)
    operator delete(v27);
LABEL_43:
  *(_QWORD *)v28 = this;
  v31 = *(char **)(v3 + 48);
  if (v31 != v18)
  {
    v32 = &v9[v16 & 0xFFFFFFFFFFFFFFF8];
    v33 = v32 - v31 - 8;
    if (v33 >= 0x58 && (unint64_t)(v32 - v28) >= 0x20)
    {
      v43 = (v33 >> 3) + 1;
      v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
      v34 = &v18[-v44];
      v35 = &v28[-v44];
      v45 = v28 - 16;
      v46 = &v9[8 * v17 - 16];
      v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v48 = *(_OWORD *)v46;
        *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
        *(_OWORD *)v45 = v48;
        v45 -= 32;
        v46 -= 32;
        v47 -= 4;
      }
      while (v47);
      if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_48:
        v37 = *(char **)(v3 + 56);
        v38 = v37 - v18;
        if (v37 == v18)
          goto LABEL_50;
        goto LABEL_49;
      }
    }
    else
    {
      v34 = v18;
      v35 = v28;
    }
    do
    {
      v36 = *((_QWORD *)v34 - 1);
      v34 -= 8;
      *((_QWORD *)v35 - 1) = v36;
      v35 -= 8;
    }
    while (v34 != v31);
    goto LABEL_48;
  }
  v35 = v28;
  v40 = *(char **)(v3 + 56);
  v38 = v40 - v18;
  if (v40 != v18)
LABEL_49:
    memmove(v28 + 8, v18, v38);
LABEL_50:
  v39 = *(void **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v35;
  *(_QWORD *)(v3 + 56) = &v28[v38 + 8];
  *(_QWORD *)(v3 + 64) = v30;
  if (v39)
    operator delete(v39);
}

uint64_t webrtc::StreamSynchronization::ComputeRelativeDelay(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  double v7;

  if (*(_BYTE *)(a1 + 48))
  {
    v1 = *(_DWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 68))
    {
      v2 = *(_DWORD *)(a1 + 64);
      v3 = v1 >= v2;
      v4 = v1 - v2;
      v5 = (_DWORD)v4 != 0 && v3;
      if ((_DWORD)v4 != 0x80000000)
        v5 = (int)v4 >= 0;
      if (!v5)
        v4 |= 0xFFFFFFFF00000000;
      v6 = v4 + *(_QWORD *)(a1 + 56);
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 80);
    }
    *(_QWORD *)(a1 + 56) = v6;
    *(_DWORD *)(a1 + 64) = v1;
    *(_BYTE *)(a1 + 68) = 1;
    v7 = *(double *)(a1 + 40) + (double)v6 * *(double *)(a1 + 32) + 0.5;
    __asm { BR              X12 }
  }
  return *(unsigned __int8 *)(a1 + 48);
}

BOOL webrtc::StreamSynchronization::ComputeDelays(webrtc::StreamSynchronization *this, int a2, int a3, int *a4, int *a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  const char *v47;
  uint64_t v48;
  char *v49;

  v10 = *a5;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/stream_synchronization.cc");
  v18 = 3 * *((_DWORD *)this + 7);
  v19 = a2 - a3 + v10;
  v20 = __OFADD__(v19, v18);
  v21 = v19 + v18;
  v22 = v21 + 3;
  if (v21 < 0 == v20)
    v22 = v21;
  v23 = v22 >> 2;
  *((_DWORD *)this + 7) = v23;
  if (v23 >= 0)
    v24 = v23;
  else
    v24 = -v23;
  if (v24 >= 0x1E)
  {
    v25 = v21 / 8;
    if (v25 >= 80)
      v25 = 80;
    if (v25 <= -80)
      v26 = -80;
    else
      v26 = v25;
    *((_DWORD *)this + 7) = 0;
    v27 = *((_DWORD *)this + 6);
    if (v26 < 1)
    {
      v29 = *((_DWORD *)this + 2);
      if (v29 > v27)
        goto LABEL_18;
      v28 = *((_DWORD *)this + 4);
    }
    else
    {
      v28 = *((_DWORD *)this + 4);
      if (v28 <= v27)
      {
        v29 = *((_DWORD *)this + 2);
LABEL_18:
        v30 = v29 + v26;
        *((_DWORD *)this + 2) = v30;
        *((_DWORD *)this + 4) = v27;
        v31 = v27;
        goto LABEL_29;
      }
    }
    v32 = v28 - v26;
    *((_DWORD *)this + 2) = v27;
    if (v32 <= v27)
      v31 = v27;
    else
      v31 = v32;
    *((_DWORD *)this + 4) = v31;
    if (v27 < v32)
    {
      v33 = v27 + 10000;
      if (v27 + 10000 >= v31)
        v34 = v31;
      else
        v34 = v27 + 10000;
      v30 = v27;
LABEL_35:
      v35 = *((_DWORD *)this + 3);
LABEL_36:
      if (v35 <= v30)
        v36 = v30;
      else
        v36 = v35;
      if (v33 >= v36)
        v37 = v36;
      else
        v37 = v33;
      *((_DWORD *)this + 5) = v34;
      *((_DWORD *)this + 3) = v37;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      {
        v47 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/stream_synchronization.cc";
        v48 = 1304;
        v49 = &v46;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/stream_synchronization.cc");
      }
      *a5 = v34;
      *a4 = v37;
      return v24 > 0x1D;
    }
    v30 = v27;
LABEL_29:
    if (*((_DWORD *)this + 5) > v31)
      v31 = *((_DWORD *)this + 5);
    v33 = v27 + 10000;
    if (v27 + 10000 >= v31)
      v34 = v31;
    else
      v34 = v27 + 10000;
    v35 = v30;
    if (v30 > v27)
      goto LABEL_36;
    goto LABEL_35;
  }
  return v24 > 0x1D;
}

rtc::SimpleStringBuilder *rtc::SimpleStringBuilder::AppendFormat(rtc::SimpleStringBuilder *this, const char *__format, ...)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  va_list va;

  va_start(va, __format);
  v3 = vsnprintf((char *)(*(_QWORD *)this + *((_QWORD *)this + 2)), *((_QWORD *)this + 1) - *((_QWORD *)this + 2), __format, va);
  if ((v3 & 0x80000000) != 0)
  {
    *(_BYTE *)(*(_QWORD *)this + *((_QWORD *)this + 2)) = 0;
    return this;
  }
  else
  {
    v4 = *((_QWORD *)this + 2);
    v5 = *((_QWORD *)this + 1) + ~v4;
    if (v5 > v3)
      LODWORD(v5) = v3;
    *((_QWORD *)this + 2) = v4 + (int)v5;
    return this;
  }
}

std::string *rtc::StringBuilder::AppendFormat(std::string *this, const char *__format, ...)
{
  std::string *result;
  int v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  va_list va;

  va_start(va, __format);
  result = (std::string *)vsnprintf(0, 0, __format, va);
  if ((int)result < 1)
    return this;
  v5 = (int)result;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v7 = size + result;
    goto LABEL_5;
  }
  size = this->__r_.__value_.__l.__size_;
  v7 = size + result;
  if (size < v7)
  {
LABEL_5:
    result = std::string::append(this, v7 - size, 0);
    v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    if (this->__r_.__value_.__l.__size_ >= size)
      goto LABEL_7;
    goto LABEL_13;
  }
  v10 = this->__r_.__value_.__r.__words[0];
  this->__r_.__value_.__l.__size_ = v7;
  *(_BYTE *)(v10 + v7) = 0;
  v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_12;
LABEL_6:
  if (v8 >= size)
  {
LABEL_7:
    v9 = this;
    if ((v8 & 0x80) != 0)
      v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    vsnprintf((char *)v9 + size, (v5 + 1), __format, va);
    return this;
  }
LABEL_13:
  __break(1u);
  return result;
}

void rtc::hex_encode(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;

  v3 = a3;
  v4 = 2 * a2;
  if ((unint64_t)(2 * a2) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = a2;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)v3 + 1) = v4;
    *((_QWORD *)v3 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)v3 = v7;
LABEL_11:
    bzero(v7, v4);
    *((_BYTE *)v7 + v4) = 0;
    if ((char)v3[23] >= 0)
      a3 = v3;
    else
      a3 = *(_BYTE **)v3;
    if (!v5)
      return;
LABEL_15:
    v10 = a3 + 1;
    do
    {
      v11 = *a1++;
      v10 += 2;
      --v5;
    }
    while (v5);
    return;
  }
  a3[23] = v4;
  v7 = a3;
  if (v4)
    goto LABEL_11;
  *a3 = 0;
  if ((char)a3[23] < 0)
    a3 = *(_BYTE **)a3;
  if (a2)
    goto LABEL_15;
}

void rtc::hex_encode_with_delimiter(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  _BYTE *v4;
  BOOL v5;
  size_t v6;
  unint64_t v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned int v20;

  v4 = a4;
  if (a3)
    v5 = a2 == 0;
  else
    v5 = 1;
  if (v5)
    v6 = 2 * a2;
  else
    v6 = 3 * a2 - 1;
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v8 = a2;
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v12 | 0x8000000000000000;
    *(_QWORD *)v4 = v10;
LABEL_17:
    bzero(v10, v6);
    *((_BYTE *)v10 + v6) = 0;
    if ((char)v4[23] >= 0)
      a4 = v4;
    else
      a4 = *(_BYTE **)v4;
    if (!v8)
      return;
    goto LABEL_21;
  }
  a4[23] = v6;
  v10 = a4;
  if (v6)
    goto LABEL_17;
  *a4 = 0;
  if ((char)a4[23] < 0)
    a4 = *(_BYTE **)a4;
  if (a2)
  {
LABEL_21:
    if (a3)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = a1[v14];
        v16 = v14 + 1;
        v17 = &a4[v13];
        v18 = v13 + 2;
        if (v16 < v8)
        {
          a4[v18] = a3;
          v18 = v13 + 3;
        }
        v13 = v18;
        v14 = v16;
      }
      while (v8 != v16);
    }
    else
    {
      v19 = a4 + 1;
      do
      {
        v20 = *a1++;
        v19 += 2;
        --v8;
      }
      while (v8);
    }
  }
}

uint64_t rtc::hex_decode_with_delimiter(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  int v17;
  char v18;
  int v19;

  if (!a2)
    return 0;
  if (a5)
  {
    v5 = 0;
    if (a2 >= (a4 + 1) / 3 && a4 != 0)
    {
      v7 = 0;
      while (1)
      {
        if (a4 - v7 < 2)
          return 0;
        v9 = *(unsigned __int8 *)(a3 + v7);
        v10 = v9 - 48;
        if ((v9 - 48) >= 0xA)
        {
          if ((v9 - 65) > 5)
          {
            if ((v9 - 97) > 5)
              return 0;
            v10 = v9 - 87;
          }
          else
          {
            v10 = v9 - 55;
          }
        }
        if (a4 <= v7 + 1)
          goto LABEL_45;
        v11 = *(unsigned __int8 *)(a3 + v7 + 1);
        v12 = v11 - 48;
        if ((v11 - 48) >= 0xA)
        {
          if ((v11 - 65) > 5)
          {
            if ((v11 - 97) > 5)
              return 0;
            *(_BYTE *)(result + v5) = (v11 - 87) | (16 * v10);
            v8 = v7 + 2;
            if (a4 - (v7 + 2) < 2)
              goto LABEL_9;
            goto LABEL_21;
          }
          v12 = v11 - 55;
        }
        *(_BYTE *)(result + v5) = v12 | (16 * v10);
        v8 = v7 + 2;
        if (a4 - (v7 + 2) < 2)
          goto LABEL_9;
LABEL_21:
        if (a4 <= v8)
          goto LABEL_45;
        if (*(unsigned __int8 *)(a3 + v8) != a5)
          return 0;
        v8 = v7 + 3;
LABEL_9:
        ++v5;
        v7 = v8;
        if (v8 >= a4)
          return v5;
      }
    }
    return v5;
  }
  v5 = 0;
  if (a4 && a2 >= a4 >> 1)
  {
    v13 = 0;
    v14 = 0;
    while (a4 >> 1 != v13)
    {
      v17 = *(unsigned __int8 *)(a3 + v14);
      v18 = v17 - 48;
      if ((v17 - 48) >= 0xA)
      {
        if ((v17 - 65) >= 6)
        {
          if ((v17 - 97) > 5)
            return 0;
          v18 = v17 - 87;
        }
        else
        {
          v18 = v17 - 55;
        }
      }
      if (a4 <= v14 + 1)
      {
LABEL_45:
        __break(1u);
        return result;
      }
      v19 = *(unsigned __int8 *)(a3 + v14 + 1);
      v15 = v19 - 48;
      if ((v19 - 48) >= 0xA)
      {
        if ((v19 - 65) < 6)
        {
          v15 = v19 - 55;
        }
        else
        {
          if ((v19 - 97) > 5)
            return 0;
          v15 = v19 - 87;
        }
      }
      v16 = v15 | (16 * v18);
      v5 = v13 + 1;
      *(_BYTE *)(result + v13) = v16;
      v14 += 2;
      ++v13;
      if (v14 >= a4)
        return v5;
    }
    return 0;
  }
  return v5;
}

unint64_t rtc::tokenize(uint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  char *v8;
  char *i;
  uint64_t v10;
  unint64_t v11;
  int v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  size_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v8 = *(char **)a4;
  for (i = *(char **)(a4 + 8); i != v8; i -= 24)
  {
    if (*(i - 1) < 0)
      operator delete(*((void **)i - 3));
  }
  *(_QWORD *)(a4 + 8) = v8;
  if (!a2)
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*(_QWORD *)a4] >> 3);
  v10 = 0;
  v11 = 0;
  v12 = a3;
  do
  {
    while (*(unsigned __int8 *)(a1 + v10) != v12)
    {
      if (++v10 == a2)
        goto LABEL_32;
    }
    if (v10 != v11)
    {
      if (a2 < v11)
        goto LABEL_52;
      if (a2 - v11 >= v10 - v11)
        v13 = v10 - v11;
      else
        v13 = a2 - v11;
      if ((v13 & 0x8000000000000000) != 0)
        goto LABEL_51;
      v14 = (char *)(a1 + v11);
      if ((unint64_t)v8 >= *(_QWORD *)(a4 + 16))
      {
        v8 = std::vector<std::string>::__emplace_back_slow_path<std::string_view>((void **)a4, v14, v13);
LABEL_30:
        *(_QWORD *)(a4 + 8) = v8;
        goto LABEL_31;
      }
      if (!v8)
        goto LABEL_51;
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_52;
      if (v13 > 0x16)
      {
        v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v17 = v13 | 7;
        v18 = v17 + 1;
        v15 = (char *)operator new(v17 + 1);
        *((_QWORD *)v8 + 1) = v13;
        *((_QWORD *)v8 + 2) = v18 | 0x8000000000000000;
        *(_QWORD *)v8 = v15;
        v16 = &v15[v13];
        if (v15 > v14)
          goto LABEL_27;
      }
      else
      {
        v8[23] = v13;
        v15 = v8;
        v16 = &v8[v13];
        if (v8 > v14)
        {
LABEL_27:
          if (v13)
            memmove(v15, v14, v13);
          *v16 = 0;
          v8 += 24;
          goto LABEL_30;
        }
      }
      if (v16 > v14)
        goto LABEL_51;
      goto LABEL_27;
    }
LABEL_31:
    v11 = ++v10;
  }
  while (v10 != a2);
LABEL_32:
  v19 = a2 >= v11;
  v20 = a2 - v11;
  if (v20)
  {
    if (!v19)
LABEL_52:
      abort();
    if ((v20 & 0x8000000000000000) != 0 || !a1)
      goto LABEL_51;
    v21 = (char *)(a1 + v11);
    if ((unint64_t)v8 >= *(_QWORD *)(a4 + 16))
    {
      v8 = std::vector<std::string>::__emplace_back_slow_path<std::string_view>((void **)a4, v21, v20);
    }
    else
    {
      if (!v8)
        goto LABEL_51;
      if (v20 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_52;
      if (v20 <= 0x16)
      {
        v8[23] = v20;
        v22 = v8;
        if (v8 > v21)
          goto LABEL_48;
LABEL_47:
        if (&v22[v20] <= v21)
          goto LABEL_48;
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v23 = v20 | 7;
      v24 = v23 + 1;
      v22 = (char *)operator new(v23 + 1);
      *((_QWORD *)v8 + 1) = v20;
      *((_QWORD *)v8 + 2) = v24 | 0x8000000000000000;
      *(_QWORD *)v8 = v22;
      if (v22 <= v21)
        goto LABEL_47;
LABEL_48:
      memmove(v22, v21, v20);
      v22[v20] = 0;
      v8 += 24;
    }
    *(_QWORD *)(a4 + 8) = v8;
  }
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*(_QWORD *)a4] >> 3);
}

uint64_t rtc::tokenize_first(unsigned __int8 *a1, size_t __n, int __c, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v7;
  _BYTE *v10;
  uint64_t result;
  size_t v12;
  int64_t v13;
  size_t v14;
  size_t v15;
  int64_t v16;
  size_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  char *v24;
  __int128 *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;

  if (!__n)
    return 0;
  v7 = __c;
  v10 = memchr(a1, __c, __n);
  result = 0;
  if (v10)
  {
    v12 = v10 - a1;
    if (v10 - a1 != -1)
    {
      v13 = a1 - v10;
      v14 = v10 - a1;
      do
      {
        v15 = v14;
        v16 = v13;
        if (++v14 >= __n)
          break;
        --v13;
      }
      while (a1[v15 + 1] == v7);
      if (__n >= v12)
        v17 = v12;
      else
        v17 = __n;
      if ((v17 & 0x8000000000000000) != 0 || !a1 && v17)
        goto LABEL_44;
      if (v17 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_45;
      if (v17 > 0x16)
      {
        v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v20 = v17 | 7;
        v21 = v20 + 1;
        v18 = (unsigned __int8 *)operator new(v20 + 1);
        *((_QWORD *)&v29 + 1) = v17;
        v30 = v21 | 0x8000000000000000;
        *(_QWORD *)&v29 = v18;
        v19 = &v18[v17];
        if (v18 > a1)
          goto LABEL_22;
      }
      else
      {
        HIBYTE(v30) = v17;
        v18 = (unsigned __int8 *)&v29;
        v19 = (unsigned __int8 *)&v29 + v17;
        if (&v29 > (__int128 *)a1)
        {
LABEL_22:
          if (v17)
            memmove(v18, a1, v17);
          *v19 = 0;
          if (*(char *)(a4 + 23) < 0)
            operator delete(*(void **)a4);
          *(_OWORD *)a4 = v29;
          *(_QWORD *)(a4 + 16) = v30;
          if (__n <= v15)
LABEL_45:
            abort();
          v22 = ~v15 + __n;
          if ((v22 & 0x8000000000000000) == 0)
          {
            v23 = __n - 1;
            if (a1 || v23 == v15)
            {
              if (v22 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_45;
              v24 = (char *)&a1[v15 + 1];
              if (v22 > 0x16)
              {
                v27 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v22 | 7) != 0x17)
                  v27 = v22 | 7;
                v28 = v27 + 1;
                v25 = (__int128 *)operator new(v27 + 1);
                *((_QWORD *)&v29 + 1) = ~v15 + __n;
                v30 = v28 | 0x8000000000000000;
                *(_QWORD *)&v29 = v25;
                v26 = (char *)v25 + __n - 1;
                if (v25 > (__int128 *)v24)
                  goto LABEL_38;
              }
              else
              {
                HIBYTE(v30) = v22;
                v25 = &v29;
                v26 = (char *)&v29 + __n - 1;
                if (&v29 > (__int128 *)v24)
                  goto LABEL_38;
              }
              if (&v26[-v15] <= v24)
              {
LABEL_38:
                if (v23 != v15)
                  memmove(v25, v24, v22);
                v26[v16] = 0;
                if (*(char *)(a5 + 23) < 0)
                  operator delete(*(void **)a5);
                *(_OWORD *)a5 = v29;
                *(_QWORD *)(a5 + 16) = v30;
                return 1;
              }
            }
          }
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
      }
      if (v19 > a1)
        goto LABEL_44;
      goto LABEL_22;
    }
  }
  return result;
}

void rtc::split(size_t __sz@<X0>, unint64_t a2@<X1>, unsigned __int8 a3@<W2>, char **a4@<X8>)
{
  char **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  size_t v29;
  unint64_t v30;
  char *v31;
  char **v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;

  v6 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!a2)
  {
    v9 = 0;
    v7 = 0;
    v27 = 0;
    goto LABEL_34;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = a3;
  do
  {
    while (1)
    {
      while (*(unsigned __int8 *)(__sz + v8) != v11)
      {
        if (++v8 == a2)
          goto LABEL_30;
      }
      if (a2 < v9)
        goto LABEL_55;
      if (a2 - v9 >= v8 - v9)
        v12 = v8 - v9;
      else
        v12 = a2 - v9;
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_54;
      v13 = __sz + v9;
      v14 = (unint64_t)v6[2];
      if ((unint64_t)v7 < v14)
        break;
      v15 = (v7 - v10) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        goto LABEL_55;
      v17 = v14 - (_QWORD)v10;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      v18 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0;
      v19 = 0xFFFFFFFFFFFFFFFLL;
      if (!v18)
        v19 = v16;
      if (!v19)
        goto LABEL_54;
      if (v19 >> 60)
        goto LABEL_56;
      v20 = 16 * v19;
      v21 = (char *)operator new(16 * v19);
      v22 = &v21[16 * v15];
      *(_QWORD *)v22 = v13;
      *((_QWORD *)v22 + 1) = v12;
      if (v7 == v10)
      {
        v24 = &v21[16 * v15];
        v26 = &v21[v20];
        v7 = v22 + 16;
        v6 = a4;
        *a4 = v22;
        a4[1] = v22 + 16;
        a4[2] = v26;
        if (!v10)
          goto LABEL_26;
      }
      else
      {
        v23 = &v21[16 * v15];
        do
        {
          v24 = v23 - 16;
          *((_OWORD *)v23 - 1) = *((_OWORD *)v7 - 1);
          v7 -= 16;
          v23 -= 16;
        }
        while (v7 != v10);
        v25 = &v21[v20];
        v7 = v22 + 16;
        v6 = a4;
        *a4 = v24;
        a4[1] = v22 + 16;
        a4[2] = v25;
        if (!v10)
          goto LABEL_26;
      }
      operator delete(v10);
LABEL_26:
      v10 = v24;
      v6[1] = v7;
      v9 = ++v8;
      if (v8 == a2)
        goto LABEL_30;
    }
    if (!v7)
      goto LABEL_54;
    *(_QWORD *)v7 = v13;
    *((_QWORD *)v7 + 1) = v12;
    v7 += 16;
    v6[1] = v7;
    v9 = ++v8;
  }
  while (v8 != a2);
LABEL_30:
  if (a2 < v9)
    goto LABEL_55;
  v27 = a2 - v9;
  if ((uint64_t)(a2 - v9) < 0)
    goto LABEL_54;
LABEL_34:
  if (!__sz && a2 != v9)
    goto LABEL_54;
  v28 = v6;
  v29 = __sz + v9;
  v30 = v28[2];
  if ((unint64_t)v7 >= v30)
  {
    v33 = (char *)*v28;
    v34 = (uint64_t)&v7[-*v28] >> 4;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 60)
      goto LABEL_55;
    v36 = v30 - (_QWORD)v33;
    if (v36 >> 3 > v35)
      v35 = v36 >> 3;
    v18 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0;
    v37 = 0xFFFFFFFFFFFFFFFLL;
    if (!v18)
      v37 = v35;
    if (v37)
    {
      if (v37 >> 60)
LABEL_56:
        std::__throw_bad_array_new_length[abi:sn180100]();
      v38 = 16 * v37;
      v39 = (char *)operator new(16 * v37);
      v40 = &v39[v38];
      v41 = &v39[16 * v34];
      *(_QWORD *)v41 = v29;
      *((_QWORD *)v41 + 1) = v27;
      v31 = v41 + 16;
      if (v7 == v33)
      {
        v32 = a4;
        *a4 = v41;
        a4[1] = v31;
        a4[2] = v40;
        if (!v7)
          goto LABEL_51;
      }
      else
      {
        v32 = a4;
        do
        {
          *((_OWORD *)v41 - 1) = *((_OWORD *)v7 - 1);
          v41 -= 16;
          v7 -= 16;
        }
        while (v7 != v33);
        v7 = v33;
        *a4 = v41;
        a4[1] = v31;
        a4[2] = v40;
        if (!v33)
          goto LABEL_51;
      }
      operator delete(v7);
      goto LABEL_51;
    }
LABEL_54:
    __break(1u);
LABEL_55:
    abort();
  }
  if (!v7)
    goto LABEL_54;
  *(_QWORD *)v7 = v29;
  *((_QWORD *)v7 + 1) = v27;
  v31 = v7 + 16;
  v32 = a4;
LABEL_51:
  v32[1] = v31;
}

char *rtc::ToString@<X0>(rtc *this@<X0>, char *a2@<X8>)
{
  char *result;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  char __str[32];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  result = (char *)snprintf(__str, 0x20uLL, "%u", (_DWORD)this);
  if ((result & 0x80000000) != 0)
LABEL_15:
    abort();
  v4 = (int)result;
  if (result > 0x16)
  {
    v5 = ((int)result & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((int)result | 7) != 0x17)
      v5 = (int)result | 7;
    v6 = v5 + 1;
    result = (char *)operator new(v5 + 1);
    *((_QWORD *)a2 + 1) = v4;
    *((_QWORD *)a2 + 2) = v6 | 0x8000000000000000;
    *(_QWORD *)a2 = result;
    a2 = result;
  }
  else
  {
    a2[23] = (char)result;
  }
  if (a2 <= __str && &a2[v4] > __str)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((_DWORD)v4)
    result = (char *)memcpy(a2, __str, v4);
  a2[v4] = 0;
  return result;
}

char *std::vector<std::string>::__emplace_back_slow_path<std::string_view>(void **a1, char *a2, size_t a3)
{
  void **v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  void **v21;

  v4 = (void **)*a1;
  v3 = (void **)a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_30;
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)v4) >> 3) > v6)
    v6 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)v4) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  if (!v6)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v10 = 24 * v6;
  v11 = (char *)operator new(24 * v6);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    abort();
  v12 = v11;
  v13 = &v11[24 * v5];
  if (a3 <= 0x16)
  {
    v13[23] = a3;
    v14 = &v11[24 * v5];
    v15 = &v13[a3];
    if (v13 > a2)
      goto LABEL_16;
    goto LABEL_15;
  }
  v16 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a3 | 7) != 0x17)
    v16 = a3 | 7;
  v17 = v16 + 1;
  v14 = (char *)operator new(v16 + 1);
  *((_QWORD *)v13 + 1) = a3;
  *((_QWORD *)v13 + 2) = v17 | 0x8000000000000000;
  *(_QWORD *)v13 = v14;
  v15 = &v14[a3];
  if (v14 <= a2)
  {
LABEL_15:
    if (v15 <= a2)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_16:
  if (a3)
    memcpy(v14, a2, a3);
  v18 = &v12[v10];
  *v15 = 0;
  v19 = v13 + 24;
  if (v3 == v4)
  {
    *a1 = v13;
    a1[1] = v19;
    a1[2] = v18;
  }
  else
  {
    do
    {
      v20 = *(_OWORD *)(v3 - 3);
      *((_QWORD *)v13 - 1) = *(v3 - 1);
      *(_OWORD *)(v13 - 24) = v20;
      v13 -= 24;
      *(v3 - 2) = 0;
      *(v3 - 1) = 0;
      *(v3 - 3) = 0;
      v3 -= 3;
    }
    while (v3 != v4);
    v3 = (void **)*a1;
    v21 = (void **)a1[1];
    *a1 = v13;
    a1[1] = v19;
    a1[2] = v18;
    while (v21 != v3)
    {
      if (*((char *)v21 - 1) < 0)
        operator delete(*(v21 - 3));
      v21 -= 3;
    }
  }
  if (v3)
    operator delete(v3);
  return v19;
}

unint64_t rtc::StringFormat@<X0>(rtc *this@<X0>, char *a2@<X8>, ...)
{
  unint64_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  char __str[512];
  uint64_t v10;
  va_list va;

  va_start(va, a2);
  v10 = *MEMORY[0x24BDAC8D0];
  vsnprintf(__str, 0x200uLL, (const char *)this, va);
  result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8)
LABEL_15:
    abort();
  v5 = result;
  if (result > 0x16)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    result = (unint64_t)operator new(v6 + 1);
    *((_QWORD *)a2 + 1) = v5;
    *((_QWORD *)a2 + 2) = v7 | 0x8000000000000000;
    *(_QWORD *)a2 = result;
    a2 = (char *)result;
  }
  else
  {
    a2[23] = result;
  }
  if (a2 <= __str && &a2[v5] > __str)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v5)
    result = (unint64_t)memcpy(a2, __str, v5);
  a2[v5] = 0;
  return result;
}

size_t rtc::string_to_number_internal::ParseFloatingPoint<float>(void **__src, size_t __len)
{
  size_t v2;
  float v3;
  void **p_dst;
  size_t v6;
  size_t v7;
  const char *v8;
  float v9;
  size_t v10;
  void **v11;
  char *v13;
  void **__dst;
  size_t v15;
  int64_t v16;

  v2 = __len;
  v3 = 0.0;
  if (!__len)
    return v2 & 0x100000000 | LODWORD(v3);
  if (!*(_BYTE *)__src)
  {
    v2 = 0;
    return v2 & 0x100000000 | LODWORD(v3);
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
    abort();
  if (__len > 0x16)
  {
    v6 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v6 = __len | 7;
    v7 = v6 + 1;
    p_dst = (void **)operator new(v6 + 1);
    v15 = v2;
    v16 = v7 | 0x8000000000000000;
    __dst = p_dst;
    if (p_dst > __src)
      goto LABEL_12;
  }
  else
  {
    HIBYTE(v16) = __len;
    p_dst = (void **)&__dst;
    if (&__dst > (void ***)__src)
      goto LABEL_12;
  }
  if ((void **)((char *)p_dst + v2) > __src)
  {
    __break(1u);
    goto LABEL_28;
  }
LABEL_12:
  memmove(p_dst, __src, v2);
  *((_BYTE *)p_dst + v2) = 0;
  v13 = 0;
  *__error() = 0;
  if (v16 >= 0)
    v8 = (const char *)&__dst;
  else
    v8 = (const char *)__dst;
  v9 = strtof(v8, &v13);
  v10 = HIBYTE(v16);
  if (v16 >= 0)
    v11 = (void **)&__dst;
  else
    v11 = __dst;
  if (v16 < 0)
    v10 = v15;
  if (v13 == (char *)v11 + v10)
  {
    v3 = v9;
    if (!*__error())
    {
      v2 = 0x100000000;
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return v2 & 0x100000000 | LODWORD(v3);
      goto LABEL_23;
    }
  }
  v2 = 0;
  v3 = 0.0;
  if (SHIBYTE(v16) < 0)
LABEL_23:
    operator delete(__dst);
  return v2 & 0x100000000 | LODWORD(v3);
}

unint64_t rtc::string_to_number_internal::ParseSigned(void **__src, size_t __len, int a3)
{
  unint64_t p_dst;
  uint64_t v5;
  unint64_t v9;
  size_t v10;
  size_t v11;
  const char *v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  int v16;
  char *v18;
  char *__dst;
  size_t v20;
  int64_t v21;

  if (!__len)
  {
    LOBYTE(v9) = 0;
    return v9 | (p_dst << 8);
  }
  v5 = *(unsigned __int8 *)__src;
  if (v5 != 45 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v5 + 60) & 0x400) == 0)
    goto LABEL_27;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_32;
  if (__len <= 0x16)
  {
    HIBYTE(v21) = __len;
    p_dst = (unint64_t)&__dst;
    if (&__dst > (char **)__src)
      goto LABEL_15;
    goto LABEL_14;
  }
  v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((__len | 7) != 0x17)
    v10 = __len | 7;
  v11 = v10 + 1;
  p_dst = (unint64_t)operator new(v10 + 1);
  v20 = __len;
  v21 = v11 | 0x8000000000000000;
  __dst = (char *)p_dst;
  if (p_dst <= (unint64_t)__src)
  {
LABEL_14:
    if (p_dst + __len <= (unint64_t)__src)
      goto LABEL_15;
    __break(1u);
LABEL_32:
    abort();
  }
LABEL_15:
  memmove((void *)p_dst, __src, __len);
  *(_BYTE *)(p_dst + __len) = 0;
  v18 = 0;
  *__error() = 0;
  if (v21 >= 0)
    v12 = (const char *)&__dst;
  else
    v12 = __dst;
  v13 = strtoll(v12, &v18, a3);
  v14 = HIBYTE(v21);
  if (v21 >= 0)
    v15 = (void **)&__dst;
  else
    v15 = (void **)__dst;
  if (v21 < 0)
    v14 = v20;
  if (v18 != (char *)v15 + v14 || (v9 = v13, *__error()))
  {
    LOBYTE(v9) = 0;
    v16 = 1;
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_29:
    operator delete(__dst);
    if (!v16)
      return v9 | (p_dst << 8);
    goto LABEL_27;
  }
  v16 = 0;
  p_dst = v9 >> 8;
  if (SHIBYTE(v21) < 0)
    goto LABEL_29;
LABEL_26:
  if (v16)
LABEL_27:
    LOBYTE(v9) = 0;
  return v9 | (p_dst << 8);
}

unint64_t rtc::string_to_number_internal::ParseUnsigned(void **__src, size_t __len, int a3)
{
  unint64_t p_dst;
  int v5;
  unint64_t v9;
  size_t v10;
  size_t v11;
  const char *v12;
  unint64_t v13;
  size_t v14;
  void **v15;
  _BOOL4 v16;
  int v17;
  _BOOL8 v19;
  char *v21;
  char *__dst;
  size_t v23;
  int64_t v24;

  if (!__len)
  {
    LOBYTE(v9) = 0;
    return v9 | (p_dst << 8);
  }
  v5 = *(unsigned __int8 *)__src;
  if (v5 != 45 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *(unsigned __int8 *)__src + 60) & 0x400) == 0)
    goto LABEL_38;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_43;
  if (__len <= 0x16)
  {
    HIBYTE(v24) = __len;
    p_dst = (unint64_t)&__dst;
    if (&__dst > (char **)__src)
      goto LABEL_15;
    goto LABEL_14;
  }
  v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((__len | 7) != 0x17)
    v10 = __len | 7;
  v11 = v10 + 1;
  p_dst = (unint64_t)operator new(v10 + 1);
  v23 = __len;
  v24 = v11 | 0x8000000000000000;
  __dst = (char *)p_dst;
  if (p_dst <= (unint64_t)__src)
  {
LABEL_14:
    if (p_dst + __len <= (unint64_t)__src)
      goto LABEL_15;
    __break(1u);
LABEL_43:
    abort();
  }
LABEL_15:
  memmove((void *)p_dst, __src, __len);
  *(_BYTE *)(p_dst + __len) = 0;
  v21 = 0;
  *__error() = 0;
  if (v24 >= 0)
    v12 = (const char *)&__dst;
  else
    v12 = __dst;
  v13 = strtoull(v12, &v21, a3);
  v14 = HIBYTE(v24);
  if (v24 >= 0)
    v15 = (void **)&__dst;
  else
    v15 = (void **)__dst;
  if (v24 < 0)
    v14 = v23;
  if (v21 == (char *)v15 + v14)
  {
    v9 = v13;
    v17 = *__error();
    v19 = v5 != 45 || v9 == 0;
    v16 = 1;
    if (v17)
    {
      LOBYTE(v9) = 0;
      if (SHIBYTE(v24) < 0)
        goto LABEL_40;
    }
    else
    {
      if (v19)
      {
        p_dst = v9 >> 8;
      }
      else
      {
        LOBYTE(v9) = 0;
        p_dst = v19;
      }
      v16 = !v19;
      if (SHIBYTE(v24) < 0)
      {
LABEL_40:
        operator delete(__dst);
        if (!v16)
          return v9 | (p_dst << 8);
        goto LABEL_38;
      }
    }
  }
  else
  {
    LOBYTE(v9) = 0;
    v16 = 1;
    if (SHIBYTE(v24) < 0)
      goto LABEL_40;
  }
  if (v16)
LABEL_38:
    LOBYTE(v9) = 0;
  return v9 | (p_dst << 8);
}

uint64_t webrtc::struct_parser_impl::TypedParser<BOOL>::Parse(char *__src, size_t __len, char *a3)
{
  char *p_p;
  size_t v7;
  size_t v8;
  char *v9;
  unsigned __int8 *v11;
  size_t v12;
  int v13;
  char v14;
  int v15;
  int v16;
  uint64_t v18;
  void *__p;
  size_t v21;
  unint64_t v22;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_39:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_p = (char *)operator new(v7 + 1);
    v21 = __len;
    v22 = v8 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v22) = __len;
    p_p = (char *)&__p;
  }
  v9 = &p_p[__len];
  if (p_p <= __src && v9 > __src)
    goto LABEL_38;
  if (__len)
    memmove(p_p, __src, __len);
  *v9 = 0;
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    v11 = (unsigned __int8 *)&__p;
    v12 = HIBYTE(v22);
    goto LABEL_18;
  }
  v12 = v21;
  if ((v21 & 0x8000000000000000) != 0 || (v11 = (unsigned __int8 *)__p, v21) && !__p)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_18:
  if (v12 == 1)
  {
    v13 = *v11;
    if (v13 != 48)
    {
      if (v13 == 49)
      {
LABEL_25:
        v14 = 1;
        goto LABEL_36;
      }
LABEL_30:
      v14 = 0;
      v18 = 0;
      if ((v22 & 0x8000000000000000) == 0)
        goto LABEL_32;
      goto LABEL_31;
    }
  }
  else
  {
    if (v12 != 5)
    {
      if (v12 == 4 && *(_DWORD *)v11 == *(_DWORD *)"true")
        goto LABEL_25;
      goto LABEL_30;
    }
    v15 = *(_DWORD *)v11;
    v16 = v11[4];
    if (v15 != *(_DWORD *)"false" || v16 != str_14[4])
      goto LABEL_30;
  }
  v14 = 0;
LABEL_36:
  v18 = 1;
  if ((v22 & 0x8000000000000000) != 0)
LABEL_31:
    operator delete(__p);
LABEL_32:
  if ((_DWORD)v18)
    *a3 = v14;
  return v18;
}

void webrtc::struct_parser_impl::TypedParser<BOOL>::Encode(_BYTE *a1, std::string *a2)
{
  const char *v3;
  size_t v4;
  size_t v6;
  BOOL v7;
  void **p_dst;
  uint64_t v9;
  std::string::size_type v10;
  std::string::size_type size;
  std::string *v12;
  void **v13;
  std::string::size_type v14;
  void **__dst;
  size_t v16;
  unsigned __int8 v17;

  if (*a1)
    v3 = "true";
  else
    v3 = "false";
  if (*a1)
    v4 = 4;
  else
    v4 = 5;
  v17 = v4;
  if (v3 >= (const char *)&__dst && ((unint64_t)&__dst | v4) > (unint64_t)v3)
    goto LABEL_32;
  memcpy(&__dst, v3, v4);
  *((_BYTE *)&__dst + v4) = 0;
  if ((char)v17 < 0)
  {
    p_dst = __dst;
    v6 = v16;
    v7 = v16 == 0;
    if (!__dst && v16)
      goto LABEL_32;
  }
  else
  {
    v6 = v17;
    v7 = v17 == 0;
    p_dst = (void **)&__dst;
  }
  v9 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v10 = 22;
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (22 - v9 < v6)
      goto LABEL_17;
    goto LABEL_20;
  }
  size = a2->__r_.__value_.__l.__size_;
  v10 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 - size >= v6)
  {
LABEL_20:
    if (v7)
      goto LABEL_28;
    v12 = a2;
    if ((v9 & 0x80) != 0)
    {
      v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v13 = (void **)(a2->__r_.__value_.__r.__words[0] + size);
      if (v13 > p_dst)
      {
LABEL_26:
        memmove(v13, p_dst, v6);
        v14 = size + v6;
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        {
          a2->__r_.__value_.__l.__size_ = v14;
          v12->__r_.__value_.__s.__data_[v14] = 0;
          if (((char)v17 & 0x80000000) == 0)
            return;
LABEL_31:
          operator delete(__dst);
          return;
        }
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = v14 & 0x7F;
        v12->__r_.__value_.__s.__data_[v14] = 0;
LABEL_28:
        if (((char)v17 & 0x80000000) == 0)
          return;
        goto LABEL_31;
      }
    }
    else
    {
      v13 = (void **)((char *)&a2->__r_.__value_.__l.__data_ + size);
      if ((char *)a2 + size > (char *)p_dst)
        goto LABEL_26;
    }
    if ((void **)((char *)v13 + v6) <= p_dst)
      goto LABEL_26;
LABEL_32:
    __break(1u);
    return;
  }
LABEL_17:
  std::string::__grow_by_and_replace(a2, v10, v6 - v10 + size, size, size, 0, v6, (const std::string::value_type *)p_dst);
  if ((char)v17 < 0)
    goto LABEL_31;
}

BOOL webrtc::struct_parser_impl::TypedParser<double>::Parse(char *__src, size_t __len, uint64_t *a3)
{
  char *p_p;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  void *__p;
  size_t __lena;
  unint64_t v19;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_p = (char *)operator new(v7 + 1);
    __lena = __len;
    v19 = v8 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v19) = __len;
    p_p = (char *)&__p;
  }
  v9 = &p_p[__len];
  if (p_p <= __src && v9 > __src)
    goto LABEL_23;
  if (__len)
    memmove(p_p, __src, __len);
  *v9 = 0;
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    v11 = HIBYTE(v19);
    v12 = (char *)&__p;
    goto LABEL_18;
  }
  v11 = __lena;
  if ((__lena & 0x8000000000000000) != 0 || (v12 = (char *)__p, __lena) && !__p)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_18:
  v13 = webrtc::ParseTypedParameter<double>(v12, v11);
  v15 = v14;
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v15)
    *a3 = v13;
  return v15 != 0;
}

void webrtc::struct_parser_impl::TypedParser<double>::Encode(double *a1, std::string *a2)
{
}

void webrtc::struct_parser_impl::`anonymous namespace'::StringEncode(std::string *a1, double a2)
{
  int v3;
  size_t v4;
  void **p_src;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  std::string::size_type v10;
  BOOL v11;
  const std::string::value_type *v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type size;
  std::string *v16;
  std::string::value_type *v17;
  std::string::size_type v18;
  void **__src;
  size_t v20;
  unint64_t v21;
  char __str[32];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = snprintf(__str, 0x20uLL, "%g", a2);
  if (v3 < 0)
LABEL_37:
    abort();
  v4 = v3;
  if (v3 > 0x16)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_src = (void **)operator new(v6 + 1);
    v20 = v4;
    v21 = v7 | 0x8000000000000000;
    __src = p_src;
  }
  else
  {
    HIBYTE(v21) = v3;
    p_src = (void **)&__src;
  }
  v8 = (char *)p_src + v4;
  if (p_src <= (void **)__str && (char *)p_src + v4 > __str)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((_DWORD)v4)
    memcpy(p_src, __str, v4);
  *v8 = 0;
  if (SHIBYTE(v21) < 0)
  {
    v12 = (const std::string::value_type *)__src;
    v10 = v20;
    v11 = v20 == 0;
    if (!__src && v20)
      goto LABEL_36;
  }
  else
  {
    v10 = HIBYTE(v21);
    v11 = HIBYTE(v21) == 0;
    v12 = (const std::string::value_type *)&__src;
  }
  v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    v14 = (a1->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v14 - size < v10)
    {
LABEL_20:
      std::string::__grow_by_and_replace(a1, v14, v10 - v14 + size, size, size, 0, v10, v12);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        return;
      goto LABEL_32;
    }
  }
  else
  {
    v14 = 22;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (22 - v13 < v10)
      goto LABEL_20;
  }
  if (v11)
  {
LABEL_31:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      return;
    goto LABEL_32;
  }
  v16 = a1;
  if ((v13 & 0x80) != 0)
  {
    v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
    v17 = (std::string::value_type *)(a1->__r_.__value_.__r.__words[0] + size);
    if (v17 > v12)
      goto LABEL_29;
  }
  else
  {
    v17 = (char *)a1 + size;
    if ((char *)a1 + size > v12)
      goto LABEL_29;
  }
  if (&v17[v10] > v12)
    goto LABEL_36;
LABEL_29:
  memmove(v17, v12, v10);
  v18 = size + v10;
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&a1->__r_.__value_.__s + 23) = v18 & 0x7F;
    v16->__r_.__value_.__s.__data_[v18] = 0;
    goto LABEL_31;
  }
  a1->__r_.__value_.__l.__size_ = v18;
  v16->__r_.__value_.__s.__data_[v18] = 0;
  if (SHIBYTE(v21) < 0)
LABEL_32:
    operator delete(__src);
}

BOOL webrtc::struct_parser_impl::TypedParser<int>::Parse(char *__src, size_t __len, _DWORD *a3)
{
  char *p_p;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v11;
  char *v12;
  uint64_t v13;
  void *__p;
  size_t __lena;
  unint64_t v17;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_p = (char *)operator new(v7 + 1);
    __lena = __len;
    v17 = v8 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v17) = __len;
    p_p = (char *)&__p;
  }
  v9 = &p_p[__len];
  if (p_p <= __src && v9 > __src)
    goto LABEL_23;
  if (__len)
    memmove(p_p, __src, __len);
  *v9 = 0;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    v11 = HIBYTE(v17);
    v12 = (char *)&__p;
    goto LABEL_18;
  }
  v11 = __lena;
  if ((__lena & 0x8000000000000000) != 0 || (v12 = (char *)__p, __lena) && !__p)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_18:
  v13 = webrtc::ParseTypedParameter<int>(v12, v11);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  if ((v13 & 0xFF00000000) != 0)
    *a3 = v13;
  return (v13 & 0xFF00000000) != 0;
}

void webrtc::struct_parser_impl::TypedParser<int>::Encode(int *a1, std::string *a2)
{
}

void webrtc::struct_parser_impl::`anonymous namespace'::StringEncode(std::string *a1, int a2)
{
  int v3;
  size_t v4;
  void **p_src;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  std::string::size_type v10;
  BOOL v11;
  const std::string::value_type *v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type size;
  std::string *v16;
  std::string::value_type *v17;
  std::string::size_type v18;
  void **__src;
  size_t v20;
  unint64_t v21;
  char __str[32];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = snprintf(__str, 0x20uLL, "%d", a2);
  if (v3 < 0)
LABEL_37:
    abort();
  v4 = v3;
  if (v3 > 0x16)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_src = (void **)operator new(v6 + 1);
    v20 = v4;
    v21 = v7 | 0x8000000000000000;
    __src = p_src;
  }
  else
  {
    HIBYTE(v21) = v3;
    p_src = (void **)&__src;
  }
  v8 = (char *)p_src + v4;
  if (p_src <= (void **)__str && (char *)p_src + v4 > __str)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((_DWORD)v4)
    memcpy(p_src, __str, v4);
  *v8 = 0;
  if (SHIBYTE(v21) < 0)
  {
    v12 = (const std::string::value_type *)__src;
    v10 = v20;
    v11 = v20 == 0;
    if (!__src && v20)
      goto LABEL_36;
  }
  else
  {
    v10 = HIBYTE(v21);
    v11 = HIBYTE(v21) == 0;
    v12 = (const std::string::value_type *)&__src;
  }
  v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    v14 = (a1->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v14 - size < v10)
    {
LABEL_20:
      std::string::__grow_by_and_replace(a1, v14, v10 - v14 + size, size, size, 0, v10, v12);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        return;
      goto LABEL_32;
    }
  }
  else
  {
    v14 = 22;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (22 - v13 < v10)
      goto LABEL_20;
  }
  if (v11)
  {
LABEL_31:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      return;
    goto LABEL_32;
  }
  v16 = a1;
  if ((v13 & 0x80) != 0)
  {
    v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
    v17 = (std::string::value_type *)(a1->__r_.__value_.__r.__words[0] + size);
    if (v17 > v12)
      goto LABEL_29;
  }
  else
  {
    v17 = (char *)a1 + size;
    if ((char *)a1 + size > v12)
      goto LABEL_29;
  }
  if (&v17[v10] > v12)
    goto LABEL_36;
LABEL_29:
  memmove(v17, v12, v10);
  v18 = size + v10;
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&a1->__r_.__value_.__s + 23) = v18 & 0x7F;
    v16->__r_.__value_.__s.__data_[v18] = 0;
    goto LABEL_31;
  }
  a1->__r_.__value_.__l.__size_ = v18;
  v16->__r_.__value_.__s.__data_[v18] = 0;
  if (SHIBYTE(v21) < 0)
LABEL_32:
    operator delete(__src);
}

BOOL webrtc::struct_parser_impl::TypedParser<unsigned int>::Parse(char *__src, size_t __len, _DWORD *a3)
{
  char *p_p;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v11;
  char *v12;
  uint64_t v13;
  void *__p;
  size_t __lena;
  unint64_t v17;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_p = (char *)operator new(v7 + 1);
    __lena = __len;
    v17 = v8 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v17) = __len;
    p_p = (char *)&__p;
  }
  v9 = &p_p[__len];
  if (p_p <= __src && v9 > __src)
    goto LABEL_23;
  if (__len)
    memmove(p_p, __src, __len);
  *v9 = 0;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    v11 = HIBYTE(v17);
    v12 = (char *)&__p;
    goto LABEL_18;
  }
  v11 = __lena;
  if ((__lena & 0x8000000000000000) != 0 || (v12 = (char *)__p, __lena) && !__p)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_18:
  v13 = webrtc::ParseTypedParameter<unsigned int>(v12, v11);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  if ((v13 & 0xFF00000000) != 0)
    *a3 = v13;
  return (v13 & 0xFF00000000) != 0;
}

void webrtc::struct_parser_impl::TypedParser<unsigned int>::Encode(_DWORD *a1, std::string *a2)
{
  int v3;
  size_t v4;
  void **p_src;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  std::string::size_type v10;
  BOOL v11;
  const std::string::value_type *v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type size;
  std::string *v16;
  std::string::value_type *v17;
  std::string::size_type v18;
  void **__src;
  size_t v20;
  unint64_t v21;
  char __str[32];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = snprintf(__str, 0x20uLL, "%u", *a1);
  if (v3 < 0)
LABEL_37:
    abort();
  v4 = v3;
  if (v3 > 0x16)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_src = (void **)operator new(v6 + 1);
    v20 = v4;
    v21 = v7 | 0x8000000000000000;
    __src = p_src;
  }
  else
  {
    HIBYTE(v21) = v3;
    p_src = (void **)&__src;
  }
  v8 = (char *)p_src + v4;
  if (p_src <= (void **)__str && (char *)p_src + v4 > __str)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((_DWORD)v4)
    memcpy(p_src, __str, v4);
  *v8 = 0;
  if (SHIBYTE(v21) < 0)
  {
    v12 = (const std::string::value_type *)__src;
    v10 = v20;
    v11 = v20 == 0;
    if (!__src && v20)
      goto LABEL_36;
  }
  else
  {
    v10 = HIBYTE(v21);
    v11 = HIBYTE(v21) == 0;
    v12 = (const std::string::value_type *)&__src;
  }
  v13 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a2->__r_.__value_.__l.__size_;
    v14 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v14 - size < v10)
    {
LABEL_20:
      std::string::__grow_by_and_replace(a2, v14, v10 - v14 + size, size, size, 0, v10, v12);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        return;
      goto LABEL_32;
    }
  }
  else
  {
    v14 = 22;
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (22 - v13 < v10)
      goto LABEL_20;
  }
  if (v11)
  {
LABEL_31:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      return;
    goto LABEL_32;
  }
  v16 = a2;
  if ((v13 & 0x80) != 0)
  {
    v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v17 = (std::string::value_type *)(a2->__r_.__value_.__r.__words[0] + size);
    if (v17 > v12)
      goto LABEL_29;
  }
  else
  {
    v17 = (char *)a2 + size;
    if ((char *)a2 + size > v12)
      goto LABEL_29;
  }
  if (&v17[v10] > v12)
    goto LABEL_36;
LABEL_29:
  memmove(v17, v12, v10);
  v18 = size + v10;
  if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v18 & 0x7F;
    v16->__r_.__value_.__s.__data_[v18] = 0;
    goto LABEL_31;
  }
  a2->__r_.__value_.__l.__size_ = v18;
  v16->__r_.__value_.__s.__data_[v18] = 0;
  if (SHIBYTE(v21) < 0)
LABEL_32:
    operator delete(__src);
}

BOOL webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Parse(char *__src, size_t __len, uint64_t a3)
{
  char *p_p;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _BOOL8 v18;
  void *__p;
  size_t __lena;
  unint64_t v22;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_p = (char *)operator new(v7 + 1);
    __lena = __len;
    v22 = v8 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v22) = __len;
    p_p = (char *)&__p;
  }
  v9 = &p_p[__len];
  if (p_p <= __src && v9 > __src)
    goto LABEL_35;
  if (__len)
    memmove(p_p, __src, __len);
  *v9 = 0;
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    v11 = HIBYTE(v22);
    v12 = (char *)&__p;
    goto LABEL_18;
  }
  v11 = __lena;
  if ((__lena & 0x8000000000000000) != 0 || (v12 = (char *)__p, __lena) && !__p)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
LABEL_18:
  if (v11)
  {
    v13 = webrtc::ParseTypedParameter<double>(v12, v11);
    if (v14)
      v15 = v13;
    else
      v15 = 0;
    if (v14)
      v16 = v13 & 0xFFFFFFFFFFFFFF00;
    else
      v16 = 0;
    if (v14)
      v17 = v14;
    else
      v17 = 0;
    v18 = v14 != 0;
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  if (SHIBYTE(v22) < 0)
LABEL_29:
    operator delete(__p);
LABEL_30:
  if (v18)
  {
    *(_QWORD *)a3 = v16 | v15;
    *(_BYTE *)(a3 + 8) = v17;
  }
  return v18;
}

void webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Encode(uint64_t a1, std::string *a2)
{
  if (*(_BYTE *)(a1 + 8))
}

BOOL webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Parse(char *__src, size_t __len, uint64_t a3)
{
  char *p_p;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  void *__p;
  size_t __lena;
  unint64_t v20;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_33:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_p = (char *)operator new(v7 + 1);
    __lena = __len;
    v20 = v8 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v20) = __len;
    p_p = (char *)&__p;
  }
  v9 = &p_p[__len];
  if (p_p <= __src && v9 > __src)
    goto LABEL_32;
  if (__len)
    memmove(p_p, __src, __len);
  *v9 = 0;
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    v11 = HIBYTE(v20);
    v12 = (char *)&__p;
    goto LABEL_18;
  }
  v11 = __lena;
  if ((__lena & 0x8000000000000000) != 0 || (v12 = (char *)__p, __lena) && !__p)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
LABEL_18:
  if (v11)
  {
    v13 = webrtc::ParseTypedParameter<int>(v12, v11);
    if ((v13 & 0xFF00000000) != 0)
      v14 = v13;
    else
      v14 = 0;
    v15 = (v13 & 0xFF00000000) != 0;
    if ((v13 & 0xFF00000000) != 0)
      v16 = v13 & 0xFFFFFFFFFFFFFF00;
    else
      v16 = 0;
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  v14 = 0;
  v16 = 0;
  v15 = 1;
  if (SHIBYTE(v20) < 0)
LABEL_26:
    operator delete(__p);
LABEL_27:
  if (v15)
  {
    *(_DWORD *)a3 = v16 | v14;
    *(_BYTE *)(a3 + 4) = (v16 | v14) >> 32;
  }
  return v15;
}

void webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Encode(_QWORD *a1, std::string *a2)
{
  if ((*a1 & 0xFF00000000) != 0)
}

BOOL webrtc::struct_parser_impl::TypedParser<webrtc::DataRate>::Parse(char *__src, size_t __len, _QWORD *a3)
{
  char *p_p;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  void *__p;
  size_t __lena;
  unint64_t v20;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_p = (char *)operator new(v7 + 1);
    __lena = __len;
    v20 = v8 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v20) = __len;
    p_p = (char *)&__p;
  }
  v9 = &p_p[__len];
  if (p_p <= __src && v9 > __src)
    goto LABEL_23;
  if (__len)
    memmove(p_p, __src, __len);
  *v9 = 0;
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    v11 = HIBYTE(v20);
    v12 = &__p;
    goto LABEL_18;
  }
  v11 = __lena;
  if ((__lena & 0x8000000000000000) != 0 || (v12 = (void **)__p, __lena) && !__p)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_18:
  webrtc::ParseTypedParameter<webrtc::DataRate>(v12, v11);
  v14 = v13;
  v16 = v15;
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  if (v16)
    *a3 = v14;
  return v16 != 0;
}

void webrtc::struct_parser_impl::TypedParser<webrtc::DataRate>::Encode(uint64_t *a1, std::string *a2)
{
}

void webrtc::struct_parser_impl::`anonymous namespace'::StringEncode(std::string *a1, uint64_t a2)
{
  size_t v3;
  BOOL v4;
  void **p_src;
  BOOL v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type size;
  std::string *v10;
  void **v11;
  std::string::size_type v12;
  void **__src;
  size_t v14;
  unsigned __int8 v15;

  webrtc::ToString(a2, (char *)&__src);
  if ((char)v15 < 0)
  {
    p_src = __src;
    v3 = v14;
    v4 = v14 == 0;
    if (__src)
      v6 = 1;
    else
      v6 = v14 == 0;
    if (!v6)
      goto LABEL_25;
  }
  else
  {
    v3 = v15;
    v4 = v15 == 0;
    p_src = (void **)&__src;
  }
  v7 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = 22;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (22 - v7 < v3)
      goto LABEL_10;
    goto LABEL_13;
  }
  size = a1->__r_.__value_.__l.__size_;
  v8 = (a1->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v8 - size >= v3)
  {
LABEL_13:
    if (v4)
      goto LABEL_21;
    v10 = a1;
    if ((v7 & 0x80) != 0)
    {
      v10 = (std::string *)a1->__r_.__value_.__r.__words[0];
      v11 = (void **)(a1->__r_.__value_.__r.__words[0] + size);
      if (v11 > p_src)
      {
LABEL_19:
        memmove(v11, p_src, v3);
        v12 = size + v3;
        if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
        {
          a1->__r_.__value_.__l.__size_ = v12;
          v10->__r_.__value_.__s.__data_[v12] = 0;
          if (((char)v15 & 0x80000000) == 0)
            return;
LABEL_24:
          operator delete(__src);
          return;
        }
        *((_BYTE *)&a1->__r_.__value_.__s + 23) = v12 & 0x7F;
        v10->__r_.__value_.__s.__data_[v12] = 0;
LABEL_21:
        if (((char)v15 & 0x80000000) == 0)
          return;
        goto LABEL_24;
      }
    }
    else
    {
      v11 = (void **)((char *)&a1->__r_.__value_.__l.__data_ + size);
      if ((char *)a1 + size > (char *)p_src)
        goto LABEL_19;
    }
    if ((void **)((char *)v11 + v3) <= p_src)
      goto LABEL_19;
LABEL_25:
    __break(1u);
    return;
  }
LABEL_10:
  std::string::__grow_by_and_replace(a1, v8, v3 - v8 + size, size, size, 0, v3, (const std::string::value_type *)p_src);
  if ((char)v15 < 0)
    goto LABEL_24;
}

BOOL webrtc::struct_parser_impl::TypedParser<webrtc::TimeDelta>::Parse(char *__src, size_t __len, _QWORD *a3)
{
  char *p_p;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  void *__p;
  size_t __lena;
  unint64_t v20;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_p = (char *)operator new(v7 + 1);
    __lena = __len;
    v20 = v8 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v20) = __len;
    p_p = (char *)&__p;
  }
  v9 = &p_p[__len];
  if (p_p <= __src && v9 > __src)
    goto LABEL_23;
  if (__len)
    memmove(p_p, __src, __len);
  *v9 = 0;
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    v11 = HIBYTE(v20);
    v12 = &__p;
    goto LABEL_18;
  }
  v11 = __lena;
  if ((__lena & 0x8000000000000000) != 0 || (v12 = (void **)__p, __lena) && !__p)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_18:
  webrtc::ParseTypedParameter<webrtc::TimeDelta>(v12, v11);
  v14 = v13;
  v16 = v15;
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  if (v16)
    *a3 = v14;
  return v16 != 0;
}

void webrtc::struct_parser_impl::TypedParser<webrtc::TimeDelta>::Encode(webrtc **a1, TimeDelta a2)
{
  size_t v3;
  BOOL v4;
  void **p_src;
  BOOL v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  int64_t var0;
  void **v11;
  std::string::size_type v12;
  void **__src;
  size_t v14;
  unsigned __int8 v15;

  webrtc::ToString(*a1, a2, (char *)&__src);
  if ((char)v15 < 0)
  {
    p_src = __src;
    v3 = v14;
    v4 = v14 == 0;
    if (__src)
      v6 = 1;
    else
      v6 = v14 == 0;
    if (!v6)
      goto LABEL_25;
  }
  else
  {
    v3 = v15;
    v4 = v15 == 0;
    p_src = (void **)&__src;
  }
  v7 = *(unsigned __int8 *)(a2.var0 + 23);
  if ((*(char *)(a2.var0 + 23) & 0x80000000) == 0)
  {
    v8 = 22;
    v9 = *(unsigned __int8 *)(a2.var0 + 23);
    if (22 - v7 < v3)
      goto LABEL_10;
    goto LABEL_13;
  }
  v9 = *(_QWORD *)(a2.var0 + 8);
  v8 = (*(_QWORD *)(a2.var0 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v8 - v9 >= v3)
  {
LABEL_13:
    if (v4)
      goto LABEL_21;
    var0 = a2.var0;
    if ((v7 & 0x80) != 0)
    {
      var0 = *(_QWORD *)a2.var0;
      v11 = (void **)(*(_QWORD *)a2.var0 + v9);
      if (v11 > p_src)
      {
LABEL_19:
        memmove(v11, p_src, v3);
        v12 = v9 + v3;
        if (*(char *)(a2.var0 + 23) < 0)
        {
          *(_QWORD *)(a2.var0 + 8) = v12;
          *(_BYTE *)(var0 + v12) = 0;
          if (((char)v15 & 0x80000000) == 0)
            return;
LABEL_24:
          operator delete(__src);
          return;
        }
        *(_BYTE *)(a2.var0 + 23) = v12 & 0x7F;
        *(_BYTE *)(var0 + v12) = 0;
LABEL_21:
        if (((char)v15 & 0x80000000) == 0)
          return;
        goto LABEL_24;
      }
    }
    else
    {
      v11 = (void **)(a2.var0 + v9);
      if (a2.var0 + v9 > (unint64_t)p_src)
        goto LABEL_19;
    }
    if ((void **)((char *)v11 + v3) <= p_src)
      goto LABEL_19;
LABEL_25:
    __break(1u);
    return;
  }
LABEL_10:
  std::string::__grow_by_and_replace((std::string *)a2.var0, v8, v3 - v8 + v9, v9, v9, 0, v3, (const std::string::value_type *)p_src);
  if ((char)v15 < 0)
    goto LABEL_24;
}

BOOL webrtc::struct_parser_impl::TypedParser<std::optional<webrtc::DataRate>>::Parse(char *__src, size_t __len, uint64_t a3)
{
  char *p_p;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v11;
  void **v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _BOOL8 v18;
  void *__p;
  size_t __lena;
  unint64_t v22;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_p = (char *)operator new(v7 + 1);
    __lena = __len;
    v22 = v8 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v22) = __len;
    p_p = (char *)&__p;
  }
  v9 = &p_p[__len];
  if (p_p <= __src && v9 > __src)
    goto LABEL_35;
  if (__len)
    memmove(p_p, __src, __len);
  *v9 = 0;
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    v11 = HIBYTE(v22);
    v12 = &__p;
    goto LABEL_18;
  }
  v11 = __lena;
  if ((__lena & 0x8000000000000000) != 0 || (v12 = (void **)__p, __lena) && !__p)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
LABEL_18:
  if (v11)
  {
    webrtc::ParseTypedParameter<webrtc::DataRate>(v12, v11);
    if (v14)
      v15 = v13;
    else
      v15 = 0;
    if (v14)
      v16 = v13 & 0xFFFFFFFFFFFFFF00;
    else
      v16 = 0;
    if (v14)
      v17 = v14;
    else
      v17 = 0;
    v18 = v14 != 0;
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  if (SHIBYTE(v22) < 0)
LABEL_29:
    operator delete(__p);
LABEL_30:
  if (v18)
  {
    *(_QWORD *)a3 = v16 | v15;
    *(_BYTE *)(a3 + 8) = v17;
  }
  return v18;
}

void webrtc::struct_parser_impl::TypedParser<std::optional<webrtc::DataRate>>::Encode(uint64_t a1, std::string *a2)
{
  if (*(_BYTE *)(a1 + 8))
}

BOOL webrtc::struct_parser_impl::TypedParser<std::optional<webrtc::DataSize>>::Parse(char *__src, size_t __len, uint64_t a3)
{
  char *p_p;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v11;
  void **v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _BOOL8 v18;
  void *__p;
  size_t __lena;
  unint64_t v22;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_p = (char *)operator new(v7 + 1);
    __lena = __len;
    v22 = v8 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v22) = __len;
    p_p = (char *)&__p;
  }
  v9 = &p_p[__len];
  if (p_p <= __src && v9 > __src)
    goto LABEL_35;
  if (__len)
    memmove(p_p, __src, __len);
  *v9 = 0;
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    v11 = HIBYTE(v22);
    v12 = &__p;
    goto LABEL_18;
  }
  v11 = __lena;
  if ((__lena & 0x8000000000000000) != 0 || (v12 = (void **)__p, __lena) && !__p)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
LABEL_18:
  if (v11)
  {
    webrtc::ParseTypedParameter<webrtc::DataSize>(v12, v11);
    if (v14)
      v15 = v13;
    else
      v15 = 0;
    if (v14)
      v16 = v13 & 0xFFFFFFFFFFFFFF00;
    else
      v16 = 0;
    if (v14)
      v17 = v14;
    else
      v17 = 0;
    v18 = v14 != 0;
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  if (SHIBYTE(v22) < 0)
LABEL_29:
    operator delete(__p);
LABEL_30:
  if (v18)
  {
    *(_QWORD *)a3 = v16 | v15;
    *(_BYTE *)(a3 + 8) = v17;
  }
  return v18;
}

void webrtc::struct_parser_impl::TypedParser<std::optional<webrtc::DataSize>>::Encode(uint64_t a1, std::string *a2)
{
  size_t v3;
  BOOL v4;
  void **p_src;
  uint64_t v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  void **v10;
  std::string::size_type v11;
  void **__src;
  size_t v13;
  unsigned __int8 v14;

  if (!*(_BYTE *)(a1 + 8))
    return;
  webrtc::ToString(*(_QWORD *)a1, (char *)&__src);
  if ((char)v14 < 0)
  {
    p_src = __src;
    v3 = v13;
    v4 = v13 == 0;
    if (!__src && v13)
      goto LABEL_23;
  }
  else
  {
    v3 = v14;
    v4 = v14 == 0;
    p_src = (void **)&__src;
  }
  v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = 22;
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (22 - v6 < v3)
      goto LABEL_8;
    goto LABEL_11;
  }
  size = a2->__r_.__value_.__l.__size_;
  v7 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v7 - size >= v3)
  {
LABEL_11:
    if (v4)
      goto LABEL_19;
    v9 = a2;
    if ((v6 & 0x80) != 0)
    {
      v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v10 = (void **)(a2->__r_.__value_.__r.__words[0] + size);
      if (v10 > p_src)
      {
LABEL_17:
        memmove(v10, p_src, v3);
        v11 = size + v3;
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        {
          a2->__r_.__value_.__l.__size_ = v11;
          v9->__r_.__value_.__s.__data_[v11] = 0;
          if (((char)v14 & 0x80000000) == 0)
            return;
LABEL_22:
          operator delete(__src);
          return;
        }
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = v11 & 0x7F;
        v9->__r_.__value_.__s.__data_[v11] = 0;
LABEL_19:
        if (((char)v14 & 0x80000000) == 0)
          return;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (void **)((char *)&a2->__r_.__value_.__l.__data_ + size);
      if ((char *)a2 + size > (char *)p_src)
        goto LABEL_17;
    }
    if ((void **)((char *)v10 + v3) <= p_src)
      goto LABEL_17;
LABEL_23:
    __break(1u);
    return;
  }
LABEL_8:
  std::string::__grow_by_and_replace(a2, v7, v3 - v7 + size, size, size, 0, v3, (const std::string::value_type *)p_src);
  if ((char)v14 < 0)
    goto LABEL_22;
}

void webrtc::StructParametersParser::Parse(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  char *v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  if (a3)
  {
    v4 = a3;
    v6 = 0;
    do
    {
      v7 = v4 - (_QWORD)v6;
      if (v4 <= (unint64_t)v6)
      {
        v8 = a2;
        v11 = (char *)v4;
      }
      else
      {
        v8 = a2;
        v9 = (char *)memchr(&v6[a2], 44, v4 - (_QWORD)v6);
        if (&v9[-a2] == (char *)-1 || v9 == 0)
          v11 = (char *)v4;
        else
          v11 = &v9[-a2];
        v12 = (char *)memchr(&v6[a2], 58, v4 - (_QWORD)v6);
        v13 = &v12[-a2];
        if (v12)
          v14 = v13 + 1 == 0;
        else
          v14 = 1;
        if (!v14)
          goto LABEL_19;
      }
      v13 = (char *)v4;
LABEL_19:
      if (v13 >= v11)
        v13 = v11;
      if (v7 >= v13 - v6)
        v7 = v13 - v6;
      if ((v7 & 0x8000000000000000) != 0 || !v8 && v7)
        goto LABEL_50;
      v15 = (unint64_t)(v13 + 1);
      v16 = &v6[v8];
      if ((unint64_t)v11 >= v15)
      {
        if (v4 < v15)
          goto LABEL_51;
        if (v4 - v15 >= (unint64_t)&v11[-v15])
          v17 = &v11[-v15];
        else
          v17 = (char *)(v4 - v15);
        if (((unint64_t)v17 & 0x8000000000000000) != 0 || !v8 && v17)
        {
LABEL_50:
          __break(1u);
LABEL_51:
          abort();
        }
        v18 = v8 + v15;
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
      v20 = *a1;
      v19 = a1[1];
      while (v20 != v19)
      {
        if (!*(_QWORD *)v20)
          goto LABEL_50;
        if (v7 == strlen(*(const char **)v20) && !memcmp(v16, *(const void **)v20, v7))
        {
          if (((*(uint64_t (**)(uint64_t, char *, _QWORD))(v20 + 16))(v18, v17, *(_QWORD *)(v20 + 8)) & 1) == 0
            && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            v28 = v28 & 0xFFFFFFFF00000000 | 0x34A;
LABEL_3:
            rtc::webrtc_logging_impl::Log("\r\t\v\t\v\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/struct_parameters_parser.cc");
            goto LABEL_4;
          }
          goto LABEL_4;
        }
        v20 += 32;
      }
      if ((!v7 || *v16 != 95) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v3 = v3 & 0xFFFFFFFF00000000 | 0x399;
        goto LABEL_3;
      }
LABEL_4:
      v6 = v11 + 1;
      v4 = a3;
    }
    while ((unint64_t)(v11 + 1) < a3);
  }
}

uint64_t *webrtc::StructParametersParser::Encode@<X0>(uint64_t *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  size_t v6;
  size_t size;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  int v17;
  uint64_t v18;
  std::string::size_type v19;
  std::string *v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t i;
  std::string::size_type v24;
  int v25;
  std::string::size_type v26;
  const char *v27;
  std::string *v28;
  std::string::size_type v30;
  size_t v31;
  size_t v32;
  int v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::string *v36;
  char *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  int v40;
  std::string::size_type v41;
  std::string *v42;
  _BYTE *v43;
  std::string::size_type v44;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v2 = *this;
  v3 = this[1];
  if (*this == v3)
    return this;
  v4 = *(const char **)v2;
  if (!*(_QWORD *)v2)
    goto LABEL_94;
  v6 = strlen(*(const char **)v2);
  size = v6;
  if (v6 > 0x16)
  {
    if (v6 - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      goto LABEL_95;
    v8 = 44;
    if (v6 > 0x2C)
      v8 = v6;
    v9 = (v8 | 7) + 1;
    v10 = (char *)operator new(v9);
    if (v10 > v4 || &v10[size] <= v4)
    {
      v12 = v10;
      memcpy(v10, v4, size);
      v13 = v9 | 0x8000000000000000;
      a2->__r_.__value_.__l.__size_ = size;
      a2->__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      v12[size] = 0;
      v14 = (v9 | 0x8000000000000000) >> 56;
      goto LABEL_22;
    }
LABEL_94:
    __break(1u);
LABEL_95:
    abort();
  }
  if (v6)
  {
    v15 = (char *)a2 + v6;
    if (v4 >= (const char *)a2 && v15 > v4)
      goto LABEL_94;
    memmove(a2, v4, v6);
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      a2->__r_.__value_.__l.__size_ = size;
    else
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = size;
    *v15 = 0;
    LODWORD(v14) = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    size = a2->__r_.__value_.__l.__size_;
    v13 = a2->__r_.__value_.__r.__words[2];
  }
  else
  {
    v13 = 0;
    LODWORD(v14) = 0;
  }
LABEL_22:
  v17 = (char)v14;
  v18 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  v14 = v14;
  if ((v14 & 0x80u) == 0)
    v19 = 22;
  else
    v19 = v18;
  if ((v14 & 0x80u) != 0)
    v14 = size;
  if (v19 == v14)
  {
    std::string::__grow_by_and_replace(a2, v19, 1uLL, v19, v19, 0, 1uLL, ":");
    goto LABEL_37;
  }
  v20 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (v17 >= 0)
    v20 = a2;
  v21 = (char *)v20 + v14;
  if ((char *)v20 + v14 <= ":" && v21 + 1 > ":")
    goto LABEL_94;
  *v21 = 58;
  v22 = v14 + 1;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    a2->__r_.__value_.__l.__size_ = v22;
  else
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v22 & 0x7F;
  v20->__r_.__value_.__s.__data_[v22] = 0;
LABEL_37:
  this = (uint64_t *)(*(uint64_t (**)(_QWORD, std::string *))(v2 + 24))(*(_QWORD *)(v2 + 8), a2);
  for (i = v2 + 32; i != v3; i += 32)
  {
    v24 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v25 = (char)v24;
    if ((v24 & 0x80u) == 0)
      v26 = 22;
    else
      v26 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v24 & 0x80u) != 0)
      v24 = a2->__r_.__value_.__l.__size_;
    if (v26 == v24)
    {
      std::string::__grow_by_and_replace(a2, v26, 1uLL, v26, v26, 0, 1uLL, ",");
      v27 = *(const char **)i;
      if (!*(_QWORD *)i)
        goto LABEL_94;
    }
    else
    {
      if (v25 >= 0)
        v28 = a2;
      else
        v28 = (std::string *)a2->__r_.__value_.__r.__words[0];
      if ((char *)v28 + v24 <= "," && (char *)&v28->__r_.__value_.__l.__data_ + v24 + 1 > ",")
        goto LABEL_94;
      v28->__r_.__value_.__s.__data_[v24] = 44;
      v30 = v24 + 1;
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        a2->__r_.__value_.__l.__size_ = v30;
        v28->__r_.__value_.__s.__data_[v30] = 0;
        v27 = *(const char **)i;
        if (!*(_QWORD *)i)
          goto LABEL_94;
      }
      else
      {
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = v30 & 0x7F;
        v28->__r_.__value_.__s.__data_[v30] = 0;
        v27 = *(const char **)i;
        if (!*(_QWORD *)i)
          goto LABEL_94;
      }
    }
    v31 = strlen(v27);
    v32 = v31;
    v33 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v33 >= 0)
      v34 = 22;
    else
      v34 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v33 >= 0)
      v35 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    else
      v35 = a2->__r_.__value_.__l.__size_;
    if (v34 - v35 >= v31)
    {
      if (v31)
      {
        if (v33 >= 0)
          v36 = a2;
        else
          v36 = (std::string *)a2->__r_.__value_.__r.__words[0];
        v37 = (char *)v36 + v35;
        if ((char *)v36 + v35 <= v27 && &v37[v32] > v27)
          goto LABEL_94;
        memmove(v37, v27, v32);
        v38 = v35 + v32;
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
          a2->__r_.__value_.__l.__size_ = v38;
        else
          *((_BYTE *)&a2->__r_.__value_.__s + 23) = v38 & 0x7F;
        v36->__r_.__value_.__s.__data_[v38] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(a2, v34, v35 + v31 - v34, v35, v35, 0, v31, v27);
    }
    v39 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v40 = (char)v39;
    if ((v39 & 0x80u) == 0)
      v41 = 22;
    else
      v41 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v39 & 0x80u) != 0)
      v39 = a2->__r_.__value_.__l.__size_;
    if (v41 == v39)
    {
      std::string::__grow_by_and_replace(a2, v41, 1uLL, v41, v41, 0, 1uLL, ":");
    }
    else
    {
      if (v40 >= 0)
        v42 = a2;
      else
        v42 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v43 = (char *)v42 + v39;
      if ((char *)v42 + v39 <= ":" && v43 + 1 > ":")
        goto LABEL_94;
      *v43 = 58;
      v44 = v39 + 1;
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        a2->__r_.__value_.__l.__size_ = v44;
      else
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = v44 & 0x7F;
      v42->__r_.__value_.__s.__data_[v44] = 0;
    }
    this = (uint64_t *)(*(uint64_t (**)(_QWORD, std::string *))(i + 24))(*(_QWORD *)(i + 8), a2);
  }
  return this;
}

uint64_t cricket::StunMessage::StunMessage(uint64_t a1, __int16 a2, int8x16_t *__src, size_t __len)
{
  int8x16_t *v7;
  char *v8;
  char *v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  int8x16_t *v13;
  unint64_t v14;
  __int32 v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v18;
  int8x16_t v19;
  uint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unsigned int *v23;
  unint64_t v24;
  unsigned int v25;

  *(_QWORD *)a1 = &off_24C0C1470;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = a2;
  *(_WORD *)(a1 + 34) = 0;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    abort();
  v7 = (int8x16_t *)(a1 + 40);
  if (__len > 0x16)
  {
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v10 = __len | 7;
    v11 = v10 + 1;
    v8 = (char *)operator new(v10 + 1);
    *(_QWORD *)(a1 + 48) = __len;
    *(_QWORD *)(a1 + 56) = v11 | 0x8000000000000000;
    *(_QWORD *)(a1 + 40) = v8;
    v9 = &v8[__len];
    if (v8 > (char *)__src)
      goto LABEL_9;
  }
  else
  {
    *(_BYTE *)(a1 + 63) = __len;
    v8 = (char *)(a1 + 40);
    v9 = &v7->i8[__len];
    if (v7 > __src)
      goto LABEL_9;
  }
  if (v9 > (char *)__src)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_9:
  if (__len)
    memmove(v8, __src, __len);
  *v9 = 0;
  if (*(char *)(a1 + 63) < 0)
  {
    v12 = *(_QWORD *)(a1 + 48);
    if ((v12 & 0x8000000000000000) == 0)
    {
      v7 = (int8x16_t *)v7->i64[0];
      if (!v12 || v7)
        goto LABEL_16;
    }
    goto LABEL_29;
  }
  v12 = *(unsigned __int8 *)(a1 + 63);
LABEL_16:
  if (v12)
    v13 = v7;
  else
    v13 = 0;
  v14 = v12 - 4;
  if (v12 < 4)
  {
    v15 = 0;
    goto LABEL_28;
  }
  if (v14 < 0x1C)
  {
    v15 = 0;
    v16 = 0;
LABEL_26:
    v23 = &v13->u32[v16];
    v24 = v12 - v16 * 4;
    do
    {
      v25 = *v23++;
      v15 ^= bswap32(v25);
      v24 -= 4;
    }
    while (v24 > 3);
    goto LABEL_28;
  }
  v17 = (v14 >> 2) + 1;
  v16 = v17 & 0x7FFFFFFFFFFFFFF8;
  v18 = v13 + 1;
  v19 = 0uLL;
  v20 = v17 & 0x7FFFFFFFFFFFFFF8;
  v21 = 0uLL;
  do
  {
    v19 = veorq_s8(vrev32q_s8(v18[-1]), v19);
    v21 = veorq_s8(vrev32q_s8(*v18), v21);
    v18 += 2;
    v20 -= 8;
  }
  while (v20);
  v22 = veorq_s8(v21, v19);
  *(int8x8_t *)v22.i8 = veor_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
  v15 = v22.i32[0] ^ v22.i32[1];
  if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_26;
LABEL_28:
  *(_DWORD *)(a1 + 64) = v15;
  *(_DWORD *)(a1 + 68) = 554869826;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  return a1;
}

void cricket::StunMessage::StunMessage(cricket::StunMessage *this, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  int8x16_t *p_p;
  std::string *v10;
  uint64_t v11;
  void *__p;
  size_t __len;
  uint64_t v14;

  __p = 0;
  __len = 0;
  v14 = 0;
    goto LABEL_11;
  if (SHIBYTE(v14) < 0)
  {
    v8 = __len;
    if ((__len & 0x8000000000000000) == 0)
    {
      p_p = (int8x16_t *)__p;
      if (!__len || __p)
        goto LABEL_7;
    }
    __break(1u);
LABEL_11:
    v10 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v4, v5, v6, v7, v11);
    cricket::StunMessage::~StunMessage((cricket::StunMessage *)v10);
    return;
  }
  v8 = HIBYTE(v14);
  p_p = (int8x16_t *)&__p;
LABEL_7:
  cricket::StunMessage::StunMessage((uint64_t)this, a2, p_p, v8);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
}

void cricket::StunMessage::~StunMessage(void **this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *this = &off_24C0C1470;
  if (*((char *)this + 127) < 0)
  {
    operator delete(this[13]);
    if ((*((char *)this + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 63) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(this[5]);
      v2 = this[1];
      if (!v2)
        return;
      goto LABEL_9;
    }
  }
  else if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[9]);
  if (*((char *)this + 63) < 0)
    goto LABEL_8;
LABEL_4:
  v2 = this[1];
  if (!v2)
    return;
LABEL_9:
  v3 = this[2];
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      v6 = *--v3;
      v5 = v6;
      *v3 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    while (v3 != v2);
    v4 = this[1];
  }
  this[2] = v2;
  operator delete(v4);
}

{
  cricket::StunMessage::~StunMessage(this);
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::StunMessage::GetNonComprehendedAttributes(cricket::StunMessage *this@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  char *v7;
  __int16 v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  char *v29;
  unint64_t v30;
  __int128 v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v3 != v2)
  {
    v6 = 0;
    v7 = 0;
    v33 = *((_QWORD *)this + 2);
    do
    {
      if (*(__int16 *)(*(_QWORD *)v3 + 8) < 0
        || (*(unsigned int (**)(cricket::StunMessage *, _QWORD))(*(_QWORD *)this + 24))(this, *(unsigned __int16 *)(*(_QWORD *)v3 + 8)))
      {
        goto LABEL_5;
      }
      v8 = *(_WORD *)(*(_QWORD *)v3 + 8);
      v9 = (unint64_t)a2[2];
      if ((unint64_t)v6 < v9)
      {
        if (!v6)
          goto LABEL_37;
        *(_WORD *)v6 = v8;
        v10 = v6 + 2;
        goto LABEL_4;
      }
      v11 = v6 - v7;
      if (v6 - v7 <= -3)
        abort();
      v12 = v11 >> 1;
      v13 = v9 - (_QWORD)v7;
      if (v13 <= (v11 >> 1) + 1)
        v14 = v12 + 1;
      else
        v14 = v13;
      v15 = v13 >= 0x7FFFFFFFFFFFFFFELL;
      v16 = 0x7FFFFFFFFFFFFFFFLL;
      if (!v15)
        v16 = v14;
      if (!v16)
      {
LABEL_37:
        __break(1u);
LABEL_38:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      if (v16 < 0)
        goto LABEL_38;
      v34 = 2 * v16;
      v17 = operator new(2 * v16);
      v18 = &v17[2 * v12];
      *(_WORD *)v18 = v8;
      v10 = v18 + 2;
      if (v6 != v7)
      {
        v19 = v6 - v7 - 2;
        if (v19 < 0x5E)
        {
          v20 = v6;
          goto LABEL_33;
        }
        v21 = (v6 - 2 - v7) & 0xFFFFFFFFFFFFFFFELL;
        v22 = (unint64_t)&v17[(v11 & 0xFFFFFFFFFFFFFFFELL) - 2];
        v23 = v22 - v21;
        v24 = (unint64_t)&v6[-v21 - 2];
        if (v23 > v22 || v24 > (unint64_t)(v6 - 2))
        {
          v20 = v6;
          goto LABEL_33;
        }
        if ((unint64_t)(&v6[-(v11 & 0xFFFFFFFFFFFFFFFELL)] - v17) < 0x20)
        {
          v20 = v6;
          do
          {
LABEL_33:
            v32 = *((_WORD *)v20 - 1);
            v20 -= 2;
            *((_WORD *)v18 - 1) = v32;
            v18 -= 2;
          }
          while (v20 != v7);
          goto LABEL_34;
        }
        v26 = (v19 >> 1) + 1;
        v27 = 2 * (v26 & 0xFFFFFFFFFFFFFFF0);
        v20 = &v6[-v27];
        v18 -= v27;
        v28 = &v17[2 * v12 - 16];
        v29 = v6 - 16;
        v30 = v26 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          *v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 16;
        }
        while (v30);
        if (v26 != (v26 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_33;
      }
LABEL_34:
      *a2 = v18;
      a2[1] = v10;
      a2[2] = &v17[v34];
      if (v7)
        operator delete(v7);
      v7 = v18;
      v2 = v33;
LABEL_4:
      a2[1] = v10;
      v6 = v10;
LABEL_5:
      v3 += 8;
    }
    while (v3 != v2);
  }
}

uint64_t cricket::StunMessage::ValidateMessageIntegrity(uint64_t a1, std::string *a2)
{
  std::string *v2;
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  size_t size;
  uint64_t v9;
  unsigned __int16 *v10;
  unint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  v2 = a2;
  v4 = (std::string *)(a1 + 104);
  if (v4 == a2)
    goto LABEL_10;
  if (*(char *)(a1 + 127) < 0)
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    else
    {
      a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      size = v2->__r_.__value_.__l.__size_;
    }
    std::string::__assign_no_alias<false>(v4, (const std::string::value_type *)a2, size);
LABEL_10:
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    if (v6 == v7)
      goto LABEL_23;
    goto LABEL_11;
  }
  if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) == 0)
  {
    v5 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    v4->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    if (v6 == v7)
      goto LABEL_23;
    goto LABEL_11;
  }
  std::string::__assign_no_alias<true>(v4, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if (v6 == v7)
  {
LABEL_23:
    result = 1;
    goto LABEL_29;
  }
LABEL_11:
  v9 = v6;
  do
  {
    if (*(_WORD *)(*(_QWORD *)v9 + 8) == 8)
    {
      if (*(char *)(a1 + 95) < 0)
      {
        if (cricket::StunMessage::ValidateMessageIntegrityOfType(8, 0x14uLL, *(unsigned __int16 **)(a1 + 72), *(_QWORD *)(a1 + 80), (const void **)&v2->__r_.__value_.__l.__data_))
        {
          goto LABEL_28;
        }
      }
      else if (cricket::StunMessage::ValidateMessageIntegrityOfType(8, 0x14uLL, (unsigned __int16 *)(a1 + 72), *(unsigned __int8 *)(a1 + 95), (const void **)&v2->__r_.__value_.__l.__data_))
      {
        goto LABEL_28;
      }
LABEL_25:
      result = 3;
      goto LABEL_29;
    }
    v9 += 8;
  }
  while (v9 != v7);
  while (*(unsigned __int16 *)(*(_QWORD *)v6 + 8) != 49248)
  {
    v6 += 8;
    if (v6 == v7)
      goto LABEL_23;
  }
  if (*(char *)(a1 + 95) < 0)
  {
    v10 = *(unsigned __int16 **)(a1 + 72);
    v11 = *(_QWORD *)(a1 + 80);
  }
  else
  {
    v10 = (unsigned __int16 *)(a1 + 72);
    v11 = *(unsigned __int8 *)(a1 + 95);
  }
  if (!cricket::StunMessage::ValidateMessageIntegrityOfType(49248, 4uLL, v10, v11, (const void **)&v2->__r_.__value_.__l.__data_))goto LABEL_25;
LABEL_28:
  result = 2;
LABEL_29:
  *(_DWORD *)(a1 + 96) = result;
  v13 = *(_WORD *)(a1 + 32) & 0x110;
  if ((*(_WORD *)(a1 + 32) & 0x110) != 0 && v13 != 16 && v13 != 256)
  {
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v16 != v15)
    {
      v17 = v16 + 8;
      do
      {
        v18 = *(_WORD *)(*(_QWORD *)(v17 - 8) + 8) == 9 || v17 == v15;
        v17 += 8;
      }
      while (!v18);
    }
  }
  return result;
}

BOOL cricket::StunMessage::ValidateMessageIntegrityOfType(int a1, size_t a2, unsigned __int16 *a3, unint64_t a4, const void **a5)
{
  _BOOL8 v5;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  unsigned __int16 *v15;
  unsigned int v16;
  unint64_t v17;
  _WORD *v20;
  size_t v21;
  const void **v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  const void **v27;
  uint64_t v28;
  _BYTE __s2[20];
  uint64_t v30;

  v5 = 0;
  v30 = *MEMORY[0x24BDAC8D0];
  if (a4 >= 0x14 && (a4 & 3) == 0)
  {
    v5 = 0;
    if (a4 >= 0x18 && (bswap32(a3[1]) >> 16) + 20 == a4)
    {
      v10 = bswap32(a3[11]) >> 16;
      if (a1 == bswap32(a3[10]) >> 16)
      {
        v11 = 24;
        v12 = 20;
LABEL_13:
        v17 = v11 + v10;
        if (v10 == a2 && v17 <= a4)
        {
          v20 = (_WORD *)operator new[]();
          memcpy(v20, a3, v12);
          if (a2 + v12 + 4 < a4)
            v20[1] = bswap32(a2 + v12 - 16) >> 16;
          v21 = *((unsigned __int8 *)a5 + 23);
          v22 = (const void **)*a5;
          v23 = (size_t)a5[1];
          v24 = operator new();
          rtc::OpenSSLDigest::OpenSSLDigest(v24, (unsigned __int16 *)"sha-1", 5);
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25))
          {
            if ((v21 & 0x80u) == 0)
              v26 = v21;
            else
              v26 = v23;
            if ((v21 & 0x80u) == 0)
              v27 = a5;
            else
              v27 = v22;
            v28 = rtc::ComputeHmac(v24, v27, v26, (uint64_t)v20, v12, (uint64_t)__s2, 20);
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            if (v28 == 20)
            {
              v5 = memcmp((char *)a3 + v12 + 4, __s2, a2) == 0;
LABEL_33:
              MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
              return v5;
            }
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          }
          v5 = 0;
          goto LABEL_33;
        }
      }
      else
      {
        v12 = 20;
        while (1)
        {
          LODWORD(v13) = 4 - (v10 & 3);
          v13 = (v10 & 3) != 0 ? v13 : 0;
          v14 = v12 + (unsigned __int16)v10 + v13;
          v11 = v14 + 8;
          if (v14 + 8 > a4)
            break;
          v12 = v14 + 4;
          v15 = (unsigned __int16 *)((char *)a3 + v14 + 4);
          v16 = bswap32(*v15);
          v10 = bswap32(v15[1]) >> 16;
          if (a1 == HIWORD(v16))
            goto LABEL_13;
        }
      }
      return 0;
    }
  }
  return v5;
}

uint64_t cricket::StunMessage::AddMessageIntegrityOfType(uint64_t a1, __int16 a2, size_t __len, __int128 *a4, size_t a5)
{
  void **p_b;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void **v16;
  size_t v17;
  void *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  void **__b;
  size_t v50;
  unint64_t v51;
  _BYTE __src[20];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_48;
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    p_b = (void **)operator new(v11 + 1);
    v50 = __len;
    v51 = v12 | 0x8000000000000000;
    __b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v51) = __len;
  p_b = (void **)&__b;
  if (__len)
LABEL_8:
    memset(p_b, 48, __len);
  *((_BYTE *)p_b + __len) = 0;
  v13 = operator new();
  v14 = v13;
  v15 = HIBYTE(v51);
  if (SHIBYTE(v51) < 0)
  {
    v17 = v50;
    if ((v50 & 0x8000000000000000) != 0)
      goto LABEL_47;
    v16 = __b;
    if (v50)
    {
      if (!__b)
        goto LABEL_47;
    }
  }
  else
  {
    v16 = (void **)&__b;
    v17 = HIBYTE(v51);
  }
  *(_WORD *)(v13 + 8) = a2;
  *(_QWORD *)v13 = &off_24C0C15A0;
  v18 = (void *)operator new[]();
  memcpy(v18, v16, v17);
  *(_QWORD *)(v14 + 16) = v18;
  *(_WORD *)(v14 + 10) = v17;
  if (v15 < 0)
    operator delete(__b);
  v48 = v14;
  *(_WORD *)(a1 + 34) += ((v17 + 3) & 0xFFFC) + 4;
  v19 = *(uint64_t **)(a1 + 16);
  if ((unint64_t)v19 < *(_QWORD *)(a1 + 24))
  {
    if (v19)
    {
      *v19 = v14;
      *(_QWORD *)(a1 + 16) = v19 + 1;
      v48 = 0;
      goto LABEL_21;
    }
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v20 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(a1 + 8), &v48);
  v21 = v48;
  *(_QWORD *)(a1 + 16) = v20;
  v48 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_21:
  __b = 0;
  v22 = operator new[]();
  v50 = 4096;
  v51 = v22;
  if (!cricket::StunMessage::Write(a1, (uint64_t)&__b))
  {
LABEL_32:
    v40 = 0;
    v41 = v51;
    v51 = 0;
    if (!v41)
      return v40;
LABEL_33:
    MEMORY[0x20BD0ADD4](v41, 0x1000C8077774924);
    return v40;
  }
  v23 = *(unsigned __int16 *)(v14 + 10);
  v24 = (int)__b;
  v25 = v51;
  v26 = operator new();
  rtc::OpenSSLDigest::OpenSSLDigest(v26, (unsigned __int16 *)"sha-1", 5);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
LABEL_31:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/transport/stun.cc");
      v40 = 0;
      v41 = v51;
      v51 = 0;
      if (!v41)
        return v40;
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  v28 = rtc::ComputeHmac(v26, a4, a5, v25, v24 - v23 - 4, (uint64_t)__src, 20);
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v28 != 20)
    goto LABEL_31;
  v29 = (void *)operator new[]();
  memcpy(v29, __src, __len);
  v30 = *(_QWORD *)(v14 + 16);
  if (v30)
    MEMORY[0x20BD0ADD4](v30, 0x1000C8077774924);
  *(_QWORD *)(v14 + 16) = v29;
  *(_WORD *)(v14 + 10) = __len;
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_48:
    abort();
  if (a5 <= 0x16)
  {
    HIBYTE(v47) = a5;
    v31 = &v46;
    v32 = (__int128 *)((char *)&v46 + a5);
    if (&v46 > a4)
      goto LABEL_41;
    goto LABEL_40;
  }
  v43 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a5 | 7) != 0x17)
    v43 = a5 | 7;
  v44 = v43 + 1;
  v31 = (__int128 *)operator new(v43 + 1);
  *((_QWORD *)&v46 + 1) = a5;
  v47 = v44 | 0x8000000000000000;
  *(_QWORD *)&v46 = v31;
  v32 = (__int128 *)((char *)v31 + a5);
  if (v31 <= a4)
  {
LABEL_40:
    if (v32 <= a4)
      goto LABEL_41;
    goto LABEL_47;
  }
LABEL_41:
  if (a5)
    memmove(v31, a4, a5);
  *(_BYTE *)v32 = 0;
  v45 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*v45);
  *(_OWORD *)v45 = v46;
  *(_QWORD *)(a1 + 120) = v47;
  *(_DWORD *)(a1 + 96) = 2;
  v40 = 1;
  v41 = v51;
  v51 = 0;
  if (v41)
    goto LABEL_33;
  return v40;
}

uint64_t cricket::StunMessage::Write(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  size_t v20;
  _QWORD *v21;
  size_t v22;
  unsigned int v23;
  size_t v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  unsigned int v41;
  unint64_t v42;
  size_t v43;
  size_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  unsigned int v49;
  size_t v50;
  size_t v51;
  size_t v52;
  size_t v53;
  void *v54;
  void *v55;
  uint64_t v56;

  v3 = result;
  v4 = *(unsigned __int16 *)(result + 32);
  v6 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)a2 + 2;
  v8 = *(_QWORD *)a2;
  if (v5 < v7)
  {
    if (v5 + (v5 >> 1) <= v7)
      v9 = *(_QWORD *)a2 + 2;
    else
      v9 = v5 + (v5 >> 1);
    result = operator new[]();
    v10 = result;
    v11 = *(_QWORD *)(a2 + 16);
    if (v11)
    {
      memcpy((void *)result, *(const void **)(a2 + 16), *(_QWORD *)a2);
      *(_QWORD *)(a2 + 16) = v10;
      result = MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
    }
    else
    {
      *(_QWORD *)(a2 + 16) = result;
    }
    *(_QWORD *)(a2 + 8) = v9;
    v8 = *(_QWORD *)a2;
  }
  *(_WORD *)(*(_QWORD *)(a2 + 16) + v8) = __rev16(v4);
  *(_QWORD *)a2 = v7;
  v12 = *(unsigned __int16 *)(v3 + 34);
  v13 = v6 + 4;
  v14 = *(_QWORD *)(a2 + 8);
  if (v14 < v6 + 4)
  {
    v15 = v14 + (v14 >> 1);
    if (v15 <= v13)
      v16 = v6 + 4;
    else
      v16 = v15;
    result = operator new[]();
    v17 = result;
    v18 = *(_QWORD *)(a2 + 16);
    if (v18)
    {
      memcpy((void *)result, *(const void **)(a2 + 16), *(_QWORD *)a2);
      *(_QWORD *)(a2 + 16) = v17;
      result = MEMORY[0x20BD0ADD4](v18, 0x1000C8077774924);
    }
    else
    {
      *(_QWORD *)(a2 + 16) = result;
    }
    *(_QWORD *)(a2 + 8) = v16;
    v7 = *(_QWORD *)a2;
  }
  *(_WORD *)(*(_QWORD *)(a2 + 16) + v7) = __rev16(v12);
  *(_QWORD *)a2 = v13;
  v19 = *(char *)(v3 + 63);
  if ((v19 & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v3 + 63) == 16)
      goto LABEL_19;
LABEL_22:
    v23 = *(_DWORD *)(v3 + 68);
    v20 = v6 + 8;
    v24 = *(_QWORD *)(a2 + 8);
    if (v24 < v20)
    {
      v25 = v24 + (v24 >> 1);
      if (v25 <= v20)
        v26 = v20;
      else
        v26 = v25;
      result = operator new[]();
      v27 = result;
      v28 = *(_QWORD *)(a2 + 16);
      if (v28)
      {
        memcpy((void *)result, *(const void **)(a2 + 16), *(_QWORD *)a2);
        *(_QWORD *)(a2 + 16) = v27;
        result = MEMORY[0x20BD0ADD4](v28, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)(a2 + 16) = result;
      }
      *(_QWORD *)(a2 + 8) = v26;
      v13 = *(_QWORD *)a2;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 16) + v13) = bswap32(v23);
    *(_QWORD *)a2 = v20;
    LOBYTE(v19) = *(_BYTE *)(v3 + 63);
    v21 = (_QWORD *)(v3 + 40);
    if ((v19 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_31;
  }
  if (*(_QWORD *)(v3 + 48) != 16)
    goto LABEL_22;
LABEL_19:
  v20 = v6 + 4;
  v21 = (_QWORD *)(v3 + 40);
  if ((v19 & 0x80) == 0)
  {
LABEL_20:
    v22 = v19;
    goto LABEL_34;
  }
LABEL_31:
  v22 = *(_QWORD *)(v3 + 48);
  if ((v22 & 0x8000000000000000) != 0 || (v21 = (_QWORD *)*v21, v22) && !v21)
  {
    __break(1u);
    return result;
  }
LABEL_34:
  if (v22)
  {
    v29 = v22 + v20;
    v30 = *(_QWORD *)(a2 + 8);
    if (v30 < v22 + v20)
    {
      v31 = v30 + (v30 >> 1);
      if (v31 <= v29)
        v32 = v22 + v20;
      else
        v32 = v31;
      v33 = (void *)operator new[]();
      v34 = v33;
      v35 = *(_QWORD *)(a2 + 16);
      if (v35)
      {
        memcpy(v33, *(const void **)(a2 + 16), *(_QWORD *)a2);
        *(_QWORD *)(a2 + 16) = v34;
        MEMORY[0x20BD0ADD4](v35, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)(a2 + 16) = v33;
      }
      *(_QWORD *)(a2 + 8) = v32;
      v20 = *(_QWORD *)a2;
    }
    memcpy((void *)(*(_QWORD *)(a2 + 16) + v20), v21, v22);
    *(_QWORD *)a2 = v29;
  }
  v36 = *(_QWORD *)(v3 + 8);
  v37 = *(_QWORD *)(v3 + 16);
  if (v36 == v37)
    return 1;
  v38 = v36 + 8;
  do
  {
    v41 = *(unsigned __int16 *)(*(_QWORD *)(v38 - 8) + 8);
    v43 = *(_QWORD *)a2;
    v42 = *(_QWORD *)(a2 + 8);
    v39 = *(_QWORD *)a2 + 2;
    v44 = *(_QWORD *)a2;
    if (v42 < v39)
    {
      if (v42 + (v42 >> 1) <= v39)
        v45 = *(_QWORD *)a2 + 2;
      else
        v45 = v42 + (v42 >> 1);
      v46 = (void *)operator new[]();
      v47 = v46;
      v48 = *(_QWORD *)(a2 + 16);
      if (v48)
      {
        memcpy(v46, *(const void **)(a2 + 16), *(_QWORD *)a2);
        *(_QWORD *)(a2 + 16) = v47;
        MEMORY[0x20BD0ADD4](v48, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)(a2 + 16) = v46;
      }
      *(_QWORD *)(a2 + 8) = v45;
      v44 = *(_QWORD *)a2;
    }
    *(_WORD *)(*(_QWORD *)(a2 + 16) + v44) = __rev16(v41);
    *(_QWORD *)a2 = v39;
    v49 = *(unsigned __int16 *)(*(_QWORD *)(v38 - 8) + 10);
    v50 = v43 + 4;
    v51 = *(_QWORD *)(a2 + 8);
    if (v51 < v50)
    {
      v52 = v51 + (v51 >> 1);
      if (v52 <= v50)
        v53 = v50;
      else
        v53 = v52;
      v54 = (void *)operator new[]();
      v55 = v54;
      v56 = *(_QWORD *)(a2 + 16);
      if (v56)
      {
        memcpy(v54, *(const void **)(a2 + 16), *(_QWORD *)a2);
        *(_QWORD *)(a2 + 16) = v55;
        MEMORY[0x20BD0ADD4](v56, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)(a2 + 16) = v54;
      }
      *(_QWORD *)(a2 + 8) = v53;
      v39 = *(_QWORD *)a2;
    }
    *(_WORD *)(*(_QWORD *)(a2 + 16) + v39) = __rev16(v49);
    *(_QWORD *)a2 = v50;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v38 - 8) + 40))(*(_QWORD *)(v38 - 8), a2);
    if ((_DWORD)result)
      v40 = v38 == v37;
    else
      v40 = 1;
    v38 += 8;
  }
  while (!v40);
  return result;
}

cricket::StunMessage *cricket::StunMessage::AddFingerprint(cricket::StunMessage *this)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  rtc *v15;
  unint64_t v16;
  int v17;
  char *v18;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD *v21;

  v2 = (_QWORD *)operator new();
  v4 = v2;
  *v2 = &off_24C0C1520;
  v2[1] = 294952;
  v21 = v2;
  *((_WORD *)this + 17) += 8;
  v5 = (char *)*((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  if ((unint64_t)v5 >= v6)
  {
    v7 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)this + 1, (uint64_t *)&v21);
    v8 = (uint64_t)v21;
    *((_QWORD *)this + 2) = v7;
    v21 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    if (!v5)
    {
      __break(1u);
      goto LABEL_18;
    }
    *(_QWORD *)v5 = v2;
    *((_QWORD *)this + 2) = v5 + 8;
    v21 = 0;
  }
  v19[0] = 0;
  v19[1] = 4096;
  v20 = operator new[]();
  this = (cricket::StunMessage *)cricket::StunMessage::Write((uint64_t)this, (uint64_t)v19);
  if ((_DWORD)this)
  {
    v5 = (char *)v20;
    v6 = v19[0] - *((unsigned __int16 *)v4 + 5) + 4294967292;
    v3 = v6 << 32;
    if ((v9 & 1) != 0)
    {
LABEL_8:
      if (v3)
      {
        v6 = (int)v6;
        v10 = -1;
        do
        {
          v11 = *v5++;
          v10 = *(_DWORD *)(rtc::UpdateCrc32(unsigned int,void const*,unsigned long)::kCrc32Table
                          + 4 * (v11 ^ v10)) ^ (v10 >> 8);
          --v6;
        }
        while (v6);
        v12 = v10 ^ 0xACABAAB1;
      }
      else
      {
        v12 = 1398035790;
      }
      *((_DWORD *)v4 + 3) = v12;
      goto LABEL_14;
    }
LABEL_18:
    v17 = v6;
    v18 = v5;
    v16 = v3;
    v3 = v16;
    LODWORD(v6) = v17;
    v5 = v18;
    if ((_DWORD)v15)
    {
      rtc::LoadCrc32Table(v15);
      rtc::UpdateCrc32(unsigned int,void const*,unsigned long)::kCrc32Table = (uint64_t)rtc::LoadCrc32Table(void)::kCrc32Table;
      v3 = v16;
      LODWORD(v6) = v17;
      v5 = v18;
    }
    goto LABEL_8;
  }
LABEL_14:
  v13 = v20;
  v20 = 0;
  if (v13)
    MEMORY[0x20BD0ADD4](v13, 0x1000C8077774924);
  return this;
}

std::string *cricket::StunMessage::Read(std::string *this, rtc::ByteBufferReader *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _BOOL8 v14;
  unint64_t v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  int8x16_t *v18;
  std::string *v19;
  size_t size;
  unint64_t v21;
  int8x16_t *v22;
  unint64_t v23;
  __int32 v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t *v27;
  int8x16_t v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unsigned int *v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *p_size;
  char v58;
  uint64_t v59;
  uint64_t v60;
  std::string v61;

  v2 = *((_QWORD *)a2 + 2);
  v3 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)a2)
    v4 = 1;
  else
    v4 = v3 == v2;
  if (!v4)
    goto LABEL_82;
  v6 = (uint64_t)this;
  this = std::string::__assign_external(this + 3, (const std::string::value_type *)(*(_QWORD *)a2 + v2), v3 - v2);
  v7 = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  if ((unint64_t)(v8 - v7) < 2)
    return 0;
  v9 = *(_QWORD *)a2;
  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + v7);
  v11 = v7 + 2;
  *((_QWORD *)a2 + 2) = v7 + 2;
  v12 = bswap32(v10);
  *(_WORD *)(v6 + 32) = HIWORD(v12);
  if ((v12 & 0x80000000) != 0)
    return 0;
  if ((unint64_t)(v8 - v11) < 2)
    return 0;
  v13 = *(unsigned __int16 *)(v9 + v11);
  *((_QWORD *)a2 + 2) = v7 + 4;
  *(_WORD *)(v6 + 34) = bswap32(v13) >> 16;
  if ((unint64_t)(v8 - (v7 + 4)) < 4)
    return 0;
  *((_QWORD *)a2 + 2) = v7 + 8;
  memset(&v61, 0, sizeof(v61));
  if ((unint64_t)(v8 - (v7 + 8)) < 0xC)
    goto LABEL_52;
  v15 = v9 + v7 + 8;
  if ((unint64_t)&v61 > v15 || (unint64_t)&v61.__r_.__value_.__r.__words[1] + 4 <= v15)
  {
    v16 = (const std::string::value_type *)(v9 + v7 + 4);
    v17 = *(_QWORD *)v15;
    LODWORD(v61.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v15 + 8);
    v61.__r_.__value_.__r.__words[0] = v17;
    *((_BYTE *)&v61.__r_.__value_.__s + 23) = 12;
    v61.__r_.__value_.__s.__data_[12] = 0;
    *((_QWORD *)a2 + 2) = v7 + 20;
    if (*(_DWORD *)v16 != 1118048801)
      this = std::string::insert(&v61, 0, v16, 4uLL);
    v18 = (int8x16_t *)(v6 + 40);
    if ((std::string *)(v6 + 40) != &v61)
    {
      if (*(char *)(v6 + 63) < 0)
      {
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v61;
        else
          v19 = (std::string *)v61.__r_.__value_.__r.__words[0];
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        else
          size = v61.__r_.__value_.__l.__size_;
        this = std::string::__assign_no_alias<false>((std::string *)(v6 + 40), (const std::string::value_type *)v19, size);
      }
      else if ((*((_BYTE *)&v61.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        this = (std::string *)std::string::__assign_no_alias<true>((_QWORD *)(v6 + 40), v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
      }
      else
      {
        *v18 = *(int8x16_t *)&v61.__r_.__value_.__l.__data_;
        *(_QWORD *)(v6 + 56) = *((_QWORD *)&v61.__r_.__value_.__l + 2);
      }
    }
    if ((*(char *)(v6 + 63) & 0x80000000) == 0)
    {
      v21 = *(unsigned __int8 *)(v6 + 63);
LABEL_34:
      if (v21)
        v22 = v18;
      else
        v22 = 0;
      v23 = v21 - 4;
      if (v21 < 4)
      {
        v24 = 0;
        goto LABEL_46;
      }
      if (v23 >= 0x1C)
      {
        v26 = (v23 >> 2) + 1;
        v25 = v26 & 0x7FFFFFFFFFFFFFF8;
        v27 = v22 + 1;
        v28 = 0uLL;
        v29 = v26 & 0x7FFFFFFFFFFFFFF8;
        v30 = 0uLL;
        do
        {
          v28 = veorq_s8(vrev32q_s8(v27[-1]), v28);
          v30 = veorq_s8(vrev32q_s8(*v27), v30);
          v27 += 2;
          v29 -= 8;
        }
        while (v29);
        v31 = veorq_s8(v30, v28);
        *(int8x8_t *)v31.i8 = veor_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
        v24 = v31.i32[0] ^ v31.i32[1];
        if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_46:
          *(_DWORD *)(v6 + 64) = v24;
          v35 = *(unsigned __int16 *)(v6 + 34);
          v37 = *((_QWORD *)a2 + 2);
          v36 = *((_QWORD *)a2 + 3);
          if (v36 - v37 == v35)
          {
            v38 = *(_QWORD **)(v6 + 8);
            v39 = *(_QWORD **)(v6 + 16);
            if (v39 != v38)
            {
              do
              {
                v41 = *--v39;
                v40 = v41;
                *v39 = 0;
                if (v41)
                  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
              }
              while (v39 != v38);
              *(_QWORD *)(v6 + 16) = v38;
              v37 = *((_QWORD *)a2 + 2);
              v36 = *((_QWORD *)a2 + 3);
              v35 = *(unsigned __int16 *)(v6 + 34);
            }
            v42 = v36 - v37 - v35;
            while (1)
            {
              v43 = *((_QWORD *)a2 + 2);
              v44 = *((_QWORD *)a2 + 3);
              v14 = v44 - v43 <= v42;
              if ((unint64_t)(v44 - v43) < 2 || v44 - v43 <= v42)
                goto LABEL_53;
              v46 = *(_QWORD *)a2;
              v47 = *(unsigned __int16 *)(*(_QWORD *)a2 + v43);
              *((_QWORD *)a2 + 2) = v43 + 2;
              if ((unint64_t)(v44 - (v43 + 2)) < 2)
                goto LABEL_53;
              v48 = bswap32(v47) >> 16;
              v49 = *(unsigned __int16 *)(v46 + v43 + 2);
              *((_QWORD *)a2 + 2) = v43 + 4;
              v50 = bswap32(v49) >> 16;
              v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v48);
              if (v51)
              {
                v52 = cricket::StunAttribute::Create(v51, v48, v50, v6);
                v60 = v52;
                if (v52)
                {
                  if (!(*(unsigned int (**)(uint64_t, rtc::ByteBufferReader *))(*(_QWORD *)v52 + 32))(v52, a2))goto LABEL_76;
LABEL_73:
                  this = *(std::string **)(v6 + 16);
                  if ((unint64_t)this >= *(_QWORD *)(v6 + 24))
                  {
                    p_size = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(v6 + 8), &v60);
                  }
                  else
                  {
                    if (!this)
                      goto LABEL_82;
                    v56 = v60;
                    v60 = 0;
                    this->__r_.__value_.__r.__words[0] = v56;
                    p_size = &this->__r_.__value_.__l.__size_;
                  }
                  *(_QWORD *)(v6 + 16) = p_size;
                  goto LABEL_80;
                }
              }
              else
              {
                if ((v48 & 0x4000) != 0)
                {
                  v55 = operator new();
                  *(_WORD *)(v55 + 8) = v48;
                  *(_WORD *)(v55 + 10) = v50;
                  *(_QWORD *)v55 = &off_24C0C15A0;
                  *(_QWORD *)(v55 + 16) = 0;
                  v60 = v55;
                  if (!cricket::StunByteStringAttribute::Read((cricket::StunByteStringAttribute *)v55, a2))
                  {
LABEL_76:
                    v58 = 0;
                    v59 = v60;
                    v60 = 0;
                    if (!v59)
                      goto LABEL_57;
LABEL_81:
                    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
                    goto LABEL_57;
                  }
                  goto LABEL_73;
                }
                v60 = 0;
              }
              v53 = (unsigned __int16)(v50 + 3) & 0xFFFC;
              v54 = *((_QWORD *)a2 + 2);
              if (*((_QWORD *)a2 + 3) - v54 < v53)
                goto LABEL_76;
              *((_QWORD *)a2 + 2) = v54 + v53;
LABEL_80:
              v58 = 1;
              v59 = v60;
              v60 = 0;
              if (v59)
                goto LABEL_81;
LABEL_57:
              if ((v58 & 1) == 0)
                goto LABEL_53;
            }
          }
LABEL_52:
          v14 = 0;
LABEL_53:
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          return (std::string *)v14;
        }
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
      v32 = &v22->u32[v25];
      v33 = v21 - v25 * 4;
      do
      {
        v34 = *v32++;
        v24 ^= bswap32(v34);
        v33 -= 4;
      }
      while (v33 > 3);
      goto LABEL_46;
    }
    v21 = *(_QWORD *)(v6 + 48);
    if ((v21 & 0x8000000000000000) == 0)
    {
      v18 = (int8x16_t *)v18->i64[0];
      if (!v21 || v18)
        goto LABEL_34;
    }
  }
LABEL_82:
  __break(1u);
  return this;
}

