void `non-virtual thunk to'webrtc::internal::VideoReceiveStream2::~VideoReceiveStream2(webrtc::internal::VideoReceiveStream2 *this)
{
  webrtc::internal::VideoReceiveStream2::~VideoReceiveStream2((webrtc::internal::VideoReceiveStream2 *)((char *)this - 8));
}

{
  webrtc::internal::VideoReceiveStream2::~VideoReceiveStream2((webrtc::internal::VideoReceiveStream2 *)((char *)this - 16));
}

{
  webrtc::internal::VideoReceiveStream2::~VideoReceiveStream2((webrtc::internal::VideoReceiveStream2 *)((char *)this - 24));
}

{
  webrtc::internal::VideoReceiveStream2::~VideoReceiveStream2((webrtc::internal::VideoReceiveStream2 *)((char *)this - 32));
}

{
  webrtc::internal::VideoReceiveStream2::~VideoReceiveStream2((webrtc::internal::VideoReceiveStream2 *)((char *)this - 40));
}

{
  webrtc::internal::VideoReceiveStream2::~VideoReceiveStream2((webrtc::internal::VideoReceiveStream2 *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::internal::VideoReceiveStream2::~VideoReceiveStream2((webrtc::internal::VideoReceiveStream2 *)((char *)this - 16));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::internal::VideoReceiveStream2::~VideoReceiveStream2((webrtc::internal::VideoReceiveStream2 *)((char *)this - 24));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::internal::VideoReceiveStream2::~VideoReceiveStream2((webrtc::internal::VideoReceiveStream2 *)((char *)this - 32));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::internal::VideoReceiveStream2::~VideoReceiveStream2((webrtc::internal::VideoReceiveStream2 *)((char *)this - 40));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::internal::VideoReceiveStream2::RegisterWithTransport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 4024) = a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(&v9, a2, *(unsigned int *)(a1 + 144), a1 + 2400);
  v4 = v9;
  v9 = 0;
  result = *(_QWORD *)(a1 + 4032);
  *(_QWORD *)(a1 + 4032) = v4;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v9;
    v9 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v6 = 4048;
  if (!*(_BYTE *)(a1 + 4052))
    v6 = 172;
  v7 = *(unsigned int *)(a1 + v6);
  if ((_DWORD)v7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(&v9, a2, v7, *(_QWORD *)(a1 + 4040));
    v8 = v9;
    v9 = 0;
    result = *(_QWORD *)(a1 + 4056);
    *(_QWORD *)(a1 + 4056) = v8;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      result = v9;
      v9 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void webrtc::internal::VideoReceiveStream2::Start(webrtc::internal::VideoReceiveStream2 *this)
{
  void (***v1)(webrtc::FieldTrialParameterInterface *__hidden);
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char **v12;
  rtc::webrtc_checks_impl *v13;
  uint64_t v14;
  uint64_t v15;
  char *p_p;
  BOOL v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __n128 (*v22)(uint64_t, __n128 *, __n128 *);
  uint64_t v23;
  int v24;
  uint64_t *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  char *v30;
  uint64_t **v31;
  char *v32;
  unsigned int v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void **v47;
  uint64_t v48;
  __int16 v49;
  char v50;
  __int16 v51;
  char v52;
  void *__p;
  uint64_t v54;
  unsigned __int8 v55;
  void (**v56)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60[2];
  __int16 v61;
  unsigned int v62;
  char v63;
  void (**v64)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v65;
  __n128 (*v66)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v67)(uint64_t);
  void *v68[2];
  __int16 v69;
  unsigned int v70;
  char v71;
  _QWORD v72[4];

  v72[2] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 336))
    return;
  if (*((_BYTE *)this + 176))
  {
    v3 = 0;
    if (*((int *)this + 38) < 1)
      goto LABEL_9;
  }
  else
  {
    v4 = *((_QWORD *)this + 352);
    if (!v4)
      goto LABEL_9;
    v3 = *(_DWORD *)(v4 + 4) == -1;
    if (*((int *)this + 38) < 1)
      goto LABEL_9;
  }
  if (!v3)
    *(_DWORD *)(*((_QWORD *)this + 502) + 972) = 1;
LABEL_9:
  atomic_store(1u, (unsigned __int8 *)this + 104);
  if (*((_BYTE *)this + 260))
  {
    v5 = operator new();
    v6 = *((_QWORD *)this + 9);
    v7 = *((_DWORD *)this + 64);
    *(_QWORD *)v5 = &off_24C0B5390;
    *(_DWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 32) = v5 + 32;
    *(_QWORD *)(v5 + 40) = v5 + 32;
    *(_QWORD *)(v5 + 48) = 0;
    if ((v7 - 501) < 0xFFFFFE15)
      v7 = 10;
    *(_DWORD *)(v5 + 56) = v7;
    *(_QWORD *)(v5 + 64) = 0;
    *(_QWORD *)(v5 + 72) = 0;
    *(_QWORD *)(v5 + 80) = (char *)this + 8;
    (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, "IncomingVideoStream", 19, 1);
    v8 = *((_QWORD *)this + 297);
    *((_QWORD *)this + 297) = v5;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v46 = (char *)*((_QWORD *)this + 297);
      v9 = *((_QWORD *)this + 14);
      v48 = *((_QWORD *)this + 15);
      if (v9 == v48)
        goto LABEL_78;
    }
    else
    {
      v46 = (char *)v5;
      v9 = *((_QWORD *)this + 14);
      v48 = *((_QWORD *)this + 15);
      if (v9 == v48)
        goto LABEL_78;
    }
    goto LABEL_18;
  }
  v46 = (char *)this + 8;
  v9 = *((_QWORD *)this + 14);
  v48 = *((_QWORD *)this + 15);
  if (v9 != v48)
  {
LABEL_18:
    if ((char *)v68 + 1 > "w" && v68 <= (void **)"w")
    {
      webrtc::PayloadStringToCodecType(v9);
      v64 = off_24C0B4170;
      v66 = 0;
      v67 = 0;
      v65 = 0;
      LOBYTE(v69) = 1;
LABEL_88:
      __break(1u);
LABEL_89:
      webrtc::PayloadStringToCodecType(v9);
      v65 = 0;
      v66 = 0;
      v67 = 0;
      *(_WORD *)((char *)v1 + 55) = 1;
      LOWORD(v68[0]) = 119;
      v64 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4110;
      LOBYTE(v70) = 0;
      v71 = 0;
      v56 = off_24C0B4170;
      v47[1] = 0;
      v47[2] = 0;
      *v47 = 0;
      LOBYTE(v61) = 1;
      __break(1u);
    }
    v1 = &v64;
    v47 = &v57;
    if ((char *)v60 + 1 > "h" && v60 <= (void **)"h")
      goto LABEL_89;
    v12 = (char **)((char *)this + 2336);
    while (1)
    {
      v13 = (rtc::webrtc_checks_impl *)webrtc::PayloadStringToCodecType(v9);
      v14 = *((_QWORD *)this + 7);
      v65 = 0;
      v66 = 0;
      v67 = 0;
      v69 = 1;
      LOWORD(v68[0]) = 119;
      v64 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4110;
      LOBYTE(v70) = 0;
      v71 = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v61 = 1;
      LOWORD(v60[0]) = 104;
      v56 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4110;
      LOBYTE(v62) = 0;
      v63 = 0;
      v72[0] = &v64;
      v72[1] = &v56;
      (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v14 + 16))(&__p, v14, "WebRTC-Video-InitialDecoderResolution", 37);
      if ((char)v55 < 0)
      {
        v15 = v54;
        if (v54 < 0)
          goto LABEL_88;
        p_p = (char *)__p;
        if (v54)
        {
          if (!__p)
            goto LABEL_88;
        }
      }
      else
      {
        v15 = v55;
        p_p = (char *)&__p;
      }
      webrtc::ParseFieldTrial(v72, 2, p_p, v15);
      if ((char)v55 < 0)
        operator delete(__p);
      v17 = !v71 || v63 == 0;
      v18 = !v17;
      v19 = v70;
      v20 = v62;
      v56 = off_24C0B4170;
      if (((char)v61 & 0x80000000) == 0)
        break;
      operator delete(v60[0]);
      v21 = v57;
      if (v57)
        goto LABEL_46;
LABEL_47:
      v64 = off_24C0B4170;
      if ((char)v69 < 0)
      {
        operator delete(v68[0]);
        v22 = (__n128 (*)(uint64_t, __n128 *, __n128 *))v65;
        if (!v65)
          goto LABEL_50;
LABEL_49:
        v66 = v22;
        operator delete(v22);
        goto LABEL_50;
      }
      v22 = (__n128 (*)(uint64_t, __n128 *, __n128 *))v65;
      if (v65)
        goto LABEL_49;
LABEL_50:
      if (v18)
        v23 = v19 | (v20 << 32);
      else
        v23 = 0xB400000140;
      v24 = *((_DWORD *)this + 78);
      v25 = (uint64_t *)*((_QWORD *)this + 28);
      if (v25)
      {
        v26 = *(_DWORD *)(v9 + 96);
        do
        {
          v27 = *((_DWORD *)v25 + 7);
          if (v26 >= v27)
          {
            if (v27 >= v26)
            {
              v28 = 1;
              goto LABEL_66;
            }
            ++v25;
          }
          v25 = (uint64_t *)*v25;
        }
        while (v25);
        v28 = 0;
      }
      else
      {
        v28 = 0;
        v26 = *(_DWORD *)(v9 + 96);
      }
LABEL_66:
      webrtc::RtpVideoStreamReceiver2::AddReceiveCodec((uint64_t)this + 2384, v26, v13, (_QWORD *)(v9 + 24), v28);
      v29 = *(unsigned __int8 *)(v9 + 96);
      if (*((_BYTE *)this + 2258) && *((unsigned __int8 *)this + 2257) == v29)
        *((_BYTE *)this + 2258) = 0;
      v30 = *v12;
      v31 = (uint64_t **)((char *)this + 2336);
      v32 = (char *)this + 2336;
      if (*v12)
      {
        while (1)
        {
          while (1)
          {
            v32 = v30;
            v33 = v30[28];
            if (v33 <= v29)
              break;
            v30 = *(char **)v32;
            v31 = (uint64_t **)v32;
            if (!*(_QWORD *)v32)
              goto LABEL_76;
          }
          if (v33 >= v29)
            break;
          v30 = (char *)*((_QWORD *)v32 + 1);
          if (!v30)
          {
            v31 = (uint64_t **)(v32 + 8);
            goto LABEL_76;
          }
        }
      }
      else
      {
LABEL_76:
        v34 = v32;
        v32 = (char *)operator new(0x38uLL);
        v32[28] = v29;
        *((_QWORD *)v32 + 4) = 0;
        *((_QWORD *)v32 + 5) = 0;
        *((_QWORD *)v32 + 6) = 1;
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = v34;
        *v31 = (uint64_t *)v32;
        v35 = **((_QWORD **)this + 291);
        v36 = (uint64_t *)v32;
        if (v35)
        {
          *((_QWORD *)this + 291) = v35;
          v36 = *v31;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 292), v36);
        ++*((_QWORD *)this + 293);
        v1 = &v64;
      }
      v32[32] = 0;
      *(_WORD *)(v32 + 33) = v51;
      v32[35] = v52;
      v32[36] = 0;
      *(_WORD *)(v32 + 37) = v49;
      v32[39] = v50;
      *((_QWORD *)v32 + 5) = v23;
      v9 += 104;
      *((_DWORD *)v32 + 12) = v24;
      *((_DWORD *)v32 + 13) = (_DWORD)v13;
      if (v9 == v48)
        goto LABEL_78;
    }
    v21 = v57;
    if (!v57)
      goto LABEL_47;
LABEL_46:
    v58 = v21;
    operator delete(v21);
    goto LABEL_47;
  }
LABEL_78:
  v37 = (_QWORD *)operator new();
  *v37 = &off_24C0C4A78;
  v37[1] = (char *)this + 2088;
  v37[2] = (char *)this + 432;
  v37[3] = v46;
  *((_QWORD *)this + 265) = v37;
  v38 = *((_QWORD *)this + 473);
  *((_QWORD *)this + 473) = v37;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
  v39 = (_QWORD *)*((_QWORD *)this + 41);
  v40 = (char *)this + 32;
  v41 = v39 + 12;
  v42 = v39[13];
  if ((_QWORD *)v42 == v39 + 12)
    goto LABEL_83;
  while (*(char **)(v42 + 16) != v40)
  {
    v42 = *(_QWORD *)(v42 + 8);
    if ((_QWORD *)v42 == v41)
      goto LABEL_83;
  }
  if ((_QWORD *)v42 == v41)
  {
LABEL_83:
    v43 = operator new(0x18uLL);
    v43[1] = v41;
    v43[2] = v40;
    v44 = v39[12];
    *v43 = v44;
    *(_QWORD *)(v44 + 8) = v43;
    v39[12] = v43;
    ++v39[14];
  }
  v45 = *((_QWORD *)this + 540);
  v64 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))this;
  v66 = absl::internal_any_invocable::LocalManagerTrivial;
  v67 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::VideoReceiveStream2::Start(void)::$_2 &&>;
  (*(void (**)(uint64_t, void (***)(webrtc::FieldTrialParameterInterface *__hidden), void (***)(webrtc::FieldTrialParameterInterface *__hidden), void **))(*(_QWORD *)v45 + 8))(v45, &v64, &v56, &__p);
  v66(1, (__n128 *)&v64, (__n128 *)&v64);
  webrtc::VideoStreamBufferController::StartNextDecode(*((webrtc::VideoStreamBufferController **)this + 502), 1);
  *((_BYTE *)this + 336) = 1;
  webrtc::RtpVideoStreamReceiver2::StartReceive((webrtc::internal::VideoReceiveStream2 *)((char *)this + 2384));
}

uint64_t webrtc::internal::VideoReceiveStream2::Stop(webrtc::internal::VideoReceiveStream2 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  TimeDelta v20;
  TimeDelta v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t result;
  char v32;
  _QWORD v33[16];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  pthread_mutex_t v43;
  pthread_cond_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 2840))
  {
    v9 = *((_QWORD *)this + 310);
    if (v9)
    {
      v10 = *((_QWORD *)this + 357);
      webrtc::PacketRouter::MaybeRemoveRembModuleCandidate(*((_QWORD **)this + 310), v10, 0, a4, a5, a6, a7, a8);
      v12 = *(char **)(v9 + 88);
      v11 = *(char **)(v9 + 96);
      if (v12 != v11)
      {
        while (*(_QWORD *)v12 != v10)
        {
          v12 += 8;
          if (v12 == v11)
          {
            v12 = *(char **)(v9 + 96);
            break;
          }
        }
      }
      if (v11 == v12)
        __break(1u);
      v13 = v11 - (v12 + 8);
      if (v11 != v12 + 8)
        memmove(v12, v12 + 8, v11 - (v12 + 8));
      *(_QWORD *)(v9 + 96) = &v12[v13];
      webrtc::PacketRouter::AddReceiveRtpModule(*((_QWORD **)this + 310), *((_QWORD *)this + 357), 0);
    }
  }
  *((_BYTE *)this + 2840) = 0;
  *((_DWORD *)this + 502) = *((_DWORD *)this + 776);
  *((_BYTE *)this + 2012) = 1;
  v14 = *((_QWORD *)this + 502);
  (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 48) + 40))(*(_QWORD *)(v14 + 48));
  v15 = *(_QWORD *)(v14 + 936);
  if (v15)
  {
    *(_BYTE *)(v15 + 4) = 0;
    do
    {
      v16 = __ldaxr((unsigned int *)v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v15));
    if (!v17)
      MEMORY[0x20BD0ADEC]();
    *(_QWORD *)(v14 + 936) = 0;
  }
  *(_BYTE *)(v14 + 976) = 0;
  v18 = *((_QWORD *)this + 41);
  v34 = (uint64_t)this + 32;
  std::list<webrtc::CallStatsObserver *>::remove((_QWORD *)(v18 + 96), &v34);
  if (*((_BYTE *)this + 336))
  {
    rtc::Event::Event((rtc::Event *)&v43, 0, 0);
    v19 = *((_QWORD *)this + 540);
    v34 = (uint64_t)this;
    *(_QWORD *)&v35 = &v43;
    *((_QWORD *)&v35 + 1) = absl::internal_any_invocable::LocalManagerTrivial;
    *(_QWORD *)&v36 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::VideoReceiveStream2::Stop(void)::$_2 &&>;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *, char *))(*(_QWORD *)v19 + 8))(v19, &v34, v33, &v32);
    (*((void (**)(uint64_t, uint64_t *, uint64_t *))&v35 + 1))(1, &v34, &v34);
    v20.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v21.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v43, v20, v21);
    *((_BYTE *)this + 336) = 0;
    v34 = 0x7FFFFFFFFFFFFFFFLL;
    v35 = 0u;
    v42 = 0;
    v41 = 0u;
    v40 = 0u;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v36 = 0u;
    v22 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 259) + 24))(*((_QWORD *)this + 259), *((unsigned int *)this + 36));
    v23 = v22;
    if (v22)
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v23 + 32))(&v34, v23);
      v23 = v25 & 0xFF00000000;
      v24 = v25 & 0xFFFFFF00;
      v25 = v25;
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    v26 = 4048;
    if (!*((_BYTE *)this + 4052))
      v26 = 172;
    if (*(_DWORD *)((char *)this + v26)
      && (v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 259) + 24))(*((_QWORD *)this + 259))) != 0)
    {
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v27 + 32))(v33);
      v28 = v23 | v24 | v25;
      v29 = (char *)this + 432;
    }
    else
    {
      v28 = v23 | v24 | v25;
      v29 = (char *)this + 432;
    }
    webrtc::internal::ReceiveStatisticsProxy::UpdateHistograms((uint64_t)v29, v28);
    pthread_mutex_destroy(&v43);
    pthread_cond_destroy(&v44);
  }
  std::__tree<std::__value_type<unsigned char,std::map<std::string,std::string>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<std::string,std::string>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 3320, *((_QWORD **)this + 416));
  *((_QWORD *)this + 415) = (char *)this + 3328;
  *((_QWORD *)this + 417) = 0;
  *((_QWORD *)this + 416) = 0;
  std::__tree<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>>>::destroy((uint64_t)this + 3296, *((_QWORD **)this + 413));
  *((_QWORD *)this + 412) = (char *)this + 3304;
  *((_QWORD *)this + 414) = 0;
  *((_QWORD *)this + 413) = 0;
  *((_BYTE *)this + 3088) = 0;
  std::unique_ptr<webrtc::H26xPacketBuffer>::reset[abi:sn180100]((uint64_t *)this + 387, 0);
  if (*((_BYTE *)this + 2258))
    *((_BYTE *)this + 2258) = 0;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 2328, *((_QWORD **)this + 292));
  *((_QWORD *)this + 291) = (char *)this + 2336;
  *((_QWORD *)this + 293) = 0;
  *((_QWORD *)this + 292) = 0;
  v30 = *((_QWORD *)this + 473);
  *((_QWORD *)this + 473) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
  result = *((_QWORD *)this + 297);
  *((_QWORD *)this + 297) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  atomic_store(0, (unsigned __int8 *)this + 104);
  return result;
}

uint64_t webrtc::internal::VideoReceiveStream2::SetRtcpMode(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 156) = a2;
  return webrtc::RTCPSender::SetRTCPStatus(*(_QWORD *)(a1 + 2856) + 32, a2);
}

uint64_t webrtc::internal::VideoReceiveStream2::SetFlexFecProtection(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 2832) = a2;
  *(_QWORD *)(result + 184) = a2;
  *(_BYTE *)(result + 176) = a2 != 0;
  return result;
}

uint64_t webrtc::internal::VideoReceiveStream2::SetLossNotificationEnabled(webrtc::internal::VideoReceiveStream2 *this, int a2)
{
  *((_BYTE *)this + 162) = a2;
  return webrtc::RtpVideoStreamReceiver2::SetLossNotificationEnabled((uint64_t)this + 2384, a2);
}

uint64_t webrtc::internal::VideoReceiveStream2::SetNackHistory(uint64_t this, TimeDelta a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t var0;
  int64_t v11;
  uint64_t v12;

  v3 = (_QWORD *)this;
  v4 = *(int *)(this + 152);
  if (a2.var0 < 0)
  {
    if (-a2.var0 % 0x3E8uLL <= 0x1F4)
      v6 = 0;
    else
      v6 = -1;
    v5 = v6 - -a2.var0 / 0x3E8uLL;
    if (v5 == v4)
      return this;
    goto LABEL_10;
  }
  v5 = (unint64_t)a2.var0 / 0x3E8;
  if ((unint64_t)a2.var0 % 0x3E8 > 0x1F3)
    ++v5;
  if (v5 != v4)
  {
LABEL_10:
    *(_DWORD *)(this + 152) = v5;
    if (*(_BYTE *)(this + 176))
    {
      LODWORD(v7) = 1;
    }
    else
    {
      v7 = *(_QWORD *)(this + 2816);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 4) != -1;
    }
    v8 = (unint64_t)a2.var0 / 0x3E8;
    if ((unint64_t)a2.var0 % 0x3E8 > 0x1F3)
      ++v8;
    if (-a2.var0 % 0x3E8uLL <= 0x1F4)
      v9 = 0;
    else
      v9 = -1;
    if (a2.var0 < 0)
      v8 = v9 - -a2.var0 / 0x3E8uLL;
    if (v8 <= 0)
      LODWORD(v7) = 0;
    *(_DWORD *)(*(_QWORD *)(this + 4016) + 972) = v7;
    this = webrtc::RtpVideoStreamReceiver2::SetNackHistory((webrtc::RtpVideoStreamReceiver2 *)(this + 2384), a2);
    var0 = 200000;
    if ((unint64_t)(a2.var0 - 1) < 0xF423F)
      var0 = a2.var0;
    v11 = 3 * a2.var0;
    if ((unint64_t)(a2.var0 - 1) >= 0xF423F)
      v11 = 3000000;
    v3[511] = var0;
    v3[512] = v11;
    v12 = v3[502];
    *(_QWORD *)(v12 + 888) = var0;
    *(_QWORD *)(v12 + 896) = v11;
  }
  return this;
}

webrtc::UlpfecReceiver *webrtc::internal::VideoReceiveStream2::SetProtectionPayloadTypes(webrtc::internal::VideoReceiveStream2 *this, int a2, int a3)
{
  uint64_t v5;
  webrtc::ForwardErrorCorrection *v6;
  uint64_t v7;
  webrtc::UlpfecReceiver *result;

  *((_DWORD *)this + 706) = a2;
  if (a2 == -1)
  {
    result = (webrtc::UlpfecReceiver *)*((_QWORD *)this + 352);
    *((_QWORD *)this + 352) = 0;
    if (result)
      goto LABEL_3;
  }
  else
  {
    v5 = *((_QWORD *)this + 308);
    v6 = (webrtc::ForwardErrorCorrection *)*(unsigned int *)(*((_QWORD *)this + 309) + 32);
    v7 = operator new();
    *(_DWORD *)v7 = (_DWORD)v6;
    *(_DWORD *)(v7 + 4) = a3;
    *(_QWORD *)(v7 + 8) = v5;
    *(_QWORD *)(v7 + 16) = (char *)this + 2392;
    webrtc::ForwardErrorCorrection::CreateUlpfec(v6, (uint64_t *)(v7 + 24));
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = v7 + 56;
    *(_QWORD *)(v7 + 64) = v7 + 56;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_QWORD *)(v7 + 104) = 0;
    *(_QWORD *)(v7 + 112) = 0x8000000000000000;
    result = (webrtc::UlpfecReceiver *)*((_QWORD *)this + 352);
    *((_QWORD *)this + 352) = v7;
    if (result)
    {
LABEL_3:
      webrtc::UlpfecReceiver::~UlpfecReceiver(result);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  return result;
}

uint64_t webrtc::internal::VideoReceiveStream2::SetRtcpXr(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 2856);
  v3 = a2 & 1;
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 128));
  *(_BYTE *)(v2 + 408) = v3;
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 128));
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 808));
  *(_BYTE *)(v2 + 968) = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 808));
}

void webrtc::internal::VideoReceiveStream2::SetAssociatedPayloadTypes(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 4040);
  if (v2)
  {
    v3 = a2 + 1;
    v4 = (_QWORD *)a2[1];
    v9 = (_QWORD *)*a2;
    v10 = v4;
    v11 = a2[2];
    if (v11)
    {
      v4[2] = &v10;
      *a2 = v3;
      *v3 = 0;
      a2[2] = 0;
    }
    else
    {
      v9 = &v10;
    }
    v6 = *(_QWORD **)(v2 + 24);
    v5 = (_QWORD *)(v2 + 24);
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(v5 - 1), v6);
    v7 = v10;
    *(v5 - 1) = v9;
    *v5 = v7;
    v8 = v11;
    v5[1] = v11;
    if (v8)
    {
      v7[2] = v5;
      v9 = &v10;
      v10 = 0;
      v11 = 0;
      v7 = 0;
    }
    else
    {
      *(v5 - 1) = v5;
    }
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v9, v7);
  }
}

uint64_t webrtc::internal::VideoReceiveStream2::GetStats@<X0>(webrtc::internal::VideoReceiveStream2 *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  pthread_mutex_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  webrtc::internal::ReceiveStatisticsProxy::GetStats((webrtc::internal::VideoReceiveStream2 *)((char *)this + 432), a2);
  *(_DWORD *)(a2 + 212) = 0;
  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 259) + 24))(*((_QWORD *)this + 259), *(unsigned int *)(a2 + 268));
  if (v4)
  {
    v5 = v4;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v4 + 16))(&v22);
    v6 = v25;
    *(_OWORD *)(a2 + 328) = v24;
    *(_OWORD *)(a2 + 344) = v6;
    *(_QWORD *)(a2 + 360) = v26;
    v7 = v23;
    *(_OWORD *)(a2 + 296) = v22;
    *(_OWORD *)(a2 + 312) = v7;
    *(_DWORD *)(a2 + 212) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
  v8 = 4048;
  if (!*((_BYTE *)this + 4052))
    v8 = 172;
  if (!*(_DWORD *)((char *)this + v8))
    goto LABEL_8;
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 259) + 24))(*((_QWORD *)this + 259));
  if (!v9)
    goto LABEL_8;
  v10 = v9;
  *(_DWORD *)(a2 + 212) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v10 + 16))(&v22, v10);
  v11 = *(unsigned __int8 *)(a2 + 464);
  v12 = v25;
  *(_OWORD *)(a2 + 424) = v24;
  *(_OWORD *)(a2 + 440) = v12;
  *(_QWORD *)(a2 + 456) = v26;
  v13 = v23;
  *(_OWORD *)(a2 + 392) = v22;
  *(_OWORD *)(a2 + 408) = v13;
  if (!v11)
  {
    *(_BYTE *)(a2 + 464) = 1;
    v14 = *((_QWORD *)this + 357);
    v15 = (pthread_mutex_t *)(v14 + 808);
    pthread_mutex_lock((pthread_mutex_t *)(v14 + 808));
    v16 = *(_QWORD *)(v14 + 880);
    if (v16)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    v14 = *((_QWORD *)this + 357);
    v15 = (pthread_mutex_t *)(v14 + 808);
    pthread_mutex_lock((pthread_mutex_t *)(v14 + 808));
    v16 = *(_QWORD *)(v14 + 880);
    if (v16)
    {
LABEL_9:
      v17 = *(_QWORD *)(v14 + 888);
      v18 = *(_DWORD *)(v14 + 900);
      v19 = *(_QWORD *)(v14 + 904);
      v20 = *(_QWORD *)(v14 + 912);
      result = pthread_mutex_unlock(v15);
      *(_QWORD *)(a2 + 592) = (uint64_t)((double)v16 / 4294967.3 + 0.5)
                            + 1000 * HIDWORD(v16)
                            - 2208988800000;
      *(_BYTE *)(a2 + 600) = 1;
      *(_QWORD *)(a2 + 608) = (uint64_t)((double)v17 / 4294967.3 + 0.5)
                            + 1000 * HIDWORD(v17)
                            - 2208988800000;
      *(_BYTE *)(a2 + 616) = 1;
      *(_DWORD *)(a2 + 624) = v18;
      *(_QWORD *)(a2 + 632) = v19;
      *(_QWORD *)(a2 + 640) = v20;
      return result;
    }
  }
  return pthread_mutex_unlock(v15);
}

BOOL webrtc::internal::VideoReceiveStream2::SetBaseMinimumPlayoutDelayMs(webrtc::internal::VideoReceiveStream2 *this, int a2)
{
  unint64_t v2;
  _BOOL8 v4;

  v2 = 1000 * a2;
  v4 = a2 >= 0 && v2 < 0x989681;
  if (v4)
  {
    if (!*((_BYTE *)this + 4128))
      *((_BYTE *)this + 4128) = 1;
    *((_QWORD *)this + 515) = v2;
    webrtc::internal::VideoReceiveStream2::UpdatePlayoutDelays((uint64_t)this);
  }
  return v4;
}

uint64_t webrtc::internal::VideoReceiveStream2::UpdatePlayoutDelays(uint64_t this)
{
  uint64_t v1;
  webrtc **v2;
  webrtc **v3;
  webrtc **v4;
  uint64_t *v5;
  _BYTE *v6;
  webrtc *v7;
  unint64_t v8;
  uint64_t v9;
  pthread_mutex_t *v10;
  webrtc *v11;
  TimeDelta v12;
  TimeDelta v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  TimeDelta v21;
  TimeDelta v22;
  uint64_t v23;
  double v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  TimeDelta v30;
  TimeDelta v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  char v36;
  _QWORD v37[3];
  _QWORD v38[2];
  std::string v39;
  _QWORD *v40;
  const char *v41;
  std::string *v42;
  std::string v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v1 = this;
  v50 = *MEMORY[0x24BDAC8D0];
  v2 = (webrtc **)(this + 4104);
  v44 = *(_QWORD *)(this + 4104);
  v45 = *(_BYTE *)(this + 4112);
  v3 = (webrtc **)(this + 4120);
  v47 = *(_BYTE *)(this + 4128);
  v46 = *(_QWORD *)(this + 4120);
  v4 = (webrtc **)(this + 4136);
  v48 = *(_QWORD *)(this + 4136);
  v49 = *(_BYTE *)(this + 4144);
  if (!v47 || v45 && v44 >= v46)
  {
    v5 = &v44;
    v6 = (_BYTE *)(this + 4112);
    if (!v49)
      goto LABEL_10;
  }
  else
  {
    v5 = &v46;
    v6 = (_BYTE *)(this + 4112);
    if (!v49)
      goto LABEL_10;
  }
  if (!*((_BYTE *)v5 + 8) || *v5 < v48)
    v5 = &v48;
LABEL_10:
  if (!*((_BYTE *)v5 + 8))
    goto LABEL_49;
  v7 = (webrtc *)*v5;
  if (v45)
    v8 = (v47 != 0) + 1;
  else
    v8 = v47 != 0;
  if (v49)
    ++v8;
  if (v8 >= 2)
  {
    v9 = *(_QWORD *)(this + 2080);
    v10 = (pthread_mutex_t *)(v9 + 8);
    pthread_mutex_lock((pthread_mutex_t *)(v9 + 8));
    v11 = *(webrtc **)(v9 + 104);
    pthread_mutex_unlock(v10);
    if (v11 != v7 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      v37[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_receive_stream2.cc";
      v37[1] = 8154;
      v37[2] = &v36;
      v38[0] = "Multiple playout delays set. Actual delay value set to ";
      v38[1] = v37;
      webrtc::ToString(v7, v12, (char *)&v43);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v39, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
        v40 = v38;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
      }
      else
      {
        v39 = v43;
        v40 = v38;
      }
      v41 = " frame min delay=";
      v42 = &v39;
      if (*(_BYTE *)(v1 + 4112))
      {
        webrtc::ToString(*v2, v13, (char *)&v43);
        if (*(_BYTE *)(v1 + 4128))
        {
LABEL_25:
          webrtc::ToString(*v3, v13, (char *)v34);
          if (*(_BYTE *)(v1 + 4144))
          {
LABEL_26:
            webrtc::ToString(*v4, v13, (char *)__p);
            goto LABEL_36;
          }
LABEL_33:
          v33 = 7;
          if (__p > (void **)"<unset>" || (char *)__p + 7 <= "<unset>")
          {
            strcpy((char *)__p, "<unset>");
LABEL_36:
            rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t\n\t\n", v13.var0, v14, v15, v16, v17, v18, v19, **(_QWORD **)(v42[1].__r_.__value_.__r.__words[0] + 8));
            if (v33 < 0)
            {
              operator delete(__p[0]);
              if ((v35 & 0x80000000) == 0)
              {
LABEL_38:
                if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_39;
                goto LABEL_56;
              }
            }
            else if ((v35 & 0x80000000) == 0)
            {
              goto LABEL_38;
            }
            operator delete(v34[0]);
            if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_39:
              if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_40;
LABEL_57:
              operator delete(v39.__r_.__value_.__l.__data_);
              goto LABEL_40;
            }
LABEL_56:
            operator delete(v43.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_40;
            goto LABEL_57;
          }
LABEL_58:
          __break(1u);
        }
      }
      else
      {
        *((_BYTE *)&v43.__r_.__value_.__s + 23) = 7;
        if (&v43 <= (std::string *)"<unset>" && (char *)v43.__r_.__value_.__r.__words + 7 > "<unset>")
          goto LABEL_58;
        strcpy((char *)&v43, "<unset>");
        if (*(_BYTE *)(v1 + 4128))
          goto LABEL_25;
      }
      v35 = 7;
      if (v34 <= (void **)"<unset>" && (char *)v34 + 7 > "<unset>")
        goto LABEL_58;
      strcpy((char *)v34, "<unset>");
      if (*(_BYTE *)(v1 + 4144))
        goto LABEL_26;
      goto LABEL_33;
    }
  }
LABEL_40:
  v20 = *(_QWORD *)(v1 + 2080);
  pthread_mutex_lock((pthread_mutex_t *)(v20 + 8));
  if (*(webrtc **)(v20 + 104) != v7)
  {
    v22.var0 = *(_QWORD *)(v20 + 112);
    *(_QWORD *)(v20 + 104) = v7;
  }
  this = pthread_mutex_unlock((pthread_mutex_t *)(v20 + 8));
  if (*v6)
  {
    if (!*(_QWORD *)(v1 + 4104))
    {
      if (v6[48])
      {
        v23 = *(_QWORD *)(v1 + 4152);
        if (v23 >= 1)
        {
          v24 = (double)v23 * 0.000001 * 60.0;
          if (v23 == 0x7FFFFFFFFFFFFFFFLL)
            v24 = INFINITY;
          v25 = (uint64_t)rint(v24) - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 4016) + 848) + 32);
          v26 = v25 & ~(v25 >> 31);
          v27 = *(_QWORD *)(v1 + 2080);
          pthread_mutex_lock((pthread_mutex_t *)(v27 + 8));
          *(_BYTE *)(v27 + 276) = 1;
          *(_DWORD *)(v27 + 272) = v26;
          this = pthread_mutex_unlock((pthread_mutex_t *)(v27 + 8));
        }
      }
    }
  }
LABEL_49:
  if (v6[48])
  {
    v28 = *(_QWORD *)(v1 + 2080);
    v29 = *(_QWORD *)(v1 + 4152);
    pthread_mutex_lock((pthread_mutex_t *)(v28 + 8));
    if (*(_QWORD *)(v28 + 112) != v29)
    {
      v31.var0 = v29;
      *(_QWORD *)(v28 + 112) = v29;
    }
    return pthread_mutex_unlock((pthread_mutex_t *)(v28 + 8));
  }
  return this;
}

unint64_t webrtc::internal::VideoReceiveStream2::GetBaseMinimumPlayoutDelayMs(webrtc::internal::VideoReceiveStream2 *this)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)this + 4128))
  {
    v1 = *((_QWORD *)this + 515);
    if ((v1 & 0x8000000000000000) == 0)
    {
      if (v1 % 0x3E8 <= 0x1F3)
        return v1 / 0x3E8;
      else
        return v1 / 0x3E8 + 1;
    }
  }
  else
  {
    v1 = -1000;
  }
  v3 = -(uint64_t)v1;
  v4 = v3 / 0x3E8;
  if (v3 % 0x3E8 <= 0x1F4)
    v5 = 0;
  else
    v5 = -1;
  return v5 - v4;
}

uint64_t webrtc::internal::VideoReceiveStream2::OnFrame(webrtc::internal::VideoReceiveStream2 *this, const webrtc::VideoFrame *a2)
{
  webrtc::SourceTracker *v4;
  unsigned int *v5;
  unsigned int v6;
  RtpPacketInfos v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  _BYTE *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  const webrtc::VideoFrame *v43;
  char v44;
  unsigned int *v45;
  char v46;
  _QWORD v47[2];
  uint64_t (*v48)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v49)(uint64_t);

  v4 = (webrtc::internal::VideoReceiveStream2 *)((char *)this + 344);
  v5 = (unsigned int *)*((_QWORD *)a2 + 23);
  v45 = v5;
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7.var0.var0 = (Data *)&v45;
  webrtc::SourceTracker::OnFrameDelivered(v4, v7);
  v8 = v45;
  if (v45)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      v11 = *((_QWORD *)v8 + 1);
      if (v11)
      {
        v12 = *((_QWORD *)v8 + 2);
        v13 = (void *)*((_QWORD *)v8 + 1);
        if (v12 != v11)
        {
          do
          {
            v14 = *(void **)(v12 - 96);
            if (v14)
            {
              *(_QWORD *)(v12 - 88) = v14;
              operator delete(v14);
            }
            v12 -= 104;
          }
          while (v12 != v11);
          v13 = (void *)*((_QWORD *)v8 + 1);
        }
        *((_QWORD *)v8 + 2) = v11;
        operator delete(v13);
      }
      MEMORY[0x20BD0ADEC](v8, 0x1020C40E72D6CFBLL);
    }
  }
  (*(void (**)(_QWORD, const webrtc::VideoFrame *))(**((_QWORD **)this + 31) + 16))(*((_QWORD *)this + 31), a2);
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v16 = *((_DWORD *)a2 + 4);
  v17 = *((_QWORD *)a2 + 3);
  v18 = *((_QWORD *)a2 + 4);
  v19 = *((_QWORD *)a2 + 1);
  v43 = a2;
  if (v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v21 = *((_QWORD *)a2 + 1);
    if (v21)
    {
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21);
      goto LABEL_20;
    }
  }
  else
  {
    v20 = 0;
  }
  v22 = 0;
LABEL_20:
  v23 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 200))(*((_QWORD *)this + 40));
  v24 = (unsigned int *)*((_QWORD *)this + 539);
  if (v24)
  {
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = operator new(0x30uLL);
  *(_DWORD *)v26 = v16;
  v26[1] = v18;
  v26[2] = v17;
  *((_DWORD *)v26 + 6) = v20;
  *((_DWORD *)v26 + 7) = v22;
  v26[4] = v15;
  v26[5] = this;
  v27 = (_QWORD *)operator new();
  *v27 = v24;
  v27[1] = v26;
  v27[2] = 48;
  v27[3] = absl::internal_any_invocable::RemoteManagerTrivial;
  v27[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoReceiveStream2::OnFrame(webrtc::VideoFrame const&)::$_0 &&>;
  v47[0] = v27;
  v48 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v49 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v23 + 8))(v23, v47, &v46, &v44);
  v48(1, v47, v47);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 4208));
  v28 = (char *)this + 4280;
  if (!*((_BYTE *)this + 4280))
    return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 4208));
  if (!*((_DWORD *)this + 1068) && !*((_DWORD *)this + 1069))
  {
LABEL_37:
    v39 = *((_QWORD *)v43 + 1);
    if (v39)
    {
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
      v41 = *((_QWORD *)v43 + 1);
      if (v41)
      {
        v42 = ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 48))(v41) << 32) | v40;
        if (*v28)
        {
LABEL_41:
          *((_QWORD *)this + 534) = v42;
          return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 4208));
        }
      }
      else
      {
        v42 = v40;
        if (*v28)
          goto LABEL_41;
      }
    }
    else
    {
      v42 = 0;
      if (*v28)
        goto LABEL_41;
    }
    *v28 = 1;
    goto LABEL_41;
  }
  result = *((_QWORD *)v43 + 1);
  if (!result || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result), *v28))
  {
    if ((_DWORD)result == *((_DWORD *)this + 1068))
    {
      result = *((_QWORD *)v43 + 1);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
        if (!*v28)
          goto LABEL_47;
      }
      if ((_DWORD)result == *((_DWORD *)this + 1069))
        goto LABEL_37;
    }
    result = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
    if ((result & 1) != 0)
      goto LABEL_37;
    if (*v28)
    {
      v37 = *((_QWORD *)v43 + 1);
      if (v37)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
        v38 = *((_QWORD *)v43 + 1);
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38);
      }
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_receive_stream2.cc");
      goto LABEL_37;
    }
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t `non-virtual thunk to'webrtc::internal::VideoReceiveStream2::OnFrame(webrtc::internal::VideoReceiveStream2 *this, const webrtc::VideoFrame *a2)
{
  return webrtc::internal::VideoReceiveStream2::OnFrame((webrtc::internal::VideoReceiveStream2 *)((char *)this - 8), a2);
}

uint64_t webrtc::internal::VideoReceiveStream2::SetFrameDecryptor(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *a2;
  *a2 = 0;
  v4 = v2;
  webrtc::RtpVideoStreamReceiver2::SetFrameDecryptor(a1 + 2384, &v4);
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

uint64_t webrtc::internal::VideoReceiveStream2::SetDepacketizerToDecoderFrameTransformer(rtc::Thread *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t result;
  uint64_t v14;

  v3 = *a2;
  *a2 = 0;
  v4 = rtc::Thread::Current(a1);
  v5 = *((_QWORD *)a1 + 309);
  v6 = operator new();
  v7 = *((_QWORD *)a1 + 308);
  v8 = *(_DWORD *)(v5 + 32);
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_DWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v7;
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)v6 = off_24C0BEC40;
  *(_QWORD *)(v6 + 8) = (char *)a1 + 2440;
  *(_DWORD *)(v6 + 52) = 0;
  v9 = (unsigned int *)(v6 + 52);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  v11 = *((_QWORD *)a1 + 454);
  *((_QWORD *)a1 + 454) = v6;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v6 = *((_QWORD *)a1 + 454);
    v3 = *(_QWORD *)(v6 + 16);
    v12 = *(uint64_t (***)())v6;
  }
  else
  {
    v12 = off_24C0BEC40;
  }
  v14 = v6;
  ((void (*)(uint64_t))*v12)(v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v3 + 48))(v3, &v14, *(unsigned int *)(v6 + 32));
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return result;
}

void webrtc::internal::VideoReceiveStream2::OnCompleteFrame(webrtc::internal::VideoReceiveStream2 *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *inserted;
  char v9;
  char v10;
  unsigned int *v11;
  webrtc::NackRequester *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  unsigned int *v18;

  v4 = *a2;
  if (*(_BYTE *)(*a2 + 136))
  {
    v6 = *(_QWORD *)(v4 + 120);
    v5 = *(_QWORD *)(v4 + 128);
    if (*((_BYTE *)this + 4112))
    {
      *((_QWORD *)this + 513) = v6;
      if (*((_BYTE *)this + 4160))
      {
LABEL_4:
        *((_QWORD *)this + 519) = v5;
        webrtc::internal::VideoReceiveStream2::UpdatePlayoutDelays((uint64_t)this);
        v4 = *a2;
        goto LABEL_5;
      }
    }
    else
    {
      *((_BYTE *)this + 4112) = 1;
      *((_QWORD *)this + 513) = v6;
      if (*((_BYTE *)this + 4160))
        goto LABEL_4;
    }
    *((_BYTE *)this + 4160) = 1;
    goto LABEL_4;
  }
LABEL_5:
  v7 = *((_QWORD *)this + 502);
  *a2 = 0;
  v18 = (unsigned int *)v4;
  inserted = webrtc::VideoStreamBufferController::InsertFrame(v7, &v18);
  v10 = v9;
  v11 = v18;
  v18 = 0;
  if (v11)
    (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
  if (v10)
  {
    v12 = (webrtc::NackRequester *)*((_QWORD *)this + 372);
    if (v12)
    {
      v13 = (_QWORD *)*((_QWORD *)this + 404);
      if (v13)
      {
        v14 = (char *)this + 3232;
        do
        {
          v15 = v13[4];
          v16 = v15 < (uint64_t)inserted;
          if (v15 >= (uint64_t)inserted)
            v17 = v13;
          else
            v17 = v13 + 1;
          if (!v16)
            v14 = (char *)v13;
          v13 = (_QWORD *)*v17;
        }
        while (*v17);
        if (v14 != (char *)this + 3232 && *((_QWORD *)v14 + 4) <= (uint64_t)inserted)
          webrtc::NackRequester::ClearUpTo(v12, *((unsigned __int16 *)v14 + 20));
      }
    }
  }
}

void `non-virtual thunk to'webrtc::internal::VideoReceiveStream2::OnCompleteFrame(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *inserted;
  char v11;
  char v12;
  unsigned int *v13;
  webrtc::NackRequester *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  _QWORD *v19;
  unsigned int *v20;

  v4 = *a2;
  if (*(_BYTE *)(*a2 + 136))
  {
    v5 = (_BYTE *)(a1 + 4096);
    v6 = a1 - 16;
    v8 = *(_QWORD *)(v4 + 120);
    v7 = *(_QWORD *)(v4 + 128);
    if (*(_BYTE *)(a1 + 4096))
    {
      *(_QWORD *)(a1 + 4088) = v8;
      if (*(_BYTE *)(a1 + 4144))
      {
LABEL_4:
        *(_QWORD *)(a1 + 4136) = v7;
        webrtc::internal::VideoReceiveStream2::UpdatePlayoutDelays(v6);
        v4 = *a2;
        goto LABEL_5;
      }
    }
    else
    {
      *v5 = 1;
      *(_QWORD *)(a1 + 4088) = v8;
      if (*(_BYTE *)(a1 + 4144))
        goto LABEL_4;
    }
    *(_BYTE *)(a1 + 4144) = 1;
    goto LABEL_4;
  }
LABEL_5:
  v9 = *(_QWORD *)(a1 + 4000);
  *a2 = 0;
  v20 = (unsigned int *)v4;
  inserted = webrtc::VideoStreamBufferController::InsertFrame(v9, &v20);
  v12 = v11;
  v13 = v20;
  v20 = 0;
  if (v13)
    (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
  if (v12)
  {
    v14 = *(webrtc::NackRequester **)(a1 + 2960);
    if (v14)
    {
      v15 = *(_QWORD **)(a1 + 3216);
      if (v15)
      {
        v16 = (_QWORD *)(a1 + 3216);
        do
        {
          v17 = v15[4];
          v18 = v17 < (uint64_t)inserted;
          if (v17 >= (uint64_t)inserted)
            v19 = v15;
          else
            v19 = v15 + 1;
          if (!v18)
            v16 = v15;
          v15 = (_QWORD *)*v19;
        }
        while (*v19);
        if (v16 != (_QWORD *)(a1 + 3216) && v16[4] <= (uint64_t)inserted)
          webrtc::NackRequester::ClearUpTo(v14, *((unsigned __int16 *)v16 + 20));
      }
    }
  }
}

uint64_t webrtc::internal::VideoReceiveStream2::OnRttUpdate(webrtc::internal::VideoReceiveStream2 *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  TimeDelta v6;
  uint64_t result;
  uint64_t v8;

  v5 = 1000 * a3;
  v6.var0 = 1000 * a3;
  result = webrtc::RttFilter::Update(*((_QWORD *)this + 502) + 544, v6);
  v8 = *((_QWORD *)this + 372);
  if (v8)
    *(_QWORD *)(v8 + 152) = v5;
  *((_QWORD *)this + 231) = a2;
  return result;
}

uint64_t `non-virtual thunk to'webrtc::internal::VideoReceiveStream2::OnRttUpdate(webrtc::internal::VideoReceiveStream2 *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  TimeDelta v6;
  uint64_t result;
  uint64_t v8;

  v5 = 1000 * a3;
  v6.var0 = 1000 * a3;
  result = webrtc::RttFilter::Update(*((_QWORD *)this + 498) + 544, v6);
  v8 = *((_QWORD *)this + 368);
  if (v8)
    *(_QWORD *)(v8 + 152) = v5;
  *((_QWORD *)this + 227) = a2;
  return result;
}

uint64_t webrtc::internal::VideoReceiveStream2::id(webrtc::internal::VideoReceiveStream2 *this)
{
  return *((unsigned int *)this + 36);
}

uint64_t `non-virtual thunk to'webrtc::internal::VideoReceiveStream2::id(webrtc::internal::VideoReceiveStream2 *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t webrtc::internal::VideoReceiveStream2::GetInfo@<X0>(webrtc::internal::VideoReceiveStream2 *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  pthread_mutex_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v4 = *((_QWORD *)this + 357);
  v5 = (pthread_mutex_t *)(v4 + 808);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 808));
  if (!*(_QWORD *)(v4 + 880))
  {
    result = pthread_mutex_unlock((pthread_mutex_t *)(v4 + 808));
LABEL_16:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }
  v6 = *(_DWORD *)(v4 + 892);
  v7 = *(_DWORD *)(v4 + 888);
  v8 = *(_DWORD *)(v4 + 896);
  result = pthread_mutex_unlock(v5);
  if (!*((_BYTE *)this + 3352) || !*((_BYTE *)this + 3376))
    goto LABEL_16;
  v10 = *((_DWORD *)this + 837);
  v11 = *((_QWORD *)this + 421);
  v12 = v11 / 0x3E8uLL;
  if (v11 % 0x3E8uLL > 0x1F3)
    ++v12;
  if (-v11 % 0x3E8uLL <= 0x1F4)
    v13 = 0;
  else
    v13 = -1;
  if (v11 < 0)
    v14 = v13 - -v11 / 0x3E8uLL;
  else
    v14 = v12;
  v15 = *((_QWORD *)this + 260);
  v16 = (pthread_mutex_t *)(v15 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(v15 + 8));
  v17 = *(_QWORD *)(v15 + 120);
  v18 = 0x7FFFFFFFFFFFFFFFLL;
  if (v17 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v19 = *(_QWORD *)(v15 + 88);
    if (*(_QWORD *)(v19 + 80))
      v20 = 1000 * *(int *)(*(_QWORD *)(v19 + 88) + 32);
    else
      v20 = 0;
    v21 = v20 + v17;
    v22 = 0x8000000000000000;
    if (v17 != 0x8000000000000000)
      v17 = v21;
    v23 = *(_QWORD *)(v15 + 96);
    if (v23 != 0x8000000000000000 && v17 != 0x8000000000000000)
      v22 = v17 + v23;
    if (v17 == 0x7FFFFFFFFFFFFFFFLL || v23 == 0x7FFFFFFFFFFFFFFFLL)
      v18 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v18 = v22;
  }
  if (*(_QWORD *)(v15 + 104) <= v18)
    v26 = v18;
  else
    v26 = *(_QWORD *)(v15 + 104);
  result = pthread_mutex_unlock(v16);
  v27 = v26 / 0x3E8uLL;
  if (v26 % 0x3E8uLL > 0x1F3)
    LODWORD(v27) = v27 + 1;
  if (-v26 % 0x3E8uLL <= 0x1F4)
    v28 = 0;
  else
    v28 = -1;
  *(_QWORD *)a2 = v14;
  *(_DWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 12) = v6;
  if (v26 < 0)
    v27 = v28 - -v26 / 0x3E8uLL;
  *(_DWORD *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = v8;
  *(_QWORD *)(a2 + 24) = v27;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

uint64_t `non-virtual thunk to'webrtc::internal::VideoReceiveStream2::GetInfo@<X0>(webrtc::internal::VideoReceiveStream2 *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  pthread_mutex_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v4 = *((_QWORD *)this + 354);
  v5 = (pthread_mutex_t *)(v4 + 808);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 808));
  if (!*(_QWORD *)(v4 + 880))
  {
    result = pthread_mutex_unlock((pthread_mutex_t *)(v4 + 808));
LABEL_16:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }
  v6 = *(_DWORD *)(v4 + 892);
  v7 = *(_DWORD *)(v4 + 888);
  v8 = *(_DWORD *)(v4 + 896);
  result = pthread_mutex_unlock(v5);
  if (!*((_BYTE *)this + 3328) || !*((_BYTE *)this + 3352))
    goto LABEL_16;
  v10 = *((_DWORD *)this + 831);
  v11 = *((_QWORD *)this + 418);
  v12 = v11 / 0x3E8uLL;
  if (v11 % 0x3E8uLL > 0x1F3)
    ++v12;
  if (-v11 % 0x3E8uLL <= 0x1F4)
    v13 = 0;
  else
    v13 = -1;
  if (v11 < 0)
    v14 = v13 - -v11 / 0x3E8uLL;
  else
    v14 = v12;
  v15 = *((_QWORD *)this + 257);
  v16 = (pthread_mutex_t *)(v15 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(v15 + 8));
  v17 = *(_QWORD *)(v15 + 120);
  v18 = 0x7FFFFFFFFFFFFFFFLL;
  if (v17 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v19 = *(_QWORD *)(v15 + 88);
    if (*(_QWORD *)(v19 + 80))
      v20 = 1000 * *(int *)(*(_QWORD *)(v19 + 88) + 32);
    else
      v20 = 0;
    v21 = v20 + v17;
    v22 = 0x8000000000000000;
    if (v17 != 0x8000000000000000)
      v17 = v21;
    v23 = *(_QWORD *)(v15 + 96);
    if (v23 != 0x8000000000000000 && v17 != 0x8000000000000000)
      v22 = v17 + v23;
    if (v17 == 0x7FFFFFFFFFFFFFFFLL || v23 == 0x7FFFFFFFFFFFFFFFLL)
      v18 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v18 = v22;
  }
  if (*(_QWORD *)(v15 + 104) <= v18)
    v26 = v18;
  else
    v26 = *(_QWORD *)(v15 + 104);
  result = pthread_mutex_unlock(v16);
  v27 = v26 / 0x3E8uLL;
  if (v26 % 0x3E8uLL > 0x1F3)
    LODWORD(v27) = v27 + 1;
  if (-v26 % 0x3E8uLL <= 0x1F4)
    v28 = 0;
  else
    v28 = -1;
  *(_QWORD *)a2 = v14;
  *(_DWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 12) = v6;
  if (v26 < 0)
    v27 = v28 - -v26 / 0x3E8uLL;
  *(_DWORD *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = v8;
  *(_QWORD *)(a2 + 24) = v27;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

uint64_t webrtc::internal::VideoReceiveStream2::GetPlayoutRtpTimestamp(webrtc::internal::VideoReceiveStream2 *this, unsigned int *a2, uint64_t *a3)
{
  return 0;
}

uint64_t `non-virtual thunk to'webrtc::internal::VideoReceiveStream2::GetPlayoutRtpTimestamp(webrtc::internal::VideoReceiveStream2 *this, unsigned int *a2, uint64_t *a3)
{
  return 0;
}

uint64_t webrtc::internal::VideoReceiveStream2::SetMinimumPlayoutDelay(webrtc::internal::VideoReceiveStream2 *this, int a2)
{
  if (!*((_BYTE *)this + 4144))
    *((_BYTE *)this + 4144) = 1;
  *((_QWORD *)this + 517) = 1000 * a2;
  webrtc::internal::VideoReceiveStream2::UpdatePlayoutDelays((uint64_t)this);
  return 1;
}

uint64_t `non-virtual thunk to'webrtc::internal::VideoReceiveStream2::SetMinimumPlayoutDelay(webrtc::internal::VideoReceiveStream2 *this, int a2)
{
  if (!*((_BYTE *)this + 4120))
    *((_BYTE *)this + 4120) = 1;
  *((_QWORD *)this + 514) = 1000 * a2;
  webrtc::internal::VideoReceiveStream2::UpdatePlayoutDelays((uint64_t)this - 24);
  return 1;
}

uint64_t webrtc::internal::VideoReceiveStream2::OnEncodedFrame(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  webrtc::vp8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int64x2_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v34;
  int v35;
  char v36;
  _QWORD v37[2];
  uint64_t (*v38)(uint64_t, uint64_t *, _QWORD *);
  _QWORD **(*v39)(_QWORD **);

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64));
  v6 = v4;
  if (*(_BYTE *)(a1 + 4080))
  {
    v7 = *(_QWORD *)(a1 + 4088);
    v8 = *(_QWORD *)(a1 + 4072);
    v9 = 0x8000000000000000;
    if (v7 != 0x8000000000000000 && v8 != 0x8000000000000000)
      v9 = v8 + v7;
    if (v8 == 0x7FFFFFFFFFFFFFFFLL || v7 == 0x7FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v13 = v4 >= v12;
  }
  else
  {
    v13 = 1;
  }
  v14 = *a2;
  v15 = *(_DWORD *)(*a2 + 32);
  v35 = -1;
  if (*(_DWORD *)(v14 + 400) == 1)
  {
    v16 = *(webrtc::vp8 **)(v14 + 144);
    if (v16)
    {
      v16 = (webrtc::vp8 *)(*(uint64_t (**)(webrtc::vp8 *))(*(_QWORD *)v16 + 40))(v16);
      v14 = *a2;
    }
    if ((webrtc::vp8::GetQp(v16, *(const unsigned __int8 **)(v14 + 152), &v35, v5) & 1) == 0
      && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_receive_stream2.cc");
    }
  }
  v24 = *(_DWORD *)(*a2 + 400);
  v25 = v35;
  *(_DWORD *)(a1 + 1884) = v24;
  if (v24 == 1 && v25 != -1)
  {
    v27 = vdupq_n_s64(1uLL);
    v27.i64[0] = v25;
    *(int64x2_t *)(a1 + 1816) = vaddq_s64(*(int64x2_t *)(a1 + 1816), v27);
    if (!*(_BYTE *)(a1 + 1836) || *(_DWORD *)(a1 + 1832) < v25)
    {
      *(_DWORD *)(a1 + 1832) = v25;
      *(_BYTE *)(a1 + 1836) = 1;
    }
    if (!*(_BYTE *)(a1 + 1844) || *(_DWORD *)(a1 + 1840) > v25)
    {
      *(_DWORD *)(a1 + 1840) = v25;
      *(_BYTE *)(a1 + 1844) = 1;
    }
  }
  v28 = v15 == 3;
  v29 = *(_QWORD *)(a1 + 4320);
  v30 = *a2;
  *a2 = 0;
  v31 = *(_BYTE *)(a1 + 4064);
  v32 = operator new();
  *(_QWORD *)v32 = a1;
  *(_QWORD *)(v32 + 8) = v6;
  *(_BYTE *)(v32 + 16) = v13;
  *(_BYTE *)(v32 + 17) = v28;
  *(_QWORD *)(v32 + 24) = v30;
  *(_BYTE *)(v32 + 32) = v31;
  v37[0] = v32;
  v38 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::internal::VideoReceiveStream2::OnEncodedFrame(std::unique_ptr<webrtc::EncodedFrame>)::$_1>;
  v39 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoReceiveStream2::OnEncodedFrame(std::unique_ptr<webrtc::EncodedFrame>)::$_1 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v29 + 8))(v29, v37, &v36, &v34);
  return v38(1, v37, v37);
}

uint64_t `non-virtual thunk to'webrtc::internal::VideoReceiveStream2::OnEncodedFrame(uint64_t a1, uint64_t *a2)
{
  return webrtc::internal::VideoReceiveStream2::OnEncodedFrame(a1 - 40, a2);
}

void webrtc::internal::VideoReceiveStream2::OnDecodableFrameTimeout(webrtc::internal::VideoReceiveStream2 *this, TimeDelta a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  TimeDelta v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  size_t v27;
  std::string *p_p;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  int v32;
  void (*v33)(void);
  __int128 __p;
  unint64_t v35;
  char v36;
  _QWORD v37[3];
  _QWORD v38[2];
  std::string v39;
  _QWORD *v40;
  std::string __str;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  if (!*((_BYTE *)this + 3376))
    goto LABEL_70;
  v5 = v4;
  v6 = *((_QWORD *)this + 421);
  v7 = v6 / 0x3E8uLL;
  if (v6 % 0x3E8uLL > 0x1F3)
    ++v7;
  v8 = -v6 % 0x3E8uLL <= 0x1F4 ? 0 : -1;
  v9 = v6 < 0 ? v8 - -v6 / 0x3E8uLL : v7;
  if (v4 == 0x7FFFFFFFFFFFFFFFLL
    || ((v10 = v4 - 1000 * v9, v4 != 0x8000000000000000) ? (v11 = v10 < 5000000) : (v11 = 1), !v11))
  {
LABEL_70:
    if (*((_BYTE *)this + 1928))
      *((_BYTE *)this + 1928) = 0;
    *(_BYTE *)(*((_QWORD *)this + 205) + 232) = 1;
    goto LABEL_36;
  }
  if (!*((_BYTE *)this + 3392))
    goto LABEL_71;
  v12 = *((_QWORD *)this + 423);
  v13 = v12 / 0x3E8uLL;
  if (v12 % 0x3E8uLL > 0x1F3)
    ++v13;
  if (-v12 % 0x3E8uLL <= 0x1F4)
    v14 = 0;
  else
    v14 = -1;
  if (v12 < 0)
    v15 = v14 - -v12 / 0x3E8uLL;
  else
    v15 = v13;
  v16 = v4 - 1000 * v15;
  if (v4 == 0x8000000000000000)
    v16 = 0x8000000000000000;
  if (v16 >= *((_QWORD *)this + 511))
  {
LABEL_71:
    if (!*((_BYTE *)this + 300) || *((_BYTE *)this + 3408))
    {
      v17 = *(_QWORD *)((char *)this + 3348);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_58;
      v37[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_receive_stream2.cc";
      v37[1] = 6650;
      v37[2] = &v36;
      v38[0] = "No decodable frame in ";
      v38[1] = v37;
      webrtc::ToString((webrtc *)a2.var0, v18, (char *)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v39, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        v40 = v38;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      else
      {
        v39 = __str;
        v40 = v38;
      }
      if ((v17 & 0xFF00000000) != 0)
      {
        v26 = snprintf((char *)&__str, 0x20uLL, "%u", v17);
        if (v26 < 0)
          abort();
        v27 = v26;
        if (v26 > 0x16)
        {
          v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17)
            v29 = v26 | 7;
          v30 = v29 + 1;
          p_p = (std::string *)operator new(v29 + 1);
          *((_QWORD *)&__p + 1) = v27;
          v35 = v30 | 0x8000000000000000;
          *(_QWORD *)&__p = p_p;
        }
        else
        {
          HIBYTE(v35) = v26;
          p_p = (std::string *)&__p;
        }
        v31 = (char *)p_p + v27;
        if (p_p > &__str || (std::string *)((char *)p_p + v27) <= &__str)
        {
          if ((_DWORD)v27)
            memcpy(p_p, &__str, v27);
          *v31 = 0;
          goto LABEL_54;
        }
      }
      else
      {
        HIBYTE(v35) = 9;
        if (&__p > (__int128 *)"<not set>" || (char *)&__p + 9 <= "<not set>")
        {
          strcpy((char *)&__p, "<not set>");
LABEL_54:
          rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t", v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)v40[1]);
          if (SHIBYTE(v35) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v39.__r_.__value_.__l.__data_);
LABEL_58:
          v32 = *((unsigned __int8 *)this + 2880);
          if (v32 == 2)
          {
            v33 = *(void (**)(void))(**((_QWORD **)this + 357) + 488);
          }
          else
          {
            if (v32 != 1)
            {
LABEL_63:
              if (!*((_BYTE *)this + 4080))
                *((_BYTE *)this + 4080) = 1;
              *((_QWORD *)this + 509) = v5;
              goto LABEL_36;
            }
            v33 = *(void (**)(void))(**((_QWORD **)this + 357) + 488);
          }
          v33();
          goto LABEL_63;
        }
      }
      __break(1u);
    }
  }
LABEL_36:
  webrtc::VideoStreamBufferController::StartNextDecode(*((webrtc::VideoStreamBufferController **)this + 502), *((unsigned __int8 *)this + 4064));
}

void `non-virtual thunk to'webrtc::internal::VideoReceiveStream2::OnDecodableFrameTimeout(webrtc::internal::VideoReceiveStream2 *this, TimeDelta a2)
{
  webrtc::internal::VideoReceiveStream2::OnDecodableFrameTimeout((webrtc::internal::VideoReceiveStream2 *)((char *)this - 40), a2);
}

void webrtc::internal::`anonymous namespace'::WebRtcRecordableEncodedFrame::~WebRtcRecordableEncodedFrame(webrtc::internal::_anonymous_namespace_::WebRtcRecordableEncodedFrame *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_24C0C4098;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_24C0C4098;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::internal::VideoReceiveStream2::GetSources(webrtc::internal::VideoReceiveStream2 *this@<X0>, uint64_t a2@<X8>)
{
  webrtc::SourceTracker::GetSources((webrtc::internal::VideoReceiveStream2 *)((char *)this + 344), a2);
}

uint64_t webrtc::internal::VideoReceiveStream2::SetAndGetRecordingState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  void (*v19)(void);
  TimeDelta v20;
  TimeDelta v21;
  char v23;
  _BYTE v24[7];
  char v25;
  _QWORD v26[2];
  uint64_t (*v27)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v28)(uint64_t **);
  __int128 v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  __int128 v33;
  pthread_mutex_t v34;
  pthread_cond_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  rtc::Event::Event((rtc::Event *)&v34, 0, 0);
  *(_QWORD *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 40) = 0;
  v8 = *(_BYTE *)(a1 + 4072);
  *(_DWORD *)v24 = *(_DWORD *)(a1 + 4073);
  *(_DWORD *)&v24[3] = *(_DWORD *)(a1 + 4076);
  v9 = *(_BYTE *)(a1 + 4080);
  if (a3)
  {
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64));
    if (*(_BYTE *)(a1 + 4080))
      goto LABEL_7;
    goto LABEL_6;
  }
  if (*(_BYTE *)(a2 + 40))
  {
    v10 = 1000 * *(_QWORD *)(a2 + 32);
    if (*(_BYTE *)(a1 + 4080))
      goto LABEL_7;
    goto LABEL_6;
  }
  v10 = 0;
  if (!*(_BYTE *)(a1 + 4080))
LABEL_6:
    *(_BYTE *)(a1 + 4080) = 1;
LABEL_7:
  *(_QWORD *)(a1 + 4072) = v10;
  v11 = *(_QWORD *)(a1 + 4320);
  *(_QWORD *)&v29 = a1;
  *((_QWORD *)&v29 + 1) = &v34;
  v30 = a4;
  v12 = v31;
  v13 = *(_QWORD *)(a2 + 24);
  if (v13)
  {
    if (v13 == a2)
    {
      v32 = v31;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(a2, v31);
    }
    else
    {
      v32 = *(_QWORD **)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    v32 = 0;
  }
  LOBYTE(v33) = v8;
  *(_DWORD *)((char *)&v33 + 1) = *(_DWORD *)v24;
  DWORD1(v33) = *(_DWORD *)&v24[3];
  BYTE8(v33) = v9;
  v14 = operator new();
  v15 = v14;
  *(_OWORD *)v14 = v29;
  v16 = v32;
  *(_QWORD *)(v14 + 16) = v30;
  if (v16)
  {
    if (v16 == v31)
    {
      *(_QWORD *)(v14 + 48) = v14 + 24;
      (*(void (**)(_QWORD *))(v31[0] + 24))(v31);
    }
    else
    {
      *(_QWORD *)(v14 + 48) = v16;
      v32 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v14 + 48) = 0;
  }
  *(_OWORD *)(v15 + 56) = v33;
  v26[0] = v15;
  v27 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::internal::VideoReceiveStream2::SetAndGetRecordingState(webrtc::VideoReceiveStreamInterface::RecordingState,BOOL)::$_2>;
  v28 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoReceiveStream2::SetAndGetRecordingState(webrtc::VideoReceiveStreamInterface::RecordingState,BOOL)::$_2 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v11 + 8))(v11, v26, &v25, &v23);
  v27(1, v26, v26);
  if (v32 == v31)
  {
    v17 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_22;
    v17 = 5;
    v12 = v32;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v17))(v12);
LABEL_22:
  if (a3)
  {
    v18 = *(unsigned __int8 *)(a1 + 2880);
    if (v18 == 2)
    {
      v19 = *(void (**)(void))(**(_QWORD **)(a1 + 2856) + 488);
    }
    else
    {
      if (v18 != 1)
      {
LABEL_30:
        *(_BYTE *)(a1 + 4200) = 1;
        goto LABEL_31;
      }
      v19 = *(void (**)(void))(**(_QWORD **)(a1 + 2856) + 488);
    }
    v19();
    goto LABEL_30;
  }
LABEL_31:
  v20.var0 = 0x7FFFFFFFFFFFFFFFLL;
  v21.var0 = 3000000;
  rtc::Event::Wait((rtc::Event *)&v34, v20, v21);
  pthread_mutex_destroy(&v34);
  return pthread_cond_destroy(&v35);
}

uint64_t webrtc::internal::VideoReceiveStream2::GenerateKeyFrame(webrtc::internal::VideoReceiveStream2 *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t (*v5)(void);

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v3 = result;
  v4 = *((unsigned __int8 *)this + 2880);
  if (v4 == 2)
  {
    v5 = *(uint64_t (**)(void))(**((_QWORD **)this + 357) + 488);
  }
  else
  {
    if (v4 != 1)
      goto LABEL_6;
    v5 = *(uint64_t (**)(void))(**((_QWORD **)this + 357) + 488);
  }
  result = v5();
LABEL_6:
  if (!*((_BYTE *)this + 4080))
    *((_BYTE *)this + 4080) = 1;
  *((_QWORD *)this + 509) = v3;
  *((_BYTE *)this + 4200) = 1;
  return result;
}

uint64_t webrtc::internal::VideoReceiveStream2::UpdateRtxSsrc(webrtc::internal::VideoReceiveStream2 *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *((_QWORD *)this + 507);
  *((_QWORD *)this + 507) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_DWORD *)this + 1012) = a2;
  *((_BYTE *)this + 4052) = 1;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 503) + 16))(&v7, *((_QWORD *)this + 503), a2, *((_QWORD *)this + 505));
  v5 = v7;
  v7 = 0;
  result = *((_QWORD *)this + 507);
  *((_QWORD *)this + 507) = v5;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void webrtc::internal::`anonymous namespace'::NullVideoDecoder::~NullVideoDecoder(webrtc::internal::_anonymous_namespace_::NullVideoDecoder *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::internal::`anonymous namespace'::NullVideoDecoder::Configure(webrtc::internal::_anonymous_namespace_::NullVideoDecoder *this, const webrtc::VideoDecoder::Settings *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_receive_stream2.cc");
  return 1;
}

uint64_t webrtc::internal::`anonymous namespace'::NullVideoDecoder::Decode(webrtc::internal::_anonymous_namespace_::NullVideoDecoder *this, const webrtc::EncodedImage *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_receive_stream2.cc");
  return 0;
}

uint64_t webrtc::internal::`anonymous namespace'::NullVideoDecoder::RegisterDecodeCompleteCallback(webrtc::internal::_anonymous_namespace_::NullVideoDecoder *this, webrtc::DecodedImageCallback *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_receive_stream2.cc");
  return 0;
}

uint64_t webrtc::internal::`anonymous namespace'::NullVideoDecoder::Release(webrtc::internal::_anonymous_namespace_::NullVideoDecoder *this)
{
  return 0;
}

const char *webrtc::internal::`anonymous namespace'::NullVideoDecoder::ImplementationName(webrtc::internal::_anonymous_namespace_::NullVideoDecoder *this)
{
  return "NullVideoDecoder";
}

uint64_t (***webrtc::internal::`anonymous namespace'::WebRtcRecordableEncodedFrame::encoded_buffer@<X0>(webrtc::internal::_anonymous_namespace_::WebRtcRecordableEncodedFrame *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 1);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

__n128 webrtc::internal::`anonymous namespace'::WebRtcRecordableEncodedFrame::color_space@<Q0>(webrtc::internal::_anonymous_namespace_::WebRtcRecordableEncodedFrame *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 68) = 0;
  if (*((_BYTE *)this + 108))
  {
    result = *(__n128 *)((char *)this + 56);
    v3 = *(_OWORD *)((char *)this + 88);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)this + 72);
    *(_OWORD *)(a2 + 48) = v3;
    *(_BYTE *)(a2 + 64) = *((_BYTE *)this + 104);
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 40);
    *(__n128 *)(a2 + 16) = result;
    *(_BYTE *)(a2 + 68) = 1;
  }
  return result;
}

uint64_t webrtc::internal::`anonymous namespace'::WebRtcRecordableEncodedFrame::codec(webrtc::internal::_anonymous_namespace_::WebRtcRecordableEncodedFrame *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t webrtc::internal::`anonymous namespace'::WebRtcRecordableEncodedFrame::is_key_frame(webrtc::internal::_anonymous_namespace_::WebRtcRecordableEncodedFrame *this)
{
  return *((unsigned __int8 *)this + 28);
}

uint64_t webrtc::internal::`anonymous namespace'::WebRtcRecordableEncodedFrame::resolution(webrtc::internal::_anonymous_namespace_::WebRtcRecordableEncodedFrame *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t webrtc::internal::`anonymous namespace'::WebRtcRecordableEncodedFrame::render_time(webrtc::internal::_anonymous_namespace_::WebRtcRecordableEncodedFrame *this)
{
  return 1000 * *((_QWORD *)this + 2);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::VideoReceiveStream2::Start(void)::$_2 &&>(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + 337) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::VideoReceiveStream2::Stop(void)::$_2 &&>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *a1;
  *(_BYTE *)(v2 + 337) = 1;
  v3 = *(_QWORD *)(v2 + 112);
  v4 = *(_QWORD *)(v2 + 120);
  if (v3 != v4)
  {
    v5 = v2 + 2088;
    do
    {
      v9 = 0;
      webrtc::VideoReceiver2::RegisterExternalDecoder(v5, &v9, *(unsigned __int8 *)(v3 + 96));
      v6 = v9;
      v9 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v3 += 104;
    }
    while (v3 != v4);
  }
  v7 = a1[1];
  pthread_mutex_lock((pthread_mutex_t *)v7);
  *(_BYTE *)(v7 + 113) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v7 + 64));
  return pthread_mutex_unlock((pthread_mutex_t *)v7);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoReceiveStream2::OnFrame(webrtc::VideoFrame const&)::$_0 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v5 = 0;
  v6 = 0;
  v4 = 0.0;
  if (webrtc::internal::RtpStreamsSynchronizer::GetStreamSyncOffsetInMs((webrtc::internal::RtpStreamsSynchronizer *)(v2 + 3792), *(_DWORD *)v1, *(_QWORD *)(v1 + 8) / 1000, &v6, &v5, &v4))webrtc::internal::ReceiveStatisticsProxy::OnSyncOffsetUpdated((webrtc::internal::ReceiveStatisticsProxy *)(v2 + 432), v6, v5, v4);
  return webrtc::internal::ReceiveStatisticsProxy::OnRenderedFrame(v2 + 432, v1);
}

_QWORD **absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoReceiveStream2::OnEncodedFrame(std::unique_ptr<webrtc::EncodedFrame>)::$_1 &&>(_QWORD **result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  char *p_src;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  _BYTE *v22;
  unint64_t v23;
  int8x8_t v24;
  unint64_t v25;
  int v26;
  const void *v27;
  char *v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  size_t v37;
  FILE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  char *Decoder;
  std::string *v52;
  Timestamp v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  const char *v89;
  uint64_t v90;
  uint64_t *v91;
  int v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v99;
  void (***v100)(_QWORD);
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  BOOL v108;
  char v109;
  BOOL v110;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  uint64_t v115;
  char v116;
  char v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  int v121;
  uint64_t v122;
  _QWORD *v123;
  char *__s;
  uint64_t v125;
  size_t v126;
  void *__src;
  char **p_s;
  unsigned __int8 v129;
  const char *v130;
  uint64_t v131;
  char v132;
  _QWORD v133[2];
  _QWORD v134[2];
  _QWORD v135[2];
  _QWORD v136[2];
  _QWORD v137[2];
  const char *__dst;
  uint64_t v139;
  char *v140;
  uint64_t (*v141)(uint64_t);
  unint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  char v147;
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v1 = *result;
  v2 = (_QWORD *)**result;
  if (*((_BYTE *)v2 + 337))
    return result;
  v3 = v1[3];
  v1[3] = 0;
  v4 = *((unsigned __int8 *)v1 + 16);
  v121 = *((unsigned __int8 *)v1 + 32);
  v5 = v2 + 261;
  v6 = *(unsigned __int8 *)(v3 + 392);
  v7 = v2[295];
  v123 = v2;
  if (!v7)
    goto LABEL_198;
  v8 = v2 + 295;
  do
  {
    v9 = *(unsigned __int8 *)(v7 + 32);
    v10 = v9 >= v6;
    if (v9 >= v6)
      v11 = (uint64_t *)v7;
    else
      v11 = (uint64_t *)(v7 + 8);
    if (v10)
      v8 = (_QWORD *)v7;
    v7 = *v11;
  }
  while (*v11);
  if (v8 == v2 + 295 || *((unsigned __int8 *)v8 + 32) > v6)
  {
LABEL_198:
    v13 = v2[14];
    v12 = v2[15];
    if (v13 != v12)
    {
      while (*(_DWORD *)(v13 + 96) != v6)
      {
        v13 += 104;
        if (v13 == v12)
          goto LABEL_87;
      }
      (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)v2[17] + 32))(v137, v2[17], v2 + 6, v13);
      if (!v137[0])
      {
        v14 = (_QWORD *)operator new();
        *v14 = &off_24C0C4040;
        v15 = v137[0];
        v137[0] = v14;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(*(_QWORD *)v2[7] + 16))(&__src, v2[7], "WebRTC-DecoderDataDumpDirectory", 31);
      v16 = v129;
      p_src = (char *)__src;
      v17 = (unint64_t)p_s;
      if ((v129 & 0x80u) == 0)
        p_src = (char *)&__src;
      v19 = v129;
      if ((v129 & 0x80u) == 0)
        v20 = v129;
      else
        v20 = (unint64_t)p_s;
      if (v20)
      {
        v21 = p_src;
        if (v20 >= 8)
        {
          v21 = &p_src[v20 & 0xFFFFFFFFFFFFFFF8];
          v22 = p_src + 3;
          v23 = v20 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            v24 = vceq_s8(*(int8x8_t *)(v22 - 3), (int8x8_t)0x3B3B3B3B3B3B3B3BLL);
            if ((v24.i8[0] & 1) != 0)
            {
              *(v22 - 3) = 47;
              if ((v24.i8[1] & 1) == 0)
              {
LABEL_31:
                if ((v24.i8[2] & 1) == 0)
                  goto LABEL_32;
                goto LABEL_40;
              }
            }
            else if ((v24.i8[1] & 1) == 0)
            {
              goto LABEL_31;
            }
            *(v22 - 2) = 47;
            if ((v24.i8[2] & 1) == 0)
            {
LABEL_32:
              if ((v24.i8[3] & 1) == 0)
                goto LABEL_33;
              goto LABEL_41;
            }
LABEL_40:
            *(v22 - 1) = 47;
            if ((v24.i8[3] & 1) == 0)
            {
LABEL_33:
              if ((v24.i8[4] & 1) == 0)
                goto LABEL_34;
              goto LABEL_42;
            }
LABEL_41:
            *v22 = 47;
            if ((v24.i8[4] & 1) == 0)
            {
LABEL_34:
              if ((v24.i8[5] & 1) == 0)
                goto LABEL_35;
              goto LABEL_43;
            }
LABEL_42:
            v22[1] = 47;
            if ((v24.i8[5] & 1) == 0)
            {
LABEL_35:
              if ((v24.i8[6] & 1) == 0)
                goto LABEL_36;
              goto LABEL_44;
            }
LABEL_43:
            v22[2] = 47;
            if ((v24.i8[6] & 1) == 0)
            {
LABEL_36:
              if ((v24.i8[7] & 1) != 0)
                goto LABEL_45;
              goto LABEL_28;
            }
LABEL_44:
            v22[3] = 47;
            if ((v24.i8[7] & 1) != 0)
LABEL_45:
              v22[4] = 47;
LABEL_28:
            v22 += 8;
            v23 -= 8;
            if (!v23)
            {
              if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_47;
              break;
            }
          }
        }
        v28 = &p_src[v20];
        do
        {
          if (*v21 == 59)
            *v21 = 47;
          ++v21;
        }
        while (v21 != v28);
LABEL_47:
        v19 = v129;
        v17 = (unint64_t)p_s;
        v16 = v129;
      }
      if ((v16 & 0x80u) == 0)
        v25 = v19;
      else
        v25 = v17;
      if (v25)
      {
        __s = (char *)&__dst;
        v125 = 256;
        LOBYTE(__dst) = 0;
        if ((v16 & 0x80) != 0)
        {
          if ((v17 & 0x8000000000000000) != 0)
            goto LABEL_192;
          v26 = v4;
          v27 = __src;
          if (v17)
          {
            if (!__src)
              goto LABEL_192;
          }
        }
        else
        {
          v26 = v4;
          v17 = v16;
          v27 = &__src;
        }
        if (v17 >= 0xFF)
          v29 = 255;
        else
          v29 = v17;
        memcpy(&__dst, v27, v29);
        *((_BYTE *)&__dst + v29) = 0;
        if ((v29 ^ 0xFF) >= 0x17)
          v30 = 23;
        else
          v30 = v29 ^ 0xFF;
        memcpy((char *)&__dst + v29, "/webrtc_receive_stream_", v30);
        v126 = v30 + v29;
        *((_BYTE *)&__dst + v126) = 0;
        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", *((_DWORD *)v2 + 36));
        v31 = v125;
        v32 = v126 + 1;
        memcpy(&__s[v126], "-", v125 != v126 + 1);
        v33 = v126;
        if (v31 != v32)
          v33 = v126 + 1;
        v126 = v33;
        __s[v33] = 0;
        if (rtc::g_clock)
        {
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
        }
        else
        {
          if (!dword_253EA791C)
            mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
          v34 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
              / dword_253EA791C;
        }
        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", v34 / 1000);
        if (v125 + ~v126 >= 4)
          v35 = 4;
        else
          v35 = v125 + ~v126;
        memcpy(&__s[v126], ".ivf", v35);
        v126 += v35;
        __s[v126] = 0;
        v36 = v137[0];
        v137[0] = 0;
        if (!__s)
          goto LABEL_192;
        v37 = strlen(__s);
        v39 = operator new();
        *(_QWORD *)v39 = &off_24C0B4560;
        *(_QWORD *)(v39 + 8) = v36;
        *(_DWORD *)(v39 + 16) = 0;
        v40 = operator new();
        *(_DWORD *)v40 = 0;
        *(_OWORD *)(v40 + 8) = xmmword_208F0A0E0;
        *(_QWORD *)(v40 + 24) = 0;
        *(_DWORD *)(v40 + 32) = 0;
        *(_QWORD *)(v40 + 40) = -1;
        *(_BYTE *)(v40 + 48) = 0;
        *(_QWORD *)(v40 + 56) = 0;
        *(_BYTE *)(v40 + 64) = 0;
        *(_BYTE *)(v40 + 68) = 0;
        *(_QWORD *)(v40 + 72) = v38;
        *(_QWORD *)(v39 + 24) = v40;
        v41 = v137[0];
        v137[0] = v39;
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        v2 = v123;
        v4 = v26;
      }
      v42 = (const char *)v137[0];
      v137[0] = 0;
      __dst = v42;
      webrtc::VideoReceiver2::RegisterExternalDecoder((uint64_t)v5, (uint64_t *)&__dst, *(unsigned __int8 *)(v13 + 96));
      if (__dst)
        (*(void (**)(const char *))(*(_QWORD *)__dst + 8))(__dst);
      if ((char)v129 < 0)
        operator delete(__src);
      v43 = v137[0];
      v137[0] = 0;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
  }
LABEL_87:
  v122 = *(_QWORD *)(v3 + 2408);
  if (!v2[524]
    || (v44 = (char *)v2[537], v45 = (char *)v2[536], v46 = v44 - v45, (unint64_t)(v44 - v45) > 0x1DF))
  {
    v49 = 0;
    v50 = v3;
    Decoder = webrtc::VCMDecoderDatabase::GetDecoder((webrtc::VCMDecoderDatabase *)(v2 + 282), (const webrtc::EncodedFrame *)v3, (webrtc::VCMDecodedFrameCallback *)(v2 + 262));
    if (!Decoder)
      goto LABEL_130;
    goto LABEL_93;
  }
  v47 = v2[538];
  if ((unint64_t)v44 < v47)
  {
    if (v44)
    {
      *(_QWORD *)v44 = v3;
      v48 = v44 + 8;
      goto LABEL_121;
    }
LABEL_192:
    __break(1u);
LABEL_193:
    std::__throw_bad_function_call[abi:sn180100]();
  }
  v58 = v4;
  v59 = v46 >> 3;
  v60 = v47 - (_QWORD)v45;
  if (v60 >> 2 <= (v46 >> 3) + 1)
    v61 = v59 + 1;
  else
    v61 = v60 >> 2;
  v10 = (unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8;
  v62 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v10)
    v62 = v61;
  if (v62 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v63 = 8 * v62;
  v64 = (char *)operator new(8 * v62);
  v65 = &v64[v63];
  v66 = &v64[8 * v59];
  *(_QWORD *)v66 = v3;
  v48 = v66 + 8;
  if (v44 == v45)
  {
    v2[536] = v66;
    v2[537] = v48;
    v2[538] = v65;
  }
  else
  {
    v67 = v44 - v45 - 8;
    if (v67 < 0x78)
      goto LABEL_199;
    if (&v44[-(v67 & 0xFFFFFFFFFFFFFFF8) - 8] < v66
      && &v64[(v46 & 0xFFFFFFFFFFFFFFF8) - (v67 & 0xFFFFFFFFFFFFFFF8) - 8] < v44)
    {
      goto LABEL_199;
    }
    v69 = (v67 >> 3) + 1;
    v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
    v71 = &v44[-v70];
    v66 -= v70;
    v72 = &v64[8 * v59 - 16];
    v73 = v44 - 16;
    v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *((_OWORD *)v73 - 1);
      v75 = *(_OWORD *)v73;
      *((_OWORD *)v73 - 1) = 0uLL;
      *(_OWORD *)v73 = 0uLL;
      *((_OWORD *)v72 - 1) = v76;
      *(_OWORD *)v72 = v75;
      v72 -= 32;
      v73 -= 32;
      v74 -= 4;
    }
    while (v74);
    v44 = v71;
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_199:
      do
      {
        v77 = *((_QWORD *)v44 - 1);
        v44 -= 8;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v66 - 1) = v77;
        v66 -= 8;
      }
      while (v44 != v45);
    }
    v44 = (char *)v2[536];
    v78 = (char *)v2[537];
    v2[536] = v66;
    v2[537] = v48;
    v2[538] = v65;
    while (v78 != v44)
    {
      v80 = *((_QWORD *)v78 - 1);
      v78 -= 8;
      v79 = v80;
      *(_QWORD *)v78 = 0;
      if (v80)
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
    }
  }
  v4 = v58;
  if (v44)
    operator delete(v44);
LABEL_121:
  v2[537] = v48;
  if ((_QWORD *)((char *)v48 - v2[536]) == (_QWORD *)480
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v81, v82, v83, v84, v85, v86, v87, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_receive_stream2.cc");
  }
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 526));
  if (*(_DWORD *)(v3 + 32) == 3 && !*(_DWORD *)(v3 + 8) && !*(_DWORD *)(v3 + 12) && !*((_BYTE *)v2 + 4280))
  {
    v2[534] = 0;
    *((_BYTE *)v2 + 4280) = 1;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 526));
  v50 = 0;
  v49 = 1;
  Decoder = webrtc::VCMDecoderDatabase::GetDecoder((webrtc::VCMDecoderDatabase *)(v2 + 282), (const webrtc::EncodedFrame *)v3, (webrtc::VCMDecodedFrameCallback *)(v2 + 262));
  if (!Decoder)
  {
LABEL_130:
    v54 = -8;
    v55 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
    if ((v55 & 1) == 0)
      goto LABEL_131;
    goto LABEL_95;
  }
LABEL_93:
  v52 = (std::string *)Decoder;
  v53.var0 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 16))(*v5);
  v54 = webrtc::VCMGenericDecoder::Decode(v52, (const webrtc::EncodedImage *)(v3 + 8), v53, *(_QWORD *)(v3 + 384));
  if ((v54 & 0x80000000) != 0)
  {
    v55 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
    if ((v55 & 1) == 0)
    {
LABEL_131:
      __dst = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_receive_stream2.cc";
      v139 = 7370;
      v140 = &v132;
      v133[0] = "Failed to decode frame. Return code: ";
      v133[1] = &__dst;
      v134[0] = v54;
      v134[1] = v133;
      v135[0] = ", SSRC: ";
      v135[1] = v134;
      v136[0] = *((unsigned int *)v2 + 36);
      v136[1] = v135;
      v137[0] = ", frame RTP timestamp: ";
      v137[1] = v136;
      __s = (char *)*(unsigned int *)(v3 + 160);
      v125 = (uint64_t)v137;
      __src = ", type: ";
      p_s = &__s;
      v88 = *(_DWORD *)(v3 + 32);
      if (v88)
      {
        if (v88 != 4)
        {
          if (v88 != 3)
            rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v55);
          v89 = "key";
          v90 = 3;
LABEL_138:
          v130 = v89;
          v131 = v90;
          v91 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)p_s[1] + 1) + 8) + 8) + 8) + 8);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v91[1], *v91, *(unsigned int *)(v3 + 8), *(unsigned int *)(v3 + 12), (uint64_t)", id: ", v56, v57, *v91);
          if (!v49)
            goto LABEL_174;
          goto LABEL_139;
        }
        v89 = "delta";
      }
      else
      {
        v89 = "empty";
      }
      v90 = 5;
      goto LABEL_138;
    }
  }
LABEL_95:
  if (!v49)
    goto LABEL_174;
LABEL_139:
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 526));
  v92 = *((unsigned __int8 *)v2 + 4280);
  if (!*((_BYTE *)v2 + 4280))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 526));
    v93 = 0;
    v120 = v1;
    v94 = (uint64_t *)v2[536];
    v95 = (uint64_t *)v2[537];
    if (v94 != v95)
    {
      do
      {
LABEL_144:
        v96 = *v94;
        v97 = *(_DWORD *)(*v94 + 8);
        if (*(_DWORD *)(*v94 + 32) == 3 && v97 == 0)
        {
          if (*(_DWORD *)(*v94 + 12))
            v99 = *(unsigned int *)(*v94 + 12);
          else
            v99 = HIDWORD(v93);
          if (*(_DWORD *)(*v94 + 12))
            v97 = 0;
          else
            v97 = v93;
          if (!v92 && !*(_DWORD *)(*v94 + 12))
            goto LABEL_192;
        }
        else
        {
          v99 = *(unsigned int *)(*v94 + 12);
        }
        v100 = *(void (****)(_QWORD))(v96 + 144);
        __dst = (const char *)&off_24C0C4098;
        v139 = (uint64_t)v100;
        if (v100)
          (**v100)(v100);
        v140 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96);
        LODWORD(v141) = *(_DWORD *)(v96 + 400);
        BYTE4(v141) = *(_DWORD *)(v96 + 32) == 3;
        v142 = v97 | (v99 << 32);
        LOBYTE(v143) = 0;
        v148 = 0;
        if (*(_BYTE *)(v96 + 300))
        {
          v101 = *(_OWORD *)(v96 + 248);
          v147 = *(_BYTE *)(v96 + 296);
          v143 = *(_OWORD *)(v96 + 232);
          v144 = v101;
          v102 = *(_OWORD *)(v96 + 280);
          v145 = *(_OWORD *)(v96 + 264);
          v146 = v102;
          v148 = 1;
        }
        v2 = v123;
        v103 = v123[524];
        if (!v103)
          goto LABEL_193;
        (*(void (**)(uint64_t, const char **))(*(_QWORD *)v103 + 48))(v103, &__dst);
        __dst = (const char *)&off_24C0C4098;
        if (v139)
          (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
        ++v94;
      }
      while (v94 != v95);
      v94 = (uint64_t *)v123[537];
      v104 = (uint64_t *)v123[536];
      if (v94 == v104)
      {
        v1 = v120;
      }
      else
      {
        v1 = v120;
        do
        {
          v106 = *--v94;
          v105 = v106;
          *v94 = 0;
          if (v106)
            (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
        }
        while (v94 != v104);
        v94 = v104;
      }
      goto LABEL_173;
    }
LABEL_170:
    v1 = v120;
LABEL_173:
    v2[537] = v94;
    goto LABEL_174;
  }
  v93 = v2[534];
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 526));
  if (v93)
  {
    v120 = v1;
    v94 = (uint64_t *)v2[536];
    v95 = (uint64_t *)v2[537];
    if (v94 != v95)
      goto LABEL_144;
    goto LABEL_170;
  }
LABEL_174:
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  if ((v54 | 4) == 4)
  {
    v107 = 0;
    v108 = v54 == 4;
    v109 = 1;
    *((_BYTE *)v2 + 4065) = 1;
  }
  else
  {
    v109 = 0;
    v122 = 0;
    if (v121)
      v110 = *((_BYTE *)v2 + 4065) == 0;
    else
      v110 = 1;
    v108 = v110 || v4 != 0;
    v107 = 1;
  }
  v112 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2[40] + 200))(v2[40]);
  v113 = (unsigned int *)v2[539];
  if (v113)
  {
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  v115 = v1[1];
  v116 = *((_BYTE *)v1 + 17);
  v117 = *((_BYTE *)v1 + 16);
  v118 = (char *)operator new(0x38uLL);
  *(_QWORD *)v118 = v123;
  *((_QWORD *)v118 + 1) = v115;
  v118[16] = v108;
  *(_DWORD *)(v118 + 17) = (_DWORD)__src;
  *((_DWORD *)v118 + 5) = *(_DWORD *)((char *)&__src + 3);
  *((_QWORD *)v118 + 3) = v122;
  v118[32] = v109;
  *(_DWORD *)(v118 + 33) = (_DWORD)__s;
  *((_DWORD *)v118 + 9) = *(_DWORD *)((char *)&__s + 3);
  v118[40] = v107;
  v118[48] = v116;
  v118[49] = v117;
  v119 = (char *)operator new();
  *(_QWORD *)v119 = v113;
  *((_QWORD *)v119 + 1) = v118;
  *((_QWORD *)v119 + 2) = 56;
  *((_QWORD *)v119 + 3) = absl::internal_any_invocable::RemoteManagerTrivial;
  *((_QWORD *)v119 + 4) = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoReceiveStream2::OnEncodedFrame(std::unique_ptr<webrtc::EncodedFrame>)::$_1::operator()(void)::{lambda(void)#2} &&>;
  __dst = v119;
  v140 = (char *)_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v141 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, const char **, _QWORD *, _QWORD *))(*(_QWORD *)v112 + 8))(v112, &__dst, v137, v136);
  return (_QWORD **)((uint64_t (*)(uint64_t, const char **, const char **))v140)(1, &__dst, &__dst);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::internal::VideoReceiveStream2::OnEncodedFrame(std::unique_ptr<webrtc::EncodedFrame>)::$_1>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoReceiveStream2::OnEncodedFrame(std::unique_ptr<webrtc::EncodedFrame>)::$_1::operator()(void)::{lambda(void)#2} &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  void (*v13)(void);

  v1 = *a1;
  v2 = **a1;
  *(_BYTE *)(v2 + 4064) = *((_BYTE *)*a1 + 40);
  if (*((_BYTE *)v1 + 32))
    webrtc::RtpVideoStreamReceiver2::FrameDecoded((int64x2_t *)(v2 + 2384), v1[3]);
  v3 = v1[1];
  v4 = *((unsigned __int8 *)v1 + 16);
  if (!*(_BYTE *)(v2 + 4200))
  {
LABEL_29:
    if (!*((_BYTE *)v1 + 16))
      goto LABEL_6;
    goto LABEL_30;
  }
  if (!*((_BYTE *)v1 + 48))
  {
    if (*((_BYTE *)v1 + 49))
    {
      if (*(_BYTE *)(v2 + 3392))
      {
        v5 = *(_QWORD *)(v2 + 3384);
        v6 = v5 / 0x3E8uLL;
        if (v5 % 0x3E8uLL > 0x1F3)
          ++v6;
        if (-v5 % 0x3E8uLL <= 0x1F4)
          v7 = 0;
        else
          v7 = -1;
        if (v5 < 0)
          v8 = v7 - -v5 / 0x3E8uLL;
        else
          v8 = v6;
        v9 = v3 - 1000 * v8;
        if (v3 == 0x8000000000000000)
          v9 = 0x8000000000000000;
        v10 = v3 != 0x7FFFFFFFFFFFFFFFLL && v9 < *(_QWORD *)(v2 + 4088);
        v11 = v10;
        if (!*((_BYTE *)v1 + 16) && v11)
          goto LABEL_6;
      }
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  *(_BYTE *)(v2 + 4200) = 0;
  if (!v4)
  {
LABEL_6:
    webrtc::VideoStreamBufferController::StartNextDecode(*(webrtc::VideoStreamBufferController **)(v2 + 4016), *(unsigned __int8 *)(v2 + 4064));
    return;
  }
LABEL_30:
  v12 = *(unsigned __int8 *)(v2 + 2880);
  if (v12 == 2)
  {
    v13 = *(void (**)(void))(**(_QWORD **)(v2 + 2856) + 488);
    goto LABEL_34;
  }
  if (v12 == 1)
  {
    v13 = *(void (**)(void))(**(_QWORD **)(v2 + 2856) + 488);
LABEL_34:
    v13();
  }
  if (!*(_BYTE *)(v2 + 4080))
    *(_BYTE *)(v2 + 4080) = 1;
  *(_QWORD *)(v2 + 4072) = v3;
  webrtc::VideoStreamBufferController::StartNextDecode(*(webrtc::VideoStreamBufferController **)(v2 + 4016), *(unsigned __int8 *)(v2 + 4064));
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoReceiveStream2::SetAndGetRecordingState(webrtc::VideoReceiveStreamInterface::RecordingState,BOOL)::$_2 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = **a1;
  v3 = (_QWORD *)(*a1)[2];
  v4 = (_QWORD *)v3[3];
  v3[3] = 0;
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)(v2 + 4168);
  v7 = *(_QWORD **)(v2 + 4192);
  if (!v7)
  {
    v3[3] = 0;
    v8 = (uint64_t *)v1[6];
    if (!v8)
      goto LABEL_15;
    goto LABEL_11;
  }
  if (v7 == v6)
  {
    v3[3] = v3;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v2 + 4192) + 24))(*(_QWORD *)(v2 + 4192), v3);
    v8 = (uint64_t *)v1[6];
    if (!v8)
      goto LABEL_15;
LABEL_11:
    if (v8 == v1 + 3)
    {
      v23 = v22;
      (*(void (**)(uint64_t *, _QWORD *))(v1[3] + 24))(v1 + 3, v22);
      if (v6 == v22)
        goto LABEL_26;
    }
    else
    {
      v23 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v8 + 16))(v8);
      if (v6 == v22)
        goto LABEL_26;
    }
    goto LABEL_18;
  }
  v3[3] = v7;
  *(_QWORD *)(v2 + 4192) = 0;
  v8 = (uint64_t *)v1[6];
  if (v8)
    goto LABEL_11;
LABEL_15:
  v23 = 0;
  if (v6 == v22)
  {
LABEL_26:
    v11 = v23;
    if (v23 != v22)
      goto LABEL_27;
LABEL_30:
    v13 = 4;
    v11 = v22;
    goto LABEL_31;
  }
LABEL_18:
  v9 = v23;
  v10 = *(_QWORD **)(v2 + 4192);
  if (v23 == v22)
  {
    if (v10 == v6)
    {
      (*(void (**)(_QWORD *, _QWORD *))(v22[0] + 24))(v22, v24);
      (*(void (**)(_QWORD *))(*v23 + 32))(v23);
      v23 = 0;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v2 + 4192) + 24))(*(_QWORD *)(v2 + 4192), v22);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 4192) + 32))(*(_QWORD *)(v2 + 4192));
      *(_QWORD *)(v2 + 4192) = 0;
      v23 = v22;
      (*(void (**)(_QWORD *, _QWORD *))(v24[0] + 24))(v24, v6);
      (*(void (**)(_QWORD *))(v24[0] + 32))(v24);
      *(_QWORD *)(v2 + 4192) = v6;
      v11 = v23;
      if (v23 != v22)
        goto LABEL_27;
      goto LABEL_30;
    }
    (*(void (**)(_QWORD *, _QWORD *))(v22[0] + 24))(v22, v6);
    (*(void (**)(_QWORD *))(*v23 + 32))(v23);
    v23 = *(_QWORD **)(v2 + 4192);
    v12 = v23;
    *(_QWORD *)(v2 + 4192) = v6;
    v11 = v12;
    if (v12 == v22)
      goto LABEL_30;
  }
  else
  {
    if (v10 == v6)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v2 + 4168) + 24))(v6, v22);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 4192) + 32))(*(_QWORD *)(v2 + 4192));
      *(_QWORD *)(v2 + 4192) = v23;
      v23 = v22;
      goto LABEL_26;
    }
    v23 = *(_QWORD **)(v2 + 4192);
    *(_QWORD *)(v2 + 4192) = v9;
    v11 = v10;
    if (v10 == v22)
      goto LABEL_30;
  }
LABEL_27:
  if (!v11)
    goto LABEL_32;
  v13 = 5;
LABEL_31:
  (*(void (**)(void))(*v11 + 8 * v13))();
LABEL_32:
  if (!*((_BYTE *)v1 + 64))
  {
    v14 = 0;
LABEL_39:
    if (v14 % 0x3E8 <= 0x1F3)
      v18 = v14 / 0x3E8;
    else
      v18 = v14 / 0x3E8 + 1;
    goto LABEL_42;
  }
  v14 = v1[7];
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_39;
  v15 = -(uint64_t)v14;
  v16 = v15 / 0x3E8;
  if (v15 % 0x3E8 <= 0x1F4)
    v17 = 0;
  else
    v17 = -1;
  v18 = v17 - v16;
LABEL_42:
  v19 = v1[2];
  *(_QWORD *)(v19 + 32) = v18;
  *(_BYTE *)(v19 + 40) = 1;
  v20 = v1[1];
  pthread_mutex_lock((pthread_mutex_t *)v20);
  *(_BYTE *)(v20 + 113) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v20 + 64));
  return pthread_mutex_unlock((pthread_mutex_t *)v20);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::internal::VideoReceiveStream2::SetAndGetRecordingState(webrtc::VideoReceiveStreamInterface::RecordingState,BOOL)::$_2>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD **)(v3 + 48);
      if (v4 == (_QWORD *)(v3 + 24))
      {
        v5 = 4;
        v4 = (_QWORD *)(v3 + 24);
      }
      else
      {
        if (!v4)
          goto LABEL_10;
        v5 = 5;
      }
      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t webrtc::VideoReceiveStreamTimeoutTracker::Start(webrtc::VideoReceiveStreamTimeoutTracker *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v10;
  unsigned __int8 v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  _QWORD v26[2];
  __n128 (*v27)(uint64_t, __n128 *, __n128 *);
  void (*v28)(_QWORD **);
  unsigned int *v29;

  *((_BYTE *)this + 88) = a2;
  v3 = 24;
  if (a2)
    v3 = 16;
  v4 = *(_QWORD *)((char *)this + v3);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  v6 = 0x7FFFFFFFFFFFFFFFLL;
  v7 = 0x8000000000000000;
  if (v4 != 0x8000000000000000 && v5 != 0x8000000000000000)
    v7 = v5 + v4;
  if (v5 != 0x7FFFFFFFFFFFFFFFLL && v4 != 0x7FFFFFFFFFFFFFFFLL)
    v6 = v7;
  *((_QWORD *)this + 9) = v5;
  *((_QWORD *)this + 10) = v6;
  v10 = *((_QWORD *)this + 1);
  v26[0] = this;
  v27 = absl::internal_any_invocable::LocalManagerTrivial;
  v28 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::VideoReceiveStreamTimeoutTracker::Start(BOOL)::$_1 &>;
  v12 = &unk_253EA7000;
  if ((v11 & 1) == 0)
  {
    v24 = v10;
    v12 = (_QWORD *)&unk_253EA7000;
    v22 = v21;
    v10 = v24;
    if (v22)
    {
      v23 = (_QWORD *)operator new();
      *v23 = &unk_24C0B13E8;
      webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v23;
      v12 = (_QWORD *)&unk_253EA7000;
      v10 = v24;
    }
  }
  webrtc::RepeatingTaskHandle::DelayedStart(v10, v4, (uint64_t)v26, 0, v12[153], (uint64_t)&v25, &v29);
  v13 = v29;
  v29 = 0;
  v14 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v13;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      MEMORY[0x20BD0ADEC]();
    v17 = v29;
    if (v29)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        MEMORY[0x20BD0ADEC]();
    }
  }
  return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *))v27)(1, v26, v26);
}

void absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::VideoReceiveStreamTimeoutTracker::Start(BOOL)::$_1 &>(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v12;
  webrtc::VideoReceiver2 *v13;
  unint64_t v14;

  v1 = (uint64_t)*a1;
  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 16))(**a1);
  if (*(_QWORD *)(v1 + 80) <= v2)
  {
    v3 = 16;
    if (!*(_BYTE *)(v1 + 88))
      v3 = 24;
    v4 = *(_QWORD *)(v1 + v3);
    v5 = 0x7FFFFFFFFFFFFFFFLL;
    v6 = v4 == 0x8000000000000000 || v2 == 0x8000000000000000;
    v7 = v4 + v2;
    if (v6)
      v7 = 0x8000000000000000;
    if (v2 == 0x7FFFFFFFFFFFFFFFLL || v4 == 0x7FFFFFFFFFFFFFFFLL)
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v1 + 80) = v7;
    v9 = *(_QWORD *)(v1 + 72);
    if (v2 != 0x7FFFFFFFFFFFFFFFLL && v9 != 0x8000000000000000)
    {
      if (v9 == 0x7FFFFFFFFFFFFFFFLL || v2 == 0x8000000000000000)
        v5 = 0x8000000000000000;
      else
        v5 = v2 - v9;
    }
    v14 = v5;
    v12 = *(_QWORD *)(v1 + 56);
    if (v12)
    {
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v12 + 48))(v12, &v14);
    }
    else
    {
      v13 = (webrtc::VideoReceiver2 *)std::__throw_bad_function_call[abi:sn180100]();
      webrtc::VideoReceiver2::~VideoReceiver2(v13);
    }
  }
}

void webrtc::VideoReceiver2::~VideoReceiver2(webrtc::VideoReceiver2 *this)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  std::__tree<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>>>::destroy((uint64_t)this + 264, *((_QWORD **)this + 34));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 240, *((_QWORD **)this + 31));
  if (*((_BYTE *)this + 232))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 23) + 48))(*((_QWORD *)this + 23));
    if (*((char *)this + 223) < 0)
      operator delete(*((void **)this + 25));
  }
  *((_QWORD *)this + 1) = &off_24C0B48E0;
  v2 = (void **)((char *)this + 112);
  std::deque<webrtc::FrameInfo>::clear((_QWORD *)this + 14);
  v3 = (void **)*((_QWORD *)this + 15);
  v4 = (void **)*((_QWORD *)this + 16);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = *((_QWORD *)this + 15);
    v6 = *((_QWORD *)this + 16);
    if (v6 != v7)
      *((_QWORD *)this + 16) = v6 + ((v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 48));
}

void webrtc::VideoReceiver2::RegisterExternalDecoder(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  webrtc::VCMDecoderDatabase *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t *v13;

  v5 = *a2;
  v6 = (webrtc::VCMDecoderDatabase *)(a1 + 168);
  if (*a2)
  {
    *a2 = 0;
    webrtc::VCMDecoderDatabase::DeregisterExternalDecoder(v6, a3);
    v7 = *(uint64_t **)(a1 + 272);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v7;
          v10 = *((unsigned __int8 *)v7 + 32);
          if (v10 <= a3)
            break;
          v7 = *v9;
          v8 = v9;
          if (!*v9)
            goto LABEL_9;
        }
        if (v10 >= a3)
          break;
        v7 = v9[1];
        if (!v7)
        {
          v8 = v9 + 1;
          goto LABEL_9;
        }
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    else
    {
      v8 = (uint64_t **)(a1 + 272);
      v9 = (uint64_t **)(a1 + 272);
LABEL_9:
      v11 = operator new(0x30uLL);
      v11[32] = a3;
      *((_QWORD *)v11 + 5) = v5;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = v9;
      *v8 = (uint64_t *)v11;
      v12 = **(_QWORD **)(a1 + 264);
      if (v12)
      {
        *(_QWORD *)(a1 + 264) = v12;
        v13 = *v8;
      }
      else
      {
        v13 = (uint64_t *)v11;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 272), v13);
      ++*(_QWORD *)(a1 + 280);
    }
  }
  else
  {
    webrtc::VCMDecoderDatabase::DeregisterExternalDecoder(v6, a3);
  }
}

void webrtc::VideoRenderFrames::~VideoRenderFrames(webrtc::VideoRenderFrames *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  webrtc::VideoRenderFrames *v12;
  uint64_t v13;
  webrtc::VideoRenderFrames *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;

  *((_QWORD *)this + 5) += *((_QWORD *)this + 2);
  v2 = atomic_load(&webrtc::VideoRenderFrames::~VideoRenderFrames()::atomic_histogram_pointer);
  if (v2)
  {
    webrtc::metrics::HistogramAdd(v2, *((_DWORD *)this + 10));
  }
  else
  {
    while (!__ldaxr(&webrtc::VideoRenderFrames::~VideoRenderFrames()::atomic_histogram_pointer))
    {
      if (!__stlxr(0, &webrtc::VideoRenderFrames::~VideoRenderFrames()::atomic_histogram_pointer))
        goto LABEL_6;
    }
    __clrex();
  }
LABEL_6:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/render/video_render_frames.cc");
  if (*((_QWORD *)this + 2))
  {
    v11 = *(_QWORD *)this;
    v12 = (webrtc::VideoRenderFrames *)*((_QWORD *)this + 1);
    v13 = *(_QWORD *)v12;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(*(_QWORD *)this + 8);
    **(_QWORD **)(v11 + 8) = v13;
    *((_QWORD *)this + 2) = 0;
    if (v12 != this)
    {
      do
      {
        v14 = (webrtc::VideoRenderFrames *)*((_QWORD *)v12 + 1);
        v15 = *((_QWORD *)v12 + 25);
        if (v15)
        {
          do
          {
            v16 = __ldaxr((unsigned int *)v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, (unsigned int *)v15));
          if (!v17)
          {
            v18 = *(_QWORD *)(v15 + 8);
            if (v18)
            {
              v19 = *(_QWORD *)(v15 + 16);
              v20 = *(void **)(v15 + 8);
              if (v19 != v18)
              {
                do
                {
                  v21 = *(void **)(v19 - 96);
                  if (v21)
                  {
                    *(_QWORD *)(v19 - 88) = v21;
                    operator delete(v21);
                  }
                  v19 -= 104;
                }
                while (v19 != v18);
                v20 = *(void **)(v15 + 8);
              }
              *(_QWORD *)(v15 + 16) = v18;
              operator delete(v20);
            }
            MEMORY[0x20BD0ADEC](v15, 0x1020C40E72D6CFBLL);
          }
        }
        v22 = *((_QWORD *)v12 + 3);
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        operator delete(v12);
        v12 = v14;
      }
      while (v14 != this);
    }
  }
}

uint64_t webrtc::VideoRenderFrames::AddFrame(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (rtc::g_clock)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v4 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  v5 = v4 / 1000000;
  v6 = a1[2];
  v7 = *(_QWORD *)(a2 + 32) / 1000;
  if (v6 && v7 + 500 < v5)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      goto LABEL_12;
    goto LABEL_13;
  }
  if (v7 > v5 + 10000)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_12:
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/render/video_render_frames.cc");
LABEL_13:
    ++a1[5];
    return 0xFFFFFFFFLL;
  }
  if (v7 < a1[4])
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/render/video_render_frames.cc");
    goto LABEL_13;
  }
  a1[4] = v7;
  v23 = (char *)operator new(0xE8uLL);
  *((_WORD *)v23 + 8) = *(_WORD *)a2;
  v24 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *((_QWORD *)v23 + 3) = v24;
  v25 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v23 + 2) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v23 + 3) = v25;
  *((_OWORD *)v23 + 4) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v23 + 76) = *(_OWORD *)(a2 + 60);
  v23[92] = 0;
  v23[160] = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    v26 = *(_OWORD *)(a2 + 92);
    v27 = *(_OWORD *)(a2 + 124);
    *(_OWORD *)(v23 + 124) = *(_OWORD *)(a2 + 108);
    *(_OWORD *)(v23 + 140) = v27;
    v23[156] = *(_BYTE *)(a2 + 140);
    *(_OWORD *)(v23 + 92) = *(_OWORD *)(a2 + 76);
    *(_OWORD *)(v23 + 108) = v26;
    v23[160] = 1;
  }
  *(_OWORD *)(v23 + 164) = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(v23 + 177) = *(_OWORD *)(a2 + 161);
  v28 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  *((_QWORD *)v23 + 25) = v28;
  *((_OWORD *)v23 + 13) = *(_OWORD *)(a2 + 192);
  *((_QWORD *)v23 + 28) = *(_QWORD *)(a2 + 208);
  v29 = *a1;
  *(_QWORD *)v23 = *a1;
  *((_QWORD *)v23 + 1) = a1;
  *(_QWORD *)(v29 + 8) = v23;
  *a1 = (uint64_t)v23;
  result = v6 + 1;
  a1[2] = v6 + 1;
  if ((unint64_t)(v6 + 1) >= 0x65)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/render/video_render_frames.cc");
    return a1[2];
  }
  return result;
}

void webrtc::VideoRenderFrames::FrameToRender(webrtc::VideoRenderFrames *this@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 216) = 0;
  if (*((_QWORD *)this + 2))
  {
    v35 = a2 + 76;
    v4 = (_OWORD *)(a2 + 148);
    v5 = a2 + 192;
    v6 = &rtc::g_clock;
    do
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 48);
      v8 = *((unsigned int *)this + 6);
      if (*v6)
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v6 + 16))(*v6);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v9 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
           / dword_253EA791C;
      }
      if ((((v7 / 1000) - (_DWORD)v8 + (v9 / -1000000)) & ~((v7 / 1000 - v8 + v9 / -1000000) >> 63)) != 0)
        break;
      if (*(_BYTE *)(a2 + 216))
      {
        ++*((_QWORD *)this + 5);
        if (!*((_QWORD *)this + 2)
          || (webrtc::VideoFrame::operator=(a2, *((_QWORD *)this + 1) + 16), (v10 = *((_QWORD *)this + 2)) == 0))
        {
LABEL_33:
          __break(1u);
          return;
        }
      }
      else
      {
        v10 = *((_QWORD *)this + 2);
        if (!v10)
          goto LABEL_33;
        v11 = *((_QWORD *)this + 1);
        *(_WORD *)a2 = *(_WORD *)(v11 + 16);
        v12 = *(_QWORD *)(v11 + 24);
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)(a2 + 8) = v12;
        v14 = *(_OWORD *)(v11 + 48);
        v13 = *(_OWORD *)(v11 + 64);
        v15 = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(a2 + 60) = *(_OWORD *)(v11 + 76);
        *(_OWORD *)(a2 + 32) = v14;
        *(_OWORD *)(a2 + 48) = v13;
        *(_OWORD *)(a2 + 16) = v15;
        *(_BYTE *)(a2 + 76) = 0;
        *(_BYTE *)(a2 + 144) = 0;
        if (*(_BYTE *)(v11 + 160))
        {
          *(_OWORD *)v35 = *(_OWORD *)(v11 + 92);
          v16 = *(_OWORD *)(v11 + 108);
          v17 = *(_OWORD *)(v11 + 124);
          v18 = *(_OWORD *)(v11 + 140);
          *(_BYTE *)(v35 + 64) = *(_BYTE *)(v11 + 156);
          *(_OWORD *)(v35 + 32) = v17;
          *(_OWORD *)(v35 + 48) = v18;
          *(_OWORD *)(v35 + 16) = v16;
          *(_BYTE *)(a2 + 144) = 1;
        }
        v19 = *(_OWORD *)(v11 + 164);
        *(_OWORD *)((char *)v4 + 13) = *(_OWORD *)(v11 + 177);
        *v4 = v19;
        v20 = *(_QWORD *)(v11 + 200);
        *(_QWORD *)(v11 + 200) = 0;
        *(_QWORD *)(a2 + 184) = v20;
        v21 = *(_OWORD *)(v11 + 208);
        *(_QWORD *)(v5 + 16) = *(_QWORD *)(v11 + 224);
        *(_OWORD *)v5 = v21;
        *(_BYTE *)(a2 + 216) = 1;
      }
      v22 = (uint64_t *)*((_QWORD *)this + 1);
      v23 = *v22;
      *(_QWORD *)(v23 + 8) = v22[1];
      *(_QWORD *)v22[1] = v23;
      *((_QWORD *)this + 2) = v10 - 1;
      v24 = v22[25];
      if (v24)
      {
        do
        {
          v25 = __ldaxr((unsigned int *)v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, (unsigned int *)v24));
        if (!v26)
        {
          v27 = *(_QWORD *)(v24 + 8);
          if (v27)
          {
            v28 = v5;
            v29 = v4;
            v30 = v6;
            v31 = *(_QWORD *)(v24 + 16);
            v32 = *(void **)(v24 + 8);
            if (v31 != v27)
            {
              do
              {
                v33 = *(void **)(v31 - 96);
                if (v33)
                {
                  *(_QWORD *)(v31 - 88) = v33;
                  operator delete(v33);
                }
                v31 -= 104;
              }
              while (v31 != v27);
              v32 = *(void **)(v24 + 8);
            }
            *(_QWORD *)(v24 + 16) = v27;
            operator delete(v32);
            v6 = v30;
            v4 = v29;
            v5 = v28;
          }
          MEMORY[0x20BD0ADEC](v24, 0x1020C40E72D6CFBLL);
        }
      }
      v34 = v22[3];
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      operator delete(v22);
    }
    while (*((_QWORD *)this + 2));
  }
}

void *webrtc::VideoRtpDepacketizer::AssembleFrame@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const double *v13;
  int64x2_t v14;
  int64x2_t v15;
  const double *v16;
  unsigned __int128 v17;
  unsigned __int128 v18;
  uint64_t v19;
  void *result;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  const void *v24;
  size_t v25;

  v4 = a1;
  v6 = a1 + 16 * a2;
  if (a2)
  {
    v7 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v7 >= 4)
    {
      v10 = v7 + 1;
      v11 = v10 & 3;
      if ((v10 & 3) == 0)
        v11 = 4;
      v12 = v10 - v11;
      v9 = a1 + 16 * v12;
      v13 = (const double *)(a1 + 40);
      v14 = 0uLL;
      v15 = 0uLL;
      do
      {
        v16 = v13 - 4;
        v17 = (unsigned __int128)vld2q_f64(v16);
        v18 = (unsigned __int128)vld2q_f64(v13);
        v14 = vaddq_s64((int64x2_t)v17, v14);
        v15 = vaddq_s64((int64x2_t)v18, v15);
        v13 += 8;
        v12 -= 4;
      }
      while (v12);
      v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      v8 = 0;
      v9 = a1;
    }
    do
    {
      v8 += *(_QWORD *)(v9 + 8);
      v9 += 16;
    }
    while (v9 != v6);
  }
  else
  {
    v8 = 0;
  }
  v19 = operator new();
  *(_QWORD *)(v19 + 8) = v8;
  result = malloc_type_malloc(v8, 0xB64CC8DFuLL);
  *(_QWORD *)(v19 + 16) = result;
  *(_QWORD *)v19 = &unk_24C0B3A40;
  *(_DWORD *)(v19 + 24) = 0;
  v21 = (unsigned int *)(v19 + 24);
  *a3 = v19;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  if (a2)
  {
    v23 = (char *)webrtc::EncodedImageBuffer::data((webrtc::EncodedImageBuffer *)v19);
    do
    {
      v24 = *(const void **)v4;
      v25 = *(_QWORD *)(v4 + 8);
      v4 += 16;
      result = memcpy(v23, v24, v25);
      v23 += v25;
    }
    while (v4 != v6);
  }
  return result;
}

void webrtc::VideoRtpDepacketizerAv1::AssembleFrame(char **a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  char **v4;
  char **v5;
  char **v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  size_t v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  char ***v37;
  char **v38;
  char v39;
  char *v40;
  uint64_t v41;
  char **v42;
  uint64_t v43;
  unint64_t v44;
  char **v45;
  uint64_t v47;
  char *v48;
  _BOOL4 v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char ***v53;
  BOOL v54;
  char v56;
  _BOOL4 v57;
  uint64_t v58;
  BOOL v59;
  char v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  char *v70;
  size_t *v71;
  uint64_t (**v72)(uint64_t);
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  __int128 v77;
  unint64_t v78;
  _QWORD *v79;
  __int128 v80;
  size_t *v81;
  size_t v82;
  size_t **v83;
  size_t *v84;
  char *v85;
  size_t v86;
  size_t *v87;
  size_t v89;
  size_t v90;
  const void **v91;
  size_t v92;
  char *v93;
  size_t v94;
  size_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  _QWORD v105[2];
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD v109[44];
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _BYTE v113[336];
  uint64_t v114;

  v3 = a3;
  v114 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v4 = a1;
  else
    v4 = 0;
  v110 = 0;
  if (!a2)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v5 = a1;
  v103 = a3;
  LOBYTE(a3) = 0;
  v6 = &v4[2 * a2];
  while (1)
  {
    v10 = *v5;
    v9 = v5[1];
    if (!v9)
      v10 = 0;
    v105[0] = v10;
    v105[1] = v9;
    v106 = 0;
    v107 = v9;
    if (!v9 || (v11 = *v10, v106 = 1, (a3 & 1) != v11 < 0))
    {
LABEL_51:
      v108 = 0;
      v8 = 0;
      v3 = v103;
      if (!v110)
        goto LABEL_53;
      goto LABEL_52;
    }
    v12 = v11;
    v13 = (v11 >> 4) & 3;
    if (v9 != (char *)1)
    {
      v16 = 0;
      v17 = v13 - 1;
      while (1)
      {
        v7 = v110;
        if ((v12 & 0x80) == 0 || v16)
        {
          v20 = v111;
          v21 = v112;
          if ((v110 & 1) == 0)
          {
            v20 = &v111;
            v21 = 4;
          }
          v7 = v110 >> 1;
          if (v110 >> 1 == v21)
          {
            v104 = 0;
            if (v17 == v16)
              goto LABEL_37;
          }
          else
          {
            if (!v20)
              goto LABEL_148;
            v19 = (char *)&v20[11 * v7];
            *((_QWORD *)v19 + 10) = 0;
            *((_OWORD *)v19 + 3) = 0u;
            *((_OWORD *)v19 + 4) = 0u;
            *((_OWORD *)v19 + 1) = 0u;
            *((_OWORD *)v19 + 2) = 0u;
            *(_OWORD *)v19 = 0u;
            v110 += 2;
            v104 = 0;
            if (v17 == v16)
            {
LABEL_37:
              v22 = (_QWORD *)v106;
              v7 = (unint64_t)v107;
              v23 = (unint64_t)&v107[-v106];
              v104 = (unint64_t)&v107[-v106];
              goto LABEL_41;
            }
          }
        }
        else
        {
          if (v110 <= 1)
            goto LABEL_148;
          v18 = v111;
          if ((v110 & 1) == 0)
            v18 = &v111;
          v19 = (char *)&v18[11 * (v110 >> 1) - 11];
          v104 = 0;
          if (!v17)
            goto LABEL_37;
        }
        if (!rtc::ByteBufferReader::ReadUVarint((rtc::ByteBufferReader *)v105, &v104))
          goto LABEL_51;
        v23 = v104;
        v22 = (_QWORD *)v106;
        v7 = (unint64_t)v107;
        if (v104 > (unint64_t)&v107[-v106])
          goto LABEL_51;
LABEL_41:
        if (v23)
        {
          v24 = v19 + 48;
          v25 = *((_QWORD *)v19 + 6);
          if ((v25 & 1) != 0)
          {
            v26 = (char *)*((_QWORD *)v19 + 7);
            v27 = *((_QWORD *)v19 + 8);
          }
          else
          {
            v26 = v19 + 56;
            v27 = 2;
          }
          v28 = (uint64_t)v22 + v105[0];
          v29 = v25 >> 1;
          if (v29 == v27)
          {
            absl::inlined_vector_internal::Storage<rtc::ArrayView<unsigned char const,-4711l>,2ul,std::allocator<rtc::ArrayView<unsigned char const,-4711l>>>::EmplaceBackSlow<unsigned char const*&,unsigned long &>((uint64_t)v24, v28, v23);
            v31 = v104;
            v22 = (_QWORD *)v106;
            v7 = (unint64_t)v107;
            *((_QWORD *)v19 + 5) += v23;
            if (v7 - (unint64_t)v22 < v31)
              goto LABEL_24;
LABEL_48:
            v22 = (_QWORD *)((char *)v22 + v31);
            v106 = (uint64_t)v22;
            goto LABEL_24;
          }
          if (!v26)
            goto LABEL_148;
          v30 = (uint64_t *)&v26[16 * v29];
          *v30 = v28;
          v30[1] = v23;
          *v24 += 2;
          v31 = v23;
          *((_QWORD *)v19 + 5) += v23;
          if (v7 - (unint64_t)v22 >= v23)
            goto LABEL_48;
        }
LABEL_24:
        ++v16;
        if ((_QWORD *)v7 == v22)
          goto LABEL_10;
      }
    }
    if (v13 != 1)
      goto LABEL_51;
    if ((v11 & 0x80) != 0)
      goto LABEL_10;
    v7 = (unint64_t)v111;
    v14 = v112;
    if ((v110 & 1) == 0)
    {
      v7 = (unint64_t)&v111;
      v14 = 4;
    }
    if (v110 >> 1 != v14)
      break;
LABEL_10:
    LODWORD(a3) = (v12 >> 6) & 1;
    v5 += 2;
    if (v5 == v6)
    {
      if ((v12 & 0x40) != 0)
      {
        v8 = 0;
        v108 = 0;
        v3 = v103;
        if (!v110)
          goto LABEL_53;
LABEL_52:
        v8 = v108;
        goto LABEL_53;
      }
      v7 = v110;
      v108 = 0;
      if ((v110 & 1) != 0)
        goto LABEL_149;
      v3 = v103;
      if (v110 >= 2)
      {
        v73 = 0;
        v74 = v110 >> 1;
        do
        {
          v75 = *(_QWORD *)&v113[v73 + 32];
          v109[v73 / 8 + 6] = 0;
          v76 = &v109[v73 / 8 + 6];
          v77 = *(_OWORD *)&v113[v73];
          *((_OWORD *)v76 - 3) = *(_OWORD *)((char *)&v110 + v73 + 8);
          *((_OWORD *)v76 - 2) = v77;
          v78 = *(_QWORD *)&v113[v73 + 24];
          *(v76 - 2) = *(_QWORD *)&v113[v73 + 16];
          *(v76 - 1) = v78;
          if (v75 >= 2)
          {
            if ((v75 & 1) != 0)
            {
              absl::inlined_vector_internal::Storage<rtc::ArrayView<unsigned char const,-4711l>,2ul,std::allocator<rtc::ArrayView<unsigned char const,-4711l>>>::InitFrom(v76, (unint64_t *)&v113[v73 + 32]);
            }
            else
            {
              *v76 = v75;
              v79 = &v109[v73 / 8 - 1];
              v80 = *(_OWORD *)&v113[v73 + 56];
              *((_OWORD *)v79 + 4) = *(_OWORD *)&v113[v73 + 40];
              *((_OWORD *)v79 + 5) = v80;
            }
          }
          v73 += 88;
          --v74;
        }
        while (v74);
        v7 = v110;
      }
LABEL_7:
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      v108 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (!v110)
        goto LABEL_53;
      goto LABEL_52;
    }
  }
  if (v7)
  {
    v15 = (_QWORD *)(v7 + 88 * (v110 >> 1));
    v15[10] = 0;
    *((_OWORD *)v15 + 3) = 0u;
    *((_OWORD *)v15 + 4) = 0u;
    *((_OWORD *)v15 + 1) = 0u;
    *((_OWORD *)v15 + 2) = 0u;
    *(_OWORD *)v15 = 0u;
    v110 += 2;
    goto LABEL_10;
  }
LABEL_148:
  __break(1u);
LABEL_149:
  v109[0] = v111;
  v109[1] = v112;
  v8 = v7 | 1;
  v108 = v7 | 1;
  v3 = v103;
LABEL_53:
  if (v8 >= 2)
  {
    v32 = 0;
    v33 = (uint64_t *)v109[0];
    if ((v8 & 1) == 0)
      v33 = v109;
    v34 = &v33[11 * (v8 >> 1)];
    v35 = v33 + 1;
    while (1)
    {
      v36 = v33[6];
      if (v36 < 2)
        break;
      v37 = (char ***)(v33 + 7);
      v38 = (char **)(v33 + 7);
      if ((v36 & 1) != 0)
        v38 = *v37;
      v39 = **v38;
      *((_BYTE *)v33 + 8) = v39 | 2;
      *v33 = 1;
      v40 = v38[1];
      v41 = v40 != (char *)1;
      v42 = &v38[2 * (v40 == (char *)1)];
      if ((v39 & 4) != 0)
      {
        v45 = (char **)(v33 + 7);
        if ((v36 & 1) != 0)
          v45 = *v37;
        if (v42 == &v45[2 * (v36 >> 1)] && v40 == (char *)1)
          break;
        *((_BYTE *)v33 + 9) = (*v42)[v41];
        *v33 = 2;
        if (v40 == (char *)1)
          v47 = 1;
        else
          v47 = 2;
        v48 = v42[1];
        v49 = v47 == (_QWORD)v48;
        if ((char *)v47 == v48)
          v41 = 0;
        else
          v41 = v47;
        v42 += 2 * v49;
        v43 = 2;
        if ((v39 & 2) != 0)
        {
LABEL_80:
          v50 = v36 >> 1;
          v51 = 0;
          v52 = 0;
          if ((v36 & 1) != 0)
          {
            v44 = 0;
            v58 = (uint64_t)&(*v37)[2 * v50];
            while (1)
            {
              v59 = !v41 && v42 == (char **)v58;
              if (v59 || v52 > 7)
                break;
              v61 = (*v42)[v41];
              v44 |= (unint64_t)(v61 & 0x7F) << v51;
              ++v52;
              v62 = v41 + 1 == (_QWORD)v42[1];
              if ((char *)(v41 + 1) == v42[1])
                v41 = 0;
              else
                ++v41;
              v42 += 2 * v62;
              v51 += 7;
              if ((v61 & 0x80) == 0)
              {
LABEL_106:
                v63 = v33[5] - (v43 + v52);
                v33[2] = v63;
                if (v44 != v63)
                  goto LABEL_54;
                goto LABEL_107;
              }
            }
          }
          else
          {
            v44 = 0;
            v53 = &v37[2 * v50];
            while (1)
            {
              v54 = !v41 && v42 == (char **)v53;
              if (v54 || v52 > 7)
                break;
              v56 = (*v42)[v41];
              v44 |= (unint64_t)(v56 & 0x7F) << v51;
              ++v52;
              v57 = v41 + 1 == (_QWORD)v42[1];
              if ((char *)(v41 + 1) == v42[1])
                v41 = 0;
              else
                ++v41;
              v42 += 2 * v57;
              v51 += 7;
              if ((v56 & 0x80) == 0)
                goto LABEL_106;
            }
          }
          break;
        }
      }
      else
      {
        v43 = 1;
        if ((v39 & 2) != 0)
          goto LABEL_80;
      }
      v44 = v33[5] - v43;
      v33[2] = v44;
LABEL_107:
      v33[3] = (uint64_t)v42;
      v33[4] = v41;
      if (v44 < 0x80)
      {
        LODWORD(v64) = 0;
      }
      else
      {
        v64 = 0;
        do
        {
          *((_BYTE *)v35 + v43 + v64++) = v44 | 0x80;
          v65 = v44 >> 14;
          v44 >>= 7;
        }
        while (v65);
      }
      *((_BYTE *)v33 + v43 + v64 + 8) = v44;
      v66 = v43 + (int)v64 + 1;
      *v33 = v66;
      v32 += v66 + v33[2];
      v33 += 11;
      v35 += 11;
      if (v33 == v34)
      {
        v67 = operator new();
        *(_QWORD *)(v67 + 8) = v32;
        *(_QWORD *)(v67 + 16) = malloc_type_malloc(v32, 0xB64CC8DFuLL);
        *(_QWORD *)v67 = &unk_24C0B3A40;
        *(_DWORD *)(v67 + 24) = 0;
        v68 = (unsigned int *)(v67 + 24);
        *v3 = v67;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
        v70 = (char *)webrtc::EncodedImageBuffer::data((webrtc::EncodedImageBuffer *)v67);
        if ((v108 & 1) != 0)
          v71 = (size_t *)v109[0];
        else
          v71 = v109;
        if (v108 >= 2)
        {
          v81 = &v71[11 * (v108 >> 1)];
          do
          {
            memcpy(v70, v71 + 1, *v71);
            v82 = v71[6];
            v83 = (size_t **)(v71 + 7);
            v84 = v71 + 7;
            if ((v82 & 1) != 0)
              v84 = *v83;
            v85 = &v70[*v71];
            v87 = (size_t *)v71[3];
            v86 = v71[4];
            if (&v84[2 * (v82 >> 1)] != v87 || v86 != 0)
            {
              v90 = *v87;
              v89 = v87[1];
              v91 = (const void **)(v87 + 2);
              v92 = v89 - v86;
              memcpy(v85, (const void *)(v90 + v86), v89 - v86);
              v93 = &v85[v92];
              v94 = v71[6];
              v95 = v71 + 7;
              if ((v94 & 1) == 0)
                goto LABEL_141;
LABEL_140:
              v95 = *v83;
LABEL_141:
              while (v91 != (const void **)&v95[2 * (v94 >> 1)])
              {
                memcpy(v93, *v91, (size_t)v91[1]);
                v93 = (char *)v91[1] + (_QWORD)v93;
                v91 += 2;
                v94 = v71[6];
                v95 = v71 + 7;
                if ((v94 & 1) != 0)
                  goto LABEL_140;
              }
            }
            v70 = &v85[v71[2]];
            v71 += 11;
          }
          while (v71 != v81);
          v67 = *v3;
          v72 = *(uint64_t (***)(uint64_t))*v3;
        }
        else
        {
          v72 = (uint64_t (**)(uint64_t))&unk_24C0B3A40;
        }
        v96 = &v70[-v72[5](v67)];
        v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 48))(v67);
        if (((unint64_t)v96 & 0x8000000000000000) != 0 || v96 != (char *)v97)
        {
          v98 = (uint64_t)&v70[-(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67)];
          (*(void (**)(uint64_t))(*(_QWORD *)v67 + 48))(v67);
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_av1.cc", 354, "write_at - bitstream->data() == bitstream->size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)2,long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)2,long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v99, v100, v101, v102, v98);
          goto LABEL_148;
        }
        goto LABEL_55;
      }
    }
  }
LABEL_54:
  *v3 = 0;
LABEL_55:
  if (v108)
}

void webrtc::VideoRtpDepacketizerAv1::Parse(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  v3 = a1[2];
  if (v3
    && (v5 = *a1, v6 = a1 + 1, v7 = a1[1], v8 = *(unsigned __int8 *)(*(_QWORD *)(*a1 + 16) + v7), (~v8 & 0x88) != 0))
  {
    bzero(a2, 0x7B8uLL);
    a2[167] = 1;
    a2[176] = 0;
    *(_QWORD *)(a2 + 206) = 0;
    *((_QWORD *)a2 + 25) = 0;
    a2[212] = -1;
    a2[284] = 0;
    a2[290] = 0;
    a2[1944] = 0;
    a2[2000] = 1;
    *a1 = 0;
    *((_QWORD *)a2 + 247) = v5;
    *((_QWORD *)a2 + 248) = v7;
    *((_QWORD *)a2 + 249) = v3;
    *v6 = 0;
    v6[1] = 0;
    *((_DWORD *)a2 + 43) = 3;
    a2[165] = (~v8 & 0x80) != 0;
    a2[166] = ((v8 >> 6) & 1) == 0;
    if ((v8 & 8) != 0)
      v9 = 3;
    else
      v9 = 4;
    *((_DWORD *)a2 + 38) = v9;
  }
  else
  {
    *a2 = 0;
    a2[2000] = 0;
  }
}

void webrtc::VideoRtpDepacketizerAv1::~VideoRtpDepacketizerAv1(webrtc::VideoRtpDepacketizerAv1 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

char *absl::inlined_vector_internal::Storage<webrtc::`anonymous namespace'::ObuInfo,4ul,std::allocator<webrtc::`anonymous namespace'::ObuInfo>>::EmplaceBackSlow<>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v4 = 2 * *(_QWORD *)(a1 + 16);
    if (v4 >= 0x2E8BA2E8BA2E8BBLL)
      goto LABEL_22;
    v3 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v3 = a1 + 8;
    v4 = 8;
  }
  v5 = v2 >> 1;
  v6 = (char *)operator new(88 * v4);
  v7 = &v6[88 * (v2 >> 1)];
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_QWORD *)v7 + 10) = 0;
  if (v2 < 2)
    goto LABEL_18;
  v8 = 0;
  v9 = v5;
  do
  {
    v10 = &v6[v8];
    v11 = *(_OWORD *)(v3 + v8);
    v12 = *(_OWORD *)(v3 + v8 + 16);
    *((_QWORD *)v10 + 4) = *(_QWORD *)(v3 + v8 + 32);
    *(_OWORD *)v10 = v11;
    *((_OWORD *)v10 + 1) = v12;
    *((_QWORD *)v10 + 5) = *(_QWORD *)(v3 + v8 + 40);
    *((_QWORD *)v10 + 6) = 0;
    v13 = (unint64_t *)&v6[v8 + 48];
    v14 = *(_QWORD *)(v3 + v8 + 48);
    if (v14 >= 2)
    {
      if ((v14 & 1) != 0)
      {
        absl::inlined_vector_internal::Storage<rtc::ArrayView<unsigned char const,-4711l>,2ul,std::allocator<rtc::ArrayView<unsigned char const,-4711l>>>::InitFrom(v13, (unint64_t *)(v3 + v8 + 48));
      }
      else
      {
        *v13 = v14;
        v15 = &v6[v8];
        v16 = *(_OWORD *)(v3 + v8 + 56);
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(v3 + v8 + 72);
        *(_OWORD *)(v15 + 56) = v16;
      }
    }
    v8 += 88;
    --v9;
  }
  while (v9);
  if (!v3)
  {
    __break(1u);
LABEL_22:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v17 = v3 + 88 * v5 - 40;
  do
  {
    if ((*(_BYTE *)v17 & 1) != 0)
      operator delete(*(void **)(v17 + 8));
    v17 -= 88;
    --v5;
  }
  while (v5);
  v2 = *(_QWORD *)a1;
LABEL_18:
  if ((v2 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v2 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)a1 = (v2 | 1) + 2;
  return v7;
}

void *absl::inlined_vector_internal::Storage<rtc::ArrayView<unsigned char const,-4711l>,2ul,std::allocator<rtc::ArrayView<unsigned char const,-4711l>>>::InitFrom(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  void *v6;
  const void *v7;
  unint64_t v8;
  void *result;

  v2 = *a2;
  if (*a2 <= 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = v2 >> 1;
  if ((v2 & 1) != 0)
  {
    if (v5 <= 4)
      v8 = 4;
    else
      v8 = v2 >> 1;
    if (!(v8 >> 60))
    {
      v6 = operator new(16 * v8);
      a1[1] = (unint64_t)v6;
      a1[2] = v8;
      v7 = (const void *)a2[1];
      goto LABEL_9;
    }
LABEL_11:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v6 = a1 + 1;
  v7 = a2 + 1;
LABEL_9:
  result = memcpy(v6, v7, 16 * v5);
  *a1 = *a2;
  return result;
}

void absl::inlined_vector_internal::Storage<rtc::ArrayView<unsigned char const,-4711l>,2ul,std::allocator<rtc::ArrayView<unsigned char const,-4711l>>>::EmplaceBackSlow<unsigned char const*&,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;

  v7 = (__int128 *)(a1 + 8);
  v6 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (((v9 >> 59) & 0xF) != 0)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v7 = *(__int128 **)(a1 + 8);
    v8 = 2 * v9;
  }
  else
  {
    v8 = 4;
  }
  v10 = v6 >> 1;
  v11 = operator new(16 * v8);
  v12 = v11;
  v13 = &v11[v6 >> 1];
  if (a3)
    v14 = a2;
  else
    v14 = 0;
  *v13 = v14;
  v13[1] = a3;
  if (v6 >= 2)
  {
    v15 = v11;
    do
    {
      v16 = *v7++;
      *v15++ = v16;
      --v10;
    }
    while (v10);
  }
  if ((v6 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v6 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = (v6 | 1) + 2;
}

void absl::inlined_vector_internal::Storage<webrtc::`anonymous namespace'::ObuInfo,4ul,std::allocator<webrtc::`anonymous namespace'::ObuInfo>>::DestroyContents(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) == 0)
  {
    v3 = a1 + 8;
    if (v2 < 2)
      goto LABEL_3;
LABEL_6:
    if (v3)
    {
      v4 = v2 >> 1;
      v5 = v3 + 88 * (v2 >> 1) - 40;
      do
      {
        if ((*(_BYTE *)v5 & 1) != 0)
          operator delete(*(void **)(v5 + 8));
        v5 -= 88;
        --v4;
      }
      while (v4);
      if ((*(_QWORD *)a1 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      __break(1u);
    }
    return;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 >= 2)
    goto LABEL_6;
LABEL_3:
  if ((*(_QWORD *)a1 & 1) != 0)
LABEL_4:
    operator delete(*(void **)(a1 + 8));
}

void webrtc::VideoRtpDepacketizerGeneric::Parse(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[16];
  char v34;
  void *__p;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[30];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  char v49;
  _QWORD v50[211];
  uint64_t v51;
  __int128 v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v3 = a1[2];
  if (!v3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_generic.cc");
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 2000) = 0;
    return;
  }
  bzero(v33, 0x7B8uLL);
  HIBYTE(v41) = 1;
  BYTE8(v42) = 0;
  *(_QWORD *)&v43[22] = 0xFF000000000000;
  *(_QWORD *)&v43[16] = 0;
  v49 = 0;
  BYTE2(v50[0]) = 0;
  LOBYTE(v50[207]) = 0;
  v51 = 0;
  v52 = 0uLL;
  v53 = 1;
  v5 = *a1;
  if (*a1)
    v6 = (char *)(*(_QWORD *)(v5 + 16) + a1[1]);
  else
    v6 = 0;
  v14 = *v6;
  if ((*v6 & 1) != 0)
    v15 = 3;
  else
    v15 = 4;
  LODWORD(v41) = v15;
  BYTE13(v41) = (v14 & 2) != 0;
  DWORD1(v42) = 0;
  WORD3(v41) = 0;
  if ((v14 & 4) != 0)
  {
    if (v3 <= 2)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_generic.cc");
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 2000) = 0;
LABEL_24:
      if (!v40)
        return;
      if ((v38 & 1) != 0)
      {
        operator delete(v39);
        if ((v36 & 1) == 0)
        {
LABEL_27:
          if ((v34 & 1) == 0)
            return;
          goto LABEL_28;
        }
      }
      else if ((v36 & 1) == 0)
      {
        goto LABEL_27;
      }
      operator delete(v37);
      if ((v34 & 1) == 0)
        return;
LABEL_28:
      operator delete(__p);
      return;
    }
    v25 = v6[2] | ((v6[1] & 0x7F) << 8);
    v50[206] = 4;
    LOWORD(v50[1]) = v25;
    v16 = 3;
    v17 = v3 - 3;
    if (!v5)
      goto LABEL_21;
    goto LABEL_19;
  }
  v16 = 1;
  v17 = v3 - 1;
  if (v5)
  {
LABEL_19:
    v26 = (unsigned int *)(v5 + 24);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
LABEL_21:
  v28 = a1[1] + v16;
  v51 = v5;
  *(_QWORD *)&v52 = v28;
  *((_QWORD *)&v52 + 1) = v17;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 2000) = 0;
  std::__optional_move_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v33);
  *(_BYTE *)(a2 + 216) = 0;
  v29 = v42;
  *(_OWORD *)(a2 + 152) = v41;
  *(_OWORD *)(a2 + 168) = v29;
  *(_OWORD *)(a2 + 184) = *(_OWORD *)v43;
  *(_OWORD *)(a2 + 197) = *(_OWORD *)&v43[13];
  *(_BYTE *)(a2 + 284) = 0;
  if (v49)
  {
    v30 = v47;
    *(_OWORD *)(a2 + 248) = v46;
    *(_OWORD *)(a2 + 264) = v30;
    *(_BYTE *)(a2 + 280) = v48;
    v31 = v45;
    *(_OWORD *)(a2 + 216) = v44;
    *(_OWORD *)(a2 + 232) = v31;
    *(_BYTE *)(a2 + 284) = 1;
  }
  memcpy((void *)(a2 + 288), v50, 0x691uLL);
  v32 = v51;
  v51 = 0;
  *(_QWORD *)(a2 + 1976) = v32;
  *(_OWORD *)(a2 + 1984) = v52;
  v52 = 0uLL;
  *(_BYTE *)(a2 + 2000) = 1;
  if (v53)
    goto LABEL_24;
}

void webrtc::VideoRtpDepacketizerGeneric::~VideoRtpDepacketizerGeneric(webrtc::VideoRtpDepacketizerGeneric *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::VideoRtpDepacketizerH264::Parse(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _BYTE *v37;
  unsigned int v38;
  int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  char *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unsigned __int16 *v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  BOOL v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  char v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  BOOL v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  int v141;
  uint64_t v142;
  int v143;
  unint64_t v144;
  char *v145;
  char *v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  unint64_t v153;
  __int32 v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE *v220;
  _BYTE *v221;
  uint64_t v222;
  __int128 v223;
  void *__p;
  _BYTE *v225;
  int v226;
  char v227;
  uint8x16_t __n;
  void *__src;
  __int16 v230;
  char v231;
  char v232;
  void *v233;
  char v234;
  void *v235;
  char v236;
  void *v237;
  char v238;
  __int128 v239;
  __int128 v240;
  _BYTE v241[30];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  char v246;
  char v247;
  _QWORD v248[211];
  uint64_t v249;
  __int128 v250;
  unsigned __int8 v251;
  uint64_t v252;

  v2 = (uint64_t)a2;
  v252 = *MEMORY[0x24BDAC8D0];
  v3 = a1[2];
  if (!v3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc");
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 2000) = 0;
    return;
  }
  v4 = *a1;
  v5 = a1[1];
  if ((*(_BYTE *)(*(_QWORD *)(*a1 + 16) + v5) & 0x1F) == 0x1C)
  {
    *a1 = 0;
    v222 = v4;
    *(_QWORD *)&v223 = v5;
    *((_QWORD *)&v223 + 1) = v3;
    a1[1] = 0;
    a1[2] = 0;
    v6 = v3 - 1;
    if (v3 <= 1)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc");
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 2000) = 0;
LABEL_107:
      v115 = (unsigned int *)(v4 + 24);
      do
      {
        v116 = __ldaxr(v115);
        v117 = v116 - 1;
      }
      while (__stlxr(v117, v115));
      if (!v117)
      {
        v118 = *(_QWORD *)(v4 + 16);
        *(_QWORD *)(v4 + 16) = 0;
        if (v118)
          MEMORY[0x20BD0ADD4](v118, 0x1000C8077774924);
        JUMPOUT(0x20BD0ADECLL);
      }
      return;
    }
    bzero(a2, 0x7B8uLL);
    *(_BYTE *)(v2 + 167) = 1;
    *(_DWORD *)(v2 + 172) = 0;
    *(_BYTE *)(v2 + 192) = 0;
    *(_QWORD *)(v2 + 206) = 0;
    *(_QWORD *)(v2 + 200) = 0;
    *(_BYTE *)(v2 + 212) = -1;
    *(_BYTE *)(v2 + 284) = 0;
    *(_BYTE *)(v2 + 290) = 0;
    *(_BYTE *)(v2 + 1944) = 0;
    v36 = (uint64_t *)(v2 + 1976);
    *(_QWORD *)(v2 + 1976) = 0;
    *(_QWORD *)(v2 + 1992) = 0;
    *(_QWORD *)(v2 + 1984) = 0;
    *(_BYTE *)(v2 + 2000) = 1;
    v37 = (_BYTE *)(*(_QWORD *)(v4 + 16) + v5);
    v38 = v37[1];
    v39 = v38 & 0x1F;
    if ((v38 & 0x80) != 0)
    {
      v93 = *v37 & 0xE0;
      v94 = webrtc::PpsParser::ParsePpsIdFromSlice((webrtc::PpsParser *)(v37 + 2), (const unsigned __int8 *)(v3 - 2));
      v49 = v94;
      if ((v94 & 0xFF00000000) == 0)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v95, v96, v97, v98, v99, v100, v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc");
        v49 = -1;
      }
      v102 = v39 | v93;
      v103 = (unsigned int *)(v4 + 24);
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
      v105 = v5 + 1;
      v222 = v4;
      do
      {
        v106 = __ldaxr(v103);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v103));
      if (!v107)
      {
        v108 = *(_QWORD *)(v4 + 16);
        *(_QWORD *)(v4 + 16) = 0;
        if (v108)
          MEMORY[0x20BD0ADD4](v108, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v4, 0x1010C40EE34DA14);
      }
      *(_QWORD *)&v223 = v105;
      *((_QWORD *)&v223 + 1) = v6;
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(&v222, (uint64_t *)(*(_QWORD *)(v222 + 8) - v105));
      v109 = v222;
      *(_BYTE *)(*(_QWORD *)(v222 + 16) + v223) = v102;
      if (!*(_BYTE *)(v2 + 2000))
        goto LABEL_224;
      v222 = 0;
      v110 = *v36;
      *v36 = v109;
      if (v110)
      {
        v111 = (unsigned int *)(v110 + 24);
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
        {
          v114 = *(_QWORD *)(v110 + 16);
          *(_QWORD *)(v110 + 16) = 0;
          if (v114)
            MEMORY[0x20BD0ADD4](v114, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v110, 0x1010C40EE34DA14);
        }
      }
      *(_OWORD *)(v2 + 1984) = v223;
      v223 = 0uLL;
      v50 = *(unsigned __int8 *)(v2 + 2000);
      if (v39 == 5)
        goto LABEL_37;
    }
    else
    {
      v40 = (unsigned int *)(v4 + 24);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      if (!*(_BYTE *)(v2 + 2000))
        goto LABEL_224;
      v42 = v4;
      v43 = v5 + 2;
      v44 = *v36;
      *v36 = v42;
      if (v44)
      {
        v45 = (unsigned int *)(v44 + 24);
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          v48 = *(_QWORD *)(v44 + 16);
          *(_QWORD *)(v44 + 16) = 0;
          if (v48)
            MEMORY[0x20BD0ADD4](v48, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v44, 0x1010C40EE34DA14);
        }
      }
      *(_QWORD *)(v2 + 1984) = v43;
      *(_QWORD *)(v2 + 1992) = v3 - 2;
      v49 = -1;
      v50 = *(unsigned __int8 *)(v2 + 2000);
      if (v39 == 5)
      {
LABEL_37:
        if (v50)
        {
          v51 = 3;
          goto LABEL_103;
        }
        goto LABEL_224;
      }
    }
    if (v50)
    {
      v51 = 4;
LABEL_103:
      *(_DWORD *)(v2 + 152) = v51;
      *(_DWORD *)(v2 + 156) = 0;
      *(_DWORD *)(v2 + 172) = 4;
      *(_BYTE *)(v2 + 168) = 0;
      *(_BYTE *)(v2 + 165) = v38 >> 7;
      *(_OWORD *)(v2 + 296) = 0u;
      *(_OWORD *)(v2 + 312) = 0u;
      *(_OWORD *)(v2 + 328) = 0u;
      *(_OWORD *)(v2 + 344) = 0u;
      *(_OWORD *)(v2 + 360) = 0u;
      *(_OWORD *)(v2 + 376) = 0u;
      *(_OWORD *)(v2 + 392) = 0u;
      *(_OWORD *)(v2 + 408) = 0u;
      *(_OWORD *)(v2 + 424) = 0u;
      *(_QWORD *)(v2 + 1936) = 3;
      *(_DWORD *)(v2 + 300) = 2;
      *(_BYTE *)(v2 + 296) = v39;
      if ((v38 & 0x80) != 0)
      {
        *(_BYTE *)(v2 + 304) = v39;
        *(_BYTE *)(v2 + 307) = v231;
        *(_WORD *)(v2 + 305) = v230;
        *(_DWORD *)(v2 + 308) = -1;
        *(_DWORD *)(v2 + 312) = v49;
        *(_QWORD *)(v2 + 424) = 1;
        v4 = v222;
        if (!v222)
          return;
      }
      else
      {
        v4 = v222;
        if (!v222)
          return;
      }
      goto LABEL_107;
    }
LABEL_224:
    __break(1u);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v221 = (_BYTE *)(*(_QWORD *)(v4 + 16) + v5);
  bzero(&v230, 0x7B8uLL);
  HIBYTE(v239) = 1;
  DWORD1(v240) = 0;
  v241[8] = 0;
  *(_QWORD *)&v241[22] = 0xFF000000000000;
  *(_QWORD *)&v241[16] = 0;
  v247 = 0;
  BYTE2(v248[0]) = 0;
  LOBYTE(v248[207]) = 0;
  v249 = 0;
  v251 = 1;
  v215 = v4;
  v21 = (unsigned int *)(v4 + 24);
  v250 = 0uLL;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v23 = v249;
  if (v249)
  {
    v24 = (unsigned int *)(v249 + 24);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      v27 = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(v23 + 16) = 0;
      if (v27)
        MEMORY[0x20BD0ADD4](v27, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v23, 0x1010C40EE34DA14);
    }
  }
  v249 = v215;
  *(_QWORD *)&v250 = v5;
  *((_QWORD *)&v250 + 1) = v3;
  if (!v251)
    goto LABEL_224;
  DWORD1(v239) = 0;
  DWORD1(v240) = 4;
  LOBYTE(v240) = 0;
  BYTE13(v239) = 1;
  memset(&v248[1], 0, 144);
  v248[206] = 3;
  v28 = *v221 & 0x1F;
  v220 = (_BYTE *)v2;
  v212 = v3;
  if (v28 != 24)
  {
    v52 = (char *)operator new(8uLL);
    *(_QWORD *)v52 = 0;
    LOBYTE(v248[1]) = v28;
    LODWORD(v239) = 4;
    v53 = v3 + 2;
    v54 = v52 + 8;
    v55 = v52 + 8;
    v56 = 8;
    v57 = 1;
    v58 = 2;
    goto LABEL_40;
  }
  if (v3 < 4)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc");
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 2000) = 0;
    goto LABEL_202;
  }
  v67 = 0;
  v55 = 0;
  v63 = 0;
  v68 = 0;
  v69 = (unsigned __int16 *)(v221 + 1);
  v70 = v3 - 1;
  do
  {
    while (1)
    {
      v72 = __rev16(*v69);
      v73 = v70 - 2 >= v72;
      v70 = v70 - 2 - v72;
      if (!v73)
        goto LABEL_116;
      v74 = v68 + 3;
      if (v55 < v67)
        break;
      v75 = v55 - v63;
      v76 = (v55 - v63) >> 3;
      v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 61)
        goto LABEL_197;
      if ((v67 - v63) >> 2 > v77)
        v77 = (v67 - v63) >> 2;
      if ((unint64_t)(v67 - v63) >= 0x7FFFFFFFFFFFFFF8)
        v77 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v77)
        goto LABEL_224;
      v218 = v68;
      if (v77 >> 61)
        goto LABEL_225;
      v78 = v55;
      v216 = 8 * v77;
      v79 = (char *)operator new(8 * v77);
      v80 = (uint64_t *)&v79[8 * v76];
      *v80 = v74;
      v81 = (char *)(v80 + 1);
      if (v78 != v63)
      {
        v82 = v78 - v63 - 8;
        if (v82 < 0x168
          || (v83 = (v78 - 8 - v63) & 0xFFFFFFFFFFFFFFF8, &v79[v75 - 8 - v83] > &v79[v75 - 8])
          || &v78[-v83 - 8] > v78 - 8
          || (unint64_t)(&v78[-v75] - v79) < 0x20)
        {
          v84 = v78;
          v85 = v216;
          goto LABEL_71;
        }
        v87 = (v82 >> 3) + 1;
        v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
        v84 = &v78[-v88];
        v80 = (uint64_t *)((char *)v80 - v88);
        v89 = &v79[8 * v76 - 16];
        v90 = v78 - 16;
        v91 = v87 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v92 = *(_OWORD *)v90;
          *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
          *(_OWORD *)v89 = v92;
          v89 -= 32;
          v90 -= 32;
          v91 -= 4;
        }
        while (v91);
        v85 = v216;
        if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_71:
            v86 = *((_QWORD *)v84 - 1);
            v84 -= 8;
            *--v80 = v86;
          }
          while (v84 != v63);
        }
        v67 = &v79[v85];
        if (!v63)
          goto LABEL_75;
        goto LABEL_50;
      }
      v67 = &v79[v216];
      if (!v63)
      {
LABEL_75:
        v63 = (char *)v80;
        v55 = v81;
        goto LABEL_51;
      }
LABEL_50:
      v71 = v81;
      operator delete(v63);
      v63 = (char *)v80;
      v55 = v71;
LABEL_51:
      v69 = (unsigned __int16 *)((char *)v69 + v72 + 2);
      v68 = v218 + v72 + 2;
      if (v70 <= 1)
        goto LABEL_115;
    }
    if (!v55)
      goto LABEL_224;
    *(_QWORD *)v55 = v74;
    v55 += 8;
    v69 = (unsigned __int16 *)((char *)v69 + v72 + 2);
    v68 += v72 + 2;
  }
  while (v70 > 1);
LABEL_115:
  if (v70)
  {
LABEL_116:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v119, v120, v121, v122, v123, v124, v125, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc");
    *v220 = 0;
    v220[2000] = 0;
    if (!v63)
      goto LABEL_202;
LABEL_201:
    operator delete(v63);
    goto LABEL_202;
  }
  HIDWORD(v248[1]) = 1;
  LOBYTE(v248[1]) = v221[3] & 0x1F;
  LODWORD(v239) = 4;
  v53 = v212 + 2;
  if (v55 >= v67)
  {
    v54 = v67;
    v52 = v63;
    v2 = (uint64_t)v220;
    v56 = v55 - v63;
    v57 = (v55 - v63) >> 3;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 61)
LABEL_197:
      abort();
LABEL_40:
    v59 = v54 - v52;
    v60 = (v54 - v52) >> 2;
    if (v60 > v58)
      v58 = v60;
    if (v59 >= 0x7FFFFFFFFFFFFFF8)
      v58 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v58)
      goto LABEL_224;
    if (v58 >> 61)
LABEL_225:
      std::__throw_bad_array_new_length[abi:sn180100]();
    v61 = v55;
    v62 = (char *)operator new(8 * v58);
    v63 = &v62[8 * v57];
    *(_QWORD *)v63 = v53;
    v64 = v63 + 8;
    if (v61 != v52)
    {
      v65 = v61 - v52 - 8;
      if (v65 < 0x58)
      {
        v66 = v61;
        goto LABEL_123;
      }
      if ((unint64_t)(&v61[-v56] - v62) < 0x20)
      {
        v66 = v61;
        do
        {
LABEL_123:
          v132 = *((_QWORD *)v66 - 1);
          v66 -= 8;
          *((_QWORD *)v63 - 1) = v132;
          v63 -= 8;
        }
        while (v66 != v52);
        goto LABEL_124;
      }
      v126 = (v65 >> 3) + 1;
      v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
      v66 = &v61[-v127];
      v63 -= v127;
      v128 = &v62[8 * v57 - 16];
      v129 = v61 - 16;
      v130 = v126 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v131 = *(_OWORD *)v129;
        *((_OWORD *)v128 - 1) = *((_OWORD *)v129 - 1);
        *(_OWORD *)v128 = v131;
        v128 -= 32;
        v129 -= 32;
        v130 -= 4;
      }
      while (v130);
      if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_123;
    }
LABEL_124:
    if (v52)
      operator delete(v52);
    v133 = (v64 - v63) >> 3;
    v134 = v133 > 1;
    v217 = v133 - 1;
    if (v133 == 1)
      goto LABEL_187;
    goto LABEL_127;
  }
  *(_QWORD *)v55 = v53;
  v2 = (uint64_t)v220;
  v133 = (v55 + 8 - v63) >> 3;
  v134 = v133 > 1;
  v217 = v133 - 1;
  if (v133 == 1)
  {
LABEL_187:
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 2000) = 0;
    goto LABEL_188;
  }
LABEL_127:
  v211 = 0;
  v135 = 0;
  if (v134)
    v136 = v133;
  else
    v136 = 1;
  v219 = v136 - 1;
  v214 = v133;
  while (2)
  {
    if (v133 == v135 || v219 == v135)
      goto LABEL_224;
    v138 = *(_QWORD *)&v63[8 * v135];
    v139 = *(_QWORD *)&v63[8 * v135 + 8] - 2;
    if (v139 == v138)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_199:
        rtc::webrtc_logging_impl::Log("\r\t", v193, v194, v195, v196, v197, v198, v199, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc");
      goto LABEL_200;
    }
    v140 = v221[v138] & 0x1F;
    v141 = -1;
    v142 = v138 + 1;
    v143 = -1;
    switch(v140)
    {
      case 1:
        goto LABEL_139;
      case 2:
      case 3:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 25:
      case 26:
      case 27:
        goto LABEL_178;
      case 5:
        if (!v251)
          goto LABEL_224;
        LODWORD(v239) = 3;
LABEL_139:
        v144 = webrtc::PpsParser::ParsePpsIdFromSlice((webrtc::PpsParser *)&v221[v142], (const unsigned __int8 *)(v139 - v142));
        if ((v144 & 0xFF00000000) == 0)
        {
          v2 = (uint64_t)v220;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v185, v186, v187, v188, v189, v190, v191, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc");
LABEL_200:
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 2000) = 0;
          goto LABEL_201;
        }
        v141 = v144;
LABEL_178:
        v172 = v248[17];
        if (v248[17] == 10)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            v213 = v213 & 0xFFFFFFFF00000000 | 0x702;
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v173, v174, v175, v176, v177, v178, v179, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc");
          }
        }
        else
        {
          ++v248[17];
          v137 = (char *)&v248[1] + 12 * v172;
          v137[8] = v140;
          *((_DWORD *)v137 + 3) = v143;
          *((_DWORD *)v137 + 4) = v141;
        }
        v2 = (uint64_t)v220;
        if (v217 != ++v135)
          continue;
        v180 = v251;
        *v220 = 0;
        v220[2000] = 0;
        if (!v180)
          goto LABEL_201;
LABEL_188:
        std::__optional_move_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__optional_move_base[abi:sn180100](v2, (uint64_t)&v230);
        *(_BYTE *)(v2 + 216) = 0;
        v181 = v240;
        *(_OWORD *)(v2 + 152) = v239;
        *(_OWORD *)(v2 + 168) = v181;
        *(_OWORD *)(v2 + 184) = *(_OWORD *)v241;
        *(_OWORD *)(v2 + 197) = *(_OWORD *)&v241[13];
        *(_BYTE *)(v2 + 284) = 0;
        if (v247)
        {
          v182 = v245;
          *(_OWORD *)(v2 + 248) = v244;
          *(_OWORD *)(v2 + 264) = v182;
          *(_BYTE *)(v2 + 280) = v246;
          v183 = v243;
          *(_OWORD *)(v2 + 216) = v242;
          *(_OWORD *)(v2 + 232) = v183;
          *(_BYTE *)(v2 + 284) = 1;
        }
        memcpy((void *)(v2 + 288), v248, 0x691uLL);
        v184 = v249;
        v249 = 0;
        *(_QWORD *)(v2 + 1976) = v184;
        *(_OWORD *)(v2 + 1984) = v250;
        v250 = 0uLL;
        *(_BYTE *)(v2 + 2000) = 1;
        if (v63)
          goto LABEL_201;
LABEL_202:
        if (v251)
        {
          v200 = v249;
          if (v249)
          {
            v201 = (unsigned int *)(v249 + 24);
            do
            {
              v202 = __ldaxr(v201);
              v203 = v202 - 1;
            }
            while (__stlxr(v203, v201));
            if (!v203)
            {
              v204 = *(_QWORD *)(v200 + 16);
              *(_QWORD *)(v200 + 16) = 0;
              if (v204)
                MEMORY[0x20BD0ADD4](v204, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v200, 0x1010C40EE34DA14);
            }
          }
          if (v238)
          {
            if ((v236 & 1) != 0)
            {
              operator delete(v237);
              if ((v234 & 1) != 0)
                goto LABEL_216;
LABEL_213:
              if ((v232 & 1) != 0)
LABEL_217:
                operator delete(v233);
            }
            else
            {
              if ((v234 & 1) == 0)
                goto LABEL_213;
LABEL_216:
              operator delete(v235);
              if ((v232 & 1) != 0)
                goto LABEL_217;
            }
          }
        }
        do
        {
          v205 = __ldaxr(v21);
          v206 = v205 - 1;
        }
        while (__stlxr(v206, v21));
        if (!v206)
        {
          v207 = *(_QWORD *)(v215 + 16);
          *(_QWORD *)(v215 + 16) = 0;
          if (v207)
            MEMORY[0x20BD0ADD4](v207, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v215, 0x1010C40EE34DA14);
        }
        return;
      case 7:
        __n = 0uLL;
        __src = 0;
        if (v138 != -1)
        {
          v145 = (char *)operator new[]();
          v146 = v145;
          v147 = __src;
          if (__src)
          {
            memcpy(v145, __src, __n.u64[0]);
            __src = v146;
            MEMORY[0x20BD0ADD4](v147, 0x1000C8077774924);
            v146 = (char *)__src;
          }
          else
          {
            __src = v145;
          }
          __n.i64[1] = v138 + 1;
          memcpy(&v146[__n.i64[0]], v221, v138 + 1);
          __n.i64[0] = v138 + 1;
        }
        LOBYTE(__p) = 0;
        v227 = 0;
        v155 = webrtc::SpsVuiRewriter::ParseAndRewriteSps((webrtc::H264 *)&v221[v142], v139 - v142, (uint64_t)&__p, 0, (uint64_t)&__n);
        if (v155 == 2)
        {
          if ((v211 & 1) != 0 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            v209 = v209 & 0xFFFFFFFF00000000 | 0x472;
            rtc::webrtc_logging_impl::Log("\r\t", v164, v165, v166, v167, v168, v169, v170, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc");
          }
          if (HIDWORD(v248[1]) == 1)
            *(_WORD *)((char *)__src + v138 - 2) = bswap32(__n.i32[0] - v138) >> 16;
          if (!v251)
            goto LABEL_224;
          rtc::CopyOnWriteBuffer::SetData<unsigned char,(void *)0>(&v249, __src, (uint64_t *)__n.i64[0]);
          if (!v251)
            goto LABEL_224;
          rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v249, &v221[v139], v212 - v139);
          v211 = 1;
LABEL_168:
          if (!v227 || !v251)
            goto LABEL_224;
          v143 = v226;
          WORD2(v239) = (_WORD)v225;
          WORD3(v239) = WORD2(v225);
          LODWORD(v239) = 3;
LABEL_172:
          v163 = 1;
          goto LABEL_173;
        }
        if (v155 == 1)
          goto LABEL_168;
        if (v155)
        {
          v143 = -1;
          goto LABEL_172;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        {
          v210 = v210 & 0xFFFFFFFF00000000 | 0x452;
          rtc::webrtc_logging_impl::Log("\r\t", v156, v157, v158, v159, v160, v161, v162, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc");
        }
        v163 = 0;
        *v220 = 0;
        v220[2000] = 0;
        v143 = -1;
LABEL_173:
        v171 = __src;
        __src = 0;
        if (v171)
          MEMORY[0x20BD0ADD4](v171, 0x1000C8077774924);
        if ((v163 & 1) == 0)
          goto LABEL_201;
        v141 = -1;
LABEL_177:
        v133 = v214;
        goto LABEL_178;
      case 8:
        webrtc::H264::ParseRbsp((webrtc::H264 *)&v221[v142], v139 - v142, (unint64_t *)&__p);
        v152 = __p;
        v153 = v225 - (_BYTE *)__p;
        if (v225 == __p)
          v152 = 0;
        __n.i64[0] = (uint64_t)v152;
        if (((v153 >> 28) & 0x1FFFFFFFFLL) != 0)
        {
          rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v148, v149, v150, v151, v208);
          JUMPOUT(0x2088B60C0);
        }
        __n.i32[2] = 8 * v153;
        __n.i8[12] = 1;
        v141 = webrtc::BitstreamReader::ReadExponentialGolomb(&__n);
        v143 = webrtc::BitstreamReader::ReadExponentialGolomb(&__n);
        v154 = __n.i32[2];
        if (__p)
        {
          v225 = __p;
          operator delete(__p);
        }
        if ((v154 & 0x80000000) == 0)
          goto LABEL_177;
        v192 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
        v2 = (uint64_t)v220;
        if ((v192 & 1) == 0)
          goto LABEL_199;
        goto LABEL_200;
      case 24:
      case 28:
        v2 = (uint64_t)v220;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          goto LABEL_199;
        goto LABEL_200;
      default:
        v143 = -1;
        goto LABEL_178;
    }
  }
}

void webrtc::VideoRtpDepacketizerH264::~VideoRtpDepacketizerH264(webrtc::VideoRtpDepacketizerH264 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::VideoRtpDepacketizerH265::Parse(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unsigned __int16 *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  size_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  char *v67;
  char *v68;
  unint64_t v69;
  char *v70;
  unsigned int *v71;
  unsigned int v72;
  BOOL v73;
  char v74;
  char v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 *v98;
  char *v99;
  unint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  char *v108;
  char *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  char *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  size_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int8 *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int *v170;
  unsigned int v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  size_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int16 *__src;
  uint64_t v195;
  uint64_t v196;
  size_t v197;
  char v198[72];
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  int v203;
  int v204;
  char v205;
  uint64_t v206;
  __int128 v207;
  void *__p;
  _BYTE *v209;
  uint64_t v210;
  __int128 v211;
  void *v212;
  char v213;
  void *v214;
  char v215;
  void *v216;
  char v217;
  __int128 v218;
  __int128 v219;
  _BYTE v220[30];
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  char v225;
  char v226;
  _BYTE v227[1681];
  uint64_t v228;
  __int128 v229;
  char v230;
  uint64_t v231;

  v2 = (uint64_t)a2;
  v231 = *MEMORY[0x24BDAC8D0];
  v3 = a1[2];
  if (!v3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc");
    goto LABEL_12;
  }
  v4 = *a1;
  v5 = a1[1];
  v6 = (*(unsigned __int8 *)(*(_QWORD *)(*a1 + 16) + v5) >> 1) & 0x3F;
  if (v6 == 50)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc");
LABEL_12:
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 2000) = 0;
    return;
  }
  if (v6 == 49)
  {
    *a1 = 0;
    v195 = v4;
    v196 = v5;
    v197 = v3;
    a1[1] = 0;
    a1[2] = 0;
    if (v3 <= 2)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc");
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 2000) = 0;
      goto LABEL_50;
    }
    bzero(a2, 0x7B8uLL);
    *(_BYTE *)(v2 + 167) = 1;
    *(_DWORD *)(v2 + 172) = 0;
    *(_BYTE *)(v2 + 192) = 0;
    *(_QWORD *)(v2 + 206) = 0;
    *(_QWORD *)(v2 + 200) = 0;
    *(_BYTE *)(v2 + 212) = -1;
    *(_BYTE *)(v2 + 284) = 0;
    *(_BYTE *)(v2 + 290) = 0;
    *(_BYTE *)(v2 + 1944) = 0;
    v36 = (uint64_t *)(v2 + 1976);
    *(_QWORD *)(v2 + 1976) = 0;
    *(_QWORD *)(v2 + 1992) = 0;
    *(_QWORD *)(v2 + 1984) = 0;
    *(_BYTE *)(v2 + 2000) = 1;
    v37 = (char *)(*(_QWORD *)(v4 + 16) + v5);
    v38 = v37[2];
    if (v38 < 0)
    {
      v74 = v37[1];
      v75 = *v37;
      v76 = (unsigned int *)(v4 + 24);
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
      v78 = v5 + 1;
      v195 = v4;
      do
        v79 = __ldaxr(v76);
      while (__stlxr(v79 - 1, v76));
      if (v79 == 1)
      {
        v80 = *(_QWORD *)(v4 + 16);
        *(_QWORD *)(v4 + 16) = 0;
        if (v80)
          MEMORY[0x20BD0ADD4](v80, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v4, 0x1010C40EE34DA14);
      }
      v196 = v78;
      v197 = v3 - 1;
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(&v195, (uint64_t *)(*(_QWORD *)(v195 + 8) - v78));
      v81 = v195;
      v82 = v196;
      *(_BYTE *)(*(_QWORD *)(v195 + 16) + v196) = v75 & 0x81 | (2 * (v38 & 0x3F));
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(&v195, (uint64_t *)(*(_QWORD *)(v81 + 8) - v82));
      v83 = v195;
      v84 = v196;
      *(_BYTE *)(*(_QWORD *)(v195 + 16) + v196 + 1) = v74;
      v210 = 0;
      v211 = 0uLL;
      rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v210, &webrtc::kStartCode, 4uLL);
      rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v210, (const void *)(*(_QWORD *)(v83 + 16) + v84), v197);
      if (!*(_BYTE *)(v2 + 2000))
        goto LABEL_207;
      v85 = v210;
      if (&v210 != v36)
      {
        if (v210)
        {
          v86 = (unsigned int *)(v210 + 24);
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
        v88 = *v36;
        if (*v36)
        {
          v89 = (unsigned int *)(v88 + 24);
          do
          {
            v90 = __ldaxr(v89);
            v91 = v90 - 1;
          }
          while (__stlxr(v91, v89));
          if (!v91)
          {
            v92 = *(_QWORD *)(v88 + 16);
            *(_QWORD *)(v88 + 16) = 0;
            if (v92)
              MEMORY[0x20BD0ADD4](v92, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v88, 0x1010C40EE34DA14);
          }
        }
        *(_QWORD *)(v2 + 1976) = v85;
        *(_OWORD *)(v2 + 1984) = v211;
        v85 = v210;
      }
      if (v85)
      {
        v93 = (unsigned int *)(v85 + 24);
        do
        {
          v94 = __ldaxr(v93);
          v95 = v94 - 1;
        }
        while (__stlxr(v95, v93));
        if (!v95)
        {
          v96 = *(_QWORD *)(v85 + 16);
          *(_QWORD *)(v85 + 16) = 0;
          if (v96)
            MEMORY[0x20BD0ADD4](v96, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v85, 0x1010C40EE34DA14);
        }
      }
    }
    else
    {
      v39 = (unsigned int *)(v4 + 24);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      if (!*(_BYTE *)(v2 + 2000))
        goto LABEL_207;
      v41 = v5 + 3;
      v42 = *v36;
      *v36 = v4;
      if (v42)
      {
        v43 = (unsigned int *)(v42 + 24);
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          v46 = *(_QWORD *)(v42 + 16);
          *(_QWORD *)(v42 + 16) = 0;
          if (v46)
            MEMORY[0x20BD0ADD4](v46, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v42, 0x1010C40EE34DA14);
        }
      }
      *(_QWORD *)(v2 + 1984) = v41;
      *(_QWORD *)(v2 + 1992) = v3 - 3;
    }
    if ((v38 & 0x38) == 0x10)
    {
      if (*(_BYTE *)(v2 + 2000))
      {
        v47 = 3;
        goto LABEL_49;
      }
    }
    else if (*(_BYTE *)(v2 + 2000))
    {
      v47 = 4;
LABEL_49:
      *(_DWORD *)(v2 + 152) = v47;
      *(_DWORD *)(v2 + 156) = 0;
      *(_DWORD *)(v2 + 172) = 5;
      *(_BYTE *)(v2 + 165) = (v38 & 0x80) != 0;
      v4 = v195;
      if (!v195)
        return;
LABEL_50:
      v71 = (unsigned int *)(v4 + 24);
      do
      {
        v72 = __ldaxr(v71);
        v73 = --v72 == 0;
      }
      while (__stlxr(v72, v71));
      goto LABEL_196;
    }
LABEL_207:
    __break(1u);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v28 = v3 - 2;
  if (v3 <= 2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc");
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 2000) = 0;
    goto LABEL_194;
  }
  v48 = (unsigned __int16 *)(*(_QWORD *)(v4 + 16) + v5);
  bzero(&v210, 0x7B8uLL);
  HIBYTE(v218) = 1;
  BYTE8(v219) = 0;
  *(_QWORD *)&v220[22] = 0xFF000000000000;
  *(_QWORD *)&v220[16] = 0;
  v226 = 0;
  v227[2] = 0;
  v227[1656] = 0;
  v228 = 0;
  v229 = 0uLL;
  v230 = 1;
  WORD3(v218) = 0;
  DWORD1(v219) = 5;
  BYTE13(v218) = 1;
  __src = v48;
  v49 = *(_BYTE *)v48;
  v206 = 0;
  v207 = 0uLL;
  if ((v49 & 0x7E) != 0x60)
  {
    v57 = (char *)operator new(8uLL);
    *(_QWORD *)v57 = 0;
    v58 = v57 + 8;
    LODWORD(v218) = 4;
    v59 = v3 + 2;
    v60 = v57 + 8;
    v61 = 8;
    v62 = 1;
    v63 = 2;
    goto LABEL_38;
  }
  if (v3 < 5)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v50, v51, v52, v53, v54, v55, v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc");
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 2000) = 0;
    goto LABEL_181;
  }
  v189 = v3;
  v190 = v2;
  v191 = v4;
  v60 = 0;
  v58 = 0;
  v67 = 0;
  v97 = 0;
  v98 = v48 + 1;
  do
  {
    v100 = __rev16(*v98);
    v101 = v28 - 2 >= v100;
    v28 = v28 - 2 - v100;
    if (!v101)
      goto LABEL_113;
    v102 = v97 + 4;
    if (v58 >= v60)
    {
      v103 = (v58 - v67) >> 3;
      v104 = v103 + 1;
      if ((unint64_t)(v103 + 1) >> 61)
        goto LABEL_206;
      v105 = v60 - v67;
      v106 = (v60 - v67) >> 2;
      if (v106 > v104)
        v104 = v106;
      if (v105 >= 0x7FFFFFFFFFFFFFF8)
        v104 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v104)
        goto LABEL_207;
      if (v104 >> 61)
        goto LABEL_208;
      v193 = 8 * v104;
      v107 = operator new(8 * v104);
      v108 = &v107[8 * v103];
      *(_QWORD *)v108 = v102;
      v109 = v108 + 8;
      if (v58 == v67)
      {
        v60 = &v107[v193];
        if (v67)
          goto LABEL_83;
LABEL_102:
        v67 = v108;
        v58 = v109;
        goto LABEL_84;
      }
      v110 = v58 - v67 - 8;
      if (v110 < 0x168
        || (v114 = (v58 - 8 - v67) & 0xFFFFFFFFFFFFFFF8, &v107[v58 - v67 - 8 - v114] > &v107[v58 - v67 - 8])
        || &v58[-v114 - 8] > v58 - 8
        || (unint64_t)(v67 - v107) < 0x20)
      {
        v111 = v58;
        v112 = v193;
      }
      else
      {
        v115 = (v110 >> 3) + 1;
        v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
        v111 = &v58[-v116];
        v108 -= v116;
        v117 = &v107[8 * v103 - 16];
        v118 = v58 - 16;
        v119 = v115 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v120 = *(_OWORD *)v118;
          *(v117 - 1) = *((_OWORD *)v118 - 1);
          *v117 = v120;
          v117 -= 2;
          v118 -= 32;
          v119 -= 4;
        }
        while (v119);
        v112 = v193;
        if (v115 == (v115 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_101:
          v60 = &v107[v112];
          if (v67)
          {
LABEL_83:
            v58 = v109;
            v99 = v60;
            operator delete(v67);
            v60 = v99;
            v67 = v108;
            goto LABEL_84;
          }
          goto LABEL_102;
        }
      }
      do
      {
        v113 = *((_QWORD *)v111 - 1);
        v111 -= 8;
        *((_QWORD *)v108 - 1) = v113;
        v108 -= 8;
      }
      while (v111 != v67);
      goto LABEL_101;
    }
    if (!v58)
      goto LABEL_207;
    *(_QWORD *)v58 = v102;
    v58 += 8;
LABEL_84:
    v98 = (unsigned __int16 *)((char *)v98 + v100 + 2);
    v97 += v100 + 2;
  }
  while (v28 > 1);
  if (v28)
  {
LABEL_113:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v121, v122, v123, v124, v125, v126, v127, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc");
    *(_BYTE *)v190 = 0;
    *(_BYTE *)(v190 + 2000) = 0;
    v4 = v191;
    goto LABEL_172;
  }
  LODWORD(v218) = 4;
  v2 = v190;
  v59 = v189 + 2;
  if (v58 >= v60)
  {
    v57 = v67;
    v4 = v191;
    v61 = v58 - v67;
    v62 = (v58 - v67) >> 3;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
LABEL_206:
      abort();
LABEL_38:
    v64 = v60 - v57;
    v65 = (v60 - v57) >> 2;
    if (v65 > v63)
      v63 = v65;
    if (v64 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v63)
      goto LABEL_207;
    if (v63 >> 61)
LABEL_208:
      std::__throw_bad_array_new_length[abi:sn180100]();
    v66 = operator new(8 * v63);
    v67 = &v66[8 * v62];
    *(_QWORD *)v67 = v59;
    v68 = v67 + 8;
    if (v58 != v57)
    {
      v69 = v58 - v57 - 8;
      if (v69 < 0x58)
      {
        v70 = v58;
        goto LABEL_119;
      }
      if ((unint64_t)(v58 - &v66[v61]) < 0x20)
      {
        v70 = v58;
        do
        {
LABEL_119:
          v134 = *((_QWORD *)v70 - 1);
          v70 -= 8;
          *((_QWORD *)v67 - 1) = v134;
          v67 -= 8;
        }
        while (v70 != v57);
        goto LABEL_120;
      }
      v128 = (v69 >> 3) + 1;
      v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
      v70 = &v58[-v129];
      v67 -= v129;
      v130 = &v66[8 * v62 - 16];
      v131 = v58 - 16;
      v132 = v128 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v133 = *(_OWORD *)v131;
        *(v130 - 1) = *((_OWORD *)v131 - 1);
        *v130 = v133;
        v130 -= 2;
        v131 -= 32;
        v132 -= 4;
      }
      while (v132);
      if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_119;
    }
LABEL_120:
    if (v57)
      operator delete(v57);
    v135 = (v68 - v67) >> 3;
    if (v135 == 1)
      goto LABEL_166;
    goto LABEL_123;
  }
  *(_QWORD *)v58 = v59;
  v4 = v191;
  v135 = (v58 + 8 - v67) >> 3;
  if (v135 == 1)
  {
LABEL_166:
    v169 = v206;
    if (v206)
    {
      v170 = (unsigned int *)(v206 + 24);
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
    }
    v228 = v169;
    v229 = v207;
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 2000) = 0;
    std::__optional_move_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__optional_move_base[abi:sn180100](v2, (uint64_t)&v210);
    *(_BYTE *)(v2 + 216) = 0;
    v172 = v219;
    *(_OWORD *)(v2 + 152) = v218;
    *(_OWORD *)(v2 + 168) = v172;
    *(_OWORD *)(v2 + 184) = *(_OWORD *)v220;
    *(_OWORD *)(v2 + 197) = *(_OWORD *)&v220[13];
    *(_BYTE *)(v2 + 284) = 0;
    if (v226)
    {
      v173 = v224;
      *(_OWORD *)(v2 + 248) = v223;
      *(_OWORD *)(v2 + 264) = v173;
      *(_BYTE *)(v2 + 280) = v225;
      v174 = v222;
      *(_OWORD *)(v2 + 216) = v221;
      *(_OWORD *)(v2 + 232) = v174;
      *(_BYTE *)(v2 + 284) = 1;
    }
    memcpy((void *)(v2 + 288), v227, 0x691uLL);
    v175 = v228;
    v228 = 0;
    *(_QWORD *)(v2 + 1976) = v175;
    *(_OWORD *)(v2 + 1984) = v229;
    v229 = 0uLL;
    *(_BYTE *)(v2 + 2000) = 1;
LABEL_172:
    v176 = v206;
    if (v206)
    {
      v177 = (unsigned int *)(v206 + 24);
      do
      {
        v178 = __ldaxr(v177);
        v179 = v178 - 1;
      }
      while (__stlxr(v179, v177));
      if (!v179)
      {
        v180 = *(_QWORD *)(v176 + 16);
        *(_QWORD *)(v176 + 16) = 0;
        if (v180)
          MEMORY[0x20BD0ADD4](v180, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v176, 0x1010C40EE34DA14);
      }
    }
    if (v67)
      goto LABEL_180;
    goto LABEL_181;
  }
LABEL_123:
  v136 = 0;
  if (v135 <= 1)
    v137 = 1;
  else
    v137 = v135;
  v138 = v137 - 1;
  while (2)
  {
    if (v135 == v136 || v138 == v136)
      goto LABEL_207;
    v139 = *(_QWORD *)&v67[8 * v136];
    v140 = *(_QWORD *)&v67[8 * v136 + 8] - 2;
    if ((unint64_t)(v140 - v139) <= 1)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_163;
      goto LABEL_162;
    }
    rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v206, &webrtc::kStartCode, 4uLL);
    rtc::CopyOnWriteBuffer::AppendData<unsigned char,(void *)0>((rtc::CopyOnWriteBuffer *)&v206, (char *)__src + v139, v140 - v139);
    v141 = (*((unsigned __int8 *)__src + v139) >> 1) & 0x3F;
    if (v141 > 0x32)
    {
LABEL_128:
      if (v135 - 1 == ++v136)
        goto LABEL_166;
      continue;
    }
    break;
  }
  if (((1 << ((*((_BYTE *)__src + v139) >> 1) & 0x3F)) & 0xBF0000) != 0)
  {
    LODWORD(v218) = 3;
    goto LABEL_128;
  }
  if (v141 == 33)
  {
    v142 = v139 + 2;
    v143 = operator new();
    *(_QWORD *)(v143 + 8) = 0;
    *(_QWORD *)(v143 + 16) = 0;
    *(_QWORD *)v143 = 0;
    if (v139 != -2)
    {
      v192 = v4;
      v144 = v2;
      v145 = (char *)operator new[]();
      v146 = v145;
      v147 = *(_QWORD *)(v143 + 16);
      if (v147)
      {
        memcpy(v145, *(const void **)(v143 + 16), *(_QWORD *)v143);
        *(_QWORD *)(v143 + 16) = v146;
        MEMORY[0x20BD0ADD4](v147, 0x1000C8077774924);
        v146 = *(char **)(v143 + 16);
      }
      else
      {
        *(_QWORD *)(v143 + 16) = v145;
      }
      *(_QWORD *)(v143 + 8) = v142;
      memcpy(&v146[*(_QWORD *)v143], __src, v142);
      *(_QWORD *)v143 = v142;
      v2 = v144;
      v4 = v192;
    }
    webrtc::H264::ParseRbsp((webrtc::H264 *)((char *)__src + v142), v140 - v142, (unint64_t *)&__p);
    if (v209 == __p)
      v152 = 0;
    else
      v152 = (unsigned __int8 *)__p;
    webrtc::H265SpsParser::ParseSpsInternal(v152, v209 - (_BYTE *)__p, v148, v149, v150, v151, v198);
    if (__p)
    {
      v209 = __p;
      operator delete(__p);
    }
    if (v205)
    {
      WORD2(v218) = v203;
      WORD3(v218) = v204;
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      v190 = v190 & 0xFFFFFFFF00000000 | 0x4CA;
      rtc::webrtc_logging_impl::Log("\r\t", v153, v154, v155, v156, v157, v158, v159, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc");
    }
    if (v205)
    {
      if (v201)
      {
        v202 = v201;
        operator delete(v201);
      }
      if (v199)
      {
        v200 = v199;
        operator delete(v199);
      }
    }
    v160 = *(_QWORD *)(v143 + 16);
    *(_QWORD *)(v143 + 16) = 0;
    if (v160)
      MEMORY[0x20BD0ADD4](v160, 0x1000C8077774924);
    MEMORY[0x20BD0ADEC](v143, 0x1010C40A79CA2DELL);
    goto LABEL_128;
  }
  if (((1 << ((*((_BYTE *)__src + v139) >> 1) & 0x3F)) & 0x7000000000000) == 0)
    goto LABEL_128;
  v161 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
  if ((v161 & 1) == 0)
LABEL_162:
    rtc::webrtc_logging_impl::Log("\r\t", v162, v163, v164, v165, v166, v167, v168, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc");
LABEL_163:
  *(_BYTE *)v2 = 0;
  *(_BYTE *)(v2 + 2000) = 0;
  rtc::CopyOnWriteBuffer::~CopyOnWriteBuffer((rtc::CopyOnWriteBuffer *)&v206);
LABEL_180:
  operator delete(v67);
LABEL_181:
  if (!v230)
    goto LABEL_194;
  v181 = v228;
  if (v228)
  {
    v182 = (unsigned int *)(v228 + 24);
    do
    {
      v183 = __ldaxr(v182);
      v184 = v183 - 1;
    }
    while (__stlxr(v184, v182));
    if (!v184)
    {
      v185 = *(_QWORD *)(v181 + 16);
      *(_QWORD *)(v181 + 16) = 0;
      if (v185)
        MEMORY[0x20BD0ADD4](v185, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v181, 0x1010C40EE34DA14);
    }
  }
  if (!v217)
    goto LABEL_194;
  if ((v215 & 1) == 0)
  {
    if ((v213 & 1) == 0)
      goto LABEL_192;
LABEL_203:
    operator delete(v214);
    if ((BYTE8(v211) & 1) == 0)
      goto LABEL_194;
LABEL_193:
    operator delete(v212);
    goto LABEL_194;
  }
  operator delete(v216);
  if ((v213 & 1) != 0)
    goto LABEL_203;
LABEL_192:
  if ((BYTE8(v211) & 1) != 0)
    goto LABEL_193;
LABEL_194:
  v186 = (unsigned int *)(v4 + 24);
  do
  {
    v187 = __ldaxr(v186);
    v73 = --v187 == 0;
  }
  while (__stlxr(v187, v186));
LABEL_196:
  if (v73)
  {
    v188 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = 0;
    if (v188)
      MEMORY[0x20BD0ADD4](v188, 0x1000C8077774924);
    MEMORY[0x20BD0ADEC](v4, 0x1010C40EE34DA14);
  }
}

void webrtc::VideoRtpDepacketizerH265::~VideoRtpDepacketizerH265(webrtc::VideoRtpDepacketizerH265 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

__n128 webrtc::VideoRtpDepacketizerRaw::Parse@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __n128 result;

  bzero((void *)a2, 0x7B8uLL);
  *(_BYTE *)(a2 + 167) = 1;
  *(_DWORD *)(a2 + 172) = 0;
  *(_BYTE *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 206) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 212) = -1;
  *(_BYTE *)(a2 + 284) = 0;
  *(_BYTE *)(a2 + 290) = 0;
  *(_BYTE *)(a2 + 1944) = 0;
  *(_BYTE *)(a2 + 2000) = 1;
  *(_QWORD *)(a2 + 1976) = *(_QWORD *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 1984) = result;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

void webrtc::VideoRtpDepacketizerRaw::~VideoRtpDepacketizerRaw(webrtc::VideoRtpDepacketizerRaw *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

double webrtc::VideoRtpDepacketizerVp8::Parse@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  double result;
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  _BYTE v42[16];
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *__p;
  char v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[30];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  char v58;
  _QWORD v59[211];
  uint64_t v60;
  __int128 v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  if (*a1)
    v5 = (unsigned __int8 *)(*(_QWORD *)(v4 + 16) + a1[1]);
  else
    v5 = 0;
  v6 = a1[2];
  bzero(v42, 0x7B8uLL);
  v8 = 1;
  HIBYTE(v50) = 1;
  DWORD1(v51) = 0;
  v52[8] = 0;
  *(_QWORD *)&v52[22] = 0xFF000000000000;
  *(_QWORD *)&v52[16] = 0;
  v58 = 0;
  BYTE2(v59[0]) = 0;
  LOBYTE(v59[207]) = 0;
  v60 = 0;
  v61 = 0uLL;
  if (v6)
    v9 = v5;
  else
    v9 = 0;
  v62 = 1;
  if (v6)
  {
    DWORD1(v51) = 1;
    v59[1] = 0xFFFFFFFFFF0000;
    LODWORD(v59[3]) = 0;
    v59[206] = 1;
    v59[2] = 0xFFFFFFFFLL;
    v10 = (char)*v9;
    LOBYTE(v59[1]) = (v10 & 0x20) != 0;
    v11 = (*v9 >> 4) & 1;
    LOBYTE(v59[3]) = (*v9 & 0x10) != 0;
    v12 = *v9 & 7;
    HIDWORD(v59[2]) = v12;
    if ((v10 & 0x80000000) == 0)
      goto LABEL_9;
    if (v6 == 1)
      goto LABEL_21;
    v36 = (char)v9[1];
    v37 = (char *)(v9 + 2);
    v38 = v6 - 2;
    if (v36 < 0)
    {
      if (v6 == 2)
        goto LABEL_21;
      v39 = *v37 & 0x7F;
      WORD1(v59[1]) = v39;
      if (*v37 < 0)
      {
        v38 = v6 - 3;
        if (v6 == 3)
          goto LABEL_21;
        WORD1(v59[1]) = v9[3] | (unsigned __int16)(v39 << 8);
        v8 = 4;
        v40 = 3;
      }
      else
      {
        v8 = 3;
        v40 = 2;
      }
      v37 = (char *)&v9[v40 + 1];
      --v38;
      if ((v36 & 0x40) == 0)
        goto LABEL_62;
    }
    else
    {
      v8 = 2;
      if ((v36 & 0x40) == 0)
      {
LABEL_62:
        if ((v36 & 0x30) != 0)
        {
          if (!v38)
            goto LABEL_21;
          if ((v36 & 0x20) != 0)
          {
            BYTE6(v59[1]) = *v37 >> 6;
            HIBYTE(v59[1]) = (*v37 & 0x20) != 0;
          }
          if ((v36 & 0x10) != 0)
            LODWORD(v59[2]) = *v37 & 0x1F;
          ++v8;
        }
LABEL_9:
        if (v11)
          v13 = v12 == 0;
        else
          v13 = 0;
        v14 = v13;
        BYTE13(v50) = v14;
        if ((_DWORD)v6 == v8)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            goto LABEL_19;
          goto LABEL_21;
        }
        if (!v14 || (v22 = (char *)&v9[v8], (*v22 & 1) != 0))
        {
          *(_QWORD *)&v50 = 4;
          if (!v4)
            goto LABEL_39;
        }
        else
        {
          LODWORD(v50) = 3;
          if ((int)(v6 - v8) < 10)
            goto LABEL_21;
          WORD2(v50) = v22[6] | ((v22[7] & 0x3F) << 8);
          WORD3(v50) = v22[8] | ((v22[9] & 0x3F) << 8);
          if (!v4)
          {
LABEL_39:
            v25 = v6 - v8;
            v26 = a1[1] + v8;
            v27 = v60;
            v60 = v4;
            if (v27)
            {
              v28 = (unsigned int *)(v27 + 24);
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                v31 = *(_QWORD *)(v27 + 16);
                *(_QWORD *)(v27 + 16) = 0;
                if (v31)
                  MEMORY[0x20BD0ADD4](v31, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v27, 0x1010C40EE34DA14);
              }
            }
            *(_QWORD *)&v61 = v26;
            *((_QWORD *)&v61 + 1) = v25;
            *(_BYTE *)a2 = 0;
            *(_BYTE *)(a2 + 2000) = 0;
            if (!v62)
              return result;
            std::__optional_move_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v42);
            *(_BYTE *)(a2 + 216) = 0;
            v32 = v51;
            *(_OWORD *)(a2 + 152) = v50;
            *(_OWORD *)(a2 + 168) = v32;
            *(_OWORD *)(a2 + 184) = *(_OWORD *)v52;
            *(_OWORD *)(a2 + 197) = *(_OWORD *)&v52[13];
            *(_BYTE *)(a2 + 284) = 0;
            if (v58)
            {
              v33 = v56;
              *(_OWORD *)(a2 + 248) = v55;
              *(_OWORD *)(a2 + 264) = v33;
              *(_BYTE *)(a2 + 280) = v57;
              v34 = v54;
              *(_OWORD *)(a2 + 216) = v53;
              *(_OWORD *)(a2 + 232) = v34;
              *(_BYTE *)(a2 + 284) = 1;
            }
            memcpy((void *)(a2 + 288), v59, 0x691uLL);
            v35 = v60;
            v60 = 0;
            *(_QWORD *)(a2 + 1976) = v35;
            result = *(double *)&v61;
            *(_OWORD *)(a2 + 1984) = v61;
            v61 = 0uLL;
            *(_BYTE *)(a2 + 2000) = 1;
            if (!v62)
              return result;
            goto LABEL_22;
          }
        }
        v23 = (unsigned int *)(v4 + 24);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        if (!v62)
          __break(1u);
        goto LABEL_39;
      }
    }
    if (!v38)
      goto LABEL_21;
    v41 = *v37++;
    WORD2(v59[1]) = v41;
    ++v8;
    --v38;
    goto LABEL_62;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_19:
    rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_vp8.cc");
LABEL_21:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 2000) = 0;
LABEL_22:
  if (v49)
  {
    if ((v47 & 1) != 0)
    {
      operator delete(__p);
      if ((v45 & 1) == 0)
      {
LABEL_25:
        if ((v43 & 1) == 0)
          return result;
LABEL_29:
        operator delete(v44);
        return result;
      }
    }
    else if ((v45 & 1) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v46);
    if ((v43 & 1) != 0)
      goto LABEL_29;
  }
  return result;
}

void webrtc::VideoRtpDepacketizerVp8::~VideoRtpDepacketizerVp8(webrtc::VideoRtpDepacketizerVp8 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::VideoRtpDepacketizerVp9::Parse(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  __int16 v17;
  int v18;
  int v19;
  unint64_t v20;
  char *v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int64x2_t v44;
  int8x16_t v45;
  int64x2_t v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint8x16_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint64x2_t v59;
  int8x16_t v60;
  uint32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  unint64_t v70;
  unsigned int v71;
  BOOL v72;
  unsigned int v73;
  char v74;
  unint64_t v75;
  int v76;
  int v77;
  __int16 v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  char v89;
  char v90;
  int v91;
  int v92;
  unsigned int v93;
  __int16 v94;
  __int16 v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  unint64_t v102;
  char v103;
  __int16 v104;
  __int16 v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  unint64_t v113;
  int v114;
  unsigned int v115;
  unint64_t v116;
  char v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  char v122;
  int v123;
  BOOL v124;
  char v125;
  char v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  int v130;
  char *v131;
  unsigned int v132;
  unint64_t v133;
  _WORD *v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  unsigned int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;
  unsigned __int8 *v144;
  BOOL v145;
  unsigned int v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unsigned int v150;
  char v151;
  unint64_t v152;
  char *v153;
  unsigned int v154;
  char v155;
  int v156;
  unint64_t v157;
  unsigned int v158;
  unsigned int v159;
  unint64_t v160;
  char v161;
  char v162;
  int v163;
  int v164;
  unint64_t v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  char v170;
  int v171;
  int v172;
  unsigned int *v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unsigned __int8 *v197;
  _BYTE v198[16];
  char v199;
  void *__p;
  char v201;
  void *v202;
  char v203;
  void *v204;
  char v205;
  __int128 v206;
  __int128 v207;
  _BYTE v208[30];
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  char v213;
  char v214;
  _QWORD v215[211];
  uint64_t v216;
  __int128 v217;
  char v218;
  uint64_t v219;

  v219 = *MEMORY[0x24BDAC8D0];
  bzero(v198, 0x7B8uLL);
  HIBYTE(v206) = 1;
  DWORD1(v207) = 0;
  v208[8] = 0;
  *(_QWORD *)&v208[22] = 0xFF000000000000;
  *(_QWORD *)&v208[16] = 0;
  v214 = 0;
  BYTE2(v215[0]) = 0;
  LOBYTE(v215[207]) = 0;
  v216 = 0;
  v217 = 0uLL;
  v218 = 1;
  if (!*a1)
  {
    v8 = a1[2];
    v9 = 0;
    if (((v8 >> 28) & 0x1FFFFFFFFLL) == 0)
      goto LABEL_6;
LABEL_9:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v4, v5, v6, v7, v192);
    goto LABEL_10;
  }
  v8 = a1[2];
  if (v8)
    v9 = (unsigned __int8 *)(*(_QWORD *)(*a1 + 16) + a1[1]);
  else
    v9 = 0;
  if (((v8 >> 28) & 0x1FFFFFFFFLL) != 0)
    goto LABEL_9;
LABEL_6:
  v194 = *a1;
  v195 = a2;
  v193 = a1;
  v196 = v8;
  if (8 * (_DWORD)v8)
  {
    v10 = 8 * v8 - 8;
    v11 = *v9;
    v197 = v9 + 1;
    goto LABEL_11;
  }
LABEL_10:
  v197 = v9;
  v11 = 0;
  v10 = -1;
LABEL_11:
  v12 = (v11 >> 4) & 1;
  WORD3(v206) = 0;
  LOBYTE(v207) = 0;
  v13 = (v11 >> 3) & 1;
  v14 = (v11 >> 2) & 1;
  DWORD1(v207) = 2;
  bzero(&v215[3], 0x658uLL);
  v15 = v11;
  v215[206] = 2;
  *(_DWORD *)((char *)&v215[1] + 6) = 0x7FFFFFFF;
  LOWORD(v16) = -1;
  WORD1(v215[2]) = -1;
  HIDWORD(v215[2]) = 0xFFFF;
  LOBYTE(v215[3]) = -1;
  v215[5] = 1;
  LOBYTE(v215[205]) = 1;
  LOBYTE(v215[1]) = (v11 & 0x40) != 0;
  BYTE1(v215[1]) = (v11 & 0x10) != 0;
  BYTE2(v215[1]) = (v11 & 8) != 0;
  BYTE3(v215[1]) = (v11 & 4) != 0;
  BYTE4(v215[1]) = (v11 & 2) != 0;
  BYTE5(v215[1]) = v11 & 1;
  if ((v11 & 0x80) == 0)
  {
    v17 = 0x7FFF;
    v18 = v10;
    v19 = v15 & 2;
    if ((v15 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_49;
  }
  v22 = v10 - 1;
  if (v10 < 1)
  {
    v25 = 0;
    v23 = v197;
  }
  else
  {
    v23 = v197;
    if ((v22 & 7) != 0)
    {
      v24 = *v197 >> (v22 & 7);
    }
    else
    {
      v23 = v197 + 1;
      LOBYTE(v24) = *v197;
    }
    v25 = v24 & 1;
  }
  if (v25)
    v26 = 15;
  else
    v26 = 7;
  if (v25)
    v17 = 0x7FFF;
  else
    v17 = 127;
  if (v10 <= (int)v26)
  {
    v197 = v23;
    LOWORD(v16) = 0;
    v18 = -1;
    goto LABEL_48;
  }
  if (v22 <= 0)
    v27 = -((1 - v10) & 7);
  else
    v27 = v22 & 7;
  if (v27 < 1)
  {
    v16 = 0;
    LODWORD(v29) = v26;
    v18 = v22 - v26;
    if (v26 < 8)
      goto LABEL_46;
LABEL_36:
    v29 = v29;
    v30 = v29 - 15;
    if (v29 < 0xFuLL)
      v30 = 0;
    if (v30 >= 0x71)
    {
      v32 = ((v30 + 7) >> 3) + 1;
      v33 = vdupq_n_s64(v29);
      v34 = vaddq_s64(v33, (int64x2_t)xmmword_208F05970);
      v35 = vaddq_s64(v33, (int64x2_t)xmmword_208F05980);
      v36 = vaddq_s64(v33, (int64x2_t)xmmword_208F05990);
      v37 = vaddq_s64(v33, (int64x2_t)xmmword_208F059A0);
      v38 = vaddq_s64(v33, (int64x2_t)xmmword_208F059B0);
      v39 = vaddq_s64(v33, (int64x2_t)xmmword_208F059C0);
      v40 = vaddq_s64(v33, (int64x2_t)xmmword_208F059D0);
      v41 = vaddq_s64(v33, (int64x2_t)xmmword_208F059E0);
      v42 = (int8x16_t)v16;
      v43 = 0uLL;
      v44 = vdupq_n_s64(0xFFFFFFF8uLL);
      v45.i64[0] = 0xFFFFFFFFLL;
      v45.i64[1] = 0xFFFFFFFFLL;
      v46 = vdupq_n_s64(0xFFFFFFFFFFFFFF80);
      v29 = v29 - 8 * (v32 & 0x7FFFFFF0);
      v31 = &v23[v32 & 0x7FFFFFF0];
      v47 = v32 & 0x7FFFFFF0;
      v48 = 0uLL;
      v49 = 0uLL;
      v50 = 0uLL;
      v51 = 0uLL;
      v52 = 0uLL;
      v53 = 0uLL;
      do
      {
        v54 = *(uint8x16_t *)v23;
        v23 += 16;
        v55 = vmovl_u8(*(uint8x8_t *)v54.i8);
        v56 = vmovl_high_u8(v54);
        v57 = vmovl_u16(*(uint16x4_t *)v56.i8);
        v58 = vmovl_high_u16(v56);
        v59.i64[0] = v58.u32[2];
        v59.i64[1] = v58.u32[3];
        v60 = (int8x16_t)vshlq_u64(v59, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v34, v44), v45));
        v61 = vmovl_u16(*(uint16x4_t *)v55.i8);
        v59.i64[0] = v58.u32[0];
        v59.i64[1] = v58.u32[1];
        v62 = (int8x16_t)vshlq_u64(v59, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v35, v44), v45));
        v59.i64[0] = v61.u32[0];
        v59.i64[1] = v61.u32[1];
        v63 = (int8x16_t)vshlq_u64(v59, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v41, v44), v45));
        v59.i64[0] = v57.u32[2];
        v59.i64[1] = v57.u32[3];
        v64 = (int8x16_t)vshlq_u64(v59, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v36, v44), v45));
        v65 = vmovl_high_u16(v55);
        v59.i64[0] = v61.u32[2];
        v59.i64[1] = v61.u32[3];
        v66 = (int8x16_t)vshlq_u64(v59, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v40, v44), v45));
        v59.i64[0] = v65.u32[0];
        v59.i64[1] = v65.u32[1];
        v67 = (int8x16_t)vshlq_u64(v59, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v39, v44), v45));
        v59.i64[0] = v57.u32[0];
        v59.i64[1] = v57.u32[1];
        v68 = (int8x16_t)vshlq_u64(v59, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v37, v44), v45));
        v59.i64[0] = v65.u32[2];
        v59.i64[1] = v65.u32[3];
        v49 = vorrq_s8((int8x16_t)vshlq_u64(v59, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v38, v44), v45)), v49);
        v50 = vorrq_s8(v68, v50);
        v48 = vorrq_s8(v67, v48);
        v43 = vorrq_s8(v66, v43);
        v51 = vorrq_s8(v64, v51);
        v42 = vorrq_s8(v63, v42);
        v52 = vorrq_s8(v62, v52);
        v53 = vorrq_s8(v60, v53);
        v40 = vaddq_s64(v40, v46);
        v41 = vaddq_s64(v41, v46);
        v39 = vaddq_s64(v39, v46);
        v38 = vaddq_s64(v38, v46);
        v37 = vaddq_s64(v37, v46);
        v36 = vaddq_s64(v36, v46);
        v35 = vaddq_s64(v35, v46);
        v34 = vaddq_s64(v34, v46);
        v47 -= 16;
      }
      while (v47);
      v69 = vorrq_s8(vorrq_s8(vorrq_s8(v42, v50), vorrq_s8(v48, v52)), vorrq_s8(vorrq_s8(v43, v51), vorrq_s8(v49, v53)));
      v16 = (unint64_t)vorr_s8(*(int8x8_t *)v69.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL));
      if (v32 == (v32 & 0x7FFFFFF0))
        goto LABEL_45;
    }
    else
    {
      v31 = v23;
    }
    v70 = v29;
    do
    {
      LODWORD(v29) = v70 - 8;
      v71 = *v31++;
      v16 |= (unint64_t)v71 << (v70 - 8);
      v72 = v70 > 0xF;
      v70 -= 8;
    }
    while (v72);
LABEL_45:
    v23 = v31;
    goto LABEL_46;
  }
  v28 = *v23++;
  v16 = (unint64_t)(v28 & ~(-1 << v27)) << (v26 - v27);
  LODWORD(v29) = v26 - v27;
  v18 = v22 - v26;
  if (v29 >= 8)
    goto LABEL_36;
LABEL_46:
  v197 = v23;
  if ((_DWORD)v29)
    LODWORD(v16) = v16 | (*v23 >> (8 - v29));
LABEL_48:
  HIWORD(v215[1]) = v16;
  LOWORD(v215[2]) = v17;
  v19 = v15 & 2;
  if ((v15 & 0x20) == 0)
  {
LABEL_13:
    v20 = v196;
    v21 = (char *)v197;
    if ((~v15 & 0x50) != 0)
      goto LABEL_141;
    goto LABEL_63;
  }
LABEL_49:
  v21 = (char *)v197;
  if (v18 <= 2)
  {
    BYTE4(v215[2]) = 0;
LABEL_56:
    BYTE6(v215[2]) = 0;
LABEL_57:
    BYTE5(v215[2]) = 0;
    HIBYTE(v215[2]) = 0;
    if (!v12)
      goto LABEL_58;
    v18 = -2;
    goto LABEL_62;
  }
  v73 = v18 & 7;
  if (v73 >= 4)
  {
    BYTE4(v215[2]) = (*v197 >> (v73 - 3)) & 7;
    goto LABEL_75;
  }
  v74 = 3;
  if ((v18 & 7) == 0)
  {
    LOBYTE(v75) = 0;
LABEL_74:
    BYTE4(v215[2]) = v75 | (*v21 >> (8 - v74));
    if (v18 == 3)
      goto LABEL_56;
    goto LABEL_75;
  }
  v74 = 3 - v73;
  v21 = (char *)(v197 + 1);
  v75 = (unint64_t)(*v197 & ~(-1 << v73)) << (3 - v73);
  if (v73 != 3)
    goto LABEL_74;
  BYTE4(v215[2]) = (unint64_t)(*v197 & ~(-1 << v73)) << (3 - v73);
  if (v18 == 3)
    goto LABEL_56;
LABEL_75:
  v86 = v18 - 4;
  v87 = (v18 - 4) & 7;
  if (!v87)
  {
    v89 = *v21++;
    BYTE6(v215[2]) = v89 & 1;
    if (v86 < 3)
      goto LABEL_57;
    LODWORD(v88) = 0;
    v90 = 3;
LABEL_85:
    LODWORD(v88) = v88 | (*v21 >> (8 - v90));
    goto LABEL_86;
  }
  BYTE6(v215[2]) = (*v21 >> v87) & 1;
  if (v86 < 3)
    goto LABEL_57;
  if (v87 >= 4)
  {
    LODWORD(v88) = (*v21 >> (v87 - 3)) & 7;
    goto LABEL_86;
  }
  v90 = 3 - v87;
  v91 = *v21++;
  v88 = (unint64_t)(v91 & ~(-1 << v87)) << (3 - v87);
  if (v87 != 3)
    goto LABEL_85;
LABEL_86:
  BYTE5(v215[2]) = v88;
  if (v18 == 7)
  {
    v18 = -1;
    HIBYTE(v215[2]) = 0;
    if (v88 > 4u)
    {
LABEL_88:
      v18 = -1;
      goto LABEL_62;
    }
  }
  else
  {
    v18 -= 8;
    if (v73)
    {
      HIBYTE(v215[2]) = (*v21 >> v73) & 1;
      if (v88 > 4u)
        goto LABEL_88;
    }
    else
    {
      v103 = *v21++;
      HIBYTE(v215[2]) = v103 & 1;
      if (v88 > 4u)
        goto LABEL_88;
    }
  }
  if (!v12)
  {
    v77 = v18 - 8;
    if (v18 >= 8)
    {
      if ((v18 & 7) != 0)
      {
        v92 = *v21;
        v93 = *++v21;
        v76 = ((v92 & ~(-1 << (v18 & 7))) << (8 - (v18 & 7))) | (v93 >> (v18 & 7));
      }
      else
      {
        v191 = *v21++;
        LOBYTE(v76) = v191;
      }
LABEL_59:
      v20 = v196;
      WORD1(v215[2]) = v76;
      v18 = v77;
      if ((~v15 & 0x50) != 0)
        goto LABEL_141;
      goto LABEL_63;
    }
LABEL_58:
    LOBYTE(v76) = 0;
    v77 = -1;
    goto LABEL_59;
  }
LABEL_62:
  v20 = v196;
  if ((~v15 & 0x50) != 0)
    goto LABEL_141;
LABEL_63:
  if ((_WORD)v16 == 0xFFFF)
  {
    v18 = -1;
    goto LABEL_141;
  }
  BYTE1(v215[3]) = 0;
  v78 = v17 + 1;
  if (v18 < 7)
  {
    LOBYTE(v79) = 0;
    LOBYTE(v80) = 0;
    v81 = 0;
    v18 = -2;
    goto LABEL_98;
  }
  v82 = v18 & 7;
  if ((v18 & 7) != 0)
  {
    v83 = *v21++;
    v79 = (unint64_t)(v83 & ~(-1 << v82)) << (v82 ^ 7u);
    if (v82 == 7)
    {
      if (v18 == 7)
      {
        v81 = 0;
        v18 = -1;
        LOBYTE(v80) = v79;
        goto LABEL_98;
      }
      v84 = *v21;
      LOBYTE(v80) = v79;
      goto LABEL_96;
    }
    v84 = *v21;
    LODWORD(v80) = v79 | (v84 >> (8 - (v82 ^ 7)));
    LOBYTE(v79) = v79 | (v84 >> (8 - (v82 ^ 7)));
    if (v18 != 7)
    {
LABEL_96:
      LODWORD(v85) = v84 >> v82;
      goto LABEL_97;
    }
LABEL_72:
    v81 = 0;
    v18 = -1;
    goto LABEL_98;
  }
  v85 = *v21;
  v80 = v85 >> 1;
  v79 = v85 >> 1;
  if (v18 == 7)
    goto LABEL_72;
  ++v21;
LABEL_97:
  v18 -= 8;
  v81 = v85 & 1;
LABEL_98:
  BYTE2(v215[3]) = v79;
  v94 = v80;
  if (v80 <= (__int16)v16)
    v95 = 0;
  else
    v95 = v78;
  BYTE1(v215[3]) = 1;
  HIWORD(v215[3]) = v95 + v16 - v94;
  if (!v81)
    goto LABEL_141;
  if (v18 < 7)
  {
    LOBYTE(v96) = 0;
    LOBYTE(v97) = 0;
    v98 = 0;
    v18 = -2;
    goto LABEL_118;
  }
  v99 = v18 & 7;
  if ((v18 & 7) != 0)
  {
    v100 = *v21++;
    v96 = (unint64_t)(v100 & ~(-1 << v99)) << (v99 ^ 7u);
    if (v99 == 7)
    {
      if (v18 == 7)
      {
        v98 = 0;
        v18 = -1;
        LOBYTE(v97) = v96;
        goto LABEL_118;
      }
      v101 = *v21;
      LOBYTE(v97) = v96;
      goto LABEL_116;
    }
    v101 = *v21;
    LODWORD(v97) = v96 | (v101 >> (8 - (v99 ^ 7)));
    LOBYTE(v96) = v96 | (v101 >> (8 - (v99 ^ 7)));
    if (v18 != 7)
    {
LABEL_116:
      LODWORD(v102) = v101 >> v99;
      goto LABEL_117;
    }
LABEL_109:
    v98 = 0;
    v18 = -1;
    goto LABEL_118;
  }
  v102 = *v21;
  v97 = v102 >> 1;
  v96 = v102 >> 1;
  if (v18 == 7)
    goto LABEL_109;
  ++v21;
LABEL_117:
  v18 -= 8;
  v98 = v102 & 1;
LABEL_118:
  BYTE3(v215[3]) = v96;
  v104 = v97;
  if (v97 <= (__int16)v16)
    v105 = 0;
  else
    v105 = v78;
  BYTE1(v215[3]) = 2;
  LOWORD(v215[4]) = v105 + v16 - v104;
  if (!v98)
    goto LABEL_141;
  if (v18 >= 7)
  {
    v110 = v18 & 7;
    if ((v18 & 7) != 0)
    {
      v111 = *v21++;
      v106 = (unint64_t)(v111 & ~(-1 << v110)) << (v110 ^ 7u);
      if (v110 == 7)
      {
        if (v18 == 7)
        {
          v108 = 0;
          v109 = -1;
          LOBYTE(v107) = v106;
          goto LABEL_136;
        }
        v112 = *v21;
        LOBYTE(v107) = v106;
        goto LABEL_134;
      }
      v112 = *v21;
      LODWORD(v107) = v106 | (v112 >> (8 - (v110 ^ 7)));
      LOBYTE(v106) = v106 | (v112 >> (8 - (v110 ^ 7)));
      if (v18 != 7)
      {
LABEL_134:
        LODWORD(v113) = v112 >> v110;
        goto LABEL_135;
      }
    }
    else
    {
      v113 = *v21;
      v107 = v113 >> 1;
      v106 = v113 >> 1;
      if (v18 != 7)
      {
        ++v21;
LABEL_135:
        v109 = v18 - 8;
        v108 = v113 & 1;
        goto LABEL_136;
      }
    }
    v108 = 0;
    v109 = -1;
    goto LABEL_136;
  }
  LOBYTE(v106) = 0;
  LOBYTE(v107) = 0;
  v108 = 0;
  v109 = -2;
LABEL_136:
  BYTE4(v215[3]) = v106;
  if (v107 <= (__int16)v16)
    v78 = 0;
  BYTE1(v215[3]) = 3;
  WORD1(v215[4]) = v78 + v16 - v107;
  if (v108)
    v18 = -1;
  else
    v18 = v109;
LABEL_141:
  v114 = v15 & 0x40;
  if (!v19)
    goto LABEL_234;
  if (v18 <= 2)
  {
    v215[5] = 1;
LABEL_149:
    LOBYTE(v215[7]) = 0;
    v215[12] = 0;
    v18 = -1;
    goto LABEL_234;
  }
  v115 = v18 & 7;
  if (v115 >= 4)
  {
    v116 = (*v21 >> (v115 - 3)) & 7;
    v215[5] = v116 + 1;
    goto LABEL_152;
  }
  v117 = 3;
  if ((v18 & 7) == 0)
  {
    v116 = 0;
LABEL_151:
    v116 |= *v21 >> (8 - v117);
    v215[5] = v116 + 1;
    if (v18 == 3)
      goto LABEL_149;
    goto LABEL_152;
  }
  v117 = 3 - v115;
  v118 = *v21++;
  v116 = (unint64_t)(v118 & ~(-1 << v115)) << (3 - v115);
  if (v115 != 3)
    goto LABEL_151;
  v215[5] = v116 + 1;
  if (v18 == 3)
    goto LABEL_149;
LABEL_152:
  if (((v18 - 4) & 7) != 0)
  {
    v119 = *v21 >> ((v18 - 4) & 7);
    v120 = v119 & 1;
    LOBYTE(v215[7]) = v119 & 1;
    v121 = v18 - 5;
    v122 = (v18 - 5) & 7;
    if (((v18 - 5) & 7) != 0)
      goto LABEL_154;
    goto LABEL_159;
  }
  v125 = *v21++;
  v120 = v125 & 1;
  LOBYTE(v215[7]) = v125 & 1;
  if (v18 != 4)
  {
    LOBYTE(v119) = v120;
    v121 = v18 - 5;
    v122 = (v18 - 5) & 7;
    if (((v18 - 5) & 7) != 0)
    {
LABEL_154:
      v123 = *v21 >> v122;
      v124 = (v123 & 1) == 0;
      if (v121 < 3)
        goto LABEL_155;
LABEL_160:
      v127 = (v18 + 2) >> 3;
      v128 = v18 - 1;
      v18 -= 8;
      v21 += (int)(v127 - (v128 >> 3));
      v215[12] = 0;
      if ((v119 & 1) != 0)
        goto LABEL_170;
LABEL_161:
      if (v124)
        goto LABEL_232;
      if (v18 <= 7)
        goto LABEL_167;
      v129 = v18 & 7;
      v18 -= 8;
      if (v129)
      {
        v130 = *v21;
        v132 = v21[1];
        v131 = v21 + 1;
        v133 = ((unint64_t)(v130 & ~(-1 << v129)) << (8 - v129)) | (v132 >> v129);
      }
      else
      {
        v151 = *v21;
        v131 = v21 + 1;
        LOBYTE(v133) = v151;
      }
      v215[12] = v133;
      if (!(_BYTE)v133)
        goto LABEL_232;
      v152 = 0;
      v153 = (char *)&v215[108] + 5;
      while (1)
      {
        if (v18 <= 2)
        {
          *((_BYTE *)&v215[13] + v152) = 0;
LABEL_198:
          *((_BYTE *)&v215[44] + v152 + 7) = 0;
          goto LABEL_199;
        }
        v154 = v18 & 7;
        if (v154 >= 4)
        {
          *((_BYTE *)&v215[13] + v152) = (*v131 >> (v154 - 3)) & 7;
          goto LABEL_210;
        }
        if ((v18 & 7) != 0)
        {
          v155 = 3 - v154;
          v156 = *v131++;
          v157 = (unint64_t)(v156 & ~(-1 << v154)) << (3 - v154);
          if (v154 == 3)
          {
            *((_BYTE *)&v215[13] + v152) = v157;
            if (v18 == 3)
              goto LABEL_198;
            goto LABEL_210;
          }
        }
        else
        {
          LOBYTE(v157) = 0;
          v155 = 3;
        }
        *((_BYTE *)&v215[13] + v152) = v157 | (*v131 >> (8 - v155));
        if (v18 == 3)
          goto LABEL_198;
LABEL_210:
        v158 = v18 - 4;
        v159 = (v18 - 4) & 7;
        if (v159)
        {
          *((_BYTE *)&v215[44] + v152 + 7) = (*v131 >> v159) & 1;
          if (v158 >= 2)
          {
            if (v159 < 3)
            {
              v163 = *v131++;
              v160 = (unint64_t)(v163 & ~(-1 << v159)) << (2 - v159);
              if (v159 != 2)
              {
                v162 = 7;
LABEL_218:
                LODWORD(v160) = v160 | (*v131 >> v162);
              }
            }
            else
            {
              LODWORD(v160) = (*v131 >> (v159 - 2)) & 3;
            }
            *((_BYTE *)&v215[76] + v152 + 6) = v160;
            if ((v18 & 0xFFFFFFFE) == 6)
            {
              v164 = -1;
            }
            else
            {
              v131 += (int)(((v18 + 1) >> 3) - ((v18 - 1) >> 3));
              v164 = v18 - 8;
            }
            if ((_BYTE)v160)
            {
              v165 = 0;
              do
              {
                v18 = v164 - 8;
                if (v164 < 8)
                {
                  LOBYTE(v166) = 0;
                  v18 = -1;
                }
                else
                {
                  v167 = v164 & 7;
                  if (v167)
                  {
                    v168 = *v131;
                    v169 = *++v131;
                    v166 = ((v168 & ~(-1 << v167)) << (8 - v167)) | (v169 >> v167);
                  }
                  else
                  {
                    v170 = *v131++;
                    LOBYTE(v166) = v170;
                  }
                }
                v153[v165++] = v166;
                v164 = v18;
              }
              while (v165 < *((unsigned __int8 *)&v215[76] + v152 + 6));
            }
            else
            {
              v18 = v164;
            }
            goto LABEL_200;
          }
        }
        else
        {
          v161 = *v131++;
          *((_BYTE *)&v215[44] + v152 + 7) = v161 & 1;
          if (v158 >= 2)
          {
            LODWORD(v160) = 0;
            v162 = 6;
            goto LABEL_218;
          }
        }
LABEL_199:
        *((_BYTE *)&v215[76] + v152 + 6) = 0;
        v18 = -1;
LABEL_200:
        ++v152;
        v153 += 3;
        if (v152 >= v215[12])
        {
          v120 = LOBYTE(v215[7]);
          goto LABEL_232;
        }
      }
    }
LABEL_159:
    v126 = *v21++;
    LOBYTE(v123) = v126;
    v124 = (v126 & 1) == 0;
    if (v121 < 3)
    {
LABEL_155:
      v215[12] = 0;
      if ((v119 & 1) != 0)
      {
        v18 = -1;
LABEL_170:
        v134 = (_WORD *)&v215[7] + 1;
        v135 = v116 + 1;
        while (1)
        {
          if (v18 <= 15)
          {
            LOWORD(v136) = 0;
            *v134 = 0;
LABEL_172:
            v18 = -1;
            goto LABEL_173;
          }
          v137 = v18 & 7;
          if ((v18 & 7) != 0)
          {
            v138 = 16 - v137;
            v139 = *v21++;
            v140 = (unint64_t)(v139 & ~(-1 << v137)) << (16 - v137);
          }
          else
          {
            v140 = 0;
            v138 = 16;
          }
          v141 = v138 - 8;
          v142 = ((unint64_t)*v21 << v141) | v140;
          if (v138 < 0x10)
            break;
          v143 = v138 - 16;
          v142 |= (unint64_t)v21[1] << (v138 - 16);
          v144 = (unsigned __int8 *)&v21[v141 >> 3];
          v21 = (char *)(v144 + 1);
          if (v143)
            goto LABEL_182;
LABEL_183:
          *v134 = v142;
          v145 = __OFSUB__(v18, 32);
          v18 -= 32;
          if (v18 < 0 != v145)
          {
            LOWORD(v136) = 0;
            goto LABEL_172;
          }
          if (v137)
          {
            v146 = 16 - v137;
            v147 = (unint64_t)(*v21 & ~(-1 << v137)) << (16 - v137);
            v21 = (char *)(v144 + 2);
          }
          else
          {
            v147 = 0;
            v146 = 16;
          }
          v148 = v146;
          v149 = v146 - 8;
          v136 = ((unint64_t)*v21 << v149) | v147;
          if (v146 >= 0x10)
          {
            v150 = v146 - 16;
            v136 |= (unint64_t)v21[1] << (v148 - 16);
            v21 += (v149 >> 3) + 1;
            if (!v150)
              goto LABEL_173;
LABEL_193:
            LODWORD(v136) = v136 | (*v21 >> (8 - v150));
            goto LABEL_173;
          }
          v150 = v146 - 8;
          v21 += (v149 >> 3) + 1;
          if (v150)
            goto LABEL_193;
LABEL_173:
          v134[8] = v136;
          ++v134;
          if (!--v135)
            goto LABEL_161;
        }
        LOBYTE(v143) = v138 - 8;
        v144 = (unsigned __int8 *)&v21[v141 >> 3];
        v21 = (char *)(v144 + 1);
        if (!(_DWORD)v141)
          goto LABEL_183;
LABEL_182:
        LODWORD(v142) = v142 | (*v21 >> (8 - v143));
        goto LABEL_183;
      }
      if ((v123 & 1) == 0)
      {
        v18 = -1;
        goto LABEL_232;
      }
LABEL_167:
      v215[12] = 0;
      v18 = -1;
LABEL_232:
      if (v120)
      {
        WORD2(v206) = WORD1(v215[7]);
        WORD3(v206) = WORD1(v215[9]);
      }
      goto LABEL_234;
    }
    goto LABEL_160;
  }
  v215[12] = 0;
  v18 = -1;
  if (v120)
  {
    v120 = 1;
    v124 = 1;
    goto LABEL_170;
  }
LABEL_234:
  if (v114 | HIBYTE(v215[2]))
    v171 = 4;
  else
    v171 = 3;
  LODWORD(v206) = v171;
  BYTE13(v206) = v13;
  BYTE14(v206) = v14;
  if (v18 < 1 || (v172 = v20 - (v18 >> 3), (_DWORD)v20 == v18 >> 3))
  {
    *(_BYTE *)v195 = 0;
    *(_BYTE *)(v195 + 2000) = 0;
    if (!v218)
      return;
LABEL_256:
    v186 = v216;
    if (v216)
    {
      v187 = (unsigned int *)(v216 + 24);
      do
      {
        v188 = __ldaxr(v187);
        v189 = v188 - 1;
      }
      while (__stlxr(v189, v187));
      if (!v189)
      {
        v190 = *(_QWORD *)(v186 + 16);
        *(_QWORD *)(v186 + 16) = 0;
        if (v190)
          MEMORY[0x20BD0ADD4](v190, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v186, 0x1010C40EE34DA14);
      }
    }
    if (!v205)
      return;
    if ((v203 & 1) != 0)
    {
      operator delete(v204);
      if ((v201 & 1) == 0)
      {
LABEL_266:
        if ((v199 & 1) == 0)
          return;
        goto LABEL_267;
      }
    }
    else if ((v201 & 1) == 0)
    {
      goto LABEL_266;
    }
    operator delete(v202);
    if ((v199 & 1) == 0)
      return;
LABEL_267:
    operator delete(__p);
    return;
  }
  if (v194)
  {
    v173 = (unsigned int *)(v194 + 24);
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
  }
  if (!v218)
    __break(1u);
  v175 = v20 - v172;
  v176 = v193[1] + v172;
  v177 = v216;
  v216 = v194;
  if (v177)
  {
    v178 = (unsigned int *)(v177 + 24);
    do
    {
      v179 = __ldaxr(v178);
      v180 = v179 - 1;
    }
    while (__stlxr(v180, v178));
    if (!v180)
    {
      v181 = *(_QWORD *)(v177 + 16);
      *(_QWORD *)(v177 + 16) = 0;
      if (v181)
        MEMORY[0x20BD0ADD4](v181, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v177, 0x1010C40EE34DA14);
    }
  }
  *(_QWORD *)&v217 = v176;
  *((_QWORD *)&v217 + 1) = v175;
  *(_BYTE *)v195 = 0;
  *(_BYTE *)(v195 + 2000) = 0;
  if (v218)
  {
    std::__optional_move_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__optional_move_base[abi:sn180100](v195, (uint64_t)v198);
    *(_BYTE *)(v195 + 216) = 0;
    v182 = v207;
    *(_OWORD *)(v195 + 152) = v206;
    *(_OWORD *)(v195 + 168) = v182;
    *(_OWORD *)(v195 + 184) = *(_OWORD *)v208;
    *(_OWORD *)(v195 + 197) = *(_OWORD *)&v208[13];
    *(_BYTE *)(v195 + 284) = 0;
    if (v214)
    {
      v183 = v212;
      *(_OWORD *)(v195 + 248) = v211;
      *(_OWORD *)(v195 + 264) = v183;
      *(_BYTE *)(v195 + 280) = v213;
      v184 = v210;
      *(_OWORD *)(v195 + 216) = v209;
      *(_OWORD *)(v195 + 232) = v184;
      *(_BYTE *)(v195 + 284) = 1;
    }
    memcpy((void *)(v195 + 288), v215, 0x691uLL);
    v185 = v216;
    v216 = 0;
    *(_QWORD *)(v195 + 1976) = v185;
    *(_OWORD *)(v195 + 1984) = v217;
    v217 = 0uLL;
    *(_BYTE *)(v195 + 2000) = 1;
    if (v218)
      goto LABEL_256;
  }
}

void webrtc::VideoRtpDepacketizerVp9::~VideoRtpDepacketizerVp9(webrtc::VideoRtpDepacketizerVp9 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::VideoRtpReceiver::VideoRtpReceiver(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  void **v7;
  char *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void **i;
  __int128 v15;
  void **v16;
  __int128 v17;
  void *__p;
  char *v19;

  v7 = *(void ***)a4;
  v16 = *(void ***)a4;
  v15 = *(_OWORD *)(a4 + 8);
  v17 = v15;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  webrtc::RtpReceiverInternal::CreateStreamsFromIds((uint64_t)&v16, &__p);
  webrtc::VideoRtpReceiver::VideoRtpReceiver(a1, a2, a3, (uint64_t)&__p);
  v8 = (char *)__p;
  if (__p)
  {
    v9 = v19;
    v10 = __p;
    if (v19 != __p)
    {
      do
      {
        v12 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        v11 = v12;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      while (v9 != v8);
      v10 = __p;
    }
    v19 = v8;
    operator delete(v10);
  }
  if (v7)
  {
    for (i = (void **)v15; i != v7; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v7);
  }
  return a1;
}

rtc::Thread *webrtc::VideoRtpReceiver::VideoRtpReceiver(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  rtc::Thread *result;
  rtc::Thread *v16;
  size_t v17;
  uint64_t (***v18)(_QWORD);
  void *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;

  v5 = (char *)a3;
  *(_QWORD *)a1 = &unk_24C0C4238;
  *(_QWORD *)(a1 + 8) = &unk_24C0C4338;
  *(_QWORD *)(a1 + 16) = &off_24C0C4360;
  v8 = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1;
  *(_QWORD *)(a1 + 32) = a2;
  v9 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) = 0;
  v11 = operator new();
  v12 = webrtc::VideoRtpTrackSource::VideoRtpTrackSource(v11, v8);
  *(_QWORD *)v12 = off_24C0C4390;
  *(_QWORD *)(v12 + 8) = &unk_24C0C4440;
  *(_QWORD *)(v12 + 16) = &unk_24C0C4470;
  v13 = (unsigned int *)(v12 + 376);
  *(_DWORD *)(v12 + 376) = 0;
  *(_QWORD *)(a1 + 80) = v12;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  result = (rtc::Thread *)rtc::Thread::Current((rtc::Thread *)v12);
  v16 = result;
  if (v5[23] < 0)
  {
    v17 = *((_QWORD *)v5 + 1);
    if ((v17 & 0x8000000000000000) != 0 || (v5 = *(char **)v5, v17) && !v5)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v17 = v5[23];
  }
  v18 = *(uint64_t (****)(_QWORD))(a1 + 80);
  if (v18)
    result = (rtc::Thread *)(**v18)(*(_QWORD *)(a1 + 80));
  v19 = rtc::Thread::Current(result);
  v20 = operator new();
  *(_QWORD *)(v20 + 32) = a2;
  *(_QWORD *)(v20 + 40) = v18;
  *(_QWORD *)v20 = &unk_24C0C51A0;
  *(_QWORD *)(v20 + 8) = &unk_24C0C5250;
  *(_QWORD *)(v20 + 16) = &unk_24C0C5280;
  *(_QWORD *)(v20 + 24) = v19;
  *(_DWORD *)(v20 + 48) = 0;
  v21 = (unsigned int *)(v20 + 48);
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v23 = operator new();
  v31 = v20;
  webrtc::VideoTrack::VideoTrack(v23, v5, v17, &v31, a2);
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  *(_QWORD *)v23 = &unk_24C0C53C8;
  *(_QWORD *)(v23 + 8) = &unk_24C0C5470;
  *(_QWORD *)(v23 + 16) = &unk_24C0C54A0;
  *(_QWORD *)(v23 + 88) = &unk_24C0C54D8;
  *(_QWORD *)(v23 + 120) = &unk_24C0C5510;
  *(_DWORD *)(v23 + 152) = 0;
  v24 = (unsigned int *)(v23 + 152);
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = operator new();
  *(_QWORD *)(v26 + 32) = a2;
  *(_QWORD *)(v26 + 40) = v23;
  *(_QWORD *)v26 = off_24C0C44A8;
  *(_QWORD *)(v26 + 8) = &unk_24C0C4548;
  *(_QWORD *)(v26 + 16) = &unk_24C0C4578;
  *(_QWORD *)(v26 + 24) = v16;
  *(_QWORD *)(a1 + 88) = v26;
  *(_DWORD *)(v26 + 48) = 0;
  v27 = (unsigned int *)(v26 + 48);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  *(_BYTE *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  do
  {
    v29 = __ldaxr((unsigned int *)&webrtc::RtpReceiverInternal::GenerateUniqueId(void)::g_unique_id);
    v30 = v29 + 1;
  }
  while (__stlxr(v30, (unsigned int *)&webrtc::RtpReceiverInternal::GenerateUniqueId(void)::g_unique_id));
  *(_DWORD *)(a1 + 132) = v30;
  *(_BYTE *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, a4);
  return (rtc::Thread *)a1;
}

void webrtc::VideoRtpReceiver::~VideoRtpReceiver(webrtc::VideoRtpReceiver *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &unk_24C0C4238;
  *((_QWORD *)this + 1) = &unk_24C0C4338;
  v2 = *((_QWORD *)this + 19);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 18);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 17);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 12);
  if (v5)
  {
    v6 = *((_QWORD *)this + 13);
    v7 = (void *)*((_QWORD *)this + 12);
    if (v6 != v5)
    {
      do
      {
        v9 = *(_QWORD *)(v6 - 8);
        v6 -= 8;
        v8 = v9;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v5;
    operator delete(v7);
  }
  v10 = *((_QWORD *)this + 11);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 10);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
}

__n128 webrtc::VideoRtpReceiver::stream_ids@<Q0>(webrtc::VideoRtpReceiver *this@<X0>, void ***a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  size_t v8;
  void **v9;
  void **v10;
  unint64_t v11;
  __n128 result;
  __n128 v13;
  void *v14;

  v4 = *((_QWORD *)this + 12);
  v3 = *((_QWORD *)this + 13);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = v3 - v4;
  if (v5)
  {
    if ((unint64_t)v5 < 0x5555555555555551)
    {
      v7 = v5 >> 3;
      v8 = 3 * (v5 >> 3);
      v9 = (void **)operator new(v8 * 8);
      *a2 = v9;
      v10 = &v9[v8];
      a2[2] = &v9[v8];
      bzero(v9, 24 * ((v8 * 8 - 24) / 0x18) + 24);
      v11 = 0;
      a2[1] = v10;
      while (1)
      {
        (*(void (**)(__n128 *__return_ptr))(**(_QWORD **)(v4 + 8 * v11) + 32))(&v13);
        if (v7 == v11)
          break;
        if (*((char *)v9 + 23) < 0)
          operator delete(*v9);
        result = v13;
        *(__n128 *)v9 = v13;
        v9[2] = v14;
        ++v11;
        v4 = *((_QWORD *)this + 12);
        v9 += 3;
        if (v11 >= (*((_QWORD *)this + 13) - v4) >> 3)
          return result;
      }
      __break(1u);
    }
    abort();
  }
  return result;
}

uint64_t (***webrtc::VideoRtpReceiver::dtls_transport@<X0>(webrtc::VideoRtpReceiver *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 18);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t webrtc::VideoRtpReceiver::streams@<X0>(webrtc::VideoRtpReceiver *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 12);
  v3 = *((_QWORD *)this + 13);
  result = v3 - v2;
  if (v3 != v2)
  {
    if (result < 0)
      abort();
    v6 = result >> 3;
    v7 = (char *)operator new(result);
    v8 = 0;
    *a2 = v7;
    a2[2] = &v7[8 * v6];
    do
    {
      result = *(_QWORD *)(v2 + v8);
      *(_QWORD *)&v7[v8] = result;
      if (result)
        result = (**(uint64_t (***)(uint64_t))result)(result);
      v8 += 8;
    }
    while (v2 + v8 != v3);
    a2[1] = &v7[v8];
  }
  return result;
}

_QWORD *webrtc::VideoRtpReceiver::GetParameters@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  if (this[8])
  {
    v2 = this;
    v3 = (*(uint64_t (**)(_QWORD *))(*this + 200))(this);
    if ((v3 & 0xFF00000000) != 0)
      return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v2[8] + 152))(v2[8], v3);
    else
      return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v2[8] + 168))(v2[8]);
  }
  else
  {
    *(_BYTE *)(a2 + 124) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_WORD *)(a2 + 152) = 256;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 105) = 0u;
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 164) = 0;
  }
  return this;
}

uint64_t webrtc::VideoRtpReceiver::SetFrameDecryptor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v3;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v5 = *(_QWORD *)(a1 + 64);
  if (v5 && *(_BYTE *)(a1 + 76))
  {
    v6 = *(unsigned int *)(a1 + 72);
    v7 = *(void (****)(_QWORD))(a1 + 136);
    v8 = v7;
    if (v7)
      (**v7)(v7);
    (*(void (**)(uint64_t, uint64_t, void (****)(_QWORD)))(*(_QWORD *)v5 + 112))(v5, v6, &v8);
    result = (uint64_t)v8;
    if (v8)
      return ((uint64_t (*)(_QWORD))(*v8)[1])(v8);
  }
  return result;
}

uint64_t (***webrtc::VideoRtpReceiver::GetFrameDecryptor@<X0>(webrtc::VideoRtpReceiver *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 17);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t webrtc::VideoRtpReceiver::SetFrameTransformer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v3;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    if (*(_BYTE *)(a1 + 76))
    {
      v6 = *(unsigned int *)(a1 + 72);
      v7 = *(void (****)(_QWORD))(a1 + 152);
      v8 = v7;
      if (!v7)
        goto LABEL_7;
    }
    else
    {
      v6 = 0;
      v7 = *(void (****)(_QWORD))(a1 + 152);
      v8 = v7;
      if (!v7)
      {
LABEL_7:
        (*(void (**)(uint64_t, uint64_t, void (****)(_QWORD)))(*(_QWORD *)v5 + 120))(v5, v6, &v8);
        result = (uint64_t)v8;
        if (v8)
          return ((uint64_t (*)(_QWORD))(*v8)[1])(v8);
        return result;
      }
    }
    (**v7)(v7);
    goto LABEL_7;
  }
  return result;
}

uint64_t `non-virtual thunk to'webrtc::VideoRtpReceiver::SetFrameTransformer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v3;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    if (*(_BYTE *)(a1 + 68))
    {
      v6 = *(unsigned int *)(a1 + 64);
      v7 = *(void (****)(_QWORD))(a1 + 144);
      v8 = v7;
      if (!v7)
        goto LABEL_7;
    }
    else
    {
      v6 = 0;
      v7 = *(void (****)(_QWORD))(a1 + 144);
      v8 = v7;
      if (!v7)
      {
LABEL_7:
        (*(void (**)(uint64_t, uint64_t, void (****)(_QWORD)))(*(_QWORD *)v5 + 120))(v5, v6, &v8);
        result = (uint64_t)v8;
        if (v8)
          return ((uint64_t (*)(_QWORD))(*v8)[1])(v8);
        return result;
      }
    }
    (**v7)(v7);
    goto LABEL_7;
  }
  return result;
}

uint64_t webrtc::VideoRtpReceiver::GenerateKeyFrame(webrtc::VideoRtpReceiver *this)
{
  uint64_t v1;
  char v3;
  webrtc::VideoRtpReceiver *v4;

  v1 = *((_QWORD *)this + 4);
  v4 = this;
  return (*(uint64_t (**)(uint64_t, webrtc::VideoRtpReceiver **, uint64_t (*)(uint64_t *), char *))(*(_QWORD *)v1 + 96))(v1, &v4, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::VideoRtpReceiver::GenerateKeyFrame(void)::$_1>, &v3);
}

_QWORD *webrtc::VideoRtpReceiver::Stop(webrtc::VideoRtpReceiver *this)
{
  uint64_t v2;
  _QWORD *result;
  int v4;

  v2 = *((_QWORD *)this + 10);
  if (*(_DWORD *)(v2 + 48) != 2)
  {
    *(_DWORD *)(v2 + 48) = 2;
    webrtc::Notifier<webrtc::VideoTrackInterface>::FireOnChanged((_QWORD *)v2);
  }
  result = *(_QWORD **)(*((_QWORD *)this + 11) + 40);
  v4 = *((_DWORD *)result + 20);
  *((_DWORD *)result + 20) = 1;
  if (v4 != 1)
    return webrtc::Notifier<webrtc::VideoTrackInterface>::FireOnChanged(result);
  return result;
}

uint64_t webrtc::VideoRtpReceiver::RestartMediaChannel_w(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (***v13)(_QWORD);
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (***v20)(_QWORD);
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  result = *(_QWORD *)(a1 + 64);
  if (!result)
    return result;
  v5 = a2;
  v6 = BYTE4(a2);
  v7 = *(unsigned __int8 *)(a1 + 177);
  if (a3)
  {
    if (BYTE4(a2) && *(_BYTE *)(a1 + 76))
    {
      v8 = *(unsigned int *)(a1 + 72);
      if ((_DWORD)v8 == v5)
        return result;
    }
    else
    {
      if ((BYTE4(a2) != 0) == (*(_BYTE *)(a1 + 76) != 0))
        return result;
      if (!*(_BYTE *)(a1 + 76))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)result + 184))(result, 0);
        result = *(_QWORD *)(a1 + 64);
        if (!v7)
          goto LABEL_18;
        goto LABEL_11;
      }
      v8 = *(unsigned int *)(a1 + 72);
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 176))(result, v8, 0);
    result = *(_QWORD *)(a1 + 64);
    if (!v7)
      goto LABEL_18;
LABEL_11:
    if (result)
    {
      if (*(_BYTE *)(a1 + 76))
        v9 = *(unsigned int *)(a1 + 72);
      else
        v9 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 216))(result, v9);
      result = *(_QWORD *)(a1 + 64);
    }
  }
LABEL_18:
  *(_DWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 76) = v6;
  v10 = *(_QWORD *)result;
  if (v6)
  {
    (*(void (**)(void))(v10 + 176))();
    if (!v7)
      goto LABEL_33;
  }
  else
  {
    (*(void (**)(void))(v10 + 184))();
    if (!v7)
      goto LABEL_33;
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (!v11)
    goto LABEL_33;
  if (!*(_BYTE *)(a1 + 76))
  {
    v12 = 0;
    v13 = *(void (****)(_QWORD))(a1 + 80);
    if (!v13)
      goto LABEL_26;
    goto LABEL_25;
  }
  v12 = *(unsigned int *)(a1 + 72);
  v13 = *(void (****)(_QWORD))(a1 + 80);
  if (v13)
LABEL_25:
    (**v13)(v13);
LABEL_26:
  v14 = operator new(0x10uLL);
  *v14 = &off_24C0C46B0;
  v14[1] = v13;
  v26 = v14;
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v11 + 208))(v11, v12, v25);
  v15 = v26;
  if (v26 == v25)
  {
    v16 = 4;
    v15 = v25;
    goto LABEL_32;
  }
  if (v26)
  {
    v16 = 5;
LABEL_32:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
LABEL_33:
  result = *(_QWORD *)(a1 + 152);
  if (result)
  {
    v17 = *(_QWORD *)(a1 + 64);
    if (!v17)
      return result;
    if (*(_BYTE *)(a1 + 76))
      v18 = *(unsigned int *)(a1 + 72);
    else
      v18 = 0;
    v24 = *(_QWORD *)(a1 + 152);
    (**(void (***)(uint64_t))result)(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v17 + 120))(v17, v18, &v24);
    result = v24;
    if (v24)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  v19 = *(_QWORD *)(a1 + 64);
  if (v19 && *(_BYTE *)(a1 + 76))
  {
    v20 = *(void (****)(_QWORD))(a1 + 136);
    if (v20)
    {
      v21 = *(unsigned int *)(a1 + 72);
      v23 = *(_QWORD *)(a1 + 136);
      (**v20)(v20);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v19 + 112))(v19, v21, &v23);
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
    if (*(_BYTE *)(a1 + 76))
    {
      if (*(_BYTE *)(a1 + 168))
        v22 = *(double *)(a1 + 160) * 1000.0;
      else
        v22 = 0.0;
      __asm { BR              X11 }
    }
    __break(1u);
  }
  return result;
}

_QWORD *webrtc::VideoRtpReceiver::SetupMediaChannel(webrtc::VideoRtpReceiver *this, unsigned int a2)
{
  uint64_t v3;
  _QWORD *result;
  char v5;
  _QWORD v6[3];
  int v7;
  uint64_t v8;

  v8 = a2 | 0x100000000;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
  v3 = *((_QWORD *)this + 4);
  v6[0] = this;
  v6[1] = &v8;
  v6[2] = &v7;
  (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v3 + 96))(v3, v6, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::VideoRtpReceiver::RestartMediaChannel(std::optional<unsigned int>)::$_1>, &v5);
  result = (_QWORD *)*((_QWORD *)this + 10);
  if (*((_DWORD *)result + 12) != 1)
  {
    *((_DWORD *)result + 12) = 1;
    return webrtc::Notifier<webrtc::VideoTrackInterface>::FireOnChanged(result);
  }
  return result;
}

_QWORD *webrtc::VideoRtpReceiver::SetupUnsignaledMediaChannel(webrtc::VideoRtpReceiver *this)
{
  uint64_t v2;
  _QWORD *result;
  char v4;
  _QWORD v5[3];
  int v6;
  uint64_t v7;

  v7 = 0;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
  v2 = *((_QWORD *)this + 4);
  v5[0] = this;
  v5[1] = &v7;
  v5[2] = &v6;
  (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v2 + 96))(v2, v5, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::VideoRtpReceiver::RestartMediaChannel(std::optional<unsigned int>)::$_1>, &v4);
  result = (_QWORD *)*((_QWORD *)this + 10);
  if (*((_DWORD *)result + 12) != 1)
  {
    *((_DWORD *)result + 12) = 1;
    return webrtc::Notifier<webrtc::VideoTrackInterface>::FireOnChanged(result);
  }
  return result;
}

uint64_t webrtc::VideoRtpReceiver::ssrc(webrtc::VideoRtpReceiver *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 76))
    return *((_QWORD *)this + 9);
  v2 = *((_QWORD *)this + 8);
  if (!v2)
    return *((_QWORD *)this + 9);
  else
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 80))(*((_QWORD *)this + 8));
}

void webrtc::VideoRtpReceiver::set_stream_ids(uint64_t a1, uint64_t a2)
{
  void **v3;
  char *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void **i;
  __int128 v10;
  void **v11;
  __int128 v12;
  void *__p;
  char *v14;

  v3 = *(void ***)a2;
  v11 = *(void ***)a2;
  v10 = *(_OWORD *)(a2 + 8);
  v12 = v10;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  webrtc::RtpReceiverInternal::CreateStreamsFromIds((uint64_t)&v11, &__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 224))(a1, &__p);
  v4 = (char *)__p;
  if (__p)
  {
    v5 = v14;
    v6 = __p;
    if (v14 != __p)
    {
      do
      {
        v8 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        v7 = v8;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = __p;
    }
    v14 = v4;
    operator delete(v6);
  }
  if (v3)
  {
    for (i = (void **)v10; i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

uint64_t webrtc::VideoRtpReceiver::set_transport(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t **webrtc::VideoRtpReceiver::SetStreams(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  size_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  uint64_t v13;
  void **p_s1;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  void (***v23)(_QWORD);
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  size_t v29;
  uint64_t v30;
  int v31;
  void **v32;
  uint64_t v33;
  void **v34;
  int v35;
  int v36;
  int v37;
  int v38;
  char v39;
  BOOL v40;
  uint64_t v41;
  void (***v42)(_QWORD);
  uint64_t **result;
  uint64_t **v44;
  void (***v45)(_QWORD);
  void (***v46)(_QWORD);
  void *__p;
  uint64_t v48;
  unsigned __int8 v49;
  void *__s1;
  size_t __n;
  unsigned __int8 v52;

  v4 = (uint64_t *)a1[12];
  v44 = (uint64_t **)(a1 + 12);
  v5 = (uint64_t *)a1[13];
  if (v4 != v5)
  {
    v6 = *a2;
    v7 = a2[1];
    if (*a2 != v7)
      goto LABEL_6;
    while (1)
    {
LABEL_35:
      v22 = *v4;
      v23 = (void (***)(_QWORD))a1[11];
      v46 = v23;
      if (v23)
        (**v23)(v23);
      (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v22 + 96))(v22, &v46);
      if (v46)
        (*v46)[1](v46);
LABEL_4:
      if (++v4 == v5)
        break;
      v6 = *a2;
      v7 = a2[1];
      if (*a2 != v7)
      {
        while (1)
        {
LABEL_6:
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*v4 + 32))(&__s1);
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*v6 + 32))(&__p);
          v8 = v52;
          if ((v52 & 0x80u) == 0)
            v9 = v52;
          else
            v9 = __n;
          v10 = v49;
          v11 = (char)v49;
          if ((v49 & 0x80u) != 0)
            v10 = v48;
          if (v9 != v10)
          {
            v21 = 0;
            if (((char)v49 & 0x80000000) == 0)
              goto LABEL_28;
            goto LABEL_32;
          }
          v12 = (v49 & 0x80u) == 0 ? &__p : (void **)__p;
          if ((char)v52 < 0)
            break;
          if (v52)
          {
            v13 = v52 - 1;
            p_s1 = &__s1;
            do
            {
              v16 = *(unsigned __int8 *)p_s1;
              p_s1 = (void **)((char *)p_s1 + 1);
              v15 = v16;
              v18 = *(unsigned __int8 *)v12;
              v12 = (void **)((char *)v12 + 1);
              v17 = v18;
              v19 = v13-- != 0;
              v20 = v19;
              v21 = v15 == v17;
            }
            while (v15 == v17 && (v20 & 1) != 0);
LABEL_27:
            if ((v11 & 0x80000000) == 0)
              goto LABEL_28;
            goto LABEL_32;
          }
          v21 = 1;
          if (((char)v49 & 0x80000000) == 0)
          {
LABEL_28:
            if ((v8 & 0x80) != 0)
              goto LABEL_33;
            goto LABEL_29;
          }
LABEL_32:
          operator delete(__p);
          if ((v52 & 0x80) != 0)
          {
LABEL_33:
            operator delete(__s1);
            if (v21)
              goto LABEL_4;
            goto LABEL_34;
          }
LABEL_29:
          if (v21)
            goto LABEL_4;
LABEL_34:
          if (++v6 == v7)
            goto LABEL_35;
        }
        v21 = memcmp(__s1, v12, __n) == 0;
        goto LABEL_27;
      }
    }
  }
  v24 = *a2;
  v25 = a2[1];
  if (*a2 != v25)
  {
    v26 = a1[12];
    v27 = a1[13];
    if (v26 != v27)
      goto LABEL_44;
    while (1)
    {
LABEL_73:
      v41 = *v24;
      v42 = (void (***)(_QWORD))a1[11];
      v45 = v42;
      if (v42)
        (**v42)(v42);
      (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v41 + 80))(v41, &v45);
      if (v45)
        (*v45)[1](v45);
LABEL_42:
      if (++v24 == v25)
        break;
      v26 = a1[12];
      v27 = a1[13];
      if (v26 != v27)
      {
        while (1)
        {
LABEL_44:
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*v24 + 32))(&__s1);
          (*(void (**)(void **__return_ptr))(**(_QWORD **)v26 + 32))(&__p);
          v28 = v52;
          if ((v52 & 0x80u) == 0)
            v29 = v52;
          else
            v29 = __n;
          v30 = v49;
          v31 = (char)v49;
          if ((v49 & 0x80u) != 0)
            v30 = v48;
          if (v29 != v30)
          {
            v40 = 0;
            if (((char)v49 & 0x80000000) == 0)
              goto LABEL_66;
            goto LABEL_70;
          }
          v32 = (v49 & 0x80u) == 0 ? &__p : (void **)__p;
          if ((char)v52 < 0)
            break;
          if (v52)
          {
            v33 = v52 - 1;
            v34 = &__s1;
            do
            {
              v36 = *(unsigned __int8 *)v34;
              v34 = (void **)((char *)v34 + 1);
              v35 = v36;
              v38 = *(unsigned __int8 *)v32;
              v32 = (void **)((char *)v32 + 1);
              v37 = v38;
              v19 = v33-- != 0;
              v39 = v19;
              v40 = v35 == v37;
            }
            while (v35 == v37 && (v39 & 1) != 0);
LABEL_65:
            if ((v31 & 0x80000000) == 0)
              goto LABEL_66;
            goto LABEL_70;
          }
          v40 = 1;
          if (((char)v49 & 0x80000000) == 0)
          {
LABEL_66:
            if ((v28 & 0x80) != 0)
              goto LABEL_71;
            goto LABEL_67;
          }
LABEL_70:
          operator delete(__p);
          if ((v52 & 0x80) != 0)
          {
LABEL_71:
            operator delete(__s1);
            if (v40)
              goto LABEL_42;
            goto LABEL_72;
          }
LABEL_67:
          if (v40)
            goto LABEL_42;
LABEL_72:
          v26 += 8;
          if (v26 == v27)
            goto LABEL_73;
        }
        v40 = memcmp(__s1, v32, __n) == 0;
        goto LABEL_65;
      }
    }
  }
  result = v44;
  if (v44 != a2)
    return (uint64_t **)std::vector<webrtc::scoped_refptr<webrtc::MediaStreamInterface>>::__assign_with_size[abi:sn180100]<webrtc::scoped_refptr<webrtc::MediaStreamInterface>*,webrtc::scoped_refptr<webrtc::MediaStreamInterface>*>(v44, *a2, a2[1], a2[1] - *a2);
  return result;
}

uint64_t webrtc::VideoRtpReceiver::SetObserver(uint64_t result, uint64_t (***a2)(_QWORD, uint64_t))
{
  uint64_t v3;

  *(_QWORD *)(result + 120) = a2;
  if (a2)
  {
    if (*(_BYTE *)(result + 128))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
      return (**a2)(a2, v3);
    }
  }
  return result;
}

uint64_t webrtc::VideoRtpReceiver::SetJitterBufferMinimumDelay(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  double v5;

  *(double *)(a1 + 160) = *(double *)&a2;
  *(_BYTE *)(a1 + 168) = a3;
  result = *(_QWORD *)(a1 + 64);
  if (result && *(_BYTE *)(a1 + 76))
  {
    v5 = *(double *)&a2 * 1000.0;
    if (!a3)
      v5 = 0.0;
    __asm { BR              X11 }
  }
  return result;
}

uint64_t webrtc::VideoRtpReceiver::SetMediaChannel_w(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (***v10)(_QWORD);
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  result = *(_QWORD *)(a1 + 64);
  if (result == a2)
    return result;
  if (!a2)
  {
    if (!*(_BYTE *)(a1 + 76))
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 184))(result, 0);
      v5 = *(unsigned __int8 *)(a1 + 177);
      if (!*(_BYTE *)(a1 + 177))
        goto LABEL_11;
      goto LABEL_6;
    }
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)result + 176))(result, *(unsigned int *)(a1 + 72), 0);
  }
  v5 = *(unsigned __int8 *)(a1 + 177);
  if (!*(_BYTE *)(a1 + 177))
    goto LABEL_11;
LABEL_6:
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    if (*(_BYTE *)(a1 + 76))
      v6 = *(unsigned int *)(a1 + 72);
    else
      v6 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 216))(result, v6);
  }
LABEL_11:
  if (!a2)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 80) + 368) = 0;
    return result;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)(a1 + 64) = result;
  if (!result)
    return result;
  if (*(_BYTE *)(a1 + 176))
  {
    if (*(_BYTE *)(a1 + 76))
      v7 = *(unsigned int *)(a1 + 72);
    else
      v7 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 192))(result, v7);
    *(_BYTE *)(a1 + 176) = 0;
  }
  if (!v5)
    goto LABEL_33;
  v8 = *(_QWORD *)(a1 + 64);
  if (!v8)
    goto LABEL_33;
  if (*(_BYTE *)(a1 + 76))
  {
    v9 = *(unsigned int *)(a1 + 72);
    v10 = *(void (****)(_QWORD))(a1 + 80);
    if (!v10)
      goto LABEL_26;
    goto LABEL_25;
  }
  v9 = 0;
  v10 = *(void (****)(_QWORD))(a1 + 80);
  if (v10)
LABEL_25:
    (**v10)(v10);
LABEL_26:
  v11 = operator new(0x10uLL);
  *v11 = &off_24C0C46B0;
  v11[1] = v10;
  v18 = v11;
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 208))(v8, v9, v17);
  v12 = v18;
  if (v18 == v17)
  {
    v13 = 4;
    v12 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_33;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_33:
  result = *(_QWORD *)(a1 + 152);
  if (result)
  {
    v14 = *(_QWORD *)(a1 + 64);
    if (*(_BYTE *)(a1 + 76))
      v15 = *(unsigned int *)(a1 + 72);
    else
      v15 = 0;
    v16 = result;
    (**(void (***)(uint64_t))result)(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v14 + 120))(v14, v15, &v16);
    result = v16;
    if (v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return result;
}

_QWORD *webrtc::VideoRtpReceiver::NotifyFirstPacketReceived(_QWORD *this)
{
  _QWORD *v1;
  uint64_t (***v2)(_QWORD, uint64_t);
  uint64_t v3;

  v1 = this;
  v2 = (uint64_t (***)(_QWORD, uint64_t))this[15];
  if (v2)
  {
    v3 = (*(uint64_t (**)(_QWORD *))(*this + 64))(this);
    this = (_QWORD *)(**v2)(v2, v3);
  }
  *((_BYTE *)v1 + 128) = 1;
  return this;
}

uint64_t webrtc::VideoRtpReceiver::GetSources@<X0>(webrtc::VideoRtpReceiver *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v4 = (*(uint64_t (**)(webrtc::VideoRtpReceiver *))(*(_QWORD *)this + 200))(this);
  result = *((_QWORD *)this + 8);
  if (result)
    v6 = (v4 & 0xFF00000000) == 0;
  else
    v6 = 1;
  if (!v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void webrtc::VideoRtpReceiver::SourceCallback::~SourceCallback(webrtc::VideoRtpReceiver::SourceCallback *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::VideoRtpReceiver::SourceCallback::OnGenerateKeyFrame(webrtc::VideoRtpReceiver::SourceCallback *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 1);
  v2 = *(_QWORD *)(v1 + 64);
  if (v2)
  {
    if (*(_BYTE *)(v1 + 76))
      v3 = *(unsigned int *)(v1 + 72);
    else
      v3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 192))(v2, v3);
    *(_BYTE *)(v1 + 176) = 1;
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/video_rtp_receiver.cc");
  }
}

_QWORD *webrtc::VideoRtpReceiver::SourceCallback::OnEncodedSinkEnabled(_QWORD *this, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  _QWORD *v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v2 = a2;
  v11 = *MEMORY[0x24BDAC8D0];
  v3 = this[1];
  v4 = *(_QWORD *)(v3 + 64);
  if (!v4)
    goto LABEL_13;
  if (!*(_BYTE *)(v3 + 76))
  {
    v5 = 0;
    if (a2)
      goto LABEL_4;
LABEL_10:
    this = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v4 + 216))(*(_QWORD *)(v3 + 64), v5);
    goto LABEL_13;
  }
  v5 = *(unsigned int *)(v3 + 72);
  if (!a2)
    goto LABEL_10;
LABEL_4:
  v6 = *(void (****)(_QWORD))(v3 + 80);
  if (v6)
    (**v6)(*(_QWORD *)(v3 + 80));
  v7 = operator new(0x10uLL);
  *v7 = &off_24C0C46B0;
  v7[1] = v6;
  v10 = v7;
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v4 + 208))(v4, v5, v9);
  this = v10;
  if (v10 == v9)
  {
    v8 = 4;
    this = v9;
    goto LABEL_12;
  }
  if (v10)
  {
    v8 = 5;
LABEL_12:
    this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v8))();
  }
LABEL_13:
  *(_BYTE *)(v3 + 177) = v2;
  return this;
}

uint64_t rtc::RefCountedObject<webrtc::VideoRtpTrackSource>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 376);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::VideoRtpTrackSource>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 94;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::VideoRtpTrackSource>::~RefCountedObject(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  *(_QWORD *)a1 = &unk_24C0C46F8;
  *(_QWORD *)(a1 + 8) = &unk_24C0C47A0;
  *(_QWORD *)(a1 + 16) = &unk_24C0C47D0;
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 280));
  *(_QWORD *)(a1 + 56) = &off_24C0C2FB0;
  *(_QWORD *)(a1 + 88) = &unk_24C0C2FF8;
  v3 = *(_QWORD *)(a1 + 224);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 184);
  if (v4)
  {
    *(_QWORD *)(a1 + 192) = v4;
    operator delete(v4);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 96));
  *(_QWORD *)(a1 + 56) = &off_24C0C49A0;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = *(void **)(a1 + 64);
    if (v6 != v5)
    {
      do
      {
        v8 = *(void **)(v6 - 40);
        if (v8)
        {
          *(_QWORD *)(v6 - 32) = v8;
          operator delete(v8);
        }
        v6 -= 72;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v7);
  }
  *(_QWORD *)a1 = &unk_24C0ACAE0;
  *(_QWORD *)(a1 + 8) = &unk_24C0ACB70;
  *(_QWORD *)(a1 + 16) = &unk_24C0ACBA0;
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD *)(a1 + 24);
    v9 = *(uint64_t **)(a1 + 32);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 40) = 0;
    if (v9 != (uint64_t *)(a1 + 24))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 24));
    }
  }
  return a1;
}

void rtc::RefCountedObject<webrtc::VideoRtpTrackSource>::~RefCountedObject(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  *(_QWORD *)a1 = &unk_24C0C46F8;
  *(_QWORD *)(a1 + 8) = &unk_24C0C47A0;
  *(_QWORD *)(a1 + 16) = &unk_24C0C47D0;
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 280));
  *(_QWORD *)(a1 + 56) = &off_24C0C2FB0;
  *(_QWORD *)(a1 + 88) = &unk_24C0C2FF8;
  v3 = *(_QWORD *)(a1 + 224);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 184);
  if (v4)
  {
    *(_QWORD *)(a1 + 192) = v4;
    operator delete(v4);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 96));
  *(_QWORD *)(a1 + 56) = &off_24C0C49A0;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = *(void **)(a1 + 64);
    if (v6 != v5)
    {
      do
      {
        v8 = *(void **)(v6 - 40);
        if (v8)
        {
          *(_QWORD *)(v6 - 32) = v8;
          operator delete(v8);
        }
        v6 -= 72;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v7);
  }
  *(_QWORD *)a1 = &unk_24C0ACAE0;
  *(_QWORD *)(a1 + 8) = &unk_24C0ACB70;
  *(_QWORD *)(a1 + 16) = &unk_24C0ACBA0;
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD *)(a1 + 24);
    v9 = *(uint64_t **)(a1 + 32);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 40) = 0;
    if (v9 != (uint64_t *)(a1 + 24))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 24));
    }
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::VideoTrackSource::state(webrtc::VideoTrackSource *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t webrtc::VideoTrackSource::remote(webrtc::VideoTrackSource *this)
{
  return *((unsigned __int8 *)this + 52);
}

uint64_t webrtc::VideoTrackSource::is_screencast(webrtc::VideoTrackSource *this)
{
  return 0;
}

uint64_t webrtc::VideoTrackSource::needs_denoising(webrtc::VideoTrackSource *this)
{
  return 0;
}

uint64_t webrtc::VideoTrackSource::GetStats()
{
  return 0;
}

BOOL rtc::RefCountedObject<webrtc::VideoRtpTrackSource>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 376));
  return v1 == 1;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::VideoRtpTrackSource>::~RefCountedObject(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  *(_QWORD *)(a1 - 8) = &unk_24C0C46F8;
  *(_QWORD *)a1 = &unk_24C0C47A0;
  *(_QWORD *)(a1 + 8) = &unk_24C0C47D0;
  v2 = *(void **)(a1 + 336);
  if (v2)
  {
    *(_QWORD *)(a1 + 344) = v2;
    operator delete(v2);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 272));
  *(_QWORD *)(a1 + 48) = &off_24C0C2FB0;
  *(_QWORD *)(a1 + 80) = &unk_24C0C2FF8;
  v3 = *(_QWORD *)(a1 + 216);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 176);
  if (v4)
  {
    *(_QWORD *)(a1 + 184) = v4;
    operator delete(v4);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 88));
  *(_QWORD *)(a1 + 48) = &off_24C0C49A0;
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(void **)(a1 + 56);
    if (v6 != v5)
    {
      do
      {
        v8 = *(void **)(v6 - 40);
        if (v8)
        {
          *(_QWORD *)(v6 - 32) = v8;
          operator delete(v8);
        }
        v6 -= 72;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v5;
    operator delete(v7);
  }
  *(_QWORD *)(a1 - 8) = &unk_24C0ACAE0;
  *(_QWORD *)a1 = &unk_24C0ACB70;
  *(_QWORD *)(a1 + 8) = &unk_24C0ACBA0;
  if (*(_QWORD *)(a1 + 32))
  {
    v9 = (uint64_t *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 16);
    v10 = *(uint64_t **)(a1 + 24);
    v12 = *v10;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v11 + 8);
    **(_QWORD **)(v11 + 8) = v12;
    *(_QWORD *)(a1 + 32) = 0;
    if (v10 != (uint64_t *)(a1 + 16))
    {
      do
      {
        v13 = (uint64_t *)v10[1];
        operator delete(v10);
        v10 = v13;
      }
      while (v13 != v9);
    }
  }
}

{
  rtc::RefCountedObject<webrtc::VideoRtpTrackSource>::~RefCountedObject(a1 - 8);
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  *(_QWORD *)(a1 - 16) = &unk_24C0C46F8;
  *(_QWORD *)(a1 - 8) = &unk_24C0C47A0;
  *(_QWORD *)a1 = &unk_24C0C47D0;
  v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(_QWORD *)(a1 + 336) = v2;
    operator delete(v2);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 264));
  *(_QWORD *)(a1 + 40) = &off_24C0C2FB0;
  *(_QWORD *)(a1 + 72) = &unk_24C0C2FF8;
  v3 = *(_QWORD *)(a1 + 208);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(_QWORD *)(a1 + 176) = v4;
    operator delete(v4);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 80));
  *(_QWORD *)(a1 + 40) = &off_24C0C49A0;
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(void **)(a1 + 48);
    if (v6 != v5)
    {
      do
      {
        v8 = *(void **)(v6 - 40);
        if (v8)
        {
          *(_QWORD *)(v6 - 32) = v8;
          operator delete(v8);
        }
        v6 -= 72;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v7);
  }
  *(_QWORD *)(a1 - 16) = &unk_24C0ACAE0;
  *(_QWORD *)(a1 - 8) = &unk_24C0ACB70;
  *(_QWORD *)a1 = &unk_24C0ACBA0;
  if (*(_QWORD *)(a1 + 24))
  {
    v9 = (uint64_t *)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 8);
    v10 = *(uint64_t **)(a1 + 16);
    v12 = *v10;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v11 + 8);
    **(_QWORD **)(v11 + 8) = v12;
    *(_QWORD *)(a1 + 24) = 0;
    if (v10 != (uint64_t *)(a1 + 8))
    {
      do
      {
        v13 = (uint64_t *)v10[1];
        operator delete(v10);
        v10 = v13;
      }
      while (v13 != v9);
    }
  }
}

{
  rtc::RefCountedObject<webrtc::VideoRtpTrackSource>::~RefCountedObject(a1 - 16);
}

uint64_t rtc::RefCountedObject<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 48);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 12;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::~VideoTrackProxyWithInternal(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::kind(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::id(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::enabled(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  char v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 40);
  v15 = xmmword_208F05250;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16 != 0;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::set_enabled(uint64_t a1, char a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, _QWORD);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  char v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  char v18;
  char *v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 40);
  v17 = xmmword_208F05260;
  v19 = &v10;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, _QWORD))v17;
    v5 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v17);
    v6 = v4(v5, *v19);
    v18 = v6;
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,BOOL,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
    v6 = v18 != 0;
  }
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  return v6;
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::state(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 40);
  v15 = xmmword_208F05270;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackInterface,webrtc::MediaStreamTrackInterface::TrackState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::AddOrUpdateSink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 40);
  v17 = xmmword_208F16E50;
  v18 = &v10;
  v19 = a3;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(_QWORD *, uint64_t, uint64_t))v17;
    v6 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v5 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*v6 + v17);
    v5(v6, *v18, v19);
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,rtc::VideoSinkInterface<webrtc::VideoFrame> *,rtc::VideoSinkWants const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
  }
  pthread_mutex_destroy(&v20);
  return pthread_cond_destroy(&v21);
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::RemoveSink(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F05280;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,rtc::VideoSinkInterface<webrtc::VideoFrame> *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::GetSource(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 88))(*(_QWORD *)(a1 + 40));
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::content_hint(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 40);
  v15 = xmmword_208F052A0;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackInterface,webrtc::VideoTrackInterface::ContentHint>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::set_content_hint(uint64_t a1, int a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, _QWORD);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  int v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  unsigned int *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F052B0;
  v17 = (unsigned int *)&v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, _QWORD))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, _QWORD))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,webrtc::VideoTrackInterface::ContentHint>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::RequestRefreshFrame(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 40);
  v14 = xmmword_208F17180;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F052C0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::UnregisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F052D0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

BOOL rtc::RefCountedObject<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 48));
  return v1 == 1;
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::RegisterObserver(a1 - 8, a2);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::UnregisterObserver(uint64_t a1, uint64_t a2)
{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::UnregisterObserver(a1 - 8, a2);
}

_QWORD *`non-virtual thunk to'rtc::RefCountedObject<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>>::~RefCountedObject(uint64_t a1)
{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::~VideoTrackProxyWithInternal((_QWORD *)(a1 - 8));
}

{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::~VideoTrackProxyWithInternal((_QWORD *)(a1 - 16));
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>>::~RefCountedObject(uint64_t a1)
{
  webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::~VideoTrackProxyWithInternal((_QWORD *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::~VideoTrackProxyWithInternal((_QWORD *)(a1 - 16));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::AddOrUpdateSink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::AddOrUpdateSink(a1 - 16, a2, a3);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::RemoveSink(uint64_t a1, uint64_t a2)
{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::RemoveSink(a1 - 16, a2);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::RequestRefreshFrame(uint64_t a1)
{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::RequestRefreshFrame(a1 - 16);
}

_QWORD *webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::~VideoTrackProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0C45B0;
  a1[1] = &unk_24C0C4648;
  a1[2] = &unk_24C0C4678;
  v12 = a1;
  v13 = webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::DestroyInternal;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[3];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[5];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrack>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::VideoRtpReceiver::GenerateKeyFrame(void)::$_1>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = *(_QWORD *)(*a1 + 64);
  if (result)
  {
    if (*(_BYTE *)(v1 + 76))
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 192))(result, *(unsigned int *)(v1 + 72));
    else
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 192))(result, 0);
  }
  return result;
}

_QWORD *webrtc::Notifier<webrtc::VideoTrackInterface>::FireOnChanged(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = result + 3;
  v11 = &v10;
  v2 = (_QWORD *)result[4];
  if (v2 != result + 3)
  {
    v3 = 0;
    result = &v10;
    do
    {
      v4 = result;
      result = operator new(0x18uLL);
      v5 = v2[2];
      result[1] = &v10;
      result[2] = v5;
      *result = v4;
      v4[1] = result;
      ++v3;
      v2 = (_QWORD *)v2[1];
    }
    while (v2 != v1);
    v10 = result;
    v12 = v3;
    v6 = v11;
    if (v11 != &v10)
    {
      do
      {
        result = (_QWORD *)(**(uint64_t (***)(_QWORD))v6[2])(v6[2]);
        v6 = (_QWORD *)v6[1];
      }
      while (v6 != &v10);
      v3 = v12;
    }
    if (v3)
    {
      v7 = v10;
      result = v11;
      v8 = *v11;
      *(_QWORD *)(v8 + 8) = v10[1];
      *(_QWORD *)v7[1] = v8;
      v12 = 0;
      if (result != &v10)
      {
        do
        {
          v9 = (_QWORD *)result[1];
          operator delete(result);
          result = v9;
        }
        while (v9 != &v10);
      }
    }
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::VideoRtpReceiver::RestartMediaChannel(std::optional<unsigned int>)::$_1>(uint64_t a1)
{
  return webrtc::VideoRtpReceiver::RestartMediaChannel_w(*(_QWORD *)a1, **(_QWORD **)(a1 + 8), **(_DWORD **)(a1 + 16));
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::VideoRtpReceiver::SetupMediaChannel(std::optional<unsigned int>,cricket::MediaReceiveChannelInterface *)::$_1>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)a1;
  webrtc::VideoRtpReceiver::SetMediaChannel_w(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  return webrtc::VideoRtpReceiver::RestartMediaChannel_w(v2, **(_QWORD **)(a1 + 16), **(_DWORD **)(a1 + 24));
}

_QWORD *std::__function::__func<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1,std::allocator<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1>,void ()(webrtc::RecordableEncodedFrame const&)>::~__func(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C0C46B0;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void std::__function::__func<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1,std::allocator<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1>,void ()(webrtc::RecordableEncodedFrame const&)>::~__func(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C0C46B0;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1,std::allocator<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1>,void ()(webrtc::RecordableEncodedFrame const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  void (***v3)(_QWORD);

  v2 = operator new(0x10uLL);
  v3 = *(void (****)(_QWORD))(a1 + 8);
  *v2 = &off_24C0C46B0;
  v2[1] = v3;
  if (v3)
    (**v3)(v3);
  return v2;
}

uint64_t (***std::__function::__func<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1,std::allocator<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1>,void ()(webrtc::RecordableEncodedFrame const&)>::__clone(uint64_t a1, _QWORD *a2))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = *(uint64_t (****)(_QWORD))(a1 + 8);
  *a2 = &off_24C0C46B0;
  a2[1] = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t std::__function::__func<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1,std::allocator<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1>,void ()(webrtc::RecordableEncodedFrame const&)>::destroy(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__function::__func<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1,std::allocator<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1>,void ()(webrtc::RecordableEncodedFrame const&)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t std::__function::__func<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1,std::allocator<webrtc::VideoRtpReceiver::SetEncodedSinkEnabled(BOOL)::$_1>,void ()(webrtc::RecordableEncodedFrame const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  pthread_mutex_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (pthread_mutex_t *)(v3 + 280);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 280));
  v5 = *(uint64_t **)(v3 + 344);
  v6 = *(uint64_t **)(v3 + 352);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::VideoRtpTrackSource::VideoRtpTrackSource(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  pthread_mutexattr_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C0C46F8;
  *(_QWORD *)(a1 + 8) = &unk_24C0C47A0;
  *(_BYTE *)(a1 + 52) = 1;
  *(_QWORD *)(a1 + 16) = &unk_24C0C47D0;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = &off_24C0C2FB0;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = (pthread_mutex_t *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &unk_24C0C2FF8;
  pthread_mutexattr_init(&v6);
  pthread_mutexattr_setpolicy_np(&v6, 3);
  pthread_mutex_init(v4, &v6);
  pthread_mutexattr_destroy(&v6);
  *(_WORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 164) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 176) = 0x17FFFFFFFLL;
  *(_BYTE *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 220) = 0;
  *(_BYTE *)(a1 + 222) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 1;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  pthread_mutexattr_init(&v6);
  pthread_mutexattr_setpolicy_np(&v6, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 280), &v6);
  pthread_mutexattr_destroy(&v6);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = a2;
  return a1;
}

uint64_t webrtc::VideoRtpTrackSource::source(webrtc::VideoRtpTrackSource *this)
{
  return (uint64_t)this + 56;
}

uint64_t webrtc::VideoRtpTrackSource::SupportsEncodedOutput(webrtc::VideoRtpTrackSource *this)
{
  return 1;
}

uint64_t webrtc::VideoRtpTrackSource::GenerateKeyFrame(webrtc::VideoRtpTrackSource *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 46);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t webrtc::VideoRtpTrackSource::AddEncodedSink(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t result;

  v4 = (pthread_mutex_t *)(a1 + 280);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 280));
  v6 = *(char **)(a1 + 352);
  v5 = *(_QWORD *)(a1 + 360);
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    if (v6)
    {
      *(_QWORD *)v6 = a2;
      v8 = v6 + 8;
      goto LABEL_21;
    }
    goto LABEL_25;
  }
  v9 = *(char **)(a1 + 344);
  v10 = (v6 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    goto LABEL_26;
  v12 = v5 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8;
  v14 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v13)
    v14 = v11;
  if (!v14)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    abort();
  }
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v15 = 8 * v14;
  v16 = (char *)operator new(8 * v14);
  v17 = &v16[v15];
  v18 = &v16[8 * v10];
  *(_QWORD *)v18 = a2;
  v8 = v18 + 8;
  if (v6 != v9)
  {
    v19 = v6 - v9 - 8;
    if (v19 < 0x58)
      goto LABEL_30;
    if ((unint64_t)(v9 - v16) < 0x20)
      goto LABEL_30;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v21];
    v18 -= v21;
    v22 = &v16[8 * v10 - 16];
    v23 = (__int128 *)(v6 - 16);
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *v23;
      *((_OWORD *)v22 - 1) = *(v23 - 1);
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 2;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v26 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v18 - 1) = v26;
        v18 -= 8;
      }
      while (v7 != v9);
    }
    v7 = v9;
  }
  *(_QWORD *)(a1 + 344) = v18;
  *(_QWORD *)(a1 + 352) = v8;
  *(_QWORD *)(a1 + 360) = v17;
  if (v7)
    operator delete(v7);
LABEL_21:
  *(_QWORD *)(a1 + 352) = v8;
  v27 = (char *)v8 - *(_QWORD *)(a1 + 344);
  result = pthread_mutex_unlock(v4);
  if (v27 == (char *)8)
  {
    result = *(_QWORD *)(a1 + 368);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, 1);
  }
  return result;
}

uint64_t webrtc::VideoRtpTrackSource::RemoveEncodedSink(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  char *v5;
  char *v6;
  char *v7;
  int64_t v8;
  uint64_t result;

  v4 = (pthread_mutex_t *)(a1 + 280);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 280));
  v5 = *(char **)(a1 + 344);
  v6 = *(char **)(a1 + 352);
  v7 = v5;
  if (v5 != v6)
  {
    while (*(_QWORD *)v7 != a2)
    {
      v7 += 8;
      if (v7 == v6)
      {
        v7 = *(char **)(a1 + 352);
        break;
      }
    }
  }
  if (v7 != v6)
  {
    v8 = v6 - (v7 + 8);
    if (v6 != v7 + 8)
    {
      memmove(v7, v7 + 8, v6 - (v7 + 8));
      v5 = *(char **)(a1 + 344);
    }
    v6 -= 8;
    *(_QWORD *)(a1 + 352) = &v7[v8];
  }
  result = pthread_mutex_unlock(v4);
  if (v6 == v5)
  {
    result = *(_QWORD *)(a1 + 368);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 24))(result, 0);
  }
  return result;
}

unint64_t webrtc::VideoSendStream::Stats::ToString@<X0>(webrtc::VideoSendStream::Stats *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  size_t v5;
  size_t v6;
  size_t v7;
  const void *p_src;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  unint64_t v22;
  const char *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  unint64_t v27;
  const char *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  unint64_t v32;
  const char *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  unint64_t v37;
  const char *v38;
  size_t v39;
  size_t v40;
  size_t v41;
  const char *v42;
  unint64_t v43;
  size_t v44;
  size_t v45;
  size_t v46;
  size_t v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  size_t v55;
  size_t v56;
  rtc::webrtc_checks_impl *v57;
  uint64_t v58;
  const char *v59;
  size_t v60;
  size_t v61;
  size_t v62;
  char *v63;
  _BYTE *v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  size_t v71;
  size_t v72;
  size_t v73;
  size_t v74;
  size_t v75;
  size_t v76;
  size_t v77;
  size_t v78;
  size_t v79;
  size_t v80;
  size_t v81;
  size_t v82;
  size_t v83;
  size_t v84;
  size_t v85;
  size_t v86;
  size_t v87;
  size_t v88;
  size_t v89;
  size_t v90;
  size_t v91;
  size_t v92;
  size_t v93;
  size_t v94;
  size_t v95;
  size_t v96;
  char *v97;
  size_t v98;
  size_t v99;
  char *p_p;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  size_t v104;
  const void *v105;
  size_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  BOOL v111;
  char *v112;
  char *v113;
  unint64_t result;
  size_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t *v120;
  void *__p;
  size_t v122;
  unint64_t v123;
  char *v124;
  __int128 v125;
  char *__s;
  __int128 v127;
  char v128[2048];
  void *__src;
  size_t v130;
  unsigned __int8 v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v124 = v128;
  strcpy(v128, "VideoSendStream stats: ");
  v125 = xmmword_208F1D7A0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v124, "%lld", a2);
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 3uLL)
    v5 = 3;
  else
    v5 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", {", v5);
  *((_QWORD *)&v125 + 1) += v5;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0xBuLL)
    v6 = 11;
  else
    v6 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "input_fps: ", v6);
  *((_QWORD *)&v125 + 1) += v6;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  rtc::StringFormat((rtc *)"%.1f", (char *)&__src, *((_QWORD *)this + 4));
  if ((char)v131 < 0)
  {
    v7 = v130;
    if ((v130 & 0x8000000000000000) != 0)
      goto LABEL_285;
    p_src = __src;
    if (v130)
    {
      if (!__src)
        goto LABEL_285;
    }
  }
  else
  {
    v7 = v131;
    p_src = &__src;
  }
  v120 = a3;
  if (v7 >= (_QWORD)v125 + ~*((_QWORD *)&v125 + 1))
    v9 = v125 + ~*((_QWORD *)&v125 + 1);
  else
    v9 = v7;
  memcpy(&v124[*((_QWORD *)&v125 + 1)], p_src, v9);
  *((_QWORD *)&v125 + 1) += v9;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
    v10 = 2;
  else
    v10 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v10);
  *((_QWORD *)&v125 + 1) += v10;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((char)v131 < 0)
    operator delete(__src);
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0xCuLL)
    v11 = 12;
  else
    v11 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "encode_fps: ", v11);
  *((_QWORD *)&v125 + 1) += v11;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v124, "%d", *((_DWORD *)this + 10));
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
    v12 = 2;
  else
    v12 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v12);
  *((_QWORD *)&v125 + 1) += v12;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0xBuLL)
    v13 = 11;
  else
    v13 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "encode_ms: ", v13);
  *((_QWORD *)&v125 + 1) += v13;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v124, "%d", *((_DWORD *)this + 11));
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
    v14 = 2;
  else
    v14 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v14);
  *((_QWORD *)&v125 + 1) += v14;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0x13uLL)
    v15 = 19;
  else
    v15 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "encode_usage_perc: ", v15);
  *((_QWORD *)&v125 + 1) += v15;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v124, "%d", *((_DWORD *)this + 12));
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
    v16 = 2;
  else
    v16 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v16);
  *((_QWORD *)&v125 + 1) += v16;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0xCuLL)
    v17 = 12;
  else
    v17 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "target_bps: ", v17);
  *((_QWORD *)&v125 + 1) += v17;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v124, "%d", *((_DWORD *)this + 25));
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
    v18 = 2;
  else
    v18 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v18);
  *((_QWORD *)&v125 + 1) += v18;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0xBuLL)
    v19 = 11;
  else
    v19 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "media_bps: ", v19);
  *((_QWORD *)&v125 + 1) += v19;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v124, "%d", *((_DWORD *)this + 26));
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
    v20 = 2;
  else
    v20 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v20);
  *((_QWORD *)&v125 + 1) += v20;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0xBuLL)
    v21 = 11;
  else
    v21 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "suspended: ", v21);
  *((_QWORD *)&v125 + 1) += v21;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if (*((_BYTE *)this + 108))
    v22 = 4;
  else
    v22 = 5;
  if (*((_BYTE *)this + 108))
    v23 = "true";
  else
    v23 = "false";
  if (v22 >= (_QWORD)v125 + ~*((_QWORD *)&v125 + 1))
    v24 = v125 + ~*((_QWORD *)&v125 + 1);
  else
    v24 = v22;
  memcpy(&v124[*((_QWORD *)&v125 + 1)], v23, v24);
  *((_QWORD *)&v125 + 1) += v24;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
    v25 = 2;
  else
    v25 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v25);
  *((_QWORD *)&v125 + 1) += v25;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0x10uLL)
    v26 = 16;
  else
    v26 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "bw_adapted_res: ", v26);
  *((_QWORD *)&v125 + 1) += v26;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if (*((_BYTE *)this + 109))
    v27 = 4;
  else
    v27 = 5;
  if (*((_BYTE *)this + 109))
    v28 = "true";
  else
    v28 = "false";
  if (v27 >= (_QWORD)v125 + ~*((_QWORD *)&v125 + 1))
    v29 = v125 + ~*((_QWORD *)&v125 + 1);
  else
    v29 = v27;
  memcpy(&v124[*((_QWORD *)&v125 + 1)], v28, v29);
  *((_QWORD *)&v125 + 1) += v29;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
    v30 = 2;
  else
    v30 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v30);
  *((_QWORD *)&v125 + 1) += v30;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0x11uLL)
    v31 = 17;
  else
    v31 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "cpu_adapted_res: ", v31);
  *((_QWORD *)&v125 + 1) += v31;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if (*((_BYTE *)this + 110))
    v32 = 4;
  else
    v32 = 5;
  if (*((_BYTE *)this + 110))
    v33 = "true";
  else
    v33 = "false";
  if (v32 >= (_QWORD)v125 + ~*((_QWORD *)&v125 + 1))
    v34 = v125 + ~*((_QWORD *)&v125 + 1);
  else
    v34 = v32;
  memcpy(&v124[*((_QWORD *)&v125 + 1)], v33, v34);
  *((_QWORD *)&v125 + 1) += v34;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
    v35 = 2;
  else
    v35 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v35);
  *((_QWORD *)&v125 + 1) += v35;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0x10uLL)
    v36 = 16;
  else
    v36 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "bw_adapted_fps: ", v36);
  *((_QWORD *)&v125 + 1) += v36;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if (*((_BYTE *)this + 111))
    v37 = 4;
  else
    v37 = 5;
  if (*((_BYTE *)this + 111))
    v38 = "true";
  else
    v38 = "false";
  if (v37 >= (_QWORD)v125 + ~*((_QWORD *)&v125 + 1))
    v39 = v125 + ~*((_QWORD *)&v125 + 1);
  else
    v39 = v37;
  memcpy(&v124[*((_QWORD *)&v125 + 1)], v38, v39);
  *((_QWORD *)&v125 + 1) += v39;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
    v40 = 2;
  else
    v40 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v40);
  *((_QWORD *)&v125 + 1) += v40;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0x11uLL)
    v41 = 17;
  else
    v41 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "cpu_adapted_fps: ", v41);
  *((_QWORD *)&v125 + 1) += v41;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if (*((_BYTE *)this + 112))
    v42 = "true";
  else
    v42 = "false";
  if (*((_BYTE *)this + 112))
    v43 = 4;
  else
    v43 = 5;
  if (v43 >= (_QWORD)v125 + ~*((_QWORD *)&v125 + 1))
    v44 = v125 + ~*((_QWORD *)&v125 + 1);
  else
    v44 = v43;
  memcpy(&v124[*((_QWORD *)&v125 + 1)], v42, v44);
  *((_QWORD *)&v125 + 1) += v44;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
    v45 = 2;
  else
    v45 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v45);
  *((_QWORD *)&v125 + 1) += v45;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0x12uLL)
    v46 = 18;
  else
    v46 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "#cpu_adaptations: ", v46);
  *((_QWORD *)&v125 + 1) += v46;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v124, "%d", *((_DWORD *)this + 37));
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
    v47 = 2;
  else
    v47 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v47);
  *((_QWORD *)&v125 + 1) += v47;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 0x16uLL)
    v48 = 22;
  else
    v48 = v125 + ~*((_QWORD *)&v125 + 1);
  memcpy(&v124[*((_QWORD *)&v125 + 1)], "#quality_adaptations: ", v48);
  *((_QWORD *)&v125 + 1) += v48;
  v124[*((_QWORD *)&v125 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v124, "%d", *((_DWORD *)this + 38));
  LOBYTE(__src) = 125;
  v49 = v125;
  v50 = *((_QWORD *)&v125 + 1) + 1;
  memcpy(&v124[*((_QWORD *)&v125 + 1)], &__src, v125 != *((_QWORD *)&v125 + 1) + 1);
  v51 = *((_QWORD *)&v125 + 1);
  if (v49 != v50)
    v51 = *((_QWORD *)&v125 + 1) + 1;
  *((_QWORD *)&v125 + 1) = v51;
  v124[v51] = 0;
  v52 = (char *)*((_QWORD *)this + 20);
  v53 = (char *)this + 168;
  if (v52 != v53)
  {
    do
    {
      if (*((_DWORD *)v52 + 10))
      {
        v54 = (char *)*((_QWORD *)v52 + 1);
        if (v54)
          goto LABEL_266;
        goto LABEL_268;
      }
      if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 8uLL)
        v55 = 8;
      else
        v55 = v125 + ~*((_QWORD *)&v125 + 1);
      memcpy(&v124[*((_QWORD *)&v125 + 1)], " {ssrc: ", v55);
      *((_QWORD *)&v125 + 1) += v55;
      v124[*((_QWORD *)&v125 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v124, "%u", *((_DWORD *)v52 + 8));
      if ((_QWORD)v125 + ~*((_QWORD *)&v125 + 1) >= 2uLL)
        v56 = 2;
      else
        v56 = v125 + ~*((_QWORD *)&v125 + 1);
      v57 = (rtc::webrtc_checks_impl *)memcpy(&v124[*((_QWORD *)&v125 + 1)], ", ", v56);
      *((_QWORD *)&v125 + 1) += v56;
      v124[*((_QWORD *)&v125 + 1)] = 0;
      __s = (char *)&__src;
      strcpy((char *)&__src, "type: ");
      v127 = xmmword_208F1D7B0;
      v58 = *((int *)v52 + 10);
      if (v58 >= 3)
        rtc::webrtc_checks_impl::UnreachableCodeReached(v57);
      v59 = off_24C0C47F8[v58];
      v60 = strlen(v59);
      if (v60 >= 0x3F9)
        v61 = 1017;
      else
        v61 = v60;
      memcpy((char *)&__src + 6, v59, v61);
      v62 = v61 + 6;
      *((_QWORD *)&v127 + 1) = v61 + 6;
      v63 = (char *)&__src;
      v64 = (char *)&__src + v61 + 6;
      *v64 = 0;
      if (v52[48])
      {
        if (1017 - v61 >= 7)
          v65 = 7;
        else
          v65 = 1017 - v61;
        memcpy(v64, " (for: ", v65);
        *((_QWORD *)&v127 + 1) = v65 + v62;
        *((_BYTE *)&__src + *((_QWORD *)&v127 + 1)) = 0;
        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", *((_DWORD *)v52 + 11));
        v66 = v127;
        v67 = *((_QWORD *)&v127 + 1) + 1;
        memcpy(&__s[*((_QWORD *)&v127 + 1)], ")", v127 != *((_QWORD *)&v127 + 1) + 1);
        v68 = *((_QWORD *)&v127 + 1);
        if (v66 != v67)
          v68 = *((_QWORD *)&v127 + 1) + 1;
        *((_QWORD *)&v127 + 1) = v68;
        __s[v68] = 0;
        v62 = *((_QWORD *)&v127 + 1);
        v69 = v127;
        v63 = __s;
      }
      else
      {
        v69 = 1024;
      }
      v70 = v69 + ~v62;
      if (v70 >= 2)
        v71 = 2;
      else
        v71 = v70;
      memcpy(&v63[v62], ", ", v71);
      *((_QWORD *)&v127 + 1) += v71;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 7uLL)
        v72 = 7;
      else
        v72 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], "width: ", v72);
      *((_QWORD *)&v127 + 1) += v72;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)v52 + 15));
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 2uLL)
        v73 = 2;
      else
        v73 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], ", ", v73);
      *((_QWORD *)&v127 + 1) += v73;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 8uLL)
        v74 = 8;
      else
        v74 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], "height: ", v74);
      *((_QWORD *)&v127 + 1) += v74;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)v52 + 16));
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 2uLL)
        v75 = 2;
      else
        v75 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], ", ", v75);
      *((_QWORD *)&v127 + 1) += v75;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 5uLL)
        v76 = 5;
      else
        v76 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], "key: ", v76);
      *((_QWORD *)&v127 + 1) += v76;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)v52 + 13));
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 2uLL)
        v77 = 2;
      else
        v77 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], ", ", v77);
      *((_QWORD *)&v127 + 1) += v77;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 7uLL)
        v78 = 7;
      else
        v78 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], "delta: ", v78);
      *((_QWORD *)&v127 + 1) += v78;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)v52 + 14));
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 2uLL)
        v79 = 2;
      else
        v79 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], ", ", v79);
      *((_QWORD *)&v127 + 1) += v79;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 0xBuLL)
        v80 = 11;
      else
        v80 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], "total_bps: ", v80);
      *((_QWORD *)&v127 + 1) += v80;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)v52 + 17));
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 2uLL)
        v81 = 2;
      else
        v81 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], ", ", v81);
      *((_QWORD *)&v127 + 1) += v81;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 0x10uLL)
        v82 = 16;
      else
        v82 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], "retransmit_bps: ", v82);
      *((_QWORD *)&v127 + 1) += v82;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)v52 + 18));
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 2uLL)
        v83 = 2;
      else
        v83 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], ", ", v83);
      *((_QWORD *)&v127 + 1) += v83;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 0xEuLL)
        v84 = 14;
      else
        v84 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], "avg_delay_ms: ", v84);
      *((_QWORD *)&v127 + 1) += v84;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)v52 + 19));
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 2uLL)
        v85 = 2;
      else
        v85 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], ", ", v85);
      *((_QWORD *)&v127 + 1) += v85;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 0xEuLL)
        v86 = 14;
      else
        v86 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], "max_delay_ms: ", v86);
      *((_QWORD *)&v127 + 1) += v86;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)v52 + 20));
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 2uLL)
        v87 = 2;
      else
        v87 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], ", ", v87);
      *((_QWORD *)&v127 + 1) += v87;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      if (v52[296])
      {
        if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 0xAuLL)
          v88 = 10;
        else
          v88 = v127 + ~*((_QWORD *)&v127 + 1);
        memcpy(&__s[*((_QWORD *)&v127 + 1)], "cum_loss: ", v88);
        *((_QWORD *)&v127 + 1) += v88;
        __s[*((_QWORD *)&v127 + 1)] = 0;
        if (!v52[296])
          goto LABEL_285;
        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)v52 + 63));
        v89 = (_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 2uLL ? 2 : v127 + ~*((_QWORD *)&v127 + 1);
        memcpy(&__s[*((_QWORD *)&v127 + 1)], ", ", v89);
        *((_QWORD *)&v127 + 1) += v89;
        __s[*((_QWORD *)&v127 + 1)] = 0;
        v90 = (_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 0xDuLL ? 13 : v127 + ~*((_QWORD *)&v127 + 1);
        memcpy(&__s[*((_QWORD *)&v127 + 1)], "max_ext_seq: ", v90);
        *((_QWORD *)&v127 + 1) += v90;
        __s[*((_QWORD *)&v127 + 1)] = 0;
        if (!v52[296])
          goto LABEL_285;
        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", *((_DWORD *)v52 + 64));
        if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 2uLL)
          v91 = 2;
        else
          v91 = v127 + ~*((_QWORD *)&v127 + 1);
        memcpy(&__s[*((_QWORD *)&v127 + 1)], ", ", v91);
        *((_QWORD *)&v127 + 1) += v91;
        __s[*((_QWORD *)&v127 + 1)] = 0;
      }
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 6uLL)
        v92 = 6;
      else
        v92 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], "nack: ", v92);
      *((_QWORD *)&v127 + 1) += v92;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", *((_DWORD *)v52 + 54));
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 2uLL)
        v93 = 2;
      else
        v93 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], ", ", v93);
      *((_QWORD *)&v127 + 1) += v93;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 5uLL)
        v94 = 5;
      else
        v94 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], "fir: ", v94);
      *((_QWORD *)&v127 + 1) += v94;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", *((_DWORD *)v52 + 55));
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 2uLL)
        v95 = 2;
      else
        v95 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], ", ", v95);
      *((_QWORD *)&v127 + 1) += v95;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      if ((_QWORD)v127 + ~*((_QWORD *)&v127 + 1) >= 5uLL)
        v96 = 5;
      else
        v96 = v127 + ~*((_QWORD *)&v127 + 1);
      memcpy(&__s[*((_QWORD *)&v127 + 1)], "pli: ", v96);
      *((_QWORD *)&v127 + 1) += v96;
      __s[*((_QWORD *)&v127 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", *((_DWORD *)v52 + 56));
      v97 = __s;
      if (!__s)
        goto LABEL_285;
      v98 = strlen(__s);
      if (v98 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_286;
      v99 = v98;
      if (v98 > 0x16)
      {
        v102 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v98 | 7) != 0x17)
          v102 = v98 | 7;
        v103 = v102 + 1;
        p_p = (char *)operator new(v102 + 1);
        v122 = v99;
        v123 = v103 | 0x8000000000000000;
        __p = p_p;
        v101 = &p_p[v99];
        if (p_p > v97)
          goto LABEL_251;
      }
      else
      {
        HIBYTE(v123) = v98;
        p_p = (char *)&__p;
        v101 = (char *)&__p + v99;
        if (&__p > (void **)__s)
          goto LABEL_251;
      }
      if (v101 > v97)
        goto LABEL_285;
LABEL_251:
      if (v99)
        memmove(p_p, v97, v99);
      *v101 = 0;
      if (SHIBYTE(v123) < 0)
      {
        v104 = v122;
        if ((v122 & 0x8000000000000000) != 0)
          goto LABEL_285;
        v105 = __p;
        if (v122)
        {
          if (!__p)
            goto LABEL_285;
        }
      }
      else
      {
        v104 = HIBYTE(v123);
        v105 = &__p;
      }
      if (v104 >= (_QWORD)v125 + ~*((_QWORD *)&v125 + 1))
        v106 = v125 + ~*((_QWORD *)&v125 + 1);
      else
        v106 = v104;
      memcpy(&v124[*((_QWORD *)&v125 + 1)], v105, v106);
      *((_QWORD *)&v125 + 1) += v106;
      v124[*((_QWORD *)&v125 + 1)] = 0;
      if (SHIBYTE(v123) < 0)
        operator delete(__p);
      LOBYTE(__src) = 125;
      v107 = v125;
      v108 = *((_QWORD *)&v125 + 1) + 1;
      memcpy(&v124[*((_QWORD *)&v125 + 1)], &__src, v125 != *((_QWORD *)&v125 + 1) + 1);
      v109 = *((_QWORD *)&v125 + 1);
      if (v107 != v108)
        v109 = *((_QWORD *)&v125 + 1) + 1;
      *((_QWORD *)&v125 + 1) = v109;
      v124[v109] = 0;
      v54 = (char *)*((_QWORD *)v52 + 1);
      if (v54)
      {
        do
        {
LABEL_266:
          v110 = v54;
          v54 = *(char **)v54;
        }
        while (v54);
        goto LABEL_138;
      }
      do
      {
LABEL_268:
        v110 = (char *)*((_QWORD *)v52 + 2);
        v111 = *(_QWORD *)v110 == (_QWORD)v52;
        v52 = v110;
      }
      while (!v111);
LABEL_138:
      v52 = v110;
    }
    while (v110 != v53);
  }
  v112 = v124;
  v113 = (char *)v120;
  if (!v124)
    goto LABEL_285;
  result = strlen(v124);
  if (result > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_286;
  v115 = result;
  if (result > 0x16)
  {
    v116 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v116 = result | 7;
    v117 = v116 + 1;
    result = (unint64_t)operator new(v116 + 1);
    v120[1] = v115;
    v120[2] = v117 | 0x8000000000000000;
    *v120 = result;
    v113 = (char *)result;
  }
  else
  {
    *((_BYTE *)v120 + 23) = result;
  }
  v118 = &v113[v115];
  if (v113 <= v112 && v118 > v112)
  {
LABEL_285:
    __break(1u);
LABEL_286:
    abort();
  }
  if (v115)
    result = (unint64_t)memmove(v113, v112, v115);
  *v118 = 0;
  return result;
}

unint64_t webrtc::VideoSendStream::Config::ToString@<X0>(webrtc::VideoSendStream::Config *this@<X0>, char *a2@<X8>)
{
  size_t v4;
  const char *v5;
  unint64_t v6;
  size_t v7;
  char *v8;
  unsigned __int8 v9;
  const void *p_src;
  unint64_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  BOOL v17;
  const char *v18;
  unint64_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  const char *v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t result;
  size_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *__src;
  unint64_t v37;
  unsigned __int8 v38;
  char *__s;
  uint64_t v40;
  uint64_t v41;
  char v42[2056];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  __s = v42;
  v40 = 2048;
  strcpy(v42, "{encoder_settings: { experiment_cpu_load_estimator: ");
  if (*((_BYTE *)this + 264))
    v4 = 2;
  else
    v4 = 3;
  if (*((_BYTE *)this + 264))
    v5 = "on";
  else
    v5 = "off";
  memcpy(&v42[52], v5, v4);
  v41 = v4 | 0x34;
  *(_WORD *)&v42[v41] = 32125;
  v6 = v4 | (unint64_t)v42;
  *(_DWORD *)(v6 + 54) = 1953636396;
  *(_DWORD *)(v6 + 57) = 540700788;
  v7 = v4 + 61;
  v8 = &v42[v4 + 61];
  *v8 = 0;
  webrtc::RtpConfig::ToString(this, (char *)&__src);
  v9 = v38;
  if ((char)v38 < 0)
  {
    v11 = v37;
    if ((v37 & 0x8000000000000000) != 0 || (p_src = __src, v37) && !__src)
    {
LABEL_62:
      __break(1u);
LABEL_63:
      abort();
    }
  }
  else
  {
    p_src = &__src;
    v11 = v38;
  }
  if (v11 >= 1986 - v4)
    v12 = 1986 - v4;
  else
    v12 = v11;
  memcpy(v8, p_src, v12);
  v13 = v7 + v12;
  v42[v7 + v12] = 0;
  if ((v9 & 0x80) != 0)
    operator delete(__src);
  if (2047 - v13 >= 0x1B)
    v14 = 27;
  else
    v14 = 2047 - v13;
  memcpy(&v42[v13], ", rtcp_report_interval_ms: ", v14);
  v41 = v13 + v14;
  v42[v41] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 76));
  if ((unint64_t)(v40 + ~v41) >= 0x12)
    v15 = 18;
  else
    v15 = v40 + ~v41;
  memcpy(&__s[v41], ", send_transport: ", v15);
  v41 += v15;
  __s[v41] = 0;
  v16 = *((_QWORD *)this + 39);
  v17 = v16 == 0;
  if (v16)
    v18 = "(Transport)";
  else
    v18 = "nullptr";
  v19 = 11;
  if (v17)
    v19 = 7;
  if (v19 >= v40 + ~v41)
    v20 = v40 + ~v41;
  else
    v20 = v19;
  memcpy(&__s[v41], v18, v20);
  v41 += v20;
  __s[v41] = 0;
  if ((unint64_t)(v40 + ~v41) >= 0x13)
    v21 = 19;
  else
    v21 = v40 + ~v41;
  memcpy(&__s[v41], ", render_delay_ms: ", v21);
  v41 += v21;
  __s[v41] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 80));
  if ((unint64_t)(v40 + ~v41) >= 0x13)
    v22 = 19;
  else
    v22 = v40 + ~v41;
  memcpy(&__s[v41], ", target_delay_ms: ", v22);
  v41 += v22;
  __s[v41] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 81));
  if ((unint64_t)(v40 + ~v41) >= 0x1D)
    v23 = 29;
  else
    v23 = v40 + ~v41;
  memcpy(&__s[v41], ", suspend_below_min_bitrate: ", v23);
  v41 += v23;
  __s[v41] = 0;
  if (*((_BYTE *)this + 328))
    v24 = "on";
  else
    v24 = "off";
  v25 = 2;
  if (!*((_BYTE *)this + 328))
    v25 = 3;
  if (v25 >= v40 + ~v41)
    v26 = v40 + ~v41;
  else
    v26 = v25;
  memcpy(&__s[v41], v24, v26);
  v41 += v26;
  __s[v41] = 0;
  LOBYTE(__src) = 125;
  v27 = v40;
  v28 = v41 + 1;
  memcpy(&__s[v41], &__src, v40 != v41 + 1);
  v29 = v41;
  if (v27 != v28)
    v29 = v41 + 1;
  v41 = v29;
  __s[v29] = 0;
  v30 = __s;
  if (!__s)
    goto LABEL_62;
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_63;
  v32 = result;
  if (result <= 0x16)
  {
    a2[23] = result;
    v33 = &a2[result];
    if (a2 > v30)
      goto LABEL_59;
    goto LABEL_58;
  }
  v34 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((result | 7) != 0x17)
    v34 = result | 7;
  v35 = v34 + 1;
  result = (unint64_t)operator new(v34 + 1);
  *((_QWORD *)a2 + 1) = v32;
  *((_QWORD *)a2 + 2) = v35 | 0x8000000000000000;
  *(_QWORD *)a2 = result;
  a2 = (char *)result;
  v33 = (char *)(result + v32);
  if (result <= (unint64_t)v30)
  {
LABEL_58:
    if (v33 <= v30)
      goto LABEL_59;
    goto LABEL_62;
  }
LABEL_59:
  if (v32)
    result = (unint64_t)memmove(a2, v30, v32);
  *v33 = 0;
  return result;
}

uint64_t webrtc::internal::VideoSendStreamImpl::VideoSendStreamImpl(uint64_t a1, uint64_t *a2, unsigned int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int *a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t *a14)
{
  uint64_t v17;
  uint64_t *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  int v43;
  uint64_t v44;
  int *p_p;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v50;
  void *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  char *v56;
  uint64_t v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (***v67)(_QWORD);
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  BOOL v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  BOOL v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int v86;
  void *v87;
  uint64_t v88;
  unsigned int v89;
  char *v90;
  char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  const char *v97;
  uint64_t v98;
  float v99;
  double *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  unint64_t v110;
  BOOL v111;
  int v112;
  int v113;
  const char *v114;
  uint64_t v115;
  _BOOL4 v116;
  unint64_t v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t **v123;
  uint64_t **v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  BOOL v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  void **v152;
  uint64_t v153;
  uint64_t v156;
  uint64_t v157;
  uint64_t v160;
  _DWORD *v161;
  webrtc::VideoSendStream::Config *__sz;
  std::string v163;
  void (***v164)(_QWORD);
  uint64_t v165;
  char *v166;
  void **v167;
  void *__p;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  __int128 v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD v181[3];
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  int v187;
  char v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  _QWORD v194[3];
  _QWORD *v195;
  void **v196;
  char *v197;
  unint64_t v198;
  unsigned __int8 v199;
  char v200;
  uint64_t v201;

  v201 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = &unk_24C0C48C0;
  v157 = a1 + 8;
  *(_QWORD *)(a1 + 16) = &unk_24C0C48E8;
  v156 = a1 + 16;
  *(_QWORD *)a1 = off_24C0C4820;
  v17 = *a2;
  *(_QWORD *)(a1 + 24) = *a2;
  v18 = (uint64_t *)(a1 + 24);
  if (v17)
  {
    v19 = (unsigned int *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 48) = v21;
  *(_QWORD *)(a1 + 64) = a5;
  webrtc::SendStatisticsProxy::SendStatisticsProxy(a1 + 72, *(_QWORD *)(a1 + 40), a9, a10[34], *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 1048) = &off_24C0C4930;
  *(_QWORD *)(a1 + 1056) = a1 + 72;
  *(_QWORD *)(a1 + 1064) = a8;
  __sz = (webrtc::VideoSendStream::Config *)(a1 + 1072);
  webrtc::RtpConfig::RtpConfig(a1 + 1072, a9);
  *(_OWORD *)(a1 + 1336) = *(_OWORD *)(a9 + 264);
  v26 = *(_OWORD *)(a9 + 280);
  v27 = *(_OWORD *)(a9 + 296);
  v28 = *(_OWORD *)(a9 + 312);
  *(_WORD *)(a1 + 1400) = *(_WORD *)(a9 + 328);
  *(_OWORD *)(a1 + 1368) = v27;
  *(_OWORD *)(a1 + 1384) = v28;
  *(_OWORD *)(a1 + 1352) = v26;
  v29 = *(_QWORD *)(a9 + 336);
  *(_QWORD *)(a9 + 336) = 0;
  *(_QWORD *)(a1 + 1408) = v29;
  v30 = *(_QWORD *)(a9 + 344);
  *(_QWORD *)(a1 + 1416) = v30;
  *(_DWORD *)(a1 + 1424) = 65537;
  *(_BYTE *)(a1 + 1428) = 0;
  v31 = *(_DWORD *)(a9 + 352);
  *(_DWORD *)(a1 + 1424) = v31;
  *(_BYTE *)(a1 + 1428) = *(_BYTE *)(a9 + 356);
  v32 = *(_QWORD *)(a9 + 360);
  *(_QWORD *)(a9 + 360) = 0;
  *(_QWORD *)(a1 + 1432) = v32;
  v160 = a5;
  v161 = a10 + 34;
  *(_DWORD *)(a1 + 1440) = a10[34];
  v33 = *a14;
  if (*a14)
  {
    *a14 = 0;
    *(_QWORD *)(a1 + 1448) = v33;
    goto LABEL_63;
  }
  v153 = *(_QWORD *)(a1 + 32);
  v34 = *(_QWORD *)(a1 + 1168);
  v35 = *(_QWORD *)(a1 + 1176);
  if (v34 == v35)
    goto LABEL_36;
  if (!HIBYTE(v31))
  {
    while (1)
    {
      if (*(char *)(v34 + 23) < 0)
      {
        v36 = *(_QWORD *)(v34 + 8);
        if (v36 < 0)
          goto LABEL_223;
        v37 = *(const void **)v34;
        if (v36 && v37 == 0)
          goto LABEL_223;
      }
      else
      {
        v36 = *(unsigned __int8 *)(v34 + 23);
        v37 = (const void *)v34;
      }
      if (v36 == 70
        && !memcmp("http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00", v37, 0x46uLL)
        && !*(_BYTE *)(v34 + 28))
      {
        goto LABEL_35;
      }
      v34 += 32;
      if (v34 == v35)
        goto LABEL_36;
    }
  }
  v39 = 0;
  do
  {
    if (*(char *)(v34 + 23) < 0)
    {
      v40 = *(_QWORD *)(v34 + 8);
      if (v40 < 0)
        goto LABEL_223;
      v41 = *(const void **)v34;
      if (v40 && v41 == 0)
        goto LABEL_223;
    }
    else
    {
      v40 = *(unsigned __int8 *)(v34 + 23);
      v41 = (const void *)v34;
    }
    if (v40 == 70 && !memcmp("http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00", v41, 0x46uLL))
    {
      v39 = v34;
      if (*(_BYTE *)(v34 + 28))
        goto LABEL_35;
    }
    v34 += 32;
  }
  while (v34 != v35);
  if (!v39)
  {
LABEL_36:
    (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v153 + 16))(&__p, v153, "WebRTC-Target-Bitrate-Rtcp", 26);
    if (SHIBYTE(v170) < 0)
    {
      v46 = (unint64_t)v169;
      if (((unint64_t)v169 & 0x8000000000000000) != 0)
        goto LABEL_223;
      p_p = (int *)__p;
      if (v169)
      {
        if (!__p)
          goto LABEL_223;
      }
    }
    else
    {
      p_p = (int *)&__p;
      v46 = HIBYTE(v170);
    }
    if (v46 >= 7)
    {
      v47 = *p_p;
      v48 = *(int *)((char *)p_p + 3);
      v43 = v47 != 1650552389 || v48 != 1684368482;
      v44 = a3;
      if ((v170 & 0x8000000000000000) == 0)
        goto LABEL_52;
    }
    else
    {
      v43 = 1;
      v44 = a3;
      if ((v170 & 0x8000000000000000) == 0)
      {
LABEL_52:
        v30 = *(_QWORD *)(a1 + 1416);
        goto LABEL_53;
      }
    }
    operator delete(__p);
    goto LABEL_52;
  }
LABEL_35:
  v43 = 2;
  v44 = a3;
LABEL_53:
  (*(void (**)(void ***__return_ptr, _QWORD, const char *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 48) + 16))(&v167, *(_QWORD *)(a1 + 48), "EncoderQueue", 12, 0);
  v50 = (uint64_t)v167;
  v51 = (void *)operator new();
  webrtc::OveruseFrameDetector::OveruseFrameDetector((uint64_t)v51, v18, a1 + 72);
  webrtc::FrameCadenceAdapterInterface::Create(v53, v50, a6, *v52, *(_QWORD *)(a1 + 32), (uint64_t *)&v166);
  v54 = operator new();
  v56 = v166;
  v55 = v167;
  v166 = 0;
  v167 = 0;
  __p = v51;
  v196 = v55;
  v197 = v56;
  LODWORD(v152) = v43;
  webrtc::VideoStreamEncoder::VideoStreamEncoder(v54, v18, v44, a1 + 72, (__int128 *)(a1 + 1336), (uint64_t *)&__p, (uint64_t *)&v197, (uint64_t *)&v196, (uint64_t)v152, v30);
  if (v196)
    (*(void (**)(void **))*v196)(v196);
  if (v197)
    (*(void (**)(char *))(*(_QWORD *)v197 + 8))(v197);
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  *(_QWORD *)(a1 + 1448) = v54;
  v57 = (uint64_t)v166;
  v166 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = v167;
  v167 = 0;
  if (v58)
    (*(void (**)(void **))*v58)(v58);
LABEL_63:
  v59 = *(_QWORD *)(a1 + 40);
  webrtc::SupportsPerLayerPictureLossIndication((_QWORD *)a10 + 4);
  v60 = *(_QWORD *)(a1 + 1448);
  v194[0] = &off_24C0C4958;
  v194[1] = a1;
  v195 = v194;
  webrtc::EncoderRtcpFeedback::EncoderRtcpFeedback(a1 + 1456, v59, v61, (size_t)__sz, v60, (uint64_t)v194);
  v62 = v195;
  if (v195 == v194)
  {
    v63 = 4;
    v62 = v194;
  }
  else
  {
    if (!v195)
      goto LABEL_68;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_68:
  v64 = *(unsigned int *)(a1 + 1376);
  v65 = *(_QWORD *)(a1 + 1384);
  __p = a4;
  v169 = (void *)(a1 + 1456);
  v170 = a1 + 1464;
  v171 = a1 + 80;
  v172 = (void *)(a1 + 96);
  v173 = a1 + 104;
  v174 = a1 + 112;
  v175 = a1 + 88;
  v176 = a1 + 1048;
  v66 = *a13;
  *a13 = 0;
  v197 = *(char **)(a1 + 1408);
  LODWORD(v198) = *(_DWORD *)(a1 + 1424);
  BYTE4(v198) = *(_BYTE *)(a1 + 1428);
  v67 = *(void (****)(_QWORD))(a1 + 1432);
  v164 = v67;
  v165 = v66;
  if (v67)
    (**v67)(v67);
  v152 = (void **)&v197;
  v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, webrtc::VideoSendStream::Config *, uint64_t, uint64_t, void **, uint64_t *))(*(_QWORD *)v160 + 24))(v160, a11, a12, __sz, v64, v65, &__p, &v165);
  if (v164)
    (*v164)[1](v164);
  v69 = v165;
  v165 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 1584) = v68;
  *(_BYTE *)(a1 + 1592) = 0;
  if (*(_BYTE *)(a1 + 1401))
  {
    v71 = 1;
  }
  else
  {
    if (*v161 == 1)
      v72 = "WebRTC-ProbingScreenshareBwe";
    else
      v72 = "WebRTC-StrictPacingAndProbing";
    if (*v161 == 1)
      v73 = 28;
    else
      v73 = 29;
    webrtc::AlrExperimentSettings::CreateFromFieldTrial(*v70, (uint64_t)v72, v73, (uint64_t)&__p);
    v71 = (_BYTE)v172 != 0;
  }
  *(_BYTE *)(a1 + 1593) = v71;
  v74 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 1600) = off_24C0B4170;
  *(_QWORD *)(a1 + 1608) = 0;
  *(_QWORD *)(a1 + 1624) = 0;
  *(_QWORD *)(a1 + 1616) = 0;
  *(_BYTE *)(a1 + 1655) = 6;
  if (a1 + 1632 <= (unint64_t)"factor" && a1 + 1638 > (unint64_t)"factor")
    goto LABEL_223;
  strcpy((char *)(a1 + 1632), "factor");
  *(_BYTE *)(a1 + 1656) = 0;
  *(_QWORD *)(a1 + 1600) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 1664) = 0x3FF199999999999ALL;
  *(_QWORD *)(a1 + 1672) = off_24C0B4170;
  *(_QWORD *)(a1 + 1680) = 0;
  *(_QWORD *)(a1 + 1696) = 0;
  *(_QWORD *)(a1 + 1688) = 0;
  *(_BYTE *)(a1 + 1727) = 9;
  if (a1 + 1704 <= (unint64_t)"max_delay" && a1 + 1713 > (unint64_t)"max_delay")
    goto LABEL_223;
  strcpy((char *)(a1 + 1704), "max_delay");
  *(_BYTE *)(a1 + 1728) = 0;
  *(_QWORD *)(a1 + 1672) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 1736) = 2000000;
  v197 = (char *)(a1 + 1600);
  v198 = a1 + 1672;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v74 + 16))(&__p, v74, "WebRTC-Video-Pacing", 19);
  if (SHIBYTE(v170) < 0)
  {
    v75 = (uint64_t)v169;
    if (((unint64_t)v169 & 0x8000000000000000) != 0)
      goto LABEL_223;
    v76 = (char *)__p;
    if (v169)
    {
      if (!__p)
        goto LABEL_223;
    }
  }
  else
  {
    v75 = HIBYTE(v170);
    v76 = (char *)&__p;
  }
  webrtc::ParseFieldTrial(&v197, 2, v76, v75);
  if (SHIBYTE(v170) < 0)
    operator delete(__p);
  *(_QWORD *)(a1 + 1752) = 0;
  *(_WORD *)(a1 + 1760) = 0;
  *(_QWORD *)(a1 + 1768) = a7;
  v78 = *((_QWORD *)a10 + 21);
  v77 = *((_QWORD *)a10 + 22);
  if (v78 == v77)
  {
    v80 = 0;
  }
  else
  {
    v79 = v78 + 96;
    do
    {
      v80 = *(_BYTE *)(v79 - 14) != 0;
      if (*(_BYTE *)(v79 - 14))
        v81 = 1;
      else
        v81 = v79 == v77;
      v79 += 96;
    }
    while (!v81);
  }
  *(_BYTE *)(a1 + 1776) = v80;
  *(_BYTE *)(a1 + 1777) = 1;
  *(_QWORD *)(a1 + 1780) = 0;
  v82 = a10[39];
  if (v82 <= 0)
    v82 = 10000000;
  *(_DWORD *)(a1 + 1788) = v82;
  *(_DWORD *)(a1 + 1792) = 0;
  *(_QWORD *)(a1 + 1800) = *((_QWORD *)a10 + 20);
  if ((*(char *)(a1 + 1215) & 0x80000000) == 0)
  {
    v163 = *(std::string *)(a1 + 1192);
    v83 = *v70;
    if (webrtc::PayloadStringToCodecType((uint64_t)&v163) == 3)
      goto LABEL_107;
LABEL_112:
    v86 = 0;
    goto LABEL_120;
  }
  std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)(a1 + 1192), *(_QWORD *)(a1 + 1200));
  v83 = *v70;
  if (webrtc::PayloadStringToCodecType((uint64_t)&v163) != 3)
    goto LABEL_112;
LABEL_107:
  __p = off_24C0B4170;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  HIBYTE(v174) = 7;
  if (&v172 <= (void **)"bitrate" && (char *)&v172 + 7 > "bitrate")
    goto LABEL_223;
  strcpy((char *)&v172, "bitrate");
  LOBYTE(v175) = 0;
  __p = &unk_24C0B4020;
  HIDWORD(v175) = 0;
  v196 = &__p;
  (*(void (**)(char **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v83 + 16))(&v197, v83, "WebRTC-AV1-OverridePriorityBitrate", 34);
  if (((char)v199 & 0x80000000) == 0)
  {
    v84 = v199;
    v85 = (char *)&v197;
    goto LABEL_116;
  }
  v84 = v198;
  if ((v198 & 0x8000000000000000) != 0 || (v85 = v197, v198) && !v197)
  {
LABEL_223:
    __break(1u);
LABEL_224:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_send_stream_impl.cc", 473, "AlrExperimentSettings::MaxOneFieldTrialEnabled(env_.field_trials())", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v22, v23, v24, v25, (uint64_t)v152);
  }
LABEL_116:
  webrtc::ParseFieldTrial(&v196, 1, v85, v84);
  if ((char)v199 < 0)
  {
    operator delete(v197);
    v86 = HIDWORD(v175);
    __p = off_24C0B4170;
    if ((SHIBYTE(v174) & 0x80000000) == 0)
    {
LABEL_118:
      v87 = v169;
      if (!v169)
        goto LABEL_120;
      goto LABEL_119;
    }
  }
  else
  {
    v86 = HIDWORD(v175);
    __p = off_24C0B4170;
    if ((SHIBYTE(v174) & 0x80000000) == 0)
      goto LABEL_118;
  }
  operator delete(v172);
  v87 = v169;
  if (v169)
  {
LABEL_119:
    v170 = (uint64_t)v87;
    operator delete(v87);
  }
LABEL_120:
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 1808) = v86;
  v88 = operator new();
  *(_DWORD *)v88 = 0;
  *(_BYTE *)(v88 + 4) = 1;
  *(_QWORD *)(a1 + 1816) = v88;
  do
    v89 = __ldxr((unsigned int *)v88);
  while (__stxr(v89 + 1, (unsigned int *)v88));
  *(_BYTE *)(a1 + 1824) = 0;
  *(_BYTE *)(a1 + 2176) = 0;
  v90 = *(char **)(a1 + 1168);
  v91 = *(char **)(a1 + 1176);
  if (v90 == v91)
  {
    *(_QWORD *)(a1 + 2184) = 0;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_157;
  }
  else
  {
    v92 = *(_DWORD *)(a1 + 1440);
    v93 = *(_QWORD *)(a1 + 32);
    while (1)
    {
      if (v90[23] < 0)
      {
        v94 = *((_QWORD *)v90 + 1);
        if (v94 < 0)
          goto LABEL_223;
        v95 = *(char **)v90;
        if (v94 && v95 == 0)
          goto LABEL_223;
      }
      else
      {
        v94 = v90[23];
        v95 = v90;
      }
      if (v94 == 73
        && !memcmp(v95, "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01", 0x49uLL))
      {
        break;
      }
      v90 += 32;
      if (v90 == v91)
      {
        *(_QWORD *)(a1 + 2184) = 0;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          goto LABEL_155;
        goto LABEL_157;
      }
    }
    if (v92 == 1)
      v97 = "WebRTC-ProbingScreenshareBwe";
    else
      v97 = "WebRTC-StrictPacingAndProbing";
    if (v92 == 1)
      v98 = 28;
    else
      v98 = 29;
    webrtc::AlrExperimentSettings::CreateFromFieldTrial(v93, (uint64_t)v97, v98, (uint64_t)&v197);
    if (v200)
    {
      v99 = *(float *)&v197;
    }
    else
    {
      webrtc::RateControlSettings::RateControlSettings((uint64_t)&__p, v93);
      v100 = (double *)&v173;
      if (!(_BYTE)v174)
        v100 = (double *)(a1 + 1664);
      v99 = *v100;
    }
    *(_QWORD *)(a1 + 2184) = LODWORD(v99) | 0x100000000;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_157;
  }
LABEL_155:
  webrtc::VideoSendStream::Config::ToString(__sz, (char *)&__p);
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v101, v102, v103, v104, v105, v106, v107, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_send_stream_impl.cc");
  if (SHIBYTE(v170) < 0)
    operator delete(__p);
LABEL_157:
  v108 = *v70;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)*v70 + 16))(&__p, *v70, "WebRTC-StrictPacingAndProbing", 29);
  v109 = (void *)HIBYTE(v170);
  if (v170 < 0)
    v109 = v169;
  if (v109)
  {
    (*(void (**)(char **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v108 + 16))(&v197, v108, "WebRTC-ProbingScreenshareBwe", 28);
    v110 = v198;
    if ((v199 & 0x80u) == 0)
      v110 = v199;
    v111 = v110 == 0;
    if ((char)v199 < 0)
      operator delete(v197);
    if (v170 < 0)
      goto LABEL_165;
  }
  else
  {
    v111 = 1;
    if (v170 < 0)
LABEL_165:
      operator delete(__p);
  }
  if (!v111)
    goto LABEL_224;
  v112 = *(unsigned __int8 *)(a1 + 2188);
  if (*(_BYTE *)(a1 + 2188))
  {
    v113 = *(_DWORD *)(a1 + 1440);
    if (v113 == 1)
      v114 = "WebRTC-ProbingScreenshareBwe";
    else
      v114 = "WebRTC-StrictPacingAndProbing";
    if (v113 == 1)
      v115 = 28;
    else
      v115 = 29;
    webrtc::AlrExperimentSettings::CreateFromFieldTrial(*(_QWORD *)(a1 + 32), (uint64_t)v114, v115, (uint64_t)&v197);
    if (v200)
    {
      v116 = 1;
      v117 = v198;
    }
    else
    {
      webrtc::RateControlSettings::RateControlSettings((uint64_t)&__p, *(_QWORD *)(a1 + 32));
      v116 = (_BYTE)v175 != 0;
      v119 = *(_QWORD *)(a1 + 1736);
      if ((v119 & 0x8000000000000000) != 0)
      {
        v120 = -(uint64_t)v119;
        v121 = v120 / 0x3E8;
        if (v120 % 0x3E8 <= 0x1F4)
          v122 = 0;
        else
          v122 = -1;
        v117 = v122 - v121;
      }
      else if (v119 % 0x3E8 <= 0x1F3)
      {
        v117 = v119 / 0x3E8;
      }
      else
      {
        v117 = v119 / 0x3E8 + 1;
      }
    }
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 64) + 96))(*(_QWORD *)(a1 + 64), v117);
    v118 = *(unsigned __int8 *)(a1 + 1401);
    if (v118 | v112)
      goto LABEL_189;
  }
  else
  {
    v116 = 0;
    v118 = *(unsigned __int8 *)(a1 + 1401);
    if (v118 | v112)
LABEL_189:
      (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v160 + 160))(v160, (v118 | v116) != 0);
  }
  if (*(_BYTE *)(a1 + 2188))
    (*(void (**)(_QWORD, float))(**(_QWORD **)(a1 + 64) + 88))(*(_QWORD *)(a1 + 64), *(float *)(a1 + 2184));
  v123 = *(uint64_t ***)(a1 + 1168);
  v124 = *(uint64_t ***)(a1 + 1176);
  if (v123 == v124)
  {
LABEL_215:
    v135 = 1;
  }
  else
  {
    while (1)
    {
      if (*((char *)v123 + 23) < 0)
      {
        v125 = v123[1];
        if (((unint64_t)v125 & 0x8000000000000000) != 0)
          goto LABEL_223;
        v126 = *v123;
        if (v125 && v126 == 0)
          goto LABEL_223;
      }
      else
      {
        v125 = (uint64_t *)*((unsigned __int8 *)v123 + 23);
        v126 = (uint64_t *)v123;
      }
      if (v125 == (uint64_t *)26)
      {
        v128 = *v126;
        v129 = v126[1];
        v130 = v126[2];
        v131 = *((unsigned __int16 *)v126 + 12);
        v132 = v128 == *(_QWORD *)"urn:3gpp:video-orientation" && v129 == *(_QWORD *)":video-orientation";
        v133 = v132 && v130 == *(_QWORD *)"rientation";
        if (v133 && v131 == *(unsigned __int16 *)"on")
          break;
      }
      v123 += 4;
      if (v123 == v124)
        goto LABEL_215;
    }
    v135 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 1448) + 40))(*(_QWORD *)(a1 + 1448), v156, v135);
  v136 = *(_QWORD *)(a1 + 1448);
  v137 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768), v157);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v136 + 48))(v136, v137);
  v138 = *(_QWORD *)(a1 + 1584);
  if (v138)
    v139 = v138 + 8;
  else
    v139 = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1448) + 80))(*(_QWORD *)(a1 + 1448), v139);
  v177 = *a10;
  v178 = *(_OWORD *)(a10 + 2);
  *((_QWORD *)a10 + 1) = 0;
  *((_QWORD *)a10 + 2) = 0;
  v140 = *((_QWORD *)a10 + 3);
  v141 = (_QWORD *)*((_QWORD *)a10 + 4);
  *((_QWORD *)a10 + 3) = 0;
  v179 = v140;
  v180 = v141;
  v142 = a10 + 10;
  v143 = *((_QWORD *)a10 + 5);
  v144 = *((_QWORD *)a10 + 6);
  v181[0] = v143;
  v181[1] = v144;
  if (v144)
  {
    *(_QWORD *)(v143 + 16) = v181;
    *((_QWORD *)a10 + 4) = v142;
    *v142 = 0;
    *((_QWORD *)a10 + 6) = 0;
  }
  else
  {
    v180 = v181;
  }
  v145 = *((_QWORD *)a10 + 7);
  v146 = *((_OWORD *)a10 + 5);
  v182 = *((_OWORD *)a10 + 4);
  v183 = v146;
  v147 = *((_QWORD *)a10 + 12);
  v181[2] = v145;
  v184 = v147;
  *((_QWORD *)a10 + 7) = 0;
  v148 = *(_OWORD *)(a10 + 26);
  *((_QWORD *)a10 + 13) = 0;
  *((_QWORD *)a10 + 14) = 0;
  v185 = v148;
  v186 = *(_OWORD *)(a10 + 30);
  *((_QWORD *)a10 + 15) = 0;
  *((_QWORD *)a10 + 16) = 0;
  LODWORD(v145) = *v161;
  v188 = *((_BYTE *)a10 + 140);
  v187 = v145;
  v149 = *((_QWORD *)a10 + 18);
  *((_QWORD *)a10 + 18) = 0;
  v190 = *(_OWORD *)(a10 + 38);
  v191 = *(_OWORD *)(a10 + 42);
  v150 = *((_QWORD *)a10 + 23);
  v189 = v149;
  v192 = v150;
  *((_QWORD *)a10 + 21) = 0;
  *((_QWORD *)a10 + 22) = 0;
  *((_QWORD *)a10 + 23) = 0;
  v193 = *((_OWORD *)a10 + 12);
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 48))(a1, &v177);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v177);
  return a1;
}

void webrtc::internal::VideoSendStreamImpl::~VideoSendStreamImpl(webrtc::internal::VideoSendStreamImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  void *v16;
  void *v17;
  webrtc::internal::VideoSendStreamImpl *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  void *__p;
  char v29;

  *(_QWORD *)this = off_24C0C4820;
  *((_QWORD *)this + 1) = &unk_24C0C48C0;
  *((_QWORD *)this + 2) = &unk_24C0C48E8;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    webrtc::VideoSendStream::Config::ToString((webrtc::internal::VideoSendStreamImpl *)((char *)this + 1072), (char *)&__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_send_stream_impl.cc");
    if (v29 < 0)
      operator delete(__p);
  }
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 8) + 32))(*((_QWORD *)this + 8), *((_QWORD *)this + 198));
  v9 = *((_QWORD *)this + 227);
  *(_BYTE *)(v9 + 4) = 0;
  do
  {
    v10 = __ldaxr((unsigned int *)v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, (unsigned int *)v9));
  if (!v11)
    MEMORY[0x20BD0ADEC]();
  v12 = (unsigned int *)*((_QWORD *)this + 219);
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      MEMORY[0x20BD0ADEC]();
  }
  *((_QWORD *)this + 209) = off_24C0B4170;
  if ((*((char *)this + 1727) & 0x80000000) == 0)
  {
    v15 = (void *)*((_QWORD *)this + 210);
    if (!v15)
      goto LABEL_15;
    goto LABEL_14;
  }
  operator delete(*((void **)this + 213));
  v15 = (void *)*((_QWORD *)this + 210);
  if (v15)
  {
LABEL_14:
    *((_QWORD *)this + 211) = v15;
    operator delete(v15);
  }
LABEL_15:
  *((_QWORD *)this + 200) = off_24C0B4170;
  if ((*((char *)this + 1655) & 0x80000000) == 0)
  {
    v16 = (void *)*((_QWORD *)this + 201);
    if (!v16)
      goto LABEL_18;
    goto LABEL_17;
  }
  operator delete(*((void **)this + 204));
  v16 = (void *)*((_QWORD *)this + 201);
  if (v16)
  {
LABEL_17:
    *((_QWORD *)this + 202) = v16;
    operator delete(v16);
  }
LABEL_18:
  *((_QWORD *)this + 182) = &off_24C0B3C80;
  *((_QWORD *)this + 183) = &unk_24C0B3CB0;
  v17 = (void *)*((_QWORD *)this + 194);
  if (v17)
  {
    *((_QWORD *)this + 195) = v17;
    operator delete(v17);
  }
  v18 = (webrtc::internal::VideoSendStreamImpl *)*((_QWORD *)this + 192);
  if (v18 == (webrtc::internal::VideoSendStreamImpl *)((char *)this + 1512))
  {
    v19 = 4;
    v18 = (webrtc::internal::VideoSendStreamImpl *)((char *)this + 1512);
  }
  else
  {
    if (!v18)
      goto LABEL_29;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_29:
  v20 = (void *)*((_QWORD *)this + 185);
  if (v20)
  {
    *((_QWORD *)this + 186) = v20;
    operator delete(v20);
  }
  v21 = *((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 179);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 176);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  webrtc::RtpConfig::~RtpConfig((webrtc::internal::VideoSendStreamImpl *)((char *)this + 1072));
  webrtc::SendStatisticsProxy::~SendStatisticsProxy((webrtc::internal::VideoSendStreamImpl *)((char *)this + 72));
  v24 = (unsigned int *)*((_QWORD *)this + 3);
  if (v24)
  {
    v25 = v24 + 2;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
  }
}

{
  webrtc::internal::VideoSendStreamImpl::~VideoSendStreamImpl(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::internal::VideoSendStreamImpl::~VideoSendStreamImpl(webrtc::internal::VideoSendStreamImpl *this)
{
  webrtc::internal::VideoSendStreamImpl::~VideoSendStreamImpl((webrtc::internal::VideoSendStreamImpl *)((char *)this - 8));
}

{
  webrtc::internal::VideoSendStreamImpl::~VideoSendStreamImpl((webrtc::internal::VideoSendStreamImpl *)((char *)this - 16));
}

{
  webrtc::internal::VideoSendStreamImpl::~VideoSendStreamImpl((webrtc::internal::VideoSendStreamImpl *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::internal::VideoSendStreamImpl::~VideoSendStreamImpl((webrtc::internal::VideoSendStreamImpl *)((char *)this - 16));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::internal::VideoSendStreamImpl::AddAdaptationResource(uint64_t a1, void (****a2)(_QWORD))
{
  uint64_t v2;
  void (***v3)(_QWORD);
  uint64_t result;
  void (***v5)(_QWORD);

  v2 = *(_QWORD *)(a1 + 1448);
  v3 = *a2;
  v5 = v3;
  if (v3)
    (**v3)(v3);
  (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v2 + 16))(v2, &v5);
  result = (uint64_t)v5;
  if (v5)
    return ((uint64_t (*)(_QWORD))(*v5)[1])(v5);
  return result;
}

uint64_t webrtc::internal::VideoSendStreamImpl::GetAdaptationResources(webrtc::internal::VideoSendStreamImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 181) + 24))(*((_QWORD *)this + 181));
}

uint64_t webrtc::internal::VideoSendStreamImpl::SetSource(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 32))(*(_QWORD *)(a1 + 1448));
}

void webrtc::internal::VideoSendStreamImpl::ReconfigureVideoEncoder(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];
  void (*v13)(uint64_t, _BYTE *, _BYTE *);
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[3];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v15 = *a2;
  v16 = *(_OWORD *)(a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v2 = *((_QWORD *)a2 + 3);
  v3 = (_QWORD *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 3) = 0;
  v17 = v2;
  v18 = v3;
  v4 = a2 + 10;
  v5 = *((_QWORD *)a2 + 5);
  v6 = *((_QWORD *)a2 + 6);
  v19[0] = v5;
  v19[1] = v6;
  if (v6)
  {
    *(_QWORD *)(v5 + 16) = v19;
    *((_QWORD *)a2 + 4) = v4;
    *v4 = 0;
    *((_QWORD *)a2 + 6) = 0;
  }
  else
  {
    v18 = v19;
  }
  v19[2] = *((_QWORD *)a2 + 7);
  v7 = *((_OWORD *)a2 + 5);
  v20 = *((_OWORD *)a2 + 4);
  v21 = v7;
  v22 = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 7) = 0;
  v8 = *(_OWORD *)(a2 + 26);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  v23 = v8;
  v24 = *(_OWORD *)(a2 + 30);
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  v9 = a2[34];
  v26 = *((_BYTE *)a2 + 140);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = 0;
  v28 = *(_OWORD *)(a2 + 38);
  v29 = *(_OWORD *)(a2 + 42);
  v11 = *((_QWORD *)a2 + 23);
  v27 = v10;
  v30 = v11;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  v31 = *((_OWORD *)a2 + 12);
  v13 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
  v14 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 56))(a1, &v15, v12);
  v13(1, v12, v12);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v15);
}

void webrtc::internal::VideoSendStreamImpl::ReconfigureVideoEncoder(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v37;
  int v38;
  _BOOL4 v39;
  int v40;
  int v41;
  int v42;
  _BOOL4 v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[16];
  __int128 v76;
  void *__p;
  char v78;
  int v79;
  __int128 v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD v83[3];
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  int v89;
  char v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  _BYTE v96[22];
  char v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
    goto LABEL_4;
  webrtc::VideoEncoderConfig::ToString(a2, v96);
  webrtc::VideoSendStream::Config::ToString((webrtc::VideoSendStream::Config *)(a1 + 1072), (char *)&__p);
  rtc::webrtc_logging_impl::Log("\r\t\n\t\n", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_send_stream_impl.cc");
  if (v78 < 0)
  {
    operator delete(__p);
    if (v97 < 0)
      goto LABEL_21;
LABEL_4:
    v13 = *(_QWORD *)(a2 + 168);
    v14 = *(_QWORD *)(a2 + 176);
    v15 = (_QWORD *)(a2 + 168);
    if (v13 != v14)
      goto LABEL_5;
    goto LABEL_7;
  }
  if ((v97 & 0x80000000) == 0)
    goto LABEL_4;
LABEL_21:
  operator delete(*(void **)v96);
  v13 = *(_QWORD *)(a2 + 168);
  v14 = *(_QWORD *)(a2 + 176);
  v15 = (_QWORD *)(a2 + 168);
  if (v13 == v14)
  {
LABEL_7:
    *(_BYTE *)(a1 + 1776) = 0;
    goto LABEL_8;
  }
LABEL_5:
  while (!*(_BYTE *)(v13 + 82))
  {
    v13 += 96;
    if (v13 == v14)
      goto LABEL_7;
  }
  *(_BYTE *)(a1 + 1776) = 1;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1584) + 40))(*(_QWORD *)(a1 + 1584))
    && !*(_QWORD *)(a1 + 1752))
  {
    webrtc::internal::VideoSendStreamImpl::StartupVideoSendStream((webrtc::internal::VideoSendStreamImpl *)a1);
    goto LABEL_24;
  }
  if (*(_BYTE *)(a1 + 1776))
    goto LABEL_24;
LABEL_8:
  if (*(_QWORD *)(a1 + 1752))
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1768) + 8))(*(_QWORD *)(a1 + 1768), a1 + 8);
    v16 = *(_QWORD *)(a1 + 1752);
    if (v16)
    {
      *(_BYTE *)(v16 + 4) = 0;
      do
      {
        v17 = __ldaxr((unsigned int *)v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v16));
      if (!v18)
        MEMORY[0x20BD0ADEC]();
      *(_QWORD *)(a1 + 1752) = 0;
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))(**(_QWORD **)(a1 + 1448) + 72))(*(_QWORD *)(a1 + 1448), 0, 0, 0, 0, 0, 0.0);
    webrtc::SendStatisticsProxy::OnSetEncoderTargetRate((webrtc::SendStatisticsProxy *)(a1 + 72), 0);
  }
LABEL_24:
  v19 = *(_QWORD *)(a1 + 1448);
  v79 = *(_DWORD *)a2;
  v80 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v20 = *(_QWORD *)(a2 + 24);
  v21 = *(_QWORD **)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  v81 = v20;
  v82 = v21;
  v22 = (_QWORD *)(a2 + 40);
  v23 = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v83[0] = v23;
  v83[1] = v24;
  if (v24)
  {
    *(_QWORD *)(v23 + 16) = v83;
    *(_QWORD *)(a2 + 32) = v22;
    *v22 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    v82 = v83;
  }
  v25 = *(_OWORD *)(a2 + 80);
  v84 = *(_OWORD *)(a2 + 64);
  v83[2] = *(_QWORD *)(a2 + 56);
  v85 = v25;
  v86 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 56) = 0;
  v26 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v87 = v26;
  v88 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v27 = *(_DWORD *)(a2 + 136);
  v90 = *(_BYTE *)(a2 + 140);
  v89 = v27;
  v28 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  v92 = *(_OWORD *)(a2 + 152);
  v93 = *(_OWORD *)(a2 + 168);
  v29 = *(_QWORD *)(a2 + 184);
  v91 = v28;
  v94 = v29;
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  v95 = *(_OWORD *)(a2 + 192);
  v30 = *(_QWORD *)(a1 + 1152);
  v31 = *(_QWORD *)(a1 + 1168);
  v32 = *(_QWORD *)(a1 + 1176);
  if (v31 == v32)
  {
    v62 = 0;
    v63 = 12;
    if ((*(_DWORD *)(a1 + 1240) & 0x80000000) != 0)
      goto LABEL_162;
    goto LABEL_159;
  }
  memset(v96, 0, sizeof(v96));
  v33 = (v32 - v31) & 0xFFFFFFFFFFFFFFE0;
  while ((*(char *)(v31 + 23) & 0x80000000) == 0)
  {
    v34 = *(unsigned __int8 *)(v31 + 23);
    v35 = (_QWORD *)v31;
LABEL_30:
    webrtc::RtpHeaderExtensionMap::RegisterByUri((webrtc::RtpHeaderExtensionMap *)v96, *(_DWORD *)(v31 + 24), v35, v34);
    v31 += 32;
    v33 -= 32;
    if (!v33)
      goto LABEL_39;
  }
  v34 = *(_QWORD *)(v31 + 8);
  if ((v34 & 0x8000000000000000) == 0)
  {
    v35 = *(_QWORD **)v31;
    if (!v34 || v35 != 0)
      goto LABEL_30;
  }
  __break(1u);
LABEL_39:
  if (v96[5] <= 0xEu)
    v37 = 1;
  else
    v37 = 2;
  if (v96[6] <= 0xEu)
    v38 = v37;
  else
    v38 = 2;
  v39 = v96[5] != 0;
  if (v96[5])
    v40 = 3;
  else
    v40 = 0;
  if (v96[5])
    v41 = 2;
  else
    v41 = 1;
  if (v96[6])
    v42 = v38;
  else
    v42 = v37;
  if (v96[6])
    v43 = v41;
  else
    v43 = v96[5] != 0;
  if (v96[6])
    v44 = v40 | 0x10;
  else
    v44 = v40;
  v45 = v44 + 3;
  if (v96[1])
    v46 = v43 + 1;
  else
    v46 = v43;
  if (!v96[1])
    v45 = v44;
  v47 = v45 + 2;
  if (v96[8])
    v48 = v46 + 1;
  else
    v48 = v46;
  if (!v96[8])
    v47 = v45;
  if (v96[10])
  {
    ++v48;
    v47 += 3;
  }
  if (v96[7])
  {
    ++v48;
    ++v47;
  }
  if (v96[11])
  {
    ++v48;
    v49 = v47 + 1;
  }
  else
  {
    v49 = v47;
  }
  if (v96[13])
  {
    ++v48;
    v49 += 13;
  }
  if (v96[14])
  {
    ++v48;
    v49 += 16;
  }
  if (v96[15])
    v50 = v48 + 1;
  else
    v50 = v48;
  if (v96[15])
    v49 += 16;
  if (v96[16] > 0xEu
    || v96[15] > 0xEu
    || v96[14] > 0xEu
    || v96[13] > 0xEu
    || v96[11] > 0xEu
    || v96[7] > 0xEu
    || v96[10] > 0xEu
    || v96[8] > 0xEu
    || v96[1] > 0xEu)
  {
    v60 = 2;
  }
  else
  {
    v60 = v42;
  }
  if (v96[16])
    v61 = v50 + 1;
  else
    v61 = v50;
  if (v96[16])
    v49 += 16;
  if (v96[17])
  {
    if (v96[17] > 0xEu)
      v60 = 2;
    v49 += 16;
    ++v61;
LABEL_128:
    v63 = ((v49 + v61 * v60 + 7) & 0xFFFFFFFC) + 12;
  }
  else
  {
    if (v49)
      goto LABEL_128;
    v63 = 12;
  }
  if (v96[1])
  {
    v39 = v41;
    v40 += 3;
  }
  if (v96[8])
    v40 += 2;
  if (v96[10])
    v40 += 3;
  v67 = v96[5] > 0xEu || v96[1] > 0xEu || v96[8] > 0xEu || v96[10] > 0xEu || v96[16] > 0xEu;
  v68 = v39 + (v96[8] != 0) + (v96[10] != 0);
  v69 = v40 + 16;
  if (v67)
    v70 = 2;
  else
    v70 = 1;
  v71 = v68 + (v96[16] != 0);
  if (!v96[16])
    v69 = v40;
  if (!v96[13])
  {
    if (v69)
    {
      v62 = (v69 + v71 * v70 + 7) & 0xFFFFFFFC;
      if ((*(_DWORD *)(a1 + 1240) & 0x80000000) != 0)
        goto LABEL_162;
    }
    else
    {
      v62 = 0;
      if ((*(_DWORD *)(a1 + 1240) & 0x80000000) != 0)
        goto LABEL_162;
    }
    goto LABEL_159;
  }
  if (v96[13] > 0xEu)
    v70 = 2;
  v62 = (v69 + 13 + (v71 + 1) * v70 + 7) & 0xFFFFFFFC;
  if ((*(_DWORD *)(a1 + 1240) & 0x80000000) == 0)
  {
LABEL_159:
    v72 = v62 + v63 + 32;
    goto LABEL_165;
  }
LABEL_162:
  v73 = v62 + 18;
  if (*(int *)(a1 + 1228) < 0)
    v73 = 0;
  v72 = v73 + v63 + (*(_DWORD *)(a1 + 1232) >= 0);
LABEL_165:
  if (*(int *)(a1 + 1296) >= 0)
    v72 += 2;
  v74 = v30 - v72;
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a3 + 16))(0, a3, v75);
  v76 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a3 + 24) = 0;
  (*(void (**)(uint64_t, int *, uint64_t, _BYTE *))(*(_QWORD *)v19 + 96))(v19, &v79, v74, v75);
  ((void (*)(uint64_t, _BYTE *, _BYTE *))v76)(1, v75, v75);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v79);
}

void webrtc::internal::VideoSendStreamImpl::StartupVideoSendStream(webrtc::internal::VideoSendStreamImpl *this)
{
  void (***v2)(_QWORD, char *, uint64_t *);
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  _QWORD *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  void *__p;
  void *v20;
  uint64_t v21;
  char v22;
  __n128 v23;
  __n128 (*v24)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v25)(uint64_t *);
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v2 = (void (***)(_QWORD, char *, uint64_t *))*((_QWORD *)this + 221);
  v26 = *((_QWORD *)this + 223);
  if (*((_BYTE *)this + 1777))
    v3 = 0;
  else
    v3 = *((_DWORD *)this + 445);
  v27 = v3;
  v28 = *((int *)this + 452);
  v29 = *((_BYTE *)this + 1400) ^ 1;
  v30 = *((_QWORD *)this + 225);
  (**v2)(v2, (char *)this + 8, &v26);
  atomic_store(0, (unsigned __int8 *)this + 1760);
  *((_BYTE *)this + 1761) = 0;
  v4 = *((_QWORD *)this + 218);
  v23.n128_u64[0] = (unint64_t)this;
  v24 = absl::internal_any_invocable::LocalManagerTrivial;
  v25 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::internal::VideoSendStreamImpl::StartupVideoSendStream(void)::$_1 &>;
  v6 = &unk_253EA7000;
  if ((v5 & 1) == 0)
  {
    v18 = v4;
    v6 = (_QWORD *)&unk_253EA7000;
    v16 = v15;
    v4 = v18;
    if (v16)
    {
      v17 = (_QWORD *)operator new();
      *v17 = &unk_24C0B13E8;
      webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v17;
      v6 = (_QWORD *)&unk_253EA7000;
      v4 = v18;
    }
  }
  webrtc::RepeatingTaskHandle::DelayedStart(v4, 2000000, (uint64_t)&v23, 0, v6[153], (uint64_t)&v22, (unsigned int **)&__p);
  v7 = __p;
  __p = 0;
  v8 = (unsigned int *)*((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = v7;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      MEMORY[0x20BD0ADEC]();
    v11 = (unsigned int *)__p;
    if (__p)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        MEMORY[0x20BD0ADEC]();
    }
  }
  v24(1, &v23, &v23);
  v14 = *((_QWORD *)this + 181);
  __p = 0;
  v20 = 0;
  v21 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 56))(v14, &__p);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

uint64_t webrtc::internal::VideoSendStreamImpl::GetStats@<X0>(webrtc::internal::VideoSendStreamImpl *this@<X0>, uint64_t a2@<X8>)
{
  return webrtc::SendStatisticsProxy::GetStats((webrtc::internal::VideoSendStreamImpl *)((char *)this + 72), a2);
}

void webrtc::internal::VideoSendStreamImpl::StopPermanentlyAndGetRtpStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 104))(*(_QWORD *)(a1 + 1448));
  *(_BYTE *)(a1 + 1592) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(a1 + 1584) + 56))(&v12);
  v6 = a2 + 8;
  std::__tree<sigslot::_signal_base_interface *>::destroy(a2, *(_QWORD **)(a2 + 8));
  v7 = v13;
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v7;
  v8 = v14;
  *(_QWORD *)(a2 + 16) = v14;
  if (v8)
  {
    v7[2] = v6;
    v12 = &v13;
    v13 = 0;
    v14 = 0;
    v7 = 0;
  }
  else
  {
    *(_QWORD *)a2 = v6;
  }
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v12, v7);
  (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(a1 + 1584) + 64))(&v12);
  v9 = a3 + 8;
  std::__tree<sigslot::_signal_base_interface *>::destroy(a3, *(_QWORD **)(a3 + 8));
  v10 = v13;
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v10;
  v11 = v14;
  *(_QWORD *)(a3 + 16) = v14;
  if (v11)
  {
    v10[2] = v9;
    v12 = &v13;
    v13 = 0;
    v14 = 0;
    v10 = 0;
  }
  else
  {
    *(_QWORD *)a3 = v9;
  }
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v12, v10);
}

void webrtc::internal::VideoSendStreamImpl::GenerateKeyFrame(_QWORD *a1, unsigned __int8 ***a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  char *v31;

  v4 = a1[135];
  v5 = a1[134];
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v8 = 0;
    v7 = 0;
    v9 = a1[137];
    v28 = a1;
    v10 = a1[138];
    if (v9 == v10)
      goto LABEL_42;
LABEL_6:
    v11 = *a2;
    v12 = a2[1];
    if (v11 == v12)
      goto LABEL_42;
    v13 = v8 - v7;
    if (v13 >= 1)
      memset_pattern16(v7, &unk_208F097F0, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
    v14 = v13 >> 2;
    if ((unint64_t)((v10 - v9) / 24) <= 1)
      v15 = 1;
    else
      v15 = (v10 - v9) / 24;
LABEL_13:
    if (*((char *)v11 + 23) >= 0)
      v16 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
    else
      v16 = v11[1];
    v17 = 0;
    if ((*((_BYTE *)v11 + 23) & 0x80) == 0)
    {
      v18 = v9;
      while (1)
      {
        v19 = v9 + 24 * v17;
        v20 = *(unsigned __int8 *)(v19 + 23);
        if ((v20 & 0x80u) == 0)
          v21 = (unsigned __int8 *)*(unsigned __int8 *)(v19 + 23);
        else
          v21 = *(unsigned __int8 **)(v19 + 8);
        if (v21 == v16)
        {
          if ((v20 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v19, v11, *(_QWORD *)(v19 + 8)))
              goto LABEL_40;
          }
          else
          {
            if (!*(_BYTE *)(v19 + 23))
              goto LABEL_40;
            v22 = 0;
            while (*(unsigned __int8 *)(v18 + v22) == *((unsigned __int8 *)v11 + v22))
            {
              if (v20 == ++v22)
                goto LABEL_40;
            }
          }
        }
        ++v17;
        v18 += 24;
        if (v17 == v15)
          goto LABEL_12;
      }
    }
    while (1)
    {
      v23 = (unsigned __int8 *)(v9 + 24 * v17);
      v24 = v23[23];
      if ((v24 & 0x80u) == 0)
        v25 = (unsigned __int8 *)v23[23];
      else
        v25 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
      if (v25 == v16)
      {
        v26 = *v11;
        if ((v24 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v23, v26, *((_QWORD *)v23 + 1)))
            goto LABEL_40;
        }
        else
        {
          if (!v23[23])
          {
LABEL_40:
            if (v14 <= v17)
            {
              __break(1u);
LABEL_48:
              abort();
            }
            *(_DWORD *)&v7[4 * v17] = 3;
LABEL_12:
            v11 += 3;
            if (v11 == v12)
              goto LABEL_42;
            goto LABEL_13;
          }
          while (*v23 == *v26)
          {
            ++v23;
            ++v26;
            if (!--v24)
              goto LABEL_40;
          }
        }
      }
      if (++v17 == v15)
        goto LABEL_12;
    }
  }
  if (v6 < 0)
    goto LABEL_48;
  v7 = (char *)operator new(v4 - v5);
  v8 = &v7[4 * (v6 >> 2)];
  v29 = v7;
  v31 = v8;
  memset_pattern16(v7, &unk_208F1B880, v6 & 0xFFFFFFFFFFFFFFFCLL);
  v30 = v8;
  v9 = a1[137];
  v28 = a1;
  v10 = a1[138];
  if (v9 != v10)
    goto LABEL_6;
LABEL_42:
  v27 = v28[181];
  if (v27)
  {
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v27 + 56))(v27, &v29);
    v7 = v29;
  }
  if (v7)
  {
    v30 = v7;
    operator delete(v7);
  }
}

uint64_t webrtc::internal::VideoSendStreamImpl::started(webrtc::internal::VideoSendStreamImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 198) + 40))(*((_QWORD *)this + 198));
}

void webrtc::internal::VideoSendStreamImpl::Start(webrtc::internal::VideoSendStreamImpl *this)
{
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 198) + 32))(*((_QWORD *)this + 198), 1);
  if (!*((_QWORD *)this + 219))
  {
    if (*((_BYTE *)this + 1776))
      webrtc::internal::VideoSendStreamImpl::StartupVideoSendStream(this);
  }
}

uint64_t webrtc::internal::VideoSendStreamImpl::Stop(webrtc::internal::VideoSendStreamImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_send_stream_impl.cc");
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 198) + 40))(*((_QWORD *)this + 198));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 198) + 32))(*((_QWORD *)this + 198), 0);
    if (*((_QWORD *)this + 219))
    {
      (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 221) + 8))(*((_QWORD *)this + 221), (char *)this + 8);
      v10 = *((_QWORD *)this + 219);
      if (v10)
      {
        *(_BYTE *)(v10 + 4) = 0;
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
          MEMORY[0x20BD0ADEC]();
        *((_QWORD *)this + 219) = 0;
      }
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))(**((_QWORD **)this + 181) + 72))(*((_QWORD *)this + 181), 0, 0, 0, 0, 0, 0.0);
      return webrtc::SendStatisticsProxy::OnSetEncoderTargetRate((webrtc::internal::VideoSendStreamImpl *)((char *)this + 72), 0);
    }
  }
  return result;
}

double webrtc::internal::VideoSendStreamImpl::OnBitrateAllocationUpdated(webrtc::internal::VideoSendStreamImpl *this, const webrtc::VideoBitrateAllocation *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  unsigned int *v11;
  unsigned int v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  double result;
  char v21;
  _BYTE v22[176];
  char v23;
  _QWORD v24[2];
  uint64_t (*v25)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v26)(uint64_t);

  v2 = *((_OWORD *)a2 + 7);
  *(_OWORD *)&v22[104] = *((_OWORD *)a2 + 6);
  *(_OWORD *)&v22[120] = v2;
  v3 = *((_OWORD *)a2 + 9);
  *(_OWORD *)&v22[136] = *((_OWORD *)a2 + 8);
  *(_OWORD *)&v22[152] = v3;
  v4 = *((_OWORD *)a2 + 2);
  v5 = *((_OWORD *)a2 + 4);
  v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)&v22[56] = *((_OWORD *)a2 + 3);
  *(_OWORD *)&v22[72] = v5;
  *(_OWORD *)&v22[88] = v6;
  v7 = *((_OWORD *)a2 + 1);
  *(_OWORD *)&v22[8] = *(_OWORD *)a2;
  *(_OWORD *)&v22[24] = v7;
  *(_QWORD *)v22 = this;
  *(_QWORD *)&v22[165] = *(_QWORD *)((char *)a2 + 157);
  *(_OWORD *)&v22[40] = v4;
  v8 = *((_QWORD *)this + 218);
  {
    *(_QWORD *)&result = webrtc::internal::VideoSendStreamImpl::OnBitrateAllocationUpdated(webrtc::VideoBitrateAllocation const&)::$_0::operator()((uint64_t *)v22, v10).n128_u64[0];
  }
  else
  {
    v11 = *(unsigned int **)(v9 + 1816);
    if (v11)
    {
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = operator new(0xB0uLL);
    v14 = *(_OWORD *)&v22[144];
    v13[8] = *(_OWORD *)&v22[128];
    v13[9] = v14;
    v13[10] = *(_OWORD *)&v22[160];
    v15 = *(_OWORD *)&v22[80];
    v13[4] = *(_OWORD *)&v22[64];
    v13[5] = v15;
    v16 = *(_OWORD *)&v22[112];
    v13[6] = *(_OWORD *)&v22[96];
    v13[7] = v16;
    v17 = *(_OWORD *)&v22[16];
    *v13 = *(_OWORD *)v22;
    v13[1] = v17;
    v18 = *(_OWORD *)&v22[48];
    v13[2] = *(_OWORD *)&v22[32];
    v13[3] = v18;
    v19 = (_QWORD *)operator new();
    *v19 = v11;
    v19[1] = v13;
    v19[2] = 176;
    v19[3] = absl::internal_any_invocable::RemoteManagerTrivial;
    v19[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoSendStreamImpl::OnBitrateAllocationUpdated(webrtc::VideoBitrateAllocation const&)::$_0 &&>;
    v24[0] = v19;
    v25 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v26 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v8 + 8))(v8, v24, &v23, &v21);
    v25(1, v24, v24);
  }
  return result;
}

__n128 webrtc::internal::VideoSendStreamImpl::OnBitrateAllocationUpdated(webrtc::VideoBitrateAllocation const&)::$_0::operator()(uint64_t *a1, __n128 result)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  __int128 *v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v2 = *a1;
  if (*(_DWORD *)(*a1 + 1792))
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 40) + 16))(*(_QWORD *)(v2 + 40));
    v5 = v4 / 0x3E8uLL;
    if (v4 % 0x3E8uLL > 0x1F3)
      ++v5;
    if (-v4 % 0x3E8uLL <= 0x1F4)
      v6 = 0;
    else
      v6 = -1;
    if (v4 < 0)
      v5 = v6 - -v4 / 0x3E8uLL;
    v7 = (unsigned int *)(v2 + 1824);
    if (*(_BYTE *)(v2 + 2176))
    {
      v8 = (__int128 *)(a1 + 1);
      v9 = *((_DWORD *)a1 + 2);
      v10 = v9 < *v7 || v9 >= 110 * *v7 / 0x64;
      if (!v10
        && (*((_BYTE *)a1 + 16) != 0) == (*(_BYTE *)(v2 + 1832) != 0)
        && (*((_BYTE *)a1 + 24) != 0) == (*(_BYTE *)(v2 + 1840) != 0)
        && (*((_BYTE *)a1 + 32) != 0) == (*(_BYTE *)(v2 + 1848) != 0)
        && (*((_BYTE *)a1 + 40) != 0) == (*(_BYTE *)(v2 + 1856) != 0)
        && (*((_BYTE *)a1 + 48) != 0) == (*(_BYTE *)(v2 + 1864) != 0)
        && (*((_BYTE *)a1 + 56) != 0) == (*(_BYTE *)(v2 + 1872) != 0)
        && (*((_BYTE *)a1 + 64) != 0) == (*(_BYTE *)(v2 + 1880) != 0)
        && (*((_BYTE *)a1 + 72) != 0) == (*(_BYTE *)(v2 + 1888) != 0)
        && (*((_BYTE *)a1 + 80) != 0) == (*(_BYTE *)(v2 + 1896) != 0)
        && (*((_BYTE *)a1 + 88) != 0) == (*(_BYTE *)(v2 + 1904) != 0)
        && (*((_BYTE *)a1 + 96) != 0) == (*(_BYTE *)(v2 + 1912) != 0)
        && (*((_BYTE *)a1 + 104) != 0) == (*(_BYTE *)(v2 + 1920) != 0)
        && (*((_BYTE *)a1 + 112) != 0) == (*(_BYTE *)(v2 + 1928) != 0)
        && (*((_BYTE *)a1 + 120) != 0) == (*(_BYTE *)(v2 + 1936) != 0)
        && (*((_BYTE *)a1 + 128) != 0) == (*(_BYTE *)(v2 + 1944) != 0)
        && (*((_BYTE *)a1 + 136) != 0) == (*(_BYTE *)(v2 + 1952) != 0)
        && (*((_BYTE *)a1 + 144) != 0) == (*(_BYTE *)(v2 + 1960) != 0)
        && (*((_BYTE *)a1 + 152) != 0) == (*(_BYTE *)(v2 + 1968) != 0)
        && (*((_BYTE *)a1 + 160) != 0) == (*(_BYTE *)(v2 + 1976) != 0)
        && (*((_BYTE *)a1 + 168) != 0) == (*(_BYTE *)(v2 + 1984) != 0)
        && (uint64_t)(v5 - *(_QWORD *)(v2 + 2168)) <= 499)
      {
        v28 = (_OWORD *)(v2 + 1992);
        v29 = *v8;
        v30 = *(_OWORD *)(a1 + 5);
        if (*(_BYTE *)(v2 + 2160))
        {
          *(_OWORD *)(v2 + 2008) = *(_OWORD *)(a1 + 3);
          *(_OWORD *)(v2 + 2024) = v30;
          *v28 = v29;
          v31 = *(_OWORD *)(a1 + 7);
          v32 = *(_OWORD *)(a1 + 9);
          v33 = *(_OWORD *)(a1 + 13);
          *(_OWORD *)(v2 + 2072) = *(_OWORD *)(a1 + 11);
          *(_OWORD *)(v2 + 2088) = v33;
          *(_OWORD *)(v2 + 2040) = v31;
          *(_OWORD *)(v2 + 2056) = v32;
          result = *(__n128 *)(a1 + 15);
          v34 = *(_OWORD *)(a1 + 17);
          v35 = *(_OWORD *)(a1 + 19);
          *(_QWORD *)(v2 + 2149) = *(uint64_t *)((char *)a1 + 165);
          *(_OWORD *)(v2 + 2120) = v34;
          *(_OWORD *)(v2 + 2136) = v35;
          *(__n128 *)(v2 + 2104) = result;
        }
        else
        {
          *(_OWORD *)(v2 + 2008) = *(_OWORD *)(a1 + 3);
          *(_OWORD *)(v2 + 2024) = v30;
          *v28 = v29;
          v36 = *(_OWORD *)(a1 + 7);
          v37 = *(_OWORD *)(a1 + 9);
          v38 = *(_OWORD *)(a1 + 13);
          *(_OWORD *)(v2 + 2072) = *(_OWORD *)(a1 + 11);
          *(_OWORD *)(v2 + 2088) = v38;
          *(_OWORD *)(v2 + 2040) = v36;
          *(_OWORD *)(v2 + 2056) = v37;
          result = *(__n128 *)(a1 + 15);
          v39 = *(_OWORD *)(a1 + 17);
          v40 = *(_OWORD *)(a1 + 19);
          *(_QWORD *)(v2 + 2152) = a1[21];
          *(_OWORD *)(v2 + 2120) = v39;
          *(_OWORD *)(v2 + 2136) = v40;
          *(__n128 *)(v2 + 2104) = result;
          *(_BYTE *)(v2 + 2160) = 1;
        }
        return result;
      }
      v11 = *(unsigned __int8 *)(v2 + 2160);
      v13 = *(_OWORD *)(a1 + 3);
      v12 = *(_OWORD *)(a1 + 5);
      *(_OWORD *)v7 = *v8;
      *(_OWORD *)(v2 + 1840) = v13;
      *(_OWORD *)(v2 + 1856) = v12;
      v14 = *(_OWORD *)(a1 + 13);
      v16 = *(_OWORD *)(a1 + 7);
      v15 = *(_OWORD *)(a1 + 9);
      *(_OWORD *)(v2 + 1904) = *(_OWORD *)(a1 + 11);
      *(_OWORD *)(v2 + 1920) = v14;
      *(_OWORD *)(v2 + 1872) = v16;
      *(_OWORD *)(v2 + 1888) = v15;
      v18 = *(_OWORD *)(a1 + 17);
      v17 = *(_OWORD *)(a1 + 19);
      v19 = *(_OWORD *)(a1 + 15);
      *(_QWORD *)(v2 + 1981) = *(uint64_t *)((char *)a1 + 165);
      *(_OWORD *)(v2 + 1952) = v18;
      *(_OWORD *)(v2 + 1968) = v17;
      *(_OWORD *)(v2 + 1936) = v19;
      if (v11)
        *(_BYTE *)(v2 + 2160) = 0;
    }
    else
    {
      *(_OWORD *)(v2 + 2144) = 0u;
      *(_OWORD *)(v2 + 2160) = 0u;
      *(_OWORD *)(v2 + 2112) = 0u;
      *(_OWORD *)(v2 + 2128) = 0u;
      *(_OWORD *)(v2 + 2080) = 0u;
      *(_OWORD *)(v2 + 2096) = 0u;
      *(_OWORD *)(v2 + 2048) = 0u;
      *(_OWORD *)(v2 + 2064) = 0u;
      *(_OWORD *)(v2 + 2016) = 0u;
      *(_OWORD *)(v2 + 2032) = 0u;
      *(_OWORD *)(v2 + 1984) = 0u;
      *(_OWORD *)(v2 + 2000) = 0u;
      *(_OWORD *)(v2 + 1952) = 0u;
      *(_OWORD *)(v2 + 1968) = 0u;
      *(_OWORD *)(v2 + 1920) = 0u;
      *(_OWORD *)(v2 + 1936) = 0u;
      *(_OWORD *)(v2 + 1888) = 0u;
      *(_OWORD *)(v2 + 1904) = 0u;
      *(_OWORD *)(v2 + 1856) = 0u;
      *(_OWORD *)(v2 + 1872) = 0u;
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v2 + 1840) = 0u;
      *(_BYTE *)(v2 + 2176) = 1;
      v8 = (__int128 *)(a1 + 1);
      v20 = *(_OWORD *)(a1 + 1);
      v21 = *(_OWORD *)(a1 + 5);
      *(_OWORD *)(v2 + 1840) = *(_OWORD *)(a1 + 3);
      *(_OWORD *)(v2 + 1856) = v21;
      *(_OWORD *)v7 = v20;
      v22 = *(_OWORD *)(a1 + 7);
      v23 = *(_OWORD *)(a1 + 9);
      v24 = *(_OWORD *)(a1 + 13);
      *(_OWORD *)(v2 + 1904) = *(_OWORD *)(a1 + 11);
      *(_OWORD *)(v2 + 1920) = v24;
      *(_OWORD *)(v2 + 1872) = v22;
      *(_OWORD *)(v2 + 1888) = v23;
      v25 = *(_OWORD *)(a1 + 15);
      v26 = *(_OWORD *)(a1 + 17);
      v27 = *(_OWORD *)(a1 + 19);
      *(_QWORD *)(v2 + 1981) = *(uint64_t *)((char *)a1 + 165);
      *(_OWORD *)(v2 + 1952) = v26;
      *(_OWORD *)(v2 + 1968) = v27;
      *(_OWORD *)(v2 + 1936) = v25;
    }
    *(_QWORD *)(v2 + 2168) = v5;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v2 + 1584) + 80))(*(_QWORD *)(v2 + 1584), v8);
  }
  return result;
}

double `non-virtual thunk to'webrtc::internal::VideoSendStreamImpl::OnBitrateAllocationUpdated(webrtc::internal::VideoSendStreamImpl *this, const webrtc::VideoBitrateAllocation *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  unsigned int *v11;
  unsigned int v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  double result;
  char v21;
  _BYTE v22[176];
  char v23;
  _QWORD v24[2];
  uint64_t (*v25)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v26)(uint64_t);

  v2 = *((_OWORD *)a2 + 7);
  *(_OWORD *)&v22[104] = *((_OWORD *)a2 + 6);
  *(_OWORD *)&v22[120] = v2;
  v3 = *((_OWORD *)a2 + 9);
  *(_OWORD *)&v22[136] = *((_OWORD *)a2 + 8);
  *(_OWORD *)&v22[152] = v3;
  v4 = *((_OWORD *)a2 + 2);
  v5 = *((_OWORD *)a2 + 4);
  v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)&v22[56] = *((_OWORD *)a2 + 3);
  *(_OWORD *)&v22[72] = v5;
  *(_OWORD *)&v22[88] = v6;
  v7 = *((_OWORD *)a2 + 1);
  *(_OWORD *)&v22[8] = *(_OWORD *)a2;
  *(_OWORD *)&v22[24] = v7;
  *(_QWORD *)v22 = (char *)this - 16;
  *(_QWORD *)&v22[165] = *(_QWORD *)((char *)a2 + 157);
  *(_OWORD *)&v22[40] = v4;
  v8 = *((_QWORD *)this + 216);
  {
    *(_QWORD *)&result = webrtc::internal::VideoSendStreamImpl::OnBitrateAllocationUpdated(webrtc::VideoBitrateAllocation const&)::$_0::operator()((uint64_t *)v22, v10).n128_u64[0];
  }
  else
  {
    v11 = *(unsigned int **)(v9 + 1800);
    if (v11)
    {
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = operator new(0xB0uLL);
    v14 = *(_OWORD *)&v22[144];
    v13[8] = *(_OWORD *)&v22[128];
    v13[9] = v14;
    v13[10] = *(_OWORD *)&v22[160];
    v15 = *(_OWORD *)&v22[80];
    v13[4] = *(_OWORD *)&v22[64];
    v13[5] = v15;
    v16 = *(_OWORD *)&v22[112];
    v13[6] = *(_OWORD *)&v22[96];
    v13[7] = v16;
    v17 = *(_OWORD *)&v22[16];
    *v13 = *(_OWORD *)v22;
    v13[1] = v17;
    v18 = *(_OWORD *)&v22[48];
    v13[2] = *(_OWORD *)&v22[32];
    v13[3] = v18;
    v19 = (_QWORD *)operator new();
    *v19 = v11;
    v19[1] = v13;
    v19[2] = 176;
    v19[3] = absl::internal_any_invocable::RemoteManagerTrivial;
    v19[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoSendStreamImpl::OnBitrateAllocationUpdated(webrtc::VideoBitrateAllocation const&)::$_0 &&>;
    v24[0] = v19;
    v25 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v26 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v8 + 8))(v8, v24, &v23, &v21);
    v25(1, v24, v24);
  }
  return result;
}

uint64_t webrtc::internal::VideoSendStreamImpl::OnVideoLayersAllocationUpdated(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1584) + 88))(*(_QWORD *)(a1 + 1584));
}

uint64_t `non-virtual thunk to'webrtc::internal::VideoSendStreamImpl::OnVideoLayersAllocationUpdated(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1568) + 88))(*(_QWORD *)(a1 + 1568));
}

uint64_t webrtc::internal::VideoSendStreamImpl::OnEncoderConfigurationChanged(uint64_t a1, __int128 *a2, char a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v16;
  char v17;
  char v18;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v21)(uint64_t);

  v16 = *a2;
  v9 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v10 = *(_QWORD *)(a1 + 1744);
  v11 = *(unsigned int **)(a1 + 1816);
  if (v11)
  {
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = operator new();
  *(_QWORD *)v13 = a1;
  *(_OWORD *)(v13 + 8) = v16;
  *(_QWORD *)(v13 + 24) = v9;
  *(_BYTE *)(v13 + 32) = a3;
  *(_DWORD *)(v13 + 36) = a4;
  *(_DWORD *)(v13 + 40) = a5;
  v14 = (_QWORD *)operator new();
  *v14 = v11;
  v14[1] = v13;
  v14[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::internal::VideoSendStreamImpl::OnEncoderConfigurationChanged(std::vector<webrtc::VideoStream>,BOOL,webrtc::VideoEncoderConfig::ContentType,int)::$_0>;
  v14[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoSendStreamImpl::OnEncoderConfigurationChanged(std::vector<webrtc::VideoStream>,BOOL,webrtc::VideoEncoderConfig::ContentType,int)::$_0 &&>;
  v19[0] = v14;
  v20 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v21 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v10 + 8))(v10, v19, &v18, &v17);
  return v20(1, v19, v19);
}

uint64_t `non-virtual thunk to'webrtc::internal::VideoSendStreamImpl::OnEncoderConfigurationChanged(uint64_t a1, __int128 *a2, char a3, int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v16;
  char v17;
  char v18;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v21)(uint64_t);

  v16 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v9 = *(_QWORD *)(a1 + 1728);
  v10 = *(unsigned int **)(a1 + 1800);
  if (v10)
  {
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a1 - 16;
  v13 = operator new();
  *(_QWORD *)v13 = v12;
  *(_OWORD *)(v13 + 8) = v16;
  *(_QWORD *)(v13 + 24) = v8;
  *(_BYTE *)(v13 + 32) = a3;
  *(_DWORD *)(v13 + 36) = a4;
  *(_DWORD *)(v13 + 40) = a5;
  v14 = (_QWORD *)operator new();
  *v14 = v10;
  v14[1] = v13;
  v14[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::internal::VideoSendStreamImpl::OnEncoderConfigurationChanged(std::vector<webrtc::VideoStream>,BOOL,webrtc::VideoEncoderConfig::ContentType,int)::$_0>;
  v14[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoSendStreamImpl::OnEncoderConfigurationChanged(std::vector<webrtc::VideoStream>,BOOL,webrtc::VideoEncoderConfig::ContentType,int)::$_0 &&>;
  v19[0] = v14;
  v20 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v21 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v9 + 8))(v9, v19, &v18, &v17);
  return v20(1, v19, v19);
}

uint64_t webrtc::internal::VideoSendStreamImpl::OnEncodedImage(webrtc::internal::VideoSendStreamImpl *this, const webrtc::EncodedImage *a2, const webrtc::CodecSpecificInfo *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  char v11;
  char v12;
  _QWORD v13[2];
  uint64_t (*v14)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v15)(uint64_t);

  atomic_store(1u, (unsigned __int8 *)this + 1760);
  v6 = *((_QWORD *)this + 218);
  v7 = (unsigned int *)*((_QWORD *)this + 227);
  if (v7)
  {
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (_QWORD *)operator new();
  *v9 = v7;
  v9[1] = this;
  v9[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v9[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::VideoSendStreamImpl::OnEncodedImage(webrtc::EncodedImage const&,webrtc::CodecSpecificInfo const*)::$_0 &&>;
  v13[0] = v9;
  v14 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v15 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v6 + 8))(v6, v13, &v12, &v11);
  v14(1, v13, v13);
  return (*(uint64_t (**)(_QWORD, const webrtc::EncodedImage *, const webrtc::CodecSpecificInfo *))(**((_QWORD **)this + 198) + 16))(*((_QWORD *)this + 198), a2, a3);
}

uint64_t `non-virtual thunk to'webrtc::internal::VideoSendStreamImpl::OnEncodedImage(webrtc::internal::VideoSendStreamImpl *this, const webrtc::EncodedImage *a2, const webrtc::CodecSpecificInfo *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  char v11;
  char v12;
  _QWORD v13[2];
  uint64_t (*v14)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v15)(uint64_t);

  atomic_store(1u, (unsigned __int8 *)this + 1744);
  v6 = *((_QWORD *)this + 216);
  v7 = (unsigned int *)*((_QWORD *)this + 225);
  if (v7)
  {
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (_QWORD *)operator new();
  *v9 = v7;
  v9[1] = (char *)this - 16;
  v9[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v9[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::VideoSendStreamImpl::OnEncodedImage(webrtc::EncodedImage const&,webrtc::CodecSpecificInfo const*)::$_0 &&>;
  v13[0] = v9;
  v14 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v15 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v6 + 8))(v6, v13, &v12, &v11);
  v14(1, v13, v13);
  return (*(uint64_t (**)(_QWORD, const webrtc::EncodedImage *, const webrtc::CodecSpecificInfo *))(**((_QWORD **)this + 196) + 16))(*((_QWORD *)this + 196), a2, a3);
}

uint64_t webrtc::internal::VideoSendStreamImpl::OnDroppedFrame(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 1760));
  return result;
}

uint64_t `non-virtual thunk to'webrtc::internal::VideoSendStreamImpl::OnDroppedFrame(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 1744));
  return result;
}

uint64_t webrtc::internal::VideoSendStreamImpl::OnBitrateUpdated(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v28[3];

  if (!a2[1])
    a2[1] = *a2;
  v5 = *(_QWORD *)(a1 + 1584);
  v6 = *((_OWORD *)a2 + 1);
  v28[0] = *(_OWORD *)a2;
  v28[1] = v6;
  v28[2] = *((_OWORD *)a2 + 2);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 432));
  LODWORD(v2) = llround(rtc::RateTracker::ComputeRateForInterval((rtc::RateTracker *)(a1 + 840), *(_QWORD *)(a1 + 856) * *(_QWORD *)(a1 + 848)));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 432));
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v5 + 96))(v5, v28, v2);
  *(_DWORD *)(a1 + 1792) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1584) + 112))(*(_QWORD *)(a1 + 1584));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1584) + 120))(*(_QWORD *)(a1 + 1584));
  v9 = *(unsigned int *)(a1 + 1792);
  v10 = *a2;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  v12 = v9;
  if (*a2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v13 = v10 - v9;
    if (v10 == 0x8000000000000000)
      v13 = 0x8000000000000000;
    v14 = a2[1];
    if (v14 != 0x7FFFFFFFFFFFFFFFLL && v13 != 0x8000000000000000)
      v11 = v14 - v13;
    if (v14 > v13)
      v12 = v11;
    else
      v12 = *(unsigned int *)(a1 + 1792);
  }
  v16 = *(unsigned int *)(a1 + 1788);
  v17 = 1788;
  if (v9 < v16)
    v17 = 1792;
  v18 = *(unsigned int *)(a1 + v17);
  *(_DWORD *)(a1 + 1792) = v18;
  v19 = a2[3];
  v20 = v19 / 0x3E8uLL;
  if (v19 % 0x3E8uLL > 0x1F3)
    ++v20;
  if (-v19 % 0x3E8uLL <= 0x1F4)
    v21 = 0;
  else
    v21 = -1;
  if (v19 < 0)
    v22 = v21 - -v19 / 0x3E8uLL;
  else
    v22 = v20;
  LODWORD(v7) = vcvtd_n_s64_f64(*((double *)a2 + 2), 8uLL);
  v23 = v9 >= v8;
  v24 = v9 - v8;
  if (!v23)
    v24 = 0;
  if (v18 <= v24)
    v25 = v24;
  else
    v25 = v18;
  if (v12 >= v16)
    v26 = v16;
  else
    v26 = v12;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))(**(_QWORD **)(a1 + 1448)
                                                                                               + 72))(*(_QWORD *)(a1 + 1448), v18, v26, v25, v7, v22, *((double *)a2 + 5));
  webrtc::SendStatisticsProxy::OnSetEncoderTargetRate((webrtc::SendStatisticsProxy *)(a1 + 72), *(_DWORD *)(a1 + 1792));
  return v8;
}

uint64_t `non-virtual thunk to'webrtc::internal::VideoSendStreamImpl::OnBitrateUpdated(uint64_t a1, uint64_t *a2)
{
  return webrtc::internal::VideoSendStreamImpl::OnBitrateUpdated(a1 - 8, a2);
}

void webrtc::internal::VideoSendStreamImpl::OnSendPacketObserver::~OnSendPacketObserver(webrtc::internal::VideoSendStreamImpl::OnSendPacketObserver *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::internal::VideoSendStreamImpl::OnSendPacketObserver::OnSendPacket(uint64_t a1, int a2, Timestamp a3, char *a4)
{
  unsigned int v4;
  uint64_t result;
  Timestamp v9;

  v4 = a4;
  result = webrtc::SendStatisticsProxy::OnSendPacket(*(webrtc::SendStatisticsProxy **)(a1 + 8), a4, a3);
  if ((*(_QWORD *)&a2 & 0xFF0000) != 0)
  {
    v9.var0 = a3.var0;
    return webrtc::SendDelayStats::OnSendPacket(*(webrtc::SendDelayStats **)(a1 + 16), a2, v9, v4);
  }
  return result;
}

void std::__function::__func<webrtc::internal::VideoSendStreamImpl::VideoSendStreamImpl(webrtc::Environment const&,int,webrtc::RtcpRttStats *,webrtc::RtpTransportControllerSendInterface *,webrtc::Metronome *,webrtc::BitrateAllocatorInterface *,webrtc::SendDelayStats *,webrtc::VideoSendStream::Config,webrtc::VideoEncoderConfig,std::map<unsigned int,webrtc::RtpState> const&,std::map<unsigned int,webrtc::RtpPayloadState> const&,std::unique_ptr<webrtc::FecController>,std::unique_ptr<webrtc::VideoStreamEncoderInterface>)::$_0,std::allocator<webrtc::internal::VideoSendStreamImpl::VideoSendStreamImpl(webrtc::Environment const&,int,webrtc::RtcpRttStats *,webrtc::RtpTransportControllerSendInterface *,webrtc::Metronome *,webrtc::BitrateAllocatorInterface *,webrtc::SendDelayStats *,webrtc::VideoSendStream::Config,webrtc::VideoEncoderConfig,std::map<unsigned int,webrtc::RtpState> const&,std::map<unsigned int,webrtc::RtpPayloadState> const&,std::unique_ptr<webrtc::FecController>,std::unique_ptr<webrtc::VideoStreamEncoderInterface>)::$_0>,std::vector<webrtc::RtpSequenceNumberMap::Info> ()(unsigned int,std::vector<unsigned short> const&)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::internal::VideoSendStreamImpl::VideoSendStreamImpl(webrtc::Environment const&,int,webrtc::RtcpRttStats *,webrtc::RtpTransportControllerSendInterface *,webrtc::Metronome *,webrtc::BitrateAllocatorInterface *,webrtc::SendDelayStats *,webrtc::VideoSendStream::Config,webrtc::VideoEncoderConfig,std::map<unsigned int,webrtc::RtpState> const&,std::map<unsigned int,webrtc::RtpPayloadState> const&,std::unique_ptr<webrtc::FecController>,std::unique_ptr<webrtc::VideoStreamEncoderInterface>)::$_0,std::allocator<webrtc::internal::VideoSendStreamImpl::VideoSendStreamImpl(webrtc::Environment const&,int,webrtc::RtcpRttStats *,webrtc::RtpTransportControllerSendInterface *,webrtc::Metronome *,webrtc::BitrateAllocatorInterface *,webrtc::SendDelayStats *,webrtc::VideoSendStream::Config,webrtc::VideoEncoderConfig,std::map<unsigned int,webrtc::RtpState> const&,std::map<unsigned int,webrtc::RtpPayloadState> const&,std::unique_ptr<webrtc::FecController>,std::unique_ptr<webrtc::VideoStreamEncoderInterface>)::$_0>,std::vector<webrtc::RtpSequenceNumberMap::Info> ()(unsigned int,std::vector<unsigned short> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0C4958;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::internal::VideoSendStreamImpl::VideoSendStreamImpl(webrtc::Environment const&,int,webrtc::RtcpRttStats *,webrtc::RtpTransportControllerSendInterface *,webrtc::Metronome *,webrtc::BitrateAllocatorInterface *,webrtc::SendDelayStats *,webrtc::VideoSendStream::Config,webrtc::VideoEncoderConfig,std::map<unsigned int,webrtc::RtpState> const&,std::map<unsigned int,webrtc::RtpPayloadState> const&,std::unique_ptr<webrtc::FecController>,std::unique_ptr<webrtc::VideoStreamEncoderInterface>)::$_0,std::allocator<webrtc::internal::VideoSendStreamImpl::VideoSendStreamImpl(webrtc::Environment const&,int,webrtc::RtcpRttStats *,webrtc::RtpTransportControllerSendInterface *,webrtc::Metronome *,webrtc::BitrateAllocatorInterface *,webrtc::SendDelayStats *,webrtc::VideoSendStream::Config,webrtc::VideoEncoderConfig,std::map<unsigned int,webrtc::RtpState> const&,std::map<unsigned int,webrtc::RtpPayloadState> const&,std::unique_ptr<webrtc::FecController>,std::unique_ptr<webrtc::VideoStreamEncoderInterface>)::$_0>,std::vector<webrtc::RtpSequenceNumberMap::Info> ()(unsigned int,std::vector<unsigned short> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0C4958;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::internal::VideoSendStreamImpl::VideoSendStreamImpl(webrtc::Environment const&,int,webrtc::RtcpRttStats *,webrtc::RtpTransportControllerSendInterface *,webrtc::Metronome *,webrtc::BitrateAllocatorInterface *,webrtc::SendDelayStats *,webrtc::VideoSendStream::Config,webrtc::VideoEncoderConfig,std::map<unsigned int,webrtc::RtpState> const&,std::map<unsigned int,webrtc::RtpPayloadState> const&,std::unique_ptr<webrtc::FecController>,std::unique_ptr<webrtc::VideoStreamEncoderInterface>)::$_0,std::allocator<webrtc::internal::VideoSendStreamImpl::VideoSendStreamImpl(webrtc::Environment const&,int,webrtc::RtcpRttStats *,webrtc::RtpTransportControllerSendInterface *,webrtc::Metronome *,webrtc::BitrateAllocatorInterface *,webrtc::SendDelayStats *,webrtc::VideoSendStream::Config,webrtc::VideoEncoderConfig,std::map<unsigned int,webrtc::RtpState> const&,std::map<unsigned int,webrtc::RtpPayloadState> const&,std::unique_ptr<webrtc::FecController>,std::unique_ptr<webrtc::VideoStreamEncoderInterface>)::$_0>,std::vector<webrtc::RtpSequenceNumberMap::Info> ()(unsigned int,std::vector<unsigned short> const&)>::operator()(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a3[1];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1584);
  v6 = (v4 - *a3) >> 1;
  if (v4 == *a3)
    v7 = 0;
  else
    v7 = *a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(v5, v3, v7, v6);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::internal::VideoSendStreamImpl::StartupVideoSendStream(void)::$_1 &>(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD, uint64_t, uint64_t *);
  int v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v1 = *a1;
  v2 = atomic_load((unsigned __int8 *)(*a1 + 1760));
  if ((v2 & 1) != 0)
  {
    if (*(_BYTE *)(v1 + 1761))
    {
      if (*(_QWORD *)(v1 + 1752))
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_send_stream_impl.cc");
        v17 = *(void (****)(_QWORD, uint64_t, uint64_t *))(v1 + 1768);
        v20 = *(_QWORD *)(v1 + 1784);
        if (*(_BYTE *)(v1 + 1777))
          v18 = 0;
        else
          v18 = *(_DWORD *)(v1 + 1780);
        v21 = v18;
        v22 = *(int *)(v1 + 1808);
        v23 = *(_BYTE *)(v1 + 1400) ^ 1;
        v24 = *(_QWORD *)(v1 + 1800);
        (**v17)(v17, v1 + 8, &v20);
      }
      *(_BYTE *)(v1 + 1761) = 0;
    }
  }
  else
  {
    if (!*(_BYTE *)(v1 + 1761) && *(_DWORD *)(v1 + 1792))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_send_stream_impl.cc");
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 1768) + 8))(*(_QWORD *)(v1 + 1768), v1 + 8);
    }
    *(_BYTE *)(v1 + 1761) = 1;
    *(_BYTE *)(v1 + 1777) = 1;
  }
  atomic_store(0, (unsigned __int8 *)(v1 + 1760));
  return 2000000;
}

double absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoSendStreamImpl::OnBitrateAllocationUpdated(webrtc::VideoBitrateAllocation const&)::$_0 &&>(uint64_t **a1, __n128 a2)
{
  double result;

  *(_QWORD *)&result = webrtc::internal::VideoSendStreamImpl::OnBitrateAllocationUpdated(webrtc::VideoBitrateAllocation const&)::$_0::operator()(*a1, a2).n128_u64[0];
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::VideoSendStreamImpl::OnEncoderConfigurationChanged(std::vector<webrtc::VideoStream>,BOOL,webrtc::VideoEncoderConfig::ContentType,int)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  double v9;
  uint64_t v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  int v36;
  int v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  char *StatsEntry;
  uint64_t v44;
  uint64_t result;
  uint64_t (***v46)(_QWORD, uint64_t, uint64_t *);
  int v47;
  char *v48;
  int v49;
  unint64_t v50;
  int v51;
  int *v52;
  unint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;

  v1 = *a1;
  v2 = **a1;
  v3 = webrtc::PayloadStringToCodecType(v2 + 1192);
  webrtc::GetExperimentalMinVideoBitrate(*(_QWORD *)(v2 + 32), v3);
  if (!v5)
  {
    v6 = v1[1];
    v7 = v1[2];
    if (v7 == v6)
      goto LABEL_91;
    if (v3 == 3)
      v11 = 15000;
    else
      v11 = 30000;
    if (*(_DWORD *)(v6 + 20) <= v11)
      v4 = v11;
    else
      v4 = *(_DWORD *)(v6 + 20);
    *(_DWORD *)(v2 + 1784) = v4;
    if (v6 != v7)
      goto LABEL_3;
LABEL_17:
    v8 = 0;
    v9 = 0.0;
    goto LABEL_18;
  }
  v6 = v1[1];
  v7 = v1[2];
  *(_DWORD *)(v2 + 1784) = v4;
  if (v6 == v7)
    goto LABEL_17;
LABEL_3:
  v8 = 0;
  v9 = 0.0;
  v10 = v6;
  do
  {
    if (*(_BYTE *)(v10 + 82))
      v8 += *(_DWORD *)(v10 + 28);
    if (*(_BYTE *)(v10 + 72))
      v9 = v9 + *(double *)(v10 + 64);
    v10 += 96;
  }
  while (v10 != v7);
LABEL_18:
  *(double *)(v2 + 1800) = v9;
  if (v4 > v8)
    v8 = v4;
  *(_DWORD *)(v2 + 1788) = v8;
  v64 = v1;
  v59 = *(unsigned __int8 *)(v2 + 1400);
  v60 = *((_DWORD *)v1 + 9);
  v61 = *(unsigned __int8 *)(v2 + 1593);
  v62 = *((unsigned __int8 *)v1 + 32);
  v63 = *((_DWORD *)v1 + 10);
  v12 = 0;
  v13 = 0;
  if (v6 != v7)
  {
    v14 = 0;
    while (1)
    {
      if (!*(_BYTE *)(v6 + 82))
        goto LABEL_23;
      if (v13 >= v14)
        break;
      if (!v13)
        goto LABEL_91;
      v15 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)v13 = *(_OWORD *)v6;
      *((_OWORD *)v13 + 1) = v15;
      v16 = *(_OWORD *)(v6 + 32);
      v17 = *(_OWORD *)(v6 + 48);
      v18 = *(_OWORD *)(v6 + 64);
      *(_OWORD *)(v13 + 77) = *(_OWORD *)(v6 + 77);
      *((_OWORD *)v13 + 3) = v17;
      *((_OWORD *)v13 + 4) = v18;
      *((_OWORD *)v13 + 2) = v16;
      v13 += 96;
LABEL_23:
      v6 += 96;
      if (v6 == v7)
        goto LABEL_42;
    }
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v12) >> 5) + 1;
    if (v19 > 0x2AAAAAAAAAAAAAALL)
      goto LABEL_92;
    if (0x5555555555555556 * ((v14 - v12) >> 5) > v19)
      v19 = 0x5555555555555556 * ((v14 - v12) >> 5);
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - v12) >> 5) >= 0x155555555555555)
      v19 = 0x2AAAAAAAAAAAAAALL;
    if (!v19)
      goto LABEL_91;
    if (v19 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v20 = 96 * v19;
    v21 = (char *)operator new(96 * v19);
    v22 = &v21[32 * ((v13 - v12) >> 5)];
    v23 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v6;
    *((_OWORD *)v22 + 1) = v23;
    v25 = *(_OWORD *)(v6 + 48);
    v24 = *(_OWORD *)(v6 + 64);
    v26 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v22 + 77) = *(_OWORD *)(v6 + 77);
    *((_OWORD *)v22 + 3) = v25;
    *((_OWORD *)v22 + 4) = v24;
    *((_OWORD *)v22 + 2) = v26;
    if (v13 == v12)
    {
      v28 = &v21[32 * ((v13 - v12) >> 5)];
      v14 = &v21[v20];
      v13 = v22 + 96;
      if (!v12)
      {
LABEL_22:
        v12 = v28;
        goto LABEL_23;
      }
    }
    else
    {
      v27 = &v21[32 * ((v13 - v12) >> 5)];
      do
      {
        v28 = v27 - 96;
        v29 = *((_OWORD *)v13 - 5);
        *((_OWORD *)v27 - 6) = *((_OWORD *)v13 - 6);
        *((_OWORD *)v27 - 5) = v29;
        v30 = *((_OWORD *)v13 - 4);
        v31 = *((_OWORD *)v13 - 3);
        v32 = *((_OWORD *)v13 - 2);
        *(_OWORD *)(v27 - 19) = *(_OWORD *)(v13 - 19);
        *((_OWORD *)v27 - 3) = v31;
        *((_OWORD *)v27 - 2) = v32;
        *((_OWORD *)v27 - 4) = v30;
        v13 -= 96;
        v27 -= 96;
      }
      while (v13 != v12);
      v14 = &v21[v20];
      v13 = v22 + 96;
      if (!v12)
        goto LABEL_22;
    }
    operator delete(v12);
    goto LABEL_22;
  }
LABEL_42:
  v33 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v12) >> 5);
  v34 = v33 - 1;
  if (v33 > 1 || v62 && v12 != v13)
  {
    if (v61)
    {
      if (v13 == v12)
        goto LABEL_91;
      goto LABEL_55;
    }
    v35 = 1.2;
    if (v60 == 1)
      v35 = 1.35;
    if (v62)
    {
      if (v13 != v12)
      {
        v36 = (int)(v35 * (double)*((int *)v12 + 6) + 0.5);
        goto LABEL_56;
      }
    }
    else if (v13 != v12)
    {
      v48 = &v12[96 * v34];
      v49 = (int)(v35 * (double)*((int *)v48 + 5) + 0.5);
      v36 = *((_DWORD *)v48 + 6);
      if (v36 >= v49)
        v36 = v49;
      if (v33 == 1)
        goto LABEL_56;
      if (v33 >= 2)
      {
        if (v13 - v12 == 192)
        {
          v50 = 0;
        }
        else
        {
          v51 = 0;
          v50 = v34 & 0xFFFFFFFFFFFFFFFELL;
          v52 = (int *)(v12 + 120);
          v53 = v34 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v54 = *(v52 - 24);
            v55 = *v52;
            v52 += 48;
            v36 += v54;
            v51 += v55;
            v53 -= 2;
          }
          while (v53);
          v36 += v51;
          if (v34 == v50)
            goto LABEL_56;
        }
        v56 = ~v50 - 0x5555555555555555 * ((v13 - v12) >> 5);
        v57 = (int *)&v12[96 * v50 + 24];
        do
        {
          v58 = *v57;
          v57 += 24;
          v36 += v58;
          --v56;
        }
        while (v56);
LABEL_56:
        if (v36 <= v63)
          v37 = v63;
        else
          v37 = v36;
        goto LABEL_59;
      }
    }
LABEL_91:
    __break(1u);
LABEL_92:
    abort();
  }
  if (v59 && v12 != v13)
  {
LABEL_55:
    v36 = *((_DWORD *)v12 + 5);
    goto LABEL_56;
  }
  v37 = v63 & ~(v63 >> 31);
  if (v12)
LABEL_59:
    operator delete(v12);
  *(_DWORD *)(v2 + 1780) = v37;
  v38 = (char *)v64[1];
  v39 = (char *)v64[2];
  v40 = 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 5);
  v41 = *(_QWORD *)(v2 + 1072);
  if (v40 < (*(_QWORD *)(v2 + 1080) - v41) >> 2)
  {
    do
    {
      v42 = *(_DWORD *)(v41 + 4 * v40);
      pthread_mutex_lock((pthread_mutex_t *)(v2 + 432));
      StatsEntry = webrtc::SendStatisticsProxy::GetStatsEntry((webrtc::SendStatisticsProxy *)(v2 + 72), v42);
      if (StatsEntry)
      {
        *(_QWORD *)(StatsEntry + 28) = 0;
        *(_QWORD *)(StatsEntry + 20) = 0;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 432));
      ++v40;
      v41 = *(_QWORD *)(v2 + 1072);
    }
    while (v40 < (*(_QWORD *)(v2 + 1080) - v41) >> 2);
    v38 = (char *)v64[1];
    v39 = (char *)v64[2];
  }
  if (v38 == v39)
    goto LABEL_91;
  if (*(v39 - 40))
    v44 = *((_QWORD *)v39 - 6);
  else
    v44 = 1;
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 1584) + 128))(*(_QWORD *)(v2 + 1584), *(_QWORD *)v38, *((_QWORD *)v38 + 1), v44);
  if (*(_QWORD *)(v2 + 1752))
  {
    v46 = *(uint64_t (****)(_QWORD, uint64_t, uint64_t *))(v2 + 1768);
    v65 = *(_QWORD *)(v2 + 1784);
    if (*(_BYTE *)(v2 + 1777))
      v47 = 0;
    else
      v47 = *(_DWORD *)(v2 + 1780);
    v66 = v47;
    v67 = *(int *)(v2 + 1808);
    v68 = *(_BYTE *)(v2 + 1400) ^ 1;
    v69 = *(_QWORD *)(v2 + 1800);
    return (**v46)(v46, v2 + 8, &v65);
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::internal::VideoSendStreamImpl::OnEncoderConfigurationChanged(std::vector<webrtc::VideoStream>,BOOL,webrtc::VideoEncoderConfig::ContentType,int)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  void *v4;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(void **)(v3 + 8);
      if (v4)
      {
        *(_QWORD *)(v3 + 16) = v4;
        operator delete(v4);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::VideoSendStreamImpl::OnEncodedImage(webrtc::EncodedImage const&,webrtc::CodecSpecificInfo const*)::$_0 &&>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD, uint64_t, uint64_t *);
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v1 = *(_QWORD *)result;
  if (*(_BYTE *)(*(_QWORD *)result + 1777))
  {
    *(_BYTE *)(v1 + 1777) = 0;
    if (*(_QWORD *)(v1 + 1752))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_send_stream_impl.cc");
      v9 = *(uint64_t (****)(_QWORD, uint64_t, uint64_t *))(v1 + 1768);
      v11 = *(_QWORD *)(v1 + 1784);
      if (*(_BYTE *)(v1 + 1777))
        v10 = 0;
      else
        v10 = *(_DWORD *)(v1 + 1780);
      v12 = v10;
      v13 = *(int *)(v1 + 1808);
      v14 = *(_BYTE *)(v1 + 1400) ^ 1;
      v15 = *(_QWORD *)(v1 + 1800);
      result = (**v9)(v9, v1 + 8, &v11);
    }
  }
  if (*(_BYTE *)(v1 + 2176))
  {
    if (*(_BYTE *)(v1 + 2160))
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 112))(v1, v1 + 1992);
  }
  return result;
}

void rtc::VideoSourceBase::~VideoSourceBase(rtc::VideoSourceBase *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24C0C49A0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 40);
        if (v5)
        {
          *(_QWORD *)(v3 - 32) = v5;
          operator delete(v5);
        }
        v3 -= 72;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24C0C49A0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 40);
        if (v5)
        {
          *(_QWORD *)(v3 - 32) = v5;
          operator delete(v5);
        }
        v3 -= 72;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void rtc::VideoSourceBase::AddOrUpdateSink(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  void **v7;
  unint64_t v8;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD v32[2];

  v6 = a1[1];
  v8 = a1[2];
  v7 = (void **)(a1 + 1);
  if (v6 != v8)
  {
    while (*(_QWORD *)v6 != a2)
    {
      v6 += 72;
      if (v6 == v8)
        goto LABEL_10;
    }
  }
  if (v6 == v8 || v6 == 0)
  {
LABEL_10:
    v11 = (_BYTE *)*((_QWORD *)a3 + 3);
    v10 = (_BYTE *)*((_QWORD *)a3 + 4);
    v12 = v10 - v11;
    if (v10 == v11)
    {
      v13 = 0;
      v14 = 0;
    }
    else
    {
      if (v12 < 0)
        goto LABEL_34;
      v13 = (char *)operator new(v10 - v11);
      v14 = &v13[8 * (v12 >> 3)];
      memcpy(v13, v11, v12);
    }
    v26 = a2;
    v27 = *a3;
    v28 = *((_QWORD *)a3 + 2);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v17 = v14 - v13;
    if (v14 == v13)
    {
      v19 = 0;
      v18 = 0;
    }
    else
    {
      if (v17 < 0)
        goto LABEL_34;
      v18 = (char *)operator new(v14 - v13);
      v19 = &v18[8 * (v17 >> 3)];
      v29 = v18;
      v31 = v19;
      memcpy(v18, v13, v17);
      v30 = v19;
    }
    v32[0] = *((_QWORD *)a3 + 6);
    *(_QWORD *)((char *)v32 + 7) = *(_QWORD *)((char *)a3 + 55);
    if (v8 >= a1[3])
    {
      v25 = std::vector<rtc::VideoSourceBase::SinkPair>::__push_back_slow_path<rtc::VideoSourceBase::SinkPair>(v7, (uint64_t)&v26);
      v18 = v29;
      a1[2] = v25;
      if (!v18)
        goto LABEL_30;
      goto LABEL_29;
    }
    if (v8)
    {
      *(_QWORD *)v8 = a2;
      v20 = v28;
      *(_OWORD *)(v8 + 8) = v27;
      *(_QWORD *)(v8 + 24) = v20;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      v21 = v19 - v18;
      if (v19 == v18)
        goto LABEL_26;
      if ((v21 & 0x8000000000000000) == 0)
      {
        v22 = (char *)operator new(v19 - v18);
        *(_QWORD *)(v8 + 32) = v22;
        v23 = &v22[8 * (v21 >> 3)];
        *(_QWORD *)(v8 + 48) = v23;
        memcpy(v22, v18, v19 - v18);
        *(_QWORD *)(v8 + 40) = v23;
LABEL_26:
        v24 = v32[0];
        *(_QWORD *)(v8 + 63) = *(_QWORD *)((char *)v32 + 7);
        *(_QWORD *)(v8 + 56) = v24;
        a1[2] = v8 + 72;
        if (!v18)
        {
LABEL_30:
          if (v13)
            operator delete(v13);
          return;
        }
LABEL_29:
        v30 = v18;
        operator delete(v18);
        goto LABEL_30;
      }
    }
    else
    {
      __break(1u);
    }
LABEL_34:
    abort();
  }
  v15 = *a3;
  *(_QWORD *)(v6 + 24) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 8) = v15;
  if ((__int128 *)(v6 + 8) != a3)
    std::vector<webrtc::rtcp::TargetBitrate::BitrateItem>::__assign_with_size[abi:sn180100]<webrtc::rtcp::TargetBitrate::BitrateItem*,webrtc::rtcp::TargetBitrate::BitrateItem*>((_QWORD *)(v6 + 32), *((char **)a3 + 3), *((char **)a3 + 4), (uint64_t)(*((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3)) >> 3);
  v16 = *((_QWORD *)a3 + 6);
  *(_QWORD *)(v6 + 63) = *(_QWORD *)((char *)a3 + 55);
  *(_QWORD *)(v6 + 56) = v16;
}

void rtc::VideoSourceBase::RemoveSink(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  if ((_QWORD *)v3 != v2)
  {
    while (*(_QWORD *)v3 != a2)
    {
      v3 += 72;
      if ((_QWORD *)v3 == v2)
        return;
    }
    if ((_QWORD *)v3 != v2)
    {
      v6 = v3 + 72;
      if ((_QWORD *)(v3 + 72) != v2)
      {
        do
        {
          if (*(_QWORD *)v6 != a2)
          {
            *(_QWORD *)v3 = *(_QWORD *)v6;
            v8 = *(_OWORD *)(v6 + 8);
            *(_QWORD *)(v3 + 24) = *(_QWORD *)(v6 + 24);
            *(_OWORD *)(v3 + 8) = v8;
            if (v6 != v3)
              std::vector<webrtc::rtcp::TargetBitrate::BitrateItem>::__assign_with_size[abi:sn180100]<webrtc::rtcp::TargetBitrate::BitrateItem*,webrtc::rtcp::TargetBitrate::BitrateItem*>((_QWORD *)(v3 + 32), *(char **)(v6 + 32), *(char **)(v6 + 40), (uint64_t)(*(_QWORD *)(v6 + 40) - *(_QWORD *)(v6 + 32)) >> 3);
            v7 = *(_QWORD *)(v6 + 56);
            *(_QWORD *)(v3 + 63) = *(_QWORD *)(v6 + 63);
            *(_QWORD *)(v3 + 56) = v7;
            v3 += 72;
          }
          v6 += 72;
        }
        while ((_QWORD *)v6 != v2);
        v2 = *(_QWORD **)(a1 + 16);
      }
    }
    v9 = (uint64_t)v2 - v3;
    if ((unint64_t)v2 < v3)
    {
      __break(1u);
    }
    else if ((_QWORD *)v3 != v2)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = (uint64_t)(v3 - v10) / 72;
      v12 = (_QWORD *)(v10 + 72 * v11);
      if ((_QWORD *)((char *)v12 + v9) != v2)
      {
        v13 = (_QWORD *)(v10 + 72 * v11 + 32);
        v14 = v9 >> 3;
        do
        {
          v16 = &v13[v14];
          *(v13 - 4) = v13[v14 - 4];
          v17 = v13[v14 - 1];
          *(_OWORD *)(v13 - 3) = *(_OWORD *)&v13[v14 - 3];
          *(v13 - 1) = v17;
          if (v14 * 8)
            std::vector<webrtc::rtcp::TargetBitrate::BitrateItem>::__assign_with_size[abi:sn180100]<webrtc::rtcp::TargetBitrate::BitrateItem*,webrtc::rtcp::TargetBitrate::BitrateItem*>(v13, (char *)*v16, (char *)v16[1], (uint64_t)(v16[1] - *v16) >> 3);
          v15 = v16[3];
          *(_QWORD *)((char *)v13 + 31) = *(_QWORD *)((char *)v16 + 31);
          v13[3] = v15;
          v13 += 9;
        }
        while (&v13[v14 - 4] != v2);
        v2 = *(_QWORD **)(a1 + 16);
        v12 = v13 - 4;
      }
      while (v2 != v12)
      {
        v18 = (void *)*(v2 - 5);
        if (v18)
        {
          *(v2 - 4) = v18;
          operator delete(v18);
        }
        v2 -= 9;
      }
      *(_QWORD *)(a1 + 16) = v12;
    }
  }
}

void rtc::VideoSourceBaseGuarded::~VideoSourceBaseGuarded(rtc::VideoSourceBaseGuarded *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24C0C49D8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 40);
        if (v5)
        {
          *(_QWORD *)(v3 - 32) = v5;
          operator delete(v5);
        }
        v3 -= 72;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24C0C49D8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 40);
        if (v5)
        {
          *(_QWORD *)(v3 - 32) = v5;
          operator delete(v5);
        }
        v3 -= 72;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void rtc::VideoSourceBaseGuarded::AddOrUpdateSink(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  void **v7;
  unint64_t v8;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD v32[2];

  v6 = a1[1];
  v8 = a1[2];
  v7 = (void **)(a1 + 1);
  if (v6 != v8)
  {
    while (*(_QWORD *)v6 != a2)
    {
      v6 += 72;
      if (v6 == v8)
        goto LABEL_10;
    }
  }
  if (v6 == v8 || v6 == 0)
  {
LABEL_10:
    v11 = (_BYTE *)*((_QWORD *)a3 + 3);
    v10 = (_BYTE *)*((_QWORD *)a3 + 4);
    v12 = v10 - v11;
    if (v10 == v11)
    {
      v13 = 0;
      v14 = 0;
    }
    else
    {
      if (v12 < 0)
        goto LABEL_34;
      v13 = (char *)operator new(v10 - v11);
      v14 = &v13[8 * (v12 >> 3)];
      memcpy(v13, v11, v12);
    }
    v26 = a2;
    v27 = *a3;
    v28 = *((_QWORD *)a3 + 2);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v17 = v14 - v13;
    if (v14 == v13)
    {
      v19 = 0;
      v18 = 0;
    }
    else
    {
      if (v17 < 0)
        goto LABEL_34;
      v18 = (char *)operator new(v14 - v13);
      v19 = &v18[8 * (v17 >> 3)];
      v29 = v18;
      v31 = v19;
      memcpy(v18, v13, v17);
      v30 = v19;
    }
    v32[0] = *((_QWORD *)a3 + 6);
    *(_QWORD *)((char *)v32 + 7) = *(_QWORD *)((char *)a3 + 55);
    if (v8 >= a1[3])
    {
      v25 = std::vector<rtc::VideoSourceBase::SinkPair>::__push_back_slow_path<rtc::VideoSourceBase::SinkPair>(v7, (uint64_t)&v26);
      v18 = v29;
      a1[2] = v25;
      if (!v18)
        goto LABEL_30;
      goto LABEL_29;
    }
    if (v8)
    {
      *(_QWORD *)v8 = a2;
      v20 = v28;
      *(_OWORD *)(v8 + 8) = v27;
      *(_QWORD *)(v8 + 24) = v20;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      v21 = v19 - v18;
      if (v19 == v18)
        goto LABEL_26;
      if ((v21 & 0x8000000000000000) == 0)
      {
        v22 = (char *)operator new(v19 - v18);
        *(_QWORD *)(v8 + 32) = v22;
        v23 = &v22[8 * (v21 >> 3)];
        *(_QWORD *)(v8 + 48) = v23;
        memcpy(v22, v18, v19 - v18);
        *(_QWORD *)(v8 + 40) = v23;
LABEL_26:
        v24 = v32[0];
        *(_QWORD *)(v8 + 63) = *(_QWORD *)((char *)v32 + 7);
        *(_QWORD *)(v8 + 56) = v24;
        a1[2] = v8 + 72;
        if (!v18)
        {
LABEL_30:
          if (v13)
            operator delete(v13);
          return;
        }
LABEL_29:
        v30 = v18;
        operator delete(v18);
        goto LABEL_30;
      }
    }
    else
    {
      __break(1u);
    }
LABEL_34:
    abort();
  }
  v15 = *a3;
  *(_QWORD *)(v6 + 24) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 8) = v15;
  if ((__int128 *)(v6 + 8) != a3)
    std::vector<webrtc::rtcp::TargetBitrate::BitrateItem>::__assign_with_size[abi:sn180100]<webrtc::rtcp::TargetBitrate::BitrateItem*,webrtc::rtcp::TargetBitrate::BitrateItem*>((_QWORD *)(v6 + 32), *((char **)a3 + 3), *((char **)a3 + 4), (uint64_t)(*((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3)) >> 3);
  v16 = *((_QWORD *)a3 + 6);
  *(_QWORD *)(v6 + 63) = *(_QWORD *)((char *)a3 + 55);
  *(_QWORD *)(v6 + 56) = v16;
}

void rtc::VideoSourceBaseGuarded::RemoveSink(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  if ((_QWORD *)v3 != v2)
  {
    while (*(_QWORD *)v3 != a2)
    {
      v3 += 72;
      if ((_QWORD *)v3 == v2)
        return;
    }
    if ((_QWORD *)v3 != v2)
    {
      v6 = v3 + 72;
      if ((_QWORD *)(v3 + 72) != v2)
      {
        do
        {
          if (*(_QWORD *)v6 != a2)
          {
            *(_QWORD *)v3 = *(_QWORD *)v6;
            v8 = *(_OWORD *)(v6 + 8);
            *(_QWORD *)(v3 + 24) = *(_QWORD *)(v6 + 24);
            *(_OWORD *)(v3 + 8) = v8;
            if (v6 != v3)
              std::vector<webrtc::rtcp::TargetBitrate::BitrateItem>::__assign_with_size[abi:sn180100]<webrtc::rtcp::TargetBitrate::BitrateItem*,webrtc::rtcp::TargetBitrate::BitrateItem*>((_QWORD *)(v3 + 32), *(char **)(v6 + 32), *(char **)(v6 + 40), (uint64_t)(*(_QWORD *)(v6 + 40) - *(_QWORD *)(v6 + 32)) >> 3);
            v7 = *(_QWORD *)(v6 + 56);
            *(_QWORD *)(v3 + 63) = *(_QWORD *)(v6 + 63);
            *(_QWORD *)(v3 + 56) = v7;
            v3 += 72;
          }
          v6 += 72;
        }
        while ((_QWORD *)v6 != v2);
        v2 = *(_QWORD **)(a1 + 16);
      }
    }
    v9 = (uint64_t)v2 - v3;
    if ((unint64_t)v2 < v3)
    {
      __break(1u);
    }
    else if ((_QWORD *)v3 != v2)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = (uint64_t)(v3 - v10) / 72;
      v12 = (_QWORD *)(v10 + 72 * v11);
      if ((_QWORD *)((char *)v12 + v9) != v2)
      {
        v13 = (_QWORD *)(v10 + 72 * v11 + 32);
        v14 = v9 >> 3;
        do
        {
          v16 = &v13[v14];
          *(v13 - 4) = v13[v14 - 4];
          v17 = v13[v14 - 1];
          *(_OWORD *)(v13 - 3) = *(_OWORD *)&v13[v14 - 3];
          *(v13 - 1) = v17;
          if (v14 * 8)
            std::vector<webrtc::rtcp::TargetBitrate::BitrateItem>::__assign_with_size[abi:sn180100]<webrtc::rtcp::TargetBitrate::BitrateItem*,webrtc::rtcp::TargetBitrate::BitrateItem*>(v13, (char *)*v16, (char *)v16[1], (uint64_t)(v16[1] - *v16) >> 3);
          v15 = v16[3];
          *(_QWORD *)((char *)v13 + 31) = *(_QWORD *)((char *)v16 + 31);
          v13[3] = v15;
          v13 += 9;
        }
        while (&v13[v14 - 4] != v2);
        v2 = *(_QWORD **)(a1 + 16);
        v12 = v13 - 4;
      }
      while (v2 != v12)
      {
        v18 = (void *)*(v2 - 5);
        if (v18)
        {
          *(v2 - 4) = v18;
          operator delete(v18);
        }
        v2 -= 9;
      }
      *(_QWORD *)(a1 + 16) = v12;
    }
  }
}

char *std::vector<rtc::VideoSourceBase::SinkPair>::__push_back_slow_path<rtc::VideoSourceBase::SinkPair>(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;
  char *v26;
  void *v27;
  char *v29;

  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  v4 = 0x8E38E38E38E38E39 * ((v3 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    goto LABEL_26;
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - v2) >> 3) > v5)
    v5 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - v2) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - v2) >> 3) >= 0x1C71C71C71C71C7)
    v5 = 0x38E38E38E38E38ELL;
  if (!v5)
  {
    __break(1u);
LABEL_28:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x38E38E38E38E38ELL)
    goto LABEL_28;
  v7 = 72 * v5;
  v8 = (char *)operator new(72 * v5);
  v9 = &v8[72 * v4];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  v10 = *(_BYTE **)(a2 + 32);
  *((_QWORD *)v9 + 3) = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v9 + 4) = 0;
  *((_QWORD *)v9 + 5) = 0;
  *((_QWORD *)v9 + 6) = 0;
  v11 = *(_BYTE **)(a2 + 40);
  v12 = v11 - v10;
  if (v11 == v10)
    goto LABEL_11;
  if (v12 < 0)
LABEL_26:
    abort();
  v13 = (char *)operator new(v11 - v10);
  *((_QWORD *)v9 + 4) = v13;
  v14 = &v13[8 * (v12 >> 3)];
  *((_QWORD *)v9 + 6) = v14;
  memcpy(v13, v10, v12);
  *((_QWORD *)v9 + 5) = v14;
LABEL_11:
  *((_QWORD *)v9 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(v9 + 63) = *(_QWORD *)(a2 + 63);
  v15 = v9 + 72;
  if (v3 == v2)
  {
    *a1 = v9;
    a1[1] = v15;
    a1[2] = &v8[v7];
    if (!v3)
      return v15;
    goto LABEL_22;
  }
  v29 = &v8[v7];
  v16 = v3;
  v17 = v3;
  v18 = v9;
  do
  {
    v20 = *((_QWORD *)v17 - 9);
    v17 -= 72;
    *((_QWORD *)v18 - 9) = v20;
    v18 -= 72;
    v21 = *((_QWORD *)v17 + 3);
    *(_OWORD *)(v18 + 8) = *(_OWORD *)(v17 + 8);
    *((_QWORD *)v18 + 3) = v21;
    *((_QWORD *)v18 + 4) = 0;
    *((_QWORD *)v18 + 5) = 0;
    *((_QWORD *)v18 + 6) = 0;
    v23 = (_BYTE *)*((_QWORD *)v17 + 4);
    v22 = (_BYTE *)*((_QWORD *)v17 + 5);
    v24 = v22 - v23;
    if (v22 != v23)
    {
      if (v24 < 0)
        goto LABEL_26;
      v25 = (char *)operator new(v22 - v23);
      *((_QWORD *)v9 - 5) = v25;
      *((_QWORD *)v9 - 4) = v25;
      v26 = &v25[8 * (v24 >> 3)];
      *((_QWORD *)v9 - 3) = v26;
      memcpy(v25, v23, v24);
      *((_QWORD *)v9 - 4) = v26;
    }
    v19 = *((_QWORD *)v16 - 2);
    *(_QWORD *)(v9 - 9) = *(_QWORD *)(v16 - 9);
    *((_QWORD *)v9 - 2) = v19;
    v16 = v17;
    v9 = v18;
  }
  while (v17 != v2);
  *a1 = v18;
  a1[1] = v15;
  a1[2] = v29;
  do
  {
    v27 = (void *)*((_QWORD *)v3 - 5);
    if (v27)
    {
      *((_QWORD *)v3 - 4) = v27;
      operator delete(v27);
    }
    v3 -= 72;
  }
  while (v3 != v2);
  v3 = v2;
  if (v2)
LABEL_22:
    operator delete(v3);
  return v15;
}

double rtc::VideoSinkWants::VideoSinkWants(rtc::VideoSinkWants *this)
{
  double result;

  *(_WORD *)this = 0;
  *((_DWORD *)this + 1) = 0x7FFFFFFF;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 12) = 0;
  *(_QWORD *)&result = 0x17FFFFFFFLL;
  *((_QWORD *)this + 2) = 0x17FFFFFFFLL;
  *((_BYTE *)this + 56) = 0;
  *((_WORD *)this + 30) = 0;
  *((_BYTE *)this + 62) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 48) = 0;
  return result;
}

void rtc::VideoSinkWants::~VideoSinkWants(rtc::VideoSinkWants *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

void webrtc::VideoSourceRestrictions::ToString(webrtc::VideoSourceRestrictions *this@<X0>, std::string *a2@<X8>)
{
  unsigned int v5;
  std::string::size_type v6;
  std::string::size_type size;
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string *v11;
  char *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string::size_type v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string *v19;
  _WORD *v20;
  std::string::size_type v21;
  std::string *v22;
  char *v23;
  std::string::size_type v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (&v25 <= (std::string *)"{" && (char *)&v25.__r_.__value_.__l.__data_ + 1 > "{")
    goto LABEL_65;
  LOWORD(v25.__r_.__value_.__l.__data_) = 123;
  v5 = 1;
  *((_BYTE *)&v25.__r_.__value_.__s + 23) = 1;
  if (*((_BYTE *)this + 40))
  {
    if ((char *)&v25.__r_.__value_.__l.__data_ + 1 <= " max_fps="
      && (char *)&v25.__r_.__value_.__r.__words[1] + 2 > " max_fps=")
    {
      goto LABEL_65;
    }
    strcpy(&v25.__r_.__value_.__s.__data_[1], " max_fps=");
    *((_BYTE *)&v25.__r_.__value_.__s + 23) = 10;
    rtc::StringBuilder::operator<<(&v25, *((double *)this + 4));
    v5 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    v6 = v25.__r_.__value_.__r.__words[2];
    size = v25.__r_.__value_.__l.__size_;
    if (*((_BYTE *)this + 8))
      goto LABEL_9;
  }
  else
  {
    size = 0;
    v6 = v25.__r_.__value_.__r.__words[2];
    if (*((_BYTE *)this + 8))
    {
LABEL_9:
      v8 = (v6 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v5 & 0x80u) == 0)
        v9 = 22;
      else
        v9 = v8;
      if ((v5 & 0x80u) == 0)
        v10 = v5;
      else
        v10 = size;
      if (v9 - v10 >= 0x16)
      {
        v11 = (std::string *)v25.__r_.__value_.__r.__words[0];
        if ((v5 & 0x80u) == 0)
          v11 = &v25;
        v12 = (char *)v11 + v10;
        if ((char *)v11 + v10 <= " max_pixels_per_frame=" && v12 + 22 > " max_pixels_per_frame=")
          goto LABEL_65;
        qmemcpy(v12, " max_pixels_per_frame=", 22);
        v13 = v10 + 22;
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        {
          v25.__r_.__value_.__l.__size_ = v10 + 22;
          v11->__r_.__value_.__s.__data_[v13] = 0;
          if (!*((_BYTE *)this + 8))
            goto LABEL_59;
        }
        else
        {
          *((_BYTE *)&v25.__r_.__value_.__s + 23) = v13 & 0x7F;
          v11->__r_.__value_.__s.__data_[v13] = 0;
          if (!*((_BYTE *)this + 8))
            goto LABEL_59;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v25, v9, v10 - v9 + 22, v10, v10, 0, 0x16uLL, " max_pixels_per_frame=");
        if (!*((_BYTE *)this + 8))
          goto LABEL_59;
      }
      rtc::StringBuilder::operator<<(&v25, *(_QWORD *)this);
      v5 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      v6 = v25.__r_.__value_.__r.__words[2];
      size = v25.__r_.__value_.__l.__size_;
      if (!*((_BYTE *)this + 24))
        goto LABEL_39;
LABEL_30:
      if ((v5 & 0x80u) == 0)
        v14 = 22;
      else
        v14 = (v6 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v5 & 0x80u) == 0)
        v15 = v5;
      else
        v15 = size;
      if (v14 - v15 >= 0x19)
      {
        v22 = (std::string *)v25.__r_.__value_.__r.__words[0];
        if ((v5 & 0x80u) == 0)
          v22 = &v25;
        v23 = (char *)v22 + v15;
        if ((char *)v22 + v15 <= " target_pixels_per_frame=" && v23 + 25 > " target_pixels_per_frame=")
          goto LABEL_65;
        qmemcpy(v23, " target_pixels_per_frame=", 25);
        v24 = v15 + 25;
        if ((v6 & 0x8000000000000000) != 0)
        {
          v25.__r_.__value_.__l.__size_ = v15 + 25;
          v22->__r_.__value_.__s.__data_[v24] = 0;
          if (!*((_BYTE *)this + 24))
            goto LABEL_59;
          goto LABEL_38;
        }
        *((_BYTE *)&v25.__r_.__value_.__s + 23) = v24 & 0x7F;
        v22->__r_.__value_.__s.__data_[v24] = 0;
        if (*((_BYTE *)this + 24))
        {
LABEL_38:
          rtc::StringBuilder::operator<<(&v25, *((_QWORD *)this + 2));
          v5 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
          v6 = v25.__r_.__value_.__r.__words[2];
          size = v25.__r_.__value_.__l.__size_;
          goto LABEL_39;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v25, v14, v15 - v14 + 25, v15, v15, 0, 0x19uLL, " target_pixels_per_frame=");
        if (*((_BYTE *)this + 24))
          goto LABEL_38;
      }
LABEL_59:
      std::__throw_bad_optional_access[abi:sn180100]();
      goto LABEL_60;
    }
  }
  if (*((_BYTE *)this + 24))
    goto LABEL_30;
LABEL_39:
  v16 = (v6 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v5 & 0x80u) == 0)
    v17 = 22;
  else
    v17 = v16;
  if ((v5 & 0x80u) == 0)
    v18 = v5;
  else
    v18 = size;
  if (v17 - v18 < 2)
  {
    std::string::__grow_by_and_replace(&v25, v17, v18 - v17 + 2, v18, v18, 0, 2uLL, " }");
LABEL_62:
    *a2 = v25;
    return;
  }
  v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v5 & 0x80u) == 0)
    v19 = &v25;
  v20 = (_WORD *)((char *)v19 + v18);
  if ((char *)v19 + v18 > " }" || v20 + 1 <= (_WORD *)" }")
  {
    *v20 = 32032;
    v21 = v18 + 2;
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *((_BYTE *)&v25.__r_.__value_.__s + 23) = v21 & 0x7F;
LABEL_61:
      v19->__r_.__value_.__s.__data_[v21] = 0;
      goto LABEL_62;
    }
LABEL_60:
    v25.__r_.__value_.__l.__size_ = v21;
    goto LABEL_61;
  }
LABEL_65:
  __break(1u);
}

webrtc::VideoSourceSinkController *webrtc::VideoSourceSinkController::CurrentSettingsToSinkWants@<X0>(webrtc::VideoSourceSinkController *this@<X0>, uint64_t a2@<X8>)
{
  webrtc::VideoSourceSinkController *result;
  int v5;
  int v6;
  int v7;

  *(_BYTE *)(a2 + 1) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  result = (webrtc::VideoSourceSinkController *)(a2 + 24);
  *(_BYTE *)(a2 + 56) = 0;
  *(_WORD *)(a2 + 60) = 0;
  *(_BYTE *)(a2 + 62) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)a2 = *((_BYTE *)this + 96);
  if (*((_BYTE *)this + 24))
    v5 = *((_DWORD *)this + 4);
  else
    v5 = 0x7FFFFFFF;
  if (*((_BYTE *)this + 40))
  {
    *(_DWORD *)(a2 + 8) = *((_DWORD *)this + 8);
    *(_BYTE *)(a2 + 12) = 1;
    if (*((_BYTE *)this + 56))
      goto LABEL_6;
  }
  else
  {
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if (*((_BYTE *)this + 56))
    {
LABEL_6:
      v6 = (int)*((double *)this + 6);
      *(_DWORD *)(a2 + 20) = *((_DWORD *)this + 25);
      if (*((_BYTE *)this + 72))
        goto LABEL_7;
LABEL_17:
      *(_DWORD *)(a2 + 4) = v5;
      if (*((_BYTE *)this + 88))
        goto LABEL_10;
LABEL_18:
      *(_DWORD *)(a2 + 16) = v6;
      if (result == (webrtc::VideoSourceSinkController *)((char *)this + 104))
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v6 = 0x7FFFFFFF;
  *(_DWORD *)(a2 + 20) = *((_DWORD *)this + 25);
  if (!*((_BYTE *)this + 72))
    goto LABEL_17;
LABEL_7:
  if (*((_DWORD *)this + 16) < v5)
    v5 = *((_DWORD *)this + 16);
  *(_DWORD *)(a2 + 4) = v5;
  if (!*((_BYTE *)this + 88))
    goto LABEL_18;
LABEL_10:
  v7 = (int)*((double *)this + 10);
  if (v7 >= v6)
    v7 = v6;
  *(_DWORD *)(a2 + 16) = v7;
  if (result != (webrtc::VideoSourceSinkController *)((char *)this + 104))
LABEL_13:
    result = (webrtc::VideoSourceSinkController *)std::vector<webrtc::rtcp::TargetBitrate::BitrateItem>::__assign_with_size[abi:sn180100]<webrtc::rtcp::TargetBitrate::BitrateItem*,webrtc::rtcp::TargetBitrate::BitrateItem*>(result, *((char **)this + 13), *((char **)this + 14), (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3);
LABEL_14:
  *(_BYTE *)(a2 + 60) = *((_BYTE *)this + 128);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)((char *)this + 132);
  *(_BYTE *)(a2 + 56) = *((_BYTE *)this + 140);
  return result;
}

uint64_t webrtc::VideoStreamAdapter::BroadcastVideoRestrictionsUpdate(uint64_t result, __n128 a2, uint64_t a3, void (****a4)(_QWORD, __n128))
{
  _OWORD *v4;
  int v5;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (***v14)(_QWORD, __n128);
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _OWORD v22[3];
  void (***v23)(_QWORD, __n128);
  uint64_t v24;
  char v25;
  _BYTE v26[7];
  uint64_t v27;
  char v28;
  _BYTE v29[7];
  double v30;
  char v31;
  _BYTE v32[7];
  _DWORD v33[2];
  _DWORD v34[2];
  _DWORD v35[4];

  v4 = (_OWORD *)(result + 208);
  v21 = *(_QWORD *)(result + 208);
  v5 = *(_DWORD *)(result + 44);
  if (v5)
  {
    v6 = *(double *)(result + 240);
    v7 = *(unsigned __int8 *)(result + 248);
    if (v5 == 2)
    {
      v20 = 0;
      v19 = 0;
      v8 = 0;
      v21 = 0;
    }
    else
    {
      v8 = *(unsigned __int8 *)(result + 216);
      v19 = *(_QWORD *)(result + 224);
      v20 = *(unsigned __int8 *)(result + 232);
      a2.n128_u64[0] = 0;
      if (v5 == 1)
        v7 = 0;
      else
        v7 = *(unsigned __int8 *)(result + 248);
      if (v5 == 1)
        v6 = 0.0;
    }
  }
  else
  {
    v7 = 0;
    v20 = 0;
    v19 = 0;
    v8 = 0;
    v21 = 0;
    v6 = 0.0;
  }
  v35[0] = *(_DWORD *)(result + 217);
  *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)(result + 220);
  v34[0] = *(_DWORD *)(result + 233);
  *(_DWORD *)((char *)v34 + 3) = *(_DWORD *)(result + 236);
  v33[0] = *(_DWORD *)(result + 249);
  *(_DWORD *)((char *)v33 + 3) = *(_DWORD *)(result + 252);
  if (v8 && *(_BYTE *)(result + 120))
  {
    if (*(_QWORD *)(result + 112) != v21)
      goto LABEL_25;
  }
  else if ((v8 != 0) != (*(_BYTE *)(result + 120) != 0))
  {
    goto LABEL_25;
  }
  if (v20 && *(_BYTE *)(result + 136))
  {
    if (*(_QWORD *)(result + 128) != v19)
      goto LABEL_25;
  }
  else if ((v20 != 0) != (*(_BYTE *)(result + 136) != 0))
  {
    goto LABEL_25;
  }
  if ((_DWORD)v7 && *(_BYTE *)(result + 152))
  {
    a2.n128_u64[0] = *(_QWORD *)(result + 144);
    if (a2.n128_f64[0] == v6)
      return result;
  }
  else if (((_DWORD)v7 != 0) == (*(_BYTE *)(result + 152) != 0))
  {
    return result;
  }
LABEL_25:
  v9 = *(uint64_t **)(result + 160);
  v10 = *(uint64_t **)(result + 168);
  v17 = result;
  if (v9 != v10)
  {
    v11 = result + 256;
    do
    {
      v12 = *v9;
      v24 = v21;
      v25 = v8;
      *(_DWORD *)v26 = v35[0];
      *(_DWORD *)&v26[3] = *(_DWORD *)((char *)v35 + 3);
      v27 = v19;
      v28 = v20;
      *(_DWORD *)v29 = v34[0];
      *(_DWORD *)&v29[3] = *(_DWORD *)((char *)v34 + 3);
      v30 = v6;
      v13 = v7;
      v31 = v7;
      *(_DWORD *)v32 = v33[0];
      *(_DWORD *)&v32[3] = *(_DWORD *)((char *)v33 + 3);
      v14 = *a4;
      v23 = v14;
      if (v14)
        (**v14)(v14, a2);
      v15 = v4[2];
      v22[1] = v4[1];
      v22[2] = v15;
      v22[0] = *v4;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void (****)(_QWORD, __n128), _OWORD *))(*(_QWORD *)v12 + 16))(v12, &v24, v11, &v23, v22);
      result = (uint64_t)v23;
      if (v23)
        result = ((uint64_t (*)(void (***)(_QWORD, __n128)))(*v23)[1])(v23);
      ++v9;
      v7 = v13;
    }
    while (v9 != v10);
  }
  v16 = v4[1];
  *(_OWORD *)(v17 + 64) = *v4;
  *(_OWORD *)(v17 + 80) = v16;
  *(_OWORD *)(v17 + 96) = v4[2];
  *(_QWORD *)(v17 + 112) = v21;
  *(_BYTE *)(v17 + 120) = v8;
  *(_DWORD *)(v17 + 121) = v35[0];
  *(_DWORD *)(v17 + 124) = *(_DWORD *)((char *)v35 + 3);
  *(_QWORD *)(v17 + 128) = v19;
  *(_BYTE *)(v17 + 136) = v20;
  *(_DWORD *)(v17 + 140) = *(_DWORD *)((char *)v34 + 3);
  *(_DWORD *)(v17 + 137) = v34[0];
  *(double *)(v17 + 144) = v6;
  *(_BYTE *)(v17 + 152) = v7;
  *(_DWORD *)(v17 + 156) = *(_DWORD *)((char *)v33 + 3);
  *(_DWORD *)(v17 + 153) = v33[0];
  return result;
}

void webrtc::VideoStreamAdapter::AddRestrictionsListener(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[21];
  v4 = a1[22];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    if (v5)
    {
      *(_QWORD *)v5 = a2;
      v7 = v5 + 8;
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v8 = (char *)a1[20];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    goto LABEL_23;
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
  v13 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v12)
    v13 = v10;
  if (!v13)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    abort();
  }
  if (v13 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v14 = 8 * v13;
  v15 = (char *)operator new(8 * v13);
  v16 = &v15[v14];
  v17 = &v15[8 * v9];
  *(_QWORD *)v17 = a2;
  v7 = v17 + 8;
  if (v5 != v8)
  {
    v18 = v5 - v8 - 8;
    if (v18 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v15) < 0x20)
      goto LABEL_27;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v17 -= v20;
    v21 = &v15[8 * v9 - 16];
    v22 = (__int128 *)(v5 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v17 - 1) = v25;
        v17 -= 8;
      }
      while (v6 != v8);
    }
    v6 = v8;
  }
  a1[20] = v17;
  a1[21] = v7;
  a1[22] = v16;
  if (v6)
    operator delete(v6);
LABEL_21:
  a1[21] = v7;
}

void webrtc::VideoStreamAdapter::AddAdaptationConstraint(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[24];
  v4 = a1[25];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    if (v5)
    {
      *(_QWORD *)v5 = a2;
      v7 = v5 + 8;
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v8 = (char *)a1[23];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    goto LABEL_23;
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
  v13 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v12)
    v13 = v10;
  if (!v13)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    abort();
  }
  if (v13 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v14 = 8 * v13;
  v15 = (char *)operator new(8 * v13);
  v16 = &v15[v14];
  v17 = &v15[8 * v9];
  *(_QWORD *)v17 = a2;
  v7 = v17 + 8;
  if (v5 != v8)
  {
    v18 = v5 - v8 - 8;
    if (v18 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v15) < 0x20)
      goto LABEL_27;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v17 -= v20;
    v21 = &v15[8 * v9 - 16];
    v22 = (__int128 *)(v5 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v17 - 1) = v25;
        v17 -= 8;
      }
      while (v6 != v8);
    }
    v6 = v8;
  }
  a1[23] = v17;
  a1[24] = v7;
  a1[25] = v16;
  if (v6)
    operator delete(v6);
LABEL_21:
  a1[24] = v7;
}

uint64_t webrtc::VideoStreamAdapter::SetDegradationPreference(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void (***v13)(_QWORD, __n128);
  _QWORD v14[4];

  v2 = *(_DWORD *)(result + 44);
  if (v2 != a2)
  {
    v3 = result;
    ++*(_DWORD *)(result + 40);
    if (a2 == 3)
    {
      *(_DWORD *)(result + 44) = 3;
    }
    else
    {
      *(_DWORD *)(result + 44) = a2;
      if (v2 != 3)
      {
LABEL_9:
        (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v3 + 16))(v14);
        v13 = 0;
        return webrtc::VideoStreamAdapter::BroadcastVideoRestrictionsUpdate(v3, v12, v11, &v13);
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/video_stream_adapter.cc");
    ++*(_DWORD *)(v3 + 40);
    *(_BYTE *)(v3 + 208) = 0;
    *(_BYTE *)(v3 + 216) = 0;
    *(_BYTE *)(v3 + 224) = 0;
    *(_BYTE *)(v3 + 232) = 0;
    *(_BYTE *)(v3 + 240) = 0;
    *(_BYTE *)(v3 + 248) = 0;
    *(_QWORD *)(v3 + 256) = 0;
    if (*(_BYTE *)(v3 + 56))
      *(_BYTE *)(v3 + 56) = 0;
    goto LABEL_9;
  }
  return result;
}

__n128 webrtc::VideoStreamAdapter::GetAdaptationUp@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  BOOL v6;
  int v8;
  BOOL v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  __n128 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  signed int v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  void *__p;
  char v54;
  _BYTE v55[48];
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[32];
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a2)
    v6 = *(_BYTE *)(a2 + 8) == 0;
  else
    v6 = 1;
  if (v6 || ((v8 = *(_DWORD *)(a1 + 44), v8 == 2) ? (v9 = *(_DWORD *)(a2 + 12) <= 1) : (v9 = 0), v9))
  {
    v11 = 3;
LABEL_18:
    *(_DWORD *)v55 = v11;
    v12 = v11;
    v13 = *(_DWORD *)(a1 + 40);
LABEL_19:
    *(_DWORD *)a3 = v13;
    *(_DWORD *)(a3 + 4) = v12;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    result.n128_u64[0] = 0;
    *(_QWORD *)(a3 + 20) = 0;
    *(_DWORD *)(a3 + 28) = 57600;
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 36) = 0;
    *(_BYTE *)(a3 + 40) = 0;
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 56) = 0;
    *(_BYTE *)(a3 + 64) = 0;
    *(_BYTE *)(a3 + 72) = 0;
    *(_BYTE *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    return result;
  }
  if (!*(_BYTE *)(a1 + 56) || (v8 == 1 ? (v10 = *(_BYTE *)(a1 + 48) == 0) : (v10 = 1), v10))
  {
    switch(v8)
    {
      case 0:
        v11 = 4;
        goto LABEL_18;
      case 1:
        goto LABEL_26;
      case 2:
        webrtc::VideoStreamAdapter::IncreaseFramerate((uint64_t)v55, a1, a2, a1 + 208);
        v24 = v57;
        v12 = *(_DWORD *)v55;
        if (!v57)
          goto LABEL_48;
        goto LABEL_58;
      case 3:
        webrtc::VideoStreamAdapter::IncreaseFramerate((uint64_t)v55, a1, a2, a1 + 208);
        if (v57)
          goto LABEL_26;
        goto LABEL_47;
      default:
        rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)a1);
    }
  }
  v15 = *(_QWORD *)(a2 + 4);
  if ((v15 & 0xFF00000000) == 0)
    goto LABEL_61;
  if (*(_DWORD *)(a1 + 52) >= (int)v15)
  {
    v11 = 2;
    goto LABEL_18;
  }
LABEL_26:
  v25 = *(_QWORD *)(a2 + 4);
  if ((v25 & 0xFF00000000) == 0)
  {
LABEL_61:
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_62;
  }
  v26 = *(_DWORD *)(a1 + 256);
  if (v26 == 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/video_stream_adapter.cc");
  }
  else if ((_DWORD)v25 != 0x7FFFFFFF)
  {
    if (*(_BYTE *)(a1 + 216))
    {
      v34 = 5 * (int)v25 / 3;
      v35 = 12 * v34 / 5;
      if (v35 > *(_DWORD *)(a1 + 208))
        goto LABEL_36;
    }
LABEL_56:
    v11 = 1;
    goto LABEL_18;
  }
  if (!*(_BYTE *)(a1 + 216) || *(_DWORD *)(a1 + 208) == 0x7FFFFFFFLL)
    goto LABEL_56;
  v26 = *(_DWORD *)(a1 + 256);
  v34 = 0x7FFFFFFF;
  v35 = 0x7FFFFFFF;
LABEL_36:
  LODWORD(__p) = *(_DWORD *)(a1 + 217);
  *(_DWORD *)((char *)&__p + 3) = *(_DWORD *)(a1 + 220);
  *(_OWORD *)v58 = *(_OWORD *)(a1 + 233);
  *(_QWORD *)&v58[15] = *(_QWORD *)(a1 + 248);
  v36 = *(_DWORD *)(a1 + 260);
  v16 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
  if ((v16 & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/video_stream_adapter.cc");
  LODWORD(v37) = v35 & 0xFFFFFF00;
  if (v35 == 0x7FFFFFFF)
    LODWORD(v37) = 0;
  v37 = (int)v37;
  if (v35 == 0x7FFFFFFF)
    v38 = 0;
  else
    v38 = v35;
  *(_QWORD *)v55 = v37 | v38;
  v55[8] = v35 != 0x7FFFFFFF;
  *(_DWORD *)&v55[9] = (_DWORD)__p;
  v39 = v34 & 0xFFFFFF00;
  if (v35 == 0x7FFFFFFF)
  {
    v39 = 0;
    v40 = 0;
  }
  else
  {
    v40 = v34;
  }
  *(_DWORD *)&v55[12] = *(_DWORD *)((char *)&__p + 3);
  *(_QWORD *)&v55[16] = v39 | v40;
  v55[24] = v35 != 0x7FFFFFFF;
  *(_OWORD *)&v55[25] = *(_OWORD *)v58;
  *(_QWORD *)&v55[40] = *(_QWORD *)&v58[15];
  LODWORD(v56) = v26 - 1;
  HIDWORD(v56) = v36;
LABEL_47:
  v12 = *(_DWORD *)v55;
LABEL_48:
  *(_OWORD *)v58 = *(_OWORD *)v55;
  *(_OWORD *)&v58[16] = *(_OWORD *)&v55[16];
  result.n128_u64[1] = *(_QWORD *)&v55[40];
  v59 = *(_OWORD *)&v55[32];
  v60 = v56;
  v41 = *(_QWORD **)(a1 + 184);
  v42 = *(_QWORD **)(a1 + 192);
  if (v41 == v42)
  {
    v24 = 0;
  }
  else
  {
    v24 = 0;
    do
    {
      v43 = *v41;
      v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)*v41 + 24))(*v41, a2, a1 + 208, v58);
      if ((v16 & 1) == 0)
      {
        v16 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
        if ((v16 & 1) == 0)
        {
          v3 = v3 & 0xFFFFFFFF00000000 | 0xA91;
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v43 + 16))(&__p, v43);
          rtc::webrtc_logging_impl::Log("\r\t\n\t", v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/video_stream_adapter.cc");
          if (v54 < 0)
            operator delete(__p);
        }
        v12 = 5;
        v24 = 1;
      }
      ++v41;
    }
    while (v41 != v42);
  }
LABEL_58:
  v13 = *(_DWORD *)(a1 + 40);
  if (v24 == 1)
    goto LABEL_19;
  if (v24)
LABEL_62:
    absl::variant_internal::ThrowBadVariantAccess((absl::variant_internal *)v16, v17, v18, v19, v20, v21, v22, v23);
  *(_OWORD *)(a3 + 44) = *(_OWORD *)&v55[4];
  *(_OWORD *)(a3 + 60) = *(_OWORD *)&v55[20];
  *(_OWORD *)(a3 + 72) = *(_OWORD *)&v55[32];
  result = *(__n128 *)a2;
  v51 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)a2;
  v52 = v56;
  *(_DWORD *)(a3 + 40) = v12;
  *(_OWORD *)(a3 + 24) = v51;
  *(_DWORD *)a3 = v13;
  *(_DWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 88) = v52;
  return result;
}

void webrtc::VideoStreamAdapter::IncreaseFramerate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  webrtc::VideoStreamAdapter *v34;

  if (*(_DWORD *)(a2 + 44) == 3)
  {
    v26 = *(_QWORD *)(a3 + 4);
    if ((v26 & 0xFF00000000) == 0)
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      webrtc::VideoStreamAdapter::GetAdaptationDown(v34);
      return;
    }
    if ((*(_QWORD *)(a3 + 24) & 0xFF00000000) != 0)
      LODWORD(v26) = *(_QWORD *)(a3 + 24);
    v7 = webrtc::BalancedDegradationSettings::MaxFps(a2 + 16, *(_DWORD *)(a3 + 16), v26);
    if (v7 == 0x7FFFFFFF)
    {
      if (*(int *)(a4 + 52) < 2)
      {
        v7 = 0x7FFFFFFF;
        if (!*(_BYTE *)(a4 + 40))
          goto LABEL_28;
LABEL_25:
        if (v7 > (int)*(double *)(a4 + 32))
          goto LABEL_5;
LABEL_28:
        *(_DWORD *)a1 = 1;
        *(_QWORD *)(a1 + 56) = 1;
        return;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/video_stream_adapter.cc");
      v7 = *(_DWORD *)(a4 + 52) ^ 0x7FFFFFFF;
    }
    if (!*(_BYTE *)(a4 + 40))
      goto LABEL_28;
    goto LABEL_25;
  }
  v6 = *(_DWORD *)(a3 + 12);
  if (v6 == 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = 3 * v6 / 2;
LABEL_5:
  if (*(_DWORD *)(a4 + 52) == 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/video_stream_adapter.cc");
    v7 = 0x7FFFFFFF;
  }
  if (!*(_BYTE *)(a4 + 40) || v7 <= (int)*(double *)(a4 + 32))
    goto LABEL_28;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/video_stream_adapter.cc");
  v22 = (double)v7;
  if (v7 == 0x7FFFFFFF)
    v22 = 0.0;
  *(double *)(a1 + 32) = v22;
  *(_BYTE *)(a1 + 40) = v7 != 0x7FFFFFFF;
  v23 = *(_DWORD *)(a4 + 48);
  v24 = *(_DWORD *)(a4 + 52) - 1;
  v25 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 16) = v25;
  *(_QWORD *)(a1 + 41) = *(_QWORD *)(a4 + 41);
  *(_DWORD *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 52) = v24;
  *(_QWORD *)(a1 + 56) = 0;
}

double webrtc::VideoStreamAdapter::GetAdaptationDown@<D0>(webrtc::VideoStreamAdapter *this@<X0>, uint64_t a2@<X8>)
{
  absl::variant_internal *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  double result;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[48];
  __int128 v29;
  __int128 v30;
  __int128 v31;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)this + 16))(&v30);
  ++*((_DWORD *)this + 10);
  webrtc::VideoStreamAdapter::GetAdaptationDownStep((rtc::webrtc_checks_impl *)v28, (uint64_t)this, (uint64_t)&v30, (__int128 *)this + 13);
  v12 = DWORD2(v31);
  if ((*((_QWORD *)&v31 + 1) & 0xFF00000000) != 0
    || (v12 = DWORD1(v30), (*(_QWORD *)((_BYTE *)&v30 + 4) & 0xFF00000000) != 0))
  {
    if (3 * v12 / 5 < SDWORD1(v31))
      v4 = (absl::variant_internal *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
  }
  v13 = *((_QWORD *)&v29 + 1);
  if (*((_DWORD *)this + 11) == 3 && *((_QWORD *)&v29 + 1) == 0)
  {
    if ((*(_QWORD *)((_BYTE *)&v30 + 4) & 0xFF00000000) != 0)
    {
      v15 = DWORD2(v31);
      if ((*((_QWORD *)&v31 + 1) & 0xFF00000000) == 0)
        v15 = DWORD1(v30);
      v16 = (_DWORD *)*((_QWORD *)this + 2);
      v17 = (_DWORD *)*((_QWORD *)this + 3);
      if (v16 == v17)
        goto LABEL_23;
      while (*v16 < v15)
      {
        v16 += 30;
        if (v16 == v17)
          goto LABEL_23;
      }
      v18 = v16[4];
      if (v18 <= -100 || *((_DWORD *)this + 65) >= SDWORD1(v29) || SHIDWORD(v30) < 1)
        goto LABEL_23;
      if (v28[40])
      {
        if (v18 > (int)((double)SHIDWORD(v30) - *(double *)&v28[32]))
        {
          webrtc::VideoStreamAdapter::GetAdaptationDownStep((rtc::webrtc_checks_impl *)&v24, (uint64_t)this, (uint64_t)&v30, (__int128 *)v28);
LABEL_24:
          *(_OWORD *)v28 = v24;
          *(_OWORD *)&v28[16] = v25;
          *(_OWORD *)&v28[32] = v26;
          v29 = v27;
          v13 = *((_QWORD *)&v27 + 1);
          goto LABEL_25;
        }
LABEL_23:
        v24 = *(_OWORD *)v28;
        v25 = *(_OWORD *)&v28[16];
        v26 = *(_OWORD *)&v28[32];
        v27 = (unint64_t)v29;
        goto LABEL_24;
      }
    }
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_30;
  }
LABEL_25:
  v19 = *(_DWORD *)v28;
  v20 = *((_DWORD *)this + 10);
  if (v13 != 1)
  {
    if (!v13)
    {
      *(_OWORD *)(a2 + 44) = *(_OWORD *)&v28[4];
      *(_OWORD *)(a2 + 60) = *(_OWORD *)&v28[20];
      *(_OWORD *)(a2 + 72) = *(_OWORD *)&v28[32];
      result = *(double *)&v30;
      v22 = v31;
      *(_OWORD *)(a2 + 8) = v30;
      v23 = v29;
      *(_DWORD *)(a2 + 40) = v19;
      *(_OWORD *)(a2 + 24) = v22;
      *(_DWORD *)a2 = v20;
      *(_DWORD *)(a2 + 4) = 0;
      *(_QWORD *)(a2 + 88) = v23;
      return result;
    }
LABEL_30:
    absl::variant_internal::ThrowBadVariantAccess(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)a2 = v20;
  *(_DWORD *)(a2 + 4) = v19;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  result = 0.0;
  *(_QWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 28) = 57600;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

void webrtc::VideoStreamAdapter::GetAdaptationDownStep(rtc::webrtc_checks_impl *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  BOOL v5;
  int v7;
  BOOL v8;
  BOOL v10;
  int v11;
  uint64_t v12;

  if (*(_BYTE *)a3)
    v5 = *(_BYTE *)(a3 + 8) == 0;
  else
    v5 = 1;
  if (v5 || ((v7 = *(_DWORD *)(a2 + 44), v7 == 2) ? (v8 = *(_DWORD *)(a3 + 12) <= 1) : (v8 = 0), v8))
  {
    v11 = 3;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 56) || (v7 == 1 ? (v10 = *(_BYTE *)(a2 + 48) == 0) : (v10 = 0), !v10))
    {
      switch(v7)
      {
        case 0:
          v11 = 4;
          goto LABEL_17;
        case 1:
          goto LABEL_24;
        case 2:
          webrtc::VideoStreamAdapter::DecreaseFramerate((uint64_t)a1, a2, a3, a4);
          return;
        case 3:
          webrtc::VideoStreamAdapter::DecreaseFramerate((uint64_t)a1, a2, a3, a4);
          if (*((_QWORD *)a1 + 7))
            goto LABEL_24;
          return;
        default:
          goto LABEL_26;
      }
    }
    v12 = *(_QWORD *)(a3 + 4);
    if ((v12 & 0xFF00000000) == 0)
    {
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_26:
      rtc::webrtc_checks_impl::UnreachableCodeReached(a1);
    }
    if (*(_DWORD *)(a2 + 52) > (int)v12)
    {
LABEL_24:
      webrtc::VideoStreamAdapter::DecreaseResolution((uint64_t)a1, a3, (uint64_t)a4);
      return;
    }
    v11 = 2;
  }
LABEL_17:
  *(_DWORD *)a1 = v11;
  *((_QWORD *)a1 + 7) = 1;
}

void webrtc::VideoStreamAdapter::DecreaseFramerate(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[11];

  if (*(_DWORD *)(a2 + 44) == 3)
  {
    v7 = *(_QWORD *)(a3 + 4);
    if ((v7 & 0xFF00000000) == 0)
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      webrtc::VideoStreamAdapter::DecreaseResolution();
      return;
    }
    if ((*(_QWORD *)(a3 + 24) & 0xFF00000000) != 0)
      LODWORD(v7) = *(_QWORD *)(a3 + 24);
    v6 = webrtc::BalancedDegradationSettings::MinFps(a2 + 16, *(_DWORD *)(a3 + 16), v7);
  }
  else
  {
    v6 = 2 * *(_DWORD *)(a3 + 12) / 3;
  }
  if (v6 <= 2)
    v8 = 2;
  else
    v8 = v6;
  if (*((_BYTE *)a4 + 40))
    v9 = (int)*((double *)a4 + 4);
  else
    v9 = 0x7FFFFFFF;
  if (v8 >= v9)
  {
    *(_DWORD *)a1 = 1;
    *(_QWORD *)(a1 + 56) = 1;
  }
  else
  {
    v19 = *a4;
    v20 = a4[1];
    *(_QWORD *)v21 = *(_QWORD *)((char *)a4 + 41);
    v10 = *((_DWORD *)a4 + 12);
    v11 = *((_DWORD *)a4 + 13);
    *(_DWORD *)&v21[7] = v10;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/video_stream_adapter.cc");
    *(_OWORD *)a1 = v19;
    *(_OWORD *)(a1 + 16) = v20;
    *(double *)(a1 + 32) = (double)v8;
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 41) = *(_QWORD *)v21;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)&v21[7];
    *(_DWORD *)(a1 + 52) = v11 + 1;
    *(_QWORD *)(a1 + 56) = 0;
  }
}

void webrtc::VideoStreamAdapter::DecreaseResolution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  webrtc::VideoStreamAdapter *v16;
  _BYTE v17[7];
  _BYTE v18[23];

  v3 = *(_QWORD *)(a2 + 4);
  if ((v3 & 0xFF00000000) != 0)
  {
    v5 = 3 * (int)v3 / 5;
    if (*(_BYTE *)(a3 + 8))
      v6 = v5 < *(_DWORD *)a3;
    else
      v6 = 1;
    if (!v6)
      goto LABEL_10;
    if ((*(_QWORD *)(a2 + 24) & 0xFF00000000) != 0)
      LODWORD(v3) = *(_QWORD *)(a2 + 24);
    if (*(_DWORD *)(a2 + 20) <= 3 * (int)v3 / 5)
    {
      *(_DWORD *)v17 = *(_DWORD *)(a3 + 9);
      *(_DWORD *)&v17[3] = *(_DWORD *)(a3 + 12);
      *(_OWORD *)v18 = *(_OWORD *)(a3 + 25);
      *(_QWORD *)&v18[15] = *(_QWORD *)(a3 + 40);
      v8 = *(_DWORD *)(a3 + 48);
      v7 = *(_DWORD *)(a3 + 52);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/video_stream_adapter.cc");
      *(_QWORD *)a1 = (int)(v5 & 0xFFFFFF00) | (unint64_t)v5;
      *(_BYTE *)(a1 + 8) = 1;
      *(_DWORD *)(a1 + 9) = *(_DWORD *)v17;
      *(_DWORD *)(a1 + 12) = *(_DWORD *)&v17[3];
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)v18;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)&v18[15];
      *(_DWORD *)(a1 + 48) = v8 + 1;
      *(_DWORD *)(a1 + 52) = v7;
      *(_QWORD *)(a1 + 56) = 0;
    }
    else
    {
LABEL_10:
      *(_DWORD *)a1 = 1;
      *(_QWORD *)(a1 + 56) = 1;
    }
  }
  else
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    webrtc::VideoStreamAdapter::GetAdaptDownResolution(v16);
  }
}

void webrtc::VideoStreamAdapter::GetAdaptDownResolution(webrtc::VideoStreamAdapter *this@<X0>, uint64_t a2@<X8>, uint64_t *a3, uint64_t a4)
{
  rtc::webrtc_checks_impl *v6;
  int v7;
  int v8;
  absl::variant_internal *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  __int128 v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  webrtc::VideoStreamAdapter *v38;
  const webrtc::VideoCodec *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[7];
  __int128 v47;
  __int128 v48;
  _DWORD v49[2];
  _OWORD v50[2];
  _DWORD v51[2];
  char v52;
  _BYTE v53[7];
  _BYTE v54[32];
  unint64_t v55;
  uint64_t v56;
  _OWORD v57[2];
  _BYTE v58[23];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v6 = (rtc::webrtc_checks_impl *)(*(_QWORD *(**)(__int128 *__return_ptr))(**(_QWORD **)this + 16))(&v47);
  switch(*((_DWORD *)this + 11))
  {
    case 0:
      v7 = *((_DWORD *)this + 10);
      v8 = 4;
      goto LABEL_5;
    case 1:
      webrtc::VideoStreamAdapter::GetAdaptationDown(this, a2);
      return;
    case 2:
      v7 = *((_DWORD *)this + 10);
      v8 = 1;
LABEL_5:
      *(_DWORD *)a2 = v7;
      *(_DWORD *)(a2 + 4) = v8;
      goto LABEL_9;
    case 3:
      webrtc::VideoStreamAdapter::GetAdaptationDownStep((rtc::webrtc_checks_impl *)v51, (uint64_t)this, (uint64_t)&v47, (__int128 *)this + 13);
      if (!v56)
      {
        v18 = v51[0];
        v50[0] = *(_OWORD *)v54;
        v50[1] = *(_OWORD *)&v54[16];
        v19 = v55;
        if ((int)v55 > *((_DWORD *)this + 64))
          goto LABEL_19;
        v20 = DWORD1(v47);
        if ((*(_QWORD *)((_BYTE *)&v47 + 4) & 0xFF00000000) == 0)
        {
          std::__throw_bad_optional_access[abi:sn180100]();
          webrtc::VideoStreamAdapter::GetSingleActiveLayerPixels(v38, v39, v40, v41, v42, v43, v44, v45, a3, a4);
          return;
        }
        if ((v21 = HIDWORD(v55), v52) && 3 * DWORD1(v47) / 5 >= v51[0]
          || ((*((_QWORD *)&v48 + 1) & 0xFF00000000) != 0 ? (v22 = DWORD2(v48)) : (v22 = DWORD1(v47)),
              SDWORD1(v48) > 3 * v22 / 5))
        {
LABEL_19:
          v23 = v51[1];
          v24 = v52;
          *(_DWORD *)v46 = *(_DWORD *)v53;
          *(_DWORD *)&v46[3] = *(_DWORD *)&v53[3];
          v25 = *(_QWORD *)v54;
          v26 = v54[8];
          v57[0] = *(_OWORD *)&v54[9];
          v27 = v55;
          *(_QWORD *)((char *)v57 + 15) = *(_QWORD *)&v54[24];
        }
        else
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/video_stream_adapter.cc");
          v25 = 0;
          v26 = 0;
          v49[0] = *(_DWORD *)v53;
          *(_DWORD *)((char *)v49 + 3) = *(_DWORD *)&v53[3];
          *(_OWORD *)v58 = *(_OWORD *)((unint64_t)v50 | 9);
          *(_QWORD *)&v58[15] = *(_QWORD *)(((unint64_t)v50 | 9) + 0xF);
          v27 = (v19 + 1) | (unint64_t)(v21 << 32);
          if (v20 >= -1)
            v23 = 0;
          else
            v23 = -1;
          *(_DWORD *)v46 = v49[0];
          *(_DWORD *)&v46[3] = *(_DWORD *)((char *)v49 + 3);
          *(_QWORD *)((char *)v57 + 15) = *(_QWORD *)&v58[15];
          v57[0] = *(_OWORD *)v58;
          v24 = 1;
          v18 = 3 * v20 / 5;
        }
        *(_OWORD *)(a2 + 65) = v57[0];
        v28 = v47;
        *(_OWORD *)(a2 + 24) = v48;
        v29 = *((_DWORD *)this + 10);
        *(_DWORD *)(a2 + 40) = v18;
        *(_DWORD *)(a2 + 44) = v23;
        *(_BYTE *)(a2 + 48) = v24;
        *(_DWORD *)(a2 + 49) = *(_DWORD *)v46;
        *(_DWORD *)(a2 + 52) = *(_DWORD *)&v46[3];
        *(_QWORD *)(a2 + 56) = v25;
        *(_BYTE *)(a2 + 64) = v26;
        v30 = *(_QWORD *)((char *)v57 + 15);
        *(_OWORD *)(a2 + 8) = v28;
        *(_QWORD *)a2 = v29;
        *(_QWORD *)(a2 + 80) = v30;
        *(_QWORD *)(a2 + 88) = v27;
        return;
      }
      if (v56 != 1)
        absl::variant_internal::ThrowBadVariantAccess(v9, v10, v11, v12, v13, v14, v15, v16);
      v17 = v51[0];
      *(_DWORD *)a2 = *((_DWORD *)this + 10);
      *(_DWORD *)(a2 + 4) = v17;
LABEL_9:
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 12) = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 20) = 0;
      *(_DWORD *)(a2 + 28) = 57600;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 36) = 0;
      *(_BYTE *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 56) = 0;
      *(_BYTE *)(a2 + 64) = 0;
      *(_BYTE *)(a2 + 72) = 0;
      *(_BYTE *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      return;
    default:
      rtc::webrtc_checks_impl::UnreachableCodeReached(v6);
  }
}

int64x2_t *webrtc::VideoStreamAdapter::GetSingleActiveLayerPixels(webrtc::VideoStreamAdapter *this, const webrtc::VideoCodec *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  std::string *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (*(_DWORD *)this == 3)
  {
    if (*((unsigned __int16 *)this + 186) >= 0x100u)
    {
      v18 = *((_WORD *)this + 186);
      if (v18 > 0x21)
      {
        v26 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/svc/scalability_mode_util.cc", 309, "index < kNumScalabilityModes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v18);
        return webrtc::VideoStreamBufferController::VideoStreamBufferController((int64x2_t *)v26, v27, v28, v29, v30, v31, v32, v33, a9, a10);
      }
                                                                         + 24];
      if ((int)v19 >= 1)
      {
        v12 = 0;
        LOBYTE(v13) = 0;
        v14 = 0;
        v20 = (char *)this + 144;
        do
        {
          if (v20[32])
          {
            ++v12;
            LODWORD(v13) = *((_DWORD *)v20 + 1) * *(_DWORD *)v20;
            v10 = v13 >> 8;
            v14 = 1;
          }
          v20 += 36;
          --v19;
        }
        while (v19);
        goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_9:
    v16 = *((unsigned __int8 *)this + 32);
    if (*((_BYTE *)this + 32))
    {
      v12 = 0;
      LOBYTE(v13) = 0;
      v14 = 0;
      v17 = (char *)this + 36;
      do
      {
        if (v17[32])
        {
          ++v12;
          LODWORD(v13) = *((_DWORD *)v17 + 1) * *(_DWORD *)v17;
          v10 = v13 >> 8;
          v14 = 1;
        }
        v17 += 36;
        --v16;
      }
      while (v16);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (*(_DWORD *)this != 2)
    goto LABEL_9;
  v11 = *((unsigned __int8 *)this + 366);
  if (*((_BYTE *)this + 366))
  {
    v12 = 0;
    LOBYTE(v13) = 0;
    v14 = 0;
    v15 = (char *)this + 144;
    do
    {
      if (v15[32])
      {
        ++v12;
        LODWORD(v13) = *((_DWORD *)v15 + 1) * *(_DWORD *)v15;
        v10 = v13 >> 8;
        v14 = 1;
      }
      v15 += 36;
      --v11;
    }
    while (v11);
    goto LABEL_21;
  }
LABEL_20:
  v14 = 0;
  LOBYTE(v13) = 0;
  v12 = 0;
LABEL_21:
  v13 = v13;
  v21 = (unint64_t)v14 << 32;
  v22 = v12 <= 1;
  if (v12 <= 1)
    v23 = v21;
  else
    v23 = 0;
  v24 = v23 & 0xFFFFFFFF000000FFLL | ((*(_QWORD *)&v10 & 0xFFFFFFLL) << 8);
  if (!v22)
    v13 = 0;
  return (int64x2_t *)(v24 | v13);
}

int64x2_t *webrtc::VideoStreamBufferController::VideoStreamBufferController(int64x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char *p_p;
  void *__p;
  uint64_t v25;
  unsigned __int8 v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x24BDAC8D0];
  a1->i64[0] = (uint64_t)&off_24C0C4A10;
  a1->i64[1] = a10;
  a1[1].i64[0] = a2;
  a1[1].i64[1] = a5;
  a1[2].i64[0] = a6;
  a1[2].i64[1] = a4;
  v14 = *a9;
  *a9 = 0;
  a1[3].i64[0] = v14;
  webrtc::JitterEstimator::JitterEstimator((uint64_t)&a1[3].i64[1], a1[1].i64[0], a10);
  a1[50].i8[0] = 0;
  a1[50].i8[8] = 0;
  a1[52].i8[4] = 0;
  a1[51].i64[1] = 0;
  a1[51].i64[0] = 0;
  a1[52].i8[0] = 0;
  a1[52].i8[8] = 0;
  v15 = operator new();
  a1[53].i64[0] = webrtc::FrameBuffer::FrameBuffer(v15, 800, 0x2000, a10);
  v16 = a1[1].i64[0];
  v17 = a1[2].i64[1];
  a1[53].i64[1] = v16;
  a1[54].i64[0] = v17;
  v18 = operator new(0x20uLL);
  *v18 = &off_24C0C4A30;
  v18[1] = webrtc::VideoStreamBufferController::OnTimeout;
  v18[2] = 0;
  v18[3] = a1;
  a1[54].i64[1] = v16;
  a1[55].i64[0] = a3;
  a1[55].i64[1] = a7;
  a1[56].i64[0] = a8;
  a1[58].i64[0] = (uint64_t)v18;
  a1[58].i64[1] = 0;
  a1[59] = vdupq_n_s64(0x8000000000000000);
  a1[60].i64[1] = 0;
  a1[61].i8[0] = 0;
  a1[61].i64[1] = (uint64_t)off_24C0B4170;
  a1[62].i64[0] = 0;
  a1[63].i64[0] = 0;
  a1[62].i64[1] = 0;
  a1[64].i8[15] = 21;
  if (&a1[63].u64[1] <= (unint64_t *)"max_decode_queue_size"
    && (char *)&a1[64].u64[1] + 5 > "max_decode_queue_size")
  {
    goto LABEL_13;
  }
  strcpy(&a1[63].i8[8], "max_decode_queue_size");
  a1[65].i8[0] = 0;
  a1[61].i64[1] = (uint64_t)&unk_24C0B4050;
  a1[65].i32[1] = 8;
  v19 = operator new();
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  a1[65].i64[1] = v19;
  do
    v20 = __ldxr((unsigned int *)v19);
  while (__stxr(v20 + 1, (unsigned int *)v19));
  v27[0] = (char *)a1 + 984;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a10 + 16))(&__p, a10, "WebRTC-ZeroPlayoutDelay", 23);
  if (((char)v26 & 0x80000000) == 0)
  {
    v21 = v26;
    p_p = (char *)&__p;
    goto LABEL_10;
  }
  v21 = v25;
  if (v25 < 0 || (p_p = (char *)__p, v25) && !__p)
LABEL_13:
    __break(1u);
LABEL_10:
  webrtc::ParseFieldTrial(v27, 1, p_p, v21);
  if ((char)v26 < 0)
    operator delete(__p);
  return a1;
}

uint64_t webrtc::VideoStreamBufferController::OnTimeout(webrtc::VideoStreamBufferController *this, TimeDelta a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  result = *((_QWORD *)this + 117);
  if (result)
  {
    *(_BYTE *)(result + 4) = 0;
    do
    {
      v5 = __ldaxr((unsigned int *)result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)result));
    if (!v6)
      result = MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 117) = 0;
  }
  if (*((_BYTE *)this + 976))
  {
    *((_BYTE *)this + 976) = 0;
    return (*(uint64_t (**)(_QWORD, int64_t))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), a2.var0);
  }
  return result;
}

_QWORD *webrtc::VideoStreamBufferController::InsertFrame(uint64_t a1, unsigned int **a2)
{
  unsigned int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int inserted;
  uint64_t v16;
  char v17;
  _QWORD *result;
  _QWORD *p_p;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  void *__p;
  unint64_t v26;
  unsigned __int8 v27;

  v4 = *a2;
  v5 = *((unsigned __int8 *)*a2 + 376);
  v6 = *((_QWORD *)*a2 + 41);
  v23 = *((_QWORD *)*a2 + 19);
  v7 = *((unsigned __int8 *)*a2 + 40);
  v8 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)*a2 + 32))(*a2);
  v9 = v4[40];
  v10 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
  if (v10 < 0)
    v11 = 0;
  else
    v11 = 1000 * (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
  v12 = *(_QWORD *)(a1 + 848);
  v13 = *(_DWORD *)(v12 + 176);
  v14 = (uint64_t)*a2;
  *a2 = 0;
  v24 = v14;
  inserted = webrtc::FrameBuffer::InsertFrame(v12, &v24);
  v16 = v24;
  v24 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!inserted)
    return *(_QWORD **)(*(_QWORD *)(a1 + 848) + 80);
  if (v10 < 0)
    v17 = 1;
  else
    v17 = v8;
  if ((v17 & 1) != 0)
  {
LABEL_26:
    if (v13 < *(_DWORD *)(*(_QWORD *)(a1 + 848) + 176))
    {
      (*(void (**)(_QWORD, BOOL, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v6 == 0, v23, v7);
      webrtc::VideoStreamBufferController::MaybeScheduleFrameForRelease((webrtc::VideoStreamBufferController *)a1);
    }
    return *(_QWORD **)(*(_QWORD *)(a1 + 848) + 80);
  }
  result = (*(_QWORD *(**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(&__p, *(_QWORD *)(a1 + 8), "WebRTC-IncomingTimestampOnMarkerBitOnly", 39);
  if (((char)v27 & 0x80000000) == 0)
  {
    p_p = &__p;
    v20 = v27;
    goto LABEL_16;
  }
  v20 = v26;
  if ((v26 & 0x8000000000000000) == 0)
  {
    p_p = __p;
    if (!v26 || __p)
    {
LABEL_16:
      if (v20 >= 8)
      {
        v21 = *p_p != 0x64656C6261736944;
        if ((v27 & 0x80) != 0)
LABEL_20:
          operator delete(__p);
      }
      else
      {
        v21 = 1;
        if ((v27 & 0x80) != 0)
          goto LABEL_20;
      }
      if (v5)
        v22 = 0;
      else
        v22 = v21;
      if (!v22)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v9, v11);
      goto LABEL_26;
    }
  }
  __break(1u);
  return result;
}

void webrtc::VideoStreamBufferController::MaybeScheduleFrameForRelease(webrtc::VideoStreamBufferController *this)
{
  uint64_t v1;
  BOOL v2;
  int v4;
  webrtc::FrameBuffer *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t *v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD v55[2];
  __n128 (*v56)(char, void **, _OWORD *);
  uint64_t (*v57)(uint64_t (***)(_QWORD *, uint64_t, _QWORD), uint64_t, _QWORD *);
  unint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  unint64_t v61;
  _QWORD v62[2];
  _QWORD v63[3];

  v63[2] = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 106);
  if (*((_BYTE *)this + 976))
    v2 = *(_BYTE *)(v1 + 72) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    if (*((_BYTE *)this + 840))
    {
      while (1)
      {
        v5 = (webrtc::FrameBuffer *)*((_QWORD *)this + 106);
        if (!*((_BYTE *)v5 + 72))
          return;
        webrtc::FrameBuffer::ExtractNextDecodableTemporalUnit(v5, &v61);
        if (v61 >= 2)
          break;
        v4 = 2;
        if (v61)
          goto LABEL_10;
LABEL_11:
        if (v4 == 1)
          return;
      }
      v6 = v62[0];
      if ((v61 & 1) != 0)
      {
        v6 = *(_QWORD *)v62[0];
        if (!*(_QWORD *)(*(_QWORD *)v62[0] + 328))
        {
LABEL_16:
          v7 = *((_QWORD *)this + 5);
          v8 = *(unsigned int *)(v6 + 160);
          v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
          v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, v8, v9);
          v16 = v61;
          if ((v61 & 1) != 0)
          {
            v59[0] = v62[0];
            v59[1] = v62[1];
            v58 = v61 | 1;
            v61 = 0;
            webrtc::VideoStreamBufferController::OnFrameReady((uint64_t)this, &v58, v10, v11, v12, v13, v14, v15);
            if (!v58)
            {
LABEL_31:
              v4 = 1;
              if (!v61)
                goto LABEL_11;
              goto LABEL_10;
            }
LABEL_30:
            absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::DestroyContents(&v58);
            goto LABEL_31;
          }
          if (v61 >= 2)
          {
            v17 = v61 >> 1;
            if (v61 < 8)
            {
              v18 = 0;
              v19 = v62;
LABEL_27:
              v25 = v17 - v18;
              v26 = &v59[v18];
              do
              {
                v27 = *v19;
                *v19++ = 0;
                *v26++ = v27;
                --v25;
              }
              while (v25);
              goto LABEL_29;
            }
            v18 = v17 & 0x7FFFFFFFFFFFFFFCLL;
            v19 = &v62[v17 & 0x7FFFFFFFFFFFFFFCLL];
            v20 = v17 & 0x7FFFFFFFFFFFFFFCLL;
            v21 = (__int128 *)v63;
            v22 = &v60;
            do
            {
              v23 = *(v21 - 1);
              v24 = *v21;
              *(v21 - 1) = 0uLL;
              *v21 = 0uLL;
              *((_OWORD *)v22 - 1) = v23;
              *(_OWORD *)v22 = v24;
              v22 += 4;
              v21 += 2;
              v20 -= 4;
            }
            while (v20);
            if (v17 != v18)
              goto LABEL_27;
          }
LABEL_29:
          v58 = v16 & 0xFFFFFFFFFFFFFFFELL;
          webrtc::VideoStreamBufferController::OnFrameReady((uint64_t)this, &v58, v10, v11, v12, v13, v14, v15);
          if (!v58)
            goto LABEL_31;
          goto LABEL_30;
        }
      }
      else if (!*(_QWORD *)(v62[0] + 328))
      {
        goto LABEL_16;
      }
      v4 = 0;
LABEL_10:
      absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::DestroyContents(&v61);
      goto LABEL_11;
    }
    v28 = *(_QWORD *)(v1 + 64);
    v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
    if ((v29 & 0xFF00000000) == 0 || (_DWORD)v29 != (_DWORD)v28)
    {
      v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 109) + 16))(*((_QWORD *)this + 109));
      v32 = *((_QWORD *)this + 119);
      v33 = 0x7FFFFFFFFFFFFFFFLL;
      if (v32 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v35 = v32 == 0x8000000000000000 || v31 == 0x7FFFFFFFFFFFFFFFLL;
        v36 = v32 < v31;
        v37 = v32 - v31;
        v38 = v36;
        if (((v35 | v38) & 1) != 0)
          v37 = 0;
        v39 = v37 - 1000;
        if (v37 < 0x3E8)
          v39 = 0;
        if (v37 != 0x7FFFFFFFFFFFFFFFLL)
          v37 = v39;
        if (v31 != 0x8000000000000000)
          v33 = v37;
      }
      v40 = *((_QWORD *)this + 106);
      while (1)
      {
        v41 = *(_QWORD *)(v40 + 32) > (unint64_t)*((unsigned int *)this + 261);
        v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 107) + 16))(*((_QWORD *)this + 107));
        v43 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 108) + 24))(*((_QWORD *)this + 108), v28, v42);
        v44 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _BOOL8))(**((_QWORD **)this + 108) + 32))(*((_QWORD *)this + 108), v43, v42, v41);
        v45 = v44;
        if ((_DWORD)v28 == HIDWORD(v28) || v44 >= -4999)
          break;
        webrtc::FrameBuffer::DropNextDecodableTemporalUnit(*((webrtc::FrameBuffer **)this + 106));
        v40 = *((_QWORD *)this + 106);
        v28 = *(_QWORD *)(v40 + 64);
        if (!*(_BYTE *)(v40 + 72))
          return;
      }
      v46 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
      if ((v46 & 0xFF00000000) == 0 || (_DWORD)v46 != (_DWORD)v28)
      {
        if (v45 >= v33)
          v48 = v33;
        else
          v48 = v45;
        v49 = v48 & ~(v48 >> 63);
        v50 = v49 + v42;
        if (v42 == 0x8000000000000000)
          v50 = 0x8000000000000000;
        if (v49 == 0x7FFFFFFFFFFFFFFFLL || v42 == 0x7FFFFFFFFFFFFFFFLL)
          v52 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
        v53 = *((_QWORD *)this + 6);
        v54 = operator new(0x18uLL);
        *v54 = webrtc::VideoStreamBufferController::FrameReadyForDecode;
        v54[1] = 0;
        v54[2] = this;
        v55[0] = v54;
        v55[1] = 24;
        v56 = absl::internal_any_invocable::RemoteManagerTrivial;
        v57 = absl::internal_any_invocable::RemoteInvoker<false,void,std::__bind_front_t<void (webrtc::VideoStreamBufferController::*)(unsigned int,webrtc::Timestamp),webrtc::VideoStreamBufferController*> &&,unsigned int,webrtc::Timestamp>;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v53 + 24))(v53, v28, v52, v43, v55);
        v56(1, (void **)v55, v55);
      }
    }
  }
}

void webrtc::VideoStreamBufferController::StartNextDecode(webrtc::VideoStreamBufferController *this, int a2)
{
  webrtc::VideoReceiveStreamTimeoutTracker *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v8;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v4 = (webrtc::VideoStreamBufferController *)((char *)this + 872);
  if (*((_QWORD *)this + 117))
  {
    *((_BYTE *)this + 840) = a2;
    if (!a2)
      goto LABEL_22;
  }
  else
  {
    webrtc::VideoReceiveStreamTimeoutTracker::Start((webrtc::VideoStreamBufferController *)((char *)this + 872), a2);
    *((_BYTE *)this + 840) = a2;
    if (!a2)
      goto LABEL_22;
  }
  *((_BYTE *)this + 960) = 1;
  v5 = *((_QWORD *)this + 111);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 109) + 16))(*((_QWORD *)this + 109));
  if (v6 != 0x7FFFFFFFFFFFFFFFLL && v5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v8 = 0x8000000000000000;
    if (v5 != 0x8000000000000000 && v6 != 0x8000000000000000)
      v8 = v6 + v5;
    if (v8 < *((_QWORD *)this + 119))
    {
      v10 = *((_QWORD *)this + 117);
      if (v10)
      {
        *(_BYTE *)(v10 + 4) = 0;
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
          MEMORY[0x20BD0ADEC]();
        *((_QWORD *)this + 117) = 0;
      }
      webrtc::VideoReceiveStreamTimeoutTracker::Start(v4, *((unsigned __int8 *)this + 960));
    }
  }
LABEL_22:
  *((_BYTE *)this + 976) = 1;
  webrtc::VideoStreamBufferController::MaybeScheduleFrameForRelease(this);
}

uint64_t webrtc::VideoStreamBufferController::OnFrameReady(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  const webrtc::EncodedFrame *v19;
  int64_t v20;
  webrtc::_anonymous_namespace_ ***v21;
  webrtc::_anonymous_namespace_ **v22;
  webrtc::_anonymous_namespace_ *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  pthread_mutex_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  webrtc::_anonymous_namespace_ **v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  webrtc::_anonymous_namespace_ *v66;
  char v67;
  const webrtc::EncodedFrame *v68;
  uint64_t v69;
  webrtc::_anonymous_namespace_ *v70;
  uint64_t v71;
  webrtc::_anonymous_namespace_ *v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  webrtc::_anonymous_namespace_ *v78;
  char v79;
  const webrtc::EncodedFrame *v80;
  uint64_t v81;
  webrtc::_anonymous_namespace_ *v82;
  uint64_t v83;
  webrtc::_anonymous_namespace_ *v84;
  uint64_t v85;
  BOOL v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  int v91;
  Timestamp v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  Timestamp v98;
  Timestamp v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int64_t v126;
  BOOL v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  __int128 *v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  unint64_t v141;
  uint64_t *v142;
  webrtc::_anonymous_namespace_ **v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t result;
  int64_t v148;
  uint64_t v149;
  int64_t v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163[3];
  _QWORD v164[4];

  v164[2] = *MEMORY[0x24BDAC8D0];
  if (*a2 <= 1uLL)
LABEL_201:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_buffer_controller.cc", 207, "!frames.empty()", "\t", a5, a6, a7, a8, (uint64_t)"Callers must ensure there is at least one frame to decode.");
  v10 = a1;
  *(_BYTE *)(a1 + 960) = 0;
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 872) + 16))(*(_QWORD *)(a1 + 872));
  *(_QWORD *)(v10 + 944) = v11;
  v12 = 888;
  if (!*(_BYTE *)(v10 + 960))
    v12 = 896;
  v13 = *(_QWORD *)(v10 + v12);
  v14 = 0x8000000000000000;
  if (v13 != 0x8000000000000000 && v11 != 0x8000000000000000)
    v14 = v13 + v11;
  if (v11 == 0x7FFFFFFFFFFFFFFFLL || v13 == 0x7FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v14;
  *(_QWORD *)(v10 + 952) = v17;
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 16) + 16))(*(_QWORD *)(v10 + 16));
  if (*a2 <= 1uLL)
    goto LABEL_200;
  v20 = v18;
  v21 = (webrtc::_anonymous_namespace_ ***)(a2 + 1);
  v22 = (webrtc::_anonymous_namespace_ **)(a2 + 1);
  if ((*a2 & 1) != 0)
    v22 = *v21;
  v23 = *v22;
  if ((*(uint64_t (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)v23 + 16))(v23) < 0)
  {
LABEL_200:
    __break(1u);
    goto LABEL_201;
  }
  v25 = (*(uint64_t (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)v23 + 16))(v23);
  if (*((_QWORD *)v23 + 41))
  {
    if (!a3)
      goto LABEL_38;
  }
  else
  {
    *(_BYTE *)(v10 + 840) = 0;
    if (!a3)
      goto LABEL_38;
  }
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_57;
  v26 = a3 - v20;
  if (v20 == 0x7FFFFFFFFFFFFFFFLL)
    v26 = 0x8000000000000000;
  if (v20 == 0x8000000000000000 || a3 == 0x7FFFFFFFFFFFFFFFLL)
    v28 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v28 = v26;
  if (v28 >= 0)
    v29 = v28;
  else
    v29 = -v28;
  if (v29 > 0x989680)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_38:
  v37 = a3;
  v38 = *(_QWORD *)(v10 + 40);
  v39 = (pthread_mutex_t *)(v38 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(v38 + 8));
  v40 = *(_QWORD *)(v38 + 120);
  v41 = 0x7FFFFFFFFFFFFFFFLL;
  if (v40 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v42 = *(_QWORD *)(v38 + 88);
    if (*(_QWORD *)(v42 + 80))
      v43 = 1000 * *(int *)(*(_QWORD *)(v42 + 88) + 32);
    else
      v43 = 0;
    v44 = v43 + v40;
    if (v40 != 0x8000000000000000)
      v40 = v44;
    v41 = 0x7FFFFFFFFFFFFFFFLL;
    if (v40 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v45 = *(_QWORD *)(v38 + 96);
      if (v45 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v41 = 0x8000000000000000;
        v46 = v45 == 0x8000000000000000 || v40 == 0x8000000000000000;
        v47 = v40 + v45;
        if (!v46)
          v41 = v47;
      }
    }
  }
  if (*(_QWORD *)(v38 + 104) <= v41)
    v48 = v41;
  else
    v48 = *(_QWORD *)(v38 + 104);
  pthread_mutex_unlock(v39);
  v49 = v37;
  if (v48 <= 10000000)
  {
    v57 = 1000 * v25;
    v151 = a2;
    v58 = *a2;
    v59 = (webrtc::_anonymous_namespace_ **)(a2 + 1);
    if ((v58 & 1) != 0)
      goto LABEL_60;
LABEL_87:
    v150 = v49;
    if (v58 >= 2)
      goto LABEL_61;
LABEL_88:
    v64 = 0;
    goto LABEL_113;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_56:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/frame_helpers.cc");
LABEL_57:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v50, v51, v52, v53, v54, v55, v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_buffer_controller.cc");
  webrtc::JitterEstimator::Reset((webrtc::JitterEstimator *)(v10 + 56));
  webrtc::VCMTiming::Reset(*(webrtc::VCMTiming **)(v10 + 40));
  v49 = (*(uint64_t (**)(_QWORD, _QWORD, int64_t))(**(_QWORD **)(v10 + 40) + 24))(*(_QWORD *)(v10 + 40), *((unsigned int *)v23 + 40), v20);
  v57 = 1000 * v25;
  v151 = a2;
  v58 = *a2;
  v59 = (webrtc::_anonymous_namespace_ **)(a2 + 1);
  if ((v58 & 1) == 0)
    goto LABEL_87;
LABEL_60:
  v59 = *v21;
  v150 = v49;
  if (v58 < 2)
    goto LABEL_88;
LABEL_61:
  v148 = v20;
  v149 = v10;
  v60 = v58 >> 1;
  v61 = v49 / 0x3E8;
  if (v49 % 0x3E8 > 0x1F3)
    ++v61;
  v152 = v61;
  if (-(uint64_t)v49 % 0x3E8uLL <= 0x1F4)
    v62 = 0;
  else
    v62 = -1;
  v63 = 0;
  v64 = 0;
  if ((v49 & 0x8000000000000000) == 0)
  {
    v65 = 8 * v60;
    while (1)
    {
      v66 = *v59;
      *((_QWORD *)v66 + 48) = v152;
      v67 = (*(uint64_t (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)v66 + 32))(v66);
      if (v69 < v24)
        v24 = v69;
      v70 = *v59;
      if ((*(uint64_t (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)*v59 + 16))(*v59) < 0)
        goto LABEL_200;
      v63 |= v67;
      v71 = (*(uint64_t (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)v70 + 16))(v70);
      if (v57 <= 1000 * v71)
        v57 = 1000 * v71;
      v72 = *v59++;
      v73 = *((_QWORD *)v72 + 19);
      v74 = v73 == 0x8000000000000000 || v64 == 0x8000000000000000;
      v75 = v73 + v64;
      if (v74)
        v75 = 0x8000000000000000;
      if (v73 == 0x7FFFFFFFFFFFFFFFLL)
        v76 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v76 = v75;
      if (v64 == 0x7FFFFFFFFFFFFFFFLL)
        v64 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v64 = v76;
      v65 -= 8;
      if (!v65)
        goto LABEL_107;
    }
  }
  v153 = v62 - -(uint64_t)v49 / 0x3E8uLL;
  v77 = 8 * v60;
  do
  {
    v78 = *v59;
    *((_QWORD *)v78 + 48) = v153;
    v79 = (*(uint64_t (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)v78 + 32))(v78);
    if (v81 < v24)
      v24 = v81;
    v82 = *v59;
    if ((*(uint64_t (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)*v59 + 16))(*v59) < 0)
      goto LABEL_200;
    v63 |= v79;
    v83 = (*(uint64_t (**)(webrtc::_anonymous_namespace_ *))(*(_QWORD *)v82 + 16))(v82);
    if (v57 <= 1000 * v83)
      v57 = 1000 * v83;
    v84 = *v59++;
    v85 = *((_QWORD *)v84 + 19);
    v86 = v85 == 0x8000000000000000 || v64 == 0x8000000000000000;
    v87 = v85 + v64;
    if (v86)
      v87 = 0x8000000000000000;
    if (v85 == 0x7FFFFFFFFFFFFFFFLL)
      v88 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v88 = v87;
    if (v64 == 0x7FFFFFFFFFFFFFFFLL)
      v64 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v64 = v88;
    v77 -= 8;
  }
  while (v77);
LABEL_107:
  if ((v63 & 1) != 0)
  {
    v20 = v148;
    v10 = v149;
    v89 = *(_QWORD *)(v149 + 536);
    v90 = v151;
    if (v89 <= 2)
      *(_QWORD *)(v149 + 536) = v89 + 1;
    *(_QWORD *)(v149 + 528) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v149 + 792) + 16))(*(_QWORD *)(v149 + 792));
    v91 = *(_DWORD *)(*(_QWORD *)(v149 + 848) + 180);
    if (v91 - *(_DWORD *)(v149 + 968) < 1)
      goto LABEL_120;
LABEL_119:
    (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 24) + 24))(*(_QWORD *)(v10 + 24));
    v91 = *(_DWORD *)(*(_QWORD *)(v10 + 848) + 180);
    goto LABEL_120;
  }
  v20 = v148;
  v10 = v149;
LABEL_113:
  v90 = v151;
  v92.var0 = v57;
  v93 = webrtc::InterFrameDelayVariationCalculator::Calculate((webrtc::InterFrameDelayVariationCalculator *)(v10 + 800), *((_DWORD *)v23 + 40), v92);
  if (v94)
    webrtc::JitterEstimator::UpdateEstimate((webrtc::JitterEstimator *)(v10 + 56), v93, v64);
  v95 = *(_QWORD *)(v10 + 40);
  webrtc::JitterEstimator::GetJitterEstimate(v10 + 56);
  v97 = v96;
  pthread_mutex_lock((pthread_mutex_t *)(v95 + 8));
  if (*(_QWORD *)(v95 + 120) != v97)
  {
    *(_QWORD *)(v95 + 120) = v97;
    if (!*(_QWORD *)(v95 + 128))
      *(_QWORD *)(v95 + 128) = v97;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v95 + 8));
  v98.var0 = v150;
  v99.var0 = v20;
  webrtc::VCMTiming::UpdateCurrentDelay(*(webrtc::VCMTiming **)(v10 + 40), v98, v99);
  v91 = *(_DWORD *)(*(_QWORD *)(v10 + 848) + 180);
  if (v91 - *(_DWORD *)(v10 + 968) >= 1)
    goto LABEL_119;
LABEL_120:
  *(_DWORD *)(v10 + 968) = v91;
  v157 = 0u;
  v158 = 0u;
  v155 = 0u;
  v156 = 0u;
  webrtc::VCMTiming::GetTimings(*(webrtc::VCMTiming **)(v10 + 40), (uint64_t)&v155);
  if (!(_QWORD)v155)
    goto LABEL_170;
  if ((v156 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v156 % 0x3E8uLL <= 0x1F4)
      v110 = 0;
    else
      v110 = -1;
    v100 = v110 - -(uint64_t)v156 / 0x3E8uLL;
    v101 = *((_QWORD *)&v158 + 1);
    if ((*((_QWORD *)&v158 + 1) & 0x8000000000000000) == 0)
    {
LABEL_126:
      if (v101 % 0x3E8 <= 0x1F3)
        v102 = v101 / 0x3E8;
      else
        v102 = v101 / 0x3E8 + 1;
      v103 = v158;
      if ((v158 & 0x8000000000000000) == 0)
        goto LABEL_130;
      goto LABEL_149;
    }
  }
  else
  {
    if ((unint64_t)v156 % 0x3E8 <= 0x1F3)
      v100 = (unint64_t)v156 / 0x3E8;
    else
      v100 = (unint64_t)v156 / 0x3E8 + 1;
    v101 = *((_QWORD *)&v158 + 1);
    if ((*((_QWORD *)&v158 + 1) & 0x8000000000000000) == 0)
      goto LABEL_126;
  }
  v111 = -(uint64_t)v101;
  v112 = v111 / 0x3E8;
  if (v111 % 0x3E8 <= 0x1F4)
    v113 = 0;
  else
    v113 = -1;
  v102 = v113 - v112;
  v103 = v158;
  if ((v158 & 0x8000000000000000) == 0)
  {
LABEL_130:
    if (v103 % 0x3E8 <= 0x1F3)
      v104 = v103 / 0x3E8;
    else
      v104 = v103 / 0x3E8 + 1;
    v105 = *(_QWORD *)(v10 + 24);
    v106 = *((_QWORD *)&v155 + 1);
    if ((*((_QWORD *)&v155 + 1) & 0x8000000000000000) == 0)
      goto LABEL_134;
LABEL_153:
    v117 = -(uint64_t)v106;
    v118 = v117 / 0x3E8;
    if (v117 % 0x3E8 <= 0x1F4)
      v119 = 0;
    else
      v119 = -1;
    v107 = v119 - v118;
    v108 = v157;
    if ((v157 & 0x8000000000000000) == 0)
      goto LABEL_138;
LABEL_157:
    v120 = -(uint64_t)v108;
    v121 = v120 / 0x3E8;
    if (v120 % 0x3E8 <= 0x1F4)
      v122 = 0;
    else
      v122 = -1;
    v109 = v122 - v121;
    goto LABEL_161;
  }
LABEL_149:
  v114 = -(uint64_t)v103;
  v115 = v114 / 0x3E8;
  if (v114 % 0x3E8 <= 0x1F4)
    v116 = 0;
  else
    v116 = -1;
  v104 = v116 - v115;
  v105 = *(_QWORD *)(v10 + 24);
  v106 = *((_QWORD *)&v155 + 1);
  if ((*((_QWORD *)&v155 + 1) & 0x8000000000000000) != 0)
    goto LABEL_153;
LABEL_134:
  if (v106 % 0x3E8 <= 0x1F3)
    v107 = v106 / 0x3E8;
  else
    v107 = v106 / 0x3E8 + 1;
  v108 = v157;
  if ((v157 & 0x8000000000000000) != 0)
    goto LABEL_157;
LABEL_138:
  if (v108 % 0x3E8 <= 0x1F3)
    v109 = v108 / 0x3E8;
  else
    v109 = v108 / 0x3E8 + 1;
LABEL_161:
  v123 = *((_QWORD *)&v156 + 1) / 0x3E8uLL;
  if (*((_QWORD *)&v156 + 1) % 0x3E8uLL > 0x1F3)
    ++v123;
  if (-*((_QWORD *)&v156 + 1) % 0x3E8uLL <= 0x1F4)
    v124 = 0;
  else
    v124 = -1;
  if (v156 < 0)
    v125 = v124 - -*((_QWORD *)&v156 + 1) / 0x3E8uLL;
  else
    v125 = v123;
  (*(void (**)(uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))(*(_QWORD *)v105 + 40))(v105, v100, v102, v104, v107, v109, v125);
LABEL_170:
  v126 = 0x7FFFFFFFFFFFFFFFLL;
  if (v20 != 0x7FFFFFFFFFFFFFFFLL && v24 != 0x8000000000000000)
  {
    v127 = v24 == 0x7FFFFFFFFFFFFFFFLL || v20 == 0x8000000000000000;
    v126 = v127 ? 0x8000000000000000 : v20 - v24;
    if (v126 < 1)
      v126 = 0;
  }
  (*(void (**)(_QWORD, int64_t, _QWORD, _QWORD))(**(_QWORD **)(v10 + 24) + 32))(*(_QWORD *)(v10 + 24), v126, v158, *((_QWORD *)&v155 + 1));
  v128 = *(_QWORD *)(v10 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(v128 + 8));
  v129 = *(_OWORD *)(v128 + 224);
  v159 = *(_OWORD *)(v128 + 208);
  v160 = v129;
  v161 = *(_OWORD *)(v128 + 240);
  v162 = *(_QWORD *)(v128 + 256);
  v130 = *(_OWORD *)(v128 + 160);
  v155 = *(_OWORD *)(v128 + 144);
  v156 = v130;
  v131 = *(_OWORD *)(v128 + 192);
  v157 = *(_OWORD *)(v128 + 176);
  v158 = v131;
  pthread_mutex_unlock((pthread_mutex_t *)(v128 + 8));
  if ((_BYTE)v162)
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v10 + 24) + 48))(*(_QWORD *)(v10 + 24), &v155);
  v132 = *v90;
  if ((*v90 & 1) == 0)
  {
    if (v132 < 2)
      goto LABEL_193;
    v133 = v132 >> 1;
    if (v132 >= 8)
    {
      v134 = v133 & 0x7FFFFFFFFFFFFFFCLL;
      v21 += v133 & 0x7FFFFFFFFFFFFFFCLL;
      v136 = v164;
      v137 = (__int128 *)(v90 + 3);
      v138 = v133 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v139 = *(v137 - 1);
        v140 = *v137;
        *(v137 - 1) = 0uLL;
        *v137 = 0uLL;
        *(v136 - 1) = v139;
        *v136 = v140;
        v136 += 2;
        v137 += 2;
        v138 -= 4;
      }
      while (v138);
      if (v133 == v134)
      {
LABEL_193:
        v163[0] = v132 & 0xFFFFFFFFFFFFFFFELL;
        webrtc::CombineAndDeleteFrames(v163, (uint64_t **)&v155);
        if (!v163[0])
          goto LABEL_195;
        goto LABEL_194;
      }
    }
    else
    {
      v134 = 0;
    }
    v141 = v133 - v134;
    v142 = &v163[v134 + 1];
    do
    {
      v143 = *v21;
      *v21++ = 0;
      *v142++ = (uint64_t)v143;
      --v141;
    }
    while (v141);
    goto LABEL_193;
  }
  v135 = v90[2];
  v163[1] = v90[1];
  v163[2] = v135;
  v163[0] = v132 | 1;
  *v90 = 0;
  webrtc::CombineAndDeleteFrames(v163, (uint64_t **)&v155);
  if (v163[0])
LABEL_194:
    absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::DestroyContents(v163);
LABEL_195:
  v144 = *(_QWORD *)(v10 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(v144 + 8));
  *(_QWORD *)(v144 + 352) = v20;
  pthread_mutex_unlock((pthread_mutex_t *)(v144 + 8));
  *(_BYTE *)(v10 + 976) = 0;
  v145 = *(_QWORD *)(v10 + 32);
  v154 = v155;
  *(_QWORD *)&v155 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v145 + 16))(v145, &v154);
  v146 = v154;
  v154 = 0;
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  result = v155;
  *(_QWORD *)&v155 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t webrtc::`anonymous namespace'::MinReceiveTime(webrtc::_anonymous_namespace_ *this, const webrtc::EncodedFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  webrtc::_anonymous_namespace_ *v17;
  uint64_t v18;

  v2 = *((_QWORD *)this + 39);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(_QWORD *)(v2 + 16);
    result = 0x7FFFFFFFFFFFFFFFLL;
    if (v3 == v4)
      return result;
    goto LABEL_10;
  }
  v7 = 0x25453D000uLL;
  if ((v6 & 1) == 0)
  {
    v17 = this;
    v7 = 0x25453D000;
    v13 = v12;
    this = v17;
    if (v13)
    {
      v14 = operator new();
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)v14 = 0;
      webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v14;
      v7 = 0x25453D000;
      this = v17;
    }
  }
  v8 = *((_QWORD *)this + 39);
  v3 = **(_QWORD **)(v7 + 1936);
  if (v8)
  {
    v4 = *(_QWORD *)(v8 + 16);
    result = 0x7FFFFFFFFFFFFFFFLL;
    if (v3 == v4)
      return result;
    goto LABEL_10;
  }
  if ((v9 & 1) == 0)
  {
    v18 = **(_QWORD **)(v7 + 1936);
    v7 = 0x25453D000;
    v3 = v18;
    if (v15)
    {
      v16 = operator new();
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)v16 = 0;
      webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v16;
      v7 = 0x25453D000;
      v3 = v18;
    }
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v7 + 1936) + 8);
  for (result = 0x7FFFFFFFFFFFFFFFLL; v3 != v4; v3 += 104)
  {
LABEL_10:
    v10 = *(_QWORD *)(v3 + 40);
    v11 = v10 + 0x7FFFFFFFFFFFFFFFLL;
    if (v10 >= result)
      v10 = result;
    if (v11 < 0xFFFFFFFFFFFFFFFELL)
      result = v10;
  }
  return result;
}

void webrtc::VideoStreamBufferController::FrameReadyForDecode(webrtc::VideoStreamBufferController *this, unsigned int a2, Timestamp a3)
{
  webrtc::FrameBuffer *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  unint64_t v39;
  _QWORD v40[2];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = (webrtc::FrameBuffer *)*((_QWORD *)this + 106);
  if (*((_BYTE *)v4 + 72))
  {
    webrtc::FrameBuffer::ExtractNextDecodableTemporalUnit(v4, &v39);
    v11 = v39;
    if (v39 <= 1)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_buffer_controller.cc");
      goto LABEL_19;
    }
    if ((v39 & 1) != 0)
    {
      v37[1] = v40[0];
      v37[2] = v40[1];
      v37[0] = v39 | 1;
      v39 = 0;
      webrtc::VideoStreamBufferController::OnFrameReady((uint64_t)this, v37, a3.var0, v6, v7, v8, v9, v10);
      if (!v37[0])
      {
LABEL_19:
        if (v39)
          absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::DestroyContents(&v39);
        return;
      }
LABEL_18:
      absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::DestroyContents(v37);
      goto LABEL_19;
    }
    v26 = v39 >> 1;
    v27 = v40;
    if (v39 >= 8)
    {
      v28 = v26 & 0x7FFFFFFFFFFFFFFCLL;
      v27 = &v40[v26 & 0x7FFFFFFFFFFFFFFCLL];
      v29 = &v38;
      v30 = (__int128 *)v41;
      v31 = v26 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v32 = *(v30 - 1);
        v33 = *v30;
        *(v30 - 1) = 0uLL;
        *v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v32;
        *(_OWORD *)v29 = v33;
        v29 += 4;
        v30 += 2;
        v31 -= 4;
      }
      while (v31);
      if (v26 == v28)
      {
LABEL_17:
        v37[0] = v11 & 0xFFFFFFFFFFFFFFFELL;
        webrtc::VideoStreamBufferController::OnFrameReady((uint64_t)this, v37, a3.var0, v6, v7, v8, v9, v10);
        if (!v37[0])
          goto LABEL_19;
        goto LABEL_18;
      }
    }
    else
    {
      v28 = 0;
    }
    v34 = v26 - v28;
    v35 = &v37[v28 + 1];
    do
    {
      v36 = *v27;
      *v27++ = 0;
      *v35++ = v36;
      --v34;
    }
    while (v34);
    goto LABEL_17;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_buffer_controller.cc");
}

void webrtc::VideoStreamBufferController::~VideoStreamBufferController(webrtc::VideoStreamBufferController *this)
{
  webrtc::VideoStreamBufferController::~VideoStreamBufferController(this);
  JUMPOUT(0x20BD0ADECLL);
}

{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  webrtc::VideoStreamBufferController *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  *(_QWORD *)this = &off_24C0C4A10;
  v2 = *((_QWORD *)this + 131);
  *(_BYTE *)(v2 + 4) = 0;
  do
  {
    v3 = __ldaxr((unsigned int *)v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)v2));
  if (v4)
  {
    *((_QWORD *)this + 123) = off_24C0B4170;
    if ((*((char *)this + 1039) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_15:
    operator delete(*((void **)this + 127));
    v5 = (void *)*((_QWORD *)this + 124);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  MEMORY[0x20BD0ADEC]();
  *((_QWORD *)this + 123) = off_24C0B4170;
  if (*((char *)this + 1039) < 0)
    goto LABEL_15;
LABEL_5:
  v5 = (void *)*((_QWORD *)this + 124);
  if (v5)
  {
LABEL_6:
    *((_QWORD *)this + 125) = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (unsigned int *)*((_QWORD *)this + 117);
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      MEMORY[0x20BD0ADEC]();
  }
  v9 = (webrtc::VideoStreamBufferController *)*((_QWORD *)this + 116);
  if (v9 == (webrtc::VideoStreamBufferController *)((char *)this + 904))
  {
    v10 = 4;
    v9 = (webrtc::VideoStreamBufferController *)((char *)this + 904);
  }
  else
  {
    if (!v9)
      goto LABEL_19;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_19:
  v11 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v11)
  {
    v12 = *(void **)(v11 + 112);
    if (v12)
      operator delete(v12);
    std::__tree<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>>>::destroy(v11 + 16, *(_QWORD **)(v11 + 24));
    MEMORY[0x20BD0ADEC](v11, 0x1032C4039095F6DLL);
  }
  webrtc::JitterEstimator::~JitterEstimator((webrtc::VideoStreamBufferController *)((char *)this + 56));
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

void std::__function::__func<std::__bind_front_t<void (webrtc::VideoStreamBufferController::*)(webrtc::TimeDelta),webrtc::VideoStreamBufferController*>,std::allocator<std::__bind_front_t<void (webrtc::VideoStreamBufferController::*)(webrtc::TimeDelta),webrtc::VideoStreamBufferController*>>,void ()(webrtc::TimeDelta)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

__n128 std::__function::__func<std::__bind_front_t<void (webrtc::VideoStreamBufferController::*)(webrtc::TimeDelta),webrtc::VideoStreamBufferController*>,std::allocator<std::__bind_front_t<void (webrtc::VideoStreamBufferController::*)(webrtc::TimeDelta),webrtc::VideoStreamBufferController*>>,void ()(webrtc::TimeDelta)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C0C4A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind_front_t<void (webrtc::VideoStreamBufferController::*)(webrtc::TimeDelta),webrtc::VideoStreamBufferController*>,std::allocator<std::__bind_front_t<void (webrtc::VideoStreamBufferController::*)(webrtc::TimeDelta),webrtc::VideoStreamBufferController*>>,void ()(webrtc::TimeDelta)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0C4A30;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind_front_t<void (webrtc::VideoStreamBufferController::*)(webrtc::TimeDelta),webrtc::VideoStreamBufferController*>,std::allocator<std::__bind_front_t<void (webrtc::VideoStreamBufferController::*)(webrtc::TimeDelta),webrtc::VideoStreamBufferController*>>,void ()(webrtc::TimeDelta)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,std::__bind_front_t<void (webrtc::VideoStreamBufferController::*)(unsigned int,webrtc::Timestamp),webrtc::VideoStreamBufferController*> &&,unsigned int,webrtc::Timestamp>(uint64_t (***a1)(_QWORD *, uint64_t, _QWORD), uint64_t a2, _QWORD *a3)
{
  uint64_t (*v3)(_QWORD *, uint64_t, _QWORD);
  uint64_t v4;
  _QWORD *v5;

  v3 = **a1;
  v4 = (uint64_t)(*a1)[1];
  v5 = (_QWORD *)((char *)(*a1)[2] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v5 + v3);
  return v3(v5, a2, *a3);
}

void webrtc::internal::VideoStreamDecoder::~VideoStreamDecoder(webrtc::internal::VideoStreamDecoder *this)
{
  *(_QWORD *)this = &off_24C0C4A78;
  *(_QWORD *)(*((_QWORD *)this + 1) + 32) = 0;
}

{
  *(_QWORD *)this = &off_24C0C4A78;
  *(_QWORD *)(*((_QWORD *)this + 1) + 32) = 0;
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::internal::VideoStreamDecoder::FrameToRender(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, char a5, int a6)
{
  webrtc::internal::ReceiveStatisticsProxy::OnDecodedFrame(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a2);
  return 0;
}

uint64_t webrtc::internal::VideoStreamDecoder::OnDroppedFrames(webrtc::internal::VideoStreamDecoder *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
}

uint64_t webrtc::internal::VideoStreamDecoder::OnIncomingPayloadType(webrtc::internal::VideoStreamDecoder *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  char v9;
  char v10;
  _QWORD v11[2];
  uint64_t (*v12)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v13)(uint64_t);

  v3 = *((_QWORD *)this + 2);
  v4 = *(_QWORD *)(v3 + 1616);
  v5 = *(unsigned int **)(v3 + 1624);
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new();
  *(_QWORD *)v7 = v5;
  *(_DWORD *)(v7 + 8) = a2;
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)(v7 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v7 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::ReceiveStatisticsProxy::OnIncomingPayloadType(int)::$_1 &&>;
  v11[0] = v7;
  v12 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v13 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v11, &v10, &v9);
  return v12(1, v11, v11);
}

void webrtc::internal::VideoStreamDecoder::OnDecoderInfoChanged(webrtc::internal::VideoStreamDecoder *this, const webrtc::VideoDecoder::DecoderInfo *a2)
{
  webrtc::internal::ReceiveStatisticsProxy::OnDecoderInfo(*((_QWORD *)this + 2), (uint64_t)a2);
}

uint64_t webrtc::VideoStreamEncoder::VideoStreamEncoder(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 v20;
  int v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 (*v27)(uint64_t, __n128 *, __n128 *);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v42;
  _QWORD *v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t sig;
  void *v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  unint64_t v65;
  BOOL v66;
  int v67;
  int v68;
  int *v70;
  unint64_t v71;
  BOOL v72;
  int v73;
  int v74;
  _QWORD *v76;
  unint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *p_p;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  __n128 (*v90)(uint64_t, __n128 *, __n128 *);
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  void *v103[2];
  char v104;
  char v105;
  unsigned int v106;
  void *__p;
  uint64_t v108;
  unsigned __int8 v109;
  _QWORD v110[2];
  pthread_mutexattr_t v111;
  __n128 (*v112)(uint64_t, __n128 *, __n128 *);
  void (*v113)(uint64_t *);
  void *v114[3];
  __int16 v115;
  uint64_t v116;
  uint64_t v117;

  v15 = a10;
  v117 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = &unk_24C0C4B50;
  v16 = a1 + 8;
  *(_QWORD *)a1 = &off_24C0C4AB8;
  *(_QWORD *)(a1 + 16) = &unk_24C0C4B80;
  v17 = *a2;
  *(_QWORD *)(a1 + 24) = *a2;
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 48) = v20;
  *(_DWORD *)(a1 + 72) = v21;
  *(_QWORD *)(a1 + 80) = 0;
  v22 = *a5;
  v23 = a5[1];
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a5 + 4);
  *(_OWORD *)(a1 + 104) = v23;
  *(_OWORD *)(a1 + 88) = v22;
  *(_DWORD *)(a1 + 128) = v24;
  webrtc::RateControlSettings::RateControlSettings(a1 + 136, *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 224) = a10;
  v25 = (uint64_t *)(a1 + 232);
  if (a10)
  {
    *v25 = 0;
  }
  else
  {
    (*(void (**)(_QWORD))(**((_QWORD **)a5 + 1) + 32))(*((_QWORD *)a5 + 1));
    v15 = *(_QWORD *)(a1 + 224);
    if (!v15)
      v15 = *v25;
  }
  *(_QWORD *)(a1 + 240) = v15;
  *(_QWORD *)(a1 + 248) = a4;
  *(_QWORD *)(a1 + 256) = &off_24C0C4BA8;
  *(_QWORD *)(a1 + 264) = a1;
  v26 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 272) = v26;
  *(_DWORD *)(a1 + 280) = 0;
  HIBYTE(v112) = 5;
  if (&v111 <= (pthread_mutexattr_t *)"Unset" && (char *)&v111.__sig + 5 > "Unset")
    goto LABEL_124;
  LODWORD(v111.__sig) = *(_DWORD *)"Unset";
  WORD2(v111.__sig) = str_11_12[4];
  v27 = v112;
  *(pthread_mutexattr_t *)(a1 + 288) = v111;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = v27;
  *(_QWORD *)(a1 + 413) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_WORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = -1;
  *(_WORD *)(a1 + 516) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 604) = 0;
  *(_BYTE *)(a1 + 620) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_WORD *)(a1 + 1016) = 0;
  *(_BYTE *)(a1 + 1018) = 0;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  v28 = *(_QWORD *)(a1 + 40);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 24))(v28, v29);
  v31 = (uint64_t)((double)v30 / 4294967.3 + 0.5) + 1000 * HIDWORD(v30);
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  if ((v32 & 0x8000000000000000) != 0)
  {
    v34 = -(uint64_t)v32 % 0x3E8uLL <= 0x1F4 ? -(uint64_t)v32 / 0x3E8uLL : -(uint64_t)v32 / 0x3E8uLL + 1;
  }
  else
  {
    v33 = v32 % 0x3E8 <= 0x1F3 ? 0 : -1;
    v34 = v33 - v32 / 0x3E8;
  }
  *(_QWORD *)(a1 + 1032) = v31 + v34;
  v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  if ((v35 & 0x8000000000000000) != 0)
  {
    v37 = -(uint64_t)v35 % 0x3E8uLL <= 0x1F4 ? 0 : -1;
    v36 = v37 - -(uint64_t)v35 / 0x3E8uLL;
  }
  else
  {
    v36 = v35 / 0x3E8;
    if (v35 % 0x3E8 > 0x1F3)
      ++v36;
  }
  *(_QWORD *)(a1 + 1040) = v36;
  *(_QWORD *)(a1 + 1048) = 0;
  *(_DWORD *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_BYTE *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_BYTE *)(a1 + 1312) = 1;
  *(_BYTE *)(a1 + 1316) = 0;
  *(_BYTE *)(a1 + 1332) = 0;
  *(_QWORD *)(a1 + 1336) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 1344) = 0;
  *(_DWORD *)(a1 + 1348) = 0;
  *(_QWORD *)(a1 + 1352) = 0;
  *(_BYTE *)(a1 + 1360) = 0;
  *(_BYTE *)(a1 + 1368) = 0;
  *(_BYTE *)(a1 + 1376) = 0;
  *(_BYTE *)(a1 + 1384) = 0;
  *(_BYTE *)(a1 + 1392) = 0;
  *(_BYTE *)(a1 + 1400) = 0;
  *(_QWORD *)(a1 + 1404) = 0x10000E100;
  *(_BYTE *)(a1 + 1439) = 7;
  *(_WORD *)(a1 + 1412) = 0;
  if (a1 + 1416 <= (unint64_t)"unknown" && a1 + 1423 > (unint64_t)"unknown")
    goto LABEL_124;
  strcpy((char *)(a1 + 1416), "unknown");
  *(_WORD *)(a1 + 1440) = 256;
  *(_BYTE *)(a1 + 1456) = -1;
  *(_QWORD *)(a1 + 1448) = 2;
  *(_QWORD *)(a1 + 1472) = 0;
  *(_QWORD *)(a1 + 1496) = 0;
  *(_QWORD *)(a1 + 1520) = 0;
  *(_QWORD *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_BYTE *)(a1 + 1592) = 0;
  *(_OWORD *)(a1 + 1576) = 0uLL;
  *(_DWORD *)(a1 + 1608) = 1;
  *(_QWORD *)(a1 + 1600) = 2;
  *(_WORD *)(a1 + 1632) = 0;
  *(_QWORD *)(a1 + 1656) = 0;
  *(_OWORD *)(a1 + 1640) = 0uLL;
  *(_BYTE *)(a1 + 1664) = 1;
  *(_DWORD *)(a1 + 1668) = 0;
  *(_BYTE *)(a1 + 1672) = 0;
  *(_OWORD *)(a1 + 1676) = 0uLL;
  *(_OWORD *)(a1 + 1708) = 0uLL;
  *(_OWORD *)(a1 + 1692) = 0uLL;
  *(_OWORD *)(a1 + 1724) = 0uLL;
  *(_OWORD *)(a1 + 1740) = 0uLL;
  *(_OWORD *)(a1 + 1756) = 0uLL;
  *(_OWORD *)(a1 + 1768) = 0uLL;
  *(_BYTE *)(a1 + 1688) = 1;
  *(_BYTE *)(a1 + 1708) = 0;
  *(_QWORD *)(a1 + 1700) = 0;
  *(_QWORD *)(a1 + 1692) = 0;
  *(_BYTE *)(a1 + 1724) = 1;
  *(_BYTE *)(a1 + 1744) = 0;
  *(_QWORD *)(a1 + 1728) = 0;
  *(_QWORD *)(a1 + 1736) = 0;
  *(_BYTE *)(a1 + 1760) = 1;
  *(_QWORD *)(a1 + 1772) = 0;
  *(_QWORD *)(a1 + 1764) = 0;
  *(_BYTE *)(a1 + 1780) = 0;
  *(_DWORD *)(a1 + 1960) = 0;
  *(_OWORD *)(a1 + 1784) = 0uLL;
  *(_OWORD *)(a1 + 1928) = 0uLL;
  *(_OWORD *)(a1 + 1944) = 0uLL;
  *(_OWORD *)(a1 + 1896) = 0uLL;
  *(_OWORD *)(a1 + 1912) = 0uLL;
  *(_OWORD *)(a1 + 1864) = 0uLL;
  *(_OWORD *)(a1 + 1880) = 0uLL;
  *(_OWORD *)(a1 + 1832) = 0uLL;
  *(_OWORD *)(a1 + 1848) = 0uLL;
  *(_OWORD *)(a1 + 1800) = 0uLL;
  *(_OWORD *)(a1 + 1816) = 0uLL;
  *(_BYTE *)(a1 + 1796) = 1;
  *(_QWORD *)(a1 + 1808) = 0;
  *(_QWORD *)(a1 + 1800) = 0;
  *(_BYTE *)(a1 + 1816) = 0;
  *(_BYTE *)(a1 + 1832) = 1;
  *(_QWORD *)(a1 + 1844) = 0;
  *(_QWORD *)(a1 + 1836) = 0;
  *(_BYTE *)(a1 + 1852) = 0;
  *(_BYTE *)(a1 + 1868) = 1;
  *(_QWORD *)(a1 + 1880) = 0;
  *(_QWORD *)(a1 + 1872) = 0;
  *(_BYTE *)(a1 + 1888) = 0;
  *(_BYTE *)(a1 + 1904) = 1;
  *(_QWORD *)(a1 + 1916) = 0;
  *(_QWORD *)(a1 + 1908) = 0;
  *(_BYTE *)(a1 + 1924) = 0;
  *(_BYTE *)(a1 + 1940) = 1;
  *(_QWORD *)(a1 + 1952) = 0;
  *(_QWORD *)(a1 + 1944) = 0;
  *(_BYTE *)(a1 + 1960) = 0;
  *(_DWORD *)(a1 + 1964) = 0;
  *(_BYTE *)(a1 + 1968) = 0;
  *(_QWORD *)(a1 + 1976) = 0;
  *(_WORD *)(a1 + 1984) = 0;
  *(_BYTE *)(a1 + 1992) = 0;
  *(_DWORD *)(a1 + 2016) = 0;
  *(_BYTE *)(a1 + 2020) = 0;
  *(_QWORD *)(a1 + 2004) = 0;
  *(_QWORD *)(a1 + 1996) = 0;
  *(_WORD *)(a1 + 2012) = 0;
  *(_BYTE *)(a1 + 2097) = 1;
  *(_DWORD *)(a1 + 2100) = 1082130432;
  *(_OWORD *)(a1 + 2024) = xmmword_208F0A0B0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 2040) = _D0;
  *(_DWORD *)(a1 + 2092) = 1106247680;
  *(_DWORD *)(a1 + 2052) = 0;
  *(_OWORD *)(a1 + 2056) = xmmword_208F0A0C0;
  *(_DWORD *)(a1 + 2048) = 1097859072;
  *(_BYTE *)(a1 + 2072) = 0;
  *(_DWORD *)(a1 + 2076) = 1063675494;
  *(_QWORD *)(a1 + 2080) = 0x3F75C28F00000000;
  *(_DWORD *)(a1 + 2088) = 0;
  *(_BYTE *)(a1 + 2096) = 1;
  *(_BYTE *)(a1 + 2104) = 0;
  *(_DWORD *)(a1 + 2108) = 0;
  *(_BYTE *)(a1 + 2112) = 0;
  *(_BYTE *)(a1 + 2116) = 0;
  *(_DWORD *)(a1 + 2120) = 0;
  *(_QWORD *)(a1 + 2128) = 0;
  v42 = operator new(4uLL);
  *(_QWORD *)(a1 + 2136) = v42;
  *v42++ = 4;
  *(_QWORD *)(a1 + 2152) = v42;
  *(_QWORD *)(a1 + 2144) = v42;
  pthread_mutexattr_init(&v111);
  pthread_mutexattr_setpolicy_np(&v111, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2160), &v111);
  pthread_mutexattr_destroy(&v111);
  *(_QWORD *)(a1 + 2224) = v16;
  *(_QWORD *)(a1 + 2232) = 0;
  *(_QWORD *)(a1 + 2248) = 0;
  *(_QWORD *)(a1 + 2240) = 0;
  *(_BYTE *)(a1 + 2256) = 1;
  *(_DWORD *)(a1 + 2260) = 0;
  *(_BYTE *)(a1 + 2264) = 0;
  *(_OWORD *)(a1 + 2268) = 0u;
  *(_OWORD *)(a1 + 2284) = 0u;
  *(_OWORD *)(a1 + 2300) = 0u;
  *(_OWORD *)(a1 + 2316) = 0u;
  *(_OWORD *)(a1 + 2332) = 0u;
  *(_OWORD *)(a1 + 2348) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_BYTE *)(a1 + 2280) = 1;
  *(_QWORD *)(a1 + 2284) = 0;
  *(_QWORD *)(a1 + 2292) = 0;
  *(_BYTE *)(a1 + 2300) = 0;
  *(_BYTE *)(a1 + 2316) = 1;
  *(_BYTE *)(a1 + 2336) = 0;
  *(_QWORD *)(a1 + 2320) = 0;
  *(_QWORD *)(a1 + 2328) = 0;
  *(_BYTE *)(a1 + 2352) = 1;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_BYTE *)(a1 + 2372) = 0;
  *(_QWORD *)(a1 + 2356) = 0;
  *(_QWORD *)(a1 + 2364) = 0;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_DWORD *)(a1 + 2552) = 0;
  *(_BYTE *)(a1 + 2388) = 1;
  *(_QWORD *)(a1 + 2400) = 0;
  *(_QWORD *)(a1 + 2392) = 0;
  *(_BYTE *)(a1 + 2408) = 0;
  *(_BYTE *)(a1 + 2424) = 1;
  *(_QWORD *)(a1 + 2436) = 0;
  *(_QWORD *)(a1 + 2428) = 0;
  *(_BYTE *)(a1 + 2444) = 0;
  *(_BYTE *)(a1 + 2460) = 1;
  *(_QWORD *)(a1 + 2472) = 0;
  *(_QWORD *)(a1 + 2464) = 0;
  *(_BYTE *)(a1 + 2480) = 0;
  *(_BYTE *)(a1 + 2496) = 1;
  *(_QWORD *)(a1 + 2508) = 0;
  *(_QWORD *)(a1 + 2500) = 0;
  *(_BYTE *)(a1 + 2516) = 0;
  *(_BYTE *)(a1 + 2532) = 1;
  *(_QWORD *)(a1 + 2544) = 0;
  *(_QWORD *)(a1 + 2536) = 0;
  *(_BYTE *)(a1 + 2552) = 0;
  *(_DWORD *)(a1 + 2556) = 0;
  *(_BYTE *)(a1 + 2560) = 0;
  *(_BYTE *)(a1 + 2584) = 0;
  *(_DWORD *)(a1 + 2608) = 0;
  *(_BYTE *)(a1 + 2612) = 0;
  *(_QWORD *)(a1 + 2596) = 0;
  *(_QWORD *)(a1 + 2588) = 0;
  *(_WORD *)(a1 + 2604) = 0;
  *(_DWORD *)(a1 + 2616) = 0;
  *(_QWORD *)(a1 + 2640) = 0;
  *(_QWORD *)(a1 + 2632) = 0;
  *(_QWORD *)(a1 + 2648) = 0;
  *(_QWORD *)(a1 + 2656) = -1;
  *(_QWORD *)(a1 + 2672) = 0;
  *(_QWORD *)(a1 + 2664) = 0;
  *(_QWORD *)(a1 + 2568) = -1;
  *(_WORD *)(a1 + 2576) = 0;
  *(_BYTE *)(a1 + 2680) = 0;
  *(_DWORD *)(a1 + 2684) = 2000;
  *(_QWORD *)(a1 + 2688) = 0x3FE999999999999ALL;
  *(_DWORD *)(a1 + 2696) = 10;
  v43 = operator new(0x80uLL);
  *v43 = "enabled";
  v43[1] = a1 + 2680;
  v43[2] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v43[3] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v43[4] = "min_duration_ms";
  v43[5] = a1 + 2684;
  v43[6] = webrtc::struct_parser_impl::TypedParser<int>::Parse;
  v43[7] = webrtc::struct_parser_impl::TypedParser<int>::Encode;
  v43[8] = "min_area_ratio";
  v43[9] = a1 + 2688;
  v43[10] = webrtc::struct_parser_impl::TypedParser<double>::Parse;
  v43[11] = webrtc::struct_parser_impl::TypedParser<double>::Encode;
  v43[12] = "min_fps";
  v43[13] = a1 + 2696;
  v43[14] = webrtc::struct_parser_impl::TypedParser<int>::Parse;
  v43[15] = webrtc::struct_parser_impl::TypedParser<int>::Encode;
  v44 = (uint64_t *)operator new();
  *v44 = (uint64_t)v43;
  v44[1] = (uint64_t)(v43 + 16);
  v44[2] = (uint64_t)(v43 + 16);
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 32)
                                                                                           + 16))(&v111, *(_QWORD *)(a1 + 32), "WebRTC-AutomaticAnimationDetectionScreenshare", 45);
  if (SHIBYTE(v112) < 0)
  {
    v45 = *(_QWORD *)v111.__opaque;
    if ((*(_QWORD *)v111.__opaque & 0x8000000000000000) != 0)
      goto LABEL_124;
    sig = v111.__sig;
    if (*(_QWORD *)v111.__opaque)
    {
      if (!v111.__sig)
        goto LABEL_124;
    }
  }
  else
  {
    v45 = HIBYTE(v112);
    sig = (uint64_t)&v111;
  }
  webrtc::StructParametersParser::Parse(v44, sig, v45);
  if (SHIBYTE(v112) < 0)
    operator delete((void *)v111.__sig);
  v47 = (void *)*v44;
  if (*v44)
  {
    v44[1] = (uint64_t)v47;
    operator delete(v47);
  }
  MEMORY[0x20BD0ADEC](v44, 0x20C40960023A9);
  v48 = *(unsigned __int8 *)(a1 + 2680);
  v49 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
  if (v48)
  {
    if ((v49 & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v50, v51, v52, v53, v54, v55, v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
  }
  else if ((v49 & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v50, v51, v52, v53, v54, v55, v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
  }
  *(_QWORD *)(a1 + 2704) = &off_24C0C4E20;
  pthread_mutexattr_init(&v111);
  pthread_mutexattr_setpolicy_np(&v111, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2712), &v111);
  pthread_mutexattr_destroy(&v111);
  *(_QWORD *)(a1 + 2776) = a4;
  *(_BYTE *)(a1 + 2784) = 0;
  *(_BYTE *)(a1 + 2788) = 0;
  *(_BYTE *)(a1 + 2792) = 0;
  *(_DWORD *)(a1 + 2796) = 0;
  *(_QWORD *)(a1 + 2800) = 0xE10000000000;
  *(_BYTE *)(a1 + 2808) = 0;
  *(_BYTE *)(a1 + 2812) = 0;
  v57 = *(int **)(a1 + 32);
  v58 = operator new();
  *(_QWORD *)v58 = a1 + 2704;
  *(_QWORD *)(v58 + 8) = a4;
  webrtc::BalancedDegradationSettings::BalancedDegradationSettings((void **)(v58 + 16), v57);
  *(_BYTE *)(v58 + 56) = 0;
  *(_QWORD *)(v58 + 40) = 0;
  *(_BYTE *)(v58 + 48) = 0;
  *(_BYTE *)(v58 + 64) = 0;
  *(_BYTE *)(v58 + 72) = 0;
  *(_BYTE *)(v58 + 80) = 0;
  *(_BYTE *)(v58 + 88) = 0;
  *(_BYTE *)(v58 + 96) = 0;
  *(_BYTE *)(v58 + 104) = 0;
  *(_BYTE *)(v58 + 112) = 0;
  *(_BYTE *)(v58 + 120) = 0;
  *(_BYTE *)(v58 + 128) = 0;
  *(_BYTE *)(v58 + 136) = 0;
  *(_BYTE *)(v58 + 144) = 0;
  *(_BYTE *)(v58 + 152) = 0;
  *(_BYTE *)(v58 + 216) = 0;
  *(_BYTE *)(v58 + 224) = 0;
  *(_BYTE *)(v58 + 232) = 0;
  *(_BYTE *)(v58 + 240) = 0;
  *(_BYTE *)(v58 + 248) = 0;
  *(_QWORD *)(v58 + 256) = 0;
  *(_BYTE *)(v58 + 208) = 0;
  *(_OWORD *)(v58 + 176) = 0u;
  *(_OWORD *)(v58 + 192) = 0u;
  *(_OWORD *)(v58 + 160) = 0u;
  *(_QWORD *)(a1 + 2816) = v58;
  *(_QWORD *)(a1 + 2824) = 0;
  v59 = operator new();
  *(_QWORD *)v59 = &off_24C0C4BE0;
  *(_DWORD *)(v59 + 8) = 0;
  *(_BYTE *)(v59 + 12) = 0;
  *(_DWORD *)(v59 + 16) = 0;
  *(_QWORD *)(v59 + 24) = v58;
  *(_QWORD *)(a1 + 2832) = v59;
  *(_QWORD *)(a1 + 2840) = 0;
  *(_QWORD *)(a1 + 2856) = 0;
  *(_QWORD *)(a1 + 2848) = 0;
  v60 = *(_QWORD *)(a1 + 40);
  v61 = *(_BYTE *)(a1 + 88);
  v62 = *a6;
  *a6 = 0;
  v98 = v62;
  webrtc::VideoStreamEncoderResourceManager::VideoStreamEncoderResourceManager(a1 + 2864, a1 + 2704, a4, v60, v61, &v98, *(_QWORD *)(a1 + 2832), *(int **)(a1 + 32));
  v63 = v98;
  v98 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  *(_QWORD *)(a1 + 4368) = 0;
  *(_OWORD *)(a1 + 4352) = 0u;
  *(_QWORD *)(a1 + 4376) = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 4384) = 0;
  *(_BYTE *)(a1 + 4392) = 0;
  *(_BYTE *)(a1 + 4400) = 0;
  *(_BYTE *)(a1 + 4408) = 0;
  *(_BYTE *)(a1 + 4416) = 0;
  *(_BYTE *)(a1 + 4424) = 0;
  *(_BYTE *)(a1 + 4432) = 0;
  *(_BYTE *)(a1 + 4440) = 0;
  *(_BYTE *)(a1 + 4448) = 0;
  *(_BYTE *)(a1 + 4456) = 0;
  *(_BYTE *)(a1 + 4464) = 0;
  *(_BYTE *)(a1 + 4472) = 0;
  *(_DWORD *)(a1 + 4476) = 1;
  *(_QWORD *)(a1 + 4488) = 0;
  *(_QWORD *)(a1 + 4480) = 0;
  *(_QWORD *)(a1 + 4496) = 0;
  *(_BYTE *)(a1 + 4504) = 1;
  *(_BYTE *)(a1 + 4508) = 0;
  *(_BYTE *)(a1 + 4516) = 0;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 32)
                                                                                           + 16))(&v111, *(_QWORD *)(a1 + 32), "WebRTC-DefaultBitrateLimitsKillSwitch", 37);
  if (SHIBYTE(v112) < 0)
  {
    v65 = *(_QWORD *)v111.__opaque;
    if ((*(_QWORD *)v111.__opaque & 0x8000000000000000) != 0)
      goto LABEL_124;
    v64 = (int *)v111.__sig;
    if (*(_QWORD *)v111.__opaque)
    {
      if (!v111.__sig)
        goto LABEL_124;
    }
  }
  else
  {
    v64 = (int *)&v111;
    v65 = HIBYTE(v112);
  }
  if (v65 < 7)
  {
    v66 = 0;
    if ((HIBYTE(v112) & 0x80) == 0)
      goto LABEL_60;
    goto LABEL_59;
  }
  v67 = *v64;
  v68 = *(int *)((char *)v64 + 3);
  v66 = v67 == 1650552389 && v68 == 1684368482;
  if ((HIBYTE(v112) & 0x80) != 0)
LABEL_59:
    operator delete((void *)v111.__sig);
LABEL_60:
  *(_BYTE *)(a1 + 4520) = !v66;
  pthread_mutexattr_init(&v111);
  pthread_mutexattr_setpolicy_np(&v111, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 4528), &v111);
  pthread_mutexattr_destroy(&v111);
  *(_QWORD *)(a1 + 4592) = &off_24C0B4A00;
  *(_BYTE *)(a1 + 4600) = 0;
  *(_BYTE *)(a1 + 4652) = 0;
  *(_BYTE *)(a1 + 4656) = 0;
  *(_BYTE *)(a1 + 4680) = 0;
  *(_BYTE *)(a1 + 4684) = 0;
  *(_BYTE *)(a1 + 4688) = 0;
  pthread_mutexattr_init(&v111);
  pthread_mutexattr_setpolicy_np(&v111, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 4696), &v111);
  pthread_mutexattr_destroy(&v111);
  *(_QWORD *)(a1 + 4760) = &off_24C0B4A00;
  *(_BYTE *)(a1 + 4768) = 0;
  *(_BYTE *)(a1 + 4820) = 0;
  *(_BYTE *)(a1 + 4824) = 0;
  *(_BYTE *)(a1 + 4848) = 0;
  *(_BYTE *)(a1 + 4852) = 0;
  *(_BYTE *)(a1 + 4856) = 0;
  pthread_mutexattr_init(&v111);
  pthread_mutexattr_setpolicy_np(&v111, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 4864), &v111);
  pthread_mutexattr_destroy(&v111);
  *(_QWORD *)(a1 + 4928) = &off_24C0B4A00;
  *(_BYTE *)(a1 + 4936) = 0;
  *(_BYTE *)(a1 + 4988) = 0;
  *(_BYTE *)(a1 + 4992) = 0;
  *(_BYTE *)(a1 + 5016) = 0;
  *(_BYTE *)(a1 + 5020) = 0;
  *(_BYTE *)(a1 + 5024) = 0;
  pthread_mutexattr_init(&v111);
  pthread_mutexattr_setpolicy_np(&v111, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 5032), &v111);
  pthread_mutexattr_destroy(&v111);
  *(_QWORD *)(a1 + 5096) = &off_24C0B4A60;
  *(_BYTE *)(a1 + 5180) = 0;
  *(_BYTE *)(a1 + 5184) = 0;
  *(_BYTE *)(a1 + 5188) = 0;
  *(_OWORD *)(a1 + 5104) = 0u;
  *(_OWORD *)(a1 + 5120) = 0u;
  *(_OWORD *)(a1 + 5136) = 0u;
  *(_OWORD *)(a1 + 5152) = 0u;
  *(_OWORD *)(a1 + 5161) = 0u;
  pthread_mutexattr_init(&v111);
  pthread_mutexattr_setpolicy_np(&v111, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 5192), &v111);
  pthread_mutexattr_destroy(&v111);
  *(_QWORD *)(a1 + 5256) = &off_24C0B4A60;
  *(_BYTE *)(a1 + 5340) = 0;
  *(_BYTE *)(a1 + 5344) = 0;
  *(_BYTE *)(a1 + 5348) = 0;
  *(_OWORD *)(a1 + 5264) = 0u;
  *(_OWORD *)(a1 + 5280) = 0u;
  *(_OWORD *)(a1 + 5296) = 0u;
  *(_OWORD *)(a1 + 5312) = 0u;
  *(_OWORD *)(a1 + 5321) = 0u;
  pthread_mutexattr_init(&v111);
  pthread_mutexattr_setpolicy_np(&v111, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 5352), &v111);
  pthread_mutexattr_destroy(&v111);
  *(_QWORD *)(a1 + 5416) = &off_24C0B4A60;
  *(_BYTE *)(a1 + 5500) = 0;
  *(_BYTE *)(a1 + 5504) = 0;
  *(_BYTE *)(a1 + 5508) = 0;
  *(_OWORD *)(a1 + 5424) = 0u;
  *(_OWORD *)(a1 + 5440) = 0u;
  *(_OWORD *)(a1 + 5456) = 0u;
  *(_OWORD *)(a1 + 5472) = 0u;
  *(_OWORD *)(a1 + 5481) = 0u;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 32)
                                                                                           + 16))(&v111, *(_QWORD *)(a1 + 32), "WebRTC-QpParsingKillSwitch", 26);
  if (SHIBYTE(v112) < 0)
  {
    v71 = *(_QWORD *)v111.__opaque;
    if ((*(_QWORD *)v111.__opaque & 0x8000000000000000) != 0)
      goto LABEL_124;
    v70 = (int *)v111.__sig;
    if (*(_QWORD *)v111.__opaque)
    {
      if (!v111.__sig)
        goto LABEL_124;
    }
  }
  else
  {
    v70 = (int *)&v111;
    v71 = HIBYTE(v112);
  }
  if (v71 < 7)
  {
    v72 = 1;
    if ((HIBYTE(v112) & 0x80) == 0)
      goto LABEL_76;
    goto LABEL_75;
  }
  v73 = *v70;
  v74 = *(int *)((char *)v70 + 3);
  v72 = v73 != 1650552389 || v74 != 1684368482;
  if ((HIBYTE(v112) & 0x80) != 0)
LABEL_75:
    operator delete((void *)v111.__sig);
LABEL_76:
  *(_BYTE *)(a1 + 5512) = v72;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 32)
                                                                                           + 16))(&v111, *(_QWORD *)(a1 + 32), "WebRTC-SwitchEncoderOnInitializationFailures", 44);
  if (SHIBYTE(v112) < 0)
  {
    v77 = *(_QWORD *)v111.__opaque;
    if ((*(_QWORD *)v111.__opaque & 0x8000000000000000) != 0)
      goto LABEL_124;
    v76 = (_QWORD *)v111.__sig;
    if (*(_QWORD *)v111.__opaque)
    {
      if (!v111.__sig)
        goto LABEL_124;
    }
  }
  else
  {
    v76 = &v111;
    v77 = HIBYTE(v112);
  }
  if (v77 >= 8)
  {
    v78 = *v76 != 0x64656C6261736944;
    if ((HIBYTE(v112) & 0x80) != 0)
LABEL_85:
      operator delete((void *)v111.__sig);
  }
  else
  {
    v78 = 1;
    if ((HIBYTE(v112) & 0x80) != 0)
      goto LABEL_85;
  }
  *(_BYTE *)(a1 + 5513) = v78;
  v79 = *(_QWORD *)(a1 + 32);
  v111.__sig = (uint64_t)off_24C0B4170;
  *(_QWORD *)v111.__opaque = 0;
  v112 = 0;
  v113 = 0;
  HIBYTE(v114[2]) = 8;
  if (v114 <= (void **)"Disabled" && &v114[1] > (void **)"Disabled")
    goto LABEL_124;
  v115 = 0;
  strcpy((char *)v114, "Disabled");
  v111.__sig = (uint64_t)&unk_24C0B41A0;
  v99 = off_24C0B4170;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v104 = 14;
  if (v103 <= (void **)"max_core_count" && (char *)&v103[1] + 6 > "max_core_count")
    goto LABEL_124;
  strcpy((char *)v103, "max_core_count");
  v105 = 0;
  v99 = &unk_24C0B4020;
  v106 = 2;
  v110[0] = &v111;
  v110[1] = &v99;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v79 + 16))(&__p, v79, "WebRTC-VP9-LowTierOptimizations", 31);
  if ((char)v109 < 0)
  {
    v80 = v108;
    if (v108 < 0)
      goto LABEL_124;
    p_p = (char *)__p;
    if (v108)
    {
      if (!__p)
        goto LABEL_124;
    }
  }
  else
  {
    v80 = v109;
    p_p = (char *)&__p;
  }
  webrtc::ParseFieldTrial(v110, 2, p_p, v80);
  if ((char)v109 < 0)
    operator delete(__p);
  v82 = HIBYTE(v115);
  v83 = v106;
  v99 = off_24C0B4170;
  if (v104 < 0)
    operator delete(v103[0]);
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  v111.__sig = (uint64_t)off_24C0B4170;
  if (SHIBYTE(v114[2]) < 0)
    operator delete(v114[0]);
  if (*(_QWORD *)v111.__opaque)
  {
    v112 = *(__n128 (**)(uint64_t, __n128 *, __n128 *))v111.__opaque;
    operator delete(*(void **)v111.__opaque);
  }
  v84 = v83 | 0x100000000;
  if (v82)
    v84 = 0;
  *(_QWORD *)(a1 + 5516) = v84;
  v85 = *(_QWORD *)(a1 + 32);
  v111.__sig = (uint64_t)off_24C0B4170;
  *(_QWORD *)v111.__opaque = 0;
  HIBYTE(v114[2]) = 20;
  v112 = 0;
  v113 = 0;
  if (v114 <= (void **)"encoder_thread_limit" && (char *)&v114[2] + 4 > "encoder_thread_limit")
    goto LABEL_124;
  strcpy((char *)v114, "encoder_thread_limit");
  LOBYTE(v115) = 0;
  v111.__sig = (uint64_t)&unk_24C0B4110;
  LOBYTE(v116) = 0;
  BYTE4(v116) = 0;
  __p = &v111;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v85 + 16))(&v99, v85, "WebRTC-VideoEncoderSettings", 27);
  if ((SHIBYTE(v101) & 0x80000000) == 0)
  {
    v86 = HIBYTE(v101);
    v87 = (char *)&v99;
    goto LABEL_114;
  }
  v86 = (uint64_t)v100;
  if (((unint64_t)v100 & 0x8000000000000000) != 0 || (v87 = (char *)v99, v100) && !v99)
LABEL_124:
    __break(1u);
LABEL_114:
  webrtc::ParseFieldTrial(&__p, 1, v87, v86);
  if ((SHIBYTE(v101) & 0x80000000) == 0)
  {
    v88 = v116;
    v111.__sig = (uint64_t)off_24C0B4170;
    if ((SHIBYTE(v114[2]) & 0x80000000) == 0)
      goto LABEL_116;
LABEL_122:
    operator delete(v114[0]);
    v89 = a1 + 256;
    v90 = *(__n128 (**)(uint64_t, __n128 *, __n128 *))v111.__opaque;
    if (!*(_QWORD *)v111.__opaque)
      goto LABEL_118;
    goto LABEL_117;
  }
  operator delete(v99);
  v88 = v116;
  v111.__sig = (uint64_t)off_24C0B4170;
  if (SHIBYTE(v114[2]) < 0)
    goto LABEL_122;
LABEL_116:
  v89 = a1 + 256;
  v90 = *(__n128 (**)(uint64_t, __n128 *, __n128 *))v111.__opaque;
  if (*(_QWORD *)v111.__opaque)
  {
LABEL_117:
    v112 = v90;
    operator delete(v90);
  }
LABEL_118:
  *(_QWORD *)(a1 + 5524) = v88;
  *(_BYTE *)(a1 + 5536) = 0;
  *(_BYTE *)(a1 + 5584) = 0;
  *(_BYTE *)(a1 + 5592) = 0;
  *(_BYTE *)(a1 + 5640) = 0;
  v91 = operator new();
  *(_DWORD *)v91 = 0;
  *(_BYTE *)(v91 + 4) = 1;
  *(_QWORD *)(a1 + 5648) = v91;
  do
    v92 = __ldxr((unsigned int *)v91);
  while (__stxr(v92 + 1, (unsigned int *)v91));
  v93 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 5656) = v93;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 40))(*(_QWORD *)(a1 + 272), v89);
  v94 = *(_QWORD *)(a1 + 5656);
  *(_QWORD *)(a1 + 2944) = v94;
  *(_QWORD *)(*(_QWORD *)(a1 + 2912) + 96) = v94;
  *(_QWORD *)(*(_QWORD *)(a1 + 2920) + 96) = v94;
  *(_QWORD *)(*(_QWORD *)(a1 + 2936) + 96) = v94;
  v95 = *(_QWORD *)(a1 + 5656);
  v111.__sig = a1;
  v112 = absl::internal_any_invocable::LocalManagerTrivial;
  v113 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::VideoStreamEncoder(webrtc::Environment const&,unsigned int,webrtc::VideoStreamEncoderObserver *,webrtc::VideoStreamEncoderSettings const&,std::unique_ptr<webrtc::OveruseFrameDetector>,std::unique_ptr<webrtc::FrameCadenceAdapterInterface>,std::unique_ptr<webrtc::TaskQueueBase,webrtc::TaskQueueDeleter>,webrtc::VideoStreamEncoder::BitrateAllocationCallbackType,webrtc::VideoEncoderFactory::EncoderSelectorInterface *)::$_1 &&>;
  (*(void (**)(uint64_t, pthread_mutexattr_t *, void **, void **))(*(_QWORD *)v95 + 8))(v95, &v111, &v99, &__p);
  v112(1, (__n128 *)&v111, (__n128 *)&v111);
  return a1;
}

void webrtc::VideoStreamEncoder::~VideoStreamEncoder(webrtc::VideoStreamEncoder *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  webrtc::EncoderBitrateAdjuster *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;

  *(_QWORD *)this = &off_24C0C4AB8;
  *((_QWORD *)this + 1) = &unk_24C0C4B50;
  *((_QWORD *)this + 2) = &unk_24C0C4B80;
  (***((void (****)(_QWORD))this + 707))(*((_QWORD *)this + 707));
  *((_QWORD *)this + 707) = 0;
  v2 = *((_QWORD *)this + 706);
  *(_BYTE *)(v2 + 4) = 0;
  do
  {
    v3 = __ldaxr((unsigned int *)v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)v2));
  if (!v4)
    MEMORY[0x20BD0ADEC]();
  webrtc::H265BitstreamParser::~H265BitstreamParser((webrtc::VideoStreamEncoder *)((char *)this + 5416));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 5352));
  webrtc::H265BitstreamParser::~H265BitstreamParser((webrtc::VideoStreamEncoder *)((char *)this + 5256));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 5192));
  webrtc::H265BitstreamParser::~H265BitstreamParser((webrtc::VideoStreamEncoder *)((char *)this + 5096));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 5032));
  *((_QWORD *)this + 616) = &off_24C0B4A00;
  pthread_mutex_destroy((pthread_mutex_t *)this + 76);
  *((_QWORD *)this + 595) = &off_24C0B4A00;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 4696));
  *((_QWORD *)this + 574) = &off_24C0B4A00;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 4528));
  v5 = (void *)*((_QWORD *)this + 560);
  if (v5)
  {
    *((_QWORD *)this + 561) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 544);
  if (v6)
  {
    v7 = *((_QWORD *)this + 545);
    v8 = (void *)*((_QWORD *)this + 544);
    if (v7 != v6)
    {
      do
      {
        v10 = *(_QWORD *)(v7 - 8);
        v7 -= 8;
        v9 = v10;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 544);
    }
    *((_QWORD *)this + 545) = v6;
    operator delete(v8);
  }
  webrtc::VideoStreamEncoderResourceManager::~VideoStreamEncoderResourceManager((webrtc::VideoStreamEncoder *)((char *)this + 2864));
  v11 = (void *)*((_QWORD *)this + 355);
  if (v11)
  {
    *((_QWORD *)this + 356) = v11;
    operator delete(v11);
  }
  v12 = *((_QWORD *)this + 354);
  *((_QWORD *)this + 354) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 353);
  *((_QWORD *)this + 353) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (_QWORD *)*((_QWORD *)this + 352);
  *((_QWORD *)this + 352) = 0;
  if (v14)
  {
    v15 = (void *)v14[23];
    if (v15)
    {
      v14[24] = v15;
      operator delete(v15);
    }
    v16 = (void *)v14[20];
    if (v16)
    {
      v14[21] = v16;
      operator delete(v16);
    }
    v17 = (void *)v14[2];
    if (v17)
    {
      v14[3] = v17;
      operator delete(v17);
    }
    MEMORY[0x20BD0ADEC](v14, 0x10E0C40A6556F9CLL);
  }
  *((_QWORD *)this + 338) = &off_24C0C4E20;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 2712));
  v18 = *((_QWORD *)this + 329);
  if (v18)
  {
    std::vector<webrtc::FrameEncodeMetadataWriter::TimingFramesLayerInfo>::__base_destruct_at_end[abi:sn180100]((uint64_t)this + 2632, v18);
    operator delete(*((void **)this + 329));
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 2160));
  v19 = (void *)*((_QWORD *)this + 267);
  if (v19)
  {
    *((_QWORD *)this + 268) = v19;
    operator delete(v19);
  }
  v20 = (webrtc::EncoderBitrateAdjuster *)*((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = 0;
  if (v20)
  {
    webrtc::EncoderBitrateAdjuster::~EncoderBitrateAdjuster(v20);
    MEMORY[0x20BD0ADEC]();
  }
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)this + 174);
  if (*((_BYTE *)this + 1280))
  {
    v21 = *((_QWORD *)this + 156);
    if (v21)
    {
      do
      {
        v22 = __ldaxr((unsigned int *)v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unsigned int *)v21));
      if (!v23)
      {
        v24 = *(_QWORD *)(v21 + 8);
        if (v24)
        {
          v25 = *(_QWORD *)(v21 + 16);
          v26 = *(void **)(v21 + 8);
          if (v25 != v24)
          {
            do
            {
              v27 = *(void **)(v25 - 96);
              if (v27)
              {
                *(_QWORD *)(v25 - 88) = v27;
                operator delete(v27);
              }
              v25 -= 104;
            }
            while (v25 != v24);
            v26 = *(void **)(v21 + 8);
          }
          *(_QWORD *)(v21 + 16) = v24;
          operator delete(v26);
        }
        MEMORY[0x20BD0ADEC](v21, 0x1020C40E72D6CFBLL);
      }
    }
    v28 = *((_QWORD *)this + 134);
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  if (*((_QWORD *)this + 65))
    _ZN4absl23inlined_vector_internal7StorageINS_12AnyInvocableIFvN6webrtc8RTCErrorEOEEELm2ENSt3__19allocatorIS6_EEE15DestroyContentsEv((_QWORD *)this + 65);
  v29 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoStreamEncoder *)((char *)this + 280));
  v31 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = (unsigned int *)*((_QWORD *)this + 3);
  if (v33)
  {
    v34 = v33 + 2;
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
  }
}

{
  webrtc::VideoStreamEncoder::~VideoStreamEncoder(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::VideoStreamEncoder::~VideoStreamEncoder(webrtc::VideoStreamEncoder *this)
{
  webrtc::VideoStreamEncoder::~VideoStreamEncoder((webrtc::VideoStreamEncoder *)((char *)this - 8));
}

{
  webrtc::VideoStreamEncoder::~VideoStreamEncoder((webrtc::VideoStreamEncoder *)((char *)this - 16));
}

{
  webrtc::VideoStreamEncoder::~VideoStreamEncoder((webrtc::VideoStreamEncoder *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::VideoStreamEncoder::~VideoStreamEncoder((webrtc::VideoStreamEncoder *)((char *)this - 16));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::VideoStreamEncoder::Stop(webrtc::VideoStreamEncoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  _QWORD v10[2];
  uint64_t (*v11)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v12)(uint64_t **);
  pthread_mutex_t v13;
  pthread_cond_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 548);
  *((_QWORD *)this + 548) = 0;
  if (v2)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 24))(v2, *((_QWORD *)this + 547));
  rtc::Event::Event((rtc::Event *)&v13, 0, 0);
  v3 = *((_QWORD *)this + 707);
  v4 = operator new();
  *(_QWORD *)v4 = this;
  *(_QWORD *)(v4 + 16) = &v13;
  *(_BYTE *)(v4 + 8) = 1;
  v10[0] = v4;
  v11 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::VideoStreamEncoder::Stop(void)::$_2>;
  v12 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::Stop(void)::$_2 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v10, &v9, &v8);
  v11(1, v10, v10);
  v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
  v6.var0 = 3000000;
  rtc::Event::Wait((rtc::Event *)&v13, v5, v6);
  pthread_mutex_destroy(&v13);
  return pthread_cond_destroy(&v14);
}

uint64_t webrtc::VideoStreamEncoder::SetFecControllerOverride(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  char v5;
  _QWORD v6[2];
  __n128 (*v7)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v8)(uint64_t *);

  v2 = *(_QWORD *)(a1 + 5656);
  v6[0] = a1;
  v6[1] = a2;
  v7 = absl::internal_any_invocable::LocalManagerTrivial;
  v8 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::SetFecControllerOverride(webrtc::FecControllerOverride *)::$_0 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v2 + 8))(v2, v6, &v5, &v4);
  return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *))v7)(1, v6, v6);
}

uint64_t webrtc::VideoStreamEncoder::AddAdaptationResource(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;
  _QWORD v7[2];
  uint64_t (*v8)(char, __int128 *, _OWORD *);
  uint64_t (*v9)(uint64_t);

  v2 = *(_QWORD *)(a1 + 5656);
  v3 = *a2;
  *a2 = 0;
  v7[0] = a1;
  v7[1] = v3;
  v8 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::VideoStreamEncoder::AddAdaptationResource(webrtc::scoped_refptr<webrtc::Resource>)::$_1>;
  v9 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::AddAdaptationResource(webrtc::scoped_refptr<webrtc::Resource>)::$_1 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v2 + 8))(v2, v7, &v6, &v5);
  return v8(1, (__int128 *)v7, v7);
}

uint64_t webrtc::VideoStreamEncoder::GetAdaptationResources@<X0>(webrtc::VideoStreamEncoder *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  _QWORD v11[2];
  __n128 (*v12)(char, void **, _OWORD *);
  uint64_t (*v13)(uint64_t *);
  pthread_mutex_t v14;
  pthread_cond_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  rtc::Event::Event((rtc::Event *)&v14, 0, 0);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *((_QWORD *)this + 707);
  v5 = operator new(0x18uLL);
  *v5 = this;
  v5[1] = a2;
  v5[2] = &v14;
  v11[0] = v5;
  v11[1] = 24;
  v12 = absl::internal_any_invocable::RemoteManagerTrivial;
  v13 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::GetAdaptationResources(void)::$_1 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v11, &v10, &v9);
  v12(1, (void **)v11, v11);
  v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
  v7.var0 = 3000000;
  rtc::Event::Wait((rtc::Event *)&v14, v6, v7);
  pthread_mutex_destroy(&v14);
  return pthread_cond_destroy(&v15);
}

uint64_t webrtc::VideoStreamEncoder::SetSource(uint64_t a1, uint64_t a2, int *a3)
{
  webrtc::VideoSourceSinkController *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  void *__p;
  void *v19;

  v6 = (webrtc::VideoSourceSinkController *)(a1 + 4376);
  v7 = *(_QWORD *)(a1 + 4384);
  *(_QWORD *)(a1 + 4384) = a2;
  if (v7 != a2 && v7 != 0)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 24))(v7, *(_QWORD *)v6);
  if (a2)
  {
    v9 = *(_QWORD *)v6;
    webrtc::VideoSourceSinkController::CurrentSettingsToSinkWants(v6, (uint64_t)&v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 16))(a2, v9, &v15);
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2712));
  *(_BYTE *)(a1 + 2784) = a2 != 0;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2712));
  v10 = *(_QWORD *)(a1 + 5656);
  v11 = *a3;
  v15 = a1;
  v16 = v11;
  v17 = absl::internal_any_invocable::LocalManagerTrivial;
  __p = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::SetSource(rtc::VideoSourceInterface<webrtc::VideoFrame> *,webrtc::DegradationPreference const&)::$_1 &&>;
  (*(void (**)(uint64_t, uint64_t *, char *, char *))(*(_QWORD *)v10 + 8))(v10, &v15, &v14, &v13);
  return ((uint64_t (*)(uint64_t, uint64_t *, uint64_t *))v17)(1, &v15, &v15);
}

uint64_t webrtc::VideoStreamEncoder::SetSink(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  char v7;
  char v8;
  _QWORD v9[2];
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  void *__p;
  void *v12;

  *(_BYTE *)(a1 + 4472) = a3;
  if (*(_QWORD *)(a1 + 4384))
  {
    webrtc::VideoSourceSinkController::CurrentSettingsToSinkWants((webrtc::VideoSourceSinkController *)(a1 + 4376), (uint64_t)v9);
    (*(void (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(a1 + 4384) + 16))(*(_QWORD *)(a1 + 4384), *(_QWORD *)(a1 + 4376), v9);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
  }
  v5 = *(_QWORD *)(a1 + 5656);
  v9[0] = a1;
  v9[1] = a2;
  v10 = absl::internal_any_invocable::LocalManagerTrivial;
  __p = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::SetSink(webrtc::VideoStreamEncoderInterface::EncoderSink *,BOOL)::$_1 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v5 + 8))(v5, v9, &v8, &v7);
  return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *))v10)(1, v9, v9);
}

uint64_t webrtc::VideoStreamEncoder::SetStartBitrate(webrtc::VideoStreamEncoder *this, int a2)
{
  uint64_t v2;
  char v4;
  char v5;
  webrtc::VideoStreamEncoder *v6;
  int v7;
  __n128 (*v8)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v9)(uint64_t *);

  v2 = *((_QWORD *)this + 707);
  v6 = this;
  v7 = a2;
  v8 = absl::internal_any_invocable::LocalManagerTrivial;
  v9 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::SetStartBitrate(int)::$_0 &&>;
  (*(void (**)(uint64_t, webrtc::VideoStreamEncoder **, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v6, &v5, &v4);
  return ((uint64_t (*)(uint64_t, webrtc::VideoStreamEncoder **, webrtc::VideoStreamEncoder **))v8)(1, &v6, &v6);
}

void webrtc::VideoStreamEncoder::ConfigureEncoder(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  void (*v14)(uint64_t, _BYTE *, _BYTE *);
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[3];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v16 = *a2;
  v17 = *(_OWORD *)(a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v3 = *((_QWORD *)a2 + 3);
  v4 = (_QWORD *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 3) = 0;
  v18 = v3;
  v19 = v4;
  v5 = a2 + 10;
  v6 = *((_QWORD *)a2 + 5);
  v7 = *((_QWORD *)a2 + 6);
  v20[0] = v6;
  v20[1] = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v20;
    *((_QWORD *)a2 + 4) = v5;
    *v5 = 0;
    *((_QWORD *)a2 + 6) = 0;
  }
  else
  {
    v19 = v20;
  }
  v20[2] = *((_QWORD *)a2 + 7);
  v8 = *((_OWORD *)a2 + 5);
  v21 = *((_OWORD *)a2 + 4);
  v22 = v8;
  v23 = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 7) = 0;
  v9 = *(_OWORD *)(a2 + 26);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  v24 = v9;
  v25 = *(_OWORD *)(a2 + 30);
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  v10 = a2[34];
  v27 = *((_BYTE *)a2 + 140);
  v26 = v10;
  v11 = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = 0;
  v29 = *(_OWORD *)(a2 + 38);
  v30 = *(_OWORD *)(a2 + 42);
  v12 = *((_QWORD *)a2 + 23);
  v28 = v11;
  v31 = v12;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  v32 = *((_OWORD *)a2 + 12);
  v14 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
  v15 = 0;
  (*(void (**)(uint64_t, int *, uint64_t, _BYTE *))(*(_QWORD *)a1 + 96))(a1, &v16, a3, v13);
  v14(1, v13, v13);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v16);
}

void webrtc::VideoStreamEncoder::ConfigureEncoder(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, double a5, int32x2_t a6, int32x2_t a7)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BOOL4 v14;
  unsigned __int8 v15;
  int32x2_t v16;
  int v17;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  char v48;
  _QWORD v49[2];
  uint64_t (*v50)(uint64_t, uint64_t *, _QWORD *);
  void (*v51)(uint64_t **);
  uint64_t v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  int v65;
  char v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  _BYTE v73[16];
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v11 = *((_QWORD *)a2 + 21);
  v12 = *((_QWORD *)a2 + 22);
  v13 = a2 + 42;
  if (v11 == v12)
  {
    v15 = 0;
    v14 = 0;
    v16 = 0;
    v17 = -1;
  }
  else
  {
    LOBYTE(v14) = 0;
    v15 = 0;
    v16 = 0;
    v17 = -1;
    do
    {
      v14 = (*(_BYTE *)(v11 + 82) | v14) != 0;
      if (*(_BYTE *)(v11 + 82) && *(_DWORD *)(v11 + 16) > v17)
        v17 = *(_DWORD *)(v11 + 16);
      if (*(_BYTE *)(v11 + 92))
      {
        a6.i32[0] = 0;
        a7.i32[0] = v15;
        a6 = vdup_lane_s32(vceq_s32(a7, a6), 0);
        a7 = *(int32x2_t *)(v11 + 84);
        v16 = (int32x2_t)vbsl_s8((int8x8_t)a6, (int8x8_t)a7, (int8x8_t)vmax_s32(a7, v16));
        v15 = 1;
      }
      v11 += 96;
    }
    while (v11 != v12);
  }
  if (v15 && *(_BYTE *)(a1 + 4516))
  {
    if (v16.i32[0] != *(_DWORD *)(a1 + 4508) || v16.i32[1] != *(_DWORD *)(a1 + 4512))
      goto LABEL_22;
  }
  else if ((v15 != 0) != (*(_BYTE *)(a1 + 4516) != 0))
  {
LABEL_22:
    *(int32x2_t *)(a1 + 4508) = v16;
    *(_BYTE *)(a1 + 4516) = v15;
    v20 = (double)v17;
    if (v17 < 0)
      v20 = 0.0;
    *(double *)(a1 + 4456) = v20;
    *(_BYTE *)(a1 + 4464) = v17 >= 0;
    *(_BYTE *)(a1 + 4504) = v14;
    if (*(_QWORD *)(a1 + 4384))
    {
      webrtc::VideoSourceSinkController::CurrentSettingsToSinkWants((webrtc::VideoSourceSinkController *)(a1 + 4376), (uint64_t)&v52);
      (*(void (**)(_QWORD, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 4384) + 16))(*(_QWORD *)(a1 + 4384), *(_QWORD *)(a1 + 4376), &v52);
      if (*((_QWORD *)&v54 + 1))
      {
        v55 = *((_QWORD *)&v54 + 1);
        operator delete(*((void **)&v54 + 1));
      }
    }
    goto LABEL_27;
  }
  if (((v14 ^ (*(_BYTE *)(a1 + 4504) != 0)) & 1) != 0)
    goto LABEL_22;
  v19 = *(double *)(a1 + 4456);
  if (!*(_BYTE *)(a1 + 4464))
    v19 = -1.0;
  if (v19 != (double)v17)
    goto LABEL_22;
LABEL_27:
  v21 = *(_QWORD *)(a1 + 5656);
  v52 = a1;
  v46 = v21;
  v53 = *a2;
  v54 = *(_OWORD *)(a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v22 = *((_QWORD *)a2 + 3);
  v23 = (uint64_t *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 3) = 0;
  v55 = v22;
  v56 = v23;
  v24 = a2 + 10;
  v25 = *((_QWORD *)a2 + 5);
  v26 = *((_QWORD *)a2 + 6);
  v57 = v25;
  v58 = v26;
  if (v26)
  {
    *(_QWORD *)(v25 + 16) = &v57;
    *((_QWORD *)a2 + 4) = v24;
    *v24 = 0;
    *((_QWORD *)a2 + 6) = 0;
  }
  else
  {
    v56 = &v57;
  }
  v59 = *((_QWORD *)a2 + 7);
  v27 = *((_OWORD *)a2 + 5);
  v60 = *((_OWORD *)a2 + 4);
  v61 = v27;
  v62 = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 7) = 0;
  v28 = *(_OWORD *)(a2 + 26);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  v29 = *(_OWORD *)(a2 + 30);
  v63 = v28;
  v64 = v29;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  v30 = a2[34];
  v66 = *((_BYTE *)a2 + 140);
  v65 = v30;
  v31 = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = 0;
  v67 = v31;
  v32 = *(_OWORD *)(a2 + 42);
  v68 = *(_OWORD *)(a2 + 38);
  v69 = v32;
  v70 = *((_QWORD *)a2 + 23);
  *v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  v71 = *((_OWORD *)a2 + 12);
  v72 = a3;
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a4 + 16))(0, a4, v73);
  v74 = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a4 + 24) = 0;
  v33 = operator new();
  v34 = v33;
  *(_QWORD *)v33 = v52;
  *(_DWORD *)(v33 + 8) = v53;
  *(_OWORD *)(v33 + 16) = v54;
  v35 = v55;
  v54 = 0uLL;
  v55 = 0;
  v37 = v56;
  v36 = v57;
  *(_QWORD *)(v33 + 32) = v35;
  *(_QWORD *)(v33 + 40) = v37;
  *(_QWORD *)(v33 + 48) = v36;
  v38 = v33 + 48;
  v39 = v58;
  *(_QWORD *)(v33 + 56) = v58;
  if (v39)
  {
    *(_QWORD *)(v36 + 16) = v38;
    v56 = &v57;
    v57 = 0;
    v58 = 0;
  }
  else
  {
    *(_QWORD *)(v33 + 40) = v38;
  }
  *(_QWORD *)(v33 + 64) = v59;
  v40 = v61;
  *(_OWORD *)(v33 + 72) = v60;
  *(_OWORD *)(v33 + 88) = v40;
  *(_QWORD *)(v33 + 104) = v62;
  v59 = 0;
  v41 = v63;
  v42 = v64;
  v63 = 0uLL;
  *(_OWORD *)(v33 + 112) = v41;
  *(_OWORD *)(v33 + 128) = v42;
  v64 = 0uLL;
  v43 = v65;
  *(_BYTE *)(v33 + 148) = v66;
  *(_DWORD *)(v33 + 144) = v43;
  v44 = v67;
  v67 = 0;
  *(_QWORD *)(v33 + 152) = v44;
  v45 = v69;
  *(_OWORD *)(v33 + 160) = v68;
  *(_OWORD *)(v33 + 176) = v45;
  *(_QWORD *)(v33 + 192) = v70;
  v69 = 0uLL;
  v70 = 0;
  *(_OWORD *)(v33 + 200) = v71;
  *(_QWORD *)(v33 + 216) = v72;
  ((void (*)(_QWORD, _BYTE *, uint64_t))v74)(0, v73, v33 + 224);
  *(_OWORD *)(v34 + 240) = v74;
  *(_QWORD *)&v74 = absl::internal_any_invocable::EmptyManager;
  *((_QWORD *)&v74 + 1) = 0;
  v49[0] = v34;
  v50 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc18VideoStreamEncoder16ConfigureEncoderENS2_18VideoEncoderConfigEmNS_12AnyInvocableIFvNS2_8RTCErrorEOEEEE3__1EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v51 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc18VideoStreamEncoder16ConfigureEncoderENS2_18VideoEncoderConfigEmNS_12AnyInvocableIFvNS2_8RTCErrorEOEEEE3__1JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v46 + 8))(v46, v49, &v48, &v47);
  v50(1, v49, v49);
  ((void (*)(uint64_t, _BYTE *, _BYTE *))v74)(1, v73, v73);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v53);
}

void webrtc::VideoStreamEncoder::ReconfigureEncoder(webrtc::VideoStreamEncoder *this, uint64_t a2)
{
  unint64_t v2;
  int64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string::size_type v15;
  uint64_t v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  int *v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  char v49;
  unint64_t v50;
  std::string *v51;
  char v52;
  unsigned int *v53;
  unsigned int v54;
  int AlignmentAndMaybeAdjustScaleFactors;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *i;
  char v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  __n128 v70;
  __n128 v71;
  int v72;
  int v73;
  const void *v74;
  _QWORD *v75;
  std::string::size_type size;
  int *v77;
  int v78;
  int v79;
  int *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  int v86;
  std::string::size_type v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  BOOL v92;
  int *v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  std::string::size_type v105;
  std::string::size_type v106;
  int64_t v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  std::string::size_type v111;
  int v112;
  int v113;
  unint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  const webrtc::VideoCodec *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  uint64_t v149;
  int v150;
  int64_t v151;
  _BOOL4 v152;
  int v153;
  unint64_t v154;
  unsigned __int8 *v155;
  int v156;
  int v157;
  unint64_t v158;
  unsigned __int8 *v159;
  uint64_t v160;
  int v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  unsigned __int8 *v165;
  int v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  unint64_t v171;
  unsigned __int8 *v172;
  uint64_t v173;
  int v174;
  int v175;
  int64x2_t *SingleActiveLayerPixels;
  __n128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unsigned __int8 *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  __int32 v198;
  unint64_t *v199;
  unint64_t *v200;
  unsigned __int32 *v201;
  int v202;
  __int32 v203;
  signed __int32 v204;
  char *v205;
  int v206;
  int *v207;
  int v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  _BYTE *v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  size_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  size_t v233;
  size_t v234;
  size_t v235;
  size_t v236;
  size_t v237;
  size_t v238;
  size_t v239;
  size_t v240;
  unint64_t v241;
  const char *v242;
  size_t v243;
  uint64_t v244;
  uint64_t v245;
  size_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  size_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  size_t v256;
  size_t v257;
  size_t v258;
  size_t v259;
  size_t v260;
  size_t v261;
  size_t v262;
  int v263;
  unint64_t v264;
  const char *v265;
  size_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  char *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  char *v283;
  char *v284;
  char *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  char *v291;
  char *v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  __int128 *v298;
  uint64_t v299;
  __int128 v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int *v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void (*v308)(uint64_t, uint64_t *, _QWORD *);
  unsigned int *v309;
  unsigned int v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  int v316;
  const webrtc::VideoCodec *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  unint64_t v339;
  char *v340;
  unint64_t v341;
  _OWORD *v342;
  __int128 v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  float v348;
  float v350;
  BOOL v351;
  float v352;
  unsigned int v353;
  float v354;
  int v355;
  float v356;
  float v357;
  _QWORD *v358;
  unint64_t v359;
  BOOL v360;
  uint64_t v362;
  uint64_t v363;
  webrtc::EncoderBitrateAdjuster *v364;
  __n128 v365;
  uint64_t v366;
  uint64_t v367;
  const VideoCodec *v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  _BYTE *v372;
  unint64_t v373;
  unint64_t v374;
  std::string::size_type v375;
  int MaxBitrate;
  std::string::size_type v377;
  int v378;
  _BOOL8 v379;
  _BYTE *v380;
  int64_t v381;
  int v382;
  uint64_t v383;
  BOOL v384;
  char v385;
  int v386;
  unsigned int v387;
  unsigned int v388;
  unint64_t v389;
  unint64_t v390;
  int v391;
  unint64_t v392;
  void (*v393)(unint64_t, _BYTE *);
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  int v407;
  int v408;
  int v409;
  _DWORD *v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _BYTE *v419;
  _BYTE *v420;
  uint64_t v421;
  _BYTE *v422;
  _OWORD *v423;
  unsigned __int8 *v424;
  int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  uint64_t *v429;
  uint64_t v430;
  char v431;
  char v432;
  unint64_t v433;
  int v434;
  int v435;
  _DWORD *v436;
  __int16 v437;
  void *v438;
  std::string::size_type v439;
  std::string::size_type v440;
  __n128 v441;
  uint64_t v442;
  _QWORD v443[2];
  void (*v444)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v445;
  uint64_t v446[2];
  __int128 v447;
  std::string *v448;
  __int128 v449;
  std::string __p;
  uint64_t v451;
  _BYTE v452[376];
  void *v453[3];
  char *v454;
  char v455;
  char v456;
  std::string v457[7];
  void *v458[2];
  uint64_t v459;
  unsigned __int8 v460;
  unsigned __int8 v461;
  _OWORD v462[24];
  uint64_t v463;

  v5 = MEMORY[0x24BDAC7A8](this, a2);
  v463 = *MEMORY[0x24BDAC8D0];
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0
    && (v2 = (unint64_t)v457,
        webrtc::VideoEncoderConfig::ToString(v5 + 280, (char *)v457),
        v430 = 7849,
        rtc::webrtc_logging_impl::Log("\r\t\t\t\n\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc"), SHIBYTE(v457[0].__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(v457[0].__r_.__value_.__l.__data_);
    v13 = *(unsigned __int8 *)(v5 + 517);
    if (!*(_BYTE *)(v5 + 517))
      goto LABEL_15;
  }
  else
  {
    v13 = *(unsigned __int8 *)(v5 + 517);
    if (!*(_BYTE *)(v5 + 517))
      goto LABEL_15;
  }
  v14 = *(_QWORD *)(v5 + 488);
  *(_QWORD *)(v5 + 488) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  LODWORD(v2) = v5 + 288;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 96) + 24))(&v451, *(_QWORD *)(v5 + 96), v5 + 24, v5 + 288);
  webrtc::MaybeCreateFrameDumpingEncoderWrapper(&v451, *(_QWORD *)(v5 + 32), (uint64_t *)v457);
  v15 = v457[0].__r_.__value_.__r.__words[0];
  v457[0].__r_.__value_.__r.__words[0] = 0;
  v16 = *(_QWORD *)(v5 + 488);
  *(_QWORD *)(v5 + 488) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v457[0].__r_.__value_.__r.__words[0];
    v457[0].__r_.__value_.__r.__words[0] = 0;
    if (v17)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v451;
  v451 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(_QWORD *)(v5 + 488);
  if (!v19)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      webrtc::SdpVideoFormat::ToString((webrtc::SdpVideoFormat *)(v5 + 288), v457);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
      if (SHIBYTE(v457[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v457[0].__r_.__value_.__l.__data_);
    }
    webrtc::VideoStreamEncoder::RequestEncoderSwitch((webrtc::VideoStreamEncoder *)v5);
    return;
  }
  v20 = *(_QWORD *)(v5 + 240);
  if (v20)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v20 + 16))(*(_QWORD *)(v5 + 240), v5 + 288);
    v19 = *(_QWORD *)(v5 + 488);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, *(_QWORD *)(v5 + 1352));
LABEL_15:
  v435 = v13;
  v21 = (_BYTE *)(v5 + 4320);
  v22 = (unsigned __int8 *)v462;
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v5 + 488) + 96))(v457);
  v23 = (int *)(v5 + 280);
  webrtc::AlignmentAdjuster::GetAlignmentAndMaybeAdjustScaleFactors((uint64_t)v457, (_QWORD *)(v5 + 280), 0, 0);
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v457[0].__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  v24 = *(_QWORD *)(v5 + 384);
  v436 = (_DWORD *)(v5 + 280);
  if (!v24)
  {
    v25 = *(_DWORD *)(v5 + 416);
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v5 + 488) + 96))(v457);
    v26 = *(_OWORD *)(v5 + 5552);
    v462[0] = *(_OWORD *)(v5 + 5536);
    v462[1] = v26;
    v462[2] = *(_OWORD *)(v5 + 5568);
    v27 = *(_OWORD *)(v5 + 5608);
    *(_OWORD *)((char *)&v462[3] + 8) = *(_OWORD *)(v5 + 5592);
    LOBYTE(v462[3]) = *(_BYTE *)(v5 + 5584);
    *(_OWORD *)((char *)&v462[4] + 8) = v27;
    *(_OWORD *)((char *)&v462[5] + 8) = *(_OWORD *)(v5 + 5624);
    BYTE8(v462[6]) = *(_BYTE *)(v5 + 5640);
    v28 = (char *)operator new(0x70uLL);
    v2 = (unint64_t)v28;
    v29 = v462[5];
    *((_OWORD *)v28 + 4) = v462[4];
    *((_OWORD *)v28 + 5) = v29;
    *(_OWORD *)(v28 + 90) = *(_OWORD *)((char *)&v462[5] + 10);
    v30 = v462[1];
    *(_OWORD *)v28 = v462[0];
    *((_OWORD *)v28 + 1) = v30;
    v31 = v462[3];
    *((_OWORD *)v28 + 2) = v462[2];
    *((_OWORD *)v28 + 3) = v31;
    if (v28[48])
    {
      v32 = *(_QWORD *)(v5 + 5536);
      v33 = *(unsigned __int8 *)(v5 + 5544);
      *(unsigned __int32 *)((char *)v441.n128_u32 + 3) = *(_DWORD *)(v5 + 5548);
      v441.n128_u32[0] = *(_DWORD *)(v5 + 5545);
      v34 = *(_QWORD *)(v5 + 5552);
      v35 = *(unsigned __int8 *)(v5 + 5560);
      *(_DWORD *)((char *)v453 + 3) = *(_DWORD *)(v5 + 5564);
      LODWORD(v453[0]) = *(_DWORD *)(v5 + 5561);
      v4 = *(double *)(v5 + 5568);
      LODWORD(v23) = *(unsigned __int8 *)(v5 + 5576);
      *(_DWORD *)((char *)&v448 + 3) = *(_DWORD *)(v5 + 5580);
      LODWORD(v448) = *(_DWORD *)(v5 + 5577);
      if (v28[104])
      {
        if (v33)
        {
          if (v28[64])
            v36 = *((_QWORD *)v28 + 7);
          else
            v36 = -1;
          if (v36 < v32)
            v32 = v36;
          v37 = v32 >> 8;
          v432 = 1;
          if (v35)
          {
LABEL_27:
            if (v28[80])
              v38 = *((_QWORD *)v28 + 9);
            else
              v38 = -1;
            if (v38 < v34)
              v34 = v38;
            v431 = 1;
            v433 = v34;
            if ((_DWORD)v23)
              goto LABEL_33;
LABEL_49:
            v4 = *((double *)v28 + 11);
            LOBYTE(v23) = v28[96];
            v3 = 1;
            goto LABEL_51;
          }
        }
        else
        {
          v32 = *((_QWORD *)v28 + 7);
          v37 = v32 >> 8;
          v432 = v28[64];
          if (v35)
            goto LABEL_27;
        }
        v431 = v28[80];
        v433 = *((_QWORD *)v28 + 9);
        if ((_DWORD)v23)
        {
LABEL_33:
          v39 = *((double *)v28 + 11);
          if (!v28[96])
            v39 = 1.79769313e308;
          if (v39 < v4)
            v4 = v39;
          LOBYTE(v23) = 1;
          v3 = 1;
          goto LABEL_51;
        }
        goto LABEL_49;
      }
      v431 = v35;
      v432 = v33;
      v433 = v34;
      v37 = v32 >> 8;
      v3 = 1;
    }
    else if (v28[104])
    {
      v32 = *((_QWORD *)v28 + 7);
      v37 = v32 >> 8;
      v47 = v28[64];
      v441.n128_u32[0] = *(_DWORD *)(v28 + 65);
      *(unsigned __int32 *)((char *)v441.n128_u32 + 3) = *((_DWORD *)v28 + 17);
      v433 = *((_QWORD *)v28 + 9);
      v431 = v28[80];
      v432 = v47;
      LODWORD(v453[0]) = *(_DWORD *)(v28 + 81);
      *(_DWORD *)((char *)v453 + 3) = *((_DWORD *)v28 + 21);
      v4 = *((double *)v28 + 11);
      *(_DWORD *)((char *)&v448 + 3) = *((_DWORD *)v28 + 25);
      LODWORD(v448) = *(_DWORD *)(v28 + 97);
      v3 = 1;
      LOBYTE(v23) = v28[96];
    }
    else
    {
      v3 = 0;
      LOBYTE(v32) = 0;
      v37 = 0;
    }
LABEL_51:
    v13 = operator new();
    if (*(char *)(v5 + 311) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v452, *(const std::string::value_type **)(v5 + 288), *(_QWORD *)(v5 + 296));
    }
    else
    {
      *(_OWORD *)v452 = *(_OWORD *)(v5 + 288);
      *(_QWORD *)&v452[16] = *(_QWORD *)(v5 + 304);
    }
    v48 = *(_DWORD *)(v5 + 484);
    v49 = *(_BYTE *)(v5 + 480);
    v50 = v32 | (v37 << 8);
    *(_QWORD *)v13 = &unk_24C0B3CD8;
    v51 = (std::string *)(v13 + 8);
    v52 = v452[23];
    if ((v452[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v51, *(const std::string::value_type **)v452, *(std::string::size_type *)&v452[8]);
      v52 = v452[23];
    }
    else
    {
      *(_OWORD *)&v51->__r_.__value_.__l.__data_ = *(_OWORD *)v452;
      *(_QWORD *)(v13 + 24) = *(_QWORD *)&v452[16];
    }
    *(_DWORD *)(v13 + 32) = v48;
    *(_BYTE *)(v13 + 36) = v25 == 1;
    *(_BYTE *)(v13 + 37) = v49;
    *(_DWORD *)(v13 + 40) = v457[0].__r_.__value_.__r.__words[2];
    *(_QWORD *)(v13 + 48) = v50;
    *(_BYTE *)(v13 + 56) = v432;
    *(_DWORD *)(v13 + 57) = v441.n128_u32[0];
    *(_DWORD *)(v13 + 60) = *(unsigned __int32 *)((char *)v441.n128_u32 + 3);
    *(_QWORD *)(v13 + 64) = v433;
    *(_BYTE *)(v13 + 72) = v431;
    *(_DWORD *)(v13 + 73) = v453[0];
    *(_DWORD *)(v13 + 76) = *(_DWORD *)((char *)v453 + 3);
    *(double *)(v13 + 80) = v4;
    *(_BYTE *)(v13 + 88) = (_BYTE)v23;
    *(_DWORD *)(v13 + 89) = (_DWORD)v448;
    *(_DWORD *)(v13 + 92) = *(_DWORD *)((char *)&v448 + 3);
    *(_BYTE *)(v13 + 96) = v3;
    if (v52 < 0)
      operator delete(*(void **)v452);
    *(_QWORD *)v13 = off_24C0C4C08;
    *(_DWORD *)(v13 + 104) = 0;
    v53 = (unsigned int *)(v13 + 104);
    v21 = (_BYTE *)(v5 + 4320);
    v23 = (int *)(v5 + 280);
    v22 = (unsigned __int8 *)v462;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
    operator delete((void *)v2);
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v457[0].__r_.__value_.__l.__data_);
    if (!*(_BYTE *)(v5 + 604))
      goto LABEL_641;
    (*(void (**)(std::string *__return_ptr, unint64_t, _QWORD, _QWORD, _QWORD, _DWORD *))(*(_QWORD *)v13 + 32))(v457, v13, *(_QWORD *)(v5 + 32), *(unsigned int *)(v5 + 592), *(unsigned int *)(v5 + 596), v436);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p = v457[0];
    (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_65:
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v5 + 488) + 96))(v457);
    AlignmentAndMaybeAdjustScaleFactors = webrtc::AlignmentAdjuster::GetAlignmentAndMaybeAdjustScaleFactors((uint64_t)v457, v23, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5), 1);
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v457[0].__r_.__value_.__l.__data_);
    v60 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
    {
      for (i = (_QWORD *)(__p.__r_.__value_.__r.__words[0] + 96); i != (_QWORD *)__p.__r_.__value_.__l.__size_; i += 12)
      {
        if (*v60 >= *i)
          v62 = 1;
        else
          v62 = -1;
        if (*v60 == *i)
        {
          v63 = v60[1];
          v64 = i[1];
          v65 = v63 == v64;
          v62 = v63 >= v64 ? 1 : -1;
          if (v65)
            v62 = 0;
        }
        if (v62 < 0)
          v60 = i;
      }
    }
    if (!*(_BYTE *)(v5 + 604))
      goto LABEL_641;
    v66 = *(_DWORD *)(v5 + 592);
    v67 = v66 - *(_DWORD *)v60;
    if (v66 < *(_DWORD *)v60)
    {
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc", 1063, "last_frame_info_->width >= highest_stream_width", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v56, v57, v58, v59, *(unsigned int *)(v5 + 592));
    }
    else
    {
      v68 = *((_DWORD *)v60 + 2);
      v69 = *(unsigned int *)(v5 + 596);
      if ((int)v69 >= v68)
      {
        *(_DWORD *)(v5 + 608) = v67;
        *(_DWORD *)(v5 + 612) = v69 - v68;
        (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v5 + 488) + 96))(v457);
        v13 = v461;
        LODWORD(v2) = v460;
        webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v457[0].__r_.__value_.__l.__data_);
        v434 = AlignmentAndMaybeAdjustScaleFactors;
        if ((_DWORD)v13 && !(_DWORD)v2)
        {
          (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v5 + 488) + 96))(v457);
          if (v458[0] == v458[1])
          {
            v75 = operator new(0x70uLL);
            *(_QWORD *)&v452[16] = v75 + 14;
            *v75 = 0;
            v75[1] = 0;
            *((_OWORD *)v75 + 1) = xmmword_208F056B0;
            *((_OWORD *)v75 + 2) = xmmword_208F056C0;
            *((_OWORD *)v75 + 3) = xmmword_208F056D0;
            *((_OWORD *)v75 + 4) = xmmword_208F056E0;
            *((_OWORD *)v75 + 5) = xmmword_208F056F0;
            *((_OWORD *)v75 + 6) = xmmword_208F05700;
            *(_QWORD *)v452 = v75;
            *(_QWORD *)&v452[8] = v75 + 14;
            webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v457[0].__r_.__value_.__l.__data_);
            if (!*(_BYTE *)(v5 + 604))
              goto LABEL_641;
          }
          else
          {
            (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)(v5 + 488) + 96))(v462);
            *(_OWORD *)v452 = v462[11];
            *(_QWORD *)&v452[16] = *(_QWORD *)&v462[12];
            memset(&v462[11], 0, 24);
            webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)v462);
            webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v457[0].__r_.__value_.__l.__data_);
            if (!*(_BYTE *)(v5 + 604))
              goto LABEL_641;
          }
          webrtc::EncoderInfoSettings::GetSinglecastBitrateLimitForResolutionWhenQpIsUntrusted((*(_DWORD *)(v5 + 596) * *(_DWORD *)(v5 + 592)) | 0x100000000, (uint64_t)v452, (uint64_t)v457, v70);
          if (v457[0].__r_.__value_.__s.__data_[16])
          {
            size = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] == 96
              && *(_QWORD *)(v5 + 456) - *(_QWORD *)(v5 + 448) == 96)
            {
              if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
                goto LABEL_641;
              v77 = (int *)(__p.__r_.__value_.__l.__size_ - 68);
              v78 = *(_DWORD *)(__p.__r_.__value_.__l.__size_ - 68);
              if (SHIDWORD(v457[0].__r_.__value_.__r.__words[1]) < v78)
                v78 = HIDWORD(v457[0].__r_.__value_.__r.__words[1]);
              *v77 = v78;
              v79 = v457[0].__r_.__value_.__r.__words[1];
              if (SLODWORD(v457[0].__r_.__value_.__r.__words[1]) >= v78)
                v79 = v78;
              *(_DWORD *)(size - 76) = v79;
              if (*(_DWORD *)(v5 + 416) == 1)
              {
                if (v78 >= 1200000)
                  v80 = (int *)(size - 68);
                else
                v78 = *v80;
                *v77 = v78;
              }
              *(_DWORD *)(size - 72) = v78;
            }
          }
          if (*(_QWORD *)v452)
          {
            *(_QWORD *)&v452[8] = *(_QWORD *)v452;
            operator delete(*(void **)v452);
          }
          goto LABEL_152;
        }
        (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v5 + 488) + 96))(v457);
        if (!*(_BYTE *)(v5 + 604))
          goto LABEL_641;
        v72 = *(_DWORD *)(v5 + 592);
        v73 = *(_DWORD *)(v5 + 596);
        v74 = v458[0];
        v3 = (char *)v458[1] - (char *)v458[0];
        if (v458[1] == v458[0])
        {
          v2 = 0;
          v13 = 0;
        }
        else
        {
          if (v3 < 0)
            goto LABEL_682;
          v2 = (unint64_t)operator new((char *)v458[1] - (char *)v458[0]);
          v13 = v2 + 16 * (v3 >> 4);
          memcpy((void *)v2, v74, v3);
        }
        v81 = (uint64_t)(v13 - v2) >> 4;
        v82 = 126 - 2 * __clz(v81);
        if (v13 == v2)
          v83 = 0;
        else
          v83 = v82;
        std::__introsort<std::_ClassicAlgPolicy,webrtc::VideoEncoder::EncoderInfo::GetEncoderBitrateLimitsForResolution(int)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits *,false>(v2, (__n128 *)v13, v83, 1, v71);
        if (v13 == v2)
        {
          if (v2)
          {
            v3 = 1;
            operator delete((void *)v2);
          }
          webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v457[0].__r_.__value_.__l.__data_);
          goto LABEL_152;
        }
        if (v81 <= 1)
          v84 = 1;
        else
          v84 = (uint64_t)(v13 - v2) >> 4;
        v85 = (int *)(v2 + 8);
        while (*(v85 - 2) < v73 * v72)
        {
          v85 += 4;
          if (!--v84)
          {
            v3 = 1;
            operator delete((void *)v2);
            webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v457[0].__r_.__value_.__l.__data_);
            goto LABEL_152;
          }
        }
        v3 = 0;
        v86 = *v85;
        v13 = v85[1];
        operator delete((void *)v2);
        webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v457[0].__r_.__value_.__l.__data_);
        v87 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] != 96
          || (v88 = *(_QWORD *)(v5 + 448), *(_QWORD *)(v5 + 456) - v88 != 96))
        {
LABEL_152:
          (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)(v5 + 488) + 96))(v462);
          if (v21[200]
            && *(_QWORD *)&v462[11] == *((_QWORD *)&v462[11] + 1)
            && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 456) - *(_QWORD *)(v5 + 448)) >> 5) > 1)
          {
            webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)v457, (const webrtc::VideoEncoder::EncoderInfo *)v462);
            webrtc::EncoderInfoSettings::GetDefaultSinglecastBitrateLimits(*v23, v452);
            if (v458[0])
            {
              v458[1] = v458[0];
              operator delete(v458[0]);
            }
            v104 = *(__n128 *)v452;
            *(_OWORD *)v458 = *(_OWORD *)v452;
            v459 = *(_QWORD *)&v452[16];
            v105 = __p.__r_.__value_.__l.__size_;
            v106 = __p.__r_.__value_.__r.__words[0];
            v107 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
              goto LABEL_165;
          }
          else
          {
            webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)v457, (const webrtc::VideoEncoder::EncoderInfo *)v462);
            v105 = __p.__r_.__value_.__l.__size_;
            v106 = __p.__r_.__value_.__r.__words[0];
            v107 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
              goto LABEL_165;
          }
          v108 = 0xAAAAAAAAAAAAAAABLL * (v107 >> 5);
          if (v108 < 2)
            goto LABEL_165;
          v109 = v107 - 96;
          if (v109 >= 0x60)
          {
            v112 = 0;
            v113 = 0;
            v114 = v109 / 0x60 + 1;
            v111 = v106 + 96 * (v114 & 0x7FFFFFFFFFFFFFELL);
            v115 = (unsigned __int8 *)(v106 + 178);
            v116 = v114 & 0x7FFFFFFFFFFFFFELL;
            do
            {
              v117 = *(v115 - 96);
              v118 = *v115;
              v115 += 192;
              v112 += v117;
              v113 += v118;
              v116 -= 2;
            }
            while (v116);
            v110 = v113 + v112;
            if (v114 == (v114 & 0x7FFFFFFFFFFFFFELL))
            {
LABEL_163:
              if (v110 != 1)
                goto LABEL_165;
              if (*(_BYTE *)(v106 + 82))
                goto LABEL_165;
              v140 = *(_QWORD *)(v5 + 448);
              v141 = *(_QWORD *)(v5 + 456);
              if (v140 == v141)
                goto LABEL_165;
              v142 = v141 - v140;
              v143 = v141 - v140 - 96;
              if (v143 >= 0x60)
              {
                v156 = 0;
                v157 = 0;
                v158 = v143 / 0x60 + 1;
                v145 = v140 + 96 * (v158 & 0x7FFFFFFFFFFFFFELL);
                v159 = (unsigned __int8 *)(v140 + 178);
                v160 = v158 & 0x7FFFFFFFFFFFFFELL;
                do
                {
                  v161 = *(v159 - 96);
                  v162 = *v159;
                  v159 += 192;
                  v156 += v161;
                  v157 += v162;
                  v160 -= 2;
                }
                while (v160);
                v144 = v157 + v156;
                if (v158 == (v158 & 0x7FFFFFFFFFFFFFELL))
                  goto LABEL_208;
              }
              else
              {
                v144 = 0;
                v145 = *(_QWORD *)(v5 + 448);
              }
              do
              {
                v144 += *(unsigned __int8 *)(v145 + 82);
                v145 += 96;
              }
              while (v145 != v141);
LABEL_208:
              if (v144 == 1)
              {
                v163 = 0;
                v2 = 0;
                v164 = v142 / 96;
                if (v164 <= 1)
                  v164 = 1;
                v165 = (unsigned __int8 *)(v140 + 82);
                do
                {
                  v166 = *v165;
                  v165 += 96;
                  if (v166)
                    v2 = v163;
                  ++v163;
                }
                while (v164 != v163);
                if (v108 >= v2 + 1)
                {
                  if (v108 <= v2)
                    goto LABEL_641;
                  if (*(_BYTE *)(v106 + 96 * v2 + 82))
                  {
                    webrtc::VideoEncoder::EncoderInfo::GetEncoderBitrateLimitsForResolution((webrtc::VideoEncoder::EncoderInfo *)v457, *(_DWORD *)(v106 + 96 * v2 + 8) * *(_DWORD *)(v106 + 96 * v2), (__n128 *)v452, v104);
                    if (v452[16])
                    {
                      v167 = *(_QWORD *)(v5 + 448);
                      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 456) - v167) >> 5) <= v2)
                        goto LABEL_641;
                      if (*(int *)(v167 + 96 * v2 + 20) <= 0)
                      {
                        v13 = *(unsigned int *)&v452[8];
                        v168 = *(_DWORD *)&v452[8];
                      }
                      else
                      {
                        if (0xAAAAAAAAAAAAAAABLL
                           * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5) <= v2)
                          goto LABEL_641;
                        v13 = *(unsigned int *)&v452[8];
                        v168 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 96 * v2 + 20);
                        if (*(int *)&v452[8] > v168)
                          v168 = *(_DWORD *)&v452[8];
                      }
                      if (*(int *)(v167 + 96 * v2 + 28) <= 0)
                      {
                        v409 = *(_DWORD *)&v452[12];
                        v408 = *(_DWORD *)&v452[12];
                      }
                      else
                      {
                        if (0xAAAAAAAAAAAAAAABLL
                           * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5) <= v2)
                          goto LABEL_641;
                        v408 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 96 * v2 + 28);
                        v409 = *(_DWORD *)&v452[12];
                        if (v408 >= *(int *)&v452[12])
                          v408 = *(_DWORD *)&v452[12];
                      }
                      if (v168 >= v408)
                      {
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                        {
                          if (0xAAAAAAAAAAAAAAABLL
                             * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5) <= v2)
                            goto LABEL_641;
                          v430 = 4074;
                          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v412, v413, v414, v415, v416, v417, v418, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
                        }
                      }
                      else
                      {
                        if (0xAAAAAAAAAAAAAAABLL
                           * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5) <= v2)
                          goto LABEL_641;
                        v410 = (_DWORD *)(__p.__r_.__value_.__r.__words[0] + 96 * v2);
                        v410[7] = v408;
                        v411 = v410[6];
                        if (v409 < v411)
                          v411 = v409;
                        v410[5] = v168;
                        v410[6] = v411;
                      }
                    }
                  }
                }
              }
LABEL_165:
              v2 = (unint64_t)v457;
              webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v457[0].__r_.__value_.__l.__data_);
              webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)v462);
              webrtc::VideoCodecInitializer::SetupCodec(*(_QWORD *)(v5 + 32), v23, (uint64_t *)&__p, v119, v120, v121, v122, v123, (int *)v462);
              if ((*(_DWORD *)(v5 + 280) & 0xFFFFFFFE) != 2)
                goto LABEL_269;
              if (!*(_BYTE *)(v5 + 604))
                goto LABEL_641;
              v128 = *(unsigned int *)(v5 + 592);
              v129 = v128 - WORD2(v462[0]);
              if ((int)v128 >= WORD2(v462[0]))
              {
                v130 = *(unsigned int *)(v5 + 596);
                v131 = v130 - WORD3(v462[0]);
                if ((int)v130 >= WORD3(v462[0]))
                {
                  *(_DWORD *)(v5 + 608) = v129;
                  *(_DWORD *)(v5 + 612) = v131;
                  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v5 + 488) + 96))(v452);
                  if (v21[200]
                    && *(_QWORD *)&v452[176] == *(_QWORD *)&v452[184]
                    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 456) - *(_QWORD *)(v5 + 448)) >> 5) > 1)
                  {
                    webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)v457, (const webrtc::VideoEncoder::EncoderInfo *)v452);
                    webrtc::EncoderInfoSettings::GetDefaultSinglecastBitrateLimits(*v23, &v441);
                    if (v458[0])
                    {
                      v458[1] = v458[0];
                      operator delete(v458[0]);
                    }
                    *(__n128 *)v458 = v441;
                    v459 = v442;
                    v139 = v462[0];
                    if (LODWORD(v462[0]) != 3)
                    {
LABEL_173:
                      if (v139 != 2 || !BYTE14(v462[22]))
                        goto LABEL_268;
                      goto LABEL_189;
                    }
                  }
                  else
                  {
                    webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)v457, (const webrtc::VideoEncoder::EncoderInfo *)v452);
                    v139 = v462[0];
                    if (LODWORD(v462[0]) != 3)
                      goto LABEL_173;
                  }
                  if (WORD2(v462[23]) < 0x100u)
                    goto LABEL_268;
                  v146 = BYTE4(v462[23]);
                  if (BYTE4(v462[23]) >= 0x22u)
                  {
LABEL_680:
                    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/svc/scalability_mode_util.cc", 309, "index < kNumScalabilityModes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v135, v136, v137, v138, v146);
                    goto LABEL_681;
                  }
                    goto LABEL_268;
LABEL_189:
                  v147 = *(unsigned __int8 **)(v5 + 448);
                  v148 = *(unsigned __int8 **)(v5 + 456);
                  if (v147 != v148)
                  {
                    if (v147[81] && LOBYTE(v462[2]) == 1)
                    {
                      v149 = v147[80];
                      if (v149 < 0x22)
                      {
                        v151 = v148 - v147;
                        if (v148 - v147 == 96)
                          goto LABEL_229;
                        v152 = v150 == 1;
LABEL_197:
                        if (!v151)
                          goto LABEL_641;
                        if (v147[82])
                          v153 = v152;
                        else
                          v153 = 1;
                        if (v153 != 1)
                          goto LABEL_268;
                        v154 = v148 - v147 - 96;
                        if (v154 >= 0x60)
                        {
                          v169 = 0;
                          v170 = 0;
                          v171 = v154 / 0x60 + 1;
                          v155 = &v147[96 * (v171 & 0x7FFFFFFFFFFFFFELL)];
                          v172 = v147 + 178;
                          v173 = v171 & 0x7FFFFFFFFFFFFFELL;
                          do
                          {
                            v174 = *(v172 - 96);
                            v175 = *v172;
                            v172 += 192;
                            v169 += v174;
                            v170 += v175;
                            v173 -= 2;
                          }
                          while (v173);
                          v150 = v170 + v169;
                          if (v171 == (v171 & 0x7FFFFFFFFFFFFFELL))
                          {
LABEL_229:
                            if (v150 > 1)
                              goto LABEL_268;
                            goto LABEL_230;
                          }
                        }
                        else
                        {
                          v150 = 0;
                          v155 = *(unsigned __int8 **)(v5 + 448);
                        }
                        do
                        {
                          v150 += v155[82];
                          v155 += 96;
                        }
                        while (v155 != v148);
                        goto LABEL_229;
                      }
                      goto LABEL_688;
                    }
                    v151 = v148 - v147;
                    if (v148 - v147 != 96)
                    {
                      v152 = 0;
                      goto LABEL_197;
                    }
                  }
LABEL_230:
                  if (0xAAAAAAAAAAAAAAABLL * ((v148 - v147) >> 5) >= 2)
                  {
                    SingleActiveLayerPixels = webrtc::VideoStreamAdapter::GetSingleActiveLayerPixels((webrtc::VideoStreamAdapter *)v462, v132, v133, v134, v135, v136, v137, v138, v429, v430);
                    if (((unint64_t)SingleActiveLayerPixels & 0xFF00000000) != 0)
                    {
                      webrtc::VideoEncoder::EncoderInfo::GetEncoderBitrateLimitsForResolution((webrtc::VideoEncoder::EncoderInfo *)v457, (signed __int32)SingleActiveLayerPixels, &v441, v177);
                      if ((_BYTE)v442)
                      {
                        v185 = *(_QWORD *)(v5 + 448);
                        v186 = *(_QWORD *)(v5 + 456);
                        v187 = v186 - v185;
                        if (v186 != v185)
                        {
                          v188 = 0;
                          v189 = 0;
                          v190 = 0;
                          v191 = v187 / 96;
                          v192 = v191 <= 1 ? 1 : v191;
                          v193 = (unsigned __int8 *)(v185 + 82);
                          do
                          {
                            v194 = *v193;
                            v193 += 96;
                            if (v194)
                            {
                              v190 = v188;
                              v189 = 1;
                            }
                            ++v188;
                          }
                          while (v192 != v188);
                          if (v189)
                          {
                            if (v191 <= v190)
                              goto LABEL_641;
                            v195 = v185 + 96 * v190;
                            v198 = *(_DWORD *)(v195 + 20);
                            v196 = v195 + 20;
                            v197 = v198;
                            if (v441.n128_i32[2] >= v198)
                              v199 = &v441.n128_u64[1];
                            else
                              v199 = (unint64_t *)v196;
                            if (v197 >= 1)
                              v200 = v199;
                            else
                              v200 = &v441.n128_u64[1];
                            v13 = *(unsigned int *)v200;
                            v203 = *(_DWORD *)(v196 + 8);
                            v201 = (unsigned __int32 *)(v196 + 8);
                            v202 = v203;
                            if (v203 >= v441.n128_i32[3])
                              v201 = &v441.n128_u32[3];
                            if (v202 < 1)
                              v201 = &v441.n128_u32[3];
                            v204 = *v201;
                            if ((int)v13 < (int)*v201)
                            {
                              v205 = (char *)&v462[7] + 12;
                              v3 = -1;
                              while (LODWORD(v462[0]) != 3)
                              {
                                if (LODWORD(v462[0]) != 2)
                                  goto LABEL_259;
                                v206 = BYTE14(v462[22]);
LABEL_261:
                                if (++v3 >= v206)
                                  goto LABEL_268;
                                v207 = (int *)(v205 + 36);
                                v208 = v205[52];
                                v205 += 36;
                                if (v208)
                                {
                                  v207[2] = (int)v13 / 1000;
                                  v209 = v207[1];
                                  if (v204 / 1000 < v209)
                                    v209 = v204 / 1000;
                                  *v207 = v204 / 1000;
                                  v207[1] = v209;
                                  goto LABEL_268;
                                }
                              }
                              if (WORD2(v462[23]) >= 0x100u)
                              {
                                v206 = webrtc::ScalabilityModeToNumSpatialLayers(BYTE4(v462[23]), v178, v179, v180, v181, v182, v183, v184);
                                goto LABEL_261;
                              }
LABEL_259:
                              v206 = 0;
                              goto LABEL_261;
                            }
                            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v210, v211, v212, v213, v214, v215, v216, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
                          }
                        }
                      }
                    }
                  }
LABEL_268:
                  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v457[0].__r_.__value_.__l.__data_);
                  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)v452);
LABEL_269:
                  v448 = v457;
                  strcpy((char *)v457, "ReconfigureEncoder: simulcast streams: ");
                  v449 = xmmword_208F1D7E0;
                  v217 = LOBYTE(v462[2]);
                  if (LOBYTE(v462[2]))
                  {
                    v3 = 0;
                    v218 = (char *)&v462[4] + 4;
                    v13 = (unint64_t)"%u";
                    do
                    {
                      v219 = *(v218 - 20);
                      if ((v219 - 4) >= 0xFFFFFFFD)
                      {
                        v220 = *((_QWORD *)&v449 + 1) + 1;
                        v221 = v449;
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), "{", v449 != *((_QWORD *)&v449 + 1) + 1);
                        v222 = *((_QWORD *)&v449 + 1);
                        if (v221 != v220)
                          v222 = *((_QWORD *)&v449 + 1) + 1;
                        *((_QWORD *)&v449 + 1) = v222;
                        v448->__r_.__value_.__s.__data_[v222] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%lu", v3);
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 2uLL)
                          v223 = 2;
                        else
                          v223 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ": ", v223);
                        *((_QWORD *)&v449 + 1) += v223;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%d", *((_DWORD *)v218 - 8));
                        v224 = *((_QWORD *)&v449 + 1) + 1;
                        v225 = v449;
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), "x", v449 != *((_QWORD *)&v449 + 1) + 1);
                        v226 = *((_QWORD *)&v449 + 1);
                        if (v225 != v224)
                          v226 = *((_QWORD *)&v449 + 1) + 1;
                        *((_QWORD *)&v449 + 1) = v226;
                        v448->__r_.__value_.__s.__data_[v226] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%d", *((_DWORD *)v218 - 7));
                        v227 = *((_QWORD *)&v449 + 1) + 1;
                        v228 = v449;
                        v229 = (uint64_t)memcpy((char *)v448 + *((_QWORD *)&v449 + 1), " ", v449 != *((_QWORD *)&v449 + 1) + 1);
                        if (v228 == v227)
                          v230 = *((_QWORD *)&v449 + 1);
                        else
                          v230 = *((_QWORD *)&v449 + 1) + 1;
                        v231 = (char)webrtc::SimulcastStream::GetScalabilityMode(void)const::scalability_modes[v219 - 1];
                        *((_QWORD *)&v449 + 1) = v230;
                        v448->__r_.__value_.__s.__data_[v230] = 0;
                        if (v231 >= 0x22)
                          goto LABEL_679;
                        v232 = 8 * v231;
                        if (*(_QWORD *)((char *)&unk_208F1D8B8 + v232) >= (_QWORD)v449 + ~*((_QWORD *)&v449 + 1))
                          v233 = v449 + ~*((_QWORD *)&v449 + 1);
                        else
                          v233 = *(_QWORD *)((char *)&unk_208F1D8B8 + v232);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), off_24C0C4C38[v232 / 8], v233);
                        *((_QWORD *)&v449 + 1) += v233;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xCuLL)
                          v234 = 12;
                        else
                          v234 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", min_kbps: ", v234);
                        *((_QWORD *)&v449 + 1) += v234;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%u", *((_DWORD *)v218 - 2));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xFuLL)
                          v235 = 15;
                        else
                          v235 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", target_kbps: ", v235);
                        *((_QWORD *)&v449 + 1) += v235;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%u", *((_DWORD *)v218 - 3));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xCuLL)
                          v236 = 12;
                        else
                          v236 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", max_kbps: ", v236);
                        *((_QWORD *)&v449 + 1) += v236;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%u", *((_DWORD *)v218 - 4));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xBuLL)
                          v237 = 11;
                        else
                          v237 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", max_fps: ", v237);
                        *((_QWORD *)&v449 + 1) += v237;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%g", *((float *)v218 - 6));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xAuLL)
                          v238 = 10;
                        else
                          v238 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", max_qp: ", v238);
                        *((_QWORD *)&v449 + 1) += v238;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%u", *((_DWORD *)v218 - 1));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xAuLL)
                          v239 = 10;
                        else
                          v239 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", num_tl: ", v239);
                        *((_QWORD *)&v449 + 1) += v239;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%d", *(v218 - 20));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xAuLL)
                          v240 = 10;
                        else
                          v240 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", active: ", v240);
                        *((_QWORD *)&v449 + 1) += v240;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        v241 = 4;
                        if (*v218)
                        {
                          v242 = "true";
                        }
                        else
                        {
                          v241 = 5;
                          v242 = "false";
                        }
                        if (v241 >= (_QWORD)v449 + ~*((_QWORD *)&v449 + 1))
                          v243 = v449 + ~*((_QWORD *)&v449 + 1);
                        else
                          v243 = v241;
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), v242, v243);
                        *((_QWORD *)&v449 + 1) += v243;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        v2 = *((_QWORD *)&v449 + 1) + 1;
                        v244 = v449;
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), "}", v449 != *((_QWORD *)&v449 + 1) + 1);
                        v245 = *((_QWORD *)&v449 + 1);
                        if (v244 != v2)
                          v245 = *((_QWORD *)&v449 + 1) + 1;
                        *((_QWORD *)&v449 + 1) = v245;
                        v448->__r_.__value_.__s.__data_[v245] = 0;
                        v217 = LOBYTE(v462[2]);
                      }
                      ++v3;
                      v218 += 36;
                    }
                    while (v3 < (unint64_t)v217);
                  }
                  if ((*v436 & 0xFFFFFFFE) == 2)
                  {
                    if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0x12uLL)
                      v246 = 18;
                    else
                      v246 = v449 + ~*((_QWORD *)&v449 + 1);
                    memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", spatial layers: ", v246);
                    v247 = 0;
                    *((_QWORD *)&v449 + 1) += v246;
                    v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                    v2 = (unint64_t)&v462[11];
                    v13 = (unint64_t)"%d";
                    v3 = 10;
                    v248 = v462[0];
                    if (LODWORD(v462[0]) == 3)
                      goto LABEL_325;
                    while (v248 != 2)
                    {
LABEL_326:
                      if (v247 >= 0)
                        goto LABEL_368;
                      while (1)
                      {
LABEL_330:
                        v249 = *((_QWORD *)&v449 + 1) + 1;
                        v250 = v449;
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), "{", v449 != *((_QWORD *)&v449 + 1) + 1);
                        v251 = *((_QWORD *)&v449 + 1);
                        if (v250 != v249)
                          v251 = *((_QWORD *)&v449 + 1) + 1;
                        *((_QWORD *)&v449 + 1) = v251;
                        v448->__r_.__value_.__s.__data_[v251] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%d", v247);
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 2uLL)
                          v252 = 2;
                        else
                          v252 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ": ", v252);
                        *((_QWORD *)&v449 + 1) += v252;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%d", *(_DWORD *)(v2 - 32));
                        v253 = *((_QWORD *)&v449 + 1) + 1;
                        v254 = v449;
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), "x", v449 != *((_QWORD *)&v449 + 1) + 1);
                        v255 = *((_QWORD *)&v449 + 1);
                        if (v254 != v253)
                          v255 = *((_QWORD *)&v449 + 1) + 1;
                        *((_QWORD *)&v449 + 1) = v255;
                        v448->__r_.__value_.__s.__data_[v255] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%d", *(_DWORD *)(v2 - 28));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xCuLL)
                          v256 = 12;
                        else
                          v256 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", min_kbps: ", v256);
                        *((_QWORD *)&v449 + 1) += v256;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%u", *(_DWORD *)(v2 - 8));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xFuLL)
                          v257 = 15;
                        else
                          v257 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", target_kbps: ", v257);
                        *((_QWORD *)&v449 + 1) += v257;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%u", *(_DWORD *)(v2 - 12));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xCuLL)
                          v258 = 12;
                        else
                          v258 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", max_kbps: ", v258);
                        *((_QWORD *)&v449 + 1) += v258;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%u", *(_DWORD *)(v2 - 16));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xBuLL)
                          v259 = 11;
                        else
                          v259 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", max_fps: ", v259);
                        *((_QWORD *)&v449 + 1) += v259;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%g", *(float *)(v2 - 24));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xAuLL)
                          v260 = 10;
                        else
                          v260 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", max_qp: ", v260);
                        *((_QWORD *)&v449 + 1) += v260;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%u", *(_DWORD *)(v2 - 4));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xAuLL)
                          v261 = 10;
                        else
                          v261 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", num_tl: ", v261);
                        *((_QWORD *)&v449 + 1) += v261;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v448, "%d", *(unsigned __int8 *)(v2 - 20));
                        if ((_QWORD)v449 + ~*((_QWORD *)&v449 + 1) >= 0xAuLL)
                          v262 = 10;
                        else
                          v262 = v449 + ~*((_QWORD *)&v449 + 1);
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), ", active: ", v262);
                        *((_QWORD *)&v449 + 1) += v262;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        v263 = *(unsigned __int8 *)v2;
                        v2 += 36;
                        v264 = 4;
                        if (v263)
                        {
                          v265 = "true";
                        }
                        else
                        {
                          v264 = 5;
                          v265 = "false";
                        }
                        if (v264 >= (_QWORD)v449 + ~*((_QWORD *)&v449 + 1))
                          v266 = v449 + ~*((_QWORD *)&v449 + 1);
                        else
                          v266 = v264;
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), v265, v266);
                        *((_QWORD *)&v449 + 1) += v266;
                        v448->__r_.__value_.__s.__data_[*((_QWORD *)&v449 + 1)] = 0;
                        v267 = *((_QWORD *)&v449 + 1) + 1;
                        v268 = v449;
                        memcpy((char *)v448 + *((_QWORD *)&v449 + 1), "}", v449 != *((_QWORD *)&v449 + 1) + 1);
                        v269 = *((_QWORD *)&v449 + 1);
                        if (v268 != v267)
                          v269 = *((_QWORD *)&v449 + 1) + 1;
                        *((_QWORD *)&v449 + 1) = v269;
                        v448->__r_.__value_.__s.__data_[v269] = 0;
                        ++v247;
                        v248 = v462[0];
                        if (LODWORD(v462[0]) != 3)
                          break;
LABEL_325:
                        if (WORD2(v462[23]) < 0x100u)
                          goto LABEL_326;
                        v146 = BYTE4(v462[23]);
                        if (BYTE4(v462[23]) >= 0x22u)
                          goto LABEL_680;
                          goto LABEL_368;
                      }
                    }
                    if (v247 < BYTE14(v462[22]))
                      goto LABEL_330;
                  }
LABEL_368:
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
                    rtc::webrtc_logging_impl::Log("\r\t\t", v270, v271, v272, v273, v274, v275, v276, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
                  v277 = *(unsigned __int8 *)(v5 + 620);
                  if (*(_BYTE *)(v5 + 620))
                    v277 = *(_DWORD *)(v5 + 616);
                  v21 = (_BYTE *)(v5 + 4320);
                  v23 = (int *)(v5 + 280);
                  v22 = (unsigned __int8 *)v462;
                  v278 = v277 / 0x3E8;
                  if (v278 <= LODWORD(v462[1]))
                    v278 = v462[1];
                  if (HIDWORD(v462[0]) < v278)
                    v278 = HIDWORD(v462[0]);
                  DWORD2(v462[0]) = v278;
                  if (!*(_BYTE *)(v5 + 604))
                    goto LABEL_641;
                  BYTE8(v462[20]) = *(_BYTE *)(v5 + 600);
                  *(_DWORD *)(v5 + 512) = DWORD1(v462[1]);
                  if (BYTE4(v462[4]))
                  {
                    v2 = (unint64_t)operator new(8uLL);
                    *(_QWORD *)v2 = *(_QWORD *)((char *)&v462[2] + 4);
                    v279 = (char *)(v2 + 8);
                    if (BYTE8(v462[6]))
                      goto LABEL_379;
                  }
                  else
                  {
                    v279 = 0;
                    v2 = 0;
                    if (BYTE8(v462[6]))
                    {
LABEL_379:
                      v3 = (int64_t)&v279[-v2];
                      v280 = (uint64_t)&v279[-v2] >> 3;
                      v281 = v280 + 1;
                      if ((unint64_t)(v280 + 1) >> 61)
                        goto LABEL_682;
                      if (v3 >> 2 > v281)
                        v281 = v3 >> 2;
                      if ((unint64_t)v3 >= 0x7FFFFFFFFFFFFFF8)
                        v281 = 0x1FFFFFFFFFFFFFFFLL;
                      if (!v281)
                        goto LABEL_641;
                      if (v281 >> 61)
                        goto LABEL_683;
                      v282 = 8 * v281;
                      v283 = (char *)operator new(8 * v281);
                      v284 = &v283[v282];
                      v285 = &v283[8 * v280];
                      *(_QWORD *)v285 = *((_QWORD *)&v462[4] + 1);
                      v13 = (unint64_t)(v285 + 8);
                      if (v279 == (char *)v2)
                      {
                        v2 = (unint64_t)&v283[8 * v280];
                        if (!v279)
                          goto LABEL_393;
                      }
                      else
                      {
                        v286 = (unint64_t)&v279[-v2 - 8] & 0xFFFFFFFFFFFFFFF8;
                        v3 = (int64_t)&v283[v3 - v286 - 8];
                        memcpy((void *)v3, &v279[-v286 - 8], v286 + 8);
                        v279 = (char *)v2;
                        v2 = v3;
                        if (!v279)
                        {
LABEL_393:
                          if (!BYTE12(v462[8]))
                          {
LABEL_397:
                            v287 = (_QWORD *)v13;
                            goto LABEL_417;
                          }
                          if (v13 < (unint64_t)v284)
                          {
                            if (!v13)
                              goto LABEL_641;
                            *(_QWORD *)v13 = *(_QWORD *)((char *)&v462[6] + 12);
                            v13 += 8;
                            goto LABEL_397;
                          }
                          v3 = v13 - v2;
                          v288 = (uint64_t)(v13 - v2) >> 3;
                          v289 = v288 + 1;
                          if (!((unint64_t)(v288 + 1) >> 61))
                          {
                            if ((uint64_t)&v284[-v2] >> 2 > v289)
                              v289 = (uint64_t)&v284[-v2] >> 2;
                            if ((unint64_t)&v284[-v2] >= 0x7FFFFFFFFFFFFFF8)
                              v289 = 0x1FFFFFFFFFFFFFFFLL;
                            if (!v289)
                              goto LABEL_641;
                            if (!(v289 >> 61))
                            {
                              v290 = 8 * v289;
                              v291 = (char *)operator new(8 * v289);
                              v284 = &v291[v290];
                              v292 = &v291[8 * v288];
                              *(_QWORD *)v292 = *(_QWORD *)((char *)&v462[6] + 12);
                              v287 = v292 + 8;
                              if (v13 == v2)
                                goto LABEL_415;
                              v293 = v13 - v2 - 8;
                              if (v293 >= 0x58)
                              {
                                if (v2 - (unint64_t)v291 >= 0x20)
                                {
                                  v295 = (v293 >> 3) + 1;
                                  v296 = 8 * (v295 & 0x3FFFFFFFFFFFFFFCLL);
                                  v294 = v13 - v296;
                                  v292 -= v296;
                                  v297 = &v291[v3 - 16];
                                  v298 = (__int128 *)(v13 - 16);
                                  v299 = v295 & 0x3FFFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    v300 = *v298;
                                    *((_OWORD *)v297 - 1) = *(v298 - 1);
                                    *(_OWORD *)v297 = v300;
                                    v297 -= 32;
                                    v298 -= 2;
                                    v299 -= 4;
                                  }
                                  while (v299);
                                  if (v295 == (v295 & 0x3FFFFFFFFFFFFFFCLL))
                                    goto LABEL_414;
                                }
                                else
                                {
                                  v294 = v13;
                                }
                              }
                              else
                              {
                                v294 = v13;
                              }
                              do
                              {
                                v301 = *(_QWORD *)(v294 - 8);
                                v294 -= 8;
                                *((_QWORD *)v292 - 1) = v301;
                                v292 -= 8;
                              }
                              while (v294 != v2);
LABEL_414:
                              v13 = v2;
LABEL_415:
                              v2 = (unint64_t)v292;
                              if (v13)
                                operator delete((void *)v13);
LABEL_417:
                              v302 = *(_QWORD *)(v5 + 64);
                              v303 = *(unsigned int **)(v5 + 5648);
                              if (v303)
                              {
                                do
                                  v304 = __ldxr(v303);
                                while (__stxr(v304 + 1, v303));
                              }
                              v305 = operator new();
                              *(_QWORD *)v305 = v5;
                              *(_DWORD *)(v305 + 8) = v434;
                              *(_QWORD *)(v305 + 16) = v2;
                              *(_QWORD *)(v305 + 24) = v287;
                              *(_QWORD *)(v305 + 32) = v284;
                              *(_QWORD *)v452 = v303;
                              *(_QWORD *)&v452[8] = v305;
                              *(_QWORD *)&v452[24] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::VideoStreamEncoder::ReconfigureEncoder(void)::$_1>;
                              *(_QWORD *)&v452[32] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::ReconfigureEncoder(void)::$_1 &&>;
                              v3 = (int64_t)absl::internal_any_invocable::EmptyManager;
                              v443[0] = v305;
                              v444 = (void (*)(uint64_t, _QWORD *, _QWORD *))absl::internal_any_invocable::EmptyManager;
                              v445 = 0;
                              v306 = operator new();
                              v307 = *(_QWORD *)v452;
                              v308 = *(void (**)(uint64_t, uint64_t *, _QWORD *))&v452[24];
                              *(_QWORD *)v452 = 0;
                              *(_QWORD *)v306 = v307;
                              v308(0, (uint64_t *)&v452[8], (_QWORD *)(v306 + 8));
                              *(_OWORD *)(v306 + 24) = *(_OWORD *)&v452[24];
                              *(_QWORD *)&v452[24] = absl::internal_any_invocable::EmptyManager;
                              *(_QWORD *)&v452[32] = 0;
                              v446[0] = v306;
                              *(_QWORD *)&v447 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
                              *((_QWORD *)&v447 + 1) = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
                              v309 = *(unsigned int **)v452;
                              if (*(_QWORD *)v452)
                              {
                                do
                                {
                                  v310 = __ldaxr(v309);
                                  v311 = v310 - 1;
                                }
                                while (__stlxr(v311, v309));
                                if (!v311)
                                  MEMORY[0x20BD0ADEC]();
                              }
                              ((void (*)(uint64_t, uint64_t *, _QWORD *))v447)(0, v446, v452);
                              *(_OWORD *)&v452[16] = v447;
                              *(_QWORD *)&v447 = absl::internal_any_invocable::EmptyManager;
                              *((_QWORD *)&v447 + 1) = 0;
                              (*(void (**)(uint64_t, _BYTE *, __n128 *, void **))(*(_QWORD *)v302 + 8))(v302, v452, &v441, v453);
                              (*(void (**)(uint64_t, _BYTE *, _BYTE *))&v452[16])(1, v452, v452);
                              ((void (*)(uint64_t, uint64_t *, uint64_t *))v447)(1, v446, v446);
                              v444(1, v443, v443);
                              (*(void (**)(_BYTE *__return_ptr, _QWORD, _OWORD *))(**(_QWORD **)(v5 + 112)
                                                                                            + 16))(v452, *(_QWORD *)(v5 + 112), v462);
                              v312 = *(_QWORD *)v452;
                              *(_QWORD *)v452 = 0;
                              v313 = *(_QWORD *)(v5 + 504);
                              *(_QWORD *)(v5 + 504) = v312;
                              if (v313)
                              {
                                (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
                                v314 = *(_QWORD *)v452;
                                *(_QWORD *)v452 = 0;
                                if (v314)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v314 + 8))(v314);
                              }
                              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 504) + 32))(*(_QWORD *)(v5 + 504), *(unsigned __int8 *)(v5 + 480));
                              LODWORD(v2) = v462[0];
                              if (!v435
                                && LODWORD(v462[0]) == *(_DWORD *)(v5 + 1640)
                                && __PAIR64__(WORD3(v462[0]), WORD2(v462[0])) == __PAIR64__(*(unsigned __int16 *)(v5 + 1646), *(unsigned __int16 *)(v5 + 1644))&& HIDWORD(v462[1]) == *(_DWORD *)(v5 + 1668))
                              {
                                v13 = LOBYTE(v462[2]);
                                if (LOBYTE(v462[2]) == *(unsigned __int8 *)(v5 + 1672)
                                  && DWORD1(v462[20]) == *(_DWORD *)(v5 + 1964)
                                  && (BYTE12(v462[23]) != 0) == (*(_BYTE *)(v5 + 2020) != 0)
                                  && (*(_BYTE *)(v5 + 1017) || DWORD2(v462[0]) == *(_DWORD *)(v5 + 1648)))
                                {
                                  if (LODWORD(v462[0]) == 4)
                                    goto LABEL_642;
                                  if (LODWORD(v462[0]) != 2)
                                  {
                                    if (LODWORD(v462[0]) != 1)
                                      goto LABEL_648;
                                    if (BYTE4(v462[22]) != *(unsigned __int8 *)(v5 + 1996)
                                      || __PAIR64__(BYTE6(v462[22]), BYTE5(v462[22])) != __PAIR64__(*(unsigned __int8 *)(v5 + 1998), *(unsigned __int8 *)(v5 + 1997)))
                                    {
                                      goto LABEL_645;
                                    }
                                    v406 = DWORD2(v462[22]);
                                    v407 = *(_DWORD *)(v5 + 2000);
                                    goto LABEL_644;
                                  }
                                  if (webrtc::VideoCodecVP9::operator==((unsigned __int8 *)&v462[22] + 4, (unsigned __int8 *)(v5 + 1996)))
                                  {
                                    goto LABEL_648;
                                  }
                                  v13 = 1;
                                  v315 = *(_DWORD *)(v5 + 72);
                                  v316 = *(unsigned __int8 *)(v5 + 5520);
                                  if (!*(_BYTE *)(v5 + 5520))
                                    goto LABEL_436;
                                  goto LABEL_435;
                                }
                              }
                              goto LABEL_433;
                            }
LABEL_683:
                            std::__throw_bad_array_new_length[abi:sn180100]();
                          }
LABEL_682:
                          abort();
                        }
                      }
                      operator delete(v279);
                      goto LABEL_393;
                    }
                  }
                  v284 = v279;
                  v13 = (unint64_t)v279;
                  goto LABEL_393;
                }
LABEL_687:
                rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc", 1187, "last_frame_info_->height >= codec.height", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v124, v125, v126, v127, v130);
LABEL_688:
                rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/svc/scalability_mode_util.cc", 309, "index < kNumScalabilityModes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v135, v136, v137, v138, v149);
LABEL_681:
                __asm { BL              ___stack_chk_fail }
              }
LABEL_686:
              rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc", 1186, "last_frame_info_->width >= codec.width", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v124, v125, v126, v127, v128);
              goto LABEL_687;
            }
          }
          else
          {
            v110 = 0;
            v111 = v106;
          }
          do
          {
            v110 += *(unsigned __int8 *)(v111 + 82);
            v111 += 96;
          }
          while (v111 != v105);
          goto LABEL_163;
        }
        v89 = v86;
        if (*(int *)(v88 + 20) >= 1)
        {
          if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
            goto LABEL_641;
          v89 = *(_DWORD *)(__p.__r_.__value_.__l.__size_ - 76);
          if (v86 > v89)
            v89 = v86;
        }
        v457[0].__r_.__value_.__s.__data_[0] = 0;
        v90 = *(_DWORD *)(v88 + 28);
        if (v90 < 1)
        {
          v94 = *(_DWORD *)(v5 + 436);
          if (v94 <= 0)
          {
            LODWORD(v2) = 1;
            v95 = v13;
            if (v89 < (int)v13)
            {
LABEL_144:
              if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
                goto LABEL_641;
              v96 = *(_DWORD *)(__p.__r_.__value_.__l.__size_ - 72);
              if ((int)v13 < v96)
                v96 = v13;
              *(_DWORD *)(__p.__r_.__value_.__l.__size_ - 76) = v89;
              *(_DWORD *)(v87 - 72) = v96;
              *(_DWORD *)(v87 - 68) = v95;
              goto LABEL_152;
            }
LABEL_149:
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            {
              if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
                goto LABEL_641;
              v430 = 9290;
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v97, v98, v99, v100, v101, v102, v103, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
            }
            goto LABEL_152;
          }
        }
        else
        {
          LODWORD(v457[0].__r_.__value_.__l.__data_) = v90;
          v91 = *(_DWORD *)(v5 + 436);
          if (v91 <= 0)
            goto LABEL_140;
          v92 = v90 >= v91;
          v93 = (int *)v457;
          if (v92)
            v93 = (int *)(v5 + 436);
          v94 = *v93;
        }
        LODWORD(v457[0].__r_.__value_.__l.__data_) = v94;
LABEL_140:
        if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
          goto LABEL_641;
        LODWORD(v2) = 0;
        v95 = *(_DWORD *)(__p.__r_.__value_.__l.__size_ - 68);
        if (v95 >= (int)v13)
          v95 = v13;
        if (v89 < v95)
          goto LABEL_144;
        goto LABEL_149;
      }
    }
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc", 1064, "last_frame_info_->height >= highest_stream_height", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v56, v57, v58, v59, v69);
    goto LABEL_686;
  }
  if (*(_BYTE *)(v5 + 604))
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v24 + 32))(v457, v24, *(_QWORD *)(v5 + 32), *(unsigned int *)(v5 + 592), *(unsigned int *)(v5 + 596), v5 + 280);
    __p = v457[0];
    goto LABEL_65;
  }
LABEL_641:
  while (2)
  {
    __break(1u);
LABEL_642:
    if (DWORD1(v462[22]) == *(_DWORD *)(v5 + 1996))
    {
      v406 = v22[360];
      v407 = *(unsigned __int8 *)(v5 + 2000);
LABEL_644:
      if (v406 == v407)
      {
LABEL_648:
        if ((_DWORD)v13)
        {
          v419 = (char *)&v462[4] + 4;
          v420 = (_BYTE *)(v5 + 1708);
          while (!*v419
               || *v420
               && *((_DWORD *)v419 - 8) == *((_DWORD *)v420 - 8)
               && *((_DWORD *)v419 - 7) == *((_DWORD *)v420 - 7)
               && *(v419 - 20) == *(v420 - 20)
               && *((_DWORD *)v419 - 1) == *((_DWORD *)v420 - 1))
          {
            v419 += 36;
            v420 += 36;
            if (!--v13)
              goto LABEL_658;
          }
        }
        else
        {
LABEL_658:
          if ((_DWORD)v2 != 2 || (v421 = v22[366]) == 0)
          {
LABEL_669:
            v426 = *(unsigned __int16 *)(v5 + 2012);
            v427 = (WORD2(v462[23]) > 0xFFu) ^ (v426 > 0xFF);
            if (v426 >= 0x100)
              v428 = BYTE4(v462[23]) != v426;
            else
              v428 = (WORD2(v462[23]) > 0xFFu) ^ (v426 > 0xFF);
            if (WORD2(v462[23]) >= 0x100u)
              v13 = v428;
            else
              v13 = v427;
            if ((_DWORD)v2 != 2)
              goto LABEL_437;
            goto LABEL_434;
          }
          v422 = (_BYTE *)(v5 + 1816);
          v423 = &v462[11];
          v424 = (unsigned __int8 *)&v462[11];
          while (1)
          {
            v425 = *v424;
            v424 += 36;
            if (v425)
            {
              if (*((_DWORD *)v423 - 8) != *((_DWORD *)v422 - 8)
                || *((_DWORD *)v423 - 7) != *((_DWORD *)v422 - 7)
                || *((unsigned __int8 *)v423 - 20) != *(v422 - 20)
                || *((_DWORD *)v423 - 1) != *((_DWORD *)v422 - 1)
                || !*v422)
              {
                break;
              }
            }
            v422 += 36;
            v423 = v424;
            if (!--v421)
              goto LABEL_669;
          }
        }
LABEL_433:
        v13 = 1;
        if ((_DWORD)v2 != 2)
          goto LABEL_437;
LABEL_434:
        v315 = *(_DWORD *)(v5 + 72);
        v316 = v21[1200];
        if (v21[1200])
LABEL_435:
          v316 = *(_DWORD *)(v5 + 5516);
LABEL_436:
        if (v315 <= v316)
        {
          DWORD2(v462[23]) = -1;
          v317 = (const webrtc::VideoCodec *)(v5 + 1640);
          memcpy((void *)(v5 + 1640), v462, 0x17DuLL);
          if ((v13 & 1) == 0)
          {
LABEL_438:
            webrtc::VideoStreamEncoder::OnEncoderSettingsChanged((webrtc::VideoStreamEncoder *)v5);
            if (!*(_BYTE *)(v5 + 496))
              goto LABEL_476;
            goto LABEL_439;
          }
LABEL_442:
          v321 = *(_QWORD *)(v5 + 488);
          if (!*(_BYTE *)(v5 + 496))
            goto LABEL_444;
LABEL_443:
          (*(void (**)(uint64_t))(*(_QWORD *)v321 + 48))(v321);
          *(_BYTE *)(v5 + 496) = 0;
          v321 = *(_QWORD *)(v5 + 488);
          goto LABEL_444;
        }
LABEL_437:
        v317 = (const webrtc::VideoCodec *)(v5 + 1640);
        memcpy((void *)(v5 + 1640), v462, 0x17DuLL);
        if (!(_DWORD)v13)
          goto LABEL_438;
        goto LABEL_442;
      }
    }
LABEL_645:
    v317 = (const webrtc::VideoCodec *)(v5 + 1640);
    memcpy((void *)(v5 + 1640), v462, 0x17DuLL);
    v321 = *(_QWORD *)(v5 + 488);
    if (*(_BYTE *)(v5 + 496))
      goto LABEL_443;
LABEL_444:
    v322 = *(_QWORD *)(v5 + 624);
    if (!v322)
      v322 = 1440;
    v323 = *(_DWORD *)(v5 + 72);
    v452[0] = *(_BYTE *)(v5 + 120);
    *(_DWORD *)&v452[4] = v323;
    *(_QWORD *)&v452[8] = v322;
    *(_DWORD *)&v452[16] = *(_DWORD *)(v5 + 5524);
    v452[20] = *(_BYTE *)(v5 + 5528);
    v324 = (*(uint64_t (**)(uint64_t, const webrtc::VideoCodec *, _BYTE *))(*(_QWORD *)v321 + 32))(v321, v317, v452);
    if ((_DWORD)v324)
    {
      v13 = v324;
      v229 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>();
      if ((v229 & 1) == 0)
      {
        if (*(_DWORD *)v317 >= 6u)
          goto LABEL_679;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v325, v326, v327, v328, v329, v330, v331, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
      }
      v332 = *(_QWORD *)(v5 + 488);
      if (v332 && *(_BYTE *)(v5 + 496))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v332 + 48))(v332);
        *(_BYTE *)(v5 + 496) = 0;
      }
    }
    else
    {
      *(_BYTE *)(v5 + 496) = 1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 488) + 40))(*(_QWORD *)(v5 + 488), v5 + 8);
      webrtc::FrameEncodeMetadataWriter::OnEncoderInit((pthread_mutex_t *)(v5 + 2160), v317);
      v2 = *(_QWORD *)(v5 + 2136);
      *(_QWORD *)(v5 + 2144) = v2;
      if (v22[32] <= 1u)
        v333 = 1;
      else
        v333 = v22[32];
      v334 = *(_QWORD *)(v5 + 2152) - v2;
      if (v333 <= v334 >> 2)
      {
        v345 = 4 * v333;
        v346 = v2 + 4 * v333;
        do
        {
          if (!v2)
            goto LABEL_641;
          *(_DWORD *)v2 = 3;
          v2 += 4;
          v345 -= 4;
        }
        while (v345);
        *(_QWORD *)(v5 + 2144) = v346;
      }
      else
      {
        v335 = v334 >> 1;
        if (v334 >> 1 <= v333)
          v335 = v333;
        v92 = (unint64_t)v334 >= 0x7FFFFFFFFFFFFFFCLL;
        v336 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v92)
          v336 = v335;
        if (v336 >> 62)
          goto LABEL_683;
        v13 = 4 * v336;
        v337 = (char *)operator new(4 * v336);
        v338 = &v337[4 * v333];
        v339 = (v333 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        v340 = v337;
        if (v339 < 7)
          goto LABEL_691;
        v341 = v339 + 1;
        v340 = &v337[4 * (v341 & 0x7FFFFFFFFFFFFFF8)];
        v342 = v337 + 16;
        *(_QWORD *)&v343 = 0x300000003;
        *((_QWORD *)&v343 + 1) = 0x300000003;
        v344 = v341 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          *(v342 - 1) = v343;
          *v342 = v343;
          v342 += 2;
          v344 -= 8;
        }
        while (v344);
        if (v341 != (v341 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_691:
          do
          {
            *(_DWORD *)v340 = 3;
            v340 += 4;
          }
          while (v340 != v338);
        }
        *(_QWORD *)(v5 + 2136) = v337;
        *(_QWORD *)(v5 + 2144) = v338;
        *(_QWORD *)(v5 + 2152) = &v337[v13];
        if (v2)
          operator delete((void *)v2);
      }
    }
    webrtc::FrameEncodeMetadataWriter::Reset((pthread_mutex_t *)(v5 + 2160));
    if (*(_BYTE *)(v5 + 1384))
      *(_BYTE *)(v5 + 1384) = 0;
    *(_BYTE *)(v5 + 1017) = 0;
    webrtc::VideoStreamEncoder::OnEncoderSettingsChanged((webrtc::VideoStreamEncoder *)v5);
    if (!*(_BYTE *)(v5 + 496))
    {
LABEL_476:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v318, v319, v320, v135, v136, v137, v138, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
      v347 = *(_QWORD *)(v5 + 504);
      *(_QWORD *)(v5 + 504) = 0;
      if (v347)
        (*(void (**)(uint64_t))(*(_QWORD *)v347 + 8))(v347);
      goto LABEL_480;
    }
LABEL_439:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v318, v319, v320, v135, v136, v137, v138, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
LABEL_480:
    if (*(_BYTE *)(v5 + 517))
    {
      webrtc::VideoStreamEncoderResourceManager::ConfigureEncodeUsageResource((webrtc::VideoStreamEncoderResourceManager *)(v5 + 2864), v318, v319, v320);
      *(_BYTE *)(v5 + 517) = 0;
    }
    switch(LODWORD(v462[0]))
    {
      case 1:
      case 2:
        LODWORD(v2) = v22[356];
        goto LABEL_492;
      case 3:
        if (WORD2(v462[23]) >= 0x100u)
        {
          v146 = BYTE4(v462[23]);
          if (BYTE4(v462[23]) >= 0x22u)
            goto LABEL_680;
        }
        else
        {
          LODWORD(v2) = 1;
        }
LABEL_492:
        *(_DWORD *)(v5 + 2024) = 1065185444;
        v348 = *(float *)(v5 + 2032);
        if (v348 >= 0.0033333 || v348 == -1.0)
          v348 = 0.0033333;
        *(float *)(v5 + 2028) = v348;
        *(_QWORD *)(v5 + 2036) = 0xBF8000003F666666;
        *(_QWORD *)(v5 + 2056) = 0;
        *(_QWORD *)(v5 + 2048) = 1097859072;
        *(_BYTE *)(v5 + 2072) = 0;
        *(_DWORD *)(v5 + 2076) = 1063675494;
        v350 = *(float *)(v5 + 2084);
        v351 = v350 >= 0.0 || v350 == -1.0;
        v352 = 0.0;
        if (v351)
          v350 = 0.0;
        *(float *)(v5 + 2080) = v350;
        *(_DWORD *)(v5 + 2088) = 0;
        v353 = DWORD2(v462[0]);
        v354 = (float)DWORD2(v462[0]);
        *(_BYTE *)(v5 + 2096) = 1;
        v355 = *(_DWORD *)(v5 + 512);
        *(float *)(v5 + 2064) = v354 * 0.5;
        if (v353 <= 0x12B && (float)(v354 * 0.5) < 0.0)
        {
          v352 = (float)(v354 / 300.0) * 0.0;
          *(float *)(v5 + 2060) = v352;
        }
        v356 = (float)v355;
        *(float *)(v5 + 2068) = v354;
        v357 = v354 * 3.0;
        if (v352 > v357)
          *(float *)(v5 + 2060) = v357;
        *(float *)(v5 + 2092) = v356;
        (*(void (**)(_BYTE *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(v5 + 32) + 16))(v452, *(_QWORD *)(v5 + 32), "WebRTC-FrameDropper", 19);
        if ((v452[23] & 0x80000000) == 0)
        {
          v358 = v452;
          v359 = v452[23];
          goto LABEL_514;
        }
        v359 = *(_QWORD *)&v452[8];
        if ((*(_QWORD *)&v452[8] & 0x8000000000000000) != 0)
          continue;
        v358 = *(_QWORD **)v452;
        if (*(_QWORD *)&v452[8])
        {
          if (!*(_QWORD *)v452)
            continue;
        }
LABEL_514:
        if (v359 >= 8)
        {
          v13 = *v358 == 0x64656C6261736944;
          if ((v452[23] & 0x80) == 0)
          {
LABEL_516:
            if ((v13 & 1) != 0)
              goto LABEL_517;
            goto LABEL_520;
          }
        }
        else
        {
          v13 = 0;
          if ((v452[23] & 0x80) == 0)
            goto LABEL_516;
        }
        operator delete(*(void **)v452);
        if ((v13 & 1) != 0)
        {
LABEL_517:
          v360 = 1;
          goto LABEL_526;
        }
LABEL_520:
        v360 = (int)v2 > 1 && DWORD1(v462[20]) == 1;
LABEL_526:
        *(_BYTE *)(v5 + 2104) = v360;
        (*(void (**)(void **__return_ptr))(**(_QWORD **)(v5 + 488) + 96))(v453);
        if (*(_BYTE *)(v5 + 214))
        {
          v362 = *(_QWORD *)(v5 + 32);
          v363 = operator new();
          v364 = (webrtc::EncoderBitrateAdjuster *)webrtc::EncoderBitrateAdjuster::EncoderBitrateAdjuster(v363, (int *)v462, v362);
          v2 = *(_QWORD *)(v5 + 2128);
          *(_QWORD *)(v5 + 2128) = v364;
          if (v2)
          {
            webrtc::EncoderBitrateAdjuster::~EncoderBitrateAdjuster((webrtc::EncoderBitrateAdjuster *)v2);
            MEMORY[0x20BD0ADEC]();
            v364 = *(webrtc::EncoderBitrateAdjuster **)(v5 + 2128);
          }
          webrtc::EncoderBitrateAdjuster::OnEncoderInfo(v364, (const webrtc::VideoEncoder::EncoderInfo *)v453, v365);
        }
        if (*(_QWORD *)(v5 + 504) && *(_BYTE *)(v5 + 1008))
        {
          *(_QWORD *)v452 = &off_24C0C3368;
          memcpy(&v452[8], (const void *)(v5 + 640), 0x170uLL);
          *(_BYTE *)(v5 + 1008) = 0;
          if (*(_DWORD *)(v5 + 512) == -1)
            LODWORD(v2) = 30;
          else
            LODWORD(v2) = *(_DWORD *)(v5 + 512);
          v366 = *(_QWORD *)(v5 + 272);
          if (v366)
          {
            v367 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v366 + 56))(v366);
            if ((v367 & 0xFF00000000) != 0)
            {
              if ((_DWORD)v367)
                LODWORD(v2) = v367;
            }
          }
          *(double *)&v452[344] = (double)v2;
          webrtc::VideoStreamEncoder::UpdateBitrateAllocation((uint64_t)&v441, v5, v452);
          webrtc::VideoStreamEncoder::SetEncoderRates(v5, (uint64_t)&v441);
        }
        (*(void (**)(_QWORD, int *, std::string *))(**(_QWORD **)(v5 + 248) + 56))(*(_QWORD *)(v5 + 248), v23, &__p);
        *(_BYTE *)(v5 + 516) = 0;
        v369 = *(_QWORD *)(v5 + 472);
        if (v369 < 2)
        {
LABEL_548:
          v375 = __p.__r_.__value_.__l.__size_;
          v2 = __p.__r_.__value_.__r.__words[0];
          if ((*v23 & 0xFFFFFFFE) != 2)
          {
            v379 = 0;
            goto LABEL_572;
          }
          if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
          {
            MaxBitrate = webrtc::SvcRateAllocator::GetMaxBitrate((webrtc::SvcRateAllocator *)v462, v368);
            v377 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
            {
              v378 = *(_DWORD *)(v2 + 28);
              if (v378 >= MaxBitrate)
                v378 = MaxBitrate;
              *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 28) = v378;
              *(_DWORD *)(v377 + 20) = 1000 * DWORD2(v462[10]);
              webrtc::SvcRateAllocator::GetLayerStartBitrates((webrtc::SvcRateAllocator *)v462, v452);
              if (*(_QWORD *)v452 >= 2uLL)
              {
                v380 = &v452[8];
                if ((v452[0] & 1) != 0)
                  v380 = *(_BYTE **)&v452[8];
                v13 = *(_QWORD *)&v380[8 * (*(_QWORD *)v452 >> 1) - 8];
                if ((v452[0] & 1) == 0)
                  goto LABEL_562;
              }
              else
              {
                v13 = 0;
                if (!*(_QWORD *)v452)
                  goto LABEL_562;
              }
              operator delete(*(void **)&v452[8]);
LABEL_562:
              v375 = __p.__r_.__value_.__l.__size_;
              v2 = __p.__r_.__value_.__r.__words[0];
              v381 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
              {
                *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 24) = v13;
                *(_OWORD *)v2 = *(_OWORD *)(v375 - 96);
                if (LODWORD(v462[0]) == 3)
                {
                  if (WORD2(v462[23]) >= 0x100u)
                  {
                    v149 = BYTE4(v462[23]);
                    if (BYTE4(v462[23]) >= 0x22u)
                      goto LABEL_688;
                    goto LABEL_570;
                  }
                }
                else if (LODWORD(v462[0]) == 2)
                {
                  v382 = v22[366];
                  goto LABEL_570;
                }
                v382 = 0;
LABEL_570:
                v379 = v382 > 1;
                if (0xAAAAAAAAAAAAAAABLL * (v381 >> 5) >= 2)
                {
                  v375 = v2 + 96;
                  __p.__r_.__value_.__l.__size_ = v2 + 96;
                }
                goto LABEL_572;
              }
            }
          }
          continue;
        }
        v370 = *(_QWORD *)(v5 + 448);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 456) - v370) >> 5) <= 1)
          v371 = 1;
        else
          v371 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 456) - v370) >> 5);
        v372 = (_BYTE *)(v370 + 178);
        v373 = v369 - 1;
        v374 = v371 - 1;
        while (1)
        {
          if (!v374)
            goto LABEL_641;
          if (*v372)
            break;
          v372 += 96;
          --v374;
          if (!--v373)
            goto LABEL_548;
        }
        v379 = 0;
        v375 = __p.__r_.__value_.__l.__size_;
        v2 = __p.__r_.__value_.__r.__words[0];
LABEL_572:
        v383 = *(_QWORD *)(v5 + 80);
        v438 = (void *)v2;
        v439 = v375;
        v440 = __p.__r_.__value_.__r.__words[2];
        memset(&__p, 0, sizeof(__p));
        (*(void (**)(uint64_t, void **, _BOOL8, _QWORD, _QWORD))(*(_QWORD *)v383 + 32))(v383, &v438, v379, *(unsigned int *)(v5 + 416), *(unsigned int *)(v5 + 432));
        if (v438)
        {
          v439 = (std::string::size_type)v438;
          operator delete(v438);
        }
        webrtc::VideoStreamEncoderResourceManager::ConfigureQualityScaler((webrtc::VideoStreamEncoderResourceManager *)(v5 + 2864), (const webrtc::VideoEncoder::EncoderInfo *)v453);
        if ((*(_DWORD *)(v5 + 2984) & 0xFFFFFFFD) == 1 && *v21 && *(_BYTE *)(v5 + 3929))
        {
          if (v456)
            v384 = v455 == 0;
          else
            v384 = 0;
          v385 = v384;
        }
        else
        {
          v385 = 0;
        }
        webrtc::VideoStreamEncoderResourceManager::UpdateBandwidthQualityScalerSettings((_QWORD *)(v5 + 2864), v385, &v454);
        v386 = *(_DWORD *)(v5 + 2984);
        v387 = v386 & 0xFFFFFFFD;
        v388 = v386 & 0xFFFFFFFE;
        if (*(_QWORD *)(*(_QWORD *)(v5 + 2920) + 120) || *(_QWORD *)(*(_QWORD *)(v5 + 2936) + 120))
        {
          v389 = (v387 == 1) | ((unint64_t)(v388 == 2) << 8);
          v390 = v389;
        }
        else
        {
          v390 = 0;
          v389 = (v387 == 1) | ((unint64_t)(v388 == 2) << 8);
        }
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v5 + 2976) + 80))(*(_QWORD *)(v5 + 2976), v389, v390);
        v391 = 0;
        v441.n128_u32[0] = 0;
        *(unsigned __int32 *)((char *)v441.n128_u32 + 3) = 0;
        LOBYTE(v437) = 0;
        if (*(_BYTE *)(v5 + 496))
        {
          v392 = *(_QWORD *)(v5 + 520);
          if (v392 < 2)
            goto LABEL_607;
        }
        else
        {
          v229 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
          if ((v229 & 1) == 0)
          {
            if (LODWORD(v462[0]) >= 6)
LABEL_679:
              rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v229);
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v399, v400, v401, v402, v403, v404, v405, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
          }
          if (v21[1193])
          {
            webrtc::VideoStreamEncoder::RequestEncoderSwitch((webrtc::VideoStreamEncoder *)v5);
            v391 = 0;
            v392 = *(_QWORD *)(v5 + 520);
            if (v392 < 2)
              goto LABEL_607;
          }
          else
          {
            *(unsigned __int32 *)((char *)v441.n128_u32 + 3) = 0;
            v441.n128_u32[0] = 0;
            v391 = 1;
            LOBYTE(v437) = 0;
            v392 = *(_QWORD *)(v5 + 520);
            if (v392 < 2)
              goto LABEL_607;
          }
        }
        v13 = v5 + 528;
        v2 = v5 + 528;
        if ((v392 & 1) != 0)
          v2 = *(_QWORD *)v13;
        v21 = &v452[24];
        v22 = (unsigned __int8 *)((16 * v392) & 0xFFFFFFFFFFFFFFE0);
        do
        {
          v393 = *(void (**)(unint64_t, _BYTE *))(v2 + 24);
          if (v393)
          {
            *(_DWORD *)v452 = v391;
            *(_OWORD *)&v452[8] = 0uLL;
            *(_DWORD *)&v452[24] = v441.n128_u32[0];
            *(_DWORD *)&v452[27] = *(unsigned __int32 *)((char *)v441.n128_u32 + 3);
            v452[31] = 0;
            *(_DWORD *)&v452[32] = 0;
            *(_WORD *)&v452[36] = v437;
            v452[38] = 0;
            v393(v2, v452);
            if ((v452[31] & 0x80000000) != 0)
              operator delete(*(void **)&v452[8]);
            (*(void (**)(uint64_t, unint64_t, unint64_t))(v2 + 16))(1, v2, v2);
            *(_QWORD *)(v2 + 16) = v3;
            *(_QWORD *)(v2 + 24) = 0;
          }
          v2 += 32;
          v22 -= 32;
        }
        while (v22);
        v394 = *(_QWORD *)(v5 + 520);
        v395 = v394 & 1;
        v396 = v5 + 528;
        if ((v394 & 1) != 0)
          v396 = *(_QWORD *)v13;
        if (v394 < 2)
          goto LABEL_604;
        if (!v396)
          continue;
        v397 = v394 >> 1;
        v398 = v396 + 32 * (v394 >> 1) - 32;
        do
        {
          --v397;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v398 + 16))(1, v398, v398);
          v398 -= 32;
        }
        while (v397);
        v395 = *(_QWORD *)(v5 + 520) & 1;
LABEL_604:
        if (v395)
          operator delete(*(void **)v13);
        *(_QWORD *)(v5 + 520) = 0;
LABEL_607:
        webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v453);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return;
      case 4:
        LODWORD(v2) = v22[360];
        goto LABEL_492;
      default:
        LODWORD(v2) = 1;
        if (!LODWORD(v462[0]) && v22[32])
          LODWORD(v2) = v22[48];
        goto LABEL_492;
    }
  }
}

void webrtc::VideoStreamEncoder::RequestEncoderSwitch(webrtc::VideoStreamEncoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  __int128 v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 13);
  v3 = *((_QWORD *)this + 30);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
  if (!v2)
    return;
  LOBYTE(v24) = 0;
  v33 = 0;
  if (!v3)
  {
    while (1)
    {
LABEL_31:
      HIBYTE(v13) = 3;
      {
        strcpy((char *)v12, "VP8");
        v17 = 0;
        v18 = 0;
        v24 = *(_OWORD *)v12;
        v15 = 0;
        v16 = &v17;
        v14[0] = 0;
        v14[1] = 0;
        v27 = 0;
        v28 = 0;
        v25 = v13;
        v26 = &v27;
        v29 = 0;
        v19 = 0;
        v33 = 1;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, 0);
        if (SHIBYTE(v15) < 0)
        {
          operator delete(v14[0]);
          if (SHIBYTE(v13) < 0)
          {
LABEL_38:
            operator delete(v12[0]);
            if (v33)
              goto LABEL_41;
            goto LABEL_39;
          }
        }
        else if (SHIBYTE(v13) < 0)
        {
          goto LABEL_38;
        }
        if (v33)
          goto LABEL_41;
      }
LABEL_39:
      __break(1u);
LABEL_40:
      operator delete(v14[0]);
      if (v33)
        goto LABEL_41;
    }
  }
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 30) + 40))(v14);
  if (v33 != v23)
  {
    if (v33)
    {
      if ((v29 & 1) != 0)
        operator delete((void *)v30);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v26, v27);
      if (SHIBYTE(v25) < 0)
        operator delete((void *)v24);
      v33 = 0;
      if (!v23)
        goto LABEL_30;
    }
    else
    {
      v24 = *(_OWORD *)v14;
      v11 = v15;
      v14[1] = 0;
      v15 = 0;
      v14[0] = 0;
      v25 = v11;
      v26 = v16;
      v27 = v17;
      v28 = v18;
      if (v18)
      {
        *(_QWORD *)(v17 + 16) = &v27;
        v16 = &v17;
        v17 = 0;
        v18 = 0;
      }
      else
      {
        v26 = &v27;
      }
      v30 = *(_OWORD *)__p;
      v31 = v21;
      v29 = v19;
      v32 = v22;
      v19 = 0;
      v33 = 1;
      if (!v23)
        goto LABEL_30;
    }
    goto LABEL_27;
  }
  if (v33)
  {
    if (SHIBYTE(v25) < 0)
      operator delete((void *)v24);
    v24 = *(_OWORD *)v14;
    v25 = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14[0]) = 0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v26, v27);
    v26 = v16;
    v27 = v17;
    v28 = v18;
    if (v18)
    {
      *(_QWORD *)(v17 + 16) = &v27;
      v16 = &v17;
      v17 = 0;
      v18 = 0;
      if ((v29 & 1) == 0)
        goto LABEL_12;
    }
    else
    {
      v26 = &v27;
      if ((v29 & 1) == 0)
      {
LABEL_12:
        v30 = *(_OWORD *)__p;
        v31 = v21;
        v29 = v19;
        v32 = v22;
        v19 = 0;
        if (!v23)
          goto LABEL_30;
LABEL_27:
        if ((v19 & 1) != 0)
          operator delete(__p[0]);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, v17);
        if (SHIBYTE(v15) < 0)
          goto LABEL_40;
        goto LABEL_30;
      }
    }
    operator delete((void *)v30);
    goto LABEL_12;
  }
LABEL_30:
  if (!v33)
    goto LABEL_31;
LABEL_41:
  (*(void (**)(_QWORD, __int128 *, uint64_t))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v24, 1);
  if (v33)
  {
    if ((v29 & 1) != 0)
      operator delete((void *)v30);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v26, v27);
    if (SHIBYTE(v25) < 0)
      operator delete((void *)v24);
  }
}

void webrtc::VideoStreamEncoder::OnEncoderSettingsChanged(webrtc::VideoStreamEncoder *this)
{
  char *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  const webrtc::VideoCodec *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t *SingleActiveLayerPixels;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t *v20[48];
  void *v21;
  int v22;
  _DWORD v23[52];
  _BYTE v24[384];
  __int128 v25[15];
  _BYTE v26[208];
  _BYTE v27[384];
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  int v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  void *v47[31];
  void *v48[22];
  __int128 __p;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD v57[3];
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  int v63;
  char v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  _BYTE v70[384];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 2808;
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 61) + 96))(v47);
  if (v2[1712]
    && v47[22] == v47[23]
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 57) - *((_QWORD *)this + 56)) >> 5) > 1)
  {
    webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)v48, (const webrtc::VideoEncoder::EncoderInfo *)v47);
    webrtc::EncoderInfoSettings::GetDefaultSinglecastBitrateLimits(*((_DWORD *)this + 70), &v51);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    __p = v51;
    v50 = v52;
  }
  else
  {
    webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)v48, (const webrtc::VideoEncoder::EncoderInfo *)v47);
  }
  webrtc::VideoEncoderConfig::VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v28, (webrtc::VideoStreamEncoder *)((char *)this + 280));
  memcpy(v20, (char *)this + 1640, sizeof(v20));
  webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)&v51, (const webrtc::VideoEncoder::EncoderInfo *)v48);
  v53 = v28;
  v54 = v29;
  v29 = 0uLL;
  v3 = v30;
  v30 = 0;
  v55 = v3;
  v56 = v31;
  v57[0] = v32;
  v57[1] = v33;
  if (v33)
  {
    *(_QWORD *)(v32 + 16) = v57;
    v31 = &v32;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v56 = v57;
  }
  v58 = v35;
  v59 = v36;
  v57[2] = v34;
  v60 = v37;
  v4 = v38;
  v34 = 0;
  v38 = 0uLL;
  v61 = v4;
  v62 = v39;
  v39 = 0uLL;
  v64 = v41;
  v63 = v40;
  v5 = v42;
  v42 = 0;
  v65 = v5;
  v66 = v43;
  v67 = v44;
  v68 = v45;
  v44 = 0uLL;
  v45 = 0;
  v69 = v46;
  memcpy(v70, v20, sizeof(v70));
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v28);
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v48);
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v47);
  webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)v25, (const webrtc::VideoEncoder::EncoderInfo *)&v51);
  webrtc::VideoEncoderConfig::VideoEncoderConfig((webrtc::VideoEncoderConfig *)v26, (const webrtc::VideoEncoderConfig *)&v53);
  memcpy(v27, v70, sizeof(v27));
  webrtc::VideoStreamEncoderResourceManager::SetEncoderSettings((uint64_t)this + 2864, v25);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)v26);
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)v25);
  webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)&v21, (const webrtc::VideoEncoder::EncoderInfo *)&v51);
  webrtc::VideoEncoderConfig::VideoEncoderConfig((webrtc::VideoEncoderConfig *)v23, (const webrtc::VideoEncoderConfig *)&v53);
  memcpy(v24, v70, sizeof(v24));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 2712));
  v6 = v22;
  *((_DWORD *)this + 700) = v23[0];
  *((_DWORD *)this + 701) = v6;
  SingleActiveLayerPixels = webrtc::VideoStreamAdapter::GetSingleActiveLayerPixels((webrtc::VideoStreamAdapter *)v24, v7, v8, v9, v10, v11, v12, v13, v20[0], (uint64_t)v20[1]);
  v15 = SingleActiveLayerPixels | 0x100000000;
  if (((unint64_t)SingleActiveLayerPixels & 0xFF00000000) == 0)
    v15 = 0;
  *(_DWORD *)v2 = v15;
  v2[4] = BYTE4(v15);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 2712));
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)v23);
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(&v21);
  v16 = v63;
  v17 = v63 == 1;
  v18 = *((_QWORD *)this + 354);
  *(_BYTE *)(v18 + 12) = v63 == 1;
  if (v17 && *(_DWORD *)(v18 + 8) == 3)
    v19 = 2;
  else
    v19 = *(_DWORD *)(v18 + 8);
  if (v19 != *(_DWORD *)(v18 + 16))
  {
    *(_DWORD *)(v18 + 16) = v19;
    webrtc::VideoStreamAdapter::SetDegradationPreference(*(_QWORD *)(v18 + 24), v19);
  }
  if (v16 == 1)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 34) + 48))(*((_QWORD *)this + 34), *((unsigned __int8 *)this + 1672), 1);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v53);
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v51);
}

void webrtc::VideoStreamEncoder::SetEncoderRates(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 **v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  double v72;
  unsigned __int8 *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned __int8 **v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned __int8 **v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unsigned __int8 **v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _OWORD *v100;
  _BYTE *v101;
  int v102;
  unsigned int *v103;
  uint64_t v104;
  unsigned int *v105;
  int v106;
  unsigned int *v107;
  int v108;
  unsigned int *v109;
  int v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  unsigned __int8 v138;
  _BYTE *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  BOOL v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  unint64_t v156;
  unint64_t v157;
  char v158;
  unsigned __int8 *v159;
  double v160;
  char *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int *v179;
  _QWORD *v180;
  char v181;
  unsigned int *v182;
  _QWORD *v183;
  char v184;
  unsigned int *v185;
  _QWORD *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  int v198;
  char *v199;
  uint64_t v200;
  unsigned int v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  std::string *v223;
  std::string *v224;
  char v225;
  _QWORD *v226;
  unsigned int *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  _BOOL4 v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  _OWORD *v250;
  int v251;
  int v252;
  int v253;
  unsigned __int8 *v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  void *v266[7];
  unint64_t v267;
  _QWORD v268[23];
  int v269;
  char v270;
  unint64_t v271;
  _QWORD v272[30];

  v272[28] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 1008))
  {
    v5 = 1;
    v4 = 1;
    goto LABEL_21;
  }
  if (webrtc::VideoBitrateAllocation::operator==(a2 + 176, a1 + 808)
    && *(double *)(a2 + 344) == *(double *)(a1 + 976))
  {
    v4 = *(_QWORD *)(a2 + 352) != *(_QWORD *)(a1 + 984);
    if (!*(_BYTE *)(a1 + 1008))
    {
LABEL_5:
      v5 = 1;
      goto LABEL_21;
    }
  }
  else
  {
    v4 = 1;
    if (!*(_BYTE *)(a1 + 1008))
      goto LABEL_5;
  }
  if (webrtc::VideoBitrateAllocation::operator==(a1 + 640, a2 + 8))
  {
    if (!*(_BYTE *)(a1 + 1008))
      goto LABEL_408;
    v5 = *(double *)(a1 + 976) != *(double *)(a2 + 344);
  }
  else
  {
    v5 = 1;
    if (!*(_BYTE *)(a1 + 1008))
      goto LABEL_21;
  }
  if (webrtc::VideoBitrateAllocation::operator==(a1 + 808, a2 + 176)
    && *(double *)(a1 + 976) == *(double *)(a2 + 344)
    && *(_QWORD *)(a1 + 984) == *(_QWORD *)(a2 + 352)
    && *(_QWORD *)(a1 + 992) == *(_QWORD *)(a2 + 360)
    && *(_QWORD *)(a1 + 1000) == *(_QWORD *)(a2 + 368))
  {
LABEL_19:
    if (!*(_QWORD *)(a1 + 488))
      return;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 1008))
  {
    memcpy((void *)(a1 + 640), (const void *)(a2 + 8), 0x170uLL);
    goto LABEL_19;
  }
LABEL_21:
  *(_QWORD *)(a1 + 632) = &off_24C0C3368;
  memcpy((void *)(a1 + 640), (const void *)(a2 + 8), 0x170uLL);
  *(_BYTE *)(a1 + 1008) = 1;
  if (!*(_QWORD *)(a1 + 488))
    return;
LABEL_22:
  if (*(_BYTE *)(a1 + 1672))
  {
    v6 = *(_BYTE *)(a2 + 16) ? *(_DWORD *)(a2 + 12) : 0;
    v7 = *(_BYTE *)(a2 + 24) ? *(_DWORD *)(a2 + 20) : 0;
    v8 = *(_BYTE *)(a2 + 32) ? *(_DWORD *)(a2 + 28) : 0;
    v9 = *(_BYTE *)(a2 + 40) ? *(_DWORD *)(a2 + 36) : 0;
    (*(void (**)(_QWORD, _QWORD, BOOL))(**(_QWORD **)(a1 + 272) + 72))(*(_QWORD *)(a1 + 272), 0, v7 + v6 + v8 + v9 != 0);
    if (*(_BYTE *)(a1 + 1672) != 1)
    {
      v10 = *(_BYTE *)(a2 + 48) ? *(_DWORD *)(a2 + 44) : 0;
      v11 = *(_BYTE *)(a2 + 56) ? *(_DWORD *)(a2 + 52) : 0;
      v12 = *(_BYTE *)(a2 + 64) ? *(_DWORD *)(a2 + 60) : 0;
      v13 = *(_BYTE *)(a2 + 72) ? *(_DWORD *)(a2 + 68) : 0;
      (*(void (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 272) + 72))(*(_QWORD *)(a1 + 272), 1, v11 + v10 + v12 + v13 != 0);
      if (*(_BYTE *)(a1 + 1672) != 2)
      {
        v14 = *(_BYTE *)(a2 + 80) ? *(_DWORD *)(a2 + 76) : 0;
        v15 = *(_BYTE *)(a2 + 88) ? *(_DWORD *)(a2 + 84) : 0;
        v16 = *(_BYTE *)(a2 + 96) ? *(_DWORD *)(a2 + 92) : 0;
        v17 = *(_BYTE *)(a2 + 104) ? *(_DWORD *)(a2 + 100) : 0;
        (*(void (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 272) + 72))(*(_QWORD *)(a1 + 272), 2, v15 + v14 + v16 + v17 != 0);
        if (*(_BYTE *)(a1 + 1672) != 3)
        {
          v18 = *(_BYTE *)(a2 + 112) ? *(_DWORD *)(a2 + 108) : 0;
          v19 = *(_BYTE *)(a2 + 120) ? *(_DWORD *)(a2 + 116) : 0;
          v20 = *(_BYTE *)(a2 + 128) ? *(_DWORD *)(a2 + 124) : 0;
          v21 = *(_BYTE *)(a2 + 136) ? *(_DWORD *)(a2 + 132) : 0;
          (*(void (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 272) + 72))(*(_QWORD *)(a1 + 272), 3, v19 + v18 + v20 + v21 != 0);
          if (*(_BYTE *)(a1 + 1672) != 4)
          {
            v22 = *(_BYTE *)(a2 + 144) ? *(_DWORD *)(a2 + 140) : 0;
            v23 = *(_BYTE *)(a2 + 152) ? *(_DWORD *)(a2 + 148) : 0;
            v24 = *(_BYTE *)(a2 + 160) ? *(_DWORD *)(a2 + 156) : 0;
            v25 = *(_BYTE *)(a2 + 168) ? *(_DWORD *)(a2 + 164) : 0;
            (*(void (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 272) + 72))(*(_QWORD *)(a1 + 272), 4, v23 + v22 + v24 + v25 != 0);
            if (*(_BYTE *)(a1 + 1672) != 5)
            {
              v224 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 73, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v26, v27, v28, v29, 5);
              webrtc::VideoStreamEncoder::UpdateBitrateAllocation(v224);
              return;
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(a2 + 176))
  {
    if (!v4)
      goto LABEL_360;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 488) + 64))(*(_QWORD *)(a1 + 488), a2);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 248) + 112))(*(_QWORD *)(a1 + 248), a1 + 1640, a2 + 176);
    webrtc::FrameEncodeMetadataWriter::OnSetRates((webrtc::FrameEncodeMetadataWriter *)(a1 + 2160), (const webrtc::VideoBitrateAllocation *)(a2 + 176), (*(double *)(a2 + 344) + 0.5));
    if (*(_BYTE *)(a1 + 3472))
    {
      memcpy((void *)(a1 + 3120), (const void *)(a2 + 8), 0x160uLL);
      *(_QWORD *)(*(_QWORD *)(a1 + 3088) + 576) = *(_QWORD *)(a2 + 352);
      if (!v5)
        goto LABEL_360;
    }
    else
    {
      *(_QWORD *)(a1 + 3112) = &off_24C0C3368;
      memcpy((void *)(a1 + 3120), (const void *)(a2 + 8), 0x160uLL);
      *(_BYTE *)(a1 + 3472) = 1;
      *(_QWORD *)(*(_QWORD *)(a1 + 3088) + 576) = *(_QWORD *)(a2 + 352);
      if (!v5)
        goto LABEL_360;
    }
    if (*(_DWORD *)(a1 + 128) != 2)
      goto LABEL_360;
    v236 = *(_QWORD *)(a1 + 80);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 488) + 96))(v266);
    v269 = 0;
    v270 = 0;
    v271 = 0;
    if (!*(_DWORD *)(a2 + 8))
      goto LABEL_357;
    v34 = *(unsigned __int8 *)(a1 + 1672);
    if (v34 >= 2)
    {
      v35 = 0;
      v36 = 0;
      v270 = 1;
      v37 = (unsigned __int8 **)v268;
      v38 = a1;
      while (1)
      {
        if (v35 == 160)
        {
          v223 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 62, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v30, v31, v32, v33, 5);
          rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v223);
        }
        v39 = a2 + v35;
        if (*(_BYTE *)(a2 + v35 + 16))
          break;
        if (!*(_BYTE *)(v39 + 24) && !*(_BYTE *)(a2 + v35 + 32) && !*(_BYTE *)(a2 + v35 + 40))
          goto LABEL_98;
        v41 = 0;
        v40 = (unsigned int *)(a2 + v35 + 12);
        v42 = a2 + v35;
        v43 = *(unsigned __int8 *)(a2 + v35 + 24);
        if (*(_BYTE *)(a2 + v35 + 24))
          goto LABEL_102;
LABEL_103:
        v44 = *(unsigned __int8 *)(v42 + 32);
        if (*(_BYTE *)(v42 + 32))
          v44 = *(_DWORD *)(v42 + 28);
        v45 = a2 + v35;
        v46 = *(unsigned __int8 *)(a2 + v35 + 40);
        if (*(_BYTE *)(a2 + v35 + 40))
          v46 = *(_DWORD *)(v45 + 36);
        if (v43 + v41 + v44 + v46)
        {
          if (v271 >> 1 != 4)
          {
            if (v272)
            {
              v47 = &v272[7 * (v271 >> 1)];
              v47[6] = 0;
              *((_OWORD *)v47 + 1) = 0uLL;
              *((_OWORD *)v47 + 2) = 0uLL;
              *(_OWORD *)v47 = 0uLL;
              v48 = v271 + 2;
              v271 = v48;
              if (v48 > 1)
                goto LABEL_111;
            }
LABEL_408:
            __break(1u);
          }
          absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::EmplaceBackSlow<>((uint64_t)&v271);
          v48 = v271;
          if (v271 <= 1)
            goto LABEL_408;
LABEL_111:
          if ((v48 & 1) != 0)
            v49 = (_QWORD *)v272[0];
          else
            v49 = v272;
          v50 = (v48 >> 1) - 1;
          v51 = &v49[7 * v50];
          v52 = *(_QWORD *)(v38 + 1676);
          *((_WORD *)v51 + 25) = WORD2(v52);
          *((_WORD *)v51 + 24) = v52;
          *(_DWORD *)v51 = v36;
          *((_DWORD *)v51 + 1) = 0;
          v53 = (unint64_t)*(v37 - 1);
          if ((v53 & 0xFFFFFFFFFFFFFFFELL) == 2)
          {
            v54 = *(unsigned __int8 *)(v39 + 16);
            if (*(_BYTE *)(v39 + 16))
              v54 = *v40;
            v55 = *(unsigned __int8 *)(v42 + 24);
            if (*(_BYTE *)(v42 + 24))
              v55 = *(_DWORD *)(v42 + 20);
            v56 = *(unsigned __int8 *)(v42 + 32);
            if (*(_BYTE *)(v42 + 32))
              v56 = *(_DWORD *)(v42 + 28);
            if (*(_BYTE *)(v45 + 40))
            {
              v57 = *(_DWORD *)(v45 + 36);
              v58 = &v49[7 * v50 + 1];
              v59 = (uint64_t)&v49[7 * v50 + 2];
              v60 = *v58;
              if ((*v58 & 1) == 0)
                goto LABEL_123;
LABEL_136:
              v59 = v58[1];
              v61 = v58[2];
            }
            else
            {
              v57 = 0;
              v58 = &v49[7 * v50 + 1];
              v59 = (uint64_t)&v49[7 * v50 + 2];
              v60 = *v58;
              if ((*v58 & 1) != 0)
                goto LABEL_136;
LABEL_123:
              v61 = 4;
            }
            v69 = (v55 + v54 + v56 + v57);
            if (v60 >> 1 == v61)
            {
              absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)v58, v69);
              v70 = (unint64_t)*(v37 - 1);
              if (v70 <= 1)
                goto LABEL_408;
            }
            else
            {
              if (!v59)
                goto LABEL_408;
              *(_QWORD *)(v59 + 8 * (v60 >> 1)) = v69;
              *v58 += 2;
              v70 = (unint64_t)*(v37 - 1);
              if (v70 <= 1)
                goto LABEL_408;
            }
            v71 = (unsigned __int8 *)v37;
            if ((v70 & 1) != 0)
              v71 = *v37;
            v62 = *v71;
LABEL_143:
            v72 = *(double *)(a2 + 344) * (double)v62 / 255.0;
            __asm { BR              X11 }
          }
          if (!*(_BYTE *)(v38 + 1688) || !*(_BYTE *)(v39 + 16))
          {
            v62 = 255;
            goto LABEL_143;
          }
          if (v53 >= 2)
          {
            v73 = (unsigned __int8 *)v37;
            if ((v53 & 1) != 0)
              v73 = *v37;
            v62 = *v73;
            v74 = &v49[7 * v50];
            v64 = v74 + 1;
            v65 = v74 + 2;
            v66 = v74[1];
            if ((v66 & 1) == 0)
              goto LABEL_147;
LABEL_133:
            v67 = (_QWORD *)v64[1];
            v68 = v64[2];
          }
          else
          {
            v62 = 255;
            v63 = &v49[7 * v50];
            v64 = v63 + 1;
            v65 = v63 + 2;
            v66 = v63[1];
            if ((v66 & 1) != 0)
              goto LABEL_133;
LABEL_147:
            v67 = v65;
            v68 = 4;
          }
          v75 = *v40;
          v76 = v66 >> 1;
          if (v76 == v68)
          {
            v94 = v64;
            v251 = *v40;
            v240 = v65;
            v243 = v49;
            v238 = v50;
            v246 = v62;
            absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)v64, v75);
            v50 = v238;
            v65 = v240;
            v64 = v94;
            v62 = v246;
            v49 = v243;
            LODWORD(v75) = v251;
            if (*(unsigned __int8 *)(v38 + 1688) < 2u)
              goto LABEL_143;
          }
          else
          {
            if (!v67)
              goto LABEL_408;
            v67[v76] = v75;
            *v64 += 2;
            if (*(unsigned __int8 *)(v38 + 1688) < 2u)
              goto LABEL_143;
          }
          if (!*(_BYTE *)(a2 + v35 + 24))
            goto LABEL_143;
          v77 = (unint64_t)*(v37 - 1);
          if (v77 >= 4)
          {
            v78 = v37;
            if ((v77 & 1) != 0)
              v78 = (unsigned __int8 **)*v37;
            v62 = *((unsigned __int8 *)v78 + 1);
          }
          if ((*v64 & 1) != 0)
          {
            v79 = (_QWORD *)v64[1];
            v80 = v64[2];
          }
          else
          {
            v79 = v65;
            v80 = 4;
          }
          v81 = (*(_DWORD *)(v42 + 20) + v75);
          v82 = *v64 >> 1;
          if (v82 == v80)
          {
            v95 = v64;
            v252 = v81;
            v241 = v65;
            v244 = v49;
            v239 = v50;
            v247 = v62;
            absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)v64, v81);
            v50 = v239;
            v65 = v241;
            v64 = v95;
            v62 = v247;
            v49 = v244;
            LODWORD(v81) = v252;
            if (*(unsigned __int8 *)(v38 + 1688) < 3u)
              goto LABEL_143;
          }
          else
          {
            if (!v79)
              goto LABEL_408;
            v79[v82] = v81;
            *v64 += 2;
            if (*(unsigned __int8 *)(v38 + 1688) < 3u)
              goto LABEL_143;
          }
          if (!*(_BYTE *)(a2 + v35 + 32))
            goto LABEL_143;
          v83 = (unint64_t)*(v37 - 1);
          if (v83 >= 6)
          {
            v84 = v37;
            if ((v83 & 1) != 0)
              v84 = (unsigned __int8 **)*v37;
            v62 = *((unsigned __int8 *)v84 + 2);
          }
          if ((*v64 & 1) != 0)
          {
            v85 = (_QWORD *)v64[1];
            v86 = v64[2];
          }
          else
          {
            v85 = v65;
            v86 = 4;
          }
          v87 = (*(_DWORD *)(v42 + 28) + v81);
          v88 = *v64 >> 1;
          if (v88 == v86)
          {
            v96 = v64;
            v253 = v87;
            v242 = v65;
            v245 = v49;
            v97 = v50;
            v248 = v62;
            absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)v64, v87);
            v65 = v242;
            v49 = v245;
            v64 = v96;
            v62 = v248;
            v50 = v97;
            LODWORD(v87) = v253;
            if (*(unsigned __int8 *)(v38 + 1688) < 4u)
              goto LABEL_143;
          }
          else
          {
            if (!v85)
              goto LABEL_408;
            v85[v88] = v87;
            *v64 += 2;
            if (*(unsigned __int8 *)(v38 + 1688) < 4u)
              goto LABEL_143;
          }
          if (!*(_BYTE *)(a2 + v35 + 40))
            goto LABEL_143;
          v89 = (unint64_t)*(v37 - 1);
          if (v89 >= 8)
          {
            v90 = v37;
            if ((v89 & 1) != 0)
              v90 = (unsigned __int8 **)*v37;
            v62 = *((unsigned __int8 *)v90 + 3);
          }
          v91 = *v64;
          if ((*v64 & 1) != 0)
          {
            v65 = (_QWORD *)v64[1];
            v92 = v64[2];
          }
          else
          {
            v92 = 4;
          }
          v93 = (*(_DWORD *)(v45 + 36) + v87);
          if (v91 >> 1 == v92)
          {
            v98 = v49;
            v99 = v50;
            v249 = v62;
            absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)v64, v93);
            v62 = v249;
            v50 = v99;
            v49 = v98;
            if (*(unsigned __int8 *)(v38 + 1688) <= 4u)
              goto LABEL_143;
          }
          else
          {
            if (!v65)
              goto LABEL_408;
            v65[v91 >> 1] = v93;
            *v64 += 2;
            if (*(unsigned __int8 *)(v38 + 1688) <= 4u)
              goto LABEL_143;
          }
LABEL_355:
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 48, "temporal_index < kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, (uint64_t)v49, v50, v32, v33, 4);
LABEL_356:
          operator delete(v100);
LABEL_357:
          (*(void (**)(uint64_t, int *))(*(_QWORD *)v236 + 48))(v236, &v269);
          if (v271)
            absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::DestroyContents(&v271);
          webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v266);
LABEL_360:
          v187 = *(_DWORD *)(a1 + 128);
          if (!v187 || v187 == 1 && *(_DWORD *)(a1 + 416) == 1)
          {
            v188 = *(_QWORD *)(a1 + 80);
            (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 488) + 96))(v266);
            if (*(_DWORD *)(a2 + 8))
            {
              v189 = 0;
              v190 = 0;
              LODWORD(v255) = 0;
              BYTE4(v255) = 0;
              BYTE8(v255) = 0;
              BYTE12(v255) = 0;
              LOBYTE(v256) = 0;
              BYTE4(v256) = 0;
              BYTE8(v256) = 0;
              BYTE12(v256) = 0;
              LOBYTE(v257) = 0;
              BYTE4(v257) = 0;
              BYTE8(v257) = 0;
              BYTE12(v257) = 0;
              LOBYTE(v258) = 0;
              BYTE4(v258) = 0;
              BYTE8(v258) = 0;
              BYTE12(v258) = 0;
              LOBYTE(v259) = 0;
              BYTE4(v259) = 0;
              BYTE8(v259) = 0;
              BYTE12(v259) = 0;
              LOBYTE(v260) = 0;
              BYTE4(v260) = 0;
              BYTE8(v260) = 0;
              BYTE12(v260) = 0;
              LOBYTE(v261) = 0;
              BYTE4(v261) = 0;
              BYTE8(v261) = 0;
              BYTE12(v261) = 0;
              LOBYTE(v262) = 0;
              BYTE4(v262) = 0;
              BYTE8(v262) = 0;
              BYTE12(v262) = 0;
              LOBYTE(v263) = 0;
              BYTE4(v263) = 0;
              BYTE8(v263) = 0;
              BYTE12(v263) = 0;
              LOBYTE(v264) = 0;
              BYTE4(v264) = 0;
              BYTE8(v264) = 0;
              v191 = &v267;
              BYTE12(v264) = 0;
              LOBYTE(v265) = 0;
              while (1)
              {
                v192 = *v191;
                v191 += 3;
                if ((v192 & 0xFFFFFFFFFFFFFFFELL) != 2)
                {
                  if (*(_BYTE *)(a2 + v189 + 16))
                  {
                    v202 = (char *)&v255 + v189;
                    v203 = v190;
                    if (*((_BYTE *)&v255 + v189 + 8))
                      v203 = v190 - *((unsigned int *)v202 + 1);
                    v204 = *(unsigned int *)(a2 + v189 + 12);
                    v205 = v203 + v204;
                    if (v205 <= 0xFFFFFFFFLL)
                    {
                      *((_DWORD *)v202 + 1) = v204;
                      v202[8] = 1;
                      v190 = v205;
                      LODWORD(v255) = v205;
                    }
                  }
LABEL_382:
                  v206 = a2 + v189;
                  if (*(_BYTE *)(a2 + v189 + 24))
                  {
                    v207 = (char *)&v255 + v189;
                    v208 = v190;
                    if (*((_BYTE *)&v255 + v189 + 16))
                      v208 = v190 - *((unsigned int *)v207 + 3);
                    v209 = *(unsigned int *)(v206 + 20);
                    v210 = v208 + v209;
                    if (v210 <= 0xFFFFFFFFLL)
                    {
                      *((_DWORD *)v207 + 3) = v209;
                      v207[16] = 1;
                      v190 = v210;
                      LODWORD(v255) = v210;
                    }
                  }
                  if (*(_BYTE *)(v206 + 32))
                  {
                    v211 = (char *)&v255 + v189;
                    v212 = v190;
                    if (*((_BYTE *)&v256 + v189 + 8))
                      v212 = v190 - *((unsigned int *)v211 + 5);
                    v213 = *(unsigned int *)(a2 + v189 + 28);
                    v214 = v212 + v213;
                    if (v214 <= 0xFFFFFFFFLL)
                    {
                      *((_DWORD *)v211 + 5) = v213;
                      v211[24] = 1;
                      v190 = v214;
                      LODWORD(v255) = v214;
                    }
                  }
                  if (*(_BYTE *)(a2 + v189 + 40))
                  {
                    v215 = (char *)&v255 + v189;
                    v216 = v190;
                    if (*((_BYTE *)&v257 + v189))
                      v216 = v190 - *((unsigned int *)v215 + 7);
                    v217 = *(unsigned int *)(a2 + v189 + 36);
                    if (v216 + v217 <= 0xFFFFFFFFLL)
                    {
                      *((_DWORD *)v215 + 7) = v217;
                      v215[32] = 1;
                      v190 = (v216 + v217);
                      LODWORD(v255) = v216 + v217;
                    }
                  }
                  goto LABEL_365;
                }
                if (*(_BYTE *)(a2 + v189 + 16))
                  break;
                if (!*(_BYTE *)(a2 + v189 + 24) && !*(_BYTE *)(a2 + v189 + 32) && !*(_BYTE *)(a2 + v189 + 40))
                  goto LABEL_382;
                v193 = 0;
                v194 = a2 + v189;
                v195 = *(unsigned __int8 *)(a2 + v189 + 24);
                if (*(_BYTE *)(a2 + v189 + 24))
                  goto LABEL_369;
LABEL_370:
                if (!*(_BYTE *)(v194 + 32))
                {
                  v196 = 0;
                  v197 = a2 + v189;
                  v198 = *(unsigned __int8 *)(a2 + v189 + 40);
                  if (!*(_BYTE *)(a2 + v189 + 40))
                    goto LABEL_373;
LABEL_372:
                  v198 = *(_DWORD *)(v197 + 36);
                  goto LABEL_373;
                }
                v196 = *(_DWORD *)(v194 + 28);
                v197 = a2 + v189;
                v198 = *(unsigned __int8 *)(a2 + v189 + 40);
                if (*(_BYTE *)(a2 + v189 + 40))
                  goto LABEL_372;
LABEL_373:
                v199 = (char *)&v255 + v189;
                v200 = v190;
                if (*((_BYTE *)&v255 + v189 + 8))
                  v200 = v190 - *((unsigned int *)v199 + 1);
                v201 = v195 + v193 + v196 + v198;
                if (v200 + v201 <= 0xFFFFFFFFLL)
                {
                  *((_DWORD *)v199 + 1) = v201;
                  v199[8] = 1;
                  v190 = v200 + v201;
                  LODWORD(v255) = v200 + v201;
                }
LABEL_365:
                v189 += 32;
                if (v189 == 160)
                {
                  BYTE4(v265) = *(_BYTE *)(a2 + 172);
                  goto LABEL_406;
                }
              }
              v193 = *(_DWORD *)(a2 + v189 + 12);
              v194 = a2 + v189;
              v195 = *(unsigned __int8 *)(a2 + v189 + 24);
              if (!*(_BYTE *)(a2 + v189 + 24))
                goto LABEL_370;
LABEL_369:
              v195 = *(_DWORD *)(v194 + 20);
              goto LABEL_370;
            }
            v218 = *(_OWORD *)(a2 + 152);
            v263 = *(_OWORD *)(a2 + 136);
            v264 = v218;
            v265 = *(_QWORD *)(a2 + 168);
            v219 = *(_OWORD *)(a2 + 88);
            v259 = *(_OWORD *)(a2 + 72);
            v260 = v219;
            v220 = *(_OWORD *)(a2 + 120);
            v261 = *(_OWORD *)(a2 + 104);
            v262 = v220;
            v221 = *(_OWORD *)(a2 + 24);
            v255 = *(_OWORD *)(a2 + 8);
            v256 = v221;
            v222 = *(_OWORD *)(a2 + 56);
            v257 = *(_OWORD *)(a2 + 40);
            v258 = v222;
LABEL_406:
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v188 + 40))(v188, &v255);
            webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v266);
          }
          return;
        }
LABEL_98:
        ++v36;
        v35 += 32;
        v38 += 36;
        v37 += 3;
        if (v36 >= v34)
          goto LABEL_357;
      }
      v40 = (unsigned int *)(a2 + 32 * v36 + 12);
      v41 = *(_DWORD *)(v39 + 12);
      v42 = a2 + v35;
      v43 = *(unsigned __int8 *)(a2 + v35 + 24);
      if (!*(_BYTE *)(a2 + v35 + 24))
        goto LABEL_103;
LABEL_102:
      v43 = *(_DWORD *)(v42 + 20);
      goto LABEL_103;
    }
    if (v34 != 1)
      goto LABEL_357;
    v237 = *(_DWORD *)(a1 + 1640) == 2 && *(_DWORD *)(a1 + 2008) == 1;
    v100 = operator new(0x20uLL);
    v250 = v100;
    *v100 = 0u;
    v100[1] = 0u;
    v270 = 1;
    v101 = (_BYTE *)(a2 + 16);
    if (*(_BYTE *)(a2 + 16))
    {
      v103 = (unsigned int *)(a2 + 12);
      v102 = *(_DWORD *)(a2 + 12);
      v104 = a2;
      v105 = (unsigned int *)(a2 + 20);
      v106 = *(unsigned __int8 *)(a2 + 24);
      if (!*(_BYTE *)(a2 + 24))
      {
LABEL_204:
        v107 = (unsigned int *)(v104 + 28);
        v108 = *(unsigned __int8 *)(v104 + 32);
        if (v108)
          v108 = *v107;
        v109 = (unsigned int *)(a2 + 36);
        v110 = *(unsigned __int8 *)(a2 + 40);
        if (*(_BYTE *)(a2 + 40))
          v110 = *v109;
        if (!(v106 + v102 + v108 + v110))
          goto LABEL_356;
        v111 = (_QWORD *)v272[0];
        v112 = v272[1];
        if ((v271 & 1) == 0)
        {
          v111 = v272;
          v112 = 4;
        }
        if (v271 >> 1 == v112)
        {
          absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::EmplaceBackSlow<>((uint64_t)&v271);
          v100 = v250;
          v109 = (unsigned int *)(a2 + 36);
          v114 = v271;
          if (v271 <= 1)
            goto LABEL_408;
        }
        else
        {
          if (!v111)
            goto LABEL_408;
          v113 = &v111[7 * (v271 >> 1)];
          v113[6] = 0;
          *((_OWORD *)v113 + 1) = 0u;
          *((_OWORD *)v113 + 2) = 0u;
          *(_OWORD *)v113 = 0u;
          v114 = v271 + 2;
          v271 = v114;
          if (v114 <= 1)
            goto LABEL_408;
        }
        if ((v114 & 1) != 0)
          v115 = (_QWORD *)v272[0];
        else
          v115 = v272;
        v116 = (v114 >> 1) - 1;
        v117 = &v115[7 * v116];
        v118 = *(_QWORD *)(a1 + 1784);
        *((_WORD *)v117 + 25) = WORD2(v118);
        *((_WORD *)v117 + 24) = v118;
        *(_DWORD *)v117 = 0;
        *((_DWORD *)v117 + 1) = 0;
        if ((v267 & 0xFFFFFFFFFFFFFFFELL) == 2)
        {
          v119 = *v101;
          if (*v101)
            v119 = *v103;
          v120 = *((unsigned __int8 *)v105 + 4);
          if (*((_BYTE *)v105 + 4))
            v120 = *v105;
          v121 = *((unsigned __int8 *)v107 + 4);
          if (*((_BYTE *)v107 + 4))
            v121 = *v107;
          v122 = *((unsigned __int8 *)v109 + 4);
          if (*((_BYTE *)v109 + 4))
            v122 = *v109;
          v123 = (v120 + v119 + v121 + v122);
          v124 = *(_QWORD *)v100;
          v125 = *(_QWORD *)v100 + v123;
          if (*(_QWORD *)v100 == 0x8000000000000000)
            v125 = *(_QWORD *)v100;
          if (v124 != 0x7FFFFFFFFFFFFFFFLL)
            v124 = v125;
          *(_QWORD *)v100 = v124;
          v126 = &v115[7 * v116];
          v129 = v126[1];
          v127 = v126 + 1;
          v128 = v129;
          v130 = v127 + 1;
          if (v237)
          {
            if ((v128 & 1) != 0)
            {
              v130 = (_QWORD *)v127[1];
              v131 = v127[2];
            }
            else
            {
              v131 = 4;
            }
            v156 = v128 >> 1;
            if (v156 != v131)
            {
              if (!v130)
                goto LABEL_408;
              v130[v156] = v124;
              goto LABEL_295;
            }
            v123 = v124;
          }
          else
          {
            if ((v128 & 1) != 0)
            {
              v130 = (_QWORD *)v127[1];
              v154 = v127[2];
            }
            else
            {
              v154 = 4;
            }
            v157 = v128 >> 1;
            if (v157 != v154)
            {
              if (!v130)
                goto LABEL_408;
              v130[v157] = v123;
LABEL_295:
              *v127 += 2;
              v158 = v267;
              if (v267 <= 1)
                goto LABEL_408;
LABEL_296:
              v159 = (unsigned __int8 *)v268;
              if ((v158 & 1) != 0)
                v159 = (unsigned __int8 *)v268[0];
              v138 = *v159;
              goto LABEL_299;
            }
          }
          absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)v127, v123);
          v158 = v267;
          if (v267 <= 1)
            goto LABEL_408;
          goto LABEL_296;
        }
        if (!*(_BYTE *)(a1 + 1796))
          goto LABEL_286;
        v254 = (unsigned __int8 *)(a1 + 1796);
        v132 = v268;
        v133 = &v115[7 * v116];
        v134 = v133 + 1;
        v135 = v133 + 2;
        if (v237)
        {
          v136 = 0;
          v137 = 0;
          v138 = -1;
          v139 = (_BYTE *)(a2 + 16);
          do
          {
            if (v137 == 4)
              goto LABEL_355;
            if (!*v139)
              break;
            if (v137 < v267 >> 1)
            {
              v140 = v132;
              if ((v267 & 1) != 0)
                v140 = (_QWORD *)*v132;
              v138 = *((_BYTE *)v140 + v137);
            }
            v141 = v136 + *((unsigned int *)v139 - 1);
            if (v136 == 0x8000000000000000)
              v141 = 0x8000000000000000;
            if (v136 != 0x7FFFFFFFFFFFFFFFLL)
              v136 = v141;
            v142 = *((_QWORD *)v100 + v137);
            v143 = v142 == 0x8000000000000000 || v136 == 0x8000000000000000;
            v144 = v136 + v142;
            if (v143)
              v144 = 0x8000000000000000;
            v145 = v136 == 0x7FFFFFFFFFFFFFFFLL || v142 == 0x7FFFFFFFFFFFFFFFLL;
            v146 = v145 ? 0x7FFFFFFFFFFFFFFFLL : v144;
            if ((*v134 & 1) != 0)
            {
              v147 = (_QWORD *)v134[1];
              v148 = v134[2];
            }
            else
            {
              v147 = v135;
              v148 = 4;
            }
            v149 = *v134 >> 1;
            if (v149 == v148)
            {
              v228 = v135;
              v232 = v134;
              v226 = v132;
              absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)v134, v146);
              v132 = v226;
              v135 = v228;
              v134 = v232;
            }
            else
            {
              if (!v147)
                goto LABEL_408;
              v147[v149] = v146;
              *v134 += 2;
            }
            v100 = v250;
            v150 = *((_QWORD *)v250 + v137);
            v151 = v150 == 0x8000000000000000 || v136 == 0x8000000000000000;
            v152 = v150 + v136;
            if (v151)
              v152 = 0x8000000000000000;
            if (v150 == 0x7FFFFFFFFFFFFFFFLL)
              v153 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v153 = v152;
            if (v136 == 0x7FFFFFFFFFFFFFFFLL)
              v153 = 0x7FFFFFFFFFFFFFFFLL;
            *((_QWORD *)v250 + v137++) = v153;
            v139 += 8;
          }
          while (v137 < *v254);
          goto LABEL_299;
        }
        if (!*v101)
        {
LABEL_286:
          v138 = -1;
          goto LABEL_299;
        }
        if (v267 >= 2)
        {
          v161 = (char *)v268;
          if ((v267 & 1) != 0)
            v161 = (char *)v268[0];
          v155 = *v161;
        }
        else
        {
          v155 = -1;
        }
        if ((*v134 & 1) != 0)
        {
          v162 = (_QWORD *)v134[1];
          v163 = v134[2];
        }
        else
        {
          v162 = v135;
          v163 = 4;
        }
        v164 = *v103;
        v165 = *v134 >> 1;
        if (v165 == v163)
        {
          v229 = *v103;
          v233 = v134;
          v225 = v155;
          v179 = v109;
          v180 = v135;
          absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)v134, v164);
          v132 = v268;
          v164 = v229;
          v135 = v180;
          v109 = v179;
          v155 = v225;
          v134 = v233;
          if (*v254 < 2u)
            goto LABEL_353;
        }
        else
        {
          if (!v162)
            goto LABEL_408;
          v162[v165] = v164;
          *v134 += 2;
          if (*v254 < 2u)
            goto LABEL_353;
        }
        if (*(_BYTE *)(a2 + 24))
        {
          if (v267 >= 4)
          {
            v166 = v268;
            if ((v267 & 1) != 0)
              v166 = (_QWORD *)v268[0];
            v155 = *((_BYTE *)v166 + 1);
          }
          if ((*v134 & 1) != 0)
          {
            v167 = (_QWORD *)v134[1];
            v168 = v134[2];
          }
          else
          {
            v167 = v135;
            v168 = 4;
          }
          v169 = v164 + *v105;
          v170 = *v134 >> 1;
          if (v170 == v168)
          {
            v230 = v169;
            v234 = v134;
            v227 = v107;
            v181 = v155;
            v182 = v109;
            v183 = v135;
            absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)v134, v169);
            v132 = v268;
            v135 = v183;
            v109 = v182;
            v155 = v181;
            v107 = v227;
            v169 = v230;
            v134 = v234;
            if (*v254 < 3u)
              goto LABEL_353;
          }
          else
          {
            if (!v167)
              goto LABEL_408;
            v167[v170] = v169;
            *v134 += 2;
            if (*v254 < 3u)
              goto LABEL_353;
          }
          if (*(_BYTE *)(a2 + 32))
          {
            if (v267 >= 6)
            {
              v171 = v268;
              if ((v267 & 1) != 0)
                v171 = (_QWORD *)v268[0];
              v155 = *((_BYTE *)v171 + 2);
            }
            if ((*v134 & 1) != 0)
            {
              v172 = (_QWORD *)v134[1];
              v173 = v134[2];
            }
            else
            {
              v172 = v135;
              v173 = 4;
            }
            v174 = v169 + *v107;
            v175 = *v134 >> 1;
            if (v175 == v173)
            {
              v231 = v174;
              v235 = v134;
              v184 = v155;
              v185 = v109;
              v186 = v135;
              absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)v134, v174);
              v132 = v268;
              v135 = v186;
              v109 = v185;
              v155 = v184;
              v174 = v231;
              v134 = v235;
              if (*v254 < 4u)
                goto LABEL_353;
            }
            else
            {
              if (!v172)
                goto LABEL_408;
              v172[v175] = v174;
              *v134 += 2;
              if (*v254 < 4u)
                goto LABEL_353;
            }
            if (*(_BYTE *)(a2 + 40))
            {
              if (v267 >= 8)
              {
                if ((v267 & 1) != 0)
                  v132 = (_QWORD *)v268[0];
                v155 = *((_BYTE *)v132 + 3);
              }
              v176 = *v134;
              if ((*v134 & 1) != 0)
              {
                v135 = (_QWORD *)v134[1];
                v177 = v134[2];
              }
              else
              {
                v177 = 4;
              }
              v178 = v174 + *v109;
              if (v176 >> 1 == v177)
              {
                v138 = v155;
                absl::inlined_vector_internal::Storage<long long,4ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)v134, v178);
                if (*v254 > 4u)
                  goto LABEL_355;
              }
              else
              {
                if (!v135)
                  goto LABEL_408;
                v138 = v155;
                v135[v176 >> 1] = v178;
                *v134 += 2;
                if (*v254 > 4u)
                  goto LABEL_355;
              }
LABEL_299:
              v160 = *(double *)(a2 + 344) * (double)v138 / 255.0;
              __asm { BR              X11 }
            }
          }
        }
LABEL_353:
        v138 = v155;
        goto LABEL_299;
      }
    }
    else
    {
      if (!*(_BYTE *)(a2 + 24) && !*(_BYTE *)(a2 + 32) && !*(_BYTE *)(a2 + 40))
        goto LABEL_356;
      v102 = 0;
      v103 = (unsigned int *)(a2 + 12);
      v104 = a2;
      v105 = (unsigned int *)(a2 + 20);
      v106 = *(unsigned __int8 *)(a2 + 24);
      if (!*(_BYTE *)(a2 + 24))
        goto LABEL_204;
    }
    v106 = *v105;
    goto LABEL_204;
  }
}

void webrtc::VideoStreamEncoder::UpdateBitrateAllocation(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  webrtc::EncoderBitrateAdjuster *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *__p;
  char v34;
  void *v35;
  char v36;
  char v37;
  const char *v38;
  uint64_t v39;
  char *v40;
  _QWORD v41[3];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[21];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[21];

  LODWORD(v52) = 0;
  BYTE4(v52) = 0;
  BYTE8(v52) = 0;
  BYTE12(v52) = 0;
  LOBYTE(v53) = 0;
  BYTE4(v53) = 0;
  BYTE8(v53) = 0;
  BYTE12(v53) = 0;
  LOBYTE(v54) = 0;
  BYTE4(v54) = 0;
  BYTE8(v54) = 0;
  BYTE12(v54) = 0;
  LOBYTE(v55) = 0;
  BYTE4(v55) = 0;
  BYTE8(v55) = 0;
  BYTE12(v55) = 0;
  LOBYTE(v56) = 0;
  BYTE4(v56) = 0;
  BYTE8(v56) = 0;
  BYTE12(v56) = 0;
  LOBYTE(v57) = 0;
  BYTE4(v57) = 0;
  BYTE8(v57) = 0;
  BYTE12(v57) = 0;
  LOBYTE(v58) = 0;
  BYTE4(v58) = 0;
  BYTE8(v58) = 0;
  BYTE12(v58) = 0;
  LOBYTE(v59) = 0;
  BYTE4(v59) = 0;
  BYTE8(v59) = 0;
  BYTE12(v59) = 0;
  LOBYTE(v60) = 0;
  BYTE4(v60) = 0;
  BYTE8(v60) = 0;
  BYTE12(v60) = 0;
  v61[0] = 0;
  v61[4] = 0;
  v61[8] = 0;
  v61[12] = 0;
  v61[16] = 0;
  v61[20] = 0;
  v6 = *(_QWORD *)(a2 + 504);
  if (v6 && (uint64_t)a3[45] >= 1)
  {
    v7 = a3[46];
    v8 = a3[43];
    v41[0] = a3[45];
    v41[1] = v7;
    v41[2] = v8;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v6 + 24))(&v42, v6, v41);
    v60 = v50;
    *(_OWORD *)v61 = *(_OWORD *)v51;
    *(_QWORD *)&v61[13] = *(_QWORD *)&v51[13];
    v56 = v46;
    v57 = v47;
    v58 = v48;
    v59 = v49;
    v52 = v42;
    v53 = v43;
    v54 = v44;
    v55 = v45;
  }
  *(_QWORD *)a1 = &off_24C0C3368;
  memcpy((void *)(a1 + 8), a3 + 1, 0x170uLL);
  v9 = v60;
  *(_OWORD *)(a1 + 120) = v59;
  v10 = v59;
  *(_OWORD *)(a1 + 136) = v60;
  v11 = *(_OWORD *)v61;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)v61;
  v12 = v56;
  *(_OWORD *)(a1 + 56) = v55;
  v13 = v55;
  *(_OWORD *)(a1 + 72) = v56;
  v14 = v58;
  *(_OWORD *)(a1 + 88) = v57;
  v15 = v57;
  *(_OWORD *)(a1 + 104) = v58;
  v16 = v53;
  *(_OWORD *)(a1 + 8) = v52;
  v17 = v52;
  *(_OWORD *)(a1 + 24) = v53;
  v18 = v54;
  *(_OWORD *)(a1 + 40) = v54;
  *(_OWORD *)(a1 + 304) = v9;
  *(_OWORD *)(a1 + 320) = v11;
  *(_OWORD *)(a1 + 240) = v12;
  *(_OWORD *)(a1 + 256) = v15;
  *(_OWORD *)(a1 + 272) = v14;
  *(_OWORD *)(a1 + 288) = v10;
  *(_OWORD *)(a1 + 176) = v17;
  *(_OWORD *)(a1 + 192) = v16;
  *(_QWORD *)(a1 + 165) = *(_QWORD *)&v61[13];
  *(_QWORD *)(a1 + 333) = *(_QWORD *)&v61[13];
  *(_OWORD *)(a1 + 208) = v18;
  *(_OWORD *)(a1 + 224) = v13;
  v19 = *(unsigned int *)(a1 + 176);
  if (*(_QWORD *)(a1 + 352) > v19)
    v19 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v19;
  v20 = *(webrtc::EncoderBitrateAdjuster **)(a2 + 2128);
  if (v20)
  {
    webrtc::EncoderBitrateAdjuster::AdjustRateAllocation(v20, (const webrtc::VideoEncoder::RateControlParameters *)a1, (unsigned int *)&v42);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    {
      v38 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc";
      v39 = 13240;
      v40 = &v37;
      webrtc::VideoBitrateAllocation::ToString((webrtc::VideoBitrateAllocation *)&v52, (char *)&v35);
      webrtc::VideoBitrateAllocation::ToString((webrtc::VideoBitrateAllocation *)&v42, (char *)&__p);
      rtc::webrtc_logging_impl::Log("\r\t\a\t\n\t\n", v21, v22, v23, v24, v25, v26, v27, (uint64_t)v38);
      if (v34 < 0)
      {
        operator delete(__p);
        if ((v36 & 0x80000000) == 0)
          goto LABEL_10;
      }
      else if ((v36 & 0x80000000) == 0)
      {
        goto LABEL_10;
      }
      operator delete(v35);
    }
LABEL_10:
    v28 = *(_OWORD *)v51;
    *(_OWORD *)(a1 + 304) = v50;
    *(_OWORD *)(a1 + 320) = v28;
    *(_QWORD *)(a1 + 333) = *(_QWORD *)&v51[13];
    v29 = v47;
    *(_OWORD *)(a1 + 240) = v46;
    *(_OWORD *)(a1 + 256) = v29;
    v30 = v49;
    *(_OWORD *)(a1 + 272) = v48;
    *(_OWORD *)(a1 + 288) = v30;
    v31 = v43;
    *(_OWORD *)(a1 + 176) = v42;
    *(_OWORD *)(a1 + 192) = v31;
    v32 = v45;
    *(_OWORD *)(a1 + 208) = v44;
    *(_OWORD *)(a1 + 224) = v32;
  }
}

uint64_t webrtc::VideoStreamEncoder::DropDueToSize(webrtc::VideoStreamEncoder *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __n128 v8;
  void *v9;
  int64_t v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int32 *v17;
  int v18;
  _BOOL4 v20;
  _BOOL4 v21;
  void *v22;
  __n128 v23;
  void *v24[31];
  void *v25[22];
  void *__p;
  __n128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  result = *((_QWORD *)this + 61);
  if (!result)
    return result;
  v4 = *((_QWORD *)this + 386);
  if (*(int *)(v4 + 560) > 3)
    return 0;
  if (!*((_BYTE *)this + 620))
    return 0;
  v5 = *(_QWORD *)(v4 + 564);
  if ((v5 & 0xFF00000000) == 0)
    return 0;
  if (v5 >= a2)
    v6 = a2;
  else
    v6 = *(_QWORD *)(v4 + 564);
  if (!*(_BYTE *)(v4 + 572) || (v7 = *(_QWORD *)(v4 + 576), v7 < 1))
    LODWORD(v7) = *((_DWORD *)this + 154);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)result + 96))(v24);
  if (*((_BYTE *)this + 4520)
    && v24[22] == v24[23]
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 57) - *((_QWORD *)this + 56)) >> 5) > 1)
  {
    webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)v25, (const webrtc::VideoEncoder::EncoderInfo *)v24);
    webrtc::EncoderInfoSettings::GetDefaultSinglecastBitrateLimits(*((_DWORD *)this + 70), &v22);
    if (__p)
    {
      v27.n128_u64[0] = (unint64_t)__p;
      operator delete(__p);
    }
    v9 = v22;
    __p = v22;
    v8 = v23;
    v27 = v23;
    v10 = v23.n128_u64[0] - (_QWORD)v22;
    if ((void *)v23.n128_u64[0] != v22)
      goto LABEL_15;
LABEL_22:
    v11 = 0;
    v12 = 0;
    goto LABEL_23;
  }
  webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)v25, (const webrtc::VideoEncoder::EncoderInfo *)v24);
  v9 = __p;
  v10 = v27.n128_u64[0] - (_QWORD)__p;
  if ((void *)v27.n128_u64[0] == __p)
    goto LABEL_22;
LABEL_15:
  if (v10 < 0)
    abort();
  v11 = (__n128 *)operator new(v10);
  v12 = &v11[v10 >> 4];
  memcpy(v11, v9, v10);
LABEL_23:
  v13 = v12 - v11;
  v14 = 126 - 2 * __clz(v13);
  if (v12 == v11)
    v15 = 0;
  else
    v15 = v14;
  std::__introsort<std::_ClassicAlgPolicy,webrtc::VideoEncoder::EncoderInfo::GetEncoderBitrateLimitsForResolution(int)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits *,false>((uint64_t)v11, v12, v15, 1, v8);
  if (v12 == v11)
  {
    v18 = 0;
    if (!v11)
      goto LABEL_38;
  }
  else
  {
    if (v13 <= 1)
      v16 = 1;
    else
      v16 = v12 - v11;
    v17 = &v11->n128_u32[1];
    while ((int)*(v17 - 1) < v6)
    {
      v17 += 4;
      if (!--v16)
      {
        v18 = 0;
        goto LABEL_37;
      }
    }
    LODWORD(v12) = *v17;
    v18 = 1;
  }
LABEL_37:
  operator delete(v11);
LABEL_38:
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v25);
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v24);
  v20 = v6 > 307200 && v7 < 0x7A120;
  if (v7 <= 0x493DF)
    v21 = v6 > 76800;
  else
    v21 = v20;
  if (v18)
    return v7 < v12;
  else
    return v21;
}

void webrtc::VideoStreamEncoder::EncodeVideoFrame(webrtc::VideoStreamEncoder *this, const webrtc::VideoFrame *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  void **p_s1;
  webrtc::EncoderBitrateAdjuster *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  webrtc::EncoderBitrateAdjuster *v37;
  unint64_t v38;
  webrtc::VideoStreamEncoder *v39;
  _QWORD *v40;
  unint64_t v41;
  webrtc::VideoStreamEncoder *v42;
  _QWORD *v43;
  unint64_t v44;
  webrtc::VideoStreamEncoder *v45;
  _QWORD *v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unsigned int *v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  std::string::size_type v78;
  std::string::size_type v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  _QWORD *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  int v141;
  std::string v142;
  uint64_t v143;
  int v144;
  int v145;
  void *__p;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  _BYTE v150[28];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char v155;
  char v156;
  _BYTE v157[29];
  unsigned int *v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  unsigned __int8 v162;
  void *__s1;
  size_t __n;
  unsigned __int8 v165;
  unsigned __int8 v166;
  unint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  _QWORD *v170;
  unint64_t v171;
  _QWORD *v172;
  unint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  _QWORD *v176;
  char *v177;
  char v178;
  char v179;
  uint64_t v180;

  v180 = *MEMORY[0x24BDAC8D0];
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
  if (!*((_BYTE *)this + 1018))
  {
    if (*((_BYTE *)this + 496))
    {
      v13 = *((_QWORD *)this + 61);
      if (v13)
      {
        *((_BYTE *)this + 1016) = 0;
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v13 + 96))(&v161);
        v14 = v165;
        if ((v165 & 0x80u) == 0)
          v15 = v165;
        else
          v15 = __n;
        v16 = *((unsigned __int8 *)this + 1439);
        v17 = (char)v16;
        if ((v16 & 0x80u) != 0)
          v16 = *((_QWORD *)this + 178);
        if (v15 == v16)
        {
          if (v17 >= 0)
            v18 = (unsigned __int8 *)this + 1416;
          else
            v18 = (unsigned __int8 *)*((_QWORD *)this + 177);
          if ((v165 & 0x80) == 0)
          {
            if (v165)
            {
              p_s1 = &__s1;
              while (*(unsigned __int8 *)p_s1 == *v18)
              {
                p_s1 = (void **)((char *)p_s1 + 1);
                ++v18;
                if (!--v14)
                  goto LABEL_23;
              }
              goto LABEL_24;
            }
LABEL_23:
            if (v166 == *((unsigned __int8 *)this + 1441))
              goto LABEL_26;
            goto LABEL_24;
          }
          if (!memcmp(__s1, v18, __n))
            goto LABEL_23;
        }
LABEL_24:
        (*(void (**)(_QWORD, void **, _QWORD))(**((_QWORD **)this + 31) + 40))(*((_QWORD *)this + 31), &__s1, v166);
        v20 = (webrtc::EncoderBitrateAdjuster *)*((_QWORD *)this + 266);
        if (v20)
          webrtc::EncoderBitrateAdjuster::Reset(v20);
LABEL_26:
        if (!webrtc::VideoEncoder::EncoderInfo::operator==((_BOOL8)this + 1392, (uint64_t)&v161))
        {
          webrtc::VideoStreamEncoder::OnEncoderSettingsChanged(this);
          webrtc::VideoStreamEncoderResourceManager::ConfigureEncodeUsageResource((webrtc::VideoStreamEncoder *)((char *)this + 2864), v22, v23, v24);
          webrtc::VideoStreamEncoderResourceManager::ConfigureQualityScaler((webrtc::VideoStreamEncoder *)((char *)this + 2864), (const webrtc::VideoEncoder::EncoderInfo *)&v161);
          if ((*((_DWORD *)this + 746) & 0xFFFFFFFD) == 1 && *((_BYTE *)this + 4320) && *((_BYTE *)this + 3929))
          {
            if (v179)
              v25 = v178 == 0;
            else
              v25 = 0;
            v26 = v25;
          }
          else
          {
            v26 = 0;
          }
          webrtc::VideoStreamEncoderResourceManager::UpdateBandwidthQualityScalerSettings((_QWORD *)this + 358, v26, &v177);
          v27 = *((_DWORD *)this + 746);
          v28 = v27 & 0xFFFFFFFD;
          v29 = v27 & 0xFFFFFFFE;
          if (*(_QWORD *)(*((_QWORD *)this + 365) + 120) || *(_QWORD *)(*((_QWORD *)this + 367) + 120))
          {
            (*(void (**)(_QWORD, unint64_t, unint64_t))(**((_QWORD **)this + 372) + 80))(*((_QWORD *)this + 372), (v28 == 1) | ((unint64_t)(v29 == 2) << 8), (v28 == 1) | ((unint64_t)(v29 == 2) << 8));
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
              goto LABEL_43;
          }
          else
          {
            (*(void (**)(_QWORD, unint64_t, _QWORD))(**((_QWORD **)this + 372) + 80))(*((_QWORD *)this + 372), (v28 == 1) | ((unint64_t)(v29 == 2) << 8), 0);
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
              goto LABEL_43;
          }
          webrtc::VideoEncoder::EncoderInfo::ToString((webrtc::VideoEncoder::EncoderInfo *)&v161, (unint64_t *)&__p);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
          if (SBYTE7(v148) < 0)
            operator delete(__p);
        }
LABEL_43:
        v37 = (webrtc::EncoderBitrateAdjuster *)*((_QWORD *)this + 266);
        if (v37)
        {
          v38 = *((_QWORD *)this + 181);
          if (v167 >> 1 != v38 >> 1)
            goto LABEL_84;
          v39 = (v38 & 1) != 0
              ? (webrtc::VideoStreamEncoder *)*((_QWORD *)this + 182)
              : (webrtc::VideoStreamEncoder *)((char *)this + 1456);
          v40 = (v167 & 1) != 0 ? v168 : &v168;
          if (memcmp(v40, v39, v167 >> 1))
            goto LABEL_84;
          v41 = *((_QWORD *)this + 184);
          if (v169 >> 1 != v41 >> 1)
            goto LABEL_84;
          v42 = (v41 & 1) != 0
              ? (webrtc::VideoStreamEncoder *)*((_QWORD *)this + 185)
              : (webrtc::VideoStreamEncoder *)((char *)this + 1480);
          v43 = (v169 & 1) != 0 ? v170 : &v170;
          if (memcmp(v43, v42, v169 >> 1))
            goto LABEL_84;
          v44 = *((_QWORD *)this + 187);
          if (v171 >> 1 != v44 >> 1)
            goto LABEL_84;
          v45 = (v44 & 1) != 0
              ? (webrtc::VideoStreamEncoder *)*((_QWORD *)this + 188)
              : (webrtc::VideoStreamEncoder *)((char *)this + 1504);
          v46 = (v171 & 1) != 0 ? v172 : &v172;
          if (memcmp(v46, v45, v171 >> 1)
            || (v47 = *((_QWORD *)this + 190), v173 >> 1 != v47 >> 1)
            || ((v47 & 1) != 0 ? (v48 = (char *)*((_QWORD *)this + 191)) : (v48 = (char *)this + 1528),
                (v173 & 1) != 0 ? (v49 = v174) : (v49 = &v174),
                memcmp(v49, v48, v173 >> 1)
             || (v50 = *((_QWORD *)this + 193), v175 >> 1 != v50 >> 1)
             || ((v50 & 1) != 0 ? (v51 = (char *)*((_QWORD *)this + 194)) : (v51 = (char *)this + 1552),
                 (v175 & 1) != 0 ? (v52 = v176) : (v52 = &v176),
                 memcmp(v52, v51, v175 >> 1))))
          {
LABEL_84:
            webrtc::EncoderBitrateAdjuster::OnEncoderInfo(v37, (const webrtc::VideoEncoder::EncoderInfo *)&v161, v21);
          }
        }
        webrtc::VideoEncoder::EncoderInfo::operator=((uint64_t)this + 1392, &v161);
        v53 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
        v54 = v53 / 0x3E8uLL;
        if (v53 % 0x3E8uLL > 0x1F3)
          ++v54;
        if (-v53 % 0x3E8uLL <= 0x1F4)
          v55 = 0;
        else
          v55 = -1;
        if (v53 < 0)
          v54 = v55 - -v53 / 0x3E8uLL;
        *((_QWORD *)this + 172) = v54;
        *((_BYTE *)this + 1384) = 1;
        LOWORD(__p) = *(_WORD *)a2;
        v56 = *((_QWORD *)a2 + 1);
        v147 = v56;
        if (v56)
          (**(void (***)(uint64_t))v56)(v56);
        v57 = *((_OWORD *)a2 + 2);
        v148 = *((_OWORD *)a2 + 1);
        v149 = v57;
        *(_OWORD *)v150 = *((_OWORD *)a2 + 3);
        *(_OWORD *)&v150[12] = *(_OWORD *)((char *)a2 + 60);
        LOBYTE(v151) = 0;
        v156 = 0;
        if (*((_BYTE *)a2 + 144))
        {
          v58 = *(_OWORD *)((char *)a2 + 92);
          v59 = *(_OWORD *)((char *)a2 + 124);
          v153 = *(_OWORD *)((char *)a2 + 108);
          v154 = v59;
          v155 = *((_BYTE *)a2 + 140);
          v151 = *(_OWORD *)((char *)a2 + 76);
          v152 = v58;
          v156 = 1;
        }
        *(_OWORD *)v157 = *(_OWORD *)((char *)a2 + 148);
        *(_OWORD *)&v157[13] = *(_OWORD *)((char *)a2 + 161);
        v60 = (unsigned int *)*((_QWORD *)a2 + 23);
        v158 = v60;
        if (v60)
        {
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        v159 = *((_OWORD *)a2 + 12);
        v160 = *((_QWORD *)a2 + 26);
        if (*((int *)this + 152) <= 0 && *((int *)this + 153) < 1)
          goto LABEL_112;
        if (v56)
          (**(void (***)(uint64_t))v56)(v56);
        v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
        v63 = v162;
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
        if (!v62 && v63 != 0)
        {
LABEL_112:
          v74 = v56;
          if (*((_BYTE *)this + 1312))
            goto LABEL_113;
          goto LABEL_154;
        }
        v65 = *((_QWORD *)a2 + 1);
        if (v65)
        {
          v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 40))(v65);
          v67 = *((_QWORD *)a2 + 1);
          v68 = (v66 - *((_DWORD *)this + 152));
          if (v67)
          {
            v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 48))(v67);
            v70 = *((_QWORD *)a2 + 1);
            v71 = (int *)((char *)this + 612);
            v72 = (v69 - *((_DWORD *)this + 153));
            if (v70)
            {
              v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
              v70 = *((_QWORD *)a2 + 1);
              if (v70)
                v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(v70);
            }
            else
            {
              v73 = 0;
            }
LABEL_121:
            if (*((_BYTE *)a2 + 176))
              v78 = *((_QWORD *)a2 + 21);
            else
              v78 = v73 | (unint64_t)(v70 << 32);
            if (*((_BYTE *)a2 + 176))
              v79 = *((_QWORD *)a2 + 20);
            else
              v79 = 0;
            v142.__r_.__value_.__r.__words[0] = v79;
            v142.__r_.__value_.__l.__size_ = v78;
            v80 = *((_DWORD *)this + 152);
            if (v80 >= 4)
            {
              v82 = *((_QWORD *)a2 + 1);
            }
            else
            {
              v81 = *v71;
              v82 = *((_QWORD *)a2 + 1);
              if (v81 <= 3)
              {
                if (v80 >= -1)
                  v83 = v80 + 1;
                else
                  v83 = v80 + 2;
                v84 = v83 >> 1;
                if (v81 >= -1)
                  v85 = v81 + 1;
                else
                  v85 = v81 + 2;
                v86 = v85 >> 1;
                v87 = v84 & 1;
                if (v84 < 0)
                  v87 = -v87;
                v88 = (v84 - v87);
                v89 = v86 & 1;
                if (v86 < 0)
                  v89 = -v89;
                v90 = (v86 - v89);
                if (v82)
                  (**(void (***)(uint64_t))v82)(v82);
                (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v82 + 72))(&v143, v82, v88, v90, v68, v72, v68, v72);
                v141 = v72;
                v91 = v90;
                v92 = v88;
                v74 = v143;
                v143 = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
                LODWORD(v142.__r_.__value_.__l.__data_) = v79 - v92;
                HIDWORD(v142.__r_.__value_.__r.__words[0]) = HIDWORD(v79) - v91;
                v143 = 0;
                v144 = v68;
                v145 = v141;
                webrtc::VideoFrame::UpdateRect::Intersect((int *)&v142, (int *)&v143);
                goto LABEL_147;
              }
            }
            if (v82)
              (**(void (***)(uint64_t))v82)(v82);
            v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
            v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 48))(v82);
            (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v82 + 72))(&v143, v82, 0, 0, v93, v94, v68, v72);
            v74 = v143;
            v143 = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
            if (v78)
            {
              v142.__r_.__value_.__r.__words[0] = 0;
              v142.__r_.__value_.__l.__size_ = __PAIR64__(v72, v68);
            }
LABEL_147:
            if (!v74)
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                rtc::webrtc_logging_impl::Log("\r\t", v98, v99, v100, v101, v102, v103, v104, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
              goto LABEL_199;
            }
            (**(void (***)(uint64_t))v74)(v74);
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
            v147 = v74;
            *(_OWORD *)&v157[12] = *(_OWORD *)&v142.__r_.__value_.__l.__data_;
            if (!v157[28])
              v157[28] = 1;
            v95 = *((_QWORD *)a2 + 5);
            *((_QWORD *)&v148 + 1) = *((_QWORD *)a2 + 3);
            *((_QWORD *)&v149 + 1) = v95;
            v150[0] = *((_BYTE *)a2 + 48);
            if (*((_DWORD *)this + 326) || *((_DWORD *)this + 327))
            {
              v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
              v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 48))(v74);
              *((_QWORD *)this + 162) = 0;
              *((_DWORD *)this + 326) = v96;
              *((_DWORD *)this + 327) = v97;
              *((_BYTE *)this + 1312) = 0;
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
            if (*((_BYTE *)this + 1312))
            {
LABEL_113:
              if (!*((_DWORD *)this + 326) && !*((_DWORD *)this + 327) || !v157[28])
              {
LABEL_192:
                *((_BYTE *)this + 1312) = 1;
                webrtc::OveruseFrameDetector::FrameCaptured(*(_QWORD *)(*((_QWORD *)this + 364) + 120), (uint64_t)&__p, a3);
                webrtc::FrameEncodeMetadataWriter::OnEncodeStarted((pthread_mutex_t *)((char *)this + 2160), (const webrtc::VideoFrame *)&__p);
                v124 = (*(uint64_t (**)(_QWORD, void **, char *))(**((_QWORD **)this + 61) + 56))(*((_QWORD *)this + 61), &__p, (char *)this + 2136);
                *((_BYTE *)this + 1017) = 1;
                if (v124 < 0)
                {
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                  {
                    webrtc::SdpVideoFormat::ToString((webrtc::VideoStreamEncoder *)((char *)this + 288), &v142);
                    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v127, v128, v129, v130, v131, v132, v133, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
                    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v142.__r_.__value_.__l.__data_);
                  }
                  webrtc::VideoStreamEncoder::RequestEncoderSwitch(this);
                }
                else
                {
                  v125 = (_BYTE *)*((_QWORD *)this + 267);
                  v126 = (_BYTE *)*((_QWORD *)this + 268);
                  if (v125 != v126)
                    memset_pattern16(v125, &unk_208F097F0, (v126 - v125) & 0xFFFFFFFFFFFFFFFCLL);
                }
LABEL_199:
                v134 = v158;
                if (v158)
                {
                  do
                  {
                    v135 = __ldaxr(v134);
                    v136 = v135 - 1;
                  }
                  while (__stlxr(v136, v134));
                  if (!v136)
                  {
                    v137 = *((_QWORD *)v134 + 1);
                    if (v137)
                    {
                      v138 = *((_QWORD *)v134 + 2);
                      v139 = (void *)*((_QWORD *)v134 + 1);
                      if (v138 != v137)
                      {
                        do
                        {
                          v140 = *(void **)(v138 - 96);
                          if (v140)
                          {
                            *(_QWORD *)(v138 - 88) = v140;
                            operator delete(v140);
                          }
                          v138 -= 104;
                        }
                        while (v138 != v137);
                        v139 = (void *)*((_QWORD *)v134 + 1);
                      }
                      *((_QWORD *)v134 + 2) = v137;
                      operator delete(v139);
                    }
                    MEMORY[0x20BD0ADEC](v134, 0x1020C40E72D6CFBLL);
                  }
                }
                if (v147)
                  (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
                webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)&v161);
                return;
              }
              if (v74)
              {
                v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
                v76 = v147;
                if (v147)
                {
                  v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 48))(v147);
LABEL_160:
                  v105 = v75 | (unint64_t)(v77 << 32);
                  if (v157[28])
                  {
                    v105 = *(_QWORD *)&v157[20];
                    v106 = *(_QWORD *)&v157[12];
                  }
                  else
                  {
                    v106 = 0;
                  }
                  v107 = HIDWORD(v105);
                  if (v105)
                  {
                    if (*((_QWORD *)this + 163))
                    {
                      v108 = HIDWORD(v106);
                      v109 = *((_DWORD *)this + 324);
                      v110 = v106 + v105;
                      if (v109 + *((_DWORD *)this + 326) > v110)
                        v110 = v109 + *((_DWORD *)this + 326);
                      v111 = *((_DWORD *)this + 325);
                      v112 = HIDWORD(v106) + v107;
                      if (v111 + *((_DWORD *)this + 327) > v112)
                        v112 = v111 + *((_DWORD *)this + 327);
                      if ((int)v106 >= v109)
                        LODWORD(v106) = *((_DWORD *)this + 324);
                      *((_DWORD *)this + 324) = v106;
                      if ((int)v108 >= v111)
                        v113 = v111;
                      else
                        v113 = v108;
                      *((_DWORD *)this + 325) = v113;
                      *((_DWORD *)this + 326) = v110 - v106;
                      *((_DWORD *)this + 327) = v112 - v113;
                    }
                    else
                    {
                      *((_QWORD *)this + 162) = v106;
                      *((_QWORD *)this + 163) = v105;
                    }
                  }
                  if (v76)
                  {
                    LODWORD(v76) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
                    v114 = v147;
                    if (v147)
                      v114 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 48))(v147);
                  }
                  else
                  {
                    v114 = 0;
                  }
                  v115 = (_QWORD *)((char *)this + 1296);
                  if (!(v76 | v114) || !*((_QWORD *)this + 163))
                    goto LABEL_188;
                  v116 = *((_DWORD *)this + 324);
                  v117 = v116 + *((_DWORD *)this + 326);
                  if ((int)v76 < v117)
                    v117 = v76;
                  v118 = *((_DWORD *)this + 325);
                  v119 = v118 + *((_DWORD *)this + 327);
                  if (v114 < v119)
                    v119 = v114;
                  v120 = v116 & ~(v116 >> 31);
                  *((_DWORD *)this + 324) = v120;
                  v121 = v118 & ~(v118 >> 31);
                  *((_DWORD *)this + 325) = v121;
                  v122 = v117 - v120;
                  *((_DWORD *)this + 326) = v122;
                  v123 = v119 - v121;
                  *((_DWORD *)this + 327) = v123;
                  if (v122 < 1 || v123 <= 0)
                  {
LABEL_188:
                    *v115 = 0;
                    *((_QWORD *)this + 163) = 0;
                  }
                  *(_OWORD *)&v157[12] = *(_OWORD *)v115;
                  if (!v157[28])
                    v157[28] = 1;
                  *v115 = 0;
                  *((_QWORD *)this + 163) = 0;
                  goto LABEL_192;
                }
              }
              else
              {
                v76 = 0;
                v75 = 0;
              }
              v77 = 0;
              goto LABEL_160;
            }
LABEL_154:
            if (v157[28])
              v157[28] = 0;
            goto LABEL_192;
          }
        }
        else
        {
          v68 = -*((_DWORD *)this + 152);
        }
        v73 = 0;
        v70 = 0;
        v71 = (int *)((char *)this + 612);
        v72 = -*((_DWORD *)this + 153);
        goto LABEL_121;
      }
    }
  }
}

void webrtc::VideoStreamEncoder::SendKeyFrame(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  unint64_t v24;
  __int128 v25;
  char *v26;
  _DWORD *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void *v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD v39[2];
  uint64_t (*v40)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v41)(_QWORD **);

  v6 = a1[707];
  {
    v8 = *a2;
    v7 = a2[1];
    v9 = v7 - *a2;
    if (v7 == *a2)
    {
      v11 = 0;
      v10 = 0;
    }
    else
    {
      if (v9 < 0)
        goto LABEL_31;
      v10 = (char *)operator new(v7 - *a2);
      v11 = &v10[4 * (v9 >> 2)];
      memcpy(v10, v8, v9);
    }
    v31 = (_QWORD *)operator new();
    *v31 = a1;
    v31[1] = 0;
    v31[2] = 0;
    v31[3] = 0;
    v32 = v11 - v10;
    if (v11 == v10)
      goto LABEL_27;
    if ((v32 & 0x8000000000000000) == 0)
    {
      v33 = (char *)operator new(v11 - v10);
      v31[1] = v33;
      v34 = &v33[4 * (v32 >> 2)];
      v31[3] = v34;
      memcpy(v33, v10, v11 - v10);
      v31[2] = v34;
LABEL_27:
      v39[0] = v31;
      v40 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::VideoStreamEncoder::SendKeyFrame(std::vector<webrtc::VideoFrameType> const&)::$_0>;
      v41 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::SendKeyFrame(std::vector<webrtc::VideoFrameType> const&)::$_0 &&>;
      (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v6 + 8))(v6, v39, &v38, &v37);
      v40(1, v39, v39);
      if (v10)
        operator delete(v10);
      return;
    }
LABEL_31:
    abort();
  }
  v12 = a1[34];
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  if (a1[61])
  {
    v13 = *a2;
    v14 = a2[1];
    if (*a2 == v14)
    {
      v35 = (void *)a1[267];
      v36 = a1[268] - (_QWORD)v35;
      if (v36 >= 1)
        memset_pattern16(v35, &unk_208F1B880, 4 * (((unint64_t)v36 >> 2) - ((unint64_t)v36 > 3)) + 4);
    }
    else
    {
      v15 = 0;
      v16 = (v14 - v13) >> 2;
      v17 = a1[267];
      v18 = (a1[268] - v17) >> 2;
      if (v16 <= 1)
        v16 = 1;
      v19 = v16 - 1;
      if (v18 < v16 - 1)
        v19 = (a1[268] - v17) >> 2;
      if (v19 >= 8 && (unint64_t)(v17 - (_QWORD)v13) >= 0x20)
      {
        v20 = v19 + 1;
        v21 = (v19 + 1) & 7;
        if (!v21)
          v21 = 8;
        v15 = v20 - v21;
        v22 = (__int128 *)(v13 + 16);
        v23 = (_OWORD *)(v17 + 16);
        v24 = v15;
        do
        {
          v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 8;
        }
        while (v24);
      }
      v26 = &v13[4 * v15];
      v27 = (_DWORD *)(v17 + 4 * v15);
      v28 = v16 - v15;
      v29 = v18 - v15;
      do
      {
        if (!v29)
          break;
        v30 = *(_DWORD *)v26;
        v26 += 4;
        *v27++ = v30;
        --v29;
        --v28;
      }
      while (v28);
    }
  }
}

uint64_t webrtc::VideoStreamEncoder::OnLossNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  int v12;
  char v13;
  _QWORD v14[2];
  __n128 (*v15)(char, void **, _OWORD *);
  uint64_t (*v16)(_QWORD **);

  v5 = *(_QWORD *)(a1 + 5656);
  {
    result = *(_QWORD *)(a1 + 488);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  }
  else
  {
    v11 = *v6;
    v12 = *((_DWORD *)v6 + 2);
    v7 = operator new(0x18uLL);
    v8 = v11;
    *v7 = a1;
    v7[1] = v8;
    *((_DWORD *)v7 + 4) = v12;
    v14[0] = v7;
    v14[1] = 24;
    v15 = absl::internal_any_invocable::RemoteManagerTrivial;
    v16 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::OnLossNotification(webrtc::VideoEncoder::LossNotification const&)::$_0 &&>;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v5 + 8))(v5, v14, &v13, &v10);
    return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *))v15)(1, v14, v14);
  }
  return result;
}

void webrtc::VideoStreamEncoder::AugmentEncodedImage(webrtc::VideoStreamEncoder *this, const webrtc::EncodedImage *a2, const webrtc::CodecSpecificInfo *a3, const webrtc::CodecSpecificInfo *a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void (***v12)(_QWORD);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  webrtc::vp9 *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v37;

  v8 = *((_OWORD *)a3 + 7);
  *((_OWORD *)this + 6) = *((_OWORD *)a3 + 6);
  *((_OWORD *)this + 7) = v8;
  *((_BYTE *)this + 128) = *((_BYTE *)a3 + 128);
  v9 = *((_OWORD *)a3 + 3);
  *((_OWORD *)this + 2) = *((_OWORD *)a3 + 2);
  *((_OWORD *)this + 3) = v9;
  v10 = *((_OWORD *)a3 + 5);
  *((_OWORD *)this + 4) = *((_OWORD *)a3 + 4);
  *((_OWORD *)this + 5) = v10;
  v11 = *((_OWORD *)a3 + 1);
  *(_OWORD *)this = *(_OWORD *)a3;
  *((_OWORD *)this + 1) = v11;
  v12 = (void (***)(_QWORD))*((_QWORD *)a3 + 17);
  *((_QWORD *)this + 17) = v12;
  if (v12)
    (**v12)(v12);
  v13 = *((_OWORD *)a3 + 10);
  *((_OWORD *)this + 9) = *((_OWORD *)a3 + 9);
  *((_OWORD *)this + 10) = v13;
  *((_OWORD *)this + 11) = *((_OWORD *)a3 + 11);
  *(_QWORD *)((char *)this + 189) = *(_QWORD *)((char *)a3 + 189);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = (char *)this + 208;
  std::map<int,unsigned long>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>((uint64_t *)this + 25, *((int **)a3 + 25), (int *)a3 + 52);
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 292) = 0;
  if (*((_BYTE *)a3 + 292))
  {
    v14 = *((_OWORD *)a3 + 17);
    *((_OWORD *)this + 16) = *((_OWORD *)a3 + 16);
    *((_OWORD *)this + 17) = v14;
    *((_BYTE *)this + 288) = *((_BYTE *)a3 + 288);
    v15 = *((_OWORD *)a3 + 15);
    *((_OWORD *)this + 14) = *((_OWORD *)a3 + 14);
    *((_OWORD *)this + 15) = v15;
    *((_BYTE *)this + 292) = 1;
  }
  *((_DWORD *)this + 74) = *((_DWORD *)a3 + 74);
  v16 = (unsigned int *)*((_QWORD *)a3 + 38);
  *((_QWORD *)this + 38) = v16;
  if (v16)
  {
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *((_WORD *)this + 156) = *((_WORD *)a3 + 156);
  v18 = *((_QWORD *)a3 + 23);
  v19 = *(_QWORD *)((char *)a3 + 156);
  if ((v19 & 0xFF00000000) == 0)
    LODWORD(v19) = 0;
  if ((v18 & 0xFF00000000) == 0)
    LODWORD(v18) = v19;
  v20 = (int)v18;
  webrtc::FrameEncodeMetadataWriter::FillTimingInfo((pthread_mutex_t *)((char *)a2 + 2160), (int)v18, this);
  webrtc::FrameEncodeMetadataWriter::UpdateBitstream((const webrtc::EncodedImage *)((char *)a2 + 2160), a4, this);
  if (a4)
    LODWORD(a4) = *(_DWORD *)a4;
  if ((*((_DWORD *)this + 9) & 0x80000000) != 0 && *((_BYTE *)a2 + 5512))
  {
    v24 = (char *)a2 + 4528;
    v25 = *((_QWORD *)this + 17);
    if (v25)
      v26 = (webrtc::vp9 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
    else
      v26 = 0;
    v27 = webrtc::QpParser::Parse((uint64_t)v24, (int)a4, v20, v26, *((unsigned __int8 **)this + 18), v21, v22, v23);
    if ((v27 & 0xFF00000000) != 0)
      v28 = v27;
    else
      v28 = -1;
    *((_DWORD *)this + 9) = v28;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
  v37 = (_DWORD)a4 == 1 && *((_DWORD *)this + 9) < 16;
  *((_BYTE *)this + 313) = v37;
}

uint64_t webrtc::VideoStreamEncoder::OnEncodedImage(webrtc::VideoStreamEncoder *this, const webrtc::EncodedImage *a2, const webrtc::CodecSpecificInfo *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  unsigned int v19;
  char v21;
  __int128 v22[8];
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  _QWORD v27[2];
  __n128 (*v28)(char, void **, _OWORD *);
  uint64_t (*v29)(uint64_t **);

  v3 = (uint64_t)a3;
  v5 = *(_QWORD *)((char *)a2 + 156);
  if ((v5 & 0xFF00000000) != 0)
    v6 = (int)v5;
  else
    v6 = 0;
  if (a3)
  {
    v7 = *(_DWORD *)a3;
    webrtc::VideoStreamEncoder::AugmentEncodedImage((webrtc::VideoStreamEncoder *)v22, this, a2, a3);
  }
  else
  {
    webrtc::VideoStreamEncoder::AugmentEncodedImage((webrtc::VideoStreamEncoder *)v22, this, a2, 0);
    v7 = 0;
  }
  v8 = *((_QWORD *)this + 707);
  v9 = v25;
  v10 = *(_QWORD *)&v22[0];
  v11 = (char *)operator new(0x28uLL);
  *(_QWORD *)v11 = this;
  *((_DWORD *)v11 + 2) = v7;
  *(_QWORD *)(v11 + 12) = v10;
  *((_QWORD *)v11 + 3) = v6;
  v11[32] = v9;
  v27[0] = v11;
  v27[1] = 40;
  v28 = absl::internal_any_invocable::RemoteManagerTrivial;
  v29 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::OnEncodedImage(webrtc::EncodedImage const&,webrtc::CodecSpecificInfo const*)::$_0 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v8 + 8))(v8, v27, &v26, &v21);
  v28(1, (void **)v27, v27);
  (*(void (**)(_QWORD, __int128 *, uint64_t))(**((_QWORD **)this + 31) + 32))(*((_QWORD *)this + 31), v22, v3);
  v12 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10), v22, v3);
  v13 = v24;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v23 = 0;
  v24 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v14 = (unsigned __int8 *)(v3 + 9);
    }
    else
    {
      if (*(_DWORD *)v3 != 2)
      {
        v3 = 0;
        goto LABEL_18;
      }
      v14 = (unsigned __int8 *)(v3 + 13);
    }
    v15 = *v14;
    if (v15 == 0xFF)
      v15 = 0;
    v3 = v15;
  }
LABEL_18:
  v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
  webrtc::VideoStreamEncoder::RunPostEncode(this, v22, v16, v3, v13);
  if (!(_DWORD)v12)
  {
    v17 = (unsigned int *)((char *)this + 2108);
    v18 = atomic_load((unsigned int *)this + 527);
    if (v18 >= 1)
    {
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
    }
  }
  webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)v22);
  return v12;
}

void webrtc::VideoStreamEncoder::RunPostEncode(_QWORD *a1, __int128 *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int v6;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void (***v15)(_QWORD);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void (***v26)(_QWORD);
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  webrtc::EncoderOvershootDetector *v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  void (***v51)(_QWORD);
  __int128 v52;
  __int128 v53;
  _BYTE v54[21];
  int *v55;
  _QWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  char v62;
  int v63;
  unsigned int *v64;
  __int16 v65;
  __int128 v66;
  unint64_t v67;
  char v68;
  _QWORD v69[2];
  uint64_t (*v70)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v71)(_QWORD **);

  v6 = a4;
  v10 = a1[707];
  {
    v11 = a2[4];
    v47 = a2[5];
    v12 = a2[7];
    v48 = a2[6];
    v49 = v12;
    v13 = *a2;
    v43 = a2[1];
    v14 = a2[3];
    v44 = a2[2];
    v45 = v14;
    v46 = v11;
    v41 = a1;
    v50 = *((_BYTE *)a2 + 128);
    v42 = v13;
    v15 = (void (***)(_QWORD))*((_QWORD *)a2 + 17);
    v51 = v15;
    if (v15)
      (**v15)(v15);
    v16 = a2[10];
    v52 = a2[9];
    v53 = v16;
    *(_OWORD *)v54 = a2[11];
    *(_QWORD *)&v54[13] = *(_QWORD *)((char *)a2 + 189);
    v56[0] = 0;
    v56[1] = 0;
    v55 = (int *)v56;
    std::map<int,unsigned long>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>((uint64_t *)&v55, *((int **)a2 + 25), (int *)a2 + 52);
    LOBYTE(v57) = 0;
    v62 = 0;
    if (*((_BYTE *)a2 + 292))
    {
      v17 = a2[17];
      v59 = a2[16];
      v60 = v17;
      v61 = *((_BYTE *)a2 + 288);
      v18 = a2[15];
      v57 = a2[14];
      v58 = v18;
      v62 = 1;
    }
    v63 = *((_DWORD *)a2 + 74);
    v19 = (unsigned int *)*((_QWORD *)a2 + 38);
    v64 = v19;
    if (v19)
    {
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v65 = *((_WORD *)a2 + 156);
    *(_QWORD *)&v66 = a3;
    DWORD2(v66) = v6;
    v67 = a5;
    v21 = operator new();
    v22 = v46;
    *(_OWORD *)(v21 + 88) = v47;
    v23 = v49;
    *(_OWORD *)(v21 + 104) = v48;
    *(_OWORD *)(v21 + 120) = v23;
    v24 = v42;
    *(_OWORD *)(v21 + 24) = v43;
    v25 = v45;
    *(_OWORD *)(v21 + 40) = v44;
    *(_OWORD *)(v21 + 56) = v25;
    *(_OWORD *)(v21 + 72) = v22;
    *(_QWORD *)v21 = v41;
    *(_BYTE *)(v21 + 136) = v50;
    *(_OWORD *)(v21 + 8) = v24;
    v26 = v51;
    *(_QWORD *)(v21 + 144) = v51;
    if (v26)
      (**v26)(v26);
    v27 = v53;
    *(_OWORD *)(v21 + 152) = v52;
    *(_OWORD *)(v21 + 168) = v27;
    *(_OWORD *)(v21 + 184) = *(_OWORD *)v54;
    *(_QWORD *)(v21 + 197) = *(_QWORD *)&v54[13];
    *(_QWORD *)(v21 + 224) = 0;
    *(_QWORD *)(v21 + 216) = 0;
    *(_QWORD *)(v21 + 208) = v21 + 216;
    std::map<int,unsigned long>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>((uint64_t *)(v21 + 208), v55, (int *)v56);
    *(_BYTE *)(v21 + 232) = 0;
    *(_BYTE *)(v21 + 300) = 0;
    if (v62)
    {
      v28 = v60;
      *(_OWORD *)(v21 + 264) = v59;
      *(_OWORD *)(v21 + 280) = v28;
      *(_BYTE *)(v21 + 296) = v61;
      v29 = v58;
      *(_OWORD *)(v21 + 232) = v57;
      *(_OWORD *)(v21 + 248) = v29;
      *(_BYTE *)(v21 + 300) = 1;
    }
    *(_DWORD *)(v21 + 304) = v63;
    v30 = v64;
    *(_QWORD *)(v21 + 312) = v64;
    if (v30)
    {
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    *(_WORD *)(v21 + 320) = v65;
    *(_OWORD *)(v21 + 328) = v66;
    *(_QWORD *)(v21 + 344) = v67;
    v69[0] = v21;
    v70 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::VideoStreamEncoder::RunPostEncode(webrtc::EncodedImage const&,long long,int,webrtc::DataSize)::$_0>;
    v71 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::RunPostEncode(webrtc::EncodedImage const&,long long,int,webrtc::DataSize)::$_0 &&>;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v10 + 8))(v10, v69, &v68, &v40);
    v70(1, v69, v69);
    webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)&v42);
    return;
  }
  if (*((unsigned __int8 *)a2 + 40) != 255)
  {
    v32 = (1000 * (*((_DWORD *)a2 + 14) - *((_DWORD *)a2 + 12))) & 0xFFFFFF00;
    v33 = (-24 * (*((_BYTE *)a2 + 56) - *((_BYTE *)a2 + 48)));
    v34 = 0x100000000;
    if (!a5)
      goto LABEL_19;
    goto LABEL_18;
  }
  v34 = 0;
  v33 = 0;
  v32 = 0;
  if (a5)
LABEL_18:
    webrtc::FrameDropper::Fill((uint64_t)(a1 + 253), a5, *((_DWORD *)a2 + 6) != 3);
LABEL_19:
  webrtc::VideoStreamEncoderResourceManager::OnEncodeCompleted(a1 + 358, (int *)a2, a3, v34 | v32 | v33, a5);
  v35 = a1[266];
  if (v35)
  {
    v36 = *((_QWORD *)a2 + 23);
    v37 = *(_QWORD *)((char *)a2 + 156);
    if ((v37 & 0xFF00000000) == 0)
      LODWORD(v37) = 0;
    if ((v36 & 0xFF00000000) == 0)
      LODWORD(v36) = v37;
    ++*(_QWORD *)(v35 + 488);
    v38 = *(webrtc::EncoderOvershootDetector **)(v35 + 32 * (int)v36 + 8 * v6 + 496);
    if (v38)
    {
      if (rtc::g_clock)
      {
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v39 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
            / dword_253EA791C;
      }
      webrtc::EncoderOvershootDetector::OnEncodedFrame(v38, a5, v39 / 1000000);
    }
  }
}

uint64_t `non-virtual thunk to'webrtc::VideoStreamEncoder::OnEncodedImage(webrtc::VideoStreamEncoder *this, const webrtc::EncodedImage *a2, const webrtc::CodecSpecificInfo *a3)
{
  return webrtc::VideoStreamEncoder::OnEncodedImage((webrtc::VideoStreamEncoder *)((char *)this - 8), a2, a3);
}

uint64_t webrtc::VideoStreamEncoder::OnDroppedFrame(uint64_t a1, char a2)
{
  uint64_t v4;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(unsigned __int8 *);

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80));
  v4 = *(_QWORD *)(a1 + 5656);
  v8 = a1;
  v9 = a2;
  v10 = absl::internal_any_invocable::LocalManagerTrivial;
  v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::OnDroppedFrame(webrtc::EncodedImageCallback::DropReason)::$_0 &&>;
  (*(void (**)(uint64_t, uint64_t *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v8, &v7, &v6);
  return ((uint64_t (*)(uint64_t, uint64_t *, uint64_t *))v10)(1, &v8, &v8);
}

uint64_t `non-virtual thunk to'webrtc::VideoStreamEncoder::OnDroppedFrame(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(unsigned __int8 *);

  v4 = a1 - 8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 5648);
  v9 = v4;
  v10 = a2;
  v11 = absl::internal_any_invocable::LocalManagerTrivial;
  v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::OnDroppedFrame(webrtc::EncodedImageCallback::DropReason)::$_0 &&>;
  (*(void (**)(uint64_t, uint64_t *, char *, char *))(*(_QWORD *)v5 + 8))(v5, &v9, &v8, &v7);
  return ((uint64_t (*)(uint64_t, uint64_t *, uint64_t *))v11)(1, &v9, &v9);
}

void webrtc::VideoStreamEncoder::OnBitrateUpdated(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, double a7)
{
  uint64_t v14;
  _QWORD *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[2];
  uint64_t (*v70)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v71)(uint64_t);
  uint64_t v72;
  char v73;
  char v74;
  void *v75;
  uint64_t v76;
  __n128 (*v77)(char, void **, void **);
  uint64_t (*v78)(double **);
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  char v83;
  void *__p;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  int v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char v129;
  char v130;
  char v131;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  char v146;
  char v147;
  char v148;
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  double v155;
  uint64_t v156;
  int64_t v157;
  uint64_t v158;
  uint64_t v159;

  v159 = *MEMORY[0x24BDAC8D0];
  v72 = a4;
  v14 = *(_QWORD *)(a1 + 5656);
  {
    v15 = operator new(0x38uLL);
    *v15 = a1;
    v15[1] = a2;
    v15[2] = a3;
    v15[3] = a4;
    *((_BYTE *)v15 + 32) = a5;
    v15[5] = a6;
    *((double *)v15 + 6) = a7;
    v75 = v15;
    v76 = 56;
    v77 = (__n128 (*)(char, void **, void **))absl::internal_any_invocable::RemoteManagerTrivial;
    v78 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::OnBitrateUpdated(webrtc::DataRate,webrtc::DataRate,webrtc::DataRate,unsigned char,long long,double)::$_0 &&>;
    (*(void (**)(uint64_t, void **, _QWORD *, char *))(*(_QWORD *)v14 + 8))(v14, &v75, v69, &v74);
    v77(1, &v75, &v75);
    return;
  }
  if (*(_BYTE *)(a1 + 1008))
  {
    v16 = *(_QWORD *)(a1 + 992) == 0;
    v17 = a2 == 0;
    if (!a2)
      goto LABEL_15;
  }
  else
  {
    v16 = 1;
    v17 = a2 == 0;
    if (!a2)
      goto LABEL_15;
  }
  if (*(_QWORD *)(a1 + 104))
  {
    v18 = *(_QWORD *)(a1 + 240);
    if (v18)
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v18 + 24))(&v75, v18, &v72);
      if (v93)
      {
        (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104), &v75, 0);
        if (v93)
        {
          if ((v82 & 1) != 0)
            operator delete(__p);
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v78, v79);
          if (SHIBYTE(v77) < 0)
            operator delete(v75);
        }
      }
    }
  }
LABEL_15:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
  v26 = *(_QWORD *)(a1 + 488);
  if (v26)
  {
    (*(void (**)(uint64_t, float))(*(_QWORD *)v26 + 72))(v26, (float)a5 * 0.0039062);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 488) + 80))(*(_QWORD *)(a1 + 488), a6);
  }
  if (*(_DWORD *)(a1 + 512) == -1)
    v27 = 30;
  else
    v27 = *(_DWORD *)(a1 + 512);
  v28 = *(_QWORD *)(a1 + 272);
  if (v28)
  {
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 56))(v28);
    if ((v29 & 0xFF00000000) != 0)
    {
      if ((_DWORD)v29)
        v27 = v29;
    }
  }
  v30 = (float)((a2 + 500) / 1000);
  *(float *)(a1 + 2064) = v30 * 0.5;
  v31 = *(float *)(a1 + 2068);
  v32 = *(float *)(a1 + 2060);
  if (v31 > 0.0 && v31 > v30 && v32 > (float)(v30 * 0.5))
  {
    v32 = (float)(v30 / v31) * v32;
    *(float *)(a1 + 2060) = v32;
  }
  *(float *)(a1 + 2068) = v30;
  v34 = v30 * 3.0;
  if (v32 > v34)
    *(float *)(a1 + 2060) = v34;
  *(float *)(a1 + 2092) = (float)v27;
  v75 = &off_24C0C3368;
  LODWORD(v76) = 0;
  BYTE4(v76) = 0;
  LOBYTE(v77) = 0;
  BYTE4(v77) = 0;
  LOBYTE(v78) = 0;
  BYTE4(v78) = 0;
  LOBYTE(v79) = 0;
  BYTE4(v79) = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  LOBYTE(__p) = 0;
  BYTE4(__p) = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v155 = (double)v27;
  v156 = v72;
  v157 = a2;
  v158 = a3;
  webrtc::VideoStreamEncoder::UpdateBitrateAllocation((uint64_t)v69, a1, &v75);
  webrtc::VideoStreamEncoder::SetEncoderRates(a1, (uint64_t)v69);
  if (a2)
  {
    if (*(_BYTE *)(a1 + 620))
    {
      *(_DWORD *)(a1 + 616) = a2;
      v35 = (uint64_t *)(a1 + 3100);
      if (*(_BYTE *)(a1 + 3104))
      {
LABEL_37:
        *(_DWORD *)(a1 + 3100) = a2;
        v36 = *(_QWORD *)(a1 + 2896);
        v37 = *v35;
        *(_DWORD *)(v36 + 856) = *v35;
        *(_BYTE *)(v36 + 860) = BYTE4(v37);
        v38 = *(_QWORD *)(a1 + 2904);
        v39 = *v35;
        *(_DWORD *)(v38 + 8) = v39;
        *(_BYTE *)(v38 + 12) = BYTE4(v39);
        goto LABEL_38;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 620) = 1;
      *(_DWORD *)(a1 + 616) = a2;
      v35 = (uint64_t *)(a1 + 3100);
      if (*(_BYTE *)(a1 + 3104))
        goto LABEL_37;
    }
    *(_BYTE *)(a1 + 3104) = 1;
    goto LABEL_37;
  }
LABEL_38:
  v40 = v17 ^ v16;
  v41 = *(_QWORD *)(a1 + 3088);
  v42 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3072) + 16))(*(_QWORD *)(a1 + 3072));
  if ((v42 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v42 % 0x3E8uLL <= 0x1F4)
      v44 = 0;
    else
      v44 = -1;
    webrtc::VideoStreamEncoderResourceManager::InitialFrameDropper::SetTargetBitrate(v41, a2, v44 - -(uint64_t)v42 / 0x3E8uLL);
    if (!v40)
      return;
  }
  else
  {
    if (v42 % 0x3E8 <= 0x1F3)
      v43 = v42 / 0x3E8;
    else
      v43 = v42 / 0x3E8 + 1;
    webrtc::VideoStreamEncoderResourceManager::InitialFrameDropper::SetTargetBitrate(v41, a2, v43);
    if (!v40)
      return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t", v45, v46, v47, v48, v49, v50, v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
  (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(a1 + 248) + 104))(*(_QWORD *)(a1 + 248), a2 == 0);
  if (a2)
  {
    if (!*(_BYTE *)(a1 + 1280))
    {
LABEL_57:
      if (*(_BYTE *)(a1 + 1016))
      {
        v55 = *(_QWORD *)(a1 + 64);
        v56 = *(unsigned int **)(a1 + 5648);
        if (v56)
        {
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
        }
        v58 = (_QWORD *)operator new();
        *v58 = v56;
        v58[1] = a1;
        v58[3] = absl::internal_any_invocable::LocalManagerTrivial;
        v58[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::RequestRefreshFrame(void)::$_0 &&>;
        v69[0] = v58;
        v70 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
        v71 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
        (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v55 + 8))(v55, v69, &v74, &v73);
        v70(1, v69, v69);
      }
      return;
    }
    v52 = *(_QWORD *)(a1 + 1072);
    if (v52)
    {
      v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 40))(v52);
      v54 = *(_QWORD *)(a1 + 1072);
      if (v54)
        LODWORD(v54) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 48))(v54);
      if ((webrtc::VideoStreamEncoder::DropDueToSize((webrtc::VideoStreamEncoder *)a1, (int)v54 * v53) & 1) != 0)
      {
LABEL_56:
        if (*(_BYTE *)(a1 + 1280))
          return;
        goto LABEL_57;
      }
    }
    else if ((webrtc::VideoStreamEncoder::DropDueToSize((webrtc::VideoStreamEncoder *)a1, 0) & 1) != 0)
    {
      goto LABEL_56;
    }
    v59 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
    v60 = *(_QWORD *)(a1 + 1288);
    if (v59 - v60 <= 999999)
    {
      if (!*(_BYTE *)(a1 + 1280))
        __break(1u);
      webrtc::VideoStreamEncoder::EncodeVideoFrame((webrtc::VideoStreamEncoder *)a1, (const webrtc::VideoFrame *)(a1 + 1064), v60);
    }
    if (*(_BYTE *)(a1 + 1280))
    {
      v61 = *(_QWORD *)(a1 + 1248);
      if (v61)
      {
        do
        {
          v62 = __ldaxr((unsigned int *)v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, (unsigned int *)v61));
        if (!v63)
        {
          v64 = *(_QWORD *)(v61 + 8);
          if (v64)
          {
            v65 = *(_QWORD *)(v61 + 16);
            v66 = *(void **)(v61 + 8);
            if (v65 != v64)
            {
              do
              {
                v67 = *(void **)(v65 - 96);
                if (v67)
                {
                  *(_QWORD *)(v65 - 88) = v67;
                  operator delete(v67);
                }
                v65 -= 104;
              }
              while (v65 != v64);
              v66 = *(void **)(v61 + 8);
            }
            *(_QWORD *)(v61 + 16) = v64;
            operator delete(v66);
          }
          MEMORY[0x20BD0ADEC](v61, 0x1020C40E72D6CFBLL);
        }
      }
      v68 = *(_QWORD *)(a1 + 1072);
      if (v68)
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
      *(_BYTE *)(a1 + 1280) = 0;
    }
  }
}

uint64_t webrtc::VideoStreamEncoder::OnVideoSourceRestrictionsUpdated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  _QWORD *v25;
  char v26;
  void *__p[2];
  __int128 v28;
  __int128 v29;
  char v30;
  std::string v31;
  uint64_t (*v32)(uint64_t);

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    result = *a4;
    if (*a4)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)result + 32))(__p);
    }
    else
    {
      BYTE7(v28) = 6;
      if (__p <= (void **)"<null>" && (char *)__p + 6 > "<null>")
      {
        __break(1u);
        return result;
      }
      strcpy((char *)__p, "<null>");
    }
    webrtc::VideoSourceRestrictions::ToString((webrtc::VideoSourceRestrictions *)a2, &v31);
    rtc::webrtc_logging_impl::Log("\r\t\n\t\n", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SBYTE7(v28) & 0x80000000) == 0)
        goto LABEL_9;
LABEL_17:
      operator delete(__p[0]);
      v15 = *(_QWORD *)(a1 + 272);
      if (!v15)
        goto LABEL_11;
      goto LABEL_10;
    }
    operator delete(v31.__r_.__value_.__l.__data_);
    if (SBYTE7(v28) < 0)
      goto LABEL_17;
  }
LABEL_9:
  v15 = *(_QWORD *)(a1 + 272);
  if (v15)
LABEL_10:
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 80))(v15, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40));
LABEL_11:
  v16 = *(unsigned __int8 *)(a1 + 5584);
  v18 = *(_OWORD *)(a2 + 16);
  v17 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 5536) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 5552) = v18;
  *(_OWORD *)(a1 + 5568) = v17;
  if (!v16)
    *(_BYTE *)(a1 + 5584) = 1;
  v19 = *(_QWORD *)(a1 + 64);
  v20 = *(unsigned int **)(a1 + 5648);
  if (v20)
  {
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v28 = v22;
  v29 = *(_OWORD *)(a2 + 32);
  v23 = (char *)operator new(0x38uLL);
  *(_QWORD *)v23 = a1;
  v24 = v28;
  *(_OWORD *)(v23 + 8) = *(_OWORD *)__p;
  *(_OWORD *)(v23 + 24) = v24;
  *(_OWORD *)(v23 + 40) = v29;
  v25 = (_QWORD *)operator new();
  *v25 = v20;
  v25[1] = v23;
  v25[2] = 56;
  v25[3] = absl::internal_any_invocable::RemoteManagerTrivial;
  v25[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::OnVideoSourceRestrictionsUpdated(webrtc::VideoSourceRestrictions,webrtc::VideoAdaptationCounters const&,webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoSourceRestrictions const&)::$_1 &&>;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  v31.__r_.__value_.__r.__words[2] = (std::string::size_type)_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v32 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, std::string *, char *, char *))(*(_QWORD *)v19 + 8))(v19, &v31, &v30, &v26);
  return ((uint64_t (*)(uint64_t, std::string *, std::string *))v31.__r_.__value_.__r.__words[2])(1, &v31, &v31);
}

uint64_t `non-virtual thunk to'webrtc::VideoStreamEncoder::OnVideoSourceRestrictionsUpdated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return webrtc::VideoStreamEncoder::OnVideoSourceRestrictionsUpdated(a1 - 16, a2, a3, a4);
}

void webrtc::VideoStreamEncoder::CadenceCallback::~CadenceCallback(webrtc::VideoStreamEncoder::CadenceCallback *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::VideoStreamEncoder::CadenceCallback::OnFrame(webrtc::VideoStreamEncoder::CadenceCallback *this, Timestamp a2, char a3, const webrtc::VideoFrame *a4)
{
  uint64_t v7;
  void (***v8)(_QWORD);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  char v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  int v68;
  _BYTE *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  _BYTE *v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  BOOL v112;
  char v113;
  void (*v114)(void);
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  _BYTE *v144;
  uint64_t v145;
  unsigned int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  BOOL v157;
  char v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  void (***v169)(_QWORD);
  __int128 v170;
  __int128 v171;
  __int128 v172;
  unsigned int *v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  void *v182;
  int v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  void *v190;
  uint64_t v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  void *v197;
  void (***v198)(_QWORD);
  __int128 v199;
  __int128 v200;
  __int128 v201;
  unsigned int *v202;
  unsigned int v203;
  uint64_t v204;
  int v205;
  float v206;
  int v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  float v215;
  int v216;
  int v217;
  BOOL v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  BOOL v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int *v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  void *v254;
  uint64_t result;
  int64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  BOOL v271;
  char v272;
  int v273;
  int v274;
  __int16 v275;
  uint64_t v276;
  __int128 v277;
  __int128 v278;
  _BYTE v279[28];
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  char v284;
  char v285;
  _BYTE v286[29];
  unsigned int *v287;
  __int128 v288;
  uint64_t v289;
  char v290;
  _DWORD v291[94];
  void *v292;
  _QWORD v293[48];

  v293[46] = *MEMORY[0x24BDAC8D0];
  v7 = *((_QWORD *)this + 1);
  v275 = *(_WORD *)a4;
  v8 = (void (***)(_QWORD))*((_QWORD *)a4 + 1);
  v276 = (uint64_t)v8;
  if (v8)
    (**v8)(v8);
  v9 = *((_OWORD *)a4 + 2);
  v277 = *((_OWORD *)a4 + 1);
  v278 = v9;
  *(_OWORD *)v279 = *((_OWORD *)a4 + 3);
  *(_OWORD *)&v279[12] = *(_OWORD *)((char *)a4 + 60);
  LOBYTE(v280) = 0;
  v285 = 0;
  if (*((_BYTE *)a4 + 144))
  {
    v10 = *(_OWORD *)((char *)a4 + 92);
    v11 = *(_OWORD *)((char *)a4 + 124);
    v282 = *(_OWORD *)((char *)a4 + 108);
    v283 = v11;
    v284 = *((_BYTE *)a4 + 140);
    v280 = *(_OWORD *)((char *)a4 + 76);
    v281 = v10;
    v285 = 1;
  }
  *(_OWORD *)v286 = *(_OWORD *)((char *)a4 + 148);
  *(_OWORD *)&v286[13] = *(_OWORD *)((char *)a4 + 161);
  v12 = (unsigned int *)*((_QWORD *)a4 + 23);
  v287 = v12;
  if (v12)
  {
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v288 = *((_OWORD *)a4 + 12);
  v289 = *((_QWORD *)a4 + 26);
  if ((uint64_t)v278 > a2.var0)
    *(Timestamp *)&v278 = a2;
  v14 = *((_QWORD *)a4 + 3);
  if (v14 <= 0)
  {
    v15 = *((_QWORD *)a4 + 4);
    v16 = v15 / 1000;
    v17 = v15 + 999;
    v18 = (unint64_t)a2.var0 / 0x3E8;
    if ((unint64_t)a2.var0 % 0x3E8 > 0x1F3)
      ++v18;
    if (-a2.var0 % 0x3E8uLL <= 0x1F4)
      v19 = 0;
    else
      v19 = -1;
    v20 = v19 - -a2.var0 / 0x3E8uLL;
    if (a2.var0 >= 0)
      v20 = v18;
    if (v17 <= 0x7CE)
      v21 = v20;
    else
      v21 = v16;
    v14 = *(_QWORD *)(v7 + 1032) + v21;
  }
  LODWORD(v277) = 90 * v14;
  v22 = *((_QWORD *)a4 + 5);
  *((_QWORD *)&v277 + 1) = v14;
  *((_QWORD *)&v278 + 1) = v22;
  v279[0] = *((_BYTE *)a4 + 48);
  if (v14 > *(_QWORD *)(v7 + 1024))
  {
    v23 = *(_QWORD *)(v7 + 1040);
    if (a2.var0 < 0)
    {
      v39 = -a2.var0 / 0x3E8uLL;
      if (-a2.var0 % 0x3E8uLL <= 0x1F4)
        v40 = 0;
      else
        v40 = -1;
      if ((uint64_t)(v40 - (v39 + v23)) > 60000)
      {
        *(_QWORD *)(v7 + 1040) = v40 - v39;
        v25 = 1;
        *(_QWORD *)(v7 + 1024) = v14;
        v26 = *(_QWORD *)(v7 + 248);
        v27 = v276;
        if (!v276)
          goto LABEL_27;
        goto LABEL_39;
      }
    }
    else
    {
      v24 = (unint64_t)a2.var0 / 0x3E8;
      if ((unint64_t)a2.var0 % 0x3E8 > 0x1F3)
        ++v24;
      if ((uint64_t)(v24 - v23) > 60000)
      {
        *(_QWORD *)(v7 + 1040) = v24;
        v25 = 1;
        *(_QWORD *)(v7 + 1024) = v14;
        v26 = *(_QWORD *)(v7 + 248);
        v27 = v276;
        if (!v276)
        {
LABEL_27:
          v28 = 0;
          v29 = 0;
LABEL_40:
          v41 = (_OWORD *)(v7 + 1316);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 24))(v26, v28, v29);
          ++*(_DWORD *)(v7 + 1048);
          if (*(_BYTE *)(v7 + 2680) && *(_DWORD *)(v7 + 416) == 1 && *(_DWORD *)(v7 + 2984) == 3)
          {
            v42 = *(_DWORD *)(v7 + 1348);
            if (v42 == 1)
            {
              if (*(_BYTE *)(v7 + 604))
              {
                v43 = *(_DWORD *)(v7 + 592);
                v44 = v27 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27) : 0;
                if (v43 != v44)
                {
                  if (!*(_BYTE *)(v7 + 604))
                    goto LABEL_457;
                  v57 = *(_DWORD *)(v7 + 596);
                  v58 = v27 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27) : 0;
                  if (v57 != v58)
                  {
                    *(_DWORD *)(v7 + 1348) = 2;
                    if (*(_BYTE *)(v7 + 2116))
                      goto LABEL_129;
                    goto LABEL_135;
                  }
                }
              }
              v42 = *(_DWORD *)(v7 + 1348);
            }
            v59 = v286[28];
            if (v42 == 2)
            {
              if (v286[28])
              {
                if (v27)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27);
                }
                v60 = *(unsigned __int8 *)(v7 + 1332);
                *v41 = *(_OWORD *)&v286[12];
                if (!v60)
                  *(_BYTE *)(v7 + 1332) = 1;
              }
              else if (*(_BYTE *)(v7 + 1332))
              {
                *(_BYTE *)(v7 + 1332) = 0;
              }
              *(_DWORD *)(v7 + 1348) = 0;
            }
            if (v59)
            {
              v61 = *(unsigned __int8 *)(v7 + 1332);
              if (!*(_BYTE *)(v7 + 1332))
                goto LABEL_110;
              if (v27)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                (*(void (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27);
                v61 = *(unsigned __int8 *)(v7 + 1332);
                if (!*(_BYTE *)(v7 + 1332))
                  goto LABEL_457;
              }
              else
              {
                v61 = 1;
              }
              if (*(_QWORD *)(v7 + 1316) == *(_QWORD *)&v286[12]
                && (v63 = *(_DWORD *)(v7 + 1324), v63 == *(_DWORD *)&v286[20])
                && (v64 = *(_DWORD *)(v7 + 1328), v64 == *(_DWORD *)&v286[24]))
              {
                v65 = 0x7FFFFFFFFFFFFFFFLL;
                if (a2.var0 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  v66 = *(_QWORD *)(v7 + 1336);
                  if (v66 != 0x8000000000000000)
                  {
                    if (v66 == 0x7FFFFFFFFFFFFFFFLL || a2.var0 == 0x8000000000000000)
                      v65 = 0x8000000000000000;
                    else
                      v65 = a2.var0 - v66;
                  }
                }
                if (v27)
                {
                  v273 = *(_DWORD *)(v7 + 1328);
                  v274 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                  v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27);
                  v64 = v273;
                }
                else
                {
                  v274 = 0;
                  v68 = 0;
                }
                if ((v65 & 0x8000000000000000) != 0)
                {
                  if (-(uint64_t)v65 % 0x3E8uLL <= 0x1F4)
                    v257 = 0;
                  else
                    v257 = -1;
                  v256 = v257 - -(uint64_t)v65 / 0x3E8uLL;
                }
                else
                {
                  v256 = v65 / 0x3E8;
                  if (v65 % 0x3E8 > 0x1F3)
                    ++v256;
                }
                v62 = v256 >= *(int *)(v7 + 2684)
                   && *(double *)(v7 + 2688) <= (float)((float)(v64 * v63) / (float)(v68 * v274))
                   && (*(int (**)(_QWORD))(**(_QWORD **)(v7 + 248) + 128))(*(_QWORD *)(v7 + 248)) >= *(_DWORD *)(v7 + 2696);
              }
              else
              {
LABEL_110:
                if (v27)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27);
                  v61 = *(unsigned __int8 *)(v7 + 1332);
                }
                *v41 = *(_OWORD *)&v286[12];
                if (!v61)
                  *(_BYTE *)(v7 + 1332) = 1;
                v62 = 0;
                *(Timestamp *)(v7 + 1336) = a2;
              }
            }
            else
            {
              if (*(_BYTE *)(v7 + 1332))
                *(_BYTE *)(v7 + 1332) = 0;
              v62 = 0;
              *(_QWORD *)(v7 + 1336) = 0x7FFFFFFFFFFFFFFFLL;
            }
            if (*(unsigned __int8 *)(v7 + 1344) != v62)
            {
              v69 = (_BYTE *)(v7 + 5640);
              *(_DWORD *)(v7 + 1348) = v62;
              *(_BYTE *)(v7 + 1344) = v62;
              v70 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
              if (v62)
              {
                if ((v70 & 1) == 0)
                  rtc::webrtc_logging_impl::Log("\r\t", v71, v72, v73, v74, v75, v76, v77, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
                v78 = *v69;
                *(_QWORD *)(v7 + 5592) = 921600;
                *(_QWORD *)(v7 + 5600) = 1;
                *(_OWORD *)(v7 + 5608) = 0u;
                *(_OWORD *)(v7 + 5624) = 0u;
                if (!v78)
                  *v69 = 1;
              }
              else
              {
                if ((v70 & 1) == 0)
                  rtc::webrtc_logging_impl::Log("\r\t", v71, v72, v73, v74, v75, v76, v77, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
                if (*v69)
                  *v69 = 0;
              }
              v79 = *(_QWORD *)(v7 + 64);
              v80 = *(unsigned int **)(v7 + 5648);
              if (v80)
              {
                do
                  v81 = __ldxr(v80);
                while (__stxr(v81 + 1, v80));
              }
              v82 = (_BYTE *)operator new();
              v82[16] = v62;
              *(_QWORD *)v82 = v80;
              *((_QWORD *)v82 + 1) = v7;
              *((_QWORD *)v82 + 3) = absl::internal_any_invocable::LocalManagerTrivial;
              *((_QWORD *)v82 + 4) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::CheckForAnimatedContent(webrtc::VideoFrame const&,long long)::$_0 &&>;
              v292 = v82;
              v293[1] = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
              v293[2] = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
              (*(void (**)(uint64_t, void **, _DWORD *, char *))(*(_QWORD *)v79 + 8))(v79, &v292, v291, &v290);
              ((void (*)(uint64_t, uint64_t *, _QWORD *))v293[1])(1, (uint64_t *)&v292, &v292);
            }
          }
          if (*(_BYTE *)(v7 + 2116))
          {
LABEL_129:
            v83 = *(_DWORD *)(v7 + 2120);
            *(_DWORD *)(v7 + 2120) = v83 + 1;
            v84 = v83 % *(_DWORD *)(v7 + 2112);
            if ((a3 & 1) != 0 || !v84)
            {
              if (!v84)
              {
                ++*(_DWORD *)(v7 + 1052);
                v85 = v276;
                if (!v276)
                {
LABEL_133:
                  v86 = 0;
                  v96 = 0;
LABEL_142:
                  v97 = v286[28];
                  v98 = v96 | v86;
                  v99 = *(_QWORD *)&v286[20];
                  if (v286[28])
                  {
                    v100 = *(_QWORD *)&v286[12];
                  }
                  else
                  {
                    v99 = v98;
                    v100 = 0;
                  }
                  v101 = HIDWORD(v99);
                  if (v99)
                  {
                    if (*(_QWORD *)(v7 + 1304))
                    {
                      v106 = HIDWORD(v100);
                      v107 = *(_DWORD *)(v7 + 1296);
                      v108 = v100 + v99;
                      if (v107 + *(_DWORD *)(v7 + 1304) > v108)
                        v108 = v107 + *(_DWORD *)(v7 + 1304);
                      v109 = *(_DWORD *)(v7 + 1300);
                      v110 = HIDWORD(v100) + v101;
                      if (v109 + *(_DWORD *)(v7 + 1308) > v110)
                        v110 = v109 + *(_DWORD *)(v7 + 1308);
                      if ((int)v100 >= v107)
                        LODWORD(v100) = *(_DWORD *)(v7 + 1296);
                      *(_DWORD *)(v7 + 1296) = v100;
                      if ((int)v106 >= v109)
                        v111 = v109;
                      else
                        v111 = v106;
                      *(_DWORD *)(v7 + 1300) = v111;
                      *(_DWORD *)(v7 + 1304) = v108 - v100;
                      *(_DWORD *)(v7 + 1308) = v110 - v111;
                    }
                    else
                    {
                      *(_QWORD *)(v7 + 1296) = v100;
                      *(_QWORD *)(v7 + 1304) = v99;
                    }
                  }
                  if (v97)
                    v112 = *(_BYTE *)(v7 + 1312) == 0;
                  else
                    v112 = 1;
                  v113 = !v112;
                  *(_BYTE *)(v7 + 1312) = v113;
                  v114 = *(void (**)(void))(**(_QWORD **)(v7 + 248) + 48);
LABEL_396:
                  v114();
LABEL_397:
                  if (v25)
                  {
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
                      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v241, v242, v243, v244, v245, v246, v247, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
                    *(_QWORD *)(v7 + 1048) = 0;
                    *(_DWORD *)(v7 + 1056) = 0;
                  }
                  goto LABEL_401;
                }
LABEL_139:
                v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 40))(v85);
                v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 48))(v276) << 32;
                goto LABEL_142;
              }
LABEL_136:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
                rtc::webrtc_logging_impl::Log("\r\t", v87, v88, v89, v90, v91, v92, v93, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
              ++*(_DWORD *)(v7 + 1056);
              v85 = v276;
              if (!v276)
                goto LABEL_133;
              goto LABEL_139;
            }
LABEL_140:
            v94 = v276;
            if (v276)
            {
              v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 40))(v276);
              v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 48))(v276);
            }
            else
            {
              v95 = 0;
            }
            v102 = v94 * v95;
            pthread_mutex_lock((pthread_mutex_t *)(v7 + 2712));
            *(_BYTE *)(v7 + 2792) = 1;
            *(_DWORD *)(v7 + 2788) = v102;
            pthread_mutex_unlock((pthread_mutex_t *)(v7 + 2712));
            if (!*(_BYTE *)(v7 + 604))
              goto LABEL_187;
            if (v276)
            {
              v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 40))(v276);
              if (!*(_BYTE *)(v7 + 604))
                goto LABEL_457;
              v104 = v276;
              if (v103 != *(_DWORD *)(v7 + 592))
                goto LABEL_179;
              v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 48))(v276);
              if (!*(_BYTE *)(v7 + 604))
                goto LABEL_457;
              v104 = v276;
              if (v105 != *(_DWORD *)(v7 + 596))
                goto LABEL_179;
              (**(void (***)(uint64_t))v276)(v276);
            }
            else
            {
              if (*(_DWORD *)(v7 + 592) || *(_DWORD *)(v7 + 596))
                goto LABEL_183;
              v104 = 0;
            }
            v115 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 32))(v104);
            (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
            if (!*(_BYTE *)(v7 + 604))
              goto LABEL_457;
            if (*(_BYTE *)(v7 + 600) == (v115 == 0))
            {
LABEL_207:
              if (*(_DWORD *)(v7 + 512) == -1)
                v135 = 30;
              else
                v135 = *(_DWORD *)(v7 + 512);
              v136 = *(_QWORD *)(v7 + 272);
              if (v136)
              {
                v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v136 + 56))(v136);
                if ((v137 & 0xFF00000000) != 0)
                {
                  if ((_DWORD)v137)
                    v135 = v137;
                }
              }
              v138 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 40) + 16))(*(_QWORD *)(v7 + 40));
              v140 = v138 / 0x3E8uLL;
              if (v138 % 0x3E8uLL > 0x1F3)
                ++v140;
              if (-v138 % 0x3E8uLL <= 0x1F4)
                v141 = 0;
              else
                v141 = -1;
              if (v138 < 0)
                v142 = v141 - -v138 / 0x3E8uLL;
              else
                v142 = v140;
              if (*(_BYTE *)(v7 + 516))
              {
                webrtc::VideoStreamEncoder::ReconfigureEncoder((webrtc::VideoStreamEncoder *)v7, v139);
                v143 = (unint64_t *)(v7 + 1360);
                v144 = (_BYTE *)(v7 + 1368);
              }
              else
              {
                v143 = (unint64_t *)(v7 + 1360);
                if (*(_BYTE *)(v7 + 1368) && (uint64_t)(v142 - *v143) < 1000)
                {
LABEL_229:
                  if (*(_BYTE *)(v7 + 1280))
                  {
                    v145 = *(_QWORD *)(v7 + 1072);
                    if (v145)
                    {
                      v146 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 40))(v145);
                      v145 = *(_QWORD *)(v7 + 1072);
                      if (v145)
                        v145 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 48))(v145);
                    }
                    else
                    {
                      v146 = 0;
                    }
                    v147 = *(unsigned __int8 *)(v7 + 1240);
                    v148 = *(_QWORD *)(v7 + 1232);
                    if (!*(_BYTE *)(v7 + 1240))
                      v148 = v146 | (unint64_t)(v145 << 32);
                    v149 = *(_QWORD *)(v7 + 1224);
                    if (!*(_BYTE *)(v7 + 1240))
                      v149 = 0;
                    v150 = HIDWORD(v148);
                    if (v148)
                    {
                      if (*(_QWORD *)(v7 + 1304))
                      {
                        v151 = HIDWORD(v149);
                        v152 = *(_DWORD *)(v7 + 1296);
                        v153 = v149 + v148;
                        if (v152 + *(_DWORD *)(v7 + 1304) > v153)
                          v153 = v152 + *(_DWORD *)(v7 + 1304);
                        v154 = *(_DWORD *)(v7 + 1300);
                        v155 = HIDWORD(v149) + v150;
                        if (v154 + *(_DWORD *)(v7 + 1308) > v155)
                          v155 = v154 + *(_DWORD *)(v7 + 1308);
                        if ((int)v149 >= v152)
                          LODWORD(v149) = *(_DWORD *)(v7 + 1296);
                        *(_DWORD *)(v7 + 1296) = v149;
                        if ((int)v151 >= v154)
                          v156 = v154;
                        else
                          v156 = v151;
                        *(_DWORD *)(v7 + 1300) = v156;
                        *(_DWORD *)(v7 + 1304) = v153 - v149;
                        *(_DWORD *)(v7 + 1308) = v155 - v156;
                      }
                      else
                      {
                        *(_QWORD *)(v7 + 1296) = v149;
                        *(_QWORD *)(v7 + 1304) = v148;
                      }
                    }
                    if (v147)
                      v157 = *(_BYTE *)(v7 + 1312) == 0;
                    else
                      v157 = 1;
                    v158 = !v157;
                    *(_BYTE *)(v7 + 1312) = v158;
                    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 248) + 48))(*(_QWORD *)(v7 + 248), 2);
                  }
                  v159 = v276;
                  if (v276)
                  {
                    v160 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 40))(v276);
                    v159 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 48))(v276);
                  }
                  else
                  {
                    v160 = 0;
                  }
                  if (webrtc::VideoStreamEncoder::DropDueToSize((webrtc::VideoStreamEncoder *)v7, v159 * v160))
                  {
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
                      rtc::webrtc_logging_impl::Log("\r\t", v161, v162, v163, v164, v165, v166, v167, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
                    webrtc::VideoStreamEncoderResourceManager::OnFrameDroppedDueToSize((webrtc::VideoStreamEncoderResourceManager *)(v7 + 2864));
                    if (v276)
                      (**(void (***)(uint64_t))v276)(v276);
                    v168 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 32))(v276);
                    (*(void (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
                    if (v168)
                    {
                      if (!*(_BYTE *)(v7 + 1280))
                      {
                        *(_WORD *)(v7 + 1064) = v275;
                        v169 = (void (***)(_QWORD))v276;
                        *(_QWORD *)(v7 + 1072) = v276;
                        if (v169)
                          (**v169)(v169);
                        v170 = v278;
                        *(_OWORD *)(v7 + 1080) = v277;
                        *(_OWORD *)(v7 + 1096) = v170;
                        *(_OWORD *)(v7 + 1112) = *(_OWORD *)v279;
                        *(_OWORD *)(v7 + 1124) = *(_OWORD *)&v279[12];
                        *(_BYTE *)(v7 + 1140) = 0;
                        *(_BYTE *)(v7 + 1208) = 0;
                        if (v285)
                        {
                          v171 = v283;
                          *(_OWORD *)(v7 + 1172) = v282;
                          *(_OWORD *)(v7 + 1188) = v171;
                          *(_BYTE *)(v7 + 1204) = v284;
                          v172 = v281;
                          *(_OWORD *)(v7 + 1140) = v280;
                          *(_OWORD *)(v7 + 1156) = v172;
                          *(_BYTE *)(v7 + 1208) = 1;
                        }
                        *(_OWORD *)(v7 + 1212) = *(_OWORD *)v286;
                        *(_OWORD *)(v7 + 1225) = *(_OWORD *)&v286[13];
                        v173 = v287;
                        *(_QWORD *)(v7 + 1248) = v287;
                        if (v173)
                        {
                          do
                            v174 = __ldxr(v173);
                          while (__stxr(v174 + 1, v173));
                        }
LABEL_319:
                        *(_OWORD *)(v7 + 1256) = v288;
                        *(_QWORD *)(v7 + 1272) = v289;
                        *(_BYTE *)(v7 + 1280) = 1;
                        *(Timestamp *)(v7 + 1288) = a2;
                        goto LABEL_397;
                      }
                      goto LABEL_292;
                    }
                    if (*(_BYTE *)(v7 + 1280))
                    {
                      v184 = *(_QWORD *)(v7 + 1248);
                      if (v184)
                      {
                        do
                        {
                          v185 = __ldaxr((unsigned int *)v184);
                          v186 = v185 - 1;
                        }
                        while (__stlxr(v186, (unsigned int *)v184));
                        if (!v186)
                        {
                          v187 = *(_QWORD *)(v184 + 8);
                          if (v187)
                          {
                            v188 = *(_QWORD *)(v184 + 16);
                            v189 = *(void **)(v184 + 8);
                            if (v188 != v187)
                            {
                              do
                              {
                                v190 = *(void **)(v188 - 96);
                                if (v190)
                                {
                                  *(_QWORD *)(v188 - 88) = v190;
                                  operator delete(v190);
                                }
                                v188 -= 104;
                              }
                              while (v188 != v187);
                              v189 = *(void **)(v184 + 8);
                            }
                            *(_QWORD *)(v184 + 16) = v187;
                            operator delete(v189);
                          }
                          MEMORY[0x20BD0ADEC](v184, 0x1020C40E72D6CFBLL);
                        }
                      }
                      v211 = *(_QWORD *)(v7 + 1072);
                      if (v211)
                        (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
                      *(_BYTE *)(v7 + 1280) = 0;
                    }
                    v212 = v276;
                    if (v276)
                    {
LABEL_350:
                      v213 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v212 + 40))(v212);
                      v214 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 48))(v276) << 32;
LABEL_373:
                      v228 = v286[28];
                      v229 = v214 | v213;
                      v230 = *(_QWORD *)&v286[20];
                      if (v286[28])
                      {
                        v231 = *(_QWORD *)&v286[12];
                      }
                      else
                      {
                        v230 = v229;
                        v231 = 0;
                      }
                      v232 = HIDWORD(v230);
                      if (v230)
                      {
                        if (*(_QWORD *)(v7 + 1304))
                        {
                          v233 = HIDWORD(v231);
                          v234 = *(_DWORD *)(v7 + 1296);
                          v235 = v231 + v230;
                          if (v234 + *(_DWORD *)(v7 + 1304) > v235)
                            v235 = v234 + *(_DWORD *)(v7 + 1304);
                          v236 = *(_DWORD *)(v7 + 1300);
                          v237 = HIDWORD(v231) + v232;
                          if (v236 + *(_DWORD *)(v7 + 1308) > v237)
                            v237 = v236 + *(_DWORD *)(v7 + 1308);
                          if ((int)v231 >= v234)
                            LODWORD(v231) = *(_DWORD *)(v7 + 1296);
                          *(_DWORD *)(v7 + 1296) = v231;
                          if ((int)v233 >= v236)
                            v238 = v236;
                          else
                            v238 = v233;
                          *(_DWORD *)(v7 + 1300) = v238;
                          *(_DWORD *)(v7 + 1304) = v235 - v231;
                          *(_DWORD *)(v7 + 1308) = v237 - v238;
                        }
                        else
                        {
                          *(_QWORD *)(v7 + 1296) = v231;
                          *(_QWORD *)(v7 + 1304) = v230;
                        }
                      }
                      if (v228)
                        v239 = *(_BYTE *)(v7 + 1312) == 0;
                      else
                        v239 = 1;
                      v240 = !v239;
                      *(_BYTE *)(v7 + 1312) = v240;
                      v114 = *(void (**)(void))(**(_QWORD **)(v7 + 248) + 48);
                      goto LABEL_396;
                    }
LABEL_372:
                    v213 = 0;
                    v214 = 0;
                    goto LABEL_373;
                  }
                  v175 = *(_QWORD *)(v7 + 3088);
                  *(_DWORD *)(v175 + 560) = 4;
                  *(_BYTE *)(v175 + 572) = 0;
                  if (!*(_BYTE *)(v7 + 1008) || !*(_QWORD *)(v7 + 992))
                  {
                    if (v276)
                      (**(void (***)(uint64_t))v276)(v276);
                    v183 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 32))(v276);
                    (*(void (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
                    if (v183)
                    {
                      if (!*(_BYTE *)(v7 + 1280))
                      {
                        *(_WORD *)(v7 + 1064) = v275;
                        v198 = (void (***)(_QWORD))v276;
                        *(_QWORD *)(v7 + 1072) = v276;
                        if (v198)
                          (**v198)(v198);
                        v199 = v278;
                        *(_OWORD *)(v7 + 1080) = v277;
                        *(_OWORD *)(v7 + 1096) = v199;
                        *(_OWORD *)(v7 + 1112) = *(_OWORD *)v279;
                        *(_OWORD *)(v7 + 1124) = *(_OWORD *)&v279[12];
                        *(_BYTE *)(v7 + 1140) = 0;
                        *(_BYTE *)(v7 + 1208) = 0;
                        if (v285)
                        {
                          v200 = v283;
                          *(_OWORD *)(v7 + 1172) = v282;
                          *(_OWORD *)(v7 + 1188) = v200;
                          *(_BYTE *)(v7 + 1204) = v284;
                          v201 = v281;
                          *(_OWORD *)(v7 + 1140) = v280;
                          *(_OWORD *)(v7 + 1156) = v201;
                          *(_BYTE *)(v7 + 1208) = 1;
                        }
                        *(_OWORD *)(v7 + 1212) = *(_OWORD *)v286;
                        *(_OWORD *)(v7 + 1225) = *(_OWORD *)&v286[13];
                        v202 = v287;
                        *(_QWORD *)(v7 + 1248) = v287;
                        if (v202)
                        {
                          do
                            v203 = __ldxr(v202);
                          while (__stxr(v203 + 1, v202));
                        }
                        goto LABEL_319;
                      }
                      *(_BYTE *)(v7 + 1016) = 1;
LABEL_292:
                      webrtc::VideoFrame::operator=(v7 + 1064, (uint64_t)&v275);
                      *(Timestamp *)(v7 + 1288) = a2;
                      goto LABEL_397;
                    }
                    if (*(_BYTE *)(v7 + 1280))
                    {
                      v191 = *(_QWORD *)(v7 + 1248);
                      if (v191)
                      {
                        do
                        {
                          v192 = __ldaxr((unsigned int *)v191);
                          v193 = v192 - 1;
                        }
                        while (__stlxr(v193, (unsigned int *)v191));
                        if (!v193)
                        {
                          v194 = *(_QWORD *)(v191 + 8);
                          if (v194)
                          {
                            v195 = *(_QWORD *)(v191 + 16);
                            v196 = *(void **)(v191 + 8);
                            if (v195 != v194)
                            {
                              do
                              {
                                v197 = *(void **)(v195 - 96);
                                if (v197)
                                {
                                  *(_QWORD *)(v195 - 88) = v197;
                                  operator delete(v197);
                                }
                                v195 -= 104;
                              }
                              while (v195 != v194);
                              v196 = *(void **)(v191 + 8);
                            }
                            *(_QWORD *)(v191 + 16) = v194;
                            operator delete(v196);
                          }
                          MEMORY[0x20BD0ADEC](v191, 0x1020C40E72D6CFBLL);
                        }
                      }
                      v227 = *(_QWORD *)(v7 + 1072);
                      if (v227)
                        (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
                      *(_BYTE *)(v7 + 1280) = 0;
                    }
                    *(_BYTE *)(v7 + 1016) = 1;
                    v212 = v276;
                    if (v276)
                      goto LABEL_350;
                    goto LABEL_372;
                  }
                  if (*(_BYTE *)(v7 + 1280))
                  {
                    v176 = *(_QWORD *)(v7 + 1248);
                    if (v176)
                    {
                      do
                      {
                        v177 = __ldaxr((unsigned int *)v176);
                        v178 = v177 - 1;
                      }
                      while (__stlxr(v178, (unsigned int *)v176));
                      if (!v178)
                      {
                        v179 = *(_QWORD *)(v176 + 8);
                        if (v179)
                        {
                          v180 = *(_QWORD *)(v176 + 16);
                          v181 = *(void **)(v176 + 8);
                          if (v180 != v179)
                          {
                            do
                            {
                              v182 = *(void **)(v180 - 96);
                              if (v182)
                              {
                                *(_QWORD *)(v180 - 88) = v182;
                                operator delete(v182);
                              }
                              v180 -= 104;
                            }
                            while (v180 != v179);
                            v181 = *(void **)(v176 + 8);
                          }
                          *(_QWORD *)(v176 + 16) = v179;
                          operator delete(v181);
                        }
                        MEMORY[0x20BD0ADEC](v176, 0x1020C40E72D6CFBLL);
                      }
                    }
                    v204 = *(_QWORD *)(v7 + 1072);
                    if (v204)
                      (*(void (**)(uint64_t))(*(_QWORD *)v204 + 8))(v204);
                    *(_BYTE *)(v7 + 1280) = 0;
                  }
                  webrtc::FrameDropper::Leak(v7 + 2024, v135);
                  if (*(_BYTE *)(v7 + 2104))
                  {
                    *(_BYTE *)(v7 + 2097) = 0;
LABEL_329:
                    webrtc::VideoStreamEncoder::EncodeVideoFrame((webrtc::VideoStreamEncoder *)v7, (const webrtc::VideoFrame *)&v275, a2.var0);
                    goto LABEL_397;
                  }
                  v205 = *(unsigned __int8 *)(v7 + 1440);
                  *(_BYTE *)(v7 + 2097) = v205 ^ 1;
                  if (v205)
                    goto LABEL_329;
                  if (*(_BYTE *)(v7 + 2072))
                  {
                    *(_BYTE *)(v7 + 2072) = 0;
                    *(_DWORD *)(v7 + 2088) = 0;
                  }
                  v206 = *(float *)(v7 + 2080);
                  if (v206 >= 0.5)
                  {
                    v215 = 1.0 - v206;
                    v216 = (int)(float)((float)((float)(1.0 / v215) + -1.0) + 0.5);
                    if (v215 < 0.00001)
                      v216 = 99999;
                    if (v216 >= (int)(float)(*(float *)(v7 + 2092) * *(float *)(v7 + 2100)))
                      v216 = (int)(float)(*(float *)(v7 + 2092) * *(float *)(v7 + 2100));
                    v217 = *(_DWORD *)(v7 + 2088);
                    if (v217 < 0)
                      v217 = -v217;
                    v218 = v217 < v216;
                    if (v217 < v216)
                      v219 = v217 + 1;
                    else
                      v219 = 0;
                    *(_DWORD *)(v7 + 2088) = v219;
                    if (!v218)
                      goto LABEL_329;
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
                      goto LABEL_429;
                  }
                  else
                  {
                    if (v206 <= 0.0 || v206 >= 0.5)
                      goto LABEL_364;
                    v207 = (int)(float)((float)((float)(1.0 / v206) + -1.0) + 0.5);
                    if (v206 < 0.00001)
                      v207 = 99999;
                    v208 = -v207;
                    v209 = *(_DWORD *)(v7 + 2088);
                    v210 = v209 >= 0 ? *(_DWORD *)(v7 + 2088) : -v209;
                    if (-v210 <= v208)
                    {
LABEL_364:
                      *(_DWORD *)(v7 + 2088) = 0;
                      goto LABEL_329;
                    }
                    if (v209)
                    {
                      *(_DWORD *)(v7 + 2088) = ~v210;
                      goto LABEL_329;
                    }
                    *(_DWORD *)(v7 + 2088) = -1;
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
                    {
LABEL_429:
                      if (v276)
                      {
                        v258 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 40))(v276);
                        v259 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 48))(v276) << 32;
                      }
                      else
                      {
                        v258 = 0;
                        v259 = 0;
                      }
                      v260 = v286[28];
                      v261 = v259 | v258;
                      v262 = *(_QWORD *)&v286[20];
                      if (v286[28])
                      {
                        v263 = *(_QWORD *)&v286[12];
                      }
                      else
                      {
                        v262 = v261;
                        v263 = 0;
                      }
                      v264 = HIDWORD(v262);
                      if (v262)
                      {
                        if (*(_QWORD *)(v7 + 1304))
                        {
                          v265 = HIDWORD(v263);
                          v266 = *(_DWORD *)(v7 + 1296);
                          v267 = v263 + v262;
                          if (v266 + *(_DWORD *)(v7 + 1304) > v267)
                            v267 = v266 + *(_DWORD *)(v7 + 1304);
                          v268 = *(_DWORD *)(v7 + 1300);
                          v269 = HIDWORD(v263) + v264;
                          if (v268 + *(_DWORD *)(v7 + 1308) > v269)
                            v269 = v268 + *(_DWORD *)(v7 + 1308);
                          if ((int)v263 >= v266)
                            LODWORD(v263) = *(_DWORD *)(v7 + 1296);
                          *(_DWORD *)(v7 + 1296) = v263;
                          if ((int)v265 >= v268)
                            v270 = v268;
                          else
                            v270 = v265;
                          *(_DWORD *)(v7 + 1300) = v270;
                          *(_DWORD *)(v7 + 1304) = v267 - v263;
                          *(_DWORD *)(v7 + 1308) = v269 - v270;
                        }
                        else
                        {
                          *(_QWORD *)(v7 + 1296) = v263;
                          *(_QWORD *)(v7 + 1304) = v262;
                        }
                      }
                      if (v260)
                        v271 = *(_BYTE *)(v7 + 1312) == 0;
                      else
                        v271 = 1;
                      v272 = !v271;
                      *(_BYTE *)(v7 + 1312) = v272;
                      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 128))(v7, 0);
                      v114 = *(void (**)(void))(**(_QWORD **)(v7 + 248) + 48);
                      goto LABEL_396;
                    }
                  }
                  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v220, v221, v222, v223, v224, v225, v226, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
                  goto LABEL_429;
                }
                v144 = (_BYTE *)(v7 + 1368);
                if (*(_BYTE *)(v7 + 1008))
                {
                  v292 = &off_24C0C3368;
                  memcpy(v293, (const void *)(v7 + 640), 0x170uLL);
                  *(double *)&v293[42] = (double)v135;
                  webrtc::VideoStreamEncoder::UpdateBitrateAllocation((uint64_t)v291, v7, &v292);
                  webrtc::VideoStreamEncoder::SetEncoderRates(v7, (uint64_t)v291);
                }
              }
              *v143 = v142;
              *v144 = 1;
              goto LABEL_229;
            }
            v104 = v276;
LABEL_179:
            if (v104)
            {
              v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 40))(v104);
              if (!*(_BYTE *)(v7 + 604))
                goto LABEL_457;
              if (v116 != *(_DWORD *)(v7 + 592))
                goto LABEL_187;
LABEL_184:
              v117 = v276;
              if (v276)
              {
                v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 48))(v276);
                if (!*(_BYTE *)(v7 + 604))
LABEL_457:
                  __break(1u);
              }
              if (v117 == *(_DWORD *)(v7 + 596))
              {
LABEL_198:
                *(_BYTE *)(v7 + 516) = 1;
                v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 40))(v276);
                v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 48))(v276);
                v123 = v276;
                (**(void (***)(uint64_t))v276)(v276);
                v124 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 32))(v123);
                (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
                v125 = v124 == 0;
                if (*(_BYTE *)(v7 + 604))
                {
                  *(_DWORD *)(v7 + 592) = v121;
                  *(_DWORD *)(v7 + 596) = v122;
                  *(_BYTE *)(v7 + 600) = v125;
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
                    goto LABEL_200;
                }
                else
                {
                  *(_BYTE *)(v7 + 604) = 1;
                  *(_DWORD *)(v7 + 592) = v121;
                  *(_DWORD *)(v7 + 596) = v122;
                  *(_BYTE *)(v7 + 600) = v125;
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
                  {
LABEL_200:
                    v133 = v276;
                    if (v276)
                    {
LABEL_201:
                      v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
                      LODWORD(v133) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 48))(v276);
LABEL_206:
                      *(_QWORD *)(v7 + 1296) = 0;
                      *(_DWORD *)(v7 + 1304) = v134;
                      *(_DWORD *)(v7 + 1308) = v133;
                      goto LABEL_207;
                    }
LABEL_205:
                    v134 = 0;
                    goto LABEL_206;
                  }
                }
                if (!*(_BYTE *)(v7 + 604))
                  goto LABEL_457;
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v126, v127, v128, v129, v130, v131, v132, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
                v133 = v276;
                if (v276)
                  goto LABEL_201;
                goto LABEL_205;
              }
LABEL_187:
              if (*(_QWORD *)(v7 + 104))
              {
                v118 = *(_QWORD *)(v7 + 240);
                if (v118)
                {
                  v119 = v276;
                  if (v276)
                  {
                    v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 40))(v276);
                    v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 48))(v276);
                  }
                  else
                  {
                    v120 = 0;
                  }
                  v291[0] = v120;
                  v291[1] = v119;
                  (*(void (**)(void **__return_ptr, uint64_t, _DWORD *))(*(_QWORD *)v118 + 32))(&v292, v118, v291);
                  if (LOBYTE(v293[11]))
                  {
                    (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(v7 + 104) + 24))(*(_QWORD *)(v7 + 104), &v292, 0);
                    if (LOBYTE(v293[11]))
                    {
                      if ((v293[5] & 1) != 0)
                        operator delete((void *)v293[6]);
                      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v293[2], v293[3]);
                      if (SHIBYTE(v293[1]) < 0)
                        operator delete(v292);
                    }
                  }
                }
              }
              goto LABEL_198;
            }
LABEL_183:
            if (*(_DWORD *)(v7 + 592))
              goto LABEL_187;
            goto LABEL_184;
          }
LABEL_135:
          if ((a3 & 1) != 0)
            goto LABEL_136;
          goto LABEL_140;
        }
LABEL_39:
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
        v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27);
        goto LABEL_40;
      }
    }
    v25 = 0;
    *(_QWORD *)(v7 + 1024) = v14;
    v26 = *(_QWORD *)(v7 + 248);
    v27 = v276;
    if (!v276)
      goto LABEL_27;
    goto LABEL_39;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
  if (v276)
  {
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 40))(v276);
    v38 = v37 | (unint64_t)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 48))(v276) << 32);
  }
  else
  {
    v38 = 0;
  }
  v45 = v286[28];
  v46 = *(_QWORD *)&v286[20];
  if (v286[28])
  {
    v47 = *(_QWORD *)&v286[12];
  }
  else
  {
    v46 = v38;
    v47 = 0;
  }
  v48 = HIDWORD(v46);
  if (v46)
  {
    if (*(_QWORD *)(v7 + 1304))
    {
      v49 = HIDWORD(v47);
      v50 = *(_DWORD *)(v7 + 1296);
      v51 = v47 + v46;
      if (v50 + *(_DWORD *)(v7 + 1304) > v51)
        v51 = v50 + *(_DWORD *)(v7 + 1304);
      v52 = *(_DWORD *)(v7 + 1300);
      v53 = HIDWORD(v47) + v48;
      if (v52 + *(_DWORD *)(v7 + 1308) > v53)
        v53 = v52 + *(_DWORD *)(v7 + 1308);
      if ((int)v47 >= v50)
        LODWORD(v47) = *(_DWORD *)(v7 + 1296);
      *(_DWORD *)(v7 + 1296) = v47;
      if ((int)v49 >= v52)
        v54 = v52;
      else
        v54 = v49;
      *(_DWORD *)(v7 + 1300) = v54;
      *(_DWORD *)(v7 + 1304) = v51 - v47;
      *(_DWORD *)(v7 + 1308) = v53 - v54;
    }
    else
    {
      *(_QWORD *)(v7 + 1296) = v47;
      *(_QWORD *)(v7 + 1304) = v46;
    }
  }
  if (v45)
    v55 = *(_BYTE *)(v7 + 1312) == 0;
  else
    v55 = 1;
  v56 = !v55;
  *(_BYTE *)(v7 + 1312) = v56;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 248) + 48))(*(_QWORD *)(v7 + 248), 1);
LABEL_401:
  v248 = v287;
  if (v287)
  {
    do
    {
      v249 = __ldaxr(v248);
      v250 = v249 - 1;
    }
    while (__stlxr(v250, v248));
    if (!v250)
    {
      v251 = *((_QWORD *)v248 + 1);
      if (v251)
      {
        v252 = *((_QWORD *)v248 + 2);
        v253 = (void *)*((_QWORD *)v248 + 1);
        if (v252 != v251)
        {
          do
          {
            v254 = *(void **)(v252 - 96);
            if (v254)
            {
              *(_QWORD *)(v252 - 88) = v254;
              operator delete(v254);
            }
            v252 -= 104;
          }
          while (v252 != v251);
          v253 = (void *)*((_QWORD *)v248 + 1);
        }
        *((_QWORD *)v248 + 2) = v251;
        operator delete(v253);
      }
      MEMORY[0x20BD0ADEC](v248, 0x1020C40E72D6CFBLL);
    }
  }
  result = v276;
  if (v276)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
  return result;
}

uint64_t webrtc::VideoStreamEncoder::CadenceCallback::OnDiscardedFrame(webrtc::VideoStreamEncoder::CadenceCallback *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 248) + 48))(*(_QWORD *)(*((_QWORD *)this + 1) + 248), 0);
}

uint64_t webrtc::VideoStreamEncoder::CadenceCallback::RequestRefreshFrame(webrtc::VideoStreamEncoder::CadenceCallback *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  char v7;
  char v8;
  _QWORD v9[2];
  uint64_t (*v10)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v11)(uint64_t);

  v1 = *((_QWORD *)this + 1);
  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(unsigned int **)(v1 + 5648);
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = (_QWORD *)operator new();
  *v5 = v3;
  v5[1] = v1;
  v5[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v5[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::RequestRefreshFrame(void)::$_0 &&>;
  v9[0] = v5;
  v10 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v11 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v2 + 8))(v2, v9, &v8, &v7);
  return v10(1, v9, v9);
}

void webrtc::VideoStreamEncoder::DegradationPreferenceManager::~DegradationPreferenceManager(webrtc::VideoStreamEncoder::DegradationPreferenceManager *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::VideoStreamEncoder::DegradationPreferenceManager::degradation_preference(webrtc::VideoStreamEncoder::DegradationPreferenceManager *this)
{
  return *((unsigned int *)this + 4);
}

void std::vector<webrtc::VideoStream>::__append(void **a1, unint64_t a2)
{
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v4 = (char *)a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 5) < a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 5);
    v7 = v6 + a2;
    if (v6 + a2 <= 0x2AAAAAAAAAAAAAALL)
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 5);
      if (2 * v8 > v7)
        v7 = 2 * v8;
      if (v8 >= 0x155555555555555)
        v9 = 0x2AAAAAAAAAAAAAALL;
      else
        v9 = v7;
      if (v9)
      {
        if (v9 > 0x2AAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v10 = (char *)operator new(96 * v9);
      }
      else
      {
        v10 = 0;
      }
      v12 = &v10[96 * v6];
      v13 = &v10[96 * v9];
      v14 = &v12[96 * a2];
      v15 = v12;
      do
      {
        if (!v15)
          goto LABEL_27;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = -1;
        *((_QWORD *)v15 + 3) = -1;
        *((_QWORD *)v15 + 4) = 0xBFF0000000000000;
        *((_DWORD *)v15 + 10) = -1;
        v15[48] = 0;
        v15[56] = 0;
        v15[64] = 0;
        v15[72] = 0;
        *((_WORD *)v15 + 40) = 0;
        v15[82] = 1;
        v15[84] = 0;
        v15[92] = 0;
        v15 += 96;
      }
      while (v15 != v14);
      v17 = (char *)*a1;
      v16 = (char *)a1[1];
      if (v16 != *a1)
      {
        do
        {
          v18 = *((_OWORD *)v16 - 5);
          *((_OWORD *)v12 - 6) = *((_OWORD *)v16 - 6);
          *((_OWORD *)v12 - 5) = v18;
          v19 = *((_OWORD *)v16 - 4);
          v20 = *((_OWORD *)v16 - 3);
          v21 = *((_OWORD *)v16 - 2);
          *(_OWORD *)(v12 - 19) = *(_OWORD *)(v16 - 19);
          *((_OWORD *)v12 - 3) = v20;
          *((_OWORD *)v12 - 2) = v21;
          *((_OWORD *)v12 - 4) = v19;
          v12 -= 96;
          v16 -= 96;
        }
        while (v16 != v17);
        v16 = (char *)*a1;
      }
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (v16)
        operator delete(v16);
      return;
    }
LABEL_28:
    abort();
  }
  if (!a2)
    goto LABEL_16;
  v11 = &v4[96 * a2];
  do
  {
    if (!v4)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = -1;
    *((_QWORD *)v4 + 3) = -1;
    *((_QWORD *)v4 + 4) = 0xBFF0000000000000;
    *((_DWORD *)v4 + 10) = -1;
    v4[48] = 0;
    v4[56] = 0;
    v4[64] = 0;
    v4[72] = 0;
    *((_WORD *)v4 + 40) = 0;
    v4[82] = 1;
    v4[84] = 0;
    v4[92] = 0;
    v4 += 96;
  }
  while (v4 != v11);
  v4 = v11;
LABEL_16:
  a1[1] = v4;
}

void _ZN4absl23inlined_vector_internal7StorageINS_12AnyInvocableIFvN6webrtc8RTCErrorEOEEELm2ENSt3__19allocatorIS6_EEE15DestroyContentsEv(_QWORD *a1)
{
  unint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (void **)(a1 + 1);
  v2 = *a1;
  v4 = *a1 & 1;
  v5 = a1 + 1;
  if ((*a1 & 1) != 0)
    v5 = *v3;
  if (v2 >= 2)
  {
    if (!v5)
    {
      __break(1u);
      return;
    }
    v6 = v2 >> 1;
    v7 = (uint64_t)v5 + 32 * (v2 >> 1) - 32;
    do
    {
      --v6;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(1, v7, v7);
      v7 -= 32;
    }
    while (v6);
    v4 = *a1 & 1;
  }
  if (v4)
    operator delete(*v3);
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::VideoStreamEncoder(webrtc::Environment const&,unsigned int,webrtc::VideoStreamEncoderObserver *,webrtc::VideoStreamEncoderSettings const&,std::unique_ptr<webrtc::OveruseFrameDetector>,std::unique_ptr<webrtc::FrameCadenceAdapterInterface>,std::unique_ptr<webrtc::TaskQueueBase,webrtc::TaskQueueDeleter>,webrtc::VideoStreamEncoder::BitrateAllocationCallbackType,webrtc::VideoEncoderFactory::EncoderSelectorInterface *)::$_1 &&>(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  __int128 v12;
  pthread_mutexattr_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = *(_QWORD **)(*a1 + 2816);
  v3 = operator new();
  *(_QWORD *)(v3 + 8) = &unk_24C0BB7B8;
  *(_QWORD *)v3 = &off_24C0BB760;
  *(_QWORD *)(v3 + 16) = &unk_24C0BB7E0;
  *(_QWORD *)(v3 + 24) = *v4;
  v5 = operator new();
  *(_QWORD *)(v5 + 16) = *v4;
  *(_QWORD *)(v5 + 24) = v3;
  *(_QWORD *)v5 = &unk_24C0BB808;
  *(_QWORD *)(v5 + 8) = &unk_24C0BB848;
  *(_QWORD *)(v3 + 32) = v5;
  *(_DWORD *)(v5 + 32) = 0;
  v6 = (unsigned int *)(v5 + 32);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  pthread_mutexattr_init(&v13);
  pthread_mutexattr_setpolicy_np(&v13, 3);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 40), &v13);
  pthread_mutexattr_destroy(&v13);
  *(_QWORD *)(v3 + 160) = 0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_QWORD *)(v3 + 152) = v3 + 160;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 176) = v2;
  *(_BYTE *)(v3 + 184) = 0;
  *(_BYTE *)(v3 + 192) = 0;
  *(_BYTE *)(v3 + 200) = 0;
  *(_BYTE *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 216) = 0;
  *(_BYTE *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 232) = v3 + 240;
  webrtc::VideoStreamAdapter::AddRestrictionsListener(v2, v3 + 8);
  v8 = *(_QWORD *)(v1 + 2824);
  *(_QWORD *)(v1 + 2824) = v3;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v3 = *(_QWORD *)(v1 + 2824);
  }
  v9 = *(_QWORD *)(v1 + 2816);
  *(_QWORD *)(v1 + 2960) = v3;
  *(_QWORD *)(v1 + 2968) = v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v1 + 2872);
  webrtc::VideoStreamAdapter::AddRestrictionsListener(*(_QWORD **)(v1 + 2816), v1 + 2864);
  webrtc::VideoStreamAdapter::AddRestrictionsListener(*(_QWORD **)(v1 + 2816), v1 + 16);
  webrtc::VideoStreamEncoderResourceManager::MaybeInitializePixelLimitResource((webrtc::VideoStreamEncoderResourceManager *)(v1 + 2864));
  v12 = *(_OWORD *)(v1 + 2896);
  v10 = operator new(0x10uLL);
  *(_OWORD *)v10 = v12;
  v11 = *(void **)(v1 + 2840);
  if (v11)
  {
    *(_QWORD *)(v1 + 2848) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(v1 + 2840) = v10;
  *(_QWORD *)(v1 + 2848) = v10 + 2;
  *(_QWORD *)(v1 + 2856) = v10 + 2;
  webrtc::VideoStreamAdapter::AddAdaptationConstraint(*(_QWORD **)(v1 + 2816), v12);
  webrtc::VideoStreamAdapter::AddAdaptationConstraint(*(_QWORD **)(v1 + 2816), v10[1]);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::Stop(void)::$_2 &&>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = **a1;
  if (*(_QWORD *)(v1 + 2824))
  {
    result = webrtc::VideoStreamEncoderResourceManager::StopManagedResources((webrtc::VideoStreamEncoderResourceManager *)(v1 + 2864));
    v3 = *(_QWORD **)(v1 + 2840);
    v4 = *(_QWORD **)(v1 + 2848);
    while (v3 != v4)
    {
      v5 = *(_QWORD *)(v1 + 2816);
      v7 = *(char **)(v5 + 184);
      v6 = *(char **)(v5 + 192);
      if (v7 != v6)
      {
        while (*(_QWORD *)v7 != *v3)
        {
          v7 += 8;
          if (v7 == v6)
          {
            v7 = *(char **)(v5 + 192);
            break;
          }
        }
      }
      if (v6 == v7)
        goto LABEL_51;
      v8 = v6 - (v7 + 8);
      if (v6 != v7 + 8)
        result = (uint64_t)memmove(v7, v7 + 8, v6 - (v7 + 8));
      *(_QWORD *)(v5 + 192) = &v7[v8];
      ++v3;
    }
    v9 = *(uint64_t **)(v1 + 4352);
    v10 = *(uint64_t **)(v1 + 4360);
    if (v9 != v10)
    {
      do
      {
        while (1)
        {
          v11 = *v9;
          v25 = v11;
          if (!v11)
            break;
          (**(void (***)(uint64_t))v11)(v11);
          webrtc::VideoStreamEncoderResourceManager::RemoveResource((_QWORD *)(v1 + 2864), &v25);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          if (++v9 == v10)
            goto LABEL_17;
        }
        result = webrtc::VideoStreamEncoderResourceManager::RemoveResource((_QWORD *)(v1 + 2864), &v25);
        ++v9;
      }
      while (v9 != v10);
LABEL_17:
      v9 = *(uint64_t **)(v1 + 4360);
      v12 = *(uint64_t **)(v1 + 4352);
      if (v9 != v12)
      {
        do
        {
          v13 = *--v9;
          result = v13;
          if (v13)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
        while (v9 != v12);
        v9 = v12;
      }
    }
    *(_QWORD *)(v1 + 4360) = v9;
    v14 = *(_QWORD *)(v1 + 2816);
    v16 = *(char **)(v14 + 160);
    v15 = *(char **)(v14 + 168);
    if (v16 != v15)
    {
      while (*(_QWORD *)v16 != v1 + 16)
      {
        v16 += 8;
        if (v16 == v15)
        {
          v16 = *(char **)(v14 + 168);
          break;
        }
      }
    }
    if (v15 == v16)
      goto LABEL_51;
    v17 = v15 - (v16 + 8);
    if (v15 != v16 + 8)
      result = (uint64_t)memmove(v16, v16 + 8, v15 - (v16 + 8));
    *(_QWORD *)(v14 + 168) = &v16[v17];
    v18 = *(_QWORD *)(v1 + 2816);
    v20 = *(char **)(v18 + 160);
    v19 = *(char **)(v18 + 168);
    if (v20 != v19)
    {
      while (*(_QWORD *)v20 != v1 + 2864)
      {
        v20 += 8;
        if (v20 == v19)
        {
          v20 = *(char **)(v18 + 168);
          break;
        }
      }
    }
    if (v19 == v20)
    {
LABEL_51:
      __break(1u);
      return result;
    }
    v21 = v19 - (v20 + 8);
    if (v19 != v20 + 8)
      memmove(v20, v20 + 8, v19 - (v20 + 8));
    *(_QWORD *)(v18 + 168) = &v20[v21];
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 2824) + 24))(*(_QWORD *)(v1 + 2824), v1 + 2872);
    *(_QWORD *)(v1 + 2968) = 0;
    *(_QWORD *)(v1 + 2960) = 0;
    v22 = *(_QWORD *)(v1 + 2824);
    *(_QWORD *)(v1 + 2824) = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  v23 = *(_QWORD *)(v1 + 504);
  *(_QWORD *)(v1 + 504) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(_QWORD *)(v1 + 488);
  if (!v24)
  {
    *(_QWORD *)(v1 + 488) = 0;
    goto LABEL_46;
  }
  if (!*(_BYTE *)(v1 + 496))
  {
    *(_QWORD *)(v1 + 488) = 0;
LABEL_49:
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    result = *(_QWORD *)(v1 + 272);
    *(_QWORD *)(v1 + 272) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24);
  *(_BYTE *)(v1 + 496) = 0;
  v24 = *(_QWORD *)(v1 + 488);
  *(_QWORD *)(v1 + 488) = 0;
  if (v24)
    goto LABEL_49;
LABEL_46:
  result = *(_QWORD *)(v1 + 272);
  *(_QWORD *)(v1 + 272) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::VideoStreamEncoder::Stop(void)::$_2>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*(_BYTE *)(v3 + 8))
      {
        v4 = *(_QWORD *)(v3 + 16);
        pthread_mutex_lock((pthread_mutex_t *)v4);
        *(_BYTE *)(v4 + 113) = 1;
        pthread_cond_broadcast((pthread_cond_t *)(v4 + 64));
        pthread_mutex_unlock((pthread_mutex_t *)v4);
        *(_BYTE *)(v3 + 8) = 0;
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::SetFecControllerOverride(webrtc::FecControllerOverride *)::$_0 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  *(_QWORD *)(v1 + 1352) = a1[1];
  result = *(_QWORD *)(v1 + 488);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::AddAdaptationResource(webrtc::scoped_refptr<webrtc::Resource>)::$_1 &&>(uint64_t result)
{
  void (****v1)(_QWORD);
  uint64_t v2;
  _QWORD *v3;
  void (***v4)(_QWORD);
  uint64_t v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);

  v1 = (void (****)(_QWORD))(result + 8);
  v2 = *(_QWORD *)result;
  v3 = *(_QWORD **)(*(_QWORD *)result + 4360);
  if ((unint64_t)v3 >= *(_QWORD *)(*(_QWORD *)result + 4368))
  {
    *(_QWORD *)(v2 + 4360) = std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>(v2 + 4352, v1);
    v5 = v2 + 2864;
    v6 = *v1;
    v7 = v6;
    if (!v6)
      return webrtc::VideoStreamEncoderResourceManager::AddResource(v5, &v7, 1);
    goto LABEL_8;
  }
  if (v3)
  {
    v4 = *v1;
    *v3 = *v1;
    if (v4)
      (**v4)(v4);
    *(_QWORD *)(v2 + 4360) = v3 + 1;
    v5 = v2 + 2864;
    v6 = *v1;
    v7 = v6;
    if (!v6)
      return webrtc::VideoStreamEncoderResourceManager::AddResource(v5, &v7, 1);
LABEL_8:
    (**v6)(v6);
    webrtc::VideoStreamEncoderResourceManager::AddResource(v5, &v7, 1);
    return ((uint64_t (*)(_QWORD))(*v6)[1])(v6);
  }
  __break(1u);
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::VideoStreamEncoder::AddAdaptationResource(webrtc::scoped_refptr<webrtc::Resource>)::$_1>(char a1, __int128 *a2, _OWORD *a3)
{
  __int128 v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *((_QWORD *)a2 + 1) = 0;
    *a3 = v3;
  }
  result = *((_QWORD *)a2 + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::GetAdaptationResources(void)::$_1 &&>(uint64_t *a1)
{
  uint64_t v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  void *v11;

  v1 = *a1;
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(*(_QWORD *)*a1 + 2824) + 40))(&v10);
  v2 = *(void ***)(v1 + 8);
  v3 = (char *)*v2;
  if (*v2)
  {
    v4 = (char *)v2[1];
    v5 = *v2;
    if (v4 != v3)
    {
      do
      {
        v7 = *((_QWORD *)v4 - 1);
        v4 -= 8;
        v6 = v7;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = *v2;
    }
    v2[1] = v3;
    operator delete(v5);
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  *(_OWORD *)v2 = v10;
  v2[2] = v11;
  v8 = *(_QWORD *)(v1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)v8);
  *(_BYTE *)(v8 + 113) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v8 + 64));
  return pthread_mutex_unlock((pthread_mutex_t *)v8);
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::SetSource(rtc::VideoSourceInterface<webrtc::VideoFrame> *,webrtc::DegradationPreference const&)::$_1 &&>(_DWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  int v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  void *v17[22];
  char *v18;
  char v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 2832);
  v3 = a1[2];
  *(_DWORD *)(v2 + 8) = v3;
  if (*(_BYTE *)(v2 + 12))
    v4 = v3 == 3;
  else
    v4 = 0;
  if (v4)
    v5 = 2;
  else
    v5 = v3;
  if (v5 != *(_DWORD *)(v2 + 16))
  {
    *(_DWORD *)(v2 + 16) = v5;
    webrtc::VideoStreamAdapter::SetDegradationPreference(*(_QWORD *)(v2 + 24), v5);
    v3 = a1[2];
  }
  *(_DWORD *)(v1 + 2984) = v3;
  v7 = v3 & 0xFFFFFFFD;
  v8 = v3 & 0xFFFFFFFE;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 2920) + 120) || *(_QWORD *)(*(_QWORD *)(v1 + 2936) + 120))
  {
    (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v1 + 2976) + 80))(*(_QWORD *)(v1 + 2976), (v7 == 1) | ((unint64_t)(v8 == 2) << 8), (v7 == 1) | ((unint64_t)(v8 == 2) << 8));
    v9 = *(_QWORD *)(v1 + 488);
    if (!v9)
      return;
  }
  else
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v1 + 2976) + 80))(*(_QWORD *)(v1 + 2976), (v7 == 1) | ((unint64_t)(v8 == 2) << 8), 0);
    v9 = *(_QWORD *)(v1 + 488);
    if (!v9)
      return;
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v9 + 96))(v17);
  webrtc::VideoStreamEncoderResourceManager::ConfigureQualityScaler((webrtc::VideoStreamEncoderResourceManager *)(v1 + 2864), (const webrtc::VideoEncoder::EncoderInfo *)v17);
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v17);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v1 + 488) + 96))(v17);
  if ((*(_DWORD *)(v1 + 2984) & 0xFFFFFFFD) == 1 && *(_BYTE *)(v1 + 4320) && *(_BYTE *)(v1 + 3929))
  {
    if (v20)
      v10 = v19 == 0;
    else
      v10 = 0;
    v11 = v10;
  }
  else
  {
    v11 = 0;
  }
  webrtc::VideoStreamEncoderResourceManager::UpdateBandwidthQualityScalerSettings((_QWORD *)(v1 + 2864), v11, &v18);
  v12 = *(_DWORD *)(v1 + 2984);
  v13 = v12 & 0xFFFFFFFD;
  v14 = v12 & 0xFFFFFFFE;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 2920) + 120) || *(_QWORD *)(*(_QWORD *)(v1 + 2936) + 120))
  {
    v15 = (v13 == 1) | ((unint64_t)(v14 == 2) << 8);
    v16 = v15;
  }
  else
  {
    v16 = 0;
    v15 = (v13 == 1) | ((unint64_t)(v14 == 2) << 8);
  }
  (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v1 + 2976) + 80))(*(_QWORD *)(v1 + 2976), v15, v16);
  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v17);
}

_QWORD *absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::SetSink(webrtc::VideoStreamEncoderInterface::EncoderSink *,BOOL)::$_1 &&>(_QWORD *result)
{
  *(_QWORD *)(*result + 80) = result[1];
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::SetStartBitrate(int)::$_0 &&>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v2 = *a1;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
  v10 = *((_DWORD *)a1 + 2);
  *(_DWORD *)(v2 + 616) = v10;
  *(_BYTE *)(v2 + 620) = v10 != 0;
  v11 = *((_DWORD *)a1 + 2);
  v12 = v11;
  if (v11)
  {
    v13 = (uint64_t *)(v2 + 3100);
    if (!*(_BYTE *)(v2 + 3104))
      *(_BYTE *)(v2 + 3104) = 1;
    *(_DWORD *)(v2 + 3100) = v11;
    v14 = *(_QWORD *)(v2 + 2896);
    v15 = *v13;
    *(_DWORD *)(v14 + 856) = *v13;
    *(_BYTE *)(v14 + 860) = BYTE4(v15);
    v16 = *(_QWORD *)(v2 + 2904);
    v17 = *v13;
    *(_DWORD *)(v16 + 8) = v17;
    *(_BYTE *)(v16 + 12) = BYTE4(v17);
  }
  v18 = *(_QWORD *)(v2 + 3088);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 3072) + 16))(*(_QWORD *)(v2 + 3072));
  *(_QWORD *)(v18 + 544) = v12;
  *(_QWORD *)(v18 + 552) = result;
  return result;
}

void _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc18VideoStreamEncoder16ConfigureEncoderENS2_18VideoEncoderConfigEmNS_12AnyInvocableIFvNS2_8RTCErrorEOEEEE3__1JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *, int *);
  unint64_t v16;
  uint64_t v17;
  int v18;
  void *__p;
  uint64_t v20;
  _BYTE v21[16];

  v1 = *a1;
  v2 = **a1;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc");
  (*(void (**)(_QWORD, _QWORD, BOOL))(**(_QWORD **)(v2 + 272) + 48))(*(_QWORD *)(v2 + 272), 0, *((_DWORD *)v1 + 36) == 1);
  v10 = !*(_QWORD *)(v2 + 488)
     || !webrtc::operator==((unsigned __int8 *)(v2 + 288), (unsigned __int8 *)v1 + 16)
     || *(_QWORD *)(v2 + 624) != v1[27];
  *(_BYTE *)(v2 + 517) = v10;
  webrtc::VideoEncoderConfig::operator=(v2 + 280, (uint64_t)(v1 + 1));
  *(_QWORD *)(v2 + 624) = v1[27];
  *(_BYTE *)(v2 + 516) = 1;
  if (*(_BYTE *)(v2 + 604))
  {
    if (!v1[31])
    {
LABEL_20:
      webrtc::VideoStreamEncoder::ReconfigureEncoder((webrtc::VideoStreamEncoder *)v2, v11);
      return;
    }
    v12 = *(_QWORD *)(v2 + 520);
    if ((v12 & 1) != 0)
    {
      v13 = *(_QWORD *)(v2 + 528);
      v14 = *(_QWORD *)(v2 + 536);
    }
    else
    {
      v13 = v2 + 528;
      v14 = 2;
    }
    v16 = v12 >> 1;
    if (v16 == v14)
    {
      _ZN4absl23inlined_vector_internal7StorageINS_12AnyInvocableIFvN6webrtc8RTCErrorEOEEELm2ENSt3__19allocatorIS6_EEE15EmplaceBackSlowIJS6_EEERS6_DpOT_(v2 + 520, (uint64_t)(v1 + 28));
      goto LABEL_20;
    }
    if (v13)
    {
      v17 = v13 + 32 * v16;
      ((void (*)(_QWORD, uint64_t *, uint64_t))v1[30])(0, v1 + 28, v17);
      *(_OWORD *)(v17 + 16) = *((_OWORD *)v1 + 15);
      v1[30] = (uint64_t)absl::internal_any_invocable::EmptyManager;
      v1[31] = 0;
      *(_QWORD *)(v2 + 520) += 2;
      goto LABEL_20;
    }
    __break(1u);
  }
  else
  {
    v15 = (void (*)(uint64_t *, int *))v1[31];
    if (v15)
    {
      v18 = 0;
      v21[14] = 0;
      v20 = 0;
      memset(v21, 0, 13);
      __p = 0;
      v15(v1 + 28, &v18);
      if ((v21[7] & 0x80000000) != 0)
        operator delete(__p);
      ((void (*)(uint64_t, uint64_t *, uint64_t *))v1[30])(1, v1 + 28, v1 + 28);
      v1[30] = (uint64_t)absl::internal_any_invocable::EmptyManager;
      v1[31] = 0;
    }
  }
}

uint64_t _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc18VideoStreamEncoder16ConfigureEncoderENS2_18VideoEncoderConfigEmNS_12AnyInvocableIFvNS2_8RTCErrorEOEEEE3__1EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 240))(1, v3 + 224, v3 + 224);
      webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)(v3 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void _ZN4absl23inlined_vector_internal7StorageINS_12AnyInvocableIFvN6webrtc8RTCErrorEOEEELm2ENSt3__19allocatorIS6_EEE15EmplaceBackSlowIJS6_EEERS6_DpOT_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = a1 + 8;
  v5 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (((v7 >> 58) & 0x1F) != 0)
      goto LABEL_15;
    v4 = *(_QWORD *)(a1 + 8);
    v6 = 2 * v7;
  }
  else
  {
    v6 = 4;
  }
  v8 = v5 >> 1;
  v9 = (char *)operator new(32 * v6);
  v10 = &v9[32 * (v5 >> 1)];
  (*(void (**)(_QWORD, uint64_t, char *))(a2 + 16))(0, a2, v10);
  *((_OWORD *)v10 + 1) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  if (v5 < 2)
    goto LABEL_11;
  v11 = 0;
  v12 = v8;
  do
  {
    v13 = v4 + v11;
    (*(void (**)(_QWORD, uint64_t, char *))(v4 + v11 + 16))(0, v4 + v11, &v9[v11]);
    *(_OWORD *)&v9[v11 + 16] = *(_OWORD *)(v4 + v11 + 16);
    *(_QWORD *)(v13 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(v13 + 24) = 0;
    v11 += 32;
    --v12;
  }
  while (v12);
  if (!v4)
  {
    __break(1u);
LABEL_15:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v14 = v4 + 32 * v8 - 32;
  do
  {
    --v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(1, v14, v14);
    v14 -= 32;
  }
  while (v8);
LABEL_11:
  v15 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v15 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)a1 = (v15 | 1) + 2;
}

uint64_t rtc::RefCountedObject<cricket::EncoderStreamFactory>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 104);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<cricket::EncoderStreamFactory>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 26;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<cricket::EncoderStreamFactory>::~RefCountedObject(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &unk_24C0B3CD8;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void rtc::RefCountedObject<cricket::EncoderStreamFactory>::~RefCountedObject(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0B3CD8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<cricket::EncoderStreamFactory>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 104));
  return v1 == 1;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::ReconfigureEncoder(void)::$_1 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  char *v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t i;
  char *v9;
  char *v11;
  char *v12;
  void *v13;
  _BYTE v14[24];
  void *__p;
  void *v16;

  v1 = *a1;
  v2 = **a1;
  v3 = *((_DWORD *)*a1 + 2);
  v4 = (char *)(*a1)[3];
  if (v3 == *(_DWORD *)(v2 + 4476))
  {
    v5 = (char *)v1[2];
    v6 = v4 - v5;
    v7 = *(_QWORD *)(v2 + 4480);
    if (v4 - v5 == *(_QWORD *)(v2 + 4488) - v7)
    {
      if (v5 == v4)
        return;
      for (i = 0; ; i += 8)
      {
        v9 = &v5[i];
        if (*(_DWORD *)&v5[i] != *(_DWORD *)(v7 + i) || *(_DWORD *)&v5[i + 4] != *(_DWORD *)(v7 + i + 4))
          break;
        if (v9 + 8 == v4)
          return;
      }
    }
  }
  else
  {
    v5 = (char *)v1[2];
    v6 = v4 - v5;
  }
  *(_DWORD *)(v2 + 4476) = v3;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v11 = (char *)operator new(v6);
    v12 = &v11[8 * (v6 >> 3)];
    memcpy(v11, v5, v6);
    v13 = *(void **)(v2 + 4480);
    if (!v13)
      goto LABEL_17;
    goto LABEL_16;
  }
  v11 = 0;
  v12 = 0;
  v13 = *(void **)(v2 + 4480);
  if (v13)
  {
LABEL_16:
    *(_QWORD *)(v2 + 4488) = v13;
    operator delete(v13);
  }
LABEL_17:
  *(_QWORD *)(v2 + 4480) = v11;
  *(_QWORD *)(v2 + 4488) = v12;
  *(_QWORD *)(v2 + 4496) = v12;
  if (*(_QWORD *)(v2 + 4384))
  {
    webrtc::VideoSourceSinkController::CurrentSettingsToSinkWants((webrtc::VideoSourceSinkController *)(v2 + 4376), (uint64_t)v14);
    (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)(v2 + 4384) + 16))(*(_QWORD *)(v2 + 4384), *(_QWORD *)(v2 + 4376), v14);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::VideoStreamEncoder::ReconfigureEncoder(void)::$_1>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  void *v4;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(void **)(v3 + 16);
      if (v4)
      {
        *(_QWORD *)(v3 + 24) = v4;
        operator delete(v4);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::RequestRefreshFrame(void)::$_0 &&>(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)a1 + 4384);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::SendKeyFrame(std::vector<webrtc::VideoFrameType> const&)::$_0 &&>(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)**a1 + 56))(**a1, *a1 + 1);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::VideoStreamEncoder::SendKeyFrame(std::vector<webrtc::VideoFrameType> const&)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  void *v4;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(void **)(v3 + 8);
      if (v4)
      {
        *(_QWORD *)(v3 + 16) = v4;
        operator delete(v4);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::OnLossNotification(webrtc::VideoEncoder::LossNotification const&)::$_0 &&>(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)**a1 + 64))(**a1, *a1 + 1);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::OnEncodedImage(webrtc::EncodedImage const&,webrtc::CodecSpecificInfo const*)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  _BOOL8 v9;

  v1 = *a1;
  v2 = **a1;
  result = *(_QWORD *)(v2 + 272);
  if (result)
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 64))(result, v1[3], *((unsigned __int8 *)v1 + 32));
  if (*((_DWORD *)v1 + 2) == 2 && *(_BYTE *)(v2 + 2005))
  {
    v4 = *(unsigned __int16 *)(v2 + 1644);
    v5 = *(unsigned __int16 *)(v2 + 1646);
    v6 = *(unsigned __int8 *)(v2 + 2006);
    if (*(_BYTE *)(v2 + 2006))
    {
      v7 = (unsigned int *)(v2 + 1784);
      do
      {
        if (*((_BYTE *)v7 + 32))
        {
          v4 = *v7;
          v5 = v7[1];
        }
        v7 += 9;
        --v6;
      }
      while (v6);
    }
    v9 = *((_DWORD *)v1 + 3) < v4 || *((_DWORD *)v1 + 4) < v5;
    return (*(uint64_t (**)(_QWORD, _BOOL8))(**(_QWORD **)(v2 + 248) + 120))(*(_QWORD *)(v2 + 248), v9);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::OnDroppedFrame(webrtc::EncodedImageCallback::DropReason)::$_0 &&>(unsigned __int8 *a1)
{
  return webrtc::QualityScalerResource::OnFrameDropped(*(_QWORD *)(*(_QWORD *)a1 + 2920), a1[8]);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::OnBitrateUpdated(webrtc::DataRate,webrtc::DataRate,webrtc::DataRate,unsigned char,long long,double)::$_0 &&>(double **a1)
{
  double *v1;
  uint64_t v2;
  unint64_t v3;
  double v4;
  BOOL v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *a1;
  v2 = *(_QWORD *)*a1;
  v3 = *((_QWORD *)v1 + 1);
  v4 = v1[6];
  v5 = v4 <= 0.01 || (uint64_t)v3 < 1;
  if (v5
    || (v6 = *(_DWORD *)(v2 + 1656), v3 <= (1000 * v6))
    || ((v7 = (int)(v4 * (double)(uint64_t)v3), LODWORD(v8) = v3 - 1000 * v6, (int)v8 >= v7)
      ? (v8 = v7)
      : (v8 = v8),
        (int)v8 < 1))
  {
    if (*(_BYTE *)(v2 + 2116))
      *(_BYTE *)(v2 + 2116) = 0;
    v10 = v3;
  }
  else
  {
    v9 = v3 / v8;
    if ((int)v9 <= 2)
      v9 = 2;
    else
      v9 = v9;
    *(_DWORD *)(v2 + 2112) = v9;
    *(_BYTE *)(v2 + 2116) = 1;
    v10 = 0x7FFFFFFFFFFFFFFFLL;
    if (v3 != 0x7FFFFFFFFFFFFFFFLL)
      v10 = v3 - v3 / v9;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, double))(*(_QWORD *)v2 + 72))(v2, v10, *((_QWORD *)v1 + 2), *((_QWORD *)v1 + 3), *((unsigned __int8 *)v1 + 32), *((_QWORD *)v1 + 5), v1[6]);
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::OnVideoSourceRestrictionsUpdated(webrtc::VideoSourceRestrictions,webrtc::VideoAdaptationCounters const&,webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoSourceRestrictions const&)::$_1 &&>(uint64_t **a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _BYTE v4[24];
  void *__p;
  void *v6;

  v1 = **a1;
  v2 = *(_OWORD *)(*a1 + 1);
  v3 = *(_OWORD *)(*a1 + 5);
  *(_OWORD *)(v1 + 4408) = *(_OWORD *)(*a1 + 3);
  *(_OWORD *)(v1 + 4424) = v3;
  *(_OWORD *)(v1 + 4392) = v2;
  if (*(_QWORD *)(v1 + 4384))
  {
    webrtc::VideoSourceSinkController::CurrentSettingsToSinkWants((webrtc::VideoSourceSinkController *)(v1 + 4376), (uint64_t)v4);
    (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)(v1 + 4384) + 16))(*(_QWORD *)(v1 + 4384), *(_QWORD *)(v1 + 4376), v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoStreamEncoder::RunPostEncode(webrtc::EncodedImage const&,long long,int,webrtc::DataSize)::$_0 &&>(_QWORD **a1)
{
  return webrtc::VideoStreamEncoder::RunPostEncode(**a1, *a1 + 1, (*a1)[41], *((unsigned int *)*a1 + 84), (*a1)[43]);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::VideoStreamEncoder::RunPostEncode(webrtc::EncodedImage const&,long long,int,webrtc::DataSize)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)(v3 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::VideoStreamEncoder::CheckForAnimatedContent(webrtc::VideoFrame const&,long long)::$_0 &&>(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  _BYTE v3[24];
  void *__p;
  void *v5;

  v1 = *a1;
  v2 = *((_BYTE *)a1 + 8);
  *(_QWORD *)(v1 + 4440) = 921600;
  *(_BYTE *)(v1 + 4448) = v2;
  if (*(_QWORD *)(v1 + 4384))
  {
    webrtc::VideoSourceSinkController::CurrentSettingsToSinkWants((webrtc::VideoSourceSinkController *)(v1 + 4376), (uint64_t)v3);
    (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)(v1 + 4384) + 16))(*(_QWORD *)(v1 + 4384), *(_QWORD *)(v1 + 4376), v3);
    if (__p)
    {
      v5 = __p;
      operator delete(__p);
    }
  }
}

uint64_t webrtc::VideoStreamEncoderResource::SetResourceListener(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  *(_QWORD *)(a1 + 104) = a2;
  return pthread_mutex_unlock(v4);
}

void webrtc::VideoStreamEncoderResource::Name(webrtc::VideoStreamEncoderResource *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

void webrtc::VideoStreamEncoderResourceManager::VideoStreamEncoderResourceManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6, uint64_t a7, int *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *p_p;
  unint64_t v27;
  BOOL v28;
  int v29;
  int v30;
  int *v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  int v36;
  std::string *v38;
  uint64_t v39;
  void *__p;
  unint64_t v41;
  unsigned __int8 v42;

  *(_QWORD *)a1 = &off_24C0C4DC8;
  *(_QWORD *)(a1 + 8) = &unk_24C0C4DF8;
  *(_QWORD *)(a1 + 16) = a8;
  *(_QWORD *)(a1 + 24) = a7;
  v15 = operator new();
  *(_QWORD *)v15 = &off_24C0B01A0;
  *(_BYTE *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 848) = 0;
  *(_BYTE *)(v15 + 856) = 0;
  *(_BYTE *)(v15 + 860) = 0;
  *(_QWORD *)(a1 + 32) = v15;
  v16 = operator new();
  v17 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v16 = &off_24C0AF270;
  *(_BYTE *)(v16 + 8) = 0;
  *(_BYTE *)(v16 + 12) = 0;
  webrtc::BalancedDegradationSettings::BalancedDegradationSettings((void **)(v16 + 16), a8);
  *(_QWORD *)(v16 + 40) = v17;
  *(_QWORD *)(a1 + 40) = v16;
  v18 = *a6;
  *a6 = 0;
  v39 = v18;
  webrtc::EncodeUsageResource::Create(&v39, (uint64_t *)(a1 + 48));
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  webrtc::QualityScalerResource::Create((uint64_t *)(a1 + 56));
  *(_QWORD *)(a1 + 64) = 0;
  webrtc::BandwidthQualityScalerResource::Create((uint64_t *)(a1 + 72));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a2;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = a3;
  *(_DWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  webrtc::BalancedDegradationSettings::BalancedDegradationSettings((void **)(a1 + 184), a8);
  *(_QWORD *)(a1 + 208) = a4;
  *(_BYTE *)(a1 + 216) = a5;
  v19 = (_QWORD *)operator new();
  v20 = v19;
  v21 = *(_QWORD *)(a1 + 56);
  if (v21)
  {
    (**(void (***)(_QWORD))v21)(*(_QWORD *)(a1 + 56));
    *v20 = v21;
    (**(void (***)(uint64_t))v21)(v21);
  }
  else
  {
    *v19 = 0;
  }
  webrtc::QualityScalerSettings::QualityScalerSettings((uint64_t)(v20 + 1), (uint64_t)a8);
  *((_BYTE *)v20 + 536) = 0;
  *((_BYTE *)v20 + 568) = 0;
  *((_BYTE *)v20 + 572) = 0;
  *((_OWORD *)v20 + 34) = 0u;
  *(_QWORD *)((char *)v20 + 557) = 0;
  *((_OWORD *)v20 + 36) = 0u;
  *((_OWORD *)v20 + 37) = 0u;
  *((_OWORD *)v20 + 38) = 0u;
  *((_BYTE *)v20 + 624) = 0;
  *(_QWORD *)(a1 + 224) = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(&__p, *(_QWORD *)(a1 + 16), "WebRTC-Video-QualityScaling", 27);
  if ((char)v42 < 0)
  {
    v27 = v41;
    if ((v41 & 0x8000000000000000) != 0)
      goto LABEL_43;
    p_p = (int *)__p;
    if (v41)
    {
      if (!__p)
        goto LABEL_43;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v27 = v42;
  }
  if (v27 < 7)
  {
    v28 = 0;
    if ((v42 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  v29 = *p_p;
  v30 = *(int *)((char *)p_p + 3);
  v28 = v29 == *(_DWORD *)"Enabled" && v30 == *(_DWORD *)"bled";
  if ((v42 & 0x80) != 0)
LABEL_23:
    operator delete(__p);
LABEL_24:
  *(_BYTE *)(a1 + 232) = v28;
  (*(void (**)(void **__return_ptr, int *, const char *, uint64_t))(*(_QWORD *)a8 + 16))(&__p, a8, "WebRTC-PixelLimitResource", 25);
  if (((char)v42 & 0x80000000) == 0)
  {
    v32 = (int *)&__p;
    v33 = v42;
    goto LABEL_29;
  }
  v33 = v41;
  if ((v41 & 0x8000000000000000) != 0 || (v32 = (int *)__p, v41) && !__p)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_29:
  if (v33 < 7)
  {
    v34 = 0;
    if ((v42 & 0x80) == 0)
      goto LABEL_40;
    goto LABEL_39;
  }
  v35 = *v32;
  v36 = *(int *)((char *)v32 + 3);
  v34 = v35 == 1650552389 && v36 == 1684368482;
  if ((v42 & 0x80) != 0)
LABEL_39:
    operator delete(__p);
LABEL_40:
  *(_BYTE *)(a1 + 233) = v34;
  *(_BYTE *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 1456) = 0;
  *(_QWORD *)(a1 + 1480) = 0;
  *(_QWORD *)(a1 + 1472) = 0;
  *(_QWORD *)(a1 + 1464) = a1 + 1472;
  if (!*(_QWORD *)(a1 + 24))
  {
LABEL_44:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/video_stream_encoder_resource_manager.cc", 281, "degradation_preference_provider_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v22, v23, v24, v25, v39);
    goto LABEL_45;
  }
  if (!*(_QWORD *)(a1 + 112))
  {
LABEL_45:
    v38 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/video_stream_encoder_resource_manager.cc", 282, "encoder_stats_observer_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v22, v23, v24, v25, v39);
    webrtc::VideoStreamEncoderResourceManager::~VideoStreamEncoderResourceManager((webrtc::VideoStreamEncoderResourceManager *)v38);
  }
}

void webrtc::VideoStreamEncoderResourceManager::~VideoStreamEncoderResourceManager(webrtc::VideoStreamEncoderResourceManager *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = &off_24C0C4DC8;
  *((_QWORD *)this + 1) = &unk_24C0C4DF8;
  std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::Resource>,std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::less<webrtc::scoped_refptr<webrtc::Resource>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>>>::destroy(*((_QWORD **)this + 184));
  if (*((_BYTE *)this + 1456))
  {
    webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoStreamEncoderResourceManager *)((char *)this + 864));
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo((void **)this + 77);
  }
  v2 = (_QWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v2)
  {
    v3 = (void *)v2[73];
    if (v3)
      operator delete(v3);
    v2[57] = off_24C0B4170;
    if (*((char *)v2 + 511) < 0)
    {
      operator delete((void *)v2[61]);
      v4 = (void *)v2[58];
      if (!v4)
      {
LABEL_9:
        v2[48] = off_24C0B4170;
        if (*((char *)v2 + 439) < 0)
        {
          operator delete((void *)v2[52]);
          v5 = (void *)v2[49];
          if (!v5)
          {
LABEL_12:
            v2[38] = off_24C0B4170;
            if (*((char *)v2 + 359) < 0)
            {
              operator delete((void *)v2[42]);
              v6 = (void *)v2[39];
              if (!v6)
              {
LABEL_15:
                v2[28] = off_24C0B4170;
                if (*((char *)v2 + 279) < 0)
                {
                  operator delete((void *)v2[32]);
                  v7 = (void *)v2[29];
                  if (!v7)
                  {
LABEL_18:
                    v2[19] = off_24C0B4170;
                    if (*((char *)v2 + 207) < 0)
                    {
                      operator delete((void *)v2[23]);
                      v8 = (void *)v2[20];
                      if (!v8)
                      {
LABEL_21:
                        v2[10] = off_24C0B4170;
                        if (*((char *)v2 + 135) < 0)
                        {
                          operator delete((void *)v2[14]);
                          v9 = (void *)v2[11];
                          if (!v9)
                          {
LABEL_24:
                            v2[1] = off_24C0B4170;
                            if (*((char *)v2 + 63) < 0)
                            {
                              operator delete((void *)v2[5]);
                              v10 = (void *)v2[2];
                              if (!v10)
                                goto LABEL_27;
                            }
                            else
                            {
                              v10 = (void *)v2[2];
                              if (!v10)
                              {
LABEL_27:
                                if (*v2)
                                  (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
                                MEMORY[0x20BD0ADEC](v2, 0x10B2C40B8A090A8);
                                goto LABEL_30;
                              }
                            }
                            v2[3] = v10;
                            operator delete(v10);
                            goto LABEL_27;
                          }
                        }
                        else
                        {
                          v9 = (void *)v2[11];
                          if (!v9)
                            goto LABEL_24;
                        }
                        v2[12] = v9;
                        operator delete(v9);
                        goto LABEL_24;
                      }
                    }
                    else
                    {
                      v8 = (void *)v2[20];
                      if (!v8)
                        goto LABEL_21;
                    }
                    v2[21] = v8;
                    operator delete(v8);
                    goto LABEL_21;
                  }
                }
                else
                {
                  v7 = (void *)v2[29];
                  if (!v7)
                    goto LABEL_18;
                }
                v2[30] = v7;
                operator delete(v7);
                goto LABEL_18;
              }
            }
            else
            {
              v6 = (void *)v2[39];
              if (!v6)
                goto LABEL_15;
            }
            v2[40] = v6;
            operator delete(v6);
            goto LABEL_15;
          }
        }
        else
        {
          v5 = (void *)v2[49];
          if (!v5)
            goto LABEL_12;
        }
        v2[50] = v5;
        operator delete(v5);
        goto LABEL_12;
      }
    }
    else
    {
      v4 = (void *)v2[58];
      if (!v4)
        goto LABEL_9;
    }
    v2[59] = v4;
    operator delete(v4);
    goto LABEL_9;
  }
LABEL_30:
  v11 = (void *)*((_QWORD *)this + 23);
  if (v11)
  {
    *((_QWORD *)this + 24) = v11;
    operator delete(v11);
  }
  v12 = *((_QWORD *)this + 9);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 8);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 7);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 6);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
}

{
  webrtc::VideoStreamEncoderResourceManager::~VideoStreamEncoderResourceManager(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::VideoStreamEncoderResourceManager::~VideoStreamEncoderResourceManager(webrtc::VideoStreamEncoderResourceManager *this)
{
  webrtc::VideoStreamEncoderResourceManager::~VideoStreamEncoderResourceManager((webrtc::VideoStreamEncoderResourceManager *)((char *)this - 8));
}

{
  webrtc::VideoStreamEncoderResourceManager::~VideoStreamEncoderResourceManager((webrtc::VideoStreamEncoderResourceManager *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::VideoStreamEncoderResourceManager::ConfigureEncodeUsageResource(webrtc::VideoStreamEncoderResourceManager *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  void (***v17)(_QWORD);

  v5 = *((_QWORD *)this + 6);
  if (*(_BYTE *)(v5 + 128))
  {
    v6 = *(_QWORD *)(v5 + 120);
    result = *(_QWORD *)(v6 + 80);
    if (result)
    {
      *(_BYTE *)(result + 4) = 0;
      do
      {
        v8 = __ldaxr((unsigned int *)result);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)result));
      if (!v9)
        result = MEMORY[0x20BD0ADEC]();
      *(_QWORD *)(v6 + 80) = 0;
    }
    *(_BYTE *)(v5 + 128) = 0;
  }
  else
  {
    v17 = (void (***)(_QWORD))*((_QWORD *)this + 6);
    (**(void (***)(uint64_t))v5)(v5);
    webrtc::VideoStreamEncoderResourceManager::AddResource((uint64_t)this, &v17, 1);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v10 = *((_QWORD *)this + 6);
  v14 = xmmword_208F16C90;
  v15 = 0x200000003;
  v16 = 0;
  if (*((_BYTE *)this + 1456))
  {
    if (*((_BYTE *)this + 665))
      *(_QWORD *)&v14 = 0x96000000C8;
    if (*((_BYTE *)this + 216))
      v16 = 5000;
    webrtc::OveruseFrameDetector::StartCheckForOveruse(v12, *v11, &v14, v10 + 112);
    *(_BYTE *)(v10 + 128) = 1;
    if (*(_BYTE *)(v10 + 144))
      v13 = (int)*(double *)(v10 + 136);
    else
      v13 = 0x7FFFFFFFLL;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 120) + 16))(*(_QWORD *)(v10 + 120), v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t webrtc::VideoStreamEncoderResourceManager::AddResource(uint64_t a1, void (****a2)(_QWORD), int a3)
{
  _QWORD *v6;
  void (***v7)(_QWORD);
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void (***v15)(_QWORD);

  v6 = *(_QWORD **)(a1 + 1472);
  v7 = *a2;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v9 = v6;
        v10 = v6[4];
        if ((unint64_t)v7 >= v10)
          break;
        v6 = (_QWORD *)*v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_8;
      }
      if (v10 >= (unint64_t)v7)
        break;
      v6 = (_QWORD *)v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (_QWORD *)(a1 + 1472);
    v9 = (_QWORD *)(a1 + 1472);
LABEL_8:
    v11 = operator new(0x30uLL);
    v11[4] = v7;
    if (v7)
      (**v7)(v7);
    *((_DWORD *)v11 + 10) = a3;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v9;
    *v8 = v11;
    v12 = **(_QWORD **)(a1 + 1464);
    if (v12)
    {
      *(_QWORD *)(a1 + 1464) = v12;
      v11 = (_QWORD *)*v8;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1472), v11);
    ++*(_QWORD *)(a1 + 1480);
    v7 = *a2;
  }
  v13 = *(_QWORD *)(a1 + 96);
  v15 = v7;
  if (v7)
    (**v7)(v7);
  (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v13 + 32))(v13, &v15);
  result = (uint64_t)v15;
  if (v15)
    return ((uint64_t (*)(_QWORD))(*v15)[1])(v15);
  return result;
}

void webrtc::VideoStreamEncoderResourceManager::MaybeInitializePixelLimitResource(webrtc::VideoStreamEncoderResourceManager *this)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  void (***v14)(_QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void (***v23)(_QWORD);
  void *v24[2];
  char v25;
  int v26;

  if (*((_BYTE *)this + 233))
  {
    v26 = 0;
    (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**((_QWORD **)this + 2) + 16))(v24, *((_QWORD *)this + 2), "WebRTC-PixelLimitResource", 25);
    if (v25 >= 0)
      v2 = (const char *)v24;
    else
      v2 = (const char *)v24[0];
    if (sscanf(v2, "Enabled-%d", &v26) == 1)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/video_stream_encoder_resource_manager.cc");
      v22 = *((_OWORD *)this + 5);
      v10 = operator new();
      *(_OWORD *)(v10 + 8) = v22;
      *(_BYTE *)(v10 + 24) = 0;
      *(_BYTE *)(v10 + 28) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)v10 = &unk_24C0BA870;
      *(_DWORD *)(v10 + 48) = 0;
      v11 = (unsigned int *)(v10 + 48);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = *((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = v10;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v10 = *((_QWORD *)this + 8);
      }
      *(_DWORD *)(v10 + 24) = v26;
      *(_BYTE *)(v10 + 28) = 1;
      v14 = (void (***)(_QWORD))*((_QWORD *)this + 8);
      v23 = v14;
      if (v14)
      {
        (**v14)(v14);
        webrtc::VideoStreamEncoderResourceManager::AddResource((uint64_t)this, &v23, 1);
        (*v14)[1](v14);
        if (v25 < 0)
          goto LABEL_20;
      }
      else
      {
        webrtc::VideoStreamEncoderResourceManager::AddResource((uint64_t)this, &v23, 1);
        if (v25 < 0)
LABEL_20:
          operator delete(v24[0]);
      }
    }
    else
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t\t\t\n", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/video_stream_encoder_resource_manager.cc");
      if (v25 < 0)
        goto LABEL_20;
    }
  }
}

uint64_t webrtc::VideoStreamEncoderResourceManager::StopManagedResources(webrtc::VideoStreamEncoderResourceManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *((_QWORD *)this + 6);
  if (*(_BYTE *)(v2 + 128))
  {
    v3 = *(_QWORD *)(v2 + 120);
    v4 = *(_QWORD *)(v3 + 80);
    if (v4)
    {
      *(_BYTE *)(v4 + 4) = 0;
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (!v6)
        MEMORY[0x20BD0ADEC]();
      *(_QWORD *)(v3 + 80) = 0;
      v7 = *((_QWORD *)this + 6);
      *(_BYTE *)(v2 + 128) = 0;
      v19 = v7;
      v2 = v7;
      if (!v7)
      {
        webrtc::VideoStreamEncoderResourceManager::RemoveResource(this, &v19);
        goto LABEL_11;
      }
    }
    else
    {
      *(_BYTE *)(v2 + 128) = 0;
      v19 = v2;
    }
    (**(void (***)(uint64_t))v2)(v2);
    webrtc::VideoStreamEncoderResourceManager::RemoveResource(this, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
LABEL_11:
  v8 = *((_QWORD *)this + 7);
  v9 = *(_QWORD *)(v8 + 120);
  if (v9)
  {
    *(_QWORD *)(v8 + 120) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 7);
    v18 = v10;
    if (!v10)
    {
      webrtc::VideoStreamEncoderResourceManager::RemoveResource(this, &v18);
      v11 = *((_QWORD *)this + 8);
      if (!v11)
        goto LABEL_18;
      goto LABEL_15;
    }
    (**(void (***)(uint64_t))v10)(v10);
    webrtc::VideoStreamEncoderResourceManager::RemoveResource(this, &v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = *((_QWORD *)this + 8);
  if (!v11)
    goto LABEL_18;
LABEL_15:
  v17 = v11;
  (**(void (***)(uint64_t))v11)(v11);
  webrtc::VideoStreamEncoderResourceManager::RemoveResource(this, &v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 8);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 8) = 0;
LABEL_18:
  v13 = *((_QWORD *)this + 9);
  result = *(_QWORD *)(v13 + 120);
  if (result)
  {
    *(_QWORD *)(v13 + 120) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v15 = *((_QWORD *)this + 9);
    v16 = v15;
    if (v15)
    {
      (**(void (***)(uint64_t))v15)(v15);
      webrtc::VideoStreamEncoderResourceManager::RemoveResource(this, &v16);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    else
    {
      return webrtc::VideoStreamEncoderResourceManager::RemoveResource(this, &v16);
    }
  }
  return result;
}

uint64_t webrtc::VideoStreamEncoderResourceManager::RemoveResource(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  void (***v6)(_QWORD);
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  void (***v18)(_QWORD);
  uint64_t result;
  void (***v20)(_QWORD);

  v4 = a1 + 184;
  v5 = (uint64_t *)a1[184];
  if (!v5)
    goto LABEL_12;
  v6 = (void (***)(_QWORD))*a2;
  v7 = v4;
  v8 = v5;
  do
  {
    v9 = v8[4];
    v10 = v9 >= (unint64_t)v6;
    if (v9 >= (unint64_t)v6)
      v11 = (uint64_t **)v8;
    else
      v11 = (uint64_t **)(v8 + 1);
    if (v10)
      v7 = v8;
    v8 = *v11;
  }
  while (*v11);
  if (v7 == v4 || (unint64_t)v6 < v7[4])
LABEL_12:
    v7 = v4;
  v12 = (uint64_t *)v7[1];
  if (v12)
  {
    do
    {
      v13 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v14 = v7;
    do
    {
      v13 = (uint64_t *)v14[2];
      v15 = *v13 == (_QWORD)v14;
      v14 = v13;
    }
    while (!v15);
  }
  if ((uint64_t *)a1[183] == v7)
    a1[183] = v13;
  --a1[185];
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v5, v7);
  v16 = v7[4];
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  operator delete(v7);
  v17 = a1[12];
  v18 = (void (***)(_QWORD))*a2;
  v20 = v18;
  if (v18)
    (**v18)(v18);
  (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v17 + 48))(v17, &v20);
  result = (uint64_t)v20;
  if (v20)
    return ((uint64_t (*)(_QWORD))(*v20)[1])(v20);
  return result;
}

void webrtc::VideoStreamEncoderResourceManager::SetEncoderSettings(uint64_t a1, __int128 *a2)
{
  const webrtc::VideoEncoder::EncoderInfo *v4;
  int v5;
  const webrtc::VideoEncoderConfig *v6;
  webrtc::VideoEncoder::EncoderInfo *v7;
  int v8;
  void **v9;
  unint64_t v10;
  double v11;
  int v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[31];
  _BYTE v18[208];
  _BYTE v19[384];
  char v20;
  _BYTE v21[208];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (const webrtc::VideoEncoder::EncoderInfo *)(a1 + 616);
  v5 = *(unsigned __int8 *)(a1 + 1456);
  v6 = (const webrtc::VideoEncoderConfig *)((char *)a2 + 248);
  v7 = (webrtc::VideoEncoder::EncoderInfo *)(a1 + 616);
  if (v5)
  {
    webrtc::VideoEncoder::EncoderInfo::operator=((uint64_t)v7, a2);
    webrtc::VideoEncoderConfig::VideoEncoderConfig((webrtc::VideoEncoderConfig *)v21, v6);
    webrtc::VideoEncoderConfig::operator=(a1 + 864, (uint64_t)v21);
    webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)v21);
    memcpy((void *)(a1 + 1072), (char *)a2 + 456, 0x17DuLL);
    v8 = *(unsigned __int8 *)(a1 + 1456);
    v9 = *(void ***)(a1 + 32);
    LOBYTE(v17[0]) = 0;
    v20 = 0;
    if (!v8)
    {
      webrtc::BitrateConstraint::OnEncoderSettingsUpdated(v9, (webrtc::VideoEncoder::EncoderInfo *)v17);
      if (!v20)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    webrtc::VideoEncoder::EncoderInfo::EncoderInfo(v7, (const webrtc::VideoEncoder::EncoderInfo *)a2);
    webrtc::VideoEncoderConfig::VideoEncoderConfig((webrtc::VideoEncoderConfig *)(a1 + 864), v6);
    memcpy((void *)(a1 + 1072), (char *)a2 + 456, 0x180uLL);
    *(_BYTE *)(a1 + 1456) = 1;
    v9 = *(void ***)(a1 + 32);
    LOBYTE(v17[0]) = 0;
    v20 = 0;
  }
  webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)v17, v4);
  webrtc::VideoEncoderConfig::VideoEncoderConfig((webrtc::VideoEncoderConfig *)v18, (const webrtc::VideoEncoderConfig *)(a1 + 864));
  memcpy(v19, (const void *)(a1 + 1072), sizeof(v19));
  v20 = 1;
  webrtc::BitrateConstraint::OnEncoderSettingsUpdated(v9, (webrtc::VideoEncoder::EncoderInfo *)v17);
  if (v20)
  {
LABEL_4:
    webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)v18);
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v17);
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 1456))
    __break(1u);
  webrtc::VideoStreamEncoderResourceManager::InitialFrameDropper::OnEncoderSettingsUpdated(*(webrtc::VideoStreamEncoderResourceManager::InitialFrameDropper **)(a1 + 224), (const webrtc::VideoCodec *)(a1 + 1072), (const webrtc::VideoAdaptationCounters *)(a1 + 176));
  if (*(_BYTE *)(a1 + 1456))
  {
    LODWORD(v10) = *(_DWORD *)(a1 + 1092);
    v11 = (double)v10;
    v12 = 1;
    v13 = *(unsigned __int8 *)(a1 + 168);
    if (!*(_BYTE *)(a1 + 168))
      goto LABEL_15;
  }
  else
  {
    v12 = 0;
    v11 = 0.0;
    v13 = *(unsigned __int8 *)(a1 + 168);
    if (!*(_BYTE *)(a1 + 168))
    {
LABEL_15:
      v13 = v12;
      v14 = v11;
      goto LABEL_16;
    }
  }
  v14 = *(double *)(a1 + 160);
  if (*(_BYTE *)(a1 + 1456) && v11 < v14)
    goto LABEL_15;
LABEL_16:
  v15 = *(_QWORD *)(a1 + 48);
  if (v13 && *(_BYTE *)(v15 + 144))
  {
    if (*(double *)(v15 + 136) == v14)
      return;
  }
  else if ((v13 != 0) == (*(_BYTE *)(v15 + 144) != 0))
  {
    return;
  }
  *(double *)(v15 + 136) = v14;
  *(_BYTE *)(v15 + 144) = v13;
  if (*(_BYTE *)(v15 + 128))
  {
    if (v13)
      v16 = (int)v14;
    else
      v16 = 0x7FFFFFFFLL;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v15 + 120) + 16))(*(_QWORD *)(v15 + 120), v16);
  }
}

void webrtc::VideoStreamEncoderResourceManager::InitialFrameDropper::OnEncoderSettingsUpdated(webrtc::VideoStreamEncoderResourceManager::InitialFrameDropper *this, const webrtc::VideoCodec *a2, const webrtc::VideoAdaptationCounters *a3)
{
  const webrtc::VideoCodec *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  int64x2_t *SingleActiveLayerPixels;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  int64x2_t *v37;
  uint64_t *v38;
  uint64_t v39;
  void *__src;
  unint64_t v41;
  uint64_t v42;

  *((_BYTE *)this + 624) = 0;
  __src = 0;
  v41 = 0;
  v42 = 0;
  if (*(_DWORD *)a2 == 2)
  {
    std::vector<BOOL>::resize((uint64_t)&__src, *((unsigned __int8 *)a2 + 366), 0);
    v13 = v41;
    if (v41)
    {
      v14 = 0;
      v15 = __src;
      v16 = (unsigned __int8 *)a2 + 176;
      do
      {
        while (1)
        {
          v17 = *v16;
          v16 += 36;
          v18 = v14 >> 6;
          v19 = 1 << v14;
          if (v17)
            break;
          v15[v18] &= ~v19;
          ++v14;
          v13 = v41;
          if (v14 >= v41)
            goto LABEL_13;
        }
        v15[v18] |= v19;
        ++v14;
        v13 = v41;
      }
      while (v14 < v41);
    }
  }
  else
  {
    std::vector<BOOL>::resize((uint64_t)&__src, *((unsigned __int8 *)a2 + 32), 0);
    v13 = v41;
    if (v41)
    {
      v20 = 0;
      v21 = __src;
      v22 = (unsigned __int8 *)a2 + 68;
      do
      {
        while (1)
        {
          v23 = *v22;
          v22 += 36;
          v24 = v20 >> 6;
          v25 = 1 << v20;
          if (v23)
            break;
          v21[v24] &= ~v25;
          ++v20;
          v13 = v41;
          if (v20 >= v41)
            goto LABEL_13;
        }
        v21[v24] |= v25;
        ++v20;
        v13 = v41;
      }
      while (v20 < v41);
    }
  }
LABEL_13:
  if (*((_DWORD *)this + 154) == *((unsigned __int16 *)a2 + 2)
    && *((_DWORD *)this + 155) == *((unsigned __int16 *)a2 + 3))
  {
    v26 = 0;
    if (v13 != *((_QWORD *)this + 74))
      goto LABEL_31;
LABEL_18:
    if (v13 < 1)
      goto LABEL_24;
    v27 = __src;
    v28 = (_QWORD *)*((_QWORD *)this + 73);
    if ((unint64_t)v13 < 0x40)
    {
      LOBYTE(v29) = v13;
    }
    else
    {
      do
      {
        if (*v28 != *v27)
          goto LABEL_31;
        v29 = v13 - 64;
        ++v27;
        ++v28;
        v30 = v13 <= 127;
        v13 -= 64;
      }
      while (!v30);
      if (v29 + 64 < 65)
      {
LABEL_24:
        if (!v26)
          goto LABEL_39;
        goto LABEL_31;
      }
    }
    if ((*v27 ^ *v28) << -(char)v29)
      v31 = 1;
    else
      v31 = v26;
    if ((v31 & 1) == 0)
      goto LABEL_39;
    goto LABEL_31;
  }
  v26 = *(_DWORD *)a3 == *((_DWORD *)this + 152);
  if (v13 == *((_QWORD *)this + 74))
    goto LABEL_18;
LABEL_31:
  *((_BYTE *)this + 624) = 1;
  if (*(_QWORD *)(*(_QWORD *)this + 120))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v39 = 1449;
      rtc::webrtc_logging_impl::Log("\r\t", (uint64_t)v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/video_stream_encoder_resource_manager.cc");
    }
    *((_DWORD *)this + 140) = 0;
    if (*((_BYTE *)this + 568))
    {
      SingleActiveLayerPixels = webrtc::VideoStreamAdapter::GetSingleActiveLayerPixels(a2, v6, v7, v8, v9, v10, v11, v12, v38, v39);
      if (!*((_BYTE *)this + 568))
      {
        __break(1u);
        goto LABEL_53;
      }
      if (((unint64_t)SingleActiveLayerPixels & 0xFF00000000) != 0
        && *((_DWORD *)this + 141) < SingleActiveLayerPixels)
      {
        *((_BYTE *)this + 572) = 1;
      }
    }
  }
LABEL_39:
  *((_QWORD *)this + 76) = *(_QWORD *)a3;
  if ((void **)((char *)this + 584) == &__src)
    goto LABEL_49;
  v33 = v41;
  if (v41)
  {
    v34 = (void *)*((_QWORD *)this + 73);
    if (v41 <= *((_QWORD *)this + 75) << 6)
    {
      v35 = v41 - 1;
      goto LABEL_47;
    }
    if (v34)
    {
      operator delete(v34);
      *((_QWORD *)this + 73) = 0;
      *((_QWORD *)this + 74) = 0;
      *((_QWORD *)this + 75) = 0;
      v33 = v41;
    }
    if ((v33 & 0x8000000000000000) == 0)
    {
      v35 = v33 - 1;
      v36 = ((v33 - 1) >> 6) + 1;
      v34 = operator new(8 * v36);
      *((_QWORD *)this + 73) = v34;
      *((_QWORD *)this + 74) = 0;
      *((_QWORD *)this + 75) = v36;
LABEL_47:
      memmove(v34, __src, ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v33 = v41;
      goto LABEL_48;
    }
LABEL_53:
    abort();
  }
LABEL_48:
  *((_QWORD *)this + 74) = v33;
LABEL_49:
  *((_DWORD *)this + 154) = *((unsigned __int16 *)a2 + 2);
  *((_DWORD *)this + 155) = *((unsigned __int16 *)a2 + 3);
  v37 = webrtc::VideoStreamAdapter::GetSingleActiveLayerPixels(a2, v6, v7, v8, v9, v10, v11, v12, v38, v39);
  *((_DWORD *)this + 141) = (_DWORD)v37;
  *((_BYTE *)this + 568) = BYTE4(v37);
  if (__src)
    operator delete(__src);
}

void webrtc::VideoStreamEncoderResourceManager::InitialFrameDropper::SetTargetBitrate(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  webrtc::VideoStreamEncoderResourceManager *v28;

  v3 = *(_QWORD *)(a1 + 544);
  if (v3 < 1 || *(_BYTE *)(a1 + 536) || !*(_QWORD *)(*(_QWORD *)a1 + 120))
    return;
  if (!*(_BYTE *)(a1 + 448) || (*(_DWORD *)(a1 + 444) & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(a1 + 444);
    if ((v5 & 0xFF00000000) == 0)
      return;
    if (*(_BYTE *)(a1 + 528) && *(double *)(a1 + 520) < 0.01)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        goto LABEL_21;
      return;
    }
    if (!*(_BYTE *)(a1 + 528))
      return;
    if ((v5 & 0x80000000) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_25:
        rtc::webrtc_logging_impl::Log("\r\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/quality_scaler_settings.cc");
    }
    else
    {
      if (a3 - *(_QWORD *)(a1 + 552) >= (int)v5)
        return;
      v13 = *(double *)(a1 + 520);
      if (v13 >= 0.01)
      {
        if ((uint64_t)llround(v13 * (double)v3) > a2)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/video_stream_encoder_resource_manager.cc");
          *(_DWORD *)(a1 + 560) = 0;
          *(_BYTE *)(a1 + 536) = 1;
        }
        return;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        goto LABEL_25;
    }
    std::__throw_bad_optional_access[abi:sn180100]();
    webrtc::VideoStreamEncoderResourceManager::OnFrameDroppedDueToSize(v28);
    return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_21:
    rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/quality_scaler_settings.cc");
}

void webrtc::VideoStreamEncoderResourceManager::OnFrameDroppedDueToSize(webrtc::VideoStreamEncoderResourceManager *this)
{
  uint64_t v2;
  uint64_t v3;
  void (***v4)(_QWORD, __n128);
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __n128 v10;
  _QWORD *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  void (***v17)(_QWORD, __n128);
  _BYTE v18[4];
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  uint64_t v24;

  ++*(_DWORD *)(*((_QWORD *)this + 28) + 560);
  webrtc::VideoStreamAdapter::GetAdaptDownResolution(*((webrtc::VideoStreamAdapter **)this + 13), (uint64_t)v18, v16, (uint64_t)v17);
  if (!v19)
  {
    v3 = *((_QWORD *)this + 13);
    v4 = (void (***)(_QWORD, __n128))*((_QWORD *)this + 7);
    v17 = v4;
    if (v4)
    {
      ((void (*)(void (***)(_QWORD, __n128)))**v4)(v4);
      if (v19)
        goto LABEL_17;
    }
    v5 = *(_QWORD *)(v3 + 208);
    if (*(_BYTE *)(v3 + 216))
    {
      if (!BYTE8(v21) || (unint64_t)v21 > v5)
      {
        v7 = v20;
        if ((v20 & 0xFF00000000) != 0)
        {
          *(_BYTE *)(v3 + 48) = 1;
          *(_DWORD *)(v3 + 52) = v7;
          *(_BYTE *)(v3 + 56) = 1;
          goto LABEL_16;
        }
LABEL_18:
        std::__throw_bad_optional_access[abi:sn180100]();
        webrtc::VideoStreamEncoderResourceManager::OnEncodeCompleted(v11, v12, v13, v14, v15);
        return;
      }
      if ((unint64_t)v21 >= v5)
        goto LABEL_9;
    }
    else if (!BYTE8(v21))
    {
LABEL_9:
      if (*(_BYTE *)(v3 + 56))
        *(_BYTE *)(v3 + 56) = 0;
LABEL_16:
      v8 = v24;
      v9 = v22;
      *(_OWORD *)(v3 + 208) = v21;
      *(_OWORD *)(v3 + 224) = v9;
      v10 = v23;
      *(__n128 *)(v3 + 240) = v23;
      *(_QWORD *)(v3 + 256) = v8;
      webrtc::VideoStreamAdapter::BroadcastVideoRestrictionsUpdate(v3, v10, v2, &v17);
      if (!v4)
        return;
LABEL_17:
      ((void (*)(void (***)(_QWORD, __n128)))(*v4)[1])(v4);
      return;
    }
    v6 = v20;
    if ((v20 & 0xFF00000000) != 0)
    {
      *(_BYTE *)(v3 + 48) = 0;
      *(_DWORD *)(v3 + 52) = v6;
      *(_BYTE *)(v3 + 56) = 1;
      goto LABEL_16;
    }
    goto LABEL_18;
  }
}

void webrtc::VideoStreamEncoderResourceManager::OnEncodeCompleted(_QWORD *a1, int *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  webrtc::QualityScaler *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v9 = *(_QWORD *)(a1[6] + 120);
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v9 + 160) + 24))(*(_QWORD *)(v9 + 160), a2[38], a3, 1000 * *((_QWORD *)a2 + 2), a4);
  if ((v10 & 0xFF00000000) != 0)
  {
    v11 = ((int)v10 / 1000);
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 32))(*(_QWORD *)(v9 + 160));
    *(_DWORD *)(v9 + 96) = v12;
    *(_BYTE *)(v9 + 100) = 1;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v9 + 88) + 16))(*(_QWORD *)(v9 + 88), v11, v12);
  }
  v13 = *(webrtc::QualityScaler **)(a1[7] + 120);
  if (v13)
  {
    v14 = a2[9];
    if ((v14 & 0x80000000) == 0)
      webrtc::QualityScaler::ReportQp(v13, v14, a3);
  }
  v15 = *(_QWORD *)(a1[9] + 120);
  if (v15)
  {
    v16 = *a2;
    v17 = a2[1];
    *(_QWORD *)(v15 + 16) = a3 / 1000;
    *(_BYTE *)(v15 + 24) = 1;
    if (!*(_BYTE *)(v15 + 132))
      *(_BYTE *)(v15 + 132) = 1;
    *(_DWORD *)(v15 + 128) = v17 * v16;
    webrtc::RateStatistics::Update((webrtc::RateStatistics *)(v15 + 32), a5, a3 / 1000);
  }
}

void webrtc::VideoStreamEncoderResourceManager::UpdateBandwidthQualityScalerSettings(_QWORD *a1, char a2, char **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (***v8)(_QWORD);
  uint64_t v9;

  v4 = a1[9];
  v5 = *(_QWORD *)(v4 + 120);
  if ((a2 & 1) != 0)
  {
    if (!v5)
    {
      v8 = (void (***)(_QWORD))v4;
      (**(void (***)(uint64_t))v4)(v4);
      webrtc::VideoStreamEncoderResourceManager::AddResource((uint64_t)a1, &v8, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      webrtc::BandwidthQualityScalerResource::StartCheckForOveruse(a1[9], a3);
    }
  }
  else if (v5)
  {
    *(_QWORD *)(v4 + 120) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = a1[9];
    v9 = v6;
    if (v6)
    {
      (**(void (***)(uint64_t))v6)(v6);
      webrtc::VideoStreamEncoderResourceManager::RemoveResource(a1, &v9);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    else
    {
      webrtc::VideoStreamEncoderResourceManager::RemoveResource(a1, &v9);
    }
  }
}

uint64_t webrtc::VideoStreamEncoderResourceManager::ConfigureQualityScaler(webrtc::VideoStreamEncoderResourceManager *this, const webrtc::VideoEncoder::EncoderInfo *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  unint64_t QpThresholds;
  unsigned __int8 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  char v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE v31[12];
  void (***v32[4])(_QWORD);

  v3 = *((_DWORD *)this + 30);
  if ((v3 & 0xFFFFFFFD) != 1
    || (v4 = *(_QWORD *)a2, v5 = *((_DWORD *)a2 + 2), !(_BYTE)v5)
    && (!*((_BYTE *)this + 1456) || !*((_BYTE *)this + 1065))
    || (*((_BYTE *)a2 + 241) ? (v6 = *((_BYTE *)a2 + 240) == 0) : (v6 = 0), v6))
  {
    v11 = *((_QWORD *)this + 7);
    v12 = *(_QWORD **)(v11 + 120);
LABEL_30:
    if (!v12)
      goto LABEL_34;
    *(_QWORD *)(v11 + 120) = 0;
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    v17 = (void (***)(_QWORD))*((_QWORD *)this + 7);
    v32[0] = v17;
    if (!v17)
    {
      webrtc::VideoStreamEncoderResourceManager::RemoveResource(this, v32);
      v13 = *((_QWORD *)this + 28);
      if (*(_QWORD *)(*(_QWORD *)v13 + 120))
        goto LABEL_35;
      goto LABEL_37;
    }
    (**v17)(v17);
    webrtc::VideoStreamEncoderResourceManager::RemoveResource(this, v32);
LABEL_33:
    (*v17)[1](v17);
LABEL_34:
    v13 = *((_QWORD *)this + 28);
    if (*(_QWORD *)(*(_QWORD *)v13 + 120))
      goto LABEL_35;
LABEL_37:
    *(_BYTE *)(v13 + 572) = 0;
    v18 = 4;
    goto LABEL_38;
  }
  if (*(_QWORD *)(*((_QWORD *)this + 7) + 120))
    goto LABEL_39;
  v7 = *((unsigned __int8 *)this + 232);
  if (*((_BYTE *)this + 232))
  {
    if (*((_BYTE *)this + 1456))
      v8 = *((_DWORD *)this + 216);
    else
      v8 = 0;
    QpThresholds = webrtc::QualityScalingExperiment::GetQpThresholds(v8, *((_QWORD *)this + 2));
    v7 = v10;
  }
  else
  {
    QpThresholds = 0;
  }
  if (v7)
    v4 = QpThresholds;
  else
    LOBYTE(v7) = v5;
  v11 = *((_QWORD *)this + 7);
  v12 = *(_QWORD **)(v11 + 120);
  if (!(_BYTE)v7)
    goto LABEL_30;
  if (v12)
  {
    v12[3] = v4;
    v13 = *((_QWORD *)this + 28);
    if (!*(_QWORD *)(*(_QWORD *)v13 + 120))
      goto LABEL_37;
  }
  else
  {
    v14 = *((_QWORD *)this + 2);
    v15 = operator new();
    webrtc::QualityScaler::QualityScaler(v15, v11 + 112, v4, v14, 2000);
    v16 = *(_QWORD *)(v11 + 120);
    *(_QWORD *)(v11 + 120) = v15;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = (void (***)(_QWORD))*((_QWORD *)this + 7);
    v32[0] = v17;
    if (v17)
    {
      (**v17)(v17);
      webrtc::VideoStreamEncoderResourceManager::AddResource((uint64_t)this, v32, 0);
      goto LABEL_33;
    }
    webrtc::VideoStreamEncoderResourceManager::AddResource((uint64_t)this, v32, 0);
    v13 = *((_QWORD *)this + 28);
    if (!*(_QWORD *)(*(_QWORD *)v13 + 120))
      goto LABEL_37;
  }
LABEL_35:
  v18 = 0;
LABEL_38:
  *(_DWORD *)(v13 + 560) = v18;
  v3 = *((_DWORD *)this + 30);
LABEL_39:
  if (v3 == 3 && *(_QWORD *)(*((_QWORD *)this + 7) + 120))
  {
    v19 = *((_BYTE *)this + 1456) ? *((_DWORD *)this + 216) : 0;
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 11) + 16))(v32);
    v20 = (unint64_t)v32[3];
    (*(void (**)(_BYTE *__return_ptr))(**((_QWORD **)this + 11) + 16))(v31);
    v21 = (*(_QWORD *)&v31[4] & 0xFF00000000) != 0 ? *(_DWORD *)&v31[4] : 25344;
    v22 = (v20 & 0xFF00000000) != 0 ? v20 : v21;
    v23 = webrtc::BalancedDegradationSettings::GetQpThresholds((unint64_t)this + 184, v19, v22);
    if (v24)
      *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 120) + 24) = v23;
  }
  v25 = *((_DWORD *)this + 30);
  v26 = v25 & 0xFFFFFFFD;
  v27 = v25 & 0xFFFFFFFE;
  if (*(_QWORD *)(*((_QWORD *)this + 7) + 120) || *(_QWORD *)(*((_QWORD *)this + 9) + 120))
  {
    v28 = (v26 == 1) | ((unint64_t)(v27 == 2) << 8);
    v29 = v28;
  }
  else
  {
    v29 = 0;
    v28 = (v26 == 1) | ((unint64_t)(v27 == 2) << 8);
  }
  return (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14), v28, v29);
}

uint64_t webrtc::VideoStreamEncoderResourceManager::OnVideoSourceRestrictionsUpdated(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  double v10;
  char v11;
  int v12;
  unint64_t v13;
  char *v14;
  int v15;
  int v16;
  double v17;
  char v18;
  _BOOL4 v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  _DWORD v26[2];
  _DWORD v27[2];
  _DWORD v28[2];

  v5 = result;
  *(_QWORD *)(result + 176) = *(_QWORD *)a3;
  if (!*a4 && !(*(_DWORD *)a3 + *(_DWORD *)(a3 + 4)))
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 112) + 72))(*(_QWORD *)(result + 112));
  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = a2[2];
  v9 = *((_BYTE *)a2 + 24);
  v25 = v9;
  v10 = *((double *)a2 + 4);
  v11 = *((_BYTE *)a2 + 40);
  v24 = v11;
  v12 = *(_DWORD *)(v5 + 120);
  v13 = 0;
  if (!v12)
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
    v25 = 0;
    goto LABEL_9;
  }
  if (v12 == 1)
  {
LABEL_9:
    v14 = &v24;
    goto LABEL_10;
  }
  if (v12 != 2)
    goto LABEL_11;
  v8 = 0;
  v7 = 0;
  v6 = 0;
  v14 = &v25;
  v13 = *(_QWORD *)&v10;
LABEL_10:
  *v14 = 0;
  v9 = v25;
  v11 = v24;
  v10 = *(double *)&v13;
LABEL_11:
  v28[0] = *(_DWORD *)((char *)a2 + 9);
  *(_DWORD *)((char *)v28 + 3) = *((_DWORD *)a2 + 3);
  v27[0] = *(_DWORD *)((char *)a2 + 25);
  *(_DWORD *)((char *)v27 + 3) = *((_DWORD *)a2 + 7);
  v26[0] = *(_DWORD *)((char *)a2 + 41);
  *(_DWORD *)((char *)v26 + 3) = *((_DWORD *)a2 + 11);
  v15 = *(_DWORD *)((char *)v26 + 3);
  *(_QWORD *)(v5 + 128) = v6;
  *(_BYTE *)(v5 + 136) = v7;
  *(_DWORD *)(v5 + 137) = v28[0];
  *(_DWORD *)(v5 + 140) = *(_DWORD *)((char *)v28 + 3);
  *(_QWORD *)(v5 + 144) = v8;
  *(_BYTE *)(v5 + 152) = v9;
  *(_DWORD *)(v5 + 153) = v27[0];
  *(_DWORD *)(v5 + 156) = *(_DWORD *)((char *)v27 + 3);
  *(double *)(v5 + 160) = v10;
  *(_BYTE *)(v5 + 168) = v11;
  v16 = v26[0];
  *(_DWORD *)(v5 + 172) = v15;
  *(_DWORD *)(v5 + 169) = v16;
  if (*(_BYTE *)(v5 + 1456))
  {
    LODWORD(v13) = *(_DWORD *)(v5 + 1092);
    v17 = (double)v13;
    v18 = 1;
  }
  else
  {
    v18 = 0;
    v17 = 0.0;
  }
  v20 = v17 < v10 && *(_BYTE *)(v5 + 1456) != 0 || *(_QWORD *)(v5 + 168) == 0;
  v21 = !v20;
  if (v20)
    v10 = v17;
  v22 = *(_QWORD *)(v5 + 48);
  if (v21)
    v18 = *(_QWORD *)(v5 + 168);
  if (v18 && *(_BYTE *)(v22 + 144))
  {
    if (*(double *)(v22 + 136) == v10)
      return result;
  }
  else if ((v18 != 0) == (*(_BYTE *)(v22 + 144) != 0))
  {
    return result;
  }
  *(double *)(v22 + 136) = v10;
  *(_BYTE *)(v22 + 144) = v18;
  if (*(_BYTE *)(v22 + 128))
  {
    if (v18)
      v23 = (int)v10;
    else
      v23 = 0x7FFFFFFFLL;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v22 + 120) + 16))(*(_QWORD *)(v22 + 120), v23);
  }
  return result;
}

void webrtc::VideoStreamEncoderResourceManager::OnResourceLimitationChanged(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  int v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  int v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t **v42;
  int v43;
  uint64_t *v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t **v52;
  _BOOL4 v54;
  _BOOL4 v56;
  int v57;
  size_t v58;
  std::string::size_type v59;
  std::string::size_type size;
  std::string *v61;
  BOOL v62;
  std::string::size_type v63;
  std::string::size_type v64;
  std::string::size_type v65;
  uint64_t *v66;
  std::string *v67;
  _BYTE *v68;
  std::string::size_type v69;
  uint64_t **v70;
  unsigned int v71;
  std::string::size_type v72;
  std::string::size_type v73;
  int v74;
  std::string::size_type v75;
  std::string::size_type v76;
  uint64_t **v77;
  std::string *v78;
  std::string::size_type v80;
  _BOOL4 v82;
  _BOOL4 v84;
  int v85;
  size_t v86;
  std::string::size_type v87;
  std::string::size_type v88;
  std::string *v89;
  std::string::size_type v91;
  std::string::size_type v92;
  std::string::size_type v93;
  uint64_t *v94;
  std::string *v95;
  _BYTE *v96;
  std::string::size_type v97;
  uint64_t **v98;
  std::string::size_type v99;
  std::string::size_type v100;
  std::string *v101;
  std::string::size_type v103;
  _BOOL4 v106;
  _BOOL4 v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  std::string __p_new_stuff;
  std::string v112;

  v3 = a1;
  v4 = *a2;
  if (!*a2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 72))(*(_QWORD *)(a1 + 112));
    return;
  }
  v5 = &v109;
  v109 = 0;
  v110 = 0;
  v108 = &v109;
  v6 = a3 + 1;
  v7 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 == a3 + 1)
    goto LABEL_43;
  v8 = a1 + 1472;
  do
  {
    v9 = v7[4];
    if (v9)
      (**(void (***)(_QWORD))v9)(v7[4]);
    v10 = *(_QWORD **)v8;
    if (!*(_QWORD *)v8)
      goto LABEL_18;
    v11 = (_QWORD *)v8;
    do
    {
      v12 = v10[4];
      v13 = v12 >= v9;
      if (v12 >= v9)
        v14 = v10;
      else
        v14 = v10 + 1;
      if (v13)
        v11 = v10;
      v10 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 == (_QWORD *)v8 || v9 < v11[4])
    {
LABEL_18:
      v15 = *(_DWORD *)(v8 + 40);
      v16 = v109;
      v17 = &v109;
      v18 = &v109;
      if (v109)
        goto LABEL_23;
LABEL_27:
      v20 = (uint64_t *)v18;
      v18 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v18 + 7) = v15;
      v18[4] = (uint64_t *)v7[5];
      *v18 = 0;
      v18[1] = 0;
      v18[2] = v20;
      *v17 = (uint64_t *)v18;
      v21 = (uint64_t *)v18;
      if (*v108)
      {
        v108 = (uint64_t **)*v108;
        v21 = *v17;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v109, v21);
      v22 = 0;
      ++v110;
      if (v9)
        goto LABEL_30;
      goto LABEL_31;
    }
    v15 = *((_DWORD *)v11 + 10);
    v16 = v109;
    v17 = &v109;
    v18 = &v109;
    if (!v109)
      goto LABEL_27;
    while (1)
    {
LABEL_23:
      while (1)
      {
        v18 = (uint64_t **)v16;
        v19 = *((_DWORD *)v16 + 7);
        if (v15 >= v19)
          break;
        v16 = *v18;
        v17 = v18;
        if (!*v18)
          goto LABEL_27;
      }
      if (v19 >= v15)
        break;
      v16 = v18[1];
      if (!v16)
      {
        v17 = v18 + 1;
        goto LABEL_27;
      }
    }
    v22 = 1;
    if (v9)
LABEL_30:
      (*(void (**)(unint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_31:
    if (v22 && *((_DWORD *)v18 + 8) + *((_DWORD *)v18 + 9) < *((_DWORD *)v7 + 10) + *((_DWORD *)v7 + 11))
      v18[4] = (uint64_t *)v7[5];
    v23 = (_QWORD *)v7[1];
    if (v23)
    {
      do
      {
        v24 = v23;
        v23 = (_QWORD *)*v23;
      }
      while (v23);
    }
    else
    {
      do
      {
        v24 = (_QWORD *)v7[2];
        v62 = *v24 == (_QWORD)v7;
        v7 = v24;
      }
      while (!v62);
    }
    v7 = v24;
  }
  while (v24 != v6);
  v3 = a1;
  v4 = *a2;
  if (*a2)
  {
LABEL_43:
    (**(void (***)(unint64_t))v4)(v4);
    v25 = 0;
    v26 = v3 + 1472;
    v27 = *(_QWORD **)(v3 + 1472);
    if (!v27)
      goto LABEL_57;
  }
  else
  {
    v25 = 1;
    v26 = a1 + 1472;
    v27 = *(_QWORD **)(a1 + 1472);
    if (!v27)
      goto LABEL_57;
  }
  v28 = (_QWORD *)v26;
  do
  {
    v29 = v27[4];
    v30 = v29 >= v4;
    if (v29 >= v4)
      v31 = v27;
    else
      v31 = v27 + 1;
    if (v30)
      v28 = v27;
    v27 = (_QWORD *)*v31;
  }
  while (*v31);
  if (v28 == (_QWORD *)v26 || v4 < v28[4])
  {
LABEL_57:
    v32 = *(unsigned int *)(v26 + 40);
    if ((v25 & 1) == 0)
      goto LABEL_58;
LABEL_61:
    v33 = *(_QWORD *)(v3 + 112);
    v34 = v109;
    v35 = &v109;
    v36 = &v109;
    if (v109)
      goto LABEL_62;
LABEL_68:
    v39 = (uint64_t *)v36;
    v36 = (uint64_t **)operator new(0x28uLL);
    *(uint64_t **)((char *)v36 + 28) = (uint64_t *)1;
    *((_DWORD *)v36 + 9) = 0;
    *v36 = 0;
    v36[1] = 0;
    v36[2] = v39;
    *v35 = (uint64_t *)v36;
    v40 = (uint64_t *)v36;
    if (*v108)
    {
      v108 = (uint64_t **)*v108;
      v40 = *v35;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v109, v40);
    v34 = v109;
    ++v110;
  }
  else
  {
    v32 = *((unsigned int *)v28 + 10);
    if ((v25 & 1) != 0)
      goto LABEL_61;
LABEL_58:
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
    v33 = *(_QWORD *)(v3 + 112);
    v34 = v109;
    v35 = &v109;
    v36 = &v109;
    if (!v109)
      goto LABEL_68;
LABEL_62:
    v37 = v34;
    while (1)
    {
      while (1)
      {
        v36 = (uint64_t **)v37;
        v38 = *((_DWORD *)v37 + 7);
        if (v38 < 2)
          break;
        v37 = *v36;
        v35 = v36;
        if (!*v36)
          goto LABEL_68;
      }
      if (v38 == 1)
        break;
      v37 = v36[1];
      if (!v37)
      {
        v35 = v36 + 1;
        goto LABEL_68;
      }
    }
  }
  v41 = v36 + 4;
  v42 = &v109;
  if (v34)
  {
    while (1)
    {
      while (1)
      {
        v42 = (uint64_t **)v34;
        v43 = *((_DWORD *)v34 + 7);
        if (v43 < 1)
          break;
        v34 = *v42;
        v5 = v42;
        if (!*v42)
          goto LABEL_78;
      }
      if ((v43 & 0x80000000) == 0)
        break;
      v34 = v42[1];
      if (!v34)
      {
        v5 = v42 + 1;
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    v44 = (uint64_t *)v42;
    v42 = (uint64_t **)operator new(0x28uLL);
    v42[4] = 0;
    *((_DWORD *)v42 + 7) = 0;
    *v42 = 0;
    v42[1] = 0;
    v42[2] = v44;
    *v5 = (uint64_t *)v42;
    v45 = (uint64_t *)v42;
    if (*v108)
    {
      v108 = (uint64_t **)*v108;
      v45 = *v5;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v109, v45);
    ++v110;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t **))(*(_QWORD *)v33 + 64))(v33, v32, v41, v42 + 4);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    v46 = (char *)operator new(0x30uLL);
    if (v46 <= "Downgrade counts: fps: {" && v46 + 24 > "Downgrade counts: fps: {")
      goto LABEL_252;
    strcpy(v46, "Downgrade counts: fps: {");
    v112.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
    *(_OWORD *)&v112.__r_.__value_.__r.__words[1] = xmmword_208F0B3A0;
    v52 = v108;
    if (v108 != &v109)
    {
      v54 = &__p_new_stuff <= (std::string *)"cpu" && (char *)__p_new_stuff.__r_.__value_.__r.__words + 3 > "cpu";
      v106 = v54;
      v56 = &__p_new_stuff <= (std::string *)"quality"
         && (char *)__p_new_stuff.__r_.__value_.__r.__words + 7 > "quality";
      while (1)
      {
        v57 = *((_DWORD *)v52 + 7);
        if (v57 == 1)
        {
          *((_BYTE *)&__p_new_stuff.__r_.__value_.__s + 23) = 3;
          if (v106)
            goto LABEL_252;
          qmemcpy(&__p_new_stuff, "cpu", 3);
          v58 = 3;
        }
        else
        {
          if (v57)
            goto LABEL_253;
          *((_BYTE *)&__p_new_stuff.__r_.__value_.__s + 23) = 7;
          if (v56)
            goto LABEL_252;
          qmemcpy(&__p_new_stuff, "quality", 7);
          v58 = 7;
        }
        *(_BYTE *)((unint64_t)&__p_new_stuff | v58) = 0;
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = 22;
        else
          v59 = (v112.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v112.__r_.__value_.__r.__words[2]);
        else
          size = v112.__r_.__value_.__l.__size_;
        if (v59 - size >= v58)
        {
          if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v61 = &v112;
          else
            v61 = (std::string *)v112.__r_.__value_.__r.__words[0];
          v46 = (char *)v61 + size;
          v62 = (std::string *)((char *)v61 + size) > &__p_new_stuff
             || (std::string *)((char *)v61 + size + v58) <= &__p_new_stuff;
          if (!v62)
            goto LABEL_252;
          v46 = (char *)memmove(v46, &__p_new_stuff, v58);
          v63 = size + v58;
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            v112.__r_.__value_.__l.__size_ = size + v58;
          else
            *((_BYTE *)&v112.__r_.__value_.__s + 23) = v63 & 0x7F;
          v61->__r_.__value_.__s.__data_[v63] = 0;
        }
        else
        {
          std::string::__grow_by_and_replace(&v112, v59, size + v58 - v59, size, size, 0, v58, (const std::string::value_type *)&__p_new_stuff);
        }
        v64 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = 22;
        else
          v65 = (v112.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v64 = v112.__r_.__value_.__l.__size_;
        if (v65 == v64)
        {
          std::string::__grow_by_and_replace(&v112, v65, 1uLL, v65, v65, 0, 1uLL, ":");
          if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_131;
        }
        else
        {
          if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = &v112;
          else
            v67 = (std::string *)v112.__r_.__value_.__r.__words[0];
          v68 = (char *)v67 + v64;
          if ((char *)v67 + v64 <= ":" && v68 + 1 > ":")
            goto LABEL_252;
          *v68 = 58;
          v69 = v64 + 1;
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          {
            v112.__r_.__value_.__l.__size_ = v69;
            v67->__r_.__value_.__s.__data_[v69] = 0;
            if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_131:
              v46 = (char *)rtc::StringBuilder::operator<<(&v112, *((_DWORD *)v52 + 9));
              v66 = v52[1];
              if (v66)
                goto LABEL_143;
              goto LABEL_145;
            }
          }
          else
          {
            *((_BYTE *)&v112.__r_.__value_.__s + 23) = v69 & 0x7F;
            v67->__r_.__value_.__s.__data_[v69] = 0;
            if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_131;
          }
        }
        operator delete(__p_new_stuff.__r_.__value_.__l.__data_);
        v46 = (char *)rtc::StringBuilder::operator<<(&v112, *((_DWORD *)v52 + 9));
        v66 = v52[1];
        if (v66)
        {
          do
          {
LABEL_143:
            v70 = (uint64_t **)v66;
            v66 = (uint64_t *)*v66;
          }
          while (v66);
          goto LABEL_97;
        }
        do
        {
LABEL_145:
          v70 = (uint64_t **)v52[2];
          v62 = *v70 == (uint64_t *)v52;
          v52 = v70;
        }
        while (!v62);
LABEL_97:
        v52 = v70;
        if (v70 == &v109)
        {
          v71 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
          v72 = v112.__r_.__value_.__l.__size_;
          v73 = (v112.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          goto LABEL_150;
        }
      }
    }
    v71 = 128;
    v73 = 47;
    v72 = 24;
LABEL_150:
    v74 = (char)v71;
    if ((v71 & 0x80u) == 0)
      v75 = 22;
    else
      v75 = v73;
    if ((v71 & 0x80u) == 0)
      v76 = v71;
    else
      v76 = v72;
    if (v75 - v76 < 0xF)
    {
      std::string::__grow_by_and_replace(&v112, v75, v76 - v75 + 15, v76, v76, 0, 0xFuLL, "}, resolution {");
      v77 = v108;
      if (v108 == &v109)
        goto LABEL_232;
LABEL_169:
      v82 = &__p_new_stuff <= (std::string *)"cpu" && (char *)__p_new_stuff.__r_.__value_.__r.__words + 3 > "cpu";
      v107 = v82;
      v84 = &__p_new_stuff <= (std::string *)"quality"
         && (char *)__p_new_stuff.__r_.__value_.__r.__words + 7 > "quality";
      while (2)
      {
        v85 = *((_DWORD *)v77 + 7);
        if (v85 == 1)
        {
          *((_BYTE *)&__p_new_stuff.__r_.__value_.__s + 23) = 3;
          if (v107)
            goto LABEL_252;
          qmemcpy(&__p_new_stuff, "cpu", 3);
          v86 = 3;
        }
        else
        {
          if (v85)
            goto LABEL_253;
          *((_BYTE *)&__p_new_stuff.__r_.__value_.__s + 23) = 7;
          if (v84)
            goto LABEL_252;
          qmemcpy(&__p_new_stuff, "quality", 7);
          v86 = 7;
        }
        *(_BYTE *)((unint64_t)&__p_new_stuff | v86) = 0;
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v87 = 22;
        else
          v87 = (v112.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v88 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
        else
          v88 = v112.__r_.__value_.__l.__size_;
        if (v87 - v88 >= v86)
        {
          if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v89 = &v112;
          else
            v89 = (std::string *)v112.__r_.__value_.__r.__words[0];
          v46 = (char *)v89 + v88;
          if ((std::string *)((char *)v89 + v88) <= &__p_new_stuff
            && (std::string *)((char *)v89 + v88 + v86) > &__p_new_stuff)
          {
            goto LABEL_252;
          }
          v46 = (char *)memmove(v46, &__p_new_stuff, v86);
          v91 = v88 + v86;
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            v112.__r_.__value_.__l.__size_ = v88 + v86;
          else
            *((_BYTE *)&v112.__r_.__value_.__s + 23) = v91 & 0x7F;
          v89->__r_.__value_.__s.__data_[v91] = 0;
        }
        else
        {
          std::string::__grow_by_and_replace(&v112, v87, v88 + v86 - v87, v88, v88, 0, v86, (const std::string::value_type *)&__p_new_stuff);
        }
        v92 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v93 = 22;
        else
          v93 = (v112.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v92 = v112.__r_.__value_.__l.__size_;
        if (v93 == v92)
        {
          std::string::__grow_by_and_replace(&v112, v93, 1uLL, v93, v93, 0, 1uLL, ":");
          if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_215;
LABEL_226:
          operator delete(__p_new_stuff.__r_.__value_.__l.__data_);
          v46 = (char *)rtc::StringBuilder::operator<<(&v112, *((_DWORD *)v77 + 8));
          v94 = v77[1];
          if (v94)
            goto LABEL_227;
          do
          {
LABEL_229:
            v98 = (uint64_t **)v77[2];
            v62 = *v98 == (uint64_t *)v77;
            v77 = v98;
          }
          while (!v62);
        }
        else
        {
          if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v95 = &v112;
          else
            v95 = (std::string *)v112.__r_.__value_.__r.__words[0];
          v96 = (char *)v95 + v92;
          if ((char *)v95 + v92 <= ":" && v96 + 1 > ":")
            goto LABEL_252;
          *v96 = 58;
          v97 = v92 + 1;
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          {
            v112.__r_.__value_.__l.__size_ = v97;
            v95->__r_.__value_.__s.__data_[v97] = 0;
            if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_226;
          }
          else
          {
            *((_BYTE *)&v112.__r_.__value_.__s + 23) = v97 & 0x7F;
            v95->__r_.__value_.__s.__data_[v97] = 0;
            if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_226;
          }
LABEL_215:
          v46 = (char *)rtc::StringBuilder::operator<<(&v112, *((_DWORD *)v77 + 8));
          v94 = v77[1];
          if (!v94)
            goto LABEL_229;
          do
          {
LABEL_227:
            v98 = (uint64_t **)v94;
            v94 = (uint64_t *)*v94;
          }
          while (v94);
        }
        v77 = v98;
        if (v98 == &v109)
          goto LABEL_232;
        continue;
      }
    }
    v78 = (std::string *)v112.__r_.__value_.__r.__words[0];
    if (v74 >= 0)
      v78 = &v112;
    if ((char *)v78 + v76 <= "}, resolution {"
      && (char *)&v78->__r_.__value_.__r.__words[1] + v76 + 7 > "}, resolution {")
    {
      goto LABEL_252;
    }
    qmemcpy((char *)v78 + v76, "}, resolution {", 15);
    v80 = v76 + 15;
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    {
      v112.__r_.__value_.__l.__size_ = v76 + 15;
      v78->__r_.__value_.__s.__data_[v80] = 0;
      v77 = v108;
      if (v108 == &v109)
        goto LABEL_232;
      goto LABEL_169;
    }
    *((_BYTE *)&v112.__r_.__value_.__s + 23) = v80 & 0x7F;
    v78->__r_.__value_.__s.__data_[v80] = 0;
    v77 = v108;
    if (v108 != &v109)
      goto LABEL_169;
LABEL_232:
    v99 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v100 = 22;
    else
      v100 = (v112.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v99 = v112.__r_.__value_.__l.__size_;
    if (v100 == v99)
    {
      std::string::__grow_by_and_replace(&v112, v100, 1uLL, v100, v100, 0, 1uLL, "}");
      goto LABEL_249;
    }
    v101 = &v112;
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v101 = (std::string *)v112.__r_.__value_.__r.__words[0];
    if ((char *)v101 + v99 <= "}" && (char *)&v101->__r_.__value_.__l.__data_ + v99 + 1 > "}")
    {
LABEL_252:
      __break(1u);
LABEL_253:
      rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v46);
    }
    v101->__r_.__value_.__s.__data_[v99] = 125;
    v103 = v99 + 1;
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      v112.__r_.__value_.__l.__size_ = v103;
    else
      *((_BYTE *)&v112.__r_.__value_.__s + 23) = v103 & 0x7F;
    v101->__r_.__value_.__s.__data_[v103] = 0;
LABEL_249:
    __p_new_stuff = v112;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v100, v47, v76, v48, v49, v50, v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/video_stream_encoder_resource_manager.cc");
    if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p_new_stuff.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v109);
}

void `non-virtual thunk to'webrtc::VideoStreamEncoderResourceManager::OnResourceLimitationChanged(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  webrtc::VideoStreamEncoderResourceManager::OnResourceLimitationChanged(a1 - 8, a2, a3);
}

void webrtc::VideoStreamInputStateProvider::~VideoStreamInputStateProvider(webrtc::VideoStreamInputStateProvider *this)
{
  *(_QWORD *)this = &off_24C0C4E20;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_24C0C4E20;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::VideoStreamInputStateProvider::InputState@<X0>(webrtc::VideoStreamInputStateProvider *this@<X0>, _OWORD *a2@<X8>)
{
  int v4;
  __int128 v5;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 128))(*((_QWORD *)this + 9));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  *((_DWORD *)this + 23) = v4;
  v5 = *((_OWORD *)this + 6);
  *a2 = *((_OWORD *)this + 5);
  a2[1] = v5;
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 8));
}

unint64_t webrtc::TimingFrameInfo::ToString@<X0>(unint64_t this@<X0>, char *a2@<X8>)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  size_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *__s;
  __int128 v55;
  char __src;
  char v57;
  uint64_t v58;

  v2 = a2;
  v58 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(this + 104) == 255)
  {
    a2[23] = 0;
    *a2 = 0;
    return this;
  }
  v3 = this;
  __s = &v57;
  v55 = xmmword_208F05840;
  v57 = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", *(_DWORD *)this);
  __src = 44;
  v4 = v55;
  v5 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v6 = *((_QWORD *)&v55 + 1);
  if (v4 != v5)
    v6 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v6;
  __s[v6] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *(_QWORD *)(v3 + 8));
  __src = 44;
  v7 = v55;
  v8 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v9 = *((_QWORD *)&v55 + 1);
  if (v7 != v8)
    v9 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v9;
  __s[v9] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *(_QWORD *)(v3 + 16));
  __src = 44;
  v10 = v55;
  v11 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v12 = *((_QWORD *)&v55 + 1);
  if (v10 != v11)
    v12 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v12;
  __s[v12] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *(_QWORD *)(v3 + 24));
  __src = 44;
  v13 = v55;
  v14 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v15 = *((_QWORD *)&v55 + 1);
  if (v13 != v14)
    v15 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v15;
  __s[v15] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *(_QWORD *)(v3 + 32));
  __src = 44;
  v16 = v55;
  v17 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v18 = *((_QWORD *)&v55 + 1);
  if (v16 != v17)
    v18 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v18;
  __s[v18] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *(_QWORD *)(v3 + 40));
  __src = 44;
  v19 = v55;
  v20 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v21 = *((_QWORD *)&v55 + 1);
  if (v19 != v20)
    v21 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v21;
  __s[v21] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *(_QWORD *)(v3 + 48));
  __src = 44;
  v22 = v55;
  v23 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v24 = *((_QWORD *)&v55 + 1);
  if (v22 != v23)
    v24 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v24;
  __s[v24] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *(_QWORD *)(v3 + 56));
  __src = 44;
  v25 = v55;
  v26 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v27 = *((_QWORD *)&v55 + 1);
  if (v25 != v26)
    v27 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v27;
  __s[v27] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *(_QWORD *)(v3 + 64));
  __src = 44;
  v28 = v55;
  v29 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v30 = *((_QWORD *)&v55 + 1);
  if (v28 != v29)
    v30 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v30;
  __s[v30] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *(_QWORD *)(v3 + 72));
  __src = 44;
  v31 = v55;
  v32 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v33 = *((_QWORD *)&v55 + 1);
  if (v31 != v32)
    v33 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v33;
  __s[v33] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *(_QWORD *)(v3 + 80));
  __src = 44;
  v34 = v55;
  v35 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v36 = *((_QWORD *)&v55 + 1);
  if (v34 != v35)
    v36 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v36;
  __s[v36] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *(_QWORD *)(v3 + 88));
  __src = 44;
  v37 = v55;
  v38 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v39 = *((_QWORD *)&v55 + 1);
  if (v37 != v38)
    v39 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v39;
  __s[v39] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *(_QWORD *)(v3 + 96));
  __src = 44;
  v40 = v55;
  v41 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v42 = *((_QWORD *)&v55 + 1);
  if (v40 != v41)
    v42 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v42;
  __s[v42] = 0;
  v43 = *(unsigned __int8 *)(v3 + 104);
  v44 = v43 == 255;
  v45 = (v43 >> 1) & 1;
  if (v44)
    v45 = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", v45);
  __src = 44;
  v46 = v55;
  v47 = *((_QWORD *)&v55 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v55 + 1)], &__src, v55 != *((_QWORD *)&v55 + 1) + 1);
  v48 = *((_QWORD *)&v55 + 1);
  if (v46 != v47)
    v48 = *((_QWORD *)&v55 + 1) + 1;
  *((_QWORD *)&v55 + 1) = v48;
  __s[v48] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", (*(unsigned __int8 *)(v3 + 104) != 255) & *(_BYTE *)(v3 + 104));
  v49 = __s;
  if (!__s)
    goto LABEL_45;
  this = strlen(__s);
  if (this >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v50 = this;
  if (this > 0x16)
  {
    v52 = (this & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((this | 7) != 0x17)
      v52 = this | 7;
    v53 = v52 + 1;
    this = (unint64_t)operator new(v52 + 1);
    *((_QWORD *)v2 + 1) = v50;
    *((_QWORD *)v2 + 2) = v53 | 0x8000000000000000;
    *(_QWORD *)v2 = this;
    v2 = (char *)this;
    v51 = (char *)(this + v50);
    if (this > (unint64_t)v49)
      goto LABEL_42;
  }
  else
  {
    v2[23] = this;
    v51 = &v2[this];
    if (v2 > v49)
      goto LABEL_42;
  }
  if (v51 > v49)
LABEL_45:
    __break(1u);
LABEL_42:
  if (v50)
    this = (unint64_t)memmove(v2, v49, v50);
  *v51 = 0;
  return this;
}

webrtc::VideoPlayoutDelay *webrtc::VideoPlayoutDelay::VideoPlayoutDelay(webrtc::VideoPlayoutDelay *this, TimeDelta a2, TimeDelta a3)
{
  int64_t var0;
  int64_t v7;
  int64_t v8;
  TimeDelta v9;
  TimeDelta v10;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v22;
  _QWORD v23[3];
  _QWORD v24[2];
  std::string v25;
  _QWORD *v26;
  _QWORD v27[2];
  std::string v28;
  _QWORD *v29;
  _QWORD v30[2];
  std::string v31;
  _QWORD *v32;
  _QWORD v33[2];
  std::string v34;
  _QWORD *v35;
  std::string v36;

  if (a2.var0 >= 40950000)
    var0 = 40950000;
  else
    var0 = a2.var0;
  v7 = var0 & ~(var0 >> 63);
  if (a3.var0 >= 40950000)
    v8 = 40950000;
  else
    v8 = a3.var0;
  if (v7 > a3.var0)
    v8 = v7;
  *(_QWORD *)this = v7;
  *((_QWORD *)this + 1) = v8;
  if (a3.var0 <= 40950000 && (a2.var0 & 0x8000000000000000) == 0 && a2.var0 <= a3.var0
    || (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
  {
    return this;
  }
  v23[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_timing.cc";
  v23[1] = 859;
  v23[2] = &v22;
  v24[0] = "Invalid video playout delay: [";
  v24[1] = v23;
  webrtc::ToString((webrtc *)a2.var0, v9, (char *)&v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    v26 = v24;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  else
  {
    v25 = v34;
    v26 = v24;
  }
  v27[0] = ",";
  v27[1] = &v25;
  webrtc::ToString((webrtc *)a3.var0, v10, (char *)&v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    v29 = v27;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  else
  {
    v28 = v34;
    v29 = v27;
  }
  v30[0] = "]. Clamped to [";
  v30[1] = &v28;
  webrtc::ToString(*(webrtc **)this, v11, (char *)&v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    v32 = v30;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  else
  {
    v31 = v34;
    v32 = v30;
  }
  v33[0] = ",";
  v33[1] = &v31;
  webrtc::ToString(*((webrtc **)this + 1), v12, (char *)&v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    v20 = v33;
    v35 = v33;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v36.__r_.__value_.__l.__data_);
      v20 = v35;
    }
  }
  else
  {
    v34 = v36;
    v20 = v33;
    v35 = v33;
  }
  rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t\n\t\n\t", v13, v14, v15, v16, v17, v18, v19, **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20[1] + 24) + 8) + 24) + 8) + 24)+ 8));
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
LABEL_37:
      operator delete(v28.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return this;
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_37;
LABEL_32:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
LABEL_33:
    operator delete(v25.__r_.__value_.__l.__data_);
  return this;
}

uint64_t webrtc::VideoTrack::VideoTrack(uint64_t a1, char *__src, size_t __len, uint64_t *a4, uint64_t a5)
{
  char *v10;
  char *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = &unk_24C0C4FB0;
  *(_QWORD *)(a1 + 8) = &unk_24C0C5040;
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = &unk_24C0C5070;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_BYTE *)(a1 + 48) = 1;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_13;
  if (__len <= 0x16)
  {
    v10 = (char *)(a1 + 56);
    *(_BYTE *)(a1 + 79) = __len;
    v11 = (char *)(a1 + 56 + __len);
    if (a1 + 56 > (unint64_t)__src)
      goto LABEL_9;
    goto LABEL_8;
  }
  v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((__len | 7) != 0x17)
    v12 = __len | 7;
  v13 = v12 + 1;
  v10 = (char *)operator new(v12 + 1);
  *(_QWORD *)(a1 + 64) = __len;
  *(_QWORD *)(a1 + 72) = v13 | 0x8000000000000000;
  *(_QWORD *)(a1 + 56) = v10;
  v11 = &v10[__len];
  if (v10 <= __src)
  {
LABEL_8:
    if (v11 <= __src)
      goto LABEL_9;
    __break(1u);
LABEL_13:
    abort();
  }
LABEL_9:
  if (__len)
    memmove(v10, __src, __len);
  *v11 = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = &unk_24C0C4E48;
  *(_QWORD *)(a1 + 8) = &unk_24C0C4EE8;
  *(_QWORD *)(a1 + 16) = &unk_24C0C4F18;
  *(_QWORD *)(a1 + 88) = &unk_24C0C4F50;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 120) = &unk_24C0C4F88;
  v14 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 128) = a5;
  *(_QWORD *)(a1 + 136) = v14;
  *(_DWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 148) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 136))(v14, a1 + 120);
  return a1;
}

void webrtc::VideoTrack::~VideoTrack(webrtc::VideoTrack *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  webrtc::VideoTrack *v7;
  uint64_t v8;
  uint64_t v9;
  webrtc::VideoTrack *v10;

  *(_QWORD *)this = &unk_24C0C4E48;
  *((_QWORD *)this + 1) = &unk_24C0C4EE8;
  *((_QWORD *)this + 2) = &unk_24C0C4F18;
  *((_QWORD *)this + 11) = &unk_24C0C4F50;
  *((_QWORD *)this + 15) = &unk_24C0C4F88;
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 17) + 144))(*((_QWORD *)this + 17), (char *)this + 120);
  v2 = *((_QWORD *)this + 17);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 11) = &off_24C0C49D8;
  v3 = *((_QWORD *)this + 12);
  if (v3)
  {
    v4 = *((_QWORD *)this + 13);
    v5 = (void *)*((_QWORD *)this + 12);
    if (v4 != v3)
    {
      do
      {
        v6 = *(void **)(v4 - 40);
        if (v6)
        {
          *(_QWORD *)(v4 - 32) = v6;
          operator delete(v6);
        }
        v4 -= 72;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v3;
    operator delete(v5);
  }
  *(_QWORD *)this = &unk_24C0C4FB0;
  *((_QWORD *)this + 1) = &unk_24C0C5040;
  *((_QWORD *)this + 2) = &unk_24C0C5070;
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  *(_QWORD *)this = &unk_24C0C50A8;
  *((_QWORD *)this + 1) = &unk_24C0C5138;
  *((_QWORD *)this + 2) = &unk_24C0C5168;
  if (*((_QWORD *)this + 5))
  {
    v8 = *((_QWORD *)this + 3);
    v7 = (webrtc::VideoTrack *)*((_QWORD *)this + 4);
    v9 = *(_QWORD *)v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *((_QWORD *)this + 5) = 0;
    if (v7 != (webrtc::VideoTrack *)((char *)this + 24))
    {
      do
      {
        v10 = (webrtc::VideoTrack *)*((_QWORD *)v7 + 1);
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (webrtc::VideoTrack *)((char *)this + 24));
    }
  }
}

void webrtc::VideoTrack::kind(unint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 5;
  if (a1 <= (unint64_t)"video" && a1 + 5 > (unint64_t)"video")
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)"video";
    *(_WORD *)(a1 + 4) = cricket::kMediaTypeVideo[4];
  }
}

void webrtc::VideoTrack::AddOrUpdateSink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  rtc::VideoSourceBaseGuarded::AddOrUpdateSink((_QWORD *)(a1 + 88), a2, (__int128 *)a3);
  v11 = *(_OWORD *)a3;
  v6 = *(_BYTE **)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 16);
  __p = 0;
  v14 = 0;
  v15 = 0;
  v7 = *(_BYTE **)(a3 + 32);
  v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0)
      abort();
    v9 = (char *)operator new(v7 - v6);
    v10 = &v9[8 * (v8 >> 3)];
    __p = v9;
    v15 = v10;
    memcpy(v9, v6, v8);
    v14 = v10;
  }
  v16[0] = *(_QWORD *)(a3 + 48);
  *(_QWORD *)((char *)v16 + 7) = *(_QWORD *)(a3 + 55);
  BYTE1(v11) = *(_BYTE *)(a1 + 148) ^ 1;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 40) + 16)
                                                       + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 40) + 16, a2, &v11);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void `non-virtual thunk to'webrtc::VideoTrack::AddOrUpdateSink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  rtc::VideoSourceBaseGuarded::AddOrUpdateSink((_QWORD *)(a1 + 72), a2, (__int128 *)a3);
  v11 = *(_OWORD *)a3;
  v6 = *(_BYTE **)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 16);
  __p = 0;
  v14 = 0;
  v15 = 0;
  v7 = *(_BYTE **)(a3 + 32);
  v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0)
      abort();
    v9 = (char *)operator new(v7 - v6);
    v10 = &v9[8 * (v8 >> 3)];
    __p = v9;
    v15 = v10;
    memcpy(v9, v6, v8);
    v14 = v10;
  }
  v16[0] = *(_QWORD *)(a3 + 48);
  *(_QWORD *)((char *)v16 + 7) = *(_QWORD *)(a3 + 55);
  BYTE1(v11) = *(_BYTE *)(a1 + 132) ^ 1;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40) + 16)
                                                       + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40) + 16, a2, &v11);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

{
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  rtc::VideoSourceBaseGuarded::AddOrUpdateSink((_QWORD *)a1, a2, (__int128 *)a3);
  v11 = *(_OWORD *)a3;
  v6 = *(_BYTE **)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 16);
  __p = 0;
  v14 = 0;
  v15 = 0;
  v7 = *(_BYTE **)(a3 + 32);
  v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0)
      abort();
    v9 = (char *)operator new(v7 - v6);
    v10 = &v9[8 * (v8 >> 3)];
    __p = v9;
    v15 = v10;
    memcpy(v9, v6, v8);
    v14 = v10;
  }
  v16[0] = *(_QWORD *)(a3 + 48);
  *(_QWORD *)((char *)v16 + 7) = *(_QWORD *)(a3 + 55);
  BYTE1(v11) = *(_BYTE *)(a1 + 60) ^ 1;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 40) + 16)
                                                       + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 40) + 16, a2, &v11);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

uint64_t webrtc::VideoTrack::RemoveSink(uint64_t a1, uint64_t a2)
{
  rtc::VideoSourceBaseGuarded::RemoveSink(a1 + 88, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 40) + 16)
                                                     + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 40) + 16, a2);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrack::RemoveSink(uint64_t a1, uint64_t a2)
{
  rtc::VideoSourceBaseGuarded::RemoveSink(a1 + 72, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40) + 16)
                                                     + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40) + 16, a2);
}

{
  rtc::VideoSourceBaseGuarded::RemoveSink(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 40) + 16)
                                                     + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 40) + 16, a2);
}

uint64_t webrtc::VideoTrack::RequestRefreshFrame(webrtc::VideoTrack *this)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 40) + 16) + 32))(*(_QWORD *)(*((_QWORD *)this + 17) + 40) + 16);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrack::RequestRefreshFrame(webrtc::VideoTrack *this)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 15) + 40) + 16) + 32))(*(_QWORD *)(*((_QWORD *)this + 15) + 40) + 16);
}

{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 40) + 16) + 32))(*(_QWORD *)(*((_QWORD *)this + 6) + 40) + 16);
}

uint64_t webrtc::VideoTrack::GetSource(webrtc::VideoTrack *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t webrtc::VideoTrack::content_hint(webrtc::VideoTrack *this)
{
  return *((unsigned int *)this + 36);
}

_QWORD *webrtc::VideoTrack::set_content_hint(_QWORD *result, int a2)
{
  if (*((_DWORD *)result + 36) != a2)
  {
    *((_DWORD *)result + 36) = a2;
    return webrtc::Notifier<webrtc::VideoTrackInterface>::FireOnChanged(result);
  }
  return result;
}

BOOL webrtc::VideoTrack::set_enabled(webrtc::VideoTrack *this, int a2)
{
  int v4;
  uint64_t v5;
  char v7;
  _QWORD v8[2];
  char v9;

  v9 = a2;
  v4 = *((unsigned __int8 *)this + 48);
  *((_BYTE *)this + 48) = a2;
  if (v4 != a2)
    webrtc::Notifier<webrtc::VideoTrackInterface>::FireOnChanged(this);
  v5 = *((_QWORD *)this + 16);
  v8[0] = this;
  v8[1] = &v9;
  (*(void (**)(uint64_t, _QWORD *, void (*)(uint64_t *), char *))(*(_QWORD *)v5 + 96))(v5, v8, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::VideoTrack::set_enabled(BOOL)::$_1>, &v7);
  return v4 != a2;
}

BOOL webrtc::MediaStreamTrack<webrtc::VideoTrackInterface>::set_enabled(uint64_t a1, int a2)
{
  int v3;

  v3 = *(unsigned __int8 *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = a2;
  if (v3 != a2)
    webrtc::Notifier<webrtc::VideoTrackInterface>::FireOnChanged((_QWORD *)a1);
  return v3 != a2;
}

uint64_t webrtc::VideoTrack::enabled(rtc::Thread **this)
{
  _BOOL4 IsCurrent;
  uint64_t v3;

  IsCurrent = rtc::Thread::IsCurrent(this[16]);
  v3 = 48;
  if (IsCurrent)
    v3 = 148;
  return *((unsigned __int8 *)this + v3);
}

uint64_t webrtc::MediaStreamTrack<webrtc::VideoTrackInterface>::enabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t webrtc::VideoTrack::state(webrtc::VideoTrack *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t webrtc::MediaStreamTrack<webrtc::VideoTrackInterface>::state(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

_QWORD *webrtc::VideoTrack::OnChanged(webrtc::VideoTrack *this)
{
  _BYTE *v2;
  char v3;
  _QWORD *result;
  int v5;
  int v6;

  v2 = rtc::Thread::Current(this);
  v3 = v2[217];
  v2[217] = 0;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 17) + 32))(*((_QWORD *)this + 17));
  v5 = (_DWORD)result == 2;
  v6 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = v5;
  if (v6 != v5)
    result = webrtc::Notifier<webrtc::VideoTrackInterface>::FireOnChanged(this);
  v2[217] = v3;
  return result;
}

_QWORD *`non-virtual thunk to'webrtc::VideoTrack::OnChanged(webrtc::VideoTrack *this)
{
  _BYTE *v2;
  char v3;
  _QWORD *result;
  int v5;
  int v6;

  v2 = rtc::Thread::Current(this);
  v3 = v2[217];
  v2[217] = 0;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  v5 = (_DWORD)result == 2;
  v6 = *((_DWORD *)this - 10);
  *((_DWORD *)this - 10) = v5;
  if (v6 != v5)
    result = webrtc::Notifier<webrtc::VideoTrackInterface>::FireOnChanged((_QWORD *)this - 15);
  v2[217] = v3;
  return result;
}

void webrtc::MediaStreamTrack<webrtc::VideoTrackInterface>::id(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 56);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 72);
  }
}

_QWORD *webrtc::Notifier<webrtc::VideoTrackInterface>::RegisterObserver(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[3];
  a1 += 3;
  result[1] = a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void webrtc::Notifier<webrtc::VideoTrackInterface>::UnregisterObserver(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (uint64_t *)a1[4];
  if (v2 != a1 + 3)
  {
    while (1)
    {
      v3 = (_QWORD *)v2[1];
      if (v2[2] == a2)
        break;
      v2 = (uint64_t *)v2[1];
      if (v3 == a1 + 3)
        return;
    }
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)v2[1] = v4;
    --a1[5];
    operator delete(v2);
  }
}

_QWORD *`non-virtual thunk to'webrtc::Notifier<webrtc::VideoTrackInterface>::RegisterObserver(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[2];
  a1 += 2;
  result[1] = a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void `non-virtual thunk to'webrtc::Notifier<webrtc::VideoTrackInterface>::UnregisterObserver(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (uint64_t *)a1[3];
  if (v2 != a1 + 2)
  {
    while (1)
    {
      v3 = (_QWORD *)v2[1];
      if (v2[2] == a2)
        break;
      v2 = (uint64_t *)v2[1];
      if (v3 == a1 + 2)
        return;
    }
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)v2[1] = v4;
    --a1[4];
    operator delete(v2);
  }
}

void rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::VideoTrack::set_enabled(BOOL)::$_1>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v1 = *a1;
  *(_BYTE *)(v1 + 148) = *(_BYTE *)a1[1];
  v2 = *(_QWORD *)(v1 + 96);
  for (i = *(_QWORD *)(v1 + 104); v2 != i; v2 += 72)
  {
    v5 = *(_OWORD *)(v2 + 8);
    v12 = *(_QWORD *)(v2 + 24);
    v11 = v5;
    v14 = 0;
    v15 = 0;
    __p = 0;
    v7 = *(_BYTE **)(v2 + 32);
    v6 = *(_BYTE **)(v2 + 40);
    v8 = v6 - v7;
    if (v6 != v7)
    {
      if (v8 < 0)
        abort();
      __p = operator new(v6 - v7);
      v14 = __p;
      v9 = (char *)__p + 8 * (v8 >> 3);
      v15 = v9;
      memcpy(__p, v7, v8);
      v14 = v9;
    }
    v10 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)((char *)v16 + 7) = *(_QWORD *)(v2 + 63);
    v16[0] = v10;
    BYTE1(v11) = *(_BYTE *)a1[1] ^ 1;
    (*(void (**)(_QWORD, _QWORD, __int128 *))(**(_QWORD **)(v1 + 136) + 112))(*(_QWORD *)(v1 + 136), *(_QWORD *)v2, &v11);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
}

uint64_t rtc::RefCountedObject<webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 48);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 12;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::~VideoTrackSourceProxyWithInternal(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::state(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 40);
  v15 = xmmword_208F16EA0;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackSourceInterface,webrtc::MediaSourceInterface::SourceState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::remote(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::is_screencast(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::needs_denoising(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned __int16 v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 40);
  v15 = xmmword_208F05260;
  v16 = 0;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackSourceInterface,std::optional<BOOL>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::GetStats(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t *v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 40);
  v17 = xmmword_208F05270;
  v19 = &v10;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, uint64_t))v17;
    v5 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v17);
    v6 = v4(v5, *v19);
    v18 = v6;
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,BOOL,webrtc::VideoTrackSourceInterface::Stats *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
    v6 = v18 != 0;
  }
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  return v6;
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::SupportsEncodedOutput(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  char v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 40);
  v15 = xmmword_208F16E50;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackSourceInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16 != 0;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::GenerateKeyFrame(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 40);
  v14 = xmmword_208F05280;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::AddEncodedSink(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F05290;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void,rtc::VideoSinkInterface<webrtc::RecordableEncodedFrame> *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::RemoveEncodedSink(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F052A0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void,rtc::VideoSinkInterface<webrtc::RecordableEncodedFrame> *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::ProcessConstraints(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 40);
  v15 = xmmword_208F052B0;
  v16 = a2;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v15;
    v5 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v15);
    v4(v5, v16);
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void,webrtc::VideoTrackSourceConstraints const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
  }
  pthread_mutex_destroy(&v17);
  return pthread_cond_destroy(&v18);
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::AddOrUpdateSink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 40);
  v17 = xmmword_208F1D9E0;
  v18 = &v10;
  v19 = a3;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(_QWORD *, uint64_t, uint64_t))v17;
    v6 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v5 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*v6 + v17);
    v5(v6, *v18, v19);
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void,rtc::VideoSinkInterface<webrtc::VideoFrame> *,rtc::VideoSinkWants const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
  }
  pthread_mutex_destroy(&v20);
  return pthread_cond_destroy(&v21);
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::RemoveSink(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F1D9F0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void,rtc::VideoSinkInterface<webrtc::VideoFrame> *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::RequestRefreshFrame(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 40);
  v14 = xmmword_208F17180;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F052C0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::UnregisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F052D0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

BOOL rtc::RefCountedObject<webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 48));
  return v1 == 1;
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  return webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::RegisterObserver(a1 - 8, a2);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::UnregisterObserver(uint64_t a1, uint64_t a2)
{
  return webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::UnregisterObserver(a1 - 8, a2);
}

_QWORD *`non-virtual thunk to'rtc::RefCountedObject<webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>>::~RefCountedObject(uint64_t a1)
{
  return webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::~VideoTrackSourceProxyWithInternal((_QWORD *)(a1 - 8));
}

{
  return webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::~VideoTrackSourceProxyWithInternal((_QWORD *)(a1 - 16));
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>>::~RefCountedObject(uint64_t a1)
{
  webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::~VideoTrackSourceProxyWithInternal((_QWORD *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::~VideoTrackSourceProxyWithInternal((_QWORD *)(a1 - 16));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::AddOrUpdateSink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::AddOrUpdateSink(a1 - 16, a2, a3);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::RemoveSink(uint64_t a1, uint64_t a2)
{
  return webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::RemoveSink(a1 - 16, a2);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::RequestRefreshFrame(uint64_t a1)
{
  return webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::RequestRefreshFrame(a1 - 16);
}

_QWORD *webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::~VideoTrackSourceProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0C52B8;
  a1[1] = &unk_24C0C5360;
  a1[2] = &unk_24C0C5390;
  v12 = a1;
  v13 = webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::DestroyInternal;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[3];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[5];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceProxyWithInternal<webrtc::VideoTrackSourceInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackSourceInterface,webrtc::MediaSourceInterface::SourceState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackSourceInterface,std::optional<BOOL>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_WORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,BOOL,webrtc::VideoTrackSourceInterface::Stats *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v2);
  *(_BYTE *)(v1 + 24) = v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackSourceInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_BYTE *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void,rtc::VideoSinkInterface<webrtc::RecordableEncodedFrame> *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void,webrtc::VideoTrackSourceConstraints const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t))(*v5 + v2);
  v2(v5, v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void,rtc::VideoSinkInterface<webrtc::VideoFrame> *,rtc::VideoSinkWants const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v5 = *(_QWORD **)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*v6 + v2);
  v2(v6, *v5, v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void,rtc::VideoSinkInterface<webrtc::VideoFrame> *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackSourceInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t rtc::RefCountedObject<webrtc::VideoTrack>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 152);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::VideoTrack>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 38;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::VideoTrack>::~RefCountedObject(webrtc::VideoTrack *a1)
{
  webrtc::VideoTrack::~VideoTrack(a1);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::VideoTrack>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 152));
  return v1 == 1;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::VideoTrack>::~RefCountedObject(uint64_t a1)
{
  webrtc::VideoTrack::~VideoTrack((webrtc::VideoTrack *)(a1 - 8));
}

{
  webrtc::VideoTrack::~VideoTrack((webrtc::VideoTrack *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::VideoTrack::~VideoTrack((webrtc::VideoTrack *)(a1 - 16));
}

{
  webrtc::VideoTrack::~VideoTrack((webrtc::VideoTrack *)(a1 - 16));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::VideoTrack::~VideoTrack((webrtc::VideoTrack *)(a1 - 88));
}

{
  webrtc::VideoTrack::~VideoTrack((webrtc::VideoTrack *)(a1 - 88));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::VideoTrack::~VideoTrack((webrtc::VideoTrack *)(a1 - 120));
}

{
  webrtc::VideoTrack::~VideoTrack((webrtc::VideoTrack *)(a1 - 120));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::VideoTrackSource::AddOrUpdateSink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2, a3);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackSource::AddOrUpdateSink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 144))(a1 - 16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2, a3);
}

uint64_t webrtc::VideoTrackSource::RemoveSink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackSource::RemoveSink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 144))(a1 - 16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2);
}

webrtc::VoiceActivityDetector *webrtc::VoiceActivityDetector::VoiceActivityDetector(webrtc::VoiceActivityDetector *this)
{
  _DWORD *v2;
  int inited;
  uint64_t v4;
  uint64_t v5;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  webrtc::VadAudioProc::VadAudioProc((webrtc::VoiceActivityDetector *)((char *)this + 168));
  v2 = malloc_type_malloc(0x2E0uLL, 0x1000040384D0BBCuLL);
  v2[183] = 0;
  inited = WebRtcVad_InitCore((uint64_t)v2);
  if (v2[183] == 42 && !(WebRtcVad_set_mode_core((uint64_t)v2, 3) | inited))
  {
    v4 = operator new();
    *(_QWORD *)v4 = v2;
    bzero((void *)(v4 + 8), 0x3C8uLL);
    *(_DWORD *)(v4 + 976) = 3;
  }
  else
  {
    free(v2);
    v4 = 0;
  }
  *((_QWORD *)this + 691) = v4;
  *((_QWORD *)this + 700) = 0x3FD3333333333333;
  v5 = operator new();
  *(_QWORD *)v5 = operator new[]();
  *(_BYTE *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 12) = 0x1F400000000;
  *(_QWORD *)(v5 + 24) = 0;
  *((_QWORD *)this + 701) = v5;
  *((_QWORD *)this + 695) = 0xC00000003;
  *((_QWORD *)this + 692) = &webrtc::kNoiseGmmWeights;
  *((_QWORD *)this + 693) = &webrtc::kNoiseGmmMean;
  *((_QWORD *)this + 694) = &webrtc::kNoiseGmmCovarInverse;
  *((_QWORD *)this + 699) = 0xC00000003;
  *((_QWORD *)this + 696) = &kVoiceGmmWeights;
  *((_QWORD *)this + 697) = &kVoiceGmmMean;
  *((_QWORD *)this + 698) = &kVoiceGmmCovarInverse;
  return this;
}

void webrtc::VoiceActivityDetector::~VoiceActivityDetector(webrtc::VoiceActivityDetector *this)
{
  uint64_t *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = (uint64_t *)*((_QWORD *)this + 701);
  *((_QWORD *)this + 701) = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      MEMORY[0x20BD0ADD4](v3, 0x1000C8000313F17);
    MEMORY[0x20BD0ADEC](v2, 0x1080C40B9D49440);
  }
  v4 = (void **)*((_QWORD *)this + 691);
  *((_QWORD *)this + 691) = 0;
  if (v4)
  {
    free(*v4);
    MEMORY[0x20BD0ADEC](v4, 0x1020C406DF78F4CLL);
  }
  v5 = *((_QWORD *)this + 690);
  *((_QWORD *)this + 690) = 0;
  if (v5)
    MEMORY[0x20BD0ADEC](v5, 0x1000C407EBBDD04);
  v6 = *((_QWORD *)this + 689);
  *((_QWORD *)this + 689) = 0;
  if (v6)
    MEMORY[0x20BD0ADEC](v6, 0x1000C404CEF3289);
  v7 = *((_QWORD *)this + 688);
  *((_QWORD *)this + 688) = 0;
  if (v7)
    MEMORY[0x20BD0ADEC](v7, 0x1000C405012CC88);
  webrtc::Resampler::~Resampler((webrtc::VoiceActivityDetector *)((char *)this + 56));
  v8 = (void *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 4) = v8;
    operator delete(v8);
  }
  v9 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v9;
    operator delete(v9);
  }
}

void webrtc::VoiceActivityDetector::ProcessChunk(webrtc::VoiceActivityDetector *this, __int16 *a2, unint64_t a3, int a4)
{
  char *v4;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  double *v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64x2_t v28;
  int64x2_t *v29;
  unint64_t v30;
  unint64_t v31;
  double *v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t Activity;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _WORD v55[240];
  uint64_t v56;

  v4 = (char *)a3;
  v56 = *MEMORY[0x24BDAC8D0];
  v54 = a3;
  if (a4 != 16000)
  {
    if (a4 / 1000 != *((_DWORD *)this + 32) || *((_DWORD *)this + 33) != 16 || *((_QWORD *)this + 18) != 1)
    {
      webrtc::Resampler::Reset((webrtc::VoiceActivityDetector *)((char *)this + 56), a4, 16000, 1);
      if (v8)
      {
        webrtc::Resampler::ResetIfNeeded((webrtc::VoiceActivityDetector *)((char *)this + 56), a4, 16000, 1);
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/vad/voice_activity_detector.cc", 47, "resampler_.ResetIfNeeded(sample_rate_hz, kSampleRateHz, kNumChannels) == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v40, v41, v42, v43, v39);
        goto LABEL_58;
      }
    }
    webrtc::Resampler::Push((webrtc::VoiceActivityDetector *)((char *)this + 56), a2, (unint64_t)v4, (__int16 *)this + 2808, 0xA0uLL, &v54);
    v4 = (char *)v54;
    a2 = (__int16 *)((char *)this + 5616);
  }
  v9 = *((_QWORD *)this + 691);
  if (v4 != (char *)160)
  {
    v34 = webrtc::StandaloneVad::AddAudio(*((webrtc::StandaloneVad **)this + 691), a2, (uint64_t)v4);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/vad/voice_activity_detector.cc", 56, "standalone_vad_->AddAudio(resampled_ptr, length) == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v35, v36, v37, v38, v34);
  }
  v10 = *(_QWORD *)(v9 + 968);
  if ((unint64_t)(v10 - 321) <= 0xFFFFFFFFFFFFFE1ELL)
  {
    v10 = 0;
    *(_QWORD *)(v9 + 968) = 0;
  }
  memcpy((void *)(v9 + 2 * v10 + 8), a2, 0x140uLL);
  *(_QWORD *)(v9 + 968) += 160;
  v4 = (char *)this + 5936;
  webrtc::VadAudioProc::ExtractFeatures();
  v11 = *((_QWORD *)this + 758);
  v12 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3;
  if (v11 <= v12)
  {
    if (v11 < v12)
      *((_QWORD *)this + 1) = *(_QWORD *)this + 8 * v11;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this, v11 - v12);
    v11 = *((_QWORD *)this + 758);
  }
  v13 = (char *)*((_QWORD *)this + 3);
  v14 = (char *)*((_QWORD *)this + 4);
  v15 = (v14 - v13) >> 3;
  if (v11 <= v15)
  {
    if (v11 < v15)
    {
      v14 = &v13[8 * v11];
      *((_QWORD *)this + 4) = v14;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 24, v11 - v15);
    v13 = (char *)*((_QWORD *)this + 3);
    v14 = (char *)*((_QWORD *)this + 4);
  }
  if (v14 != v13)
    memmove(v13, (char *)this + 6032, v14 - v13);
  if (*((_QWORD *)this + 758))
  {
    v16 = *(double **)this;
    v17 = (double *)*((_QWORD *)this + 1);
    v18 = (uint64_t)v17 - *(_QWORD *)this;
    if (*((_BYTE *)this + 6072))
    {
      if (v18 >= 1)
        memset_pattern16(*(void **)this, &unk_208F1DA00, 8 * (((unint64_t)v18 >> 3) - ((unint64_t)v18 > 7)) + 8);
LABEL_53:
      if (v16 != v17)
      {
        v33 = *(v17 - 1);
        *((float *)this + 12) = v33;
        return;
      }
LABEL_63:
      __break(1u);
      return;
    }
    if (v18 >= 1)
      memset_pattern16(*(void **)this, &unk_208F1DA10, 8 * (((unint64_t)v18 >> 3) - ((unint64_t)v18 > 7)) + 8);
    if (v17 == v16)
      goto LABEL_63;
    v19 = *((_QWORD *)this + 691);
    v20 = *(_QWORD *)(v19 + 968);
    if (!v20)
      goto LABEL_59;
    if (v20 / 0xA0 > v18 >> 3)
      goto LABEL_59;
    v21 = *(_QWORD *)v19;
    if (!*(_QWORD *)v19 || *(_DWORD *)(v21 + 732) != 42 || v20 != 160 && v20 != 480 && v20 != 320)
      goto LABEL_59;
    WebRtcVad_Downsampling((__int16 *)(v19 + 8), v55, (unsigned int *)(v21 + 4), *(_QWORD *)(v19 + 968));
    v22 = WebRtcVad_CalcVad8khz(v21, (uint64_t)v55, v20 >> 1);
    if (v22 >= 1)
      v23 = 1;
    else
      v23 = v22;
    if ((v23 & 0x80000000) == 0)
    {
      v24 = 0.01;
      if (v23)
        v24 = 0.5;
      *v16 = v24;
      if (v20 >= 0x140)
      {
        v25 = 2;
        if (v20 / 0xA0 > 2)
          v25 = v20 / 0xA0;
        if (v25 < 5)
        {
          v26 = 1;
LABEL_48:
          v31 = v25 - v26;
          v32 = &v16[v26];
          do
          {
            *v32++ = v24;
            --v31;
          }
          while (v31);
          goto LABEL_50;
        }
        v27 = (v25 - 1) & 0xFFFFFFFFFFFFFFFCLL;
        v26 = v27 | 1;
        v28 = vdupq_lane_s64(*(uint64_t *)&v24, 0);
        v29 = (int64x2_t *)(v16 + 3);
        v30 = v27;
        do
        {
          v29[-1] = v28;
          *v29 = v28;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v25 - 1 != v27)
          goto LABEL_48;
      }
LABEL_50:
      *(_QWORD *)(v19 + 968) = 0;
      if (*((_QWORD *)this + 1) == *(_QWORD *)this)
        goto LABEL_63;
      v16 = (double *)((char *)this + 5536);
      if ((webrtc::PitchBasedVad::VoicingProbability((uint64_t)this + 5536, (uint64_t)this + 5936, *(_QWORD *)this) & 0x80000000) == 0)
      {
        v16 = *(double **)this;
        v17 = (double *)*((_QWORD *)this + 1);
        goto LABEL_53;
      }
LABEL_61:
      if (*((_QWORD *)this + 1) != *(_QWORD *)this)
      {
        v49 = webrtc::PitchBasedVad::VoicingProbability((uint64_t)v16, (uint64_t)v4, *(_QWORD *)this);
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/vad/voice_activity_detector.cc", 79, "pitch_based_vad_.VoicingProbability( features_, &chunkwise_voice_probabilities_[0]) >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v50, v51, v52, v53, v49);
      }
      goto LABEL_63;
    }
LABEL_58:
    v16 = *(double **)this;
    v17 = (double *)*((_QWORD *)this + 1);
LABEL_59:
    if (v17 == v16)
      goto LABEL_63;
    Activity = webrtc::StandaloneVad::GetActivity(*((webrtc::StandaloneVad **)this + 691), v16, v17 - v16);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/vad/voice_activity_detector.cc", 76, "standalone_vad_->GetActivity(&chunkwise_voice_probabilities_[0], chunkwise_voice_probabilities_.size()) >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v45, v46, v47, v48, Activity);
    goto LABEL_61;
  }
}

uint64_t webrtc::vp8::GetQp(webrtc::vp8 *this, const unsigned __int8 *a2, int *a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  int v229;
  unsigned int v230;
  unsigned int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  unsigned int v288;
  int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  int v308;
  unsigned int v309;
  unsigned int v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  int v322;
  unsigned int v323;
  unsigned int v324;
  int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  int v329;
  unsigned int v330;
  unsigned int v331;
  int v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  int v348;
  unsigned int v349;
  int v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  int v359;
  unsigned int v360;
  int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  int v365;
  unsigned int v366;
  unsigned int v367;
  int v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v371;
  int v372;
  unsigned int v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  unsigned int v381;
  int v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  int v386;
  unsigned int v387;
  unsigned int v388;
  int v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v392;
  int v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  int v397;
  unsigned int v398;
  int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  int v415;
  unsigned int v416;
  unsigned int v417;
  int v418;
  unsigned int v419;
  unsigned int v420;
  unsigned int v421;
  int v422;
  unsigned int v423;
  unsigned int v424;
  int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  int v429;
  unsigned int v430;
  unsigned int v431;
  int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  int v436;
  unsigned int v437;
  unsigned int v438;
  int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;
  int v443;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  int v452;
  unsigned int v453;
  int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  int v458;
  unsigned int v459;
  unsigned int v460;
  int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  int v465;
  unsigned int v466;
  unsigned int v467;
  int v468;
  unsigned int v469;
  unsigned int v470;
  unsigned int v471;
  int v472;
  unsigned int v473;
  unsigned int v474;
  int v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  int v479;
  unsigned int v480;
  unsigned int v481;
  int v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  int v486;
  unsigned int v487;
  unsigned int v488;
  int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  int v569;
  unsigned int v570;
  int v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  unsigned int v575;
  int v576;
  unsigned int v577;
  unsigned int v578;
  unsigned int v579;
  int v580;
  unsigned int v581;
  unsigned int v582;
  int v583;
  unsigned int v584;
  unsigned int v585;
  unsigned int v586;
  int v587;
  unsigned int v588;
  unsigned int v589;
  int v590;
  unsigned int v591;
  unsigned int v592;
  unsigned int v593;
  int v594;
  unsigned int v595;
  unsigned int v596;
  int v597;
  unsigned int v598;
  unsigned int v599;
  unsigned int v600;
  int v601;
  unsigned int v602;
  unsigned int v603;
  int v604;
  unsigned int v605;
  unsigned int v606;
  unsigned int v607;
  int v608;
  unsigned int v609;
  unsigned int v610;
  int v611;
  unsigned int v612;
  unsigned int v613;
  unsigned int v614;
  int v615;
  unsigned int v616;
  unsigned int v617;
  int v618;
  unsigned int v619;
  unsigned int v620;
  unsigned int v621;
  int v622;
  unsigned int v623;
  unsigned int v624;
  unsigned int v625;
  unsigned int v626;
  int v627;
  unsigned int v628;
  int v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  unsigned int v633;
  int v634;
  unsigned int v635;
  unsigned int v636;
  unsigned int v637;
  int v638;
  unsigned int v639;
  int v640;
  unsigned int v641;
  unsigned int v642;
  unsigned int v643;
  int v644;
  unsigned int v645;
  unsigned int v646;
  int v647;
  unsigned int v648;
  unsigned int v649;
  unsigned int v650;
  int v651;
  unsigned int v652;
  unsigned int v653;
  int v654;
  unsigned int v655;
  unsigned int v656;
  unsigned int v657;
  int v658;
  unsigned int v659;
  unsigned int v660;
  int v661;
  unsigned int v662;
  unsigned int v663;
  unsigned int v664;
  int v665;
  unsigned int v666;
  unsigned int v667;
  int v668;
  unsigned int v669;
  unsigned int v670;
  unsigned int v671;
  int v672;
  unsigned int v673;
  unsigned int v674;
  int v675;
  unsigned int v676;
  unsigned int v677;
  unsigned int v678;
  int v679;
  unsigned int v680;
  unsigned int v681;
  int v682;
  unsigned int v683;
  unsigned int v684;
  unsigned int v685;
  unsigned int v686;
  int v687;
  unsigned int v688;
  unsigned int v689;
  int v690;
  unsigned int v691;
  unsigned int v692;
  unsigned int v693;
  int v694;
  unsigned int v695;
  unsigned int v696;
  int v697;
  unsigned int v698;
  unsigned int v699;
  unsigned int v700;
  int v701;
  unsigned int v702;
  unsigned int v703;
  int v704;
  unsigned int v705;
  unsigned int v706;
  unsigned int v707;
  int v708;
  unsigned int v709;
  unsigned int v710;
  int v711;
  unsigned int v712;
  unsigned int v713;
  unsigned int v714;
  int v715;
  unsigned int v716;
  unsigned int v717;
  int v718;
  unsigned int v719;
  unsigned int v720;
  unsigned int v721;
  int v722;
  unsigned int v723;
  unsigned int v724;
  int v725;
  unsigned int v726;
  unsigned int v727;
  unsigned int v728;
  int v729;
  unsigned int v730;
  unsigned int v731;
  int v732;
  unsigned int v733;
  unsigned int v734;
  unsigned int v735;
  int v736;
  unsigned int v737;
  unsigned int v738;
  unsigned int v739;
  unsigned int v740;
  int v741;
  unsigned int v742;
  unsigned int v743;
  int v744;
  unsigned int v745;
  unsigned int v746;
  unsigned int v747;
  int v748;
  unsigned int v749;
  unsigned int v750;
  int v751;
  unsigned int v752;
  unsigned int v753;
  unsigned int v754;
  int v755;
  unsigned int v756;
  unsigned int v757;
  int v758;
  unsigned int v759;
  unsigned int v760;
  unsigned int v761;
  int v762;
  unsigned int v763;
  unsigned int v764;
  int v765;
  unsigned int v766;
  unsigned int v767;
  unsigned int v768;
  int v769;
  unsigned int v770;
  unsigned int v771;
  int v772;
  unsigned int v773;
  unsigned int v774;
  unsigned int v775;
  int v776;
  unsigned int v777;
  unsigned int v778;
  int v779;
  unsigned int v780;
  unsigned int v781;
  unsigned int v782;
  int v783;
  unsigned int v784;
  unsigned int v785;
  int v786;
  unsigned int v787;
  unsigned int v788;
  unsigned int v789;
  int v790;
  unsigned int v791;
  unsigned int v792;
  int v793;
  unsigned int v794;
  unsigned int v795;
  unsigned int v796;
  int v797;
  unsigned int v798;
  unsigned int v799;
  int v800;
  unsigned int v801;
  unsigned int v802;
  unsigned int v803;
  int v804;
  unsigned int v805;
  int v806;
  unsigned int v807;
  unsigned int v808;
  unsigned int v809;
  int v810;
  unsigned int v811;
  unsigned int v812;
  int v813;
  unsigned int v814;
  unsigned int v815;
  unsigned int v816;
  int v817;
  unsigned int v818;
  unsigned int v819;
  int v820;
  int v821;
  int v822;
  int v823;
  int v824;
  int v825;
  int v826;
  int v827;
  int v828;
  int v829;
  int v830;
  int v831;
  int v832;
  int v833;
  int v834;
  int v835;
  int v836;
  int v837;
  int v838;
  int v839;
  int v840;
  int v841;
  int v842;
  int v843;
  int v844;
  int v845;
  int v846;
  int v847;
  int v848;
  int v849;
  int v850;
  int v851;
  int v852;
  int v853;
  int v854;
  int v855;
  int v856;
  int v857;
  int v858;
  unsigned int v859;
  unsigned int v860;
  unsigned int v861;
  int v862;
  unsigned int v863;
  int v864;
  unsigned int v865;
  unsigned int v866;
  unsigned int v867;
  unsigned int v868;
  int v869;
  unsigned int v870;
  unsigned int v871;
  unsigned int v872;
  int v873;
  unsigned int v874;
  unsigned int v875;
  int v876;
  unsigned int v877;
  unsigned int v878;
  unsigned int v879;
  int v880;
  unsigned int v881;
  unsigned int v882;
  int v883;
  unsigned int v884;
  unsigned int v885;
  unsigned int v886;
  int v887;
  unsigned int v888;
  unsigned int v889;
  int v890;
  unsigned int v891;
  unsigned int v892;
  unsigned int v893;
  int v894;
  unsigned int v895;
  unsigned int v896;
  int v897;
  unsigned int v898;
  unsigned int v899;
  unsigned int v900;
  int v901;
  unsigned int v902;
  unsigned int v903;
  int v904;
  unsigned int v905;
  unsigned int v906;
  unsigned int v907;
  int v908;
  unsigned int v909;
  unsigned int v910;
  unsigned int v911;
  unsigned int v912;
  int v913;
  unsigned int v914;
  int v915;
  unsigned int v916;
  unsigned int v917;
  unsigned int v918;
  unsigned int v919;
  int v920;
  unsigned int v921;
  unsigned int v922;
  unsigned int v923;
  int v924;
  unsigned int v925;
  int v926;
  unsigned int v927;
  unsigned int v928;
  unsigned int v929;
  int v930;
  unsigned int v931;
  unsigned int v932;
  int v933;
  unsigned int v934;
  unsigned int v935;
  unsigned int v936;
  int v937;
  unsigned int v938;
  unsigned int v939;
  int v940;
  unsigned int v941;
  unsigned int v942;
  unsigned int v943;
  int v944;
  unsigned int v945;
  unsigned int v946;
  int v947;
  unsigned int v948;
  unsigned int v949;
  unsigned int v950;
  int v951;
  unsigned int v952;
  unsigned int v953;
  int v954;
  unsigned int v955;
  unsigned int v956;
  unsigned int v957;
  int v958;
  unsigned int v959;
  unsigned int v960;
  unsigned int v961;
  int v962;
  unsigned int v963;
  int v964;
  unsigned int v965;
  unsigned int v966;
  unsigned int v967;
  unsigned int v968;
  int v969;
  unsigned int v970;
  unsigned int v971;
  unsigned int v972;
  int v973;
  unsigned int v974;
  unsigned int v975;
  int v976;
  unsigned int v977;
  unsigned int v978;
  unsigned int v979;
  int v980;
  unsigned int v981;
  unsigned int v982;
  int v983;
  unsigned int v984;
  unsigned int v985;
  unsigned int v986;
  int v987;
  unsigned int v988;
  unsigned int v989;
  int v990;
  unsigned int v991;
  unsigned int v992;
  unsigned int v993;
  int v994;
  unsigned int v995;
  unsigned int v996;
  int v997;
  unsigned int v998;
  unsigned int v999;
  unsigned int v1000;
  int v1001;
  unsigned int v1002;
  unsigned int v1003;
  int v1004;
  unsigned int v1005;
  unsigned int v1006;
  unsigned int v1007;
  int v1008;
  unsigned int v1009;
  unsigned int v1010;
  unsigned int v1011;
  unsigned int v1012;
  int v1013;
  unsigned int v1014;
  int v1015;
  unsigned int v1016;
  unsigned int v1017;
  unsigned int v1018;
  unsigned int v1019;
  int v1020;
  unsigned int v1021;
  unsigned int v1022;
  unsigned int v1023;
  int v1024;
  unsigned int v1025;
  int v1026;
  unsigned int v1027;
  unsigned int v1028;
  unsigned int v1029;
  int v1030;
  unsigned int v1031;
  unsigned int v1032;
  int v1033;
  unsigned int v1034;
  unsigned int v1035;
  unsigned int v1036;
  int v1037;
  unsigned int v1038;
  unsigned int v1039;
  int v1040;
  unsigned int v1041;
  unsigned int v1042;
  unsigned int v1043;
  int v1044;
  unsigned int v1045;
  unsigned int v1046;
  int v1047;
  unsigned int v1048;
  unsigned int v1049;
  unsigned int v1050;
  int v1051;
  unsigned int v1052;
  unsigned int v1053;
  int v1054;
  unsigned int v1055;
  unsigned int v1056;
  unsigned int v1057;
  int v1058;
  unsigned int v1059;
  unsigned int v1060;
  unsigned int v1061;
  int v1062;
  unsigned int v1063;
  int v1064;
  unsigned int v1065;
  unsigned int v1066;
  unsigned int v1067;
  unsigned int v1068;
  int v1069;
  unsigned int v1070;
  unsigned int v1071;
  unsigned int v1072;
  int v1073;
  unsigned int v1074;
  unsigned int v1075;
  int v1076;
  unsigned int v1077;
  unsigned int v1078;
  unsigned int v1079;
  int v1080;
  unsigned int v1081;
  unsigned int v1082;
  int v1083;
  unsigned int v1084;
  unsigned int v1085;
  unsigned int v1086;
  int v1087;
  unsigned int v1088;
  unsigned int v1089;
  int v1090;
  unsigned int v1091;
  unsigned int v1092;
  unsigned int v1093;
  int v1094;
  unsigned int v1095;
  unsigned int v1096;
  int v1097;
  unsigned int v1098;
  unsigned int v1099;
  unsigned int v1100;
  int v1101;
  unsigned int v1102;
  unsigned int v1103;
  int v1104;
  unsigned int v1105;
  unsigned int v1106;
  unsigned int v1107;
  int v1108;
  unsigned int v1109;
  unsigned int v1110;
  unsigned int v1111;
  unsigned int v1112;
  int v1113;
  unsigned int v1114;
  int v1115;
  unsigned int v1116;
  unsigned int v1117;
  unsigned int v1118;
  unsigned int v1119;
  int v1120;
  unsigned int v1121;
  unsigned int v1122;
  unsigned int v1123;
  int v1124;
  unsigned int v1125;
  int v1126;
  unsigned int v1127;
  unsigned int v1128;
  unsigned int v1129;
  int v1130;
  unsigned int v1131;
  unsigned int v1132;
  int v1133;
  unsigned int v1134;
  unsigned int v1135;
  unsigned int v1136;
  int v1137;
  unsigned int v1138;
  unsigned int v1139;
  int v1140;
  unsigned int v1141;
  unsigned int v1142;
  unsigned int v1143;
  int v1144;
  unsigned int v1145;
  unsigned int v1146;
  int v1147;
  unsigned int v1148;
  unsigned int v1149;
  unsigned int v1150;
  int v1151;
  unsigned int v1152;
  unsigned int v1153;
  int v1154;
  unsigned int v1155;
  unsigned int v1156;
  unsigned int v1157;
  int v1158;
  unsigned int v1159;
  unsigned int v1160;
  unsigned int v1161;
  int v1162;
  unsigned int v1163;
  int v1164;
  unsigned int v1165;
  unsigned int v1166;
  unsigned int v1167;
  unsigned int v1168;
  int v1169;
  unsigned int v1170;
  unsigned int v1171;
  unsigned int v1172;
  int v1173;
  unsigned int v1174;
  unsigned int v1175;
  int v1176;
  unsigned int v1177;
  unsigned int v1178;
  unsigned int v1179;
  int v1180;
  unsigned int v1181;
  unsigned int v1182;
  int v1183;
  unsigned int v1184;
  unsigned int v1185;
  unsigned int v1186;
  int v1187;
  unsigned int v1188;
  unsigned int v1189;
  int v1190;
  unsigned int v1191;
  unsigned int v1192;
  unsigned int v1193;
  int v1194;
  unsigned int v1195;
  unsigned int v1196;
  int v1197;
  unsigned int v1198;
  unsigned int v1199;
  unsigned int v1200;
  int v1201;
  unsigned int v1202;
  unsigned int v1203;
  int v1204;
  unsigned int v1205;
  unsigned int v1206;
  unsigned int v1207;
  int v1208;
  unsigned int v1209;
  unsigned int v1210;
  unsigned int v1211;
  int v1212;
  unsigned int v1213;
  unsigned int v1214;
  unsigned int v1215;
  unsigned int v1216;
  int v1217;
  unsigned int v1218;
  unsigned int v1219;
  int v1220;
  unsigned int v1221;
  unsigned int v1222;
  unsigned int v1223;
  int v1224;
  unsigned int v1225;
  unsigned int v1226;
  int v1227;
  unsigned int v1228;
  unsigned int v1229;
  unsigned int v1230;
  int v1231;
  unsigned int v1232;
  unsigned int v1233;
  int v1234;
  unsigned int v1235;
  unsigned int v1236;
  unsigned int v1237;
  int v1238;
  unsigned int v1239;
  unsigned int v1240;
  int v1241;
  unsigned int v1242;
  unsigned int v1243;
  unsigned int v1244;
  int v1245;
  unsigned int v1246;
  unsigned int v1247;
  int v1248;
  unsigned int v1249;
  unsigned int v1250;
  unsigned int v1251;
  int v1252;
  unsigned int v1253;
  unsigned int v1254;
  int v1255;
  unsigned int v1256;
  unsigned int v1257;
  unsigned int v1258;
  int v1259;
  unsigned int v1260;
  unsigned int v1261;
  unsigned int v1262;
  unsigned int v1263;
  int v1264;
  unsigned int v1265;
  unsigned int v1266;
  int v1267;
  unsigned int v1268;
  unsigned int v1269;
  unsigned int v1270;
  int v1271;
  unsigned int v1272;
  unsigned int v1273;
  int v1274;
  unsigned int v1275;
  unsigned int v1276;
  unsigned int v1277;
  int v1278;
  unsigned int v1279;
  unsigned int v1280;
  int v1281;
  _BOOL4 v1282;
  unsigned int v1283;
  unsigned int v1284;
  unsigned int v1285;
  _BOOL4 v1286;
  unsigned int v1287;
  unsigned int v1288;
  int v1289;
  unsigned int v1290;
  unsigned int v1291;
  unsigned int v1292;
  int v1293;
  unsigned int v1294;
  unsigned int v1295;
  int v1296;
  _BOOL4 v1297;
  unsigned int v1298;
  unsigned int v1299;
  unsigned int v1300;
  _BOOL4 v1301;
  unsigned int v1302;
  unsigned int v1303;
  int v1304;
  unsigned int v1305;
  unsigned int v1306;
  unsigned int v1307;
  int v1308;
  unsigned int v1309;
  unsigned int v1310;
  int v1311;
  _BOOL4 v1312;
  unsigned int v1313;
  unsigned int v1314;
  unsigned int v1315;
  _BOOL4 v1316;
  unsigned int v1317;
  unsigned int v1318;
  int v1319;
  unsigned int v1320;
  unsigned int v1321;
  _BOOL4 v1322;
  unsigned int v1323;
  unsigned int v1324;
  unsigned __int8 *v1325;
  int v1326;
  int v1327;
  int v1328;
  int v1329;
  int v1330;
  int v1331;
  int v1332;
  int v1333;
  int v1334;
  int v1335;
  int v1336;
  int v1337;
  int v1338;
  int v1339;
  int v1340;
  int v1341;
  int v1342;
  int v1343;
  int v1344;
  int v1345;
  int v1346;
  int v1347;
  int v1348;
  int v1349;
  int v1350;
  int v1351;
  int v1352;
  int v1353;
  int v1354;
  int v1355;
  int v1356;
  int v1357;
  int v1358;
  int v1359;
  int v1360;
  int v1361;
  int v1362;
  int v1363;
  int v1364;
  int v1365;
  int v1366;
  int v1367;
  int v1368;
  int v1369;
  int v1370;
  int v1371;
  int v1372;
  int v1373;
  int v1374;
  int v1375;
  int v1376;
  int v1377;
  int v1378;
  int v1379;
  int v1380;
  int v1381;
  int v1382;
  int v1383;
  int v1384;
  int v1385;
  int v1386;
  int v1387;
  int v1388;
  int v1389;
  int v1390;
  int v1391;
  int v1392;
  int v1393;
  int v1394;
  int v1395;
  int v1396;
  int v1397;

  if ((unint64_t)a2 <= 2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    goto LABEL_10;
  }
  v12 = *(unsigned __int8 *)this;
  v13 = (*((unsigned __int8 *)this + 2) << 16) | (*((unsigned __int8 *)this + 1) << 8) | v12;
  v14 = v13 >> 5;
  v15 = 3;
  if ((v12 & 1) == 0)
    v15 = 10;
  if (v15 + v14 > (unint64_t)a2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/vp8_header_parser.cc");
    return 0;
  }
  v23 = (unsigned __int8 *)this + v15;
  v24 = &v23[v14];
  if (v13 < 0x20)
  {
    v25 = 0;
    if (v23 != v24)
      goto LABEL_13;
LABEL_32:
    v26 = v24;
    if ((v12 & 1) == 0)
      goto LABEL_14;
LABEL_33:
    v28 = 0;
    v34 = 255;
    goto LABEL_34;
  }
  v37 = *v23++;
  v25 = v37 << 8;
  if (v23 == v24)
    goto LABEL_32;
LABEL_13:
  v27 = *v23;
  v26 = v23 + 1;
  v25 |= v27;
  if ((v12 & 1) != 0)
    goto LABEL_33;
LABEL_14:
  v28 = v25 >> 15;
  if (v25 >> 15)
    v25 = 2 * v25 - 0x10000;
  if (v28)
    v29 = 254;
  else
    v29 = 128;
  v30 = ((v29 << 7) - 128) >> 8;
  v31 = (v30 + 1) << 8;
  v32 = v29 - (v30 + 1);
  if (v25 >= v31)
    v33 = (v30 + 1) << 8;
  else
    v33 = 0;
  if (v25 < v31)
    v32 = v30 + 1;
  v25 -= v33;
  if (v32 <= 0x7F)
  {
    do
    {
      v25 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v35 = *v26++;
          v25 |= v35;
        }
      }
      v34 = 2 * v32;
      v36 = v32 >= 0x40;
      v32 *= 2;
    }
    while (!v36);
  }
  else
  {
    v34 = v32;
  }
LABEL_34:
  v38 = ((v34 << 7) - 128) >> 8;
  v39 = (v38 + 1) << 8;
  v40 = v34 - (v38 + 1);
  if (v25 >= v39)
    v41 = (v38 + 1) << 8;
  else
    v41 = 0;
  if (v25 < v39)
    v42 = v38 + 1;
  else
    v42 = v40;
  v43 = v25 - v41;
  if (v42 <= 0x7F)
  {
    do
    {
      v43 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v494 = *v26++;
          v43 |= v494;
        }
      }
      v44 = 2 * v42;
      v36 = v42 >= 0x40;
      v42 *= 2;
    }
    while (!v36);
  }
  else
  {
    v44 = v42;
  }
  if (v25 >= v39)
  {
    v45 = ((v44 << 7) - 128) >> 8;
    v46 = (v45 + 1) << 8;
    v47 = v44 - (v45 + 1);
    if (v43 >= v46)
      v48 = (v45 + 1) << 8;
    else
      v48 = 0;
    if (v43 < v46)
      v49 = v45 + 1;
    else
      v49 = v47;
    v50 = v43 - v48;
    if (v49 <= 0x7F)
    {
      do
      {
        v50 *= 2;
        if (++v28 == 8)
        {
          v28 = 0;
          if (v26 == v24)
          {
            v26 = v24;
          }
          else
          {
            v495 = *v26++;
            v50 |= v495;
          }
        }
        v51 = 2 * v49;
        v36 = v49 >= 0x40;
        v49 *= 2;
      }
      while (!v36);
    }
    else
    {
      v51 = v49;
    }
    v52 = ((v51 << 7) - 128) >> 8;
    v53 = (v52 + 1) << 8;
    v54 = v51 - (v52 + 1);
    if (v50 >= v53)
      v55 = (v52 + 1) << 8;
    else
      v55 = 0;
    if (v50 < v53)
      v56 = v52 + 1;
    else
      v56 = v54;
    v57 = v50 - v55;
    if (v56 <= 0x7F)
    {
      do
      {
        v57 *= 2;
        if (++v28 == 8)
        {
          v28 = 0;
          if (v26 == v24)
          {
            v26 = v24;
          }
          else
          {
            v496 = *v26++;
            v57 |= v496;
          }
        }
        v44 = 2 * v56;
        v36 = v56 >= 0x40;
        v56 *= 2;
      }
      while (!v36);
    }
    else
    {
      v44 = v56;
    }
    if (v50 >= v53)
    {
      v58 = ((v44 << 7) - 128) >> 8;
      v59 = (v58 + 1) << 8;
      v60 = v44 - (v58 + 1);
      if (v57 >= v59)
        v61 = (v58 + 1) << 8;
      else
        v61 = 0;
      if (v57 < v59)
        v62 = v58 + 1;
      else
        v62 = v60;
      v63 = v57 - v61;
      if (v62 <= 0x7F)
      {
        do
        {
          v63 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v497 = *v26++;
              v63 |= v497;
            }
          }
          v64 = 2 * v62;
          v36 = v62 >= 0x40;
          v62 *= 2;
        }
        while (!v36);
      }
      else
      {
        v64 = v62;
      }
      v65 = ((v64 << 7) - 128) >> 8;
      v66 = (v65 + 1) << 8;
      v67 = v64 - (v65 + 1);
      if (v63 >= v66)
        v68 = (v65 + 1) << 8;
      else
        v68 = 0;
      if (v63 < v66)
        v69 = v65 + 1;
      else
        v69 = v67;
      v70 = v63 - v68;
      if (v69 <= 0x7F)
      {
        do
        {
          v70 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v498 = *v26++;
              v70 |= v498;
            }
          }
          v71 = 2 * v69;
          v36 = v69 >= 0x40;
          v69 *= 2;
        }
        while (!v36);
      }
      else
      {
        v71 = v69;
      }
      if (v63 >= v66)
      {
        v72 = ((v71 << 7) - 128) >> 8;
        v73 = (v72 + 1) << 8;
        if (v70 >= v73)
        {
          v74 = v71 - (v72 + 1);
        }
        else
        {
          v73 = 0;
          v74 = v72 + 1;
        }
        v75 = v70 - v73;
        if (v74 <= 0x7F)
        {
          do
          {
            v75 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v506 = *v26++;
                v75 |= v506;
              }
            }
            v76 = 2 * v74;
            v36 = v74 >= 0x40;
            v74 *= 2;
          }
          while (!v36);
        }
        else
        {
          v76 = v74;
        }
        v77 = ((v76 << 7) - 128) >> 8;
        v78 = (v77 + 1) << 8;
        v79 = v76 - (v77 + 1);
        if (v75 >= v78)
          v80 = (v77 + 1) << 8;
        else
          v80 = 0;
        if (v75 < v78)
          v81 = v77 + 1;
        else
          v81 = v79;
        v82 = v75 - v80;
        if (v81 <= 0x7F)
        {
          do
          {
            v82 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v507 = *v26++;
                v82 |= v507;
              }
            }
            v83 = 2 * v81;
            v36 = v81 >= 0x40;
            v81 *= 2;
          }
          while (!v36);
        }
        else
        {
          v83 = v81;
        }
        v84 = ((v83 << 7) - 128) >> 8;
        v85 = (v84 + 1) << 8;
        v86 = v83 - (v84 + 1);
        if (v82 >= v85)
          v87 = (v84 + 1) << 8;
        else
          v87 = 0;
        if (v82 < v85)
          v88 = v84 + 1;
        else
          v88 = v86;
        v89 = v82 - v87;
        if (v88 <= 0x7F)
        {
          do
          {
            v89 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v508 = *v26++;
                v89 |= v508;
              }
            }
            v90 = 2 * v88;
            v36 = v88 >= 0x40;
            v88 *= 2;
          }
          while (!v36);
        }
        else
        {
          v90 = v88;
        }
        v91 = ((v90 << 7) - 128) >> 8;
        v92 = (v91 + 1) << 8;
        v93 = v90 - (v91 + 1);
        if (v89 >= v92)
          v94 = (v91 + 1) << 8;
        else
          v94 = 0;
        if (v89 < v92)
          v95 = v91 + 1;
        else
          v95 = v93;
        v96 = v89 - v94;
        if (v95 <= 0x7F)
        {
          do
          {
            v96 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v509 = *v26++;
                v96 |= v509;
              }
            }
            v97 = 2 * v95;
            v36 = v95 >= 0x40;
            v95 *= 2;
          }
          while (!v36);
        }
        else
        {
          v97 = v95;
        }
        v98 = ((v97 << 7) - 128) >> 8;
        v99 = (v98 + 1) << 8;
        v100 = v97 - (v98 + 1);
        if (v96 >= v99)
          v101 = (v98 + 1) << 8;
        else
          v101 = 0;
        if (v96 < v99)
          v102 = v98 + 1;
        else
          v102 = v100;
        v103 = v96 - v101;
        if (v102 <= 0x7F)
        {
          do
          {
            v103 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v510 = *v26++;
                v103 |= v510;
              }
            }
            v104 = 2 * v102;
            v36 = v102 >= 0x40;
            v102 *= 2;
          }
          while (!v36);
        }
        else
        {
          v104 = v102;
        }
        v105 = ((v104 << 7) - 128) >> 8;
        v106 = (v105 + 1) << 8;
        v107 = v104 - (v105 + 1);
        if (v103 >= v106)
          v108 = (v105 + 1) << 8;
        else
          v108 = 0;
        if (v103 < v106)
          v109 = v105 + 1;
        else
          v109 = v107;
        v110 = v103 - v108;
        if (v109 <= 0x7F)
        {
          do
          {
            v110 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v511 = *v26++;
                v110 |= v511;
              }
            }
            v111 = 2 * v109;
            v36 = v109 >= 0x40;
            v109 *= 2;
          }
          while (!v36);
        }
        else
        {
          v111 = v109;
        }
        v112 = ((v111 << 7) - 128) >> 8;
        v113 = (v112 + 1) << 8;
        v114 = v111 - (v112 + 1);
        if (v110 >= v113)
          v115 = (v112 + 1) << 8;
        else
          v115 = 0;
        if (v110 < v113)
          v116 = v112 + 1;
        else
          v116 = v114;
        v117 = v110 - v115;
        if (v116 <= 0x7F)
        {
          do
          {
            v117 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v512 = *v26++;
                v117 |= v512;
              }
            }
            v118 = 2 * v116;
            v36 = v116 >= 0x40;
            v116 *= 2;
          }
          while (!v36);
        }
        else
        {
          v118 = v116;
        }
        v119 = ((v118 << 7) - 128) >> 8;
        v120 = (v119 + 1) << 8;
        v121 = v118 - (v119 + 1);
        if (v117 >= v120)
          v122 = (v119 + 1) << 8;
        else
          v122 = 0;
        if (v117 < v120)
          v123 = v119 + 1;
        else
          v123 = v121;
        v70 = v117 - v122;
        if (v123 <= 0x7F)
        {
          do
          {
            v70 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v513 = *v26++;
                v70 |= v513;
              }
            }
            v71 = 2 * v123;
            v36 = v123 >= 0x40;
            v123 *= 2;
          }
          while (!v36);
        }
        else
        {
          v71 = v123;
        }
      }
      v124 = ((v71 << 7) - 128) >> 8;
      v125 = (v124 + 1) << 8;
      v126 = v71 - (v124 + 1);
      if (v70 >= v125)
        v127 = (v124 + 1) << 8;
      else
        v127 = 0;
      if (v70 < v125)
        v126 = v124 + 1;
      v128 = v70 - v127;
      if (v126 <= 0x7F)
      {
        do
        {
          v128 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v499 = *v26++;
              v128 |= v499;
            }
          }
          v129 = 2 * v126;
          v36 = v126 >= 0x40;
          v126 *= 2;
        }
        while (!v36);
      }
      else
      {
        v129 = v126;
      }
      if (v70 >= v125)
      {
        v130 = ((v129 << 7) - 128) >> 8;
        v131 = (v130 + 1) << 8;
        v132 = v129 - (v130 + 1);
        if (v128 < v131)
        {
          v131 = 0;
          v132 = v130 + 1;
        }
        v133 = v128 - v131;
        if (v132 <= 0x7F)
        {
          do
          {
            v133 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v514 = *v26++;
                v133 |= v514;
              }
            }
            v134 = 2 * v132;
            v36 = v132 >= 0x40;
            v132 *= 2;
          }
          while (!v36);
        }
        else
        {
          v134 = v132;
        }
        v135 = ((v134 << 7) - 128) >> 8;
        v136 = (v135 + 1) << 8;
        v137 = v134 - (v135 + 1);
        if (v133 >= v136)
          v138 = (v135 + 1) << 8;
        else
          v138 = 0;
        if (v133 < v136)
          v137 = v135 + 1;
        v139 = v133 - v138;
        if (v137 <= 0x7F)
        {
          do
          {
            v139 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v515 = *v26++;
                v139 |= v515;
              }
            }
            v140 = 2 * v137;
            v36 = v137 >= 0x40;
            v137 *= 2;
          }
          while (!v36);
        }
        else
        {
          v140 = v137;
        }
        v141 = ((v140 << 7) - 128) >> 8;
        v142 = (v141 + 1) << 8;
        v143 = v140 - (v141 + 1);
        if (v139 >= v142)
          v144 = (v141 + 1) << 8;
        else
          v144 = 0;
        if (v139 < v142)
          v145 = v141 + 1;
        else
          v145 = v143;
        v146 = v139 - v144;
        if (v145 <= 0x7F)
        {
          do
          {
            v146 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v516 = *v26++;
                v146 |= v516;
              }
            }
            v147 = 2 * v145;
            v36 = v145 >= 0x40;
            v145 *= 2;
          }
          while (!v36);
        }
        else
        {
          v147 = v145;
        }
        v148 = ((v147 << 7) - 128) >> 8;
        v149 = (v148 + 1) << 8;
        v150 = v147 - (v148 + 1);
        if (v146 >= v149)
          v151 = (v148 + 1) << 8;
        else
          v151 = 0;
        if (v146 < v149)
          v152 = v148 + 1;
        else
          v152 = v150;
        v153 = v146 - v151;
        if (v152 <= 0x7F)
        {
          do
          {
            v153 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v517 = *v26++;
                v153 |= v517;
              }
            }
            v154 = 2 * v152;
            v36 = v152 >= 0x40;
            v152 *= 2;
          }
          while (!v36);
        }
        else
        {
          v154 = v152;
        }
        v155 = ((v154 << 7) - 128) >> 8;
        v156 = (v155 + 1) << 8;
        v157 = v154 - (v155 + 1);
        if (v153 >= v156)
          v158 = (v155 + 1) << 8;
        else
          v158 = 0;
        if (v153 < v156)
          v159 = v155 + 1;
        else
          v159 = v157;
        v160 = v153 - v158;
        if (v159 <= 0x7F)
        {
          do
          {
            v160 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v518 = *v26++;
                v160 |= v518;
              }
            }
            v161 = 2 * v159;
            v36 = v159 >= 0x40;
            v159 *= 2;
          }
          while (!v36);
        }
        else
        {
          v161 = v159;
        }
        v162 = ((v161 << 7) - 128) >> 8;
        v163 = (v162 + 1) << 8;
        v164 = v161 - (v162 + 1);
        if (v160 >= v163)
          v165 = (v162 + 1) << 8;
        else
          v165 = 0;
        if (v160 < v163)
          v166 = v162 + 1;
        else
          v166 = v164;
        v167 = v160 - v165;
        if (v166 <= 0x7F)
        {
          do
          {
            v167 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v519 = *v26++;
                v167 |= v519;
              }
            }
            v168 = 2 * v166;
            v36 = v166 >= 0x40;
            v166 *= 2;
          }
          while (!v36);
        }
        else
        {
          v168 = v166;
        }
        v169 = ((v168 << 7) - 128) >> 8;
        v170 = (v169 + 1) << 8;
        v171 = v168 - (v169 + 1);
        if (v167 >= v170)
          v172 = (v169 + 1) << 8;
        else
          v172 = 0;
        if (v167 < v170)
          v173 = v169 + 1;
        else
          v173 = v171;
        v174 = v167 - v172;
        if (v173 <= 0x7F)
        {
          do
          {
            v174 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v520 = *v26++;
                v174 |= v520;
              }
            }
            v175 = 2 * v173;
            v36 = v173 >= 0x40;
            v173 *= 2;
          }
          while (!v36);
        }
        else
        {
          v175 = v173;
        }
        v176 = ((v175 << 7) - 128) >> 8;
        v177 = (v176 + 1) << 8;
        v178 = v175 - (v176 + 1);
        if (v174 >= v177)
          v179 = (v176 + 1) << 8;
        else
          v179 = 0;
        if (v174 < v177)
          v178 = v176 + 1;
        v128 = v174 - v179;
        if (v178 <= 0x7F)
        {
          do
          {
            v128 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v521 = *v26++;
                v128 |= v521;
              }
            }
            v129 = 2 * v178;
            v36 = v178 >= 0x40;
            v178 *= 2;
          }
          while (!v36);
        }
        else
        {
          v129 = v178;
        }
      }
      v180 = ((v129 << 7) - 128) >> 8;
      v181 = (v180 + 1) << 8;
      v182 = v129 - (v180 + 1);
      if (v128 >= v181)
        v183 = (v180 + 1) << 8;
      else
        v183 = 0;
      if (v128 < v181)
        v182 = v180 + 1;
      v184 = v128 - v183;
      if (v182 <= 0x7F)
      {
        do
        {
          v184 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v500 = *v26++;
              v184 |= v500;
            }
          }
          v185 = 2 * v182;
          v36 = v182 >= 0x40;
          v182 *= 2;
        }
        while (!v36);
      }
      else
      {
        v185 = v182;
      }
      if (v128 >= v181)
      {
        v186 = ((v185 << 7) - 128) >> 8;
        v187 = (v186 + 1) << 8;
        if (v184 >= v187)
        {
          v188 = v185 - (v186 + 1);
        }
        else
        {
          v187 = 0;
          v188 = v186 + 1;
        }
        v189 = v184 - v187;
        if (v188 <= 0x7F)
        {
          do
          {
            v189 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v522 = *v26++;
                v189 |= v522;
              }
            }
            v190 = 2 * v188;
            v36 = v188 >= 0x40;
            v188 *= 2;
          }
          while (!v36);
        }
        else
        {
          v190 = v188;
        }
        v191 = ((v190 << 7) - 128) >> 8;
        v192 = (v191 + 1) << 8;
        v193 = v190 - (v191 + 1);
        if (v189 >= v192)
          v194 = (v191 + 1) << 8;
        else
          v194 = 0;
        if (v189 < v192)
          v195 = v191 + 1;
        else
          v195 = v193;
        v196 = v189 - v194;
        if (v195 <= 0x7F)
        {
          do
          {
            v196 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v523 = *v26++;
                v196 |= v523;
              }
            }
            v197 = 2 * v195;
            v36 = v195 >= 0x40;
            v195 *= 2;
          }
          while (!v36);
        }
        else
        {
          v197 = v195;
        }
        v198 = ((v197 << 7) - 128) >> 8;
        v199 = (v198 + 1) << 8;
        v200 = v197 - (v198 + 1);
        if (v196 >= v199)
          v201 = (v198 + 1) << 8;
        else
          v201 = 0;
        if (v196 < v199)
          v202 = v198 + 1;
        else
          v202 = v200;
        v203 = v196 - v201;
        if (v202 <= 0x7F)
        {
          do
          {
            v203 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v524 = *v26++;
                v203 |= v524;
              }
            }
            v204 = 2 * v202;
            v36 = v202 >= 0x40;
            v202 *= 2;
          }
          while (!v36);
        }
        else
        {
          v204 = v202;
        }
        v205 = ((v204 << 7) - 128) >> 8;
        v206 = (v205 + 1) << 8;
        v207 = v204 - (v205 + 1);
        if (v203 >= v206)
          v208 = (v205 + 1) << 8;
        else
          v208 = 0;
        if (v203 < v206)
          v209 = v205 + 1;
        else
          v209 = v207;
        v210 = v203 - v208;
        if (v209 <= 0x7F)
        {
          do
          {
            v210 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v525 = *v26++;
                v210 |= v525;
              }
            }
            v211 = 2 * v209;
            v36 = v209 >= 0x40;
            v209 *= 2;
          }
          while (!v36);
        }
        else
        {
          v211 = v209;
        }
        v212 = ((v211 << 7) - 128) >> 8;
        v213 = (v212 + 1) << 8;
        v214 = v211 - (v212 + 1);
        if (v210 >= v213)
          v215 = (v212 + 1) << 8;
        else
          v215 = 0;
        if (v210 < v213)
          v216 = v212 + 1;
        else
          v216 = v214;
        v217 = v210 - v215;
        if (v216 <= 0x7F)
        {
          do
          {
            v217 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v526 = *v26++;
                v217 |= v526;
              }
            }
            v218 = 2 * v216;
            v36 = v216 >= 0x40;
            v216 *= 2;
          }
          while (!v36);
        }
        else
        {
          v218 = v216;
        }
        v219 = ((v218 << 7) - 128) >> 8;
        v220 = (v219 + 1) << 8;
        v221 = v218 - (v219 + 1);
        if (v217 >= v220)
          v222 = (v219 + 1) << 8;
        else
          v222 = 0;
        if (v217 < v220)
          v223 = v219 + 1;
        else
          v223 = v221;
        v224 = v217 - v222;
        if (v223 <= 0x7F)
        {
          do
          {
            v224 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v527 = *v26++;
                v224 |= v527;
              }
            }
            v225 = 2 * v223;
            v36 = v223 >= 0x40;
            v223 *= 2;
          }
          while (!v36);
        }
        else
        {
          v225 = v223;
        }
        v226 = ((v225 << 7) - 128) >> 8;
        v227 = (v226 + 1) << 8;
        v228 = v225 - (v226 + 1);
        if (v224 >= v227)
          v229 = (v226 + 1) << 8;
        else
          v229 = 0;
        if (v224 < v227)
          v230 = v226 + 1;
        else
          v230 = v228;
        v231 = v224 - v229;
        if (v230 <= 0x7F)
        {
          do
          {
            v231 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v528 = *v26++;
                v231 |= v528;
              }
            }
            v232 = 2 * v230;
            v36 = v230 >= 0x40;
            v230 *= 2;
          }
          while (!v36);
        }
        else
        {
          v232 = v230;
        }
        v233 = ((v232 << 7) - 128) >> 8;
        v234 = (v233 + 1) << 8;
        v235 = v232 - (v233 + 1);
        if (v231 >= v234)
          v236 = (v233 + 1) << 8;
        else
          v236 = 0;
        if (v231 < v234)
          v237 = v233 + 1;
        else
          v237 = v235;
        v184 = v231 - v236;
        if (v237 <= 0x7F)
        {
          do
          {
            v184 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v529 = *v26++;
                v184 |= v529;
              }
            }
            v185 = 2 * v237;
            v36 = v237 >= 0x40;
            v237 *= 2;
          }
          while (!v36);
        }
        else
        {
          v185 = v237;
        }
      }
      v238 = ((v185 << 7) - 128) >> 8;
      v239 = (v238 + 1) << 8;
      v240 = v185 - (v238 + 1);
      if (v184 >= v239)
        v241 = (v238 + 1) << 8;
      else
        v241 = 0;
      if (v184 < v239)
        v240 = v238 + 1;
      v242 = v184 - v241;
      if (v240 <= 0x7F)
      {
        do
        {
          v242 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v501 = *v26++;
              v242 |= v501;
            }
          }
          v243 = 2 * v240;
          v36 = v240 >= 0x40;
          v240 *= 2;
        }
        while (!v36);
      }
      else
      {
        v243 = v240;
      }
      if (v184 >= v239)
      {
        v244 = ((v243 << 7) - 128) >> 8;
        v245 = (v244 + 1) << 8;
        v246 = v243 - (v244 + 1);
        if (v242 < v245)
        {
          v245 = 0;
          v246 = v244 + 1;
        }
        v247 = v242 - v245;
        if (v246 <= 0x7F)
        {
          do
          {
            v247 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v530 = *v26++;
                v247 |= v530;
              }
            }
            v248 = 2 * v246;
            v36 = v246 >= 0x40;
            v246 *= 2;
          }
          while (!v36);
        }
        else
        {
          v248 = v246;
        }
        v249 = ((v248 << 7) - 128) >> 8;
        v250 = (v249 + 1) << 8;
        v251 = v248 - (v249 + 1);
        if (v247 >= v250)
          v252 = (v249 + 1) << 8;
        else
          v252 = 0;
        if (v247 < v250)
          v251 = v249 + 1;
        v253 = v247 - v252;
        if (v251 <= 0x7F)
        {
          do
          {
            v253 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v531 = *v26++;
                v253 |= v531;
              }
            }
            v254 = 2 * v251;
            v36 = v251 >= 0x40;
            v251 *= 2;
          }
          while (!v36);
        }
        else
        {
          v254 = v251;
        }
        v255 = ((v254 << 7) - 128) >> 8;
        v256 = (v255 + 1) << 8;
        v257 = v254 - (v255 + 1);
        if (v253 >= v256)
          v258 = (v255 + 1) << 8;
        else
          v258 = 0;
        if (v253 < v256)
          v259 = v255 + 1;
        else
          v259 = v257;
        v260 = v253 - v258;
        if (v259 <= 0x7F)
        {
          do
          {
            v260 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v532 = *v26++;
                v260 |= v532;
              }
            }
            v261 = 2 * v259;
            v36 = v259 >= 0x40;
            v259 *= 2;
          }
          while (!v36);
        }
        else
        {
          v261 = v259;
        }
        v262 = ((v261 << 7) - 128) >> 8;
        v263 = (v262 + 1) << 8;
        v264 = v261 - (v262 + 1);
        if (v260 >= v263)
          v265 = (v262 + 1) << 8;
        else
          v265 = 0;
        if (v260 < v263)
          v266 = v262 + 1;
        else
          v266 = v264;
        v267 = v260 - v265;
        if (v266 <= 0x7F)
        {
          do
          {
            v267 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v533 = *v26++;
                v267 |= v533;
              }
            }
            v268 = 2 * v266;
            v36 = v266 >= 0x40;
            v266 *= 2;
          }
          while (!v36);
        }
        else
        {
          v268 = v266;
        }
        v269 = ((v268 << 7) - 128) >> 8;
        v270 = (v269 + 1) << 8;
        v271 = v268 - (v269 + 1);
        if (v267 >= v270)
          v272 = (v269 + 1) << 8;
        else
          v272 = 0;
        if (v267 < v270)
          v273 = v269 + 1;
        else
          v273 = v271;
        v274 = v267 - v272;
        if (v273 <= 0x7F)
        {
          do
          {
            v274 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v534 = *v26++;
                v274 |= v534;
              }
            }
            v275 = 2 * v273;
            v36 = v273 >= 0x40;
            v273 *= 2;
          }
          while (!v36);
        }
        else
        {
          v275 = v273;
        }
        v276 = ((v275 << 7) - 128) >> 8;
        v277 = (v276 + 1) << 8;
        v278 = v275 - (v276 + 1);
        if (v274 >= v277)
          v279 = (v276 + 1) << 8;
        else
          v279 = 0;
        if (v274 < v277)
          v280 = v276 + 1;
        else
          v280 = v278;
        v281 = v274 - v279;
        if (v280 <= 0x7F)
        {
          do
          {
            v281 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v535 = *v26++;
                v281 |= v535;
              }
            }
            v282 = 2 * v280;
            v36 = v280 >= 0x40;
            v280 *= 2;
          }
          while (!v36);
        }
        else
        {
          v282 = v280;
        }
        v283 = ((v282 << 7) - 128) >> 8;
        v284 = (v283 + 1) << 8;
        v285 = v282 - (v283 + 1);
        if (v281 >= v284)
          v286 = (v283 + 1) << 8;
        else
          v286 = 0;
        if (v281 < v284)
          v287 = v283 + 1;
        else
          v287 = v285;
        v288 = v281 - v286;
        if (v287 <= 0x7F)
        {
          do
          {
            v288 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v536 = *v26++;
                v288 |= v536;
              }
            }
            v289 = 2 * v287;
            v36 = v287 >= 0x40;
            v287 *= 2;
          }
          while (!v36);
        }
        else
        {
          v289 = v287;
        }
        v290 = ((v289 << 7) - 128) >> 8;
        v291 = (v290 + 1) << 8;
        v292 = v289 - (v290 + 1);
        if (v288 >= v291)
          v293 = (v290 + 1) << 8;
        else
          v293 = 0;
        if (v288 < v291)
          v292 = v290 + 1;
        v242 = v288 - v293;
        if (v292 <= 0x7F)
        {
          do
          {
            v242 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v537 = *v26++;
                v242 |= v537;
              }
            }
            v243 = 2 * v292;
            v36 = v292 >= 0x40;
            v292 *= 2;
          }
          while (!v36);
        }
        else
        {
          v243 = v292;
        }
      }
      v294 = ((v243 << 7) - 128) >> 8;
      v295 = (v294 + 1) << 8;
      v296 = v243 - (v294 + 1);
      if (v242 >= v295)
        v297 = (v294 + 1) << 8;
      else
        v297 = 0;
      if (v242 < v295)
        v296 = v294 + 1;
      v298 = v242 - v297;
      if (v296 <= 0x7F)
      {
        do
        {
          v298 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v502 = *v26++;
              v298 |= v502;
            }
          }
          v299 = 2 * v296;
          v36 = v296 >= 0x40;
          v296 *= 2;
        }
        while (!v36);
      }
      else
      {
        v299 = v296;
      }
      if (v242 >= v295)
      {
        v300 = ((v299 << 7) - 128) >> 8;
        v301 = (v300 + 1) << 8;
        if (v298 >= v301)
        {
          v302 = v299 - (v300 + 1);
        }
        else
        {
          v301 = 0;
          v302 = v300 + 1;
        }
        v303 = v298 - v301;
        if (v302 <= 0x7F)
        {
          do
          {
            v303 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v538 = *v26++;
                v303 |= v538;
              }
            }
            v304 = 2 * v302;
            v36 = v302 >= 0x40;
            v302 *= 2;
          }
          while (!v36);
        }
        else
        {
          v304 = v302;
        }
        v305 = ((v304 << 7) - 128) >> 8;
        v306 = (v305 + 1) << 8;
        v307 = v304 - (v305 + 1);
        if (v303 >= v306)
          v308 = (v305 + 1) << 8;
        else
          v308 = 0;
        if (v303 < v306)
          v309 = v305 + 1;
        else
          v309 = v307;
        v310 = v303 - v308;
        if (v309 <= 0x7F)
        {
          do
          {
            v310 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v539 = *v26++;
                v310 |= v539;
              }
            }
            v311 = 2 * v309;
            v36 = v309 >= 0x40;
            v309 *= 2;
          }
          while (!v36);
        }
        else
        {
          v311 = v309;
        }
        v312 = ((v311 << 7) - 128) >> 8;
        v313 = (v312 + 1) << 8;
        v314 = v311 - (v312 + 1);
        if (v310 >= v313)
          v315 = (v312 + 1) << 8;
        else
          v315 = 0;
        if (v310 < v313)
          v316 = v312 + 1;
        else
          v316 = v314;
        v317 = v310 - v315;
        if (v316 <= 0x7F)
        {
          do
          {
            v317 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v540 = *v26++;
                v317 |= v540;
              }
            }
            v318 = 2 * v316;
            v36 = v316 >= 0x40;
            v316 *= 2;
          }
          while (!v36);
        }
        else
        {
          v318 = v316;
        }
        v319 = ((v318 << 7) - 128) >> 8;
        v320 = (v319 + 1) << 8;
        v321 = v318 - (v319 + 1);
        if (v317 >= v320)
          v322 = (v319 + 1) << 8;
        else
          v322 = 0;
        if (v317 < v320)
          v323 = v319 + 1;
        else
          v323 = v321;
        v324 = v317 - v322;
        if (v323 <= 0x7F)
        {
          do
          {
            v324 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v541 = *v26++;
                v324 |= v541;
              }
            }
            v325 = 2 * v323;
            v36 = v323 >= 0x40;
            v323 *= 2;
          }
          while (!v36);
        }
        else
        {
          v325 = v323;
        }
        v326 = ((v325 << 7) - 128) >> 8;
        v327 = (v326 + 1) << 8;
        v328 = v325 - (v326 + 1);
        if (v324 >= v327)
          v329 = (v326 + 1) << 8;
        else
          v329 = 0;
        if (v324 < v327)
          v330 = v326 + 1;
        else
          v330 = v328;
        v331 = v324 - v329;
        if (v330 <= 0x7F)
        {
          do
          {
            v331 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v542 = *v26++;
                v331 |= v542;
              }
            }
            v332 = 2 * v330;
            v36 = v330 >= 0x40;
            v330 *= 2;
          }
          while (!v36);
        }
        else
        {
          v332 = v330;
        }
        v333 = ((v332 << 7) - 128) >> 8;
        v334 = (v333 + 1) << 8;
        v335 = v332 - (v333 + 1);
        if (v331 >= v334)
          v336 = (v333 + 1) << 8;
        else
          v336 = 0;
        if (v331 < v334)
          v337 = v333 + 1;
        else
          v337 = v335;
        v338 = v331 - v336;
        if (v337 <= 0x7F)
        {
          do
          {
            v338 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v543 = *v26++;
                v338 |= v543;
              }
            }
            v339 = 2 * v337;
            v36 = v337 >= 0x40;
            v337 *= 2;
          }
          while (!v36);
        }
        else
        {
          v339 = v337;
        }
        v340 = ((v339 << 7) - 128) >> 8;
        v341 = (v340 + 1) << 8;
        v342 = v339 - (v340 + 1);
        if (v338 >= v341)
          v343 = (v340 + 1) << 8;
        else
          v343 = 0;
        if (v338 < v341)
          v344 = v340 + 1;
        else
          v344 = v342;
        v298 = v338 - v343;
        if (v344 <= 0x7F)
        {
          do
          {
            v298 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v544 = *v26++;
                v298 |= v544;
              }
            }
            v299 = 2 * v344;
            v36 = v344 >= 0x40;
            v344 *= 2;
          }
          while (!v36);
        }
        else
        {
          v299 = v344;
        }
      }
      v345 = ((v299 << 7) - 128) >> 8;
      v346 = (v345 + 1) << 8;
      v347 = v299 - (v345 + 1);
      if (v298 >= v346)
        v348 = (v345 + 1) << 8;
      else
        v348 = 0;
      if (v298 < v346)
        v347 = v345 + 1;
      v349 = v298 - v348;
      if (v347 <= 0x7F)
      {
        do
        {
          v349 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v503 = *v26++;
              v349 |= v503;
            }
          }
          v350 = 2 * v347;
          v36 = v347 >= 0x40;
          v347 *= 2;
        }
        while (!v36);
      }
      else
      {
        v350 = v347;
      }
      if (v298 >= v346)
      {
        v351 = ((v350 << 7) - 128) >> 8;
        v352 = (v351 + 1) << 8;
        v353 = v350 - (v351 + 1);
        if (v349 < v352)
        {
          v352 = 0;
          v353 = v351 + 1;
        }
        v354 = v349 - v352;
        if (v353 <= 0x7F)
        {
          do
          {
            v354 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v545 = *v26++;
                v354 |= v545;
              }
            }
            v355 = 2 * v353;
            v36 = v353 >= 0x40;
            v353 *= 2;
          }
          while (!v36);
        }
        else
        {
          v355 = v353;
        }
        v356 = ((v355 << 7) - 128) >> 8;
        v357 = (v356 + 1) << 8;
        v358 = v355 - (v356 + 1);
        if (v354 >= v357)
          v359 = (v356 + 1) << 8;
        else
          v359 = 0;
        if (v354 < v357)
          v358 = v356 + 1;
        v360 = v354 - v359;
        if (v358 <= 0x7F)
        {
          do
          {
            v360 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v546 = *v26++;
                v360 |= v546;
              }
            }
            v361 = 2 * v358;
            v36 = v358 >= 0x40;
            v358 *= 2;
          }
          while (!v36);
        }
        else
        {
          v361 = v358;
        }
        v362 = ((v361 << 7) - 128) >> 8;
        v363 = (v362 + 1) << 8;
        v364 = v361 - (v362 + 1);
        if (v360 >= v363)
          v365 = (v362 + 1) << 8;
        else
          v365 = 0;
        if (v360 < v363)
          v366 = v362 + 1;
        else
          v366 = v364;
        v367 = v360 - v365;
        if (v366 <= 0x7F)
        {
          do
          {
            v367 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v547 = *v26++;
                v367 |= v547;
              }
            }
            v368 = 2 * v366;
            v36 = v366 >= 0x40;
            v366 *= 2;
          }
          while (!v36);
        }
        else
        {
          v368 = v366;
        }
        v369 = ((v368 << 7) - 128) >> 8;
        v370 = (v369 + 1) << 8;
        v371 = v368 - (v369 + 1);
        if (v367 >= v370)
          v372 = (v369 + 1) << 8;
        else
          v372 = 0;
        if (v367 < v370)
          v373 = v369 + 1;
        else
          v373 = v371;
        v374 = v367 - v372;
        if (v373 <= 0x7F)
        {
          do
          {
            v374 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v548 = *v26++;
                v374 |= v548;
              }
            }
            v375 = 2 * v373;
            v36 = v373 >= 0x40;
            v373 *= 2;
          }
          while (!v36);
        }
        else
        {
          v375 = v373;
        }
        v376 = ((v375 << 7) - 128) >> 8;
        v377 = (v376 + 1) << 8;
        v378 = v375 - (v376 + 1);
        if (v374 >= v377)
          v379 = (v376 + 1) << 8;
        else
          v379 = 0;
        if (v374 < v377)
          v380 = v376 + 1;
        else
          v380 = v378;
        v381 = v374 - v379;
        if (v380 <= 0x7F)
        {
          do
          {
            v381 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v549 = *v26++;
                v381 |= v549;
              }
            }
            v382 = 2 * v380;
            v36 = v380 >= 0x40;
            v380 *= 2;
          }
          while (!v36);
        }
        else
        {
          v382 = v380;
        }
        v383 = ((v382 << 7) - 128) >> 8;
        v384 = (v383 + 1) << 8;
        v385 = v382 - (v383 + 1);
        if (v381 >= v384)
          v386 = (v383 + 1) << 8;
        else
          v386 = 0;
        if (v381 < v384)
          v387 = v383 + 1;
        else
          v387 = v385;
        v388 = v381 - v386;
        if (v387 <= 0x7F)
        {
          do
          {
            v388 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v550 = *v26++;
                v388 |= v550;
              }
            }
            v389 = 2 * v387;
            v36 = v387 >= 0x40;
            v387 *= 2;
          }
          while (!v36);
        }
        else
        {
          v389 = v387;
        }
        v390 = ((v389 << 7) - 128) >> 8;
        v391 = (v390 + 1) << 8;
        v392 = v389 - (v390 + 1);
        if (v388 >= v391)
          v393 = (v390 + 1) << 8;
        else
          v393 = 0;
        if (v388 < v391)
          v392 = v390 + 1;
        v349 = v388 - v393;
        if (v392 <= 0x7F)
        {
          do
          {
            v349 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v551 = *v26++;
                v349 |= v551;
              }
            }
            v350 = 2 * v392;
            v36 = v392 >= 0x40;
            v392 *= 2;
          }
          while (!v36);
        }
        else
        {
          v350 = v392;
        }
      }
      v394 = ((v350 << 7) - 128) >> 8;
      v395 = (v394 + 1) << 8;
      v396 = v350 - (v394 + 1);
      if (v349 >= v395)
        v397 = (v394 + 1) << 8;
      else
        v397 = 0;
      if (v349 < v395)
        v396 = v394 + 1;
      v398 = v349 - v397;
      if (v396 <= 0x7F)
      {
        do
        {
          v398 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v504 = *v26++;
              v398 |= v504;
            }
          }
          v399 = 2 * v396;
          v36 = v396 >= 0x40;
          v396 *= 2;
        }
        while (!v36);
      }
      else
      {
        v399 = v396;
      }
      if (v349 >= v395)
      {
        v400 = ((v399 << 7) - 128) >> 8;
        v401 = (v400 + 1) << 8;
        v402 = v399 - (v400 + 1);
        if (v398 < v401)
        {
          v401 = 0;
          v402 = v400 + 1;
        }
        v403 = v398 - v401;
        if (v402 <= 0x7F)
        {
          do
          {
            v403 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v552 = *v26++;
                v403 |= v552;
              }
            }
            v404 = 2 * v402;
            v36 = v402 >= 0x40;
            v402 *= 2;
          }
          while (!v36);
        }
        else
        {
          v404 = v402;
        }
        v405 = ((v404 << 7) - 128) >> 8;
        v406 = (v405 + 1) << 8;
        v407 = v404 - (v405 + 1);
        if (v403 >= v406)
          v408 = (v405 + 1) << 8;
        else
          v408 = 0;
        if (v403 < v406)
          v409 = v405 + 1;
        else
          v409 = v407;
        v410 = v403 - v408;
        if (v409 <= 0x7F)
        {
          do
          {
            v410 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v553 = *v26++;
                v410 |= v553;
              }
            }
            v411 = 2 * v409;
            v36 = v409 >= 0x40;
            v409 *= 2;
          }
          while (!v36);
        }
        else
        {
          v411 = v409;
        }
        v412 = ((v411 << 7) - 128) >> 8;
        v413 = (v412 + 1) << 8;
        v414 = v411 - (v412 + 1);
        if (v410 >= v413)
          v415 = (v412 + 1) << 8;
        else
          v415 = 0;
        if (v410 < v413)
          v416 = v412 + 1;
        else
          v416 = v414;
        v417 = v410 - v415;
        if (v416 <= 0x7F)
        {
          do
          {
            v417 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v554 = *v26++;
                v417 |= v554;
              }
            }
            v418 = 2 * v416;
            v36 = v416 >= 0x40;
            v416 *= 2;
          }
          while (!v36);
        }
        else
        {
          v418 = v416;
        }
        v419 = ((v418 << 7) - 128) >> 8;
        v420 = (v419 + 1) << 8;
        v421 = v418 - (v419 + 1);
        if (v417 >= v420)
          v422 = (v419 + 1) << 8;
        else
          v422 = 0;
        if (v417 < v420)
          v423 = v419 + 1;
        else
          v423 = v421;
        v424 = v417 - v422;
        if (v423 <= 0x7F)
        {
          do
          {
            v424 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v555 = *v26++;
                v424 |= v555;
              }
            }
            v425 = 2 * v423;
            v36 = v423 >= 0x40;
            v423 *= 2;
          }
          while (!v36);
        }
        else
        {
          v425 = v423;
        }
        v426 = ((v425 << 7) - 128) >> 8;
        v427 = (v426 + 1) << 8;
        v428 = v425 - (v426 + 1);
        if (v424 >= v427)
          v429 = (v426 + 1) << 8;
        else
          v429 = 0;
        if (v424 < v427)
          v430 = v426 + 1;
        else
          v430 = v428;
        v431 = v424 - v429;
        if (v430 <= 0x7F)
        {
          do
          {
            v431 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v556 = *v26++;
                v431 |= v556;
              }
            }
            v432 = 2 * v430;
            v36 = v430 >= 0x40;
            v430 *= 2;
          }
          while (!v36);
        }
        else
        {
          v432 = v430;
        }
        v433 = ((v432 << 7) - 128) >> 8;
        v434 = (v433 + 1) << 8;
        v435 = v432 - (v433 + 1);
        if (v431 >= v434)
          v436 = (v433 + 1) << 8;
        else
          v436 = 0;
        if (v431 < v434)
          v437 = v433 + 1;
        else
          v437 = v435;
        v438 = v431 - v436;
        if (v437 <= 0x7F)
        {
          do
          {
            v438 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v557 = *v26++;
                v438 |= v557;
              }
            }
            v439 = 2 * v437;
            v36 = v437 >= 0x40;
            v437 *= 2;
          }
          while (!v36);
        }
        else
        {
          v439 = v437;
        }
        v440 = ((v439 << 7) - 128) >> 8;
        v441 = (v440 + 1) << 8;
        v442 = v439 - (v440 + 1);
        if (v438 >= v441)
          v443 = (v440 + 1) << 8;
        else
          v443 = 0;
        if (v438 < v441)
          v444 = v440 + 1;
        else
          v444 = v442;
        v398 = v438 - v443;
        if (v444 <= 0x7F)
        {
          do
          {
            v398 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v558 = *v26++;
                v398 |= v558;
              }
            }
            v399 = 2 * v444;
            v36 = v444 >= 0x40;
            v444 *= 2;
          }
          while (!v36);
        }
        else
        {
          v399 = v444;
        }
      }
      v445 = ((v399 << 7) - 128) >> 8;
      v446 = (v445 + 1) << 8;
      if (v398 >= v446)
        v447 = (v445 + 1) << 8;
      else
        v447 = 0;
      if (v398 < v446)
        v448 = v445 + 1;
      else
        v448 = v399 - (v445 + 1);
      v57 = v398 - v447;
      if (v448 <= 0x7F)
      {
        do
        {
          v57 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v505 = *v26++;
              v57 |= v505;
            }
          }
          v44 = 2 * v448;
          v36 = v448 >= 0x40;
          v448 *= 2;
        }
        while (!v36);
      }
      else
      {
        v44 = v448;
      }
      if (v398 >= v446)
      {
        v449 = ((v44 << 7) - 128) >> 8;
        v450 = (v449 + 1) << 8;
        v451 = v44 - (v449 + 1);
        if (v57 >= v450)
          v452 = (v449 + 1) << 8;
        else
          v452 = 0;
        if (v57 < v450)
          v451 = v449 + 1;
        v453 = v57 - v452;
        if (v451 <= 0x7F)
        {
          do
          {
            v453 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v559 = *v26++;
                v453 |= v559;
              }
            }
            v454 = 2 * v451;
            v36 = v451 >= 0x40;
            v451 *= 2;
          }
          while (!v36);
        }
        else
        {
          v454 = v451;
        }
        v455 = ((v454 << 7) - 128) >> 8;
        v456 = (v455 + 1) << 8;
        v457 = v454 - (v455 + 1);
        if (v453 >= v456)
          v458 = (v455 + 1) << 8;
        else
          v458 = 0;
        if (v453 < v456)
          v459 = v455 + 1;
        else
          v459 = v457;
        v460 = v453 - v458;
        if (v459 <= 0x7F)
        {
          do
          {
            v460 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v560 = *v26++;
                v460 |= v560;
              }
            }
            v461 = 2 * v459;
            v36 = v459 >= 0x40;
            v459 *= 2;
          }
          while (!v36);
        }
        else
        {
          v461 = v459;
        }
        v462 = ((v461 << 7) - 128) >> 8;
        v463 = (v462 + 1) << 8;
        v464 = v461 - (v462 + 1);
        if (v460 >= v463)
          v465 = (v462 + 1) << 8;
        else
          v465 = 0;
        if (v460 < v463)
          v466 = v462 + 1;
        else
          v466 = v464;
        v467 = v460 - v465;
        if (v466 <= 0x7F)
        {
          do
          {
            v467 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v561 = *v26++;
                v467 |= v561;
              }
            }
            v468 = 2 * v466;
            v36 = v466 >= 0x40;
            v466 *= 2;
          }
          while (!v36);
        }
        else
        {
          v468 = v466;
        }
        v469 = ((v468 << 7) - 128) >> 8;
        v470 = (v469 + 1) << 8;
        v471 = v468 - (v469 + 1);
        if (v467 >= v470)
          v472 = (v469 + 1) << 8;
        else
          v472 = 0;
        if (v467 < v470)
          v473 = v469 + 1;
        else
          v473 = v471;
        v474 = v467 - v472;
        if (v473 <= 0x7F)
        {
          do
          {
            v474 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v562 = *v26++;
                v474 |= v562;
              }
            }
            v475 = 2 * v473;
            v36 = v473 >= 0x40;
            v473 *= 2;
          }
          while (!v36);
        }
        else
        {
          v475 = v473;
        }
        v476 = ((v475 << 7) - 128) >> 8;
        v477 = (v476 + 1) << 8;
        v478 = v475 - (v476 + 1);
        if (v474 >= v477)
          v479 = (v476 + 1) << 8;
        else
          v479 = 0;
        if (v474 < v477)
          v480 = v476 + 1;
        else
          v480 = v478;
        v481 = v474 - v479;
        if (v480 <= 0x7F)
        {
          do
          {
            v481 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v563 = *v26++;
                v481 |= v563;
              }
            }
            v482 = 2 * v480;
            v36 = v480 >= 0x40;
            v480 *= 2;
          }
          while (!v36);
        }
        else
        {
          v482 = v480;
        }
        v483 = ((v482 << 7) - 128) >> 8;
        v484 = (v483 + 1) << 8;
        v485 = v482 - (v483 + 1);
        if (v481 >= v484)
          v486 = (v483 + 1) << 8;
        else
          v486 = 0;
        if (v481 < v484)
          v487 = v483 + 1;
        else
          v487 = v485;
        v488 = v481 - v486;
        if (v487 <= 0x7F)
        {
          do
          {
            v488 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v564 = *v26++;
                v488 |= v564;
              }
            }
            v489 = 2 * v487;
            v36 = v487 >= 0x40;
            v487 *= 2;
          }
          while (!v36);
        }
        else
        {
          v489 = v487;
        }
        v490 = ((v489 << 7) - 128) >> 8;
        v491 = (v490 + 1) << 8;
        v492 = v489 - (v490 + 1);
        if (v488 >= v491)
          v493 = (v490 + 1) << 8;
        else
          v493 = 0;
        if (v488 < v491)
          v492 = v490 + 1;
        v57 = v488 - v493;
        if (v492 <= 0x7F)
        {
          do
          {
            v57 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v565 = *v26++;
                v57 |= v565;
              }
            }
            v44 = 2 * v492;
            v36 = v492 >= 0x40;
            v492 *= 2;
          }
          while (!v36);
        }
        else
        {
          v44 = v492;
        }
      }
    }
    if (v43 >= v46)
    {
      v566 = ((v44 << 7) - 128) >> 8;
      v567 = (v566 + 1) << 8;
      v568 = v44 - (v566 + 1);
      if (v57 >= v567)
        v569 = (v566 + 1) << 8;
      else
        v569 = 0;
      if (v57 < v567)
        v568 = v566 + 1;
      v570 = v57 - v569;
      if (v568 <= 0x7F)
      {
        do
        {
          v570 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v832 = *v26++;
              v570 |= v832;
            }
          }
          v571 = 2 * v568;
          v36 = v568 >= 0x40;
          v568 *= 2;
        }
        while (!v36);
      }
      else
      {
        v571 = v568;
      }
      if (v57 >= v567)
      {
        v572 = ((v571 << 7) - 128) >> 8;
        v573 = (v572 + 1) << 8;
        if (v570 >= v573)
        {
          v574 = v571 - (v572 + 1);
        }
        else
        {
          v573 = 0;
          v574 = v572 + 1;
        }
        v575 = v570 - v573;
        if (v574 <= 0x7F)
        {
          do
          {
            v575 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v835 = *v26++;
                v575 |= v835;
              }
            }
            v576 = 2 * v574;
            v36 = v574 >= 0x40;
            v574 *= 2;
          }
          while (!v36);
        }
        else
        {
          v576 = v574;
        }
        v577 = ((v576 << 7) - 128) >> 8;
        v578 = (v577 + 1) << 8;
        v579 = v576 - (v577 + 1);
        if (v575 >= v578)
          v580 = (v577 + 1) << 8;
        else
          v580 = 0;
        if (v575 < v578)
          v581 = v577 + 1;
        else
          v581 = v579;
        v582 = v575 - v580;
        if (v581 <= 0x7F)
        {
          do
          {
            v582 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v836 = *v26++;
                v582 |= v836;
              }
            }
            v583 = 2 * v581;
            v36 = v581 >= 0x40;
            v581 *= 2;
          }
          while (!v36);
        }
        else
        {
          v583 = v581;
        }
        v584 = ((v583 << 7) - 128) >> 8;
        v585 = (v584 + 1) << 8;
        v586 = v583 - (v584 + 1);
        if (v582 >= v585)
          v587 = (v584 + 1) << 8;
        else
          v587 = 0;
        if (v582 < v585)
          v588 = v584 + 1;
        else
          v588 = v586;
        v589 = v582 - v587;
        if (v588 <= 0x7F)
        {
          do
          {
            v589 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v837 = *v26++;
                v589 |= v837;
              }
            }
            v590 = 2 * v588;
            v36 = v588 >= 0x40;
            v588 *= 2;
          }
          while (!v36);
        }
        else
        {
          v590 = v588;
        }
        v591 = ((v590 << 7) - 128) >> 8;
        v592 = (v591 + 1) << 8;
        v593 = v590 - (v591 + 1);
        if (v589 >= v592)
          v594 = (v591 + 1) << 8;
        else
          v594 = 0;
        if (v589 < v592)
          v595 = v591 + 1;
        else
          v595 = v593;
        v596 = v589 - v594;
        if (v595 <= 0x7F)
        {
          do
          {
            v596 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v838 = *v26++;
                v596 |= v838;
              }
            }
            v597 = 2 * v595;
            v36 = v595 >= 0x40;
            v595 *= 2;
          }
          while (!v36);
        }
        else
        {
          v597 = v595;
        }
        v598 = ((v597 << 7) - 128) >> 8;
        v599 = (v598 + 1) << 8;
        v600 = v597 - (v598 + 1);
        if (v596 >= v599)
          v601 = (v598 + 1) << 8;
        else
          v601 = 0;
        if (v596 < v599)
          v602 = v598 + 1;
        else
          v602 = v600;
        v603 = v596 - v601;
        if (v602 <= 0x7F)
        {
          do
          {
            v603 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v839 = *v26++;
                v603 |= v839;
              }
            }
            v604 = 2 * v602;
            v36 = v602 >= 0x40;
            v602 *= 2;
          }
          while (!v36);
        }
        else
        {
          v604 = v602;
        }
        v605 = ((v604 << 7) - 128) >> 8;
        v606 = (v605 + 1) << 8;
        v607 = v604 - (v605 + 1);
        if (v603 >= v606)
          v608 = (v605 + 1) << 8;
        else
          v608 = 0;
        if (v603 < v606)
          v609 = v605 + 1;
        else
          v609 = v607;
        v610 = v603 - v608;
        if (v609 <= 0x7F)
        {
          do
          {
            v610 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v840 = *v26++;
                v610 |= v840;
              }
            }
            v611 = 2 * v609;
            v36 = v609 >= 0x40;
            v609 *= 2;
          }
          while (!v36);
        }
        else
        {
          v611 = v609;
        }
        v612 = ((v611 << 7) - 128) >> 8;
        v613 = (v612 + 1) << 8;
        v614 = v611 - (v612 + 1);
        if (v610 >= v613)
          v615 = (v612 + 1) << 8;
        else
          v615 = 0;
        if (v610 < v613)
          v616 = v612 + 1;
        else
          v616 = v614;
        v617 = v610 - v615;
        if (v616 <= 0x7F)
        {
          do
          {
            v617 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v841 = *v26++;
                v617 |= v841;
              }
            }
            v618 = 2 * v616;
            v36 = v616 >= 0x40;
            v616 *= 2;
          }
          while (!v36);
        }
        else
        {
          v618 = v616;
        }
        v619 = ((v618 << 7) - 128) >> 8;
        v620 = (v619 + 1) << 8;
        v621 = v618 - (v619 + 1);
        if (v617 >= v620)
          v622 = (v619 + 1) << 8;
        else
          v622 = 0;
        if (v617 < v620)
          v623 = v619 + 1;
        else
          v623 = v621;
        v570 = v617 - v622;
        if (v623 <= 0x7F)
        {
          do
          {
            v570 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v842 = *v26++;
                v570 |= v842;
              }
            }
            v571 = 2 * v623;
            v36 = v623 >= 0x40;
            v623 *= 2;
          }
          while (!v36);
        }
        else
        {
          v571 = v623;
        }
      }
      v624 = ((v571 << 7) - 128) >> 8;
      v625 = (v624 + 1) << 8;
      v626 = v571 - (v624 + 1);
      if (v570 >= v625)
        v627 = (v624 + 1) << 8;
      else
        v627 = 0;
      if (v570 < v625)
        v626 = v624 + 1;
      v628 = v570 - v627;
      if (v626 <= 0x7F)
      {
        do
        {
          v628 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v833 = *v26++;
              v628 |= v833;
            }
          }
          v629 = 2 * v626;
          v36 = v626 >= 0x40;
          v626 *= 2;
        }
        while (!v36);
      }
      else
      {
        v629 = v626;
      }
      if (v570 >= v625)
      {
        v630 = ((v629 << 7) - 128) >> 8;
        v631 = (v630 + 1) << 8;
        v632 = v629 - (v630 + 1);
        if (v628 < v631)
        {
          v631 = 0;
          v632 = v630 + 1;
        }
        v633 = v628 - v631;
        if (v632 <= 0x7F)
        {
          do
          {
            v633 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v843 = *v26++;
                v633 |= v843;
              }
            }
            v634 = 2 * v632;
            v36 = v632 >= 0x40;
            v632 *= 2;
          }
          while (!v36);
        }
        else
        {
          v634 = v632;
        }
        v635 = ((v634 << 7) - 128) >> 8;
        v636 = (v635 + 1) << 8;
        v637 = v634 - (v635 + 1);
        if (v633 >= v636)
          v638 = (v635 + 1) << 8;
        else
          v638 = 0;
        if (v633 < v636)
          v637 = v635 + 1;
        v639 = v633 - v638;
        if (v637 <= 0x7F)
        {
          do
          {
            v639 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v844 = *v26++;
                v639 |= v844;
              }
            }
            v640 = 2 * v637;
            v36 = v637 >= 0x40;
            v637 *= 2;
          }
          while (!v36);
        }
        else
        {
          v640 = v637;
        }
        v641 = ((v640 << 7) - 128) >> 8;
        v642 = (v641 + 1) << 8;
        v643 = v640 - (v641 + 1);
        if (v639 >= v642)
          v644 = (v641 + 1) << 8;
        else
          v644 = 0;
        if (v639 < v642)
          v645 = v641 + 1;
        else
          v645 = v643;
        v646 = v639 - v644;
        if (v645 <= 0x7F)
        {
          do
          {
            v646 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v845 = *v26++;
                v646 |= v845;
              }
            }
            v647 = 2 * v645;
            v36 = v645 >= 0x40;
            v645 *= 2;
          }
          while (!v36);
        }
        else
        {
          v647 = v645;
        }
        v648 = ((v647 << 7) - 128) >> 8;
        v649 = (v648 + 1) << 8;
        v650 = v647 - (v648 + 1);
        if (v646 >= v649)
          v651 = (v648 + 1) << 8;
        else
          v651 = 0;
        if (v646 < v649)
          v652 = v648 + 1;
        else
          v652 = v650;
        v653 = v646 - v651;
        if (v652 <= 0x7F)
        {
          do
          {
            v653 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v846 = *v26++;
                v653 |= v846;
              }
            }
            v654 = 2 * v652;
            v36 = v652 >= 0x40;
            v652 *= 2;
          }
          while (!v36);
        }
        else
        {
          v654 = v652;
        }
        v655 = ((v654 << 7) - 128) >> 8;
        v656 = (v655 + 1) << 8;
        v657 = v654 - (v655 + 1);
        if (v653 >= v656)
          v658 = (v655 + 1) << 8;
        else
          v658 = 0;
        if (v653 < v656)
          v659 = v655 + 1;
        else
          v659 = v657;
        v660 = v653 - v658;
        if (v659 <= 0x7F)
        {
          do
          {
            v660 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v847 = *v26++;
                v660 |= v847;
              }
            }
            v661 = 2 * v659;
            v36 = v659 >= 0x40;
            v659 *= 2;
          }
          while (!v36);
        }
        else
        {
          v661 = v659;
        }
        v662 = ((v661 << 7) - 128) >> 8;
        v663 = (v662 + 1) << 8;
        v664 = v661 - (v662 + 1);
        if (v660 >= v663)
          v665 = (v662 + 1) << 8;
        else
          v665 = 0;
        if (v660 < v663)
          v666 = v662 + 1;
        else
          v666 = v664;
        v667 = v660 - v665;
        if (v666 <= 0x7F)
        {
          do
          {
            v667 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v848 = *v26++;
                v667 |= v848;
              }
            }
            v668 = 2 * v666;
            v36 = v666 >= 0x40;
            v666 *= 2;
          }
          while (!v36);
        }
        else
        {
          v668 = v666;
        }
        v669 = ((v668 << 7) - 128) >> 8;
        v670 = (v669 + 1) << 8;
        v671 = v668 - (v669 + 1);
        if (v667 >= v670)
          v672 = (v669 + 1) << 8;
        else
          v672 = 0;
        if (v667 < v670)
          v673 = v669 + 1;
        else
          v673 = v671;
        v674 = v667 - v672;
        if (v673 <= 0x7F)
        {
          do
          {
            v674 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v849 = *v26++;
                v674 |= v849;
              }
            }
            v675 = 2 * v673;
            v36 = v673 >= 0x40;
            v673 *= 2;
          }
          while (!v36);
        }
        else
        {
          v675 = v673;
        }
        v676 = ((v675 << 7) - 128) >> 8;
        v677 = (v676 + 1) << 8;
        v678 = v675 - (v676 + 1);
        if (v674 >= v677)
          v679 = (v676 + 1) << 8;
        else
          v679 = 0;
        if (v674 < v677)
          v678 = v676 + 1;
        v628 = v674 - v679;
        if (v678 <= 0x7F)
        {
          do
          {
            v628 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v850 = *v26++;
                v628 |= v850;
              }
            }
            v629 = 2 * v678;
            v36 = v678 >= 0x40;
            v678 *= 2;
          }
          while (!v36);
        }
        else
        {
          v629 = v678;
        }
      }
      v680 = ((v629 << 7) - 128) >> 8;
      v681 = (v680 + 1) << 8;
      if (v628 >= v681)
        v682 = (v680 + 1) << 8;
      else
        v682 = 0;
      if (v628 < v681)
        v683 = v680 + 1;
      else
        v683 = v629 - (v680 + 1);
      v43 = v628 - v682;
      if (v683 <= 0x7F)
      {
        do
        {
          v43 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v834 = *v26++;
              v43 |= v834;
            }
          }
          v44 = 2 * v683;
          v36 = v683 >= 0x40;
          v683 *= 2;
        }
        while (!v36);
      }
      else
      {
        v44 = v683;
      }
      if (v628 >= v681)
      {
        v684 = ((v44 << 7) - 128) >> 8;
        v685 = (v684 + 1) << 8;
        v686 = v44 - (v684 + 1);
        if (v43 >= v685)
          v687 = (v684 + 1) << 8;
        else
          v687 = 0;
        if (v43 < v685)
          v688 = v684 + 1;
        else
          v688 = v686;
        v689 = v43 - v687;
        if (v688 <= 0x7F)
        {
          do
          {
            v689 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v851 = *v26++;
                v689 |= v851;
              }
            }
            v690 = 2 * v688;
            v36 = v688 >= 0x40;
            v688 *= 2;
          }
          while (!v36);
        }
        else
        {
          v690 = v688;
        }
        v691 = ((v690 << 7) - 128) >> 8;
        v692 = (v691 + 1) << 8;
        v693 = v690 - (v691 + 1);
        if (v689 >= v692)
          v694 = (v691 + 1) << 8;
        else
          v694 = 0;
        if (v689 < v692)
          v695 = v691 + 1;
        else
          v695 = v693;
        v696 = v689 - v694;
        if (v695 <= 0x7F)
        {
          do
          {
            v696 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v852 = *v26++;
                v696 |= v852;
              }
            }
            v697 = 2 * v695;
            v36 = v695 >= 0x40;
            v695 *= 2;
          }
          while (!v36);
        }
        else
        {
          v697 = v695;
        }
        v698 = ((v697 << 7) - 128) >> 8;
        v699 = (v698 + 1) << 8;
        v700 = v697 - (v698 + 1);
        if (v696 >= v699)
          v701 = (v698 + 1) << 8;
        else
          v701 = 0;
        if (v696 < v699)
          v702 = v698 + 1;
        else
          v702 = v700;
        v703 = v696 - v701;
        if (v702 <= 0x7F)
        {
          do
          {
            v703 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v853 = *v26++;
                v703 |= v853;
              }
            }
            v704 = 2 * v702;
            v36 = v702 >= 0x40;
            v702 *= 2;
          }
          while (!v36);
        }
        else
        {
          v704 = v702;
        }
        v705 = ((v704 << 7) - 128) >> 8;
        v706 = (v705 + 1) << 8;
        v707 = v704 - (v705 + 1);
        if (v703 >= v706)
          v708 = (v705 + 1) << 8;
        else
          v708 = 0;
        if (v703 < v706)
          v709 = v705 + 1;
        else
          v709 = v707;
        v710 = v703 - v708;
        if (v709 <= 0x7F)
        {
          do
          {
            v710 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v854 = *v26++;
                v710 |= v854;
              }
            }
            v711 = 2 * v709;
            v36 = v709 >= 0x40;
            v709 *= 2;
          }
          while (!v36);
        }
        else
        {
          v711 = v709;
        }
        v712 = ((v711 << 7) - 128) >> 8;
        v713 = (v712 + 1) << 8;
        v714 = v711 - (v712 + 1);
        if (v710 >= v713)
          v715 = (v712 + 1) << 8;
        else
          v715 = 0;
        if (v710 < v713)
          v716 = v712 + 1;
        else
          v716 = v714;
        v717 = v710 - v715;
        if (v716 <= 0x7F)
        {
          do
          {
            v717 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v855 = *v26++;
                v717 |= v855;
              }
            }
            v718 = 2 * v716;
            v36 = v716 >= 0x40;
            v716 *= 2;
          }
          while (!v36);
        }
        else
        {
          v718 = v716;
        }
        v719 = ((v718 << 7) - 128) >> 8;
        v720 = (v719 + 1) << 8;
        v721 = v718 - (v719 + 1);
        if (v717 >= v720)
          v722 = (v719 + 1) << 8;
        else
          v722 = 0;
        if (v717 < v720)
          v723 = v719 + 1;
        else
          v723 = v721;
        v724 = v717 - v722;
        if (v723 <= 0x7F)
        {
          do
          {
            v724 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v856 = *v26++;
                v724 |= v856;
              }
            }
            v725 = 2 * v723;
            v36 = v723 >= 0x40;
            v723 *= 2;
          }
          while (!v36);
        }
        else
        {
          v725 = v723;
        }
        v726 = ((v725 << 7) - 128) >> 8;
        v727 = (v726 + 1) << 8;
        v728 = v725 - (v726 + 1);
        if (v724 >= v727)
          v729 = (v726 + 1) << 8;
        else
          v729 = 0;
        if (v724 < v727)
          v730 = v726 + 1;
        else
          v730 = v728;
        v731 = v724 - v729;
        if (v730 <= 0x7F)
        {
          do
          {
            v731 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v857 = *v26++;
                v731 |= v857;
              }
            }
            v732 = 2 * v730;
            v36 = v730 >= 0x40;
            v730 *= 2;
          }
          while (!v36);
        }
        else
        {
          v732 = v730;
        }
        v733 = ((v732 << 7) - 128) >> 8;
        v734 = (v733 + 1) << 8;
        v735 = v732 - (v733 + 1);
        if (v731 >= v734)
          v736 = (v733 + 1) << 8;
        else
          v736 = 0;
        if (v731 < v734)
          v737 = v733 + 1;
        else
          v737 = v735;
        v43 = v731 - v736;
        if (v737 <= 0x7F)
        {
          do
          {
            v43 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v858 = *v26++;
                v43 |= v858;
              }
            }
            v44 = 2 * v737;
            v36 = v737 >= 0x40;
            v737 *= 2;
          }
          while (!v36);
        }
        else
        {
          v44 = v737;
        }
      }
    }
    else
    {
      v43 = v57;
    }
  }
  v738 = ((v44 << 7) - 128) >> 8;
  v739 = (v738 + 1) << 8;
  v740 = v44 - (v738 + 1);
  if (v43 >= v739)
    v741 = (v738 + 1) << 8;
  else
    v741 = 0;
  if (v43 < v739)
    v742 = v738 + 1;
  else
    v742 = v740;
  v743 = v43 - v741;
  if (v742 <= 0x7F)
  {
    do
    {
      v743 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v820 = *v26++;
          v743 |= v820;
        }
      }
      v744 = 2 * v742;
      v36 = v742 >= 0x40;
      v742 *= 2;
    }
    while (!v36);
  }
  else
  {
    v744 = v742;
  }
  v745 = ((v744 << 7) - 128) >> 8;
  v746 = (v745 + 1) << 8;
  v747 = v744 - (v745 + 1);
  if (v743 >= v746)
    v748 = (v745 + 1) << 8;
  else
    v748 = 0;
  if (v743 < v746)
    v749 = v745 + 1;
  else
    v749 = v747;
  v750 = v743 - v748;
  if (v749 <= 0x7F)
  {
    do
    {
      v750 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v821 = *v26++;
          v750 |= v821;
        }
      }
      v751 = 2 * v749;
      v36 = v749 >= 0x40;
      v749 *= 2;
    }
    while (!v36);
  }
  else
  {
    v751 = v749;
  }
  v752 = ((v751 << 7) - 128) >> 8;
  v753 = (v752 + 1) << 8;
  v754 = v751 - (v752 + 1);
  if (v750 >= v753)
    v755 = (v752 + 1) << 8;
  else
    v755 = 0;
  if (v750 < v753)
    v756 = v752 + 1;
  else
    v756 = v754;
  v757 = v750 - v755;
  if (v756 <= 0x7F)
  {
    do
    {
      v757 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v822 = *v26++;
          v757 |= v822;
        }
      }
      v758 = 2 * v756;
      v36 = v756 >= 0x40;
      v756 *= 2;
    }
    while (!v36);
  }
  else
  {
    v758 = v756;
  }
  v759 = ((v758 << 7) - 128) >> 8;
  v760 = (v759 + 1) << 8;
  v761 = v758 - (v759 + 1);
  if (v757 >= v760)
    v762 = (v759 + 1) << 8;
  else
    v762 = 0;
  if (v757 < v760)
    v763 = v759 + 1;
  else
    v763 = v761;
  v764 = v757 - v762;
  if (v763 <= 0x7F)
  {
    do
    {
      v764 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v823 = *v26++;
          v764 |= v823;
        }
      }
      v765 = 2 * v763;
      v36 = v763 >= 0x40;
      v763 *= 2;
    }
    while (!v36);
  }
  else
  {
    v765 = v763;
  }
  v766 = ((v765 << 7) - 128) >> 8;
  v767 = (v766 + 1) << 8;
  v768 = v765 - (v766 + 1);
  if (v764 >= v767)
    v769 = (v766 + 1) << 8;
  else
    v769 = 0;
  if (v764 < v767)
    v770 = v766 + 1;
  else
    v770 = v768;
  v771 = v764 - v769;
  if (v770 <= 0x7F)
  {
    do
    {
      v771 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v824 = *v26++;
          v771 |= v824;
        }
      }
      v772 = 2 * v770;
      v36 = v770 >= 0x40;
      v770 *= 2;
    }
    while (!v36);
  }
  else
  {
    v772 = v770;
  }
  v773 = ((v772 << 7) - 128) >> 8;
  v774 = (v773 + 1) << 8;
  v775 = v772 - (v773 + 1);
  if (v771 >= v774)
    v776 = (v773 + 1) << 8;
  else
    v776 = 0;
  if (v771 < v774)
    v777 = v773 + 1;
  else
    v777 = v775;
  v778 = v771 - v776;
  if (v777 <= 0x7F)
  {
    do
    {
      v778 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v825 = *v26++;
          v778 |= v825;
        }
      }
      v779 = 2 * v777;
      v36 = v777 >= 0x40;
      v777 *= 2;
    }
    while (!v36);
  }
  else
  {
    v779 = v777;
  }
  v780 = ((v779 << 7) - 128) >> 8;
  v781 = (v780 + 1) << 8;
  v782 = v779 - (v780 + 1);
  if (v778 >= v781)
    v783 = (v780 + 1) << 8;
  else
    v783 = 0;
  if (v778 < v781)
    v784 = v780 + 1;
  else
    v784 = v782;
  v785 = v778 - v783;
  if (v784 <= 0x7F)
  {
    do
    {
      v785 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v826 = *v26++;
          v785 |= v826;
        }
      }
      v786 = 2 * v784;
      v36 = v784 >= 0x40;
      v784 *= 2;
    }
    while (!v36);
  }
  else
  {
    v786 = v784;
  }
  v787 = ((v786 << 7) - 128) >> 8;
  v788 = (v787 + 1) << 8;
  v789 = v786 - (v787 + 1);
  if (v785 >= v788)
    v790 = (v787 + 1) << 8;
  else
    v790 = 0;
  if (v785 < v788)
    v791 = v787 + 1;
  else
    v791 = v789;
  v792 = v785 - v790;
  if (v791 <= 0x7F)
  {
    do
    {
      v792 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v827 = *v26++;
          v792 |= v827;
        }
      }
      v793 = 2 * v791;
      v36 = v791 >= 0x40;
      v791 *= 2;
    }
    while (!v36);
  }
  else
  {
    v793 = v791;
  }
  v794 = ((v793 << 7) - 128) >> 8;
  v795 = (v794 + 1) << 8;
  v796 = v793 - (v794 + 1);
  if (v792 >= v795)
    v797 = (v794 + 1) << 8;
  else
    v797 = 0;
  if (v792 < v795)
    v798 = v794 + 1;
  else
    v798 = v796;
  v799 = v792 - v797;
  if (v798 <= 0x7F)
  {
    do
    {
      v799 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v828 = *v26++;
          v799 |= v828;
        }
      }
      v800 = 2 * v798;
      v36 = v798 >= 0x40;
      v798 *= 2;
    }
    while (!v36);
  }
  else
  {
    v800 = v798;
  }
  v801 = ((v800 << 7) - 128) >> 8;
  v802 = (v801 + 1) << 8;
  v803 = v800 - (v801 + 1);
  if (v799 >= v802)
    v804 = (v801 + 1) << 8;
  else
    v804 = 0;
  if (v799 < v802)
    v803 = v801 + 1;
  v805 = v799 - v804;
  if (v803 <= 0x7F)
  {
    do
    {
      v805 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v829 = *v26++;
          v805 |= v829;
        }
      }
      v806 = 2 * v803;
      v36 = v803 >= 0x40;
      v803 *= 2;
    }
    while (!v36);
  }
  else
  {
    v806 = v803;
  }
  v807 = ((v806 << 7) - 128) >> 8;
  v808 = (v807 + 1) << 8;
  v809 = v806 - (v807 + 1);
  if (v805 >= v808)
    v810 = (v807 + 1) << 8;
  else
    v810 = 0;
  if (v805 < v808)
    v811 = v807 + 1;
  else
    v811 = v809;
  v812 = v805 - v810;
  if (v811 <= 0x7F)
  {
    do
    {
      v812 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v830 = *v26++;
          v812 |= v830;
        }
      }
      v813 = 2 * v811;
      v36 = v811 >= 0x40;
      v811 *= 2;
    }
    while (!v36);
  }
  else
  {
    v813 = v811;
  }
  if (v805 >= v808)
  {
    v814 = ((v813 << 7) - 128) >> 8;
    v815 = (v814 + 1) << 8;
    v816 = v813 - (v814 + 1);
    if (v812 >= v815)
      v817 = (v814 + 1) << 8;
    else
      v817 = 0;
    if (v812 < v815)
      v818 = v814 + 1;
    else
      v818 = v816;
    v819 = v812 - v817;
    if (v818 <= 0x7F)
    {
      do
      {
        v819 *= 2;
        if (++v28 == 8)
        {
          v28 = 0;
          if (v26 == v24)
          {
            v26 = v24;
          }
          else
          {
            v831 = *v26++;
            v819 |= v831;
          }
        }
        v813 = 2 * v818;
        v36 = v818 >= 0x40;
        v818 *= 2;
      }
      while (!v36);
    }
    else
    {
      v813 = v818;
    }
    if (v812 >= v815)
    {
      v859 = ((v813 << 7) - 128) >> 8;
      v860 = (v859 + 1) << 8;
      v861 = v813 - (v859 + 1);
      if (v819 >= v860)
        v862 = (v859 + 1) << 8;
      else
        v862 = 0;
      if (v819 < v860)
        v861 = v859 + 1;
      v863 = v819 - v862;
      if (v861 <= 0x7F)
      {
        do
        {
          v863 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v1334 = *v26++;
              v863 |= v1334;
            }
          }
          v864 = 2 * v861;
          v36 = v861 >= 0x40;
          v861 *= 2;
        }
        while (!v36);
      }
      else
      {
        v864 = v861;
      }
      if (v819 >= v860)
      {
        v865 = ((v864 << 7) - 128) >> 8;
        v866 = (v865 + 1) << 8;
        if (v863 >= v866)
        {
          v867 = v864 - (v865 + 1);
        }
        else
        {
          v866 = 0;
          v867 = v865 + 1;
        }
        v868 = v863 - v866;
        if (v867 <= 0x7F)
        {
          do
          {
            v868 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1342 = *v26++;
                v868 |= v1342;
              }
            }
            v869 = 2 * v867;
            v36 = v867 >= 0x40;
            v867 *= 2;
          }
          while (!v36);
        }
        else
        {
          v869 = v867;
        }
        v870 = ((v869 << 7) - 128) >> 8;
        v871 = (v870 + 1) << 8;
        v872 = v869 - (v870 + 1);
        if (v868 >= v871)
          v873 = (v870 + 1) << 8;
        else
          v873 = 0;
        if (v868 < v871)
          v874 = v870 + 1;
        else
          v874 = v872;
        v875 = v868 - v873;
        if (v874 <= 0x7F)
        {
          do
          {
            v875 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1343 = *v26++;
                v875 |= v1343;
              }
            }
            v876 = 2 * v874;
            v36 = v874 >= 0x40;
            v874 *= 2;
          }
          while (!v36);
        }
        else
        {
          v876 = v874;
        }
        v877 = ((v876 << 7) - 128) >> 8;
        v878 = (v877 + 1) << 8;
        v879 = v876 - (v877 + 1);
        if (v875 >= v878)
          v880 = (v877 + 1) << 8;
        else
          v880 = 0;
        if (v875 < v878)
          v881 = v877 + 1;
        else
          v881 = v879;
        v882 = v875 - v880;
        if (v881 <= 0x7F)
        {
          do
          {
            v882 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1344 = *v26++;
                v882 |= v1344;
              }
            }
            v883 = 2 * v881;
            v36 = v881 >= 0x40;
            v881 *= 2;
          }
          while (!v36);
        }
        else
        {
          v883 = v881;
        }
        v884 = ((v883 << 7) - 128) >> 8;
        v885 = (v884 + 1) << 8;
        v886 = v883 - (v884 + 1);
        if (v882 >= v885)
          v887 = (v884 + 1) << 8;
        else
          v887 = 0;
        if (v882 < v885)
          v888 = v884 + 1;
        else
          v888 = v886;
        v889 = v882 - v887;
        if (v888 <= 0x7F)
        {
          do
          {
            v889 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1345 = *v26++;
                v889 |= v1345;
              }
            }
            v890 = 2 * v888;
            v36 = v888 >= 0x40;
            v888 *= 2;
          }
          while (!v36);
        }
        else
        {
          v890 = v888;
        }
        v891 = ((v890 << 7) - 128) >> 8;
        v892 = (v891 + 1) << 8;
        v893 = v890 - (v891 + 1);
        if (v889 >= v892)
          v894 = (v891 + 1) << 8;
        else
          v894 = 0;
        if (v889 < v892)
          v895 = v891 + 1;
        else
          v895 = v893;
        v896 = v889 - v894;
        if (v895 <= 0x7F)
        {
          do
          {
            v896 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1346 = *v26++;
                v896 |= v1346;
              }
            }
            v897 = 2 * v895;
            v36 = v895 >= 0x40;
            v895 *= 2;
          }
          while (!v36);
        }
        else
        {
          v897 = v895;
        }
        v898 = ((v897 << 7) - 128) >> 8;
        v899 = (v898 + 1) << 8;
        v900 = v897 - (v898 + 1);
        if (v896 >= v899)
          v901 = (v898 + 1) << 8;
        else
          v901 = 0;
        if (v896 < v899)
          v902 = v898 + 1;
        else
          v902 = v900;
        v903 = v896 - v901;
        if (v902 <= 0x7F)
        {
          do
          {
            v903 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1347 = *v26++;
                v903 |= v1347;
              }
            }
            v904 = 2 * v902;
            v36 = v902 >= 0x40;
            v902 *= 2;
          }
          while (!v36);
        }
        else
        {
          v904 = v902;
        }
        v905 = ((v904 << 7) - 128) >> 8;
        v906 = (v905 + 1) << 8;
        v907 = v904 - (v905 + 1);
        if (v903 >= v906)
          v908 = (v905 + 1) << 8;
        else
          v908 = 0;
        if (v903 < v906)
          v909 = v905 + 1;
        else
          v909 = v907;
        v863 = v903 - v908;
        if (v909 <= 0x7F)
        {
          do
          {
            v863 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1348 = *v26++;
                v863 |= v1348;
              }
            }
            v864 = 2 * v909;
            v36 = v909 >= 0x40;
            v909 *= 2;
          }
          while (!v36);
        }
        else
        {
          v864 = v909;
        }
      }
      v910 = ((v864 << 7) - 128) >> 8;
      v911 = (v910 + 1) << 8;
      v912 = v864 - (v910 + 1);
      if (v863 >= v911)
        v913 = (v910 + 1) << 8;
      else
        v913 = 0;
      if (v863 < v911)
        v912 = v910 + 1;
      v914 = v863 - v913;
      if (v912 <= 0x7F)
      {
        do
        {
          v914 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v1335 = *v26++;
              v914 |= v1335;
            }
          }
          v915 = 2 * v912;
          v36 = v912 >= 0x40;
          v912 *= 2;
        }
        while (!v36);
      }
      else
      {
        v915 = v912;
      }
      if (v863 >= v911)
      {
        v916 = ((v915 << 7) - 128) >> 8;
        v917 = (v916 + 1) << 8;
        v918 = v915 - (v916 + 1);
        if (v914 < v917)
        {
          v917 = 0;
          v918 = v916 + 1;
        }
        v919 = v914 - v917;
        if (v918 <= 0x7F)
        {
          do
          {
            v919 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1349 = *v26++;
                v919 |= v1349;
              }
            }
            v920 = 2 * v918;
            v36 = v918 >= 0x40;
            v918 *= 2;
          }
          while (!v36);
        }
        else
        {
          v920 = v918;
        }
        v921 = ((v920 << 7) - 128) >> 8;
        v922 = (v921 + 1) << 8;
        v923 = v920 - (v921 + 1);
        if (v919 >= v922)
          v924 = (v921 + 1) << 8;
        else
          v924 = 0;
        if (v919 < v922)
          v923 = v921 + 1;
        v925 = v919 - v924;
        if (v923 <= 0x7F)
        {
          do
          {
            v925 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1350 = *v26++;
                v925 |= v1350;
              }
            }
            v926 = 2 * v923;
            v36 = v923 >= 0x40;
            v923 *= 2;
          }
          while (!v36);
        }
        else
        {
          v926 = v923;
        }
        v927 = ((v926 << 7) - 128) >> 8;
        v928 = (v927 + 1) << 8;
        v929 = v926 - (v927 + 1);
        if (v925 >= v928)
          v930 = (v927 + 1) << 8;
        else
          v930 = 0;
        if (v925 < v928)
          v931 = v927 + 1;
        else
          v931 = v929;
        v932 = v925 - v930;
        if (v931 <= 0x7F)
        {
          do
          {
            v932 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1351 = *v26++;
                v932 |= v1351;
              }
            }
            v933 = 2 * v931;
            v36 = v931 >= 0x40;
            v931 *= 2;
          }
          while (!v36);
        }
        else
        {
          v933 = v931;
        }
        v934 = ((v933 << 7) - 128) >> 8;
        v935 = (v934 + 1) << 8;
        v936 = v933 - (v934 + 1);
        if (v932 >= v935)
          v937 = (v934 + 1) << 8;
        else
          v937 = 0;
        if (v932 < v935)
          v938 = v934 + 1;
        else
          v938 = v936;
        v939 = v932 - v937;
        if (v938 <= 0x7F)
        {
          do
          {
            v939 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1352 = *v26++;
                v939 |= v1352;
              }
            }
            v940 = 2 * v938;
            v36 = v938 >= 0x40;
            v938 *= 2;
          }
          while (!v36);
        }
        else
        {
          v940 = v938;
        }
        v941 = ((v940 << 7) - 128) >> 8;
        v942 = (v941 + 1) << 8;
        v943 = v940 - (v941 + 1);
        if (v939 >= v942)
          v944 = (v941 + 1) << 8;
        else
          v944 = 0;
        if (v939 < v942)
          v945 = v941 + 1;
        else
          v945 = v943;
        v946 = v939 - v944;
        if (v945 <= 0x7F)
        {
          do
          {
            v946 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1353 = *v26++;
                v946 |= v1353;
              }
            }
            v947 = 2 * v945;
            v36 = v945 >= 0x40;
            v945 *= 2;
          }
          while (!v36);
        }
        else
        {
          v947 = v945;
        }
        v948 = ((v947 << 7) - 128) >> 8;
        v949 = (v948 + 1) << 8;
        v950 = v947 - (v948 + 1);
        if (v946 >= v949)
          v951 = (v948 + 1) << 8;
        else
          v951 = 0;
        if (v946 < v949)
          v952 = v948 + 1;
        else
          v952 = v950;
        v953 = v946 - v951;
        if (v952 <= 0x7F)
        {
          do
          {
            v953 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1354 = *v26++;
                v953 |= v1354;
              }
            }
            v954 = 2 * v952;
            v36 = v952 >= 0x40;
            v952 *= 2;
          }
          while (!v36);
        }
        else
        {
          v954 = v952;
        }
        v955 = ((v954 << 7) - 128) >> 8;
        v956 = (v955 + 1) << 8;
        v957 = v954 - (v955 + 1);
        if (v953 >= v956)
          v958 = (v955 + 1) << 8;
        else
          v958 = 0;
        if (v953 < v956)
          v957 = v955 + 1;
        v914 = v953 - v958;
        if (v957 <= 0x7F)
        {
          do
          {
            v914 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1355 = *v26++;
                v914 |= v1355;
              }
            }
            v915 = 2 * v957;
            v36 = v957 >= 0x40;
            v957 *= 2;
          }
          while (!v36);
        }
        else
        {
          v915 = v957;
        }
      }
      v959 = ((v915 << 7) - 128) >> 8;
      v960 = (v959 + 1) << 8;
      v961 = v915 - (v959 + 1);
      if (v914 >= v960)
        v962 = (v959 + 1) << 8;
      else
        v962 = 0;
      if (v914 < v960)
        v961 = v959 + 1;
      v963 = v914 - v962;
      if (v961 <= 0x7F)
      {
        do
        {
          v963 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v1336 = *v26++;
              v963 |= v1336;
            }
          }
          v964 = 2 * v961;
          v36 = v961 >= 0x40;
          v961 *= 2;
        }
        while (!v36);
      }
      else
      {
        v964 = v961;
      }
      if (v914 >= v960)
      {
        v965 = ((v964 << 7) - 128) >> 8;
        v966 = (v965 + 1) << 8;
        if (v963 >= v966)
        {
          v967 = v964 - (v965 + 1);
        }
        else
        {
          v966 = 0;
          v967 = v965 + 1;
        }
        v968 = v963 - v966;
        if (v967 <= 0x7F)
        {
          do
          {
            v968 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1356 = *v26++;
                v968 |= v1356;
              }
            }
            v969 = 2 * v967;
            v36 = v967 >= 0x40;
            v967 *= 2;
          }
          while (!v36);
        }
        else
        {
          v969 = v967;
        }
        v970 = ((v969 << 7) - 128) >> 8;
        v971 = (v970 + 1) << 8;
        v972 = v969 - (v970 + 1);
        if (v968 >= v971)
          v973 = (v970 + 1) << 8;
        else
          v973 = 0;
        if (v968 < v971)
          v974 = v970 + 1;
        else
          v974 = v972;
        v975 = v968 - v973;
        if (v974 <= 0x7F)
        {
          do
          {
            v975 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1357 = *v26++;
                v975 |= v1357;
              }
            }
            v976 = 2 * v974;
            v36 = v974 >= 0x40;
            v974 *= 2;
          }
          while (!v36);
        }
        else
        {
          v976 = v974;
        }
        v977 = ((v976 << 7) - 128) >> 8;
        v978 = (v977 + 1) << 8;
        v979 = v976 - (v977 + 1);
        if (v975 >= v978)
          v980 = (v977 + 1) << 8;
        else
          v980 = 0;
        if (v975 < v978)
          v981 = v977 + 1;
        else
          v981 = v979;
        v982 = v975 - v980;
        if (v981 <= 0x7F)
        {
          do
          {
            v982 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1358 = *v26++;
                v982 |= v1358;
              }
            }
            v983 = 2 * v981;
            v36 = v981 >= 0x40;
            v981 *= 2;
          }
          while (!v36);
        }
        else
        {
          v983 = v981;
        }
        v984 = ((v983 << 7) - 128) >> 8;
        v985 = (v984 + 1) << 8;
        v986 = v983 - (v984 + 1);
        if (v982 >= v985)
          v987 = (v984 + 1) << 8;
        else
          v987 = 0;
        if (v982 < v985)
          v988 = v984 + 1;
        else
          v988 = v986;
        v989 = v982 - v987;
        if (v988 <= 0x7F)
        {
          do
          {
            v989 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1359 = *v26++;
                v989 |= v1359;
              }
            }
            v990 = 2 * v988;
            v36 = v988 >= 0x40;
            v988 *= 2;
          }
          while (!v36);
        }
        else
        {
          v990 = v988;
        }
        v991 = ((v990 << 7) - 128) >> 8;
        v992 = (v991 + 1) << 8;
        v993 = v990 - (v991 + 1);
        if (v989 >= v992)
          v994 = (v991 + 1) << 8;
        else
          v994 = 0;
        if (v989 < v992)
          v995 = v991 + 1;
        else
          v995 = v993;
        v996 = v989 - v994;
        if (v995 <= 0x7F)
        {
          do
          {
            v996 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1360 = *v26++;
                v996 |= v1360;
              }
            }
            v997 = 2 * v995;
            v36 = v995 >= 0x40;
            v995 *= 2;
          }
          while (!v36);
        }
        else
        {
          v997 = v995;
        }
        v998 = ((v997 << 7) - 128) >> 8;
        v999 = (v998 + 1) << 8;
        v1000 = v997 - (v998 + 1);
        if (v996 >= v999)
          v1001 = (v998 + 1) << 8;
        else
          v1001 = 0;
        if (v996 < v999)
          v1002 = v998 + 1;
        else
          v1002 = v1000;
        v1003 = v996 - v1001;
        if (v1002 <= 0x7F)
        {
          do
          {
            v1003 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1361 = *v26++;
                v1003 |= v1361;
              }
            }
            v1004 = 2 * v1002;
            v36 = v1002 >= 0x40;
            v1002 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1004 = v1002;
        }
        v1005 = ((v1004 << 7) - 128) >> 8;
        v1006 = (v1005 + 1) << 8;
        v1007 = v1004 - (v1005 + 1);
        if (v1003 >= v1006)
          v1008 = (v1005 + 1) << 8;
        else
          v1008 = 0;
        if (v1003 < v1006)
          v1009 = v1005 + 1;
        else
          v1009 = v1007;
        v963 = v1003 - v1008;
        if (v1009 <= 0x7F)
        {
          do
          {
            v963 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1362 = *v26++;
                v963 |= v1362;
              }
            }
            v964 = 2 * v1009;
            v36 = v1009 >= 0x40;
            v1009 *= 2;
          }
          while (!v36);
        }
        else
        {
          v964 = v1009;
        }
      }
      v1010 = ((v964 << 7) - 128) >> 8;
      v1011 = (v1010 + 1) << 8;
      v1012 = v964 - (v1010 + 1);
      if (v963 >= v1011)
        v1013 = (v1010 + 1) << 8;
      else
        v1013 = 0;
      if (v963 < v1011)
        v1012 = v1010 + 1;
      v1014 = v963 - v1013;
      if (v1012 <= 0x7F)
      {
        do
        {
          v1014 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v1337 = *v26++;
              v1014 |= v1337;
            }
          }
          v1015 = 2 * v1012;
          v36 = v1012 >= 0x40;
          v1012 *= 2;
        }
        while (!v36);
      }
      else
      {
        v1015 = v1012;
      }
      if (v963 >= v1011)
      {
        v1016 = ((v1015 << 7) - 128) >> 8;
        v1017 = (v1016 + 1) << 8;
        v1018 = v1015 - (v1016 + 1);
        if (v1014 < v1017)
        {
          v1017 = 0;
          v1018 = v1016 + 1;
        }
        v1019 = v1014 - v1017;
        if (v1018 <= 0x7F)
        {
          do
          {
            v1019 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1363 = *v26++;
                v1019 |= v1363;
              }
            }
            v1020 = 2 * v1018;
            v36 = v1018 >= 0x40;
            v1018 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1020 = v1018;
        }
        v1021 = ((v1020 << 7) - 128) >> 8;
        v1022 = (v1021 + 1) << 8;
        v1023 = v1020 - (v1021 + 1);
        if (v1019 >= v1022)
          v1024 = (v1021 + 1) << 8;
        else
          v1024 = 0;
        if (v1019 < v1022)
          v1023 = v1021 + 1;
        v1025 = v1019 - v1024;
        if (v1023 <= 0x7F)
        {
          do
          {
            v1025 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1364 = *v26++;
                v1025 |= v1364;
              }
            }
            v1026 = 2 * v1023;
            v36 = v1023 >= 0x40;
            v1023 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1026 = v1023;
        }
        v1027 = ((v1026 << 7) - 128) >> 8;
        v1028 = (v1027 + 1) << 8;
        v1029 = v1026 - (v1027 + 1);
        if (v1025 >= v1028)
          v1030 = (v1027 + 1) << 8;
        else
          v1030 = 0;
        if (v1025 < v1028)
          v1031 = v1027 + 1;
        else
          v1031 = v1029;
        v1032 = v1025 - v1030;
        if (v1031 <= 0x7F)
        {
          do
          {
            v1032 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1365 = *v26++;
                v1032 |= v1365;
              }
            }
            v1033 = 2 * v1031;
            v36 = v1031 >= 0x40;
            v1031 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1033 = v1031;
        }
        v1034 = ((v1033 << 7) - 128) >> 8;
        v1035 = (v1034 + 1) << 8;
        v1036 = v1033 - (v1034 + 1);
        if (v1032 >= v1035)
          v1037 = (v1034 + 1) << 8;
        else
          v1037 = 0;
        if (v1032 < v1035)
          v1038 = v1034 + 1;
        else
          v1038 = v1036;
        v1039 = v1032 - v1037;
        if (v1038 <= 0x7F)
        {
          do
          {
            v1039 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1366 = *v26++;
                v1039 |= v1366;
              }
            }
            v1040 = 2 * v1038;
            v36 = v1038 >= 0x40;
            v1038 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1040 = v1038;
        }
        v1041 = ((v1040 << 7) - 128) >> 8;
        v1042 = (v1041 + 1) << 8;
        v1043 = v1040 - (v1041 + 1);
        if (v1039 >= v1042)
          v1044 = (v1041 + 1) << 8;
        else
          v1044 = 0;
        if (v1039 < v1042)
          v1045 = v1041 + 1;
        else
          v1045 = v1043;
        v1046 = v1039 - v1044;
        if (v1045 <= 0x7F)
        {
          do
          {
            v1046 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1367 = *v26++;
                v1046 |= v1367;
              }
            }
            v1047 = 2 * v1045;
            v36 = v1045 >= 0x40;
            v1045 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1047 = v1045;
        }
        v1048 = ((v1047 << 7) - 128) >> 8;
        v1049 = (v1048 + 1) << 8;
        v1050 = v1047 - (v1048 + 1);
        if (v1046 >= v1049)
          v1051 = (v1048 + 1) << 8;
        else
          v1051 = 0;
        if (v1046 < v1049)
          v1052 = v1048 + 1;
        else
          v1052 = v1050;
        v1053 = v1046 - v1051;
        if (v1052 <= 0x7F)
        {
          do
          {
            v1053 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1368 = *v26++;
                v1053 |= v1368;
              }
            }
            v1054 = 2 * v1052;
            v36 = v1052 >= 0x40;
            v1052 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1054 = v1052;
        }
        v1055 = ((v1054 << 7) - 128) >> 8;
        v1056 = (v1055 + 1) << 8;
        v1057 = v1054 - (v1055 + 1);
        if (v1053 >= v1056)
          v1058 = (v1055 + 1) << 8;
        else
          v1058 = 0;
        if (v1053 < v1056)
          v1057 = v1055 + 1;
        v1014 = v1053 - v1058;
        if (v1057 <= 0x7F)
        {
          do
          {
            v1014 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1369 = *v26++;
                v1014 |= v1369;
              }
            }
            v1015 = 2 * v1057;
            v36 = v1057 >= 0x40;
            v1057 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1015 = v1057;
        }
      }
      v1059 = ((v1015 << 7) - 128) >> 8;
      v1060 = (v1059 + 1) << 8;
      v1061 = v1015 - (v1059 + 1);
      if (v1014 >= v1060)
        v1062 = (v1059 + 1) << 8;
      else
        v1062 = 0;
      if (v1014 < v1060)
        v1061 = v1059 + 1;
      v1063 = v1014 - v1062;
      if (v1061 <= 0x7F)
      {
        do
        {
          v1063 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v1338 = *v26++;
              v1063 |= v1338;
            }
          }
          v1064 = 2 * v1061;
          v36 = v1061 >= 0x40;
          v1061 *= 2;
        }
        while (!v36);
      }
      else
      {
        v1064 = v1061;
      }
      if (v1014 >= v1060)
      {
        v1065 = ((v1064 << 7) - 128) >> 8;
        v1066 = (v1065 + 1) << 8;
        if (v1063 >= v1066)
        {
          v1067 = v1064 - (v1065 + 1);
        }
        else
        {
          v1066 = 0;
          v1067 = v1065 + 1;
        }
        v1068 = v1063 - v1066;
        if (v1067 <= 0x7F)
        {
          do
          {
            v1068 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1370 = *v26++;
                v1068 |= v1370;
              }
            }
            v1069 = 2 * v1067;
            v36 = v1067 >= 0x40;
            v1067 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1069 = v1067;
        }
        v1070 = ((v1069 << 7) - 128) >> 8;
        v1071 = (v1070 + 1) << 8;
        v1072 = v1069 - (v1070 + 1);
        if (v1068 >= v1071)
          v1073 = (v1070 + 1) << 8;
        else
          v1073 = 0;
        if (v1068 < v1071)
          v1074 = v1070 + 1;
        else
          v1074 = v1072;
        v1075 = v1068 - v1073;
        if (v1074 <= 0x7F)
        {
          do
          {
            v1075 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1371 = *v26++;
                v1075 |= v1371;
              }
            }
            v1076 = 2 * v1074;
            v36 = v1074 >= 0x40;
            v1074 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1076 = v1074;
        }
        v1077 = ((v1076 << 7) - 128) >> 8;
        v1078 = (v1077 + 1) << 8;
        v1079 = v1076 - (v1077 + 1);
        if (v1075 >= v1078)
          v1080 = (v1077 + 1) << 8;
        else
          v1080 = 0;
        if (v1075 < v1078)
          v1081 = v1077 + 1;
        else
          v1081 = v1079;
        v1082 = v1075 - v1080;
        if (v1081 <= 0x7F)
        {
          do
          {
            v1082 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1372 = *v26++;
                v1082 |= v1372;
              }
            }
            v1083 = 2 * v1081;
            v36 = v1081 >= 0x40;
            v1081 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1083 = v1081;
        }
        v1084 = ((v1083 << 7) - 128) >> 8;
        v1085 = (v1084 + 1) << 8;
        v1086 = v1083 - (v1084 + 1);
        if (v1082 >= v1085)
          v1087 = (v1084 + 1) << 8;
        else
          v1087 = 0;
        if (v1082 < v1085)
          v1088 = v1084 + 1;
        else
          v1088 = v1086;
        v1089 = v1082 - v1087;
        if (v1088 <= 0x7F)
        {
          do
          {
            v1089 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1373 = *v26++;
                v1089 |= v1373;
              }
            }
            v1090 = 2 * v1088;
            v36 = v1088 >= 0x40;
            v1088 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1090 = v1088;
        }
        v1091 = ((v1090 << 7) - 128) >> 8;
        v1092 = (v1091 + 1) << 8;
        v1093 = v1090 - (v1091 + 1);
        if (v1089 >= v1092)
          v1094 = (v1091 + 1) << 8;
        else
          v1094 = 0;
        if (v1089 < v1092)
          v1095 = v1091 + 1;
        else
          v1095 = v1093;
        v1096 = v1089 - v1094;
        if (v1095 <= 0x7F)
        {
          do
          {
            v1096 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1374 = *v26++;
                v1096 |= v1374;
              }
            }
            v1097 = 2 * v1095;
            v36 = v1095 >= 0x40;
            v1095 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1097 = v1095;
        }
        v1098 = ((v1097 << 7) - 128) >> 8;
        v1099 = (v1098 + 1) << 8;
        v1100 = v1097 - (v1098 + 1);
        if (v1096 >= v1099)
          v1101 = (v1098 + 1) << 8;
        else
          v1101 = 0;
        if (v1096 < v1099)
          v1102 = v1098 + 1;
        else
          v1102 = v1100;
        v1103 = v1096 - v1101;
        if (v1102 <= 0x7F)
        {
          do
          {
            v1103 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1375 = *v26++;
                v1103 |= v1375;
              }
            }
            v1104 = 2 * v1102;
            v36 = v1102 >= 0x40;
            v1102 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1104 = v1102;
        }
        v1105 = ((v1104 << 7) - 128) >> 8;
        v1106 = (v1105 + 1) << 8;
        v1107 = v1104 - (v1105 + 1);
        if (v1103 >= v1106)
          v1108 = (v1105 + 1) << 8;
        else
          v1108 = 0;
        if (v1103 < v1106)
          v1109 = v1105 + 1;
        else
          v1109 = v1107;
        v1063 = v1103 - v1108;
        if (v1109 <= 0x7F)
        {
          do
          {
            v1063 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1376 = *v26++;
                v1063 |= v1376;
              }
            }
            v1064 = 2 * v1109;
            v36 = v1109 >= 0x40;
            v1109 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1064 = v1109;
        }
      }
      v1110 = ((v1064 << 7) - 128) >> 8;
      v1111 = (v1110 + 1) << 8;
      v1112 = v1064 - (v1110 + 1);
      if (v1063 >= v1111)
        v1113 = (v1110 + 1) << 8;
      else
        v1113 = 0;
      if (v1063 < v1111)
        v1112 = v1110 + 1;
      v1114 = v1063 - v1113;
      if (v1112 <= 0x7F)
      {
        do
        {
          v1114 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v1339 = *v26++;
              v1114 |= v1339;
            }
          }
          v1115 = 2 * v1112;
          v36 = v1112 >= 0x40;
          v1112 *= 2;
        }
        while (!v36);
      }
      else
      {
        v1115 = v1112;
      }
      if (v1063 >= v1111)
      {
        v1116 = ((v1115 << 7) - 128) >> 8;
        v1117 = (v1116 + 1) << 8;
        v1118 = v1115 - (v1116 + 1);
        if (v1114 < v1117)
        {
          v1117 = 0;
          v1118 = v1116 + 1;
        }
        v1119 = v1114 - v1117;
        if (v1118 <= 0x7F)
        {
          do
          {
            v1119 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1377 = *v26++;
                v1119 |= v1377;
              }
            }
            v1120 = 2 * v1118;
            v36 = v1118 >= 0x40;
            v1118 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1120 = v1118;
        }
        v1121 = ((v1120 << 7) - 128) >> 8;
        v1122 = (v1121 + 1) << 8;
        v1123 = v1120 - (v1121 + 1);
        if (v1119 >= v1122)
          v1124 = (v1121 + 1) << 8;
        else
          v1124 = 0;
        if (v1119 < v1122)
          v1123 = v1121 + 1;
        v1125 = v1119 - v1124;
        if (v1123 <= 0x7F)
        {
          do
          {
            v1125 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1378 = *v26++;
                v1125 |= v1378;
              }
            }
            v1126 = 2 * v1123;
            v36 = v1123 >= 0x40;
            v1123 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1126 = v1123;
        }
        v1127 = ((v1126 << 7) - 128) >> 8;
        v1128 = (v1127 + 1) << 8;
        v1129 = v1126 - (v1127 + 1);
        if (v1125 >= v1128)
          v1130 = (v1127 + 1) << 8;
        else
          v1130 = 0;
        if (v1125 < v1128)
          v1131 = v1127 + 1;
        else
          v1131 = v1129;
        v1132 = v1125 - v1130;
        if (v1131 <= 0x7F)
        {
          do
          {
            v1132 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1379 = *v26++;
                v1132 |= v1379;
              }
            }
            v1133 = 2 * v1131;
            v36 = v1131 >= 0x40;
            v1131 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1133 = v1131;
        }
        v1134 = ((v1133 << 7) - 128) >> 8;
        v1135 = (v1134 + 1) << 8;
        v1136 = v1133 - (v1134 + 1);
        if (v1132 >= v1135)
          v1137 = (v1134 + 1) << 8;
        else
          v1137 = 0;
        if (v1132 < v1135)
          v1138 = v1134 + 1;
        else
          v1138 = v1136;
        v1139 = v1132 - v1137;
        if (v1138 <= 0x7F)
        {
          do
          {
            v1139 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1380 = *v26++;
                v1139 |= v1380;
              }
            }
            v1140 = 2 * v1138;
            v36 = v1138 >= 0x40;
            v1138 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1140 = v1138;
        }
        v1141 = ((v1140 << 7) - 128) >> 8;
        v1142 = (v1141 + 1) << 8;
        v1143 = v1140 - (v1141 + 1);
        if (v1139 >= v1142)
          v1144 = (v1141 + 1) << 8;
        else
          v1144 = 0;
        if (v1139 < v1142)
          v1145 = v1141 + 1;
        else
          v1145 = v1143;
        v1146 = v1139 - v1144;
        if (v1145 <= 0x7F)
        {
          do
          {
            v1146 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1381 = *v26++;
                v1146 |= v1381;
              }
            }
            v1147 = 2 * v1145;
            v36 = v1145 >= 0x40;
            v1145 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1147 = v1145;
        }
        v1148 = ((v1147 << 7) - 128) >> 8;
        v1149 = (v1148 + 1) << 8;
        v1150 = v1147 - (v1148 + 1);
        if (v1146 >= v1149)
          v1151 = (v1148 + 1) << 8;
        else
          v1151 = 0;
        if (v1146 < v1149)
          v1152 = v1148 + 1;
        else
          v1152 = v1150;
        v1153 = v1146 - v1151;
        if (v1152 <= 0x7F)
        {
          do
          {
            v1153 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1382 = *v26++;
                v1153 |= v1382;
              }
            }
            v1154 = 2 * v1152;
            v36 = v1152 >= 0x40;
            v1152 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1154 = v1152;
        }
        v1155 = ((v1154 << 7) - 128) >> 8;
        v1156 = (v1155 + 1) << 8;
        v1157 = v1154 - (v1155 + 1);
        if (v1153 >= v1156)
          v1158 = (v1155 + 1) << 8;
        else
          v1158 = 0;
        if (v1153 < v1156)
          v1157 = v1155 + 1;
        v1114 = v1153 - v1158;
        if (v1157 <= 0x7F)
        {
          do
          {
            v1114 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1383 = *v26++;
                v1114 |= v1383;
              }
            }
            v1115 = 2 * v1157;
            v36 = v1157 >= 0x40;
            v1157 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1115 = v1157;
        }
      }
      v1159 = ((v1115 << 7) - 128) >> 8;
      v1160 = (v1159 + 1) << 8;
      v1161 = v1115 - (v1159 + 1);
      if (v1114 >= v1160)
        v1162 = (v1159 + 1) << 8;
      else
        v1162 = 0;
      if (v1114 < v1160)
        v1161 = v1159 + 1;
      v1163 = v1114 - v1162;
      if (v1161 <= 0x7F)
      {
        do
        {
          v1163 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v1340 = *v26++;
              v1163 |= v1340;
            }
          }
          v1164 = 2 * v1161;
          v36 = v1161 >= 0x40;
          v1161 *= 2;
        }
        while (!v36);
      }
      else
      {
        v1164 = v1161;
      }
      if (v1114 >= v1160)
      {
        v1165 = ((v1164 << 7) - 128) >> 8;
        v1166 = (v1165 + 1) << 8;
        v1167 = v1164 - (v1165 + 1);
        if (v1163 < v1166)
        {
          v1166 = 0;
          v1167 = v1165 + 1;
        }
        v1168 = v1163 - v1166;
        if (v1167 <= 0x7F)
        {
          do
          {
            v1168 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1384 = *v26++;
                v1168 |= v1384;
              }
            }
            v1169 = 2 * v1167;
            v36 = v1167 >= 0x40;
            v1167 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1169 = v1167;
        }
        v1170 = ((v1169 << 7) - 128) >> 8;
        v1171 = (v1170 + 1) << 8;
        v1172 = v1169 - (v1170 + 1);
        if (v1168 >= v1171)
          v1173 = (v1170 + 1) << 8;
        else
          v1173 = 0;
        if (v1168 < v1171)
          v1174 = v1170 + 1;
        else
          v1174 = v1172;
        v1175 = v1168 - v1173;
        if (v1174 <= 0x7F)
        {
          do
          {
            v1175 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1385 = *v26++;
                v1175 |= v1385;
              }
            }
            v1176 = 2 * v1174;
            v36 = v1174 >= 0x40;
            v1174 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1176 = v1174;
        }
        v1177 = ((v1176 << 7) - 128) >> 8;
        v1178 = (v1177 + 1) << 8;
        v1179 = v1176 - (v1177 + 1);
        if (v1175 >= v1178)
          v1180 = (v1177 + 1) << 8;
        else
          v1180 = 0;
        if (v1175 < v1178)
          v1181 = v1177 + 1;
        else
          v1181 = v1179;
        v1182 = v1175 - v1180;
        if (v1181 <= 0x7F)
        {
          do
          {
            v1182 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1386 = *v26++;
                v1182 |= v1386;
              }
            }
            v1183 = 2 * v1181;
            v36 = v1181 >= 0x40;
            v1181 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1183 = v1181;
        }
        v1184 = ((v1183 << 7) - 128) >> 8;
        v1185 = (v1184 + 1) << 8;
        v1186 = v1183 - (v1184 + 1);
        if (v1182 >= v1185)
          v1187 = (v1184 + 1) << 8;
        else
          v1187 = 0;
        if (v1182 < v1185)
          v1188 = v1184 + 1;
        else
          v1188 = v1186;
        v1189 = v1182 - v1187;
        if (v1188 <= 0x7F)
        {
          do
          {
            v1189 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1387 = *v26++;
                v1189 |= v1387;
              }
            }
            v1190 = 2 * v1188;
            v36 = v1188 >= 0x40;
            v1188 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1190 = v1188;
        }
        v1191 = ((v1190 << 7) - 128) >> 8;
        v1192 = (v1191 + 1) << 8;
        v1193 = v1190 - (v1191 + 1);
        if (v1189 >= v1192)
          v1194 = (v1191 + 1) << 8;
        else
          v1194 = 0;
        if (v1189 < v1192)
          v1195 = v1191 + 1;
        else
          v1195 = v1193;
        v1196 = v1189 - v1194;
        if (v1195 <= 0x7F)
        {
          do
          {
            v1196 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1388 = *v26++;
                v1196 |= v1388;
              }
            }
            v1197 = 2 * v1195;
            v36 = v1195 >= 0x40;
            v1195 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1197 = v1195;
        }
        v1198 = ((v1197 << 7) - 128) >> 8;
        v1199 = (v1198 + 1) << 8;
        v1200 = v1197 - (v1198 + 1);
        if (v1196 >= v1199)
          v1201 = (v1198 + 1) << 8;
        else
          v1201 = 0;
        if (v1196 < v1199)
          v1202 = v1198 + 1;
        else
          v1202 = v1200;
        v1203 = v1196 - v1201;
        if (v1202 <= 0x7F)
        {
          do
          {
            v1203 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1389 = *v26++;
                v1203 |= v1389;
              }
            }
            v1204 = 2 * v1202;
            v36 = v1202 >= 0x40;
            v1202 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1204 = v1202;
        }
        v1205 = ((v1204 << 7) - 128) >> 8;
        v1206 = (v1205 + 1) << 8;
        v1207 = v1204 - (v1205 + 1);
        if (v1203 >= v1206)
          v1208 = (v1205 + 1) << 8;
        else
          v1208 = 0;
        if (v1203 < v1206)
          v1209 = v1205 + 1;
        else
          v1209 = v1207;
        v1163 = v1203 - v1208;
        if (v1209 <= 0x7F)
        {
          do
          {
            v1163 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1390 = *v26++;
                v1163 |= v1390;
              }
            }
            v1164 = 2 * v1209;
            v36 = v1209 >= 0x40;
            v1209 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1164 = v1209;
        }
      }
      v1210 = ((v1164 << 7) - 128) >> 8;
      v1211 = (v1210 + 1) << 8;
      if (v1163 >= v1211)
        v1212 = (v1210 + 1) << 8;
      else
        v1212 = 0;
      if (v1163 < v1211)
        v1213 = v1210 + 1;
      else
        v1213 = v1164 - (v1210 + 1);
      v812 = v1163 - v1212;
      if (v1213 <= 0x7F)
      {
        do
        {
          v812 *= 2;
          if (++v28 == 8)
          {
            v28 = 0;
            if (v26 == v24)
            {
              v26 = v24;
            }
            else
            {
              v1341 = *v26++;
              v812 |= v1341;
            }
          }
          v813 = 2 * v1213;
          v36 = v1213 >= 0x40;
          v1213 *= 2;
        }
        while (!v36);
      }
      else
      {
        v813 = v1213;
      }
      if (v1163 >= v1211)
      {
        v1214 = ((v813 << 7) - 128) >> 8;
        v1215 = (v1214 + 1) << 8;
        v1216 = v813 - (v1214 + 1);
        if (v812 >= v1215)
          v1217 = (v1214 + 1) << 8;
        else
          v1217 = 0;
        if (v812 < v1215)
          v1218 = v1214 + 1;
        else
          v1218 = v1216;
        v1219 = v812 - v1217;
        if (v1218 <= 0x7F)
        {
          do
          {
            v1219 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1391 = *v26++;
                v1219 |= v1391;
              }
            }
            v1220 = 2 * v1218;
            v36 = v1218 >= 0x40;
            v1218 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1220 = v1218;
        }
        v1221 = ((v1220 << 7) - 128) >> 8;
        v1222 = (v1221 + 1) << 8;
        v1223 = v1220 - (v1221 + 1);
        if (v1219 >= v1222)
          v1224 = (v1221 + 1) << 8;
        else
          v1224 = 0;
        if (v1219 < v1222)
          v1225 = v1221 + 1;
        else
          v1225 = v1223;
        v1226 = v1219 - v1224;
        if (v1225 <= 0x7F)
        {
          do
          {
            v1226 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1392 = *v26++;
                v1226 |= v1392;
              }
            }
            v1227 = 2 * v1225;
            v36 = v1225 >= 0x40;
            v1225 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1227 = v1225;
        }
        v1228 = ((v1227 << 7) - 128) >> 8;
        v1229 = (v1228 + 1) << 8;
        v1230 = v1227 - (v1228 + 1);
        if (v1226 >= v1229)
          v1231 = (v1228 + 1) << 8;
        else
          v1231 = 0;
        if (v1226 < v1229)
          v1232 = v1228 + 1;
        else
          v1232 = v1230;
        v1233 = v1226 - v1231;
        if (v1232 <= 0x7F)
        {
          do
          {
            v1233 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1393 = *v26++;
                v1233 |= v1393;
              }
            }
            v1234 = 2 * v1232;
            v36 = v1232 >= 0x40;
            v1232 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1234 = v1232;
        }
        v1235 = ((v1234 << 7) - 128) >> 8;
        v1236 = (v1235 + 1) << 8;
        v1237 = v1234 - (v1235 + 1);
        if (v1233 >= v1236)
          v1238 = (v1235 + 1) << 8;
        else
          v1238 = 0;
        if (v1233 < v1236)
          v1239 = v1235 + 1;
        else
          v1239 = v1237;
        v1240 = v1233 - v1238;
        if (v1239 <= 0x7F)
        {
          do
          {
            v1240 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1394 = *v26++;
                v1240 |= v1394;
              }
            }
            v1241 = 2 * v1239;
            v36 = v1239 >= 0x40;
            v1239 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1241 = v1239;
        }
        v1242 = ((v1241 << 7) - 128) >> 8;
        v1243 = (v1242 + 1) << 8;
        v1244 = v1241 - (v1242 + 1);
        if (v1240 >= v1243)
          v1245 = (v1242 + 1) << 8;
        else
          v1245 = 0;
        if (v1240 < v1243)
          v1246 = v1242 + 1;
        else
          v1246 = v1244;
        v1247 = v1240 - v1245;
        if (v1246 <= 0x7F)
        {
          do
          {
            v1247 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1395 = *v26++;
                v1247 |= v1395;
              }
            }
            v1248 = 2 * v1246;
            v36 = v1246 >= 0x40;
            v1246 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1248 = v1246;
        }
        v1249 = ((v1248 << 7) - 128) >> 8;
        v1250 = (v1249 + 1) << 8;
        v1251 = v1248 - (v1249 + 1);
        if (v1247 >= v1250)
          v1252 = (v1249 + 1) << 8;
        else
          v1252 = 0;
        if (v1247 < v1250)
          v1253 = v1249 + 1;
        else
          v1253 = v1251;
        v1254 = v1247 - v1252;
        if (v1253 <= 0x7F)
        {
          do
          {
            v1254 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1396 = *v26++;
                v1254 |= v1396;
              }
            }
            v1255 = 2 * v1253;
            v36 = v1253 >= 0x40;
            v1253 *= 2;
          }
          while (!v36);
        }
        else
        {
          v1255 = v1253;
        }
        v1256 = ((v1255 << 7) - 128) >> 8;
        v1257 = (v1256 + 1) << 8;
        v1258 = v1255 - (v1256 + 1);
        if (v1254 >= v1257)
          v1259 = (v1256 + 1) << 8;
        else
          v1259 = 0;
        if (v1254 < v1257)
          v1260 = v1256 + 1;
        else
          v1260 = v1258;
        v812 = v1254 - v1259;
        if (v1260 <= 0x7F)
        {
          do
          {
            v812 *= 2;
            if (++v28 == 8)
            {
              v28 = 0;
              if (v26 == v24)
              {
                v26 = v24;
              }
              else
              {
                v1397 = *v26++;
                v812 |= v1397;
              }
            }
            v813 = 2 * v1260;
            v36 = v1260 >= 0x40;
            v1260 *= 2;
          }
          while (!v36);
        }
        else
        {
          v813 = v1260;
        }
      }
    }
    else
    {
      v812 = v819;
    }
  }
  v1261 = ((v813 << 7) - 128) >> 8;
  v1262 = (v1261 + 1) << 8;
  v1263 = v813 - (v1261 + 1);
  if (v812 >= v1262)
    v1264 = (v1261 + 1) << 8;
  else
    v1264 = 0;
  if (v812 < v1262)
    v1265 = v1261 + 1;
  else
    v1265 = v1263;
  v1266 = v812 - v1264;
  if (v1265 <= 0x7F)
  {
    do
    {
      v1266 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v1326 = *v26++;
          v1266 |= v1326;
        }
      }
      v1267 = 2 * v1265;
      v36 = v1265 >= 0x40;
      v1265 *= 2;
    }
    while (!v36);
  }
  else
  {
    v1267 = v1265;
  }
  v1268 = ((v1267 << 7) - 128) >> 8;
  v1269 = (v1268 + 1) << 8;
  v1270 = v1267 - (v1268 + 1);
  if (v1266 >= v1269)
    v1271 = (v1268 + 1) << 8;
  else
    v1271 = 0;
  if (v1266 < v1269)
    v1272 = v1268 + 1;
  else
    v1272 = v1270;
  v1273 = v1266 - v1271;
  if (v1272 <= 0x7F)
  {
    do
    {
      v1273 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v1327 = *v26++;
          v1273 |= v1327;
        }
      }
      v1274 = 2 * v1272;
      v36 = v1272 >= 0x40;
      v1272 *= 2;
    }
    while (!v36);
  }
  else
  {
    v1274 = v1272;
  }
  v1275 = ((v1274 << 7) - 128) >> 8;
  v1276 = (v1275 + 1) << 8;
  v1277 = v1274 - (v1275 + 1);
  if (v1273 >= v1276)
    v1278 = (v1275 + 1) << 8;
  else
    v1278 = 0;
  if (v1273 < v1276)
    v1279 = v1275 + 1;
  else
    v1279 = v1277;
  v1280 = v1273 - v1278;
  if (v1279 <= 0x7F)
  {
    do
    {
      v1280 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v1328 = *v26++;
          v1280 |= v1328;
        }
      }
      v1281 = 2 * v1279;
      v36 = v1279 >= 0x40;
      v1279 *= 2;
    }
    while (!v36);
  }
  else
  {
    v1281 = v1279;
  }
  v1282 = v1273 >= v1276;
  v1283 = ((v1281 << 7) - 128) >> 8;
  v1284 = (v1283 + 1) << 8;
  v1285 = v1281 - (v1283 + 1);
  v1286 = v1280 >= v1284;
  if (v1280 >= v1284)
  {
    v1287 = v1285;
  }
  else
  {
    v1284 = 0;
    v1287 = v1283 + 1;
  }
  v1288 = v1280 - v1284;
  if (v1287 <= 0x7F)
  {
    do
    {
      v1288 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v1329 = *v26++;
          v1288 |= v1329;
        }
      }
      v1289 = 2 * v1287;
      v36 = v1287 >= 0x40;
      v1287 *= 2;
    }
    while (!v36);
  }
  else
  {
    v1289 = v1287;
  }
  v1290 = ((v1289 << 7) - 128) >> 8;
  v1291 = (v1290 + 1) << 8;
  v1292 = v1289 - (v1290 + 1);
  if (v1288 >= v1291)
    v1293 = (v1290 + 1) << 8;
  else
    v1293 = 0;
  if (v1288 < v1291)
    v1294 = v1290 + 1;
  else
    v1294 = v1292;
  v1295 = v1288 - v1293;
  if (v1294 <= 0x7F)
  {
    do
    {
      v1295 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v1330 = *v26++;
          v1295 |= v1330;
        }
      }
      v1296 = 2 * v1294;
      v36 = v1294 >= 0x40;
      v1294 *= 2;
    }
    while (!v36);
  }
  else
  {
    v1296 = v1294;
  }
  v1297 = v1288 >= v1291;
  v1298 = ((v1296 << 7) - 128) >> 8;
  v1299 = (v1298 + 1) << 8;
  v1300 = v1296 - (v1298 + 1);
  v1301 = v1295 >= v1299;
  if (v1295 >= v1299)
  {
    v1302 = v1300;
  }
  else
  {
    v1299 = 0;
    v1302 = v1298 + 1;
  }
  v1303 = v1295 - v1299;
  if (v1302 <= 0x7F)
  {
    do
    {
      v1303 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v1331 = *v26++;
          v1303 |= v1331;
        }
      }
      v1304 = 2 * v1302;
      v36 = v1302 >= 0x40;
      v1302 *= 2;
    }
    while (!v36);
  }
  else
  {
    v1304 = v1302;
  }
  v1305 = ((v1304 << 7) - 128) >> 8;
  v1306 = (v1305 + 1) << 8;
  v1307 = v1304 - (v1305 + 1);
  if (v1303 >= v1306)
    v1308 = (v1305 + 1) << 8;
  else
    v1308 = 0;
  if (v1303 < v1306)
    v1309 = v1305 + 1;
  else
    v1309 = v1307;
  v1310 = v1303 - v1308;
  if (v1309 <= 0x7F)
  {
    do
    {
      v1310 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v1332 = *v26++;
          v1310 |= v1332;
        }
      }
      v1311 = 2 * v1309;
      v36 = v1309 >= 0x40;
      v1309 *= 2;
    }
    while (!v36);
  }
  else
  {
    v1311 = v1309;
  }
  v1312 = v1303 >= v1306;
  v1313 = ((v1311 << 7) - 128) >> 8;
  v1314 = (v1313 + 1) << 8;
  v1315 = v1311 - (v1313 + 1);
  v1316 = v1310 >= v1314;
  if (v1310 >= v1314)
  {
    v1317 = v1315;
  }
  else
  {
    v1314 = 0;
    v1317 = v1313 + 1;
  }
  v1318 = v1310 - v1314;
  if (v1317 <= 0x7F)
  {
    do
    {
      v1318 *= 2;
      if (++v28 == 8)
      {
        v28 = 0;
        if (v26 == v24)
        {
          v26 = v24;
        }
        else
        {
          v1333 = *v26++;
          v1318 |= v1333;
        }
      }
      v1319 = 2 * v1317;
      v36 = v1317 >= 0x40;
      v1317 *= 2;
    }
    while (!v36);
  }
  else
  {
    v1319 = v1317;
  }
  v1320 = ((v1319 << 7) - 128) >> 8;
  v1321 = v1319 - (v1320 + 1);
  v36 = v1318 >= (v1320 + 1) << 8;
  v1322 = v36;
  if (v36)
    v1323 = v1321;
  else
    v1323 = v1320 + 1;
  if (v1323 <= 0x7F)
  {
    do
    {
      v1324 = v28 + 1;
      if (v26 == v24)
        v1325 = v24;
      else
        v1325 = v26 + 1;
      if (v28 == 7)
        v28 = 0;
      else
        ++v28;
      if (v1324 == 8)
        v26 = v1325;
      v36 = v1323 >= 0x40;
      v1323 *= 2;
    }
    while (!v36);
  }
  if (v26 == v24)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
LABEL_10:
      rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/vp8_header_parser.cc");
      return 0;
    }
    return 0;
  }
  else
  {
    *a3 = (2 * ((4 * ((4 * ((2 * v1282) | v1286)) | (2 * v1297) | v1301)) | (2 * v1312) | v1316)) | v1322;
    return 1;
  }
}

uint64_t webrtc::Vp8TemporalLayers::SetQpLimits(uint64_t this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  if (a2 < (*(_QWORD *)(this + 16) - v2) >> 3)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8 * a2) + 16))(*(_QWORD *)(v2 + 8 * a2), 0);
  __break(1u);
  return this;
}

uint64_t webrtc::Vp8TemporalLayers::StreamCount(webrtc::Vp8TemporalLayers *this)
{
  return (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
}

uint64_t webrtc::Vp8TemporalLayers::SupportsEncoderFrameDropping(uint64_t this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  if (a2 < (*(_QWORD *)(this + 16) - v2) >> 3)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8 * a2) + 32))(*(_QWORD *)(v2 + 8 * a2), 0);
  __break(1u);
  return this;
}

uint64_t webrtc::Vp8TemporalLayers::OnRatesUpdated(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (a2 < (*(_QWORD *)(result + 16) - v2) >> 3)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8 * a2) + 40))(*(_QWORD *)(v2 + 8 * a2), 0);
  __break(1u);
  return result;
}

uint64_t webrtc::Vp8TemporalLayers::UpdateConfiguration(uint64_t this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  if (a2 < (*(_QWORD *)(this + 16) - v2) >> 3)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8 * a2) + 48))(*(_QWORD *)(v2 + 8 * a2), 0);
  __break(1u);
  return this;
}

uint64_t webrtc::Vp8TemporalLayers::NextFrameConfig(uint64_t this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  if (a2 < (*(_QWORD *)(this + 16) - v2) >> 3)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8 * a2) + 56))(*(_QWORD *)(v2 + 8 * a2), 0);
  __break(1u);
  return this;
}

uint64_t webrtc::Vp8TemporalLayers::OnEncodeDone(uint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, webrtc::CodecSpecificInfo *a7)
{
  uint64_t v7;

  v7 = *(_QWORD *)(this + 8);
  if (a2 < (*(_QWORD *)(this + 16) - v7) >> 3)
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, webrtc::CodecSpecificInfo *))(**(_QWORD **)(v7 + 8 * a2) + 64))(*(_QWORD *)(v7 + 8 * a2), 0, a3, a4, a5, a6, a7);
  __break(1u);
  return this;
}

uint64_t webrtc::Vp8TemporalLayers::OnFrameDropped(uint64_t this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  if (a2 < (*(_QWORD *)(this + 16) - v2) >> 3)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8 * a2) + 72))(*(_QWORD *)(v2 + 8 * a2));
  __break(1u);
  return this;
}

uint64_t webrtc::Vp8TemporalLayers::OnPacketLossRateUpdate(uint64_t this, float a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v5 + 80))(v5, a2))
  {
    v5 = *v2++;
  }
  return this;
}

uint64_t webrtc::Vp8TemporalLayers::OnRttUpdate(uint64_t this, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2))
  {
    v5 = *v2++;
  }
  return this;
}

uint64_t webrtc::Vp8TemporalLayers::OnLossNotification(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

void webrtc::Vp8TemporalLayers::~Vp8TemporalLayers(webrtc::Vp8TemporalLayers *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::Vp8TemporalLayersFactory::Create@<X0>(int *a1@<X1>, uint64_t (***a2)(_QWORD, uint64_t)@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int32 *v7;
  int32x4_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  webrtc::ScreenshareLayers *v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  webrtc::ScreenshareLayers **v35;
  char *v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  webrtc::ScreenshareLayers **v46;
  char *v47;
  int64_t v48;
  unint64_t v49;
  char *v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  int64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  webrtc::ScreenshareLayers *v69;
  uint64_t v70;
  uint64_t v71;
  webrtc::ScreenshareLayers *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t result;
  uint64_t v79;

  if (*((unsigned __int8 *)a1 + 32) <= 1u)
    v4 = 1;
  else
    v4 = *((unsigned __int8 *)a1 + 32);
  if (v4 < 8)
  {
    v5 = 0;
    v6 = 0;
LABEL_9:
    v13 = v4 - v5;
    v14 = &a1[9 * v5 + 13];
    do
    {
      v15 = *v14;
      v14 += 9;
      v6 += v15;
      --v13;
    }
    while (v13);
    goto LABEL_11;
  }
  v5 = v4 & 0xF8;
  v7 = a1 + 40;
  v8 = 0uLL;
  v9 = v5;
  v10 = 0uLL;
  do
  {
    v11.i32[0] = *(v7 - 27);
    v11.i32[1] = *(v7 - 18);
    v11.i32[2] = *(v7 - 9);
    v11.i32[3] = *v7;
    v12.i32[0] = v7[9];
    v12.i32[1] = v7[18];
    v12.i32[2] = v7[27];
    v12.i32[3] = v7[36];
    v8 = vaddq_s32(v11, v8);
    v10 = vaddq_s32(v12, v10);
    v7 += 72;
    v9 -= 8;
  }
  while (v9);
  v6 = vaddvq_s32(vaddq_s32(v10, v8));
  if (v5 != v4)
    goto LABEL_9;
LABEL_11:
  if (v6)
    v16 = v4;
  else
    v16 = 1;
  v21 = (char *)operator new(8 * v16);
  v22 = 0;
  v23 = &v21[8 * v16];
  v24 = v21;
  v79 = v16;
  do
  {
    while (1)
    {
      if (*((unsigned __int16 *)a1 + 186) < 0x100u)
      {
        v25 = *a1;
        if (*a1 == 4)
        {
          v26 = *((unsigned __int8 *)a1 + 360);
          if (!*((_BYTE *)a1 + 32))
            goto LABEL_26;
        }
        else if (v25 == 2 || v25 == 1)
        {
          v26 = *((unsigned __int8 *)a1 + 356);
          if (!*((_BYTE *)a1 + 32))
            goto LABEL_26;
        }
        else
        {
          v26 = 0;
          if (!*((_BYTE *)a1 + 32))
            goto LABEL_26;
        }
LABEL_24:
        if (v26 <= LOBYTE(a1[9 * v22 + 12]))
          v26 = LOBYTE(a1[9 * v22 + 12]);
        goto LABEL_26;
      }
      v27 = *((_WORD *)a1 + 186);
      if (v27 >= 0x22)
      {
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/svc/scalability_mode_util.cc", 309, "index < kNumScalabilityModes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v17, v18, v19, v20, v27);
LABEL_102:
        abort();
      }
                                                                            + 28];
      if (*((_BYTE *)a1 + 32))
        goto LABEL_24;
LABEL_26:
      if (v22 || a1[81] != 1 || !*((_BYTE *)a1 + 352))
        break;
      if (v26 <= 2)
        v28 = 2;
      else
        v28 = v26;
      v29 = (webrtc::ScreenshareLayers *)operator new();
      webrtc::ScreenshareLayers::ScreenshareLayers(v29, v28);
      if (v24 < v23)
      {
LABEL_15:
        *(_QWORD *)v24 = v29;
        v24 += 8;
        if (++v22 == v16)
          goto LABEL_98;
      }
      else
      {
        v30 = v24 - v21;
        v31 = (v24 - v21) >> 3;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61)
          goto LABEL_102;
        if ((v23 - v21) >> 2 > v32)
          v32 = (v23 - v21) >> 2;
        if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v32)
          goto LABEL_103;
        if (v32 >> 61)
          goto LABEL_104;
        v33 = 8 * v32;
        v34 = (char *)operator new(8 * v32);
        v23 = &v34[v33];
        v35 = (webrtc::ScreenshareLayers **)&v34[8 * v31];
        *v35 = v29;
        v36 = (char *)(v35 + 1);
        v37 = v24 - v21;
        if (v24 != v21)
        {
          v38 = v37 - 8;
          if ((unint64_t)(v37 - 8) < 0x138)
          {
            v39 = v24;
            goto LABEL_79;
          }
          v51 = v24 - 8 - v21;
          if (&v24[-(v51 & 0xFFFFFFFFFFFFFFF8) - 8] > v24 - 8)
          {
            v39 = v24;
            goto LABEL_79;
          }
          if (&v34[v30 - 8 - (v51 & 0xFFFFFFFFFFFFFFF8)] > &v34[v30 - 8])
          {
            v39 = v24;
            goto LABEL_79;
          }
          v52 = v51 & 0xFFFFFFFFFFFFFFF8;
          if (&v24[-v52 - 8] < (char *)v35)
          {
            v39 = v24;
            if (&v34[v30 - v52 - 8] < v24)
              goto LABEL_107;
          }
          v53 = (v38 >> 3) + 1;
          v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
          v39 = &v24[-v54];
          v35 = (webrtc::ScreenshareLayers **)((char *)v35 - v54);
          v55 = &v34[8 * v31 - 16];
          v56 = v24 - 16;
          v57 = v53 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v59 = *((_OWORD *)v56 - 1);
            v58 = *(_OWORD *)v56;
            *((_OWORD *)v56 - 1) = 0uLL;
            *(_OWORD *)v56 = 0uLL;
            *((_OWORD *)v55 - 1) = v59;
            *(_OWORD *)v55 = v58;
            v55 -= 32;
            v56 -= 32;
            v57 -= 4;
          }
          while (v57);
          if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_107:
            do
            {
LABEL_79:
              v69 = (webrtc::ScreenshareLayers *)*((_QWORD *)v39 - 1);
              v39 -= 8;
              *(_QWORD *)v39 = 0;
              *--v35 = v69;
            }
            while (v39 != v21);
          }
          do
          {
            v71 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            v70 = v71;
            *(_QWORD *)v24 = 0;
            if (v71)
              (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
          }
          while (v24 != v21);
          if (!v21)
            goto LABEL_86;
        }
        operator delete(v21);
LABEL_86:
        v21 = (char *)v35;
        v24 = v36;
        v16 = v79;
        v22 = 1;
        if (v79 == 1)
          goto LABEL_98;
      }
    }
    if (v26 <= 1)
      v40 = 1;
    else
      v40 = v26;
    v29 = (webrtc::ScreenshareLayers *)operator new();
    webrtc::DefaultTemporalLayers::DefaultTemporalLayers(v29, v40);
    if (v24 < v23)
      goto LABEL_15;
    v41 = v24 - v21;
    v42 = (v24 - v21) >> 3;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 61)
      goto LABEL_102;
    if ((v23 - v21) >> 2 > v43)
      v43 = (v23 - v21) >> 2;
    if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8)
      v43 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v43)
    {
LABEL_103:
      __break(1u);
LABEL_104:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    if (v43 >> 61)
      goto LABEL_104;
    v44 = 8 * v43;
    v45 = (char *)operator new(8 * v43);
    v23 = &v45[v44];
    v46 = (webrtc::ScreenshareLayers **)&v45[8 * v42];
    *v46 = v29;
    v47 = (char *)(v46 + 1);
    v48 = v24 - v21;
    if (v24 == v21)
    {
LABEL_96:
      operator delete(v21);
      goto LABEL_97;
    }
    v49 = v48 - 8;
    if ((unint64_t)(v48 - 8) < 0x138)
    {
      v50 = v24;
      goto LABEL_90;
    }
    v60 = v24 - 8 - v21;
    if (&v24[-(v60 & 0xFFFFFFFFFFFFFFF8) - 8] > v24 - 8)
    {
      v50 = v24;
      goto LABEL_90;
    }
    if (&v45[v41 - 8 - (v60 & 0xFFFFFFFFFFFFFFF8)] > &v45[v41 - 8])
    {
      v50 = v24;
      do
      {
LABEL_90:
        v72 = (webrtc::ScreenshareLayers *)*((_QWORD *)v50 - 1);
        v50 -= 8;
        *(_QWORD *)v50 = 0;
        *--v46 = v72;
      }
      while (v50 != v21);
      goto LABEL_93;
    }
    v61 = v60 & 0xFFFFFFFFFFFFFFF8;
    if (&v24[-v61 - 8] < (char *)v46)
    {
      v50 = v24;
      if (&v45[v41 - v61 - 8] < v24)
        goto LABEL_90;
    }
    v62 = (v49 >> 3) + 1;
    v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
    v50 = &v24[-v63];
    v46 = (webrtc::ScreenshareLayers **)((char *)v46 - v63);
    v64 = &v45[8 * v42 - 16];
    v65 = v24 - 16;
    v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v68 = *((_OWORD *)v65 - 1);
      v67 = *(_OWORD *)v65;
      *((_OWORD *)v65 - 1) = 0uLL;
      *(_OWORD *)v65 = 0uLL;
      *((_OWORD *)v64 - 1) = v68;
      *(_OWORD *)v64 = v67;
      v64 -= 32;
      v65 -= 32;
      v66 -= 4;
    }
    while (v66);
    if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_90;
    do
    {
LABEL_93:
      v74 = *((_QWORD *)v24 - 1);
      v24 -= 8;
      v73 = v74;
      *(_QWORD *)v24 = 0;
      if (v74)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
    }
    while (v24 != v21);
    if (v21)
      goto LABEL_96;
LABEL_97:
    v21 = (char *)v46;
    v24 = v47;
    v16 = v79;
    ++v22;
  }
  while (v22 != v79);
LABEL_98:
  v75 = (_QWORD *)operator new();
  *v75 = &unk_24C0C5538;
  v75[1] = v21;
  v75[2] = v24;
  v75[3] = v23;
  result = (uint64_t)a2;
  if (a2)
    result = (**a2)(a2, 1);
  *a3 = v75;
  return result;
}

_QWORD *webrtc::Vp8TemporalLayersFactory::Clone@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24C0C55B0;
  *a1 = result;
  return result;
}

void webrtc::Vp8TemporalLayersFactory::~Vp8TemporalLayersFactory(webrtc::Vp8TemporalLayersFactory *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::CreateVp9Encoder@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;

  v6 = (_QWORD *)operator new();
  *v6 = &off_24C0B5EC8;
  v7 = operator new();
  v9 = v6;
  webrtc::LibvpxVp9Encoder::LibvpxVp9Encoder(v7, a1, a2, (uint64_t *)&v9);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  *a3 = v7;
  return result;
}

double webrtc::VP9Decoder::Create@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  double result;
  pthread_mutexattr_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C0B6118;
  pthread_mutexattr_init(&v5);
  pthread_mutexattr_setpolicy_np(&v5, 3);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 8), &v5);
  pthread_mutexattr_destroy(&v5);
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 68;
  *(_QWORD *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_BYTE *)(v3 + 128) = 1;
  *(_BYTE *)(v3 + 132) = 0;
  *(_BYTE *)(v3 + 136) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 140) = xmmword_208F05120;
  *a1 = v3;
  return result;
}

char *std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  void **v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void **v31;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v5 = 0x2AAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_31:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x2AAAAAAAAAAAAAALL)
    goto LABEL_31;
  v7 = 96 * v5;
  v8 = (char *)operator new(96 * v5);
  v9 = &v8[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_QWORD *)v9 + 3) = v10;
  v11 = (_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v9 + 4) = v12;
  v13 = v9 + 32;
  v14 = *(_QWORD *)(a2 + 40);
  *((_QWORD *)v9 + 5) = v14;
  if (v14)
  {
    *(_QWORD *)(v12 + 16) = v13;
    *(_QWORD *)(a2 + 24) = v11;
    *v11 = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  else
  {
    *((_QWORD *)v9 + 3) = v13;
  }
  v15 = &v8[96 * v2];
  v16 = &v8[v7];
  *((_QWORD *)v15 + 6) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v15 + 72) = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v15 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 48) = 0;
  v17 = v9 + 96;
  v18 = (char *)*a1;
  v19 = (void **)a1[1];
  if (v19 == *a1)
  {
    *a1 = v9;
    a1[1] = v17;
    a1[2] = v16;
  }
  else
  {
    v20 = 0;
    do
    {
      v24 = &v9[v20 * 8];
      v25 = (char *)&v19[v20];
      v26 = *(_OWORD *)&v19[v20 - 12];
      *((_QWORD *)v24 - 10) = v19[v20 - 10];
      *((_OWORD *)v24 - 6) = v26;
      *((_QWORD *)v25 - 11) = 0;
      *((_QWORD *)v25 - 10) = 0;
      *((_QWORD *)v25 - 12) = 0;
      *((_QWORD *)v24 - 9) = v19[v20 - 9];
      v27 = (char *)&v19[v20 - 8];
      v28 = *(_QWORD *)v27;
      *(_QWORD *)&v9[v20 * 8 - 64] = *(_QWORD *)v27;
      v29 = (uint64_t)&v9[v20 * 8 - 64];
      v30 = v19[v20 - 7];
      *((_QWORD *)v24 - 7) = v30;
      if (v30)
      {
        *(_QWORD *)(v28 + 16) = v29;
        *((_QWORD *)v25 - 9) = v27;
        *(_QWORD *)v27 = 0;
        v19[v20 - 7] = 0;
      }
      else
      {
        *((_QWORD *)v24 - 9) = v29;
      }
      v21 = &v9[v20 * 8];
      *((_QWORD *)v21 - 6) = 0;
      *((_QWORD *)v21 - 6) = v19[v20 - 6];
      v22 = *(_OWORD *)&v19[v20 - 5];
      v23 = *(_OWORD *)&v19[v20 - 3];
      *((_QWORD *)v21 - 1) = v19[v20 - 1];
      *(_OWORD *)(v21 - 24) = v23;
      *(_OWORD *)(v21 - 40) = v22;
      v19[v20 - 6] = 0;
      v20 -= 12;
    }
    while (&v19[v20] != (void **)v18);
    v19 = (void **)*a1;
    v31 = (void **)a1[1];
    *a1 = &v9[v20 * 8];
    a1[1] = v17;
    a1[2] = v16;
    while (v31 != v19)
    {
      if ((*(_BYTE *)(v31 - 6) & 1) != 0)
        operator delete(*(v31 - 5));
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v31 - 9), (uint64_t)*(v31 - 8));
      if (*((char *)v31 - 73) < 0)
        operator delete(*(v31 - 12));
      v31 -= 12;
    }
  }
  if (v19)
    operator delete(v19);
  return v17;
}

uint64_t webrtc::Vp9FrameBufferPool::VpxGetFrameBuffer(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unsigned int **v6;
  unsigned int **v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned int **v24;
  char *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  unsigned int *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v6 = *(unsigned int ***)(a1 + 64);
  v7 = *(unsigned int ***)(a1 + 72);
  if (v6 != v7)
  {
    while (1)
    {
      v8 = atomic_load(*v6);
      if (v8 == 1)
        break;
      if (++v6 == v7)
        goto LABEL_4;
    }
    v10 = *v6;
    if (*v6)
    {
      do
        v43 = __ldxr(v10);
      while (__stxr(v43 + 1, v10));
      goto LABEL_45;
    }
  }
LABEL_4:
  v9 = operator new();
  v10 = (unsigned int *)v9;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  do
    v11 = __ldxr((unsigned int *)v9);
  while (__stxr(v11 + 1, (unsigned int *)v9));
  v13 = *(char **)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v13 >= v12)
  {
    v16 = *(char **)(a1 + 64);
    v17 = (v13 - v16) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      goto LABEL_55;
    v19 = v12 - (_QWORD)v16;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    v20 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8;
    v21 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v20)
      v21 = v18;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v22 = 8 * v21;
      v23 = (char *)operator new(8 * v21);
      v24 = (unsigned int **)&v23[8 * v17];
      v25 = &v23[v22];
      *v24 = v10;
      do
        v26 = __ldxr(v10);
      while (__stxr(v26 + 1, v10));
      v15 = v24 + 1;
      if (v13 == v16)
      {
        *(_QWORD *)(a1 + 64) = v24;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v25;
      }
      else
      {
        v27 = v13 - v16 - 8;
        if (v27 < 0x78
          || &v13[-(v27 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v24
          && &v23[v13 - v16 - (v27 & 0xFFFFFFFFFFFFFFF8) - 8] < v13)
        {
          goto LABEL_59;
        }
        v28 = (v27 >> 3) + 1;
        v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = &v13[-v29];
        v24 = (unsigned int **)((char *)v24 - v29);
        v31 = &v23[8 * v17 - 16];
        v32 = v13 - 16;
        v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v35 = *((_OWORD *)v32 - 1);
          v34 = *(_OWORD *)v32;
          *((_OWORD *)v32 - 1) = 0uLL;
          *(_OWORD *)v32 = 0uLL;
          *((_OWORD *)v31 - 1) = v35;
          *(_OWORD *)v31 = v34;
          v31 -= 32;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        v13 = v30;
        if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_59:
          do
          {
            v36 = (unsigned int *)*((_QWORD *)v13 - 1);
            v13 -= 8;
            *(_QWORD *)v13 = 0;
            *--v24 = v36;
          }
          while (v13 != v16);
        }
        v13 = *(char **)(a1 + 64);
        v37 = *(char **)(a1 + 72);
        *(_QWORD *)(a1 + 64) = v24;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v25;
        while (v37 != v13)
        {
          v39 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          v38 = v39;
          if (v39)
          {
            do
            {
              v40 = __ldaxr((unsigned int *)v38);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, (unsigned int *)v38));
            if (!v41)
            {
              v42 = *(_QWORD *)(v38 + 24);
              *(_QWORD *)(v38 + 24) = 0;
              if (v42)
                MEMORY[0x20BD0ADD4](v42, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v38, 0x1010C40A70995B8);
            }
          }
        }
      }
      if (v13)
        operator delete(v13);
      goto LABEL_42;
    }
LABEL_54:
    __break(1u);
LABEL_55:
    abort();
  }
  if (!v13)
    goto LABEL_54;
  *(_QWORD *)v13 = v9;
  do
    v14 = __ldxr((unsigned int *)v9);
  while (__stxr(v14 + 1, (unsigned int *)v9));
  v15 = v13 + 8;
LABEL_42:
  *(_QWORD *)(a1 + 72) = v15;
  if (*(_QWORD *)(a1 + 88) < (unint64_t)(((uint64_t)v15 - *(_QWORD *)(a1 + 64)) >> 3)
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/vp9_frame_buffer_pool.cc");
  }
LABEL_45:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  v51 = *((_QWORD *)v10 + 2);
  if (v51 < a2)
  {
    v52 = v51 + (v51 >> 1);
    if (v52 <= a2)
      v53 = a2;
    else
      v53 = v52;
    v54 = (void *)operator new[]();
    v55 = v54;
    v56 = *((_QWORD *)v10 + 3);
    if (v56)
    {
      memcpy(v54, *((const void **)v10 + 3), *((_QWORD *)v10 + 1));
      *((_QWORD *)v10 + 3) = v55;
      MEMORY[0x20BD0ADD4](v56, 0x1000C8077774924);
    }
    else
    {
      *((_QWORD *)v10 + 3) = v54;
    }
    *((_QWORD *)v10 + 2) = v53;
  }
  *((_QWORD *)v10 + 1) = a2;
  *a3 = *((_QWORD *)v10 + 3);
  a3[1] = a2;
  a3[2] = v10;
  return 0;
}

uint64_t webrtc::Vp9FrameBufferPool::VpxReleaseFrameBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v2));
    if (!v5)
    {
      v6 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v6)
        MEMORY[0x20BD0ADD4](v6, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
    *(_QWORD *)(a2 + 16) = 0;
  }
  return 0;
}

uint64_t *std::vector<webrtc::scoped_refptr<webrtc::Vp9FrameBufferPool::Vp9FrameBuffer>>::erase[abi:sn180100](uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v2 = (uint64_t *)result[1];
  if (v2 == a2)
  {
    __break(1u);
  }
  else
  {
    v4 = result;
    v5 = a2 + 1;
    v6 = a2;
    if (a2 + 1 != v2)
    {
      do
      {
        v7 = *v5;
        *v5 = 0;
        v8 = *v6;
        *v6 = v7;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            v11 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 24) = 0;
            if (v11)
              MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v8, 0x1010C40A70995B8);
          }
        }
        ++v5;
        ++v6;
      }
      while (v5 != v2);
      v2 = (uint64_t *)v4[1];
    }
    while (v2 != v6)
    {
      v13 = *--v2;
      v12 = v13;
      if (v13)
      {
        do
        {
          v14 = __ldaxr((unsigned int *)v12);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, (unsigned int *)v12));
        if (!v15)
        {
          v16 = *(_QWORD *)(v12 + 24);
          *(_QWORD *)(v12 + 24) = 0;
          if (v16)
            MEMORY[0x20BD0ADD4](v16, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v12, 0x1010C40A70995B8);
        }
      }
    }
    v4[1] = (uint64_t)v6;
    return a2;
  }
  return result;
}

uint64_t **webrtc::ParseSdpForVP9Profile(uint64_t **result)
{
  uint64_t **v1;
  unsigned __int8 v2;
  uint64_t **v3;
  void *v4;
  _QWORD *v5;
  size_t v6;
  size_t v8;
  int v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  void *__s1[2];
  unsigned __int8 v16;

  v16 = 10;
  if (__s1 <= (void **)"profile-id" && (char *)&__s1[1] + 2 > "profile-id")
    goto LABEL_41;
  strcpy((char *)__s1, "profile-id");
  v1 = result + 1;
  result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)result, (const void **)__s1, result[1], (uint64_t *)result + 1);
  v2 = v16;
  if (v1 == result)
    goto LABEL_21;
  v3 = result;
  if ((v16 & 0x80) != 0)
  {
    v4 = __s1[1];
    if (((unint64_t)__s1[1] & 0x8000000000000000) != 0)
      goto LABEL_41;
    result = (uint64_t **)__s1[0];
    if (__s1[1])
    {
      if (!__s1[0])
        goto LABEL_41;
    }
  }
  else
  {
    result = (uint64_t **)__s1;
    v4 = (void *)v16;
  }
  v5 = v3 + 4;
  if (*((char *)v3 + 55) < 0)
  {
    v6 = (size_t)v3[5];
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_41;
    v5 = (_QWORD *)*v5;
    if (v6 && v5 == 0)
      goto LABEL_41;
  }
  else
  {
    v6 = *((unsigned __int8 *)v3 + 55);
  }
  if (v6 >= (unint64_t)v4)
    v8 = (size_t)v4;
  else
    v8 = v6;
  v9 = memcmp(result, v5, v8);
  if (v9)
  {
    if ((v9 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  if ((unint64_t)v4 < v6)
LABEL_21:
    v3 = v1;
LABEL_22:
  if ((v2 & 0x80) != 0)
  {
    operator delete(__s1[0]);
    if (v3 != v1)
      goto LABEL_24;
LABEL_27:
    v11 = 0;
    v12 = 0x100000000;
    return (uint64_t **)(v12 | v11);
  }
  if (v3 == v1)
    goto LABEL_27;
LABEL_24:
  result = v3 + 7;
  if ((*((char *)v3 + 79) & 0x80000000) == 0)
  {
    v10 = *((unsigned __int8 *)v3 + 79);
    goto LABEL_31;
  }
  v10 = (size_t)v3[8];
  if ((v10 & 0x8000000000000000) == 0)
  {
    result = (uint64_t **)*result;
    if (!v10 || result)
    {
LABEL_31:
      v13 = rtc::string_to_number_internal::ParseSigned((void **)result, v10, 10);
      v11 = 0;
      if (v14 && v13 >= (uint64_t)0xFFFFFFFF80000000)
      {
        v12 = 0;
        if (v13 <= 0x7FFFFFFF)
        {
          v11 = v13;
          if ((v13 & 0xFFFFFFFC) != 0)
            v11 = 0;
          v12 = (unint64_t)((v13 & 0xFFFFFFFC) == 0) << 32;
        }
      }
      else
      {
        v12 = 0;
      }
      return (uint64_t **)(v12 | v11);
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void webrtc::Parse(uint8x16_t *this, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char *v8;
  unint64_t v9;
  int v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  char v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  unint64_t v33;
  char v34;
  char v35;
  int v36;
  char v37;
  unsigned int v38;
  int v39;
  int v40;
  _BYTE *v41;
  unsigned int v42;
  int v43;
  int v44;
  unint64_t v45;
  char v46;
  int v47;
  int v48;
  char v49;
  unint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unsigned int v63;
  char v64;
  int v65;
  int v66;
  char v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unsigned int v71;
  char v72;
  int v73;
  int v74;
  char v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  char v81;
  int v82;
  int v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  __int32 v88;
  BOOL v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unint64_t v102;
  int v103;
  int v104;
  unsigned __int8 *v105;
  int v106;
  unsigned int v107;
  int v108;
  unint64_t v109;
  __int32 v110;
  _BYTE *v111;
  int v112;
  int v113;
  _BYTE *v114;
  char v115;
  _BYTE *v116;
  int v117;
  unsigned int v118;
  unsigned __int8 *v119;
  unint64_t v120;
  int v121;
  char v122;
  unint64_t v123;
  int v124;
  unsigned __int8 *v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  char *v130;
  unsigned int v131;
  char v132;
  int v133;
  unint64_t v134;
  char v135;
  int v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  int v142;
  _BYTE *v143;
  int v144;
  int v145;
  int v146;
  unint64_t v147;
  int v148;
  char v149;
  _BYTE *v150;
  int v151;
  char v152;
  int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  int v157;
  unint64_t v158;
  char v159;
  int v160;
  unsigned int v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unsigned __int8 *v164;
  unsigned int v165;
  int v166;
  unint64_t v167;
  char Bits;
  unsigned __int8 *v169;
  unsigned int v170;
  int v171;
  char v172;
  _BYTE *v173;
  int v174;
  char v175;
  int v176;
  char v177;
  _BYTE *v178;
  int v179;
  char v180;
  int v181;
  char v182;
  _BYTE *v183;
  int v184;
  char v185;
  int v186;
  char v187;
  _BYTE *v188;
  int v189;
  char v190;
  int v191;
  char v192;
  _BYTE *v193;
  int v194;
  char v195;
  int v196;
  char v197;
  _BYTE *v198;
  int v199;
  char v200;
  int v201;
  _BYTE *v202;
  _BYTE *v203;
  char v204;
  int v205;
  _BYTE *v206;
  int v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  int v212;
  char *v213;
  char v214;
  int v215;
  int v216;
  unsigned __int8 *v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  unint64_t v224;
  int v225;
  unint64_t v226;
  int v227;
  int v228;
  unint64_t v229;
  int v230;
  unsigned __int8 *v231;
  BOOL v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  uint64_t v238;
  int v239;
  int v240;
  int v241;
  int v242;
  char *v243;
  int v244;
  char v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  unint64_t v251;
  char v252;
  int v253;
  uint64_t v254;
  int v255;
  int v256;
  unsigned int v257;
  int v258;
  unint64_t v259;
  int v260;
  char v261;
  uint64_t v262;
  _BYTE *v263;
  uint64_t v264;
  unsigned int v265;
  unsigned __int8 *v266;
  int v267;
  int v268;
  _BYTE *v269;
  int v270;
  unsigned __int8 *v271;
  int v272;
  unsigned int v273;
  int v274;
  unint64_t v275;
  unsigned int v276;
  unsigned __int8 *v277;
  unint64_t v278;
  unint64_t v279;
  int v280;
  unint64_t v281;
  int v282;
  char v283;
  int v284;
  char v285;
  _BYTE *v286;
  int v287;
  char v288;
  int v289;
  char v290;
  _BYTE *v291;
  int v292;
  unsigned int v293;
  unsigned __int8 *v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;

  v4 = this->i32[2];
  this->i8[12] = 0;
  if ((int)v4 <= 1)
  {
    this->i32[2] = -1;
    goto LABEL_13;
  }
  LOBYTE(v5) = a3;
  v7 = v4 & 7;
  this->i32[2] = v4 - 2;
  v8 = (char *)this->i64[0];
  if (v7 >= 3)
  {
    v9 = (*v8 >> (v7 - 2)) & 3;
    goto LABEL_10;
  }
  if ((v4 & 7) != 0)
  {
    v10 = *v8++;
    v9 = (unint64_t)(v10 & ~(-1 << v7)) << (2 - v7);
    this->i64[0] = (uint64_t)v8;
    if (v7 == 2)
      goto LABEL_10;
    v11 = 7;
  }
  else
  {
    v9 = 0;
    v11 = 6;
  }
  v9 |= *v8 >> v11;
LABEL_10:
  if (v9 != 2)
  {
LABEL_13:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
    {
LABEL_15:
      this->i32[2] = -1;
      return;
    }
LABEL_14:
    rtc::webrtc_logging_impl::Log("\r\t", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/vp9_uncompressed_header_parser.cc");
    goto LABEL_15;
  }
  this->i8[12] = 0;
  this->i32[2] = v4 - 3;
  if (v4 <= 2)
  {
    this->i32[2] = v4 - 4;
    v12 = -2;
    *(_DWORD *)a2 = 0;
    goto LABEL_29;
  }
  if ((((_BYTE)v4 - 3) & 7) != 0)
  {
    v20 = (*v8 >> ((v4 - 3) & 7)) & 1;
    *(_DWORD *)a2 = v20;
    this->i8[12] = 0;
    v12 = v4 - 4;
    this->i32[2] = v4 - 4;
    v21 = (v4 - 4) & 7;
    if ((((_DWORD)v4 - 4) & 7) != 0)
      goto LABEL_19;
  }
  else
  {
    this->i64[0] = (uint64_t)(v8 + 1);
    v20 = *v8 & 1;
    *(_DWORD *)a2 = v20;
    this->i8[12] = 0;
    v12 = v4 - 4;
    this->i32[2] = v4 - 4;
    if ((_DWORD)v4 == 3)
    {
      v12 = -1;
      ++v8;
      *(_DWORD *)a2 = v20;
      goto LABEL_29;
    }
    ++v8;
    v21 = v12 & 7;
    if ((v12 & 7) != 0)
    {
LABEL_19:
      v22 = v20 | (2 * ((*v8 >> v21) & 1));
      *(_DWORD *)a2 = v22;
      if (v22 < 3)
        goto LABEL_29;
LABEL_26:
      this->i8[12] = 0;
      v25 = v12 - 1;
      this->i32[2] = v12 - 1;
      if (v12 <= 0)
      {
        v26 = v12 - 2;
        goto LABEL_36;
      }
      if ((((_BYTE)v12 - 1) & 7) != 0)
      {
        --v12;
        if (((*v8 >> (v25 & 7)) & 1) == 0)
          goto LABEL_29;
      }
      else
      {
        this->i64[0] = (uint64_t)(v8 + 1);
        v34 = *v8++;
        --v12;
        if ((v34 & 1) == 0)
          goto LABEL_29;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  this->i64[0] = (uint64_t)(v8 + 1);
  v23 = *v8++;
  v24 = v20 | (2 * (v23 & 1));
  *(_DWORD *)a2 = v24;
  if (v24 >= 3)
    goto LABEL_26;
LABEL_29:
  this->i8[12] = 0;
  v26 = v12 - 1;
  this->i32[2] = v12 - 1;
  if (v12 < 1)
  {
LABEL_36:
    v31 = 0;
    v29 = v26 - 1;
    goto LABEL_51;
  }
  v27 = v26 & 7;
  if ((v26 & 7) != 0)
  {
    v28 = *v8 >> v27;
    this->i8[12] = 0;
    if ((v28 & 1) == 0)
      goto LABEL_32;
LABEL_38:
    if (v12 > 3)
    {
      this->i32[2] = v12 - 4;
      if (v27 < 4)
      {
        v35 = 3;
        if (v27)
        {
          v35 = 3 - v27;
          v36 = *v8++;
          v33 = (unint64_t)(v36 & ~(-1 << v27)) << (3 - v27);
          this->i64[0] = (uint64_t)v8;
          if (v27 == 3)
            goto LABEL_162;
        }
        else
        {
          LODWORD(v33) = 0;
        }
        LODWORD(v33) = v33 | (*v8 >> (8 - v35));
      }
      else
      {
        LODWORD(v33) = (*v8 >> (v27 - 3)) & 7;
      }
    }
    else
    {
      LOBYTE(v33) = 0;
      this->i32[2] = -1;
    }
LABEL_162:
    if (!*(_BYTE *)(a2 + 5))
      *(_BYTE *)(a2 + 5) = 1;
    *(_BYTE *)(a2 + 4) = v33;
    return;
  }
  this->i64[0] = (uint64_t)(v8 + 1);
  v32 = *v8++;
  this->i8[12] = 0;
  if ((v32 & 1) != 0)
    goto LABEL_38;
LABEL_32:
  v29 = v12 - 2;
  this->i32[2] = v12 - 2;
  if (v12 == 1)
  {
    v31 = 0;
    v29 = -1;
  }
  else
  {
    if ((v29 & 7) != 0)
    {
      v30 = *v8 >> (v29 & 7);
    }
    else
    {
      this->i64[0] = (uint64_t)(v8 + 1);
      LOBYTE(v30) = *v8++;
    }
    v31 = v30 & 1;
  }
LABEL_51:
  *(_BYTE *)(a2 + 6) = v31 == 0;
  this->i8[12] = 0;
  this->i32[2] = v29 - 1;
  if (v29 < 1)
  {
    *(_WORD *)(a2 + 7) = 0;
    this->i8[12] = 0;
    this->i32[2] = v29 - 2;
    if (v31)
    {
      v41 = (_BYTE *)(a2 + 8);
      v40 = v29 - 3;
      this->i32[2] = v29 - 3;
      LOBYTE(v29) = 0;
      goto LABEL_78;
    }
    goto LABEL_73;
  }
  v37 = (v29 - 1) & 7;
  if (v37)
  {
    v38 = *v8;
    v39 = (v38 >> v37) & 1;
    *(_BYTE *)(a2 + 7) = (v38 >> v37) & 1;
    this->i8[12] = 0;
    v40 = v29 - 2;
    this->i32[2] = v29 - 2;
    if (v29 < 2)
    {
LABEL_54:
      *(_BYTE *)(a2 + 8) = 0;
      v41 = (_BYTE *)(a2 + 8);
      if (v31)
      {
        if (v39)
        {
          v50 = 0;
          v51 = -1;
          this->i32[2] = -1;
          goto LABEL_96;
        }
        this->i8[12] = 0;
        this->i32[2] = v29 - 3;
        v40 = -2;
        LOBYTE(v29) = 0;
LABEL_78:
        this->i8[12] = 0;
        if (v40 < 2)
        {
          v51 = -1;
          this->i32[2] = -1;
          if ((v29 & 1) != 0)
            goto LABEL_80;
          v50 = 0;
LABEL_96:
          *(_QWORD *)(a2 + 392) = *(_QWORD *)(a2 + 392) & 0xFFFFFFFFFFFFFF00 | (v50 >> 7) & 1 | (v50 >> 5) & 2 | (v50 >> 3) & 4 | (v50 >> 1) & 8 | (16 * ((v50 >> 3) & 1)) & 0xFFFFFFFFFFFFFFDFLL | (32 * ((v50 >> 2) & 1)) | (32 * (int)v50) & 0x40 | ((v50 & 1) << 7);
          v60 = *(_QWORD *)(a2 + 376);
          *(_QWORD *)(a2 + 376) = v60 & 0xFFFFFFFFFFFFFFFELL;
          v61 = (_DWORD *)(a2 + 360);
          this->i8[12] = 0;
          if (v51 <= 2)
          {
            LODWORD(v62) = 0;
            this->i32[2] = -1;
            goto LABEL_105;
          }
          v63 = v51 & 7;
          this->i32[2] = v51 - 3;
          if (v63 >= 4)
          {
            LODWORD(v62) = (*v8 >> (v63 - 3)) & 7;
            goto LABEL_105;
          }
          v64 = 3;
          if ((v51 & 7) != 0)
          {
            v64 = 3 - v63;
            v65 = *v8++;
            v62 = (unint64_t)(v65 & ~(-1 << v63)) << (3 - v63);
            this->i64[0] = (uint64_t)v8;
            if (v63 == 3)
            {
LABEL_105:
              *v61 = v62;
              this->i8[12] = 0;
              v66 = this->i32[2];
              v67 = v66 - 1;
              this->i32[2] = v66 - 1;
              if (v66 <= 0)
              {
                v68 = v60 & 0xFFFFFFFFFFFFFFFCLL;
              }
              else if ((((_BYTE)v66 - 1) & 7) != 0)
              {
                v68 = v60 & 0xFFFFFFFFFFFFFFFCLL;
                if (((*v8 >> (v67 & 7)) & 1) != 0)
                {
LABEL_113:
                  v68 |= 2uLL;
                  *(_QWORD *)(a2 + 376) = v68;
                  this->i8[12] = 0;
                  if (v66 > 3)
                  {
LABEL_114:
                    v71 = v67 & 7;
                    this->i32[2] = v66 - 4;
                    if (v71 >= 4)
                    {
                      LODWORD(v70) = (*v8 >> (v71 - 3)) & 7;
                      goto LABEL_121;
                    }
                    v72 = 3;
                    if (v71)
                    {
                      v72 = 3 - v71;
                      v73 = *v8++;
                      v70 = (unint64_t)(v73 & ~(-1 << v71)) << (3 - v71);
                      this->i64[0] = (uint64_t)v8;
                      if (v71 == 3)
                      {
LABEL_121:
                        *(_DWORD *)(a2 + 364) = v70;
                        this->i8[12] = 0;
                        v74 = this->i32[2];
                        v75 = v74 - 1;
                        this->i32[2] = v74 - 1;
                        if (v74 <= 0)
                        {
                          v76 = v68 & 0xFFFFFFFFFFFFFFFBLL;
                        }
                        else if ((((_BYTE)v74 - 1) & 7) != 0)
                        {
                          v76 = v68 & 0xFFFFFFFFFFFFFFFBLL;
                          if (((*v8 >> (v75 & 7)) & 1) != 0)
                          {
LABEL_129:
                            v78 = v76 | 4;
                            *(_QWORD *)(a2 + 376) = v76 | 4;
                            this->i8[12] = 0;
                            if (v74 > 3)
                            {
LABEL_130:
                              v80 = v75 & 7;
                              this->i32[2] = v74 - 4;
                              if (v80 >= 4)
                              {
                                LODWORD(v79) = (*v8 >> (v80 - 3)) & 7;
                                goto LABEL_137;
                              }
                              v81 = 3;
                              if (v80)
                              {
                                v81 = 3 - v80;
                                v82 = *v8++;
                                v79 = (unint64_t)(v82 & ~(-1 << v80)) << (3 - v80);
                                this->i64[0] = (uint64_t)v8;
                                if (v80 == 3)
                                {
LABEL_137:
                                  *(_DWORD *)(a2 + 368) = v79;
                                  this->i8[12] = 0;
                                  v83 = this->i32[2];
                                  this->i32[2] = v83 - 1;
                                  if (v83 <= 0)
                                  {
                                    v84 = v78 & 0xFFFFFFFFFFFFFFF7;
                                  }
                                  else if ((((_BYTE)v83 - 1) & 7) != 0)
                                  {
                                    v84 = v78 & 0xFFFFFFFFFFFFFFF7;
                                    if (((*v8 >> ((v83 - 1) & 7)) & 1) != 0)
                                      goto LABEL_144;
                                  }
                                  else
                                  {
                                    this->i64[0] = (uint64_t)(v8 + 1);
                                    v85 = *v8++;
                                    v84 = v78 & 0xFFFFFFFFFFFFFFF7;
                                    if ((v85 & 1) != 0)
                                    {
LABEL_144:
                                      v86 = 8;
LABEL_145:
                                      *(_QWORD *)(a2 + 376) = v86 | v84;
                                      this->i8[12] = 0;
                                      this->i32[2] = v83 - 2;
                                      if (v83 <= 1)
                                      {
                                        v87 = v83 - 3;
LABEL_147:
                                        this->i8[12] = 0;
                                        this->i32[2] = v87 - 1;
                                        goto LABEL_148;
                                      }
                                      if ((((_BYTE)v83 - 2) & 7) != 0)
                                      {
                                        v91 = *v8 >> ((v83 - 2) & 7);
                                      }
                                      else
                                      {
                                        this->i64[0] = (uint64_t)(v8 + 1);
                                        LOBYTE(v91) = *v8++;
                                      }
                                      if ((v91 & 1) != 0)
                                      {
                                        v94 = 0;
                                      }
                                      else
                                      {
                                        this->i8[12] = 0;
                                        v92 = v83 - 3;
                                        this->i32[2] = v83 - 3;
                                        if (v83 == 2)
                                        {
                                          v87 = -1;
                                          goto LABEL_147;
                                        }
                                        if ((v92 & 7) != 0)
                                        {
                                          v93 = *v8 >> (v92 & 7);
                                        }
                                        else
                                        {
                                          this->i64[0] = (uint64_t)(v8 + 1);
                                          LOBYTE(v93) = *v8++;
                                        }
                                        if ((v93 & 1) != 0)
                                        {
                                          v94 = 1;
                                        }
                                        else
                                        {
                                          this->i8[12] = 0;
                                          v98 = v83 - 4;
                                          this->i32[2] = v98;
                                          if (!v92
                                            || ((v99 = v98 & 7) == 0
                                              ? (this->i64[0] = (uint64_t)(v8 + 1), LOBYTE(v8) = *v8)
                                              : (LODWORD(v8) = *v8 >> v99),
                                                (v8 & 1) == 0))
                                          {
LABEL_148:
                                            *(_DWORD *)(a2 + 28) = (unsigned __int16)webrtc::BitstreamReader::ReadBits(this, 16)+ 1;
                                            *(_DWORD *)(a2 + 32) = (unsigned __int16)webrtc::BitstreamReader::ReadBits(this, 16)+ 1;
                                            this->i8[12] = 0;
                                            v88 = this->i32[2];
                                            v89 = __OFSUB__(v88, 1);
                                            v90 = v88 - 1;
                                            this->i32[2] = v90;
                                            if (v90 < 0 != v89)
                                              goto LABEL_203;
                                            goto LABEL_201;
                                          }
                                          v94 = 2;
                                        }
                                      }
                                      *(_DWORD *)(a2 + 384) = v61[v94];
                                      *(_BYTE *)(a2 + 388) = 1;
                                      this->i8[12] = 0;
                                      v110 = this->i32[2];
                                      v89 = __OFSUB__(v110, 1);
                                      v90 = v110 - 1;
                                      this->i32[2] = v90;
                                      if (v90 < 0 != v89)
                                      {
LABEL_203:
                                        v112 = *(_DWORD *)(a2 + 32);
                                        *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 28);
                                        goto LABEL_206;
                                      }
LABEL_201:
                                      v111 = (_BYTE *)this->i64[0];
                                      if ((v90 & 7) != 0)
                                      {
                                        if (((*v111 >> (v90 & 7)) & 1) == 0)
                                          goto LABEL_203;
                                      }
                                      else
                                      {
                                        this->i64[0] = (uint64_t)(v111 + 1);
                                        if ((*v111 & 1) == 0)
                                          goto LABEL_203;
                                      }
                                      this->i8[12] = 1;
                                      *(_QWORD *)(a2 + 64) = v4 - v90;
                                      *(_BYTE *)(a2 + 72) = 1;
                                      *(_DWORD *)(a2 + 36) = (unsigned __int16)webrtc::BitstreamReader::ReadBits(this, 16)+ 1;
                                      v112 = (unsigned __int16)webrtc::BitstreamReader::ReadBits(this, 16) + 1;
LABEL_206:
                                      *(_DWORD *)(a2 + 40) = v112;
                                      this->i8[12] = 0;
                                      v113 = this->i32[2];
                                      this->i32[2] = v113 - 1;
                                      if (v113 <= 0)
                                      {
                                        *(_BYTE *)(a2 + 81) = 0;
                                        this->i8[12] = 0;
                                        this->i32[2] = v113 - 2;
                                        goto LABEL_216;
                                      }
                                      v114 = (_BYTE *)this->i64[0];
                                      if ((((_BYTE)v113 - 1) & 7) != 0)
                                      {
                                        *(_BYTE *)(a2 + 81) = (*v114 >> ((v113 - 1) & 7)) & 1;
                                        this->i8[12] = 0;
                                        v115 = v113 - 2;
                                        this->i32[2] = v113 - 2;
                                        if (v113 < 2)
                                        {
LABEL_216:
                                          v100 = this->i32[2];
                                          if (*v41)
                                            goto LABEL_221;
                                          goto LABEL_217;
                                        }
                                      }
                                      else
                                      {
                                        this->i64[0] = (uint64_t)(v114 + 1);
                                        *(_BYTE *)(a2 + 81) = *v114 & 1;
                                        this->i8[12] = 0;
                                        v115 = v113 - 2;
                                        this->i32[2] = v113 - 2;
                                        if (v113 < 2)
                                          goto LABEL_216;
                                      }
                                      v116 = (_BYTE *)this->i64[0];
                                      v117 = v115 & 7;
                                      if (v117)
                                      {
                                        LODWORD(v116) = *v116 >> v117;
                                      }
                                      else
                                      {
                                        this->i64[0] = (uint64_t)(v116 + 1);
                                        LOBYTE(v116) = *v116;
                                      }
                                      if ((v116 & 1) != 0)
                                      {
                                        *(_BYTE *)(a2 + 80) = 4;
                                        v100 = this->i32[2];
                                        if (*v41)
                                          goto LABEL_221;
                                        goto LABEL_217;
                                      }
                                      goto LABEL_216;
                                    }
                                  }
                                  v86 = 0;
                                  goto LABEL_145;
                                }
                              }
                              else
                              {
                                LODWORD(v79) = 0;
                              }
                              LODWORD(v79) = v79 | (*v8 >> (8 - v81));
                              goto LABEL_137;
                            }
LABEL_128:
                            LODWORD(v79) = 0;
                            this->i32[2] = -1;
                            goto LABEL_137;
                          }
                        }
                        else
                        {
                          this->i64[0] = (uint64_t)(v8 + 1);
                          v77 = *v8++;
                          v76 = v68 & 0xFFFFFFFFFFFFFFFBLL;
                          if ((v77 & 1) != 0)
                            goto LABEL_129;
                        }
                        v78 = v76;
                        *(_QWORD *)(a2 + 376) = v76;
                        this->i8[12] = 0;
                        if (v74 > 3)
                          goto LABEL_130;
                        goto LABEL_128;
                      }
                    }
                    else
                    {
                      LODWORD(v70) = 0;
                    }
                    LODWORD(v70) = v70 | (*v8 >> (8 - v72));
                    goto LABEL_121;
                  }
LABEL_112:
                  LODWORD(v70) = 0;
                  this->i32[2] = -1;
                  goto LABEL_121;
                }
              }
              else
              {
                this->i64[0] = (uint64_t)(v8 + 1);
                v69 = *v8++;
                v68 = v60 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v69 & 1) != 0)
                  goto LABEL_113;
              }
              *(_QWORD *)(a2 + 376) = v68;
              this->i8[12] = 0;
              if (v66 > 3)
                goto LABEL_114;
              goto LABEL_112;
            }
          }
          else
          {
            LODWORD(v62) = 0;
          }
          LODWORD(v62) = v62 | (*v8 >> (8 - v64));
          goto LABEL_105;
        }
        v8 += (int)(((v40 + 7) >> 3) - ((v40 + 5) >> 3));
        this->i64[0] = (uint64_t)v8;
        this->i32[2] = v40 - 2;
        v40 -= 2;
        if ((v29 & 1) == 0)
        {
LABEL_82:
          this->i8[12] = 0;
          v51 = v40 - 8;
          if (v40 >= 8)
          {
            this->i32[2] = v51;
            v50 = *v8;
            v52 = v40 & 7;
            if (v52)
            {
              this->i64[0] = (uint64_t)(v8 + 1);
              v50 = ((unint64_t)(v50 & ~(-1 << v52)) << (8 - v52)) | (*++v8 >> v52);
            }
            else
            {
              this->i64[0] = (uint64_t)++v8;
            }
          }
          else
          {
            v50 = 0;
            v51 = -1;
          }
          goto LABEL_96;
        }
        goto LABEL_60;
      }
      this->i8[12] = 0;
      goto LABEL_73;
    }
  }
  else
  {
    this->i64[0] = (uint64_t)(v8 + 1);
    v46 = *v8++;
    v39 = v46 & 1;
    *(_BYTE *)(a2 + 7) = v46 & 1;
    this->i8[12] = 0;
    v40 = v29 - 2;
    this->i32[2] = v29 - 2;
    if (v29 < 2)
      goto LABEL_54;
  }
  v47 = v40 & 7;
  if ((v40 & 7) != 0)
  {
    v48 = (*v8 >> v47) & 1;
    *(_BYTE *)(a2 + 8) = (*v8 >> v47) & 1;
    v41 = (_BYTE *)(a2 + 8);
    if (v31)
      goto LABEL_66;
    goto LABEL_72;
  }
  this->i64[0] = (uint64_t)(v8 + 1);
  v49 = *v8++;
  v48 = v49 & 1;
  *(_BYTE *)(a2 + 8) = v48;
  v41 = (_BYTE *)(a2 + 8);
  if (!v31)
  {
LABEL_72:
    this->i8[12] = 0;
    if (v29 > 25)
    {
      this->i32[2] = v29 - 26;
      v53 = 24;
      if ((v40 & 7) != 0)
      {
        v53 = 24 - v47;
        v54 = *v8++;
        v55 = (unint64_t)(v54 & ~(-1 << v47)) << (24 - v47);
        this->i64[0] = (uint64_t)v8;
      }
      else
      {
        v55 = 0;
      }
      v95 = v53 - 8;
      v96 = (unsigned __int8 *)(v8 + 1);
      v97 = ((unint64_t)*v8 << v95) | v55;
      this->i64[0] = (uint64_t)(v8 + 1);
      if (v53 >= 0x10)
      {
        v97 |= (unint64_t)v8[1] << (v53 - 16);
        v96 = (unsigned __int8 *)(v8 + 2);
        this->i64[0] = (uint64_t)(v8 + 2);
        if (v95 < 0x10)
        {
          LODWORD(v95) = v53 - 16;
        }
        else
        {
          LODWORD(v95) = v53 - 24;
          v97 |= (unint64_t)v8[2] << (v53 - 24);
          v96 = (unsigned __int8 *)(v8 + 3);
          this->i64[0] = (uint64_t)(v8 + 3);
        }
      }
      if ((_DWORD)v95)
        v97 |= *v96 >> (8 - v95);
      if (v97 == 4817730)
      {
        this->i8[12] = 0;
        v101 = this->i32[2];
        if (v101 > 15)
        {
          this->i32[2] = v101 - 16;
          v105 = (unsigned __int8 *)this->i64[0];
          v106 = v101 & 7;
          if ((v101 & 7) != 0)
          {
            v107 = 16 - v106;
            v108 = *v105++;
            v109 = (unint64_t)(v108 & ~(-1 << v106)) << (16 - v106);
            this->i64[0] = (uint64_t)v105;
          }
          else
          {
            v109 = 0;
            v107 = 16;
          }
          v161 = v107 - 8;
          v162 = v105 + 1;
          v163 = ((unint64_t)*v105 << (v107 - 8)) | v109;
          this->i64[0] = (uint64_t)(v105 + 1);
          if (v107 >= 0x10)
          {
            v161 = v107 - 16;
            v163 |= (unint64_t)v105[1] << (v107 - 16);
            v162 = v105 + 2;
            this->i64[0] = (uint64_t)(v105 + 2);
          }
          if (v161)
            LODWORD(v163) = v163 | (*v162 >> (8 - v161));
          v103 = (unsigned __int16)v163 + 1;
          *(_DWORD *)(a2 + 28) = v103;
          this->i8[12] = 0;
          if (v101 >= 32)
          {
            v104 = v101 - 32;
            this->i32[2] = v104;
            v164 = (unsigned __int8 *)this->i64[0];
            v165 = 16;
            if (v106)
            {
              v165 = 16 - v106;
              v166 = *v164++;
              v167 = (unint64_t)(v166 & ~(-1 << v106)) << (16 - v106);
              this->i64[0] = (uint64_t)v164;
            }
            else
            {
              v167 = 0;
            }
            v265 = v165 - 8;
            v266 = v164 + 1;
            v102 = ((unint64_t)*v164 << (v165 - 8)) | v167;
            this->i64[0] = (uint64_t)(v164 + 1);
            if (v165 >= 0x10)
            {
              v265 = v165 - 16;
              v102 |= (unint64_t)v164[1] << (v165 - 16);
              v266 = v164 + 2;
              this->i64[0] = (uint64_t)(v164 + 2);
            }
            if (v265)
              LODWORD(v102) = v102 | (*v266 >> (8 - v265));
          }
          else
          {
            LOWORD(v102) = 0;
            v104 = -1;
          }
        }
        else
        {
          LOWORD(v102) = 0;
          v103 = 1;
          *(_DWORD *)(a2 + 28) = 1;
          v104 = -1;
        }
        v267 = (unsigned __int16)v102 + 1;
        *(_DWORD *)(a2 + 32) = v267;
        this->i8[12] = 0;
        v89 = __OFSUB__(v104, 1);
        v268 = v104 - 1;
        this->i32[2] = v268;
        if (v268 < 0 != v89
          || ((v269 = (_BYTE *)this->i64[0], (v268 & 7) == 0)
            ? (this->i64[0] = (uint64_t)(v269 + 1), LOBYTE(v269) = *v269)
            : (LODWORD(v269) = *v269 >> (v268 & 7)),
              (v269 & 1) == 0))
        {
          *(_DWORD *)(a2 + 36) = v103;
          goto LABEL_530;
        }
        *(_QWORD *)(a2 + 64) = v4 - v268;
        *(_BYTE *)(a2 + 72) = 1;
        this->i8[12] = 0;
        v270 = this->i32[2];
        if (v270 > 15)
        {
          this->i32[2] = v270 - 16;
          v271 = (unsigned __int8 *)this->i64[0];
          v272 = v270 & 7;
          if ((v270 & 7) != 0)
          {
            v273 = 16 - v272;
            v274 = *v271++;
            v275 = (unint64_t)(v274 & ~(-1 << v272)) << (16 - v272);
            this->i64[0] = (uint64_t)v271;
          }
          else
          {
            v275 = 0;
            v273 = 16;
          }
          v276 = v273 - 8;
          v277 = v271 + 1;
          v278 = ((unint64_t)*v271 << (v273 - 8)) | v275;
          this->i64[0] = (uint64_t)(v271 + 1);
          if (v273 >= 0x10)
          {
            v276 = v273 - 16;
            v278 |= (unint64_t)v271[1] << (v273 - 16);
            v277 = v271 + 2;
            this->i64[0] = (uint64_t)(v271 + 2);
          }
          if (v276)
            LODWORD(v278) = v278 | (*v277 >> (8 - v276));
          *(_DWORD *)(a2 + 36) = (unsigned __int16)v278 + 1;
          this->i8[12] = 0;
          if (v270 > 31)
          {
            this->i32[2] = v270 - 32;
            v169 = (unsigned __int8 *)this->i64[0];
            v170 = 16;
            if ((v270 & 7) != 0)
            {
              v170 = 16 - v272;
              v280 = *v169++;
              v281 = (unint64_t)(v280 & ~(-1 << v272)) << (16 - v272);
              this->i64[0] = (uint64_t)v169;
              goto LABEL_561;
            }
            goto LABEL_560;
          }
        }
        else
        {
          *(_DWORD *)(a2 + 36) = 1;
        }
        LOWORD(v279) = 0;
        this->i32[2] = -1;
        goto LABEL_529;
      }
LABEL_74:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_15;
      goto LABEL_14;
    }
LABEL_73:
    this->i32[2] = -1;
    goto LABEL_74;
  }
LABEL_66:
  if (v39)
  {
    v29 = 0;
    if (!v48)
      goto LABEL_78;
  }
  else
  {
    this->i8[12] = 0;
    v40 = v29 - 3;
    this->i32[2] = v29 - 3;
    if (v29 >= 3)
    {
      if ((v40 & 7) != 0)
      {
        v56 = *v8 >> (v40 & 7);
      }
      else
      {
        this->i64[0] = (uint64_t)(v8 + 1);
        LOBYTE(v56) = *v8++;
      }
      v29 = (v56 & 1) != 0;
      if (!v48)
        goto LABEL_78;
    }
    else
    {
      v29 = 0;
      if (!v48)
        goto LABEL_78;
    }
  }
  if (!v29)
    goto LABEL_82;
LABEL_60:
  this->i8[12] = 0;
  if (v40 <= 23)
  {
LABEL_80:
    this->i32[2] = -1;
    goto LABEL_171;
  }
  this->i32[2] = v40 - 24;
  v42 = 24;
  v43 = v40 & 7;
  if (v43)
  {
    v42 = 24 - v43;
    v44 = *v8++;
    v45 = (unint64_t)(v44 & ~(-1 << v43)) << (24 - v43);
    this->i64[0] = (uint64_t)v8;
  }
  else
  {
    v45 = 0;
  }
  v57 = v42 - 8;
  v58 = (unsigned __int8 *)(v8 + 1);
  v59 = ((unint64_t)*v8 << v57) | v45;
  this->i64[0] = (uint64_t)(v8 + 1);
  if (v42 >= 0x10)
  {
    v59 |= (unint64_t)v8[1] << (v42 - 16);
    v58 = (unsigned __int8 *)(v8 + 2);
    this->i64[0] = (uint64_t)(v8 + 2);
    if (v57 < 0x10)
    {
      LODWORD(v57) = v42 - 16;
    }
    else
    {
      LODWORD(v57) = v42 - 24;
      v59 |= (unint64_t)v8[2] << (v42 - 24);
      v58 = (unsigned __int8 *)(v8 + 3);
      this->i64[0] = (uint64_t)(v8 + 3);
    }
  }
  if ((_DWORD)v57)
    v59 |= *v58 >> (8 - v57);
  if (v59 != 4817730)
  {
LABEL_171:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (*(int *)a2 < 1)
  {
    *(_WORD *)(a2 + 10) = 257;
    *(_DWORD *)(a2 + 20) = 3;
    *(_BYTE *)(a2 + 24) = 1;
    *(_BYTE *)(a2 + 9) = 8;
  }
  else
  {
  }
  *(_QWORD *)(a2 + 360) = -1;
  *(_DWORD *)(a2 + 368) = -1;
  v100 = this->i32[2];
  if (!*v41)
  {
LABEL_217:
    if (v100 >= 2)
    {
      this->i64[0] += (int)(((v100 + 7) >> 3) - ((v100 + 5) >> 3));
      v100 -= 2;
    }
    else
    {
      v100 = -1;
    }
    this->i32[2] = v100;
    goto LABEL_221;
  }
  while (1)
  {
LABEL_221:
    this->i8[12] = 0;
    if (v100 <= 1)
    {
      *(_BYTE *)(a2 + 89) = 0;
LABEL_233:
      LOBYTE(v123) = 0;
      v124 = -1;
      this->i32[2] = -1;
      goto LABEL_248;
    }
    v118 = v100 & 7;
    this->i32[2] = v100 - 2;
    v119 = (unsigned __int8 *)this->i64[0];
    if (v118 >= 3)
    {
      LODWORD(v120) = (*v119 >> (v118 - 2)) & 3;
      goto LABEL_232;
    }
    if ((v100 & 7) != 0)
    {
      v121 = *v119++;
      v120 = (unint64_t)(v121 & ~(-1 << v118)) << (2 - v118);
      this->i64[0] = (uint64_t)v119;
      if (v118 == 2)
        goto LABEL_232;
      v122 = 7;
    }
    else
    {
      LODWORD(v120) = 0;
      v122 = 6;
    }
    LODWORD(v120) = v120 | (*v119 >> v122);
LABEL_232:
    *(_BYTE *)(a2 + 89) = v120;
    if (v100 <= 0xA)
      goto LABEL_233;
    v125 = &v119[((v100 + 5) >> 3) - ((v100 - 4) >> 3)];
    this->i64[0] = (uint64_t)v125;
    this->i8[12] = 0;
    v126 = v100 - 12;
    this->i32[2] = v100 - 12;
    if (v100 == 11)
    {
LABEL_246:
      LOBYTE(v123) = 0;
      goto LABEL_247;
    }
    if ((v126 & 7) != 0)
    {
      v127 = *v125 >> (v126 & 7);
    }
    else
    {
      this->i64[0] = (uint64_t)(v125 + 1);
      LOBYTE(v127) = *v125++;
    }
    if ((v127 & 1) != 0)
    {
      this->i8[12] = 0;
      this->i32[2] = v100 - 13;
      if (v100 == 12)
        goto LABEL_246;
      if ((((_BYTE)v100 - 13) & 7) != 0)
      {
        v128 = *v125 >> ((v100 - 13) & 7);
      }
      else
      {
        this->i64[0] = (uint64_t)(v125 + 1);
        LOBYTE(v128) = *v125++;
      }
      if ((v128 & 1) == 0)
      {
        v126 = v100 - 13;
        goto LABEL_245;
      }
      this->i8[12] = 0;
      v154 = v100 - 14;
      this->i32[2] = v100 - 14;
      if (v100 == 13)
      {
        v237 = -2;
LABEL_569:
        v297 = v237 - 2;
LABEL_570:
        this->i32[2] = v297 - 1;
LABEL_571:
        LOBYTE(v123) = 0;
        this->i8[12] = 0;
LABEL_247:
        v124 = -1;
        goto LABEL_248;
      }
      if ((v154 & 7) != 0)
      {
        v155 = *v125 >> (v154 & 7);
      }
      else
      {
        this->i64[0] = (uint64_t)(v125 + 1);
        LOBYTE(v155) = *v125++;
      }
      if ((v155 & 1) != 0)
      {
        if (v154 >= 7)
        {
          v125 += (int)(((v100 - 7) >> 3) - (v154 >> 3));
          this->i64[0] = (uint64_t)v125;
          v154 = v100 - 21;
        }
        else
        {
          v154 = -1;
        }
      }
      this->i8[12] = 0;
      v237 = v154 - 1;
      this->i32[2] = v154 - 1;
      if ((int)v154 < 1)
        goto LABEL_569;
      if ((v237 & 7) != 0)
      {
        v282 = *v125 >> (v237 & 7);
      }
      else
      {
        this->i64[0] = (uint64_t)(v125 + 1);
        LOBYTE(v282) = *v125++;
      }
      if ((v282 & 1) != 0)
      {
        if (v154 >= 8)
        {
          v125 += (int)(((v154 + 6) >> 3) - (v237 >> 3));
          this->i64[0] = (uint64_t)v125;
          v237 = v154 - 8;
        }
        else
        {
          v237 = -1;
        }
      }
      this->i8[12] = 0;
      v295 = v237 - 1;
      this->i32[2] = v237 - 1;
      if (v237 <= 0)
        goto LABEL_569;
      if ((v295 & 7) != 0)
      {
        v296 = *v125 >> (v295 & 7);
      }
      else
      {
        this->i64[0] = (uint64_t)(v125 + 1);
        LOBYTE(v296) = *v125++;
      }
      if ((v296 & 1) != 0)
      {
        if (v237 >= 8)
        {
          v125 += (int)(((v237 + 6) >> 3) - (v295 >> 3));
          this->i64[0] = (uint64_t)v125;
          v295 = v237 - 8;
        }
        else
        {
          v295 = -1;
        }
      }
      this->i8[12] = 0;
      v297 = v295 - 1;
      this->i32[2] = v295 - 1;
      if (v295 < 1)
        goto LABEL_570;
      if ((v297 & 7) != 0)
      {
        v298 = *v125 >> (v297 & 7);
      }
      else
      {
        this->i64[0] = (uint64_t)(v125 + 1);
        LOBYTE(v298) = *v125++;
      }
      if ((v298 & 1) != 0)
      {
        if (v295 >= 8)
        {
          v125 += (int)(((v295 + 6) >> 3) - (v297 >> 3));
          this->i64[0] = (uint64_t)v125;
          v297 = v295 - 8;
        }
        else
        {
          v297 = -1;
        }
      }
      this->i8[12] = 0;
      v299 = v297 - 1;
      this->i32[2] = v297 - 1;
      if (v297 <= 0)
        goto LABEL_571;
      if ((v299 & 7) != 0)
      {
        v300 = *v125 >> (v299 & 7);
      }
      else
      {
        this->i64[0] = (uint64_t)(v125 + 1);
        LOBYTE(v300) = *v125++;
      }
      if ((v300 & 1) != 0)
      {
        if (v297 >= 8)
        {
          v125 += (int)(((v297 + 6) >> 3) - (v299 >> 3));
          this->i64[0] = (uint64_t)v125;
          v299 = v297 - 8;
        }
        else
        {
          v299 = -1;
        }
      }
      this->i8[12] = 0;
      v126 = v299 - 1;
      this->i32[2] = v299 - 1;
      if (v299 < 1)
        goto LABEL_246;
      if ((v126 & 7) != 0)
      {
        v301 = *v125 >> (v126 & 7);
      }
      else
      {
        this->i64[0] = (uint64_t)(v125 + 1);
        LOBYTE(v301) = *v125++;
      }
      if ((v301 & 1) != 0)
      {
        if (v299 >= 8)
        {
          this->i64[0] = (uint64_t)&v125[((v299 + 6) >> 3) - (v126 >> 3)];
          v126 = v299 - 8;
        }
        else
        {
          v126 = -1;
        }
      }
    }
LABEL_245:
    this->i8[12] = 0;
    v124 = v126 - 8;
    if (v126 < 8)
      goto LABEL_246;
    this->i32[2] = v124;
    v137 = this->i64[0];
    LODWORD(v123) = *(unsigned __int8 *)this->i64[0];
    v138 = v126 & 7;
    ++this->i64[0];
    if (v138)
      v123 = ((unint64_t)(v123 & ~(-1 << v138)) << (8 - v138)) | (*(unsigned __int8 *)(v137 + 1) >> v138);
LABEL_248:
    *(_DWORD *)(a2 + 84) = v123;
    *(_BYTE *)(a2 + 88) = v123 == 0;
    this->i8[12] = 0;
    v129 = v124 - 1;
    this->i32[2] = v124 - 1;
    if (v124 < 1)
      goto LABEL_255;
    v130 = (char *)this->i64[0];
    v131 = v129 & 7;
    if ((v129 & 7) != 0)
    {
      if (((*v130 >> v131) & 1) == 0)
        goto LABEL_267;
    }
    else
    {
      this->i64[0] = (uint64_t)(v130 + 1);
      v132 = *v130++;
      if ((v132 & 1) == 0)
        goto LABEL_267;
    }
    this->i8[12] = 0;
    v129 = v124 - 6;
    if (v124 < 6)
    {
      v129 = -1;
LABEL_255:
      v133 = v129 - 1;
      goto LABEL_271;
    }
    this->i32[2] = v129;
    if (v131 >= 6)
    {
      LODWORD(v134) = (*v130 >> (v131 - 5)) & 0x1F;
      goto LABEL_265;
    }
    v135 = 5;
    if (!v131)
    {
      LODWORD(v134) = 0;
LABEL_264:
      LODWORD(v134) = v134 | (*v130 >> (8 - v135));
      goto LABEL_265;
    }
    v135 = 5 - v131;
    v136 = *v130++;
    v134 = (unint64_t)(v136 & ~(-1 << v131)) << (5 - v131);
    this->i64[0] = (uint64_t)v130;
    if (v131 != 5)
      goto LABEL_264;
LABEL_265:
    if ((v134 & 0x1E) != 0)
      *(_BYTE *)(a2 + 88) = 0;
LABEL_267:
    this->i8[12] = 0;
    v139 = v129 - 1;
    this->i32[2] = v129 - 1;
    if (!v129)
    {
      v133 = -1;
LABEL_271:
      this->i8[12] = 0;
      v142 = v133 - 1;
LABEL_272:
      this->i32[2] = v142;
      goto LABEL_273;
    }
    v140 = v139 & 7;
    if ((v139 & 7) != 0)
    {
      v141 = *v130 >> v140;
    }
    else
    {
      this->i64[0] = (uint64_t)(v130 + 1);
      LOBYTE(v141) = *v130++;
    }
    if ((v141 & 1) == 0)
      goto LABEL_306;
    this->i8[12] = 0;
    if (v129 <= 5)
    {
      v142 = -2;
      goto LABEL_272;
    }
    v139 = v129 - 6;
    this->i32[2] = v129 - 6;
    if (v140 >= 6)
    {
      LODWORD(v147) = (*v130 >> (v140 - 5)) & 0x1F;
      goto LABEL_304;
    }
    v152 = 5;
    if (!v140)
    {
      LODWORD(v147) = 0;
LABEL_303:
      LODWORD(v147) = v147 | (*v130 >> (8 - v152));
      goto LABEL_304;
    }
    v152 = 5 - v140;
    v153 = *v130++;
    v147 = (unint64_t)(v153 & ~(-1 << v140)) << (5 - v140);
    this->i64[0] = (uint64_t)v130;
    if (v140 != 5)
      goto LABEL_303;
LABEL_304:
    if ((v147 & 0x1E) != 0)
      *(_BYTE *)(a2 + 88) = 0;
LABEL_306:
    this->i8[12] = 0;
    v142 = v139 - 1;
    this->i32[2] = v139 - 1;
    if (!v139)
    {
      v142 = -1;
      goto LABEL_273;
    }
    v156 = v142 & 7;
    if ((v142 & 7) != 0)
    {
      v157 = *v130 >> v156;
    }
    else
    {
      this->i64[0] = (uint64_t)(v130 + 1);
      LOBYTE(v157) = *v130++;
    }
    if ((v157 & 1) != 0)
    {
      this->i8[12] = 0;
      if (v139 <= 5)
      {
        v142 = -1;
        goto LABEL_272;
      }
      v142 = v139 - 6;
      this->i32[2] = v139 - 6;
      if (v156 >= 6)
      {
        LODWORD(v158) = (*v130 >> (v156 - 5)) & 0x1F;
        goto LABEL_501;
      }
      v159 = 5;
      if (v156)
      {
        v159 = 5 - v156;
        v160 = *v130++;
        v158 = (unint64_t)(v160 & ~(-1 << v156)) << (5 - v156);
        this->i64[0] = (uint64_t)v130;
        if (v156 == 5)
        {
LABEL_501:
          if ((v158 & 0x1E) != 0)
            *(_BYTE *)(a2 + 88) = 0;
          goto LABEL_273;
        }
      }
      else
      {
        LODWORD(v158) = 0;
      }
      LODWORD(v158) = v158 | (*v130 >> (8 - v159));
      goto LABEL_501;
    }
LABEL_273:
    if ((v5 & 1) != 0)
      return;
    this->i8[12] = 0;
    this->i32[2] = v142 - 1;
    if (v142 <= 0)
    {
      *(_BYTE *)(a2 + 90) = 0;
      goto LABEL_385;
    }
    v143 = (_BYTE *)this->i64[0];
    if ((((_BYTE)v142 - 1) & 7) != 0)
    {
      v144 = *v143 >> ((v142 - 1) & 7);
    }
    else
    {
      this->i64[0] = (uint64_t)(v143 + 1);
      LOBYTE(v144) = *v143++;
    }
    *(_BYTE *)(a2 + 90) = v144 & 1;
    if ((v144 & 1) == 0)
      goto LABEL_385;
    this->i8[12] = 0;
    v145 = v142 - 2;
    this->i32[2] = v142 - 2;
    if (v142 == 1)
    {
      this->i32[2] = -2;
      goto LABEL_385;
    }
    if ((v145 & 7) != 0)
    {
      v146 = *v143 >> (v145 & 7);
    }
    else
    {
      this->i64[0] = (uint64_t)(v143 + 1);
      LOBYTE(v146) = *v143;
    }
    if ((v146 & 1) == 0)
      goto LABEL_380;
    *(_DWORD *)(a2 + 91) = 0;
    v5 = a2 + 91;
    *(_DWORD *)(a2 + 94) = 0;
    *(_BYTE *)(a2 + 98) = 1;
    this->i8[12] = 0;
    v148 = this->i32[2];
    v149 = v148 - 1;
    this->i32[2] = v148 - 1;
    if (v148 >= 1
      && ((v150 = (_BYTE *)this->i64[0], (v151 = v149 & 7) == 0)
        ? (this->i64[0] = (uint64_t)(v150 + 1), LOBYTE(v150) = *v150)
        : (LODWORD(v150) = *v150 >> v151),
          (v150 & 1) != 0))
    {
      Bits = webrtc::BitstreamReader::ReadBits(this, 8);
      if (!*(_BYTE *)(a2 + 98))
        goto LABEL_559;
    }
    else
    {
      Bits = -1;
    }
    *(_BYTE *)v5 = Bits;
    this->i8[12] = 0;
    v171 = this->i32[2];
    v172 = v171 - 1;
    this->i32[2] = v171 - 1;
    if (v171 >= 1
      && ((v173 = (_BYTE *)this->i64[0], (v174 = v172 & 7) == 0)
        ? (this->i64[0] = (uint64_t)(v173 + 1), LOBYTE(v173) = *v173)
        : (LODWORD(v173) = *v173 >> v174),
          (v173 & 1) != 0))
    {
      v175 = webrtc::BitstreamReader::ReadBits(this, 8);
      if (!*(_BYTE *)(a2 + 98))
        goto LABEL_559;
    }
    else
    {
      v175 = -1;
    }
    *(_BYTE *)(a2 + 92) = v175;
    this->i8[12] = 0;
    v176 = this->i32[2];
    v177 = v176 - 1;
    this->i32[2] = v176 - 1;
    if (v176 >= 1
      && ((v178 = (_BYTE *)this->i64[0], (v179 = v177 & 7) == 0)
        ? (this->i64[0] = (uint64_t)(v178 + 1), LOBYTE(v178) = *v178)
        : (LODWORD(v178) = *v178 >> v179),
          (v178 & 1) != 0))
    {
      v180 = webrtc::BitstreamReader::ReadBits(this, 8);
      if (!*(_BYTE *)(a2 + 98))
        goto LABEL_559;
    }
    else
    {
      v180 = -1;
    }
    *(_BYTE *)(a2 + 93) = v180;
    this->i8[12] = 0;
    v181 = this->i32[2];
    v182 = v181 - 1;
    this->i32[2] = v181 - 1;
    if (v181 >= 1
      && ((v183 = (_BYTE *)this->i64[0], (v184 = v182 & 7) == 0)
        ? (this->i64[0] = (uint64_t)(v183 + 1), LOBYTE(v183) = *v183)
        : (LODWORD(v183) = *v183 >> v184),
          (v183 & 1) != 0))
    {
      v185 = webrtc::BitstreamReader::ReadBits(this, 8);
      if (!*(_BYTE *)(a2 + 98))
        goto LABEL_559;
    }
    else
    {
      v185 = -1;
    }
    *(_BYTE *)(a2 + 94) = v185;
    this->i8[12] = 0;
    v186 = this->i32[2];
    v187 = v186 - 1;
    this->i32[2] = v186 - 1;
    if (v186 >= 1
      && ((v188 = (_BYTE *)this->i64[0], (v189 = v187 & 7) == 0)
        ? (this->i64[0] = (uint64_t)(v188 + 1), LOBYTE(v188) = *v188)
        : (LODWORD(v188) = *v188 >> v189),
          (v188 & 1) != 0))
    {
      v190 = webrtc::BitstreamReader::ReadBits(this, 8);
      if (!*(_BYTE *)(a2 + 98))
        goto LABEL_559;
    }
    else
    {
      v190 = -1;
    }
    *(_BYTE *)(a2 + 95) = v190;
    this->i8[12] = 0;
    v191 = this->i32[2];
    v192 = v191 - 1;
    this->i32[2] = v191 - 1;
    if (v191 >= 1
      && ((v193 = (_BYTE *)this->i64[0], (v194 = v192 & 7) == 0)
        ? (this->i64[0] = (uint64_t)(v193 + 1), LOBYTE(v193) = *v193)
        : (LODWORD(v193) = *v193 >> v194),
          (v193 & 1) != 0))
    {
      v195 = webrtc::BitstreamReader::ReadBits(this, 8);
      if (!*(_BYTE *)(a2 + 98))
        goto LABEL_559;
    }
    else
    {
      v195 = -1;
    }
    *(_BYTE *)(a2 + 96) = v195;
    this->i8[12] = 0;
    v196 = this->i32[2];
    v197 = v196 - 1;
    this->i32[2] = v196 - 1;
    if (v196 >= 1
      && ((v198 = (_BYTE *)this->i64[0], (v199 = v197 & 7) == 0)
        ? (this->i64[0] = (uint64_t)(v198 + 1), LOBYTE(v198) = *v198)
        : (LODWORD(v198) = *v198 >> v199),
          (v198 & 1) != 0))
    {
      v200 = webrtc::BitstreamReader::ReadBits(this, 8);
      if (!*(_BYTE *)(a2 + 98))
        goto LABEL_559;
    }
    else
    {
      v200 = -1;
    }
    *(_DWORD *)(a2 + 99) = 0x1000000;
    v5 = a2 + 99;
    *(_BYTE *)(a2 + 97) = v200;
    this->i8[12] = 0;
    v201 = this->i32[2];
    this->i32[2] = v201 - 1;
    if (v201 < 1)
      break;
    v202 = (_BYTE *)this->i64[0];
    if ((((_BYTE)v201 - 1) & 7) != 0)
    {
      v203 = (_BYTE *)this->i64[0];
      if (((*v202 >> ((v201 - 1) & 7)) & 1) == 0)
        break;
      goto LABEL_425;
    }
    v203 = v202 + 1;
    this->i64[0] = (uint64_t)(v202 + 1);
    if ((*v202 & 1) == 0)
      break;
LABEL_425:
    this->i8[12] = 0;
    v232 = v201 >= 2;
    v234 = v201 - 2;
    this->i32[2] = v234;
    if (v232
      && ((v235 = v234 & 7) == 0
        ? (this->i64[0] = (uint64_t)(v203 + 1), LOBYTE(v236) = *v203)
        : (v236 = *v203 >> v235),
          (v236 & 1) != 0))
    {
      v283 = webrtc::BitstreamReader::ReadBits(this, 8);
      if (!*(_BYTE *)(a2 + 102))
        goto LABEL_559;
    }
    else
    {
      v283 = -1;
    }
    *(_BYTE *)v5 = v283;
    this->i8[12] = 0;
    v284 = this->i32[2];
    v285 = v284 - 1;
    this->i32[2] = v284 - 1;
    if (v284 < 1
      || ((v286 = (_BYTE *)this->i64[0], (v287 = v285 & 7) == 0)
        ? (this->i64[0] = (uint64_t)(v286 + 1), LOBYTE(v286) = *v286)
        : (LODWORD(v286) = *v286 >> v287),
          (v286 & 1) == 0))
    {
      v288 = -1;
LABEL_553:
      *(_BYTE *)(a2 + 100) = v288;
      this->i8[12] = 0;
      v289 = this->i32[2];
      v290 = v289 - 1;
      this->i32[2] = v289 - 1;
      if (v289 < 1)
        goto LABEL_378;
      v291 = (_BYTE *)this->i64[0];
      v292 = v290 & 7;
      if (v292)
      {
        LODWORD(v291) = *v291 >> v292;
      }
      else
      {
        this->i64[0] = (uint64_t)(v291 + 1);
        LOBYTE(v291) = *v291;
      }
      if ((v291 & 1) == 0)
        goto LABEL_378;
      v204 = webrtc::BitstreamReader::ReadBits(this, 8);
      if (*(_BYTE *)(a2 + 102))
        goto LABEL_379;
      goto LABEL_559;
    }
    v288 = webrtc::BitstreamReader::ReadBits(this, 8);
    if (*(_BYTE *)(a2 + 102))
      goto LABEL_553;
LABEL_559:
    __break(1u);
LABEL_560:
    v281 = 0;
LABEL_561:
    v293 = v170 - 8;
    v294 = v169 + 1;
    v279 = ((unint64_t)*v169 << (v170 - 8)) | v281;
    this->i64[0] = (uint64_t)(v169 + 1);
    if (v170 >= 0x10)
    {
      v293 = v170 - 16;
      v279 |= (unint64_t)v169[1] << (v170 - 16);
      v294 = v169 + 2;
      this->i64[0] = (uint64_t)(v169 + 2);
    }
    if (v293)
      LODWORD(v279) = v279 | (*v294 >> (8 - v293));
LABEL_529:
    v267 = (unsigned __int16)v279 + 1;
LABEL_530:
    *(_DWORD *)(a2 + 40) = v267;
    *(_QWORD *)(a2 + 392) |= 0xFFuLL;
    v100 = this->i32[2];
    if (!*v41)
      goto LABEL_217;
  }
  *(_WORD *)(a2 + 99) = -1;
LABEL_378:
  v204 = -1;
LABEL_379:
  *(_BYTE *)(a2 + 101) = v204;
  v145 = this->i32[2];
LABEL_380:
  this->i8[12] = 0;
  v205 = v145 - 1;
  this->i32[2] = v145 - 1;
  if (v145 >= 1)
  {
    v206 = (_BYTE *)this->i64[0];
    if ((v205 & 7) != 0)
    {
      v207 = *v206 >> (v205 & 7);
    }
    else
    {
      this->i64[0] = (uint64_t)(v206 + 1);
      LOBYTE(v207) = *v206++;
    }
    if ((v207 & 1) != 0)
    {
      this->i8[12] = 0;
      v221 = v145 - 2;
      this->i32[2] = v221;
      if (v205)
      {
        v222 = v221 & 7;
        if (v222)
        {
          v223 = *v206 >> v222;
        }
        else
        {
          this->i64[0] = (uint64_t)(v206 + 1);
          LOBYTE(v223) = *v206;
        }
        LOBYTE(v205) = v223 & 1;
      }
      v238 = 0;
      *(_BYTE *)(a2 + 103) = v205;
      do
      {
        this->i8[12] = 0;
        v241 = this->i32[2];
        v242 = v241 - 1;
        this->i32[2] = v241 - 1;
        if (v241 < 1)
        {
LABEL_433:
          v239 = v242 - 1;
LABEL_434:
          v240 = v239 - 1;
          goto LABEL_435;
        }
        v243 = (char *)this->i64[0];
        v244 = v242 & 7;
        if ((v242 & 7) != 0)
        {
          if (((*v243 >> v244) & 1) == 0)
            goto LABEL_454;
        }
        else
        {
          this->i64[0] = (uint64_t)(v243 + 1);
          v245 = *v243++;
          if ((v245 & 1) == 0)
            goto LABEL_454;
        }
        this->i8[12] = 0;
        if (v241 > 8)
        {
          this->i32[2] = v241 - 9;
          v246 = *v243;
          this->i64[0] = (uint64_t)(v243 + 1);
          if (v244)
            v246 = (v246 << (8 - v244)) & 0xFE | (v243[1] >> v244);
        }
        else
        {
          v246 = 0;
          this->i32[2] = -1;
        }
        if (!*(_BYTE *)(a2 + v238 + 108))
          *(_BYTE *)(a2 + v238 + 108) = 1;
        *(_DWORD *)(a2 + v238 + 104) = v246;
        this->i8[12] = 0;
        v247 = this->i32[2];
        v242 = v247 - 1;
        this->i32[2] = v247 - 1;
        if (v247 < 1)
          goto LABEL_433;
        v243 = (char *)this->i64[0];
        if ((v242 & 7) != 0)
        {
          v248 = *v243 >> (v242 & 7);
        }
        else
        {
          this->i64[0] = (uint64_t)(v243 + 1);
          LOBYTE(v248) = *v243++;
        }
        if ((v248 & 1) != 0)
        {
          *(_DWORD *)(a2 + v238 + 104) = -*(_DWORD *)(a2 + v238 + 104);
          v242 = this->i32[2];
        }
LABEL_454:
        this->i8[12] = 0;
        v239 = v242 - 1;
        this->i32[2] = v242 - 1;
        if (v242 < 1)
          goto LABEL_434;
        v249 = v239 & 7;
        if ((v239 & 7) != 0)
        {
          v250 = *v243 >> v249;
        }
        else
        {
          this->i64[0] = (uint64_t)(v243 + 1);
          LOBYTE(v250) = *v243++;
        }
        if ((v250 & 1) != 0)
        {
          this->i8[12] = 0;
          if (v242 <= 6)
          {
            LODWORD(v251) = 0;
            this->i32[2] = -1;
LABEL_467:
            v254 = a2 + v238;
            if (!*(_BYTE *)(a2 + v238 + 116))
              *(_BYTE *)(v254 + 116) = 1;
            *(_DWORD *)(v254 + 112) = v251;
            this->i8[12] = 0;
            v255 = this->i32[2];
            v239 = v255 - 1;
            this->i32[2] = v255 - 1;
            if (v255 <= 0)
            {
              v240 = v255 - 2;
              goto LABEL_435;
            }
            v243 = (char *)this->i64[0];
            if ((v239 & 7) != 0)
            {
              v256 = *v243 >> (v239 & 7);
            }
            else
            {
              this->i64[0] = (uint64_t)(v243 + 1);
              LOBYTE(v256) = *v243++;
            }
            if ((v256 & 1) != 0)
            {
              *(_DWORD *)(v254 + 112) = -*(_DWORD *)(v254 + 112);
              v239 = this->i32[2];
            }
            goto LABEL_476;
          }
          this->i32[2] = v242 - 7;
          if ((v239 & 7) != 0)
          {
            if (v249 == 7)
            {
              v251 = ((unint64_t)*v243 >> 1) & 0x3F;
              goto LABEL_467;
            }
            v252 = 6 - v249;
            v253 = *v243++;
            v251 = (unint64_t)(v253 & ~(-1 << v249)) << (6 - v249);
            this->i64[0] = (uint64_t)v243;
            if (v249 == 6)
              goto LABEL_467;
          }
          else
          {
            v252 = 6;
            LODWORD(v251) = 0;
          }
          LODWORD(v251) = v251 | (*v243 >> (8 - v252));
          goto LABEL_467;
        }
LABEL_476:
        this->i8[12] = 0;
        v240 = v239 - 1;
        this->i32[2] = v239 - 1;
        if (v239 >= 1)
        {
          v257 = v240 & 7;
          if ((v240 & 7) != 0)
          {
            v258 = *v243 >> v257;
          }
          else
          {
            this->i64[0] = (uint64_t)(v243 + 1);
            LOBYTE(v258) = *v243++;
          }
          if ((v258 & 1) != 0)
          {
            this->i8[12] = 0;
            if (v239 <= 2)
            {
              LODWORD(v259) = 0;
              this->i32[2] = -1;
              goto LABEL_490;
            }
            this->i32[2] = v239 - 3;
            if (v257 >= 3)
            {
              LODWORD(v259) = (*v243 >> (v257 - 2)) & 3;
              goto LABEL_490;
            }
            if ((v240 & 7) != 0)
            {
              v260 = *v243++;
              v259 = (unint64_t)(v260 & ~(-1 << v257)) << (2 - v257);
              this->i64[0] = (uint64_t)v243;
              if (v257 != 2)
              {
                v261 = 7;
                goto LABEL_489;
              }
            }
            else
            {
              LODWORD(v259) = 0;
              v261 = 6;
LABEL_489:
              LODWORD(v259) = v259 | (*v243 >> v261);
            }
LABEL_490:
            v262 = a2 + v238;
            if (!*(_BYTE *)(a2 + v238 + 124))
              *(_BYTE *)(v262 + 124) = 1;
            *(_DWORD *)(v262 + 120) = v259;
            v240 = this->i32[2];
          }
          this->i8[12] = 0;
          this->i32[2] = v240 - 1;
          if (v240 >= 1)
          {
            v263 = (_BYTE *)this->i64[0];
            if ((((_BYTE)v240 - 1) & 7) != 0)
            {
              LODWORD(v263) = *v263 >> ((v240 - 1) & 7);
            }
            else
            {
              this->i64[0] = (uint64_t)(v263 + 1);
              LOBYTE(v263) = *v263;
            }
            if ((v263 & 1) != 0)
            {
              v264 = a2 + v238;
              *(_DWORD *)(v264 + 128) = 1;
              *(_BYTE *)(v264 + 132) = 1;
            }
          }
          goto LABEL_436;
        }
LABEL_435:
        this->i8[12] = 0;
        this->i32[2] = v240 - 1;
LABEL_436:
        v238 += 32;
      }
      while (v238 != 256);
    }
  }
LABEL_385:
  v208 = (unint64_t)(((*(_DWORD *)(a2 + 28) + 7) >> 3) + 7) >> 3;
  v209 = -1;
  do
    ++v209;
  while (64 << v209 < v208);
  v210 = -1;
  do
    v211 = v208 >> (v210++ + 2);
  while (v211 > 3);
  *(_QWORD *)(a2 + 48) = v209;
  v212 = this->i32[2];
  if (v209 < v210)
  {
    v213 = (char *)this->i64[0];
    while (1)
    {
      this->i8[12] = 0;
      v215 = v212 - 1;
      this->i32[2] = v212 - 1;
      if (v212 <= 0)
        break;
      if ((v215 & 7) != 0)
      {
        if (((*v213 >> (v215 & 7)) & 1) == 0)
        {
LABEL_396:
          v212 = v215;
          goto LABEL_397;
        }
      }
      else
      {
        this->i64[0] = (uint64_t)(v213 + 1);
        v214 = *v213++;
        if ((v214 & 1) == 0)
          goto LABEL_396;
      }
      *(_QWORD *)(a2 + 48) = ++v209;
      v212 = v215;
      if (v209 >= v210)
        goto LABEL_396;
    }
    *(_QWORD *)(a2 + 56) = 0;
    goto LABEL_414;
  }
LABEL_397:
  *(_QWORD *)(a2 + 56) = 0;
  this->i8[12] = 0;
  v216 = v212 - 1;
  this->i32[2] = v212 - 1;
  if (v212 < 1)
    goto LABEL_414;
  v217 = (unsigned __int8 *)this->i64[0];
  if ((v216 & 7) != 0)
  {
    v218 = *v217 >> (v216 & 7);
  }
  else
  {
    this->i64[0] = (uint64_t)(v217 + 1);
    LOBYTE(v218) = *v217++;
  }
  if ((v218 & 1) != 0)
  {
    *(_QWORD *)(a2 + 56) = 1;
    this->i8[12] = 0;
    v219 = v212 - 2;
    this->i32[2] = v219;
    if (!v216)
      goto LABEL_414;
    if ((v219 & 7) != 0)
    {
      v220 = *v217 >> (v219 & 7);
    }
    else
    {
      this->i64[0] = (uint64_t)(v217 + 1);
      LOBYTE(v220) = *v217++;
    }
    if ((v220 & 1) != 0)
      *(_QWORD *)(a2 + 56) = 2;
  }
  else
  {
    v219 = v212 - 1;
  }
  this->i8[12] = 0;
  if (v219 > 15)
  {
    v225 = v219 - 16;
    this->i32[2] = v219 - 16;
    v226 = 16;
    v227 = v219 & 7;
    if (v227)
    {
      v226 = (16 - v227);
      v228 = *v217++;
      v229 = (unint64_t)(v228 & ~(-1 << v227)) << (16 - v227);
      this->i64[0] = (uint64_t)v217;
    }
    else
    {
      v229 = 0;
    }
    v230 = v226 - 8;
    v231 = v217 + 1;
    v224 = ((unint64_t)*v217 << (v226 - 8)) | v229;
    this->i64[0] = (uint64_t)(v217 + 1);
    v232 = v226 >= 0x10;
    v233 = v226 - 16;
    if (v232)
    {
      v224 |= (unint64_t)v217[1] << v233;
      v231 = v217 + 2;
      this->i64[0] = (uint64_t)(v217 + 2);
      v230 = v233;
    }
    if (v230)
      LODWORD(v224) = v224 | (*v231 >> (8 - v230));
  }
  else
  {
LABEL_414:
    LOWORD(v224) = 0;
    v225 = -1;
    this->i32[2] = -1;
  }
  *(_DWORD *)(a2 + 404) = (unsigned __int16)v224;
  this->i8[12] = 1;
  *(_DWORD *)(a2 + 400) = ((int)v4 >> 3) - v225 / 8;
}

void webrtc::`anonymous namespace'::Vp9ReadColorConfig(unsigned __int8 **a1, int *a2)
{
  int v3;
  int v4;
  char v5;
  _BYTE *v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  char v11;
  char v12;
  int v13;
  unint64_t v14;
  int v15;
  char v16;
  _BYTE *v17;
  int v18;
  unsigned __int8 v19;
  int v20;
  char v21;
  _BYTE *v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  _BYTE *v39;
  int v40;

  v3 = *a2;
  if ((*a2 & 0xFFFFFFFE) != 2)
  {
    *((_BYTE *)a2 + 9) = 8;
    *((_BYTE *)a1 + 12) = 0;
    v8 = *((_DWORD *)a1 + 2);
    if (v8 > 2)
      goto LABEL_11;
    goto LABEL_8;
  }
  *((_BYTE *)a1 + 12) = 0;
  v4 = *((_DWORD *)a1 + 2);
  v5 = v4 - 1;
  *((_DWORD *)a1 + 2) = v4 - 1;
  if (v4 < 1)
    goto LABEL_5;
  v6 = *a1;
  v7 = v5 & 7;
  if (v7)
  {
    if (((*v6 >> v7) & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
  *a1 = v6 + 1;
  if ((*v6 & 1) != 0)
  {
LABEL_10:
    *((_BYTE *)a2 + 9) = 12;
    *((_BYTE *)a1 + 12) = 0;
    v8 = *((_DWORD *)a1 + 2);
    if (v8 > 2)
      goto LABEL_11;
LABEL_8:
    *((_DWORD *)a1 + 2) = -1;
    *((_WORD *)a2 + 5) = 256;
    goto LABEL_24;
  }
LABEL_5:
  *((_BYTE *)a2 + 9) = 10;
  *((_BYTE *)a1 + 12) = 0;
  v8 = *((_DWORD *)a1 + 2);
  if (v8 <= 2)
    goto LABEL_8;
LABEL_11:
  v9 = v8 & 7;
  *((_DWORD *)a1 + 2) = v8 - 3;
  v10 = *a1;
  if (v9 < 4)
  {
    if ((v8 & 7) != 0)
    {
      v12 = 3 - v9;
      v13 = *v10++;
      v14 = (unint64_t)(v13 & ~(-1 << v9)) << (3 - v9);
      *a1 = v10;
      if (v9 == 3)
      {
        *((_WORD *)a2 + 5) = v14 | 0x100;
        if (v14 != 7)
          goto LABEL_24;
        goto LABEL_17;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      v12 = 3;
    }
    v19 = v14 | (*v10 >> (8 - v12));
    *((_WORD *)a2 + 5) = v19 | 0x100;
    if (v19 != 7)
      goto LABEL_24;
LABEL_17:
    a2[3] = 1;
    *((_BYTE *)a2 + 16) = 1;
    if ((v3 | 2) == 3)
    {
      a2[5] = 0;
      *((_BYTE *)a2 + 24) = 1;
      *((_BYTE *)a1 + 12) = 0;
      v15 = *((_DWORD *)a1 + 2);
      v16 = v15 - 1;
      *((_DWORD *)a1 + 2) = v15 - 1;
      if (v15 < 1)
        return;
      v17 = *a1;
      v18 = v16 & 7;
      if (v18)
      {
        if (((*v17 >> v18) & 1) == 0)
          return;
      }
      else
      {
        *a1 = v17 + 1;
        if ((*v17 & 1) == 0)
          return;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_52;
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
    {
      goto LABEL_52;
    }
LABEL_51:
    rtc::webrtc_logging_impl::Log("\r\t", v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/vp9_uncompressed_header_parser.cc");
    goto LABEL_52;
  }
  v11 = (*v10 >> (v9 - 3)) & 7;
  *((_WORD *)a2 + 5) = (*v10 >> (v9 - 3)) & 7 | 0x100;
  if (v11 == 7)
    goto LABEL_17;
LABEL_24:
  *((_BYTE *)a1 + 12) = 0;
  v20 = *((_DWORD *)a1 + 2);
  v21 = v20 - 1;
  *((_DWORD *)a1 + 2) = v20 - 1;
  if (v20 < 1)
  {
    a2[3] = 0;
    *((_BYTE *)a2 + 16) = 1;
    if ((v3 | 2) == 3)
      goto LABEL_31;
LABEL_28:
    a2[5] = 3;
    *((_BYTE *)a2 + 24) = 1;
    return;
  }
  v22 = *a1;
  v23 = v21 & 7;
  if (v23)
  {
    LODWORD(v22) = *v22 >> v23;
  }
  else
  {
    *a1 = v22 + 1;
    LOBYTE(v22) = *v22;
  }
  a2[3] = v22 & 1;
  *((_BYTE *)a2 + 16) = 1;
  if ((v3 | 2) != 3)
    goto LABEL_28;
LABEL_31:
  *((_BYTE *)a1 + 12) = 0;
  v24 = *((_DWORD *)a1 + 2);
  if (v24 <= 1)
  {
    v25 = 0;
    *((_DWORD *)a1 + 2) = -1;
    goto LABEL_42;
  }
  v26 = (_DWORD)a1[1] & 7;
  *((_DWORD *)a1 + 2) = v24 - 2;
  v27 = *a1;
  if ((v24 & 7u) >= 3)
  {
    v25 = (*v27 >> (v26 - 2)) & 3;
    goto LABEL_42;
  }
  if ((v24 & 7) != 0)
  {
    v28 = *v27++;
    v25 = (unint64_t)(v28 & ~(-1 << v26)) << (2 - v26);
    *a1 = v27;
    if (v26 == 2)
      goto LABEL_42;
    v29 = 7;
  }
  else
  {
    v25 = 0;
    v29 = 6;
  }
  v25 |= *v27 >> v29;
LABEL_42:
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)a1 + 12) = 0;
  v37 = *((_DWORD *)a1 + 2);
  v38 = v37 - 1;
  *((_DWORD *)a1 + 2) = v37 - 1;
  if (v37 >= 1)
  {
    v39 = *a1;
    v40 = v38 & 7;
    if (v40)
    {
      if (((*v39 >> v40) & 1) != 0)
      {
LABEL_47:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          goto LABEL_51;
LABEL_52:
        *((_DWORD *)a1 + 2) = -1;
      }
    }
    else
    {
      *a1 = v39 + 1;
      if ((*v39 & 1) != 0)
        goto LABEL_47;
    }
  }
}

unsigned __int8 **webrtc::`anonymous namespace'::Vp9ReadFrameSize(unsigned __int8 **result, uint64_t a2)
{
  int v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unsigned __int8 *v19;
  int v20;

  *((_BYTE *)result + 12) = 0;
  v2 = *((_DWORD *)result + 2);
  if (v2 <= 15)
  {
    *(_DWORD *)(a2 + 28) = 1;
LABEL_12:
    LOWORD(v13) = 0;
    *((_DWORD *)result + 2) = -1;
LABEL_13:
    *(_DWORD *)(a2 + 32) = (unsigned __int16)v13 + 1;
    return result;
  }
  *((_DWORD *)result + 2) = v2 - 16;
  v3 = *result;
  v4 = v2 & 7;
  if ((v2 & 7) != 0)
  {
    v5 = 16 - v4;
    v6 = *v3++;
    v7 = (unint64_t)(v6 & ~(-1 << v4)) << (16 - v4);
    *result = v3;
  }
  else
  {
    v7 = 0;
    v5 = 16;
  }
  v8 = v5 - 8;
  v9 = v3 + 1;
  v10 = ((unint64_t)*v3 << (v5 - 8)) | v7;
  *result = v3 + 1;
  v11 = v5 >= 0x10;
  v12 = v5 - 16;
  if (v11)
  {
    v10 |= (unint64_t)v3[1] << v12;
    v9 = v3 + 2;
    *result = v3 + 2;
    v8 = v12;
  }
  if (v8)
    LODWORD(v10) = v10 | (*v9 >> (8 - v8));
  *(_DWORD *)(a2 + 28) = (unsigned __int16)v10 + 1;
  *((_BYTE *)result + 12) = 0;
  if (v2 <= 31)
    goto LABEL_12;
  *((_DWORD *)result + 2) = v2 - 32;
  v14 = *result;
  v15 = 16;
  if ((v2 & 7) != 0)
  {
    v15 = (16 - v4);
    v16 = *v14++;
    v17 = (unint64_t)(v16 & ~(-1 << v4)) << (16 - v4);
    *result = v14;
  }
  else
  {
    v17 = 0;
  }
  v18 = v15 - 8;
  v19 = v14 + 1;
  v13 = ((unint64_t)*v14 << (v15 - 8)) | v17;
  *result = v14 + 1;
  v11 = v15 >= 0x10;
  v20 = v15 - 16;
  if (v11)
  {
    v13 |= (unint64_t)v14[1] << v20;
    v19 = v14 + 2;
    *result = v14 + 2;
    v18 = v20;
  }
  if (!v18)
    goto LABEL_13;
  *(_DWORD *)(a2 + 32) = (unsigned __int16)(v13 | (*v19 >> (8 - v18))) + 1;
  return result;
}

uint64_t webrtc::`anonymous namespace'::Vp9ReadRenderSize(uint64_t result, unsigned __int8 **a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  int v5;
  _BYTE *v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unint64_t v16;
  BOOL v17;
  int v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unsigned __int8 *v25;
  int v26;

  *((_BYTE *)a2 + 12) = 0;
  v3 = *((_DWORD *)a2 + 2);
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  *((_DWORD *)a2 + 2) = v5;
  if (v5 < 0 != v4)
    goto LABEL_4;
  v6 = *a2;
  if ((v5 & 7) != 0)
  {
    if (((*v6 >> (v5 & 7)) & 1) == 0)
    {
LABEL_4:
      v7 = *(_DWORD *)(a3 + 32);
      *(_DWORD *)(a3 + 36) = *(_DWORD *)(a3 + 28);
      *(_DWORD *)(a3 + 40) = v7;
      return result;
    }
  }
  else
  {
    *a2 = v6 + 1;
    if ((*v6 & 1) == 0)
      goto LABEL_4;
  }
  *(_QWORD *)(a3 + 64) = result - v5;
  *(_BYTE *)(a3 + 72) = 1;
  *((_BYTE *)a2 + 12) = 0;
  v8 = *((_DWORD *)a2 + 2);
  if (v8 <= 15)
  {
    *(_DWORD *)(a3 + 36) = 1;
LABEL_17:
    LOWORD(v19) = 0;
    *((_DWORD *)a2 + 2) = -1;
LABEL_18:
    *(_DWORD *)(a3 + 40) = (unsigned __int16)v19 + 1;
    return result;
  }
  *((_DWORD *)a2 + 2) = v8 - 16;
  v9 = *a2;
  v10 = v8 & 7;
  if ((v8 & 7) != 0)
  {
    v11 = 16 - v10;
    v12 = *v9++;
    v13 = (unint64_t)(v12 & ~(-1 << v10)) << (16 - v10);
    *a2 = v9;
  }
  else
  {
    v13 = 0;
    v11 = 16;
  }
  v14 = v11 - 8;
  v15 = v9 + 1;
  v16 = ((unint64_t)*v9 << (v11 - 8)) | v13;
  *a2 = v9 + 1;
  v17 = v11 >= 0x10;
  v18 = v11 - 16;
  if (v17)
  {
    v16 |= (unint64_t)v9[1] << v18;
    v15 = v9 + 2;
    *a2 = v9 + 2;
    v14 = v18;
  }
  if (v14)
    LODWORD(v16) = v16 | (*v15 >> (8 - v14));
  *(_DWORD *)(a3 + 36) = (unsigned __int16)v16 + 1;
  *((_BYTE *)a2 + 12) = 0;
  if (v8 <= 31)
    goto LABEL_17;
  *((_DWORD *)a2 + 2) = v8 - 32;
  v20 = *a2;
  v21 = 16;
  if ((v8 & 7) != 0)
  {
    v21 = (16 - v10);
    v22 = *v20++;
    v23 = (unint64_t)(v22 & ~(-1 << v10)) << (16 - v10);
    *a2 = v20;
  }
  else
  {
    v23 = 0;
  }
  v24 = v21 - 8;
  v25 = v20 + 1;
  v19 = ((unint64_t)*v20 << (v21 - 8)) | v23;
  *a2 = v20 + 1;
  v17 = v21 >= 0x10;
  v26 = v21 - 16;
  if (v17)
  {
    v19 |= (unint64_t)v20[1] << v26;
    v25 = v20 + 2;
    *a2 = v20 + 2;
    v24 = v26;
  }
  if (!v24)
    goto LABEL_18;
  *(_DWORD *)(a3 + 40) = (unsigned __int16)(v19 | (*v25 >> (8 - v24))) + 1;
  return result;
}

int8x8_t webrtc::`anonymous namespace'::ReadRefreshFrameFlags(unsigned __int8 **a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64x2_t v6;
  int8x16_t v7;
  int8x8_t result;

  *((_BYTE *)a1 + 12) = 0;
  v2 = *((_DWORD *)a1 + 2);
  if (v2 > 7)
  {
    *((_DWORD *)a1 + 2) = v2 - 8;
    v4 = (uint64_t)*a1;
    v3 = **a1;
    v5 = v2 & 7;
    ++*a1;
    if (v5)
      v3 = ((unint64_t)(v3 & ~(-1 << v5)) << (8 - v5)) | (*(unsigned __int8 *)(v4 + 1) >> v5);
  }
  else
  {
    v3 = 0;
    *((_DWORD *)a1 + 2) = -1;
  }
  v6 = (uint64x2_t)vdupq_n_s64(v3);
  v7 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v6, (uint64x2_t)xmmword_208F1DA40), (int8x16_t)xmmword_208F1DA70), vandq_s8((int8x16_t)vshlq_u64(v6, (uint64x2_t)xmmword_208F1DA50), (int8x16_t)xmmword_208F1DA60));
  result = vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  *(_QWORD *)(a2 + 392) = *(_QWORD *)&result | (v3 >> 7) & 1 | *(_QWORD *)(a2 + 392) & 0xFFFFFFFFFFFFFF00 | (v3 >> 5) & 2 | (v3 >> 3) & 4 | (v3 >> 1) & 8;
  return result;
}

void webrtc::ParseUncompressedVp9Header(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _BYTE *a7@<X8>)
{
  uint64_t v8;
  std::string *v9;
  const unsigned __int8 *v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD __src[51];
  uint8x16_t v15;

  if (a2)
    v8 = a1;
  else
    v8 = 0;
  v15.i64[0] = v8;
  if (((a2 >> 28) & 0x1FFFFFFFFLL) != 0)
  {
    v9 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a3, a4, a5, a6, v13);
    webrtc::vp9::GetQp((webrtc::vp9 *)v9, v10, v11, v12);
  }
  else
  {
    v15.i32[2] = 8 * a2;
    v15.i8[12] = 1;
    LOBYTE(__src[1]) = 0;
    __src[0] = 0;
    *(_DWORD *)((char *)&__src[1] + 1) = 8;
    LOBYTE(__src[2]) = 0;
    BYTE4(__src[2]) = 0;
    LOBYTE(__src[3]) = 0;
    LOBYTE(__src[9]) = 0;
    LOWORD(__src[10]) = 0;
    WORD1(__src[12]) = 0;
    HIWORD(__src[12]) = 0;
    LOBYTE(__src[13]) = 0;
    BYTE4(__src[13]) = 0;
    LOBYTE(__src[14]) = 0;
    BYTE4(__src[14]) = 0;
    LOBYTE(__src[15]) = 0;
    BYTE4(__src[15]) = 0;
    LOBYTE(__src[16]) = 0;
    BYTE4(__src[16]) = 0;
    LOBYTE(__src[17]) = 0;
    BYTE4(__src[17]) = 0;
    LOBYTE(__src[18]) = 0;
    BYTE4(__src[18]) = 0;
    LOBYTE(__src[19]) = 0;
    BYTE4(__src[19]) = 0;
    LOBYTE(__src[20]) = 0;
    BYTE4(__src[20]) = 0;
    LOBYTE(__src[21]) = 0;
    BYTE4(__src[21]) = 0;
    LOBYTE(__src[22]) = 0;
    BYTE4(__src[22]) = 0;
    LOBYTE(__src[23]) = 0;
    BYTE4(__src[23]) = 0;
    LOBYTE(__src[24]) = 0;
    BYTE4(__src[24]) = 0;
    LOBYTE(__src[25]) = 0;
    BYTE4(__src[25]) = 0;
    LOBYTE(__src[26]) = 0;
    BYTE4(__src[26]) = 0;
    LOBYTE(__src[27]) = 0;
    BYTE4(__src[27]) = 0;
    LOBYTE(__src[28]) = 0;
    BYTE4(__src[28]) = 0;
    LOBYTE(__src[29]) = 0;
    BYTE4(__src[29]) = 0;
    LOBYTE(__src[30]) = 0;
    BYTE4(__src[30]) = 0;
    LOBYTE(__src[31]) = 0;
    BYTE4(__src[31]) = 0;
    LOBYTE(__src[32]) = 0;
    BYTE4(__src[32]) = 0;
    LOBYTE(__src[33]) = 0;
    BYTE4(__src[33]) = 0;
    LOBYTE(__src[34]) = 0;
    BYTE4(__src[34]) = 0;
    LOBYTE(__src[35]) = 0;
    BYTE4(__src[35]) = 0;
    LOBYTE(__src[36]) = 0;
    BYTE4(__src[36]) = 0;
    LOBYTE(__src[37]) = 0;
    BYTE4(__src[37]) = 0;
    LOBYTE(__src[38]) = 0;
    BYTE4(__src[38]) = 0;
    LOBYTE(__src[39]) = 0;
    BYTE4(__src[39]) = 0;
    LOBYTE(__src[40]) = 0;
    BYTE4(__src[40]) = 0;
    LOBYTE(__src[41]) = 0;
    BYTE4(__src[41]) = 0;
    LOBYTE(__src[42]) = 0;
    BYTE4(__src[42]) = 0;
    LOBYTE(__src[43]) = 0;
    BYTE4(__src[43]) = 0;
    LOBYTE(__src[44]) = 0;
    BYTE4(__src[44]) = 0;
    *(_QWORD *)((char *)&__src[4] + 4) = 0;
    *(_QWORD *)((char *)&__src[3] + 4) = 0;
    memset(&__src[6], 0, 17);
    *(_QWORD *)((char *)&__src[10] + 4) = 0;
    __src[45] = -1;
    LODWORD(__src[46]) = -1;
    __src[47] = 0;
    LOBYTE(__src[48]) = 0;
    BYTE4(__src[48]) = 0;
    __src[49] = 0;
    __src[50] = 0;
    webrtc::Parse(&v15, (uint64_t)__src, 0);
    if (v15.i32[2] < 0 || SHIDWORD(__src[3]) < 1)
    {
      *a7 = 0;
      a7[408] = 0;
    }
    else
    {
      memcpy(a7, __src, 0x198uLL);
      a7[408] = 1;
    }
  }
}

uint64_t webrtc::vp9::GetQp(webrtc::vp9 *this, unint64_t a2, _DWORD *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  webrtc::vp9 *v8;
  __int32 v10;
  std::string *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint8x16_t v102;

  if (a2)
    v8 = this;
  else
    v8 = 0;
  v102.i64[0] = (uint64_t)v8;
  if (((a2 >> 28) & 0x1FFFFFFFFLL) != 0)
  {
    v12 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v14);
    return rtc::internal::WeakReferenceOwner::GetRef((uint64_t)v12, v13);
  }
  else
  {
    v102.i32[2] = 8 * a2;
    v102.i8[12] = 1;
    v16 = 0;
    v15 = 0;
    v17 = 8;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v26 = 0;
    v27 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v22 = 0;
    v21 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v28 = 0;
    v95 = -1;
    v96 = -1;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v101 = 0;
    webrtc::Parse(&v102, (uint64_t)&v15, 1);
    v10 = v102.i32[2];
    if ((v102.i32[2] & 0x80000000) == 0)
      *a3 = v28;
    return v10 >= 0;
  }
}

uint64_t rtc::internal::WeakReferenceOwner::GetRef@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  unsigned int v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;

  v2 = (uint64_t *)this;
  if (*(_QWORD *)this && (v4 = atomic_load((unsigned int *)(*(_QWORD *)this + 4)), v4 != 1))
  {
    v5 = *(_QWORD **)this;
    *a2 = *(_QWORD *)this;
    if (!v5)
      return this;
  }
  else
  {
    v5 = (_QWORD *)operator new();
    *v5 = 1;
    v6 = (unsigned int *)v5 + 1;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    this = *v2;
    if (*v2)
    {
      v8 = (unsigned int *)(this + 4);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        this = MEMORY[0x20BD0ADEC]();
    }
    *v2 = (uint64_t)v5;
    *a2 = v5;
  }
  v11 = (unsigned int *)v5 + 1;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  return this;
}

void sub_2088E1E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_2088E1EB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_2088E1F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2088E1F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2088E1FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2088E2090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_2088E20AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_2088E2178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2088E218C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2088E21A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2088E2284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_2088E22A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_2088E236C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2088E2380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2088E2394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void webrtc::RemoteVideoDecoder::~RemoteVideoDecoder(webrtc::RemoteVideoDecoder *this)
{
  off_253EA5AE8(*((_QWORD *)this + 1));
}

{
  off_253EA5AE8(*((_QWORD *)this + 1));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::videoDecoderTaskComplete(webrtc *this, void *a2, int a3, webrtc *a4, __CVBuffer *a5)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t result;
  _Unwind_Exception *v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  int v45;
  char v46;
  char v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  char v53;
  char v54;

  v6 = (int)a2;
  v23 = 0;
  BYTE8(v26) = 0;
  LOBYTE(v27) = 0;
  BYTE8(v27) = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  LOBYTE(v33) = 0;
  BYTE4(v33) = 0;
  LOBYTE(v34) = 0;
  LOBYTE(v35) = 0;
  LOBYTE(v36) = 0;
  v37 = 0;
  v24 = 0;
  v25 = 0;
  LOBYTE(v26) = 0;
  webrtc::pixelBufferToFrame(a4, &v22);
  v12 = v22;
  if (!v22)
  {
    v21 = (_Unwind_Exception *)rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_frame.cc", 165, "video_frame_buffer_ != nullptr", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v8, v9, v10, v11, 0);
    webrtc::VideoFrame::~VideoFrame((webrtc::VideoFrame *)&v38);
    _Unwind_Resume(v21);
  }
  (**(void (***)(uint64_t))v22)(v22);
  v24 = v12;
  v25 = 0;
  v28 = a3;
  v30 = 0;
  v38 = 0;
  v39 = v12;
  (**(void (***)(uint64_t))v12)(v12);
  v41 = 0;
  v42 = 0;
  v43 = v26;
  v44 = v27;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = v33;
  v49 = v34;
  v51 = v36;
  v50 = v35;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v40 = v6;
  (*(void (**)(webrtc *, __int16 *))(*(_QWORD *)this + 16))(this, &v38);
  v13 = v52;
  if (v52)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      v16 = *(_QWORD *)(v13 + 8);
      if (v16)
      {
        v17 = *(_QWORD *)(v13 + 16);
        v18 = *(void **)(v13 + 8);
        if (v17 != v16)
        {
          do
          {
            v19 = *(void **)(v17 - 96);
            if (v19)
            {
              *(_QWORD *)(v17 - 88) = v19;
              operator delete(v19);
            }
            v17 -= 104;
          }
          while (v17 != v16);
          v18 = *(void **)(v13 + 8);
        }
        *(_QWORD *)(v13 + 16) = v16;
        operator delete(v18);
      }
      MEMORY[0x20BD0ADEC](v13, 0x1020C40E72D6CFBLL);
    }
  }
  result = v39;
  if (v39)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  return result;
}

void sub_2088E2724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  webrtc::VideoFrame::Builder::~Builder((webrtc::VideoFrame::Builder *)va);
  _Unwind_Resume(a1);
}

uint64_t webrtc::videoDecoderTaskComplete(webrtc *this, void *a2, int a3, webrtc *a4, void *a5, __CVBuffer *(*a6)(void *), void (*a7)(void *), int a8, int a9)
{
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t result;
  _Unwind_Exception *v25;
  void (***v26)(_QWORD);
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  int v49;
  char v50;
  char v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  char v57;
  char v58;

  v10 = (int)a2;
  v27 = 0;
  BYTE8(v30) = 0;
  LOBYTE(v31) = 0;
  BYTE8(v31) = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  LOBYTE(v37) = 0;
  BYTE4(v37) = 0;
  LOBYTE(v38) = 0;
  LOBYTE(v39) = 0;
  LOBYTE(v40) = 0;
  v41 = 0;
  v28 = 0;
  v29 = 0;
  LOBYTE(v30) = 0;
  webrtc::toWebRTCVideoFrameBuffer(a4, a5, a6, a7, a8, (uint64_t *)&v26);
  v16 = (uint64_t)v26;
  if (!v26)
  {
    v25 = (_Unwind_Exception *)rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_frame.cc", 165, "video_frame_buffer_ != nullptr", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v12, v13, v14, v15, 0);
    webrtc::VideoFrame::~VideoFrame((webrtc::VideoFrame *)&v42);
    _Unwind_Resume(v25);
  }
  (**v26)(v26);
  v28 = v16;
  v29 = 0;
  v32 = a3;
  v34 = 0;
  v42 = 0;
  v43 = v16;
  (**(void (***)(uint64_t))v16)(v16);
  v45 = 0;
  v46 = 0;
  v47 = v30;
  v48 = v31;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = v37;
  v53 = v38;
  v55 = v40;
  v54 = v39;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v44 = v10;
  (*(void (**)(webrtc *, __int16 *))(*(_QWORD *)this + 16))(this, &v42);
  v17 = v56;
  if (v56)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v17));
    if (!v19)
    {
      v20 = *(_QWORD *)(v17 + 8);
      if (v20)
      {
        v21 = *(_QWORD *)(v17 + 16);
        v22 = *(void **)(v17 + 8);
        if (v21 != v20)
        {
          do
          {
            v23 = *(void **)(v21 - 96);
            if (v23)
            {
              *(_QWORD *)(v21 - 88) = v23;
              operator delete(v23);
            }
            v21 -= 104;
          }
          while (v21 != v20);
          v22 = *(void **)(v17 + 8);
        }
        *(_QWORD *)(v17 + 16) = v20;
        operator delete(v22);
      }
      MEMORY[0x20BD0ADEC](v17, 0x1020C40E72D6CFBLL);
    }
  }
  result = v43;
  if (v43)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  return result;
}

void sub_2088E297C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  webrtc::VideoFrame::Builder::~Builder((webrtc::VideoFrame::Builder *)va);
  _Unwind_Resume(a1);
}

uint64_t webrtc::RemoteVideoDecoder::Configure(webrtc::RemoteVideoDecoder *this, const webrtc::VideoDecoder::Settings *a2)
{
  return 1;
}

uint64_t webrtc::RemoteVideoDecoder::Decode(webrtc::RemoteVideoDecoder *this, const webrtc::EncodedImage *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  if (*((_DWORD *)a2 + 6) == 3)
  {
    v4 = *(_DWORD *)a2;
    v3 = *((_DWORD *)a2 + 1);
    if (*((_BYTE *)this + 16))
    {
      v5 = *((_QWORD *)a2 + 23);
      if ((v5 & 0xFF00000000) != 0 && (int)v5 > 0)
        return 4294967283;
    }
  }
  else
  {
    LOWORD(v3) = 0;
    LOWORD(v4) = 0;
  }
  v8 = off_253EA5AF0;
  v9 = *((_QWORD *)this + 1);
  v10 = *((unsigned int *)a2 + 38);
  v11 = *((_QWORD *)a2 + 17);
  if (v11)
  {
    v14 = off_253EA5AF0;
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    v8 = v14;
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))v8)(v9, v10, v13, *((_QWORD *)a2 + 18), (unsigned __int16)v4, (unsigned __int16)v3);
}

uint64_t webrtc::RemoteVideoDecoder::RegisterDecodeCompleteCallback(webrtc::RemoteVideoDecoder *this, webrtc::DecodedImageCallback *a2)
{
  return off_253EA5AF8(*((_QWORD *)this + 1), a2);
}

uint64_t webrtc::RemoteVideoDecoder::Release(webrtc::RemoteVideoDecoder *this)
{
  off_253EA5AF8(*((_QWORD *)this + 1), 0);
  return 0;
}

uint64_t webrtc::RemoteVideoDecoderFactory::GetSupportedFormats(webrtc::RemoteVideoDecoderFactory *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

uint64_t webrtc::RemoteVideoDecoderFactory::QueryCodecSupport(webrtc::RemoteVideoDecoderFactory *this, const webrtc::SdpVideoFormat *a2)
{
  const webrtc::SdpVideoFormat *v3;
  char *v4;
  const webrtc::SdpVideoFormat *v5;
  uint64_t v6;
  uint64_t v7;
  const webrtc::SdpVideoFormat *v9;
  void *v10;
  void *__p;
  const webrtc::SdpVideoFormat *v12;

  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 1) + 16))(&__p);
  v3 = (const webrtc::SdpVideoFormat *)__p;
  if (v12 == __p)
    v4 = 0;
  else
    v4 = (char *)__p;
  if (v12 == __p)
  {
    v7 = 0;
    if (!__p)
      return v7;
  }
  else
  {
    v5 = (const webrtc::SdpVideoFormat *)&v4[v12 - (const webrtc::SdpVideoFormat *)__p];
    do
    {
      webrtc::SdpVideoFormat::IsSameCodec(a2, v3);
      v7 = v6;
      if ((v6 & 1) != 0)
        break;
      v3 = (const webrtc::SdpVideoFormat *)((char *)v3 + 96);
    }
    while (v3 != v5);
    v3 = (const webrtc::SdpVideoFormat *)__p;
    if (!__p)
      return v7;
  }
  v9 = v12;
  v10 = v3;
  if (v12 != v3)
  {
    do
    {
      while (1)
      {
        if ((*((_BYTE *)v9 - 48) & 1) != 0)
          operator delete(*((void **)v9 - 5));
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v9 - 72, *((_QWORD *)v9 - 8));
        if (*((char *)v9 - 73) < 0)
          break;
        v9 = (const webrtc::SdpVideoFormat *)((char *)v9 - 96);
        if (v9 == v3)
          goto LABEL_18;
      }
      operator delete(*((void **)v9 - 12));
      v9 = (const webrtc::SdpVideoFormat *)((char *)v9 - 96);
    }
    while (v9 != v3);
LABEL_18:
    v10 = __p;
  }
  v12 = v3;
  operator delete(v10);
  return v7;
}

uint64_t webrtc::RemoteVideoDecoderFactory::Create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!_MergedGlobals_22)
    return (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, a3);
  result = _MergedGlobals_22(a3);
  if (!result)
    return (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, a3);
  v10 = result;
  if (v9)
  {
    *a4 = result;
    return result;
  }
  if (*((char *)a3 + 23) < 0)
  {
    v11 = *((_QWORD *)a3 + 1);
    if (v11 < 0 || (v12 = *(unsigned __int16 **)a3, v11) && !v12)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v11 = *((unsigned __int8 *)a3 + 23);
    v12 = a3;
  }
  if (v11 == 3)
  {
    v13 = *v12;
    v14 = *((unsigned __int8 *)v12 + 2);
    v16 = v13 == 20566 && v14 == 57;
  }
  else
  {
    v16 = 0;
  }
  result = operator new();
  v17 = result;
  *(_QWORD *)result = &off_24C0C5608;
  *(_QWORD *)(result + 8) = v10;
  *(_BYTE *)(result + 16) = v16;
  if (v16)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, unsigned __int16 *))(**(_QWORD **)(a1 + 8) + 32))(&v20, *(_QWORD *)(a1 + 8), a2, a3);
    v19 = v17;
    webrtc::CreateVideoDecoderSoftwareFallbackWrapper(a2, &v20, &v19, a4);
    v18 = v19;
    v19 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    result = v20;
    v20 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *a4 = result;
  }
  return result;
}

void sub_2088E2D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *webrtc::createWebKitDecoderFactory@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  WK_RTCDefaultVideoDecoderFactory *v6;
  _QWORD *v7;
  WK_RTCDefaultVideoDecoderFactory *v8;
  _QWORD *result;

  v6 = -[WK_RTCDefaultVideoDecoderFactory initWithH265:vp9Profile0:vp9Profile2:vp9VTB:av1:]([WK_RTCDefaultVideoDecoderFactory alloc], "initWithH265:vp9Profile0:vp9Profile2:vp9VTB:av1:", a1 == 1, a2 > 0, a2 == 2, a3 == 1, a4 == 1);
  v7 = (_QWORD *)operator new();
  v8 = v6;
  *v7 = &unk_24C0B7C20;
  v7[1] = v8;

  result = (_QWORD *)operator new();
  *result = &off_24C0C5660;
  result[1] = v7;
  *a5 = result;
  return result;
}

void sub_2088E2EA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2088E2EC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id webrtc::createLocalH264Decoder(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = -[WK_RTCLocalVideoH264H265VP9Decoder initH264DecoderWithCallback:]([WK_RTCLocalVideoH264H265VP9Decoder alloc], "initH264DecoderWithCallback:", v1);

  return v2;
}

void sub_2088E2F18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id webrtc::createLocalH265Decoder(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = -[WK_RTCLocalVideoH264H265VP9Decoder initH265DecoderWithCallback:]([WK_RTCLocalVideoH264H265VP9Decoder alloc], "initH265DecoderWithCallback:", v1);

  return v2;
}

void sub_2088E2F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id webrtc::createLocalVP9Decoder(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = -[WK_RTCLocalVideoH264H265VP9Decoder initVP9DecoderWithCallback:]([WK_RTCLocalVideoH264H265VP9Decoder alloc], "initVP9DecoderWithCallback:", v1);

  return v2;
}

void sub_2088E2FB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void webrtc::releaseLocalDecoder(webrtc *this, void *a2)
{
  -[webrtc releaseDecoder](this, "releaseDecoder");

}

void sub_2088E2FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t webrtc::setDecodingFormat(webrtc *this, void *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  return -[webrtc setFormat:size:width:height:](this, "setFormat:size:width:height:", a2, a3, a4, a5);
}

uint64_t webrtc::decodeFrame(webrtc *this, void *a2, uint64_t a3, const unsigned __int8 *a4)
{
  return -[webrtc decodeData:size:timeStamp:](this, "decodeData:size:timeStamp:", a3, a4, a2);
}

uint64_t webrtc::setDecoderFrameSize(void *this, const char *a2, uint64_t a3)
{
  return objc_msgSend(this, "setWidth:height:", a2, a3);
}

void webrtc::RemoteVideoDecoderFactory::~RemoteVideoDecoderFactory(webrtc::RemoteVideoDecoderFactory *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

const char *webrtc::RemoteVideoDecoder::ImplementationName(webrtc::RemoteVideoDecoder *this)
{
  return "RemoteVideoToolBox";
}

void webrtc::WebKitDecoderReceiver::~WebKitDecoderReceiver(webrtc::WebKitDecoderReceiver *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 6);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 6);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::WebKitDecoderReceiver::initializeFromFormatDescription(webrtc::WebKitDecoderReceiver *this, CMFormatDescriptionRef desc)
{
  uint64_t result;
  const __CFDictionary *v4;
  CFTypeID v5;
  const __CFData *v6;
  CFTypeID v7;
  char v8;

  *((_WORD *)this + 20) = 0;
  result = (uint64_t)CMFormatDescriptionGetExtensions(desc);
  if (result)
  {
    result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x24BDC0B80]);
    if (result)
    {
      v4 = (const __CFDictionary *)result;
      v5 = CFGetTypeID((CFTypeRef)result);
      result = CFDictionaryGetTypeID();
      if (v5 == result)
      {
        result = (uint64_t)CFDictionaryGetValue(v4, CFSTR("vpcC"));
        if (result)
        {
          v6 = (const __CFData *)result;
          v7 = CFGetTypeID((CFTypeRef)result);
          result = CFDataGetTypeID();
          if (v7 == result)
          {
            result = CFDataGetLength(v6);
            if (result >= 12)
            {
              result = (uint64_t)CFDataGetBytePtr(v6);
              v8 = *(_BYTE *)(result + 6);
              if ((v8 & 0xF0) == 0xA0)
                *((_BYTE *)this + 40) = 1;
              if ((v8 & 1) != 0)
                *((_BYTE *)this + 41) = 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t webrtc::WebKitDecoderReceiver::Decoded(webrtc::WebKitDecoderReceiver *this, webrtc::VideoFrame *a2)
{
  webrtc::ObjCFrameBuffer *v3;
  __CVBuffer *PixelBufferFromFrameBuffer;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C0C56D0;
  v8[1] = this;
  v9 = v8;
  v3 = (webrtc::ObjCFrameBuffer *)*((_QWORD *)a2 + 1);
  if (v3)
    (**(void (***)(_QWORD))v3)(*((_QWORD *)a2 + 1));
  PixelBufferFromFrameBuffer = webrtc::createPixelBufferFromFrameBuffer(v3, (uint64_t)v8);
  (*(void (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)v3 + 8))(v3);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  VTDecoderSessionEmitDecodedFrame();
  *((_QWORD *)this + 2) = 0;
  if (PixelBufferFromFrameBuffer)
    CFRelease(PixelBufferFromFrameBuffer);
  return 0;
}

{
  webrtc::ObjCFrameBuffer *v3;
  __CVBuffer *PixelBufferFromFrameBuffer;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C0C56D0;
  v8[1] = this;
  v9 = v8;
  v3 = (webrtc::ObjCFrameBuffer *)*((_QWORD *)a2 + 1);
  if (v3)
    (**(void (***)(_QWORD))v3)(*((_QWORD *)a2 + 1));
  PixelBufferFromFrameBuffer = webrtc::createPixelBufferFromFrameBuffer(v3, (uint64_t)v8);
  (*(void (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)v3 + 8))(v3);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  VTDecoderSessionEmitDecodedFrame();
  *((_QWORD *)this + 2) = 0;
  if (PixelBufferFromFrameBuffer)
    CFRelease(PixelBufferFromFrameBuffer);
  return 0;
}

void sub_2088E3310(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_2088E3430(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void webrtc::WebKitDecoderReceiver::Decoded(uint64_t a1, uint64_t a2)
{
  webrtc::ObjCFrameBuffer *v3;
  __CVBuffer *PixelBufferFromFrameBuffer;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_24C0C56D0;
  v7[1] = a1;
  v8 = v7;
  v3 = *(webrtc::ObjCFrameBuffer **)(a2 + 8);
  if (v3)
    (**(void (***)(_QWORD))v3)(*(_QWORD *)(a2 + 8));
  PixelBufferFromFrameBuffer = webrtc::createPixelBufferFromFrameBuffer(v3, (uint64_t)v7);
  (*(void (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)v3 + 8))(v3);
  v5 = v8;
  if (v8 == v7)
  {
    v6 = 4;
    v5 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  VTDecoderSessionEmitDecodedFrame();
  *(_QWORD *)(a1 + 16) = 0;
  if (PixelBufferFromFrameBuffer)
    CFRelease(PixelBufferFromFrameBuffer);
}

void sub_2088E354C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<webrtc::WebKitDecoderReceiver::Decoded(webrtc::VideoFrame &)::$_0,std::allocator<webrtc::WebKitDecoderReceiver::Decoded(webrtc::VideoFrame &)::$_0>,__CVBuffer * ()(unsigned long,unsigned long,webrtc::BufferType)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::WebKitDecoderReceiver::Decoded(webrtc::VideoFrame &)::$_0,std::allocator<webrtc::WebKitDecoderReceiver::Decoded(webrtc::VideoFrame &)::$_0>,__CVBuffer * ()(unsigned long,unsigned long,webrtc::BufferType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0C56D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::WebKitDecoderReceiver::Decoded(webrtc::VideoFrame &)::$_0,std::allocator<webrtc::WebKitDecoderReceiver::Decoded(webrtc::VideoFrame &)::$_0>,__CVBuffer * ()(unsigned long,unsigned long,webrtc::BufferType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0C56D0;
  a2[1] = v2;
  return result;
}

const void *std::__function::__func<webrtc::WebKitDecoderReceiver::Decoded(webrtc::VideoFrame &)::$_0,std::allocator<webrtc::WebKitDecoderReceiver::Decoded(webrtc::VideoFrame &)::$_0>,__CVBuffer * ()(unsigned long,unsigned long,webrtc::BufferType)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __CVPixelBufferPool *v8;
  const __CFAllocator *v9;
  int v10;
  int v11;
  int v12;
  __CFArray *Mutable;
  CFNumberRef v14;
  CFNumberRef v15;
  const void *v16;
  const void *v17;
  CFDictionaryRef v18;
  const void *v19;
  const void *result;
  void *values[5];
  const void *valuePtr[6];

  valuePtr[5] = *(const void **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v6 = *a3;
  v7 = *a4 == 1;
  v8 = *(__CVPixelBufferPool **)(v4 + 48);
  if (v8 && *(_QWORD *)(v4 + 24) == v5 && *(_QWORD *)(v4 + 32) == v6 && *(unsigned __int8 *)(v4 + 40) == v7)
  {
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  }
  else
  {
    if (*(_BYTE *)(v4 + 41))
      v10 = 2019963440;
    else
      v10 = 2016686640;
    if (*(_BYTE *)(v4 + 41))
      v11 = 875704422;
    else
      v11 = 875704438;
    if (*a4 == 1)
      v12 = v10;
    else
      v12 = v11;
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 2, MEMORY[0x24BDBD690]);
    LODWORD(valuePtr[0]) = v12;
    v14 = CFNumberCreate(v9, kCFNumberSInt32Type, valuePtr);
    CFArrayAppendValue(Mutable, v14);
    CFRelease(v14);
    LODWORD(valuePtr[0]) = 32;
    v15 = CFNumberCreate(v9, kCFNumberSInt32Type, valuePtr);
    v16 = (const void *)*MEMORY[0x24BDC5620];
    valuePtr[0] = *(const void **)MEMORY[0x24BDC56B8];
    valuePtr[1] = v16;
    v17 = (const void *)*MEMORY[0x24BDC5638];
    valuePtr[2] = *(const void **)MEMORY[0x24BDC5628];
    valuePtr[3] = v17;
    valuePtr[4] = *(const void **)MEMORY[0x24BDC5610];
    values[0] = Mutable;
    values[1] = v15;
    values[2] = v15;
    values[3] = v15;
    values[4] = v15;
    v18 = CFDictionaryCreate(v9, valuePtr, (const void **)values, 5, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFRelease(v15);
    CFRelease(Mutable);
    VTDecoderSessionSetPixelBufferAttributes();
    CFRelease(v18);
    v19 = *(const void **)(v4 + 48);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(v4 + 48) = 0;
    }
    result = (const void *)VTDecoderSessionGetPixelBufferPool();
    *(_QWORD *)(v4 + 48) = result;
    if (!result)
    {
      *(_QWORD *)(v4 + 24) = v5;
      *(_QWORD *)(v4 + 32) = v6;
      *(_BYTE *)(v4 + 40) = v7;
      return result;
    }
    CFRetain(result);
    v8 = *(__CVPixelBufferPool **)(v4 + 48);
    *(_QWORD *)(v4 + 24) = v5;
    *(_QWORD *)(v4 + 32) = v6;
    *(_BYTE *)(v4 + 40) = v7;
    if (!v8)
      return 0;
  }
  valuePtr[0] = 0;
  if (CVPixelBufferPoolCreatePixelBuffer(v9, v8, (CVPixelBufferRef *)valuePtr))
    return 0;
  else
    return valuePtr[0];
}

void sub_2088E3978(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2088E3990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2088E3A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2088E3AA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2088E3B38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2088E3C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2088E3C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *webrtc::VideoEncoderFactoryWithSimulcast::Create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, webrtc::SdpVideoFormat *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = operator new();
  result = webrtc::SimulcastEncoderAdapter::SimulcastEncoderAdapter(v8, a2, v7, 0, a3);
  *a4 = result;
  return result;
}

_QWORD *webrtc::RemoteVideoEncoderFactory::Create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (!_MergedGlobals_23)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3);
  v8 = _MergedGlobals_23(a3);
  if (!v8)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3);
  v9 = v8;
  result = (_QWORD *)operator new();
  *result = &off_24C0C5760;
  result[1] = v9;
  *a4 = result;
  return result;
}

_QWORD *webrtc::createWebKitEncoderFactory@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  WK_RTCDefaultVideoEncoderFactory *v6;
  _QWORD *v7;
  WK_RTCDefaultVideoEncoderFactory *v8;
  _QWORD *v9;
  _QWORD *result;

  v6 = -[WK_RTCDefaultVideoEncoderFactory initWithH265:vp9Profile0:vp9Profile2:lowLatencyH264:av1:]([WK_RTCDefaultVideoEncoderFactory alloc], "initWithH265:vp9Profile0:vp9Profile2:lowLatencyH264:av1:", a1 == 1, a2 > 0, a2 == 2, a3 == 1, a4 == 1);
  v7 = (_QWORD *)operator new();
  v8 = v6;
  *v7 = &unk_24C0B7CD0;
  v7[1] = v8;

  v9 = (_QWORD *)operator new();
  *v9 = off_24C0C5718;
  v9[1] = v7;
  result = (_QWORD *)operator new();
  *result = off_24C0C5828;
  result[1] = v9;
  *a5 = result;
  return result;
}

void sub_2088E3EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<webrtc::RemoteVideoEncoderFactory>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2088E3F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  _Unwind_Resume(a1);
}

void sub_2088E3F24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<webrtc::RemoteVideoEncoderFactory>::~unique_ptr[abi:sn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    MEMORY[0x20BD0ADEC](v2, 0xA1C40BD48D6D6);
  }
  return a1;
}

void webrtc::RemoteVideoEncoder::~RemoteVideoEncoder(webrtc::RemoteVideoEncoder *this)
{
  off_253EA5B08(*((_QWORD *)this + 1));
}

{
  off_253EA5B08(*((_QWORD *)this + 1));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RemoteVideoEncoder::InitEncode(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int32 *v6;
  int32x4_t v7;
  uint64_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  BOOL v15;

  v2 = *(unsigned __int8 *)(a2 + 32);
  if (v2 <= 1)
    v3 = 1;
  else
    v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 >= 8)
  {
    v4 = v3 & 0xF8;
    v6 = (__int32 *)(a2 + 160);
    v7 = 0uLL;
    v8 = v4;
    v9 = 0uLL;
    do
    {
      v10.i32[0] = *(v6 - 27);
      v10.i32[1] = *(v6 - 18);
      v10.i32[2] = *(v6 - 9);
      v10.i32[3] = *v6;
      v11.i32[0] = v6[9];
      v11.i32[1] = v6[18];
      v11.i32[2] = v6[27];
      v11.i32[3] = v6[36];
      v7 = vaddq_s32(v10, v7);
      v9 = vaddq_s32(v11, v9);
      v6 += 72;
      v8 -= 8;
    }
    while (v8);
    v5 = vaddvq_s32(vaddq_s32(v9, v7));
    if (v4 == v3)
      goto LABEL_11;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v12 = v3 - v4;
  v13 = (int *)(a2 + 36 * v4 + 52);
  do
  {
    v14 = *v13;
    v13 += 9;
    v5 += v14;
    --v12;
  }
  while (v12);
LABEL_11:
  if (v5)
    v15 = v2 > 1;
  else
    v15 = 0;
  if (v15)
    return 4294967281;
  else
    return off_253EA5B10(*(_QWORD *)(a1 + 8));
}

uint64_t webrtc::RemoteVideoEncoder::Release(webrtc::RemoteVideoEncoder *this)
{
  off_253EA5B20(*((_QWORD *)this + 1), 0);
  return 0;
}

uint64_t webrtc::RemoteVideoEncoder::RegisterEncodeCompleteCallback(uint64_t a1, uint64_t a2)
{
  return off_253EA5B20(*(_QWORD *)(a1 + 8), a2);
}

uint64_t webrtc::RemoteVideoEncoder::Encode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v3 = *(_DWORD **)a3;
  v4 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (!v4)
    return off_253EA5B18(*(_QWORD *)(a1 + 8), a2, 0);
  v5 = v4 >> 2;
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = v5;
  if (*v3 == 3)
    return off_253EA5B18(*(_QWORD *)(a1 + 8), a2, 1);
  v8 = 1;
  do
  {
    v9 = v8;
    if (v6 == v8)
      break;
    v10 = v3[v8++];
  }
  while (v10 != 3);
  return off_253EA5B18(*(_QWORD *)(a1 + 8), a2, v9 < v5);
}

uint64_t webrtc::RemoteVideoEncoder::SetRates(webrtc::RemoteVideoEncoder *this, const webrtc::VideoEncoder::RateControlParameters *a2)
{
  return off_253EA5B28(*((_QWORD *)this + 1), a2);
}

void webrtc::RemoteVideoEncoder::GetEncoderInfo(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 12) = 0x10000E100;
  *(_WORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 47) = 7;
  if (a1 + 24 <= (unint64_t)"unknown" && a1 + 31 > (unint64_t)"unknown")
  {
    __break(1u);
  }
  else
  {
    *(_BYTE *)(a1 + 64) = -1;
    *(_QWORD *)(a1 + 56) = 2;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_BYTE *)(a1 + 200) = 0;
    *(_DWORD *)(a1 + 216) = 1;
    *(_QWORD *)(a1 + 208) = 2;
    *(_WORD *)(a1 + 240) = 0;
    *(_BYTE *)(a1 + 21) = 1;
    *(_WORD *)(a1 + 47) = 18;
    strcpy((char *)(a1 + 24), "RemoteVideoToolBox");
    *(_BYTE *)(a1 + 49) = 1;
    *(_QWORD *)a1 = 0x270000001CLL;
    *(_BYTE *)(a1 + 8) = 1;
    *(_DWORD *)(a1 + 12) = 57600;
  }
}

void webrtc::encoderVideoTaskComplete(uint64_t a1, int a2, const void *a3, size_t a4, uint64_t *a5)
{
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  void **v21;
  void **v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  int v28;
  _BYTE v29[72];
  char v30;
  char v31;
  uint64_t v32;
  _QWORD v33[2];
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  _QWORD *v41;
  _QWORD v42[2];
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  _BYTE v50[1640];
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  void *v59;
  char v60;
  char v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  void *__p;
  void **v67;
  char v68;
  __int16 v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v25 = 0uLL;
  v26 = 4;
  v27 = 0;
  v28 = -1;
  v29[0] = -1;
  v31 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v42[0] = 0;
  v42[1] = 0;
  memset(&v29[8], 0, 64);
  v30 = 0;
  v32 = 0;
  memset(v33, 0, 13);
  v41 = v42;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 1;
  v10 = operator new();
  *(_QWORD *)(v10 + 8) = a4;
  v11 = malloc_type_malloc(a4, 0xB64CC8DFuLL);
  *(_QWORD *)(v10 + 16) = v11;
  if (a4)
    memmove(v11, a3, a4);
  *(_QWORD *)v10 = &unk_24C0B3A40;
  *(_DWORD *)(v10 + 24) = 0;
  v12 = (unsigned int *)(v10 + 24);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  rtc::RefCountedObject<webrtc::EncodedImageBuffer>::AddRef(v10);
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v32 = v10;
  v33[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v14 = *((unsigned __int8 *)a5 + 52) - 1;
  v15 = 90 * (*((_BYTE *)a5 + 52) - 1) + 90;
  v24 = *a5;
  *(_QWORD *)&v29[64] = a5[16];
  v16 = a5[1];
  v25 = *((_OWORD *)a5 + 2);
  v17 = *((_OWORD *)a5 + 7);
  *(_OWORD *)&v29[32] = *((_OWORD *)a5 + 6);
  *(_OWORD *)&v29[48] = v17;
  v18 = *((_OWORD *)a5 + 5);
  *(_OWORD *)v29 = *((_OWORD *)a5 + 4);
  *(_OWORD *)&v29[16] = v18;
  if (v14 >= 3)
    v19 = 0;
  else
    v19 = v15;
  LODWORD(v26) = *((_DWORD *)a5 + 12);
  HIDWORD(v26) = v19;
  v20 = *((_DWORD *)a5 + 14);
  LODWORD(v33[1]) = v16;
  v28 = v20;
  v27 = *((_BYTE *)a5 + 53);
  v50[1624] = 1;
  v50[1632] = 0;
  v60 = 0;
  v61 = 0;
  v68 = 0;
  v69 = 0;
  bzero(v50, 0x658uLL);
  v49 = a2;
  (*(void (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)a1 + 16))(a1, &v24, &v49);
  if (v68)
  {
    v21 = (void **)__p;
    if (!__p)
    {
LABEL_24:
      if ((v64 & 1) != 0)
        operator delete(v65);
      if ((v62 & 1) != 0)
        operator delete(v63);
      goto LABEL_28;
    }
    v22 = v67;
    v23 = __p;
    if (v67 == __p)
    {
LABEL_23:
      v67 = v21;
      operator delete(v23);
      goto LABEL_24;
    }
    while (1)
    {
      if ((*(_BYTE *)(v22 - 3) & 1) != 0)
      {
        operator delete(*(v22 - 2));
        if ((*(_BYTE *)(v22 - 6) & 1) == 0)
        {
LABEL_17:
          if ((*(_BYTE *)(v22 - 12) & 1) != 0)
            goto LABEL_21;
          goto LABEL_14;
        }
      }
      else if ((*(_BYTE *)(v22 - 6) & 1) == 0)
      {
        goto LABEL_17;
      }
      operator delete(*(v22 - 5));
      if ((*(_BYTE *)(v22 - 12) & 1) != 0)
LABEL_21:
        operator delete(*(v22 - 11));
LABEL_14:
      v22 -= 13;
      if (v22 == v21)
      {
        v23 = __p;
        goto LABEL_23;
      }
    }
  }
LABEL_28:
  if (!v60)
    goto LABEL_36;
  if (v59)
    operator delete(v59);
  if ((v57 & 1) != 0)
  {
    operator delete(v58);
    if ((v55 & 1) == 0)
    {
LABEL_33:
      if ((v53 & 1) == 0)
        goto LABEL_34;
LABEL_39:
      operator delete(v54);
      if ((v51 & 1) == 0)
        goto LABEL_36;
      goto LABEL_35;
    }
  }
  else if ((v55 & 1) == 0)
  {
    goto LABEL_33;
  }
  operator delete(v56);
  if ((v53 & 1) != 0)
    goto LABEL_39;
LABEL_34:
  if ((v51 & 1) != 0)
LABEL_35:
    operator delete(v52);
LABEL_36:
  webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)&v24);
}

void sub_2088E4604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)va);
  _Unwind_Resume(a1);
}

WK_RTCLocalVideoH264H265Encoder *webrtc::createLocalEncoder(const webrtc::SdpVideoFormat *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  WK_RTCVideoCodecInfo *v14;
  WK_RTCVideoCodecInfo *v15;
  WK_RTCLocalVideoH264H265Encoder *v16;
  uint64_t v17;
  WK_RTCLocalVideoH264H265Encoder *v18;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;
  std::string v24;
  uint64_t v25[3];
  char v26;
  void *__p;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = [WK_RTCVideoCodecInfo alloc];
  webrtc::SdpVideoFormat::SdpVideoFormat(&v24, a1);
  v15 = -[WK_RTCVideoCodecInfo initWithNativeSdpVideoFormat:](v14, "initWithNativeSdpVideoFormat:", &v24);
  if ((v26 & 1) != 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v25, v25[1]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  v16 = -[WK_RTCLocalVideoH264H265Encoder initWithCodecInfo:scalabilityMode:]([WK_RTCLocalVideoH264H265Encoder alloc], "initWithCodecInfo:scalabilityMode:", v15, a3);
  if (v16)
  {
    v17 = MEMORY[0x24BDAC760];
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = ___ZN6webrtc18createLocalEncoderERKNS_14SdpVideoFormatEbNS_27LocalEncoderScalabilityModeEU13block_pointerFvPKhmRKNS_22WebKitEncodedFrameInfoEEU13block_pointerFvS5_mEU13block_pointerFvbE_block_invoke;
    v22[3] = &unk_24C0C57D0;
    v23 = v11;
    -[WK_RTCLocalVideoH264H265Encoder setCallback:](v16, "setCallback:", v22);
    -[WK_RTCLocalVideoH264H265Encoder setUseAnnexB:](v16, "setUseAnnexB:", a2);
    -[WK_RTCLocalVideoH264H265Encoder setDescriptionCallback:](v16, "setDescriptionCallback:", v12);
    v20[0] = v17;
    v20[1] = 3221225472;
    v20[2] = ___ZN6webrtc18createLocalEncoderERKNS_14SdpVideoFormatEbNS_27LocalEncoderScalabilityModeEU13block_pointerFvPKhmRKNS_22WebKitEncodedFrameInfoEEU13block_pointerFvS5_mEU13block_pointerFvbE_block_invoke_2;
    v20[3] = &unk_24C0C57F8;
    v21 = v13;
    -[WK_RTCLocalVideoH264H265Encoder setErrorCallback:](v16, "setErrorCallback:", v20);
    v18 = v16;

  }
  return v16;
}

void sub_2088E4810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t ___ZN6webrtc18createLocalEncoderERKNS_14SdpVideoFormatEbNS_27LocalEncoderScalabilityModeEU13block_pointerFvPKhmRKNS_22WebKitEncodedFrameInfoEEU13block_pointerFvS5_mEU13block_pointerFvbE_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  int v19;
  char v20;
  char v21;
  char v22;
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[14];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v7)
  {
    objc_msgSend(v7, "nativeEncodedImage");
    v10 = v30[0];
  }
  else
  {
    v10 = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    memset(v30, 0, sizeof(v30));
  }
  v17 = 0;
  LOBYTE(v16) = 0;
  v22 = 0;
  v15[0] = v10;
  v15[1] = objc_msgSend(v7, "timeStamp");
  if (objc_msgSend(v7, "duration") != -1)
  {
    v16 = objc_msgSend(v7, "duration");
    v17 = 1;
  }
  v18 = *(_OWORD *)&v30[1];
  v19 = v30[3];
  if (HIDWORD(v30[3]) == 270)
  {
    v11 = 3;
  }
  else if (HIDWORD(v30[3]) == 180)
  {
    v11 = 2;
  }
  else
  {
    v11 = HIDWORD(v30[3]) == 90;
  }
  v20 = v11;
  v21 = v30[4];
  v23 = HIDWORD(v30[4]);
  v27 = *(_OWORD *)&v30[9];
  v28 = *(_OWORD *)&v30[11];
  v29 = v30[13];
  v25 = *(_OWORD *)&v30[5];
  v26 = *(_OWORD *)&v30[7];
  v24 = objc_msgSend(v7, "temporalIndex");
  v12 = *(_QWORD *)(a1 + 32);
  if (*((_QWORD *)&v32 + 1))
    v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 40))(*((_QWORD *)&v32 + 1));
  else
    v13 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(v12 + 16))(v12, v13, v33, v15);
  webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)v30);

  return 1;
}

void sub_2088E4A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)&a27);

  _Unwind_Resume(a1);
}

uint64_t ___ZN6webrtc18createLocalEncoderERKNS_14SdpVideoFormatEbNS_27LocalEncoderScalabilityModeEU13block_pointerFvPKhmRKNS_22WebKitEncodedFrameInfoEEU13block_pointerFvS5_mEU13block_pointerFvbE_block_invoke_2(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2 == 0);
}

void webrtc::releaseLocalEncoder(webrtc *this, void *a2)
{
  -[webrtc releaseEncoder](this, "releaseEncoder");

}

void sub_2088E4AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void webrtc::initializeLocalEncoder(webrtc *this, void *a2, __int16 a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  __int16 v12;
  webrtc *v13;
  WK_RTCVideoEncoderSettings *v14;
  uint64_t v15;
  unsigned int v16;
  _BYTE v17[96];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v12 = (__int16)a2;
  v13 = this;
  LODWORD(v15) = 0;
  LOBYTE(v16) = 1;
  v17[0] = 0;
  memset(&v17[4], 0, 48);
  *(_DWORD *)&v17[52] = 1;
  memset(&v17[68], 0, 20);
  v18 = 0u;
  v19 = 0u;
  v17[16] = 1;
  v17[72] = 0;
  DWORD2(v18) = 0;
  BYTE12(v18) = 0;
  v22 = 0u;
  v20 = 0u;
  v21 = 0u;
  BYTE12(v19) = 1;
  BYTE8(v20) = 1;
  *(_QWORD *)((char *)&v21 + 4) = 0;
  LODWORD(v21) = 0;
  BYTE12(v21) = 0;
  BYTE12(v22) = 1;
  LOBYTE(v23) = 0;
  LOWORD(v24) = 0;
  LOBYTE(v25) = 0;
  LODWORD(v27) = 0;
  BYTE4(v27) = 0;
  LODWORD(v26) = 0;
  WORD2(v26) = 0;
  WORD2(v15) = v12;
  HIWORD(v15) = a3;
  LODWORD(v15) = -[webrtc codecType](v13, "codecType", v15, __PAIR64__(a5, a4), __PAIR64__(a7, a6), v16, *(_QWORD *)v17, 0, *(_QWORD *)&v17[16], 0, *(_QWORD *)&v17[32], 0, *(_QWORD *)&v17[48], 0, 0, *(_OWORD *)&v17[72], (unsigned __int128)1u, *((_QWORD *)&v18 + 1), 0,
                   *((_QWORD *)&v19 + 1),
                   0,
                   0,
                   0,
                   0,
                   (unsigned __int128)1u,
                   0,
                   0,
                   0x100000000,
                   0,
                   0,
                   0,
                   0,
                   DWORD2(v20),
                   v21,
                   0,
                   *((_QWORD *)&v22 + 1),
                   0,
                   0,
                   0,
                   v23,
                   0,
                   v24,
                   v25,
                   0,
                   v26,
                   v27);
  v14 = -[WK_RTCVideoEncoderSettings initWithNativeVideoCodec:]([WK_RTCVideoEncoderSettings alloc], "initWithNativeVideoCodec:", &v15);
  -[webrtc startEncodeWithSettings:numberOfCores:](v13, "startEncodeWithSettings:numberOfCores:", v14, 1, v15);

}

void sub_2088E4C58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2088E4C6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void webrtc::encodeLocalEncoderFrame(void *a1, webrtc *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, unsigned int a7, int a8)
{
  void *v16;
  void *v17;
  WK_RTCVideoFrame *v18;
  void *v19;
  WK_RTCVideoFrame *v20;
  uint64_t v21;
  webrtc::ObjCFrameBuffer *v22;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v16;
  if (a8)
    objc_msgSend(v16, "addObject:", &unk_24C0E6FC8);
  webrtc::pixelBufferToFrame(a2, (uint64_t *)&v22);
  v18 = [WK_RTCVideoFrame alloc];
  webrtc::ToObjCVideoFrameBuffer(&v22);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[WK_RTCVideoFrame initWithBuffer:rotation:timeStampNs:](v18, "initWithBuffer:rotation:timeStampNs:", v19, a7, a3);

  -[WK_RTCVideoFrame setTimeStamp:](v20, "setTimeStamp:", a4);
  if (a6)
    v21 = a5;
  else
    v21 = -1;
  -[WK_RTCVideoFrame setDuration:](v20, "setDuration:", v21);
  objc_msgSend(a1, "encode:codecSpecificInfo:frameTypes:", v20, 0, v17);

  if (v22)
    (*(void (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)v22 + 8))(v22);

}

void sub_2088E4D98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2088E4DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);

  _Unwind_Resume(a1);
}

uint64_t webrtc::setLocalEncoderRates(void *this, const char *a2, uint64_t a3)
{
  return objc_msgSend(this, "setBitrate:framerate:", a2, a3);
}

uint64_t webrtc::setLocalEncoderLowLatency(void *this, const char *a2)
{
  return objc_msgSend(this, "setLowLatency:", a2);
}

uint64_t webrtc::VideoEncoderFactoryWithSimulcast::GetSupportedFormats(webrtc::VideoEncoderFactoryWithSimulcast *this)
{
  return (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
}

void webrtc::VideoEncoderFactoryWithSimulcast::~VideoEncoderFactoryWithSimulcast(webrtc::VideoEncoderFactoryWithSimulcast *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RemoteVideoEncoderFactory::GetSupportedFormats(webrtc::RemoteVideoEncoderFactory *this)
{
  return (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
}

void webrtc::RemoteVideoEncoderFactory::~RemoteVideoEncoderFactory(webrtc::RemoteVideoEncoderFactory *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::pixelBufferToFrame(webrtc *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WK_RTCCVPixelBuffer *v7;

  v7 = -[WK_RTCCVPixelBuffer initWithPixelBuffer:]([WK_RTCCVPixelBuffer alloc], "initWithPixelBuffer:", this);
  v4 = operator new();
  webrtc::ObjCFrameBuffer::ObjCFrameBuffer(v4, v7);
  *(_QWORD *)v4 = &unk_24C0B7BA8;
  *(_DWORD *)(v4 + 120) = 0;
  v5 = (unsigned int *)(v4 + 120);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  *a2 = v4;

}

void sub_2088E4FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x20BD0ADEC](v10, 0x10A1C40A31BA2F2);

  _Unwind_Resume(a1);
}

void sub_2088E4FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t webrtc::toWebRTCVideoFrameBuffer@<X0>(webrtc *this@<X0>, void *a2@<X1>, __CVBuffer *(*a3)(void *)@<X2>, void (*a4)(void *)@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  int v7;
  uint64_t v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;
  pthread_mutexattr_t v16;
  uint64_t v17;

  v7 = (int)a4;
  v17 = *MEMORY[0x24BDAC8D0];
  v12 = operator new();
  *(_QWORD *)v12 = &unk_24C0B79D0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = this;
  *(_QWORD *)(v12 + 24) = a2;
  *(_QWORD *)(v12 + 32) = a3;
  *(_QWORD *)(v12 + 40) = 0;
  *(_DWORD *)(v12 + 48) = v7;
  *(_DWORD *)(v12 + 52) = a5;
  pthread_mutexattr_init(&v16);
  pthread_mutexattr_setpolicy_np(&v16, 3);
  pthread_mutex_init((pthread_mutex_t *)(v12 + 56), &v16);
  result = pthread_mutexattr_destroy(&v16);
  *(_QWORD *)v12 = &unk_24C0B7BA8;
  *(_DWORD *)(v12 + 120) = 0;
  v14 = (unsigned int *)(v12 + 120);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  *a6 = v12;
  return result;
}

void sub_2088E5114(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 40);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  MEMORY[0x20BD0ADEC](v1, 0x10A1C40A31BA2F2);
  _Unwind_Resume(a1);
}

uint64_t webrtc::videoFrameBufferProvider(webrtc *this, const webrtc::VideoFrame *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(_QWORD, const webrtc::VideoFrame *))*v2)(*((_QWORD *)this + 1), a2);
  if ((*(unsigned int (**)(_QWORD *, const webrtc::VideoFrame *))(*v2 + 32))(v2, a2))
    v3 = 0;
  else
    v3 = v2[2];
  (*(void (**)(_QWORD *))(*v2 + 8))(v2);
  return v3;
}

void sub_2088E51BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

CVPixelBufferRef webrtc::createPixelBufferFromI420Buffer(uint64_t a1, uint64_t a2, size_t width, size_t height, _OWORD *a5)
{
  CVReturn v10;
  CVPixelBufferRef result;
  BOOL v12;
  CVReturn v13;
  __int128 v14;
  BOOL v15;
  _OWORD v16[3];
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v10 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], width, height, 0x34323066u, 0, &pixelBufferOut);
  result = 0;
  if (v10)
    v12 = 1;
  else
    v12 = pixelBufferOut == 0;
  if (!v12)
  {
    v13 = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    result = 0;
    if (!v13)
    {
      v14 = a5[1];
      v16[0] = *a5;
      v16[1] = v14;
      v16[2] = a5[2];
      v15 = webrtc::copyI420BufferToPixelBuffer(pixelBufferOut, a1, a2, width, height, v16);
      CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
      result = pixelBufferOut;
      if (!v15)
      {
        CFRelease(pixelBufferOut);
        return 0;
      }
    }
  }
  return result;
}

BOOL webrtc::copyI420BufferToPixelBuffer(__CVBuffer *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, _QWORD *a6)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t v14;
  size_t v15;
  _BOOL8 result;
  unint64_t v17;
  char *BaseAddressOfPlane;
  int BytesPerRowOfPlane;
  char *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  const char *v27;
  const char *v28;

  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  v14 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v15 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  result = 0;
  if (WidthOfPlane == a4 && HeightOfPlane == a5 && (unint64_t)(a4 + 1) >> 1 == v14)
  {
    v17 = (a5 + 1) >> 1;
    if (v17 == v15)
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      v20 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      v21 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
      result = 0;
      v22 = a6[1];
      if (v22)
      {
        v23 = a6[3];
        if (v23)
        {
          v24 = a6[5];
          if (v24)
          {
            if (is_mul_ok(v17, v23) && is_mul_ok(v17, v24) && is_mul_ok(a5, v22))
            {
              result = 0;
              v25 = (char *)(a2 + *a6);
              v26 = a2 + a3;
              if (a2 + a3 >= (unint64_t)&v25[a5 * v22])
              {
                v27 = (const char *)(a2 + a6[2]);
                if (v26 >= (unint64_t)&v27[v17 * v23])
                {
                  v28 = (const char *)(a2 + a6[4]);
                  if (v26 >= (unint64_t)&v28[v17 * v24])
                    return I420ToNV12(v25, v22, v27, v23, v28, v24, BaseAddressOfPlane, BytesPerRowOfPlane, v20, v21, a4, a5) == 0;
                }
              }
            }
            else
            {
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

CVPixelBufferRef webrtc::createPixelBufferFromI420ABuffer(uint64_t a1, uint64_t a2, size_t width, size_t height, uint64_t a5)
{
  unint64_t v6;
  CVReturn v10;
  CVPixelBufferRef result;
  BOOL v12;
  CVReturn v13;
  __int128 v14;
  _BOOL4 v15;
  __CVBuffer *v16;
  char *BaseAddressOfPlane;
  int BytesPerRowOfPlane;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _OWORD v23[3];
  CVPixelBufferRef pixelBufferOut;

  v6 = height;
  pixelBufferOut = 0;
  v10 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], width, height, 0x76306138u, 0, &pixelBufferOut);
  result = 0;
  if (v10)
    v12 = 1;
  else
    v12 = pixelBufferOut == 0;
  if (!v12)
  {
    v13 = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    result = 0;
    if (!v13)
    {
      v14 = *(_OWORD *)(a5 + 16);
      v23[0] = *(_OWORD *)a5;
      v23[1] = v14;
      v23[2] = *(_OWORD *)(a5 + 32);
      v15 = webrtc::copyI420BufferToPixelBuffer(pixelBufferOut, a1, a2, width, v6, v23);
      v16 = pixelBufferOut;
      if (v15)
      {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 2uLL);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 2uLL);
        if (!v6)
        {
LABEL_11:
          CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
          return pixelBufferOut;
        }
        v19 = a1 + a2;
        v20 = *(int *)(a5 + 56);
        v21 = (char *)(a1 + *(_QWORD *)(a5 + 48));
        v22 = BytesPerRowOfPlane;
        while ((unint64_t)&v21[width] <= v19)
        {
          memcpy(BaseAddressOfPlane, v21, width);
          v21 += v20;
          BaseAddressOfPlane += v22;
          if (!--v6)
            goto LABEL_11;
        }
        v16 = pixelBufferOut;
      }
      CVPixelBufferUnlockBaseAddress(v16, 0);
      CFRelease(pixelBufferOut);
      return 0;
    }
  }
  return result;
}

__CVBuffer *webrtc::createPixelBufferFromFrame(uint64_t a1, uint64_t a2)
{
  webrtc::ObjCFrameBuffer *v3;
  __CVBuffer *PixelBufferFromFrameBuffer;

  v3 = *(webrtc::ObjCFrameBuffer **)(a1 + 8);
  if (v3)
    (**(void (***)(_QWORD))v3)(*(_QWORD *)(a1 + 8));
  PixelBufferFromFrameBuffer = webrtc::createPixelBufferFromFrameBuffer(v3, a2);
  (*(void (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)v3 + 8))(v3);
  return PixelBufferFromFrameBuffer;
}

void sub_2088E5660(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

__CVBuffer *webrtc::createPixelBufferFromFrameBuffer(webrtc::ObjCFrameBuffer *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __CVBuffer *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  void *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  size_t v45;
  size_t v46;
  int v47;
  size_t v48;
  size_t v49;
  BOOL v50;
  char *v52;
  int v53;
  const char *v54;
  int v55;
  const char *v56;
  int v57;
  int v58;
  int v59;
  _Unwind_Exception *v60;
  uint64_t v61;
  size_t BytesPerRowOfPlane;
  void *BaseAddressOfPlane;
  int v64;
  int v65;
  int v66;
  uint16x8_t *v67;
  char *v68;
  uint16x8_t *v69;
  int v70;
  int16x8_t *v71;
  char *v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;

  if (!(*(unsigned int (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 32))(a1))
  {
    webrtc::ObjCFrameBuffer::wrapped_frame_buffer(a1);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v29 = v28;
      v10 = CVPixelBufferRetain((CVPixelBufferRef)objc_msgSend(v29, "pixelBuffer"));

    }
    else
    {
      v10 = 0;
    }

    return v10;
  }
  v4 = (*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 32))(a1);
  if ((v4 & 0xFFFFFFFB) != 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      goto LABEL_26;
    return 0;
  }
  v5 = (void *)v4;
  v6 = (*(int (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 40))(a1);
  v7 = (*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 48))(a1);
  v75 = v6;
  v74 = v7;
  v73 = (_DWORD)v5 != 1;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
  {
    std::__throw_bad_function_call[abi:sn180100]();
    goto LABEL_48;
  }
  v9 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, _BOOL4 *))(*(_QWORD *)v8 + 48))(v8, &v75, &v74, &v73);
  if (!v9)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_26:
      rtc::webrtc_logging_impl::Log("\r\t", v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitUtilities.mm");
    return 0;
  }
  v10 = (__CVBuffer *)v9;
  v11 = *(_QWORD *)a1;
  if ((_DWORD)v5 != 1)
  {
    if ((*(unsigned int (**)(webrtc::ObjCFrameBuffer *))(v11 + 32))(a1) == 5)
    {
      if (!CVPixelBufferLockBaseAddress(v10, 0))
      {
        v71 = (int16x8_t *)(*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 136))(a1);
        v69 = (uint16x8_t *)(*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 144))(a1);
        v67 = (uint16x8_t *)(*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 152))(a1);
        v16 = (*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 40))(a1);
        v17 = (*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 48))(a1);
        v66 = (*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 112))(a1);
        v18 = (*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 40))(a1);
        v19 = v18 >= -1 ? v18 + 1 : v18 + 2;
        v20 = (*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 48))(a1);
        v21 = v20 >= -1 ? v20 + 1 : v20 + 2;
        v65 = (*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 120))(a1);
        v64 = (*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)a1 + 128))(a1);
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v10, 0);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v10, 0);
        WidthOfPlane = CVPixelBufferGetWidthOfPlane(v10, 0);
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(v10, 0);
        v24 = CVPixelBufferGetBaseAddressOfPlane(v10, 1uLL);
        v25 = CVPixelBufferGetBytesPerRowOfPlane(v10, 1uLL);
        v26 = CVPixelBufferGetWidthOfPlane(v10, 1uLL);
        v27 = CVPixelBufferGetHeightOfPlane(v10, 1uLL);
        if (WidthOfPlane == v16 && HeightOfPlane == v17 && v26 == (uint64_t)v19 >> 1 && v27 == (uint64_t)v21 >> 1)
        {
          I010ToP010(v71, v66, v69, v65, v67, v64, (uint64_t)BaseAddressOfPlane, BytesPerRowOfPlane >> 1, (uint64_t)v24, v25 >> 1, v16, v17);
LABEL_46:
          CVPixelBufferUnlockBaseAddress(v10, 0);
          return v10;
        }
      }
      return v10;
    }
LABEL_48:
    v60 = (_Unwind_Exception *)rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_frame_buffer.cc", 59, "type() == Type::kI010", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v12, v13, v14, v15, v61);

    _Unwind_Resume(v60);
  }
  v38 = (*(uint64_t (**)(webrtc::ObjCFrameBuffer *))(v11 + 64))(a1);
  if (!CVPixelBufferLockBaseAddress(v10, 0))
  {
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38);
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
    v42 = v41 >= -1 ? v41 + 1 : v41 + 2;
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38);
    v44 = v43 >= -1 ? v43 + 1 : v43 + 2;
    v72 = (char *)CVPixelBufferGetBaseAddressOfPlane(v10, 0);
    v70 = CVPixelBufferGetBytesPerRowOfPlane(v10, 0);
    v45 = CVPixelBufferGetWidthOfPlane(v10, 0);
    v46 = CVPixelBufferGetHeightOfPlane(v10, 0);
    v68 = (char *)CVPixelBufferGetBaseAddressOfPlane(v10, 1uLL);
    v47 = CVPixelBufferGetBytesPerRowOfPlane(v10, 1uLL);
    v48 = CVPixelBufferGetWidthOfPlane(v10, 1uLL);
    v49 = CVPixelBufferGetHeightOfPlane(v10, 1uLL);
    if (v45 == v39)
    {
      v50 = v46 == v40 && v48 == (uint64_t)v42 >> 1;
      if (v50 && v49 == (uint64_t)v44 >> 1)
      {
        v52 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 136))(v38);
        v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 112))(v38);
        v54 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 144))(v38);
        v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 120))(v38);
        v56 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 152))(v38);
        v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 128))(v38);
        v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
        v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38);
        I420ToNV12(v52, v53, v54, v55, v56, v57, v72, v70, v68, v47, v58, v59);
        goto LABEL_46;
      }
    }
  }
  return v10;
}

void sub_2088E5C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CVPixelBufferRef webrtc::copyPixelBufferForFrame(webrtc *this, const webrtc::VideoFrame *a2)
{
  webrtc::ObjCFrameBuffer *v2;
  CVPixelBufferRef v3;
  void *v4;
  id v5;

  v2 = (webrtc::ObjCFrameBuffer *)*((_QWORD *)this + 1);
  if (v2)
    (**(void (***)(_QWORD, const webrtc::VideoFrame *))v2)(*((_QWORD *)this + 1), a2);
  if ((*(unsigned int (**)(webrtc::ObjCFrameBuffer *, const webrtc::VideoFrame *))(*(_QWORD *)v2 + 32))(v2, a2))
  {
    v3 = 0;
  }
  else
  {
    webrtc::ObjCFrameBuffer::wrapped_frame_buffer(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v5 = v4;
      v3 = CVPixelBufferRetain((CVPixelBufferRef)objc_msgSend(v5, "pixelBuffer"));

    }
    else
    {
      v3 = 0;
    }

  }
  (*(void (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)v2 + 8))(v2);
  return v3;
}

void sub_2088E5CE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t webrtc::copyVideoFrameBuffer(webrtc *this, webrtc::VideoFrameBuffer *a2, unsigned __int8 *a3)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  int v11;
  const char *v12;
  int v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  int16x8_t *v25;
  int v26;
  uint16x8_t *v27;
  int v28;
  uint16x8_t *v29;
  int v30;
  int v31;
  int v32;
  std::string *v33;
  __CVBuffer *v34;
  __CVBuffer *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;

  result = (*(uint64_t (**)(webrtc *, webrtc::VideoFrameBuffer *, unsigned __int8 *))(*(_QWORD *)this + 32))(this, a2, a3);
  if ((_DWORD)result)
  {
    v6 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 32))(this);
    if (v6 == 5)
    {
      if ((*(unsigned int (**)(webrtc *))(*(_QWORD *)this + 32))(this) == 5)
      {
        v40 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 40))(this);
        v38 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 40))(this);
        v23 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 40))(this);
        v24 = (char *)a2 + 2 * (int)((*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 48))(this) * v23);
        v25 = (int16x8_t *)(*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 136))(this);
        v26 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 112))(this);
        v27 = (uint16x8_t *)(*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 144))(this);
        v28 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 120))(this);
        v29 = (uint16x8_t *)(*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 152))(this);
        v30 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 128))(this);
        v31 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 40))(this);
        v32 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 48))(this);
        v18 = I010ToP010(v25, v26, v27, v28, v29, v30, (uint64_t)a2, v40, (uint64_t)v24, v38, v31, v32);
        return v18 == 0;
      }
      v33 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_frame_buffer.cc", 59, "type() == Type::kI010", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v19, v20, v21, v22, v36);
      return webrtc::convertBGRAToYUV((webrtc *)v33, v34, v35);
    }
    else
    {
      if (v6 == 1)
      {
        v7 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)this + 64))(this);
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
        v9 = (char *)a2 + (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7) * v8);
        v10 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7);
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 112))(v7);
        v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7);
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7);
        v14 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 152))(v7);
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 128))(v7);
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
        v18 = I420ToNV12(v10, v11, v12, v13, v14, v15, (char *)a2, v39, v9, v37, v16, v17);
        return v18 == 0;
      }
      return 0;
    }
  }
  return result;
}

BOOL webrtc::convertBGRAToYUV(webrtc *this, __CVBuffer *a2, __CVBuffer *a3)
{
  size_t Width;
  unsigned int Height;
  int8x16_t *BaseAddressOfPlane;
  void *v8;
  int BytesPerRowOfPlane;
  int v10;
  unsigned __int8 *BaseAddress;
  size_t BytesPerRow;

  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  CVPixelBufferLockBaseAddress(a2, 0);
  CVPixelBufferLockBaseAddress(this, 1uLL);
  BaseAddressOfPlane = (int8x16_t *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v8 = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  v10 = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL);
  BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddress(this);
  BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  LODWORD(Width) = ARGBToNV12(BaseAddress, BytesPerRow, BaseAddressOfPlane, BytesPerRowOfPlane, (uint64_t)v8, v10, Width, Height);
  CVPixelBufferUnlockBaseAddress(this, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  return (_DWORD)Width == 0;
}

uint64_t webrtc::createWebKitVP8Decoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a3)
  {
    VTVideoDecoderGetClassID();
    CMDerivedObjectCreate();
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP8Decoder.cpp");
    return 4294954392;
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP8Decoder.cpp");
    return 4294954394;
  }
}

uint64_t webrtc::invalidateVP8Decoder()
{
  _QWORD *DerivedStorage;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = *DerivedStorage;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[1];
    v1[1] = 0;
    if (v3)
    {
      v4 = *(const void **)(v3 + 48);
      if (v4)
        CFRelease(v4);
      MEMORY[0x20BD0ADEC](v3, 0x10A1C4089464210);
    }
    return 0;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    return 0;
  rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP8Decoder.cpp");
  return 0;
}

void webrtc::finalizeVP8Decoder()
{
  _QWORD *DerivedStorage;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = *DerivedStorage;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[1];
    v1[1] = 0;
    if (v3)
    {
      v4 = *(const void **)(v3 + 48);
      if (v4)
        CFRelease(v4);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP8Decoder.cpp");
  }
}

const __CFString *webrtc::copyVP8DecoderDebugDescription()
{
  return CFSTR("WebKit VP8 decoder");
}

uint64_t webrtc::startVP8DecoderSession(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t DerivedStorage;
  _QWORD *v6;
  __n128 v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  unsigned __int8 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  internal *v30;
  _QWORD v31[5];
  _OWORD v32[2];
  uint64_t v33;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v6 = (_QWORD *)DerivedStorage;
    v33 = 0;
    memset(v32, 0, sizeof(v32));
    v7 = webrtc::EnvironmentFactory::CreateWithDefaults((uint64_t *)v32, (uint64_t)v31);
    v8 = *(_QWORD *)&v32[0];
    if (*(_QWORD *)&v32[0])
    {
      v9 = (unsigned int *)(*(_QWORD *)&v32[0] + 8);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v8 + 8))(v8, v7);
    }
    v12 = operator new();
    webrtc::LibvpxVp8Decoder::LibvpxVp8Decoder(v12, (uint64_t)v31);
    v13 = *v6;
    *v6 = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v31[0];
    if (v31[0])
    {
      v15 = (unsigned int *)(v31[0] + 8);
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    v18 = operator new();
    *(_QWORD *)v18 = &unk_24C0C5698;
    *(_QWORD *)(v18 + 8) = a2;
    *(_QWORD *)(v18 + 48) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_WORD *)(v18 + 40) = 0;
    v19 = v6[1];
    v6[1] = v18;
    if (v19)
    {
      v20 = *(const void **)(v19 + 48);
      if (v20)
        CFRelease(v20);
      MEMORY[0x20BD0ADEC](v19, 0x10A1C4089464210);
      v18 = v6[1];
    }
    webrtc::WebKitDecoderReceiver::initializeFromFormatDescription((webrtc::WebKitDecoderReceiver *)v18, a3);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v6 + 40))(*v6, v6[1]);
    LOBYTE(v32[0]) = 0;
    BYTE4(v32[0]) = 0;
    *(_OWORD *)((char *)v32 + 8) = xmmword_208F05120;
    if ((v21 & 1) == 0)
    {
      if ((_DWORD)v30)
      {
        webrtc::CpuInfo::DetectNumberOfCores(void)::logical_cpus = internal::DetectNumberOfCores(v30);
      }
    }
    LODWORD(v32[1]) = webrtc::CpuInfo::DetectNumberOfCores(void)::logical_cpus;
    (*(void (**)(_QWORD, _OWORD *))(*(_QWORD *)*v6 + 16))(*v6, v32);
    return 0;
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP8Decoder.cpp");
    return 4294954394;
  }
}

uint64_t webrtc::decodeVP8DecoderFrame(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3)
{
  _QWORD *DerivedStorage;
  _QWORD *v6;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v8;
  size_t DataLength;
  uint64_t DataPointer;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CMBlockBufferRef blockBufferOut;
  _QWORD v52[3];
  uint64_t v53;
  char v54;
  int v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  char v62;
  uint64_t v63;
  _QWORD v64[2];
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  _QWORD *v72;
  _QWORD v73[2];
  char v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  __int16 v79;
  char *dataPointerOut;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (v6 = DerivedStorage, !*DerivedStorage) || !DerivedStorage[1])
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 4294954394;
LABEL_10:
    rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP8Decoder.cpp");
    return 4294954394;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a3);
  if (!DataBuffer)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 4294954394;
    goto LABEL_10;
  }
  v8 = DataBuffer;
  blockBufferOut = 0;
  if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
LABEL_6:
    DataLength = CMBlockBufferGetDataLength(v8);
    dataPointerOut = 0;
    DataPointer = CMBlockBufferGetDataPointer(v8, 0, 0, 0, &dataPointerOut);
    if ((_DWORD)DataPointer)
    {
      v11 = DataPointer;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP8Decoder.cpp");
    }
    else
    {
      *(_QWORD *)(v6[1] + 16) = a2;
      memset(v52, 0, sizeof(v52));
      v53 = 4;
      v54 = 0;
      v55 = -1;
      v56 = -1;
      v62 = 0;
      v65 = 0;
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v73[0] = 0;
      v73[1] = 0;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0;
      v63 = 0;
      v64[0] = 0;
      *(_QWORD *)((char *)v64 + 5) = 0;
      v72 = v73;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 1;
      v34 = dataPointerOut;
      v35 = operator new();
      *(_QWORD *)(v35 + 16) = DataLength;
      *(_QWORD *)v35 = &unk_24C0C5948;
      *(_QWORD *)(v35 + 8) = v34;
      *(_DWORD *)(v35 + 24) = 0;
      v36 = (unsigned int *)(v35 + 24);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      do
        v38 = __ldxr(v36);
      while (__stxr(v38 + 1, v36));
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      v63 = v35;
      v64[0] = DataLength;
      do
      {
        v39 = __ldaxr(v36);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v36));
      if (!v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
      LODWORD(v53) = 3;
      v41 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)*v6 + 32))(*v6, v52, 0, 0);
      if (v41)
      {
        v42 = v6[1];
        if (v41 == 1)
        {
          v11 = 0;
        }
        else
        {
          if (v41 == -7)
            v43 = -12911;
          else
            v43 = -12909;
          if (v41 == -3)
            v11 = 4294954392;
          else
            v11 = v43;
        }
        VTDecoderSessionEmitDecodedFrame();
        *(_QWORD *)(v42 + 16) = 0;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitDecoderReceiver.cpp");
      }
      else
      {
        v11 = 0;
      }
      webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)v52);
    }
    if (blockBufferOut)
      CFRelease(blockBufferOut);
    return v11;
  }
  if (!CMBlockBufferCreateContiguous(0, v8, 0, 0, 0, 0, 0, &blockBufferOut))
  {
    v8 = blockBufferOut;
    goto LABEL_6;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP8Decoder.cpp");
  return 4294954392;
}

uint64_t rtc::RefCountedObject<webrtc::WebKitEncodedImageBufferWrapper>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 24);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::WebKitEncodedImageBufferWrapper>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 6;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::WebKitEncodedImageBufferWrapper>::~RefCountedObject()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::WebKitEncodedImageBufferWrapper::data(webrtc::WebKitEncodedImageBufferWrapper *this)
{
  return *((_QWORD *)this + 1);
}

{
  return *((_QWORD *)this + 1);
}

uint64_t webrtc::WebKitEncodedImageBufferWrapper::size(webrtc::WebKitEncodedImageBufferWrapper *this)
{
  return *((_QWORD *)this + 2);
}

BOOL rtc::RefCountedObject<webrtc::WebKitEncodedImageBufferWrapper>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 24));
  return v1 == 1;
}

uint64_t webrtc::registerWebKitVP9Decoder(webrtc *this)
{
  return VTRegisterVideoDecoder();
}

uint64_t webrtc::createWebKitVP9Decoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a3)
  {
    VTVideoDecoderGetClassID();
    CMDerivedObjectCreate();
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP9Decoder.cpp");
    return 4294954392;
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP9Decoder.cpp");
    return 4294954394;
  }
}

uint64_t webrtc::invalidateVP9Decoder()
{
  _QWORD *DerivedStorage;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = *DerivedStorage;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[1];
    v1[1] = 0;
    if (v3)
    {
      v4 = *(const void **)(v3 + 48);
      if (v4)
        CFRelease(v4);
      MEMORY[0x20BD0ADEC](v3, 0x10A1C4089464210);
    }
    return 0;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    return 0;
  rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP9Decoder.cpp");
  return 0;
}

void webrtc::finalizeVP9Decoder()
{
  _QWORD *DerivedStorage;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = *DerivedStorage;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[1];
    v1[1] = 0;
    if (v3)
    {
      v4 = *(const void **)(v3 + 48);
      if (v4)
        CFRelease(v4);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP9Decoder.cpp");
  }
}

const __CFString *webrtc::copyVP9DecoderDebugDescription()
{
  return CFSTR("WebKit VP9 decoder");
}

uint64_t webrtc::startVP9DecoderSession(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t DerivedStorage;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  unsigned __int8 v12;
  CMVideoDimensions Dimensions;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  internal *v22;
  _BYTE v23[24];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v6 = (_QWORD *)DerivedStorage;
    v7 = operator new();
    *(_QWORD *)v7 = &off_24C0B6118;
    pthread_mutexattr_init((pthread_mutexattr_t *)v23);
    pthread_mutexattr_setpolicy_np((pthread_mutexattr_t *)v23, 3);
    pthread_mutex_init((pthread_mutex_t *)(v7 + 8), (const pthread_mutexattr_t *)v23);
    pthread_mutexattr_destroy((pthread_mutexattr_t *)v23);
    *(_QWORD *)(v7 + 72) = 0;
    *(_QWORD *)(v7 + 80) = 0;
    *(_QWORD *)(v7 + 88) = 0;
    *(_QWORD *)(v7 + 96) = 68;
    *(_QWORD *)(v7 + 104) = 0;
    *(_BYTE *)(v7 + 112) = 0;
    *(_QWORD *)(v7 + 120) = 0;
    *(_BYTE *)(v7 + 128) = 1;
    *(_BYTE *)(v7 + 132) = 0;
    *(_BYTE *)(v7 + 136) = 0;
    *(_OWORD *)(v7 + 140) = xmmword_208F05120;
    v8 = *v6;
    *v6 = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = operator new();
    *(_QWORD *)v9 = &unk_24C0C5698;
    *(_QWORD *)(v9 + 8) = a2;
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_WORD *)(v9 + 40) = 0;
    v10 = v6[1];
    v6[1] = v9;
    if (v10)
    {
      v11 = *(const void **)(v10 + 48);
      if (v11)
        CFRelease(v11);
      MEMORY[0x20BD0ADEC](v10, 0x10A1C4089464210);
      v9 = v6[1];
    }
    webrtc::WebKitDecoderReceiver::initializeFromFormatDescription((webrtc::WebKitDecoderReceiver *)v9, a3);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v6 + 40))(*v6, v6[1]);
    v23[0] = 0;
    v23[4] = 0;
    *(_OWORD *)&v23[8] = xmmword_208F05120;
    if ((v12 & 1) == 0)
    {
      if ((_DWORD)v22)
      {
        webrtc::CpuInfo::DetectNumberOfCores(void)::logical_cpus = internal::DetectNumberOfCores(v22);
      }
    }
    *(_DWORD *)&v23[16] = webrtc::CpuInfo::DetectNumberOfCores(void)::logical_cpus;
    Dimensions = CMVideoFormatDescriptionGetDimensions(a3);
    if (Dimensions.width >= 1 && Dimensions.height >= 1)
      *(CMVideoDimensions *)&v23[8] = Dimensions;
    (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v6 + 16))(*v6, v23);
    return 0;
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP9Decoder.cpp");
    return 4294954394;
  }
}

uint64_t webrtc::decodeVP9DecoderFrame(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3)
{
  _QWORD *DerivedStorage;
  _QWORD *v6;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v8;
  size_t DataLength;
  uint64_t DataPointer;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CMBlockBufferRef blockBufferOut;
  _QWORD v52[3];
  uint64_t v53;
  char v54;
  int v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  char v62;
  uint64_t v63;
  _QWORD v64[2];
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  _QWORD *v72;
  _QWORD v73[2];
  char v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  __int16 v79;
  char *dataPointerOut;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (v6 = DerivedStorage, !*DerivedStorage) || !DerivedStorage[1])
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 4294954394;
LABEL_10:
    rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP9Decoder.cpp");
    return 4294954394;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a3);
  if (!DataBuffer)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 4294954394;
    goto LABEL_10;
  }
  v8 = DataBuffer;
  blockBufferOut = 0;
  if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
LABEL_6:
    DataLength = CMBlockBufferGetDataLength(v8);
    dataPointerOut = 0;
    DataPointer = CMBlockBufferGetDataPointer(v8, 0, 0, 0, &dataPointerOut);
    if ((_DWORD)DataPointer)
    {
      v11 = DataPointer;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP9Decoder.cpp");
    }
    else
    {
      *(_QWORD *)(v6[1] + 16) = a2;
      memset(v52, 0, sizeof(v52));
      v53 = 4;
      v54 = 0;
      v55 = -1;
      v56 = -1;
      v62 = 0;
      v65 = 0;
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v73[0] = 0;
      v73[1] = 0;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0;
      v63 = 0;
      v64[0] = 0;
      *(_QWORD *)((char *)v64 + 5) = 0;
      v72 = v73;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 1;
      v34 = dataPointerOut;
      v35 = operator new();
      *(_QWORD *)(v35 + 16) = DataLength;
      *(_QWORD *)v35 = &unk_24C0C5948;
      *(_QWORD *)(v35 + 8) = v34;
      *(_DWORD *)(v35 + 24) = 0;
      v36 = (unsigned int *)(v35 + 24);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      do
        v38 = __ldxr(v36);
      while (__stxr(v38 + 1, v36));
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      v63 = v35;
      v64[0] = DataLength;
      do
      {
        v39 = __ldaxr(v36);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v36));
      if (!v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
      LODWORD(v53) = 3;
      v41 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(*(_QWORD *)*v6 + 24))(*v6, v52, 0);
      if (v41)
      {
        v42 = v6[1];
        if (v41 == 1)
        {
          v11 = 0;
        }
        else
        {
          if (v41 == -7)
            v43 = -12911;
          else
            v43 = -12909;
          if (v41 == -3)
            v11 = 4294954392;
          else
            v11 = v43;
        }
        VTDecoderSessionEmitDecodedFrame();
        *(_QWORD *)(v42 + 16) = 0;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitDecoderReceiver.cpp");
      }
      else
      {
        v11 = 0;
      }
      webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)v52);
    }
    if (blockBufferOut)
      CFRelease(blockBufferOut);
    return v11;
  }
  if (!CMBlockBufferCreateContiguous(0, v8, 0, 0, 0, 0, 0, &blockBufferOut))
  {
    v8 = blockBufferOut;
    goto LABEL_6;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/WebKit/WebKitVP9Decoder.cpp");
  return 4294954392;
}

unint64_t webrtc::ComfortNoiseDecoder::Generate(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v9;
  unsigned int v10;
  unsigned int v11;
  __int16 v12;
  int v13;
  int16x8_t v14;
  int32x4_t v15;
  uint32x4_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int32x4_t v22;
  int v23;
  __int16 v24;
  int v25;
  int v26;
  __int16 v27;
  __int16 v28;
  int v29;
  int v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  int v34;
  int v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  int v40;
  int v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  int v46;
  int v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  int v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  unsigned int v59;
  int32x4_t v60;
  int16x4_t v61;
  unsigned int v62;
  unsigned int v63;
  int8x16_t v64;
  __int16 v65;
  int32x4_t v66;
  int32x4_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int8x16_t v70;
  int16x8_t v71;
  int32x4_t v72;
  signed int v73;
  int v74;
  int v75;
  int v76;
  __int16 v77;
  unsigned int v78;
  int8x16_t v79;
  int8x16_t v80;
  signed int v81;
  int32x4_t v82;
  int v83;
  uint64_t v84;
  signed int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  signed int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  int v95;
  signed int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  signed int v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t v113;
  __int16 *v114;
  int32x4_t v115;
  int16x4_t *v116;
  unint64_t v117;
  int16x8_t v118;
  unint64_t v119;
  std::string *v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  _WORD v132[2];
  int16x8_t v133;
  __int16 v134;
  __int16 v135;
  __int16 v136;
  _BYTE v137[1280];
  __int16 v138[8];
  _QWORD v139[160];

  v139[158] = *MEMORY[0x24BDAC8D0];
  if (a3 > 0x280)
    return a3 < 0x281;
  if ((a4 & 1) != 0)
  {
    v9 = *(_WORD *)(a1 + 118);
    *(_WORD *)(a1 + 120) = v9;
    v10 = 13107;
    v11 = 19661;
    v12 = v9;
  }
  else
  {
    v12 = *(_WORD *)(a1 + 120);
    v9 = *(_WORD *)(a1 + 118);
    v10 = 6553;
    v11 = 26214;
  }
  v13 = ((int)((v10 >> 2) * v9) >> 13) + ((int)((v11 >> 2) * v12) >> 13);
  if (!((v13 < -32768) | (2 * (v13 >= 0x8000))))
  {
    v14 = *(int16x8_t *)(a1 + 38);
    v15 = vdupq_n_s32(v11);
    v16 = (uint32x4_t)vmulq_s32(v15, vmovl_s16(*(int16x4_t *)v14.i8));
    v17 = (int16x8_t)vmulq_s32(v15, vmovl_high_s16(v14));
    v18 = *(int16x8_t *)(a1 + 12);
    v19 = vdupq_n_s32(v10);
    v20 = (int16x8_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(v19, vmovl_high_s16(v18)), 0xFuLL), (uint32x4_t)v17, 0xFuLL);
    v21 = (int16x8_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(v19, vmovl_s16(*(int16x4_t *)v18.i8)), 0xFuLL), v16, 0xFuLL);
    v22 = (int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(v19, vmovl_s16(*(int16x4_t *)(a1 + 28))), 0xFuLL), (uint32x4_t)vmulq_s32(v15, vmovl_s16(*(int16x4_t *)(a1 + 54))), 0xFuLL);
    v23 = (v21.i16[2] + 4) >> 3;
    v130 = 2 * v21.i16[2];
    v24 = ((v21.i16[0] + 4) >> 3) + ((v130 * ((v21.i16[0] + 4) >> 3) + 0x8000) >> 16);
    v25 = (v21.i16[4] + 4) >> 3;
    v26 = 2 * v21.i16[4];
    v27 = v24 + ((v26 * v23 + 0x8000) >> 16);
    v28 = v23 + ((v26 * v24 + 0x8000) >> 16);
    v29 = (v21.i16[6] + 4) >> 3;
    v30 = 2 * v21.i16[6];
    v31 = v27 + ((v30 * v25 + 0x8000) >> 16);
    v32 = v28 + ((v30 * v28 + 0x8000) >> 16);
    v33 = v25 + ((v30 * v27 + 0x8000) >> 16);
    v34 = (v20.i16[0] + 4) >> 3;
    v35 = 2 * v20.i16[0];
    v36 = v31 + ((v35 * v29 + 0x8000) >> 16);
    v37 = v32 + ((v35 * v33 + 0x8000) >> 16);
    v38 = v33 + ((v35 * v32 + 0x8000) >> 16);
    v39 = v29 + ((v35 * v31 + 0x8000) >> 16);
    v40 = (v20.i16[2] + 4) >> 3;
    v41 = 2 * v20.i16[2];
    v42 = v36 + ((v41 * v34 + 0x8000) >> 16);
    v43 = v37 + ((v41 * v39 + 0x8000) >> 16);
    v44 = v38 + ((v41 * v38 + 0x8000) >> 16);
    v45 = v39 + ((v41 * v37 + 0x8000) >> 16);
    LOWORD(v34) = v34 + ((v41 * v36 + 0x8000) >> 16);
    v46 = (v20.i16[4] + 4) >> 3;
    v47 = 2 * v20.i16[4];
    v48 = v42 + ((v47 * v40 + 0x8000) >> 16);
    v49 = v43 + ((v47 * (__int16)v34 + 0x8000) >> 16);
    v50 = v44 + ((v47 * v45 + 0x8000) >> 16);
    v51 = v45 + ((v47 * v44 + 0x8000) >> 16);
    LOWORD(v34) = v34 + ((v47 * v43 + 0x8000) >> 16);
    v52 = v40 + ((v47 * v42 + 0x8000) >> 16);
    v53 = 2 * v20.i16[6];
    v54 = v48 + ((v53 * v46 + 0x8000) >> 16);
    LOWORD(v40) = v49 + ((v53 * v52 + 0x8000) >> 16);
    v55 = v50 + ((v53 * (__int16)v34 + 0x8000) >> 16);
    v56 = v34 + ((v53 * v50 + 0x8000) >> 16);
    v57 = v52 + ((v53 * v49 + 0x8000) >> 16);
    v58 = v46 + ((v53 * v48 + 0x8000) >> 16);
    v16.i32[0] = v56;
    v16.i32[1] = v57;
    v16.i32[2] = v58;
    v16.i32[3] = (v20.i16[6] + 4) >> 3;
    v17.i16[0] = v16.i16[6];
    v59 = 2 * v22.i16[0];
    v60 = vdupq_n_s32(v59);
    v17.i16[1] = v58;
    v17.i16[2] = v57;
    v17.i16[3] = v56;
    v17.i16[4] = v51 + ((v53 * v51 + 0x8000) >> 16);
    v17.i16[5] = v55;
    v17.i16[6] = v40;
    v17.i16[7] = v54;
    v61.i16[0] = v54;
    v61.i16[1] = v40;
    v61.i16[2] = v55;
    v61.i16[3] = v17.i16[4];
    v62 = 2 * v22.i16[2];
    v63 = 2 * v22.i16[4];
    v64 = (int8x16_t)vaddq_s16(v17, vraddhn_high_s32(vraddhn_s32(vmulq_s32(v60, vmovl_s16(v61)), (int32x4_t)0), vmulq_s32(v60, (int32x4_t)v16), (int32x4_t)0));
    v65 = v64.i16[7];
    v66 = vdupq_n_s32(v62);
    v67 = vmulq_s32(v66, vmovl_high_s16((int16x8_t)v64));
    *(int16x4_t *)v60.i8 = vraddhn_s32(vmulq_s32(v66, vmovl_s16(*(int16x4_t *)v64.i8)), (int32x4_t)0);
    v68 = (int16x8_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_208F1DAA0);
    v68.i16[7] = (v22.i16[0] + 4) >> 3;
    v69 = vaddq_s16(v68, vraddhn_high_s32(*(int16x4_t *)v60.i8, v67, (int32x4_t)0));
    v70 = (int8x16_t)vrev64q_s16(v69);
    v71 = (int16x8_t)vextq_s8(v70, v70, 8uLL);
    v72 = vdupq_n_s32(v63);
    *(_WORD *)(a1 + 120) = v13;
    v73 = (*(int *)(a1 + 4) >> 1) + (*(int *)(a1 + 8) >> 1);
    v74 = (v22.i16[2] + 4) >> 3;
    v75 = (v22.i16[4] + 4) >> 3;
    v132[0] = 4096;
    v76 = v63 * v74 + 0x8000;
    v77 = v65 + ((v62 * ((v22.i16[0] + 4) >> 3) + 0x8000) >> 16);
    v78 = 2 * v22.i16[6];
    v79 = (int8x16_t)vaddq_s16(v69, vraddhn_high_s32(vraddhn_s32(vmulq_s32(v72, vmovl_s16(*(int16x4_t *)v71.i8)), (int32x4_t)0), vmulq_s32(v72, vmovl_high_s16(v71)), (int32x4_t)0));
    v80 = vqtbl1q_s8(v79, (int8x16_t)xmmword_208F1DAB0);
    v67.i64[0] = vextq_s8(v80, v80, 8uLL).u64[0];
    v80.i16[0] = v74 + ((v63 * v77 + 0x8000) >> 16);
    v132[1] = v77 + HIWORD(v76) + ((v78 * v75 + 0x8000) >> 16);
    v134 = v80.i16[0] + ((v78 * v79.i16[0] + 0x8000) >> 16);
    v135 = v75 + ((v78 * (__int16)(v77 + HIWORD(v76)) + 0x8000) >> 16);
    v136 = (v22.i16[6] + 4) >> 3;
    v81 = (((int)((((int)((((int)((((int)((((((int)((v41 * v20.i16[2]) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)
                                           * ((((int)((v35 * v20.i16[0]) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)
                                             * ((((int)((v30 * v21.i16[6]) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)
                                               * ((((int)((v26 * v21.i16[4]) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)
                                                 * ((((int)((v130 * v21.i16[2]) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)
                                                   * (((2 * v21.i16[0] * v21.i16[0]) ^ 0x7FFC0000) >> 18)) >> 15)) >> 15)) >> 15)) >> 15)) >> 14) & 0xFFFFFFFE)
                                        * ((int)((v47 * v20.i16[4]) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)) >> 15) & 0xFFFFFFFE)
                                * ((int)((v53 * v20.i16[6]) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)) >> 15) & 0xFFFFFFFE)
                        * ((int)((v59 * v22.i16[0]) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)) >> 15) & 0xFFFFFFFE)
                * ((int)((v62 * v22.i16[2]) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)) >> 15) & 0xFFFFFFFE)
        * ((int)((v63 * v22.i16[4]) & 0xFFFF0000 ^ 0x7FFF0000) >> 16);
    *(int16x8_t *)(a1 + 38) = vuzp1q_s16(v21, v20);
    v82 = vdupq_n_s32(v78);
    *(_DWORD *)(a1 + 8) = v73;
    *(int16x4_t *)(a1 + 54) = vmovn_s32(v22);
    v133 = vaddq_s16((int16x8_t)v79, vraddhn_high_s32(vraddhn_s32(vmulq_s32(v82, vmovl_s16(*(int16x4_t *)v80.i8)), (int32x4_t)0), vmulq_s32(v82, vmovl_s16(*(int16x4_t *)v67.i8)), (int32x4_t)0));
    v83 = (int)((v78 * v22.i16[6]) & 0xFFFF0000 ^ 0x7FFF0000) >> 16;
    if (v73 < 0)
    {
      if (v73 == 0x80000000)
        v73 = 0x7FFFFFFF;
      else
        v73 = -v73;
    }
    else if (!v73)
    {
      v84 = a2;
      v85 = ((v81 >> 15) & 0xFFFFFFFE) * v83;
      v86 = v85 >> 16;
      if (v85 < 0)
      {
LABEL_9:
        v86 = -v86;
        goto LABEL_25;
      }
LABEL_22:
      if (v85 < 0x10000)
      {
        LOWORD(v98) = 0;
        *(_WORD *)(a1 + 120) = 0;
        if (!a3)
          goto LABEL_42;
        goto LABEL_33;
      }
LABEL_25:
      v99 = __clz(v86) - 1;
      v100 = (unsigned __int16)v99;
      v101 = v86 << v99;
      if (v101 >= 2147450880)
        v102 = 2147418112;
      else
        v102 = (v101 + 0x8000) & 0xFFFF0000;
      v103 = (unsigned __int16)v99 >> 1;
      if ((v102 & 0x80000000) != 0)
        v102 = -v102;
      v104 = (v102 >> 17) | 0xFFFFC000;
      v105 = -2 * v104 * v104;
      v106 = (unsigned __int16)(((v105 >> 16) * (v105 >> 16)) >> 15);
      v107 = (v102 >> 1)
           + 1073774592
           + (v105 >> 1)
           + ((v104 * v104) >> 15) * v104
           - 40960 * v106
           + 57344 * (__int16)((int)(v104 * v106) >> 15);
      v108 = ((46340 * (v107 >> 16) + 0x8000) >> 15) & 0xFFFE;
      if (v100 != 2 * v103)
        v108 = HIWORD(v107);
      v98 = ((__int16)((int)((((v108 >> v103) & 0x3FF) << 6) + (v108 >> v103 << 7)) >> 1) * v73) >> 12;
      *(_WORD *)(a1 + 120) = v98;
      if (!a3)
        goto LABEL_42;
LABEL_33:
      v109 = 0;
      v110 = *(_DWORD *)a1;
      do
      {
        v111 = 69069 * v110 + 1;
        v112 = kRandNTable[(v111 >> 23)];
        v110 = v111 & 0x7FFFFFFF;
        v138[v109++] = v112 >> 1;
      }
      while (a3 != v109);
      *(_DWORD *)a1 = v110;
      if (a3 >= 0x10)
      {
        v113 = a3 & 0xFFFFFFFFFFFFFFF0;
        v114 = &v138[a3 & 0xFFFFFFFFFFFFFFF0];
        v115 = vdupq_n_s32((__int16)v98);
        v116 = (int16x4_t *)v139;
        v117 = a3 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v118 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v115, vmovl_s16(*v116)), 0xDuLL), vmulq_s32(v115, vmovl_high_s16(*(int16x8_t *)v116->i8)), 0xDuLL);
          *(int16x8_t *)v116[-2].i8 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v115, vmovl_s16(v116[-2])), 0xDuLL), vmulq_s32(v115, vmovl_high_s16(*(int16x8_t *)v116[-2].i8)), 0xDuLL);
          *(int16x8_t *)v116->i8 = v118;
          v116 += 4;
          v117 -= 16;
        }
        while (v117);
        if (a3 == v113)
          goto LABEL_42;
      }
      else
      {
        v113 = 0;
        v114 = v138;
      }
      v119 = a3 - v113;
      do
      {
        *v114 = ((__int16)v98 * *v114) >> 13;
        ++v114;
        --v119;
      }
      while (v119);
LABEL_42:
      WebRtcSpl_FilterAR((uint64_t)v132, 0xDuLL, v138, a3, (char *)(a1 + 64), 0xCuLL, (_OWORD *)(a1 + 90), 12, v84, (uint64_t)v137);
      return a3 < 0x281;
    }
    v87 = __clz(v73) - 1;
    v88 = (unsigned __int16)v87;
    v89 = v73 << v87;
    v90 = (v89 + 0x8000) & 0xFFFF0000;
    if (v89 >= 2147450880)
      v90 = 2147418112;
    v91 = (unsigned __int16)v87 >> 1;
    if (v90 >= 0)
      v92 = v90;
    else
      v92 = -v90;
    v93 = (v92 >> 17) | 0xFFFFC000;
    v94 = -2 * v93 * v93;
    v95 = (unsigned __int16)(((v94 >> 16) * (v94 >> 16)) >> 15);
    v96 = (v92 >> 1)
        + 1073774592
        + (v94 >> 1)
        + ((v93 * v93) >> 15) * v93
        - 40960 * v95
        + 57344 * (__int16)((int)(v93 * v95) >> 15);
    if (v88 == 2 * v91)
      v97 = ((46340 * (v96 >> 16) + 0x8000) >> 15) & 0xFFFE;
    else
      v97 = HIWORD(v96);
    v84 = a2;
    v73 = v97 >> v91;
    v85 = ((v81 >> 15) & 0xFFFFFFFE) * v83;
    v86 = v85 >> 16;
    if (v85 < 0)
      goto LABEL_9;
    goto LABEL_22;
  }
  v121 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v129);
  return webrtc::ComfortNoiseEncoder::Encode((uint64_t)v121, v122, v123, v124, v125, v126, v127, v128);
}

unint64_t webrtc::ComfortNoiseEncoder::Encode(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  __int16 *v19;
  __int16 *v20;
  __int16 v21;
  __int16 v22;
  int16x8_t *v23;
  unint64_t v24;
  int16x8_t *v25;
  int16x8_t v26;
  unint64_t v27;
  int16x8_t v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  signed int v36;
  unint64_t v37;
  int v38;
  int16x8_t *v39;
  int16x8_t *v40;
  int32x4_t v41;
  uint32x4_t v42;
  unint64_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int16x8_t v47;
  int16x8_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  char v53;
  BOOL v54;
  char v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  _BYTE *v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;
  int v67;
  __int16 v68;
  int v69;
  unint64_t v70;
  __int16 *v71;
  _WORD *v72;
  __int16 v73;
  unint64_t v74;
  int16x8_t *v75;
  _BYTE *v76;
  unint64_t v77;
  int16x4_t *v78;
  int16x4_t *v79;
  unint64_t v80;
  int16x8_t v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  uint32x4_t *v85;
  __int128 *v86;
  unint64_t v87;
  __int128 *v88;
  uint32x4_t *v89;
  int8x16_t v90;
  int8x16_t v91;
  unint64_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int16x8_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int8x16_t v104;
  int8x16_t v105;
  unint64_t v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  int16x4_t *v112;
  int16x8_t *v113;
  int16x8_t v114;
  int16x8_t v115;
  unint64_t v116;
  int16x8_t v117;
  unint64_t v118;
  uint64_t v119;
  __int16 *v120;
  __int16 *v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  size_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  _BYTE *v132;
  unint64_t v133;
  _BYTE *v134;
  unint64_t v135;
  _BYTE *v136;
  unsigned int v138;
  int16x8_t v139;
  _BYTE v140[1264];
  _BYTE v141[2];
  uint64_t v142;
  __int16 v143;
  _WORD __src[13];
  uint32x4_t v145[3];
  __int16 v146[13];
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  if (a3 > 0x280)
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/cng/webrtc_cng.cc", 259, "num_samples <= kCngMaxOutsizeOrder", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a3);
  v138 = 0;
  if (!a3)
  {
    v22 = -1;
    goto LABEL_21;
  }
  v12 = 0;
  if (a3 < 0x10)
    goto LABEL_8;
  if ((unint64_t)&v139 - a2 < 0x20)
    goto LABEL_8;
  v12 = a3 & 0x3F0;
  v13 = (__int128 *)(a2 + 16);
  v14 = v140;
  v15 = a3 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v16 = *v13;
    *(v14 - 1) = *(v13 - 1);
    *v14 = v16;
    v13 += 2;
    v14 += 2;
    v15 -= 16;
  }
  while (v15);
  if (a3 != v12)
  {
LABEL_8:
    v17 = a3 - v12;
    v18 = v12;
    v19 = &v139.i16[v18];
    v20 = (__int16 *)(a2 + v18 * 2);
    do
    {
      v21 = *v20++;
      *v19++ = v21;
      --v17;
    }
    while (v17);
  }
  if (a3 >= 0x10)
  {
    v23 = (int16x8_t *)((char *)&v139 + 2 * (a3 & 0xFFFFFFFFFFFFFFF0));
    v24 = a3 & 0xF;
    v25 = (int16x8_t *)v140;
    v26.i64[0] = -1;
    v26.i64[1] = -1;
    v27 = a3 & 0xFFFFFFFFFFFFFFF0;
    v28.i64[0] = -1;
    v28.i64[1] = -1;
    do
    {
      v26 = vmaxq_s16(vabsq_s16(v25[-1]), v26);
      v28 = vmaxq_s16(vabsq_s16(*v25), v28);
      v25 += 2;
      v27 -= 16;
    }
    while (v27);
    v22 = vmaxvq_s16(vmaxq_s16(v26, v28));
    if (a3 == (a3 & 0x3F0))
      goto LABEL_21;
  }
  else
  {
    v22 = -1;
    v23 = &v139;
    v24 = a3;
  }
  do
  {
    v30 = v23->i16[0];
    v23 = (int16x8_t *)((char *)v23 + 2);
    v29 = v30;
    if (v30 < 0)
      v29 = -v29;
    if ((__int16)v29 > v22)
      v22 = v29;
    --v24;
  }
  while (v24);
LABEL_21:
  v31 = 32 - __clz(a3);
  v32 = __clz(v22 * v22) - 1;
  if (!v22)
    v32 = 0;
  v33 = __OFSUB__(v31, v32);
  v34 = v31 - v32;
  if (((v34 & 0x80000000) != 0) != v33 || v22 == 0)
    v36 = 0;
  else
    v36 = v34;
  if (!a3)
  {
    v38 = 0;
    goto LABEL_38;
  }
  if (a3 < 0x10)
  {
    v37 = 0;
    v38 = 0;
    v39 = &v139;
LABEL_36:
    v49 = a3 - v37;
    do
    {
      v50 = v39->i16[0];
      v39 = (int16x8_t *)((char *)v39 + 2);
      v38 += (v50 * v50) >> v36;
      --v49;
    }
    while (v49);
    goto LABEL_38;
  }
  v37 = a3 & 0x3F0;
  v39 = (int16x8_t *)((char *)&v139 + 2 * (a3 & 0xFFFFFFFFFFFFFFF0));
  v40 = (int16x8_t *)v140;
  v41 = 0uLL;
  v42 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v36));
  v43 = a3 & 0xFFFFFFFFFFFFFFF0;
  v44 = 0uLL;
  v45 = 0uLL;
  v46 = 0uLL;
  do
  {
    v47 = v40[-1];
    v48 = *v40;
    v44 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmull_high_s16(v47, v47), v42), v44);
    v41 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v47.i8), v42), v41);
    v46 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmull_high_s16(v48, v48), v42), v46);
    v45 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v48.i8), v42), v45);
    v40 += 2;
    v43 -= 16;
  }
  while (v43);
  v38 = vaddvq_s32(vaddq_s32(vaddq_s32(v45, v41), vaddq_s32(v46, v44)));
  if (a3 != v37)
    goto LABEL_36;
LABEL_38:
  if (v36 < 1)
  {
    LOWORD(v51) = a3;
    if ((_WORD)a3)
      goto LABEL_46;
LABEL_56:
    v56 = 0x7FFFFFFF;
    goto LABEL_57;
  }
  v51 = a3;
  do
  {
    v52 = v34 - 1;
    v53 = v34 < 6;
    if (v34 >= 6)
      v52 = 5;
    v54 = v34 >= 5;
    v55 = v34 - 5;
    if (!v54)
      v55 = 0;
    v38 <<= v55;
    v51 >>= v53;
    v34 = v52;
  }
  while (v52 > 0);
  if (!(_WORD)v51)
    goto LABEL_56;
LABEL_46:
  v56 = v38 / (__int16)v51;
  if (v56 <= 1)
  {
    v57 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      bzero(__src, 2 * v57);
    if ((a4 & 1) != 0)
    {
LABEL_50:
      if (v57)
        memcpy((void *)(a1 + 20), __src, 2 * v57);
      *(_DWORD *)(a1 + 16) = v56;
      if (v56 > 0)
      {
LABEL_53:
        LODWORD(v58) = *(__int16 *)(a1 + 14);
        if (*(__int16 *)(a1 + 12) <= (int)v58)
          goto LABEL_109;
        goto LABEL_107;
      }
LABEL_106:
      v56 = 1;
      *(_DWORD *)(a1 + 16) = 1;
      LODWORD(v58) = *(__int16 *)(a1 + 14);
      if (*(__int16 *)(a1 + 12) <= (int)v58)
        goto LABEL_109;
LABEL_107:
      if (!a4)
      {
        v111 = 0;
        LOWORD(v58) = v58 + 1000 * a3 / *(int *)(a1 + 8);
LABEL_131:
        *(_WORD *)(a1 + 14) = v58;
        return v111;
      }
LABEL_109:
      v123 = 1;
      {
        if (++v123 == 93)
        {
          LOBYTE(v123) = 94;
          break;
        }
      }
      v111 = v57 + 1;
      v125 = *(_QWORD *)a5;
      v124 = *(_QWORD *)(a5 + 8);
      v126 = *(_QWORD *)a5 + v57 + 1;
      if (v124 < v126)
      {
        v127 = v124 + (v124 >> 1);
        if (v127 <= v126)
          v128 = *(_QWORD *)a5 + v57 + 1;
        else
          v128 = v127;
        v129 = (void *)operator new[]();
        v130 = v129;
        v131 = *(_QWORD *)(a5 + 16);
        if (v131)
        {
          memcpy(v129, *(const void **)(a5 + 16), *(_QWORD *)a5);
          *(_QWORD *)(a5 + 16) = v130;
          MEMORY[0x20BD0ADD4](v131, 0x1000C8077774924);
        }
        else
        {
          *(_QWORD *)(a5 + 16) = v129;
        }
        *(_QWORD *)(a5 + 8) = v128;
      }
      v132 = (_BYTE *)(*(_QWORD *)(a5 + 16) + v125);
      if (!v111)
        v132 = 0;
      *v132 = v123;
      if (*(_QWORD *)a1)
      {
        if (*(_QWORD *)a1 == 12)
        {
          v133 = 0;
          v134 = v132 + 1;
          do
          {
            v134[v133] = (unsigned __int16)(*(_WORD *)(a1 + 2 * v133 + 20) + 128) >> 8;
            ++v133;
          }
          while (v133 < *(_QWORD *)a1);
        }
        else
        {
          v135 = 0;
          v136 = v132 + 1;
          do
          {
            v136[v135] = ((unsigned __int16)(*(_WORD *)(a1 + 2 * v135 + 20) + 128) >> 8) + 127;
            ++v135;
          }
          while (v135 < *(_QWORD *)a1);
        }
      }
      *(_QWORD *)a5 = v126;
      v58 = 1000 * a3 / *(int *)(a1 + 8);
      goto LABEL_131;
    }
LABEL_96:
    if (!v57)
      goto LABEL_105;
    if (v57 >= 8)
    {
      v110 = v57 & 0xFFFFFFFFFFFFFFF8;
      v112 = (int16x4_t *)(a1 + 20);
      v113 = (int16x8_t *)__src;
      v114 = vdupq_n_s16(0x4CCDu);
      v115.i64[0] = 0x6666666666666666;
      v115.i64[1] = 0x6666666666666666;
      v116 = v57 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v117 = *v113++;
        *(int16x8_t *)v112->i8 = vaddq_s16(vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v115.i8), (int16x8_t)vmull_high_s16(v117, v115)), vshrn_high_n_s32(vshrn_n_s32(vmull_s16(*v112, *(int16x4_t *)v114.i8), 0xFuLL), vmull_high_s16(*(int16x8_t *)v112->i8, v114), 0xFuLL));
        v112 += 2;
        v116 -= 8;
      }
      while (v116);
      if (v57 == v110)
      {
LABEL_105:
        v56 = (*(int *)(a1 + 16) >> 1) + (v56 >> 2) + (*(int *)(a1 + 16) >> 2);
        *(_DWORD *)(a1 + 16) = v56;
        if (v56 > 0)
          goto LABEL_53;
        goto LABEL_106;
      }
    }
    else
    {
      v110 = 0;
    }
    v118 = v57 - v110;
    v119 = 2 * v110;
    v120 = &__src[v110];
    v121 = (__int16 *)(v119 + a1 + 20);
    do
    {
      v122 = *v120++;
      *v121 = ((26214 * v122) >> 16) + ((19661 * *v121) >> 15);
      ++v121;
      --v118;
    }
    while (v118);
    goto LABEL_105;
  }
LABEL_57:
  v59 = a3 >> 1;
  if ((unsigned __int16)(a3 >> 1))
  {
    v60 = 0x40000000 / (__int16)v59;
    if (a3 < 4)
    {
LABEL_59:
      v61 = 0;
      v62 = -2097152;
      v63 = v141;
LABEL_65:
      v69 = v60 + v62;
      v70 = v59 - v61;
      do
      {
        *(_WORD *)v63 = kHanningTable[v69 >> 22];
        v63 += 2;
        v69 += v60;
        --v70;
      }
      while (v70);
      goto LABEL_67;
    }
  }
  else
  {
    if (a3 < 2)
      goto LABEL_72;
    v60 = 0x7FFFFFFF;
    if (a3 < 4)
      goto LABEL_59;
  }
  v61 = v59 & 0x7FFFFFFFFFFFFFFELL;
  v62 = v60 * (v59 & 0xFFFFFFFE) - 0x200000;
  v64 = &v142;
  v65 = -2097152;
  v66 = v59 & 0x7FFFFFFFFFFFFFFELL;
  v63 = &v141[2 * (v59 & 0x7FFFFFFFFFFFFFFELL)];
  do
  {
    v67 = v60 + v65;
    v65 += 2 * v60;
    v68 = kHanningTable[v65 >> 22];
    *((_WORD *)v64 - 1) = kHanningTable[v67 >> 22];
    *(_WORD *)v64 = v68;
    v64 = (uint64_t *)((char *)v64 + 4);
    v66 -= 2;
  }
  while (v66);
  if (v59 != v61)
    goto LABEL_65;
LABEL_67:
  if (a3 >= 2)
  {
    if (v59 <= 1)
      v59 = 1;
    v71 = (__int16 *)v141;
    v72 = &v141[2 * a3 - 2];
    do
    {
      v73 = *v71++;
      *v72-- = v73;
      --v59;
    }
    while (v59);
  }
LABEL_72:
  if (!a3)
    goto LABEL_80;
  if (a3 < 0x10)
  {
    v74 = 0;
    v75 = &v139;
    v76 = v141;
LABEL_78:
    v82 = a3 - v74;
    do
    {
      v83 = *(__int16 *)v76;
      v76 += 2;
      v75->i16[0] = (v75->i16[0] * v83) >> 14;
      v75 = (int16x8_t *)((char *)v75 + 2);
      --v82;
    }
    while (v82);
    goto LABEL_80;
  }
  v74 = a3 & 0x3F0;
  v77 = 2 * (a3 & 0xFFFFFFFFFFFFFFF0);
  v75 = (int16x8_t *)((char *)&v139 + v77);
  v76 = &v141[v77];
  v78 = (int16x4_t *)&v143;
  v79 = (int16x4_t *)v140;
  v80 = a3 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v81 = vshrn_high_n_s32(vshrn_n_s32(vmull_s16(*v79, *v78), 0xEuLL), vmull_high_s16(*(int16x8_t *)v79->i8, *(int16x8_t *)v78->i8), 0xEuLL);
    *(int16x8_t *)v79[-2].i8 = vshrn_high_n_s32(vshrn_n_s32(vmull_s16(v79[-2], v78[-2]), 0xEuLL), vmull_high_s16(*(int16x8_t *)v79[-2].i8, *(int16x8_t *)v78[-2].i8), 0xEuLL);
    *(int16x8_t *)v79->i8 = v81;
    v78 += 4;
    v79 += 4;
    v80 -= 16;
  }
  while (v80);
  if (a3 != v74)
    goto LABEL_78;
LABEL_80:
  WebRtcSpl_AutoCorrelation(&v139, a3, *(_QWORD *)a1, (unsigned int *)v145, &v138);
  if (!v145[0].i32[0])
    v145[0].i32[0] = 0x7FFF;
  v84 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v85 = v145;
    if (v84 >= 8)
    {
      v87 = v84 & 0xFFFFFFFFFFFFFFF8;
                                                                                       * (v84 & 0xFFFFFFFFFFFFFFF8));
      v85 = (uint32x4_t *)((char *)v145 + 4 * (v84 & 0xFFFFFFFFFFFFFFF8));
      v89 = v145;
      v90.i64[0] = 0xFFFF0000FFFFLL;
      v90.i64[1] = 0xFFFF0000FFFFLL;
      v91.i64[0] = 0x800000008000;
      v91.i64[1] = 0x800000008000;
      v92 = v84 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v93 = (int32x4_t)v89[1];
        v94 = (int8x16_t)vcltzq_s32(v93);
        v95 = (int8x16_t)vabsq_s32(v93);
        v96 = (int8x16_t)vabsq_s32(*(int32x4_t *)v89);
        v97 = (int16x8_t)*v86++;
        v98 = vmovl_s16(*(int16x4_t *)v97.i8);
        v99 = vmovl_high_s16(v97);
        v100 = (int8x16_t)vmulq_s32((int32x4_t)vandq_s8(v95, v90), v99);
        v101 = (int8x16_t)vmulq_s32((int32x4_t)vandq_s8(v96, v90), v98);
        v102 = (int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v96, 0x10uLL), v98), (uint32x4_t)v101, 0x10uLL);
        v103 = (int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v95, 0x10uLL), v99), (uint32x4_t)v100, 0x10uLL);
        v104 = (int8x16_t)vsriq_n_s32(vaddq_s32(v103, v103), (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v103, 0x10uLL), vandq_s8(v100, v91)), 0xFuLL);
        v105 = (int8x16_t)vsriq_n_s32(vaddq_s32(v102, v102), (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v102, 0x10uLL), vandq_s8(v101, v91)), 0xFuLL);
        *(int8x16_t *)v89 = vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)v89), (int8x16_t)vnegq_s32((int32x4_t)v105), v105);
        v89[1] = (uint32x4_t)vbslq_s8(v94, (int8x16_t)vnegq_s32((int32x4_t)v104), v104);
        v89 += 2;
        v92 -= 8;
      }
      while (v92);
      if (v84 == v87)
        goto LABEL_94;
    }
    else
    {
      v87 = 0;
    }
    v106 = v84 - v87;
    do
    {
      v107 = v85->i32[0];
      if (v85->i32[0] < 0)
        v107 = -v107;
      v108 = *(__int16 *)v88;
      v88 = (__int128 *)((char *)v88 + 2);
      v109 = (2 * (HIWORD(v107) * v108 + (((unsigned __int16)v107 * v108) >> 16))) & 0xFFFE0000 | ((((unsigned __int16)v107 * v108) & 0x8000 | ((HIWORD(v107) * v108 + (((unsigned __int16)v107 * v108) >> 16)) << 16)) >> 15);
      if (v85->i32[0] < 0)
        v109 = -v109;
      v85->i32[0] = v109;
      v85 = (uint32x4_t *)((char *)v85 + 4);
      --v106;
    }
    while (v106);
  }
LABEL_94:
  if (WebRtcSpl_LevinsonDurbin(v145, v146, __src, v84))
  {
    v57 = *(_QWORD *)a1;
    if ((a4 & 1) != 0)
      goto LABEL_50;
    goto LABEL_96;
  }
  return 0;
}

uint64_t webrtc::ConvertVideoType(int a1)
{
  if ((a1 - 1) > 0xC)
    return 0xFFFFFFFFLL;
  else
    return dword_208F1DC50[a1 - 1];
}

unsigned __int8 *webrtc::NV12Scale(unsigned __int8 *this, unsigned __int8 *a2, const unsigned __int8 *a3, char *a4, const unsigned __int8 *a5, int a6, int a7, int8x16_t *a8, unsigned __int8 *a9, uint64_t a10, unsigned __int8 *a11, int a12, int a13, int a14)
{
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int8x16_t *v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  const char *(*v40)(const char *, char *, char *, int);
  const char *(*v41)(const char *, char *, char *, int);
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  char v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  char v58;
  void *(*v59)(void *, void *, int);
  void *(*v60)(void *, void *, int);
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  char v73;
  void *(*v74)(void *, void *, int);
  void *(*v75)(void *, void *, int);
  uint64_t v76;
  uint64_t v77;
  const char *(*v78)(const char *, const char *, char *, int);
  const char *(*v79)(const char *, const char *, char *, int);
  uint64_t v80;
  int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unsigned int v88;
  uint64_t v91;
  const char *(*v92)(const char *, char *, char *, int);
  int v93;

  v15 = a2;
  v16 = a10;
  v17 = a6 + 2;
  if (a6 >= -1)
    v17 = a6 + 1;
  v18 = v17 >> 1;
  if (a7 >= -1)
    v19 = a7 + 1;
  else
    v19 = a7 + 2;
  v20 = v19 >> 1;
  v21 = a6 == HIDWORD(a11) && a7 == a12;
  v88 = v17 >> 1;
  if (v21)
  {
    v93 = (int)a5;
    if (a6 >= 1 && a7)
    {
      v48 = a7 < 0 ? (unsigned __int8 *)&a8->i8[~a7 * (int)a9] : (unsigned __int8 *)a8;
      v49 = a7 >= 0 ? (int)a9 : -(int)a9;
      v50 = a7 >= 0 ? a7 : -a7;
      v51 = v49 == a6 ? 0 : (int)a3;
      v52 = v49 == a6 ? 0 : v49;
      v53 = v49 == a6 ? v50 * a6 : a6;
      v54 = v49 == a6 ? 1 : v50;
      v55 = (_DWORD)a3 == a6 ? v51 : (int)a3;
      if ((_DWORD)a3 == a6)
      {
        v49 = v52;
        v56 = v53;
      }
      else
      {
        v56 = a6;
      }
      v57 = (_DWORD)a3 == a6 ? v54 : v50;
      if (v48 != a2 || v55 != v49)
      {
        v58 = cpu_info_;
        if (!cpu_info_)
        {
          v58 = 7;
          cpu_info_ = 7;
        }
        v59 = (void *(*)(void *, void *, int))CopyRow_Any_NEON;
        if ((v56 & 0x1F) == 0)
          v59 = (void *(*)(void *, void *, int))CopyRow_NEON;
        if ((v58 & 4) != 0)
          v60 = v59;
        else
          v60 = CopyRow_C;
        v61 = v55;
        v62 = v49;
        do
        {
          this = (unsigned __int8 *)v60(v15, v48, v56);
          v15 += v61;
          v48 += v62;
          --v57;
        }
        while (v57);
      }
    }
    if (a6 >= 1 && (a7 + 2) >= 3)
    {
      v63 = 2 * v88;
      if (a7 > -3)
      {
        v64 = (int)a11;
      }
      else
      {
        v16 = a10 + ~v20 * (uint64_t)(int)a11;
        v64 = -(int)a11;
      }
      v65 = a7 > -3 ? v20 : -v20;
      v66 = v64 == v63 ? 0 : v93;
      v67 = v64 == v63 ? 0 : v64;
      v68 = v64 == v63 ? v65 * v93 : 2 * v88;
      v69 = v64 == v63 ? 1 : v65;
      v70 = v63 == v93 ? v66 : v93;
      if (v63 == v93)
      {
        v64 = v67;
        v71 = v68;
      }
      else
      {
        v71 = v63;
      }
      v72 = v63 == v93 ? v69 : v65;
      if ((char *)v16 != a4 || v70 != v64)
      {
        v73 = cpu_info_;
        if (!cpu_info_)
        {
          v73 = 7;
          cpu_info_ = 7;
        }
        v74 = (void *(*)(void *, void *, int))CopyRow_Any_NEON;
        if ((v71 & 0x1F) == 0)
          v74 = (void *(*)(void *, void *, int))CopyRow_NEON;
        if ((v73 & 4) != 0)
          v75 = v74;
        else
          v75 = CopyRow_C;
        v76 = v70;
        v77 = v64;
        do
        {
          this = (unsigned __int8 *)v75(a4, (void *)v16, v71);
          a4 += v76;
          v16 += v77;
          --v72;
        }
        while (v72);
      }
    }
  }
  else
  {
    v22 = HIDWORD(a11) + 2;
    if (SHIDWORD(a11) >= -1)
      v22 = HIDWORD(a11) + 1;
    v23 = v22 >> 1;
    v24 = a12 + 2;
    if (a12 >= -1)
      v24 = a12 + 1;
    v25 = v24 >> 1;
    v86 = &this[v20 * (uint64_t)v18];
    v87 = this;
    v26 = (int8x16_t *)&v86[v20 * (uint64_t)v18];
    v83 = (int)a3;
    v84 = v23;
    v85 = (v24 >> 1) * v23;
    if (a6 >= 1 && (a7 + 2) >= 3)
    {
      if (a7 <= -3)
        v27 = (uint64_t)&this[v18 * (uint64_t)~v20];
      else
        v27 = (uint64_t)this;
      if (a7 > -3)
        v28 = v17 >> 1;
      else
        v28 = -v18;
      if (a7 <= -3)
        v29 = &v86[v18 * (uint64_t)~v20];
      else
        v29 = &this[v20 * (uint64_t)v18];
      if (a7 > -3)
        v30 = v20;
      else
        v30 = -v20;
      if (v28 == v18)
        v31 = 0;
      else
        v31 = (int)a5;
      if (v28 == v18)
        v32 = 0;
      else
        v32 = v28;
      if (v28 == v18)
        v33 = v30 * v18;
      else
        v33 = v17 >> 1;
      if (v28 == v18)
        v34 = 1;
      else
        v34 = v30;
      if ((_DWORD)a5 == 2 * v88)
        v35 = v31;
      else
        v35 = (int)a5;
      if ((_DWORD)a5 == 2 * v88)
      {
        v28 = v32;
        v36 = v33;
      }
      else
      {
        v36 = v88;
      }
      if ((_DWORD)a5 == 2 * v88)
        v37 = v34;
      else
        v37 = v30;
      v38 = cpu_info_;
      if (!cpu_info_)
      {
        v38 = 7;
        cpu_info_ = 7;
      }
      v39 = 0;
      v40 = (const char *(*)(const char *, char *, char *, int))SplitUVRow_Any_NEON;
      if ((v36 & 0xF) == 0)
        v40 = (const char *(*)(const char *, char *, char *, int))SplitUVRow_NEON;
      if ((v38 & 4) != 0)
        v41 = v40;
      else
        v41 = SplitUVRow_C;
      v91 = v28;
      v92 = v41;
      v42 = v35;
      do
      {
        v92(a4, (char *)(v27 + v39), (char *)&v29[v39], v36);
        a4 += v42;
        v39 += v91;
        --v37;
      }
      while (v37);
    }
    v43 = v84;
    this = (unsigned __int8 *)I420Scale(a2, v83, v87, v88, v86, v88, (libyuv *)a6, a7, a8, (int)a9, v26, v84, (int8x16_t *)((char *)v26 + v85), v84, SHIDWORD(a11), a12, 3);
    if (SHIDWORD(a11) >= 1 && (a12 + 2) >= 3)
    {
      if (a12 > -3)
      {
        v45 = (int)a11;
        if ((_DWORD)a11 != 2 * v84)
        {
LABEL_62:
          v46 = v84;
          v47 = cpu_info_;
          if (!cpu_info_)
            goto LABEL_150;
          goto LABEL_151;
        }
      }
      else
      {
        v44 = ~v25;
        v25 = -v25;
        v16 = a10 + v44 * (uint64_t)(int)a11;
        v45 = -(int)a11;
        if (-(int)a11 != 2 * v84)
          goto LABEL_62;
      }
      v45 = 0;
      v46 = v25 * v84;
      v25 = 1;
      v43 = 0;
      v47 = cpu_info_;
      if (!cpu_info_)
      {
LABEL_150:
        v47 = 7;
        cpu_info_ = 7;
      }
LABEL_151:
      v78 = (const char *(*)(const char *, const char *, char *, int))MergeUVRow_Any_NEON;
      if ((v46 & 0xF) == 0)
        v78 = (const char *(*)(const char *, const char *, char *, int))MergeUVRow_NEON;
      if ((v47 & 4) != 0)
        v79 = v78;
      else
        v79 = MergeUVRow_C;
      v80 = v45;
      do
      {
        this = (unsigned __int8 *)v79(v26->i8, &v26->i8[v85], (char *)v16, v46);
        v26 = (int8x16_t *)((char *)v26 + v43);
        v16 += v80;
        --v25;
      }
      while (v25);
    }
  }
  return this;
}

uint64_t webrtc::NV12ToI420Scaler::NV12ToI420Scale(webrtc::NV12ToI420Scaler *this, unsigned __int8 *a2, int a3, const char *a4, int a5, int a6, int a7, char *a8, uint64_t a9, int8x16_t *a10, int a11, int8x16_t *a12, int a13, int a14, int a15)
{
  int v15;
  int v20;
  char *v21;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  unsigned __int8 *v28;
  char *v29;
  char *v30;
  int v31;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  int64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char v48;
  int v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  unsigned __int8 *v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  const char *(*v58)(const char *, char *, char *, int);
  const char *(*v59)(const char *, char *, char *, int);
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unsigned __int8 *v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v73;
  unsigned int v74;
  int8x16_t *v75;
  int v76;
  unsigned __int8 *v77;
  unsigned int v78;
  uint64_t v79;
  unsigned __int8 *v81;

  v15 = a7;
  v20 = a13;
  v21 = (char *)a12;
  if (a6 != a14 || a7 != a15)
  {
    if (a6 + 1 >= 0)
      v23 = a6 + 1;
    else
      v23 = a6 + 2;
    v71 = v23;
    v24 = v23 >> 1;
    if (a7 + 1 >= 0)
      v25 = a7 + 1;
    else
      v25 = a7 + 2;
    v26 = v25 >> 1;
    v79 = (v25 >> 1) * (uint64_t)v24;
    v27 = 2 * (int)v79;
    v28 = *(unsigned __int8 **)this;
    v29 = (char *)*((_QWORD *)this + 1);
    v30 = &v29[-*(_QWORD *)this];
    if (v27 <= (unint64_t)v30)
    {
      if (v27 < (unint64_t)v30)
      {
        v29 = (char *)&v28[v27];
        *((_QWORD *)this + 1) = &v28[v27];
      }
    }
    else
    {
      v31 = a5;
      v33 = (unsigned __int8 *)a8;
      v34 = a3;
      std::vector<unsigned char>::__append((char **)this, v27 - (_QWORD)v30);
      a3 = v34;
      a8 = (char *)v33;
      v15 = a7;
      a5 = v31;
      v28 = *(unsigned __int8 **)this;
      v29 = (char *)*((_QWORD *)this + 1);
    }
    v40 = v29 - (char *)v28;
    v75 = (int8x16_t *)a8;
    v73 = a3;
    v78 = v24;
    if (*((_QWORD *)this + 2) - (_QWORD)v28 <= (unint64_t)(v29 - (char *)v28))
    {
      v42 = v28;
      v46 = v79;
LABEL_33:
      v77 = v42;
      v81 = &v42[v46];
      v74 = a6;
      if (a6 >= 1 && (v15 + 2) >= 3)
      {
        v50 = v42;
        v51 = v78;
        v52 = v78;
        v53 = v81;
        if (v15 <= -3)
        {
          v54 = (uint64_t)v71 >> 1;
          v55 = ~v26;
          v26 = -v26;
          v50 = &v42[(int)v54 * (uint64_t)v55];
          v53 = &v81[(int)v54 * (uint64_t)v55];
          v52 = -v78;
        }
        if (a5 == 2 * v78 && v52 == v78)
        {
          a5 = 0;
          v52 = 0;
          v51 = v26 * v78;
          v26 = 1;
        }
        v56 = cpu_info_;
        if (!cpu_info_)
        {
          v56 = 7;
          cpu_info_ = 7;
        }
        v57 = 0;
        v58 = (const char *(*)(const char *, char *, char *, int))SplitUVRow_Any_NEON;
        if ((v51 & 0xF) == 0)
          v58 = (const char *(*)(const char *, char *, char *, int))SplitUVRow_NEON;
        if ((v56 & 4) != 0)
          v59 = v58;
        else
          v59 = SplitUVRow_C;
        v60 = v52;
        v61 = a5;
        do
        {
          v59(a4, (char *)&v50[v57], (char *)&v53[v57], v51);
          a4 += v61;
          v57 += v60;
          --v26;
        }
        while (v26);
      }
      return I420Scale(a2, v73, v77, v78, v81, v78, (libyuv *)v74, v15, v75, a9, a10, a11, a12, a13, a14, a15, 3);
    }
    if (v29 == (char *)v28)
    {
      v43 = (unsigned __int8 *)(v29 - (char *)v28);
      v42 = (unsigned __int8 *)(v29 - (char *)v28);
    }
    else
    {
      v76 = a5;
      v41 = v29 - (char *)v28;
      v42 = (unsigned __int8 *)operator new(v29 - (char *)v28);
      v43 = &v42[v40];
      if ((unint64_t)(v29 - (char *)v28) < 8 || (unint64_t)(v28 - v42) < 0x20)
      {
        v44 = v29;
        v45 = (char *)&v42[v40];
        a5 = v76;
LABEL_24:
        v46 = v79;
        goto LABEL_25;
      }
      if (v41 < 0x20)
      {
        v62 = 0;
        a5 = v76;
        goto LABEL_56;
      }
      v62 = v41 & 0xFFFFFFFFFFFFFFE0;
      v63 = v29 - 16;
      v64 = &v42[v29 - 16 - (char *)v28];
      v65 = v41 & 0xFFFFFFFFFFFFFFE0;
      a5 = v76;
      do
      {
        v66 = *(_OWORD *)v63;
        *((_OWORD *)v64 - 1) = *((_OWORD *)v63 - 1);
        *(_OWORD *)v64 = v66;
        v64 -= 32;
        v63 -= 32;
        v65 -= 32;
      }
      while (v65);
      if (v41 != v62)
      {
        if ((v41 & 0x18) == 0)
        {
          v45 = (char *)&v43[-v62];
          v44 = &v29[-v62];
          goto LABEL_24;
        }
LABEL_56:
        v44 = &v29[-(v41 & 0xFFFFFFFFFFFFFFF8)];
        v45 = (char *)&v43[-(v41 & 0xFFFFFFFFFFFFFFF8)];
        v67 = v40 - v62 - 8;
        v68 = &v29[-v62 - 8];
        v69 = v62 - (v41 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v70 = *(_QWORD *)v68;
          v68 -= 8;
          *(_QWORD *)&v42[v67] = v70;
          v67 -= 8;
          v69 += 8;
        }
        while (v69);
        v46 = v79;
        if (v41 == (v41 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_31:
          *(_QWORD *)this = v42;
          *((_QWORD *)this + 1) = v43;
          *((_QWORD *)this + 2) = v43;
          if (v28)
          {
            v49 = a5;
            operator delete(v28);
            a5 = v49;
            v42 = *(unsigned __int8 **)this;
          }
          goto LABEL_33;
        }
LABEL_25:
        v47 = v45 - 1;
        do
        {
          v48 = *--v44;
          *v47-- = v48;
        }
        while (v44 != (char *)v28);
        goto LABEL_31;
      }
    }
    v46 = v79;
    goto LABEL_31;
  }
  v35 = *(unsigned __int8 **)this;
  *((_QWORD *)this + 1) = *(_QWORD *)this;
  if (*((unsigned __int8 **)this + 2) != v35)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    if (v35)
    {
      v36 = a5;
      v37 = (unsigned __int8 *)a8;
      v38 = a3;
      operator delete(v35);
      a3 = v38;
      a8 = (char *)v37;
      v15 = a7;
      a5 = v36;
      v20 = a13;
      v21 = (char *)a12;
    }
  }
  return NV12ToI420((char *)a2, a3, a4, a5, a8, a9, a10->i8, a11, v21, v20, a6, v15);
}

uint64_t cricket::ValidateRtpExtensions(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  void *v13;
  uint64_t v15;
  void **v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unint64_t v20;
  const void *v21;
  size_t v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  size_t v30;
  const void *v31;
  unint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  unint64_t v37;
  size_t v38;
  int v39;
  uint64_t *v40;
  size_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const void *v60;
  int v61;
  unint64_t v62;
  const void *v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t v79;
  void *__p[2];
  char v81;
  _BYTE v82[264];
  uint64_t v83;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v7 = v6;
  v83 = *MEMORY[0x24BDAC8D0];
  memset(v82, 0, 256);
  if (v3)
  {
    v8 = 32 * v3;
    v9 = (unsigned int *)v2;
    while (1)
    {
      v10 = v9[6];
      if ((v10 - 256) <= 0xFFFFFF00)
        break;
      if (v82[v10])
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          webrtc::RtpExtension::ToString((webrtc::RtpExtension *)v9, (char *)__p);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v50, v51, v52, v53, v54, v55, v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_media_engine.cc");
          if (v81 < 0)
            goto LABEL_77;
        }
        return 0;
      }
      v82[v10] = 1;
      v9 += 8;
      v8 -= 32;
      if (!v8)
        goto LABEL_6;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      webrtc::RtpExtension::ToString((webrtc::RtpExtension *)v9, (char *)__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v43, v44, v45, v46, v47, v48, v49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_media_engine.cc");
      if (v81 < 0)
LABEL_77:
        operator delete(__p[0]);
    }
    return 0;
  }
LABEL_6:
  if (!v4)
    return 1;
  v74 = v3;
  v75 = v2;
  v76 = v2 + 32 * v3;
  bzero(__p, 0x1000uLL);
  v78 = 0;
  v79 = 0;
  v77 = &v78;
  v11 = &v7[4 * v5];
  while (2)
  {
    if (*((char *)v7 + 23) < 0)
    {
      v12 = v7[1];
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_93;
      v13 = (void *)*v7;
      if (v12 && v13 == 0)
        goto LABEL_93;
    }
    else
    {
      v12 = *((unsigned __int8 *)v7 + 23);
      v13 = v7;
    }
    v15 = *((int *)v7 + 6);
    v16 = &__p[2 * v15];
    *v16 = v13;
    v16[1] = (void *)v12;
    v17 = v78;
    v18 = &v78;
    v19 = &v78;
    if (!v78)
      goto LABEL_33;
    do
    {
      while (1)
      {
        v19 = (uint64_t **)v17;
        v21 = (const void *)v17[4];
        v20 = v17[5];
        v22 = v20 >= v12 ? v12 : v17[5];
        v23 = memcmp(v13, (const void *)v17[4], v22);
        if (v23)
          break;
        if (v20 <= v12)
          goto LABEL_27;
LABEL_19:
        v17 = *v19;
        v18 = v19;
        if (!*v19)
          goto LABEL_33;
      }
      if (v23 < 0)
        goto LABEL_19;
LABEL_27:
      v24 = memcmp(v21, v13, v22);
      if (v24)
      {
        if ((v24 & 0x80000000) == 0)
          goto LABEL_9;
      }
      else if (v20 >= v12)
      {
        goto LABEL_9;
      }
      v17 = v19[1];
    }
    while (v17);
    v18 = v19 + 1;
LABEL_33:
    v25 = (uint64_t *)v19;
    v19 = (uint64_t **)operator new(0x38uLL);
    v19[4] = (uint64_t *)v13;
    v19[5] = (uint64_t *)v12;
    *((_DWORD *)v19 + 12) = 0;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = v25;
    *v18 = (uint64_t *)v19;
    v26 = (uint64_t *)v19;
    if (*v77)
    {
      v77 = (uint64_t **)*v77;
      v26 = *v18;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v78, v26);
    ++v79;
LABEL_9:
    *((_DWORD *)v19 + 12) = v15;
    v7 += 4;
    if (v7 != v11)
      continue;
    break;
  }
  v7 = v78;
  v27 = v75;
  if (!v74)
    goto LABEL_94;
  if (!v78)
  {
    v57 = 32 * v74;
    while (1)
    {
      v58 = *(int *)(v27 + 24);
      v59 = __p[2 * v58 + 1];
      if (v59)
      {
        v60 = __p[2 * v58];
        v61 = *(char *)(v27 + 23);
        if (v61 < 0)
        {
          v62 = *(_QWORD *)(v27 + 8);
          if ((v62 & 0x8000000000000000) != 0)
            goto LABEL_93;
          v63 = *(const void **)v27;
          if (v62)
          {
            if (!v63)
              goto LABEL_93;
          }
        }
        else
        {
          v62 = *(unsigned __int8 *)(v27 + 23);
          v63 = (const void *)v27;
        }
        if (v59 != (void *)v62 || memcmp(v60, v63, (size_t)v59))
          goto LABEL_96;
      }
      else
      {
        LOBYTE(v61) = *(_BYTE *)(v27 + 23);
      }
      if ((v61 & 0x80) != 0)
      {
        v64 = *(_QWORD *)(v27 + 8);
        if (v64 < 0 || v64 && !*(_QWORD *)v27)
          goto LABEL_93;
      }
      v27 += 32;
      v57 -= 32;
      if (!v57)
        goto LABEL_94;
    }
  }
  while (2)
  {
    v28 = *(int *)(v27 + 24);
    v29 = __p[2 * v28 + 1];
    if (!v29)
    {
      v30 = *(unsigned __int8 *)(v27 + 23);
      goto LABEL_49;
    }
    v30 = *(unsigned __int8 *)(v27 + 23);
    if ((*(char *)(v27 + 23) & 0x80000000) == 0)
    {
      v31 = (const void *)v27;
      v32 = *(unsigned __int8 *)(v27 + 23);
      goto LABEL_47;
    }
    v32 = *(_QWORD *)(v27 + 8);
    if ((v32 & 0x8000000000000000) != 0)
      goto LABEL_93;
    v31 = *(const void **)v27;
    if (v32)
    {
      if (!v31)
        goto LABEL_93;
    }
LABEL_47:
    if (v29 != (void *)v32 || memcmp(__p[2 * v28], v31, (size_t)v29))
    {
LABEL_96:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      {
LABEL_99:
        std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v78);
        return 0;
      }
      v73 = (unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t;
LABEL_98:
      rtc::webrtc_logging_impl::Log(v73, v66, v67, v68, v69, v70, v71, v72, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_media_engine.cc");
      goto LABEL_99;
    }
LABEL_49:
    v33 = (const void *)v27;
    if ((v30 & 0x80) != 0)
    {
      v30 = *(_QWORD *)(v27 + 8);
      if ((v30 & 0x8000000000000000) != 0 || (v33 = *(const void **)v27, v30) && !v33)
      {
LABEL_93:
        __break(1u);
        break;
      }
    }
    v34 = v27;
    v35 = &v78;
    v36 = v7;
    do
    {
      while (1)
      {
        v37 = v36[5];
        v38 = v30 >= v37 ? v36[5] : v30;
        v39 = memcmp((const void *)v36[4], v33, v38);
        if (v39)
          break;
        if (v37 >= v30)
          goto LABEL_62;
LABEL_54:
        v36 = (uint64_t *)v36[1];
        if (!v36)
          goto LABEL_63;
      }
      if (v39 < 0)
        goto LABEL_54;
LABEL_62:
      v35 = (uint64_t **)v36;
      v36 = (uint64_t *)*v36;
    }
    while (v36);
LABEL_63:
    if (v35 == &v78)
      goto LABEL_39;
    v40 = v35[5];
    if ((unint64_t)v40 >= v30)
      v41 = v30;
    else
      v41 = (size_t)v35[5];
    v42 = memcmp(v33, v35[4], v41);
    if (!v42)
    {
      if (v30 < (unint64_t)v40)
        goto LABEL_39;
      goto LABEL_38;
    }
    if ((v42 & 0x80000000) == 0)
    {
LABEL_38:
      if (*((_DWORD *)v35 + 12) == (_DWORD)v28)
        goto LABEL_39;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_99;
      v73 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t;
      goto LABEL_98;
    }
LABEL_39:
    v27 = v34 + 32;
    if (v34 + 32 != v76)
      continue;
    break;
  }
LABEL_94:
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v7);
  return 1;
}

void cricket::FilterRtpExtensions(uint64_t *a1@<X0>, unsigned int (*a2)(const std::string::value_type *, uint64_t)@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const std::string::value_type *v12;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  std::string *v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  _DWORD *p_p;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  char **v40;
  uint64_t v41;
  char v42;
  char **v43;
  char *v44;
  char *v45;
  const char *v46;
  uint64_t v47;
  char *v48;
  size_t v49;
  char *v51;
  const std::string::value_type *v52;
  size_t v53;
  char *v54;
  char v55;
  char *v56;
  char *v57;
  const std::string::value_type *v58;
  int v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  size_t v64;
  size_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  void *__p;
  unint64_t v73;
  unsigned __int8 v74;

  v6 = a3;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v8 = *a1;
  v9 = a1[1];
  if (*a1 == v9)
  {
    v25 = 0;
    v24 = 0;
  }
  else
  {
    do
    {
      if (*(char *)(v8 + 23) < 0)
      {
        v11 = *(_QWORD *)(v8 + 8);
        if (v11 < 0)
          goto LABEL_136;
        v12 = *(const std::string::value_type **)v8;
        if (v11 && v12 == 0)
          goto LABEL_136;
      }
      else
      {
        v11 = *(unsigned __int8 *)(v8 + 23);
        v12 = (const std::string::value_type *)v8;
      }
      if (a2(v12, v11))
      {
        v14 = *(_QWORD *)(a5 + 8);
        if (v14 >= *(_QWORD *)(a5 + 16))
        {
          *(_QWORD *)(a5 + 8) = std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>((char **)a5, v8);
        }
        else
        {
          if (!v14)
            goto LABEL_136;
          if (*(char *)(v8 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
          }
          else
          {
            v15 = *(_OWORD *)v8;
            *(_QWORD *)(v14 + 16) = *(_QWORD *)(v8 + 16);
            *(_OWORD *)v14 = v15;
          }
          v23 = *(_DWORD *)(v8 + 24);
          *(_BYTE *)(v14 + 28) = *(_BYTE *)(v8 + 28);
          *(_DWORD *)(v14 + 24) = v23;
          *(_QWORD *)(a5 + 8) = v14 + 32;
        }
      }
      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        v5 = v5 & 0xFFFFFFFF00000000 | 0x3C2;
        webrtc::RtpExtension::ToString((webrtc::RtpExtension *)v8, (char *)&__p);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_media_engine.cc");
        if ((char)v74 < 0)
          operator delete(__p);
      }
      v8 += 32;
    }
    while (v8 != v9);
    v24 = *(char **)a5;
    v25 = *(std::string **)(a5 + 8);
    v6 = a3;
  }
  v26 = 126 - 2 * __clz(((char *)v25 - v24) >> 5);
  if (v25 == (std::string *)v24)
    v27 = 0;
  else
    v27 = v26;
  std::__introsort<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*,false>((uint64_t)v24, v25, v27, 1);
  if ((v6 & 1) == 0)
    return;
  v29 = *(char **)a5;
  v28 = *(_QWORD *)(a5 + 8);
  if (*(_QWORD *)a5 == v28)
    goto LABEL_30;
  v30 = v29 + 32;
  if (v29 + 32 == (char *)v28)
    goto LABEL_30;
  while (1)
  {
    v34 = v29[23];
    if ((v34 & 0x80u) == 0)
      v35 = v29[23];
    else
      v35 = *((_QWORD *)v29 + 1);
    v36 = v29[55];
    v37 = (char)v36;
    if ((v36 & 0x80u) != 0)
      v36 = *((_QWORD *)v29 + 5);
    if (v35 != v36)
      goto LABEL_34;
    v38 = v37 >= 0 ? v30 : (_QWORD *)*v30;
    if ((v34 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v29, v38, *((_QWORD *)v29 + 1)))
        goto LABEL_34;
    }
    else if (v29[23])
    {
      v39 = 0;
      while (v29[v39] == *((_BYTE *)v38 + v39))
      {
        if (v34 == ++v39)
          goto LABEL_33;
      }
      goto LABEL_34;
    }
LABEL_33:
    if (v29[28] == v29[60])
      break;
LABEL_34:
    v30 += 4;
    v29 += 32;
    if (v30 == (_QWORD *)v28)
      goto LABEL_30;
  }
  if (v29 != (char *)v28)
  {
    v56 = v29 + 64;
    if (v29 + 64 == (char *)v28)
    {
      v68 = v29;
LABEL_135:
      v31 = (unint64_t)(v68 + 32);
      goto LABEL_31;
    }
    v57 = v29 + 32;
    while (2)
    {
      while (2)
      {
        v60 = v56;
        v61 = v29[23];
        if ((v61 & 0x80u) == 0)
          v62 = v29[23];
        else
          v62 = *((_QWORD *)v29 + 1);
        v63 = v57[55];
        v64 = *((_QWORD *)v57 + 5);
        if (v63 >= 0)
          v65 = v57[55];
        else
          v65 = *((_QWORD *)v57 + 5);
        if (v62 == v65)
        {
          if (v63 >= 0)
            v66 = v60;
          else
            v66 = *(char **)v60;
          if ((v61 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v29, v66, *((_QWORD *)v29 + 1)))
              break;
          }
          else
          {
            v67 = v29;
            if (v29[23])
            {
              while (*v67 == *v66)
              {
                ++v67;
                ++v66;
                if (!--v61)
                  goto LABEL_125;
              }
              break;
            }
          }
LABEL_125:
          if (v29[28] == v57[60])
          {
            v68 = v29;
            v56 = v60 + 32;
            v57 = v60;
            if (v60 + 32 == (char *)v28)
              goto LABEL_133;
            continue;
          }
        }
        break;
      }
      v68 = v29 + 32;
      if (v29 != v57)
      {
        if (v29[55] < 0)
        {
          if (v63 >= 0)
            v58 = v60;
          else
            v58 = *(const std::string::value_type **)v60;
          std::string::__assign_no_alias<false>((std::string *)(v29 + 32), v58, v65);
        }
        else if (v63 < 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)v29 + 4, *(char **)v60, v64);
        }
        else
        {
          v69 = *(_OWORD *)v60;
          *((_QWORD *)v29 + 6) = *((_QWORD *)v60 + 2);
          *(_OWORD *)v68 = v69;
        }
      }
      v59 = *((_DWORD *)v57 + 14);
      v29[60] = v57[60];
      *((_DWORD *)v29 + 14) = v59;
      v29 += 32;
      v56 = v60 + 32;
      v57 = v60;
      if (v60 + 32 == (char *)v28)
      {
LABEL_133:
        v28 = *(_QWORD *)(a5 + 8);
        goto LABEL_135;
      }
      continue;
    }
  }
LABEL_30:
  v31 = v28;
LABEL_31:
  std::vector<webrtc::RtpExtension>::erase((_QWORD *)a5, v31, v28);
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a4 + 16))(&__p, a4, "WebRTC-FilterAbsSendTimeExtension", 33);
  if (((char)v74 & 0x80000000) == 0)
  {
    p_p = &__p;
    v33 = v74;
    goto LABEL_55;
  }
  v33 = v73;
  if ((v73 & 0x8000000000000000) == 0)
  {
    p_p = __p;
    if (!v73 || __p)
    {
LABEL_55:
      v40 = cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::kBweExtensionPriorities;
      if (v33 >= 7)
      {
        if (*p_p ^ 0x62616E45 | *(_DWORD *)((char *)p_p + 3) ^ 0x64656C62)
        {
          v41 = 2;
        }
        else
        {
          v40 = cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::kBweExtensionPriorities;
          v41 = 3;
        }
        if ((v74 & 0x80) == 0)
          goto LABEL_63;
      }
      else
      {
        v41 = 2;
        if ((v74 & 0x80) == 0)
        {
LABEL_63:
          v42 = 0;
          v43 = &v40[v41];
          v44 = *(char **)(a5 + 8);
          while (1)
          {
            v45 = *(char **)a5;
            if (*(char **)a5 != v44)
            {
              v46 = *v40;
              if (!*v40)
                goto LABEL_136;
              v47 = 0;
              while (1)
              {
                v48 = &v45[v47];
                if (v45[v47 + 23] < 0)
                {
                  v49 = *((_QWORD *)v48 + 1);
                  if ((v49 & 0x8000000000000000) != 0)
                    goto LABEL_136;
                  v48 = *(char **)v48;
                  if (v49 && v48 == 0)
                    goto LABEL_136;
                }
                else
                {
                  v49 = v45[v47 + 23];
                }
                if (v49 == strlen(v46) && !memcmp(v48, v46, v49))
                  break;
                v47 += 32;
                if (&v45[v47] == v44)
                  goto LABEL_65;
              }
              if ((v42 & 1) != 0)
              {
                v51 = &v45[v47];
                if (&v45[v47 + 32] != v44)
                {
                  do
                  {
                    v54 = v51;
                    v55 = v51[55];
                    if (v51[23] < 0)
                    {
                      if (v55 >= 0)
                        v52 = v51 + 32;
                      else
                        v52 = (const std::string::value_type *)*((_QWORD *)v51 + 4);
                      if (v55 >= 0)
                        v53 = v51[55];
                      else
                        v53 = *((_QWORD *)v51 + 5);
                      std::string::__assign_no_alias<false>((std::string *)v51, v52, v53);
                    }
                    else if (v51[55] < 0)
                    {
                      std::string::__assign_no_alias<true>(v51, *((char **)v51 + 4), *((_QWORD *)v51 + 5));
                    }
                    else
                    {
                      *(_OWORD *)v51 = *((_OWORD *)v51 + 2);
                      *((_QWORD *)v51 + 2) = *((_QWORD *)v51 + 6);
                    }
                    *((_DWORD *)v51 + 6) = *((_DWORD *)v51 + 14);
                    v51[28] = v51[60];
                    v51 += 32;
                  }
                  while (v54 + 64 != v44);
                  v44 = *(char **)(a5 + 8);
                }
                while (v44 != v51)
                {
                  if (*(v44 - 9) < 0)
                    operator delete(*((void **)v44 - 4));
                  v44 -= 32;
                }
                *(_QWORD *)(a5 + 8) = v51;
                v42 = 1;
                v44 = v51;
              }
              else
              {
                v42 = 1;
              }
            }
LABEL_65:
            if (++v40 == v43)
              return;
          }
        }
      }
      operator delete(__p);
      goto LABEL_63;
    }
  }
LABEL_136:
  __break(1u);
}

void cricket::GetBitrateConfigForCodec(cricket *this, const cricket::Codec *a2)
{
  char __p[23];
  char v5;
  int v6;

  v6 = 0;
  v5 = 20;
  if (__p <= "x-google-min-bitrate" && &__p[20] > "x-google-min-bitrate")
    goto LABEL_18;
  strcpy(__p, "x-google-min-bitrate");
  cricket::Codec::GetParam((uint64_t)this, (const void **)__p, &v6);
  if (v5 < 0)
  {
    operator delete(*(void **)__p);
    v5 = 22;
    if (__p > "x-google-start-bitrate")
      goto LABEL_10;
  }
  else
  {
    v5 = 22;
    if (__p > "x-google-start-bitrate")
      goto LABEL_10;
  }
  if (&__p[22] > "x-google-start-bitrate")
    goto LABEL_18;
LABEL_10:
  strcpy(__p, "x-google-start-bitrate");
  cricket::Codec::GetParam((uint64_t)this, (const void **)__p, &v6);
  if (v5 < 0)
  {
    operator delete(*(void **)__p);
    v5 = 20;
    if (__p > "x-google-max-bitrate")
      goto LABEL_15;
LABEL_14:
    if (&__p[20] <= "x-google-max-bitrate")
      goto LABEL_15;
LABEL_18:
    __break(1u);
    return;
  }
  v5 = 20;
  if (__p <= "x-google-max-bitrate")
    goto LABEL_14;
LABEL_15:
  strcpy(__p, "x-google-max-bitrate");
  cricket::Codec::GetParam((uint64_t)this, (const void **)__p, &v6);
  if (v5 < 0)
    operator delete(*(void **)__p);
}

void std::__introsort<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*,false>(uint64_t a1, std::string *a2, size_t j, char a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type i;
  unint64_t v11;
  std::string *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  __int128 v21;
  int v22;
  unsigned int v23;
  size_t v24;
  std::string::size_type v25;
  BOOL v26;
  char v27;
  char *v28;
  unsigned int v29;
  _QWORD *v30;
  int v31;
  size_t v32;
  std::string *v34;
  size_t v35;
  size_t v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  size_t v40;
  const void *v41;
  std::string *v42;
  size_t v43;
  size_t v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  BOOL v48;
  size_t v49;
  const void *v50;
  std::string *v51;
  size_t v52;
  size_t v53;
  int v54;
  size_t v55;
  size_t v56;
  __int128 v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  const void *v62;
  std::string *v63;
  size_t v64;
  size_t v65;
  int v66;
  unsigned int v67;
  size_t v68;
  const void *v69;
  std::string *v70;
  size_t v71;
  size_t v72;
  int v73;
  std::string *v74;
  char v75;
  uint64_t v76;
  __int128 v77;
  const std::string::value_type *v78;
  size_t v79;
  __int128 v80;
  int v81;
  __int128 v82;
  int v83;
  std::string *v84;
  size_t v85;
  int v86;
  char v87;
  char v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  std::string *v93;
  __int128 v94;
  BOOL v95;
  char v96;
  unsigned int v97;
  std::string *v98;
  size_t v99;
  size_t v100;
  const void *v101;
  size_t v102;
  int v103;
  size_t v104;
  const void *v105;
  size_t v106;
  int v107;
  __int128 v108;
  BOOL v109;
  char v110;
  unsigned int v111;
  std::string *v112;
  size_t v113;
  size_t v114;
  const void *v115;
  size_t v116;
  int v117;
  unint64_t v118;
  __int128 v119;
  BOOL v120;
  char v121;
  unsigned int v122;
  std::string *v123;
  unint64_t v124;
  unint64_t v125;
  const void *v126;
  size_t v127;
  int v128;
  std::string *v129;
  char v130;
  __int128 v131;
  size_t v132;
  __int128 v133;
  BOOL v134;
  char v135;
  unsigned int v136;
  std::string *v137;
  size_t v138;
  size_t v139;
  const void *v140;
  size_t v141;
  int v142;
  unsigned int v143;
  std::string *v144;
  size_t v145;
  size_t v146;
  const void *v147;
  size_t v148;
  int v149;
  const std::string::value_type *v150;
  size_t v151;
  int v152;
  __int128 v153;
  std::string *v154;
  size_t v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  const void *v159;
  uint64_t v160;
  std::string::size_type v161;
  int64_t v162;
  int64_t v163;
  int64_t v164;
  uint64_t v165;
  std::string::size_type v166;
  unsigned int v167;
  unsigned int v168;
  size_t v169;
  char *v170;
  std::string::size_type v171;
  unsigned int v172;
  unsigned int v173;
  char *v174;
  size_t v176;
  const std::string::value_type *v177;
  size_t v178;
  int v179;
  __int128 v180;
  uint64_t v181;
  int v182;
  char v183;
  __int128 v184;
  const std::string::value_type *v185;
  size_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  size_t v192;
  char *v193;
  unsigned int v194;
  size_t v195;
  char *v196;
  std::string::size_type v198;
  std::string *v199;
  size_t v200;
  int v201;
  size_t v203;
  const void *v204;
  size_t v205;
  int v206;
  __int128 v207;
  std::string *v208;
  size_t v209;
  size_t v211;
  const void *v212;
  size_t v214;
  int v215;
  int v216;
  std::string *v217;
  size_t v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  int v222;
  std::string *v223;
  size_t v224;
  const std::string::value_type *v225;
  size_t v226;
  const std::string::value_type *v227;
  size_t v228;
  int v229;
  __int128 v230;
  std::string::size_type v231;
  std::string *v232;
  char v233;
  std::string::size_type v234;
  const std::string::value_type *v235;
  size_t v236;
  unsigned int v237;
  std::string::size_type v238;
  std::string *v239;
  _QWORD *v240;
  size_t v241;
  size_t v242;
  int v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  std::string::size_type v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  int v254;
  const std::string::value_type *v255;
  size_t v256;
  int v257;
  int *v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  size_t v263;
  const void *v264;
  char v265;
  __int128 v266;
  size_t v268;
  const void *v269;
  size_t v271;
  int v272;
  char v273;
  __int128 v274;
  __int128 v275;
  const std::string::value_type *v276;
  size_t v277;
  int v278;
  __int128 v279;
  std::string *v280;
  size_t v281;
  int v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unsigned int v286;
  unsigned int v287;
  size_t v288;
  char *v289;
  int v290;
  std::string *v291;
  size_t v292;
  size_t v294;
  const void *v295;
  size_t v296;
  int v297;
  __int128 v298;
  int v299;
  int v300;
  std::string::size_type v301;
  char v302;
  __int128 v303;
  int v304;
  unint64_t v305;
  const std::string::value_type *v306;
  size_t v307;
  int v308;
  unsigned int v309;
  size_t v310;
  char *v311;
  std::string::size_type v313;
  std::string *v314;
  size_t v315;
  int v316;
  int v317;
  __int128 v318;
  std::string *v319;
  size_t v320;
  int v321;
  std::string *v322;
  size_t v323;
  int v324;
  uint64_t v325;
  unsigned int v326;
  unsigned int v327;
  size_t v328;
  const std::string::value_type *v329;
  std::string *v330;
  size_t v331;
  const void *v332;
  size_t v333;
  int v334;
  __int128 v335;
  uint64_t v336;
  std::string *v337;
  char v338;
  const std::string::value_type *v339;
  size_t v340;
  unsigned int v341;
  std::string::size_type size;
  std::string *v343;
  size_t v344;
  const std::string::value_type *v345;
  size_t v346;
  int v347;
  std::string *v348;
  __int128 v349;
  const std::string::value_type *v350;
  size_t v351;
  int v352;
  uint64_t v353;
  std::string *v354;
  std::string *v355;
  std::string *v356;
  int64_t v358;
  std::string *v359;
  char v360;
  int64_t v361;
  std::string *v362;
  size_t v363;
  std::string v364;
  int v365;
  char v366;
  std::string v367;
  int v368;
  unsigned __int8 v369;

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  size_t v28;
  const void *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  size_t v36;
  const void *v37;
  size_t v38;
  const void *v39;
  size_t v40;
  int v41;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>(a1, a2, a3, a4);
  v10 = *(unsigned __int8 *)(a5 + 28);
  v11 = *(unsigned __int8 *)(a4 + 28);
  if (v10 == v11)
  {
    if (*(char *)(a5 + 23) < 0)
    {
      v12 = *(_QWORD *)(a5 + 8);
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_82;
      v13 = *(const void **)a5;
      if (v12)
      {
        if (!v13)
          goto LABEL_82;
      }
    }
    else
    {
      v12 = *(unsigned __int8 *)(a5 + 23);
      v13 = (const void *)a5;
    }
    if (*(char *)(a4 + 23) < 0)
    {
      v14 = *(_QWORD *)(a4 + 8);
      if ((v14 & 0x8000000000000000) != 0)
        goto LABEL_82;
      v15 = *(const void **)a4;
      if (v14)
      {
        if (!v15)
          goto LABEL_82;
      }
    }
    else
    {
      v14 = *(unsigned __int8 *)(a4 + 23);
      v15 = (const void *)a4;
    }
    if (v14 >= v12)
      v16 = v12;
    else
      v16 = v14;
    v17 = memcmp(v13, v15, v16);
    if (v17)
    {
      if ((v17 & 0x80000000) == 0)
        return;
    }
    else if (v12 >= v14)
    {
      return;
    }
  }
  else if (v10 <= v11)
  {
    return;
  }
  std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a4, (std::string *)a5);
  v18 = *(unsigned __int8 *)(a4 + 28);
  v19 = *(unsigned __int8 *)(a3 + 28);
  if (v18 == v19)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      v20 = *(_QWORD *)(a4 + 8);
      if ((v20 & 0x8000000000000000) != 0)
        goto LABEL_82;
      v21 = *(const void **)a4;
      if (v20)
      {
        if (!v21)
          goto LABEL_82;
      }
    }
    else
    {
      v20 = *(unsigned __int8 *)(a4 + 23);
      v21 = (const void *)a4;
    }
    if (*(char *)(a3 + 23) < 0)
    {
      v22 = *(_QWORD *)(a3 + 8);
      if ((v22 & 0x8000000000000000) != 0)
        goto LABEL_82;
      v23 = *(const void **)a3;
      if (v22)
      {
        if (!v23)
          goto LABEL_82;
      }
    }
    else
    {
      v22 = *(unsigned __int8 *)(a3 + 23);
      v23 = (const void *)a3;
    }
    if (v22 >= v20)
      v24 = v20;
    else
      v24 = v22;
    v25 = memcmp(v21, v23, v24);
    if (v25)
    {
      if ((v25 & 0x80000000) == 0)
        return;
    }
    else if (v20 >= v22)
    {
      return;
    }
  }
  else if (v18 <= v19)
  {
    return;
  }
  std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a3, (std::string *)a4);
  v26 = *(unsigned __int8 *)(a3 + 28);
  v27 = *(unsigned __int8 *)(a2 + 28);
  if (v26 == v27)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      v28 = *(_QWORD *)(a3 + 8);
      if ((v28 & 0x8000000000000000) != 0)
        goto LABEL_82;
      v29 = *(const void **)a3;
      if (v28)
      {
        if (!v29)
          goto LABEL_82;
      }
    }
    else
    {
      v28 = *(unsigned __int8 *)(a3 + 23);
      v29 = (const void *)a3;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      v30 = *(_QWORD *)(a2 + 8);
      if ((v30 & 0x8000000000000000) != 0)
        goto LABEL_82;
      v31 = *(const void **)a2;
      if (v30)
      {
        if (!v31)
          goto LABEL_82;
      }
    }
    else
    {
      v30 = *(unsigned __int8 *)(a2 + 23);
      v31 = (const void *)a2;
    }
    if (v30 >= v28)
      v32 = v28;
    else
      v32 = v30;
    v33 = memcmp(v29, v31, v32);
    if (v33)
    {
      if ((v33 & 0x80000000) == 0)
        return;
    }
    else if (v28 >= v30)
    {
      return;
    }
  }
  else if (v26 <= v27)
  {
    return;
  }
  std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a2, (std::string *)a3);
  v34 = *(unsigned __int8 *)(a2 + 28);
  v35 = *(unsigned __int8 *)(a1 + 28);
  if (v34 != v35)
  {
    if (v34 <= v35)
      return;
    goto LABEL_65;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v36 = *(_QWORD *)(a2 + 8);
    if ((v36 & 0x8000000000000000) != 0)
      goto LABEL_82;
    v37 = *(const void **)a2;
    if (v36)
    {
      if (!v37)
        goto LABEL_82;
    }
  }
  else
  {
    v36 = *(unsigned __int8 *)(a2 + 23);
    v37 = (const void *)a2;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v38 = *(_QWORD *)(a1 + 8);
    if ((v38 & 0x8000000000000000) == 0)
    {
      v39 = *(const void **)a1;
      if (!v38 || v39)
        goto LABEL_74;
    }
LABEL_82:
    __break(1u);
    return;
  }
  v38 = *(unsigned __int8 *)(a1 + 23);
  v39 = (const void *)a1;
LABEL_74:
  if (v38 >= v36)
    v40 = v36;
  else
    v40 = v38;
  v41 = memcmp(v37, v39, v40);
  if (v41)
  {
    if ((v41 & 0x80000000) == 0)
      return;
LABEL_65:
    std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a1, (std::string *)a2);
    return;
  }
  if (v36 < v38)
    goto LABEL_65;
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>(std::string *this, std::string *a2, std::string *a3)
{
  unsigned int v6;
  unsigned int v7;
  std::string::size_type size;
  std::string *v9;
  unsigned int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  size_t v15;
  int v16;
  unsigned int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  size_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  size_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  size_t v40;
  int v41;
  size_t v42;
  int v43;

  v6 = a2[1].__r_.__value_.__s.__data_[4];
  v7 = this[1].__r_.__value_.__s.__data_[4];
  if (v6 != v7)
  {
    if (v6 <= v7)
      goto LABEL_23;
    goto LABEL_5;
  }
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a2->__r_.__value_.__l.__size_;
    if ((size & 0x8000000000000000) != 0)
      goto LABEL_103;
    v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size)
    {
      if (!v9)
        goto LABEL_103;
    }
  }
  else
  {
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v9 = a2;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = this->__r_.__value_.__l.__size_;
    if ((v13 & 0x8000000000000000) != 0)
      goto LABEL_103;
    v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v13)
    {
      if (!v14)
        goto LABEL_103;
    }
  }
  else
  {
    v13 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v14 = this;
  }
  if (v13 >= size)
    v15 = size;
  else
    v15 = v13;
  v16 = memcmp(v9, v14, v15);
  if (v16)
  {
    if ((v16 & 0x80000000) == 0)
      goto LABEL_23;
LABEL_5:
    v10 = a3[1].__r_.__value_.__s.__data_[4];
    if (v10 == v6)
    {
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      {
        v11 = a3->__r_.__value_.__l.__size_;
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_103;
        v12 = (std::string *)a3->__r_.__value_.__r.__words[0];
        if (v11)
        {
          if (!v12)
            goto LABEL_103;
        }
      }
      else
      {
        v11 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        v12 = a3;
      }
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        v28 = a2->__r_.__value_.__l.__size_;
        if ((v28 & 0x8000000000000000) != 0)
          goto LABEL_103;
        v29 = (std::string *)a2->__r_.__value_.__r.__words[0];
        if (v28)
        {
          if (!v29)
            goto LABEL_103;
        }
      }
      else
      {
        v28 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        v29 = a2;
      }
      if (v28 >= v11)
        v30 = v11;
      else
        v30 = v28;
      v31 = memcmp(v12, v29, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0)
          goto LABEL_63;
      }
      else if (v11 >= v28)
      {
LABEL_63:
        std::swap[abi:sn180100]<webrtc::RtpExtension>(this, a2);
        v32 = a3[1].__r_.__value_.__s.__data_[4];
        v33 = a2[1].__r_.__value_.__s.__data_[4];
        if (v32 == v33)
        {
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
          {
            v34 = a3->__r_.__value_.__l.__size_;
            if ((v34 & 0x8000000000000000) != 0)
              goto LABEL_103;
            v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
            if (v34)
            {
              if (!v35)
                goto LABEL_103;
            }
          }
          else
          {
            v34 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
            v35 = a3;
          }
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
          {
            v38 = a2->__r_.__value_.__l.__size_;
            if ((v38 & 0x8000000000000000) != 0)
              goto LABEL_103;
            v39 = (std::string *)a2->__r_.__value_.__r.__words[0];
            if (v38)
            {
              if (!v39)
                goto LABEL_103;
            }
          }
          else
          {
            v38 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
            v39 = a2;
          }
          if (v38 >= v34)
            v42 = v34;
          else
            v42 = v38;
          v43 = memcmp(v35, v39, v42);
          if (v43)
          {
            if ((v43 & 0x80000000) == 0)
              return;
          }
          else if (v34 >= v38)
          {
            return;
          }
        }
        else if (v32 <= v33)
        {
          return;
        }
        std::swap[abi:sn180100]<webrtc::RtpExtension>(a2, a3);
        return;
      }
    }
    else if (v10 <= v6)
    {
      goto LABEL_63;
    }
    std::swap[abi:sn180100]<webrtc::RtpExtension>(this, a3);
    return;
  }
  if (size < v13)
    goto LABEL_5;
LABEL_23:
  v17 = a3[1].__r_.__value_.__s.__data_[4];
  if (v17 == v6)
  {
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
    {
      v18 = a3->__r_.__value_.__l.__size_;
      if ((v18 & 0x8000000000000000) != 0)
        goto LABEL_103;
      v19 = (std::string *)a3->__r_.__value_.__r.__words[0];
      if (v18)
      {
        if (!v19)
          goto LABEL_103;
      }
    }
    else
    {
      v18 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      v19 = a3;
    }
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = a2->__r_.__value_.__l.__size_;
      if ((v20 & 0x8000000000000000) != 0)
        goto LABEL_103;
      v21 = (std::string *)a2->__r_.__value_.__r.__words[0];
      if (v20)
      {
        if (!v21)
          goto LABEL_103;
      }
    }
    else
    {
      v20 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      v21 = a2;
    }
    if (v20 >= v18)
      v22 = v18;
    else
      v22 = v20;
    v23 = memcmp(v19, v21, v22);
    if (v23)
    {
      if ((v23 & 0x80000000) == 0)
        return;
    }
    else if (v18 >= v20)
    {
      return;
    }
  }
  else if (v17 <= v6)
  {
    return;
  }
  std::swap[abi:sn180100]<webrtc::RtpExtension>(a2, a3);
  v24 = a2[1].__r_.__value_.__s.__data_[4];
  v25 = this[1].__r_.__value_.__s.__data_[4];
  if (v24 != v25)
  {
    if (v24 <= v25)
      return;
    goto LABEL_99;
  }
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    v26 = a2->__r_.__value_.__l.__size_;
    if ((v26 & 0x8000000000000000) != 0)
      goto LABEL_103;
    v27 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v26)
    {
      if (!v27)
        goto LABEL_103;
    }
  }
  else
  {
    v26 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v27 = a2;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v36 = this->__r_.__value_.__l.__size_;
    if ((v36 & 0x8000000000000000) == 0)
    {
      v37 = (std::string *)this->__r_.__value_.__r.__words[0];
      if (!v36 || v37)
        goto LABEL_83;
    }
LABEL_103:
    __break(1u);
    return;
  }
  v36 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v37 = this;
LABEL_83:
  if (v36 >= v26)
    v40 = v26;
  else
    v40 = v36;
  v41 = memcmp(v27, v37, v40);
  if (!v41)
  {
    if (v26 >= v36)
      return;
LABEL_99:
    std::swap[abi:sn180100]<webrtc::RtpExtension>(this, a2);
    return;
  }
  if (v41 < 0)
    goto LABEL_99;
}

void std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>(std::string *this, std::string *a2)
{
  std::string *v4;
  unsigned int v5;
  unsigned int v6;
  size_t v7;
  std::string::size_type *v8;
  std::string::__raw *v9;
  std::string *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  size_t v16;
  const std::string::value_type *v17;
  size_t v18;
  size_t v19;
  int v20;
  uint64_t i;
  char **v22;
  std::string *v23;
  std::string::value_type v24;
  const std::string::value_type *v25;
  size_t v26;
  char *v27;
  unsigned int v28;
  std::string::size_type v29;
  std::string *p_s1;
  _QWORD *v31;
  size_t v32;
  size_t v33;
  int v34;
  std::string *v35;
  std::string *v36;
  size_t v37;
  std::string::size_type size;
  std::string *v39;
  size_t v40;
  int v41;
  std::string __s1;
  int data;
  unsigned __int8 v44;

  switch(((char *)a2 - (char *)this) >> 5)
  {
    case 0:
    case 1:
      return;
    case 2:
      v4 = (std::string *)((char *)a2 - 32);
      v5 = a2[-1].__r_.__value_.__s.__data_[20];
      v6 = this[1].__r_.__value_.__s.__data_[4];
      if (v5 != v6)
      {
        if (v5 <= v6)
          return;
        goto LABEL_85;
      }
      if (a2[-1].__r_.__value_.__s.__data_[15] < 0)
      {
        v7 = a2[-1].__r_.__value_.__r.__words[0];
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_105;
        v8 = (std::string::size_type *)v4->__r_.__value_.__r.__words[0];
        if (v7)
        {
          if (!v8)
            goto LABEL_105;
        }
      }
      else
      {
        v7 = a2[-1].__r_.__value_.__s.__data_[15];
        v8 = &a2[-2].__r_.__value_.__r.__words[2];
      }
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      {
        size = this->__r_.__value_.__l.__size_;
        if ((size & 0x8000000000000000) != 0)
          goto LABEL_105;
        v39 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (size)
        {
          if (!v39)
            goto LABEL_105;
        }
      }
      else
      {
        size = HIBYTE(this->__r_.__value_.__r.__words[2]);
        v39 = this;
      }
      if (size >= v7)
        v40 = v7;
      else
        v40 = size;
      v41 = memcmp(v8, v39, v40);
      if (v41)
      {
        if (v41 < 0)
          goto LABEL_85;
      }
      else if (v7 < size)
      {
LABEL_85:
        std::swap[abi:sn180100]<webrtc::RtpExtension>(this, v4);
        return;
      }
      return;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>(this, (std::string *)((char *)this + 32), (std::string *)((char *)a2 - 32));
      return;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>((uint64_t)this, (uint64_t)&this[1].__r_.__value_.__l.__size_, (uint64_t)&this[2].__r_.__value_.__r.__words[2], (uint64_t)&a2[-2].__r_.__value_.__r.__words[2]);
      return;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*,0>((uint64_t)this, (uint64_t)&this[1].__r_.__value_.__l.__size_, (uint64_t)&this[2].__r_.__value_.__r.__words[2], (uint64_t)&this[4], (uint64_t)&a2[-2].__r_.__value_.__r.__words[2]);
      return;
    default:
      v9 = (std::string::__raw *)&this[2].__r_.__value_.__r.__words[2];
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>(this, (std::string *)((char *)this + 32), (std::string *)((char *)this + 64));
      v10 = this + 4;
      if (&this[4] == a2)
        return;
      v11 = 0;
      v12 = 0;
      while (2)
      {
        v13 = v10[1].__r_.__value_.__s.__data_[4];
        v14 = BYTE4(v9[1].__words[0]);
        if (v13 == v14)
        {
          v15 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
          if (v15 < 0)
          {
            v16 = v10->__r_.__value_.__l.__size_;
            if ((v16 & 0x8000000000000000) != 0)
              goto LABEL_105;
            v17 = (const std::string::value_type *)v10->__r_.__value_.__r.__words[0];
            if (v16)
            {
              if (!v17)
                goto LABEL_105;
            }
          }
          else
          {
            v16 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
            v17 = (const std::string::value_type *)v10;
          }
          if ((SHIBYTE(v9->__words[2]) & 0x80000000) == 0)
          {
            v18 = HIBYTE(v9->__words[2]);
LABEL_21:
            if (v18 >= v16)
              v19 = v16;
            else
              v19 = v18;
            v20 = memcmp(v17, v9, v19);
            if (v20)
            {
              if ((v20 & 0x80000000) == 0)
                goto LABEL_7;
            }
            else if (v16 >= v18)
            {
              goto LABEL_7;
            }
            goto LABEL_28;
          }
          v18 = v9->__words[1];
          if ((v18 & 0x8000000000000000) == 0)
          {
            v9 = (std::string::__raw *)v9->__words[0];
            if (!v18 || v9)
              goto LABEL_21;
          }
LABEL_105:
          __break(1u);
          return;
        }
        if (v13 <= v14)
          goto LABEL_7;
        LOBYTE(v15) = *((_BYTE *)&v10->__r_.__value_.__s + 23);
LABEL_28:
        if ((v15 & 0x80) != 0)
          std::string::__init_copy_ctor_external(&__s1, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
        else
          __s1 = *v10;
        data = (int)v10[1].__r_.__value_.__l.__data_;
        v44 = v10[1].__r_.__value_.__s.__data_[4];
        for (i = v11; ; i -= 32)
        {
          v22 = (char **)((char *)&this[2].__r_.__value_.__r.__words[2] + i);
          v23 = (std::string *)((char *)this + i + 96);
          v24 = this[3].__r_.__value_.__s.__data_[i + 15];
          if (*((char *)&this[4].__r_.__value_.__r.__words[2] + i + 7) < 0)
          {
            v25 = v24 >= 0 ? (char *)&this[2].__r_.__value_.__r.__words[2] + i : *v22;
            v26 = v24 >= 0
                ? this[3].__r_.__value_.__s.__data_[i + 15]
                : *(std::string::size_type *)((char *)this[3].__r_.__value_.__r.__words + i);
            std::string::__assign_no_alias<false>(v23, v25, v26);
          }
          else if (this[3].__r_.__value_.__s.__data_[i + 15] < 0)
          {
            std::string::__assign_no_alias<true>(v23, *v22, *(std::string::size_type *)((char *)this[3].__r_.__value_.__r.__words + i));
          }
          else
          {
            *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)v22;
            *(std::string::size_type *)((char *)&this[4].__r_.__value_.__r.__words[2] + i) = *(std::string::size_type *)((char *)&this[3].__r_.__value_.__l.__size_ + i);
          }
          v27 = (char *)this + i;
          *((_DWORD *)v27 + 30) = *(_DWORD *)((char *)&this[3].__r_.__value_.__r.__words[2] + i);
          v27[124] = this[3].__r_.__value_.__s.__data_[i + 20];
          if (i == -64)
            break;
          v28 = v27[60];
          if (v44 == v28)
          {
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            {
              v29 = __s1.__r_.__value_.__l.__size_;
              if ((__s1.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                goto LABEL_105;
              p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              if (__s1.__r_.__value_.__l.__size_)
              {
                if (!__s1.__r_.__value_.__r.__words[0])
                  goto LABEL_105;
              }
            }
            else
            {
              v29 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
              p_s1 = &__s1;
            }
            v31 = v27 + 32;
            if (this[2].__r_.__value_.__s.__data_[i + 7] < 0)
            {
              v32 = *(std::string::size_type *)((char *)&this[1].__r_.__value_.__r.__words[2] + i);
              if ((v32 & 0x8000000000000000) != 0)
                goto LABEL_105;
              v31 = (_QWORD *)*v31;
              if (v32)
              {
                if (!v31)
                  goto LABEL_105;
              }
            }
            else
            {
              v32 = this[2].__r_.__value_.__s.__data_[i + 7];
            }
            if (v32 >= v29)
              v33 = v29;
            else
              v33 = v32;
            v34 = memcmp(p_s1, v31, v33);
            if (v34)
            {
              if ((v34 & 0x80000000) == 0)
                goto LABEL_64;
            }
            else if (v29 >= v32)
            {
LABEL_64:
              v35 = (std::string *)((char *)this + i + 64);
              if (v35 == &__s1)
                goto LABEL_78;
              goto LABEL_67;
            }
          }
          else if (v44 <= v28)
          {
            goto LABEL_64;
          }
        }
        v35 = this;
        if (this == &__s1)
          goto LABEL_78;
LABEL_67:
        if (SHIBYTE(v35->__r_.__value_.__r.__words[2]) < 0)
        {
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v36 = &__s1;
          else
            v36 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            v37 = __s1.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>(v35, (const std::string::value_type *)v36, v37);
        }
        else if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v35, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
        }
        else
        {
          *v35 = __s1;
        }
LABEL_78:
        *((_DWORD *)v27 + 22) = data;
        v27[92] = v44;
        if (++v12 != 8)
        {
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_7:
          v9 = (std::string::__raw *)v10;
          v11 += 32;
          v10 = (std::string *)((char *)v10 + 32);
          if (v10 == a2)
            return;
          continue;
        }
        break;
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      return;
  }
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  size_t v18;
  const void *v19;
  size_t v20;
  const void *v21;
  size_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  int v31;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>((std::string *)a1, (std::string *)a2, (std::string *)a3);
  v8 = *(unsigned __int8 *)(a4 + 28);
  v9 = *(unsigned __int8 *)(a3 + 28);
  if (v8 == v9)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      v10 = *(_QWORD *)(a4 + 8);
      if ((v10 & 0x8000000000000000) != 0)
        goto LABEL_62;
      v11 = *(const void **)a4;
      if (v10)
      {
        if (!v11)
          goto LABEL_62;
      }
    }
    else
    {
      v10 = *(unsigned __int8 *)(a4 + 23);
      v11 = (const void *)a4;
    }
    if (*(char *)(a3 + 23) < 0)
    {
      v12 = *(_QWORD *)(a3 + 8);
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_62;
      v13 = *(const void **)a3;
      if (v12)
      {
        if (!v13)
          goto LABEL_62;
      }
    }
    else
    {
      v12 = *(unsigned __int8 *)(a3 + 23);
      v13 = (const void *)a3;
    }
    if (v12 >= v10)
      v14 = v10;
    else
      v14 = v12;
    v15 = memcmp(v11, v13, v14);
    if (v15)
    {
      if ((v15 & 0x80000000) == 0)
        return;
    }
    else if (v10 >= v12)
    {
      return;
    }
  }
  else if (v8 <= v9)
  {
    return;
  }
  std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a3, (std::string *)a4);
  v16 = *(unsigned __int8 *)(a3 + 28);
  v17 = *(unsigned __int8 *)(a2 + 28);
  if (v16 == v17)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      v18 = *(_QWORD *)(a3 + 8);
      if ((v18 & 0x8000000000000000) != 0)
        goto LABEL_62;
      v19 = *(const void **)a3;
      if (v18)
      {
        if (!v19)
          goto LABEL_62;
      }
    }
    else
    {
      v18 = *(unsigned __int8 *)(a3 + 23);
      v19 = (const void *)a3;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      v20 = *(_QWORD *)(a2 + 8);
      if ((v20 & 0x8000000000000000) != 0)
        goto LABEL_62;
      v21 = *(const void **)a2;
      if (v20)
      {
        if (!v21)
          goto LABEL_62;
      }
    }
    else
    {
      v20 = *(unsigned __int8 *)(a2 + 23);
      v21 = (const void *)a2;
    }
    if (v20 >= v18)
      v22 = v18;
    else
      v22 = v20;
    v23 = memcmp(v19, v21, v22);
    if (v23)
    {
      if ((v23 & 0x80000000) == 0)
        return;
    }
    else if (v18 >= v20)
    {
      return;
    }
  }
  else if (v16 <= v17)
  {
    return;
  }
  std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a2, (std::string *)a3);
  v24 = *(unsigned __int8 *)(a2 + 28);
  v25 = *(unsigned __int8 *)(a1 + 28);
  if (v24 != v25)
  {
    if (v24 <= v25)
      return;
    goto LABEL_45;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v26 = *(_QWORD *)(a2 + 8);
    if ((v26 & 0x8000000000000000) != 0)
      goto LABEL_62;
    v27 = *(const void **)a2;
    if (v26)
    {
      if (!v27)
        goto LABEL_62;
    }
  }
  else
  {
    v26 = *(unsigned __int8 *)(a2 + 23);
    v27 = (const void *)a2;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v28 = *(_QWORD *)(a1 + 8);
    if ((v28 & 0x8000000000000000) == 0)
    {
      v29 = *(const void **)a1;
      if (!v28 || v29)
        goto LABEL_54;
    }
LABEL_62:
    __break(1u);
    return;
  }
  v28 = *(unsigned __int8 *)(a1 + 23);
  v29 = (const void *)a1;
LABEL_54:
  if (v28 >= v26)
    v30 = v26;
  else
    v30 = v28;
  v31 = memcmp(v27, v29, v30);
  if (v31)
  {
    if ((v31 & 0x80000000) == 0)
      return;
LABEL_45:
    std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a1, (std::string *)a2);
    return;
  }
  if (v26 < v28)
    goto LABEL_45;
}

_QWORD *std::string::basic_string<std::string_view,0>(_BYTE *a1, _BYTE *__src, size_t __len)
{
  _QWORD *v5;
  size_t v6;
  size_t v7;
  _BYTE *v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_15:
    abort();
  v5 = a1;
  if (__len > 0x16)
  {
    v6 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v6 = __len | 7;
    v7 = v6 + 1;
    a1 = operator new(v6 + 1);
    v5[1] = __len;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = a1;
  }
  else
  {
    a1[23] = __len;
  }
  v8 = &a1[__len];
  if (a1 <= __src && v8 > __src)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (__len)
    memmove(a1, __src, __len);
  *v8 = 0;
  return v5;
}

void webrtc::GetMediaStreamIds(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  __int128 *v9;
  std::string *v10;
  __int128 v11;
  char *v12;
  char **v13;
  char *v14;
  char **v15;
  size_t v16;
  const std::string::value_type *v17;
  size_t v18;
  BOOL v19;
  char v20;
  const std::string::value_type *v21;
  size_t v22;
  const void **v23;
  size_t v24;
  const void *v25;
  size_t v26;
  size_t v27;
  int v28;
  const std::string::value_type *v29;
  size_t v30;
  size_t v31;
  int v32;
  char *v33;
  std::string *v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v54;
  char **v55;
  char *__p;

  if (a1 != a2)
  {
    v3 = a2;
    v4 = a1;
    v55 = (char **)(a3 + 1);
LABEL_5:
    v5 = *(_QWORD *)(v4 + 96);
    v6 = *(_QWORD *)(v4 + 104);
    v7 = v6 - v5;
    if (v6 == v5)
      goto LABEL_4;
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    __p = (char *)operator new(v7);
    v8 = 0;
    do
    {
      while (1)
      {
        v9 = (__int128 *)(v5 + v8);
        v10 = (std::string *)&__p[v8];
        if ((*(char *)(v5 + v8 + 23) & 0x80000000) == 0)
          break;
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
        v8 += 24;
        if (v5 + v8 == v6)
          goto LABEL_11;
      }
      v11 = *v9;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      v8 += 24;
    }
    while (v5 + v8 != v6);
LABEL_11:
    if (!v8)
      goto LABEL_3;
    v12 = __p;
    v51 = v8 / 24;
    v52 = v4;
    v54 = &__p[24 * (v8 / 24)];
    while (1)
    {
      v13 = v55;
      v14 = *v55;
      v15 = v55;
      if (*v55)
        break;
LABEL_56:
      v33 = (char *)operator new(0x38uLL);
      v34 = (std::string *)(v33 + 32);
      if (v12[23] < 0)
      {
        std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
      }
      else
      {
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)v12;
        *((_QWORD *)v33 + 6) = *((_QWORD *)v12 + 2);
      }
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v13;
      *v15 = v33;
      v35 = (uint64_t *)**a3;
      if (v35)
      {
        *a3 = v35;
        v33 = *v15;
      }
      v36 = *v55;
      v19 = v33 == *v55;
      v33[24] = v19;
      if (!v19)
      {
        do
        {
          v37 = *((_QWORD *)v33 + 2);
          if (*(_BYTE *)(v37 + 24))
            break;
          v38 = *(char **)(v37 + 16);
          v39 = *(_QWORD *)v38;
          if (*(_QWORD *)v38 == v37)
          {
            v42 = *((_QWORD *)v38 + 1);
            if (!v42 || (v43 = *(unsigned __int8 *)(v42 + 24), v40 = (_BYTE *)(v42 + 24), v43))
            {
              if (*(char **)v37 == v33)
              {
                *(_BYTE *)(v37 + 24) = 1;
                v38[24] = 0;
                v46 = *(_QWORD *)(v37 + 8);
                *(_QWORD *)v38 = v46;
                if (v46)
                  goto LABEL_76;
              }
              else
              {
                v44 = *(uint64_t **)(v37 + 8);
                v45 = *v44;
                *(_QWORD *)(v37 + 8) = *v44;
                if (v45)
                {
                  *(_QWORD *)(v45 + 16) = v37;
                  v38 = *(char **)(v37 + 16);
                }
                v44[2] = (uint64_t)v38;
                *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8 * (**(_QWORD **)(v37 + 16) != v37)) = v44;
                *v44 = v37;
                *(_QWORD *)(v37 + 16) = v44;
                v38 = (char *)v44[2];
                v37 = *(_QWORD *)v38;
                *((_BYTE *)v44 + 24) = 1;
                v38[24] = 0;
                v46 = *(_QWORD *)(v37 + 8);
                *(_QWORD *)v38 = v46;
                if (v46)
LABEL_76:
                  *(_QWORD *)(v46 + 16) = v38;
              }
              *(_QWORD *)(v37 + 16) = *((_QWORD *)v38 + 2);
              *(_QWORD *)(*((_QWORD *)v38 + 2) + 8 * (**((_QWORD **)v38 + 2) != (_QWORD)v38)) = v37;
              *(_QWORD *)(v37 + 8) = v38;
LABEL_15:
              *((_QWORD *)v38 + 2) = v37;
              break;
            }
          }
          else if (!v39 || (v41 = *(unsigned __int8 *)(v39 + 24), v40 = (_BYTE *)(v39 + 24), v41))
          {
            if (*(char **)v37 == v33)
            {
              v48 = *((_QWORD *)v33 + 1);
              *(_QWORD *)v37 = v48;
              if (v48)
              {
                *(_QWORD *)(v48 + 16) = v37;
                v38 = *(char **)(v37 + 16);
              }
              *((_QWORD *)v33 + 2) = v38;
              *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8 * (**(_QWORD **)(v37 + 16) != v37)) = v33;
              *((_QWORD *)v33 + 1) = v37;
              *(_QWORD *)(v37 + 16) = v33;
              v38 = (char *)*((_QWORD *)v33 + 2);
              v33[24] = 1;
              v38[24] = 0;
              v37 = *((_QWORD *)v38 + 1);
              v47 = *(char **)v37;
              *((_QWORD *)v38 + 1) = *(_QWORD *)v37;
              if (!v47)
                goto LABEL_14;
            }
            else
            {
              *(_BYTE *)(v37 + 24) = 1;
              v38[24] = 0;
              v37 = *((_QWORD *)v38 + 1);
              v47 = *(char **)v37;
              *((_QWORD *)v38 + 1) = *(_QWORD *)v37;
              if (!v47)
                goto LABEL_14;
            }
            *((_QWORD *)v47 + 2) = v38;
LABEL_14:
            *(_QWORD *)(v37 + 16) = *((_QWORD *)v38 + 2);
            *(_QWORD *)(*((_QWORD *)v38 + 2) + 8 * (**((_QWORD **)v38 + 2) != (_QWORD)v38)) = v37;
            *(_QWORD *)v37 = v38;
            goto LABEL_15;
          }
          *(_BYTE *)(v37 + 24) = 1;
          v33 = v38;
          v38[24] = v38 == v36;
          *v40 = 1;
        }
        while (v38 != v36);
      }
      a3[2] = (uint64_t *)((char *)a3[2] + 1);
LABEL_17:
      v12 += 24;
      if (v12 == v54)
      {
        v3 = a2;
        v49 = 24 * v51;
        v4 = v52;
        do
        {
          if (__p[v49 - 1] < 0)
            operator delete(*(void **)&__p[v49 - 24]);
          v49 -= 24;
        }
        while (v49);
LABEL_3:
        operator delete(__p);
LABEL_4:
        v4 += 144;
        if (v4 == v3)
          return;
        goto LABEL_5;
      }
    }
    v16 = v12[23];
    v17 = *(const std::string::value_type **)v12;
    v18 = *((_QWORD *)v12 + 1);
    if (v18)
      v19 = v17 == 0;
    else
      v19 = 0;
    v20 = !v19;
    while (1)
    {
      v13 = (char **)v14;
      v21 = v12;
      v22 = v16;
      if ((v16 & 0x80) != 0)
      {
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_91;
        v21 = v17;
        v22 = v18;
        if ((v20 & 1) == 0)
          goto LABEL_91;
      }
      v23 = (const void **)(v14 + 32);
      v24 = v14[55];
      v25 = v14 + 32;
      v26 = v24;
      if (v14[55] < 0)
      {
        v26 = *((_QWORD *)v14 + 5);
        if ((v26 & 0x8000000000000000) != 0 || (v25 = *v23, v26) && !v25)
        {
LABEL_91:
          __break(1u);
          return;
        }
      }
      if (v26 >= v22)
        v27 = v22;
      else
        v27 = v26;
      v28 = memcmp(v21, v25, v27);
      if (v28)
      {
        if (v28 < 0)
          goto LABEL_25;
LABEL_40:
        if ((v24 & 0x80) != 0)
        {
          v24 = (size_t)v13[5];
          if ((v24 & 0x8000000000000000) != 0)
            goto LABEL_91;
          v23 = (const void **)*v23;
          if (v24)
          {
            if (!v23)
              goto LABEL_91;
          }
        }
        v29 = v12;
        v30 = v16;
        if ((v16 & 0x80) != 0)
        {
          if ((v18 & 0x8000000000000000) != 0)
            goto LABEL_91;
          v29 = v17;
          v30 = v18;
          if ((v20 & 1) == 0)
            goto LABEL_91;
        }
        if (v30 >= v24)
          v31 = v24;
        else
          v31 = v30;
        v32 = memcmp(v23, v29, v31);
        if (v32)
        {
          if ((v32 & 0x80000000) == 0)
            goto LABEL_17;
        }
        else if (v24 >= v30)
        {
          goto LABEL_17;
        }
        v14 = v13[1];
        if (!v14)
        {
          v15 = v13 + 1;
          goto LABEL_56;
        }
      }
      else
      {
        if (v22 >= v26)
          goto LABEL_40;
LABEL_25:
        v14 = *v13;
        v15 = v13;
        if (!*v13)
          goto LABEL_56;
      }
    }
  }
}

void webrtc::SdpSerialize(webrtc *this@<X0>, const webrtc::JsepSessionDescription *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  size_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  unsigned __int8 v10;
  size_t v11;
  BOOL v12;
  char *p_p_new_stuff;
  std::string *v14;
  _BYTE *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string *v19;
  char *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string::size_type v23;
  unsigned __int8 v24;
  size_t v25;
  BOOL v26;
  char *p_p;
  std::string *v28;
  _BYTE *v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string *v33;
  char *v34;
  std::string::size_type v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string *v38;
  _BYTE *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string *v43;
  _WORD *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string *v48;
  _BYTE *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  std::string *v53;
  char *v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string::size_type v57;
  std::string *v58;
  _BYTE *v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string::size_type v62;
  unsigned __int8 v63;
  size_t v64;
  std::string *v65;
  std::string *v66;
  char *v67;
  std::string::size_type v68;
  _QWORD *v69;
  uint64_t v70;
  char **v71;
  char *p_src;
  size_t v73;
  char *v74;
  uint64_t v75;
  size_t v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  size_t v80;
  char *v81;
  char *v82;
  __int128 *v84;
  uint64_t v86;
  int v87;
  char *v88;
  size_t v89;
  BOOL v90;
  unint64_t v92;
  size_t v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  char *v98;
  __int128 *v99;
  char *v100;
  size_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  size_t v105;
  std::string *v106;
  std::string::size_type v107;
  std::string::size_type v108;
  std::string *v109;
  _BYTE *v110;
  std::string::size_type v111;
  std::string::size_type v112;
  std::string::size_type v113;
  std::string *v114;
  _BYTE *v115;
  std::string::size_type v116;
  std::string::size_type v117;
  std::string::size_type v118;
  std::string *v119;
  char *v120;
  std::string::size_type v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  std::string::size_type v129;
  std::string::size_type v130;
  const std::string::value_type *v131;
  int v132;
  std::string::size_type v133;
  BOOL v134;
  std::string *v135;
  std::string::size_type v137;
  std::string::size_type v138;
  std::string::size_type v139;
  _QWORD *v140;
  std::string *v141;
  char *v142;
  std::string::size_type v143;
  _OWORD *v144;
  BOOL v145;
  size_t v146;
  std::string *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  webrtc *v151;
  size_t v152;
  std::string *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  std::string *v158;
  unint64_t v159;
  uint64_t v160;
  std::string *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  std::string *v166;
  std::string *v167;
  std::string *v168;
  std::string *v169;
  void **v170;
  std::string *v171;
  std::string::size_type v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  unsigned __int8 *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  _QWORD v181[2];
  webrtc *v182;
  _QWORD *v183;
  std::string *v184;
  _QWORD *v185;
  uint64_t v186;
  __int128 __src;
  int64_t v188;
  void *v189;
  _QWORD *v190;
  unsigned __int8 v191;
  void *__p;
  size_t v193;
  char v194;
  std::string::value_type *__p_new_stuff;
  size_t v196;
  char v197;
  std::string v198;

  v186 = (*(uint64_t (**)(webrtc *, const webrtc::JsepSessionDescription *))(*(_QWORD *)this + 32))(this, a2);
  if (!v186)
  {
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
    return;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  webrtc::AddLine("v=0", 3uLL, (std::string *)a3);
  memset(&v198, 0, sizeof(v198));
  webrtc::InitLine(111, "-", 1uLL, &v198);
  (*(void (**)(void **__return_ptr, webrtc *))(*(_QWORD *)this + 40))(&__p, this);
  v6 = v194;
  if (v194 < 0)
    v6 = v193;
  v182 = this;
  if (v6)
  {
    (*(void (**)(std::string::value_type **__return_ptr, webrtc *))(*(_QWORD *)this + 40))(&__p_new_stuff, this);
    if ((v194 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v197 = 1;
  if (&__p_new_stuff <= (std::string::value_type **)"0" && (char *)&__p_new_stuff + 1 > "0")
    goto LABEL_303;
  LOWORD(__p_new_stuff) = 48;
  if (v194 < 0)
LABEL_6:
    operator delete(__p);
LABEL_7:
  (*(void (**)(void **__return_ptr, webrtc *))(*(_QWORD *)v182 + 48))(&v189, v182);
  v7 = v191;
  if ((v191 & 0x80u) != 0)
    v7 = (unint64_t)v190;
  if (v7)
  {
    (*(void (**)(void **__return_ptr, webrtc *))(*(_QWORD *)v182 + 48))(&__p, v182);
    if ((v191 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v194 = 1;
  if (&__p <= (void **)"0" && (char *)&__p + 1 > "0")
    goto LABEL_303;
  LOWORD(__p) = 48;
  if ((v191 & 0x80) != 0)
LABEL_11:
    operator delete(v189);
LABEL_12:
  size = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = 22;
  else
    v9 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v198.__r_.__value_.__l.__size_;
  v3 = (unint64_t)" ";
  if (v9 == size)
  {
    std::string::__grow_by_and_replace(&v198, v9, 1uLL, v9, v9, 0, 1uLL, " ");
    v10 = v197;
    if ((v197 & 0x80000000) == 0)
    {
LABEL_19:
      v11 = v10;
      v12 = v10 == 0;
      p_p_new_stuff = (char *)&__p_new_stuff;
      goto LABEL_30;
    }
  }
  else
  {
    v14 = &v198;
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = (std::string *)v198.__r_.__value_.__r.__words[0];
    v15 = (char *)v14 + size;
    if ((char *)v14 + size <= " " && v15 + 1 > " ")
      goto LABEL_303;
    *v15 = 32;
    v16 = size + 1;
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    {
      v198.__r_.__value_.__l.__size_ = v16;
      v14->__r_.__value_.__s.__data_[v16] = 0;
      v10 = v197;
      if ((v197 & 0x80000000) == 0)
        goto LABEL_19;
    }
    else
    {
      *((_BYTE *)&v198.__r_.__value_.__s + 23) = v16 & 0x7F;
      v14->__r_.__value_.__s.__data_[v16] = 0;
      v10 = v197;
      if ((v197 & 0x80000000) == 0)
        goto LABEL_19;
    }
  }
  v11 = v196;
  if ((v196 & 0x8000000000000000) != 0)
    goto LABEL_303;
  p_p_new_stuff = __p_new_stuff;
  v12 = v196 == 0;
  if (v196)
  {
    if (!__p_new_stuff)
      goto LABEL_303;
  }
LABEL_30:
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = 22;
  else
    v17 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  else
    v18 = v198.__r_.__value_.__l.__size_;
  if (v17 - v18 >= v11)
  {
    if (!v12)
    {
      if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v198;
      else
        v19 = (std::string *)v198.__r_.__value_.__r.__words[0];
      v20 = (char *)v19 + v18;
      if ((char *)v19 + v18 <= p_p_new_stuff && &v20[v11] > p_p_new_stuff)
        goto LABEL_303;
      memmove(v20, p_p_new_stuff, v11);
      v21 = v18 + v11;
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        v198.__r_.__value_.__l.__size_ = v18 + v11;
      else
        *((_BYTE *)&v198.__r_.__value_.__s + 23) = v21 & 0x7F;
      v19->__r_.__value_.__s.__data_[v21] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v198, v17, v18 + v11 - v17, v18, v18, 0, v11, p_p_new_stuff);
  }
  v22 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = 22;
  else
    v23 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v22 = v198.__r_.__value_.__l.__size_;
  if (v23 == v22)
  {
    std::string::__grow_by_and_replace(&v198, v23, 1uLL, v23, v23, 0, 1uLL, " ");
    v24 = v194;
    if ((v194 & 0x80000000) == 0)
    {
LABEL_65:
      v25 = v24;
      v26 = v24 == 0;
      p_p = (char *)&__p;
      goto LABEL_75;
    }
  }
  else
  {
    v28 = &v198;
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = (std::string *)v198.__r_.__value_.__r.__words[0];
    v29 = (char *)v28 + v22;
    if ((char *)v28 + v22 <= " " && v29 + 1 > " ")
      goto LABEL_303;
    *v29 = 32;
    v30 = v22 + 1;
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    {
      v198.__r_.__value_.__l.__size_ = v30;
      v28->__r_.__value_.__s.__data_[v30] = 0;
      v24 = v194;
      if ((v194 & 0x80000000) == 0)
        goto LABEL_65;
    }
    else
    {
      *((_BYTE *)&v198.__r_.__value_.__s + 23) = v30 & 0x7F;
      v28->__r_.__value_.__s.__data_[v30] = 0;
      v24 = v194;
      if ((v194 & 0x80000000) == 0)
        goto LABEL_65;
    }
  }
  v25 = v193;
  if ((v193 & 0x8000000000000000) != 0)
    goto LABEL_303;
  p_p = (char *)__p;
  v26 = v193 == 0;
  if (v193)
  {
    if (!__p)
      goto LABEL_303;
  }
LABEL_75:
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = 22;
  else
    v31 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  else
    v32 = v198.__r_.__value_.__l.__size_;
  if (v31 - v32 >= v25)
  {
    if (!v26)
    {
      if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v198;
      else
        v33 = (std::string *)v198.__r_.__value_.__r.__words[0];
      v34 = (char *)v33 + v32;
      if ((char *)v33 + v32 <= p_p && &v34[v25] > p_p)
        goto LABEL_303;
      memmove(v34, p_p, v25);
      v35 = v32 + v25;
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        v198.__r_.__value_.__l.__size_ = v32 + v25;
      else
        *((_BYTE *)&v198.__r_.__value_.__s + 23) = v35 & 0x7F;
      v33->__r_.__value_.__s.__data_[v35] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v198, v31, v32 + v25 - v31, v32, v32, 0, v25, p_p);
  }
  v36 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = 22;
  else
    v37 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v36 = v198.__r_.__value_.__l.__size_;
  if (v37 == v36)
  {
    std::string::__grow_by_and_replace(&v198, v37, 1uLL, v37, v37, 0, 1uLL, " ");
  }
  else
  {
    v38 = &v198;
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = (std::string *)v198.__r_.__value_.__r.__words[0];
    v39 = (char *)v38 + v36;
    if ((char *)v38 + v36 <= " " && v39 + 1 > " ")
      goto LABEL_303;
    *v39 = 32;
    v40 = v36 + 1;
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      v198.__r_.__value_.__l.__size_ = v40;
    else
      *((_BYTE *)&v198.__r_.__value_.__s + 23) = v40 & 0x7F;
    v38->__r_.__value_.__s.__data_[v40] = 0;
  }
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = 22;
  else
    v41 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  else
    v42 = v198.__r_.__value_.__l.__size_;
  if (v41 - v42 >= 2)
  {
    v43 = &v198;
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v43 = (std::string *)v198.__r_.__value_.__r.__words[0];
    v44 = (_WORD *)((char *)v43 + v42);
    if ((char *)v43 + v42 <= "IN" && v44 + 1 > (_WORD *)"IN")
      goto LABEL_303;
    *v44 = 20041;
    v45 = v42 + 2;
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      v198.__r_.__value_.__l.__size_ = v42 + 2;
    else
      *((_BYTE *)&v198.__r_.__value_.__s + 23) = v45 & 0x7F;
    v43->__r_.__value_.__s.__data_[v45] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v198, v41, v42 - v41 + 2, v42, v42, 0, 2uLL, "IN");
  }
  v46 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = 22;
  else
    v47 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v46 = v198.__r_.__value_.__l.__size_;
  if (v47 == v46)
  {
    std::string::__grow_by_and_replace(&v198, v47, 1uLL, v47, v47, 0, 1uLL, " ");
  }
  else
  {
    v48 = &v198;
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v48 = (std::string *)v198.__r_.__value_.__r.__words[0];
    v49 = (char *)v48 + v46;
    if ((char *)v48 + v46 <= " " && v49 + 1 > " ")
      goto LABEL_303;
    *v49 = 32;
    v50 = v46 + 1;
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      v198.__r_.__value_.__l.__size_ = v50;
    else
      *((_BYTE *)&v198.__r_.__value_.__s + 23) = v50 & 0x7F;
    v48->__r_.__value_.__s.__data_[v50] = 0;
  }
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = 22;
  else
    v51 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  else
    v52 = v198.__r_.__value_.__l.__size_;
  if (v51 - v52 >= 3)
  {
    v53 = &v198;
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v53 = (std::string *)v198.__r_.__value_.__r.__words[0];
    v54 = (char *)v53 + v52;
    if ((char *)v53 + v52 <= "IP4" && v54 + 3 > "IP4")
      goto LABEL_303;
    v54[2] = 52;
    *(_WORD *)v54 = 20553;
    v55 = v52 + 3;
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      v198.__r_.__value_.__l.__size_ = v52 + 3;
    else
      *((_BYTE *)&v198.__r_.__value_.__s + 23) = v55 & 0x7F;
    v53->__r_.__value_.__s.__data_[v55] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v198, v51, v52 - v51 + 3, v52, v52, 0, 3uLL, "IP4");
  }
  v56 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = 22;
  else
    v57 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v56 = v198.__r_.__value_.__l.__size_;
  if (v57 == v56)
  {
    std::string::__grow_by_and_replace(&v198, v57, 1uLL, v57, v57, 0, 1uLL, " ");
  }
  else
  {
    v58 = &v198;
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v58 = (std::string *)v198.__r_.__value_.__r.__words[0];
    v59 = (char *)v58 + v56;
    if ((char *)v58 + v56 <= " " && v59 + 1 > " ")
      goto LABEL_303;
    *v59 = 32;
    v60 = v56 + 1;
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      v198.__r_.__value_.__l.__size_ = v60;
    else
      *((_BYTE *)&v198.__r_.__value_.__s + 23) = v60 & 0x7F;
    v58->__r_.__value_.__s.__data_[v60] = 0;
  }
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = 22;
  else
    v61 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  else
    v62 = v198.__r_.__value_.__l.__size_;
  if (v61 - v62 >= 9)
  {
    v66 = &v198;
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v66 = (std::string *)v198.__r_.__value_.__r.__words[0];
    v67 = (char *)v66 + v62;
    if ((char *)v66 + v62 <= "127.0.0.1" && v67 + 9 > "127.0.0.1")
      goto LABEL_303;
    v67[8] = 49;
    *(_QWORD *)v67 = *(_QWORD *)"127.0.0.1";
    v68 = v62 + 9;
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    {
      v198.__r_.__value_.__l.__size_ = v62 + 9;
      v66->__r_.__value_.__s.__data_[v68] = 0;
      v63 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_180;
    }
    else
    {
      *((_BYTE *)&v198.__r_.__value_.__s + 23) = v68 & 0x7F;
      v66->__r_.__value_.__s.__data_[v68] = 0;
      v63 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_180;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v198, v61, v62 - v61 + 9, v62, v62, 0, 9uLL, "127.0.0.1");
    v63 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_180:
      v64 = v63;
      v65 = &v198;
      goto LABEL_190;
    }
  }
  v64 = v198.__r_.__value_.__l.__size_;
  if ((v198.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_303;
  v65 = (std::string *)v198.__r_.__value_.__r.__words[0];
  if (v198.__r_.__value_.__l.__size_)
  {
    if (!v198.__r_.__value_.__r.__words[0])
      goto LABEL_303;
  }
LABEL_190:
  webrtc::AddLine((char *)v65, v64, (std::string *)a3);
  webrtc::AddLine("s=-", 3uLL, (std::string *)a3);
  webrtc::AddLine("t=0 0", 5uLL, (std::string *)a3);
  HIBYTE(v188) = 6;
  if (&__src <= (__int128 *)"BUNDLE" && (char *)&__src + 6 > "BUNDLE")
    goto LABEL_303;
  strcpy((char *)&__src, "BUNDLE");
  cricket::SessionDescription::GetGroupsByName(v186, (unsigned __int8 **)&__src, (char **)&v189);
  if (SHIBYTE(v188) < 0)
  {
    operator delete((void *)__src);
    v69 = v189;
    v183 = v190;
    v184 = (std::string *)a3;
    if (v189 == v190)
      goto LABEL_304;
  }
  else
  {
    v69 = v189;
    v183 = v190;
    v184 = (std::string *)a3;
    if (v189 == v190)
      goto LABEL_304;
  }
  if (&__src <= (__int128 *)"a=group:BUNDLE" && (char *)&__src + 14 > "a=group:BUNDLE")
  {
    HIBYTE(v188) = 14;
    __break(1u);
LABEL_503:
    abort();
  }
  qmemcpy(v181, "p:BUNDLEa=group:", sizeof(v181));
  while (2)
  {
    v185 = v69;
    v70 = *v69;
    HIBYTE(v188) = 14;
    *(_QWORD *)&__src = v181[1];
    *(_QWORD *)((char *)&__src + 6) = v181[0];
    BYTE14(__src) = 0;
    v71 = *(char ***)(v70 + 24);
    a3 = *(_QWORD *)(v70 + 32);
    if (v71 == (char **)a3)
    {
      p_src = (char *)&__src;
      v73 = 14;
      goto LABEL_297;
    }
    do
    {
      v75 = HIBYTE(v188);
      if (v188 >= 0)
        v76 = 22;
      else
        v76 = (v188 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v188 < 0)
        v75 = *((_QWORD *)&__src + 1);
      if (v76 == v75)
      {
        if (v76 == 0x7FFFFFFFFFFFFFF6)
          goto LABEL_503;
        if (v188 >= 0)
          v77 = (char *)&__src;
        else
          v77 = (char *)__src;
        if (v76 >= 0x3FFFFFFFFFFFFFF3)
        {
          v80 = 0x7FFFFFFFFFFFFFF7;
          v81 = (char *)operator new(0x7FFFFFFFFFFFFFF7uLL);
          v82 = &v81[v76];
        }
        else
        {
          if (v76 + 1 > 2 * v76)
            v78 = v76 + 1;
          else
            v78 = 2 * v76;
          v79 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v78 | 7) != 0x17)
            v79 = v78 | 7;
          if (v78 >= 0x17)
            v80 = v79 + 1;
          else
            v80 = 23;
          v81 = (char *)operator new(v80);
          v82 = &v81[v76];
          if (!v76)
          {
            if (v82 <= " " && v82 + 1 > " ")
              goto LABEL_303;
            *v82 = 32;
            goto LABEL_251;
          }
        }
        if (v77 >= v81 && v82 > v77)
          goto LABEL_303;
        memmove(v81, v77, v76);
        if (v82 <= " " && v82 + 1 > " ")
          goto LABEL_303;
        *v82 = 32;
        if (v76 == 22)
        {
LABEL_252:
          *(_QWORD *)&__src = v81;
          *((_QWORD *)&__src + 1) = v76 + 1;
          v188 = v80 | 0x8000000000000000;
          v81[v76 + 1] = 0;
          v87 = *((char *)v71 + 23);
          if ((v87 & 0x80000000) == 0)
            goto LABEL_253;
          goto LABEL_242;
        }
LABEL_251:
        operator delete(v77);
        goto LABEL_252;
      }
      if (v188 >= 0)
        v84 = &__src;
      else
        v84 = (__int128 *)__src;
      if ((char *)v84 + v75 <= " " && (char *)v84 + v75 + 1 > " ")
        goto LABEL_303;
      *((_BYTE *)v84 + v75) = 32;
      v86 = v75 + 1;
      if (SHIBYTE(v188) < 0)
      {
        *((_QWORD *)&__src + 1) = v86;
        *((_BYTE *)v84 + v86) = 0;
        v87 = *((char *)v71 + 23);
        if ((v87 & 0x80000000) == 0)
        {
LABEL_253:
          v89 = v87;
          v90 = v87 == 0;
          v88 = (char *)v71;
          goto LABEL_254;
        }
      }
      else
      {
        HIBYTE(v188) = v86 & 0x7F;
        *((_BYTE *)v84 + v86) = 0;
        v87 = *((char *)v71 + 23);
        if ((v87 & 0x80000000) == 0)
          goto LABEL_253;
      }
LABEL_242:
      v88 = *v71;
      v89 = (size_t)v71[1];
      v90 = v89 == 0;
      if (!*v71 && v89)
        goto LABEL_303;
LABEL_254:
      if (v188 >= 0)
        v92 = 22;
      else
        v92 = (v188 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v188 >= 0)
        v93 = HIBYTE(v188);
      else
        v93 = *((_QWORD *)&__src + 1);
      if (v92 - v93 < v89)
      {
        v94 = v93 + v89;
        if (0x7FFFFFFFFFFFFFF6 - v92 < v93 + v89 - v92)
          goto LABEL_503;
        if (v188 >= 0)
          v95 = (char *)&__src;
        else
          v95 = (char *)__src;
        if (v92 >= 0x3FFFFFFFFFFFFFF3)
        {
          v3 = 0x7FFFFFFFFFFFFFF7;
          v97 = (char *)operator new(0x7FFFFFFFFFFFFFF7uLL);
          if (v93)
            goto LABEL_282;
        }
        else
        {
          v96 = 2 * v92;
          if (v94 > 2 * v92)
            v96 = v93 + v89;
          if (v96 < 0x17)
          {
            v3 = 23;
            v97 = (char *)operator new(0x17uLL);
            if (!v93)
              goto LABEL_270;
LABEL_282:
            if (v95 >= v97 && &v97[v93] > v95)
              goto LABEL_303;
            memmove(v97, v95, v93);
            v98 = &v97[v93];
            if (&v97[v93] <= v88)
            {
LABEL_285:
              if (&v98[v89] > v88)
                goto LABEL_303;
            }
LABEL_286:
            memcpy(v98, v88, v89);
            if (v92 != 22)
              operator delete(v95);
            *((_QWORD *)&__src + 1) = v93 + v89;
            v188 = v3 | 0x8000000000000000;
            *(_QWORD *)&__src = v97;
            v74 = &v97[v94];
            v3 = (unint64_t)" ";
LABEL_203:
            *v74 = 0;
            goto LABEL_204;
          }
          v102 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
          v103 = v96 | 7;
          if (v103 == 23)
            v103 = v102;
          v3 = v103 + 1;
          v97 = (char *)operator new(v103 + 1);
          if (v93)
            goto LABEL_282;
        }
LABEL_270:
        v98 = &v97[v93];
        if (&v97[v93] <= v88)
          goto LABEL_285;
        goto LABEL_286;
      }
      if (!v90)
      {
        if (v188 >= 0)
          v99 = &__src;
        else
          v99 = (__int128 *)__src;
        v100 = (char *)v99 + v93;
        if ((char *)v99 + v93 <= v88 && &v100[v89] > v88)
          goto LABEL_303;
        memmove(v100, v88, v89);
        v101 = v93 + v89;
        if (SHIBYTE(v188) < 0)
          *((_QWORD *)&__src + 1) = v93 + v89;
        else
          HIBYTE(v188) = v101 & 0x7F;
        v74 = (char *)v99 + v101;
        goto LABEL_203;
      }
LABEL_204:
      v71 += 3;
    }
    while (v71 != (char **)a3);
    if (SHIBYTE(v188) < 0)
    {
      v73 = *((_QWORD *)&__src + 1);
      if ((*((_QWORD *)&__src + 1) & 0x8000000000000000) != 0)
        goto LABEL_303;
      p_src = (char *)__src;
      a3 = (uint64_t)v184;
      v104 = v185;
      if (*((_QWORD *)&__src + 1))
      {
        if (!(_QWORD)__src)
          goto LABEL_303;
      }
    }
    else
    {
      v73 = HIBYTE(v188);
      p_src = (char *)&__src;
LABEL_297:
      a3 = (uint64_t)v184;
      v104 = v185;
    }
    webrtc::AddLine(p_src, v73, (std::string *)a3);
    if (SHIBYTE(v188) < 0)
      operator delete((void *)__src);
    v69 = v104 + 1;
    if (v69 != v183)
      continue;
    break;
  }
LABEL_304:
  while (2)
  {
    if (*(_BYTE *)(v186 + 76))
    {
      webrtc::InitLine(97, "extmap-allow-mixed", 0x12uLL, &v198);
      if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v105 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
        v106 = &v198;
        goto LABEL_312;
      }
      v105 = v198.__r_.__value_.__l.__size_;
      if ((v198.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
      {
        v106 = (std::string *)v198.__r_.__value_.__r.__words[0];
        if (!v198.__r_.__value_.__l.__size_ || v198.__r_.__value_.__r.__words[0])
        {
LABEL_312:
          webrtc::AddLine((char *)v106, v105, (std::string *)a3);
          break;
        }
      }
LABEL_303:
      __break(1u);
      continue;
    }
    break;
  }
  if (*(_DWORD *)(v186 + 72))
  {
    webrtc::InitLine(97, "msid-semantic", 0xDuLL, &v198);
    v107 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v108 = 22;
    else
      v108 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v107 = v198.__r_.__value_.__l.__size_;
    if (v108 == v107)
    {
      std::string::__grow_by_and_replace(&v198, v108, 1uLL, v108, v108, 0, 1uLL, ":");
    }
    else
    {
      if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v109 = &v198;
      else
        v109 = (std::string *)v198.__r_.__value_.__r.__words[0];
      v110 = (char *)v109 + v107;
      if ((char *)v109 + v107 <= ":" && v110 + 1 > ":")
        goto LABEL_303;
      *v110 = 58;
      v111 = v107 + 1;
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        v198.__r_.__value_.__l.__size_ = v111;
      else
        *((_BYTE *)&v198.__r_.__value_.__s + 23) = v111 & 0x7F;
      v109->__r_.__value_.__s.__data_[v111] = 0;
    }
    v112 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v113 = 22;
    else
      v113 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v112 = v198.__r_.__value_.__l.__size_;
    if (v113 == v112)
    {
      std::string::__grow_by_and_replace(&v198, v113, 1uLL, v113, v113, 0, 1uLL, " ");
    }
    else
    {
      v114 = &v198;
      if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v114 = (std::string *)v198.__r_.__value_.__r.__words[0];
      v115 = (char *)v114 + v112;
      if ((unint64_t)v114 + v112 <= v3 && (unint64_t)(v115 + 1) > v3)
        goto LABEL_303;
      *v115 = 32;
      v116 = v112 + 1;
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        v198.__r_.__value_.__l.__size_ = v116;
      else
        *((_BYTE *)&v198.__r_.__value_.__s + 23) = v116 & 0x7F;
      v114->__r_.__value_.__s.__data_[v116] = 0;
    }
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v117 = 22;
    else
      v117 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v118 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
    else
      v118 = v198.__r_.__value_.__l.__size_;
    if (v117 - v118 >= 3)
    {
      v119 = &v198;
      if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v119 = (std::string *)v198.__r_.__value_.__r.__words[0];
      v120 = (char *)v119 + v118;
      if ((char *)v119 + v118 <= "WMS" && v120 + 3 > "WMS")
        goto LABEL_303;
      v120[2] = 83;
      *(_WORD *)v120 = 19799;
      v121 = v118 + 3;
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        v198.__r_.__value_.__l.__size_ = v118 + 3;
      else
        *((_BYTE *)&v198.__r_.__value_.__s + 23) = v121 & 0x7F;
      v119->__r_.__value_.__s.__data_[v121] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v198, v117, v118 - v117 + 3, v118, v118, 0, 3uLL, "WMS");
    }
    *((_QWORD *)&__src + 1) = 0;
    v188 = 0;
    *(_QWORD *)&__src = (char *)&__src + 8;
    v122 = *(_QWORD *)v186;
    v123 = *(_QWORD *)(v186 + 8);
    while (v122 != v123)
    {
      if (v122)
      {
        v124 = *(_QWORD *)(v122 + 32);
        if (v124)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v124 + 16))(v124))
          {
            webrtc::GetMediaStreamIds(*(_QWORD *)(*(_QWORD *)(v122 + 32) + 96), *(_QWORD *)(*(_QWORD *)(v122 + 32) + 104), (uint64_t **)&__src);
            break;
          }
        }
      }
      v122 += 40;
    }
    v125 = *(_QWORD *)v186;
    v126 = *(_QWORD *)(v186 + 8);
    while (v125 != v126)
    {
      if (v125)
      {
        v127 = *(_QWORD *)(v125 + 32);
        if (v127)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v127 + 16))(v127) == 1)
          {
            webrtc::GetMediaStreamIds(*(_QWORD *)(*(_QWORD *)(v125 + 32) + 96), *(_QWORD *)(*(_QWORD *)(v125 + 32) + 104), (uint64_t **)&__src);
            break;
          }
        }
      }
      v125 += 40;
    }
    v128 = (_OWORD *)__src;
    if ((__int128 *)__src != (__int128 *)((char *)&__src + 8))
    {
      a3 = 22;
      do
      {
        v129 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
        if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v130 = 22;
        else
          v130 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v129 = v198.__r_.__value_.__l.__size_;
        if (v130 == v129)
        {
          std::string::__grow_by_and_replace(&v198, v130, 1uLL, v130, v130, 0, 1uLL, (const std::string::value_type *)v3);
          v131 = (const std::string::value_type *)(v128 + 2);
          v132 = *((char *)v128 + 55);
          if ((v132 & 0x80000000) == 0)
            goto LABEL_385;
        }
        else
        {
          if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v135 = &v198;
          else
            v135 = (std::string *)v198.__r_.__value_.__r.__words[0];
          if ((unint64_t)v135 + v129 <= v3 && (unint64_t)v135->__r_.__value_.__r.__words + v129 + 1 > v3)
            goto LABEL_303;
          v135->__r_.__value_.__s.__data_[v129] = 32;
          v137 = v129 + 1;
          if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
          {
            v198.__r_.__value_.__l.__size_ = v137;
            v135->__r_.__value_.__s.__data_[v137] = 0;
            v131 = (const std::string::value_type *)(v128 + 2);
            v132 = *((char *)v128 + 55);
            if ((v132 & 0x80000000) == 0)
            {
LABEL_385:
              v133 = v132;
              v134 = v132 == 0;
              goto LABEL_398;
            }
          }
          else
          {
            *((_BYTE *)&v198.__r_.__value_.__s + 23) = v137 & 0x7F;
            v135->__r_.__value_.__s.__data_[v137] = 0;
            v131 = (const std::string::value_type *)(v128 + 2);
            v132 = *((char *)v128 + 55);
            if ((v132 & 0x80000000) == 0)
              goto LABEL_385;
          }
        }
        v133 = *((_QWORD *)v128 + 5);
        if ((v133 & 0x8000000000000000) != 0)
          goto LABEL_303;
        v131 = *(const std::string::value_type **)v131;
        v134 = v133 == 0;
        if (v133)
        {
          if (!v131)
            goto LABEL_303;
        }
LABEL_398:
        if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v138 = 22;
        else
          v138 = (v198.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v139 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
        else
          v139 = v198.__r_.__value_.__l.__size_;
        if (v138 - v139 < v133)
        {
          std::string::__grow_by_and_replace(&v198, v138, v139 + v133 - v138, v139, v139, 0, v133, v131);
          v140 = (_QWORD *)*((_QWORD *)v128 + 1);
          if (v140)
            goto LABEL_416;
          goto LABEL_421;
        }
        if (v134)
          goto LABEL_415;
        if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v141 = &v198;
        else
          v141 = (std::string *)v198.__r_.__value_.__r.__words[0];
        v142 = (char *)v141 + v139;
        if ((char *)v141 + v139 <= v131 && &v142[v133] > v131)
          goto LABEL_303;
        memmove(v142, v131, v133);
        v143 = v139 + v133;
        if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          *((_BYTE *)&v198.__r_.__value_.__s + 23) = v143 & 0x7F;
          v141->__r_.__value_.__s.__data_[v143] = 0;
LABEL_415:
          v140 = (_QWORD *)*((_QWORD *)v128 + 1);
          if (v140)
            goto LABEL_416;
          goto LABEL_421;
        }
        v198.__r_.__value_.__l.__size_ = v139 + v133;
        v141->__r_.__value_.__s.__data_[v143] = 0;
        v140 = (_QWORD *)*((_QWORD *)v128 + 1);
        if (v140)
        {
          do
          {
LABEL_416:
            v144 = v140;
            v140 = (_QWORD *)*v140;
          }
          while (v140);
          goto LABEL_377;
        }
        do
        {
LABEL_421:
          v144 = (_OWORD *)*((_QWORD *)v128 + 2);
          v145 = *(_QWORD *)v144 == (_QWORD)v128;
          v128 = v144;
        }
        while (!v145);
LABEL_377:
        v128 = v144;
      }
      while (v144 != (__int128 *)((char *)&__src + 8));
    }
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    {
      v146 = v198.__r_.__value_.__l.__size_;
      a3 = (uint64_t)v184;
      if ((v198.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_303;
      v147 = (std::string *)v198.__r_.__value_.__r.__words[0];
      if (v198.__r_.__value_.__l.__size_)
      {
        if (!v198.__r_.__value_.__r.__words[0])
          goto LABEL_303;
      }
    }
    else
    {
      v146 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
      v147 = &v198;
      a3 = (uint64_t)v184;
    }
    webrtc::AddLine((char *)v147, v146, (std::string *)a3);
    std::__tree<rtc::SocketAddress>::destroy((uint64_t)&__src, *((char **)&__src + 1));
  }
  v148 = *(_QWORD *)(v186 + 24);
  v149 = *(_QWORD *)(v186 + 32);
  if (v148 == v149)
  {
LABEL_433:
    v150 = *(_QWORD *)v186;
    v181[1] = *(_QWORD *)(v186 + 8);
    v151 = v182;
    if (*(_QWORD *)v186 != v181[1])
      goto LABEL_441;
  }
  else
  {
    while (*(_DWORD *)(v148 + 96) != 1)
    {
      v148 += 112;
      if (v148 == v149)
        goto LABEL_433;
    }
    webrtc::InitLine(97, "ice-lite", 8uLL, &v198);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    {
      v152 = v198.__r_.__value_.__l.__size_;
      if ((v198.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
      {
        v153 = (std::string *)v198.__r_.__value_.__r.__words[0];
        if (!v198.__r_.__value_.__l.__size_ || v198.__r_.__value_.__r.__words[0])
          goto LABEL_440;
      }
      goto LABEL_303;
    }
    v152 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
    v153 = &v198;
LABEL_440:
    webrtc::AddLine((char *)v153, v152, (std::string *)a3);
    v150 = *(_QWORD *)v186;
    v181[1] = *(_QWORD *)(v186 + 8);
    v151 = v182;
    if (*(_QWORD *)v186 != v181[1])
    {
LABEL_441:
      v154 = -1;
      a3 = 0x97B425ED097B42;
      do
      {
        __src = 0uLL;
        v188 = 0;
        v155 = v154 + 1;
        v156 = (*(uint64_t (**)(webrtc *, uint64_t))(*(_QWORD *)v151 + 96))(v151, v155);
        v157 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v156 + 16))(v156);
        v185 = (_QWORD *)v155;
        if (!v157)
        {
          v158 = 0;
          v171 = 0;
          v172 = *(_QWORD *)(v186 + 24);
          v173 = *(_QWORD *)(v186 + 32);
          if (v172 != v173)
            goto LABEL_468;
LABEL_487:
          v172 = 0;
          goto LABEL_488;
        }
        v183 = (_QWORD *)v150;
        v158 = 0;
        v159 = 0;
        do
        {
          v160 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v156 + 32))(v156, v159);
          v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v160 + 32))(v160);
          if ((unint64_t)v158 >= v188)
          {
            v161 = (std::string *)__src;
            v162 = 0x84BDA12F684BDA13 * ((uint64_t)((uint64_t)v158 - __src) >> 4);
            v163 = v162 + 1;
            if (v162 + 1 > 0x97B425ED097B42)
              goto LABEL_503;
            if (0x97B425ED097B426 * ((v188 - (uint64_t)__src) >> 4) > v163)
              v163 = 0x97B425ED097B426 * ((v188 - (uint64_t)__src) >> 4);
            if (0x84BDA12F684BDA13 * ((v188 - (uint64_t)__src) >> 4) >= 0x4BDA12F684BDA1)
              v164 = 0x97B425ED097B42;
            else
              v164 = v163;
            if (!v164)
              goto LABEL_303;
            if (v164 > 0x97B425ED097B42)
              std::__throw_bad_array_new_length[abi:sn180100]();
            v165 = 18 * v164;
            v166 = (std::string *)operator new(432 * v164);
            v167 = &v166[v165];
            v168 = cricket::Candidate::Candidate(v166 + 18 * v162, (std::string *)v3);
            v169 = v168 + 18;
            if (v158 == v161)
            {
              *(_QWORD *)&__src = v168;
              *((_QWORD *)&__src + 1) = v168 + 18;
              v188 = (int64_t)v167;
              if (v158)
                goto LABEL_466;
            }
            else
            {
              do
              {
                v158 -= 18;
                v168 = cricket::Candidate::Candidate(v168 - 18, v158);
              }
              while (v158 != v161);
              v170 = (void **)*((_QWORD *)&__src + 1);
              v158 = (std::string *)__src;
              *(_QWORD *)&__src = v168;
              *((_QWORD *)&__src + 1) = v169;
              v188 = (int64_t)v167;
              while (v170 != (void **)v158)
              {
                v170 -= 54;
                cricket::Candidate::~Candidate(v170);
              }
              if (!v158)
                goto LABEL_446;
LABEL_466:
              operator delete(v158);
            }
LABEL_446:
            v158 = v169;
            goto LABEL_447;
          }
          if (!v158)
            goto LABEL_303;
          cricket::Candidate::Candidate(v158, (std::string *)v3);
          v158 += 18;
LABEL_447:
          *((_QWORD *)&__src + 1) = v158;
          ++v159;
        }
        while (v159 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v156 + 16))(v156));
        v171 = (std::string *)__src;
        v150 = (unint64_t)v183;
        v172 = *(_QWORD *)(v186 + 24);
        v173 = *(_QWORD *)(v186 + 32);
        if (v172 == v173)
          goto LABEL_487;
LABEL_468:
        v174 = *(_BYTE *)(v150 + 23);
        if (v174 >= 0)
          v175 = *(unsigned __int8 *)(v150 + 23);
        else
          v175 = *(_QWORD *)(v150 + 8);
        if (v174 >= 0)
          v176 = (unsigned __int8 *)v150;
        else
          v176 = *(unsigned __int8 **)v150;
        do
        {
          v177 = *(unsigned __int8 *)(v172 + 23);
          if ((v177 & 0x80u) == 0)
            v178 = *(unsigned __int8 *)(v172 + 23);
          else
            v178 = *(_QWORD *)(v172 + 8);
          if (v178 == v175)
          {
            if ((v177 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v172, v176, *(_QWORD *)(v172 + 8)))
                goto LABEL_488;
            }
            else
            {
              if (!*(_BYTE *)(v172 + 23))
                goto LABEL_488;
              v179 = 0;
              while (*(unsigned __int8 *)(v172 + v179) == v176[v179])
              {
                if (v177 == ++v179)
                  goto LABEL_488;
              }
            }
          }
          v172 += 112;
        }
        while (v172 != v173);
        v172 = 0;
LABEL_488:
        v180 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v150 + 32) + 16))(*(_QWORD *)(v150 + 32));
        webrtc::BuildMediaDescription(v150, v172, v180, (uint64_t *)&__src, *(_DWORD *)(v186 + 72), (std::string::size_type)v184);
        if (v171)
        {
          if (v158 != v171)
          {
            do
            {
              v158 -= 18;
              cricket::Candidate::~Candidate((void **)&v158->__r_.__value_.__l.__data_);
            }
            while (v158 != v171);
            v158 = (std::string *)__src;
          }
          *((_QWORD *)&__src + 1) = v171;
          operator delete(v158);
        }
        v150 += 40;
        v151 = v182;
        v154 = (uint64_t)v185;
      }
      while (v150 != v181[1]);
    }
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  if (v194 < 0)
  {
    operator delete(__p);
    if (v197 < 0)
      goto LABEL_500;
LABEL_497:
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
LABEL_501:
      operator delete(v198.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((v197 & 0x80000000) == 0)
      goto LABEL_497;
LABEL_500:
    operator delete(__p_new_stuff);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_501;
  }
}

void webrtc::AddLine(char *__src, size_t __len, std::string *this)
{
  uint64_t v6;
  std::string::size_type v7;
  std::string::size_type size;
  int v9;
  std::string *v10;
  char *v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  char *v16;
  std::string::size_type v17;

  if (!this)
    return;
  if (!__src && __len)
    goto LABEL_32;
  v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = 22;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (22 - v6 < __len)
      goto LABEL_6;
    goto LABEL_9;
  }
  size = this->__r_.__value_.__l.__size_;
  v7 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v7 - size >= __len)
  {
LABEL_9:
    if (!__len)
      goto LABEL_17;
    v10 = this;
    if ((v6 & 0x80) != 0)
    {
      v10 = (std::string *)this->__r_.__value_.__r.__words[0];
      v11 = (char *)(this->__r_.__value_.__r.__words[0] + size);
      if (v11 > __src)
      {
LABEL_15:
        memmove(v11, __src, __len);
        v12 = size + __len;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          this->__r_.__value_.__l.__size_ = v12;
          v10->__r_.__value_.__s.__data_[v12] = 0;
          v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
          if (v9 < 0)
            goto LABEL_23;
LABEL_18:
          v13 = v9;
          if ((unint64_t)v9 - 21 < 2)
          {
            v14 = 22;
LABEL_24:
            std::string::__grow_by_and_replace(this, v14, v13 - v14 + 2, v13, v13, 0, 2uLL, "\r\n");
            return;
          }
          v15 = this;
          v16 = (char *)this + v13;
          if ((char *)this + v13 > "\r\n")
            goto LABEL_27;
          goto LABEL_26;
        }
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v12 & 0x7F;
        v10->__r_.__value_.__s.__data_[v12] = 0;
LABEL_17:
        v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
        if (v9 < 0)
          goto LABEL_23;
        goto LABEL_18;
      }
    }
    else
    {
      v11 = (char *)this + size;
      if ((char *)this + size > __src)
        goto LABEL_15;
    }
    if (&v11[__len] <= __src)
      goto LABEL_15;
LABEL_32:
    __break(1u);
    return;
  }
LABEL_6:
  std::string::__grow_by_and_replace(this, v7, __len - v7 + size, size, size, 0, __len, __src);
  v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v9 & 0x80000000) == 0)
    goto LABEL_18;
LABEL_23:
  v13 = this->__r_.__value_.__l.__size_;
  v14 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v14 - v13 < 2)
    goto LABEL_24;
  v15 = (std::string *)this->__r_.__value_.__r.__words[0];
  v16 = (char *)(this->__r_.__value_.__r.__words[0] + v13);
  if (v16 > "\r\n")
    goto LABEL_27;
LABEL_26:
  if (v16 + 2 > "\r\n")
    goto LABEL_32;
LABEL_27:
  *(_WORD *)v16 = 2573;
  v17 = v13 + 2;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = v17;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  v15->__r_.__value_.__s.__data_[v17] = 0;
}

void webrtc::InitLine(std::string::value_type a1, char *a2, size_t a3, std::string *this)
{
  uint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  std::string::size_type v11;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  _BYTE *v15;
  std::string::size_type v16;
  uint64_t v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  char *v21;
  std::string::size_type v22;
  std::string::value_type __p_new_stuff[8];
  char v24;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
    LODWORD(v7) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    v24 = 1;
    __p_new_stuff[0] = a1;
    __p_new_stuff[1] = 0;
    if ((v7 & 0x80000000) != 0)
    {
      if ((this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) != 1)
      {
        v7 = 0;
        v8 = (std::string *)this->__r_.__value_.__r.__words[0];
        goto LABEL_3;
      }
      v11 = 0;
    }
    else
    {
      v7 = v7;
      v8 = this;
      if (v7 != 22)
        goto LABEL_3;
      v11 = 22;
    }
    std::string::__grow_by_and_replace(this, v11, 1uLL, v11, v11, 0, 1uLL, __p_new_stuff);
    v10 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_17:
    size = this->__r_.__value_.__l.__size_;
    v14 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v14 == size)
    {
LABEL_18:
      std::string::__grow_by_and_replace(this, v14, 1uLL, v14, v14, 0, 1uLL, "=");
      if (a2)
        goto LABEL_28;
      goto LABEL_27;
    }
    v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  v7 = 0;
  this->__r_.__value_.__s.__data_[0] = 0;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  v24 = 1;
  __p_new_stuff[0] = a1;
  v8 = this;
  __p_new_stuff[1] = 0;
LABEL_3:
  if ((char *)v8 + v7 <= __p_new_stuff && (char *)&v8->__r_.__value_.__l.__data_ + v7 + 1 > __p_new_stuff)
    goto LABEL_46;
  v8->__r_.__value_.__s.__data_[v7] = a1;
  v9 = v7 + 1;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    this->__r_.__value_.__l.__size_ = v9;
    v8->__r_.__value_.__s.__data_[v9] = 0;
    v10 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_17;
  }
  *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  v8->__r_.__value_.__s.__data_[v9] = 0;
  v10 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v10 < 0)
    goto LABEL_17;
LABEL_12:
  size = v10;
  v13 = this;
  if ((_DWORD)size == 22)
  {
    v14 = 22;
    goto LABEL_18;
  }
LABEL_21:
  v15 = (char *)v13 + size;
  if ((char *)v13 + size <= "=" && v15 + 1 > "=")
    goto LABEL_46;
  *v15 = 61;
  v16 = size + 1;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    this->__r_.__value_.__l.__size_ = v16;
    v13->__r_.__value_.__s.__data_[v16] = 0;
    if (a2)
      goto LABEL_28;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
    v13->__r_.__value_.__s.__data_[v16] = 0;
    if (a2)
      goto LABEL_28;
  }
LABEL_27:
  if (a3)
    goto LABEL_46;
LABEL_28:
  v17 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v18 = 22;
    v19 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (22 - v17 < a3)
      goto LABEL_30;
    goto LABEL_33;
  }
  v19 = this->__r_.__value_.__l.__size_;
  v18 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v18 - v19 >= a3)
  {
LABEL_33:
    if (!a3)
      goto LABEL_41;
    v20 = this;
    if ((v17 & 0x80) != 0)
    {
      v20 = (std::string *)this->__r_.__value_.__r.__words[0];
      v21 = (char *)(this->__r_.__value_.__r.__words[0] + v19);
      if (v21 > a2)
      {
LABEL_39:
        memmove(v21, a2, a3);
        v22 = v19 + a3;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          this->__r_.__value_.__l.__size_ = v22;
          v20->__r_.__value_.__s.__data_[v22] = 0;
          if ((v24 & 0x80000000) == 0)
            return;
LABEL_44:
          operator delete(*(void **)__p_new_stuff);
          return;
        }
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v22 & 0x7F;
        v20->__r_.__value_.__s.__data_[v22] = 0;
LABEL_41:
        if ((v24 & 0x80000000) == 0)
          return;
        goto LABEL_44;
      }
    }
    else
    {
      v21 = (char *)this + v19;
      if ((char *)this + v19 > a2)
        goto LABEL_39;
    }
    if (&v21[a3] <= a2)
      goto LABEL_39;
LABEL_46:
    __break(1u);
    return;
  }
LABEL_30:
  std::string::__grow_by_and_replace(this, v18, a3 - v18 + v19, v19, v19, 0, a3, a2);
  if (v24 < 0)
    goto LABEL_44;
}

void webrtc::BuildMediaDescription(unint64_t a1, std::string::size_type a2, unsigned int a3, uint64_t *a4, int a5, std::string::size_type a6)
{
  std::string::size_type v6;
  uint64_t v7;
  unint64_t i;
  std::string::size_type v9;
  const std::string::value_type *v10;
  uint64_t v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string::size_type v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  std::string *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  char *v27;
  std::string::size_type v28;
  uint64_t v29;
  int v30;
  std::string::size_type v31;
  std::string *p_src;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t size;
  std::string *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  char *v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string *v43;
  size_t v44;
  std::string *p_dst;
  std::string::size_type v46;
  std::string::size_type v47;
  size_t v48;
  std::string *v49;
  _BYTE *v50;
  std::string::size_type v51;
  std::string::size_type v52;
  std::string::size_type v53;
  char *v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string::size_type v57;
  __int128 v58;
  size_t v59;
  std::string *p_str;
  _BYTE *v61;
  std::string::size_type v62;
  std::string::size_type v63;
  std::string::size_type v64;
  std::string::size_type v65;
  std::string *v66;
  char *v67;
  std::string::size_type v68;
  std::string::size_type v69;
  std::string::size_type v70;
  int v71;
  char *v72;
  std::string::size_type v73;
  std::string::size_type v74;
  std::string::size_type v75;
  _BYTE *v76;
  std::string::size_type v77;
  std::string::size_type v78;
  std::string::size_type v79;
  std::string::size_type v80;
  _BYTE *v81;
  std::string::size_type v82;
  std::string::size_type v83;
  char *v84;
  std::string::size_type v85;
  std::string::size_type v86;
  std::string::size_type v87;
  std::string::size_type v88;
  std::string::size_type v89;
  _BYTE *v90;
  std::string::size_type v91;
  std::string::size_type v92;
  std::string::size_type v93;
  size_t v94;
  std::string *v95;
  _DWORD *v96;
  std::string::size_type v97;
  int v98;
  size_t v99;
  std::string::size_type v100;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  std::string::size_type v104;
  std::string::size_type v105;
  _BYTE *v106;
  std::string::size_type v107;
  _BYTE *v108;
  std::string::size_type v109;
  _BYTE *v110;
  std::string::size_type v111;
  std::string::size_type v112;
  std::string::size_type v113;
  size_t v114;
  std::string *v115;
  _BYTE *v116;
  std::string::size_type v117;
  int v118;
  std::string::size_type v119;
  std::string *p_p;
  uint64_t v121;
  uint64_t v122;
  std::string::size_type v123;
  size_t v124;
  std::string *v125;
  __int128 v126;
  std::string::size_type v127;
  std::string *v128;
  int IsRtpProtocol;
  uint64_t *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unsigned __int16 *v134;
  uint64_t v135;
  int v136;
  int v137;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  std::string *v143;
  uint64_t v144;
  std::string::size_type v145;
  std::string::size_type v146;
  std::string::size_type v147;
  std::string *v148;
  std::string::size_type v149;
  _BYTE *v150;
  std::string::size_type v151;
  std::string::size_type v152;
  std::string::size_type v153;
  char *v154;
  std::string::size_type v155;
  std::string::size_type v156;
  std::string::size_type v157;
  _BYTE *v158;
  std::string::size_type v159;
  std::string::size_type v160;
  std::string::size_type v161;
  _WORD *v162;
  std::string::size_type v163;
  std::string::size_type v164;
  std::string::size_type v165;
  std::string::size_type v166;
  std::string *v167;
  _BYTE *v168;
  std::string::size_type v169;
  std::string::size_type v170;
  std::string::size_type v171;
  char *v172;
  std::string::size_type v173;
  std::string::size_type v174;
  std::string::size_type v175;
  std::string::size_type v176;
  std::string *v177;
  _BYTE *v178;
  std::string::size_type v179;
  std::string::size_type v180;
  std::string::size_type v181;
  size_t v182;
  std::string *v183;
  char *v184;
  std::string::size_type v185;
  std::string::size_type v186;
  std::string::size_type v187;
  std::string::size_type v188;
  const std::string::value_type *v189;
  std::string::size_type v190;
  std::string::size_type v191;
  int v192;
  std::string::size_type v193;
  std::string::size_type v194;
  std::string::size_type v195;
  const std::string::value_type *v196;
  std::string::size_type v197;
  _BYTE *v198;
  std::string::size_type v199;
  std::string::size_type v200;
  std::string::size_type v201;
  size_t v202;
  std::string *v203;
  char *v204;
  std::string::size_type v205;
  _BYTE *v206;
  std::string::size_type v207;
  std::string::size_type v208;
  std::string::size_type v209;
  size_t v210;
  std::string *v211;
  char *v212;
  std::string::size_type v213;
  std::string::size_type v214;
  std::string::size_type v215;
  std::string::size_type v216;
  _BYTE *v217;
  std::string::size_type v218;
  std::string::size_type v219;
  std::string::size_type v220;
  std::string::size_type v221;
  char *v222;
  std::string::size_type v223;
  std::string::size_type v224;
  std::string::size_type v225;
  std::string::size_type v227;
  const std::string::value_type *v228;
  std::string::size_type v229;
  std::string::size_type v231;
  std::string::size_type v232;
  char *v233;
  std::string::size_type v234;
  size_t v235;
  std::string *v236;
  uint64_t v237;
  std::string::size_type v238;
  std::string::size_type v239;
  std::string::size_type v240;
  const std::string::value_type *v241;
  _BYTE *v242;
  std::string::size_type v243;
  std::string::size_type v244;
  std::string::size_type v245;
  char *v246;
  std::string::size_type v247;
  std::string::size_type v248;
  std::string::size_type v249;
  unint64_t v250;
  unsigned __int8 *v251;
  _BYTE *v252;
  std::string::size_type v253;
  std::string::size_type v254;
  std::string::size_type v255;
  std::string *v256;
  std::string::size_type v257;
  std::string::size_type v258;
  int v259;
  char *v260;
  std::string::size_type v261;
  std::string::size_type v262;
  std::string::size_type v263;
  std::string::size_type v264;
  std::string *v265;
  _BYTE *v266;
  std::string::size_type v267;
  std::string::size_type v268;
  std::string::size_type v269;
  char *v270;
  std::string::size_type v271;
  std::string::size_type v272;
  std::string::size_type v273;
  char *v274;
  std::string::size_type v275;
  std::string::size_type v276;
  std::string::size_type v277;
  char *v278;
  std::string::size_type v279;
  std::string::size_type v280;
  std::string::size_type v281;
  std::string::size_type v282;
  std::string *v283;
  _BYTE *v284;
  std::string::size_type v285;
  std::string::size_type v286;
  std::string::size_type v287;
  char *v288;
  std::string::size_type v289;
  std::string::size_type v290;
  size_t v291;
  std::string *v292;
  _BYTE *v293;
  std::string::size_type v294;
  std::string::size_type v295;
  std::string::size_type v296;
  char *v297;
  std::string::size_type v298;
  size_t v299;
  std::string *v300;
  std::string::size_type v301;
  std::string::size_type v302;
  size_t v303;
  _BYTE *v304;
  std::string::size_type v305;
  std::string::size_type v306;
  std::string::size_type v307;
  __int128 v308;
  std::string *v309;
  std::string::size_type v310;
  char *v311;
  std::string::size_type v312;
  std::string::size_type v313;
  uint64_t v314;
  uint64_t v316;
  std::string::size_type v317;
  std::string::size_type v318;
  std::string::size_type v320;
  uint64_t v321;
  __int128 v323;
  std::string::size_type v324;
  std::string *v325;
  std::string::size_type v326;
  std::string::size_type v327;
  size_t v328;
  std::string *v329;
  int v330;
  int v331;
  _BYTE *v332;
  std::string::size_type v333;
  _BYTE *v334;
  std::string::size_type v335;
  std::string::size_type v336;
  std::string::size_type v337;
  size_t v338;
  std::string *v339;
  std::string *v340;
  std::string *v341;
  std::string::size_type v342;
  int v343;
  std::string::size_type v344;
  _BYTE *v345;
  std::string::size_type v346;
  int v347;
  std::string::size_type v348;
  std::string::size_type v349;
  char *v350;
  std::string::size_type v351;
  std::string::size_type v352;
  int v353;
  std::string::size_type v354;
  size_t v355;
  std::string *v356;
  _BYTE *v357;
  std::string::size_type v358;
  _BYTE *v359;
  std::string::size_type v360;
  unsigned int v361;
  int v362;
  uint64_t *v363;
  std::string::size_type v364;
  std::string::size_type v365;
  unint64_t v366;
  std::string::size_type v367;
  std::string::size_type v368;
  std::string v369;
  std::string __p;
  std::string __src;
  std::string v372;
  std::string __dst;
  std::string v374;
  std::string __str;
  uint64_t v376;

  v376 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return;
  memset(&v369, 0, sizeof(v369));
  v9 = *(_QWORD *)(a1 + 32);
  memset(&v374, 0, sizeof(v374));
  memset(&__dst, 0, sizeof(__dst));
  memset(&v372, 0, sizeof(v372));
  v365 = a6;
  v366 = a1;
  v367 = v9;
  v368 = a2;
  v361 = a3;
  v362 = a5;
  v363 = a4;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v33 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v9 + 80))(v9);
      if (&__dst != (std::string *)(v33 + 304))
      {
        if (*(char *)(v33 + 327) < 0)
          std::string::__assign_no_alias<true>(&__dst, *(char **)(v33 + 304), *(_QWORD *)(v33 + 312));
        else
          __dst = *(std::string *)(v33 + 304);
      }
      goto LABEL_108;
    }
    if (a3 != 2)
      goto LABEL_108;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&__dst, "application");
    v29 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v367 + 64))(v367);
    if (!v29)
      goto LABEL_108;
    v14 = (std::string::size_type)v372.__r_.__value_.__r.__words + 1;
    if (&v372 <= (std::string *)" " && (char *)&v372.__r_.__value_.__l.__data_ + 1 > " ")
      goto LABEL_1320;
    LOWORD(v372.__r_.__value_.__l.__data_) = 32;
    *((_BYTE *)&v372.__r_.__value_.__s + 23) = 1;
    if (!*(_BYTE *)(v29 + 304))
    {
      if ((char *)&v372.__r_.__value_.__l.__data_ + 1 <= "webrtc-datachannel"
        && (char *)&v372.__r_.__value_.__r.__words[2] + 3 > "webrtc-datachannel")
      {
        goto LABEL_1320;
      }
      strcpy(&v372.__r_.__value_.__s.__data_[1], "webrtc-datachannel");
      *((_BYTE *)&v372.__r_.__value_.__s + 23) = 19;
      goto LABEL_108;
    }
    v30 = snprintf((char *)&__str, 0x20uLL, "%d", *(_DWORD *)(v29 + 308));
    if (v30 < 0)
      goto LABEL_1335;
    v31 = v30;
    if (v30 > 0x16)
    {
      v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v34 = v30 | 7;
      v35 = v34 + 1;
      p_src = (std::string *)operator new(v34 + 1);
      __src.__r_.__value_.__l.__size_ = v31;
      __src.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)p_src;
      v9 = (std::string::size_type)p_src + v31;
      v14 = (std::string *)((char *)p_src + v31) > &__str;
      if (p_src > &__str)
        goto LABEL_82;
    }
    else
    {
      *((_BYTE *)&__src.__r_.__value_.__s + 23) = v30;
      p_src = &__src;
      v9 = (std::string::size_type)&__src + v31;
      v14 = (std::string *)((char *)&__src + v31) > &__str;
      if (&__src > &__str)
      {
LABEL_82:
        if ((_DWORD)v31)
          memcpy(p_src, &__str, v31);
        *(_BYTE *)v9 = 0;
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          size = __src.__r_.__value_.__l.__size_;
          v37 = (std::string *)__src.__r_.__value_.__r.__words[0];
          v14 = __src.__r_.__value_.__l.__size_ == 0;
          if (!__src.__r_.__value_.__r.__words[0] && __src.__r_.__value_.__l.__size_)
            goto LABEL_1320;
        }
        else
        {
          size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
          LOBYTE(v14) = HIBYTE(__src.__r_.__value_.__r.__words[2]) == 0;
          v37 = &__src;
        }
        if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = 22;
        else
          v38 = (v372.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = HIBYTE(v372.__r_.__value_.__r.__words[2]);
        else
          v39 = v372.__r_.__value_.__l.__size_;
        if (v38 - v39 >= size)
        {
          if ((v14 & 1) == 0)
          {
            if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v9 = (std::string::size_type)&v372;
            else
              v9 = v372.__r_.__value_.__r.__words[0];
            v40 = (char *)(v9 + v39);
            if (v9 + v39 <= (unint64_t)v37)
            {
              v14 = (std::string::size_type)&v40[size];
              if (&v40[size] > (char *)v37)
                goto LABEL_1320;
            }
            memmove(v40, v37, size);
            v41 = v39 + size;
            if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
              v372.__r_.__value_.__l.__size_ = v39 + size;
            else
              *((_BYTE *)&v372.__r_.__value_.__s + 23) = v41 & 0x7F;
            *(_BYTE *)(v9 + v41) = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&v372, v38, v39 + size - v38, v39, v39, 0, size, (const std::string::value_type *)v37);
        }
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__src.__r_.__value_.__l.__data_);
        goto LABEL_108;
      }
    }
    if ((_DWORD)v14)
      goto LABEL_1320;
    goto LABEL_82;
  }
  if (a3)
    v10 = "video";
  else
    v10 = "audio";
  std::string::__assign_external(&__dst, v10);
  v6 = *(_QWORD *)(v9 + 280);
  v11 = *(_QWORD *)(v9 + 288);
  if (v6 != v11)
  {
    v9 = 22;
    i = (unint64_t)&v372;
    v7 = 32;
    do
    {
      v12 = HIBYTE(v372.__r_.__value_.__r.__words[2]);
      if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = 22;
      else
        v13 = (v372.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = v372.__r_.__value_.__l.__size_;
      if (v13 == v12)
      {
        std::string::__grow_by_and_replace(&v372, v13, 1uLL, v13, v13, 0, 1uLL, " ");
      }
      else
      {
        if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = (std::string::size_type)&v372;
        else
          v14 = v372.__r_.__value_.__r.__words[0];
        if (v14 + v12 <= (unint64_t)" " && v14 + v12 + 1 > (unint64_t)" ")
          goto LABEL_1320;
        *(_BYTE *)(v14 + v12) = 32;
        v16 = v12 + 1;
        if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
          v372.__r_.__value_.__l.__size_ = v16;
        else
          *((_BYTE *)&v372.__r_.__value_.__s + 23) = v16 & 0x7F;
        *(_BYTE *)(v14 + v16) = 0;
      }
      v17 = snprintf((char *)&__str, 0x20uLL, "%d", *(_DWORD *)(v6 + 12));
      if (v17 < 0)
        goto LABEL_1335;
      v18 = v17;
      if (v17 > 0x16)
      {
        v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v21 = v17 | 7;
        v22 = v21 + 1;
        v19 = (std::string *)operator new(v21 + 1);
        __src.__r_.__value_.__l.__size_ = v18;
        __src.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        v20 = (char *)v19 + v18;
        v14 = (std::string *)((char *)v19 + v18) > &__str;
        if (v19 <= &__str)
        {
LABEL_34:
          if ((_DWORD)v14)
            goto LABEL_1320;
        }
      }
      else
      {
        *((_BYTE *)&__src.__r_.__value_.__s + 23) = v17;
        v19 = &__src;
        v20 = (char *)&__src + v18;
        v14 = (std::string *)((char *)&__src + v18) > &__str;
        if (&__src <= &__str)
          goto LABEL_34;
      }
      if ((_DWORD)v18)
        memcpy(v19, &__str, v18);
      *v20 = 0;
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      {
        v23 = __src.__r_.__value_.__l.__size_;
        v24 = (std::string *)__src.__r_.__value_.__r.__words[0];
        v14 = __src.__r_.__value_.__l.__size_ == 0;
        if (!__src.__r_.__value_.__r.__words[0] && __src.__r_.__value_.__l.__size_)
          goto LABEL_1320;
      }
      else
      {
        v23 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        LOBYTE(v14) = HIBYTE(__src.__r_.__value_.__r.__words[2]) == 0;
        v24 = &__src;
      }
      if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = 22;
      else
        v25 = (v372.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = HIBYTE(v372.__r_.__value_.__r.__words[2]);
      else
        v26 = v372.__r_.__value_.__l.__size_;
      if (v25 - v26 >= v23)
      {
        if ((v14 & 1) == 0)
        {
          if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v7 = (uint64_t)&v372;
          else
            v7 = v372.__r_.__value_.__r.__words[0];
          v27 = (char *)(v7 + v26);
          if (v7 + v26 <= (unint64_t)v24)
          {
            v14 = (std::string::size_type)&v27[v23];
            if (&v27[v23] > (char *)v24)
              goto LABEL_1320;
          }
          memmove(v27, v24, v23);
          v28 = v26 + v23;
          if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
            v372.__r_.__value_.__l.__size_ = v26 + v23;
          else
            *((_BYTE *)&v372.__r_.__value_.__s + 23) = v28 & 0x7F;
          *(_BYTE *)(v7 + v28) = 0;
          v7 = 32;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v372, v25, v26 + v23 - v25, v26, v26, 0, v23, (const std::string::value_type *)v24);
      }
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__src.__r_.__value_.__l.__data_);
      v6 += 216;
    }
    while (v6 != v11);
  }
LABEL_108:
  v42 = HIBYTE(v372.__r_.__value_.__r.__words[2]);
  if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v42 = v372.__r_.__value_.__l.__size_;
  i = v366;
  if (!v42)
  {
    if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
    {
      v372.__r_.__value_.__l.__size_ = 2;
      v43 = (std::string *)v372.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&v372.__r_.__value_.__s + 23) = 2;
      v43 = &v372;
    }
    strcpy((char *)v43, " 0");
  }
  *((_BYTE *)&__src.__r_.__value_.__s + 23) = 1;
  v14 = (std::string::size_type)"9";
  if (&__src <= (std::string *)"9" && (char *)&__src.__r_.__value_.__l.__data_ + 1 > "9")
    goto LABEL_1320;
  LOWORD(__src.__r_.__value_.__l.__data_) = 57;
  if (*(_BYTE *)(v366 + 28) || *(_BYTE *)(v366 + 29))
  {
    *((_BYTE *)&__src.__r_.__value_.__s + 23) = 1;
    __src.__r_.__value_.__s.__data_[0] = 48;
    v6 = v365;
    v7 = v367;
    goto LABEL_120;
  }
  v7 = v367;
  if (*(char *)(v367 + 151) < 0)
  {
    v6 = v365;
    if (*(_QWORD *)(v367 + 136))
      goto LABEL_419;
  }
  else
  {
    v6 = v365;
    if (*(_BYTE *)(v367 + 151))
      goto LABEL_419;
  }
  if (!*(_DWORD *)(v367 + 160) && !*(_WORD *)(v367 + 184))
    goto LABEL_120;
LABEL_419:
  v118 = snprintf((char *)&__str, 0x20uLL, "%hu", *(unsigned __int16 *)(v367 + 184));
  if (v118 < 0)
LABEL_1335:
    abort();
  v119 = v118;
  if (v118 > 0x16)
  {
    v121 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v118 | 7) != 0x17)
      v121 = v118 | 7;
    v122 = v121 + 1;
    p_p = (std::string *)operator new(v121 + 1);
    __p.__r_.__value_.__l.__size_ = v119;
    __p.__r_.__value_.__r.__words[2] = v122 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    v9 = (std::string::size_type)p_p + v119;
    v14 = (std::string *)((char *)p_p + v119) > &__str;
    if (p_p > &__str)
      goto LABEL_427;
LABEL_426:
    if ((_DWORD)v14)
      goto LABEL_1320;
    goto LABEL_427;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v118;
  p_p = &__p;
  v9 = (std::string::size_type)&__p + v119;
  v14 = (std::string *)((char *)&__p + v119) > &__str;
  if (&__p <= &__str)
    goto LABEL_426;
LABEL_427:
  if ((_DWORD)v119)
    memcpy(p_p, &__str, v119);
  *(_BYTE *)v9 = 0;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  __src = __p;
LABEL_120:
  v14 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((v14 & 0x80000000) != 0)
  {
    v44 = __dst.__r_.__value_.__l.__size_;
    if ((__dst.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_1320;
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_)
    {
      if (!__dst.__r_.__value_.__r.__words[0])
        goto LABEL_1320;
    }
  }
  else
  {
    v44 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    p_dst = &__dst;
  }
  v9 = (std::string::size_type)&v374;
  webrtc::InitLine(109, (char *)p_dst, v44, &v374);
  v46 = HIBYTE(v374.__r_.__value_.__r.__words[2]);
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = 22;
  else
    v47 = (v374.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v46 = v374.__r_.__value_.__l.__size_;
  if (v47 == v46)
  {
    std::string::__grow_by_and_replace(&v374, v47, 1uLL, v47, v47, 0, 1uLL, " ");
    v14 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_132:
      v48 = v14;
      LOBYTE(v14) = v14 == 0;
      v49 = &__src;
      goto LABEL_143;
    }
  }
  else
  {
    if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = (std::string::size_type)&v374;
    else
      v14 = v374.__r_.__value_.__r.__words[0];
    v50 = (_BYTE *)(v14 + v46);
    if (v14 + v46 <= (unint64_t)" " && v50 + 1 > " ")
      goto LABEL_1320;
    *v50 = 32;
    v51 = v46 + 1;
    if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
    {
      v374.__r_.__value_.__l.__size_ = v51;
      *(_BYTE *)(v14 + v51) = 0;
      v14 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((v14 & 0x80000000) == 0)
        goto LABEL_132;
    }
    else
    {
      *((_BYTE *)&v374.__r_.__value_.__s + 23) = v51 & 0x7F;
      *(_BYTE *)(v14 + v51) = 0;
      v14 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((v14 & 0x80000000) == 0)
        goto LABEL_132;
    }
  }
  v48 = __src.__r_.__value_.__l.__size_;
  if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_1320;
  v49 = (std::string *)__src.__r_.__value_.__r.__words[0];
  v14 = __src.__r_.__value_.__l.__size_ == 0;
  if (__src.__r_.__value_.__l.__size_)
  {
    if (!__src.__r_.__value_.__r.__words[0])
      goto LABEL_1320;
  }
LABEL_143:
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = 22;
  else
    v52 = (v374.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v374.__r_.__value_.__r.__words[2]);
  else
    v53 = v374.__r_.__value_.__l.__size_;
  if (v52 - v53 >= v48)
  {
    if ((v14 & 1) == 0)
    {
      if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = (std::string::size_type)&v374;
      else
        v9 = v374.__r_.__value_.__r.__words[0];
      v54 = (char *)(v9 + v53);
      if (v9 + v53 <= (unint64_t)v49)
      {
        v14 = (std::string::size_type)&v54[v48];
        if (&v54[v48] > (char *)v49)
          goto LABEL_1320;
      }
      memmove(v54, v49, v48);
      v55 = v53 + v48;
      if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
        v374.__r_.__value_.__l.__size_ = v53 + v48;
      else
        *((_BYTE *)&v374.__r_.__value_.__s + 23) = v55 & 0x7F;
      *(_BYTE *)(v9 + v55) = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v374, v52, v53 + v48 - v52, v53, v53, 0, v48, (const std::string::value_type *)v49);
  }
  v56 = HIBYTE(v374.__r_.__value_.__r.__words[2]);
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = 22;
  else
    v57 = (v374.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v56 = v374.__r_.__value_.__l.__size_;
  if (v57 == v56)
  {
    std::string::__grow_by_and_replace(&v374, v57, 1uLL, v57, v57, 0, 1uLL, " ");
    v9 = v7 + 8;
    if ((*(char *)(v7 + 31) & 0x80000000) == 0)
      goto LABEL_173;
LABEL_181:
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
    v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
    v364 = v9;
    if ((v14 & 0x80000000) == 0)
      goto LABEL_174;
    goto LABEL_182;
  }
  v14 = (std::string::size_type)&v374;
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = v374.__r_.__value_.__r.__words[0];
  v61 = (_BYTE *)(v14 + v56);
  if (v14 + v56 <= (unint64_t)" " && v61 + 1 > " ")
    goto LABEL_1320;
  *v61 = 32;
  v62 = v56 + 1;
  if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
  {
    v374.__r_.__value_.__l.__size_ = v62;
    *(_BYTE *)(v14 + v62) = 0;
    v9 = v7 + 8;
    if (*(char *)(v7 + 31) < 0)
      goto LABEL_181;
  }
  else
  {
    *((_BYTE *)&v374.__r_.__value_.__s + 23) = v62 & 0x7F;
    *(_BYTE *)(v14 + v62) = 0;
    v9 = v7 + 8;
    if (*(char *)(v7 + 31) < 0)
      goto LABEL_181;
  }
LABEL_173:
  v58 = *(_OWORD *)v9;
  __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v58;
  v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
  v364 = v9;
  if ((v14 & 0x80000000) == 0)
  {
LABEL_174:
    v59 = v14;
    LOBYTE(v14) = v14 == 0;
    p_str = &__str;
    goto LABEL_185;
  }
LABEL_182:
  v59 = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_1320;
  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v14 = __str.__r_.__value_.__l.__size_ == 0;
  if (__str.__r_.__value_.__l.__size_)
  {
    if (!__str.__r_.__value_.__r.__words[0])
      goto LABEL_1320;
  }
LABEL_185:
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = 22;
  else
    v63 = (v374.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = HIBYTE(v374.__r_.__value_.__r.__words[2]);
  else
    v64 = v374.__r_.__value_.__l.__size_;
  if (v63 - v64 >= v59)
  {
    if ((v14 & 1) == 0)
    {
      if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = (std::string::size_type)&v374;
      else
        v9 = v374.__r_.__value_.__r.__words[0];
      v67 = (char *)(v9 + v64);
      if (v9 + v64 <= (unint64_t)p_str)
      {
        v14 = (std::string::size_type)&v67[v59];
        if (&v67[v59] > (char *)p_str)
          goto LABEL_1320;
      }
      memmove(v67, p_str, v59);
      v68 = v64 + v59;
      if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
      {
        v374.__r_.__value_.__l.__size_ = v64 + v59;
        *(_BYTE *)(v9 + v68) = 0;
        v14 = SHIBYTE(v372.__r_.__value_.__r.__words[2]);
        if ((v14 & 0x80000000) != 0)
          goto LABEL_193;
        goto LABEL_206;
      }
      *((_BYTE *)&v374.__r_.__value_.__s + 23) = v68 & 0x7F;
      *(_BYTE *)(v9 + v68) = 0;
    }
    v14 = SHIBYTE(v372.__r_.__value_.__r.__words[2]);
    if ((v14 & 0x80000000) != 0)
      goto LABEL_193;
LABEL_206:
    v65 = v14;
    LOBYTE(v14) = v14 == 0;
    v66 = &v372;
    goto LABEL_207;
  }
  std::string::__grow_by_and_replace(&v374, v63, v64 + v59 - v63, v64, v64, 0, v59, (const std::string::value_type *)p_str);
  v14 = SHIBYTE(v372.__r_.__value_.__r.__words[2]);
  if ((v14 & 0x80000000) == 0)
    goto LABEL_206;
LABEL_193:
  v65 = v372.__r_.__value_.__l.__size_;
  if ((v372.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_1320;
  v66 = (std::string *)v372.__r_.__value_.__r.__words[0];
  v14 = v372.__r_.__value_.__l.__size_ == 0;
  if (v372.__r_.__value_.__l.__size_)
  {
    if (!v372.__r_.__value_.__r.__words[0])
      goto LABEL_1320;
  }
LABEL_207:
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = 22;
  else
    v69 = (v374.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = HIBYTE(v374.__r_.__value_.__r.__words[2]);
  else
    v70 = v374.__r_.__value_.__l.__size_;
  if (v69 - v70 < v65)
  {
    std::string::__grow_by_and_replace(&v374, v69, v70 + v65 - v69, v70, v70, 0, v65, (const std::string::value_type *)v66);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_215;
LABEL_235:
    v14 = SHIBYTE(v374.__r_.__value_.__r.__words[2]);
    if ((v14 & 0x80000000) != 0)
      goto LABEL_216;
LABEL_236:
    webrtc::AddLine((char *)&v374, v14, (std::string *)v6);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_220;
    goto LABEL_237;
  }
  if ((v14 & 1) != 0)
    goto LABEL_234;
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = (std::string::size_type)&v374;
  else
    v9 = v374.__r_.__value_.__r.__words[0];
  v72 = (char *)(v9 + v70);
  if (v9 + v70 <= (unint64_t)v66)
  {
    v14 = (std::string::size_type)&v72[v65];
    if (&v72[v65] > (char *)v66)
      goto LABEL_1320;
  }
  memmove(v72, v66, v65);
  v73 = v70 + v65;
  if ((SHIBYTE(v374.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&v374.__r_.__value_.__s + 23) = v73 & 0x7F;
    *(_BYTE *)(v9 + v73) = 0;
LABEL_234:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_235;
    goto LABEL_215;
  }
  v374.__r_.__value_.__l.__size_ = v70 + v65;
  *(_BYTE *)(v9 + v73) = 0;
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_235;
LABEL_215:
  operator delete(__str.__r_.__value_.__l.__data_);
  v14 = SHIBYTE(v374.__r_.__value_.__r.__words[2]);
  if ((v14 & 0x80000000) == 0)
    goto LABEL_236;
LABEL_216:
  if ((v374.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || v374.__r_.__value_.__l.__size_ && !v374.__r_.__value_.__r.__words[0])
  {
    goto LABEL_1320;
  }
  webrtc::AddLine(v374.__r_.__value_.__l.__data_, v374.__r_.__value_.__l.__size_, (std::string *)v6);
  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_220:
    if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_221;
    goto LABEL_238;
  }
LABEL_237:
  operator delete(__src.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_221:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_222;
LABEL_239:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v374.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_223;
    goto LABEL_240;
  }
LABEL_238:
  operator delete(v372.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_239;
LABEL_222:
  if ((SHIBYTE(v374.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_223;
LABEL_240:
  operator delete(v374.__r_.__value_.__l.__data_);
LABEL_223:
  webrtc::InitLine(99, "IN", 2uLL, &v369);
  if (*(char *)(v7 + 151) < 0)
  {
    v71 = *(_DWORD *)(v7 + 160);
    if (*(_QWORD *)(v7 + 136))
      goto LABEL_256;
  }
  else
  {
    v71 = *(_DWORD *)(v7 + 160);
    if (*(_BYTE *)(v7 + 151))
    {
LABEL_256:
      if (v71 != 30)
      {
        if (v71 == 2)
        {
          v78 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
          if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = 22;
          else
            v79 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v78 = v369.__r_.__value_.__l.__size_;
          if (v79 == v78)
          {
            std::string::__grow_by_and_replace(&v369, v79, 1uLL, v79, v79, 0, 1uLL, " ");
          }
          else
          {
            v14 = (std::string::size_type)&v369;
            if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v14 = v369.__r_.__value_.__r.__words[0];
            v108 = (_BYTE *)(v14 + v78);
            if (v14 + v78 <= (unint64_t)" " && v108 + 1 > " ")
              goto LABEL_1320;
            *v108 = 32;
            v109 = v78 + 1;
            if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
              v369.__r_.__value_.__l.__size_ = v109;
            else
              *((_BYTE *)&v369.__r_.__value_.__s + 23) = v109 & 0x7F;
            *(_BYTE *)(v14 + v109) = 0;
          }
          if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v272 = 22;
          else
            v272 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v273 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
          else
            v273 = v369.__r_.__value_.__l.__size_;
          if (v272 - v273 >= 3)
          {
            v14 = (std::string::size_type)&v369;
            if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v14 = v369.__r_.__value_.__r.__words[0];
            v274 = (char *)(v14 + v273);
            if (v14 + v273 <= (unint64_t)"IP4" && v274 + 3 > "IP4")
              goto LABEL_1320;
            v274[2] = 52;
            *(_WORD *)v274 = 20553;
            v275 = v273 + 3;
            if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
              v369.__r_.__value_.__l.__size_ = v273 + 3;
            else
              *((_BYTE *)&v369.__r_.__value_.__s + 23) = v275 & 0x7F;
            *(_BYTE *)(v14 + v275) = 0;
          }
          else
          {
            std::string::__grow_by_and_replace(&v369, v272, v273 - v272 + 3, v273, v273, 0, 3uLL, "IP4");
          }
          v280 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
          if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v281 = 22;
          else
            v281 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v280 = v369.__r_.__value_.__l.__size_;
          if (v281 == v280)
          {
            std::string::__grow_by_and_replace(&v369, v281, 1uLL, v281, v281, 0, 1uLL, " ");
            rtc::IPAddress::ToString((rtc::IPAddress *)(v7 + 152), &__str);
            v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((v14 & 0x80000000) == 0)
            {
LABEL_1034:
              v282 = v14;
              LOBYTE(v14) = v14 == 0;
              v283 = &__str;
LABEL_1044:
              if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v286 = 22;
              else
                v286 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v287 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
              else
                v287 = v369.__r_.__value_.__l.__size_;
              if (v286 - v287 < v282)
              {
                std::string::__grow_by_and_replace(&v369, v286, v287 + v282 - v286, v287, v287, 0, v282, (const std::string::value_type *)v283);
                goto LABEL_1323;
              }
              if ((v14 & 1) != 0)
                goto LABEL_1323;
              if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v9 = (std::string::size_type)&v369;
              else
                v9 = v369.__r_.__value_.__r.__words[0];
              v288 = (char *)(v9 + v287);
              if (v9 + v287 > (unint64_t)v283
                || (v14 = (std::string::size_type)&v288[v282], &v288[v282] <= (char *)v283))
              {
                memmove(v288, v283, v282);
                v14 = v287 + v282;
                if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  *((_BYTE *)&v369.__r_.__value_.__s + 23) = v14 & 0x7F;
                  goto LABEL_1322;
                }
                goto LABEL_1321;
              }
              goto LABEL_1320;
            }
          }
          else
          {
            v14 = (std::string::size_type)&v369;
            if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v14 = v369.__r_.__value_.__r.__words[0];
            v284 = (_BYTE *)(v14 + v280);
            if (v14 + v280 <= (unint64_t)" " && v284 + 1 > " ")
              goto LABEL_1320;
            *v284 = 32;
            v285 = v280 + 1;
            if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
            {
              v369.__r_.__value_.__l.__size_ = v285;
              *(_BYTE *)(v14 + v285) = 0;
              rtc::IPAddress::ToString((rtc::IPAddress *)(v7 + 152), &__str);
              v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((v14 & 0x80000000) == 0)
                goto LABEL_1034;
            }
            else
            {
              *((_BYTE *)&v369.__r_.__value_.__s + 23) = v285 & 0x7F;
              *(_BYTE *)(v14 + v285) = 0;
              rtc::IPAddress::ToString((rtc::IPAddress *)(v7 + 152), &__str);
              v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((v14 & 0x80000000) == 0)
                goto LABEL_1034;
            }
          }
          v282 = __str.__r_.__value_.__l.__size_;
          if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_1320;
          v283 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v14 = __str.__r_.__value_.__l.__size_ == 0;
          if (__str.__r_.__value_.__l.__size_)
          {
            if (!__str.__r_.__value_.__r.__words[0])
              goto LABEL_1320;
          }
          goto LABEL_1044;
        }
        goto LABEL_265;
      }
      v86 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
      if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = 22;
      else
        v87 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v86 = v369.__r_.__value_.__l.__size_;
      if (v87 == v86)
      {
        std::string::__grow_by_and_replace(&v369, v87, 1uLL, v87, v87, 0, 1uLL, " ");
      }
      else
      {
        v14 = (std::string::size_type)&v369;
        if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v14 = v369.__r_.__value_.__r.__words[0];
        v110 = (_BYTE *)(v14 + v86);
        if (v14 + v86 <= (unint64_t)" " && v110 + 1 > " ")
          goto LABEL_1320;
        *v110 = 32;
        v111 = v86 + 1;
        if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
          v369.__r_.__value_.__l.__size_ = v111;
        else
          *((_BYTE *)&v369.__r_.__value_.__s + 23) = v111 & 0x7F;
        *(_BYTE *)(v14 + v111) = 0;
      }
      if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v276 = 22;
      else
        v276 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v277 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
      else
        v277 = v369.__r_.__value_.__l.__size_;
      if (v276 - v277 >= 3)
      {
        v14 = (std::string::size_type)&v369;
        if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v14 = v369.__r_.__value_.__r.__words[0];
        v278 = (char *)(v14 + v277);
        if (v14 + v277 <= (unint64_t)"IP6" && v278 + 3 > "IP6")
          goto LABEL_1320;
        v278[2] = 54;
        *(_WORD *)v278 = 20553;
        v279 = v277 + 3;
        if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
          v369.__r_.__value_.__l.__size_ = v277 + 3;
        else
          *((_BYTE *)&v369.__r_.__value_.__s + 23) = v279 & 0x7F;
        *(_BYTE *)(v14 + v279) = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(&v369, v276, v277 - v276 + 3, v277, v277, 0, 3uLL, "IP6");
      }
      v289 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
      if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v290 = 22;
      else
        v290 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v289 = v369.__r_.__value_.__l.__size_;
      if (v290 == v289)
      {
        std::string::__grow_by_and_replace(&v369, v290, 1uLL, v290, v290, 0, 1uLL, " ");
        rtc::IPAddress::ToString((rtc::IPAddress *)(v7 + 152), &__str);
        v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((v14 & 0x80000000) == 0)
        {
LABEL_1069:
          v291 = v14;
          LOBYTE(v14) = v14 == 0;
          v292 = &__str;
          goto LABEL_1079;
        }
      }
      else
      {
        v14 = (std::string::size_type)&v369;
        if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v14 = v369.__r_.__value_.__r.__words[0];
        v293 = (_BYTE *)(v14 + v289);
        if (v14 + v289 <= (unint64_t)" " && v293 + 1 > " ")
          goto LABEL_1320;
        *v293 = 32;
        v294 = v289 + 1;
        if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
        {
          v369.__r_.__value_.__l.__size_ = v294;
          *(_BYTE *)(v14 + v294) = 0;
          rtc::IPAddress::ToString((rtc::IPAddress *)(v7 + 152), &__str);
          v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((v14 & 0x80000000) == 0)
            goto LABEL_1069;
        }
        else
        {
          *((_BYTE *)&v369.__r_.__value_.__s + 23) = v294 & 0x7F;
          *(_BYTE *)(v14 + v294) = 0;
          rtc::IPAddress::ToString((rtc::IPAddress *)(v7 + 152), &__str);
          v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((v14 & 0x80000000) == 0)
            goto LABEL_1069;
        }
      }
      v291 = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_1320;
      v292 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v14 = __str.__r_.__value_.__l.__size_ == 0;
      if (__str.__r_.__value_.__l.__size_)
      {
        if (!__str.__r_.__value_.__r.__words[0])
          goto LABEL_1320;
      }
LABEL_1079:
      if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v295 = 22;
      else
        v295 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v296 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
      else
        v296 = v369.__r_.__value_.__l.__size_;
      if (v295 - v296 >= v291)
      {
        if ((v14 & 1) == 0)
        {
          if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v9 = (std::string::size_type)&v369;
          else
            v9 = v369.__r_.__value_.__r.__words[0];
          v297 = (char *)(v9 + v296);
          if (v9 + v296 <= (unint64_t)v292)
          {
            v14 = (std::string::size_type)&v297[v291];
            if (&v297[v291] > (char *)v292)
              goto LABEL_1320;
          }
          memmove(v297, v292, v291);
          v298 = v296 + v291;
          if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
            v369.__r_.__value_.__l.__size_ = v296 + v291;
          else
            *((_BYTE *)&v369.__r_.__value_.__s + 23) = v298 & 0x7F;
          *(_BYTE *)(v9 + v298) = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v369, v295, v296 + v291 - v295, v296, v296, 0, v291, (const std::string::value_type *)v292);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
        if ((v14 & 0x80000000) != 0)
          goto LABEL_334;
      }
      else
      {
        v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
        if ((v14 & 0x80000000) != 0)
          goto LABEL_334;
      }
      goto LABEL_327;
    }
  }
  if (v71)
    goto LABEL_256;
  if (!*(_WORD *)(v7 + 184))
  {
    v74 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
    if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v75 = 22;
    else
      v75 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v74 = v369.__r_.__value_.__l.__size_;
    if (v75 == v74)
      goto LABEL_271;
    v14 = (std::string::size_type)&v369;
    if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = v369.__r_.__value_.__r.__words[0];
    v76 = (_BYTE *)(v14 + v74);
    if (v14 + v74 <= (unint64_t)" " && v76 + 1 > " ")
      goto LABEL_1320;
    *v76 = 32;
    v77 = v74 + 1;
    if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_277;
    goto LABEL_255;
  }
LABEL_265:
  v80 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v75 = 22;
  else
    v75 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v80 = v369.__r_.__value_.__l.__size_;
  if (v75 != v80)
  {
    v14 = (std::string::size_type)&v369;
    if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = v369.__r_.__value_.__r.__words[0];
    v81 = (_BYTE *)(v14 + v80);
    if (v14 + v80 <= (unint64_t)" " && v81 + 1 > " ")
      goto LABEL_1320;
    *v81 = 32;
    v77 = v80 + 1;
    if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_277:
      *((_BYTE *)&v369.__r_.__value_.__s + 23) = v77 & 0x7F;
      goto LABEL_278;
    }
LABEL_255:
    v369.__r_.__value_.__l.__size_ = v77;
LABEL_278:
    *(_BYTE *)(v14 + v77) = 0;
    goto LABEL_279;
  }
LABEL_271:
  std::string::__grow_by_and_replace(&v369, v75, 1uLL, v75, v75, 0, 1uLL, " ");
LABEL_279:
  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = 22;
  else
    v82 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v83 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
  else
    v83 = v369.__r_.__value_.__l.__size_;
  if (v82 - v83 >= 3)
  {
    v14 = (std::string::size_type)&v369;
    if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = v369.__r_.__value_.__r.__words[0];
    v84 = (char *)(v14 + v83);
    if (v14 + v83 <= (unint64_t)"IP4" && v84 + 3 > "IP4")
      goto LABEL_1320;
    v84[2] = 52;
    *(_WORD *)v84 = 20553;
    v85 = v83 + 3;
    if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
      v369.__r_.__value_.__l.__size_ = v83 + 3;
    else
      *((_BYTE *)&v369.__r_.__value_.__s + 23) = v85 & 0x7F;
    *(_BYTE *)(v14 + v85) = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v369, v82, v83 - v82 + 3, v83, v83, 0, 3uLL, "IP4");
  }
  v88 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v89 = 22;
  else
    v89 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v88 = v369.__r_.__value_.__l.__size_;
  if (v89 == v88)
  {
    std::string::__grow_by_and_replace(&v369, v89, 1uLL, v89, v89, 0, 1uLL, " ");
  }
  else
  {
    v14 = (std::string::size_type)&v369;
    if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = v369.__r_.__value_.__r.__words[0];
    v90 = (_BYTE *)(v14 + v88);
    if (v14 + v88 <= (unint64_t)" " && v90 + 1 > " ")
      goto LABEL_1320;
    *v90 = 32;
    v91 = v88 + 1;
    if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
      v369.__r_.__value_.__l.__size_ = v91;
    else
      *((_BYTE *)&v369.__r_.__value_.__s + 23) = v91 & 0x7F;
    *(_BYTE *)(v14 + v91) = 0;
  }
  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v92 = 22;
  else
    v92 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v93 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
  else
    v93 = v369.__r_.__value_.__l.__size_;
  if (v92 - v93 < 7)
  {
    std::string::__grow_by_and_replace(&v369, v92, v93 - v92 + 7, v93, v93, 0, 7uLL, "0.0.0.0");
    v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
    if ((v14 & 0x80000000) != 0)
      goto LABEL_334;
    goto LABEL_327;
  }
  v14 = (std::string::size_type)&v369;
  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = v369.__r_.__value_.__r.__words[0];
  v96 = (_DWORD *)(v14 + v93);
  if (v14 + v93 > (unint64_t)"0.0.0.0" || (char *)v96 + 7 <= "0.0.0.0")
  {
    *(_DWORD *)((char *)v96 + 3) = 808333358;
    *v96 = 774909488;
    v97 = v93 + 7;
    if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
    {
      v369.__r_.__value_.__l.__size_ = v93 + 7;
      *(_BYTE *)(v14 + v97) = 0;
      v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
      if ((v14 & 0x80000000) != 0)
        goto LABEL_334;
    }
    else
    {
      *((_BYTE *)&v369.__r_.__value_.__s + 23) = v97 & 0x7F;
      *(_BYTE *)(v14 + v97) = 0;
      v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
      if ((v14 & 0x80000000) != 0)
        goto LABEL_334;
    }
    goto LABEL_327;
  }
  while (1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        do
                        {
                          while (1)
                          {
                            while (1)
                            {
                              while (1)
                              {
                                while (1)
                                {
                                  while (1)
                                  {
                                    while (1)
                                    {
                                      while (1)
                                      {
                                        do
                                        {
                                          while (1)
                                          {
                                            do
                                            {
                                              while (1)
                                              {
                                                while (1)
                                                {
                                                  while (1)
                                                  {
                                                    while (1)
                                                    {
                                                      while (1)
                                                      {
                                                        while (1)
                                                        {
                                                          while (1)
                                                          {
                                                            while (1)
                                                            {
                                                              while (1)
                                                              {
                                                                while (1)
                                                                {
                                                                  while (1)
                                                                  {
                                                                    while (1)
                                                                    {
                                                                      while (1)
                                                                      {
LABEL_1320:
                                                                        __break(1u);
LABEL_1321:
                                                                        v369.__r_.__value_.__l.__size_ = v14;
LABEL_1322:
                                                                        *(_BYTE *)(v9 + v14) = 0;
LABEL_1323:
                                                                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                                                        {
                                                                          operator delete(__str.__r_.__value_.__l.__data_);
                                                                          v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
                                                                          if ((v14 & 0x80000000) == 0)
                                                                          {
LABEL_327:
                                                                            v94 = v14;
                                                                            v95 = &v369;
                                                                            break;
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
                                                                          if ((v14 & 0x80000000) == 0)
                                                                            goto LABEL_327;
                                                                        }
LABEL_334:
                                                                        v94 = v369.__r_.__value_.__l.__size_;
                                                                        if ((v369.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                                        {
                                                                          v95 = (std::string *)v369.__r_.__value_.__r.__words[0];
                                                                          if (!v369.__r_.__value_.__l.__size_
                                                                            || v369.__r_.__value_.__r.__words[0])
                                                                          {
                                                                            break;
                                                                          }
                                                                        }
                                                                      }
                                                                      webrtc::AddLine((char *)v95, v94, (std::string *)v6);
                                                                      v98 = *(_DWORD *)(v7 + 36);
                                                                      if (*(char *)(v7 + 63) < 0)
                                                                      {
                                                                        std::string::__init_copy_ctor_external(&__src, *(const std::string::value_type **)(v7 + 40), *(_QWORD *)(v7 + 48));
                                                                        v14 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
                                                                        v99 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                                                                        if ((v14 & 0x80000000) == 0)
                                                                        {
LABEL_339:
                                                                          v14 = (std::string::size_type)&__src;
                                                                          v100 = v99;
                                                                          break;
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        __src = *(std::string *)(v7 + 40);
                                                                        v14 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
                                                                        v99 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                                                                        if ((v14 & 0x80000000) == 0)
                                                                          goto LABEL_339;
                                                                      }
                                                                      v100 = __src.__r_.__value_.__l.__size_;
                                                                      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                                      {
                                                                        v14 = __src.__r_.__value_.__r.__words[0];
                                                                        if (!__src.__r_.__value_.__l.__size_
                                                                          || __src.__r_.__value_.__r.__words[0])
                                                                        {
                                                                          break;
                                                                        }
                                                                      }
                                                                    }
                                                                    if (v100 != 2)
                                                                      break;
                                                                    v14 = *(unsigned __int16 *)v14;
                                                                    if ((_DWORD)v14 != *(unsigned __int16 *)"AS"
                                                                      || v98 < 1000)
                                                                    {
                                                                      break;
                                                                    }
                                                                    if ((v99 & 0x80) != 0)
                                                                    {
                                                                      v99 = __src.__r_.__value_.__l.__size_;
                                                                      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                                      {
                                                                        v101 = (std::string *)__src.__r_.__value_.__r.__words[0];
                                                                        if (!__src.__r_.__value_.__l.__size_
                                                                          || __src.__r_.__value_.__r.__words[0])
                                                                        {
                                                                          goto LABEL_368;
                                                                        }
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      v101 = &__src;
LABEL_368:
                                                                      v9 = (std::string::size_type)&v369;
                                                                      webrtc::InitLine(98, (char *)v101, v99, &v369);
                                                                      v104 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
                                                                      if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                        v105 = 22;
                                                                      else
                                                                        v105 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                                             - 1;
                                                                      if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                                        v104 = v369.__r_.__value_.__l.__size_;
                                                                      if (v105 == v104)
                                                                      {
                                                                        std::string::__grow_by_and_replace(&v369, v105, 1uLL, v105, v105, 0, 1uLL, ":");
                                                                        goto LABEL_434;
                                                                      }
                                                                      if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                        v14 = (std::string::size_type)&v369;
                                                                      else
                                                                        v14 = v369.__r_.__value_.__r.__words[0];
                                                                      v106 = (_BYTE *)(v14 + v104);
                                                                      if (v14 + v104 > (unint64_t)":"
                                                                        || v106 + 1 <= ":")
                                                                      {
                                                                        *v106 = 58;
                                                                        v107 = v104 + 1;
                                                                        if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
                                                                          v369.__r_.__value_.__l.__size_ = v107;
                                                                        else
                                                                          *((_BYTE *)&v369.__r_.__value_.__s + 23) = v107 & 0x7F;
                                                                        *(_BYTE *)(v14 + v107) = 0;
LABEL_434:
                                                                        rtc::StringBuilder::operator<<(&v369, v98 / 0x3E8u);
                                                                        v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
                                                                        if ((v14 & 0x80000000) == 0)
                                                                          goto LABEL_435;
                                                                        goto LABEL_404;
                                                                      }
                                                                    }
                                                                  }
                                                                  if ((v99 & 0x80) == 0)
                                                                  {
                                                                    v14 = (std::string::size_type)&__src;
                                                                    v102 = v99;
                                                                    break;
                                                                  }
                                                                  v102 = __src.__r_.__value_.__l.__size_;
                                                                  if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                                  {
                                                                    v14 = __src.__r_.__value_.__r.__words[0];
                                                                    if (!__src.__r_.__value_.__l.__size_
                                                                      || __src.__r_.__value_.__r.__words[0])
                                                                    {
                                                                      break;
                                                                    }
                                                                  }
                                                                }
                                                                if (v102 != 4)
                                                                  break;
                                                                v14 = *(unsigned int *)v14;
                                                                if ((_DWORD)v14 != *(_DWORD *)"TIAS" || v98 < 1)
                                                                  break;
                                                                if ((v99 & 0x80) != 0)
                                                                {
                                                                  v99 = __src.__r_.__value_.__l.__size_;
                                                                  if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                                  {
                                                                    v103 = (std::string *)__src.__r_.__value_.__r.__words[0];
                                                                    if (!__src.__r_.__value_.__l.__size_
                                                                      || __src.__r_.__value_.__r.__words[0])
                                                                    {
                                                                      goto LABEL_397;
                                                                    }
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  v103 = &__src;
LABEL_397:
                                                                  v9 = (std::string::size_type)&v369;
                                                                  webrtc::InitLine(98, (char *)v103, v99, &v369);
                                                                  v112 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
                                                                  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                    v113 = 22;
                                                                  else
                                                                    v113 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                                         - 1;
                                                                  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                                    v112 = v369.__r_.__value_.__l.__size_;
                                                                  if (v113 == v112)
                                                                  {
                                                                    std::string::__grow_by_and_replace(&v369, v113, 1uLL, v113, v113, 0, 1uLL, ":");
                                                                    rtc::StringBuilder::operator<<(&v369, v98);
                                                                    v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
                                                                    if ((v14 & 0x80000000) == 0)
                                                                      goto LABEL_435;
                                                                    goto LABEL_404;
                                                                  }
                                                                  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                    v14 = (std::string::size_type)&v369;
                                                                  else
                                                                    v14 = v369.__r_.__value_.__r.__words[0];
                                                                  v116 = (_BYTE *)(v14 + v112);
                                                                  if (v14 + v112 > (unint64_t)":"
                                                                    || v116 + 1 <= ":")
                                                                  {
                                                                    *v116 = 58;
                                                                    v117 = v112 + 1;
                                                                    if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
                                                                    {
                                                                      v369.__r_.__value_.__l.__size_ = v117;
                                                                      *(_BYTE *)(v14 + v117) = 0;
                                                                      rtc::StringBuilder::operator<<(&v369, v98);
                                                                      v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
                                                                      if ((v14 & 0x80000000) == 0)
                                                                      {
LABEL_435:
                                                                        v114 = v14;
                                                                        v115 = &v369;
LABEL_436:
                                                                        webrtc::AddLine((char *)v115, v114, (std::string *)v6);
                                                                        break;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      *((_BYTE *)&v369.__r_.__value_.__s + 23) = v117 & 0x7F;
                                                                      *(_BYTE *)(v14 + v117) = 0;
                                                                      rtc::StringBuilder::operator<<(&v369, v98);
                                                                      v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
                                                                      if ((v14 & 0x80000000) == 0)
                                                                        goto LABEL_435;
                                                                    }
LABEL_404:
                                                                    v114 = v369.__r_.__value_.__l.__size_;
                                                                    if ((v369.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                                    {
                                                                      v115 = (std::string *)v369.__r_.__value_.__r.__words[0];
                                                                      if (!v369.__r_.__value_.__l.__size_
                                                                        || v369.__r_.__value_.__r.__words[0])
                                                                      {
                                                                        goto LABEL_436;
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              v123 = v364;
                                                              if (!*(_BYTE *)(i + 29))
                                                                goto LABEL_444;
                                                              webrtc::InitLine(97, "bundle-only", 0xBuLL, &v369);
                                                              v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
                                                              if ((v14 & 0x80000000) == 0)
                                                                break;
                                                              v124 = v369.__r_.__value_.__l.__size_;
                                                              if ((v369.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                              {
                                                                v125 = (std::string *)v369.__r_.__value_.__r.__words[0];
                                                                if (!v369.__r_.__value_.__l.__size_
                                                                  || v369.__r_.__value_.__r.__words[0])
                                                                {
                                                                  goto LABEL_443;
                                                                }
                                                              }
                                                            }
                                                            v124 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
                                                            v125 = &v369;
LABEL_443:
                                                            webrtc::AddLine((char *)v125, v124, (std::string *)v6);
LABEL_444:
                                                            if (*(char *)(v7 + 31) < 0)
                                                            {
                                                              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
                                                              v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                              if ((v14 & 0x80000000) == 0)
                                                              {
LABEL_446:
                                                                v127 = v14;
                                                                v128 = &__str;
                                                                break;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v126 = *(_OWORD *)v123;
                                                              __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v123 + 16);
                                                              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v126;
                                                              v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                              if ((v14 & 0x80000000) == 0)
                                                                goto LABEL_446;
                                                            }
                                                            v127 = __str.__r_.__value_.__l.__size_;
                                                            if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                            {
                                                              v128 = (std::string *)__str.__r_.__value_.__r.__words[0];
                                                              if (!__str.__r_.__value_.__l.__size_
                                                                || __str.__r_.__value_.__r.__words[0])
                                                              {
                                                                break;
                                                              }
                                                            }
                                                          }
                                                          IsRtpProtocol = cricket::IsRtpProtocol((char *)v128, v127);
                                                          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                            break;
                                                          operator delete(__str.__r_.__value_.__l.__data_);
                                                          v130 = v363;
                                                          v131 = *v363;
                                                          if (!IsRtpProtocol)
                                                            goto LABEL_506;
LABEL_453:
                                                          memset(&__p, 0, sizeof(__p));
                                                          *(_OWORD *)&v374.__r_.__value_.__l.__data_ = 0x39uLL;
                                                          v374.__r_.__value_.__r.__words[2] = 0x100000000000000;
                                                          *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
                                                          v372.__r_.__value_.__r.__words[2] = 0x300000000000000;
                                                          *(_OWORD *)&v372.__r_.__value_.__l.__data_ = 0x345049uLL;
                                                          v9 = 3;
                                                          v7 = 20553;
                                                          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 7;
                                                          strcpy((char *)&__dst, "0.0.0.0");
                                                          i = v130[1];
                                                          if (v131 != i)
                                                          {
                                                            v132 = 0;
                                                            v14 = 0;
                                                            v133 = v131 + 104;
                                                            while (1)
                                                            {
                                                              while (1)
                                                              {
                                                                if (*(_DWORD *)(v133 - 80) == 2)
                                                                {
                                                                  v134 = (unsigned __int16 *)(v133 - 72);
                                                                  if (*(char *)(v133 - 49) < 0)
                                                                  {
                                                                    v135 = *(_QWORD *)(v133 - 64);
                                                                    if (v135 < 0)
                                                                      goto LABEL_1320;
                                                                    v134 = *(unsigned __int16 **)v134;
                                                                    if (v135)
                                                                    {
                                                                      if (!v134)
                                                                        goto LABEL_1320;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    v135 = *(unsigned __int8 *)(v133 - 49);
                                                                  }
                                                                  if (v135 == 3)
                                                                  {
                                                                    v136 = *v134;
                                                                    v137 = *((unsigned __int8 *)v134 + 2);
                                                                    if (v136 == (unsigned __int16)cricket::UDP_PROTOCOL_NAME
                                                                      && v137 == 112)
                                                                    {
                                                                      v139 = *(_DWORD *)(v133 + 104);
                                                                      if (v139 == 3)
                                                                        v140 = 3;
                                                                      else
                                                                        v140 = 0;
                                                                      if (v139 == 1)
                                                                        v140 = 2;
                                                                      v141 = v139 ? v140 : 1;
                                                                      v6 = *(unsigned int *)(v133 + 8);
                                                                      if (v141 > v132 || (_DWORD)v14 != (_DWORD)v6)
                                                                        break;
                                                                    }
                                                                  }
                                                                }
LABEL_480:
                                                                v142 = v133 + 328;
                                                                v133 += 432;
                                                                if (v142 == i)
                                                                  goto LABEL_497;
                                                              }
                                                              if ((_DWORD)v14 == 2 && (_DWORD)v6 == 30)
                                                              {
                                                                v14 = 2;
                                                                goto LABEL_480;
                                                              }
                                                              if ((_DWORD)v6 == 2)
                                                                break;
                                                              if ((_DWORD)v6 == 30)
                                                              {
                                                                if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
                                                                {
                                                                  v372.__r_.__value_.__l.__size_ = 3;
                                                                  v143 = (std::string *)v372.__r_.__value_.__r.__words[0];
                                                                }
                                                                else
                                                                {
                                                                  *((_BYTE *)&v372.__r_.__value_.__s + 23) = 3;
                                                                  v143 = &v372;
                                                                }
                                                                v143->__r_.__value_.__s.__data_[2] = 54;
                                                                goto LABEL_491;
                                                              }
LABEL_492:
                                                              std::to_string(&__str, *(unsigned __int16 *)(v133 + 32));
                                                              if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
                                                                operator delete(v374.__r_.__value_.__l.__data_);
                                                              v374 = __str;
                                                              rtc::IPAddress::ToString((rtc::IPAddress *)v133, &__str);
                                                              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                                                operator delete(__dst.__r_.__value_.__l.__data_);
                                                              __dst = __str;
                                                              v14 = v6;
                                                              v144 = v133 + 328;
                                                              v133 += 432;
                                                              v132 = v141;
                                                              if (v144 == i)
                                                                goto LABEL_497;
                                                            }
                                                            if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
                                                            {
                                                              v372.__r_.__value_.__l.__size_ = 3;
                                                              v143 = (std::string *)v372.__r_.__value_.__r.__words[0];
                                                              *(_BYTE *)(v372.__r_.__value_.__r.__words[0] + 2) = 52;
                                                            }
                                                            else
                                                            {
                                                              *((_BYTE *)&v372.__r_.__value_.__s + 23) = 3;
                                                              v143 = &v372;
                                                              v372.__r_.__value_.__s.__data_[2] = 52;
                                                            }
LABEL_491:
                                                            LOWORD(v143->__r_.__value_.__l.__data_) = 20553;
                                                            v143->__r_.__value_.__s.__data_[3] = 0;
                                                            goto LABEL_492;
                                                          }
LABEL_497:
                                                          memset(&__str, 0, sizeof(__str));
                                                          v9 = (std::string::size_type)&__str;
                                                          webrtc::InitLine(97, "rtcp", 4uLL, &__str);
                                                          v145 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                            v146 = 22;
                                                          else
                                                            v146 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                                 - 1;
                                                          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                            v145 = __str.__r_.__value_.__l.__size_;
                                                          if (v146 == v145)
                                                          {
                                                            std::string::__grow_by_and_replace(&__str, v146, 1uLL, v146, v146, 0, 1uLL, ":");
                                                            v6 = v365;
                                                            i = v366;
                                                            v7 = v367;
                                                            v14 = SHIBYTE(v374.__r_.__value_.__r.__words[2]);
                                                            if ((v14 & 0x80000000) == 0)
                                                              goto LABEL_504;
                                                            goto LABEL_515;
                                                          }
                                                          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                            v14 = (std::string::size_type)&__str;
                                                          else
                                                            v14 = __str.__r_.__value_.__r.__words[0];
                                                          v150 = (_BYTE *)(v14 + v145);
                                                          v6 = v365;
                                                          i = v366;
                                                          v7 = v367;
                                                          if (v14 + v145 > (unint64_t)":" || v150 + 1 <= ":")
                                                          {
                                                            *v150 = 58;
                                                            v151 = v145 + 1;
                                                            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                                            {
                                                              __str.__r_.__value_.__l.__size_ = v151;
                                                              *(_BYTE *)(v14 + v151) = 0;
                                                              v14 = SHIBYTE(v374.__r_.__value_.__r.__words[2]);
                                                              if ((v14 & 0x80000000) == 0)
                                                              {
LABEL_504:
                                                                v147 = v14;
                                                                LOBYTE(v14) = v14 == 0;
                                                                v148 = &v374;
                                                                goto LABEL_518;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              *((_BYTE *)&__str.__r_.__value_.__s + 23) = v151 & 0x7F;
                                                              *(_BYTE *)(v14 + v151) = 0;
                                                              v14 = SHIBYTE(v374.__r_.__value_.__r.__words[2]);
                                                              if ((v14 & 0x80000000) == 0)
                                                                goto LABEL_504;
                                                            }
LABEL_515:
                                                            v147 = v374.__r_.__value_.__l.__size_;
                                                            if ((v374.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                            {
                                                              v148 = (std::string *)v374.__r_.__value_.__r.__words[0];
                                                              v14 = v374.__r_.__value_.__l.__size_ == 0;
                                                              if (!v374.__r_.__value_.__l.__size_
                                                                || v374.__r_.__value_.__r.__words[0])
                                                              {
LABEL_518:
                                                                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                  v152 = 22;
                                                                else
                                                                  v152 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                                       - 1;
                                                                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                  v153 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                                else
                                                                  v153 = __str.__r_.__value_.__l.__size_;
                                                                if (v152 - v153 < v147)
                                                                {
                                                                  std::string::__grow_by_and_replace(&__str, v152, v153 + v147 - v152, v153, v153, 0, v147, (const std::string::value_type *)v148);
                                                                  goto LABEL_538;
                                                                }
                                                                if ((v14 & 1) != 0)
                                                                {
LABEL_538:
                                                                  v156 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                    v157 = 22;
                                                                  else
                                                                    v157 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                                         - 1;
                                                                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                                    v156 = __str.__r_.__value_.__l.__size_;
                                                                  if (v157 == v156)
                                                                  {
                                                                    std::string::__grow_by_and_replace(&__str, v157, 1uLL, v157, v157, 0, 1uLL, " ");
                                                                    goto LABEL_553;
                                                                  }
                                                                  v14 = (std::string::size_type)&__str;
                                                                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                                    v14 = __str.__r_.__value_.__r.__words[0];
                                                                  v158 = (_BYTE *)(v14 + v156);
                                                                  if (v14 + v156 > (unint64_t)" "
                                                                    || v158 + 1 <= " ")
                                                                  {
                                                                    *v158 = 32;
                                                                    v159 = v156 + 1;
                                                                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                                                      __str.__r_.__value_.__l.__size_ = v159;
                                                                    else
                                                                      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v159 & 0x7F;
                                                                    *(_BYTE *)(v14 + v159) = 0;
LABEL_553:
                                                                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                      v160 = 22;
                                                                    else
                                                                      v160 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                                           - 1;
                                                                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                      v161 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                                    else
                                                                      v161 = __str.__r_.__value_.__l.__size_;
                                                                    if (v160 - v161 < 2)
                                                                    {
                                                                      std::string::__grow_by_and_replace(&__str, v160, v161 - v160 + 2, v161, v161, 0, 2uLL, "IN");
                                                                      goto LABEL_569;
                                                                    }
                                                                    v14 = (std::string::size_type)&__str;
                                                                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                                      v14 = __str.__r_.__value_.__r.__words[0];
                                                                    v162 = (_WORD *)(v14 + v161);
                                                                    if (v14 + v161 > (unint64_t)"IN"
                                                                      || v162 + 1 <= (_WORD *)"IN")
                                                                    {
                                                                      *v162 = 20041;
                                                                      v163 = v161 + 2;
                                                                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                                                        __str.__r_.__value_.__l.__size_ = v161 + 2;
                                                                      else
                                                                        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v163 & 0x7F;
                                                                      *(_BYTE *)(v14 + v163) = 0;
LABEL_569:
                                                                      v164 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                        v165 = 22;
                                                                      else
                                                                        v165 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                                             - 1;
                                                                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                                        v164 = __str.__r_.__value_.__l.__size_;
                                                                      if (v165 == v164)
                                                                      {
                                                                        std::string::__grow_by_and_replace(&__str, v165, 1uLL, v165, v165, 0, 1uLL, " ");
                                                                        v14 = SHIBYTE(v372.__r_.__value_.__r.__words[2]);
                                                                        if ((v14 & 0x80000000) == 0)
                                                                          goto LABEL_576;
                                                                        goto LABEL_583;
                                                                      }
                                                                      v14 = (std::string::size_type)&__str;
                                                                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                                        v14 = __str.__r_.__value_.__r.__words[0];
                                                                      v168 = (_BYTE *)(v14 + v164);
                                                                      if (v14 + v164 > (unint64_t)" "
                                                                        || v168 + 1 <= " ")
                                                                      {
                                                                        *v168 = 32;
                                                                        v169 = v164 + 1;
                                                                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                                                        {
                                                                          __str.__r_.__value_.__l.__size_ = v169;
                                                                          *(_BYTE *)(v14 + v169) = 0;
                                                                          v14 = SHIBYTE(v372.__r_.__value_.__r.__words[2]);
                                                                          if ((v14 & 0x80000000) == 0)
                                                                          {
LABEL_576:
                                                                            v166 = v14;
                                                                            LOBYTE(v14) = v14 == 0;
                                                                            v167 = &v372;
                                                                            goto LABEL_586;
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          *((_BYTE *)&__str.__r_.__value_.__s + 23) = v169 & 0x7F;
                                                                          *(_BYTE *)(v14 + v169) = 0;
                                                                          v14 = SHIBYTE(v372.__r_.__value_.__r.__words[2]);
                                                                          if ((v14 & 0x80000000) == 0)
                                                                            goto LABEL_576;
                                                                        }
LABEL_583:
                                                                        v166 = v372.__r_.__value_.__l.__size_;
                                                                        if ((v372.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                                        {
                                                                          v167 = (std::string *)v372.__r_.__value_.__r.__words[0];
                                                                          v14 = v372.__r_.__value_.__l.__size_ == 0;
                                                                          if (!v372.__r_.__value_.__l.__size_
                                                                            || v372.__r_.__value_.__r.__words[0])
                                                                          {
LABEL_586:
                                                                            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                              v170 = 22;
                                                                            else
                                                                              v170 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                                                   - 1;
                                                                            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                              v171 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                                            else
                                                                              v171 = __str.__r_.__value_.__l.__size_;
                                                                            if (v170 - v171 < v166)
                                                                            {
                                                                              std::string::__grow_by_and_replace(&__str, v170, v171 + v166 - v170, v171, v171, 0, v166, (const std::string::value_type *)v167);
                                                                              goto LABEL_606;
                                                                            }
                                                                            if ((v14 & 1) != 0)
                                                                            {
LABEL_606:
                                                                              v174 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                                              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                                v175 = 22;
                                                                              else
                                                                                v175 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                                                     - 1;
                                                                              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                                                v174 = __str.__r_.__value_.__l.__size_;
                                                                              if (v175 == v174)
                                                                              {
                                                                                std::string::__grow_by_and_replace(&__str, v175, 1uLL, v175, v175, 0, 1uLL, " ");
                                                                                v14 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                                                                                if ((v14 & 0x80000000) == 0)
                                                                                  goto LABEL_613;
                                                                                goto LABEL_620;
                                                                              }
                                                                              v14 = (std::string::size_type)&__str;
                                                                              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                                                v14 = __str.__r_.__value_.__r.__words[0];
                                                                              v178 = (_BYTE *)(v14 + v174);
                                                                              if (v14 + v174 > (unint64_t)" "
                                                                                || v178 + 1 <= " ")
                                                                              {
                                                                                *v178 = 32;
                                                                                v179 = v174 + 1;
                                                                                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                                                                {
                                                                                  __str.__r_.__value_.__l.__size_ = v179;
                                                                                  *(_BYTE *)(v14 + v179) = 0;
                                                                                  v14 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                                                                                  if ((v14 & 0x80000000) == 0)
                                                                                  {
LABEL_613:
                                                                                    v176 = v14;
                                                                                    LOBYTE(v14) = v14 == 0;
                                                                                    v177 = &__dst;
                                                                                    goto LABEL_623;
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  *((_BYTE *)&__str.__r_.__value_.__s
                                                                                  + 23) = v179 & 0x7F;
                                                                                  *(_BYTE *)(v14 + v179) = 0;
                                                                                  v14 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                                                                                  if ((v14 & 0x80000000) == 0)
                                                                                    goto LABEL_613;
                                                                                }
LABEL_620:
                                                                                v176 = __dst.__r_.__value_.__l.__size_;
                                                                                if ((__dst.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                                                {
                                                                                  v177 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                                                                                  v14 = __dst.__r_.__value_.__l.__size_ == 0;
                                                                                  if (!__dst.__r_.__value_.__l.__size_
                                                                                    || __dst.__r_.__value_.__r.__words[0])
                                                                                  {
LABEL_623:
                                                                                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                                      v180 = 22;
                                                                                    else
                                                                                      v180 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                                                           - 1;
                                                                                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                                      v181 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                                                    else
                                                                                      v181 = __str.__r_.__value_.__l.__size_;
                                                                                    if (v180 - v181 < v176)
                                                                                    {
                                                                                      std::string::__grow_by_and_replace(&__str, v180, v181 + v176 - v180, v181, v181, 0, v176, (const std::string::value_type *)v177);
                                                                                      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                        goto LABEL_647;
                                                                                      goto LABEL_631;
                                                                                    }
                                                                                    if ((v14 & 1) != 0)
                                                                                      goto LABEL_646;
                                                                                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                                      v9 = (std::string::size_type)&__str;
                                                                                    else
                                                                                      v9 = __str.__r_.__value_.__r.__words[0];
                                                                                    v184 = (char *)(v9 + v181);
                                                                                    if (v9 + v181 > (unint64_t)v177
                                                                                      || (v14 = (std::string::size_type)&v184[v176],
                                                                                          &v184[v176] <= (char *)v177))
                                                                                    {
                                                                                      memmove(v184, v177, v176);
                                                                                      v185 = v181 + v176;
                                                                                      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                      {
                                                                                        *((_BYTE *)&__str.__r_.__value_.__s
                                                                                        + 23) = v185 & 0x7F;
                                                                                        *(_BYTE *)(v9 + v185) = 0;
LABEL_646:
                                                                                        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                          goto LABEL_647;
                                                                                        goto LABEL_631;
                                                                                      }
                                                                                      __str.__r_.__value_.__l.__size_ = v181 + v176;
                                                                                      *(_BYTE *)(v9 + v185) = 0;
                                                                                      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                      {
LABEL_647:
                                                                                        __p = __str;
                                                                                        v123 = v364;
                                                                                        if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                          goto LABEL_633;
                                                                                        goto LABEL_648;
                                                                                      }
LABEL_631:
                                                                                      std::string::__assign_no_alias<true>(&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                                                                                      v123 = v364;
                                                                                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                                                                      {
                                                                                        operator delete(__str.__r_.__value_.__l.__data_);
                                                                                        if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                        {
LABEL_633:
                                                                                          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                            goto LABEL_634;
                                                                                          goto LABEL_649;
                                                                                        }
                                                                                      }
                                                                                      else if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                      {
                                                                                        goto LABEL_633;
                                                                                      }
LABEL_648:
                                                                                      operator delete(v372.__r_.__value_.__l.__data_);
                                                                                      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                      {
LABEL_634:
                                                                                        if ((SHIBYTE(v374.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                          goto LABEL_635;
                                                                                        goto LABEL_650;
                                                                                      }
LABEL_649:
                                                                                      operator delete(__dst.__r_.__value_.__l.__data_);
                                                                                      if ((SHIBYTE(v374.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                      {
LABEL_635:
                                                                                        v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                                                        if ((v14 & 0x80000000) == 0)
                                                                                          goto LABEL_636;
                                                                                        goto LABEL_651;
                                                                                      }
LABEL_650:
                                                                                      operator delete(v374.__r_.__value_.__l.__data_);
                                                                                      v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
                                                                                      if ((v14 & 0x80000000) == 0)
                                                                                      {
LABEL_636:
                                                                                        v182 = v14;
                                                                                        if ((_BYTE)v14)
                                                                                        {
                                                                                          v183 = &__p;
LABEL_654:
                                                                                          webrtc::AddLine((char *)v183, v182, (std::string *)v6);
                                                                                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_655:
                                                                                            operator delete(__p.__r_.__value_.__l.__data_);
                                                                                        }
                                                                                        webrtc::BuildCandidate(*v363, v363[1], 0, (std::string *)v6);
                                                                                        v149 = v368;
                                                                                        if (!v368)
                                                                                          goto LABEL_1110;
                                                                                        goto LABEL_657;
                                                                                      }
LABEL_651:
                                                                                      v182 = __p.__r_.__value_.__l.__size_;
                                                                                      if (!__p.__r_.__value_.__l.__size_)
                                                                                        goto LABEL_655;
                                                                                      if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                                                      {
                                                                                        v183 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                                                                        if (__p.__r_.__value_.__r.__words[0])
                                                                                          goto LABEL_654;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                                v9 = (std::string::size_type)&__str;
                                                                              else
                                                                                v9 = __str.__r_.__value_.__r.__words[0];
                                                                              v172 = (char *)(v9 + v171);
                                                                              if (v9 + v171 > (unint64_t)v167
                                                                                || (v14 = (std::string::size_type)&v172[v166],
                                                                                    &v172[v166] <= (char *)v167))
                                                                              {
                                                                                memmove(v172, v167, v166);
                                                                                v173 = v171 + v166;
                                                                                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                                                                  __str.__r_.__value_.__l.__size_ = v171 + v166;
                                                                                else
                                                                                  *((_BYTE *)&__str.__r_.__value_.__s
                                                                                  + 23) = v173 & 0x7F;
                                                                                *(_BYTE *)(v9 + v173) = 0;
                                                                                goto LABEL_606;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                                    v9 = (std::string::size_type)&__str;
                                                                  else
                                                                    v9 = __str.__r_.__value_.__r.__words[0];
                                                                  v154 = (char *)(v9 + v153);
                                                                  if (v9 + v153 > (unint64_t)v148
                                                                    || (v14 = (std::string::size_type)&v154[v147],
                                                                        &v154[v147] <= (char *)v148))
                                                                  {
                                                                    memmove(v154, v148, v147);
                                                                    v155 = v153 + v147;
                                                                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                                                      __str.__r_.__value_.__l.__size_ = v153 + v147;
                                                                    else
                                                                      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v155 & 0x7F;
                                                                    *(_BYTE *)(v9 + v155) = 0;
                                                                    goto LABEL_538;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                        v130 = v363;
                                                        v131 = *v363;
                                                        if (IsRtpProtocol)
                                                          goto LABEL_453;
LABEL_506:
                                                        webrtc::BuildCandidate(v131, v130[1], 0, (std::string *)v6);
                                                        v149 = v368;
                                                        if (!v368)
                                                          goto LABEL_1110;
LABEL_657:
                                                        memset(&__str, 0, sizeof(__str));
                                                        if (*(char *)(v149 + 71) < 0)
                                                        {
                                                          if (!*(_QWORD *)(v149 + 56))
                                                          {
LABEL_668:
                                                            v191 = v368;
                                                            v192 = *(char *)(v368 + 95);
                                                            if ((v192 & 0x80000000) == 0)
                                                              goto LABEL_669;
                                                            goto LABEL_711;
                                                          }
                                                        }
                                                        else if (!*(_BYTE *)(v149 + 71))
                                                        {
                                                          goto LABEL_668;
                                                        }
                                                        v9 = (std::string::size_type)&__str;
                                                        webrtc::InitLine(97, "ice-ufrag", 9uLL, &__str);
                                                        v186 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v187 = 22;
                                                        else
                                                          v187 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                               - 1;
                                                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                          v186 = __str.__r_.__value_.__l.__size_;
                                                        if (v187 == v186)
                                                        {
                                                          std::string::__grow_by_and_replace(&__str, v187, 1uLL, v187, v187, 0, 1uLL, ":");
                                                          v188 = v368;
                                                          v189 = (const std::string::value_type *)(v368 + 48);
                                                          v14 = *(char *)(v368 + 71);
                                                          if ((v14 & 0x80000000) == 0)
                                                            goto LABEL_666;
                                                          goto LABEL_685;
                                                        }
                                                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                          v14 = (std::string::size_type)&__str;
                                                        else
                                                          v14 = __str.__r_.__value_.__r.__words[0];
                                                        v198 = (_BYTE *)(v14 + v186);
                                                        if (v14 + v186 > (unint64_t)":" || v198 + 1 <= ":")
                                                        {
                                                          *v198 = 58;
                                                          v199 = v186 + 1;
                                                          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                                          {
                                                            __str.__r_.__value_.__l.__size_ = v199;
                                                            *(_BYTE *)(v14 + v199) = 0;
                                                            v188 = v368;
                                                            v189 = (const std::string::value_type *)(v368 + 48);
                                                            v14 = *(char *)(v368 + 71);
                                                            if ((v14 & 0x80000000) == 0)
                                                            {
LABEL_666:
                                                              v190 = v14;
                                                              LOBYTE(v14) = v14 == 0;
                                                              break;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            *((_BYTE *)&__str.__r_.__value_.__s + 23) = v199 & 0x7F;
                                                            *(_BYTE *)(v14 + v199) = 0;
                                                            v188 = v368;
                                                            v189 = (const std::string::value_type *)(v368 + 48);
                                                            v14 = *(char *)(v368 + 71);
                                                            if ((v14 & 0x80000000) == 0)
                                                              goto LABEL_666;
                                                          }
LABEL_685:
                                                          v190 = *(_QWORD *)(v188 + 56);
                                                          if ((v190 & 0x8000000000000000) == 0)
                                                          {
                                                            v189 = *(const std::string::value_type **)v189;
                                                            v14 = v190 == 0;
                                                            if (!v190 || v189)
                                                              break;
                                                          }
                                                        }
                                                      }
                                                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                        v200 = 22;
                                                      else
                                                        v200 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                             - 1;
                                                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                        v201 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                      else
                                                        v201 = __str.__r_.__value_.__l.__size_;
                                                      if (v200 - v201 < v190)
                                                      {
                                                        std::string::__grow_by_and_replace(&__str, v200, v201 + v190 - v200, v201, v201, 0, v190, v189);
                                                        v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                        if ((v14 & 0x80000000) == 0)
                                                          goto LABEL_709;
                                                        goto LABEL_696;
                                                      }
                                                      if ((v14 & 1) != 0)
                                                        goto LABEL_708;
                                                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                        v9 = (std::string::size_type)&__str;
                                                      else
                                                        v9 = __str.__r_.__value_.__r.__words[0];
                                                      v204 = (char *)(v9 + v201);
                                                      if (v9 + v201 <= (unint64_t)v189)
                                                      {
                                                        v14 = (std::string::size_type)&v204[v190];
                                                        if (&v204[v190] > v189)
                                                          continue;
                                                      }
                                                      memmove(v204, v189, v190);
                                                      v205 = v201 + v190;
                                                      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                      {
                                                        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v205 & 0x7F;
                                                        *(_BYTE *)(v9 + v205) = 0;
LABEL_708:
                                                        v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                        if ((v14 & 0x80000000) == 0)
                                                          goto LABEL_709;
                                                        goto LABEL_696;
                                                      }
                                                      __str.__r_.__value_.__l.__size_ = v201 + v190;
                                                      *(_BYTE *)(v9 + v205) = 0;
                                                      v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                      if ((v14 & 0x80000000) == 0)
                                                      {
LABEL_709:
                                                        v202 = v14;
                                                        v203 = &__str;
                                                        break;
                                                      }
LABEL_696:
                                                      v202 = __str.__r_.__value_.__l.__size_;
                                                      if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                      {
                                                        v203 = (std::string *)__str.__r_.__value_.__r.__words[0];
                                                        if (!__str.__r_.__value_.__l.__size_
                                                          || __str.__r_.__value_.__r.__words[0])
                                                        {
                                                          break;
                                                        }
                                                      }
                                                    }
                                                    webrtc::AddLine((char *)v203, v202, (std::string *)v6);
                                                    v191 = v368;
                                                    v192 = *(char *)(v368 + 95);
                                                    if ((v192 & 0x80000000) == 0)
                                                    {
LABEL_669:
                                                      if (!(_BYTE)v192)
                                                        goto LABEL_712;
                                                      goto LABEL_670;
                                                    }
LABEL_711:
                                                    if (!*(_QWORD *)(v191 + 80))
                                                    {
LABEL_712:
                                                      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                        goto LABEL_713;
                                                      goto LABEL_748;
                                                    }
LABEL_670:
                                                    v9 = (std::string::size_type)&__str;
                                                    webrtc::InitLine(97, "ice-pwd", 7uLL, &__str);
                                                    v193 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                      v194 = 22;
                                                    else
                                                      v194 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                           - 1;
                                                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                      v193 = __str.__r_.__value_.__l.__size_;
                                                    if (v194 == v193)
                                                    {
                                                      std::string::__grow_by_and_replace(&__str, v194, 1uLL, v194, v194, 0, 1uLL, ":");
                                                      v195 = v368;
                                                      v196 = (const std::string::value_type *)(v368 + 72);
                                                      v14 = *(char *)(v368 + 95);
                                                      if ((v14 & 0x80000000) == 0)
                                                        goto LABEL_677;
                                                      goto LABEL_722;
                                                    }
                                                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                      v14 = (std::string::size_type)&__str;
                                                    else
                                                      v14 = __str.__r_.__value_.__r.__words[0];
                                                    v206 = (_BYTE *)(v14 + v193);
                                                    if (v14 + v193 > (unint64_t)":" || v206 + 1 <= ":")
                                                    {
                                                      *v206 = 58;
                                                      v207 = v193 + 1;
                                                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                                      {
                                                        __str.__r_.__value_.__l.__size_ = v207;
                                                        *(_BYTE *)(v14 + v207) = 0;
                                                        v195 = v368;
                                                        v196 = (const std::string::value_type *)(v368 + 72);
                                                        v14 = *(char *)(v368 + 95);
                                                        if ((v14 & 0x80000000) == 0)
                                                        {
LABEL_677:
                                                          v197 = v14;
                                                          LOBYTE(v14) = v14 == 0;
                                                          break;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v207 & 0x7F;
                                                        *(_BYTE *)(v14 + v207) = 0;
                                                        v195 = v368;
                                                        v196 = (const std::string::value_type *)(v368 + 72);
                                                        v14 = *(char *)(v368 + 95);
                                                        if ((v14 & 0x80000000) == 0)
                                                          goto LABEL_677;
                                                      }
LABEL_722:
                                                      v197 = *(_QWORD *)(v195 + 80);
                                                      if ((v197 & 0x8000000000000000) == 0)
                                                      {
                                                        v196 = *(const std::string::value_type **)v196;
                                                        v14 = v197 == 0;
                                                        if (!v197 || v196)
                                                          break;
                                                      }
                                                    }
                                                  }
                                                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                    v208 = 22;
                                                  else
                                                    v208 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL)
                                                         - 1;
                                                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                    v209 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                  else
                                                    v209 = __str.__r_.__value_.__l.__size_;
                                                  if (v208 - v209 < v197)
                                                  {
                                                    std::string::__grow_by_and_replace(&__str, v208, v209 + v197 - v208, v209, v209, 0, v197, v196);
                                                    v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                    if ((v14 & 0x80000000) == 0)
                                                      goto LABEL_746;
                                                    goto LABEL_733;
                                                  }
                                                  if ((v14 & 1) != 0)
                                                    goto LABEL_745;
                                                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                    v9 = (std::string::size_type)&__str;
                                                  else
                                                    v9 = __str.__r_.__value_.__r.__words[0];
                                                  v212 = (char *)(v9 + v209);
                                                  if (v9 + v209 <= (unint64_t)v196)
                                                  {
                                                    v14 = (std::string::size_type)&v212[v197];
                                                    if (&v212[v197] > v196)
                                                      continue;
                                                  }
                                                  memmove(v212, v196, v197);
                                                  v213 = v209 + v197;
                                                  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                  {
                                                    *((_BYTE *)&__str.__r_.__value_.__s + 23) = v213 & 0x7F;
                                                    *(_BYTE *)(v9 + v213) = 0;
LABEL_745:
                                                    v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                    if ((v14 & 0x80000000) == 0)
                                                      goto LABEL_746;
                                                    goto LABEL_733;
                                                  }
                                                  __str.__r_.__value_.__l.__size_ = v209 + v197;
                                                  *(_BYTE *)(v9 + v213) = 0;
                                                  v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                  if ((v14 & 0x80000000) == 0)
                                                  {
LABEL_746:
                                                    v210 = v14;
                                                    v211 = &__str;
                                                    break;
                                                  }
LABEL_733:
                                                  v210 = __str.__r_.__value_.__l.__size_;
                                                  if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                                  {
                                                    v211 = (std::string *)__str.__r_.__value_.__r.__words[0];
                                                    if (!__str.__r_.__value_.__l.__size_
                                                      || __str.__r_.__value_.__r.__words[0])
                                                    {
                                                      break;
                                                    }
                                                  }
                                                }
                                                webrtc::AddLine((char *)v211, v210, (std::string *)v6);
                                                if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                {
LABEL_713:
                                                  if (*(_QWORD *)(v368 + 24) == *(_QWORD *)(v368 + 32))
                                                    goto LABEL_856;
                                                  goto LABEL_749;
                                                }
LABEL_748:
                                                operator delete(__str.__r_.__value_.__l.__data_);
                                                if (*(_QWORD *)(v368 + 24) == *(_QWORD *)(v368 + 32))
                                                  goto LABEL_856;
LABEL_749:
                                                memset(&__str, 0, sizeof(__str));
                                                v9 = (std::string::size_type)&__str;
                                                webrtc::InitLine(97, "ice-options", 0xBuLL, &__str);
                                                v214 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                  v215 = 22;
                                                else
                                                  v215 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                                                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                                  v214 = __str.__r_.__value_.__l.__size_;
                                                if (v215 != v214)
                                                  break;
                                                std::string::__grow_by_and_replace(&__str, v215, 1uLL, v215, v215, 0, 1uLL, ":");
                                                v6 = v368;
                                                v216 = *(_QWORD *)(v368 + 24);
                                                v14 = *(_QWORD *)(v368 + 32);
                                                if (v14 != v216)
                                                  goto LABEL_772;
                                              }
                                              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                v14 = (std::string::size_type)&__str;
                                              else
                                                v14 = __str.__r_.__value_.__r.__words[0];
                                              v217 = (_BYTE *)(v14 + v214);
                                              v6 = v368;
                                            }
                                            while (v14 + v214 <= (unint64_t)":" && v217 + 1 > ":");
                                            *v217 = 58;
                                            v218 = v214 + 1;
                                            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                              break;
                                            *((_BYTE *)&__str.__r_.__value_.__s + 23) = v218 & 0x7F;
                                            *(_BYTE *)(v14 + v218) = 0;
                                            v216 = *(_QWORD *)(v6 + 24);
                                            v14 = *(_QWORD *)(v6 + 32);
                                            if (v14 != v216)
                                              goto LABEL_772;
                                          }
                                          __str.__r_.__value_.__l.__size_ = v218;
                                          *(_BYTE *)(v14 + v218) = 0;
                                          v216 = *(_QWORD *)(v6 + 24);
                                          v14 = *(_QWORD *)(v6 + 32);
                                        }
                                        while (v14 == v216);
LABEL_772:
                                        v14 = *(char *)(v216 + 23);
                                        if ((v14 & 0x80000000) == 0)
                                          break;
                                        v219 = *(_QWORD *)(v216 + 8);
                                        if ((v219 & 0x8000000000000000) == 0)
                                        {
                                          v216 = *(_QWORD *)v216;
                                          v14 = v219 == 0;
                                          if (!v219 || v216)
                                            goto LABEL_777;
                                        }
                                      }
                                      v219 = *(unsigned __int8 *)(v216 + 23);
                                      LOBYTE(v14) = *(_BYTE *)(v216 + 23) == 0;
LABEL_777:
                                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                        v220 = 22;
                                      else
                                        v220 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                        v221 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                      else
                                        v221 = __str.__r_.__value_.__l.__size_;
                                      if (v220 - v221 < v219)
                                      {
                                        std::string::__grow_by_and_replace(&__str, v220, v221 + v219 - v220, v221, v221, 0, v219, (const std::string::value_type *)v216);
                                        break;
                                      }
                                      if ((v14 & 1) != 0)
                                        break;
                                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                        v9 = (std::string::size_type)&__str;
                                      else
                                        v9 = __str.__r_.__value_.__r.__words[0];
                                      v222 = (char *)(v9 + v221);
                                      if (v9 + v221 <= v216)
                                      {
                                        v14 = (std::string::size_type)&v222[v219];
                                        if ((unint64_t)&v222[v219] > v216)
                                          continue;
                                      }
                                      memmove(v222, (const void *)v216, v219);
                                      v223 = v221 + v219;
                                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                        __str.__r_.__value_.__l.__size_ = v221 + v219;
                                      else
                                        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v223 & 0x7F;
                                      *(_BYTE *)(v9 + v223) = 0;
                                      break;
                                    }
                                    v9 = 0xAAAAAAAAAAAAAAABLL;
                                    if (0xAAAAAAAAAAAAAAABLL
                                       * ((uint64_t)(*(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24)) >> 3) >= 2)
                                    {
                                      v7 = 0;
                                      for (i = 1;
                                            i < 0xAAAAAAAAAAAAAAABLL
                                              * ((uint64_t)(*(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24)) >> 3);
                                            ++i)
                                      {
                                        v224 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v225 = 22;
                                        else
                                          v225 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                          v224 = __str.__r_.__value_.__l.__size_;
                                        if (v225 == v224)
                                        {
                                          std::string::__grow_by_and_replace(&__str, v225, 1uLL, v225, v225, 0, 1uLL, " ");
                                          v14 = *(_QWORD *)(v6 + 24);
                                          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 32) - v14) >> 3) <= i)
                                            goto LABEL_1320;
                                        }
                                        else
                                        {
                                          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                            v14 = (std::string::size_type)&__str;
                                          else
                                            v14 = __str.__r_.__value_.__r.__words[0];
                                          if (v14 + v224 <= (unint64_t)" "
                                            && v14 + v224 + 1 > (unint64_t)" ")
                                          {
                                            goto LABEL_1320;
                                          }
                                          *(_BYTE *)(v14 + v224) = 32;
                                          v227 = v224 + 1;
                                          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                            __str.__r_.__value_.__l.__size_ = v227;
                                          else
                                            *((_BYTE *)&__str.__r_.__value_.__s + 23) = v227 & 0x7F;
                                          *(_BYTE *)(v14 + v227) = 0;
                                          v14 = *(_QWORD *)(v6 + 24);
                                          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 32) - v14) >> 3) <= i)
                                            goto LABEL_1320;
                                        }
                                        v14 += v7;
                                        v228 = (const std::string::value_type *)(v14 + 24);
                                        if (*(char *)(v14 + 47) < 0)
                                        {
                                          v229 = *(_QWORD *)(v14 + 32);
                                          if ((v229 & 0x8000000000000000) != 0)
                                            goto LABEL_1320;
                                          v228 = *(const std::string::value_type **)v228;
                                          v14 = v229 == 0;
                                          if (v229 && v228 == 0)
                                            goto LABEL_1320;
                                        }
                                        else
                                        {
                                          v229 = *(unsigned __int8 *)(v14 + 47);
                                          LOBYTE(v14) = *(_BYTE *)(v14 + 47) == 0;
                                        }
                                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v231 = 22;
                                        else
                                          v231 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v232 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                        else
                                          v232 = __str.__r_.__value_.__l.__size_;
                                        if (v231 - v232 < v229)
                                        {
                                          std::string::__grow_by_and_replace(&__str, v231, v232 + v229 - v231, v232, v232, 0, v229, v228);
                                        }
                                        else if ((v14 & 1) == 0)
                                        {
                                          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                            v6 = (std::string::size_type)&__str;
                                          else
                                            v6 = __str.__r_.__value_.__r.__words[0];
                                          v233 = (char *)(v6 + v232);
                                          if (v6 + v232 <= (unint64_t)v228)
                                          {
                                            v14 = (std::string::size_type)&v233[v229];
                                            if (&v233[v229] > v228)
                                              goto LABEL_1320;
                                          }
                                          memmove(v233, v228, v229);
                                          v234 = v232 + v229;
                                          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                            __str.__r_.__value_.__l.__size_ = v232 + v229;
                                          else
                                            *((_BYTE *)&__str.__r_.__value_.__s + 23) = v234 & 0x7F;
                                          *(_BYTE *)(v6 + v234) = 0;
                                          v6 = v368;
                                        }
                                        v7 += 24;
                                      }
                                    }
                                    v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                                    if ((v14 & 0x80000000) == 0)
                                    {
                                      v235 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                      v236 = &__str;
                                      v6 = v365;
                                      i = v366;
                                      v7 = v367;
                                      v123 = v364;
                                      break;
                                    }
                                    v235 = __str.__r_.__value_.__l.__size_;
                                    v6 = v365;
                                    i = v366;
                                    v7 = v367;
                                    v123 = v364;
                                    if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                                    {
                                      v236 = (std::string *)__str.__r_.__value_.__r.__words[0];
                                      if (!__str.__r_.__value_.__l.__size_ || __str.__r_.__value_.__r.__words[0])
                                        break;
                                    }
                                  }
                                  webrtc::AddLine((char *)v236, v235, (std::string *)v6);
                                  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  {
LABEL_856:
                                    memset(&__str, 0, sizeof(__str));
                                    v237 = *(_QWORD *)(v368 + 104);
                                    if (!v237)
                                      goto LABEL_1108;
                                    goto LABEL_857;
                                  }
                                  operator delete(__str.__r_.__value_.__l.__data_);
                                  memset(&__str, 0, sizeof(__str));
                                  v237 = *(_QWORD *)(v368 + 104);
                                  if (!v237)
                                    goto LABEL_1108;
LABEL_857:
                                  v9 = (std::string::size_type)&__str;
                                  webrtc::InitLine(97, "fingerprint", 0xBuLL, &__str);
                                  v238 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v239 = 22;
                                  else
                                    v239 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v238 = __str.__r_.__value_.__l.__size_;
                                  if (v239 == v238)
                                    break;
                                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v14 = (std::string::size_type)&__str;
                                  else
                                    v14 = __str.__r_.__value_.__r.__words[0];
                                  v242 = (_BYTE *)(v14 + v238);
                                  if (v14 + v238 > (unint64_t)":" || v242 + 1 <= ":")
                                  {
                                    *v242 = 58;
                                    v243 = v238 + 1;
                                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                    {
                                      __str.__r_.__value_.__l.__size_ = v243;
                                      *(_BYTE *)(v14 + v243) = 0;
                                      v14 = *(char *)(v237 + 23);
                                      if ((v14 & 0x80000000) == 0)
                                        goto LABEL_864;
                                    }
                                    else
                                    {
                                      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v243 & 0x7F;
                                      *(_BYTE *)(v14 + v243) = 0;
                                      v14 = *(char *)(v237 + 23);
                                      if ((v14 & 0x80000000) == 0)
                                        goto LABEL_864;
                                    }
LABEL_872:
                                    v240 = *(_QWORD *)(v237 + 8);
                                    if ((v240 & 0x8000000000000000) == 0)
                                    {
                                      v241 = *(const std::string::value_type **)v237;
                                      v14 = v240 == 0;
                                      if (!v240 || v241)
                                        goto LABEL_875;
                                    }
                                  }
                                }
                                std::string::__grow_by_and_replace(&__str, v239, 1uLL, v239, v239, 0, 1uLL, ":");
                                v14 = *(char *)(v237 + 23);
                                if ((v14 & 0x80000000) != 0)
                                  goto LABEL_872;
LABEL_864:
                                v240 = v14;
                                LOBYTE(v14) = v14 == 0;
                                v241 = (const std::string::value_type *)v237;
LABEL_875:
                                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v244 = 22;
                                else
                                  v244 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v245 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                else
                                  v245 = __str.__r_.__value_.__l.__size_;
                                if (v244 - v245 < v240)
                                {
                                  std::string::__grow_by_and_replace(&__str, v244, v245 + v240 - v244, v245, v245, 0, v240, v241);
                                  break;
                                }
                                if ((v14 & 1) != 0)
                                  break;
                                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v9 = (std::string::size_type)&__str;
                                else
                                  v9 = __str.__r_.__value_.__r.__words[0];
                                v246 = (char *)(v9 + v245);
                                if (v9 + v245 <= (unint64_t)v241)
                                {
                                  v14 = (std::string::size_type)&v246[v240];
                                  if (&v246[v240] > v241)
                                    continue;
                                }
                                memmove(v246, v241, v240);
                                v247 = v245 + v240;
                                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                  __str.__r_.__value_.__l.__size_ = v245 + v240;
                                else
                                  *((_BYTE *)&__str.__r_.__value_.__s + 23) = v247 & 0x7F;
                                *(_BYTE *)(v9 + v247) = 0;
                                break;
                              }
                              v248 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v249 = 22;
                              else
                                v249 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                v248 = __str.__r_.__value_.__l.__size_;
                              if (v249 != v248)
                                break;
                              std::string::__grow_by_and_replace(&__str, v249, 1uLL, v249, v249, 0, 1uLL, " ");
                              v14 = *(_QWORD *)(v237 + 24);
                              if (v14)
                                goto LABEL_904;
LABEL_912:
                              v251 = 0;
                              v250 = *(_QWORD *)(v237 + 40);
                              if ((v250 & 0x8000000000000000) == 0)
                                goto LABEL_913;
                            }
                            v14 = (std::string::size_type)&__str;
                            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                              v14 = __str.__r_.__value_.__r.__words[0];
                            v252 = (_BYTE *)(v14 + v248);
                            if (v14 + v248 > (unint64_t)" " || v252 + 1 <= " ")
                            {
                              *v252 = 32;
                              v253 = v248 + 1;
                              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                              {
                                __str.__r_.__value_.__l.__size_ = v253;
                                *(_BYTE *)(v14 + v253) = 0;
                                v14 = *(_QWORD *)(v237 + 24);
                                if (!v14)
                                  goto LABEL_912;
                              }
                              else
                              {
                                *((_BYTE *)&__str.__r_.__value_.__s + 23) = v253 & 0x7F;
                                *(_BYTE *)(v14 + v253) = 0;
                                v14 = *(_QWORD *)(v237 + 24);
                                if (!v14)
                                  goto LABEL_912;
                              }
LABEL_904:
                              v14 = *(_QWORD *)(v14 + 16);
                              v250 = *(_QWORD *)(v237 + 40);
                              v251 = (unsigned __int8 *)(v14 + *(_QWORD *)(v237 + 32));
                              if ((v250 & 0x8000000000000000) == 0)
                                break;
                            }
                          }
LABEL_913:
                          ;
                        }
                        while (!v251 && v250);
                        v9 = (std::string::size_type)&v374;
                        rtc::hex_encode_with_delimiter(v251, v250, 58, &v374);
                        v14 = HIBYTE(v374.__r_.__value_.__r.__words[2]);
                        if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        {
                          v254 = HIBYTE(v374.__r_.__value_.__r.__words[2]);
                        }
                        else
                        {
                          v254 = v374.__r_.__value_.__l.__size_;
                          v9 = v374.__r_.__value_.__r.__words[0];
                        }
                        if (v254)
                        {
                          do
                          {
                            *(_BYTE *)v9 = __toupper(*(char *)v9);
                            ++v9;
                            --v254;
                          }
                          while (v254);
                          v14 = HIBYTE(v374.__r_.__value_.__r.__words[2]);
                        }
                        if ((v14 & 0x80) == 0)
                          break;
                        v255 = v374.__r_.__value_.__l.__size_;
                        if ((v374.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                        {
                          v256 = (std::string *)v374.__r_.__value_.__r.__words[0];
                          v14 = v374.__r_.__value_.__l.__size_ == 0;
                          if (!v374.__r_.__value_.__l.__size_ || v374.__r_.__value_.__r.__words[0])
                            goto LABEL_926;
                        }
                      }
                      v255 = v14;
                      LOBYTE(v14) = (_DWORD)v14 == 0;
                      v256 = &v374;
LABEL_926:
                      v257 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                           ? 22
                           : (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      v258 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                           ? HIBYTE(__str.__r_.__value_.__r.__words[2])
                           : __str.__r_.__value_.__l.__size_;
                      if (v257 - v258 >= v255)
                        break;
                      std::string::__grow_by_and_replace(&__str, v257, v258 + v255 - v257, v258, v258, 0, v255, (const std::string::value_type *)v256);
                      if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
                        goto LABEL_934;
LABEL_949:
                      v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                      if ((v14 & 0x80000000) != 0)
                        goto LABEL_935;
LABEL_950:
                      webrtc::AddLine((char *)&__str, v14, (std::string *)v6);
                      v259 = *(_DWORD *)(v368 + 100);
                      if (!v259)
                        goto LABEL_1108;
LABEL_951:
                      LODWORD(__dst.__r_.__value_.__l.__data_) = v259;
                      memset(&v374, 0, sizeof(v374));
                      cricket::ConnectionRoleToString(&__dst, (uint64_t *)&v374);
                      v9 = (std::string::size_type)&__str;
                      webrtc::InitLine(97, "setup", 5uLL, &__str);
                      v262 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v263 = 22;
                      else
                        v263 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v262 = __str.__r_.__value_.__l.__size_;
                      if (v263 == v262)
                      {
                        std::string::__grow_by_and_replace(&__str, v263, 1uLL, v263, v263, 0, 1uLL, ":");
                        v14 = SHIBYTE(v374.__r_.__value_.__r.__words[2]);
                        if ((v14 & 0x80000000) == 0)
                          goto LABEL_958;
                        goto LABEL_966;
                      }
                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v14 = (std::string::size_type)&__str;
                      else
                        v14 = __str.__r_.__value_.__r.__words[0];
                      v266 = (_BYTE *)(v14 + v262);
                      if (v14 + v262 > (unint64_t)":" || v266 + 1 <= ":")
                      {
                        *v266 = 58;
                        v267 = v262 + 1;
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        {
                          __str.__r_.__value_.__l.__size_ = v267;
                          *(_BYTE *)(v14 + v267) = 0;
                          v14 = SHIBYTE(v374.__r_.__value_.__r.__words[2]);
                          if ((v14 & 0x80000000) == 0)
                          {
LABEL_958:
                            v264 = v14;
                            LOBYTE(v14) = v14 == 0;
                            v265 = &v374;
                            goto LABEL_969;
                          }
                        }
                        else
                        {
                          *((_BYTE *)&__str.__r_.__value_.__s + 23) = v267 & 0x7F;
                          *(_BYTE *)(v14 + v267) = 0;
                          v14 = SHIBYTE(v374.__r_.__value_.__r.__words[2]);
                          if ((v14 & 0x80000000) == 0)
                            goto LABEL_958;
                        }
LABEL_966:
                        v264 = v374.__r_.__value_.__l.__size_;
                        if ((v374.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                        {
                          v265 = (std::string *)v374.__r_.__value_.__r.__words[0];
                          v14 = v374.__r_.__value_.__l.__size_ == 0;
                          if (!v374.__r_.__value_.__l.__size_ || v374.__r_.__value_.__r.__words[0])
                          {
LABEL_969:
                            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v268 = 22;
                            else
                              v268 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v269 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                            else
                              v269 = __str.__r_.__value_.__l.__size_;
                            if (v268 - v269 < v264)
                            {
                              std::string::__grow_by_and_replace(&__str, v268, v269 + v264 - v268, v269, v269, 0, v264, (const std::string::value_type *)v265);
                              goto LABEL_1101;
                            }
                            if ((v14 & 1) != 0)
                            {
LABEL_1101:
                              v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                              if ((v14 & 0x80000000) == 0)
                              {
                                v299 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                                v300 = &__str;
LABEL_1106:
                                webrtc::AddLine((char *)v300, v299, (std::string *)v6);
                                if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v374.__r_.__value_.__l.__data_);
                                goto LABEL_1108;
                              }
                              v299 = __str.__r_.__value_.__l.__size_;
                              if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                              {
                                v300 = (std::string *)__str.__r_.__value_.__r.__words[0];
                                if (!__str.__r_.__value_.__l.__size_ || __str.__r_.__value_.__r.__words[0])
                                  goto LABEL_1106;
                              }
                            }
                            else
                            {
                              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v9 = (std::string::size_type)&__str;
                              else
                                v9 = __str.__r_.__value_.__r.__words[0];
                              v270 = (char *)(v9 + v269);
                              if (v9 + v269 > (unint64_t)v265
                                || (v14 = (std::string::size_type)&v270[v264], &v270[v264] <= (char *)v265))
                              {
                                memmove(v270, v265, v264);
                                v271 = v269 + v264;
                                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                  __str.__r_.__value_.__l.__size_ = v269 + v264;
                                else
                                  *((_BYTE *)&__str.__r_.__value_.__s + 23) = v271 & 0x7F;
                                *(_BYTE *)(v9 + v271) = 0;
                                goto LABEL_1101;
                              }
                            }
                          }
                        }
                      }
                    }
                    if ((v14 & 1) != 0)
                      goto LABEL_948;
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v9 = (std::string::size_type)&__str;
                    else
                      v9 = __str.__r_.__value_.__r.__words[0];
                    v260 = (char *)(v9 + v258);
                    if (v9 + v258 <= (unint64_t)v256)
                    {
                      v14 = (std::string::size_type)&v260[v255];
                      if (&v260[v255] > (char *)v256)
                        continue;
                    }
                    memmove(v260, v256, v255);
                    v261 = v258 + v255;
                    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v261 & 0x7F;
                      *(_BYTE *)(v9 + v261) = 0;
LABEL_948:
                      if ((SHIBYTE(v374.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_949;
                      goto LABEL_934;
                    }
                    __str.__r_.__value_.__l.__size_ = v258 + v255;
                    *(_BYTE *)(v9 + v261) = 0;
                    if ((SHIBYTE(v374.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_949;
LABEL_934:
                    operator delete(v374.__r_.__value_.__l.__data_);
                    v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                    if ((v14 & 0x80000000) == 0)
                      goto LABEL_950;
LABEL_935:
                    if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0
                      && (!__str.__r_.__value_.__l.__size_ || __str.__r_.__value_.__r.__words[0]))
                    {
                      break;
                    }
                  }
                  webrtc::AddLine(__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, (std::string *)v6);
                  v259 = *(_DWORD *)(v368 + 100);
                  if (v259)
                    goto LABEL_951;
LABEL_1108:
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_1110:
                  v9 = (std::string::size_type)&v369;
                  webrtc::InitLine(97, "mid", 3uLL, &v369);
                  v301 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
                  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v302 = 22;
                  else
                    v302 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v301 = v369.__r_.__value_.__l.__size_;
                  if (v302 == v301)
                    break;
                  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v14 = (std::string::size_type)&v369;
                  else
                    v14 = v369.__r_.__value_.__r.__words[0];
                  v304 = (_BYTE *)(v14 + v301);
                  if (v14 + v301 > (unint64_t)":" || v304 + 1 <= ":")
                  {
                    *v304 = 58;
                    v305 = v301 + 1;
                    if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v369.__r_.__value_.__l.__size_ = v305;
                      *(_BYTE *)(v14 + v305) = 0;
                      v14 = *(char *)(i + 23);
                      if ((v14 & 0x80000000) == 0)
                        goto LABEL_1117;
                    }
                    else
                    {
                      *((_BYTE *)&v369.__r_.__value_.__s + 23) = v305 & 0x7F;
                      *(_BYTE *)(v14 + v305) = 0;
                      v14 = *(char *)(i + 23);
                      if ((v14 & 0x80000000) == 0)
                        goto LABEL_1117;
                    }
LABEL_1125:
                    v303 = *(_QWORD *)(i + 8);
                    if ((v303 & 0x8000000000000000) == 0)
                    {
                      i = *(_QWORD *)i;
                      v14 = v303 == 0;
                      if (!v303 || i)
                        goto LABEL_1128;
                    }
                  }
                }
                std::string::__grow_by_and_replace(&v369, v302, 1uLL, v302, v302, 0, 1uLL, ":");
                v14 = *(char *)(i + 23);
                if ((v14 & 0x80000000) != 0)
                  goto LABEL_1125;
LABEL_1117:
                v303 = v14;
                LOBYTE(v14) = v14 == 0;
LABEL_1128:
                v306 = (v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? 22
                     : (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                v307 = (v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? HIBYTE(v369.__r_.__value_.__r.__words[2])
                     : v369.__r_.__value_.__l.__size_;
                if (v306 - v307 < v303)
                  break;
                if ((v14 & 1) != 0)
                  goto LABEL_1150;
                if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v9 = (std::string::size_type)&v369;
                else
                  v9 = v369.__r_.__value_.__r.__words[0];
                v311 = (char *)(v9 + v307);
                if (v9 + v307 <= i)
                {
                  v14 = (std::string::size_type)&v311[v303];
                  if ((unint64_t)&v311[v303] > i)
                    continue;
                }
                memmove(v311, (const void *)i, v303);
                v312 = v307 + v303;
                if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  *((_BYTE *)&v369.__r_.__value_.__s + 23) = v312 & 0x7F;
                  *(_BYTE *)(v9 + v312) = 0;
LABEL_1150:
                  v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
                  if ((v14 & 0x80000000) == 0)
                    goto LABEL_1151;
                  goto LABEL_1136;
                }
                v369.__r_.__value_.__l.__size_ = v307 + v303;
                *(_BYTE *)(v9 + v312) = 0;
                v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
                if ((v14 & 0x80000000) == 0)
                  goto LABEL_1151;
LABEL_1136:
                if ((v369.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0
                  && (!v369.__r_.__value_.__l.__size_ || v369.__r_.__value_.__r.__words[0]))
                {
                  webrtc::AddLine(v369.__r_.__value_.__l.__data_, v369.__r_.__value_.__l.__size_, (std::string *)v6);
                  if ((*(char *)(v7 + 31) & 0x80000000) == 0)
                    goto LABEL_1140;
                  goto LABEL_1152;
                }
              }
              std::string::__grow_by_and_replace(&v369, v306, v307 + v303 - v306, v307, v307, 0, v303, (const std::string::value_type *)i);
              v14 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
              if ((v14 & 0x80000000) != 0)
                goto LABEL_1136;
LABEL_1151:
              webrtc::AddLine((char *)&v369, v14, (std::string *)v6);
              if ((*(char *)(v7 + 31) & 0x80000000) == 0)
              {
LABEL_1140:
                v308 = *(_OWORD *)v123;
                __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v123 + 16);
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v308;
                v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_1141;
                goto LABEL_1153;
              }
LABEL_1152:
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
              v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_1141:
                v309 = &__str;
                v310 = v14;
                break;
              }
LABEL_1153:
              v310 = __str.__r_.__value_.__l.__size_;
              if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
              {
                v309 = (std::string *)__str.__r_.__value_.__r.__words[0];
                if (!__str.__r_.__value_.__l.__size_ || __str.__r_.__value_.__r.__words[0])
                  break;
              }
            }
            if (v310 != 13)
              break;
            if (v309->__r_.__value_.__r.__words[0] == *(_QWORD *)"UDP/DTLS/SCTP"
              && *(std::string::size_type *)((char *)v309->__r_.__value_.__r.__words + 5) == *(_QWORD *)"TLS/SCTP")
            {
              v9 = 1;
              if ((v14 & 0x80) == 0)
                goto LABEL_1165;
              goto LABEL_1187;
            }
            v320 = v309->__r_.__value_.__r.__words[0];
            v321 = *(std::string::size_type *)((char *)v309->__r_.__value_.__r.__words + 5);
            v9 = v320 == *(_QWORD *)"TCP/DTLS/SCTP" && v321 == *(_QWORD *)"TLS/SCTP";
            if ((v14 & 0x80) != 0)
              goto LABEL_1187;
LABEL_1165:
            if ((_DWORD)v9)
              goto LABEL_1166;
LABEL_1188:
            if (*(char *)(v7 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
              v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((v14 & 0x80000000) == 0)
              {
LABEL_1190:
                v324 = v14;
                v325 = &__str;
LABEL_1205:
                v330 = cricket::IsRtpProtocol((char *)v325, v324);
                v331 = v330;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__str.__r_.__value_.__l.__data_);
                  if (!v331)
                    goto LABEL_1298;
                }
                else if (!v330)
                {
                  goto LABEL_1298;
                }
                webrtc::BuildRtpContentAttributes(v7, v361, v362, (std::string *)v6);
                if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_1210;
                goto LABEL_1299;
              }
            }
            else
            {
              v323 = *(_OWORD *)v123;
              __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v123 + 16);
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v323;
              v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((v14 & 0x80000000) == 0)
                goto LABEL_1190;
            }
            v324 = __str.__r_.__value_.__l.__size_;
            if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
            {
              v325 = (std::string *)__str.__r_.__value_.__r.__words[0];
              if (!__str.__r_.__value_.__l.__size_ || __str.__r_.__value_.__r.__words[0])
                goto LABEL_1205;
            }
          }
          if (v310 == 9)
          {
            v313 = v309->__r_.__value_.__r.__words[0];
            v314 = v309->__r_.__value_.__s.__data_[8];
            v9 = v313 == *(_QWORD *)"DTLS/SCTP" && v314 == cricket::kMediaProtocolDtlsSctp[8];
            if ((v14 & 0x80) == 0)
              goto LABEL_1165;
          }
          else
          {
            v9 = 0;
            if ((v14 & 0x80) == 0)
              goto LABEL_1165;
          }
LABEL_1187:
          operator delete(__str.__r_.__value_.__l.__data_);
          if (!(_DWORD)v9)
            goto LABEL_1188;
LABEL_1166:
          v316 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
          memset(&__str, 0, sizeof(__str));
          if (!*(_BYTE *)(v316 + 304))
            break;
          memset(&v374, 0, sizeof(v374));
          v9 = (std::string::size_type)&v374;
          webrtc::InitLine(97, "sctpmap", 7uLL, &v374);
          v317 = HIBYTE(v374.__r_.__value_.__r.__words[2]);
          if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v318 = 22;
          else
            v318 = (v374.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v317 = v374.__r_.__value_.__l.__size_;
          if (v318 == v317)
          {
            std::string::__grow_by_and_replace(&v374, v318, 1uLL, v318, v318, 0, 1uLL, ":");
            goto LABEL_1244;
          }
          if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v14 = (std::string::size_type)&v374;
          else
            v14 = v374.__r_.__value_.__r.__words[0];
          v332 = (_BYTE *)(v14 + v317);
          if (v14 + v317 > (unint64_t)":" || v332 + 1 <= ":")
          {
            *v332 = 58;
            v333 = v317 + 1;
            if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
              v374.__r_.__value_.__l.__size_ = v333;
            else
              *((_BYTE *)&v374.__r_.__value_.__s + 23) = v333 & 0x7F;
            *(_BYTE *)(v14 + v333) = 0;
LABEL_1244:
            v340 = rtc::StringBuilder::operator<<(&v374, *(_DWORD *)(v316 + 308));
            v341 = v340;
            v342 = HIBYTE(v340->__r_.__value_.__r.__words[2]);
            v343 = (char)v342;
            if ((v342 & 0x80u) == 0)
              v344 = 22;
            else
              v344 = (v340->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if ((v342 & 0x80u) != 0)
              v342 = v340->__r_.__value_.__l.__size_;
            if (v344 == v342)
            {
              std::string::__grow_by_and_replace(v340, v344, 1uLL, v344, v344, 0, 1uLL, " ");
              goto LABEL_1260;
            }
            if (v343 >= 0)
              v14 = (std::string::size_type)v340;
            else
              v14 = v340->__r_.__value_.__r.__words[0];
            v345 = (_BYTE *)(v14 + v342);
            if (v14 + v342 > (unint64_t)" " || v345 + 1 <= " ")
            {
              *v345 = 32;
              v346 = v342 + 1;
              if (SHIBYTE(v340->__r_.__value_.__r.__words[2]) < 0)
                v340->__r_.__value_.__l.__size_ = v346;
              else
                *((_BYTE *)&v340->__r_.__value_.__s + 23) = v346 & 0x7F;
              *(_BYTE *)(v14 + v346) = 0;
LABEL_1260:
              v347 = SHIBYTE(v341->__r_.__value_.__r.__words[2]);
              if (v347 >= 0)
                v348 = 22;
              else
                v348 = (v341->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v347 >= 0)
                v349 = HIBYTE(v341->__r_.__value_.__r.__words[2]);
              else
                v349 = v341->__r_.__value_.__l.__size_;
              if (v348 - v349 < 0x12)
              {
                std::string::__grow_by_and_replace(v341, v348, v349 - v348 + 18, v349, v349, 0, 0x12uLL, "webrtc-datachannel");
                goto LABEL_1277;
              }
              if (v347 >= 0)
                v14 = (std::string::size_type)v341;
              else
                v14 = v341->__r_.__value_.__r.__words[0];
              v350 = (char *)(v14 + v349);
              if (v14 + v349 > (unint64_t)"webrtc-datachannel" || v350 + 18 <= "webrtc-datachannel")
              {
                *((_WORD *)v350 + 8) = 27749;
                *(_OWORD *)v350 = *(_OWORD *)"webrtc-datachannel";
                v351 = v349 + 18;
                if (SHIBYTE(v341->__r_.__value_.__r.__words[2]) < 0)
                  v341->__r_.__value_.__l.__size_ = v351;
                else
                  *((_BYTE *)&v341->__r_.__value_.__s + 23) = v351 & 0x7F;
                *(_BYTE *)(v14 + v351) = 0;
LABEL_1277:
                v352 = HIBYTE(v341->__r_.__value_.__r.__words[2]);
                v353 = (char)v352;
                if ((v352 & 0x80u) == 0)
                  v354 = 22;
                else
                  v354 = (v341->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if ((v352 & 0x80u) != 0)
                  v352 = v341->__r_.__value_.__l.__size_;
                if (v354 == v352)
                {
                  std::string::__grow_by_and_replace(v341, v354, 1uLL, v354, v354, 0, 1uLL, " ");
                  rtc::StringBuilder::operator<<(v341, 1024);
                  v14 = SHIBYTE(v374.__r_.__value_.__r.__words[2]);
                  if ((v14 & 0x80000000) == 0)
                    goto LABEL_1284;
                  goto LABEL_1292;
                }
                if (v353 >= 0)
                  v14 = (std::string::size_type)v341;
                else
                  v14 = v341->__r_.__value_.__r.__words[0];
                v357 = (_BYTE *)(v14 + v352);
                if (v14 + v352 > (unint64_t)" " || v357 + 1 <= " ")
                {
                  *v357 = 32;
                  v358 = v352 + 1;
                  if ((SHIBYTE(v341->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    *((_BYTE *)&v341->__r_.__value_.__s + 23) = v358 & 0x7F;
                    *(_BYTE *)(v14 + v358) = 0;
                    rtc::StringBuilder::operator<<(v341, 1024);
                    v14 = SHIBYTE(v374.__r_.__value_.__r.__words[2]);
                    if ((v14 & 0x80000000) == 0)
                      goto LABEL_1284;
                    goto LABEL_1292;
                  }
                  v341->__r_.__value_.__l.__size_ = v358;
                  *(_BYTE *)(v14 + v358) = 0;
                  rtc::StringBuilder::operator<<(v341, 1024);
                  v14 = SHIBYTE(v374.__r_.__value_.__r.__words[2]);
                  if ((v14 & 0x80000000) == 0)
                  {
LABEL_1284:
                    v355 = v14;
                    v356 = &v374;
LABEL_1295:
                    webrtc::AddLine((char *)v356, v355, (std::string *)v6);
                    if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v374.__r_.__value_.__l.__data_);
LABEL_1297:
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_1318;
LABEL_1298:
                    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_1210;
                    goto LABEL_1299;
                  }
LABEL_1292:
                  v355 = v374.__r_.__value_.__l.__size_;
                  if ((v374.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
                  {
                    v356 = (std::string *)v374.__r_.__value_.__r.__words[0];
                    if (!v374.__r_.__value_.__l.__size_ || v374.__r_.__value_.__r.__words[0])
                      goto LABEL_1295;
                  }
                }
              }
            }
          }
        }
        v9 = (std::string::size_type)&__str;
        webrtc::InitLine(97, "sctp-port", 9uLL, &__str);
        v326 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v327 = 22;
        else
          v327 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v326 = __str.__r_.__value_.__l.__size_;
        if (v327 == v326)
        {
          std::string::__grow_by_and_replace(&__str, v327, 1uLL, v327, v327, 0, 1uLL, ":");
          rtc::StringBuilder::operator<<(&__str, *(_DWORD *)(v316 + 308));
          v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((v14 & 0x80000000) == 0)
            goto LABEL_1200;
          goto LABEL_1230;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = (std::string::size_type)&__str;
        else
          v14 = __str.__r_.__value_.__r.__words[0];
        v334 = (_BYTE *)(v14 + v326);
        if (v14 + v326 > (unint64_t)":" || v334 + 1 <= ":")
        {
          *v334 = 58;
          v335 = v326 + 1;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            __str.__r_.__value_.__l.__size_ = v335;
            *(_BYTE *)(v14 + v335) = 0;
            rtc::StringBuilder::operator<<(&__str, *(_DWORD *)(v316 + 308));
            v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((v14 & 0x80000000) == 0)
            {
LABEL_1200:
              v328 = v14;
              v329 = &__str;
              break;
            }
          }
          else
          {
            *((_BYTE *)&__str.__r_.__value_.__s + 23) = v335 & 0x7F;
            *(_BYTE *)(v14 + v335) = 0;
            rtc::StringBuilder::operator<<(&__str, *(_DWORD *)(v316 + 308));
            v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((v14 & 0x80000000) == 0)
              goto LABEL_1200;
          }
LABEL_1230:
          v328 = __str.__r_.__value_.__l.__size_;
          if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
          {
            v329 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (!__str.__r_.__value_.__l.__size_ || __str.__r_.__value_.__r.__words[0])
              break;
          }
        }
      }
      webrtc::AddLine((char *)v329, v328, (std::string *)v6);
      if (*(_DWORD *)(v316 + 312) == 0x10000)
        goto LABEL_1297;
      webrtc::InitLine(97, "max-message-size", 0x10uLL, &__str);
      v336 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v337 = 22;
      else
        v337 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v336 = __str.__r_.__value_.__l.__size_;
      if (v337 == v336)
      {
        std::string::__grow_by_and_replace(&__str, v337, 1uLL, v337, v337, 0, 1uLL, ":");
        rtc::StringBuilder::operator<<(&__str, *(_DWORD *)(v316 + 312));
        v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((v14 & 0x80000000) == 0)
          goto LABEL_1241;
        goto LABEL_1314;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = (std::string::size_type)&__str;
      else
        v14 = __str.__r_.__value_.__r.__words[0];
      v359 = (_BYTE *)(v14 + v336);
    }
    while (v14 + v336 <= (unint64_t)":" && v359 + 1 > ":");
    *v359 = 58;
    v360 = v336 + 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      __str.__r_.__value_.__l.__size_ = v360;
    else
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v360 & 0x7F;
    *(_BYTE *)(v14 + v360) = 0;
    rtc::StringBuilder::operator<<(&__str, *(_DWORD *)(v316 + 312));
    v14 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((v14 & 0x80000000) == 0)
      break;
LABEL_1314:
    v338 = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
    {
      v339 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (!__str.__r_.__value_.__l.__size_ || __str.__r_.__value_.__r.__words[0])
        goto LABEL_1317;
    }
  }
LABEL_1241:
  v338 = v14;
  v339 = &__str;
LABEL_1317:
  webrtc::AddLine((char *)v339, v338, (std::string *)v6);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_1298;
LABEL_1318:
  operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_1210:
    operator delete(__src.__r_.__value_.__l.__data_);
    if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1211;
    return;
  }
LABEL_1299:
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
LABEL_1211:
    operator delete(v369.__r_.__value_.__l.__data_);
}

void webrtc::SdpSerializeCandidate(std::string *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  unint64_t size;
  unint64_t v8;
  void *v9;

  v4 = a2;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = (std::string *)operator new(0x1B0uLL);
  v6 = cricket::Candidate::Candidate(v5, this);
  webrtc::BuildCandidate((uint64_t)v6, (uint64_t)&v6[18], 1, v4);
  std::string::__erase_external_with_move(v4, 0, 2uLL);
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    size = v4->__r_.__value_.__l.__size_;
    v8 = size - 2;
    if (size >= 2)
    {
      v4->__r_.__value_.__l.__size_ = v8;
      v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
      goto LABEL_8;
    }
  }
  else
  {
    size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
    v8 = size - 2;
    if (size > 1)
    {
      *((_BYTE *)&v4->__r_.__value_.__s + 23) = v8 & 0x7F;
LABEL_8:
      v4->__r_.__value_.__s.__data_[v8] = 0;
      cricket::Candidate::~Candidate((void **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
  }
  std::string::append(v4, v8 - size, 0);
  cricket::Candidate::~Candidate((void **)&v5->__r_.__value_.__l.__data_);
LABEL_6:
  operator delete(v9);
}

void webrtc::BuildCandidate(uint64_t a1, uint64_t a2, int a3, std::string *a4)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unsigned __int16 v7;
  char v8;
  std::string::size_type size;
  std::string::size_type v10;
  char *v11;
  int v12;
  size_t v13;
  BOOL v14;
  std::string *v15;
  _BYTE *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  char *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string *v25;
  _BYTE *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  int v31;
  std::string::size_type v32;
  char *v33;
  int v34;
  size_t v35;
  BOOL v36;
  char *v37;
  std::string *v38;
  _BYTE *v39;
  std::string::size_type v40;
  int v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string *v44;
  char *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  int v48;
  std::string::size_type v49;
  std::string *v50;
  _BYTE *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string *v54;
  std::string::size_type v55;
  int v56;
  std::string::size_type v57;
  unsigned __int8 v58;
  size_t v59;
  BOOL v60;
  std::string *p_p_new_stuff;
  std::string *v62;
  _BYTE *v63;
  std::string::size_type v64;
  int v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string *v68;
  char *v69;
  std::string::size_type v70;
  std::string::size_type v71;
  int v72;
  std::string::size_type v73;
  unsigned __int8 v74;
  size_t v75;
  BOOL v76;
  std::string *p_src;
  std::string *v78;
  _BYTE *v79;
  std::string::size_type v80;
  int v81;
  std::string::size_type v82;
  std::string::size_type v83;
  std::string *v84;
  char *v85;
  std::string::size_type v86;
  std::string::size_type v87;
  int v88;
  std::string::size_type v89;
  std::string *v90;
  _BYTE *v91;
  std::string::size_type v92;
  int v93;
  std::string::size_type v94;
  std::string::size_type v95;
  std::string *v96;
  std::string::size_type v97;
  std::string::size_type v98;
  std::string::size_type v99;
  int v100;
  std::string::size_type v101;
  unsigned __int8 v102;
  size_t v103;
  BOOL v104;
  char *v105;
  std::string *v106;
  _BYTE *v107;
  std::string::size_type v108;
  int v109;
  std::string::size_type v110;
  std::string::size_type v111;
  std::string *v112;
  char *v113;
  std::string::size_type v114;
  std::string::size_type v115;
  int v116;
  std::string::size_type v117;
  int v118;
  std::string *v119;
  _BYTE *v120;
  std::string::size_type v121;
  std::string::size_type v122;
  std::string::size_type v123;
  std::string *v124;
  char *v125;
  std::string::size_type v126;
  std::string::size_type v127;
  std::string::size_type v128;
  unsigned __int8 v129;
  size_t v130;
  BOOL v131;
  std::string *v132;
  std::string *v133;
  _BYTE *v134;
  std::string::size_type v135;
  std::string::size_type v136;
  std::string::size_type v137;
  std::string *v138;
  char *v139;
  std::string::size_type v140;
  std::string::size_type v141;
  std::string::size_type v142;
  std::string *v143;
  _BYTE *v144;
  std::string::size_type v145;
  std::string::size_type v146;
  std::string::size_type v147;
  std::string *v148;
  char *v149;
  std::string::size_type v150;
  std::string::size_type v151;
  std::string::size_type v152;
  unsigned __int8 v153;
  size_t v154;
  BOOL v155;
  std::string *v156;
  std::string *v157;
  _BYTE *v158;
  std::string::size_type v159;
  std::string::size_type v160;
  std::string::size_type v161;
  std::string *v162;
  char *v163;
  std::string::size_type v164;
  std::string::size_type v165;
  std::string::size_type v166;
  uint64_t v167;
  std::string *v168;
  _BYTE *v169;
  std::string::size_type v170;
  std::string::size_type v172;
  std::string::size_type v173;
  std::string *v174;
  char *v175;
  std::string::size_type v176;
  std::string::size_type v177;
  std::string::size_type v178;
  std::string *v179;
  _BYTE *v180;
  std::string::size_type v181;
  std::string::size_type v182;
  std::string::size_type v183;
  std::string *v184;
  _BYTE *v185;
  std::string::size_type v186;
  std::string::size_type v187;
  std::string::size_type v188;
  std::string::size_type v189;
  std::string::size_type v190;
  std::string *v191;
  char *v192;
  std::string::size_type v193;
  std::string *v194;
  _DWORD *v195;
  std::string::size_type v196;
  std::string::size_type v197;
  std::string::size_type v198;
  const std::string::value_type *v199;
  int v200;
  std::string::size_type v201;
  BOOL v202;
  std::string *v203;
  _BYTE *v204;
  std::string::size_type v205;
  std::string::size_type v206;
  std::string::size_type v207;
  size_t v208;
  std::string *v209;
  std::string *v210;
  char *v211;
  std::string::size_type v212;
  std::string::size_type v213;
  std::string::size_type v214;
  std::string *v215;
  _BYTE *v216;
  std::string::size_type v217;
  std::string::size_type v218;
  std::string::size_type v219;
  std::string *v220;
  char *v221;
  std::string::size_type v222;
  std::string::size_type v223;
  std::string::size_type v224;
  std::string *v225;
  _BYTE *v226;
  std::string::size_type v227;
  std::string::size_type v228;
  std::string::size_type v229;
  std::string *v230;
  _BYTE *v231;
  std::string::size_type v232;
  std::string::size_type v233;
  std::string::size_type v234;
  std::string *v235;
  char *v236;
  std::string::size_type v237;
  std::string::size_type v238;
  std::string::size_type v239;
  std::string *v240;
  _BYTE *v241;
  std::string::size_type v242;
  std::string::size_type v243;
  std::string::size_type v244;
  char *v245;
  int v246;
  size_t v247;
  BOOL v248;
  std::string *v249;
  _BYTE *v250;
  std::string::size_type v251;
  std::string::size_type v252;
  std::string::size_type v253;
  std::string *v254;
  char *v255;
  std::string::size_type v256;
  std::string::size_type v257;
  std::string::size_type v258;
  std::string *v259;
  _BYTE *v260;
  std::string::size_type v261;
  std::string __src;
  std::string __p_new_stuff;
  std::string::value_type *v267;
  size_t v268;
  uint64_t v269;
  std::string v270;

  memset(&v270, 0, sizeof(v270));
  if (a1 != a2)
  {
    v4 = a1 + 208;
    while (2)
    {
      v267 = 0;
      v268 = 0;
      v269 = 0;
      switch(*(_DWORD *)v4)
      {
        case 0:
          HIBYTE(v269) = 4;
          LODWORD(v267) = 1953722216;
          v6 = (char *)&v267 + 4;
          goto LABEL_11;
        case 1:
          HIBYTE(v269) = 5;
          v7 = 29299;
          goto LABEL_8;
        case 2:
          HIBYTE(v269) = 5;
          v7 = 29296;
LABEL_8:
          LODWORD(v267) = v7 | 0x6C660000;
          v6 = (char *)&v267 + 5;
          v8 = 120;
          goto LABEL_10;
        case 3:
          HIBYTE(v269) = 5;
          LODWORD(v267) = 1634493810;
          v6 = (char *)&v267 + 5;
          v8 = 121;
LABEL_10:
          BYTE4(v267) = v8;
LABEL_11:
          *v6 = 0;
          webrtc::InitLine(97, "candidate", 9uLL, &v270);
          size = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v10 = 22;
          else
            v10 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v270.__r_.__value_.__l.__size_;
          if (v10 == size)
          {
            std::string::__grow_by_and_replace(&v270, v10, 1uLL, v10, v10, 0, 1uLL, ":");
            v11 = (char *)(v4 + 48);
            v12 = *(char *)(v4 + 71);
            if ((v12 & 0x80000000) == 0)
              goto LABEL_18;
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v15 = &v270;
            else
              v15 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v16 = (char *)v15 + size;
            if ((char *)v15 + size <= ":" && v16 + 1 > ":")
            {
LABEL_749:
              __break(1u);
              return;
            }
            *v16 = 58;
            v17 = size + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
            {
              v270.__r_.__value_.__l.__size_ = v17;
              v15->__r_.__value_.__s.__data_[v17] = 0;
              v11 = (char *)(v4 + 48);
              v12 = *(char *)(v4 + 71);
              if ((v12 & 0x80000000) == 0)
              {
LABEL_18:
                v13 = v12;
                v14 = v12 == 0;
                goto LABEL_29;
              }
            }
            else
            {
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v17 & 0x7F;
              v15->__r_.__value_.__s.__data_[v17] = 0;
              v11 = (char *)(v4 + 48);
              v12 = *(char *)(v4 + 71);
              if ((v12 & 0x80000000) == 0)
                goto LABEL_18;
            }
          }
          v13 = *(_QWORD *)(v4 + 56);
          if ((v13 & 0x8000000000000000) != 0)
            goto LABEL_749;
          v11 = *(char **)v11;
          v14 = v13 == 0;
          if (v13)
          {
            if (!v11)
              goto LABEL_749;
          }
LABEL_29:
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = 22;
          else
            v18 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            v19 = v270.__r_.__value_.__l.__size_;
          if (v18 - v19 >= v13)
          {
            if (!v14)
            {
              if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v20 = &v270;
              else
                v20 = (std::string *)v270.__r_.__value_.__r.__words[0];
              v21 = (char *)v20 + v19;
              if ((char *)v20 + v19 <= v11 && &v21[v13] > v11)
                goto LABEL_749;
              memmove(v21, v11, v13);
              v22 = v19 + v13;
              if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
                v270.__r_.__value_.__l.__size_ = v19 + v13;
              else
                *((_BYTE *)&v270.__r_.__value_.__s + 23) = v22 & 0x7F;
              v20->__r_.__value_.__s.__data_[v22] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(&v270, v18, v19 + v13 - v18, v19, v19, 0, v13, v11);
          }
          v23 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = 22;
          else
            v24 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v23 = v270.__r_.__value_.__l.__size_;
          if (v24 == v23)
          {
            std::string::__grow_by_and_replace(&v270, v24, 1uLL, v24, v24, 0, 1uLL, " ");
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = &v270;
            else
              v25 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v26 = (char *)v25 + v23;
            if ((char *)v25 + v23 <= " " && v26 + 1 > " ")
              goto LABEL_749;
            *v26 = 32;
            v27 = v23 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v27;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v27 & 0x7F;
            v25->__r_.__value_.__s.__data_[v27] = 0;
          }
          v28 = rtc::StringBuilder::operator<<(&v270, *(_DWORD *)(v4 - 184));
          v29 = v28;
          v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
          v31 = (char)v30;
          if ((v30 & 0x80u) == 0)
            v32 = 22;
          else
            v32 = (v28->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v30 & 0x80u) != 0)
            v30 = v28->__r_.__value_.__l.__size_;
          if (v32 == v30)
          {
            std::string::__grow_by_and_replace(v28, v32, 1uLL, v32, v32, 0, 1uLL, " ");
            v33 = (char *)(v4 - 176);
            v34 = *(char *)(v4 - 153);
            if ((v34 & 0x80000000) == 0)
              goto LABEL_72;
          }
          else
          {
            if (v31 >= 0)
              v38 = v28;
            else
              v38 = (std::string *)v28->__r_.__value_.__r.__words[0];
            v39 = (char *)v38 + v30;
            if ((char *)v38 + v30 <= " " && v39 + 1 > " ")
              goto LABEL_749;
            *v39 = 32;
            v40 = v30 + 1;
            if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
            {
              v28->__r_.__value_.__l.__size_ = v40;
              v38->__r_.__value_.__s.__data_[v40] = 0;
              v33 = (char *)(v4 - 176);
              v34 = *(char *)(v4 - 153);
              if ((v34 & 0x80000000) == 0)
              {
LABEL_72:
                v35 = v34;
                v36 = v34 == 0;
                v37 = v33;
                goto LABEL_83;
              }
            }
            else
            {
              *((_BYTE *)&v28->__r_.__value_.__s + 23) = v40 & 0x7F;
              v38->__r_.__value_.__s.__data_[v40] = 0;
              v33 = (char *)(v4 - 176);
              v34 = *(char *)(v4 - 153);
              if ((v34 & 0x80000000) == 0)
                goto LABEL_72;
            }
          }
          v35 = *(_QWORD *)(v4 - 168);
          if ((v35 & 0x8000000000000000) != 0)
            goto LABEL_749;
          v37 = *(char **)v33;
          v36 = v35 == 0;
          if (v35)
          {
            if (!v37)
              goto LABEL_749;
          }
LABEL_83:
          v41 = SHIBYTE(v29->__r_.__value_.__r.__words[2]);
          if (v41 >= 0)
            v42 = 22;
          else
            v42 = (v29->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v41 >= 0)
            v43 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
          else
            v43 = v29->__r_.__value_.__l.__size_;
          if (v42 - v43 >= v35)
          {
            if (!v36)
            {
              if (v41 >= 0)
                v44 = v29;
              else
                v44 = (std::string *)v29->__r_.__value_.__r.__words[0];
              v45 = (char *)v44 + v43;
              if ((char *)v44 + v43 <= v37 && &v45[v35] > v37)
                goto LABEL_749;
              memmove(v45, v37, v35);
              v46 = v43 + v35;
              if (SHIBYTE(v29->__r_.__value_.__r.__words[2]) < 0)
                v29->__r_.__value_.__l.__size_ = v46;
              else
                *((_BYTE *)&v29->__r_.__value_.__s + 23) = v46 & 0x7F;
              v44->__r_.__value_.__s.__data_[v46] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(v29, v42, v43 + v35 - v42, v43, v43, 0, v35, v37);
          }
          v47 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
          v48 = (char)v47;
          if ((v47 & 0x80u) == 0)
            v49 = 22;
          else
            v49 = (v29->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v47 & 0x80u) != 0)
            v47 = v29->__r_.__value_.__l.__size_;
          if (v49 == v47)
          {
            std::string::__grow_by_and_replace(v29, v49, 1uLL, v49, v49, 0, 1uLL, " ");
          }
          else
          {
            if (v48 >= 0)
              v50 = v29;
            else
              v50 = (std::string *)v29->__r_.__value_.__r.__words[0];
            v51 = (char *)v50 + v47;
            if ((char *)v50 + v47 <= " " && v51 + 1 > " ")
              goto LABEL_749;
            *v51 = 32;
            v52 = v47 + 1;
            if (SHIBYTE(v29->__r_.__value_.__r.__words[2]) < 0)
              v29->__r_.__value_.__l.__size_ = v52;
            else
              *((_BYTE *)&v29->__r_.__value_.__s + 23) = v52 & 0x7F;
            v50->__r_.__value_.__s.__data_[v52] = 0;
          }
          v53 = rtc::StringBuilder::operator<<(v29, *(_DWORD *)(v4 - 56));
          v54 = v53;
          v55 = HIBYTE(v53->__r_.__value_.__r.__words[2]);
          v56 = (char)v55;
          if ((v55 & 0x80u) == 0)
            v57 = 22;
          else
            v57 = (v53->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v55 & 0x80u) != 0)
            v55 = v53->__r_.__value_.__l.__size_;
          if (v57 == v55)
          {
            std::string::__grow_by_and_replace(v53, v57, 1uLL, v57, v57, 0, 1uLL, " ");
            if (*(_DWORD *)(v4 - 96))
              goto LABEL_126;
          }
          else
          {
            if (v56 >= 0)
              v62 = v53;
            else
              v62 = (std::string *)v53->__r_.__value_.__r.__words[0];
            v63 = (char *)v62 + v55;
            if ((char *)v62 + v55 <= " " && v63 + 1 > " ")
              goto LABEL_749;
            *v63 = 32;
            v64 = v55 + 1;
            if (SHIBYTE(v53->__r_.__value_.__r.__words[2]) < 0)
            {
              v53->__r_.__value_.__l.__size_ = v64;
              v62->__r_.__value_.__s.__data_[v64] = 0;
              if (*(_DWORD *)(v4 - 96))
              {
LABEL_126:
                rtc::IPAddress::ToString((rtc::IPAddress *)(v4 - 104), &__p_new_stuff);
                v58 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_127;
                goto LABEL_137;
              }
            }
            else
            {
              *((_BYTE *)&v53->__r_.__value_.__s + 23) = v64 & 0x7F;
              v62->__r_.__value_.__s.__data_[v64] = 0;
              if (*(_DWORD *)(v4 - 96))
                goto LABEL_126;
            }
          }
          if (*(char *)(v4 - 105) < 0)
          {
            std::string::__init_copy_ctor_external(&__p_new_stuff, *(const std::string::value_type **)(v4 - 128), *(_QWORD *)(v4 - 120));
            v58 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_127:
              v59 = v58;
              v60 = v58 == 0;
              p_p_new_stuff = &__p_new_stuff;
              goto LABEL_140;
            }
          }
          else
          {
            __p_new_stuff = *(std::string *)(v4 - 128);
            v58 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_127;
          }
LABEL_137:
          v59 = __p_new_stuff.__r_.__value_.__l.__size_;
          if ((__p_new_stuff.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_749;
          p_p_new_stuff = (std::string *)__p_new_stuff.__r_.__value_.__r.__words[0];
          v60 = __p_new_stuff.__r_.__value_.__l.__size_ == 0;
          if (__p_new_stuff.__r_.__value_.__l.__size_)
          {
            if (!__p_new_stuff.__r_.__value_.__r.__words[0])
              goto LABEL_749;
          }
LABEL_140:
          v65 = SHIBYTE(v54->__r_.__value_.__r.__words[2]);
          if (v65 >= 0)
            v66 = 22;
          else
            v66 = (v54->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v65 >= 0)
            v67 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
          else
            v67 = v54->__r_.__value_.__l.__size_;
          if (v66 - v67 >= v59)
          {
            if (!v60)
            {
              if (v65 >= 0)
                v68 = v54;
              else
                v68 = (std::string *)v54->__r_.__value_.__r.__words[0];
              v69 = (char *)v68 + v67;
              if ((std::string *)((char *)v68 + v67) <= p_p_new_stuff && &v69[v59] > (char *)p_p_new_stuff)
                goto LABEL_749;
              memmove(v69, p_p_new_stuff, v59);
              v70 = v67 + v59;
              if (SHIBYTE(v54->__r_.__value_.__r.__words[2]) < 0)
                v54->__r_.__value_.__l.__size_ = v70;
              else
                *((_BYTE *)&v54->__r_.__value_.__s + 23) = v70 & 0x7F;
              v68->__r_.__value_.__s.__data_[v70] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(v54, v66, v67 + v59 - v66, v67, v67, 0, v59, (const std::string::value_type *)p_p_new_stuff);
          }
          v71 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
          v72 = (char)v71;
          if ((v71 & 0x80u) == 0)
            v73 = 22;
          else
            v73 = (v54->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v71 & 0x80u) != 0)
            v71 = v54->__r_.__value_.__l.__size_;
          if (v73 == v71)
          {
            std::string::__grow_by_and_replace(v54, v73, 1uLL, v73, v73, 0, 1uLL, " ");
            std::to_string(&__src, *(unsigned __int16 *)(v4 - 72));
            v74 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_169;
          }
          else
          {
            if (v72 >= 0)
              v78 = v54;
            else
              v78 = (std::string *)v54->__r_.__value_.__r.__words[0];
            v79 = (char *)v78 + v71;
            if ((char *)v78 + v71 <= " " && v79 + 1 > " ")
              goto LABEL_749;
            *v79 = 32;
            v80 = v71 + 1;
            if (SHIBYTE(v54->__r_.__value_.__r.__words[2]) < 0)
            {
              v54->__r_.__value_.__l.__size_ = v80;
              v78->__r_.__value_.__s.__data_[v80] = 0;
              std::to_string(&__src, *(unsigned __int16 *)(v4 - 72));
              v74 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_169:
                v75 = v74;
                v76 = v74 == 0;
                p_src = &__src;
                goto LABEL_180;
              }
            }
            else
            {
              *((_BYTE *)&v54->__r_.__value_.__s + 23) = v80 & 0x7F;
              v78->__r_.__value_.__s.__data_[v80] = 0;
              std::to_string(&__src, *(unsigned __int16 *)(v4 - 72));
              v74 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_169;
            }
          }
          v75 = __src.__r_.__value_.__l.__size_;
          if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_749;
          p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
          v76 = __src.__r_.__value_.__l.__size_ == 0;
          if (__src.__r_.__value_.__l.__size_)
          {
            if (!__src.__r_.__value_.__r.__words[0])
              goto LABEL_749;
          }
LABEL_180:
          v81 = SHIBYTE(v54->__r_.__value_.__r.__words[2]);
          if (v81 >= 0)
            v82 = 22;
          else
            v82 = (v54->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v81 >= 0)
            v83 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
          else
            v83 = v54->__r_.__value_.__l.__size_;
          if (v82 - v83 >= v75)
          {
            if (!v76)
            {
              if (v81 >= 0)
                v84 = v54;
              else
                v84 = (std::string *)v54->__r_.__value_.__r.__words[0];
              v85 = (char *)v84 + v83;
              if ((std::string *)((char *)v84 + v83) <= p_src && &v85[v75] > (char *)p_src)
                goto LABEL_749;
              memmove(v85, p_src, v75);
              v86 = v83 + v75;
              if (SHIBYTE(v54->__r_.__value_.__r.__words[2]) < 0)
                v54->__r_.__value_.__l.__size_ = v86;
              else
                *((_BYTE *)&v54->__r_.__value_.__s + 23) = v86 & 0x7F;
              v84->__r_.__value_.__s.__data_[v86] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(v54, v82, v83 + v75 - v82, v83, v83, 0, v75, (const std::string::value_type *)p_src);
          }
          v87 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
          v88 = (char)v87;
          if ((v87 & 0x80u) == 0)
            v89 = 22;
          else
            v89 = (v54->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v87 & 0x80u) != 0)
            v87 = v54->__r_.__value_.__l.__size_;
          if (v89 == v87)
          {
            std::string::__grow_by_and_replace(v54, v89, 1uLL, v89, v89, 0, 1uLL, " ");
          }
          else
          {
            if (v88 >= 0)
              v90 = v54;
            else
              v90 = (std::string *)v54->__r_.__value_.__r.__words[0];
            v91 = (char *)v90 + v87;
            if ((char *)v90 + v87 <= " " && v91 + 1 > " ")
              goto LABEL_749;
            *v91 = 32;
            v92 = v87 + 1;
            if (SHIBYTE(v54->__r_.__value_.__r.__words[2]) < 0)
              v54->__r_.__value_.__l.__size_ = v92;
            else
              *((_BYTE *)&v54->__r_.__value_.__s + 23) = v92 & 0x7F;
            v90->__r_.__value_.__s.__data_[v92] = 0;
          }
          v93 = SHIBYTE(v54->__r_.__value_.__r.__words[2]);
          if (v93 >= 0)
            v94 = 22;
          else
            v94 = (v54->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v93 >= 0)
            v95 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
          else
            v95 = v54->__r_.__value_.__l.__size_;
          if (v94 - v95 >= 3)
          {
            if (v93 >= 0)
              v96 = v54;
            else
              v96 = (std::string *)v54->__r_.__value_.__r.__words[0];
            v97 = (std::string::size_type)v96 + v95;
            if ((char *)v96 + v95 <= "typ" && v97 + 3 > (unint64_t)"typ")
              goto LABEL_749;
            *(_BYTE *)(v97 + 2) = 112;
            *(_WORD *)v97 = 31092;
            v98 = v95 + 3;
            if (SHIBYTE(v54->__r_.__value_.__r.__words[2]) < 0)
              v54->__r_.__value_.__l.__size_ = v98;
            else
              *((_BYTE *)&v54->__r_.__value_.__s + 23) = v98 & 0x7F;
            v96->__r_.__value_.__s.__data_[v98] = 0;
          }
          else
          {
            std::string::__grow_by_and_replace(v54, v94, v95 - v94 + 3, v95, v95, 0, 3uLL, "typ");
          }
          v99 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
          v100 = (char)v99;
          if ((v99 & 0x80u) == 0)
            v101 = 22;
          else
            v101 = (v54->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v99 & 0x80u) != 0)
            v99 = v54->__r_.__value_.__l.__size_;
          if (v101 == v99)
          {
            std::string::__grow_by_and_replace(v54, v101, 1uLL, v101, v101, 0, 1uLL, " ");
            v102 = HIBYTE(v269);
            if ((SHIBYTE(v269) & 0x80000000) == 0)
              goto LABEL_240;
          }
          else
          {
            if (v100 >= 0)
              v106 = v54;
            else
              v106 = (std::string *)v54->__r_.__value_.__r.__words[0];
            v107 = (char *)v106 + v99;
            if ((char *)v106 + v99 <= " " && v107 + 1 > " ")
              goto LABEL_749;
            *v107 = 32;
            v108 = v99 + 1;
            if (SHIBYTE(v54->__r_.__value_.__r.__words[2]) < 0)
            {
              v54->__r_.__value_.__l.__size_ = v108;
              v106->__r_.__value_.__s.__data_[v108] = 0;
              v102 = HIBYTE(v269);
              if ((SHIBYTE(v269) & 0x80000000) == 0)
              {
LABEL_240:
                v103 = v102;
                v104 = v102 == 0;
                v105 = (char *)&v267;
                goto LABEL_251;
              }
            }
            else
            {
              *((_BYTE *)&v54->__r_.__value_.__s + 23) = v108 & 0x7F;
              v106->__r_.__value_.__s.__data_[v108] = 0;
              v102 = HIBYTE(v269);
              if ((SHIBYTE(v269) & 0x80000000) == 0)
                goto LABEL_240;
            }
          }
          v103 = v268;
          if ((v268 & 0x8000000000000000) != 0)
            goto LABEL_749;
          v105 = v267;
          v104 = v268 == 0;
          if (v268)
          {
            if (!v267)
              goto LABEL_749;
          }
LABEL_251:
          v109 = SHIBYTE(v54->__r_.__value_.__r.__words[2]);
          if (v109 >= 0)
            v110 = 22;
          else
            v110 = (v54->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v109 >= 0)
            v111 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
          else
            v111 = v54->__r_.__value_.__l.__size_;
          if (v110 - v111 >= v103)
          {
            if (!v104)
            {
              if (v109 >= 0)
                v112 = v54;
              else
                v112 = (std::string *)v54->__r_.__value_.__r.__words[0];
              v113 = (char *)v112 + v111;
              if ((char *)v112 + v111 <= v105 && &v113[v103] > v105)
                goto LABEL_749;
              memmove(v113, v105, v103);
              v114 = v111 + v103;
              if (SHIBYTE(v54->__r_.__value_.__r.__words[2]) < 0)
                v54->__r_.__value_.__l.__size_ = v114;
              else
                *((_BYTE *)&v54->__r_.__value_.__s + 23) = v114 & 0x7F;
              v112->__r_.__value_.__s.__data_[v114] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(v54, v110, v111 + v103 - v110, v111, v111, 0, v103, v105);
          }
          v115 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
          v116 = (char)v115;
          if ((v115 & 0x80u) == 0)
            v117 = 22;
          else
            v117 = (v54->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v115 & 0x80u) != 0)
            v115 = v54->__r_.__value_.__l.__size_;
          if (v117 == v115)
          {
            std::string::__grow_by_and_replace(v54, v117, 1uLL, v117, v117, 0, 1uLL, " ");
            if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_278;
          }
          else
          {
            if (v116 >= 0)
              v119 = v54;
            else
              v119 = (std::string *)v54->__r_.__value_.__r.__words[0];
            v120 = (char *)v119 + v115;
            if ((char *)v119 + v115 <= " " && v120 + 1 > " ")
              goto LABEL_749;
            *v120 = 32;
            v121 = v115 + 1;
            if (SHIBYTE(v54->__r_.__value_.__r.__words[2]) < 0)
            {
              v54->__r_.__value_.__l.__size_ = v121;
              v119->__r_.__value_.__s.__data_[v121] = 0;
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_278:
                if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_279;
                goto LABEL_292;
              }
            }
            else
            {
              *((_BYTE *)&v54->__r_.__value_.__s + 23) = v121 & 0x7F;
              v119->__r_.__value_.__s.__data_[v121] = 0;
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_278;
            }
          }
          operator delete(__src.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_279:
            v118 = *(char *)(v4 + 95);
            if ((v118 & 0x80000000) == 0)
              goto LABEL_280;
            goto LABEL_293;
          }
LABEL_292:
          operator delete(__p_new_stuff.__r_.__value_.__l.__data_);
          v118 = *(char *)(v4 + 95);
          if ((v118 & 0x80000000) == 0)
          {
LABEL_280:
            if ((_BYTE)v118)
              goto LABEL_296;
            goto LABEL_294;
          }
LABEL_293:
          if (*(_QWORD *)(v4 + 80))
            goto LABEL_296;
LABEL_294:
          if (!*(_DWORD *)(v4 + 104) && !*(_WORD *)(v4 + 128))
          {
LABEL_430:
            LODWORD(v167) = *(char *)(v4 - 153);
            if ((v167 & 0x80000000) == 0)
              goto LABEL_431;
            goto LABEL_443;
          }
LABEL_296:
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v122 = 22;
          else
            v122 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v123 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            v123 = v270.__r_.__value_.__l.__size_;
          if (v122 - v123 >= 5)
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v124 = &v270;
            else
              v124 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v125 = (char *)v124 + v123;
            if ((char *)v124 + v123 <= "raddr" && v125 + 5 > "raddr")
              goto LABEL_749;
            v125[4] = 114;
            *(_DWORD *)v125 = 1684300146;
            v126 = v123 + 5;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v123 + 5;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v126 & 0x7F;
            v124->__r_.__value_.__s.__data_[v126] = 0;
          }
          else
          {
            std::string::__grow_by_and_replace(&v270, v122, v123 - v122 + 5, v123, v123, 0, 5uLL, "raddr");
          }
          v127 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v128 = 22;
          else
            v128 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v127 = v270.__r_.__value_.__l.__size_;
          if (v128 == v127)
          {
            std::string::__grow_by_and_replace(&v270, v128, 1uLL, v128, v128, 0, 1uLL, " ");
            rtc::IPAddress::ToString((rtc::IPAddress *)(v4 + 96), &__p_new_stuff);
            v129 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_320;
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v133 = &v270;
            else
              v133 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v134 = (char *)v133 + v127;
            if ((char *)v133 + v127 <= " " && v134 + 1 > " ")
              goto LABEL_749;
            *v134 = 32;
            v135 = v127 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
            {
              v270.__r_.__value_.__l.__size_ = v135;
              v133->__r_.__value_.__s.__data_[v135] = 0;
              rtc::IPAddress::ToString((rtc::IPAddress *)(v4 + 96), &__p_new_stuff);
              v129 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_320:
                v130 = v129;
                v131 = v129 == 0;
                v132 = &__p_new_stuff;
                goto LABEL_331;
              }
            }
            else
            {
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v135 & 0x7F;
              v133->__r_.__value_.__s.__data_[v135] = 0;
              rtc::IPAddress::ToString((rtc::IPAddress *)(v4 + 96), &__p_new_stuff);
              v129 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_320;
            }
          }
          v130 = __p_new_stuff.__r_.__value_.__l.__size_;
          if ((__p_new_stuff.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_749;
          v132 = (std::string *)__p_new_stuff.__r_.__value_.__r.__words[0];
          v131 = __p_new_stuff.__r_.__value_.__l.__size_ == 0;
          if (__p_new_stuff.__r_.__value_.__l.__size_)
          {
            if (!__p_new_stuff.__r_.__value_.__r.__words[0])
              goto LABEL_749;
          }
LABEL_331:
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v136 = 22;
          else
            v136 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v137 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            v137 = v270.__r_.__value_.__l.__size_;
          if (v136 - v137 >= v130)
          {
            if (!v131)
            {
              if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v138 = &v270;
              else
                v138 = (std::string *)v270.__r_.__value_.__r.__words[0];
              v139 = (char *)v138 + v137;
              if ((std::string *)((char *)v138 + v137) <= v132 && &v139[v130] > (char *)v132)
                goto LABEL_749;
              memmove(v139, v132, v130);
              v140 = v137 + v130;
              if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
                v270.__r_.__value_.__l.__size_ = v137 + v130;
              else
                *((_BYTE *)&v270.__r_.__value_.__s + 23) = v140 & 0x7F;
              v138->__r_.__value_.__s.__data_[v140] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(&v270, v136, v137 + v130 - v136, v137, v137, 0, v130, (const std::string::value_type *)v132);
          }
          v141 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v142 = 22;
          else
            v142 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v141 = v270.__r_.__value_.__l.__size_;
          if (v142 == v141)
          {
            std::string::__grow_by_and_replace(&v270, v142, 1uLL, v142, v142, 0, 1uLL, " ");
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v143 = &v270;
            else
              v143 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v144 = (char *)v143 + v141;
            if ((char *)v143 + v141 <= " " && v144 + 1 > " ")
              goto LABEL_749;
            *v144 = 32;
            v145 = v141 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v145;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v145 & 0x7F;
            v143->__r_.__value_.__s.__data_[v145] = 0;
          }
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v146 = 22;
          else
            v146 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v147 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            v147 = v270.__r_.__value_.__l.__size_;
          if (v146 - v147 >= 5)
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v148 = &v270;
            else
              v148 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v149 = (char *)v148 + v147;
            if ((char *)v148 + v147 <= "rport" && v149 + 5 > "rport")
              goto LABEL_749;
            v149[4] = 116;
            *(_DWORD *)v149 = 1919905906;
            v150 = v147 + 5;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v147 + 5;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v150 & 0x7F;
            v148->__r_.__value_.__s.__data_[v150] = 0;
          }
          else
          {
            std::string::__grow_by_and_replace(&v270, v146, v147 - v146 + 5, v147, v147, 0, 5uLL, "rport");
          }
          v151 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v152 = 22;
          else
            v152 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v151 = v270.__r_.__value_.__l.__size_;
          if (v152 == v151)
          {
            std::string::__grow_by_and_replace(&v270, v152, 1uLL, v152, v152, 0, 1uLL, " ");
            std::to_string(&__src, *(unsigned __int16 *)(v4 + 128));
            v153 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_391;
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v157 = &v270;
            else
              v157 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v158 = (char *)v157 + v151;
            if ((char *)v157 + v151 <= " " && v158 + 1 > " ")
              goto LABEL_749;
            *v158 = 32;
            v159 = v151 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
            {
              v270.__r_.__value_.__l.__size_ = v159;
              v157->__r_.__value_.__s.__data_[v159] = 0;
              std::to_string(&__src, *(unsigned __int16 *)(v4 + 128));
              v153 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_391:
                v154 = v153;
                v155 = v153 == 0;
                v156 = &__src;
                goto LABEL_402;
              }
            }
            else
            {
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v159 & 0x7F;
              v157->__r_.__value_.__s.__data_[v159] = 0;
              std::to_string(&__src, *(unsigned __int16 *)(v4 + 128));
              v153 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_391;
            }
          }
          v154 = __src.__r_.__value_.__l.__size_;
          if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_749;
          v156 = (std::string *)__src.__r_.__value_.__r.__words[0];
          v155 = __src.__r_.__value_.__l.__size_ == 0;
          if (__src.__r_.__value_.__l.__size_)
          {
            if (!__src.__r_.__value_.__r.__words[0])
              goto LABEL_749;
          }
LABEL_402:
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v160 = 22;
          else
            v160 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v161 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            v161 = v270.__r_.__value_.__l.__size_;
          if (v160 - v161 >= v154)
          {
            if (!v155)
            {
              if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v162 = &v270;
              else
                v162 = (std::string *)v270.__r_.__value_.__r.__words[0];
              v163 = (char *)v162 + v161;
              if ((std::string *)((char *)v162 + v161) <= v156 && &v163[v154] > (char *)v156)
                goto LABEL_749;
              memmove(v163, v156, v154);
              v164 = v161 + v154;
              if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
                v270.__r_.__value_.__l.__size_ = v161 + v154;
              else
                *((_BYTE *)&v270.__r_.__value_.__s + 23) = v164 & 0x7F;
              v162->__r_.__value_.__s.__data_[v164] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(&v270, v160, v161 + v154 - v160, v161, v161, 0, v154, (const std::string::value_type *)v156);
          }
          v165 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v166 = 22;
          else
            v166 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v165 = v270.__r_.__value_.__l.__size_;
          if (v166 == v165)
          {
            std::string::__grow_by_and_replace(&v270, v166, 1uLL, v166, v166, 0, 1uLL, " ");
            if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_429;
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v168 = &v270;
            else
              v168 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v169 = (char *)v168 + v165;
            if ((char *)v168 + v165 <= " " && v169 + 1 > " ")
              goto LABEL_749;
            *v169 = 32;
            v170 = v165 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
            {
              v270.__r_.__value_.__l.__size_ = v170;
              v168->__r_.__value_.__s.__data_[v170] = 0;
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_429:
                if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_430;
                goto LABEL_442;
              }
            }
            else
            {
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v170 & 0x7F;
              v168->__r_.__value_.__s.__data_[v170] = 0;
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_429;
            }
          }
          operator delete(__src.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_430;
LABEL_442:
          operator delete(__p_new_stuff.__r_.__value_.__l.__data_);
          LODWORD(v167) = *(char *)(v4 - 153);
          if ((v167 & 0x80000000) == 0)
          {
LABEL_431:
            v167 = v167;
            goto LABEL_446;
          }
LABEL_443:
          v167 = *(_QWORD *)(v4 - 168);
          if (v167 < 0)
            goto LABEL_749;
          v33 = *(char **)v33;
          if (v167)
          {
            if (!v33)
              goto LABEL_749;
          }
LABEL_446:
          if (v167 != 3)
            goto LABEL_451;
          if (*(unsigned __int16 *)v33 != (unsigned __int16)cricket::TCP_PROTOCOL_NAME || v33[2] != 112)
            goto LABEL_451;
          if (*(char *)(v4 + 167) < 0)
          {
            if (!*(_QWORD *)(v4 + 152))
              goto LABEL_451;
          }
          else if (!*(_BYTE *)(v4 + 167))
          {
            goto LABEL_451;
          }
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v187 = 22;
          else
            v187 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v188 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            v188 = v270.__r_.__value_.__l.__size_;
          if (v187 - v188 >= 7)
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v194 = &v270;
            else
              v194 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v195 = (_DWORD *)((char *)v194 + v188);
            if ((char *)v194 + v188 <= "tcptype" && (char *)v195 + 7 > "tcptype")
              goto LABEL_749;
            *(_DWORD *)((char *)v195 + 3) = 1701869940;
            *v195 = 1953522548;
            v196 = v188 + 7;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v188 + 7;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v196 & 0x7F;
            v194->__r_.__value_.__s.__data_[v196] = 0;
          }
          else
          {
            std::string::__grow_by_and_replace(&v270, v187, v188 - v187 + 7, v188, v188, 0, 7uLL, "tcptype");
          }
          v243 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v244 = 22;
          else
            v244 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v243 = v270.__r_.__value_.__l.__size_;
          if (v244 == v243)
          {
            std::string::__grow_by_and_replace(&v270, v244, 1uLL, v244, v244, 0, 1uLL, " ");
            v245 = (char *)(v4 + 144);
            v246 = *(char *)(v4 + 167);
            if ((v246 & 0x80000000) == 0)
              goto LABEL_699;
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v249 = &v270;
            else
              v249 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v250 = (char *)v249 + v243;
            if ((char *)v249 + v243 <= " " && v250 + 1 > " ")
              goto LABEL_749;
            *v250 = 32;
            v251 = v243 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
            {
              v270.__r_.__value_.__l.__size_ = v251;
              v249->__r_.__value_.__s.__data_[v251] = 0;
              v245 = (char *)(v4 + 144);
              v246 = *(char *)(v4 + 167);
              if ((v246 & 0x80000000) == 0)
              {
LABEL_699:
                v247 = v246;
                v248 = v246 == 0;
                goto LABEL_710;
              }
            }
            else
            {
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v251 & 0x7F;
              v249->__r_.__value_.__s.__data_[v251] = 0;
              v245 = (char *)(v4 + 144);
              v246 = *(char *)(v4 + 167);
              if ((v246 & 0x80000000) == 0)
                goto LABEL_699;
            }
          }
          v247 = *(_QWORD *)(v4 + 152);
          if ((v247 & 0x8000000000000000) != 0)
            goto LABEL_749;
          v245 = *(char **)v245;
          v248 = v247 == 0;
          if (v247)
          {
            if (!v245)
              goto LABEL_749;
          }
LABEL_710:
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v252 = 22;
          else
            v252 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v253 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            v253 = v270.__r_.__value_.__l.__size_;
          if (v252 - v253 >= v247)
          {
            if (!v248)
            {
              if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v254 = &v270;
              else
                v254 = (std::string *)v270.__r_.__value_.__r.__words[0];
              v255 = (char *)v254 + v253;
              if ((char *)v254 + v253 <= v245 && &v255[v247] > v245)
                goto LABEL_749;
              memmove(v255, v245, v247);
              v256 = v253 + v247;
              if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
                v270.__r_.__value_.__l.__size_ = v253 + v247;
              else
                *((_BYTE *)&v270.__r_.__value_.__s + 23) = v256 & 0x7F;
              v254->__r_.__value_.__s.__data_[v256] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(&v270, v252, v253 + v247 - v252, v253, v253, 0, v247, v245);
          }
          v257 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v258 = 22;
          else
            v258 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v257 = v270.__r_.__value_.__l.__size_;
          if (v258 == v257)
          {
            std::string::__grow_by_and_replace(&v270, v258, 1uLL, v258, v258, 0, 1uLL, " ");
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v259 = &v270;
            else
              v259 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v260 = (char *)v259 + v257;
            if ((char *)v259 + v257 <= " " && v260 + 1 > " ")
              goto LABEL_749;
            *v260 = 32;
            v261 = v257 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v261;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v261 & 0x7F;
            v259->__r_.__value_.__s.__data_[v261] = 0;
          }
LABEL_451:
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v172 = 22;
          else
            v172 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v173 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            v173 = v270.__r_.__value_.__l.__size_;
          if (v172 - v173 >= 0xA)
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v174 = &v270;
            else
              v174 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v175 = (char *)v174 + v173;
            if ((char *)v174 + v173 <= "generation" && v175 + 10 > "generation")
              goto LABEL_749;
            *((_WORD *)v175 + 4) = 28271;
            *(_QWORD *)v175 = *(_QWORD *)"generation";
            v176 = v173 + 10;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v173 + 10;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v176 & 0x7F;
            v174->__r_.__value_.__s.__data_[v176] = 0;
          }
          else
          {
            std::string::__grow_by_and_replace(&v270, v172, v173 - v172 + 10, v173, v173, 0, 0xAuLL, "generation");
          }
          v177 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v178 = 22;
          else
            v178 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v177 = v270.__r_.__value_.__l.__size_;
          if (v178 == v177)
          {
            std::string::__grow_by_and_replace(&v270, v178, 1uLL, v178, v178, 0, 1uLL, " ");
            rtc::StringBuilder::operator<<(&v270, *(_DWORD *)(v4 + 40));
            if (!a3)
              goto LABEL_578;
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v179 = &v270;
            else
              v179 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v180 = (char *)v179 + v177;
            if ((char *)v179 + v177 <= " " && v180 + 1 > " ")
              goto LABEL_749;
            *v180 = 32;
            v181 = v177 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
            {
              v270.__r_.__value_.__l.__size_ = v181;
              v179->__r_.__value_.__s.__data_[v181] = 0;
              rtc::StringBuilder::operator<<(&v270, *(_DWORD *)(v4 + 40));
              if (!a3)
                goto LABEL_578;
            }
            else
            {
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v181 & 0x7F;
              v179->__r_.__value_.__s.__data_[v181] = 0;
              rtc::StringBuilder::operator<<(&v270, *(_DWORD *)(v4 + 40));
              if (!a3)
                goto LABEL_578;
            }
          }
          if (*(char *)(v4 - 25) < 0)
          {
            if (!*(_QWORD *)(v4 - 40))
              goto LABEL_578;
          }
          else if (!*(_BYTE *)(v4 - 25))
          {
            goto LABEL_578;
          }
          v182 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v183 = 22;
          else
            v183 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v182 = v270.__r_.__value_.__l.__size_;
          if (v183 == v182)
          {
            std::string::__grow_by_and_replace(&v270, v183, 1uLL, v183, v183, 0, 1uLL, " ");
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v184 = &v270;
            else
              v184 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v185 = (char *)v184 + v182;
            if ((char *)v184 + v182 <= " " && v185 + 1 > " ")
              goto LABEL_749;
            *v185 = 32;
            v186 = v182 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v186;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v186 & 0x7F;
            v184->__r_.__value_.__s.__data_[v186] = 0;
          }
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v189 = 22;
          else
            v189 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v190 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            v190 = v270.__r_.__value_.__l.__size_;
          if (v189 - v190 >= 5)
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v191 = &v270;
            else
              v191 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v192 = (char *)v191 + v190;
            if ((char *)v191 + v190 <= "ufrag" && v192 + 5 > "ufrag")
              goto LABEL_749;
            v192[4] = 103;
            *(_DWORD *)v192 = 1634887285;
            v193 = v190 + 5;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v190 + 5;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v193 & 0x7F;
            v191->__r_.__value_.__s.__data_[v193] = 0;
          }
          else
          {
            std::string::__grow_by_and_replace(&v270, v189, v190 - v189 + 5, v190, v190, 0, 5uLL, "ufrag");
          }
          v197 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v198 = 22;
          else
            v198 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v197 = v270.__r_.__value_.__l.__size_;
          if (v198 == v197)
          {
            std::string::__grow_by_and_replace(&v270, v198, 1uLL, v198, v198, 0, 1uLL, " ");
            v199 = (const std::string::value_type *)(v4 - 48);
            v200 = *(char *)(v4 - 25);
            if ((v200 & 0x80000000) == 0)
              goto LABEL_548;
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v203 = &v270;
            else
              v203 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v204 = (char *)v203 + v197;
            if ((char *)v203 + v197 <= " " && v204 + 1 > " ")
              goto LABEL_749;
            *v204 = 32;
            v205 = v197 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
            {
              v270.__r_.__value_.__l.__size_ = v205;
              v203->__r_.__value_.__s.__data_[v205] = 0;
              v199 = (const std::string::value_type *)(v4 - 48);
              v200 = *(char *)(v4 - 25);
              if ((v200 & 0x80000000) == 0)
              {
LABEL_548:
                v201 = v200;
                v202 = v200 == 0;
                goto LABEL_559;
              }
            }
            else
            {
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v205 & 0x7F;
              v203->__r_.__value_.__s.__data_[v205] = 0;
              v199 = (const std::string::value_type *)(v4 - 48);
              v200 = *(char *)(v4 - 25);
              if ((v200 & 0x80000000) == 0)
                goto LABEL_548;
            }
          }
          v201 = *(_QWORD *)(v4 - 40);
          if ((v201 & 0x8000000000000000) != 0)
            goto LABEL_749;
          v199 = *(const std::string::value_type **)v199;
          v202 = v201 == 0;
          if (v201)
          {
            if (!v199)
              goto LABEL_749;
          }
LABEL_559:
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v206 = 22;
          else
            v206 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v207 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            v207 = v270.__r_.__value_.__l.__size_;
          if (v206 - v207 < v201)
          {
            std::string::__grow_by_and_replace(&v270, v206, v207 + v201 - v206, v207, v207, 0, v201, v199);
            v208 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
            if (!*(_WORD *)(v4 + 192))
              goto LABEL_567;
            goto LABEL_579;
          }
          if (v202)
            goto LABEL_578;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v210 = &v270;
          else
            v210 = (std::string *)v270.__r_.__value_.__r.__words[0];
          v211 = (char *)v210 + v207;
          if ((char *)v210 + v207 <= v199 && &v211[v201] > v199)
            goto LABEL_749;
          memmove(v211, v199, v201);
          v212 = v207 + v201;
          if ((SHIBYTE(v270.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            *((_BYTE *)&v270.__r_.__value_.__s + 23) = v212 & 0x7F;
            v210->__r_.__value_.__s.__data_[v212] = 0;
LABEL_578:
            v208 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
            if (!*(_WORD *)(v4 + 192))
              goto LABEL_567;
            goto LABEL_579;
          }
          v270.__r_.__value_.__l.__size_ = v207 + v201;
          v210->__r_.__value_.__s.__data_[v212] = 0;
          v208 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if (!*(_WORD *)(v4 + 192))
          {
LABEL_567:
            if (!*(_WORD *)(v4 + 194))
              goto LABEL_568;
            goto LABEL_630;
          }
LABEL_579:
          if ((v208 & 0x80u) == 0)
            v213 = 22;
          else
            v213 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v208 & 0x80u) == 0)
            v214 = v208;
          else
            v214 = v270.__r_.__value_.__l.__size_;
          if (v213 == v214)
          {
            std::string::__grow_by_and_replace(&v270, v213, 1uLL, v213, v213, 0, 1uLL, " ");
          }
          else
          {
            if ((v208 & 0x80u) == 0)
              v215 = &v270;
            else
              v215 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v216 = (char *)v215 + v214;
            if ((char *)v215 + v214 <= " " && v216 + 1 > " ")
              goto LABEL_749;
            *v216 = 32;
            v217 = v214 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v217;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v217 & 0x7F;
            v215->__r_.__value_.__s.__data_[v217] = 0;
          }
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v218 = 22;
          else
            v218 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v219 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            v219 = v270.__r_.__value_.__l.__size_;
          if (v218 - v219 >= 0xA)
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v220 = &v270;
            else
              v220 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v221 = (char *)v220 + v219;
            if ((char *)v220 + v219 <= "network-id" && v221 + 10 > "network-id")
              goto LABEL_749;
            *((_WORD *)v221 + 4) = 25705;
            *(_QWORD *)v221 = *(_QWORD *)"network-id";
            v222 = v219 + 10;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v219 + 10;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v222 & 0x7F;
            v220->__r_.__value_.__s.__data_[v222] = 0;
          }
          else
          {
            std::string::__grow_by_and_replace(&v270, v218, v219 - v218 + 10, v219, v219, 0, 0xAuLL, "network-id");
          }
          v223 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v224 = 22;
          else
            v224 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v223 = v270.__r_.__value_.__l.__size_;
          if (v224 == v223)
          {
            std::string::__grow_by_and_replace(&v270, v224, 1uLL, v224, v224, 0, 1uLL, " ");
            rtc::StringBuilder::operator<<(&v270, *(unsigned __int16 *)(v4 + 192));
            v208 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
            if (!*(_WORD *)(v4 + 194))
              goto LABEL_568;
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v225 = &v270;
            else
              v225 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v226 = (char *)v225 + v223;
            if ((char *)v225 + v223 <= " " && v226 + 1 > " ")
              goto LABEL_749;
            *v226 = 32;
            v227 = v223 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v227;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v227 & 0x7F;
            v225->__r_.__value_.__s.__data_[v227] = 0;
            rtc::StringBuilder::operator<<(&v270, *(unsigned __int16 *)(v4 + 192));
            v208 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
            if (!*(_WORD *)(v4 + 194))
            {
LABEL_568:
              if ((v208 & 0x80) == 0)
                goto LABEL_569;
              goto LABEL_671;
            }
          }
LABEL_630:
          if ((v208 & 0x80u) == 0)
            v228 = 22;
          else
            v228 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v208 & 0x80u) == 0)
            v229 = v208;
          else
            v229 = v270.__r_.__value_.__l.__size_;
          if (v228 == v229)
          {
            std::string::__grow_by_and_replace(&v270, v228, 1uLL, v228, v228, 0, 1uLL, " ");
          }
          else
          {
            if ((v208 & 0x80u) == 0)
              v230 = &v270;
            else
              v230 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v231 = (char *)v230 + v229;
            if ((char *)v230 + v229 <= " " && v231 + 1 > " ")
              goto LABEL_749;
            *v231 = 32;
            v232 = v229 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v232;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v232 & 0x7F;
            v230->__r_.__value_.__s.__data_[v232] = 0;
          }
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v233 = 22;
          else
            v233 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v234 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          else
            v234 = v270.__r_.__value_.__l.__size_;
          if (v233 - v234 >= 0xC)
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v235 = &v270;
            else
              v235 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v236 = (char *)v235 + v234;
            if ((char *)v235 + v234 <= "network-cost" && v236 + 12 > "network-cost")
              goto LABEL_749;
            *((_DWORD *)v236 + 2) = 1953722211;
            *(_QWORD *)v236 = *(_QWORD *)"network-cost";
            v237 = v234 + 12;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              v270.__r_.__value_.__l.__size_ = v234 + 12;
            else
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v237 & 0x7F;
            v235->__r_.__value_.__s.__data_[v237] = 0;
          }
          else
          {
            std::string::__grow_by_and_replace(&v270, v233, v234 - v233 + 12, v234, v234, 0, 0xCuLL, "network-cost");
          }
          v238 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v239 = 22;
          else
            v239 = (v270.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v238 = v270.__r_.__value_.__l.__size_;
          if (v239 == v238)
          {
            std::string::__grow_by_and_replace(&v270, v239, 1uLL, v239, v239, 0, 1uLL, " ");
            rtc::StringBuilder::operator<<(&v270, *(unsigned __int16 *)(v4 + 194));
            v208 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
            if ((*((_BYTE *)&v270.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_569;
          }
          else
          {
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v240 = &v270;
            else
              v240 = (std::string *)v270.__r_.__value_.__r.__words[0];
            v241 = (char *)v240 + v238;
            if ((char *)v240 + v238 <= " " && v241 + 1 > " ")
              goto LABEL_749;
            *v241 = 32;
            v242 = v238 + 1;
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
            {
              v270.__r_.__value_.__l.__size_ = v242;
              v240->__r_.__value_.__s.__data_[v242] = 0;
              rtc::StringBuilder::operator<<(&v270, *(unsigned __int16 *)(v4 + 194));
              v208 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
              if ((*((_BYTE *)&v270.__r_.__value_.__s + 23) & 0x80) == 0)
              {
LABEL_569:
                v209 = &v270;
                goto LABEL_674;
              }
            }
            else
            {
              *((_BYTE *)&v270.__r_.__value_.__s + 23) = v242 & 0x7F;
              v240->__r_.__value_.__s.__data_[v242] = 0;
              rtc::StringBuilder::operator<<(&v270, *(unsigned __int16 *)(v4 + 194));
              v208 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
              if ((*((_BYTE *)&v270.__r_.__value_.__s + 23) & 0x80) == 0)
                goto LABEL_569;
            }
          }
LABEL_671:
          v208 = v270.__r_.__value_.__l.__size_;
          if ((v270.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_749;
          v209 = (std::string *)v270.__r_.__value_.__r.__words[0];
          if (v270.__r_.__value_.__l.__size_)
          {
            if (!v270.__r_.__value_.__r.__words[0])
              goto LABEL_749;
          }
LABEL_674:
          webrtc::AddLine((char *)v209, v208, a4);
          if (SHIBYTE(v269) < 0)
            operator delete(v267);
LABEL_3:
          v5 = v4 + 224;
          v4 += 432;
          if (v5 != a2)
            continue;
          if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v270.__r_.__value_.__l.__data_);
          break;
        default:
          goto LABEL_3;
      }
      break;
    }
  }
}

uint64_t webrtc::SdpDeserialize(_BYTE *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  std::string::size_type Value;
  std::string::size_type v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  void *v19;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  void **v34;
  size_t v35;
  int64_t v36;
  char v37;
  char *v38;
  char *v39;
  unint64_t v40;
  std::string::size_type v41;
  std::string::size_type v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  _BYTE *v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  char *v54;
  std::string::size_type v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  char *v64;
  size_t v65;
  int *v66;
  size_t v67;
  char *v68;
  char *v69;
  BOOL v70;
  BOOL v71;
  BOOL v74;
  uint64_t v75;
  int64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char v90;
  int v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::string *v102;
  _BOOL4 IsDtlsSctp;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  char v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  __int128 v140;
  int v141;
  unint64_t v142;
  char *v143;
  void **v144;
  uint64_t *v145;
  cricket::SessionDescription *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  _BOOL4 v159;
  unint64_t v160;
  size_t v161;
  unsigned __int8 *v162;
  size_t v163;
  int v164;
  int v165;
  size_t v166;
  int v167;
  int v168;
  unsigned __int8 *v169;
  size_t v170;
  const char *v171;
  size_t v172;
  void *p_src;
  size_t v174;
  int v175;
  int v176;
  size_t v177;
  int v178;
  int v179;
  size_t v180;
  int v181;
  int v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  std::string *v186;
  std::string *v187;
  int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  int v193;
  size_t v194;
  int v195;
  int v196;
  size_t v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  size_t v209;
  int v210;
  int v211;
  __int128 v212;
  std::string *v213;
  std::string::size_type size;
  uint64_t v215;
  std::string::size_type v216;
  std::string::size_type *v217;
  int64_t v218;
  std::string *v219;
  std::string::size_type *v220;
  int64_t v221;
  char *v222;
  _BOOL4 v224;
  int v225;
  std::string *v226;
  void *v227;
  int v228;
  char *v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  void **v233;
  std::string::size_type v234;
  int v235;
  char v236;
  std::string *__s;
  _BOOL4 v238;
  __int16 v239;
  int v240;
  BOOL v241;
  char v242;
  uint64_t v243;
  int v244;
  size_t v245;
  std::string::size_type *v246;
  uint64_t v247;
  cricket::SessionDescription *v248;
  void *v249;
  uint64_t *v250;
  uint64_t v251;
  int v252[2];
  void *v253[2];
  uint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  __int16 v259;
  int v260;
  char v261;
  void *v262;
  std::string *v263;
  unint64_t v264;
  uint64_t v265[3];
  int v266[2];
  size_t __len;
  unsigned __int8 v268;
  void *__src;
  size_t v270;
  unsigned __int8 v271;
  int v272;
  int v273;
  uint64_t v274;
  void *v275[2];
  uint64_t v276;
  std::string v277;
  __n128 v278;
  char v279;
  char *v280;
  __int128 v281;
  _BYTE __p[32];
  uint64_t v283;
  uint64_t v284;
  std::string::size_type v285;
  std::string __n;
  std::string::size_type v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  __int16 v291;
  int v292;
  char v293;
  int v294;
  char v295;
  std::string::size_type __sz[2];
  uint64_t v297;
  void *v298;
  _BYTE *v299;
  std::string v300;
  __int128 v301;
  char *v302;
  char *v303;
  char v304;
  char *v305;
  unint64_t v306;
  char v307;

  memset(&v277, 0, sizeof(v277));
  v275[0] = 0;
  v275[1] = 0;
  v276 = 0;
  cricket::TransportDescription::TransportDescription((uint64_t)v265, &byte_208EB9246, 0, &byte_208EB9246, 0);
  v262 = 0;
  v263 = 0;
  v264 = 0;
  v253[0] = 0;
  v253[1] = 0;
  v254 = 0;
  v255 = &unk_24C0ACDA0;
  v261 = 0;
  v259 = 0;
  v260 = 0;
  v256 = 0;
  v257 = 0;
  v258 = 0;
  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)v252 = 0;
  *(_DWORD *)(v10 + 72) = 0;
  *(_BYTE *)(v10 + 76) = 0;
  if (a2 < 2 || *a1 != 118 || a1[1] != 61)
  {
    v11 = 0;
LABEL_20:
    memset(__p, 0, 24);
    webrtc::ParseFailedExpectLine((uint64_t)a1, a2, v11, 0x76u, __p, 0, a4);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_22:
      v16 = 0;
      goto LABEL_23;
    }
LABEL_21:
    operator delete(*(void **)__p);
    goto LABEL_22;
  }
  webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
  v11 = *(_QWORD *)v252;
  if (!__p[16])
    goto LABEL_20;
  if (a2 < *(_QWORD *)v252 + 2)
    goto LABEL_40;
  if (a2 <= *(_QWORD *)v252)
    goto LABEL_642;
  if (a1[*(_QWORD *)v252] != 111)
    goto LABEL_40;
  if (a2 <= *(_QWORD *)v252 + 1)
    goto LABEL_642;
  if (a1[*(_QWORD *)v252 + 1] != 61)
  {
LABEL_40:
    memset(__p, 0, 24);
    webrtc::ParseFailedExpectLine((uint64_t)a1, a2, v11, 0x6Fu, __p, 0, a4);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
  if (!__p[16])
  {
    v11 = *(_QWORD *)v252;
    goto LABEL_40;
  }
  Value = *(_QWORD *)&__p[8];
  if (*(_QWORD *)&__p[8] <= 1uLL)
    goto LABEL_647;
  if (*(_QWORD *)&__p[8] - 2 < 0)
    goto LABEL_642;
  v12 = *(_QWORD *)__p;
  if (*(_QWORD *)&__p[8] != 2 && !*(_QWORD *)__p)
    goto LABEL_642;
  rtc::split(*(_QWORD *)__p + 2, *(_QWORD *)&__p[8] - 2, 0x20u, &v305);
  v13 = v305;
  v247 = a3;
  if (v306 - (_QWORD)v305 != 96)
  {
    webrtc::ParseFailedExpectFieldNum(v12, Value, 6, a4);
    v21 = 0;
    v22 = v305;
    if (!v305)
      goto LABEL_95;
    goto LABEL_94;
  }
  Value = *((_QWORD *)v305 + 3);
  if (Value > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_647;
  v14 = (_BYTE *)*((_QWORD *)v305 + 2);
  if (Value > 0x16)
  {
    v23 = (Value & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((Value | 7) != 0x17)
      v23 = Value | 7;
    v24 = v23 + 1;
    v15 = operator new(v23 + 1);
    *(_QWORD *)&__p[16] = v24 | 0x8000000000000000;
    *(_QWORD *)__p = v15;
    *(_QWORD *)&__p[8] = Value;
  }
  else
  {
    __p[23] = *((_QWORD *)v305 + 3);
    v15 = __p;
  }
  v25 = &v15[Value];
  if (v15 > v14 || v25 <= v14)
  {
    if (Value)
      memmove(v15, v14, Value);
    *v25 = 0;
    v277 = *(std::string *)__p;
    Value = *((_QWORD *)v13 + 5);
    if (Value <= 0x7FFFFFFFFFFFFFF7)
    {
      v26 = (_BYTE *)*((_QWORD *)v13 + 4);
      if (Value > 0x16)
      {
        v28 = (Value & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((Value | 7) != 0x17)
          v28 = Value | 7;
        v29 = v28 + 1;
        v27 = operator new(v28 + 1);
        *(_QWORD *)&__p[16] = v29 | 0x8000000000000000;
        *(_QWORD *)__p = v27;
        *(_QWORD *)&__p[8] = Value;
      }
      else
      {
        __p[23] = *((_QWORD *)v13 + 5);
        v27 = __p;
      }
      a3 = v247;
      v30 = &v27[Value];
      if (v27 <= v26 && v30 > v26)
        goto LABEL_642;
      if (Value)
        memmove(v27, v26, Value);
      *v30 = 0;
      *(_OWORD *)v275 = *(_OWORD *)__p;
      v276 = *(_QWORD *)&__p[16];
      v31 = *(_QWORD *)v252;
      if (a2 < *(_QWORD *)v252 + 2)
        goto LABEL_91;
      if (a2 <= *(_QWORD *)v252)
        goto LABEL_642;
      if (a1[*(_QWORD *)v252] != 115)
        goto LABEL_91;
      if (a2 <= *(_QWORD *)v252 + 1)
        goto LABEL_642;
      if (a1[*(_QWORD *)v252 + 1] == 61
        && (webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252), v31 = *(_QWORD *)v252, __p[16]))
      {
        v32 = *(_QWORD *)v252 + 2;
        if (a2 >= *(_QWORD *)v252 + 2)
        {
          if (a2 <= *(_QWORD *)v252)
            goto LABEL_642;
          if (a1[*(_QWORD *)v252] == 105)
          {
            if (a2 <= *(_QWORD *)v252 + 1)
              goto LABEL_642;
            if (a1[*(_QWORD *)v252 + 1] == 61)
            {
              webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
              v31 = *(_QWORD *)v252;
              v32 = *(_QWORD *)v252 + 2;
            }
          }
        }
        if (a2 >= v32)
        {
          if (a2 <= v31)
            goto LABEL_642;
          if (a1[v31] == 117)
          {
            if (a2 <= v31 + 1)
              goto LABEL_642;
            if (a1[v31 + 1] == 61)
            {
              webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
              v31 = *(_QWORD *)v252;
              v32 = *(_QWORD *)v252 + 2;
            }
          }
        }
        if (a2 >= v32)
        {
          if (a2 <= v31)
            goto LABEL_642;
          if (a1[v31] == 101)
          {
            if (a2 <= v31 + 1)
              goto LABEL_642;
            if (a1[v31 + 1] == 61)
            {
              webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
              v31 = *(_QWORD *)v252;
              v32 = *(_QWORD *)v252 + 2;
            }
          }
        }
        if (a2 < v32)
          goto LABEL_360;
        if (a2 <= v31)
          goto LABEL_642;
        if (a1[v31] == 112)
        {
          if (a2 <= v31 + 1)
            goto LABEL_642;
          a3 = v247;
          if (a1[v31 + 1] == 61)
          {
            webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
            v31 = *(_QWORD *)v252;
            v32 = *(_QWORD *)v252 + 2;
          }
        }
        else
        {
LABEL_360:
          a3 = v247;
        }
        if (a2 >= v32)
        {
          if (a2 <= v31)
            goto LABEL_642;
          if (a1[v31] == 99)
          {
            if (a2 <= v31 + 1)
              goto LABEL_642;
            a3 = v247;
            if (a1[v31 + 1] == 61)
            {
              webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
              if (__p[16])
              {
                if (!webrtc::ParseConnectionData(*(unsigned __int8 **)__p, *(size_t *)&__p[8], (uint64_t)v253, a4))goto LABEL_93;
              }
            }
          }
        }
        do
        {
          v153 = *(_QWORD *)v252;
          v154 = *(_QWORD *)v252 + 2;
          if (a2 < *(_QWORD *)v252 + 2)
            goto LABEL_375;
          if (a2 <= *(_QWORD *)v252)
            goto LABEL_642;
          if (a1[*(_QWORD *)v252] != 98)
            goto LABEL_375;
          if (a2 <= *(_QWORD *)v252 + 1)
            goto LABEL_642;
          if (a1[*(_QWORD *)v252 + 1] != 61)
            goto LABEL_375;
          webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
        }
        while (__p[16]);
        v153 = *(_QWORD *)v252;
        v154 = *(_QWORD *)v252 + 2;
LABEL_375:
        if (a2 >= v154)
        {
          if (a2 <= v153)
            goto LABEL_642;
          if (a1[v153] == 116)
          {
            if (a2 <= v153 + 1)
              goto LABEL_642;
            a3 = v247;
            if (a1[v153 + 1] == 61)
            {
              webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
              if (__p[16])
              {
                while (1)
                {
                  v155 = *(_QWORD *)v252;
                  v156 = *(_QWORD *)v252 + 2;
                  if (a2 < *(_QWORD *)v252 + 2)
                    break;
                  if (a2 <= *(_QWORD *)v252)
                    goto LABEL_642;
                  if (a1[*(_QWORD *)v252] != 114)
                    break;
                  if (a2 <= *(_QWORD *)v252 + 1)
                    goto LABEL_642;
                  if (a1[*(_QWORD *)v252 + 1] != 61)
                    break;
                  webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
                  if (!__p[16])
                  {
LABEL_392:
                    v155 = *(_QWORD *)v252;
                    v156 = *(_QWORD *)v252 + 2;
                    goto LABEL_393;
                  }
                }
                while (1)
                {
LABEL_393:
                  if (a2 < v156)
                    goto LABEL_407;
                  if (a2 <= v155)
                    goto LABEL_642;
                  if (a1[v155] != 116)
                    goto LABEL_407;
                  if (a2 <= v155 + 1)
                    goto LABEL_642;
                  if (a1[v155 + 1] != 61)
                    goto LABEL_407;
                  webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
                  if (!__p[16])
                    break;
                  while (1)
                  {
                    v155 = *(_QWORD *)v252;
                    v156 = *(_QWORD *)v252 + 2;
                    if (a2 < *(_QWORD *)v252 + 2)
                      break;
                    if (a2 <= *(_QWORD *)v252)
                      goto LABEL_642;
                    if (a1[*(_QWORD *)v252] != 114)
                      break;
                    if (a2 <= *(_QWORD *)v252 + 1)
                      goto LABEL_642;
                    if (a1[*(_QWORD *)v252 + 1] != 61)
                      break;
                    webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
                    if (!__p[16])
                      goto LABEL_392;
                  }
                }
                v155 = *(_QWORD *)v252;
LABEL_407:
                v157 = v155 + 2;
                if (a2 >= v155 + 2)
                {
                  if (a2 <= v155)
                    goto LABEL_642;
                  if (a1[v155] == 122)
                  {
                    if (a2 <= v155 + 1)
                      goto LABEL_642;
                    if (a1[v155 + 1] == 61)
                    {
                      webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
                      v155 = *(_QWORD *)v252;
                      v157 = *(_QWORD *)v252 + 2;
                    }
                  }
                }
                if (a2 >= v157)
                {
                  if (a2 <= v155)
                    goto LABEL_642;
                  if (a1[v155] == 107)
                  {
                    if (a2 <= v155 + 1)
                      goto LABEL_642;
                    if (a1[v155 + 1] == 61)
                    {
                      webrtc::GetLine((unint64_t)__p, (uint64_t)a1, a2, (uint64_t *)v252);
                      v155 = *(_QWORD *)v252;
                    }
                  }
                }
                if (a2 < v155 + 2)
                {
LABEL_420:
                  v21 = 1;
                  a3 = v247;
                  v22 = v305;
                  if (!v305)
                    goto LABEL_95;
                  goto LABEL_94;
                }
                v159 = __sz <= (std::string::size_type *)"WMS" && (char *)__sz + 3 > "WMS";
                v238 = v159;
                while (1)
                {
                  if (a2 <= v155)
                    goto LABEL_642;
                  if (a1[v155] != 97)
                    goto LABEL_420;
                  v160 = v155 + 1;
                  if (a2 <= v160)
                    goto LABEL_642;
                  if (a1[v160] != 61)
                    goto LABEL_420;
                  webrtc::GetLine((unint64_t)&v302, (uint64_t)a1, a2, (uint64_t *)v252);
                  if (!v304)
                    goto LABEL_420;
                  v161 = (size_t)v303;
                  if ((unint64_t)v303 <= 1)
                    goto LABEL_647;
                  v162 = (unsigned __int8 *)v302;
                  Value = (std::string::size_type)(v303 - 2);
                  if ((unint64_t)(v303 - 2) >= 5)
                    v163 = 5;
                  else
                    v163 = (size_t)(v303 - 2);
                  if (!v302 && v163)
                    goto LABEL_642;
                  v245 = v163;
                  v164 = memcmp(v302 + 2, "group", v163);
                  if (Value >= 5 && !v164)
                  {
                    if (v161 == 7)
                      goto LABEL_448;
                    v165 = v162[7];
                    if (v165 == 58 || v165 == 32)
                    {
                      if ((Value & 0x8000000000000000) != 0)
                        goto LABEL_642;
LABEL_448:
                      if (!v162)
                        goto LABEL_642;
                      rtc::split((size_t)(v162 + 2), v161 - 2, 0x20u, (char **)&v298);
                      memset(&__n, 0, sizeof(__n));
                      if (v299 == v298)
                        goto LABEL_642;
                      Value = webrtc::GetValue(*(unsigned __int8 **)v298, *((_QWORD *)v298 + 1), "group", 5uLL, (uint64_t)&__n, a4);
                      if ((_DWORD)Value)
                      {
                        if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
                          std::string::__init_copy_ctor_external((std::string *)__p, __n.__r_.__value_.__l.__data_, __n.__r_.__value_.__l.__size_);
                        else
                          *(std::string *)__p = __n;
                        *(_QWORD *)&__p[24] = 0;
                        v283 = 0;
                        v284 = 0;
                        v183 = (char *)v298;
                        if ((unint64_t)(v299 - (_BYTE *)v298) >= 0x11)
                        {
                          v184 = 0;
                          v185 = 1;
                          do
                          {
                            cricket::ContentGroup::AddContentName(__p, *(char **)&v183[v184 + 16], *(_QWORD *)&v183[v184 + 24]);
                            ++v185;
                            v183 = (char *)v298;
                            v184 += 16;
                          }
                          while (v185 < (v299 - (_BYTE *)v298) >> 4);
                        }
                        v186 = *(std::string **)(v10 + 56);
                        if ((unint64_t)v186 >= *(_QWORD *)(v10 + 64))
                        {
                          v187 = std::vector<cricket::ContentGroup>::__push_back_slow_path<cricket::ContentGroup const&>((std::string **)(v10 + 48), (__int128 *)__p);
                        }
                        else
                        {
                          if (!v186)
                            goto LABEL_642;
                          v187 = cricket::ContentGroup::ContentGroup(v186, (__int128 *)__p) + 2;
                        }
                        *(_QWORD *)(v10 + 56) = v187;
                        cricket::ContentGroup::~ContentGroup((cricket::ContentGroup *)__p);
                      }
                      if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__n.__r_.__value_.__l.__data_);
                      if (v298)
                      {
                        v299 = v298;
                        operator delete(v298);
                      }
                      if ((Value & 1) == 0)
                        goto LABEL_650;
                      goto LABEL_430;
                    }
                  }
                  if (Value >= 9)
                    v166 = 9;
                  else
                    v166 = v161 - 2;
                  if (!v162 && v166)
                    goto LABEL_642;
                  v167 = memcmp(v162 + 2, "ice-ufrag", v166);
                  if (Value >= 9 && !v167)
                  {
                    if (v161 == 11 || (v168 = v162[11], v168 == 58) || v168 == 32)
                    {
                      v169 = v162;
                      v170 = v161;
                      v171 = "ice-ufrag";
                      v172 = 9;
                      p_src = v266;
                      goto LABEL_475;
                    }
                  }
                  if (Value >= 7)
                    v174 = 7;
                  else
                    v174 = v161 - 2;
                  if (!v162 && v174)
                    goto LABEL_642;
                  v175 = memcmp(v162 + 2, "ice-pwd", v174);
                  if (Value >= 7 && !v175)
                  {
                    if (v161 == 9 || (v176 = v162[9], v176 == 58) || v176 == 32)
                    {
                      v169 = v162;
                      v170 = v161;
                      v171 = "ice-pwd";
                      v172 = 7;
                      p_src = &__src;
LABEL_475:
                      if ((webrtc::GetValue(v169, v170, v171, v172, (uint64_t)p_src, a4) & 1) == 0)
                        goto LABEL_650;
                      goto LABEL_430;
                    }
                  }
                  if (Value >= 8)
                    v177 = 8;
                  else
                    v177 = v161 - 2;
                  if (!v162 && v177)
                    goto LABEL_642;
                  v178 = memcmp(v162 + 2, "ice-lite", v177);
                  if (Value >= 8 && !v178)
                  {
                    if (v161 == 10 || (v179 = v162[10], v179 == 58) || v179 == 32)
                    {
                      v272 = 1;
                      goto LABEL_430;
                    }
                  }
                  if (Value >= 0xB)
                    v180 = 11;
                  else
                    v180 = v161 - 2;
                  if (!v162 && v180)
                    goto LABEL_642;
                  v181 = memcmp(v162 + 2, "ice-options", v180);
                  if (Value >= 0xB && !v181)
                  {
                    if (v161 == 13 || (v182 = v162[13], v182 == 58) || v182 == 32)
                    {
                      if ((webrtc::ParseIceOptions(v162, v161, (uint64_t)v265, a4) & 1) == 0)
                        goto LABEL_650;
                      goto LABEL_430;
                    }
                  }
                  v188 = memcmp(v162 + 2, "fingerprint", v180);
                  if (Value >= 0xB && !v188)
                  {
                    if (v161 == 13 || (v189 = v162[13], v189 == 58) || v189 == 32)
                    {
                      if (v274)
                      {
                        v229 = (char *)operator new(0x40uLL);
                        if (v229 <= "Can't have multiple fingerprint attributes at the same level."
                          && v229 + 61 > "Can't have multiple fingerprint attributes at the same level.")
                        {
                          goto LABEL_642;
                        }
                        strcpy(v229, "Can't have multiple fingerprint attributes at the same level.");
                        *(_QWORD *)__p = v229;
                        *(_OWORD *)&__p[8] = xmmword_208F0ABD0;
                        webrtc::ParseFailed((uint64_t)v162, v161, 0, (__n128 *)__p, a4);
LABEL_640:
                        if ((__p[23] & 0x80000000) == 0)
                          goto LABEL_650;
LABEL_649:
                        operator delete(*(void **)__p);
                        goto LABEL_650;
                      }
                      *(_QWORD *)__p = 0;
                      v190 = webrtc::ParseFingerprintAttribute((uint64_t)v162, v161, (void **)__p, a4);
                      Value = *(_QWORD *)__p;
                      if (!v190)
                        goto LABEL_643;
                      v191 = v274;
                      v274 = *(_QWORD *)__p;
                      if (v191)
                      {
                        rtc::CopyOnWriteBuffer::~CopyOnWriteBuffer((rtc::CopyOnWriteBuffer *)(v191 + 24));
                        if (*(char *)(v191 + 23) < 0)
                          operator delete(*(void **)v191);
                        MEMORY[0x20BD0ADEC](v191, 0x1032C40CD05A1E1);
                      }
                      goto LABEL_430;
                    }
                  }
                  v192 = memcmp(v162 + 2, "setup", v245);
                  if (Value >= 5 && !v192)
                  {
                    if (v161 == 7 || (v193 = v162[7], v193 == 58) || v193 == 32)
                    {
                      if ((webrtc::ParseDtlsSetup((uint64_t)v162, v161, &v273, a4) & 1) == 0)
                        goto LABEL_650;
                      goto LABEL_430;
                    }
                  }
                  if (Value >= 0xD)
                    v194 = 13;
                  else
                    v194 = v161 - 2;
                  if (!v162 && v194)
                    goto LABEL_642;
                  v195 = memcmp(v162 + 2, "msid-semantic", v194);
                  if (Value < 0xD || v195 || v161 != 15 && (v196 = v162[15], v196 != 58) && v196 != 32)
                  {
                    if (Value >= 0x12)
                      v197 = 18;
                    else
                      v197 = v161 - 2;
                    if (!v162 && v197)
                      goto LABEL_642;
                    v198 = memcmp(v162 + 2, "extmap-allow-mixed", v197);
                    if (Value >= 0x12 && !v198)
                    {
                      if (v161 == 20 || (v199 = v162[20], v199 == 58) || v199 == 32)
                      {
                        *(_BYTE *)(v10 + 76) = 1;
                        v201 = *(_QWORD *)v10;
                        v200 = *(_QWORD *)(v10 + 8);
                        if (*(_QWORD *)v10 != v200)
                        {
                          v202 = v200 - v201 - 40;
                          v203 = *(_QWORD *)v10;
                          if (v202 < 0x28)
                            goto LABEL_654;
                          v204 = v202 / 0x28 + 1;
                          v203 = v201 + 40 * (v204 & 0xFFFFFFFFFFFFFFELL);
                          v205 = (uint64_t *)(v201 + 72);
                          v206 = v204 & 0xFFFFFFFFFFFFFFELL;
                          do
                          {
                            v207 = *(v205 - 5);
                            v208 = *v205;
                            v205 += 10;
                            *(_DWORD *)(v207 + 200) = 1;
                            *(_DWORD *)(v208 + 200) = 1;
                            v206 -= 2;
                          }
                          while (v206);
                          if (v204 != (v204 & 0xFFFFFFFFFFFFFFELL))
                          {
LABEL_654:
                            do
                            {
                              *(_DWORD *)(*(_QWORD *)(v203 + 32) + 200) = 1;
                              v203 += 40;
                            }
                            while (v203 != v200);
                          }
                        }
                        goto LABEL_430;
                      }
                    }
                    if (Value >= 6)
                      v209 = 6;
                    else
                      v209 = v161 - 2;
                    if (!v162 && v209)
                      goto LABEL_642;
                    v210 = memcmp(v162 + 2, "extmap", v209);
                    if (Value < 6)
                      goto LABEL_430;
                    if (v210)
                      goto LABEL_430;
                    if (v161 != 8)
                    {
                      v211 = v162[8];
                      if (v211 != 58 && v211 != 32)
                        goto LABEL_430;
                    }
                    *(_QWORD *)&__p[8] = 0;
                    *(_QWORD *)__p = 0;
                    *(_QWORD *)&__p[21] = 0;
                    *(_QWORD *)&__p[16] = 0;
                    if (!webrtc::ParseExtmap((uint64_t)v162, v161, (uint64_t)__p, a4))
                      goto LABEL_640;
                    Value = (std::string::size_type)v263;
                    if ((unint64_t)v263 >= v264)
                    {
                      v263 = (std::string *)std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>((char **)&v262, (uint64_t)__p);
                      if ((__p[23] & 0x80000000) == 0)
                        goto LABEL_430;
                    }
                    else
                    {
                      if (!v263)
                        goto LABEL_642;
                      if ((__p[23] & 0x80000000) != 0)
                      {
                        std::string::__init_copy_ctor_external(v263, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
                      }
                      else
                      {
                        v212 = *(_OWORD *)__p;
                        v263->__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
                        *(_OWORD *)Value = v212;
                      }
                      v228 = *(_DWORD *)&__p[24];
                      *(_BYTE *)(Value + 28) = __p[28];
                      *(_DWORD *)(Value + 24) = v228;
                      v263 = (std::string *)(Value + 32);
                      if ((__p[23] & 0x80000000) == 0)
                        goto LABEL_430;
                    }
LABEL_625:
                    operator delete(*(void **)__p);
                    goto LABEL_430;
                  }
                  memset(__p, 0, 24);
                  if (!webrtc::GetValue(v162, v161, "msid-semantic", 0xDuLL, (uint64_t)__p, a4))
                  {
                    if ((__p[23] & 0x80000000) == 0)
                      goto LABEL_650;
                    goto LABEL_649;
                  }
                  if ((__p[23] & 0x80000000) != 0)
                    std::string::__init_copy_ctor_external(&v300, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
                  else
                    v300 = *(std::string *)__p;
                  HIBYTE(v297) = 3;
                  if (v238)
                    goto LABEL_642;
                  LODWORD(__sz[0]) = 5459287;
                  if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v213 = &v300;
                  else
                    v213 = (std::string *)v300.__r_.__value_.__r.__words[0];
                  if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(v300.__r_.__value_.__r.__words[2]);
                  else
                    size = v300.__r_.__value_.__l.__size_;
                  if (size)
                  {
                    do
                    {
                      v213->__r_.__value_.__s.__data_[0] = __tolower(v213->__r_.__value_.__s.__data_[0]);
                      v213 = (std::string *)((char *)v213 + 1);
                      --size;
                    }
                    while (size);
                    v215 = HIBYTE(v297);
                  }
                  else
                  {
                    v215 = 3;
                  }
                  v216 = __sz[1];
                  v246 = (std::string::size_type *)__sz[0];
                  if ((v215 & 0x80u) == 0)
                    v217 = __sz;
                  else
                    v217 = (std::string::size_type *)__sz[0];
                  if ((v215 & 0x80u) == 0)
                    Value = v215;
                  else
                    Value = __sz[1];
                  if (Value)
                  {
                    do
                    {
                      *(_BYTE *)v217 = __tolower(*(char *)v217);
                      v217 = (std::string::size_type *)((char *)v217 + 1);
                      --Value;
                    }
                    while (Value);
                    v215 = HIBYTE(v297);
                    v246 = (std::string::size_type *)__sz[0];
                    v216 = __sz[1];
                  }
                  v218 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
                  v219 = (std::string *)v300.__r_.__value_.__r.__words[0];
                  v236 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
                  if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v219 = &v300;
                  __s = v219;
                  if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v218 = v300.__r_.__value_.__l.__size_;
                  v235 = (char)v215;
                  if ((v215 & 0x80u) == 0)
                    v220 = __sz;
                  else
                    v220 = v246;
                  if ((v215 & 0x80u) == 0)
                    v221 = v215;
                  else
                    v221 = v216;
                  if (v221)
                  {
                    v222 = (char *)v219 + v218;
                    if (v218 >= v221)
                    {
                      v225 = *(char *)v220;
                      v226 = v219;
                      do
                      {
                        if (v218 - v221 == -1)
                          break;
                        v227 = memchr(v226, v225, v218 - v221 + 1);
                        if (!v227)
                          break;
                        Value = (std::string::size_type)v227;
                        if (!memcmp(v227, v220, v221))
                          goto LABEL_610;
                        v226 = (std::string *)(Value + 1);
                        v218 = (int64_t)&v222[-Value - 1];
                      }
                      while (v218 >= v221);
                    }
                    Value = (std::string::size_type)v222;
LABEL_610:
                    v224 = (char *)Value != v222 && Value - (_QWORD)__s != -1;
                  }
                  else
                  {
                    v224 = 1;
                  }
                  if (v235 < 0)
                  {
                    operator delete(v246);
                    if ((*((_BYTE *)&v300.__r_.__value_.__s + 23) & 0x80) == 0)
                    {
LABEL_619:
                      if (v224)
                        goto LABEL_620;
                      goto LABEL_624;
                    }
                  }
                  else if ((v236 & 0x80) == 0)
                  {
                    goto LABEL_619;
                  }
                  operator delete(v300.__r_.__value_.__l.__data_);
                  if (v224)
                  {
LABEL_620:
                    *(_DWORD *)(v10 + 72) = 4;
                    if ((__p[23] & 0x80000000) != 0)
                      goto LABEL_625;
                    goto LABEL_430;
                  }
LABEL_624:
                  if ((__p[23] & 0x80000000) != 0)
                    goto LABEL_625;
LABEL_430:
                  v155 = *(_QWORD *)v252;
                  if (a2 < *(_QWORD *)v252 + 2)
                    goto LABEL_420;
                }
              }
              v153 = *(_QWORD *)v252;
              a3 = v247;
            }
          }
        }
        memset(__p, 0, 24);
        webrtc::ParseFailedExpectLine((uint64_t)a1, a2, v153, 0x74u, __p, 0, a4);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_93:
          v21 = 0;
          v22 = v305;
          if (!v305)
            goto LABEL_95;
          goto LABEL_94;
        }
      }
      else
      {
LABEL_91:
        memset(__p, 0, 24);
        webrtc::ParseFailedExpectLine((uint64_t)a1, a2, v31, 0x73u, __p, 0, a4);
        if ((__p[23] & 0x80000000) == 0)
          goto LABEL_93;
      }
      operator delete(*(void **)__p);
      goto LABEL_93;
    }
LABEL_647:
    abort();
  }
LABEL_642:
  while (2)
  {
    while (2)
    {
      __break(1u);
LABEL_643:
      if (Value)
      {
        rtc::CopyOnWriteBuffer::~CopyOnWriteBuffer((rtc::CopyOnWriteBuffer *)(Value + 24));
        if (*(char *)(Value + 23) < 0)
          operator delete(*(void **)Value);
        MEMORY[0x20BD0ADEC](Value, 0x1032C40CD05A1E1);
      }
LABEL_650:
      v21 = 0;
      a3 = v247;
      v22 = v305;
      if (v305)
      {
LABEL_94:
        v306 = (unint64_t)v22;
        operator delete(v22);
      }
LABEL_95:
      if (!v21)
        goto LABEL_22;
      v249 = 0;
      v250 = 0;
      v233 = (void **)(a4 + 24);
      v251 = 0;
      v240 = *(_DWORD *)(v10 + 72);
      v33 = -1;
      v234 = v9 + 16;
      v9 = 111;
      while (a2 >= *(_QWORD *)v252 + 2)
      {
        if (a2 <= *(_QWORD *)v252)
          goto LABEL_642;
        if (a1[*(_QWORD *)v252] != 109)
          break;
        if (a2 <= *(_QWORD *)v252 + 1)
          goto LABEL_642;
        if (a1[*(_QWORD *)v252 + 1] != 61)
          break;
        webrtc::GetLine((unint64_t)&v305, (uint64_t)a1, a2, (uint64_t *)v252);
        if (!v307)
          break;
        if (v306 <= 1)
          goto LABEL_647;
        if ((uint64_t)(v306 - 2) < 0 || v306 != 2 && !v305)
          goto LABEL_642;
        ++v33;
        rtc::split((size_t)(v305 + 2), v306 - 2, 0x20u, &v302);
        if ((unint64_t)(v303 - v302) <= 0x3F)
        {
          if (!v307)
            goto LABEL_642;
          webrtc::ParseFailedExpectMinFieldNum((uint64_t)v305, v306, 4, a4);
          Value = 1;
          goto LABEL_289;
        }
        v34 = (void **)*((_QWORD *)v302 + 2);
        v35 = *((_QWORD *)v302 + 3);
        v241 = v35 == 1 && *(_BYTE *)v34 == 48;
        v36 = rtc::string_to_number_internal::ParseSigned(v34, v35, 10);
        if (!v37 || v36 < (uint64_t)0xFFFFFFFF80000000 || v36 > 0x7FFFFFFF || (v36 & 0xFFFF0000) != 0)
        {
          if (!v307)
            goto LABEL_642;
          Value = (std::string::size_type)v305;
          v63 = v306;
          v64 = (char *)operator new(0x20uLL);
          if (v64 <= "The port number is invalid" && v64 + 26 > "The port number is invalid")
            goto LABEL_642;
          strcpy(v64, "The port number is invalid");
          *(_QWORD *)__p = v64;
          *(_OWORD *)&__p[8] = xmmword_208F0AC80;
          webrtc::ParseFailed(Value, v63, 0, (__n128 *)__p, a4);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          Value = 1;
          goto LABEL_289;
        }
        v239 = v36;
        if ((unint64_t)(v303 - v302) <= 0x20)
          goto LABEL_642;
        v301 = *((_OWORD *)v302 + 2);
        memset(&v300, 0, sizeof(v300));
        v244 = v33;
        if (cricket::IsRtpProtocol((char *)v301, *((uint64_t *)&v301 + 1)))
        {
          v38 = v302;
          if ((unint64_t)(v303 - v302) >= 0x31)
          {
            v9 = 0;
            v39 = 0;
            v40 = 3;
            while (1)
            {
              *(_DWORD *)__p = 0;
              if (!v307)
                goto LABEL_642;
              if (!webrtc::GetValueFromString<int>((uint64_t)v305, v306, *(void ***)&v38[16 * v40], *(_QWORD *)&v38[16 * v40 + 8], __p, a4)|| (Value = *(unsigned int *)__p, *(_DWORD *)__p > 0x7Fu))
              {
                v300.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
                Value = 1;
                a3 = v247;
                goto LABEL_286;
              }
              if (v9 >= v300.__r_.__value_.__r.__words[2])
                break;
              if (!v9)
                goto LABEL_642;
              *(_DWORD *)v9 = *(_DWORD *)__p;
              v41 = v9 + 4;
LABEL_123:
              v300.__r_.__value_.__l.__size_ = v41;
              ++v40;
              v38 = v302;
              v9 = v41;
              if (v40 >= (v303 - v302) >> 4)
                goto LABEL_159;
            }
            v42 = v9 - (_QWORD)v39;
            v43 = (uint64_t)(v9 - (_QWORD)v39) >> 2;
            v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 62)
              goto LABEL_647;
            v45 = v300.__r_.__value_.__r.__words[2] - (_QWORD)v39;
            if ((uint64_t)(v300.__r_.__value_.__r.__words[2] - (_QWORD)v39) >> 1 > v44)
              v44 = v45 >> 1;
            v46 = (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL;
            v47 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v46)
              v47 = v44;
            if (!v47)
              goto LABEL_642;
            if (v47 >> 62)
              std::__throw_bad_array_new_length[abi:sn180100]();
            v243 = 4 * v47;
            v48 = operator new(4 * v47);
            v49 = &v48[4 * v43];
            *(_DWORD *)v49 = Value;
            v41 = (std::string::size_type)(v49 + 4);
            if ((char *)v9 == v39)
            {
              v52 = v243;
            }
            else
            {
              v50 = v9 - (_QWORD)v39 - 4;
              if (v50 < 0xBC
                || (v56 = (v9 - 4 - (_QWORD)v39) & 0xFFFFFFFFFFFFFFFCLL, &v48[v42 - 4 - v56] > &v48[v42 - 4])
                || v9 - 4 - v56 > v9 - 4
                || (unint64_t)(v39 - v48) < 0x20)
              {
                v51 = (char *)v9;
                v52 = v243;
              }
              else
              {
                v57 = (v50 >> 2) + 1;
                v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
                v51 = (char *)(v9 - v58);
                v49 -= v58;
                v59 = &v48[v42 - 16];
                v60 = (__int128 *)(v9 - 16);
                v61 = v57 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v62 = *v60;
                  *(v59 - 1) = *(v60 - 1);
                  *v59 = v62;
                  v59 -= 2;
                  v60 -= 2;
                  v61 -= 8;
                }
                while (v61);
                v52 = v243;
                if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_143;
              }
              do
              {
                v53 = *((_DWORD *)v51 - 1);
                v51 -= 4;
                *((_DWORD *)v49 - 1) = v53;
                v49 -= 4;
              }
              while (v51 != v39);
            }
LABEL_143:
            v300.__r_.__value_.__l.__size_ = v41;
            v300.__r_.__value_.__r.__words[2] = (std::string::size_type)&v48[v52];
            if (v39)
            {
              v54 = v39;
              v55 = v41;
              operator delete(v54);
              v41 = v55;
            }
            v39 = v49;
            goto LABEL_123;
          }
          v39 = 0;
LABEL_159:
          v300.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          a3 = v247;
          v33 = v244;
          v9 = 111;
        }
        if ((char)v268 < 0)
        {
          v65 = __len;
          if ((__len & 0x8000000000000000) != 0)
            goto LABEL_642;
          v66 = *(int **)v266;
          if (__len)
          {
            if (!*(_QWORD *)v266)
              goto LABEL_642;
          }
        }
        else
        {
          v65 = v268;
          v66 = v266;
        }
        if ((char)v271 < 0)
        {
          v67 = v270;
          if ((v270 & 0x8000000000000000) != 0)
            goto LABEL_642;
          v68 = (char *)__src;
          if (v270)
          {
            if (!__src)
              goto LABEL_642;
          }
        }
        else
        {
          v67 = v271;
          v68 = (char *)&__src;
        }
        cricket::TransportDescription::TransportDescription((uint64_t)&v298, v265, (unint64_t)v66, v65, v68, v67, v272, v273, v274);
        __sz[1] = 0;
        __sz[0] = 0;
        v297 = 0;
        v295 = 0;
        v294 = 0;
        if (v303 == v302)
          goto LABEL_642;
        v69 = *(char **)v302;
        Value = *((_QWORD *)v302 + 1);
        if (Value == 11)
        {
          v74 = *(_QWORD *)v69 == 0x746163696C707061 && *(_QWORD *)(v69 + 3) == 0x6E6F69746163696CLL;
          if (v74 && cricket::IsDtlsSctp(v301, *((uint64_t *)&v301 + 1)))
          {
            v9 = operator new();
            v75 = cricket::MediaContentDescription::MediaContentDescription(v9);
            *(_QWORD *)v75 = &unk_24C0B6F20;
            *(_BYTE *)(v75 + 304) = 1;
            *(_QWORD *)(v75 + 308) = 0x1000000001388;
            if ((unint64_t)(v303 - v302) <= 0x30)
              goto LABEL_642;
            v76 = rtc::string_to_number_internal::ParseSigned(*((void ***)v302 + 6), *((_QWORD *)v302 + 7), 10);
            if (v77 && v76 >= (uint64_t)0xFFFFFFFF80000000 && v76 <= 0x7FFFFFFF)
            {
              *(_DWORD *)(v9 + 308) = v76;
            }
            else
            {
              if ((unint64_t)(v303 - v302) <= 0x30)
                goto LABEL_642;
              if (*((_QWORD *)v302 + 7) == 18)
              {
                v116 = (uint64_t *)*((_QWORD *)v302 + 6);
                v117 = *v116;
                v118 = v116[1];
                v119 = *((unsigned __int16 *)v116 + 8);
                v120 = v117 == 0x642D637472626577 && v118 == 0x6E6E616863617461;
                if (v120 && v119 == 27749)
                  *(_BYTE *)(v9 + 304) = 0;
              }
            }
            webrtc::ParseContent((uint64_t)a1, a2, 2u, v33, (char *)v301, *((uint64_t *)&v301 + 1), (__int32 **)&v300, (uint64_t *)v252, (uint64_t)__sz, &v295, &v294, v9, (uint64_t)&v298, &v249, a4);
            if ((v122 & 1) == 0)
              goto LABEL_279;
          }
          else
          {
LABEL_204:
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            {
              if (!v307)
                goto LABEL_642;
              v232 = v232 & 0xFFFFFFFF00000000 | 0x5752;
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v78, v79, v80, v81, v82, v83, v84, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
            }
            v9 = operator new();
            *(_QWORD *)cricket::MediaContentDescription::MediaContentDescription(v9) = &unk_24C0B6FA0;
            if (Value > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_647;
            if (Value > 0x16)
            {
              v86 = (Value & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((Value | 7) != 0x17)
                v86 = Value | 7;
              v87 = v86 + 1;
              v85 = (char *)operator new(v86 + 1);
              v88 = v87 | 0x8000000000000000;
              a3 = v247;
              *(_QWORD *)(v9 + 312) = Value;
              *(_QWORD *)(v9 + 320) = v88;
              *(_QWORD *)(v9 + 304) = v85;
            }
            else
            {
              v85 = (char *)(v9 + 304);
              *(_BYTE *)(v9 + 327) = Value;
            }
            v89 = &v85[Value];
            if (v85 <= v69 && v89 > v69)
              goto LABEL_642;
            if (Value)
              memmove(v85, v69, Value);
            *v89 = 0;
            webrtc::ParseContent((uint64_t)a1, a2, 3u, v244, (char *)v301, *((uint64_t *)&v301 + 1), (__int32 **)&v300, (uint64_t *)v252, (uint64_t)__sz, &v295, &v294, v9, (uint64_t)&v298, &v249, a4);
            if ((v90 & 1) == 0)
            {
LABEL_279:
              (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
              goto LABEL_280;
            }
          }
          (*(void (**)(std::string::size_type, _QWORD, _QWORD))(*(_QWORD *)v9 + 88))(v9, v301, *((_QWORD *)&v301 + 1));
          goto LABEL_219;
        }
        if (Value != 5)
          goto LABEL_204;
        v70 = *(_DWORD *)v69 == 1701079414 && v69[4] == 111;
        if (v70 || (*(_DWORD *)v69 == 1768191329 ? (v71 = v69[4] == 111) : (v71 = 0), v71))
        {
          if ((cricket::IsRtpProtocol((char *)v301, *((uint64_t *)&v301 + 1)) & 1) == 0)
          {
            if (!v307)
              goto LABEL_642;
            Value = (std::string::size_type)v305;
            v105 = v306;
            v106 = (char *)operator new(0x28uLL);
            if (v106 <= "Unsupported protocol for media type" && v106 + 35 > "Unsupported protocol for media type")
              goto LABEL_642;
            strcpy(v106, "Unsupported protocol for media type");
            *(_QWORD *)__p = v106;
            *(_OWORD *)&__p[8] = xmmword_208F051B0;
            webrtc::ParseFailed(Value, v105, 0, (__n128 *)__p, a4);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
LABEL_280:
            v9 = 0;
LABEL_281:
            Value = 1;
            if ((SHIBYTE(v297) & 0x80000000) == 0)
              goto LABEL_283;
            goto LABEL_282;
          }
        }
        if (*(_DWORD *)v69 == 1701079414 && v69[4] == 111)
        {
          webrtc::ParseContentDescription((uint64_t **)__p, (uint64_t)a1, a2, 1u, v33, (char *)v301, *((uint64_t *)&v301 + 1), (__int32 **)&v300, (uint64_t *)v252, (uint64_t)__sz, &v295, &v294, (uint64_t)&v298, &v249, a4);
        }
        else
        {
          if (*(_DWORD *)v69 != 1768191329 || v69[4] != 111)
            goto LABEL_204;
          webrtc::ParseContentDescription((uint64_t **)__p, (uint64_t)a1, a2, 0, v33, (char *)v301, *((uint64_t *)&v301 + 1), (__int32 **)&v300, (uint64_t *)v252, (uint64_t)__sz, &v295, &v294, (uint64_t)&v298, &v249, a4);
        }
        v9 = *(_QWORD *)__p;
        if (!*(_QWORD *)__p)
          goto LABEL_281;
LABEL_219:
        v91 = v294;
        if (v295)
          v92 = v241;
        else
          v92 = 1;
        if (v295)
          v93 = 0;
        else
          v93 = v241;
        if ((v92 & 1) == 0)
        {
          v295 = 0;
          v93 = 0;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            v231 = v231 & 0xFFFFFFFF00000000 | 0x5832;
            rtc::webrtc_logging_impl::Log("\r\t", v94, v95, v96, v97, v98, v99, v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
            v93 = 0;
          }
        }
        v240 |= v91;
        if ((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v9 + 72))(v9))
        {
          v93 = 1;
        }
        else if (cricket::IsRtpProtocol((char *)v301, *((uint64_t *)&v301 + 1))
               && !(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v9 + 56))(v9))
        {
          v242 = v93;
          Value = *((_QWORD *)&v301 + 1);
          if (*((_QWORD *)&v301 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
            goto LABEL_647;
          v114 = (_BYTE *)v301;
          if (*((_QWORD *)&v301 + 1) > 0x16uLL)
          {
            v123 = (*((_QWORD *)&v301 + 1) & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((*((_QWORD *)&v301 + 1) | 7) != 0x17)
              v123 = *((_QWORD *)&v301 + 1) | 7;
            v124 = v123 + 1;
            v115 = operator new(v123 + 1);
            *(_QWORD *)&__p[16] = v124 | 0x8000000000000000;
            *(_QWORD *)__p = v115;
            *(_QWORD *)&__p[8] = Value;
          }
          else
          {
            __p[23] = BYTE8(v301);
            v115 = __p;
          }
          v125 = &v115[Value];
          if (v115 <= v114 && v125 > v114)
            goto LABEL_642;
          if (Value)
            memmove(v115, v114, Value);
          *v125 = 0;
          if ((__p[23] & 0x80000000) != 0)
          {
            v126 = *(_QWORD *)&__p[8];
            if ((*(_QWORD *)&__p[8] & 0x8000000000000000) != 0)
              goto LABEL_642;
            v127 = *(_BYTE **)__p;
            if (*(_QWORD *)&__p[8])
            {
              if (!*(_QWORD *)__p)
                goto LABEL_642;
            }
          }
          else
          {
            v126 = __p[23];
            v127 = __p;
          }
          (*(void (**)(std::string::size_type, _BYTE *, uint64_t))(*(_QWORD *)v9 + 88))(v9, v127, v126);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v128 = v262;
          if (v262 != v263)
          {
            Value = *(_QWORD *)(v9 + 64);
            if (Value == *(_QWORD *)(v9 + 72))
            {
              v137 = 0;
              v138 = 0;
              while (1)
              {
                v139 = (uint64_t)&v128[v137];
                if (Value >= *(_QWORD *)(v9 + 80))
                {
                  Value = (std::string::size_type)std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>((char **)(v9 + 64), v139);
                }
                else
                {
                  if (!Value)
                    goto LABEL_642;
                  if ((char)v128[v137 + 23] < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)Value, *(const std::string::value_type **)&v128[v137], *(_QWORD *)&v128[v137 + 8]);
                  }
                  else
                  {
                    v140 = *(_OWORD *)v139;
                    *(_QWORD *)(Value + 16) = *(_QWORD *)(v139 + 16);
                    *(_OWORD *)Value = v140;
                  }
                  v141 = *(_DWORD *)&v128[v137 + 24];
                  *(_BYTE *)(Value + 28) = v128[v137 + 28];
                  *(_DWORD *)(Value + 24) = v141;
                  Value += 32;
                }
                *(_QWORD *)(v9 + 72) = Value;
                *(_BYTE *)(v9 + 88) = 1;
                ++v138;
                v128 = v262;
                v137 += 32;
                if (v138 >= ((char *)v263 - (_BYTE *)v262) >> 5)
                  goto LABEL_326;
              }
            }
            v129 = (char *)operator new(0x48uLL);
            if (v129 <= "The a=extmap MUST be either all session level or all media level."
              && v129 + 65 > "The a=extmap MUST be either all session level or all media level.")
            {
              goto LABEL_642;
            }
            strcpy(v129, "The a=extmap MUST be either all session level or all media level.");
            *(_QWORD *)__p = v129;
            *(_OWORD *)&__p[8] = xmmword_208F0ABF0;
            __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&byte_208EB9246;
            __n.__r_.__value_.__l.__size_ = 0;
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
              rtc::webrtc_logging_impl::Log("\r\t\v\t\n", v130, v131, v132, v133, v134, v135, v136, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
            if (a4)
            {
              if (!__n.__r_.__value_.__r.__words[0] && __n.__r_.__value_.__l.__size_)
                goto LABEL_642;
              std::string::__assign_external((std::string *)a4, __n.__r_.__value_.__l.__data_, __n.__r_.__value_.__l.__size_);
              if (*(char *)(a4 + 47) < 0)
                operator delete(*v233);
              *(_OWORD *)v233 = *(_OWORD *)__p;
              *(_QWORD *)(a4 + 40) = *(_QWORD *)&__p[16];
            }
            else if ((__p[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)__p);
            }
            Value = 1;
            a3 = v247;
            if ((SHIBYTE(v297) & 0x80000000) == 0)
              goto LABEL_283;
LABEL_282:
            operator delete((void *)__sz[0]);
            goto LABEL_283;
          }
LABEL_326:
          a3 = v247;
          v93 = v242;
        }
        else if (!(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v9 + 56))(v9))
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            v230 = v230 & 0xFFFFFFFF00000000 | 0x591A;
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v107, v108, v109, v110, v111, v112, v113, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
            Value = 1;
            if ((SHIBYTE(v297) & 0x80000000) == 0)
              goto LABEL_283;
            goto LABEL_282;
          }
          goto LABEL_281;
        }
        memset(&__n, 0, sizeof(__n));
        v287 = v234;
        v293 = 0;
        v291 = 0;
        v292 = 0;
        v288 = 0;
        v289 = 0;
        v290 = 0;
        if (*(char *)(v9 + 151) < 0)
          v101 = *(_QWORD *)(v9 + 136);
        else
          v101 = *(unsigned __int8 *)(v9 + 151);
        v102 = (std::string *)(v9 + 128);
        if (!v101)
        {
          v102 = (std::string *)(v9 + 128);
          if (!*(_DWORD *)(v9 + 160))
          {
            if (*(_WORD *)(v9 + 184))
              v102 = (std::string *)(v9 + 128);
            else
              v102 = (std::string *)v253;
          }
        }
        rtc::SocketAddress::operator=(&__n, v102);
        v291 = v239;
        rtc::SocketAddress::operator=((std::string *)(v9 + 128), &__n);
        IsDtlsSctp = cricket::IsDtlsSctp(v301, *((uint64_t *)&v301 + 1));
        v285 = v9;
        cricket::SessionDescription::AddContent(v10, (uint64_t)__sz, IsDtlsSctp, v93, v295, (uint64_t *)&v285);
        v104 = v285;
        v285 = 0;
        if (v104)
          (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
        if (SHIBYTE(v297) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)__sz[0], __sz[1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)__sz;
          *(_QWORD *)&__p[16] = v297;
        }
        cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&__p[24], (const cricket::TransportDescription *)&v298);
        cricket::SessionDescription::AddTransportInfo((char *)v10, (uint64_t)__p);
        cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)&__p[24]);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__n.__r_.__value_.__l.__data_);
        v9 = 0;
        Value = 0;
        if (SHIBYTE(v297) < 0)
          goto LABEL_282;
LABEL_283:
        if (v9)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
        cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)&v298);
        v39 = (char *)v300.__r_.__value_.__r.__words[0];
LABEL_286:
        v9 = 111;
        if (v39)
        {
          v300.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
          operator delete(v39);
        }
        v33 = v244;
LABEL_289:
        if (v302)
        {
          v303 = v302;
          operator delete(v302);
        }
        if ((_DWORD)Value)
          goto LABEL_336;
      }
      if ((webrtc::HasDuplicateMsidLines(*(_QWORD *)v10, *(_QWORD *)(v10 + 8)) & 1) != 0)
      {
        v142 = *(_QWORD *)v252;
        v143 = (char *)operator new(0x20uLL);
        v280 = v143;
        v281 = xmmword_208F05170;
        if (v143 > "Duplicate a=msid lines detected" || v143 + 31 <= "Duplicate a=msid lines detected")
        {
          strcpy(v143, "Duplicate a=msid lines detected");
          v144 = (void **)&v280;
          webrtc::ParseFailed((uint64_t)a1, a2, v142, (__n128 *)&v280, a4);
          if (SHIBYTE(v281) < 0)
            goto LABEL_335;
          goto LABEL_336;
        }
        continue;
      }
      break;
    }
    *(_DWORD *)(v10 + 72) = v240;
    if (v33 == -1 && *(_QWORD *)v252 != a2)
    {
      v279 = 15;
      if (&v278 > (__n128 *)"Expects m line." || (char *)&v278.n128_f64[1] + 7 <= "Expects m line.")
      {
        strcpy((char *)&v278, "Expects m line.");
        v144 = (void **)&v278;
        webrtc::ParseFailed((uint64_t)a1, a2, *(unint64_t *)v252, &v278, a4);
        if (v279 < 0)
LABEL_335:
          operator delete(*v144);
LABEL_336:
        v16 = 0;
        v145 = (uint64_t *)v249;
        if (!v249)
          goto LABEL_354;
        goto LABEL_347;
      }
      continue;
    }
    break;
  }
  v248 = (cricket::SessionDescription *)v10;
  webrtc::JsepSessionDescription::Initialize(a3, (uint64_t *)&v248, &v277, (__int128 *)v275);
  v146 = v248;
  v248 = 0;
  if (v146)
  {
    cricket::SessionDescription::~SessionDescription(v146);
    MEMORY[0x20BD0ADEC]();
  }
  v145 = (uint64_t *)v249;
  v147 = v250;
  if (v249 == v250)
  {
    v10 = 0;
    v16 = 1;
    if (!v249)
      goto LABEL_354;
  }
  else
  {
    do
    {
      v148 = *v145++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, v148);
    }
    while (v145 != v147);
    v10 = 0;
    v16 = 1;
    v145 = (uint64_t *)v249;
    if (!v249)
      goto LABEL_354;
  }
LABEL_347:
  v149 = v250;
  v150 = v145;
  if (v250 != v145)
  {
    do
    {
      v152 = *--v149;
      v151 = v152;
      *v149 = 0;
      if (v152)
        (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
    }
    while (v149 != v145);
    v150 = v249;
  }
  v250 = v145;
  operator delete(v150);
LABEL_354:
  if (v10)
  {
LABEL_23:
    cricket::SessionDescription::~SessionDescription((cricket::SessionDescription *)v10);
    MEMORY[0x20BD0ADEC]();
  }
  if (SHIBYTE(v254) < 0)
    operator delete(v253[0]);
  v17 = (std::string *)v262;
  if (v262)
  {
    v18 = v263;
    v19 = v262;
    if (v263 != v262)
    {
      do
      {
        if (v18[-1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v18[-2].__r_.__value_.__r.__words[2]);
        v18 = (std::string *)((char *)v18 - 32);
      }
      while (v18 != v17);
      v19 = v262;
    }
    v263 = v17;
    operator delete(v19);
  }
  cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)v265);
  if (SHIBYTE(v276) < 0)
  {
    operator delete(v275[0]);
    if ((SHIBYTE(v277.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v16;
LABEL_38:
    operator delete(v277.__r_.__value_.__l.__data_);
    return v16;
  }
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_38;
  return v16;
}

unint64_t webrtc::SdpDeserializeCandidate(unsigned __int8 *a1, size_t a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  std::string v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  int v31;
  char v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  int v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  memset(&v19, 0, sizeof(v19));
  {
    v20 = 1;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0;
    v26 = &unk_24C0ACDA0;
    v32 = 0;
    v30 = 0;
    v31 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v33 = 0;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0;
    v40 = 0;
    v39 = 0u;
    v38 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v50 = 0;
    v48 = 0;
    v49 = 0;
    v47 = 0;
    v44 = &unk_24C0ACDA0;
    v45 = 0;
    v46 = 0;
    v56 = 0;
    v57 = 0;
    v55 = 0;
    v54 = 0;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    v12 = webrtc::ParseCandidate(a1, a2, (uint64_t)&v19, a4, 1uLL);
    if ((_DWORD)v12)
      cricket::Candidate::operator=((std::string *)(a3 + 40), &v19);
    cricket::Candidate::~Candidate((void **)&v19.__r_.__value_.__l.__data_);
    return v12;
  }
  else
  {
    v14 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v8, v9, v10, v11, (uint64_t)v19.__r_.__value_.__l.__data_);
    return webrtc::ParseCandidate((unsigned __int8 *)v14, v15, v16, v17, v18);
  }
}

unint64_t webrtc::ParseCandidate(unsigned __int8 *a1, size_t __n, uint64_t a3, char *a4, unint64_t a5)
{
  size_t v5;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  const char *v14;
  std::string::value_type *v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v19;
  void **v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  BOOL v24;
  char *v25;
  __int128 *v26;
  size_t v27;
  __int16 v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  int v35;
  int v36;
  int v38;
  int *v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  const char *v44;
  int *v45;
  int v46;
  int v47;
  const char *v49;
  int *v50;
  int v51;
  int v52;
  BOOL v54;
  std::string::size_type v55;
  const char *v56;
  __int16 v57;
  unsigned __int16 *v58;
  int v59;
  int v60;
  const char *v62;
  int v63;
  int v64;
  const char *v66;
  uint64_t v68;
  int v69;
  BOOL v70;
  uint64_t v71;
  int v72;
  size_t v74;
  const char *v75;
  std::string::size_type v76;
  std::string::value_type *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char *v82;
  int v84;
  std::string::value_type *__s;
  size_t v86;
  char *__src;
  size_t v88;
  char *v89;
  unsigned int v90;
  char *v91;
  std::string v92;
  uint64_t v93;
  char *v94[2];
  char v95;
  void *v96[2];
  char v97;
  void *v98[2];
  char v99;
  std::string v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  __int16 data;
  int v106;
  char v107;
  void *v108[2];
  char v109;
  char *v110[2];
  char v111;
  char *v112[2];
  char v113;
  __int128 v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  __int16 v120;
  void *__p[2];
  char v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  char *v126;
  char *v127;
  __n128 v128;
  std::string::size_type v129;
  void **v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  std::string::value_type *v134;
  uint64_t v135;
  __n128 v136[3];

  v9 = __n;
  v10 = a1;
  v11 = (uint64_t)&v128;
  if (!__n)
    goto LABEL_16;
  v12 = memchr(a1, 10, __n);
  if (v12)
  {
    v15 = (std::string::value_type *)(v12 - v10);
    if (v12 - v10 != -1)
    {
      v13 = (unint64_t)(v15 + 1);
      if (v15 + 1 != (std::string::value_type *)v9)
      {
        v136[1].n128_u8[7] = 20;
        v15 = "Expect one line only";
        if (v136 <= (__n128 *)"Expect one line only")
        {
          v13 = (unint64_t)v136[1].n128_u64 + 4;
          if (&v136[1].n128_u8[4] > "Expect one line only")
            goto LABEL_182;
        }
        strcpy((char *)v136, "Expect one line only");
        webrtc::ParseFailed((uint64_t)v10, v9, 0, v136, (uint64_t)a4);
        a5 = 0;
        if (v136[1].n128_i8[7] < 0)
        {
          operator delete((void *)v136[0].n128_u64[0]);
          return 0;
        }
        return a5;
      }
      if (v9 >= (unint64_t)v15)
        v9 = v12 - v10;
      if (v9 < 0 || !v10 && v9)
        goto LABEL_182;
      if (!v9)
        goto LABEL_16;
    }
  }
  v9 -= v10[v9 - 1] == 13;
  if ((unint64_t)v9 < 2 || *v10 != 97 || (v15 = (std::string::value_type *)v10[1], (_DWORD)v15 != 61))
  {
LABEL_16:
    v133 = 0;
    v134 = 0;
    v135 = 0;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    if (!rtc::tokenize_first(v10, v9, 58, (uint64_t)&v133, (uint64_t)&v130))
      goto LABEL_27;
    if (SHIBYTE(v135) < 0)
    {
      v15 = v134;
      if (((unint64_t)v134 & 0x8000000000000000) != 0)
        goto LABEL_182;
      v13 = (unint64_t)v133;
      if (v134)
      {
        if (!v133)
          goto LABEL_182;
      }
    }
    else
    {
      v15 = (std::string::value_type *)HIBYTE(v135);
      v13 = (unint64_t)&v133;
    }
    if (v15 != (std::string::value_type *)9
      || ((v16 = *(_QWORD *)v13, v13 = *(unsigned __int8 *)(v13 + 8), LOBYTE(v14) = 99, v16 == 0x74616469646E6163)
        ? (v17 = (_DWORD)v13 == 101)
        : (v17 = 0),
          !v17))
    {
LABEL_27:
      if (!(_DWORD)a5)
      {
        webrtc::ParseFailedExpectLine((uint64_t)v10, v9, 0, 0x61u, "candidate", 9uLL, (uint64_t)a4);
        goto LABEL_36;
      }
      memset(&v92, 0, sizeof(v92));
      v13 = (unint64_t)&v92;
      v15 = &v92.__r_.__value_.__s.__data_[13];
      v14 = "Expect line: ";
      if (&v92 <= (std::string *)"Expect line: " && (char *)&v92.__r_.__value_.__r.__words[1] + 5 > "Expect line: ")
        goto LABEL_182;
      strcpy((char *)&v92, "Expect line: ");
      *((_BYTE *)&v92.__r_.__value_.__s + 23) = 13;
      v14 = "candidate";
      if ((char *)&v92.__r_.__value_.__r.__words[1] + 5 <= "candidate")
      {
        v13 = (unint64_t)&v92.__r_.__value_.__r.__words[2] + 6;
        if ((char *)&v92.__r_.__value_.__r.__words[2] + 6 > "candidate")
          goto LABEL_182;
      }
      v92.__r_.__value_.__s.__data_[21] = 101;
      *(std::string::size_type *)((char *)&v92.__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)"candidate";
      HIWORD(v92.__r_.__value_.__r.__words[2]) = 5632;
      std::string::__grow_by_and_replace(&v92, 0x16uLL, 0x10uLL, 0x16uLL, 0x16uLL, 0, 0x10uLL, ":<candidate-str>");
      v128 = *(__n128 *)&v92.__r_.__value_.__l.__data_;
      v129 = v92.__r_.__value_.__r.__words[2];
      memset(&v92, 0, sizeof(v92));
      webrtc::ParseFailed((uint64_t)v10, v9, 0, &v128, (uint64_t)a4);
      if (SHIBYTE(v129) < 0)
      {
        operator delete((void *)v128.n128_u64[0]);
        if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_34;
      }
      else if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_34:
        a5 = 0;
        goto LABEL_36;
      }
      operator delete(v92.__r_.__value_.__l.__data_);
      goto LABEL_34;
    }
    v15 = (std::string::value_type *)SHIBYTE(v132);
    if ((v15 & 0x80000000) != 0)
    {
      v19 = v131;
      if ((v131 & 0x8000000000000000) != 0)
        goto LABEL_182;
      v20 = v130;
      if (v131)
      {
        if (!v130)
          goto LABEL_182;
      }
    }
    else
    {
      v19 = HIBYTE(v132);
      v20 = (void **)&v130;
    }
    rtc::split((size_t)v20, v19, 0x20u, &v126);
    if ((unint64_t)(v127 - v126) < 0x80
      || *((_QWORD *)v126 + 13) != 3
      || ((v21 = (unsigned __int16 *)*((_QWORD *)v126 + 12),
           v22 = *v21,
           v23 = *((unsigned __int8 *)v21 + 2),
           v22 == 31092)
        ? (v24 = v23 == 112)
        : (v24 = 0),
          !v24))
    {
      webrtc::ParseFailedExpectMinFieldNum((uint64_t)v10, v9, 8, (uint64_t)a4);
LABEL_60:
      a5 = 0;
      goto LABEL_61;
    }
    v25 = *(char **)v126;
    v5 = *((_QWORD *)v126 + 1);
    v125 = 0;
    a5 = 0;
    if (!webrtc::GetValueFromString<int>((uint64_t)v10, v9, *((void ***)v126 + 2), *((_QWORD *)v126 + 3), &v125, (uint64_t)a4))goto LABEL_61;
    v15 = v126;
    v13 = v127 - v126;
    if ((unint64_t)(v127 - v126) <= 0x20)
      goto LABEL_182;
    a5 = *((_QWORD *)v126 + 4);
    v11 = *((_QWORD *)v126 + 5);
    v124 = 0;
    if (v13 <= 0x30)
      goto LABEL_182;
    if (!webrtc::GetValueFromString<unsigned int>((uint64_t)v10, v9, *((void ***)v126 + 6), *((_QWORD *)v126 + 7), &v124, (uint64_t)a4))goto LABEL_60;
    v15 = v126;
    v13 = v127 - v126;
    if ((unint64_t)(v127 - v126) <= 0x40)
      goto LABEL_182;
    v26 = (__int128 *)*((_QWORD *)v126 + 8);
    v27 = *((_QWORD *)v126 + 9);
    v123 = 0;
    if (v13 <= 0x50)
      goto LABEL_182;
    if (!webrtc::GetValueFromString<int>((uint64_t)v10, v9, *((void ***)v126 + 10), *((_QWORD *)v126 + 11), &v123, (uint64_t)a4))goto LABEL_60;
    v91 = v25;
    v28 = v123;
    if (v123 >= 0x10000)
    {
      std::string::basic_string[abi:sn180100]<0>((char **)__p, "Invalid port number.");
      webrtc::ParseFailed((uint64_t)v10, v9, (uint64_t)__p, (uint64_t)a4);
      if (v122 < 0)
        operator delete(__p[0]);
      goto LABEL_60;
    }
    v114 = 0uLL;
    v115 = 0;
    v116 = &unk_24C0ACDA0;
    v118 = 0;
    v117 = 0;
    v119 = 0;
    rtc::SocketAddress::SetIP((uint64_t)&v114, v26, v27);
    v120 = v28;
    v29 = cricket::StringToProto((char *)a5, v11);
    if ((v29 & 0xFF00000000) != 0)
    {
      if (v29 < 3)
      {
        v15 = v126;
        v13 = v127 - v126;
        if ((unint64_t)(v127 - v126) <= 0x70)
          goto LABEL_182;
        v30 = (int *)*((_QWORD *)v126 + 14);
        v31 = *((_QWORD *)v126 + 15);
        v90 = v29;
        if (v31 != 5)
        {
          if (v31 == 4 && *v30 == 1953722216)
          {
            v84 = 0;
            goto LABEL_106;
          }
LABEL_96:
          std::string::basic_string[abi:sn180100]<0>((char **)v108, "Unsupported candidate type.");
          webrtc::ParseFailed((uint64_t)v10, v9, (uint64_t)v108, (uint64_t)a4);
          if (v109 < 0)
          {
            v32 = (char *)v108[0];
            goto LABEL_98;
          }
LABEL_99:
          a5 = 0;
          goto LABEL_100;
        }
        if (*v30 == 1818653299 && *((_BYTE *)v30 + 4) == 120)
        {
          v38 = 1;
        }
        else if (*v30 == 1634493810 && *((_BYTE *)v30 + 4) == 121)
        {
          v38 = 3;
        }
        else
        {
          v35 = *v30;
          v36 = *((unsigned __int8 *)v30 + 4);
          if (v35 != 1818653296 || v36 != 120)
            goto LABEL_96;
          v38 = 2;
        }
        v84 = v38;
LABEL_106:
        memset(&v100, 0, sizeof(v100));
        v101 = &unk_24C0ACDA0;
        v107 = 0;
        data = 0;
        v106 = 0;
        v103 = 0;
        v102 = 0;
        v104 = 0;
        if (v13 >= 0x91
          && *((_QWORD *)v126 + 17) == 5
          && ((v39 = (int *)*((_QWORD *)v126 + 16), v40 = *v39, v41 = *((unsigned __int8 *)v39 + 4), v40 == 1684300146)
            ? (v42 = v41 == 114)
            : (v42 = 0),
              v42))
        {
          rtc::SocketAddress::SetIP((uint64_t)&v100, *((__int128 **)v126 + 18), *((_QWORD *)v126 + 19));
          v15 = v126;
          v43 = 10;
          v13 = (v127 - v126) >> 4;
          v11 = 12;
          if (v13 < 0xC)
            goto LABEL_124;
        }
        else
        {
          v43 = 8;
          v13 = (uint64_t)v13 >> 4;
          v11 = 10;
          if (v13 < 0xA)
            goto LABEL_124;
        }
        v44 = &v15[16 * v43];
        if (*((_QWORD *)v44 + 1) == 5)
        {
          v45 = *(int **)v44;
          v46 = *v45;
          v47 = *((unsigned __int8 *)v45 + 4);
          if (v46 == 1919905906 && v47 == 116)
          {
            LODWORD(v92.__r_.__value_.__l.__data_) = 0;
            if (webrtc::GetValueFromString<int>((uint64_t)v10, v9, *(void ***)&v15[(16 * v43) | 0x10], *(_QWORD *)&v15[((16 * v43) | 0x10) + 8], &v92, (uint64_t)a4))
            {
              if (LODWORD(v92.__r_.__value_.__l.__data_) < 0x10000)
              {
                data = (__int16)v92.__r_.__value_.__l.__data_;
                v15 = v126;
                v13 = (v127 - v126) >> 4;
                a5 = v43 | 4;
                LODWORD(v14) = 6u >> (v90 & 7);
                if (v13 >= (v43 | 4uLL))
                {
LABEL_125:
                  v49 = &v15[16 * v11];
                  if (*((_QWORD *)v49 + 1) == 7)
                  {
                    v50 = *(int **)v49;
                    v51 = *v50;
                    v52 = *(int *)((char *)v50 + 3);
                    if (v51 == 1953522548 && v52 == 1701869940)
                      goto LABEL_183;
                  }
                }
LABEL_130:
                v54 = (v14 & 1) == 0;
                if ((v14 & 1) != 0)
                  v55 = 7;
                else
                  v55 = 0;
                v56 = "passive";
                if (v54)
                  v56 = 0;
                __s = (std::string::value_type *)v56;
                a5 = v11;
                goto LABEL_136;
              }
              std::string::basic_string[abi:sn180100]<0>((char **)v98, "Invalid port number.");
              webrtc::ParseFailed((uint64_t)v10, v9, (uint64_t)v98, (uint64_t)a4);
              if (v99 < 0)
                operator delete(v98[0]);
            }
LABEL_199:
            a5 = 0;
            goto LABEL_180;
          }
        }
LABEL_124:
        a5 = v11;
        v11 = v43;
        LODWORD(v14) = 6u >> (v90 & 7);
        if (v13 >= a5)
          goto LABEL_125;
        goto LABEL_130;
      }
      std::string::basic_string[abi:sn180100]<0>(v110, "Unsupported transport type.");
      webrtc::ParseFailed((uint64_t)v10, v9, (uint64_t)v110, (uint64_t)a4);
      if ((v111 & 0x80000000) == 0)
        goto LABEL_99;
      v32 = v110[0];
    }
    else
    {
      std::string::basic_string[abi:sn180100]<0>(v112, "Unsupported transport type.");
      webrtc::ParseFailed((uint64_t)v10, v9, (uint64_t)v112, (uint64_t)a4);
      if ((v113 & 0x80000000) == 0)
        goto LABEL_99;
      v32 = v112[0];
    }
LABEL_98:
    operator delete(v32);
    goto LABEL_99;
  }
  v9 -= 2;
  if (v9 >= 0)
  {
    v10 += 2;
    goto LABEL_16;
  }
  while (1)
  {
LABEL_182:
    __break(1u);
LABEL_183:
    v75 = &v15[16 * v11];
    v77 = (std::string::value_type *)*((_QWORD *)v75 + 2);
    v76 = *((_QWORD *)v75 + 3);
    __s = v77;
    v55 = v76;
    switch(v76)
    {
      case 2uLL:
        if (*(unsigned __int16 *)v77 != *(unsigned __int16 *)"so")
          goto LABEL_198;
        goto LABEL_190;
      case 7uLL:
        v78 = *(_DWORD *)v77;
        v79 = *(_DWORD *)"passive";
        v80 = *(_DWORD *)(__s + 3);
        v81 = *(_DWORD *)"sive";
        break;
      case 6uLL:
        v78 = *(_DWORD *)v77;
        v79 = *(_DWORD *)"active";
        v80 = *((unsigned __int16 *)__s + 2);
        v81 = *(unsigned __int16 *)"ve";
        break;
      default:
        goto LABEL_198;
    }
    if (v78 != v79 || v80 != v81)
      break;
LABEL_190:
    if ((v14 & 1) == 0)
    {
      std::string::basic_string[abi:sn180100]<0>(v94, "Invalid non-TCP candidate");
      webrtc::ParseFailed((uint64_t)v10, v9, (uint64_t)v94, (uint64_t)a4);
      if ((v95 & 0x80000000) == 0)
        goto LABEL_199;
      v82 = v94[0];
      goto LABEL_201;
    }
LABEL_136:
    v93 = 0;
    LOBYTE(v14) = a5 + 1;
    if (a5 + 1 >= v13)
    {
      a5 = 0;
      v9 = 0;
      v57 = 0;
      v86 = 0;
      __src = 0;
      v88 = 0;
      v89 = 0;
LABEL_177:
      a4 = (char *)*((_QWORD *)&cricket::PROTO_NAMES + v90);
      v10 = (unsigned __int8 *)v125;
      v74 = strlen(a4);
      cricket::Candidate::Candidate((uint64_t)&v92, v125, a4, v74, &v114, v124, v89, v88, __src, v86, v84, v9, v91, v5, a5, v57);
      cricket::Candidate::operator=((std::string *)a3, &v92);
      cricket::Candidate::~Candidate((void **)&v92.__r_.__value_.__l.__data_);
      rtc::SocketAddress::operator=((std::string *)(a3 + 280), &v100);
      if (!v55 || (v15 = __s) != 0)
      {
        std::string::__assign_external((std::string *)(a3 + 352), __s, v55);
        a5 = 1;
        goto LABEL_180;
      }
    }
    else
    {
      v57 = 0;
      v88 = 0;
      v89 = 0;
      v86 = 0;
      __src = 0;
      v11 = 16 * a5;
      while (2)
      {
        if (v13 > a5)
        {
          v58 = *(unsigned __int16 **)&v15[v11];
          switch(*(_QWORD *)&v15[v11 + 8])
          {
            case 3:
              v59 = *v58;
              v60 = *((unsigned __int8 *)v58 + 2);
              if (v59 == 30576 && v60 == 100)
              {
                v62 = &v15[v11];
                v86 = *((_QWORD *)v62 + 3);
                __src = (char *)*((_QWORD *)v62 + 2);
              }
              goto LABEL_139;
            case 5:
              v63 = *(_DWORD *)v58;
              v64 = *((unsigned __int8 *)v58 + 4);
              if (v63 == 1634887285 && v64 == 103)
              {
                v66 = &v15[v11];
                v88 = *((_QWORD *)v66 + 3);
                v89 = (char *)*((_QWORD *)v66 + 2);
              }
              goto LABEL_139;
            case 0xALL:
              if (*(_QWORD *)v58 == 0x69746172656E6567 && v58[4] == 28271)
              {
                if ((webrtc::GetValueFromString<unsigned int>((uint64_t)v10, v9, *(void ***)&v15[v11 + 16], *(_QWORD *)&v15[v11 + 24], (_DWORD *)&v93 + 1, (uint64_t)a4) & 1) == 0)goto LABEL_199;
              }
              else
              {
                v68 = *(_QWORD *)v58;
                v69 = v58[4];
                v70 = v68 == 0x2D6B726F7774656ELL && v69 == 25705;
                if (v70
                  && (webrtc::GetValueFromString<unsigned short>((uint64_t)v10, v9, *(void ***)&v15[v11 + 16], *(_QWORD *)&v15[v11 + 24], (_WORD *)&v93 + 1, (uint64_t)a4) & 1) == 0)
                {
                  goto LABEL_199;
                }
              }
LABEL_139:
              v14 = (const char *)(a5 + 3);
              a5 += 2;
              v15 = v126;
              v13 = (v127 - v126) >> 4;
              v11 += 32;
              if ((unint64_t)v14 < v13)
                continue;
              v9 = HIDWORD(v93);
              a5 = WORD1(v93);
              break;
            case 0xCLL:
              v71 = *(_QWORD *)v58;
              v72 = *((_DWORD *)v58 + 2);
              if (v71 != 0x2D6B726F7774656ELL || v72 != 1953722211)
                goto LABEL_139;
              if (!webrtc::GetValueFromString<unsigned short>((uint64_t)v10, v9, *(void ***)&v15[v11 + 16], *(_QWORD *)&v15[v11 + 24], &v93, (uint64_t)a4))goto LABEL_199;
              if ((unsigned __int16)v93 >= 0x3E7u)
                v57 = 999;
              else
                v57 = v93;
              LOWORD(v93) = v57;
              goto LABEL_139;
            default:
              goto LABEL_139;
          }
          goto LABEL_177;
        }
        break;
      }
    }
  }
LABEL_198:
  std::string::basic_string[abi:sn180100]<0>((char **)v96, "Invalid TCP candidate type.");
  webrtc::ParseFailed((uint64_t)v10, v9, (uint64_t)v96, (uint64_t)a4);
  if ((v97 & 0x80000000) == 0)
    goto LABEL_199;
  v82 = (char *)v96[0];
LABEL_201:
  operator delete(v82);
  a5 = 0;
LABEL_180:
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
LABEL_100:
  if (SHIBYTE(v115) < 0)
    operator delete((void *)v114);
LABEL_61:
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
LABEL_36:
  if (SHIBYTE(v132) < 0)
  {
    operator delete(v130);
    if (SHIBYTE(v135) < 0)
      goto LABEL_40;
  }
  else if (SHIBYTE(v135) < 0)
  {
LABEL_40:
    operator delete(v133);
  }
  return a5;
}

uint64_t std::string_view::substr[abi:sn180100](uint64_t a1, unint64_t a2, unint64_t a3)
{
  BOOL v4;
  uint64_t v5;

  v4 = a2 >= a3;
  v5 = a2 - a3;
  if (!v4)
LABEL_8:
    abort();
  if (v5 < 0 || !a1 && a2 != a3)
  {
    __break(1u);
    goto LABEL_8;
  }
  return a1 + a3;
}

__n128 webrtc::ParseFailed(uint64_t a1, unint64_t a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  size_t v10;
  const std::string::value_type *v11;
  char *v12;
  char *v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 result;
  void **v23;
  std::string::size_type v24;

  v10 = a2 - a3;
  if (a2 <= a3
    || (v11 = (const std::string::value_type *)(a1 + a3), (v12 = (char *)memchr((void *)(a1 + a3), 10, v10)) == 0)
    || (v13 = &v12[-a1], &v12[-a1] == (char *)-1))
  {
    v14 = a2 - a3;
    if (a2 < a3)
      goto LABEL_29;
    if ((uint64_t)(a2 - a3) < 0 || a2 != a3 && !a1)
      goto LABEL_28;
    v11 = (const std::string::value_type *)(a1 + a3);
  }
  else
  {
    if (v13)
    {
      if (a2 <= (unint64_t)(v13 - 1))
        goto LABEL_29;
      if (*(v12 - 1) == 13)
        --v13;
    }
    v14 = (std::string::size_type)&v13[-a3];
    if (v10 < v14)
      v14 = v10;
    if ((v14 & 0x8000000000000000) != 0 || !a1 && v14)
      goto LABEL_28;
  }
  v24 = v14;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\v\t\n", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
  if (a5)
  {
    if (v11 || !v24)
    {
      std::string::__assign_external((std::string *)a5, v11, v24);
      v23 = (void **)(a5 + 24);
      if (*(char *)(a5 + 47) < 0)
        operator delete(*v23);
      result = *a4;
      *(_QWORD *)(a5 + 40) = a4[1].n128_u64[0];
      *(__n128 *)v23 = result;
      a4[1].n128_u8[7] = 0;
      a4->n128_u8[0] = 0;
      return result;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    abort();
  }
  return result;
}

const void **std::operator==[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(const void **result, char *__s)
{
  const void *v3;
  size_t v4;

  v3 = result;
  if (*((char *)result + 23) < 0)
  {
    v4 = (size_t)result[1];
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_12;
    v3 = *result;
    if (v4 && v3 == 0)
      goto LABEL_12;
  }
  else
  {
    v4 = *((unsigned __int8 *)result + 23);
  }
  if (!__s)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (v4 == strlen(__s))
    return (const void **)(memcmp(v3, __s, v4) == 0);
  else
    return 0;
}

void webrtc::ParseFailedExpectLine(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 a4, const std::string::value_type *__src, size_t __len, uint64_t a7)
{
  std::string v13;
  void *__p[2];
  char v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  if (&v16 <= (std::string *)"Expect line: " && (char *)&v16.__r_.__value_.__r.__words[1] + 5 > "Expect line: ")
    goto LABEL_26;
  strcpy((char *)&v16, "Expect line: ");
  *((_BYTE *)&v16.__r_.__value_.__s + 23) = 13;
  v15 = 1;
  LOWORD(__p[0]) = a4;
  if ((char *)&v16.__r_.__value_.__r.__words[1] + 5 <= (char *)__p
    && (char *)&v16.__r_.__value_.__r.__words[1] + 6 > (char *)__p)
  {
    goto LABEL_26;
  }
  *(_WORD *)((char *)&v16.__r_.__value_.__r.__words[1] + 5) = a4;
  *((_BYTE *)&v16.__r_.__value_.__s + 23) = 14;
  if ((char *)&v16.__r_.__value_.__r.__words[1] + 6 <= "=" && (char *)&v16.__r_.__value_.__r.__words[1] + 7 > "=")
    goto LABEL_26;
  HIWORD(v16.__r_.__value_.__r.__words[1]) = 61;
  *((_BYTE *)&v16.__r_.__value_.__s + 23) = 15;
  if (!__src)
  {
    if (__len)
      goto LABEL_26;
  }
  if (__len > 7)
  {
    std::string::__grow_by_and_replace(&v16, 0x16uLL, __len - 7, 0xFuLL, 0xFuLL, 0, __len, __src);
    if (v15 < 0)
      operator delete(__p[0]);
    goto LABEL_21;
  }
  if (!__len)
    goto LABEL_21;
  if ((char *)&v16.__r_.__value_.__r.__words[1] + 7 <= __src
    && (char *)&v16.__r_.__value_.__r.__words[1] + __len + 7 > __src)
  {
LABEL_26:
    __break(1u);
    return;
  }
  memmove((char *)&v16.__r_.__value_.__r.__words[1] + 7, __src, __len);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    v16.__r_.__value_.__l.__size_ = __len + 15;
  else
    *((_BYTE *)&v16.__r_.__value_.__s + 23) = __len + 15;
  v16.__r_.__value_.__s.__data_[__len + 15] = 0;
LABEL_21:
  v13 = v16;
  memset(&v16, 0, sizeof(v16));
  webrtc::ParseFailed(a1, a2, a3, (__n128 *)&v13, a7);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(v16.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
}

void webrtc::ParseFailedExpectMinFieldNum(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  std::string *v7;
  int v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v13;
  char v14;
  std::string v15;
  _BYTE __p[23];
  char v17;

  memset(&v15, 0, sizeof(v15));
  if (&v15 <= (std::string *)"Expects at least " && (char *)&v15.__r_.__value_.__r.__words[2] + 1 > "Expects at least ")
    goto LABEL_27;
  strcpy((char *)&v15, "Expects at least ");
  *((_BYTE *)&v15.__r_.__value_.__s + 23) = 17;
  v7 = rtc::StringBuilder::operator<<(&v15, a3);
  v8 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
  if (v8 >= 0)
    v9 = 22;
  else
    v9 = (v7->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v8 >= 0)
    size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  else
    size = v7->__r_.__value_.__l.__size_;
  if (v9 - size < 8)
  {
    std::string::__grow_by_and_replace(v7, v9, size - v9 + 8, size, size, 0, 8uLL, " fields.");
    goto LABEL_22;
  }
  v11 = v8 >= 0 ? v7 : (std::string *)v7->__r_.__value_.__r.__words[0];
  if ((char *)v11 + size <= " fields." && (char *)&v11->__r_.__value_.__r.__words[1] + size > " fields.")
  {
LABEL_27:
    __break(1u);
    return;
  }
  *(std::string::size_type *)((char *)v11->__r_.__value_.__r.__words + size) = 0x2E73646C65696620;
  v13 = size + 8;
  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
    v7->__r_.__value_.__l.__size_ = v13;
  else
    *((_BYTE *)&v7->__r_.__value_.__s + 23) = v13 & 0x7F;
  v11->__r_.__value_.__s.__data_[v13] = 0;
LABEL_22:
  *(_OWORD *)__p = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[15] = *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  memset(&v15, 0, sizeof(v15));
  v17 = v14;
  webrtc::ParseFailed(a1, a2, 0, (__n128 *)__p, a4);
  if ((v17 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_26:
    operator delete(v15.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_26;
}

uint64_t webrtc::GetValueFromString<int>(uint64_t a1, unint64_t a2, void **__src, size_t __len, _DWORD *a5, uint64_t a6)
{
  int64_t v12;
  char v13;
  BOOL v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  size_t v18;
  std::string *v19;
  void **v20;
  unint64_t v21;
  int v22;
  std::string::size_type v23;
  std::string::size_type size;
  std::string *v25;
  _BYTE *v26;
  std::string::size_type v27;
  char v28;
  std::string v30;
  _BYTE __p[23];
  char v32;

  v12 = rtc::string_to_number_internal::ParseSigned(__src, __len, 10);
  if (v13)
    v14 = v12 < (uint64_t)0xFFFFFFFF80000000;
  else
    v14 = 1;
  v15 = !v14 && v12 <= 0x7FFFFFFF;
  v16 = !v15;
  if (!v15)
  {
    memset(&v30, 0, sizeof(v30));
    if (&v30 > (std::string *)"Invalid value: " || (char *)&v30.__r_.__value_.__r.__words[1] + 7 <= "Invalid value: ")
    {
      strcpy((char *)&v30, "Invalid value: ");
      *((_BYTE *)&v30.__r_.__value_.__s + 23) = 15;
      if (__src || !__len)
      {
        if (__len <= 7)
        {
          if (!__len)
          {
            LODWORD(v21) = 15;
            goto LABEL_33;
          }
          if ((char *)&v30.__r_.__value_.__r.__words[1] + 7 > (char *)__src
            || (char *)&v30.__r_.__value_.__r.__words[1] + __len + 7 <= (char *)__src)
          {
            memmove((char *)&v30.__r_.__value_.__r.__words[1] + 7, __src, __len);
            if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
              v30.__r_.__value_.__l.__size_ = __len + 15;
            else
              *((_BYTE *)&v30.__r_.__value_.__s + 23) = __len + 15;
            v30.__r_.__value_.__s.__data_[__len + 15] = 0;
            LODWORD(v21) = HIBYTE(v30.__r_.__value_.__r.__words[2]);
            goto LABEL_33;
          }
        }
        else
        {
          if (__len - 0x7FFFFFFFFFFFFFE8 <= 0x800000000000001ELL)
            goto LABEL_55;
          v17 = 44;
          if (__len + 15 > 0x2C)
            v17 = __len + 15;
          v18 = (v17 | 7) + 1;
          v19 = (std::string *)operator new(v18);
          v20 = (void **)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
          if (&v30 < v19 || (std::string *)((char *)&v19->__r_.__value_.__r.__words[1] + 7) <= &v30)
          {
            qmemcpy(v19, "Invalid value: ", 15);
            if (v20 > __src || (void **)((char *)v20 + __len) <= __src)
            {
              memcpy(v20, __src, __len);
              v30.__r_.__value_.__l.__size_ = __len + 15;
              v30.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
              v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              v19->__r_.__value_.__s.__data_[__len + 15] = 0;
              v21 = (v18 | 0x8000000000000000) >> 56;
LABEL_33:
              v22 = (char)v21;
              if ((v21 & 0x80u) == 0)
                v23 = 22;
              else
                v23 = (v30.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v21 & 0x80u) == 0)
                size = v21;
              else
                size = v30.__r_.__value_.__l.__size_;
              if (v23 == size)
              {
                std::string::__grow_by_and_replace(&v30, v23, 1uLL, v23, v23, 0, 1uLL, ".");
                goto LABEL_49;
              }
              v25 = (std::string *)v30.__r_.__value_.__r.__words[0];
              if (v22 >= 0)
                v25 = &v30;
              v26 = (char *)v25 + size;
              if ((char *)v25 + size > "." || v26 + 1 <= ".")
              {
                *v26 = 46;
                v27 = size + 1;
                if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
                  v30.__r_.__value_.__l.__size_ = v27;
                else
                  *((_BYTE *)&v30.__r_.__value_.__s + 23) = v27 & 0x7F;
                v25->__r_.__value_.__s.__data_[v27] = 0;
LABEL_49:
                *(_OWORD *)__p = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
                *(_QWORD *)&__p[15] = *(std::string::size_type *)((char *)&v30.__r_.__value_.__r.__words[1] + 7);
                v28 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
                memset(&v30, 0, sizeof(v30));
                v32 = v28;
                webrtc::ParseFailed(a1, a2, 0, (__n128 *)__p, a6);
                if (v32 < 0)
                {
                  operator delete(*(void **)__p);
                  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return v16 ^ 1u;
                }
                else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  return v16 ^ 1u;
                }
                operator delete(v30.__r_.__value_.__l.__data_);
                return v16 ^ 1u;
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_55:
    abort();
  }
  *a5 = v12;
  return v16 ^ 1u;
}

uint64_t webrtc::GetValueFromString<unsigned int>(uint64_t a1, unint64_t a2, void **__src, size_t __len, _DWORD *a5, uint64_t a6)
{
  unint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  std::string *v18;
  void **v19;
  unint64_t v20;
  int v21;
  std::string::size_type v22;
  std::string::size_type size;
  std::string *v24;
  _BYTE *v25;
  std::string::size_type v26;
  char v27;
  std::string v29;
  _BYTE __p[23];
  char v31;

  v12 = rtc::string_to_number_internal::ParseUnsigned(__src, __len, 10);
  if (v13)
    v14 = HIDWORD(v12) == 0;
  else
    v14 = 0;
  v15 = v14;
  if (!v14)
  {
    memset(&v29, 0, sizeof(v29));
    if (&v29 > (std::string *)"Invalid value: " || (char *)&v29.__r_.__value_.__r.__words[1] + 7 <= "Invalid value: ")
    {
      strcpy((char *)&v29, "Invalid value: ");
      *((_BYTE *)&v29.__r_.__value_.__s + 23) = 15;
      if (__src || !__len)
      {
        if (__len <= 7)
        {
          if (!__len)
          {
            LODWORD(v20) = 15;
            goto LABEL_31;
          }
          if ((char *)&v29.__r_.__value_.__r.__words[1] + 7 > (char *)__src
            || (char *)&v29.__r_.__value_.__r.__words[1] + __len + 7 <= (char *)__src)
          {
            memmove((char *)&v29.__r_.__value_.__r.__words[1] + 7, __src, __len);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              v29.__r_.__value_.__l.__size_ = __len + 15;
            else
              *((_BYTE *)&v29.__r_.__value_.__s + 23) = __len + 15;
            v29.__r_.__value_.__s.__data_[__len + 15] = 0;
            LODWORD(v20) = HIBYTE(v29.__r_.__value_.__r.__words[2]);
            goto LABEL_31;
          }
        }
        else
        {
          if (__len - 0x7FFFFFFFFFFFFFE8 <= 0x800000000000001ELL)
            goto LABEL_53;
          v16 = 44;
          if (__len + 15 > 0x2C)
            v16 = __len + 15;
          v17 = (v16 | 7) + 1;
          v18 = (std::string *)operator new(v17);
          v19 = (void **)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
          if (&v29 < v18 || (std::string *)((char *)&v18->__r_.__value_.__r.__words[1] + 7) <= &v29)
          {
            qmemcpy(v18, "Invalid value: ", 15);
            if (v19 > __src || (void **)((char *)v19 + __len) <= __src)
            {
              memcpy(v19, __src, __len);
              v29.__r_.__value_.__l.__size_ = __len + 15;
              v29.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
              v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
              v18->__r_.__value_.__s.__data_[__len + 15] = 0;
              v20 = (v17 | 0x8000000000000000) >> 56;
LABEL_31:
              v21 = (char)v20;
              if ((v20 & 0x80u) == 0)
                v22 = 22;
              else
                v22 = (v29.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v20 & 0x80u) == 0)
                size = v20;
              else
                size = v29.__r_.__value_.__l.__size_;
              if (v22 == size)
              {
                std::string::__grow_by_and_replace(&v29, v22, 1uLL, v22, v22, 0, 1uLL, ".");
                goto LABEL_47;
              }
              v24 = (std::string *)v29.__r_.__value_.__r.__words[0];
              if (v21 >= 0)
                v24 = &v29;
              v25 = (char *)v24 + size;
              if ((char *)v24 + size > "." || v25 + 1 <= ".")
              {
                *v25 = 46;
                v26 = size + 1;
                if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
                  v29.__r_.__value_.__l.__size_ = v26;
                else
                  *((_BYTE *)&v29.__r_.__value_.__s + 23) = v26 & 0x7F;
                v24->__r_.__value_.__s.__data_[v26] = 0;
LABEL_47:
                *(_OWORD *)__p = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
                *(_QWORD *)&__p[15] = *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 7);
                v27 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
                memset(&v29, 0, sizeof(v29));
                v31 = v27;
                webrtc::ParseFailed(a1, a2, 0, (__n128 *)__p, a6);
                if (v31 < 0)
                {
                  operator delete(*(void **)__p);
                  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return v15;
                }
                else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  return v15;
                }
                operator delete(v29.__r_.__value_.__l.__data_);
                return v15;
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_53:
    abort();
  }
  *a5 = v12;
  return v15;
}

void webrtc::ParseFailed(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  uint64_t v5;

  *(_OWORD *)__p = *(_OWORD *)a3;
  v5 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  webrtc::ParseFailed(a1, a2, 0, (__n128 *)__p, a4);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

uint64_t webrtc::GetValueFromString<unsigned short>(uint64_t a1, unint64_t a2, void **__src, size_t __len, _WORD *a5, uint64_t a6)
{
  unint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  std::string *v18;
  void **v19;
  unint64_t v20;
  int v21;
  std::string::size_type v22;
  std::string::size_type size;
  std::string *v24;
  _BYTE *v25;
  std::string::size_type v26;
  char v27;
  std::string v29;
  _BYTE __p[23];
  char v31;

  v12 = rtc::string_to_number_internal::ParseUnsigned(__src, __len, 10);
  if (v13)
    v14 = v12 >= 0x10000;
  else
    v14 = 1;
  v15 = !v14;
  if ((_DWORD)v15 != 1)
  {
    memset(&v29, 0, sizeof(v29));
    if (&v29 > (std::string *)"Invalid value: " || (char *)&v29.__r_.__value_.__r.__words[1] + 7 <= "Invalid value: ")
    {
      strcpy((char *)&v29, "Invalid value: ");
      *((_BYTE *)&v29.__r_.__value_.__s + 23) = 15;
      if (__src || !__len)
      {
        if (__len <= 7)
        {
          if (!__len)
          {
            LODWORD(v20) = 15;
            goto LABEL_30;
          }
          if ((char *)&v29.__r_.__value_.__r.__words[1] + 7 > (char *)__src
            || (char *)&v29.__r_.__value_.__r.__words[1] + __len + 7 <= (char *)__src)
          {
            memmove((char *)&v29.__r_.__value_.__r.__words[1] + 7, __src, __len);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              v29.__r_.__value_.__l.__size_ = __len + 15;
            else
              *((_BYTE *)&v29.__r_.__value_.__s + 23) = __len + 15;
            v29.__r_.__value_.__s.__data_[__len + 15] = 0;
            LODWORD(v20) = HIBYTE(v29.__r_.__value_.__r.__words[2]);
            goto LABEL_30;
          }
        }
        else
        {
          if (__len - 0x7FFFFFFFFFFFFFE8 <= 0x800000000000001ELL)
            goto LABEL_52;
          v16 = 44;
          if (__len + 15 > 0x2C)
            v16 = __len + 15;
          v17 = (v16 | 7) + 1;
          v18 = (std::string *)operator new(v17);
          v19 = (void **)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
          if (&v29 < v18 || (std::string *)((char *)&v18->__r_.__value_.__r.__words[1] + 7) <= &v29)
          {
            qmemcpy(v18, "Invalid value: ", 15);
            if (v19 > __src || (void **)((char *)v19 + __len) <= __src)
            {
              memcpy(v19, __src, __len);
              v29.__r_.__value_.__l.__size_ = __len + 15;
              v29.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
              v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
              v18->__r_.__value_.__s.__data_[__len + 15] = 0;
              v20 = (v17 | 0x8000000000000000) >> 56;
LABEL_30:
              v21 = (char)v20;
              if ((v20 & 0x80u) == 0)
                v22 = 22;
              else
                v22 = (v29.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v20 & 0x80u) == 0)
                size = v20;
              else
                size = v29.__r_.__value_.__l.__size_;
              if (v22 == size)
              {
                std::string::__grow_by_and_replace(&v29, v22, 1uLL, v22, v22, 0, 1uLL, ".");
                goto LABEL_46;
              }
              v24 = (std::string *)v29.__r_.__value_.__r.__words[0];
              if (v21 >= 0)
                v24 = &v29;
              v25 = (char *)v24 + size;
              if ((char *)v24 + size > "." || v25 + 1 <= ".")
              {
                *v25 = 46;
                v26 = size + 1;
                if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
                  v29.__r_.__value_.__l.__size_ = v26;
                else
                  *((_BYTE *)&v29.__r_.__value_.__s + 23) = v26 & 0x7F;
                v24->__r_.__value_.__s.__data_[v26] = 0;
LABEL_46:
                *(_OWORD *)__p = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
                *(_QWORD *)&__p[15] = *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 7);
                v27 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
                memset(&v29, 0, sizeof(v29));
                v31 = v27;
                webrtc::ParseFailed(a1, a2, 0, (__n128 *)__p, a6);
                if (v31 < 0)
                {
                  operator delete(*(void **)__p);
                  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return v15;
                }
                else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  return v15;
                }
                operator delete(v29.__r_.__value_.__l.__data_);
                return v15;
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_52:
    abort();
  }
  *a5 = v12;
  return v15;
}

uint64_t webrtc::ParseSctpPort(uint64_t a1, unint64_t a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v5;
  void *v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  char v13;
  BOOL v14;
  char *v16;
  void *__p;
  __int128 v19;
  void *v20;
  __int128 v21;

  if (a2 <= 1)
LABEL_28:
    abort();
  v5 = a2 - 2;
  if ((uint64_t)(a2 - 2) < 0 || !a1 && a2 != 2)
    goto LABEL_27;
  rtc::split(a1 + 2, a2 - 2, 0x3Au, (char **)&__p);
  v9 = __p;
  if ((_QWORD)v19 - (_QWORD)__p <= 0x1FuLL)
  {
    rtc::split(a1 + 2, v5, 0x20u, (char **)&v20);
    if (__p)
    {
      *(_QWORD *)&v19 = __p;
      operator delete(__p);
    }
    v9 = v20;
    __p = v20;
    v19 = v21;
    if ((_QWORD)v21 - (_QWORD)v20 <= 0x1FuLL)
    {
      webrtc::ParseFailedExpectMinFieldNum(a1, a2, 2, a4);
      v10 = 0;
      v11 = __p;
      if (!__p)
        return v10;
      goto LABEL_23;
    }
  }
  v12 = rtc::string_to_number_internal::ParseSigned(*((void ***)v9 + 2), *((_QWORD *)v9 + 3), 10);
  if (v13)
    v14 = v12 < (uint64_t)0xFFFFFFFF80000000;
  else
    v14 = 1;
  if (!v14 && v12 <= 0x7FFFFFFF)
  {
    *a3 = v12;
    v10 = 1;
    v11 = __p;
    if (!__p)
      return v10;
    goto LABEL_23;
  }
  v16 = (char *)operator new(0x20uLL);
  if (v16 <= "Invalid sctp port value." && v16 + 24 > "Invalid sctp port value.")
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  strcpy(v16, "Invalid sctp port value.");
  v20 = v16;
  v21 = xmmword_208F08630;
  webrtc::ParseFailed(a1, a2, 0, (__n128 *)&v20, a4);
  if (SHIBYTE(v21) < 0)
    operator delete(v20);
  v10 = 0;
  v11 = __p;
  if (__p)
  {
LABEL_23:
    *(_QWORD *)&v19 = v11;
    operator delete(v11);
  }
  return v10;
}

uint64_t webrtc::ParseSctpMaxMessageSize(uint64_t a1, unint64_t a2, _DWORD *a3, uint64_t a4)
{
  int64_t v5;
  uint64_t v9;
  _BYTE *v10;
  int64_t v11;
  char v12;
  BOOL v13;
  char *v15;
  void *v17;
  _BYTE *v18;
  void *__p;
  __int128 v20;

  if (a2 <= 1)
LABEL_25:
    abort();
  v5 = a2 - 2;
  if (v5 < 0 || !a1 && v5)
    goto LABEL_24;
  rtc::split(a1 + 2, v5, 0x3Au, (char **)&v17);
  if ((unint64_t)(v18 - (_BYTE *)v17) <= 0x1F)
  {
    webrtc::ParseFailedExpectMinFieldNum(a1, a2, 2, a4);
    v9 = 0;
    v10 = v17;
    if (!v17)
      return v9;
    goto LABEL_20;
  }
  v11 = rtc::string_to_number_internal::ParseSigned(*((void ***)v17 + 2), *((_QWORD *)v17 + 3), 10);
  if (v12)
    v13 = v11 < (uint64_t)0xFFFFFFFF80000000;
  else
    v13 = 1;
  if (!v13 && v11 <= 0x7FFFFFFF)
  {
    *a3 = v11;
    v9 = 1;
    v10 = v17;
    if (!v17)
      return v9;
    goto LABEL_20;
  }
  v15 = (char *)operator new(0x20uLL);
  if (v15 <= "Invalid SCTP max message size." && v15 + 30 > "Invalid SCTP max message size.")
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  strcpy(v15, "Invalid SCTP max message size.");
  __p = v15;
  v20 = xmmword_208F05710;
  webrtc::ParseFailed(a1, a2, 0, (__n128 *)&__p, a4);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v9 = 0;
  v10 = v17;
  if (v17)
  {
LABEL_20:
    v18 = v10;
    operator delete(v10);
  }
  return v9;
}

void webrtc::WriteFmtpParameters(_QWORD *a1, std::string *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  const char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  int v10;
  int v11;
  _QWORD *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string::size_type size;
  int v19;
  std::string *v20;
  char *v21;
  std::string::size_type v22;
  size_t v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  char *v29;
  uint64_t v30;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::value_type *v38;
  std::string::size_type v39;
  _BYTE *v40;
  std::string::size_type v41;
  uint64_t v42;
  std::string::value_type *v43;
  std::string::size_type v44;
  _QWORD *v45;

  v2 = a1 + 1;
  v3 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v5 = &byte_208EB9246;
    do
    {
      v6 = (char *)(v3 + 4);
      if (*((char *)v3 + 55) < 0)
      {
        v7 = v3[5];
        if (v7 < 0 || ((v8 = *(char **)v6, v7) ? (v9 = v8 == 0) : (v9 = 0), v9))
        {
LABEL_109:
          __break(1u);
          return;
        }
      }
      else
      {
        v7 = *((unsigned __int8 *)v3 + 55);
        v8 = (char *)(v3 + 4);
      }
      if (v7 == 8)
      {
        if (*(_QWORD *)v8 == *(_QWORD *)"maxptime")
          goto LABEL_18;
      }
      else if (v7 == 5)
      {
        v10 = *(_DWORD *)v8;
        v11 = v8[4];
        if (v10 == *(_DWORD *)"ptime" && v11 == cricket::kCodecParamPTime[4])
        {
LABEL_18:
          v13 = (_QWORD *)v3[1];
          if (v13)
            goto LABEL_102;
          goto LABEL_105;
        }
      }
      if (!v5)
        goto LABEL_109;
      v14 = strlen(v5);
      v15 = v14;
      v16 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        size = a2->__r_.__value_.__l.__size_;
        v17 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v17 - size < v14)
        {
LABEL_24:
          std::string::__grow_by_and_replace(a2, v17, v14 - v17 + size, size, size, 0, v14, v5);
          v19 = *((char *)v3 + 55);
          if ((v19 & 0x80000000) == 0)
            goto LABEL_36;
          goto LABEL_38;
        }
      }
      else
      {
        v17 = 22;
        size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        if (22 - v16 < v14)
          goto LABEL_24;
      }
      if (!v14)
        goto LABEL_35;
      v20 = a2;
      if ((v16 & 0x80) != 0)
      {
        v20 = (std::string *)a2->__r_.__value_.__r.__words[0];
        v21 = (char *)(a2->__r_.__value_.__r.__words[0] + size);
        if (v21 > v5)
          goto LABEL_33;
      }
      else
      {
        v21 = (char *)a2 + size;
        if ((char *)a2 + size > v5)
          goto LABEL_33;
      }
      if (&v21[v15] > v5)
        goto LABEL_109;
LABEL_33:
      memcpy(v21, v5, v15);
      v22 = size + v15;
      if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = v22 & 0x7F;
        v20->__r_.__value_.__s.__data_[v22] = 0;
LABEL_35:
        v19 = *((char *)v3 + 55);
        if ((v19 & 0x80000000) == 0)
          goto LABEL_36;
        goto LABEL_38;
      }
      a2->__r_.__value_.__l.__size_ = v22;
      v20->__r_.__value_.__s.__data_[v22] = 0;
      v19 = *((char *)v3 + 55);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_36:
        v23 = v19;
        goto LABEL_41;
      }
LABEL_38:
      v23 = v3[5];
      if ((v23 & 0x8000000000000000) != 0)
        goto LABEL_109;
      v6 = *(char **)v6;
      if (v23)
      {
        if (!v6)
          goto LABEL_109;
      }
LABEL_41:
      v24 = (const std::string::value_type *)(v3 + 7);
      if (*((char *)v3 + 79) < 0)
      {
        v25 = v3[8];
        if ((v25 & 0x8000000000000000) != 0)
          goto LABEL_109;
        v24 = *(const std::string::value_type **)v24;
        if (v25)
        {
          if (!v24)
            goto LABEL_109;
        }
      }
      else
      {
        v25 = *((unsigned __int8 *)v3 + 79);
      }
      if (v23)
      {
        if (!v6)
          goto LABEL_109;
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        {
          v26 = a2->__r_.__value_.__l.__size_;
          v28 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v28 - v26 < v23)
            goto LABEL_58;
          v27 = (std::string *)a2->__r_.__value_.__r.__words[0];
          v29 = (char *)(a2->__r_.__value_.__r.__words[0] + v26);
          if (v29 > v6)
            goto LABEL_68;
LABEL_67:
          if (&v29[v23] > v6)
            goto LABEL_109;
LABEL_68:
          memmove(v29, v6, v23);
          v39 = v26 + v23;
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
          {
            a2->__r_.__value_.__l.__size_ = v39;
            v27->__r_.__value_.__s.__data_[v39] = 0;
            v33 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
            if ((v33 & 0x80000000) == 0)
              goto LABEL_59;
          }
          else
          {
            *((_BYTE *)&a2->__r_.__value_.__s + 23) = v39 & 0x7F;
            v27->__r_.__value_.__s.__data_[v39] = 0;
            v33 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
            if ((v33 & 0x80000000) == 0)
              goto LABEL_59;
          }
        }
        else
        {
          v26 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          v27 = a2;
          v28 = 22;
          if (22 - v26 >= v23)
          {
            v29 = (char *)a2 + v26;
            if ((char *)a2 + v26 > v6)
              goto LABEL_68;
            goto LABEL_67;
          }
LABEL_58:
          std::string::__grow_by_and_replace(a2, v28, v26 + v23 - v28, v26, v26, 0, v23, v6);
          v33 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
          if ((v33 & 0x80000000) == 0)
          {
LABEL_59:
            v34 = v33;
            v35 = a2;
            if ((_DWORD)v34 == 22)
            {
              v36 = 22;
              goto LABEL_73;
            }
LABEL_76:
            v40 = (char *)v35 + v34;
            if ((char *)v35 + v34 <= "=" && v40 + 1 > "=")
              goto LABEL_109;
            *v40 = 61;
            v41 = v34 + 1;
            if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
            {
              a2->__r_.__value_.__l.__size_ = v41;
              v35->__r_.__value_.__s.__data_[v41] = 0;
              if (v24)
                goto LABEL_83;
            }
            else
            {
              *((_BYTE *)&a2->__r_.__value_.__s + 23) = v41 & 0x7F;
              v35->__r_.__value_.__s.__data_[v41] = 0;
              if (v24)
                goto LABEL_83;
            }
LABEL_82:
            if (v25)
              goto LABEL_109;
LABEL_83:
            v42 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
            if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
            {
              v32 = a2->__r_.__value_.__l.__size_;
              v31 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v31 - v32 < v25)
              {
LABEL_85:
                std::string::__grow_by_and_replace(a2, v31, v25 - v31 + v32, v32, v32, 0, v25, v24);
LABEL_86:
                v5 = ";";
                v13 = (_QWORD *)v3[1];
                if (v13)
                  goto LABEL_102;
                goto LABEL_105;
              }
            }
            else
            {
              v31 = 22;
              v32 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
              if (22 - v42 < v25)
                goto LABEL_85;
            }
            if (!v25)
              goto LABEL_86;
            v37 = a2;
            if ((v42 & 0x80) != 0)
            {
              v37 = (std::string *)a2->__r_.__value_.__r.__words[0];
              v43 = (std::string::value_type *)(a2->__r_.__value_.__r.__words[0] + v32);
              if (v43 > v24)
                goto LABEL_95;
            }
            else
            {
              v43 = (char *)a2 + v32;
              if ((char *)a2 + v32 > v24)
                goto LABEL_95;
            }
            if (&v43[v25] > v24)
              goto LABEL_109;
LABEL_95:
            memmove(v43, v24, v25);
            v44 = v32 + v25;
            if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
            {
              a2->__r_.__value_.__l.__size_ = v44;
              v37->__r_.__value_.__s.__data_[v44] = 0;
              v5 = ";";
              v13 = (_QWORD *)v3[1];
              if (v13)
                goto LABEL_102;
              goto LABEL_105;
            }
LABEL_101:
            *((_BYTE *)&a2->__r_.__value_.__s + 23) = v44 & 0x7F;
            v37->__r_.__value_.__s.__data_[v44] = 0;
            v5 = ";";
            v13 = (_QWORD *)v3[1];
            if (v13)
              goto LABEL_102;
            goto LABEL_105;
          }
        }
        v34 = a2->__r_.__value_.__l.__size_;
        v36 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v36 != v34)
        {
          v35 = (std::string *)a2->__r_.__value_.__r.__words[0];
          goto LABEL_76;
        }
LABEL_73:
        std::string::__grow_by_and_replace(a2, v36, 1uLL, v36, v36, 0, 1uLL, "=");
        if (!v24)
          goto LABEL_82;
        goto LABEL_83;
      }
      if (!v24 && v25)
        goto LABEL_109;
      v30 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        v32 = a2->__r_.__value_.__l.__size_;
        v31 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v31 - v32 < v25)
          goto LABEL_85;
      }
      else
      {
        v31 = 22;
        v32 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        if (22 - v30 < v25)
          goto LABEL_85;
      }
      if (!v25)
        goto LABEL_86;
      v37 = a2;
      if ((v30 & 0x80) != 0)
      {
        v37 = (std::string *)a2->__r_.__value_.__r.__words[0];
        v38 = (std::string::value_type *)(a2->__r_.__value_.__r.__words[0] + v32);
        if (v38 > v24)
          goto LABEL_100;
      }
      else
      {
        v38 = (char *)a2 + v32;
        if ((char *)a2 + v32 > v24)
          goto LABEL_100;
      }
      if (&v38[v25] > v24)
        goto LABEL_109;
LABEL_100:
      memmove(v38, v24, v25);
      v44 = v32 + v25;
      if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_101;
      a2->__r_.__value_.__l.__size_ = v44;
      v37->__r_.__value_.__s.__data_[v44] = 0;
      v5 = ";";
      v13 = (_QWORD *)v3[1];
      if (v13)
      {
        do
        {
LABEL_102:
          v45 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
        goto LABEL_3;
      }
      do
      {
LABEL_105:
        v45 = (_QWORD *)v3[2];
        v9 = *v45 == (_QWORD)v3;
        v3 = v45;
      }
      while (!v9);
LABEL_3:
      v3 = v45;
    }
    while (v45 != v2);
  }
}

void webrtc::AddFmtpLine(uint64_t a1, std::string *a2)
{
  int v4;
  std::string::size_type size;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string::size_type v11;
  int v12;
  std::string *v13;
  _BYTE *v14;
  std::string::size_type v15;
  int v16;
  int v17;
  size_t v18;
  std::string *v19;
  std::string v20;

  memset(&v20, 0, sizeof(v20));
  v4 = *(_DWORD *)(a1 + 12);
  webrtc::InitLine(97, "fmtp", 4uLL, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v20.__r_.__value_.__l.__size_;
    v6 = (v20.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v6 == v20.__r_.__value_.__l.__size_)
      goto LABEL_5;
    v7 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    if (HIBYTE(v20.__r_.__value_.__r.__words[2]) == 22)
    {
      v6 = 22;
LABEL_5:
      std::string::__grow_by_and_replace(&v20, v6, 1uLL, v6, v6, 0, 1uLL, ":");
      goto LABEL_16;
    }
    v7 = &v20;
  }
  if ((char *)v7 + size <= ":" && (char *)&v7->__r_.__value_.__l.__data_ + size + 1 > ":")
    goto LABEL_41;
  v7->__r_.__value_.__s.__data_[size] = 58;
  v9 = size + 1;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    v20.__r_.__value_.__l.__size_ = v9;
  else
    *((_BYTE *)&v20.__r_.__value_.__s + 23) = v9 & 0x7F;
  v7->__r_.__value_.__s.__data_[v9] = 0;
LABEL_16:
  rtc::StringBuilder::operator<<(&v20, v4);
  v10 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = 22;
  else
    v11 = (v20.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v20.__r_.__value_.__l.__size_;
  if (v11 != v10)
  {
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v20;
    else
      v13 = (std::string *)v20.__r_.__value_.__r.__words[0];
    v14 = (char *)v13 + v10;
    if ((char *)v13 + v10 <= " " && v14 + 1 > " ")
      goto LABEL_41;
    *v14 = 32;
    v15 = v10 + 1;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      v20.__r_.__value_.__l.__size_ = v15;
      v13->__r_.__value_.__s.__data_[v15] = 0;
      webrtc::WriteFmtpParameters((_QWORD *)(a1 + 168), &v20);
      if (v17)
        goto LABEL_34;
    }
    else
    {
      *((_BYTE *)&v20.__r_.__value_.__s + 23) = v15 & 0x7F;
      v13->__r_.__value_.__s.__data_[v15] = 0;
      webrtc::WriteFmtpParameters((_QWORD *)(a1 + 168), &v20);
      if (v16)
        goto LABEL_34;
    }
LABEL_23:
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_40:
    operator delete(v20.__r_.__value_.__l.__data_);
    return;
  }
  std::string::__grow_by_and_replace(&v20, v11, 1uLL, v11, v11, 0, 1uLL, " ");
  webrtc::WriteFmtpParameters((_QWORD *)(a1 + 168), &v20);
  if (!v12)
    goto LABEL_23;
LABEL_34:
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v18 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    v19 = &v20;
    goto LABEL_39;
  }
  v18 = v20.__r_.__value_.__l.__size_;
  if ((v20.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || (v19 = (std::string *)v20.__r_.__value_.__r.__words[0], v20.__r_.__value_.__l.__size_)
    && !v20.__r_.__value_.__r.__words[0])
  {
LABEL_41:
    __break(1u);
    return;
  }
LABEL_39:
  webrtc::AddLine((char *)v19, v18, a2);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_40;
}

void webrtc::AddRtcpFbLines(uint64_t a1, std::string *a2)
{
  char **v2;
  char **v3;
  int v6;
  std::string::size_type size;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string *v14;
  char *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type v18;
  int v19;
  size_t v20;
  BOOL v21;
  char *v22;
  std::string *v23;
  _BYTE *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  char *v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  char *v33;
  int v34;
  size_t v35;
  BOOL v36;
  std::string *v37;
  _BYTE *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string *v42;
  char *v43;
  std::string::size_type v44;
  size_t v45;
  std::string *v46;
  std::string v47;

  v2 = *(char ***)(a1 + 192);
  v3 = *(char ***)(a1 + 200);
  while (v2 != v3)
  {
    memset(&v47, 0, sizeof(v47));
    v6 = *(_DWORD *)(a1 + 12);
    webrtc::InitLine(97, "rtcp-fb", 7uLL, &v47);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v47.__r_.__value_.__l.__size_;
      v8 = (v47.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v8 == v47.__r_.__value_.__l.__size_)
        goto LABEL_8;
      v9 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    else
    {
      size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      if (HIBYTE(v47.__r_.__value_.__r.__words[2]) == 22)
      {
        v8 = 22;
LABEL_8:
        std::string::__grow_by_and_replace(&v47, v8, 1uLL, v8, v8, 0, 1uLL, ":");
        if (v6 != -1)
          goto LABEL_9;
        goto LABEL_18;
      }
      v9 = &v47;
    }
    if ((char *)v9 + size <= ":" && (char *)&v9->__r_.__value_.__l.__data_ + size + 1 > ":")
      goto LABEL_119;
    v9->__r_.__value_.__s.__data_[size] = 58;
    v11 = size + 1;
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v47.__r_.__value_.__l.__size_ = v11;
      v9->__r_.__value_.__s.__data_[v11] = 0;
      if (v6 != -1)
      {
LABEL_9:
        rtc::StringBuilder::operator<<(&v47, v6);
        goto LABEL_33;
      }
    }
    else
    {
      *((_BYTE *)&v47.__r_.__value_.__s + 23) = v11 & 0x7F;
      v9->__r_.__value_.__s.__data_[v11] = 0;
      if (v6 != -1)
        goto LABEL_9;
    }
LABEL_18:
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = v47.__r_.__value_.__l.__size_;
      v13 = (v47.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v13 == v47.__r_.__value_.__l.__size_)
        goto LABEL_24;
      v14 = (std::string *)v47.__r_.__value_.__r.__words[0];
      v15 = (char *)(v47.__r_.__value_.__r.__words[0] + v47.__r_.__value_.__l.__size_);
      if (v47.__r_.__value_.__r.__words[0] + v47.__r_.__value_.__l.__size_ <= (unint64_t)"*")
        goto LABEL_28;
    }
    else
    {
      v12 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      if (HIBYTE(v47.__r_.__value_.__r.__words[2]) == 22)
      {
        v13 = 22;
LABEL_24:
        std::string::__grow_by_and_replace(&v47, v13, 1uLL, v13, v13, 0, 1uLL, "*");
        goto LABEL_33;
      }
      v14 = &v47;
      v15 = (char *)&v47 + HIBYTE(v47.__r_.__value_.__r.__words[2]);
      if (v15 <= "*")
      {
LABEL_28:
        if (v15 + 1 > "*")
          goto LABEL_119;
      }
    }
    *v15 = 42;
    v16 = v12 + 1;
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      v47.__r_.__value_.__l.__size_ = v16;
    else
      *((_BYTE *)&v47.__r_.__value_.__s + 23) = v16 & 0x7F;
    v14->__r_.__value_.__s.__data_[v16] = 0;
LABEL_33:
    v17 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = 22;
    else
      v18 = (v47.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = v47.__r_.__value_.__l.__size_;
    if (v18 == v17)
    {
      std::string::__grow_by_and_replace(&v47, v18, 1uLL, v18, v18, 0, 1uLL, " ");
      v19 = *((char *)v2 + 23);
      if ((v19 & 0x80000000) == 0)
        goto LABEL_40;
    }
    else
    {
      v23 = &v47;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v47.__r_.__value_.__r.__words[0];
      v24 = (char *)v23 + v17;
      if ((char *)v23 + v17 <= " " && v24 + 1 > " ")
      {
LABEL_119:
        __break(1u);
        return;
      }
      *v24 = 32;
      v25 = v17 + 1;
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        v47.__r_.__value_.__l.__size_ = v25;
        v23->__r_.__value_.__s.__data_[v25] = 0;
        v19 = *((char *)v2 + 23);
        if ((v19 & 0x80000000) == 0)
        {
LABEL_40:
          v20 = v19;
          v21 = v19 == 0;
          v22 = (char *)v2;
          goto LABEL_50;
        }
      }
      else
      {
        *((_BYTE *)&v47.__r_.__value_.__s + 23) = v25 & 0x7F;
        v23->__r_.__value_.__s.__data_[v25] = 0;
        v19 = *((char *)v2 + 23);
        if ((v19 & 0x80000000) == 0)
          goto LABEL_40;
      }
    }
    v20 = (size_t)v2[1];
    if ((v20 & 0x8000000000000000) != 0)
      goto LABEL_119;
    v22 = *v2;
    v21 = v20 == 0;
    if (v20)
    {
      if (!v22)
        goto LABEL_119;
    }
LABEL_50:
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = 22;
    else
      v26 = (v47.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      v27 = v47.__r_.__value_.__l.__size_;
    if (v26 - v27 >= v20)
    {
      if (!v21)
      {
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &v47;
        else
          v28 = (std::string *)v47.__r_.__value_.__r.__words[0];
        v29 = (char *)v28 + v27;
        if ((char *)v28 + v27 <= v22 && &v29[v20] > v22)
          goto LABEL_119;
        memmove(v29, v22, v20);
        v30 = v27 + v20;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          v47.__r_.__value_.__l.__size_ = v27 + v20;
        else
          *((_BYTE *)&v47.__r_.__value_.__s + 23) = v30 & 0x7F;
        v28->__r_.__value_.__s.__data_[v30] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v47, v26, v27 + v20 - v26, v27, v27, 0, v20, v22);
    }
    if (*((char *)v2 + 47) < 0)
    {
      if (!v2[4])
        goto LABEL_111;
    }
    else if (!*((_BYTE *)v2 + 47))
    {
      goto LABEL_111;
    }
    v31 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = 22;
    else
      v32 = (v47.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = v47.__r_.__value_.__l.__size_;
    if (v32 == v31)
    {
      std::string::__grow_by_and_replace(&v47, v32, 1uLL, v32, v32, 0, 1uLL, " ");
      v33 = (char *)(v2 + 3);
      v34 = *((char *)v2 + 47);
      if ((v34 & 0x80000000) == 0)
        goto LABEL_81;
    }
    else
    {
      v37 = &v47;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v37 = (std::string *)v47.__r_.__value_.__r.__words[0];
      v38 = (char *)v37 + v31;
      if ((char *)v37 + v31 <= " " && v38 + 1 > " ")
        goto LABEL_119;
      *v38 = 32;
      v39 = v31 + 1;
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        v47.__r_.__value_.__l.__size_ = v39;
        v37->__r_.__value_.__s.__data_[v39] = 0;
        v33 = (char *)(v2 + 3);
        v34 = *((char *)v2 + 47);
        if ((v34 & 0x80000000) == 0)
        {
LABEL_81:
          v35 = v34;
          v36 = v34 == 0;
          goto LABEL_91;
        }
      }
      else
      {
        *((_BYTE *)&v47.__r_.__value_.__s + 23) = v39 & 0x7F;
        v37->__r_.__value_.__s.__data_[v39] = 0;
        v33 = (char *)(v2 + 3);
        v34 = *((char *)v2 + 47);
        if ((v34 & 0x80000000) == 0)
          goto LABEL_81;
      }
    }
    v35 = (size_t)v2[4];
    if ((v35 & 0x8000000000000000) != 0)
      goto LABEL_119;
    v33 = *(char **)v33;
    v36 = v35 == 0;
    if (v35)
    {
      if (!v33)
        goto LABEL_119;
    }
LABEL_91:
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = 22;
    else
      v40 = (v47.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      v41 = v47.__r_.__value_.__l.__size_;
    if (v40 - v41 >= v35)
    {
      if (!v36)
      {
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v47;
        else
          v42 = (std::string *)v47.__r_.__value_.__r.__words[0];
        v43 = (char *)v42 + v41;
        if ((char *)v42 + v41 <= v33 && &v43[v35] > v33)
          goto LABEL_119;
        memmove(v43, v33, v35);
        v44 = v41 + v35;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          v47.__r_.__value_.__l.__size_ = v41 + v35;
        else
          *((_BYTE *)&v47.__r_.__value_.__s + 23) = v44 & 0x7F;
        v42->__r_.__value_.__s.__data_[v44] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v47, v40, v41 + v35 - v40, v41, v41, 0, v35, v33);
    }
LABEL_111:
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v45 = v47.__r_.__value_.__l.__size_;
      if ((v47.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_119;
      v46 = (std::string *)v47.__r_.__value_.__r.__words[0];
      if (v47.__r_.__value_.__l.__size_)
      {
        if (!v47.__r_.__value_.__r.__words[0])
          goto LABEL_119;
      }
    }
    else
    {
      v45 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      v46 = &v47;
    }
    webrtc::AddLine((char *)v46, v45, a2);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    v2 += 6;
  }
}

uint64_t *webrtc::GetParameter(const void **__s2, uint64_t a2, _DWORD *a3)
{
  const void **v4;
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  size_t v12;
  int v13;
  size_t v14;
  int64_t v15;
  char v16;
  BOOL v17;
  BOOL v18;
  int v19;

  v4 = __s2;
  v5 = (uint64_t *)(a2 + 8);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(a2, __s2, *(uint64_t **)(a2 + 8), (uint64_t *)(a2 + 8));
  if (v5 == result)
    return 0;
  v7 = result;
  if (*((char *)v4 + 23) < 0)
  {
    v8 = (size_t)v4[1];
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_39;
    v4 = (const void **)*v4;
    if (v8)
    {
      if (!v4)
        goto LABEL_39;
    }
  }
  else
  {
    v8 = *((unsigned __int8 *)v4 + 23);
  }
  v9 = result + 4;
  if (*((char *)result + 55) < 0)
  {
    v10 = result[5];
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_39;
    v9 = (_QWORD *)*v9;
    if (v10 && v9 == 0)
      goto LABEL_39;
  }
  else
  {
    v10 = *((unsigned __int8 *)result + 55);
  }
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v4, v9, v12);
  if (v13)
  {
    if ((v13 & 0x80000000) == 0)
      goto LABEL_19;
    return 0;
  }
  if (v8 < v10)
    return 0;
LABEL_19:
  result = v7 + 7;
  if ((*((char *)v7 + 79) & 0x80000000) == 0)
  {
    v14 = *((unsigned __int8 *)v7 + 79);
    goto LABEL_26;
  }
  v14 = v7[8];
  if ((v14 & 0x8000000000000000) != 0 || (result = (uint64_t *)*result, v14) && !result)
  {
LABEL_39:
    __break(1u);
    return result;
  }
LABEL_26:
  v15 = rtc::string_to_number_internal::ParseSigned((void **)result, v14, 10);
  if (v16)
    v17 = v15 < (uint64_t)0xFFFFFFFF80000000;
  else
    v17 = 1;
  v18 = !v17 && v15 <= 0x7FFFFFFF;
  v19 = !v18;
  if (v18)
    *a3 = v15;
  return (uint64_t *)(v19 ^ 1u);
}

unint64_t webrtc::ParseConnectionData(unsigned __int8 *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  size_t v9;
  const char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _WORD *v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  void **v21;
  __int128 *p_src;
  int v23;
  int *v24;
  char *v25[2];
  char v26;
  void *__src;
  size_t __n;
  size_t __len;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  __int128 v34;

  v30 = 0;
  v31 = 0;
  v32 = 0;
  __src = 0;
  __n = 0;
  __len = 0;
  result = rtc::tokenize_first(a1, a2, 61, (uint64_t)&v30, (uint64_t)&__src);
  if ((result & 1) == 0)
  {
    result = (unint64_t)operator new(0x28uLL);
    v10 = "Failed to parse the network type.";
    if (result > (unint64_t)"Failed to parse the network type.")
      goto LABEL_6;
    goto LABEL_5;
  }
  if (SHIBYTE(__len) < 0)
  {
    v9 = __n;
    if ((__n & 0x8000000000000000) != 0)
      goto LABEL_66;
    result = (unint64_t)__src;
    if (__n)
    {
      if (!__src)
        goto LABEL_66;
    }
  }
  else
  {
    v9 = HIBYTE(__len);
    result = (unint64_t)&__src;
  }
  result = rtc::tokenize_first((unsigned __int8 *)result, v9, 32, (uint64_t)&v30, (uint64_t)&__src);
  if ((_DWORD)result)
  {
    if (SHIBYTE(v32) < 0)
    {
      v13 = v31;
      if (v31 < 0)
        goto LABEL_66;
      v14 = v30;
      if (v31)
      {
        if (!v30)
          goto LABEL_66;
      }
    }
    else
    {
      v13 = HIBYTE(v32);
      v14 = &v30;
    }
    if (v13 == 2 && *v14 == 20041)
    {
      if (SHIBYTE(__len) < 0)
      {
        v17 = __n;
        if ((__n & 0x8000000000000000) != 0)
          goto LABEL_66;
        result = (unint64_t)__src;
        if (__n)
        {
          if (!__src)
            goto LABEL_66;
        }
      }
      else
      {
        v17 = HIBYTE(__len);
        result = (unint64_t)&__src;
      }
      result = rtc::tokenize_first((unsigned __int8 *)result, v17, 32, (uint64_t)&v30, (uint64_t)&__src);
      if ((result & 1) != 0)
      {
        v18 = HIBYTE(__len);
        v19 = __n;
        if ((__len & 0x8000000000000000) == 0)
          v20 = HIBYTE(__len);
        else
          v20 = __n;
        if (v20)
        {
          v21 = (__len & 0x8000000000000000) == 0 ? &__src : (void **)__src;
          result = (unint64_t)memchr(v21, 47, v20);
          if (result)
          {
            if (result - (_QWORD)v21 != -1)
            {
              result = (unint64_t)operator new(0x50uLL);
              if (result > (unint64_t)"Failed to parse the connection data. Multicast is not currently supported."
                || result + 74 <= (unint64_t)"Failed to parse the connection data. Multicast is not currently supported.")
              {
                strcpy((char *)result, "Failed to parse the connection data. Multicast is not currently supported.");
                __p = (void *)result;
                v12 = xmmword_208F1ABA0;
                goto LABEL_21;
              }
              goto LABEL_66;
            }
          }
        }
        if ((v18 & 0x80) != 0)
        {
          if ((v19 & 0x8000000000000000) != 0)
            goto LABEL_66;
          p_src = (__int128 *)__src;
          if (v19)
          {
            if (!__src)
              goto LABEL_66;
          }
        }
        else
        {
          p_src = (__int128 *)&__src;
          v19 = v18;
        }
        rtc::SocketAddress::SetIP(a3, p_src, v19);
        v24 = (int *)(a3 + 32);
        v23 = *(_DWORD *)(a3 + 32);
        if (v23 == 2)
        {
          if (!std::operator==[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v30, "IP4"))goto LABEL_61;
          v23 = *v24;
        }
        if (v23 != 30
          || (std::operator==[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v30, "IP6") & 1) != 0)
        {
          v16 = 1;
          goto LABEL_25;
        }
LABEL_61:
        if (*(char *)(a3 + 23) < 0)
        {
          **(_BYTE **)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 23) = 0;
        }
        *(_BYTE *)(a3 + 64) = 0;
        *(_QWORD *)v24 = 0;
        *(_QWORD *)(a3 + 40) = 0;
        *(_DWORD *)(a3 + 48) = 0;
        *(_WORD *)(a3 + 56) = 0;
        *(_DWORD *)(a3 + 60) = 0;
        std::string::basic_string[abi:sn180100]<0>(v25, "Failed to parse the connection data. The address type is mismatching.");
        webrtc::ParseFailed((uint64_t)a1, a2, (uint64_t)v25, a4);
        v16 = 0;
        if (v26 < 0)
        {
          v15 = v25[0];
          goto LABEL_23;
        }
LABEL_25:
        if (SHIBYTE(__len) < 0)
        {
          operator delete(__src);
          if ((SHIBYTE(v32) & 0x80000000) == 0)
            return v16;
        }
        else if ((SHIBYTE(v32) & 0x80000000) == 0)
        {
          return v16;
        }
        operator delete(v30);
        return v16;
      }
      result = (unint64_t)operator new(0x28uLL);
      v10 = "Failed to parse the address type.";
      if (result > (unint64_t)"Failed to parse the address type.")
      {
LABEL_6:
        *(_WORD *)(result + 32) = 46;
        v11 = *((_OWORD *)v10 + 1);
        *(_OWORD *)result = *(_OWORD *)v10;
        *(_OWORD *)(result + 16) = v11;
        __p = (void *)result;
        v12 = xmmword_208F0AC50;
LABEL_21:
        v34 = v12;
        webrtc::ParseFailed((uint64_t)a1, a2, 0, (__n128 *)&__p, a4);
        if ((SHIBYTE(v34) & 0x80000000) == 0)
        {
LABEL_24:
          v16 = 0;
          goto LABEL_25;
        }
        v15 = (char *)__p;
LABEL_23:
        operator delete(v15);
        goto LABEL_24;
      }
LABEL_5:
      if (result + 33 > (unint64_t)v10)
        goto LABEL_66;
      goto LABEL_6;
    }
  }
  result = (unint64_t)operator new(0x58uLL);
  if (result > (unint64_t)"Failed to parse the connection data. The network type is not currently supported."
    || result + 81 <= (unint64_t)"Failed to parse the connection data. The network type is not currently supported.")
  {
    strcpy((char *)result, "Failed to parse the connection data. The network type is not currently supported.");
    __p = (void *)result;
    v12 = xmmword_208F1DF00;
    goto LABEL_21;
  }
LABEL_66:
  __break(1u);
  return result;
}

uint64_t webrtc::HasDuplicateMsidLines(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  size_t v12;
  int v13;
  __int128 v14;
  BOOL v15;
  char v16;
  BOOL v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  const void **v24;
  int v25;
  unint64_t v26;
  const void *v27;
  std::string *v29;
  size_t v30;
  size_t v31;
  int v32;
  _QWORD *v33;
  size_t v34;
  std::string *p_p;
  size_t v36;
  size_t v37;
  const void **v38;
  std::string *v39;
  size_t v40;
  uint64_t *v41;
  int v42;
  size_t v43;
  uint64_t *v44;
  size_t v45;
  int v46;
  uint64_t *v47;
  const void *v48;
  std::string *v49;
  size_t v50;
  uint64_t *v51;
  int v52;
  size_t v53;
  uint64_t *v54;
  size_t v55;
  int v56;
  std::string *v57;
  unint64_t v58;
  const void **v59;
  size_t v60;
  const void *v61;
  unint64_t v62;
  size_t v63;
  int v64;
  std::string *v65;
  size_t v66;
  std::string *v67;
  size_t v68;
  _QWORD *v69;
  size_t v70;
  size_t v71;
  int v72;
  _QWORD *v73;
  size_t v74;
  size_t v75;
  size_t v76;
  std::string *v77;
  size_t v78;
  size_t v79;
  char *v80;
  __int128 *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  _BYTE *v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v98;
  __int128 *v99;
  __int128 *v100;
  char v101;
  __int128 __s2;
  size_t v103;
  int v104;
  char v105;
  std::string v106;
  std::string v107;
  std::string __p;
  uint64_t *v109;
  char *v110;
  uint64_t v111;

  v110 = 0;
  v111 = 0;
  v109 = (uint64_t *)&v110;
  if (a1 == a2)
  {
LABEL_225:
    v95 = 0;
    goto LABEL_226;
  }
  v2 = a1;
  while (1)
  {
    v98 = v2;
    v3 = *(_QWORD *)(v2 + 32);
    v5 = *(__int128 **)(v3 + 96);
    v4 = *(__int128 **)(v3 + 104);
    v99 = v4;
LABEL_6:
    if (v5 != v4)
      break;
    v2 = v98 + 40;
    if (v98 + 40 == a2)
      goto LABEL_225;
  }
  v6 = (__int128 *)*((_QWORD *)v5 + 12);
  if (v6 == *((__int128 **)v5 + 13))
  {
    *((_BYTE *)&v106.__r_.__value_.__s + 23) = 0;
    v106.__r_.__value_.__s.__data_[0] = 0;
  }
  else if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v106.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v7;
  }
  v107 = v106;
  memset(&v106, 0, sizeof(v106));
  v100 = v5;
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v106.__r_.__value_.__l.__data_);
      v9 = (uint64_t)v110;
      v10 = (uint64_t *)&v110;
      v11 = (uint64_t *)&v110;
      if (!v110)
      {
LABEL_190:
        v80 = (char *)operator new(0x50uLL);
        *(std::string *)(v80 + 32) = v107;
        memset(&v107, 0, sizeof(v107));
        *(std::string *)(v80 + 56) = __p;
        memset(&__p, 0, sizeof(__p));
        *(_QWORD *)v80 = 0;
        *((_QWORD *)v80 + 1) = 0;
        *((_QWORD *)v80 + 2) = v10;
        *v11 = (uint64_t)v80;
        if (*v109)
        {
          v109 = (uint64_t *)*v109;
          v80 = (char *)*v11;
        }
        v81 = v100;
        v82 = (uint64_t)v110;
        v80[24] = v80 == v110;
        if (v80 != (char *)v82)
        {
          do
          {
            v83 = *((_QWORD *)v80 + 2);
            if (*(_BYTE *)(v83 + 24))
              break;
            v84 = *(_BYTE **)(v83 + 16);
            v85 = *(_QWORD *)v84;
            if (*(_QWORD *)v84 == v83)
            {
              v88 = *((_QWORD *)v84 + 1);
              if (!v88 || (v89 = *(unsigned __int8 *)(v88 + 24), v86 = (_BYTE *)(v88 + 24), v89))
              {
                if (*(char **)v83 == v80)
                {
                  *(_BYTE *)(v83 + 24) = 1;
                  v84[24] = 0;
                  v92 = *(_QWORD *)(v83 + 8);
                  *(_QWORD *)v84 = v92;
                  if (v92)
                    goto LABEL_206;
                }
                else
                {
                  v90 = *(uint64_t **)(v83 + 8);
                  v91 = *v90;
                  *(_QWORD *)(v83 + 8) = *v90;
                  if (v91)
                  {
                    *(_QWORD *)(v91 + 16) = v83;
                    v84 = *(_BYTE **)(v83 + 16);
                  }
                  v90[2] = (uint64_t)v84;
                  *(_QWORD *)(*(_QWORD *)(v83 + 16) + 8 * (**(_QWORD **)(v83 + 16) != v83)) = v90;
                  *v90 = v83;
                  *(_QWORD *)(v83 + 16) = v90;
                  v84 = (_BYTE *)v90[2];
                  v83 = *(_QWORD *)v84;
                  *((_BYTE *)v90 + 24) = 1;
                  v84[24] = 0;
                  v92 = *(_QWORD *)(v83 + 8);
                  *(_QWORD *)v84 = v92;
                  if (v92)
LABEL_206:
                    *(_QWORD *)(v92 + 16) = v84;
                }
                *(_QWORD *)(v83 + 16) = *((_QWORD *)v84 + 2);
                *(_QWORD *)(*((_QWORD *)v84 + 2) + 8 * (**((_QWORD **)v84 + 2) != (_QWORD)v84)) = v83;
                *(_QWORD *)(v83 + 8) = v84;
LABEL_214:
                *((_QWORD *)v84 + 2) = v83;
                break;
              }
            }
            else if (!v85 || (v87 = *(unsigned __int8 *)(v85 + 24), v86 = (_BYTE *)(v85 + 24), v87))
            {
              if (*(char **)v83 == v80)
              {
                v94 = *((_QWORD *)v80 + 1);
                *(_QWORD *)v83 = v94;
                if (v94)
                {
                  *(_QWORD *)(v94 + 16) = v83;
                  v84 = *(_BYTE **)(v83 + 16);
                }
                *((_QWORD *)v80 + 2) = v84;
                *(_QWORD *)(*(_QWORD *)(v83 + 16) + 8 * (**(_QWORD **)(v83 + 16) != v83)) = v80;
                *((_QWORD *)v80 + 1) = v83;
                *(_QWORD *)(v83 + 16) = v80;
                v84 = (_BYTE *)*((_QWORD *)v80 + 2);
                v80[24] = 1;
                v84[24] = 0;
                v83 = *((_QWORD *)v84 + 1);
                v93 = *(char **)v83;
                *((_QWORD *)v84 + 1) = *(_QWORD *)v83;
                if (v93)
LABEL_212:
                  *((_QWORD *)v93 + 2) = v84;
              }
              else
              {
                *(_BYTE *)(v83 + 24) = 1;
                v84[24] = 0;
                v83 = *((_QWORD *)v84 + 1);
                v93 = *(char **)v83;
                *((_QWORD *)v84 + 1) = *(_QWORD *)v83;
                if (v93)
                  goto LABEL_212;
              }
              *(_QWORD *)(v83 + 16) = *((_QWORD *)v84 + 2);
              *(_QWORD *)(*((_QWORD *)v84 + 2) + 8 * (**((_QWORD **)v84 + 2) != (_QWORD)v84)) = v83;
              *(_QWORD *)v83 = v84;
              goto LABEL_214;
            }
            *(_BYTE *)(v83 + 24) = 1;
            v80 = v84;
            v84[24] = v84 == (_BYTE *)v82;
            *v86 = 1;
          }
          while (v84 != (_BYTE *)v82);
        }
        ++v111;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_216;
LABEL_4:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_217;
        goto LABEL_5;
      }
    }
    else
    {
      v9 = (uint64_t)v110;
      v10 = (uint64_t *)&v110;
      v11 = (uint64_t *)&v110;
      if (!v110)
        goto LABEL_190;
    }
  }
  else
  {
    v8 = *v5;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    v9 = (uint64_t)v110;
    v10 = (uint64_t *)&v110;
    v11 = (uint64_t *)&v110;
    if (!v110)
      goto LABEL_190;
  }
  v12 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
  v13 = SHIBYTE(v107.__r_.__value_.__r.__words[2]);
  v14 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
  if (v107.__r_.__value_.__l.__size_)
    v15 = v107.__r_.__value_.__r.__words[0] == 0;
  else
    v15 = 0;
  v16 = !v15;
  v105 = v16;
  v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v104 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  __s2 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__l.__size_)
    v17 = __p.__r_.__value_.__r.__words[0] == 0;
  else
    v17 = 0;
  v18 = !v17;
  v101 = v18;
  v19 = (uint64_t *)&v110;
  v20 = v9;
  do
  {
    while (1)
    {
      v22 = (uint64_t *)v20;
      v23 = v19;
      v24 = (const void **)(v20 + 32);
      v25 = *(char *)(v20 + 55);
      if (v25 < 0)
      {
        v26 = v22[5];
        if ((v26 & 0x8000000000000000) != 0)
          goto LABEL_227;
        v27 = *v24;
        if (v26 && v27 == 0)
          goto LABEL_227;
      }
      else
      {
        v26 = v25;
        v27 = v24;
      }
      if (v13 < 0)
      {
        if ((*((_QWORD *)&v14 + 1) & 0x8000000000000000) != 0)
          goto LABEL_227;
        v30 = *((_QWORD *)&v14 + 1);
        v29 = (std::string *)v14;
        if ((v105 & 1) == 0)
          goto LABEL_227;
      }
      else
      {
        v29 = &v107;
        v30 = v12;
      }
      v31 = v30 >= v26 ? v26 : v30;
      v32 = memcmp(v27, v29, v31);
      if (!v32)
        break;
LABEL_46:
      if ((v32 & 0x80000000) == 0)
        goto LABEL_47;
LABEL_30:
      v21 = 1;
      v19 = v23;
      v20 = v22[1];
      if (!v20)
        goto LABEL_66;
    }
    if (v26 == v30)
    {
      v33 = v22 + 7;
      if (*((char *)v22 + 79) < 0)
      {
        v34 = v22[8];
        if ((v34 & 0x8000000000000000) != 0)
          goto LABEL_227;
        v33 = (_QWORD *)*v33;
        if (v34)
        {
          if (!v33)
            goto LABEL_227;
        }
      }
      else
      {
        v34 = *((unsigned __int8 *)v22 + 79);
      }
      p_p = &__p;
      v36 = v103;
      if (v104 < 0)
      {
        v36 = *((_QWORD *)&__s2 + 1);
        if ((*((_QWORD *)&__s2 + 1) & 0x8000000000000000) != 0)
          goto LABEL_227;
        p_p = (std::string *)__s2;
        if ((v101 & 1) == 0)
          goto LABEL_227;
      }
      if (v36 >= v34)
        v37 = v34;
      else
        v37 = v36;
      v32 = memcmp(v33, p_p, v37);
      if (v32)
        goto LABEL_46;
      if (v34 < v36)
        goto LABEL_30;
    }
    else if (v26 < v30)
    {
      goto LABEL_30;
    }
LABEL_47:
    v21 = 0;
    v19 = v22;
    v20 = *v22;
  }
  while (*v22);
LABEL_66:
  if (v19 == (uint64_t *)&v110)
    goto LABEL_125;
  if (v21)
    v38 = (const void **)(v23 + 4);
  else
    v38 = v24;
  if (v13 < 0)
  {
    if ((*((_QWORD *)&v14 + 1) & 0x8000000000000000) == 0)
    {
      v40 = *((_QWORD *)&v14 + 1);
      v39 = (std::string *)v14;
      if ((v105 & 1) != 0)
        goto LABEL_76;
    }
LABEL_227:
    __break(1u);
    goto LABEL_228;
  }
  v39 = &v107;
  v40 = v12;
LABEL_76:
  if (v21)
    v41 = v23;
  else
    v41 = v22;
  v42 = *((char *)v41 + 55);
  if ((v42 & 0x80000000) == 0)
  {
    v43 = v42;
    goto LABEL_87;
  }
  if (v21)
    v44 = v23;
  else
    v44 = v22;
  v43 = v44[5];
  if ((v43 & 0x8000000000000000) != 0)
    goto LABEL_227;
  v38 = (const void **)*v38;
  if (v43)
  {
    if (!v38)
      goto LABEL_227;
  }
LABEL_87:
  if (v43 >= v40)
    v45 = v40;
  else
    v45 = v43;
  v46 = memcmp(v39, v38, v45);
  if (v46)
  {
    if (v46 < 0)
      goto LABEL_125;
    goto LABEL_228;
  }
  if (v40 != v43)
  {
    if (v40 < v43)
      goto LABEL_125;
    goto LABEL_228;
  }
  if (v21)
    v47 = v23;
  else
    v47 = v22;
  if (v21)
    v48 = v23 + 7;
  else
    v48 = v22 + 7;
  v49 = &__p;
  v50 = v103;
  if (v104 < 0)
  {
    v50 = *((_QWORD *)&__s2 + 1);
    if ((*((_QWORD *)&__s2 + 1) & 0x8000000000000000) != 0)
      goto LABEL_227;
    v49 = (std::string *)__s2;
    if ((v101 & 1) == 0)
      goto LABEL_227;
  }
  if (v21)
    v51 = v23;
  else
    v51 = v22;
  v52 = *((char *)v51 + 79);
  if ((v52 & 0x80000000) == 0)
  {
    v53 = v52;
    goto LABEL_116;
  }
  v54 = v21 ? v23 : v22;
  v53 = v54[8];
  if ((v53 & 0x8000000000000000) != 0)
    goto LABEL_227;
  v48 = (const void *)v47[7];
  if (v53)
  {
    if (!v48)
      goto LABEL_227;
  }
LABEL_116:
  if (v53 >= v50)
    v55 = v50;
  else
    v55 = v53;
  v56 = memcmp(v49, v48, v55);
  if (!v56)
  {
    if (v50 >= v53)
      goto LABEL_228;
    while (1)
    {
      while (1)
      {
LABEL_125:
        v10 = (uint64_t *)v9;
        if (v13 < 0)
        {
          if ((*((_QWORD *)&v14 + 1) & 0x8000000000000000) != 0)
            goto LABEL_227;
          v58 = *((_QWORD *)&v14 + 1);
          v57 = (std::string *)v14;
          if ((v105 & 1) == 0)
            goto LABEL_227;
        }
        else
        {
          v57 = &v107;
          v58 = v12;
        }
        v59 = (const void **)(v9 + 32);
        v60 = *((unsigned __int8 *)v10 + 55);
        v61 = v10 + 4;
        v62 = v60;
        if (*((char *)v10 + 55) < 0)
        {
          v62 = v10[5];
          if ((v62 & 0x8000000000000000) != 0)
            goto LABEL_227;
          v61 = *v59;
          if (v62)
          {
            if (!v61)
              goto LABEL_227;
          }
        }
        v63 = v62 >= v58 ? v58 : v62;
        v64 = memcmp(v57, v61, v63);
        if (!v64)
          break;
LABEL_137:
        if (v64 < 0)
          goto LABEL_124;
LABEL_138:
        if ((v60 & 0x80) != 0)
        {
          v60 = v10[5];
          if ((v60 & 0x8000000000000000) != 0)
            goto LABEL_227;
          v59 = (const void **)*v59;
          if (v60)
          {
            if (!v59)
              goto LABEL_227;
          }
        }
        if (v13 < 0)
        {
          if ((*((_QWORD *)&v14 + 1) & 0x8000000000000000) != 0)
            goto LABEL_227;
          v66 = *((_QWORD *)&v14 + 1);
          v65 = (std::string *)v14;
          if ((v105 & 1) == 0)
            goto LABEL_227;
        }
        else
        {
          v65 = &v107;
          v66 = v12;
        }
        if (v66 >= v60)
          v71 = v60;
        else
          v71 = v66;
        v72 = memcmp(v59, v65, v71);
        if (v72)
        {
LABEL_156:
          if ((v72 & 0x80000000) == 0)
            goto LABEL_208;
          goto LABEL_188;
        }
        if (v60 != v66)
        {
          if (v60 >= v66)
            goto LABEL_208;
          goto LABEL_188;
        }
        v73 = v10 + 7;
        if (*((char *)v10 + 79) < 0)
        {
          v74 = v10[8];
          if ((v74 & 0x8000000000000000) != 0)
            goto LABEL_227;
          v73 = (_QWORD *)*v73;
          if (v74)
          {
            v75 = *((_QWORD *)&__s2 + 1);
            if (!v73)
              goto LABEL_227;
            v77 = &__p;
            v76 = v103;
            if (v104 < 0)
            {
LABEL_179:
              if ((v75 & 0x8000000000000000) != 0)
                goto LABEL_227;
              v77 = (std::string *)__s2;
              v76 = v75;
              if ((v101 & 1) == 0)
                goto LABEL_227;
            }
          }
          else
          {
            v75 = *((_QWORD *)&__s2 + 1);
            v76 = v103;
            v77 = &__p;
            if (v104 < 0)
              goto LABEL_179;
          }
        }
        else
        {
          v74 = *((unsigned __int8 *)v10 + 79);
          v75 = *((_QWORD *)&__s2 + 1);
          v76 = v103;
          v77 = &__p;
          if (v104 < 0)
            goto LABEL_179;
        }
        if (v76 >= v74)
          v79 = v74;
        else
          v79 = v76;
        v72 = memcmp(v73, v77, v79);
        if (v72)
          goto LABEL_156;
        if (v74 >= v76)
        {
LABEL_208:
          v81 = v100;
          if ((v104 & 0x80) != 0)
            goto LABEL_4;
LABEL_216:
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
LABEL_217:
            operator delete(v107.__r_.__value_.__l.__data_);
LABEL_5:
          v5 = v81 + 9;
          v4 = v99;
          goto LABEL_6;
        }
LABEL_188:
        v9 = v10[1];
        if (!v9)
        {
          v11 = v10 + 1;
          goto LABEL_190;
        }
      }
      if (v58 == v62)
      {
        v67 = &__p;
        v68 = v103;
        if (v104 < 0)
        {
          v68 = *((_QWORD *)&__s2 + 1);
          if ((*((_QWORD *)&__s2 + 1) & 0x8000000000000000) != 0)
            goto LABEL_227;
          v67 = (std::string *)__s2;
          if ((v101 & 1) == 0)
            goto LABEL_227;
        }
        v69 = v10 + 7;
        if (*((char *)v10 + 79) < 0)
        {
          v70 = v10[8];
          if ((v70 & 0x8000000000000000) != 0)
            goto LABEL_227;
          v69 = (_QWORD *)*v69;
          if (v70)
          {
            if (!v69)
              goto LABEL_227;
          }
        }
        else
        {
          v70 = *((unsigned __int8 *)v10 + 79);
        }
        if (v70 >= v68)
          v78 = v68;
        else
          v78 = v70;
        v64 = memcmp(v67, v69, v78);
        if (v64)
          goto LABEL_137;
        if (v68 >= v70)
          goto LABEL_138;
      }
      else if (v58 >= v62)
      {
        goto LABEL_138;
      }
LABEL_124:
      v9 = *v10;
      v11 = v10;
      if (!*v10)
        goto LABEL_190;
    }
  }
  if (v56 < 0)
    goto LABEL_125;
LABEL_228:
  if (v104 < 0)
  {
    operator delete((void *)__s2);
    LOBYTE(v13) = *((_BYTE *)&v107.__r_.__value_.__s + 23);
  }
  if ((v13 & 0x80) != 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  v95 = 1;
LABEL_226:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v109, (uint64_t)v110);
  return v95;
}

void webrtc::AddOrReplaceCodec(webrtc *this, cricket::MediaContentDescription *a2, const cricket::Codec *a3)
{
  uint64_t *v5;
  cricket::Codec *v6;
  cricket::Codec *v7;
  int64_t v8;
  const cricket::Codec *v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  const cricket::Codec *v14;
  const cricket::Codec *v15;
  void (**v16)(const cricket::Codec *);
  BOOL v17;

  v5 = (uint64_t *)((char *)this + 280);
  v7 = (cricket::Codec *)*((_QWORD *)this + 35);
  v6 = (cricket::Codec *)*((_QWORD *)this + 36);
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v11 = 0;
    v9 = 0;
    v12 = 1;
    if ((unint64_t)v7 < *((_QWORD *)this + 37))
      goto LABEL_10;
  }
  else
  {
    if (0x84BDA12F684BDA13 * (v8 >> 3) >= 0x12F684BDA12F685)
      goto LABEL_23;
    v9 = (const cricket::Codec *)operator new(v8);
    v10 = 0;
    do
    {
      cricket::Codec::Codec((const cricket::Codec *)((char *)v9 + v10), (cricket::Codec *)((char *)v7 + v10));
      v10 += 216;
    }
    while ((cricket::Codec *)((char *)v7 + v10) != v6);
    v11 = (char *)v9 + 216 * (v10 / 216);
    v12 = v10 == 0;
    if (v10)
    {
      v13 = 0;
      while (*((_DWORD *)a2 + 3) != *(_DWORD *)((char *)v9 + v13 + 12))
      {
        v13 += 216;
        if (216 * (v10 / 216) == v13)
          goto LABEL_9;
      }
      cricket::Codec::operator=((uint64_t)v9 + v13, (uint64_t)a2);
      std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>(v5, v9, (const cricket::Codec *)((char *)v9 + 216 * (v10 / 216)), v10 / 216);
      goto LABEL_18;
    }
LABEL_9:
    v7 = (cricket::Codec *)*((_QWORD *)this + 36);
    if ((unint64_t)v7 < *((_QWORD *)this + 37))
    {
LABEL_10:
      if (v7)
      {
        cricket::Codec::Codec(v7, a2);
        *((_QWORD *)this + 36) = (char *)v7 + 216;
        if (!v9)
          return;
LABEL_15:
        if (v12)
        {
LABEL_21:
          operator delete(v9);
          return;
        }
LABEL_18:
        v14 = (const cricket::Codec *)(v11 - 216);
        v15 = (const cricket::Codec *)(v11 - 216);
        do
        {
          v16 = *(void (***)(const cricket::Codec *))v15;
          v15 = (const cricket::Codec *)((char *)v15 - 216);
          (*v16)(v14);
          v17 = v14 == v9;
          v14 = v15;
        }
        while (!v17);
        goto LABEL_21;
      }
      __break(1u);
LABEL_23:
      abort();
    }
  }
  *((_QWORD *)this + 36) = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)v5, a2);
  if (v9)
    goto LABEL_15;
}

void webrtc::AddAudioAttribute(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  const cricket::Codec *v11;
  uint64_t v12;
  uint64_t v13;
  const cricket::Codec *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  const cricket::Codec *v31;
  const cricket::Codec *v32;
  void (**v33)(const cricket::Codec *);
  BOOL v34;
  const cricket::Codec *v35;
  __int128 __dst;
  unint64_t v37;

  if (!a3)
    return;
  v6 = *(_QWORD *)(a4 + 280);
  v7 = *(_QWORD *)(a4 + 288);
  v8 = v7 - v6;
  if (v7 == v6)
  {
    v14 = 0;
    v11 = 0;
  }
  else
  {
    if (0x84BDA12F684BDA13 * (v8 >> 3) >= 0x12F684BDA12F685)
      goto LABEL_36;
    v11 = (const cricket::Codec *)operator new(v8);
    v12 = 0;
    do
    {
      cricket::Codec::Codec((const cricket::Codec *)((char *)v11 + v12), (const cricket::Codec *)(v6 + v12));
      v12 += 216;
    }
    while (v6 + v12 != v7);
    v13 = v12 / 216;
    v14 = (const cricket::Codec *)((char *)v11 + 216 * (v12 / 216));
    if (v12)
    {
      v15 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v15 = a3 | 7;
      if (a3 < 0x7FFFFFFFFFFFFFF8)
      {
        if (a3 >= 0x17)
        {
          v35 = (const cricket::Codec *)((char *)v11 + 216 * (v12 / 216));
          v22 = 0;
          v23 = v15 + 1;
          v24 = (v15 + 1) | 0x8000000000000000;
          v25 = 216 * v13;
          while (1)
          {
            v29 = (char *)operator new(v23);
            v30 = v29;
            *((_QWORD *)&__dst + 1) = a3;
            v37 = v24;
            *(_QWORD *)&__dst = v29;
            if (v29 <= a2 && &v29[a3] > a2)
              break;
            memmove(v29, a2, a3);
            v30[a3] = 0;
            v26 = std::map<std::string,std::string>::operator[]((uint64_t)v11 + v22 + 168, a1);
            v27 = v26;
            if (*(char *)(v26 + 23) < 0)
              operator delete(*(void **)v26);
            v28 = __dst;
            *(_QWORD *)(v27 + 16) = v37;
            *(_OWORD *)v27 = v28;
            v22 += 216;
            if (v25 == v22)
            {
              v21 = 0;
              v14 = v35;
              goto LABEL_28;
            }
          }
          __break(1u);
        }
        else if (&__dst > (__int128 *)a2 || (char *)&__dst + a3 <= a2)
        {
          v16 = 0;
          v17 = 216 * v13;
          do
          {
            HIBYTE(v37) = a3;
            memmove(&__dst, a2, a3);
            *((_BYTE *)&__dst + a3) = 0;
            v19 = std::map<std::string,std::string>::operator[]((uint64_t)v11 + v16 + 168, a1);
            v20 = v19;
            if (*(char *)(v19 + 23) < 0)
              operator delete(*(void **)v19);
            v18 = __dst;
            *(_QWORD *)(v20 + 16) = v37;
            *(_OWORD *)v20 = v18;
            v16 += 216;
          }
          while (v17 != v16);
          v21 = 0;
          goto LABEL_28;
        }
        HIBYTE(v37) = a3;
        __break(1u);
      }
LABEL_36:
      abort();
    }
  }
  v21 = 1;
LABEL_28:
  std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)(a4 + 280), v11, v14, 0x84BDA12F684BDA13 * ((v14 - v11) >> 3));
  if (v11)
  {
    if ((v21 & 1) == 0)
    {
      v31 = (const cricket::Codec *)((char *)v14 - 216);
      v32 = (const cricket::Codec *)((char *)v14 - 216);
      do
      {
        v33 = *(void (***)(const cricket::Codec *))v32;
        v32 = (const cricket::Codec *)((char *)v32 - 216);
        (*v33)(v31);
        v34 = v31 == v11;
        v31 = v32;
      }
      while (!v34);
    }
    operator delete(v11);
  }
}

void webrtc::UpdateCodec(int a1, void **a2, size_t a3, unsigned int a4, uint64_t a5, webrtc *a6)
{
  int v12;
  const cricket::Codec *v13;
  const cricket::Codec *v14;
  const cricket::Codec *v15;
  void **v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  unint64_t v21;
  void (**v22)(cricket::Codec *__hidden);
  int v23;
  int v24;
  __int128 v25;
  _QWORD v26[6];
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD *v31;
  _QWORD v32[6];

  v32[5] = *MEMORY[0x24BDAC8D0];
  v12 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)a6 + 16))(a6);
  v14 = (const cricket::Codec *)*((_QWORD *)a6 + 35);
  v15 = (const cricket::Codec *)*((_QWORD *)a6 + 36);
  if (v14 != v15)
  {
    while (*((_DWORD *)v14 + 3) != a1)
    {
      v14 = (const cricket::Codec *)((char *)v14 + 216);
      if (v14 == v15)
        goto LABEL_4;
    }
    cricket::Codec::Codec((cricket::Codec *)&v22, v14);
    goto LABEL_9;
  }
LABEL_4:
  if (v12)
  {
    HIBYTE(v21) = 0;
    LOBYTE(__p[0]) = 0;
    cricket::CreateVideoCodec(a1, (unsigned __int8 *)__p, (uint64_t)&v22);
    if (SHIBYTE(v21) < 0)
    {
      operator delete(__p[0]);
      if (a3 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_10;
      goto LABEL_23;
    }
LABEL_9:
    if (a3 < 0x7FFFFFFFFFFFFFF8)
      goto LABEL_10;
LABEL_23:
    abort();
  }
  v22 = &off_24C0B1418;
  v23 = 0;
  v24 = a1;
  *(_QWORD *)&v25 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  memset((char *)v26 + 7, 0, 18);
  v31 = v32;
  memset(v32, 0, 40);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_23;
LABEL_10:
  if (a3 <= 0x16)
  {
    HIBYTE(v21) = a3;
    v16 = __p;
    v17 = (void **)((char *)__p + a3);
    if (__p > a2)
      goto LABEL_17;
    goto LABEL_16;
  }
  v18 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a3 | 7) != 0x17)
    v18 = a3 | 7;
  v19 = v18 + 1;
  v16 = (void **)operator new(v18 + 1);
  __p[1] = (void *)a3;
  v21 = v19 | 0x8000000000000000;
  __p[0] = v16;
  v17 = (void **)((char *)v16 + a3);
  if (v16 <= a2)
  {
LABEL_16:
    if (v17 > a2)
      __break(1u);
  }
LABEL_17:
  if (a3)
    memmove(v16, a2, a3);
  *(_BYTE *)v17 = 0;
  if (SHIBYTE(v26[0]) < 0)
    operator delete((void *)v25);
  v25 = *(_OWORD *)__p;
  v26[0] = v21;
  v26[1] = a4;
  v26[2] = a5;
  webrtc::AddOrReplaceCodec(a6, (cricket::MediaContentDescription *)&v22, v13);
  cricket::Codec::~Codec((cricket::Codec *)&v22);
}

void webrtc::UpdateCodec(int a1, void **a2, size_t a3, webrtc *a4)
{
  int v8;
  const cricket::Codec *v9;
  const cricket::Codec *v10;
  const cricket::Codec *v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  unint64_t v17;
  void (**v18)(cricket::Codec *__hidden);
  int v19;
  int v20;
  __int128 v21;
  _BYTE v22[15];
  uint64_t v23;
  __int16 v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  _QWORD *v29;
  _QWORD v30[6];

  v30[5] = *MEMORY[0x24BDAC8D0];
  v8 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)a4 + 16))(a4);
  v10 = (const cricket::Codec *)*((_QWORD *)a4 + 35);
  v11 = (const cricket::Codec *)*((_QWORD *)a4 + 36);
  if (v10 != v11)
  {
    while (*((_DWORD *)v10 + 3) != a1)
    {
      v10 = (const cricket::Codec *)((char *)v10 + 216);
      if (v10 == v11)
        goto LABEL_4;
    }
    cricket::Codec::Codec((cricket::Codec *)&v18, v10);
    goto LABEL_9;
  }
LABEL_4:
  if (v8)
  {
    HIBYTE(v17) = 0;
    LOBYTE(__p[0]) = 0;
    cricket::CreateVideoCodec(a1, (unsigned __int8 *)__p, (uint64_t)&v18);
    if (SHIBYTE(v17) < 0)
    {
      operator delete(__p[0]);
      if (a3 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_10;
      goto LABEL_23;
    }
LABEL_9:
    if (a3 < 0x7FFFFFFFFFFFFFF8)
      goto LABEL_10;
LABEL_23:
    abort();
  }
  v18 = &off_24C0B1418;
  v19 = 0;
  v20 = a1;
  *(_QWORD *)&v21 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v23 = 0;
  *(_QWORD *)&v22[7] = 0;
  v24 = 0;
  v29 = v30;
  memset(v30, 0, 40);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_23;
LABEL_10:
  if (a3 <= 0x16)
  {
    HIBYTE(v17) = a3;
    v12 = __p;
    v13 = (void **)((char *)__p + a3);
    if (__p > a2)
      goto LABEL_17;
    goto LABEL_16;
  }
  v14 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a3 | 7) != 0x17)
    v14 = a3 | 7;
  v15 = v14 + 1;
  v12 = (void **)operator new(v14 + 1);
  __p[1] = (void *)a3;
  v17 = v15 | 0x8000000000000000;
  __p[0] = v12;
  v13 = (void **)((char *)v12 + a3);
  if (v12 <= a2)
  {
LABEL_16:
    if (v13 > a2)
      __break(1u);
  }
LABEL_17:
  if (a3)
    memmove(v12, a2, a3);
  *(_BYTE *)v13 = 0;
  if ((v22[7] & 0x80000000) != 0)
    operator delete((void *)v21);
  v21 = *(_OWORD *)__p;
  *(_QWORD *)v22 = v17;
  webrtc::AddOrReplaceCodec(a4, (cricket::MediaContentDescription *)&v18, v9);
  cricket::Codec::~Codec((cricket::Codec *)&v18);
}

void webrtc::BuildRtpContentAttributes(uint64_t a1, int a2, char a3, std::string *a4)
{
  _QWORD *v6;
  size_t size;
  std::string *v8;
  char *v9;
  char *v10;
  char *v11;
  const std::string::value_type *v12;
  size_t v13;
  std::string *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string *p_src;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string *v22;
  _BYTE *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  char *v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  size_t v34;
  BOOL v35;
  char *v36;
  std::string *v37;
  _BYTE *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  const std::string::value_type *v42;
  char *v43;
  std::string *v44;
  char *v45;
  std::string::size_type v46;
  unsigned __int8 v47;
  size_t v48;
  std::string *v49;
  char **v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int64_t v54;
  unint64_t v55;
  std::string *v56;
  unint64_t v57;
  char *v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::string *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  std::string *v73;
  std::string *v74;
  std::string::size_type v75;
  unsigned __int8 v76;
  size_t v77;
  std::string *v78;
  std::string::size_type v79;
  std::string::size_type v80;
  int v81;
  size_t v82;
  BOOL v83;
  std::string *v84;
  std::string *v85;
  std::string::size_type v87;
  std::string::size_type v88;
  std::string::size_type v89;
  std::string *v90;
  char *v91;
  std::string::size_type v92;
  std::string::size_type v93;
  std::string::size_type v94;
  int v95;
  size_t v96;
  BOOL v97;
  char *v98;
  std::string *v99;
  _BYTE *v100;
  std::string::size_type v101;
  std::string::size_type v102;
  std::string::size_type v103;
  std::string *v104;
  char *v105;
  size_t v106;
  std::string *v107;
  size_t v108;
  std::string *v109;
  std::string::size_type v110;
  std::string::size_type v111;
  std::string *v112;
  _BYTE *v113;
  std::string::size_type v114;
  std::string::size_type v115;
  std::string::size_type v116;
  unsigned __int8 v117;
  size_t v118;
  std::string *v119;
  std::string *v120;
  char *v121;
  std::string::size_type v122;
  size_t v123;
  std::string *v124;
  _BYTE *v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  std::string::size_type v129;
  std::string::size_type v130;
  std::string *v131;
  std::string::size_type v133;
  std::string *v134;
  std::string *v135;
  std::string::size_type v136;
  int v137;
  std::string::size_type v138;
  char *v139;
  int v140;
  size_t v141;
  BOOL v142;
  std::string *v143;
  std::string::size_type v145;
  int v146;
  std::string::size_type v147;
  std::string::size_type v148;
  std::string *v149;
  char *v150;
  std::string::size_type v151;
  std::string::size_type v152;
  int v153;
  std::string::size_type v154;
  unsigned __int8 v155;
  size_t v156;
  std::string *v157;
  std::string *v158;
  _BYTE *v159;
  std::string::size_type v160;
  char *v161;
  int v162;
  std::string::size_type v163;
  std::string::size_type v164;
  std::string *v165;
  char *v166;
  std::string::size_type v167;
  std::string::size_type v168;
  std::string::size_type v169;
  std::string *v170;
  _BYTE *v171;
  std::string::size_type v172;
  size_t v173;
  BOOL v174;
  std::string::size_type v175;
  std::string::size_type v176;
  std::string *v177;
  char *v178;
  std::string::size_type v179;
  size_t v180;
  std::string *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  int *v185;
  int *v186;
  int v187;
  _BOOL4 v189;
  _BOOL4 v191;
  _BOOL4 v193;
  std::string::size_type v194;
  std::string::size_type v195;
  std::string *v196;
  std::string::size_type v198;
  std::string *v199;
  std::string::size_type v200;
  int v201;
  std::string::size_type v202;
  char *v203;
  int v204;
  size_t v205;
  BOOL v206;
  std::string *v207;
  std::string::size_type v209;
  std::string::size_type v210;
  std::string::size_type v211;
  std::string *v212;
  char *v213;
  std::string::size_type v214;
  std::string::size_type v215;
  std::string::size_type v216;
  unsigned __int8 v217;
  size_t v218;
  std::string *v219;
  std::string *v220;
  _BYTE *v221;
  std::string::size_type v222;
  std::string::size_type v223;
  std::string::size_type v224;
  unsigned int Parameter;
  int data;
  unsigned int v227;
  unsigned int v228;
  char *v229;
  std::string *v230;
  _BYTE *v231;
  std::string::size_type v232;
  int64_t v233;
  uint64_t v234;
  unint64_t v235;
  char *v236;
  uint64_t v237;
  _BYTE *v238;
  char *v239;
  char *v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  _BYTE *v252;
  int *v253;
  int *v254;
  unint64_t v255;
  int *v256;
  int v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _OWORD *v261;
  __int128 *v262;
  uint64_t v263;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  _OWORD *v267;
  char *v268;
  uint64_t v269;
  __int128 v270;
  int *v271;
  int *v272;
  std::string *v273;
  int v274;
  int *v275;
  int v276;
  int v277;
  int v278;
  int *v279;
  int *v280;
  int v281;
  char *v282;
  int v283;
  int v284;
  int v285;
  int v286;
  _QWORD *v287;
  std::string *v288;
  _BOOL4 v290;
  char *v291;
  char *v292;
  char *v293;
  std::string::size_type v294;
  size_t v295;
  std::string *v296;
  std::string *v297;
  size_t v298;
  unint64_t v299;
  std::string *v300;
  std::string *v301;
  std::string *v302;
  std::string::size_type v304;
  int v305;
  size_t v306;
  BOOL v307;
  unint64_t v308;
  uint64_t v309;
  std::string::size_type v310;
  size_t v311;
  unint64_t v312;
  size_t v313;
  unint64_t v314;
  std::string *v315;
  char *v316;
  std::string *v317;
  char *v318;
  size_t v319;
  _BYTE *v320;
  unint64_t v321;
  uint64_t v322;
  int *v323;
  int *v324;
  int v325;
  std::string::size_type v326;
  size_t v327;
  std::string *v328;
  size_t v329;
  unint64_t v330;
  std::string *v331;
  std::string *v332;
  std::string *v334;
  std::string::size_type v336;
  std::string::value_type *v337;
  unint64_t v338;
  uint64_t v339;
  int v341;
  std::string::size_type v342;
  std::string *v343;
  _BYTE *v344;
  _BOOL4 v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  size_t v349;
  BOOL v350;
  std::string *v351;
  std::string::size_type v352;
  size_t v353;
  unint64_t v354;
  size_t v355;
  unint64_t v356;
  std::string *v357;
  char *v358;
  _BYTE *v359;
  std::string *v360;
  char *v361;
  size_t v362;
  unint64_t v363;
  uint64_t v364;
  size_t v365;
  std::string *v366;
  int v367;
  size_t v368;
  unint64_t v369;
  size_t v370;
  std::string *v371;
  uint64_t v372;
  unint64_t v373;
  std::string *v374;
  char *v375;
  unint64_t v376;
  std::string *v377;
  std::string *v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  size_t v382;
  unint64_t v383;
  std::string *v384;
  unint64_t v385;
  uint64_t v386;
  size_t v387;
  unint64_t v388;
  std::string *v389;
  char *v390;
  std::string::size_type v391;
  char *v392;
  unint64_t v393;
  uint64_t v394;
  size_t v395;
  char **v396;
  int *v397;
  int v398;
  size_t v399;
  char *v400;
  std::string::size_type v402;
  size_t v403;
  std::string *v404;
  size_t v405;
  unint64_t v406;
  std::string *v407;
  std::string *v408;
  std::string *v409;
  std::string::size_type v411;
  std::string::value_type *v412;
  unint64_t v413;
  uint64_t v414;
  int v415;
  std::string::size_type v416;
  std::string *v417;
  _BYTE *v418;
  _BOOL4 v419;
  uint64_t v420;
  uint64_t v421;
  char v422;
  size_t v423;
  BOOL v424;
  std::string *v425;
  std::string::size_type v426;
  size_t v427;
  unint64_t v428;
  std::string *v429;
  size_t v430;
  unint64_t v431;
  std::string *v432;
  char *v433;
  _BYTE *v434;
  std::string *v435;
  char *v436;
  size_t v437;
  unint64_t v438;
  uint64_t v439;
  std::string::size_type v440;
  size_t v441;
  std::string *v442;
  size_t v443;
  unint64_t v444;
  std::string *v445;
  std::string *v446;
  std::string *v447;
  _BYTE *v448;
  std::string::size_type v449;
  unint64_t v450;
  std::string::size_type v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  size_t v457;
  std::string::size_type v458;
  std::string *v459;
  size_t v460;
  unint64_t v461;
  std::string *v462;
  char *v463;
  unint64_t v464;
  unint64_t v465;
  std::string *v466;
  char *v467;
  size_t v468;
  int v469;
  uint64_t v470;
  size_t v471;
  unint64_t v472;
  std::string *v473;
  size_t v474;
  unint64_t v475;
  std::string *v476;
  std::string *v477;
  std::string *v478;
  _BYTE *v479;
  std::string::size_type v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  std::string::size_type v485;
  size_t v486;
  size_t v487;
  std::string *v488;
  size_t v489;
  unint64_t v490;
  std::string *v491;
  char *v492;
  std::string *v493;
  char *v494;
  size_t v495;
  unint64_t v496;
  std::string *v497;
  unint64_t v498;
  uint64_t v499;
  int v500;
  size_t v501;
  unint64_t v502;
  size_t v503;
  std::string *v504;
  uint64_t v505;
  unint64_t v506;
  std::string *v507;
  unint64_t v508;
  std::string *v509;
  std::string *v510;
  char *v511;
  unint64_t v512;
  uint64_t v513;
  unint64_t v514;
  size_t v515;
  unint64_t v516;
  std::string *v517;
  unint64_t v518;
  uint64_t v519;
  size_t v520;
  unint64_t v521;
  std::string *v522;
  char *v523;
  std::string *v524;
  char *v525;
  unint64_t v526;
  uint64_t v527;
  char *v528;
  int v529;
  __int128 v530;
  int v531;
  std::string::size_type v532;
  size_t v533;
  std::string *v534;
  size_t v535;
  unint64_t v536;
  std::string *v537;
  std::string *v538;
  std::string *v539;
  _BYTE *v540;
  std::string::size_type v541;
  std::string::value_type *v542;
  size_t v543;
  unint64_t v544;
  uint64_t v545;
  int v546;
  std::string::size_type v547;
  std::string *v548;
  _BYTE *v549;
  _BOOL4 v550;
  uint64_t v551;
  uint64_t v552;
  char v553;
  size_t v554;
  BOOL v555;
  std::string *v556;
  std::string::size_type v557;
  size_t v558;
  unint64_t v559;
  std::string *v560;
  size_t v561;
  unint64_t v562;
  std::string *v563;
  char *v564;
  _BYTE *v565;
  std::string *v566;
  char *v567;
  size_t v568;
  unint64_t v569;
  uint64_t v570;
  std::string::size_type v571;
  size_t v572;
  std::string *v573;
  size_t v574;
  unint64_t v575;
  std::string *v576;
  std::string *v577;
  std::string *v578;
  _BYTE *v579;
  std::string::size_type v580;
  unint64_t v581;
  std::string::size_type v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t v587;
  size_t v588;
  std::string::size_type v589;
  std::string *v590;
  size_t v591;
  unint64_t v592;
  std::string *v593;
  _DWORD *v594;
  unint64_t v595;
  unint64_t v596;
  std::string *v597;
  _DWORD *v598;
  size_t v599;
  int v600;
  uint64_t v601;
  size_t v602;
  unint64_t v603;
  std::string *v604;
  size_t v605;
  unint64_t v606;
  std::string *v607;
  std::string *v608;
  std::string *v609;
  _BYTE *v610;
  std::string::size_type v611;
  unsigned __int8 v612;
  size_t v613;
  std::string *p_p;
  BOOL v615;
  unint64_t v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  unint64_t v620;
  std::string::size_type v621;
  std::string::size_type v622;
  size_t v623;
  std::string *v624;
  size_t v625;
  unint64_t v626;
  std::string *v627;
  char *v628;
  unint64_t v629;
  std::string *v630;
  char *v631;
  size_t v632;
  unint64_t v633;
  uint64_t v634;
  int v635;
  uint64_t v636;
  size_t v637;
  std::string *v638;
  size_t v639;
  unint64_t v640;
  std::string *v641;
  std::string *v642;
  std::string *v643;
  _BYTE *v644;
  std::string::size_type v645;
  int v646;
  size_t v647;
  char *v648;
  unint64_t v649;
  uint64_t v650;
  std::string::size_type v651;
  size_t v652;
  size_t v653;
  std::string *v654;
  size_t v655;
  unint64_t v656;
  std::string *v657;
  char *v658;
  std::string *v659;
  char *v660;
  size_t v661;
  std::string *v662;
  unint64_t v663;
  uint64_t v664;
  int v665;
  size_t v666;
  unint64_t v667;
  size_t v668;
  std::string *v669;
  uint64_t v670;
  unint64_t v671;
  std::string *v672;
  char *v673;
  unint64_t v674;
  std::string *v675;
  std::string *v676;
  unint64_t v677;
  unint64_t v678;
  uint64_t v679;
  size_t v680;
  unint64_t v681;
  std::string *v682;
  unint64_t v683;
  uint64_t v684;
  size_t v685;
  unint64_t v686;
  std::string *v687;
  char *v688;
  std::string *v689;
  char *v690;
  unint64_t v691;
  uint64_t v692;
  size_t v693;
  char **v694;
  const cricket::RidDescription *v695;
  const cricket::RidDescription *v696;
  char *v697;
  std::string::size_type v698;
  size_t v699;
  std::string *v700;
  size_t v701;
  unint64_t v702;
  std::string *v703;
  std::string *v704;
  std::string *v705;
  std::string::size_type v707;
  std::string::value_type *v708;
  unint64_t v709;
  uint64_t v710;
  char v711;
  size_t v712;
  BOOL v713;
  std::string *v714;
  std::string::size_type v715;
  size_t v716;
  unint64_t v717;
  std::string *v718;
  size_t v719;
  unint64_t v720;
  std::string *v721;
  char *v722;
  _BYTE *v723;
  std::string *v724;
  char *v725;
  size_t v726;
  unint64_t v727;
  uint64_t v728;
  unsigned __int8 v729;
  size_t v730;
  std::string *v731;
  int v732;
  size_t v733;
  unint64_t v734;
  size_t v735;
  std::string *v736;
  uint64_t v737;
  unint64_t v738;
  std::string *v739;
  char *v740;
  unint64_t v741;
  std::string *v742;
  std::string *v743;
  unint64_t v744;
  uint64_t v745;
  unint64_t v746;
  std::string *v747;
  size_t v748;
  unint64_t v749;
  std::string *v750;
  char *v751;
  unint64_t v752;
  uint64_t v753;
  size_t v754;
  unint64_t v755;
  uint64_t v756;
  std::string::size_type v757;
  char *v758;
  size_t v759;
  const cricket::RidDescription *v760;
  const cricket::RidDescription *v761;
  unsigned __int8 v762;
  size_t v763;
  std::string *v764;
  std::string::size_type v765;
  std::string::size_type v766;
  unsigned __int8 v767;
  std::string::size_type v768;
  BOOL v769;
  std::string *v770;
  std::string *v771;
  std::string::size_type v773;
  std::string::size_type v774;
  std::string::size_type v775;
  std::string *v776;
  char *v777;
  std::string::size_type v778;
  const cricket::SimulcastDescription *v779;
  std::string::size_type v780;
  std::string::size_type v781;
  unsigned __int8 v782;
  size_t v783;
  BOOL v784;
  std::string *v785;
  std::string *v786;
  _BYTE *v787;
  std::string::size_type v788;
  std::string::size_type v789;
  std::string::size_type v790;
  unsigned __int8 v791;
  size_t v792;
  std::string *v793;
  std::string *v794;
  char *v795;
  std::string::size_type v796;
  int *v797;
  _BOOL4 v798;
  _QWORD *v799;
  _QWORD *v800;
  char *v801;
  _BOOL4 v802;
  _BOOL4 v803;
  char *v804;
  int *v805;
  _BOOL4 v807;
  char *v808;
  int v809;
  uint64_t v810;
  _QWORD *v811;
  int *v812;
  std::string *v813;
  std::string __p;
  std::string v815;
  int v816;
  std::string v817;
  std::string v818;
  std::string __src;
  uint64_t v820;

  v6 = (_QWORD *)a1;
  v820 = *MEMORY[0x24BDAC8D0];
  memset(&v815, 0, sizeof(v815));
  if (*(_DWORD *)(a1 + 200) == 2)
  {
    webrtc::InitLine(97, "extmap-allow-mixed", 0x12uLL, &v815);
    if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v815.__r_.__value_.__l.__size_;
      if ((v815.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_106;
      v8 = (std::string *)v815.__r_.__value_.__r.__words[0];
      if (v815.__r_.__value_.__l.__size_)
      {
        if (!v815.__r_.__value_.__r.__words[0])
          goto LABEL_106;
      }
    }
    else
    {
      size = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      v8 = &v815;
    }
    webrtc::AddLine((char *)v8, size, a4);
  }
  v9 = (char *)v6[8];
  v10 = (char *)v6[9];
  memset(&__src, 0, sizeof(__src));
  v813 = a4;
  v800 = v6;
  if (v9 != v10)
  {
    LODWORD(v812) = a2;
    v11 = "extmap";
    v12 = ":";
    while (1)
    {
      webrtc::InitLine(97, v11, 6uLL, &__src);
      v15 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = 22;
      else
        v16 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = __src.__r_.__value_.__l.__size_;
      if (v16 == v15)
      {
        std::string::__grow_by_and_replace(&__src, v16, 1uLL, v16, v16, 0, 1uLL, v12);
        rtc::StringBuilder::operator<<(&__src, *((_DWORD *)v9 + 6));
        if (!v9[28])
          goto LABEL_64;
      }
      else
      {
        if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_src = &__src;
        else
          p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
        if ((char *)p_src + v15 <= v12 && (char *)&p_src->__r_.__value_.__l.__data_ + v15 + 1 > v12)
          goto LABEL_106;
        p_src->__r_.__value_.__s.__data_[v15] = 58;
        v19 = v15 + 1;
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          __src.__r_.__value_.__l.__size_ = v19;
          p_src->__r_.__value_.__s.__data_[v19] = 0;
          rtc::StringBuilder::operator<<(&__src, *((_DWORD *)v9 + 6));
          if (!v9[28])
            goto LABEL_64;
        }
        else
        {
          *((_BYTE *)&__src.__r_.__value_.__s + 23) = v19 & 0x7F;
          p_src->__r_.__value_.__s.__data_[v19] = 0;
          rtc::StringBuilder::operator<<(&__src, *((_DWORD *)v9 + 6));
          if (!v9[28])
            goto LABEL_64;
        }
      }
      v20 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = 22;
      else
        v21 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = __src.__r_.__value_.__l.__size_;
      if (v21 == v20)
      {
        std::string::__grow_by_and_replace(&__src, v21, 1uLL, v21, v21, 0, 1uLL, " ");
      }
      else
      {
        if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &__src;
        else
          v22 = (std::string *)__src.__r_.__value_.__r.__words[0];
        v23 = (char *)v22 + v20;
        if ((char *)v22 + v20 <= " " && v23 + 1 > " ")
          goto LABEL_106;
        *v23 = 32;
        v24 = v20 + 1;
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          __src.__r_.__value_.__l.__size_ = v24;
        else
          *((_BYTE *)&__src.__r_.__value_.__s + 23) = v24 & 0x7F;
        v22->__r_.__value_.__s.__data_[v24] = 0;
      }
      v25 = __src.__r_.__value_.__r.__words[2];
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = 22;
      else
        v26 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      else
        v27 = __src.__r_.__value_.__l.__size_;
      if (v26 - v27 >= 0x22)
      {
        if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &__src;
        else
          v28 = (std::string *)__src.__r_.__value_.__r.__words[0];
        v29 = (char *)v28 + v27;
        if ((char *)v28 + v27 <= "urn:ietf:params:rtp-hdrext:encrypt"
          && v29 + 34 > "urn:ietf:params:rtp-hdrext:encrypt")
        {
          goto LABEL_106;
        }
        qmemcpy(v29, "urn:ietf:params:rtp-hdrext:encrypt", 34);
        v30 = v27 + 34;
        if ((v25 & 0x8000000000000000) != 0)
          __src.__r_.__value_.__l.__size_ = v27 + 34;
        else
          *((_BYTE *)&__src.__r_.__value_.__s + 23) = v30 & 0x7F;
        v28->__r_.__value_.__s.__data_[v30] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(&__src, v26, v27 - v26 + 34, v27, v27, 0, 0x22uLL, "urn:ietf:params:rtp-hdrext:encrypt");
      }
LABEL_64:
      v31 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = 22;
      else
        v32 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v31 = __src.__r_.__value_.__l.__size_;
      if (v32 == v31)
      {
        std::string::__grow_by_and_replace(&__src, v32, 1uLL, v32, v32, 0, 1uLL, " ");
        v33 = v9[23];
        if (v33 < 0)
          goto LABEL_79;
      }
      else
      {
        if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__src;
        else
          v37 = (std::string *)__src.__r_.__value_.__r.__words[0];
        v38 = (char *)v37 + v31;
        if ((char *)v37 + v31 <= " " && v38 + 1 > " ")
          goto LABEL_106;
        *v38 = 32;
        v39 = v31 + 1;
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          __src.__r_.__value_.__l.__size_ = v39;
          v37->__r_.__value_.__s.__data_[v39] = 0;
          v33 = v9[23];
          if (v33 < 0)
          {
LABEL_79:
            v34 = *((_QWORD *)v9 + 1);
            if ((v34 & 0x8000000000000000) != 0)
              goto LABEL_106;
            v36 = *(char **)v9;
            v35 = v34 == 0;
            if (v34)
            {
              if (!v36)
                goto LABEL_106;
            }
            goto LABEL_82;
          }
        }
        else
        {
          *((_BYTE *)&__src.__r_.__value_.__s + 23) = v39 & 0x7F;
          v37->__r_.__value_.__s.__data_[v39] = 0;
          v33 = v9[23];
          if (v33 < 0)
            goto LABEL_79;
        }
      }
      v34 = v33;
      v35 = v33 == 0;
      v36 = v9;
LABEL_82:
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = 22;
      else
        v40 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      else
        v41 = __src.__r_.__value_.__l.__size_;
      if (v40 - v41 >= v34)
      {
        if (!v35)
        {
          v42 = v12;
          v43 = v11;
          if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v44 = &__src;
          else
            v44 = (std::string *)__src.__r_.__value_.__r.__words[0];
          v45 = (char *)v44 + v41;
          if ((char *)v44 + v41 <= v36 && &v45[v34] > v36)
            goto LABEL_106;
          memmove(v45, v36, v34);
          v46 = v41 + v34;
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            __src.__r_.__value_.__l.__size_ = v41 + v34;
          else
            *((_BYTE *)&__src.__r_.__value_.__s + 23) = v46 & 0x7F;
          v44->__r_.__value_.__s.__data_[v46] = 0;
          v11 = v43;
          v12 = v42;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&__src, v40, v41 + v34 - v40, v41, v41, 0, v34, v36);
      }
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = __src.__r_.__value_.__l.__size_;
        if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_106;
        v14 = (std::string *)__src.__r_.__value_.__r.__words[0];
        if (__src.__r_.__value_.__l.__size_)
        {
          if (!__src.__r_.__value_.__r.__words[0])
            goto LABEL_106;
        }
      }
      else
      {
        v13 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        v14 = &__src;
      }
      webrtc::AddLine((char *)v14, v13, v813);
      v9 += 32;
      if (v9 == v10)
        goto LABEL_107;
    }
  }
LABEL_109:
  switch(*((_DWORD *)v6 + 31))
  {
    case 1:
      webrtc::InitLine(97, "sendonly", 8uLL, &v815);
      v47 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_111;
      goto LABEL_117;
    case 2:
      webrtc::InitLine(97, "recvonly", 8uLL, &v815);
      v47 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_117;
      goto LABEL_111;
    case 3:
    case 4:
      webrtc::InitLine(97, "inactive", 8uLL, &v815);
      v47 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_111;
      goto LABEL_117;
    default:
      webrtc::InitLine(97, "sendrecv", 8uLL, &v815);
      v47 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_117:
        v48 = v815.__r_.__value_.__l.__size_;
        if ((v815.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_106;
        v49 = (std::string *)v815.__r_.__value_.__r.__words[0];
        if (v815.__r_.__value_.__l.__size_)
        {
          if (!v815.__r_.__value_.__r.__words[0])
            goto LABEL_106;
        }
      }
      else
      {
LABEL_111:
        v48 = v47;
        v49 = &v815;
      }
      webrtc::AddLine((char *)v49, v48, a4);
      if ((a3 & 1) == 0)
        goto LABEL_240;
      v50 = (char **)v6[12];
      v51 = v6[13] - (_QWORD)v50;
      if (v51 == 144)
      {
        v52 = v50[12];
        v53 = v50[13];
        v54 = v53 - v52;
        if (v53 == v52)
        {
          v69 = 0;
          v56 = 0;
        }
        else
        {
          v55 = 0xAAAAAAAAAAAAAAABLL * (v54 >> 3);
          if (v55 > 0xAAAAAAAAAAAAAAALL)
LABEL_1992:
            abort();
          v56 = (std::string *)operator new(v54);
          v57 = 0;
          do
          {
            while (1)
            {
              v58 = &v52[v57];
              v59 = &v56[v57 / 0x18];
              if ((v52[v57 + 23] & 0x80000000) == 0)
                break;
              std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)v58, *((_QWORD *)v58 + 1));
              v57 += 24;
              if (&v52[v57] == v53)
                goto LABEL_128;
            }
            v60 = *(_OWORD *)v58;
            v59->__r_.__value_.__r.__words[2] = *((_QWORD *)v58 + 2);
            *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
            v57 += 24;
          }
          while (&v52[v57] != v53);
LABEL_128:
          if (v57)
          {
            v61 = &v56[v57 / 0x18];
LABEL_150:
            v74 = v56;
            while (1)
            {
              webrtc::InitLine(97, "msid", 4uLL, &v815);
              v79 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
              if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v80 = 22;
              else
                v80 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v79 = v815.__r_.__value_.__l.__size_;
              if (v80 == v79)
              {
                std::string::__grow_by_and_replace(&v815, v80, 1uLL, v80, v80, 0, 1uLL, ":");
                v81 = SHIBYTE(v74->__r_.__value_.__r.__words[2]);
                if ((v81 & 0x80000000) == 0)
                  goto LABEL_163;
              }
              else
              {
                if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v85 = &v815;
                else
                  v85 = (std::string *)v815.__r_.__value_.__r.__words[0];
                if ((char *)v85 + v79 <= ":" && (char *)&v85->__r_.__value_.__l.__data_ + v79 + 1 > ":")
                  goto LABEL_106;
                v85->__r_.__value_.__s.__data_[v79] = 58;
                v87 = v79 + 1;
                if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                {
                  v815.__r_.__value_.__l.__size_ = v87;
                  v85->__r_.__value_.__s.__data_[v87] = 0;
                  v81 = SHIBYTE(v74->__r_.__value_.__r.__words[2]);
                  if ((v81 & 0x80000000) == 0)
                  {
LABEL_163:
                    v82 = v81;
                    v83 = v81 == 0;
                    v84 = v74;
                    goto LABEL_176;
                  }
                }
                else
                {
                  *((_BYTE *)&v815.__r_.__value_.__s + 23) = v87 & 0x7F;
                  v85->__r_.__value_.__s.__data_[v87] = 0;
                  v81 = SHIBYTE(v74->__r_.__value_.__r.__words[2]);
                  if ((v81 & 0x80000000) == 0)
                    goto LABEL_163;
                }
              }
              v82 = v74->__r_.__value_.__l.__size_;
              if ((v82 & 0x8000000000000000) != 0)
                goto LABEL_106;
              v84 = (std::string *)v74->__r_.__value_.__r.__words[0];
              v83 = v82 == 0;
              if (v82)
              {
                if (!v84)
                  goto LABEL_106;
              }
LABEL_176:
              if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v88 = 22;
              else
                v88 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v89 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
              else
                v89 = v815.__r_.__value_.__l.__size_;
              if (v88 - v89 >= v82)
              {
                if (!v83)
                {
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v90 = &v815;
                  else
                    v90 = (std::string *)v815.__r_.__value_.__r.__words[0];
                  v91 = (char *)v90 + v89;
                  if ((std::string *)((char *)v90 + v89) <= v84 && &v91[v82] > (char *)v84)
                    goto LABEL_106;
                  memmove(v91, v84, v82);
                  v92 = v89 + v82;
                  if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                    v815.__r_.__value_.__l.__size_ = v89 + v82;
                  else
                    *((_BYTE *)&v815.__r_.__value_.__s + 23) = v92 & 0x7F;
                  v90->__r_.__value_.__s.__data_[v92] = 0;
                }
              }
              else
              {
                std::string::__grow_by_and_replace(&v815, v88, v89 + v82 - v88, v89, v89, 0, v82, (const std::string::value_type *)v84);
              }
              v93 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
              if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v94 = 22;
              else
                v94 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v93 = v815.__r_.__value_.__l.__size_;
              if (v94 == v93)
              {
                std::string::__grow_by_and_replace(&v815, v94, 1uLL, v94, v94, 0, 1uLL, " ");
                v95 = *((char *)v50 + 23);
                if ((v95 & 0x80000000) == 0)
                  goto LABEL_203;
              }
              else
              {
                v99 = &v815;
                if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v99 = (std::string *)v815.__r_.__value_.__r.__words[0];
                v100 = (char *)v99 + v93;
                if ((char *)v99 + v93 <= " " && v100 + 1 > " ")
                  goto LABEL_106;
                *v100 = 32;
                v101 = v93 + 1;
                if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                {
                  v815.__r_.__value_.__l.__size_ = v101;
                  v99->__r_.__value_.__s.__data_[v101] = 0;
                  v95 = *((char *)v50 + 23);
                  if ((v95 & 0x80000000) == 0)
                  {
LABEL_203:
                    v96 = v95;
                    v97 = v95 == 0;
                    v98 = (char *)v50;
                    goto LABEL_213;
                  }
                }
                else
                {
                  *((_BYTE *)&v815.__r_.__value_.__s + 23) = v101 & 0x7F;
                  v99->__r_.__value_.__s.__data_[v101] = 0;
                  v95 = *((char *)v50 + 23);
                  if ((v95 & 0x80000000) == 0)
                    goto LABEL_203;
                }
              }
              v96 = (size_t)v50[1];
              if ((v96 & 0x8000000000000000) != 0)
                goto LABEL_106;
              v98 = *v50;
              v97 = v96 == 0;
              if (v96)
              {
                if (!v98)
                  goto LABEL_106;
              }
LABEL_213:
              if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v102 = 22;
              else
                v102 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v103 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
              else
                v103 = v815.__r_.__value_.__l.__size_;
              if (v102 - v103 >= v96)
              {
                if (v97)
                  goto LABEL_153;
                if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v104 = &v815;
                else
                  v104 = (std::string *)v815.__r_.__value_.__r.__words[0];
                v105 = (char *)v104 + v103;
                if ((char *)v104 + v103 <= v98 && &v105[v96] > v98)
                  goto LABEL_106;
                memmove(v105, v98, v96);
                v75 = v103 + v96;
                if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  *((_BYTE *)&v815.__r_.__value_.__s + 23) = v75 & 0x7F;
                  v104->__r_.__value_.__s.__data_[v75] = 0;
LABEL_153:
                  v76 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_221;
                  goto LABEL_154;
                }
                v815.__r_.__value_.__l.__size_ = v103 + v96;
                v104->__r_.__value_.__s.__data_[v75] = 0;
                v76 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                {
LABEL_221:
                  v77 = v815.__r_.__value_.__l.__size_;
                  if ((v815.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                    goto LABEL_106;
                  v78 = (std::string *)v815.__r_.__value_.__r.__words[0];
                  if (v815.__r_.__value_.__l.__size_)
                  {
                    if (!v815.__r_.__value_.__r.__words[0])
                      goto LABEL_106;
                  }
                  goto LABEL_155;
                }
              }
              else
              {
                std::string::__grow_by_and_replace(&v815, v102, v103 + v96 - v102, v103, v103, 0, v96, v98);
                v76 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_221;
              }
LABEL_154:
              v77 = v76;
              v78 = &v815;
LABEL_155:
              webrtc::AddLine((char *)v78, v77, v813);
              if (++v74 == v61)
              {
                do
                {
                  if (SHIBYTE(v61[-1].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v61[-1].__r_.__value_.__l.__data_);
                  --v61;
                }
                while (v61 != v56);
                operator delete(v56);
                a4 = v813;
                v6 = v800;
                goto LABEL_240;
              }
            }
          }
          v69 = v56 + v55;
        }
        *((_BYTE *)&__src.__r_.__value_.__s + 23) = 1;
        if (&__src <= (std::string *)"-" && (char *)&__src.__r_.__value_.__l.__data_ + 1 > "-")
          goto LABEL_106;
        LOWORD(__src.__r_.__value_.__l.__data_) = 45;
        if (v56 >= v69)
        {
          v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v69 - (char *)v56) >> 3);
          v71 = 2 * v70;
          if (2 * v70 <= 1)
            v71 = 1;
          if (v70 >= 0x555555555555555)
            v72 = 0xAAAAAAAAAAAAAAALL;
          else
            v72 = v71;
          if (v72 > 0xAAAAAAAAAAAAAAALL)
LABEL_1993:
            std::__throw_bad_array_new_length[abi:sn180100]();
          v73 = (std::string *)operator new(24 * v72);
          *v73 = __src;
          memset(&__src, 0, sizeof(__src));
          if (v56)
          {
            operator delete(v56);
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__src.__r_.__value_.__l.__data_);
          }
          v56 = v73;
          v61 = v73 + 1;
        }
        else
        {
          if (!v56)
            goto LABEL_106;
          *v56 = __src;
          v61 = v56 + 1;
        }
        goto LABEL_150;
      }
      if (0x8E38E38E38E38E39 * (v51 >> 4) >= 2 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v62, v63, v64, v65, v66, v67, v68, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
LABEL_240:
      if (*((_BYTE *)v6 + 32))
      {
        webrtc::InitLine(97, "rtcp-mux", 8uLL, &v815);
        if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
        {
          v106 = v815.__r_.__value_.__l.__size_;
          if ((v815.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_106;
          v107 = (std::string *)v815.__r_.__value_.__r.__words[0];
          if (v815.__r_.__value_.__l.__size_)
          {
            if (!v815.__r_.__value_.__r.__words[0])
              goto LABEL_106;
          }
        }
        else
        {
          v106 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
          v107 = &v815;
        }
        webrtc::AddLine((char *)v107, v106, a4);
      }
      if (*((_BYTE *)v6 + 33))
      {
        webrtc::InitLine(97, "rtcp-rsize", 0xAuLL, &v815);
        if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
        {
          v108 = v815.__r_.__value_.__l.__size_;
          if ((v815.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_106;
          v109 = (std::string *)v815.__r_.__value_.__r.__words[0];
          if (v815.__r_.__value_.__l.__size_)
          {
            if (!v815.__r_.__value_.__r.__words[0])
              goto LABEL_106;
          }
        }
        else
        {
          v108 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
          v109 = &v815;
        }
        webrtc::AddLine((char *)v109, v108, a4);
      }
      if (!*((_BYTE *)v6 + 120))
        goto LABEL_290;
      webrtc::InitLine(97, "x-google-flag", 0xDuLL, &v815);
      v110 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v111 = 22;
      else
        v111 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v110 = v815.__r_.__value_.__l.__size_;
      if (v111 == v110)
      {
        std::string::__grow_by_and_replace(&v815, v111, 1uLL, v111, v111, 0, 1uLL, ":");
      }
      else
      {
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v112 = &v815;
        else
          v112 = (std::string *)v815.__r_.__value_.__r.__words[0];
        v113 = (char *)v112 + v110;
        if ((char *)v112 + v110 <= ":" && v113 + 1 > ":")
          goto LABEL_106;
        *v113 = 58;
        v114 = v110 + 1;
        if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
          v815.__r_.__value_.__l.__size_ = v114;
        else
          *((_BYTE *)&v815.__r_.__value_.__s + 23) = v114 & 0x7F;
        v112->__r_.__value_.__s.__data_[v114] = 0;
      }
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v115 = 22;
      else
        v115 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v116 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      else
        v116 = v815.__r_.__value_.__l.__size_;
      if (v115 - v116 >= 0xA)
      {
        v120 = &v815;
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v120 = (std::string *)v815.__r_.__value_.__r.__words[0];
        v121 = (char *)v120 + v116;
        if ((char *)v120 + v116 <= "conference" && v121 + 10 > "conference")
          goto LABEL_106;
        *((_WORD *)v121 + 4) = 25955;
        *(_QWORD *)v121 = *(_QWORD *)"conference";
        v122 = v116 + 10;
        if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
        {
          v815.__r_.__value_.__l.__size_ = v116 + 10;
          v120->__r_.__value_.__s.__data_[v122] = 0;
          v117 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_279;
        }
        else
        {
          *((_BYTE *)&v815.__r_.__value_.__s + 23) = v122 & 0x7F;
          v120->__r_.__value_.__s.__data_[v122] = 0;
          v117 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_279;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v815, v115, v116 - v115 + 10, v116, v116, 0, 0xAuLL, "conference");
        v117 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_279:
          v118 = v117;
          v119 = &v815;
          goto LABEL_289;
        }
      }
      v118 = v815.__r_.__value_.__l.__size_;
      if ((v815.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_106;
      v119 = (std::string *)v815.__r_.__value_.__r.__words[0];
      if (v815.__r_.__value_.__l.__size_)
      {
        if (!v815.__r_.__value_.__r.__words[0])
          goto LABEL_106;
      }
LABEL_289:
      webrtc::AddLine((char *)v119, v118, a4);
LABEL_290:
      if (*((_BYTE *)v6 + 34))
      {
        webrtc::InitLine(97, "remote-net-estimate", 0x13uLL, &v815);
        if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
        {
          v123 = v815.__r_.__value_.__l.__size_;
          if ((v815.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_106;
          v124 = (std::string *)v815.__r_.__value_.__r.__words[0];
          if (v815.__r_.__value_.__l.__size_)
          {
            if (!v815.__r_.__value_.__r.__words[0])
              goto LABEL_106;
          }
        }
        else
        {
          v123 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
          v124 = &v815;
        }
        webrtc::AddLine((char *)v124, v123, a4);
      }
      memset(&v818, 0, sizeof(v818));
      if (a2)
      {
        if (a2 != 1)
          goto LABEL_655;
        v125 = (_BYTE *)v800[35];
        v126 = (_BYTE *)v800[36];
        if (v125 == v126)
          goto LABEL_655;
        v127 = v125 + 80;
        while (1)
        {
          if (*((_DWORD *)v127 - 17) == -1)
            goto LABEL_381;
          webrtc::InitLine(97, "rtpmap", 6uLL, &v818);
          v129 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
          if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v130 = 22;
          else
            v130 = (v818.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v129 = v818.__r_.__value_.__l.__size_;
          if (v130 == v129)
          {
            std::string::__grow_by_and_replace(&v818, v130, 1uLL, v130, v130, 0, 1uLL, ":");
          }
          else
          {
            v131 = &v818;
            if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v131 = (std::string *)v818.__r_.__value_.__r.__words[0];
            if ((char *)v131 + v129 <= ":" && (char *)&v131->__r_.__value_.__l.__data_ + v129 + 1 > ":")
              goto LABEL_106;
            v131->__r_.__value_.__s.__data_[v129] = 58;
            v133 = v129 + 1;
            if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0)
              v818.__r_.__value_.__l.__size_ = v133;
            else
              *((_BYTE *)&v818.__r_.__value_.__s + 23) = v133 & 0x7F;
            v131->__r_.__value_.__s.__data_[v133] = 0;
          }
          v134 = rtc::StringBuilder::operator<<(&v818, *((_DWORD *)v127 - 17));
          v135 = v134;
          v136 = HIBYTE(v134->__r_.__value_.__r.__words[2]);
          v137 = (char)v136;
          if ((v136 & 0x80u) == 0)
            v138 = 22;
          else
            v138 = (v134->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v136 & 0x80u) != 0)
            v136 = v134->__r_.__value_.__l.__size_;
          if (v138 == v136)
          {
            std::string::__grow_by_and_replace(v134, v138, 1uLL, v138, v138, 0, 1uLL, " ");
            v139 = v127 - 64;
            v140 = (char)*(v127 - 41);
            if ((v140 & 0x80000000) == 0)
              goto LABEL_327;
          }
          else
          {
            if (v137 >= 0)
              v143 = v134;
            else
              v143 = (std::string *)v134->__r_.__value_.__r.__words[0];
            if ((char *)v143 + v136 <= " " && (char *)&v143->__r_.__value_.__l.__data_ + v136 + 1 > " ")
              goto LABEL_106;
            v143->__r_.__value_.__s.__data_[v136] = 32;
            v145 = v136 + 1;
            if (SHIBYTE(v134->__r_.__value_.__r.__words[2]) < 0)
            {
              v134->__r_.__value_.__l.__size_ = v145;
              v143->__r_.__value_.__s.__data_[v145] = 0;
              v139 = v127 - 64;
              v140 = (char)*(v127 - 41);
              if ((v140 & 0x80000000) == 0)
              {
LABEL_327:
                v141 = v140;
                v142 = v140 == 0;
                goto LABEL_340;
              }
            }
            else
            {
              *((_BYTE *)&v134->__r_.__value_.__s + 23) = v145 & 0x7F;
              v143->__r_.__value_.__s.__data_[v145] = 0;
              v139 = v127 - 64;
              v140 = (char)*(v127 - 41);
              if ((v140 & 0x80000000) == 0)
                goto LABEL_327;
            }
          }
          v141 = *((_QWORD *)v127 - 7);
          if ((v141 & 0x8000000000000000) != 0)
            goto LABEL_106;
          v139 = *(char **)v139;
          v142 = v141 == 0;
          if (v141)
          {
            if (!v139)
              goto LABEL_106;
          }
LABEL_340:
          v146 = SHIBYTE(v135->__r_.__value_.__r.__words[2]);
          if (v146 >= 0)
            v147 = 22;
          else
            v147 = (v135->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v146 >= 0)
            v148 = HIBYTE(v135->__r_.__value_.__r.__words[2]);
          else
            v148 = v135->__r_.__value_.__l.__size_;
          if (v147 - v148 >= v141)
          {
            if (!v142)
            {
              if (v146 >= 0)
                v149 = v135;
              else
                v149 = (std::string *)v135->__r_.__value_.__r.__words[0];
              v150 = (char *)v149 + v148;
              if ((char *)v149 + v148 <= v139 && &v150[v141] > v139)
                goto LABEL_106;
              memmove(v150, v139, v141);
              v151 = v148 + v141;
              if (SHIBYTE(v135->__r_.__value_.__r.__words[2]) < 0)
                v135->__r_.__value_.__l.__size_ = v151;
              else
                *((_BYTE *)&v135->__r_.__value_.__s + 23) = v151 & 0x7F;
              v149->__r_.__value_.__s.__data_[v151] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(v135, v147, v148 + v141 - v147, v148, v148, 0, v141, v139);
          }
          v152 = HIBYTE(v135->__r_.__value_.__r.__words[2]);
          v153 = (char)v152;
          if ((v152 & 0x80u) == 0)
            v154 = 22;
          else
            v154 = (v135->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v152 & 0x80u) != 0)
            v152 = v135->__r_.__value_.__l.__size_;
          if (v154 == v152)
          {
            std::string::__grow_by_and_replace(v135, v154, 1uLL, v154, v154, 0, 1uLL, "/");
            rtc::StringBuilder::operator<<(v135, 90000);
            v155 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_377;
          }
          else
          {
            if (v153 >= 0)
              v158 = v135;
            else
              v158 = (std::string *)v135->__r_.__value_.__r.__words[0];
            v159 = (char *)v158 + v152;
            if ((char *)v158 + v152 <= "/" && v159 + 1 > "/")
              goto LABEL_106;
            *v159 = 47;
            v160 = v152 + 1;
            if (SHIBYTE(v135->__r_.__value_.__r.__words[2]) < 0)
              v135->__r_.__value_.__l.__size_ = v160;
            else
              *((_BYTE *)&v135->__r_.__value_.__s + 23) = v160 & 0x7F;
            v158->__r_.__value_.__s.__data_[v160] = 0;
            rtc::StringBuilder::operator<<(v135, 90000);
            v155 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_377:
              v156 = v818.__r_.__value_.__l.__size_;
              if ((v818.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                goto LABEL_106;
              v157 = (std::string *)v818.__r_.__value_.__r.__words[0];
              if (v818.__r_.__value_.__l.__size_)
              {
                if (!v818.__r_.__value_.__r.__words[0])
                  goto LABEL_106;
              }
              goto LABEL_380;
            }
          }
          v156 = v155;
          v157 = &v818;
LABEL_380:
          webrtc::AddLine((char *)v157, v156, v813);
LABEL_381:
          v161 = v127 - 24;
          if (*v127)
          {
            memset(&__src, 0, sizeof(__src));
            v162 = *((_DWORD *)v127 - 17);
            webrtc::InitLine(97, "packetization", 0xDuLL, &__src);
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            {
              v163 = __src.__r_.__value_.__l.__size_;
              v164 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v164 == __src.__r_.__value_.__l.__size_)
              {
LABEL_386:
                std::string::__grow_by_and_replace(&__src, v164, 1uLL, v164, v164, 0, 1uLL, ":");
LABEL_395:
                rtc::StringBuilder::operator<<(&__src, v162);
                v168 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v169 = 22;
                else
                  v169 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v168 = __src.__r_.__value_.__l.__size_;
                if (v169 == v168)
                {
                  std::string::__grow_by_and_replace(&__src, v169, 1uLL, v169, v169, 0, 1uLL, " ");
                  if (!*v127)
                    goto LABEL_106;
                }
                else
                {
                  v170 = &__src;
                  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v170 = (std::string *)__src.__r_.__value_.__r.__words[0];
                  v171 = (char *)v170 + v168;
                  if ((char *)v170 + v168 <= " " && v171 + 1 > " ")
                    goto LABEL_106;
                  *v171 = 32;
                  v172 = v168 + 1;
                  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                  {
                    __src.__r_.__value_.__l.__size_ = v172;
                    v170->__r_.__value_.__s.__data_[v172] = 0;
                    if (!*v127)
                      goto LABEL_106;
                  }
                  else
                  {
                    *((_BYTE *)&__src.__r_.__value_.__s + 23) = v172 & 0x7F;
                    v170->__r_.__value_.__s.__data_[v172] = 0;
                    if (!*v127)
                      goto LABEL_106;
                  }
                }
                if ((char)*(v127 - 1) < 0)
                {
                  v173 = *((_QWORD *)v127 - 2);
                  if ((v173 & 0x8000000000000000) != 0)
                    goto LABEL_106;
                  v161 = *(char **)v161;
                  v174 = v173 == 0;
                  if (v173)
                  {
                    if (!v161)
                      goto LABEL_106;
                  }
                }
                else
                {
                  v173 = *(v127 - 1);
                  v174 = *(v127 - 1) == 0;
                }
                if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v175 = 22;
                else
                  v175 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v176 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                else
                  v176 = __src.__r_.__value_.__l.__size_;
                if (v175 - v176 >= v173)
                {
                  if (!v174)
                  {
                    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v177 = &__src;
                    else
                      v177 = (std::string *)__src.__r_.__value_.__r.__words[0];
                    v178 = (char *)v177 + v176;
                    if ((char *)v177 + v176 <= v161 && &v178[v173] > v161)
                      goto LABEL_106;
                    memmove(v178, v161, v173);
                    v179 = v176 + v173;
                    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                      __src.__r_.__value_.__l.__size_ = v176 + v173;
                    else
                      *((_BYTE *)&__src.__r_.__value_.__s + 23) = v179 & 0x7F;
                    v177->__r_.__value_.__s.__data_[v179] = 0;
                  }
                }
                else
                {
                  std::string::__grow_by_and_replace(&__src, v175, v176 + v173 - v175, v176, v176, 0, v173, v161);
                }
                if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                {
                  v180 = __src.__r_.__value_.__l.__size_;
                  if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                    goto LABEL_106;
                  v181 = (std::string *)__src.__r_.__value_.__r.__words[0];
                  if (__src.__r_.__value_.__l.__size_)
                  {
                    if (!__src.__r_.__value_.__r.__words[0])
                      goto LABEL_106;
                  }
                }
                else
                {
                  v180 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                  v181 = &__src;
                }
                webrtc::AddLine((char *)v181, v180, v813);
                if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__src.__r_.__value_.__l.__data_);
                goto LABEL_301;
              }
              v165 = (std::string *)__src.__r_.__value_.__r.__words[0];
              v166 = (char *)(__src.__r_.__value_.__r.__words[0] + __src.__r_.__value_.__l.__size_);
              if (__src.__r_.__value_.__r.__words[0] + __src.__r_.__value_.__l.__size_ > (unint64_t)":")
                goto LABEL_391;
            }
            else
            {
              v163 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
              if (HIBYTE(__src.__r_.__value_.__r.__words[2]) == 22)
              {
                v164 = 22;
                goto LABEL_386;
              }
              v165 = &__src;
              v166 = (char *)&__src + HIBYTE(__src.__r_.__value_.__r.__words[2]);
              if (v166 > ":")
              {
LABEL_391:
                *v166 = 58;
                v167 = v163 + 1;
                if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                  __src.__r_.__value_.__l.__size_ = v167;
                else
                  *((_BYTE *)&__src.__r_.__value_.__s + 23) = v167 & 0x7F;
                v165->__r_.__value_.__s.__data_[v167] = 0;
                goto LABEL_395;
              }
            }
            if (v166 + 1 > ":")
              goto LABEL_106;
            goto LABEL_391;
          }
LABEL_301:
          webrtc::AddRtcpFbLines((uint64_t)(v127 - 80), v813);
          webrtc::AddFmtpLine((uint64_t)(v127 - 80), v813);
          v128 = v127 + 136;
          v127 += 216;
          if (v128 == v126)
            goto LABEL_655;
        }
      }
      v182 = v6[35];
      v810 = v6[36];
      if (v182 == v810)
        goto LABEL_655;
      v183 = 0;
      v184 = 0;
      v804 = 0;
      v185 = 0;
      v186 = 0;
      v801 = 0;
      v187 = 0;
      v189 = &__src <= (std::string *)"minptime"
          && &__src.__r_.__value_.__r.__words[1] > (std::string::size_type *)"minptime";
      v191 = &__src <= (std::string *)"ptime" && (char *)__src.__r_.__value_.__r.__words + 5 > "ptime";
      v807 = v191;
      v193 = &__src <= (std::string *)"maxptime"
          && &__src.__r_.__value_.__r.__words[1] > (std::string::size_type *)"maxptime";
      v803 = v193;
      v798 = v189;
      break;
  }
  do
  {
    v812 = v186;
    webrtc::InitLine(97, "rtpmap", 6uLL, &v818);
    v194 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
    if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v195 = 22;
    else
      v195 = (v818.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v194 = v818.__r_.__value_.__l.__size_;
    if (v195 == v194)
    {
      std::string::__grow_by_and_replace(&v818, v195, 1uLL, v195, v195, 0, 1uLL, ":");
    }
    else
    {
      if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v196 = &v818;
      else
        v196 = (std::string *)v818.__r_.__value_.__r.__words[0];
      if ((char *)v196 + v194 <= ":" && (char *)&v196->__r_.__value_.__l.__data_ + v194 + 1 > ":")
        goto LABEL_106;
      v196->__r_.__value_.__s.__data_[v194] = 58;
      v198 = v194 + 1;
      if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0)
        v818.__r_.__value_.__l.__size_ = v198;
      else
        *((_BYTE *)&v818.__r_.__value_.__s + 23) = v198 & 0x7F;
      v196->__r_.__value_.__s.__data_[v198] = 0;
    }
    v199 = rtc::StringBuilder::operator<<(&v818, *(_DWORD *)(v182 + 12));
    v200 = HIBYTE(v199->__r_.__value_.__r.__words[2]);
    v201 = (char)v200;
    if ((v200 & 0x80u) == 0)
      v202 = 22;
    else
      v202 = (v199->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v200 & 0x80u) != 0)
      v200 = v199->__r_.__value_.__l.__size_;
    if (v202 == v200)
    {
      std::string::__grow_by_and_replace(v199, v202, 1uLL, v202, v202, 0, 1uLL, " ");
      v203 = (char *)(v182 + 16);
      v204 = *(char *)(v182 + 39);
      if ((v204 & 0x80000000) == 0)
        goto LABEL_488;
    }
    else
    {
      if (v201 >= 0)
        v207 = v199;
      else
        v207 = (std::string *)v199->__r_.__value_.__r.__words[0];
      if ((char *)v207 + v200 <= " " && (char *)&v207->__r_.__value_.__l.__data_ + v200 + 1 > " ")
        goto LABEL_106;
      v207->__r_.__value_.__s.__data_[v200] = 32;
      v209 = v200 + 1;
      if (SHIBYTE(v199->__r_.__value_.__r.__words[2]) < 0)
      {
        v199->__r_.__value_.__l.__size_ = v209;
        v207->__r_.__value_.__s.__data_[v209] = 0;
        v203 = (char *)(v182 + 16);
        v204 = *(char *)(v182 + 39);
        if ((v204 & 0x80000000) == 0)
        {
LABEL_488:
          v205 = v204;
          v206 = v204 == 0;
          goto LABEL_501;
        }
      }
      else
      {
        *((_BYTE *)&v199->__r_.__value_.__s + 23) = v209 & 0x7F;
        v207->__r_.__value_.__s.__data_[v209] = 0;
        v203 = (char *)(v182 + 16);
        v204 = *(char *)(v182 + 39);
        if ((v204 & 0x80000000) == 0)
          goto LABEL_488;
      }
    }
    v205 = *(_QWORD *)(v182 + 24);
    if ((v205 & 0x8000000000000000) != 0)
      goto LABEL_106;
    v203 = *(char **)v203;
    v206 = v205 == 0;
    if (v205)
    {
      if (!v203)
        goto LABEL_106;
    }
LABEL_501:
    if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v210 = 22;
    else
      v210 = (v818.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v211 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
    else
      v211 = v818.__r_.__value_.__l.__size_;
    if (v210 - v211 >= v205)
    {
      if (!v206)
      {
        if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v212 = &v818;
        else
          v212 = (std::string *)v818.__r_.__value_.__r.__words[0];
        v213 = (char *)v212 + v211;
        if ((char *)v212 + v211 <= v203 && &v213[v205] > v203)
          goto LABEL_106;
        memmove(v213, v203, v205);
        v214 = v211 + v205;
        if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0)
          v818.__r_.__value_.__l.__size_ = v211 + v205;
        else
          *((_BYTE *)&v818.__r_.__value_.__s + 23) = v214 & 0x7F;
        v212->__r_.__value_.__s.__data_[v214] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v818, v210, v211 + v205 - v210, v211, v211, 0, v205, v203);
    }
    v215 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
    if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v216 = 22;
    else
      v216 = (v818.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v215 = v818.__r_.__value_.__l.__size_;
    if (v216 == v215)
    {
      std::string::__grow_by_and_replace(&v818, v216, 1uLL, v216, v216, 0, 1uLL, "/");
      rtc::StringBuilder::operator<<(&v818, *(_DWORD *)(v182 + 40));
      if (*(_QWORD *)(v182 + 48) == 1)
        goto LABEL_528;
    }
    else
    {
      if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v220 = &v818;
      else
        v220 = (std::string *)v818.__r_.__value_.__r.__words[0];
      v221 = (char *)v220 + v215;
      if ((char *)v220 + v215 <= "/" && v221 + 1 > "/")
        goto LABEL_106;
      *v221 = 47;
      v222 = v215 + 1;
      if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0)
        v818.__r_.__value_.__l.__size_ = v222;
      else
        *((_BYTE *)&v818.__r_.__value_.__s + 23) = v222 & 0x7F;
      v220->__r_.__value_.__s.__data_[v222] = 0;
      rtc::StringBuilder::operator<<(&v818, *(_DWORD *)(v182 + 40));
      if (*(_QWORD *)(v182 + 48) == 1)
      {
LABEL_528:
        v217 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v818.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_529;
        goto LABEL_546;
      }
    }
    v223 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
    if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v224 = 22;
    else
      v224 = (v818.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v223 = v818.__r_.__value_.__l.__size_;
    if (v224 == v223)
    {
      std::string::__grow_by_and_replace(&v818, v224, 1uLL, v224, v224, 0, 1uLL, "/");
      rtc::StringBuilder::operator<<(&v818, *(_QWORD *)(v182 + 48));
      v217 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(v818.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_529;
    }
    else
    {
      if ((v818.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v230 = &v818;
      else
        v230 = (std::string *)v818.__r_.__value_.__r.__words[0];
      v231 = (char *)v230 + v223;
      if ((char *)v230 + v223 <= "/" && v231 + 1 > "/")
        goto LABEL_106;
      *v231 = 47;
      v232 = v223 + 1;
      if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0)
      {
        v818.__r_.__value_.__l.__size_ = v232;
        v230->__r_.__value_.__s.__data_[v232] = 0;
        rtc::StringBuilder::operator<<(&v818, *(_QWORD *)(v182 + 48));
        v217 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v818.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_529:
          v218 = v217;
          v219 = &v818;
          goto LABEL_549;
        }
      }
      else
      {
        *((_BYTE *)&v818.__r_.__value_.__s + 23) = v232 & 0x7F;
        v230->__r_.__value_.__s.__data_[v232] = 0;
        rtc::StringBuilder::operator<<(&v818, *(_QWORD *)(v182 + 48));
        v217 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v818.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_529;
      }
    }
LABEL_546:
    v218 = v818.__r_.__value_.__l.__size_;
    if ((v818.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_106;
    v219 = (std::string *)v818.__r_.__value_.__r.__words[0];
    if (v818.__r_.__value_.__l.__size_)
    {
      if (!v818.__r_.__value_.__r.__words[0])
        goto LABEL_106;
    }
LABEL_549:
    webrtc::AddLine((char *)v219, v218, v813);
    webrtc::AddRtcpFbLines(v182, v813);
    webrtc::AddFmtpLine(v182, v813);
    LODWORD(v817.__r_.__value_.__l.__data_) = 0;
    *((_BYTE *)&__src.__r_.__value_.__s + 23) = 8;
    if (v189)
      goto LABEL_106;
    strcpy((char *)&__src, "minptime");
    Parameter = webrtc::GetParameter((const void **)&__src.__r_.__value_.__l.__data_, v182 + 168, &v817);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__src.__r_.__value_.__l.__data_);
    data = (int)v817.__r_.__value_.__l.__data_;
    if (SLODWORD(v817.__r_.__value_.__l.__data_) <= v187)
      data = v187;
    if (Parameter)
      v187 = data;
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    *((_BYTE *)&__src.__r_.__value_.__s + 23) = 5;
    if (v807)
      goto LABEL_106;
    LODWORD(__src.__r_.__value_.__l.__data_) = *(_DWORD *)"ptime";
    WORD2(__src.__r_.__value_.__r.__words[0]) = cricket::kCodecParamPTime[4];
    v227 = webrtc::GetParameter((const void **)&__src.__r_.__value_.__l.__data_, v182 + 168, &__p);
    v228 = v227;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__src.__r_.__value_.__l.__data_);
      if (!v228)
      {
LABEL_564:
        v229 = v184;
        v816 = 0;
        *((_BYTE *)&__src.__r_.__value_.__s + 23) = 8;
        if (v803)
          goto LABEL_106;
        goto LABEL_591;
      }
    }
    else if (!v227)
    {
      goto LABEL_564;
    }
    if (v184 >= v804)
    {
      v797 = v185;
      v233 = v184 - v183;
      v234 = (v184 - v183) >> 2;
      v235 = v234 + 1;
      if ((unint64_t)(v234 + 1) >> 62)
        goto LABEL_1992;
      if ((v804 - v183) >> 1 > v235)
        v235 = (v804 - v183) >> 1;
      if ((unint64_t)(v804 - v183) >= 0x7FFFFFFFFFFFFFFCLL)
        v235 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v235)
        goto LABEL_106;
      if (v235 >> 62)
        goto LABEL_1993;
      v236 = v183;
      v237 = 4 * v235;
      v238 = operator new(4 * v235);
      v239 = &v238[4 * v234];
      *(_DWORD *)v239 = __p.__r_.__value_.__l.__data_;
      v240 = v239 + 4;
      if (v184 == v236)
      {
        v244 = v236;
        v189 = v798;
        v804 = &v238[v237];
        v185 = v797;
        if (v244)
          goto LABEL_589;
      }
      else
      {
        v241 = v184 - v236 - 4;
        if (v241 < 0xBC
          || (v242 = (v184 - 4 - v236) & 0xFFFFFFFFFFFFFFFCLL, &v238[v233 - 4 - v242] > &v238[v233 - 4])
          || &v184[-v242 - 4] > v184 - 4
          || (unint64_t)(v184 - &v238[v233]) < 0x20)
        {
          v243 = v184;
          v244 = v236;
          v189 = v798;
          goto LABEL_587;
        }
        v265 = (v241 >> 2) + 1;
        v266 = 4 * (v265 & 0x7FFFFFFFFFFFFFF8);
        v243 = &v184[-v266];
        v239 -= v266;
        v267 = &v238[4 * v234 - 16];
        v268 = v184 - 16;
        v269 = v265 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v270 = *(_OWORD *)v268;
          *(v267 - 1) = *((_OWORD *)v268 - 1);
          *v267 = v270;
          v267 -= 2;
          v268 -= 32;
          v269 -= 8;
        }
        while (v269);
        v244 = v236;
        v189 = v798;
        if (v265 != (v265 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_587:
            v245 = *((_DWORD *)v243 - 1);
            v243 -= 4;
            *((_DWORD *)v239 - 1) = v245;
            v239 -= 4;
          }
          while (v243 != v244);
        }
        v804 = &v238[v237];
        v185 = v797;
        if (v244)
LABEL_589:
          operator delete(v244);
      }
      v229 = v240;
      v183 = v239;
      v816 = 0;
      *((_BYTE *)&__src.__r_.__value_.__s + 23) = 8;
      if (v803)
        goto LABEL_106;
      goto LABEL_591;
    }
    if (!v184)
      goto LABEL_106;
    *(_DWORD *)v184 = __p.__r_.__value_.__l.__data_;
    v229 = v184 + 4;
    v816 = 0;
    *((_BYTE *)&__src.__r_.__value_.__s + 23) = 8;
    if (v803)
      goto LABEL_106;
LABEL_591:
    v184 = v229;
    strcpy((char *)&__src, "maxptime");
    v246 = webrtc::GetParameter((const void **)&__src.__r_.__value_.__l.__data_, v182 + 168, &v816);
    v247 = v246;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__src.__r_.__value_.__l.__data_);
      if (!v247)
      {
LABEL_461:
        v186 = v812;
        goto LABEL_462;
      }
    }
    else if (!v246)
    {
      goto LABEL_461;
    }
    if (v812 >= (int *)v801)
    {
      v248 = v183;
      v249 = v812 - v185;
      v250 = v249 + 1;
      if ((unint64_t)(v249 + 1) >> 62)
        goto LABEL_1992;
      if ((v801 - (char *)v185) >> 1 > v250)
        v250 = (v801 - (char *)v185) >> 1;
      if ((unint64_t)(v801 - (char *)v185) >= 0x7FFFFFFFFFFFFFFCLL)
        v250 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v250)
        goto LABEL_106;
      if (v250 >> 62)
        goto LABEL_1993;
      v251 = 4 * v250;
      v252 = operator new(4 * v250);
      v253 = (int *)&v252[4 * v249];
      *v253 = v816;
      v254 = v253 + 1;
      if (v812 == v185)
      {
        v183 = v248;
        v189 = v798;
        v801 = &v252[v251];
        if (!v185)
          goto LABEL_611;
        goto LABEL_610;
      }
      v255 = (char *)v812 - (char *)v185 - 4;
      if (v255 < 0xBC
        || (v258 = ((char *)(v812 - 1) - (char *)v185) & 0xFFFFFFFFFFFFFFFCLL,
            &v252[(char *)v812 - (char *)v185 - 4 - v258] > &v252[(char *)v812 - (char *)v185 - 4])
        || (int *)((char *)v812 - v258 - 4) > v812 - 1
        || (unint64_t)((char *)v185 - v252) < 0x20)
      {
        v256 = v812;
        v183 = v248;
        v189 = v798;
      }
      else
      {
        v259 = (v255 >> 2) + 1;
        v260 = 4 * (v259 & 0x7FFFFFFFFFFFFFF8);
        v256 = &v812[v260 / 0xFFFFFFFFFFFFFFFCLL];
        v253 = (int *)((char *)v253 - v260);
        v261 = &v252[4 * v249 - 16];
        v262 = (__int128 *)(v812 - 4);
        v263 = v259 & 0x7FFFFFFFFFFFFFF8;
        v183 = v248;
        v189 = v798;
        do
        {
          v264 = *v262;
          *(v261 - 1) = *(v262 - 1);
          *v261 = v264;
          v261 -= 2;
          v262 -= 2;
          v263 -= 8;
        }
        while (v263);
        if (v259 == (v259 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_609:
          v801 = &v252[v251];
          if (!v185)
          {
LABEL_611:
            v186 = v254;
            v185 = v253;
            goto LABEL_462;
          }
LABEL_610:
          operator delete(v185);
          goto LABEL_611;
        }
      }
      do
      {
        v257 = *--v256;
        *--v253 = v257;
      }
      while (v256 != v185);
      goto LABEL_609;
    }
    if (!v812)
      goto LABEL_106;
    *v812 = v816;
    v186 = v812 + 1;
LABEL_462:
    v182 += 216;
  }
  while (v182 != v810);
  if (v185 == v186)
  {
    v278 = 0x7FFFFFFF;
    v273 = v813;
    if (v183 == v184)
      goto LABEL_651;
LABEL_640:
    v279 = (int *)(v183 + 4);
    v280 = (int *)v183;
    if (v183 + 4 != v184)
    {
      v281 = *(_DWORD *)v183;
      v280 = (int *)v183;
      v282 = v183 + 4;
      do
      {
        v284 = *(_DWORD *)v282;
        v282 += 4;
        v283 = v284;
        if (v284 < v281)
        {
          v281 = v283;
          v280 = v279;
        }
        v279 = (int *)v282;
      }
      while (v282 != v184);
    }
    v285 = *v280;
    if (v278 < *v280)
      v285 = v278;
    if (v285 <= v187)
      v286 = v187;
    else
      v286 = v285;
    webrtc::AddAttributeLine("ptime", 5uLL, v286, v273);
    goto LABEL_651;
  }
  v271 = v185 + 1;
  v272 = v185;
  v273 = v813;
  if (v185 + 1 != v186)
  {
    v274 = *v185;
    v272 = v185;
    v275 = v185 + 1;
    do
    {
      v277 = *v275++;
      v276 = v277;
      if (v277 < v274)
      {
        v274 = v276;
        v272 = v271;
      }
      v271 = v275;
    }
    while (v275 != v186);
  }
  v278 = *v272;
  webrtc::AddAttributeLine("maxptime", 8uLL, *v272, v813);
  if (v183 != v184)
    goto LABEL_640;
LABEL_651:
  if (v185)
    operator delete(v185);
  if (v183)
    operator delete(v183);
LABEL_655:
  if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v818.__r_.__value_.__l.__data_);
    v287 = (_QWORD *)v800[12];
    v799 = (_QWORD *)v800[13];
    v288 = v813;
    if (v287 == v799)
      goto LABEL_1888;
  }
  else
  {
    v287 = (_QWORD *)v800[12];
    v799 = (_QWORD *)v800[13];
    v288 = v813;
    if (v287 == v799)
      goto LABEL_1888;
  }
  v290 = &__p <= (std::string *)"-" && (char *)&__p.__r_.__value_.__l.__data_ + 1 > "-";
  v802 = v290;
  while (2)
  {
    v292 = (char *)v287[6];
    v291 = (char *)v287[7];
    v808 = v291;
    v811 = v287;
    while (2)
    {
      if (v292 != v291)
      {
        if (*((_QWORD *)v292 + 3) == *((_QWORD *)v292 + 4))
          goto LABEL_669;
        webrtc::InitLine(97, "ssrc-group", 0xAuLL, &v815);
        v294 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v295 = 22;
        else
          v295 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v294 = v815.__r_.__value_.__l.__size_;
        v812 = (int *)v292;
        if (v295 == v294)
        {
          v296 = &v815;
          if (v295 == 0x7FFFFFFFFFFFFFF6)
            goto LABEL_1992;
          if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v297 = &v815;
          else
            v297 = (std::string *)v815.__r_.__value_.__r.__words[0];
          v298 = 0x7FFFFFFFFFFFFFF7;
          if (v295 >= 0x3FFFFFFFFFFFFFF3)
          {
LABEL_688:
            v300 = (std::string *)operator new(v298);
            v301 = (std::string *)((char *)v300 + v295);
            if (!v295)
              goto LABEL_713;
          }
          else
          {
            if (v295 + 1 > 2 * v295)
              v299 = v295 + 1;
            else
              v299 = 2 * v295;
            if (v299 < 0x17)
            {
              v298 = 23;
              goto LABEL_688;
            }
            v308 = (v299 & 0xFFFFFFFFFFFFFFF8) + 8;
            v309 = v299 | 7;
            if (v309 == 23)
              v309 = v308;
            v298 = v309 + 1;
            v300 = (std::string *)operator new(v309 + 1);
            v301 = (std::string *)((char *)v300 + v295);
            if (!v295)
            {
LABEL_713:
              if (v301 <= (std::string *)":" && (char *)&v301->__r_.__value_.__l.__data_ + 1 > ":")
                goto LABEL_106;
              v301->__r_.__value_.__s.__data_[0] = 58;
              goto LABEL_716;
            }
          }
          if (v297 >= v300 && v301 > v297)
            goto LABEL_106;
          memmove(v300, v297, v295);
          if (v301 <= (std::string *)":" && (char *)&v301->__r_.__value_.__l.__data_ + 1 > ":")
            goto LABEL_106;
          v301->__r_.__value_.__s.__data_[0] = 58;
          if (v295 != 22)
LABEL_716:
            operator delete(v297);
          v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v300;
          v815.__r_.__value_.__l.__size_ = v295 + 1;
          v815.__r_.__value_.__r.__words[2] = v298 | 0x8000000000000000;
          v292 = (char *)v812;
          v300->__r_.__value_.__s.__data_[v295 + 1] = 0;
          v305 = *((char *)v812 + 23);
          if ((v305 & 0x80000000) == 0)
          {
LABEL_718:
            v306 = v305;
            v307 = v305 == 0;
            goto LABEL_719;
          }
        }
        else
        {
          v296 = &v815;
          if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v302 = &v815;
          else
            v302 = (std::string *)v815.__r_.__value_.__r.__words[0];
          if ((char *)v302 + v294 <= ":" && (char *)&v302->__r_.__value_.__l.__data_ + v294 + 1 > ":")
            goto LABEL_106;
          v302->__r_.__value_.__s.__data_[v294] = 58;
          v304 = v294 + 1;
          if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
          {
            v815.__r_.__value_.__l.__size_ = v304;
            v302->__r_.__value_.__s.__data_[v304] = 0;
            v305 = v292[23];
            if ((v305 & 0x80000000) == 0)
              goto LABEL_718;
          }
          else
          {
            *((_BYTE *)&v815.__r_.__value_.__s + 23) = v304 & 0x7F;
            v302->__r_.__value_.__s.__data_[v304] = 0;
            v305 = v292[23];
            if ((v305 & 0x80000000) == 0)
              goto LABEL_718;
          }
        }
        v306 = *((_QWORD *)v292 + 1);
        if ((v306 & 0x8000000000000000) != 0)
          goto LABEL_106;
        v292 = *(char **)v292;
        v307 = v306 == 0;
        if (v306)
        {
          if (!v292)
            goto LABEL_106;
        }
LABEL_719:
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v310 = 22;
        else
          v310 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v311 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
        else
          v311 = v815.__r_.__value_.__l.__size_;
        if (v310 - v311 >= v306)
        {
          if (!v307)
          {
            if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v317 = &v815;
            else
              v317 = (std::string *)v815.__r_.__value_.__r.__words[0];
            v318 = (char *)v317 + v311;
            if ((char *)v317 + v311 <= v292 && &v318[v306] > v292)
              goto LABEL_106;
            memmove(v318, v292, v306);
            v319 = v311 + v306;
            if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
              v815.__r_.__value_.__l.__size_ = v311 + v306;
            else
              *((_BYTE *)&v815.__r_.__value_.__s + 23) = v319 & 0x7F;
            v320 = (char *)v317 + v319;
            goto LABEL_756;
          }
        }
        else
        {
          v312 = v311 + v306;
          if (0x7FFFFFFFFFFFFFF6 - v310 < v311 + v306 - v310)
            goto LABEL_1992;
          if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v296 = (std::string *)v815.__r_.__value_.__r.__words[0];
          v313 = 0x7FFFFFFFFFFFFFF7;
          if (v310 >= 0x3FFFFFFFFFFFFFF3)
          {
LABEL_734:
            v315 = (std::string *)operator new(v313);
            if (!v311)
              goto LABEL_751;
          }
          else
          {
            v314 = 2 * v310;
            if (v312 > 2 * v310)
              v314 = v311 + v306;
            if (v314 < 0x17)
            {
              v313 = 23;
              goto LABEL_734;
            }
            v321 = (v314 & 0xFFFFFFFFFFFFFFF8) + 8;
            v322 = v314 | 7;
            if (v322 == 23)
              v322 = v321;
            v313 = v322 + 1;
            v315 = (std::string *)operator new(v322 + 1);
            if (!v311)
            {
LABEL_751:
              v316 = (char *)v315 + v311;
              if ((char *)v315 + v311 <= v292)
                goto LABEL_752;
              goto LABEL_753;
            }
          }
          if (v296 >= v315 && (std::string *)((char *)v315 + v311) > v296)
            goto LABEL_106;
          memmove(v315, v296, v311);
          v316 = (char *)v315 + v311;
          if ((char *)v315 + v311 <= v292)
          {
LABEL_752:
            if (&v316[v306] > v292)
              goto LABEL_106;
          }
LABEL_753:
          memcpy(v316, v292, v306);
          if (v310 != 22)
            operator delete(v296);
          v815.__r_.__value_.__l.__size_ = v311 + v306;
          v815.__r_.__value_.__r.__words[2] = v313 | 0x8000000000000000;
          v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v315;
          v320 = (char *)v315 + v312;
          v296 = &v815;
LABEL_756:
          *v320 = 0;
        }
        v324 = (int *)*((_QWORD *)v812 + 3);
        v323 = (int *)*((_QWORD *)v812 + 4);
        while (2)
        {
          if (v324 != v323)
          {
            v325 = *v324;
            v326 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
            if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v327 = 22;
            else
              v327 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v326 = v815.__r_.__value_.__l.__size_;
            if (v327 != v326)
            {
              if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v334 = &v815;
              else
                v334 = (std::string *)v815.__r_.__value_.__r.__words[0];
              if ((char *)v334 + v326 <= " " && (char *)&v334->__r_.__value_.__l.__data_ + v326 + 1 > " ")
                goto LABEL_106;
              v334->__r_.__value_.__s.__data_[v326] = 32;
              v336 = v326 + 1;
              if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                v815.__r_.__value_.__l.__size_ = v336;
              else
                *((_BYTE *)&v815.__r_.__value_.__s + 23) = v336 & 0x7F;
              v337 = (char *)v334 + v336;
              goto LABEL_806;
            }
            if (v327 == 0x7FFFFFFFFFFFFFF6)
              goto LABEL_1992;
            if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v328 = &v815;
            else
              v328 = (std::string *)v815.__r_.__value_.__r.__words[0];
            v329 = 0x7FFFFFFFFFFFFFF7;
            if (v327 >= 0x3FFFFFFFFFFFFFF3)
            {
LABEL_776:
              v331 = (std::string *)operator new(v329);
              v332 = (std::string *)((char *)v331 + v327);
              if (!v327)
                goto LABEL_799;
            }
            else
            {
              if (v327 + 1 > 2 * v327)
                v330 = v327 + 1;
              else
                v330 = 2 * v327;
              if (v330 < 0x17)
              {
                v329 = 23;
                goto LABEL_776;
              }
              v338 = (v330 & 0xFFFFFFFFFFFFFFF8) + 8;
              v339 = v330 | 7;
              if (v339 == 23)
                v339 = v338;
              v329 = v339 + 1;
              v331 = (std::string *)operator new(v339 + 1);
              v332 = (std::string *)((char *)v331 + v327);
              if (!v327)
              {
LABEL_799:
                if (v332 <= (std::string *)" " && (char *)&v332->__r_.__value_.__l.__data_ + 1 > " ")
                  goto LABEL_106;
                v332->__r_.__value_.__s.__data_[0] = 32;
LABEL_804:
                operator delete(v328);
LABEL_805:
                v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v331;
                v815.__r_.__value_.__l.__size_ = v327 + 1;
                v815.__r_.__value_.__r.__words[2] = v329 | 0x8000000000000000;
                v337 = &v331->__r_.__value_.__s.__data_[v327 + 1];
LABEL_806:
                *v337 = 0;
                v341 = snprintf((char *)&__src, 0x20uLL, "%u", v325);
                if (v341 < 0)
                  goto LABEL_1992;
                v342 = v341;
                if (v341 > 0x16)
                {
                  v346 = (v341 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v341 | 7) != 0x17)
                    v346 = v341 | 7;
                  v347 = v346 + 1;
                  v343 = (std::string *)operator new(v346 + 1);
                  v818.__r_.__value_.__l.__size_ = v342;
                  v818.__r_.__value_.__r.__words[2] = v347 | 0x8000000000000000;
                  v818.__r_.__value_.__r.__words[0] = (std::string::size_type)v343;
                  v344 = (char *)v343 + v342;
                  v345 = (std::string *)((char *)v343 + v342) > &__src;
                  if (v343 <= &__src)
                    goto LABEL_813;
                }
                else
                {
                  *((_BYTE *)&v818.__r_.__value_.__s + 23) = v341;
                  v343 = &v818;
                  v344 = (char *)&v818 + v342;
                  v345 = (std::string *)((char *)&v818 + v342) > &__src;
                  if (&v818 > &__src)
                    goto LABEL_814;
LABEL_813:
                  if (v345)
                    goto LABEL_106;
                }
LABEL_814:
                if ((_DWORD)v342)
                  memcpy(v343, &__src, v342);
                *v344 = 0;
                v348 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0)
                {
                  v349 = v818.__r_.__value_.__l.__size_;
                  if ((v818.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                    goto LABEL_106;
                  v351 = (std::string *)v818.__r_.__value_.__r.__words[0];
                  v350 = v818.__r_.__value_.__l.__size_ == 0;
                  if (v818.__r_.__value_.__l.__size_)
                  {
                    if (!v818.__r_.__value_.__r.__words[0])
                      goto LABEL_106;
                  }
                }
                else
                {
                  v349 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
                  v350 = SHIBYTE(v818.__r_.__value_.__r.__words[2]) == 0;
                  v351 = &v818;
                }
                if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v352 = 22;
                else
                  v352 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v353 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                else
                  v353 = v815.__r_.__value_.__l.__size_;
                if (v352 - v353 < v349)
                {
                  v354 = v353 + v349;
                  if (0x7FFFFFFFFFFFFFF6 - v352 < v353 + v349 - v352)
                    goto LABEL_1992;
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v296 = (std::string *)v815.__r_.__value_.__r.__words[0];
                  v355 = 0x7FFFFFFFFFFFFFF7;
                  if (v352 >= 0x3FFFFFFFFFFFFFF3)
                  {
LABEL_836:
                    v357 = (std::string *)operator new(v355);
                    if (!v353)
                      goto LABEL_840;
                  }
                  else
                  {
                    v356 = 2 * v352;
                    if (v354 > 2 * v352)
                      v356 = v353 + v349;
                    if (v356 < 0x17)
                    {
                      v355 = 23;
                      goto LABEL_836;
                    }
                    v363 = (v356 & 0xFFFFFFFFFFFFFFF8) + 8;
                    v364 = v356 | 7;
                    if (v364 == 23)
                      v364 = v363;
                    v355 = v364 + 1;
                    v357 = (std::string *)operator new(v364 + 1);
                    if (!v353)
                    {
LABEL_840:
                      v358 = (char *)v357 + v353;
                      if ((std::string *)((char *)v357 + v353) <= v351 && &v358[v349] > (char *)v351)
                        goto LABEL_106;
                      memcpy(v358, v351, v349);
                      if (v352 != 22)
                        operator delete(v296);
                      v815.__r_.__value_.__l.__size_ = v353 + v349;
                      v815.__r_.__value_.__r.__words[2] = v355 | 0x8000000000000000;
                      v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v357;
                      v359 = (char *)v357 + v354;
                      v296 = &v815;
                      goto LABEL_859;
                    }
                  }
                  if (v296 >= v357 && (std::string *)((char *)v357 + v353) > v296)
                    goto LABEL_106;
                  memmove(v357, v296, v353);
                  goto LABEL_840;
                }
                if (!v350)
                {
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v360 = &v815;
                  else
                    v360 = (std::string *)v815.__r_.__value_.__r.__words[0];
                  v361 = (char *)v360 + v353;
                  if ((std::string *)((char *)v360 + v353) <= v351 && &v361[v349] > (char *)v351)
                    goto LABEL_106;
                  memmove(v361, v351, v349);
                  v362 = v353 + v349;
                  if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                    v815.__r_.__value_.__l.__size_ = v353 + v349;
                  else
                    *((_BYTE *)&v815.__r_.__value_.__s + 23) = v362 & 0x7F;
                  v359 = (char *)v360 + v362;
LABEL_859:
                  *v359 = 0;
                  v348 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
                }
                if (v348 < 0)
                  operator delete(v818.__r_.__value_.__l.__data_);
                ++v324;
                continue;
              }
            }
            if (v328 >= v331 && v332 > v328)
              goto LABEL_106;
            memmove(v331, v328, v327);
            if (v332 <= (std::string *)" " && (char *)&v332->__r_.__value_.__l.__data_ + 1 > " ")
              goto LABEL_106;
            v332->__r_.__value_.__s.__data_[0] = 32;
            if (v327 != 22)
              goto LABEL_804;
            goto LABEL_805;
          }
          break;
        }
        if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v365 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
          v366 = &v815;
          v292 = (char *)v812;
          v288 = v813;
          goto LABEL_867;
        }
        v365 = v815.__r_.__value_.__l.__size_;
        v292 = (char *)v812;
        v288 = v813;
        if ((v815.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_106;
        v366 = (std::string *)v815.__r_.__value_.__r.__words[0];
        if (v815.__r_.__value_.__l.__size_)
        {
          if (!v815.__r_.__value_.__r.__words[0])
            goto LABEL_106;
        }
LABEL_867:
        if (!v288)
          goto LABEL_669;
        if (!v366 && v365)
          goto LABEL_106;
        v367 = SHIBYTE(v288->__r_.__value_.__r.__words[2]);
        if (v367 < 0)
        {
          v370 = v288->__r_.__value_.__l.__size_;
          v376 = v288->__r_.__value_.__r.__words[2];
          v369 = (v376 & 0x7FFFFFFFFFFFFFFFLL) - 1;
          v368 = HIBYTE(v376);
          if (v369 - v370 >= v365)
            goto LABEL_882;
LABEL_872:
          if (0x7FFFFFFFFFFFFFF6 - v369 < v365 - v369 + v370)
            goto LABEL_1992;
          v371 = v288;
          if (v367 < 0)
          {
            v371 = (std::string *)v288->__r_.__value_.__r.__words[0];
            v372 = 0x7FFFFFFFFFFFFFF7;
            if (v369 >= 0x3FFFFFFFFFFFFFF3)
              goto LABEL_887;
LABEL_875:
            v373 = v370 + v365;
            if (v370 + v365 <= 2 * v369)
              v373 = 2 * v369;
            if (v373 >= 0x17)
            {
              v380 = (v373 & 0xFFFFFFFFFFFFFFF8) + 8;
              v381 = v373 | 7;
              if (v381 == 23)
                v381 = v380;
              v372 = v381 + 1;
              v374 = (std::string *)operator new(v381 + 1);
              if (v370)
                goto LABEL_888;
            }
            else
            {
              v372 = 23;
              v374 = (std::string *)operator new(0x17uLL);
              if (v370)
                goto LABEL_888;
            }
          }
          else
          {
            v372 = 0x7FFFFFFFFFFFFFF7;
            if (v369 < 0x3FFFFFFFFFFFFFF3)
              goto LABEL_875;
LABEL_887:
            v374 = (std::string *)operator new(0x7FFFFFFFFFFFFFF7uLL);
            if (v370)
            {
LABEL_888:
              if (v371 >= v374 && (std::string *)((char *)v374 + v370) > v371)
                goto LABEL_106;
              memmove(v374, v371, v370);
              v375 = (char *)v374 + v370;
              if ((std::string *)((char *)v374 + v370) <= v366)
              {
LABEL_891:
                if (&v375[v365] > (char *)v366)
                  goto LABEL_106;
              }
LABEL_892:
              memcpy(v375, v366, v365);
              if (v369 != 22)
                operator delete(v371);
              v379 = v372 | 0x8000000000000000;
              v368 = v370 + v365;
              v288->__r_.__value_.__r.__words[0] = (std::string::size_type)v374;
              v288->__r_.__value_.__l.__size_ = v370 + v365;
              v288->__r_.__value_.__r.__words[2] = v379;
              v374->__r_.__value_.__s.__data_[v370 + v365] = 0;
LABEL_910:
              v386 = v379 & 0x7FFFFFFFFFFFFFFFLL;
              v385 = (v379 & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v385 - v368 < 2)
              {
                v383 = v368 - v385 + 2;
                if (0x7FFFFFFFFFFFFFF7 - v386 < v383)
                  goto LABEL_1992;
                v384 = (std::string *)v813->__r_.__value_.__r.__words[0];
                v387 = 0x7FFFFFFFFFFFFFF7;
                if (v385 >= 0x3FFFFFFFFFFFFFF3)
                {
LABEL_917:
                  v389 = (std::string *)operator new(v387);
                  if (!v368)
                    goto LABEL_927;
                }
                else
                {
LABEL_913:
                  v388 = v385 + v383;
                  if (v388 <= 2 * v385)
                    v388 = 2 * v385;
                  if (v388 < 0x17)
                  {
                    v387 = 23;
                    goto LABEL_917;
                  }
                  v393 = (v388 & 0xFFFFFFFFFFFFFFF8) + 8;
                  v394 = v388 | 7;
                  if (v394 == 23)
                    v394 = v393;
                  v387 = v394 + 1;
                  v389 = (std::string *)operator new(v394 + 1);
                  if (!v368)
                  {
LABEL_927:
                    v390 = (char *)v389 + v368;
                    if ((char *)v389 + v368 <= "\r\n")
                      goto LABEL_928;
                    goto LABEL_929;
                  }
                }
                if (v384 >= v389 && (std::string *)((char *)v389 + v368) > v384)
                  goto LABEL_106;
                memmove(v389, v384, v368);
                v390 = (char *)v389 + v368;
                if ((char *)v389 + v368 <= "\r\n")
                {
LABEL_928:
                  if (v390 + 2 > "\r\n")
                    goto LABEL_106;
                }
LABEL_929:
                *(_WORD *)v390 = 2573;
                if (v385 != 22)
                  operator delete(v384);
                v288 = v813;
                v813->__r_.__value_.__r.__words[0] = (std::string::size_type)v389;
                v813->__r_.__value_.__l.__size_ = v368 + 2;
                v813->__r_.__value_.__r.__words[2] = v387 | 0x8000000000000000;
                v293 = &v389->__r_.__value_.__s.__data_[v368 + 2];
LABEL_668:
                *v293 = 0;
LABEL_669:
                v292 += 48;
                v291 = v808;
                continue;
              }
              v288 = v813;
              v391 = v813->__r_.__value_.__r.__words[0];
              v392 = (char *)(v813->__r_.__value_.__r.__words[0] + v368);
              if (v392 > "\r\n")
              {
LABEL_933:
                *(_WORD *)v392 = 2573;
                v395 = v368 + 2;
                if (SHIBYTE(v288->__r_.__value_.__r.__words[2]) < 0)
                  v288->__r_.__value_.__l.__size_ = v395;
                else
                  *((_BYTE *)&v288->__r_.__value_.__s + 23) = v395 & 0x7F;
                v293 = (char *)(v391 + v395);
                goto LABEL_668;
              }
LABEL_932:
              if (v392 + 2 > "\r\n")
                goto LABEL_106;
              goto LABEL_933;
            }
          }
          v375 = (char *)v374 + v370;
          if ((std::string *)((char *)v374 + v370) <= v366)
            goto LABEL_891;
          goto LABEL_892;
        }
        v368 = HIBYTE(v288->__r_.__value_.__r.__words[2]);
        v369 = 22;
        v370 = v368;
        if (22 - v368 < v365)
          goto LABEL_872;
LABEL_882:
        if (!v365)
        {
LABEL_906:
          if ((v368 & 0x80) != 0)
          {
            v368 = v288->__r_.__value_.__l.__size_;
            v379 = v288->__r_.__value_.__r.__words[2];
            goto LABEL_910;
          }
          if (v368 - 21 < 2)
          {
            v383 = v368 - 20;
            v384 = v288;
            v385 = 22;
            goto LABEL_913;
          }
          v391 = (std::string::size_type)v288;
          v392 = (char *)v288 + v368;
          if ((char *)v288 + v368 > "\r\n")
            goto LABEL_933;
          goto LABEL_932;
        }
        v377 = v288;
        if (v367 < 0)
        {
          v377 = (std::string *)v288->__r_.__value_.__r.__words[0];
          v378 = (std::string *)(v288->__r_.__value_.__r.__words[0] + v370);
          if (v378 > v366)
            goto LABEL_902;
        }
        else
        {
          v378 = (std::string *)((char *)v288 + v370);
          if ((std::string *)((char *)v288 + v370) > v366)
          {
LABEL_902:
            memmove(v378, v366, v365);
            v382 = v370 + v365;
            if (SHIBYTE(v288->__r_.__value_.__r.__words[2]) < 0)
              v288->__r_.__value_.__l.__size_ = v382;
            else
              *((_BYTE *)&v288->__r_.__value_.__s + 23) = v382 & 0x7F;
            v377->__r_.__value_.__s.__data_[v382] = 0;
            v368 = HIBYTE(v288->__r_.__value_.__r.__words[2]);
            goto LABEL_906;
          }
        }
        if ((std::string *)((char *)v378 + v365) <= v366)
          goto LABEL_902;
LABEL_106:
        __break(1u);
LABEL_107:
        a4 = v813;
        v6 = v800;
        a2 = (int)v812;
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__src.__r_.__value_.__l.__data_);
        goto LABEL_109;
      }
      break;
    }
    v396 = (char **)v811;
    v397 = (int *)v811[3];
    v805 = (int *)v811[4];
    if (v397 != v805)
    {
      while (2)
      {
        v812 = v397;
        v398 = *v397;
        if (*((char *)v396 + 95) < 0)
        {
          v399 = (size_t)v396[10];
          if ((v399 & 0x8000000000000000) != 0)
            goto LABEL_106;
          v400 = (char *)v811[9];
          if (v399 && v400 == 0)
            goto LABEL_106;
        }
        else
        {
          v399 = *((unsigned __int8 *)v396 + 95);
          v400 = (char *)(v811 + 9);
        }
        memset(&v817, 0, sizeof(v817));
        webrtc::InitLine(97, "ssrc", 4uLL, &v817);
        v402 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v403 = 22;
        else
          v403 = (v817.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v402 = v817.__r_.__value_.__l.__size_;
        if (v403 == v402)
        {
          if (v403 == 0x7FFFFFFFFFFFFFF6)
            goto LABEL_1992;
          if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v404 = &v817;
          else
            v404 = (std::string *)v817.__r_.__value_.__r.__words[0];
          v405 = 0x7FFFFFFFFFFFFFF7;
          if (v403 >= 0x3FFFFFFFFFFFFFF3)
          {
LABEL_964:
            v407 = (std::string *)operator new(v405);
            if (!v403)
              goto LABEL_984;
          }
          else
          {
            if (v403 + 1 > 2 * v403)
              v406 = v403 + 1;
            else
              v406 = 2 * v403;
            if (v406 < 0x17)
            {
              v405 = 23;
              goto LABEL_964;
            }
            v413 = (v406 & 0xFFFFFFFFFFFFFFF8) + 8;
            v414 = v406 | 7;
            if (v414 == 23)
              v414 = v413;
            v405 = v414 + 1;
            v407 = (std::string *)operator new(v414 + 1);
            if (!v403)
            {
LABEL_984:
              if (v407 <= (std::string *)":" && (char *)&v407->__r_.__value_.__l.__data_ + 1 > ":")
                goto LABEL_106;
              v407->__r_.__value_.__s.__data_[0] = 58;
              goto LABEL_987;
            }
          }
          v408 = (std::string *)((char *)v407 + v403);
          if (v404 >= v407 && v408 > v404)
            goto LABEL_106;
          memmove(v407, v404, v403);
          if (v408 <= (std::string *)":" && (char *)&v408->__r_.__value_.__l.__data_ + 1 > ":")
            goto LABEL_106;
          v408->__r_.__value_.__s.__data_[0] = 58;
          if (v403 != 22)
LABEL_987:
            operator delete(v404);
          v817.__r_.__value_.__r.__words[0] = (std::string::size_type)v407;
          v817.__r_.__value_.__l.__size_ = v403 + 1;
          v817.__r_.__value_.__r.__words[2] = v405 | 0x8000000000000000;
          v412 = &v407->__r_.__value_.__s.__data_[v403 + 1];
        }
        else
        {
          v409 = &v817;
          if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v409 = (std::string *)v817.__r_.__value_.__r.__words[0];
          if ((char *)v409 + v402 <= ":" && (char *)&v409->__r_.__value_.__l.__data_ + v402 + 1 > ":")
            goto LABEL_106;
          v409->__r_.__value_.__s.__data_[v402] = 58;
          v411 = v402 + 1;
          if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
            v817.__r_.__value_.__l.__size_ = v411;
          else
            *((_BYTE *)&v817.__r_.__value_.__s + 23) = v411 & 0x7F;
          v412 = (char *)v409 + v411;
        }
        *v412 = 0;
        v415 = snprintf((char *)&__src, 0x20uLL, "%u", v398);
        if (v415 < 0)
          goto LABEL_1992;
        v416 = v415;
        if (v415 > 0x16)
        {
          v420 = (v415 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v415 | 7) != 0x17)
            v420 = v415 | 7;
          v421 = v420 + 1;
          v417 = (std::string *)operator new(v420 + 1);
          v818.__r_.__value_.__l.__size_ = v416;
          v818.__r_.__value_.__r.__words[2] = v421 | 0x8000000000000000;
          v818.__r_.__value_.__r.__words[0] = (std::string::size_type)v417;
          v418 = (char *)v417 + v416;
          v419 = (std::string *)((char *)v417 + v416) > &__src;
          if (v417 <= &__src)
            goto LABEL_996;
        }
        else
        {
          *((_BYTE *)&v818.__r_.__value_.__s + 23) = v415;
          v417 = &v818;
          v418 = (char *)&v818 + v416;
          v419 = (std::string *)((char *)&v818 + v416) > &__src;
          if (&v818 > &__src)
            goto LABEL_997;
LABEL_996:
          if (v419)
            goto LABEL_106;
        }
LABEL_997:
        if ((_DWORD)v416)
          memcpy(v417, &__src, v416);
        *v418 = 0;
        v422 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0)
        {
          v423 = v818.__r_.__value_.__l.__size_;
          v425 = (std::string *)v818.__r_.__value_.__r.__words[0];
          v424 = v818.__r_.__value_.__l.__size_ == 0;
          if (!v818.__r_.__value_.__r.__words[0] && v818.__r_.__value_.__l.__size_)
            goto LABEL_106;
        }
        else
        {
          v423 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
          v424 = SHIBYTE(v818.__r_.__value_.__r.__words[2]) == 0;
          v425 = &v818;
        }
        v809 = v398;
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v426 = 22;
        else
          v426 = (v817.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v427 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
        else
          v427 = v817.__r_.__value_.__l.__size_;
        if (v426 - v427 < v423)
        {
          v428 = v427 + v423;
          if (0x7FFFFFFFFFFFFFF6 - v426 < v427 + v423 - v426)
            goto LABEL_1992;
          if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v429 = &v817;
          else
            v429 = (std::string *)v817.__r_.__value_.__r.__words[0];
          v430 = 0x7FFFFFFFFFFFFFF7;
          if (v426 >= 0x3FFFFFFFFFFFFFF3)
          {
LABEL_1019:
            v432 = (std::string *)operator new(v430);
            if (!v427)
              goto LABEL_1023;
          }
          else
          {
            v431 = 2 * v426;
            if (v428 > 2 * v426)
              v431 = v427 + v423;
            if (v431 < 0x17)
            {
              v430 = 23;
              goto LABEL_1019;
            }
            v438 = (v431 & 0xFFFFFFFFFFFFFFF8) + 8;
            v439 = v431 | 7;
            if (v439 == 23)
              v439 = v438;
            v430 = v439 + 1;
            v432 = (std::string *)operator new(v439 + 1);
            if (!v427)
            {
LABEL_1023:
              v433 = (char *)v432 + v427;
              if ((std::string *)((char *)v432 + v427) <= v425 && &v433[v423] > (char *)v425)
                goto LABEL_106;
              memcpy(v433, v425, v423);
              if (v426 != 22)
                operator delete(v429);
              v817.__r_.__value_.__l.__size_ = v427 + v423;
              v817.__r_.__value_.__r.__words[2] = v430 | 0x8000000000000000;
              v817.__r_.__value_.__r.__words[0] = (std::string::size_type)v432;
              v434 = (char *)v432 + v428;
              goto LABEL_1042;
            }
          }
          if (v429 >= v432 && (std::string *)((char *)v432 + v427) > v429)
            goto LABEL_106;
          memmove(v432, v429, v427);
          goto LABEL_1023;
        }
        if (!v424)
        {
          if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v435 = &v817;
          else
            v435 = (std::string *)v817.__r_.__value_.__r.__words[0];
          v436 = (char *)v435 + v427;
          if ((std::string *)((char *)v435 + v427) <= v425 && &v436[v423] > (char *)v425)
            goto LABEL_106;
          memmove(v436, v425, v423);
          v437 = v427 + v423;
          if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
            v817.__r_.__value_.__l.__size_ = v427 + v423;
          else
            *((_BYTE *)&v817.__r_.__value_.__s + 23) = v437 & 0x7F;
          v434 = (char *)v435 + v437;
LABEL_1042:
          *v434 = 0;
          v422 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
        }
        if (v422 < 0)
          operator delete(v818.__r_.__value_.__l.__data_);
        v440 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v441 = 22;
        else
          v441 = (v817.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v440 = v817.__r_.__value_.__l.__size_;
        if (v441 == v440)
        {
          if (v441 == 0x7FFFFFFFFFFFFFF6)
            goto LABEL_1992;
          if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v442 = &v817;
          else
            v442 = (std::string *)v817.__r_.__value_.__r.__words[0];
          v443 = 0x7FFFFFFFFFFFFFF7;
          if (v441 >= 0x3FFFFFFFFFFFFFF3)
          {
LABEL_1061:
            v445 = (std::string *)operator new(v443);
            if (!v441)
              goto LABEL_1079;
          }
          else
          {
            if (v441 + 1 > 2 * v441)
              v444 = v441 + 1;
            else
              v444 = 2 * v441;
            if (v444 < 0x17)
            {
              v443 = 23;
              goto LABEL_1061;
            }
            v453 = (v444 & 0xFFFFFFFFFFFFFFF8) + 8;
            v454 = v444 | 7;
            if (v454 == 23)
              v454 = v453;
            v443 = v454 + 1;
            v445 = (std::string *)operator new(v454 + 1);
            if (!v441)
            {
LABEL_1079:
              if (v445 <= (std::string *)" " && (char *)&v445->__r_.__value_.__l.__data_ + 1 > " ")
                goto LABEL_106;
              v445->__r_.__value_.__s.__data_[0] = 32;
              goto LABEL_1082;
            }
          }
          v446 = (std::string *)((char *)v445 + v441);
          if (v442 >= v445 && v446 > v442)
            goto LABEL_106;
          memmove(v445, v442, v441);
          if (v446 <= (std::string *)" " && (char *)&v446->__r_.__value_.__l.__data_ + 1 > " ")
            goto LABEL_106;
          v446->__r_.__value_.__s.__data_[0] = 32;
          if (v441 != 22)
LABEL_1082:
            operator delete(v442);
          v452 = v443 | 0x8000000000000000;
          v451 = v441 + 1;
          v817.__r_.__value_.__r.__words[0] = (std::string::size_type)v445;
          v817.__r_.__value_.__l.__size_ = v451;
          v817.__r_.__value_.__r.__words[2] = v443 | 0x8000000000000000;
          v445->__r_.__value_.__s.__data_[v451] = 0;
          v450 = (v443 | 0x8000000000000000) >> 56;
        }
        else
        {
          v447 = &v817;
          if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v447 = (std::string *)v817.__r_.__value_.__r.__words[0];
          v448 = (char *)v447 + v440;
          if ((char *)v447 + v440 <= " " && v448 + 1 > " ")
            goto LABEL_106;
          *v448 = 32;
          v449 = v440 + 1;
          if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
            v817.__r_.__value_.__l.__size_ = v449;
          else
            *((_BYTE *)&v817.__r_.__value_.__s + 23) = v449 & 0x7F;
          v447->__r_.__value_.__s.__data_[v449] = 0;
          v450 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
          v452 = v817.__r_.__value_.__r.__words[2];
          v451 = v817.__r_.__value_.__l.__size_;
        }
        v455 = (v452 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v450 & 0x80u) == 0)
          v456 = 22;
        else
          v456 = v455;
        if ((v450 & 0x80u) == 0)
          v457 = v450;
        else
          v457 = v451;
        if (v456 - v457 < 5)
        {
          v458 = v457 + 5;
          if (0x7FFFFFFFFFFFFFF6 - v456 < v457 + 5 - v456)
            goto LABEL_1992;
          if ((v450 & 0x80u) == 0)
            v459 = &v817;
          else
            v459 = (std::string *)v817.__r_.__value_.__r.__words[0];
          v460 = 0x7FFFFFFFFFFFFFF7;
          if (v456 >= 0x3FFFFFFFFFFFFFF3)
          {
LABEL_1100:
            v462 = (std::string *)operator new(v460);
            if (!v457)
              goto LABEL_1104;
          }
          else
          {
            v461 = 2 * v456;
            if (v458 > 2 * v456)
              v461 = v457 + 5;
            if (v461 < 0x17)
            {
              v460 = 23;
              goto LABEL_1100;
            }
            v481 = (v461 & 0xFFFFFFFFFFFFFFF8) + 8;
            v482 = v461 | 7;
            if (v482 == 23)
              v482 = v481;
            v460 = v482 + 1;
            v462 = (std::string *)operator new(v482 + 1);
            if (!v457)
            {
LABEL_1104:
              v463 = (char *)v462 + v457;
              if ((char *)v462 + v457 <= "cname" && v463 + 5 > "cname")
                goto LABEL_106;
              v463[4] = 101;
              *(_DWORD *)v463 = 1835101795;
              if (v456 != 22)
                operator delete(v459);
              v464 = v460 | 0x8000000000000000;
              v817.__r_.__value_.__l.__size_ = v457 + 5;
              v817.__r_.__value_.__r.__words[2] = v460 | 0x8000000000000000;
              v817.__r_.__value_.__r.__words[0] = (std::string::size_type)v462;
              v462->__r_.__value_.__s.__data_[v458] = 0;
              v465 = (v460 | 0x8000000000000000) >> 56;
              v288 = v813;
              goto LABEL_1117;
            }
          }
          if (v459 >= v462 && (std::string *)((char *)v462 + v457) > v459)
            goto LABEL_106;
          memmove(v462, v459, v457);
          goto LABEL_1104;
        }
        v466 = (std::string *)v817.__r_.__value_.__r.__words[0];
        if ((v450 & 0x80u) == 0)
          v466 = &v817;
        v467 = (char *)v466 + v457;
        if ((char *)v466 + v457 <= "cname" && v467 + 5 > "cname")
          goto LABEL_106;
        v467[4] = 101;
        *(_DWORD *)v467 = 1835101795;
        v468 = v457 + 5;
        if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
          v817.__r_.__value_.__l.__size_ = v457 + 5;
        else
          *((_BYTE *)&v817.__r_.__value_.__s + 23) = v468 & 0x7F;
        v288 = v813;
        v466->__r_.__value_.__s.__data_[v468] = 0;
        v465 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
        v464 = v817.__r_.__value_.__r.__words[2];
        v458 = v817.__r_.__value_.__l.__size_;
LABEL_1117:
        v469 = (char)v465;
        v470 = (v464 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v465 & 0x80u) == 0)
          v471 = 22;
        else
          v471 = v470;
        if ((v465 & 0x80u) == 0)
          v472 = v465;
        else
          v472 = v458;
        if (v471 == v472)
        {
          if (v471 == 0x7FFFFFFFFFFFFFF6)
            goto LABEL_1992;
          if ((v465 & 0x80u) == 0)
            v473 = &v817;
          else
            v473 = (std::string *)v817.__r_.__value_.__r.__words[0];
          v474 = 0x7FFFFFFFFFFFFFF7;
          if (v471 >= 0x3FFFFFFFFFFFFFF3)
          {
LABEL_1134:
            v476 = (std::string *)operator new(v474);
            if (!v471)
              goto LABEL_1157;
          }
          else
          {
            if (v471 + 1 > 2 * v471)
              v475 = v471 + 1;
            else
              v475 = 2 * v471;
            if (v475 < 0x17)
            {
              v474 = 23;
              goto LABEL_1134;
            }
            v483 = (v475 & 0xFFFFFFFFFFFFFFF8) + 8;
            v484 = v475 | 7;
            if (v484 == 23)
              v484 = v483;
            v474 = v484 + 1;
            v476 = (std::string *)operator new(v484 + 1);
            if (!v471)
            {
LABEL_1157:
              if (v476 <= (std::string *)":" && (char *)&v476->__r_.__value_.__l.__data_ + 1 > ":")
                goto LABEL_106;
              v476->__r_.__value_.__s.__data_[0] = 58;
              goto LABEL_1160;
            }
          }
          v477 = (std::string *)((char *)v476 + v471);
          if (v473 >= v476 && v477 > v473)
            goto LABEL_106;
          memmove(v476, v473, v471);
          if (v477 <= (std::string *)":" && (char *)&v477->__r_.__value_.__l.__data_ + 1 > ":")
            goto LABEL_106;
          v477->__r_.__value_.__s.__data_[0] = 58;
          if (v471 != 22)
LABEL_1160:
            operator delete(v473);
          v817.__r_.__value_.__r.__words[0] = (std::string::size_type)v476;
          v817.__r_.__value_.__l.__size_ = v471 + 1;
          v817.__r_.__value_.__r.__words[2] = v474 | 0x8000000000000000;
          v476->__r_.__value_.__s.__data_[v471 + 1] = 0;
          if (!v400)
          {
LABEL_1162:
            if (v399)
              goto LABEL_106;
          }
        }
        else
        {
          v478 = (std::string *)v817.__r_.__value_.__r.__words[0];
          if (v469 >= 0)
            v478 = &v817;
          v479 = (char *)v478 + v472;
          if ((char *)v478 + v472 <= ":" && v479 + 1 > ":")
            goto LABEL_106;
          *v479 = 58;
          v480 = v472 + 1;
          if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
          {
            v817.__r_.__value_.__l.__size_ = v480;
            v478->__r_.__value_.__s.__data_[v480] = 0;
            if (!v400)
              goto LABEL_1162;
          }
          else
          {
            *((_BYTE *)&v817.__r_.__value_.__s + 23) = v480 & 0x7F;
            v478->__r_.__value_.__s.__data_[v480] = 0;
            if (!v400)
              goto LABEL_1162;
          }
        }
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v485 = 22;
        else
          v485 = (v817.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v486 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
        else
          v486 = v817.__r_.__value_.__l.__size_;
        if (v485 - v486 < v399)
        {
          v487 = v486 + v399;
          if (0x7FFFFFFFFFFFFFF6 - v485 < v486 + v399 - v485)
            goto LABEL_1992;
          if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v488 = &v817;
          else
            v488 = (std::string *)v817.__r_.__value_.__r.__words[0];
          v489 = 0x7FFFFFFFFFFFFFF7;
          if (v485 >= 0x3FFFFFFFFFFFFFF3)
          {
LABEL_1179:
            v491 = (std::string *)operator new(v489);
            if (!v486)
              goto LABEL_1201;
          }
          else
          {
            v490 = 2 * v485;
            if (v487 > 2 * v485)
              v490 = v486 + v399;
            if (v490 < 0x17)
            {
              v489 = 23;
              goto LABEL_1179;
            }
            v498 = (v490 & 0xFFFFFFFFFFFFFFF8) + 8;
            v499 = v490 | 7;
            if (v499 == 23)
              v499 = v498;
            v489 = v499 + 1;
            v491 = (std::string *)operator new(v499 + 1);
            if (!v486)
            {
LABEL_1201:
              v492 = (char *)v491 + v486;
              if ((char *)v491 + v486 <= v400)
                goto LABEL_1202;
              goto LABEL_1203;
            }
          }
          if (v488 >= v491 && (std::string *)((char *)v491 + v486) > v488)
            goto LABEL_106;
          memmove(v491, v488, v486);
          v492 = (char *)v491 + v486;
          if ((char *)v491 + v486 <= v400)
          {
LABEL_1202:
            if (&v492[v399] > v400)
              goto LABEL_106;
          }
LABEL_1203:
          memcpy(v492, v400, v399);
          if (v485 != 22)
            operator delete(v488);
          v817.__r_.__value_.__l.__size_ = v486 + v399;
          v817.__r_.__value_.__r.__words[2] = v489 | 0x8000000000000000;
          v817.__r_.__value_.__r.__words[0] = (std::string::size_type)v491;
          v491->__r_.__value_.__s.__data_[v487] = 0;
          v496 = (v489 | 0x8000000000000000) >> 56;
LABEL_1206:
          if ((v487 & 0x8000000000000000) != 0)
            goto LABEL_106;
          v497 = (std::string *)v817.__r_.__value_.__r.__words[0];
          if (v487)
          {
            if (!v817.__r_.__value_.__r.__words[0])
              goto LABEL_106;
          }
          if (v288)
          {
LABEL_1210:
            if (!v497 && v487)
              goto LABEL_106;
            v500 = SHIBYTE(v288->__r_.__value_.__r.__words[2]);
            if ((v500 & 0x80000000) == 0)
            {
              v501 = HIBYTE(v288->__r_.__value_.__r.__words[2]);
              v502 = 22;
              v503 = v501;
              if (22 - v501 < v487)
                goto LABEL_1214;
LABEL_1223:
              if (v487)
              {
                v509 = v288;
                if (v500 < 0)
                {
                  v509 = (std::string *)v288->__r_.__value_.__r.__words[0];
                  v510 = (std::string *)(v288->__r_.__value_.__r.__words[0] + v503);
                  if (v510 > v497)
                    goto LABEL_1245;
                }
                else
                {
                  v510 = (std::string *)((char *)v288 + v503);
                  if ((std::string *)((char *)v288 + v503) > v497)
                    goto LABEL_1245;
                }
                if ((std::string *)((char *)v510 + v487) > v497)
                  goto LABEL_106;
LABEL_1245:
                memmove(v510, v497, v487);
                v515 = v503 + v487;
                if (SHIBYTE(v288->__r_.__value_.__r.__words[2]) < 0)
                  v288->__r_.__value_.__l.__size_ = v515;
                else
                  *((_BYTE *)&v288->__r_.__value_.__s + 23) = v515 & 0x7F;
                v509->__r_.__value_.__s.__data_[v515] = 0;
                v501 = HIBYTE(v288->__r_.__value_.__r.__words[2]);
              }
              if ((v501 & 0x80) == 0)
              {
                if (v501 - 21 < 2)
                {
                  v516 = v501 - 20;
                  v517 = v288;
                  v518 = 22;
                  goto LABEL_1256;
                }
                v524 = v288;
                v525 = (char *)v288 + v501;
                if ((char *)v288 + v501 <= "\r\n")
                {
LABEL_1319:
                  if (v525 + 2 > "\r\n")
                    goto LABEL_106;
                }
LABEL_1320:
                *(_WORD *)v525 = 2573;
                v543 = v501 + 2;
                if ((SHIBYTE(v288->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  *((_BYTE *)&v288->__r_.__value_.__s + 23) = v543 & 0x7F;
                  v524->__r_.__value_.__s.__data_[v543] = 0;
                  if ((*((_BYTE *)&v817.__r_.__value_.__s + 23) & 0x80) != 0)
                    goto LABEL_1275;
LABEL_1194:
                  v396 = (char **)v811;
                  if ((a3 & 2) == 0)
                    goto LABEL_940;
LABEL_1276:
                  v528 = v396[12];
                  if (v528 == v396[13])
                  {
                    *((_BYTE *)&v817.__r_.__value_.__s + 23) = 0;
                    v817.__r_.__value_.__s.__data_[0] = 0;
                    v529 = v809;
                  }
                  else
                  {
                    v529 = v809;
                    if (v528[23] < 0)
                    {
                      std::string::__init_copy_ctor_external(&v817, *(const std::string::value_type **)v528, *((_QWORD *)v528 + 1));
                      v531 = SHIBYTE(v817.__r_.__value_.__r.__words[2]);
                      if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
                        goto LABEL_1316;
LABEL_1279:
                      if (v531)
                      {
                        __p = v817;
                        goto LABEL_1284;
                      }
                    }
                    else
                    {
                      v530 = *(_OWORD *)v528;
                      v817.__r_.__value_.__r.__words[2] = *((_QWORD *)v528 + 2);
                      *(_OWORD *)&v817.__r_.__value_.__l.__data_ = v530;
                      v531 = SHIBYTE(v817.__r_.__value_.__r.__words[2]);
                      if ((SHIBYTE(v817.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_1279;
LABEL_1316:
                      if (v817.__r_.__value_.__l.__size_)
                      {
                        std::string::__init_copy_ctor_external(&__p, v817.__r_.__value_.__l.__data_, v817.__r_.__value_.__l.__size_);
                        goto LABEL_1284;
                      }
                    }
                  }
                  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
                  if (v802)
                    goto LABEL_106;
                  LOWORD(__p.__r_.__value_.__l.__data_) = 45;
LABEL_1284:
                  webrtc::InitLine(97, "ssrc", 4uLL, &v815);
                  v532 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v533 = 22;
                  else
                    v533 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v532 = v815.__r_.__value_.__l.__size_;
                  if (v533 == v532)
                  {
                    if (v533 == 0x7FFFFFFFFFFFFFF6)
                      goto LABEL_1992;
                    if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v534 = &v815;
                    else
                      v534 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    v535 = 0x7FFFFFFFFFFFFFF7;
                    if (v533 >= 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_1300:
                      v537 = (std::string *)operator new(v535);
                      v538 = (std::string *)((char *)v537 + v533);
                      if (!v533)
                        goto LABEL_1329;
                    }
                    else
                    {
                      if (v533 + 1 > 2 * v533)
                        v536 = v533 + 1;
                      else
                        v536 = 2 * v533;
                      if (v536 < 0x17)
                      {
                        v535 = 23;
                        goto LABEL_1300;
                      }
                      v544 = (v536 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v545 = v536 | 7;
                      if (v545 == 23)
                        v545 = v544;
                      v535 = v545 + 1;
                      v537 = (std::string *)operator new(v545 + 1);
                      v538 = (std::string *)((char *)v537 + v533);
                      if (!v533)
                      {
LABEL_1329:
                        if (v538 <= (std::string *)":" && (char *)&v538->__r_.__value_.__l.__data_ + 1 > ":")
                          goto LABEL_106;
                        v538->__r_.__value_.__s.__data_[0] = 58;
                        goto LABEL_1332;
                      }
                    }
                    if (v534 >= v537 && v538 > v534)
                      goto LABEL_106;
                    memmove(v537, v534, v533);
                    if (v538 <= (std::string *)":" && (char *)&v538->__r_.__value_.__l.__data_ + 1 > ":")
                      goto LABEL_106;
                    v538->__r_.__value_.__s.__data_[0] = 58;
                    if (v533 != 22)
LABEL_1332:
                      operator delete(v534);
                    v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v537;
                    v815.__r_.__value_.__l.__size_ = v533 + 1;
                    v815.__r_.__value_.__r.__words[2] = v535 | 0x8000000000000000;
                    v542 = &v537->__r_.__value_.__s.__data_[v533 + 1];
                  }
                  else
                  {
                    if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v539 = &v815;
                    else
                      v539 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    v540 = (char *)v539 + v532;
                    if ((char *)v539 + v532 <= ":" && v540 + 1 > ":")
                      goto LABEL_106;
                    *v540 = 58;
                    v541 = v532 + 1;
                    if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                      v815.__r_.__value_.__l.__size_ = v541;
                    else
                      *((_BYTE *)&v815.__r_.__value_.__s + 23) = v541 & 0x7F;
                    v542 = (char *)v539 + v541;
                  }
                  *v542 = 0;
                  v546 = snprintf((char *)&__src, 0x20uLL, "%u", v529);
                  if (v546 < 0)
                    goto LABEL_1992;
                  v547 = v546;
                  if (v546 > 0x16)
                  {
                    v551 = (v546 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v546 | 7) != 0x17)
                      v551 = v546 | 7;
                    v552 = v551 + 1;
                    v548 = (std::string *)operator new(v551 + 1);
                    v818.__r_.__value_.__l.__size_ = v547;
                    v818.__r_.__value_.__r.__words[2] = v552 | 0x8000000000000000;
                    v818.__r_.__value_.__r.__words[0] = (std::string::size_type)v548;
                    v549 = (char *)v548 + v547;
                    v550 = (std::string *)((char *)v548 + v547) > &__src;
                    if (v548 <= &__src)
                      goto LABEL_1341;
                  }
                  else
                  {
                    *((_BYTE *)&v818.__r_.__value_.__s + 23) = v546;
                    v548 = &v818;
                    v549 = (char *)&v818 + v547;
                    v550 = (std::string *)((char *)&v818 + v547) > &__src;
                    if (&v818 > &__src)
                      goto LABEL_1342;
LABEL_1341:
                    if (v550)
                      goto LABEL_106;
                  }
LABEL_1342:
                  if ((_DWORD)v547)
                    memcpy(v548, &__src, v547);
                  *v549 = 0;
                  v553 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v554 = v818.__r_.__value_.__l.__size_;
                    v556 = (std::string *)v818.__r_.__value_.__r.__words[0];
                    v555 = v818.__r_.__value_.__l.__size_ == 0;
                    if (!v818.__r_.__value_.__r.__words[0] && v818.__r_.__value_.__l.__size_)
                      goto LABEL_106;
                  }
                  else
                  {
                    v554 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
                    v555 = SHIBYTE(v818.__r_.__value_.__r.__words[2]) == 0;
                    v556 = &v818;
                  }
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v557 = 22;
                  else
                    v557 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v558 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                  else
                    v558 = v815.__r_.__value_.__l.__size_;
                  if (v557 - v558 < v554)
                  {
                    v559 = v558 + v554;
                    if (0x7FFFFFFFFFFFFFF6 - v557 < v558 + v554 - v557)
                      goto LABEL_1992;
                    if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v560 = &v815;
                    else
                      v560 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    v561 = 0x7FFFFFFFFFFFFFF7;
                    if (v557 >= 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_1364:
                      v563 = (std::string *)operator new(v561);
                      if (!v558)
                        goto LABEL_1368;
                    }
                    else
                    {
                      v562 = 2 * v557;
                      if (v559 > 2 * v557)
                        v562 = v558 + v554;
                      if (v562 < 0x17)
                      {
                        v561 = 23;
                        goto LABEL_1364;
                      }
                      v569 = (v562 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v570 = v562 | 7;
                      if (v570 == 23)
                        v570 = v569;
                      v561 = v570 + 1;
                      v563 = (std::string *)operator new(v570 + 1);
                      if (!v558)
                      {
LABEL_1368:
                        v564 = (char *)v563 + v558;
                        if ((std::string *)((char *)v563 + v558) <= v556 && &v564[v554] > (char *)v556)
                          goto LABEL_106;
                        memcpy(v564, v556, v554);
                        if (v557 != 22)
                          operator delete(v560);
                        v815.__r_.__value_.__l.__size_ = v558 + v554;
                        v815.__r_.__value_.__r.__words[2] = v561 | 0x8000000000000000;
                        v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v563;
                        v565 = (char *)v563 + v559;
                        v396 = (char **)v811;
                        goto LABEL_1387;
                      }
                    }
                    if (v560 >= v563 && (std::string *)((char *)v563 + v558) > v560)
                      goto LABEL_106;
                    memmove(v563, v560, v558);
                    goto LABEL_1368;
                  }
                  if (!v555)
                  {
                    if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v566 = &v815;
                    else
                      v566 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    v567 = (char *)v566 + v558;
                    if ((std::string *)((char *)v566 + v558) <= v556 && &v567[v554] > (char *)v556)
                      goto LABEL_106;
                    memmove(v567, v556, v554);
                    v568 = v558 + v554;
                    if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                      v815.__r_.__value_.__l.__size_ = v558 + v554;
                    else
                      *((_BYTE *)&v815.__r_.__value_.__s + 23) = v568 & 0x7F;
                    v565 = (char *)v566 + v568;
LABEL_1387:
                    *v565 = 0;
                    v553 = HIBYTE(v818.__r_.__value_.__r.__words[2]);
                  }
                  if (v553 < 0)
                    operator delete(v818.__r_.__value_.__l.__data_);
                  v571 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v572 = 22;
                  else
                    v572 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v571 = v815.__r_.__value_.__l.__size_;
                  if (v572 == v571)
                  {
                    if (v572 == 0x7FFFFFFFFFFFFFF6)
                      goto LABEL_1992;
                    if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v573 = &v815;
                    else
                      v573 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    v574 = 0x7FFFFFFFFFFFFFF7;
                    if (v572 >= 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_1406:
                      v576 = (std::string *)operator new(v574);
                      v577 = (std::string *)((char *)v576 + v572);
                      if (!v572)
                        goto LABEL_1425;
                    }
                    else
                    {
                      if (v572 + 1 > 2 * v572)
                        v575 = v572 + 1;
                      else
                        v575 = 2 * v572;
                      if (v575 < 0x17)
                      {
                        v574 = 23;
                        goto LABEL_1406;
                      }
                      v584 = (v575 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v585 = v575 | 7;
                      if (v585 == 23)
                        v585 = v584;
                      v574 = v585 + 1;
                      v576 = (std::string *)operator new(v585 + 1);
                      v577 = (std::string *)((char *)v576 + v572);
                      if (!v572)
                      {
LABEL_1425:
                        if (v577 <= (std::string *)" " && (char *)&v577->__r_.__value_.__l.__data_ + 1 > " ")
                          goto LABEL_106;
                        v577->__r_.__value_.__s.__data_[0] = 32;
                        goto LABEL_1428;
                      }
                    }
                    if (v573 >= v576 && v577 > v573)
                      goto LABEL_106;
                    memmove(v576, v573, v572);
                    if (v577 <= (std::string *)" " && (char *)&v577->__r_.__value_.__l.__data_ + 1 > " ")
                      goto LABEL_106;
                    v577->__r_.__value_.__s.__data_[0] = 32;
                    if (v572 != 22)
LABEL_1428:
                      operator delete(v573);
                    v583 = v574 | 0x8000000000000000;
                    v582 = v572 + 1;
                    v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v576;
                    v815.__r_.__value_.__l.__size_ = v582;
                    v815.__r_.__value_.__r.__words[2] = v574 | 0x8000000000000000;
                    v576->__r_.__value_.__s.__data_[v582] = 0;
                    v581 = (v574 | 0x8000000000000000) >> 56;
                  }
                  else
                  {
                    if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v578 = &v815;
                    else
                      v578 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    v579 = (char *)v578 + v571;
                    if ((char *)v578 + v571 <= " " && v579 + 1 > " ")
                      goto LABEL_106;
                    *v579 = 32;
                    v580 = v571 + 1;
                    if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                      v815.__r_.__value_.__l.__size_ = v580;
                    else
                      *((_BYTE *)&v815.__r_.__value_.__s + 23) = v580 & 0x7F;
                    v578->__r_.__value_.__s.__data_[v580] = 0;
                    v581 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                    v583 = v815.__r_.__value_.__r.__words[2];
                    v582 = v815.__r_.__value_.__l.__size_;
                  }
                  v586 = (v583 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if ((v581 & 0x80u) == 0)
                    v587 = 22;
                  else
                    v587 = v586;
                  if ((v581 & 0x80u) == 0)
                    v588 = v581;
                  else
                    v588 = v582;
                  if (v587 - v588 < 4)
                  {
                    v589 = v588 + 4;
                    if (0x7FFFFFFFFFFFFFF6 - v587 < v588 + 4 - v587)
                      goto LABEL_1992;
                    if ((v581 & 0x80u) == 0)
                      v590 = &v815;
                    else
                      v590 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    v591 = 0x7FFFFFFFFFFFFFF7;
                    if (v587 >= 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_1446:
                      v593 = (std::string *)operator new(v591);
                      if (!v588)
                        goto LABEL_1450;
                    }
                    else
                    {
                      v592 = 2 * v587;
                      if (v589 > 2 * v587)
                        v592 = v588 + 4;
                      if (v592 < 0x17)
                      {
                        v591 = 23;
                        goto LABEL_1446;
                      }
                      v616 = (v592 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v617 = v592 | 7;
                      if (v617 == 23)
                        v617 = v616;
                      v591 = v617 + 1;
                      v593 = (std::string *)operator new(v617 + 1);
                      if (!v588)
                      {
LABEL_1450:
                        v594 = (_DWORD *)((char *)v593 + v588);
                        if ((char *)v593 + v588 <= "msid" && v594 + 1 > (_DWORD *)"msid")
                          goto LABEL_106;
                        *v594 = 1684632429;
                        if (v587 != 22)
                          operator delete(v590);
                        v595 = v591 | 0x8000000000000000;
                        v815.__r_.__value_.__l.__size_ = v588 + 4;
                        v815.__r_.__value_.__r.__words[2] = v591 | 0x8000000000000000;
                        v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v593;
                        v593->__r_.__value_.__s.__data_[v589] = 0;
                        v596 = (v591 | 0x8000000000000000) >> 56;
                        v288 = v813;
                        goto LABEL_1463;
                      }
                    }
                    if (v590 >= v593 && (std::string *)((char *)v593 + v588) > v590)
                      goto LABEL_106;
                    memmove(v593, v590, v588);
                    goto LABEL_1450;
                  }
                  v597 = (std::string *)v815.__r_.__value_.__r.__words[0];
                  if ((v581 & 0x80u) == 0)
                    v597 = &v815;
                  v598 = (_DWORD *)((char *)v597 + v588);
                  if ((char *)v597 + v588 <= "msid" && v598 + 1 > (_DWORD *)"msid")
                    goto LABEL_106;
                  *v598 = 1684632429;
                  v599 = v588 + 4;
                  if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                    v815.__r_.__value_.__l.__size_ = v588 + 4;
                  else
                    *((_BYTE *)&v815.__r_.__value_.__s + 23) = v599 & 0x7F;
                  v288 = v813;
                  v597->__r_.__value_.__s.__data_[v599] = 0;
                  v596 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                  v595 = v815.__r_.__value_.__r.__words[2];
                  v589 = v815.__r_.__value_.__l.__size_;
LABEL_1463:
                  v600 = (char)v596;
                  v601 = (v595 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if ((v596 & 0x80u) == 0)
                    v602 = 22;
                  else
                    v602 = v601;
                  if ((v596 & 0x80u) == 0)
                    v603 = v596;
                  else
                    v603 = v589;
                  if (v602 == v603)
                  {
                    if (v602 == 0x7FFFFFFFFFFFFFF6)
                      goto LABEL_1992;
                    if ((v596 & 0x80u) == 0)
                      v604 = &v815;
                    else
                      v604 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    v605 = 0x7FFFFFFFFFFFFFF7;
                    if (v602 >= 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_1480:
                      v607 = (std::string *)operator new(v605);
                      v608 = (std::string *)((char *)v607 + v602);
                      if (!v602)
                        goto LABEL_1506;
                    }
                    else
                    {
                      if (v602 + 1 > 2 * v602)
                        v606 = v602 + 1;
                      else
                        v606 = 2 * v602;
                      if (v606 < 0x17)
                      {
                        v605 = 23;
                        goto LABEL_1480;
                      }
                      v618 = (v606 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v619 = v606 | 7;
                      if (v619 == 23)
                        v619 = v618;
                      v605 = v619 + 1;
                      v607 = (std::string *)operator new(v619 + 1);
                      v608 = (std::string *)((char *)v607 + v602);
                      if (!v602)
                      {
LABEL_1506:
                        if (v608 <= (std::string *)":" && (char *)&v608->__r_.__value_.__l.__data_ + 1 > ":")
                          goto LABEL_106;
                        v608->__r_.__value_.__s.__data_[0] = 58;
                        goto LABEL_1509;
                      }
                    }
                    if (v604 >= v607 && v608 > v604)
                      goto LABEL_106;
                    memmove(v607, v604, v602);
                    if (v608 <= (std::string *)":" && (char *)&v608->__r_.__value_.__l.__data_ + 1 > ":")
                      goto LABEL_106;
                    v608->__r_.__value_.__s.__data_[0] = 58;
                    if (v602 != 22)
LABEL_1509:
                      operator delete(v604);
                    v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v607;
                    v815.__r_.__value_.__l.__size_ = v602 + 1;
                    v815.__r_.__value_.__r.__words[2] = v605 | 0x8000000000000000;
                    v607->__r_.__value_.__s.__data_[v602 + 1] = 0;
                    v612 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_1511:
                      v613 = v612;
                      v615 = v612 == 0;
                      p_p = &__p;
                      goto LABEL_1512;
                    }
                  }
                  else
                  {
                    v609 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    if (v600 >= 0)
                      v609 = &v815;
                    v610 = (char *)v609 + v603;
                    if ((char *)v609 + v603 <= ":" && v610 + 1 > ":")
                      goto LABEL_106;
                    *v610 = 58;
                    v611 = v603 + 1;
                    if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v815.__r_.__value_.__l.__size_ = v611;
                      v609->__r_.__value_.__s.__data_[v611] = 0;
                      v612 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_1511;
                    }
                    else
                    {
                      *((_BYTE *)&v815.__r_.__value_.__s + 23) = v611 & 0x7F;
                      v609->__r_.__value_.__s.__data_[v611] = 0;
                      v612 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_1511;
                    }
                  }
                  v613 = __p.__r_.__value_.__l.__size_;
                  if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                    goto LABEL_106;
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                  v615 = __p.__r_.__value_.__l.__size_ == 0;
                  if (__p.__r_.__value_.__l.__size_)
                  {
                    if (!__p.__r_.__value_.__r.__words[0])
                      goto LABEL_106;
                  }
LABEL_1512:
                  v620 = v815.__r_.__value_.__r.__words[2];
                  v621 = v815.__r_.__value_.__l.__size_;
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v622 = 22;
                  else
                    v622 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v623 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                  else
                    v623 = v815.__r_.__value_.__l.__size_;
                  if (v622 - v623 >= v613)
                  {
                    if (v615)
                    {
                      v629 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                    }
                    else
                    {
                      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v630 = &v815;
                      else
                        v630 = (std::string *)v815.__r_.__value_.__r.__words[0];
                      v631 = (char *)v630 + v623;
                      if ((std::string *)((char *)v630 + v623) <= p_p && &v631[v613] > (char *)p_p)
                        goto LABEL_106;
                      memmove(v631, p_p, v613);
                      v632 = v623 + v613;
                      if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                        v815.__r_.__value_.__l.__size_ = v623 + v613;
                      else
                        *((_BYTE *)&v815.__r_.__value_.__s + 23) = v632 & 0x7F;
                      v630->__r_.__value_.__s.__data_[v632] = 0;
                      v629 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                      v620 = v815.__r_.__value_.__r.__words[2];
                      v621 = v815.__r_.__value_.__l.__size_;
                    }
                  }
                  else
                  {
                    v621 = v623 + v613;
                    if (0x7FFFFFFFFFFFFFF6 - v622 < v623 + v613 - v622)
                      goto LABEL_1992;
                    if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v624 = &v815;
                    else
                      v624 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    v625 = 0x7FFFFFFFFFFFFFF7;
                    if (v622 >= 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_1528:
                      v627 = (std::string *)operator new(v625);
                      if (!v623)
                        goto LABEL_1545;
                    }
                    else
                    {
                      v626 = 2 * v622;
                      if (v621 > 2 * v622)
                        v626 = v623 + v613;
                      if (v626 < 0x17)
                      {
                        v625 = 23;
                        goto LABEL_1528;
                      }
                      v633 = (v626 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v634 = v626 | 7;
                      if (v634 == 23)
                        v634 = v633;
                      v625 = v634 + 1;
                      v627 = (std::string *)operator new(v634 + 1);
                      if (!v623)
                      {
LABEL_1545:
                        v628 = (char *)v627 + v623;
                        if ((std::string *)((char *)v627 + v623) <= p_p)
                          goto LABEL_1546;
                        goto LABEL_1547;
                      }
                    }
                    if (v624 >= v627 && (std::string *)((char *)v627 + v623) > v624)
                      goto LABEL_106;
                    memmove(v627, v624, v623);
                    v628 = (char *)v627 + v623;
                    if ((std::string *)((char *)v627 + v623) <= p_p)
                    {
LABEL_1546:
                      if (&v628[v613] > (char *)p_p)
                        goto LABEL_106;
                    }
LABEL_1547:
                    memcpy(v628, p_p, v613);
                    if (v622 != 22)
                      operator delete(v624);
                    v620 = v625 | 0x8000000000000000;
                    v815.__r_.__value_.__l.__size_ = v623 + v613;
                    v815.__r_.__value_.__r.__words[2] = v625 | 0x8000000000000000;
                    v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v627;
                    v627->__r_.__value_.__s.__data_[v621] = 0;
                    v629 = (v625 | 0x8000000000000000) >> 56;
                    v396 = (char **)v811;
                  }
                  v635 = (char)v629;
                  v636 = (v620 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if ((v629 & 0x80u) == 0)
                    v637 = 22;
                  else
                    v637 = v636;
                  if ((v629 & 0x80u) != 0)
                    v629 = v621;
                  if (v637 == v629)
                  {
                    if (v637 == 0x7FFFFFFFFFFFFFF6)
                      goto LABEL_1992;
                    if (v635 >= 0)
                      v638 = &v815;
                    else
                      v638 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    v639 = 0x7FFFFFFFFFFFFFF7;
                    if (v637 >= 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_1568:
                      v641 = (std::string *)operator new(v639);
                      v642 = (std::string *)((char *)v641 + v637);
                      if (!v637)
                        goto LABEL_1591;
                    }
                    else
                    {
                      if (v637 + 1 > 2 * v637)
                        v640 = v637 + 1;
                      else
                        v640 = 2 * v637;
                      if (v640 < 0x17)
                      {
                        v639 = 23;
                        goto LABEL_1568;
                      }
                      v649 = (v640 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v650 = v640 | 7;
                      if (v650 == 23)
                        v650 = v649;
                      v639 = v650 + 1;
                      v641 = (std::string *)operator new(v650 + 1);
                      v642 = (std::string *)((char *)v641 + v637);
                      if (!v637)
                      {
LABEL_1591:
                        if (v642 <= (std::string *)" " && (char *)&v642->__r_.__value_.__l.__data_ + 1 > " ")
                          goto LABEL_106;
                        v642->__r_.__value_.__s.__data_[0] = 32;
                        goto LABEL_1594;
                      }
                    }
                    if (v638 >= v641 && v642 > v638)
                      goto LABEL_106;
                    memmove(v641, v638, v637);
                    if (v642 <= (std::string *)" " && (char *)&v642->__r_.__value_.__l.__data_ + 1 > " ")
                      goto LABEL_106;
                    v642->__r_.__value_.__s.__data_[0] = 32;
                    if (v637 != 22)
LABEL_1594:
                      operator delete(v638);
                    v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v641;
                    v815.__r_.__value_.__l.__size_ = v637 + 1;
                    v815.__r_.__value_.__r.__words[2] = v639 | 0x8000000000000000;
                    v641->__r_.__value_.__s.__data_[v637 + 1] = 0;
                    v646 = *((char *)v396 + 23);
                    if ((v646 & 0x80000000) == 0)
                    {
LABEL_1596:
                      v647 = v646;
                      v648 = (char *)v396;
                      if (!v396)
                        goto LABEL_1597;
                      goto LABEL_1598;
                    }
                  }
                  else
                  {
                    v643 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    if (v635 >= 0)
                      v643 = &v815;
                    v644 = (char *)v643 + v629;
                    if ((char *)v643 + v629 <= " " && v644 + 1 > " ")
                      goto LABEL_106;
                    *v644 = 32;
                    v645 = v629 + 1;
                    if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v815.__r_.__value_.__l.__size_ = v645;
                      v643->__r_.__value_.__s.__data_[v645] = 0;
                      v646 = *((char *)v396 + 23);
                      if ((v646 & 0x80000000) == 0)
                        goto LABEL_1596;
                    }
                    else
                    {
                      *((_BYTE *)&v815.__r_.__value_.__s + 23) = v645 & 0x7F;
                      v643->__r_.__value_.__s.__data_[v645] = 0;
                      v646 = *((char *)v396 + 23);
                      if ((v646 & 0x80000000) == 0)
                        goto LABEL_1596;
                    }
                  }
                  v647 = (size_t)v396[1];
                  if ((v647 & 0x8000000000000000) != 0)
                    goto LABEL_106;
                  v648 = *v396;
                  if (v647)
                  {
                    if (!v648)
                      goto LABEL_106;
                  }
                  if (!v648)
                  {
LABEL_1597:
                    if (v647)
                      goto LABEL_106;
                  }
LABEL_1598:
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v651 = 22;
                  else
                    v651 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v652 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                  else
                    v652 = v815.__r_.__value_.__l.__size_;
                  if (v651 - v652 < v647)
                  {
                    v653 = v652 + v647;
                    if (0x7FFFFFFFFFFFFFF6 - v651 < v652 + v647 - v651)
                      goto LABEL_1992;
                    if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v654 = &v815;
                    else
                      v654 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    v655 = 0x7FFFFFFFFFFFFFF7;
                    if (v651 >= 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_1614:
                      v657 = (std::string *)operator new(v655);
                      if (!v652)
                        goto LABEL_1635;
                    }
                    else
                    {
                      v656 = 2 * v651;
                      if (v653 > 2 * v651)
                        v656 = v652 + v647;
                      if (v656 < 0x17)
                      {
                        v655 = 23;
                        goto LABEL_1614;
                      }
                      v663 = (v656 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v664 = v656 | 7;
                      if (v664 == 23)
                        v664 = v663;
                      v655 = v664 + 1;
                      v657 = (std::string *)operator new(v664 + 1);
                      if (!v652)
                      {
LABEL_1635:
                        v658 = (char *)v657 + v652;
                        if ((char *)v657 + v652 <= v648)
                          goto LABEL_1636;
                        goto LABEL_1637;
                      }
                    }
                    if (v654 >= v657 && (std::string *)((char *)v657 + v652) > v654)
                      goto LABEL_106;
                    memmove(v657, v654, v652);
                    v658 = (char *)v657 + v652;
                    if ((char *)v657 + v652 <= v648)
                    {
LABEL_1636:
                      if (&v658[v647] > v648)
                        goto LABEL_106;
                    }
LABEL_1637:
                    memcpy(v658, v648, v647);
                    if (v651 != 22)
                      operator delete(v654);
                    v815.__r_.__value_.__l.__size_ = v652 + v647;
                    v815.__r_.__value_.__r.__words[2] = v655 | 0x8000000000000000;
                    v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v657;
                    v657->__r_.__value_.__s.__data_[v653] = 0;
LABEL_1640:
                    if ((v653 & 0x8000000000000000) != 0)
                      goto LABEL_106;
                    v662 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    if (v653)
                    {
                      if (!v815.__r_.__value_.__r.__words[0])
                        goto LABEL_106;
                    }
                    if (v288)
                    {
LABEL_1644:
                      if (!v662 && v653)
                        goto LABEL_106;
                      v665 = SHIBYTE(v288->__r_.__value_.__r.__words[2]);
                      if ((v665 & 0x80000000) == 0)
                      {
                        v666 = HIBYTE(v288->__r_.__value_.__r.__words[2]);
                        v667 = 22;
                        v668 = v666;
                        if (22 - v666 < v653)
                          goto LABEL_1648;
LABEL_1658:
                        if (v653)
                        {
                          v675 = v288;
                          if (v665 < 0)
                          {
                            v675 = (std::string *)v288->__r_.__value_.__r.__words[0];
                            v676 = (std::string *)(v288->__r_.__value_.__r.__words[0] + v668);
                            if (v676 > v662)
                              goto LABEL_1679;
                          }
                          else
                          {
                            v676 = (std::string *)((char *)v288 + v668);
                            if ((std::string *)((char *)v288 + v668) > v662)
                              goto LABEL_1679;
                          }
                          if ((std::string *)((char *)v676 + v653) > v662)
                            goto LABEL_106;
LABEL_1679:
                          memmove(v676, v662, v653);
                          v680 = v668 + v653;
                          if (SHIBYTE(v288->__r_.__value_.__r.__words[2]) < 0)
                            v288->__r_.__value_.__l.__size_ = v680;
                          else
                            *((_BYTE *)&v288->__r_.__value_.__s + 23) = v680 & 0x7F;
                          v675->__r_.__value_.__s.__data_[v680] = 0;
                          v666 = HIBYTE(v288->__r_.__value_.__r.__words[2]);
                        }
                        if ((v666 & 0x80) == 0)
                        {
                          if (v666 - 21 < 2)
                          {
                            v681 = v666 - 20;
                            v682 = v288;
                            v683 = 22;
                            goto LABEL_1690;
                          }
                          v689 = v288;
                          v690 = (char *)v288 + v666;
                          if ((char *)v288 + v666 <= "\r\n")
                          {
LABEL_1711:
                            if (v690 + 2 > "\r\n")
                              goto LABEL_106;
                          }
LABEL_1712:
                          *(_WORD *)v690 = 2573;
                          v693 = v666 + 2;
                          if (SHIBYTE(v288->__r_.__value_.__r.__words[2]) < 0)
                          {
                            v288->__r_.__value_.__l.__size_ = v693;
                            v689->__r_.__value_.__s.__data_[v693] = 0;
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                              goto LABEL_939;
                          }
                          else
                          {
                            *((_BYTE *)&v288->__r_.__value_.__s + 23) = v693 & 0x7F;
                            v689->__r_.__value_.__s.__data_[v693] = 0;
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                              goto LABEL_939;
                          }
LABEL_1716:
                          v396 = (char **)v811;
                          if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
LABEL_1717:
                            operator delete(v817.__r_.__value_.__l.__data_);
LABEL_940:
                          v397 = v812 + 1;
                          if (v812 + 1 == v805)
                            goto LABEL_1718;
                          continue;
                        }
                        v666 = v288->__r_.__value_.__l.__size_;
                        v677 = v288->__r_.__value_.__r.__words[2];
LABEL_1687:
                        v684 = v677 & 0x7FFFFFFFFFFFFFFFLL;
                        v683 = (v677 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                        if (v683 - v666 >= 2)
                        {
                          v689 = (std::string *)v288->__r_.__value_.__r.__words[0];
                          v690 = (char *)(v288->__r_.__value_.__r.__words[0] + v666);
                          if (v690 <= "\r\n")
                            goto LABEL_1711;
                          goto LABEL_1712;
                        }
                        v681 = v666 - v683 + 2;
                        if (0x7FFFFFFFFFFFFFF7 - v684 < v681)
                          goto LABEL_1992;
                        v682 = (std::string *)v288->__r_.__value_.__r.__words[0];
                        v685 = 0x7FFFFFFFFFFFFFF7;
                        if (v683 >= 0x3FFFFFFFFFFFFFF3)
                        {
LABEL_1694:
                          v687 = (std::string *)operator new(v685);
                          if (!v666)
                            goto LABEL_1704;
                        }
                        else
                        {
LABEL_1690:
                          v686 = v683 + v681;
                          if (v686 <= 2 * v683)
                            v686 = 2 * v683;
                          if (v686 < 0x17)
                          {
                            v685 = 23;
                            goto LABEL_1694;
                          }
                          v691 = (v686 & 0xFFFFFFFFFFFFFFF8) + 8;
                          v692 = v686 | 7;
                          if (v692 == 23)
                            v692 = v691;
                          v685 = v692 + 1;
                          v687 = (std::string *)operator new(v692 + 1);
                          if (!v666)
                          {
LABEL_1704:
                            v688 = (char *)v687 + v666;
                            if ((char *)v687 + v666 <= "\r\n")
                              goto LABEL_1705;
                            goto LABEL_1706;
                          }
                        }
                        if (v682 >= v687 && (std::string *)((char *)v687 + v666) > v682)
                          goto LABEL_106;
                        memmove(v687, v682, v666);
                        v688 = (char *)v687 + v666;
                        if ((char *)v687 + v666 <= "\r\n")
                        {
LABEL_1705:
                          if (v688 + 2 > "\r\n")
                            goto LABEL_106;
                        }
LABEL_1706:
                        *(_WORD *)v688 = 2573;
                        if (v683 != 22)
                          operator delete(v682);
                        v288->__r_.__value_.__r.__words[0] = (std::string::size_type)v687;
                        v288->__r_.__value_.__l.__size_ = v666 + 2;
                        v288->__r_.__value_.__r.__words[2] = v685 | 0x8000000000000000;
                        v687->__r_.__value_.__s.__data_[v666 + 2] = 0;
                        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_1716;
LABEL_939:
                        operator delete(__p.__r_.__value_.__l.__data_);
                        v396 = (char **)v811;
                        if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0)
                          goto LABEL_1717;
                        goto LABEL_940;
                      }
                      v668 = v288->__r_.__value_.__l.__size_;
                      v674 = v288->__r_.__value_.__r.__words[2];
                      v667 = (v674 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      v666 = HIBYTE(v674);
                      if (v667 - v668 >= v653)
                        goto LABEL_1658;
LABEL_1648:
                      if (0x7FFFFFFFFFFFFFF6 - v667 < v653 - v667 + v668)
                        goto LABEL_1992;
                      v669 = v288;
                      if (v665 < 0)
                      {
                        v669 = (std::string *)v288->__r_.__value_.__r.__words[0];
                        v670 = 0x7FFFFFFFFFFFFFF7;
                        if (v667 >= 0x3FFFFFFFFFFFFFF3)
                          goto LABEL_1665;
LABEL_1651:
                        v671 = v668 + v653;
                        if (v668 + v653 <= 2 * v667)
                          v671 = 2 * v667;
                        if (v671 >= 0x17)
                        {
                          v678 = (v671 & 0xFFFFFFFFFFFFFFF8) + 8;
                          v679 = v671 | 7;
                          if (v679 == 23)
                            v679 = v678;
                          v670 = v679 + 1;
                          v672 = (std::string *)operator new(v679 + 1);
                          if (v668)
                            goto LABEL_1666;
                        }
                        else
                        {
                          v670 = 23;
                          v672 = (std::string *)operator new(0x17uLL);
                          if (v668)
                            goto LABEL_1666;
                        }
                      }
                      else
                      {
                        v670 = 0x7FFFFFFFFFFFFFF7;
                        if (v667 < 0x3FFFFFFFFFFFFFF3)
                          goto LABEL_1651;
LABEL_1665:
                        v672 = (std::string *)operator new(0x7FFFFFFFFFFFFFF7uLL);
                        if (v668)
                        {
LABEL_1666:
                          if (v669 >= v672 && (std::string *)((char *)v672 + v668) > v669)
                            goto LABEL_106;
                          memmove(v672, v669, v668);
                          v673 = (char *)v672 + v668;
                          if ((std::string *)((char *)v672 + v668) <= v662)
                          {
LABEL_1669:
                            if (&v673[v653] > (char *)v662)
                              goto LABEL_106;
                          }
LABEL_1670:
                          memcpy(v673, v662, v653);
                          if (v667 != 22)
                            operator delete(v669);
                          v677 = v670 | 0x8000000000000000;
                          v666 = v668 + v653;
                          v288->__r_.__value_.__r.__words[0] = (std::string::size_type)v672;
                          v288->__r_.__value_.__l.__size_ = v668 + v653;
                          v288->__r_.__value_.__r.__words[2] = v677;
                          v672->__r_.__value_.__s.__data_[v668 + v653] = 0;
                          goto LABEL_1687;
                        }
                      }
                      v673 = (char *)v672 + v668;
                      if ((std::string *)((char *)v672 + v668) <= v662)
                        goto LABEL_1669;
                      goto LABEL_1670;
                    }
LABEL_1628:
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_939;
                    goto LABEL_1716;
                  }
                  if (v647)
                  {
                    if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v659 = &v815;
                    else
                      v659 = (std::string *)v815.__r_.__value_.__r.__words[0];
                    v660 = (char *)v659 + v652;
                    if ((char *)v659 + v652 <= v648 && &v660[v647] > v648)
                      goto LABEL_106;
                    memmove(v660, v648, v647);
                    v661 = v652 + v647;
                    if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      *((_BYTE *)&v815.__r_.__value_.__s + 23) = v661 & 0x7F;
                      v659->__r_.__value_.__s.__data_[v661] = 0;
                      v653 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                      if ((*((_BYTE *)&v815.__r_.__value_.__s + 23) & 0x80) == 0)
                        goto LABEL_1627;
LABEL_1631:
                      v653 = v815.__r_.__value_.__l.__size_;
                      goto LABEL_1640;
                    }
                    v815.__r_.__value_.__l.__size_ = v652 + v647;
                    v659->__r_.__value_.__s.__data_[v661] = 0;
                    v653 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                    if ((*((_BYTE *)&v815.__r_.__value_.__s + 23) & 0x80) != 0)
                      goto LABEL_1631;
                  }
                  else
                  {
                    v653 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                    if ((*((_BYTE *)&v815.__r_.__value_.__s + 23) & 0x80) != 0)
                      goto LABEL_1631;
                  }
LABEL_1627:
                  v662 = &v815;
                  if (v288)
                    goto LABEL_1644;
                  goto LABEL_1628;
                }
                v288->__r_.__value_.__l.__size_ = v543;
                v524->__r_.__value_.__s.__data_[v543] = 0;
                if ((*((_BYTE *)&v817.__r_.__value_.__s + 23) & 0x80) == 0)
                  goto LABEL_1194;
LABEL_1275:
                operator delete(v817.__r_.__value_.__l.__data_);
                v396 = (char **)v811;
                if ((a3 & 2) != 0)
                  goto LABEL_1276;
                goto LABEL_940;
              }
              v501 = v288->__r_.__value_.__l.__size_;
              v514 = v288->__r_.__value_.__r.__words[2];
LABEL_1253:
              v519 = v514 & 0x7FFFFFFFFFFFFFFFLL;
              v518 = (v514 & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v518 - v501 >= 2)
              {
                v524 = (std::string *)v288->__r_.__value_.__r.__words[0];
                v525 = (char *)(v288->__r_.__value_.__r.__words[0] + v501);
                if (v525 <= "\r\n")
                  goto LABEL_1319;
                goto LABEL_1320;
              }
              v516 = v501 - v518 + 2;
              if (0x7FFFFFFFFFFFFFF7 - v519 < v516)
                goto LABEL_1992;
              v517 = (std::string *)v288->__r_.__value_.__r.__words[0];
              v520 = 0x7FFFFFFFFFFFFFF7;
              if (v518 >= 0x3FFFFFFFFFFFFFF3)
              {
LABEL_1260:
                v522 = (std::string *)operator new(v520);
                if (!v501)
                  goto LABEL_1270;
              }
              else
              {
LABEL_1256:
                v521 = v518 + v516;
                if (v521 <= 2 * v518)
                  v521 = 2 * v518;
                if (v521 < 0x17)
                {
                  v520 = 23;
                  goto LABEL_1260;
                }
                v526 = (v521 & 0xFFFFFFFFFFFFFFF8) + 8;
                v527 = v521 | 7;
                if (v527 == 23)
                  v527 = v526;
                v520 = v527 + 1;
                v522 = (std::string *)operator new(v527 + 1);
                if (!v501)
                {
LABEL_1270:
                  v523 = (char *)v522 + v501;
                  if ((char *)v522 + v501 <= "\r\n")
                    goto LABEL_1271;
                  goto LABEL_1272;
                }
              }
              if (v517 >= v522 && (std::string *)((char *)v522 + v501) > v517)
                goto LABEL_106;
              memmove(v522, v517, v501);
              v523 = (char *)v522 + v501;
              if ((char *)v522 + v501 <= "\r\n")
              {
LABEL_1271:
                if (v523 + 2 > "\r\n")
                  goto LABEL_106;
              }
LABEL_1272:
              *(_WORD *)v523 = 2573;
              if (v518 != 22)
                operator delete(v517);
              v288->__r_.__value_.__r.__words[0] = (std::string::size_type)v522;
              v288->__r_.__value_.__l.__size_ = v501 + 2;
              v288->__r_.__value_.__r.__words[2] = v520 | 0x8000000000000000;
              v522->__r_.__value_.__s.__data_[v501 + 2] = 0;
              if ((*((_BYTE *)&v817.__r_.__value_.__s + 23) & 0x80) == 0)
                goto LABEL_1194;
              goto LABEL_1275;
            }
            v503 = v288->__r_.__value_.__l.__size_;
            v508 = v288->__r_.__value_.__r.__words[2];
            v502 = (v508 & 0x7FFFFFFFFFFFFFFFLL) - 1;
            v501 = HIBYTE(v508);
            if (v502 - v503 >= v487)
              goto LABEL_1223;
LABEL_1214:
            if (0x7FFFFFFFFFFFFFF6 - v502 < v487 - v502 + v503)
              goto LABEL_1992;
            v504 = v288;
            if (v500 < 0)
            {
              v504 = (std::string *)v288->__r_.__value_.__r.__words[0];
              v505 = 0x7FFFFFFFFFFFFFF7;
              if (v502 >= 0x3FFFFFFFFFFFFFF3)
                goto LABEL_1230;
LABEL_1217:
              v506 = v503 + v487;
              if (v503 + v487 <= 2 * v502)
                v506 = 2 * v502;
              if (v506 >= 0x17)
              {
                v512 = (v506 & 0xFFFFFFFFFFFFFFF8) + 8;
                v513 = v506 | 7;
                if (v513 == 23)
                  v513 = v512;
                v505 = v513 + 1;
                v507 = (std::string *)operator new(v513 + 1);
                if (v503)
                  goto LABEL_1231;
              }
              else
              {
                v505 = 23;
                v507 = (std::string *)operator new(0x17uLL);
                if (v503)
                  goto LABEL_1231;
              }
            }
            else
            {
              v505 = 0x7FFFFFFFFFFFFFF7;
              if (v502 < 0x3FFFFFFFFFFFFFF3)
                goto LABEL_1217;
LABEL_1230:
              v507 = (std::string *)operator new(0x7FFFFFFFFFFFFFF7uLL);
              if (v503)
              {
LABEL_1231:
                if (v504 >= v507 && (std::string *)((char *)v507 + v503) > v504)
                  goto LABEL_106;
                memmove(v507, v504, v503);
                v511 = (char *)v507 + v503;
                if ((std::string *)((char *)v507 + v503) > v497)
                  goto LABEL_1240;
LABEL_1239:
                if (&v511[v487] > (char *)v497)
                  goto LABEL_106;
LABEL_1240:
                memcpy(v511, v497, v487);
                if (v502 != 22)
                  operator delete(v504);
                v514 = v505 | 0x8000000000000000;
                v501 = v503 + v487;
                v288->__r_.__value_.__r.__words[0] = (std::string::size_type)v507;
                v288->__r_.__value_.__l.__size_ = v503 + v487;
                v288->__r_.__value_.__r.__words[2] = v514;
                v507->__r_.__value_.__s.__data_[v503 + v487] = 0;
                goto LABEL_1253;
              }
            }
            v511 = (char *)v507 + v503;
            if ((std::string *)((char *)v507 + v503) <= v497)
              goto LABEL_1239;
            goto LABEL_1240;
          }
LABEL_1193:
          if ((v496 & 0x80) != 0)
            goto LABEL_1275;
          goto LABEL_1194;
        }
        break;
      }
      if (v399)
      {
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v493 = &v817;
        else
          v493 = (std::string *)v817.__r_.__value_.__r.__words[0];
        v494 = (char *)v493 + v486;
        if ((char *)v493 + v486 <= v400 && &v494[v399] > v400)
          goto LABEL_106;
        memmove(v494, v400, v399);
        v495 = v486 + v399;
        if ((SHIBYTE(v817.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          *((_BYTE *)&v817.__r_.__value_.__s + 23) = v495 & 0x7F;
          v493->__r_.__value_.__s.__data_[v495] = 0;
          v496 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
          if ((*((_BYTE *)&v817.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_1192;
LABEL_1197:
          v487 = v817.__r_.__value_.__l.__size_;
          goto LABEL_1206;
        }
        v817.__r_.__value_.__l.__size_ = v486 + v399;
        v493->__r_.__value_.__s.__data_[v495] = 0;
        v496 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
        if ((*((_BYTE *)&v817.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_1197;
      }
      else
      {
        v496 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
        if ((*((_BYTE *)&v817.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_1197;
      }
LABEL_1192:
      v497 = &v817;
      v487 = v496;
      if (v288)
        goto LABEL_1210;
      goto LABEL_1193;
    }
LABEL_1718:
    v694 = v396;
    v695 = (const cricket::RidDescription *)v396[15];
    v696 = (const cricket::RidDescription *)v694[16];
    if (v695 != v696)
    {
      while (1)
      {
        webrtc::InitLine(97, "rid", 3uLL, &v815);
        v698 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v699 = 22;
        else
          v699 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v698 = v815.__r_.__value_.__l.__size_;
        if (v699 == v698)
          break;
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v705 = &v815;
        else
          v705 = (std::string *)v815.__r_.__value_.__r.__words[0];
        if ((char *)v705 + v698 <= ":" && (char *)&v705->__r_.__value_.__l.__data_ + v698 + 1 > ":")
          goto LABEL_106;
        v705->__r_.__value_.__s.__data_[v698] = 58;
        v707 = v698 + 1;
        if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
          v815.__r_.__value_.__l.__size_ = v707;
        else
          *((_BYTE *)&v815.__r_.__value_.__s + 23) = v707 & 0x7F;
        v708 = (char *)v705 + v707;
LABEL_1766:
        *v708 = 0;
        webrtc::SimulcastSdpSerializer::SerializeRidDescription(v695, &__src);
        v711 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          v712 = __src.__r_.__value_.__l.__size_;
          if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_106;
          v714 = (std::string *)__src.__r_.__value_.__r.__words[0];
          v713 = __src.__r_.__value_.__l.__size_ == 0;
          if (__src.__r_.__value_.__l.__size_)
          {
            if (!__src.__r_.__value_.__r.__words[0])
              goto LABEL_106;
          }
        }
        else
        {
          v712 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
          v713 = SHIBYTE(__src.__r_.__value_.__r.__words[2]) == 0;
          v714 = &__src;
        }
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v715 = 22;
        else
          v715 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v716 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
        else
          v716 = v815.__r_.__value_.__l.__size_;
        if (v715 - v716 < v712)
        {
          v717 = v716 + v712;
          if (0x7FFFFFFFFFFFFFF6 - v715 < v716 + v712 - v715)
            goto LABEL_1992;
          if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v718 = &v815;
          else
            v718 = (std::string *)v815.__r_.__value_.__r.__words[0];
          v719 = 0x7FFFFFFFFFFFFFF7;
          if (v715 >= 0x3FFFFFFFFFFFFFF3)
          {
LABEL_1787:
            v721 = (std::string *)operator new(v719);
            if (!v716)
              goto LABEL_1791;
          }
          else
          {
            v720 = 2 * v715;
            if (v717 > 2 * v715)
              v720 = v716 + v712;
            if (v720 < 0x17)
            {
              v719 = 23;
              goto LABEL_1787;
            }
            v727 = (v720 & 0xFFFFFFFFFFFFFFF8) + 8;
            v728 = v720 | 7;
            if (v728 == 23)
              v728 = v727;
            v719 = v728 + 1;
            v721 = (std::string *)operator new(v728 + 1);
            if (!v716)
            {
LABEL_1791:
              v722 = (char *)v721 + v716;
              if ((std::string *)((char *)v721 + v716) <= v714 && &v722[v712] > (char *)v714)
                goto LABEL_106;
              memcpy(v722, v714, v712);
              if (v715 != 22)
                operator delete(v718);
              v815.__r_.__value_.__l.__size_ = v716 + v712;
              v815.__r_.__value_.__r.__words[2] = v719 | 0x8000000000000000;
              v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v721;
              v723 = (char *)v721 + v717;
              v288 = v813;
              goto LABEL_1810;
            }
          }
          if (v718 >= v721 && (std::string *)((char *)v721 + v716) > v718)
            goto LABEL_106;
          memmove(v721, v718, v716);
          goto LABEL_1791;
        }
        if (v713)
          goto LABEL_1811;
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v724 = &v815;
        else
          v724 = (std::string *)v815.__r_.__value_.__r.__words[0];
        v725 = (char *)v724 + v716;
        if ((std::string *)((char *)v724 + v716) <= v714 && &v725[v712] > (char *)v714)
          goto LABEL_106;
        memmove(v725, v714, v712);
        v726 = v716 + v712;
        if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
          v815.__r_.__value_.__l.__size_ = v716 + v712;
        else
          *((_BYTE *)&v815.__r_.__value_.__s + 23) = v726 & 0x7F;
        v723 = (char *)v724 + v726;
LABEL_1810:
        *v723 = 0;
        v711 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
LABEL_1811:
        if (v711 < 0)
        {
          operator delete(__src.__r_.__value_.__l.__data_);
          v729 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_1813:
            v730 = v729;
            v731 = &v815;
            goto LABEL_1818;
          }
        }
        else
        {
          v729 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_1813;
        }
        v730 = v815.__r_.__value_.__l.__size_;
        if ((v815.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_106;
        v731 = (std::string *)v815.__r_.__value_.__r.__words[0];
        if (v815.__r_.__value_.__l.__size_)
        {
          if (!v815.__r_.__value_.__r.__words[0])
            goto LABEL_106;
        }
LABEL_1818:
        if (!v288)
          goto LABEL_1723;
        if (!v731 && v730)
          goto LABEL_106;
        v732 = SHIBYTE(v288->__r_.__value_.__r.__words[2]);
        if (v732 < 0)
        {
          v735 = v288->__r_.__value_.__l.__size_;
          v741 = v288->__r_.__value_.__r.__words[2];
          v734 = (v741 & 0x7FFFFFFFFFFFFFFFLL) - 1;
          v733 = HIBYTE(v741);
          if (v734 - v735 < v730)
          {
LABEL_1823:
            if (0x7FFFFFFFFFFFFFF6 - v734 < v730 - v734 + v735)
              goto LABEL_1992;
            v736 = v288;
            if (v732 < 0)
            {
              v736 = (std::string *)v288->__r_.__value_.__r.__words[0];
              v737 = 0x7FFFFFFFFFFFFFF7;
              if (v734 >= 0x3FFFFFFFFFFFFFF3)
                goto LABEL_1838;
LABEL_1826:
              v738 = v735 + v730;
              if (v735 + v730 <= 2 * v734)
                v738 = 2 * v734;
              if (v738 >= 0x17)
              {
                v752 = (v738 & 0xFFFFFFFFFFFFFFF8) + 8;
                v753 = v738 | 7;
                if (v753 == 23)
                  v753 = v752;
                v737 = v753 + 1;
                v739 = (std::string *)operator new(v753 + 1);
                if (v735)
                  goto LABEL_1839;
              }
              else
              {
                v737 = 23;
                v739 = (std::string *)operator new(0x17uLL);
                if (v735)
                  goto LABEL_1839;
              }
            }
            else
            {
              v737 = 0x7FFFFFFFFFFFFFF7;
              if (v734 < 0x3FFFFFFFFFFFFFF3)
                goto LABEL_1826;
LABEL_1838:
              v739 = (std::string *)operator new(0x7FFFFFFFFFFFFFF7uLL);
              if (v735)
              {
LABEL_1839:
                if (v736 >= v739 && (std::string *)((char *)v739 + v735) > v736)
                  goto LABEL_106;
                memmove(v739, v736, v735);
                v740 = (char *)v739 + v735;
                if ((std::string *)((char *)v739 + v735) <= v731)
                {
LABEL_1842:
                  if (&v740[v730] > (char *)v731)
                    goto LABEL_106;
                }
LABEL_1843:
                memcpy(v740, v731, v730);
                if (v734 != 22)
                  operator delete(v736);
                v744 = v737 | 0x8000000000000000;
                v733 = v735 + v730;
                v288->__r_.__value_.__r.__words[0] = (std::string::size_type)v739;
                v288->__r_.__value_.__l.__size_ = v735 + v730;
                v288->__r_.__value_.__r.__words[2] = v744;
                v739->__r_.__value_.__s.__data_[v735 + v730] = 0;
                v745 = v744 & 0x7FFFFFFFFFFFFFFFLL;
                v746 = (v744 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v746 - (v735 + v730) < 2)
                {
LABEL_1846:
                  if (0x7FFFFFFFFFFFFFF7 - v745 < v733 - v746 + 2)
                    goto LABEL_1992;
                  v747 = (std::string *)v813->__r_.__value_.__r.__words[0];
                  v748 = 0x7FFFFFFFFFFFFFF7;
                  if (v746 < 0x3FFFFFFFFFFFFFF3)
                  {
                    v749 = v733 + 2;
                    if (v733 + 2 <= 2 * v746)
                      v749 = 2 * v746;
                    if (v749 < 0x17)
                      goto LABEL_1851;
LABEL_1872:
                    v755 = (v749 & 0xFFFFFFFFFFFFFFF8) + 8;
                    v756 = v749 | 7;
                    if (v756 == 23)
                      v756 = v755;
                    v748 = v756 + 1;
                    v750 = (std::string *)operator new(v756 + 1);
                    if (!v733)
                    {
LABEL_1875:
                      v751 = (char *)v750 + v733;
                      if ((char *)v750 + v733 <= "\r\n")
                        goto LABEL_1876;
                      goto LABEL_1877;
                    }
LABEL_1853:
                    if (v747 >= v750 && (std::string *)((char *)v750 + v733) > v747)
                      goto LABEL_106;
                    memmove(v750, v747, v733);
                    v751 = (char *)v750 + v733;
                    if ((char *)v750 + v733 <= "\r\n")
                    {
LABEL_1876:
                      if (v751 + 2 > "\r\n")
                        goto LABEL_106;
                    }
LABEL_1877:
                    *(_WORD *)v751 = 2573;
                    if (v746 != 22)
                      operator delete(v747);
                    v288 = v813;
                    v813->__r_.__value_.__r.__words[0] = (std::string::size_type)v750;
                    v813->__r_.__value_.__l.__size_ = v733 + 2;
                    v813->__r_.__value_.__r.__words[2] = v748 | 0x8000000000000000;
                    v697 = &v750->__r_.__value_.__s.__data_[v733 + 2];
                    goto LABEL_1722;
                  }
LABEL_1852:
                  v750 = (std::string *)operator new(v748);
                  if (!v733)
                    goto LABEL_1875;
                  goto LABEL_1853;
                }
LABEL_1880:
                v288 = v813;
                v757 = v813->__r_.__value_.__r.__words[0];
                v758 = (char *)(v813->__r_.__value_.__r.__words[0] + v733);
                if (v758 <= "\r\n")
                  goto LABEL_1883;
                goto LABEL_1884;
              }
            }
            v740 = (char *)v739 + v735;
            if ((std::string *)((char *)v739 + v735) <= v731)
              goto LABEL_1842;
            goto LABEL_1843;
          }
        }
        else
        {
          v733 = HIBYTE(v288->__r_.__value_.__r.__words[2]);
          v734 = 22;
          v735 = v733;
          if (22 - v733 < v730)
            goto LABEL_1823;
        }
        if (v730)
        {
          v742 = v288;
          if (v732 < 0)
          {
            v742 = (std::string *)v288->__r_.__value_.__r.__words[0];
            v743 = (std::string *)(v288->__r_.__value_.__r.__words[0] + v735);
            if (v743 > v731)
            {
LABEL_1863:
              memmove(v743, v731, v730);
              v754 = v735 + v730;
              if (SHIBYTE(v288->__r_.__value_.__r.__words[2]) < 0)
                v288->__r_.__value_.__l.__size_ = v754;
              else
                *((_BYTE *)&v288->__r_.__value_.__s + 23) = v754 & 0x7F;
              v742->__r_.__value_.__s.__data_[v754] = 0;
              v733 = HIBYTE(v288->__r_.__value_.__r.__words[2]);
              goto LABEL_1867;
            }
          }
          else
          {
            v743 = (std::string *)((char *)v288 + v735);
            if ((std::string *)((char *)v288 + v735) > v731)
              goto LABEL_1863;
          }
          if ((std::string *)((char *)v743 + v730) > v731)
            goto LABEL_106;
          goto LABEL_1863;
        }
LABEL_1867:
        if ((v733 & 0x80) != 0)
        {
          v733 = v288->__r_.__value_.__l.__size_;
          v745 = v288->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
          v746 = v745 - 1;
          if (v745 - 1 - v733 < 2)
            goto LABEL_1846;
          goto LABEL_1880;
        }
        if (v733 - 21 < 2)
        {
          v747 = v288;
          v746 = 22;
          v749 = v733 + 2;
          if (v733 + 2 <= 0x2C)
            v749 = 44;
          if (v749 >= 0x17)
            goto LABEL_1872;
LABEL_1851:
          v748 = 23;
          goto LABEL_1852;
        }
        v757 = (std::string::size_type)v288;
        v758 = (char *)v288 + v733;
        if ((char *)v288 + v733 <= "\r\n")
        {
LABEL_1883:
          if (v758 + 2 > "\r\n")
            goto LABEL_106;
        }
LABEL_1884:
        *(_WORD *)v758 = 2573;
        v759 = v733 + 2;
        if (SHIBYTE(v288->__r_.__value_.__r.__words[2]) < 0)
          v288->__r_.__value_.__l.__size_ = v759;
        else
          *((_BYTE *)&v288->__r_.__value_.__s + 23) = v759 & 0x7F;
        v697 = (char *)(v757 + v759);
LABEL_1722:
        *v697 = 0;
LABEL_1723:
        v695 = (const cricket::RidDescription *)((char *)v695 + 80);
        if (v695 == v696)
          goto LABEL_1719;
      }
      if (v699 == 0x7FFFFFFFFFFFFFF6)
        goto LABEL_1992;
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v700 = &v815;
      else
        v700 = (std::string *)v815.__r_.__value_.__r.__words[0];
      v701 = 0x7FFFFFFFFFFFFFF7;
      if (v699 < 0x3FFFFFFFFFFFFFF3)
      {
        if (v699 + 1 > 2 * v699)
          v702 = v699 + 1;
        else
          v702 = 2 * v699;
        if (v702 >= 0x17)
        {
          v709 = (v702 & 0xFFFFFFFFFFFFFFF8) + 8;
          v710 = v702 | 7;
          if (v710 == 23)
            v710 = v709;
          v701 = v710 + 1;
          v703 = (std::string *)operator new(v710 + 1);
          v704 = (std::string *)((char *)v703 + v699);
          if (v699)
          {
LABEL_1741:
            if (v700 >= v703 && v704 > v700)
              goto LABEL_106;
            memmove(v703, v700, v699);
            if (v704 <= (std::string *)":" && (char *)&v704->__r_.__value_.__l.__data_ + 1 > ":")
              goto LABEL_106;
            v704->__r_.__value_.__s.__data_[0] = 58;
            if (v699 == 22)
              goto LABEL_1765;
            goto LABEL_1764;
          }
LABEL_1761:
          if (v704 <= (std::string *)":" && (char *)&v704->__r_.__value_.__l.__data_ + 1 > ":")
            goto LABEL_106;
          v704->__r_.__value_.__s.__data_[0] = 58;
LABEL_1764:
          operator delete(v700);
LABEL_1765:
          v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v703;
          v815.__r_.__value_.__l.__size_ = v699 + 1;
          v815.__r_.__value_.__r.__words[2] = v701 | 0x8000000000000000;
          v708 = &v703->__r_.__value_.__s.__data_[v699 + 1];
          goto LABEL_1766;
        }
        v701 = 23;
      }
      v703 = (std::string *)operator new(v701);
      v704 = (std::string *)((char *)v703 + v699);
      if (v699)
        goto LABEL_1741;
      goto LABEL_1761;
    }
LABEL_1719:
    v287 = v811 + 18;
    if (v811 + 18 != v799)
      continue;
    break;
  }
LABEL_1888:
  v761 = (const cricket::RidDescription *)v800[32];
  v760 = (const cricket::RidDescription *)v800[33];
  if (v761 != v760)
  {
    while (2)
    {
      webrtc::InitLine(97, "rid", 3uLL, &v815);
      v765 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v766 = 22;
      else
        v766 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v765 = v815.__r_.__value_.__l.__size_;
      if (v766 == v765)
      {
        std::string::__grow_by_and_replace(&v815, v766, 1uLL, v766, v766, 0, 1uLL, ":");
        webrtc::SimulcastSdpSerializer::SerializeRidDescription(v761, &__src);
        v767 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1900;
LABEL_1912:
        v768 = __src.__r_.__value_.__l.__size_;
        if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_106;
        v770 = (std::string *)__src.__r_.__value_.__r.__words[0];
        v769 = __src.__r_.__value_.__l.__size_ == 0;
        if (__src.__r_.__value_.__l.__size_)
        {
          if (!__src.__r_.__value_.__r.__words[0])
            goto LABEL_106;
        }
      }
      else
      {
        if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v771 = &v815;
        else
          v771 = (std::string *)v815.__r_.__value_.__r.__words[0];
        if ((char *)v771 + v765 <= ":" && (char *)&v771->__r_.__value_.__l.__data_ + v765 + 1 > ":")
          goto LABEL_106;
        v771->__r_.__value_.__s.__data_[v765] = 58;
        v773 = v765 + 1;
        if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
          v815.__r_.__value_.__l.__size_ = v773;
        else
          *((_BYTE *)&v815.__r_.__value_.__s + 23) = v773 & 0x7F;
        v771->__r_.__value_.__s.__data_[v773] = 0;
        webrtc::SimulcastSdpSerializer::SerializeRidDescription(v761, &__src);
        v767 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_1912;
LABEL_1900:
        v768 = v767;
        v769 = v767 == 0;
        v770 = &__src;
      }
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v774 = 22;
      else
        v774 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v775 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      else
        v775 = v815.__r_.__value_.__l.__size_;
      if (v774 - v775 < v768)
      {
        std::string::__grow_by_and_replace(&v815, v774, v775 + v768 - v774, v775, v775, 0, v768, (const std::string::value_type *)v770);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_1890;
LABEL_1933:
        v762 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
        v288 = v813;
        if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_1934:
          v763 = v815.__r_.__value_.__l.__size_;
          if ((v815.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_106;
          v764 = (std::string *)v815.__r_.__value_.__r.__words[0];
          if (v815.__r_.__value_.__l.__size_)
          {
            if (!v815.__r_.__value_.__r.__words[0])
              goto LABEL_106;
          }
          goto LABEL_1892;
        }
LABEL_1891:
        v763 = v762;
        v764 = &v815;
LABEL_1892:
        webrtc::AddLine((char *)v764, v763, v288);
        v761 = (const cricket::RidDescription *)((char *)v761 + 80);
        if (v761 == v760)
          goto LABEL_1940;
        continue;
      }
      break;
    }
    if (!v769)
    {
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v776 = &v815;
      else
        v776 = (std::string *)v815.__r_.__value_.__r.__words[0];
      v777 = (char *)v776 + v775;
      if ((std::string *)((char *)v776 + v775) <= v770 && &v777[v768] > (char *)v770)
        goto LABEL_106;
      memmove(v777, v770, v768);
      v778 = v775 + v768;
      if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
      {
        v815.__r_.__value_.__l.__size_ = v775 + v768;
        v776->__r_.__value_.__s.__data_[v778] = 0;
        if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1933;
LABEL_1890:
        operator delete(__src.__r_.__value_.__l.__data_);
        v762 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
        v288 = v813;
        if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_1934;
        goto LABEL_1891;
      }
      *((_BYTE *)&v815.__r_.__value_.__s + 23) = v778 & 0x7F;
      v776->__r_.__value_.__s.__data_[v778] = 0;
    }
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1890;
    goto LABEL_1933;
  }
LABEL_1940:
  v779 = (const cricket::SimulcastDescription *)(v800 + 26);
  if (v800[26] == v800[27] && v800[29] == v800[30])
    goto LABEL_1987;
  webrtc::InitLine(97, "simulcast", 9uLL, &v815);
  v780 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v781 = 22;
  else
    v781 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v780 = v815.__r_.__value_.__l.__size_;
  if (v781 == v780)
  {
    std::string::__grow_by_and_replace(&v815, v781, 1uLL, v781, v781, 0, 1uLL, ":");
    webrtc::SimulcastSdpSerializer::SerializeSimulcastDescription(v779, &__src);
    v782 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1949;
LABEL_1959:
    v783 = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_106;
    v785 = (std::string *)__src.__r_.__value_.__r.__words[0];
    v784 = __src.__r_.__value_.__l.__size_ == 0;
    if (__src.__r_.__value_.__l.__size_)
    {
      if (!__src.__r_.__value_.__r.__words[0])
        goto LABEL_106;
    }
  }
  else
  {
    if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v786 = &v815;
    else
      v786 = (std::string *)v815.__r_.__value_.__r.__words[0];
    v787 = (char *)v786 + v780;
    if ((char *)v786 + v780 <= ":" && v787 + 1 > ":")
      goto LABEL_106;
    *v787 = 58;
    v788 = v780 + 1;
    if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
      v815.__r_.__value_.__l.__size_ = v788;
    else
      *((_BYTE *)&v815.__r_.__value_.__s + 23) = v788 & 0x7F;
    v786->__r_.__value_.__s.__data_[v788] = 0;
    webrtc::SimulcastSdpSerializer::SerializeSimulcastDescription(v779, &__src);
    v782 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1959;
LABEL_1949:
    v783 = v782;
    v784 = v782 == 0;
    v785 = &__src;
  }
  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v789 = 22;
  else
    v789 = (v815.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v790 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
  else
    v790 = v815.__r_.__value_.__l.__size_;
  if (v789 - v790 >= v783)
  {
    if (!v784)
    {
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v794 = &v815;
      else
        v794 = (std::string *)v815.__r_.__value_.__r.__words[0];
      v795 = (char *)v794 + v790;
      if ((std::string *)((char *)v794 + v790) <= v785 && &v795[v783] > (char *)v785)
        goto LABEL_106;
      memmove(v795, v785, v783);
      v796 = v790 + v783;
      if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
      {
        v815.__r_.__value_.__l.__size_ = v790 + v783;
        v794->__r_.__value_.__s.__data_[v796] = 0;
        if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1984;
LABEL_1970:
        operator delete(__src.__r_.__value_.__l.__data_);
        v791 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1985;
        goto LABEL_1971;
      }
      *((_BYTE *)&v815.__r_.__value_.__s + 23) = v796 & 0x7F;
      v794->__r_.__value_.__s.__data_[v796] = 0;
    }
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1984;
    goto LABEL_1970;
  }
  std::string::__grow_by_and_replace(&v815, v789, v790 + v783 - v789, v790, v790, 0, v783, (const std::string::value_type *)v785);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_1970;
LABEL_1984:
  v791 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_1985:
    v792 = v791;
    v793 = &v815;
    goto LABEL_1986;
  }
LABEL_1971:
  v792 = v815.__r_.__value_.__l.__size_;
  if ((v815.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_106;
  v793 = (std::string *)v815.__r_.__value_.__r.__words[0];
  if (v815.__r_.__value_.__l.__size_)
  {
    if (!v815.__r_.__value_.__r.__words[0])
      goto LABEL_106;
  }
LABEL_1986:
  webrtc::AddLine((char *)v793, v792, v288);
LABEL_1987:
  if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v815.__r_.__value_.__l.__data_);
}

void webrtc::AddAttributeLine(char *a1, size_t a2, int a3, std::string *a4)
{
  std::string::size_type size;
  std::string::size_type v7;
  unsigned __int8 v8;
  std::string *v9;
  std::string::size_type v11;
  size_t v12;
  std::string *v13;
  std::string v14;

  memset(&v14, 0, sizeof(v14));
  webrtc::InitLine(97, a1, a2, &v14);
  size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = 22;
  else
    v7 = (v14.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v14.__r_.__value_.__l.__size_;
  if (v7 != size)
  {
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v14;
    else
      v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((char *)v9 + size <= ":" && (char *)&v9->__r_.__value_.__l.__data_ + size + 1 > ":")
      goto LABEL_25;
    v9->__r_.__value_.__s.__data_[size] = 58;
    v11 = size + 1;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    {
      v14.__r_.__value_.__l.__size_ = v11;
      v9->__r_.__value_.__s.__data_[v11] = 0;
      rtc::StringBuilder::operator<<(&v14, a3);
      v8 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
    }
    else
    {
      *((_BYTE *)&v14.__r_.__value_.__s + 23) = v11 & 0x7F;
      v9->__r_.__value_.__s.__data_[v11] = 0;
      rtc::StringBuilder::operator<<(&v14, a3);
      v8 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
    }
LABEL_20:
    v12 = v14.__r_.__value_.__l.__size_;
    if ((v14.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
    {
      v13 = (std::string *)v14.__r_.__value_.__r.__words[0];
      if (!v14.__r_.__value_.__l.__size_ || v14.__r_.__value_.__r.__words[0])
        goto LABEL_23;
    }
LABEL_25:
    __break(1u);
    return;
  }
  std::string::__grow_by_and_replace(&v14, v7, 1uLL, v7, v7, 0, 1uLL, ":");
  rtc::StringBuilder::operator<<(&v14, a3);
  v8 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_18:
  v12 = v8;
  v13 = &v14;
LABEL_23:
  webrtc::AddLine((char *)v13, v12, a4);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void webrtc::ParseFailedExpectFieldNum(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  std::string *v8;
  int v9;
  std::string::size_type v10;
  std::string::size_type size;
  std::string *v12;
  std::string::size_type v14;
  char v15;
  std::string v16;
  _BYTE __p[23];
  char v18;

  memset(&v16, 0, sizeof(v16));
  if (&v16 <= (std::string *)"Expects " && &v16.__r_.__value_.__r.__words[1] > (std::string::size_type *)"Expects ")
    goto LABEL_29;
  strcpy((char *)&v16, "Expects ");
  *((_BYTE *)&v16.__r_.__value_.__s + 23) = 8;
  v8 = rtc::StringBuilder::operator<<(&v16, a3);
  v9 = SHIBYTE(v8->__r_.__value_.__r.__words[2]);
  if (v9 >= 0)
    v10 = 22;
  else
    v10 = (v8->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v9 >= 0)
    size = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  else
    size = v8->__r_.__value_.__l.__size_;
  if (v10 - size < 8)
  {
    std::string::__grow_by_and_replace(v8, v10, size - v10 + 8, size, size, 0, 8uLL, " fields.");
    goto LABEL_24;
  }
  v12 = v9 >= 0 ? v8 : (std::string *)v8->__r_.__value_.__r.__words[0];
  if ((char *)v12 + size <= " fields." && (char *)&v12->__r_.__value_.__r.__words[1] + size > " fields.")
  {
LABEL_29:
    __break(1u);
    return;
  }
  *(std::string::size_type *)((char *)v12->__r_.__value_.__r.__words + size) = 0x2E73646C65696620;
  v14 = size + 8;
  if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
    v8->__r_.__value_.__l.__size_ = v14;
  else
    *((_BYTE *)&v8->__r_.__value_.__s + 23) = v14 & 0x7F;
  v12->__r_.__value_.__s.__data_[v14] = 0;
LABEL_24:
  *(_OWORD *)__p = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[15] = *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 7);
  v15 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  memset(&v16, 0, sizeof(v16));
  v18 = v15;
  webrtc::ParseFailed(a1, a2, 0, (__n128 *)__p, a4);
  if ((v18 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete(v16.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_28;
}

BOOL webrtc::HasAttribute(uint64_t a1, unint64_t a2, void *__s2, unint64_t a4)
{
  unint64_t v6;
  size_t v7;
  int v9;
  _BOOL8 result;
  unint64_t v11;
  int v12;

  if (a2 <= 1)
LABEL_21:
    abort();
  v6 = a2 - 2;
  if (a2 - 2 >= a4)
    v7 = a4;
  else
    v7 = a2 - 2;
  if ((v7 & 0x8000000000000000) != 0 || !a1 && v7)
    goto LABEL_20;
  v9 = memcmp((const void *)(a1 + 2), __s2, v7);
  result = 0;
  if (v9 || a4 > v6)
    return result;
  v11 = a4 + 2;
  if (a4 + 2 == a2)
    return 1;
  if (a2 <= v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v12 = *(unsigned __int8 *)(a1 + v11);
  return v12 == 58 || v12 == 32;
}

uint64_t webrtc::GetValue(unsigned __int8 *a1, size_t a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6)
{
  char v11;
  size_t v12;
  char *p_p;
  BOOL v14;
  size_t v15;
  uint64_t v16;
  void *__p;
  size_t v19;
  uint64_t v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  if (!rtc::tokenize_first(a1, a2, 58, (uint64_t)&__p, a5))
    goto LABEL_14;
  v11 = HIBYTE(v20);
  if (SHIBYTE(v20) < 0)
  {
    v12 = v19;
    if (v19 < a4)
      goto LABEL_14;
    if ((v19 & 0x8000000000000000) != 0 || (p_p = (char *)__p, v19) && !__p)
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
  }
  else
  {
    v12 = HIBYTE(v20);
    if (a4 > HIBYTE(v20))
      goto LABEL_14;
    p_p = (char *)&__p;
  }
  v14 = v12 >= a4;
  v15 = v12 - a4;
  if (!v14)
LABEL_20:
    abort();
  if (a4 && !p_p)
    goto LABEL_19;
  if (!memcmp(&p_p[v15], a3, a4))
  {
    v16 = 1;
    if ((v11 & 0x80) == 0)
      return v16;
    goto LABEL_15;
  }
LABEL_14:
  webrtc::ParseFailedGetValue((uint64_t)a1, a2, (const std::string::value_type *)a3, a4, a6);
  v16 = 0;
  if (v20 < 0)
LABEL_15:
    operator delete(__p);
  return v16;
}

uint64_t webrtc::ParseIceOptions(unsigned __int8 *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Value;
  unint64_t v6;
  void *p_p;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v20;
  char *v21;
  void *__p;
  unint64_t v23;
  uint64_t v24;

  __p = 0;
  v23 = 0;
  v24 = 0;
  Value = webrtc::GetValue(a1, a2, "ice-options", 0xBuLL, (uint64_t)&__p, a4);
  if ((_DWORD)Value)
  {
    if (SHIBYTE(v24) < 0)
    {
      v6 = v23;
      if ((v23 & 0x8000000000000000) != 0 || (p_p = __p, v23) && !__p)
      {
LABEL_31:
        __break(1u);
LABEL_32:
        abort();
      }
    }
    else
    {
      v6 = HIBYTE(v24);
      p_p = &__p;
    }
    rtc::split((size_t)p_p, v6, 0x20u, &v20);
    v8 = v21;
    if (v21 != v20)
    {
      v9 = 0;
      v10 = 0;
      v11 = *(char **)(a3 + 8);
      v8 = v20;
      do
      {
        if ((unint64_t)v11 >= *(_QWORD *)(a3 + 16))
        {
          v11 = std::vector<std::string>::__emplace_back_slow_path<std::string_view &>((void **)a3, (char **)&v8[v9]);
        }
        else
        {
          if (!v11)
            goto LABEL_31;
          v12 = *(_QWORD *)&v8[v9 + 8];
          if (v12 >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_32;
          v13 = *(char **)&v8[v9];
          if (v12 > 0x16)
          {
            v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v12 | 7) != 0x17)
              v15 = v12 | 7;
            v16 = v15 + 1;
            v14 = (char *)operator new(v15 + 1);
            *((_QWORD *)v11 + 1) = v12;
            *((_QWORD *)v11 + 2) = v16 | 0x8000000000000000;
            *(_QWORD *)v11 = v14;
          }
          else
          {
            v11[23] = v12;
            v14 = v11;
          }
          v17 = &v14[v12];
          if (v14 <= v13 && v17 > v13)
            goto LABEL_31;
          if (v12)
            memmove(v14, v13, v12);
          *v17 = 0;
          v11 += 24;
        }
        *(_QWORD *)(a3 + 8) = v11;
        ++v10;
        v8 = v20;
        v9 += 16;
      }
      while (v10 < (v21 - v20) >> 4);
    }
    if (v8)
    {
      v21 = v8;
      operator delete(v8);
    }
  }
  if (SHIBYTE(v24) < 0)
    operator delete(__p);
  return Value;
}

uint64_t webrtc::ParseFingerprintAttribute(uint64_t a1, unint64_t a2, void **a3, uint64_t a4)
{
  int64_t v5;
  _BYTE *v9;
  unsigned __int8 v10;
  size_t v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void **v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void **v22;
  char *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  void *v30;
  size_t v31;
  uint64_t v32;
  void *v33;
  _BYTE *v34;
  void *__p;
  __int128 v36;

  if (a2 <= 1)
LABEL_55:
    abort();
  v5 = a2 - 2;
  if (v5 < 0 || !a1 && v5)
    goto LABEL_54;
  rtc::split(a1 + 2, v5, 0x20u, (char **)&v33);
  if (v34 - (_BYTE *)v33 != 32)
  {
    webrtc::ParseFailedExpectFieldNum(a1, a2, 2, a4);
    v14 = 0;
    goto LABEL_51;
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v9 = &v30;
  if (!webrtc::GetValue(*(unsigned __int8 **)v33, *((_QWORD *)v33 + 1), "fingerprint", 0xBuLL, (uint64_t)&v30, a4))
  {
LABEL_49:
    v14 = 0;
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_51;
    goto LABEL_50;
  }
  v10 = HIBYTE(v32);
  if (v32 >= 0)
  {
    v11 = HIBYTE(v32);
  }
  else
  {
    v9 = v30;
    v11 = v31;
  }
  if (v11)
  {
    do
    {
      *v9 = __tolower((char)*v9);
      ++v9;
      --v11;
    }
    while (v11);
    v10 = HIBYTE(v32);
  }
  if ((v10 & 0x80) != 0)
  {
    v12 = v31;
    if ((v31 & 0x8000000000000000) != 0)
      goto LABEL_54;
    v13 = v30;
    if (v31)
    {
      if (!v30)
        goto LABEL_54;
    }
  }
  else
  {
    v12 = v10;
    v13 = &v30;
  }
  if ((unint64_t)(v34 - (_BYTE *)v33) <= 0x10)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  rtc::SSLFingerprint::CreateUniqueFromRfc4572((uint64_t)v13, v12, *((_QWORD *)v33 + 2), *((_QWORD *)v33 + 3), &__p);
  v15 = __p;
  __p = 0;
  v16 = (void **)*a3;
  *a3 = v15;
  if (v16)
  {
    v17 = (char *)v16[3];
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 24);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = *((_QWORD *)v17 + 2);
        *((_QWORD *)v17 + 2) = 0;
        if (v21)
          MEMORY[0x20BD0ADD4](v21, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v17, 0x1010C40EE34DA14);
      }
    }
    if (*((char *)v16 + 23) < 0)
      operator delete(*v16);
    MEMORY[0x20BD0ADEC](v16, 0x1032C40CD05A1E1);
    v22 = (void **)__p;
    __p = 0;
    if (v22)
    {
      v23 = (char *)v22[3];
      if (v23)
      {
        v24 = (unsigned int *)(v23 + 24);
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *((_QWORD *)v23 + 2);
          *((_QWORD *)v23 + 2) = 0;
          if (v27)
            MEMORY[0x20BD0ADD4](v27, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v23, 0x1010C40EE34DA14);
        }
      }
      if (*((char *)v22 + 23) < 0)
        operator delete(*v22);
      MEMORY[0x20BD0ADEC](v22, 0x1032C40CD05A1E1);
    }
    v15 = *a3;
  }
  if (!v15)
  {
    v28 = (char *)operator new(0x30uLL);
    if (v28 > "Failed to create fingerprint from the digest."
      || v28 + 45 <= "Failed to create fingerprint from the digest.")
    {
      strcpy(v28, "Failed to create fingerprint from the digest.");
      __p = v28;
      v36 = xmmword_208F08640;
      webrtc::ParseFailed(a1, a2, 0, (__n128 *)&__p, a4);
      if (SHIBYTE(v36) < 0)
        operator delete(__p);
      goto LABEL_49;
    }
    goto LABEL_54;
  }
  v14 = 1;
  if ((SHIBYTE(v32) & 0x80000000) == 0)
    goto LABEL_51;
LABEL_50:
  operator delete(v30);
LABEL_51:
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  return v14;
}

uint64_t *std::unique_ptr<rtc::SSLFingerprint>::operator=[abi:sn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 24);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 24);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        v9 = *(_QWORD *)(v5 + 16);
        *(_QWORD *)(v5 + 16) = 0;
        if (v9)
          MEMORY[0x20BD0ADD4](v9, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v5, 0x1010C40EE34DA14);
      }
    }
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x20BD0ADEC](v4, 0x1032C40CD05A1E1);
  }
  return a1;
}

uint64_t *std::unique_ptr<rtc::SSLFingerprint>::~unique_ptr[abi:sn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 24);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(_QWORD *)(v3 + 16);
        *(_QWORD *)(v3 + 16) = 0;
        if (v7)
          MEMORY[0x20BD0ADD4](v7, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v3, 0x1010C40EE34DA14);
      }
    }
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x20BD0ADEC](v2, 0x1032C40CD05A1E1);
  }
  return a1;
}

uint64_t webrtc::ParseDtlsSetup(uint64_t a1, unint64_t a2, _DWORD *a3, uint64_t a4)
{
  int64_t v5;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v13;
  void *__p;
  _BYTE *v15;
  void *v16;
  __int128 v17;

  if (a2 <= 1)
LABEL_18:
    abort();
  v5 = a2 - 2;
  if (v5 < 0 || !a1 && v5)
    goto LABEL_17;
  rtc::split(a1 + 2, v5, 0x3Au, (char **)&__p);
  if (v15 - (_BYTE *)__p != 32)
  {
    webrtc::ParseFailedExpectFieldNum(a1, a2, 2, a4);
    goto LABEL_10;
  }
  v9 = cricket::StringToConnectionRole(*((char **)__p + 2), *((_QWORD *)__p + 3));
  if ((v9 & 0xFF00000000) != 0)
  {
    *a3 = v9;
    v10 = 1;
    v11 = __p;
    if (!__p)
      return v10;
    goto LABEL_11;
  }
  v13 = (char *)operator new(0x20uLL);
  if (v13 <= "Invalid attribute value." && v13 + 24 > "Invalid attribute value.")
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  strcpy(v13, "Invalid attribute value.");
  v16 = v13;
  v17 = xmmword_208F08630;
  webrtc::ParseFailed(a1, a2, 0, (__n128 *)&v16, a4);
  if (SHIBYTE(v17) < 0)
    operator delete(v16);
LABEL_10:
  v10 = 0;
  v11 = __p;
  if (__p)
  {
LABEL_11:
    v15 = v11;
    operator delete(v11);
  }
  return v10;
}

uint64_t webrtc::ParseExtmap(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5;
  uint64_t v9;
  void **v10;
  size_t v11;
  unint64_t v12;
  size_t p_sz;
  BOOL v14;
  unint64_t v15;
  int v16;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  size_t v26;
  void *__p[2];
  int64_t v29;
  int v30;
  BOOL v31;
  void *v32[2];
  char v33;
  int v34;
  void *v35;
  void *v36;
  size_t __sz;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;

  if (a2 <= 1)
    goto LABEL_72;
  v5 = a2 - 2;
  if (v5 < 0 || !a1 && v5)
    goto LABEL_70;
  rtc::split(a1 + 2, v5, 0x20u, &v40);
  if ((unint64_t)(v41 - v40) <= 0x1F)
  {
    webrtc::ParseFailedExpectMinFieldNum(a1, a2, 2, a4);
    v9 = 0;
    goto LABEL_66;
  }
  v10 = (void **)*((_QWORD *)v40 + 2);
  v11 = *((_QWORD *)v40 + 3);
  __sz = 0;
  v38 = 0;
  v39 = 0;
  if (webrtc::GetValue(*(unsigned __int8 **)v40, *((_QWORD *)v40 + 1), "extmap", 6uLL, (uint64_t)&__sz, a4))
  {
    if (SHIBYTE(v39) < 0)
    {
      v12 = v38;
      if ((v38 & 0x8000000000000000) != 0)
        goto LABEL_70;
      p_sz = __sz;
      if (v38)
      {
        if (!__sz)
          goto LABEL_70;
      }
    }
    else
    {
      v12 = HIBYTE(v39);
      p_sz = (size_t)&__sz;
    }
    rtc::split(p_sz, v12, 0x2Fu, (char **)&v35);
    v34 = 0;
    if (v36 != v35)
    {
      if (!webrtc::GetValueFromString<int>(a1, a2, *(void ***)v35, *((_QWORD *)v35 + 1), &v34, a4))
        goto LABEL_36;
      v14 = v11 == 34;
      if (v11 == 34)
      {
        v15 = (unint64_t)*v10 ^ *(_QWORD *)"urn:ietf:params:rtp-hdrext:encrypt" | (unint64_t)v10[1] ^ *(_QWORD *)":params:rtp-hdrext:encrypt" | (unint64_t)v10[2] ^ *(_QWORD *)"rtp-hdrext:encrypt" | (unint64_t)v10[3] ^ *(_QWORD *)"xt:encrypt" | (unsigned __int16)(*((_WORD *)v10 + 16) ^ *(_WORD *)"pt");
        if (v15)
        {
LABEL_18:
          v16 = v34;
          v11 = 34;
          v14 = v15 == 0;
          goto LABEL_41;
        }
        if ((unint64_t)(v41 - v40) <= 0x20)
        {
          webrtc::ParseFailedExpectMinFieldNum(a1, a2, 3, a4);
          v9 = 0;
          goto LABEL_62;
        }
        v10 = (void **)*((_QWORD *)v40 + 4);
        v11 = *((_QWORD *)v40 + 5);
        if (v11 == 34)
        {
          if (*v10 != *(void **)"urn:ietf:params:rtp-hdrext:encrypt"
            || v10[1] != *(void **)":params:rtp-hdrext:encrypt"
            || v10[2] != *(void **)"rtp-hdrext:encrypt"
            || v10[3] != *(void **)"xt:encrypt"
            || *((unsigned __int16 *)v10 + 16) != (unint64_t)*(unsigned __int16 *)"pt")
          {
            goto LABEL_18;
          }
          std::string::basic_string[abi:sn180100]<0>((char **)v32, "Recursive encrypted header.");
          webrtc::ParseFailed(a1, a2, (uint64_t)v32, a4);
          if (v33 < 0)
          {
LABEL_71:
            operator delete(v32[0]);
            v9 = 0;
LABEL_62:
            if (v35)
            {
              v36 = v35;
              operator delete(v35);
            }
            goto LABEL_64;
          }
LABEL_36:
          v9 = 0;
          goto LABEL_62;
        }
      }
      if (v11 < 0x7FFFFFFFFFFFFFF8)
      {
        v16 = v34;
        if (v11 <= 0x16)
        {
          HIBYTE(v29) = v11;
          v21 = __p;
          v22 = (void **)((char *)__p + v11);
          if (__p > v10)
            goto LABEL_45;
LABEL_44:
          if (v22 <= v10)
          {
LABEL_45:
            if (v11)
              memmove(v21, v10, v11);
            *(_BYTE *)v22 = 0;
            v30 = v16;
            v31 = v14;
            if (__p != (void **)a3)
            {
              if (*(char *)(a3 + 23) < 0)
              {
                if (v29 >= 0)
                  v25 = __p;
                else
                  v25 = (void **)__p[0];
                if (v29 >= 0)
                  v26 = HIBYTE(v29);
                else
                  v26 = (size_t)__p[1];
                std::string::__assign_no_alias<false>((std::string *)a3, (const std::string::value_type *)v25, v26);
              }
              else if (v29 < 0)
              {
                std::string::__assign_no_alias<true>((_QWORD *)a3, (char *)__p[0], (size_t)__p[1]);
              }
              else
              {
                *(_OWORD *)a3 = *(_OWORD *)__p;
                *(_QWORD *)(a3 + 16) = v29;
              }
            }
            *(_DWORD *)(a3 + 24) = v30;
            *(_BYTE *)(a3 + 28) = v31;
            if (SHIBYTE(v29) < 0)
              operator delete(__p[0]);
            v9 = 1;
            goto LABEL_62;
          }
          goto LABEL_70;
        }
LABEL_41:
        v23 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v23 = v11 | 7;
        v24 = v23 + 1;
        v21 = (void **)operator new(v23 + 1);
        __p[1] = (void *)v11;
        v29 = v24 | 0x8000000000000000;
        __p[0] = v21;
        v22 = (void **)((char *)v21 + v11);
        if (v21 > v10)
          goto LABEL_45;
        goto LABEL_44;
      }
LABEL_72:
      abort();
    }
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v9 = 0;
LABEL_64:
  if (SHIBYTE(v39) < 0)
    operator delete((void *)__sz);
LABEL_66:
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  return v9;
}

unint64_t webrtc::GetLine(unint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  char *v9;
  char *v10;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char v15;

  v4 = result;
  v5 = *a4;
  v6 = (char *)(a3 - *a4);
  if (a3 <= *a4)
    goto LABEL_20;
  v9 = (char *)(a2 + v5);
  result = (unint64_t)memchr((void *)(a2 + v5), 10, a3 - *a4);
  v10 = (char *)(result - a2);
  if (!result || v10 + 1 == 0)
    goto LABEL_20;
  v12 = &v10[-v5];
  if (v6 < &v10[-v5])
    v12 = v6;
  if (((unint64_t)v12 & 0x8000000000000000) == 0 && (a2 || !v12))
  {
    if (!v12)
      goto LABEL_20;
    v13 = (unint64_t)&v12[-(v9[(_QWORD)v12 - 1] == 13)];
    if (v13 < 3)
      goto LABEL_20;
    v14 = *v9;
    if (*v9 < 0)
    {
      result = __maskrune(v14, 0x1000uLL);
      if (!(_DWORD)result)
        goto LABEL_20;
    }
    else
    {
      result = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v14 + 60) & 0x1000;
      if (!(_DWORD)result)
        goto LABEL_20;
    }
    if (v9[1] == 61 && (*v9 == 115 || v9[2] != 32))
    {
      *a4 = (uint64_t)(v10 + 1);
      *(_QWORD *)v4 = v9;
      *(_QWORD *)(v4 + 8) = v13;
      v15 = 1;
      goto LABEL_21;
    }
LABEL_20:
    v15 = 0;
    *(_BYTE *)v4 = 0;
LABEL_21:
    *(_BYTE *)(v4 + 16) = v15;
    return result;
  }
  __break(1u);
  return result;
}

void webrtc::ParseFailedGetValue(uint64_t a1, unint64_t a2, const std::string::value_type *a3, std::string::size_type a4, uint64_t a5)
{
  char *v10;
  std::string::value_type *v11;
  char v12;
  std::string v13;
  void *__p;
  _BYTE v15[15];
  char v16;

  v10 = (char *)operator new(0x30uLL);
  v11 = v10 + 38;
  if (v10 <= "Failed to get the value of attribute: " && v11 > "Failed to get the value of attribute: ")
    goto LABEL_17;
  strcpy(v10, "Failed to get the value of attribute: ");
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = xmmword_208F0AAE0;
  if (!a3)
  {
    if (a4)
      goto LABEL_17;
  }
  if (a4 > 9)
  {
    std::string::__grow_by_and_replace(&v13, 0x2FuLL, a4 - 9, 0x26uLL, 0x26uLL, 0, a4, a3);
    v10 = (char *)v13.__r_.__value_.__r.__words[0];
    v12 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    goto LABEL_12;
  }
  if (a4)
  {
    if (v11 > a3 || &v11[a4] <= a3)
    {
      memmove(v11, a3, a4);
      v13.__r_.__value_.__l.__size_ = a4 + 38;
      v10[a4 + 38] = 0;
      goto LABEL_11;
    }
LABEL_17:
    __break(1u);
    return;
  }
LABEL_11:
  v12 = 0x80;
LABEL_12:
  __p = v10;
  *(_QWORD *)v15 = v13.__r_.__value_.__l.__size_;
  *(_QWORD *)&v15[7] = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
  memset(&v13, 0, sizeof(v13));
  v16 = v12;
  webrtc::ParseFailed(a1, a2, 0, (__n128 *)&__p, a5);
  if ((v16 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_16;
}

void webrtc::ParseContentDescription(uint64_t **a1, uint64_t a2, unint64_t a3, unsigned int a4, int a5, char *a6, uint64_t a7, __int32 **a8, uint64_t *a9, uint64_t a10, _BYTE *a11, int *a12, uint64_t a13, _QWORD *a14, unint64_t a15)
{
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  int v20;
  __int32 *v21;
  __int32 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  const cricket::Codec *v28;
  uint64_t v29;
  const cricket::Codec *v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL4 v34;
  _BOOL4 v36;
  _BOOL4 v38;
  _BOOL4 v40;
  _BOOL4 v42;
  _BOOL4 v44;
  _BOOL4 v46;
  _BOOL4 v48;
  _BOOL4 v50;
  _BOOL4 v52;
  _BOOL4 v54;
  _BOOL4 v56;
  _BOOL4 v58;
  _BOOL4 v60;
  _BOOL4 v62;
  _BOOL4 v64;
  _BOOL4 v66;
  _BOOL4 v68;
  _BOOL4 v70;
  _BOOL4 v72;
  _BOOL4 v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  BOOL v80;
  int v81;
  int v82;
  int v83;
  char Param;
  char v85;
  unsigned __int8 *v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  char v92;
  char v93;
  unsigned __int8 *v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  char v99;
  char v100;
  int v101;
  int v102;
  int v103;
  int v104;
  char v105;
  char v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  const std::string::value_type *v111;
  size_t v112;
  char v113;
  char v114;
  uint64_t v115;
  __int128 v116;
  const std::string::value_type *v117;
  size_t v118;
  char v119;
  char v120;
  uint64_t v121;
  __int128 v122;
  const std::string::value_type *v123;
  size_t v124;
  const std::string::value_type *v125;
  size_t v126;
  char v127;
  char v128;
  const cricket::Codec *v129;
  const cricket::Codec *v130;
  void (**v131)(const cricket::Codec *);
  _QWORD *v132;
  _QWORD *v133;
  void *v134;
  _BOOL4 v135;
  _BOOL4 v136;
  _BOOL4 v137;
  _BOOL4 v138;
  _BOOL4 v139;
  _BOOL4 v140;
  _BOOL4 v141;
  _BOOL4 v142;
  _BOOL4 v143;
  _BOOL4 v144;
  _BOOL4 v145;
  _BOOL4 v146;
  _BOOL4 v147;
  _BOOL4 v148;
  _BOOL4 v149;
  _BOOL4 v150;
  _BOOL4 v153;
  _BOOL4 v155;
  _BOOL4 v157;
  _BOOL4 v159;
  void *v161[2];
  void *__p[2];
  int v163;
  __int128 v164;
  uint64_t v165;
  const void *v166[4];
  _DWORD *v167[2];
  uint64_t v168;

  v17 = operator new();
  v18 = (uint64_t *)v17;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 128) = 0u;
  *(_OWORD *)(v17 + 144) = 0u;
  *(_OWORD *)(v17 + 160) = 0u;
  *(_OWORD *)(v17 + 176) = 0u;
  *(_OWORD *)(v17 + 192) = 0u;
  *(_OWORD *)(v17 + 208) = 0u;
  *(_OWORD *)(v17 + 224) = 0u;
  *(_OWORD *)(v17 + 240) = 0u;
  *(_OWORD *)(v17 + 256) = 0u;
  *(_OWORD *)(v17 + 272) = 0u;
  *(_OWORD *)(v17 + 288) = 0u;
  *(_QWORD *)v17 = &unk_24C0B6E20;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  *(_DWORD *)(v17 + 31) = 0;
  *(_DWORD *)(v17 + 36) = -1;
  *(_BYTE *)(v17 + 63) = 2;
  if (v17 + 40 <= (unint64_t)"AS" && v17 + 42 > (unint64_t)"AS")
  {
LABEL_363:
    __break(1u);
    goto LABEL_364;
  }
  strcpy((char *)(v17 + 40), "AS");
  *(_QWORD *)(v17 + 72) = 0;
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 64) = 0;
  *(_BYTE *)(v17 + 88) = 0;
  *(_QWORD *)(v17 + 104) = 0;
  *(_QWORD *)(v17 + 112) = 0;
  *(_QWORD *)(v17 + 96) = 0;
  *(_BYTE *)(v17 + 120) = 0;
  *(_QWORD *)(v17 + 124) = 0;
  *(_QWORD *)(v17 + 140) = 0;
  *(_QWORD *)(v17 + 132) = 0;
  *(_DWORD *)(v17 + 148) = 0;
  *(_BYTE *)(v17 + 192) = 0;
  *(_WORD *)(v17 + 184) = 0;
  *(_DWORD *)(v17 + 188) = 0;
  *(_QWORD *)(v17 + 160) = 0;
  *(_QWORD *)(v17 + 168) = 0;
  *(_QWORD *)(v17 + 152) = &unk_24C0ACDA0;
  *(_DWORD *)(v17 + 176) = 0;
  *(_OWORD *)(v17 + 208) = 0uLL;
  *(_OWORD *)(v17 + 224) = 0uLL;
  *(_OWORD *)(v17 + 240) = 0uLL;
  *(_OWORD *)(v17 + 256) = 0uLL;
  *(_OWORD *)(v17 + 272) = 0uLL;
  *(_OWORD *)(v17 + 288) = 0uLL;
  v19 = &unk_24C0B6EA0;
  if (!a4)
    v19 = &unk_24C0B6DA0;
  *(_QWORD *)v17 = v19;
  *(_DWORD *)(v17 + 200) = 0;
  webrtc::ParseContent(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, v17, a13, a14, a15);
  if (!v20)
  {
    *a1 = 0;
    (*(void (**)(uint64_t *))(*v18 + 8))(v18);
    return;
  }
  *(_OWORD *)v161 = 0u;
  *(_OWORD *)__p = 0u;
  v163 = 1065353216;
  v22 = *a8;
  v21 = a8[1];
  if (*a8 != v21)
  {
    v23 = ((unint64_t)((char *)v21 - (char *)v22) >> 2) + 1;
    do
    {
      LODWORD(v166[0]) = 0;
      v24 = *v22++;
      LODWORD(v166[0]) = v24;
      v167[0] = v166;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v161, (int *)v166, (uint64_t)&std::piecewise_construct, v167)+ 5) = v23--;
    }
    while (v22 != v21);
  }
  v25 = v18[35];
  v26 = v18[36];
  v27 = v26 - v25;
  if (v26 == v25)
  {
    v28 = 0;
    v30 = 0;
    goto LABEL_16;
  }
  if (0x84BDA12F684BDA13 * (v27 >> 3) >= 0x12F684BDA12F685)
LABEL_364:
    abort();
  v28 = (const cricket::Codec *)operator new(v27);
  v29 = 0;
  do
  {
    cricket::Codec::Codec((const cricket::Codec *)((char *)v28 + v29), (const cricket::Codec *)(v25 + v29));
    v29 += 216;
  }
  while (v25 + v29 != v26);
  v30 = (const cricket::Codec *)((char *)v28 + v29);
LABEL_16:
  v31 = 126 - 2 * __clz(0x84BDA12F684BDA13 * ((v30 - v28) >> 3));
  v167[0] = v161;
  if (v30 == v28)
    v32 = 0;
  else
    v32 = v31;
  std::__introsort<std::_ClassicAlgPolicy,webrtc::ParseContentDescription(std::string_view,cricket::MediaType,int,std::string_view,std::vector<int> const&,unsigned long *,std::string *,BOOL *,int *,cricket::TransportDescription *,std::vector<std::unique_ptr<webrtc::JsepIceCandidate>> *,webrtc::SdpParseError *)::$_0 &,cricket::Codec *,false>((uint64_t)v28, (unint64_t)v30, (uint64_t *)v167, v32, 1);
  if (v30 == v28)
  {
    std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>(v18 + 35, v28, v28, 0x84BDA12F684BDA13 * ((v30 - v28) >> 3));
    *a1 = v18;
    if (v28)
      goto LABEL_357;
    goto LABEL_358;
  }
  v34 = &v164 <= (__int128 *)"93" && (char *)&v164 + 2 > "93";
  v137 = v34;
  v36 = &v164 <= (__int128 *)"SRST" && (char *)&v164 + 4 > "SRST";
  v135 = v36;
  v38 = &v164 <= (__int128 *)"0" && (char *)&v164 + 1 > "0";
  v145 = v38;
  v40 = &v164 <= (__int128 *)"5" && (char *)&v164 + 1 > "5";
  v143 = v40;
  v42 = &v164 <= (__int128 *)"0" && (char *)&v164 + 1 > "0";
  v141 = v42;
  v44 = &v164 <= (__int128 *)"0" && (char *)&v164 + 1 > "0";
  v139 = v44;
  v46 = &v164 <= (__int128 *)"0" && (char *)&v164 + 1 > "0";
  v149 = v46;
  v48 = v166 <= (const void **)"level-id" && &v166[1] > (const void **)"level-id";
  v148 = v48;
  v50 = v166 <= (const void **)"level-id" && &v166[1] > (const void **)"level-id";
  v138 = v50;
  v52 = v166 <= (const void **)"tx-mode" && (char *)v166 + 7 > "tx-mode";
  v147 = v52;
  v54 = v166 <= (const void **)"tx-mode" && (char *)v166 + 7 > "tx-mode";
  v136 = v54;
  v56 = v166 <= (const void **)"profile" && (char *)v166 + 7 > "profile";
  v159 = v56;
  v58 = v166 <= (const void **)"profile" && (char *)v166 + 7 > "profile";
  v146 = v58;
  v60 = v166 <= (const void **)"level-idx" && (char *)&v166[1] + 1 > "level-idx";
  v157 = v60;
  v62 = v166 <= (const void **)"level-idx" && (char *)&v166[1] + 1 > "level-idx";
  v144 = v62;
  v64 = v166 <= (const void **)"tier" && (char *)v166 + 4 > "tier";
  v155 = v64;
  v66 = v166 <= (const void **)"tier" && (char *)v166 + 4 > "tier";
  v142 = v66;
  v68 = v166 <= (const void **)"packetization-mode" && (char *)&v166[2] + 2 > "packetization-mode";
  v153 = v68;
  v70 = v166 <= (const void **)"packetization-mode" && (char *)&v166[2] + 2 > "packetization-mode";
  v140 = v70;
  v72 = v166 <= (const void **)"profile-id" && (char *)&v166[1] + 2 > "profile-id";
  v74 = v166 <= (const void **)"profile-id" && (char *)&v166[1] + 2 > "profile-id";
  v150 = v74;
  v75 = (uint64_t)v28;
  do
  {
    while (1)
    {
      v167[0] = 0;
      v167[1] = 0;
      v168 = 0;
      v76 = (unsigned __int8 *)(v75 + 16);
      v77 = *(unsigned __int8 *)(v75 + 39);
      v78 = (unsigned __int8 *)(v75 + 16);
      v79 = v77;
      if (*(char *)(v75 + 39) < 0)
      {
        v79 = *(_QWORD *)(v75 + 24);
        if (v79 < 0)
          goto LABEL_363;
        v78 = *(unsigned __int8 **)v76;
        v80 = v79 && v78 == 0;
        if (v80)
          goto LABEL_363;
      }
      if (v79 == 3)
      {
        v81 = *v78;
        if (v81 == 86)
          goto LABEL_161;
        if ((v81 - 65) < 0x1A)
          LOBYTE(v81) = v81 + 32;
        if (v81 == 118)
        {
LABEL_161:
          v82 = v78[1];
          if (v82 == 80)
            goto LABEL_168;
          if ((v82 - 65) < 0x1A)
            LOBYTE(v82) = v82 + 32;
          if (v82 == 112)
          {
LABEL_168:
            v83 = v78[2];
            if (v83 == 57)
              goto LABEL_169;
            if ((v83 - 65) < 0x1A)
              LOBYTE(v83) = v83 + 32;
            if (v83 == 57)
            {
LABEL_169:
              HIBYTE(v166[2]) = 10;
              if (v72)
                goto LABEL_363;
              strcpy((char *)v166, "profile-id");
              Param = cricket::Codec::GetParam(v75, v166, (uint64_t)v167);
              v85 = Param;
              if (SHIBYTE(v166[2]) < 0)
              {
                operator delete((void *)v166[0]);
                if ((v85 & 1) != 0)
                  goto LABEL_148;
              }
              else if ((Param & 1) != 0)
              {
                goto LABEL_148;
              }
              HIBYTE(v166[2]) = 10;
              if (v150)
                goto LABEL_363;
              strcpy((char *)v166, "profile-id");
              HIBYTE(v165) = 1;
              if (v149)
                goto LABEL_363;
              goto LABEL_313;
            }
          }
        }
      }
      v86 = (unsigned __int8 *)(v75 + 16);
      v87 = *(unsigned __int8 *)(v75 + 39);
      if ((v77 & 0x80) != 0)
      {
        v87 = *(_QWORD *)(v75 + 24);
        if (v87 < 0)
          goto LABEL_363;
        v86 = *(unsigned __int8 **)v76;
        if (v87)
        {
          if (!v86)
            goto LABEL_363;
        }
      }
      if (v87 == 4)
      {
        v88 = *v86;
        if (v88 == 72)
          goto LABEL_182;
        if ((v88 - 65) < 0x1A)
          LOBYTE(v88) = v88 + 32;
        if (v88 == 104)
        {
LABEL_182:
          v89 = v86[1];
          if (v89 == 50)
            goto LABEL_193;
          if ((v89 - 65) < 0x1A)
            LOBYTE(v89) = v89 + 32;
          if (v89 == 50)
          {
LABEL_193:
            v90 = v86[2];
            if (v90 == 54)
              goto LABEL_367;
            if ((v90 - 65) < 0x1A)
              LOBYTE(v90) = v90 + 32;
            if (v90 == 54)
            {
LABEL_367:
              v91 = v86[3];
              if (v91 == 52)
                goto LABEL_194;
              if ((v91 - 65) < 0x1A)
                LOBYTE(v91) = v91 + 32;
              if (v91 == 52)
              {
LABEL_194:
                HIBYTE(v166[2]) = 18;
                if (v153)
                  goto LABEL_363;
                strcpy((char *)v166, "packetization-mode");
                v92 = cricket::Codec::GetParam(v75, v166, (uint64_t)v167);
                v93 = v92;
                if (SHIBYTE(v166[2]) < 0)
                {
                  operator delete((void *)v166[0]);
                  if ((v93 & 1) != 0)
                    goto LABEL_148;
                }
                else if ((v92 & 1) != 0)
                {
                  goto LABEL_148;
                }
                HIBYTE(v166[2]) = 18;
                if (v140)
                  goto LABEL_363;
                strcpy((char *)v166, "packetization-mode");
                HIBYTE(v165) = 1;
                if (v139)
                  goto LABEL_363;
                goto LABEL_313;
              }
            }
          }
        }
      }
      v94 = (unsigned __int8 *)(v75 + 16);
      v95 = *(unsigned __int8 *)(v75 + 39);
      if ((v77 & 0x80) != 0)
      {
        v95 = *(_QWORD *)(v75 + 24);
        if (v95 < 0)
          goto LABEL_363;
        v94 = *(unsigned __int8 **)v76;
        if (v95)
        {
          if (!v94)
            goto LABEL_363;
        }
      }
      if (v95 != 3)
        goto LABEL_222;
      v96 = *v94;
      if (v96 != 65)
      {
        if ((v96 - 65) < 0x1A)
          LOBYTE(v96) = v96 + 32;
        if (v96 != 97)
          goto LABEL_222;
      }
      v97 = v94[1];
      if (v97 != 86)
      {
        if ((v97 - 65) < 0x1A)
          LOBYTE(v97) = v97 + 32;
        if (v97 != 118)
          goto LABEL_222;
      }
      v98 = v94[2];
      if (v98 != 49)
      {
        if ((v98 - 65) < 0x1A)
          LOBYTE(v98) = v98 + 32;
        if (v98 != 49)
        {
LABEL_222:
          if ((v77 & 0x80) != 0)
          {
            v77 = *(_QWORD *)(v75 + 24);
            if (v77 < 0)
              goto LABEL_363;
            v76 = *(unsigned __int8 **)v76;
            if (v77)
            {
              if (!v76)
                goto LABEL_363;
            }
          }
          if (v77 != 4)
            goto LABEL_148;
          v101 = *v76;
          if (v101 != 72)
          {
            if ((v101 - 65) < 0x1A)
              LOBYTE(v101) = v101 + 32;
            if (v101 != 104)
              goto LABEL_148;
          }
          v102 = v76[1];
          if (v102 != 50)
          {
            if ((v102 - 65) < 0x1A)
              LOBYTE(v102) = v102 + 32;
            if (v102 != 50)
              goto LABEL_148;
          }
          v103 = v76[2];
          if (v103 != 54)
          {
            if ((v103 - 65) < 0x1A)
              LOBYTE(v103) = v103 + 32;
            if (v103 != 54)
              goto LABEL_148;
          }
          v104 = v76[3];
          if (v104 != 53)
          {
            if ((v104 - 65) < 0x1A)
              LOBYTE(v104) = v104 + 32;
            if (v104 != 53)
              goto LABEL_148;
          }
          HIBYTE(v166[2]) = 8;
          if (v148)
            goto LABEL_363;
          strcpy((char *)v166, "level-id");
          v105 = cricket::Codec::GetParam(v75, v166, (uint64_t)v167);
          v106 = v105;
          if (SHIBYTE(v166[2]) < 0)
          {
            operator delete((void *)v166[0]);
            if ((v106 & 1) == 0)
              goto LABEL_265;
            goto LABEL_338;
          }
          if ((v105 & 1) != 0)
            goto LABEL_338;
LABEL_265:
          HIBYTE(v166[2]) = 8;
          if (v138)
            goto LABEL_363;
          strcpy((char *)v166, "level-id");
          HIBYTE(v165) = 2;
          if (v137)
            goto LABEL_363;
          strcpy((char *)&v164, "93");
          v109 = std::map<std::string,std::string>::operator[](v75 + 168, (uint64_t)v166);
          if ((__int128 *)v109 != &v164)
          {
            if ((*(char *)(v109 + 23) & 0x80000000) == 0)
            {
              if ((v165 & 0x8000000000000000) == 0)
              {
                v110 = v164;
                *(_QWORD *)(v109 + 16) = v165;
                *(_OWORD *)v109 = v110;
                if (SHIBYTE(v165) < 0)
                  goto LABEL_271;
LABEL_337:
                if ((SHIBYTE(v166[2]) & 0x80000000) == 0)
                {
LABEL_338:
                  HIBYTE(v166[2]) = 7;
                  if (v147)
                    goto LABEL_363;
LABEL_339:
                  strcpy((char *)v166, "tx-mode");
                  v127 = cricket::Codec::GetParam(v75, v166, (uint64_t)v167);
                  v128 = v127;
                  if (SHIBYTE(v166[2]) < 0)
                  {
                    operator delete((void *)v166[0]);
                    if ((v128 & 1) != 0)
                      goto LABEL_148;
                  }
                  else if ((v127 & 1) != 0)
                  {
                    goto LABEL_148;
                  }
                  HIBYTE(v166[2]) = 7;
                  if (v136)
                    goto LABEL_363;
                  strcpy((char *)v166, "tx-mode");
                  HIBYTE(v165) = 4;
                  if (v135)
                    goto LABEL_363;
                  strcpy((char *)&v164, "SRST");
                  v121 = std::map<std::string,std::string>::operator[](v75 + 168, (uint64_t)v166);
                  if ((__int128 *)v121 == &v164)
                    goto LABEL_346;
LABEL_314:
                  if (*(char *)(v121 + 23) < 0)
                  {
                    if (v165 >= 0)
                      v123 = (const std::string::value_type *)&v164;
                    else
                      v123 = (const std::string::value_type *)v164;
                    if (v165 >= 0)
                      v124 = HIBYTE(v165);
                    else
                      v124 = *((_QWORD *)&v164 + 1);
                    std::string::__assign_no_alias<false>((std::string *)v121, v123, v124);
                  }
                  else if (v165 < 0)
                  {
                    std::string::__assign_no_alias<true>((_QWORD *)v121, (char *)v164, *((size_t *)&v164 + 1));
                  }
                  else
                  {
                    v122 = v164;
                    *(_QWORD *)(v121 + 16) = v165;
                    *(_OWORD *)v121 = v122;
                  }
                  goto LABEL_346;
                }
LABEL_272:
                operator delete((void *)v166[0]);
                HIBYTE(v166[2]) = 7;
                if (v147)
                  goto LABEL_363;
                goto LABEL_339;
              }
              std::string::__assign_no_alias<true>((_QWORD *)v109, (char *)v164, *((size_t *)&v164 + 1));
              if ((SHIBYTE(v165) & 0x80000000) == 0)
                goto LABEL_337;
LABEL_271:
              operator delete((void *)v164);
              if ((SHIBYTE(v166[2]) & 0x80000000) == 0)
                goto LABEL_338;
              goto LABEL_272;
            }
            if (v165 >= 0)
              v125 = (const std::string::value_type *)&v164;
            else
              v125 = (const std::string::value_type *)v164;
            if (v165 >= 0)
              v126 = HIBYTE(v165);
            else
              v126 = *((_QWORD *)&v164 + 1);
            std::string::__assign_no_alias<false>((std::string *)v109, v125, v126);
          }
          if ((SHIBYTE(v165) & 0x80000000) == 0)
            goto LABEL_337;
          goto LABEL_271;
        }
      }
      HIBYTE(v166[2]) = 7;
      if (v159)
        goto LABEL_363;
      strcpy((char *)v166, "profile");
      v99 = cricket::Codec::GetParam(v75, v166, (uint64_t)v167);
      v100 = v99;
      if (SHIBYTE(v166[2]) < 0)
      {
        operator delete((void *)v166[0]);
        if ((v100 & 1) != 0)
          goto LABEL_283;
      }
      else if ((v99 & 1) != 0)
      {
        goto LABEL_283;
      }
      HIBYTE(v166[2]) = 7;
      if (v146)
        goto LABEL_363;
      strcpy((char *)v166, "profile");
      HIBYTE(v165) = 1;
      if (v145)
        goto LABEL_363;
      LOWORD(v164) = 48;
      v107 = std::map<std::string,std::string>::operator[](v75 + 168, (uint64_t)v166);
      if ((__int128 *)v107 == &v164)
        goto LABEL_281;
      if (*(char *)(v107 + 23) < 0)
      {
        if (v165 >= 0)
          v111 = (const std::string::value_type *)&v164;
        else
          v111 = (const std::string::value_type *)v164;
        if (v165 >= 0)
          v112 = HIBYTE(v165);
        else
          v112 = *((_QWORD *)&v164 + 1);
        std::string::__assign_no_alias<false>((std::string *)v107, v111, v112);
LABEL_281:
        if (SHIBYTE(v165) < 0)
          goto LABEL_257;
        goto LABEL_282;
      }
      if (v165 < 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)v107, (char *)v164, *((size_t *)&v164 + 1));
        if (SHIBYTE(v165) < 0)
        {
LABEL_257:
          operator delete((void *)v164);
          if (SHIBYTE(v166[2]) < 0)
            goto LABEL_258;
          goto LABEL_283;
        }
      }
      else
      {
        v108 = v164;
        *(_QWORD *)(v107 + 16) = v165;
        *(_OWORD *)v107 = v108;
        if (SHIBYTE(v165) < 0)
          goto LABEL_257;
      }
LABEL_282:
      if (SHIBYTE(v166[2]) < 0)
      {
LABEL_258:
        operator delete((void *)v166[0]);
        HIBYTE(v166[2]) = 9;
        if (v157)
          goto LABEL_363;
        goto LABEL_284;
      }
LABEL_283:
      HIBYTE(v166[2]) = 9;
      if (v157)
        goto LABEL_363;
LABEL_284:
      v166[0] = *(const void **)"level-idx";
      LOWORD(v166[1]) = cricket::kAv1FmtpLevelIdx[8];
      v113 = cricket::Codec::GetParam(v75, v166, (uint64_t)v167);
      v114 = v113;
      if (SHIBYTE(v166[2]) < 0)
      {
        operator delete((void *)v166[0]);
        if ((v114 & 1) != 0)
          goto LABEL_306;
      }
      else if ((v113 & 1) != 0)
      {
        goto LABEL_306;
      }
      HIBYTE(v166[2]) = 9;
      if (v144)
        goto LABEL_363;
      v166[0] = *(const void **)"level-idx";
      LOWORD(v166[1]) = cricket::kAv1FmtpLevelIdx[8];
      HIBYTE(v165) = 1;
      if (v143)
        goto LABEL_363;
      LOWORD(v164) = 53;
      v115 = std::map<std::string,std::string>::operator[](v75 + 168, (uint64_t)v166);
      if ((__int128 *)v115 == &v164)
        goto LABEL_304;
      if (*(char *)(v115 + 23) < 0)
      {
        if (v165 >= 0)
          v117 = (const std::string::value_type *)&v164;
        else
          v117 = (const std::string::value_type *)v164;
        if (v165 >= 0)
          v118 = HIBYTE(v165);
        else
          v118 = *((_QWORD *)&v164 + 1);
        std::string::__assign_no_alias<false>((std::string *)v115, v117, v118);
LABEL_304:
        if (SHIBYTE(v165) < 0)
          goto LABEL_294;
        goto LABEL_305;
      }
      if (v165 < 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)v115, (char *)v164, *((size_t *)&v164 + 1));
        if (SHIBYTE(v165) < 0)
        {
LABEL_294:
          operator delete((void *)v164);
          if ((SHIBYTE(v166[2]) & 0x80000000) == 0)
            goto LABEL_306;
          goto LABEL_295;
        }
      }
      else
      {
        v116 = v164;
        *(_QWORD *)(v115 + 16) = v165;
        *(_OWORD *)v115 = v116;
        if (SHIBYTE(v165) < 0)
          goto LABEL_294;
      }
LABEL_305:
      if ((SHIBYTE(v166[2]) & 0x80000000) == 0)
      {
LABEL_306:
        HIBYTE(v166[2]) = 4;
        if (v155)
          goto LABEL_363;
        goto LABEL_307;
      }
LABEL_295:
      operator delete((void *)v166[0]);
      HIBYTE(v166[2]) = 4;
      if (v155)
        goto LABEL_363;
LABEL_307:
      strcpy((char *)v166, "tier");
      v119 = cricket::Codec::GetParam(v75, v166, (uint64_t)v167);
      v120 = v119;
      if (SHIBYTE(v166[2]) < 0)
      {
        operator delete((void *)v166[0]);
        if ((v120 & 1) != 0)
          goto LABEL_148;
      }
      else if ((v119 & 1) != 0)
      {
        goto LABEL_148;
      }
      HIBYTE(v166[2]) = 4;
      if (v142)
        goto LABEL_363;
      strcpy((char *)v166, "tier");
      HIBYTE(v165) = 1;
      if (v141)
        goto LABEL_363;
LABEL_313:
      LOWORD(v164) = 48;
      v121 = std::map<std::string,std::string>::operator[](v75 + 168, (uint64_t)v166);
      if ((__int128 *)v121 != &v164)
        goto LABEL_314;
LABEL_346:
      if (SHIBYTE(v165) < 0)
      {
        operator delete((void *)v164);
        if ((SHIBYTE(v166[2]) & 0x80000000) == 0)
          goto LABEL_148;
      }
      else if ((SHIBYTE(v166[2]) & 0x80000000) == 0)
      {
        goto LABEL_148;
      }
      operator delete((void *)v166[0]);
LABEL_148:
      if (SHIBYTE(v168) < 0)
        break;
      v75 += 216;
      if ((const cricket::Codec *)v75 == v30)
        goto LABEL_351;
    }
    operator delete(v167[0]);
    v75 += 216;
  }
  while ((const cricket::Codec *)v75 != v30);
LABEL_351:
  std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>(v18 + 35, v28, v30, 0x84BDA12F684BDA13 * ((v30 - v28) >> 3));
  *a1 = v18;
  if (v28)
  {
    v129 = (const cricket::Codec *)((char *)v30 - 216);
    v130 = (const cricket::Codec *)((char *)v30 - 216);
    do
    {
      v131 = *(void (***)(const cricket::Codec *))v130;
      v130 = (const cricket::Codec *)((char *)v130 - 216);
      (*v131)(v129);
      v80 = v129 == v28;
      v129 = v130;
    }
    while (!v80);
LABEL_357:
    operator delete(v28);
  }
LABEL_358:
  v132 = __p[0];
  if (__p[0])
  {
    do
    {
      v133 = (_QWORD *)*v132;
      operator delete(v132);
      v132 = v133;
    }
    while (v133);
  }
  v134 = v161[0];
  v161[0] = 0;
  if (v134)
    operator delete(v134);
}

void webrtc::ParseContent(uint64_t a1, unint64_t a2, unsigned int a3, int a4, char *a5, uint64_t a6, __int32 **a7, uint64_t *a8, uint64_t a9, _BYTE *a10, int *a11, uint64_t a12, uint64_t a13, _QWORD *a14, unint64_t a15)
{
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  size_t v25;
  unsigned __int8 *v26;
  int v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  int v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  std::string *v35;
  size_t v36;
  void **v37;
  std::string *v38;
  size_t v39;
  char v40;
  std::string *v41;
  std::string::size_type v42;
  int data_low;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string *v52;
  std::string::size_type v53;
  unint64_t v54;
  size_t v55;
  unint64_t v56;
  uint64_t v57;
  size_t v58;
  char *v59;
  std::string *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  std::string *v64;
  std::string *v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string::size_type v68;
  std::string *v69;
  char *v70;
  std::string::size_type v71;
  std::string *v72;
  size_t v73;
  std::string::size_type v74;
  char v75;
  size_t v76;
  int v77;
  int v78;
  std::string::size_type *v79;
  std::string::size_type v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  int v89;
  int v90;
  size_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  int v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  BOOL v104;
  size_t v106;
  int v107;
  int v108;
  std::string::size_type *v109;
  size_t v110;
  int v111;
  int v112;
  _BYTE *v113;
  std::string *v114;
  size_t v115;
  int v116;
  int v117;
  size_t v118;
  std::string *v119;
  int v120;
  int v121;
  _BOOL4 IsDtlsSctp;
  uint64_t v123;
  char v124;
  std::string::size_type v125;
  std::string *v126;
  char Value;
  size_t v128;
  void **p_src;
  std::string::size_type v130;
  std::string *v131;
  unsigned __int8 **v132;
  std::string::size_type v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unint64_t v138;
  std::string *v139;
  uint64_t v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  unsigned int v143;
  std::string::size_type v144;
  _BYTE *p_s2;
  std::string *v146;
  uint64_t v147;
  uint64_t v148;
  std::string *v149;
  uint64_t *v150;
  uint64_t *v151;
  size_t v152;
  const void *v153;
  _QWORD *v154;
  size_t v155;
  size_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  std::string *v167;
  size_t v168;
  int v169;
  const cricket::Codec *v170;
  const cricket::Codec *v171;
  const cricket::Codec *v172;
  std::string *v173;
  uint64_t v174;
  std::string::value_type v175;
  __int128 v176;
  const std::string::value_type *v177;
  size_t v178;
  std::string *v179;
  std::string **v180;
  unsigned __int8 *v181;
  size_t v182;
  void **v183;
  const char *v184;
  size_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  size_t v194;
  void **v195;
  size_t v196;
  std::string *v197;
  size_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  std::string *v207;
  std::string *v208;
  std::string *v209;
  std::string::pointer v210;
  __int32 *v211;
  __int32 *v212;
  unsigned int v213;
  const cricket::Codec *v214;
  const cricket::Codec *v215;
  int v216;
  const cricket::Codec *v217;
  char *v219;
  size_t v220;
  size_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char **v227;
  unsigned int v228;
  std::string::size_type v229;
  uint64_t v230;
  std::string *v231;
  std::string *v232;
  char v233;
  __int32 *size;
  __int32 *v235;
  __int32 v236;
  __int32 *v237;
  __int32 *v238;
  __int32 *v239;
  std::string::size_type v240;
  std::string::size_type *p_size;
  std::string::size_type *v242;
  __int32 v243;
  _DWORD *v244;
  std::string::size_type v245;
  uint64_t v246;
  _BYTE *v247;
  uint64_t v248;
  _BYTE *v249;
  int v250;
  uint64_t v251;
  int v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  _DWORD *v256;
  uint64_t v257;
  char *v258;
  std::string::size_type v259;
  std::string::size_type v260;
  char *v261;
  int v262;
  std::string::size_type v263;
  int v264;
  char *v265;
  int v266;
  std::string::size_type v267;
  int v268;
  __int128 *v269;
  __int128 *v270;
  void *v271;
  char *v272;
  char *v273;
  void **v274;
  std::string *v275;
  std::string *v276;
  cricket::StreamParams *v277;
  std::string *v278;
  void *v279;
  void **n;
  std::string *v281;
  void *v282;
  std::string *v283;
  std::string *v284;
  std::string *i;
  std::string *v286;
  std::string::pointer data;
  uint64_t v288;
  std::string::size_type v289;
  std::string::size_type v290;
  std::string::size_type v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned __int8 *v298;
  uint64_t v299;
  std::string *v300;
  std::string *v301;
  size_t v302;
  uint64_t v303;
  std::string::size_type v304;
  int v305;
  uint64_t v306;
  std::string *v307;
  std::string::size_type v308;
  int v309;
  std::string *v310;
  std::string::size_type v311;
  uint64_t j;
  std::string::size_type v313;
  std::string *v314;
  std::string *v315;
  size_t v316;
  uint64_t v317;
  std::string::size_type v318;
  int v319;
  uint64_t v320;
  std::string *v321;
  std::string::size_type v322;
  int v323;
  std::string *v324;
  std::string::size_type v326;
  void **v327;
  void **v328;
  void *v329;
  void **v330;
  void *v331;
  void **v332;
  void **v333;
  void **v334;
  void **v335;
  void **v336;
  void *v337;
  void **v338;
  void *v339;
  void **v340;
  void **v341;
  void **v342;
  std::string::size_type v343;
  std::string::size_type v344;
  void *v345;
  std::string::size_type v346;
  std::string::size_type v347;
  void *v348;
  std::string *v349;
  std::string::size_type *v350;
  std::string::size_type *k;
  std::string::size_type v352;
  std::string::size_type v353;
  std::string *v354;
  BOOL v355;
  BOOL v356;
  std::string::size_type v357;
  std::string *v358;
  std::string::size_type v359;
  const void **v360;
  std::string::size_type v361;
  const void *v362;
  std::string::size_type v363;
  size_t v364;
  int v365;
  std::string *v366;
  std::string::size_type v367;
  size_t v368;
  int v369;
  char *v370;
  std::string *v371;
  __int128 v372;
  uint64_t *v373;
  std::string::size_type v374;
  std::string::size_type v375;
  std::string *v376;
  std::string::size_type *v377;
  std::string::size_type v378;
  const void *v379;
  _QWORD *v380;
  std::string::size_type v381;
  size_t v383;
  int v384;
  const cricket::RidDescription *v385;
  std::string::size_type v386;
  void *v387;
  std::string::size_type v388;
  std::string::size_type v389;
  uint64_t v390;
  std::string::size_type v391;
  void *v392;
  std::string *v393;
  std::string::size_type *v394;
  size_t v395;
  const void *v396;
  _QWORD *v397;
  size_t v398;
  size_t v400;
  int v401;
  const cricket::RidDescription *v402;
  uint64_t v403;
  const cricket::RidDescription *v404;
  std::string *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  char *v414;
  std::string::size_type v415;
  std::string *v416;
  std::string::size_type v417;
  std::string::size_type v418;
  size_t v419;
  std::string *v420;
  int v421;
  uint64_t v422;
  _BOOL4 v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  std::string *v433;
  std::string *v434;
  std::string *v435;
  char v436;
  std::string::size_type v437;
  cricket::StreamParams *v438;
  std::string *v439;
  int v440;
  std::string::size_type v441;
  std::string *v442;
  char *v443;
  unsigned __int8 *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  __int128 v451;
  std::string *v452;
  std::string *v453;
  char v454;
  __int128 v455;
  std::string **v456;
  const std::string::value_type *v457;
  size_t v458;
  __int128 v459;
  std::string::size_type v460;
  std::string *p_sz;
  size_t v462;
  std::string::size_type v463;
  const std::string::value_type *v464;
  size_t v465;
  cricket::StreamParams *v466;
  std::string *m;
  __int128 v468;
  std::string *v469;
  std::string::size_type *v470;
  uint64_t v471;
  uint64_t v472;
  std::string *v473;
  char *v474;
  __int32 *v475;
  cricket::StreamParams *v476;
  std::string *v477;
  __int32 v478;
  _BYTE *v479;
  _BYTE *v480;
  int64_t v481;
  char *v482;
  char *v483;
  std::string *v484;
  __int32 *v485;
  __int32 *v486;
  __int32 *v487;
  unint64_t v488;
  unint64_t v489;
  __int128 v490;
  _BYTE *v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  uint64_t v497;
  char *v498;
  std::string *v499;
  __int128 v500;
  _BYTE *v501;
  _BYTE *v502;
  int64_t v503;
  char *v504;
  char *v505;
  char *v506;
  char *v507;
  char *v508;
  _BYTE *v509;
  __int128 v510;
  char *v511;
  void *v512;
  cricket::StreamParams *v513;
  std::string *v514;
  _QWORD *v515;
  std::string *v516;
  uint64_t v517;
  uint64_t v518;
  int64_t v519;
  const cricket::Codec *v520;
  uint64_t v521;
  uint64_t v522;
  const cricket::Codec *v523;
  uint64_t v524;
  const cricket::Codec *v525;
  const cricket::Codec *v526;
  const cricket::Codec *v527;
  void (**v528)(const cricket::Codec *);
  const cricket::Codec *v529;
  const cricket::Codec *v530;
  std::string::size_type v531;
  size_t v533;
  char *v534;
  uint64_t v535;
  uint64_t v536;
  char *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  void **p_data;
  std::string *v546;
  size_t v547;
  char *v548;
  std::string *v549;
  std::string *v550;
  uint64_t v551;
  std::string::size_type v552;
  std::string::size_type v553;
  const std::string::value_type *v554;
  std::string::size_type v556;
  const std::string::value_type *v557;
  uint64_t v558;
  std::string *v559;
  uint64_t *v560;
  std::string *v561;
  std::string::pointer v562;
  void *v563;
  size_t v564;
  void *v565;
  uint64_t v566;
  uint64_t v567;
  void (***v568)(void);
  void (**v569)(void);
  uint64_t v570;
  uint64_t v571;
  int64_t v572;
  unint64_t v573;
  char *v574;
  uint64_t v575;
  std::string *v576;
  uint64_t v577;
  uint64_t v578;
  __int128 v579;
  __int128 *v580;
  std::string *v581;
  __int128 v582;
  const cricket::Codec *v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  unint64_t v589;
  __int128 v590;
  std::string *v591;
  __int128 v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  char *v604;
  char *v605;
  uint64_t v606;
  size_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  size_t v611;
  char *v612;
  uint64_t v613;
  unint64_t v614;
  unint64_t v615;
  unint64_t v616;
  unint64_t v617;
  size_t __n;
  int __na;
  unint64_t v620;
  void *__s1;
  void *__s1a;
  std::string *__s1b;
  uint64_t *v626;
  unint64_t v627;
  std::string *__dst;
  _BOOL4 __dsta;
  _OWORD *v632;
  const std::string::value_type **v634;
  const std::string::value_type **v635;
  unint64_t v637;
  std::string *v638;
  size_t v639;
  unint64_t v640;
  std::string *v642;
  int v643;
  char *v644;
  void *v645[2];
  char v646;
  void *v647[2];
  char v648;
  void *v649[2];
  char v650;
  void *v651[2];
  char v652;
  std::string v653;
  _BYTE v654[24];
  int v655[2];
  size_t v656;
  char v657;
  void *v658[2];
  void *v659[4];
  std::string *v660;
  std::string *v661;
  uint64_t v662;
  std::string v663;
  void *v664;
  int v665[2];
  uint64_t v666;
  void *v667;
  size_t v668;
  uint64_t v669;
  void *v670;
  size_t v671;
  uint64_t v672;
  void *v673;
  char *v674;
  uint64_t v675;
  void *v676;
  void **v677;
  uint64_t v678;
  cricket::StreamParams *v679;
  std::string *v680;
  unint64_t v681;
  std::string::size_type __len[2];
  uint64_t v683;
  void *v684;
  std::string *v685;
  unint64_t v686;
  std::string v687;
  void *__s2;
  size_t v689;
  uint64_t v690;
  void *v691;
  std::string *v692;
  unint64_t v693;
  unsigned int v694;
  void *__src;
  size_t v696;
  size_t v697;
  std::string v698;
  std::string __sz;
  std::string __p[4];
  __int128 v701;
  _BYTE v702[40];
  uint64_t v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  char *v707;
  __int128 v708;
  __int128 v709;
  int v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  void *v714;
  uint64_t v715;
  uint64_t v716;
  int v717;
  __int16 v718;
  int v719;
  char v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  int v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  _QWORD v728[2];
  std::string::size_type v729[2];
  __int128 v730;
  std::string::size_type v731;
  __int128 v732;
  __int128 v733;
  std::string::size_type v734;
  char v735;
  std::string::size_type v736;
  __int128 v737;
  __int128 v738;
  uint64_t v739;
  __int128 v740;
  uint64_t v741;
  char v742;
  __int128 *v743;
  __int128 v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;

  v16 = a12;
  v747 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (a12)
    {
      v211 = *a7;
      v212 = a7[1];
      if (*a7 != v212)
      {
        do
        {
          v213 = *v211;
          v215 = *(const cricket::Codec **)(v16 + 280);
          v214 = *(const cricket::Codec **)(v16 + 288);
          if (v215 == v214)
          {
            v16 = a12;
            if (v213 > 0x12)
              goto LABEL_583;
          }
          else
          {
            while (1)
            {
              cricket::Codec::Codec((cricket::Codec *)__p, v215);
              v216 = HIDWORD(__p[0].__r_.__value_.__r.__words[1]);
              cricket::Codec::~Codec((cricket::Codec *)__p);
              if (v216 == v213)
                break;
              v215 = (const cricket::Codec *)((char *)v215 + 216);
              if (v215 == v214)
              {
                v215 = v214;
                break;
              }
            }
            v217 = v215;
            v16 = a12;
            v215 = *(const cricket::Codec **)(a12 + 288);
            if (v213 > 0x12 || v217 != v215)
              goto LABEL_583;
          }
          v219 = (&webrtc::kStaticPayloadAudioCodecs)[3 * v213];
          if (!v219)
            goto LABEL_1472;
          v220 = strlen((&webrtc::kStaticPayloadAudioCodecs)[3 * v213]);
          if (v220 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1452;
          v221 = v220;
          if (v220 > 0x16)
          {
            v223 = (v220 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v220 | 7) != 0x17)
              v223 = v220 | 7;
            v224 = v223 + 1;
            v222 = (char *)operator new(v223 + 1);
            *(_QWORD *)&v730 = v224 | 0x8000000000000000;
            v729[0] = (std::string::size_type)v222;
            v729[1] = v221;
          }
          else
          {
            BYTE7(v730) = v220;
            v222 = (char *)v729;
          }
          v225 = &v222[v221];
          if (v222 <= v219 && v225 > v219)
            goto LABEL_1472;
          if (v221)
            memmove(v222, v219, v221);
          *v225 = 0;
          v227 = &(&webrtc::kStaticPayloadAudioCodecs)[3 * v213];
          v228 = *((_DWORD *)v227 + 2);
          v229 = (std::string::size_type)v227[2];
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0B1418;
          LODWORD(__p[0].__r_.__value_.__r.__words[1]) = 0;
          HIDWORD(__p[0].__r_.__value_.__r.__words[1]) = v213;
          if (SBYTE7(v730) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[0].__r_.__value_.__r.__words[2], (const std::string::value_type *)v729[0], v729[1]);
            v230 = a12;
            v215 = *(const cricket::Codec **)(a12 + 288);
          }
          else
          {
            *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = *(_OWORD *)v729;
            __p[1].__r_.__value_.__l.__size_ = v730;
            v230 = a12;
          }
          __p[1].__r_.__value_.__r.__words[2] = v228;
          __p[2].__r_.__value_.__r.__words[0] = v229;
          __p[2].__r_.__value_.__s.__data_[8] = 0;
          __p[3].__r_.__value_.__s.__data_[8] = 0;
          __p[3].__r_.__value_.__r.__words[2] = 0;
          v702[24] = 0;
          LOBYTE(v704) = 0;
          v705 = 0uLL;
          *((_QWORD *)&v704 + 1) = &v705;
          v707 = 0;
          v706 = 0uLL;
          v16 = v230;
          if ((unint64_t)v215 >= *(_QWORD *)(v230 + 296))
          {
            *(_QWORD *)(v230 + 288) = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)(a12 + 280), (const cricket::Codec *)__p);
            cricket::Codec::~Codec((cricket::Codec *)__p);
            if ((SBYTE7(v730) & 0x80000000) == 0)
              goto LABEL_583;
          }
          else
          {
            if (!v215)
              goto LABEL_1472;
            cricket::Codec::Codec(v215, (const cricket::Codec *)__p);
            *(_QWORD *)(v16 + 288) = (char *)v215 + 216;
            cricket::Codec::~Codec((cricket::Codec *)__p);
            if ((SBYTE7(v730) & 0x80000000) == 0)
              goto LABEL_583;
          }
          operator delete((void *)v729[0]);
LABEL_583:
          ++v211;
        }
        while (v211 != v212);
      }
    }
  }
  v634 = (const std::string::value_type **)(a13 + 48);
  v635 = (const std::string::value_type **)(a13 + 24);
  v685 = 0;
  v684 = 0;
  v638 = (std::string *)(v16 + 128);
  v686 = 0;
  __len[1] = 0;
  __len[0] = 0;
  v683 = 0;
  v680 = 0;
  v679 = 0;
  v681 = 0;
  __dst = (std::string *)(v16 + 40);
  v677 = 0;
  v676 = 0;
  v678 = 0;
  v674 = 0;
  v673 = 0;
  v675 = 0;
  v671 = 0;
  v670 = 0;
  v672 = 0;
  v668 = 0;
  v667 = 0;
  v669 = 0;
  *(_QWORD *)v665 = 0;
  v664 = 0;
  v666 = 0;
  memset(&v663, 0, sizeof(v663));
  v661 = 0;
  v660 = 0;
  v662 = 0;
  memset(v659, 0, sizeof(v659));
  *(_OWORD *)v658 = 0u;
  v626 = (uint64_t *)(v16 + 280);
  v632 = (_OWORD *)(v16 + 164);
  v640 = (unint64_t)&unk_24C0ACDA0;
LABEL_3:
  v18 = a2;
LABEL_4:
  v19 = a1;
  do
  {
    while (1)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v20 = a8;
                        while (1)
                        {
                          v22 = *v20;
                          if (v18 >= *v20 + 2)
                          {
                            if (v18 <= v22)
                              goto LABEL_1472;
                            if (*(_BYTE *)(v19 + v22) == 109)
                            {
                              v23 = v22 + 1;
                              if (v18 <= v23)
                                goto LABEL_1472;
                              if (*(_BYTE *)(v19 + v23) == 61)
                                goto LABEL_617;
                            }
                          }
                          webrtc::GetLine((unint64_t)v655, v19, v18, v20);
                          if (!v657)
                          {
                            v206 = *v20;
                            if (*v20 < v18)
                            {
                              v654[23] = 17;
                              if (v654 > "Invalid SDP line." || &v654[17] <= "Invalid SDP line.")
                              {
                                strcpy(v654, "Invalid SDP line.");
                                webrtc::ParseFailed(v19, v18, v206, (__n128 *)v654, a15);
                                if ((v654[23] & 0x80000000) != 0)
                                  operator delete(*(void **)v654);
                                goto LABEL_571;
                              }
                              goto LABEL_1472;
                            }
LABEL_617:
                            __s1b = (std::string *)a15;
                            *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = 0uLL;
                            __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__l.__size_;
                            *(_QWORD *)&v730 = 0;
                            v729[1] = 0;
                            v729[0] = (std::string::size_type)&v729[1];
                            v231 = v660;
                            v232 = v661;
                            if (v660 != v661)
                            {
                              do
                              {
                                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v729, (const void **)&v231->__r_.__value_.__l.__data_, (uint64_t)v231);
                                if ((v233 & 1) == 0)
                                {
                                  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (const void **)&v231->__r_.__value_.__l.__data_, (uint64_t)v231);
                                  goto LABEL_620;
                                }
                                size = (__int32 *)v231[1].__r_.__value_.__l.__size_;
                                v235 = (__int32 *)v231[1].__r_.__value_.__r.__words[2];
                                if (size != v235)
                                {
                                  *(_OWORD *)&__sz.__r_.__value_.__r.__words[1] = 0uLL;
                                  __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&__sz.__r_.__value_.__l.__size_;
LABEL_629:
                                  v236 = *size;
                                  v237 = a7[1];
                                  v238 = wmemchr(*a7, *size, v237 - *a7);
                                  if (v238)
                                    v239 = v238;
                                  else
                                    v239 = v237;
                                  if (v239 != v237)
                                    goto LABEL_628;
                                  v240 = __sz.__r_.__value_.__l.__size_;
                                  p_size = &__sz.__r_.__value_.__l.__size_;
                                  v242 = &__sz.__r_.__value_.__l.__size_;
                                  if (__sz.__r_.__value_.__l.__size_)
                                  {
                                    do
                                    {
                                      while (1)
                                      {
                                        v242 = (std::string::size_type *)v240;
                                        v243 = *(_DWORD *)(v240 + 28);
                                        if (v236 >= v243)
                                          break;
                                        v240 = *v242;
                                        p_size = v242;
                                        if (!*v242)
                                          goto LABEL_640;
                                      }
                                      if (v243 >= v236)
                                        goto LABEL_628;
                                      v240 = v242[1];
                                    }
                                    while (v240);
                                    p_size = v242 + 1;
                                  }
LABEL_640:
                                  v244 = operator new(0x20uLL);
                                  v244[7] = v236;
                                  *(_QWORD *)v244 = 0;
                                  *((_QWORD *)v244 + 1) = 0;
                                  *((_QWORD *)v244 + 2) = v242;
                                  *p_size = (std::string::size_type)v244;
                                  if (*(_QWORD *)__sz.__r_.__value_.__l.__data_)
                                  {
                                    __sz.__r_.__value_.__r.__words[0] = *(_QWORD *)__sz.__r_.__value_.__l.__data_;
                                    v244 = (_DWORD *)*p_size;
                                  }
                                  v245 = __sz.__r_.__value_.__l.__size_;
                                  v103 = v244 == (_DWORD *)__sz.__r_.__value_.__l.__size_;
                                  *((_BYTE *)v244 + 24) = v244 == (_DWORD *)__sz.__r_.__value_.__l.__size_;
                                  if (v103)
                                    goto LABEL_627;
                                  while (1)
                                  {
                                    v246 = *((_QWORD *)v244 + 2);
                                    if (*(_BYTE *)(v246 + 24))
                                      goto LABEL_627;
                                    v247 = *(_BYTE **)(v246 + 16);
                                    v248 = *(_QWORD *)v247;
                                    if (*(_QWORD *)v247 == v246)
                                    {
                                      v251 = *((_QWORD *)v247 + 1);
                                      if (!v251
                                        || (v252 = *(unsigned __int8 *)(v251 + 24), v249 = (_BYTE *)(v251 + 24), v252))
                                      {
                                        if (*(_DWORD **)v246 == v244)
                                        {
                                          *(_BYTE *)(v246 + 24) = 1;
                                          v247[24] = 0;
                                          v255 = *(_QWORD *)(v246 + 8);
                                          *(_QWORD *)v247 = v255;
                                          if (v255)
                                            goto LABEL_657;
                                        }
                                        else
                                        {
                                          v253 = *(uint64_t **)(v246 + 8);
                                          v254 = *v253;
                                          *(_QWORD *)(v246 + 8) = *v253;
                                          if (v254)
                                          {
                                            *(_QWORD *)(v254 + 16) = v246;
                                            v247 = *(_BYTE **)(v246 + 16);
                                          }
                                          v253[2] = (uint64_t)v247;
                                          *(_QWORD *)(*(_QWORD *)(v246 + 16) + 8 * (**(_QWORD **)(v246 + 16) != v246)) = v253;
                                          *v253 = v246;
                                          *(_QWORD *)(v246 + 16) = v253;
                                          v247 = (_BYTE *)v253[2];
                                          v246 = *(_QWORD *)v247;
                                          *((_BYTE *)v253 + 24) = 1;
                                          v247[24] = 0;
                                          v255 = *(_QWORD *)(v246 + 8);
                                          *(_QWORD *)v247 = v255;
                                          if (v255)
LABEL_657:
                                            *(_QWORD *)(v255 + 16) = v247;
                                        }
                                        *(_QWORD *)(v246 + 16) = *((_QWORD *)v247 + 2);
                                        *(_QWORD *)(*((_QWORD *)v247 + 2)
                                                  + 8 * (**((_QWORD **)v247 + 2) != (_QWORD)v247)) = v246;
                                        *(_QWORD *)(v246 + 8) = v247;
LABEL_626:
                                        *((_QWORD *)v247 + 2) = v246;
LABEL_627:
                                        ++__sz.__r_.__value_.__r.__words[2];
LABEL_628:
                                        if (++size != v235)
                                          goto LABEL_629;
                                        v259 = v231[1].__r_.__value_.__l.__size_;
                                        v258 = (char *)v231[1].__r_.__value_.__r.__words[2];
                                        if ((char *)v259 == v258)
                                          goto LABEL_685;
                                        v260 = __sz.__r_.__value_.__l.__size_;
                                        v261 = (char *)v231[1].__r_.__value_.__l.__size_;
                                        if (__sz.__r_.__value_.__l.__size_)
                                        {
                                          do
                                          {
                                            v262 = *(_DWORD *)v261;
                                            v263 = __sz.__r_.__value_.__l.__size_;
                                            do
                                            {
                                              v264 = *(_DWORD *)(v263 + 28);
                                              if (v264 <= v262)
                                              {
                                                if (v264 >= v262)
                                                  goto LABEL_677;
                                                v263 += 8;
                                              }
                                              v263 = *(_QWORD *)v263;
                                            }
                                            while (v263);
                                            v261 += 4;
                                          }
                                          while (v261 != v258);
                                        }
                                        else
                                        {
                                          v261 = (char *)(v259 + ((unint64_t)&v258[-v259] & 0xFFFFFFFFFFFFFFFCLL));
LABEL_677:
                                          if (v261 != v258)
                                          {
                                            v265 = v261 + 4;
                                            if (v261 + 4 != v258)
                                            {
                                              if (__sz.__r_.__value_.__l.__size_)
                                              {
                                                do
                                                {
                                                  v266 = *(_DWORD *)v265;
                                                  v267 = v260;
                                                  do
                                                  {
                                                    v268 = *(_DWORD *)(v267 + 28);
                                                    if (v268 <= v266)
                                                    {
                                                      if (v268 >= v266)
                                                        goto LABEL_688;
                                                      v267 += 8;
                                                    }
                                                    v267 = *(_QWORD *)v267;
                                                  }
                                                  while (v267);
                                                  *(_DWORD *)v261 = v266;
                                                  v261 += 4;
LABEL_688:
                                                  v265 += 4;
                                                }
                                                while (v265 != v258);
                                              }
                                              else
                                              {
                                                memmove(v261, v265, ((v258 - v261 - 8) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                                                v261 += ((v258 - v261 - 8) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                                              }
                                            }
                                            if (v258 < v261)
                                              goto LABEL_1472;
                                            if (v261 != v258)
                                            {
                                              v258 = v261;
                                              v231[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v261;
                                            }
                                          }
                                        }
                                        if ((char *)v259 == v258)
LABEL_685:
                                          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (const void **)&v231->__r_.__value_.__l.__data_, (uint64_t)v231);
                                        std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&__sz, (_QWORD *)__sz.__r_.__value_.__l.__size_);
                                        break;
                                      }
                                    }
                                    else if (!v248
                                           || (v250 = *(unsigned __int8 *)(v248 + 24), v249 = (_BYTE *)(v248 + 24), v250))
                                    {
                                      if (*(_DWORD **)v246 == v244)
                                      {
                                        v257 = *((_QWORD *)v244 + 1);
                                        *(_QWORD *)v246 = v257;
                                        if (v257)
                                        {
                                          *(_QWORD *)(v257 + 16) = v246;
                                          v247 = *(_BYTE **)(v246 + 16);
                                        }
                                        *((_QWORD *)v244 + 2) = v247;
                                        *(_QWORD *)(*(_QWORD *)(v246 + 16) + 8 * (**(_QWORD **)(v246 + 16) != v246)) = v244;
                                        *((_QWORD *)v244 + 1) = v246;
                                        *(_QWORD *)(v246 + 16) = v244;
                                        v247 = (_BYTE *)*((_QWORD *)v244 + 2);
                                        *((_BYTE *)v244 + 24) = 1;
                                        v247[24] = 0;
                                        v246 = *((_QWORD *)v247 + 1);
                                        v256 = *(_DWORD **)v246;
                                        *((_QWORD *)v247 + 1) = *(_QWORD *)v246;
                                        if (!v256)
                                          goto LABEL_625;
                                      }
                                      else
                                      {
                                        *(_BYTE *)(v246 + 24) = 1;
                                        v247[24] = 0;
                                        v246 = *((_QWORD *)v247 + 1);
                                        v256 = *(_DWORD **)v246;
                                        *((_QWORD *)v247 + 1) = *(_QWORD *)v246;
                                        if (!v256)
                                          goto LABEL_625;
                                      }
                                      *((_QWORD *)v256 + 2) = v247;
LABEL_625:
                                      *(_QWORD *)(v246 + 16) = *((_QWORD *)v247 + 2);
                                      *(_QWORD *)(*((_QWORD *)v247 + 2) + 8
                                                                        * (**((_QWORD **)v247 + 2) != (_QWORD)v247)) = v246;
                                      *(_QWORD *)v246 = v247;
                                      goto LABEL_626;
                                    }
                                    *(_BYTE *)(v246 + 24) = 1;
                                    v244 = v247;
                                    v247[24] = v247 == (_BYTE *)v245;
                                    *v249 = 1;
                                    if (v247 == (_BYTE *)v245)
                                      goto LABEL_627;
                                  }
                                }
LABEL_620:
                                v231 = (std::string *)((char *)v231 + 80);
                              }
                              while (v231 != v232);
                              if (__p[0].__r_.__value_.__r.__words[2])
                              {
                                v283 = v660;
                                v284 = v661;
                                if (v660 == v661)
                                  goto LABEL_758;
                                while (!std::__tree<std::string>::__count_unique<std::string>(__p[0].__r_.__value_.__l.__size_, (const void **)&v283->__r_.__value_.__l.__data_))
                                {
                                  v283 = (std::string *)((char *)v283 + 80);
                                  if (v283 == v284)
                                  {
                                    v283 = v284;
                                    goto LABEL_758;
                                  }
                                }
                                if (v283 != v284)
                                {
                                  for (i = (std::string *)((char *)v283 + 80);
                                        i != v284;
                                        i = (std::string *)((char *)i + 80))
                                  {
                                    if (!std::__tree<std::string>::__count_unique<std::string>(__p[0].__r_.__value_.__l.__size_, (const void **)&i->__r_.__value_.__l.__data_))
                                    {
                                      cricket::RidDescription::operator=(v283, i);
                                      v283 = (std::string *)((char *)v283 + 80);
                                    }
                                  }
                                }
LABEL_758:
                                v286 = v661;
                                if (v661 < v283)
                                  goto LABEL_1472;
                                if (v283 != v661)
                                {
                                  while (v286 != v283)
                                  {
                                    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v286[-1], v286[-1].__r_.__value_.__l.__size_);
                                    data = v286[-2].__r_.__value_.__l.__data_;
                                    if (data)
                                    {
                                      v286[-2].__r_.__value_.__l.__size_ = (std::string::size_type)data;
                                      operator delete(data);
                                    }
                                    if (v286[-3].__r_.__value_.__s.__data_[15] < 0)
                                      operator delete((void *)v286[-4].__r_.__value_.__r.__words[2]);
                                    v286 = (std::string *)((char *)v286 - 80);
                                  }
                                  v661 = v283;
                                }
                              }
                            }
                            std::__tree<rtc::SocketAddress>::destroy((uint64_t)v729, (char *)v729[1]);
                            std::__tree<rtc::SocketAddress>::destroy((uint64_t)__p, (char *)__p[0].__r_.__value_.__l.__size_);
                            v696 = 0;
                            __src = 0;
                            v697 = 0;
                            v692 = 0;
                            v691 = 0;
                            v693 = 0;
                            if (v658[0] == v658[1] && v659[1] == v659[2])
                            {
                              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
                                rtc::webrtc_logging_impl::Log("\r\t", v406, v407, v408, v409, v410, v411, v412, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
                              v405 = 0;
                              v404 = 0;
                              v390 = a12;
                              goto LABEL_1056;
                            }
                            *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = 0uLL;
                            __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__l.__size_;
                            cricket::SimulcastLayerList::GetAllLayers((__int128 ***)v658, (std::string **)v729);
                            cricket::SimulcastLayerList::GetAllLayers((__int128 ***)&v659[1], (std::string **)&__sz);
                            v288 = v729[0];
                            v289 = v729[1];
                            if (v729[0] != v729[1])
                            {
                              if (__sz.__r_.__value_.__r.__words[0] != __sz.__r_.__value_.__l.__size_)
                              {
                                do
                                {
                                  v291 = __sz.__r_.__value_.__l.__size_;
                                  v290 = __sz.__r_.__value_.__r.__words[0];
                                  if (__sz.__r_.__value_.__r.__words[0] != __sz.__r_.__value_.__l.__size_)
                                  {
                                    if (*(char *)(v288 + 23) >= 0)
                                      v292 = *(unsigned __int8 *)(v288 + 23);
                                    else
                                      v292 = *(_QWORD *)(v288 + 8);
                                    if ((*(_BYTE *)(v288 + 23) & 0x80) != 0)
                                    {
                                      while (1)
                                      {
                                        v296 = *(unsigned __int8 *)(v290 + 23);
                                        if ((v296 & 0x80u) == 0)
                                          v297 = *(unsigned __int8 *)(v290 + 23);
                                        else
                                          v297 = *(_QWORD *)(v290 + 8);
                                        if (v297 == v292)
                                        {
                                          v298 = *(unsigned __int8 **)v288;
                                          if ((v296 & 0x80) != 0)
                                          {
                                            if (!memcmp(*(const void **)v290, v298, *(_QWORD *)(v290 + 8)))
                                              goto LABEL_773;
                                          }
                                          else
                                          {
                                            if (!*(_BYTE *)(v290 + 23))
                                              goto LABEL_773;
                                            v299 = 0;
                                            while (*(unsigned __int8 *)(v290 + v299) == v298[v299])
                                            {
                                              if (v296 == ++v299)
                                                goto LABEL_773;
                                            }
                                          }
                                        }
                                        v290 += 32;
                                        if (v290 == v291)
                                          goto LABEL_774;
                                      }
                                    }
                                    do
                                    {
                                      v293 = *(unsigned __int8 *)(v290 + 23);
                                      if ((v293 & 0x80u) == 0)
                                        v294 = *(unsigned __int8 *)(v290 + 23);
                                      else
                                        v294 = *(_QWORD *)(v290 + 8);
                                      if (v294 == v292)
                                      {
                                        if ((v293 & 0x80) != 0)
                                        {
                                          if (!memcmp(*(const void **)v290, (const void *)v288, *(_QWORD *)(v290 + 8)))
                                            goto LABEL_773;
                                        }
                                        else
                                        {
                                          if (!*(_BYTE *)(v290 + 23))
                                          {
LABEL_773:
                                            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (const void **)v288, v288);
                                            break;
                                          }
                                          v295 = 0;
                                          while (*(unsigned __int8 *)(v290 + v295) == *(unsigned __int8 *)(v288 + v295))
                                          {
                                            if (v293 == ++v295)
                                              goto LABEL_773;
                                          }
                                        }
                                      }
                                      v290 += 32;
                                    }
                                    while (v290 != v291);
                                  }
LABEL_774:
                                  v288 += 32;
                                }
                                while (v288 != v289);
                                v288 = v729[0];
                                v289 = v729[1];
                              }
                              while (v288 != v289)
                              {
                                v300 = v660;
                                v301 = v661;
                                if (v660 == v661)
                                {
LABEL_806:
                                  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (const void **)v288, v288);
                                }
                                else
                                {
                                  v302 = *(_QWORD *)(v288 + 8);
                                  if (*(char *)(v288 + 23) >= 0)
                                    v303 = *(unsigned __int8 *)(v288 + 23);
                                  else
                                    v303 = *(_QWORD *)(v288 + 8);
                                  if ((*(_BYTE *)(v288 + 23) & 0x80) != 0)
                                  {
                                    while (1)
                                    {
                                      v308 = HIBYTE(v300->__r_.__value_.__r.__words[2]);
                                      v309 = (char)v308;
                                      if ((v308 & 0x80u) != 0)
                                        v308 = v300->__r_.__value_.__l.__size_;
                                      if (v303 == v308)
                                      {
                                        v310 = v309 >= 0 ? v300 : (std::string *)v300->__r_.__value_.__r.__words[0];
                                        if (!(memcmp(*(const void **)v288, v310, v302) | LODWORD(v300[1].__r_.__value_.__l.__data_)))
                                          break;
                                      }
                                      v300 = (std::string *)((char *)v300 + 80);
                                      if (v300 == v301)
                                        goto LABEL_806;
                                    }
                                  }
                                  else if (*(_BYTE *)(v288 + 23))
                                  {
                                    while (1)
                                    {
                                      v304 = HIBYTE(v300->__r_.__value_.__r.__words[2]);
                                      v305 = (char)v304;
                                      if ((v304 & 0x80u) != 0)
                                        v304 = v300->__r_.__value_.__l.__size_;
                                      if (v303 == v304)
                                      {
                                        v306 = 0;
                                        v307 = v305 >= 0 ? v300 : (std::string *)v300->__r_.__value_.__r.__words[0];
                                        do
                                        {
                                          if (*(unsigned __int8 *)(v288 + v306) != v307->__r_.__value_.__s.__data_[v306])
                                            goto LABEL_816;
                                          ++v306;
                                        }
                                        while (*(unsigned __int8 *)(v288 + 23) != v306);
                                        if (!LODWORD(v300[1].__r_.__value_.__l.__data_))
                                          break;
                                      }
LABEL_816:
                                      v300 = (std::string *)((char *)v300 + 80);
                                      if (v300 == v661)
                                        goto LABEL_806;
                                    }
                                  }
                                  else
                                  {
                                    while (1)
                                    {
                                      v311 = HIBYTE(v300->__r_.__value_.__r.__words[2]);
                                      if ((v311 & 0x80u) != 0)
                                        v311 = v300->__r_.__value_.__l.__size_;
                                      if (v303 == v311 && !LODWORD(v300[1].__r_.__value_.__l.__data_))
                                        break;
                                      v300 = (std::string *)((char *)v300 + 80);
                                      if (v300 == v661)
                                        goto LABEL_806;
                                    }
                                  }
                                }
                                v288 += 32;
                              }
                            }
                            v313 = __sz.__r_.__value_.__l.__size_;
                            for (j = __sz.__r_.__value_.__r.__words[0]; j != v313; j += 32)
                            {
                              v314 = v660;
                              v315 = v661;
                              if (v660 == v661)
                              {
LABEL_843:
                                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (const void **)j, j);
                              }
                              else
                              {
                                v316 = *(_QWORD *)(j + 8);
                                if (*(char *)(j + 23) >= 0)
                                  v317 = *(unsigned __int8 *)(j + 23);
                                else
                                  v317 = *(_QWORD *)(j + 8);
                                if ((*(_BYTE *)(j + 23) & 0x80) != 0)
                                {
                                  while (1)
                                  {
                                    v322 = HIBYTE(v314->__r_.__value_.__r.__words[2]);
                                    v323 = (char)v322;
                                    if ((v322 & 0x80u) != 0)
                                      v322 = v314->__r_.__value_.__l.__size_;
                                    if (v317 == v322)
                                    {
                                      v324 = v323 >= 0 ? v314 : (std::string *)v314->__r_.__value_.__r.__words[0];
                                      if (!memcmp(*(const void **)j, v324, v316)
                                        && LODWORD(v314[1].__r_.__value_.__l.__data_) == 1)
                                      {
                                        break;
                                      }
                                    }
                                    v314 = (std::string *)((char *)v314 + 80);
                                    if (v314 == v315)
                                      goto LABEL_843;
                                  }
                                }
                                else if (*(_BYTE *)(j + 23))
                                {
                                  while (1)
                                  {
                                    v318 = HIBYTE(v314->__r_.__value_.__r.__words[2]);
                                    v319 = (char)v318;
                                    if ((v318 & 0x80u) != 0)
                                      v318 = v314->__r_.__value_.__l.__size_;
                                    if (v317 == v318)
                                    {
                                      v320 = 0;
                                      v321 = v319 >= 0 ? v314 : (std::string *)v314->__r_.__value_.__r.__words[0];
                                      do
                                      {
                                        if (*(unsigned __int8 *)(j + v320) != v321->__r_.__value_.__s.__data_[v320])
                                          goto LABEL_853;
                                        ++v320;
                                      }
                                      while (*(unsigned __int8 *)(j + 23) != v320);
                                      if (LODWORD(v314[1].__r_.__value_.__l.__data_) == 1)
                                        break;
                                    }
LABEL_853:
                                    v314 = (std::string *)((char *)v314 + 80);
                                    if (v314 == v661)
                                      goto LABEL_843;
                                  }
                                }
                                else
                                {
                                  while (1)
                                  {
                                    v326 = HIBYTE(v314->__r_.__value_.__r.__words[2]);
                                    if ((v326 & 0x80u) != 0)
                                      v326 = v314->__r_.__value_.__l.__size_;
                                    if (v317 == v326 && LODWORD(v314[1].__r_.__value_.__l.__data_) == 1)
                                      break;
                                    v314 = (std::string *)((char *)v314 + 80);
                                    if (v314 == v661)
                                      goto LABEL_843;
                                  }
                                }
                              }
                            }
                            webrtc::RemoveRidsFromSimulcastLayerList(&v698, (uint64_t)__p, (__int128 **)v658[0], (__int128 **)v658[1]);
                            v327 = (void **)v658[0];
                            if (v658[0])
                            {
                              v328 = (void **)v658[1];
                              v329 = v658[0];
                              if (v658[1] != v658[0])
                              {
                                v330 = (void **)v658[1];
                                do
                                {
                                  v333 = (void **)*(v330 - 3);
                                  v330 -= 3;
                                  v332 = v333;
                                  if (v333)
                                  {
                                    v334 = (void **)*(v328 - 2);
                                    v331 = v332;
                                    if (v334 != v332)
                                    {
                                      do
                                      {
                                        if (*((char *)v334 - 9) < 0)
                                          operator delete(*(v334 - 4));
                                        v334 -= 4;
                                      }
                                      while (v334 != v332);
                                      v331 = *v330;
                                    }
                                    *(v328 - 2) = v332;
                                    operator delete(v331);
                                  }
                                  v328 = v330;
                                }
                                while (v330 != v327);
                                v329 = v658[0];
                              }
                              v658[1] = v327;
                              operator delete(v329);
                            }
                            *(_OWORD *)v658 = *(_OWORD *)&v698.__r_.__value_.__l.__data_;
                            v659[0] = (void *)v698.__r_.__value_.__r.__words[2];
                            webrtc::RemoveRidsFromSimulcastLayerList(&v698, (uint64_t)__p, (__int128 **)v659[1], (__int128 **)v659[2]);
                            v335 = (void **)v659[1];
                            if (v659[1])
                            {
                              v336 = (void **)v659[2];
                              v337 = v659[1];
                              if (v659[2] != v659[1])
                              {
                                v338 = (void **)v659[2];
                                do
                                {
                                  v341 = (void **)*(v338 - 3);
                                  v338 -= 3;
                                  v340 = v341;
                                  if (v341)
                                  {
                                    v342 = (void **)*(v336 - 2);
                                    v339 = v340;
                                    if (v342 != v340)
                                    {
                                      do
                                      {
                                        if (*((char *)v342 - 9) < 0)
                                          operator delete(*(v342 - 4));
                                        v342 -= 4;
                                      }
                                      while (v342 != v340);
                                      v339 = *v338;
                                    }
                                    *(v336 - 2) = v340;
                                    operator delete(v339);
                                  }
                                  v336 = v338;
                                }
                                while (v338 != v335);
                                v337 = v659[1];
                              }
                              v659[2] = v335;
                              operator delete(v337);
                            }
                            *(std::string *)&v659[1] = v698;
                            v343 = __sz.__r_.__value_.__r.__words[0];
                            if (__sz.__r_.__value_.__r.__words[0])
                            {
                              v344 = __sz.__r_.__value_.__l.__size_;
                              v345 = (void *)__sz.__r_.__value_.__r.__words[0];
                              if (__sz.__r_.__value_.__l.__size_ != __sz.__r_.__value_.__r.__words[0])
                              {
                                do
                                {
                                  if (*(char *)(v344 - 9) < 0)
                                    operator delete(*(void **)(v344 - 32));
                                  v344 -= 32;
                                }
                                while (v344 != v343);
                                v345 = (void *)__sz.__r_.__value_.__r.__words[0];
                              }
                              __sz.__r_.__value_.__l.__size_ = v343;
                              operator delete(v345);
                            }
                            v346 = v729[0];
                            if (v729[0])
                            {
                              v347 = v729[1];
                              v348 = (void *)v729[0];
                              if (v729[1] != v729[0])
                              {
                                do
                                {
                                  if (*(char *)(v347 - 9) < 0)
                                    operator delete(*(void **)(v347 - 32));
                                  v347 -= 32;
                                }
                                while (v347 != v346);
                                v348 = (void *)v729[0];
                              }
                              v729[1] = v346;
                              operator delete(v348);
                            }
                            std::__tree<rtc::SocketAddress>::destroy((uint64_t)__p, (char *)__p[0].__r_.__value_.__l.__size_);
                            *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = 0uLL;
                            __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__l.__size_;
                            v349 = v660;
                            v642 = v661;
                            if (v660 != v661)
                            {
                              v640 = (unint64_t)&__p[0].__r_.__value_.__l.__size_;
                              v350 = &__p[0].__r_.__value_.__l.__size_;
                              for (k = &__p[0].__r_.__value_.__l.__size_; ; v350 = k + 1)
                              {
LABEL_967:
                                v370 = (char *)operator new(0x88uLL);
                                v371 = (std::string *)(v370 + 32);
                                if (SHIBYTE(v349->__r_.__value_.__r.__words[2]) < 0)
                                {
                                  std::string::__init_copy_ctor_external(v371, v349->__r_.__value_.__l.__data_, v349->__r_.__value_.__l.__size_);
                                }
                                else
                                {
                                  v372 = *(_OWORD *)&v349->__r_.__value_.__l.__data_;
                                  *((_QWORD *)v370 + 6) = *((_QWORD *)&v349->__r_.__value_.__l + 2);
                                  *(_OWORD *)&v371->__r_.__value_.__l.__data_ = v372;
                                }
                                *((_QWORD *)v370 + 7) = 0;
                                *((_QWORD *)v370 + 8) = 0;
                                *((_QWORD *)v370 + 9) = 0;
                                *((_QWORD *)v370 + 11) = 0;
                                *((_QWORD *)v370 + 12) = 0;
                                *((_QWORD *)v370 + 16) = 0;
                                *((_QWORD *)v370 + 15) = 0;
                                *((_QWORD *)v370 + 13) = 0;
                                *((_QWORD *)v370 + 14) = v370 + 120;
                                *(_QWORD *)v370 = 0;
                                *((_QWORD *)v370 + 1) = 0;
                                *((_QWORD *)v370 + 2) = k;
                                *v350 = (std::string::size_type)v370;
                                v373 = (uint64_t *)v370;
                                if (*(_QWORD *)__p[0].__r_.__value_.__l.__data_)
                                {
                                  __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)__p[0].__r_.__value_.__l.__data_;
                                  v373 = (uint64_t *)*v350;
                                }
                                std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)__p[0].__r_.__value_.__l.__size_, v373);
                                ++__p[0].__r_.__value_.__r.__words[2];
                                while (1)
                                {
                                  cricket::RidDescription::operator=((std::string *)(v370 + 56), v349);
                                  v349 = (std::string *)((char *)v349 + 80);
                                  if (v349 == v642)
                                    goto LABEL_976;
                                  v357 = __p[0].__r_.__value_.__l.__size_;
                                  v350 = &__p[0].__r_.__value_.__l.__size_;
                                  k = &__p[0].__r_.__value_.__l.__size_;
                                  if (!__p[0].__r_.__value_.__l.__size_)
                                    goto LABEL_967;
                                  v352 = HIBYTE(v349->__r_.__value_.__r.__words[2]);
                                  v354 = (std::string *)v349->__r_.__value_.__r.__words[0];
                                  v353 = v349->__r_.__value_.__l.__size_;
                                  v355 = v353 && v354 == 0;
                                  v356 = !v355;
                                  while (1)
                                  {
LABEL_936:
                                    k = (std::string::size_type *)v357;
                                    v358 = v349;
                                    v359 = v352;
                                    if ((v352 & 0x80) != 0)
                                    {
                                      if ((v353 & 0x8000000000000000) != 0)
                                        goto LABEL_1472;
                                      v358 = v354;
                                      v359 = v353;
                                      if (!v356)
                                        goto LABEL_1472;
                                    }
                                    v360 = (const void **)(v357 + 32);
                                    v361 = *(unsigned __int8 *)(v357 + 55);
                                    v362 = (const void *)(v357 + 32);
                                    v363 = v361;
                                    if (*(char *)(v357 + 55) < 0)
                                    {
                                      v363 = *(_QWORD *)(v357 + 40);
                                      if ((v363 & 0x8000000000000000) != 0)
                                        goto LABEL_1472;
                                      v362 = *v360;
                                      if (v363)
                                      {
                                        if (!v362)
                                          goto LABEL_1472;
                                      }
                                    }
                                    v364 = v363 >= v359 ? v359 : v363;
                                    v365 = memcmp(v358, v362, v364);
                                    if (v365)
                                      break;
                                    if (v359 >= v363)
                                      goto LABEL_950;
LABEL_935:
                                    v357 = *k;
                                    v350 = k;
                                    if (!*k)
                                      goto LABEL_967;
                                  }
                                  if (v365 < 0)
                                    goto LABEL_935;
LABEL_950:
                                  if ((v361 & 0x80) != 0)
                                  {
                                    v361 = k[5];
                                    if ((v361 & 0x8000000000000000) != 0)
                                      goto LABEL_1472;
                                    v360 = (const void **)*v360;
                                    if (v361)
                                    {
                                      if (!v360)
                                        goto LABEL_1472;
                                    }
                                  }
                                  v366 = v349;
                                  v367 = v352;
                                  if ((v352 & 0x80) != 0)
                                  {
                                    if ((v353 & 0x8000000000000000) != 0)
                                      goto LABEL_1472;
                                    v366 = v354;
                                    v367 = v353;
                                    if (!v356)
                                      goto LABEL_1472;
                                  }
                                  v368 = v367 >= v361 ? v361 : v367;
                                  v369 = memcmp(v360, v366, v368);
                                  if (v369)
                                    break;
                                  if (v361 < v367)
                                    goto LABEL_964;
LABEL_966:
                                  v370 = (char *)k;
                                }
                                if ((v369 & 0x80000000) == 0)
                                  goto LABEL_966;
LABEL_964:
                                v357 = k[1];
                                if (v357)
                                  goto LABEL_936;
                              }
                            }
LABEL_976:
                            cricket::SimulcastLayerList::GetAllLayers((__int128 ***)v658, (std::string **)v729);
                            v374 = v729[0];
                            v375 = v729[1];
                            if (v729[0] == v729[1])
                            {
                              if (v729[0])
                                goto LABEL_1006;
                              goto LABEL_1013;
                            }
                            while (1)
                            {
                              v376 = (std::string *)std::__tree<std::__value_type<std::string,cricket::ContentGroup const*>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::ContentGroup const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::ContentGroup const*>>>::__lower_bound<std::string>((const void **)v374, (uint64_t *)__p[0].__r_.__value_.__l.__size_, (uint64_t *)&__p[0].__r_.__value_.__l.__size_);
                              if (&__p[0].__r_.__value_.__r.__words[1] == (std::string::size_type *)v376)
                                goto LABEL_998;
                              v377 = (std::string::size_type *)v376;
                              if (*(char *)(v374 + 23) < 0)
                              {
                                v378 = *(_QWORD *)(v374 + 8);
                                if ((v378 & 0x8000000000000000) != 0)
                                  goto LABEL_1472;
                                v379 = *(const void **)v374;
                                if (v378)
                                {
                                  if (!v379)
                                    goto LABEL_1472;
                                }
                              }
                              else
                              {
                                v378 = *(unsigned __int8 *)(v374 + 23);
                                v379 = (const void *)v374;
                              }
                              v380 = v377 + 4;
                              if (*((char *)v377 + 55) < 0)
                              {
                                v381 = v377[5];
                                if ((v381 & 0x8000000000000000) != 0)
                                  goto LABEL_1472;
                                v380 = (_QWORD *)*v380;
                                if (v381 && v380 == 0)
                                  goto LABEL_1472;
                              }
                              else
                              {
                                v381 = *((unsigned __int8 *)v377 + 55);
                              }
                              v383 = v381 >= v378 ? v378 : v381;
                              v384 = memcmp(v379, v380, v383);
                              if (!v384)
                                break;
                              if (v384 < 0)
                                goto LABEL_998;
LABEL_999:
                              v385 = (const cricket::RidDescription *)(v377 + 7);
                              if (v696 >= v697)
                              {
                                v696 = (size_t)std::vector<cricket::RidDescription>::__push_back_slow_path<cricket::RidDescription>((const cricket::RidDescription **)&__src, v385);
                                v374 += 32;
                                if (v374 == v375)
                                  goto LABEL_1005;
                              }
                              else
                              {
                                if (!v696)
                                  goto LABEL_1472;
                                v696 = (size_t)&cricket::RidDescription::RidDescription((std::string *)v696, v385)[3].__r_.__value_.__l.__size_;
                                v374 += 32;
                                if (v374 == v375)
                                {
LABEL_1005:
                                  v374 = v729[0];
                                  if (v729[0])
                                  {
LABEL_1006:
                                    v386 = v729[1];
                                    v387 = (void *)v374;
                                    if (v729[1] != v374)
                                    {
                                      do
                                      {
                                        if (*(char *)(v386 - 9) < 0)
                                          operator delete(*(void **)(v386 - 32));
                                        v386 -= 32;
                                      }
                                      while (v386 != v374);
                                      v387 = (void *)v729[0];
                                    }
                                    v729[1] = v374;
                                    operator delete(v387);
                                  }
LABEL_1013:
                                  cricket::SimulcastLayerList::GetAllLayers((__int128 ***)&v659[1], (std::string **)v729);
                                  v388 = v729[0];
                                  v389 = v729[1];
                                  if (v729[0] == v729[1])
                                  {
                                    v390 = a12;
                                    if (!v729[0])
                                      goto LABEL_1047;
                                    goto LABEL_1015;
                                  }
                                  while (2)
                                  {
                                    v393 = (std::string *)std::__tree<std::__value_type<std::string,cricket::ContentGroup const*>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::ContentGroup const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::ContentGroup const*>>>::__lower_bound<std::string>((const void **)v388, (uint64_t *)__p[0].__r_.__value_.__l.__size_, (uint64_t *)&__p[0].__r_.__value_.__l.__size_);
                                    if (&__p[0].__r_.__value_.__r.__words[1] != (std::string::size_type *)v393)
                                    {
                                      v394 = (std::string::size_type *)v393;
                                      if (*(char *)(v388 + 23) < 0)
                                      {
                                        v395 = *(_QWORD *)(v388 + 8);
                                        if ((v395 & 0x8000000000000000) != 0)
                                          goto LABEL_1472;
                                        v396 = *(const void **)v388;
                                        if (v395)
                                        {
                                          if (!v396)
                                            goto LABEL_1472;
                                        }
                                      }
                                      else
                                      {
                                        v395 = *(unsigned __int8 *)(v388 + 23);
                                        v396 = (const void *)v388;
                                      }
                                      v397 = v394 + 4;
                                      if (*((char *)v394 + 55) < 0)
                                      {
                                        v398 = v394[5];
                                        if ((v398 & 0x8000000000000000) != 0)
                                          goto LABEL_1472;
                                        v397 = (_QWORD *)*v397;
                                        if (v398 && v397 == 0)
                                          goto LABEL_1472;
                                      }
                                      else
                                      {
                                        v398 = *((unsigned __int8 *)v394 + 55);
                                      }
                                      if (v398 >= v395)
                                        v400 = v395;
                                      else
                                        v400 = v398;
                                      v401 = memcmp(v396, v397, v400);
                                      if (v401)
                                      {
                                        if (v401 < 0)
                                          break;
LABEL_1040:
                                        v402 = (const cricket::RidDescription *)(v394 + 7);
                                        if ((unint64_t)v692 >= v693)
                                        {
                                          v692 = (std::string *)std::vector<cricket::RidDescription>::__push_back_slow_path<cricket::RidDescription>((const cricket::RidDescription **)&v691, v402);
                                          v388 += 32;
                                          if (v388 == v389)
                                            goto LABEL_1046;
                                          continue;
                                        }
                                        if (!v692)
                                          goto LABEL_1472;
                                        v692 = (std::string *)((char *)cricket::RidDescription::RidDescription(v692, v402)+ 80);
                                        v388 += 32;
                                        if (v388 != v389)
                                          continue;
LABEL_1046:
                                        v388 = v729[0];
                                        v390 = a12;
                                        if (!v729[0])
                                        {
LABEL_1047:
                                          v403 = v390 + 208;
                                          if ((void **)(v390 + 208) != v658)
                                            goto LABEL_1048;
                                          goto LABEL_1049;
                                        }
LABEL_1015:
                                        v391 = v729[1];
                                        v392 = (void *)v388;
                                        if (v729[1] != v388)
                                        {
                                          do
                                          {
                                            if (*(char *)(v391 - 9) < 0)
                                              operator delete(*(void **)(v391 - 32));
                                            v391 -= 32;
                                          }
                                          while (v391 != v388);
                                          v392 = (void *)v729[0];
                                        }
                                        v729[1] = v388;
                                        operator delete(v392);
                                        v403 = v390 + 208;
                                        if ((void **)(v390 + 208) != v658)
                                        {
LABEL_1048:
                                          std::vector<std::vector<cricket::SimulcastLayer>>::__assign_with_size[abi:sn180100]<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>(v403, (uint64_t *)v658[0], (uint64_t *)v658[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v658[1] - (char *)v658[0]) >> 3));
                                          std::vector<std::vector<cricket::SimulcastLayer>>::__assign_with_size[abi:sn180100]<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>(v390 + 232, (uint64_t *)v659[1], (uint64_t *)v659[2], 0xAAAAAAAAAAAAAAABLL * (((char *)v659[2] - (char *)v659[1]) >> 3));
                                        }
LABEL_1049:
                                        std::__tree<std::__value_type<std::string,cricket::RidDescription>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::RidDescription>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::RidDescription>>>::destroy(__p[0].__r_.__value_.__l.__size_);
                                        v404 = (const cricket::RidDescription *)v691;
                                        v405 = v692;
LABEL_1056:
                                        std::vector<cricket::RidDescription>::__assign_with_size[abi:sn180100]<cricket::RidDescription*,cricket::RidDescription*>(v390 + 256, v404, (const cricket::RidDescription *)v405, 0xCCCCCCCCCCCCCCCDLL * (((char *)v405 - (char *)v404) >> 4));
                                        v413 = (char *)v676;
                                        v414 = (char *)v677;
                                        if (v676 != v677)
                                        {
                                          if (SHIBYTE(v663.__r_.__value_.__r.__words[2]) < 0)
                                          {
                                            v415 = v663.__r_.__value_.__l.__size_;
                                            if ((v663.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                                              goto LABEL_1472;
                                            v416 = (std::string *)v663.__r_.__value_.__r.__words[0];
                                            if (v663.__r_.__value_.__l.__size_)
                                            {
                                              if (!v663.__r_.__value_.__r.__words[0])
                                                goto LABEL_1472;
                                            }
                                          }
                                          else
                                          {
                                            v415 = HIBYTE(v663.__r_.__value_.__r.__words[2]);
                                            v416 = &v663;
                                          }
                                          v421 = *a11;
                                          v422 = (v415 & 0xFFFFFFFFFFFFFFF8) + 8;
                                          if ((v415 | 7) != 0x17)
                                            v422 = v415 | 7;
                                          v639 = v422 + 1;
                                          v637 = (v422 + 1) | 0x8000000000000000;
                                          v424 = __p <= (std::string *)"default"
                                              && (char *)__p[0].__r_.__value_.__r.__words + 7 > "default";
                                          __dsta = v424;
                                          v643 = *a11;
                                          while (1)
                                          {
                                            if (v413[31] < 0)
                                            {
                                              if (*((_QWORD *)v413 + 2))
                                                goto LABEL_1090;
                                            }
                                            else if (v413[31])
                                            {
                                              goto LABEL_1090;
                                            }
                                            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                                            {
                                              v640 = v640 & 0xFFFFFFFF00000000 | 0x1612;
                                              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v426, v427, v428, v429, v430, v431, v432, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
                                            }
LABEL_1090:
                                            v729[1] = 0;
                                            v729[0] = 0;
                                            *(_QWORD *)&v730 = 0;
                                            memset(&__sz, 0, sizeof(__sz));
                                            if ((v421 & 1) != 0)
                                            {
                                              std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)v729, (__int128 *)v664, *(__int128 **)v665, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v665 - (_QWORD)v664) >> 3));
                                              if (v415 > 0x7FFFFFFFFFFFFFF7)
                                                goto LABEL_1452;
                                              if (v415 > 0x16)
                                              {
                                                v434 = (std::string *)operator new(v639);
                                                __p[0].__r_.__value_.__r.__words[2] = v637;
                                                __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v434;
                                                __p[0].__r_.__value_.__l.__size_ = v415;
                                                v435 = (std::string *)((char *)v434 + v415);
                                                if (v434 > v416)
                                                {
LABEL_1105:
                                                  if (v415)
                                                    memmove(v434, v416, v415);
                                                  v435->__r_.__value_.__s.__data_[0] = 0;
                                                  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
                                                    operator delete(__sz.__r_.__value_.__l.__data_);
                                                  *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                                  v437 = __p[0].__r_.__value_.__r.__words[2];
                                                  goto LABEL_1110;
                                                }
                                              }
                                              else
                                              {
                                                *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v415;
                                                v434 = __p;
                                                v435 = (std::string *)((char *)__p + v415);
                                                if (__p > v416)
                                                  goto LABEL_1105;
                                              }
                                              if (v435 > v416)
                                                goto LABEL_1472;
                                              goto LABEL_1105;
                                            }
                                            if ((v421 & 2) != 0)
                                            {
                                              v729[1] = (std::string::size_type)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)v729, (uint64_t)(v413 + 32));
                                              if (&__sz == (std::string *)(v413 + 56))
                                                goto LABEL_1111;
                                              v436 = v413[79];
                                              if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
                                              {
                                                if (v436 >= 0)
                                                  v464 = v413 + 56;
                                                else
                                                  v464 = (const std::string::value_type *)*((_QWORD *)v413 + 7);
                                                if (v436 >= 0)
                                                  v465 = v413[79];
                                                else
                                                  v465 = *((_QWORD *)v413 + 8);
                                                std::string::__assign_no_alias<false>(&__sz, v464, v465);
                                              }
                                              else
                                              {
                                                if ((v413[79] & 0x80) == 0)
                                                {
                                                  *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = *(_OWORD *)(v413 + 56);
                                                  v437 = *((_QWORD *)v413 + 9);
LABEL_1110:
                                                  __sz.__r_.__value_.__r.__words[2] = v437;
                                                  goto LABEL_1111;
                                                }
                                                std::string::__assign_no_alias<true>(&__sz, *((char **)v413 + 7), *((_QWORD *)v413 + 8));
                                              }
                                            }
                                            else if (!v421)
                                            {
                                              *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 7;
                                              if (__dsta)
                                                goto LABEL_1472;
                                              strcpy((char *)__p, "default");
                                              v433 = (std::string *)operator new(0x18uLL);
                                              *v433 = __p[0];
                                              *(_QWORD *)&v730 = v433 + 1;
                                              v729[0] = (std::string::size_type)v433;
                                              v729[1] = (std::string::size_type)&v433[1];
                                            }
LABEL_1111:
                                            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
                                              std::string::__init_copy_ctor_external(&v698, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
                                            else
                                              v698 = __sz;
                                            v438 = v679;
                                            v439 = v680;
                                            __p[0] = v698;
                                            memset(&v698, 0, sizeof(v698));
                                            v440 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
                                            if (v679 == (cricket::StreamParams *)v680)
                                            {
LABEL_1131:
                                              if ((v440 & 0x80000000) == 0)
                                                goto LABEL_1146;
                                              goto LABEL_1132;
                                            }
                                            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                              v441 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
                                            else
                                              v441 = __p[0].__r_.__value_.__l.__size_;
                                            if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                            {
                                              while (1)
                                              {
                                                v445 = *((unsigned __int8 *)v438 + 23);
                                                if ((v445 & 0x80u) == 0)
                                                  v446 = *((unsigned __int8 *)v438 + 23);
                                                else
                                                  v446 = *((_QWORD *)v438 + 1);
                                                if (v446 == v441)
                                                {
                                                  if ((v445 & 0x80) != 0)
                                                  {
                                                    if (!memcmp(*(const void **)v438, __p, *((_QWORD *)v438 + 1)))
                                                      goto LABEL_1131;
                                                  }
                                                  else
                                                  {
                                                    if (!*((_BYTE *)v438 + 23))
                                                      goto LABEL_1131;
                                                    v447 = 0;
                                                    while (*((unsigned __int8 *)v438 + v447) == __p[0].__r_.__value_.__s.__data_[v447])
                                                    {
                                                      if (v445 == ++v447)
                                                        goto LABEL_1131;
                                                    }
                                                  }
                                                }
                                                v438 = (cricket::StreamParams *)((char *)v438 + 144);
                                                if (v438 == (cricket::StreamParams *)v439)
                                                {
                                                  v438 = (cricket::StreamParams *)v439;
                                                  if (v440 < 0)
                                                    goto LABEL_1132;
                                                  goto LABEL_1146;
                                                }
                                              }
                                            }
                                            v442 = v416;
                                            v443 = v414;
                                            v444 = (unsigned __int8 *)__p[0].__r_.__value_.__r.__words[0];
                                            while (1)
                                            {
                                              v448 = *((unsigned __int8 *)v438 + 23);
                                              v449 = (v448 & 0x80u) == 0
                                                   ? *((unsigned __int8 *)v438 + 23)
                                                   : *((_QWORD *)v438 + 1);
                                              if (v449 == v441)
                                                break;
LABEL_1135:
                                              v438 = (cricket::StreamParams *)((char *)v438 + 144);
                                              if (v438 == (cricket::StreamParams *)v439)
                                              {
                                                v438 = (cricket::StreamParams *)v439;
                                                v414 = v443;
                                                v416 = v442;
                                                if (v440 < 0)
                                                  goto LABEL_1132;
                                                goto LABEL_1146;
                                              }
                                            }
                                            if ((v448 & 0x80) != 0)
                                            {
                                              if (!memcmp(*(const void **)v438, v444, *((_QWORD *)v438 + 1)))
                                                goto LABEL_1145;
                                              goto LABEL_1135;
                                            }
                                            if (*((_BYTE *)v438 + 23))
                                            {
                                              v450 = 0;
                                              while (*((unsigned __int8 *)v438 + v450) == v444[v450])
                                              {
                                                if (v448 == ++v450)
                                                  goto LABEL_1145;
                                              }
                                              goto LABEL_1135;
                                            }
LABEL_1145:
                                            v414 = v443;
                                            v416 = v442;
                                            if ((v440 & 0x80000000) == 0)
                                              goto LABEL_1146;
LABEL_1132:
                                            operator delete(__p[0].__r_.__value_.__l.__data_);
                                            if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(v698.__r_.__value_.__l.__data_);
LABEL_1146:
                                            v421 = v643;
                                            if (v438 == (cricket::StreamParams *)v680)
                                            {
                                              memset(v702, 0, 32);
                                              v701 = 0u;
                                              memset(__p, 0, sizeof(__p));
                                              if ((unint64_t)v438 < v681)
                                              {
                                                if (v438)
                                                {
                                                  *((_QWORD *)v438 + 2) = 0;
                                                  *((_QWORD *)v438 + 3) = 0;
                                                  *(_QWORD *)v438 = 0;
                                                  *((_QWORD *)v438 + 1) = 0;
                                                  memset(__p, 0, 24);
                                                  *((_QWORD *)v438 + 4) = 0;
                                                  *((_QWORD *)v438 + 5) = 0;
                                                  *(_OWORD *)((char *)v438 + 24) = *(_OWORD *)&__p[1].__r_.__value_.__l.__data_;
                                                  *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = 0uLL;
                                                  *((_QWORD *)v438 + 5) = *((_QWORD *)&__p[1].__r_.__value_.__l + 2);
                                                  *((_QWORD *)v438 + 6) = 0;
                                                  __p[1].__r_.__value_.__r.__words[2] = 0;
                                                  *((_QWORD *)v438 + 7) = 0;
                                                  *((_QWORD *)v438 + 8) = 0;
                                                  *((std::string *)v438 + 2) = __p[2];
                                                  memset(&__p[2], 0, sizeof(std::string));
                                                  v451 = *(_OWORD *)&__p[3].__r_.__value_.__l.__data_;
                                                  *((_QWORD *)v438 + 11) = *((_QWORD *)&__p[3].__r_.__value_.__l + 2);
                                                  *((_QWORD *)v438 + 12) = 0;
                                                  *(_OWORD *)((char *)v438 + 72) = v451;
                                                  memset(&__p[3], 0, sizeof(std::string));
                                                  *((_QWORD *)v438 + 13) = 0;
                                                  *((_QWORD *)v438 + 14) = 0;
                                                  *((_OWORD *)v438 + 6) = v701;
                                                  v701 = 0uLL;
                                                  *((_QWORD *)v438 + 14) = *(_QWORD *)v702;
                                                  *((_QWORD *)v438 + 15) = 0;
                                                  *(_QWORD *)v702 = 0;
                                                  *((_QWORD *)v438 + 16) = 0;
                                                  *((_QWORD *)v438 + 17) = 0;
                                                  *(_OWORD *)((char *)v438 + 120) = *(_OWORD *)&v702[8];
                                                  *((_QWORD *)v438 + 17) = *(_QWORD *)&v702[24];
                                                  memset(&v702[8], 0, 24);
                                                  v452 = (std::string *)((char *)v438 + 144);
                                                  goto LABEL_1151;
                                                }
LABEL_1472:
                                                __break(1u);
                                                return;
                                              }
                                              v452 = (std::string *)std::vector<cricket::StreamParams>::__push_back_slow_path<cricket::StreamParams>((void **)&v679, (uint64_t)__p);
LABEL_1151:
                                              v680 = v452;
                                              cricket::StreamParams::~StreamParams((cricket::StreamParams *)__p);
                                              v438 = (cricket::StreamParams *)&v680[-6];
                                            }
                                            cricket::StreamParams::add_ssrc(v438, *(_DWORD *)v413);
                                            v453 = (std::string *)((char *)v438 + 72);
                                            if ((char *)v438 + 72 == v413 + 8)
                                              goto LABEL_1164;
                                            v454 = v413[31];
                                            if (*((char *)v438 + 95) < 0)
                                            {
                                              if (v454 >= 0)
                                                v457 = v413 + 8;
                                              else
                                                v457 = (const std::string::value_type *)*((_QWORD *)v413 + 1);
                                              if (v454 >= 0)
                                                v458 = v413[31];
                                              else
                                                v458 = *((_QWORD *)v413 + 2);
                                              std::string::__assign_no_alias<false>(v453, v457, v458);
LABEL_1164:
                                              v456 = (std::string **)((char *)v438 + 96);
                                              if ((std::string::size_type *)((char *)v438 + 96) == v729)
                                                goto LABEL_1166;
                                              goto LABEL_1165;
                                            }
                                            if ((v413[31] & 0x80) == 0)
                                            {
                                              v455 = *(_OWORD *)(v413 + 8);
                                              *((_QWORD *)v438 + 11) = *((_QWORD *)v413 + 3);
                                              *(_OWORD *)&v453->__r_.__value_.__l.__data_ = v455;
                                              v456 = (std::string **)((char *)v438 + 96);
                                              if ((std::string::size_type *)((char *)v438 + 96) == v729)
                                                goto LABEL_1166;
LABEL_1165:
                                              std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>(v456, (__int128 *)v729[0], (__int128 *)v729[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v729[1] - v729[0]) >> 3));
                                              goto LABEL_1166;
                                            }
                                            std::string::__assign_no_alias<true>(v453, *((char **)v413 + 1), *((_QWORD *)v413 + 2));
                                            v456 = (std::string **)((char *)v438 + 96);
                                            if ((std::string::size_type *)((char *)v438 + 96) != v729)
                                              goto LABEL_1165;
LABEL_1166:
                                            if (v438 == (cricket::StreamParams *)&__sz)
                                              goto LABEL_1179;
                                            if (*((char *)v438 + 23) < 0)
                                            {
                                              if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                p_sz = &__sz;
                                              else
                                                p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
                                              if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                                v462 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
                                              else
                                                v462 = __sz.__r_.__value_.__l.__size_;
                                              std::string::__assign_no_alias<false>((std::string *)v438, (const std::string::value_type *)p_sz, v462);
LABEL_1179:
                                              if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                goto LABEL_1180;
LABEL_1170:
                                              operator delete(__sz.__r_.__value_.__l.__data_);
                                              v460 = v729[0];
                                              if (v729[0])
                                                goto LABEL_1181;
                                              goto LABEL_1083;
                                            }
                                            if ((*((_BYTE *)&__sz.__r_.__value_.__s + 23) & 0x80) != 0)
                                            {
                                              std::string::__assign_no_alias<true>(v438, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
                                              if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                goto LABEL_1180;
                                              goto LABEL_1170;
                                            }
                                            v459 = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
                                            *((_QWORD *)v438 + 2) = *((_QWORD *)&__sz.__r_.__value_.__l + 2);
                                            *(_OWORD *)v438 = v459;
                                            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
                                              goto LABEL_1170;
LABEL_1180:
                                            v460 = v729[0];
                                            if (v729[0])
                                            {
LABEL_1181:
                                              v463 = v729[1];
                                              v425 = (void *)v460;
                                              if (v729[1] != v460)
                                              {
                                                do
                                                {
                                                  if (*(char *)(v463 - 1) < 0)
                                                    operator delete(*(void **)(v463 - 24));
                                                  v463 -= 24;
                                                }
                                                while (v463 != v460);
                                                v425 = (void *)v729[0];
                                              }
                                              v729[1] = v460;
                                              operator delete(v425);
                                            }
LABEL_1083:
                                            v413 += 80;
                                            if (v413 == v414)
                                            {
                                              v466 = v679;
                                              for (m = v680;
                                                    v466 != (cricket::StreamParams *)m;
                                                    v466 = (cricket::StreamParams *)((char *)v466 + 144))
                                              {
                                                if (*((char *)v466 + 23) < 0)
                                                {
                                                  if (*((_QWORD *)v466 + 1))
                                                    continue;
                                                }
                                                else if (*((_BYTE *)v466 + 23))
                                                {
                                                  continue;
                                                }
                                                memset(__p, 0, 24);
                                                if (*((char *)v466 + 23) < 0)
                                                  operator delete(*(void **)v466);
                                                v468 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                                *((_QWORD *)v466 + 2) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                                                *(_OWORD *)v466 = v468;
                                              }
LABEL_1236:
                                              v474 = (char *)v673;
                                              v644 = v674;
                                              if (v673 != v674)
                                              {
                                                while (1)
                                                {
                                                  v475 = (__int32 *)*((_QWORD *)v474 + 3);
                                                  if (v475 != *((__int32 **)v474 + 4))
                                                  {
                                                    v476 = v679;
                                                    v477 = v680;
                                                    if (v679 != (cricket::StreamParams *)v680)
                                                      break;
                                                  }
LABEL_1238:
                                                  v474 += 48;
                                                  if (v474 == v644)
                                                    goto LABEL_1283;
                                                }
                                                v478 = *v475;
                                                while (2)
                                                {
                                                  v485 = (__int32 *)*((_QWORD *)v476 + 4);
                                                  v486 = wmemchr(*((__int32 **)v476 + 3), v478, ((uint64_t)v485 - *((_QWORD *)v476 + 3)) >> 2);
                                                  if (v486)
                                                    v487 = v486;
                                                  else
                                                    v487 = v485;
                                                  if (v487 == v485)
                                                    goto LABEL_1247;
                                                  v489 = *((_QWORD *)v476 + 7);
                                                  v488 = *((_QWORD *)v476 + 8);
                                                  if (v489 < v488)
                                                  {
                                                    if (!v489)
                                                      goto LABEL_1472;
                                                    if (v474[23] < 0)
                                                    {
                                                      std::string::__init_copy_ctor_external(*((std::string **)v476 + 7), *(const std::string::value_type **)v474, *((_QWORD *)v474 + 1));
                                                      *(_QWORD *)(v489 + 24) = 0;
                                                      *(_QWORD *)(v489 + 32) = 0;
                                                      *(_QWORD *)(v489 + 40) = 0;
                                                      v480 = (_BYTE *)*((_QWORD *)v474 + 3);
                                                      v479 = (_BYTE *)*((_QWORD *)v474 + 4);
                                                      v481 = v479 - v480;
                                                      if (v479 == v480)
                                                        goto LABEL_1245;
                                                    }
                                                    else
                                                    {
                                                      v490 = *(_OWORD *)v474;
                                                      *(_QWORD *)(v489 + 16) = *((_QWORD *)v474 + 2);
                                                      *(_OWORD *)v489 = v490;
                                                      *(_QWORD *)(v489 + 24) = 0;
                                                      *(_QWORD *)(v489 + 32) = 0;
                                                      *(_QWORD *)(v489 + 40) = 0;
                                                      v480 = (_BYTE *)*((_QWORD *)v474 + 3);
                                                      v491 = (_BYTE *)*((_QWORD *)v474 + 4);
                                                      v481 = v491 - v480;
                                                      if (v491 == v480)
                                                        goto LABEL_1245;
                                                    }
                                                    if (v481 < 0)
                                                      goto LABEL_1452;
                                                    v482 = (char *)operator new(v481);
                                                    *(_QWORD *)(v489 + 24) = v482;
                                                    *(_QWORD *)(v489 + 32) = v482;
                                                    v483 = &v482[4 * (v481 >> 2)];
                                                    *(_QWORD *)(v489 + 40) = v483;
                                                    memcpy(v482, v480, v481);
                                                    *(_QWORD *)(v489 + 32) = v483;
LABEL_1245:
                                                    v484 = (std::string *)(v489 + 48);
LABEL_1246:
                                                    *((_QWORD *)v476 + 7) = v484;
LABEL_1247:
                                                    v476 = (cricket::StreamParams *)((char *)v476 + 144);
                                                    if (v476 == (cricket::StreamParams *)v477)
                                                      goto LABEL_1238;
                                                    continue;
                                                  }
                                                  break;
                                                }
                                                v492 = *((_QWORD *)v476 + 6);
                                                v493 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v489 - v492) >> 4);
                                                v494 = v493 + 1;
                                                if (v493 + 1 > 0x555555555555555)
                                                  goto LABEL_1452;
                                                v495 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v488 - v492) >> 4);
                                                if (2 * v495 > v494)
                                                  v494 = 2 * v495;
                                                if (v495 >= 0x2AAAAAAAAAAAAAALL)
                                                  v496 = 0x555555555555555;
                                                else
                                                  v496 = v494;
                                                if (!v496)
                                                  goto LABEL_1472;
                                                if (v496 > 0x555555555555555)
                                                  std::__throw_bad_array_new_length[abi:sn180100]();
                                                v497 = 48 * v496;
                                                v498 = (char *)operator new(48 * v496);
                                                v499 = (std::string *)&v498[48 * v493];
                                                if (v474[23] < 0)
                                                {
                                                  std::string::__init_copy_ctor_external(v499, *(const std::string::value_type **)v474, *((_QWORD *)v474 + 1));
                                                  v499[1].__r_.__value_.__r.__words[0] = 0;
                                                  v499[1].__r_.__value_.__l.__size_ = 0;
                                                  v499[1].__r_.__value_.__r.__words[2] = 0;
                                                  v502 = (_BYTE *)*((_QWORD *)v474 + 3);
                                                  v509 = (_BYTE *)*((_QWORD *)v474 + 4);
                                                  v503 = v509 - v502;
                                                  if (v509 == v502)
                                                    goto LABEL_1271;
LABEL_1267:
                                                  if (v503 < 0)
                                                    goto LABEL_1452;
                                                  v504 = (char *)operator new(v503);
                                                  v499[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v504;
                                                  v499[1].__r_.__value_.__l.__size_ = (std::string::size_type)v504;
                                                  v505 = &v504[4 * (v503 >> 2)];
                                                  v499[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v505;
                                                  memcpy(v504, v502, v503);
                                                  v499[1].__r_.__value_.__l.__size_ = (std::string::size_type)v505;
                                                  v506 = &v498[v497];
                                                  v484 = v499 + 2;
                                                  v507 = (char *)*((_QWORD *)v476 + 6);
                                                  v508 = (char *)*((_QWORD *)v476 + 7);
                                                  if (v508 == v507)
                                                    goto LABEL_1280;
                                                  do
                                                  {
LABEL_1272:
                                                    v510 = *((_OWORD *)v508 - 3);
                                                    v499[-2].__r_.__value_.__r.__words[2] = *((_QWORD *)v508 - 4);
                                                    *(_OWORD *)&v499[-2].__r_.__value_.__l.__data_ = v510;
                                                    *((_QWORD *)v508 - 5) = 0;
                                                    *((_QWORD *)v508 - 4) = 0;
                                                    *((_QWORD *)v508 - 6) = 0;
                                                    v499[-1].__r_.__value_.__r.__words[0] = 0;
                                                    v499[-1].__r_.__value_.__l.__size_ = 0;
                                                    v499[-1].__r_.__value_.__r.__words[2] = 0;
                                                    *(_OWORD *)&v499[-1].__r_.__value_.__l.__data_ = *(_OWORD *)(v508 - 24);
                                                    v499[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v508 - 1);
                                                    v499 -= 2;
                                                    *((_QWORD *)v508 - 3) = 0;
                                                    *((_QWORD *)v508 - 2) = 0;
                                                    *((_QWORD *)v508 - 1) = 0;
                                                    v508 -= 48;
                                                  }
                                                  while (v508 != v507);
                                                  v508 = (char *)*((_QWORD *)v476 + 6);
                                                  v511 = (char *)*((_QWORD *)v476 + 7);
                                                  *((_QWORD *)v476 + 6) = v499;
                                                  *((_QWORD *)v476 + 7) = v484;
                                                  for (*((_QWORD *)v476 + 8) = v506; v511 != v508; v511 -= 48)
                                                  {
                                                    v512 = (void *)*((_QWORD *)v511 - 3);
                                                    if (v512)
                                                    {
                                                      *((_QWORD *)v511 - 2) = v512;
                                                      operator delete(v512);
                                                    }
                                                    if (*(v511 - 25) < 0)
                                                      operator delete(*((void **)v511 - 6));
                                                  }
                                                }
                                                else
                                                {
                                                  v500 = *(_OWORD *)v474;
                                                  v499->__r_.__value_.__r.__words[2] = *((_QWORD *)v474 + 2);
                                                  *(_OWORD *)&v499->__r_.__value_.__l.__data_ = v500;
                                                  v499[1].__r_.__value_.__r.__words[0] = 0;
                                                  v499[1].__r_.__value_.__l.__size_ = 0;
                                                  v499[1].__r_.__value_.__r.__words[2] = 0;
                                                  v502 = (_BYTE *)*((_QWORD *)v474 + 3);
                                                  v501 = (_BYTE *)*((_QWORD *)v474 + 4);
                                                  v503 = v501 - v502;
                                                  if (v501 != v502)
                                                    goto LABEL_1267;
LABEL_1271:
                                                  v506 = &v498[v497];
                                                  v484 = v499 + 2;
                                                  v507 = (char *)*((_QWORD *)v476 + 6);
                                                  v508 = (char *)*((_QWORD *)v476 + 7);
                                                  if (v508 != v507)
                                                    goto LABEL_1272;
LABEL_1280:
                                                  *((_QWORD *)v476 + 6) = v499;
                                                  *((_QWORD *)v476 + 7) = v484;
                                                  *((_QWORD *)v476 + 8) = v506;
                                                }
                                                if (v508)
                                                  operator delete(v508);
                                                goto LABEL_1246;
                                              }
LABEL_1283:
                                              v513 = v679;
                                              v514 = v680;
                                              v515 = (_QWORD *)a12;
                                              if (v679 != (cricket::StreamParams *)v680)
                                              {
                                                v516 = *(std::string **)(a12 + 104);
                                                do
                                                {
                                                  while ((unint64_t)v516 >= v515[14])
                                                  {
                                                    v516 = std::vector<cricket::StreamParams>::__push_back_slow_path<cricket::StreamParams const&>((std::string **)(a12 + 96), v513);
                                                    v515 = (_QWORD *)a12;
                                                    *(_QWORD *)(a12 + 104) = v516;
                                                    v513 = (cricket::StreamParams *)((char *)v513 + 144);
                                                    if (v513 == (cricket::StreamParams *)v514)
                                                      goto LABEL_1289;
                                                  }
                                                  if (!v516)
                                                    goto LABEL_1472;
                                                  v516 = cricket::StreamParams::StreamParams(v516, v513) + 6;
                                                  v515 = (_QWORD *)a12;
                                                  *(_QWORD *)(a12 + 104) = v516;
                                                  v513 = (cricket::StreamParams *)((char *)v513 + 144);
                                                }
                                                while (v513 != (cricket::StreamParams *)v514);
                                              }
LABEL_1289:
                                              v517 = v515[35];
                                              v518 = v515[36];
                                              v519 = v518 - v517;
                                              if (v518 != v517)
                                              {
                                                if (0x84BDA12F684BDA13 * (v519 >> 3) >= 0x12F684BDA12F685)
                                                  goto LABEL_1452;
                                                v520 = (const cricket::Codec *)operator new(v519);
                                                v521 = 0;
                                                do
                                                {
                                                  cricket::Codec::Codec((const cricket::Codec *)((char *)v520 + v521), (const cricket::Codec *)(v517 + v521));
                                                  v521 += 216;
                                                }
                                                while (v517 + v521 != v518);
                                                v522 = v521 / 216;
                                                v523 = (const cricket::Codec *)((char *)v520 + 216 * (v521 / 216));
                                                if (v521)
                                                {
                                                  v524 = 0;
                                                  while (*(_DWORD *)((char *)v520 + v524 + 12) != -1)
                                                  {
                                                    v524 += 216;
                                                    if (216 * v522 == v524)
                                                      goto LABEL_1297;
                                                  }
                                                  cricket::Codec::Codec((cricket::Codec *)v729, (const cricket::Codec *)((char *)v520 + v524));
                                                  if (216 * v522 == v524)
                                                    goto LABEL_1472;
                                                  if ((const cricket::Codec *)((char *)v520 + v524 + 216) == v523)
                                                  {
                                                    v525 = (const cricket::Codec *)((char *)v520 + v524);
                                                  }
                                                  else
                                                  {
                                                    v535 = (uint64_t)v520 + v524;
                                                    do
                                                    {
                                                      v525 = (const cricket::Codec *)(v535 + 216);
                                                      cricket::Codec::operator=(v535, v535 + 216);
                                                      v536 = v535 + 432;
                                                      v535 += 216;
                                                    }
                                                    while ((const cricket::Codec *)v536 != v523);
                                                  }
                                                  if (v523 != v525)
                                                  {
                                                    v566 = 216 * v522;
                                                    v567 = v525 - v520 - 216 * v522;
                                                    v568 = (void (***)(void))((char *)v520 + v566 - 216);
                                                    do
                                                    {
                                                      v569 = *v568;
                                                      v568 -= 27;
                                                      (*v569)();
                                                      v567 += 216;
                                                    }
                                                    while (v567);
                                                  }
                                                  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0B1418;
                                                  __p[0].__r_.__value_.__l.__size_ = v729[1];
                                                  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v730;
                                                  __p[1].__r_.__value_.__l.__size_ = v731;
                                                  v730 = 0uLL;
                                                  v731 = 0;
                                                  *(_OWORD *)&__p[1].__r_.__value_.__r.__words[2] = v732;
                                                  __p[2].__r_.__value_.__s.__data_[8] = 0;
                                                  __p[3].__r_.__value_.__s.__data_[8] = 0;
                                                  if (v735)
                                                  {
                                                    *(_OWORD *)&__p[2].__r_.__value_.__r.__words[1] = v733;
                                                    __p[3].__r_.__value_.__r.__words[0] = v734;
                                                    v734 = 0;
                                                    v733 = 0uLL;
                                                    __p[3].__r_.__value_.__s.__data_[8] = 1;
                                                  }
                                                  __p[3].__r_.__value_.__r.__words[2] = v736;
                                                  v701 = v737;
                                                  *(_OWORD *)v702 = v738;
                                                  *(_QWORD *)&v702[16] = v739;
                                                  v736 = 0;
                                                  v702[24] = 0;
                                                  LOBYTE(v704) = 0;
                                                  if (v742)
                                                  {
                                                    *(_OWORD *)&v702[24] = v740;
                                                    v703 = v741;
                                                    v741 = 0;
                                                    v740 = 0uLL;
                                                    LOBYTE(v704) = 1;
                                                  }
                                                  *((_QWORD *)&v704 + 1) = v743;
                                                  v705 = v744;
                                                  if (*((_QWORD *)&v744 + 1))
                                                  {
                                                    *(_QWORD *)(v744 + 16) = &v705;
                                                    v743 = &v744;
                                                    v744 = 0uLL;
                                                  }
                                                  else
                                                  {
                                                    *((_QWORD *)&v704 + 1) = &v705;
                                                  }
                                                  v706 = 0uLL;
                                                  v707 = 0;
                                                  v570 = v745;
                                                  v571 = v746;
                                                  v572 = v746 - v745;
                                                  if (v746 != v745)
                                                  {
                                                    v573 = 0xAAAAAAAAAAAAAAABLL * (v572 >> 4);
                                                    if (v573 <= 0x555555555555555)
                                                    {
                                                      v574 = (char *)operator new(v572);
                                                      v575 = 0;
                                                      *(_QWORD *)&v706 = v574;
                                                      *((_QWORD *)&v706 + 1) = v574;
                                                      v707 = &v574[48 * v573];
                                                      while (1)
                                                      {
                                                        v580 = (__int128 *)(v570 + v575);
                                                        v581 = (std::string *)&v574[v575];
                                                        if (*(char *)(v570 + v575 + 23) < 0)
                                                        {
                                                          std::string::__init_copy_ctor_external(v581, *(const std::string::value_type **)v580, *((_QWORD *)v580 + 1));
                                                          v576 = (std::string *)&v574[v575 + 24];
                                                          v577 = v570 + v575;
                                                          v578 = v570 + v575 + 24;
                                                          if ((*(char *)(v570 + v575 + 47) & 0x80000000) == 0)
                                                            goto LABEL_1404;
LABEL_1407:
                                                          std::string::__init_copy_ctor_external(v576, *(const std::string::value_type **)v578, *(_QWORD *)(v577 + 32));
                                                          v575 += 48;
                                                          if (v570 + v575 == v571)
                                                          {
LABEL_1408:
                                                            *((_QWORD *)&v706 + 1) = &v574[v575];
                                                            goto LABEL_1409;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          v582 = *v580;
                                                          v581->__r_.__value_.__r.__words[2] = *((_QWORD *)v580 + 2);
                                                          *(_OWORD *)&v581->__r_.__value_.__l.__data_ = v582;
                                                          v576 = (std::string *)&v574[v575 + 24];
                                                          v577 = v570 + v575;
                                                          v578 = v570 + v575 + 24;
                                                          if (*(char *)(v570 + v575 + 47) < 0)
                                                            goto LABEL_1407;
LABEL_1404:
                                                          v579 = *(_OWORD *)v578;
                                                          v576->__r_.__value_.__r.__words[2] = *(_QWORD *)(v578 + 16);
                                                          *(_OWORD *)&v576->__r_.__value_.__l.__data_ = v579;
                                                          v575 += 48;
                                                          if (v570 + v575 == v571)
                                                            goto LABEL_1408;
                                                        }
                                                      }
                                                    }
LABEL_1452:
                                                    abort();
                                                  }
LABEL_1409:
                                                  LOBYTE(v708) = 1;
                                                  cricket::Codec::~Codec((cricket::Codec *)v729);
                                                  if ((_BYTE)v708)
                                                  {
                                                    if (v520 != v525)
                                                    {
                                                      v583 = v520;
                                                      while (1)
                                                      {
                                                        if (!(_BYTE)v708)
                                                          goto LABEL_1472;
                                                        v585 = *((_QWORD *)&v706 + 1);
                                                        v584 = v706;
                                                        if ((_QWORD)v706 != *((_QWORD *)&v706 + 1))
                                                          break;
LABEL_1412:
                                                        v583 = (const cricket::Codec *)((char *)v583 + 216);
                                                        if (v583 == v525)
                                                          goto LABEL_1436;
                                                      }
                                                      while (2)
                                                      {
                                                        v586 = *(unsigned __int8 *)(v584 + 23);
                                                        if ((v586 & 0x80u) != 0)
                                                          v586 = *(_QWORD *)(v584 + 8);
                                                        if (!v586)
                                                          goto LABEL_1417;
                                                        v587 = *((_QWORD *)v583 + 24);
                                                        v588 = *((_QWORD *)v583 + 25);
                                                        if (v587 != v588)
                                                        {
                                                          do
                                                          {
                                                            if ((cricket::FeedbackParam::operator==(v587, (unsigned __int8 *)v584) & 1) != 0)goto LABEL_1416;
                                                            v587 += 48;
                                                          }
                                                          while (v587 != v588);
                                                          v587 = v588;
                                                        }
LABEL_1416:
                                                        if (v587 != v588)
                                                        {
LABEL_1417:
                                                          v584 += 48;
                                                          if (v584 == v585)
                                                            goto LABEL_1412;
                                                          continue;
                                                        }
                                                        break;
                                                      }
                                                      v589 = *((_QWORD *)v583 + 25);
                                                      if (v589 >= *((_QWORD *)v583 + 26))
                                                      {
                                                        *((_QWORD *)v583 + 25) = std::vector<cricket::FeedbackParam>::__push_back_slow_path<cricket::FeedbackParam const&>((void **)v583 + 24, v584);
                                                        if (cricket::FeedbackParams::HasDuplicateEntries((uint64_t)v583 + 192))
                                                          goto LABEL_1435;
                                                        goto LABEL_1417;
                                                      }
                                                      if (!v589)
                                                        goto LABEL_1472;
                                                      if (*(char *)(v584 + 23) < 0)
                                                      {
                                                        std::string::__init_copy_ctor_external(*((std::string **)v583 + 25), *(const std::string::value_type **)v584, *(_QWORD *)(v584 + 8));
                                                        v591 = (std::string *)(v589 + 24);
                                                        if ((*(char *)(v584 + 47) & 0x80000000) == 0)
                                                        {
LABEL_1429:
                                                          v592 = *(_OWORD *)(v584 + 24);
                                                          v591->__r_.__value_.__r.__words[2] = *(_QWORD *)(v584 + 40);
                                                          *(_OWORD *)&v591->__r_.__value_.__l.__data_ = v592;
                                                          *((_QWORD *)v583 + 25) = v589 + 48;
                                                          if (cricket::FeedbackParams::HasDuplicateEntries((uint64_t)v583 + 192))
                                                            goto LABEL_1435;
                                                          goto LABEL_1417;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v590 = *(_OWORD *)v584;
                                                        *(_QWORD *)(v589 + 16) = *(_QWORD *)(v584 + 16);
                                                        *(_OWORD *)v589 = v590;
                                                        v591 = (std::string *)(v589 + 24);
                                                        if ((*(char *)(v584 + 47) & 0x80000000) == 0)
                                                          goto LABEL_1429;
                                                      }
                                                      std::string::__init_copy_ctor_external(v591, *(const std::string::value_type **)(v584 + 24), *(_QWORD *)(v584 + 32));
                                                      *((_QWORD *)v583 + 25) = v589 + 48;
                                                      if (cricket::FeedbackParams::HasDuplicateEntries((uint64_t)v583 + 192))
                                                      {
LABEL_1435:
                                                        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/codec.cc", 149, "!HasDuplicateEntries()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v593, v594, v595, v596, v613);
                                                        goto LABEL_1436;
                                                      }
                                                      goto LABEL_1417;
                                                    }
LABEL_1436:
                                                    std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>(v626, v520, v525, 0x84BDA12F684BDA13 * ((v525 - v520) >> 3));
                                                    if ((_BYTE)v708)
                                                      cricket::Codec::~Codec((cricket::Codec *)__p);
                                                  }
                                                }
                                                else
                                                {
LABEL_1297:
                                                  v525 = (const cricket::Codec *)((char *)v520 + 216 * (v521 / 216));
                                                }
                                                if (v525 != v520)
                                                {
                                                  v526 = (const cricket::Codec *)((char *)v525 - 216);
                                                  v527 = v526;
                                                  do
                                                  {
                                                    v528 = *(void (***)(const cricket::Codec *))v527;
                                                    v527 = (const cricket::Codec *)((char *)v527 - 216);
                                                    (*v528)(v526);
                                                    v103 = v526 == v520;
                                                    v526 = v527;
                                                  }
                                                  while (!v103);
                                                }
                                                operator delete(v520);
                                                v529 = *(const cricket::Codec **)(a12 + 280);
                                                v530 = *(const cricket::Codec **)(a12 + 288);
                                                if (v529 != v530)
                                                {
                                                  while (1)
                                                  {
                                                    cricket::Codec::Codec((cricket::Codec *)__p, v529);
                                                    v531 = __p[1].__r_.__value_.__s.__data_[15] >= 0
                                                         ? __p[1].__r_.__value_.__s.__data_[15]
                                                         : __p[1].__r_.__value_.__r.__words[0];
                                                    cricket::Codec::~Codec((cricket::Codec *)__p);
                                                    if (!v531)
                                                      break;
                                                    v529 = (const cricket::Codec *)((char *)v529 + 216);
                                                    if (v529 == v530)
                                                      goto LABEL_1308;
                                                  }
                                                  v537 = (char *)operator new(0x28uLL);
                                                  if (v537 <= "Failed to parse codecs correctly."
                                                    && v537 + 33 > "Failed to parse codecs correctly.")
                                                  {
                                                    goto LABEL_1472;
                                                  }
                                                  strcpy(v537, "Failed to parse codecs correctly.");
                                                  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v537;
                                                  __p[0].__r_.__value_.__l.__size_ = 33;
                                                  __p[0].__r_.__value_.__r.__words[2] = 0x8000000000000028;
                                                  v729[0] = (std::string::size_type)&byte_208EB9246;
                                                  v729[1] = 0;
                                                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                                                    rtc::webrtc_logging_impl::Log("\r\t\v\t\n", v538, v539, v540, v541, v542, v543, v544, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
                                                  if (__s1b)
                                                  {
                                                    if (!v729[0] && v729[1])
                                                      goto LABEL_1472;
                                                    std::string::__assign_external(__s1b, (const std::string::value_type *)v729[0], v729[1]);
                                                    p_data = (void **)&__s1b[1].__r_.__value_.__l.__data_;
                                                    if (SHIBYTE(__s1b[1].__r_.__value_.__r.__words[2]) < 0)
                                                      operator delete(*p_data);
                                                    *(_OWORD *)p_data = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                                    __s1b[1].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__r.__words[2];
                                                    v546 = (std::string *)v691;
                                                    if (!v691)
                                                    {
LABEL_1379:
                                                      v563 = __src;
                                                      if (__src)
                                                      {
                                                        v564 = v696;
                                                        if ((void *)v696 != __src)
                                                        {
                                                          do
                                                          {
                                                            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v564 - 24, *(_QWORD *)(v564 - 16));
                                                            v565 = *(void **)(v564 - 48);
                                                            if (v565)
                                                            {
                                                              *(_QWORD *)(v564 - 40) = v565;
                                                              operator delete(v565);
                                                            }
                                                            if (*(char *)(v564 - 57) < 0)
                                                              operator delete(*(void **)(v564 - 80));
                                                            v564 -= 80;
                                                          }
                                                          while ((void *)v564 != v563);
                                                          v563 = __src;
                                                        }
                                                        operator delete(v563);
                                                      }
                                                      goto LABEL_571;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                      operator delete(__p[0].__r_.__value_.__l.__data_);
                                                    v546 = (std::string *)v691;
                                                    if (!v691)
                                                      goto LABEL_1379;
                                                  }
LABEL_1370:
                                                  v561 = v692;
                                                  if (v692 != v546)
                                                  {
                                                    do
                                                    {
                                                      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v561[-1], v561[-1].__r_.__value_.__l.__size_);
                                                      v562 = v561[-2].__r_.__value_.__l.__data_;
                                                      if (v562)
                                                      {
                                                        v561[-2].__r_.__value_.__l.__size_ = (std::string::size_type)v562;
                                                        operator delete(v562);
                                                      }
                                                      if (v561[-3].__r_.__value_.__s.__data_[15] < 0)
                                                        operator delete((void *)v561[-4].__r_.__value_.__r.__words[2]);
                                                      v561 = (std::string *)((char *)v561 - 80);
                                                    }
                                                    while (v561 != v546);
                                                    v546 = (std::string *)v691;
                                                  }
                                                  operator delete(v546);
                                                  goto LABEL_1379;
                                                }
                                              }
LABEL_1308:
                                              if (!a3)
                                              {
                                                *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 8;
                                                if (__p <= (std::string *)"maxptime"
                                                  && &__p[0].__r_.__value_.__r.__words[1] > (std::string::size_type *)"maxptime")
                                                {
                                                  goto LABEL_1472;
                                                }
                                                strcpy((char *)__p, "maxptime");
                                                if (SHIBYTE(v672) < 0)
                                                {
                                                  v533 = v671;
                                                  if ((v671 & 0x8000000000000000) != 0)
                                                    goto LABEL_1472;
                                                  v534 = (char *)v670;
                                                  if (v671)
                                                  {
                                                    if (!v670)
                                                      goto LABEL_1472;
                                                  }
                                                }
                                                else
                                                {
                                                  v533 = HIBYTE(v672);
                                                  v534 = (char *)&v670;
                                                }
                                                webrtc::AddAudioAttribute((uint64_t)__p, v534, v533, a12);
                                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                                *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 5;
                                                if (__p <= (std::string *)"ptime"
                                                  && (char *)__p[0].__r_.__value_.__r.__words + 5 > "ptime")
                                                {
                                                  goto LABEL_1472;
                                                }
                                                LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)"ptime";
                                                WORD2(__p[0].__r_.__value_.__r.__words[0]) = cricket::kCodecParamPTime[4];
                                                if (SHIBYTE(v669) < 0)
                                                {
                                                  v547 = v668;
                                                  if ((v668 & 0x8000000000000000) != 0)
                                                    goto LABEL_1472;
                                                  v548 = (char *)v667;
                                                  if (v668)
                                                  {
                                                    if (!v667)
                                                      goto LABEL_1472;
                                                  }
                                                }
                                                else
                                                {
                                                  v547 = HIBYTE(v669);
                                                  v548 = (char *)&v667;
                                                }
                                                webrtc::AddAudioAttribute((uint64_t)__p, v548, v547, a12);
                                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                              }
                                              v549 = (std::string *)v684;
                                              v550 = v685;
                                              if (v684 == v685)
                                              {
LABEL_1369:
                                                v546 = (std::string *)v691;
                                                if (!v691)
                                                  goto LABEL_1379;
                                                goto LABEL_1370;
                                              }
                                              v551 = a13;
                                              while (2)
                                              {
                                                if (*(char *)(v551 + 47) < 0)
                                                {
                                                  v553 = *(_QWORD *)(v551 + 32);
                                                  if ((v553 & 0x8000000000000000) != 0)
                                                    goto LABEL_1472;
                                                  v554 = *v635;
                                                  if (v553 && v554 == 0)
                                                    goto LABEL_1472;
                                                }
                                                else
                                                {
                                                  v553 = *(unsigned __int8 *)(v551 + 47);
                                                  v554 = (const std::string::value_type *)(a13 + 24);
                                                }
                                                std::string::__assign_external((std::string *)((char *)v549 + 160), v554, v553);
                                                if (*(char *)(v551 + 71) < 0)
                                                {
                                                  v556 = *(_QWORD *)(v551 + 56);
                                                  if ((v556 & 0x8000000000000000) != 0)
                                                    goto LABEL_1472;
                                                  v557 = *v634;
                                                  if (v556)
                                                  {
                                                    if (!v557)
                                                      goto LABEL_1472;
                                                  }
                                                }
                                                else
                                                {
                                                  v556 = *(unsigned __int8 *)(v551 + 71);
                                                  v557 = (const std::string::value_type *)(a13 + 48);
                                                }
                                                std::string::__assign_external((std::string *)((char *)v549 + 184), v557, v556);
                                                v558 = operator new();
                                                *(_QWORD *)v558 = off_24C0B5550;
                                                v559 = (std::string *)(v558 + 8);
                                                if (SHIBYTE(v683) < 0)
                                                {
                                                  std::string::__init_copy_ctor_external(v559, (const std::string::value_type *)__len[0], __len[1]);
                                                }
                                                else
                                                {
                                                  *(_OWORD *)&v559->__r_.__value_.__l.__data_ = *(_OWORD *)__len;
                                                  *(_QWORD *)(v558 + 24) = v683;
                                                }
                                                *(_DWORD *)(v558 + 32) = a4;
                                                cricket::Candidate::Candidate((std::string *)(v558 + 40), v549);
                                                __p[0].__r_.__value_.__r.__words[0] = v558;
                                                v560 = (uint64_t *)a14[1];
                                                if ((unint64_t)v560 >= a14[2])
                                                {
                                                  a14[1] = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>(a14, (uint64_t *)__p);
                                                  v552 = __p[0].__r_.__value_.__r.__words[0];
                                                  __p[0].__r_.__value_.__r.__words[0] = 0;
                                                  v551 = a13;
                                                  if (v552)
                                                    goto LABEL_1348;
                                                }
                                                else
                                                {
                                                  if (!v560)
                                                    goto LABEL_1472;
                                                  __p[0].__r_.__value_.__r.__words[0] = 0;
                                                  *v560 = v558;
                                                  a14[1] = v560 + 1;
                                                  v552 = __p[0].__r_.__value_.__r.__words[0];
                                                  __p[0].__r_.__value_.__r.__words[0] = 0;
                                                  v551 = a13;
                                                  if (!v552)
                                                    goto LABEL_1349;
LABEL_1348:
                                                  (*(void (**)(std::string::size_type))(*(_QWORD *)v552 + 8))(v552);
                                                }
LABEL_1349:
                                                v549 += 18;
                                                if (v549 == v550)
                                                  goto LABEL_1369;
                                                continue;
                                              }
                                            }
                                          }
                                        }
                                        if (a3 == 2 || (*(_BYTE *)a11 & 1) == 0)
                                          goto LABEL_1236;
                                        v417 = HIBYTE(v663.__r_.__value_.__r.__words[2]);
                                        LOBYTE(v418) = *((_BYTE *)&v663.__r_.__value_.__s + 23);
                                        if ((v663.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                          v417 = v663.__r_.__value_.__l.__size_;
                                        if (!v417)
                                        {
                                          rtc::CreateRandomString((rtc *)8, __p);
                                          if (SHIBYTE(v663.__r_.__value_.__r.__words[2]) < 0)
                                            operator delete(v663.__r_.__value_.__l.__data_);
                                          v663 = __p[0];
                                          v418 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
                                        }
                                        if ((v418 & 0x80) != 0)
                                        {
                                          v419 = v663.__r_.__value_.__l.__size_;
                                          if ((v663.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                                            goto LABEL_1472;
                                          v420 = (std::string *)v663.__r_.__value_.__r.__words[0];
                                          if (v663.__r_.__value_.__l.__size_)
                                          {
                                            if (!v663.__r_.__value_.__r.__words[0])
                                              goto LABEL_1472;
                                          }
                                        }
                                        else
                                        {
                                          v419 = v418;
                                          v420 = &v663;
                                        }
                                        memset(v702, 0, 32);
                                        v701 = 0u;
                                        memset(__p, 0, sizeof(__p));
                                        if (v419)
                                        {
                                          std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)&v701, (__int128 *)v664, *(__int128 **)v665, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v665 - (_QWORD)v664) >> 3));
                                          if (v419 > 0x7FFFFFFFFFFFFFF7)
                                            goto LABEL_1452;
                                          if (v419 >= 0x17)
                                          {
                                            v471 = (v419 & 0xFFFFFFFFFFFFFFF8) + 8;
                                            if ((v419 | 7) != 0x17)
                                              v471 = v419 | 7;
                                            v472 = v471 + 1;
                                            v469 = (std::string *)operator new(v471 + 1);
                                            *(_QWORD *)&v730 = v472 | 0x8000000000000000;
                                            v729[0] = (std::string::size_type)v469;
                                            v729[1] = v419;
                                          }
                                          else
                                          {
                                            BYTE7(v730) = v419;
                                            v469 = (std::string *)v729;
                                          }
                                          v470 = (std::string::size_type *)((char *)v469 + v419);
                                          if (v469 <= v420 && v470 > (std::string::size_type *)v420)
                                            goto LABEL_1472;
                                          memmove(v469, v420, v419);
LABEL_1228:
                                          *(_BYTE *)v470 = 0;
                                          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                            operator delete(__p[0].__r_.__value_.__l.__data_);
                                          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)v729;
                                          __p[0].__r_.__value_.__r.__words[2] = v730;
                                          std::vector<cricket::RidDescription>::__assign_with_size[abi:sn180100]<cricket::RidDescription*,cricket::RidDescription*>((uint64_t)&v702[8], (const cricket::RidDescription *)__src, (const cricket::RidDescription *)v696, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v696 - (_QWORD)__src) >> 4));
                                          if ((unint64_t)v680 >= v681)
                                          {
                                            v473 = std::vector<cricket::StreamParams>::__push_back_slow_path<cricket::StreamParams const&>((std::string **)&v679, (const cricket::StreamParams *)__p);
                                          }
                                          else
                                          {
                                            if (!v680)
                                              goto LABEL_1472;
                                            v473 = cricket::StreamParams::StreamParams(v680, (const cricket::StreamParams *)__p)+ 6;
                                          }
                                          v680 = v473;
                                        }
                                        else
                                        {
                                          if (__src != (void *)v696)
                                          {
                                            std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)&v701, (__int128 *)v664, *(__int128 **)v665, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v665 - (_QWORD)v664) >> 3));
                                            BYTE7(v730) = 0;
                                            v470 = v729;
                                            goto LABEL_1228;
                                          }
                                          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
                                            rtc::webrtc_logging_impl::Log("\r\t", v597, v598, v599, v600, v601, v602, v603, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
                                        }
                                        cricket::StreamParams::~StreamParams((cricket::StreamParams *)__p);
                                        goto LABEL_1236;
                                      }
                                      if (v395 >= v398)
                                        goto LABEL_1040;
                                    }
                                    break;
                                  }
                                  v394 = &__p[0].__r_.__value_.__l.__size_;
                                  goto LABEL_1040;
                                }
                              }
                            }
                            if (v378 >= v381)
                              goto LABEL_999;
LABEL_998:
                            v377 = &__p[0].__r_.__value_.__l.__size_;
                            goto LABEL_999;
                          }
                          v24 = v656;
                          v25 = v656 - 2;
                          if (v656 < 2)
                            goto LABEL_171;
                          v26 = *(unsigned __int8 **)v655;
                          v27 = **(_BYTE **)v655;
                          if (v27 == 98)
                          {
                            if (*(_BYTE *)(*(_QWORD *)v655 + 1) != 61)
                              goto LABEL_171;
                            v729[1] = 0;
                            v729[0] = 0;
                            *(_QWORD *)&v730 = 0;
                            memset(&__sz, 0, sizeof(__sz));
                            if ((uint64_t)(v656 - 2) < 0)
                              goto LABEL_1472;
                            if ((rtc::tokenize_first((unsigned __int8 *)(*(_QWORD *)v655 + 2), v656 - 2, 58, (uint64_t)&__sz, (uint64_t)v729) & 1) == 0)
                            {
                              if (!v657)
                                goto LABEL_1472;
                              v32 = *(_QWORD *)v655;
                              v33 = v656;
                              v34 = (char *)operator new(0x40uLL);
                              if (v34 <= "b= syntax error, does not match b=<modifier>:<bandwidth-value>."
                                && v34 + 63 > "b= syntax error, does not match b=<modifier>:<bandwidth-value>.")
                              {
                                goto LABEL_1472;
                              }
                              strcpy(v34, "b= syntax error, does not match b=<modifier>:<bandwidth-value>.");
                              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
                              *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_208F1DF10;
                              webrtc::ParseFailed(v32, v33, 0, (__n128 *)__p, a15);
                              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                operator delete(__p[0].__r_.__value_.__l.__data_);
                              v31 = 1;
                              v19 = a1;
                              if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                goto LABEL_52;
                              goto LABEL_154;
                            }
                            v28 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
                            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
                            {
                              v30 = __sz.__r_.__value_.__l.__size_;
                              if ((__sz.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                                goto LABEL_1472;
                              v29 = (std::string *)__sz.__r_.__value_.__r.__words[0];
                              if (__sz.__r_.__value_.__l.__size_)
                              {
                                if (!__sz.__r_.__value_.__r.__words[0])
                                  goto LABEL_1472;
                              }
                            }
                            else
                            {
                              v29 = &__sz;
                              v30 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
                            }
                            if (v30 != 2 || LOWORD(v29->__r_.__value_.__l.__data_) != *(unsigned __int16 *)"AS")
                            {
                              if ((*((_BYTE *)&__sz.__r_.__value_.__s + 23) & 0x80) != 0)
                              {
                                v28 = __sz.__r_.__value_.__l.__size_;
                                if ((__sz.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                                  goto LABEL_1472;
                                v35 = (std::string *)__sz.__r_.__value_.__r.__words[0];
                                if (__sz.__r_.__value_.__l.__size_)
                                {
                                  if (!__sz.__r_.__value_.__r.__words[0])
                                    goto LABEL_1472;
                                }
                              }
                              else
                              {
                                v35 = &__sz;
                              }
                              if (v28 != 4 || LODWORD(v35->__r_.__value_.__l.__data_) != *(_DWORD *)"TIAS")
                              {
LABEL_51:
                                v31 = 2;
                                if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  goto LABEL_52;
LABEL_154:
                                operator delete(__sz.__r_.__value_.__l.__data_);
                                if ((SBYTE7(v730) & 0x80000000) == 0)
                                  goto LABEL_8;
LABEL_155:
                                v21 = (void *)v729[0];
                                goto LABEL_7;
                              }
                            }
                            LODWORD(__src) = 0;
                            if (!v657)
                              goto LABEL_1472;
                            if (SBYTE7(v730) < 0)
                            {
                              v36 = v729[1];
                              if ((v729[1] & 0x8000000000000000) != 0)
                                goto LABEL_1472;
                              v37 = (void **)v729[0];
                              if (v729[1])
                              {
                                if (!v729[0])
                                  goto LABEL_1472;
                              }
                            }
                            else
                            {
                              v36 = BYTE7(v730);
                              v37 = (void **)v729;
                            }
                            if (webrtc::GetValueFromString<int>(*(uint64_t *)v655, v656, v37, v36, &__src, a15))
                            {
                              v40 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
                              if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
                              {
                                v42 = __sz.__r_.__value_.__l.__size_;
                                if ((__sz.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                                  goto LABEL_1472;
                                v41 = (std::string *)__sz.__r_.__value_.__r.__words[0];
                                if (__sz.__r_.__value_.__l.__size_)
                                {
                                  if (!__sz.__r_.__value_.__r.__words[0])
                                    goto LABEL_1472;
                                }
                              }
                              else
                              {
                                v41 = &__sz;
                                v42 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
                              }
                              if (v42 == 2)
                              {
                                data_low = LOWORD(v41->__r_.__value_.__l.__data_);
                                v44 = __src;
                                if (data_low == *(unsigned __int16 *)"AS" && (_DWORD)__src == -1)
                                {
                                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                                    goto LABEL_51;
                                  v620 = v620 & 0xFFFFFFFF00000000 | 0x60FA;
                                  rtc::webrtc_logging_impl::Log("\r\t", v45, v46, v47, v48, v49, v50, v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
                                  v31 = 2;
                                  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
                                    goto LABEL_154;
LABEL_52:
                                  if ((SBYTE7(v730) & 0x80000000) == 0)
                                    goto LABEL_8;
                                  goto LABEL_155;
                                }
                              }
                              else
                              {
                                v44 = __src;
                              }
                              if ((v44 & 0x80000000) == 0)
                              {
                                if ((*((_BYTE *)&__sz.__r_.__value_.__s + 23) & 0x80) != 0)
                                {
                                  v53 = __sz.__r_.__value_.__l.__size_;
                                  if ((__sz.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                                    goto LABEL_1472;
                                  v52 = (std::string *)__sz.__r_.__value_.__r.__words[0];
                                  if (__sz.__r_.__value_.__l.__size_)
                                  {
                                    if (!__sz.__r_.__value_.__r.__words[0])
                                      goto LABEL_1472;
                                  }
                                }
                                else
                                {
                                  v52 = &__sz;
                                  v53 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
                                }
                                if (v53 == 2 && LOWORD(v52->__r_.__value_.__l.__data_) == *(unsigned __int16 *)"AS")
                                {
                                  if (v44 >= 0x20C49B)
                                    v44 = 2147483;
                                  v44 *= 1000;
                                  LODWORD(__src) = v44;
                                }
                                *(_DWORD *)(v16 + 36) = v44;
                                if (v40 < 0)
                                {
                                  std::string::__init_copy_ctor_external(&v653, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
                                  if (__dst == &v653)
                                    goto LABEL_104;
                                }
                                else
                                {
                                  v653 = __sz;
                                  if (__dst == &v653)
                                  {
LABEL_104:
                                    if ((SHIBYTE(v653.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                      goto LABEL_51;
                                    goto LABEL_145;
                                  }
                                }
                                if (*(char *)(v16 + 63) < 0)
                                {
                                  if ((v653.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v72 = &v653;
                                  else
                                    v72 = (std::string *)v653.__r_.__value_.__r.__words[0];
                                  if ((v653.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v73 = HIBYTE(v653.__r_.__value_.__r.__words[2]);
                                  else
                                    v73 = v653.__r_.__value_.__l.__size_;
                                  std::string::__assign_no_alias<false>(__dst, (const std::string::value_type *)v72, v73);
                                  if ((SHIBYTE(v653.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_51;
                                }
                                else
                                {
                                  if ((*((_BYTE *)&v653.__r_.__value_.__s + 23) & 0x80) == 0)
                                  {
                                    *__dst = v653;
                                    v31 = 2;
                                    if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                      goto LABEL_52;
                                    goto LABEL_154;
                                  }
                                  std::string::__assign_no_alias<true>(__dst, v653.__r_.__value_.__l.__data_, v653.__r_.__value_.__l.__size_);
                                  if ((SHIBYTE(v653.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_51;
                                }
LABEL_145:
                                operator delete(v653.__r_.__value_.__l.__data_);
                                v31 = 2;
                                if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  goto LABEL_52;
                                goto LABEL_154;
                              }
                              if (!v657)
                                goto LABEL_1472;
                              v54 = a15;
                              if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v55 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
                              else
                                v55 = __sz.__r_.__value_.__l.__size_;
                              v56 = v55 + 2;
                              if (v55 + 2 > 0x7FFFFFFFFFFFFFF7)
                                goto LABEL_1452;
                              v57 = *(_QWORD *)v655;
                              v58 = v656;
                              if (v56 > 0x16)
                              {
                                v61 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v56 | 7) != 0x17)
                                  v61 = v56 | 7;
                                v62 = v61 + 1;
                                v59 = (char *)operator new(v61 + 1);
                                v63 = v62 | 0x8000000000000000;
                                v16 = a12;
                                v698.__r_.__value_.__r.__words[2] = v63;
                                v698.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
                                v698.__r_.__value_.__l.__size_ = v55 + 2;
                                v60 = (std::string *)(v59 + 2);
                                a15 = v54;
                                if (v59 <= "b=")
                                  goto LABEL_114;
                              }
                              else
                              {
                                memset(&v698, 0, sizeof(v698));
                                v59 = (char *)&v698;
                                *((_BYTE *)&v698.__r_.__value_.__s + 23) = v55 + 2;
                                v60 = (std::string *)&v698.__r_.__value_.__s.__data_[2];
                                a15 = v54;
                                if (&v698 > (std::string *)"b=")
                                  goto LABEL_115;
LABEL_114:
                                if (v60 > (std::string *)"b=")
                                  goto LABEL_1472;
                              }
LABEL_115:
                              *(_WORD *)v59 = 15714;
                              if (v40 >= 0)
                                v64 = &__sz;
                              else
                                v64 = (std::string *)__sz.__r_.__value_.__r.__words[0];
                              v65 = (std::string *)((char *)v60 + v55);
                              v19 = a1;
                              if (v64 >= v60 && v65 > v64)
                                goto LABEL_1472;
                              if (v55)
                                memmove(v60, v64, v55);
                              v65->__r_.__value_.__s.__data_[0] = 0;
                              v66 = v698.__r_.__value_.__r.__words[2];
                              if ((v698.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v67 = 22;
                              else
                                v67 = (v698.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                              if ((v698.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v68 = HIBYTE(v698.__r_.__value_.__r.__words[2]);
                              else
                                v68 = v698.__r_.__value_.__l.__size_;
                              if (v67 - v68 >= 0x19)
                              {
                                v69 = &v698;
                                if ((v698.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                  v69 = (std::string *)v698.__r_.__value_.__r.__words[0];
                                v70 = (char *)v69 + v68;
                                if ((char *)v69 + v68 <= " value can't be negative."
                                  && v70 + 25 > " value can't be negative.")
                                {
                                  goto LABEL_1472;
                                }
                                qmemcpy(v70, " value can't be negative.", 25);
                                v71 = v68 + 25;
                                if ((v66 & 0x8000000000000000) != 0)
                                  v698.__r_.__value_.__l.__size_ = v68 + 25;
                                else
                                  *((_BYTE *)&v698.__r_.__value_.__s + 23) = v71 & 0x7F;
                                v69->__r_.__value_.__s.__data_[v71] = 0;
                              }
                              else
                              {
                                std::string::__grow_by_and_replace(&v698, v67, v68 - v67 + 25, v68, v68, 0, 0x19uLL, " value can't be negative.");
                              }
                              v74 = v698.__r_.__value_.__r.__words[0];
                              *(_QWORD *)((char *)v728 + 7) = *(std::string::size_type *)((char *)&v698.__r_.__value_.__r.__words[1]
                                                                                        + 7);
                              v728[0] = v698.__r_.__value_.__l.__size_;
                              v75 = HIBYTE(v698.__r_.__value_.__r.__words[2]);
                              memset(&v698, 0, sizeof(v698));
                              __p[0].__r_.__value_.__r.__words[0] = v74;
                              __p[0].__r_.__value_.__l.__size_ = v728[0];
                              *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v728 + 7);
                              *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v75;
                              *(_QWORD *)((char *)v728 + 7) = 0;
                              v728[0] = 0;
                              webrtc::ParseFailed(v57, v58, 0, (__n128 *)__p, a15);
                              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                operator delete(__p[0].__r_.__value_.__l.__data_);
                              if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v698.__r_.__value_.__l.__data_);
                            }
                            v31 = 1;
                            if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              goto LABEL_52;
                            goto LABEL_154;
                          }
                          if (v27 != 99)
                            break;
                          if (*(_BYTE *)(*(_QWORD *)v655 + 1) != 61)
                            goto LABEL_171;
                          memset(__p, 0, 24);
                          __p[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C0ACDA0;
                          __p[2].__r_.__value_.__s.__data_[16] = 0;
                          LOWORD(__p[2].__r_.__value_.__r.__words[1]) = 0;
                          HIDWORD(__p[2].__r_.__value_.__r.__words[1]) = 0;
                          memset(&__p[1].__r_.__value_.__r.__words[1], 0, 20);
                          if (webrtc::ParseConnectionData(*(unsigned __int8 **)v655, v656, (uint64_t)__p, a15))
                          {
                            if (v638 != __p)
                            {
                              if (*(char *)(v16 + 151) < 0)
                              {
                                if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v38 = __p;
                                else
                                  v38 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
                                if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v39 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
                                else
                                  v39 = __p[0].__r_.__value_.__l.__size_;
                                std::string::__assign_no_alias<false>(v638, (const std::string::value_type *)v38, v39);
                              }
                              else if ((*((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x80) != 0)
                              {
                                std::string::__assign_no_alias<true>(v638, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
                              }
                              else
                              {
                                *v638 = __p[0];
                              }
                            }
                            *(_DWORD *)(v16 + 160) = __p[1].__r_.__value_.__r.__words[1];
                            *v632 = *(_OWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + 4);
                            *(_WORD *)(v16 + 184) = __p[2].__r_.__value_.__r.__words[1];
                            *(_BYTE *)(v16 + 192) = __p[2].__r_.__value_.__s.__data_[16];
                            *(_DWORD *)(v16 + 188) = HIDWORD(__p[2].__r_.__value_.__r.__words[1]);
                            v31 = 2;
                            if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              goto LABEL_8;
                          }
                          else
                          {
                            v31 = 1;
                            if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              goto LABEL_8;
                          }
                          v21 = (void *)__p[0].__r_.__value_.__r.__words[0];
LABEL_7:
                          operator delete(v21);
LABEL_8:
                          v103 = v31 == 2;
                          v20 = a8;
                          if (!v103)
                            goto LABEL_571;
                        }
                        if (v27 == 97 && *(_BYTE *)(*(_QWORD *)v655 + 1) == 61)
                          break;
LABEL_171:
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
                        {
                          if (!v657)
                            goto LABEL_1472;
                          v627 = v627 & 0xFFFFFFFF00000000 | 0x61F0;
LABEL_174:
                          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v81, v82, v83, v84, v85, v86, v87, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
                        }
                      }
                      if (v25 >= 3)
                        v76 = 3;
                      else
                        v76 = v656 - 2;
                      if (!*(_QWORD *)v655 && v76)
                        goto LABEL_1472;
                      v77 = memcmp((const void *)(*(_QWORD *)v655 + 2), "mid", v76);
                      if (v25 < 3)
                        break;
                      if (v77)
                        break;
                      if (v24 != 5)
                      {
                        v78 = v26[5];
                        if (v78 != 58 && v78 != 32)
                          break;
                      }
                      if (!webrtc::GetValue(v26, v24, "mid", 3uLL, (uint64_t)__len, a15))
                        goto LABEL_571;
                      if ((SHIBYTE(v683) & 0x80000000) == 0)
                      {
                        v79 = __len;
                        v80 = HIBYTE(v683);
                        goto LABEL_211;
                      }
                      v80 = __len[1];
                      if ((__len[1] & 0x8000000000000000) != 0)
                        goto LABEL_1472;
                      v79 = (std::string::size_type *)__len[0];
                      if (__len[1])
                      {
                        v101 = a9;
                        if (!__len[0])
                          goto LABEL_1472;
                      }
                      else
                      {
LABEL_211:
                        v101 = a9;
                      }
                      if (v80)
                      {
                        while (1)
                        {
                          v102 = *(unsigned __int8 *)v79;
                          v103 = v102 > 0x2E || ((1 << v102) & 0x6CFA00000000) == 0;
                          if (v103)
                          {
                            v104 = v102 - 94 >= 0x21 && v102 - 48 >= 0xA;
                            if (v104 && v102 - 65 >= 0x1A)
                              break;
                          }
                          v79 = (std::string::size_type *)((char *)v79 + 1);
                          if (!--v80)
                            goto LABEL_213;
                        }
                        v604 = (char *)operator new(0x30uLL);
                        v605 = v604 + 40;
                        if (v604 <= "Illegal character found in the value of "
                          && v605 > "Illegal character found in the value of ")
                        {
                          goto LABEL_1472;
                        }
                        strcpy(v604, "Illegal character found in the value of ");
                        if (v605 <= "mid" && v604 + 43 > "mid")
                          goto LABEL_1472;
                        v604[42] = 100;
                        *(_WORD *)v605 = 26989;
                        v604[43] = 0;
                        __p[0].__r_.__value_.__r.__words[2] = 0x8000000000000030;
                        __p[0].__r_.__value_.__l.__size_ = 43;
                        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v604;
                        webrtc::ParseFailed((uint64_t)v26, v24, 0, (__n128 *)__p, a15);
LABEL_1449:
                        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__p[0].__r_.__value_.__l.__data_);
                        goto LABEL_571;
                      }
LABEL_213:
                      if (__len != (std::string::size_type *)v101)
                      {
                        if (*(char *)(v101 + 23) < 0)
                        {
                          if (v683 >= 0)
                            v109 = __len;
                          else
                            v109 = (std::string::size_type *)__len[0];
                          if (v683 >= 0)
                            v110 = HIBYTE(v683);
                          else
                            v110 = __len[1];
                          std::string::__assign_no_alias<false>((std::string *)v101, (const std::string::value_type *)v109, v110);
                        }
                        else if (v683 < 0)
                        {
                          std::string::__assign_no_alias<true>((_QWORD *)v101, (char *)__len[0], __len[1]);
                        }
                        else
                        {
                          *(_OWORD *)v101 = *(_OWORD *)__len;
                          *(_QWORD *)(v101 + 16) = v683;
                        }
                      }
                    }
                    if (v25 >= 0xB)
                      v88 = 11;
                    else
                      v88 = v25;
                    if (!v26 && v88)
                      goto LABEL_1472;
                    __s1 = v26 + 2;
                    v89 = memcmp(v26 + 2, "bundle-only", v88);
                    if (v25 >= 0xB && !v89)
                    {
                      if (v24 == 13 || (v90 = v26[13], v90 == 58) || v90 == 32)
                      {
                        *a10 = 1;
                        goto LABEL_4;
                      }
                    }
                    __n = v88;
                    if (v25 >= 9)
                      v91 = 9;
                    else
                      v91 = v25;
                    if (!v26 && v91)
                      goto LABEL_1472;
                    v92 = memcmp(__s1, "candidate", v91);
                    if (v25 < 9)
                      break;
                    if (v92)
                      break;
                    if (v24 != 11)
                    {
                      v93 = v26[11];
                      if (v93 != 58 && v93 != 32)
                        break;
                    }
                    memset(__p, 0, 24);
LABEL_1458:
                      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v94, v95, v96, v97, v613);
                    LODWORD(__p[1].__r_.__value_.__l.__data_) = 1;
                    memset(&__p[1].__r_.__value_.__r.__words[1], 0, 64);
                    *(_QWORD *)&v701 = 0;
                    *((_QWORD *)&v701 + 1) = &unk_24C0ACDA0;
                    v702[32] = 0;
                    *(_WORD *)&v702[24] = 0;
                    *(_DWORD *)&v702[28] = 0;
                    memset(v702, 0, 20);
                    LODWORD(v703) = 0;
                    v704 = 0u;
                    v705 = 0u;
                    v706 = 0u;
                    LODWORD(v707) = 0;
                    v710 = 0;
                    v708 = 0u;
                    v709 = 0u;
                    v711 = 0u;
                    v712 = 0u;
                    v713 = 0u;
                    v714 = &unk_24C0ACDA0;
                    v720 = 0;
                    v718 = 0;
                    v719 = 0;
                    v717 = 0;
                    v715 = 0;
                    v716 = 0;
                    v726 = 0;
                    v727 = 0;
                    v725 = 0;
                    v724 = 0;
                    v722 = 0u;
                    v723 = 0u;
                    v721 = 0u;
                    v19 = a1;
                    if (!v657)
                      goto LABEL_1472;
                    if (!webrtc::ParseCandidate(*(unsigned __int8 **)v655, v656, (uint64_t)__p, (char *)a15, 0))
                    {
                      cricket::Candidate::~Candidate((void **)&__p[0].__r_.__value_.__l.__data_);
                      goto LABEL_571;
                    }
                    if (SBYTE7(v705) < 0)
                    {
                      *((_QWORD *)&v704 + 1) = 0;
                      v98 = (__int128 *)v704;
                    }
                    else
                    {
                      BYTE7(v705) = 0;
                      v98 = &v704;
                    }
                    *(_BYTE *)v98 = 0;
                    if (SHIBYTE(v706) < 0)
                    {
                      *(_QWORD *)&v706 = 0;
                      v113 = (_BYTE *)*((_QWORD *)&v705 + 1);
                    }
                    else
                    {
                      HIBYTE(v706) = 0;
                      v113 = (char *)&v705 + 8;
                    }
                    *v113 = 0;
                    if ((unint64_t)v685 >= v686)
                    {
                      v114 = std::vector<cricket::Candidate>::__push_back_slow_path<cricket::Candidate>((std::string **)&v684, __p);
                    }
                    else
                    {
                      if (!v685)
                        goto LABEL_1472;
                      v114 = cricket::Candidate::Candidate(v685, __p) + 18;
                    }
                    v685 = v114;
                    cricket::Candidate::~Candidate((void **)&__p[0].__r_.__value_.__l.__data_);
                  }
                  v99 = memcmp(__s1, "ice-ufrag", v91);
                  if (v25 < 9)
                    break;
                  if (v99)
                    break;
                  if (v24 != 11)
                  {
                    v100 = v26[11];
                    if (v100 != 58 && v100 != 32)
                      break;
                  }
                  v19 = a1;
                  if ((webrtc::GetValue(v26, v24, "ice-ufrag", 9uLL, (uint64_t)v635, a15) & 1) == 0)
                    goto LABEL_571;
                }
                if (v25 >= 7)
                  v106 = 7;
                else
                  v106 = v25;
                if (!v26 && v106)
                  goto LABEL_1472;
                v107 = memcmp(__s1, "ice-pwd", v106);
                v19 = a1;
                if (v25 < 7)
                  break;
                if (v107)
                  break;
                if (v24 != 9)
                {
                  v108 = v26[9];
                  if (v108 != 58 && v108 != 32)
                    break;
                }
                if ((webrtc::GetValue(v26, v24, "ice-pwd", 7uLL, (uint64_t)v634, a15) & 1) == 0)
                  goto LABEL_571;
              }
              v111 = memcmp(__s1, "ice-options", __n);
              if (v25 < 0xB)
                break;
              if (v111)
                break;
              if (v24 != 13)
              {
                v112 = v26[13];
                if (v112 != 58 && v112 != 32)
                  break;
              }
              if ((webrtc::ParseIceOptions(v26, v24, a13, a15) & 1) == 0)
                goto LABEL_571;
            }
            if (v25 >= 4)
              v115 = 4;
            else
              v115 = v25;
            if (!v26 && v115)
              goto LABEL_1472;
            v116 = memcmp(__s1, "fmtp", v115);
            if (v25 >= 4 && !v116)
              break;
LABEL_286:
            v120 = memcmp(__s1, "fingerprint", __n);
            if (v25 >= 0xB && !v120 && (v24 == 13 || (v121 = v26[13], v121 == 58) || v121 == 32))
            {
              __p[0].__r_.__value_.__r.__words[0] = 0;
              if (!webrtc::ParseFingerprintAttribute((uint64_t)v26, v24, (void **)&__p[0].__r_.__value_.__l.__data_, a15))
              {
                std::unique_ptr<rtc::SSLFingerprint>::~unique_ptr[abi:sn180100]((uint64_t *)__p);
                goto LABEL_571;
              }
              std::unique_ptr<rtc::SSLFingerprint>::operator=[abi:sn180100]((uint64_t *)(a13 + 80), (uint64_t *)__p);
              std::unique_ptr<rtc::SSLFingerprint>::~unique_ptr[abi:sn180100]((uint64_t *)__p);
            }
            else if (webrtc::HasAttribute((uint64_t)v26, v24, "setup", 5uLL))
            {
              if (!v657)
                goto LABEL_1472;
              if ((webrtc::ParseDtlsSetup(*(uint64_t *)v655, v656, (_DWORD *)(a13 + 76), a15) & 1) == 0)
                goto LABEL_571;
            }
            else
            {
              IsDtlsSctp = cricket::IsDtlsSctp((uint64_t)a5, a6);
              if (a3 == 2 && IsDtlsSctp)
              {
                if (!v657)
                  goto LABEL_1472;
                if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "sctp-port", 9uLL))
                {
                  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16) + 304))
                  {
                    if (v657)
                    {
                      v606 = *(_QWORD *)v655;
                      v607 = v656;
                      std::string::basic_string[abi:sn180100]<0>((char **)v651, "sctp-port attribute can't be used with sctpmap.");
                      webrtc::ParseFailed(v606, v607, (uint64_t)v651, a15);
                      if (v652 < 0)
                        operator delete(v651[0]);
                      goto LABEL_571;
                    }
                    goto LABEL_1472;
                  }
                  LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
                  if (!v657)
                    goto LABEL_1472;
                  if (!webrtc::ParseSctpPort(*(uint64_t *)v655, v656, __p, a15))
                    goto LABEL_571;
                  v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16);
                  *(_DWORD *)(v123 + 308) = __p[0].__r_.__value_.__l.__data_;
                }
                else
                {
                  if (!v657)
                    goto LABEL_1472;
                  if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "max-message-size", 0x10uLL))
                  {
                    LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
                    if (!v657)
                      goto LABEL_1472;
                    if (!webrtc::ParseSctpMaxMessageSize(*(uint64_t *)v655, v656, __p, a15))
                      goto LABEL_571;
                    v16 = a12;
                    v186 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a12 + 56))(a12);
                    *(_DWORD *)(v186 + 312) = __p[0].__r_.__value_.__l.__data_;
                    goto LABEL_3;
                  }
                  if (!v657)
                    goto LABEL_1472;
                  webrtc::HasAttribute(*(uint64_t *)v655, v656, "sctpmap", 7uLL);
                }
              }
              else if (cricket::IsRtpProtocol(a5, a6))
              {
                if (!v657)
                  goto LABEL_1472;
                if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "rtcp-mux", 8uLL))
                {
                  *(_BYTE *)(v16 + 32) = 1;
                }
                else
                {
                  if (!v657)
                    goto LABEL_1472;
                  if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "rtcp-rsize", 0xAuLL))
                  {
                    v16 = a12;
                    *(_BYTE *)(a12 + 33) = 1;
                    goto LABEL_3;
                  }
                  if (!v657)
                    goto LABEL_1472;
                  if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "remote-net-estimate", 0x13uLL))
                  {
                    v16 = a12;
                    *(_BYTE *)(a12 + 34) = 1;
                    goto LABEL_3;
                  }
                  if (!v657)
                    goto LABEL_1472;
                  if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "ssrc-group", 0xAuLL))
                  {
                    if (!v657)
                      goto LABEL_1472;
                    Value = webrtc::ParseSsrcGroupAttribute(*(uint64_t *)v655, v656, (uint64_t)&v673, a15);
                    goto LABEL_481;
                  }
                  if (!v657)
                    goto LABEL_1472;
                  if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "ssrc", 4uLL))
                  {
                    if (!v657)
                      goto LABEL_1472;
                    Value = webrtc::ParseSsrcAttribute(*(size_t *)v655, v656, (uint64_t)&v676, a11, a15);
                    goto LABEL_481;
                  }
                  if (!v657)
                    goto LABEL_1472;
                  if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "rtpmap", 6uLL))
                  {
                    if (!v657)
                      goto LABEL_1472;
                    v16 = a12;
                    Value = webrtc::ParseRtpmapAttribute(*(uint64_t *)v655, v656, a3, (std::string *)a7, (webrtc *)a12, a15);
LABEL_482:
                    v18 = a2;
                    v19 = a1;
                    if ((Value & 1) == 0)
                      goto LABEL_571;
                  }
                  else
                  {
                    if (!v657)
                      goto LABEL_1472;
                    if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "maxptime", 8uLL))
                    {
                      if (!v657)
                        goto LABEL_1472;
                      v181 = *(unsigned __int8 **)v655;
                      v182 = v656;
                      v183 = &v670;
                      v184 = "maxptime";
                      v185 = 8;
                      goto LABEL_480;
                    }
                    if (!v657)
                      goto LABEL_1472;
                    if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "packetization", 0xDuLL))
                    {
                      if (!v657)
                        goto LABEL_1472;
                      v16 = a12;
                      Value = webrtc::ParsePacketizationAttribute(*(size_t *)v655, v656, a3, (webrtc *)a12, a15);
                      goto LABEL_482;
                    }
                    if (!v657)
                      goto LABEL_1472;
                    if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "rtcp-fb", 7uLL))
                    {
                      if (!v657)
                        goto LABEL_1472;
                      v16 = a12;
                      Value = webrtc::ParseRtcpFbAttribute(*(size_t *)v655, v656, a3, (webrtc *)a12, a15);
                      goto LABEL_482;
                    }
                    if (!v657)
                      goto LABEL_1472;
                    if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "ptime", 5uLL))
                    {
                      if (!v657)
                        goto LABEL_1472;
                      v181 = *(unsigned __int8 **)v655;
                      v182 = v656;
                      v183 = &v667;
                      v184 = "ptime";
                      v185 = 5;
LABEL_480:
                      Value = webrtc::GetValue(v181, v182, v184, v185, (uint64_t)v183, a15);
LABEL_481:
                      v16 = a12;
                      goto LABEL_482;
                    }
                    if (!v657)
                      goto LABEL_1472;
                    if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "sendonly", 8uLL))
                    {
                      v16 = a12;
                      *(_DWORD *)(a12 + 124) = 1;
                      goto LABEL_3;
                    }
                    if (!v657)
                      goto LABEL_1472;
                    if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "recvonly", 8uLL))
                    {
                      v16 = a12;
                      *(_DWORD *)(a12 + 124) = 2;
                      goto LABEL_3;
                    }
                    if (!v657)
                      goto LABEL_1472;
                    if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "inactive", 8uLL))
                    {
                      v16 = a12;
                      *(_DWORD *)(a12 + 124) = 3;
                      goto LABEL_3;
                    }
                    if (!v657)
                      goto LABEL_1472;
                    if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "sendrecv", 8uLL))
                    {
                      v16 = a12;
                      *(_DWORD *)(a12 + 124) = 0;
                      goto LABEL_3;
                    }
                    if (!v657)
                      goto LABEL_1472;
                    if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "extmap-allow-mixed", 0x12uLL))
                    {
                      if (*(_DWORD *)(a12 + 200) != 1)
                      {
                        v16 = a12;
                        *(_DWORD *)(a12 + 200) = 2;
                        goto LABEL_3;
                      }
LABEL_536:
                      v16 = a12;
                      goto LABEL_3;
                    }
                    if (!v657)
                      goto LABEL_1472;
                    if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "extmap", 6uLL))
                    {
                      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = 0uLL;
                      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 5) = 0;
                      __p[0].__r_.__value_.__r.__words[2] = 0;
                      if (!v657)
                        goto LABEL_1472;
                      if (!webrtc::ParseExtmap(*(uint64_t *)v655, v656, (uint64_t)__p, a15))
                        goto LABEL_1449;
                      cricket::MediaContentDescription::AddRtpHeaderExtension((char *)a12, (const webrtc::RtpExtension *)__p);
                      goto LABEL_534;
                    }
                    if (!v657)
                      goto LABEL_1472;
                    if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "x-google-flag", 0xDuLL))
                    {
                      memset(__p, 0, 24);
                      if (!v657)
                        goto LABEL_1472;
                      if (!webrtc::GetValue(*(unsigned __int8 **)v655, v656, "x-google-flag", 0xDuLL, (uint64_t)__p, a15))goto LABEL_1449;
                      if (!std::string::compare(__p, "conference"))
                        *(_BYTE *)(a12 + 120) = 1;
LABEL_534:
                      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p[0].__r_.__value_.__l.__data_);
                      goto LABEL_536;
                    }
                    if (!v657)
                      goto LABEL_1472;
                    if (!webrtc::HasAttribute(*(uint64_t *)v655, v656, "msid", 4uLL))
                    {
                      if (!v657)
                        goto LABEL_1472;
                      if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "rid", 3uLL))
                      {
                        if (!v657)
                          goto LABEL_1472;
                        if (v656 > 6)
                        {
                          v197 = (std::string *)std::string_view::substr[abi:sn180100](*(uint64_t *)v655, v656, 6uLL);
                          webrtc::SimulcastSdpSerializer::DeserializeRidDescription(v197, v198, (void **)&__p[0].__r_.__value_.__l.__data_);
                          if (LODWORD(__p[0].__r_.__value_.__l.__data_))
                          {
                            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
                            {
                              if (!v657)
                                goto LABEL_1472;
                              v615 = v615 & 0xFFFFFFFF00000000 | 0x6711;
                              rtc::webrtc_logging_impl::Log("\r\t\v\t\t", v199, v200, v201, v202, v203, v204, v205, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
                            }
                          }
                          else
                          {
                            if (!v702[8])
                              goto LABEL_1472;
                            cricket::RidDescription::RidDescription((std::string *)v729, (const cricket::RidDescription *)&__p[1].__r_.__value_.__r.__words[2]);
                            std::vector<cricket::RidDescription>::push_back[abi:sn180100]((uint64_t)&v660, (const cricket::RidDescription *)v729);
                            cricket::RidDescription::~RidDescription((cricket::RidDescription *)v729);
                          }
                          webrtc::RTCErrorOr<cricket::RidDescription>::~RTCErrorOr((uint64_t)__p);
                          v16 = a12;
                          goto LABEL_3;
                        }
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
                          goto LABEL_536;
                        if (!v657)
                          goto LABEL_1472;
                        v616 = v616 & 0xFFFFFFFF00000000 | 0x66C9;
                      }
                      else
                      {
                        if (!v657)
                          goto LABEL_1472;
                        if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "simulcast", 9uLL))
                        {
                          if (!v657)
                            goto LABEL_1472;
                          v194 = v656;
                          if (v656 <= 0xC)
                          {
                            v608 = *(_QWORD *)v655;
                            std::string::basic_string[abi:sn180100]<0>((char **)v649, "Simulcast attribute is empty.");
                            webrtc::ParseFailed(v608, v194, (uint64_t)v649, a15);
                            if (v650 < 0)
                              operator delete(v649[0]);
                            goto LABEL_571;
                          }
                          if (v658[0] != v658[1] || v659[1] != v659[2])
                          {
                            v609 = *(_QWORD *)v655;
                            std::string::basic_string[abi:sn180100]<0>((char **)v647, "Multiple Simulcast attributes specified.");
                            webrtc::ParseFailed(v609, v194, (uint64_t)v647, a15);
                            if (v648 < 0)
                              operator delete(v647[0]);
                            goto LABEL_571;
                          }
                          v195 = (void **)std::string_view::substr[abi:sn180100](*(uint64_t *)v655, v656, 0xCuLL);
                          webrtc::SimulcastSdpSerializer::DeserializeSimulcastDescription(v195, v196, (uint64_t)__p);
                          if (LODWORD(__p[0].__r_.__value_.__l.__data_))
                          {
                            if (v657)
                            {
                              v610 = *(_QWORD *)v655;
                              v611 = v656;
                              std::string::basic_string[abi:sn180100]<0>((char **)v729, "Malformed simulcast line: ");
                              if (__p[1].__r_.__value_.__s.__data_[7] >= 0)
                                v612 = &__p[0].__r_.__value_.__s.__data_[8];
                              else
                                v612 = (char *)__p[0].__r_.__value_.__l.__size_;
                              std::operator+[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(v612, (std::string *)v729, (uint64_t)v645);
                              webrtc::ParseFailed(v610, v611, (uint64_t)v645, a15);
                              if (v646 < 0)
                                operator delete(v645[0]);
                              if (SBYTE7(v730) < 0)
                                operator delete((void *)v729[0]);
                              webrtc::RTCErrorOr<cricket::SimulcastDescription>::~RTCErrorOr((uint64_t)__p);
                              goto LABEL_571;
                            }
                            goto LABEL_1472;
                          }
                          if (!__p[3].__r_.__value_.__s.__data_[16])
                            goto LABEL_1472;
                          cricket::SimulcastDescription::operator=((uint64_t)v658, (uint64_t **)&__p[1].__r_.__value_.__r.__words[2]);
                          webrtc::RTCErrorOr<cricket::SimulcastDescription>::~RTCErrorOr((uint64_t)__p);
                          v16 = a12;
                          goto LABEL_3;
                        }
                        if (!v657)
                          goto LABEL_1472;
                        if (webrtc::HasAttribute(*(uint64_t *)v655, v656, "rtcp", 4uLL)
                          || (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
                        {
                          goto LABEL_536;
                        }
                        if (!v657)
                          goto LABEL_1472;
                        v614 = v614 & 0xFFFFFFFF00000000 | 0x6830;
                      }
                      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v187, v188, v189, v190, v191, v192, v193, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
                      v16 = a12;
                      goto LABEL_3;
                    }
                    if (!v657)
                      goto LABEL_1472;
                    v16 = a12;
                    v18 = a2;
                    v19 = a1;
                    if (!webrtc::ParseMsidAttribute(*(uint64_t *)v655, v656, (std::string **)&v664, (uint64_t)&v663, a15))goto LABEL_571;
                    *a11 |= 1u;
                  }
                }
              }
              else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
              {
                if (!v657)
                  goto LABEL_1472;
                v617 = v617 & 0xFFFFFFFF00000000 | 0x6858;
                goto LABEL_174;
              }
            }
          }
          if (v24 != 6)
            break;
          if (a3 <= 1)
          {
            memset(&__sz, 0, sizeof(__sz));
            memset(&v698, 0, sizeof(v698));
            goto LABEL_282;
          }
        }
        v117 = v26[6];
        if (v117 != 58 && v117 != 32)
          goto LABEL_286;
      }
      while (a3 > 1);
      memset(&__sz, 0, sizeof(__sz));
      memset(&v698, 0, sizeof(v698));
      if ((v25 & 0x8000000000000000) != 0)
        goto LABEL_1472;
LABEL_282:
      if (!v26)
        goto LABEL_1472;
      if ((rtc::tokenize_first((unsigned __int8 *)__s1, v25, 32, (uint64_t)&__sz, (uint64_t)&v698) & 1) == 0)
      {
        webrtc::ParseFailedExpectMinFieldNum((uint64_t)v26, v24, 2, a15);
        v124 = 0;
        if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_306;
        goto LABEL_352;
      }
      v696 = 0;
      __src = 0;
      v697 = 0;
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      {
        v118 = __sz.__r_.__value_.__l.__size_;
        if ((__sz.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_1472;
        v119 = (std::string *)__sz.__r_.__value_.__r.__words[0];
        if (__sz.__r_.__value_.__l.__size_)
        {
          if (!__sz.__r_.__value_.__r.__words[0])
            goto LABEL_1472;
        }
      }
      else
      {
        v118 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
        v119 = &__sz;
      }
      if (!webrtc::GetValue((unsigned __int8 *)v119, v118, "fmtp", 4uLL, (uint64_t)&__src, a15))
        break;
      v694 = 0;
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      {
        v125 = __sz.__r_.__value_.__l.__size_;
        if ((__sz.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_1472;
        v126 = (std::string *)__sz.__r_.__value_.__r.__words[0];
        if (__sz.__r_.__value_.__l.__size_)
        {
          v16 = a12;
          v18 = a2;
          v19 = a1;
          if (!__sz.__r_.__value_.__r.__words[0])
            goto LABEL_1472;
        }
        else
        {
          v16 = a12;
          v18 = a2;
          v19 = a1;
        }
      }
      else
      {
        v125 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
        v126 = &__sz;
      }
      if (SHIBYTE(v697) < 0)
      {
        v128 = v696;
        if ((v696 & 0x8000000000000000) != 0)
          goto LABEL_1472;
        p_src = (void **)__src;
        if (v696)
        {
          v16 = a12;
          v18 = a2;
          v19 = a1;
          if (!__src)
            goto LABEL_1472;
        }
        else
        {
          v16 = a12;
          v18 = a2;
          v19 = a1;
        }
      }
      else
      {
        v128 = HIBYTE(v697);
        p_src = &__src;
      }
      if (!webrtc::GetValueFromString<int>((uint64_t)v126, v125, p_src, v128, &v694, a15))
        break;
      __na = v694;
      if (v694 > 0x7F)
        break;
      __s1a = (void *)a15;
      v692 = 0;
      v693 = 0;
      v691 = &v692;
      if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
      {
        v130 = v698.__r_.__value_.__l.__size_;
        if ((v698.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_1472;
        v131 = (std::string *)v698.__r_.__value_.__r.__words[0];
        if (v698.__r_.__value_.__l.__size_)
        {
          if (!v698.__r_.__value_.__r.__words[0])
            goto LABEL_1472;
        }
      }
      else
      {
        v130 = HIBYTE(v698.__r_.__value_.__r.__words[2]);
        v131 = &v698;
      }
      rtc::split((size_t)v131, v130, 0x3Bu, (char **)v729);
      v132 = (unsigned __int8 **)v729[0];
      v133 = v729[1];
      if (v729[0] == v729[1])
        goto LABEL_435;
      do
      {
        while (1)
        {
          v134 = *v132;
          v135 = v132[1];
          v689 = 0;
          __s2 = 0;
          v690 = 0;
          memset(&v687, 0, sizeof(v687));
          if (v135)
          {
            v136 = v135;
            v137 = v134;
            while ((absl::ascii_internal::kPropertyBits[*v137] & 8) != 0)
            {
              ++v137;
              if (!--v136)
              {
                v137 = &v135[(_QWORD)v134];
                break;
              }
            }
          }
          else
          {
            v137 = v134;
          }
          v138 = (unint64_t)&v135[-(v137 - v134)];
          if ((unint64_t)v135 < v137 - v134)
            goto LABEL_1452;
          if ((uint64_t)&v135[-(v137 - v134)] < 0 || !v134 && v135 != v137)
            goto LABEL_1472;
          v139 = (std::string *)v137;
          v140 = (uint64_t)&v135[(_QWORD)v134 + 1];
          v141 = &v135[(_QWORD)v134 - 1];
          v142 = (unsigned __int8 *)(v137 - v135 - (_QWORD)v134);
          while (v142)
          {
            v143 = *v141--;
            --v140;
            ++v142;
            if ((absl::ascii_internal::kPropertyBits[v143] & 8) == 0)
              goto LABEL_377;
          }
          v140 = (uint64_t)v137;
LABEL_377:
          v144 = v138 >= v140 - (uint64_t)v137 ? v140 - (_QWORD)v137 : v138;
          if (!v134 && v144)
            goto LABEL_1472;
          if ((rtc::tokenize_first(v137, v144, 61, (uint64_t)&__s2, (uint64_t)&v687) & 1) == 0)
          {
            if (SHIBYTE(v690) < 0)
            {
              v689 = 0;
              p_s2 = __s2;
            }
            else
            {
              HIBYTE(v690) = 0;
              p_s2 = &__s2;
            }
            *p_s2 = 0;
            if (v144 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_1452;
            if (v144 > 0x16)
            {
              v147 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v144 | 7) != 0x17)
                v147 = v144 | 7;
              v148 = v147 + 1;
              v146 = (std::string *)operator new(v147 + 1);
              __p[0].__r_.__value_.__r.__words[2] = v148 | 0x8000000000000000;
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
              __p[0].__r_.__value_.__l.__size_ = v144;
            }
            else
            {
              *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v144;
              v146 = __p;
            }
            v149 = (std::string *)((char *)v146 + v144);
            if (v146 <= v139 && v149 > v139)
              goto LABEL_1472;
            if (v144)
              memmove(v146, v139, v144);
            v149->__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v687.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v687.__r_.__value_.__l.__data_);
            v687 = __p[0];
          }
          v150 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)&v691, (const void **)&__s2, (uint64_t *)v692, (uint64_t *)&v692);
          if (&v692 != (std::string **)v150)
          {
            v151 = v150;
            if (SHIBYTE(v690) < 0)
            {
              v152 = v689;
              if ((v689 & 0x8000000000000000) != 0)
                goto LABEL_1472;
              v153 = __s2;
              if (v689)
              {
                if (!__s2)
                  goto LABEL_1472;
              }
            }
            else
            {
              v152 = HIBYTE(v690);
              v153 = &__s2;
            }
            v154 = v151 + 4;
            if (*((char *)v151 + 55) < 0)
            {
              v155 = v151[5];
              if ((v155 & 0x8000000000000000) != 0)
                goto LABEL_1472;
              v154 = (_QWORD *)*v154;
              if (v155)
              {
                if (!v154)
                  goto LABEL_1472;
              }
            }
            else
            {
              v155 = *((unsigned __int8 *)v151 + 55);
            }
            if (v155 >= v152)
              v156 = v152;
            else
              v156 = v155;
            v157 = memcmp(v153, v154, v156);
            if (v157)
            {
              if (v157 < 0)
                goto LABEL_419;
            }
            else if (v152 < v155)
            {
              goto LABEL_419;
            }
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            {
              a15 = a15 & 0xFFFFFFFF00000000 | 0x7521;
              rtc::webrtc_logging_impl::Log("\r\t\n\t", v158, v159, v160, v161, v162, v163, v164, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
            }
          }
LABEL_419:
          v165 = std::map<std::string,std::string>::operator[]((uint64_t)&v691, (uint64_t)&__s2);
          if ((std::string *)v165 != &v687)
          {
            if (*(char *)(v165 + 23) < 0)
            {
              if ((v687.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v167 = &v687;
              else
                v167 = (std::string *)v687.__r_.__value_.__r.__words[0];
              if ((v687.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v168 = HIBYTE(v687.__r_.__value_.__r.__words[2]);
              else
                v168 = v687.__r_.__value_.__l.__size_;
              std::string::__assign_no_alias<false>((std::string *)v165, (const std::string::value_type *)v167, v168);
            }
            else if ((*((_BYTE *)&v687.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)v165, v687.__r_.__value_.__l.__data_, v687.__r_.__value_.__l.__size_);
            }
            else
            {
              v166 = *(_OWORD *)&v687.__r_.__value_.__l.__data_;
              *(_QWORD *)(v165 + 16) = *((_QWORD *)&v687.__r_.__value_.__l + 2);
              *(_OWORD *)v165 = v166;
            }
          }
          if ((SHIBYTE(v687.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            break;
          operator delete(v687.__r_.__value_.__l.__data_);
          if (SHIBYTE(v690) < 0)
            goto LABEL_433;
LABEL_361:
          v132 += 2;
          if (v132 == (unsigned __int8 **)v133)
            goto LABEL_434;
        }
        if ((SHIBYTE(v690) & 0x80000000) == 0)
          goto LABEL_361;
LABEL_433:
        operator delete(__s2);
        v132 += 2;
      }
      while (v132 != (unsigned __int8 **)v133);
LABEL_434:
      v132 = (unsigned __int8 **)v729[0];
LABEL_435:
      if (v132)
      {
        v729[1] = (std::string::size_type)v132;
        operator delete(v132);
      }
      v169 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a12 + 16))(a12);
      v171 = *(const cricket::Codec **)(a12 + 280);
      v172 = *(const cricket::Codec **)(a12 + 288);
      if (v171 == v172)
      {
LABEL_440:
        if (v169)
        {
          BYTE7(v730) = 0;
          LOBYTE(v729[0]) = 0;
          cricket::CreateVideoCodec(__na, (unsigned __int8 *)v729, (uint64_t)__p);
          if (SBYTE7(v730) < 0)
            operator delete((void *)v729[0]);
        }
        else
        {
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0B1418;
          LODWORD(__p[0].__r_.__value_.__r.__words[1]) = 0;
          HIDWORD(__p[0].__r_.__value_.__r.__words[1]) = __na;
          __p[0].__r_.__value_.__r.__words[2] = 0;
          __p[3].__r_.__value_.__s.__data_[8] = 0;
          __p[3].__r_.__value_.__r.__words[2] = 0;
          v702[24] = 0;
          LOBYTE(v704) = 0;
          v705 = 0uLL;
          memset((char *)&__p[1].__r_.__value_.__r.__words[1] + 7, 0, 18);
          *((_QWORD *)&v704 + 1) = &v705;
          v707 = 0;
          v706 = 0uLL;
        }
      }
      else
      {
        while (*((_DWORD *)v171 + 3) != __na)
        {
          v171 = (const cricket::Codec *)((char *)v171 + 216);
          if (v171 == v172)
            goto LABEL_440;
        }
        cricket::Codec::Codec((cricket::Codec *)__p, v171);
      }
      v173 = (std::string *)v691;
      if (v691 != &v692)
      {
        do
        {
          v174 = std::map<std::string,std::string>::operator[]((uint64_t)&v704 + 8, (uint64_t)&v173[1].__r_.__value_.__l.__size_);
          if ((std::string::size_type *)v174 != &v173[2].__r_.__value_.__r.__words[1])
          {
            v175 = v173[3].__r_.__value_.__s.__data_[7];
            if (*(char *)(v174 + 23) < 0)
            {
              if (v175 >= 0)
                v177 = &v173[2].__r_.__value_.__s.__data_[8];
              else
                v177 = (const std::string::value_type *)v173[2].__r_.__value_.__l.__size_;
              if (v175 >= 0)
                v178 = v173[3].__r_.__value_.__s.__data_[7];
              else
                v178 = v173[2].__r_.__value_.__r.__words[2];
              std::string::__assign_no_alias<false>((std::string *)v174, v177, v178);
            }
            else if (v173[3].__r_.__value_.__s.__data_[7] < 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)v174, (char *)v173[2].__r_.__value_.__l.__size_, v173[2].__r_.__value_.__r.__words[2]);
            }
            else
            {
              v176 = *(_OWORD *)&v173[2].__r_.__value_.__r.__words[1];
              *(_QWORD *)(v174 + 16) = v173[3].__r_.__value_.__l.__data_;
              *(_OWORD *)v174 = v176;
            }
          }
          v179 = (std::string *)v173->__r_.__value_.__l.__size_;
          if (v179)
          {
            do
            {
              v180 = (std::string **)v179;
              v179 = (std::string *)v179->__r_.__value_.__r.__words[0];
            }
            while (v179);
          }
          else
          {
            do
            {
              v180 = (std::string **)v173->__r_.__value_.__r.__words[2];
              v103 = *v180 == v173;
              v173 = (std::string *)v180;
            }
            while (!v103);
          }
          v173 = (std::string *)v180;
        }
        while (v180 != &v692);
      }
      v16 = a12;
      webrtc::AddOrReplaceCodec((webrtc *)a12, (cricket::MediaContentDescription *)__p, v170);
      cricket::Codec::~Codec((cricket::Codec *)__p);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v691, (uint64_t)v692);
      v124 = 1;
      a15 = (unint64_t)__s1a;
      v18 = a2;
      v19 = a1;
      if ((SHIBYTE(v697) & 0x80000000) == 0)
        goto LABEL_351;
LABEL_447:
      operator delete(__src);
      if ((SHIBYTE(v698.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_352;
LABEL_306:
      operator delete(v698.__r_.__value_.__l.__data_);
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_307;
LABEL_353:
      if ((v124 & 1) == 0)
        goto LABEL_571;
    }
    v124 = 0;
    if (SHIBYTE(v697) < 0)
      goto LABEL_447;
LABEL_351:
    if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_306;
LABEL_352:
    if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_353;
LABEL_307:
    operator delete(__sz.__r_.__value_.__l.__data_);
  }
  while ((v124 & 1) != 0);
LABEL_571:
  cricket::SimulcastDescription::~SimulcastDescription((cricket::SimulcastDescription *)v658);
  v207 = v660;
  if (v660)
  {
    v208 = v661;
    v209 = v660;
    if (v661 != v660)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v208[-1], v208[-1].__r_.__value_.__l.__size_);
        v210 = v208[-2].__r_.__value_.__l.__data_;
        if (v210)
        {
          v208[-2].__r_.__value_.__l.__size_ = (std::string::size_type)v210;
          operator delete(v210);
        }
        if (v208[-3].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v208[-4].__r_.__value_.__r.__words[2]);
        v208 = (std::string *)((char *)v208 - 80);
      }
      while (v208 != v207);
      v209 = v660;
    }
    v661 = v207;
    operator delete(v209);
  }
  if (SHIBYTE(v663.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v663.__r_.__value_.__l.__data_);
  v269 = (__int128 *)v664;
  if (v664)
  {
    v270 = *(__int128 **)v665;
    v271 = v664;
    if (*(void **)v665 != v664)
    {
      do
      {
        if (*((char *)v270 - 1) < 0)
          operator delete(*((void **)v270 - 3));
        v270 = (__int128 *)((char *)v270 - 24);
      }
      while (v270 != v269);
      v271 = v664;
    }
    *(_QWORD *)v665 = v269;
    operator delete(v271);
  }
  if (SHIBYTE(v669) < 0)
  {
    operator delete(v667);
    if ((SHIBYTE(v672) & 0x80000000) == 0)
    {
LABEL_709:
      v272 = (char *)v673;
      if (v673)
        goto LABEL_710;
LABEL_728:
      v274 = (void **)v676;
      if (!v676)
        goto LABEL_712;
      goto LABEL_729;
    }
  }
  else if ((SHIBYTE(v672) & 0x80000000) == 0)
  {
    goto LABEL_709;
  }
  operator delete(v670);
  v272 = (char *)v673;
  if (!v673)
    goto LABEL_728;
LABEL_710:
  v273 = v674;
  if (v674 == v272)
  {
    v674 = v272;
    operator delete(v272);
    v274 = (void **)v676;
    if (!v676)
      goto LABEL_712;
    goto LABEL_729;
  }
  do
  {
    v279 = (void *)*((_QWORD *)v273 - 3);
    if (v279)
    {
      *((_QWORD *)v273 - 2) = v279;
      operator delete(v279);
    }
    if (*(v273 - 25) < 0)
      operator delete(*((void **)v273 - 6));
    v273 -= 48;
  }
  while (v273 != v272);
  v674 = v272;
  operator delete(v673);
  v274 = (void **)v676;
  if (!v676)
  {
LABEL_712:
    v275 = (std::string *)v679;
    if (!v679)
      goto LABEL_740;
LABEL_713:
    v276 = v680;
    v277 = (cricket::StreamParams *)v275;
    if (v680 != v275)
    {
      do
        cricket::StreamParams::~StreamParams((cricket::StreamParams *)&v276[-6]);
      while (v276 != v275);
      v277 = v679;
    }
    v680 = v275;
    operator delete(v277);
    if (SHIBYTE(v683) < 0)
      goto LABEL_717;
LABEL_741:
    v278 = (std::string *)v684;
    if (!v684)
      return;
LABEL_742:
    v281 = v685;
    v282 = v278;
    if (v685 != v278)
    {
      do
        cricket::Candidate::~Candidate((void **)&v281[-18].__r_.__value_.__l.__data_);
      while (v281 != v278);
      v282 = v684;
    }
    v685 = v278;
    operator delete(v282);
    return;
  }
LABEL_729:
  for (n = v677; n != v274; n -= 10)
  {
    if (*((char *)n - 1) < 0)
    {
      operator delete(*(n - 3));
      if ((*((char *)n - 25) & 0x80000000) == 0)
      {
LABEL_737:
        if ((*((char *)n - 49) & 0x80000000) == 0)
          continue;
        goto LABEL_738;
      }
    }
    else if ((*((char *)n - 25) & 0x80000000) == 0)
    {
      goto LABEL_737;
    }
    operator delete(*(n - 6));
    if ((*((char *)n - 49) & 0x80000000) == 0)
      continue;
LABEL_738:
    operator delete(*(n - 9));
  }
  operator delete(v274);
  v275 = (std::string *)v679;
  if (v679)
    goto LABEL_713;
LABEL_740:
  if ((SHIBYTE(v683) & 0x80000000) == 0)
    goto LABEL_741;
LABEL_717:
  operator delete((void *)__len[0]);
  v278 = (std::string *)v684;
  if (v684)
    goto LABEL_742;
}

