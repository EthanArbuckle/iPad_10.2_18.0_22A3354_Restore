uint64_t webrtc::`anonymous namespace'::IsBaseLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = *(_DWORD *)(a1 + 172);
  if (v8 == 2)
  {
    if (*(_QWORD *)(a1 + 1936) != 2)
      absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)a1, a2, a3, a4, a5, a6, a7, a8);
    return (*(_BYTE *)(a1 + 308) + 1) < 2u;
  }
  else if (v8 == 1)
  {
    if (*(_QWORD *)(a1 + 1936) != 1)
      absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)a1, a2, a3, a4, a5, a6, a7, a8);
    return (*(_BYTE *)(a1 + 302) + 1) < 2u;
  }
  else
  {
    return 1;
  }
}

uint64_t std::optional<webrtc::VideoLayersAllocation>::operator=[abi:sn180100](uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  int *v4;
  int *v5;
  int *v6;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _OWORD *v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t *v46;
  _OWORD *v47;
  __int128 *v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  int v61;
  unint64_t *v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  unint64_t v73;
  void **v75;
  uint64_t v76;
  void **v77;
  unint64_t v78;

  v2 = a1;
  if (*(unsigned __int8 *)(a1 + 240) == *((unsigned __int8 *)a2 + 240))
  {
    if (!*(_BYTE *)(a1 + 240))
      return v2;
    v3 = *a2;
    *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
    *(_DWORD *)a1 = v3;
    if ((int *)a1 == a2)
      return v2;
    v6 = (int *)*((_QWORD *)a2 + 2);
    v4 = a2 + 4;
    v5 = v6;
    v7 = *((_QWORD *)v4 - 1);
    if ((v7 & 1) != 0)
      v8 = v5;
    else
      v8 = v4;
    v9 = v7 >> 1;
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & 1) != 0)
    {
      v12 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24);
      v13 = v10 >> 1;
      v75 = (void **)(a1 + 16);
      v76 = v12;
      if (v11 >= v9)
        goto LABEL_9;
    }
    else
    {
      v11 = 4;
      v12 = a1 + 16;
      v13 = v10 >> 1;
      v75 = (void **)(a1 + 16);
      v76 = a1 + 16;
      if (v9 <= 4)
      {
LABEL_9:
        v73 = *((_QWORD *)v4 - 1);
        v14 = v12 + 56 * v9;
        if (v13 < v9)
          v15 = 0;
        else
          v15 = v13 - v9;
        if (v13 < v9)
          v14 = 0;
        v72 = v14;
        if (v13 < v9)
          v16 = v9 - v13;
        else
          v16 = 0;
        if (v13 < v9)
          v17 = (_QWORD *)(v12 + 56 * v13);
        else
          v17 = 0;
        if (v13 < v9)
          v18 = v13;
        else
          v18 = v7 >> 1;
        v78 = v18;
        if (v18)
        {
          v19 = 0;
          while (1)
          {
            v20 = (int *)(v12 + 56 * v19);
            *(_QWORD *)v20 = *(_QWORD *)v8;
            if (v8 != v20)
              break;
LABEL_69:
            v56 = v12 + 56 * v19;
            v57 = v8[12];
            *(_BYTE *)(v56 + 52) = *((_BYTE *)v8 + 52);
            *(_DWORD *)(v56 + 48) = v57;
            v8 += 14;
            if (++v19 == v78)
              goto LABEL_70;
          }
          v21 = v12 + 56 * v19;
          v24 = *(_QWORD *)(v21 + 8);
          v23 = (unint64_t *)(v21 + 8);
          v22 = v24;
          v25 = *((_QWORD *)v8 + 1);
          if ((v25 & 1) != 0)
            v26 = (uint64_t *)*((_QWORD *)v8 + 2);
          else
            v26 = (uint64_t *)(v8 + 4);
          if ((v22 & 1) != 0)
          {
            v27 = (_QWORD *)v23[1];
            v28 = v23[2];
            v29 = v25 >> 1;
            if (v28 >= v25 >> 1)
            {
LABEL_31:
              v30 = v22 >> 1;
              v31 = v29 - v30;
              if (v29 < v30)
                v31 = 0;
              if (v30 >= v29)
                v32 = v29;
              else
                v32 = v30;
              if (v32)
              {
                v33 = 0;
                if (v32 < 4)
                  goto LABEL_42;
                if ((unint64_t)((char *)v27 - (char *)v26) < 0x20)
                  goto LABEL_42;
                v33 = v32 & 0x7FFFFFFFFFFFFFFCLL;
                v34 = &v26[v32 & 0x7FFFFFFFFFFFFFFCLL];
                v35 = v27 + 2;
                v36 = (__int128 *)(v26 + 2);
                v37 = v32 & 0x7FFFFFFFFFFFFFFCLL;
                do
                {
                  v38 = *v36;
                  *(v35 - 1) = *(v36 - 1);
                  *v35 = v38;
                  v35 += 2;
                  v36 += 2;
                  v37 -= 4;
                }
                while (v37);
                v26 += v32 & 0x7FFFFFFFFFFFFFFCLL;
                if (v32 != v33)
                {
LABEL_42:
                  v39 = v32 - v33;
                  v40 = &v27[v33];
                  v34 = v26;
                  do
                  {
                    v41 = *v34++;
                    *v40++ = v41;
                    --v39;
                  }
                  while (v39);
                }
                if (v30 < v29)
                {
LABEL_45:
                  if (!v27)
                    goto LABEL_104;
                  v77 = (void **)(v23 + 1);
                  v42 = 0;
                  v43 = 0;
                  v29 = v31;
                  v26 = v34;
                  v44 = (char *)&v27[v30];
                  v45 = 0;
                  if (v29 < 4)
                    goto LABEL_59;
                  goto LABEL_54;
                }
              }
              else
              {
                v34 = v26;
                if (v30 < v29)
                  goto LABEL_45;
              }
              v54 = *v23;
LABEL_68:
              *v23 = v25 & 0xFFFFFFFFFFFFFFFELL | v54 & 1;
              goto LABEL_69;
            }
          }
          else
          {
            v27 = v23 + 1;
            v28 = 4;
            v29 = v25 >> 1;
            if ((unint64_t)(v25 >> 1) <= 4)
              goto LABEL_31;
          }
          v77 = (void **)(v23 + 1);
          if (2 * v28 <= v29)
            v43 = v29;
          else
            v43 = 2 * v28;
          if (v43 >> 61)
            goto LABEL_105;
          v42 = (char *)operator new(8 * v43);
          v44 = v42;
          v12 = v76;
          v45 = 0;
          if (v29 < 4)
            goto LABEL_59;
LABEL_54:
          if ((unint64_t)(v44 - (char *)v26) >= 0x20)
          {
            v45 = v29 & 0xFFFFFFFFFFFFFFFCLL;
            v46 = &v26[v29 & 0xFFFFFFFFFFFFFFFCLL];
            v47 = v44 + 16;
            v48 = (__int128 *)(v26 + 2);
            v49 = v29 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v50 = *v48;
              *(v47 - 1) = *(v48 - 1);
              *v47 = v50;
              v47 += 2;
              v48 += 2;
              v49 -= 4;
            }
            while (v49);
            if (v29 == v45)
            {
LABEL_62:
              v54 = *v23;
              if (v42)
              {
                if ((v54 & 1) != 0)
                {
                  v55 = v42;
                  operator delete(*v77);
                  v42 = v55;
                  v12 = v76;
                }
                v23[1] = (unint64_t)v42;
                v23[2] = v43;
                LOBYTE(v54) = 1;
              }
              goto LABEL_68;
            }
LABEL_60:
            v51 = v29 - v45;
            v52 = &v44[8 * v45];
            do
            {
              v53 = *v46++;
              *(_QWORD *)v52 = v53;
              v52 += 8;
              --v51;
            }
            while (v51);
            goto LABEL_62;
          }
LABEL_59:
          v46 = v26;
          goto LABEL_60;
        }
LABEL_70:
        v2 = a1;
        if (!v16)
        {
          v59 = 0;
          v58 = 0;
          v68 = v72;
          v7 = v73;
          if (!v15)
          {
LABEL_98:
            v70 = *(_QWORD *)(v2 + 8);
            if (v58)
            {
              if ((v70 & 1) != 0)
                operator delete(*v75);
              *(_QWORD *)(v2 + 16) = v58;
              *(_QWORD *)(v2 + 24) = v59;
              LOBYTE(v70) = 1;
            }
            *(_QWORD *)(v2 + 8) = v7 & 0xFFFFFFFFFFFFFFFELL | v70 & 1;
            return v2;
          }
          goto LABEL_92;
        }
        if (!v17)
        {
LABEL_104:
          __break(1u);
          goto LABEL_105;
        }
        v58 = 0;
        v59 = 0;
        v7 = v73;
        v76 = v72;
        do
        {
LABEL_88:
          *v17 = *(_QWORD *)v8;
          v17[1] = 0;
          v66 = *((_QWORD *)v8 + 1);
          if (v66 >= 2)
          {
            if ((v66 & 1) != 0)
            {
              absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::InitFrom(v17 + 1, (unint64_t *)v8 + 1);
            }
            else
            {
              v17[1] = v66;
              v67 = *((_OWORD *)v8 + 2);
              *((_OWORD *)v17 + 1) = *((_OWORD *)v8 + 1);
              *((_OWORD *)v17 + 2) = v67;
            }
          }
          v65 = v8[12];
          *((_BYTE *)v17 + 52) = *((_BYTE *)v8 + 52);
          *((_DWORD *)v17 + 12) = v65;
          v8 += 14;
          v17 += 7;
          --v16;
        }
        while (v16);
        v68 = v76;
        if (!v15)
          goto LABEL_98;
LABEL_92:
        if (v68)
        {
          v69 = v68 + 56 * v15 - 48;
          do
          {
            if ((*(_BYTE *)v69 & 1) != 0)
              operator delete(*(void **)(v69 + 8));
            v69 -= 56;
            --v15;
          }
          while (v15);
          goto LABEL_98;
        }
        goto LABEL_104;
      }
    }
    if (2 * v11 <= v9)
      v59 = v7 >> 1;
    else
      v59 = 2 * v11;
    if (v59 >= 0x492492492492493)
LABEL_105:
      std::__throw_bad_array_new_length[abi:sn180100]();
    v58 = operator new(56 * v59);
    v17 = v58;
    v16 = v7 >> 1;
    v15 = v13;
    goto LABEL_88;
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v60 = (_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v2 + 8))
      absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::DestroyContents(v60);
    *(_BYTE *)(v2 + 240) = 0;
  }
  else
  {
    v61 = *a2;
    *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
    *(_DWORD *)a1 = v61;
    *(_QWORD *)(a1 + 8) = 0;
    v62 = (unint64_t *)(a1 + 8);
    v64 = *((_QWORD *)a2 + 1);
    v63 = (unint64_t *)(a2 + 2);
    if (v64 >= 2)
      absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::InitFrom(v62, v63);
    *(_BYTE *)(v2 + 240) = 1;
  }
  return v2;
}

uint64_t webrtc::RTPSenderVideo::SendEncodedImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void **v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v32;
  void *__p;
  void *v34;
  uint64_t v35;
  _BYTE v36[152];
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  char v45;
  _BYTE v46[1681];
  _BYTE v47[152];
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  char v56;
  _BYTE v57[1681];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 1144);
  if (v13)
  {
    std::__optional_move_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__optional_move_base[abi:sn180100]((uint64_t)v47, a6);
    v48 = *(_OWORD *)(a6 + 152);
    v49 = *(_OWORD *)(a6 + 168);
    v50[0] = *(_OWORD *)(a6 + 184);
    *(_OWORD *)((char *)v50 + 13) = *(_OWORD *)(a6 + 197);
    LOBYTE(v51) = 0;
    v56 = 0;
    if (*(_BYTE *)(a6 + 284))
    {
      v14 = *(_OWORD *)(a6 + 232);
      v15 = *(_OWORD *)(a6 + 248);
      v55 = *(_BYTE *)(a6 + 280);
      v51 = *(_OWORD *)(a6 + 216);
      v52 = v14;
      v16 = *(_OWORD *)(a6 + 264);
      v53 = v15;
      v54 = v16;
      v56 = 1;
    }
    v17 = (void **)v47;
    memcpy(v57, (const void *)(a6 + 288), sizeof(v57));
    v18 = webrtc::RTPSenderVideoFrameTransformerDelegate::TransformFrame(v13, a2, a3, a4, (uint64_t)a5, (uint64_t)v47, a7);
  }
  else
  {
    v20 = a5[2];
    v21 = 1000 * v20;
    v22 = v20 <= 0;
    v23 = 0x8000000000000000;
    if (!v22)
      v23 = v21;
    v32 = v23;
    v24 = a5[17];
    if (v24)
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    else
      v25 = 0;
    v26 = a5[18];
    v17 = (void **)v36;
    std::__optional_move_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__optional_move_base[abi:sn180100]((uint64_t)v36, a6);
    v37 = *(_OWORD *)(a6 + 152);
    v38 = *(_OWORD *)(a6 + 168);
    v39[0] = *(_OWORD *)(a6 + 184);
    *(_OWORD *)((char *)v39 + 13) = *(_OWORD *)(a6 + 197);
    LOBYTE(v40) = 0;
    v45 = 0;
    if (*(_BYTE *)(a6 + 284))
    {
      v27 = *(_OWORD *)(a6 + 232);
      v28 = *(_OWORD *)(a6 + 248);
      v44 = *(_BYTE *)(a6 + 280);
      v40 = *(_OWORD *)(a6 + 216);
      v41 = v27;
      v29 = *(_OWORD *)(a6 + 264);
      v42 = v28;
      v43 = v29;
      v45 = 1;
    }
    memcpy(v46, (const void *)(a6 + 288), sizeof(v46));
    v34 = 0;
    v35 = 0;
    __p = 0;
    if (v26)
      v30 = v25;
    else
      v30 = 0;
    v18 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, void **))a1)(a1, a2, a3, a4, v32, v30, v26, v26, v36, a7, &__p);
    if (__p)
    {
      v34 = __p;
      operator delete(__p);
      v17 = (void **)v36;
    }
  }
  if (!*((_BYTE *)v17 + 144))
    return v18;
  if (((_BYTE)v17[14] & 1) == 0)
  {
    if (((_BYTE)v17[8] & 1) == 0)
      goto LABEL_20;
LABEL_24:
    operator delete(v17[9]);
    if (((_BYTE)v17[2] & 1) == 0)
      return v18;
    goto LABEL_21;
  }
  operator delete(v17[15]);
  if (((_BYTE)v17[8] & 1) != 0)
    goto LABEL_24;
LABEL_20:
  if (((_BYTE)v17[2] & 1) != 0)
LABEL_21:
    operator delete(v17[3]);
  return v18;
}

void absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::DestroyContents(_QWORD *a1)
{
  unint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (void **)(a1 + 1);
  v2 = *a1;
  v4 = *a1 & 1;
  v5 = a1 + 1;
  if ((*a1 & 1) != 0)
    v5 = *v3;
  if (v2 >= 2)
  {
    if (!v5)
    {
      __break(1u);
      return;
    }
    v6 = v2 >> 1;
    v7 = (uint64_t)v5 + 56 * (v2 >> 1) - 48;
    do
    {
      if ((*(_BYTE *)v7 & 1) != 0)
        operator delete(*(void **)(v7 + 8));
      v7 -= 56;
      --v6;
    }
    while (v6);
    v4 = *a1 & 1;
  }
  if (v4)
    operator delete(*v3);
}

BOOL webrtc::operator!=(float *a1, float *a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)a1 == *(unsigned __int8 *)a2
    && *((unsigned __int8 *)a1 + 1) == *((unsigned __int8 *)a2 + 1)
    && *((unsigned __int8 *)a1 + 2) == *((unsigned __int8 *)a2 + 2)
    && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
    && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
    && *((_DWORD *)a1 + 3) == *((_DWORD *)a2 + 3))
  {
    v2 = (*((_BYTE *)a1 + 64) != 0) ^ (*((_BYTE *)a2 + 64) != 0);
    if (!*((_BYTE *)a1 + 64) || !*((_BYTE *)a2 + 64))
      return v2;
    if (*((_DWORD *)a1 + 14) == *((_DWORD *)a2 + 14)
      && *((_DWORD *)a1 + 15) == *((_DWORD *)a2 + 15)
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && a1[11] == a2[11]
      && a1[12] == a2[12])
    {
      return a1[13] != a2[13];
    }
  }
  return 1;
}

unint64_t *absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::InitFrom(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *result;
  int v10;
  unint64_t v11;
  __int128 v12;

  v2 = *a2;
  if (*a2 <= 1)
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = v2 >> 1;
  if ((v2 & 1) == 0)
  {
    v6 = a1 + 1;
    v7 = a2 + 1;
    goto LABEL_11;
  }
  if (v5 <= 8)
    v8 = 8;
  else
    v8 = v2 >> 1;
  if (v8 >= 0x492492492492493)
LABEL_16:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v6 = operator new(56 * v8);
  a1[1] = (unint64_t)v6;
  a1[2] = v8;
  v7 = (_QWORD *)a2[1];
  do
  {
LABEL_11:
    *v6 = *v7;
    v6[1] = 0;
    result = v6 + 1;
    v11 = v7[1];
    if (v11 >= 2)
    {
      if ((v11 & 1) != 0)
      {
        result = (unint64_t *)absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::InitFrom(result, v7 + 1);
      }
      else
      {
        v6[1] = v11;
        v12 = *((_OWORD *)v7 + 2);
        *((_OWORD *)v6 + 1) = *((_OWORD *)v7 + 1);
        *((_OWORD *)v6 + 2) = v12;
      }
    }
    v10 = *((_DWORD *)v7 + 12);
    *((_BYTE *)v6 + 52) = *((_BYTE *)v7 + 52);
    *((_DWORD *)v6 + 12) = v10;
    v7 += 7;
    v6 += 7;
    --v5;
  }
  while (v5);
  *a1 = *a2;
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::RTPSenderVideoFrameTransformerDelegate>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 108);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::RTPSenderVideoFrameTransformerDelegate>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 27;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::RTPSenderVideoFrameTransformerDelegate>::~RefCountedObject(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0BDD70;
  v2 = *(void (****)(_QWORD))(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (**v2)(v2);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  return a1;
}

void rtc::RefCountedObject<webrtc::RTPSenderVideoFrameTransformerDelegate>::~RefCountedObject(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C0BDD70;
  v2 = *(void (****)(_QWORD))(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (**v2)(v2);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::RTPSenderVideoFrameTransformerDelegate>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 108));
  return v1 == 1;
}

void std::__tree<std::__value_type<int,webrtc::RTPSenderVideo::TemporalLayerStats>,std::__map_value_compare<int,std::__value_type<int,webrtc::RTPSenderVideo::TemporalLayerStats>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RTPSenderVideo::TemporalLayerStats>>>::destroy(void **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,webrtc::RTPSenderVideo::TemporalLayerStats>,std::__map_value_compare<int,std::__value_type<int,webrtc::RTPSenderVideo::TemporalLayerStats>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RTPSenderVideo::TemporalLayerStats>>>::destroy(*a1);
    std::__tree<std::__value_type<int,webrtc::RTPSenderVideo::TemporalLayerStats>,std::__map_value_compare<int,std::__value_type<int,webrtc::RTPSenderVideo::TemporalLayerStats>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RTPSenderVideo::TemporalLayerStats>>>::destroy(a1[1]);
    std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](a1 + 5);
    operator delete(a1);
  }
}

uint64_t webrtc::RTPSenderVideoFrameTransformerDelegate::TransformFrame(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  pthread_mutex_t *v14;
  void (***v15)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, void **);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void (***v29)(_QWORD);
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  void *__p;
  void *v45;
  uint64_t v46;
  _BYTE v47[16];
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  char v63;
  _BYTE v64[1681];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v14 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  if (*(_BYTE *)(a1 + 104))
  {
    v41 = a2;
    v42 = a7;
    v15 = *(void (****)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, void **))(a1 + 72);
    v16 = *(_QWORD *)(a5 + 16);
    if (v16 <= 0)
      v17 = 0x8000000000000000;
    else
      v17 = 1000 * v16;
    v18 = *(_QWORD *)(a5 + 136);
    if (v18)
      (**(void (***)(_QWORD))v18)(*(_QWORD *)(a5 + 136));
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
    v21 = *(_QWORD *)(a5 + 144);
    std::__optional_move_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__optional_move_base[abi:sn180100]((uint64_t)v47, a6);
    v55 = *(_OWORD *)(a6 + 152);
    v56 = *(_OWORD *)(a6 + 168);
    v57[0] = *(_OWORD *)(a6 + 184);
    *(_OWORD *)((char *)v57 + 13) = *(_OWORD *)(a6 + 197);
    LOBYTE(v58) = 0;
    v63 = 0;
    if (*(_BYTE *)(a6 + 284))
    {
      v22 = *(_OWORD *)(a6 + 232);
      v23 = *(_OWORD *)(a6 + 248);
      v62 = *(_BYTE *)(a6 + 280);
      v58 = *(_OWORD *)(a6 + 216);
      v59 = v22;
      v24 = *(_OWORD *)(a6 + 264);
      v60 = v23;
      v61 = v24;
      v63 = 1;
    }
    memcpy(v64, (const void *)(a6 + 288), sizeof(v64));
    v45 = 0;
    v46 = 0;
    __p = 0;
    if (v20)
      v25 = v19;
    else
      v25 = 0;
    (**v15)(v15, v41, a3, a4, v17, v25, v20, v21, v47, v42, &__p);
    if (__p)
    {
      v45 = __p;
      operator delete(__p);
    }
    if (!v54)
      goto LABEL_19;
    if ((v52 & 1) != 0)
    {
      operator delete(v53);
      if ((v50 & 1) == 0)
      {
LABEL_17:
        if ((v48 & 1) == 0)
        {
LABEL_19:
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          pthread_mutex_unlock(v14);
          return 1;
        }
LABEL_18:
        operator delete(v49);
        goto LABEL_19;
      }
    }
    else if ((v50 & 1) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v51);
    if ((v48 & 1) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  pthread_mutex_unlock(v14);
  v26 = *(_QWORD *)(a1 + 80);
  v27 = operator new();
  v28 = *(_DWORD *)(a1 + 88);
  v29 = *(void (****)(_QWORD))(a5 + 136);
  *(_QWORD *)v27 = off_24C0BDDB0;
  *(_QWORD *)(v27 + 8) = v29;
  if (v29)
    (**v29)(v29);
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(a5 + 144);
  std::__optional_move_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__optional_move_base[abi:sn180100](v27 + 24, a6);
  v30 = *(_OWORD *)(a6 + 152);
  *(_BYTE *)(v27 + 240) = 0;
  v31 = *(_OWORD *)(a6 + 168);
  *(_OWORD *)(v27 + 176) = v30;
  *(_OWORD *)(v27 + 192) = v31;
  *(_OWORD *)(v27 + 208) = *(_OWORD *)(a6 + 184);
  *(_OWORD *)(v27 + 221) = *(_OWORD *)(a6 + 197);
  *(_BYTE *)(v27 + 308) = 0;
  if (*(_BYTE *)(a6 + 284))
  {
    v32 = *(_OWORD *)(a6 + 232);
    v33 = *(_OWORD *)(a6 + 248);
    *(_BYTE *)(v27 + 304) = *(_BYTE *)(a6 + 280);
    *(_OWORD *)(v27 + 240) = *(_OWORD *)(a6 + 216);
    *(_OWORD *)(v27 + 256) = v32;
    v34 = *(_OWORD *)(a6 + 264);
    *(_OWORD *)(v27 + 272) = v33;
    *(_OWORD *)(v27 + 288) = v34;
    *(_BYTE *)(v27 + 308) = 1;
  }
  memcpy((void *)(v27 + 312), (const void *)(a6 + 288), 0x691uLL);
  *(_DWORD *)(v27 + 2000) = *(_DWORD *)(a5 + 24);
  *(_BYTE *)(v27 + 2004) = a2;
  *(_QWORD *)(v27 + 2008) = a3;
  *(_DWORD *)(v27 + 2016) = a4;
  v35 = *(_QWORD *)(a5 + 16);
  v36 = 1000 * v35;
  v37 = v35 <= 0;
  v38 = 0x8000000000000000;
  if (!v37)
    v38 = v36;
  *(_QWORD *)(v27 + 2024) = v38;
  *(_OWORD *)(v27 + 2032) = *(_OWORD *)(a5 + 168);
  *(_QWORD *)(v27 + 2048) = a7;
  *(_DWORD *)(v27 + 2056) = v28;
  *(_QWORD *)(v27 + 2064) = 0;
  *(_QWORD *)(v27 + 2080) = 0;
  *(_QWORD *)(v27 + 2072) = 0;
  v43 = v27;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 32))(v26, &v43);
  v39 = v43;
  v43 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  return 1;
}

uint64_t webrtc::RTPSenderVideoFrameTransformerDelegate::OnTransformedFrame(uint64_t a1, uint64_t *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;
  _QWORD v10[2];
  uint64_t (*v11)(char, uint64_t *, uint64_t *);
  uint64_t (*v12)(uint64_t, uint64_t);

  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  if (*(_QWORD *)(a1 + 72))
  {
    (**(void (***)(uint64_t))a1)(a1);
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *a2;
    *a2 = 0;
    v10[0] = a1;
    v10[1] = v6;
    v11 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::RTPSenderVideoFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0>;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RTPSenderVideoFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0 &&>;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v5 + 8))(v5, v10, &v9, &v8);
    v11(1, v10, v10);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::RTPSenderVideoFrameTransformerDelegate::StartShortCircuiting(webrtc::RTPSenderVideoFrameTransformerDelegate *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  *((_BYTE *)this + 104) = 1;
  return pthread_mutex_unlock(v2);
}

uint64_t webrtc::RTPSenderVideoFrameTransformerDelegate::SetVideoLayersAllocationUnderLock(uint64_t a1, int *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  char v19;
  _QWORD v20[3];
  _QWORD v21[27];

  v21[26] = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  v9 = *(_QWORD *)(a1 + 72);
  if (!v9)
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc", 242, "sender_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v5, v6, v7, v8, v17);
  v18 = *a2;
  v19 = *((_BYTE *)a2 + 4);
  v10 = *((_QWORD *)a2 + 1);
  if ((v10 & 1) != 0)
  {
    v15 = *((_QWORD *)a2 + 3);
    v20[1] = *((_QWORD *)a2 + 2);
    v20[2] = v15;
    v20[0] = v10 | 1;
    *((_QWORD *)a2 + 1) = 0;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 16))(v9, &v18);
    if (!v20[0])
      return pthread_mutex_unlock(v4);
LABEL_10:
    absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::DestroyContents(v20);
    return pthread_mutex_unlock(v4);
  }
  if (v10 >= 2)
  {
    v11 = v10 >> 1;
    v12 = a2 + 4;
    v13 = v21;
    do
    {
      v14 = *((_OWORD *)v12 + 1);
      *((_OWORD *)v13 - 1) = *(_OWORD *)v12;
      *(_OWORD *)v13 = v14;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v12 + 2);
      *((_DWORD *)v13 + 8) = v12[12];
      *((_BYTE *)v13 + 36) = *((_BYTE *)v12 + 52);
      v13 += 7;
      *((_QWORD *)v12 + 1) = 0;
      v12 += 14;
      --v11;
    }
    while (v11);
    v10 = *((_QWORD *)a2 + 1);
  }
  v20[0] = v10 & 0xFFFFFFFFFFFFFFFELL;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 16))(v9, &v18);
  if (v20[0])
    goto LABEL_10;
  return pthread_mutex_unlock(v4);
}

void webrtc::`anonymous namespace'::TransformableVideoSenderFrame::~TransformableVideoSenderFrame(webrtc::_anonymous_namespace_::TransformableVideoSenderFrame *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24C0BDDB0;
  v2 = (void *)*((_QWORD *)this + 258);
  if (v2)
  {
    *((_QWORD *)this + 259) = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 168))
  {
    if ((*((_BYTE *)this + 136) & 1) != 0)
    {
      operator delete(*((void **)this + 18));
      if ((*((_BYTE *)this + 88) & 1) == 0)
      {
LABEL_6:
        if ((*((_BYTE *)this + 40) & 1) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
    else if ((*((_BYTE *)this + 88) & 1) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*((void **)this + 12));
    if ((*((_BYTE *)this + 40) & 1) != 0)
LABEL_7:
      operator delete(*((void **)this + 6));
  }
LABEL_8:
  v3 = *((_QWORD *)this + 1);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24C0BDDB0;
  v2 = (void *)*((_QWORD *)this + 258);
  if (v2)
  {
    *((_QWORD *)this + 259) = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 168))
  {
    if ((*((_BYTE *)this + 136) & 1) != 0)
    {
      operator delete(*((void **)this + 18));
      if ((*((_BYTE *)this + 88) & 1) == 0)
      {
LABEL_6:
        if ((*((_BYTE *)this + 40) & 1) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
    else if ((*((_BYTE *)this + 88) & 1) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*((void **)this + 12));
    if ((*((_BYTE *)this + 40) & 1) != 0)
LABEL_7:
      operator delete(*((void **)this + 6));
  }
LABEL_8:
  v3 = *((_QWORD *)this + 1);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoSenderFrame::GetData(webrtc::_anonymous_namespace_::TransformableVideoSenderFrame *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1))
    return v2;
  else
    return 0;
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoSenderFrame::SetData(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t result;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = a3;
  v7 = malloc_type_malloc(a3, 0xB64CC8DFuLL);
  *(_QWORD *)(v6 + 16) = v7;
  if (a3)
    memmove(v7, a2, a3);
  *(_QWORD *)v6 = &unk_24C0B3A40;
  *(_DWORD *)(v6 + 24) = 0;
  v8 = (unsigned int *)(v6 + 24);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  result = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoSenderFrame::GetPayloadType(webrtc::_anonymous_namespace_::TransformableVideoSenderFrame *this)
{
  return *((unsigned __int8 *)this + 2004);
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoSenderFrame::GetSsrc(webrtc::_anonymous_namespace_::TransformableVideoSenderFrame *this)
{
  return *((unsigned int *)this + 514);
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoSenderFrame::GetTimestamp(webrtc::_anonymous_namespace_::TransformableVideoSenderFrame *this)
{
  return *((unsigned int *)this + 504);
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoSenderFrame::SetRTPTimestamp(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2016) = a2;
  return this;
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoSenderFrame::GetCaptureTimeIdentifier(webrtc::_anonymous_namespace_::TransformableVideoSenderFrame *this)
{
  return *((_QWORD *)this + 254);
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoSenderFrame::GetDirection(webrtc::_anonymous_namespace_::TransformableVideoSenderFrame *this)
{
  return 2;
}

char *webrtc::`anonymous namespace'::TransformableVideoSenderFrame::GetMimeType@<X0>(char *this@<X0>, char *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  const char *v4;
  size_t v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  const char *v12;
  BOOL v13;
  _DWORD v14[5];
  char v15;

  v2 = (unint64_t)a2;
  if (!this[2012])
  {
    a2[23] = 15;
    if (a2 > "video/x-unknown" || a2 + 15 <= "video/x-unknown")
    {
      strcpy(a2, "video/x-unknown");
      return this;
    }
    goto LABEL_26;
  }
  v15 = 6;
  if (v14 <= (_DWORD *)"video/" && (char *)&v14[1] + 2 > "video/")
    goto LABEL_26;
  strcpy((char *)v14, "video/");
  v3 = *((int *)this + 502);
  if (v3 >= 6)
    goto LABEL_27;
  v4 = (&off_24C0BDE20)[v3];
  v5 = strlen(v4);
  v6 = v5 + 6;
  if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v5;
  if (v6 > 0x16)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    *(_QWORD *)(v2 + 8) = v6;
    *(_QWORD *)(v2 + 16) = v9 | 0x8000000000000000;
    *(_QWORD *)v2 = v10;
    v2 = (unint64_t)v10;
  }
  else
  {
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)v2 = 0;
    *(_BYTE *)(v2 + 23) = v6;
  }
  this = (char *)(v2 + 6);
  v11 = (unint64_t)v14 < v2 || v2 + 6 <= (unint64_t)v14;
  if (!v11
    || ((*(_WORD *)(v2 + 4) = 12143, *(_DWORD *)v2 = 1701079414, v12 = &this[v7], this <= v4)
      ? (v13 = v12 > v4)
      : (v13 = 0),
        v13))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)this);
  }
  if (v7)
    this = (char *)memcpy(this, v4, v7);
  *v12 = 0;
  return this;
}

BOOL webrtc::`anonymous namespace'::TransformableVideoSenderFrame::IsKeyFrame(webrtc::_anonymous_namespace_::TransformableVideoSenderFrame *this)
{
  return *((_DWORD *)this + 500) == 3;
}

void webrtc::`anonymous namespace'::TransformableVideoSenderFrame::Metadata(webrtc::_anonymous_namespace_::TransformableVideoSenderFrame *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  void *v10;

  webrtc::RTPVideoHeader::GetAsMetadata((webrtc::_anonymous_namespace_::TransformableVideoSenderFrame *)((char *)this + 24), a2);
  *(_DWORD *)(a3 + 1792) = *((_DWORD *)this + 514);
  v5 = (_BYTE *)*((_QWORD *)this + 258);
  v6 = (_BYTE *)*((_QWORD *)this + 259);
  v7 = v6 - v5;
  if (v6 == v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(void **)(a3 + 1800);
    if (!v10)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v7 < 0)
    abort();
  v8 = (char *)operator new(v6 - v5);
  v9 = &v8[4 * (v7 >> 2)];
  memcpy(v8, v5, v7);
  v10 = *(void **)(a3 + 1800);
  if (v10)
  {
LABEL_4:
    *(_QWORD *)(a3 + 1808) = v10;
    operator delete(v10);
  }
LABEL_5:
  *(_QWORD *)(a3 + 1800) = v8;
  *(_QWORD *)(a3 + 1808) = v9;
  *(_QWORD *)(a3 + 1816) = v9;
}

void webrtc::`anonymous namespace'::TransformableVideoSenderFrame::SetMetadata(webrtc::_anonymous_namespace_::TransformableVideoSenderFrame *this, const webrtc::VideoFrameMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  void *v15;

  webrtc::RTPVideoHeader::SetFromMetadata((webrtc::_anonymous_namespace_::TransformableVideoSenderFrame *)((char *)this + 24), a2, a3, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 514) = *((_DWORD *)a2 + 448);
  v10 = (_BYTE *)*((_QWORD *)a2 + 225);
  v11 = (_BYTE *)*((_QWORD *)a2 + 226);
  v12 = v11 - v10;
  if (v11 == v10)
  {
    v13 = 0;
    v14 = 0;
    v15 = (void *)*((_QWORD *)this + 258);
    if (!v15)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v12 < 0)
    abort();
  v13 = (char *)operator new(v11 - v10);
  v14 = &v13[4 * (v12 >> 2)];
  memcpy(v13, v10, v12);
  v15 = (void *)*((_QWORD *)this + 258);
  if (v15)
  {
LABEL_4:
    *((_QWORD *)this + 259) = v15;
    operator delete(v15);
  }
LABEL_5:
  *((_QWORD *)this + 258) = v13;
  *((_QWORD *)this + 259) = v14;
  *((_QWORD *)this + 260) = v14;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RTPSenderVideoFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0 &&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  void (***v5)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, void **);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t result;
  void (***v22)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, void **);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  int64_t v38;
  void (***v39)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, void **);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  pthread_mutex_t *v53;
  void *v54;
  void *v55;
  char *v56;
  void *__p;
  void *v58;
  char *v59;
  _BYTE v60[16];
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  _BYTE v68[15];
  __int16 v69;
  int v70;
  char v71;
  char v72;
  _BYTE v73[14];
  char v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  char v79;
  char v80;
  _QWORD v81[5];
  char v82;
  void *v83;
  char v84;
  void *v85;
  unsigned int v86;
  void *v87;
  _BYTE *v88;
  _BYTE v89[16];
  char v90;
  void *v91;
  char v92;
  void *v93;
  char v94;
  void *v95;
  char v96;
  __int128 v97;
  __int128 v98;
  _OWORD v99[2];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char v104;
  char v105;
  _BYTE v106[1681];
  uint64_t v107;

  v2 = (uint64_t *)MEMORY[0x24BDAC7A8](a1, a2);
  v107 = *MEMORY[0x24BDAC8D0];
  v4 = *v2;
  v3 = (_QWORD *)v2[1];
  v2[1] = 0;
  v53 = (pthread_mutex_t *)(v4 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 8));
  if (*(_QWORD *)(v4 + 72))
  {
    if ((*(unsigned int (**)(_QWORD *))(*v3 + 72))(v3) == 2)
    {
      v5 = *(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, void **))(v4 + 72);
      v6 = (*(uint64_t (**)(_QWORD *))(*v3 + 32))(v3);
      v7 = v3[251];
      v8 = (*(uint64_t (**)(_QWORD *))(*v3 + 48))(v3);
      v51 = v3[253];
      v9 = (*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
      v49 = v10;
      v50 = v9;
      v48 = v3[2];
      std::__optional_move_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__optional_move_base[abi:sn180100]((uint64_t)v89, (uint64_t)(v3 + 3));
      v11 = *((_OWORD *)v3 + 12);
      v97 = *((_OWORD *)v3 + 11);
      v98 = v11;
      v99[0] = *((_OWORD *)v3 + 13);
      *(_OWORD *)((char *)v99 + 13) = *(_OWORD *)((char *)v3 + 221);
      LOBYTE(v100) = 0;
      v105 = 0;
      if (*((_BYTE *)v3 + 308))
      {
        v12 = *((_OWORD *)v3 + 17);
        v101 = *((_OWORD *)v3 + 16);
        v102 = v12;
        v103 = *((_OWORD *)v3 + 18);
        v104 = *((_BYTE *)v3 + 304);
        v100 = *((_OWORD *)v3 + 15);
        v105 = 1;
      }
      memcpy(v106, v3 + 39, sizeof(v106));
      v13 = v3[256];
      (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*v3 + 96))(v81, v3);
      __p = 0;
      v58 = 0;
      v59 = 0;
      v14 = v87;
      v15 = v88 - (_BYTE *)v87;
      if (v88 == v87)
      {
LABEL_8:
        (**v5)(v5, v6, v7, v8, v51, v50, v49, v48, v89, v13, &__p);
        if (__p)
        {
          v58 = __p;
          operator delete(__p);
        }
        if (v87)
        {
          v88 = v87;
          operator delete(v87);
        }
        if ((v84 & 1) != 0)
        {
          operator delete(v85);
          if ((v82 & 1) == 0)
          {
LABEL_14:
            if (!v96)
              goto LABEL_47;
LABEL_36:
            if ((v94 & 1) != 0)
            {
              operator delete(v95);
              if ((v92 & 1) == 0)
              {
LABEL_38:
                if ((v90 & 1) == 0)
                  goto LABEL_47;
                goto LABEL_45;
              }
            }
            else if ((v92 & 1) == 0)
            {
              goto LABEL_38;
            }
            operator delete(v93);
            if ((v90 & 1) != 0)
            {
LABEL_45:
              v47 = v91;
LABEL_46:
              operator delete(v47);
            }
LABEL_47:
            pthread_mutex_unlock(v53);
            return (*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
          }
        }
        else if ((v82 & 1) == 0)
        {
          goto LABEL_14;
        }
        operator delete(v83);
        if (!v96)
          goto LABEL_47;
        goto LABEL_36;
      }
      if ((v15 & 0x8000000000000000) == 0)
      {
        v16 = v8;
        v17 = v7;
        v18 = v6;
        v19 = (char *)operator new(v88 - (_BYTE *)v87);
        v20 = &v19[4 * (v15 >> 2)];
        __p = v19;
        v59 = v20;
        memcpy(v19, v14, v15);
        v58 = v20;
        v6 = v18;
        v7 = v17;
        v8 = v16;
        goto LABEL_8;
      }
LABEL_49:
      abort();
    }
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*v3 + 96))(v81, v3);
    v22 = *(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, void **))(v4 + 72);
    v23 = (*(uint64_t (**)(_QWORD *))(*v3 + 32))(v3);
    v24 = v86;
    v25 = (*(uint64_t (**)(_QWORD *))(*v3 + 48))(v3);
    v26 = (*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    v28 = v27;
    (*(void (**)(_QWORD *))(*v3 + 16))(v3);
    v30 = v29;
    v60[0] = 0;
    v67 = 0;
    memset(v68, 0, sizeof(v68));
    v69 = 1;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    *(_QWORD *)&v73[6] = 0xFF000000000000;
    *(_QWORD *)v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    webrtc::RTPVideoHeader::SetFromMetadata((webrtc::RTPVideoHeader *)v60, (const webrtc::VideoFrameMetadata *)v81, v31, v32, v33, v34, v35, v36);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v37 = v87;
    v38 = v88 - (_BYTE *)v87;
    if (v88 != v87)
    {
      v52 = v30;
      if (v38 < 0)
        goto LABEL_49;
      v39 = v22;
      v40 = v24;
      v41 = v28;
      v42 = v26;
      v43 = v25;
      v44 = v23;
      v45 = (char *)operator new(v88 - (_BYTE *)v87);
      v46 = &v45[4 * (v38 >> 2)];
      v54 = v45;
      v56 = v46;
      memcpy(v45, v37, v38);
      v55 = v46;
      v23 = v44;
      v25 = v43;
      v26 = v42;
      v28 = v41;
      v24 = v40;
      v22 = v39;
      v30 = v52;
    }
    (**v22)(v22, v23, v24 | 0x100000000, v25, 0x8000000000000000, v26, v28, v30, v60, 10000, &v54);
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    if (!v67)
      goto LABEL_28;
    if ((v65 & 1) != 0)
    {
      operator delete(v66);
      if ((v63 & 1) == 0)
      {
LABEL_26:
        if ((v61 & 1) != 0)
LABEL_27:
          operator delete(v62);
LABEL_28:
        if (v87)
        {
          v88 = v87;
          operator delete(v87);
        }
        if ((v84 & 1) != 0)
          operator delete(v85);
        if ((v82 & 1) == 0)
          goto LABEL_47;
        v47 = v83;
        goto LABEL_46;
      }
    }
    else if ((v63 & 1) == 0)
    {
      goto LABEL_26;
    }
    operator delete(v64);
    if ((v61 & 1) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  result = pthread_mutex_unlock(v53);
  if (v3)
    return (*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::RTPSenderVideoFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v4 = *a2;
    *a2 = 0;
    *a3 = v4;
    v5 = a2[1];
    a2[1] = 0;
    a3[1] = v5;
  }
  v6 = a2[1];
  a2[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void webrtc::RtpSeqNumOnlyRefFinder::ManageFrame(uint64_t a1@<X0>, webrtc::RtpFrameObject **a2@<X1>, unint64_t *a3@<X8>)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  webrtc::RtpFrameObject *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  int64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  webrtc::RtpFrameObject *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;

  v6 = webrtc::RtpSeqNumOnlyRefFinder::ManageFrameInternal((uint64_t **)a1, *a2);
  *a3 = 0;
  if (v6 == 1)
  {
    v21 = *a2;
    *a2 = 0;
    *a3 = 2;
    a3[1] = (unint64_t)v21;
    webrtc::RtpSeqNumOnlyRefFinder::RetryStashedFrames((int64x2_t *)a1, a3);
    return;
  }
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 88);
    if (v7 >= 0x65)
    {
      v8 = *(_QWORD *)(a1 + 80);
      v9 = v7 - 1;
      v10 = v8 + v7 - 1;
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8));
      if (!v11)
      {
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      v12 = 8 * (v10 & 0x1FF);
      v13 = *(_QWORD *)(v11 + v12);
      *(_QWORD *)(v11 + v12) = 0;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v8 = *(_QWORD *)(a1 + 80);
        v7 = *(_QWORD *)(a1 + 88);
        v9 = v7 - 1;
      }
      v15 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 88) = v9;
      if (v14 == v15)
        v16 = 0;
      else
        v16 = ((v14 - v15) << 6) - 1;
      if (v16 - (v8 + v7) + 1 >= 0x400)
      {
        operator delete(*(void **)(v14 - 8));
        *(_QWORD *)(a1 + 64) -= 8;
      }
    }
    v17 = *(_QWORD *)(a1 + 80);
    if (v17)
    {
LABEL_65:
      v60 = *(_QWORD *)(a1 + 56);
      v61 = (_QWORD *)(v60 + 8 * (v17 >> 9));
      v62 = *v61 + 8 * (v17 & 0x1FF);
      if (*(_QWORD *)(a1 + 64) == v60)
        v62 = 0;
      if (v62 == *v61)
        v62 = *(v61 - 1) + 4096;
      v63 = *a2;
      *a2 = 0;
      *(_QWORD *)(v62 - 8) = v63;
      v64 = *(_QWORD *)(a1 + 88) + 1;
      *(_QWORD *)(a1 + 80) = v17 - 1;
      *(_QWORD *)(a1 + 88) = v64;
      return;
    }
    v18 = *(char **)(a1 + 56);
    v19 = *(char **)(a1 + 64);
    v20 = ((v19 - v18) << 6) - 1;
    if (v19 == v18)
      v20 = 0;
    if ((unint64_t)(v20 - *(_QWORD *)(a1 + 88)) >= 0x200)
    {
      *(_QWORD *)(a1 + 80) = 512;
      v66 = (void *)*((_QWORD *)v19 - 1);
      *(_QWORD *)(a1 + 64) = v19 - 8;
      std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front((void **)(a1 + 48), &v66);
LABEL_64:
      v17 = *(_QWORD *)(a1 + 80);
      goto LABEL_65;
    }
    v22 = *(char **)(a1 + 72);
    v23 = *(char **)(a1 + 48);
    if (v19 - v18 < (unint64_t)(v22 - v23))
    {
      if (v18 == v23)
      {
        v66 = operator new(0x1000uLL);
        std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_back((char **)(a1 + 48), &v66);
        v31 = *(_QWORD *)(a1 + 64);
        v66 = *(void **)(v31 - 8);
        *(_QWORD *)(a1 + 64) = v31 - 8;
      }
      else
      {
        v66 = operator new(0x1000uLL);
      }
      std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front((void **)(a1 + 48), &v66);
      if (*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56) == 8)
        *(_QWORD *)(a1 + 80) = 256;
      else
        *(_QWORD *)(a1 + 80) += 512;
      goto LABEL_64;
    }
    if (v22 == v23)
      v24 = 1;
    else
      v24 = (v22 - v23) >> 2;
    if (!(v24 >> 61))
    {
      v25 = (char *)operator new(8 * v24);
      v26 = operator new(0x1000uLL);
      v27 = v26;
      if (v24)
      {
        v28 = &v25[8 * v24];
        *(_QWORD *)v25 = v26;
        v29 = v25 + 8;
        v30 = v25;
        if (v18 != v19)
          goto LABEL_37;
        goto LABEL_33;
      }
      v32 = (char *)operator new(8uLL);
      v28 = v32 + 8;
      operator delete(v25);
      v18 = *(char **)(a1 + 56);
      v33 = *(char **)(a1 + 64);
      v25 = v32;
      *(_QWORD *)v32 = v27;
      v29 = v32 + 8;
      v30 = v32;
      if (v18 == v33)
      {
LABEL_33:
        v34 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v30;
        *(_QWORD *)(a1 + 56) = v25;
        *(_QWORD *)(a1 + 64) = v29;
        *(_QWORD *)(a1 + 72) = v28;
        if (v29 - v25 == 8)
          v35 = 256;
        else
          v35 = *(_QWORD *)(a1 + 80) + 512;
        *(_QWORD *)(a1 + 80) = v35;
        if (v34)
          operator delete(v34);
        goto LABEL_64;
      }
      while (1)
      {
LABEL_37:
        if (v29 != v28)
          goto LABEL_55;
        if (v25 > v30)
        {
          v36 = (v25 - v30) >> 3;
          if (v36 >= -1)
            v37 = v36 + 1;
          else
            v37 = v36 + 2;
          v38 = v37 >> 1;
          v39 = &v25[-8 * (v37 >> 1)];
          v40 = v29;
          if (v29 != v25)
          {
            memmove(v39, v25, v29 - v25);
            v40 = v25;
          }
          v28 = v29;
          v29 = &v39[v29 - v25];
          v25 = &v40[-8 * v38];
          if (!v29)
            goto LABEL_71;
          goto LABEL_55;
        }
        v41 = (v29 - v30) >> 2;
        if (v29 == v30)
          v41 = 1;
        if (v41 >> 61)
          break;
        v42 = v41 >> 2;
        v65 = 8 * v41;
        v43 = (char *)operator new(8 * v41);
        v44 = v43;
        v45 = &v43[8 * v42];
        v46 = v45;
        v47 = v29 - v25;
        if (v29 != v25)
        {
          v46 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
          v48 = v47 - 8;
          if (v48 < 0x38 || (unint64_t)(&v43[8 * v42] - v25) < 0x20)
          {
            v49 = &v43[8 * v42];
            v50 = v25;
            do
            {
LABEL_51:
              v51 = *(_QWORD *)v50;
              v50 += 8;
              *(_QWORD *)v49 = v51;
              v49 += 8;
            }
            while (v49 != v46);
            goto LABEL_52;
          }
          v54 = (v48 >> 3) + 1;
          v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
          v49 = &v45[v55];
          v50 = &v25[v55];
          v56 = (__int128 *)(v25 + 16);
          v57 = &v43[8 * v42 + 16];
          v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v59 = *v56;
            *((_OWORD *)v57 - 1) = *(v56 - 1);
            *(_OWORD *)v57 = v59;
            v56 += 2;
            v57 += 32;
            v58 -= 4;
          }
          while (v58);
          if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_51;
        }
LABEL_52:
        v52 = &v43[v65];
        if (v30)
          operator delete(v30);
        v30 = v44;
        v28 = v52;
        v29 = v46;
        v25 = v45;
        if (!v46)
          goto LABEL_71;
LABEL_55:
        v53 = *(_QWORD *)v18;
        v18 += 8;
        *(_QWORD *)v29 = v53;
        v29 += 8;
        if (v18 == *(char **)(a1 + 64))
          goto LABEL_33;
      }
    }
LABEL_72:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
}

uint64_t webrtc::RtpSeqNumOnlyRefFinder::ManageFrameInternal(uint64_t **this, webrtc::RtpFrameObject *a2)
{
  unsigned int v4;
  uint64_t **v5;
  uint64_t **v6;
  int v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _WORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  unsigned __int16 v23;
  char *v24;
  unsigned int v25;
  BOOL v26;
  BOOL v27;
  unsigned int v28;
  uint64_t *v29;
  unsigned int v30;
  BOOL v31;
  uint64_t **v32;
  BOOL v33;
  uint64_t *v34;
  BOOL v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  int v51;
  _BOOL4 v52;
  uint64_t v53;
  int v54;
  _BOOL4 v55;
  _BOOL4 v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int16 v59;
  int v60;
  unint64_t v61;
  unsigned int v62;
  _BOOL4 v63;
  _BOOL4 v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  if (*((_DWORD *)a2 + 644) == 3)
  {
    v4 = *((unsigned __int16 *)a2 + 2203);
    v6 = this + 1;
    v5 = (uint64_t **)this[1];
    if (v5)
    {
      v7 = *((unsigned __int16 *)v5 + 13);
      while (v7 != v4)
      {
        v9 = (unsigned __int16)v7;
        v10 = (unsigned __int16)v7 - v4;
        v11 = (unsigned __int16)v7 > v4;
        v12 = (__int16)(v7 - v4) >= 0;
        if (v10 == 0x8000)
          v12 = v11;
        if (v12)
        {
          v8 = (char *)*v5;
          v6 = v5;
          if (!*v5)
            goto LABEL_17;
        }
        else
        {
          v13 = v4 - v9;
          v14 = v4 > v9;
          if (v13 == 0x8000)
            v15 = v14;
          else
            v15 = (v13 & 0x8000u) == 0;
          if (!v15)
            break;
          v8 = (char *)v5[1];
          if (!v8)
          {
            v6 = v5 + 1;
            goto LABEL_17;
          }
        }
        v7 = *((unsigned __int16 *)v8 + 13);
        v5 = (uint64_t **)v8;
      }
    }
    else
    {
      v5 = this + 1;
LABEL_17:
      v16 = operator new(0x20uLL);
      v16[13] = v4;
      *((_DWORD *)v16 + 7) = v4 | (v4 << 16);
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v5;
      *v6 = (uint64_t *)v16;
      v17 = (uint64_t *)**this;
      if (v17)
      {
        *this = v17;
        v18 = *v6;
      }
      else
      {
        v18 = (uint64_t *)v16;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(this[1], v18);
      this[2] = (uint64_t *)((char *)this[2] + 1);
    }
  }
  if (!this[2])
    return 0;
  v19 = *((unsigned __int16 *)a2 + 2203);
  v21 = (uint64_t *)(this + 1);
  v20 = this[1];
  v22 = (char *)(this + 1);
  if (v20)
  {
    v23 = v19 - 100;
    v22 = (char *)(this + 1);
    v24 = (char *)this[1];
    do
    {
      while (1)
      {
        v28 = *((unsigned __int16 *)v24 + 13);
        if (v28 != v23)
          break;
        v22 = v24;
        v24 = *(char **)v24;
        if (!v24)
          goto LABEL_32;
      }
      v25 = (unsigned __int16)(v19 - 100) - v28;
      v26 = v28 < v23;
      v27 = (__int16)(v23 - v28) >= 0;
      if (v25 == 0x8000)
        v27 = v26;
      if (v27)
        v24 += 8;
      else
        v22 = v24;
      v24 = *(char **)v24;
    }
    while (v24);
  }
LABEL_32:
  v29 = *this;
  if (*this == (uint64_t *)v22)
  {
    if (!v20)
      goto LABEL_49;
    goto LABEL_34;
  }
  do
  {
    v39 = (unint64_t)this[2];
    v40 = v39 > 1;
    v41 = v39 - 1;
    if (!v40)
      break;
    v42 = (uint64_t *)v29[1];
    v43 = v29;
    if (v42)
    {
      do
      {
        v44 = v42;
        v42 = (uint64_t *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        v44 = (uint64_t *)v43[2];
        v33 = *v44 == (_QWORD)v43;
        v43 = v44;
      }
      while (!v33);
    }
    if (*this == v29)
      *this = v44;
    this[2] = (uint64_t *)v41;
    std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(this[1], v29);
    operator delete(v29);
    v29 = v44;
  }
  while (v44 != (uint64_t *)v22);
  v19 = *((unsigned __int16 *)a2 + 2203);
  v20 = (uint64_t *)*v21;
  if (*v21)
  {
    do
    {
LABEL_34:
      v30 = *((unsigned __int16 *)v20 + 13);
      if (v30 - v19 == 0x8000)
        v31 = v30 > v19;
      else
        v31 = (__int16)(v30 - v19) >= 0;
      v32 = (uint64_t **)(v20 + 1);
      v33 = !v31;
      if (v31)
        v34 = v20;
      else
        v34 = v20 + 1;
      if (v33)
        v20 = v21;
      v35 = v30 == v19;
      if (v30 == v19)
        v36 = v32;
      else
        v36 = (uint64_t **)v34;
      if (!v35)
        v21 = v20;
      v20 = *v36;
    }
    while (*v36);
  }
LABEL_49:
  if (v21 != *this)
  {
    v37 = *v21;
    if (*v21)
    {
      do
      {
        v38 = v37;
        v37 = *(_QWORD *)(v37 + 8);
      }
      while (v37);
    }
    else
    {
      do
      {
        v38 = v21[2];
        v33 = *(_QWORD *)v38 == (_QWORD)v21;
        v21 = (uint64_t *)v38;
      }
      while (v33);
    }
    v45 = (uint64_t *)*(unsigned __int16 *)(v38 + 28);
    v46 = *((_DWORD *)a2 + 644);
    if (v46 != 4 || *(unsigned __int16 *)(v38 + 30) == (unsigned __int16)(*((_WORD *)a2 + 2202) - 1))
    {
      *((_QWORD *)a2 + 301) = v19;
      *((_QWORD *)a2 + 41) = v46 == 4;
      v47 = v45;
      if (*((_BYTE *)this + 106))
      {
        v48 = *((unsigned __int16 *)this + 52);
        v49 = v45 >= v48;
        LODWORD(v50) = (_DWORD)v45 - v48;
        v51 = (_DWORD)v50 != 0 && v49;
        v52 = (v50 & 0x8000u) == 0;
        if ((_DWORD)v50 == 0x8000)
          v52 = v51;
        if (v52)
          v50 = (unsigned __int16)v50;
        else
          v50 |= 0xFFFFFFFFFFFF0000;
        v47 = (uint64_t *)((char *)this[12] + v50);
      }
      this[12] = v47;
      *((_WORD *)this + 52) = (_WORD)v45;
      *((_BYTE *)this + 106) = 1;
      *((_QWORD *)a2 + 42) = v47;
      v53 = *((_QWORD *)a2 + 301);
      if ((_DWORD)v45 != (unsigned __int16)v53)
      {
        v54 = (unsigned __int16)*((_QWORD *)a2 + 301) - (_DWORD)v45;
        v55 = v45 < (unsigned __int16)v53;
        v56 = (__int16)(v53 - (_WORD)v45) >= 0;
        if (v54 == 0x8000)
          v56 = v55;
        if (v56)
        {
          *(_WORD *)(v38 + 28) = v53;
          *(_WORD *)(v38 + 30) = v53;
        }
      }
      webrtc::RtpSeqNumOnlyRefFinder::UpdateLastPictureIdWithPadding((webrtc::RtpSeqNumOnlyRefFinder *)this, (unsigned __int16)v53);
      *((_BYTE *)a2 + 196) = 1;
      *((_DWORD *)a2 + 48) = 0;
      v57 = *((_QWORD *)a2 + 301);
      if (*((_BYTE *)this + 106))
      {
        v58 = *((unsigned __int16 *)this + 52);
        v59 = v57 - v58;
        v60 = (__int16)(v57 - v58);
        v61 = (unsigned __int16)(v57 - v58);
        v62 = (unsigned __int16)*((_QWORD *)a2 + 301) - v58;
        v63 = v58 < (unsigned __int16)v57;
        v64 = v60 >= 0;
        if (v62 != 0x8000)
          v63 = v64;
        if (v63)
          v65 = v61;
        else
          v65 = v59 | 0xFFFFFFFFFFFF0000;
        v66 = (unint64_t)this[12] + v65;
      }
      else
      {
        v66 = (unsigned __int16)*((_QWORD *)a2 + 301);
      }
      this[12] = (uint64_t *)v66;
      *((_WORD *)this + 52) = v57;
      result = 1;
      *((_BYTE *)this + 106) = 1;
      *((_QWORD *)a2 + 301) = v66;
      return result;
    }
    return 0;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v68, v69, v70, v71, v72, v73, v74, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/rtp_seq_num_only_ref_finder.cc");
  return 2;
}

int64x2_t *webrtc::RtpSeqNumOnlyRefFinder::RetryStashedFrames(int64x2_t *this, unint64_t *a2)
{
  uint64_t v3;
  int64x2_t *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  webrtc::RtpFrameObject **v9;
  char v10;
  webrtc::RtpFrameObject **v11;
  unint64_t v12;
  webrtc::RtpFrameObject **v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  webrtc::RtpFrameObject *v17;

  v3 = (uint64_t)this;
  v4 = this + 3;
  v5 = a2 + 1;
  v6 = this[3].i64[1];
  v7 = this[4].i64[0];
LABEL_3:
  v8 = v6 + 8 * (*(_QWORD *)(v3 + 80) >> 9);
  if (v7 == v6)
    v9 = 0;
  else
    v9 = (webrtc::RtpFrameObject **)(*(_QWORD *)v8 + 8 * (*(_QWORD *)(v3 + 80) & 0x1FFLL));
  v10 = 0;
  while (1)
  {
    if (v7 == v6)
    {
      if (!v9)
      {
LABEL_2:
        if ((v10 & 1) == 0)
          return this;
        goto LABEL_3;
      }
    }
    else
    {
      v12 = *(_QWORD *)(v3 + 88) + *(_QWORD *)(v3 + 80);
      if (v9 == (webrtc::RtpFrameObject **)(*(_QWORD *)(v6 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF)))
        goto LABEL_2;
    }
    this = (int64x2_t *)webrtc::RtpSeqNumOnlyRefFinder::ManageFrameInternal((uint64_t **)v3, *v9);
    if ((_DWORD)this == 2)
      goto LABEL_9;
    if ((_DWORD)this == 1)
      break;
    if (!(_DWORD)this && (webrtc::RtpFrameObject **)((char *)++v9 - *(_QWORD *)v8) == (webrtc::RtpFrameObject **)4096)
    {
      v13 = *(webrtc::RtpFrameObject ***)(v8 + 8);
      v8 += 8;
      v9 = v13;
    }
LABEL_10:
    v6 = *(_QWORD *)(v3 + 56);
    v7 = *(_QWORD *)(v3 + 64);
  }
  v14 = *a2;
  v15 = a2[1];
  if ((*a2 & 1) != 0)
  {
    v16 = a2[2];
  }
  else
  {
    v15 = (unint64_t)v5;
    v16 = 3;
  }
  if (v14 >> 1 == v16)
  {
    absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::EmplaceBackSlow<std::unique_ptr<webrtc::RtpFrameObject>>(a2, (uint64_t *)v9);
LABEL_8:
    v10 = 1;
LABEL_9:
    this = std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::erase(v4, (char *)v8, (int64x2_t **)v9);
    v8 = (uint64_t)this;
    v9 = v11;
    goto LABEL_10;
  }
  if (v15)
  {
    v17 = *v9;
    *v9 = 0;
    *(_QWORD *)(v15 + 8 * (v14 >> 1)) = v17;
    *a2 = v14 + 2;
    goto LABEL_8;
  }
  __break(1u);
  return this;
}

void webrtc::RtpSeqNumOnlyRefFinder::UpdateLastPictureIdWithPadding(webrtc::RtpSeqNumOnlyRefFinder *this, unsigned int a2)
{
  __int16 v2;
  _QWORD *v4;
  char *v5;
  _QWORD *v6;
  unsigned int v7;
  BOOL v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned __int16 v18;
  char *v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  _WORD *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  char *v29;

  v2 = a2;
  v5 = (char *)this + 8;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v6 = (_QWORD *)((char *)this + 8);
  if (v4)
  {
    v6 = (_QWORD *)((char *)this + 8);
    do
    {
      v7 = *((unsigned __int16 *)v4 + 13);
      if (v7 - a2 == 0x8000)
        v8 = v7 > a2;
      else
        v8 = (__int16)(v7 - a2) >= 0;
      v9 = v4 + 1;
      v10 = !v8;
      if (v8)
        v11 = v4;
      else
        v11 = v4 + 1;
      if (v10)
        v4 = v6;
      v12 = v7 == a2;
      if (v7 == a2)
        v13 = v9;
      else
        v13 = v11;
      if (!v12)
        v6 = v4;
      v4 = (_QWORD *)*v13;
    }
    while (*v13);
  }
  if (v6 != *(_QWORD **)this)
  {
    v14 = *v6;
    if (*v6)
    {
      do
      {
        v15 = v14;
        v14 = *(_QWORD *)(v14 + 8);
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = v6[2];
        v10 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = (_QWORD *)v15;
      }
      while (v10);
    }
    v17 = (char *)this + 32;
    v16 = (char *)*((_QWORD *)this + 4);
    if (v16)
    {
      v18 = *(_WORD *)(v15 + 30) + 1;
      v19 = (char *)this + 32;
      do
      {
        while (1)
        {
          v23 = *((unsigned __int16 *)v16 + 13);
          if (v23 != v18)
            break;
          v19 = v16;
          v16 = *(char **)v16;
          if (!v16)
            goto LABEL_33;
        }
        v20 = (unsigned __int16)(*(_WORD *)(v15 + 30) + 1) - v23;
        v21 = v23 < v18;
        v22 = (__int16)(v18 - v23) >= 0;
        if (v20 == 0x8000)
          v22 = v21;
        if (v22)
          v16 += 8;
        else
          v19 = v16;
        v16 = *(char **)v16;
      }
      while (v16);
LABEL_33:
      if (v19 != v17)
      {
        do
        {
          if (*((unsigned __int16 *)v19 + 13) != v18)
            break;
          *(_WORD *)(v15 + 30) = v18;
          v27 = (char *)*((_QWORD *)v19 + 1);
          v28 = v19;
          if (v27)
          {
            do
            {
              v29 = v27;
              v27 = *(char **)v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v29 = (char *)*((_QWORD *)v28 + 2);
              v10 = *(_QWORD *)v29 == (_QWORD)v28;
              v28 = v29;
            }
            while (!v10);
          }
          if (*((char **)this + 3) == v19)
            *((_QWORD *)this + 3) = v29;
          ++v18;
          v26 = (uint64_t *)*((_QWORD *)this + 4);
          --*((_QWORD *)this + 5);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v26, (uint64_t *)v19);
          operator delete(v19);
          v19 = v29;
        }
        while (v29 != v17);
      }
    }
    if ((unsigned __int16)(v2 - *(_WORD *)(v15 + 26)) >= 0x2711u)
    {
      v24 = *(_DWORD *)(v15 + 28);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this, *((_QWORD **)this + 1));
      *((_QWORD *)this + 2) = 0;
      v25 = operator new(0x20uLL);
      v25[13] = v2;
      *((_DWORD *)v25 + 7) = 0;
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = 0;
      *((_QWORD *)v25 + 2) = v5;
      *(_QWORD *)this = v25;
      *((_QWORD *)this + 1) = v25;
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v25, (uint64_t *)v25);
      ++*((_QWORD *)this + 2);
      *((_DWORD *)v25 + 7) = v24;
    }
  }
}

int64x2_t *std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::erase(int64x2_t *result, char *a2, int64x2_t **a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64x2_t **v7;
  uint64_t v8;
  int64x2_t **v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  int64x2_t **v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  char *v20;
  _QWORD *v21;
  int64x2_t **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t **v26;
  int64x2_t *v27;
  int64x2_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  char *i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64x2_t *v39;
  int64x2_t *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64x2_t **v46;
  uint64_t v47;
  int64x2_t **v48;
  int64x2_t *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  __int16 v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int64x2_t **v57;
  uint64_t v58;
  int64x2_t **v59;
  int64x2_t *v60;
  int64x2_t *v61;
  uint64_t *v62;
  unint64_t v63;
  int64x2_t v64;
  unint64_t v65;
  void **v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int64x2_t **v72;
  unint64_t v73;
  char *v74;
  int64x2_t **v75;
  uint64_t v76;
  uint64_t v77;
  int64x2_t **v78;
  int64x2_t *v79;
  int64x2_t **v80;
  int64x2_t **v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64x2_t **v88;
  uint64_t v89;
  int64x2_t *v90;
  int64x2_t **v91;
  int64x2_t **v92;
  int64x2_t **v93;
  int64x2_t **v94;
  uint64_t v95;
  uint64_t v96;
  int64x2_t **v97;
  int64x2_t *v98;
  int64x2_t **v99;
  uint64_t v100;
  uint64_t v101;
  int64x2_t **v102;
  int64x2_t *v103;
  int64x2_t **v104;
  int64x2_t *v105;
  void **v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int64x2_t *v112;
  char v113;
  char *v114;

  v3 = result[2].u64[0];
  v4 = result->i64[1];
  v5 = result[1].i64[0];
  v6 = (char *)(v4 + 8 * (v3 >> 9));
  if (v5 != v4)
  {
    v7 = (int64x2_t **)(*(_QWORD *)v6 + 8 * (result[2].i64[0] & 0x1FF));
    v112 = result;
    if (a3 != v7)
      goto LABEL_3;
LABEL_9:
    v11 = 0;
    v9 = *(int64x2_t ***)v6;
LABEL_10:
    v113 = 1;
    v13 = v7;
    v12 = (char *)(v4 + 8 * (v3 >> 9));
    v111 = v11;
    v18 = v7 - v9;
    if ((char *)v7 - (char *)v9 < -7)
      goto LABEL_54;
LABEL_11:
    v19 = v18 + 1;
    v20 = &v6[8 * ((unint64_t)(v18 + 1) >> 9)];
    v21 = *(_QWORD **)v20;
    v22 = (int64x2_t **)(*(_QWORD *)v20 + 8 * (v19 & 0x1FF));
    if (v12 == v6)
      goto LABEL_55;
    goto LABEL_12;
  }
  v7 = 0;
  v112 = result;
  if (!a3)
    goto LABEL_9;
LABEL_3:
  v8 = (((uint64_t)a3 - *(_QWORD *)a2) >> 3) + ((a2 - v6) << 6);
  v9 = *(int64x2_t ***)v6;
  v10 = (uint64_t)v7 - *(_QWORD *)v6;
  v11 = v8 - (v10 >> 3);
  if (v8 == v10 >> 3)
    goto LABEL_10;
  v12 = (char *)(v4 + 8 * (v3 >> 9));
  if (v8 < 1)
  {
    v51 = 511 - v8;
    v6 -= 8 * (v51 >> 9);
    v9 = *(int64x2_t ***)v6;
    v13 = (int64x2_t **)(*(_QWORD *)v6 + 8 * (~(_WORD)v51 & 0x1FF));
    v14 = result[2].i64[1];
    if (v11 > (unint64_t)(v14 - 1) >> 1)
    {
LABEL_6:
      v110 = v11;
      v15 = v13 - v9;
      if ((char *)v13 - (char *)v9 < -7)
      {
        v70 = 510 - v15;
        v16 = ~(_WORD)v70;
        v17 = &v6[-8 * (v70 >> 9)];
      }
      else
      {
        v16 = v15 + 1;
        v17 = &v6[8 * ((unint64_t)(v15 + 1) >> 9)];
      }
      v71 = *(_QWORD *)v17;
      v72 = (int64x2_t **)(*(_QWORD *)v17 + 8 * (v16 & 0x1FF));
      v73 = v14 + v3;
      v74 = (char *)(v4 + 8 * (v73 >> 9));
      if (v5 == v4)
      {
        v109 = 0;
        if (v17 != v74)
        {
LABEL_84:
          v75 = (int64x2_t **)(v71 + 4096);
          if ((int64x2_t **)(v71 + 4096) != v72)
          {
            while (1)
            {
              v76 = ((char *)v9 - (char *)v13 + 4096) >> 3;
              if (v75 - v72 < v76)
                v76 = v75 - v72;
              if (v76)
              {
                v77 = 8 * v76;
                v78 = &v72[v76];
                do
                {
                  v79 = *v72;
                  *v72 = 0;
                  result = *v13;
                  *v13 = v79;
                  if (result)
                    result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
                  ++v72;
                  ++v13;
                  v77 -= 8;
                }
                while (v77);
                v72 = v78;
              }
              if (v72 == v75)
                break;
              v80 = (int64x2_t **)*((_QWORD *)v6 + 1);
              v6 += 8;
              v9 = v80;
              v13 = v80;
            }
            v9 = *(int64x2_t ***)v6;
            if ((int64x2_t **)(*(_QWORD *)v6 + 4096) == v13)
            {
              v81 = (int64x2_t **)*((_QWORD *)v6 + 1);
              v6 += 8;
              v9 = v81;
              v13 = v81;
            }
          }
          v82 = (uint64_t *)(v17 + 8);
          if (v17 + 8 != v74)
          {
            v114 = v74;
            do
            {
              while (1)
              {
                v83 = 0;
                v84 = *v82;
                while (1)
                {
                  v85 = v84 + 8 * v83;
                  v86 = (4096 - 8 * v83) >> 3;
                  if (v86 >= ((char *)v9 - (char *)v13 + 4096) >> 3)
                    v86 = ((char *)v9 - (char *)v13 + 4096) >> 3;
                  if (v86)
                  {
                    v87 = 8 * v86;
                    v88 = (int64x2_t **)(v84 + 8 * v83);
                    v89 = v85 + 8 * v86;
                    do
                    {
                      v90 = *v88;
                      *v88 = 0;
                      result = *v13;
                      *v13 = v90;
                      if (result)
                        result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
                      ++v88;
                      ++v13;
                      v87 -= 8;
                    }
                    while (v87);
                  }
                  else
                  {
                    v89 = v84 + 8 * v83;
                  }
                  v83 += (v89 - v85) >> 3;
                  if (v83 == 512)
                    break;
                  v91 = (int64x2_t **)*((_QWORD *)v6 + 1);
                  v6 += 8;
                  v9 = v91;
                  v13 = v91;
                }
                v9 = *(int64x2_t ***)v6;
                if ((int64x2_t **)(*(_QWORD *)v6 + 4096) == v13)
                  break;
                v74 = v114;
                if (++v82 == (uint64_t *)v114)
                  goto LABEL_113;
              }
              v92 = (int64x2_t **)*((_QWORD *)v6 + 1);
              v6 += 8;
              v9 = v92;
              v13 = v92;
              v74 = v114;
              ++v82;
            }
            while (v82 != (uint64_t *)v114);
          }
LABEL_113:
          v93 = *(int64x2_t ***)v74;
          if (*(_QWORD *)v74 != v109)
          {
            v94 = *(int64x2_t ***)v6;
            v63 = v110;
            v62 = (uint64_t *)v112;
            while (1)
            {
              v95 = ((char *)v94 - (char *)v13 + 4096) >> 3;
              if ((v109 - (uint64_t)v93) >> 3 < v95)
                v95 = (v109 - (uint64_t)v93) >> 3;
              if (v95)
              {
                v96 = 8 * v95;
                v97 = &v93[v95];
                do
                {
                  v98 = *v93;
                  *v93 = 0;
                  result = *v13;
                  *v13 = v98;
                  if (result)
                    result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
                  ++v93;
                  ++v13;
                  v96 -= 8;
                }
                while (v96);
                v93 = v97;
              }
              if (v93 == (int64x2_t **)v109)
                break;
              v99 = (int64x2_t **)*((_QWORD *)v6 + 1);
              v6 += 8;
              v94 = v99;
              v13 = v99;
            }
            if ((int64x2_t **)(*(_QWORD *)v6 + 4096) == v13)
              v13 = (int64x2_t **)*((_QWORD *)v6 + 1);
LABEL_142:
            if (v13)
            {
              v105 = *v13;
              *v13 = 0;
              if (v105)
                (*(void (**)(int64x2_t *))(v105->i64[0] + 8))(v105);
              v66 = (void **)v62[1];
              v106 = (void **)v62[2];
              v65 = v62[4];
              v107 = v62[5];
              v62[5] = v107 - 1;
              v108 = (((char *)v106 - (char *)v66) << 6) - 1;
              if (v106 == v66)
                v108 = 0;
              if (v108 - (v107 + v65) + 1 >= 0x400)
              {
                operator delete(*(v106 - 1));
                v67 = 0;
                v66 = (void **)v62[1];
                v62[2] -= 8;
                v65 = v62[4];
              }
              else
              {
                v67 = 0;
              }
              goto LABEL_73;
            }
LABEL_150:
            __break(1u);
            return result;
          }
LABEL_141:
          v63 = v110;
          v62 = (uint64_t *)v112;
          goto LABEL_142;
        }
      }
      else
      {
        v109 = *(_QWORD *)v74 + 8 * (v73 & 0x1FF);
        if (v17 != v74)
          goto LABEL_84;
      }
      if (v72 != (int64x2_t **)v109)
      {
        while (1)
        {
          v100 = ((char *)v9 - (char *)v13 + 4096) >> 3;
          if ((v109 - (uint64_t)v72) >> 3 < v100)
            v100 = (v109 - (uint64_t)v72) >> 3;
          if (v100)
          {
            v101 = 8 * v100;
            v102 = &v72[v100];
            do
            {
              v103 = *v72;
              *v72 = 0;
              result = *v13;
              *v13 = v103;
              if (result)
                result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
              ++v72;
              ++v13;
              v101 -= 8;
            }
            while (v101);
            v72 = v102;
          }
          if (v72 == (int64x2_t **)v109)
            break;
          v104 = (int64x2_t **)*((_QWORD *)v6 + 1);
          v6 += 8;
          v9 = v104;
          v13 = v104;
        }
        if ((int64x2_t **)(*(_QWORD *)v6 + 4096) == v13)
          v13 = (int64x2_t **)*((_QWORD *)v6 + 1);
      }
      goto LABEL_141;
    }
  }
  else
  {
    v6 += 8 * ((unint64_t)v8 >> 9);
    v9 = *(int64x2_t ***)v6;
    v13 = (int64x2_t **)(*(_QWORD *)v6 + 8 * (v8 & 0x1FF));
    v14 = result[2].i64[1];
    if (v11 > (unint64_t)(v14 - 1) >> 1)
      goto LABEL_6;
  }
  v113 = 0;
  v111 = v11;
  v18 = v13 - v9;
  if ((char *)v13 - (char *)v9 >= -7)
    goto LABEL_11;
LABEL_54:
  v52 = 510 - v18;
  v53 = ~(_WORD)v52;
  v20 = &v6[-8 * (v52 >> 9)];
  v21 = *(_QWORD **)v20;
  v22 = (int64x2_t **)(*(_QWORD *)v20 + 8 * (v53 & 0x1FF));
  if (v12 == v6)
  {
LABEL_55:
    if (v7 != v13)
    {
      while (1)
      {
        v55 = v22 - (int64x2_t **)v21;
        if (v13 - v7 >= v55)
          v56 = v55;
        else
          v56 = v13 - v7;
        if (v56)
        {
          v57 = v22 - 1;
          v58 = -8 * v56;
          v59 = v13 - 1;
          do
          {
            v60 = *v59;
            *v59 = 0;
            result = *v57;
            *v57 = v60;
            if (result)
              result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
            --v57;
            --v59;
            v58 += 8;
          }
          while (v58);
        }
        v13 -= v56;
        if (v13 == v7)
          break;
        v54 = (_QWORD *)*((_QWORD *)v20 - 1);
        v20 -= 8;
        v21 = v54;
        v22 = (int64x2_t **)(v54 + 512);
      }
    }
    goto LABEL_67;
  }
LABEL_12:
  if (v9 != v13)
  {
    while (1)
    {
      v23 = v22 - (int64x2_t **)v21;
      if (v13 - v9 >= v23)
        v24 = v23;
      else
        v24 = v13 - v9;
      if (v24)
      {
        v25 = -8 * v24;
        v26 = v13 - 1;
        do
        {
          v27 = *v26;
          *v26 = 0;
          v28 = *--v22;
          result = v28;
          *v22 = v27;
          if (v28)
            result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
          --v26;
          v25 += 8;
        }
        while (v25);
      }
      v13 -= v24;
      if (v13 == v9)
        break;
      v29 = (_QWORD *)*((_QWORD *)v20 - 1);
      v20 -= 8;
      v21 = v29;
      v22 = (int64x2_t **)(v29 + 512);
    }
    v21 = *(_QWORD **)v20;
    if ((int64x2_t **)(*(_QWORD *)v20 + 4096) == v22)
    {
      v30 = (_QWORD *)*((_QWORD *)v20 + 1);
      v20 += 8;
      v21 = v30;
      v22 = (int64x2_t **)v30;
    }
  }
  v31 = v12;
  for (i = v6 - 8; i != v31; i -= 8)
  {
    v33 = *(_QWORD *)i;
    v34 = *(_QWORD *)i + 4096;
    while (1)
    {
      v35 = v22 - (int64x2_t **)v21;
      if ((v34 - v33) >> 3 >= v35)
        v36 = v35;
      else
        v36 = (v34 - v33) >> 3;
      if (v36)
      {
        v37 = -8 * v36;
        v38 = (uint64_t *)(v34 - 8);
        do
        {
          v39 = (int64x2_t *)*v38;
          *v38 = 0;
          v40 = *--v22;
          result = v40;
          *v22 = v39;
          if (v40)
            result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
          --v38;
          v37 += 8;
        }
        while (v37);
      }
      v34 -= 8 * v36;
      if (v34 == v33)
        break;
      v41 = (_QWORD *)*((_QWORD *)v20 - 1);
      v20 -= 8;
      v21 = v41;
      v22 = (int64x2_t **)(v41 + 512);
    }
    v21 = *(_QWORD **)v20;
    if ((int64x2_t **)(*(_QWORD *)v20 + 4096) == v22)
    {
      v42 = (_QWORD *)*((_QWORD *)v20 + 1);
      v20 += 8;
      v21 = v42;
      v22 = (int64x2_t **)v42;
    }
  }
  v43 = *(_QWORD *)v31 + 4096;
  if ((int64x2_t **)v43 != v7)
  {
    while (1)
    {
      v44 = v22 - (int64x2_t **)v21;
      if ((v43 - (uint64_t)v7) >> 3 >= v44)
        v45 = v44;
      else
        v45 = (v43 - (uint64_t)v7) >> 3;
      if (v45)
      {
        v46 = v22 - 1;
        v47 = -8 * v45;
        v48 = (int64x2_t **)(v43 - 8);
        do
        {
          v49 = *v48;
          *v48 = 0;
          result = *v46;
          *v46 = v49;
          if (result)
            result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
          --v46;
          --v48;
          v47 += 8;
        }
        while (v47);
      }
      v43 -= 8 * v45;
      if ((int64x2_t **)v43 == v7)
        break;
      v50 = (_QWORD *)*((_QWORD *)v20 - 1);
      v20 -= 8;
      v21 = v50;
      v22 = (int64x2_t **)(v50 + 512);
    }
  }
LABEL_67:
  if (!v7)
    goto LABEL_150;
  v61 = *v7;
  *v7 = 0;
  if (v61)
    (*(void (**)(int64x2_t *))(v61->i64[0] + 8))(v61);
  v63 = v111;
  v62 = (uint64_t *)v112;
  v64 = vaddq_s64(v112[2], (int64x2_t)xmmword_208F0A010);
  v112[2] = v64;
  v65 = v64.i64[0];
  v66 = (void **)v112->i64[1];
  if (v64.i64[0] >= 0x400uLL)
  {
    operator delete(*v66);
    v66 = (void **)(v112->i64[1] + 8);
    v112->i64[1] = (uint64_t)v66;
    v65 = v112[2].i64[0] - 512;
    v112[2].i64[0] = v65;
  }
  v67 = v113;
LABEL_73:
  result = (int64x2_t *)&v66[v65 >> 9];
  if ((void **)v62[2] == v66)
  {
    v68 = 0;
    if ((v67 & 1) != 0)
      return result;
  }
  else
  {
    v68 = result->i64[0] + 8 * (v65 & 0x1FF);
    if ((v67 & 1) != 0)
      return result;
  }
  v69 = v63 + ((v68 - result->i64[0]) >> 3);
  if (v69 < 1)
    return (int64x2_t *)((char *)result - 8 * ((unint64_t)(511 - v69) >> 9));
  else
    return (int64x2_t *)((char *)result + 8 * ((unint64_t)v69 >> 9));
}

int64x2_t *webrtc::RtpSeqNumOnlyRefFinder::PaddingReceived@<X0>(int64x2_t *this@<X0>, unsigned __int16 a2@<W1>, unint64_t *a3@<X8>)
{
  int64x2_t *v5;
  int64x2_t *v6;
  uint64_t **v7;
  unsigned __int16 v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  unsigned __int16 v20;

  v20 = a2;
  v6 = this + 2;
  v5 = (int64x2_t *)this[2].i64[0];
  v7 = (uint64_t **)&this[1].i64[1];
  if (v5)
  {
    v8 = a2 - 100;
    do
    {
      while (1)
      {
        v12 = v5[1].u16[5];
        if (v12 != v8)
          break;
        v6 = v5;
        v5 = (int64x2_t *)v5->i64[0];
        if (!v5)
          goto LABEL_11;
      }
      v9 = (unsigned __int16)(a2 - 100) - v12;
      v10 = v12 < v8;
      v11 = (__int16)(v8 - v12) >= 0;
      if (v9 == 0x8000)
        v11 = v10;
      if (v11)
        v5 = (int64x2_t *)((char *)v5 + 8);
      else
        v6 = v5;
      v5 = (int64x2_t *)v5->i64[0];
    }
    while (v5);
  }
LABEL_11:
  v13 = *v7;
  if (*v7 != (uint64_t *)v6)
  {
    do
    {
      v16 = (uint64_t *)v13[1];
      v17 = v13;
      if (v16)
      {
        do
        {
          v18 = v16;
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v17[2];
          v19 = *v18 == (_QWORD)v17;
          v17 = v18;
        }
        while (!v19);
      }
      if (*v7 == v13)
        *v7 = v18;
      v15 = (uint64_t *)this[2].i64[0];
      --this[2].i64[1];
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v15, v13);
      operator delete(v13);
      v13 = v18;
    }
    while (v18 != (uint64_t *)v6);
  }
  std::__tree<unsigned short,webrtc::DescendingSeqNumComp<unsigned short,(unsigned short)0>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(v7, &v20, &v20);
  webrtc::RtpSeqNumOnlyRefFinder::UpdateLastPictureIdWithPadding((webrtc::RtpSeqNumOnlyRefFinder *)this, v20);
  *a3 = 0;
  return webrtc::RtpSeqNumOnlyRefFinder::RetryStashedFrames(this, a3);
}

int64x2_t *webrtc::RtpSeqNumOnlyRefFinder::ClearTo(int64x2_t *this, unsigned int a2)
{
  int64x2_t *v3;
  int64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t **v8;
  int64x2_t **v9;
  int64x2_t **v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  _BOOL4 v17;
  int64x2_t **v18;

  v3 = this;
  v4 = this + 3;
  v5 = this[3].i64[1];
  v6 = this[4].i64[0];
  v7 = v5 + 8 * ((unint64_t)this[5].i64[0] >> 9);
  if (v6 == v5)
    v8 = 0;
  else
    v8 = (int64x2_t **)(*(_QWORD *)v7 + 8 * (this[5].i64[0] & 0x1FF));
LABEL_5:
  v10 = v8;
  while (v6 != v5)
  {
    v11 = v3[5].i64[1] + v3[5].i64[0];
    if (v10 == (int64x2_t **)(*(_QWORD *)(v5 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF)))
      return this;
LABEL_11:
    v12 = (*v10)[275].u16[2];
    if (a2 != v12)
    {
      v13 = a2 - v12;
      v14 = a2 >= v12;
      v15 = a2 - v12;
      v16 = v15 != 0 && v14;
      v17 = (v15 & 0x8000u) == 0;
      if (v13 == 0x8000)
        v17 = v16;
      if (v17)
      {
        this = std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::erase(v4, (char *)v7, v8);
        v7 = (uint64_t)this;
        v8 = v18;
        v5 = v3[3].i64[1];
        v6 = v3[4].i64[0];
        goto LABEL_5;
      }
    }
    ++v10;
    if ((int64x2_t **)(*(_QWORD *)v7 + 4096) == ++v8)
    {
      v9 = *(int64x2_t ***)(v7 + 8);
      v7 += 8;
      v8 = v9;
      goto LABEL_5;
    }
  }
  if (v10)
    goto LABEL_11;
  return this;
}

char *absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::EmplaceBackSlow<std::unique_ptr<webrtc::RtpFrameObject>>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v4 = (unint64_t)(a1 + 1);
  v5 = *a1;
  if ((*a1 & 1) != 0)
  {
    v7 = a1[2];
    if (((v7 >> 60) & 7) != 0)
      goto LABEL_29;
    v4 = a1[1];
    v6 = 2 * v7;
  }
  else
  {
    v6 = 6;
  }
  v8 = v5 >> 1;
  v9 = (char *)operator new(8 * v6);
  v10 = v9;
  v11 = *a2;
  v12 = &v9[8 * (v5 >> 1)];
  *a2 = 0;
  *(_QWORD *)v12 = v11;
  if (v5 < 2)
    goto LABEL_25;
  if (v5 < 0xC || (v4 < (unint64_t)&v9[8 * v8] ? (v13 = (unint64_t)v9 >= v4 + 8 * v8) : (v13 = 1), !v13))
  {
    v14 = 0;
    v15 = (uint64_t *)v4;
LABEL_17:
    v21 = v8 - v14;
    v22 = &v9[8 * v14];
    do
    {
      v23 = *v15;
      *v15++ = 0;
      *(_QWORD *)v22 = v23;
      v22 += 8;
      --v21;
    }
    while (v21);
    goto LABEL_19;
  }
  v14 = v8 & 0x7FFFFFFFFFFFFFFCLL;
  v15 = (uint64_t *)(v4 + 8 * (v8 & 0x7FFFFFFFFFFFFFFCLL));
  v16 = v9 + 16;
  v17 = (__int128 *)(v4 + 16);
  v18 = v8 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    v19 = *(v17 - 1);
    v20 = *v17;
    *(v17 - 1) = 0uLL;
    *v17 = 0uLL;
    *(v16 - 1) = v19;
    *v16 = v20;
    v16 += 2;
    v17 += 2;
    v18 -= 4;
  }
  while (v18);
  if (v8 != v14)
    goto LABEL_17;
LABEL_19:
  if (!v4)
  {
    __break(1u);
LABEL_29:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v24 = v4 - 8;
  do
  {
    v25 = *(_QWORD *)(v24 + 8 * v8);
    *(_QWORD *)(v24 + 8 * v8) = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    --v8;
  }
  while (v8);
  v5 = *a1;
LABEL_25:
  if ((v5 & 1) != 0)
  {
    operator delete((void *)a1[1]);
    v5 = *a1;
  }
  a1[1] = (unint64_t)v10;
  a1[2] = v6;
  *a1 = (v5 | 1) + 2;
  return v12;
}

void webrtc::RtpSequenceNumberMap::InsertPacket(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  __int16 v4;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  void **v10;
  _BYTE *v11;
  unsigned __int16 *v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  _BOOL4 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  unint64_t v30;
  unint64_t v31;
  void **v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void **v36;
  _BYTE *v37;
  void **v38;
  unsigned __int16 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void **v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  void **v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  _BOOL4 v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unsigned __int16 *v68;
  uint64_t v69;
  unint64_t v70;

  v4 = a2;
  v6 = (uint64_t)(a1 + 1);
  v7 = a1[6];
  if (v7)
  {
    v8 = (void **)a1[2];
    v9 = a1[5];
    v10 = &v8[v9 / 0x155];
    v11 = *v10;
    v12 = (unsigned __int16 *)((char *)*v10 + 12 * (v9 % 0x155));
    v13 = *v12;
    v14 = a2 >= v13;
    v15 = a2 - v13;
    v16 = v15 != 0 && v14;
    if (v15 == 0x8000)
      v17 = v16;
    else
      v17 = (v15 & 0x8000u) == 0;
    if (v17)
    {
      v18 = *((unsigned __int16 *)v8[(v7 + v9 - 1) / 0x155] + 6 * ((v7 + v9 - 1) % 0x155));
      v14 = v18 >= a2;
      v19 = v18 - a2;
      v20 = v19 != 0 && v14;
      v21 = v19 == 0x8000 ? v20 : (v19 & 0x8000u) == 0;
      if (v21 == 1)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sequence_number_map.cc");
        v8 = (void **)a1[2];
        v29 = (void **)a1[3];
        v30 = (char *)v29 - (char *)v8;
        if (v29 != v8)
        {
          v31 = a1[5];
          v32 = &v8[v31 / 0x155];
          v33 = (unint64_t)*v32;
          v34 = (unint64_t)*v32 + 12 * (v31 % 0x155);
          while ((void *)v34 != (char *)v8[(a1[6] + v31) / 0x155] + 12 * ((a1[6] + v31) % 0x155))
          {
            if (!v34)
              goto LABEL_93;
            v34 += 12;
            if (v34 - v33 == 4092)
            {
              v35 = (unint64_t)v32[1];
              ++v32;
              v33 = v35;
              v34 = v35;
            }
          }
        }
        a1[6] = 0;
        if (v30 >= 0x11)
        {
          do
          {
            operator delete(*v8);
            v29 = (void **)a1[3];
            v8 = (void **)(a1[2] + 8);
            a1[2] = v8;
            v30 = (char *)v29 - (char *)v8;
          }
          while ((unint64_t)((char *)v29 - (char *)v8) > 0x10);
        }
        v62 = v30 >> 3;
        if (v62 == 1)
        {
          v63 = 170;
        }
        else
        {
          if (v62 != 2)
          {
            v63 = a1[5];
LABEL_88:
            v69 = 341 * (v29 - v8) - 1;
            if (v29 == v8)
              v69 = 0;
            if (v69 != a1[6] + v63)
              goto LABEL_78;
LABEL_77:
            std::deque<webrtc::RtpSequenceNumberMap::Association>::__add_back_capacity(v6);
            v8 = (void **)a1[2];
            v29 = (void **)a1[3];
            goto LABEL_78;
          }
          v63 = 341;
        }
        a1[5] = v63;
        goto LABEL_88;
      }
    }
    v36 = (void **)a1[3];
    if (v36 == v8)
      v12 = 0;
    if (v7 == *a1)
    {
      v37 = *v10;
      v38 = &v8[v9 / 0x155];
      v39 = v12;
      v40 = v7 - ((unint64_t)(3 * v7) >> 2);
      if (v40)
      {
        v41 = v40 - 0x5555555555555555 * (((char *)v12 - v11) >> 2);
        if (v41 < 1)
        {
          v70 = 340 - v41;
          v38 = &v10[-(v70 / 0x155)];
          v37 = *v38;
          v39 = (unsigned __int16 *)((char *)*v38 + 12 * (341 * (v70 / 0x155) - v70) + 4080);
        }
        else
        {
          v38 = &v10[v41 / 0x155uLL];
          v37 = *v38;
          v39 = (unsigned __int16 *)((char *)*v38 + 12 * (v41 % 0x155uLL));
        }
      }
    }
    else
    {
      v37 = *v10;
      v38 = &v8[v9 / 0x155];
      v39 = v12;
    }
    v43 = ((v9 + v7) * (unsigned __int128)0x8060180601806019) >> 64;
    v44 = (v43 + ((v9 + v7 - v43) >> 1)) >> 8;
    v45 = &v8[v44];
    if (v36 == v8)
    {
      v46 = 0;
      if (!v39)
        goto LABEL_58;
    }
    else
    {
      v46 = (uint64_t)*v45 + 12 * (v9 + v7 - 341 * v44);
      if (v39 == (unsigned __int16 *)v46)
        goto LABEL_58;
    }
    v47 = 341 * (v45 - v38)
        + 0x5555555555555555 * (((char *)v39 - v37) >> 2)
        - 0x5555555555555555 * ((v46 - (uint64_t)*v45) >> 2);
    if (v47)
    {
      do
      {
        v48 = v47 >> 1;
        if (v47 == 1)
        {
          v49 = v39;
          v50 = v38;
          v51 = *v39;
          if (v51 != a2)
            goto LABEL_50;
        }
        else
        {
          v52 = v48 - 0x5555555555555555 * (((char *)v39 - (_BYTE *)*v38) >> 2);
          if (v52 < 1)
          {
            v53 = 340 - v52;
            v50 = &v38[-(v53 / 0x155)];
            v49 = (unsigned __int16 *)((char *)*v50 + 12 * (341 * (v53 / 0x155) - v53) + 4080);
            v51 = *v49;
            if (v51 != a2)
            {
LABEL_50:
              v54 = v51 - a2;
              v14 = v51 >= a2;
              v55 = v51 - a2;
              v56 = v55 != 0 && v14;
              v57 = (v55 & 0x8000u) == 0;
              if (v54 == 0x8000)
                v57 = v56;
              if (v57)
              {
                v39 = v49 + 6;
                if ((char *)(v49 + 6) - (_BYTE *)*v50 == 4092)
                {
                  v58 = (unsigned __int16 *)v50[1];
                  ++v50;
                  v39 = v58;
                }
                v48 = v47 + ~v48;
                v38 = v50;
              }
            }
          }
          else
          {
            v50 = &v38[v52 / 0x155uLL];
            v49 = (unsigned __int16 *)((char *)*v50 + 12 * (v52 % 0x155uLL));
            v51 = *v49;
            if (v51 != a2)
              goto LABEL_50;
          }
        }
        v47 = v48;
      }
      while (v48);
    }
LABEL_58:
    if (v39 != v12)
    {
      v59 = 0x5555555555555555 * (((char *)v12 - v11) >> 2)
          + 341 * (v38 - v10)
          - 0x5555555555555555 * (((char *)v39 - (_BYTE *)*v38) >> 2);
      if (v59 >= 1)
      {
        v60 = v59 - 0x5555555555555555 * (((char *)v12 - v11) >> 2);
        if (v60 < 1)
        {
          v61 = (unint64_t)v10[-((340 - v60) / 0x155uLL)]
              + 12 * (341 * ((340 - v60) / 0x155uLL) - (340 - v60))
              + 4080;
          if ((unsigned __int16 *)v61 != v12)
          {
LABEL_82:
            while (v12)
            {
              v12 += 6;
              if ((char *)v12 - (_BYTE *)*v10 == 4092)
              {
                v68 = (unsigned __int16 *)v10[1];
                ++v10;
                v12 = v68;
              }
              if (v12 == (unsigned __int16 *)v61)
                goto LABEL_71;
            }
            goto LABEL_93;
          }
        }
        else
        {
          v61 = (unint64_t)v10[v60 / 0x155uLL] + 12 * (v60 % 0x155uLL);
          if ((unsigned __int16 *)v61 != v12)
            goto LABEL_82;
        }
LABEL_71:
        v7 = a1[6] - v59;
        v9 = a1[5] + v59;
        a1[5] = v9;
        a1[6] = v7;
        v8 = (void **)a1[2];
        if (v9 >= 0x2AA)
        {
          do
          {
            operator delete(*v8);
            v8 = (void **)(a1[2] + 8);
            a1[2] = v8;
            v9 = a1[5] - 341;
            a1[5] = v9;
          }
          while (v9 > 0x2A9);
          v7 = a1[6];
        }
      }
    }
    v29 = (void **)a1[3];
    v64 = 341 * (v29 - v8) - 1;
    if (v29 == v8)
      v64 = 0;
    if (v64 == v7 + v9)
      goto LABEL_77;
    goto LABEL_78;
  }
  v8 = (void **)a1[2];
  v29 = (void **)a1[3];
  v42 = 341 * (v29 - v8) - 1;
  if (v29 == v8)
    v42 = 0;
  if (v42 == a1[5])
    goto LABEL_77;
LABEL_78:
  if (v29 != v8)
  {
    v65 = a1[6] + a1[5];
    v66 = (char *)v8[v65 / 0x155];
    if (v66)
    {
      v67 = &v66[12 * (v65 % 0x155)];
      *(_WORD *)v67 = v4;
      *(_QWORD *)(v67 + 4) = a3;
      ++a1[6];
      return;
    }
  }
LABEL_93:
  __break(1u);
}

unint64_t webrtc::RtpSequenceNumberMap::Get(webrtc::RtpSequenceNumberMap *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int16 *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  __int16 v14;
  unsigned __int16 v15;
  unint64_t v16;
  unsigned __int16 *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int16 *v21;

  v2 = *((_QWORD *)this + 6);
  if (!v2)
    return v2;
  v3 = *((_QWORD *)this + 5);
  v4 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  v6 = (_QWORD *)(v4 + 8 * (v3 / 0x155));
  v7 = (__int16 *)(*v6 + 12 * (v3 % 0x155));
  if (v5 == v4)
  {
    v12 = 0;
  }
  else
  {
    v8 = ((v3 + v2) * (unsigned __int128)0x8060180601806019) >> 64;
    v9 = (v8 + ((v3 + v2 - v8) >> 1)) >> 8;
    v10 = (_QWORD *)(v4 + 8 * v9);
    v11 = *v10 + 12 * (v3 + v2 - 341 * v9);
    v12 = (unsigned __int16 *)(*v6 + 12 * (v3 % 0x155));
    if ((__int16 *)v11 != v7)
    {
      v13 = 0x5555555555555555 * ((uint64_t)(12 * (v3 % 0x155)) >> 2)
          + 341 * (v10 - v6)
          - 0x5555555555555555 * ((v11 - *v10) >> 2);
      if (v13)
      {
        v14 = *v7;
        v15 = a2 - v14;
        do
        {
          v16 = v13 >> 1;
          if (v13 == 1)
          {
            v17 = v12;
            v18 = v6;
            if ((unsigned __int16)(*v12 - v14) < v15)
              goto LABEL_17;
          }
          else
          {
            v19 = v16 - 0x5555555555555555 * (((uint64_t)v12 - *v6) >> 2);
            if (v19 < 1)
            {
              v20 = 340 - v19;
              v18 = &v6[-(v20 / 0x155)];
              v17 = (unsigned __int16 *)(*v18 + 12 * (341 * (v20 / 0x155) - v20) + 4080);
              if ((unsigned __int16)(*v17 - v14) < v15)
              {
LABEL_17:
                v12 = v17 + 6;
                if ((unsigned __int16 *)((char *)v17 - *v18 + 12) == (unsigned __int16 *)4092)
                {
                  v21 = (unsigned __int16 *)v18[1];
                  ++v18;
                  v12 = v21;
                }
                v16 = v13 + ~v16;
                v6 = v18;
              }
            }
            else
            {
              v18 = &v6[v19 / 0x155uLL];
              v17 = (unsigned __int16 *)(*v18 + 12 * (v19 % 0x155uLL));
              if ((unsigned __int16)(*v17 - v14) < v15)
                goto LABEL_17;
            }
          }
          v13 = v16;
        }
        while (v16);
      }
    }
  }
  if (v5 != v4)
  {
    if ((unsigned __int16 *)(*(_QWORD *)(v4 + 8 * ((v3 + v2) / 0x155)) + 12 * ((v3 + v2) % 0x155)) == v12)
      return 0;
LABEL_23:
    if (*v12 == a2)
      return *(_QWORD *)(v12 + 2) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(v12 + 2);
    return 0;
  }
  if (v12)
    goto LABEL_23;
  return 0;
}

void **std::deque<webrtc::RtpSequenceNumberMap::Association>::~deque[abi:sn180100](void **result)
{
  void **v1;
  void **v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  _BYTE *v15;

  v1 = result;
  v2 = (void **)result[1];
  v3 = (void **)result[2];
  v4 = (char *)v3 - (char *)v2;
  if (v3 == v2)
  {
    v5 = result + 5;
  }
  else
  {
    v5 = result + 5;
    v6 = (unint64_t)result[4];
    v7 = &v2[v6 / 0x155];
    v8 = (unint64_t)*v7;
    v9 = (unint64_t)*v7 + 12 * (v6 % 0x155);
    while ((void *)v9 != (char *)v2[((unint64_t)result[5] + v6) / 0x155]
                        + 12 * (((unint64_t)result[5] + v6) % 0x155))
    {
      if (!v9)
      {
        __break(1u);
        return result;
      }
      v9 += 12;
      if (v9 - v8 == 4092)
      {
        v10 = (unint64_t)v7[1];
        ++v7;
        v8 = v10;
        v9 = v10;
      }
    }
  }
  *v5 = 0;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)v1[2];
      v2 = (void **)((char *)v1[1] + 8);
      v1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v4 >> 3;
  if (v11 == 1)
  {
    v12 = 170;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_15;
    v12 = 341;
  }
  v1[4] = (void *)v12;
LABEL_15:
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = v1[1];
    v14 = v1[2];
    if (v14 != v15)
      v1[2] = &v14[(v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v1)
    operator delete(*v1);
  return v1;
}

void std::deque<webrtc::RtpSequenceNumberMap::Association>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  BOOL v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v30 = *(char **)a1;
    if ((unint64_t)v7 > *(_QWORD *)a1)
    {
      v31 = (uint64_t)&v7[-*(_QWORD *)a1] >> 3;
      if (v31 >= -1)
        v32 = v31 + 1;
      else
        v32 = v31 + 2;
      v33 = v32 >> 1;
      v34 = -v33;
      v35 = &v7[-8 * v33];
      v36 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v33], v7, v5 - v7);
        v7 = *(char **)(a1 + 8);
      }
      v5 = &v35[v36];
      v37 = &v7[8 * v34];
      goto LABEL_32;
    }
    v39 = (v5 - v30) >> 2;
    if (v5 == v30)
      v39 = 1;
    if (v39 >> 61)
      goto LABEL_108;
    v40 = v39 >> 2;
    v41 = 8 * v39;
    v42 = (char *)operator new(8 * v39);
    v43 = &v42[8 * v40];
    v45 = v5 - v7;
    v44 = v5 == v7;
    v5 = v43;
    if (!v44)
    {
      v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
      v46 = v45 - 8;
      if ((unint64_t)(v45 - 8) < 0x38)
      {
        v47 = &v42[8 * v40];
        do
        {
LABEL_91:
          v100 = *(_QWORD *)v7;
          v7 += 8;
          *(_QWORD *)v47 = v100;
          v47 += 8;
        }
        while (v47 != v5);
        goto LABEL_92;
      }
      v93 = &v42[8 * v40];
      v47 = v93;
      if ((unint64_t)(v93 - v7) < 0x20)
        goto LABEL_91;
      v94 = (v46 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v47 = &v43[v95];
      v7 += v95;
      v96 = (__int128 *)(v6 + 3);
      v97 = v93 + 16;
      v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v99 = *v96;
        *(v97 - 1) = *(v96 - 1);
        *v97 = v99;
        v96 += 2;
        v97 += 2;
        v98 -= 4;
      }
      while (v98);
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_91;
    }
LABEL_92:
    *(_QWORD *)a1 = v42;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = &v42[v41];
    if (v30)
    {
      operator delete(v30);
      v5 = *(char **)(a1 + 16);
    }
LABEL_4:
    if (!v5)
    {
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
LABEL_5:
    *(_QWORD *)v5 = v8;
LABEL_10:
    *(_QWORD *)(a1 + 16) += 8;
    return;
  }
  v10 = *(char **)(a1 + 16);
  v9 = *(char **)(a1 + 24);
  v12 = *(char **)a1;
  v11 = *(char **)(a1 + 8);
  v13 = v10 - v11;
  v14 = (v10 - v11) >> 3;
  v15 = (uint64_t)&v9[-*(_QWORD *)a1];
  if (v14 < (unint64_t)(v15 >> 3))
  {
    v16 = operator new(0xFFCuLL);
    v17 = v16;
    if (v9 != v10)
    {
      if (v10)
      {
        *(_QWORD *)v10 = v16;
        goto LABEL_10;
      }
      goto LABEL_107;
    }
    if (v11 == v12)
    {
      v70 = (v9 - v11) >> 2;
      if (v10 == v11)
        v70 = 1;
      if (v70 >> 61)
        goto LABEL_108;
      v71 = (v70 + 3) >> 2;
      v72 = 8 * v70;
      v73 = (char *)operator new(8 * v70);
      v38 = &v73[8 * v71];
      v74 = v38;
      if (v10 != v11)
      {
        v74 = &v38[8 * v14];
        v75 = &v73[8 * v71];
        v76 = v11;
        if ((unint64_t)(v13 - 8) < 0x38)
          goto LABEL_111;
        v77 = &v73[8 * v71];
        v75 = v77;
        v76 = v11;
        if ((unint64_t)(v77 - v11) < 0x20)
          goto LABEL_111;
        v78 = ((unint64_t)(v13 - 8) >> 3) + 1;
        v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v38[v79];
        v76 = &v11[v79];
        v80 = (__int128 *)(v11 + 16);
        v81 = v77 + 16;
        v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v83 = *v80;
          *(v81 - 1) = *(v80 - 1);
          *v81 = v83;
          v80 += 2;
          v81 += 2;
          v82 -= 4;
        }
        while (v82);
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_111:
          do
          {
            v84 = *(_QWORD *)v76;
            v76 += 8;
            *(_QWORD *)v75 = v84;
            v75 += 8;
          }
          while (v75 != v74);
        }
      }
      *(_QWORD *)a1 = v73;
      *(_QWORD *)(a1 + 8) = v38;
      *(_QWORD *)(a1 + 16) = v74;
      *(_QWORD *)(a1 + 24) = &v73[v72];
      if (v11)
      {
        operator delete(v11);
        v38 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v38 = v11;
    }
    *((_QWORD *)v38 - 1) = v17;
    v85 = *(char **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v85 - 8;
    v8 = *((_QWORD *)v85 - 1);
    *(_QWORD *)(a1 + 8) = v85;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v86 = *(char **)a1;
    if ((unint64_t)v85 > *(_QWORD *)a1)
    {
      v87 = (uint64_t)&v85[-*(_QWORD *)a1] >> 3;
      if (v87 >= -1)
        v88 = v87 + 1;
      else
        v88 = v87 + 2;
      v89 = v88 >> 1;
      v90 = -v89;
      v91 = &v85[-8 * v89];
      v92 = v5 - v85;
      if (v5 != v85)
      {
        memmove(&v85[-8 * v89], v85, v5 - v85);
        v85 = *(char **)(a1 + 8);
      }
      v5 = &v91[v92];
      v37 = &v85[8 * v90];
LABEL_32:
      *(_QWORD *)(a1 + 8) = v37;
      *(_QWORD *)(a1 + 16) = v5;
      goto LABEL_5;
    }
    v101 = (v5 - v86) >> 2;
    if (v5 == v86)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v85;
      v44 = v5 == v85;
      v5 = v105;
      if (v44)
        goto LABEL_105;
      v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
      v107 = v106 - 8;
      if ((unint64_t)(v106 - 8) >= 0x38)
      {
        v109 = &v104[8 * v102];
        v108 = v109;
        if ((unint64_t)(v109 - v85) >= 0x20)
        {
          v110 = (v107 >> 3) + 1;
          v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = &v105[v111];
          v112 = &v85[v111];
          v113 = (__int128 *)(v85 + 16);
          v114 = v109 + 16;
          v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          v85 = v112;
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_105:
            *(_QWORD *)a1 = v104;
            *(_QWORD *)(a1 + 8) = v105;
            *(_QWORD *)(a1 + 16) = v5;
            *(_QWORD *)(a1 + 24) = &v104[v103];
            if (v86)
            {
              operator delete(v86);
              v5 = *(char **)(a1 + 16);
            }
            goto LABEL_4;
          }
        }
      }
      else
      {
        v108 = &v104[8 * v102];
      }
      do
      {
        v117 = *(_QWORD *)v85;
        v85 += 8;
        *(_QWORD *)v108 = v117;
        v108 += 8;
      }
      while (v108 != v5);
      goto LABEL_105;
    }
LABEL_108:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v18 = v15 >> 2;
  if (v9 == v12)
    v19 = 1;
  else
    v19 = v18;
  if (v19 >> 61)
    goto LABEL_108;
  v20 = (char *)operator new(8 * v19);
  v21 = &v20[8 * v14];
  v22 = &v20[8 * v19];
  v23 = operator new(0xFFCuLL);
  v24 = v23;
  if (v14 != v19)
    goto LABEL_21;
  if (v13 >= 1)
  {
    v25 = v14 + 2;
    if (v14 >= -1)
      v25 = v14 + 1;
    v21 -= 8 * (v25 >> 1);
LABEL_21:
    *(_QWORD *)v21 = v23;
    v26 = v21 + 8;
    if (v10 != v11)
      goto LABEL_48;
    goto LABEL_22;
  }
  v48 = v13 >> 2;
  if (v10 == v11)
    v48 = 1;
  if (v48 >> 61)
    goto LABEL_108;
  v49 = 8 * v48;
  v21 = (char *)operator new(8 * v48);
  operator delete(v20);
  v22 = &v21[v49];
  v50 = *(char **)(a1 + 8);
  v10 = *(char **)(a1 + 16);
  v20 = v21;
  *(_QWORD *)v21 = v24;
  v26 = v21 + 8;
  if (v10 != v50)
  {
    while (1)
    {
LABEL_48:
      if (v21 == v20)
      {
        if (v26 >= v22)
        {
          v55 = (v22 - v21) >> 2;
          if (v22 == v21)
            v55 = 1;
          if (v55 >> 61)
            goto LABEL_108;
          v56 = (v55 + 3) >> 2;
          v57 = 8 * v55;
          v58 = (char *)operator new(8 * v55);
          v20 = v58;
          v51 = &v58[8 * v56];
          v28 = v51;
          v59 = v26 - v21;
          if (v26 != v21)
          {
            v28 = &v51[v59 & 0xFFFFFFFFFFFFFFF8];
            v60 = v59 - 8;
            v61 = &v58[8 * v56];
            v62 = v21;
            if (v60 < 0x38)
              goto LABEL_112;
            v61 = &v58[8 * v56];
            v62 = v21;
            if ((unint64_t)(v61 - v21) < 0x20)
              goto LABEL_112;
            v63 = (v60 >> 3) + 1;
            v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
            v61 = &v51[v64];
            v62 = &v21[v64];
            v65 = (__int128 *)(v21 + 16);
            v66 = &v58[8 * v56 + 16];
            v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v68 = *v65;
              *((_OWORD *)v66 - 1) = *(v65 - 1);
              *(_OWORD *)v66 = v68;
              v65 += 2;
              v66 += 32;
              v67 -= 4;
            }
            while (v67);
            if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_112:
              do
              {
                v69 = *(_QWORD *)v62;
                v62 += 8;
                *(_QWORD *)v61 = v69;
                v61 += 8;
              }
              while (v61 != v28);
            }
          }
          v22 = &v58[v57];
          operator delete(v21);
        }
        else
        {
          v53 = (v22 - v26) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v28 = &v26[8 * (v54 >> 1)];
          v51 = &v21[8 * (v54 >> 1)];
          if (v26 == v21)
          {
            v20 = v26;
          }
          else
          {
            memmove(&v21[8 * (v54 >> 1)], v21, v26 - v21);
            v20 = v21;
          }
        }
      }
      else
      {
        v51 = v21;
        v28 = v26;
      }
      v52 = *((_QWORD *)v10 - 1);
      v10 -= 8;
      *((_QWORD *)v51 - 1) = v52;
      v27 = v51 - 8;
      v26 = v28;
      v21 = v27;
      if (v10 == *(char **)(a1 + 8))
        goto LABEL_23;
    }
  }
LABEL_22:
  v27 = v21;
  v28 = v26;
LABEL_23:
  v29 = *(char **)a1;
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v28;
  *(_QWORD *)(a1 + 24) = v22;
  if (v29)
    operator delete(v29);
}

void webrtc::RtpStreamReceiverController::Receiver::~Receiver(webrtc::RtpStreamReceiverController::Receiver *this)
{
  *(_QWORD *)this = &off_24C0BDE60;
  webrtc::RtpDemuxer::RemoveSink((_QWORD *)(*((_QWORD *)this + 1) + 24), *((_QWORD *)this + 2));
}

{
  *(_QWORD *)this = &off_24C0BDE60;
  webrtc::RtpDemuxer::RemoveSink((_QWORD *)(*((_QWORD *)this + 1) + 24), *((_QWORD *)this + 2));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RtpStreamReceiverController::~RtpStreamReceiverController(webrtc::RtpStreamReceiverController *this)
{
  *(_QWORD *)this = &off_24C0BDE80;
  *((_QWORD *)this + 1) = &unk_24C0BDEB0;
  webrtc::RtpDemuxer::~RtpDemuxer((webrtc::RtpStreamReceiverController *)((char *)this + 24));
}

{
  *(_QWORD *)this = &off_24C0BDE80;
  *((_QWORD *)this + 1) = &unk_24C0BDEB0;
  webrtc::RtpDemuxer::~RtpDemuxer((webrtc::RtpStreamReceiverController *)((char *)this + 24));
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::RtpStreamReceiverController::~RtpStreamReceiverController(webrtc::RtpStreamReceiverController *this)
{
  *((_QWORD *)this - 1) = &off_24C0BDE80;
  *(_QWORD *)this = &unk_24C0BDEB0;
  webrtc::RtpDemuxer::~RtpDemuxer((webrtc::RtpStreamReceiverController *)((char *)this + 16));
}

{
  *((_QWORD *)this - 1) = &off_24C0BDE80;
  *(_QWORD *)this = &unk_24C0BDEB0;
  webrtc::RtpDemuxer::~RtpDemuxer((webrtc::RtpStreamReceiverController *)((char *)this + 16));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RtpStreamReceiverController::CreateReceiver(uint64_t a1@<X0>, int a2@<W1>, std::string::size_type a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = (_QWORD *)operator new();
  *v8 = &off_24C0BDE60;
  v8[1] = a1;
  v8[2] = a3;
  if ((webrtc::RtpDemuxer::AddSink(a1 + 24, a2, a3) & 1) == 0
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_stream_receiver_controller.cc");
  }
  *a4 = v8;
}

uint64_t webrtc::RtpStreamReceiverController::OnRecoveredPacket(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = webrtc::RtpDemuxer::ResolveSink(a1 + 24, a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
  return result;
}

uint64_t `non-virtual thunk to'webrtc::RtpStreamReceiverController::OnRecoveredPacket(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = webrtc::RtpDemuxer::ResolveSink(a1 + 16, a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
  return result;
}

void webrtc::internal::RtpStreamsSynchronizer::~RtpStreamsSynchronizer(webrtc::internal::RtpStreamsSynchronizer *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  webrtc::internal::RtpStreamsSynchronizer *v5;
  uint64_t v6;
  uint64_t v7;
  webrtc::internal::RtpStreamsSynchronizer *v8;
  webrtc::internal::RtpStreamsSynchronizer *v9;
  uint64_t v10;
  uint64_t v11;
  webrtc::internal::RtpStreamsSynchronizer *v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    *(_BYTE *)(v2 + 4) = 0;
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 26) = 0;
  }
  if (*((_QWORD *)this + 18))
  {
    v6 = *((_QWORD *)this + 16);
    v5 = (webrtc::internal::RtpStreamsSynchronizer *)*((_QWORD *)this + 17);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 18) = 0;
    if (v5 != (webrtc::internal::RtpStreamsSynchronizer *)((char *)this + 128))
    {
      do
      {
        v8 = (webrtc::internal::RtpStreamsSynchronizer *)*((_QWORD *)v5 + 1);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != (webrtc::internal::RtpStreamsSynchronizer *)((char *)this + 128));
    }
  }
  if (*((_QWORD *)this + 7))
  {
    v10 = *((_QWORD *)this + 5);
    v9 = (webrtc::internal::RtpStreamsSynchronizer *)*((_QWORD *)this + 6);
    v11 = *(_QWORD *)v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *((_QWORD *)this + 7) = 0;
    if (v9 != (webrtc::internal::RtpStreamsSynchronizer *)((char *)this + 40))
    {
      do
      {
        v12 = (webrtc::internal::RtpStreamsSynchronizer *)*((_QWORD *)v9 + 1);
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (webrtc::internal::RtpStreamsSynchronizer *)((char *)this + 40));
    }
  }
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
    MEMORY[0x20BD0ADEC](v13, 0x1000C40E0EAB150);
}

uint64_t webrtc::internal::RtpStreamsSynchronizer::ConfigureSync(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  char v21;
  _QWORD v22[2];
  __n128 (*v23)(uint64_t, __n128 *, __n128 *);
  void (*v24)(uint64_t *);
  unsigned int *v25;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 24);
    *(_QWORD *)(v2 + 16) = a2;
    *(_QWORD *)(v2 + 24) = 0;
    if (v3)
    {
      MEMORY[0x20BD0ADEC](v3, 0x1000C40E0EAB150);
      a2 = *(_QWORD *)(v2 + 16);
    }
    if (a2)
    {
      v4 = operator new();
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 16))(*(_QWORD *)(v2 + 8));
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 16))(*(_QWORD *)(v2 + 16));
      *(_DWORD *)v4 = v5;
      *(_DWORD *)(v4 + 4) = v6;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 8) = 0;
      result = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = v4;
      if (result)
        result = MEMORY[0x20BD0ADEC](result, 0x1000C40E0EAB150);
      if (!*(_QWORD *)(v2 + 208))
      {
        v9 = *(_QWORD *)v2;
        v22[0] = v2;
        v23 = absl::internal_any_invocable::LocalManagerTrivial;
        v24 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::internal::RtpStreamsSynchronizer::ConfigureSync(webrtc::Syncable *)::$_1 &>;
        if ((v10 & 1) == 0)
        {
          v18 = v9;
          v9 = v18;
          if (v19)
          {
            v20 = (_QWORD *)operator new();
            *v20 = &unk_24C0B13E8;
            webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v20;
            v9 = v18;
          }
        }
        webrtc::RepeatingTaskHandle::DelayedStart(v9, 1000000, (uint64_t)v22, 0, webrtc::Clock::GetRealTimeClock(void)::clock, (uint64_t)&v21, &v25);
        v11 = v25;
        v25 = 0;
        v12 = *(unsigned int **)(v2 + 208);
        *(_QWORD *)(v2 + 208) = v11;
        if (v12)
        {
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
            MEMORY[0x20BD0ADEC]();
          v15 = v25;
          if (v25)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
              MEMORY[0x20BD0ADEC]();
          }
        }
        return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *))v23)(1, v22, v22);
      }
    }
    else
    {
      result = *(_QWORD *)(v2 + 208);
      if (result)
      {
        *(_BYTE *)(result + 4) = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
          result = MEMORY[0x20BD0ADEC]();
        *(_QWORD *)(v2 + 208) = 0;
      }
    }
  }
  return result;
}

uint64_t webrtc::internal::RtpStreamsSynchronizer::GetStreamSyncOffsetInMs(webrtc::internal::RtpStreamsSynchronizer *this, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t *a5, double *a6)
{
  uint64_t result;
  int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  unsigned int v17;

  result = *((_QWORD *)this + 2);
  if (result)
  {
    v17 = 0;
    v16 = 0;
    v8 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)result + 32))(result, &v17, &v16);
    result = 0;
    if (v8)
    {
      if (*((_BYTE *)this + 80))
      {
        v9 = v17;
        if (*((_BYTE *)this + 100))
        {
          v10 = *((_DWORD *)this + 24);
          v11 = v17 >= v10;
          v12 = v17 - v10;
          v13 = (_DWORD)v12 != 0 && v11;
          if ((_DWORD)v12 != 0x80000000)
            v13 = (int)v12 >= 0;
          if (!v13)
            v12 |= 0xFFFFFFFF00000000;
          v14 = v12 + *((_QWORD *)this + 11);
        }
        else
        {
          v14 = v17;
        }
        *((_QWORD *)this + 11) = v14;
        *((_DWORD *)this + 24) = v9;
        *((_BYTE *)this + 100) = 1;
        v15 = *((double *)this + 9) + (double)v14 * *((double *)this + 8) + 0.5;
        __asm { BR              X11 }
      }
      return 0;
    }
  }
  return result;
}

void absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::internal::RtpStreamsSynchronizer::ConfigureSync(webrtc::Syncable *)::$_1 &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[5];
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  char v40;

  v1 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
    return;
  if (rtc::g_clock)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock) / 1000000;
    v3 = v2 - *(_QWORD *)(v1 + 216);
    if (v3 >= 10001)
LABEL_4:
      *(_QWORD *)(v1 + 216) = v2;
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v2 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C
       / 1000000;
    v3 = v2 - *(_QWORD *)(v1 + 216);
    if (v3 >= 10001)
      goto LABEL_4;
  }
  v4 = *(_QWORD *)(v1 + 104);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v1 + 16) + 24))(&v34);
  if (!v40)
    return;
  v5 = v36;
  *(_DWORD *)(v1 + 112) = v35;
  *(_QWORD *)(v1 + 104) = v34;
  if (!webrtc::RtpToNtpEstimator::UpdateMeasurements(v1 + 32, v37 | (unint64_t)(v5 << 32), v38))
    return;
  if (v4 == *(_QWORD *)(v1 + 104))
    return;
  v6 = *(_QWORD *)(v1 + 192);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v1 + 8) + 24))(&v27);
  if (!v33)
    return;
  v7 = v29;
  *(_DWORD *)(v1 + 200) = v28;
  *(_QWORD *)(v1 + 192) = v27;
  if (!webrtc::RtpToNtpEstimator::UpdateMeasurements(v1 + 120, v30 | (unint64_t)(v7 << 32), v31))
    return;
  if (v6 == *(_QWORD *)(v1 + 192))
    return;
  v26 = 0;
  if (!webrtc::StreamSynchronization::ComputeRelativeDelay(v1 + 32))
    return;
  if (v3 >= 10001 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    if (!v40 || !v33)
      goto LABEL_32;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_streams_synchronizer2.cc");
  }
  v25 = 0;
  if (!v33 || (v24 = v32, !v40))
  {
LABEL_32:
    __break(1u);
    return;
  }
  if (webrtc::StreamSynchronization::ComputeDelays(*(webrtc::StreamSynchronization **)(v1 + 24), v26, v39, &v25, &v24))
  {
    if (v3 >= 10001 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v23[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_strea"
               "ms_synchronizer2.cc";
      v23[1] = 1201;
      v23[2] = &v22;
      v23[3] = "Sync delay stats: ";
      v23[4] = v23;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_streams_synchronizer2.cc");
    }
    if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 16) + 40))(*(_QWORD *)(v1 + 16), v25) & 1) == 0)*(_DWORD *)(*(_QWORD *)(v1 + 24) + 8) = (int)(float)((float)*(int *)(*(_QWORD *)(v1 + 24) + 8) * 0.9);
    if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 8) + 40))(*(_QWORD *)(v1 + 8), v24) & 1) == 0)*(_DWORD *)(*(_QWORD *)(v1 + 24) + 16) = (int)(float)((float)*(int *)(*(_QWORD *)(v1 + 24) + 16) * 0.9);
  }
}

uint64_t webrtc::RtpToNtpEstimator::UpdateMeasurements(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  double v46;
  uint64_t *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;

  if (*(_BYTE *)(a1 + 68))
  {
    v5 = *(_DWORD *)(a1 + 64);
    v6 = a3 >= v5;
    v7 = a3 - v5;
    v8 = (_DWORD)v7 != 0 && v6;
    if ((_DWORD)v7 != 0x80000000)
      v8 = (int)v7 >= 0;
    if (!v8)
      v7 |= 0xFFFFFFFF00000000;
    v9 = v7 + *(_QWORD *)(a1 + 56);
  }
  else
  {
    v9 = a3;
  }
  *(_QWORD *)(a1 + 56) = v9;
  *(_DWORD *)(a1 + 64) = a3;
  *(_BYTE *)(a1 + 68) = 1;
  v10 = (uint64_t *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == a1 + 8)
  {
LABEL_18:
    if (a2)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        *(_DWORD *)a1 = 0;
        goto LABEL_40;
      }
      v14 = *(_QWORD *)(v11 + 16);
      if (v14 < a2 && v14 + 0xE1000000000 >= a2)
      {
        v15 = *(_QWORD *)(v11 + 24);
        v16 = __OFSUB__(v9, v15);
        v17 = v9 - v15;
        if ((v17 < 0) ^ v16 | (v17 == 0))
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/system_wrappers/source/rtp_to_ntp_estimator.cc");
        }
        else if (v17 < 33554433)
        {
LABEL_38:
          v38 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)a1 = 0;
          if (v38 == 20)
          {
            v39 = *(uint64_t **)(a1 + 8);
            v40 = *v39;
            *(_QWORD *)(v40 + 8) = v39[1];
            *(_QWORD *)v39[1] = v40;
            *(_QWORD *)(a1 + 24) = 19;
            operator delete(v39);
          }
LABEL_40:
          v41 = (uint64_t *)operator new(0x20uLL);
          v41[2] = a2;
          v41[3] = v9;
          v42 = *(uint64_t ***)(a1 + 16);
          v43 = *(_QWORD *)(a1 + 24);
          *v41 = (uint64_t)v10;
          v41[1] = (uint64_t)v42;
          *v42 = v41;
          v44 = v43 + 1;
          *(_QWORD *)(a1 + 16) = v41;
          *(_QWORD *)(a1 + 24) = v43 + 1;
          if ((unint64_t)(v43 + 1) >= 2)
          {
            if (v41 == v10)
            {
              v50 = 0.0;
              v51 = 0.0 / (double)v44;
              v48 = v51;
              v49 = 0.0;
              if (fabs(0.0) < 0.00000001)
                return 2;
            }
            else
            {
              v45 = 0.0;
              v46 = 0.0;
              v47 = v41;
              do
              {
                v45 = v45 + (double)v47[3];
                v46 = v46 + (double)(unint64_t)v47[2];
                v47 = (uint64_t *)v47[1];
              }
              while (v47 != v10);
              v48 = v45 / (double)v44;
              v49 = 0.0;
              v50 = 0.0;
              v51 = v46 / (double)v44;
              do
              {
                v52 = (double)v41[3] - v48;
                v49 = v49 + v52 * v52;
                v50 = v50 + v52 * ((double)(unint64_t)v41[2] - v51);
                v41 = (uint64_t *)v41[1];
              }
              while (v41 != v10);
              if (fabs(v49) < 0.00000001)
                return 2;
            }
            v53 = v50 / v49;
            *(double *)(a1 + 32) = v53;
            *(double *)(a1 + 40) = v51 - v53 * v48;
            *(_BYTE *)(a1 + 48) = 1;
          }
          return 2;
        }
      }
      v26 = (*(_DWORD *)a1)++;
      if (v26 >= 2)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/system_wrappers/source/rtp_to_ntp_estimator.cc");
        if (*(_QWORD *)(a1 + 24))
        {
          v35 = *(_QWORD *)(a1 + 8);
          v34 = *(uint64_t **)(a1 + 16);
          v36 = *v34;
          *(_QWORD *)(v36 + 8) = *(_QWORD *)(v35 + 8);
          **(_QWORD **)(v35 + 8) = v36;
          *(_QWORD *)(a1 + 24) = 0;
          if (v34 != v10)
          {
            do
            {
              v37 = (uint64_t *)v34[1];
              operator delete(v34);
              v34 = v37;
            }
            while (v37 != v10);
          }
        }
        if (*(_BYTE *)(a1 + 48))
          *(_BYTE *)(a1 + 48) = 0;
        goto LABEL_38;
      }
    }
    return 0;
  }
  v12 = *(uint64_t **)(a1 + 16);
  while (v12[2] != a2 && v12[3] != v9)
  {
    v12 = (uint64_t *)v12[1];
    if (v12 == v10)
      goto LABEL_18;
  }
  return 1;
}

uint64_t webrtc::RtpTransceiver::RtpTransceiver(uint64_t a1, int a2, uint64_t a3)
{
  void *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v10;
  pthread_mutexattr_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &unk_24C0BDED8;
  if (!v6)
  {
    v8 = &unk_253EA7000;
    {
      v10 = operator new();
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)v10 = 0;
      pthread_mutexattr_init(&v11);
      pthread_mutexattr_setpolicy_np(&v11, 3);
      pthread_mutex_init((pthread_mutex_t *)(v10 + 24), &v11);
      pthread_mutexattr_destroy(&v11);
      InitCocoaMultiThreading();
      pthread_key_create((pthread_key_t *)(v10 + 88), 0);
      rtc::ThreadManager::Instance(void)::thread_manager = v10;
      v8 = (_QWORD *)&unk_253EA7000;
    }
    v6 = pthread_getspecific(*(_QWORD *)(v8[292] + 88));
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 67) = 0u;
  *(_DWORD *)(a1 + 84) = 3;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 100) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 154) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a3;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  return a1;
}

uint64_t webrtc::RtpTransceiver::RtpTransceiver(uint64_t a1, const char *a2, char *a3, char *a4, char *a5, char *a6)
{
  void *v12;
  unsigned __int8 v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (**v23)(char *);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void (**v32)(char *);
  void (***v33)(_QWORD);
  _QWORD *v34;
  char *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char *v41;
  char *v45;
  char *v46;
  char *v48;
  rtc::ThreadManager *v49;
  void *v50[12];
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;

  *(_QWORD *)a1 = &unk_24C0BDED8;
  if (v12)
    goto LABEL_4;
  v14 = (char *)&unk_253EA7000;
  if ((v13 & 1) == 0)
    goto LABEL_89;
  while (1)
  {
    v12 = pthread_getspecific(*(_QWORD *)(*((_QWORD *)v14 + 292) + 88));
LABEL_4:
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = 1;
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 64))(*(_QWORD *)a2);
    *(_OWORD *)(a1 + 56) = 0u;
    v14 = (char *)(a1 + 56);
    *(_DWORD *)(a1 + 20) = v15;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 67) = 0u;
    *(_DWORD *)(a1 + 84) = 3;
    *(_BYTE *)(a1 + 88) = 0;
    *(_BYTE *)(a1 + 92) = 0;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 100) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_WORD *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 154) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = a4;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)a5;
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a5 + 2);
    *(_QWORD *)a5 = 0;
    *((_QWORD *)a5 + 1) = 0;
    *((_QWORD *)a5 + 2) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    v16 = (char *)*((_QWORD *)a6 + 3);
    if (v16)
    {
      if (v16 == a6)
      {
        *(_QWORD *)(a1 + 272) = a1 + 248;
        (*(void (**)(_QWORD))(**((_QWORD **)a6 + 3) + 24))(*((_QWORD *)a6 + 3));
      }
      else
      {
        *(_QWORD *)(a1 + 272) = v16;
        *((_QWORD *)a6 + 3) = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 272) = 0;
    }
    v17 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 64))(*(_QWORD *)a2);
    v19 = **(_QWORD **)(*(_QWORD *)(a1 + 168) + 96);
    if (v18 == 1)
    {
      v20 = (*(uint64_t (**)(void))(v19 + 32))();
      (*(void (**)(char **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v20 + 56))(&v53, v20, 0);
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v17 + 296))(v17, &v53);
      a5 = v53;
      if (!v53)
        goto LABEL_28;
      v21 = v53;
      if (v54 == v53)
        goto LABEL_27;
      v22 = v54 - 216;
      a4 = v54 - 216;
      do
      {
        v23 = *(void (***)(char *))a4;
        a4 -= 216;
        (*v23)(v22);
        v39 = v22 == a5;
        v22 = a4;
      }
      while (!v39);
      goto LABEL_26;
    }
    v24 = (*(uint64_t (**)(void))(v19 + 24))();
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 56))(v24);
    v54 = 0;
    v55 = 0;
    v53 = 0;
    a4 = *(char **)v25;
    v26 = *(char **)(v25 + 8);
    v27 = (int64_t)&v26[-*(_QWORD *)v25];
    if (v27)
    {
      v28 = 0x84BDA12F684BDA13 * (v27 >> 3);
      if (v28 >= 0x12F684BDA12F685)
        abort();
      v29 = (char *)operator new(v27);
      v30 = 0;
      v53 = v29;
      v55 = &v29[216 * v28];
      do
      {
        cricket::Codec::Codec((cricket::Codec *)&v29[v30], (const cricket::Codec *)&a4[v30]);
        v30 += 216;
      }
      while (&a4[v30] != v26);
      v54 = &v29[v30];
    }
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v17 + 296))(v17, &v53);
    a5 = v53;
    if (v53)
    {
      v21 = v53;
      if (v54 == v53)
      {
LABEL_27:
        v54 = a5;
        operator delete(v21);
        goto LABEL_28;
      }
      v31 = v54 - 216;
      a4 = v54 - 216;
      do
      {
        v32 = *(void (***)(char *))a4;
        a4 -= 216;
        (*v32)(v31);
        v39 = v31 == a5;
        v31 = a4;
      }
      while (!v39);
LABEL_26:
      v21 = v53;
      goto LABEL_27;
    }
LABEL_28:
    a6 = *(char **)(a1 + 40);
    if ((unint64_t)a6 >= *(_QWORD *)(a1 + 48))
    {
      *(_QWORD *)(a1 + 40) = std::vector<webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>> const&>(a1 + 32, *(void (****)(_QWORD))a2);
      a6 = *(char **)(a1 + 64);
      if ((unint64_t)a6 >= *(_QWORD *)(a1 + 72))
        goto LABEL_33;
    }
    else
    {
      if (!a6)
        goto LABEL_88;
      v33 = *(void (****)(_QWORD))a2;
      *(_QWORD *)a6 = *(_QWORD *)a2;
      if (v33)
        (**v33)(v33);
      *(_QWORD *)(a1 + 40) = a6 + 8;
      a6 = *(char **)(a1 + 64);
      if ((unint64_t)a6 >= *(_QWORD *)(a1 + 72))
      {
LABEL_33:
        v34 = std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>(a1 + 56, (void (****)(_QWORD))a3);
        goto LABEL_39;
      }
    }
    if (!a6)
      goto LABEL_88;
    v35 = *(char **)a3;
    *(_QWORD *)a6 = *(_QWORD *)a3;
    if (v35)
      (**(void (***)(char *))v35)(v35);
    v34 = a6 + 8;
LABEL_39:
    *(_QWORD *)(a1 + 64) = v34;
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)a2 + 24) + 232))(v50);
    if (v52 == v51)
    {
      v36 = 0;
    }
    else
    {
      v36 = *(unsigned __int8 *)(v51 + 104);
      if (*(_BYTE *)(v51 + 104))
      {
        v37 = (_QWORD *)(v51 + 80);
        if (*(char *)(v51 + 103) < 0)
        {
          v38 = *(_QWORD *)(v51 + 88);
          if (v38 < 0)
            goto LABEL_88;
          v37 = (_QWORD *)*v37;
          if (v38)
          {
            if (!v37)
              goto LABEL_88;
          }
        }
        else
        {
          v38 = *(unsigned __int8 *)(v51 + 103);
        }
        if (v38 != 4)
          goto LABEL_53;
        v36 = *(_DWORD *)"L1T1" != *(_DWORD *)v37;
      }
    }
    v39 = 0xF0F0F0F0F0F0F0F1 * ((v52 - v51) >> 4) <= 1 && v36 == 0;
    if (v39)
      break;
LABEL_53:
    v14 = *(char **)(a1 + 200);
    a6 = *(char **)(a1 + 208);
    if (v14 == a6)
      break;
    a2 = "http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00";
    a3 = *(char **)(a1 + 200);
    while (1)
    {
      if (a3[23] < 0)
      {
        v40 = *((_QWORD *)a3 + 1);
        if (v40 < 0)
          goto LABEL_88;
        v41 = *(char **)a3;
        if (v40 && v41 == 0)
          goto LABEL_88;
      }
      else
      {
        v40 = a3[23];
        v41 = a3;
      }
      if (v40 == 72
        && !memcmp(v41, "http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00", 0x48uLL)
        && *((_DWORD *)a3 + 9) != 4)
      {
        break;
      }
      a3 += 40;
      if (a3 == a6)
        goto LABEL_70;
    }
    if (a3 != a6)
      break;
LABEL_70:
    a2 = "http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00";
    a3 = "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension";
    while (1)
    {
      a5 = (char *)v14[23];
      v45 = v14;
      v46 = a5;
      if (v14[23] < 0)
      {
        v46 = (char *)*((_QWORD *)v14 + 1);
        if (((unint64_t)v46 & 0x8000000000000000) != 0)
          break;
        v45 = *(char **)v14;
        if (v46 && v45 == 0)
          break;
      }
      if (v46 == (char *)70
        && !memcmp(v45, "http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00", 0x46uLL))
      {
        goto LABEL_71;
      }
      v48 = v14;
      if ((a5 & 0x80) != 0)
      {
        a5 = (char *)*((_QWORD *)v14 + 1);
        if (((unint64_t)a5 & 0x8000000000000000) != 0)
          break;
        v48 = *(char **)v14;
        if (a5)
        {
          if (!v48)
            break;
        }
      }
      if (a5 == (char *)87
        && !memcmp(v48, "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension", 0x57uLL))
      {
LABEL_71:
        *((_DWORD *)v14 + 9) = 0;
      }
      v14 += 40;
      if (v14 == a6)
        goto LABEL_69;
    }
LABEL_88:
    __break(1u);
LABEL_89:
    {
      v49 = (rtc::ThreadManager *)operator new();
      *((_QWORD *)v14 + 292) = rtc::ThreadManager::ThreadManager(v49);
    }
  }
LABEL_69:
  webrtc::RtpParameters::~RtpParameters(v50);
  return a1;
}

void webrtc::RtpTransceiver::~RtpTransceiver(webrtc::RtpTransceiver *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  webrtc::RtpTransceiver *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void (***v17)(_QWORD);
  void (***v18)(_QWORD);
  void *v19;
  void (***v20)(_QWORD);
  void (***v21)(_QWORD);
  void (**v22)(_QWORD);
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  std::string *v38;

  *(_QWORD *)this = &unk_24C0BDED8;
  if (!*((_BYTE *)this + 80))
    webrtc::RtpTransceiver::StopTransceiverProcedure((uint64_t)this);
  if (*((_QWORD *)this + 20))
  {
    v38 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 193, "!channel_", "\t", a5, a6, a7, a8, (uint64_t)"Missing call to ClearChannel?");
    webrtc::RtpTransceiver::~RtpTransceiver((webrtc::RtpTransceiver *)v38);
  }
  v9 = (webrtc::RtpTransceiver *)*((_QWORD *)this + 34);
  if (v9 == (webrtc::RtpTransceiver *)((char *)this + 248))
  {
    v10 = 4;
    v9 = (webrtc::RtpTransceiver *)((char *)this + 248);
  }
  else
  {
    if (!v9)
      goto LABEL_9;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_9:
  v11 = *((_QWORD *)this + 28);
  if (v11)
  {
    v12 = *((_QWORD *)this + 29);
    v13 = (void *)*((_QWORD *)this + 28);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 9) < 0)
          operator delete(*(void **)(v12 - 32));
        v12 -= 32;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 28);
    }
    *((_QWORD *)this + 29) = v11;
    operator delete(v13);
  }
  v14 = *((_QWORD *)this + 25);
  if (v14)
  {
    v15 = *((_QWORD *)this + 26);
    v16 = (void *)*((_QWORD *)this + 25);
    if (v15 != v14)
    {
      do
      {
        if (*(char *)(v15 - 17) < 0)
          operator delete(*(void **)(v15 - 40));
        v15 -= 40;
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 25);
    }
    *((_QWORD *)this + 26) = v14;
    operator delete(v16);
  }
  v17 = (void (***)(_QWORD))*((_QWORD *)this + 22);
  if (v17)
  {
    v18 = (void (***)(_QWORD))*((_QWORD *)this + 23);
    v19 = (void *)*((_QWORD *)this + 22);
    if (v18 != v17)
    {
      v20 = v18 - 20;
      v21 = v18 - 20;
      do
      {
        v22 = *v21;
        v21 -= 20;
        (*v22)(v20);
        v23 = v20 == v17;
        v20 = v21;
      }
      while (!v23);
      v19 = (void *)*((_QWORD *)this + 22);
    }
    *((_QWORD *)this + 23) = v17;
    operator delete(v19);
  }
  v24 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (*((_BYTE *)this + 128) && *((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  v25 = *((_QWORD *)this + 7);
  if (v25)
  {
    v26 = *((_QWORD *)this + 8);
    v27 = (void *)*((_QWORD *)this + 7);
    if (v26 != v25)
    {
      do
      {
        v29 = *(_QWORD *)(v26 - 8);
        v26 -= 8;
        v28 = v29;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
      while (v26 != v25);
      v27 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v25;
    operator delete(v27);
  }
  v30 = *((_QWORD *)this + 4);
  if (v30)
  {
    v31 = *((_QWORD *)this + 5);
    v32 = (void *)*((_QWORD *)this + 4);
    if (v31 != v30)
    {
      do
      {
        v34 = *(_QWORD *)(v31 - 8);
        v31 -= 8;
        v33 = v34;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      }
      while (v31 != v30);
      v32 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v30;
    operator delete(v32);
  }
  v35 = (unsigned int *)*((_QWORD *)this + 3);
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      MEMORY[0x20BD0ADEC]();
  }
}

void webrtc::RtpTransceiver::CreateChannel(char *__src@<X1>, size_t __len@<X2>, uint64_t a3@<X0>, uint64_t a4@<X3>, uint64_t *a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, _BYTE *a8@<X7>, uint64_t a9@<X8>, _BYTE *a10, uint64_t a11, _QWORD *a12)
{
  int v17;
  uint64_t v18;
  _QWORD *(*v19)(uint64_t *);
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  size_t v32;
  size_t v33;
  char *v34;
  std::string *v36;
  uint64_t *v37;
  size_t v38;
  char *p_srca;
  size_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  size_t v46;
  std::string *v47;
  uint64_t *v48;
  size_t v49;
  char *v50;
  size_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::string::size_type v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 __srca;
  uint64_t *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t *v76;
  void **v77;
  void **v78;
  char *v79;
  uint64_t v80;
  std::string v81;
  char v82;
  uint64_t v83;
  void *v84;
  size_t __lena;
  uint64_t v86;
  char v87;
  _QWORD v88[3];
  _QWORD *v89;
  _BYTE v90[24];
  _BYTE *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v84 = __src;
  __lena = __len;
  v83 = a4;
  v82 = a6;
  if (!*(_QWORD *)(*(_QWORD *)(a3 + 168) + 96))
  {
    if (__len > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_110;
    if (__len > 0x16)
    {
      v32 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v32 = __len | 7;
      v33 = v32 + 1;
      v22 = (char *)operator new(v32 + 1);
      v81.__r_.__value_.__l.__size_ = __len;
      v81.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    }
    else
    {
      *((_BYTE *)&v81.__r_.__value_.__s + 23) = __len;
      v22 = (char *)&v81;
    }
    v34 = &v22[__len];
    if (v22 <= __src && v34 > __src)
      goto LABEL_109;
    if (__len)
      memmove(v22, __src, __len);
    *v34 = 0;
    v36 = std::string::insert(&v81, 0, "No media engine for mid=");
    v37 = (uint64_t *)v36->__r_.__value_.__r.__words[2];
    __srca = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v73 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = HIBYTE(v73);
    if (SHIBYTE(v73) < 0)
    {
      v40 = *((_QWORD *)&__srca + 1);
      if ((*((_QWORD *)&__srca + 1) & 0x8000000000000000) != 0)
        goto LABEL_109;
      p_srca = (char *)__srca;
      if (*((_QWORD *)&__srca + 1))
      {
        if (!(_QWORD)__srca)
          goto LABEL_109;
      }
      *(_DWORD *)a9 = 10;
      if (v40 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_110;
    }
    else
    {
      *(_DWORD *)a9 = 10;
      p_srca = (char *)&__srca;
      v40 = v38;
    }
    if (v40 > 0x16)
    {
      v43 = (v40 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v43 = v40 | 7;
      v44 = v43 + 1;
      v41 = (char *)operator new(v43 + 1);
      *(_QWORD *)(a9 + 16) = v40;
      *(_QWORD *)(a9 + 24) = v44 | 0x8000000000000000;
      *(_QWORD *)(a9 + 8) = v41;
      v42 = &v41[v40];
      if (v41 > p_srca)
        goto LABEL_42;
    }
    else
    {
      v41 = (char *)(a9 + 8);
      *(_BYTE *)(a9 + 31) = v40;
      v42 = (char *)(a9 + 8 + v40);
      if (a9 + 8 > (unint64_t)p_srca)
        goto LABEL_42;
    }
    if (v42 > p_srca)
      goto LABEL_109;
LABEL_42:
    if (v40)
      memmove(v41, p_srca, v40);
    *v42 = 0;
    *(_DWORD *)(a9 + 32) = 0;
    *(_BYTE *)(a9 + 36) = 0;
    *(_BYTE *)(a9 + 38) = 0;
    if ((v38 & 0x80) != 0)
    {
      operator delete((void *)__srca);
      if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
    operator delete(v81.__r_.__value_.__l.__data_);
    return;
  }
  v80 = 0;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 168) + 40);
  if (v17)
  {
    *(_QWORD *)&__srca = a3;
    *((_QWORD *)&__srca + 1) = &v83;
    v73 = a5;
    v74 = a10;
    v75 = a7;
    v76 = &a11;
    v77 = (void **)&v80;
    v78 = &v84;
    v79 = &v82;
    v19 = rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::CreateChannel(std::string_view,webrtc::Call *,cricket::MediaConfig const&,BOOL,webrtc::CryptoOptions,cricket::AudioOptions const&,cricket::VideoOptions const&,webrtc::VideoBitrateAllocatorFactory *,std::function<webrtc::RtpTransportInternal * ()(std::string_view)>)::$_2>;
  }
  else
  {
    *(_QWORD *)&__srca = a3;
    *((_QWORD *)&__srca + 1) = &v83;
    v73 = a5;
    v74 = a8;
    v75 = a7;
    v76 = &v80;
    v77 = &v84;
    v78 = (void **)&v82;
    v19 = rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::CreateChannel(std::string_view,webrtc::Call *,cricket::MediaConfig const&,BOOL,webrtc::CryptoOptions,cricket::AudioOptions const&,cricket::VideoOptions const&,webrtc::VideoBitrateAllocatorFactory *,std::function<webrtc::RtpTransportInternal * ()(std::string_view)>)::$_1>;
  }
  (*(void (**)(uint64_t, __int128 *, _QWORD *(*)(uint64_t *), std::string *))(*(_QWORD *)v18 + 96))(v18, &__srca, v19, &v81);
  v23 = v80;
  if (!v80)
  {
    v28 = __lena;
    if (__lena > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_110;
    v29 = (char *)v84;
    if (__lena > 0x16)
    {
      v45 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__lena | 7) != 0x17)
        v45 = __lena | 7;
      v46 = v45 + 1;
      v30 = (char *)operator new(v45 + 1);
      v81.__r_.__value_.__l.__size_ = v28;
      v81.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      v31 = &v30[v28];
      if (v30 > v29)
        goto LABEL_53;
    }
    else
    {
      *((_BYTE *)&v81.__r_.__value_.__s + 23) = __lena;
      v30 = (char *)&v81;
      v31 = (char *)&v81 + __lena;
      if (&v81 > v84)
      {
LABEL_53:
        if (v28)
          memmove(v30, v29, v28);
        *v31 = 0;
        v47 = std::string::insert(&v81, 0, "Failed to create channel for mid=");
        v48 = (uint64_t *)v47->__r_.__value_.__r.__words[2];
        __srca = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v73 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v49 = HIBYTE(v73);
        if ((SHIBYTE(v73) & 0x80000000) == 0)
        {
          *(_DWORD *)a9 = 10;
          v50 = (char *)&__srca;
          v51 = v49;
LABEL_64:
          if (v51 > 0x16)
          {
            v54 = (v51 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v51 | 7) != 0x17)
              v54 = v51 | 7;
            v55 = v54 + 1;
            v52 = (char *)operator new(v54 + 1);
            *(_QWORD *)(a9 + 16) = v51;
            *(_QWORD *)(a9 + 24) = v55 | 0x8000000000000000;
            *(_QWORD *)(a9 + 8) = v52;
            v53 = &v52[v51];
            if (v52 > v50)
            {
LABEL_71:
              if (v51)
                memmove(v52, v50, v51);
              *v53 = 0;
              *(_DWORD *)(a9 + 32) = 0;
              *(_BYTE *)(a9 + 36) = 0;
              *(_BYTE *)(a9 + 38) = 0;
              if ((v49 & 0x80) != 0)
              {
                operator delete((void *)__srca);
                if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_75:
                  v56 = v80;
                  v80 = 0;
                  if (!v56)
                    return;
                  goto LABEL_76;
                }
              }
              else if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_75;
              }
              operator delete(v81.__r_.__value_.__l.__data_);
              v56 = v80;
              v80 = 0;
              if (!v56)
                return;
LABEL_76:
              (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
              return;
            }
          }
          else
          {
            v52 = (char *)(a9 + 8);
            *(_BYTE *)(a9 + 31) = v51;
            v53 = (char *)(a9 + 8 + v51);
            if (a9 + 8 > (unint64_t)v50)
              goto LABEL_71;
          }
          if (v53 <= v50)
            goto LABEL_71;
LABEL_109:
          __break(1u);
        }
        v51 = *((_QWORD *)&__srca + 1);
        if ((*((_QWORD *)&__srca + 1) & 0x8000000000000000) != 0)
          goto LABEL_109;
        v50 = (char *)__srca;
        if (*((_QWORD *)&__srca + 1))
        {
          if (!(_QWORD)__srca)
            goto LABEL_109;
        }
        *(_DWORD *)a9 = 10;
        if (v51 <= 0x7FFFFFFFFFFFFFF7)
          goto LABEL_64;
LABEL_110:
        abort();
      }
    }
    if (v31 > v29)
      goto LABEL_109;
    goto LABEL_53;
  }
  v80 = 0;
  v71 = v23;
  v24 = (_QWORD *)a12[3];
  if (!v24)
  {
    v27 = 0;
    v89 = 0;
    v91 = 0;
    if (*(_BYTE *)(a3 + 80))
      goto LABEL_96;
    goto LABEL_83;
  }
  if (v24 != a12)
  {
    v25 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v24 + 16))(a12[3]);
    v89 = v25;
    v91 = 0;
    if (v25)
      goto LABEL_12;
LABEL_58:
    v27 = 0;
    if (*(_BYTE *)(a3 + 80))
      goto LABEL_96;
    goto LABEL_83;
  }
  v89 = v88;
  (*(void (**)(void))(*a12 + 24))();
  v25 = v89;
  v91 = 0;
  if (!v89)
    goto LABEL_58;
LABEL_12:
  v26 = operator new(0x28uLL);
  v27 = v26;
  *v26 = &off_24C0BDFA0;
  if (v25 == v88)
  {
    v26[4] = v26 + 1;
    (*(void (**)(_QWORD *))(v88[0] + 24))(v88);
  }
  else
  {
    v26[4] = v25;
    v89 = 0;
  }
  v91 = v27;
  if (*(_BYTE *)(a3 + 80))
    goto LABEL_96;
LABEL_83:
  v57 = operator new();
  v58 = v57;
  *(_DWORD *)v57 = 0;
  *(_BYTE *)(v57 + 4) = 1;
  do
    v59 = __ldxr((unsigned int *)v57);
  while (__stxr(v59 + 1, (unsigned int *)v57));
  v60 = *(unsigned int **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v58;
  if (v60)
  {
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
      MEMORY[0x20BD0ADEC]();
  }
  v81.__r_.__value_.__r.__words[0] = 0;
  v63 = *(_QWORD *)(*(_QWORD *)(a3 + 168) + 24);
  *(_QWORD *)&__srca = a3;
  *((_QWORD *)&__srca + 1) = &v81;
  v73 = &v71;
  v74 = v90;
  (*(void (**)(uint64_t, __int128 *, _QWORD *(*)(_QWORD *), char *))(*(_QWORD *)v63 + 96))(v63, &__srca, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1>, &v87);
  v86 = 0;
  if (*(_QWORD *)(a3 + 32) != *(_QWORD *)(a3 + 40) || *(_QWORD *)(a3 + 56) != *(_QWORD *)(a3 + 64))
  {
    v64 = *(_QWORD *)(*(_QWORD *)(a3 + 168) + 40);
    *(_QWORD *)&__srca = a3;
    *((_QWORD *)&__srca + 1) = &v86;
    (*(void (**)(uint64_t, __int128 *, uint64_t (*)(_QWORD *), char *))(*(_QWORD *)v64 + 96))(v64, &__srca, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::PushNewMediaChannelAndDeleteChannel(std::unique_ptr<cricket::ChannelInterface>)::$_0>, &v87);
    v65 = v86;
    v86 = 0;
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  }
  v66 = v81.__r_.__value_.__r.__words[0];
  v81.__r_.__value_.__r.__words[0] = 0;
  if (v66)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v66 + 8))(v66);
  v27 = v91;
  if (v91 == v90)
  {
    v67 = 4;
    v27 = v90;
    goto LABEL_99;
  }
LABEL_96:
  if (!v27)
    goto LABEL_100;
  v67 = 5;
LABEL_99:
  (*(void (**)(_QWORD *))(*v27 + 8 * v67))(v27);
LABEL_100:
  v68 = v89;
  if (v89 == v88)
  {
    v69 = 4;
    v68 = v88;
  }
  else
  {
    if (!v89)
      goto LABEL_105;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_105:
  v70 = v71;
  v71 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  *(_DWORD *)a9 = 0;
  *(_BYTE *)(a9 + 38) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)(a9 + 24) = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 29) = 0;
  v56 = v80;
  v80 = 0;
  if (v56)
    goto LABEL_76;
}

_QWORD *webrtc::RtpTransceiver::ClearChannel(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  _QWORD **v12;

  if (this[20])
  {
    v1 = this;
    v2 = this[3];
    *(_BYTE *)(v2 + 4) = 0;
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
    v1[3] = 0;
    v9 = 0;
    v5 = *(_QWORD *)(v1[21] + 24);
    v11 = v1;
    v12 = &v9;
    (*(void (**)(uint64_t, _QWORD **, uint64_t (*)(_QWORD *), char *))(*(_QWORD *)v5 + 96))(v5, &v11, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::ClearChannel(void)::$_1>, &v10);
    v8 = v9;
    v9 = 0;
    if (!v8 && v1[4] == v1[5] && v1[7] == v1[8])
    {
      return v9;
    }
    else
    {
      v6 = *(_QWORD *)(v1[21] + 40);
      v11 = v1;
      v12 = &v8;
      (*(void (**)(uint64_t, _QWORD **, uint64_t (*)(_QWORD *), char *))(*(_QWORD *)v6 + 96))(v6, &v11, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::PushNewMediaChannelAndDeleteChannel(std::unique_ptr<cricket::ChannelInterface>)::$_0>, &v10);
      v7 = v8;
      v8 = 0;
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
      this = v9;
      v9 = 0;
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  return this;
}

void webrtc::RtpTransceiver::AddSender(_QWORD *a1, void (****a2)(_QWORD))
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void (**v9)(_QWORD);
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  char *v23;
  void (***v24)(char *);
  void (**v25)(char *);
  BOOL v26;
  _QWORD *v27;
  void (***v28)(_QWORD);
  char *v29;
  void *v30;
  char *v31;
  void (***v32)(char *);
  void (**v33)(char *);
  void *__p;
  char *v35;
  char *v36;
  void *v37;
  char *v38;
  char *v39;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v5 = **(_QWORD **)(a1[21] + 96);
  if (v4 == 1)
  {
    v6 = (*(uint64_t (**)(void))(v5 + 32))();
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 56))(&v37, v6, 0);
    v7 = (char *)v37;
    v8 = v38;
    v9 = (*a2)[3];
    v35 = 0;
    v36 = 0;
    __p = 0;
    v10 = v38 - (_BYTE *)v37;
    if (v38 == v37)
      goto LABEL_15;
    goto LABEL_11;
  }
  v11 = (*(uint64_t (**)(void))(v5 + 24))();
  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v13 = *v12;
  v14 = v12[1];
  v15 = v14 - *v12;
  if (!v15)
  {
    v9 = (*a2)[3];
    v35 = 0;
    v36 = 0;
    __p = 0;
    goto LABEL_15;
  }
  v16 = 0x84BDA12F684BDA13 * (v15 >> 3);
  if (v16 > 0x12F684BDA12F684)
    goto LABEL_37;
  v7 = (char *)operator new(v15);
  v17 = 0;
  v37 = v7;
  v39 = &v7[216 * v16];
  do
  {
    cricket::Codec::Codec((cricket::Codec *)&v7[v17], (const cricket::Codec *)(v13 + v17));
    v17 += 216;
  }
  while (v13 + v17 != v14);
  v8 = &v7[v17];
  v38 = v8;
  v9 = (*a2)[3];
  v35 = 0;
  v36 = 0;
  __p = 0;
  v10 = v8 - v7;
  if (v8 != v7)
  {
LABEL_11:
    v18 = 0x84BDA12F684BDA13 * (v10 >> 3);
    if (v18 > 0x12F684BDA12F684)
      goto LABEL_37;
    v19 = (char *)operator new(v10);
    v20 = 0;
    __p = v19;
    v36 = &v19[216 * v18];
    do
    {
      cricket::Codec::Codec((cricket::Codec *)&v19[v20], (const cricket::Codec *)&v7[v20]);
      v20 += 216;
    }
    while (&v7[v20] != v8);
    v35 = &v19[v20];
  }
LABEL_15:
  (*((void (**)(void (**)(_QWORD), void **))*v9 + 37))(v9, &__p);
  v21 = (char *)__p;
  if (__p)
  {
    v22 = __p;
    if (v35 != __p)
    {
      v23 = v35 - 216;
      v24 = (void (***)(char *))(v35 - 216);
      do
      {
        v25 = *v24;
        v24 -= 27;
        (*v25)(v23);
        v26 = v23 == v21;
        v23 = (char *)v24;
      }
      while (!v26);
      v22 = __p;
    }
    v35 = v21;
    operator delete(v22);
  }
  v27 = (_QWORD *)a1[5];
  if ((unint64_t)v27 >= a1[6])
  {
    a1[5] = std::vector<webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>> const&>((uint64_t)(a1 + 4), *a2);
    v29 = (char *)v37;
    if (!v37)
      return;
    goto LABEL_29;
  }
  if (!v27)
  {
    __break(1u);
LABEL_37:
    abort();
  }
  v28 = *a2;
  *v27 = *a2;
  if (v28)
    (**v28)(v28);
  a1[5] = v27 + 1;
  v29 = (char *)v37;
  if (v37)
  {
LABEL_29:
    v30 = v29;
    if (v38 != v29)
    {
      v31 = v38 - 216;
      v32 = (void (***)(char *))(v38 - 216);
      do
      {
        v33 = *v32;
        v32 -= 27;
        (*v33)(v31);
        v26 = v31 == v29;
        v31 = (char *)v32;
      }
      while (!v26);
      v30 = v37;
    }
    v38 = v29;
    operator delete(v30);
  }
}

uint64_t webrtc::RtpTransceiver::RemoveReceiver(webrtc::RtpTransceiver *this, webrtc::RtpReceiverInterface *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;

  v3 = (_QWORD *)*((_QWORD *)this + 7);
  v4 = (_QWORD *)*((_QWORD *)this + 8);
  if (v3 != v4)
  {
    while ((webrtc::RtpReceiverInterface *)*v3 != a2)
    {
      if (++v3 == v4)
      {
        v3 = (_QWORD *)*((_QWORD *)this + 8);
        break;
      }
    }
  }
  v15 = v3;
  if (v3 == v4)
    return v3 != v4;
  (*(void (**)(_QWORD))(**(_QWORD **)(*v3 + 32) + 160))(*(_QWORD *)(*v3 + 32));
  v5 = *(_QWORD *)(*((_QWORD *)this + 21) + 40);
  v14 = &v15;
  result = (*(uint64_t (**)(uint64_t, _QWORD **, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v5 + 96))(v5, &v14, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::RemoveReceiver(webrtc::RtpReceiverInterface *)::$_1>, &v13);
  v7 = v15;
  v8 = (_QWORD *)*((_QWORD *)this + 8);
  if (v8 != v15)
  {
    v9 = v15 + 1;
    if (v15 + 1 != v8)
    {
      do
      {
        v10 = *(v9 - 1);
        *(v9 - 1) = *v9;
        *v9 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        ++v9;
      }
      while (v9 != v8);
      v8 = (_QWORD *)*((_QWORD *)this + 8);
      v7 = v9 - 1;
    }
    while (v8 != v7)
    {
      v12 = *--v8;
      v11 = v12;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    *((_QWORD *)this + 8) = v7;
    return v3 != v4;
  }
  __break(1u);
  return result;
}

uint64_t (***webrtc::RtpTransceiver::sender_internal@<X0>(webrtc::RtpTransceiver *this@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, _QWORD *a6@<X8>))(_QWORD)
{
  uint64_t v6;
  uint64_t (***result)(_QWORD);
  std::string *v8;

  v6 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) - v6 == 8)
  {
    result = *(uint64_t (****)(_QWORD))(*(_QWORD *)v6 + 24);
    *a6 = result;
    if (result)
      return (uint64_t (***)(_QWORD))(**result)(result);
  }
  else
  {
    v8 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 476, "1u == senders_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a2, a3, a4, a5, 1);
    return (uint64_t (***)(_QWORD))webrtc::RtpTransceiver::media_type((webrtc::RtpTransceiver *)v8);
  }
  return result;
}

uint64_t webrtc::RtpTransceiver::media_type(webrtc::RtpTransceiver *this)
{
  return *((unsigned int *)this + 5);
}

void webrtc::RtpTransceiver::mid(webrtc::RtpTransceiver *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__s.__data_[0] = 0;
  a2[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)this + 128))
  {
    if (*((char *)this + 127) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 15);
    }
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

uint64_t (***webrtc::RtpTransceiver::sender@<X0>(webrtc::RtpTransceiver *this@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, _QWORD *a6@<X8>))(_QWORD)
{
  uint64_t (****v6)(_QWORD);
  uint64_t (***result)(_QWORD);
  std::string *v8;

  v6 = (uint64_t (****)(_QWORD))*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) - (_QWORD)v6 == 8)
  {
    result = *v6;
    *a6 = *v6;
    if (result)
      return (uint64_t (***)(_QWORD))(**result)(result);
  }
  else
  {
    v8 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 503, "1u == senders_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a2, a3, a4, a5, 1);
    return (uint64_t (***)(_QWORD))webrtc::RtpTransceiver::receiver((webrtc::RtpTransceiver *)v8);
  }
  return result;
}

uint64_t (***webrtc::RtpTransceiver::receiver@<X0>(webrtc::RtpTransceiver *this@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, _QWORD *a6@<X8>))(_QWORD)
{
  uint64_t (****v6)(_QWORD);
  uint64_t (***result)(_QWORD);
  std::string *v8;

  v6 = (uint64_t (****)(_QWORD))*((_QWORD *)this + 7);
  if (*((_QWORD *)this + 8) - (_QWORD)v6 == 8)
  {
    result = *v6;
    *a6 = *v6;
    if (result)
      return (uint64_t (***)(_QWORD))(**result)(result);
  }
  else
  {
    v8 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 509, "1u == receivers_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a2, a3, a4, a5, 1);
    return (uint64_t (***)(_QWORD))webrtc::RtpTransceiver::set_current_direction(v8);
  }
  return result;
}

void webrtc::RtpTransceiver::set_current_direction(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string v11;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    std::optional<std::string>::value_or[abi:sn180100]<char const(&)[8]>((std::string *)"<not set>", a1 + 104, &v11);
    rtc::webrtc_logging_impl::Log("\r\t\n\t\t\t\t\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc");
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 88) = a2;
  *(_BYTE *)(a1 + 92) = 1;
  if (a2 <= 1)
    *(_BYTE *)(a1 + 154) = 1;
}

uint64_t webrtc::RtpTransceiver::stopped(webrtc::RtpTransceiver *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t webrtc::RtpTransceiver::stopping(webrtc::RtpTransceiver *this)
{
  return *((unsigned __int8 *)this + 81);
}

uint64_t webrtc::RtpTransceiver::direction(webrtc::RtpTransceiver *this)
{
  if (*((_BYTE *)this + 16)
    && ((*(uint64_t (**)(webrtc::RtpTransceiver *))(*(_QWORD *)this + 72))(this) & 1) != 0)
  {
    return 4;
  }
  else
  {
    return *((unsigned int *)this + 21);
  }
}

char *webrtc::RtpTransceiver::SetDirectionWithError@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  webrtc::RtpTransceiver *v21;

  v4 = result;
  if (result[16])
  {
    result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 72))(result);
    if ((_DWORD)result)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc");
      *(_DWORD *)a3 = 6;
      result = (char *)operator new(0x30uLL);
      *(_QWORD *)(a3 + 8) = result;
      *(_OWORD *)(a3 + 16) = xmmword_208F0B3B0;
      if (result > "Cannot set direction on a stopping transceiver."
        || result + 47 <= "Cannot set direction on a stopping transceiver.")
      {
        strcpy(result, "Cannot set direction on a stopping transceiver.");
LABEL_15:
        *(_DWORD *)(a3 + 32) = 0;
        *(_BYTE *)(a3 + 36) = 0;
        *(_BYTE *)(a3 + 38) = 0;
        return result;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
  }
  if (*((_DWORD *)v4 + 21) == a2)
  {
LABEL_18:
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 38) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 29) = 0;
    return result;
  }
  if (a2 == 4)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc");
    *(_DWORD *)a3 = 3;
    result = (char *)operator new(0x28uLL);
    *(_QWORD *)(a3 + 8) = result;
    *(_OWORD *)(a3 + 16) = xmmword_208F097B0;
    if (result > "The set direction 'stopped' is invalid." || result + 39 <= "The set direction 'stopped' is invalid.")
    {
      strcpy(result, "The set direction 'stopped' is invalid.");
      goto LABEL_15;
    }
    goto LABEL_19;
  }
  *((_DWORD *)v4 + 21) = a2;
  v20 = *((_QWORD *)v4 + 34);
  if (v20)
  {
    result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
    goto LABEL_18;
  }
LABEL_20:
  v21 = (webrtc::RtpTransceiver *)std::__throw_bad_function_call[abi:sn180100]();
  return (char *)webrtc::RtpTransceiver::current_direction(v21);
}

uint64_t webrtc::RtpTransceiver::current_direction(webrtc::RtpTransceiver *this)
{
  if (*((_BYTE *)this + 16)
    && ((*(uint64_t (**)(webrtc::RtpTransceiver *))(*(_QWORD *)this + 64))(this) & 1) != 0)
  {
    return 0x100000004;
  }
  else
  {
    return *((_QWORD *)this + 11);
  }
}

uint64_t webrtc::RtpTransceiver::fired_direction(webrtc::RtpTransceiver *this)
{
  return *((_QWORD *)this + 12);
}

char *webrtc::RtpTransceiver::StopStandard@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  webrtc::RtpTransceiver *v20;
  _QWORD v21[2];
  char v22;

  v2 = this;
  if (!this[16])
  {
    v11 = *(uint64_t (**)(void))(*(_QWORD *)this + 128);
LABEL_9:
    this = (char *)v11();
    goto LABEL_11;
  }
  if (this[82])
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v21[0] = "INVALID_STATE";
      v21[1] = 13;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc");
    }
    *(_DWORD *)a2 = 6;
    this = (char *)operator new(0x20uLL);
    *(_QWORD *)(a2 + 8) = this;
    *(_OWORD *)(a2 + 16) = xmmword_208F05150;
    if (this > "PeerConnection is closed." || this + 25 <= "PeerConnection is closed.")
    {
      strcpy(this, "PeerConnection is closed.");
      *(_DWORD *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 36) = 0;
      *(_BYTE *)(a2 + 38) = 0;
      return this;
    }
    __break(1u);
    goto LABEL_19;
  }
  if (this[81])
  {
LABEL_11:
    *(_DWORD *)a2 = 0;
    *(_BYTE *)(a2 + 38) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 29) = 0;
    return this;
  }
  v12 = (uint64_t *)*((_QWORD *)this + 4);
  v13 = (uint64_t *)*((_QWORD *)this + 5);
  while (v12 != v13)
  {
    v14 = *v12++;
    (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 24) + 224))(*(_QWORD *)(v14 + 24));
  }
  v15 = (uint64_t *)*((_QWORD *)v2 + 7);
  v16 = (uint64_t *)*((_QWORD *)v2 + 8);
  while (v15 != v16)
  {
    v17 = *v15++;
    (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 32) + 160))(*(_QWORD *)(v17 + 32));
  }
  v18 = *(_QWORD *)(*((_QWORD *)v2 + 21) + 40);
  v21[0] = v2;
  (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v18 + 96))(v18, v21, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::StopSendingAndReceiving(void)::$_1>, &v22);
  v2[81] = 1;
  *((_DWORD *)v2 + 21) = 3;
  v19 = *((_QWORD *)v2 + 34);
  if (v19)
  {
    v11 = *(uint64_t (**)(void))(*(_QWORD *)v19 + 48);
    goto LABEL_9;
  }
LABEL_19:
  v20 = (webrtc::RtpTransceiver *)std::__throw_bad_function_call[abi:sn180100]();
  return (char *)webrtc::RtpTransceiver::StopInternal(v20);
}

uint64_t webrtc::RtpTransceiver::StopTransceiverProcedure(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *i;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v1 = this;
  if (!*(_BYTE *)(this + 81))
  {
    v2 = *(uint64_t **)(this + 32);
    v3 = *(uint64_t **)(this + 40);
    while (v2 != v3)
    {
      v4 = *v2++;
      (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 24) + 224))(*(_QWORD *)(v4 + 24));
    }
    v5 = *(uint64_t **)(v1 + 56);
    v6 = *(uint64_t **)(v1 + 64);
    while (v5 != v6)
    {
      v7 = *v5++;
      (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 32) + 160))(*(_QWORD *)(v7 + 32));
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 168) + 40);
    v13 = v1;
    this = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v8 + 96))(v8, &v13, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::StopSendingAndReceiving(void)::$_1>, &v12);
    *(_BYTE *)(v1 + 81) = 1;
    *(_DWORD *)(v1 + 84) = 3;
  }
  *(_BYTE *)(v1 + 80) = 1;
  v9 = *(uint64_t **)(v1 + 32);
  for (i = *(uint64_t **)(v1 + 40);
        v9 != i;
        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 288))(*(_QWORD *)(v11 + 24)))
  {
    v11 = *v9++;
  }
  if (*(_BYTE *)(v1 + 92))
    *(_BYTE *)(v1 + 92) = 0;
  return this;
}

void webrtc::RtpTransceiver::SetCodecPreferences(webrtc::RtpCodec *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  webrtc::RtpCodec *v6;
  webrtc::RtpCodec *v7;
  webrtc::RtpCodec *v8;
  webrtc::RtpCodec *v9;
  webrtc::RtpCodec *v10;
  int v11;
  BOOL v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  webrtc::RtpCodec *v24;
  webrtc::RtpCodec *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  void **v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  const cricket::Codec **v35;
  webrtc::RtpCodec *v36;
  webrtc::RtpCodec *v37;
  int64_t v38;
  char *v39;
  uint64_t v40;
  webrtc::RtpCodec *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  const char *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void (***v55)(_QWORD, webrtc::RtpCodec *);
  void (***v56)(_QWORD, webrtc::RtpCodec *);
  void (***v57)(_QWORD, webrtc::RtpCodec *);
  void (***v58)(_QWORD, webrtc::RtpCodec *);
  void (**v59)(_QWORD, webrtc::RtpCodec *);
  uint64_t v60;
  char *v61;
  void *v62;
  char *v63;
  void (***v64)(char *);
  void (**v65)(char *);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int v75;
  uint64_t v76;
  char *v77;
  char *v78;
  void **v79;
  unint64_t v80;
  BOOL v81;
  char *v82;
  uint64_t v83;
  unsigned __int16 *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int v88;
  uint64_t v89;
  const std::string::value_type *v90;
  size_t v91;
  __int128 v92;
  int v93;
  uint64_t v94;
  unsigned __int16 *v95;
  uint64_t v96;
  const char *v97;
  char *v98;
  char *v99;
  int v100;
  std::string *v101;
  char v102;
  __int128 v103;
  int64_t v104;
  char *v105;
  char *v106;
  const std::string::value_type *v107;
  size_t v108;
  char *v109;
  std::string *v110;
  char **v111;
  char v112;
  char *v113;
  char *v114;
  void (**v115)(char *);
  char *v116;
  unsigned __int16 *v117;
  uint64_t v118;
  int v119;
  int v120;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  size_t v141;
  BOOL v142;
  std::string::size_type v143;
  uint64_t v144;
  size_t v145;
  char *v146;
  char *v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  std::string::size_type v152;
  char *v153;
  size_t v154;
  BOOL v155;
  std::string::size_type v156;
  uint64_t v157;
  size_t v158;
  char *v159;
  char *v160;
  unint64_t v161;
  char *v162;
  std::string::size_type v163;
  char *v164;
  std::string::size_type v165;
  char v166;
  std::string *p_src;
  size_t size;
  void **v169;
  std::string *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  void (***v174)(char *);
  void (**v175)(char *);
  char *v176;
  void *v177;
  char *v178;
  void (***v179)(char *);
  void (**v180)(char *);
  webrtc::RtpCodec *v181;
  webrtc::RtpCodec *v182;
  webrtc::RtpCodec *v183;
  void (***v184)(char *);
  void (**v185)(char *);
  void **v186;
  uint64_t v187;
  _OWORD v189[2];
  void *v190[6];
  void *__p[2];
  void *v192;
  webrtc::RtpCodec *v193;
  webrtc::RtpCodec *v194;
  unint64_t v195;
  std::string v196;
  std::string __src;

  if (!a3)
  {
    v56 = *(void (****)(_QWORD, webrtc::RtpCodec *))(a2 + 176);
    v55 = *(void (****)(_QWORD, webrtc::RtpCodec *))(a2 + 184);
    if (v55 != v56)
    {
      v57 = v55 - 20;
      v58 = v55 - 20;
      do
      {
        v59 = *v58;
        v58 -= 20;
        (*v59)(v57, a1);
        v12 = v57 == v56;
        v57 = v58;
      }
      while (!v12);
    }
    *(_QWORD *)(a2 + 184) = v56;
    *(_DWORD *)a4 = 0;
    *(_BYTE *)(a4 + 38) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 29) = 0;
    return;
  }
  v6 = a1;
  v193 = 0;
  v194 = 0;
  v195 = 0;
  v7 = (webrtc::RtpCodec *)((char *)a1 + 160 * a3);
  while (2)
  {
    v9 = v193;
    v10 = v194;
    if (v193 == v194)
      goto LABEL_35;
    do
    {
      if (!webrtc::RtpCodec::operator==((uint64_t)v9, (uint64_t)v6))
        goto LABEL_8;
      v11 = *((unsigned __int8 *)v6 + 108);
      if (*((_BYTE *)v9 + 108))
        v12 = v11 == 0;
      else
        v12 = 1;
      if (v12)
      {
        if ((*((_BYTE *)v9 + 108) != 0) != (v11 != 0))
          goto LABEL_8;
      }
      else if (*((_DWORD *)v9 + 26) != *((_DWORD *)v6 + 26))
      {
        goto LABEL_8;
      }
      v13 = (unsigned __int8 *)*((_QWORD *)v9 + 15);
      v14 = *((_QWORD *)v9 + 14);
      if ((v14 & 1) == 0)
        v13 = (unsigned __int8 *)v9 + 120;
      v16 = *((_QWORD *)v6 + 14);
      v15 = (unsigned __int8 *)*((_QWORD *)v6 + 15);
      if ((v16 & 1) == 0)
        v15 = (unsigned __int8 *)v6 + 120;
      v17 = v14 >> 1;
      v18 = v16 >> 1;
      if (v14 >> 1 == v16 >> 1)
      {
        if (v14 < 2 || v16 < 2)
        {
          v22 = v15;
          v21 = v13;
LABEL_31:
          if (v21 == &v13[v17] && v22 == &v15[v18])
            goto LABEL_35;
        }
        else
        {
          v19 = v17 - 1;
          v20 = v18 - 1;
          v21 = v13;
          v22 = v15;
          while (*v21 == *v22)
          {
            ++v21;
            ++v22;
            if (v19)
            {
              --v19;
              if (v20--)
                continue;
            }
            goto LABEL_31;
          }
        }
      }
LABEL_8:
      v9 = (webrtc::RtpCodec *)((char *)v9 + 160);
    }
    while (v9 != v10);
    v9 = v10;
LABEL_35:
    if (v9 != v10)
      goto LABEL_5;
    v24 = v194;
    if ((unint64_t)v194 >= v195)
    {
      v8 = (webrtc::RtpCodec *)std::vector<webrtc::RtpCodecCapability>::__push_back_slow_path<webrtc::RtpCodecCapability const&>((void **)&v193, (uint64_t)v6);
      goto LABEL_4;
    }
    if (!v194)
      goto LABEL_307;
    v25 = webrtc::RtpCodec::RtpCodec(v194, v6);
    *(_QWORD *)v24 = off_24C0BCC10;
    v26 = *((_QWORD *)v6 + 13);
    *((_QWORD *)v25 + 14) = 0;
    v27 = (unint64_t *)((char *)v25 + 112);
    *(v27 - 1) = v26;
    v28 = *((_QWORD *)v6 + 14);
    if (v28 >= 2)
    {
      if ((v28 & 1) == 0)
      {
        *((_QWORD *)v24 + 14) = v28;
        v29 = *(_OWORD *)((char *)v6 + 120);
        v30 = *(_OWORD *)((char *)v6 + 136);
        *((_QWORD *)v24 + 19) = *((_QWORD *)v6 + 19);
        *(_OWORD *)((char *)v24 + 136) = v30;
        *(_OWORD *)((char *)v24 + 120) = v29;
        v8 = (webrtc::RtpCodec *)((char *)v24 + 160);
        goto LABEL_4;
      }
      absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(v27, (unint64_t *)v6 + 14);
    }
    v8 = (webrtc::RtpCodec *)((char *)v24 + 160);
LABEL_4:
    v194 = v8;
LABEL_5:
    v6 = (webrtc::RtpCodec *)((char *)v6 + 160);
    if (v6 != v7)
      continue;
    break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v31 = (void **)(a4 + 8);
  *(_BYTE *)(a4 + 38) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 29) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v192 = 0;
  v32 = a2;
  v33 = *(_DWORD *)(a2 + 20);
  if (v33 == 1)
  {
    v60 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 168) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(a2 + 168) + 96));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v60 + 64))(v190, v60, *(unsigned __int8 *)(*(_QWORD *)(a2 + 168) + 232));
    v61 = (char *)__p[0];
    if (__p[0])
    {
      v62 = __p[0];
      if (__p[1] != __p[0])
      {
        v63 = (char *)__p[1] - 216;
        v64 = (void (***)(char *))((char *)__p[1] - 216);
        do
        {
          v65 = *v64;
          v64 -= 27;
          (*v65)(v63);
          v12 = v63 == v61;
          v63 = (char *)v64;
        }
        while (!v12);
        v62 = __p[0];
        v32 = a2;
      }
      __p[1] = v61;
      operator delete(v62);
    }
    *(_OWORD *)__p = *(_OWORD *)v190;
    v192 = v190[2];
    v36 = v193;
    v37 = v194;
    v38 = v194 - v193;
    if (v194 == v193)
      goto LABEL_83;
LABEL_48:
    if (0xCCCCCCCCCCCCCCCDLL * (v38 >> 5) >= 0x19999999999999ALL)
LABEL_308:
      abort();
    *(_QWORD *)&v189[0] = *(_QWORD *)(*(_QWORD *)(v32 + 168) + 64);
    v39 = (char *)operator new(v38);
    v40 = 0;
    do
    {
      v41 = webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v39[v40], (webrtc::RtpCodec *)((char *)v36 + v40));
      *(_QWORD *)v41 = off_24C0BCC10;
      v42 = *(_QWORD *)((char *)v36 + v40 + 104);
      *((_QWORD *)v41 + 14) = 0;
      v43 = (unint64_t *)((char *)v41 + 112);
      *(v43 - 1) = v42;
      v44 = *(_QWORD *)((char *)v36 + v40 + 112);
      if (v44 >= 2)
      {
        if ((v44 & 1) != 0)
        {
          absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(v43, (unint64_t *)((char *)v36 + v40 + 112));
        }
        else
        {
          *v43 = v44;
          v45 = &v39[v40];
          v46 = *(_OWORD *)((char *)v36 + v40 + 120);
          v47 = *(_OWORD *)((char *)v36 + v40 + 136);
          *((_QWORD *)v45 + 19) = *(_QWORD *)((char *)v36 + v40 + 152);
          *(_OWORD *)(v45 + 136) = v47;
          *(_OWORD *)(v45 + 120) = v46;
        }
      }
      v40 += 160;
    }
    while ((webrtc::RtpCodec *)((char *)v36 + v40) != v37);
    v187 = a4;
    v48 = &v39[v40];
    if (!v40)
    {
LABEL_175:
      v66 = v48;
      v32 = a2;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        goto LABEL_84;
      goto LABEL_85;
    }
    v49 = "CN";
    v50 = (uint64_t)v39;
    while (1)
    {
      if (!webrtc::RtpCodec::IsResiliencyCodec(v50))
      {
        v51 = (unsigned __int16 *)(v50 + 8);
        if (*(char *)(v50 + 31) < 0)
        {
          v52 = *(_QWORD *)(v50 + 16);
          if (v52 < 0)
            goto LABEL_307;
          v51 = *(unsigned __int16 **)v51;
          if (v52)
          {
            if (!v51)
              goto LABEL_307;
          }
        }
        else
        {
          v52 = *(unsigned __int8 *)(v50 + 31);
        }
        if (v52 != 2 || *v51 != *(unsigned __int16 *)"CN")
        {
          v54 = (char *)__p[0];
          v53 = (char *)__p[1];
          if (__p[0] != __p[1])
            break;
        }
      }
LABEL_57:
      v50 += 160;
      if ((char *)v50 == v48)
        goto LABEL_175;
    }
    while ((cricket::Codec::MatchesRtpCodec((uint64_t)v54, v50) & 1) == 0)
    {
      v54 += 216;
      if (v54 == v53)
        goto LABEL_57;
    }
    v186 = (void **)(a4 + 8);
    v66 = v48;
    v76 = (uint64_t)v39;
    *(_QWORD *)&v189[1] = v48;
    v78 = (char *)__p[0];
    v77 = (char *)__p[1];
    if (__p[0] != __p[1])
      goto LABEL_94;
LABEL_96:
    (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)&v189[0] + 16))(v190, *(_QWORD *)&v189[0], "WebRTC-SetCodecPreferences-ReceiveOnlyFilterInsteadOfThrow", 58);
    if (SHIBYTE(v190[2]) < 0)
    {
      v80 = (unint64_t)v190[1];
      if (((unint64_t)v190[1] & 0x8000000000000000) != 0)
        goto LABEL_307;
      v79 = (void **)v190[0];
      if (v190[1])
      {
        if (!v190[0])
          goto LABEL_307;
      }
    }
    else
    {
      v79 = v190;
      v80 = HIBYTE(v190[2]);
    }
    if (v80 >= 8)
    {
      v81 = *v79 == (void *)0x64656C6261736944;
      if ((HIBYTE(v190[2]) & 0x80) == 0)
        goto LABEL_106;
    }
    else
    {
      v81 = 0;
      if ((HIBYTE(v190[2]) & 0x80) == 0)
        goto LABEL_106;
    }
    operator delete(v190[0]);
LABEL_106:
    if (v81)
    {
      v82 = v39;
      if (v39 == v66)
        goto LABEL_155;
      v83 = (uint64_t)v39;
      while (1)
      {
        if (!webrtc::RtpCodec::IsResiliencyCodec(v83))
        {
          v84 = (unsigned __int16 *)(v83 + 8);
          if (*(char *)(v83 + 31) < 0)
          {
            v85 = *(_QWORD *)(v83 + 16);
            if (v85 < 0)
              goto LABEL_307;
            v84 = *(unsigned __int16 **)v84;
            if (v85)
            {
              if (!v84)
                goto LABEL_307;
            }
          }
          else
          {
            v85 = *(unsigned __int8 *)(v83 + 31);
          }
          if (v85 != 2 || *v84 != *(unsigned __int16 *)v49)
          {
            v87 = (char *)__p[0];
            v86 = (char *)__p[1];
            if (__p[0] == __p[1])
              break;
            do
            {
              v88 = cricket::Codec::MatchesRtpCodec((uint64_t)v87, v83);
              if ((v88 & 1) != 0)
                break;
              v87 += 216;
            }
            while (v87 != v86);
            if (!v88)
              break;
          }
        }
        v83 += 160;
        if ((char *)v83 == v66)
        {
          v82 = v66;
          goto LABEL_155;
        }
      }
      v89 = v83 + 160;
      if ((char *)(v83 + 160) == v66)
      {
        v82 = (char *)v83;
LABEL_155:
        if (v66 != v82)
        {
          if (v82 + 160 != v66)
          {
            v104 = v82 - v39;
            v105 = v39 + 248;
            v106 = v39;
            do
            {
              v110 = (std::string *)&v106[v104 + 8];
              v111 = (char **)&v106[v104 + 168];
              v112 = v106[v104 + 191];
              if (v106[v104 + 31] < 0)
              {
                if (v112 >= 0)
                  v107 = &v106[v104 + 168];
                else
                  v107 = *v111;
                if (v112 >= 0)
                  v108 = v106[v104 + 191];
                else
                  v108 = *(_QWORD *)&v106[v104 + 176];
                std::string::__assign_no_alias<false>(v110, v107, v108);
              }
              else if (v106[v104 + 191] < 0)
              {
                std::string::__assign_no_alias<true>(v110, *v111, *(_QWORD *)&v106[v104 + 176]);
              }
              else
              {
                *(_OWORD *)&v110->__r_.__value_.__l.__data_ = *(_OWORD *)v111;
                *(_QWORD *)&v106[v104 + 24] = *(_QWORD *)&v106[v104 + 184];
              }
              v109 = &v106[v104];
              *((_OWORD *)v109 + 2) = *(_OWORD *)&v106[v104 + 192];
              v109[48] = v106[v104 + 208];
              std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>((uint64_t)&v106[v104 + 56], *(uint64_t **)&v106[v104 + 216], *(uint64_t **)&v106[v104 + 224], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v106[v104 + 224] - *(_QWORD *)&v106[v104 + 216]) >> 2));
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)(v109 + 80), *((char **)v109 + 30), &v105[v104]);
              *((_DWORD *)v109 + 26) = *((_DWORD *)v109 + 66);
              v109[108] = v109[268];
              absl::InlinedVector<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::operator=((unint64_t *)v109 + 14, (unint64_t *)v109 + 34);
              v106 += 160;
              v82 = &v106[v104];
              v105 += 160;
            }
            while (&v106[v104 + 160] != v66);
          }
          if (v66 != v82)
          {
            v113 = v66 - 160;
            v114 = v66 - 160;
            do
            {
              v115 = *(void (***)(char *))v114;
              v114 -= 160;
              (*v115)(v113);
              v12 = v113 == v82;
              v113 = v114;
            }
            while (!v12);
            v66 = v82;
          }
          while (1)
          {
            v76 += 160;
            if (v76 == *(_QWORD *)&v189[1])
              break;
            v78 = (char *)__p[0];
            v77 = (char *)__p[1];
            if (__p[0] == __p[1])
              goto LABEL_96;
LABEL_94:
            while ((cricket::Codec::MatchesRtpCodec((uint64_t)v78, v76) & 1) == 0)
            {
              v78 += 216;
              if (v78 == v77)
                goto LABEL_96;
            }
          }
          v31 = v186;
          a4 = v187;
          if (v39 != v66)
          {
            v116 = v39;
            do
            {
              while (webrtc::RtpCodec::IsResiliencyCodec((_BOOL8)v116))
              {
                v116 += 160;
                if (v116 == v66)
                  goto LABEL_197;
              }
              v117 = (unsigned __int16 *)(v116 + 8);
              if (v116[31] < 0)
              {
                v118 = *((_QWORD *)v116 + 2);
                if (v118 < 0)
                  goto LABEL_307;
                v117 = *(unsigned __int16 **)v117;
                if (v118)
                {
                  if (!v117)
                    goto LABEL_307;
                }
              }
              else
              {
                v118 = v116[31];
              }
              if (v118 != 2)
                goto LABEL_193;
              v119 = *v117;
              v120 = *(unsigned __int16 *)v49;
              v116 += 160;
            }
            while (v119 == v120 && v116 != v66);
            if (v119 != v120)
            {
LABEL_193:
              LODWORD(v190[0]) = 0;
              BYTE6(v190[4]) = 0;
              memset(&v190[1], 0, 29);
              goto LABEL_283;
            }
          }
LABEL_197:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            v190[0] = "INVALID_MODIFICATION";
            v190[1] = (void *)20;
            rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v124, v125, v126, v127, v128, v129, v130, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc");
          }
          LODWORD(v190[0]) = 7;
          v131 = (char *)operator new(0x50uLL);
          v190[1] = v131;
          *(_OWORD *)&v190[2] = xmmword_208F0ABE0;
          if (v131 > "Invalid codec preferences: codec list must have a non RTX, RED or FEC entry."
            || v131 + 76 <= "Invalid codec preferences: codec list must have a non RTX, RED or FEC entry.")
          {
            strcpy(v131, "Invalid codec preferences: codec list must have a non RTX, RED or FEC entry.");
            LODWORD(v190[4]) = 0;
            BYTE4(v190[4]) = 0;
            BYTE6(v190[4]) = 0;
            goto LABEL_283;
          }
        }
        goto LABEL_307;
      }
      v82 = (char *)v83;
      while (1)
      {
        v94 = v83;
        v83 = v89;
        if (webrtc::RtpCodec::IsResiliencyCodec(v89))
          break;
        v95 = (unsigned __int16 *)(v83 + 8);
        if (*(char *)(v83 + 31) < 0)
        {
          v96 = *(_QWORD *)(v83 + 16);
          if (v96 < 0)
            goto LABEL_307;
          v95 = *(unsigned __int16 **)v95;
          if (v96)
          {
            if (!v95)
              goto LABEL_307;
          }
        }
        else
        {
          v96 = *(unsigned __int8 *)(v83 + 31);
        }
        if (v96 == 2 && *v95 == *(unsigned __int16 *)v49)
          break;
        v97 = v49;
        v98 = (char *)__p[0];
        v99 = (char *)__p[1];
        if (__p[0] == __p[1])
        {
          v49 = v97;
        }
        else
        {
          do
          {
            v100 = cricket::Codec::MatchesRtpCodec((uint64_t)v98, v83);
            if ((v100 & 1) != 0)
              break;
            v98 += 216;
          }
          while (v98 != v99);
          v49 = v97;
          if (v100)
            break;
        }
LABEL_135:
        v89 = v83 + 160;
        if ((char *)(v83 + 160) == v66)
          goto LABEL_155;
      }
      if (v82 != (char *)v83)
      {
        v101 = (std::string *)(v82 + 8);
        v102 = *(_BYTE *)(v94 + 191);
        if (v82[31] < 0)
        {
          if (v102 >= 0)
            v90 = (const std::string::value_type *)(v94 + 168);
          else
            v90 = *(const std::string::value_type **)(v94 + 168);
          if (v102 >= 0)
            v91 = *(unsigned __int8 *)(v94 + 191);
          else
            v91 = *(_QWORD *)(v94 + 176);
          std::string::__assign_no_alias<false>(v101, v90, v91);
        }
        else if ((*(_BYTE *)(v94 + 191) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v101, *(char **)(v94 + 168), *(_QWORD *)(v94 + 176));
        }
        else
        {
          v103 = *(_OWORD *)(v94 + 168);
          *((_QWORD *)v82 + 3) = *(_QWORD *)(v94 + 184);
          *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v103;
        }
        v92 = *(_OWORD *)(v94 + 192);
        v82[48] = *(_BYTE *)(v94 + 208);
        *((_OWORD *)v82 + 2) = v92;
        std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>((uint64_t)(v82 + 56), *(uint64_t **)(v94 + 216), *(uint64_t **)(v94 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v94 + 224) - *(_QWORD *)(v94 + 216)) >> 2));
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)(v82 + 80), *(char **)(v94 + 240), (char *)(v94 + 248));
      }
      v93 = *(_DWORD *)(v94 + 264);
      v82[108] = *(_BYTE *)(v94 + 268);
      *((_DWORD *)v82 + 26) = v93;
      absl::InlinedVector<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::operator=((unint64_t *)v82 + 14, (unint64_t *)(v94 + 272));
      v82 += 160;
      goto LABEL_135;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    {
      a4 = v187;
      v122 = (char *)operator new(0x38uLL);
      v123 = v122 + 52;
      if (v122 > "Invalid codec preferences: invalid codec with name \"")
        goto LABEL_235;
      goto LABEL_234;
    }
    v138 = (char *)operator new(0x38uLL);
    v139 = v138 + 52;
    a4 = v187;
    if (v138 <= "Invalid codec preferences: invalid codec with name \""
      && v139 > "Invalid codec preferences: invalid codec with name \"")
    {
      goto LABEL_307;
    }
    strcpy(v138, "Invalid codec preferences: invalid codec with name \"");
    if (*(char *)(v76 + 31) < 0)
    {
      v140 = *(char **)(v76 + 8);
      v141 = *(_QWORD *)(v76 + 16);
      v142 = v141 == 0;
      if (!v140 && v141)
        goto LABEL_307;
    }
    else
    {
      v140 = (char *)(v76 + 8);
      v141 = *(unsigned __int8 *)(v76 + 31);
      v142 = *(_BYTE *)(v76 + 31) == 0;
    }
    if (v141 <= 3)
    {
      if (v142)
      {
        v143 = 52;
        v148 = 0x8000000000000038;
        goto LABEL_223;
      }
      if (v139 <= v140 && &v139[v141] > v140)
        goto LABEL_307;
      memmove(v139, v140, v141);
      v143 = v141 + 52;
      v149 = &v138[v141 + 52];
      v148 = 0x8000000000000038;
    }
    else
    {
      qmemcpy(v189, "eferences: invalInvalid codec pr", sizeof(v189));
      if (v141 - 0x7FFFFFFFFFFFFFC3 < 0x8000000000000040)
        goto LABEL_308;
      v143 = v141 + 52;
      v144 = 110;
      if (v141 + 52 > 0x6E)
        v144 = v141 + 52;
      v145 = (v144 | 7) + 1;
      v146 = (char *)operator new(v145);
      v147 = v146 + 52;
      if (v138 >= v146 && v147 > v138)
        goto LABEL_307;
      *((_DWORD *)v146 + 12) = 572548461;
      *(_OWORD *)v146 = v189[1];
      *((_OWORD *)v146 + 1) = v189[0];
      *((_OWORD *)v146 + 2) = *(_OWORD *)"id codec with name \"";
      if (v147 <= v140 && &v147[v141] > v140)
        goto LABEL_307;
      memcpy(v147, v140, v141);
      operator delete(v138);
      v148 = v145 | 0x8000000000000000;
      v149 = &v146[v143];
      v138 = v146;
      a4 = v187;
    }
    *v149 = 0;
LABEL_223:
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
    __src.__r_.__value_.__l.__size_ = v143;
    __src.__r_.__value_.__r.__words[2] = v148;
    v150 = (v148 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v150 - v143 >= 2)
    {
      v151 = &v138[v143];
      if (&v138[v143] <= "\"." && v151 + 2 > "\".")
        goto LABEL_307;
      *(_WORD *)v151 = 11810;
      v152 = v143 + 2;
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        __src.__r_.__value_.__l.__size_ = v143 + 2;
      else
        *((_BYTE *)&__src.__r_.__value_.__s + 23) = v152 & 0x7F;
      v138[v152] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&__src, v150, v143 - v150 + 2, v143, v143, 0, 2uLL, "\".");
    }
    *(std::string *)v190 = __src;
    memset(&__src, 0, sizeof(__src));
    v196.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_MODIFICATION";
    v196.__r_.__value_.__l.__size_ = 20;
    rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v150, v132, v133, v134, v135, v136, v137, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc");
    if (SHIBYTE(v190[2]) < 0)
    {
      operator delete(v190[0]);
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_233:
        v122 = (char *)operator new(0x38uLL);
        v123 = v122 + 52;
        if (v122 > "Invalid codec preferences: invalid codec with name \"")
          goto LABEL_235;
LABEL_234:
        if (v123 > "Invalid codec preferences: invalid codec with name \"")
          goto LABEL_307;
LABEL_235:
        strcpy(v122, "Invalid codec preferences: invalid codec with name \"");
        if (*(char *)(v76 + 31) < 0)
        {
          v153 = *(char **)(v76 + 8);
          v154 = *(_QWORD *)(v76 + 16);
          v155 = v154 == 0;
          if (!v153 && v154)
            goto LABEL_307;
        }
        else
        {
          v153 = (char *)(v76 + 8);
          v154 = *(unsigned __int8 *)(v76 + 31);
          v155 = *(_BYTE *)(v76 + 31) == 0;
        }
        if (v154 <= 3)
        {
          if (v155)
          {
            v156 = 52;
            v161 = 0x8000000000000038;
LABEL_254:
            v31 = v186;
            v196.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
            v196.__r_.__value_.__l.__size_ = v156;
            v196.__r_.__value_.__r.__words[2] = v161;
            v163 = (v161 & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (v163 - v156 >= 2)
            {
              v164 = &v122[v156];
              if (&v122[v156] <= "\"." && v164 + 2 > "\".")
                goto LABEL_307;
              *(_WORD *)v164 = 11810;
              v165 = v156 + 2;
              if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
                v196.__r_.__value_.__l.__size_ = v156 + 2;
              else
                *((_BYTE *)&v196.__r_.__value_.__s + 23) = v165 & 0x7F;
              v122[v165] = 0;
            }
            else
            {
              std::string::__grow_by_and_replace(&v196, v163, v156 - v163 + 2, v156, v156, 0, 2uLL, "\".");
            }
            __src = v196;
            memset(&v196, 0, sizeof(v196));
            v166 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            {
              size = __src.__r_.__value_.__l.__size_;
              if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                goto LABEL_307;
              p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
              if (__src.__r_.__value_.__l.__size_)
              {
                if (!__src.__r_.__value_.__r.__words[0])
                  goto LABEL_307;
              }
              LODWORD(v190[0]) = 7;
              if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_308;
            }
            else
            {
              LODWORD(v190[0]) = 7;
              p_src = &__src;
              size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
            }
            if (size > 0x16)
            {
              v171 = (size & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((size | 7) != 0x17)
                v171 = size | 7;
              v172 = v171 + 1;
              v169 = (void **)operator new(v171 + 1);
              v190[2] = (void *)size;
              v190[3] = (void *)(v172 | 0x8000000000000000);
              v190[1] = v169;
              v170 = (std::string *)((char *)v169 + size);
              if (v169 > (void **)p_src)
                goto LABEL_278;
            }
            else
            {
              v169 = &v190[1];
              HIBYTE(v190[3]) = size;
              v170 = (std::string *)((char *)&v190[1] + size);
              if (&v190[1] > (void **)p_src)
                goto LABEL_278;
            }
            if (v170 <= p_src)
            {
LABEL_278:
              if (size)
                memmove(v169, p_src, size);
              v170->__r_.__value_.__s.__data_[0] = 0;
              LODWORD(v190[4]) = 0;
              BYTE4(v190[4]) = 0;
              BYTE6(v190[4]) = 0;
              if (v166 < 0)
              {
                operator delete(__src.__r_.__value_.__l.__data_);
                if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v196.__r_.__value_.__l.__data_);
              }
              goto LABEL_283;
            }
LABEL_307:
            __break(1u);
            goto LABEL_308;
          }
          if (v123 <= v153 && &v123[v154] > v153)
            goto LABEL_307;
          memmove(v123, v153, v154);
          v156 = v154 + 52;
          v162 = &v122[v154 + 52];
          v161 = 0x8000000000000038;
        }
        else
        {
          qmemcpy(v189, "eferences: invalInvalid codec pr", sizeof(v189));
          if (v154 - 0x7FFFFFFFFFFFFFC3 < 0x8000000000000040)
            goto LABEL_308;
          v156 = v154 + 52;
          v157 = 110;
          if (v154 + 52 > 0x6E)
            v157 = v154 + 52;
          v158 = (v157 | 7) + 1;
          v159 = (char *)operator new(v158);
          v160 = v159 + 52;
          if (v122 >= v159 && v160 > v122)
            goto LABEL_307;
          *((_DWORD *)v159 + 12) = 572548461;
          *(_OWORD *)v159 = v189[1];
          *((_OWORD *)v159 + 1) = v189[0];
          *((_OWORD *)v159 + 2) = *(_OWORD *)"id codec with name \"";
          if (v160 <= v153 && &v160[v154] > v153)
            goto LABEL_307;
          memcpy(v160, v153, v154);
          operator delete(v122);
          v161 = v158 | 0x8000000000000000;
          v162 = &v159[v156];
          v122 = v159;
        }
        *v162 = 0;
        goto LABEL_254;
      }
    }
    else if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_233;
    }
    operator delete(__src.__r_.__value_.__l.__data_);
    v122 = (char *)operator new(0x38uLL);
    v123 = v122 + 52;
    if (v122 > "Invalid codec preferences: invalid codec with name \"")
      goto LABEL_235;
    goto LABEL_234;
  }
  if (!v33)
  {
    v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 168) + 96) + 24))(*(_QWORD *)(*(_QWORD *)(a2 + 168) + 96));
    v35 = (const cricket::Codec **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 64))(v34);
    if (__p != (void **)v35)
      std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)__p, *v35, v35[1], 0x84BDA12F684BDA13 * ((v35[1] - *v35) >> 3));
  }
  v36 = v193;
  v37 = v194;
  v38 = v194 - v193;
  if (v194 != v193)
    goto LABEL_48;
LABEL_83:
  v39 = 0;
  v66 = 0;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
LABEL_84:
    v190[0] = "INVALID_MODIFICATION";
    v190[1] = (void *)20;
    rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v67, v68, v69, v70, v71, v72, v73, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc");
  }
LABEL_85:
  LODWORD(v190[0]) = 7;
  v74 = (char *)operator new(0x48uLL);
  v190[1] = v74;
  *(_OWORD *)&v190[2] = xmmword_208F1AB80;
  if (v74 <= "Invalid codec preferences: Missing codec from recv codec capabilities."
    && v74 + 70 > "Invalid codec preferences: Missing codec from recv codec capabilities.")
  {
    goto LABEL_307;
  }
  strcpy(v74, "Invalid codec preferences: Missing codec from recv codec capabilities.");
  LODWORD(v190[4]) = 0;
  BYTE4(v190[4]) = 0;
  BYTE6(v190[4]) = 0;
  if (!v39)
  {
    v75 = 7;
    *(_DWORD *)a4 = 7;
    if (*(char *)(a4 + 31) < 0)
      goto LABEL_288;
    goto LABEL_289;
  }
LABEL_283:
  if (v66 != v39)
  {
    v173 = v66 - 160;
    v174 = (void (***)(char *))(v66 - 160);
    do
    {
      v175 = *v174;
      v174 -= 20;
      (*v175)(v173);
      v12 = v173 == v39;
      v173 = (char *)v174;
    }
    while (!v12);
  }
  operator delete(v39);
  v75 = (int)v190[0];
  v32 = a2;
  *(_DWORD *)a4 = v190[0];
  if (*(char *)(a4 + 31) < 0)
LABEL_288:
    operator delete(*v31);
LABEL_289:
  *(_OWORD *)v31 = *(_OWORD *)&v190[1];
  v31[2] = v190[3];
  *(_DWORD *)(a4 + 32) = v190[4];
  *(_DWORD *)(a4 + 35) = *(_DWORD *)((char *)&v190[4] + 3);
  if (!v75 && (webrtc::RtpCodec **)(v32 + 176) != &v193)
    std::vector<webrtc::RtpCodecCapability>::__assign_with_size[abi:sn180100]<webrtc::RtpCodecCapability*,webrtc::RtpCodecCapability*>((uint64_t *)(v32 + 176), (uint64_t)v193, (uint64_t)v194, 0xCCCCCCCCCCCCCCCDLL * ((v194 - v193) >> 5));
  v176 = (char *)__p[0];
  if (__p[0])
  {
    v177 = __p[0];
    if (__p[1] != __p[0])
    {
      v178 = (char *)__p[1] - 216;
      v179 = (void (***)(char *))((char *)__p[1] - 216);
      do
      {
        v180 = *v179;
        v179 -= 27;
        (*v180)(v178);
        v12 = v178 == v176;
        v178 = (char *)v179;
      }
      while (!v12);
      v177 = __p[0];
    }
    __p[1] = v176;
    operator delete(v177);
  }
  v181 = v193;
  if (v193)
  {
    v182 = v193;
    if (v194 != v193)
    {
      v183 = (webrtc::RtpCodec *)((char *)v194 - 160);
      v184 = (void (***)(char *))((char *)v194 - 160);
      do
      {
        v185 = *v184;
        v184 -= 20;
        (*v185)((char *)v183);
        v12 = v183 == v181;
        v183 = (webrtc::RtpCodec *)v184;
      }
      while (!v12);
      v182 = v193;
    }
    v194 = v181;
    operator delete(v182);
  }
}

void webrtc::RtpTransceiver::GetHeaderExtensionsToNegotiate(webrtc::RtpTransceiver *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 25);
  v3 = *((_QWORD *)this + 26);
  v4 = v3 - v2;
  if (v3 != v2)
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
    if (v6 >= 0x666666666666667)
      abort();
    v7 = (char *)operator new(v4);
    v8 = 0;
    *a2 = v7;
    a2[2] = &v7[40 * v6];
    do
    {
      v9 = (std::string *)&v7[v8];
      v10 = (__int128 *)(v2 + v8);
      if (*(char *)(v2 + v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
      }
      *(_OWORD *)&v7[v8 + 24] = *(_OWORD *)(v2 + v8 + 24);
      v8 += 40;
    }
    while (v2 + v8 != v3);
    a2[1] = &v7[v8];
  }
}

void webrtc::RtpTransceiver::GetNegotiatedHeaderExtensions(const void ***this@<X0>, void **a2@<X8>)
{
  webrtc::RtpTransceiver *i;
  const void **v4;
  const void **v5;
  int64_t v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v26;
  __int128 v27;
  webrtc::RtpTransceiver *v28;
  const void **v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  std::string *v43;
  const std::string::value_type **v44;
  __int128 v45;
  void **v46;
  void *__p[2];
  unint64_t v48;
  __int128 v49;

  i = (webrtc::RtpTransceiver *)this;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = this[25];
  v5 = this[26];
  v6 = (char *)v5 - (char *)v4;
  if (v5 != v4)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
    if (v7 > 0x666666666666666)
      goto LABEL_91;
    v8 = (void **)operator new(v6);
    *a2 = v8;
    a2[1] = v8;
    a2[2] = &v8[5 * v7];
    while (v4 != v5)
    {
      v9 = *((_QWORD *)i + 28);
      v10 = *((_QWORD *)i + 29);
      LODWORD(v11) = *((char *)v4 + 23);
      if (v9 == v10)
      {
LABEL_37:
        if ((v11 & 0x80000000) == 0)
          goto LABEL_38;
      }
      else
      {
        if ((v11 & 0x80000000) == 0)
          v12 = (const void *)*((unsigned __int8 *)v4 + 23);
        else
          v12 = v4[1];
        if ((v11 & 0x80000000) != 0)
        {
          while (1)
          {
            v16 = *(unsigned __int8 *)(v9 + 23);
            if ((v16 & 0x80u) == 0)
              v17 = (const void *)*(unsigned __int8 *)(v9 + 23);
            else
              v17 = *(const void **)(v9 + 8);
            if (v17 == v12)
            {
              v18 = (unsigned __int8 *)*v4;
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v9, v18, *(_QWORD *)(v9 + 8)))
                  goto LABEL_37;
              }
              else
              {
                if (!*(_BYTE *)(v9 + 23))
                  goto LABEL_37;
                v19 = 0;
                while (*(unsigned __int8 *)(v9 + v19) == v18[v19])
                {
                  if (v16 == ++v19)
                    goto LABEL_37;
                }
              }
            }
            v9 += 32;
            if (v9 == v10)
              goto LABEL_39;
          }
        }
        do
        {
          v13 = *(unsigned __int8 *)(v9 + 23);
          if ((v13 & 0x80u) == 0)
            v14 = (const void *)*(unsigned __int8 *)(v9 + 23);
          else
            v14 = *(const void **)(v9 + 8);
          if (v14 == v12)
          {
            if ((v13 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v9, v4, *(_QWORD *)(v9 + 8)))
                goto LABEL_37;
            }
            else
            {
              if (!*(_BYTE *)(v9 + 23))
                goto LABEL_37;
              v15 = 0;
              while (*(unsigned __int8 *)(v9 + v15) == *((unsigned __int8 *)v4 + v15))
              {
                if (v13 == ++v15)
                  goto LABEL_37;
              }
            }
          }
          v9 += 32;
        }
        while (v9 != v10);
LABEL_39:
        v9 = v10;
        if ((v11 & 0x80000000) == 0)
        {
LABEL_38:
          v11 = v11;
          v20 = (char *)v4;
          goto LABEL_44;
        }
      }
      v11 = (size_t)v4[1];
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_90;
      v20 = (char *)*v4;
      if (v11)
      {
        if (!v20)
          goto LABEL_90;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_91;
LABEL_44:
      if (v11 > 0x16)
      {
        v22 = (v11 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v22 = v11 | 7;
        v23 = v22 + 1;
        v21 = (char *)operator new(v22 + 1);
        __p[1] = (void *)v11;
        v48 = v23 | 0x8000000000000000;
        __p[0] = v21;
      }
      else
      {
        HIBYTE(v48) = v11;
        v21 = (char *)__p;
      }
      v24 = &v21[v11];
      if (v21 <= v20 && v24 > v20)
        goto LABEL_90;
      if (v11)
        memmove(v21, v20, v11);
      *v24 = 0;
      LOBYTE(v49) = 0;
      BYTE4(v49) = 0;
      BYTE8(v49) = 0;
      HIDWORD(v49) = 4 * (v9 == v10);
      v26 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v26)
      {
        v28 = i;
        v29 = v5;
        v30 = (char *)*a2;
        v31 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (_BYTE *)*a2) >> 3);
        v32 = v31 + 1;
        if (v31 + 1 > 0x666666666666666)
          goto LABEL_91;
        v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v26 - (_QWORD)v30) >> 3);
        if (2 * v33 > v32)
          v32 = 2 * v33;
        if (v33 >= 0x333333333333333)
          v34 = 0x666666666666666;
        else
          v34 = v32;
        if (!v34)
        {
LABEL_90:
          __break(1u);
LABEL_91:
          abort();
        }
        if (v34 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v35 = 40 * v34;
        v36 = (char *)operator new(40 * v34);
        v37 = v36;
        v38 = &v36[40 * v31];
        if (SHIBYTE(v48) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v36[40 * v31], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)v38 = *(_OWORD *)__p;
          *((_QWORD *)v38 + 2) = v48;
        }
        v39 = &v37[v35];
        *(_OWORD *)&v37[40 * v31 + 24] = v49;
        v40 = v38 + 40;
        if (v8 == (void **)v30)
        {
          *a2 = v38;
          a2[1] = v40;
          a2[2] = v39;
          v5 = v29;
          i = v28;
        }
        else
        {
          v41 = v39;
          v42 = 0;
          do
          {
            v43 = (std::string *)&v38[v42 * 8 - 40];
            v44 = (const std::string::value_type **)&v8[v42 - 5];
            if (*((char *)&v8[v42 - 2] - 1) < 0)
            {
              std::string::__init_copy_ctor_external(v43, *v44, (std::string::size_type)v8[v42 - 4]);
            }
            else
            {
              v45 = *(_OWORD *)v44;
              *(_QWORD *)&v38[v42 * 8 - 24] = v8[v42 - 3];
              *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v45;
            }
            *(_OWORD *)&v38[v42 * 8 - 16] = *(_OWORD *)&v8[v42 - 2];
            v42 -= 5;
          }
          while (&v8[v42] != (void **)v30);
          v8 = (void **)*a2;
          v46 = (void **)a2[1];
          *a2 = &v38[v42 * 8];
          a2[1] = v40;
          a2[2] = v41;
          v5 = v29;
          for (i = v28; v46 != v8; v46 -= 5)
          {
            if (*((char *)v46 - 17) < 0)
              operator delete(*(v46 - 5));
          }
        }
        if (v8)
          operator delete(v8);
        v8 = (void **)(v38 + 40);
        a2[1] = v40;
        if (SHIBYTE(v48) < 0)
LABEL_88:
          operator delete(__p[0]);
      }
      else
      {
        if (!v8)
          goto LABEL_90;
        if (SHIBYTE(v48) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v8, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v27 = *(_OWORD *)__p;
          v8[2] = (void *)v48;
          *(_OWORD *)v8 = v27;
        }
        *(_OWORD *)(v8 + 3) = v49;
        v8 += 5;
        a2[1] = v8;
        if (SHIBYTE(v48) < 0)
          goto LABEL_88;
      }
      v4 += 5;
    }
  }
}

unint64_t webrtc::RtpTransceiver::SetHeaderExtensionsToNegotiate@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 **v10;
  size_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _DWORD *v20;
  int *v21;
  int v22;

  v5 = *(_QWORD *)(result + 200);
  if (a3 == 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(result + 208) - v5) >> 3))
  {
    v6 = a3;
    if (!a3)
    {
LABEL_43:
      *(_DWORD *)a4 = 0;
      *(_BYTE *)(a4 + 38) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 29) = 0;
      return result;
    }
    v8 = 0;
    while (1)
    {
      v9 = (uint64_t *)(a2 + 40 * v8);
      v10 = (unsigned __int8 **)(v5 + 40 * v8);
      v11 = v9[1];
      if (*((char *)v9 + 23) >= 0)
        v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
      else
        v12 = (unsigned __int8 *)v9[1];
      v13 = (unsigned __int8 *)*((unsigned __int8 *)v10 + 23);
      v14 = (char)v13;
      if ((char)v13 < 0)
        v13 = v10[1];
      if (v12 != v13)
        break;
      if (v14 >= 0)
        v15 = (unsigned __int8 *)(v5 + 40 * v8);
      else
        v15 = *v10;
      if ((*((_BYTE *)v9 + 23) & 0x80) != 0)
      {
        v9 = (uint64_t *)*v9;
        result = memcmp(v9, v15, v11);
        if ((_DWORD)result)
          break;
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_44;
        if (v11 && v9 == 0)
          goto LABEL_44;
LABEL_26:
        if (v11 == 35
          && !(*v9 ^ *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:mid" | v9[1] ^ *(_QWORD *)":params:rtp-hdrext:sdes:mid" | v9[2] ^ *(_QWORD *)"rtp-hdrext:sdes:mid" | v9[3] ^ *(_QWORD *)"xt:sdes:mid" | *(uint64_t *)((char *)v9 + 27) ^ *(_QWORD *)"sdes:mid")
          && *(_DWORD *)(a2 + 40 * v8 + 36) != 0)
        {
          *(_DWORD *)a4 = 7;
          result = (unint64_t)operator new(0x30uLL);
          *(_QWORD *)(a4 + 8) = result;
          *(_OWORD *)(a4 + 16) = xmmword_208F086B0;
          if (result > (unint64_t)"Attempted to stop a mandatory extension."
            || result + 40 <= (unint64_t)"Attempted to stop a mandatory extension.")
          {
            strcpy((char *)result, "Attempted to stop a mandatory extension.");
            goto LABEL_40;
          }
          goto LABEL_44;
        }
      }
      else if (*((_BYTE *)v9 + 23))
      {
        v16 = (unsigned __int8 *)(a2 + 40 * v8);
        v17 = *((unsigned __int8 *)v9 + 23);
        while (*v16 == *v15)
        {
          ++v16;
          ++v15;
          if (!--v17)
          {
            v11 = *((unsigned __int8 *)v9 + 23);
            goto LABEL_26;
          }
        }
        break;
      }
      if (++v8 == v6)
      {
        v20 = (_DWORD *)(v5 + 36);
        v21 = (int *)(a2 + 36);
        do
        {
          v22 = *v21;
          v21 += 10;
          *v20 = v22;
          v20 += 10;
          --v6;
        }
        while (v6);
        goto LABEL_43;
      }
    }
    *(_DWORD *)a4 = 7;
    result = (unint64_t)operator new(0x28uLL);
    *(_QWORD *)(a4 + 8) = result;
    *(_OWORD *)(a4 + 16) = xmmword_208F086E0;
    if (result > (unint64_t)"Reordering extensions is not allowed."
      || result + 37 <= (unint64_t)"Reordering extensions is not allowed.")
    {
      strcpy((char *)result, "Reordering extensions is not allowed.");
      goto LABEL_40;
    }
    goto LABEL_44;
  }
  *(_DWORD *)a4 = 7;
  result = (unint64_t)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = result;
  *(_OWORD *)(a4 + 16) = xmmword_208F0B3B0;
  if (result <= (unint64_t)"Size of extensions to negotiate does not match."
    && result + 47 > (unint64_t)"Size of extensions to negotiate does not match.")
  {
LABEL_44:
    __break(1u);
    return result;
  }
  strcpy((char *)result, "Size of extensions to negotiate does not match.");
LABEL_40:
  *(_DWORD *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 36) = 0;
  *(_BYTE *)(a4 + 38) = 0;
  return result;
}

_QWORD *std::vector<webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>> const&>(uint64_t a1, void (***a2)(_QWORD))
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = v3 - *(_QWORD *)a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    abort();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v8 >> 2 > v6)
    v6 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v6)
  {
    __break(1u);
LABEL_32:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v6 >> 61)
    goto LABEL_32;
  v10 = 8 * v6;
  v11 = (char *)operator new(8 * v6);
  v12 = &v11[8 * v5];
  *(_QWORD *)v12 = a2;
  if (a2)
  {
    (**a2)(a2);
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD *)(a1 + 8);
  }
  v13 = &v11[v10];
  v14 = v12 + 8;
  if ((_QWORD *)v3 == v2)
  {
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    goto LABEL_14;
  }
  v15 = v3 - (_QWORD)v2 - 8;
  if (v15 >= 0x78)
  {
    if (v3 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8 >= (unint64_t)v12
      || (unint64_t)&v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] >= v3)
    {
      v19 = (v15 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v16 = (_QWORD *)(v3 - v20);
      v12 -= v20;
      v21 = &v11[8 * v5 - 16];
      v22 = (__int128 *)(v3 - 16);
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *(v22 - 1);
        v24 = *v22;
        *(v22 - 1) = 0uLL;
        *v22 = 0uLL;
        *((_OWORD *)v21 - 1) = v25;
        *(_OWORD *)v21 = v24;
        v21 -= 32;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_26;
    }
    else
    {
      v16 = (_QWORD *)v3;
    }
  }
  else
  {
    v16 = (_QWORD *)v3;
  }
  do
  {
    v26 = *--v16;
    *v16 = 0;
    *((_QWORD *)v12 - 1) = v26;
    v12 -= 8;
  }
  while (v16 != v2);
LABEL_26:
  v2 = *(_QWORD **)a1;
  v27 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v13;
  while (v27 != v2)
  {
    v29 = *--v27;
    v28 = v29;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
LABEL_14:
  if (v2)
    operator delete(v2);
  return v14;
}

_QWORD *rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::CreateChannel(std::string_view,webrtc::Call *,cricket::MediaConfig const&,BOOL,webrtc::CryptoOptions,cricket::AudioOptions const&,cricket::VideoOptions const&,webrtc::VideoBitrateAllocatorFactory *,std::function<webrtc::RtpTransportInternal * ()(std::string_view)>)::$_1>(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  std::string *v19;
  size_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  __n128 (*v29)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v30)(_QWORD *);
  unint64_t v31;
  _QWORD *v32;

  v2 = *a1;
  do
  v4 = 0xC516EF5C37462469 * v3 - 0x7A024DF1ED6BCF66;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 168) + 96) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 168) + 96));
  result = (*(_QWORD *(**)(_QWORD **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v5 + 40))(&v32, v5, *(_QWORD *)a1[1], a1[2], a1[3], a1[4], v4);
  if (v32)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 168) + 96) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 168) + 96));
    (*(void (**)(unint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v7 + 48))(&v31, v7, *(_QWORD *)a1[1], a1[2], a1[3], a1[4], v4);
    if (v31)
    {
      v28.n128_u64[0] = v31;
      v29 = absl::internal_any_invocable::LocalManagerTrivial;
      v30 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransceiver::CreateChannel(std::string_view,webrtc::Call *,cricket::MediaConfig const&,BOOL,webrtc::CryptoOptions,cricket::AudioOptions const&,cricket::VideoOptions const&,webrtc::VideoBitrateAllocatorFactory *,std::function<webrtc::RtpTransportInternal * ()(std::string_view)>)::$_1::operator() const(void)::{lambda(std::set<unsigned int> const&)#1} &,std::set<unsigned int> const&>;
      (*(void (**)(_QWORD *, __n128 *))(*v32 + 168))(v32, &v28);
      v29(1, &v28, &v28);
      v8 = *(_QWORD **)(v2 + 168);
      v9 = v8[3];
      v11 = v8[5];
      v10 = v8[6];
      v12 = a1[6];
      v13 = (char *)a1[7];
      v14 = (unsigned int *)a1[4];
      v15 = v8 + 13;
      v16 = operator new();
      v18 = v31;
      v17 = v32;
      v31 = 0;
      v32 = 0;
      v19 = *(std::string **)v12;
      v20 = *(_QWORD *)(v12 + 8);
      v21 = *v13;
      v22 = *v14;
      *(_QWORD *)v16 = off_24C0B08C0;
      *(_QWORD *)(v16 + 8) = &unk_24C0B09B0;
      *(_QWORD *)(v16 + 16) = &unk_24C0B09E8;
      *(_QWORD *)(v16 + 24) = v17;
      *(_QWORD *)(v16 + 32) = v18;
      *(_QWORD *)(v16 + 40) = v11;
      *(_QWORD *)(v16 + 48) = v9;
      *(_QWORD *)(v16 + 56) = v10;
      v23 = operator new();
      *(_DWORD *)v23 = 0;
      *(_BYTE *)(v23 + 4) = 1;
      *(_QWORD *)(v16 + 64) = v23;
      do
        v24 = __ldxr((unsigned int *)v23);
      while (__stxr(v24 + 1, (unsigned int *)v23));
      *(_DWORD *)(v16 + 159) = 0;
      *(_OWORD *)(v16 + 128) = 0u;
      *(_OWORD *)(v16 + 144) = 0u;
      *(_OWORD *)(v16 + 96) = 0u;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_BYTE *)(v16 + 163) = v21;
      *(_DWORD *)(v16 + 164) = HIBYTE(v22);
      *(_WORD *)(v16 + 168) = 0;
      *(_BYTE *)(v16 + 170) = 1;
      *(_OWORD *)(v16 + 176) = 0u;
      *(_OWORD *)(v16 + 192) = 0u;
      *(_OWORD *)(v16 + 208) = 0u;
      *(_QWORD *)(v16 + 224) = 0x300000003;
      *(_OWORD *)(v16 + 248) = 0u;
      *(_OWORD *)(v16 + 232) = 0u;
      *(_OWORD *)(v16 + 264) = 0u;
      webrtc::RtpDemuxerCriteria::RtpDemuxerCriteria((std::string *)(v16 + 280), v19, v20, 0, 0);
      *(_QWORD *)v16 = &off_24C0B0A10;
      *(_QWORD *)(v16 + 8) = &unk_24C0B0B00;
      *(_QWORD *)(v16 + 16) = &unk_24C0B0B38;
      *(_OWORD *)(v16 + 392) = 0u;
      *(_OWORD *)(v16 + 408) = 0u;
      *(_OWORD *)(v16 + 424) = 0u;
      *(_WORD *)(v16 + 440) = 1;
      *(_BYTE *)(v16 + 442) = 0;
      *(_DWORD *)(v16 + 444) = -1;
      *(_QWORD *)(v16 + 456) = 0;
      *(_QWORD *)(v16 + 464) = 0;
      *(_QWORD *)(v16 + 448) = 0;
      *(_BYTE *)(v16 + 472) = 0;
      *(_QWORD *)(v16 + 376) = v15;
      *(_QWORD *)(v16 + 384) = &off_24C0B6A00;
      *(_BYTE *)(v16 + 496) = 0;
      *(_WORD *)(v16 + 500) = 0;
      *(_BYTE *)(v16 + 504) = 0;
      *(_BYTE *)(v16 + 508) = 0;
      *(_WORD *)(v16 + 512) = 0;
      *(_BYTE *)(v16 + 520) = 0;
      *(_BYTE *)(v16 + 544) = 0;
      *(_WORD *)(v16 + 552) = 0;
      *(_QWORD *)(v16 + 485) = 0;
      *(_QWORD *)(v16 + 480) = 0;
      *(_OWORD *)(v16 + 568) = 0u;
      *(_OWORD *)(v16 + 584) = 0u;
      *(_OWORD *)(v16 + 600) = 0u;
      *(_WORD *)(v16 + 616) = 1;
      *(_BYTE *)(v16 + 618) = 0;
      *(_QWORD *)(v16 + 560) = off_24C0B0CB0;
      v25 = (uint64_t *)a1[5];
      v26 = *v25;
      *v25 = v16;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      v27 = v31;
      v31 = 0;
      if (v27)
        (*(void (**)(unint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    result = v32;
    v32 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransceiver::CreateChannel(std::string_view,webrtc::Call *,cricket::MediaConfig const&,BOOL,webrtc::CryptoOptions,cricket::AudioOptions const&,cricket::VideoOptions const&,webrtc::VideoBitrateAllocatorFactory *,std::function<webrtc::RtpTransportInternal * ()(std::string_view)>)::$_1::operator() const(void)::{lambda(std::set<unsigned int> const&)#1} &,std::set<unsigned int> const&>(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 88))(*a1);
}

_QWORD *rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::CreateChannel(std::string_view,webrtc::Call *,cricket::MediaConfig const&,BOOL,webrtc::CryptoOptions,cricket::AudioOptions const&,cricket::VideoOptions const&,webrtc::VideoBitrateAllocatorFactory *,std::function<webrtc::RtpTransportInternal * ()(std::string_view)>)::$_2>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  size_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  __n128 (*v24)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v25)(_QWORD *);
  uint64_t v26;
  _QWORD *v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)(*a1 + 168) + 96);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  result = (*(_QWORD *(**)(_QWORD **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(&v27, v4, *(_QWORD *)a1[1], a1[2], a1[3], a1[4], *(_QWORD *)a1[5]);
  if (v27)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 168) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(v2 + 168) + 96));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(&v26, v6, *(_QWORD *)a1[1], a1[2], a1[3], a1[4]);
    if (v26)
    {
      v23.n128_u64[0] = v26;
      v24 = absl::internal_any_invocable::LocalManagerTrivial;
      v25 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransceiver::CreateChannel(std::string_view,webrtc::Call *,cricket::MediaConfig const&,BOOL,webrtc::CryptoOptions,cricket::AudioOptions const&,cricket::VideoOptions const&,webrtc::VideoBitrateAllocatorFactory *,std::function<webrtc::RtpTransportInternal * ()(std::string_view)>)::$_2::operator() const(void)::{lambda(std::set<unsigned int> const&)#1} &,std::set<unsigned int> const&>;
      (*(void (**)(_QWORD *, __n128 *))(*v27 + 168))(v27, &v23);
      v24(1, &v23, &v23);
      v7 = *(_QWORD **)(v2 + 168);
      v8 = v7[3];
      v9 = v7[5];
      v10 = v7[6];
      v11 = a1[7];
      v12 = (_BYTE *)a1[8];
      v13 = (int *)a1[4];
      v14 = (uint64_t)(v7 + 13);
      v15 = operator new();
      v16 = v26;
      v17 = (uint64_t)v27;
      v26 = 0;
      v27 = 0;
      v30 = v16;
      v31 = v17;
      v18 = *(std::string **)v11;
      v19 = *(_QWORD *)(v11 + 8);
      LOBYTE(v16) = *v12;
      v28 = *v13;
      v29 = *((_BYTE *)v13 + 4);
      cricket::VideoChannel::VideoChannel(v15, v9, v8, v10, &v31, &v30, v18, v19, v16, (uint64_t)&v28, v14);
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      v20 = (unint64_t *)a1[6];
      v21 = *v20;
      *v20 = v15;
      if (v21)
        (*(void (**)(unint64_t))(*(_QWORD *)v21 + 8))(v21);
      v22 = v26;
      v26 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    result = v27;
    v27 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransceiver::CreateChannel(std::string_view,webrtc::Call *,cricket::MediaConfig const&,BOOL,webrtc::CryptoOptions,cricket::AudioOptions const&,cricket::VideoOptions const&,webrtc::VideoBitrateAllocatorFactory *,std::function<webrtc::RtpTransportInternal * ()(std::string_view)>)::$_2::operator() const(void)::{lambda(std::set<unsigned int> const&)#1} &,std::set<unsigned int> const&>(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 88))(*a1);
}

_QWORD *std::__function::__func<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>,std::allocator<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>>,webrtc::RtpTransportInternal * ()(std::string const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C0BDFA0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>,std::allocator<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>>,webrtc::RtpTransportInternal * ()(std::string const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C0BDFA0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>,std::allocator<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>>,webrtc::RtpTransportInternal * ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_24C0BDFA0;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      v2[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
    }
    return v2;
  }
  else
  {
    v2[4] = 0;
    return v2;
  }
}

uint64_t std::__function::__func<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>,std::allocator<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>>,webrtc::RtpTransportInternal * ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24C0BDFA0;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t std::__function::__func<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>,std::allocator<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>>,webrtc::RtpTransportInternal * ()(std::string const&)>::destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>,std::allocator<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>>,webrtc::RtpTransportInternal * ()(std::string const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>,std::allocator<std::function<webrtc::RtpTransportInternal * ()(std::string_view)>>,webrtc::RtpTransportInternal * ()(std::string const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];

  if (*((char *)a2 + 23) < 0)
  {
    v2 = a2[1];
    if (((unint64_t)v2 & 0x8000000000000000) != 0
      || ((a2 = (uint64_t **)*a2, v2) ? (v3 = a2 == 0) : (v3 = 0), v3))
    {
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    v2 = (uint64_t *)*((unsigned __int8 *)a2 + 23);
  }
  v7[0] = a2;
  v7[1] = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v4, v7);
LABEL_11:
  v6 = std::__throw_bad_function_call[abi:sn180100]();
  return rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1>(v6);
}

_QWORD *rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *result;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 160);
  if (!v3)
    goto LABEL_9;
  v26 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 112))(v3, v25);
  v4 = v26;
  if (v26 == v25)
  {
    v5 = 4;
    v4 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_7;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_7:
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 160) + 160))(*(_QWORD *)(v2 + 160), 0);
  v6 = (uint64_t *)a1[1];
  v7 = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;
  v8 = *v6;
  *v6 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
LABEL_9:
  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  *v9 = 0;
  v11 = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(v2 + 160) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v10 = *(_QWORD *)(v2 + 160);
  }
  v12 = a1[3];
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 96))(v10);
  v14 = *(_QWORD *)(v12 + 24);
  if (!v14)
    std::__throw_bad_function_call[abi:sn180100]();
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 160))(v10, v15);
  v16 = *(_QWORD *)(v2 + 160);
  v17 = *(_QWORD *)(v2 + 8);
  v18 = *(unsigned int **)(v2 + 24);
  if (v18)
  {
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = operator new(0x20uLL);
  *v20 = &off_24C0BDFE8;
  v20[1] = v17;
  v20[2] = v18;
  v20[3] = v2;
  v24 = v20;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 112))(v16, v23);
  result = v24;
  if (v24 == v23)
  {
    v22 = 4;
    result = v23;
  }
  else
  {
    if (!v24)
      return result;
    v22 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v22))();
}

_QWORD *std::__function::__func<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1},std::allocator<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24C0BDFE8;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void std::__function::__func<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1},std::allocator<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  *a1 = &off_24C0BDFE8;
  v1 = (unsigned int *)a1[2];
  if (v1)
  {
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1},std::allocator<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = (unsigned int *)a1[2];
  *result = &off_24C0BDFE8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    do
      v5 = __ldxr(v3);
    while (__stxr(v5 + 1, v3));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *std::__function::__func<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1},std::allocator<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;

  v3 = result[1];
  v2 = (unsigned int *)result[2];
  *a2 = &off_24C0BDFE8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    do
      v4 = __ldxr(v2);
    while (__stxr(v4 + 1, v2));
  }
  a2[3] = result[3];
  return result;
}

unsigned int *std::__function::__func<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1},std::allocator<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  unsigned int *result;
  unsigned int v2;
  unsigned int v3;

  result = *(unsigned int **)(a1 + 16);
  if (result)
  {
    do
    {
      v2 = __ldaxr(result);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, result));
    if (!v3)
      JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

void std::__function::__func<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1},std::allocator<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1},std::allocator<webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v6;
  char v7;
  _QWORD v8[2];
  uint64_t (*v9)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v10)(uint64_t);

  v2 = a1[2];
  v1 = a1[3];
  v3 = a1[1];
  a1[2] = 0;
  v4 = (_QWORD *)operator new();
  *v4 = v2;
  v4[1] = v1;
  v4[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v4[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1} &&>;
  v8[0] = v4;
  v9 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v10 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v8, &v7, &v6);
  return v9(1, v8, v8);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransceiver::SetChannel(std::unique_ptr<cricket::ChannelInterface>,std::function<webrtc::RtpTransportInternal * ()(std::string const&)>)::$_1::operator() const(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1} &&>(uint64_t result)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(*(_QWORD *)result + 56);
  for (i = *(uint64_t **)(*(_QWORD *)result + 64);
        v1 != i;
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 32) + 208))(*(_QWORD *)(v3 + 32)))
  {
    v3 = *v1++;
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::ClearChannel(void)::$_1>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  result = *(_QWORD *)(*a1 + 160);
  if (result)
  {
    v9 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)result + 112))(result, v8);
    v4 = v9;
    if (v9 == v8)
    {
      v5 = 4;
      v4 = v8;
    }
    else
    {
      if (!v9)
        goto LABEL_7;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_7:
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 160) + 160))(*(_QWORD *)(v2 + 160), 0);
    v6 = (uint64_t *)a1[1];
    v7 = *(_QWORD *)(v2 + 160);
    *(_QWORD *)(v2 + 160) = 0;
    result = *v6;
    *v6 = v7;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::PushNewMediaChannelAndDeleteChannel(std::unique_ptr<cricket::ChannelInterface>)::$_0>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD *)(*a1 + 160);
  if (v3)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    v5 = (uint64_t *)v2[4];
    v6 = (uint64_t *)v2[5];
    if (v5 == v6)
      goto LABEL_6;
  }
  else
  {
    v4 = 0;
    v5 = (uint64_t *)v2[4];
    v6 = (uint64_t *)v2[5];
    if (v5 == v6)
      goto LABEL_6;
  }
  do
  {
    v7 = *v5++;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 24) + 184))(*(_QWORD *)(v7 + 24), v4);
  }
  while (v5 != v6);
LABEL_6:
  v8 = v2[20];
  if (!v8)
  {
    v9 = 0;
    v11 = (uint64_t *)v2[7];
    v10 = (uint64_t *)v2[8];
    if (v11 == v10)
      goto LABEL_11;
    do
    {
LABEL_10:
      v12 = *v11++;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v12 + 32) + 168))(*(_QWORD *)(v12 + 32), v9);
    }
    while (v11 != v10);
    goto LABEL_11;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
  v11 = (uint64_t *)v2[7];
  v10 = (uint64_t *)v2[8];
  if (v11 != v10)
    goto LABEL_10;
LABEL_11:
  v13 = (uint64_t *)a1[1];
  result = *v13;
  if (*v13)
  {
    *v13 = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::RemoveReceiver(webrtc::RtpReceiverInterface *)::$_1>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(***(_QWORD ***)a1 + 32);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 168))(v1, 0);
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpTransceiver::StopSendingAndReceiving(void)::$_1>(uint64_t result)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(*(_QWORD *)result + 56);
  for (i = *(uint64_t **)(*(_QWORD *)result + 64);
        v1 != i;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 32) + 168))(*(_QWORD *)(v3 + 32), 0))
  {
    v3 = *v1++;
  }
  return result;
}

double webrtc::RtpTransceiverInit::RtpTransceiverInit(webrtc::RtpTransceiverInit *this)
{
  double result;

  *(_DWORD *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void webrtc::RtpTransceiverInit::~RtpTransceiverInit(webrtc::RtpTransceiverInit *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (char *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (char *)*((_QWORD *)this + 5);
    v4 = v2;
    if (v3 != v2)
    {
      do
        webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v3 - 272));
      while (v3 != v2);
      v4 = (char *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    v6 = *((_QWORD *)this + 2);
    v7 = (void *)*((_QWORD *)this + 1);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v5;
    operator delete(v7);
  }
}

uint64_t webrtc::RtpTransceiverInterface::fired_direction(webrtc::RtpTransceiverInterface *this)
{
  return 0;
}

uint64_t webrtc::RtpTransceiverInterface::stopping(webrtc::RtpTransceiverInterface *this)
{
  return 0;
}

uint64_t webrtc::RtpTransceiverInterface::Stop(webrtc::RtpTransceiverInterface *this)
{
  return (*(uint64_t (**)(webrtc::RtpTransceiverInterface *))(*(_QWORD *)this + 128))(this);
}

void webrtc::RtpTransceiverInterface::StopStandard(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 38) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 29) = 0;
}

void webrtc::RtpTransceiverInterface::SetDirection(uint64_t a1)
{
  void *v1[3];
  char v2;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 96))(v1);
  if (v2 < 0)
    operator delete(v1[1]);
}

void webrtc::RtpTransceiverInterface::SetDirectionWithError(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 38) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 29) = 0;
}

void webrtc::RtpTransmissionManager::OnSetStreams(webrtc::RtpTransmissionManager *this)
{
  uint64_t v1;
  webrtc::RtpTransmissionManager *v2;
  _QWORD *v3;

  if (*((_BYTE *)this + 177))
  {
    v1 = *((_QWORD *)this + 30);
    if (v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
    }
    else
    {
      v2 = (webrtc::RtpTransmissionManager *)std::__throw_bad_function_call[abi:sn180100]();
      webrtc::RtpTransmissionManager::GetAudioTransceiver(v2, v3);
    }
  }
}

void webrtc::RtpTransmissionManager::GetAudioTransceiver(webrtc::RtpTransmissionManager *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  void (***v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = v4 - v3;
  if (v4 == v3)
    goto LABEL_20;
  if ((v5 & 0x8000000000000000) != 0)
    abort();
  v6 = (char *)operator new(v5);
  v7 = 0;
  do
  {
    v8 = *(void (****)(_QWORD))(v3 + v7);
    *(_QWORD *)&v6[v7] = v8;
    if (v8)
      (**v8)(v8);
    v7 += 8;
  }
  while (v3 + v7 != v4);
  if (!v7)
  {
    operator delete(v6);
LABEL_20:
    *a2 = 0;
    return;
  }
  v9 = 0;
  v10 = 8 * (v7 >> 3);
  do
  {
    v11 = *(_QWORD *)&v6[v9];
    *a2 = v11;
    if (v11)
      (**(void (***)(uint64_t))v11)(v11);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    if (!v12)
      break;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v9 += 8;
  }
  while (v10 != v9);
  do
  {
    v13 = *(_QWORD *)&v6[v10 - 8];
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v10 -= 8;
  }
  while (v10);
  operator delete(v6);
  if (v12)
    goto LABEL_20;
}

void webrtc::RtpTransmissionManager::GetVideoTransceiver(webrtc::RtpTransmissionManager *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  void (***v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = v4 - v3;
  if (v4 == v3)
    goto LABEL_20;
  if ((v5 & 0x8000000000000000) != 0)
    abort();
  v6 = (char *)operator new(v5);
  v7 = 0;
  do
  {
    v8 = *(void (****)(_QWORD))(v3 + v7);
    *(_QWORD *)&v6[v7] = v8;
    if (v8)
      (**v8)(v8);
    v7 += 8;
  }
  while (v3 + v7 != v4);
  if (!v7)
  {
    operator delete(v6);
LABEL_20:
    *a2 = 0;
    return;
  }
  v9 = 0;
  v10 = 8 * (v7 >> 3);
  do
  {
    v11 = *(_QWORD *)&v6[v9];
    *a2 = v11;
    if (v11)
      (**(void (***)(uint64_t))v11)(v11);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    if (v12 == 1)
      break;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v9 += 8;
  }
  while (v10 != v9);
  do
  {
    v13 = *(_QWORD *)&v6[v10 - 8];
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v10 -= 8;
  }
  while (v10);
  operator delete(v6);
  if (v12 != 1)
    goto LABEL_20;
}

void webrtc::RtpTransmissionManager::AddTrack(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *a2;
  if (*(_BYTE *)(a1 + 177))
  {
    v11 = *a2;
    if (v9)
    {
      (**(void (***)(uint64_t))v9)(v9);
      webrtc::RtpTransmissionManager::AddTrackUnifiedPlan((_QWORD *)a1, &v11, (uint64_t)a3, a4, a5);
LABEL_6:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
    webrtc::RtpTransmissionManager::AddTrackUnifiedPlan((_QWORD *)a1, &v11, (uint64_t)a3, a4, a5);
  }
  else
  {
    v10 = *a2;
    if (v9)
    {
      (**(void (***)(uint64_t))v9)(v9);
      webrtc::RtpTransmissionManager::AddTrackPlanB((uint64_t *)a1, (uint64_t)&v10, a3, a4, a5);
      goto LABEL_6;
    }
    webrtc::RtpTransmissionManager::AddTrackPlanB((uint64_t *)a1, (uint64_t)&v10, a3, a4, a5);
  }
}

uint64_t webrtc::RtpTransmissionManager::AddTrackUnifiedPlan@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  void (***v10)(_QWORD);
  _QWORD *v11;
  rtc::webrtc_checks_impl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void **v21;
  void *v22;
  int v23;
  int v24;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  std::string *v42;
  const std::string::value_type **v43;
  __int128 v44;
  uint64_t v45;
  std::string *v46;
  const std::string::value_type **v47;
  __int128 v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  std::string::size_type v53;
  std::string::size_type size;
  void *v55;
  uint64_t v56;
  int8x16_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL4 v73;
  uint64_t v74;
  void (***v75)(_QWORD);
  void (***v76)(_QWORD);
  int8x16_t *v77;
  void *__p[2];
  __int128 v79;
  __int128 v80;
  _BYTE v81[25];
  char v82;
  char v83;
  _BYTE v84[13];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v88;
  char v89;
  char v90;
  std::string v91;
  uint64_t v92;
  void (***v93)(_QWORD);
  __int128 v94;
  uint64_t v95;
  void (***v96)(_QWORD);
  _QWORD v97[2];

  v96 = (void (***)(_QWORD))*a2;
  v10 = v96;
  if (v96)
  {
    (**v96)(v96);
    webrtc::RtpTransmissionManager::FindFirstTransceiverForAddedTrack(v97, (uint64_t)a1, (uint64_t)&v96, (uint64_t)a4);
    (*v10)[1](v10);
    v11 = (_QWORD *)v97[0];
    if (v97[0])
      goto LABEL_3;
LABEL_8:
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 32))(__p);
    if (SBYTE7(v79) < 0)
    {
      v22 = __p[1];
      if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
        goto LABEL_111;
      v21 = (void **)__p[0];
      if (__p[1])
      {
        if (!__p[0])
          goto LABEL_111;
      }
    }
    else
    {
      v21 = __p;
      v22 = (void *)BYTE7(v79);
    }
    if (v22 == (void *)5)
    {
      v23 = *(_DWORD *)v21;
      v24 = *((unsigned __int8 *)v21 + 4);
      v26 = v23 == *(_DWORD *)"audio" && v24 == cricket::kMediaTypeAudio[4];
      if ((BYTE7(v79) & 0x80) != 0)
      {
LABEL_25:
        operator delete(__p[0]);
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          goto LABEL_26;
        goto LABEL_33;
      }
    }
    else
    {
      v26 = 0;
      if ((BYTE7(v79) & 0x80) != 0)
        goto LABEL_25;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
LABEL_26:
      BYTE7(v79) = 5;
      if (v26)
      {
        v30 = "audio";
        if (__p > (void **)"audio")
        {
LABEL_31:
          LODWORD(__p[0]) = *(_DWORD *)v30;
          WORD2(__p[0]) = *((unsigned __int8 *)v30 + 4);
          rtc::webrtc_logging_impl::Log("\r\t\n\t", v27, v28, v29, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc");
          if (SBYTE7(v79) < 0)
            operator delete(__p[0]);
          goto LABEL_33;
        }
      }
      else
      {
        v30 = "video";
        if (__p > (void **)"video")
          goto LABEL_31;
      }
      if ((char *)__p + 5 <= v30)
        goto LABEL_31;
LABEL_111:
      __break(1u);
LABEL_112:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 476, "1u == senders_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v16, v17, v18, v19, 1);
LABEL_113:
      abort();
    }
LABEL_33:
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 40))(&v94);
    webrtc::RtpTransmissionManager::FindSenderById((uint64_t)a1, (uint64_t)&v94, (uint64_t *)__p);
    if (__p[0])
    {
      (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
      rtc::CreateRandomUuid((std::string *)__p);
      if (SHIBYTE(v95) < 0)
        operator delete((void *)v94);
      v94 = *(_OWORD *)__p;
      v95 = v79;
    }
    v92 = *a2;
    if (v92)
      (**(void (***)(uint64_t))v92)(v92);
    if (a4)
    {
      memset(&v91, 0, sizeof(v91));
      v31 = *a4;
      v32 = a4[1];
      v33 = v32 - *a4;
      if (v32 != *a4)
      {
        v73 = v26;
        v74 = a3;
        v34 = 0xF0F0F0F0F0F0F0F1 * (v33 >> 4);
        if (v34 >= 0xF0F0F0F0F0F0F1)
          goto LABEL_113;
        v35 = operator new(v33);
        v36 = 0;
        v91.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
        v91.__r_.__value_.__r.__words[2] = (std::string::size_type)&v35[272 * v34];
        do
        {
          v37 = &v35[v36];
          v38 = v31 + v36;
          *(_OWORD *)v37 = *(_OWORD *)(v31 + v36);
          v39 = *(_OWORD *)(v31 + v36 + 16);
          v40 = *(_OWORD *)(v31 + v36 + 32);
          v41 = *(_OWORD *)(v31 + v36 + 48);
          *(_OWORD *)(v37 + 57) = *(_OWORD *)(v31 + v36 + 57);
          *((_OWORD *)v37 + 2) = v40;
          *((_OWORD *)v37 + 3) = v41;
          *((_OWORD *)v37 + 1) = v39;
          v35[v36 + 80] = 0;
          v42 = (std::string *)&v35[v36 + 80];
          v37[104] = 0;
          if (*(_BYTE *)(v31 + v36 + 104))
          {
            v43 = (const std::string::value_type **)(v38 + 80);
            if (*(char *)(v38 + 103) < 0)
            {
              std::string::__init_copy_ctor_external(v42, *v43, *(_QWORD *)(v31 + v36 + 88));
            }
            else
            {
              v44 = *(_OWORD *)v43;
              *(_QWORD *)&v35[v36 + 96] = *(_QWORD *)(v38 + 96);
              *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v44;
            }
            v37[104] = 1;
          }
          v45 = *(_QWORD *)(v38 + 112);
          *(_QWORD *)(v37 + 117) = *(_QWORD *)(v38 + 117);
          *((_QWORD *)v37 + 14) = v45;
          v46 = (std::string *)(v37 + 128);
          v47 = (const std::string::value_type **)(v38 + 128);
          if (*(char *)(v38 + 151) < 0)
          {
            std::string::__init_copy_ctor_external(v46, *v47, *(_QWORD *)(v31 + v36 + 136));
          }
          else
          {
            v48 = *(_OWORD *)v47;
            *((_QWORD *)v37 + 18) = *(_QWORD *)(v38 + 144);
            *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v48;
          }
          v49 = &v35[v36];
          *((_WORD *)v49 + 76) = *(_WORD *)(v38 + 152);
          v35[v36 + 160] = 0;
          v49[264] = 0;
          if (*(_BYTE *)(v38 + 264))
          {
            webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v35[v36 + 160], (const webrtc::RtpCodec *)(v31 + v36 + 160));
            v49[264] = 1;
          }
          v36 += 272;
        }
        while (v38 + 272 != v32);
        v91.__r_.__value_.__l.__size_ = (std::string::size_type)&v35[v36];
        a3 = v74;
        v26 = v73;
      }
    }
    else
    {
      LOBYTE(__p[0]) = 0;
      BYTE4(__p[0]) = 0;
      __p[1] = (void *)0x3FF0000000000000;
      LODWORD(v79) = 1;
      BYTE4(v79) = 0;
      BYTE8(v79) = 0;
      BYTE12(v79) = 0;
      LOBYTE(v80) = 0;
      BYTE8(v80) = 0;
      v81[0] = 0;
      v81[8] = 0;
      v81[12] = 0;
      v81[16] = 0;
      v81[24] = 0;
      v82 = 0;
      v83 = 0;
      v84[0] = 0;
      v84[8] = 0;
      v84[12] = 1;
      v89 = 0;
      v90 = 0;
      v85 = 0;
      v86 = 0;
      v88 = 0;
      v87 = 0;
      v50 = (char *)operator new(0x110uLL);
      v91.__r_.__value_.__r.__words[2] = (std::string::size_type)(v50 + 272);
      v51 = *(_OWORD *)v81;
      *((_OWORD *)v50 + 2) = v80;
      *((_OWORD *)v50 + 3) = v51;
      *(_OWORD *)(v50 + 57) = *(_OWORD *)&v81[9];
      v52 = v79;
      *(_OWORD *)v50 = *(_OWORD *)__p;
      *((_OWORD *)v50 + 1) = v52;
      v50[80] = 0;
      v50[104] = 0;
      *((_QWORD *)v50 + 14) = *(_QWORD *)v84;
      *(_QWORD *)(v50 + 117) = *(_QWORD *)&v84[5];
      v50[160] = 0;
      v50[264] = 0;
      *((_QWORD *)v50 + 17) = 0;
      *((_QWORD *)v50 + 18) = 0;
      *((_QWORD *)v50 + 16) = 0;
      *((_WORD *)v50 + 76) = 0;
      v91.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
      v91.__r_.__value_.__l.__size_ = (std::string::size_type)(v50 + 272);
    }
    webrtc::RtpTransmissionManager::CreateSender((uint64_t)a1, !v26, &v94, &v92, a3, (uint64_t)&v91, (uint64_t *)&v93);
    v53 = v91.__r_.__value_.__r.__words[0];
    if (v91.__r_.__value_.__r.__words[0])
    {
      size = v91.__r_.__value_.__l.__size_;
      v55 = (void *)v91.__r_.__value_.__r.__words[0];
      if (v91.__r_.__value_.__l.__size_ != v91.__r_.__value_.__r.__words[0])
      {
        do
          webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(size - 272));
        while (size != v53);
        v55 = (void *)v91.__r_.__value_.__r.__words[0];
      }
      v91.__r_.__value_.__l.__size_ = v53;
      operator delete(v55);
    }
    if (!a4)
      webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)__p);
    if (v92)
      (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
    rtc::CreateRandomUuid(&v91);
    webrtc::RtpTransmissionManager::CreateReceiver((uint64_t)a1, !v26, (uint64_t)&v91, &v77);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    v56 = (uint64_t)v93;
    v76 = v93;
    if (v93)
      (**v93)(v93);
    v57 = v77;
    v75 = (void (***)(_QWORD))v77;
    if (v77)
      (*(void (**)(int8x16_t *))v77->i64[0])(v77);
    webrtc::RtpTransmissionManager::CreateAndAddTransceiver(a1, &v76, &v75, (uint64_t *)&v91);
    v11 = (_QWORD *)v91.__r_.__value_.__r.__words[0];
    v58 = v97[0];
    v97[0] = v91.__r_.__value_.__r.__words[0];
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
    if (v57)
      (*(void (**)(int8x16_t *))(v57->i64[0] + 8))(v57);
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    v59 = v11[2];
    *(_BYTE *)(v59 + 152) = 1;
    *(_DWORD *)(v59 + 84) = 0;
    if (v57)
      (*(void (**)(int8x16_t *))(v57->i64[0] + 8))(v57);
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    if (SHIBYTE(v95) < 0)
      operator delete((void *)v94);
    goto LABEL_109;
  }
  webrtc::RtpTransmissionManager::FindFirstTransceiverForAddedTrack(v97, (uint64_t)a1, (uint64_t)&v96, (uint64_t)a4);
  v11 = (_QWORD *)v97[0];
  if (!v97[0])
    goto LABEL_8;
LABEL_3:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    v12 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD *))(*v11 + 32))(v11);
    switch((int)v12)
    {
      case 0:
        BYTE7(v79) = 5;
        v20 = "audio";
        if (__p > (void **)"audio")
          goto LABEL_88;
        goto LABEL_87;
      case 1:
        BYTE7(v79) = 5;
        v20 = "video";
        if (__p > (void **)"video")
          goto LABEL_88;
LABEL_87:
        if ((char *)__p + 5 > v20)
          goto LABEL_111;
LABEL_88:
        LODWORD(__p[0]) = *(_DWORD *)v20;
        WORD2(__p[0]) = *((unsigned __int8 *)v20 + 4);
LABEL_90:
        rtc::webrtc_logging_impl::Log("\r\t\n\t", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc");
        if ((SBYTE7(v79) & 0x80000000) == 0)
          break;
        operator delete(__p[0]);
        if (!(*(unsigned int (**)(_QWORD *))(*v11 + 72))(v11))
          goto LABEL_98;
        goto LABEL_92;
      case 2:
        BYTE7(v79) = 4;
        if (__p <= (void **)"data" && (char *)__p + 4 > "data")
          goto LABEL_111;
        strcpy((char *)__p, "data");
        goto LABEL_90;
      case 3:
        BYTE7(v79) = 0;
        LOBYTE(__p[0]) = 0;
        goto LABEL_90;
      default:
        rtc::webrtc_checks_impl::UnreachableCodeReached(v12);
    }
  }
  if (!(*(unsigned int (**)(_QWORD *))(*v11 + 72))(v11))
  {
LABEL_98:
    if ((*(unsigned int (**)(_QWORD *))(*v11 + 80))(v11) == 2)
    {
      v69 = 0;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD *))(*v11 + 80))(v11) != 3)
      {
LABEL_103:
        (*(void (**)(void **__return_ptr, _QWORD *))(*v11 + 48))(__p, v11);
        (*(void (**)(void *, _QWORD))(*(_QWORD *)__p[0] + 32))(__p[0], *a2);
        if (__p[0])
          (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
        v70 = *(_QWORD *)(v11[2] + 32);
        if (*(_QWORD *)(v11[2] + 40) - v70 != 8)
          goto LABEL_112;
        v71 = *(_QWORD *)(*(_QWORD *)v70 + 24);
        if (v71)
          (**(void (***)(uint64_t))v71)(v71);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v71 + 200))(v71, a3);
        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
        *(_BYTE *)(v11[2] + 153) = 1;
LABEL_109:
        (*(void (**)(_QWORD *))(*v11 + 48))(v11);
        *(_DWORD *)a5 = 0;
        *(_BYTE *)(a5 + 38) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
        *(_QWORD *)(a5 + 8) = 0;
        v68 = 1;
        *(_QWORD *)(a5 + 29) = 0;
        goto LABEL_110;
      }
      v69 = 1;
    }
    *(_DWORD *)(v11[2] + 84) = v69;
    goto LABEL_103;
  }
LABEL_92:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    __p[0] = "INVALID_PARAMETER";
    __p[1] = (void *)17;
    rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v60, v61, v62, v63, v64, v65, v66, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc");
  }
  v67 = (char *)operator new(0x28uLL);
  if (v67 <= "The existing transceiver is stopping." && v67 + 37 > "The existing transceiver is stopping.")
    goto LABEL_111;
  v68 = 0;
  strcpy(v67, "The existing transceiver is stopping.");
  *(_DWORD *)a5 = 3;
  *(_QWORD *)(a5 + 8) = v67;
  *(_OWORD *)(a5 + 16) = xmmword_208F086E0;
  *(_DWORD *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 36) = 0;
  *(_BYTE *)(a5 + 38) = 0;
  *(_BYTE *)(a5 + 40) = 0;
LABEL_110:
  *(_BYTE *)(a5 + 48) = v68;
  return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
}

void webrtc::RtpTransmissionManager::AddTrackPlanB(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v21;
  uint64_t v22;
  __int128 *v23;
  std::string *v24;
  __int128 v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  void **v37;
  void **v38;
  void *v39;
  int v40;
  int v41;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  std::string *v55;
  const std::string::value_type **v56;
  __int128 v57;
  uint64_t v58;
  std::string *v59;
  const std::string::value_type **v60;
  __int128 v61;
  unsigned __int8 *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  __int128 *v69;
  uint64_t v70;
  int v71;
  int v72;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t v76;
  webrtc::RtpTransmissionManager *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unsigned __int8 **v84;
  _QWORD *v85;
  uint64_t SenderInfo;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  unsigned __int8 **v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  _BOOL4 v98;
  uint64_t *v99;
  void (***v100)(_QWORD);
  void (***v101)(_QWORD);
  void *__p[2];
  __int128 v103;
  __int128 v104;
  _BYTE v105[25];
  char v106;
  char v107;
  _BYTE v108[13];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int16 v112;
  char v113;
  char v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  uint64_t v118;
  __int128 v119;
  unsigned __int8 v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;

  v8 = *a3;
  v7 = a3[1];
  v9 = v7 - *a3;
  v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  if (v10 >= 2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __p[0] = "UNSUPPORTED_OPERATION";
      __p[1] = (void *)21;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc");
    }
    v18 = (char *)operator new(0x50uLL);
    if (v18 > "AddTrack with more than one stream is not supported with Plan B semantics."
      || v18 + 74 <= "AddTrack with more than one stream is not supported with Plan B semantics.")
    {
      strcpy(v18, "AddTrack with more than one stream is not supported with Plan B semantics.");
      *(_DWORD *)a5 = 1;
      *(_QWORD *)(a5 + 8) = v18;
      *(_OWORD *)(a5 + 16) = xmmword_208F1ABA0;
      *(_DWORD *)(a5 + 32) = 0;
      *(_BYTE *)(a5 + 36) = 0;
      *(_BYTE *)(a5 + 38) = 0;
      *(_BYTE *)(a5 + 40) = 0;
      *(_BYTE *)(a5 + 48) = 0;
      return;
    }
    goto LABEL_139;
  }
  v122 = 0;
  v123 = 0;
  v124 = 0;
  if (v7 == v8)
    goto LABEL_13;
  v21 = (char *)operator new(v9);
  v22 = 0;
  v122 = v21;
  v124 = &v21[24 * v10];
  do
  {
    while (1)
    {
      v23 = (__int128 *)(v8 + v22);
      v24 = (std::string *)&v21[v22];
      if ((*(char *)(v8 + v22 + 23) & 0x80000000) == 0)
        break;
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
      v22 += 24;
      if (v8 + v22 == v7)
        goto LABEL_12;
    }
    v25 = *v23;
    v24->__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
    v22 += 24;
  }
  while (v8 + v22 != v7);
LABEL_12:
  v123 = &v21[v22];
  if (!v22)
  {
LABEL_13:
    rtc::CreateRandomUuid((std::string *)__p);
    v26 = v123;
    if (v123 >= v124)
    {
      v29 = v122;
      v30 = 0xAAAAAAAAAAAAAAABLL * ((v123 - v122) >> 3) + 1;
      if (v30 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_140;
      if (0x5555555555555556 * ((v124 - v122) >> 3) > v30)
        v30 = 0x5555555555555556 * ((v124 - v122) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v124 - v122) >> 3) >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      else
        v31 = v30;
      if (!v31)
        goto LABEL_139;
      if (v31 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v32 = 24 * v31;
      v33 = (char *)operator new(24 * v31);
      v34 = &v33[v32];
      v35 = &v33[8 * ((v26 - v29) >> 3)];
      *(_OWORD *)v35 = *(_OWORD *)__p;
      *((_QWORD *)v35 + 2) = v103;
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v103 = 0;
      v28 = v35 + 24;
      if (v26 == v29)
      {
        v122 = &v33[8 * ((v26 - v29) >> 3)];
        v123 = v35 + 24;
        v124 = &v33[v32];
      }
      else
      {
        do
        {
          v36 = *(_OWORD *)(v26 - 24);
          *((_QWORD *)v35 - 1) = *((_QWORD *)v26 - 1);
          *(_OWORD *)(v35 - 24) = v36;
          v35 -= 24;
          *((_QWORD *)v26 - 2) = 0;
          *((_QWORD *)v26 - 1) = 0;
          *((_QWORD *)v26 - 3) = 0;
          v26 -= 24;
        }
        while (v26 != v29);
        v26 = v122;
        v37 = (void **)v123;
        v122 = v35;
        v123 = v28;
        v124 = v34;
        while (v37 != (void **)v26)
        {
          if (*((char *)v37 - 1) < 0)
            operator delete(*(v37 - 3));
          v37 -= 3;
        }
      }
      if (v26)
        operator delete(v26);
    }
    else
    {
      if (!v123)
        goto LABEL_139;
      v27 = *(_OWORD *)__p;
      *((_QWORD *)v123 + 2) = v103;
      *(_OWORD *)v26 = v27;
      __p[1] = 0;
      *(_QWORD *)&v103 = 0;
      __p[0] = 0;
      v28 = v26 + 24;
    }
    v123 = v28;
    if (SBYTE7(v103) < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(void **__return_ptr))(**(_QWORD **)a2 + 32))(__p);
  if (SBYTE7(v103) < 0)
  {
    v39 = __p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
      goto LABEL_139;
    v38 = (void **)__p[0];
    if (__p[1])
    {
      if (!__p[0])
        goto LABEL_139;
    }
  }
  else
  {
    v38 = __p;
    v39 = (void *)BYTE7(v103);
  }
  if (v39 != (void *)5)
  {
    v43 = 0;
    if ((BYTE7(v103) & 0x80) == 0)
      goto LABEL_52;
    goto LABEL_51;
  }
  v40 = *(_DWORD *)v38;
  v41 = *((unsigned __int8 *)v38 + 4);
  v43 = v40 == *(_DWORD *)"audio" && v41 == cricket::kMediaTypeAudio[4];
  if ((BYTE7(v103) & 0x80) != 0)
LABEL_51:
    operator delete(__p[0]);
LABEL_52:
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 40))(&v119);
  v118 = *(_QWORD *)a2;
  if (v118)
    (**(void (***)(uint64_t))v118)(v118);
  if (a4)
  {
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v44 = *a4;
    v45 = a4[1];
    v46 = v45 - *a4;
    if (v45 != *a4)
    {
      v98 = v43;
      v99 = a1;
      v47 = 0xF0F0F0F0F0F0F0F1 * (v46 >> 4);
      if (v47 >= 0xF0F0F0F0F0F0F1)
        goto LABEL_140;
      v48 = (unsigned __int8 *)operator new(v46);
      v49 = 0;
      v115 = v48;
      v116 = v48;
      v117 = &v48[272 * v47];
      do
      {
        v50 = &v48[v49];
        v51 = v44 + v49;
        *(_OWORD *)v50 = *(_OWORD *)(v44 + v49);
        v52 = *(_OWORD *)(v44 + v49 + 16);
        v53 = *(_OWORD *)(v44 + v49 + 32);
        v54 = *(_OWORD *)(v44 + v49 + 48);
        *(_OWORD *)(v50 + 57) = *(_OWORD *)(v44 + v49 + 57);
        *((_OWORD *)v50 + 2) = v53;
        *((_OWORD *)v50 + 3) = v54;
        *((_OWORD *)v50 + 1) = v52;
        v48[v49 + 80] = 0;
        v55 = (std::string *)&v48[v49 + 80];
        v50[104] = 0;
        if (*(_BYTE *)(v44 + v49 + 104))
        {
          v56 = (const std::string::value_type **)(v51 + 80);
          if (*(char *)(v51 + 103) < 0)
          {
            std::string::__init_copy_ctor_external(v55, *v56, *(_QWORD *)(v44 + v49 + 88));
          }
          else
          {
            v57 = *(_OWORD *)v56;
            *(_QWORD *)&v48[v49 + 96] = *(_QWORD *)(v51 + 96);
            *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v57;
          }
          v50[104] = 1;
        }
        v58 = *(_QWORD *)(v51 + 112);
        *(_QWORD *)(v50 + 117) = *(_QWORD *)(v51 + 117);
        *((_QWORD *)v50 + 14) = v58;
        v59 = (std::string *)(v50 + 128);
        v60 = (const std::string::value_type **)(v51 + 128);
        if (*(char *)(v51 + 151) < 0)
        {
          std::string::__init_copy_ctor_external(v59, *v60, *(_QWORD *)(v44 + v49 + 136));
        }
        else
        {
          v61 = *(_OWORD *)v60;
          *((_QWORD *)v50 + 18) = *(_QWORD *)(v51 + 144);
          *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v61;
        }
        v62 = &v48[v49];
        *((_WORD *)v62 + 76) = *(_WORD *)(v51 + 152);
        v48[v49 + 160] = 0;
        v62[264] = 0;
        if (*(_BYTE *)(v51 + 264))
        {
          webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v48[v49 + 160], (const webrtc::RtpCodec *)(v44 + v49 + 160));
          v62[264] = 1;
        }
        v49 += 272;
      }
      while (v51 + 272 != v45);
      v116 = &v48[v49];
      a1 = v99;
      v43 = v98;
    }
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    BYTE4(__p[0]) = 0;
    __p[1] = (void *)0x3FF0000000000000;
    LODWORD(v103) = 1;
    BYTE4(v103) = 0;
    BYTE8(v103) = 0;
    BYTE12(v103) = 0;
    LOBYTE(v104) = 0;
    BYTE8(v104) = 0;
    v105[0] = 0;
    v105[8] = 0;
    v105[12] = 0;
    v105[16] = 0;
    v105[24] = 0;
    v106 = 0;
    v107 = 0;
    v108[0] = 0;
    v108[8] = 0;
    v108[12] = 1;
    v113 = 0;
    v114 = 0;
    v109 = 0;
    v110 = 0;
    v112 = 0;
    v111 = 0;
    v63 = (char *)operator new(0x110uLL);
    v117 = (unsigned __int8 *)(v63 + 272);
    v64 = *(_OWORD *)v105;
    *((_OWORD *)v63 + 2) = v104;
    *((_OWORD *)v63 + 3) = v64;
    *(_OWORD *)(v63 + 57) = *(_OWORD *)&v105[9];
    v65 = v103;
    *(_OWORD *)v63 = *(_OWORD *)__p;
    *((_OWORD *)v63 + 1) = v65;
    v63[80] = 0;
    v63[104] = 0;
    *((_QWORD *)v63 + 14) = *(_QWORD *)v108;
    *(_QWORD *)(v63 + 117) = *(_QWORD *)&v108[5];
    v63[160] = 0;
    v63[264] = 0;
    *((_QWORD *)v63 + 17) = 0;
    *((_QWORD *)v63 + 18) = 0;
    *((_QWORD *)v63 + 16) = 0;
    *((_WORD *)v63 + 76) = 0;
    v115 = (unsigned __int8 *)v63;
    v116 = (unsigned __int8 *)(v63 + 272);
  }
  webrtc::RtpTransmissionManager::CreateSender((uint64_t)a1, !v43, &v119, &v118, (uint64_t)&v122, (uint64_t)&v115, &v121);
  v66 = v115;
  if (v115)
  {
    v67 = v116;
    v68 = v115;
    if (v116 != v115)
    {
      do
        webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v67 - 272));
      while (v67 != v66);
      v68 = v115;
    }
    v116 = v66;
    operator delete(v68);
  }
  if (!a4)
    webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)__p);
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  if ((char)v120 < 0)
    operator delete((void *)v119);
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 32))(&v119);
  if ((char)v120 < 0)
  {
    v70 = *((_QWORD *)&v119 + 1);
    if ((*((_QWORD *)&v119 + 1) & 0x8000000000000000) != 0)
      goto LABEL_139;
    v69 = (__int128 *)v119;
    if (*((_QWORD *)&v119 + 1))
    {
      if (!(_QWORD)v119)
        goto LABEL_139;
    }
  }
  else
  {
    v69 = &v119;
    v70 = v120;
  }
  if (v70 == 5)
  {
    v71 = *(_DWORD *)v69;
    v72 = *((unsigned __int8 *)v69 + 4);
    v74 = v71 == *(_DWORD *)"audio" && v72 == cricket::kMediaTypeAudio[4];
    if ((v120 & 0x80) == 0)
    {
LABEL_95:
      v75 = v121;
      v76 = *(_QWORD *)(v121 + 24);
      v77 = (webrtc::RtpTransmissionManager *)a1;
      if (v74)
        goto LABEL_96;
      goto LABEL_100;
    }
  }
  else
  {
    v74 = 0;
    if ((v120 & 0x80) == 0)
      goto LABEL_95;
  }
  operator delete((void *)v119);
  v75 = v121;
  v76 = *(_QWORD *)(v121 + 24);
  v77 = (webrtc::RtpTransmissionManager *)a1;
  if (!v74)
  {
LABEL_100:
    webrtc::RtpTransmissionManager::GetVideoTransceiver(v77, &v119);
    v80 = *(_QWORD *)(*(_QWORD *)(v119 + 16) + 160);
    (*(void (**)(_QWORD))(*(_QWORD *)v119 + 8))(v119);
    if (v80)
      v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 48))(v80);
    else
      v81 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 184))(v76, v81);
    webrtc::RtpTransmissionManager::GetVideoTransceiver((webrtc::RtpTransmissionManager *)a1, &v119);
    v90 = v119;
    v91 = *(_QWORD **)(v119 + 16);
    v100 = (void (***)(_QWORD))v75;
    (**(void (***)(uint64_t))v75)(v75);
    webrtc::RtpTransceiver::AddSender(v91, &v100);
    if (v100)
      (*v100)[1](v100);
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(v75 + 24) + 80))(&v119);
    v92 = (unsigned __int8 **)v119;
    if (*((_QWORD *)&v119 + 1) != (_QWORD)v119)
    {
      v93 = (*(_QWORD *(**)(unsigned __int8 **__return_ptr))(**(_QWORD **)a2 + 40))(&v115);
      SenderInfo = webrtc::RtpTransmissionManager::FindSenderInfo((uint64_t)v93, a1 + 19, v92, &v115);
      if (SHIBYTE(v117) < 0)
        operator delete(v115);
      v87 = v119;
      if (!(_QWORD)v119)
        goto LABEL_128;
      v94 = *((_QWORD *)&v119 + 1);
      v89 = (void *)v119;
      if (*((_QWORD *)&v119 + 1) == (_QWORD)v119)
        goto LABEL_127;
      do
      {
        if (*(char *)(v94 - 1) < 0)
          operator delete(*(void **)(v94 - 24));
        v94 -= 24;
      }
      while (v94 != v87);
      goto LABEL_126;
    }
LABEL_139:
    __break(1u);
LABEL_140:
    abort();
  }
LABEL_96:
  webrtc::RtpTransmissionManager::GetAudioTransceiver(v77, &v119);
  v78 = *(_QWORD *)(*(_QWORD *)(v119 + 16) + 160);
  (*(void (**)(_QWORD))(*(_QWORD *)v119 + 8))(v119);
  if (v78)
    v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 56))(v78);
  else
    v79 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 184))(v76, v79);
  webrtc::RtpTransmissionManager::GetAudioTransceiver((webrtc::RtpTransmissionManager *)a1, &v119);
  v82 = v119;
  v83 = *(_QWORD **)(v119 + 16);
  v101 = (void (***)(_QWORD))v75;
  (**(void (***)(uint64_t))v75)(v75);
  webrtc::RtpTransceiver::AddSender(v83, &v101);
  if (v101)
    (*v101)[1](v101);
  (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(v75 + 24) + 80))(&v119);
  v84 = (unsigned __int8 **)v119;
  if (*((_QWORD *)&v119 + 1) == (_QWORD)v119)
    goto LABEL_139;
  v85 = (*(_QWORD *(**)(unsigned __int8 **__return_ptr))(**(_QWORD **)a2 + 40))(&v115);
  SenderInfo = webrtc::RtpTransmissionManager::FindSenderInfo((uint64_t)v85, a1 + 16, v84, &v115);
  if (SHIBYTE(v117) < 0)
    operator delete(v115);
  v87 = v119;
  if (!(_QWORD)v119)
    goto LABEL_128;
  v88 = *((_QWORD *)&v119 + 1);
  v89 = (void *)v119;
  if (*((_QWORD *)&v119 + 1) != (_QWORD)v119)
  {
    do
    {
      if (*(char *)(v88 - 1) < 0)
        operator delete(*(void **)(v88 - 24));
      v88 -= 24;
    }
    while (v88 != v87);
LABEL_126:
    v89 = (void *)v119;
  }
LABEL_127:
  *((_QWORD *)&v119 + 1) = v87;
  operator delete(v89);
LABEL_128:
  if (SenderInfo)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v75 + 24) + 192))(*(_QWORD *)(v75 + 24), *(unsigned int *)(SenderInfo + 48));
  (**(void (***)(uint64_t))v75)(v75);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 29) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  *(_DWORD *)a5 = 0;
  *(_BYTE *)(a5 + 38) = 0;
  *(_QWORD *)(a5 + 40) = v75;
  *(_BYTE *)(a5 + 48) = 1;
  v95 = v122;
  if (v122)
  {
    v96 = v123;
    v97 = v122;
    if (v123 != v122)
    {
      do
      {
        if (*(v96 - 1) < 0)
          operator delete(*((void **)v96 - 3));
        v96 -= 24;
      }
      while (v96 != v95);
      v97 = v122;
    }
    v123 = v95;
    operator delete(v97);
  }
}

uint64_t webrtc::RtpTransmissionManager::CreateSender@<X0>(uint64_t a1@<X0>, int a2@<W1>, __int128 *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v30;

  v13 = *(_QWORD *)(a1 + 184);
  v14 = *(_QWORD *)(v13 + 48);
  if (a2)
  {
    webrtc::VideoRtpSender::Create(*(_QWORD *)(v13 + 40), (uint64_t)a3, a1, &v30);
    v15 = v30;
    v16 = operator new();
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v15;
    *(_QWORD *)v16 = &unk_24C0B9408;
    *(_QWORD *)(v16 + 8) = &unk_24C0B94D8;
    *(_DWORD *)(v16 + 32) = 0;
    v17 = (unsigned int *)(v16 + 32);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = 16;
  }
  else
  {
    v20 = *(_QWORD *)(v13 + 40);
    v21 = *(_QWORD *)(a1 + 208);
    v22 = operator new();
    v23 = webrtc::AudioRtpSender::AudioRtpSender(v22, v20, a3, v21, a1);
    *(_QWORD *)v23 = &unk_24C0BD698;
    *(_QWORD *)(v23 + 8) = &unk_24C0BD738;
    v24 = v23 + 8;
    *(_QWORD *)(v23 + 16) = &unk_24C0BD8B0;
    *(_QWORD *)(v23 + 24) = &unk_24C0BD8D8;
    v25 = (unsigned int *)(v23 + 456);
    *(_DWORD *)(v23 + 456) = 0;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v16 = operator new();
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v24;
    *(_QWORD *)v16 = &unk_24C0B9408;
    *(_QWORD *)(v16 + 8) = &unk_24C0B94D8;
    *(_DWORD *)(v16 + 32) = 0;
    v27 = (unsigned int *)(v16 + 32);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v19 = 8;
  }
  *a7 = v16;
  **(_DWORD **)(a1 + 192) |= v19;
  webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::SetTrack(v16, *a4);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v16 + 24) + 200))(*(_QWORD *)(v16 + 24), a5);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v16 + 24) + 208))(*(_QWORD *)(v16 + 24), a6);
}

uint64_t webrtc::RtpTransmissionManager::FindSenderInfo(uint64_t a1, uint64_t *a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = *((_BYTE *)a3 + 23);
    if (v6 >= 0)
      v7 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v7 = a3[1];
    if (v6 >= 0)
      v8 = (unsigned __int8 *)a3;
    else
      v8 = *a3;
    v9 = *((_BYTE *)a4 + 23);
    if (v9 >= 0)
      v10 = (unsigned __int8 *)*((unsigned __int8 *)a4 + 23);
    else
      v10 = a4[1];
    if (v9 >= 0)
      v11 = (unsigned __int8 *)a4;
    else
      v11 = *a4;
    do
    {
      v12 = *(unsigned __int8 *)(v4 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (unsigned __int8 *)*(unsigned __int8 *)(v4 + 23);
      else
        v13 = *(unsigned __int8 **)(v4 + 8);
      if (v13 != v7)
        goto LABEL_15;
      if ((v12 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v4, v8, *(_QWORD *)(v4 + 8)))
          goto LABEL_15;
      }
      else if (*(_BYTE *)(v4 + 23))
      {
        v14 = 0;
        while (*(unsigned __int8 *)(v4 + v14) == v8[v14])
        {
          if (v12 == ++v14)
            goto LABEL_25;
        }
        goto LABEL_15;
      }
LABEL_25:
      v15 = *(unsigned __int8 *)(v4 + 47);
      if ((v15 & 0x80u) == 0)
        v16 = (unsigned __int8 *)*(unsigned __int8 *)(v4 + 47);
      else
        v16 = *(unsigned __int8 **)(v4 + 32);
      if (v16 == v10)
      {
        if ((v15 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v4 + 24), v11, *(_QWORD *)(v4 + 32)))
            return v4;
        }
        else
        {
          if (!*(_BYTE *)(v4 + 47))
            return v4;
          v17 = 0;
          while (*(unsigned __int8 *)(v4 + v17 + 24) == v11[v17])
          {
            if (v15 == ++v17)
              return v4;
          }
        }
      }
LABEL_15:
      v4 += 56;
    }
    while (v4 != v5);
  }
  return 0;
}

void webrtc::RtpTransmissionManager::FindFirstTransceiverForAddedTrack(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  char *v9;
  uint64_t v10;
  void (***v11)(_QWORD);
  _BOOL4 v13;
  _BOOL4 v15;
  _BOOL4 v17;
  _QWORD **v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  rtc::webrtc_checks_impl *v22;
  unsigned __int8 v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  void **v28;
  void **p_s1;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  void *__p[2];
  unsigned __int8 v36;
  void *__s1;
  size_t __n;
  char v39;
  uint64_t v40;
  uint64_t v41;

  if (a4)
    goto LABEL_2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 - v5;
  if (v6 == v5)
    goto LABEL_2;
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_80;
  v9 = (char *)operator new(v7);
  v10 = 0;
  do
  {
    v11 = *(void (****)(_QWORD))(v5 + v10);
    *(_QWORD *)&v9[v10] = v11;
    if (v11)
      (**v11)(v11);
    v10 += 8;
  }
  while (v5 + v10 != v6);
  if (!v10)
  {
    operator delete(v9);
LABEL_2:
    *a1 = 0;
    return;
  }
  v13 = &__s1 <= (void **)"data" && (char *)&__s1 + 4 > "data";
  v34 = v13;
  v15 = &__s1 <= (void **)"video" && (char *)&__s1 + 5 > "video";
  v33 = v15;
  v17 = &__s1 <= (void **)"audio" && (char *)&__s1 + 5 > "audio";
  v32 = v17;
  v18 = (_QWORD **)v9;
  while (2)
  {
    v19 = *v18;
    *a1 = *v18;
    if (v19)
      (*(void (**)(_QWORD *))*v19)(v19);
    (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v19 + 48))(&v40, v19);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v40 + 40))(&v41);
    v20 = v41;
    if (v41)
    {
      v21 = 0;
LABEL_62:
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      goto LABEL_63;
    }
    v22 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD *))(*v19 + 32))(v19);
    switch((int)v22)
    {
      case 0:
        v39 = 5;
        if (v32)
          goto LABEL_79;
        LODWORD(__s1) = *(_DWORD *)"audio";
        v23 = cricket::kMediaTypeAudio[4];
        goto LABEL_38;
      case 1:
        v39 = 5;
        if (v33)
          goto LABEL_79;
        LODWORD(__s1) = *(_DWORD *)"video";
        v23 = cricket::kMediaTypeVideo[4];
LABEL_38:
        WORD2(__s1) = v23;
        goto LABEL_42;
      case 2:
        v39 = 4;
        if (v34)
        {
LABEL_79:
          __break(1u);
LABEL_80:
          abort();
        }
        strcpy((char *)&__s1, "data");
LABEL_42:
        (*(void (**)(void **__return_ptr))(**(_QWORD **)a3 + 32))(__p);
        v24 = v39;
        if (v39 >= 0)
          v25 = v39;
        else
          v25 = __n;
        v26 = v36;
        v27 = v36;
        if ((v36 & 0x80u) != 0)
          v26 = (unint64_t)__p[1];
        if (v25 != v26)
          goto LABEL_59;
        if ((v36 & 0x80u) == 0)
          v28 = __p;
        else
          v28 = (void **)__p[0];
        if (v39 < 0)
        {
          if (memcmp(__s1, v28, __n))
            goto LABEL_59;
        }
        else if (v39)
        {
          p_s1 = &__s1;
          while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v28)
          {
            p_s1 = (void **)((char *)p_s1 + 1);
            v28 = (void **)((char *)v28 + 1);
            if (!--v24)
              goto LABEL_58;
          }
LABEL_59:
          v21 = 0;
          if ((v27 & 0x80) == 0)
            goto LABEL_60;
          goto LABEL_69;
        }
LABEL_58:
        if (*(_BYTE *)(v19[2] + 154))
          goto LABEL_59;
        v21 = (*(uint64_t (**)(_QWORD *, void **))(*v19 + 64))(v19, v28) ^ 1;
        if ((v36 & 0x80) == 0)
        {
LABEL_60:
          if ((v39 & 0x80000000) == 0)
            goto LABEL_61;
          goto LABEL_70;
        }
LABEL_69:
        operator delete(__p[0]);
        if ((v39 & 0x80000000) == 0)
        {
LABEL_61:
          v20 = v41;
          if (!v41)
            goto LABEL_63;
          goto LABEL_62;
        }
LABEL_70:
        operator delete(__s1);
        v20 = v41;
        if (v41)
          goto LABEL_62;
LABEL_63:
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        if ((v21 & 1) == 0)
        {
          (*(void (**)(_QWORD *))(*v19 + 8))(v19);
          if (++v18 != (_QWORD **)&v9[v10 & 0xFFFFFFFFFFFFFFF8])
            continue;
        }
        v30 = 8 * (v10 >> 3);
        do
        {
          v31 = *(_QWORD *)&v9[v30 - 8];
          if (v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v30 -= 8;
        }
        while (v30);
        operator delete(v9);
        if ((v21 & 1) == 0)
          goto LABEL_2;
        return;
      case 3:
        v39 = 0;
        LOBYTE(__s1) = 0;
        goto LABEL_42;
      default:
        rtc::webrtc_checks_impl::UnreachableCodeReached(v22);
    }
  }
}

void webrtc::RtpTransmissionManager::FindSenderById(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v8;
  uint64_t v9;
  void (***v10)(_QWORD);
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  void (***v19)(_QWORD);
  char *v20;
  uint64_t *v21;
  void *v22;
  int v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void *__s1;
  size_t __n;
  unsigned __int8 v45;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 - v4;
  if (v5 == v4)
    goto LABEL_59;
  if ((v6 & 0x8000000000000000) != 0)
LABEL_61:
    abort();
  v8 = (char *)operator new(v6);
  v9 = 0;
  do
  {
    v10 = *(void (****)(_QWORD))(v4 + v9);
    *(_QWORD *)&v8[v9] = v10;
    if (v10)
      (**v10)(v10);
    v9 += 8;
  }
  while (v4 + v9 != v5);
  if (!v9)
  {
    operator delete(v8);
LABEL_59:
    *a3 = 0;
    return;
  }
  v39 = v9 >> 3;
  v40 = v8;
  v11 = &v8[v9 & 0xFFFFFFFFFFFFFFF8];
  v12 = v8;
  v41 = v11;
  do
  {
    v13 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    v14 = *(_QWORD *)(v13 + 32);
    v15 = *(_QWORD *)(v13 + 40);
    v16 = v15 - v14;
    if (v15 == v14)
      goto LABEL_10;
    if ((v16 & 0x8000000000000000) != 0)
      goto LABEL_61;
    v17 = (char *)operator new(v16);
    v18 = 0;
    do
    {
      v19 = *(void (****)(_QWORD))(v14 + v18);
      *(_QWORD *)&v17[v18] = v19;
      if (v19)
        (**v19)(v19);
      v18 += 8;
    }
    while (v14 + v18 != v15);
    if (!v18)
    {
      operator delete(v17);
      goto LABEL_10;
    }
    v42 = v18 >> 3;
    v20 = &v17[v18 & 0xFFFFFFFFFFFFFFF8];
    v21 = (uint64_t *)v17;
    while (1)
    {
      v24 = *v21;
      *a3 = *v21;
      if (v24)
        (**(void (***)(uint64_t))v24)(v24);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v24 + 72))(&__s1, v24);
      if ((v45 & 0x80u) == 0)
        v25 = v45;
      else
        v25 = __n;
      v26 = *(unsigned __int8 *)(a2 + 23);
      v27 = (char)v26;
      if ((v26 & 0x80u) != 0)
        v26 = *(_QWORD *)(a2 + 8);
      if (v25 != v26)
      {
        if ((v45 & 0x80) != 0)
          operator delete(__s1);
        goto LABEL_20;
      }
      v28 = v27 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v45 & 0x80) == 0)
        break;
      v22 = __s1;
      v23 = memcmp(__s1, v28, __n);
      operator delete(v22);
      if (!v23)
        goto LABEL_46;
LABEL_20:
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      if (++v21 == (uint64_t *)v20)
      {
        v33 = 0;
        v34 = 1;
        goto LABEL_47;
      }
    }
    if (v45)
    {
      v29 = 0;
      do
      {
        v30 = *((unsigned __int8 *)&__s1 + v29);
        v31 = v28[v29];
      }
      while (v30 == v31 && v45 - 1 != v29++);
      if (v30 != v31)
        goto LABEL_20;
    }
LABEL_46:
    v34 = 0;
    v33 = 1;
LABEL_47:
    v11 = v41;
    v35 = 8 * v42;
    do
    {
      v36 = *(_QWORD *)&v17[v35 - 8];
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      v35 -= 8;
    }
    while (v35);
    operator delete(v17);
    if ((v34 & 1) == 0)
      goto LABEL_52;
LABEL_10:
    v12 += 8;
  }
  while (v12 != v11);
  v33 = 2;
LABEL_52:
  v37 = 8 * v39;
  do
  {
    v38 = *(_QWORD *)&v40[v37 - 8];
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v37 -= 8;
  }
  while (v37);
  operator delete(v40);
  if (v33 == 2)
    goto LABEL_59;
}

int8x16_t *webrtc::RtpTransmissionManager::CreateReceiver@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int8x16_t **a4@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  void **v10;
  void **i;
  unsigned int *v12;
  int v13;
  void **v14;
  void **j;
  unsigned int v16;
  int8x16_t *result;
  unsigned int *v18;
  unsigned int v19;
  int8x16_t v20;
  void *__p;
  void **v22;
  uint64_t v23;
  std::string v24;

  v20 = *(int8x16_t *)(*(_QWORD *)(a1 + 184) + 40);
  if (a2)
  {
    v7 = operator new();
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v24 = *(std::string *)a3;
    __p = 0;
    v22 = 0;
    v23 = 0;
    webrtc::VideoRtpReceiver::VideoRtpReceiver(v7, v20.i64[0], (__int128 *)&v24, (uint64_t)&__p);
    v10 = (void **)__p;
    if (__p)
    {
      for (i = v22; i != v10; i -= 3)
      {
        if (*((char *)i - 1) < 0)
          operator delete(*(i - 3));
      }
      operator delete(v10);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    *(_QWORD *)v7 = off_24C0BE550;
    *(_QWORD *)(v7 + 8) = &unk_24C0BE658;
    *(_DWORD *)(v7 + 180) = 0;
    v12 = (unsigned int *)(v7 + 180);
    v13 = 16;
  }
  else
  {
    v8 = *(unsigned __int8 *)(a1 + 177);
    v9 = operator new();
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v24 = *(std::string *)a3;
    __p = 0;
    v22 = 0;
    v23 = 0;
    webrtc::AudioRtpReceiver::AudioRtpReceiver(v9, v20.i64[0], (__int128 *)&v24, (uint64_t)&__p, v8 != 0, 0);
    v14 = (void **)__p;
    if (__p)
    {
      for (j = v22; j != v14; j -= 3)
      {
        if (*((char *)j - 1) < 0)
          operator delete(*(j - 3));
      }
      operator delete(v14);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    *(_QWORD *)(v9 + 16) = &unk_24C0BE428;
    v7 = v9 + 16;
    *(_QWORD *)v9 = &off_24C0BE300;
    *(_QWORD *)(v9 + 8) = &unk_24C0BE400;
    *(_QWORD *)(v9 + 24) = &unk_24C0BE528;
    *(_DWORD *)(v9 + 200) = 0;
    v12 = (unsigned int *)(v9 + 200);
    v13 = 8;
  }
  do
    v16 = __ldxr(v12);
  while (__stxr(v16 + 1, v12));
  result = (int8x16_t *)operator new();
  result[1] = vextq_s8(v20, v20, 8uLL);
  result[2].i64[0] = v7;
  result->i64[0] = (uint64_t)off_24C0BE148;
  result->i64[1] = (uint64_t)&unk_24C0BE200;
  result[2].i32[2] = 0;
  v18 = &result[2].u32[2];
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  *a4 = result;
  **(_DWORD **)(a1 + 192) |= v13;
  return result;
}

_QWORD *webrtc::RtpTransmissionManager::CreateAndAddTransceiver@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, void (****a3)(_QWORD)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  void (***v28)(_QWORD);
  void (***v29)(_QWORD);
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void **v34;
  void **v35;
  void *v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  void (***v40)(_QWORD);
  unsigned int *v41;
  unsigned int v42;
  void **v43;
  void **v44;
  void *v45;
  _QWORD *v46;
  _QWORD *result;
  void (***v48)(_QWORD);
  void *v49[2];
  uint64_t v50;
  void *__p[2];
  uint64_t v52;
  void (***v53)(_QWORD);
  void (***v54)(_QWORD);
  char v55[24];
  char *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1[23] + 48);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
  v10 = 32;
  if (!v9)
    v10 = 24;
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[23] + 96) + v10))(*(_QWORD *)(a1[23] + 96));
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v11 + 16))(v49);
  v12 = a1[31];
  if (v12 && (v13 = atomic_load((unsigned int *)(v12 + 4)), v13 != 1))
  {
    v14 = (_QWORD *)a1[31];
    if (!v14)
    {
      v23 = a1[32];
      goto LABEL_22;
    }
  }
  else
  {
    v14 = (_QWORD *)operator new();
    *v14 = 1;
    v15 = (unsigned int *)v14 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = a1[31];
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 4);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        MEMORY[0x20BD0ADEC]();
    }
    a1[31] = v14;
  }
  v21 = (unsigned int *)v14 + 1;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v23 = a1[32];
  do
    v24 = __ldxr(v21);
  while (__stxr(v24 + 1, v21));
  do
  {
    v25 = __ldaxr(v21);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v21));
  if (!v26)
    MEMORY[0x20BD0ADEC](v14, 0x1000C404A09149ALL);
LABEL_22:
  v27 = operator new();
  v28 = (void (***)(_QWORD))*a2;
  v54 = v28;
  if (v28)
    (**v28)(v28);
  v29 = *a3;
  v53 = v29;
  if (v29)
    (**v29)(v29);
  v30 = (char *)a1[23];
  *(_OWORD *)__p = *(_OWORD *)v49;
  v52 = v50;
  v49[1] = 0;
  v50 = 0;
  v49[0] = 0;
  v31 = (char *)operator new(0x18uLL);
  *(_QWORD *)v31 = &off_24C0BE680;
  *((_QWORD *)v31 + 1) = v14;
  *((_QWORD *)v31 + 2) = v23;
  v56 = v31;
  webrtc::RtpTransceiver::RtpTransceiver(v27, (const char *)&v54, (char *)&v53, v30, (char *)__p, v55);
  v32 = v56;
  if (v56 == v55)
  {
    v33 = 4;
    v32 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_31;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_31:
  v34 = (void **)__p[0];
  if (__p[0])
  {
    v35 = (void **)__p[1];
    v36 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v35 - 17) < 0)
          operator delete(*(v35 - 5));
        v35 -= 5;
      }
      while (v35 != v34);
      v36 = __p[0];
    }
    __p[1] = v34;
    operator delete(v36);
  }
  if (v53)
    (*v53)[1](v53);
  if (v54)
    (*v54)[1](v54);
  *(_QWORD *)v27 = &unk_24C0B9788;
  v37 = (unsigned int *)(v27 + 280);
  *(_DWORD *)(v27 + 280) = 0;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
  v39 = operator new();
  v40 = (void (***)(_QWORD))v39;
  *(_QWORD *)(v39 + 16) = v27;
  *(_QWORD *)v39 = off_24C0B95F0;
  *(_QWORD *)(v39 + 8) = v8;
  *(_DWORD *)(v39 + 24) = 0;
  v41 = (unsigned int *)(v39 + 24);
  *a4 = v39;
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
  v43 = (void **)v49[0];
  if (v49[0])
  {
    v44 = (void **)v49[1];
    v45 = v49[0];
    if (v49[1] != v49[0])
    {
      do
      {
        if (*((char *)v44 - 17) < 0)
          operator delete(*(v44 - 5));
        v44 -= 5;
      }
      while (v44 != v43);
      v45 = v49[0];
    }
    v49[1] = v43;
    operator delete(v45);
    v48 = v40;
    (**v40)(v40);
    v46 = (_QWORD *)a1[2];
    if ((unint64_t)v46 < a1[3])
      goto LABEL_55;
LABEL_58:
    result = std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>((uint64_t)(a1 + 1), &v48);
    v40 = v48;
    a1[2] = result;
    if (!v40)
      return result;
    return (_QWORD *)((uint64_t (*)(_QWORD))(*v40)[1])(v40);
  }
  v48 = (void (***)(_QWORD))v39;
  rtc::RefCountedObject<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>::AddRef(v39);
  v46 = (_QWORD *)a1[2];
  if ((unint64_t)v46 >= a1[3])
    goto LABEL_58;
LABEL_55:
  if (!v46)
    __break(1u);
  *v46 = v40;
  (**v40)(v40);
  a1[2] = v46 + 1;
  return (_QWORD *)((uint64_t (*)(_QWORD))(*v40)[1])(v40);
}

void webrtc::RtpTransmissionManager::GetSendersInternal(webrtc::RtpTransmissionManager *this@<X0>, char **a2@<X8>)
{
  webrtc::RtpTransmissionManager *v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  void (***v8)(_QWORD);
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  void (***v19)(_QWORD);
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  void (***v39)(_QWORD);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (***v52)(_QWORD);
  char *v53;
  uint64_t v54;
  char *v55;
  void (****v56)(_QWORD);
  void (***v57)(_QWORD);
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  webrtc::RtpTransmissionManager *v94;
  uint64_t v96;
  char *v97;
  char *__p;

  v2 = this;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_109;
    v6 = (char *)operator new(v5);
    v7 = 0;
    do
    {
      v8 = *(void (****)(_QWORD))(v3 + v7);
      *(_QWORD *)&v6[v7] = v8;
      if (v8)
        (**v8)(v8);
      v7 += 8;
    }
    while (v3 + v7 != v4);
    if (v7)
    {
      v9 = 0;
      v88 = v7 >> 3;
      v89 = v6;
      v10 = &v6[v7 & 0xFFFFFFFFFFFFFFF8];
      v11 = v6;
      v93 = v10;
      v94 = v2;
      v12 = a2;
      while (1)
      {
        if (*((_BYTE *)v2 + 177)
          && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v11 + 16) + 64))(*(_QWORD *)(*(_QWORD *)v11 + 16)) & 1) != 0)
        {
          goto LABEL_10;
        }
        v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
        v14 = *(_QWORD *)(v13 + 32);
        v15 = *(_QWORD *)(v13 + 40);
        v16 = v15 - v14;
        if (v15 == v14)
          break;
        if ((v16 & 0x8000000000000000) != 0)
          goto LABEL_109;
        v17 = (char *)operator new(v16);
        v18 = 0;
        do
        {
          v19 = *(void (****)(_QWORD))(v14 + v18);
          *(_QWORD *)&v17[v18] = v19;
          if (v19)
            (**v19)(v19);
          v18 += 8;
        }
        while (v14 + v18 != v15);
        v20 = &v17[v18];
        v21 = 0uLL;
        __p = v17;
        v22 = v18;
        if (v18 < 1)
          goto LABEL_31;
        v97 = v11;
        v23 = v18 >> 3;
        v24 = *v12;
        v25 = v9 - *v12;
        v26 = v25 >> 3;
        v27 = &(*v12)[v25 & 0xFFFFFFFFFFFFFFF8];
        v28 = v12[2];
        v96 = v25 >> 3;
        if (v22 >> 3 > (v28 - v9) >> 3)
        {
          v29 = v26 + v23;
          if ((unint64_t)(v26 + v23) >> 61)
            goto LABEL_109;
          v30 = v28 - v24;
          if (v30 >> 2 > v29)
            v29 = v30 >> 2;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            if (v31 >> 61)
              std::__throw_bad_array_new_length[abi:sn180100]();
            v32 = (char *)operator new(8 * v31);
            v21 = 0uLL;
          }
          else
          {
            v32 = 0;
          }
          v53 = &v32[8 * v26];
          v91 = v32;
          v92 = &v32[8 * v31];
          v54 = 8 * v23;
          v9 = &v53[v54];
          v90 = v54;
          v55 = v53;
          v56 = (void (****)(_QWORD))__p;
          do
          {
            if (!v55)
              goto LABEL_108;
            v57 = *v56;
            *(_QWORD *)v55 = *v56;
            if (v57)
            {
              (**v57)(v57);
              v21 = 0uLL;
            }
            v55 += 8;
            ++v56;
            v54 -= 8;
          }
          while (v54);
          v58 = v25 - 8;
          if ((unint64_t)v25 < 8)
          {
            v2 = v94;
            v12 = a2;
            v59 = v92;
            goto LABEL_76;
          }
          v2 = v94;
          v12 = a2;
          v59 = v92;
          if (v58 < 0x58)
          {
            v60 = v27;
            goto LABEL_75;
          }
          if (v24 < v53)
          {
            v60 = v27;
            if (v91 < v27)
              goto LABEL_113;
          }
          v61 = (v58 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v60 = &v27[-v62];
          v53 -= v62;
          v63 = &v91[8 * v96 - 16];
          v64 = &v24[8 * v96 - 16];
          v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v67 = *((_OWORD *)v64 - 1);
            v66 = *(_OWORD *)v64;
            *((_OWORD *)v64 - 1) = v21;
            *(_OWORD *)v64 = v21;
            *((_OWORD *)v63 - 1) = v67;
            *(_OWORD *)v63 = v66;
            v63 -= 32;
            v64 -= 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_113:
            do
            {
LABEL_75:
              v68 = *((_QWORD *)v60 - 1);
              v60 -= 8;
              *(_QWORD *)v60 = 0;
              *((_QWORD *)v53 - 1) = v68;
              v53 -= 8;
            }
            while (v60 != v24);
          }
LABEL_76:
          v69 = v12[1];
          if (v69 == v27)
          {
            v33 = __p;
          }
          else
          {
            v70 = v69 - &v24[v25 & 0xFFFFFFFFFFFFFFF8] - 8;
            if (v70 < 0x98)
            {
              v33 = __p;
              goto LABEL_88;
            }
            v71 = (v25 & 0xFFFFFFFFFFFFFFF8) + (v70 & 0xFFFFFFFFFFFFFFF8);
            v72 = v27 >= &v91[(v22 & 0xFFFFFFFFFFFFFFF8) + 8 + v71] || v9 >= &v24[v71 + 8];
            v33 = __p;
            if (!v72)
              goto LABEL_114;
            v73 = (v70 >> 3) + 1;
            v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
            v27 += v74;
            v9 += v74;
            v75 = &v91[8 * v96 + 16 + v90];
            v76 = &v24[8 * v96 + 16];
            v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v78 = *((_OWORD *)v76 - 1);
              v79 = *(_OWORD *)v76;
              *((_OWORD *)v76 - 1) = v21;
              *(_OWORD *)v76 = v21;
              *((_OWORD *)v75 - 1) = v78;
              *(_OWORD *)v75 = v79;
              v75 += 32;
              v76 += 32;
              v77 -= 4;
            }
            while (v77);
            if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_114:
              do
              {
LABEL_88:
                v80 = *(_QWORD *)v27;
                *(_QWORD *)v27 = 0;
                v27 += 8;
                *(_QWORD *)v9 = v80;
                v9 += 8;
              }
              while (v27 != v69);
            }
            v27 = v69;
          }
          v81 = *v12;
          *v12 = v53;
          v12[1] = v9;
          v12[2] = v59;
          while (v27 != v81)
          {
            v83 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            v82 = v83;
            if (v83)
              (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
          }
          if (v81)
            operator delete(v81);
          v10 = v93;
          v11 = v97;
          if (!v33)
            goto LABEL_10;
          goto LABEL_97;
        }
        v34 = (v9 - v27) >> 3;
        if (v34 >= v23)
        {
          v33 = __p;
          v35 = &__p[8 * v23];
          v36 = v9;
          v40 = 8 * v23;
          v41 = &v9[-8 * v23];
          v42 = v9;
          if (v41 < v9)
            goto LABEL_44;
LABEL_46:
          v44 = &v27[v40];
          v12[1] = v42;
          if (v36 != v44)
          {
            v45 = (v36 - v44) >> 3;
            v46 = (uint64_t *)(v36 - 8);
            v47 = 8 * v45;
            v48 = (uint64_t)&v24[8 * v96 - 8];
            do
            {
              v49 = *(_QWORD *)(v48 + v47);
              *(_QWORD *)(v48 + v47) = 0;
              v50 = *v46;
              *v46 = v49;
              if (v50)
                (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
              --v46;
              v47 -= 8;
            }
            while (v47);
          }
          if (v35 != v33)
          {
            v51 = v33;
            do
            {
              v52 = *(void (****)(_QWORD))v51;
              if (*(_QWORD *)v51)
                (**v52)(*(_QWORD *)v51);
              if (*(_QWORD *)v27)
                (*(void (**)(_QWORD))(**(_QWORD **)v27 + 8))(*(_QWORD *)v27);
              *(_QWORD *)v27 = v52;
              v27 += 8;
              v51 += 8;
            }
            while (v51 != v35);
          }
          v9 = v42;
          v2 = v94;
          v12 = a2;
          v10 = v93;
          v11 = v97;
          if (!v33)
            goto LABEL_10;
LABEL_97:
          while (v20 != v33)
          {
            v85 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            v84 = v85;
            if (v85)
              (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
          }
          operator delete(v33);
          goto LABEL_10;
        }
        v35 = &__p[8 * v34];
        v36 = v9;
        if (v35 != v20)
        {
          v37 = &__p[8 * v34];
          v38 = v9;
          while (v38)
          {
            v39 = *(void (****)(_QWORD))v37;
            *(_QWORD *)v38 = *(_QWORD *)v37;
            if (v39)
              (**v39)(v39);
            v37 += 8;
            v38 += 8;
            v36 += 8;
            if (v37 == v20)
              goto LABEL_42;
          }
LABEL_108:
          __break(1u);
LABEL_109:
          abort();
        }
LABEL_42:
        v12[1] = v36;
        if (v9 - v27 >= 1)
        {
          v33 = __p;
          v40 = 8 * v23;
          v41 = &v36[-8 * v23];
          v42 = v36;
          if (v41 < v9)
          {
LABEL_44:
            while (v42)
            {
              v43 = *(_QWORD *)v41;
              *(_QWORD *)v41 = 0;
              v41 += 8;
              *(_QWORD *)v42 = v43;
              v42 += 8;
              if (v41 >= v9)
                goto LABEL_46;
            }
            goto LABEL_108;
          }
          goto LABEL_46;
        }
        v9 = v36;
        v10 = v93;
        v2 = v94;
        v11 = v97;
        v33 = __p;
        if (__p)
          goto LABEL_97;
LABEL_10:
        v11 += 8;
        if (v11 == v10)
        {
          v6 = v89;
          v86 = 8 * v88;
          do
          {
            v87 = *(_QWORD *)&v89[v86 - 8];
            if (v87)
              (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
            v86 -= 8;
          }
          while (v86);
          goto LABEL_107;
        }
      }
      v20 = 0;
      __p = 0;
LABEL_31:
      v33 = __p;
      if (__p)
        goto LABEL_97;
      goto LABEL_10;
    }
LABEL_107:
    operator delete(v6);
  }
}

void webrtc::RtpTransmissionManager::GetReceiversInternal(webrtc::RtpTransmissionManager *this@<X0>, char **a2@<X8>)
{
  webrtc::RtpTransmissionManager *v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  void (***v8)(_QWORD);
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  void (***v19)(_QWORD);
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  void (***v39)(_QWORD);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (***v52)(_QWORD);
  char *v53;
  uint64_t v54;
  char *v55;
  void (****v56)(_QWORD);
  void (***v57)(_QWORD);
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  webrtc::RtpTransmissionManager *v94;
  uint64_t v96;
  char *v97;
  char *__p;

  v2 = this;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_109;
    v6 = (char *)operator new(v5);
    v7 = 0;
    do
    {
      v8 = *(void (****)(_QWORD))(v3 + v7);
      *(_QWORD *)&v6[v7] = v8;
      if (v8)
        (**v8)(v8);
      v7 += 8;
    }
    while (v3 + v7 != v4);
    if (v7)
    {
      v9 = 0;
      v88 = v7 >> 3;
      v89 = v6;
      v10 = &v6[v7 & 0xFFFFFFFFFFFFFFF8];
      v11 = v6;
      v93 = v10;
      v94 = v2;
      v12 = a2;
      while (1)
      {
        if (*((_BYTE *)v2 + 177)
          && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v11 + 16) + 64))(*(_QWORD *)(*(_QWORD *)v11 + 16)) & 1) != 0)
        {
          goto LABEL_10;
        }
        v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
        v14 = *(_QWORD *)(v13 + 56);
        v15 = *(_QWORD *)(v13 + 64);
        v16 = v15 - v14;
        if (v15 == v14)
          break;
        if ((v16 & 0x8000000000000000) != 0)
          goto LABEL_109;
        v17 = (char *)operator new(v16);
        v18 = 0;
        do
        {
          v19 = *(void (****)(_QWORD))(v14 + v18);
          *(_QWORD *)&v17[v18] = v19;
          if (v19)
            (**v19)(v19);
          v18 += 8;
        }
        while (v14 + v18 != v15);
        v20 = &v17[v18];
        v21 = 0uLL;
        __p = v17;
        v22 = v18;
        if (v18 < 1)
          goto LABEL_31;
        v97 = v11;
        v23 = v18 >> 3;
        v24 = *v12;
        v25 = v9 - *v12;
        v26 = v25 >> 3;
        v27 = &(*v12)[v25 & 0xFFFFFFFFFFFFFFF8];
        v28 = v12[2];
        v96 = v25 >> 3;
        if (v22 >> 3 > (v28 - v9) >> 3)
        {
          v29 = v26 + v23;
          if ((unint64_t)(v26 + v23) >> 61)
            goto LABEL_109;
          v30 = v28 - v24;
          if (v30 >> 2 > v29)
            v29 = v30 >> 2;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            if (v31 >> 61)
              std::__throw_bad_array_new_length[abi:sn180100]();
            v32 = (char *)operator new(8 * v31);
            v21 = 0uLL;
          }
          else
          {
            v32 = 0;
          }
          v53 = &v32[8 * v26];
          v91 = v32;
          v92 = &v32[8 * v31];
          v54 = 8 * v23;
          v9 = &v53[v54];
          v90 = v54;
          v55 = v53;
          v56 = (void (****)(_QWORD))__p;
          do
          {
            if (!v55)
              goto LABEL_108;
            v57 = *v56;
            *(_QWORD *)v55 = *v56;
            if (v57)
            {
              (**v57)(v57);
              v21 = 0uLL;
            }
            v55 += 8;
            ++v56;
            v54 -= 8;
          }
          while (v54);
          v58 = v25 - 8;
          if ((unint64_t)v25 < 8)
          {
            v2 = v94;
            v12 = a2;
            v59 = v92;
            goto LABEL_76;
          }
          v2 = v94;
          v12 = a2;
          v59 = v92;
          if (v58 < 0x58)
          {
            v60 = v27;
            goto LABEL_75;
          }
          if (v24 < v53)
          {
            v60 = v27;
            if (v91 < v27)
              goto LABEL_113;
          }
          v61 = (v58 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v60 = &v27[-v62];
          v53 -= v62;
          v63 = &v91[8 * v96 - 16];
          v64 = &v24[8 * v96 - 16];
          v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v67 = *((_OWORD *)v64 - 1);
            v66 = *(_OWORD *)v64;
            *((_OWORD *)v64 - 1) = v21;
            *(_OWORD *)v64 = v21;
            *((_OWORD *)v63 - 1) = v67;
            *(_OWORD *)v63 = v66;
            v63 -= 32;
            v64 -= 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_113:
            do
            {
LABEL_75:
              v68 = *((_QWORD *)v60 - 1);
              v60 -= 8;
              *(_QWORD *)v60 = 0;
              *((_QWORD *)v53 - 1) = v68;
              v53 -= 8;
            }
            while (v60 != v24);
          }
LABEL_76:
          v69 = v12[1];
          if (v69 == v27)
          {
            v33 = __p;
          }
          else
          {
            v70 = v69 - &v24[v25 & 0xFFFFFFFFFFFFFFF8] - 8;
            if (v70 < 0x98)
            {
              v33 = __p;
              goto LABEL_88;
            }
            v71 = (v25 & 0xFFFFFFFFFFFFFFF8) + (v70 & 0xFFFFFFFFFFFFFFF8);
            v72 = v27 >= &v91[(v22 & 0xFFFFFFFFFFFFFFF8) + 8 + v71] || v9 >= &v24[v71 + 8];
            v33 = __p;
            if (!v72)
              goto LABEL_114;
            v73 = (v70 >> 3) + 1;
            v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
            v27 += v74;
            v9 += v74;
            v75 = &v91[8 * v96 + 16 + v90];
            v76 = &v24[8 * v96 + 16];
            v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v78 = *((_OWORD *)v76 - 1);
              v79 = *(_OWORD *)v76;
              *((_OWORD *)v76 - 1) = v21;
              *(_OWORD *)v76 = v21;
              *((_OWORD *)v75 - 1) = v78;
              *(_OWORD *)v75 = v79;
              v75 += 32;
              v76 += 32;
              v77 -= 4;
            }
            while (v77);
            if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_114:
              do
              {
LABEL_88:
                v80 = *(_QWORD *)v27;
                *(_QWORD *)v27 = 0;
                v27 += 8;
                *(_QWORD *)v9 = v80;
                v9 += 8;
              }
              while (v27 != v69);
            }
            v27 = v69;
          }
          v81 = *v12;
          *v12 = v53;
          v12[1] = v9;
          v12[2] = v59;
          while (v27 != v81)
          {
            v83 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            v82 = v83;
            if (v83)
              (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
          }
          if (v81)
            operator delete(v81);
          v10 = v93;
          v11 = v97;
          if (!v33)
            goto LABEL_10;
          goto LABEL_97;
        }
        v34 = (v9 - v27) >> 3;
        if (v34 >= v23)
        {
          v33 = __p;
          v35 = &__p[8 * v23];
          v36 = v9;
          v40 = 8 * v23;
          v41 = &v9[-8 * v23];
          v42 = v9;
          if (v41 < v9)
            goto LABEL_44;
LABEL_46:
          v44 = &v27[v40];
          v12[1] = v42;
          if (v36 != v44)
          {
            v45 = (v36 - v44) >> 3;
            v46 = (uint64_t *)(v36 - 8);
            v47 = 8 * v45;
            v48 = (uint64_t)&v24[8 * v96 - 8];
            do
            {
              v49 = *(_QWORD *)(v48 + v47);
              *(_QWORD *)(v48 + v47) = 0;
              v50 = *v46;
              *v46 = v49;
              if (v50)
                (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
              --v46;
              v47 -= 8;
            }
            while (v47);
          }
          if (v35 != v33)
          {
            v51 = v33;
            do
            {
              v52 = *(void (****)(_QWORD))v51;
              if (*(_QWORD *)v51)
                (**v52)(*(_QWORD *)v51);
              if (*(_QWORD *)v27)
                (*(void (**)(_QWORD))(**(_QWORD **)v27 + 8))(*(_QWORD *)v27);
              *(_QWORD *)v27 = v52;
              v27 += 8;
              v51 += 8;
            }
            while (v51 != v35);
          }
          v9 = v42;
          v2 = v94;
          v12 = a2;
          v10 = v93;
          v11 = v97;
          if (!v33)
            goto LABEL_10;
LABEL_97:
          while (v20 != v33)
          {
            v85 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            v84 = v85;
            if (v85)
              (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
          }
          operator delete(v33);
          goto LABEL_10;
        }
        v35 = &__p[8 * v34];
        v36 = v9;
        if (v35 != v20)
        {
          v37 = &__p[8 * v34];
          v38 = v9;
          while (v38)
          {
            v39 = *(void (****)(_QWORD))v37;
            *(_QWORD *)v38 = *(_QWORD *)v37;
            if (v39)
              (**v39)(v39);
            v37 += 8;
            v38 += 8;
            v36 += 8;
            if (v37 == v20)
              goto LABEL_42;
          }
LABEL_108:
          __break(1u);
LABEL_109:
          abort();
        }
LABEL_42:
        v12[1] = v36;
        if (v9 - v27 >= 1)
        {
          v33 = __p;
          v40 = 8 * v23;
          v41 = &v36[-8 * v23];
          v42 = v36;
          if (v41 < v9)
          {
LABEL_44:
            while (v42)
            {
              v43 = *(_QWORD *)v41;
              *(_QWORD *)v41 = 0;
              v41 += 8;
              *(_QWORD *)v42 = v43;
              v42 += 8;
              if (v41 >= v9)
                goto LABEL_46;
            }
            goto LABEL_108;
          }
          goto LABEL_46;
        }
        v9 = v36;
        v10 = v93;
        v2 = v94;
        v11 = v97;
        v33 = __p;
        if (__p)
          goto LABEL_97;
LABEL_10:
        v11 += 8;
        if (v11 == v10)
        {
          v6 = v89;
          v86 = 8 * v88;
          do
          {
            v87 = *(_QWORD *)&v89[v86 - 8];
            if (v87)
              (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
            v86 -= 8;
          }
          while (v86);
          goto LABEL_107;
        }
      }
      v20 = 0;
      __p = 0;
LABEL_31:
      v33 = __p;
      if (__p)
        goto LABEL_97;
      goto LABEL_10;
    }
LABEL_107:
    operator delete(v6);
  }
}

void webrtc::RtpTransmissionManager::AddAudioTrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  void **v12;
  void **v13;
  void *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  char *v31;
  char *v32;
  void *v33;
  std::string *v34;
  void **p_data;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t SenderInfo;
  void (***v44)(_QWORD);
  void *v45;
  char *v46;
  char *v47;
  void *v48;
  std::string *v49;
  std::string *v50;
  uint64_t v51;
  void *__p[2];
  __int128 v53;
  __int128 v54;
  _BYTE v55[25];
  char v56;
  char v57;
  _BYTE v58[13];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  char v63;
  char v64;
  __int128 v65;
  std::string::size_type v66;
  __int128 v67;
  std::string::size_type v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  webrtc::RtpTransmissionManager::FindSenderForTrack(a1, a2, &v51);
  v6 = v51;
  if (!v51)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(&v67, a2);
    (**(void (***)(uint64_t))a2)(a2);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a3 + 32))(&v65, a3);
    v10 = (std::string *)operator new(0x18uLL);
    v11 = v10 + 1;
    v48 = v10;
    v50 = v10 + 1;
    if (SHIBYTE(v66) < 0)
    {
      std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v65, *((std::string::size_type *)&v65 + 1));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v65;
      v10->__r_.__value_.__r.__words[2] = v66;
    }
    v49 = v11;
    LOBYTE(__p[0]) = 0;
    BYTE4(__p[0]) = 0;
    __p[1] = (void *)0x3FF0000000000000;
    LODWORD(v53) = 1;
    BYTE4(v53) = 0;
    BYTE8(v53) = 0;
    BYTE12(v53) = 0;
    LOBYTE(v54) = 0;
    BYTE8(v54) = 0;
    v55[0] = 0;
    v55[8] = 0;
    v55[12] = 0;
    v55[16] = 0;
    v55[24] = 0;
    v56 = 0;
    v57 = 0;
    v58[0] = 0;
    v58[8] = 0;
    v58[12] = 1;
    v63 = 0;
    v64 = 0;
    v59 = 0;
    v60 = 0;
    v62 = 0;
    v61 = 0;
    v15 = (char *)operator new(0x110uLL);
    v47 = v15 + 272;
    v16 = *(_OWORD *)v55;
    *((_OWORD *)v15 + 2) = v54;
    *((_OWORD *)v15 + 3) = v16;
    *(_OWORD *)(v15 + 57) = *(_OWORD *)&v55[9];
    v17 = v53;
    *(_OWORD *)v15 = *(_OWORD *)__p;
    *((_OWORD *)v15 + 1) = v17;
    v15[80] = 0;
    v15[104] = 0;
    *((_QWORD *)v15 + 14) = *(_QWORD *)v58;
    *(_QWORD *)(v15 + 117) = *(_QWORD *)&v58[5];
    v15[160] = 0;
    v15[264] = 0;
    *((_QWORD *)v15 + 17) = 0;
    *((_QWORD *)v15 + 18) = 0;
    *((_QWORD *)v15 + 16) = 0;
    *((_WORD *)v15 + 76) = 0;
    v18 = *(_QWORD *)(a1 + 208);
    v19 = *(_QWORD *)(a1 + 184);
    v20 = *(_QWORD *)(v19 + 40);
    v21 = *(_QWORD *)(v19 + 48);
    v45 = v15;
    v46 = v15 + 272;
    v22 = operator new();
    v23 = webrtc::AudioRtpSender::AudioRtpSender(v22, v20, &v67, v18, a1);
    *(_QWORD *)v23 = &unk_24C0BD698;
    *(_QWORD *)(v23 + 8) = &unk_24C0BD738;
    v24 = v23 + 8;
    *(_QWORD *)(v23 + 16) = &unk_24C0BD8B0;
    *(_QWORD *)(v23 + 24) = &unk_24C0BD8D8;
    v25 = (unsigned int *)(v23 + 456);
    *(_DWORD *)(v23 + 456) = 0;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v27 = operator new();
    v28 = v27;
    *(_QWORD *)(v27 + 16) = v21;
    *(_QWORD *)(v27 + 24) = v24;
    *(_QWORD *)v27 = &unk_24C0B9408;
    *(_QWORD *)(v27 + 8) = &unk_24C0B94D8;
    *(_DWORD *)(v27 + 32) = 0;
    v29 = (unsigned int *)(v27 + 32);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    **(_DWORD **)(a1 + 192) |= 8u;
    webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::SetTrack(v27, a2);
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v28 + 24) + 200))(*(_QWORD *)(v28 + 24), &v48);
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v28 + 24) + 208))(*(_QWORD *)(v28 + 24), &v45);
    v31 = (char *)v45;
    if (v45)
    {
      v32 = v46;
      v33 = v45;
      if (v46 != v45)
      {
        do
          webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v32 - 272));
        while (v32 != v31);
        v33 = v45;
      }
      v46 = v31;
      operator delete(v33);
    }
    webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)__p);
    v34 = (std::string *)v48;
    if (v48)
    {
      p_data = (void **)&v49->__r_.__value_.__l.__data_;
      v36 = v48;
      if (v49 != v48)
      {
        do
        {
          if (*((char *)p_data - 1) < 0)
            operator delete(*(p_data - 3));
          p_data -= 3;
        }
        while (p_data != (void **)v34);
        v36 = v48;
      }
      v49 = v34;
      operator delete(v36);
    }
    if (SHIBYTE(v66) < 0)
    {
      operator delete((void *)v65);
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
      if ((SHIBYTE(v68) & 0x80000000) == 0)
        goto LABEL_37;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
      if ((SHIBYTE(v68) & 0x80000000) == 0)
        goto LABEL_37;
    }
    operator delete((void *)v67);
LABEL_37:
    v37 = *(_QWORD *)(v28 + 24);
    webrtc::RtpTransmissionManager::GetAudioTransceiver((webrtc::RtpTransmissionManager *)a1, __p);
    v38 = *(_QWORD *)(*((_QWORD *)__p[0] + 2) + 160);
    (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
    if (v38)
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 56))(v38);
    else
      v39 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 184))(v37, v39);
    webrtc::RtpTransmissionManager::GetAudioTransceiver((webrtc::RtpTransmissionManager *)a1, __p);
    v40 = __p[0];
    v41 = (_QWORD *)*((_QWORD *)__p[0] + 2);
    v44 = (void (***)(_QWORD))v28;
    (**(void (***)(uint64_t))v28)(v28);
    webrtc::RtpTransceiver::AddSender(v41, &v44);
    if (v44)
      (*v44)[1](v44);
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a3 + 32))(__p, a3);
    v42 = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(&v67, a2);
    SenderInfo = webrtc::RtpTransmissionManager::FindSenderInfo((uint64_t)v42, (uint64_t *)(a1 + 128), (unsigned __int8 **)__p, (unsigned __int8 **)&v67);
    if (SHIBYTE(v68) < 0)
    {
      operator delete((void *)v67);
      if ((SBYTE7(v53) & 0x80000000) == 0)
      {
LABEL_46:
        if (!SenderInfo)
        {
LABEL_48:
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v6 = v51;
          goto LABEL_49;
        }
LABEL_47:
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v28 + 24) + 192))(*(_QWORD *)(v28 + 24), *(unsigned int *)(SenderInfo + 48));
        goto LABEL_48;
      }
    }
    else if ((SBYTE7(v53) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__p[0]);
    if (!SenderInfo)
      goto LABEL_48;
    goto LABEL_47;
  }
  v7 = *(_QWORD *)(v51 + 24);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a3 + 32))(&v67, a3);
  v8 = (std::string *)operator new(0x18uLL);
  v9 = v8 + 1;
  __p[0] = v8;
  *(_QWORD *)&v53 = v8 + 1;
  if (SHIBYTE(v68) < 0)
  {
    std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v67, *((std::string::size_type *)&v67 + 1));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v67;
    v8->__r_.__value_.__r.__words[2] = v68;
  }
  __p[1] = v9;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 200))(v7, __p);
  v12 = (void **)__p[0];
  if (__p[0])
  {
    v13 = (void **)__p[1];
    v14 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v12);
      v14 = __p[0];
    }
    __p[1] = v12;
    operator delete(v14);
  }
  if (SHIBYTE(v68) < 0)
    operator delete((void *)v67);
LABEL_49:
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void webrtc::RtpTransmissionManager::FindSenderForTrack(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v8;
  uint64_t v9;
  void (***v10)(_QWORD);
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  void (***v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 - v4;
  if (v5 == v4)
    goto LABEL_39;
  if ((v6 & 0x8000000000000000) != 0)
LABEL_41:
    abort();
  v8 = (char *)operator new(v6);
  v9 = 0;
  do
  {
    v10 = *(void (****)(_QWORD))(v4 + v9);
    *(_QWORD *)&v8[v9] = v10;
    if (v10)
      (**v10)(v10);
    v9 += 8;
  }
  while (v4 + v9 != v5);
  if (!v9)
  {
    operator delete(v8);
LABEL_39:
    *a3 = 0;
    return;
  }
  v28 = v9 >> 3;
  v11 = &v8[v9 & 0xFFFFFFFFFFFFFFF8];
  v12 = v8;
  do
  {
    v13 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    v14 = *(_QWORD *)(v13 + 32);
    v15 = *(_QWORD *)(v13 + 40);
    v16 = v15 - v14;
    if (v15 != v14)
    {
      if ((v16 & 0x8000000000000000) != 0)
        goto LABEL_41;
      v17 = (char *)operator new(v16);
      v18 = 0;
      do
      {
        v19 = *(void (****)(_QWORD))(v14 + v18);
        *(_QWORD *)&v17[v18] = v19;
        if (v19)
          (**v19)(v19);
        v18 += 8;
      }
      while (v14 + v18 != v15);
      if (v18)
      {
        v20 = 0;
        v21 = 8 * (v18 >> 3);
        while (1)
        {
          v22 = *(_QWORD *)&v17[v20];
          *a3 = v22;
          if (v22)
            (**(void (***)(uint64_t))v22)(v22);
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v22 + 40))(&v29, v22);
          v23 = v29;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          if (v23 == a2)
            break;
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v20 += 8;
          if (v21 == v20)
          {
            v24 = 0;
            goto LABEL_29;
          }
        }
        v24 = 1;
        do
        {
LABEL_29:
          v25 = *(_QWORD *)&v17[v21 - 8];
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v21 -= 8;
        }
        while (v21);
        operator delete(v17);
        if (v23 == a2)
          goto LABEL_32;
      }
      else
      {
        operator delete(v17);
      }
    }
    v12 += 8;
  }
  while (v12 != v11);
  v24 = 2;
LABEL_32:
  v26 = 8 * v28;
  do
  {
    v27 = *(_QWORD *)&v8[v26 - 8];
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v26 -= 8;
  }
  while (v26);
  operator delete(v8);
  if (v24 == 2)
    goto LABEL_39;
}

void webrtc::RtpTransmissionManager::RemoveAudioTrack(webrtc::RtpTransmissionManager *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  uint64_t v23;

  webrtc::RtpTransmissionManager::FindSenderForTrack((uint64_t)a1, a2, &v23);
  v4 = v23;
  if (v23)
  {
    webrtc::RtpTransmissionManager::GetAudioTransceiver(a1, __p);
    v5 = __p[0];
    v6 = *((_QWORD *)__p[0] + 2);
    v8 = *(_QWORD **)(v6 + 32);
    v7 = *(_QWORD **)(v6 + 40);
    if (v8 != v7)
    {
      while (*v8 != v4)
      {
        if (++v8 == v7)
        {
          v8 = *(_QWORD **)(v6 + 40);
          break;
        }
      }
    }
    if (v8 == v7)
      goto LABEL_21;
    (*(void (**)(_QWORD))(**(_QWORD **)(*v8 + 24) + 224))(*(_QWORD *)(*v8 + 24));
    v9 = *(_QWORD **)(v6 + 40);
    if (v9 != v8)
    {
      v10 = v8 + 1;
      if (v8 + 1 != v9)
      {
        do
        {
          v11 = *(v10 - 1);
          *(v10 - 1) = *v10;
          *v10 = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          ++v10;
        }
        while (v10 != v9);
        v9 = *(_QWORD **)(v6 + 40);
        v8 = v10 - 1;
      }
      while (v9 != v8)
      {
        v20 = *--v9;
        v19 = v20;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      *(_QWORD *)(v6 + 40) = v8;
LABEL_21:
      (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return;
    }
    __break(1u);
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(__p, a2);
    rtc::webrtc_logging_impl::Log("\r\t\n\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc");
    if (v22 < 0)
      operator delete(__p[0]);
  }
}

void webrtc::RtpTransmissionManager::AddVideoTrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  void **v12;
  void **v13;
  void *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  char *v26;
  char *v27;
  void *v28;
  std::string *v29;
  void **p_data;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t SenderInfo;
  void (***v39)(_QWORD);
  void *v40;
  char *v41;
  char *v42;
  void *v43;
  std::string *v44;
  std::string *v45;
  uint64_t v46;
  uint64_t v47;
  void *__p[2];
  __int128 v49;
  __int128 v50;
  _BYTE v51[25];
  char v52;
  char v53;
  _BYTE v54[13];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  char v59;
  char v60;
  __int128 v61;
  std::string::size_type v62;
  __int128 v63;
  std::string::size_type v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  webrtc::RtpTransmissionManager::FindSenderForTrack(a1, a2, &v46);
  v6 = v46;
  if (!v46)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(&v63, a2);
    (**(void (***)(uint64_t))a2)(a2);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a3 + 32))(&v61, a3);
    v10 = (std::string *)operator new(0x18uLL);
    v11 = v10 + 1;
    v43 = v10;
    v45 = v10 + 1;
    if (SHIBYTE(v62) < 0)
    {
      std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v61, *((std::string::size_type *)&v61 + 1));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v61;
      v10->__r_.__value_.__r.__words[2] = v62;
    }
    v44 = v11;
    LOBYTE(__p[0]) = 0;
    BYTE4(__p[0]) = 0;
    __p[1] = (void *)0x3FF0000000000000;
    LODWORD(v49) = 1;
    BYTE4(v49) = 0;
    BYTE8(v49) = 0;
    BYTE12(v49) = 0;
    LOBYTE(v50) = 0;
    BYTE8(v50) = 0;
    v51[0] = 0;
    v51[8] = 0;
    v51[12] = 0;
    v51[16] = 0;
    v51[24] = 0;
    v52 = 0;
    v53 = 0;
    v54[0] = 0;
    v54[8] = 0;
    v54[12] = 1;
    v59 = 0;
    v60 = 0;
    v55 = 0;
    v56 = 0;
    v58 = 0;
    v57 = 0;
    v15 = (char *)operator new(0x110uLL);
    v42 = v15 + 272;
    v16 = *(_OWORD *)v51;
    *((_OWORD *)v15 + 2) = v50;
    *((_OWORD *)v15 + 3) = v16;
    *(_OWORD *)(v15 + 57) = *(_OWORD *)&v51[9];
    v17 = v49;
    *(_OWORD *)v15 = *(_OWORD *)__p;
    *((_OWORD *)v15 + 1) = v17;
    v15[80] = 0;
    v15[104] = 0;
    *((_QWORD *)v15 + 14) = *(_QWORD *)v54;
    *(_QWORD *)(v15 + 117) = *(_QWORD *)&v54[5];
    v15[160] = 0;
    v15[264] = 0;
    *((_QWORD *)v15 + 17) = 0;
    *((_QWORD *)v15 + 18) = 0;
    *((_QWORD *)v15 + 16) = 0;
    *((_WORD *)v15 + 76) = 0;
    v18 = *(_QWORD *)(a1 + 184);
    v19 = *(_QWORD *)(v18 + 40);
    v20 = *(_QWORD *)(v18 + 48);
    v40 = v15;
    v41 = v15 + 272;
    webrtc::VideoRtpSender::Create(v19, (uint64_t)&v63, a1, &v47);
    v21 = v47;
    v22 = operator new();
    v23 = v22;
    *(_QWORD *)(v22 + 16) = v20;
    *(_QWORD *)(v22 + 24) = v21;
    *(_QWORD *)v22 = &unk_24C0B9408;
    *(_QWORD *)(v22 + 8) = &unk_24C0B94D8;
    *(_DWORD *)(v22 + 32) = 0;
    v24 = (unsigned int *)(v22 + 32);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    **(_DWORD **)(a1 + 192) |= 0x10u;
    webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::SetTrack(v22, a2);
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v23 + 24) + 200))(*(_QWORD *)(v23 + 24), &v43);
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v23 + 24) + 208))(*(_QWORD *)(v23 + 24), &v40);
    v26 = (char *)v40;
    if (v40)
    {
      v27 = v41;
      v28 = v40;
      if (v41 != v40)
      {
        do
          webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v27 - 272));
        while (v27 != v26);
        v28 = v40;
      }
      v41 = v26;
      operator delete(v28);
    }
    webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)__p);
    v29 = (std::string *)v43;
    if (v43)
    {
      p_data = (void **)&v44->__r_.__value_.__l.__data_;
      v31 = v43;
      if (v44 != v43)
      {
        do
        {
          if (*((char *)p_data - 1) < 0)
            operator delete(*(p_data - 3));
          p_data -= 3;
        }
        while (p_data != (void **)v29);
        v31 = v43;
      }
      v44 = v29;
      operator delete(v31);
    }
    if (SHIBYTE(v62) < 0)
    {
      operator delete((void *)v61);
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
      if ((SHIBYTE(v64) & 0x80000000) == 0)
        goto LABEL_35;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
      if ((SHIBYTE(v64) & 0x80000000) == 0)
        goto LABEL_35;
    }
    operator delete((void *)v63);
LABEL_35:
    v32 = *(_QWORD *)(v23 + 24);
    webrtc::RtpTransmissionManager::GetVideoTransceiver((webrtc::RtpTransmissionManager *)a1, __p);
    v33 = *(_QWORD *)(*((_QWORD *)__p[0] + 2) + 160);
    (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
    if (v33)
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33);
    else
      v34 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 184))(v32, v34);
    webrtc::RtpTransmissionManager::GetVideoTransceiver((webrtc::RtpTransmissionManager *)a1, __p);
    v35 = __p[0];
    v36 = (_QWORD *)*((_QWORD *)__p[0] + 2);
    v39 = (void (***)(_QWORD))v23;
    (**(void (***)(uint64_t))v23)(v23);
    webrtc::RtpTransceiver::AddSender(v36, &v39);
    if (v39)
      (*v39)[1](v39);
    (*(void (**)(void *))(*(_QWORD *)v35 + 8))(v35);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a3 + 32))(__p, a3);
    v37 = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(&v63, a2);
    SenderInfo = webrtc::RtpTransmissionManager::FindSenderInfo((uint64_t)v37, (uint64_t *)(a1 + 152), (unsigned __int8 **)__p, (unsigned __int8 **)&v63);
    if (SHIBYTE(v64) < 0)
    {
      operator delete((void *)v63);
      if ((SBYTE7(v49) & 0x80000000) == 0)
      {
LABEL_44:
        if (!SenderInfo)
        {
LABEL_46:
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v6 = v46;
          goto LABEL_47;
        }
LABEL_45:
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v23 + 24) + 192))(*(_QWORD *)(v23 + 24), *(unsigned int *)(SenderInfo + 48));
        goto LABEL_46;
      }
    }
    else if ((SBYTE7(v49) & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(__p[0]);
    if (!SenderInfo)
      goto LABEL_46;
    goto LABEL_45;
  }
  v7 = *(_QWORD *)(v46 + 24);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a3 + 32))(&v63, a3);
  v8 = (std::string *)operator new(0x18uLL);
  v9 = v8 + 1;
  __p[0] = v8;
  *(_QWORD *)&v49 = v8 + 1;
  if (SHIBYTE(v64) < 0)
  {
    std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v63, *((std::string::size_type *)&v63 + 1));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v63;
    v8->__r_.__value_.__r.__words[2] = v64;
  }
  __p[1] = v9;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 200))(v7, __p);
  v12 = (void **)__p[0];
  if (__p[0])
  {
    v13 = (void **)__p[1];
    v14 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v12);
      v14 = __p[0];
    }
    __p[1] = v12;
    operator delete(v14);
  }
  if (SHIBYTE(v64) < 0)
    operator delete((void *)v63);
LABEL_47:
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void webrtc::RtpTransmissionManager::RemoveVideoTrack(webrtc::RtpTransmissionManager *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  uint64_t v23;

  webrtc::RtpTransmissionManager::FindSenderForTrack((uint64_t)a1, a2, &v23);
  v4 = v23;
  if (v23)
  {
    webrtc::RtpTransmissionManager::GetVideoTransceiver(a1, __p);
    v5 = __p[0];
    v6 = *((_QWORD *)__p[0] + 2);
    v8 = *(_QWORD **)(v6 + 32);
    v7 = *(_QWORD **)(v6 + 40);
    if (v8 != v7)
    {
      while (*v8 != v4)
      {
        if (++v8 == v7)
        {
          v8 = *(_QWORD **)(v6 + 40);
          break;
        }
      }
    }
    if (v8 == v7)
      goto LABEL_21;
    (*(void (**)(_QWORD))(**(_QWORD **)(*v8 + 24) + 224))(*(_QWORD *)(*v8 + 24));
    v9 = *(_QWORD **)(v6 + 40);
    if (v9 != v8)
    {
      v10 = v8 + 1;
      if (v8 + 1 != v9)
      {
        do
        {
          v11 = *(v10 - 1);
          *(v10 - 1) = *v10;
          *v10 = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          ++v10;
        }
        while (v10 != v9);
        v9 = *(_QWORD **)(v6 + 40);
        v8 = v10 - 1;
      }
      while (v9 != v8)
      {
        v20 = *--v9;
        v19 = v20;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      *(_QWORD *)(v6 + 40) = v8;
LABEL_21:
      (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return;
    }
    __break(1u);
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(__p, a2);
    rtc::webrtc_logging_impl::Log("\r\t\n\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc");
    if (v22 < 0)
      operator delete(__p[0]);
  }
}

void webrtc::RtpTransmissionManager::CreateAudioReceiver(uint64_t a1, void (***a2)(_QWORD), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t (**v29)();
  uint64_t (***v30)();
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  uint64_t v39;
  uint64_t (***v40)();
  void *__p;
  char *v42;
  _QWORD *v43;
  char v44;
  _QWORD v45[4];
  int v46;
  char v47;
  uint64_t v48;

  if (a2)
    (**a2)(a2);
  v6 = (char *)operator new(8uLL);
  __p = v6;
  *(_QWORD *)v6 = a2;
  v42 = v6 + 8;
  v43 = v6 + 8;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 40);
  v8 = (uint64_t *)(a3 + 24);
  v9 = *(unsigned __int8 *)(a1 + 177);
  webrtc::RtpTransmissionManager::GetAudioTransceiver((webrtc::RtpTransmissionManager *)a1, v45);
  v10 = *(_QWORD *)(*(_QWORD *)(v45[0] + 16) + 160);
  (*(void (**)(_QWORD))(*(_QWORD *)v45[0] + 8))(v45[0]);
  if (v10)
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
  else
    v11 = 0;
  v12 = operator new();
  v13 = webrtc::AudioRtpReceiver::AudioRtpReceiver(v12, v7, (__int128 *)(a3 + 24), (uint64_t)&__p, v9 != 0, v11);
  *(_QWORD *)(v13 + 16) = &unk_24C0BE428;
  v14 = v13 + 16;
  *(_QWORD *)v13 = &off_24C0BE300;
  *(_QWORD *)(v13 + 8) = &unk_24C0BE400;
  *(_QWORD *)(v13 + 24) = &unk_24C0BE528;
  *(_DWORD *)(v13 + 200) = 0;
  v15 = (unsigned int *)(v13 + 200);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  if (*(char *)(a3 + 47) < 0)
  {
    v17 = *(_QWORD *)(a3 + 32);
    if (v17 < 0)
      goto LABEL_45;
    v8 = (uint64_t *)*v8;
    if (v17)
    {
      if (!v8)
        goto LABEL_45;
    }
  }
  else
  {
    v17 = *(unsigned __int8 *)(a3 + 47);
  }
  if (v17 == 9 && (*v8 == 0x61746C7561666564 ? (v18 = *((_BYTE *)v8 + 8) == 48) : (v18 = 0), v18))
    v48 = 0;
  else
    v48 = *(unsigned int *)(a3 + 48) | 0x100000000;
  v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v12 + 72) + 24) + 48))(*(_QWORD *)(*(_QWORD *)(v12 + 72) + 24));
  v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 64) + 32))(*(_QWORD *)(v12 + 64));
  v19 = *(_QWORD *)(v12 + 32);
  v45[0] = v12;
  v45[1] = &v48;
  v45[2] = &v47;
  v45[3] = &v46;
  (*(void (**)(uint64_t, _QWORD *, uint64_t *(*)(uint64_t *), char *))(*(_QWORD *)v19 + 96))(v19, v45, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::AudioRtpReceiver::RestartMediaChannel(std::optional<unsigned int>)::$_1>, &v44);
  v20 = *(_QWORD *)(v12 + 64);
  if (*(_DWORD *)(v20 + 176) != 1)
  {
    *(_DWORD *)(v20 + 176) = 1;
    webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged((_QWORD *)v20);
  }
  v38 = *(int8x16_t *)(*(_QWORD *)(a1 + 184) + 40);
  v21 = operator new();
  *(int8x16_t *)(v21 + 16) = vextq_s8(v38, v38, 8uLL);
  *(_QWORD *)(v21 + 32) = v14;
  *(_QWORD *)v21 = off_24C0BE148;
  *(_QWORD *)(v21 + 8) = &unk_24C0BE200;
  *(_DWORD *)(v21 + 40) = 0;
  v22 = (unsigned int *)(v21 + 40);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  webrtc::RtpTransmissionManager::GetAudioTransceiver((webrtc::RtpTransmissionManager *)a1, v45);
  v24 = v45[0];
  v25 = *(_QWORD *)(v45[0] + 16);
  v40 = (uint64_t (***)())v21;
  do
    v26 = __ldxr(v22);
  while (__stxr(v26 + 1, v22));
  v27 = *(uint64_t **)(v25 + 64);
  if ((unint64_t)v27 < *(_QWORD *)(v25 + 72))
  {
    if (v27)
    {
      *v27 = v21;
      do
        v28 = __ldxr(v22);
      while (__stxr(v28 + 1, v22));
      *(_QWORD *)(v25 + 64) = v27 + 1;
      v29 = off_24C0BE148;
      v30 = (uint64_t (***)())v21;
      goto LABEL_32;
    }
LABEL_45:
    __break(1u);
    return;
  }
  v31 = std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>(v25 + 56, (void (****)(_QWORD))&v40);
  v30 = v40;
  *(_QWORD *)(v25 + 64) = v31;
  if (v30)
  {
    v29 = *v30;
LABEL_32:
    ((void (*)(uint64_t (***)()))v29[1])(v30);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v32 = *(_QWORD *)(a1 + 200);
  v39 = v21;
  (**(void (***)(uint64_t))v21)(v21);
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v32 + 136))(v32, &v39, &__p);
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  **(_DWORD **)(a1 + 192) |= 8u;
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v33 = (char *)__p;
  if (__p)
  {
    v34 = v42;
    v35 = __p;
    if (v42 != __p)
    {
      do
      {
        v37 = *((_QWORD *)v34 - 1);
        v34 -= 8;
        v36 = v37;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      while (v34 != v33);
      v35 = __p;
    }
    v42 = v33;
    operator delete(v35);
  }
}

void webrtc::RtpTransmissionManager::CreateVideoReceiver(uint64_t a1, void (***a2)(_QWORD), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  rtc::Thread *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t (**v30)();
  uint64_t (***v31)();
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t (***v41)();
  void *__p;
  char *v43;
  _QWORD *v44;
  char v45;
  _QWORD v46[4];
  int v47;
  uint64_t v48;
  uint64_t v49;

  if (a2)
    (**a2)(a2);
  v6 = (char *)operator new(8uLL);
  *(_QWORD *)v6 = a2;
  __p = v6;
  v43 = v6 + 8;
  v44 = v6 + 8;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 40);
  v8 = (uint64_t *)(a3 + 24);
  v9 = operator new();
  v10 = webrtc::VideoRtpReceiver::VideoRtpReceiver(v9, v7, (__int128 *)(a3 + 24), (uint64_t)&__p);
  *(_QWORD *)v10 = off_24C0BE550;
  *((_QWORD *)v10 + 1) = &unk_24C0BE658;
  *((_DWORD *)v10 + 45) = 0;
  v11 = (unsigned int *)((char *)v10 + 180);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  if (*(char *)(a3 + 47) < 0)
  {
    v13 = *(_QWORD *)(a3 + 32);
    if (v13 < 0)
      goto LABEL_45;
    v8 = (uint64_t *)*v8;
    if (v13)
    {
      if (!v8)
        goto LABEL_45;
    }
  }
  else
  {
    v13 = *(unsigned __int8 *)(a3 + 47);
  }
  if (v13 == 9 && (*v8 == 0x76746C7561666564 ? (v14 = *((_BYTE *)v8 + 8) == 48) : (v14 = 0), v14))
  {
    v16 = 0;
    v15 = 0;
    v17 = 0;
  }
  else
  {
    v15 = *(_DWORD *)(a3 + 48) & 0xFFFFFF00;
    v16 = *(_DWORD *)(a3 + 48);
    v17 = 0x100000000;
  }
  webrtc::RtpTransmissionManager::GetVideoTransceiver((webrtc::RtpTransmissionManager *)a1, v46);
  v18 = *(_QWORD *)(*(_QWORD *)(v46[0] + 16) + 160);
  (*(void (**)(_QWORD))(*(_QWORD *)v46[0] + 8))(v46[0]);
  if (v18)
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
  else
    v19 = 0;
  v48 = v19;
  v49 = v17 | v15 | v16;
  v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 80) + 32))(*(_QWORD *)(v9 + 80));
  v20 = *(_QWORD *)(v9 + 32);
  v46[0] = v9;
  v46[1] = &v48;
  v46[2] = &v49;
  v46[3] = &v47;
  (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v20 + 96))(v20, v46, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::VideoRtpReceiver::SetupMediaChannel(std::optional<unsigned int>,cricket::MediaReceiveChannelInterface *)::$_1>, &v45);
  v21 = *(_QWORD *)(v9 + 80);
  if (*(_DWORD *)(v21 + 48) != 1)
  {
    *(_DWORD *)(v21 + 48) = 1;
    webrtc::Notifier<webrtc::VideoTrackInterface>::FireOnChanged((_QWORD *)v21);
  }
  v39 = *(int8x16_t *)(*(_QWORD *)(a1 + 184) + 40);
  v22 = operator new();
  *(int8x16_t *)(v22 + 16) = vextq_s8(v39, v39, 8uLL);
  *(_QWORD *)(v22 + 32) = v9;
  *(_QWORD *)v22 = off_24C0BE148;
  *(_QWORD *)(v22 + 8) = &unk_24C0BE200;
  *(_DWORD *)(v22 + 40) = 0;
  v23 = (unsigned int *)(v22 + 40);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  webrtc::RtpTransmissionManager::GetVideoTransceiver((webrtc::RtpTransmissionManager *)a1, v46);
  v25 = v46[0];
  v26 = *(_QWORD *)(v46[0] + 16);
  v41 = (uint64_t (***)())v22;
  do
    v27 = __ldxr(v23);
  while (__stxr(v27 + 1, v23));
  v28 = *(uint64_t **)(v26 + 64);
  if ((unint64_t)v28 < *(_QWORD *)(v26 + 72))
  {
    if (v28)
    {
      *v28 = v22;
      do
        v29 = __ldxr(v23);
      while (__stxr(v29 + 1, v23));
      *(_QWORD *)(v26 + 64) = v28 + 1;
      v30 = off_24C0BE148;
      v31 = (uint64_t (***)())v22;
      goto LABEL_32;
    }
LABEL_45:
    __break(1u);
    return;
  }
  v32 = std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>(v26 + 56, (void (****)(_QWORD))&v41);
  v31 = v41;
  *(_QWORD *)(v26 + 64) = v32;
  if (v31)
  {
    v30 = *v31;
LABEL_32:
    ((void (*)(uint64_t (***)()))v30[1])(v31);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v33 = *(_QWORD *)(a1 + 200);
  v40 = v22;
  (**(void (***)(uint64_t))v22)(v22);
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v33 + 136))(v33, &v40, &__p);
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  **(_DWORD **)(a1 + 192) |= 0x10u;
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v34 = (char *)__p;
  if (__p)
  {
    v35 = v43;
    v36 = __p;
    if (v43 != __p)
    {
      do
      {
        v38 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v37 = v38;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      }
      while (v35 != v34);
      v36 = __p;
    }
    v43 = v34;
    operator delete(v36);
  }
}

void webrtc::RtpTransmissionManager::RemoveAndStopReceiver(_QWORD *a1, webrtc::RtpTransmissionManager *a2, uint64_t a3)
{
  _QWORD *v4;
  webrtc::RtpReceiverInterface *v5;
  webrtc::RtpReceiverInterface *v6;
  size_t v7;
  char *v10;
  webrtc::RtpReceiverInterface *v11;
  void (***v12)(_QWORD);
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  void (***v21)(_QWORD);
  char *v22;
  _QWORD *v23;
  void *v24;
  int v25;
  size_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  webrtc::RtpTransmissionManager *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  void *__s1;
  size_t __n;
  unsigned __int8 v56;

  v4 = (_QWORD *)(a3 + 24);
  v5 = (webrtc::RtpReceiverInterface *)*((_QWORD *)a2 + 1);
  v6 = (webrtc::RtpReceiverInterface *)*((_QWORD *)a2 + 2);
  v7 = v6 - v5;
  if (v6 == v5)
    goto LABEL_61;
  if ((v7 & 0x8000000000000000) != 0)
LABEL_67:
    abort();
  v10 = (char *)operator new(v7);
  v11 = 0;
  do
  {
    v12 = *(void (****)(_QWORD))((char *)v11 + (_QWORD)v5);
    *(_QWORD *)((char *)v11 + (_QWORD)v10) = v12;
    if (v12)
      (**v12)(v12);
    v11 = (webrtc::RtpReceiverInterface *)((char *)v11 + 8);
  }
  while ((webrtc::RtpReceiverInterface *)((char *)v11 + (_QWORD)v5) != v6);
  if (!v11)
  {
    operator delete(v10);
    goto LABEL_61;
  }
  v50 = a2;
  v51 = a1;
  v48 = (uint64_t)v11 >> 3;
  v49 = v10;
  v13 = &v10[(unint64_t)v11 & 0xFFFFFFFFFFFFFFF8];
  v14 = v10;
  v52 = v13;
  while (2)
  {
    v15 = *(_QWORD *)(*(_QWORD *)v14 + 16);
    v16 = *(_QWORD *)(v15 + 56);
    v17 = *(_QWORD *)(v15 + 64);
    v18 = v17 - v16;
    if (v17 == v16)
      goto LABEL_10;
    if ((v18 & 0x8000000000000000) != 0)
      goto LABEL_67;
    v19 = (char *)operator new(v18);
    v20 = 0;
    do
    {
      v21 = *(void (****)(_QWORD))(v16 + v20);
      *(_QWORD *)&v19[v20] = v21;
      if (v21)
        (**v21)(v21);
      v20 += 8;
    }
    while (v16 + v20 != v17);
    if (!v20)
    {
      operator delete(v19);
      goto LABEL_10;
    }
    v53 = v20 >> 3;
    v22 = &v19[v20 & 0xFFFFFFFFFFFFFFF8];
    v23 = v19;
    while (1)
    {
      v11 = (webrtc::RtpReceiverInterface *)*v23;
      if (*v23)
        (**(void (***)(_QWORD))v11)(*v23);
      (*(void (**)(void **__return_ptr, webrtc::RtpReceiverInterface *))(*(_QWORD *)v11 + 72))(&__s1, v11);
      if ((v56 & 0x80u) == 0)
        v26 = v56;
      else
        v26 = __n;
      v27 = *(unsigned __int8 *)(a3 + 47);
      v28 = (char)v27;
      if ((v27 & 0x80u) != 0)
        v27 = *(_QWORD *)(a3 + 32);
      if (v26 != v27)
      {
        if ((v56 & 0x80) != 0)
          operator delete(__s1);
        goto LABEL_20;
      }
      v29 = v28 >= 0 ? (unsigned __int8 *)v4 : (unsigned __int8 *)*v4;
      if ((v56 & 0x80) == 0)
        break;
      v24 = __s1;
      v25 = memcmp(__s1, v29, __n);
      operator delete(v24);
      if (!v25)
        goto LABEL_46;
LABEL_20:
      (*(void (**)(webrtc::RtpReceiverInterface *))(*(_QWORD *)v11 + 8))(v11);
      if (++v23 == (_QWORD *)v22)
      {
        v34 = 0;
        v35 = 1;
        goto LABEL_47;
      }
    }
    if (v56)
    {
      v30 = 0;
      do
      {
        v31 = *((unsigned __int8 *)&__s1 + v30);
        v32 = v29[v30];
      }
      while (v31 == v32 && v56 - 1 != v30++);
      if (v31 != v32)
        goto LABEL_20;
    }
LABEL_46:
    v35 = 0;
    v34 = 1;
LABEL_47:
    v13 = v52;
    v36 = 8 * v53;
    do
    {
      v37 = *(_QWORD *)&v19[v36 - 8];
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      v36 -= 8;
    }
    while (v36);
    operator delete(v19);
    if ((v35 & 1) == 0)
      goto LABEL_52;
LABEL_10:
    v14 += 8;
    if (v14 != v13)
      continue;
    break;
  }
  v34 = 2;
LABEL_52:
  v38 = 8 * v48;
  a1 = v51;
  do
  {
    v39 = *(_QWORD *)&v49[v38 - 8];
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v38 -= 8;
  }
  while (v38);
  operator delete(v49);
  if (v34 != 2 && v11)
  {
    if ((*(unsigned int (**)(webrtc::RtpReceiverInterface *))(*(_QWORD *)v11 + 64))(v11))
      webrtc::RtpTransmissionManager::GetVideoTransceiver(v50, &__s1);
    else
      webrtc::RtpTransmissionManager::GetAudioTransceiver(v50, &__s1);
    v47 = __s1;
    webrtc::RtpTransceiver::RemoveReceiver(*((webrtc::RtpTransceiver **)__s1 + 2), v11);
    (*(void (**)(void *))(*(_QWORD *)v47 + 8))(v47);
    goto LABEL_66;
  }
LABEL_61:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\n\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc");
  v11 = 0;
LABEL_66:
  *a1 = v11;
}

void webrtc::RtpTransmissionManager::OnRemoteSenderAdded(uint64_t a1, uint64_t a2, void (***a3)(_QWORD), int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  void *v19[2];
  char v20;

  v8 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
  if ((v8 & 1) == 0)
  {
    switch(a4)
    {
      case 0:
        v20 = 5;
        v16 = "audio";
        goto LABEL_10;
      case 1:
        v20 = 5;
        v16 = "video";
LABEL_10:
        if (v19 <= (void **)v16 && (char *)v19 + 5 > v16)
          goto LABEL_23;
        LODWORD(v19[0]) = *(_DWORD *)v16;
        WORD2(v19[0]) = *((unsigned __int8 *)v16 + 4);
        goto LABEL_16;
      case 2:
        v20 = 4;
        if (v19 <= (void **)"data" && (char *)v19 + 4 > "data")
        {
LABEL_23:
          __break(1u);
LABEL_24:
          rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v8);
        }
        strcpy((char *)v19, "data");
LABEL_16:
        rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t\n", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc");
        if ((v20 & 0x80000000) == 0)
          break;
        operator delete(v19[0]);
        if (a4 == 1)
          goto LABEL_22;
        goto LABEL_18;
      case 3:
        v20 = 0;
        LOBYTE(v19[0]) = 0;
        goto LABEL_16;
      default:
        goto LABEL_24;
    }
  }
  if (a4 == 1)
  {
LABEL_22:
    webrtc::RtpTransmissionManager::CreateVideoReceiver(a1, a3, a2);
  }
  else
  {
LABEL_18:
    if (!a4)
      webrtc::RtpTransmissionManager::CreateAudioReceiver(a1, a3, a2);
  }
}

void webrtc::RtpTransmissionManager::OnRemoteSenderRemoved(webrtc::RtpTransmissionManager *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25[2];
  char v26;

  v8 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
  if ((v8 & 1) == 0)
  {
    switch(a4)
    {
      case 0:
        v26 = 5;
        v16 = "audio";
        goto LABEL_10;
      case 1:
        v26 = 5;
        v16 = "video";
LABEL_10:
        if (v25 <= (void **)v16 && (char *)v25 + 5 > v16)
          goto LABEL_33;
        LODWORD(v25[0]) = *(_DWORD *)v16;
        WORD2(v25[0]) = *((unsigned __int8 *)v16 + 4);
        goto LABEL_16;
      case 2:
        v26 = 4;
        if (v25 <= (void **)"data" && (char *)v25 + 4 > "data")
        {
LABEL_33:
          __break(1u);
LABEL_34:
          rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v8);
        }
        strcpy((char *)v25, "data");
LABEL_16:
        rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t\n", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc");
        if ((v26 & 0x80000000) == 0)
          break;
        operator delete(v25[0]);
        if (a4 == 1)
          goto LABEL_23;
        goto LABEL_18;
      case 3:
        v26 = 0;
        LOBYTE(v25[0]) = 0;
        goto LABEL_16;
      default:
        goto LABEL_34;
    }
  }
  if (a4 == 1)
  {
LABEL_23:
    webrtc::RtpTransmissionManager::RemoveAndStopReceiver(v25, a1, a2);
    v19 = v25[0];
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 64))(v25, a3, a2 + 24);
    if (v25[0])
    {
      v23 = v25[0];
      (**(void (***)(void *))v25[0])(v25[0]);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 96))(a3, &v23);
      v20 = v23;
      if (!v23)
        goto LABEL_26;
      goto LABEL_25;
    }
  }
  else
  {
LABEL_18:
    if (a4)
      return;
    webrtc::RtpTransmissionManager::RemoveAndStopReceiver(v25, a1, a2);
    v19 = v25[0];
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(v25, a3, a2 + 24);
    if (v25[0])
    {
      v24 = v25[0];
      (**(void (***)(void *))v25[0])(v25[0]);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 88))(a3, &v24);
      v20 = v24;
      if (!v24)
      {
LABEL_26:
        if (v25[0])
          (*(void (**)(void *))(*(_QWORD *)v25[0] + 8))(v25[0]);
        goto LABEL_28;
      }
LABEL_25:
      (*(void (**)(void *))(*(_QWORD *)v20 + 8))(v20);
      goto LABEL_26;
    }
  }
LABEL_28:
  if (v19)
  {
    v21 = *((_QWORD *)a1 + 25);
    v22 = v19;
    (**(void (***)(void *))v19)(v19);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v21 + 152))(v21, &v22);
    if (v22)
      (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  }
}

void webrtc::RtpTransmissionManager::OnLocalSenderAdded(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  void **p_data;
  void *v25;
  void *__p;
  std::string *v27;
  std::string *v28;
  _QWORD *v29;
  std::string v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  webrtc::RtpTransmissionManager::FindSenderById(a1, a2 + 24, (uint64_t *)&v29);
  v5 = v29;
  if (v29)
  {
    if ((*(unsigned int (**)(_QWORD *))(*v29 + 64))(v29) == a3)
    {
      v6 = v5[3];
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v30 = *(std::string *)a2;
      v21 = (std::string *)operator new(0x18uLL);
      v22 = v21 + 1;
      __p = v21;
      v28 = v21 + 1;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(v21, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
      else
        *v21 = v30;
      v27 = v22;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 200))(v6, &__p);
      v23 = (std::string *)__p;
      if (__p)
      {
        p_data = (void **)&v27->__r_.__value_.__l.__data_;
        v25 = __p;
        if (v27 != __p)
        {
          do
          {
            if (*((char *)p_data - 1) < 0)
              operator delete(*(p_data - 3));
            p_data -= 3;
          }
          while (p_data != (void **)v23);
          v25 = __p;
        }
        v27 = v23;
        operator delete(v25);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v5[3] + 192))(v5[3], *(unsigned int *)(a2 + 48));
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc");
    }
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t\n\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc");
  }
}

void webrtc::RtpTransmissionManager::~RtpTransmissionManager(webrtc::RtpTransmissionManager *this)
{
  webrtc::RtpTransmissionManager::~RtpTransmissionManager(this);
  JUMPOUT(0x20BD0ADECLL);
}

{
  _BYTE *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  webrtc::RtpTransmissionManager *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)this = &off_24C0BE120;
  *((_QWORD *)this + 32) = 0;
  v2 = (_BYTE *)*((_QWORD *)this + 31);
  if (v2)
  {
    *v2 = 0;
    v3 = (unsigned int *)(v2 + 4);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 31) = 0;
  }
  v6 = (webrtc::RtpTransmissionManager *)*((_QWORD *)this + 30);
  if (v6 == (webrtc::RtpTransmissionManager *)((char *)this + 216))
  {
    v7 = 4;
    v6 = (webrtc::RtpTransmissionManager *)((char *)this + 216);
  }
  else
  {
    if (!v6)
      goto LABEL_12;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_12:
  v8 = *((_QWORD *)this + 19);
  if (!v8)
    goto LABEL_23;
  v9 = *((_QWORD *)this + 20);
  v10 = (void *)*((_QWORD *)this + 19);
  if (v9 != v8)
  {
    while (1)
    {
      if (*(char *)(v9 - 9) < 0)
      {
        operator delete(*(void **)(v9 - 32));
        if (*(char *)(v9 - 33) < 0)
LABEL_20:
          operator delete(*(void **)(v9 - 56));
      }
      else if (*(char *)(v9 - 33) < 0)
      {
        goto LABEL_20;
      }
      v9 -= 56;
      if (v9 == v8)
      {
        v10 = (void *)*((_QWORD *)this + 19);
        break;
      }
    }
  }
  *((_QWORD *)this + 20) = v8;
  operator delete(v10);
LABEL_23:
  v11 = *((_QWORD *)this + 16);
  if (!v11)
    goto LABEL_34;
  v12 = *((_QWORD *)this + 17);
  v13 = (void *)*((_QWORD *)this + 16);
  if (v12 != v11)
  {
    while (1)
    {
      if (*(char *)(v12 - 9) < 0)
      {
        operator delete(*(void **)(v12 - 32));
        if (*(char *)(v12 - 33) < 0)
LABEL_31:
          operator delete(*(void **)(v12 - 56));
      }
      else if (*(char *)(v12 - 33) < 0)
      {
        goto LABEL_31;
      }
      v12 -= 56;
      if (v12 == v11)
      {
        v13 = (void *)*((_QWORD *)this + 16);
        break;
      }
    }
  }
  *((_QWORD *)this + 17) = v11;
  operator delete(v13);
LABEL_34:
  v14 = *((_QWORD *)this + 13);
  if (!v14)
    goto LABEL_45;
  v15 = *((_QWORD *)this + 14);
  v16 = (void *)*((_QWORD *)this + 13);
  if (v15 != v14)
  {
    while (1)
    {
      if (*(char *)(v15 - 9) < 0)
      {
        operator delete(*(void **)(v15 - 32));
        if (*(char *)(v15 - 33) < 0)
LABEL_42:
          operator delete(*(void **)(v15 - 56));
      }
      else if (*(char *)(v15 - 33) < 0)
      {
        goto LABEL_42;
      }
      v15 -= 56;
      if (v15 == v14)
      {
        v16 = (void *)*((_QWORD *)this + 13);
        break;
      }
    }
  }
  *((_QWORD *)this + 14) = v14;
  operator delete(v16);
LABEL_45:
  v17 = *((_QWORD *)this + 10);
  if (!v17)
    goto LABEL_56;
  v18 = *((_QWORD *)this + 11);
  v19 = (void *)*((_QWORD *)this + 10);
  if (v18 != v17)
  {
    while (1)
    {
      if (*(char *)(v18 - 9) < 0)
      {
        operator delete(*(void **)(v18 - 32));
        if (*(char *)(v18 - 33) < 0)
LABEL_53:
          operator delete(*(void **)(v18 - 56));
      }
      else if (*(char *)(v18 - 33) < 0)
      {
        goto LABEL_53;
      }
      v18 -= 56;
      if (v18 == v17)
      {
        v19 = (void *)*((_QWORD *)this + 10);
        break;
      }
    }
  }
  *((_QWORD *)this + 11) = v17;
  operator delete(v19);
LABEL_56:
  std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::vector<std::string>>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::vector<std::string>>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::vector<std::string>>>>::destroy(*((_QWORD **)this + 8));
  std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  v20 = *((_QWORD *)this + 1);
  if (v20)
  {
    v21 = *((_QWORD *)this + 2);
    v22 = (void *)*((_QWORD *)this + 1);
    if (v21 != v20)
    {
      do
      {
        v24 = *(_QWORD *)(v21 - 8);
        v21 -= 8;
        v23 = v24;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
      while (v21 != v20);
      v22 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v20;
    operator delete(v22);
  }
}

void std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::vector<std::string>>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::vector<std::string>>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::vector<std::string>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  if (a1)
  {
    std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::vector<std::string>>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::vector<std::string>>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::vector<std::string>>>>::destroy(*a1);
    std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::vector<std::string>>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::vector<std::string>>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::vector<std::string>>>>::destroy(a1[1]);
    v2 = a1[5];
    if (v2)
    {
      v3 = a1[6];
      v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    v5 = a1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>>>::destroy(a1, a2[1]);
    webrtc::TransceiverStableState::~TransceiverStableState((webrtc::TransceiverStableState *)(a2 + 5));
    v4 = a2[4];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    operator delete(a2);
  }
}

void webrtc::TransceiverStableState::~TransceiverStableState(webrtc::TransceiverStableState *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (*((_BYTE *)this + 104))
  {
    v2 = *((_QWORD *)this + 10);
    if (v2)
    {
      v3 = *((_QWORD *)this + 11);
      v4 = (void *)*((_QWORD *)this + 10);
      if (v3 != v2)
      {
        do
          webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v3 - 272));
        while (v3 != v2);
        v4 = (void *)*((_QWORD *)this + 10);
      }
      *((_QWORD *)this + 11) = v2;
      operator delete(v4);
    }
  }
  if (*((_BYTE *)this + 72))
  {
    v5 = *((_QWORD *)this + 6);
    if (v5)
    {
      v6 = *((_QWORD *)this + 7);
      v7 = (void *)*((_QWORD *)this + 6);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0)
            operator delete(*(void **)(v6 - 24));
          v6 -= 24;
        }
        while (v6 != v5);
        v7 = (void *)*((_QWORD *)this + 6);
      }
      *((_QWORD *)this + 7) = v5;
      operator delete(v7);
    }
  }
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*(void **)this);
  }
}

uint64_t rtc::RefCountedObject<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 10;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::~RtpReceiverProxyWithInternal(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::track(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
}

uint64_t webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::dtls_transport@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(__n128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  TimeDelta v9;
  TimeDelta v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  char v14;
  __n128 v15;
  __n128 (*v16)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v17)(uint64_t *);
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  pthread_mutex_t v21;
  pthread_cond_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v18 = *(_QWORD *)(a1 + 32);
  v19 = xmmword_208F16E40;
  v20 = 0;
  rtc::Event::Event((rtc::Event *)&v21, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(__n128 *__return_ptr, _QWORD *))v19;
    v6 = (_QWORD *)(v18 + (*((uint64_t *)&v19 + 1) >> 1));
    if ((BYTE8(v19) & 1) != 0)
      v5 = *(void (**)(__n128 *__return_ptr, _QWORD *))(*v6 + v19);
    v5(&v15, v6);
    v7 = v15.n128_u64[0];
    v15.n128_u64[0] = 0;
    v8 = v20;
    v20 = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      if (v15.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v15.n128_u64[0] + 8))(v15.n128_u64[0]);
    }
  }
  else
  {
    v15.n128_u64[0] = (unint64_t)&v18;
    v16 = absl::internal_any_invocable::LocalManagerTrivial;
    v17 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpReceiverInterface,webrtc::scoped_refptr<webrtc::DtlsTransportInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v15, &v14, &v13);
    v16(1, &v15, &v15);
    v9.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v10.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v21, v9, v10);
  }
  v11 = v20;
  v20 = 0;
  *a2 = v11;
  pthread_mutex_destroy(&v21);
  pthread_cond_destroy(&v22);
  result = v20;
  if (v20)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  return result;
}

void webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::stream_ids(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(__int128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  void **v7;
  void **v8;
  void *v9;
  TimeDelta v10;
  TimeDelta v11;
  __int128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  void **v14;
  void **v15;
  void *v16;
  char v17;
  char v18;
  __int128 v19;
  __n128 (*v20)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v21)(uint64_t *);
  uint64_t v22;
  __int128 v23;
  void *__p[2];
  __n128 (*v25)(uint64_t, __n128 *, __n128 *);
  pthread_mutex_t v26;
  pthread_cond_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v22 = *(_QWORD *)(a1 + 32);
  v23 = xmmword_208F05250;
  __p[1] = 0;
  v25 = 0;
  __p[0] = 0;
  rtc::Event::Event((rtc::Event *)&v26, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(__int128 *__return_ptr, _QWORD *))v23;
    v6 = (_QWORD *)(v22 + (*((uint64_t *)&v23 + 1) >> 1));
    if ((BYTE8(v23) & 1) != 0)
      v5 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v6 + v23);
    v5(&v19, v6);
    v7 = (void **)__p[0];
    if (__p[0])
    {
      v8 = (void **)__p[1];
      v9 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p[0];
      }
      __p[1] = v7;
      operator delete(v9);
    }
    v12 = v19;
    v13 = v20;
  }
  else
  {
    *(_QWORD *)&v19 = &v22;
    v20 = absl::internal_any_invocable::LocalManagerTrivial;
    v21 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpReceiverInterface,std::vector<std::string>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v19, &v18, &v17);
    v20(1, (__n128 *)&v19, (__n128 *)&v19);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v26, v10, v11);
    v12 = *(_OWORD *)__p;
    v13 = v25;
  }
  *(_OWORD *)a2 = v12;
  *(_QWORD *)(a2 + 16) = v13;
  __p[1] = 0;
  v25 = 0;
  __p[0] = 0;
  pthread_mutex_destroy(&v26);
  pthread_cond_destroy(&v27);
  v14 = (void **)__p[0];
  if (__p[0])
  {
    v15 = (void **)__p[1];
    v16 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*(v15 - 3));
        v15 -= 3;
      }
      while (v15 != v14);
      v16 = __p[0];
    }
    __p[1] = v14;
    operator delete(v16);
  }
}

void webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::streams(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(__int128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  TimeDelta v12;
  TimeDelta v13;
  __int128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  char *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __n128 (*v24)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v25)(uint64_t *);
  uint64_t v26;
  __int128 v27;
  void *__p[2];
  __n128 (*v29)(uint64_t, __n128 *, __n128 *);
  pthread_mutex_t v30;
  pthread_cond_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v26 = *(_QWORD *)(a1 + 32);
  v27 = xmmword_208F05260;
  __p[1] = 0;
  v29 = 0;
  __p[0] = 0;
  rtc::Event::Event((rtc::Event *)&v30, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(__int128 *__return_ptr, _QWORD *))v27;
    v6 = (_QWORD *)(v26 + (*((uint64_t *)&v27 + 1) >> 1));
    if ((BYTE8(v27) & 1) != 0)
      v5 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v6 + v27);
    v5(&v23, v6);
    v7 = (char *)__p[0];
    if (__p[0])
    {
      v8 = (char *)__p[1];
      v9 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v11 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          v10 = v11;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        while (v8 != v7);
        v9 = __p[0];
      }
      __p[1] = v7;
      operator delete(v9);
    }
    v14 = v23;
    v15 = v24;
  }
  else
  {
    *(_QWORD *)&v23 = &v26;
    v24 = absl::internal_any_invocable::LocalManagerTrivial;
    v25 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpReceiverInterface,std::vector<webrtc::scoped_refptr<webrtc::MediaStreamInterface>>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v23, &v22, &v21);
    v24(1, (__n128 *)&v23, (__n128 *)&v23);
    v12.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v13.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v30, v12, v13);
    v14 = *(_OWORD *)__p;
    v15 = v29;
  }
  *(_OWORD *)a2 = v14;
  *(_QWORD *)(a2 + 16) = v15;
  __p[1] = 0;
  v29 = 0;
  __p[0] = 0;
  pthread_mutex_destroy(&v30);
  pthread_cond_destroy(&v31);
  v16 = (char *)__p[0];
  if (__p[0])
  {
    v17 = (char *)__p[1];
    v18 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v20 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        v19 = v20;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      while (v17 != v16);
      v18 = __p[0];
    }
    __p[1] = v16;
    operator delete(v18);
  }
}

uint64_t webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::media_type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32));
}

uint64_t webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::id(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
}

void webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::GetParameters(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(std::string *__return_ptr, _QWORD *);
  _QWORD *v6;
  TimeDelta v7;
  TimeDelta v8;
  char v9;
  std::string v10;
  uint64_t (*v11)(uint64_t *);
  char v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[121];
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  char v22;
  pthread_mutex_t v23;
  pthread_cond_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 32);
  v14 = xmmword_208F05280;
  v16 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v20 = 256;
  memset(v15, 0, sizeof(v15));
  v21 = 0;
  v22 = 0;
  rtc::Event::Event((rtc::Event *)&v23, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(std::string *__return_ptr, _QWORD *))v14;
    v6 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v5 = *(void (**)(std::string *__return_ptr, _QWORD *))(*v6 + v14);
    v5(&v10, v6);
    webrtc::RtpParameters::operator=((std::string *)v15, &v10);
    webrtc::RtpParameters::~RtpParameters((void **)&v10.__r_.__value_.__l.__data_);
  }
  else
  {
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    v10.__r_.__value_.__r.__words[2] = (std::string::size_type)absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpReceiverInterface,webrtc::RtpParameters>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, std::string *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v10, &v12, &v9);
    ((void (*)(uint64_t, std::string *, std::string *))v10.__r_.__value_.__r.__words[2])(1, &v10, &v10);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v23, v7, v8);
  }
  webrtc::RtpParameters::RtpParameters(a2, (const webrtc::RtpParameters *)v15);
  pthread_mutex_destroy(&v23);
  pthread_cond_destroy(&v24);
  webrtc::RtpParameters::~RtpParameters((void **)v15);
}

uint64_t webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::SetObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 32);
  v16 = xmmword_208F052A0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpReceiverInterface,void,webrtc::RtpReceiverObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::SetJitterBufferMinimumDelay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v6;
  TimeDelta v7;
  TimeDelta v8;
  _QWORD v10[2];
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  pthread_mutex_t v19;
  pthread_cond_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v10[0] = a2;
  v10[1] = a3;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = xmmword_208F052B0;
  v18 = v10;
  rtc::Event::Event((rtc::Event *)&v19, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(_QWORD *, _QWORD, _QWORD))v17;
    v6 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v5 = *(void (**)(_QWORD *, _QWORD, _QWORD))(*v6 + v17);
    v5(v6, *v18, v18[1]);
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpReceiverInterface,void,std::optional<double>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v19, v7, v8);
  }
  pthread_mutex_destroy(&v19);
  return pthread_cond_destroy(&v20);
}

void webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::GetSources(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(__int128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  __int128 v7;
  __n128 (*v8)(uint64_t, __n128 *, __n128 *);
  TimeDelta v9;
  TimeDelta v10;
  char v11;
  char v12;
  __int128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  void *__p[2];
  __n128 (*v19)(uint64_t, __n128 *, __n128 *);
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(a1 + 32);
  v17 = xmmword_208F16E60;
  __p[1] = 0;
  v19 = 0;
  __p[0] = 0;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(__int128 *__return_ptr, _QWORD *))v17;
    v6 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v5 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v6 + v17);
    v5(&v13, v6);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v7 = v13;
    v8 = v14;
  }
  else
  {
    *(_QWORD *)&v13 = &v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpReceiverInterface,std::vector<webrtc::RtpSource>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v13, &v12, &v11);
    v14(1, (__n128 *)&v13, (__n128 *)&v13);
    v9.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v10.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v9, v10);
    v7 = *(_OWORD *)__p;
    v8 = v19;
  }
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  __p[1] = 0;
  v19 = 0;
  __p[0] = 0;
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::SetFrameDecryptor(uint64_t a1, unint64_t *a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, __n128 *);
  _QWORD *v5;
  unint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 32);
  v16 = xmmword_208F16E70;
  v17 = a2;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, __n128 *))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, __n128 *))(*v5 + v16);
    v6 = *v17;
    *v17 = 0;
    v12.n128_u64[0] = v6;
    v4(v5, &v12);
    if (v12.n128_u64[0])
      (*(void (**)(unint64_t))(*(_QWORD *)v12.n128_u64[0] + 8))(v12.n128_u64[0]);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpReceiverInterface,void,webrtc::scoped_refptr<webrtc::FrameDecryptorInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v7, v8);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::GetFrameDecryptor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(__n128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  TimeDelta v9;
  TimeDelta v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  char v14;
  __n128 v15;
  __n128 (*v16)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v17)(uint64_t *);
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  pthread_mutex_t v21;
  pthread_cond_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v18 = *(_QWORD *)(a1 + 32);
  v19 = xmmword_208F16E80;
  v20 = 0;
  rtc::Event::Event((rtc::Event *)&v21, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(__n128 *__return_ptr, _QWORD *))v19;
    v6 = (_QWORD *)(v18 + (*((uint64_t *)&v19 + 1) >> 1));
    if ((BYTE8(v19) & 1) != 0)
      v5 = *(void (**)(__n128 *__return_ptr, _QWORD *))(*v6 + v19);
    v5(&v15, v6);
    v7 = v15.n128_u64[0];
    v15.n128_u64[0] = 0;
    v8 = v20;
    v20 = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      if (v15.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v15.n128_u64[0] + 8))(v15.n128_u64[0]);
    }
  }
  else
  {
    v15.n128_u64[0] = (unint64_t)&v18;
    v16 = absl::internal_any_invocable::LocalManagerTrivial;
    v17 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpReceiverInterface,webrtc::scoped_refptr<webrtc::FrameDecryptorInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v15, &v14, &v13);
    v16(1, &v15, &v15);
    v9.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v10.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v21, v9, v10);
  }
  v11 = v20;
  v20 = 0;
  *a2 = v11;
  pthread_mutex_destroy(&v21);
  pthread_cond_destroy(&v22);
  result = v20;
  if (v20)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  return result;
}

uint64_t webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::GenerateKeyFrame(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 32);
  v14 = xmmword_208F16E90;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpReceiverInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

uint64_t webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::SetFrameTransformer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  pthread_mutex_t v7;
  pthread_cond_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = xmmword_208F04E70;
  v6 = a2;
  rtc::Event::Event((rtc::Event *)&v7, 0, 0);
  webrtc::MethodCall<webrtc::RtpReceiverInterface,void,webrtc::scoped_refptr<webrtc::FrameTransformerInterface>>::Marshal(&v4, *(rtc::Thread **)(a1 + 24));
  pthread_mutex_destroy(&v7);
  return pthread_cond_destroy(&v8);
}

BOOL rtc::RefCountedObject<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 40));
  return v1 == 1;
}

_QWORD *`non-virtual thunk to'rtc::RefCountedObject<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>::~RefCountedObject(uint64_t a1)
{
  return webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::~RtpReceiverProxyWithInternal((_QWORD *)(a1 - 8));
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>::~RefCountedObject(uint64_t a1)
{
  webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::~RtpReceiverProxyWithInternal((_QWORD *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t `non-virtual thunk to'webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::SetFrameTransformer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  pthread_mutex_t v7;
  pthread_cond_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  v5 = xmmword_208F04E70;
  v6 = a2;
  rtc::Event::Event((rtc::Event *)&v7, 0, 0);
  webrtc::MethodCall<webrtc::RtpReceiverInterface,void,webrtc::scoped_refptr<webrtc::FrameTransformerInterface>>::Marshal(&v4, *(rtc::Thread **)(a1 + 16));
  pthread_mutex_destroy(&v7);
  return pthread_cond_destroy(&v8);
}

_QWORD *webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::~RtpReceiverProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0BE228;
  a1[1] = &unk_24C0BE2D8;
  v12 = a1;
  v13 = webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::DestroyInternal;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[2];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[4];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpReceiverInterface,webrtc::scoped_refptr<webrtc::DtlsTransportInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v8, v4);
  v5 = v8;
  v8 = 0;
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpReceiverInterface,std::vector<std::string>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  uint64_t v10;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v9, v4);
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(void **)(v1 + 24);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = *(void **)(v1 + 24);
    }
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v7);
  }
  *(_OWORD *)(v1 + 24) = v9;
  *(_QWORD *)(v1 + 40) = v10;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpReceiverInterface,std::vector<webrtc::scoped_refptr<webrtc::MediaStreamInterface>>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v11, v4);
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(void **)(v1 + 24);
    if (v6 != v5)
    {
      do
      {
        v9 = *(_QWORD *)(v6 - 8);
        v6 -= 8;
        v8 = v9;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = *(void **)(v1 + 24);
    }
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v7);
  }
  *(_OWORD *)(v1 + 24) = v11;
  *(_QWORD *)(v1 + 40) = v12;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpReceiverInterface,webrtc::RtpParameters>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(std::string *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  std::string v6[7];

  v1 = *a1;
  v2 = *(void (**)(std::string *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(std::string *__return_ptr, _QWORD *))(*v4 + v2);
  v2(v6, v4);
  webrtc::RtpParameters::operator=((std::string *)(v1 + 24), v6);
  webrtc::RtpParameters::~RtpParameters((void **)&v6[0].__r_.__value_.__l.__data_);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 200));
  *(_BYTE *)(v1 + 313) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 264));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 200));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpReceiverInterface,void,webrtc::RtpReceiverObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpReceiverInterface,void,std::optional<double>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD, _QWORD))(*v5 + v2);
  v2(v5, *v4, v4[1]);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpReceiverInterface,std::vector<webrtc::RtpSource>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  __int128 v7;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v7, v4);
  v5 = *(void **)(v1 + 24);
  if (v5)
  {
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v5);
  }
  *(_OWORD *)(v1 + 24) = v7;
  *(_QWORD *)(v1 + 40) = v8;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpReceiverInterface,void,webrtc::scoped_refptr<webrtc::FrameDecryptorInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(uint64_t **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t *))(*v5 + v2);
  v6 = *v4;
  *v4 = 0;
  v8 = v6;
  v2(v5, &v8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpReceiverInterface,webrtc::scoped_refptr<webrtc::FrameDecryptorInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v8, v4);
  v5 = v8;
  v8 = 0;
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpReceiverInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t webrtc::MethodCall<webrtc::RtpReceiverInterface,void,webrtc::scoped_refptr<webrtc::FrameTransformerInterface>>::Marshal(_QWORD *a1, rtc::Thread *this)
{
  void (*v4)(_QWORD *, __n128 *);
  uint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t result;
  TimeDelta v10;
  TimeDelta v11;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v4 = (void (*)(_QWORD *, __n128 *))a1[1];
    v5 = a1[2];
    v6 = (unint64_t *)a1[4];
    v7 = (_QWORD *)(*a1 + (v5 >> 1));
    if ((v5 & 1) != 0)
      v4 = *(void (**)(_QWORD *, __n128 *))(*v7 + v4);
    v8 = *v6;
    *v6 = 0;
    v14.n128_u64[0] = v8;
    v4(v7, &v14);
    result = v14.n128_u64[0];
    if (v14.n128_u64[0])
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v14.n128_u64[0] + 8))(v14.n128_u64[0]);
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)a1;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpReceiverInterface,void,webrtc::scoped_refptr<webrtc::FrameTransformerInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    return rtc::Event::Wait((rtc::Event *)(a1 + 5), v10, v11);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpReceiverInterface,void,webrtc::scoped_refptr<webrtc::FrameTransformerInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(uint64_t **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t *))(*v5 + v2);
  v6 = *v4;
  *v4 = 0;
  v8 = v6;
  v2(v5, &v8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

void rtc::RefCountedObject<webrtc::AudioRtpReceiver>::~RefCountedObject(webrtc::AudioRtpReceiver *a1)
{
  webrtc::AudioRtpReceiver::~AudioRtpReceiver(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::RefCountedObject<webrtc::AudioRtpReceiver>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 200);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::AudioRtpReceiver>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 50;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1);
  return v2 != 1;
}

BOOL rtc::RefCountedObject<webrtc::AudioRtpReceiver>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 200));
  return v1 == 1;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::AudioRtpReceiver>::~RefCountedObject(uint64_t a1)
{
  webrtc::AudioRtpReceiver::~AudioRtpReceiver((webrtc::AudioRtpReceiver *)(a1 - 8));
}

{
  webrtc::AudioRtpReceiver::~AudioRtpReceiver((webrtc::AudioRtpReceiver *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::AudioRtpReceiver::~AudioRtpReceiver((webrtc::AudioRtpReceiver *)(a1 - 16));
}

{
  webrtc::AudioRtpReceiver::~AudioRtpReceiver((webrtc::AudioRtpReceiver *)(a1 - 16));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::AudioRtpReceiver::~AudioRtpReceiver((webrtc::AudioRtpReceiver *)(a1 - 24));
}

{
  webrtc::AudioRtpReceiver::~AudioRtpReceiver((webrtc::AudioRtpReceiver *)(a1 - 24));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t `non-virtual thunk to'rtc::RefCountedObject<webrtc::AudioRtpReceiver>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 184);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL `non-virtual thunk to'rtc::RefCountedObject<webrtc::AudioRtpReceiver>::Release(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(a1 + 184);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (v2 == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 16))(a1 - 16);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::VideoRtpReceiver>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 180);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::VideoRtpReceiver>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 45;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::VideoRtpReceiver>::~RefCountedObject(webrtc::VideoRtpReceiver *a1)
{
  webrtc::VideoRtpReceiver::~VideoRtpReceiver(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t (***webrtc::VideoRtpReceiver::track@<X0>(webrtc::VideoRtpReceiver *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 11);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t webrtc::VideoRtpReceiver::media_type(webrtc::VideoRtpReceiver *this)
{
  return 1;
}

void webrtc::VideoRtpReceiver::id(webrtc::VideoRtpReceiver *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
  }
}

uint64_t webrtc::VideoRtpReceiver::AttachmentId(webrtc::VideoRtpReceiver *this)
{
  return *((unsigned int *)this + 33);
}

BOOL rtc::RefCountedObject<webrtc::VideoRtpReceiver>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 180));
  return v1 == 1;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::VideoRtpReceiver>::~RefCountedObject(uint64_t a1)
{
  webrtc::VideoRtpReceiver::~VideoRtpReceiver((webrtc::VideoRtpReceiver *)(a1 - 8));
}

{
  webrtc::VideoRtpReceiver::~VideoRtpReceiver((webrtc::VideoRtpReceiver *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1,std::allocator<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24C0BE680;
  v2 = a1[1];
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void std::__function::__func<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1,std::allocator<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24C0BE680;
  v1 = a1[1];
  if (v1)
  {
    v2 = (unsigned int *)(v1 + 4);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1,std::allocator<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0BE680;
  result[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result[2] = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1,std::allocator<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0BE680;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  a2[2] = *(_QWORD *)(result + 16);
  return result;
}

uint64_t std::__function::__func<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1,std::allocator<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v2 = (unsigned int *)(result + 4);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

void std::__function::__func<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1,std::allocator<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = __p[1];
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1,std::allocator<webrtc::RtpTransmissionManager::CreateAndAddTransceiver(webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>,webrtc::scoped_refptr<webrtc::RtpReceiverProxyWithInternal<webrtc::RtpReceiverInternal>>)::$_1>,void ()(void)>::operator()(uint64_t result)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  webrtc::RtpTransport *v4;
  BOOL v5;

  v1 = *(_BYTE **)(result + 8);
  if (v1)
  {
    if (*v1)
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        v3 = *(_QWORD *)(v2 + 240);
        if (v3)
        {
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
        }
        else
        {
          v4 = (webrtc::RtpTransport *)std::__throw_bad_function_call[abi:sn180100]();
          return webrtc::RtpTransport::SetRtcpMuxEnabled(v4, v5);
        }
      }
    }
  }
  return result;
}

void webrtc::RtpTransport::SetRtcpMuxEnabled(webrtc::RtpTransport *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_BYTE *)this + 248) = a2;
  webrtc::RtpTransport::MaybeSignalReadyToSend(this, a2, a3, a4, a5, a6, a7, a8);
}

void webrtc::RtpTransport::MaybeSignalReadyToSend(webrtc::RtpTransport *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  std::string *v20;
  uint64_t v21;
  char v22;
  char v23;
  _QWORD v24[2];
  uint64_t (*v25)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v26)(uint64_t);

  if (*((_BYTE *)this + 273))
  {
    if (*((_BYTE *)this + 274))
    {
      v9 = 1;
      if (*((_BYTE *)this + 272) == 1)
        return;
    }
    else
    {
      v9 = *((_BYTE *)this + 248) != 0;
      if (*((_BYTE *)this + 272) == v9)
        return;
    }
  }
  else
  {
    v9 = 0;
    if (!*((_BYTE *)this + 272))
      return;
  }
  if (*((_BYTE *)this + 502))
  {
    v11 = (unsigned int *)*((_QWORD *)this + 63);
    if (v11)
    {
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = (_QWORD *)operator new();
    *v13 = v11;
    v13[1] = this;
    v13[3] = absl::internal_any_invocable::LocalManagerTrivial;
    v13[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransport::MaybeSignalReadyToSend(void)::$_0 &&>;
    v24[0] = v13;
    v25 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v26 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v10 + 8))(v10, v24, &v23, &v22);
    v25(1, v24, v24);
  }
  else
  {
    v15 = (char *)this + 80;
    v14 = *((unsigned __int8 *)this + 80);
    *((_BYTE *)this + 272) = v9;
    *((_BYTE *)this + 502) = 1;
    if (v14)
    {
      v20 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v21);
      webrtc::RtpTransport::transport_name((webrtc::RtpTransport *)v20);
    }
    else
    {
      *((_BYTE *)this + 80) = 1;
      v16 = *((_QWORD *)this + 7);
      v17 = *((_QWORD *)this + 8);
      if (v16 == v17)
      {
        *v15 = 0;
      }
      else
      {
        v18 = 0;
        do
        {
          (*(void (**)(uint64_t, _BOOL8))(v16 + 40))(v16 + 8, v9);
          v19 = *(_BYTE **)v16;
          v16 += 56;
          v18 |= v19 == v15;
        }
        while (v16 != v17);
        *v15 = 0;
        if ((v18 & 1) != 0)
          webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::RtpTransport *)((char *)this + 56), (char *)this + 80);
      }
      *((_BYTE *)this + 502) = 0;
    }
  }
}

uint64_t webrtc::RtpTransport::transport_name(webrtc::RtpTransport *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 16))(*((_QWORD *)this + 32));
}

uint64_t webrtc::RtpTransport::SetRtpOption(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 48))(*(_QWORD *)(a1 + 256));
}

uint64_t webrtc::RtpTransport::SetRtcpOption(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 264);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  else
    return 0xFFFFFFFFLL;
}

void webrtc::RtpTransport::SetRtpPacketTransport(webrtc::RtpTransport *this, rtc::PacketTransportInternal *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  rtc::PacketTransportInternal *v8;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _QWORD *v31;
  _QWORD *v32;
  char v33;
  void (*v34)(_QWORD *, __int128 *);
  _BYTE *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _BYTE *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  void (*v54)(_QWORD *, __int128 *);
  _BYTE *v55;
  char v56;
  std::string *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD v66[2];
  uint64_t v67;
  __int128 v68;
  uint64_t (*v69)(_QWORD, _QWORD, _QWORD);
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v8 = (rtc::PacketTransportInternal *)*((_QWORD *)this + 32);
  if (v8 != a2)
  {
    if (!v8)
      goto LABEL_37;
    v11 = (uint64_t *)*((_QWORD *)v8 + 17);
    if (v11 != (uint64_t *)((char *)v8 + 128))
    {
      while ((webrtc::RtpTransport *)v11[3] != this)
      {
        v11 = (uint64_t *)v11[1];
        if (v11 == (uint64_t *)((char *)v8 + 128))
          goto LABEL_10;
      }
      v12 = (uint64_t *)*((_QWORD *)v8 + 19);
      v13 = *v11;
      v14 = v11[1];
      *(_QWORD *)(v13 + 8) = v14;
      *(_QWORD *)v11[1] = v13;
      --*((_QWORD *)v8 + 18);
      operator delete(v11);
      if (v12 == v11)
        *((_QWORD *)v8 + 19) = v14;
      (*((void (**)(webrtc::RtpTransport *, _QWORD *))this + 2))(this, (_QWORD *)v8 + 14);
      v8 = (rtc::PacketTransportInternal *)*((_QWORD *)this + 32);
    }
LABEL_10:
    webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((rtc::PacketTransportInternal *)((char *)v8 + 344), this);
    v15 = (_QWORD *)*((_QWORD *)this + 32);
    v16 = (uint64_t *)v15[38];
    if (v16 == v15 + 37)
    {
LABEL_13:
      v17 = v15 + 9;
      v18 = (uint64_t *)v15[10];
      if (v18 != v15 + 9)
        goto LABEL_18;
    }
    else
    {
      while ((webrtc::RtpTransport *)v16[3] != this)
      {
        v16 = (uint64_t *)v16[1];
        if (v16 == v15 + 37)
          goto LABEL_13;
      }
      v19 = (uint64_t *)v15[40];
      v20 = *v16;
      v21 = v16[1];
      *(_QWORD *)(v20 + 8) = v21;
      *(_QWORD *)v16[1] = v20;
      --v15[39];
      operator delete(v16);
      if (v19 == v16)
        v15[40] = v21;
      (*((void (**)(webrtc::RtpTransport *, _QWORD *))this + 2))(this, v15 + 35);
      v15 = (_QWORD *)*((_QWORD *)this + 32);
      v17 = v15 + 9;
      v18 = (uint64_t *)v15[10];
      if (v18 != v15 + 9)
      {
LABEL_18:
        while ((webrtc::RtpTransport *)v18[3] != this)
        {
          v18 = (uint64_t *)v18[1];
          if (v18 == v17)
            goto LABEL_20;
        }
        v24 = (uint64_t *)v15[12];
        v25 = *v18;
        v26 = v18[1];
        *(_QWORD *)(v25 + 8) = v26;
        *(_QWORD *)v18[1] = v25;
        --v15[11];
        operator delete(v18);
        if (v24 == v18)
          v15[12] = v26;
        (*((void (**)(webrtc::RtpTransport *, _QWORD *))this + 2))(this, v15 + 7);
        v15 = (_QWORD *)*((_QWORD *)this + 32);
        v22 = v15 + 30;
        v23 = (uint64_t *)v15[31];
        if (v23 != v15 + 30)
        {
LABEL_25:
          while ((webrtc::RtpTransport *)v23[3] != this)
          {
            v23 = (uint64_t *)v23[1];
            if (v23 == v22)
              goto LABEL_31;
          }
          v27 = (uint64_t *)v15[33];
          v28 = *v23;
          v29 = v23[1];
          *(_QWORD *)(v28 + 8) = v29;
          *(_QWORD *)v23[1] = v28;
          --v15[32];
          operator delete(v23);
          if (v27 == v23)
            v15[33] = v29;
          (*((void (**)(webrtc::RtpTransport *, _QWORD *))this + 2))(this, v15 + 28);
        }
        goto LABEL_31;
      }
    }
LABEL_20:
    v22 = v15 + 30;
    v23 = (uint64_t *)v15[31];
    if (v23 != v15 + 30)
      goto LABEL_25;
LABEL_31:
    v30 = (char *)this + 176;
    if (*((_BYTE *)this + 176))
      goto LABEL_50;
    *((_BYTE *)this + 176) = 1;
    v31 = (_QWORD *)*((_QWORD *)this + 19);
    v32 = (_QWORD *)*((_QWORD *)this + 20);
    if (v31 == v32)
    {
      *v30 = 0;
      if (a2)
      {
LABEL_38:
        v36 = operator new(0x30uLL);
        v36[2] = sigslot::_opaque_connection::emitter<webrtc::RtpTransport,rtc::PacketTransportInternal *>;
        v36[3] = this;
        v36[4] = webrtc::RtpTransport::OnReadyToSend;
        v36[5] = 0;
        v37 = *((_QWORD *)a2 + 16);
        *v36 = v37;
        v36[1] = (char *)a2 + 128;
        *(_QWORD *)(v37 + 8) = v36;
        *((_QWORD *)a2 + 16) = v36;
        ++*((_QWORD *)a2 + 18);
        (*((void (**)(webrtc::RtpTransport *, char *))this + 1))(this, (char *)a2 + 112);
        *(_QWORD *)&v68 = this;
        v38 = operator new();
        *(_OWORD *)v38 = v68;
        *(_QWORD *)(v38 + 16) = absl::internal_any_invocable::LocalManagerTrivial;
        *(_QWORD *)(v38 + 24) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransport::SetRtpPacketTransport(rtc::PacketTransportInternal *)::$_0 &,rtc::PacketTransportInternal *,rtc::ReceivedPacket const&>;
        v69 = absl::internal_any_invocable::EmptyManager;
        v70 = 0;
        *(_QWORD *)&v71 = v38;
        *((_QWORD *)&v71 + 1) = webrtc::webrtc_function_impl::CallHelpers<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)>::CallVoidPtr<absl::AnyInvocable<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)>>;
        *(_QWORD *)&v72 = webrtc::UntypedFunction::PrepareArgs<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&),absl::AnyInvocable<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)>,absl::AnyInvocable<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)>,(void *)0>(absl::AnyInvocable<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke;
        webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>((char *)a2 + 344, (uint64_t)this, (uint64_t *)&v71, v39, v40, v41, v42, v43);
        absl::internal_any_invocable::EmptyManager(1, &v68, &v68);
        v44 = operator new(0x30uLL);
        v44[2] = sigslot::_opaque_connection::emitter<webrtc::RtpTransport,std::optional<rtc::NetworkRoute>>;
        v44[3] = this;
        *((_OWORD *)v44 + 2) = xmmword_208F16E70;
        v45 = *((_QWORD *)a2 + 37);
        *v44 = v45;
        v44[1] = (char *)a2 + 296;
        *(_QWORD *)(v45 + 8) = v44;
        *((_QWORD *)a2 + 37) = v44;
        ++*((_QWORD *)a2 + 39);
        (*((void (**)(webrtc::RtpTransport *, char *))this + 1))(this, (char *)a2 + 280);
        v46 = operator new(0x30uLL);
        v46[2] = sigslot::_opaque_connection::emitter<webrtc::RtpTransport,rtc::PacketTransportInternal *>;
        v46[3] = this;
        *((_OWORD *)v46 + 2) = xmmword_208F16E90;
        v47 = *((_QWORD *)a2 + 9);
        *v46 = v47;
        v46[1] = (char *)a2 + 72;
        *(_QWORD *)(v47 + 8) = v46;
        *((_QWORD *)a2 + 9) = v46;
        ++*((_QWORD *)a2 + 11);
        (*((void (**)(webrtc::RtpTransport *, char *))this + 1))(this, (char *)a2 + 56);
        v48 = operator new(0x30uLL);
        v48[2] = sigslot::_opaque_connection::emitter<webrtc::RtpTransport,rtc::PacketTransportInternal *,rtc::SentPacket const&>;
        v48[3] = this;
        v48[4] = webrtc::RtpTransport::OnSentPacket;
        v48[5] = 0;
        v49 = *((_QWORD *)a2 + 30);
        *v48 = v49;
        v48[1] = (char *)a2 + 240;
        *(_QWORD *)(v49 + 8) = v48;
        *((_QWORD *)a2 + 30) = v48;
        ++*((_QWORD *)a2 + 32);
        (*((void (**)(webrtc::RtpTransport *, char *))this + 1))(this, (char *)a2 + 224);
        (*(void (**)(_OWORD *__return_ptr, rtc::PacketTransportInternal *))(*(_QWORD *)a2 + 72))(v66, a2);
        v50 = (char *)this + 176;
        if (!*((_BYTE *)this + 176))
        {
          *((_BYTE *)this + 176) = 1;
          v51 = (_QWORD *)*((_QWORD *)this + 19);
          v52 = (_QWORD *)*((_QWORD *)this + 20);
          if (v51 == v52)
          {
            *v50 = 0;
          }
          else
          {
            v53 = 0;
            do
            {
              v54 = (void (*)(_QWORD *, __int128 *))v51[5];
              v71 = v66[0];
              v72 = v66[1];
              v73 = v67;
              v54(v51 + 1, &v71);
              v55 = (_BYTE *)*v51;
              v51 += 7;
              v53 |= v55 == v50;
            }
            while (v51 != v52);
            *v50 = 0;
            if ((v53 & 1) != 0)
              webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::RtpTransport *)((char *)this + 152), (char *)this + 176);
          }
          *((_QWORD *)this + 32) = a2;
          v56 = (*(uint64_t (**)(rtc::PacketTransportInternal *))(*(_QWORD *)a2 + 24))(a2);
          goto LABEL_48;
        }
LABEL_50:
        v57 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v65);
        webrtc::RtpTransport::OnReadyToSend((webrtc::RtpTransport *)v57, v58, v59, v60, v61, v62, v63, v64);
        return;
      }
LABEL_45:
      v56 = 0;
      *((_QWORD *)this + 32) = 0;
LABEL_48:
      *((_BYTE *)this + 273) = v56;
      webrtc::RtpTransport::MaybeSignalReadyToSend(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      return;
    }
    v33 = 0;
    do
    {
      v34 = (void (*)(_QWORD *, __int128 *))v31[5];
      LOBYTE(v71) = 0;
      BYTE4(v73) = 0;
      v34(v31 + 1, &v71);
      v35 = (_BYTE *)*v31;
      v31 += 7;
      v33 |= v35 == v30;
    }
    while (v31 != v32);
    *v30 = 0;
    if ((v33 & 1) != 0)
      webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::RtpTransport *)((char *)this + 152), (char *)this + 176);
LABEL_37:
    if (a2)
      goto LABEL_38;
    goto LABEL_45;
  }
}

void webrtc::RtpTransport::OnReadyToSend(webrtc::RtpTransport *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_QWORD *)this + 33) == a2)
    *((_BYTE *)this + 274) = 1;
  else
    *((_BYTE *)this + 273) = 1;
  webrtc::RtpTransport::MaybeSignalReadyToSend(this, a2, a3, a4, a5, a6, a7, a8);
}

void webrtc::RtpTransport::OnSentPacket(webrtc::RtpTransport *this, rtc::PacketTransportInternal *a2, const rtc::SentPacket *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE *v23;
  std::string *v24;
  rtc::PacketTransportInternal *v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  _QWORD v33[2];
  uint64_t (*v34)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v35)(uint64_t);

  if (*((_BYTE *)this + 503))
  {
    v11 = (unsigned int *)*((_QWORD *)this + 63);
    if (v11)
    {
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *((_OWORD *)a3 + 1);
    v31 = *(_OWORD *)a3;
    v14 = *((_OWORD *)a3 + 2);
    v28 = v13;
    v29 = v14;
    v30 = *((_QWORD *)a3 + 6);
    v15 = operator new();
    *(_QWORD *)v15 = this;
    *(_OWORD *)(v15 + 8) = v31;
    v16 = v29;
    *(_OWORD *)(v15 + 24) = v28;
    *(_OWORD *)(v15 + 40) = v16;
    *(_QWORD *)(v15 + 56) = v30;
    v17 = (_QWORD *)operator new();
    *v17 = v11;
    v17[1] = v15;
    v17[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::RtpTransport::OnSentPacket(rtc::PacketTransportInternal *,rtc::SentPacket const&)::$_0>;
    v17[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::RtpTransport::OnSentPacket(rtc::PacketTransportInternal *,rtc::SentPacket const&)::$_0 &&>;
    v33[0] = v17;
    v34 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v35 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v10 + 8))(v10, v33, &v32, &v27);
    v34(1, v33, v33);
  }
  else
  {
    v19 = (char *)this + 240;
    v18 = *((unsigned __int8 *)this + 240);
    *((_BYTE *)this + 503) = 1;
    if (v18)
    {
      v24 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v26);
      webrtc::RtpTransport::SetRtcpPacketTransport((webrtc::RtpTransport *)v24, v25);
    }
    else
    {
      *((_BYTE *)this + 240) = 1;
      v20 = *((_QWORD *)this + 27);
      v21 = *((_QWORD *)this + 28);
      if (v20 == v21)
      {
        *v19 = 0;
      }
      else
      {
        v22 = 0;
        do
        {
          (*(void (**)(uint64_t, const rtc::SentPacket *))(v20 + 40))(v20 + 8, a3);
          v23 = *(_BYTE **)v20;
          v20 += 56;
          v22 |= v23 == v19;
        }
        while (v20 != v21);
        *v19 = 0;
        if ((v22 & 1) != 0)
          webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::RtpTransport *)((char *)this + 216), (char *)this + 240);
      }
      *((_BYTE *)this + 503) = 0;
    }
  }
}

void webrtc::RtpTransport::SetRtcpPacketTransport(webrtc::RtpTransport *this, rtc::PacketTransportInternal *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  rtc::PacketTransportInternal *v8;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _QWORD *v31;
  _QWORD *v32;
  char v33;
  void (*v34)(_QWORD *, __int128 *);
  _BYTE *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _BYTE *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  void (*v54)(_QWORD *, __int128 *);
  _BYTE *v55;
  char v56;
  std::string *v57;
  int v58;
  uint64_t v59;
  _OWORD v60[2];
  uint64_t v61;
  __int128 v62;
  uint64_t (*v63)(_QWORD, _QWORD, _QWORD);
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v8 = (rtc::PacketTransportInternal *)*((_QWORD *)this + 33);
  if (v8 != a2)
  {
    if (!v8)
      goto LABEL_37;
    v11 = (uint64_t *)*((_QWORD *)v8 + 17);
    if (v11 != (uint64_t *)((char *)v8 + 128))
    {
      while ((webrtc::RtpTransport *)v11[3] != this)
      {
        v11 = (uint64_t *)v11[1];
        if (v11 == (uint64_t *)((char *)v8 + 128))
          goto LABEL_10;
      }
      v12 = (uint64_t *)*((_QWORD *)v8 + 19);
      v13 = *v11;
      v14 = v11[1];
      *(_QWORD *)(v13 + 8) = v14;
      *(_QWORD *)v11[1] = v13;
      --*((_QWORD *)v8 + 18);
      operator delete(v11);
      if (v12 == v11)
        *((_QWORD *)v8 + 19) = v14;
      (*((void (**)(webrtc::RtpTransport *, _QWORD *))this + 2))(this, (_QWORD *)v8 + 14);
      v8 = (rtc::PacketTransportInternal *)*((_QWORD *)this + 33);
    }
LABEL_10:
    webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((rtc::PacketTransportInternal *)((char *)v8 + 344), this);
    v15 = (_QWORD *)*((_QWORD *)this + 33);
    v16 = (uint64_t *)v15[38];
    if (v16 == v15 + 37)
    {
LABEL_13:
      v17 = v15 + 9;
      v18 = (uint64_t *)v15[10];
      if (v18 != v15 + 9)
        goto LABEL_18;
    }
    else
    {
      while ((webrtc::RtpTransport *)v16[3] != this)
      {
        v16 = (uint64_t *)v16[1];
        if (v16 == v15 + 37)
          goto LABEL_13;
      }
      v19 = (uint64_t *)v15[40];
      v20 = *v16;
      v21 = v16[1];
      *(_QWORD *)(v20 + 8) = v21;
      *(_QWORD *)v16[1] = v20;
      --v15[39];
      operator delete(v16);
      if (v19 == v16)
        v15[40] = v21;
      (*((void (**)(webrtc::RtpTransport *, _QWORD *))this + 2))(this, v15 + 35);
      v15 = (_QWORD *)*((_QWORD *)this + 33);
      v17 = v15 + 9;
      v18 = (uint64_t *)v15[10];
      if (v18 != v15 + 9)
      {
LABEL_18:
        while ((webrtc::RtpTransport *)v18[3] != this)
        {
          v18 = (uint64_t *)v18[1];
          if (v18 == v17)
            goto LABEL_20;
        }
        v24 = (uint64_t *)v15[12];
        v25 = *v18;
        v26 = v18[1];
        *(_QWORD *)(v25 + 8) = v26;
        *(_QWORD *)v18[1] = v25;
        --v15[11];
        operator delete(v18);
        if (v24 == v18)
          v15[12] = v26;
        (*((void (**)(webrtc::RtpTransport *, _QWORD *))this + 2))(this, v15 + 7);
        v15 = (_QWORD *)*((_QWORD *)this + 33);
        v22 = v15 + 30;
        v23 = (uint64_t *)v15[31];
        if (v23 != v15 + 30)
        {
LABEL_25:
          while ((webrtc::RtpTransport *)v23[3] != this)
          {
            v23 = (uint64_t *)v23[1];
            if (v23 == v22)
              goto LABEL_31;
          }
          v27 = (uint64_t *)v15[33];
          v28 = *v23;
          v29 = v23[1];
          *(_QWORD *)(v28 + 8) = v29;
          *(_QWORD *)v23[1] = v28;
          --v15[32];
          operator delete(v23);
          if (v27 == v23)
            v15[33] = v29;
          (*((void (**)(webrtc::RtpTransport *, _QWORD *))this + 2))(this, v15 + 28);
        }
        goto LABEL_31;
      }
    }
LABEL_20:
    v22 = v15 + 30;
    v23 = (uint64_t *)v15[31];
    if (v23 != v15 + 30)
      goto LABEL_25;
LABEL_31:
    v30 = (char *)this + 176;
    if (*((_BYTE *)this + 176))
      goto LABEL_50;
    *((_BYTE *)this + 176) = 1;
    v31 = (_QWORD *)*((_QWORD *)this + 19);
    v32 = (_QWORD *)*((_QWORD *)this + 20);
    if (v31 == v32)
    {
      *v30 = 0;
      if (a2)
      {
LABEL_38:
        v36 = operator new(0x30uLL);
        v36[2] = sigslot::_opaque_connection::emitter<webrtc::RtpTransport,rtc::PacketTransportInternal *>;
        v36[3] = this;
        v36[4] = webrtc::RtpTransport::OnReadyToSend;
        v36[5] = 0;
        v37 = *((_QWORD *)a2 + 16);
        *v36 = v37;
        v36[1] = (char *)a2 + 128;
        *(_QWORD *)(v37 + 8) = v36;
        *((_QWORD *)a2 + 16) = v36;
        ++*((_QWORD *)a2 + 18);
        (*((void (**)(webrtc::RtpTransport *, char *))this + 1))(this, (char *)a2 + 112);
        *(_QWORD *)&v62 = this;
        v38 = operator new();
        *(_OWORD *)v38 = v62;
        *(_QWORD *)(v38 + 16) = absl::internal_any_invocable::LocalManagerTrivial;
        *(_QWORD *)(v38 + 24) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransport::SetRtcpPacketTransport(rtc::PacketTransportInternal *)::$_0 &,rtc::PacketTransportInternal *,rtc::ReceivedPacket const&>;
        v63 = absl::internal_any_invocable::EmptyManager;
        v64 = 0;
        *(_QWORD *)&v65 = v38;
        *((_QWORD *)&v65 + 1) = webrtc::webrtc_function_impl::CallHelpers<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)>::CallVoidPtr<absl::AnyInvocable<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)>>;
        *(_QWORD *)&v66 = webrtc::UntypedFunction::PrepareArgs<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&),absl::AnyInvocable<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)>,absl::AnyInvocable<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)>,(void *)0>(absl::AnyInvocable<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke;
        webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>((char *)a2 + 344, (uint64_t)this, (uint64_t *)&v65, v39, v40, v41, v42, v43);
        absl::internal_any_invocable::EmptyManager(1, &v62, &v62);
        v44 = operator new(0x30uLL);
        v44[2] = sigslot::_opaque_connection::emitter<webrtc::RtpTransport,std::optional<rtc::NetworkRoute>>;
        v44[3] = this;
        *((_OWORD *)v44 + 2) = xmmword_208F16E70;
        v45 = *((_QWORD *)a2 + 37);
        *v44 = v45;
        v44[1] = (char *)a2 + 296;
        *(_QWORD *)(v45 + 8) = v44;
        *((_QWORD *)a2 + 37) = v44;
        ++*((_QWORD *)a2 + 39);
        (*((void (**)(webrtc::RtpTransport *, char *))this + 1))(this, (char *)a2 + 280);
        v46 = operator new(0x30uLL);
        v46[2] = sigslot::_opaque_connection::emitter<webrtc::RtpTransport,rtc::PacketTransportInternal *>;
        v46[3] = this;
        *((_OWORD *)v46 + 2) = xmmword_208F16E90;
        v47 = *((_QWORD *)a2 + 9);
        *v46 = v47;
        v46[1] = (char *)a2 + 72;
        *(_QWORD *)(v47 + 8) = v46;
        *((_QWORD *)a2 + 9) = v46;
        ++*((_QWORD *)a2 + 11);
        (*((void (**)(webrtc::RtpTransport *, char *))this + 1))(this, (char *)a2 + 56);
        v48 = operator new(0x30uLL);
        v48[2] = sigslot::_opaque_connection::emitter<webrtc::RtpTransport,rtc::PacketTransportInternal *,rtc::SentPacket const&>;
        v48[3] = this;
        v48[4] = webrtc::RtpTransport::OnSentPacket;
        v48[5] = 0;
        v49 = *((_QWORD *)a2 + 30);
        *v48 = v49;
        v48[1] = (char *)a2 + 240;
        *(_QWORD *)(v49 + 8) = v48;
        *((_QWORD *)a2 + 30) = v48;
        ++*((_QWORD *)a2 + 32);
        (*((void (**)(webrtc::RtpTransport *, char *))this + 1))(this, (char *)a2 + 224);
        (*(void (**)(_OWORD *__return_ptr, rtc::PacketTransportInternal *))(*(_QWORD *)a2 + 72))(v60, a2);
        v50 = (char *)this + 176;
        if (!*((_BYTE *)this + 176))
        {
          *((_BYTE *)this + 176) = 1;
          v51 = (_QWORD *)*((_QWORD *)this + 19);
          v52 = (_QWORD *)*((_QWORD *)this + 20);
          if (v51 == v52)
          {
            *v50 = 0;
          }
          else
          {
            v53 = 0;
            do
            {
              v54 = (void (*)(_QWORD *, __int128 *))v51[5];
              v65 = v60[0];
              v66 = v60[1];
              v67 = v61;
              v54(v51 + 1, &v65);
              v55 = (_BYTE *)*v51;
              v51 += 7;
              v53 |= v55 == v50;
            }
            while (v51 != v52);
            *v50 = 0;
            if ((v53 & 1) != 0)
              webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::RtpTransport *)((char *)this + 152), (char *)this + 176);
          }
          *((_QWORD *)this + 33) = a2;
          v56 = (*(uint64_t (**)(rtc::PacketTransportInternal *))(*(_QWORD *)a2 + 24))(a2);
          goto LABEL_48;
        }
LABEL_50:
        v57 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v59);
        webrtc::RtpTransport::IsWritable((webrtc::RtpTransport *)v57, v58);
        return;
      }
LABEL_45:
      v56 = 0;
      *((_QWORD *)this + 33) = 0;
LABEL_48:
      *((_BYTE *)this + 274) = v56;
      webrtc::RtpTransport::MaybeSignalReadyToSend(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      return;
    }
    v33 = 0;
    do
    {
      v34 = (void (*)(_QWORD *, __int128 *))v31[5];
      LOBYTE(v65) = 0;
      BYTE4(v67) = 0;
      v34(v31 + 1, &v65);
      v35 = (_BYTE *)*v31;
      v31 += 7;
      v33 |= v35 == v30;
    }
    while (v31 != v32);
    *v30 = 0;
    if ((v33 & 1) != 0)
      webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::RtpTransport *)((char *)this + 152), (char *)this + 176);
LABEL_37:
    if (a2)
      goto LABEL_38;
    goto LABEL_45;
  }
}

uint64_t webrtc::RtpTransport::IsWritable(webrtc::RtpTransport *this, int a2)
{
  uint64_t result;

  if (!a2 || *((_BYTE *)this + 248))
  {
    result = *((_QWORD *)this + 32);
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  result = *((_QWORD *)this + 33);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

BOOL webrtc::RtpTransport::SendRtpPacket(webrtc::RtpTransport *this, rtc::CopyOnWriteBuffer *a2, const rtc::PacketOptions *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *((_QWORD *)this + 32);
  if (*(_QWORD *)a2)
    v7 = *(_QWORD *)(*(_QWORD *)a2 + 16) + *((_QWORD *)a2 + 1);
  else
    v7 = 0;
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, const rtc::PacketOptions *, uint64_t))(*(_QWORD *)v6 + 40))(*((_QWORD *)this + 32), v7, *((_QWORD *)a2 + 2), a3, a4);
  v9 = *((_DWORD *)a2 + 4);
  if (v8 != v9 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6) == 57)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transport.cc");
    *((_BYTE *)this + 273) = 0;
    webrtc::RtpTransport::MaybeSignalReadyToSend(this, v10, v11, v12, v13, v14, v15, v16);
  }
  return v8 == v9;
}

BOOL webrtc::RtpTransport::SendRtcpPacket(webrtc::RtpTransport *this, rtc::CopyOnWriteBuffer *a2, const rtc::PacketOptions *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 256;
  if (!*((_BYTE *)this + 248))
    v6 = 264;
  v7 = *(_QWORD *)((char *)this + v6);
  if (*(_QWORD *)a2)
    v8 = *(_QWORD *)(*(_QWORD *)a2 + 16) + *((_QWORD *)a2 + 1);
  else
    v8 = 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, const rtc::PacketOptions *, uint64_t))(*(_QWORD *)v7 + 40))(v7, v8, *((_QWORD *)a2 + 2), a3, a4);
  v10 = *((_DWORD *)a2 + 4);
  if (v9 != v10 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7) == 57)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transport.cc");
    *((_BYTE *)this + 274) = 0;
    webrtc::RtpTransport::MaybeSignalReadyToSend(this, v11, v12, v13, v14, v15, v16, v17);
  }
  return v9 == v10;
}

double webrtc::RtpTransport::UpdateRtpHeaderExtensionMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;
  double result;
  double v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v3 = a2[1];
  memset(v12, 0, 22);
  v5 = v3 - v4;
  if (v5)
    v6 = v4;
  else
    v6 = 0;
  if (v5)
  {
    v7 = v6 + v5;
    do
    {
      if (*(char *)(v4 + 23) < 0)
      {
        v8 = *(_QWORD *)(v4 + 8);
        if (v8 < 0 || ((v9 = *(_QWORD **)v4, v8) ? (v10 = v9 == 0) : (v10 = 0), v10))
        {
          __break(1u);
          break;
        }
      }
      else
      {
        v8 = *(unsigned __int8 *)(v4 + 23);
        v9 = (_QWORD *)v4;
      }
      webrtc::RtpHeaderExtensionMap::RegisterByUri((webrtc::RtpHeaderExtensionMap *)v12, *(_DWORD *)(v4 + 24), v9, v8);
      v4 += 32;
    }
    while (v4 != v7);
  }
  result = v12[0];
  *(_OWORD *)(a1 + 480) = *(_OWORD *)v12;
  *(double *)(a1 + 494) = *(double *)((char *)&v12[1] + 6);
  return result;
}

uint64_t webrtc::RtpTransport::RegisterRtpDemuxerSink(uint64_t a1, unsigned __int8 *a2, std::string::size_type a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a1 + 280;
  webrtc::RtpDemuxer::RemoveSink((_QWORD *)(a1 + 280), a3);
  v6 = webrtc::RtpDemuxer::AddSink(v5, a2, a3);
  if ((v6 & 1) == 0 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transport.cc");
  return v6;
}

uint64_t webrtc::RtpTransport::UnregisterRtpDemuxerSink(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  webrtc::RtpDemuxer::RemoveSink((_QWORD *)(a1 + 280), a2);
  v3 = v2;
  if ((v2 & 1) == 0 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transport.cc");
  return v3;
}

void webrtc::RtpTransport::DemuxPacket(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  char v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  std::string __p;
  uint64_t v39;
  __int128 v40;
  _BYTE v41[56];
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  webrtc::RtpPacket::RtpPacket((webrtc::RtpPacket *)v41, (const webrtc::RtpHeaderExtensionMap *)(a1 + 480), (uint64_t *)0x5DC);
  v48 = 0;
  v47 = 0;
  v45 = a3;
  v46 = a4;
  v39 = *a2;
  v40 = *(_OWORD *)(a2 + 1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v8 = webrtc::RtpPacket::Parse((uint64_t)v41, &v39);
  v9 = v39;
  if (v39)
  {
    v10 = (unsigned int *)(v39 + 24);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      v13 = *(_QWORD *)(v9 + 16);
      *(_QWORD *)(v9 + 16) = 0;
      if (v13)
        MEMORY[0x20BD0ADD4](v13, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v9, 0x1010C40EE34DA14);
    }
  }
  if ((v8 & 1) != 0)
  {
    v14 = webrtc::RtpDemuxer::ResolveSink(a1 + 280, (uint64_t)v41);
    if (v14)
    {
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v14 + 16))(v14, v41);
    }
    else
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      {
        webrtc::RtpDemuxer::DescribePacket((uint64_t)v41, &__p);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transport.cc");
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      (*(void (**)(uint64_t, _BYTE *))(a1 + 144))(a1 + 120, v41);
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transport.cc");
  }
  v29 = v48;
  if (v48)
  {
    v30 = (unsigned int *)(v48 + 8);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  v33 = v44;
  if (v44)
  {
    v34 = (unsigned int *)(v44 + 24);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      v37 = *(_QWORD *)(v33 + 16);
      *(_QWORD *)(v33 + 16) = 0;
      if (v37)
        MEMORY[0x20BD0ADD4](v37, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v33, 0x1010C40EE34DA14);
    }
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
}

void webrtc::RtpTransport::OnNetworkRouteChanged(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  void (*v12)(_QWORD *, _OWORD *);
  _BYTE *v13;
  std::string *v14;
  rtc::PacketTransportInternal *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  v16 = *a2;
  v17 = a2[1];
  v18 = *((_QWORD *)a2 + 4);
  v8 = (_BYTE *)(a1 + 176);
  if (*(_BYTE *)(a1 + 176))
  {
    v14 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v16);
    webrtc::RtpTransport::OnWritableState((webrtc::RtpTransport *)v14, v15);
  }
  else
  {
    *(_BYTE *)(a1 + 176) = 1;
    v9 = *(_QWORD **)(a1 + 152);
    v10 = *(_QWORD **)(a1 + 160);
    if (v9 == v10)
    {
      *v8 = 0;
    }
    else
    {
      v11 = 0;
      do
      {
        v12 = (void (*)(_QWORD *, _OWORD *))v9[5];
        v19[0] = v16;
        v19[1] = v17;
        v20 = v18;
        v12(v9 + 1, v19);
        v13 = (_BYTE *)*v9;
        v9 += 7;
        v11 |= v13 == v8;
      }
      while (v9 != v10);
      *v8 = 0;
      if ((v11 & 1) != 0)
        webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(v8 - 24), v8);
    }
  }
}

void webrtc::RtpTransport::OnWritableState(webrtc::RtpTransport *this, rtc::PacketTransportInternal *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE *v16;
  uint64_t v17;

  if (*((_BYTE *)this + 248))
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 32);
    if (!v10)
    {
LABEL_9:
      while (1)
      {
        v11 = 0;
        v12 = (char *)this + 208;
        if (!*((_BYTE *)this + 208))
          break;
LABEL_8:
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v17);
      }
      goto LABEL_10;
    }
  }
  else
  {
    v10 = *((_QWORD *)this + 32);
    v9 = *((_QWORD *)this + 33);
    if (!v10)
      goto LABEL_9;
  }
  if (!(*(unsigned int (**)(uint64_t, rtc::PacketTransportInternal *))(*(_QWORD *)v10 + 24))(v10, a2))
    goto LABEL_9;
  if (v9)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v12 = (char *)this + 208;
    if (*((_BYTE *)this + 208))
      goto LABEL_8;
  }
  else
  {
    v11 = 1;
    v12 = (char *)this + 208;
    if (*((_BYTE *)this + 208))
      goto LABEL_8;
  }
LABEL_10:
  *((_BYTE *)this + 208) = 1;
  v13 = *((_QWORD *)this + 23);
  v14 = *((_QWORD *)this + 24);
  if (v13 == v14)
  {
    *v12 = 0;
  }
  else
  {
    v15 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v13 + 8, v11);
      v16 = *(_BYTE **)v13;
      v13 += 56;
      v15 |= v16 == v12;
    }
    while (v13 != v14);
    *v12 = 0;
    if ((v15 & 1) != 0)
      webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(v12 - 24), v12);
  }
}

void webrtc::RtpTransport::OnRtpPacketReceived(uint64_t a1, uint64_t a2)
{
  size_t v4;
  const void *v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21[3];

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(const void **)a2;
    v6 = operator new();
    *(_QWORD *)v6 = v4;
    *(_QWORD *)(v6 + 8) = v4;
    v7 = (void *)operator new[]();
    *(_QWORD *)(v6 + 16) = v7;
    *(_DWORD *)(v6 + 24) = 0;
    v8 = (unsigned int *)(v6 + 24);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    memcpy(v7, v5, v4);
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 + 1, v8));
  }
  else
  {
    v6 = 0;
  }
  v21[0] = v6;
  v21[1] = 0;
  v21[2] = v4;
  if (*(_BYTE *)(a2 + 24))
    v11 = *(_QWORD *)(a2 + 16);
  else
    v11 = 0x8000000000000000;
  webrtc::RtpTransport::DemuxPacket(a1, v21, v11, *(_DWORD *)(a2 + 40));
  v12 = v21[0];
  if (v21[0])
  {
    v13 = (unsigned int *)(v21[0] + 24);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      v16 = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(v12 + 16) = 0;
      if (v16)
        MEMORY[0x20BD0ADD4](v16, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v12, 0x1010C40EE34DA14);
    }
  }
  if (v4)
  {
    v17 = (unsigned int *)(v6 + 24);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      v20 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      if (v20)
        MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
}

void webrtc::RtpTransport::OnRtcpPacketReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10;
  const void *v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  std::string *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;

  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    v11 = *(const void **)a2;
    v12 = operator new();
    *(_QWORD *)v12 = v10;
    *(_QWORD *)(v12 + 8) = v10;
    v13 = (void *)operator new[]();
    *(_QWORD *)(v12 + 16) = v13;
    *(_DWORD *)(v12 + 24) = 0;
    v14 = (unsigned int *)(v12 + 24);
    v29 = v12;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    memcpy(v13, v11, v10);
    v30 = 0;
    v31 = v10;
  }
  else
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
  }
  if (*(_BYTE *)(a2 + 24))
    v16 = *(_QWORD *)(a2 + 16);
  else
    v16 = -1;
  v17 = (_BYTE *)(a1 + 112);
  if (*(_BYTE *)(a1 + 112))
  {
    v27 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v28);
    webrtc::RtpTransport::~RtpTransport((webrtc::RtpTransport *)v27);
    return;
  }
  *(_BYTE *)(a1 + 112) = 1;
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(a1 + 96);
  if (v18 == v19)
  {
    *v17 = 0;
    v22 = v29;
    if (!v29)
      return;
    goto LABEL_18;
  }
  v20 = 0;
  do
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v18 + 40))(v18 + 8, &v29, v16);
    v21 = *(_BYTE **)v18;
    v18 += 56;
    v20 |= v21 == v17;
  }
  while (v18 != v19);
  *v17 = 0;
  if ((v20 & 1) != 0)
    webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(a1 + 88), (const void *)(a1 + 112));
  v22 = v29;
  if (v29)
  {
LABEL_18:
    v23 = (unsigned int *)(v22 + 24);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      v26 = *(_QWORD *)(v22 + 16);
      *(_QWORD *)(v22 + 16) = 0;
      if (v26)
        MEMORY[0x20BD0ADD4](v26, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v22, 0x1010C40EE34DA14);
    }
  }
}

uint64_t webrtc::RtpTransport::IsSrtpActive(webrtc::RtpTransport *this)
{
  return 0;
}

uint64_t rtc::FunctionView<void ()(webrtc::UntypedFunction &)>::CallVoidPtr<void webrtc::CallbackList<BOOL>::Send<BOOL &>(BOOL &)::{lambda(webrtc::UntypedFunction &)#1}>(unsigned __int8 **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 32))(a2, **a1);
}

uint64_t sigslot::_opaque_connection::emitter<webrtc::RtpTransport,rtc::PacketTransportInternal *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

double absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransport::SetRtpPacketTransport(rtc::PacketTransportInternal *)::$_0 &,rtc::PacketTransportInternal *,rtc::ReceivedPacket const&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_BYTE **)a3;
  v3 = *(_QWORD *)(a3 + 8);
  if (!v3)
    v4 = 0;
  if (v3 >= 4 && (*v4 & 0xC0) == 0x80)
  {
    v5 = *a1;
    if ((v4[1] & 0x60) == 0x40)
    {
      if (v3 < 0x801)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(v5, a3);
        return result;
      }
    }
    else
    {
      if (v3 < 0xC)
        return result;
      if (v3 < 0x801)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, a3);
        return result;
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transport.cc");
  }
  return result;
}

uint64_t sigslot::_opaque_connection::emitter<webrtc::RtpTransport,std::optional<rtc::NetworkRoute>>(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD *, _OWORD *);
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v2 = (uint64_t (*)(_QWORD *, _OWORD *))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _OWORD *))(*v4 + v2);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v8 = *(_QWORD *)(a2 + 32);
  return v2(v4, v7);
}

uint64_t sigslot::_opaque_connection::emitter<webrtc::RtpTransport,rtc::PacketTransportInternal *,rtc::SentPacket const&>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

double absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransport::SetRtcpPacketTransport(rtc::PacketTransportInternal *)::$_0 &,rtc::PacketTransportInternal *,rtc::ReceivedPacket const&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_BYTE **)a3;
  v3 = *(_QWORD *)(a3 + 8);
  if (!v3)
    v4 = 0;
  if (v3 >= 4 && (*v4 & 0xC0) == 0x80)
  {
    v5 = *a1;
    if ((v4[1] & 0x60) == 0x40)
    {
      if (v3 < 0x801)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(v5, a3);
        return result;
      }
    }
    else
    {
      if (v3 < 0xC)
        return result;
      if (v3 < 0x801)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, a3);
        return result;
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transport.cc");
  }
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::RtpTransport::OnSentPacket(rtc::PacketTransportInternal *,rtc::SentPacket const&)::$_0 &&>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  webrtc::callback_list_impl::CallbackListReceivers *v14;
  _BYTE *v15;
  char v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;

  v9 = (uint64_t)(*a1 + 1);
  v8 = **a1;
  v10 = (_BYTE *)(v8 + 240);
  if (*(_BYTE *)(v8 + 240))
  {
    v16 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v19);
    absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::RtpTransport::OnSentPacket(rtc::PacketTransportInternal *,rtc::SentPacket const&)::$_0>(v16, v17, v18);
  }
  else
  {
    *(_BYTE *)(v8 + 240) = 1;
    v11 = *(_QWORD *)(v8 + 216);
    v12 = *(_QWORD *)(v8 + 224);
    if (v11 == v12)
    {
      *v10 = 0;
    }
    else
    {
      v13 = 0;
      v14 = (webrtc::callback_list_impl::CallbackListReceivers *)(v8 + 216);
      do
      {
        (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v11 + 8, v9);
        v15 = *(_BYTE **)v11;
        v11 += 56;
        v13 |= v15 == v10;
      }
      while (v11 != v12);
      *v10 = 0;
      if ((v13 & 1) != 0)
        webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers(v14, v10);
    }
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::RtpTransport::OnSentPacket(rtc::PacketTransportInternal *,rtc::SentPacket const&)::$_0>(char a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a2;
  if ((a1 & 1) != 0)
  {
    if (result)
      JUMPOUT(0x20BD0ADECLL);
  }
  else
  {
    *a3 = result;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransport::MaybeSignalReadyToSend(void)::$_0 &&>(webrtc::RtpTransport **a1)
{
  return webrtc::RtpTransport::MaybeSignalReadyToSend(*a1);
}

uint64_t webrtc::RtpTransportControllerSend::RtpTransportControllerSend(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  pthread_mutexattr_t *sig;
  unint64_t v28;
  BOOL v29;
  int v30;
  int v31;
  pthread_mutexattr_t *p_p;
  unint64_t v34;
  BOOL v35;
  int v36;
  int v37;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  Timestamp v52;
  uint64_t v53;
  __int128 v55;
  uint64_t (*v56)(_QWORD, _QWORD, _QWORD);
  uint64_t v57;
  uint64_t v58;
  pthread_mutexattr_t __p;
  _QWORD v60[6];

  v60[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0BE770;
  *(_QWORD *)(a1 + 8) = &unk_24C0BE890;
  *(_QWORD *)(a1 + 16) = &unk_24C0BE8D8;
  v4 = *a2;
  *(_QWORD *)(a1 + 24) = *a2;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a2 + 1);
  v8 = *(_OWORD *)(a2 + 3);
  *(_QWORD *)(a1 + 80) = &off_24C0B87C0;
  v9 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 72) = *v10;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_QWORD *)(a1 + 136) = a1 + 136;
  *(_QWORD *)(a1 + 144) = a1 + 136;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 248) = 1;
  *(_QWORD *)(a1 + 272) = absl::internal_any_invocable::EmptyManager;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  v11 = a2[5];
  *(_DWORD *)(a1 + 368) = *((_DWORD *)a2 + 12);
  *(_QWORD *)(a1 + 360) = v11;
  *(_BYTE *)(a1 + 372) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 380) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 388) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  v12 = a2[5];
  *(_DWORD *)(a1 + 404) = *((_DWORD *)a2 + 12);
  *(_QWORD *)(a1 + 396) = v12;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 408) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 416) = a1 + 424;
  *(_WORD *)(a1 + 440) = 0;
  v14 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 448) = &off_24C0C2080;
  *(_QWORD *)(a1 + 456) = &unk_24C0C2118;
  *(_QWORD *)(a1 + 464) = v13;
  *(_QWORD *)(a1 + 472) = 5000;
  *(_DWORD *)(a1 + 480) = 3;
  LOBYTE(__p.__sig) = 1;
  *(_QWORD *)__p.__opaque = 2000000;
  LOWORD(v60[0]) = 0;
  *(int64x2_t *)&v60[1] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_OWORD *)&v60[3] = xmmword_208F1ABD0;
  webrtc::PacingController::PacingController((_QWORD *)(a1 + 488), v13, a1 + 80, v14, (char *)&__p);
  *(_QWORD *)(a1 + 1400) = 0x8000000000000000;
  *(_WORD *)(a1 + 1408) = 0;
  *(_DWORD *)(a1 + 1412) = 1064514355;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 1416) = _D0;
  *(_BYTE *)(a1 + 1424) = 0;
  *(_QWORD *)(a1 + 1432) = 0x8000000000000000;
  *(_BYTE *)(a1 + 1464) = 0;
  *(_QWORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 1440) = 0;
  *(_BYTE *)(a1 + 1456) = 0;
  *(_BYTE *)(a1 + 1472) = 0;
  v19 = operator new();
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  *(_QWORD *)(a1 + 1480) = v19;
  do
    v20 = __ldxr((unsigned int *)v19);
  while (__stxr(v20 + 1, (unsigned int *)v19));
  *(_QWORD *)(a1 + 1488) = *v10;
  *(_QWORD *)(a1 + 1496) = 0;
  *(_QWORD *)(a1 + 1504) = &unk_24C0C2938;
  *(_QWORD *)(a1 + 1512) = 0;
  *(_BYTE *)(a1 + 1520) = 0;
  *(_BYTE *)(a1 + 1522) = 0;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_QWORD *)(a1 + 1528) = a1 + 1536;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(int64x2_t *)(a1 + 1584) = vdupq_n_s64(0x8000000000000000);
  *(_QWORD *)(a1 + 1600) = 0;
  *(_BYTE *)(a1 + 1608) = 0;
  *(_BYTE *)(a1 + 1610) = 0;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_QWORD *)(a1 + 1648) = a1 + 1656;
  *(_QWORD *)(a1 + 1692) = 0;
  *(_QWORD *)(a1 + 1716) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_QWORD *)(a1 + 1616) = a1 + 1624;
  *(_QWORD *)(a1 + 1640) = -1;
  *(_QWORD *)(a1 + 1672) = 0x8000000000000000;
  *(_QWORD *)(a1 + 1680) = 0x8000000000000000;
  *(_BYTE *)(a1 + 1688) = 0;
  *(_BYTE *)(a1 + 1700) = 0;
  *(_QWORD *)(a1 + 1704) = 0;
  *(_BYTE *)(a1 + 1712) = 0;
  *(_QWORD *)(a1 + 1728) = a2[8];
  v21 = a2[7];
  v22 = operator new();
  *(_QWORD *)v22 = &off_24C0B4918;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = v21;
  *(_BYTE *)(v22 + 24) = 0;
  *(_QWORD *)(a1 + 1736) = v22;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_QWORD *)(a1 + 1760) = webrtc::GoogCcNetworkControllerFactory::GetProcessInterval((webrtc::GoogCcNetworkControllerFactory *)v22);
  *(_QWORD *)(a1 + 1784) = 0;
  *(_QWORD *)(a1 + 1776) = 0;
  *(_QWORD *)(a1 + 1768) = a1 + 1776;
  v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  if ((v23 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v23 % 0x3E8uLL <= 0x1F4)
      v25 = 0;
    else
      v25 = -1;
    v24 = v25 - -(uint64_t)v23 / 0x3E8uLL;
  }
  else
  {
    v24 = v23 / 0x3E8;
    if (v23 % 0x3E8 > 0x1F3)
      ++v24;
  }
  *(_QWORD *)(a1 + 1792) = 1000 * v24;
  *(_QWORD *)(a1 + 1800) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 1808) = 0;
  *(_BYTE *)(a1 + 1816) = 0;
  *(_BYTE *)(a1 + 1824) = 0;
  *(_BYTE *)(a1 + 1832) = 0;
  *(_BYTE *)(a1 + 1840) = 0;
  *(_BYTE *)(a1 + 1848) = 0;
  *(_QWORD *)(a1 + 1856) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 1872) = 0;
  *(_BYTE *)(a1 + 1880) = 0;
  *(_BYTE *)(a1 + 1888) = 0;
  *(_BYTE *)(a1 + 1896) = 0;
  *(_BYTE *)(a1 + 1904) = 0;
  *(_BYTE *)(a1 + 1912) = 0;
  *(_BYTE *)(a1 + 1920) = 0;
  *(_BYTE *)(a1 + 1928) = 0;
  *(_DWORD *)(a1 + 1864) = 0;
  v26 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 1936) = v26;
  *(_QWORD *)(a1 + 1944) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 1952) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 1968) = 0;
  *(_BYTE *)(a1 + 1976) = 0;
  *(_BYTE *)(a1 + 1984) = 0;
  *(_BYTE *)(a1 + 1992) = 0;
  *(_BYTE *)(a1 + 2000) = 0;
  *(_BYTE *)(a1 + 2008) = 0;
  *(_BYTE *)(a1 + 2016) = 0;
  *(_BYTE *)(a1 + 2024) = 0;
  *(_DWORD *)(a1 + 1960) = 0;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v26 + 16))(&__p, v26, "WebRTC-Bwe-NoFeedbackReset", 26);
  if (SHIBYTE(v60[0]) < 0)
  {
    v28 = *(_QWORD *)__p.__opaque;
    if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0)
      goto LABEL_74;
    sig = (pthread_mutexattr_t *)__p.__sig;
    if (*(_QWORD *)__p.__opaque)
    {
      if (!__p.__sig)
        goto LABEL_74;
    }
  }
  else
  {
    sig = &__p;
    v28 = HIBYTE(v60[0]);
  }
  if (v28 < 7)
  {
    v29 = 1;
    if ((v60[0] & 0x8000000000000000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
  v30 = sig->__sig;
  v31 = *(_DWORD *)((char *)&sig->__sig + 3);
  v29 = v30 != 1650552389 || v31 != 1684368482;
  if ((v60[0] & 0x8000000000000000) != 0)
LABEL_29:
    operator delete((void *)__p.__sig);
LABEL_30:
  *(_BYTE *)(a1 + 2032) = v29;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 32)
                                                                                           + 16))(&__p, *(_QWORD *)(a1 + 32), "WebRTC-AddPacingToCongestionWindowPushback", 42);
  if (SHIBYTE(v60[0]) < 0)
  {
    v34 = *(_QWORD *)__p.__opaque;
    if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0)
      goto LABEL_74;
    p_p = (pthread_mutexattr_t *)__p.__sig;
    if (*(_QWORD *)__p.__opaque)
    {
      if (!__p.__sig)
        goto LABEL_74;
    }
  }
  else
  {
    p_p = &__p;
    v34 = HIBYTE(v60[0]);
  }
  if (v34 >= 7)
  {
    v36 = p_p->__sig;
    v37 = *(_DWORD *)((char *)&p_p->__sig + 3);
    v35 = v36 == 1650552389 && v37 == 1684368482;
    if ((v60[0] & 0x8000000000000000) == 0)
      goto LABEL_46;
  }
  else
  {
    v35 = 0;
    if ((v60[0] & 0x8000000000000000) == 0)
      goto LABEL_46;
  }
  operator delete((void *)__p.__sig);
LABEL_46:
  *(_BYTE *)(a1 + 2033) = v35;
  *(_QWORD *)(a1 + 2040) = off_24C0B4170;
  *(_QWORD *)(a1 + 2048) = 0;
  *(_QWORD *)(a1 + 2064) = 0;
  *(_QWORD *)(a1 + 2056) = 0;
  *(_BYTE *)(a1 + 2095) = 9;
  if (a1 + 2072 <= (unint64_t)"relay_cap" && a1 + 2081 > (unint64_t)"relay_cap")
    goto LABEL_74;
  strcpy((char *)(a1 + 2072), "relay_cap");
  *(_BYTE *)(a1 + 2096) = 0;
  *(_QWORD *)(a1 + 2040) = &unk_24C0B0208;
  *(_QWORD *)(a1 + 2104) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 2112) = 0;
  *(_BYTE *)(a1 + 2120) = 0;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_QWORD *)(a1 + 2144) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 2152) = 0;
  *(_QWORD *)(a1 + 2160) = *(_QWORD *)(a1 + 40);
  pthread_mutexattr_init(&__p);
  pthread_mutexattr_setpolicy_np(&__p, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2168), &__p);
  pthread_mutexattr_destroy(&__p);
  *(_QWORD *)(a1 + 2280) = 0;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_QWORD *)(a1 + 2288) = -1;
  *(_BYTE *)(a1 + 2296) = 0;
  *(_QWORD *)(a1 + 2300) = 0x45FA000000000000;
  *(_QWORD *)(a1 + 2312) = 500;
  *(int64x2_t *)(a1 + 2320) = vdupq_n_s64(0x1F4uLL);
  *(_DWORD *)(a1 + 2336) = -1;
  v39 = operator new();
  *(_DWORD *)v39 = 0;
  *(_BYTE *)(v39 + 4) = 1;
  *(_QWORD *)(a1 + 2344) = v39;
  do
    v40 = __ldxr((unsigned int *)v39);
  while (__stxr(v40 + 1, (unsigned int *)v39));
  v58 = a1 + 2040;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(*(_QWORD *)*v9 + 16))(&__p, *v9, "WebRTC-Bwe-NetworkRouteConstraints", 34);
  if ((SHIBYTE(v60[0]) & 0x80000000) == 0)
  {
    v41 = HIBYTE(v60[0]);
    v42 = (char *)&__p;
    goto LABEL_55;
  }
  v41 = *(_QWORD *)__p.__opaque;
  if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0
    || (v42 = (char *)__p.__sig, *(_QWORD *)__p.__opaque) && !__p.__sig)
  {
LABEL_74:
    __break(1u);
  }
LABEL_55:
  webrtc::ParseFieldTrial(&v58, 1, v42, v41);
  if (SHIBYTE(v60[0]) < 0)
    operator delete((void *)__p.__sig);
  v44 = *((_DWORD *)a2 + 11);
  v43 = *((unsigned int *)a2 + 12);
  v45 = *((_DWORD *)a2 + 10);
  v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  v47 = v46 / 0x3E8uLL;
  if (v46 % 0x3E8uLL > 0x1F3)
    ++v47;
  if (-v46 % 0x3E8uLL <= 0x1F4)
    v48 = 0;
  else
    v48 = -1;
  if (v46 < 0)
    v47 = v48 - -v46 / 0x3E8uLL;
  v49 = 1000 * v47;
  v50 = 0x7FFFFFFFFFFFFFFFLL;
  if ((int)v43 > 0)
    v50 = v43;
  *(_QWORD *)(a1 + 1800) = v49;
  *(_QWORD *)(a1 + 1808) = v45 & ~(v45 >> 31);
  *(_BYTE *)(a1 + 1816) = 1;
  *(_QWORD *)(a1 + 1824) = v50;
  *(_BYTE *)(a1 + 1832) = 1;
  if (v44 <= 0)
    v51 = 0;
  else
    v51 = v44 & 0xFFFFFF00;
  *(_QWORD *)(a1 + 1840) = v51 & 0xFFFFFF00 | (v44 & ~(v44 >> 31));
  *(_BYTE *)(a1 + 1848) = v44 > 0;
  webrtc::PacingController::SetPacingRates((webrtc::PacingController *)(a1 + 488), *((int *)a2 + 11), 0);
  if (!*(_BYTE *)(a1 + 1472))
  {
    v52.var0 = 0x8000000000000000;
    webrtc::TaskQueuePacedSender::MaybeProcessPackets(a1 + 448, v52);
  }
  if (*((_BYTE *)a2 + 80))
    *(_QWORD *)(a1 + 536) = a2[9];
  *(_QWORD *)&v55 = a1;
  v53 = operator new();
  *(_OWORD *)v53 = v55;
  *(_QWORD *)(v53 + 16) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v53 + 24) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransportControllerSend::RtpTransportControllerSend(webrtc::RtpTransportConfig const&)::$_0 &,webrtc::RtpPacketToSend const&,webrtc::PacedPacketInfo const&>;
  v56 = absl::internal_any_invocable::EmptyManager;
  v57 = 0;
  __p.__sig = v53;
  v60[0] = absl::internal_any_invocable::RemoteManagerNontrivial<absl::AnyInvocable<void ()(webrtc::RtpPacketToSend const&,webrtc::PacedPacketInfo const&)>>;
  v60[1] = absl::internal_any_invocable::RemoteInvoker<false,void,absl::AnyInvocable<void ()(webrtc::RtpPacketToSend const&,webrtc::PacedPacketInfo const&)> &,webrtc::RtpPacketToSend&,webrtc::PacedPacketInfo const&>;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 272))(1, a1 + 256, a1 + 256);
  *(_QWORD *)(a1 + 272) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 280) = 0;
  absl::internal_any_invocable::RemoteManagerNontrivial<absl::AnyInvocable<void ()(webrtc::RtpPacketToSend const&,webrtc::PacedPacketInfo const&)>>(0, &__p, (_QWORD *)(a1 + 256));
  *(_OWORD *)(a1 + 272) = *(_OWORD *)v60;
  absl::internal_any_invocable::EmptyManager(1, &v55, &v55);
  return a1;
}

void webrtc::RtpTransportControllerSend::~RtpTransportControllerSend(webrtc::RtpTransportControllerSend *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;

  v2 = *((_QWORD *)this + 266);
  if (v2)
  {
    *(_BYTE *)(v2 + 4) = 0;
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 266) = 0;
  }
  v5 = *((_QWORD *)this + 267);
  if (v5)
  {
    *(_BYTE *)(v5 + 4) = 0;
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 267) = 0;
  }
  v8 = *((_QWORD *)this + 293);
  *(_BYTE *)(v8 + 4) = 0;
  do
  {
    v9 = __ldaxr((unsigned int *)v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)v8));
  if (!v10)
    MEMORY[0x20BD0ADEC]();
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 279);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 2168));
  v11 = (unsigned int *)*((_QWORD *)this + 267);
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      MEMORY[0x20BD0ADEC]();
  }
  v14 = (unsigned int *)*((_QWORD *)this + 266);
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      MEMORY[0x20BD0ADEC]();
  }
  *((_QWORD *)this + 255) = off_24C0B4170;
  if (*((char *)this + 2095) < 0)
    operator delete(*((void **)this + 259));
  v17 = (void *)*((_QWORD *)this + 256);
  if (v17)
  {
    *((_QWORD *)this + 257) = v17;
    operator delete(v17);
  }
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 222));
  v18 = *((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v19)
    MEMORY[0x20BD0ADEC](v19, 0x1000C4073EF22EALL);
  v20 = *((_QWORD *)this + 217);
  *((_QWORD *)this + 217) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 207));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 203));
  v21 = *((_QWORD *)this + 194);
  if (v21)
  {
    v22 = *((_QWORD *)this + 195);
    v23 = (void *)*((_QWORD *)this + 194);
    if (v22 != v21)
    {
      v24 = *((_QWORD *)this + 195);
      do
      {
        v26 = *(void **)(v24 - 32);
        v24 -= 32;
        v25 = v26;
        if (v26)
        {
          *(_QWORD *)(v22 - 24) = v25;
          operator delete(v25);
        }
        v22 = v24;
      }
      while (v24 != v21);
      v23 = (void *)*((_QWORD *)this + 194);
    }
    *((_QWORD *)this + 195) = v21;
    operator delete(v23);
  }
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 1528, *((_QWORD **)this + 192));
  *((_QWORD *)this + 56) = &off_24C0C2080;
  *((_QWORD *)this + 57) = &unk_24C0C2118;
  *((_BYTE *)this + 1409) = 1;
  v27 = *((_QWORD *)this + 185);
  *(_BYTE *)(v27 + 4) = 0;
  do
  {
    v28 = __ldaxr((unsigned int *)v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, (unsigned int *)v27));
  if (!v29)
    MEMORY[0x20BD0ADEC]();
  webrtc::PacingController::~PacingController((webrtc::RtpTransportControllerSend *)((char *)this + 488));
  std::__tree<std::__value_type<std::string,webrtc::StatsReport *>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::StatsReport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::StatsReport *>>>::destroy(*((char **)this + 53));
  v30 = (_QWORD *)*((_QWORD *)this + 42);
  if (v30)
  {
    v31 = (_QWORD *)*((_QWORD *)this + 43);
    v32 = (void *)*((_QWORD *)this + 42);
    if (v31 != v30)
    {
      do
      {
        v34 = *--v31;
        v33 = v34;
        *v31 = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      }
      while (v31 != v30);
      v32 = (void *)*((_QWORD *)this + 42);
    }
    *((_QWORD *)this + 43) = v30;
    operator delete(v32);
  }
  webrtc::PacketRouter::~PacketRouter((webrtc::RtpTransportControllerSend *)((char *)this + 80));
  v35 = (unsigned int *)*((_QWORD *)this + 3);
  if (v35)
  {
    v36 = v35 + 2;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
  }
}

{
  webrtc::RtpTransportControllerSend::~RtpTransportControllerSend(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::RtpTransportControllerSend::~RtpTransportControllerSend(webrtc::RtpTransportControllerSend *this)
{
  webrtc::RtpTransportControllerSend::~RtpTransportControllerSend((webrtc::RtpTransportControllerSend *)((char *)this - 8));
}

{
  webrtc::RtpTransportControllerSend::~RtpTransportControllerSend((webrtc::RtpTransportControllerSend *)((char *)this - 16));
}

{
  webrtc::RtpTransportControllerSend::~RtpTransportControllerSend((webrtc::RtpTransportControllerSend *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::RtpTransportControllerSend::~RtpTransportControllerSend((webrtc::RtpTransportControllerSend *)((char *)this - 16));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtpTransportControllerSend::CreateRtpVideoSender(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v55;
  uint64_t v56;

  v13 = a1[4];
  v14 = a1[5];
  v15 = (uint64_t)(a1 + 270);
  v17 = a1[6];
  v16 = a1[7];
  v18 = operator new();
  v19 = *a8;
  *a8 = 0;
  v20 = *a9;
  v21 = *a10;
  *a10 = 0;
  v22 = v18;
  v55 = v21;
  v56 = v19;
  webrtc::RtpVideoSender::RtpVideoSender(v18, v14, a2, a3, a4, a5, a6, a7, (uint64_t)a1, v16, v15, &v56, v20, (uint64_t)(a9 + 1), &v55, v13, v17);
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v24 = (char *)a1[43];
  v23 = a1[44];
  if ((unint64_t)v24 < v23)
  {
    if (v24)
    {
      *(_QWORD *)v24 = v22;
      v25 = v24 + 8;
      goto LABEL_30;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    abort();
  }
  v26 = (char *)a1[42];
  v27 = (v24 - v26) >> 3;
  v28 = v27 + 1;
  if ((unint64_t)(v27 + 1) >> 61)
    goto LABEL_33;
  v29 = v23 - (_QWORD)v26;
  if (v29 >> 2 > v28)
    v28 = v29 >> 2;
  v30 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8;
  v31 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v30)
    v31 = v28;
  if (!v31)
    goto LABEL_32;
  if (v31 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v32 = 8 * v31;
  v33 = (char *)operator new(8 * v31);
  v34 = &v33[v32];
  v35 = (uint64_t *)&v33[8 * v27];
  *v35 = v22;
  v25 = v35 + 1;
  if (v24 == v26)
  {
    a1[42] = v35;
    a1[43] = v25;
    a1[44] = v34;
  }
  else
  {
    v36 = v24 - v26 - 8;
    if (v36 < 0x78
      || &v24[-(v36 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v35
      && &v33[v24 - v26 - (v36 & 0xFFFFFFFFFFFFFFF8) - 8] < v24)
    {
      goto LABEL_37;
    }
    v37 = (v36 >> 3) + 1;
    v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v24[-v38];
    v35 = (uint64_t *)((char *)v35 - v38);
    v40 = &v33[8 * v27 - 16];
    v41 = v24 - 16;
    v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v44 = *((_OWORD *)v41 - 1);
      v43 = *(_OWORD *)v41;
      *((_OWORD *)v41 - 1) = 0uLL;
      *(_OWORD *)v41 = 0uLL;
      *((_OWORD *)v40 - 1) = v44;
      *(_OWORD *)v40 = v43;
      v40 -= 32;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    v24 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_37:
      do
      {
        v45 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *(_QWORD *)v24 = 0;
        *--v35 = v45;
      }
      while (v24 != v26);
    }
    v24 = (char *)a1[42];
    v46 = (char *)a1[43];
    a1[42] = v35;
    a1[43] = v25;
    a1[44] = v34;
    while (v46 != v24)
    {
      v48 = *((_QWORD *)v46 - 1);
      v46 -= 8;
      v47 = v48;
      *(_QWORD *)v46 = 0;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    }
  }
  if (v24)
    operator delete(v24);
LABEL_30:
  a1[43] = v25;
  if ((_QWORD *)a1[42] == v25)
    goto LABEL_32;
  return *(v25 - 1);
}

_QWORD *webrtc::RtpTransportControllerSend::DestroyRtpVideoSender(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = (_QWORD *)result[42];
  v5 = (_QWORD *)result[43];
  if (v4 != v5)
  {
    v3 = result;
    v2 = 0;
    do
    {
      if (v4[v2] == a2)
        goto LABEL_6;
      ++v2;
    }
    while (&v4[v2] != v5);
  }
  do
  {
    __break(1u);
LABEL_6:
    v6 = &v4[v2];
  }
  while (&v4[v2] == v5);
  v7 = v6 + 1;
  if (v6 + 1 != v5)
  {
    do
    {
      result = (_QWORD *)*(v7 - 1);
      *(v7 - 1) = *v7;
      *v7 = 0;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      ++v7;
    }
    while (v7 != v5);
    v5 = (_QWORD *)v3[43];
    v6 = v7 - 1;
  }
  while (v5 != v6)
  {
    v8 = (_QWORD *)*--v5;
    result = v8;
    *v5 = 0;
    if (v8)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v3[43] = v6;
  return result;
}

uint64_t webrtc::RtpTransportControllerSend::RegisterSendingRtpStream(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  webrtc::PacketRouter::AddSendRtpModule((_QWORD *)(a1 + 80), a2, 1);
  if (*(_BYTE *)(a1 + 440))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3 == a1 + 136)
    {
      result = 0;
      *(_BYTE *)(a1 + 880) = 0;
      if (!*(_QWORD *)(a1 + 648))
        return result;
      goto LABEL_8;
    }
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 128))(*(_QWORD *)(v3 + 16));
      if ((_DWORD)result)
        break;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != a1 + 136);
  }
  else
  {
    result = 0;
  }
  *(_BYTE *)(a1 + 880) = result;
  if (!*(_QWORD *)(a1 + 648))
    return result;
LABEL_8:
  if (*(_DWORD *)(a1 + 600) == 1)
  {
    if ((result & 1) != 0)
      goto LABEL_16;
    v5 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * (*(_QWORD *)(a1 + 640) / 0x49uLL))
                    + 56 * (*(_QWORD *)(a1 + 640) % 0x49uLL))
        * *(_QWORD *)(a1 + 728)
        + 4000000)
       / 8000000;
    if (*(_QWORD *)(a1 + 872) < v5)
      v5 = *(_QWORD *)(a1 + 872);
    if (v5 <= 0)
    {
LABEL_16:
      *(_QWORD *)(a1 + 656) = 0x8000000000000000;
      *(_DWORD *)(a1 + 600) = 2;
    }
  }
  return result;
}

uint64_t webrtc::RtpTransportControllerSend::DeRegisterSendingRtpStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD v31[2];
  uint64_t (*v32)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v33)(uint64_t);

  webrtc::PacketRouter::RemoveSendRtpModule((webrtc::PacketRouter *)(a1 + 80), a2, a3, a4, a5, a6, a7, a8);
  v10 = a1 + 448;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2);
  v12 = *(_QWORD *)(a1 + 1488);
  v13 = *(unsigned int **)(a1 + 1480);
  if (v13)
  {
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = operator new();
  *(_QWORD *)v15 = v13;
  *(_QWORD *)(v15 + 8) = v10;
  *(_DWORD *)(v15 + 16) = v11;
  *(_QWORD *)(v15 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v15 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::TaskQueuePacedSender::RemovePacketsForSsrc::$_0 &&>;
  v31[0] = v15;
  v32 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v33 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v12 + 8))(v12, v31, &v30, &v29);
  v32(1, v31, v31);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 240))(a2) & 0xFF00000000) != 0)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 240))(a2);
    if ((result & 0xFF00000000) == 0)
      goto LABEL_28;
    v17 = result;
    v18 = *(_QWORD *)(a1 + 1488);
    v19 = *(unsigned int **)(a1 + 1480);
    if (v19)
    {
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = operator new();
    *(_QWORD *)v21 = v19;
    *(_QWORD *)(v21 + 8) = v10;
    *(_DWORD *)(v21 + 16) = v17;
    *(_QWORD *)(v21 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
    *(_QWORD *)(v21 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::TaskQueuePacedSender::RemovePacketsForSsrc::$_0 &&>;
    v31[0] = v21;
    v32 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v33 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v18 + 8))(v18, v31, &v30, &v29);
    v32(1, v31, v31);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 256))(a2) & 0xFF00000000) == 0)
    goto LABEL_13;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 256))(a2);
  if ((result & 0xFF00000000) == 0)
  {
LABEL_28:
    __break(1u);
    return result;
  }
  v22 = result;
  v23 = *(_QWORD *)(a1 + 1488);
  v24 = *(unsigned int **)(a1 + 1480);
  if (v24)
  {
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = operator new();
  *(_QWORD *)v26 = v24;
  *(_QWORD *)(v26 + 8) = v10;
  *(_DWORD *)(v26 + 16) = v22;
  *(_QWORD *)(v26 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v26 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::TaskQueuePacedSender::RemovePacketsForSsrc::$_0 &&>;
  v31[0] = v26;
  v32 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v33 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v23 + 8))(v23, v31, &v30, &v29);
  v32(1, v31, v31);
LABEL_13:
  if (*(_BYTE *)(a1 + 440))
  {
    v27 = *(_QWORD *)(a1 + 144);
    if (v27 == a1 + 136)
    {
      result = 0;
      *(_BYTE *)(a1 + 880) = 0;
      if (!*(_QWORD *)(a1 + 648))
        return result;
      goto LABEL_20;
    }
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v27 + 16) + 128))(*(_QWORD *)(v27 + 16));
      if ((_DWORD)result)
        break;
      v27 = *(_QWORD *)(v27 + 8);
    }
    while (v27 != a1 + 136);
  }
  else
  {
    result = 0;
  }
  *(_BYTE *)(a1 + 880) = result;
  if (!*(_QWORD *)(a1 + 648))
    return result;
LABEL_20:
  if (*(_DWORD *)(a1 + 600) == 1)
  {
    if ((result & 1) != 0)
      goto LABEL_25;
    v28 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * (*(_QWORD *)(a1 + 640) / 0x49uLL))
                     + 56 * (*(_QWORD *)(a1 + 640) % 0x49uLL))
         * *(_QWORD *)(a1 + 728)
         + 4000000)
        / 8000000;
    if (*(_QWORD *)(a1 + 872) < v28)
      v28 = *(_QWORD *)(a1 + 872);
    if (v28 <= 0)
    {
LABEL_25:
      *(_QWORD *)(a1 + 656) = 0x8000000000000000;
      *(_DWORD *)(a1 + 600) = 2;
    }
  }
  return result;
}

uint64_t webrtc::RtpTransportControllerSend::packet_router(webrtc::RtpTransportControllerSend *this)
{
  return (uint64_t)this + 80;
}

uint64_t webrtc::RtpTransportControllerSend::network_state_estimate_observer(webrtc::RtpTransportControllerSend *this)
{
  return (uint64_t)this + 16;
}

uint64_t webrtc::RtpTransportControllerSend::packet_sender(webrtc::RtpTransportControllerSend *this)
{
  return (uint64_t)this + 456;
}

void webrtc::RtpTransportControllerSend::SetAllocatedSendBitrateLimits(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[3];
  _OWORD v19[2];
  void *v20[7];
  void *__p;
  void *v22;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 1992))
  {
    *(_QWORD *)(a1 + 1984) = v3;
    v4 = a2[2];
    if (*(_BYTE *)(a1 + 2008))
      goto LABEL_3;
LABEL_16:
    *(_BYTE *)(a1 + 2008) = 1;
    *(_QWORD *)(a1 + 2000) = v4;
    v5 = a2[1];
    if (*(_BYTE *)(a1 + 2024))
      goto LABEL_4;
    goto LABEL_17;
  }
  *(_BYTE *)(a1 + 1992) = 1;
  *(_QWORD *)(a1 + 1984) = v3;
  v4 = a2[2];
  if (!*(_BYTE *)(a1 + 2008))
    goto LABEL_16;
LABEL_3:
  *(_QWORD *)(a1 + 2000) = v4;
  v5 = a2[1];
  if (*(_BYTE *)(a1 + 2024))
    goto LABEL_4;
LABEL_17:
  *(_BYTE *)(a1 + 2024) = 1;
LABEL_4:
  *(_QWORD *)(a1 + 2016) = v5;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  v7 = v6 / 0x3E8uLL;
  if (v6 % 0x3E8uLL > 0x1F3)
    ++v7;
  if (-v6 % 0x3E8uLL <= 0x1F4)
    v8 = 0;
  else
    v8 = -1;
  if (v6 < 0)
    v7 = v8 - -v6 / 0x3E8uLL;
  *(_QWORD *)(a1 + 1952) = 1000 * v7;
  v9 = *(_QWORD *)(a1 + 1752);
  if (v9)
  {
    v10 = *(_OWORD *)(a1 + 2000);
    v18[2] = *(_OWORD *)(a1 + 1984);
    v19[0] = v10;
    v11 = *(_OWORD *)(a1 + 1968);
    v18[0] = *(_OWORD *)(a1 + 1952);
    v18[1] = v11;
    *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(a1 + 2009);
    (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v9 + 72))(v20, v9, v18);
    webrtc::RtpTransportControllerSend::PostUpdates(a1, (uint64_t)v20, v12, v13, v14, v15, v16, v17);
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
  }
}

void webrtc::RtpTransportControllerSend::SetPacingFactor(webrtc::RtpTransportControllerSend *this, float a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[3];
  _OWORD v16[2];
  void *v17[7];
  void *__p;
  void *v19;

  if (!*((_BYTE *)this + 1976))
    *((_BYTE *)this + 1976) = 1;
  *((double *)this + 246) = a2;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
  v4 = v3 / 0x3E8uLL;
  if (v3 % 0x3E8uLL > 0x1F3)
    ++v4;
  if (-v3 % 0x3E8uLL <= 0x1F4)
    v5 = 0;
  else
    v5 = -1;
  if (v3 < 0)
    v4 = v5 - -v3 / 0x3E8uLL;
  *((_QWORD *)this + 244) = 1000 * v4;
  v6 = *((_QWORD *)this + 219);
  if (v6)
  {
    v7 = *((_OWORD *)this + 125);
    v15[2] = *((_OWORD *)this + 124);
    v16[0] = v7;
    v8 = *((_OWORD *)this + 123);
    v15[0] = *((_OWORD *)this + 122);
    v15[1] = v8;
    *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)this + 2009);
    (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v6 + 72))(v17, v6, v15);
    webrtc::RtpTransportControllerSend::PostUpdates((uint64_t)this, (uint64_t)v17, v9, v10, v11, v12, v13, v14);
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
  }
}

uint64_t webrtc::RtpTransportControllerSend::SetQueueTimeLimit(webrtc::RtpTransportControllerSend *this, int a2)
{
  Timestamp v2;

  *((_QWORD *)this + 173) = 1000 * a2;
  v2.var0 = 0x8000000000000000;
  return webrtc::TaskQueuePacedSender::MaybeProcessPackets((uint64_t)this + 448, v2);
}

uint64_t webrtc::RtpTransportControllerSend::GetStreamFeedbackProvider(webrtc::RtpTransportControllerSend *this)
{
  return (uint64_t)this + 1504;
}

void webrtc::RtpTransportControllerSend::ReconfigureBandwidthEstimation(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _OWORD v25[3];
  _OWORD v26[2];
  void *v27[7];
  void *__p;
  void *v29;

  v3 = *a2;
  *(_BYTE *)(a1 + 440) = v3;
  *(_WORD *)(a1 + 1962) = v3 | 0x100;
  if (v3)
  {
    v4 = a1 + 136;
    v5 = *(_QWORD *)(a1 + 144);
    if (v5 == a1 + 136)
    {
      LOBYTE(v6) = 0;
      *(_BYTE *)(a1 + 880) = 0;
      if (!*(_QWORD *)(a1 + 648))
        goto LABEL_15;
      goto LABEL_8;
    }
    do
    {
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 128))(*(_QWORD *)(v5 + 16));
      if (v6)
        break;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  *(_BYTE *)(a1 + 880) = v6;
  if (!*(_QWORD *)(a1 + 648))
    goto LABEL_15;
LABEL_8:
  if (*(_DWORD *)(a1 + 600) == 1)
  {
    if ((v6 & 1) != 0)
      goto LABEL_13;
    v7 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * (*(_QWORD *)(a1 + 640) / 0x49uLL))
                    + 56 * (*(_QWORD *)(a1 + 640) % 0x49uLL))
        * *(_QWORD *)(a1 + 728)
        + 4000000)
       / 8000000;
    if (*(_QWORD *)(a1 + 872) < v7)
      v7 = *(_QWORD *)(a1 + 872);
    if (v7 <= 0)
    {
LABEL_13:
      *(_QWORD *)(a1 + 656) = 0x8000000000000000;
      *(_DWORD *)(a1 + 600) = 2;
    }
  }
LABEL_15:
  v8 = *(_QWORD *)(a1 + 1752);
  if (!v8)
    return;
  v9 = *(_QWORD *)(a1 + 1744);
  *(_QWORD *)(a1 + 1744) = 0;
  if (!v9)
  {
    *(_QWORD *)(a1 + 1752) = 0;
LABEL_21:
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    webrtc::RtpTransportControllerSend::MaybeCreateControllers(a1);
    if (!*(_QWORD *)(a1 + 1752))
      return;
    goto LABEL_22;
  }
  MEMORY[0x20BD0ADEC](v9, 0x1000C4073EF22EALL);
  v8 = *(_QWORD *)(a1 + 1752);
  *(_QWORD *)(a1 + 1752) = 0;
  if (v8)
    goto LABEL_21;
  webrtc::RtpTransportControllerSend::MaybeCreateControllers(a1);
  if (!*(_QWORD *)(a1 + 1752))
    return;
LABEL_22:
  v10 = *(_DWORD *)(a1 + 368);
  v23 = *(_QWORD *)(a1 + 360);
  v24 = v10;
  webrtc::RtpTransportControllerSend::UpdateBitrateConstraints(a1, (int *)&v23);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  v12 = v11 / 0x3E8uLL;
  if (v11 % 0x3E8uLL > 0x1F3)
    ++v12;
  if (-v11 % 0x3E8uLL <= 0x1F4)
    v13 = 0;
  else
    v13 = -1;
  if (v11 < 0)
    v12 = v13 - -v11 / 0x3E8uLL;
  *(_QWORD *)(a1 + 1952) = 1000 * v12;
  v14 = *(_QWORD *)(a1 + 1752);
  if (v14)
  {
    v15 = *(_OWORD *)(a1 + 2000);
    v25[2] = *(_OWORD *)(a1 + 1984);
    v26[0] = v15;
    v16 = *(_OWORD *)(a1 + 1968);
    v25[0] = *(_OWORD *)(a1 + 1952);
    v25[1] = v16;
    *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)(a1 + 2009);
    (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v14 + 72))(v27, v14, v25);
    webrtc::RtpTransportControllerSend::PostUpdates(a1, (uint64_t)v27, v17, v18, v19, v20, v21, v22);
    if (__p)
    {
      v29 = __p;
      operator delete(__p);
    }
  }
  webrtc::RtpTransportControllerSend::UpdateNetworkAvailability((webrtc::RtpTransportControllerSend *)a1);
}

uint64_t webrtc::RtpTransportControllerSend::MaybeCreateControllers(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  _OWORD v72[3];
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[3];
  _OWORD v78[3];
  char v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _OWORD v83[3];
  __n128 v84;
  __n128 (*v85)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v86)(uint64_t *);
  void *v87;
  void *v88;
  char v89;
  unsigned int *v90[2];
  __n128 (*v91)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v92)(uint64_t *);
  unsigned int *v93;

  if (!*(_BYTE *)(this + 2120))
    return this;
  v1 = this;
  if (!*(_QWORD *)(this + 1496))
    return this;
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_BYTE *)(v2 + 160) = 1;
  v3 = *(_QWORD *)(v1 + 1744);
  *(_QWORD *)(v1 + 1744) = v2;
  if (v3)
    MEMORY[0x20BD0ADEC](v3, 0x1000C4073EF22EALL);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 16))(*(_QWORD *)(v1 + 40));
  v5 = v4 / 0x3E8uLL;
  if (v4 % 0x3E8uLL > 0x1F3)
    ++v5;
  if (-v4 % 0x3E8uLL <= 0x1F4)
    v6 = 0;
  else
    v6 = -1;
  if (v4 < 0)
    v5 = v6 - -v4 / 0x3E8uLL;
  *(_QWORD *)(v1 + 1800) = 1000 * v5;
  v7 = (_OWORD *)(v1 + 1800);
  v8 = (__int128 *)(v1 + 1856);
  *(_OWORD *)(v1 + 1872) = *(_OWORD *)(v1 + 1968);
  *(_OWORD *)(v1 + 1888) = *(_OWORD *)(v1 + 1984);
  *(_OWORD *)(v1 + 1904) = *(_OWORD *)(v1 + 2000);
  *(_OWORD *)(v1 + 1920) = *(_OWORD *)(v1 + 2016);
  *(_OWORD *)(v1 + 1856) = *(_OWORD *)(v1 + 1952);
  v9 = *(_QWORD *)(v1 + 1728);
  v10 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
  if (v9)
  {
    if ((v10 & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_transport_controller_send.cc");
    v18 = *(_OWORD *)(v1 + 1816);
    v78[0] = *v7;
    v78[1] = v18;
    v78[2] = *(_OWORD *)(v1 + 1832);
    v19 = *v8;
    v81 = *(_OWORD *)(v1 + 1872);
    v20 = *(_OWORD *)(v1 + 1904);
    v82 = *(_OWORD *)(v1 + 1888);
    v83[0] = v20;
    *(_OWORD *)((char *)v83 + 9) = *(_OWORD *)(v1 + 1913);
    v21 = (_QWORD *)(v1 + 1728);
    v22 = *(_QWORD *)(v1 + 1728);
    v79 = *(_BYTE *)(v1 + 1848);
    v80 = v19;
    v83[2] = *(_OWORD *)(v1 + 1936);
    (*(void (**)(__n128 *__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v22 + 16))(&v84, v22, v78);
    v23 = v84.n128_u64[0];
    v84.n128_u64[0] = 0;
    v24 = *(_QWORD *)(v1 + 1752);
    *(_QWORD *)(v1 + 1752) = v23;
    if (!v24)
      goto LABEL_22;
  }
  else
  {
    if ((v10 & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_transport_controller_send.cc");
    v25 = *(_OWORD *)(v1 + 1816);
    v72[0] = *v7;
    v72[1] = v25;
    v72[2] = *(_OWORD *)(v1 + 1832);
    v26 = *v8;
    v75 = *(_OWORD *)(v1 + 1872);
    v27 = *(_OWORD *)(v1 + 1904);
    v76 = *(_OWORD *)(v1 + 1888);
    v77[0] = v27;
    *(_OWORD *)((char *)v77 + 9) = *(_OWORD *)(v1 + 1913);
    v21 = (_QWORD *)(v1 + 1736);
    v28 = *(_QWORD *)(v1 + 1736);
    v73 = *(_BYTE *)(v1 + 1848);
    v74 = v26;
    v77[2] = *(_OWORD *)(v1 + 1936);
    (*(void (**)(__n128 *__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v28 + 16))(&v84, v28, v72);
    v29 = v84.n128_u64[0];
    v84.n128_u64[0] = 0;
    v24 = *(_QWORD *)(v1 + 1752);
    *(_QWORD *)(v1 + 1752) = v29;
    if (!v24)
      goto LABEL_22;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v30 = v84.n128_u64[0];
  v84.n128_u64[0] = 0;
  if (v30)
    (*(void (**)(unint64_t))(*(_QWORD *)v30 + 8))(v30);
LABEL_22:
  *(_QWORD *)(v1 + 1760) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v21 + 24))(*v21);
  v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 16))(*(_QWORD *)(v1 + 40));
  v32 = v31 / 0x3E8uLL;
  if (v31 % 0x3E8uLL > 0x1F3)
    ++v32;
  if (-v31 % 0x3E8uLL <= 0x1F4)
    v33 = 0;
  else
    v33 = -1;
  if (v31 < 0)
    v32 = v33 - -v31 / 0x3E8uLL;
  v34 = *(_BYTE *)(v1 + 2033);
  if (v34)
  {
    v35 = *(unsigned int **)(v1 + 1440);
    v34 = 1;
  }
  else
  {
    v35 = 0;
  }
  v36 = *(_QWORD *)(v1 + 1752);
  v90[0] = (unsigned int *)(1000 * v32);
  v90[1] = v35;
  LOBYTE(v91) = v34;
  (*(void (**)(__n128 *__return_ptr, uint64_t, unsigned int **))(*(_QWORD *)v36 + 32))(&v84, v36, v90);
  webrtc::RtpTransportControllerSend::PostUpdates(v1, (uint64_t)&v84, v37, v38, v39, v40, v41, v42);
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (!*(_QWORD *)(v1 + 2128))
  {
    v43 = *(_QWORD *)(v1 + 72);
    v85 = absl::internal_any_invocable::LocalManagerTrivial;
    v86 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::RtpTransportControllerSend::StartProcessPeriodicTasks(void)::$_1 &>;
    v84.n128_u64[0] = v1;
    if ((v44 & 1) == 0)
    {
      v69 = v43;
      v43 = v69;
      if (v70)
      {
        v71 = (_QWORD *)operator new();
        *v71 = &unk_24C0B13E8;
        webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v71;
        v43 = v69;
      }
    }
    webrtc::RepeatingTaskHandle::DelayedStart(v43, 25000, (uint64_t)&v84, 0, webrtc::Clock::GetRealTimeClock(void)::clock, (uint64_t)&v93, v90);
    v45 = v90[0];
    v90[0] = 0;
    v46 = *(unsigned int **)(v1 + 2128);
    *(_QWORD *)(v1 + 2128) = v45;
    if (v46)
    {
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
        MEMORY[0x20BD0ADEC]();
      v49 = v90[0];
      if (v90[0])
      {
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
          MEMORY[0x20BD0ADEC]();
      }
    }
    v85(1, &v84, &v84);
  }
  this = *(_QWORD *)(v1 + 2136);
  if (this)
  {
    *(_BYTE *)(this + 4) = 0;
    do
    {
      v52 = __ldaxr((unsigned int *)this);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, (unsigned int *)this));
    if (!v53)
      this = MEMORY[0x20BD0ADEC]();
    *(_QWORD *)(v1 + 2136) = 0;
  }
  v54 = *(_QWORD *)(v1 + 1760);
  if ((unint64_t)(v54 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v55 = *(_QWORD *)(v1 + 72);
    v90[0] = (unsigned int *)v1;
    v91 = absl::internal_any_invocable::LocalManagerTrivial;
    v92 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::RtpTransportControllerSend::StartProcessPeriodicTasks(void)::$_2 &>;
    if ((v56 & 1) == 0)
    {
      v64 = v55;
      v65 = v54;
      v54 = v65;
      v67 = v66;
      v55 = v64;
      if (v67)
      {
        v68 = (_QWORD *)operator new();
        *v68 = &unk_24C0B13E8;
        webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v68;
        v55 = v64;
        v54 = v65;
      }
    }
    webrtc::RepeatingTaskHandle::DelayedStart(v55, v54, (uint64_t)v90, 0, webrtc::Clock::GetRealTimeClock(void)::clock, (uint64_t)&v89, &v93);
    v57 = v93;
    v93 = 0;
    v58 = *(unsigned int **)(v1 + 2136);
    *(_QWORD *)(v1 + 2136) = v57;
    if (v58)
    {
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
        MEMORY[0x20BD0ADEC]();
      v61 = v93;
      if (v93)
      {
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
          MEMORY[0x20BD0ADEC]();
      }
    }
    return ((uint64_t (*)(uint64_t, unsigned int **, unsigned int **))v91)(1, v90, v90);
  }
  return this;
}

void webrtc::RtpTransportControllerSend::UpdateBitrateConstraints(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  _QWORD v21[2];
  char v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  void *v27[7];
  void *__p;
  void *v29;

  v3 = a2[1];
  v4 = a2[2];
  v5 = *a2;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  v7 = v6 / 0x3E8uLL;
  if (v6 % 0x3E8uLL > 0x1F3)
    ++v7;
  if (-v6 % 0x3E8uLL <= 0x1F4)
    v8 = 0;
  else
    v8 = -1;
  if (v6 < 0)
    v7 = v8 - -v6 / 0x3E8uLL;
  v9 = 1000 * v7;
  v10 = 0x7FFFFFFFFFFFFFFFLL;
  if ((int)v4 > 0)
    v10 = v4;
  v11 = v3 >> 8;
  v12 = *(_QWORD *)(a1 + 1752);
  if (v12)
  {
    v21[0] = v9;
    v21[1] = v5 & ~(v5 >> 31);
    v22 = 1;
    v23 = v10;
    v24 = 1;
    v25 = (v3 & ~(v3 >> 31)) | (unint64_t)(v11 << 8);
    v26 = v3 > 0;
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v12 + 80))(v27, v12, v21);
    webrtc::RtpTransportControllerSend::PostUpdates(a1, (uint64_t)v27, v13, v14, v15, v16, v17, v18);
    if (__p)
    {
      v29 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (v3 <= 0)
    {
      v19 = *(_QWORD *)(a1 + 1840);
      v20 = *(_BYTE *)(a1 + 1848);
    }
    else
    {
      v19 = (v3 & ~(v3 >> 31)) | (unint64_t)(v11 << 8);
      v20 = 1;
    }
    *(_QWORD *)(a1 + 1800) = v9;
    *(_QWORD *)(a1 + 1808) = v5 & ~(v5 >> 31);
    *(_BYTE *)(a1 + 1816) = 1;
    *(_QWORD *)(a1 + 1824) = v10;
    *(_BYTE *)(a1 + 1832) = 1;
    *(_QWORD *)(a1 + 1840) = v19;
    *(_BYTE *)(a1 + 1848) = v20;
  }
}

void webrtc::RtpTransportControllerSend::UpdateNetworkAvailability(webrtc::RtpTransportControllerSend *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13[7];
  void *__p;
  void *v15;
  _OWORD v16[4];
  uint64_t v17;
  _OWORD v18[3];
  __int128 v19;
  uint64_t v20;
  char v21;

  if (*((_QWORD *)this + 219))
  {
    v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
    v3 = v2 / 0x3E8uLL;
    if (v2 % 0x3E8uLL > 0x1F3)
      ++v3;
    if (-v2 % 0x3E8uLL <= 0x1F4)
      v4 = 0;
    else
      v4 = -1;
    if (v2 < 0)
      v3 = v4 - -v2 / 0x3E8uLL;
    *(_BYTE *)(*((_QWORD *)this + 218) + 160) = *((_BYTE *)this + 2120);
    (*(void (**)(void **__return_ptr, _QWORD, unint64_t))(**((_QWORD **)this + 219) + 16))(v13, *((_QWORD *)this + 219), 1000 * v3);
    webrtc::RtpTransportControllerSend::PostUpdates((uint64_t)this, (uint64_t)v13, v5, v6, v7, v8, v9, v10);
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
    webrtc::CongestionControlHandler::GetUpdate(*((webrtc::CongestionControlHandler **)this + 218), (uint64_t)v18);
    if (v21)
    {
      v11 = v19;
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 2168));
      *((_DWORD *)this + 584) = v11;
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 2168));
      if (v21)
      {
        v12 = *((_QWORD *)this + 187);
        v17 = v20;
        v16[2] = v18[2];
        v16[3] = v19;
        v16[0] = v18[0];
        v16[1] = v18[1];
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v12 + 16))(v12, v16);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t webrtc::RtpTransportControllerSend::RegisterTargetTransferRateObserver(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 1496) = a2;
  if (*(_BYTE *)(result + 1848))
  {
    v2 = result;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(result + 1840));
    return webrtc::RtpTransportControllerSend::MaybeCreateControllers(v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void webrtc::RtpTransportControllerSend::OnNetworkRouteChanged(uint64_t a1, std::string *__src, size_t __len, unsigned __int8 *a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v16;
  unint64_t v17;
  char v18;
  std::string *v19;
  std::string *v20;
  size_t v21;
  size_t v22;
  __int128 v23;
  char *v24;
  size_t v25;
  int v26;
  __int128 v27;
  BOOL v28;
  char v29;
  uint64_t **v30;
  char *v31;
  std::string *v32;
  size_t v33;
  const void **v34;
  size_t v35;
  const void *v36;
  size_t v37;
  size_t v38;
  int v39;
  std::string *v40;
  size_t v41;
  size_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  __int128 v71;
  int v72;
  _BOOL4 v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  Timestamp v114;
  char v115;
  unsigned __int8 *v116;
  uint64_t v117;
  _QWORD v118[3];
  char v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  BOOL v123;
  void *v124[7];
  void *__p;
  void *v126;
  uint64_t v127;
  std::string v128;
  std::string v129;
  __int128 v130;
  __int128 v131;
  int v132;
  _QWORD v133[6];

  v133[2] = __src;
  v133[3] = __len;
  if (!*a4)
    return;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  if (a4[12] | a4[24])
    v8 = *(_QWORD *)(a1 + 2104);
  *(_QWORD *)(a1 + 408) = v8;
  if (!*(_BYTE *)(a1 + 376))
  {
    v9 = v8 + 0x7FFFFFFFFFFFFFFFLL;
    v10 = *(_DWORD *)(a1 + 396);
    if (v10 < 0)
      v10 = 0;
    if (*(_BYTE *)(a1 + 392))
      goto LABEL_8;
LABEL_18:
    v12 = *(_DWORD *)(a1 + 404);
    goto LABEL_19;
  }
  v9 = v8 + 0x7FFFFFFFFFFFFFFFLL;
  v10 = *(_DWORD *)(a1 + 396);
  if (*(_DWORD *)(a1 + 372) > v10)
    v10 = *(_DWORD *)(a1 + 372);
  if (!*(_BYTE *)(a1 + 392))
    goto LABEL_18;
LABEL_8:
  v11 = *(_DWORD *)(a1 + 388);
  v12 = *(_DWORD *)(a1 + 404);
  if (v12 >= v11)
    v13 = *(_DWORD *)(a1 + 388);
  else
    v13 = *(_DWORD *)(a1 + 404);
  if (v12 < 1)
    v13 = *(_DWORD *)(a1 + 388);
  if (v11 > 0)
    v12 = v13;
LABEL_19:
  if (v9 >= 0xFFFFFFFFFFFFFFFELL)
    LODWORD(v8) = -1;
  if (v8 >= v12)
    v14 = v12;
  else
    v14 = v8;
  if ((int)v8 < 1)
    v14 = v12;
  if (v12 >= 1)
    v8 = v14;
  else
    v8 = v8;
  if (v10 > (int)v8 && (_DWORD)v8 != -1)
    v10 = v8;
  if (v10 == *(_DWORD *)(a1 + 360) && (_DWORD)v8 == *(_DWORD *)(a1 + 368))
  {
    v16 = 0;
    v17 = 0xFFFFFFFF00000000;
    v18 = 1;
  }
  else
  {
    v18 = 0;
    *(_DWORD *)(a1 + 360) = v10;
    *(_DWORD *)(a1 + 368) = v8;
    v17 = *(_QWORD *)&v10 | 0xFFFFFFFF00000000;
    v16 = 0x100000000;
  }
  v133[0] = v17;
  v133[1] = v16 | v8;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_176:
    abort();
  if (__len > 0x16)
  {
    v21 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v21 = __len | 7;
    v22 = v21 + 1;
    v19 = (std::string *)operator new(v21 + 1);
    v128.__r_.__value_.__l.__size_ = __len;
    v128.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    v128.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v20 = (std::string *)((char *)v19 + __len);
    if (v19 > __src)
      goto LABEL_46;
  }
  else
  {
    *((_BYTE *)&v128.__r_.__value_.__s + 23) = __len;
    v19 = &v128;
    v20 = (std::string *)((char *)&v128 + __len);
    if (&v128 > __src)
      goto LABEL_46;
  }
  if (v20 > __src)
  {
LABEL_175:
    __break(1u);
    goto LABEL_176;
  }
LABEL_46:
  if (__len)
    memmove(v19, __src, __len);
  v115 = v18;
  v20->__r_.__value_.__s.__data_[0] = 0;
  v129 = v128;
  memset(&v128, 0, sizeof(v128));
  v23 = *((_OWORD *)a4 + 1);
  v130 = *(_OWORD *)a4;
  v131 = v23;
  v116 = a4;
  v117 = a1;
  v132 = *((_DWORD *)a4 + 8);
  v24 = *(char **)(a1 + 424);
  if (!v24)
  {
    v30 = (uint64_t **)(a1 + 424);
    v31 = (char *)(a1 + 424);
LABEL_89:
    v44 = v31;
    v31 = (char *)operator new(0x60uLL);
    *((_OWORD *)v31 + 2) = *(_OWORD *)&v129.__r_.__value_.__l.__data_;
    v46 = v116;
    v45 = v117;
    v47 = *((_OWORD *)v116 + 1);
    *(_OWORD *)(v31 + 56) = *(_OWORD *)v116;
    *((_QWORD *)v31 + 6) = *((_QWORD *)&v129.__r_.__value_.__l + 2);
    memset(&v129, 0, sizeof(v129));
    *(_OWORD *)(v31 + 72) = v47;
    *((_DWORD *)v31 + 22) = *((_DWORD *)v116 + 8);
    *(_QWORD *)v31 = 0;
    *((_QWORD *)v31 + 1) = 0;
    *((_QWORD *)v31 + 2) = v44;
    *v30 = (uint64_t *)v31;
    v48 = **(_QWORD **)(v117 + 416);
    v49 = (uint64_t *)v31;
    if (v48)
    {
      *(_QWORD *)(v117 + 416) = v48;
      v49 = *v30;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v117 + 424), v49);
    ++*(_QWORD *)(v117 + 432);
    v50 = 1;
    if ((*((_BYTE *)&v129.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_92;
LABEL_96:
    operator delete(v129.__r_.__value_.__l.__data_);
    if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_97;
LABEL_93:
    if ((v50 & 1) != 0)
      goto LABEL_109;
LABEL_98:
    if (v31[56] != *v46
      || *((_DWORD *)v31 + 15) != *((_DWORD *)v46 + 1)
      || *((unsigned __int16 *)v31 + 32) != *((unsigned __int16 *)v46 + 4)
      || *((unsigned __int16 *)v31 + 33) != *((unsigned __int16 *)v46 + 5)
      || v31[68] != v46[12]
      || *((_DWORD *)v31 + 18) != *((_DWORD *)v46 + 4)
      || *((unsigned __int16 *)v31 + 38) != *((unsigned __int16 *)v46 + 10)
      || *((unsigned __int16 *)v31 + 39) != *((unsigned __int16 *)v46 + 11)
      || v31[80] != v46[24]
      || *((_DWORD *)v31 + 22) != *((_DWORD *)v46 + 8)
      || *((_DWORD *)v31 + 21) != *((_DWORD *)v46 + 7))
    {
      goto LABEL_109;
    }
    goto LABEL_119;
  }
  v25 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  v26 = SHIBYTE(v129.__r_.__value_.__r.__words[2]);
  v27 = *(_OWORD *)&v129.__r_.__value_.__l.__data_;
  if (v129.__r_.__value_.__l.__size_)
    v28 = v129.__r_.__value_.__r.__words[0] == 0;
  else
    v28 = 0;
  v29 = !v28;
  while (1)
  {
    while (1)
    {
      v31 = v24;
      if (v26 < 0)
      {
        if ((*((_QWORD *)&v27 + 1) & 0x8000000000000000) != 0)
          goto LABEL_175;
        v33 = *((_QWORD *)&v27 + 1);
        v32 = (std::string *)v27;
        if ((v29 & 1) == 0)
          goto LABEL_175;
      }
      else
      {
        v32 = &v129;
        v33 = v25;
      }
      v34 = (const void **)(v24 + 32);
      v35 = v24[55];
      v36 = v24 + 32;
      v37 = v35;
      if (v24[55] < 0)
      {
        v37 = *((_QWORD *)v24 + 5);
        if ((v37 & 0x8000000000000000) != 0)
          goto LABEL_175;
        v36 = *v34;
        if (v37)
        {
          if (!v36)
            goto LABEL_175;
        }
      }
      v38 = v37 >= v33 ? v33 : v37;
      v39 = memcmp(v32, v36, v38);
      if (v39)
        break;
      if (v33 >= v37)
        goto LABEL_71;
LABEL_55:
      v24 = *(char **)v31;
      v30 = (uint64_t **)v31;
      if (!*(_QWORD *)v31)
        goto LABEL_89;
    }
    if (v39 < 0)
      goto LABEL_55;
LABEL_71:
    if ((v35 & 0x80) != 0)
    {
      v35 = *((_QWORD *)v31 + 5);
      if ((v35 & 0x8000000000000000) != 0)
        goto LABEL_175;
      v34 = (const void **)*v34;
      if (v35)
      {
        if (!v34)
          goto LABEL_175;
      }
    }
    if (v26 < 0)
    {
      if ((*((_QWORD *)&v27 + 1) & 0x8000000000000000) != 0)
        goto LABEL_175;
      v41 = *((_QWORD *)&v27 + 1);
      v40 = (std::string *)v27;
      if ((v29 & 1) == 0)
        goto LABEL_175;
    }
    else
    {
      v40 = &v129;
      v41 = v25;
    }
    if (v41 >= v35)
      v42 = v35;
    else
      v42 = v41;
    v43 = memcmp(v34, v40, v42);
    if (v43)
    {
      if ((v43 & 0x80000000) == 0)
        break;
      goto LABEL_86;
    }
    if (v35 >= v41)
      break;
LABEL_86:
    v24 = (char *)*((_QWORD *)v31 + 1);
    if (!v24)
    {
      v30 = (uint64_t **)(v31 + 8);
      goto LABEL_89;
    }
  }
  v50 = 0;
  v46 = v116;
  v45 = v117;
  if ((v26 & 0x80) != 0)
    goto LABEL_96;
LABEL_92:
  if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_93;
LABEL_97:
  operator delete(v128.__r_.__value_.__l.__data_);
  if ((v50 & 1) == 0)
    goto LABEL_98;
LABEL_109:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0
    && (rtc::NetworkRoute::DebugString(&v129, v46),
        rtc::webrtc_logging_impl::Log("\r\t\v\t\n", v51, v52, v53, v54, v55, v56, v57, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_transport_controller_send.cc"), SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(v129.__r_.__value_.__l.__data_);
    if ((v50 & 1) == 0)
      goto LABEL_116;
LABEL_112:
    if ((v115 & 1) == 0)
      webrtc::RtpTransportControllerSend::UpdateBitrateConstraints(v45, (int *)v133);
    *(_QWORD *)(v45 + 2112) = *((int *)v46 + 8);
  }
  else
  {
    if ((v50 & 1) != 0)
      goto LABEL_112;
LABEL_116:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      rtc::NetworkRoute::DebugString(&v129, (unsigned __int8 *)v31 + 56);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_transport_controller_send.cc");
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
    }
LABEL_119:
    v65 = v31[56];
    v66 = *((unsigned __int16 *)v31 + 33);
    v67 = v31[68];
    v68 = *((unsigned __int16 *)v31 + 39);
    v69 = v31[80];
    v70 = *((_DWORD *)v46 + 8);
    v71 = *((_OWORD *)v46 + 1);
    *(_OWORD *)(v31 + 56) = *(_OWORD *)v46;
    *(_OWORD *)(v31 + 72) = v71;
    *((_DWORD *)v31 + 22) = v70;
    v72 = *v46;
    v74 = v66 != *((unsigned __int16 *)v46 + 5) || v68 != *((unsigned __int16 *)v46 + 11);
    if ((unint64_t)(*(_QWORD *)(v45 + 2104) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      if (v65 == v72 && (v74 | ((v67 | v69) != 0) ^ ((v46[12] | v46[24]) != 0)) != 1)
        return;
LABEL_133:
      v76 = *(_QWORD *)(v45 + 360);
      v77 = *(unsigned int *)(v45 + 368);
      v85 = HIDWORD(v76);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v78, v79, v80, v81, v82, v83, v84, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_transport_controller_send.cc");
      v86 = *(_QWORD *)(v45 + 56);
      v87 = operator new();
      v88 = *v46;
      v89 = *((_DWORD *)v46 + 8);
      if (rtc::g_clock)
      {
        v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v90 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
            / dword_253EA791C;
      }
      *(_QWORD *)v87 = &unk_24C0BBFB8;
      *(_QWORD *)(v87 + 8) = 1000 * (v90 / 1000000);
      *(_BYTE *)(v87 + 16) = v88;
      *(_DWORD *)(v87 + 20) = v89;
      v127 = v87;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v86 + 40))(v86, &v127);
      v91 = v127;
      v127 = 0;
      if (v91)
        (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
      v92 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v45 + 40) + 16))(*(_QWORD *)(v45 + 40));
      v93 = v92 / 0x3E8uLL;
      if (v92 % 0x3E8uLL > 0x1F3)
        ++v93;
      if (-v92 % 0x3E8uLL <= 0x1F4)
        v94 = 0;
      else
        v94 = -1;
      v95 = v94 - -v92 / 0x3E8uLL;
      if (v92 < 0)
        v96 = v95;
      else
        v96 = v93;
      v97 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v45 + 40) + 16))(*(_QWORD *)(v45 + 40));
      v98 = v97 / 0x3E8uLL;
      if (v97 % 0x3E8uLL > 0x1F3)
        ++v98;
      if (-v97 % 0x3E8uLL <= 0x1F4)
        v99 = 0;
      else
        v99 = -1;
      v100 = v99 - -v97 / 0x3E8uLL;
      if (v97 < 0)
        v101 = v100;
      else
        v101 = v98;
      v102 = 0x7FFFFFFFFFFFFFFFLL;
      if ((int)v77 > 0)
        v102 = v77;
      if (SHIDWORD(v76) <= 0)
        v103 = 0;
      else
        v103 = HIDWORD(v76);
      *(_QWORD *)(v45 + 2112) = *((int *)v46 + 8);
      if (*(_BYTE *)(v45 + 2032))
      {
        v104 = *(_OWORD *)v46;
        v105 = *((_OWORD *)v46 + 1);
        *(_DWORD *)(v45 + 1720) = *((_DWORD *)v46 + 8);
        *(_OWORD *)(v45 + 1688) = v104;
        *(_OWORD *)(v45 + 1704) = v105;
      }
      v106 = *(_QWORD *)(v45 + 1752);
      if (v106)
      {
        v118[0] = 1000 * v96;
        v118[1] = 1000 * v101;
        v118[2] = v76 & ~((int)v76 >> 31);
        v119 = 1;
        v120 = v102;
        v121 = 1;
        v122 = v103;
        v123 = SHIDWORD(v76) > 0;
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v106 + 24))(v124, v106, v118);
        webrtc::RtpTransportControllerSend::PostUpdates(v45, (uint64_t)v124, v107, v108, v109, v110, v111, v112);
        if (__p)
        {
          v126 = __p;
          operator delete(__p);
        }
        *(_BYTE *)(v45 + 2152) = 0;
        webrtc::PacingController::SetCongested(v45 + 488, 0);
        if (*(_BYTE *)(v45 + 1472))
          return;
      }
      else
      {
        if (v76 <= 0)
        {
          v85 = *(_QWORD *)(v45 + 1840);
          v113 = *(_BYTE *)(v45 + 1848);
        }
        else
        {
          v113 = 1;
        }
        *(_QWORD *)(v45 + 1800) = 1000 * v101;
        *(_QWORD *)(v45 + 1808) = v76 & ~((int)v76 >> 31);
        *(_BYTE *)(v45 + 1816) = 1;
        *(_QWORD *)(v45 + 1824) = v102;
        *(_BYTE *)(v45 + 1832) = 1;
        *(_QWORD *)(v45 + 1840) = v85;
        *(_BYTE *)(v45 + 1848) = v113;
        *(_BYTE *)(v45 + 2152) = 0;
        webrtc::PacingController::SetCongested(v45 + 488, 0);
        if (*(_BYTE *)(v45 + 1472))
          return;
      }
      v114.var0 = 0x8000000000000000;
      webrtc::TaskQueuePacedSender::MaybeProcessPackets(v45 + 448, v114);
      return;
    }
    v75 = v65 != v72 || v74;
    if ((v75 & 1) != 0)
      goto LABEL_133;
  }
}

void rtc::NetworkRoute::DebugString(std::string *this, unsigned __int8 *a2)
{
  std::string *v5;
  std::string *v6;
  int v7;
  std::string::size_type v8;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  std::string::size_type v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v21;
  std::string *v22;
  std::string *v23;
  std::string::size_type v24;
  int v25;
  std::string::size_type v26;
  unsigned __int8 v27;
  size_t v28;
  BOOL v29;
  char *p_p_new_stuff;
  std::string *v31;
  _BYTE *v32;
  std::string::size_type v33;
  int v34;
  std::string::size_type v35;
  std::string::size_type v36;
  std::string *v37;
  char *v38;
  std::string::size_type v39;
  int v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string *v43;
  _DWORD *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string *v47;
  int v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string *v51;
  char *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string *v55;
  std::string::size_type v56;
  int v57;
  std::string::size_type v58;
  std::string *v59;
  _BYTE *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string *v63;
  std::string::size_type v64;
  int v65;
  std::string::size_type v66;
  unsigned __int8 v67;
  size_t v68;
  BOOL v69;
  char *p_src;
  std::string *v71;
  _BYTE *v72;
  std::string::size_type v73;
  int v74;
  std::string::size_type v75;
  std::string::size_type v76;
  std::string *v77;
  char *v78;
  std::string::size_type v79;
  int v80;
  std::string::size_type v81;
  std::string::size_type v82;
  std::string *v83;
  _DWORD *v84;
  std::string::size_type v85;
  std::string *v86;
  std::string *v87;
  int v88;
  std::string::size_type v89;
  std::string::size_type v90;
  std::string *v91;
  char *v92;
  std::string::size_type v93;
  std::string *v94;
  int v95;
  std::string::size_type v96;
  std::string::size_type v97;
  std::string *v98;
  _WORD *v99;
  std::string::size_type v100;
  std::string::value_type *__src;
  size_t v102;
  unsigned __int8 v103;
  std::string::value_type *__p_new_stuff;
  size_t v105;
  unsigned __int8 v106;
  std::string v107;

  memset(&v107, 0, sizeof(v107));
  if (&v107 <= (std::string *)"[ connected: " && (char *)&v107.__r_.__value_.__r.__words[1] + 5 > "[ connected: ")
    goto LABEL_224;
  strcpy((char *)&v107, "[ connected: ");
  *((_BYTE *)&v107.__r_.__value_.__s + 23) = 13;
  v5 = rtc::StringBuilder::operator<<(&v107, *a2);
  v6 = v5;
  v7 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
  if (v7 >= 0)
    v8 = 22;
  else
    v8 = (v5->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v7 >= 0)
    size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  else
    size = v5->__r_.__value_.__l.__size_;
  if (v8 - size >= 0xA)
  {
    if (v7 >= 0)
      v10 = v5;
    else
      v10 = (std::string *)v5->__r_.__value_.__r.__words[0];
    v11 = (std::string::size_type)v10 + size;
    if ((char *)v10 + size <= " local: [ " && (char *)&v10->__r_.__value_.__r.__words[1] + size + 2 > " local: [ ")
      goto LABEL_224;
    *(_WORD *)(v11 + 8) = 8283;
    *(_QWORD *)v11 = *(_QWORD *)" local: [ ";
    v13 = size + 10;
    if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      v5->__r_.__value_.__l.__size_ = v13;
    else
      *((_BYTE *)&v5->__r_.__value_.__s + 23) = v13 & 0x7F;
    v10->__r_.__value_.__s.__data_[v13] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(v5, v8, size - v8 + 10, size, size, 0, 0xAuLL, " local: [ ");
  }
  v14 = rtc::StringBuilder::operator<<(v6, *((unsigned __int16 *)a2 + 4));
  v15 = v14;
  v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v17 = (char)v16;
  if ((v16 & 0x80u) == 0)
    v18 = 22;
  else
    v18 = (v14->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v16 & 0x80u) != 0)
    v16 = v14->__r_.__value_.__l.__size_;
  if (v18 == v16)
  {
    std::string::__grow_by_and_replace(v14, v18, 1uLL, v18, v18, 0, 1uLL, "/");
  }
  else
  {
    if (v17 >= 0)
      v19 = v14;
    else
      v19 = (std::string *)v14->__r_.__value_.__r.__words[0];
    if ((char *)v19 + v16 <= "/" && (char *)&v19->__r_.__value_.__l.__data_ + v16 + 1 > "/")
      goto LABEL_224;
    v19->__r_.__value_.__s.__data_[v16] = 47;
    v21 = v16 + 1;
    if (SHIBYTE(v14->__r_.__value_.__r.__words[2]) < 0)
      v14->__r_.__value_.__l.__size_ = v21;
    else
      *((_BYTE *)&v14->__r_.__value_.__s + 23) = v21 & 0x7F;
    v19->__r_.__value_.__s.__data_[v21] = 0;
  }
  v22 = rtc::StringBuilder::operator<<(v15, *((unsigned __int16 *)a2 + 5));
  v23 = v22;
  v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v25 = (char)v24;
  if ((v24 & 0x80u) == 0)
    v26 = 22;
  else
    v26 = (v22->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v24 & 0x80u) != 0)
    v24 = v22->__r_.__value_.__l.__size_;
  if (v26 == v24)
  {
    std::string::__grow_by_and_replace(v22, v26, 1uLL, v26, v26, 0, 1uLL, " ");
    rtc::AdapterTypeToString(*((unsigned int *)a2 + 1), (unint64_t)&__p_new_stuff);
    v27 = v106;
    if (((char)v106 & 0x80000000) == 0)
    {
LABEL_49:
      v28 = v27;
      v29 = v27 == 0;
      p_p_new_stuff = (char *)&__p_new_stuff;
      goto LABEL_60;
    }
  }
  else
  {
    if (v25 >= 0)
      v31 = v22;
    else
      v31 = (std::string *)v22->__r_.__value_.__r.__words[0];
    v32 = (char *)v31 + v24;
    if ((char *)v31 + v24 <= " " && v32 + 1 > " ")
      goto LABEL_224;
    *v32 = 32;
    v33 = v24 + 1;
    if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0)
    {
      v22->__r_.__value_.__l.__size_ = v33;
      v31->__r_.__value_.__s.__data_[v33] = 0;
      rtc::AdapterTypeToString(*((unsigned int *)a2 + 1), (unint64_t)&__p_new_stuff);
      v27 = v106;
      if (((char)v106 & 0x80000000) == 0)
        goto LABEL_49;
    }
    else
    {
      *((_BYTE *)&v22->__r_.__value_.__s + 23) = v33 & 0x7F;
      v31->__r_.__value_.__s.__data_[v33] = 0;
      rtc::AdapterTypeToString(*((unsigned int *)a2 + 1), (unint64_t)&__p_new_stuff);
      v27 = v106;
      if (((char)v106 & 0x80000000) == 0)
        goto LABEL_49;
    }
  }
  v28 = v105;
  if ((v105 & 0x8000000000000000) != 0)
    goto LABEL_224;
  p_p_new_stuff = __p_new_stuff;
  v29 = v105 == 0;
  if (v105)
  {
    if (!__p_new_stuff)
      goto LABEL_224;
  }
LABEL_60:
  v34 = SHIBYTE(v23->__r_.__value_.__r.__words[2]);
  if (v34 >= 0)
    v35 = 22;
  else
    v35 = (v23->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v34 >= 0)
    v36 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  else
    v36 = v23->__r_.__value_.__l.__size_;
  if (v35 - v36 >= v28)
  {
    if (!v29)
    {
      if (v34 >= 0)
        v37 = v23;
      else
        v37 = (std::string *)v23->__r_.__value_.__r.__words[0];
      v38 = (char *)v37 + v36;
      if ((char *)v37 + v36 <= p_p_new_stuff && &v38[v28] > p_p_new_stuff)
        goto LABEL_224;
      memmove(v38, p_p_new_stuff, v28);
      v39 = v36 + v28;
      if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
        v23->__r_.__value_.__l.__size_ = v39;
      else
        *((_BYTE *)&v23->__r_.__value_.__s + 23) = v39 & 0x7F;
      v37->__r_.__value_.__s.__data_[v39] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v23, v35, v36 + v28 - v35, v36, v36, 0, v28, p_p_new_stuff);
  }
  v40 = SHIBYTE(v23->__r_.__value_.__r.__words[2]);
  if (v40 >= 0)
    v41 = 22;
  else
    v41 = (v23->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v40 >= 0)
    v42 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  else
    v42 = v23->__r_.__value_.__l.__size_;
  if (v41 - v42 >= 7)
  {
    if (v40 >= 0)
      v43 = v23;
    else
      v43 = (std::string *)v23->__r_.__value_.__r.__words[0];
    v44 = (_DWORD *)((char *)v43 + v42);
    if ((char *)v43 + v42 <= " turn: " && (char *)v44 + 7 > " turn: ")
      goto LABEL_224;
    *(_DWORD *)((char *)v44 + 3) = 540700274;
    *v44 = 1920300064;
    v45 = v42 + 7;
    if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
      v23->__r_.__value_.__l.__size_ = v45;
    else
      *((_BYTE *)&v23->__r_.__value_.__s + 23) = v45 & 0x7F;
    v43->__r_.__value_.__s.__data_[v45] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(v23, v41, v42 - v41 + 7, v42, v42, 0, 7uLL, " turn: ");
  }
  v46 = rtc::StringBuilder::operator<<(v23, a2[12]);
  v47 = v46;
  v48 = SHIBYTE(v46->__r_.__value_.__r.__words[2]);
  if (v48 >= 0)
    v49 = 22;
  else
    v49 = (v46->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v48 >= 0)
    v50 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
  else
    v50 = v46->__r_.__value_.__l.__size_;
  if (v49 - v50 >= 0xD)
  {
    if (v48 >= 0)
      v51 = v46;
    else
      v51 = (std::string *)v46->__r_.__value_.__r.__words[0];
    v52 = (char *)v51 + v50;
    if ((char *)v51 + v50 <= " ] remote: [ " && v52 + 13 > " ] remote: [ ")
      goto LABEL_224;
    qmemcpy(v52, " ] remote: [ ", 13);
    v53 = v50 + 13;
    if (SHIBYTE(v46->__r_.__value_.__r.__words[2]) < 0)
      v46->__r_.__value_.__l.__size_ = v53;
    else
      *((_BYTE *)&v46->__r_.__value_.__s + 23) = v53 & 0x7F;
    v51->__r_.__value_.__s.__data_[v53] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(v46, v49, v50 - v49 + 13, v50, v50, 0, 0xDuLL, " ] remote: [ ");
  }
  v54 = rtc::StringBuilder::operator<<(v47, *((unsigned __int16 *)a2 + 10));
  v55 = v54;
  v56 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
  v57 = (char)v56;
  if ((v56 & 0x80u) == 0)
    v58 = 22;
  else
    v58 = (v54->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v56 & 0x80u) != 0)
    v56 = v54->__r_.__value_.__l.__size_;
  if (v58 == v56)
  {
    std::string::__grow_by_and_replace(v54, v58, 1uLL, v58, v58, 0, 1uLL, "/");
  }
  else
  {
    if (v57 >= 0)
      v59 = v54;
    else
      v59 = (std::string *)v54->__r_.__value_.__r.__words[0];
    v60 = (char *)v59 + v56;
    if ((char *)v59 + v56 <= "/" && v60 + 1 > "/")
      goto LABEL_224;
    *v60 = 47;
    v61 = v56 + 1;
    if (SHIBYTE(v54->__r_.__value_.__r.__words[2]) < 0)
      v54->__r_.__value_.__l.__size_ = v61;
    else
      *((_BYTE *)&v54->__r_.__value_.__s + 23) = v61 & 0x7F;
    v59->__r_.__value_.__s.__data_[v61] = 0;
  }
  v62 = rtc::StringBuilder::operator<<(v55, *((unsigned __int16 *)a2 + 11));
  v63 = v62;
  v64 = HIBYTE(v62->__r_.__value_.__r.__words[2]);
  v65 = (char)v64;
  if ((v64 & 0x80u) == 0)
    v66 = 22;
  else
    v66 = (v62->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v64 & 0x80u) != 0)
    v64 = v62->__r_.__value_.__l.__size_;
  if (v66 == v64)
  {
    std::string::__grow_by_and_replace(v62, v66, 1uLL, v66, v66, 0, 1uLL, " ");
    rtc::AdapterTypeToString(*((unsigned int *)a2 + 4), (unint64_t)&__src);
    v67 = v103;
    if (((char)v103 & 0x80000000) == 0)
    {
LABEL_137:
      v68 = v67;
      v69 = v67 == 0;
      p_src = (char *)&__src;
      goto LABEL_148;
    }
  }
  else
  {
    if (v65 >= 0)
      v71 = v62;
    else
      v71 = (std::string *)v62->__r_.__value_.__r.__words[0];
    v72 = (char *)v71 + v64;
    if ((char *)v71 + v64 <= " " && v72 + 1 > " ")
      goto LABEL_224;
    *v72 = 32;
    v73 = v64 + 1;
    if (SHIBYTE(v62->__r_.__value_.__r.__words[2]) < 0)
    {
      v62->__r_.__value_.__l.__size_ = v73;
      v71->__r_.__value_.__s.__data_[v73] = 0;
      rtc::AdapterTypeToString(*((unsigned int *)a2 + 4), (unint64_t)&__src);
      v67 = v103;
      if (((char)v103 & 0x80000000) == 0)
        goto LABEL_137;
    }
    else
    {
      *((_BYTE *)&v62->__r_.__value_.__s + 23) = v73 & 0x7F;
      v71->__r_.__value_.__s.__data_[v73] = 0;
      rtc::AdapterTypeToString(*((unsigned int *)a2 + 4), (unint64_t)&__src);
      v67 = v103;
      if (((char)v103 & 0x80000000) == 0)
        goto LABEL_137;
    }
  }
  v68 = v102;
  if ((v102 & 0x8000000000000000) != 0)
    goto LABEL_224;
  p_src = __src;
  v69 = v102 == 0;
  if (v102)
  {
    if (!__src)
      goto LABEL_224;
  }
LABEL_148:
  v74 = SHIBYTE(v63->__r_.__value_.__r.__words[2]);
  if (v74 >= 0)
    v75 = 22;
  else
    v75 = (v63->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v74 >= 0)
    v76 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
  else
    v76 = v63->__r_.__value_.__l.__size_;
  if (v75 - v76 >= v68)
  {
    if (!v69)
    {
      if (v74 >= 0)
        v77 = v63;
      else
        v77 = (std::string *)v63->__r_.__value_.__r.__words[0];
      v78 = (char *)v77 + v76;
      if ((char *)v77 + v76 <= p_src && &v78[v68] > p_src)
        goto LABEL_224;
      memmove(v78, p_src, v68);
      v79 = v76 + v68;
      if (SHIBYTE(v63->__r_.__value_.__r.__words[2]) < 0)
        v63->__r_.__value_.__l.__size_ = v79;
      else
        *((_BYTE *)&v63->__r_.__value_.__s + 23) = v79 & 0x7F;
      v77->__r_.__value_.__s.__data_[v79] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v63, v75, v76 + v68 - v75, v76, v76, 0, v68, p_src);
  }
  v80 = SHIBYTE(v63->__r_.__value_.__r.__words[2]);
  if (v80 >= 0)
    v81 = 22;
  else
    v81 = (v63->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v80 >= 0)
    v82 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
  else
    v82 = v63->__r_.__value_.__l.__size_;
  if (v81 - v82 >= 7)
  {
    if (v80 >= 0)
      v83 = v63;
    else
      v83 = (std::string *)v63->__r_.__value_.__r.__words[0];
    v84 = (_DWORD *)((char *)v83 + v82);
    if ((char *)v83 + v82 <= " turn: " && (char *)v84 + 7 > " turn: ")
      goto LABEL_224;
    *(_DWORD *)((char *)v84 + 3) = 540700274;
    *v84 = 1920300064;
    v85 = v82 + 7;
    if (SHIBYTE(v63->__r_.__value_.__r.__words[2]) < 0)
      v63->__r_.__value_.__l.__size_ = v85;
    else
      *((_BYTE *)&v63->__r_.__value_.__s + 23) = v85 & 0x7F;
    v83->__r_.__value_.__s.__data_[v85] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(v63, v81, v82 - v81 + 7, v82, v82, 0, 7uLL, " turn: ");
  }
  v86 = rtc::StringBuilder::operator<<(v63, a2[24]);
  v87 = v86;
  v88 = SHIBYTE(v86->__r_.__value_.__r.__words[2]);
  if (v88 >= 0)
    v89 = 22;
  else
    v89 = (v86->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v88 >= 0)
    v90 = HIBYTE(v86->__r_.__value_.__r.__words[2]);
  else
    v90 = v86->__r_.__value_.__l.__size_;
  if (v89 - v90 >= 0x1A)
  {
    if (v88 >= 0)
      v91 = v86;
    else
      v91 = (std::string *)v86->__r_.__value_.__r.__words[0];
    v92 = (char *)v91 + v90;
    if ((char *)v91 + v90 <= " ] packet_overhead_bytes: " && v92 + 26 > " ] packet_overhead_bytes: ")
      goto LABEL_224;
    qmemcpy(v92, " ] packet_overhead_bytes: ", 26);
    v93 = v90 + 26;
    if (SHIBYTE(v86->__r_.__value_.__r.__words[2]) < 0)
      v86->__r_.__value_.__l.__size_ = v93;
    else
      *((_BYTE *)&v86->__r_.__value_.__s + 23) = v93 & 0x7F;
    v91->__r_.__value_.__s.__data_[v93] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(v86, v89, v90 - v89 + 26, v90, v90, 0, 0x1AuLL, " ] packet_overhead_bytes: ");
  }
  v94 = rtc::StringBuilder::operator<<(v87, *((_DWORD *)a2 + 8));
  v95 = SHIBYTE(v94->__r_.__value_.__r.__words[2]);
  if (v95 >= 0)
    v96 = 22;
  else
    v96 = (v94->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v95 >= 0)
    v97 = HIBYTE(v94->__r_.__value_.__r.__words[2]);
  else
    v97 = v94->__r_.__value_.__l.__size_;
  if (v96 - v97 >= 2)
  {
    if (v95 >= 0)
      v98 = v94;
    else
      v98 = (std::string *)v94->__r_.__value_.__r.__words[0];
    v99 = (_WORD *)((char *)v98 + v97);
    if ((char *)v98 + v97 > " ]" || v99 + 1 <= (_WORD *)" ]")
    {
      *v99 = 23840;
      v100 = v97 + 2;
      if (SHIBYTE(v94->__r_.__value_.__r.__words[2]) < 0)
      {
        v94->__r_.__value_.__l.__size_ = v100;
        v98->__r_.__value_.__s.__data_[v100] = 0;
        if (((char)v103 & 0x80000000) == 0)
          goto LABEL_211;
      }
      else
      {
        *((_BYTE *)&v94->__r_.__value_.__s + 23) = v100 & 0x7F;
        v98->__r_.__value_.__s.__data_[v100] = 0;
        if (((char)v103 & 0x80000000) == 0)
          goto LABEL_211;
      }
      goto LABEL_210;
    }
LABEL_224:
    __break(1u);
    return;
  }
  std::string::__grow_by_and_replace(v94, v96, v97 - v96 + 2, v97, v97, 0, 2uLL, " ]");
  if ((char)v103 < 0)
LABEL_210:
    operator delete(__src);
LABEL_211:
  if ((char)v106 < 0)
    operator delete(__p_new_stuff);
  *this = v107;
}

void webrtc::RtpTransportControllerSend::PostUpdates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  Timestamp v14;
  Timestamp v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  Timestamp v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  std::string *v27;
  BOOL v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[4];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;

  if (*(_BYTE *)(a2 + 8))
  {
    *(_QWORD *)(a1 + 2144) = *(_QWORD *)a2;
    v10 = std::__tree<std::__value_type<rtc::NetworkRoute,webrtc::DataSize>,std::__map_value_compare<rtc::NetworkRoute,std::__value_type<rtc::NetworkRoute,webrtc::DataSize>,webrtc::InFlightBytesTracker::NetworkRouteComparator,true>,std::allocator<std::__value_type<rtc::NetworkRoute,webrtc::DataSize>>>::find<rtc::NetworkRoute>(a1 + 1648, (unsigned __int8 *)(a1 + 1688));
    if (a1 + 1656 == v10)
    {
      v11 = 0;
      v12 = *(_QWORD *)(a1 + 2144);
      v13 = v12 <= 0;
      if (*(unsigned __int8 *)(a1 + 2152) == v13)
        goto LABEL_8;
    }
    else
    {
      v11 = *(_QWORD *)(v10 + 72);
      v12 = *(_QWORD *)(a1 + 2144);
      v13 = v11 >= v12;
      if (*(unsigned __int8 *)(a1 + 2152) == v13)
        goto LABEL_8;
    }
    *(_BYTE *)(a1 + 2152) = v13;
    webrtc::PacingController::SetCongested(a1 + 488, v11 >= v12);
    if (!*(_BYTE *)(a1 + 1472))
    {
      v14.var0 = 0x8000000000000000;
      webrtc::TaskQueuePacedSender::MaybeProcessPackets(a1 + 448, v14);
    }
  }
LABEL_8:
  if (*(_BYTE *)(a2 + 48))
  {
    webrtc::PacingController::SetPacingRates((webrtc::PacingController *)(a1 + 488), 8000000 * *(_QWORD *)(a2 + 24) / *(_QWORD *)(a2 + 32), 8000000 * *(_QWORD *)(a2 + 40) / *(_QWORD *)(a2 + 32));
    if (!*(_BYTE *)(a1 + 1472))
    {
      v15.var0 = 0x8000000000000000;
      webrtc::TaskQueuePacedSender::MaybeProcessPackets(a1 + 448, v15);
    }
  }
  v17 = *(char **)(a2 + 56);
  v16 = *(char **)(a2 + 64);
  if (v17 != v16)
  {
    v18 = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    v19 = (v16 - v17) & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v20 = *(_OWORD *)&v17[v18 + 16];
      v35 = *(_OWORD *)&v17[v18];
      v36 = v20;
      webrtc::BitrateProber::CreateProbeCluster(a1 + 600, (int32x2_t *)&v35);
      v18 += 32;
    }
    while (v19 != v18);
    if (!*(_BYTE *)(a1 + 1472))
    {
      v21.var0 = 0x8000000000000000;
      webrtc::TaskQueuePacedSender::MaybeProcessPackets(a1 + 448, v21);
    }
    if (v17)
      operator delete(v17);
  }
  if (*(_BYTE *)(a2 + 152))
  {
    v22 = *(_QWORD *)(a1 + 1744);
    v23 = *(_QWORD *)(a2 + 80);
    v29 = *(_OWORD *)(a2 + 88);
    v30 = *(_OWORD *)(a2 + 104);
    v31 = *(_OWORD *)(a2 + 120);
    v32 = *(_OWORD *)(a2 + 136);
    if ((unint64_t)(v23 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
    {
      v24 = *(unsigned __int8 *)(v22 + 72);
      *(_QWORD *)v22 = v23;
      *(_OWORD *)(v22 + 8) = v29;
      *(_OWORD *)(v22 + 24) = v30;
      *(_OWORD *)(v22 + 40) = v31;
      *(_OWORD *)(v22 + 56) = v32;
      if (v24)
      {
        webrtc::CongestionControlHandler::GetUpdate(*(webrtc::CongestionControlHandler **)(a1 + 1744), (uint64_t)&v35);
        if (!v40)
          return;
      }
      else
      {
        *(_BYTE *)(v22 + 72) = 1;
        webrtc::CongestionControlHandler::GetUpdate(*(webrtc::CongestionControlHandler **)(a1 + 1744), (uint64_t)&v35);
        if (!v40)
          return;
      }
      v25 = v38;
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 2168));
      *(_DWORD *)(a1 + 2336) = v25;
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2168));
      if (v40)
      {
        v26 = *(_QWORD *)(a1 + 1496);
        v34 = v39;
        v33[2] = v37;
        v33[3] = v38;
        v33[0] = v35;
        v33[1] = v36;
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v26 + 16))(v26, v33);
        return;
      }
      __break(1u);
    }
    v27 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/rtp/control_handler.cc", 27, "new_target_rate.at_time.IsFinite()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v29);
    webrtc::RtpTransportControllerSend::OnNetworkAvailability((webrtc::RtpTransportControllerSend *)v27, v28);
  }
}

void webrtc::RtpTransportControllerSend::OnNetworkAvailability(webrtc::RtpTransportControllerSend *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  webrtc::PacingController *v11;
  Timestamp v12;
  Timestamp v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_transport_controller_send.cc");
  *((_BYTE *)this + 2120) = a2;
  v11 = (webrtc::RtpTransportControllerSend *)((char *)this + 488);
  if ((_DWORD)a2)
  {
    webrtc::PacingController::Resume(v11);
    v12.var0 = 0x8000000000000000;
    webrtc::TaskQueuePacedSender::MaybeProcessPackets((uint64_t)this + 448, v12);
    *((_BYTE *)this + 2152) = 0;
    webrtc::PacingController::SetCongested((uint64_t)this + 488, 0);
    if (*((_BYTE *)this + 1472))
      goto LABEL_8;
  }
  else
  {
    webrtc::PacingController::Pause(v11);
    *((_BYTE *)this + 2152) = 0;
    webrtc::PacingController::SetCongested((uint64_t)this + 488, 0);
    if (*((_BYTE *)this + 1472))
      goto LABEL_8;
  }
  v13.var0 = 0x8000000000000000;
  webrtc::TaskQueuePacedSender::MaybeProcessPackets((uint64_t)this + 448, v13);
LABEL_8:
  if (!*((_QWORD *)this + 219))
    webrtc::RtpTransportControllerSend::MaybeCreateControllers((uint64_t)this);
  webrtc::RtpTransportControllerSend::UpdateNetworkAvailability(this);
  v15 = (uint64_t *)*((_QWORD *)this + 42);
  v14 = (uint64_t *)*((_QWORD *)this + 43);
  while (v15 != v14)
  {
    v16 = *v15++;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v16, a2);
  }
}

uint64_t webrtc::RtpTransportControllerSend::GetRtcpObserver(webrtc::RtpTransportControllerSend *this)
{
  return (uint64_t)this + 8;
}

unint64_t webrtc::RtpTransportControllerSend::GetPacerQueuingDelayMs(webrtc::RtpTransportControllerSend *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *((_QWORD *)this + 179);
  if ((unint64_t)(v1 - 0x7FFFFFFFFFFFFFFFLL) < 2
    || (v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 58) + 16))(*((_QWORD *)this + 58)), v2 < v1))
  {
    v2 = 0;
LABEL_4:
    if (v2 % 0x3E8uLL <= 0x1F3)
      return v2 / 0x3E8uLL;
    else
      return v2 / 0x3E8uLL + 1;
  }
  if (v2 != 0x8000000000000000)
  {
    if (v2 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_4;
    v2 -= v1;
    if (v2 >= 0)
      goto LABEL_4;
  }
  if (-v2 % 0x3E8uLL <= 0x1F4)
    v4 = 0;
  else
    v4 = -1;
  return v4 - -v2 / 0x3E8uLL;
}

uint64_t webrtc::RtpTransportControllerSend::GetFirstPacketTime(webrtc::RtpTransportControllerSend *this)
{
  return *((_QWORD *)this + 182);
}

void webrtc::RtpTransportControllerSend::EnablePeriodicAlrProbing(webrtc::RtpTransportControllerSend *this, __int16 a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[3];
  _OWORD v16[2];
  void *v17[7];
  void *__p;
  void *v19;

  *((_WORD *)this + 980) = a2 | 0x100;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
  v4 = v3 / 0x3E8uLL;
  if (v3 % 0x3E8uLL > 0x1F3)
    ++v4;
  if (-v3 % 0x3E8uLL <= 0x1F4)
    v5 = 0;
  else
    v5 = -1;
  if (v3 < 0)
    v4 = v5 - -v3 / 0x3E8uLL;
  *((_QWORD *)this + 244) = 1000 * v4;
  v6 = *((_QWORD *)this + 219);
  if (v6)
  {
    v7 = *((_OWORD *)this + 125);
    v15[2] = *((_OWORD *)this + 124);
    v16[0] = v7;
    v8 = *((_OWORD *)this + 123);
    v15[0] = *((_OWORD *)this + 122);
    v15[1] = v8;
    *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)this + 2009);
    (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v6 + 72))(v17, v6, v15);
    webrtc::RtpTransportControllerSend::PostUpdates((uint64_t)this, (uint64_t)v17, v9, v10, v11, v12, v13, v14);
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
  }
}

void webrtc::RtpTransportControllerSend::OnSentPacket(webrtc::RtpTransportControllerSend *this, const rtc::SentPacket *a2)
{
  _QWORD *v3;
  const rtc::SentPacket *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v21)(uint64_t);

  v5 = *((_QWORD *)this + 9);
  if (*v3 == v5)
  {
    webrtc::RtpTransportControllerSend::ProcessSentPacket(this, v4);
  }
  else
  {
    v6 = (unsigned int *)*((_QWORD *)this + 293);
    if (v6)
    {
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = *((_OWORD *)v4 + 1);
    v17 = *(_OWORD *)v4;
    v9 = *((_OWORD *)v4 + 2);
    v14 = v8;
    v15 = v9;
    v16 = *((_QWORD *)v4 + 6);
    v10 = operator new();
    *(_QWORD *)v10 = this;
    *(_OWORD *)(v10 + 8) = v17;
    v11 = v15;
    *(_OWORD *)(v10 + 24) = v14;
    *(_OWORD *)(v10 + 40) = v11;
    *(_QWORD *)(v10 + 56) = v16;
    v12 = (_QWORD *)operator new();
    *v12 = v6;
    v12[1] = v10;
    v12[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::RtpTransportControllerSend::OnSentPacket(rtc::SentPacket const&)::$_0>;
    v12[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::RtpTransportControllerSend::OnSentPacket(rtc::SentPacket const&)::$_0 &&>;
    v19[0] = v12;
    v20 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v21 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v5 + 8))(v5, v19, &v18, &v13);
    v20(1, v19, v19);
  }
}

void webrtc::RtpTransportControllerSend::ProcessSentPacket(webrtc::RtpTransportControllerSend *this, const rtc::SentPacket *a2)
{
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  void *v11;
  size_t v12;
  char *v13;
  char *v14;
  int v15;
  void *v16;
  int v17;
  int64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  Timestamp v38;
  unsigned __int8 v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  char *v43;
  _OWORD v44[4];
  uint64_t v45;
  _DWORD v46[2];
  _DWORD v47[2];
  _OWORD v48[4];
  uint64_t v49;
  char v50;
  uint64_t v51;
  unsigned __int8 v52;
  _BYTE v53[7];
  char v54;
  _BYTE v55[31];
  unsigned __int8 v56;
  void *__p;
  char *v58;
  char *v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[23];
  unsigned __int8 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[2];
  _OWORD v70[2];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  webrtc::TransportFeedbackAdapter::ProcessSentPacket((webrtc::RtpTransportControllerSend *)((char *)this + 1576), a2, (uint64_t)v48);
  if (v50)
  {
    v3 = (_QWORD *)std::__tree<std::__value_type<rtc::NetworkRoute,webrtc::DataSize>,std::__map_value_compare<rtc::NetworkRoute,std::__value_type<rtc::NetworkRoute,webrtc::DataSize>,webrtc::InFlightBytesTracker::NetworkRouteComparator,true>,std::allocator<std::__value_type<rtc::NetworkRoute,webrtc::DataSize>>>::find<rtc::NetworkRoute>((uint64_t)this + 1648, (unsigned __int8 *)this + 1688);
    v4 = (char *)this + 1656;
    if ((_QWORD *)((char *)this + 1656) == v3)
      v5 = 0;
    else
      v5 = v3[9];
    v6 = v5 >= *((_QWORD *)this + 268);
    v7 = *((unsigned __int8 *)this + 2152);
    v8 = *((_QWORD *)this + 219);
    v42 = (unsigned __int8 *)this + 1688;
    v43 = (char *)this + 1648;
    if (v8)
    {
      if (!v50)
        __break(1u);
      v44[0] = v48[0];
      v44[1] = v48[1];
      v45 = v49;
      v44[2] = v48[2];
      v44[3] = v48[3];
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v8 + 56))(&v51, v8, v44);
      v47[0] = *(_DWORD *)((char *)&v51 + 1);
      *(_DWORD *)((char *)v47 + 3) = HIDWORD(v51);
      v9 = v52;
      v46[0] = *(_DWORD *)v53;
      *(_DWORD *)((char *)v46 + 3) = *(_DWORD *)&v53[3];
      LOBYTE(v41) = v51;
      BYTE4(v41) = v54;
      v70[0] = *(_OWORD *)v55;
      *(_OWORD *)((char *)v70 + 15) = *(_OWORD *)&v55[15];
      v10 = v56;
      v11 = __p;
      v12 = v58 - (_BYTE *)__p;
      if (v58 == __p)
      {
        v13 = 0;
      }
      else
      {
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_49;
        v13 = (char *)operator new(v58 - (_BYTE *)__p);
        memcpy(v13, v11, v12);
      }
      v14 = &v13[v12];
      v40 = v60;
      v68 = v63;
      v69[0] = *(_OWORD *)v64;
      *(_QWORD *)((char *)v69 + 15) = *(_QWORD *)&v64[15];
      v66 = v61;
      v67 = v62;
      v15 = v65;
      if (v11)
      {
        v58 = (char *)v11;
        v16 = v11;
        v17 = v65;
        operator delete(v16);
        v15 = v17;
      }
    }
    else
    {
      v40 = 0;
      v14 = 0;
      v15 = 0;
      v13 = 0;
      v10 = 0;
      v41 = 0;
      v9 = 0;
    }
    if (v7 == v6 && v9 == 0 && v10 == 0 && v13 == v14 && v15 == 0)
      goto LABEL_43;
    v22 = v14 - v13;
    v39 = v15;
    if (v22)
    {
      if (v22 < 0)
        goto LABEL_49;
      v23 = (char *)operator new(v22);
      v24 = &v23[32 * (v22 >> 5)];
      memcpy(v23, v13, v22);
      v25 = std::__tree<std::__value_type<rtc::NetworkRoute,webrtc::DataSize>,std::__map_value_compare<rtc::NetworkRoute,std::__value_type<rtc::NetworkRoute,webrtc::DataSize>,webrtc::InFlightBytesTracker::NetworkRouteComparator,true>,std::allocator<std::__value_type<rtc::NetworkRoute,webrtc::DataSize>>>::find<rtc::NetworkRoute>((uint64_t)v43, v42);
      if (v4 != (char *)v25)
      {
LABEL_30:
        v32 = *(_QWORD *)(v25 + 72);
        v33 = *((_QWORD *)this + 268);
        v34 = v32 >= v33;
        if (*((unsigned __int8 *)this + 2152) == v34)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v25 = std::__tree<std::__value_type<rtc::NetworkRoute,webrtc::DataSize>,std::__map_value_compare<rtc::NetworkRoute,std::__value_type<rtc::NetworkRoute,webrtc::DataSize>,webrtc::InFlightBytesTracker::NetworkRouteComparator,true>,std::allocator<std::__value_type<rtc::NetworkRoute,webrtc::DataSize>>>::find<rtc::NetworkRoute>((uint64_t)v43, v42);
      if (v4 != (char *)v25)
        goto LABEL_30;
    }
    v32 = 0;
    v33 = *((_QWORD *)this + 268);
    v34 = v33 <= 0;
    if (*((unsigned __int8 *)this + 2152) == v34)
      goto LABEL_35;
LABEL_34:
    *((_BYTE *)this + 2152) = v34;
    webrtc::PacingController::SetCongested((uint64_t)this + 488, v32 >= v33);
    if (!*((_BYTE *)this + 1472))
    {
      v38.var0 = 0x8000000000000000;
      webrtc::TaskQueuePacedSender::MaybeProcessPackets((uint64_t)this + 448, v38);
      if (*((_QWORD *)this + 219))
        goto LABEL_36;
      goto LABEL_41;
    }
LABEL_35:
    if (*((_QWORD *)this + 219))
    {
LABEL_36:
      LOBYTE(v51) = v41;
      *(_DWORD *)((char *)&v51 + 1) = v47[0];
      HIDWORD(v51) = *(_DWORD *)((char *)v47 + 3);
      v52 = v9;
      *(_DWORD *)v53 = v46[0];
      *(_DWORD *)&v53[3] = *(_DWORD *)((char *)v46 + 3);
      v54 = BYTE4(v41);
      *(_OWORD *)v55 = v70[0];
      *(_OWORD *)&v55[15] = *(_OWORD *)((char *)v70 + 15);
      v56 = v10;
      __p = 0;
      v58 = 0;
      v59 = 0;
      v35 = v24 - v23;
      if (v24 == v23)
        goto LABEL_39;
      if ((v35 & 0x8000000000000000) == 0)
      {
        v36 = (char *)operator new(v24 - v23);
        v37 = &v36[32 * (v35 >> 5)];
        __p = v36;
        v59 = v37;
        memcpy(v36, v23, v24 - v23);
        v58 = v37;
LABEL_39:
        v60 = v40;
        v62 = v67;
        v63 = v68;
        *(_OWORD *)v64 = v69[0];
        *(_QWORD *)&v64[15] = *(_QWORD *)((char *)v69 + 15);
        v61 = v66;
        v65 = v39;
        webrtc::RtpTransportControllerSend::PostUpdates((uint64_t)this, (uint64_t)&v51, v26, v27, v28, v29, v30, v31);
        if (__p)
          operator delete(__p);
        goto LABEL_41;
      }
LABEL_49:
      abort();
    }
LABEL_41:
    if (v23)
      operator delete(v23);
LABEL_43:
    if (v13)
      operator delete(v13);
  }
}

void webrtc::RtpTransportControllerSend::OnReceivedPacket(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *v12[7];
  void *__p;
  void *v14;

  v3 = *(_QWORD *)(a1 + 1752);
  if (v3)
  {
    v10 = *a2;
    v11 = *((_QWORD *)a2 + 2);
    (*(void (**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v3 + 64))(v12, v3, &v10);
    webrtc::RtpTransportControllerSend::PostUpdates(a1, (uint64_t)v12, v4, v5, v6, v7, v8, v9);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
}

void webrtc::RtpTransportControllerSend::SetSdpBitrateParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = webrtc::RtpBitrateConfigurator::UpdateWithSdpParameters(a1 + 360, a2);
  v11[1] = v3;
  if ((v3 & 0xFF00000000) != 0)
  {
    webrtc::RtpTransportControllerSend::UpdateBitrateConstraints(a1, (int *)v11);
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_transport_controller_send.cc");
  }
}

void webrtc::RtpTransportControllerSend::SetClientBitratePreferences(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v3 = a1 + 360;
  v4 = *a2;
  *(_QWORD *)(v3 + 28) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v3 + 12) = v4;
  v13[0] = webrtc::RtpBitrateConfigurator::UpdateConstraints(v3, (uint64_t)a2 + 8);
  v13[1] = v5;
  if ((v5 & 0xFF00000000) != 0)
  {
    webrtc::RtpTransportControllerSend::UpdateBitrateConstraints(a1, (int *)v13);
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_transport_controller_send.cc");
  }
}

void webrtc::RtpTransportControllerSend::OnTransportOverheadChanged(webrtc::RtpTransportControllerSend *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v11;
  Timestamp v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;

  if (a2 < 0x1F4)
  {
    v11 = (char *)this + 448;
    if (!*((_BYTE *)this + 515))
      *((_QWORD *)this + 66) = a2;
    v12.var0 = 0x8000000000000000;
    webrtc::TaskQueuePacedSender::MaybeProcessPackets((uint64_t)v11, v12);
    v14 = (uint64_t *)*((_QWORD *)this + 42);
    v13 = (uint64_t *)*((_QWORD *)this + 43);
    while (v14 != v13)
    {
      v15 = *v14++;
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 104))(v15, a2);
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_transport_controller_send.cc");
  }
}

uint64_t webrtc::RtpTransportControllerSend::AccountForAudioPacketsInPacedSender(webrtc::RtpTransportControllerSend *this, char a2)
{
  Timestamp v2;

  *((_BYTE *)this + 1392) = a2;
  v2.var0 = 0x8000000000000000;
  return webrtc::TaskQueuePacedSender::MaybeProcessPackets((uint64_t)this + 448, v2);
}

uint64_t webrtc::RtpTransportControllerSend::IncludeOverheadInPacedSender(webrtc::RtpTransportControllerSend *this)
{
  Timestamp v1;

  *((_BYTE *)this + 1424) = 1;
  *((_BYTE *)this + 1393) = 1;
  v1.var0 = 0x8000000000000000;
  return webrtc::TaskQueuePacedSender::MaybeProcessPackets((uint64_t)this + 448, v1);
}

uint64_t webrtc::RtpTransportControllerSend::EnsureStarted(uint64_t this)
{
  Timestamp v1;

  if (!*(_BYTE *)(this + 441))
  {
    *(_BYTE *)(this + 441) = 1;
    *(_BYTE *)(this + 1408) = 1;
    v1.var0 = 0x8000000000000000;
    return webrtc::TaskQueuePacedSender::MaybeProcessPackets(this + 448, v1);
  }
  return this;
}

void webrtc::RtpTransportControllerSend::OnReceiverEstimatedMaxBitrate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[7];
  void *__p;
  void *v11;

  v2 = *(_QWORD *)(a1 + 1752);
  if (v2)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v2 + 40))(v9);
    webrtc::RtpTransportControllerSend::PostUpdates(a1, (uint64_t)v9, v3, v4, v5, v6, v7, v8);
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
  }
}

void `non-virtual thunk to'webrtc::RtpTransportControllerSend::OnReceiverEstimatedMaxBitrate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10[7];
  void *__p;
  void *v12;

  v2 = *(_QWORD *)(a1 + 1744);
  if (v2)
  {
    v3 = a1 - 8;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v2 + 40))(v10);
    webrtc::RtpTransportControllerSend::PostUpdates(v3, (uint64_t)v10, v4, v5, v6, v7, v8, v9);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
  }
}

void webrtc::RtpTransportControllerSend::OnRttUpdate(webrtc::RtpTransportControllerSend *this, Timestamp a2, TimeDelta a3)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  char v13;
  void *v14[7];
  void *__p;
  void *v16;

  v4 = *((_QWORD *)this + 219);
  if (1000 * ((a3.var0 + 500) / 1000))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v12[0] = a2.var0;
    v12[1] = 1000 * ((a3.var0 + 500) / 1000);
    v13 = 0;
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v14, v4, v12);
    webrtc::RtpTransportControllerSend::PostUpdates((uint64_t)this, (uint64_t)v14, v6, v7, v8, v9, v10, v11);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
  }
}

void `non-virtual thunk to'webrtc::RtpTransportControllerSend::OnRttUpdate(webrtc::RtpTransportControllerSend *this, Timestamp a2, TimeDelta a3)
{
  uint64_t v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  void *v15[7];
  void *__p;
  void *v17;

  v4 = *((_QWORD *)this + 218);
  if (1000 * ((a3.var0 + 500) / 1000))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = (char *)this - 8;
    v13[0] = a2.var0;
    v13[1] = 1000 * ((a3.var0 + 500) / 1000);
    v14 = 0;
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v15, v4, v13);
    webrtc::RtpTransportControllerSend::PostUpdates((uint64_t)v6, (uint64_t)v15, v7, v8, v9, v10, v11, v12);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
}

void webrtc::RtpTransportControllerSend::OnTransportFeedback(webrtc::RtpTransportControllerSend *this, Timestamp a2, const webrtc::rtcp::TransportFeedback *a3, double a4, double a5, double a6, double a7, double a8, int64x2_t a9, int64x2_t a10)
{
  Timestamp v13;
  uint64_t v14;
  const void *v15;
  int64_t v16;
  size_t v17;
  const void *v18;
  int64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  Timestamp v32;
  __int128 v33;
  void *v34;
  char *v35;
  char *v36;
  void *v37;
  void *v38;
  char *v39;
  void *v40[7];
  void *__p;
  void *v42;
  __int128 v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  char v48;

  webrtc::TransportFeedbackDemuxer::OnTransportFeedback((webrtc::RtpTransportControllerSend *)((char *)this + 1504), a3, a4, a5, a6, a7, a8, a9, a10);
  v13.var0 = a2.var0;
  webrtc::TransportFeedbackAdapter::ProcessTransportFeedback((webrtc::RtpTransportControllerSend *)((char *)this + 1576), a3, v13, &v43);
  if (!v48)
    return;
  v14 = *((_QWORD *)this + 219);
  if (v14)
  {
    v33 = v43;
    v35 = 0;
    v36 = 0;
    v34 = 0;
    v15 = v44;
    v16 = v45 - v44;
    if (v45 != v44)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v16 >> 4) >= 0x333333333333334)
        goto LABEL_27;
      v34 = operator new(v16);
      v36 = (char *)v34 + 16 * (v16 >> 4);
      v17 = 80 * ((v16 - 80) / 0x50uLL) + 80;
      memcpy(v34, v15, v17);
      v35 = (char *)v34 + v17;
    }
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v18 = v46;
    v19 = v47 - v46;
    if (v47 == v46)
    {
LABEL_9:
      (*(void (**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v14 + 96))(v40, v14, &v33);
      webrtc::RtpTransportControllerSend::PostUpdates((uint64_t)this, (uint64_t)v40, v22, v23, v24, v25, v26, v27);
      if (__p)
      {
        v42 = __p;
        operator delete(__p);
      }
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v34)
      {
        v35 = (char *)v34;
        operator delete(v34);
      }
      goto LABEL_15;
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (char *)operator new(v47 - v46);
      v21 = &v20[8 * (v19 >> 3)];
      v37 = v20;
      v39 = v21;
      memcpy(v20, v18, v19);
      v38 = v21;
      goto LABEL_9;
    }
LABEL_27:
    abort();
  }
LABEL_15:
  v28 = (_QWORD *)std::__tree<std::__value_type<rtc::NetworkRoute,webrtc::DataSize>,std::__map_value_compare<rtc::NetworkRoute,std::__value_type<rtc::NetworkRoute,webrtc::DataSize>,webrtc::InFlightBytesTracker::NetworkRouteComparator,true>,std::allocator<std::__value_type<rtc::NetworkRoute,webrtc::DataSize>>>::find<rtc::NetworkRoute>((uint64_t)this + 1648, (unsigned __int8 *)this + 1688);
  if ((_QWORD *)((char *)this + 1656) == v28)
  {
    v29 = 0;
    v30 = *((_QWORD *)this + 268);
    v31 = v30 <= 0;
    if (*((unsigned __int8 *)this + 2152) == v31)
      goto LABEL_21;
LABEL_19:
    *((_BYTE *)this + 2152) = v31;
    webrtc::PacingController::SetCongested((uint64_t)this + 488, v29 >= v30);
    if (!*((_BYTE *)this + 1472))
    {
      v32.var0 = 0x8000000000000000;
      webrtc::TaskQueuePacedSender::MaybeProcessPackets((uint64_t)this + 448, v32);
    }
    goto LABEL_21;
  }
  v29 = v28[9];
  v30 = *((_QWORD *)this + 268);
  v31 = v29 >= v30;
  if (*((unsigned __int8 *)this + 2152) != v31)
    goto LABEL_19;
LABEL_21:
  if (v48)
  {
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
  }
}

void `non-virtual thunk to'webrtc::RtpTransportControllerSend::OnTransportFeedback(webrtc::RtpTransportControllerSend *this, Timestamp a2, const webrtc::rtcp::TransportFeedback *a3, double a4, double a5, double a6, double a7, double a8, int64x2_t a9, int64x2_t a10)
{
  webrtc::RtpTransportControllerSend::OnTransportFeedback((webrtc::RtpTransportControllerSend *)((char *)this - 8), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void webrtc::RtpTransportControllerSend::OnRemoteNetworkEstimate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _OWORD v23[8];
  uint64_t v24;
  void *v25[7];
  void *__p;
  void *v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = operator new();
  v22 = *(_OWORD *)(a2 + 40);
  if (rtc::g_clock)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v6 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  *(_QWORD *)v5 = &unk_24C0B49C8;
  *(_QWORD *)(v5 + 8) = 1000 * (v6 / 1000000);
  *(_OWORD *)(v5 + 16) = v22;
  v28 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 40))(v4, &v28);
  v7 = v28;
  v28 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  v9 = v8 / 0x3E8uLL;
  if (v8 % 0x3E8uLL > 0x1F3)
    ++v9;
  if (-v8 % 0x3E8uLL <= 0x1F4)
    v10 = 0;
  else
    v10 = -1;
  if (v8 < 0)
    v9 = v10 - -v8 / 0x3E8uLL;
  *(_QWORD *)(a2 + 8) = 1000 * v9;
  v11 = *(_QWORD *)(a1 + 1752);
  if (v11)
  {
    v12 = *(_OWORD *)(a2 + 48);
    v23[2] = *(_OWORD *)(a2 + 32);
    v23[3] = v12;
    v13 = *(_OWORD *)(a2 + 80);
    v23[4] = *(_OWORD *)(a2 + 64);
    v23[5] = v13;
    v14 = *(_OWORD *)(a2 + 16);
    v23[0] = *(_OWORD *)a2;
    v23[1] = v14;
    v24 = *(_QWORD *)(a2 + 128);
    v15 = *(_OWORD *)(a2 + 112);
    v23[6] = *(_OWORD *)(a2 + 96);
    v23[7] = v15;
    (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v11 + 104))(v25, v11, v23);
    webrtc::RtpTransportControllerSend::PostUpdates(a1, (uint64_t)v25, v16, v17, v18, v19, v20, v21);
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
  }
}

void `non-virtual thunk to'webrtc::RtpTransportControllerSend::OnRemoteNetworkEstimate(uint64_t a1, uint64_t a2)
{
  webrtc::RtpTransportControllerSend::OnRemoteNetworkEstimate(a1 - 16, a2);
}

void webrtc::RtpTransportControllerSend::OnReport(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  _DWORD *v4;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t **v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  uint64_t **v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[5];
  void *v32[7];
  void *__p;
  void *v34;

  if (a4)
  {
    v4 = a3;
    v6 = 0;
    v7 = 0;
    v8 = &a3[14 * a4];
    v9 = (uint64_t **)(a1 + 1776);
    do
    {
      while (1)
      {
        v11 = v4[1];
        v12 = *v9;
        v13 = v9;
        v14 = v9;
        if (*v9)
          break;
LABEL_11:
        v16 = v14;
        v17 = operator new(0x28uLL);
        v17[7] = v11;
        *((_QWORD *)v17 + 4) = 0;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 2) = v16;
        *v13 = (uint64_t *)v17;
        v18 = **(_QWORD **)(a1 + 1768);
        v19 = (uint64_t *)v17;
        if (v18)
        {
          *(_QWORD *)(a1 + 1768) = v18;
          v19 = *v13;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1776), v19);
        ++*(_QWORD *)(a1 + 1784);
        v10 = v4[3];
        v17[8] = v4[4];
        v17[9] = v10;
        v4 += 14;
        if (v4 == v8)
          goto LABEL_14;
      }
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v12;
          v15 = *((_DWORD *)v12 + 7);
          if (v11 >= v15)
            break;
          v12 = *v14;
          v13 = v14;
          if (!*v14)
            goto LABEL_11;
        }
        if (v15 >= v11)
          break;
        v12 = v14[1];
        if (!v12)
        {
          v13 = v14 + 1;
          goto LABEL_11;
        }
      }
      v21 = v4[3];
      v20 = v4[4];
      v7 = v20 + v7 - *((_DWORD *)v14 + 8);
      v6 = v21 + v6 - *((_DWORD *)v14 + 9);
      *((_DWORD *)v14 + 8) = v20;
      *((_DWORD *)v14 + 9) = v21;
      v4 += 14;
    }
    while (v4 != v8);
LABEL_14:
    if (v7 && v7 - v6 >= 1)
    {
      v22 = *(_QWORD *)(a1 + 1752);
      if (v22)
      {
        v23 = *(_QWORD *)(a1 + 1792);
        v31[0] = a2;
        v31[1] = v23;
        v31[2] = a2;
        v31[3] = v6;
        v31[4] = (v7 - v6);
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v22 + 88))(v32, v22, v31);
        webrtc::RtpTransportControllerSend::PostUpdates(a1, (uint64_t)v32, v24, v25, v26, v27, v28, v29);
        if (__p)
        {
          v34 = __p;
          operator delete(__p);
        }
      }
      *(_QWORD *)(a1 + 1792) = a2;
    }
  }
}

void `non-virtual thunk to'webrtc::RtpTransportControllerSend::OnReport(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  webrtc::RtpTransportControllerSend::OnReport(a1 - 8, a2, a3, a4);
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpTransportControllerSend::RtpTransportControllerSend(webrtc::RtpTransportConfig const&)::$_0 &,webrtc::RtpPacketToSend const&,webrtc::PacedPacketInfo const&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8[36];

  if (*(_BYTE *)(a2 + 160) && *(_BYTE *)(a2 + 128))
  {
    v3 = *a1;
    webrtc::RtpPacketSendInfo::From(a2, a3, (uint64_t)v8);
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 40) + 16))(*(_QWORD *)(v3 + 40));
    v5 = v4 / 0x3E8uLL;
    if (v4 % 0x3E8uLL > 0x1F3)
      ++v5;
    if (-v4 % 0x3E8uLL <= 0x1F4)
      v6 = 0;
    else
      v6 = -1;
    if (v4 < 0)
      v5 = v6 - -v4 / 0x3E8uLL;
    v7 = 1000 * v5;
    webrtc::TransportFeedbackDemuxer::AddPacket(v3 + 1504, v8);
    webrtc::TransportFeedbackAdapter::AddPacket(v3 + 1576, v8, *(_QWORD *)(v3 + 2112), v7);
  }
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::RtpTransportControllerSend::OnSentPacket(rtc::SentPacket const&)::$_0 &&>(webrtc::RtpTransportControllerSend ***a1)
{
  webrtc::RtpTransportControllerSend::ProcessSentPacket(**a1, (const rtc::SentPacket *)(*a1 + 1));
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::RtpTransportControllerSend::OnSentPacket(rtc::SentPacket const&)::$_0>(char a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a2;
  if ((a1 & 1) != 0)
  {
    if (result)
      JUMPOUT(0x20BD0ADECLL);
  }
  else
  {
    *a3 = result;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::RtpTransportControllerSend::StartProcessPeriodicTasks(void)::$_1 &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  webrtc::CongestionControlHandler *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  _OWORD v10[4];
  uint64_t v11;
  _OWORD v12[3];
  __int128 v13;
  uint64_t v14;
  char v15;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 1448);
  v3 = *(webrtc::CongestionControlHandler **)(*a1 + 1744);
  v4 = v2 / 0x3E8uLL;
  if (v2 % 0x3E8uLL > 0x1F3)
    ++v4;
  if (-v2 % 0x3E8uLL <= 0x1F4)
    v5 = 0;
  else
    v5 = -1;
  if (v2 < 0)
    v6 = v5 - -v2 / 0x3E8uLL;
  else
    v6 = v4;
  *((_QWORD *)v3 + 21) = v6;
  webrtc::CongestionControlHandler::GetUpdate(v3, (uint64_t)v12);
  if (!v15)
    return 25000;
  v7 = v13;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 2168));
  *(_DWORD *)(v1 + 2336) = v7;
  result = pthread_mutex_unlock((pthread_mutex_t *)(v1 + 2168));
  if (v15)
  {
    v9 = *(_QWORD *)(v1 + 1496);
    v11 = v14;
    v10[2] = v12[2];
    v10[3] = v13;
    v10[0] = v12[0];
    v10[1] = v12[1];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 16))(v9, v10);
    return 25000;
  }
  __break(1u);
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::RtpTransportControllerSend::StartProcessPeriodicTasks(void)::$_2 &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char v16;
  void *v17[7];
  void *__p;
  void *v19;

  v1 = *a1;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 40) + 16))(*(_QWORD *)(*a1 + 40));
  v3 = v2 / 0x3E8uLL;
  if (v2 % 0x3E8uLL > 0x1F3)
    ++v3;
  if (-v2 % 0x3E8uLL <= 0x1F4)
    v4 = 0;
  else
    v4 = -1;
  if (v2 < 0)
    v3 = v4 - -v2 / 0x3E8uLL;
  v5 = *(_BYTE *)(v1 + 2033);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 1440);
    v5 = 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v1 + 1752);
  v15[0] = 1000 * v3;
  v15[1] = v6;
  v16 = v5;
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v7 + 32))(v17, v7, v15);
  webrtc::RtpTransportControllerSend::PostUpdates(v1, (uint64_t)v17, v8, v9, v10, v11, v12, v13);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  return *(_QWORD *)(v1 + 1760);
}

void webrtc::RTPVideoHeader::SetFromMetadata(webrtc::RTPVideoHeader *this, const webrtc::VideoFrameMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  __int128 *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  webrtc::RTPVideoHeader *v38;

  *((_QWORD *)this + 19) = *(_QWORD *)a2;
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 2);
  *((_BYTE *)this + 164) = *((_BYTE *)a2 + 12);
  if (!*((_BYTE *)a2 + 24))
  {
    if (!*((_BYTE *)this + 144))
      goto LABEL_26;
    if ((*((_BYTE *)this + 112) & 1) != 0)
    {
      operator delete(*((void **)this + 15));
      if ((*((_BYTE *)this + 64) & 1) == 0)
      {
LABEL_23:
        if ((*((_BYTE *)this + 16) & 1) == 0)
        {
LABEL_25:
          *((_BYTE *)this + 144) = 0;
          goto LABEL_26;
        }
LABEL_24:
        operator delete(*((void **)this + 3));
        goto LABEL_25;
      }
    }
    else if ((*((_BYTE *)this + 64) & 1) == 0)
    {
      goto LABEL_23;
    }
    operator delete(*((void **)this + 9));
    if ((*((_BYTE *)this + 16) & 1) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (!*((_BYTE *)this + 144))
    goto LABEL_7;
  if ((*((_BYTE *)this + 112) & 1) == 0)
  {
    if ((*((_BYTE *)this + 64) & 1) == 0)
      goto LABEL_5;
LABEL_41:
    operator delete(*((void **)this + 9));
    if ((*((_BYTE *)this + 16) & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(*((void **)this + 15));
  if ((*((_BYTE *)this + 64) & 1) != 0)
    goto LABEL_41;
LABEL_5:
  if ((*((_BYTE *)this + 16) & 1) != 0)
LABEL_6:
    operator delete(*((void **)this + 3));
LABEL_7:
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 17) = 0xFFFFFFFFLL;
  *((_BYTE *)this + 144) = 1;
  if (!*((_BYTE *)a2 + 24))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    webrtc::RTPVideoHeader::GetAsMetadata(v38);
    return;
  }
  *(_QWORD *)this = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 4);
  v10 = (char *)a2 + 48;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 1) != 0)
    v10 = (char *)*((_QWORD *)a2 + 6);
  if (v11 >= 2)
    v12 = (uint64_t)v10;
  else
    v12 = 0;
  absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<long long>,long long const*>>((unint64_t *)this + 8, v12, (uint64_t)(4 * v11) >> 3);
  if (!*((_BYTE *)this + 144))
  {
    __break(1u);
    goto LABEL_50;
  }
  v13 = (char *)a2 + 96;
  v14 = *((_QWORD *)a2 + 11);
  if ((v14 & 1) != 0)
    v13 = (char *)*((_QWORD *)a2 + 12);
  if (v14 >= 2)
    v15 = (uint64_t)v13;
  else
    v15 = 0;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)this + 2, v15, (uint64_t)(2 * v14) >> 2);
LABEL_26:
  *(_WORD *)((char *)this + 167) = *((_WORD *)a2 + 68);
  v16 = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 43) = v16;
  if (v16 == 4)
  {
    if (*((_QWORD *)a2 + 223) != 3)
      absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v21 = (_OWORD *)((char *)a2 + 144);
    v22 = (_OWORD *)((char *)this + 296);
    if (*((_QWORD *)this + 242) == 3)
    {
      *v22 = *v21;
      v32 = *((_OWORD *)a2 + 10);
      v33 = *((_OWORD *)a2 + 11);
      v34 = *((_OWORD *)a2 + 13);
      *(_OWORD *)((char *)this + 344) = *((_OWORD *)a2 + 12);
      *(_OWORD *)((char *)this + 360) = v34;
      *(_OWORD *)((char *)this + 312) = v32;
      *(_OWORD *)((char *)this + 328) = v33;
      v35 = *((_OWORD *)a2 + 14);
      v36 = *((_OWORD *)a2 + 15);
      v37 = *((_OWORD *)a2 + 17);
      *(_OWORD *)((char *)this + 408) = *((_OWORD *)a2 + 16);
      *(_OWORD *)((char *)this + 424) = v37;
      *(_OWORD *)((char *)this + 376) = v35;
      *(_OWORD *)((char *)this + 392) = v36;
      return;
    }
    *((_QWORD *)this + 242) = -1;
    *v22 = *v21;
    v23 = *((_OWORD *)a2 + 10);
    v24 = *((_OWORD *)a2 + 11);
    v25 = *((_OWORD *)a2 + 13);
    *(_OWORD *)((char *)this + 344) = *((_OWORD *)a2 + 12);
    *(_OWORD *)((char *)this + 360) = v25;
    *(_OWORD *)((char *)this + 312) = v23;
    *(_OWORD *)((char *)this + 328) = v24;
    v26 = *((_OWORD *)a2 + 14);
    v27 = *((_OWORD *)a2 + 15);
    v28 = *((_OWORD *)a2 + 17);
    *(_OWORD *)((char *)this + 408) = *((_OWORD *)a2 + 16);
    *(_OWORD *)((char *)this + 424) = v28;
    *(_OWORD *)((char *)this + 376) = v26;
    *(_OWORD *)((char *)this + 392) = v27;
    v20 = 3;
    goto LABEL_38;
  }
  if (v16 == 2)
  {
    if (*((_QWORD *)a2 + 223) != 2)
      absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v29 = (char *)a2 + 144;
    v30 = (char *)this + 296;
    if (*((_QWORD *)this + 242) == 2)
    {
      memcpy(v30, v29, 0x668uLL);
      return;
    }
    *((_QWORD *)this + 242) = -1;
    memcpy(v30, v29, 0x668uLL);
    v20 = 2;
    goto LABEL_38;
  }
  if (v16 != 1)
    return;
  if (*((_QWORD *)a2 + 223) != 1)
LABEL_50:
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v17 = (__int128 *)((char *)a2 + 144);
  v18 = (_OWORD *)((char *)this + 296);
  if (*((_QWORD *)this + 242) == 1)
  {
    v31 = *v17;
    *((_DWORD *)this + 78) = *((_DWORD *)a2 + 40);
    *v18 = v31;
    return;
  }
  *((_QWORD *)this + 242) = -1;
  v19 = *v17;
  *((_DWORD *)this + 78) = *((_DWORD *)a2 + 40);
  *v18 = v19;
  v20 = 1;
LABEL_38:
  *((_QWORD *)this + 242) = v20;
}

void webrtc::RTPVideoHeader::GetAsMetadata(webrtc::RTPVideoHeader *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int128 *p_src;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const void *v28;
  _OWORD v29[103];
  _BYTE __dst[1648];
  __int128 __src;
  int v32;
  uint64_t v33;

  v2 = MEMORY[0x24BDAC7A8](this, a2);
  v11 = v2;
  v12 = v10;
  v33 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v13 = (unint64_t *)(v10 + 88);
  *(_BYTE *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_WORD *)(v10 + 136) = 1;
  *(_DWORD *)(v10 + 140) = 0;
  *(_QWORD *)(v10 + 1784) = 0;
  *(_DWORD *)(v10 + 1792) = 0;
  *(_QWORD *)(v10 + 1800) = 0;
  *(_QWORD *)(v10 + 1816) = 0;
  *(_QWORD *)(v10 + 1808) = 0;
  *(_QWORD *)v10 = *(_QWORD *)(v2 + 152);
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v2 + 160);
  *(_BYTE *)(v10 + 12) = *(_BYTE *)(v2 + 164);
  if (*(_BYTE *)(v2 + 144))
  {
    *(_QWORD *)(v10 + 16) = *(_QWORD *)v2;
    *(_BYTE *)(v10 + 24) = 1;
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v2 + 8);
    v14 = *(_QWORD *)(v2 + 64);
    v15 = v2 + 72;
    if ((v14 & 1) != 0)
      v15 = *(_QWORD *)(v2 + 72);
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<long long>,long long const*>>((unint64_t *)(v12 + 40), v16, (uint64_t)(4 * v14) >> 3);
    if (!*(_BYTE *)(v11 + 144))
    {
      __break(1u);
      goto LABEL_26;
    }
    v17 = v11 + 24;
    v18 = *(_QWORD *)(v11 + 16);
    if ((v18 & 1) != 0)
      v17 = *(_QWORD *)(v11 + 24);
    if (v18 >= 2)
      v19 = v17;
    else
      v19 = 0;
    absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>(v13, v19, (uint64_t)(2 * v18) >> 2);
  }
  *(_WORD *)(v12 + 136) = *(_WORD *)(v11 + 167);
  v20 = *(_DWORD *)(v11 + 172);
  *(_DWORD *)(v12 + 140) = v20;
  if (v20 == 4)
  {
    if (*(_QWORD *)(v11 + 1936) != 3)
      absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)v2, v3, v4, v5, v6, v7, v8, v9);
    v23 = *(_OWORD *)(v11 + 408);
    v29[6] = *(_OWORD *)(v11 + 392);
    v29[7] = v23;
    v29[8] = *(_OWORD *)(v11 + 424);
    v24 = *(_OWORD *)(v11 + 344);
    v29[2] = *(_OWORD *)(v11 + 328);
    v29[3] = v24;
    v25 = *(_OWORD *)(v11 + 376);
    v29[4] = *(_OWORD *)(v11 + 360);
    v29[5] = v25;
    v27 = *(_OWORD *)(v11 + 296);
    v26 = *(_OWORD *)(v11 + 312);
    p_src = v29;
    v22 = 3;
    v29[0] = v27;
    v29[1] = v26;
    goto LABEL_23;
  }
  if (v20 == 2)
  {
    if (*(_QWORD *)(v11 + 1936) != 2)
      absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)v2, v3, v4, v5, v6, v7, v8, v9);
    v28 = (const void *)(v11 + 296);
    p_src = (__int128 *)__dst;
    memcpy(__dst, v28, 0x668uLL);
    v22 = 2;
    goto LABEL_23;
  }
  if (v20 != 1)
    return;
  if (*(_QWORD *)(v11 + 1936) != 1)
LABEL_26:
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)v2, v3, v4, v5, v6, v7, v8, v9);
  v32 = *(_DWORD *)(v11 + 312);
  __src = *(_OWORD *)(v11 + 296);
  p_src = &__src;
  v22 = 1;
LABEL_23:
  *((_QWORD *)p_src + 205) = v22;
  memcpy((void *)(v12 + 144), p_src, 0x670uLL);
}

uint64_t std::__optional_move_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 144) = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = (unint64_t *)(a1 + 16);
    v7 = *(_QWORD *)(a2 + 16);
    v5 = (unint64_t *)(a2 + 16);
    v6 = v7;
    if (v7 < 2)
    {
      *(_QWORD *)(a1 + 64) = 0;
      v8 = (unint64_t *)(a1 + 64);
      v9 = (unint64_t *)(a2 + 64);
      v10 = *(_QWORD *)(a2 + 64);
      if (v10 < 2)
        goto LABEL_4;
LABEL_10:
      if ((v10 & 1) != 0)
      {
        absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::InitFrom(v8, v9);
        *(_QWORD *)(a1 + 112) = 0;
        v11 = (unint64_t *)(a1 + 112);
        v12 = (unint64_t *)(a2 + 112);
        v13 = *(_QWORD *)(a2 + 112);
        if (v13 < 2)
        {
LABEL_17:
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
          *(_BYTE *)(a1 + 144) = 1;
          return a1;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 64) = v10;
        v16 = *(_OWORD *)(a2 + 72);
        v17 = *(_OWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = v17;
        *(_OWORD *)(a1 + 72) = v16;
        *(_QWORD *)(a1 + 112) = 0;
        v11 = (unint64_t *)(a1 + 112);
        v12 = (unint64_t *)(a2 + 112);
        v13 = *(_QWORD *)(a2 + 112);
        if (v13 < 2)
          goto LABEL_17;
      }
LABEL_14:
      if ((v13 & 1) != 0)
      {
        absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(v11, v12);
      }
      else
      {
        *(_QWORD *)(a1 + 112) = v13;
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      }
      goto LABEL_17;
    }
    if ((v6 & 1) != 0)
    {
      absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::InitFrom(v4, v5);
      *(_QWORD *)(a1 + 64) = 0;
      v8 = (unint64_t *)(a1 + 64);
      v9 = (unint64_t *)(a2 + 64);
      v10 = *(_QWORD *)(a2 + 64);
      if (v10 >= 2)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v6;
      v14 = *(_OWORD *)(a2 + 24);
      v15 = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v15;
      *(_OWORD *)(a1 + 24) = v14;
      *(_QWORD *)(a1 + 64) = 0;
      v8 = (unint64_t *)(a1 + 64);
      v9 = (unint64_t *)(a2 + 64);
      v10 = *(_QWORD *)(a2 + 64);
      if (v10 >= 2)
        goto LABEL_10;
    }
LABEL_4:
    *(_QWORD *)(a1 + 112) = 0;
    v11 = (unint64_t *)(a1 + 112);
    v12 = (unint64_t *)(a2 + 112);
    v13 = *(_QWORD *)(a2 + 112);
    if (v13 < 2)
      goto LABEL_17;
    goto LABEL_14;
  }
  return a1;
}

void *absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::InitFrom(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  void *v6;
  const void *v7;
  unint64_t v8;
  void *result;

  v2 = *a2;
  if (*a2 <= 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = v2 >> 1;
  if ((v2 & 1) != 0)
  {
    if (v5 <= 0xA)
      v8 = 10;
    else
      v8 = v2 >> 1;
    if (!(v8 >> 61))
    {
      v6 = operator new(8 * v8);
      a1[1] = (unint64_t)v6;
      a1[2] = v8;
      v7 = (const void *)a2[1];
      goto LABEL_9;
    }
LABEL_11:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v6 = a1 + 1;
  v7 = a2 + 1;
LABEL_9:
  result = memcpy(v6, v7, 8 * v5);
  *a1 = *a2;
  return result;
}

uint64_t webrtc::RtpVideoLayersAllocationExtension::Write(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  char v14;
  int v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  unsigned int v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  unint64_t v43;
  int v44;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3 > 1)
  {
    v43 = 0;
    LOBYTE(v44) = 1;
    v5 = *(_QWORD *)(a3 + 16);
    if ((v3 & 1) == 0)
      v5 = a3 + 16;
    v6 = 56 * (v3 >> 1);
    v7 = (_DWORD *)(v5 + 4);
    do
    {
      v8 = (int)*(v7 - 1);
      *((_BYTE *)&v43 + v8 + 4) |= 1 << *v7;
      v9 = v43;
      if ((int)v43 <= (int)v8)
        v9 = v8;
      LODWORD(v43) = v9;
      v7 += 14;
      v6 -= 56;
    }
    while (v6);
    if (v9 >= 1)
    {
      v10 = (unsigned __int8 *)&v43 + 5;
      v11 = (v9 + 1) - 1;
      while (1)
      {
        v12 = *v10++;
        if (v12 != BYTE4(v43))
          break;
        if (!--v11)
          goto LABEL_15;
      }
      LOBYTE(v44) = 0;
    }
LABEL_15:
    v13 = v43;
    v14 = v44;
    v15 = (*(_DWORD *)a3 << 6) | (16 * v43);
    *a1 = (*(_BYTE *)a3 << 6) | (16 * v43);
    if ((v14 & 1) != 0)
    {
      *a1 = v15 | BYTE4(v13);
    }
    else
    {
      a1[1] = (v13 >> 28) & 0xF0 | BYTE5(v13);
      if ((int)v13 < 2)
      {
        ++a1;
      }
      else
      {
        a1[2] = (v13 >> 44) & 0xF0 | HIBYTE(v13);
        a1 += 2;
      }
    }
    a1[1] = 0;
    v16 = a1 + 1;
    v17 = *(_QWORD *)(a3 + 8);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = v17 & 1;
    if ((v17 & 1) != 0)
      v20 = *(_QWORD *)(a3 + 16);
    else
      v20 = a3 + 16;
    v21 = v17 >> 1;
    if (v17 >= 2)
    {
      v22 = 0;
      v23 = 56 * v21;
      v24 = (unsigned int *)(v20 + 8);
      v25 = 8;
      do
      {
        if (v25)
        {
          v25 -= 2;
        }
        else
        {
          v22 = 0;
          *++v16 = 0;
          v25 = 6;
        }
        v26 = *v24;
        v24 += 14;
        v22 |= (unint64_t)((v26 >> 1) - 1) << v25;
        *v16 = v22;
        v23 -= 56;
      }
      while (v23);
      v18 = *(_QWORD *)(a3 + 16);
      v19 = *(_QWORD *)(a3 + 8) & 1;
      v21 = *(_QWORD *)(a3 + 8) >> 1;
    }
    v27 = v16 + 1;
    if (!v19)
      v18 = a3 + 16;
    if (v21)
    {
      v28 = v18 + 56 * v21;
      do
      {
        v29 = *(_QWORD *)(v18 + 8);
        v30 = (uint64_t *)(v18 + 16);
        if ((v29 & 1) != 0)
          v30 = (uint64_t *)*v30;
        if (v29 >= 2)
        {
          v31 = &v30[v29 >> 1];
          do
          {
            v33 = *v30;
            v34 = *v30 / 0x3E8uLL;
            if (*v30 % 0x3E8uLL > 0x1F3)
              ++v34;
            if (-v33 % 0x3E8uLL <= 0x1F4)
              v35 = 0;
            else
              v35 = -1;
            v36 = v35 - -v33 / 0x3E8uLL;
            if (v33 < 0)
              v34 = v36;
            if (v34 < 0x80)
            {
              LODWORD(v32) = 0;
            }
            else
            {
              v32 = 0;
              do
              {
                v27[v32++] = v34 | 0x80;
                v37 = v34 >> 14;
                v34 >>= 7;
              }
              while (v37);
            }
            v27[v32] = v34;
            v27 += (int)v32 + 1;
            ++v30;
          }
          while (v30 != v31);
        }
        v18 += 56;
      }
      while (v18 != v28);
    }
    if (*(_BYTE *)(a3 + 4))
    {
      v39 = *(_QWORD *)(a3 + 8);
      v38 = *(_QWORD *)(a3 + 16);
      if ((v39 & 1) == 0)
        v38 = a3 + 16;
      if (v39 >= 2)
      {
        v40 = 56 * (v39 >> 1);
        v41 = (char *)(v38 + 52);
        do
        {
          *(_WORD *)v27 = bswap32(*((unsigned __int16 *)v41 - 2) - 1) >> 16;
          *((_WORD *)v27 + 1) = bswap32(*((unsigned __int16 *)v41 - 1) - 1) >> 16;
          v42 = *v41;
          v41 += 56;
          v27[4] = v42;
          v27 += 5;
          v40 -= 56;
        }
        while (v40);
      }
    }
    return 1;
  }
  else
  {
    *a1 = 0;
    return 1;
  }
}

uint64_t webrtc::RtpVideoLayersAllocationExtension::ValueSize(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = 1;
  if (v1 >= 2)
  {
    v25 = 0;
    LOBYTE(v26) = 1;
    v3 = a1 + 16;
    if ((v1 & 1) != 0)
      v3 = *(_QWORD *)(a1 + 16);
    v4 = v1 >> 1;
    v5 = 56 * v4;
    v6 = v3 + 56 * v4;
    v7 = (_DWORD *)(v3 + 4);
    do
    {
      v8 = (int)*(v7 - 1);
      *((_BYTE *)&v25 + v8 + 4) |= 1 << *v7;
      v9 = v25;
      if ((int)v25 <= (int)v8)
        v9 = v8;
      LODWORD(v25) = v9;
      v7 += 14;
      v5 -= 56;
    }
    while (v5);
    if (v9 >= 1)
    {
      v10 = (unsigned __int8 *)&v25 + 5;
      v11 = (v9 + 1) - 1;
      while (1)
      {
        v12 = *v10++;
        if (v12 != BYTE4(v25))
          break;
        if (!--v11)
          goto LABEL_14;
      }
      LOBYTE(v26) = 0;
    }
LABEL_14:
    v13 = 2;
    if ((int)v25 > 1)
      v13 = 3;
    if ((v26 & 1) != 0)
      v13 = 1;
    v2 = v13 + ((v4 + 3) >> 2);
    do
    {
      v14 = *(_QWORD *)(v3 + 8);
      v15 = (uint64_t *)(v3 + 16);
      if ((v14 & 1) != 0)
        v15 = (uint64_t *)*v15;
      if (v14 >= 2)
      {
        v16 = &v15[v14 >> 1];
        do
        {
          v17 = *v15;
          v18 = *v15 / 0x3E8uLL;
          if (*v15 % 0x3E8uLL > 0x1F3)
            ++v18;
          if (-v17 % 0x3E8uLL <= 0x1F4)
            v19 = 0;
          else
            v19 = -1;
          v20 = v19 - -v17 / 0x3E8uLL;
          if (v17 < 0)
            v18 = v20;
          v21 = 1;
          if (v18 >= 0x80)
          {
            do
            {
              v22 = v18 >> 14;
              v18 >>= 7;
              ++v21;
            }
            while (v22);
          }
          v2 += v21;
          ++v15;
        }
        while (v15 != v16);
      }
      v3 += 56;
    }
    while (v3 != v6);
    v23 = v2 + 5 * v4;
    if (*(_BYTE *)(a1 + 4))
      return v23;
  }
  return v2;
}

char *absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::EmplaceBackSlow<>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v2 = a1 + 8;
  v3 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v4 = 2 * *(_QWORD *)(a1 + 16);
    if (v4 >= 0x492492492492493)
      goto LABEL_18;
    v2 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v4 = 8;
  }
  v5 = v3 >> 1;
  v6 = (char *)operator new(56 * v4);
  v7 = v6;
  v8 = &v6[56 * (v3 >> 1)];
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_QWORD *)v8 + 6) = 0;
  if (v3 < 2)
    goto LABEL_14;
  v9 = 0;
  v10 = v3 >> 1;
  do
  {
    v11 = &v6[v9];
    *(_QWORD *)v11 = *(_QWORD *)(v2 + v9);
    *((_QWORD *)v11 + 1) = *(_QWORD *)(v2 + v9 + 8);
    v12 = *(_OWORD *)(v2 + v9 + 32);
    *((_OWORD *)v11 + 1) = *(_OWORD *)(v2 + v9 + 16);
    *((_OWORD *)v11 + 2) = v12;
    *(_QWORD *)(v2 + v9 + 8) = 0;
    v13 = *(_DWORD *)(v2 + v9 + 48);
    v11[52] = *(_BYTE *)(v2 + v9 + 52);
    *((_DWORD *)v11 + 12) = v13;
    v9 += 56;
    --v10;
  }
  while (v10);
  if (!v2)
  {
    __break(1u);
LABEL_18:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v14 = v2 + 56 * v5 - 48;
  do
  {
    if ((*(_BYTE *)v14 & 1) != 0)
      operator delete(*(void **)(v14 + 8));
    v14 -= 56;
    --v5;
  }
  while (v5);
  v3 = *(_QWORD *)a1;
LABEL_14:
  if ((v3 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v3 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)a1 = (v3 | 1) + 2;
  return v8;
}

uint64_t webrtc::RtpVideoSender::RtpVideoSender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17)
{
  char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  pthread_mutexattr_t *sig;
  unint64_t v27;
  char v28;
  int v29;
  int v30;
  BOOL v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int32 *v57;
  __int32 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __int32 *v66;
  __int32 *v67;
  int *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  BOOL v73;
  uint64_t *v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  __int128 v86;
  size_t v87;
  int v88;
  std::string *v89;
  size_t size;
  unint64_t v91;
  pthread_mutex_t *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  std::string *v101;
  std::string::size_type v102;
  BOOL v103;
  _BOOL4 v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  _QWORD *v108;
  pthread_mutex_t **v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  double *v121;
  const double *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  webrtc::ModuleRtpRtcpImpl2 *v130;
  uint64_t v131;
  uint64_t v132;
  pthread_mutexattr_t *p_p;
  unint64_t v134;
  _BOOL4 v135;
  int v136;
  int v137;
  pthread_mutexattr_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  size_t v145;
  char *v146;
  char *v147;
  unsigned int *v148;
  unsigned int *v149;
  _QWORD *v150;
  unsigned int v151;
  uint64_t v152;
  _QWORD *v153;
  unsigned int v154;
  BOOL v155;
  uint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  void *v159;
  __int16 *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  unint64_t *v183;
  char *v184;
  unint64_t *v185;
  unint64_t *v186;
  unint64_t v187;
  _OWORD *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  char *v193;
  _BYTE *v194;
  _BYTE *v195;
  int64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v211;
  char v212;
  BOOL v213;
  BOOL v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t *v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t **v229;
  unsigned int v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  BOOL v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t i;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t v258;
  pthread_mutex_t **v259;
  pthread_mutex_t **v260;
  size_t v261;
  __int128 *v262;
  uint64_t v264;
  pthread_mutex_t **v265;
  char v266;
  char **v267;
  char *v268;
  size_t v269;
  pthread_mutex_t *v270;
  uint64_t v271;
  pthread_mutex_t *v272;
  uint64_t v273;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v282;
  pthread_mutex_t ***v283;
  unsigned int *__dst;
  _QWORD *v285;
  uint64_t v286;
  uint64_t **v287;
  uint64_t v288;
  unsigned int *v289;
  uint64_t v290;
  void *v291;
  unint64_t v292;
  int v293;
  char v294;
  unsigned __int8 v295;
  uint64_t v296;
  uint64_t v297;
  __int16 v298;
  int v299;
  char v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  std::string v304;
  void *v305;
  void *v306;
  pthread_mutexattr_t __p;
  uint64_t v308;
  uint64_t v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  _OWORD v317[2];
  uint64_t v318;
  _QWORD v319[2];
  uint64_t v320;
  int v321;
  int v322;
  char v323;
  __int16 v324;
  std::string v325;
  char v326;
  void *v327;
  void *v328;
  uint64_t v329;
  float64x2x3_t v330;

  v329 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = &unk_24C0BE9E8;
  *(_QWORD *)a1 = &off_24C0BE900;
  *(_QWORD *)(a1 + 8) = &unk_24C0BE9C0;
  *(_QWORD *)(a1 + 24) = &unk_24C0BEA18;
  *(_QWORD *)(a1 + 32) = a16;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a16 + 16))(&__p, a16, "WebRTC-Video-UseFrameRateForOverhead", 36);
  if (SHIBYTE(v308) < 0)
  {
    v27 = *(_QWORD *)__p.__opaque;
    if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0)
      goto LABEL_400;
    sig = (pthread_mutexattr_t *)__p.__sig;
    if (*(_QWORD *)__p.__opaque)
    {
      if (!__p.__sig)
        goto LABEL_400;
    }
  }
  else
  {
    sig = &__p;
    v27 = HIBYTE(v308);
  }
  if (v27 < 7)
  {
    v28 = 0;
    if ((v308 & 0x8000000000000000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v29 = sig->__sig;
  v30 = *(_DWORD *)((char *)&sig->__sig + 3);
  v31 = v29 == 1650552389 && v30 == 1684368482;
  v28 = v31;
  if (v308 < 0)
LABEL_16:
    operator delete((void *)__p.__sig);
LABEL_17:
  *(_BYTE *)(a1 + 40) = v28;
  v32 = *(char **)(a5 + 96);
  v33 = *(char **)(a5 + 104);
  v290 = a1;
  v276 = a4;
  v277 = a1 + 16;
  if (v32 == v33)
  {
LABEL_30:
    v37 = 0;
  }
  else
  {
    while (1)
    {
      if (v32[23] < 0)
      {
        v34 = *((_QWORD *)v32 + 1);
        if (v34 < 0)
          goto LABEL_400;
        v35 = *(char **)v32;
        if (v34 && v35 == 0)
          goto LABEL_400;
      }
      else
      {
        v34 = v32[23];
        v35 = v32;
      }
      if (v34 == 73
        && !memcmp(v35, "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01", 0x49uLL))
      {
        break;
      }
      v32 += 32;
      if (v32 == v33)
        goto LABEL_30;
    }
    v37 = 1;
  }
  *(_BYTE *)(a1 + 41) = v37;
  pthread_mutexattr_init(&__p);
  pthread_mutexattr_setpolicy_np(&__p, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 48), &__p);
  pthread_mutexattr_destroy(&__p);
  *(_BYTE *)(a1 + 112) = 0;
  v39 = *a12;
  *a12 = 0;
  *(_QWORD *)(a1 + 120) = v39;
  *(_BYTE *)(a1 + 128) = 1;
  v40 = *a15;
  *a15 = 0;
  v41 = *(_QWORD *)(v290 + 32);
  v320 = 0;
  v321 = 0;
  LOBYTE(v322) = 0;
  v323 = 0;
  v324 = 0;
  v308 = 0;
  v310 = 0u;
  v312 = 0u;
  v313 = 0u;
  v314 = 0u;
  v315 = 0u;
  v316 = 0u;
  memset(v317, 0, 29);
  memset(v319, 0, 11);
  v318 = 0;
  memset(&v325, 0, sizeof(v325));
  v326 = 0;
  *(_QWORD *)__p.__opaque = a2;
  LOWORD(__p.__sig) = 0;
  v309 = a7;
  v310 = *(_OWORD *)(a8 + 1);
  v311 = 0u;
  *(_QWORD *)&v311 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a9 + 136))(a9);
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a9 + 56))(a9);
  v43 = *a8;
  *((_QWORD *)&v311 + 1) = v42;
  v44 = a8[7];
  v45 = a8[3];
  *(_QWORD *)&v313 = v43;
  *((_QWORD *)&v313 + 1) = v44;
  *((_QWORD *)&v314 + 1) = v45;
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a9 + 64))(a9);
  v47 = a8[5];
  *(_QWORD *)&v315 = v46;
  *(_QWORD *)&v316 = v47;
  *((_QWORD *)&v316 + 1) = a10;
  *(_QWORD *)&v317[0] = a8[8];
  v288 = v41;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v41 + 16))(&v291, v41, "WebRTC-DisableRtxRateLimiter", 28);
  if (((char)v295 & 0x80000000) == 0)
  {
    v48 = &v291;
    v49 = v295;
    goto LABEL_39;
  }
  v49 = v292;
  if ((v292 & 0x8000000000000000) != 0)
    goto LABEL_400;
  v48 = v291;
  if (!v292)
  {
LABEL_39:
    v50 = v290;
    if (v49 >= 8)
      goto LABEL_40;
    goto LABEL_37;
  }
  v50 = v290;
  if (!v291)
    goto LABEL_400;
  if (v292 >= 8)
  {
LABEL_40:
    v51 = *v48 == 0x64656C6261736944;
    v286 = a14;
    if ((v295 & 0x80) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
LABEL_37:
  v51 = 0;
  v286 = a14;
  if ((v295 & 0x80) == 0)
    goto LABEL_42;
LABEL_41:
  operator delete(v291);
LABEL_42:
  v283 = (pthread_mutex_t ***)(v50 + 136);
  if (v51)
    *((_QWORD *)&v317[0] + 1) = a11;
  *(_QWORD *)&v317[1] = a8[4];
  v319[0] = a13;
  LOBYTE(v319[1]) = *(_BYTE *)(v286 + 4);
  BYTE1(v319[1]) = *(_BYTE *)(a5 + 88);
  DWORD2(v317[1]) = a6;
  v52 = v41;
  v320 = v41;
  v326 = *(_BYTE *)(a5 + 256);
  *(_QWORD *)(v50 + 144) = 0;
  *(_QWORD *)(v50 + 152) = 0;
  *v283 = 0;
  v53 = *(_QWORD *)a5;
  v54 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v54)
  {
    v55 = 0;
    v56 = v54 >> 2;
    v278 = (uint64_t *)(a3 + 8);
    v282 = v40;
    while (1)
    {
      v294 = 0;
      LOBYTE(v299) = 0;
      v300 = 0;
      v291 = 0;
      v292 = 0;
      LOBYTE(v293) = 0;
      v296 = 0;
      v297 = 0;
      v298 = 0;
      v302 = 0;
      v303 = 0;
      v301 = 0;
      v321 = *(_DWORD *)(v53 + 4 * v55);
      if ((*(_DWORD *)(a5 + 168) & 0x80000000) != 0)
        break;
      if (!*(_DWORD *)(a5 + 172))
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          goto LABEL_61;
        goto LABEL_83;
      }
      v57 = *(__int32 **)(a5 + 176);
      v58 = *(__int32 **)(a5 + 184);
      if (v57 == v58)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        {
LABEL_61:
          rtc::webrtc_logging_impl::Log("\r\t", v59, v60, v61, (uint64_t)v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_video_sender.cc");
          v62 = 0;
          *((_QWORD *)&v315 + 1) = 0;
          v63 = *(_QWORD *)a5;
          v64 = *(_QWORD *)(a5 + 8);
          v65 = (v64 - *(_QWORD *)a5) >> 2;
          if (v65 <= v55)
            goto LABEL_400;
          goto LABEL_85;
        }
LABEL_83:
        v62 = 0;
LABEL_84:
        *((_QWORD *)&v315 + 1) = 0;
        v63 = *(_QWORD *)a5;
        v64 = *(_QWORD *)(a5 + 8);
        v65 = (v64 - *(_QWORD *)a5) >> 2;
        if (v65 <= v55)
          goto LABEL_400;
        goto LABEL_85;
      }
      if ((unint64_t)((char *)v58 - (char *)v57) >= 5)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          goto LABEL_61;
        goto LABEL_83;
      }
      if (v56 <= (int)v55)
        goto LABEL_400;
      v66 = wmemchr(v57, *(_DWORD *)(v53 + 4 * (int)v55), v58 - v57);
      if (v66)
        v67 = v66;
      else
        v67 = v58;
      v68 = *(int **)(a5 + 184);
      if (v67 == v68)
        goto LABEL_83;
      v69 = *v278;
      if (!*v278)
        goto LABEL_184;
      v70 = *(_DWORD *)(a5 + 172);
      v71 = a3 + 8;
      do
      {
        v72 = *(_DWORD *)(v69 + 32);
        v73 = v72 >= v70;
        if (v72 >= v70)
          v74 = (uint64_t *)v69;
        else
          v74 = (uint64_t *)(v69 + 8);
        if (v73)
          v71 = v69;
        v69 = *v74;
      }
      while (*v74);
      if ((uint64_t *)v71 == v278)
      {
LABEL_184:
        v77 = 0;
        v78 = *(int **)(a5 + 176);
        if (v68 == v78)
          goto LABEL_400;
      }
      else
      {
        v75 = *(_DWORD *)(v71 + 32);
        v76 = v71 + 40;
        if (v70 >= v75)
          v77 = v76;
        else
          v77 = 0;
        v78 = *(int **)(a5 + 176);
        if (v68 == v78)
          goto LABEL_400;
      }
      v131 = operator new();
      v62 = v131;
      if (*(char *)(a5 + 71) < 0)
      {
        v23 = *(_QWORD *)(a5 + 56);
        if ((v23 & 0x8000000000000000) != 0)
          goto LABEL_400;
        v22 = *(char **)(a5 + 48);
        if (v23)
        {
          if (!v22)
            goto LABEL_400;
        }
      }
      else
      {
        v23 = *(unsigned __int8 *)(a5 + 71);
        v22 = (char *)(a5 + 48);
      }
      v52 = v288;
      *((_QWORD *)&v315 + 1) = v62;
      v63 = *(_QWORD *)a5;
      v64 = *(_QWORD *)(a5 + 8);
      v65 = (v64 - *(_QWORD *)a5) >> 2;
      if (v65 <= v55)
        goto LABEL_400;
LABEL_85:
      v79 = *(_QWORD *)(a5 + 200);
      v80 = *(_QWORD *)(a5 + 208);
      if (v79 == v80)
      {
        v83 = 0;
        v82 = 0;
      }
      else
      {
        if (v64 == v63)
        {
LABEL_91:
          v82 = 0;
        }
        else
        {
          v81 = 0;
          if (v65 <= 1)
            v65 = 1;
          while (*(_DWORD *)(v63 + 4 * v81) != *(_DWORD *)(v63 + 4 * v55))
          {
            if (v65 == ++v81)
              goto LABEL_91;
          }
          if (v81 >= (v80 - v79) >> 2)
            goto LABEL_400;
          v82 = *(_DWORD *)(v79 + 4 * v81);
        }
        v83 = 0x100000000;
      }
      v323 = BYTE4(v83);
      v322 = v82 | v83;
      v84 = *(_QWORD *)(a5 + 24);
      if (v55 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a5 + 32) - v84) >> 3))
      {
        v87 = 0;
        *((_BYTE *)&v304.__r_.__value_.__s + 23) = 0;
        v304.__r_.__value_.__s.__data_[0] = 0;
        v88 = 0;
        if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_99;
      }
      else
      {
        v85 = (__int128 *)(v84 + 24 * v55);
        if (*((char *)v85 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)v85, *((_QWORD *)v85 + 1));
          v87 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
          v88 = SHIBYTE(v304.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_99:
            if (v88 >= 0)
              v89 = &v304;
            else
              v89 = (std::string *)v304.__r_.__value_.__r.__words[0];
            if (v88 >= 0)
              size = v87;
            else
              size = v304.__r_.__value_.__l.__size_;
            std::string::__assign_no_alias<false>(&v325, (const std::string::value_type *)v89, size);
            if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_111:
              operator delete(v304.__r_.__value_.__l.__data_);
              goto LABEL_112;
            }
            goto LABEL_112;
          }
        }
        else
        {
          v86 = *v85;
          v304.__r_.__value_.__r.__words[2] = *((_QWORD *)v85 + 2);
          *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v86;
          v87 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
          v88 = SHIBYTE(v304.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_99;
        }
      }
      if (v88 < 0)
      {
        std::string::__assign_no_alias<true>(&v325, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
        if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_111;
      }
      else
      {
        v325 = v304;
      }
LABEL_112:
      LOBYTE(v324) = *(_BYTE *)(a5 + 149);
      v91 = operator new();
      v92 = (pthread_mutex_t *)(webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(v91, (uint64_t)&__p) + 128);
      pthread_mutex_lock(v92);
      v93 = *(unsigned __int8 *)(v91 + 192);
      pthread_mutex_unlock(v92);
      if (v93)
      {
        webrtc::ModuleRtpRtcpImpl2::GetFeedbackState((webrtc::ModuleRtpRtcpImpl2 *)v91, (uint64_t)&v304);
        pthread_mutex_lock(v92);
        *(_BYTE *)(v91 + 192) = 0;
        pthread_mutex_unlock(v92);
        if (v305)
        {
          v306 = v305;
          operator delete(v305);
        }
      }
      v94 = *(_QWORD *)(v91 + 24);
      pthread_mutex_lock((pthread_mutex_t *)(v94 + 1072));
      *(_BYTE *)(v94 + 1136) = 0;
      pthread_mutex_unlock((pthread_mutex_t *)(v94 + 1072));
      pthread_mutex_lock(v92);
      if (!*(_DWORD *)(v91 + 64))
      {
        v95 = *(_QWORD *)(v91 + 88) / 2;
        v96 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v91 + 48) + 16))(*(_QWORD *)(v91 + 48));
        v97 = v96 + v95;
        if (v96 == 0x8000000000000000)
          v97 = 0x8000000000000000;
        if (v96 == 0x7FFFFFFFFFFFFFFFLL)
          v97 = 0x7FFFFFFFFFFFFFFFLL;
        if (*(_BYTE *)(v91 + 208))
        {
          *(_QWORD *)(v91 + 200) = v97;
          v98 = *(_QWORD *)(v91 + 120);
          if (!v98)
            goto LABEL_123;
LABEL_122:
          v304.__r_.__value_.__r.__words[0] = v95;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v98 + 48))(v98, &v304);
          goto LABEL_123;
        }
        *(_BYTE *)(v91 + 208) = 1;
        *(_QWORD *)(v91 + 200) = v97;
        v98 = *(_QWORD *)(v91 + 120);
        if (v98)
          goto LABEL_122;
      }
LABEL_123:
      *(_DWORD *)(v91 + 64) = 1;
      pthread_mutex_unlock(v92);
      webrtc::RtpPacketHistory::SetStorePacketsStatus(*(_QWORD *)(v91 + 24), 1, 0x258uLL);
      v99 = *(_QWORD *)(v91 + 24);
      if (v99)
        v100 = v99 + 1016;
      else
        v100 = 0;
      v291 = *(void **)__p.__opaque;
      v292 = v100;
      v297 = a13;
      LOBYTE(v298) = *(_BYTE *)(v286 + 4);
      v301 = v52;
      (*(void (**)(std::string *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v52 + 16))(&v304, v52, "WebRTC-Video-EnableRetransmitAllLayers", 38);
      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      {
        v102 = v304.__r_.__value_.__l.__size_;
        if ((v304.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_400;
        v101 = (std::string *)v304.__r_.__value_.__r.__words[0];
        if (v304.__r_.__value_.__l.__size_)
        {
          if (!v304.__r_.__value_.__r.__words[0])
            goto LABEL_400;
        }
      }
      else
      {
        v101 = &v304;
        v102 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
      }
      if (v102 >= 8)
      {
        v103 = v101->__r_.__value_.__r.__words[0] == 0x64656C6261736944;
        if ((*((_BYTE *)&v304.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_133:
          HIBYTE(v298) = !v103;
          if (!v62)
            goto LABEL_138;
          goto LABEL_134;
        }
      }
      else
      {
        v103 = 0;
        if ((*((_BYTE *)&v304.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_133;
      }
      operator delete(v304.__r_.__value_.__l.__data_);
      HIBYTE(v298) = !v103;
      if (!v62)
      {
LABEL_138:
          goto LABEL_141;
        goto LABEL_139;
      }
LABEL_134:
      v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62) == 0;
        goto LABEL_141;
LABEL_139:
      if (*(_DWORD *)(a5 + 160) != -1)
      {
        v299 = *(_DWORD *)(a5 + 160);
        v300 = 1;
      }
LABEL_141:
      if (v62)
      {
        v293 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62);
        v294 = 1;
        v296 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 32))(v62);
      }
      if (v40)
        (**(void (***)(uint64_t))v40)(v40);
      v302 = v40;
      v303 = a17;
      v105 = operator new();
      webrtc::RTPSenderVideo::RTPSenderVideo(v105, (uint64_t)&v291);
      v107 = *(unint64_t **)(v290 + 144);
      v106 = *(_QWORD *)(v290 + 152);
      if ((unint64_t)v107 >= v106)
      {
        v109 = *v283;
        v110 = (char *)v107 - (char *)*v283;
        v111 = 0xAAAAAAAAAAAAAAABLL * (v110 >> 3) + 1;
        if (v111 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_402;
        v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - (_QWORD)v109) >> 3);
        if (2 * v112 > v111)
          v111 = 2 * v112;
        if (v112 >= 0x555555555555555)
          v113 = 0xAAAAAAAAAAAAAAALL;
        else
          v113 = v111;
        if (!v113)
          goto LABEL_400;
        if (v113 > 0xAAAAAAAAAAAAAAALL)
LABEL_403:
          std::__throw_bad_array_new_length[abi:sn180100]();
        v114 = 24 * v113;
        v115 = (char *)operator new(24 * v113);
        v116 = &v115[v114];
        v117 = (unint64_t *)&v115[8 * (v110 >> 3)];
        *v117 = v91;
        v117[1] = v105;
        v117[2] = v62;
        v108 = v117 + 3;
        if (v107 == (unint64_t *)v109)
        {
          v50 = v290;
          *(_QWORD *)(v290 + 136) = v117;
          *(_QWORD *)(v290 + 144) = v108;
          *(_QWORD *)(v290 + 152) = v116;
        }
        else
        {
          v118 = (char *)v107 - (char *)v109 - 24;
          v50 = v290;
          if (v118 < 0xD8
            || &v107[-3 * (((char *)(v107 - 3) - (char *)v109) / 0x18uLL) - 3] < v117
            && &v115[v110 - 24 + -24 * (((char *)(v107 - 3) - (char *)v109) / 0x18uLL)] < (char *)v107)
          {
            goto LABEL_171;
          }
          v119 = v118 / 0x18 + 1;
          v120 = &v117[-3 * (v119 & 0x1FFFFFFFFFFFFFFELL)];
          v121 = (double *)(v117 - 6);
          v122 = (const double *)(v107 - 6);
          v123 = v119 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v330 = vld3q_f64(v122);
            *((_OWORD *)v122 + 1) = 0uLL;
            *((_OWORD *)v122 + 2) = 0uLL;
            *(_OWORD *)v122 = 0uLL;
            v122 -= 6;
            vst3q_f64(v121, v330);
            v121 -= 6;
            v123 -= 2;
          }
          while (v123);
          v107 -= 3 * (v119 & 0x1FFFFFFFFFFFFFFELL);
          v117 = v120;
          if (v119 != (v119 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_171:
            v120 = v117;
            do
            {
              v124 = *(v107 - 3);
              v107 -= 3;
              *v107 = 0;
              *(v120 - 3) = v124;
              v120 -= 3;
              v125 = v107[1];
              v107[1] = 0;
              v120[1] = v125;
              v126 = v107[2];
              v107[2] = 0;
              v120[2] = v126;
            }
            while (v107 != (unint64_t *)v109);
          }
          v107 = *(unint64_t **)(v290 + 136);
          v127 = *(unint64_t **)(v290 + 144);
          *(_QWORD *)(v290 + 136) = v120;
          *(_QWORD *)(v290 + 144) = v108;
          *(_QWORD *)(v290 + 152) = v116;
          while (v127 != v107)
          {
            v128 = *(v127 - 1);
            *(v127 - 1) = 0;
            if (v128)
              (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
            v129 = *(v127 - 2);
            *(v127 - 2) = 0;
            if (v129)
              (*(void (**)(uint64_t))(*(_QWORD *)v129 + 32))(v129);
            v130 = (webrtc::ModuleRtpRtcpImpl2 *)*(v127 - 3);
            *(v127 - 3) = 0;
            if (v130)
            {
              webrtc::ModuleRtpRtcpImpl2::~ModuleRtpRtcpImpl2(v130);
              MEMORY[0x20BD0ADEC]();
            }
            v127 -= 3;
          }
        }
        v40 = v282;
        if (v107)
          operator delete(v107);
      }
      else
      {
        if (!v107)
          goto LABEL_400;
        *v107 = v91;
        v107[1] = v105;
        v108 = v107 + 3;
        v107[2] = v62;
        v50 = v290;
      }
      *(_QWORD *)(v50 + 144) = v108;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      ++v55;
      v53 = *(_QWORD *)a5;
      v56 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2;
      v52 = v288;
      if (v55 >= v56)
        goto LABEL_192;
    }
    v62 = 0;
    if ((*(_DWORD *)(a5 + 160) & 0x80000000) == 0 && (*(_DWORD *)(a5 + 156) & 0x80000000) == 0)
    {
      {
        v62 = operator new();
        *((_QWORD *)&v315 + 1) = webrtc::UlpfecGenerator::UlpfecGenerator(v62, *(_DWORD *)(a5 + 160), *(_DWORD *)(a5 + 156), a2);
        v63 = *(_QWORD *)a5;
        v64 = *(_QWORD *)(a5 + 8);
        v65 = (v64 - *(_QWORD *)a5) >> 2;
        if (v65 <= v55)
          goto LABEL_400;
        goto LABEL_85;
      }
      goto LABEL_83;
    }
    goto LABEL_84;
  }
LABEL_192:
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v325.__r_.__value_.__l.__data_);
  if (v318)
    (*(void (**)(uint64_t))(*(_QWORD *)v318 + 8))(v318);
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  webrtc::RtpConfig::RtpConfig(v50 + 160, a5);
  if (*(_BYTE *)(a5 + 148))
    v132 = 0;
  else
    v132 = webrtc::PayloadStringToCodecType(a5 + 120) | 0x100000000;
  *(_QWORD *)(v50 + 424) = v132;
  *(_QWORD *)(v50 + 432) = a9;
  *(_QWORD *)(v50 + 440) = 0;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(v50 + 32)
                                                                                           + 16))(&__p, *(_QWORD *)(v50 + 32), "WebRTC-Video-SimulcastIndependentFrameIds", 41);
  if (SHIBYTE(v308) < 0)
  {
    v134 = *(_QWORD *)__p.__opaque;
    if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0)
      goto LABEL_400;
    p_p = (pthread_mutexattr_t *)__p.__sig;
    if (*(_QWORD *)__p.__opaque)
    {
      if (!__p.__sig)
        goto LABEL_400;
    }
  }
  else
  {
    p_p = &__p;
    v134 = HIBYTE(v308);
  }
  if (v134 >= 7)
  {
    v136 = p_p->__sig;
    v137 = *(_DWORD *)((char *)&p_p->__sig + 3);
    v135 = v136 == 1650552389 && v137 == 1684368482;
    if ((v308 & 0x8000000000000000) == 0)
    {
LABEL_208:
      if (!v135)
        goto LABEL_228;
      goto LABEL_218;
    }
  }
  else
  {
    v135 = 0;
    if ((v308 & 0x8000000000000000) == 0)
      goto LABEL_208;
  }
  operator delete((void *)__p.__sig);
  if (!v135)
    goto LABEL_228;
LABEL_218:
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(v50 + 32)
                                                                                           + 16))(&__p, *(_QWORD *)(v50 + 32), "WebRTC-GenericDescriptorAuth", 28);
  if (SHIBYTE(v308) < 0)
  {
    v140 = *(_QWORD *)__p.__opaque;
    if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0)
      goto LABEL_400;
    v139 = (pthread_mutexattr_t *)__p.__sig;
    if (*(_QWORD *)__p.__opaque)
    {
      if (!__p.__sig)
        goto LABEL_400;
    }
  }
  else
  {
    v139 = &__p;
    v140 = HIBYTE(v308);
  }
  if (v140 >= 8)
  {
    LOBYTE(v135) = v139->__sig == 0x64656C6261736944;
    if ((v308 & 0x8000000000000000) == 0)
      goto LABEL_228;
  }
  else
  {
    LOBYTE(v135) = 0;
    if ((v308 & 0x8000000000000000) == 0)
      goto LABEL_228;
  }
  operator delete((void *)__p.__sig);
LABEL_228:
  *(_BYTE *)(v50 + 448) = v135;
  *(_OWORD *)(v50 + 456) = 0u;
  *(_OWORD *)(v50 + 472) = 0u;
  v285 = (_QWORD *)(v50 + 456);
  *(_DWORD *)(v50 + 516) = 0;
  *(_QWORD *)(v50 + 492) = 0;
  *(_OWORD *)(v50 + 500) = 0u;
  v142 = *(_QWORD *)a5;
  v141 = *(_QWORD *)(a5 + 8);
  *(_OWORD *)(v50 + 520) = 0u;
  *(_QWORD *)(v50 + 536) = 0;
  v143 = v141 - v142;
  if (v143)
  {
    if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFDLL)
      goto LABEL_402;
    v144 = v143 >> 2;
    v145 = 2 * v143;
    v146 = (char *)operator new(2 * v143);
    *(_QWORD *)(v50 + 520) = v146;
    v147 = &v146[8 * v144];
    *(_QWORD *)(v50 + 536) = v147;
    bzero(v146, v145);
    *(_QWORD *)(v50 + 528) = v147;
  }
  *(_QWORD *)(v50 + 544) = a8[6];
  *(_QWORD *)(v50 + 568) = 0;
  *(_QWORD *)(v50 + 560) = 0;
  v287 = (uint64_t **)(v50 + 560);
  *(_QWORD *)(v50 + 552) = v50 + 560;
  if (*(_BYTE *)(v50 + 41))
    (*(void (**)(_QWORD))(**(_QWORD **)(v50 + 432) + 216))(*(_QWORD *)(v50 + 432));
  v149 = *(unsigned int **)(v50 + 160);
  v148 = *(unsigned int **)(v50 + 168);
  if (v149 != v148)
  {
    v150 = (_QWORD *)(v276 + 8);
    __dst = *(unsigned int **)(v50 + 168);
    do
    {
      v151 = *v149;
      v152 = *v150;
      if (!*v150)
        goto LABEL_247;
      v153 = v150;
      do
      {
        v154 = *(_DWORD *)(v152 + 32);
        v155 = v154 >= v151;
        if (v154 >= v151)
          v156 = (uint64_t *)v152;
        else
          v156 = (uint64_t *)(v152 + 8);
        if (v155)
          v153 = (_QWORD *)v152;
        v152 = *v156;
      }
      while (*v156);
      if (v153 != v150 && v151 >= *((_DWORD *)v153 + 8))
      {
        v160 = (__int16 *)(v153 + 5);
        v161 = v153[6];
        if (*(_QWORD *)(v50 + 440) > v161)
          v161 = *(_QWORD *)(v50 + 440);
        *(_QWORD *)(v50 + 440) = v161;
        webrtc::RtpPayloadParams::RtpPayloadParams((uint64_t)&__p, v151, v160, *(_QWORD *)(v50 + 32));
        v157 = *(_QWORD *)(v50 + 464);
        v158 = *(_QWORD *)(v50 + 472);
        if (v157 >= v158)
        {
LABEL_254:
          v162 = 0x1B810ECF56BE69C9 * ((uint64_t)(v157 - *v285) >> 3);
          v163 = v162 + 1;
          if ((unint64_t)(v162 + 1) > 0x43B3D5AF9A723FLL)
            goto LABEL_402;
          v164 = 0x1B810ECF56BE69C9 * ((uint64_t)(v158 - *v285) >> 3);
          if (2 * v164 > v163)
            v163 = 2 * v164;
          if (v164 >= 0x21D9EAD7CD391FLL)
            v165 = 0x43B3D5AF9A723FLL;
          else
            v165 = v163;
          if (!v165)
            goto LABEL_400;
          v289 = v149;
          if (v165 > 0x43B3D5AF9A723FLL)
            goto LABEL_403;
          v166 = 968 * v165;
          v167 = (char *)operator new(968 * v165);
          v168 = &v167[v166];
          v169 = (uint64_t)&v167[968 * v162];
          webrtc::RtpPayloadParams::RtpPayloadParams(v169, (uint64_t)&__p);
          v170 = v169 + 968;
          v172 = *(char **)(v50 + 456);
          v171 = *(char **)(v50 + 464);
          if (v171 == v172)
          {
            *(_QWORD *)(v50 + 456) = v169;
            *(_QWORD *)(v50 + 464) = v170;
            *(_QWORD *)(v50 + 472) = v168;
          }
          else
          {
            v173 = 0;
            do
            {
              v182 = v169 + v173;
              v183 = (unint64_t *)(v169 + v173 - 968);
              v184 = &v171[v173];
              v185 = (unint64_t *)&v171[v173 - 968];
              *v183 = 0;
              if (*v185 >= 2)
                absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage,4ul,std::allocator<webrtc::FrameDependenciesCalculator::BufferUsage>>::InitFrom(v183, v185);
              v186 = (unint64_t *)(v182 - 736);
              *(_QWORD *)(v182 - 736) = 0;
              v187 = *((_QWORD *)v184 - 92);
              if (v187 >= 2)
              {
                if ((v187 & 1) != 0)
                {
                  absl::inlined_vector_internal::Storage<std::optional<long long>,4ul,std::allocator<std::optional<long long>>>::InitFrom(v186, (unint64_t *)v184 - 92);
                }
                else
                {
                  *v186 = v187;
                  v188 = (_OWORD *)(v169 + v173 - 728);
                  v189 = *(_OWORD *)&v171[v173 - 728];
                  v190 = *(_OWORD *)&v171[v173 - 712];
                  v191 = *(_OWORD *)&v171[v173 - 680];
                  v188[2] = *(_OWORD *)&v171[v173 - 696];
                  v188[3] = v191;
                  *v188 = v189;
                  v188[1] = v190;
                }
              }
              v192 = v169 + v173;
              v193 = &v171[v173];
              memcpy((void *)(v169 + v173 - 664), &v171[v173 - 664], 0x200uLL);
              *(_QWORD *)(v192 - 144) = 0;
              *(_QWORD *)(v192 - 136) = 0;
              *(_QWORD *)(v192 - 152) = 0;
              v195 = *(_BYTE **)&v171[v173 - 152];
              v194 = *(_BYTE **)&v171[v173 - 144];
              v196 = v194 - v195;
              if (v194 != v195)
              {
                if (v196 < 0)
                  goto LABEL_402;
                v174 = (char *)operator new(v194 - v195);
                *(_QWORD *)(v192 - 152) = v174;
                *(_QWORD *)(v192 - 144) = v174;
                v175 = &v174[64 * (v196 >> 6)];
                *(_QWORD *)(v192 - 136) = v175;
                memcpy(v174, v195, v196);
                *(_QWORD *)(v192 - 144) = v175;
              }
              v176 = *((_OWORD *)v193 - 8);
              v177 = *((_OWORD *)v193 - 7);
              v178 = *((_OWORD *)v193 - 5);
              *(_OWORD *)(v192 - 96) = *((_OWORD *)v193 - 6);
              *(_OWORD *)(v192 - 80) = v178;
              *(_OWORD *)(v192 - 128) = v176;
              *(_OWORD *)(v192 - 112) = v177;
              v179 = *((_OWORD *)v193 - 4);
              v180 = *((_OWORD *)v193 - 3);
              v181 = *((_OWORD *)v193 - 2);
              *(_OWORD *)(v192 - 22) = *(_OWORD *)(v193 - 22);
              *(_OWORD *)(v192 - 48) = v180;
              *(_OWORD *)(v192 - 32) = v181;
              *(_OWORD *)(v192 - 64) = v179;
              v173 -= 968;
            }
            while (&v171[v173] != v172);
            v171 = *(char **)(v290 + 456);
            v197 = *(char **)(v290 + 464);
            v198 = v169 + v173;
            v50 = v290;
            v170 = v169 + 968;
            *(_QWORD *)(v290 + 456) = v198;
            *(_QWORD *)(v290 + 464) = v169 + 968;
            *(_QWORD *)(v290 + 472) = v168;
            if (v197 != v171)
            {
              v199 = v197 - 968;
              v148 = __dst;
              v150 = (_QWORD *)(v276 + 8);
              v149 = v289;
              do
              {
                v200 = (void *)*((_QWORD *)v199 + 102);
                if (v200)
                {
                  *((_QWORD *)v199 + 103) = v200;
                  operator delete(v200);
                }
                if ((v199[232] & 1) != 0)
                  operator delete(*((void **)v199 + 30));
                if (*(_QWORD *)v199)
                  absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage,4ul,std::allocator<webrtc::FrameDependenciesCalculator::BufferUsage>>::DestroyContents(v199);
                v31 = v199 == v171;
                v199 -= 968;
              }
              while (!v31);
LABEL_287:
              if (v171)
                operator delete(v171);
              *(_QWORD *)(v50 + 464) = v170;
              v159 = v327;
              if (!v327)
                goto LABEL_291;
              goto LABEL_290;
            }
            v148 = __dst;
          }
          v150 = (_QWORD *)(v276 + 8);
          v149 = v289;
          goto LABEL_287;
        }
      }
      else
      {
LABEL_247:
        webrtc::RtpPayloadParams::RtpPayloadParams((uint64_t)&__p, v151, 0, *(_QWORD *)(v50 + 32));
        v157 = *(_QWORD *)(v50 + 464);
        v158 = *(_QWORD *)(v50 + 472);
        if (v157 >= v158)
          goto LABEL_254;
      }
      if (!v157)
        goto LABEL_400;
      *(_QWORD *)(v50 + 464) = webrtc::RtpPayloadParams::RtpPayloadParams(v157, (uint64_t)&__p) + 968;
      v159 = v327;
      if (!v327)
        goto LABEL_291;
LABEL_290:
      v328 = v159;
      operator delete(v159);
LABEL_291:
      if ((v325.__r_.__value_.__s.__data_[8] & 1) != 0)
        operator delete((void *)v325.__r_.__value_.__r.__words[2]);
      if (__p.__sig)
        absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage,4ul,std::allocator<webrtc::FrameDependenciesCalculator::BufferUsage>>::DestroyContents(&__p);
      ++v149;
    }
    while (v149 != v148);
  }
  v202 = *(_QWORD *)(v50 + 256);
  v201 = *(_QWORD *)(v50 + 264);
  if (v201 != v202 && *(_QWORD *)(v50 + 136) != *(_QWORD *)(v50 + 144))
  {
    v203 = 0;
    do
    {
      v204 = *(_QWORD *)(v50 + 136);
      v205 = *(_QWORD *)(v50 + 144);
      if (v204 != v205)
      {
        v206 = v202 + 32 * v203;
        v207 = *(_DWORD *)(v206 + 24);
        do
        {
          if (*(char *)(v206 + 23) < 0)
          {
            v208 = *(_QWORD *)(v206 + 8);
            if (v208 < 0)
              goto LABEL_400;
            v209 = *(_QWORD **)v206;
            if (v208 && v209 == 0)
              goto LABEL_400;
          }
          else
          {
            v208 = *(unsigned __int8 *)(v206 + 23);
            v209 = (_QWORD *)v206;
          }
          v211 = *(_QWORD *)(*(_QWORD *)v204 + 24);
          pthread_mutex_lock((pthread_mutex_t *)(v211 + 1072));
          v212 = webrtc::RtpHeaderExtensionMap::RegisterByUri((webrtc::RtpHeaderExtensionMap *)(v211 + 1152), v207, v209, v208);
          if (*(_BYTE *)(v211 + 1160))
            v213 = 0;
          else
            v213 = *(_BYTE *)(v211 + 1161) == 0;
          v215 = !v213 || *(_BYTE *)(v211 + 1157) != 0 || *(_BYTE *)(v211 + 1153) != 0;
          *(_BYTE *)(v211 + 1296) = v215;
          webrtc::RTPSender::UpdateHeaderSizes((webrtc::RTPSender *)(v211 + 1016));
          pthread_mutex_unlock((pthread_mutex_t *)(v211 + 1072));
          if ((v212 & 1) == 0)
            goto LABEL_401;
          v204 += 24;
        }
        while (v204 != v205);
        v50 = v290;
        v202 = *(_QWORD *)(v290 + 256);
        v201 = *(_QWORD *)(v290 + 264);
      }
      ++v203;
    }
    while (v203 < (v201 - v202) >> 5);
  }
  if (*(_QWORD *)(v50 + 568))
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_video_sender.cc", 682, "ssrc_to_rtp_module_.empty()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, (uint64_t)v22, v23, v24, v25, v275);
  v216 = *(_QWORD *)(v50 + 160);
  if (*(_QWORD *)(v50 + 168) != v216)
  {
    v217 = 0;
    v218 = (uint64_t *)(a3 + 8);
    while (1)
    {
      v219 = *(_QWORD *)(v50 + 136);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v50 + 144) - v219) >> 3) <= v217)
        break;
      v220 = *(_DWORD *)(v216 + 4 * v217);
      v221 = *(uint64_t **)(v219 + 24 * v217);
      v222 = *v218;
      if (*v218)
      {
        v223 = a3 + 8;
        do
        {
          v224 = *(_DWORD *)(v222 + 32);
          v225 = v224 >= v220;
          if (v224 >= v220)
            v226 = (uint64_t *)v222;
          else
            v226 = (uint64_t *)(v222 + 8);
          if (v225)
            v223 = v222;
          v222 = *v226;
        }
        while (*v226);
        if ((uint64_t *)v223 != v218 && v220 >= *(_DWORD *)(v223 + 32))
          (*(void (**)(uint64_t *, uint64_t))(*v221 + 168))(v221, v223 + 40);
      }
      v227 = v287;
      while (1)
      {
        v228 = *v227;
        v229 = v227;
        if (!*v227)
          break;
        while (1)
        {
          v227 = (uint64_t **)v228;
          v230 = *((_DWORD *)v228 + 8);
          if (v220 < v230)
            break;
          if (v230 >= v220)
            goto LABEL_324;
          v228 = v227[1];
          if (!v228)
          {
            v229 = v227 + 1;
            goto LABEL_344;
          }
        }
      }
LABEL_344:
      v231 = (uint64_t *)v227;
      v227 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v227 + 8) = v220;
      v227[5] = 0;
      *v227 = 0;
      v227[1] = 0;
      v227[2] = v231;
      v50 = v290;
      *v229 = (uint64_t *)v227;
      v232 = **(_QWORD **)(v290 + 552);
      v233 = (uint64_t *)v227;
      if (v232)
      {
        *(_QWORD *)(v290 + 552) = v232;
        v233 = *v229;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v290 + 560), v233);
      ++*(_QWORD *)(v290 + 568);
LABEL_324:
      v227[5] = v221;
      ++v217;
      v216 = *(_QWORD *)(v50 + 160);
      if (v217 >= (*(_QWORD *)(v50 + 168) - v216) >> 2)
        goto LABEL_346;
    }
LABEL_400:
    __break(1u);
LABEL_401:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_rtcp_impl2.cc", 563, "registered", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, (uint64_t)v22, v23, v24, v25, v275);
LABEL_402:
    abort();
  }
LABEL_346:
  v235 = *(_QWORD *)(v50 + 360);
  v234 = *(_QWORD *)(v50 + 368);
  if (v235 != v234)
  {
    v236 = 0;
    v237 = (uint64_t *)(a3 + 8);
    do
    {
      v238 = *(_QWORD *)(v50 + 136);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v50 + 144) - v238) >> 3) <= v236)
        goto LABEL_400;
      v239 = *v237;
      if (*v237)
      {
        v240 = *(_DWORD *)(v235 + 4 * v236);
        v241 = *(_QWORD *)(v238 + 24 * v236);
        v242 = a3 + 8;
        do
        {
          v243 = *(_DWORD *)(v239 + 32);
          v244 = v243 >= v240;
          if (v243 >= v240)
            v245 = (uint64_t *)v239;
          else
            v245 = (uint64_t *)(v239 + 8);
          if (v244)
            v242 = v239;
          v239 = *v245;
        }
        while (*v245);
        if ((uint64_t *)v242 != v237 && v240 >= *(_DWORD *)(v242 + 32))
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v241 + 176))(v241, v242 + 40);
          v235 = *(_QWORD *)(v50 + 360);
          v234 = *(_QWORD *)(v50 + 368);
        }
      }
      ++v236;
    }
    while (v236 < (v234 - v235) >> 2);
    v246 = *(_QWORD *)(v50 + 136);
    for (i = *(_QWORD *)(v50 + 144); v246 != i; v246 += 24)
    {
      webrtc::RTPSender::SetRtxPayloadType((webrtc::RTPSender *)(*(_QWORD *)(*(_QWORD *)v246 + 24) + 1016), *(_DWORD *)(v290 + 384), *(_DWORD *)(v290 + 304));
      v248 = *(_QWORD *)(*(_QWORD *)v246 + 24);
      pthread_mutex_lock((pthread_mutex_t *)(v248 + 1072));
      if (*(_BYTE *)(v248 + 1044) && *(_QWORD *)(v248 + 1288))
      {
        *(_DWORD *)(v248 + 1264) = 3;
      }
      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        rtc::webrtc_logging_impl::Log("\r\t", v249, v250, v251, v252, v253, v254, v255, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender.cc");
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v248 + 1072));
    }
    v50 = v290;
    if (*(_DWORD *)(v290 + 320) != -1 && *(_DWORD *)(v290 + 324) != -1)
    {
      v256 = *(uint64_t **)(v290 + 136);
      v257 = *(uint64_t **)(v290 + 144);
      while (v256 != v257)
      {
        v258 = *v256;
        v256 += 3;
        webrtc::RTPSender::SetRtxPayloadType((webrtc::RTPSender *)(*(_QWORD *)(v258 + 24) + 1016), *(_DWORD *)(v290 + 324), *(_DWORD *)(v290 + 320));
      }
    }
  }
  if (*(char *)(v50 + 231) < 0)
  {
    v259 = *v283;
    if (!*(_QWORD *)(v50 + 216))
      goto LABEL_391;
  }
  else
  {
    v259 = *v283;
    if (!*(_BYTE *)(v50 + 231))
      goto LABEL_391;
  }
  v260 = *(pthread_mutex_t ***)(v50 + 144);
  if (v259 != v260)
  {
    do
    {
      if (*(char *)(v50 + 231) < 0)
      {
        v261 = *(_QWORD *)(v50 + 216);
        if ((v261 & 0x8000000000000000) != 0)
          goto LABEL_400;
        v262 = *(__int128 **)(v50 + 208);
        if (v261 && v262 == 0)
          goto LABEL_400;
      }
      else
      {
        v261 = *(unsigned __int8 *)(v50 + 231);
        v262 = (__int128 *)(v50 + 208);
      }
      v264 = *(_QWORD *)&(*v259)->__opaque[16];
      if (v264)
        webrtc::RTPSender::SetMid(v264 + 1016, v262, v261);
      v259 += 3;
    }
    while (v259 != v260);
    v259 = *v283;
  }
LABEL_391:
  v265 = *(pthread_mutex_t ***)(v50 + 144);
  if (v259 != v265)
  {
    v266 = 0;
    v267 = (char **)(v50 + 392);
    while (1)
    {
      v268 = (char *)(v50 + 392);
      if (*(char *)(v50 + 415) < 0)
      {
        v268 = *v267;
        if (!*v267)
          goto LABEL_400;
      }
      v269 = strlen(v268);
      webrtc::RTCPSender::SetCNAME((uint64_t)&(*v259)->__opaque[24], (__int128 *)v268, v269);
      v270 = *v259;
      v271 = *(_QWORD *)(v50 + 240);
      v272 = *v259 + 2;
      pthread_mutex_lock(v272);
      *(_QWORD *)&v270[6].__opaque[8] = v271;
      pthread_mutex_unlock(v272);
      v273 = *(_QWORD *)&v270->__opaque[16];
      if (v273)
      {
        pthread_mutex_lock((pthread_mutex_t *)(v273 + 1072));
        *(_QWORD *)(v273 + 1144) = v271;
        pthread_mutex_unlock((pthread_mutex_t *)(v273 + 1072));
      }
      webrtc::RTCPSender::SetRtpClockRate((webrtc::RTCPSender *)&(*v259)->__opaque[24], *(char *)(v50 + 304), 90000);
      v266 |= v259[2] != 0;
      v259 += 3;
      if (v259 == v265)
        goto LABEL_399;
    }
  }
  v266 = 0;
LABEL_399:
  (*(void (**)(_QWORD, _QWORD, BOOL))(**(_QWORD **)(v50 + 120) + 24))(*(_QWORD *)(v50 + 120), v266 & 1, *(_DWORD *)(v50 + 312) > 0);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v50 + 120) + 16))(*(_QWORD *)(v50 + 120), v277);
  return v50;
}

void webrtc::RtpVideoSender::~RtpVideoSender(webrtc::RtpVideoSender *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  webrtc::ModuleRtpRtcpImpl2 *v21;
  uint64_t v22;

  *(_QWORD *)this = &off_24C0BE900;
  *((_QWORD *)this + 1) = &unk_24C0BE9C0;
  *((_QWORD *)this + 2) = &unk_24C0BE9E8;
  *((_QWORD *)this + 3) = &unk_24C0BEA18;
  v2 = (char *)this + 24;
  if (*((_BYTE *)this + 112))
  {
    *((_BYTE *)this + 112) = 0;
    v3 = *((_QWORD *)this + 17);
    if (*((_QWORD *)this + 18) != v3)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(v3 + v4);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 264))(v6, 0);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 280))(v6, 0);
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 54) + 48))(*((_QWORD *)this + 54), v6);
        ++v5;
        v3 = *((_QWORD *)this + 17);
        v4 += 24;
      }
      while (v5 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 18) - v3) >> 3));
    }
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 54) + 104))(*((_QWORD *)this + 54));
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 8))(v7, v2);
  }
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 70));
  v8 = (void *)*((_QWORD *)this + 65);
  if (v8)
  {
    *((_QWORD *)this + 66) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 62);
  if (v9)
    operator delete(v9);
  v10 = *((_QWORD *)this + 57);
  if (v10)
  {
    v11 = *((_QWORD *)this + 58);
    v12 = (void *)*((_QWORD *)this + 57);
    if (v11 != v10)
    {
      v13 = v11 - 968;
      do
      {
        v15 = *(void **)(v13 + 816);
        if (v15)
        {
          *(_QWORD *)(v13 + 824) = v15;
          operator delete(v15);
        }
        if ((*(_BYTE *)(v13 + 232) & 1) != 0)
          operator delete(*(void **)(v13 + 240));
        if (*(_QWORD *)v13)
          absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage,4ul,std::allocator<webrtc::FrameDependenciesCalculator::BufferUsage>>::DestroyContents((_QWORD *)v13);
        v14 = v13 == v10;
        v13 -= 968;
      }
      while (!v14);
      v12 = (void *)*((_QWORD *)this + 57);
    }
    *((_QWORD *)this + 58) = v10;
    operator delete(v12);
  }
  webrtc::RtpConfig::~RtpConfig((webrtc::RtpVideoSender *)((char *)this + 160));
  v16 = *((_QWORD *)this + 17);
  if (v16)
  {
    v17 = *((_QWORD *)this + 18);
    v18 = (void *)*((_QWORD *)this + 17);
    if (v17 != v16)
    {
      do
      {
        v19 = *(_QWORD *)(v17 - 8);
        *(_QWORD *)(v17 - 8) = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v20 = *(_QWORD *)(v17 - 16);
        *(_QWORD *)(v17 - 16) = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
        v21 = *(webrtc::ModuleRtpRtcpImpl2 **)(v17 - 24);
        *(_QWORD *)(v17 - 24) = 0;
        if (v21)
        {
          webrtc::ModuleRtpRtcpImpl2::~ModuleRtpRtcpImpl2(v21);
          MEMORY[0x20BD0ADEC]();
        }
        v17 -= 24;
      }
      while (v17 != v16);
      v18 = (void *)*((_QWORD *)this + 17);
    }
    *((_QWORD *)this + 18) = v16;
    operator delete(v18);
  }
  v22 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 48));
}

{
  webrtc::RtpVideoSender::~RtpVideoSender(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::RtpVideoSender::~RtpVideoSender(webrtc::RtpVideoSender *this)
{
  webrtc::RtpVideoSender::~RtpVideoSender((webrtc::RtpVideoSender *)((char *)this - 8));
}

{
  webrtc::RtpVideoSender::~RtpVideoSender((webrtc::RtpVideoSender *)((char *)this - 16));
}

{
  webrtc::RtpVideoSender::~RtpVideoSender((webrtc::RtpVideoSender *)((char *)this - 24));
}

{
  webrtc::RtpVideoSender::~RtpVideoSender((webrtc::RtpVideoSender *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::RtpVideoSender::~RtpVideoSender((webrtc::RtpVideoSender *)((char *)this - 16));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::RtpVideoSender::~RtpVideoSender((webrtc::RtpVideoSender *)((char *)this - 24));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtpVideoSender::SetSending(webrtc::RtpVideoSender *this, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (***v11)(_QWORD, void **, char *);
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  void *__p;
  void *v19;
  char *v20;

  v4 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  if (*((unsigned __int8 *)this + 112) != a2)
  {
    *((_BYTE *)this + 112) = a2;
    v5 = *((_QWORD *)this + 17);
    if (*((_QWORD *)this + 18) != v5)
    {
      v6 = 0;
      v7 = 0;
      if ((a2 & 1) != 0)
      {
        do
        {
          v8 = *(_QWORD *)(v5 + v6);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 264))(v8, 1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 280))(v8, 1);
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 54) + 40))(*((_QWORD *)this + 54), v8);
          ++v7;
          v5 = *((_QWORD *)this + 17);
          v6 += 24;
        }
        while (v7 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 18) - v5) >> 3));
      }
      else
      {
        do
        {
          v9 = *(_QWORD *)(v5 + v6);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 264))(v9, 0);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 280))(v9, 0);
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 54) + 48))(*((_QWORD *)this + 54), v9);
          ++v7;
          v5 = *((_QWORD *)this + 17);
          v6 += 24;
        }
        while (v7 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 18) - v5) >> 3));
      }
    }
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 54) + 104))(*((_QWORD *)this + 54));
    v11 = (void (***)(_QWORD, void **, char *))v10;
    if ((a2 & 1) != 0)
    {
      __p = 0;
      v19 = 0;
      v20 = 0;
      v13 = (_BYTE *)*((_QWORD *)this + 20);
      v12 = (_BYTE *)*((_QWORD *)this + 21);
      v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v12 - v13);
        v16 = &v15[4 * (v14 >> 2)];
        __p = v15;
        v20 = v16;
        memcpy(v15, v13, v14);
        v19 = v16;
      }
      (**v11)(v11, &__p, (char *)this + 24);
      if (__p)
      {
        v19 = __p;
        operator delete(__p);
      }
    }
    else
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 8))(v10, (char *)this + 24);
    }
  }
  return pthread_mutex_unlock(v4);
}

BOOL webrtc::RtpVideoSender::IsActive(webrtc::RtpVideoSender *this)
{
  pthread_mutex_t *v2;
  _BOOL8 v3;

  v2 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  if (*((_BYTE *)this + 112))
  {
    v3 = *((_QWORD *)this + 17) != *((_QWORD *)this + 18);
    pthread_mutex_unlock(v2);
    return v3;
  }
  else
  {
    pthread_mutex_unlock(v2);
    return 0;
  }
}

uint64_t webrtc::RtpVideoSender::OnEncodedImage(webrtc::RtpVideoSender *this, const webrtc::EncodedImage *a2, const webrtc::CodecSpecificInfo *a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  webrtc::RTPSenderVideo *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const webrtc::FrameDependencyStructure *v40;
  webrtc::RTPSenderVideo *v41;
  void **v42;
  void **v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _DWORD *v57;
  std::string *v59;
  const webrtc::VideoBitrateAllocation *v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE v63[16];
  char v64;
  void *__p;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  _BYTE v71[24];
  void *v72;
  char v73;
  void *v74;
  void **v75;
  void **v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 15) + 48))(*((_QWORD *)this + 15), *((_QWORD *)a2 + 18), *((unsigned int *)a2 + 6));
  v6 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  if (!*((_BYTE *)this + 112))
    goto LABEL_12;
  ++*((_QWORD *)this + 55);
  v7 = *(_QWORD *)((char *)a2 + 156);
  if ((v7 & 0xFF00000000) != 0)
    v8 = (int)v7;
  else
    v8 = 0;
  v9 = *((_QWORD *)this + 17);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 18) - v9) >> 3) <= v8)
    goto LABEL_90;
  v10 = *((_DWORD *)a2 + 38);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 24 * v8) + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v11 + 1072));
  v12 = *(_DWORD *)(v11 + 1192);
  pthread_mutex_unlock((pthread_mutex_t *)(v11 + 1072));
  v13 = *((_QWORD *)this + 17);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 18) - v13) >> 3) <= v8)
    goto LABEL_90;
  if (!webrtc::ModuleRtpRtcpImpl2::OnSendingRtpFrame(*(pthread_mutex_t **)(v13 + 24 * v8), *((_DWORD *)a2 + 38), *((_QWORD *)a2 + 2), *((_DWORD *)this + 76), *((_DWORD *)a2 + 6) == 3))
  {
LABEL_12:
    v19 = 0;
    v20 = 1;
LABEL_86:
    pthread_mutex_unlock(v6);
    return v19 | v20;
  }
  if (*((_BYTE *)a2 + 312))
  {
    v17 = *((_QWORD *)this + 17);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 18) - v17) >> 3) <= v8)
      goto LABEL_90;
    v18 = webrtc::ModuleRtpRtcpImpl2::ExpectedRetransmissionTime(*(webrtc::ModuleRtpRtcpImpl2 **)(v17 + 24 * v8));
    if (*((_DWORD *)a2 + 6) != 3)
    {
LABEL_64:
      if (*((_BYTE *)this + 448))
      {
        v45 = 0;
        v46 = 0;
      }
      else
      {
        v46 = *((_QWORD *)this + 55);
        v45 = 1;
      }
      v47 = *((_QWORD *)this + 17);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 18) - v47) >> 3) <= v8)
        goto LABEL_90;
      v48 = *((_QWORD *)this + 57);
      if (0x1B810ECF56BE69C9 * ((*((_QWORD *)this + 58) - v48) >> 3) <= v8)
        goto LABEL_90;
      v49 = (v12 + v10);
      v50 = *((_QWORD *)this + 53);
      v51 = *((unsigned int *)this + 76);
      v52 = *(_QWORD *)(v47 + 24 * v8 + 8);
      webrtc::RtpPayloadParams::GetRtpVideoHeader((absl::variant_internal *)(v48 + 968 * v8), (uint64_t)a2, (size_t)a3, v46, v45, v14, v15, v16, (uint64_t)v63);
      v53 = webrtc::RTPSenderVideo::SendEncodedImage(v52, v51, v50, v49, a2, (uint64_t)v63, v18);
      if (v70)
      {
        if ((v68 & 1) != 0)
        {
          operator delete(v69);
          if ((v66 & 1) == 0)
          {
LABEL_72:
            if ((v64 & 1) == 0)
              goto LABEL_74;
            goto LABEL_73;
          }
        }
        else if ((v66 & 1) == 0)
        {
          goto LABEL_72;
        }
        operator delete(v67);
        if ((v64 & 1) != 0)
LABEL_73:
          operator delete(__p);
      }
LABEL_74:
      v54 = *((_QWORD *)this + 68);
      if (!v54)
      {
LABEL_82:
        if (v53)
          v19 = v49 << 32;
        else
          v19 = 0;
        v20 = v53 ^ 1u;
        goto LABEL_86;
      }
      v55 = *((_QWORD *)this + 65);
      if (v8 >= (*((_QWORD *)this + 66) - v55) >> 3)
LABEL_90:
        __break(1u);
      v56 = *((_DWORD *)a2 + 6);
      v57 = (_DWORD *)(v55 + 8 * v8);
      if (v56 != 3)
      {
        if (v56 != 4)
          goto LABEL_80;
        v57 = (_DWORD *)(v55 + 8 * v8 + 4);
      }
      ++*v57;
LABEL_80:
      if (v8 < (uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
        goto LABEL_82;
      }
      goto LABEL_90;
    }
  }
  else
  {
    v18 = 0x7FFFFFFFFFFFFFFFLL;
    if (*((_DWORD *)a2 + 6) != 3)
      goto LABEL_64;
  }
  v21 = *((_QWORD *)a2 + 23);
  if (!a3)
  {
LABEL_25:
    if ((v21 & 0xFF00000000) != 0 && (int)v21 > 0)
      goto LABEL_64;
    goto LABEL_27;
  }
  if (!*((_BYTE *)a3 + 1848))
  {
    if (*(_DWORD *)a3 <= 4u && ((1 << *(_DWORD *)a3) & 0x13) != 0)
      goto LABEL_27;
    goto LABEL_25;
  }
  v22 = *((_QWORD *)a3 + 218);
  v23 = (char *)a3 + 1752;
  if ((v22 & 1) != 0)
    v23 = (char *)*((_QWORD *)a3 + 219);
  if (v22 >= 2)
  {
    v24 = v22 >> 1;
    v25 = (unsigned __int8 *)(v23 + 4);
    v26 = 8 * v24;
    do
    {
      v27 = *v25;
      v25 += 8;
      if (v27)
        goto LABEL_64;
      v26 -= 8;
    }
    while (v26);
  }
LABEL_27:
  v28 = *((_QWORD *)this + 17);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 18) - v28) >> 3) <= v8)
    goto LABEL_90;
  v29 = *(webrtc::RTPSenderVideo **)(v28 + 24 * v8 + 8);
  if (!a3 || !*((_BYTE *)a3 + 1984))
  {
    v36 = *((_QWORD *)this + 57);
    if (0x1B810ECF56BE69C9 * ((*((_QWORD *)this + 58) - v36) >> 3) <= v8)
      goto LABEL_90;
    webrtc::RtpPayloadParams::GenericStructure((webrtc::RtpPayloadParams *)(v36 + 968 * v8), a3, v71);
    v37 = *((_QWORD *)v29 + 143);
    if (v77)
    {
      if (v37)
      {
        pthread_mutex_lock((pthread_mutex_t *)(v37 + 8));
        v38 = *(_QWORD *)(v37 + 72);
        if (!v38)
          goto LABEL_91;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v38 + 8))(v38, v71);
        pthread_mutex_unlock((pthread_mutex_t *)(v37 + 8));
        if (!v77)
          goto LABEL_64;
        goto LABEL_47;
      }
      v40 = (const webrtc::FrameDependencyStructure *)v71;
      v41 = v29;
    }
    else
    {
      if (v37)
      {
        pthread_mutex_lock((pthread_mutex_t *)(v37 + 8));
        v39 = *(_QWORD *)(v37 + 72);
        if (!v39)
          goto LABEL_91;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 8))(v39, 0);
        pthread_mutex_unlock((pthread_mutex_t *)(v37 + 8));
        if (!v77)
          goto LABEL_64;
        goto LABEL_47;
      }
      v41 = v29;
      v40 = 0;
    }
    webrtc::RTPSenderVideo::SetVideoStructureInternal(v41, v40);
    if (!v77)
      goto LABEL_64;
LABEL_47:
    v42 = v75;
    if (!v75)
    {
LABEL_60:
      if ((v73 & 1) != 0)
        operator delete(v74);
      if ((v71[16] & 1) != 0)
        operator delete(v72);
      goto LABEL_64;
    }
    v43 = v76;
    v44 = v75;
    if (v76 == v75)
    {
LABEL_59:
      v76 = v42;
      operator delete(v44);
      goto LABEL_60;
    }
    while (1)
    {
      if ((*(_BYTE *)(v43 - 3) & 1) != 0)
      {
        operator delete(*(v43 - 2));
        if ((*(_BYTE *)(v43 - 6) & 1) == 0)
        {
LABEL_53:
          if ((*(_BYTE *)(v43 - 12) & 1) != 0)
            goto LABEL_57;
          goto LABEL_50;
        }
      }
      else if ((*(_BYTE *)(v43 - 6) & 1) == 0)
      {
        goto LABEL_53;
      }
      operator delete(*(v43 - 5));
      if ((*(_BYTE *)(v43 - 12) & 1) != 0)
LABEL_57:
        operator delete(*(v43 - 11));
LABEL_50:
      v43 -= 13;
      if (v43 == v42)
      {
        v44 = v75;
        goto LABEL_59;
      }
    }
  }
  v62 = v18;
  v30 = *((_QWORD *)v29 + 143);
  if (!v30)
  {
    webrtc::RTPSenderVideo::SetVideoStructureInternal(v29, (const webrtc::CodecSpecificInfo *)((char *)a3 + 1856));
    v18 = v62;
    goto LABEL_64;
  }
  pthread_mutex_lock((pthread_mutex_t *)(v30 + 8));
  v35 = *(_QWORD *)(v30 + 72);
  if (v35)
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v35 + 8))(v35, (char *)a3 + 1856);
    pthread_mutex_unlock((pthread_mutex_t *)(v30 + 8));
    v18 = v62;
    goto LABEL_64;
  }
LABEL_91:
  v59 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc", 235, "sender_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v31, v32, v33, v34, v61);
  return webrtc::RtpVideoSender::OnBitrateAllocationUpdated((webrtc::RtpVideoSender *)v59, v60);
}

uint64_t webrtc::RtpVideoSender::OnBitrateAllocationUpdated(webrtc::RtpVideoSender *this, const webrtc::VideoBitrateAllocation *a2)
{
  pthread_mutex_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  webrtc::RTCPSender *v14;
  const webrtc::VideoBitrateAllocation *v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char *v59;
  char *v60;

  v4 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  if (!*((_BYTE *)this + 112))
    return pthread_mutex_unlock(v4);
  v7 = *((_QWORD *)this + 17);
  v8 = *((_QWORD *)this + 18);
  if (v7 == v8)
    return pthread_mutex_unlock(v4);
  if (v8 - v7 == 24)
  {
    webrtc::RTCPSender::SetVideoBitrateAllocation((webrtc::RTCPSender *)(*(_QWORD *)v7 + 32), a2);
    return pthread_mutex_unlock(v4);
  }
  result = webrtc::VideoBitrateAllocation::GetSimulcastAllocations((uint64_t)a2, v5, v6, &v59);
  v10 = *((_QWORD *)this + 17);
  if (*((_QWORD *)this + 18) == v10)
  {
LABEL_12:
    if (v59)
    {
      v60 = v59;
      operator delete(v59);
    }
    return pthread_mutex_unlock(v4);
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  while (0x82FA0BE82FA0BE83 * ((v60 - v59) >> 2) > v13)
  {
    v15 = (const webrtc::VideoBitrateAllocation *)&v59[v12];
    v16 = *(_QWORD *)(v10 + v11);
    if (v59[v12 + 168])
    {
      v14 = (webrtc::RTCPSender *)(v16 + 32);
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v14 = (webrtc::RTCPSender *)(v16 + 32);
      v58 = 0;
      v15 = (const webrtc::VideoBitrateAllocation *)&v17;
    }
    result = webrtc::RTCPSender::SetVideoBitrateAllocation(v14, v15);
    ++v13;
    v10 = *((_QWORD *)this + 17);
    v12 += 172;
    v11 += 24;
    if (v13 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 18) - v10) >> 3))
      goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t webrtc::RtpVideoSender::OnVideoLayersAllocationUpdated(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  char v19;
  unint64_t *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  __int128 v26;
  int v27;
  int v28;
  uint64_t v29;
  pthread_mutex_t *v31;
  int v32;
  char v33;
  _QWORD v34[3];
  uint64_t v35;
  int v36;
  char v37;
  unint64_t v38;
  _QWORD v39[28];
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  int v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v31 = (pthread_mutex_t *)(a1 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  if (*(_BYTE *)(a1 + 112))
  {
    v4 = *(_QWORD *)(a1 + 136);
    v5 = *(_QWORD *)(a1 + 144);
    if (v4 != v5)
    {
      v6 = 0;
      v7 = &v38;
      v8 = (unint64_t *)(a2 + 2);
      while (1)
      {
        v36 = *a2;
        v37 = *((_BYTE *)a2 + 4);
        v38 = 0;
        if (*((_QWORD *)a2 + 1) >= 2uLL)
        {
          absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::InitFrom(v7, v8);
          v4 = *(_QWORD *)(a1 + 136);
          v5 = *(_QWORD *)(a1 + 144);
        }
        v36 = v6;
        if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) <= v6)
LABEL_37:
          __break(1u);
        v9 = *(_QWORD *)(v4 + 24 * v6 + 8);
        v32 = v36;
        v33 = v37;
        v10 = v38;
        if ((v38 & 1) == 0)
          break;
        v34[1] = v39[0];
        v34[2] = v39[1];
        v34[0] = v38 | 1;
        v38 = 0;
        webrtc::RTPSenderVideo::SetVideoLayersAllocation(v9, (uint64_t)&v32);
        if (v34[0])
          goto LABEL_16;
LABEL_17:
        v15 = *(_QWORD *)(a1 + 136);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 144) - v15) >> 3) <= v6)
          goto LABEL_37;
        v16 = *(_QWORD *)(v15 + 24 * v6);
        v17 = *v8;
        v18 = (int *)*((_QWORD *)a2 + 2);
        if ((*v8 & 1) == 0)
          v18 = a2 + 4;
        if (v17 >= 2)
        {
          v20 = v7;
          v21 = v18 + 12;
          v22 = 56 * (v17 >> 1);
          while (1)
          {
            v23 = *((_QWORD *)v21 - 6);
            v40 = v23;
            v41 = 0;
            v24 = *((_QWORD *)v21 - 5);
            if (v24 > 1)
            {
              if ((v24 & 1) != 0)
              {
                absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::InitFrom(&v41, (unint64_t *)v21 - 5);
                LODWORD(v23) = v40;
                v28 = *v21;
                v45 = *((_BYTE *)v21 + 4);
                v44 = v28;
                if ((v41 & 1) != 0)
                  operator delete((void *)v42);
              }
              else
              {
                v41 = *((_QWORD *)v21 - 5);
                v26 = *((_OWORD *)v21 - 1);
                v42 = *((_OWORD *)v21 - 2);
                v43 = v26;
                v27 = *v21;
                v45 = *((_BYTE *)v21 + 4);
                v44 = v27;
              }
            }
            else
            {
              v25 = *v21;
              v45 = *((_BYTE *)v21 + 4);
              v44 = v25;
            }
            if ((_DWORD)v23 == (_DWORD)v6)
              break;
            v21 += 14;
            v22 -= 56;
            if (!v22)
            {
              v19 = 0;
              goto LABEL_33;
            }
          }
          v19 = 1;
LABEL_33:
          v7 = v20;
          v8 = (unint64_t *)(a2 + 2);
        }
        else
        {
          v19 = 0;
        }
        v29 = *(_QWORD *)(v16 + 24);
        pthread_mutex_lock((pthread_mutex_t *)(v29 + 1072));
        *(_BYTE *)(v29 + 1136) = v19;
        pthread_mutex_unlock((pthread_mutex_t *)(v29 + 1072));
        if (v38)
          absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::DestroyContents(v7);
        ++v6;
        v4 = *(_QWORD *)(a1 + 136);
        v5 = *(_QWORD *)(a1 + 144);
        if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3))
          return pthread_mutex_unlock(v31);
      }
      if (v38 >= 2)
      {
        v11 = v38 >> 1;
        v12 = &v35;
        v13 = v39;
        do
        {
          v14 = *((_OWORD *)v13 + 1);
          *((_OWORD *)v12 - 1) = *(_OWORD *)v13;
          *(_OWORD *)v12 = v14;
          *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 2);
          *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 12);
          *((_BYTE *)v12 + 36) = *((_BYTE *)v13 + 52);
          v12 += 7;
          v13[1] = 0;
          v13 += 7;
          --v11;
        }
        while (v11);
        v10 = v38;
      }
      v34[0] = v10 & 0xFFFFFFFFFFFFFFFELL;
      webrtc::RTPSenderVideo::SetVideoLayersAllocation(v9, (uint64_t)&v32);
      if (!v34[0])
        goto LABEL_17;
LABEL_16:
      absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::DestroyContents(v34);
      goto LABEL_17;
    }
  }
  return pthread_mutex_unlock(v31);
}

void webrtc::RtpVideoSender::DeliverRtcp(webrtc::RtpVideoSender *this, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  const unsigned __int8 *v6;
  uint64_t v7;

  v3 = (uint64_t *)*((_QWORD *)this + 17);
  v4 = (uint64_t *)*((_QWORD *)this + 18);
  if (v3 != v4)
  {
    if (a3)
      v6 = a2;
    else
      v6 = 0;
    do
    {
      v7 = *v3;
      v3 += 3;
      webrtc::RTCPReceiver::IncomingPacket((webrtc::RTCPReceiver *)(v7 + 712), v6, a3);
    }
    while (v3 != v4);
  }
}

uint64_t webrtc::RtpVideoSender::OnNetworkAvailability(uint64_t this, char a2)
{
  pthread_mutex_t **v2;
  pthread_mutex_t **v3;
  uint64_t v4;
  pthread_mutex_t *v5;
  pthread_mutex_t *v6;
  pthread_mutex_t *v7;
  int v8;
  pthread_mutex_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(pthread_mutex_t ***)(this + 136);
  v3 = *(pthread_mutex_t ***)(this + 144);
  if (v2 != v3)
  {
    if ((a2 & 1) != 0)
    {
      v4 = this;
      while (1)
      {
        v7 = *v2;
        v8 = *(_DWORD *)(v4 + 232);
        v9 = *v2 + 2;
        pthread_mutex_lock(v9);
        if (!v8)
        {
          if (v7[3].__opaque[8])
            v7[3].__opaque[8] = 0;
          goto LABEL_7;
        }
        if (!LODWORD(v7[1].__sig))
        {
          v10 = *(_QWORD *)&v7[1].__opaque[16] / 2;
          v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v7->__opaque[40] + 16))(*(_QWORD *)&v7->__opaque[40]);
          v12 = v11 + v10;
          if (v11 == 0x8000000000000000)
            v12 = 0x8000000000000000;
          if (v11 == 0x7FFFFFFFFFFFFFFFLL)
            v12 = 0x7FFFFFFFFFFFFFFFLL;
          if (v7[3].__opaque[8])
          {
            *(_QWORD *)v7[3].__opaque = v12;
            v13 = *(_QWORD *)&v7[1].__opaque[48];
            if (!v13)
              goto LABEL_7;
LABEL_20:
            v14 = v10;
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v14);
            goto LABEL_7;
          }
          v7[3].__opaque[8] = 1;
          *(_QWORD *)v7[3].__opaque = v12;
          v13 = *(_QWORD *)&v7[1].__opaque[48];
          if (v13)
            goto LABEL_20;
        }
LABEL_7:
        LODWORD(v7[1].__sig) = v8;
        this = pthread_mutex_unlock(v9);
        v2 += 3;
        if (v2 == v3)
          return this;
      }
    }
    do
    {
      v5 = *v2;
      v6 = *v2 + 2;
      pthread_mutex_lock(v6);
      if (v5[3].__opaque[8])
        v5[3].__opaque[8] = 0;
      LODWORD(v5[1].__sig) = 0;
      this = pthread_mutex_unlock(v6);
      v2 += 3;
    }
    while (v2 != v3);
  }
  return this;
}

uint64_t *webrtc::RtpVideoSender::GetRtpStates@<X0>(uint64_t *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int128 v15;
  char *v16;
  char *v17;
  uint64_t **v18;
  unsigned int v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  char *v27;
  uint64_t **v28;
  unsigned int v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  pthread_mutex_t *v39;
  int v40;
  char v41;
  __int16 v42;
  char *v43;
  char *v44;
  uint64_t **v45;
  unsigned int v46;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;
  int64x2_t v50;
  __int128 v51;
  int v52;
  int64x2_t v53;
  char *v54;
  _OWORD v55[2];
  char v56;
  char v57;

  v2 = this;
  a2[1] = 0;
  a2[2] = 0;
  v54 = (char *)(a2 + 1);
  *a2 = (uint64_t *)(a2 + 1);
  v4 = this[20];
  if (this[21] != v4)
  {
    v5 = 0;
    v50 = vdupq_n_s64(0x8000000000000000);
    do
    {
      v7 = v2[17];
      if (0xAAAAAAAAAAAAAAABLL * ((v2[18] - v7) >> 3) <= v5)
        goto LABEL_42;
      v8 = *(_DWORD *)(v4 + 4 * v5);
      v9 = *(_QWORD *)(v7 + 24 * v5);
      v10 = *(_QWORD *)(v9 + 24);
      pthread_mutex_lock((pthread_mutex_t *)(v10 + 1072));
      v52 = *(_DWORD *)(v10 + 1192);
      v11 = *(_BYTE *)(v10 + 1249);
      this = (uint64_t *)pthread_mutex_unlock((pthread_mutex_t *)(v10 + 1072));
      v12 = *(_QWORD *)(v9 + 24);
      v13 = *(_WORD *)(v12 + 432);
      v14 = *(_DWORD *)(v12 + 440);
      v15 = *(_OWORD *)(v12 + 448);
      v16 = v54;
      while (1)
      {
        v17 = *(char **)v16;
        v18 = (uint64_t **)v16;
        if (!*(_QWORD *)v16)
          break;
        while (1)
        {
          v16 = v17;
          v19 = *((_DWORD *)v17 + 8);
          if (v8 < v19)
            break;
          if (v19 >= v8)
          {
            v23 = v52;
            goto LABEL_17;
          }
          v17 = (char *)*((_QWORD *)v16 + 1);
          if (!v17)
          {
            v18 = (uint64_t **)(v16 + 8);
            goto LABEL_13;
          }
        }
      }
LABEL_13:
      v51 = v15;
      v20 = v16;
      v16 = (char *)operator new(0x50uLL);
      *((_DWORD *)v16 + 8) = v8;
      *(_OWORD *)(v16 + 40) = 0u;
      *((_QWORD *)v16 + 9) = 0;
      *(int64x2_t *)(v16 + 56) = v50;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v20;
      *v18 = (uint64_t *)v16;
      v21 = (uint64_t *)**a2;
      v22 = (uint64_t *)v16;
      if (v21)
      {
        *a2 = v21;
        v22 = *v18;
      }
      this = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a2[1], v22);
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
      v23 = v52;
      v15 = v51;
LABEL_17:
      *((_WORD *)v16 + 20) = v13;
      *((_DWORD *)v16 + 11) = v23;
      *((_DWORD *)v16 + 12) = v14;
      *(_OWORD *)(v16 + 56) = v15;
      v16[72] = v11;
      v24 = v2[17];
      if (0xAAAAAAAAAAAAAAABLL * ((v2[18] - v24) >> 3) <= v5)
        goto LABEL_42;
      this = *(uint64_t **)(v24 + 24 * v5 + 16);
      if (this)
      {
        this = (*(_QWORD *(**)(_OWORD *__return_ptr))(*this + 72))(v55);
        if (v57)
        {
          v25 = *((_DWORD *)v2 + 83);
          v26 = v54;
          while (1)
          {
            v27 = *(char **)v26;
            v28 = (uint64_t **)v26;
            if (!*(_QWORD *)v26)
              break;
            while (1)
            {
              v26 = v27;
              v29 = *((_DWORD *)v27 + 8);
              if (v25 < v29)
                break;
              if (v29 >= v25)
                goto LABEL_4;
              v27 = (char *)*((_QWORD *)v26 + 1);
              if (!v27)
              {
                v28 = (uint64_t **)(v26 + 8);
                goto LABEL_26;
              }
            }
          }
LABEL_26:
          v30 = v26;
          v26 = (char *)operator new(0x50uLL);
          *((_DWORD *)v26 + 8) = v25;
          *(_OWORD *)(v26 + 40) = 0u;
          *((_QWORD *)v26 + 9) = 0;
          *(int64x2_t *)(v26 + 56) = v50;
          *(_QWORD *)v26 = 0;
          *((_QWORD *)v26 + 1) = 0;
          *((_QWORD *)v26 + 2) = v30;
          *v28 = (uint64_t *)v26;
          v31 = (uint64_t *)**a2;
          v32 = (uint64_t *)v26;
          if (v31)
          {
            *a2 = v31;
            v32 = *v28;
          }
          this = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a2[1], v32);
          a2[2] = (uint64_t *)((char *)a2[2] + 1);
LABEL_4:
          v6 = v55[1];
          *(_OWORD *)(v26 + 40) = v55[0];
          *(_OWORD *)(v26 + 56) = v6;
          v26[72] = v56;
        }
      }
      ++v5;
      v4 = v2[20];
    }
    while (v5 < (v2[21] - v4) >> 2);
  }
  v33 = v2[45];
  if (v2[46] != v33)
  {
    v34 = 0;
    v53 = vdupq_n_s64(0x8000000000000000);
    while (1)
    {
      v35 = v2[17];
      if (0xAAAAAAAAAAAAAAABLL * ((v2[18] - v35) >> 3) <= v34)
        break;
      v36 = *(_DWORD *)(v33 + 4 * v34);
      v37 = *(_QWORD *)(v35 + 24 * v34);
      v38 = *(_QWORD *)(v37 + 24);
      v39 = (pthread_mutex_t *)(v38 + 1072);
      pthread_mutex_lock((pthread_mutex_t *)(v38 + 1072));
      v40 = *(_DWORD *)(v38 + 1192);
      v41 = *(_BYTE *)(v38 + 1250);
      this = (uint64_t *)pthread_mutex_unlock(v39);
      v42 = *(_WORD *)(*(_QWORD *)(v37 + 24) + 434);
      v43 = v54;
      while (1)
      {
        v44 = *(char **)v43;
        v45 = (uint64_t **)v43;
        if (!*(_QWORD *)v43)
          break;
        while (1)
        {
          v43 = v44;
          v46 = *((_DWORD *)v44 + 8);
          if (v36 < v46)
            break;
          if (v46 >= v36)
            goto LABEL_31;
          v44 = (char *)*((_QWORD *)v43 + 1);
          if (!v44)
          {
            v45 = (uint64_t **)(v43 + 8);
            goto LABEL_39;
          }
        }
      }
LABEL_39:
      v47 = v43;
      v43 = (char *)operator new(0x50uLL);
      *((_DWORD *)v43 + 8) = v36;
      *(_OWORD *)(v43 + 40) = 0u;
      *((_QWORD *)v43 + 9) = 0;
      *(int64x2_t *)(v43 + 56) = v53;
      *(_QWORD *)v43 = 0;
      *((_QWORD *)v43 + 1) = 0;
      *((_QWORD *)v43 + 2) = v47;
      *v45 = (uint64_t *)v43;
      v48 = (uint64_t *)**a2;
      v49 = (uint64_t *)v43;
      if (v48)
      {
        *a2 = v48;
        v49 = *v45;
      }
      this = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a2[1], v49);
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
LABEL_31:
      *((_WORD *)v43 + 20) = v42;
      *((_DWORD *)v43 + 11) = v40;
      *((_DWORD *)v43 + 12) = 0;
      *(int64x2_t *)(v43 + 56) = v53;
      v43[72] = v41;
      ++v34;
      v33 = v2[45];
      if (v34 >= (v2[46] - v33) >> 2)
        return this;
    }
LABEL_42:
    __break(1u);
  }
  return this;
}

uint64_t webrtc::RtpVideoSender::GetRtpPayloadStates@<X0>(webrtc::RtpVideoSender *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t **v9;
  char *v10;
  unsigned int v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  pthread_mutex_t *v25;
  __int128 v26;
  uint64_t v27;

  v25 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  a2[1] = 0;
  v4 = a2 + 1;
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  v5 = *((_QWORD *)this + 57);
  v6 = *((_QWORD *)this + 58);
  while (v5 != v6)
  {
    v27 = *(_QWORD *)(v5 + 952);
    v26 = *(_OWORD *)(v5 + 936);
    v7 = *(_DWORD *)(v5 + 932);
    v8 = *v4;
    v9 = a2 + 1;
    v10 = (char *)(a2 + 1);
    if (*v4)
    {
      while (1)
      {
        while (1)
        {
          v10 = (char *)v8;
          v11 = *((_DWORD *)v8 + 8);
          if (v7 >= v11)
            break;
          v8 = *(uint64_t **)v10;
          v9 = (uint64_t **)v10;
          if (!*(_QWORD *)v10)
            goto LABEL_12;
        }
        if (v11 >= v7)
          break;
        v8 = (uint64_t *)*((_QWORD *)v10 + 1);
        if (!v8)
        {
          v9 = (uint64_t **)(v10 + 8);
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      v12 = v10;
      v10 = (char *)operator new(0x40uLL);
      *((_DWORD *)v10 + 8) = v7;
      *((_QWORD *)v10 + 6) = 0;
      *((_QWORD *)v10 + 7) = 0;
      *((_QWORD *)v10 + 5) = 0xFFFFLL;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = v12;
      *v9 = (uint64_t *)v10;
      v13 = (uint64_t *)**a2;
      v14 = (uint64_t *)v10;
      if (v13)
      {
        *a2 = v13;
        v14 = *v9;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a2[1], v14);
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
    }
    *(_OWORD *)(v10 + 40) = v26;
    *((_QWORD *)v10 + 7) = v27;
    v15 = (uint64_t *)*((_QWORD *)this + 55);
    v16 = *(_DWORD *)(v5 + 932);
    v17 = *v4;
    v18 = a2 + 1;
    v19 = a2 + 1;
    if (*v4)
    {
      while (1)
      {
        while (1)
        {
          v19 = (uint64_t **)v17;
          v20 = *((_DWORD *)v17 + 8);
          if (v16 >= v20)
            break;
          v17 = *v19;
          v18 = v19;
          if (!*v19)
            goto LABEL_22;
        }
        if (v20 >= v16)
          break;
        v17 = v19[1];
        if (!v17)
        {
          v18 = v19 + 1;
          goto LABEL_22;
        }
      }
    }
    else
    {
LABEL_22:
      v21 = (uint64_t *)v19;
      v19 = (uint64_t **)operator new(0x40uLL);
      *((_DWORD *)v19 + 8) = v16;
      v19[6] = 0;
      v19[7] = 0;
      v19[5] = (uint64_t *)0xFFFF;
      *v19 = 0;
      v19[1] = 0;
      v19[2] = v21;
      *v18 = (uint64_t *)v19;
      v22 = (uint64_t *)**a2;
      v23 = (uint64_t *)v19;
      if (v22)
      {
        *a2 = v22;
        v23 = *v18;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a2[1], v23);
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
    }
    v19[6] = v15;
    v5 += 968;
  }
  return pthread_mutex_unlock(v25);
}

uint64_t webrtc::RtpVideoSender::OnTransportOverheadChanged(webrtc::RtpVideoSender *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  pthread_mutex_t **v6;
  pthread_mutex_t **v7;
  pthread_mutex_t *v8;
  pthread_mutex_t *v9;
  uint64_t v10;

  v4 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  *((_QWORD *)this + 60) = a2;
  if ((unint64_t)(1500 - a2) >= *((_QWORD *)this + 30))
    v5 = *((_QWORD *)this + 30);
  else
    v5 = 1500 - a2;
  v7 = (pthread_mutex_t **)*((_QWORD *)this + 17);
  v6 = (pthread_mutex_t **)*((_QWORD *)this + 18);
  while (v7 != v6)
  {
    v8 = *v7;
    v9 = *v7 + 2;
    pthread_mutex_lock(v9);
    *(_QWORD *)&v8[6].__opaque[8] = v5;
    pthread_mutex_unlock(v9);
    v10 = *(_QWORD *)&v8->__opaque[16];
    if (v10)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v10 + 1072));
      *(_QWORD *)(v10 + 1144) = v5;
      pthread_mutex_unlock((pthread_mutex_t *)(v10 + 1072));
    }
    v7 += 3;
  }
  return pthread_mutex_unlock(v4);
}

void webrtc::RtpVideoSender::OnBitrateUpdated(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  pthread_mutex_t *v12;
  int v13;
  uint64_t v14;
  pthread_mutex_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  if (v6 == v7)
  {
    v10 = 0;
  }
  else
  {
    v8 = a3;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)v6 + 24);
      if (v11)
      {
        v12 = (pthread_mutex_t *)(v11 + 1072);
        pthread_mutex_lock((pthread_mutex_t *)(v11 + 1072));
        v13 = *(unsigned __int8 *)(v11 + 1136);
        pthread_mutex_unlock(v12);
        if (v13)
        {
          v14 = *(_QWORD *)(*(_QWORD *)v6 + 24);
          if (v14)
          {
            v15 = (pthread_mutex_t *)(v14 + 1072);
            pthread_mutex_lock((pthread_mutex_t *)(v14 + 1072));
            v14 = *(_QWORD *)(v14 + 1176);
            pthread_mutex_unlock(v15);
          }
          v10 += v14;
          ++v9;
        }
      }
      v6 += 24;
    }
    while (v6 != v7);
    if (v9 > 1)
      v10 /= v9;
    a3 = v8;
  }
  v16 = *(_QWORD *)(a1 + 480);
  v17 = v16 + v10;
  v18 = *(_QWORD *)(a1 + 240) + v16;
  v19 = *a2;
  if (*(_BYTE *)(a1 + 41))
  {
    v20 = 125 * v19;
    if (*(_BYTE *)(a1 + 40))
    {
      v21 = 1000;
      if (1000 * a3 > 1000)
        v21 = 1000 * a3;
      v22 = INFINITY;
      if (v18 != 0x7FFFFFFFFFFFFFFFLL)
        v22 = (double)v18;
      if (v18 == 0x8000000000000000)
        v22 = -INFINITY;
      v23 = v21 * (int)vcvtpd_s64_f64((double)(v20 / v21) / v22);
    }
    else
    {
      v23 = v20 / v18;
    }
    v24 = (unsigned __int128)((v23 + 999) * (__int128)0x20C49BA5E353F7CFLL) >> 64;
    v25 = (unsigned __int128)((uint64_t)(8000 * ((v24 >> 7) + ((unint64_t)v24 >> 63)) * v17 + 500)
                            * (__int128)(uint64_t)0xDF3B645A1CAC0831) >> 64;
    v26 = (v25 >> 7) + ((unint64_t)v25 >> 63) + v19;
    __asm { BR              X11 }
  }
  __asm { BR              X10 }
}

uint64_t sub_2087BCA18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, double a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, pthread_mutex_t *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  pthread_mutex_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  pthread_mutex_t *v52;
  int v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  pthread_mutex_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v71;
  pthread_mutex_t *v72;
  unint64_t v73;
  double v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  pthread_mutex_t *v86;
  void *v87[15];

  v41 = (int)a9;
  std::vector<BOOL>::vector(v87, v33 + 496);
  v42 = *(_QWORD *)(v40 + 24);
  v43 = v42 / 0x3E8uLL;
  if (v42 % 0x3E8uLL > 0x1F3)
    ++v43;
  if (-v42 % 0x3E8uLL <= 0x1F4)
    v44 = 0;
  else
    v44 = -1;
  if (v42 < 0)
    v45 = v44 - -v42 / 0x3E8uLL;
  else
    v45 = v43;
  *(_DWORD *)(v33 + 492) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, unint64_t))(*(_QWORD *)v37 + 40))(v37, v36, v35, v41, v87, v45);
  if (v87[0])
    operator delete(v87[0]);
  if (*(_BYTE *)(v33 + 128))
  {
    v82 = v34;
    v83 = v32;
    v81 = v35;
    v85 = (int *)v40;
    v86 = v39;
    v46 = *(_QWORD *)(v33 + 136);
    if (*(_QWORD *)(v33 + 144) != v46)
    {
LABEL_13:
      v47 = 0;
      v48 = 0;
      v49 = 0;
      while (1)
      {
        v51 = *(_QWORD *)(*(_QWORD *)(v46 + v47) + 24);
        if (v51
          && (v52 = (pthread_mutex_t *)(v51 + 1072),
              pthread_mutex_lock((pthread_mutex_t *)(v51 + 1072)),
              v53 = *(unsigned __int8 *)(v51 + 1136),
              result = pthread_mutex_unlock(v52),
              v53))
        {
          v55 = *(_QWORD *)(v33 + 136);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 144) - v55) >> 3) <= v48)
          {
            __break(1u);
            return result;
          }
          v56 = *(_QWORD *)(v55 + v47 + 8);
          v57 = (pthread_mutex_t *)(v56 + 784);
          pthread_mutex_lock((pthread_mutex_t *)(v56 + 784));
          v58 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v56 + 16) + 16))(*(_QWORD *)(v56 + 16));
          v59 = v58 / 0x3E8uLL;
          if (v58 % 0x3E8uLL > 0x1F3)
            ++v59;
          if (-v58 % 0x3E8uLL <= 0x1F4)
            v60 = 0;
          else
            v60 = -1;
          v61 = v60 - -v58 / 0x3E8uLL;
          if (v58 < 0)
            v62 = v61;
          else
            v62 = v59;
          v63 = webrtc::RateStatistics::Rate((webrtc::RateStatistics *)(v56 + 848), v62);
          if (v64)
            v65 = v63;
          else
            v65 = 0;
          pthread_mutex_unlock(v57);
          v50 = 0x7FFFFFFFFFFFFFFFLL;
          if (v49 != 0x7FFFFFFFFFFFFFFFLL && v65 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v50 = 0x8000000000000000;
            if (v65 != 0x8000000000000000 && v49 != 0x8000000000000000)
              v50 = v65 + v49;
          }
        }
        else
        {
          v50 = v49;
        }
        ++v48;
        v46 = *(_QWORD *)(v33 + 136);
        v47 += 24;
        v49 = v50;
        if (v48 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v33 + 144) - v46) >> 3))
          goto LABEL_40;
      }
    }
  }
  else
  {
    *(_DWORD *)(v33 + 492) = v36;
    v82 = v34;
    v83 = v32;
    v81 = v35;
    v85 = (int *)v40;
    v86 = v39;
    v46 = *(_QWORD *)(v33 + 136);
    if (*(_QWORD *)(v33 + 144) != v46)
      goto LABEL_13;
  }
  LODWORD(v50) = 0;
LABEL_40:
  v67 = *(_DWORD *)(v33 + 492);
  if (v67 >> 1 < v50)
    LODWORD(v50) = v67 >> 1;
  v68 = v67 - v50;
  *(_DWORD *)(v33 + 492) = v68;
  *(_QWORD *)(v33 + 504) = 0;
  if (*(_BYTE *)(v33 + 41))
  {
    v69 = v84 - v38;
    if (v38 == 0x7FFFFFFFFFFFFFFFLL || v84 == 0x8000000000000000)
      v69 = 0x8000000000000000;
    if (v38 == 0x8000000000000000)
      v69 = 0x7FFFFFFFFFFFFFFFLL;
    if (v84 == 0x7FFFFFFFFFFFFFFFLL)
      v69 = 0x7FFFFFFFFFFFFFFFLL;
    v71 = 125 * v68;
    v72 = v86;
    if (*(_BYTE *)(v33 + 40))
    {
      v73 = 1000;
      if (1000 * v81 > 1000)
        v73 = 1000 * v81;
      v74 = INFINITY;
      if (v69 != 0x7FFFFFFFFFFFFFFFLL)
        v74 = (double)v69;
      if (v69 == 0x8000000000000000)
        v74 = -INFINITY;
      v75 = v73 * (int)vcvtpd_s64_f64((double)(uint64_t)(v71 / v73) / v74);
    }
    else
    {
      v75 = v71 / v69;
    }
    v78 = (unsigned __int128)((v75 + 999) * (__int128)0x20C49BA5E353F7CFLL) >> 64;
    v79 = (unsigned __int128)((uint64_t)(v82 + 8000 * ((v78 >> 7) + ((unint64_t)v78 >> 63)) * v83)
                            * (__int128)0x20C49BA5E353F7CFLL) >> 64;
    v80 = (v79 >> 7) + (v79 >> 63);
    v77 = *v85;
    v76 = *v85 - v68;
    if (v76 >= v80)
      v76 = v80;
  }
  else
  {
    v76 = 0;
    v72 = v86;
    v77 = *v85;
  }
  *(_DWORD *)(v33 + 488) = v77 - v76 - v67;
  return pthread_mutex_unlock(v72);
}

uint64_t webrtc::RtpVideoSender::GetPayloadBitrateBps(webrtc::RtpVideoSender *this)
{
  return *((unsigned int *)this + 123);
}

uint64_t webrtc::RtpVideoSender::GetProtectionBitrateBps(webrtc::RtpVideoSender *this)
{
  return *((unsigned int *)this + 122);
}

void webrtc::RtpVideoSender::GetSentRtpPacketInfos(uint64_t a1@<X0>, int a2@<W1>, unsigned __int16 *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pthread_mutex_t **v6;
  pthread_mutex_t **v7;
  pthread_mutex_t *v11;
  pthread_mutex_t *v12;
  unsigned __int16 *v13;

  v6 = *(pthread_mutex_t ***)(a1 + 136);
  v7 = *(pthread_mutex_t ***)(a1 + 144);
  if (v6 == v7)
  {
LABEL_4:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  else
  {
    while (1)
    {
      v11 = *v6;
      v12 = *v6 + 2;
      pthread_mutex_lock(v12);
      LODWORD(v11) = *(_DWORD *)&v11->__opaque[36];
      pthread_mutex_unlock(v12);
      if ((_DWORD)v11 == a2)
        break;
      v6 += 3;
      if (v6 == v7)
        goto LABEL_4;
    }
    if (a4)
      v13 = a3;
    else
      v13 = 0;
    webrtc::RtpSenderEgress::GetSentRtpPacketInfos(*(_QWORD *)&(*v6)->__opaque[16] + 472, v13, a4, (unint64_t **)a5);
  }
}

uint64_t webrtc::RtpVideoSender::ProtectionRequest(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t *v6;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  webrtc::RtpSenderEgress *v16;
  Timestamp v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  int v23;
  int v24;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  v6 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v6 != i; *a5 += v18)
  {
    v19 = *(_QWORD *)(*v6 + 24);
    if (*(_BYTE *)(v19 + 904))
      *(_BYTE *)(v19 + 904) = 0;
    v13 = *a2;
    *(_DWORD *)(v19 + 888) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(v19 + 880) = v13;
    v14 = *a3;
    *(_DWORD *)(v19 + 900) = *((_DWORD *)a3 + 2);
    *(_QWORD *)(v19 + 892) = v14;
    *(_BYTE *)(v19 + 904) = 1;
    v15 = *v6;
    v6 += 3;
    v16 = (webrtc::RtpSenderEgress *)(*(_QWORD *)(v15 + 24) + 472);
    v17.var0 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 1208) + 16))(*(_QWORD *)(v15 + 1208));
    webrtc::RtpSenderEgress::GetSendRates(v16, v17, &v21);
    v18 = v23;
    *a4 += v22;
    *a6 += v24;
  }
  return 0;
}

uint64_t `non-virtual thunk to'webrtc::RtpVideoSender::ProtectionRequest(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t *v6;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  webrtc::RtpSenderEgress *v16;
  Timestamp v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  int v23;
  int v24;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  v6 = *(uint64_t **)(a1 + 120);
  for (i = *(uint64_t **)(a1 + 128); v6 != i; *a5 += v18)
  {
    v19 = *(_QWORD *)(*v6 + 24);
    if (*(_BYTE *)(v19 + 904))
      *(_BYTE *)(v19 + 904) = 0;
    v13 = *a2;
    *(_DWORD *)(v19 + 888) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(v19 + 880) = v13;
    v14 = *a3;
    *(_DWORD *)(v19 + 900) = *((_DWORD *)a3 + 2);
    *(_QWORD *)(v19 + 892) = v14;
    *(_BYTE *)(v19 + 904) = 1;
    v15 = *v6;
    v6 += 3;
    v16 = (webrtc::RtpSenderEgress *)(*(_QWORD *)(v15 + 24) + 472);
    v17.var0 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 1208) + 16))(*(_QWORD *)(v15 + 1208));
    webrtc::RtpSenderEgress::GetSendRates(v16, v17, &v21);
    v18 = v23;
    *a4 += v22;
    *a6 += v24;
  }
  return 0;
}

uint64_t webrtc::RtpVideoSender::SetRetransmissionMode(webrtc::RtpVideoSender *this, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  v6 = *((_QWORD *)this + 17);
  v5 = *((_QWORD *)this + 18);
  if (v6 != v5)
  {
    v7 = v5 - v6 - 24;
    v8 = *((_QWORD *)this + 17);
    if (v7 < 0x18)
      goto LABEL_10;
    v9 = v7 / 0x18 + 1;
    v8 = v6 + 24 * (v9 & 0x1FFFFFFFFFFFFFFELL);
    v10 = (uint64_t *)(v6 + 32);
    v11 = v9 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v12 = *(v10 - 3);
      v13 = *v10;
      v10 += 6;
      *(_DWORD *)(v12 + 40) = a2;
      *(_DWORD *)(v13 + 40) = a2;
      v11 -= 2;
    }
    while (v11);
    if (v9 != (v9 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_10:
      do
      {
        *(_DWORD *)(*(_QWORD *)(v8 + 8) + 40) = a2;
        v8 += 24;
      }
      while (v8 != v5);
    }
  }
  return pthread_mutex_unlock(v4);
}

uint64_t `non-virtual thunk to'webrtc::RtpVideoSender::SetRetransmissionMode(webrtc::RtpVideoSender *this, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (pthread_mutex_t *)((char *)this + 32);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 32));
  v6 = *((_QWORD *)this + 15);
  v5 = *((_QWORD *)this + 16);
  if (v6 != v5)
  {
    v7 = v5 - v6 - 24;
    v8 = *((_QWORD *)this + 15);
    if (v7 < 0x18)
      goto LABEL_10;
    v9 = v7 / 0x18 + 1;
    v8 = v6 + 24 * (v9 & 0x1FFFFFFFFFFFFFFELL);
    v10 = (uint64_t *)(v6 + 32);
    v11 = v9 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v12 = *(v10 - 3);
      v13 = *v10;
      v10 += 6;
      *(_DWORD *)(v12 + 40) = a2;
      *(_DWORD *)(v13 + 40) = a2;
      v11 -= 2;
    }
    while (v11);
    if (v9 != (v9 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_10:
      do
      {
        *(_DWORD *)(*(_QWORD *)(v8 + 8) + 40) = a2;
        v8 += 24;
      }
      while (v8 != v5);
    }
  }
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::RtpVideoSender::SetFecAllowed(webrtc::RtpVideoSender *this, char a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  *((_BYTE *)this + 128) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t `non-virtual thunk to'webrtc::RtpVideoSender::SetFecAllowed(webrtc::RtpVideoSender *this, char a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 40);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  *((_BYTE *)this + 120) = a2;
  return pthread_mutex_unlock(v4);
}

void webrtc::RtpVideoSender::OnPacketFeedbackVector(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 **v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t **v25;
  uint64_t **v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  unint64_t v47;
  __int128 v48;
  __int16 v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  BOOL v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t **v63;
  uint64_t *v64;
  void *v65;
  uint64_t *v66;
  uint64_t *v67;
  unsigned int v68;
  uint64_t **v69;
  uint64_t **v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  _OWORD *v89;
  uint64_t *v90;
  unint64_t v91;
  __int128 v92;
  __int16 v93;
  uint64_t **v94;
  uint64_t *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  BOOL v100;
  uint64_t *v101;
  uint64_t v102;
  unsigned __int16 *v103;
  unsigned __int16 *v104;
  webrtc::RTPSender *v105;
  unsigned int v106;
  uint64_t *v107;
  uint64_t **v108;
  uint64_t **v109;
  uint64_t v110;
  _QWORD *v111;
  unsigned int v112;
  _QWORD *v113;
  unsigned int v114;
  BOOL v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t **v120;
  uint64_t *v121;
  uint64_t **v122;
  uint64_t v123;
  unsigned __int8 **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t **v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t **v130;
  uint64_t *v131;
  uint64_t v132;

  v3 = a1;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 56))(*(_QWORD *)(a1 + 120)))
  {
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 48));
    v8 = *a2;
    v9 = a2[1];
    v10 = a2;
    if (*a2 != v9)
    {
      do
      {
        while (1)
        {
          v11 = *v8;
          v12 = *(_QWORD *)(v3 + 504);
          v13 = *(_QWORD *)(v3 + 512);
          if (v12 == v13 << 6)
          {
            if ((uint64_t)(v12 + 1) < 0)
              goto LABEL_180;
            v14 = v13 << 7;
            if (v14 <= (v12 & 0xFFFFFFFFFFFFFFC0) + 64)
              v14 = (v12 & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v12 <= 0x3FFFFFFFFFFFFFFELL)
              v15 = v14;
            else
              v15 = 0x7FFFFFFFFFFFFFFFLL;
            std::vector<BOOL>::reserve(v3 + 496, v15);
            v12 = *(_QWORD *)(v3 + 504);
          }
          *(_QWORD *)(v3 + 504) = v12 + 1;
          v16 = *(_QWORD *)(v3 + 496);
          v17 = v12 >> 6;
          v18 = 1 << v12;
          if (v11)
            break;
          *(_QWORD *)(v16 + 8 * v17) |= v18;
          v8 += 16;
          if (v8 == v9)
            goto LABEL_15;
        }
        *(_QWORD *)(v16 + 8 * v17) &= ~v18;
        v8 += 16;
      }
      while (v8 != v9);
    }
LABEL_15:
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 48));
    a2 = v10;
  }
  v19 = &v131;
  v131 = 0;
  v132 = 0;
  v130 = &v131;
  v20 = *a2;
  v21 = a2[1];
  v124 = a2;
  if (*a2 == v21)
  {
    v128 = 0;
    v129 = 0;
  }
  else
  {
    v126 = v3;
    do
    {
      if (*v20 && v20[8])
      {
        v23 = v131;
        v24 = *((_DWORD *)v20 + 1);
        v25 = v19;
        v26 = v19;
        if (v131)
        {
          while (1)
          {
            while (1)
            {
              v19 = (uint64_t **)v23;
              v27 = *((_DWORD *)v23 + 8);
              if (v24 >= v27)
                break;
              v23 = *v19;
              v25 = v19;
              if (!*v19)
                goto LABEL_31;
            }
            if (v27 >= v24)
              break;
            v23 = v19[1];
            if (!v23)
            {
              v25 = v19 + 1;
              goto LABEL_31;
            }
          }
        }
        else
        {
LABEL_31:
          v28 = (uint64_t *)v19;
          v19 = (uint64_t **)operator new(0x40uLL);
          *((_DWORD *)v19 + 8) = v24;
          v19[6] = 0;
          v19[7] = 0;
          v19[5] = 0;
          *v19 = 0;
          v19[1] = 0;
          v19[2] = v28;
          *v25 = (uint64_t *)v19;
          v29 = (uint64_t *)v19;
          if (*v130)
          {
            v130 = (uint64_t **)*v130;
            v29 = *v25;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v131, v29);
          ++v132;
        }
        v31 = (char *)v19[6];
        v30 = v19[7];
        if (v31 < (char *)v30)
        {
          if (!v31)
            goto LABEL_178;
          *(_WORD *)v31 = *((_WORD *)v20 + 6);
          v22 = (uint64_t *)(v31 + 2);
        }
        else
        {
          v32 = v19[5];
          v33 = v31 - (char *)v32;
          if (v31 - (char *)v32 <= -3)
            goto LABEL_180;
          v34 = v33 >> 1;
          v35 = (char *)v30 - (char *)v32;
          if (v35 <= (v33 >> 1) + 1)
            v36 = v34 + 1;
          else
            v36 = v35;
          v100 = v35 >= 0x7FFFFFFFFFFFFFFELL;
          v37 = 0x7FFFFFFFFFFFFFFFLL;
          if (!v100)
            v37 = v36;
          if (!v37)
          {
LABEL_178:
            __break(1u);
            goto LABEL_179;
          }
          if (v37 < 0)
LABEL_181:
            std::__throw_bad_array_new_length[abi:sn180100]();
          v38 = 2 * v37;
          v39 = operator new(2 * v37);
          v40 = (uint64_t *)&v39[2 * v34];
          *(_WORD *)v40 = *((_WORD *)v20 + 6);
          v22 = (uint64_t *)((char *)v40 + 2);
          if (v31 != (char *)v32)
          {
            v41 = v31 - (char *)v32 - 2;
            if (v41 < 0x1E)
              goto LABEL_184;
            if ((unint64_t)(&v31[-(v33 & 0xFFFFFFFFFFFFFFFELL)] - v39) < 0x20)
              goto LABEL_184;
            v42 = (v41 >> 1) + 1;
            v43 = 2 * (v42 & 0xFFFFFFFFFFFFFFF0);
            v44 = &v31[-v43];
            v40 = (uint64_t *)((char *)v40 - v43);
            v45 = &v39[2 * v34 - 16];
            v46 = v31 - 16;
            v47 = v42 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v48 = *(_OWORD *)v46;
              *(v45 - 1) = *((_OWORD *)v46 - 1);
              *v45 = v48;
              v45 -= 2;
              v46 -= 32;
              v47 -= 16;
            }
            while (v47);
            v31 = v44;
            if (v42 != (v42 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_184:
              do
              {
                v49 = *((_WORD *)v31 - 1);
                v31 -= 2;
                *((_WORD *)v40 - 1) = v49;
                v40 = (uint64_t *)((char *)v40 - 2);
              }
              while (v31 != (char *)v32);
            }
          }
          v19[5] = v40;
          v19[6] = v22;
          v19[7] = (uint64_t *)&v39[v38];
          if (v32)
            operator delete(v32);
        }
        v19[6] = v22;
        v19 = v26;
        v3 = v126;
      }
      v20 += 16;
    }
    while (v20 != v21);
    v50 = *v124;
    v51 = v124[1];
    v128 = 0;
    v129 = 0;
    v127 = &v128;
    if (v50 != v51)
    {
      do
      {
        if (!*v50 && (v50[8] ? (v52 = v50[14] == 0) : (v52 = 0), v52))
        {
          v67 = v128;
          v68 = *((_DWORD *)v50 + 1);
          v69 = &v128;
          v70 = &v128;
          if (v128)
          {
            while (1)
            {
              while (1)
              {
                v70 = (uint64_t **)v67;
                v71 = *((_DWORD *)v67 + 8);
                if (v68 >= v71)
                  break;
                v67 = *v70;
                v69 = v70;
                if (!*v70)
                  goto LABEL_97;
              }
              if (v71 >= v68)
                break;
              v67 = v70[1];
              if (!v67)
              {
                v69 = v70 + 1;
                goto LABEL_97;
              }
            }
          }
          else
          {
LABEL_97:
            v72 = (uint64_t *)v70;
            v70 = (uint64_t **)operator new(0x40uLL);
            *((_DWORD *)v70 + 8) = v68;
            v70[6] = 0;
            v70[7] = 0;
            v70[5] = 0;
            *v70 = 0;
            v70[1] = 0;
            v70[2] = v72;
            *v69 = (uint64_t *)v70;
            v73 = (uint64_t *)v70;
            if (*v127)
            {
              v127 = (uint64_t **)*v127;
              v73 = *v69;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v128, v73);
            ++v129;
          }
          v75 = v70[6];
          v74 = v70[7];
          if (v75 >= v74)
          {
            v76 = v70[5];
            v77 = (char *)v75 - (char *)v76;
            if ((char *)v75 - (char *)v76 <= -3)
              goto LABEL_180;
            v78 = v77 >> 1;
            v79 = (char *)v74 - (char *)v76;
            if (v79 <= (v77 >> 1) + 1)
              v80 = v78 + 1;
            else
              v80 = v79;
            v100 = v79 >= 0x7FFFFFFFFFFFFFFELL;
            v81 = 0x7FFFFFFFFFFFFFFFLL;
            if (!v100)
              v81 = v80;
            if (!v81)
              goto LABEL_178;
            if (v81 < 0)
              goto LABEL_181;
            v125 = 2 * v81;
            v82 = operator new(2 * v81);
            v83 = (uint64_t *)&v82[2 * v78];
            *(_WORD *)v83 = *((_WORD *)v50 + 6);
            v84 = (uint64_t *)((char *)v83 + 2);
            if (v75 != v76)
            {
              v85 = (char *)v75 - (char *)v76 - 2;
              if (v85 < 0x1E)
                goto LABEL_185;
              if ((unint64_t)((char *)v75 - (v77 & 0xFFFFFFFFFFFFFFFELL) - v82) < 0x20)
                goto LABEL_185;
              v86 = (v85 >> 1) + 1;
              v87 = 2 * (v86 & 0xFFFFFFFFFFFFFFF0);
              v88 = (uint64_t *)((char *)v75 - v87);
              v83 = (uint64_t *)((char *)v83 - v87);
              v89 = &v82[2 * v78 - 16];
              v90 = v75 - 2;
              v91 = v86 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v92 = *(_OWORD *)v90;
                *(v89 - 1) = *((_OWORD *)v90 - 1);
                *v89 = v92;
                v89 -= 2;
                v90 -= 4;
                v91 -= 16;
              }
              while (v91);
              v75 = v88;
              if (v86 != (v86 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_185:
                do
                {
                  v93 = *((_WORD *)v75 - 1);
                  v75 = (uint64_t *)((char *)v75 - 2);
                  *((_WORD *)v83 - 1) = v93;
                  v83 = (uint64_t *)((char *)v83 - 2);
                }
                while (v75 != v76);
              }
            }
            v70[5] = v83;
            v70[6] = v84;
            v70[7] = (uint64_t *)&v82[v125];
            if (v76)
              operator delete(v76);
            v70[6] = v84;
          }
          else
          {
            if (!v75)
              goto LABEL_178;
            *(_WORD *)v75 = *((_WORD *)v50 + 6);
            v70[6] = (uint64_t *)((char *)v75 + 2);
          }
        }
        else
        {
          if (!v50[8])
            goto LABEL_178;
          if (v128)
          {
            v53 = *((_DWORD *)v50 + 1);
            v54 = (uint64_t *)&v128;
            v55 = v128;
            do
            {
              v56 = v55;
              v57 = v54;
              v58 = *((_DWORD *)v55 + 8);
              v59 = (uint64_t **)(v55 + 1);
              if (v58 >= v53)
                v54 = v55;
              else
                ++v55;
              v55 = (uint64_t *)*v55;
            }
            while (v55);
            if (v54 != (uint64_t *)&v128)
            {
              v60 = v58 >= v53 ? v56 : v57;
              if (v53 >= *((_DWORD *)v60 + 8))
              {
                if (v58 < v53)
                  v59 = (uint64_t **)(v57 + 1);
                v61 = *v59;
                v62 = v54;
                if (*v59)
                {
                  do
                  {
                    v63 = (uint64_t **)v61;
                    v61 = (uint64_t *)*v61;
                  }
                  while (v61);
                }
                else
                {
                  do
                  {
                    v63 = (uint64_t **)v62[2];
                    v52 = *v63 == v62;
                    v62 = (uint64_t *)v63;
                  }
                  while (!v52);
                }
                if (v127 == (uint64_t **)v54)
                  v127 = v63;
                --v129;
                std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v128, v54);
                if (v58 >= v53)
                  v64 = v56;
                else
                  v64 = v57;
                v65 = (void *)v64[5];
                if (v65)
                {
                  if (v58 >= v53)
                    v66 = v56;
                  else
                    v66 = v57;
                  v66[6] = (uint64_t)v65;
                  operator delete(v65);
                }
                operator delete(v54);
              }
            }
          }
        }
        v50 += 16;
      }
      while (v50 != v51);
      v94 = v127;
      if (v127 != &v128)
      {
        v95 = (uint64_t *)(v3 + 560);
        while (1)
        {
          v96 = *v95;
          if (!*v95)
            break;
          v97 = *((_DWORD *)v94 + 8);
          v98 = v3 + 560;
          do
          {
            v99 = *(_DWORD *)(v96 + 32);
            v100 = v99 >= v97;
            if (v99 >= v97)
              v101 = (uint64_t *)v96;
            else
              v101 = (uint64_t *)(v96 + 8);
            if (v100)
              v98 = v96;
            v96 = *v101;
          }
          while (*v101);
          if ((uint64_t *)v98 == v95 || v97 < *(_DWORD *)(v98 + 32))
            break;
          v102 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v98 + 40) + 320))(*(_QWORD *)(v98 + 40));
          v103 = (unsigned __int16 *)v94[5];
          v104 = (unsigned __int16 *)v94[6];
          if (v103 != v104)
          {
            v105 = (webrtc::RTPSender *)v102;
            do
            {
              v106 = *v103++;
              webrtc::RTPSender::ReSendPacket(v105, v106);
            }
            while (v103 != v104);
          }
          v107 = v94[1];
          if (v107)
          {
            do
            {
              v108 = (uint64_t **)v107;
              v107 = (uint64_t *)*v107;
            }
            while (v107);
          }
          else
          {
            do
            {
              v108 = (uint64_t **)v94[2];
              v52 = *v108 == (uint64_t *)v94;
              v94 = v108;
            }
            while (!v52);
          }
          v94 = v108;
          if (v108 == &v128)
            goto LABEL_145;
        }
LABEL_179:
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_video_sender.cc", 951, "it != ssrc_to_rtp_module_.end()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v4, v5, v6, v7, v123);
LABEL_180:
        abort();
      }
    }
  }
LABEL_145:
  v109 = v130;
  if (v130 != &v131)
  {
    v110 = *(_QWORD *)(v3 + 560);
    if (v110)
    {
      v111 = (_QWORD *)(v3 + 560);
LABEL_148:
      v112 = *((_DWORD *)v109 + 8);
      v113 = v111;
      do
      {
        v114 = *(_DWORD *)(v110 + 32);
        v115 = v114 >= v112;
        if (v114 >= v112)
          v116 = (uint64_t *)v110;
        else
          v116 = (uint64_t *)(v110 + 8);
        if (v115)
          v113 = (_QWORD *)v110;
        v110 = *v116;
      }
      while (*v116);
      if (v113 != v111 && v112 >= *((_DWORD *)v113 + 8))
      {
        v117 = (char *)v109[6] - (char *)v109[5];
        if (v117)
          v118 = v109[5];
        else
          v118 = 0;
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)v113[5] + 408))(v113[5], v118, v117 >> 1);
      }
      while (1)
      {
        v119 = v109[1];
        if (v119)
        {
          do
          {
            v120 = (uint64_t **)v119;
            v119 = (uint64_t *)*v119;
          }
          while (v119);
        }
        else
        {
          do
          {
            v120 = (uint64_t **)v109[2];
            v52 = *v120 == (uint64_t *)v109;
            v109 = v120;
          }
          while (!v52);
        }
        if (v120 == &v131)
          break;
        v110 = *v111;
        v109 = v120;
        if (*v111)
          goto LABEL_148;
      }
    }
    else
    {
      do
      {
        v121 = v109[1];
        if (v121)
        {
          do
          {
            v122 = (uint64_t **)v121;
            v121 = (uint64_t *)*v121;
          }
          while (v121);
        }
        else
        {
          do
          {
            v122 = (uint64_t **)v109[2];
            v52 = *v122 == (uint64_t *)v109;
            v109 = v122;
          }
          while (!v52);
        }
        v109 = v122;
      }
      while (v122 != &v131);
    }
  }
  std::__tree<std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::__map_value_compare<cricket::ContentGroup const*,std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::less<cricket::ContentGroup const*>,true>,std::allocator<std::__value_type<cricket::ContentGroup const*,std::vector<int>>>>::destroy(v128);
  std::__tree<std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::__map_value_compare<cricket::ContentGroup const*,std::__value_type<cricket::ContentGroup const*,std::vector<int>>,std::less<cricket::ContentGroup const*>,true>,std::allocator<std::__value_type<cricket::ContentGroup const*,std::vector<int>>>>::destroy(v131);
}

void `non-virtual thunk to'webrtc::RtpVideoSender::OnPacketFeedbackVector(uint64_t a1, unsigned __int8 **a2)
{
  webrtc::RtpVideoSender::OnPacketFeedbackVector(a1 - 24, a2);
}

uint64_t webrtc::RtpVideoSender::SetEncodingData(webrtc::RtpVideoSender *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 15) + 32))(*((_QWORD *)this + 15), a2, a3, a4, *((_QWORD *)this + 30));
}

uint64_t webrtc::`anonymous namespace'::ShouldDisableRedAndUlpfec(int a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int *p_p;
  unint64_t v8;
  _BOOL8 v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  size_t v28;
  void **v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int *v35;
  unint64_t v36;
  BOOL v37;
  int v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *__p;
  size_t v57;
  unint64_t v58;

  v6 = *(_DWORD *)(a2 + 152);
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a3 + 16))(&__p, a3, "WebRTC-DisableUlpFecExperiment", 30);
  if (SHIBYTE(v58) < 0)
  {
    v8 = v57;
    if ((v57 & 0x8000000000000000) != 0)
      goto LABEL_72;
    p_p = (int *)__p;
    if (v57)
    {
      if (!__p)
        goto LABEL_72;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v8 = HIBYTE(v58);
  }
  if (v8 >= 7)
  {
    v10 = *p_p;
    v11 = *(int *)((char *)p_p + 3);
    v9 = v10 == 1650552389 && v11 == 1684368482;
    if ((v58 & 0x8000000000000000) != 0)
      goto LABEL_16;
  }
  else
  {
    v9 = 0;
    if ((v58 & 0x8000000000000000) != 0)
LABEL_16:
      operator delete(__p);
  }
  if (v9 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_video_sender.cc");
  if (a1)
  {
    if ((*(_DWORD *)(a2 + 156) & 0x80000000) == 0 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_video_sender.cc");
    v9 = 1;
  }
  if (v6 >= 1 && (*(_DWORD *)(a2 + 156) & 0x80000000) == 0)
  {
    v27 = (void **)(a2 + 120);
    if (*(char *)(a2 + 143) < 0)
    {
      v28 = *(_QWORD *)(a2 + 128);
      if ((v28 & 0x8000000000000000) != 0)
        goto LABEL_72;
      v27 = (void **)*v27;
      if (v28)
      {
        if (!v27)
          goto LABEL_72;
      }
      if (v28 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_73;
    }
    else
    {
      v28 = *(unsigned __int8 *)(a2 + 143);
    }
    if (v28 > 0x16)
    {
      v31 = (v28 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v31 = v28 | 7;
      v32 = v31 + 1;
      v29 = (void **)operator new(v31 + 1);
      v57 = v28;
      v58 = v32 | 0x8000000000000000;
      __p = v29;
      v30 = (void **)((char *)v29 + v28);
      if (v29 > v27)
        goto LABEL_40;
    }
    else
    {
      HIBYTE(v58) = v28;
      v29 = &__p;
      v30 = (void **)((char *)&__p + v28);
      if (&__p > v27)
        goto LABEL_40;
    }
    if (v30 <= v27)
    {
LABEL_40:
      if (v28)
        memmove(v29, v27, v28);
      *(_BYTE *)v30 = 0;
      v33 = webrtc::PayloadStringToCodecType((uint64_t)&__p);
      v34 = v33;
      if (SHIBYTE(v58) < 0)
      {
        operator delete(__p);
        if ((v34 - 1) < 2)
          goto LABEL_67;
      }
      else if ((v33 - 1) < 2)
      {
        goto LABEL_67;
      }
      if (v34)
        goto LABEL_64;
      (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a3 + 16))(&__p, a3, "WebRTC-GenericPictureId", 23);
      if ((SHIBYTE(v58) & 0x80000000) == 0)
      {
        v35 = (int *)&__p;
        v36 = HIBYTE(v58);
        goto LABEL_52;
      }
      v36 = v57;
      if ((v57 & 0x8000000000000000) == 0)
      {
        v35 = (int *)__p;
        if (!v57 || __p)
        {
LABEL_52:
          if (v36 >= 7)
          {
            v38 = *v35;
            v39 = *(int *)((char *)v35 + 3);
            v37 = v38 == 1650552389 && v39 == 1684368482;
            if ((v58 & 0x8000000000000000) == 0)
            {
LABEL_63:
              if (v37)
                goto LABEL_67;
LABEL_64:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                rtc::webrtc_logging_impl::Log("\r\t", v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_video_sender.cc");
              v9 = 1;
              goto LABEL_67;
            }
          }
          else
          {
            v37 = 0;
            if ((v58 & 0x8000000000000000) == 0)
              goto LABEL_63;
          }
          operator delete(__p);
          goto LABEL_63;
        }
      }
    }
LABEL_72:
    __break(1u);
LABEL_73:
    abort();
  }
LABEL_67:
  if ((*(_DWORD *)(a2 + 160) ^ *(_DWORD *)(a2 + 156)) < 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v48, v49, v50, v51, v52, v53, v54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_video_sender.cc");
    return 1;
  }
  return v9;
}

uint64_t webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::RequestKeyFrame(uint64_t this)
{
  *(_BYTE *)(this + 48) = 1;
  return this;
}

void webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::SendNack(uint64_t a1, char **a2, char a3)
{
  std::vector<short>::__insert_with_size[abi:sn180100]<short const*,short const*>(a1 + 56, *(char **)(a1 + 64), *a2, a2[1], (a2[1] - *a2) >> 1);
  if ((a3 & 1) == 0)
    webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::SendBufferedRtcpFeedback((__n128 *)a1);
}

void webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::SendBufferedRtcpFeedback(__n128 *this)
{
  int v2;
  void *v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  __n128 v10;
  void *v11;
  __n128 v12;

  v2 = this[3].n128_u8[0];
  this[3].n128_u8[0] = 0;
  v3 = (void *)this[3].n128_u64[1];
  v11 = v3;
  v4 = this[4];
  this[3].n128_u64[1] = 0;
  this[4].n128_u64[0] = 0;
  v12 = v4;
  this[4].n128_u64[1] = 0;
  if (this[5].n128_u8[6])
  {
    v5 = this[5].n128_u16[0];
    v6 = this[5].n128_u16[1];
    v7 = this[5].n128_u8[4];
    this[5].n128_u8[6] = 0;
    if (v2)
      v8 = 0;
    else
      v8 = v3 == (void *)v4.n128_u64[0];
    v9 = !v8;
    v10 = v4;
    (*(void (**)(unint64_t, uint64_t, uint64_t, BOOL, uint64_t))(*(_QWORD *)this[2].n128_u64[1] + 16))(this[2].n128_u64[1], v5, v6, v7 != 0, v9);
    v4 = v10;
  }
  if (v2)
  {
    (**(void (***)(unint64_t, __n128))this[1].n128_u64[1])(this[1].n128_u64[1], v4);
  }
  else if (v3 != (void *)v4.n128_u64[0])
  {
    (**(void (***)(unint64_t, void **, uint64_t))this[2].n128_u64[0])(this[2].n128_u64[0], &v11, 1);
    v3 = v11;
  }
  if (v3)
  {
    v12.n128_u64[0] = (unint64_t)v3;
    operator delete(v3);
  }
}

void `non-virtual thunk to'webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::SendNack(uint64_t a1, char **a2, char a3)
{
  std::vector<short>::__insert_with_size[abi:sn180100]<short const*,short const*>(a1 + 48, *(char **)(a1 + 56), *a2, a2[1], (a2[1] - *a2) >> 1);
  if ((a3 & 1) == 0)
    webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::SendBufferedRtcpFeedback((__n128 *)(a1 - 8));
}

uint64_t webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::SendLossNotification(uint64_t this, int a2, int a3, int a4)
{
  *(_DWORD *)(this + 80) = a2 | (a3 << 16);
  *(_BYTE *)(this + 86) = 1;
  *(_WORD *)(this + 84) = a4 != 0;
  return this;
}

uint64_t `non-virtual thunk to'webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::SendLossNotification(uint64_t this, int a2, int a3, int a4)
{
  *(_DWORD *)(this + 64) = a2 | (a3 << 16);
  *(_BYTE *)(this + 70) = 1;
  *(_WORD *)(this + 68) = a4 != 0;
  return this;
}

uint64_t webrtc::RtpVideoStreamReceiver2::RtpVideoStreamReceiver2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t *a11, uint64_t a12, uint64_t *a13, uint64_t *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  int v32;
  unint64_t v33;
  pthread_mutex_t *v34;
  pthread_mutex_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *sig;
  unsigned int v46;
  uint8x8_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  rtc::Thread *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  BOOL v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t (**v93)();
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v102[2];
  pthread_mutexattr_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[29];
  uint64_t v116;
  _QWORD v117[3];
  int v118;
  char v119;
  char v120;
  char v121;
  char v122;
  void *__p;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;

  v19 = a2;
  v127 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = &unk_24C0BEB28;
  v21 = a1 + 8;
  *(_QWORD *)(a1 + 24) = &unk_24C0BEB78;
  v22 = a1 + 24;
  *(_QWORD *)(a1 + 32) = &unk_24C0BEBA0;
  *(_QWORD *)a1 = &off_24C0BEAC8;
  *(_QWORD *)(a1 + 16) = &unk_24C0BEB50;
  *(_QWORD *)(a1 + 40) = &unk_24C0BEBC8;
  *(_QWORD *)(a1 + 64) = a15;
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 48) = &unk_24C0BEBF0;
  *(_QWORD *)(a1 + 56) = &unk_24C0BEC18;
  v99 = a1 + 56;
  *(_QWORD *)(a1 + 80) = a3;
  *(_QWORD *)(a1 + 88) = a7;
  *(_QWORD *)(a1 + 96) = a6;
  *(_QWORD *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 112) = 1056964608;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 128;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 160;
  *(_QWORD *)(a1 + 168) = a1 + 160;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 100;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 208;
  *(_QWORD *)(a1 + 216) = a1 + 208;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 272) = 0x8000000000000000;
  *(_QWORD *)(a1 + 280) = off_24C0B4170;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 335) = 6;
  if (a1 + 312 <= (unint64_t)"max_ms" && a1 + 318 > (unint64_t)"max_ms")
    goto LABEL_92;
  strcpy((char *)(a1 + 312), "max_ms");
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 280) = &unk_24C0B4110;
  *(_QWORD *)(a1 + 340) = 0;
  *(_QWORD *)(a1 + 352) = off_24C0B4170;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 407) = 6;
  if (a1 + 384 <= (unint64_t)"min_ms" && a1 + 390 > (unint64_t)"min_ms")
    goto LABEL_92;
  v100 = a1 + 32;
  v97 = a1 + 48;
  v98 = a1 + 40;
  strcpy((char *)(a1 + 384), "min_ms");
  *(_BYTE *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 352) = &unk_24C0B4110;
  *(_QWORD *)(a1 + 412) = 0;
  *(_QWORD *)(a1 + 424) = a8;
  if (*(_DWORD *)(a7 + 56) == -1)
  {
    v28 = 0;
    v30 = -1;
    v29 = a7;
  }
  else
  {
    v96 = a1 + 24;
    v23 = *(_DWORD *)(a7 + 32);
    v24 = *(_DWORD *)(a7 + 52);
    v25 = operator new();
    v26 = v23;
    v27 = v24;
    v19 = a2;
    v22 = v96;
    webrtc::UlpfecReceiver::UlpfecReceiver(v25, v26, v27, v21, a3);
    a8 = *(_QWORD *)(a1 + 424);
    v29 = *(_QWORD *)(a1 + 88);
    v30 = *(_DWORD *)(v29 + 56);
  }
  *(_QWORD *)(a1 + 432) = v28;
  *(_DWORD *)(a1 + 440) = v30;
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a7 + 72);
  *(_BYTE *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = -1;
  v31 = *(_BYTE *)(v29 + 48);
  v32 = *(_DWORD *)(v29 + 36);
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v112 = 0u;
  v113 = 0;
  memset(v115, 0, sizeof(v115));
  v117[2] = 0;
  v116 = 0;
  v117[0] = 0;
  *(_DWORD *)((char *)v117 + 7) = 0;
  v124 = 0;
  v125 = 0;
  __p = 0;
  v126 = 0;
  LOWORD(v103.__sig) = 256;
  *(_QWORD *)v103.__opaque = a3;
  v104 = a8;
  v105 = a4;
  v109 = a5;
  v110 = a9;
  v111 = a10;
  v118 = v32;
  v122 = v31;
  v114 = a16;
  v33 = operator new();
  v34 = (pthread_mutex_t *)webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(v33, (uint64_t)&v103);
  *(_QWORD *)(a1 + 472) = v34;
  v35 = v34 + 2;
  pthread_mutex_lock(v34 + 2);
  if (!*(_DWORD *)(v33 + 64))
  {
    v36 = *(_QWORD *)(v33 + 88) / 2;
    v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v33 + 48) + 16))(*(_QWORD *)(v33 + 48));
    v38 = v37 + v36;
    if (v37 == 0x8000000000000000)
      v38 = 0x8000000000000000;
    if (v37 == 0x7FFFFFFFFFFFFFFFLL)
      v38 = 0x7FFFFFFFFFFFFFFFLL;
    if (!*(_BYTE *)(v33 + 208))
      *(_BYTE *)(v33 + 208) = 1;
    *(_QWORD *)(v33 + 200) = v38;
    v39 = *(_QWORD *)(v33 + 120);
    if (v39)
    {
      v102[0] = v36;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v39 + 48))(v39, v102);
    }
  }
  *(_DWORD *)(v33 + 64) = 1;
  pthread_mutex_unlock(v35);
  if (SHIBYTE(v125) < 0)
    operator delete(__p);
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  *(_QWORD *)(a1 + 480) = a11;
  *(_QWORD *)(a1 + 488) = a12;
  v40 = *(_QWORD *)(a1 + 88);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(v40 + 49);
  *(_QWORD *)(a1 + 504) = &off_24C0BEA40;
  *(_QWORD *)(a1 + 512) = &unk_24C0BEA78;
  *(_QWORD *)(a1 + 520) = &unk_24C0BEAA0;
  *(_QWORD *)(a1 + 528) = v22;
  *(_QWORD *)(a1 + 536) = v100;
  *(_QWORD *)(a1 + 544) = a1;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 590) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  v41 = *(_QWORD *)(a1 + 64);
  if (*(_DWORD *)(v40 + 40))
  {
    v42 = *(_QWORD *)(a1 + 80);
    v43 = operator new();
    v44 = webrtc::NackRequester::NackRequester(v43, v19, a11, v42, a1 + 512, a1 + 504, v41);
    v41 = *(_QWORD *)(a1 + 64);
  }
  else
  {
    v44 = 0;
  }
  *(_QWORD *)(a1 + 592) = v44;
  *(_QWORD *)(a1 + 600) = 0;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v41 + 16))(&v103, v41, "WebRTC-PacketBufferMaxSize", 26);
  LODWORD(v102[0]) = 2048;
  if (SHIBYTE(v104) < 0)
  {
    if (!*(_QWORD *)v103.__opaque)
      goto LABEL_36;
    sig = (const char *)v103.__sig;
LABEL_29:
    if (sscanf(sig, "%d", v102) == 1)
    {
      v46 = v102[0];
      if (SLODWORD(v102[0]) >= 1)
      {
        v47 = (uint8x8_t)vcnt_s8((int8x8_t)LODWORD(v102[0]));
        v47.i16[0] = vaddlv_u8(v47);
        if (v47.i32[0] < 2u)
        {
          if ((SHIBYTE(v104) & 0x80000000) == 0)
            goto LABEL_39;
LABEL_37:
          operator delete((void *)v103.__sig);
          goto LABEL_39;
        }
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v48, v49, v50, v51, v52, v53, v54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc");
LABEL_36:
    v46 = 2048;
    if ((SHIBYTE(v104) & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_37;
  }
  if (HIBYTE(v104))
  {
    sig = (const char *)&v103;
    goto LABEL_29;
  }
  v46 = 2048;
LABEL_39:
  *(_QWORD *)(a1 + 608) = v46;
  *(_DWORD *)(a1 + 616) = 0;
  v55 = (char *)operator new(0x1000uLL);
  *(_QWORD *)(a1 + 624) = v55;
  v56 = v55 + 4096;
  *(_QWORD *)(a1 + 640) = v55 + 4096;
  bzero(v55, 0x1000uLL);
  *(_QWORD *)(a1 + 632) = v56;
  *(_BYTE *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 650) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 656) = a1 + 664;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 680) = a1 + 688;
  *(_BYTE *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 728) = a1 + 736;
  v57 = (void *)operator new[]();
  bzero(v57, 0xFA0uLL);
  *(_QWORD *)(a1 + 752) = v57;
  *(_QWORD *)(a1 + 760) = -1;
  *(_QWORD *)(a1 + 768) = 0;
  *(_BYTE *)(a1 + 776) = 0;
  *(_BYTE *)(a1 + 778) = 0;
  *(_QWORD *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 808) = 0x8000000000000000;
  v58 = operator new();
  *(_DWORD *)v58 = -1;
  *(_QWORD *)(v58 + 8) = 0;
  v59 = (void *)operator new();
  bzero(v59, 0x12E98uLL);
  *(_QWORD *)(v58 + 16) = v59;
  *(_QWORD *)(a1 + 816) = v58;
  *(_BYTE *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 828) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 840) = a1 + 848;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 864) = a1 + 872;
  *(_QWORD *)(a1 + 904) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 888) = a1 + 896;
  *(_QWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 912) = a1 + 920;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 936) = a1 + 944;
  *(_WORD *)(a1 + 960) = -1;
  *(_BYTE *)(a1 + 962) = 0;
  *(_BYTE *)(a1 + 964) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_BYTE *)(a1 + 972) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_BYTE *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_BYTE *)(a1 + 1028) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1104) = a3;
  pthread_mutexattr_init(&v103);
  pthread_mutexattr_setpolicy_np(&v103, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1112), &v103);
  pthread_mutexattr_destroy(&v103);
  *(_QWORD *)(a1 + 1176) = 0x8000000000000000;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1216) = 0;
  *(_BYTE *)(a1 + 1224) = 0;
  *(_BYTE *)(a1 + 1232) = 0;
  *(_BYTE *)(a1 + 1330) = 0;
  *(_QWORD *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1313) = 0u;
  *(_QWORD *)(a1 + 1336) = a1 + 1344;
  *(_QWORD *)(a1 + 1376) = 0;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_QWORD *)(a1 + 1384) = 0x8000000000000000;
  *(_BYTE *)(a1 + 1392) = 0;
  v60 = *(_QWORD **)(a1 + 96);
  if (v60)
    webrtc::PacketRouter::AddReceiveRtpModule(v60, *(_QWORD *)(a1 + 472), 0);
  v61 = *(_QWORD *)(a1 + 472);
  v62 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 44);
  pthread_mutex_lock((pthread_mutex_t *)(v61 + 128));
  if (v62)
  {
    if (!*(_DWORD *)(v61 + 64))
    {
      v63 = *(_QWORD *)(v61 + 88) / 2;
      v64 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v61 + 48) + 16))(*(_QWORD *)(v61 + 48));
      v65 = v64 + v63;
      if (v64 == 0x8000000000000000)
        v65 = 0x8000000000000000;
      if (v64 == 0x7FFFFFFFFFFFFFFFLL)
        v65 = 0x7FFFFFFFFFFFFFFFLL;
      if (!*(_BYTE *)(v61 + 208))
        *(_BYTE *)(v61 + 208) = 1;
      *(_QWORD *)(v61 + 200) = v65;
      v66 = *(_QWORD *)(v61 + 120);
      if (v66)
      {
        v103.__sig = v63;
        (*(void (**)(uint64_t, pthread_mutexattr_t *))(*(_QWORD *)v66 + 48))(v66, &v103);
      }
    }
  }
  else if (*(_BYTE *)(v61 + 208))
  {
    *(_BYTE *)(v61 + 208) = 0;
  }
  *(_DWORD *)(v61 + 64) = v62;
  pthread_mutex_unlock((pthread_mutex_t *)(v61 + 128));
  v67 = *(_QWORD *)(a1 + 472);
  v68 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 32);
  pthread_mutex_lock((pthread_mutex_t *)(v67 + 128));
  *(_DWORD *)(v67 + 240) = v68;
  pthread_mutex_unlock((pthread_mutex_t *)(v67 + 128));
  pthread_mutex_lock((pthread_mutex_t *)(v67 + 808));
  *(_QWORD *)(v67 + 880) = 0;
  *(_DWORD *)(v67 + 872) = v68;
  pthread_mutex_unlock((pthread_mutex_t *)(v67 + 808));
  v69 = *(_QWORD *)(a1 + 88);
  if (*(int *)(v69 + 40) >= 1)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 424) + 40))(*(_QWORD *)(a1 + 424), *(unsigned int *)(v69 + 32), 450);
  v102[0] = a1 + 280;
  v102[1] = a1 + 352;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 64)
                                                                                           + 16))(&v103, *(_QWORD *)(a1 + 64), "WebRTC-ForcePlayoutDelay", 24);
  if (SHIBYTE(v104) < 0)
  {
    v70 = *(_QWORD *)v103.__opaque;
    if ((*(_QWORD *)v103.__opaque & 0x8000000000000000) != 0)
      goto LABEL_92;
    v71 = (char *)v103.__sig;
    if (*(_QWORD *)v103.__opaque)
    {
      if (!v103.__sig)
        goto LABEL_92;
    }
  }
  else
  {
    v70 = HIBYTE(v104);
    v71 = (char *)&v103;
  }
  webrtc::ParseFieldTrial(v102, 2, v71, v70);
  if (SHIBYTE(v104) < 0)
    operator delete((void *)v103.__sig);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 50))
  {
    v72 = (rtc::Thread *)operator new();
    *(_QWORD *)v72 = a1 + 504;
    *((_QWORD *)v72 + 1) = a1 + 520;
    *((_BYTE *)v72 + 16) = 0;
    *((_BYTE *)v72 + 24) = 0;
    *((_BYTE *)v72 + 32) = 0;
    *((_BYTE *)v72 + 34) = 0;
    *((_BYTE *)v72 + 36) = 1;
    *((_BYTE *)v72 + 38) = 0;
    *((_BYTE *)v72 + 40) = 0;
    *((_QWORD *)v72 + 8) = 0;
    *((_QWORD *)v72 + 7) = 0;
    *((_QWORD *)v72 + 6) = (char *)v72 + 56;
    v73 = *(_QWORD *)(a1 + 600);
    *(_QWORD *)(a1 + 600) = v72;
    if (v73)
    {
      std::__tree<sigslot::_signal_base_interface *>::destroy(v73 + 48, *(_QWORD **)(v73 + 56));
      v72 = (rtc::Thread *)MEMORY[0x20BD0ADEC](v73, 0x1060C40498AD98FLL);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 188))
  {
    v74 = *(_QWORD *)(a1 + 64);
    v75 = operator new();
    v72 = (rtc::Thread *)(*(_QWORD *(**)(pthread_mutexattr_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v74 + 16))(&v103, v74, "WebRTC-GenericDescriptorAuth", 28);
    if ((SHIBYTE(v104) & 0x80000000) == 0)
    {
      v76 = &v103;
      v77 = HIBYTE(v104);
      goto LABEL_71;
    }
    v77 = *(_QWORD *)v103.__opaque;
    if ((*(_QWORD *)v103.__opaque & 0x8000000000000000) == 0)
    {
      v76 = (_QWORD *)v103.__sig;
      if (!*(_QWORD *)v103.__opaque || v103.__sig)
      {
LABEL_71:
        if (v77 >= 8)
        {
          v78 = *v76 != *(_QWORD *)"Disabled";
          v79 = a13;
          if (v104 < 0)
LABEL_75:
            operator delete((void *)v103.__sig);
        }
        else
        {
          v78 = 1;
          v79 = a13;
          if (v104 < 0)
            goto LABEL_75;
        }
        *(_BYTE *)v75 = v78;
        *(_BYTE *)(v75 + 1) = 0;
        *(_DWORD *)(v75 + 4) = 3;
        *(_QWORD *)(v75 + 8) = 0;
        *(_QWORD *)(v75 + 16) = v98;
        *(_QWORD *)(v75 + 24) = v97;
        *(_OWORD *)(v75 + 32) = 0u;
        *(_OWORD *)(v75 + 48) = 0u;
        *(_OWORD *)(v75 + 64) = 0u;
        v80 = *(_QWORD *)(a1 + 1016);
        *(_QWORD *)(a1 + 1016) = v75;
        if (v80)
        {
          std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::~deque[abi:sn180100]((void **)(v80 + 32));
          v81 = *(_QWORD *)(v80 + 8);
          if (v81)
            (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
          v72 = (rtc::Thread *)MEMORY[0x20BD0ADEC](v80, 0x10E0C40609C190FLL);
        }
        v82 = *v79;
        if (*v79)
        {
          v83 = *(_QWORD *)(a1 + 1016);
          *v79 = 0;
          v72 = *(rtc::Thread **)(v83 + 8);
          *(_QWORD *)(v83 + 8) = v82;
          if (v72)
            v72 = (rtc::Thread *)(*(uint64_t (**)(rtc::Thread *))(*(_QWORD *)v72 + 8))(v72);
        }
        goto LABEL_83;
      }
    }
LABEL_92:
    __break(1u);
  }
LABEL_83:
  if (*a14)
  {
    v84 = rtc::Thread::Current(v72);
    v85 = *(_QWORD *)(a1 + 88);
    v86 = operator new();
    v87 = *(_QWORD *)(a1 + 80);
    v88 = *a14;
    *a14 = 0;
    v89 = *(_DWORD *)(v85 + 32);
    *(_QWORD *)(v86 + 16) = v88;
    *(_QWORD *)(v86 + 24) = v84;
    *(_DWORD *)(v86 + 32) = v89;
    *(_QWORD *)(v86 + 40) = v87;
    *(_BYTE *)(v86 + 48) = 0;
    *(_QWORD *)v86 = off_24C0BEC40;
    *(_QWORD *)(v86 + 8) = v99;
    *(_DWORD *)(v86 + 52) = 0;
    v90 = (unsigned int *)(v86 + 52);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
    v92 = *(_QWORD *)(a1 + 1248);
    *(_QWORD *)(a1 + 1248) = v86;
    if (v92)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
      v86 = *(_QWORD *)(a1 + 1248);
      v88 = *(_QWORD *)(v86 + 16);
      v93 = *(uint64_t (***)())v86;
    }
    else
    {
      v93 = off_24C0BEC40;
    }
    v103.__sig = v86;
    ((void (*)(uint64_t))*v93)(v86);
    (*(void (**)(uint64_t, pthread_mutexattr_t *, _QWORD))(*(_QWORD *)v88 + 48))(v88, &v103, *(unsigned int *)(v86 + 32));
    if (v103.__sig)
      (*(void (**)(uint64_t))(*(_QWORD *)v103.__sig + 8))(v103.__sig);
  }
  return a1;
}

void webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2(webrtc::RtpVideoStreamReceiver2 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int64_t v13;
  webrtc::UlpfecReceiver *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  webrtc::FrameDependencyStructure *v35;
  uint64_t v36;
  uint64_t v37;
  webrtc::NackRequester *v38;
  void *v39;
  webrtc::ModuleRtpRtcpImpl2 *v40;
  webrtc::UlpfecReceiver *v41;
  void *v42;
  void *v43;
  webrtc::RtpVideoStreamReceiver2 *v44;
  uint64_t v45;
  uint64_t v46;
  webrtc::RtpVideoStreamReceiver2 *v47;
  webrtc::RtpVideoStreamReceiver2 *v48;
  uint64_t v49;
  uint64_t v50;
  webrtc::RtpVideoStreamReceiver2 *v51;
  void **v52;

  *(_QWORD *)this = &off_24C0BEAC8;
  *((_QWORD *)this + 1) = &unk_24C0BEB28;
  *((_QWORD *)this + 2) = &unk_24C0BEB50;
  *((_QWORD *)this + 3) = &unk_24C0BEB78;
  *((_QWORD *)this + 4) = &unk_24C0BEBA0;
  *((_QWORD *)this + 5) = &unk_24C0BEBC8;
  *((_QWORD *)this + 6) = &unk_24C0BEBF0;
  *((_QWORD *)this + 7) = &unk_24C0BEC18;
  v9 = *((_QWORD *)this + 12);
  if (v9)
  {
    v10 = *((_QWORD *)this + 59);
    webrtc::PacketRouter::MaybeRemoveRembModuleCandidate(*((_QWORD **)this + 12), v10, 0, a4, a5, a6, a7, a8);
    v12 = *(char **)(v9 + 88);
    v11 = *(char **)(v9 + 96);
    if (v12 != v11)
    {
      while (*(_QWORD *)v12 != v10)
      {
        v12 += 8;
        if (v12 == v11)
        {
          v12 = *(char **)(v9 + 96);
          break;
        }
      }
    }
    if (v11 == v12)
    {
      __break(1u);
      return;
    }
    v13 = v11 - (v12 + 8);
    if (v11 != v12 + 8)
      memmove(v12, v12 + 8, v11 - (v12 + 8));
    *(_QWORD *)(v9 + 96) = &v12[v13];
  }
  v14 = (webrtc::UlpfecReceiver *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v14)
  {
    webrtc::UlpfecReceiver::~UlpfecReceiver(v14);
    MEMORY[0x20BD0ADEC]();
  }
  v15 = *((_QWORD *)this + 156);
  if (v15)
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v15 + 16) + 64))(*(_QWORD *)(v15 + 16), *(unsigned int *)(v15 + 32));
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = 0;
  }
  v17 = *((_QWORD *)this + 170);
  if (v17)
  {
    v18 = *((_QWORD *)this + 171);
    v19 = (void *)*((_QWORD *)this + 170);
    if (v18 != v17)
    {
      do
      {
        v20 = *(unsigned int **)(v18 - 8);
        if (v20)
        {
          v21 = v20 + 2;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
            (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
        }
        v24 = *(_QWORD *)(v18 - 56);
        if (v24)
        {
          v25 = (unsigned int *)(v24 + 24);
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            v28 = *(_QWORD *)(v24 + 16);
            *(_QWORD *)(v24 + 16) = 0;
            if (v28)
              MEMORY[0x20BD0ADD4](v28, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v24, 0x1010C40EE34DA14);
          }
        }
        v29 = *(void **)(v18 - 88);
        if (v29)
        {
          *(_QWORD *)(v18 - 80) = v29;
          operator delete(v29);
        }
        v18 -= 144;
      }
      while (v18 != v17);
      v19 = (void *)*((_QWORD *)this + 170);
    }
    *((_QWORD *)this + 171) = v17;
    operator delete(v19);
  }
  std::__tree<std::__value_type<long long,webrtc::RtpPacketInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::RtpPacketInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::RtpPacketInfo>>>::destroy(*((_QWORD **)this + 168));
  std::deque<long long>::~deque[abi:sn180100]((void **)this + 157);
  v30 = *((_QWORD *)this + 156);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 1112));
  v31 = *((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v31)
  {
    std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::~deque[abi:sn180100]((void **)(v31 + 32));
    v32 = *(_QWORD *)(v31 + 8);
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    MEMORY[0x20BD0ADEC](v31, 0x10E0C40609C190FLL);
  }
  std::__tree<std::__value_type<unsigned char,std::map<std::string,std::string>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<std::string,std::string>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 936, *((_QWORD **)this + 118));
  std::__tree<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::FrameBuffer::FrameInfo>>>::destroy((uint64_t)this + 912, *((_QWORD **)this + 115));
  std::__tree<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>>>::destroy((uint64_t)this + 888, *((_QWORD **)this + 112));
  std::__tree<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>>>::destroy((uint64_t)this + 864, *((_QWORD **)this + 109));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 106));
  v33 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 16);
    *(_QWORD *)(v33 + 16) = 0;
    if (v34)
    {
      v52 = (void **)v34;
      absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(&v52, *(_QWORD *)(v34 + 77456));
      MEMORY[0x20BD0ADEC](v34, 0x10A2C40029B1318);
    }
    MEMORY[0x20BD0ADEC](v33, 0x1020C40EFA1817ALL);
  }
  v35 = (webrtc::FrameDependencyStructure *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v35)
  {
    webrtc::FrameDependencyStructure::~FrameDependencyStructure(v35);
    MEMORY[0x20BD0ADEC]();
  }
  v36 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v36)
    MEMORY[0x20BD0ADD4](v36, 0x1000C8052888210);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 728, *((_QWORD **)this + 92));
  std::unique_ptr<webrtc::H26xPacketBuffer>::reset[abi:sn180100]((uint64_t *)this + 89, 0);
  webrtc::video_coding::PacketBuffer::~PacketBuffer((webrtc::RtpVideoStreamReceiver2 *)((char *)this + 608));
  v37 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v37)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v37 + 48, *(_QWORD **)(v37 + 56));
    MEMORY[0x20BD0ADEC](v37, 0x1060C40498AD98FLL);
  }
  v38 = (webrtc::NackRequester *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v38)
  {
    webrtc::NackRequester::~NackRequester(v38);
    MEMORY[0x20BD0ADEC]();
  }
  *((_QWORD *)this + 63) = &off_24C0BEA40;
  *((_QWORD *)this + 64) = &unk_24C0BEA78;
  *((_QWORD *)this + 65) = &unk_24C0BEAA0;
  v39 = (void *)*((_QWORD *)this + 70);
  if (v39)
  {
    *((_QWORD *)this + 71) = v39;
    operator delete(v39);
  }
  v40 = (webrtc::ModuleRtpRtcpImpl2 *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v40)
  {
    webrtc::ModuleRtpRtcpImpl2::~ModuleRtpRtcpImpl2(v40);
    MEMORY[0x20BD0ADEC]();
  }
  v41 = (webrtc::UlpfecReceiver *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v41)
  {
    webrtc::UlpfecReceiver::~UlpfecReceiver(v41);
    MEMORY[0x20BD0ADEC]();
  }
  *((_QWORD *)this + 44) = off_24C0B4170;
  if (*((char *)this + 407) < 0)
    operator delete(*((void **)this + 48));
  v42 = (void *)*((_QWORD *)this + 45);
  if (v42)
  {
    *((_QWORD *)this + 46) = v42;
    operator delete(v42);
  }
  *((_QWORD *)this + 35) = off_24C0B4170;
  if (*((char *)this + 335) < 0)
    operator delete(*((void **)this + 39));
  v43 = (void *)*((_QWORD *)this + 36);
  if (v43)
  {
    *((_QWORD *)this + 37) = v43;
    operator delete(v43);
  }
  if (*((_QWORD *)this + 28))
  {
    v45 = *((_QWORD *)this + 26);
    v44 = (webrtc::RtpVideoStreamReceiver2 *)*((_QWORD *)this + 27);
    v46 = *(_QWORD *)v44;
    *(_QWORD *)(v46 + 8) = *(_QWORD *)(v45 + 8);
    **(_QWORD **)(v45 + 8) = v46;
    *((_QWORD *)this + 28) = 0;
    if (v44 != (webrtc::RtpVideoStreamReceiver2 *)((char *)this + 208))
    {
      do
      {
        v47 = (webrtc::RtpVideoStreamReceiver2 *)*((_QWORD *)v44 + 1);
        operator delete(v44);
        v44 = v47;
      }
      while (v47 != (webrtc::RtpVideoStreamReceiver2 *)((char *)this + 208));
    }
  }
  if (*((_QWORD *)this + 22))
  {
    v49 = *((_QWORD *)this + 20);
    v48 = (webrtc::RtpVideoStreamReceiver2 *)*((_QWORD *)this + 21);
    v50 = *(_QWORD *)v48;
    *(_QWORD *)(v50 + 8) = *(_QWORD *)(v49 + 8);
    **(_QWORD **)(v49 + 8) = v50;
    *((_QWORD *)this + 22) = 0;
    if (v48 != (webrtc::RtpVideoStreamReceiver2 *)((char *)this + 160))
    {
      do
      {
        v51 = (webrtc::RtpVideoStreamReceiver2 *)*((_QWORD *)v48 + 1);
        operator delete(v48);
        v48 = v51;
      }
      while (v51 != (webrtc::RtpVideoStreamReceiver2 *)((char *)this + 160));
    }
  }
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 120, *((_QWORD **)this + 16));
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2(this, a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::~RtcpFeedbackBuffer(webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0BEA40;
  *((_QWORD *)this + 1) = &unk_24C0BEA78;
  *((_QWORD *)this + 2) = &unk_24C0BEAA0;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0BEA40;
  *((_QWORD *)this + 1) = &unk_24C0BEA78;
  *((_QWORD *)this + 2) = &unk_24C0BEAA0;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2(webrtc::RtpVideoStreamReceiver2 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 8), a2, a3, a4, a5, a6, a7, a8);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 32), a2, a3, a4, a5, a6, a7, a8);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 40), a2, a3, a4, a5, a6, a7, a8);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 48), a2, a3, a4, a5, a6, a7, a8);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 56), a2, a3, a4, a5, a6, a7, a8);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 8), a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 32), a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 40), a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 48), a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::RtpVideoStreamReceiver2::~RtpVideoStreamReceiver2((webrtc::RtpVideoStreamReceiver2 *)((char *)this - 56), a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

char *webrtc::RtpVideoStreamReceiver2::AddReceiveCodec(uint64_t a1, unsigned int a2, rtc::webrtc_checks_impl *a3, _QWORD *a4, int a5)
{
  char *result;
  int *v12;
  unint64_t v13;
  char v14;
  int v15;
  int v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  unsigned int v22;
  _BYTE *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  char **v28;
  char **v29;
  unsigned int v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *__p;
  __int128 v39;
  void *v40;
  unint64_t v41;
  unsigned __int8 v42;

  result = (char *)operator new(0x19uLL);
  __p = result;
  v39 = xmmword_208F05110;
  if (result <= "sps-pps-idr-in-keyframe" && result + 23 > "sps-pps-idr-in-keyframe")
    goto LABEL_63;
  strcpy(result, "sps-pps-idr-in-keyframe");
  if (!std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((uint64_t)a4, (const void **)&__p))
  {
    result = (char *)(*(_QWORD *(**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(&v40, *(_QWORD *)(a1 + 64), "WebRTC-SpsPpsIdrIsH264Keyframe", 30);
    if (((char)v42 & 0x80000000) == 0)
    {
      v12 = (int *)&v40;
      v13 = v42;
      goto LABEL_13;
    }
    v13 = v41;
    if ((v41 & 0x8000000000000000) == 0)
    {
      v12 = (int *)v40;
      if (!v41 || v40)
      {
LABEL_13:
        if (v13 >= 7)
        {
          v15 = *v12;
          v16 = *(int *)((char *)v12 + 3);
          v17 = v15 == 1650552389 && v16 == 1684368482;
          v14 = v17;
          if ((v42 & 0x80) == 0)
          {
LABEL_24:
            if (SHIBYTE(v39) < 0)
            {
              operator delete(__p);
              if ((v14 & 1) != 0)
                goto LABEL_30;
            }
            else if ((v14 & 1) != 0)
            {
              goto LABEL_30;
            }
            if (!a5)
              goto LABEL_31;
LABEL_27:
            v18 = (_QWORD *)operator new();
            *v18 = &unk_24C0C41A8;
            v40 = v18;
            v19 = *(uint64_t **)(a1 + 920);
            if (v19)
              goto LABEL_34;
            goto LABEL_32;
          }
        }
        else
        {
          v14 = 0;
          if ((v42 & 0x80) == 0)
            goto LABEL_24;
        }
        operator delete(v40);
        goto LABEL_24;
      }
    }
LABEL_63:
    __break(1u);
    return result;
  }
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
LABEL_30:
  *(_BYTE *)(a1 + 704) = 1;
  *(_BYTE *)(a1 + 1392) = 1;
  if (a5)
    goto LABEL_27;
LABEL_31:
  webrtc::CreateVideoRtpDepacketizer(a3, &v40);
  v19 = *(uint64_t **)(a1 + 920);
  if (v19)
  {
    while (1)
    {
LABEL_34:
      while (1)
      {
        v21 = (uint64_t **)v19;
        v22 = *((unsigned __int8 *)v19 + 32);
        if (v22 <= a2)
          break;
        v19 = *v21;
        v20 = v21;
        if (!*v21)
          goto LABEL_38;
      }
      if (v22 >= a2)
        goto LABEL_42;
      v19 = v21[1];
      if (!v19)
      {
        v20 = v21 + 1;
        goto LABEL_38;
      }
    }
  }
LABEL_32:
  v20 = (uint64_t **)(a1 + 920);
  v21 = (uint64_t **)(a1 + 920);
LABEL_38:
  v23 = operator new(0x30uLL);
  v23[32] = a2;
  v24 = v40;
  v40 = 0;
  *((_QWORD *)v23 + 5) = v24;
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = v21;
  *v20 = (uint64_t *)v23;
  v25 = **(_QWORD **)(a1 + 912);
  if (v25)
  {
    *(_QWORD *)(a1 + 912) = v25;
    v26 = *v20;
  }
  else
  {
    v26 = (uint64_t *)v23;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 920), v26);
  ++*(_QWORD *)(a1 + 928);
LABEL_42:
  result = (char *)v40;
  if (v40)
    result = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  v27 = *(char **)(a1 + 944);
  if (v27)
  {
    while (1)
    {
      while (1)
      {
        v29 = (char **)v27;
        v30 = v27[32];
        if (v30 <= a2)
          break;
        v27 = *v29;
        v28 = v29;
        if (!*v29)
          goto LABEL_51;
      }
      if (v30 >= a2)
        break;
      v27 = v29[1];
      if (!v27)
      {
        v28 = v29 + 1;
        goto LABEL_51;
      }
    }
  }
  else
  {
    v28 = (char **)(a1 + 944);
    v29 = (char **)(a1 + 944);
LABEL_51:
    v31 = (char *)operator new(0x40uLL);
    v31[32] = a2;
    *((_QWORD *)v31 + 6) = 0;
    *((_QWORD *)v31 + 5) = v31 + 48;
    *((_QWORD *)v31 + 7) = 0;
    v34 = (_QWORD *)*a4;
    v32 = a4 + 1;
    v33 = v34;
    if (v34 != v32)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)v31 + 5, (uint64_t *)v31 + 6, (uint64_t)(v33 + 4), (uint64_t)(v33 + 4));
        v36 = (_QWORD *)v33[1];
        if (v36)
        {
          do
          {
            v37 = v36;
            v36 = (_QWORD *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (_QWORD *)v33[2];
            v17 = *v37 == (_QWORD)v33;
            v33 = v37;
          }
          while (!v17);
        }
        v33 = v37;
      }
      while (v37 != v32);
    }
    *(_QWORD *)v31 = 0;
    *((_QWORD *)v31 + 1) = 0;
    *((_QWORD *)v31 + 2) = v29;
    *v28 = v31;
    v35 = **(_QWORD **)(a1 + 936);
    if (v35)
    {
      *(_QWORD *)(a1 + 936) = v35;
      v31 = *v28;
    }
    result = (char *)std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 944), (uint64_t *)v31);
    ++*(_QWORD *)(a1 + 952);
  }
  return result;
}

uint64_t *std::unique_ptr<webrtc::H26xPacketBuffer>::reset[abi:sn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>>>::destroy(v2 + 16480, *(_QWORD **)(v2 + 16488));
    std::__tree<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::video_coding::H264SpsPpsTracker::PpsInfo>>>::destroy(v2 + 16456, *(_QWORD **)(v2 + 16464));
    v3 = (_QWORD *)(v2 + 16392);
    while (1)
    {
      v5 = *--v3;
      v4 = v5;
      *v3 = 0;
      if (!v5)
        goto LABEL_5;
      if (*(_BYTE *)(v4 + 184))
      {
        if ((*(_BYTE *)(v4 + 152) & 1) != 0)
        {
          operator delete(*(void **)(v4 + 160));
          if ((*(_BYTE *)(v4 + 104) & 1) == 0)
          {
LABEL_10:
            if ((*(_BYTE *)(v4 + 56) & 1) == 0)
              goto LABEL_12;
LABEL_11:
            operator delete(*(void **)(v4 + 64));
            goto LABEL_12;
          }
        }
        else if ((*(_BYTE *)(v4 + 104) & 1) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)(v4 + 112));
        if ((*(_BYTE *)(v4 + 56) & 1) != 0)
          goto LABEL_11;
      }
LABEL_12:
      v6 = *(_QWORD *)(v4 + 16);
      if (v6)
      {
        v7 = (unsigned int *)(v6 + 24);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          v10 = *(_QWORD *)(v6 + 16);
          *(_QWORD *)(v6 + 16) = 0;
          if (v10)
            MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v6, 0x1010C40EE34DA14);
        }
      }
      MEMORY[0x20BD0ADEC](v4, 0x10B2C4061102D9CLL);
LABEL_5:
      if (v3 == (_QWORD *)(v2 + 8))
        JUMPOUT(0x20BD0ADECLL);
    }
  }
  return result;
}

void webrtc::RtpVideoStreamReceiver2::NotifyReceiverOfEmptyPacket(webrtc::RtpVideoStreamReceiver2 *this, unsigned int a2)
{
  uint64_t v4;
  int64x2_t *v5;
  int64x2_t **v6;
  int64x2_t **v7;
  const double *v8;
  int64x2_t *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  int64x2_t v13;
  int64x2_t *v14;
  unint64_t v15;
  int64x2_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  webrtc::NackRequester *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  __int128 v44;
  char v45;
  uint64_t *v46;
  __int128 v47;
  unsigned __int16 v48;
  unint64_t v49;
  _QWORD v50[4];

  v50[3] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 102);
  v5 = *(int64x2_t **)(v4 + 16);
  if (v5 && v5[4841].i64[0] == 3)
  {
    webrtc::RtpSeqNumOnlyRefFinder::PaddingReceived(v5, a2, &v49);
    v6 = (int64x2_t **)v50;
    if ((v49 & 1) != 0)
      v6 = (int64x2_t **)v50[0];
    if (v49 >= 2)
    {
      v7 = &v6[v49 >> 1];
      v8 = (const double *)(v4 + 8);
      do
      {
        v9 = *v6;
        v9[150].i64[1] = *(_QWORD *)v8 + (*v6)[150].i64[1];
        v10 = v9[20].u64[1];
        if (v10)
        {
          if (v10 >= 6
            && ((unint64_t)&v9[21] < v4 + 16 ? (v11 = v8 >= (const double *)&v9[21].i64[v10]) : (v11 = 1), v11))
          {
            v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
            v13 = (int64x2_t)vld1q_dup_f64(v8);
            v14 = v9 + 22;
            v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v16 = vaddq_s64(*v14, v13);
              v14[-1] = vaddq_s64(v14[-1], v13);
              *v14 = v16;
              v14 += 2;
              v15 -= 4;
            }
            while (v15);
            if (v10 == v12)
              goto LABEL_7;
          }
          else
          {
            v12 = 0;
          }
          v17 = v10 - v12;
          v18 = &v9[21].i64[v12];
          do
          {
            *v18++ += *(_QWORD *)v8;
            --v17;
          }
          while (v17);
        }
LABEL_7:
        ++v6;
      }
      while (v6 != v7);
    }
  }
  else
  {
    v49 = 0;
  }
  webrtc::RtpVideoStreamReceiver2::OnCompleteFrames((uint64_t)this, &v49);
  if (v49)
    absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::DestroyContents(&v49);
  v48 = a2;
  v45 = 0;
  webrtc::video_coding::PacketBuffer::UpdateMissingPackets((webrtc::RtpVideoStreamReceiver2 *)((char *)this + 608), a2);
  std::__tree<unsigned short,webrtc::DescendingSeqNumComp<unsigned short,(unsigned short)0>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)this + 85, &v48, &v48);
  webrtc::video_coding::PacketBuffer::FindFrames((webrtc::RtpVideoStreamReceiver2 *)((char *)this + 608), (unsigned __int16)(v48 + 1), (unint64_t *)&v46);
  v19 = v46;
  v43 = v46;
  v42 = (uint64_t *)v47;
  v44 = v47;
  webrtc::RtpVideoStreamReceiver2::OnInsertedPacket((uint64_t)this, &v43, v20, v21, v22, v23, v24, v25);
  if (v19)
  {
    v26 = v42;
    if (v42 == v19)
    {
LABEL_48:
      operator delete(v26);
      goto LABEL_49;
    }
    while (1)
    {
      v28 = *--v26;
      v27 = v28;
      *v26 = 0;
      if (v28)
        break;
LABEL_31:
      if (v26 == v19)
      {
        v26 = v43;
        goto LABEL_48;
      }
    }
    if (*(_BYTE *)(v27 + 184))
    {
      if ((*(_BYTE *)(v27 + 152) & 1) != 0)
      {
        operator delete(*(void **)(v27 + 160));
        if ((*(_BYTE *)(v27 + 104) & 1) == 0)
        {
LABEL_36:
          if ((*(_BYTE *)(v27 + 56) & 1) == 0)
            goto LABEL_38;
          goto LABEL_37;
        }
      }
      else if ((*(_BYTE *)(v27 + 104) & 1) == 0)
      {
        goto LABEL_36;
      }
      operator delete(*(void **)(v27 + 112));
      if ((*(_BYTE *)(v27 + 56) & 1) != 0)
LABEL_37:
        operator delete(*(void **)(v27 + 64));
    }
LABEL_38:
    v29 = *(_QWORD *)(v27 + 16);
    if (v29)
    {
      v30 = (unsigned int *)(v29 + 24);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = *(_QWORD *)(v29 + 16);
        *(_QWORD *)(v29 + 16) = 0;
        if (v33)
          MEMORY[0x20BD0ADD4](v33, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v29, 0x1010C40EE34DA14);
      }
    }
    MEMORY[0x20BD0ADEC](v27, 0x10B2C4061102D9CLL);
    goto LABEL_31;
  }
LABEL_49:
  v34 = (webrtc::NackRequester *)*((_QWORD *)this + 74);
  if (v34)
    webrtc::NackRequester::OnReceivedPacket(v34, a2, 0);
  if (*((_QWORD *)this + 75))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc");
  }
}

void webrtc::RtpVideoStreamReceiver2::OnInsertedPacket(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  char *v21;
  uint64_t **v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  _BYTE *v57;
  _BYTE *v58;
  int64_t v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  BOOL v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  __int16 v79;
  __int16 v80;
  char v81;
  int v82;
  char v83;
  int v84;
  char v85;
  void **v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  double v104;
  void **v105;
  void **v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int64_t v110;
  uint64_t v111;
  unint64_t v112;
  _DWORD *v113;
  unint64_t v114;
  _DWORD *v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  BOOL v124;
  int v125;
  uint64_t v126;
  webrtc::RtpFrameObject *v127;
  int v128;
  _BOOL4 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *i;
  void *v139;
  char *v140;
  char *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v146;
  webrtc::RemoteNtpTimeEstimator *v147;
  uint64_t *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t **v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  void **v157;
  void *__p[2];
  void *v159;
  webrtc::RtpFrameObject *v160;
  webrtc::RtpFrameObject *v161;
  webrtc::RtpFrameObject *v162;
  char v163;
  void **v164[3];
  _QWORD v165[2];
  _QWORD v166[2];
  _QWORD v167[2];
  _QWORD v168[2];
  _QWORD v169[2];
  _QWORD v170[2];
  _QWORD v171[2];
  _QWORD v172[4];
  uint64_t v173[6];

  v173[4] = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v159 = 0;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    v154 = 0;
    v155 = 0;
    v11 = 0;
    v12 = 0;
    v153 = 0;
    v152 = 0;
    v156 = 0;
    v151 = (uint64_t **)(a1 + 1344);
    v13 = (_QWORD *)(a1 + 920);
    v146 = a1 + 1256;
    v147 = (webrtc::RemoteNtpTimeEstimator *)(a1 + 104);
    v148 = a2[1];
    v149 = (_QWORD *)(a1 + 920);
    while (1)
    {
      v14 = v10;
      v15 = *(unsigned __int16 *)(*v9 + 4);
      v16 = *(unsigned __int16 *)(*v9 + 4);
      if (*(_BYTE *)(a1 + 1330))
      {
        v17 = *(unsigned __int16 *)(a1 + 1328);
        v69 = v15 >= v17;
        LODWORD(v18) = v15 - v17;
        v19 = (_DWORD)v18 != 0 && v69;
        v20 = (v18 & 0x8000u) == 0;
        if ((_DWORD)v18 == 0x8000)
          v20 = v19;
        if (v20)
          v18 = (unsigned __int16)v18;
        else
          v18 |= 0xFFFFFFFFFFFF0000;
        v16 = v18 + *(_QWORD *)(a1 + 1320);
      }
      *(_QWORD *)(a1 + 1320) = v16;
      *(_WORD *)(a1 + 1328) = v15;
      *(_BYTE *)(a1 + 1330) = 1;
      v21 = (char *)v151;
      v22 = v151;
      v23 = *(char **)(a1 + 1344);
      if (v23)
      {
        while (1)
        {
          while (1)
          {
            v21 = v23;
            v24 = *((_QWORD *)v23 + 4);
            if (v16 >= v24)
              break;
            v23 = *(char **)v21;
            v22 = (uint64_t **)v21;
            if (!*(_QWORD *)v21)
              goto LABEL_22;
          }
          if (v24 >= v16)
            break;
          v23 = (char *)*((_QWORD *)v21 + 1);
          if (!v23)
          {
            v22 = (uint64_t **)(v21 + 8);
            goto LABEL_22;
          }
        }
      }
      else
      {
LABEL_22:
        v25 = v21;
        v21 = (char *)operator new(0x90uLL);
        *((_QWORD *)v21 + 4) = v16;
        *((_DWORD *)v21 + 10) = 0;
        *((_QWORD *)v21 + 7) = 0;
        *((_QWORD *)v21 + 8) = 0;
        *((_QWORD *)v21 + 6) = 0;
        *((_DWORD *)v21 + 18) = 0;
        *((_QWORD *)v21 + 10) = 0x8000000000000000;
        *((_WORD *)v21 + 44) = 0;
        v21[96] = 0;
        v21[120] = 0;
        v21[128] = 0;
        v21[136] = 0;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 2) = v25;
        *v22 = (uint64_t *)v21;
        v26 = (uint64_t *)v21;
        v27 = **(_QWORD **)(a1 + 1336);
        if (v27)
        {
          *(_QWORD *)(a1 + 1336) = v27;
          v26 = *v22;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1344), v26);
        ++*(_QWORD *)(a1 + 1352);
      }
      v28 = (_QWORD *)*v9;
      if (*(_BYTE *)(*v9 + 205))
      {
        v29 = *((_QWORD *)v21 + 10);
        v30 = v29 / 0x3E8uLL;
        if (v29 % 0x3E8uLL > 0x1F3)
          ++v30;
        if (-v29 % 0x3E8uLL <= 0x1F4)
          v31 = 0;
        else
          v31 = -1;
        v32 = v31 - -v29 / 0x3E8uLL;
        v33 = v29 >= 0;
        if (v29 < 0)
          v34 = v32;
        else
          v34 = v30;
        v153 = v34;
        if (v33)
          v35 = v30;
        else
          v35 = v32;
        v154 = v35;
        v152 = *(_DWORD *)(*v9 + 12);
        v156 = *v9;
        if (v12 >= v155)
          goto LABEL_62;
      }
      else
      {
        v39 = v152;
        if (v152 <= *(_DWORD *)(*v9 + 12))
          v39 = *(_DWORD *)(*v9 + 12);
        v152 = v39;
        v40 = *((_QWORD *)v21 + 10);
        v41 = v40 / 0x3E8uLL;
        if (v40 % 0x3E8uLL > 0x1F3)
          ++v41;
        if (-v40 % 0x3E8uLL <= 0x1F4)
          v42 = 0;
        else
          v42 = -1;
        v43 = v42 - -v40 / 0x3E8uLL;
        if (v40 < 0)
          v44 = v43;
        else
          v44 = v41;
        if (v44 >= v153)
          v45 = v153;
        else
          v45 = v44;
        v46 = v154;
        if (v154 <= v44)
          v46 = v44;
        v153 = v45;
        v154 = v46;
        if (v12 >= v155)
        {
LABEL_62:
          v47 = (v12 - v11) >> 4;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 60)
            goto LABEL_232;
          if ((v155 - v11) >> 3 > v48)
            v48 = (v155 - v11) >> 3;
          if ((unint64_t)(v155 - v11) >= 0x7FFFFFFFFFFFFFF0)
            v48 = 0xFFFFFFFFFFFFFFFLL;
          if (!v48)
          {
LABEL_230:
            __break(1u);
LABEL_231:
            rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc", 800, "depacketizer_it != payload_type_map_.end()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v144);
LABEL_232:
            abort();
          }
          if (v48 >> 60)
            goto LABEL_234;
          v49 = 16 * v48;
          v50 = (char *)operator new(16 * v48);
          v51 = v28[2];
          if (v51)
            v52 = *(_QWORD *)(v51 + 16) + v28[3];
          else
            v52 = 0;
          v53 = &v50[16 * v47];
          v54 = v28[4];
          if (!v54)
            v52 = 0;
          *(_QWORD *)v53 = v52;
          *((_QWORD *)v53 + 1) = v54;
          if (v12 == v11)
          {
            v56 = &v50[16 * v47];
            v155 = &v50[v49];
            v12 = v53 + 16;
            if (v11)
              goto LABEL_78;
          }
          else
          {
            v55 = &v50[16 * v47];
            do
            {
              v56 = v55 - 16;
              *((_OWORD *)v55 - 1) = *((_OWORD *)v12 - 1);
              v12 -= 16;
              v55 -= 16;
            }
            while (v12 != v11);
            v155 = &v50[v49];
            v12 = v53 + 16;
            if (v11)
LABEL_78:
              operator delete(v11);
          }
          v11 = v56;
          v38 = __p[1];
          if (__p[1] < v159)
            goto LABEL_80;
          goto LABEL_44;
        }
      }
      if (!v12)
        goto LABEL_230;
      v36 = v28[2];
      if (v36)
        v36 = *(_QWORD *)(v36 + 16) + v28[3];
      v37 = v28[4];
      if (!v37)
        v36 = 0;
      *(_QWORD *)v12 = v36;
      *((_QWORD *)v12 + 1) = v37;
      v12 += 16;
      v38 = __p[1];
      if (__p[1] < v159)
      {
LABEL_80:
        if (!v38)
          goto LABEL_230;
        *(_DWORD *)v38 = *((_DWORD *)v21 + 10);
        v38[2] = 0;
        v38[3] = 0;
        v38[1] = 0;
        v58 = (_BYTE *)*((_QWORD *)v21 + 6);
        v57 = (_BYTE *)*((_QWORD *)v21 + 7);
        v59 = v57 - v58;
        if (v57 != v58)
        {
          if (v59 < 0)
            goto LABEL_232;
          v60 = (char *)operator new(v57 - v58);
          v38[1] = v60;
          v38[2] = v60;
          v61 = &v60[4 * (v59 >> 2)];
          v38[3] = v61;
          memcpy(v60, v58, v59);
          v38[2] = v61;
          v13 = v149;
        }
        *((_OWORD *)v38 + 2) = *(_OWORD *)(v21 + 72);
        v62 = *(_OWORD *)(v21 + 88);
        v63 = *(_OWORD *)(v21 + 104);
        v64 = *(_OWORD *)(v21 + 120);
        *((_BYTE *)v38 + 96) = v21[136];
        *((_OWORD *)v38 + 4) = v63;
        *((_OWORD *)v38 + 5) = v64;
        *((_OWORD *)v38 + 3) = v62;
        __p[1] = v38 + 13;
        v10 = v14;
        if (!*(_BYTE *)(*v9 + 206))
          goto LABEL_4;
        goto LABEL_85;
      }
LABEL_44:
      __p[1] = std::vector<webrtc::RtpPacketInfo>::__push_back_slow_path<webrtc::RtpPacketInfo const&>(__p, (uint64_t)(v21 + 40));
      v10 = v14;
      if (!*(_BYTE *)(*v9 + 206))
        goto LABEL_4;
LABEL_85:
      v65 = *v13;
      if (!*v13)
        goto LABEL_231;
      v66 = *(unsigned __int8 *)(v156 + 2);
      v67 = v13;
      do
      {
        v68 = *(unsigned __int8 *)(v65 + 32);
        v69 = v68 >= v66;
        if (v68 >= v66)
          v70 = (uint64_t *)v65;
        else
          v70 = (uint64_t *)(v65 + 8);
        if (v69)
          v67 = (_QWORD *)v65;
        v65 = *v70;
      }
      while (*v70);
      if (v67 == v13 || v66 < *((unsigned __int8 *)v67 + 32))
        goto LABEL_231;
      v71 = v67[5];
      if (!v71)
      {
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc", 801, "depacketizer_it->second", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v144);
LABEL_234:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      (*(void (**)(void ***__return_ptr))(*(_QWORD *)v71 + 24))(&v157);
      if (v157)
      {
        v72 = *v9;
        v73 = webrtc::RemoteNtpTimeEstimator::EstimateNtp(v147, *(_DWORD *)(v156 + 8));
        if (v73)
        {
          v150 = (uint64_t)((double)v73 / 4294967.3 + 0.5) + 1000 * HIDWORD(v73);
          v74 = *(_DWORD *)(v156 + 212);
          if (__p[0] != __p[1])
          {
LABEL_100:
            v75 = operator new();
            v76 = v75;
            *(_DWORD *)v75 = 0;
            *(_OWORD *)(v75 + 8) = *(_OWORD *)__p;
            *(_QWORD *)(v75 + 24) = v159;
            __p[0] = 0;
            __p[1] = 0;
            v159 = 0;
            do
              v77 = __ldxr((unsigned int *)v75);
            while (__stxr(v77 + 1, (unsigned int *)v75));
LABEL_107:
            v78 = operator new();
            v79 = *(_WORD *)(v156 + 4);
            v80 = *(_WORD *)(v72 + 4);
            v81 = *(_BYTE *)(v72 + 1);
            v82 = *(_DWORD *)(v156 + 8);
            v83 = *(_BYTE *)(v156 + 2);
            v84 = *(_DWORD *)(v72 + 200);
            v85 = *(_BYTE *)(v72 + 204);
            v173[0] = v76;
            v86 = v157;
            v157 = 0;
            v164[0] = v86;
            v87 = v78;
            webrtc::RtpFrameObject::RtpFrameObject(v78, v79, v80, v81, v152, v153, v154, v82, v150, (unsigned __int16 *)(v72 + 240), v83, v74, v84, v85, v156 + 40, v72 + 256, v173, (void (****)(_QWORD))v164);
            if (v86)
              (*((void (**)(void **))*v86 + 1))(v86);
            v88 = v173[0];
            v10 = v148;
            v13 = v149;
            if (v173[0])
            {
              do
              {
                v89 = __ldaxr((unsigned int *)v88);
                v90 = v89 - 1;
              }
              while (__stlxr(v90, (unsigned int *)v88));
              if (!v90)
              {
                v91 = *(_QWORD *)(v88 + 8);
                if (v91)
                {
                  v92 = *(_QWORD *)(v88 + 16);
                  v93 = *(void **)(v88 + 8);
                  if (v92 != v91)
                  {
                    do
                    {
                      v94 = *(void **)(v92 - 96);
                      if (v94)
                      {
                        *(_QWORD *)(v92 - 88) = v94;
                        operator delete(v94);
                      }
                      v92 -= 104;
                    }
                    while (v92 != v91);
                    v93 = *(void **)(v88 + 8);
                  }
                  *(_QWORD *)(v88 + 16) = v91;
                  operator delete(v93);
                }
                MEMORY[0x20BD0ADEC](v88, 0x1020C40E72D6CFBLL);
              }
            }
            ++*(_QWORD *)(a1 + 1312);
            v95 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80));
            v98 = v95 / 0x3E8uLL;
            if (v95 % 0x3E8uLL > 0x1F3)
              ++v98;
            if (-v95 % 0x3E8uLL <= 0x1F4)
              v99 = 0;
            else
              v99 = -1;
            v100 = v99 - -v95 / 0x3E8uLL;
            if (v95 < 0)
              v101 = v100;
            else
              v101 = v98;
            v102 = *(_QWORD *)(a1 + 1296);
            v103 = v101;
            if (v102)
              v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1264)
                                           + (((unint64_t)(v102 + *(_QWORD *)(a1 + 1288) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * ((v102 + *(_QWORD *)(a1 + 1288) - 1) & 0x1FF));
            v104 = *(double *)(a1 + 1304);
            if (v104 != 0.0 && 3000.0 / v104 < (double)(uint64_t)(v101 - v103))
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
              {
                v164[0] = (void **)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/we"
                                   "brtc/video/rtp_video_stream_receiver2.cc";
                v164[1] = (void **)6889;
                v164[2] = (void **)&v163;
                v165[0] = "RtpVideoStreamReceiver::OnAssembledFrame at ";
                v165[1] = v164;
                v166[0] = v101;
                v166[1] = v165;
                v167[0] = ", previous frame was at ";
                v167[1] = v166;
                v168[0] = v103;
                v168[1] = v167;
                v169[0] = ", observed frame rate is ";
                v169[1] = v168;
                v170[0] = *(_QWORD *)(a1 + 1304);
                v170[1] = v169;
                v171[0] = ", delay since last frame is ";
                v171[1] = v170;
                v172[0] = v101 - v103;
                v172[1] = v171;
                v172[2] = " ms, frame count is ";
                v172[3] = v172;
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)6,unsigned long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)6,unsigned long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, (uint64_t)", observed frame rate is ", (uint64_t)", delay since last frame is ", (uint64_t)" ms, frame count is ", a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc");
              }
              v102 = *(_QWORD *)(a1 + 1296);
            }
            v105 = *(void ***)(a1 + 1272);
            v106 = *(void ***)(a1 + 1264);
            v107 = (((char *)v105 - (char *)v106) << 6) - 1;
            if (v105 == v106)
              v107 = 0;
            if (v107 == *(_QWORD *)(a1 + 1288) + v102)
            {
              std::deque<long long>::__add_back_capacity(v146);
              v102 = *(_QWORD *)(a1 + 1296);
              v106 = *(void ***)(a1 + 1264);
              v105 = *(void ***)(a1 + 1272);
            }
            if (v105 == v106)
              goto LABEL_230;
            v108 = *(_QWORD *)(a1 + 1288);
            v109 = *(uint64_t *)((char *)v106 + (((v108 + v102) >> 6) & 0x3FFFFFFFFFFFFF8));
            if (!v109)
              goto LABEL_230;
            *(_QWORD *)(v109 + 8 * (((_WORD)v108 + (_WORD)v102) & 0x1FF)) = v101;
            *(_QWORD *)(a1 + 1296) = v102 + 1;
            while (1)
            {
              v110 = (*(_QWORD **)((char *)v106 + ((v108 >> 6) & 0x3FFFFFFFFFFFFF8)))[v108 & 0x1FF];
              if (v110 > (uint64_t)(v101 - 2000))
                break;
              --*(_QWORD *)(a1 + 1296);
              *(_QWORD *)(a1 + 1288) = ++v108;
              if (v108 >= 0x400)
              {
                operator delete(*v106);
                v106 = (void **)(*(_QWORD *)(a1 + 1264) + 8);
                *(_QWORD *)(a1 + 1264) = v106;
                v108 = *(_QWORD *)(a1 + 1288) - 512;
                *(_QWORD *)(a1 + 1288) = v108;
              }
            }
            if ((uint64_t)(v101 - v110) >= 1001)
              *(double *)(a1 + 1304) = (double)(1000 * *(_QWORD *)(a1 + 1296) / (v101 - v110));
            v111 = *(_QWORD *)(a1 + 600);
            if (v111 && *(_BYTE *)(v87 + 2568))
            {
              v112 = *(_QWORD *)(v87 + 2440);
              v113 = (_DWORD *)(v87 + 2448);
              if ((v112 & 1) != 0)
                v113 = *(_DWORD **)(v87 + 2448);
              v114 = v112 >> 1;
              if (v112 >= 2)
              {
                v116 = 4 * v114;
                v115 = v113;
                while (*v115 != 1)
                {
                  ++v115;
                  v116 -= 4;
                  if (!v116)
                  {
                    v115 = &v113[v114];
                    break;
                  }
                }
              }
              else
              {
                v115 = v113;
              }
              v117 = v114 != v115 - v113;
              v118 = *(_QWORD *)(v87 + 2488);
              v119 = (_QWORD *)(v87 + 2496);
              if ((v118 & 1) != 0)
                v119 = *(_QWORD **)(v87 + 2496);
              if (v118 >= 2)
                v120 = v119;
              else
                v120 = 0;
              webrtc::LossNotificationController::OnAssembledFrame(v111, *(_WORD *)(v87 + 4404), *(_QWORD *)(v87 + 2424), v117, v120, v118 >> 1);
            }
            if (*(_BYTE *)(a1 + 962))
            {
              if (*(_BYTE *)(a1 + 828))
                goto LABEL_166;
LABEL_172:
              *(_DWORD *)(a1 + 824) = *(_DWORD *)(v87 + 4400);
              *(_BYTE *)(a1 + 828) = 1;
              v122 = (unsigned int *)(v87 + 160);
LABEL_173:
              v121 = *v122;
LABEL_174:
              *(_DWORD *)(a1 + 832) = v121;
LABEL_175:
              v126 = *(_QWORD *)(a1 + 1016);
              if (v126)
              {
                v162 = (webrtc::RtpFrameObject *)v87;
                webrtc::BufferedFrameDecryptor::ManageEncryptedFrame(v126, &v162);
                v127 = v162;
                v162 = 0;
                if (!v127)
                  goto LABEL_201;
                goto LABEL_200;
              }
              v130 = *(_QWORD *)(a1 + 1248);
              if (!v130)
              {
                v136 = *(_QWORD *)(a1 + 816);
                v160 = (webrtc::RtpFrameObject *)v87;
                webrtc::RtpFrameReferenceFinder::ManageFrame(v136, (uint64_t *)&v160, v96, v97, a5, a6, a7, a8, (unint64_t *)v173);
                webrtc::RtpVideoStreamReceiver2::OnCompleteFrames(a1, (unint64_t *)v173);
                if (v173[0])
                  absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::DestroyContents(v173);
                v127 = v160;
                if (!v160)
                  goto LABEL_201;
                goto LABEL_200;
              }
              v161 = (webrtc::RtpFrameObject *)v87;
              webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::TransformFrame(v130, (uint64_t *)&v161);
              v127 = v161;
              if (v161)
LABEL_200:
                (*(void (**)(webrtc::RtpFrameObject *))(*(_QWORD *)v127 + 8))(v127);
            }
            else
            {
              if (*(_DWORD *)(v87 + 32) == 3 || *(_QWORD *)(a1 + 600))
              {
                *(_BYTE *)(a1 + 962) = 1;
                if (!*(_BYTE *)(a1 + 828))
                  goto LABEL_172;
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
                *(_BYTE *)(a1 + 962) = 1;
                if (!*(_BYTE *)(a1 + 828))
                  goto LABEL_172;
              }
LABEL_166:
              v122 = (unsigned int *)(v87 + 160);
              v121 = *(_DWORD *)(v87 + 160);
              v123 = *(_DWORD *)(a1 + 832);
              v124 = v121 >= v123;
              v125 = v121 - v123;
              if (v125)
              {
                v128 = v125 != 0 && v124;
                if (v125 == 0x80000000)
                  v129 = v128;
                else
                  v129 = v125 >= 0;
                if (*(_DWORD *)(v87 + 4400) == *(_DWORD *)(a1 + 824))
                {
                  if (v129)
                    goto LABEL_174;
                  goto LABEL_175;
                }
                if (v129)
                {
                  v131 = *(_QWORD *)(a1 + 1240) + 0xFFFFLL;
                  v132 = operator new();
                  *(_DWORD *)v132 = -1;
                  *(_QWORD *)(v132 + 8) = v131;
                  v133 = (void *)operator new();
                  bzero(v133, 0x12E98uLL);
                  *(_QWORD *)(v132 + 16) = v133;
                  v134 = *(_QWORD *)(a1 + 816);
                  *(_QWORD *)(a1 + 816) = v132;
                  if (v134)
                  {
                    v135 = *(_QWORD *)(v134 + 16);
                    *(_QWORD *)(v134 + 16) = 0;
                    if (v135)
                    {
                      v164[0] = (void **)v135;
                      absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(v164, *(_QWORD *)(v135 + 77456));
                      MEMORY[0x20BD0ADEC](v135, 0x10A2C40029B1318);
                    }
                    MEMORY[0x20BD0ADEC](v134, 0x1020C40EFA1817ALL);
                  }
                  *(_DWORD *)(a1 + 824) = *(_DWORD *)(v87 + 4400);
                  *(_BYTE *)(a1 + 828) = 1;
                  v10 = v148;
                  goto LABEL_173;
                }
              }
              else if (*(_DWORD *)(v87 + 4400) == *(_DWORD *)(a1 + 824))
              {
                goto LABEL_175;
              }
              (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
            }
LABEL_201:
            v137 = (char *)__p[0];
            for (i = (char *)__p[1]; i != v137; i -= 104)
            {
              v139 = (void *)*((_QWORD *)i - 12);
              if (v139)
              {
                *((_QWORD *)i - 11) = v139;
                operator delete(v139);
              }
            }
            __p[1] = v137;
            if (v157)
              (*((void (**)(void **))*v157 + 1))(v157);
            v12 = v11;
            goto LABEL_4;
          }
        }
        else
        {
          v150 = -1;
          v74 = *(_DWORD *)(v156 + 212);
          if (__p[0] != __p[1])
            goto LABEL_100;
        }
        v76 = 0;
        goto LABEL_107;
      }
LABEL_4:
      if (++v9 == v10)
        goto LABEL_211;
    }
  }
  v11 = 0;
LABEL_211:
  if (*((_BYTE *)a2 + 24))
  {
    if (*(_BYTE *)(a1 + 992))
      *(_BYTE *)(a1 + 992) = 0;
    if (*(_BYTE *)(a1 + 1008))
      *(_BYTE *)(a1 + 1008) = 0;
    if (*(_BYTE *)(a1 + 976))
      *(_BYTE *)(a1 + 976) = 0;
    std::__tree<std::__value_type<long long,webrtc::RtpPacketInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::RtpPacketInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::RtpPacketInfo>>>::destroy(*(_QWORD **)(a1 + 1344));
    *(_QWORD *)(a1 + 1336) = a1 + 1344;
    *(_QWORD *)(a1 + 1352) = 0;
    *(_QWORD *)(a1 + 1344) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  v140 = (char *)__p[0];
  if (__p[0])
  {
    v141 = (char *)__p[1];
    v142 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v143 = (void *)*((_QWORD *)v141 - 12);
        if (v143)
        {
          *((_QWORD *)v141 - 11) = v143;
          operator delete(v143);
        }
        v141 -= 104;
      }
      while (v141 != v140);
      v142 = __p[0];
    }
    __p[1] = v140;
    operator delete(v142);
  }
  if (v11)
    operator delete(v11);
}

void webrtc::RtpVideoStreamReceiver2::OnRecoveredPacket(webrtc::RtpVideoStreamReceiver2 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*((_DWORD *)a1 + 110) == *(unsigned __int8 *)(a2 + 1))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc");
  }
  else
  {
    webrtc::RtpVideoStreamReceiver2::ReceivePacket(a1, a2);
  }
}

void webrtc::RtpVideoStreamReceiver2::ReceivePacket(webrtc::RtpVideoStreamReceiver2 *this, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  char **v6;
  char **v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  uint64_t *v24;
  __int128 *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;

  if (!*(_QWORD *)(a2 + 24))
  {
    webrtc::RtpVideoStreamReceiver2::NotifyReceiverOfEmptyPacket(this, *(unsigned __int16 *)(a2 + 4));
    return;
  }
  v4 = *(unsigned __int8 *)(a2 + 1);
  if (*((_DWORD *)this + 110) == v4)
  {
    v5 = *((_QWORD *)this + 54);
    if (v5)
    {
      if (*(_DWORD *)(v5 + 4) == *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 16)
                                                     + *(_QWORD *)(a2 + 96)
                                                     + *(_QWORD *)(a2 + 16)))
      {
        webrtc::RtpVideoStreamReceiver2::NotifyReceiverOfEmptyPacket(this, *(unsigned __int16 *)(a2 + 4));
        v5 = *((_QWORD *)this + 54);
      }
      if (webrtc::UlpfecReceiver::AddReceivedRedPacket(v5, a2))
        webrtc::UlpfecReceiver::ProcessReceivedFec(*((webrtc::UlpfecReceiver **)this + 54));
    }
  }
  else
  {
    v6 = (char **)*((_QWORD *)this + 115);
    if (v6)
    {
      v7 = (char **)((char *)this + 920);
      do
      {
        v8 = *((unsigned __int8 *)v6 + 32);
        v9 = v8 >= v4;
        if (v8 >= v4)
          v10 = v6;
        else
          v10 = v6 + 1;
        if (v9)
          v7 = v6;
        v6 = (char **)*v10;
      }
      while (*v10);
      if (v7 != (char **)((char *)this + 920) && v4 >= *((unsigned __int8 *)v7 + 32))
      {
        if (webrtc::RtpVideoStreamReceiver2::ReceivePacket(webrtc::RtpPacketReceived const&)::$_1::operator()((unint64_t)this, (uint64_t)v7[5], (uint64_t *)a2))
        {
          v11 = *((_QWORD *)this + 171);
          v12 = *((_QWORD *)this + 170);
          if (v11 - v12 == 14400)
          {
            while (v11 != v12)
            {
              v13 = *(unsigned int **)(v11 - 8);
              if (v13)
              {
                v14 = v13 + 2;
                do
                {
                  v15 = __ldaxr(v14);
                  v16 = v15 - 1;
                }
                while (__stlxr(v16, v14));
                if (!v16)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
              }
              v17 = *(_QWORD *)(v11 - 56);
              if (v17)
              {
                v18 = (unsigned int *)(v17 + 24);
                do
                {
                  v19 = __ldaxr(v18);
                  v20 = v19 - 1;
                }
                while (__stlxr(v20, v18));
                if (!v20)
                {
                  v21 = *(_QWORD *)(v17 + 16);
                  *(_QWORD *)(v17 + 16) = 0;
                  if (v21)
                    MEMORY[0x20BD0ADD4](v21, 0x1000C8077774924);
                  MEMORY[0x20BD0ADEC](v17, 0x1010C40EE34DA14);
                }
              }
              v22 = *(void **)(v11 - 88);
              if (v22)
              {
                *(_QWORD *)(v11 - 80) = v22;
                operator delete(v22);
              }
              v11 -= 144;
            }
            *((_QWORD *)this + 171) = v12;
          }
          else
          {
            v12 = *((_QWORD *)this + 171);
          }
          if (v12 >= *((_QWORD *)this + 172))
          {
            *((_QWORD *)this + 171) = std::vector<webrtc::RtpPacketReceived>::__push_back_slow_path<webrtc::RtpPacketReceived const&>((void **)this + 170, a2);
            return;
          }
          if (v12)
          {
            webrtc::RtpPacketReceived::RtpPacketReceived(v12, (__int128 *)a2);
            *((_QWORD *)this + 171) = v12 + 144;
            return;
          }
        }
        else
        {
          v23 = (uint64_t *)*((_QWORD *)this + 170);
          if (v23 == *((uint64_t **)this + 171))
            return;
          while (1)
          {
            while (webrtc::RtpVideoStreamReceiver2::ReceivePacket(webrtc::RtpPacketReceived const&)::$_1::operator()((unint64_t)this, (uint64_t)v7[5], v23))
            {
              v23 += 18;
              if (v23 == *((uint64_t **)this + 171))
                return;
            }
            v24 = (uint64_t *)*((_QWORD *)this + 171);
            if (v24 == v23)
              break;
            v25 = (__int128 *)v23;
            if (v23 + 18 != v24)
            {
              do
              {
                v26 = (uint64_t)v25;
                v25 += 9;
              }
              while ((uint64_t *)(webrtc::RtpPacketReceived::operator=(v26, v25) + 288) != v24);
              v24 = (uint64_t *)*((_QWORD *)this + 171);
            }
            while (v24 != (uint64_t *)v25)
            {
              v27 = (unsigned int *)*(v24 - 1);
              if (v27)
              {
                v28 = v27 + 2;
                do
                {
                  v29 = __ldaxr(v28);
                  v30 = v29 - 1;
                }
                while (__stlxr(v30, v28));
                if (!v30)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
              }
              v31 = *(v24 - 7);
              if (v31)
              {
                v32 = (unsigned int *)(v31 + 24);
                do
                {
                  v33 = __ldaxr(v32);
                  v34 = v33 - 1;
                }
                while (__stlxr(v34, v32));
                if (!v34)
                {
                  v35 = *(_QWORD *)(v31 + 16);
                  *(_QWORD *)(v31 + 16) = 0;
                  if (v35)
                    MEMORY[0x20BD0ADD4](v35, 0x1000C8077774924);
                  MEMORY[0x20BD0ADEC](v31, 0x1010C40EE34DA14);
                }
              }
              v36 = (void *)*(v24 - 11);
              if (v36)
              {
                *(v24 - 10) = (uint64_t)v36;
                operator delete(v36);
              }
              v24 -= 18;
            }
            *((_QWORD *)this + 171) = v25;
            if (v23 == (uint64_t *)v25)
              return;
          }
        }
        __break(1u);
      }
    }
  }
}

void `non-virtual thunk to'webrtc::RtpVideoStreamReceiver2::OnRecoveredPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 432) == *(unsigned __int8 *)(a2 + 1))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc");
  }
  else
  {
    webrtc::RtpVideoStreamReceiver2::ReceivePacket((webrtc::RtpVideoStreamReceiver2 *)(a1 - 8), a2);
  }
}

webrtc::RtpVideoStreamReceiver2 *webrtc::RtpVideoStreamReceiver2::OnRtpPacket(webrtc::RtpVideoStreamReceiver2 *result, uint64_t a2)
{
  webrtc::RtpVideoStreamReceiver2 *v3;

  if (*((_BYTE *)result + 456))
  {
    v3 = result;
    webrtc::RtpVideoStreamReceiver2::ReceivePacket(result, a2);
    if (*(_BYTE *)(a2 + 128))
    {
      result = (webrtc::RtpVideoStreamReceiver2 *)*((_QWORD *)v3 + 56);
      if (!result)
        return result;
      return (webrtc::RtpVideoStreamReceiver2 *)(*(uint64_t (**)(webrtc::RtpVideoStreamReceiver2 *, uint64_t))(*(_QWORD *)result + 16))(result, a2);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*((_QWORD *)v3 + 53) + 8) + 16))(*((_QWORD *)v3 + 53) + 8, a2);
    result = (webrtc::RtpVideoStreamReceiver2 *)*((_QWORD *)v3 + 56);
    if (result)
      return (webrtc::RtpVideoStreamReceiver2 *)(*(uint64_t (**)(webrtc::RtpVideoStreamReceiver2 *, uint64_t))(*(_QWORD *)result + 16))(result, a2);
  }
  return result;
}

_BYTE *`non-virtual thunk to'webrtc::RtpVideoStreamReceiver2::OnRtpPacket(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;

  if (result[440])
  {
    v3 = result;
    webrtc::RtpVideoStreamReceiver2::ReceivePacket((webrtc::RtpVideoStreamReceiver2 *)(result - 16), a2);
    if (*(_BYTE *)(a2 + 128))
    {
      result = (_BYTE *)*((_QWORD *)v3 + 54);
      if (!result)
        return result;
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, a2);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*((_QWORD *)v3 + 51) + 8) + 16))(*((_QWORD *)v3 + 51) + 8, a2);
    result = (_BYTE *)*((_QWORD *)v3 + 54);
    if (result)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, a2);
  }
  return result;
}

uint64_t webrtc::RtpVideoStreamReceiver2::RequestKeyFrame(uint64_t this)
{
  int v1;

  v1 = *(unsigned __int8 *)(this + 496);
  if (v1 == 2)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this + 472) + 488))(*(_QWORD *)(this + 472), 128);
  if (v1 == 1)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this + 472) + 488))(*(_QWORD *)(this + 472), 32);
  return this;
}

uint64_t `non-virtual thunk to'webrtc::RtpVideoStreamReceiver2::RequestKeyFrame(uint64_t this)
{
  int v1;

  v1 = *(unsigned __int8 *)(this + 472);
  if (v1 == 2)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this + 448) + 488))(*(_QWORD *)(this + 448), 128);
  if (v1 == 1)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this + 448) + 488))(*(_QWORD *)(this + 448), 32);
  return this;
}

void webrtc::RtpVideoStreamReceiver2::SendNack(uint64_t a1, uint64_t *a2)
{
  webrtc::ModuleRtpRtcpImpl2 *v3;
  uint64_t v4;
  _QWORD v5[5];
  void *__p;
  void *v7;

  v3 = *(webrtc::ModuleRtpRtcpImpl2 **)(a1 + 472);
  v4 = (uint64_t)v3 + 32;
  webrtc::ModuleRtpRtcpImpl2::GetFeedbackState(v3, (uint64_t)v5);
  webrtc::RTCPSender::SendRTCP(v4, v5, 0x40u, (unint64_t)(a2[1] - *a2) >> 1, *a2);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void `non-virtual thunk to'webrtc::RtpVideoStreamReceiver2::SendNack(uint64_t a1, uint64_t *a2)
{
  webrtc::ModuleRtpRtcpImpl2 *v3;
  uint64_t v4;
  _QWORD v5[5];
  void *__p;
  void *v7;

  v3 = *(webrtc::ModuleRtpRtcpImpl2 **)(a1 + 440);
  v4 = (uint64_t)v3 + 32;
  webrtc::ModuleRtpRtcpImpl2::GetFeedbackState(v3, (uint64_t)v5);
  webrtc::RTCPSender::SendRTCP(v4, v5, 0x40u, (unint64_t)(a2[1] - *a2) >> 1, *a2);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void webrtc::RtpVideoStreamReceiver2::SendLossNotification(webrtc::RtpVideoStreamReceiver2 *this, int a2, int a3, char a4, char a5)
{
  webrtc::ModuleRtpRtcpImpl2 *v9;
  uint64_t v10;
  _QWORD v11[5];
  void *__p;
  void *v13;

  v9 = (webrtc::ModuleRtpRtcpImpl2 *)*((_QWORD *)this + 59);
  v10 = (uint64_t)v9 + 32;
  webrtc::ModuleRtpRtcpImpl2::GetFeedbackState(v9, (uint64_t)v11);
  webrtc::RTCPSender::SendLossNotification(v10, v11, a2, a3, a4, a5);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

uint64_t webrtc::RtpVideoStreamReceiver2::OnCompleteFrames(uint64_t result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  _QWORD *v7;
  __int16 v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = result;
  v4 = a2 + 1;
  v3 = *a2;
  if ((*a2 & 1) != 0)
    v4 = (_QWORD *)*v4;
  if (v3 >= 2)
  {
    v5 = &v4[v3 >> 1];
    v6 = (uint64_t **)(result + 848);
    do
    {
      v7 = (_QWORD *)*v4;
      v8 = *(_WORD *)(*v4 + 4406);
      v9 = *(uint64_t **)(*v4 + 2408);
      v10 = *v6;
      v11 = (uint64_t **)(v2 + 848);
      v12 = (uint64_t **)(v2 + 848);
      if (*v6)
      {
        while (1)
        {
          while (1)
          {
            v12 = (uint64_t **)v10;
            v13 = (uint64_t *)v10[4];
            if ((uint64_t)v9 >= (uint64_t)v13)
              break;
            v10 = *v12;
            v11 = v12;
            if (!*v12)
              goto LABEL_14;
          }
          if ((uint64_t)v13 >= (uint64_t)v9)
            break;
          v10 = v12[1];
          if (!v10)
          {
            v11 = v12 + 1;
            goto LABEL_14;
          }
        }
      }
      else
      {
LABEL_14:
        v14 = (uint64_t *)v12;
        v12 = (uint64_t **)operator new(0x30uLL);
        v12[4] = v9;
        *((_WORD *)v12 + 20) = 0;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = v14;
        *v11 = (uint64_t *)v12;
        v15 = **(_QWORD **)(v2 + 840);
        v16 = (uint64_t *)v12;
        if (v15)
        {
          *(_QWORD *)(v2 + 840) = v15;
          v16 = *v11;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 848), v16);
        ++*(_QWORD *)(v2 + 856);
        v7 = (_QWORD *)*v4;
        v9 = *(uint64_t **)(*v4 + 2408);
      }
      *((_WORD *)v12 + 20) = v8;
      v17 = *(uint64_t **)(v2 + 1240);
      if ((uint64_t)v17 <= (uint64_t)v9)
        v17 = v9;
      *(_QWORD *)(v2 + 1240) = v17;
      v18 = *(_QWORD *)(v2 + 488);
      *v4 = 0;
      v19 = (uint64_t)v7;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 16))(v18, &v19);
      result = v19;
      v19 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      ++v4;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t webrtc::RtpVideoStreamReceiver2::OnDecryptedFrame(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 816);
  v10 = *a2;
  *a2 = 0;
  v12 = v10;
  webrtc::RtpFrameReferenceFinder::ManageFrame(v9, &v12, a3, a4, a5, a6, a7, a8, v13);
  webrtc::RtpVideoStreamReceiver2::OnCompleteFrames(a1, v13);
  if (v13[0])
    absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::DestroyContents(v13);
  result = v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

uint64_t `non-virtual thunk to'webrtc::RtpVideoStreamReceiver2::OnDecryptedFrame(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v8 = a1 - 40;
  v9 = *(_QWORD *)(a1 + 776);
  v10 = *a2;
  *a2 = 0;
  v12 = v10;
  webrtc::RtpFrameReferenceFinder::ManageFrame(v9, &v12, a3, a4, a5, a6, a7, a8, v13);
  webrtc::RtpVideoStreamReceiver2::OnCompleteFrames(v8, v13);
  if (v13[0])
    absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::DestroyContents(v13);
  result = v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

uint64_t webrtc::RtpVideoStreamReceiver2::OnDecryptionStatusChange(uint64_t result, unsigned int a2)
{
  *(_BYTE *)(result + 1024) = a2 < 2;
  return result;
}

uint64_t `non-virtual thunk to'webrtc::RtpVideoStreamReceiver2::OnDecryptionStatusChange(uint64_t result, unsigned int a2)
{
  *(_BYTE *)(result + 976) = a2 < 2;
  return result;
}

_QWORD *webrtc::RtpVideoStreamReceiver2::SetFrameDecryptor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *result;
  _QWORD *p_p;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  unint64_t v14;
  unsigned __int8 v15;

  v3 = *(_QWORD *)(a1 + 1016);
  if (!v3)
  {
    v5 = *(_QWORD *)(a1 + 64);
    v3 = operator new();
    result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v5 + 16))(&__p, v5, "WebRTC-GenericDescriptorAuth", 28);
    if ((char)v15 < 0)
    {
      v8 = v14;
      if ((v14 & 0x8000000000000000) != 0 || (p_p = __p, v14) && !__p)
      {
        __break(1u);
        return result;
      }
    }
    else
    {
      p_p = &__p;
      v8 = v15;
    }
    if (v8 >= 8)
    {
      v9 = *p_p != *(_QWORD *)"Disabled";
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
    }
    else
    {
      v9 = 1;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
    }
    operator delete(__p);
LABEL_12:
    *(_BYTE *)v3 = v9;
    *(_BYTE *)(v3 + 1) = 0;
    *(_DWORD *)(v3 + 4) = 3;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = a1 + 40;
    *(_QWORD *)(v3 + 24) = a1 + 48;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    v10 = *(_QWORD *)(a1 + 1016);
    *(_QWORD *)(a1 + 1016) = v3;
    if (v10)
    {
      std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::~deque[abi:sn180100]((void **)(v10 + 32));
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      MEMORY[0x20BD0ADEC](v10, 0x10E0C40609C190FLL);
      v3 = *(_QWORD *)(a1 + 1016);
    }
  }
  v12 = *a2;
  *a2 = 0;
  result = *(_QWORD **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v12;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

uint64_t webrtc::RtpVideoStreamReceiver2::SetLossNotificationEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this;
  v3 = *(_QWORD *)(this + 600);
  if (a2)
  {
    if (!v3)
    {
      this = operator new();
      *(_QWORD *)this = v2 + 504;
      *(_QWORD *)(this + 8) = v2 + 520;
      *(_BYTE *)(this + 16) = 0;
      *(_BYTE *)(this + 24) = 0;
      *(_BYTE *)(this + 32) = 0;
      *(_BYTE *)(this + 34) = 0;
      *(_BYTE *)(this + 36) = 1;
      *(_BYTE *)(this + 38) = 0;
      *(_BYTE *)(this + 40) = 0;
      *(_QWORD *)(this + 64) = 0;
      *(_QWORD *)(this + 56) = 0;
      *(_QWORD *)(this + 48) = this + 56;
      v4 = *(_QWORD *)(v2 + 600);
      *(_QWORD *)(v2 + 600) = this;
      if (v4)
      {
        std::__tree<sigslot::_signal_base_interface *>::destroy(v4 + 48, *(_QWORD **)(v4 + 56));
        JUMPOUT(0x20BD0ADECLL);
      }
    }
  }
  else if (v3)
  {
    *(_QWORD *)(this + 600) = 0;
    std::__tree<sigslot::_signal_base_interface *>::destroy(v3 + 48, *(_QWORD **)(v3 + 56));
    this = MEMORY[0x20BD0ADEC](v3, 0x1060C40498AD98FLL);
    if (*(_BYTE *)(v2 + 590))
      *(_BYTE *)(v2 + 590) = 0;
  }
  return this;
}

uint64_t webrtc::RtpVideoStreamReceiver2::SetNackHistory(webrtc::RtpVideoStreamReceiver2 *this, TimeDelta a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  webrtc::NackRequester *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (unint64_t)a2.var0 >> 3;
  v5 = (unint64_t)a2.var0 / 0x3E8;
  if ((unint64_t)a2.var0 % 0x3E8 > 0x1F3)
    ++v5;
  if (-a2.var0 % 0x3E8uLL <= 0x1F4)
    v6 = 0;
  else
    v6 = -1;
  v7 = v6 - -a2.var0 / 0x3E8uLL;
  if (a2.var0 >= 0)
    v7 = v5;
  v8 = (webrtc::NackRequester *)*((_QWORD *)this + 74);
  if (!v7)
  {
    *((_QWORD *)this + 74) = 0;
    if (!v8)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (!v8)
  {
    v9 = *((_QWORD *)this + 8);
    v10 = operator new();
    webrtc::NackRequester::NackRequester(v10, *((_QWORD *)this + 9), *((uint64_t **)this + 60), *((_QWORD *)this + 10), (uint64_t)this + 512, (uint64_t)this + 504, v9);
    v8 = (webrtc::NackRequester *)*((_QWORD *)this + 74);
    *((_QWORD *)this + 74) = v10;
    if (v8)
    {
LABEL_13:
      webrtc::NackRequester::~NackRequester(v8);
      MEMORY[0x20BD0ADEC]();
    }
  }
LABEL_14:
  v11 = (unint64_t)((v4 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
  if (a2.var0 - 1000 * v11 > 0x1F3)
    ++v11;
  if (-a2.var0 % 0x3E8uLL <= 0x1F4)
    v12 = 0;
  else
    v12 = -1;
  v13 = v12 - -a2.var0 / 0x3E8uLL;
  if (a2.var0 >= 0)
    v13 = v11;
  if (v13 <= 0)
    v14 = 50;
  else
    v14 = 450;
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 53) + 40))(*((_QWORD *)this + 53), *(unsigned int *)(*((_QWORD *)this + 11) + 32), v14);
}

uint64_t webrtc::RtpVideoStreamReceiver2::ManageFrame(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 816);
  v10 = *a2;
  *a2 = 0;
  v12 = v10;
  webrtc::RtpFrameReferenceFinder::ManageFrame(v9, &v12, a3, a4, a5, a6, a7, a8, v13);
  webrtc::RtpVideoStreamReceiver2::OnCompleteFrames(a1, v13);
  if (v13[0])
    absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::DestroyContents(v13);
  result = v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

uint64_t `non-virtual thunk to'webrtc::RtpVideoStreamReceiver2::ManageFrame(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v8 = a1 - 56;
  v9 = *(_QWORD *)(a1 + 760);
  v10 = *a2;
  *a2 = 0;
  v12 = v10;
  webrtc::RtpFrameReferenceFinder::ManageFrame(v9, &v12, a3, a4, a5, a6, a7, a8, v13);
  webrtc::RtpVideoStreamReceiver2::OnCompleteFrames(v8, v13);
  if (v13[0])
    absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::DestroyContents(v13);
  result = v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

uint64_t webrtc::RtpVideoStreamReceiver2::ReceivePacket(webrtc::RtpPacketReceived const&)::$_1::operator()(unint64_t a1, uint64_t x1_0, uint64_t *a3)
{
  std::string::value_type *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  webrtc::NackRequester *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string::value_type **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  int v50;
  uint64_t v51;
  char *v52;
  uint64_t **v53;
  char *v54;
  uint64_t v55;
  char *v56;
  int *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int *v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  pthread_mutex_t *v69;
  uint64_t v70;
  BOOL v71;
  BOOL v72;
  BOOL v73;
  char v74;
  int v75;
  int v76;
  char v77;
  unint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  unsigned int v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  unint64_t v99;
  unsigned __int8 v100;
  char v101;
  uint64_t v102;
  int v103;
  char *v104;
  uint64_t v105;
  char v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  std::string *v114;
  std::string *v115;
  int v116;
  std::string::size_type v117;
  std::string::size_type size;
  uint64_t v119;
  uint64_t v120;
  std::string *v121;
  std::string::size_type v122;
  std::string::size_type v123;
  uint64_t v124;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  char *v132;
  std::string *v133;
  std::string *v134;
  int v135;
  std::string::size_type v136;
  std::string::size_type v137;
  std::string *v138;
  char *v139;
  std::string::size_type v140;
  std::string *v141;
  std::string *v142;
  int v143;
  std::string::size_type v144;
  std::string::size_type v145;
  std::string *v146;
  std::string::size_type v147;
  std::string::size_type v148;
  std::string *v149;
  int v150;
  TimeDelta v151;
  std::string::size_type v152;
  unsigned __int8 v153;
  size_t v154;
  BOOL v155;
  std::string *v156;
  _OWORD *v157;
  std::string::size_type v158;
  int v159;
  std::string::size_type v160;
  std::string::size_type v161;
  uint64_t v162;
  char *v163;
  std::string::size_type v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  uint64_t v167;
  unsigned __int8 *v168;
  int v169;
  int v170;
  unsigned int v171;
  std::string::size_type v172;
  std::string::size_type v173;
  _BYTE *v174;
  _BYTE *v175;
  std::string::size_type v176;
  unsigned __int8 *v177;
  unsigned __int8 *v178;
  uint64_t v179;
  unint64_t v180;
  unsigned __int8 *v181;
  int v182;
  int v183;
  std::string::size_type v184;
  std::string::size_type v185;
  _BYTE *v186;
  _BYTE *v187;
  std::string::size_type v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unsigned __int8 *v194;
  unsigned __int8 *v195;
  uint64_t v196;
  unsigned __int8 *v197;
  unsigned __int8 *v198;
  uint64_t v199;
  unint64_t v200;
  int v201;
  int v202;
  unint64_t *v203;
  __int16 v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  int v208;
  _BOOL4 v209;
  int v210;
  unsigned __int8 v211;
  unsigned __int8 v212;
  int v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int16 v219;
  int v220;
  unsigned __int8 *v221;
  unsigned __int8 *v222;
  uint64_t v223;
  unint64_t v224;
  unsigned __int8 *v225;
  _BOOL4 v226;
  int v227;
  int v228;
  int v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  int v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  int v244;
  _BOOL4 v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  unsigned __int8 *v249;
  unsigned __int8 *v250;
  int v251;
  webrtc::FrameDependencyStructure *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  BOOL v260;
  BOOL v261;
  BOOL v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned __int8 *v272;
  unsigned __int8 *v273;
  int v274;
  webrtc::LossNotificationController *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  uint64_t v280;
  unsigned int v281;
  BOOL v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t *v288;
  uint64_t *v289;
  char v290;
  std::string::value_type **v291;
  unsigned __int8 *v292;
  __int16 v293;
  __int16 v294;
  std::string::value_type *v295;
  unint64_t v296;
  _QWORD *v297;
  size_t v299;
  int v300;
  int v301;
  const char *v302;
  size_t v303;
  std::string::value_type *v304;
  uint64_t v305;
  uint64_t v306;
  const char *v307;
  int v308;
  _BYTE *v309;
  _QWORD **v310;
  int v311;
  uint64_t v312;
  unsigned int *v313;
  unsigned int v314;
  unsigned int v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  unsigned int v320;
  uint64_t v321;
  _BOOL8 v322;
  _BOOL8 v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  webrtc::H26xPacketBuffer *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int *v340;
  unsigned int v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int *v356;
  unsigned int v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int *v361;
  unsigned int v362;
  unsigned int v363;
  uint64_t v364;
  unsigned int *v365;
  unsigned int v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int *v370;
  unsigned int v371;
  unsigned int v372;
  uint64_t v373;
  uint64_t v375;
  uint64_t v376;
  unsigned int *v377;
  unsigned int v378;
  unsigned int v379;
  uint64_t v380;
  uint64_t v381;
  unsigned int *v382;
  unsigned int v383;
  unsigned int v384;
  uint64_t v385;
  unint64_t *v386;
  _BYTE *v387;
  __int16 v388;
  webrtc::FrameDependencyStructure *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  webrtc::FrameDependencyStructure *v397;
  unint64_t v398;
  uint64_t *v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  int v403;
  int v404;
  int v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  unint64_t v411;
  _DWORD *v412;
  _QWORD v413[3];
  std::string::value_type *__p_new_stuff[5];
  _QWORD v415[2];
  char v416;
  void *__p;
  char v418;
  void *v419;
  char v420;
  void *v421;
  char v422;
  __int128 v423;
  __int128 v424;
  _OWORD v425[6];
  char v426;
  char v427;
  _BYTE v428[1681];
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  char v432;
  _BYTE v433[32];
  __int128 v434;
  __int128 v435;
  unint64_t v436;
  void *v437;
  uint64_t v438;
  void *v439;
  int v440;
  int v441;
  char v442;
  char v443;
  char v444;
  webrtc::FrameDependencyStructure *v445;
  uint64_t v446;
  TimeDelta v447;

  v5 = a3;
  v446 = *MEMORY[0x24BDAC8D0];
  v8 = a3[2];
  v7 = a3[3];
  v9 = a3[11];
  v413[0] = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 24);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v413[1] = a3[12] + v8;
  v413[2] = v7;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)x1_0 + 16))(v415, x1_0, v413);
  v12 = v413[0];
  if (v413[0])
  {
    v13 = (unsigned int *)(v413[0] + 24);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      v16 = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(v12 + 16) = 0;
      if (v16)
        MEMORY[0x20BD0ADD4](v16, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v12, 0x1010C40EE34DA14);
    }
  }
  if (!v432)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc");
    v31 = 0;
    goto LABEL_654;
  }
  v17 = *(webrtc::NackRequester **)(a1 + 592);
  v18 = 0xFFFFFFFFLL;
  if (!v17)
  {
    v405 = -1;
LABEL_19:
    v408 = v429;
    v429 = 0;
    v400 = v430;
    v32 = v431;
    v430 = 0;
    v431 = 0;
    v33 = operator new();
    *(_BYTE *)v33 = 0;
    *(_WORD *)(v33 + 1) = *(_WORD *)v5;
    *(_WORD *)(v33 + 4) = *((_WORD *)v5 + 2);
    *(_DWORD *)(v33 + 8) = *((_DWORD *)v5 + 2);
    *(_DWORD *)(v33 + 12) = -1;
    *(_QWORD *)(v33 + 16) = 0;
    v399 = (uint64_t *)(v33 + 16);
    *(_QWORD *)(v33 + 24) = 0;
    *(_QWORD *)(v33 + 32) = 0;
    v409 = (_QWORD *)(v33 + 40);
    std::__optional_move_base<webrtc::RTPVideoHeader::GenericDescriptorInfo,false>::__optional_move_base[abi:sn180100](v33 + 40, (uint64_t)v415);
    v34 = v424;
    *(_OWORD *)(v33 + 192) = v423;
    *(_OWORD *)(v33 + 208) = v34;
    *(_OWORD *)(v33 + 224) = v425[0];
    *(_OWORD *)(v33 + 237) = *(_OWORD *)((char *)v425 + 13);
    *(_BYTE *)(v33 + 256) = 0;
    *(_BYTE *)(v33 + 324) = 0;
    if (v427)
    {
      v35 = v425[3];
      v36 = v425[4];
      *(_BYTE *)(v33 + 320) = v426;
      *(_OWORD *)(v33 + 256) = v425[2];
      *(_OWORD *)(v33 + 272) = v35;
      v37 = v425[5];
      *(_OWORD *)(v33 + 288) = v36;
      *(_OWORD *)(v33 + 304) = v37;
      *(_BYTE *)(v33 + 324) = 1;
    }
    v406 = v33 + 328;
    memcpy((void *)(v33 + 328), v428, 0x691uLL);
    v38 = *((unsigned __int16 *)v5 + 2);
    v39 = *((unsigned __int16 *)v5 + 2);
    if (*(_BYTE *)(a1 + 1330))
    {
      v40 = *(unsigned __int16 *)(a1 + 1328);
      v282 = v38 >= v40;
      LODWORD(v41) = v38 - v40;
      v42 = (_DWORD)v41 != 0 && v282;
      v43 = (v41 & 0x8000u) == 0;
      if ((_DWORD)v41 == 0x8000)
        v43 = v42;
      if (v43)
        v41 = (unsigned __int16)v41;
      else
        v41 |= 0xFFFFFFFFFFFF0000;
      v39 = v41 + *(_QWORD *)(a1 + 1320);
    }
    v407 = v32;
    *(_QWORD *)(a1 + 1320) = v39;
    *(_WORD *)(a1 + 1328) = v38;
    v411 = a1;
    *(_BYTE *)(a1 + 1330) = 1;
    v403 = *((_DWORD *)v5 + 3);
    v44 = v5[12];
    v45 = *(_QWORD *)(v5[11] + 16);
    v46 = *(_BYTE *)(v45 + v44) & 0xF;
    if ((*(_BYTE *)(v45 + v44) & 0xF) != 0)
    {
      v47 = (char *)operator new(4 * v46);
      bzero(v47, 4 * v46);
      v48 = 0;
      do
      {
        *(_DWORD *)&v47[v48] = bswap32(*(_DWORD *)(v44 + v45 + 12 + v48));
        v48 += 4;
      }
      while (4 * v46 != v48);
      v49 = &v47[4 * v46];
    }
    else
    {
      v47 = 0;
      v49 = 0;
    }
    v402 = v33 + 256;
    v410 = v33;
    v50 = *((_DWORD *)v5 + 2);
    v51 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v411 + 80) + 16))(*(_QWORD *)(v411 + 80));
    v52 = *(char **)(v411 + 1344);
    if (!v52)
    {
      v53 = (uint64_t **)(v411 + 1344);
      v54 = (char *)(v411 + 1344);
      goto LABEL_43;
    }
    do
    {
      while (1)
      {
        v54 = v52;
        v55 = *((_QWORD *)v52 + 4);
        if (v39 >= v55)
          break;
        v52 = *(char **)v54;
        v53 = (uint64_t **)v54;
        if (!*(_QWORD *)v54)
          goto LABEL_43;
      }
      if (v55 >= v39)
      {
        v57 = (int *)(v54 + 40);
        if (v47)
          operator delete(v47);
        v58 = v411;
        goto LABEL_49;
      }
      v52 = (char *)*((_QWORD *)v54 + 1);
    }
    while (v52);
    v53 = (uint64_t **)(v54 + 8);
LABEL_43:
    v56 = v54;
    v54 = (char *)operator new(0x90uLL);
    *((_DWORD *)v54 + 10) = v403;
    v57 = (int *)(v54 + 40);
    *((_QWORD *)v54 + 4) = v39;
    *((_QWORD *)v54 + 6) = v47;
    *((_QWORD *)v54 + 7) = v49;
    *((_QWORD *)v54 + 8) = v49;
    *((_DWORD *)v54 + 18) = v50;
    *((_QWORD *)v54 + 10) = v51;
    *((_WORD *)v54 + 44) = 0;
    v54[96] = 0;
    v54[120] = 0;
    v54[128] = 0;
    v54[136] = 0;
    *(_QWORD *)v54 = 0;
    *((_QWORD *)v54 + 1) = 0;
    *((_QWORD *)v54 + 2) = v56;
    *v53 = (uint64_t *)v54;
    v58 = v411;
    v59 = (uint64_t *)v54;
    v60 = **(_QWORD **)(v411 + 1336);
    if (v60)
    {
      *(_QWORD *)(v411 + 1336) = v60;
      v59 = *v53;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v411 + 1344), v59);
    ++*(_QWORD *)(v411 + 1352);
LABEL_49:
    v61 = (int *)*((_QWORD *)v54 + 6);
    if (*((int **)v54 + 7) == v61)
      v61 = v57;
    v401 = *((_DWORD *)v54 + 18);
    v404 = *v61;
    if (!*((_BYTE *)v5 + 38))
      goto LABEL_55;
    v62 = (unsigned __int8 *)v5[7];
    v63 = (unsigned __int8 *)v5[8];
    if (v62 == v63)
      goto LABEL_55;
    while (*v62 != *((unsigned __int8 *)v5 + 38))
    {
      v62 += 4;
      if (v62 == v63)
        goto LABEL_55;
    }
    v81 = v5[11];
    if (v81)
    {
      v82 = *(_QWORD *)(v81 + 16) + v5[12];
      v83 = v62[1];
      if (!v62[1])
        goto LABEL_55;
    }
    else
    {
      v82 = 0;
      v83 = v62[1];
      if (!v62[1])
      {
LABEL_55:
        LOBYTE(v64) = 0;
        v65 = 0;
        v66 = 1;
        goto LABEL_56;
      }
    }
    v124 = *((unsigned __int16 *)v62 + 1);
    LODWORD(__p_new_stuff[0]) = 0;
    *(_DWORD *)((char *)__p_new_stuff + 3) = 0;
    if (v83 == 16 || v83 == 8)
    {
      v126 = (unsigned __int8 *)(v82 + v124);
      LOBYTE(v64) = _byteswap_uint64(*(_QWORD *)v126);
      v65 = (((unint64_t)*v126 << 56) | ((unint64_t)v126[1] << 48) | ((unint64_t)v126[2] << 40) | ((unint64_t)v126[3] << 32) | ((unint64_t)v126[4] << 24) | ((unint64_t)v126[5] << 16) | ((unint64_t)v126[6] << 8)) >> 8;
      if (v83 == 8)
      {
        v398 = 0;
        LOBYTE(v57) = 0;
        v66 = 0;
      }
      else
      {
        v66 = 0;
        v398 = bswap64(*((_QWORD *)v126 + 1));
        LOBYTE(v57) = 1;
      }
    }
    else
    {
      LOBYTE(v64) = 0;
      v65 = 0;
      v398 = 0;
      LOBYTE(v57) = 0;
      v66 = 1;
    }
LABEL_56:
    v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v58 + 1104) + 16))(*(_QWORD *)(v58 + 1104));
    v68 = v58;
    v69 = (pthread_mutex_t *)(v58 + 1112);
    pthread_mutex_lock(v69);
    if (v66)
    {
      v70 = *(_QWORD *)(v68 + 1176);
      v71 = v67 == 0x7FFFFFFFFFFFFFFFLL || v70 == 0x8000000000000000;
      if (!v71
        && (v67 != 0x8000000000000000 ? (v72 = v70 == 0x7FFFFFFFFFFFFFFFLL) : (v72 = 1),
            !v72 ? (v73 = v67 - v70 <= 5000000) : (v73 = 1),
            v73 && *(_DWORD *)(v68 + 1184) == v404 && *(_DWORD *)(v68 + 1192) == 90000))
      {
        LOBYTE(v66) = 0;
        v64 = (uint64_t)((unint64_t)(v401 - *(_DWORD *)(v68 + 1188)) << 32) / 90000
            + *(_QWORD *)(v68 + 1200);
        LOBYTE(v57) = *(_BYTE *)(v68 + 1216);
        v68 = *(_QWORD *)(v68 + 1208);
        v65 = v64 >> 8;
        v74 = 1;
      }
      else
      {
        v65 = 0;
        LOBYTE(v64) = 0;
        v74 = 0;
        *(_QWORD *)(v68 + 1176) = 0x8000000000000000;
        LOBYTE(v66) = 1;
      }
    }
    else
    {
      *(_DWORD *)(v68 + 1184) = v404;
      *(_DWORD *)(v68 + 1188) = v401;
      *(_DWORD *)(v68 + 1192) = 90000;
      *(_QWORD *)(v68 + 1200) = v64 | (v65 << 8);
      v75 = *(_DWORD *)((char *)__p_new_stuff + 3);
      *(_DWORD *)(v68 + 1220) = *(_DWORD *)((char *)__p_new_stuff + 3);
      v76 = (int)__p_new_stuff[0];
      *(_DWORD *)(v68 + 1217) = __p_new_stuff[0];
      *(_QWORD *)(v68 + 1208) = v398;
      *(_BYTE *)(v68 + 1216) = (_BYTE)v57;
      *(_QWORD *)(v68 + 1176) = v67;
      v68 = v398;
      *(_DWORD *)v433 = v76;
      v74 = 1;
      *(_DWORD *)&v433[3] = v75;
    }
    pthread_mutex_unlock(v69);
    *((_QWORD *)v54 + 12) = v64 | (v65 << 8);
    *((_QWORD *)v54 + 13) = v68;
    v54[112] = (char)v57;
    *(_DWORD *)(v54 + 113) = *(_DWORD *)v433;
    *((_DWORD *)v54 + 29) = *(_DWORD *)&v433[3];
    v54[120] = v74;
    v4 = v411;
    v18 = (unint64_t)v409;
    if ((v66 & 1) == 0)
    {
      v77 = v54[112];
      if (v77 && (v77 = *(_BYTE *)(v411 + 1232)) != 0)
      {
        v78 = 1000 * llround((double)(uint64_t)(*(_QWORD *)(v411 + 1224) + v68) * 0.000000232830644);
        v77 = 1;
      }
      else
      {
        v78 = 0;
      }
      *((_QWORD *)v54 + 16) = v78;
      v54[136] = v77;
    }
    v3 = (std::string::value_type *)v410;
    *(_DWORD *)(v410 + 200) = 0;
    *(_BYTE *)(v410 + 204) = 0;
    *(_BYTE *)(v410 + 252) = -1;
    *(_BYTE *)(v410 + 206) |= *(_BYTE *)v5;
    if (*((_BYTE *)v5 + 39))
    {
      v79 = (unsigned __int8 *)v5[7];
      v80 = (unsigned __int8 *)v5[8];
      if (v79 != v80)
      {
        while (*v79 != *((unsigned __int8 *)v5 + 39))
        {
          v79 += 4;
          if (v79 == v80)
            goto LABEL_92;
        }
        v84 = v5[11];
        if (v84)
          v84 = *(_QWORD *)(v84 + 16) + v5[12];
        if (v79[1] == 1)
          *(_DWORD *)(v410 + 200) = 90 * (*(_BYTE *)(v84 + *((unsigned __int16 *)v79 + 1)) & 3);
      }
    }
LABEL_92:
    if (*((_BYTE *)v5 + 43))
    {
      v85 = (unsigned __int8 *)v5[7];
      v86 = (unsigned __int8 *)v5[8];
      if (v85 != v86)
      {
        while (*v85 != *((unsigned __int8 *)v5 + 43))
        {
          v85 += 4;
          if (v85 == v86)
            goto LABEL_102;
        }
        v87 = v5[11];
        if (v87)
          v87 = *(_QWORD *)(v87 + 16) + v5[12];
        if (v85[1] == 1)
        {
          v88 = *(unsigned __int8 *)(v87 + *((unsigned __int16 *)v85 + 1));
          if (v88 <= 0x3F)
            *(_BYTE *)(v410 + 204) = v88 & 1;
        }
      }
    }
LABEL_102:
    if (*((_BYTE *)v5 + 45))
    {
      v89 = (unsigned __int8 *)v5[7];
      v90 = (unsigned __int8 *)v5[8];
      if (v89 != v90)
      {
        while (*v89 != *((unsigned __int8 *)v5 + 45))
        {
          v89 += 4;
          if (v89 == v90)
            goto LABEL_106;
        }
        v102 = v5[11];
        if (v102)
          v102 = *(_QWORD *)(v102 + 16) + v5[12];
        v103 = v89[1];
        if (v89[1])
        {
          v104 = (char *)(v102 + *((unsigned __int16 *)v89 + 1));
          if (v103 == 12)
          {
            v106 = 0;
            v105 = -1;
            goto LABEL_179;
          }
          if (v103 == 13)
          {
            v105 = 0;
            v106 = *v104;
LABEL_179:
            *(_BYTE *)(v410 + 252) = v106;
            v132 = &v104[v105];
            *(_WORD *)(v410 + 240) = bswap32(*(unsigned __int16 *)(v132 + 1)) >> 16;
            *(_WORD *)(v410 + 242) = bswap32(*(unsigned __int16 *)(v132 + 3)) >> 16;
            *(_WORD *)(v410 + 244) = bswap32(*(unsigned __int16 *)(v132 + 5)) >> 16;
            *(_WORD *)(v410 + 246) = bswap32(*(unsigned __int16 *)(v132 + 7)) >> 16;
            *(_WORD *)(v410 + 248) = bswap32(*(unsigned __int16 *)(v132 + 9)) >> 16;
            *(_WORD *)(v410 + 250) = bswap32(*(unsigned __int16 *)(v132 + 11)) >> 16;
          }
        }
      }
    }
LABEL_106:
    if (*(_BYTE *)(v411 + 344) && *(_BYTE *)(v411 + 416))
    {
      *(_OWORD *)(v410 + 216) = xmmword_208F060A0;
      *(_BYTE *)(v410 + 232) = 1;
      v91 = *(_DWORD *)(v411 + 412);
      if ((v91 & 0x80000000) == 0
        && ((v92 = 1000 * v91, v93 = *(_DWORD *)(v411 + 340), v94 = 1000 * v93, v92 <= v94)
          ? (v95 = v93 <= 40950)
          : (v95 = 0),
            v95))
      {
        *(_QWORD *)(v410 + 216) = v92;
        *(_QWORD *)(v410 + 224) = v94;
        a1 = v410 + 192;
        if (*((_BYTE *)v5 + 128))
          goto LABEL_323;
      }
      else
      {
        *(_BYTE *)(v410 + 232) = 0;
        a1 = v410 + 192;
        if (*((_BYTE *)v5 + 128))
          goto LABEL_323;
      }
LABEL_130:
      v107 = *(_DWORD *)a1;
      v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v411 + 80) + 16))(*(_QWORD *)(v411 + 80));
      v109 = v108;
      if (v107 == 3)
      {
        v110 = *((_DWORD *)v5 + 2);
      }
      else
      {
        if (!*(_BYTE *)(v411 + 976))
          goto LABEL_137;
        v110 = *((_DWORD *)v5 + 2);
        if (*(_DWORD *)(v411 + 972) != v110)
          goto LABEL_137;
      }
      *(_DWORD *)(v411 + 972) = v110;
      *(_BYTE *)(v411 + 976) = 1;
      if (!*(_BYTE *)(v411 + 1008))
        *(_BYTE *)(v411 + 1008) = 1;
      *(_QWORD *)(v411 + 1000) = v108;
LABEL_137:
      if (!*(_BYTE *)(v411 + 992))
        *(_BYTE *)(v411 + 992) = 1;
      *(_QWORD *)(v411 + 984) = v108;
      *(_DWORD *)(v411 + 964) = *((_DWORD *)v5 + 2);
      *(_BYTE *)(v411 + 968) = 1;
      v111 = v108 / 0x3E8uLL;
      if (v108 % 0x3E8uLL > 0x1F3)
        ++v111;
      if (-v108 % 0x3E8uLL <= 0x1F4)
        v112 = 0;
      else
        v112 = -1;
      if (v108 < 0)
        v111 = v112 - -v108 / 0x3E8uLL;
      if ((uint64_t)(v111 - *(_QWORD *)(v411 + 464)) < 10001)
        goto LABEL_323;
      v113 = (char *)operator new(0x30uLL);
      if (v113 <= "Packet received on SSRC: " && v113 + 25 > "Packet received on SSRC: ")
        goto LABEL_729;
      strcpy(v113, "Packet received on SSRC: ");
      *(_QWORD *)v433 = v113;
      *(_OWORD *)&v433[8] = xmmword_208F1AC00;
      v114 = rtc::StringBuilder::operator<<((std::string *)v433, *((_DWORD *)v5 + 3));
      v115 = v114;
      v116 = SHIBYTE(v114->__r_.__value_.__r.__words[2]);
      if (v116 >= 0)
        v117 = 22;
      else
        v117 = (v114->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v116 >= 0)
        size = HIBYTE(v114->__r_.__value_.__r.__words[2]);
      else
        size = v114->__r_.__value_.__l.__size_;
      if (v117 - size >= 0x14)
      {
        if (v116 >= 0)
          v121 = v114;
        else
          v121 = (std::string *)v114->__r_.__value_.__r.__words[0];
        v122 = (std::string::size_type)v121 + size;
        if ((char *)v121 + size <= " with payload type: " && v122 + 20 > (unint64_t)" with payload type: ")
          goto LABEL_729;
        *(_DWORD *)(v122 + 16) = 540697968;
        *(_OWORD *)v122 = *(_OWORD *)" with payload type: ";
        v123 = size + 20;
        if (SHIBYTE(v114->__r_.__value_.__r.__words[2]) < 0)
          v114->__r_.__value_.__l.__size_ = v123;
        else
          *((_BYTE *)&v114->__r_.__value_.__s + 23) = v123 & 0x7F;
        v121->__r_.__value_.__s.__data_[v123] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(v114, v117, size - v117 + 20, size, size, 0, 0x14uLL, " with payload type: ");
      }
      v133 = rtc::StringBuilder::operator<<(v115, *((unsigned __int8 *)v5 + 1));
      v134 = v133;
      v135 = SHIBYTE(v133->__r_.__value_.__r.__words[2]);
      if (v135 >= 0)
        v136 = 22;
      else
        v136 = (v133->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v135 >= 0)
        v137 = HIBYTE(v133->__r_.__value_.__r.__words[2]);
      else
        v137 = v133->__r_.__value_.__l.__size_;
      if (v136 - v137 >= 0xD)
      {
        if (v135 >= 0)
          v138 = v133;
        else
          v138 = (std::string *)v133->__r_.__value_.__r.__words[0];
        v139 = (char *)v138 + v137;
        if ((char *)v138 + v137 <= ", timestamp: " && v139 + 13 > ", timestamp: ")
          goto LABEL_729;
        qmemcpy(v139, ", timestamp: ", 13);
        v140 = v137 + 13;
        if (SHIBYTE(v133->__r_.__value_.__r.__words[2]) < 0)
          v133->__r_.__value_.__l.__size_ = v140;
        else
          *((_BYTE *)&v133->__r_.__value_.__s + 23) = v140 & 0x7F;
        v138->__r_.__value_.__s.__data_[v140] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(v133, v136, v137 - v136 + 13, v137, v137, 0, 0xDuLL, ", timestamp: ");
      }
      v141 = rtc::StringBuilder::operator<<(v134, *((_DWORD *)v5 + 2));
      v142 = v141;
      v143 = SHIBYTE(v141->__r_.__value_.__r.__words[2]);
      if (v143 >= 0)
        v144 = 22;
      else
        v144 = (v141->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v143 >= 0)
        v145 = HIBYTE(v141->__r_.__value_.__r.__words[2]);
      else
        v145 = v141->__r_.__value_.__l.__size_;
      if (v144 - v145 >= 0x13)
      {
        if (v143 >= 0)
          v146 = v141;
        else
          v146 = (std::string *)v141->__r_.__value_.__r.__words[0];
        v147 = (std::string::size_type)v146 + v145;
        if ((char *)v146 + v145 <= ", sequence number: " && v147 + 19 > (unint64_t)", sequence number: ")
          goto LABEL_729;
        *(_DWORD *)(v147 + 15) = 540701285;
        *(_OWORD *)v147 = *(_OWORD *)", sequence number: ";
        v148 = v145 + 19;
        if (SHIBYTE(v141->__r_.__value_.__r.__words[2]) < 0)
          v141->__r_.__value_.__l.__size_ = v148;
        else
          *((_BYTE *)&v141->__r_.__value_.__s + 23) = v148 & 0x7F;
        v146->__r_.__value_.__s.__data_[v148] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(v141, v144, v145 - v144 + 19, v145, v145, 0, 0x13uLL, ", sequence number: ");
      }
      v149 = rtc::StringBuilder::operator<<(v142, *((unsigned __int16 *)v5 + 2));
      v4 = (uint64_t)v149;
      v150 = SHIBYTE(v149->__r_.__value_.__r.__words[2]);
      if (v150 >= 0)
        v151.var0 = 22;
      else
        v151.var0 = (v149->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v150 >= 0)
        v152 = HIBYTE(v149->__r_.__value_.__r.__words[2]);
      else
        v152 = v149->__r_.__value_.__l.__size_;
      if (v151.var0 - v152 >= 0x10)
      {
        if (v150 >= 0)
          v156 = v149;
        else
          v156 = (std::string *)v149->__r_.__value_.__r.__words[0];
        v157 = (_OWORD *)((char *)v156 + v152);
        if ((char *)v156 + v152 <= ", arrival time: " && v157 + 1 > (_OWORD *)", arrival time: ")
          goto LABEL_729;
        *v157 = *(_OWORD *)", arrival time: ";
        v158 = v152 + 16;
        if (SHIBYTE(v149->__r_.__value_.__r.__words[2]) < 0)
        {
          v149->__r_.__value_.__l.__size_ = v158;
          v156->__r_.__value_.__s.__data_[v158] = 0;
          webrtc::ToString((webrtc *)v5[14], v151, (char *)__p_new_stuff);
          v153 = HIBYTE(__p_new_stuff[2]);
          if ((SHIBYTE(__p_new_stuff[2]) & 0x80000000) == 0)
            goto LABEL_225;
        }
        else
        {
          *((_BYTE *)&v149->__r_.__value_.__s + 23) = v158 & 0x7F;
          v156->__r_.__value_.__s.__data_[v158] = 0;
          webrtc::ToString((webrtc *)v5[14], v151, (char *)__p_new_stuff);
          v153 = HIBYTE(__p_new_stuff[2]);
          if ((SHIBYTE(__p_new_stuff[2]) & 0x80000000) == 0)
            goto LABEL_225;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(v149, v151.var0, v152 - v151.var0 + 16, v152, v152, 0, 0x10uLL, ", arrival time: ");
        webrtc::ToString((webrtc *)v5[14], v447, (char *)__p_new_stuff);
        v153 = HIBYTE(__p_new_stuff[2]);
        if ((SHIBYTE(__p_new_stuff[2]) & 0x80000000) == 0)
        {
LABEL_225:
          v154 = v153;
          v155 = v153 == 0;
          v23 = __p_new_stuff;
LABEL_236:
          v159 = *(char *)(v4 + 23);
          if (v159 >= 0)
            v160 = 22;
          else
            v160 = (*(_QWORD *)(v4 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v159 >= 0)
            v161 = *(unsigned __int8 *)(v4 + 23);
          else
            v161 = *(_QWORD *)(v4 + 8);
          if (v160 - v161 >= v154)
          {
            if (!v155)
            {
              if (v159 >= 0)
                v162 = v4;
              else
                v162 = *(_QWORD *)v4;
              v163 = (char *)(v162 + v161);
              if (v162 + v161 <= (unint64_t)v23 && &v163[v154] > (char *)v23)
                goto LABEL_729;
              memmove(v163, v23, v154);
              v164 = v161 + v154;
              if (*(char *)(v4 + 23) < 0)
                *(_QWORD *)(v4 + 8) = v164;
              else
                *(_BYTE *)(v4 + 23) = v164 & 0x7F;
              *(_BYTE *)(v162 + v164) = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace((std::string *)v4, v160, v161 + v154 - v160, v161, v161, 0, v154, (const std::string::value_type *)v23);
          }
          if (SHIBYTE(__p_new_stuff[2]) < 0)
            operator delete(__p_new_stuff[0]);
          v4 = v411;
          if (*((_BYTE *)v5 + 33))
          {
            v165 = (unsigned __int8 *)v5[7];
            v166 = (unsigned __int8 *)v5[8];
            if (v165 != v166)
            {
              while (*v165 != *((unsigned __int8 *)v5 + 33))
              {
                v165 += 4;
                if (v165 == v166)
                  goto LABEL_287;
              }
              v167 = v5[11];
              if (v167)
                v167 = *(_QWORD *)(v167 + 16) + v5[12];
              if (v165[1] == 3)
              {
                v168 = (unsigned __int8 *)(v167 + *((unsigned __int16 *)v165 + 1));
                v169 = *v168;
                v170 = v168[2] | (v169 << 16) | (v168[1] << 8);
                if ((v169 & 0x80u) == 0)
                  v171 = v170;
                else
                  v171 = v170 | 0xFF000000;
                if (v433[23] >= 0)
                  v172 = 22;
                else
                  v172 = (*(_QWORD *)&v433[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v433[23] >= 0)
                  v173 = v433[23];
                else
                  v173 = *(_QWORD *)&v433[8];
                if (v172 - v173 >= 0xB)
                {
                  v174 = v433;
                  if (v433[23] < 0)
                    v174 = *(_BYTE **)v433;
                  v175 = &v174[v173];
                  if (&v174[v173] <= ", toffset: " && v175 + 11 > ", toffset: ")
                    goto LABEL_729;
                  *(_DWORD *)(v175 + 7) = 540701797;
                  *(_QWORD *)v175 = *(_QWORD *)", toffset: ";
                  v176 = v173 + 11;
                  if ((v433[23] & 0x80000000) != 0)
                    *(_QWORD *)&v433[8] = v173 + 11;
                  else
                    v433[23] = v176 & 0x7F;
                  v174[v176] = 0;
                }
                else
                {
                  std::string::__grow_by_and_replace((std::string *)v433, v172, v173 - v172 + 11, v173, v173, 0, 0xBuLL, ", toffset: ");
                }
                rtc::StringBuilder::operator<<((std::string *)v433, v171);
              }
            }
          }
LABEL_287:
          if (*((_BYTE *)v5 + 37))
          {
            v177 = (unsigned __int8 *)v5[7];
            v178 = (unsigned __int8 *)v5[8];
            if (v177 != v178)
            {
              while (*v177 != *((unsigned __int8 *)v5 + 37))
              {
                v177 += 4;
                if (v177 == v178)
                  goto LABEL_312;
              }
              v179 = v5[11];
              if (v179)
                v179 = *(_QWORD *)(v179 + 16) + v5[12];
              if (v177[1] == 3)
              {
                v180 = a1;
                v181 = (unsigned __int8 *)(v179 + *((unsigned __int16 *)v177 + 1));
                v182 = *v181;
                a1 = v181[1];
                v183 = v181[2];
                if (v433[23] >= 0)
                  v184 = 22;
                else
                  v184 = (*(_QWORD *)&v433[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v433[23] >= 0)
                  v185 = v433[23];
                else
                  v185 = *(_QWORD *)&v433[8];
                if (v184 - v185 >= 0x11)
                {
                  v186 = v433;
                  if (v433[23] < 0)
                    v186 = *(_BYTE **)v433;
                  v187 = &v186[v185];
                  if (&v186[v185] <= ", abs send time: " && v187 + 17 > ", abs send time: ")
                    goto LABEL_729;
                  v187[16] = 32;
                  *(_OWORD *)v187 = *(_OWORD *)", abs send time: ";
                  v188 = v185 + 17;
                  if ((v433[23] & 0x80000000) != 0)
                    *(_QWORD *)&v433[8] = v185 + 17;
                  else
                    v433[23] = v188 & 0x7F;
                  v186[v188] = 0;
                }
                else
                {
                  std::string::__grow_by_and_replace((std::string *)v433, v184, v185 - v184 + 17, v185, v185, 0, 0x11uLL, ", abs send time: ");
                }
                rtc::StringBuilder::operator<<((std::string *)v433, (v182 << 16) | ((_DWORD)a1 << 8) | v183);
                a1 = v180;
              }
            }
          }
LABEL_312:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v189, v190, v191, v20, v21, v22, (uint64_t)v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc");
          v192 = v109 / 0x3E8uLL;
          if (v109 % 0x3E8uLL > 0x1F3)
            ++v192;
          if (-v109 % 0x3E8uLL <= 0x1F4)
            v193 = 0;
          else
            v193 = -1;
          if (v109 < 0)
            v192 = v193 - -v109 / 0x3E8uLL;
          *(_QWORD *)(v411 + 464) = v192;
          if ((v433[23] & 0x80000000) != 0)
            operator delete(*(void **)v433);
LABEL_323:
          if (!*((_BYTE *)v5 + 50))
            goto LABEL_331;
          v194 = (unsigned __int8 *)v5[7];
          v195 = (unsigned __int8 *)v5[8];
          if (v194 == v195)
            goto LABEL_331;
          while (*v194 != *((unsigned __int8 *)v5 + 50))
          {
            v194 += 4;
            if (v194 == v195)
              goto LABEL_331;
          }
          v196 = v5[11];
          if (v196)
            v196 = *(_QWORD *)(v196 + 16) + v5[12];
          if (v194[1] < 3u)
          {
LABEL_331:
            *(_DWORD *)v433 = 0;
            *(_WORD *)&v433[4] = 1;
            *(_QWORD *)&v433[8] = 0;
            *(_QWORD *)&v434 = 0;
            if (!*((_BYTE *)v5 + 49))
              goto LABEL_378;
            v197 = (unsigned __int8 *)v5[7];
            v198 = (unsigned __int8 *)v5[8];
            if (v197 == v198)
              goto LABEL_378;
            while (*v197 != *((unsigned __int8 *)v5 + 49))
            {
              v197 += 4;
              if (v197 == v198)
                goto LABEL_378;
            }
            v199 = v5[11];
            if (v199)
              v199 = *(_QWORD *)(v199 + 16) + v5[12];
            if (!v197[1]
              || !webrtc::RtpGenericFrameDescriptorExtension00::Parse((char *)(v199 + *((unsigned __int16 *)v197 + 1)), v197[1], (uint64_t)v433))
            {
LABEL_378:
              v220 = 3;
              if (*(_BYTE *)(v410 + 206))
                goto LABEL_379;
              goto LABEL_465;
            }
            v200 = a1;
            v201 = v433[0];
            *(_WORD *)(v410 + 205) = *(_WORD *)v433;
            if (!v201)
            {
LABEL_376:
              v219 = WORD2(v434);
              *(_WORD *)(v410 + 196) = v434;
              *(_WORD *)(v410 + 198) = v219;
              v220 = 2;
              a1 = v200;
              if (*(_BYTE *)(v410 + 206))
                goto LABEL_379;
              goto LABEL_465;
            }
            if (*(_QWORD *)&v433[8])
              v202 = 4;
            else
              v202 = 3;
            *(_DWORD *)(v410 + 192) = v202;
            if (*(_BYTE *)(v410 + 184))
            {
              if ((*(_BYTE *)(v410 + 152) & 1) != 0)
              {
                operator delete(*(void **)(v410 + 160));
                if ((*(_BYTE *)(v410 + 104) & 1) == 0)
                {
LABEL_347:
                  if ((*(_BYTE *)(v410 + 56) & 1) == 0)
                    goto LABEL_349;
                  goto LABEL_348;
                }
              }
              else if ((*(_BYTE *)(v410 + 104) & 1) == 0)
              {
                goto LABEL_347;
              }
              operator delete(*(void **)(v410 + 112));
              if ((*(_BYTE *)(v410 + 56) & 1) != 0)
LABEL_348:
                operator delete(*(void **)(v410 + 64));
            }
LABEL_349:
            *(_QWORD *)(v410 + 104) = 0;
            v203 = (unint64_t *)(v410 + 104);
            *(_QWORD *)(v410 + 152) = 0;
            *(_QWORD *)(v410 + 56) = 0;
            *(_QWORD *)(v410 + 176) = 0xFFFFFFFFLL;
            *(_BYTE *)(v410 + 184) = 1;
            v204 = *(_WORD *)&v433[2];
            v205 = *(unsigned __int16 *)&v433[2];
            if (*(_BYTE *)(v4 + 778))
            {
              v206 = *(unsigned __int16 *)(v4 + 776);
              v282 = *(unsigned __int16 *)&v433[2] >= v206;
              LODWORD(v207) = *(unsigned __int16 *)&v433[2] - v206;
              v208 = (_DWORD)v207 != 0 && v282;
              v209 = (v207 & 0x8000u) == 0;
              if ((_DWORD)v207 == 0x8000)
                v209 = v208;
              if (v209)
                v207 = (unsigned __int16)v207;
              else
                v207 |= 0xFFFFFFFFFFFF0000;
              v205 = v207 + *(_QWORD *)(v4 + 768);
            }
            v210 = 0;
            *(_QWORD *)(v4 + 768) = v205;
            *(_WORD *)(v4 + 776) = v204;
            *(_BYTE *)(v4 + 778) = 1;
            *v409 = v205;
            v211 = v433[4];
            if (v433[4] && (v433[4] & 1) == 0)
            {
              v210 = 0;
              do
              {
                v212 = v211;
                v211 >>= 1;
                ++v210;
              }
              while ((v212 & 2) == 0);
            }
            v213 = v433[5];
            *(_DWORD *)(v410 + 48) = v210;
            *(_DWORD *)(v410 + 52) = v213;
            if (*(_QWORD *)&v433[8])
              a1 = (unint64_t)&v433[16];
            else
              a1 = 0;
            if (*(_QWORD *)&v433[8])
            {
              v214 = 2 * *(_QWORD *)&v433[8];
              do
              {
                while (1)
                {
                  v215 = *v203;
                  if ((*v203 & 1) != 0)
                  {
                    v216 = *(_QWORD *)(v410 + 112);
                    v217 = *(_QWORD *)(v410 + 120);
                  }
                  else
                  {
                    v216 = v410 + 112;
                    v217 = 5;
                  }
                  v218 = v205 - *(unsigned __int16 *)a1;
                  if (v215 >> 1 != v217)
                    break;
                  absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long>(v410 + 104, v218);
                  a1 += 2;
                  v214 -= 2;
                  if (!v214)
                    goto LABEL_376;
                }
                if (!v216)
                  goto LABEL_729;
                *(_QWORD *)(v216 + 8 * (v215 >> 1)) = v218;
                *v203 = v215 + 2;
                a1 += 2;
                v214 -= 2;
              }
              while (v214);
            }
            goto LABEL_376;
          }
          v241 = __rev16(*(unsigned __int16 *)(v196 + *((unsigned __int16 *)v194 + 1) + 1));
          if (*(_BYTE *)(v4 + 778))
          {
            v242 = *(unsigned __int16 *)(v4 + 776);
            v282 = v241 >= v242;
            LODWORD(v243) = v241 - v242;
            v244 = (_DWORD)v243 != 0 && v282;
            v245 = (v243 & 0x8000u) == 0;
            if ((_DWORD)v243 == 0x8000)
              v245 = v244;
            if (v245)
              v243 = (unsigned __int16)v243;
            else
              v243 |= 0xFFFFFFFFFFFF0000;
            v246 = v243 + *(_QWORD *)(v4 + 768);
          }
          else
          {
            v246 = v241;
          }
          *(_QWORD *)(v4 + 768) = v246;
          *(_WORD *)(v4 + 776) = v241;
          *(_BYTE *)(v4 + 778) = 1;
          *(_WORD *)v433 = 257;
          v436 = 0;
          v438 = 0;
          LOBYTE(v440) = 0;
          v442 = 0;
          v443 = 0;
          v444 = 0;
          v445 = 0;
          memset(&v433[4], 0, 20);
          if (!*((_BYTE *)v5 + 50))
            goto LABEL_427;
          v249 = (unsigned __int8 *)v5[7];
          v250 = (unsigned __int8 *)v5[8];
          if (v249 == v250)
            goto LABEL_427;
          while (*v249 != *((unsigned __int8 *)v5 + 50))
          {
            v249 += 4;
            if (v249 == v250)
              goto LABEL_427;
          }
          v253 = v5[11];
          if (v253)
            v253 = *(_QWORD *)(v253 + 16) + v5[12];
          if (!v249[1]
            || (webrtc::RtpDependencyDescriptorReader::RtpDependencyDescriptorReader((uint64_t)__p_new_stuff, (unsigned __int8 *)(v253 + *((unsigned __int16 *)v249 + 1)), v249[1], *(_QWORD *)(v4 + 784), (uint64_t)v433, v21, v22, (uint64_t)v23), ((uint64_t)__p_new_stuff[2] & 0x80000000) != 0))
          {
LABEL_427:
            if (!*(_BYTE *)(v4 + 800))
              goto LABEL_438;
            v251 = v246 < *(_QWORD *)(v4 + 792);
            v252 = v445;
            v445 = 0;
            if (!v252)
              goto LABEL_440;
            goto LABEL_439;
          }
          if (v445 && !v433[0])
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v254, v255, v256, v20, v21, v22, (uint64_t)v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc");
            goto LABEL_438;
          }
          v412 = (_DWORD *)a1;
          *(_WORD *)(v410 + 205) = *(_WORD *)v433;
          if (*(_BYTE *)(v410 + 184))
          {
            if ((*(_BYTE *)(v410 + 152) & 1) != 0)
            {
              operator delete(*(void **)(v410 + 160));
              if ((*(_BYTE *)(v410 + 104) & 1) == 0)
              {
LABEL_698:
                if ((*(_BYTE *)(v410 + 56) & 1) == 0)
                  goto LABEL_700;
                goto LABEL_699;
              }
            }
            else if ((*(_BYTE *)(v410 + 104) & 1) == 0)
            {
              goto LABEL_698;
            }
            operator delete(*(void **)(v410 + 112));
            if ((*(_BYTE *)(v410 + 56) & 1) != 0)
LABEL_699:
              operator delete(*(void **)(v410 + 64));
          }
LABEL_700:
          *(_QWORD *)(v410 + 56) = 0;
          *(_QWORD *)(v410 + 104) = 0;
          v386 = (unint64_t *)(v410 + 104);
          *(_QWORD *)(v410 + 152) = 0;
          *(_QWORD *)(v410 + 176) = 0xFFFFFFFFLL;
          *(_BYTE *)(v410 + 184) = 1;
          *(_QWORD *)(v410 + 40) = v246;
          *(_QWORD *)(v410 + 48) = *(_QWORD *)&v433[8];
          if ((v436 & 1) != 0)
            a1 = (unint64_t)v437;
          else
            a1 = (unint64_t)&v437;
          if (v436 >= 2)
          {
            v3 = (std::string::value_type *)(4 * (v436 >> 1));
            do
            {
              while (1)
              {
                v393 = *v386;
                if ((*v386 & 1) != 0)
                {
                  v394 = *(_QWORD *)(v410 + 112);
                  v395 = *(_QWORD *)(v410 + 120);
                }
                else
                {
                  v394 = v410 + 112;
                  v395 = 5;
                }
                v396 = v246 - *(int *)a1;
                if (v393 >> 1 != v395)
                  break;
                absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)v386, v396);
                a1 += 4;
                v3 -= 4;
                if (!v3)
                  goto LABEL_704;
              }
              if (!v394)
                goto LABEL_729;
              *(_QWORD *)(v394 + 8 * (v393 >> 1)) = v396;
              *v386 = v393 + 2;
              a1 += 4;
              v3 -= 4;
            }
            while (v3);
          }
LABEL_704:
          if ((v433[16] & 1) != 0)
            v387 = *(_BYTE **)&v433[24];
          else
            v387 = &v433[24];
          absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(v410 + 56), (uint64_t)v387, *(uint64_t *)&v433[16] >> 1);
          v3 = (std::string::value_type *)v410;
          if (v442)
          {
            v388 = v441;
            *(_WORD *)(v410 + 196) = v440;
            *(_WORD *)(v410 + 198) = v388;
          }
          v389 = v445;
          a1 = (unint64_t)v412;
          if (!v445)
            goto LABEL_730;
          if (*(_BYTE *)(v4 + 800) && *(_QWORD *)(v4 + 792) > v246)
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            {
              if (!*(_BYTE *)(v4 + 800))
                goto LABEL_729;
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v390, v391, v392, v20, v21, v22, (uint64_t)v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc");
            }
LABEL_438:
            v251 = 1;
            v252 = v445;
            v445 = 0;
            if (!v252)
              goto LABEL_440;
            goto LABEL_439;
          }
          v445 = 0;
          v397 = *(webrtc::FrameDependencyStructure **)(v4 + 784);
          *(_QWORD *)(v4 + 784) = v389;
          if (v397)
          {
            webrtc::FrameDependencyStructure::~FrameDependencyStructure(v397);
            MEMORY[0x20BD0ADEC]();
          }
          *(_QWORD *)(v4 + 792) = v246;
          *(_BYTE *)(v4 + 800) = 1;
          *v412 = 3;
          v251 = 2;
          v252 = v445;
          v445 = 0;
          if (!v252)
          {
LABEL_440:
            if ((v438 & 1) != 0)
              goto LABEL_731;
            goto LABEL_441;
          }
LABEL_439:
          webrtc::FrameDependencyStructure::~FrameDependencyStructure(v252);
          MEMORY[0x20BD0ADEC]();
          goto LABEL_440;
        }
      }
      v154 = (size_t)__p_new_stuff[1];
      if (((unint64_t)__p_new_stuff[1] & 0x8000000000000000) != 0)
        goto LABEL_729;
      v23 = (std::string::value_type **)__p_new_stuff[0];
      v155 = __p_new_stuff[1] == 0;
      if (__p_new_stuff[1])
      {
        if (!__p_new_stuff[0])
          goto LABEL_729;
      }
      goto LABEL_236;
    }
    v96 = *((unsigned __int8 *)v5 + 42);
    if (!*((_BYTE *)v5 + 42) || (v97 = (unsigned __int8 *)v5[7], v98 = (unsigned __int8 *)v5[8], v97 == v98))
    {
LABEL_120:
      v99 = 0;
      v100 = 0;
      v101 = 0;
      goto LABEL_121;
    }
    while (*v97 != (_DWORD)v96)
    {
      v97 += 4;
      if (v97 == v98)
        goto LABEL_120;
    }
    v119 = v5[11];
    if (v119)
    {
      v120 = *(_QWORD *)(v119 + 16) + v5[12];
      v96 = 40950000;
      if (v97[1] != 3)
        goto LABEL_177;
    }
    else
    {
      v120 = 0;
      v96 = 40950000;
      if (v97[1] != 3)
        goto LABEL_177;
    }
    v127 = (unsigned __int8 *)(v120 + *((unsigned __int16 *)v97 + 1));
    v128 = v127[1];
    v129 = v127[2];
    v130 = ((*v127 << 16) | (v128 << 8)) >> 12;
    v131 = v129 & 0xFFFFF0FF | ((v128 & 0xF) << 8);
    if (v130 <= v131)
    {
      v96 = 10000 * v131;
      v100 = 16 * v130;
      v99 = (10000 * v130) & 0x3FFFF00;
      v101 = 1;
LABEL_121:
      *(_QWORD *)(v410 + 216) = v100 | v99;
      *(_QWORD *)(v410 + 224) = v96;
      *(_BYTE *)(v410 + 232) = v101;
      a1 = v410 + 192;
      if (*((_BYTE *)v5 + 128))
        goto LABEL_323;
      goto LABEL_130;
    }
LABEL_177:
    v99 = 0;
    v100 = 0;
    v101 = 0;
    goto LABEL_121;
  }
  v19 = webrtc::NackRequester::OnReceivedPacket(v17, *((unsigned __int16 *)v5 + 2), *((unsigned __int8 *)v5 + 128));
  if (v432)
  {
    v405 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
LABEL_729:
          __break(1u);
LABEL_730:
          *(_DWORD *)a1 = 4;
          v445 = 0;
          v251 = 2;
          if ((v438 & 1) != 0)
          {
LABEL_731:
            operator delete(v439);
            if ((v436 & 1) == 0)
            {
LABEL_442:
              if ((v433[16] & 1) == 0)
                goto LABEL_443;
              goto LABEL_733;
            }
          }
          else
          {
LABEL_441:
            if ((v436 & 1) == 0)
              goto LABEL_442;
          }
          operator delete(v437);
          if ((v433[16] & 1) == 0)
          {
LABEL_443:
            if (!v251)
              goto LABEL_734;
            goto LABEL_444;
          }
LABEL_733:
          operator delete(*(void **)&v433[24]);
          if (!v251)
          {
LABEL_734:
            v31 = 1;
            v270 = v408;
            if (!*(_BYTE *)(v18 + 144))
              goto LABEL_640;
            goto LABEL_633;
          }
LABEL_444:
          if (v251 == 1)
          {
            v257 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 80) + 16))(*(_QWORD *)(v4 + 80));
            v258 = v257;
            v259 = *(_QWORD *)(v4 + 808);
            v260 = v257 == 0x7FFFFFFFFFFFFFFFLL || v259 == 0x8000000000000000;
            if (v260
              || (v257 != 0x8000000000000000 ? (v261 = v259 == 0x7FFFFFFFFFFFFFFFLL) : (v261 = 1),
                  !v261 ? (v262 = v257 - v259 <= 1000000) : (v262 = 1),
                  !v262))
            {
              *(_QWORD *)(v4 + 808) = v257;
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v263, v264, v265, v266, v267, v268, v269, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc");
            }
            if (!*(_QWORD *)(v4 + 784))
            {
              v270 = v408;
              if (*(_QWORD *)(v4 + 1384) < v258)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
                v31 = 0;
                v271 = v258 + 1000000;
                if (v258 == 0x7FFFFFFFFFFFFFFFLL)
                  v271 = 0x7FFFFFFFFFFFFFFFLL;
                *(_QWORD *)(v4 + 1384) = v271;
                if (!*(_BYTE *)(v18 + 144))
                  goto LABEL_640;
LABEL_633:
                if ((*(_BYTE *)(v18 + 112) & 1) != 0)
                {
                  operator delete(*(void **)(v18 + 120));
                  if ((*(_BYTE *)(v18 + 64) & 1) == 0)
                  {
LABEL_635:
                    if ((*(_BYTE *)(v18 + 16) & 1) != 0)
                      goto LABEL_639;
                    goto LABEL_640;
                  }
                }
                else if ((*(_BYTE *)(v18 + 64) & 1) == 0)
                {
                  goto LABEL_635;
                }
                operator delete(*(void **)(v18 + 72));
                if ((*(_BYTE *)(v18 + 16) & 1) != 0)
LABEL_639:
                  operator delete(*(void **)(v18 + 24));
LABEL_640:
                v360 = *((_QWORD *)v3 + 2);
                if (v360)
                {
                  v361 = (unsigned int *)(v360 + 24);
                  do
                  {
                    v362 = __ldaxr(v361);
                    v363 = v362 - 1;
                  }
                  while (__stlxr(v363, v361));
                  if (!v363)
                  {
                    v364 = *(_QWORD *)(v360 + 16);
                    *(_QWORD *)(v360 + 16) = 0;
                    if (v364)
                      MEMORY[0x20BD0ADD4](v364, 0x1000C8077774924);
                    MEMORY[0x20BD0ADEC](v360, 0x1010C40EE34DA14);
                  }
                }
                MEMORY[0x20BD0ADEC](v3, 0x10B2C4061102D9CLL);
                if (v270)
                  goto LABEL_648;
                goto LABEL_654;
              }
LABEL_575:
              v31 = 0;
              if (!*(_BYTE *)(v18 + 144))
                goto LABEL_640;
              goto LABEL_633;
            }
LABEL_511:
            v31 = 0;
            v270 = v408;
            if (!*(_BYTE *)(v18 + 144))
              goto LABEL_640;
            goto LABEL_633;
          }
          v220 = 2;
          if (!v3[206])
            goto LABEL_465;
          v433[0] = 0;
          if (!*((_BYTE *)v5 + 51))
            goto LABEL_742;
          v221 = (unsigned __int8 *)v5[7];
          v222 = (unsigned __int8 *)v5[8];
          if (v221 == v222)
            goto LABEL_742;
LABEL_379:
          while (*v221 != *((unsigned __int8 *)v5 + 51))
          {
            v221 += 4;
            if (v221 == v222)
              goto LABEL_395;
          }
          v223 = v5[11];
          if (v223)
            v223 = *(_QWORD *)(v223 + 16) + v5[12];
          v224 = v221[1];
          if (v221[1])
          {
            v225 = (unsigned __int8 *)(v223 + *((unsigned __int16 *)v221 + 1));
            *(_WORD *)v433 = 514;
            v433[2] = 2;
            LOBYTE(v436) = 0;
            *(_QWORD *)&v433[4] = 0;
            *(_QWORD *)&v433[9] = 0;
            BYTE4(v436) = 1;
            v226 = webrtc::ColorSpaceExtension::Parse(v225, v224, (uint64_t)v433);
            v227 = BYTE4(v436);
            if (BYTE4(v436))
              v228 = v226;
            else
              v228 = 1;
            if (!v228)
              v227 = 0;
            v229 = v3[324];
            if (v229 == v227)
            {
LABEL_396:
              if (!v229)
                goto LABEL_401;
              v230 = v435;
              *(_OWORD *)(v402 + 32) = v434;
              *(_OWORD *)(v402 + 48) = v230;
              *(_BYTE *)(v402 + 64) = v436;
              v231 = *(_OWORD *)&v433[16];
              *(_OWORD *)v402 = *(_OWORD *)v433;
              *(_OWORD *)(v402 + 16) = v231;
              v232 = v4 + 1028;
              v233 = *(unsigned __int8 *)(v4 + 1096);
              if (v233 == 1)
                goto LABEL_398;
              goto LABEL_403;
            }
          }
          else
          {
LABEL_742:
          {
LABEL_395:
            v229 = v3[324];
            if (!v3[324])
              goto LABEL_396;
          }
          }
          if (v229)
          {
            v3[324] = 0;
LABEL_401:
            if (*(_DWORD *)a1 != 3)
            {
              if (*(_BYTE *)(v4 + 1096))
              {
                *(_BYTE *)(v402 + 64) = *(_BYTE *)(v4 + 1092);
                v237 = *(_OWORD *)(v4 + 1076);
                *(_OWORD *)(v402 + 32) = *(_OWORD *)(v4 + 1060);
                *(_OWORD *)(v402 + 48) = v237;
                v238 = *(_OWORD *)(v4 + 1044);
                *(_OWORD *)v402 = *(_OWORD *)(v4 + 1028);
                *(_OWORD *)(v402 + 16) = v238;
                v3[324] = 1;
                LODWORD(v236) = *((unsigned __int8 *)v5 + 52);
                if (!*((_BYTE *)v5 + 52))
                  goto LABEL_469;
                goto LABEL_466;
              }
              goto LABEL_465;
            }
            v232 = v4 + 1028;
            v233 = *(unsigned __int8 *)(v4 + 1096);
            if (!*(_BYTE *)(v4 + 1096))
            {
LABEL_398:
              if (v233)
              {
                v234 = *(_OWORD *)(v402 + 48);
                *(_OWORD *)(v232 + 32) = *(_OWORD *)(v402 + 32);
                *(_OWORD *)(v232 + 48) = v234;
                *(_BYTE *)(v232 + 64) = *(_BYTE *)(v402 + 64);
                v235 = *(_OWORD *)(v402 + 16);
                *(_OWORD *)v232 = *(_OWORD *)v402;
                *(_OWORD *)(v232 + 16) = v235;
                LODWORD(v236) = *((unsigned __int8 *)v5 + 52);
                if (!*((_BYTE *)v5 + 52))
                  goto LABEL_469;
                goto LABEL_466;
              }
              goto LABEL_465;
            }
            goto LABEL_403;
          }
          v239 = v435;
          *(_OWORD *)(v402 + 32) = v434;
          *(_OWORD *)(v402 + 48) = v239;
          *(_BYTE *)(v402 + 64) = v436;
          v240 = *(_OWORD *)&v433[16];
          *(_OWORD *)v402 = *(_OWORD *)v433;
          *(_OWORD *)(v402 + 16) = v240;
          v3[324] = 1;
          v232 = v4 + 1028;
          v233 = *(unsigned __int8 *)(v4 + 1096);
          if (v233 == 1)
            goto LABEL_398;
LABEL_403:
          if (!v233)
          {
            v247 = *(_OWORD *)(v402 + 48);
            *(_OWORD *)(v232 + 32) = *(_OWORD *)(v402 + 32);
            *(_OWORD *)(v232 + 48) = v247;
            *(_BYTE *)(v232 + 64) = *(_BYTE *)(v402 + 64);
            v248 = *(_OWORD *)(v402 + 16);
            *(_OWORD *)v232 = *(_OWORD *)v402;
            *(_OWORD *)(v232 + 16) = v248;
            *(_BYTE *)(v4 + 1096) = 1;
            LODWORD(v236) = *((unsigned __int8 *)v5 + 52);
            if (!*((_BYTE *)v5 + 52))
              goto LABEL_469;
            goto LABEL_466;
          }
          *(_BYTE *)(v4 + 1096) = 0;
LABEL_465:
          LODWORD(v236) = *((unsigned __int8 *)v5 + 52);
          if (!*((_BYTE *)v5 + 52))
            goto LABEL_469;
LABEL_466:
          v272 = (unsigned __int8 *)v5[7];
          v273 = (unsigned __int8 *)v5[8];
          if (v272 == v273)
          {
LABEL_469:
            LOBYTE(v274) = 0;
            goto LABEL_470;
          }
          while (*v272 != (_DWORD)v236)
          {
            v272 += 4;
            if (v272 == v273)
              goto LABEL_469;
          }
          v236 = v5[11];
          if (v236)
            v236 = *(_QWORD *)(v236 + 16) + v5[12];
          v274 = v272[1];
          if (v272[1])
            break;
LABEL_470:
          *(_BYTE *)(v406 + 2) = v274;
          *(_WORD *)v406 = (_WORD)v236 << 8;
          v275 = *(webrtc::LossNotificationController **)(v4 + 600);
          if (!v275)
            goto LABEL_477;
LABEL_471:
          if (*((_BYTE *)v5 + 128))
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
              goto LABEL_477;
LABEL_476:
            rtc::webrtc_logging_impl::Log("\r\t", v276, v277, v278, v20, v21, v22, (uint64_t)v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc");
            goto LABEL_477;
          }
          if (v220 == 3)
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
              goto LABEL_477;
            goto LABEL_476;
          }
          if (!v3[205])
          {
            webrtc::LossNotificationController::OnReceivedPacket(v275, *((unsigned __int16 *)v5 + 2), 0);
            *((_DWORD *)v3 + 3) = v405;
            a1 = v407;
            if (!v407)
              goto LABEL_510;
            goto LABEL_478;
          }
          *(_QWORD *)&v433[16] = 0;
          *(_QWORD *)&v433[24] = 0;
          v433[0] = *((_DWORD *)v3 + 48) == 3;
          if (v3[184])
          {
            v295 = v3 + 112;
            v296 = *((_QWORD *)v3 + 13);
            if ((v296 & 1) != 0)
              v295 = (std::string::value_type *)*((_QWORD *)v3 + 14);
            if (v296 < 2)
              v295 = 0;
            *(_QWORD *)&v433[8] = *((_QWORD *)v3 + 5);
            *(_QWORD *)&v433[16] = v295;
            *(_QWORD *)&v433[24] = v296 >> 1;
            webrtc::LossNotificationController::OnReceivedPacket(v275, *((unsigned __int16 *)v5 + 2), (uint64_t)v433);
            *((_DWORD *)v3 + 3) = v405;
            a1 = v407;
            if (!v407)
            {
LABEL_510:
              webrtc::RtpVideoStreamReceiver2::NotifyReceiverOfEmptyPacket((webrtc::RtpVideoStreamReceiver2 *)v4, *((unsigned __int16 *)v3 + 2));
              webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::SendBufferedRtcpFeedback((__n128 *)(v4 + 504));
              goto LABEL_511;
            }
            goto LABEL_478;
          }
        }
        if (v274 == 2)
        {
          v292 = (unsigned __int8 *)(v236 + *((unsigned __int16 *)v272 + 1));
          v293 = *v292;
          v294 = v292[1];
        }
        else
        {
          v294 = 0;
          v293 = 0;
        }
        *(_BYTE *)(v406 + 2) = v274 == 2;
        *(_WORD *)v406 = v294 | (v293 << 8);
        v275 = *(webrtc::LossNotificationController **)(v4 + 600);
        if (v275)
          goto LABEL_471;
LABEL_477:
        *((_DWORD *)v3 + 3) = v405;
        a1 = v407;
        if (!v407)
          goto LABEL_510;
LABEL_478:
        if (*((_DWORD *)v3 + 53) != 4)
          goto LABEL_577;
        v279 = v3[2];
        if (v279 == *(__int16 *)(v4 + 960))
          goto LABEL_563;
        *(_WORD *)(v4 + 960) = v279;
        v280 = *(_QWORD *)(v4 + 944);
        if (!v280)
          goto LABEL_563;
        v5 = (uint64_t *)(v4 + 944);
        do
        {
          v281 = *(unsigned __int8 *)(v280 + 32);
          v282 = v281 >= v279;
          if (v281 >= v279)
            v283 = (uint64_t *)v280;
          else
            v283 = (uint64_t *)(v280 + 8);
          if (v282)
            v5 = (uint64_t *)v280;
          v280 = *v283;
        }
        while (*v283);
        if (v5 == (uint64_t *)(v4 + 944) || *((unsigned __int8 *)v5 + 32) > v279)
          goto LABEL_563;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v284, v285, v286, v20, v21, v22, (uint64_t)v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/rtp_video_stream_receiver2.cc");
        v434 = 0u;
        memset(v433, 0, sizeof(v433));
        HIBYTE(__p_new_stuff[2]) = 20;
        if (__p_new_stuff > (std::string::value_type **)"sprop-parameter-sets"
          || (char *)&__p_new_stuff[2] + 4 <= "sprop-parameter-sets")
        {
          v287 = (uint64_t *)v5[6];
          v5 += 6;
          strcpy((char *)__p_new_stuff, "sprop-parameter-sets");
          v288 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)v5 - 8, (const void **)__p_new_stuff, v287, v5);
          if (v5 == v288)
          {
            v290 = HIBYTE(__p_new_stuff[2]);
LABEL_537:
            v289 = v5;
            goto LABEL_538;
          }
          v289 = v288;
          v290 = HIBYTE(__p_new_stuff[2]);
          if ((SHIBYTE(__p_new_stuff[2]) & 0x80000000) == 0)
          {
            a1 = HIBYTE(__p_new_stuff[2]);
            v291 = __p_new_stuff;
            break;
          }
          a1 = (unint64_t)__p_new_stuff[1];
          if (((unint64_t)__p_new_stuff[1] & 0x8000000000000000) == 0)
          {
            v291 = (std::string::value_type **)__p_new_stuff[0];
            if (!__p_new_stuff[1] || __p_new_stuff[0])
              break;
          }
        }
      }
      v297 = v289 + 4;
      if ((*((char *)v289 + 55) & 0x80000000) == 0)
      {
        v18 = *((unsigned __int8 *)v289 + 55);
        break;
      }
      v18 = v289[5];
      if ((v18 & 0x8000000000000000) == 0)
      {
        v297 = (_QWORD *)*v297;
        if (!v18 || v297 != 0)
          break;
      }
    }
    if (v18 >= a1)
      v299 = a1;
    else
      v299 = v18;
    v300 = memcmp(v291, v297, v299);
    if (v300)
    {
      v18 = (unint64_t)v409;
      if ((v300 & 0x80000000) == 0)
        goto LABEL_538;
      goto LABEL_537;
    }
    v282 = a1 >= v18;
    v18 = (unint64_t)v409;
    if (!v282)
      goto LABEL_537;
LABEL_538:
    if (v290 < 0)
      operator delete(__p_new_stuff[0]);
    if (v289 == v5)
      goto LABEL_558;
    v5 = v289 + 7;
    v301 = *((char *)v289 + 79);
    v302 = (const char *)(v289 + 7);
    if (v301 < 0)
    {
      v302 = (const char *)*v5;
      if (!*v5)
        continue;
    }
    v303 = strlen(v302);
    if (v303 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v3 = (std::string::value_type *)v303;
    if (v303 > 0x16)
    {
      v305 = (v303 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v303 | 7) != 0x17)
        v305 = v303 | 7;
      v306 = v305 + 1;
      v304 = (std::string::value_type *)operator new(v305 + 1);
      __p_new_stuff[1] = v3;
      __p_new_stuff[2] = (std::string::value_type *)(v306 | 0x8000000000000000);
      __p_new_stuff[0] = v304;
    }
    else
    {
      HIBYTE(__p_new_stuff[2]) = v303;
      v304 = (std::string::value_type *)__p_new_stuff;
    }
    v307 = &v3[(_QWORD)v304];
    if (v304 > v302 || v307 <= v302)
      break;
  }
  if (v3)
    memmove(v304, v302, (size_t)v3);
  *v307 = 0;
  v308 = webrtc::H264SpropParameterSets::DecodeSprop((uint64_t)v433, (void **)__p_new_stuff);
  if (SHIBYTE(__p_new_stuff[2]) < 0)
    operator delete(__p_new_stuff[0]);
  v3 = (std::string::value_type *)v410;
  if (v308)
  {
    webrtc::video_coding::H264SpsPpsTracker::InsertSpsPpsNalus((uint64_t **)(v4 + 864), (unint64_t *)v433, (const void **)&v433[24]);
    v309 = *(_BYTE **)(v4 + 712);
    if (v309)
      webrtc::H26xPacketBuffer::SetSpropParameterSets(v309, (void **)v5);
  }
LABEL_558:
  if (*(_QWORD *)&v433[24])
  {
    *(_QWORD *)&v434 = *(_QWORD *)&v433[24];
    operator delete(*(void **)&v433[24]);
  }
  a1 = v407;
  if (*(_QWORD *)v433)
  {
    *(_QWORD *)&v433[8] = *(_QWORD *)v433;
    operator delete(*(void **)v433);
  }
  if (*((_DWORD *)v3 + 53) != 4)
  {
LABEL_577:
    v317 = *v399;
    *v399 = v408;
    if (v317)
    {
      v318 = (unsigned int *)(v317 + 24);
      do
      {
        v319 = __ldaxr(v318);
        v320 = v319 - 1;
      }
      while (__stlxr(v320, v318));
      if (!v320)
      {
        v321 = *(_QWORD *)(v317 + 16);
        *(_QWORD *)(v317 + 16) = 0;
        if (v321)
          MEMORY[0x20BD0ADD4](v321, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v317, 0x1010C40EE34DA14);
      }
    }
    v270 = 0;
    *((_QWORD *)v3 + 3) = v400;
    *((_QWORD *)v3 + 4) = a1;
    goto LABEL_585;
  }
LABEL_563:
  v310 = (_QWORD **)(v4 + 864);
  v270 = v408;
  if (!v408)
  {
    webrtc::video_coding::H264SpsPpsTracker::CopyAndFixBitstream(v310, 0, a1, v18, v20, v21, v22, (uint64_t)v23, (uint64_t)v433);
    v311 = *(_DWORD *)v433;
    if (!*(_DWORD *)v433)
      goto LABEL_672;
LABEL_565:
    if (v311 != 1)
    {
      if (v311 != 2)
        goto LABEL_680;
      *(_BYTE *)(v4 + 552) = 1;
      webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::SendBufferedRtcpFeedback((__n128 *)(v4 + 504));
    }
    v312 = *(_QWORD *)&v433[8];
    if (*(_QWORD *)&v433[8])
    {
      v313 = (unsigned int *)(*(_QWORD *)&v433[8] + 24);
      do
      {
        v314 = __ldaxr(v313);
        v315 = v314 - 1;
      }
      while (__stlxr(v315, v313));
      if (!v315)
      {
        v316 = *(_QWORD *)(v312 + 16);
        *(_QWORD *)(v312 + 16) = 0;
        if (v316)
          MEMORY[0x20BD0ADD4](v316, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v312, 0x1010C40EE34DA14);
      }
    }
    goto LABEL_575;
  }
  webrtc::video_coding::H264SpsPpsTracker::CopyAndFixBitstream(v310, *(_QWORD *)(v408 + 16) + v400, a1, v18, v20, v21, v22, (uint64_t)v23, (uint64_t)v433);
  v311 = *(_DWORD *)v433;
  if (*(_DWORD *)v433)
    goto LABEL_565;
LABEL_672:
  v375 = *(_QWORD *)&v433[8];
  *(_QWORD *)&v433[8] = 0;
  v376 = *v399;
  *v399 = v375;
  if (v376)
  {
    v377 = (unsigned int *)(v376 + 24);
    do
    {
      v378 = __ldaxr(v377);
      v379 = v378 - 1;
    }
    while (__stlxr(v379, v377));
    if (!v379)
    {
      v380 = *(_QWORD *)(v376 + 16);
      *(_QWORD *)(v376 + 16) = 0;
      if (v380)
        MEMORY[0x20BD0ADD4](v380, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v376, 0x1010C40EE34DA14);
    }
  }
  *(_OWORD *)(v3 + 24) = *(_OWORD *)&v433[16];
  *(_QWORD *)&v433[16] = 0;
  *(_QWORD *)&v433[24] = 0;
LABEL_680:
  v381 = *(_QWORD *)&v433[8];
  if (*(_QWORD *)&v433[8])
  {
    v382 = (unsigned int *)(*(_QWORD *)&v433[8] + 24);
    do
    {
      v383 = __ldaxr(v382);
      v384 = v383 - 1;
    }
    while (__stlxr(v384, v382));
    if (!v384)
    {
      v385 = *(_QWORD *)(v381 + 16);
      *(_QWORD *)(v381 + 16) = 0;
      if (v385)
        MEMORY[0x20BD0ADD4](v385, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v381, 0x1010C40EE34DA14);
    }
  }
LABEL_585:
  webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::SendBufferedRtcpFeedback((__n128 *)(v4 + 504));
  webrtc::UniqueTimestampCounter::Add((webrtc::UniqueTimestampCounter *)(v4 + 720), *((_DWORD *)v3 + 2));
  if (*((_DWORD *)v3 + 53) != 5 || (v327 = *(webrtc::H26xPacketBuffer **)(v4 + 712)) == 0)
  {
    __p_new_stuff[0] = v3;
    webrtc::video_coding::PacketBuffer::InsertPacket((webrtc::video_coding::PacketBuffer *)(v4 + 608), (uint64_t *)__p_new_stuff, (uint64_t)v433);
    webrtc::RtpVideoStreamReceiver2::OnInsertedPacket(v4, (uint64_t **)v433, v344, v345, v346, v347, v348, v349);
    v350 = *(_QWORD **)v433;
    if (!*(_QWORD *)v433)
      goto LABEL_631;
    v351 = *(_QWORD **)&v433[8];
    v352 = *(void **)v433;
    if (*(_QWORD *)&v433[8] == *(_QWORD *)v433)
    {
LABEL_630:
      *(_QWORD *)&v433[8] = v350;
      operator delete(v352);
LABEL_631:
      v3 = __p_new_stuff[0];
      __p_new_stuff[0] = 0;
      if (!v3)
        goto LABEL_690;
LABEL_632:
      v31 = 0;
      v18 = (unint64_t)(v3 + 40);
      if (!v3[184])
        goto LABEL_640;
      goto LABEL_633;
    }
    while (1)
    {
      v354 = *--v351;
      v353 = v354;
      *v351 = 0;
      if (v354)
        break;
LABEL_613:
      if (v351 == v350)
      {
        v352 = *(void **)v433;
        goto LABEL_630;
      }
    }
    if (*(_BYTE *)(v353 + 184))
    {
      if ((*(_BYTE *)(v353 + 152) & 1) != 0)
      {
        operator delete(*(void **)(v353 + 160));
        if ((*(_BYTE *)(v353 + 104) & 1) == 0)
        {
LABEL_618:
          if ((*(_BYTE *)(v353 + 56) & 1) == 0)
            goto LABEL_620;
          goto LABEL_619;
        }
      }
      else if ((*(_BYTE *)(v353 + 104) & 1) == 0)
      {
        goto LABEL_618;
      }
      operator delete(*(void **)(v353 + 112));
      if ((*(_BYTE *)(v353 + 56) & 1) != 0)
LABEL_619:
        operator delete(*(void **)(v353 + 64));
    }
LABEL_620:
    v355 = *(_QWORD *)(v353 + 16);
    if (v355)
    {
      v356 = (unsigned int *)(v355 + 24);
      do
      {
        v357 = __ldaxr(v356);
        v358 = v357 - 1;
      }
      while (__stlxr(v358, v356));
      if (!v358)
      {
        v359 = *(_QWORD *)(v355 + 16);
        *(_QWORD *)(v355 + 16) = 0;
        if (v359)
          MEMORY[0x20BD0ADD4](v359, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v355, 0x1010C40EE34DA14);
      }
    }
    MEMORY[0x20BD0ADEC](v353, 0x10B2C4061102D9CLL);
    goto LABEL_613;
  }
  __p_new_stuff[0] = v3;
  webrtc::H26xPacketBuffer::InsertPacket(v327, (uint64_t *)__p_new_stuff, v322, v323, v324, v325, v326, (uint64_t)v433);
  webrtc::RtpVideoStreamReceiver2::OnInsertedPacket(v4, (uint64_t **)v433, v328, v329, v330, v331, v332, v333);
  v334 = *(_QWORD **)v433;
  if (!*(_QWORD *)v433)
    goto LABEL_689;
  v335 = *(_QWORD **)&v433[8];
  v336 = *(void **)v433;
  if (*(_QWORD *)&v433[8] != *(_QWORD *)v433)
  {
    while (1)
    {
      v338 = *--v335;
      v337 = v338;
      *v335 = 0;
      if (v338)
        break;
LABEL_592:
      if (v335 == v334)
      {
        v336 = *(void **)v433;
        goto LABEL_688;
      }
    }
    if (*(_BYTE *)(v337 + 184))
    {
      if ((*(_BYTE *)(v337 + 152) & 1) != 0)
      {
        operator delete(*(void **)(v337 + 160));
        if ((*(_BYTE *)(v337 + 104) & 1) == 0)
        {
LABEL_597:
          if ((*(_BYTE *)(v337 + 56) & 1) == 0)
            goto LABEL_599;
          goto LABEL_598;
        }
      }
      else if ((*(_BYTE *)(v337 + 104) & 1) == 0)
      {
        goto LABEL_597;
      }
      operator delete(*(void **)(v337 + 112));
      if ((*(_BYTE *)(v337 + 56) & 1) != 0)
LABEL_598:
        operator delete(*(void **)(v337 + 64));
    }
LABEL_599:
    v339 = *(_QWORD *)(v337 + 16);
    if (v339)
    {
      v340 = (unsigned int *)(v339 + 24);
      do
      {
        v341 = __ldaxr(v340);
        v342 = v341 - 1;
      }
      while (__stlxr(v342, v340));
      if (!v342)
      {
        v343 = *(_QWORD *)(v339 + 16);
        *(_QWORD *)(v339 + 16) = 0;
        if (v343)
          MEMORY[0x20BD0ADD4](v343, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v339, 0x1010C40EE34DA14);
      }
    }
    MEMORY[0x20BD0ADEC](v337, 0x10B2C4061102D9CLL);
    goto LABEL_592;
  }
LABEL_688:
  *(_QWORD *)&v433[8] = v334;
  operator delete(v336);
LABEL_689:
  v3 = __p_new_stuff[0];
  __p_new_stuff[0] = 0;
  if (v3)
    goto LABEL_632;
LABEL_690:
  v31 = 0;
  if (!v270)
    goto LABEL_654;
LABEL_648:
  v365 = (unsigned int *)(v270 + 24);
  do
  {
    v366 = __ldaxr(v365);
    v367 = v366 - 1;
  }
  while (__stlxr(v367, v365));
  if (!v367)
  {
    v368 = *(_QWORD *)(v270 + 16);
    *(_QWORD *)(v270 + 16) = 0;
    if (v368)
      MEMORY[0x20BD0ADD4](v368, 0x1000C8077774924);
    MEMORY[0x20BD0ADEC](v270, 0x1010C40EE34DA14);
  }
LABEL_654:
  if (!v432)
    return v31;
  v369 = v429;
  if (v429)
  {
    v370 = (unsigned int *)(v429 + 24);
    do
    {
      v371 = __ldaxr(v370);
      v372 = v371 - 1;
    }
    while (__stlxr(v372, v370));
    if (!v372)
    {
      v373 = *(_QWORD *)(v369 + 16);
      *(_QWORD *)(v369 + 16) = 0;
      if (v373)
        MEMORY[0x20BD0ADD4](v373, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v369, 0x1010C40EE34DA14);
    }
  }
  if (!v422)
    return v31;
  if ((v420 & 1) == 0)
  {
    if ((v418 & 1) == 0)
      goto LABEL_665;
LABEL_669:
    operator delete(v419);
    if ((v416 & 1) == 0)
      return v31;
LABEL_666:
    operator delete(__p);
    return v31;
  }
  operator delete(v421);
  if ((v418 & 1) != 0)
    goto LABEL_669;
LABEL_665:
  if ((v416 & 1) != 0)
    goto LABEL_666;
  return v31;
}

BOOL webrtc::RtpVideoStreamReceiver2::DeliverRtcp(webrtc::RtpVideoStreamReceiver2 *this, const unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  webrtc::RTCPReceiver *v5;
  uint64_t Rtt;
  char v7;
  uint64_t v8;
  uint64_t v9;
  pthread_mutex_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v3 = *((unsigned __int8 *)this + 456);
  if (*((_BYTE *)this + 456))
  {
    v5 = (webrtc::RTCPReceiver *)(*((_QWORD *)this + 59) + 712);
    if (!a3)
      a2 = 0;
    webrtc::RTCPReceiver::IncomingPacket(v5, a2, a3);
    Rtt = webrtc::ModuleRtpRtcpImpl2::LastRtt(*((webrtc::ModuleRtpRtcpImpl2 **)this + 59));
    if (v7)
    {
      v8 = Rtt;
      v9 = *((_QWORD *)this + 59);
      v10 = (pthread_mutex_t *)(v9 + 808);
      pthread_mutex_lock((pthread_mutex_t *)(v9 + 808));
      v11 = *(_QWORD *)(v9 + 880);
      if (v11)
      {
        v12 = *(_QWORD *)(v9 + 888);
        v13 = *(_DWORD *)(v9 + 896);
        pthread_mutex_unlock(v10);
        v14 = *((_QWORD *)this + 10);
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, v15);
        if ((uint64_t)(1000 * (HIDWORD(v16) - HIDWORD(v11))
                     - (uint64_t)((double)v11 / 4294967.3 + 0.5)
                     + (uint64_t)((double)v16 / 4294967.3 + 0.5)) <= 1)
        {
          if (webrtc::RtpToNtpEstimator::UpdateMeasurements((uint64_t)this + 200, v12, v13) >= 2)
            __asm { BR              X10 }
          if (*((_QWORD *)this + 23) >= 2uLL)
          {
            v17 = *((_QWORD *)this + 17);
            if (v17)
              v17 = *(_QWORD *)(*((_QWORD *)this + 18) + 32);
            *((_QWORD *)this + 153) = v17;
            *((_BYTE *)this + 1232) = 1;
          }
        }
      }
      else
      {
        pthread_mutex_unlock((pthread_mutex_t *)(v9 + 808));
      }
    }
  }
  return v3 != 0;
}

int64x2_t *webrtc::RtpVideoStreamReceiver2::FrameDecoded(int64x2_t *this, uint64_t a2)
{
  int64x2_t *v2;
  int64x2_t *v3;
  int64x2_t *v4;
  uint64_t v5;
  BOOL v6;
  int64x2_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t *v19;
  int64x2_t *v20;
  int64x2_t *v21;
  uint64_t v22;
  BOOL v23;
  int64x2_t **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  void *v39;

  v2 = (int64x2_t *)this[53].i64[0];
  if (v2)
  {
    v3 = this;
    v4 = this + 53;
    do
    {
      v5 = v2[2].i64[0];
      v6 = v5 < a2;
      if (v5 >= a2)
        v7 = (int64x2_t **)v2;
      else
        v7 = (int64x2_t **)&v2->i64[1];
      if (!v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != &this[53] && v4[2].i64[0] <= a2)
    {
      v8 = v4[2].u16[4];
      v9 = (uint64_t *)this[52].i64[1];
      v10 = (uint64_t *)v4->i64[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v4[1].i64[0];
          v12 = *v11 == (_QWORD)v4;
          v4 = (int64x2_t *)v11;
        }
        while (!v12);
      }
      if (v9 != v11)
      {
        do
        {
          v33 = (uint64_t *)v9[1];
          v34 = v9;
          if (v33)
          {
            do
            {
              v35 = v33;
              v33 = (uint64_t *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v35 = (uint64_t *)v34[2];
              v12 = *v35 == (_QWORD)v34;
              v34 = v35;
            }
            while (!v12);
          }
          if ((uint64_t *)v3[52].i64[1] == v9)
            v3[52].i64[1] = (uint64_t)v35;
          --v3[53].i64[1];
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[53].i64[0], v9);
          operator delete(v9);
          v9 = v35;
        }
        while (v35 != v11);
      }
      v13 = v8;
      if (v3[83].i8[2])
      {
        v14 = v3[83].u16[0];
        v15 = v8 >= v14;
        LODWORD(v16) = v8 - v14;
        v17 = (_DWORD)v16 != 0 && v15;
        v18 = (v16 & 0x8000u) == 0;
        if ((_DWORD)v16 == 0x8000)
          v18 = v17;
        if (v18)
          v16 = (unsigned __int16)v16;
        else
          v16 |= 0xFFFFFFFFFFFF0000;
        v13 = v16 + v3[82].i64[1];
      }
      v3[82].i64[1] = v13;
      v3[83].i16[0] = v8;
      v3[83].i8[2] = 1;
      v19 = (uint64_t *)v3[83].i64[1];
      v20 = v3 + 84;
      v21 = (int64x2_t *)v3[84].i64[0];
      if (v21)
      {
        do
        {
          v22 = v21[2].i64[0];
          v23 = v13 < v22;
          if (v13 >= v22)
            v24 = (int64x2_t **)&v21->i64[1];
          else
            v24 = (int64x2_t **)v21;
          if (v23)
            v20 = v21;
          v21 = *v24;
        }
        while (*v24);
      }
      if (v19 != (uint64_t *)v20)
      {
        do
        {
          v36 = (uint64_t *)v19[1];
          v37 = v19;
          if (v36)
          {
            do
            {
              v38 = v36;
              v36 = (uint64_t *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              v38 = (uint64_t *)v37[2];
              v12 = *v38 == (_QWORD)v37;
              v37 = v38;
            }
            while (!v12);
          }
          if ((uint64_t *)v3[83].i64[1] == v19)
            v3[83].i64[1] = (uint64_t)v38;
          --v3[84].i64[1];
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[84].i64[0], v19);
          v39 = (void *)v19[6];
          if (v39)
          {
            v19[7] = (uint64_t)v39;
            operator delete(v39);
          }
          operator delete(v19);
          v19 = v38;
        }
        while (v38 != (uint64_t *)v20);
      }
      webrtc::video_coding::PacketBuffer::ClearTo((webrtc::video_coding::PacketBuffer *)&v3[38], v8);
      v32 = v3[51].i64[0];
      *(_DWORD *)v32 = v8;
      this = *(int64x2_t **)(v32 + 16);
      switch(this[4841].i64[0])
      {
        case 0:
        case 1:
        case 2:
          return this;
        case 3:
          this = webrtc::RtpSeqNumOnlyRefFinder::ClearTo(this, v8);
          break;
        case 4:
          this = webrtc::RtpVp8RefFinder::ClearTo(this, v8);
          break;
        case 5:
          this = webrtc::RtpVp9RefFinder::ClearTo(this, v8);
          break;
        default:
          absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)this, v25, v26, v27, v28, v29, v30, v31);
      }
    }
  }
  return this;
}

void webrtc::RtpVideoStreamReceiver2::StartReceive(webrtc::RtpVideoStreamReceiver2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *p_p;
  unint64_t v8;
  _BOOL4 v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int64_t v17;
  char v18;
  uint64_t v19;
  int64x2_t v20;
  void *__p;
  unint64_t v22;
  unsigned __int8 v23;

  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**((_QWORD **)this + 8) + 16))(&__p, *((_QWORD *)this + 8), "WebRTC-Video-H26xPacketBuffer", 29);
  if ((char)v23 < 0)
  {
    v8 = v22;
    if ((v22 & 0x8000000000000000) != 0)
      goto LABEL_31;
    p_p = (int *)__p;
    if (v22)
    {
      if (!__p)
        goto LABEL_31;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v8 = v23;
  }
  if (v8 >= 7)
  {
    v10 = *p_p;
    v11 = *(int *)((char *)p_p + 3);
    v9 = v10 == 1650552389 && v11 == 1684368482;
    if ((v23 & 0x80) != 0)
      goto LABEL_16;
  }
  else
  {
    v9 = 0;
    if ((v23 & 0x80) != 0)
LABEL_16:
      operator delete(__p);
  }
  if (v9 && !*((_QWORD *)this + 89))
  {
    v18 = *((_BYTE *)this + 1392);
    v19 = operator new();
    *(_BYTE *)v19 = v18 ^ 1;
    bzero((void *)(v19 + 8), 0x4000uLL);
    *(_BYTE *)(v19 + 16450) = 0;
    *(_OWORD *)(v19 + 16464) = 0u;
    *(_OWORD *)(v19 + 16432) = 0u;
    *(_BYTE *)(v19 + 16448) = 0;
    *(_QWORD *)(v19 + 16456) = v19 + 16464;
    *(_QWORD *)(v19 + 16496) = 0;
    *(_QWORD *)(v19 + 16488) = 0;
    *(_QWORD *)(v19 + 16480) = v19 + 16488;
    *(_QWORD *)(v19 + 16392) = 0x8000000000000000;
    v20 = vdupq_n_s64(0x8000000000000000);
    *(int64x2_t *)(v19 + 16400) = v20;
    *(int64x2_t *)(v19 + 16416) = v20;
    std::unique_ptr<webrtc::H26xPacketBuffer>::reset[abi:sn180100]((uint64_t *)this + 89, v19);
    if (*((_BYTE *)this + 456))
      goto LABEL_30;
  }
  else if (*((_BYTE *)this + 456))
  {
LABEL_30:
    *((_BYTE *)this + 456) = 1;
    return;
  }
  v13 = *((_QWORD *)this + 12);
  if (!v13)
    goto LABEL_30;
  v14 = *((_QWORD *)this + 59);
  webrtc::PacketRouter::MaybeRemoveRembModuleCandidate(*((_QWORD **)this + 12), v14, 0, v2, v3, v4, v5, v6);
  v16 = *(char **)(v13 + 88);
  v15 = *(char **)(v13 + 96);
  if (v16 != v15)
  {
    while (*(_QWORD *)v16 != v14)
    {
      v16 += 8;
      if (v16 == v15)
      {
        v16 = *(char **)(v13 + 96);
        break;
      }
    }
  }
  if (v15 != v16)
  {
    v17 = v15 - (v16 + 8);
    if (v15 != v16 + 8)
      memmove(v16, v16 + 8, v15 - (v16 + 8));
    *(_QWORD *)(v13 + 96) = &v16[v17];
    webrtc::PacketRouter::AddReceiveRtpModule(*((_QWORD **)this + 12), *((_QWORD *)this + 59), 1);
    goto LABEL_30;
  }
LABEL_31:
  __break(1u);
}

void `non-virtual thunk to'webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer::~RtcpFeedbackBuffer(webrtc::RtpVideoStreamReceiver2::RtcpFeedbackBuffer *this)
{
  void *v1;

  *((_QWORD *)this - 1) = &off_24C0BEA40;
  *(_QWORD *)this = &unk_24C0BEA78;
  *((_QWORD *)this + 1) = &unk_24C0BEAA0;
  v1 = (void *)*((_QWORD *)this + 6);
  if (v1)
  {
    *((_QWORD *)this + 7) = v1;
    operator delete(v1);
  }
}

{
  void *v1;

  *((_QWORD *)this - 1) = &off_24C0BEA40;
  *(_QWORD *)this = &unk_24C0BEA78;
  *((_QWORD *)this + 1) = &unk_24C0BEAA0;
  v1 = (void *)*((_QWORD *)this + 6);
  if (v1)
  {
    *((_QWORD *)this + 7) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x20BD0ADECLL);
}

{
  void *v1;

  *((_QWORD *)this - 2) = &off_24C0BEA40;
  *((_QWORD *)this - 1) = &unk_24C0BEA78;
  *(_QWORD *)this = &unk_24C0BEAA0;
  v1 = (void *)*((_QWORD *)this + 5);
  if (v1)
  {
    *((_QWORD *)this + 6) = v1;
    operator delete(v1);
  }
}

{
  void *v1;

  *((_QWORD *)this - 2) = &off_24C0BEA40;
  *((_QWORD *)this - 1) = &unk_24C0BEA78;
  *(_QWORD *)this = &unk_24C0BEAA0;
  v1 = (void *)*((_QWORD *)this + 5);
  if (v1)
  {
    *((_QWORD *)this + 6) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x20BD0ADECLL);
}

char *std::vector<webrtc::RtpPacketReceived>::__push_back_slow_path<webrtc::RtpPacketReceived const&>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  __int128 v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  void *v47;

  v2 = 0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x1C71C71C71C71C7)
    goto LABEL_42;
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0xE38E38E38E38E3)
    v5 = 0x1C71C71C71C71C7;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_44:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x1C71C71C71C71C7)
    goto LABEL_44;
  v7 = 144 * v5;
  v8 = (char *)operator new(144 * v5);
  v9 = *(_OWORD *)(a2 + 16);
  v10 = &v8[144 * v2];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v9;
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v10 + 46) = *(_QWORD *)(a2 + 46);
  *((_QWORD *)v10 + 8) = 0;
  *((_QWORD *)v10 + 9) = 0;
  *((_QWORD *)v10 + 7) = 0;
  v12 = *(_BYTE **)(a2 + 56);
  v11 = *(_BYTE **)(a2 + 64);
  v13 = v11 - v12;
  if (v11 == v12)
    goto LABEL_12;
  if (v13 < 0)
LABEL_42:
    abort();
  v14 = (char *)operator new(v11 - v12);
  *((_QWORD *)v10 + 7) = v14;
  v15 = &v14[4 * (v13 >> 2)];
  *((_QWORD *)v10 + 9) = v15;
  memcpy(v14, v12, v13);
  *((_QWORD *)v10 + 8) = v15;
LABEL_12:
  v16 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)v10 + 10) = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v10 + 11) = v16;
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 24);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v10 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v10 + 7) = v19;
  v10[128] = *(_BYTE *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  *((_QWORD *)v10 + 17) = v20;
  if (v20)
  {
    v21 = (unsigned int *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = &v8[v7];
  v24 = v10 + 144;
  v25 = (char *)*a1;
  v26 = (char *)a1[1];
  if (v26 == *a1)
  {
    *a1 = v10;
    a1[1] = v24;
    a1[2] = v23;
  }
  else
  {
    v27 = 0;
    do
    {
      v28 = &v10[v27];
      v29 = &v26[v27];
      v30 = *(_OWORD *)&v26[v27 - 144];
      v31 = *(_OWORD *)&v26[v27 - 128];
      v32 = *(_OWORD *)&v26[v27 - 112];
      *(_QWORD *)(v28 - 98) = *(_QWORD *)&v26[v27 - 98];
      *((_OWORD *)v28 - 8) = v31;
      *((_OWORD *)v28 - 7) = v32;
      *((_OWORD *)v28 - 9) = v30;
      *(_OWORD *)(v28 - 88) = *(_OWORD *)&v26[v27 - 88];
      v33 = *(_QWORD *)&v26[v27 - 64];
      *((_QWORD *)v28 - 9) = *(_QWORD *)&v26[v27 - 72];
      *((_QWORD *)v29 - 11) = 0;
      *((_QWORD *)v29 - 10) = 0;
      *((_QWORD *)v29 - 9) = 0;
      v34 = *(_QWORD *)&v26[v27 - 56];
      *((_QWORD *)v29 - 7) = 0;
      *((_QWORD *)v28 - 8) = v33;
      *((_QWORD *)v28 - 7) = v34;
      *((_OWORD *)v28 - 3) = *(_OWORD *)&v26[v27 - 48];
      *((_QWORD *)v29 - 6) = 0;
      *((_QWORD *)v29 - 5) = 0;
      v35 = *(_OWORD *)&v26[v27 - 32];
      *(v28 - 16) = v26[v27 - 16];
      *((_OWORD *)v28 - 2) = v35;
      v36 = *(_QWORD *)&v26[v27 - 8];
      *((_QWORD *)v29 - 1) = 0;
      *((_QWORD *)v28 - 1) = v36;
      v27 -= 144;
    }
    while (&v26[v27] != v25);
    v26 = (char *)*a1;
    v37 = (char *)a1[1];
    *a1 = &v10[v27];
    a1[1] = v24;
    a1[2] = v23;
    while (v37 != v26)
    {
      v38 = (unsigned int *)*((_QWORD *)v37 - 1);
      if (v38)
      {
        v39 = v38 + 2;
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
          (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
      }
      v42 = *((_QWORD *)v37 - 7);
      if (v42)
      {
        v43 = (unsigned int *)(v42 + 24);
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          v46 = *(_QWORD *)(v42 + 16);
          *(_QWORD *)(v42 + 16) = 0;
          if (v46)
            MEMORY[0x20BD0ADD4](v46, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v42, 0x1010C40EE34DA14);
        }
      }
      v47 = (void *)*((_QWORD *)v37 - 11);
      if (v47)
      {
        *((_QWORD *)v37 - 10) = v47;
        operator delete(v47);
      }
      v37 -= 144;
    }
  }
  if (v26)
    operator delete(v26);
  return v10 + 144;
}

void std::__tree<std::__value_type<unsigned char,std::map<std::string,std::string>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<std::string,std::string>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<std::string,std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned char,std::map<std::string,std::string>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<std::string,std::string>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<std::string,std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned char,std::map<std::string,std::string>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::map<std::string,std::string>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::map<std::string,std::string>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(a2 + 5), a2[6]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<long long,webrtc::RtpPacketInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::RtpPacketInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::RtpPacketInfo>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,webrtc::RtpPacketInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::RtpPacketInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::RtpPacketInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,webrtc::RtpPacketInfo>,std::__map_value_compare<long long,std::__value_type<long long,webrtc::RtpPacketInfo>,std::less<long long>,true>,std::allocator<std::__value_type<long long,webrtc::RtpPacketInfo>>>::destroy(a1[1]);
    v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t rtc::RefCountedObject<webrtc::RtpVideoStreamReceiverFrameTransformerDelegate>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 52);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::RtpVideoStreamReceiverFrameTransformerDelegate>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 13;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::RtpVideoStreamReceiverFrameTransformerDelegate>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C0BEC88;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void rtc::RefCountedObject<webrtc::RtpVideoStreamReceiverFrameTransformerDelegate>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C0BEC88;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::RtpVideoStreamReceiverFrameTransformerDelegate>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 52));
  return v1 == 1;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  size_t v4;
  size_t v5;
  const void **v6;
  BOOL v7;
  char v8;
  uint64_t result;
  size_t v10;
  const void **v11;
  size_t v12;
  const void *v13;
  size_t v14;
  size_t v15;
  const void **v16;
  size_t v17;
  size_t v18;
  int v19;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
    return 0;
  v4 = *((unsigned __int8 *)a2 + 23);
  v6 = (const void **)*a2;
  v5 = (size_t)a2[1];
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 0;
  v8 = !v7;
  while (1)
  {
    result = (uint64_t)a2;
    v10 = v4;
    if ((v4 & 0x80) != 0)
    {
      if ((v5 & 0x8000000000000000) != 0)
        break;
      result = (uint64_t)v6;
      v10 = v5;
      if ((v8 & 1) == 0)
        break;
    }
    v11 = (const void **)(v2 + 4);
    v12 = *((unsigned __int8 *)v2 + 55);
    v13 = v2 + 4;
    v14 = v12;
    if (*((char *)v2 + 55) < 0)
    {
      v14 = v2[5];
      if ((v14 & 0x8000000000000000) != 0)
        break;
      v13 = *v11;
      if (v14)
      {
        if (!v13)
          break;
      }
    }
    if (v14 >= v10)
      v15 = v10;
    else
      v15 = v14;
    result = memcmp((const void *)result, v13, v15);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) != 0)
        goto LABEL_10;
    }
    else if (v10 < v14)
    {
      goto LABEL_10;
    }
    if ((v12 & 0x80) != 0)
    {
      v12 = v2[5];
      if ((v12 & 0x8000000000000000) != 0)
        break;
      v11 = (const void **)*v11;
      if (v12)
      {
        if (!v11)
          break;
      }
    }
    v16 = a2;
    v17 = v4;
    if ((v4 & 0x80) != 0)
    {
      if ((v5 & 0x8000000000000000) != 0)
        break;
      v16 = v6;
      v17 = v5;
      if ((v8 & 1) == 0)
        break;
    }
    if (v17 >= v12)
      v18 = v12;
    else
      v18 = v17;
    v19 = memcmp(v11, v16, v18);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        return 1;
    }
    else if (v12 >= v17)
    {
      return 1;
    }
    ++v2;
LABEL_10:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  __break(1u);
  return result;
}

void absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;

  v5 = a1 + 8;
  v4 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (((v7 >> 60) & 7) != 0)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v5 = *(_QWORD *)(a1 + 8);
    v6 = 2 * v7;
  }
  else
  {
    v6 = 10;
  }
  v8 = v4 >> 1;
  v9 = (char *)operator new(8 * v6);
  v10 = v9;
  *(_QWORD *)&v9[8 * (v4 >> 1)] = a2;
  if (v4 >= 2)
  {
    v11 = 0;
    if (v4 < 8 || (unint64_t)&v9[-v5] < 0x20)
    {
      v12 = (uint64_t *)v5;
    }
    else
    {
      v11 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      v12 = (uint64_t *)(v5 + 8 * (v8 & 0x7FFFFFFFFFFFFFFCLL));
      v13 = v9 + 16;
      v14 = (__int128 *)(v5 + 16);
      v15 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v8 == v11)
        goto LABEL_15;
    }
    v17 = v8 - v11;
    v18 = &v9[8 * v11];
    do
    {
      v19 = *v12++;
      *(_QWORD *)v18 = v19;
      v18 += 8;
      --v17;
    }
    while (v17);
  }
LABEL_15:
  if ((v4 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v4 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)a1 = (v4 | 1) + 2;
}

void absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::DestroyContents(_QWORD *a1)
{
  unint64_t v2;
  void **v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;

  v3 = (void **)(a1 + 1);
  v2 = *a1;
  v4 = *a1 & 1;
  v5 = (char *)(a1 + 1);
  if ((*a1 & 1) != 0)
    v5 = (char *)*v3;
  if (v2 >= 2)
  {
    if (!v5)
    {
      __break(1u);
      return;
    }
    v6 = v2 >> 1;
    v7 = v5 - 8;
    do
    {
      v8 = *(_QWORD *)&v7[8 * v6];
      *(_QWORD *)&v7[8 * v6] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      --v6;
    }
    while (v6);
    v4 = *a1 & 1;
  }
  if (v4)
    operator delete(*v3);
}

uint64_t webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::TransformFrame(uint64_t a1, uint64_t *a2)
{
  void (***v4)(_QWORD, uint64_t *);
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_BYTE *)(a1 + 48))
  {
    v4 = *(void (****)(_QWORD, uint64_t *))(a1 + 8);
    v5 = *a2;
    *a2 = 0;
    v21 = v5;
    (**v4)(v4, &v21);
    result = v21;
    v21 = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = operator new();
  v9 = *a2;
  *a2 = 0;
  v10 = *(_DWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v8 = off_24C0BECC8;
  *(_QWORD *)(v8 + 8) = v9;
  webrtc::RTPVideoHeader::GetAsMetadata((webrtc::RTPVideoHeader *)(v9 + 2424), v12);
  *(_QWORD *)(v8 + 1840) = v11;
  *(_DWORD *)(v8 + 1808) = v10;
  v13 = *(_QWORD *)(v8 + 8);
  v14 = *(_BYTE **)(v13 + 4416);
  v15 = *(_BYTE **)(v13 + 4424);
  v16 = v15 - v14;
  if (v15 == v14)
  {
    v17 = 0;
    v18 = 0;
    v19 = *(void **)(v8 + 1816);
    if (v19)
    {
LABEL_8:
      *(_QWORD *)(v8 + 1824) = v19;
      operator delete(v19);
    }
  }
  else
  {
    if (v16 < 0)
      abort();
    v17 = (char *)operator new(v15 - v14);
    v18 = &v17[4 * (v16 >> 2)];
    memcpy(v17, v14, v16);
    v19 = *(void **)(v8 + 1816);
    if (v19)
      goto LABEL_8;
  }
  *(_QWORD *)(v8 + 1816) = v17;
  *(_QWORD *)(v8 + 1824) = v18;
  *(_QWORD *)(v8 + 1832) = v18;
  v20 = v8;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 32))(v7, &v20);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::OnTransformedFrame(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;
  _QWORD v9[2];
  uint64_t (*v10)(char, uint64_t *, uint64_t *);
  uint64_t *(*v11)(uint64_t *);

  if (a1)
    (**(void (***)(uint64_t))a1)(a1);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *a2;
  *a2 = 0;
  v9[0] = a1;
  v9[1] = v5;
  v10 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0>;
  v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v9, &v8, &v7);
  return v10(1, v9, v9);
}

uint64_t webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::StartShortCircuiting(webrtc::RtpVideoStreamReceiverFrameTransformerDelegate *this)
{
  uint64_t v2;
  char v4;
  char v5;
  _QWORD v6[2];
  uint64_t (*v7)(char, uint64_t *, uint64_t *);
  uint64_t (*v8)(uint64_t);

  if (this)
    (**(void (***)(webrtc::RtpVideoStreamReceiverFrameTransformerDelegate *))this)(this);
  v2 = *((_QWORD *)this + 3);
  v6[0] = this;
  v7 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::StartShortCircuiting(void)::$_0>;
  v8 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::StartShortCircuiting(void)::$_0 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v2 + 8))(v2, v6, &v5, &v4);
  return v7(1, v6, v6);
}

void webrtc::`anonymous namespace'::TransformableVideoReceiverFrame::~TransformableVideoReceiverFrame(webrtc::_anonymous_namespace_::TransformableVideoReceiverFrame *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24C0BECC8;
  v2 = (void *)*((_QWORD *)this + 227);
  if (v2)
  {
    *((_QWORD *)this + 228) = v2;
    operator delete(v2);
  }
  if ((*((_BYTE *)this + 104) & 1) != 0)
  {
    operator delete(*((void **)this + 14));
    if ((*((_BYTE *)this + 56) & 1) == 0)
    {
LABEL_5:
      v3 = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (!v3)
        return;
      goto LABEL_6;
    }
  }
  else if ((*((_BYTE *)this + 56) & 1) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)this + 8));
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return;
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24C0BECC8;
  v2 = (void *)*((_QWORD *)this + 227);
  if (v2)
  {
    *((_QWORD *)this + 228) = v2;
    operator delete(v2);
  }
  if ((*((_BYTE *)this + 104) & 1) != 0)
  {
    operator delete(*((void **)this + 14));
    if ((*((_BYTE *)this + 56) & 1) == 0)
    {
LABEL_5:
      v3 = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (!v3)
        goto LABEL_10;
      goto LABEL_6;
    }
  }
  else if ((*((_BYTE *)this + 56) & 1) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)this + 8));
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    goto LABEL_10;
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
LABEL_10:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoReceiverFrame::GetData(webrtc::_anonymous_namespace_::TransformableVideoReceiverFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 144);
  if (v1)
    (**(void (***)(_QWORD))v1)(*(_QWORD *)(*((_QWORD *)this + 1) + 144));
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v3)
    return v2;
  else
    return 0;
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoReceiverFrame::SetData(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = operator new();
  *(_QWORD *)(v6 + 8) = a3;
  v7 = malloc_type_malloc(a3, 0xB64CC8DFuLL);
  *(_QWORD *)(v6 + 16) = v7;
  if (a3)
    memmove(v7, a2, a3);
  *(_QWORD *)v6 = &unk_24C0B3A40;
  *(_DWORD *)(v6 + 24) = 0;
  v8 = (unsigned int *)(v6 + 24);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  rtc::RefCountedObject<webrtc::EncodedImageBuffer>::AddRef(v6);
  v10 = *(_QWORD *)(v5 + 144);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)(v5 + 144) = v6;
  *(_QWORD *)(v5 + 152) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoReceiverFrame::GetPayloadType(webrtc::_anonymous_namespace_::TransformableVideoReceiverFrame *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 392);
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoReceiverFrame::GetSsrc(webrtc::_anonymous_namespace_::TransformableVideoReceiverFrame *this)
{
  uint64_t v1;
  _QWORD v3[5];
  char v4;
  void *v5;
  char v6;
  void *v7;
  unsigned int v8;
  void *__p;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 96))(v3);
  v1 = v8;
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if ((v6 & 1) != 0)
  {
    operator delete(v7);
    if ((v4 & 1) == 0)
      return v1;
LABEL_7:
    operator delete(v5);
    return v1;
  }
  if ((v4 & 1) != 0)
    goto LABEL_7;
  return v1;
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoReceiverFrame::GetTimestamp(webrtc::_anonymous_namespace_::TransformableVideoReceiverFrame *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 160);
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoReceiverFrame::SetRTPTimestamp(uint64_t this, int a2)
{
  *(_DWORD *)(*(_QWORD *)(this + 8) + 160) = a2;
  return this;
}

uint64_t webrtc::`anonymous namespace'::TransformableVideoReceiverFrame::GetDirection(webrtc::_anonymous_namespace_::TransformableVideoReceiverFrame *this)
{
  return 1;
}

rtc::webrtc_checks_impl *webrtc::`anonymous namespace'::TransformableVideoReceiverFrame::GetMimeType@<X0>(rtc::webrtc_checks_impl *this@<X0>, unint64_t a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  size_t v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  const char *v12;
  BOOL v13;
  _DWORD v14[5];
  char v15;

  v15 = 6;
  if (v14 <= (_DWORD *)"video/" && (char *)&v14[1] + 2 > "video/")
    goto LABEL_22;
  strcpy((char *)v14, "video/");
  v3 = *(int *)(*((_QWORD *)this + 1) + 4400);
  if (v3 >= 6)
    goto LABEL_23;
  v4 = (&off_24C0BED38)[v3];
  v5 = strlen(v4);
  v6 = v5 + 6;
  if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v5;
  if (v6 > 0x16)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v9 | 0x8000000000000000;
    *(_QWORD *)a2 = v10;
    a2 = (unint64_t)v10;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 23) = v6;
  }
  this = (rtc::webrtc_checks_impl *)(a2 + 6);
  v11 = (unint64_t)v14 < a2 || a2 + 6 <= (unint64_t)v14;
  if (!v11
    || ((*(_WORD *)(a2 + 4) = 12143,
         *(_DWORD *)a2 = 1701079414,
         v12 = (char *)this + v7,
         this <= (rtc::webrtc_checks_impl *)v4)
      ? (v13 = v12 > v4)
      : (v13 = 0),
        v13))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    rtc::webrtc_checks_impl::UnreachableCodeReached(this);
  }
  if (v7)
    this = (rtc::webrtc_checks_impl *)memcpy(this, v4, v7);
  *v12 = 0;
  return this;
}

BOOL webrtc::`anonymous namespace'::TransformableVideoReceiverFrame::IsKeyFrame(webrtc::_anonymous_namespace_::TransformableVideoReceiverFrame *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 1) + 32) == 3;
}

void *webrtc::`anonymous namespace'::TransformableVideoReceiverFrame::Metadata@<X0>(webrtc::_anonymous_namespace_::TransformableVideoReceiverFrame *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  void *result;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  v4 = *((_QWORD *)this + 7);
  v5 = *((_OWORD *)this + 2);
  *(_OWORD *)a2 = *((_OWORD *)this + 1);
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 6);
  *(_QWORD *)(a2 + 40) = 0;
  if (v4 >= 2)
  {
    if ((v4 & 1) != 0)
    {
      absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::InitFrom((unint64_t *)(a2 + 40), (unint64_t *)this + 7);
      *(_QWORD *)(a2 + 88) = 0;
      v7 = (unint64_t *)(a2 + 88);
      v8 = (unint64_t *)((char *)this + 104);
      v9 = *((_QWORD *)this + 13);
      if (v9 < 2)
        goto LABEL_10;
      goto LABEL_5;
    }
    *(_QWORD *)(a2 + 40) = v4;
    v6 = *((_OWORD *)this + 5);
    *(_OWORD *)(a2 + 48) = *((_OWORD *)this + 4);
    *(_OWORD *)(a2 + 64) = v6;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)this + 12);
  }
  *(_QWORD *)(a2 + 88) = 0;
  v7 = (unint64_t *)(a2 + 88);
  v8 = (unint64_t *)((char *)this + 104);
  v9 = *((_QWORD *)this + 13);
  if (v9 < 2)
    goto LABEL_10;
LABEL_5:
  if ((v9 & 1) != 0)
  {
    absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::InitFrom(v7, v8);
  }
  else
  {
    *(_QWORD *)(a2 + 88) = v9;
    v10 = *((_OWORD *)this + 8);
    *(_OWORD *)(a2 + 96) = *((_OWORD *)this + 7);
    *(_OWORD *)(a2 + 112) = v10;
    *(_QWORD *)(a2 + 128) = *((_QWORD *)this + 18);
  }
LABEL_10:
  result = memcpy((void *)(a2 + 136), (char *)this + 152, 0x67CuLL);
  *(_QWORD *)(a2 + 1800) = 0;
  *(_QWORD *)(a2 + 1816) = 0;
  *(_QWORD *)(a2 + 1808) = 0;
  v12 = (_BYTE *)*((_QWORD *)this + 227);
  v13 = (_BYTE *)*((_QWORD *)this + 228);
  v14 = v13 - v12;
  if (v13 != v12)
  {
    if (v14 < 0)
      abort();
    v15 = (char *)operator new(v13 - v12);
    *(_QWORD *)(a2 + 1800) = v15;
    *(_QWORD *)(a2 + 1808) = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *(_QWORD *)(a2 + 1816) = v16;
    result = memcpy(v15, v12, v14);
    *(_QWORD *)(a2 + 1808) = v16;
  }
  return result;
}

void webrtc::`anonymous namespace'::TransformableVideoReceiverFrame::SetMetadata(webrtc::_anonymous_namespace_::TransformableVideoReceiverFrame *this, const webrtc::VideoFrameMetadata *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  char v17;
  unint64_t v18[6];
  char v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 96))(v16);
  v6 = (char *)*((_QWORD *)a2 + 6);
  v5 = (char *)a2 + 48;
  v4 = v6;
  v7 = *((_QWORD *)v5 - 3);
  v16[2] = *((_QWORD *)v5 - 4);
  v17 = v7;
  v8 = *((_QWORD *)v5 - 1);
  if ((v8 & 1) == 0)
    v4 = v5;
  if (v8 >= 2)
    v9 = (uint64_t)v4;
  else
    v9 = 0;
  absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<long long>,long long const*>>(v18, v9, (uint64_t)(4 * v8) >> 3);
  webrtc::RTPVideoHeader::SetFromMetadata((webrtc::RTPVideoHeader *)(*((_QWORD *)this + 1) + 2424), (const webrtc::VideoFrameMetadata *)v16, v10, v11, v12, v13, v14, v15);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if ((v19 & 1) == 0)
  {
    if ((v18[0] & 1) == 0)
      return;
LABEL_12:
    operator delete((void *)v18[1]);
    return;
  }
  operator delete(v20);
  if ((v18[0] & 1) != 0)
    goto LABEL_12;
}

uint64_t *absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0 &&>(uint64_t *result)
{
  _QWORD *v1;
  uint64_t v2;
  void (***v3)(_QWORD, _WORD **);
  _WORD *v4;
  void (***v5)(_QWORD, _WORD **);
  __int16 v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t *v47;
  void *__src;
  int v49;
  void (***v50)(_QWORD, uint64_t *);
  uint64_t v51;
  unsigned __int16 v52[6];
  char v53;
  _WORD *v54;
  void (***v55)(_QWORD);
  uint64_t v56;
  _BYTE v57[16];
  char v58;
  void *__p;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  _BYTE v65[15];
  __int16 v66;
  int v67;
  char v68;
  char v69;
  _BYTE v70[14];
  _BYTE v71[1720];
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  int v76;
  char v77;
  __int16 v78;
  unsigned __int8 v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  int v84;
  void *v85;
  void *v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v2 = *result;
  v1 = (_QWORD *)result[1];
  result[1] = 0;
  if (*(_QWORD *)(v2 + 8))
  {
    if ((*(unsigned int (**)(_QWORD *))(*v1 + 72))(v1) == 1)
    {
      v3 = (void (***)(_QWORD, _WORD **))v1[230];
      v4 = (_WORD *)v1[1];
      v1[1] = 0;
      v5 = *(void (****)(_QWORD, _WORD **))(v2 + 8);
      if (v3 != v5)
      {
        v6 = v4[1204];
        v4[2202] = v6;
        v4[2203] = v6;
      }
      v54 = v4;
      (**v5)(v5, &v54);
      v7 = v54;
      v54 = 0;
      if (v7)
        (*(void (**)(_WORD *))(*(_QWORD *)v7 + 8))(v7);
      return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v1 + 8))(v1);
    }
    if ((*(unsigned int (**)(_QWORD *))(*v1 + 72))(v1) != 2)
    {
      v40 = (*(uint64_t (**)(_QWORD *))(*v1 + 72))(v1);
      v45 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_video_stream_receiver_frame_transformer_delegate.cc", 183, "frame->GetDirection() == TransformableFrameInterface::Direction::kSender", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v41, v42, v43, v44, v40);
      return (uint64_t *)absl::internal_any_invocable::LocalManagerNontrivial<webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0>(v45, v46, v47);
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v1 + 96))(&v75, v1);
    v57[0] = 0;
    v64 = 0;
    memset(v65, 0, sizeof(v65));
    v66 = 1;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    *(_QWORD *)&v70[6] = 0xFF000000000000;
    *(_QWORD *)v70 = 0;
    v71[0] = 0;
    v71[68] = 0;
    v71[72] = 0;
    v71[74] = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    webrtc::RTPVideoHeader::SetFromMetadata((webrtc::RTPVideoHeader *)v57, (const webrtc::VideoFrameMetadata *)&v75, v8, v9, v10, v11, v12, v13);
    v53 = -1;
    __src = (void *)(*(uint64_t (**)(_QWORD *))(*v1 + 16))(v1);
    v15 = v14;
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 40) + 16))(*(_QWORD *)(v2 + 40));
    v17 = v16 / 0x3E8uLL;
    if (v16 % 0x3E8uLL > 0x1F3)
      ++v17;
    if (-v16 % 0x3E8uLL <= 0x1F4)
      v18 = 0;
    else
      v18 = -1;
    if (v16 < 0)
      v19 = v18 - -v16 / 0x3E8uLL;
    else
      v19 = v17;
    v50 = *(void (****)(_QWORD, uint64_t *))(v2 + 8);
    v20 = v79;
    v21 = v78;
    v49 = (*(uint64_t (**)(_QWORD *))(*v1 + 48))(v1);
    v22 = (*(uint64_t (**)(_QWORD *))(*v1 + 32))(v1);
    v23 = v84;
    v24 = v76;
    v25 = v77;
    v26 = operator new();
    *(_QWORD *)(v26 + 8) = v15;
    v27 = malloc_type_malloc(v15, 0xB64CC8DFuLL);
    *(_QWORD *)(v26 + 16) = v27;
    if (v15)
      memmove(v27, __src, v15);
    *(_QWORD *)v26 = &unk_24C0B3A40;
    *(_DWORD *)(v26 + 24) = 0;
    v28 = (unsigned int *)(v26 + 24);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = operator new();
    if (v20)
      v31 = v21;
    else
      v31 = 0;
    v55 = (void (***)(_QWORD))v26;
    v56 = 0;
    v51 = webrtc::RtpFrameObject::RtpFrameObject(v30, v31, v31, v66, 0, v19, v19, v49, 0, v52, v22, v23, v24, v25, (uint64_t)v57, (uint64_t)v71, &v56, &v55);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v32 = v56;
    if (v56)
    {
      do
      {
        v33 = __ldaxr((unsigned int *)v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, (unsigned int *)v32));
      if (!v34)
      {
        v35 = *(_QWORD *)(v32 + 8);
        if (v35)
        {
          v36 = *(_QWORD *)(v32 + 16);
          v37 = *(void **)(v32 + 8);
          if (v36 != v35)
          {
            do
            {
              v38 = *(void **)(v36 - 96);
              if (v38)
              {
                *(_QWORD *)(v36 - 88) = v38;
                operator delete(v38);
              }
              v36 -= 104;
            }
            while (v36 != v35);
            v37 = *(void **)(v32 + 8);
          }
          *(_QWORD *)(v32 + 16) = v35;
          operator delete(v37);
        }
        MEMORY[0x20BD0ADEC](v32, 0x1020C40E72D6CFBLL);
      }
    }
    (**v50)(v50, &v51);
    v39 = v51;
    v51 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    if (!v64)
      goto LABEL_44;
    if ((v62 & 1) != 0)
    {
      operator delete(v63);
      if ((v60 & 1) == 0)
      {
LABEL_42:
        if ((v58 & 1) != 0)
LABEL_43:
          operator delete(__p);
LABEL_44:
        if (v85)
        {
          v86 = v85;
          operator delete(v85);
        }
        if ((v82 & 1) != 0)
          operator delete(v83);
        if ((v80 & 1) != 0)
          operator delete(v81);
        return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v1 + 8))(v1);
      }
    }
    else if ((v60 & 1) == 0)
    {
      goto LABEL_42;
    }
    operator delete(v61);
    if ((v58 & 1) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
  if (v1)
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v1 + 8))(v1);
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v4 = *a2;
    *a2 = 0;
    *a3 = v4;
    v5 = a2[1];
    a2[1] = 0;
    a3[1] = v5;
  }
  v6 = a2[1];
  a2[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::StartShortCircuiting(void)::$_0 &&>(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + 48) = 1;
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::RtpVideoStreamReceiverFrameTransformerDelegate::StartShortCircuiting(void)::$_0>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *a2 = 0;
    *a3 = v3;
  }
  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void webrtc::RtpVp8RefFinder::ManageFrame(absl::variant_internal *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  int64x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i64;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  absl::variant_internal *v41;
  uint64_t *v42;
  char v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  absl::variant_internal *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  absl::variant_internal *v58;
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  BOOL v66;
  char *v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  __int128 *v72;
  _OWORD *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  int64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v10 = *a2;
  if (*(_QWORD *)(*a2 + 4360) != 1)
LABEL_56:
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v11 = a2;
  v12 = (int64x2_t *)a1;
  v13 = v10 + 2720;
  v14 = *(unsigned __int8 *)(v10 + 2726);
  if (v14 != 255)
  {
    *(_DWORD *)(v10 + 200) = v14;
    *(_BYTE *)(v10 + 204) = 1;
  }
  v15 = *(unsigned __int8 *)(v10 + 2724);
  i64 = v15;
  if (*((_BYTE *)a1 + 129))
  {
    v17 = *((unsigned __int8 *)a1 + 128);
    v18 = v15 >= v17;
    LODWORD(v19) = v15 - v17;
    v20 = (_DWORD)v19 != 0 && v18;
    v21 = (v19 & 0x80u) == 0;
    if ((_DWORD)v19 == 128)
      v21 = v20;
    if (v21)
      v19 = v19;
    else
      v19 |= 0xFFFFFFFFFFFFFF00;
    i64 = v19 + *((_QWORD *)a1 + 15);
  }
  *((_QWORD *)a1 + 15) = i64;
  *((_WORD *)a1 + 64) = v15 | 0x100;
  webrtc::RtpVp8RefFinder::ManageFrameInternal((int *)a1, *a2, v13, i64);
  *a9 = 0;
  if ((_DWORD)a1 == 1)
  {
    a9[1] = *v11;
    *v11 = 0;
    *a9 = 2;
    i64 = (uint64_t)v12[2].i64;
    v38 = v12[2].i64[1];
    v39 = v12[3].i64[0];
    while (1)
    {
      v40 = v12[4].u64[0];
      v41 = (absl::variant_internal *)(v38 + 8 * (v40 >> 8));
      if (v39 == v38)
        v42 = 0;
      else
        v42 = (uint64_t *)(*(_QWORD *)v41 + 16 * v40);
      v43 = 0;
      while (v39 != v38)
      {
        v45 = v12[4].i64[1] + v12[4].i64[0];
        if (v42 == (uint64_t *)(*(_QWORD *)(v38 + ((v45 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v45))
          goto LABEL_31;
LABEL_44:
        v46 = (unint64_t *)(v42 + 1);
        a2 = (uint64_t *)v42[1];
        if (a2[545] != 1)
          goto LABEL_56;
        webrtc::RtpVp8RefFinder::ManageFrameInternal(v12->i32, (uint64_t)a2, (uint64_t)(a2 + 340), *v42);
        switch((_DWORD)a1)
        {
          case 2:
            goto LABEL_38;
          case 1:
            v48 = *a9;
            v49 = (unint64_t *)a9[1];
            if ((*a9 & 1) != 0)
            {
              v50 = a9[2];
            }
            else
            {
              v49 = a9 + 1;
              v50 = 3;
            }
            if (v48 >> 1 == v50)
            {
              absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::EmplaceBackSlow<std::unique_ptr<webrtc::RtpFrameObject>>(a9, v42 + 1);
            }
            else
            {
              if (!v49)
                goto LABEL_114;
              v51 = *v46;
              *v46 = 0;
              v49[v48 >> 1] = v51;
              *a9 = v48 + 2;
            }
            v43 = 1;
LABEL_38:
            a1 = (absl::variant_internal *)std::deque<webrtc::RtpVp8RefFinder::UnwrappedTl0Frame>::erase(v12 + 2, (char *)v41, (uint64_t)v42);
            v41 = a1;
            v42 = v44;
            break;
          case 0:
            v42 += 2;
            if ((uint64_t *)((char *)v42 - *(_QWORD *)v41) == (uint64_t *)4096)
            {
              v47 = (uint64_t *)*((_QWORD *)v41 + 1);
              v41 = (absl::variant_internal *)((char *)v41 + 8);
              v42 = v47;
            }
            break;
        }
        v38 = v12[2].i64[1];
        v39 = v12[3].i64[0];
      }
      if (v42)
        goto LABEL_44;
LABEL_31:
      if ((v43 & 1) == 0)
        return;
    }
  }
  if ((_DWORD)a1)
    return;
  v22 = v12[4].u64[1];
  if (v22 >= 0x65)
  {
    v23 = v12[4].i64[0];
    v24 = v22 - 1;
    v25 = v23 + v22 - 1;
    v26 = *(_QWORD *)(v12[2].i64[1] + ((v25 >> 5) & 0x7FFFFFFFFFFFFF8));
    if (!v26)
    {
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }
    v27 = v26 + 16 * v25;
    v28 = *(_QWORD *)(v27 + 8);
    *(_QWORD *)(v27 + 8) = 0;
    if (v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      v23 = v12[4].i64[0];
      v22 = v12[4].u64[1];
      v24 = v22 - 1;
    }
    v30 = v12[2].i64[1];
    v29 = v12[3].i64[0];
    v12[4].i64[1] = v24;
    if (v29 == v30)
      v31 = 0;
    else
      v31 = 32 * (v29 - v30) - 1;
    if (v31 - (v23 + v22) + 1 >= 0x200)
    {
      operator delete(*(void **)(v29 - 8));
      v12[3].i64[0] -= 8;
    }
  }
  v32 = *v11;
  *v11 = 0;
  v33 = v12[4].u64[0];
  if (!v33)
  {
    v34 = (char *)v12[2].i64[1];
    v35 = (char *)v12[3].i64[0];
    v36 = 32 * (v35 - v34) - 1;
    v37 = v35 - v34;
    if (v35 == v34)
      v36 = 0;
    if ((unint64_t)(v36 - v12[4].i64[1]) >= 0x100)
    {
      v12[4].i64[0] = 256;
      v111 = *((_QWORD *)v35 - 1);
      v12[3].i64[0] = (uint64_t)(v35 - 8);
      std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front((void **)&v12[2], &v111);
LABEL_118:
      v33 = v12[4].u64[0];
      goto LABEL_119;
    }
    v52 = (char *)v12[3].i64[1];
    v53 = (char *)v12[2].i64[0];
    if (v37 < v52 - v53)
    {
      a1 = (absl::variant_internal *)operator new(0x1000uLL);
      v54 = a1;
      if (v34 != v53)
      {
        *((_QWORD *)v34 - 1) = a1;
        v55 = v12[2].i64[1] - 8;
        v12[2].i64[1] = v55;
        goto LABEL_82;
      }
      if (v35 != v52)
        goto LABEL_80;
      v62 = (v35 - v53) >> 2;
      if (v35 == v34)
        v62 = 1;
      if (!(v62 >> 61))
      {
        v63 = v62 >> 2;
        v64 = 8 * v62;
        a1 = (absl::variant_internal *)operator new(8 * v62);
        v65 = (char *)a1 + 8 * v63;
        v66 = v35 == v34;
        v35 = v65;
        if (!v66)
        {
          v35 = &v65[v37 & 0xFFFFFFFFFFFFFFF8];
          v67 = (char *)a1 + 8 * v63;
          v68 = v34;
          if (v37 - 8 < 0x38)
            goto LABEL_129;
          v69 = (char *)a1 + 8 * v63;
          v67 = v69;
          v68 = v34;
          if ((unint64_t)(v69 - v34) < 0x20)
            goto LABEL_129;
          v70 = ((v37 - 8) >> 3) + 1;
          v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
          v67 = &v65[v71];
          v68 = &v34[v71];
          v72 = (__int128 *)(v34 + 16);
          v73 = v69 + 16;
          v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v75 = *v72;
            *(v73 - 1) = *(v72 - 1);
            *v73 = v75;
            v72 += 2;
            v73 += 2;
            v74 -= 4;
          }
          while (v74);
          if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_129:
            do
            {
              v76 = *(_QWORD *)v68;
              v68 += 8;
              *(_QWORD *)v67 = v76;
              v67 += 8;
            }
            while (v67 != v35);
          }
        }
        v12[2].i64[0] = (uint64_t)a1;
        v12[2].i64[1] = (uint64_t)v65;
        v12[3].i64[0] = (uint64_t)v35;
        v12[3].i64[1] = (uint64_t)a1 + v64;
        if (v34)
        {
          operator delete(v34);
          v35 = (char *)v12[3].i64[0];
        }
LABEL_80:
        if (v35)
        {
          *(_QWORD *)v35 = v54;
          v77 = (uint64_t *)v12[3].i64[0];
          v12[3].i64[0] = (uint64_t)(v77 + 1);
          v111 = *v77;
          v12[3].i64[0] = (uint64_t)v77;
          std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front((void **)&v12[2], &v111);
          v55 = v12[2].i64[1];
LABEL_82:
          if (v12[3].i64[0] - v55 == 8)
            v12[4].i64[0] = 128;
          else
            v12[4].i64[0] += 256;
          goto LABEL_118;
        }
        goto LABEL_114;
      }
LABEL_126:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    v109 = v32;
    if (v52 == v53)
      v56 = 1;
    else
      v56 = (v52 - v53) >> 2;
    if (v56 >> 61)
      goto LABEL_126;
    v57 = (char *)operator new(8 * v56);
    a1 = (absl::variant_internal *)operator new(0x1000uLL);
    v58 = a1;
    if (v56)
    {
      v59 = &v57[8 * v56];
      *(_QWORD *)v57 = a1;
      v60 = v57 + 8;
      v61 = v57;
      if (v34 != v35)
        goto LABEL_90;
LABEL_86:
      a1 = (absl::variant_internal *)v12[2].i64[0];
      v12[2].i64[0] = (uint64_t)v61;
      v12[2].i64[1] = (uint64_t)v57;
      v12[3].i64[0] = (uint64_t)v60;
      v12[3].i64[1] = (uint64_t)v59;
      if (v60 - v57 == 8)
      {
        v80 = 128;
        goto LABEL_116;
      }
LABEL_115:
      v80 = v12[4].i64[0] + 256;
LABEL_116:
      v32 = v109;
      v12[4].i64[0] = v80;
      if (a1)
        operator delete(a1);
      goto LABEL_118;
    }
    v78 = (char *)operator new(8uLL);
    v59 = v78 + 8;
    operator delete(v57);
    v34 = (char *)v12[2].i64[1];
    v79 = (char *)v12[3].i64[0];
    v57 = v78;
    *(_QWORD *)v78 = v58;
    v60 = v78 + 8;
    v61 = v78;
    if (v34 == v79)
      goto LABEL_86;
    while (1)
    {
LABEL_90:
      if (v60 != v59)
        goto LABEL_108;
      if (v57 > v61)
      {
        v82 = (v57 - v61) >> 3;
        if (v82 >= -1)
          v83 = v82 + 1;
        else
          v83 = v82 + 2;
        v84 = v83 >> 1;
        v85 = &v57[-8 * (v83 >> 1)];
        v86 = v60;
        if (v60 != v57)
        {
          a1 = (absl::variant_internal *)memmove(v85, v57, v60 - v57);
          v86 = v57;
        }
        v81 = &v85[v60 - v57];
        v59 = v60;
        v60 = v81;
        v57 = &v86[-8 * v84];
        if (!v81)
          goto LABEL_114;
        goto LABEL_108;
      }
      v87 = (v60 - v61) >> 2;
      if (v60 == v61)
        v87 = 1;
      if (v87 >> 61)
        goto LABEL_126;
      v88 = v87 >> 2;
      v110 = 8 * v87;
      a1 = (absl::variant_internal *)operator new(8 * v87);
      v89 = (char *)a1;
      v90 = (char *)a1 + 8 * v88;
      v91 = v90;
      v92 = v60 - v57;
      if (v60 != v57)
      {
        v91 = &v90[v92 & 0xFFFFFFFFFFFFFFF8];
        v93 = v92 - 8;
        if (v93 < 0x38
          || (unint64_t)((absl::variant_internal *)((char *)a1 + 8 * v88) - (absl::variant_internal *)v57) < 0x20)
        {
          v94 = (char *)a1 + 8 * v88;
          v95 = v57;
          do
          {
LABEL_104:
            v96 = *(_QWORD *)v95;
            v95 += 8;
            *(_QWORD *)v94 = v96;
            v94 += 8;
          }
          while (v94 != v91);
          goto LABEL_105;
        }
        v99 = (v93 >> 3) + 1;
        v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
        v94 = &v90[v100];
        v95 = &v57[v100];
        v101 = (__int128 *)(v57 + 16);
        v102 = (_OWORD *)((char *)a1 + 8 * v88 + 16);
        v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v104 = *v101;
          *(v102 - 1) = *(v101 - 1);
          *v102 = v104;
          v101 += 2;
          v102 += 2;
          v103 -= 4;
        }
        while (v103);
        if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_104;
      }
LABEL_105:
      v97 = (char *)a1 + v110;
      if (v61)
        operator delete(v61);
      v61 = v89;
      v59 = v97;
      v60 = v91;
      v57 = v90;
      if (!v91)
        goto LABEL_114;
LABEL_108:
      v98 = *(_QWORD *)v34;
      v34 += 8;
      *(_QWORD *)v60 = v98;
      v60 += 8;
      if (v34 == (char *)v12[3].i64[0])
        goto LABEL_86;
    }
  }
LABEL_119:
  v105 = v12[2].i64[1];
  v106 = (_QWORD *)(v105 + 8 * (v33 >> 8));
  if (v12[3].i64[0] == v105)
    v107 = 0;
  else
    v107 = *v106 + 16 * v33;
  if (v107 == *v106)
    v107 = *(v106 - 1) + 4096;
  *(_QWORD *)(v107 - 16) = i64;
  *(_QWORD *)(v107 - 8) = v32;
  v108 = v12[4].i64[1] + 1;
  v12[4].i64[0] = v33 - 1;
  v12[4].i64[1] = v108;
}

void webrtc::RtpVp8RefFinder::ManageFrameInternal(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  unsigned __int16 v11;
  int *v12;
  int *v13;
  uint64_t **v14;
  int *v15;
  unsigned __int16 v16;
  BOOL v17;
  unsigned __int16 v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  unsigned __int16 v29;
  BOOL v30;
  _BOOL4 v31;
  int v32;
  unsigned __int16 v33;
  unsigned int v34;
  __int16 v35;
  unsigned __int16 v36;
  BOOL v37;
  _BOOL4 v38;
  unsigned int v39;
  _BOOL4 v40;
  int v41;
  int v42;
  _QWORD *v43;
  uint64_t **v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  int *v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t **v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int v71;
  unsigned __int16 v72;
  unsigned __int16 v73;
  int v74;
  BOOL v75;
  uint64_t *v76;
  webrtc::RtpFrameObject *v77;
  uint64_t v78;
  __int128 v79;
  int *v80;
  uint64_t **v81;
  uint64_t v82;
  uint64_t **v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  unsigned __int16 v88;
  BOOL v89;
  int *v90;
  int *v91;
  unsigned int v92;
  int v93;
  unsigned __int16 v94;
  BOOL v95;
  BOOL v96;
  int **v97;
  BOOL v98;
  int *v99;
  BOOL v100;
  int **v101;
  unsigned int v102;
  unsigned __int16 v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  char v107;
  BOOL v108;
  char v109;
  unsigned __int16 v110;
  BOOL v111;
  unsigned __int16 v112;
  int v113;
  BOOL v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t *v118;
  char *v119;
  uint64_t v120;
  unsigned int v121;
  unsigned __int16 v122;
  BOOL v123;
  unsigned __int16 v124;
  int v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int16 v134;

  if (*(unsigned __int8 *)(a3 + 6) > 4u)
    return;
  *(_DWORD *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 196) = 1;
  v8 = *(_WORD *)(a3 + 2) & 0x7FFF;
  *(_QWORD *)(a2 + 2408) = v8;
  LODWORD(v9) = *a1;
  if (*a1 == -1)
  {
    *a1 = v8;
    LODWORD(v9) = v8;
  }
  if (v8 >= 0x64)
    v10 = -100;
  else
    v10 = 32668;
  v11 = v10 + v8;
  v13 = a1 + 4;
  v12 = (int *)*((_QWORD *)a1 + 2);
  v14 = (uint64_t **)(a1 + 2);
  v15 = a1 + 4;
  if (v12)
  {
    v15 = a1 + 4;
    do
    {
      while (1)
      {
        v21 = *((unsigned __int16 *)v12 + 13);
        if (v21 != v11)
          break;
        v15 = v12;
        v12 = *(int **)v12;
        if (!v12)
          goto LABEL_25;
      }
      v16 = v21 - v11;
      v17 = v11 > v21;
      if (v11 > v21)
        v16 = (v21 - v11) ^ 0x8000;
      if (v21 <= v11)
        v18 = v11 - v21;
      else
        v18 = (v11 - v21) ^ 0x8000;
      if (v18 >= v16)
        v19 = v16;
      else
        v19 = v18;
      v20 = v18 <= 0x4000u;
      if (v19 == 0x4000)
        v20 = v17;
      if (v20)
        v12 += 2;
      else
        v15 = v12;
      v12 = *(int **)v12;
    }
    while (v12);
  }
LABEL_25:
  v22 = *v14;
  if (*v14 == (uint64_t *)v15)
  {
    v23 = v11;
    if (v11 == (unsigned __int16)v9)
      goto LABEL_48;
  }
  else
  {
    do
    {
      v25 = (uint64_t *)v22[1];
      v26 = v22;
      if (v25)
      {
        do
        {
          v27 = v25;
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v27 = (uint64_t *)v26[2];
          v98 = *v27 == (_QWORD)v26;
          v26 = v27;
        }
        while (!v98);
      }
      if (*v14 == v22)
        *v14 = v27;
      v24 = (uint64_t *)*((_QWORD *)a1 + 2);
      --*((_QWORD *)a1 + 3);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v24, v22);
      operator delete(v22);
      v22 = v27;
    }
    while (v27 != (uint64_t *)v15);
    LODWORD(v9) = *a1;
    v23 = v11;
    if (v11 == (unsigned __int16)*a1)
      goto LABEL_48;
  }
  LOWORD(v28) = v9 - v11;
  v29 = v11 - v9;
  v30 = v23 > (unsigned __int16)v9;
  if (v30)
    LOWORD(v28) = (v9 - v11) ^ 0x8000;
  v28 = (unsigned __int16)v28;
  if (v23 < (unsigned __int16)v9)
    v29 ^= 0x8000u;
  if (v29 < (unsigned __int16)v28)
    v28 = v29;
  v31 = v29 <= 0x4000u;
  if (v28 == 0x4000)
    v32 = v30;
  else
    v32 = v31;
  v33 = v9;
  if (v32 == 1)
  {
    LODWORD(v9) = v11;
    *a1 = v11;
LABEL_48:
    v33 = v11;
  }
  v34 = *(unsigned __int16 *)(a2 + 2408);
  if (v34 != v33)
  {
    v39 = v33;
    v35 = v33 - v34;
    v36 = v34 - v33;
    v104 = v39 >= v34;
    v37 = v39 > v34;
    v38 = v39 < v34;
    LOWORD(v39) = v35 ^ 0x8000;
    if (v104)
      LOWORD(v39) = v35;
    v39 = (unsigned __int16)v39;
    if (v37)
      v36 ^= 0x8000u;
    if (v36 < (unsigned __int16)v39)
      v39 = v36;
    v40 = v36 <= 0x4000u;
    if (v39 == 0x4000)
      v40 = v38;
    if (v40)
    {
      do
      {
        if (v9 < 0x7FFF)
          v41 = 1;
        else
          v41 = -32767;
        v42 = v41 + v9;
        *a1 = v42;
        v134 = v42;
        std::__tree<unsigned short,webrtc::DescendingSeqNumComp<unsigned short,(unsigned short)32768>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>((uint64_t **)a1 + 1, &v134, &v134);
        v9 = *a1;
      }
      while (*(_QWORD *)(a2 + 2408) != v9);
    }
  }
  v44 = (uint64_t **)(a1 + 22);
  v43 = (_QWORD *)*((_QWORD *)a1 + 11);
  v45 = a1 + 22;
  if (v43)
  {
    v46 = a4 - 50;
    v45 = a1 + 22;
    do
    {
      v47 = v43[4];
      v48 = v47 < v46;
      if (v47 >= v46)
        v49 = v43;
      else
        v49 = v43 + 1;
      if (!v48)
        v45 = (int *)v43;
      v43 = (_QWORD *)*v49;
    }
    while (*v49);
  }
  v50 = (uint64_t *)*((_QWORD *)a1 + 10);
  if (v50 != (uint64_t *)v45)
  {
    do
    {
      v53 = (uint64_t *)v50[1];
      v54 = v50;
      if (v53)
      {
        do
        {
          v55 = v53;
          v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v55 = (uint64_t *)v54[2];
          v98 = *v55 == (_QWORD)v54;
          v54 = v55;
        }
        while (!v98);
      }
      if (*((uint64_t **)a1 + 10) == v50)
        *((_QWORD *)a1 + 10) = v55;
      v52 = (uint64_t *)*((_QWORD *)a1 + 11);
      --*((_QWORD *)a1 + 12);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v52, v50);
      operator delete(v50);
      v50 = v55;
    }
    while (v55 != (uint64_t *)v45);
  }
  v51 = *(unsigned __int8 *)(a3 + 6);
  if (*(_DWORD *)(a2 + 2576) == 3)
  {
    if (*(_BYTE *)(a3 + 6))
      return;
    *(_QWORD *)(a2 + 328) = 0;
    v63 = *v44;
    v64 = (char *)(a1 + 22);
    if (*v44)
    {
      do
      {
        while (1)
        {
          v64 = (char *)v63;
          v65 = v63[4];
          if (v65 <= a4)
            break;
          v63 = *(uint64_t **)v64;
          v44 = (uint64_t **)v64;
          if (!*(_QWORD *)v64)
            goto LABEL_103;
        }
        if (v65 >= a4)
        {
          LODWORD(v51) = 0;
          goto LABEL_122;
        }
        v63 = (uint64_t *)*((_QWORD *)v64 + 1);
      }
      while (v63);
      v44 = (uint64_t **)(v64 + 8);
    }
LABEL_103:
    v66 = v64;
    v64 = (char *)operator new(0x50uLL);
    *((_QWORD *)v64 + 4) = a4;
    *(_OWORD *)(v64 + 40) = 0u;
    *(_OWORD *)(v64 + 56) = 0u;
    *((_QWORD *)v64 + 9) = 0;
    *(_QWORD *)v64 = 0;
    *((_QWORD *)v64 + 1) = 0;
    *((_QWORD *)v64 + 2) = v66;
    *v44 = (uint64_t *)v64;
    v67 = **((_QWORD **)a1 + 10);
    v68 = (uint64_t *)v64;
    if (v67)
    {
      *((_QWORD *)a1 + 10) = v67;
      v68 = *v44;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a1 + 11), v68);
    ++*((_QWORD *)a1 + 12);
    LODWORD(v51) = *(unsigned __int8 *)(a3 + 6);
LABEL_122:
    *((_QWORD *)v64 + 9) = -1;
    *(_QWORD *)&v79 = -1;
    *((_QWORD *)&v79 + 1) = -1;
    *(_OWORD *)(v64 + 56) = v79;
    *(_OWORD *)(v64 + 40) = v79;
    goto LABEL_123;
  }
  v56 = *v44;
  if (*v44)
  {
    v57 = a4 - ((_DWORD)v51 == 0);
    v58 = a1 + 22;
    v59 = *v44;
    do
    {
      v60 = v59[4];
      v61 = v60 < v57;
      if (v60 >= v57)
        v62 = (uint64_t **)v59;
      else
        v62 = (uint64_t **)(v59 + 1);
      if (!v61)
        v58 = (int *)v59;
      v59 = *v62;
    }
    while (*v62);
    if (v58 != (int *)v44 && v57 >= *((_QWORD *)v58 + 4))
    {
      if (*(_BYTE *)(a3 + 6))
      {
        v69 = v58 + 10;
        if (*(_BYTE *)(a3 + 7))
        {
          *(_QWORD *)(a2 + 328) = 1;
          if (v51 < 5)
          {
            v70 = v69[v51];
            if (v70 == -1)
              goto LABEL_120;
            v71 = *(unsigned __int16 *)(a2 + 2408);
            v72 = v71 - v70;
            if ((unsigned __int16)v69[v51] > v71)
              v72 = (v71 - v70) ^ 0x8000;
            v73 = v70 - v71;
            if (v71 > (unsigned __int16)v69[v51])
              v73 ^= 0x8000u;
            if (v73 >= v72)
              v74 = v72;
            else
              v74 = v73;
            v75 = v73 <= 0x4000u;
            if (v74 == 0x4000)
              v75 = (unsigned __int16)v69[v51] > v71;
            if (!v75)
            {
LABEL_120:
              *(_QWORD *)(a2 + 336) = *v69;
LABEL_121:
              v76 = (uint64_t *)a1;
              v77 = (webrtc::RtpFrameObject *)a2;
              v78 = a4;
              goto LABEL_124;
            }
            return;
          }
        }
        else
        {
          v84 = 0;
          *(_QWORD *)(a2 + 328) = 0;
          while (v84 != 5)
          {
            v85 = v69[v84];
            if (v85 == -1)
              return;
            v86 = *(unsigned __int16 *)(a2 + 2408);
            if (v86 != (unsigned __int16)v85)
            {
              LOWORD(v87) = v86 - v85;
              if ((unsigned __int16)v69[v84] > v86)
                LOWORD(v87) = (v86 - v85) ^ 0x8000;
              v87 = (unsigned __int16)v87;
              if (v86 <= (unsigned __int16)v69[v84])
                v88 = v85 - v86;
              else
                v88 = (v85 - v86) ^ 0x8000;
              if (v88 < (unsigned __int16)v87)
                v87 = v88;
              v89 = v88 <= 0x4000u;
              if (v87 == 0x4000)
                v89 = (unsigned __int16)v69[v84] > v86;
              if (v89)
                return;
            }
            v90 = *(int **)v13;
            if (*(_QWORD *)v13)
            {
              v91 = a1 + 4;
              do
              {
                v92 = *((unsigned __int16 *)v90 + 13);
                LOWORD(v93) = v85 - v92;
                v94 = v92 - v85;
                if (v92 > (unsigned __int16)v85)
                  LOWORD(v93) = (v85 - v92) ^ 0x8000;
                v93 = (unsigned __int16)v93;
                if (v92 < (unsigned __int16)v85)
                  v94 ^= 0x8000u;
                if (v94 < (unsigned __int16)v93)
                  v93 = v94;
                v95 = v94 <= 0x4000u;
                if (v93 == 0x4000)
                  v96 = v92 > (unsigned __int16)v85;
                else
                  v96 = v95;
                v97 = (int **)(v90 + 2);
                v98 = !v96;
                if (v96)
                  v99 = v90;
                else
                  v99 = v90 + 2;
                if (v98)
                  v90 = v91;
                v100 = v92 == (unsigned __int16)v85;
                if (v92 == (unsigned __int16)v85)
                  v101 = v97;
                else
                  v101 = (int **)v99;
                if (!v100)
                  v91 = v90;
                v90 = *v101;
              }
              while (*v101);
              if (v91 != v13)
              {
                v102 = *((unsigned __int16 *)v91 + 13);
                if (v102 != v86)
                {
                  v103 = v86 - v102;
                  v104 = v102 >= v86;
                  v106 = v102 - v86;
                  v105 = v106 != 0 && v104;
                  v107 = !v104;
                  if (!v104)
                    LOWORD(v106) = v106 ^ 0x8000;
                  v106 = (unsigned __int16)v106;
                  if (v105)
                    v103 ^= 0x8000u;
                  if (v103 < (unsigned __int16)v106)
                    v106 = v103;
                  v108 = v103 <= 0x4000u;
                  v109 = v106 == 0x4000 ? v107 : v108;
                  if ((v109 & 1) != 0)
                    return;
                }
              }
            }
            if (v86 == (unsigned __int16)v85)
              goto LABEL_214;
            v110 = v85 - v86;
            v111 = v86 > (unsigned __int16)v69[v84];
            if (v86 > (unsigned __int16)v69[v84])
              v110 = (v85 - v86) ^ 0x8000;
            if ((unsigned __int16)v69[v84] <= v86)
              v112 = v86 - v85;
            else
              v112 = (v86 - v85) ^ 0x8000;
            if (v112 >= v110)
              v113 = v110;
            else
              v113 = v112;
            v114 = v112 <= 0x4000u;
            if (v113 == 0x4000)
              v114 = v111;
            if (!v114)
            {
LABEL_214:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v127, v128, v129, v130, v131, v132, v133, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/rtp_vp8_ref_finder.cc");
              return;
            }
            *(_QWORD *)(a2 + 328) = v84 + 1;
            *(_QWORD *)(a2 + 8 * v84++ + 336) = v85;
            if (v84 == (v51 + 1))
              goto LABEL_121;
          }
        }
        __break(1u);
        return;
      }
      v80 = v58 + 10;
      do
      {
        while (1)
        {
          v81 = (uint64_t **)v56;
          v82 = v56[4];
          if (v82 > a4)
            break;
          if (v82 >= a4)
          {
            v119 = (char *)v81;
            goto LABEL_202;
          }
          v56 = v81[1];
          if (!v56)
          {
            v83 = v81 + 1;
            goto LABEL_199;
          }
        }
        v56 = *v81;
      }
      while (*v81);
      v83 = v81;
LABEL_199:
      v119 = (char *)operator new(0x50uLL);
      *((_QWORD *)v119 + 4) = a4;
      v115 = *((_QWORD *)v80 + 4);
      v116 = *((_OWORD *)v80 + 1);
      *(_OWORD *)(v119 + 40) = *(_OWORD *)v80;
      *(_OWORD *)(v119 + 56) = v116;
      *((_QWORD *)v119 + 9) = v115;
      *(_QWORD *)v119 = 0;
      *((_QWORD *)v119 + 1) = 0;
      *((_QWORD *)v119 + 2) = v81;
      *v83 = (uint64_t *)v119;
      v117 = **((_QWORD **)a1 + 10);
      v118 = (uint64_t *)v119;
      if (v117)
      {
        *((_QWORD *)a1 + 10) = v117;
        v118 = *v83;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a1 + 11), v118);
      ++*((_QWORD *)a1 + 12);
LABEL_202:
      *(_QWORD *)(a2 + 328) = 1;
      v120 = *((_QWORD *)v119 + 5);
      v121 = *(unsigned __int16 *)(a2 + 2408);
      v122 = v121 - v120;
      v123 = (unsigned __int16)v120 > v121;
      if ((unsigned __int16)v120 > v121)
        v122 = (v121 - v120) ^ 0x8000;
      if (v121 <= (unsigned __int16)v120)
        v124 = v120 - v121;
      else
        v124 = (v120 - v121) ^ 0x8000;
      if (v124 >= v122)
        v125 = v122;
      else
        v125 = v124;
      v126 = v124 <= 0x4000u;
      if (v125 == 0x4000)
        v126 = v123;
      if (!v126)
      {
        *(_QWORD *)(a2 + 336) = v120;
        LODWORD(v51) = *(unsigned __int8 *)(a3 + 6);
LABEL_123:
        v76 = (uint64_t *)a1;
        v77 = (webrtc::RtpFrameObject *)a2;
        v78 = a4;
LABEL_124:
        webrtc::RtpVp8RefFinder::UpdateLayerInfoVp8(v76, v77, v78, v51);
      }
    }
  }
}

uint64_t *webrtc::RtpVp8RefFinder::UpdateLayerInfoVp8(uint64_t *this, webrtc::RtpFrameObject *a2, uint64_t a3, unsigned int a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int16 v17;
  BOOL v18;
  unsigned __int16 v19;
  int v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  BOOL v30;
  int v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned __int16 v40;
  unsigned __int16 v41;
  BOOL v42;
  unsigned __int16 v43;
  int v44;
  _BOOL4 v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  BOOL v51;
  unsigned __int16 v52;
  int v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 v57;

  v5 = this;
  v6 = this + 11;
  v7 = this[11];
  if (!v7)
    goto LABEL_33;
  v8 = this + 11;
  v9 = (_QWORD *)this[11];
  do
  {
    v10 = v9[4];
    v11 = v10 < a3;
    if (v10 >= a3)
      v12 = v9;
    else
      v12 = v9 + 1;
    if (!v11)
      v8 = v9;
    v9 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v8 == v6 || v8[4] > a3)
  {
LABEL_33:
    v57 = *((_QWORD *)a2 + 301);
    this = std::__tree<unsigned short,webrtc::DescendingSeqNumComp<unsigned short,(unsigned short)32768>,std::allocator<unsigned short>>::__erase_unique<unsigned short>((uint64_t **)this + 1, &v57);
    if (*((_QWORD *)a2 + 41))
    {
      LODWORD(v26) = *((unsigned __int16 *)a2 + 168);
      if (*((_BYTE *)v5 + 114))
      {
        v27 = *((unsigned __int16 *)v5 + 56);
        v28 = v26 - v27;
        v29 = (v26 - v27) ^ 0x8000;
        v30 = v27 >= v26;
        v31 = v27 - v26;
        if (v31 != 0 && v30)
          v28 = v29;
        v32 = !v30;
        if (!v30)
          LOWORD(v31) = v31 ^ 0x8000;
        v31 = (unsigned __int16)v31;
        if (v28 < (unsigned __int16)v31)
          v31 = v28;
        if (v31 == 0x4000)
          v33 = v32;
        else
          v33 = v28 <= 0x4000u;
        if (v33)
          v34 = v28;
        else
          v34 = v28 - 0x8000;
        v35 = v34 + v5[13];
      }
      else
      {
        v35 = *((unsigned __int16 *)a2 + 168);
      }
      v5[13] = v35;
      *((_WORD *)v5 + 56) = v26;
      *((_BYTE *)v5 + 114) = 1;
      *((_QWORD *)a2 + 42) = v35;
      if (*((_QWORD *)a2 + 41) < 2uLL)
      {
        LOWORD(v37) = v26;
      }
      else
      {
        v38 = 43;
        do
        {
          v37 = *((_QWORD *)a2 + v38);
          v39 = (unsigned __int16)v26;
          v40 = v37 - v26;
          v41 = (v37 - v26) ^ 0x8000;
          LOWORD(v26) = v26 - v37;
          v42 = v39 >= (unsigned __int16)v37;
          if (v39 <= (unsigned __int16)v37)
            v43 = v40;
          else
            v43 = v41;
          v44 = !v42;
          if (!v42)
            LOWORD(v26) = v26 ^ 0x8000;
          LODWORD(v26) = (unsigned __int16)v26;
          if (v43 < (unsigned __int16)v26)
            LODWORD(v26) = v43;
          if ((_DWORD)v26 == 0x4000)
            v45 = v44;
          else
            v45 = v43 <= 0x4000u;
          if (v45)
            v46 = v43;
          else
            v46 = v43 - 0x8000;
          v26 = v46 + v5[13];
          v5[13] = v26;
          *((_WORD *)v5 + 56) = v37;
          *((_BYTE *)v5 + 114) = 1;
          *((_QWORD *)a2 + v38) = v26;
          v47 = v38 - 41;
          ++v38;
          LOWORD(v26) = v37;
        }
        while (v47 < *((_QWORD *)a2 + 41));
      }
      v36 = *((_WORD *)a2 + 1204);
    }
    else
    {
      v36 = *((_WORD *)a2 + 1204);
      if (!*((_BYTE *)v5 + 114))
      {
        v56 = *((unsigned __int16 *)a2 + 1204);
LABEL_93:
        v5[13] = v56;
        *((_WORD *)v5 + 56) = v36;
        *((_BYTE *)v5 + 114) = 1;
        *((_QWORD *)a2 + 301) = v56;
        return this;
      }
      LOWORD(v37) = *((_WORD *)v5 + 56);
    }
    v48 = (unsigned __int16)v37;
    v49 = v36 - v37;
    v50 = (v36 - v37) ^ 0x8000;
    LOWORD(v37) = v37 - v36;
    v51 = v48 >= v36;
    if (v48 <= v36)
      v52 = v49;
    else
      v52 = v50;
    v53 = !v51;
    if (!v51)
      LOWORD(v37) = v37 ^ 0x8000;
    LODWORD(v37) = (unsigned __int16)v37;
    if (v52 < (unsigned __int16)v37)
      LODWORD(v37) = v52;
    if ((_DWORD)v37 == 0x4000)
      v54 = v53;
    else
      v54 = v52 <= 0x4000u;
    if (v54)
      v55 = v52;
    else
      v55 = v52 - 0x8000;
    v56 = v55 + v5[13];
    goto LABEL_93;
  }
  if (a4 <= 4)
  {
    do
    {
      v13 = v8 + 5;
      v14 = v13[a4];
      v15 = *((_QWORD *)a2 + 301);
      if (v14 != -1)
      {
        v16 = (unsigned __int16)v13[a4];
        if (v16 != (unsigned __int16)v15)
        {
          v17 = v15 - v14;
          v18 = v16 > (unsigned __int16)*((_QWORD *)a2 + 301);
          if (v16 > (unsigned __int16)*((_QWORD *)a2 + 301))
            v17 = (v15 - v14) ^ 0x8000;
          v19 = v14 - v15;
          if ((unsigned __int16)*((_QWORD *)a2 + 301) > v16)
            v19 ^= 0x8000u;
          if (v19 >= v17)
            v20 = v17;
          else
            v20 = v19;
          v21 = v19 <= 0x4000u;
          if (v20 == 0x4000)
            v21 = v18;
          if (v21)
            break;
        }
      }
      v13[a4] = v15;
      v8 = this + 11;
      v22 = (_QWORD *)v7;
      do
      {
        v23 = v22[4];
        v24 = v23 <= a3;
        if (v23 <= a3)
          v25 = v22 + 1;
        else
          v25 = v22;
        if (!v24)
          v8 = v22;
        v22 = (_QWORD *)*v25;
      }
      while (*v25);
      if (v8 == v6)
        break;
      ++a3;
    }
    while (a3 >= v8[4]);
    goto LABEL_33;
  }
  __break(1u);
  return this;
}

int64x2_t *std::deque<webrtc::RtpVp8RefFinder::UnwrappedTl0Frame>::erase(int64x2_t *result, char *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t **v43;
  int64x2_t **v44;
  uint64_t v45;
  int64x2_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t **v54;
  int64x2_t **v55;
  uint64_t v56;
  int64x2_t *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  int64x2_t v61;
  unint64_t v62;
  void **v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  void **v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  int64x2_t *v112;

  v3 = result[2].u64[0];
  v4 = result->i64[1];
  v5 = result[1].i64[0];
  v6 = (char *)(v4 + 8 * (v3 >> 8));
  if (v5 != v4)
  {
    v7 = *(_QWORD *)v6 + 16 * v3;
    v112 = result;
    if (a3 != v7)
      goto LABEL_3;
LABEL_9:
    v11 = 0;
    v9 = *(char **)v6;
LABEL_10:
    v108 = 1;
    v13 = (char *)v7;
    v12 = (char *)(v4 + 8 * (v3 >> 8));
    v111 = v11;
    v18 = (v7 - (uint64_t)v9) >> 4;
    if (v7 - (uint64_t)v9 < -15)
      goto LABEL_54;
LABEL_11:
    v19 = v18 + 1;
    v20 = &v12[8 * ((unint64_t)(v18 + 1) >> 8)];
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)v20 + 16 * v19;
    if (v6 == v12)
      goto LABEL_55;
    goto LABEL_12;
  }
  v7 = 0;
  v112 = result;
  if (!a3)
    goto LABEL_9;
LABEL_3:
  v8 = ((a3 - *(_QWORD *)a2) >> 4) + 32 * (a2 - v6);
  v9 = *(char **)v6;
  v10 = v7 - *(_QWORD *)v6;
  v11 = v8 - (v10 >> 4);
  if (v8 == v10 >> 4)
    goto LABEL_10;
  if (v8 < 1)
  {
    v48 = 255 - v8;
    v12 = &v6[-8 * (v48 >> 8)];
    v9 = *(char **)v12;
    v13 = (char *)(*(_QWORD *)v12 + 16 * ~(_BYTE)v48);
    v14 = result[2].i64[1];
    if (v11 > (unint64_t)(v14 - 1) >> 1)
    {
LABEL_6:
      v110 = v11;
      v15 = (v13 - v9) >> 4;
      if (v13 - v9 < -15)
      {
        v67 = 254 - v15;
        v16 = ~(_BYTE)v67;
        v17 = &v12[-8 * (v67 >> 8)];
      }
      else
      {
        v16 = v15 + 1;
        v17 = &v12[8 * ((unint64_t)(v15 + 1) >> 8)];
      }
      v68 = *(_QWORD *)v17;
      v69 = (char *)(*(_QWORD *)v17 + 16 * v16);
      v70 = v14 + v3;
      v71 = (char *)(v4 + 8 * (v70 >> 8));
      if (v5 == v4)
      {
        v72 = 0;
        if (v17 != v71)
        {
LABEL_84:
          v73 = (char *)(v68 + 4096);
          if ((char *)(v68 + 4096) != v69)
          {
            while (1)
            {
              v74 = (v9 - v13 + 4096) >> 4;
              if ((v73 - v69) >> 4 < v74)
                v74 = (v73 - v69) >> 4;
              if (v74)
              {
                v75 = &v69[16 * v74];
                do
                {
                  v76 = *(_QWORD *)v69;
                  v77 = *((_QWORD *)v69 + 1);
                  *((_QWORD *)v69 + 1) = 0;
                  result = (int64x2_t *)*((_QWORD *)v13 + 1);
                  *(_QWORD *)v13 = v76;
                  *((_QWORD *)v13 + 1) = v77;
                  if (result)
                    result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
                  v13 += 16;
                  v69 += 16;
                }
                while (v69 != v75);
                v69 = v75;
              }
              if (v69 == v73)
                break;
              v78 = (char *)*((_QWORD *)v12 + 1);
              v12 += 8;
              v9 = v78;
              v13 = v78;
            }
            v9 = *(char **)v12;
            if ((char *)(*(_QWORD *)v12 + 4096) == v13)
            {
              v79 = (char *)*((_QWORD *)v12 + 1);
              v12 += 8;
              v9 = v79;
              v13 = v79;
            }
          }
          v109 = (char *)v72;
          v80 = (uint64_t *)(v17 + 8);
          if (v17 + 8 != v71)
          {
            do
            {
              while (1)
              {
                v81 = v71;
                v82 = 0;
                v83 = *v80;
                while (1)
                {
                  v84 = v83 + 16 * v82;
                  v85 = (4096 - 16 * v82) >> 4;
                  if (v85 >= (v9 - v13 + 4096) >> 4)
                    v85 = (v9 - v13 + 4096) >> 4;
                  if (v85)
                  {
                    v86 = (uint64_t *)(v84 + 16 * v85);
                    v87 = (uint64_t *)(v83 + 16 * v82);
                    do
                    {
                      v88 = *v87;
                      v89 = v87[1];
                      v87[1] = 0;
                      result = (int64x2_t *)*((_QWORD *)v13 + 1);
                      *(_QWORD *)v13 = v88;
                      *((_QWORD *)v13 + 1) = v89;
                      if (result)
                        result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
                      v13 += 16;
                      v87 += 2;
                    }
                    while (v87 != v86);
                  }
                  else
                  {
                    v86 = (uint64_t *)(v83 + 16 * v82);
                  }
                  v82 += ((uint64_t)v86 - v84) >> 4;
                  if (v82 == 256)
                    break;
                  v90 = (char *)*((_QWORD *)v12 + 1);
                  v12 += 8;
                  v9 = v90;
                  v13 = v90;
                }
                v9 = *(char **)v12;
                if ((char *)(*(_QWORD *)v12 + 4096) == v13)
                  break;
                v71 = v81;
                if (++v80 == (uint64_t *)v81)
                  goto LABEL_113;
              }
              v91 = (char *)*((_QWORD *)v12 + 1);
              v12 += 8;
              v9 = v91;
              v13 = v91;
              v71 = v81;
              ++v80;
            }
            while (v80 != (uint64_t *)v81);
          }
LABEL_113:
          v92 = *(char **)v71;
          if (*(char **)v71 != v109)
          {
            v93 = *(char **)v12;
            v60 = v110;
            v59 = (uint64_t *)v112;
            while (1)
            {
              v94 = (v93 - v13 + 4096) >> 4;
              if ((v109 - v92) >> 4 < v94)
                v94 = (v109 - v92) >> 4;
              if (v94)
              {
                v95 = &v92[16 * v94];
                do
                {
                  v96 = *(_QWORD *)v92;
                  v97 = *((_QWORD *)v92 + 1);
                  *((_QWORD *)v92 + 1) = 0;
                  result = (int64x2_t *)*((_QWORD *)v13 + 1);
                  *(_QWORD *)v13 = v96;
                  *((_QWORD *)v13 + 1) = v97;
                  if (result)
                    result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
                  v13 += 16;
                  v92 += 16;
                }
                while (v92 != v95);
                v92 = v95;
              }
              if (v92 == v109)
                break;
              v98 = (char *)*((_QWORD *)v12 + 1);
              v12 += 8;
              v93 = v98;
              v13 = v98;
            }
            if ((char *)(*(_QWORD *)v12 + 4096) == v13)
              v13 = (char *)*((_QWORD *)v12 + 1);
LABEL_142:
            if (v13)
            {
              v104 = *((_QWORD *)v13 + 1);
              *((_QWORD *)v13 + 1) = 0;
              if (v104)
                (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
              v63 = (void **)v59[1];
              v105 = (void **)v59[2];
              v62 = v59[4];
              v106 = v59[5];
              v59[5] = v106 - 1;
              v107 = 32 * ((char *)v105 - (char *)v63) - 1;
              if (v105 == v63)
                v107 = 0;
              if (v107 - (v106 + v62) + 1 >= 0x200)
              {
                operator delete(*(v105 - 1));
                v64 = 0;
                v63 = (void **)v59[1];
                v59[2] -= 8;
                v62 = v59[4];
              }
              else
              {
                v64 = 0;
              }
              goto LABEL_73;
            }
LABEL_150:
            __break(1u);
            return result;
          }
LABEL_141:
          v60 = v110;
          v59 = (uint64_t *)v112;
          goto LABEL_142;
        }
      }
      else
      {
        v72 = *(_QWORD *)v71 + 16 * v70;
        if (v17 != v71)
          goto LABEL_84;
      }
      if (v69 != (char *)v72)
      {
        while (1)
        {
          v99 = (v9 - v13 + 4096) >> 4;
          if ((v72 - (uint64_t)v69) >> 4 < v99)
            v99 = (v72 - (uint64_t)v69) >> 4;
          if (v99)
          {
            v100 = &v69[16 * v99];
            do
            {
              v101 = *(_QWORD *)v69;
              v102 = *((_QWORD *)v69 + 1);
              *((_QWORD *)v69 + 1) = 0;
              result = (int64x2_t *)*((_QWORD *)v13 + 1);
              *(_QWORD *)v13 = v101;
              *((_QWORD *)v13 + 1) = v102;
              if (result)
                result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
              v13 += 16;
              v69 += 16;
            }
            while (v69 != v100);
            v69 = v100;
          }
          if (v69 == (char *)v72)
            break;
          v103 = (char *)*((_QWORD *)v12 + 1);
          v12 += 8;
          v9 = v103;
          v13 = v103;
        }
        if ((char *)(*(_QWORD *)v12 + 4096) == v13)
          v13 = (char *)*((_QWORD *)v12 + 1);
      }
      goto LABEL_141;
    }
  }
  else
  {
    v12 = &v6[8 * ((unint64_t)v8 >> 8)];
    v9 = *(char **)v12;
    v13 = (char *)(*(_QWORD *)v12 + 16 * v8);
    v14 = result[2].i64[1];
    if (v11 > (unint64_t)(v14 - 1) >> 1)
      goto LABEL_6;
  }
  v108 = 0;
  v111 = v11;
  v18 = (v13 - v9) >> 4;
  if (v13 - v9 >= -15)
    goto LABEL_11;
LABEL_54:
  v49 = 254 - v18;
  v50 = ~(_BYTE)v49;
  v20 = &v12[-8 * (v49 >> 8)];
  v21 = *(_QWORD *)v20;
  v22 = *(_QWORD *)v20 + 16 * v50;
  if (v6 == v12)
  {
LABEL_55:
    if ((char *)v7 != v13)
    {
      while (1)
      {
        v52 = (v22 - v21) >> 4;
        if ((uint64_t)&v13[-v7] >> 4 >= v52)
          v53 = v52;
        else
          v53 = (uint64_t)&v13[-v7] >> 4;
        if (v53)
        {
          v54 = (int64x2_t **)(v22 - 8);
          v55 = (int64x2_t **)(v13 - 8);
          v56 = -16 * v53;
          do
          {
            *(v54 - 1) = *(v55 - 1);
            v57 = *v55;
            *v55 = 0;
            result = *v54;
            *v54 = v57;
            if (result)
              result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
            v54 -= 2;
            v55 -= 2;
            v56 += 16;
          }
          while (v56);
        }
        v13 -= 16 * v53;
        if (v13 == (char *)v7)
          break;
        v51 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        v21 = v51;
        v22 = v51 + 4096;
      }
    }
    goto LABEL_67;
  }
LABEL_12:
  if (v9 != v13)
  {
    while (1)
    {
      v23 = (v22 - v21) >> 4;
      if ((v13 - v9) >> 4 >= v23)
        v24 = v23;
      else
        v24 = (v13 - v9) >> 4;
      if (v24)
      {
        v25 = v13 - 8;
        v26 = -16 * v24;
        do
        {
          *(_QWORD *)(v22 - 16) = *((_QWORD *)v25 - 1);
          v22 -= 16;
          v27 = *(_QWORD *)v25;
          *(_QWORD *)v25 = 0;
          result = *(int64x2_t **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = v27;
          if (result)
            result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
          v25 -= 16;
          v26 += 16;
        }
        while (v26);
      }
      v13 -= 16 * v24;
      if (v13 == v9)
        break;
      v28 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      v21 = v28;
      v22 = v28 + 4096;
    }
    v21 = *(_QWORD *)v20;
    if (*(_QWORD *)v20 + 4096 == v22)
    {
      v29 = *((_QWORD *)v20 + 1);
      v20 += 8;
      v21 = v29;
      v22 = v29;
    }
  }
  for (i = v12 - 8; i != v6; i -= 8)
  {
    v31 = *(_QWORD *)i;
    v32 = *(_QWORD *)i + 4096;
    while (1)
    {
      v33 = (v22 - v21) >> 4;
      if ((v32 - v31) >> 4 >= v33)
        v34 = v33;
      else
        v34 = (v32 - v31) >> 4;
      if (v34)
      {
        v35 = (uint64_t *)(v32 - 8);
        v36 = -16 * v34;
        do
        {
          *(_QWORD *)(v22 - 16) = *(v35 - 1);
          v22 -= 16;
          v37 = *v35;
          *v35 = 0;
          result = *(int64x2_t **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = v37;
          if (result)
            result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
          v35 -= 2;
          v36 += 16;
        }
        while (v36);
      }
      v32 -= 16 * v34;
      if (v32 == v31)
        break;
      v38 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      v21 = v38;
      v22 = v38 + 4096;
    }
    v21 = *(_QWORD *)v20;
    if (*(_QWORD *)v20 + 4096 == v22)
    {
      v39 = *((_QWORD *)v20 + 1);
      v20 += 8;
      v21 = v39;
      v22 = v39;
    }
  }
  v40 = *(_QWORD *)v6 + 4096;
  if (v40 != v7)
  {
    while (1)
    {
      v41 = (v22 - v21) >> 4;
      if ((v40 - v7) >> 4 >= v41)
        v42 = v41;
      else
        v42 = (v40 - v7) >> 4;
      if (v42)
      {
        v43 = (int64x2_t **)(v22 - 8);
        v44 = (int64x2_t **)(v40 - 8);
        v45 = -16 * v42;
        do
        {
          *(v43 - 1) = *(v44 - 1);
          v46 = *v44;
          *v44 = 0;
          result = *v43;
          *v43 = v46;
          if (result)
            result = (int64x2_t *)(*(uint64_t (**)(int64x2_t *))(result->i64[0] + 8))(result);
          v43 -= 2;
          v44 -= 2;
          v45 += 16;
        }
        while (v45);
      }
      v40 -= 16 * v42;
      if (v40 == v7)
        break;
      v47 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      v21 = v47;
      v22 = v47 + 4096;
    }
  }
LABEL_67:
  if (!v7)
    goto LABEL_150;
  v58 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(v7 + 8) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v60 = v111;
  v59 = (uint64_t *)v112;
  v61 = vaddq_s64(v112[2], (int64x2_t)xmmword_208F0A010);
  v112[2] = v61;
  v62 = v61.i64[0];
  v63 = (void **)v112->i64[1];
  if (v61.i64[0] >= 0x200uLL)
  {
    operator delete(*v63);
    v63 = (void **)(v112->i64[1] + 8);
    v112->i64[1] = (uint64_t)v63;
    v62 = v112[2].i64[0] - 256;
    v112[2].i64[0] = v62;
  }
  v64 = v108;
LABEL_73:
  result = (int64x2_t *)&v63[v62 >> 8];
  if ((void **)v59[2] == v63)
  {
    v65 = 0;
    if ((v64 & 1) != 0)
      return result;
  }
  else
  {
    v65 = result->i64[0] + 16 * v62;
    if ((v64 & 1) != 0)
      return result;
  }
  v66 = v60 + ((v65 - result->i64[0]) >> 4);
  if (v66 < 1)
    return (int64x2_t *)((char *)result - 8 * ((unint64_t)(255 - v66) >> 8));
  else
    return (int64x2_t *)((char *)result + 8 * ((unint64_t)v66 >> 8));
}

int64x2_t *webrtc::RtpVp8RefFinder::ClearTo(int64x2_t *this, unsigned int a2)
{
  int64x2_t *v3;
  int64x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;

  v3 = this;
  v4 = this + 2;
  v5 = this[4].u64[0];
  v6 = this[2].i64[1];
  v7 = this[3].i64[0];
  v8 = v6 + 8 * (v5 >> 8);
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 16 * v5;
LABEL_5:
  v11 = v9;
  while (v7 != v6)
  {
    v12 = v3[4].i64[1] + v3[4].i64[0];
    if (v11 == *(_QWORD *)(v6 + ((v12 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v12)
      return this;
LABEL_11:
    v13 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 8) + 4404);
    if (a2 != v13)
    {
      v14 = a2 - v13;
      v15 = a2 >= v13;
      v16 = a2 - v13;
      v17 = v16 != 0 && v15;
      v18 = (v16 & 0x8000u) == 0;
      if (v14 == 0x8000)
        v18 = v17;
      if (v18)
      {
        this = std::deque<webrtc::RtpVp8RefFinder::UnwrappedTl0Frame>::erase(v4, (char *)v8, v9);
        v8 = (uint64_t)this;
        v9 = v19;
        v6 = v3[2].i64[1];
        v7 = v3[3].i64[0];
        goto LABEL_5;
      }
    }
    v9 += 16;
    v11 += 16;
    if (*(_QWORD *)v8 + 4096 == v9)
    {
      v10 = *(_QWORD *)(v8 + 8);
      v8 += 8;
      v9 = v10;
      goto LABEL_5;
    }
  }
  if (v11)
    goto LABEL_11;
  return this;
}

uint64_t *std::__tree<unsigned short,webrtc::DescendingSeqNumComp<unsigned short,(unsigned short)32768>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>(uint64_t **a1, unsigned __int16 *a2, _WORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  int v8;
  uint64_t *v10;
  unsigned __int16 v11;
  _BOOL4 v12;
  int v13;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t *v18;
  _WORD *v19;
  uint64_t *v20;
  uint64_t *v21;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    v8 = *((unsigned __int16 *)v5 + 13);
    if (v8 == v7)
    {
      return v5;
    }
    else
    {
      do
      {
        v11 = v7 - v8;
        v12 = (unsigned __int16)v8 > v7;
        if ((unsigned __int16)v8 > v7)
          v11 = (v7 - v8) ^ 0x8000;
        if (v7 <= (unsigned __int16)v8)
          LOWORD(v13) = v8 - v7;
        else
          LOWORD(v13) = (v8 - v7) ^ 0x8000;
        v14 = (unsigned __int16)v13;
        if ((unsigned __int16)v13 >= v11)
          v13 = v11;
        else
          v13 = (unsigned __int16)v13;
        v15 = v14 <= 0x4000;
        if (v13 != 0x4000)
          v12 = v15;
        if (v12)
        {
          v10 = (uint64_t *)*v5;
          v6 = (uint64_t **)v5;
          if (!*v5)
            goto LABEL_23;
        }
        else
        {
          v16 = v7 > (unsigned __int16)v8;
          v17 = v11 <= 0x4000u;
          if (v13 != 0x4000)
            v16 = v17;
          if (!v16)
            return v5;
          v10 = (uint64_t *)v5[1];
          if (!v10)
          {
            v6 = (uint64_t **)(v5 + 1);
            goto LABEL_23;
          }
        }
        v8 = *((unsigned __int16 *)v10 + 13);
        v5 = v10;
      }
      while (v8 != v7);
      return v10;
    }
  }
  else
  {
    v5 = (uint64_t *)(a1 + 1);
LABEL_23:
    v18 = v5;
    v19 = operator new(0x20uLL);
    v19[13] = *a3;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = v18;
    *v6 = (uint64_t *)v19;
    v20 = (uint64_t *)**a1;
    v21 = (uint64_t *)v19;
    if (v20)
    {
      *a1 = v20;
      v21 = *v6;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v21);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t *)v19;
  }
}

uint64_t *std::__tree<unsigned short,webrtc::DescendingSeqNumComp<unsigned short,(unsigned short)32768>,std::allocator<unsigned short>>::__erase_unique<unsigned short>(uint64_t **a1, unsigned __int16 *a2)
{
  uint64_t *result;
  uint64_t *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  BOOL v10;
  BOOL v11;
  unsigned int v12;
  unsigned __int16 v13;
  BOOL v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  BOOL v20;
  int v21;
  unsigned __int16 v22;
  BOOL v23;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  BOOL v28;

  v4 = (uint64_t *)(a1 + 1);
  result = a1[1];
  if (result)
  {
    v5 = *a2;
    v6 = v4;
    v7 = result;
    do
    {
      while (1)
      {
        v16 = *((unsigned __int16 *)v7 + 13);
        if (v5 != v16)
          break;
        v6 = v7;
        v7 = (uint64_t *)*v7;
        if (!v7)
          goto LABEL_18;
      }
      v8 = v16 - v5;
      v9 = v5 - v16;
      v10 = v5 > v16;
      if (v5 > v16)
        v8 = (v16 - v5) ^ 0x8000;
      v11 = v16 > v5;
      v12 = v8;
      v13 = v9 ^ 0x8000;
      if (!v11)
        v13 = v9;
      if (v13 < v12)
        v12 = v13;
      v14 = v13 <= 0x4000u;
      if (v12 == 0x4000)
        v15 = v10;
      else
        v15 = v14;
      if (v15)
        ++v7;
      else
        v6 = v7;
      v7 = (uint64_t *)*v7;
    }
    while (v7);
LABEL_18:
    if (v6 == v4)
    {
      return 0;
    }
    else
    {
      v17 = *((unsigned __int16 *)v6 + 13);
      if (v17 == v5)
        goto LABEL_32;
      v18 = v5 - v17;
      v19 = v17 - v5;
      v20 = v17 > v5;
      if (v17 > v5)
        v18 = (v5 - v17) ^ 0x8000;
      v11 = v5 > v17;
      v21 = v18;
      v22 = v19 ^ 0x8000;
      if (!v11)
        v22 = v19;
      if (v22 < v18)
        v21 = v22;
      v23 = v22 <= 0x4000u;
      if (!(v21 == 0x4000 ? v20 : v23))
      {
LABEL_32:
        v25 = (uint64_t *)v6[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
        else
        {
          v27 = v6;
          do
          {
            v26 = (uint64_t *)v27[2];
            v28 = *v26 == (_QWORD)v27;
            v27 = v26;
          }
          while (!v28);
        }
        if (*a1 == v6)
          *a1 = v26;
        a1[2] = (uint64_t *)((char *)a1[2] - 1);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(result, v6);
        operator delete(v6);
        return (uint64_t *)1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void webrtc::RtpVp9RefFinder::ManageFrame(webrtc::RtpVp9RefFinder *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  int64x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  webrtc::RtpFrameObject *v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  webrtc::RtpVp9RefFinder *v38;
  uint64_t *v39;
  char v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 v53;
  int v54;
  unint64_t v55;
  __int16 v56;
  unsigned int v57;
  _BOOL4 v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;

  v10 = *a2;
  if (*(_QWORD *)(*a2 + 4360) != 2)
LABEL_63:
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v11 = a2;
  v12 = (int64x2_t *)this;
  v13 = *(unsigned __int8 *)(v10 + 2732);
  v14 = *a2;
  if (v13 != 255)
  {
    *(_DWORD *)(v10 + 200) = v13;
    *(_BYTE *)(v10 + 204) = 1;
    v14 = *a2;
  }
  v15 = *(unsigned __int8 *)(v10 + 2733);
  *(_BYTE *)(v14 + 196) = 1;
  *(_DWORD *)(v14 + 192) = v15;
  v16 = (webrtc::RtpFrameObject *)*a2;
  *(_QWORD *)(*v11 + 2408) = *(_WORD *)(v10 + 2726) & 0x7FFF;
  if (*(unsigned __int8 *)(v10 + 2732) > 4u || *(unsigned __int8 *)(v10 + 2733) > 4u)
    goto LABEL_85;
  if (*(_BYTE *)(v10 + 2721))
  {
    v18 = *(unsigned __int8 *)(v10 + 2737);
    if (v18 <= 5)
    {
      *((_QWORD *)v16 + 41) = v18;
      if ((_DWORD)v18)
      {
        v19 = *((_QWORD *)v16 + 301);
        v20 = *(unsigned __int8 *)(v10 + 2738);
        v21 = v19 >= v20;
        v22 = v19 - v20;
        if (!v21)
          v22 += 0x8000;
        *((_QWORD *)v16 + 42) = v22;
        if ((_DWORD)v18 != 1)
        {
          v23 = *((_QWORD *)v16 + 301);
          v24 = *(unsigned __int8 *)(v10 + 2739);
          v21 = v23 >= v24;
          v25 = v23 - v24;
          if (!v21)
            v25 += 0x8000;
          *((_QWORD *)v16 + 43) = v25;
          if ((_DWORD)v18 != 2)
          {
            v26 = *((_QWORD *)v16 + 301);
            v27 = *(unsigned __int8 *)(v10 + 2740);
            v21 = v26 >= v27;
            v28 = v26 - v27;
            if (!v21)
              v28 += 0x8000;
            *((_QWORD *)v16 + 44) = v28;
            if ((_DWORD)v18 != 3)
            {
              v29 = *((_QWORD *)v16 + 301);
              v30 = *(unsigned __int8 *)(v10 + 2741);
              v21 = v29 >= v30;
              v31 = v29 - v30;
              if (!v21)
                v31 += 0x8000;
              *((_QWORD *)v16 + 45) = v31;
              if ((_DWORD)v18 != 4)
              {
                v32 = *((_QWORD *)v16 + 301);
                v33 = *(unsigned __int8 *)(v10 + 2742);
                v21 = v32 >= v33;
                v34 = v32 - v33;
                if (!v21)
                  v34 += 0x8000;
                *((_QWORD *)v16 + 46) = v34;
              }
            }
          }
        }
      }
      this = (webrtc::RtpVp9RefFinder *)webrtc::RtpVp9RefFinder::FlattenFrameIdAndRefs((uint64_t)this, v16, *(_BYTE *)(v10 + 2735));
      goto LABEL_27;
    }
    goto LABEL_85;
  }
  v49 = *(unsigned __int16 *)(v10 + 2730);
  if (v49 == 0xFFFF)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v61, v62, v63, v64, v65, v66, v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/rtp_vp9_ref_finder.cc");
LABEL_85:
    *a9 = 0;
    return;
  }
  v50 = (uint64_t *)((char *)this + 77440);
  v51 = v10 + 2720;
  if (*((_BYTE *)this + 77449))
  {
    v52 = *((unsigned __int8 *)this + 77448);
    v53 = v49 - v52;
    v54 = (char)(v49 - v52);
    v55 = (v49 - v52);
    v56 = *(_WORD *)(v10 + 2730);
    v57 = v49 - v52;
    v58 = v52 < v49;
    if (v57 != 128)
      v58 = v54 >= 0;
    if (v58)
      v59 = v55;
    else
      v59 = v53 | 0xFFFFFFFFFFFFFF00;
    v60 = v59 + *v50;
  }
  else
  {
    v56 = *(_WORD *)(v10 + 2730);
    v60 = v49;
  }
  *v50 = v60;
  *((_WORD *)this + 38724) = v56 | 0x100;
  this = (webrtc::RtpVp9RefFinder *)webrtc::RtpVp9RefFinder::ManageFrameGof((uint64_t)this, *v11, v51, v60, a5, a6, a7, a8);
  if (!(_DWORD)this)
  {
    v68 = v12[2].u64[1];
    if (v68 >= 0x65)
    {
      v69 = v12[2].i64[0];
      v70 = v68 - 1;
      v71 = v69 + v68 - 1;
      v72 = *(_QWORD *)(v12->i64[1] + ((v71 >> 5) & 0x7FFFFFFFFFFFFF8));
      if (!v72)
      {
LABEL_87:
        __break(1u);
        return;
      }
      v73 = v72 + 16 * v71;
      v74 = *(_QWORD *)(v73 + 8);
      *(_QWORD *)(v73 + 8) = 0;
      if (v74)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
        v69 = v12[2].i64[0];
        v68 = v12[2].u64[1];
        v70 = v68 - 1;
      }
      v76 = v12->i64[1];
      v75 = v12[1].i64[0];
      v12[2].i64[1] = v70;
      if (v75 == v76)
        v77 = 0;
      else
        v77 = 32 * (v75 - v76) - 1;
      if (v77 - (v69 + v68) + 1 >= 0x200)
      {
        operator delete(*(void **)(v75 - 8));
        v12[1].i64[0] -= 8;
      }
    }
    v78 = *v11;
    *v11 = 0;
    v79 = v12[2].u64[0];
    if (!v79)
    {
      std::deque<webrtc::RtpVp9RefFinder::UnwrappedTl0Frame>::__add_front_capacity((uint64_t)v12);
      v79 = v12[2].u64[0];
    }
    v80 = v12->i64[1];
    v81 = (_QWORD *)(v80 + 8 * (v79 >> 8));
    if (v12[1].i64[0] == v80)
      v82 = 0;
    else
      v82 = *v81 + 16 * v79;
    if (v82 == *v81)
      v82 = *(v81 - 1) + 4096;
    *(_QWORD *)(v82 - 16) = v60;
    *(_QWORD *)(v82 - 8) = v78;
    v83 = v12[2].i64[1] + 1;
    v12[2].i64[0] = v79 - 1;
    v12[2].i64[1] = v83;
    goto LABEL_85;
  }
  *a9 = 0;
  if ((_DWORD)this == 1)
  {
LABEL_27:
    a9[1] = *v11;
    *v11 = 0;
    *a9 = 2;
    v35 = v12->i64[1];
    v36 = v12[1].i64[0];
    do
    {
      v37 = v12[2].u64[0];
      v38 = (webrtc::RtpVp9RefFinder *)(v35 + 8 * (v37 >> 8));
      if (v36 == v35)
        v39 = 0;
      else
        v39 = (uint64_t *)(*(_QWORD *)v38 + 16 * v37);
      v40 = 0;
      while (v36 != v35)
      {
        v42 = v12[2].i64[1] + v12[2].i64[0];
        if (v39 == (uint64_t *)(*(_QWORD *)(v35 + ((v42 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v42))
          goto LABEL_28;
LABEL_41:
        v43 = (unint64_t *)(v39 + 1);
        a2 = (uint64_t *)v39[1];
        if (a2[545] != 2)
          goto LABEL_63;
        this = (webrtc::RtpVp9RefFinder *)webrtc::RtpVp9RefFinder::ManageFrameGof((uint64_t)v12, (uint64_t)a2, (uint64_t)(a2 + 340), *v39, a5, a6, a7, a8);
        switch((_DWORD)this)
        {
          case 2:
            goto LABEL_35;
          case 1:
            v45 = *a9;
            v46 = (unint64_t *)a9[1];
            if ((*a9 & 1) != 0)
            {
              v47 = a9[2];
            }
            else
            {
              v46 = a9 + 1;
              v47 = 3;
            }
            if (v45 >> 1 == v47)
            {
              absl::inlined_vector_internal::Storage<std::unique_ptr<webrtc::RtpFrameObject>,3ul,std::allocator<std::unique_ptr<webrtc::RtpFrameObject>>>::EmplaceBackSlow<std::unique_ptr<webrtc::RtpFrameObject>>(a9, v39 + 1);
            }
            else
            {
              if (!v46)
                goto LABEL_87;
              v48 = *v43;
              *v43 = 0;
              v46[v45 >> 1] = v48;
              *a9 = v45 + 2;
            }
            v40 = 1;
LABEL_35:
            this = (webrtc::RtpVp9RefFinder *)std::deque<webrtc::RtpVp8RefFinder::UnwrappedTl0Frame>::erase(v12, (char *)v38, (uint64_t)v39);
            v38 = this;
            v39 = v41;
            break;
          case 0:
            v39 += 2;
            if ((uint64_t *)((char *)v39 - *(_QWORD *)v38) == (uint64_t *)4096)
            {
              v44 = (uint64_t *)*((_QWORD *)v38 + 1);
              v38 = (webrtc::RtpVp9RefFinder *)((char *)v38 + 8);
              v39 = v44;
            }
            break;
        }
        v35 = v12->i64[1];
        v36 = v12[1].i64[0];
      }
      if (v39)
        goto LABEL_41;
LABEL_28:
      ;
    }
    while ((v40 & 1) != 0);
  }
}

uint64_t webrtc::RtpVp9RefFinder::ManageFrameGof(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  unsigned __int8 v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t **v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned __int8 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int16 v101;
  uint64_t *v102;
  uint64_t **v103;
  uint64_t **v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  BOOL v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  _QWORD *v124;
  unsigned int v125;
  unsigned __int16 v126;
  unint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t *v139;
  BOOL v140;
  char v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t **v145;
  int i;
  uint64_t *v147;
  unsigned int v148;
  unsigned __int16 v149;
  __int16 v150;
  _BOOL4 v151;
  unsigned __int16 v152;
  int v153;
  unsigned int v154;
  _BOOL4 v155;
  _BOOL4 v156;
  _BOOL4 v157;
  uint64_t v158;
  uint64_t ***v159;
  uint64_t ***v160;
  uint64_t ***v161;
  unint64_t v162;
  unsigned __int16 v163;
  uint64_t *v164;
  uint64_t *v165;
  int v166;
  unsigned __int16 v167;
  BOOL v168;
  BOOL v169;
  BOOL v170;
  BOOL v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  unsigned __int16 v175;
  BOOL v176;
  BOOL v177;
  BOOL v178;
  uint64_t **v179;
  uint64_t v180;
  int v181;
  unsigned __int16 v182;
  BOOL v183;
  BOOL v184;
  BOOL v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  unsigned __int16 v189;
  BOOL v190;
  BOOL v191;
  BOOL v192;
  uint64_t **v193;
  uint64_t v194;
  int v195;
  unsigned __int16 v196;
  BOOL v197;
  BOOL v198;
  BOOL v199;
  unsigned int v200;
  unsigned int v201;
  int v202;
  unsigned __int16 v203;
  BOOL v204;
  BOOL v205;
  BOOL v206;
  uint64_t **v207;
  uint64_t v208;
  int v209;
  unsigned __int16 v210;
  BOOL v211;
  BOOL v212;
  BOOL v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  unsigned __int16 v217;
  BOOL v218;
  BOOL v219;
  BOOL v220;
  uint64_t v221;
  unint64_t v222;
  __int16 v223;
  uint64_t *v224;
  _QWORD *v225;
  uint64_t *v226;
  unsigned __int16 v227;
  int v228;
  unsigned __int16 v229;
  BOOL v230;
  BOOL v231;
  BOOL v232;
  unsigned int v233;
  uint64_t *v234;
  _QWORD *v235;
  unsigned int v236;
  unint64_t v237;
  unsigned __int16 v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unsigned int v242;
  _QWORD *v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  unsigned int v253;
  int v254;
  unsigned __int16 v255;
  BOOL v256;
  BOOL v257;
  _QWORD *v258;
  BOOL v259;
  _QWORD *v260;
  BOOL v261;
  _QWORD *v262;
  unsigned int v263;
  int v264;
  unsigned __int16 v265;
  BOOL v266;
  _BOOL4 v267;
  _BOOL4 v268;
  _QWORD *v269;
  _QWORD *v270;
  char v271;
  char v272;
  _BYTE __dst[770];
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  _OWORD v289[2];
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  _OWORD v304[2];
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  _OWORD v319[2];
  uint64_t v320;

  v11 = a1;
  v320 = *MEMORY[0x24BDAC8D0];
  v12 = a1 + 77256;
  if (*(_BYTE *)(a3 + 4))
  {
    if (*(_BYTE *)(a3 + 12))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v13, v14, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/rtp_vp9_ref_finder.cc");
    }
    else
    {
      v23 = *(_QWORD *)(a3 + 88);
      if (v23 > 0xFF)
        return 2;
      if (v23)
      {
        v39 = (unsigned __int8 *)(a3 + 606);
        v40 = *(_QWORD *)(a3 + 88);
        do
        {
          v41 = *v39++;
          if (v41 > 3)
            return 2;
        }
        while (--v40);
      }
      v272 = *(_BYTE *)(a3 + 96);
      v42 = *(_OWORD *)(a3 + 305);
      v317 = *(_OWORD *)(a3 + 289);
      v318 = v42;
      v319[0] = *(_OWORD *)(a3 + 321);
      *(_OWORD *)((char *)v319 + 14) = *(_OWORD *)(a3 + 335);
      v43 = *(_OWORD *)(a3 + 241);
      v313 = *(_OWORD *)(a3 + 225);
      v314 = v43;
      v44 = *(_OWORD *)(a3 + 273);
      v315 = *(_OWORD *)(a3 + 257);
      v316 = v44;
      v45 = *(_OWORD *)(a3 + 177);
      v309 = *(_OWORD *)(a3 + 161);
      v310 = v45;
      v46 = *(_OWORD *)(a3 + 209);
      v311 = *(_OWORD *)(a3 + 193);
      v312 = v46;
      v47 = *(_OWORD *)(a3 + 113);
      v305 = *(_OWORD *)(a3 + 97);
      v306 = v47;
      v48 = *(_OWORD *)(a3 + 145);
      v307 = *(_OWORD *)(a3 + 129);
      v308 = v48;
      v271 = *(_BYTE *)(a3 + 351);
      v49 = *(_OWORD *)(a3 + 560);
      v302 = *(_OWORD *)(a3 + 544);
      v303 = v49;
      v304[0] = *(_OWORD *)(a3 + 576);
      *(_OWORD *)((char *)v304 + 14) = *(_OWORD *)(a3 + 590);
      v50 = *(_OWORD *)(a3 + 496);
      v298 = *(_OWORD *)(a3 + 480);
      v299 = v50;
      v51 = *(_OWORD *)(a3 + 528);
      v300 = *(_OWORD *)(a3 + 512);
      v301 = v51;
      v52 = *(_OWORD *)(a3 + 432);
      v294 = *(_OWORD *)(a3 + 416);
      v295 = v52;
      v53 = *(_OWORD *)(a3 + 464);
      v296 = *(_OWORD *)(a3 + 448);
      v297 = v53;
      v54 = *(_OWORD *)(a3 + 368);
      v290 = *(_OWORD *)(a3 + 352);
      v291 = v54;
      v55 = *(_OWORD *)(a3 + 400);
      v292 = *(_OWORD *)(a3 + 384);
      v293 = v55;
      v56 = *(_BYTE *)(a3 + 606);
      v57 = *(_OWORD *)(a3 + 815);
      v287 = *(_OWORD *)(a3 + 799);
      v288 = v57;
      v289[0] = *(_OWORD *)(a3 + 831);
      *(_OWORD *)((char *)v289 + 14) = *(_OWORD *)(a3 + 845);
      v58 = *(_OWORD *)(a3 + 751);
      v283 = *(_OWORD *)(a3 + 735);
      v284 = v58;
      v59 = *(_OWORD *)(a3 + 783);
      v285 = *(_OWORD *)(a3 + 767);
      v286 = v59;
      v60 = *(_OWORD *)(a3 + 687);
      v279 = *(_OWORD *)(a3 + 671);
      v280 = v60;
      v61 = *(_OWORD *)(a3 + 719);
      v281 = *(_OWORD *)(a3 + 703);
      v282 = v61;
      v62 = *(_OWORD *)(a3 + 623);
      v275 = *(_OWORD *)(a3 + 607);
      v276 = v62;
      v63 = *(_OWORD *)(a3 + 655);
      v277 = *(_OWORD *)(a3 + 639);
      v278 = v63;
      v64 = *(_BYTE *)(a3 + 861);
      memcpy(__dst, (const void *)(a3 + 862), sizeof(__dst));
      if (v23)
      {
        v66 = v271;
        v65 = v272;
        v67 = v56;
        v68 = v64;
      }
      else
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v69, v70, v71, v72, v73, v74, v75, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/rtp_vp9_ref_finder.cc");
        v65 = 0;
        v23 = 1;
        v66 = 1;
        v67 = 1;
        v68 = 1;
      }
      v11 = a1;
      v76 = *(unsigned __int8 *)(a1 + 48);
      if (v76 < 0x31)
        v77 = v76 + 1;
      else
        v77 = v76 - 49;
      *(_BYTE *)(a1 + 48) = v77;
      if (v77 >= 0x32uLL)
        __break(1u);
      v78 = a1 + 1544 * v77;
      *(_QWORD *)(v78 + 56) = v23;
      v79 = v78 + 56;
      *(_BYTE *)(v79 + 8) = v65;
      v80 = v318;
      *(_OWORD *)(v79 + 201) = v317;
      *(_OWORD *)(v79 + 217) = v80;
      *(_OWORD *)(v79 + 233) = v319[0];
      *(_OWORD *)(v79 + 247) = *(_OWORD *)((char *)v319 + 14);
      v81 = v314;
      *(_OWORD *)(v79 + 137) = v313;
      *(_OWORD *)(v79 + 153) = v81;
      v82 = v316;
      *(_OWORD *)(v79 + 169) = v315;
      *(_OWORD *)(v79 + 185) = v82;
      v83 = v310;
      *(_OWORD *)(v79 + 73) = v309;
      *(_OWORD *)(v79 + 89) = v83;
      v84 = v312;
      *(_OWORD *)(v79 + 105) = v311;
      *(_OWORD *)(v79 + 121) = v84;
      v85 = v306;
      *(_OWORD *)(v79 + 9) = v305;
      *(_OWORD *)(v79 + 25) = v85;
      v86 = v308;
      *(_OWORD *)(v79 + 41) = v307;
      *(_OWORD *)(v79 + 57) = v86;
      *(_BYTE *)(v79 + 263) = v66;
      v87 = v303;
      *(_OWORD *)(v79 + 456) = v302;
      *(_OWORD *)(v79 + 472) = v87;
      *(_OWORD *)(v79 + 488) = v304[0];
      *(_OWORD *)(v79 + 502) = *(_OWORD *)((char *)v304 + 14);
      v88 = v299;
      *(_OWORD *)(v79 + 392) = v298;
      *(_OWORD *)(v79 + 408) = v88;
      v89 = v301;
      *(_OWORD *)(v79 + 424) = v300;
      *(_OWORD *)(v79 + 440) = v89;
      v90 = v295;
      *(_OWORD *)(v79 + 328) = v294;
      *(_OWORD *)(v79 + 344) = v90;
      v91 = v297;
      *(_OWORD *)(v79 + 360) = v296;
      *(_OWORD *)(v79 + 376) = v91;
      v92 = v291;
      *(_OWORD *)(v79 + 264) = v290;
      *(_OWORD *)(v79 + 280) = v92;
      v93 = v293;
      *(_OWORD *)(v79 + 296) = v292;
      *(_OWORD *)(v79 + 312) = v93;
      *(_BYTE *)(v79 + 518) = v67;
      v94 = v288;
      *(_OWORD *)(v79 + 711) = v287;
      *(_OWORD *)(v79 + 727) = v94;
      *(_OWORD *)(v79 + 743) = v289[0];
      *(_OWORD *)(v79 + 757) = *(_OWORD *)((char *)v289 + 14);
      v95 = v284;
      *(_OWORD *)(v79 + 647) = v283;
      *(_OWORD *)(v79 + 663) = v95;
      v96 = v286;
      *(_OWORD *)(v79 + 679) = v285;
      *(_OWORD *)(v79 + 695) = v96;
      v97 = v280;
      *(_OWORD *)(v79 + 583) = v279;
      *(_OWORD *)(v79 + 599) = v97;
      v98 = v282;
      *(_OWORD *)(v79 + 615) = v281;
      *(_OWORD *)(v79 + 631) = v98;
      v99 = v276;
      *(_OWORD *)(v79 + 519) = v275;
      *(_OWORD *)(v79 + 535) = v99;
      v100 = v278;
      *(_OWORD *)(v79 + 551) = v277;
      *(_OWORD *)(v79 + 567) = v100;
      *(_BYTE *)(v79 + 773) = v68;
      memcpy((void *)(v79 + 774), __dst, 0x302uLL);
      v101 = *(_WORD *)(a2 + 2408);
      *(_WORD *)(v79 + 1538) = v101;
      v103 = (uint64_t **)(v12 + 8);
      v102 = *(uint64_t **)(v12 + 8);
      if (v102)
      {
        while (1)
        {
          while (1)
          {
            v104 = (uint64_t **)v102;
            v105 = v102[4];
            if (v105 <= a4)
              break;
            v102 = *v104;
            v103 = v104;
            if (!*v104)
              goto LABEL_51;
          }
          if (v105 >= a4)
            break;
          v102 = v104[1];
          if (!v102)
          {
            v103 = v104 + 1;
            goto LABEL_51;
          }
        }
      }
      else
      {
        v104 = (uint64_t **)(v12 + 8);
LABEL_51:
        v106 = operator new(0x38uLL);
        v106[4] = a4;
        v106[5] = v79;
        *((_WORD *)v106 + 24) = v101;
        *v106 = 0;
        v106[1] = 0;
        v106[2] = v104;
        *v103 = v106;
        v107 = **(_QWORD **)v12;
        if (v107)
        {
          *(_QWORD *)v12 = v107;
          v108 = *v103;
        }
        else
        {
          v108 = v106;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v12 + 8), v108);
        ++*(_QWORD *)(v12 + 16);
      }
    }
    v25 = *(_QWORD **)(v12 + 8);
    if (!v25)
      return 0;
    v109 = (_QWORD *)(v12 + 8);
    v110 = *(_QWORD **)(v12 + 8);
    do
    {
      v111 = v110[4];
      v112 = v111 < a4;
      if (v111 >= a4)
        v113 = v110;
      else
        v113 = v110 + 1;
      if (!v112)
        v109 = v110;
      v110 = (_QWORD *)*v113;
    }
    while (*v113);
    if (v109 == (_QWORD *)(v12 + 8) || v109[4] > a4)
      return 0;
    v32 = (uint64_t)(v109 + 5);
    if (*(_DWORD *)(a2 + 2576) == 3)
    {
      *(_QWORD *)(a2 + 328) = 0;
      webrtc::RtpVp9RefFinder::FrameReceivedVp9(v11, *(unsigned __int16 *)(a2 + 2408), v32, a4, a5, a6, a7, a8);
LABEL_326:
      webrtc::RtpVp9RefFinder::FlattenFrameIdAndRefs(v11, (webrtc::RtpFrameObject *)a2, *(_BYTE *)(a3 + 15));
      return 1;
    }
  }
  else
  {
    if (*(_DWORD *)(a2 + 2576) == 3)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/rtp_vp9_ref_finder.cc");
        return 2;
      }
      return 2;
    }
    if (*(_BYTE *)(a3 + 12))
      v24 = 0;
    else
      v24 = *(_BYTE *)(a3 + 15) ^ 1;
    v25 = *(_QWORD **)(a1 + 77264);
    if (!v25)
      return 0;
    v26 = a4 - v24;
    v27 = (_QWORD *)(a1 + 77264);
    v28 = *(_QWORD **)(a1 + 77264);
    do
    {
      v29 = v28[4];
      v30 = v29 < v26;
      if (v29 >= v26)
        v31 = v28;
      else
        v31 = v28 + 1;
      if (!v30)
        v27 = v28;
      v28 = (_QWORD *)*v31;
    }
    while (*v31);
    if (v27 == (_QWORD *)(a1 + 77264) || v26 < v27[4])
      return 0;
    v32 = (uint64_t)(v27 + 5);
    if (!*(_BYTE *)(a3 + 12))
    {
      v33 = *(_QWORD **)v32;
      v34 = *(_WORD *)(a2 + 2408);
      v35 = *(_QWORD **)(a1 + 77264);
      do
      {
        while (1)
        {
          v36 = v35;
          v37 = v35[4];
          if (v37 > a4)
            break;
          if (v37 >= a4)
          {
            v116 = v36;
            goto LABEL_72;
          }
          v35 = (_QWORD *)v36[1];
          if (!v35)
          {
            v38 = (uint64_t **)(v36 + 1);
            goto LABEL_69;
          }
        }
        v35 = (_QWORD *)*v36;
      }
      while (*v36);
      v38 = (uint64_t **)v36;
LABEL_69:
      v116 = operator new(0x38uLL);
      v116[4] = a4;
      v116[5] = v33;
      *((_WORD *)v116 + 24) = v34;
      *v116 = 0;
      v116[1] = 0;
      v116[2] = v36;
      *v38 = v116;
      v114 = **(_QWORD **)v12;
      v115 = v116;
      if (v114)
      {
        *(_QWORD *)v12 = v114;
        v115 = *v38;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v12 + 8), v115);
      v25 = *(_QWORD **)(v12 + 8);
      ++*(_QWORD *)(v12 + 16);
LABEL_72:
      v32 = (uint64_t)(v116 + 5);
    }
  }
  v117 = (uint64_t *)(v12 + 8);
  if (v25)
  {
    v118 = a4 - 50;
    do
    {
      v119 = v25[4];
      v120 = v119 < v118;
      if (v119 >= v118)
        v121 = v25;
      else
        v121 = v25 + 1;
      if (!v120)
        v117 = v25;
      v25 = (_QWORD *)*v121;
    }
    while (*v121);
  }
  v122 = *(uint64_t **)v12;
  if (*(uint64_t **)v12 != v117)
  {
    do
    {
      v137 = (uint64_t *)v122[1];
      v138 = v122;
      if (v137)
      {
        do
        {
          v139 = v137;
          v137 = (uint64_t *)*v137;
        }
        while (v137);
      }
      else
      {
        do
        {
          v139 = (uint64_t *)v138[2];
          v140 = *v139 == (_QWORD)v138;
          v138 = v139;
        }
        while (!v140);
      }
      if (*(uint64_t **)v12 == v122)
        *(_QWORD *)v12 = v139;
      v136 = *(uint64_t **)(v12 + 8);
      --*(_QWORD *)(v12 + 16);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v136, v122);
      operator delete(v122);
      v122 = v139;
    }
    while (v139 != v117);
  }
  webrtc::RtpVp9RefFinder::FrameReceivedVp9(v11, *(unsigned __int16 *)(a2 + 2408), v32, a4, a5, a6, a7, a8);
  v123 = *(_QWORD *)(a2 + 2408);
  v124 = *(_QWORD **)v32;
  v125 = *(unsigned __int16 *)(*(_QWORD *)v32 + 1538);
  if (v125 <= (unsigned __int16)v123)
    v126 = v123 - v125;
  else
    v126 = (v123 - v125) ^ 0x8000;
  v127 = (unint64_t)v126 % *v124;
  v128 = *((unsigned __int8 *)v124 + v127 + 8);
  if (v128 < 5)
  {
    if (*((_BYTE *)v124 + v127 + 518))
      v140 = v128 == 0;
    else
      v140 = 1;
    if (!v140)
    {
      v158 = 0;
      v159 = (uint64_t ***)(v12 + 80);
      v160 = (uint64_t ***)(v12 + 104);
      v161 = (uint64_t ***)(v12 + 128);
      do
      {
        v162 = *((unsigned __int8 *)v124 + 3 * v127 + v158 + 773);
        v163 = (unsigned __int16)*(_QWORD *)(a2 + 2408) >= v162
             ? v123 - v162
             : (unsigned __int16)v123 - (unsigned __int16)v162 + 0x8000;
        if (*(_QWORD *)(v12 + 56))
        {
          v164 = (uint64_t *)(v12 + 56);
          v165 = *(uint64_t **)(v12 + 56);
          do
          {
            while (1)
            {
              v172 = *((unsigned __int16 *)v165 + 13);
              if (v172 != v163)
                break;
              v164 = v165;
              v165 = (uint64_t *)*v165;
              if (!v165)
                goto LABEL_142;
            }
            LOWORD(v166) = v172 - v163;
            v167 = v163 - v172;
            v168 = v172 >= v163;
            v169 = v172 > v163;
            v170 = v172 < v163;
            if (!v168)
              LOWORD(v166) = v166 ^ 0x8000;
            v166 = (unsigned __int16)v166;
            if (v169)
              v167 ^= 0x8000u;
            if (v167 < (unsigned __int16)v166)
              v166 = v167;
            v171 = v167 <= 0x4000u;
            if (v166 != 0x4000)
              v170 = v171;
            if (v170)
              ++v165;
            else
              v164 = v165;
            v165 = (uint64_t *)*v165;
          }
          while (v165);
LABEL_142:
          if (v164 != (uint64_t *)(v12 + 56))
          {
            v173 = *((unsigned __int16 *)v164 + 13);
            if (v173 != (unsigned __int16)v123)
            {
              LOWORD(v174) = v173 - v123;
              v175 = v123 - v173;
              v168 = v173 >= (unsigned __int16)v123;
              v176 = v173 > (unsigned __int16)v123;
              v177 = v173 < (unsigned __int16)v123;
              if (!v168)
                LOWORD(v174) = v174 ^ 0x8000;
              v174 = (unsigned __int16)v174;
              if (v176)
                v175 ^= 0x8000u;
              if (v175 < (unsigned __int16)v174)
                v174 = v175;
              v178 = v175 <= 0x4000u;
              if (v174 != 0x4000)
                v177 = v178;
              if (v177)
                return 0;
            }
          }
        }
        if (v128 != 1)
        {
          v179 = *v159;
          if (*v159)
          {
            v180 = v12 + 80;
            do
            {
              while (1)
              {
                v186 = *((unsigned __int16 *)v179 + 13);
                if (v186 != v163)
                  break;
                v180 = (uint64_t)v179;
                v179 = (uint64_t **)*v179;
                if (!v179)
                  goto LABEL_170;
              }
              LOWORD(v181) = v186 - v163;
              v182 = v163 - v186;
              v168 = v186 >= v163;
              v183 = v186 > v163;
              v184 = v186 < v163;
              if (!v168)
                LOWORD(v181) = v181 ^ 0x8000;
              v181 = (unsigned __int16)v181;
              if (v183)
                v182 ^= 0x8000u;
              if (v182 < (unsigned __int16)v181)
                v181 = v182;
              v185 = v182 <= 0x4000u;
              if (v181 != 0x4000)
                v184 = v185;
              if (v184)
                ++v179;
              else
                v180 = (uint64_t)v179;
              v179 = (uint64_t **)*v179;
            }
            while (v179);
LABEL_170:
            if ((uint64_t ***)v180 != v159)
            {
              v187 = *(unsigned __int16 *)(v180 + 26);
              if (v187 != (unsigned __int16)v123)
              {
                LOWORD(v188) = v187 - v123;
                v189 = v123 - v187;
                v168 = v187 >= (unsigned __int16)v123;
                v190 = v187 > (unsigned __int16)v123;
                v191 = v187 < (unsigned __int16)v123;
                if (!v168)
                  LOWORD(v188) = v188 ^ 0x8000;
                v188 = (unsigned __int16)v188;
                if (v190)
                  v189 ^= 0x8000u;
                if (v189 < (unsigned __int16)v188)
                  v188 = v189;
                v192 = v189 <= 0x4000u;
                if (v188 != 0x4000)
                  v191 = v192;
                if (v191)
                  return 0;
              }
            }
          }
          if (v128 != 2)
          {
            v193 = *v160;
            if (*v160)
            {
              v194 = v12 + 104;
              do
              {
                while (1)
                {
                  v200 = *((unsigned __int16 *)v193 + 13);
                  if (v200 != v163)
                    break;
                  v194 = (uint64_t)v193;
                  v193 = (uint64_t **)*v193;
                  if (!v193)
                    goto LABEL_198;
                }
                LOWORD(v195) = v200 - v163;
                v196 = v163 - v200;
                v168 = v200 >= v163;
                v197 = v200 > v163;
                v198 = v200 < v163;
                if (!v168)
                  LOWORD(v195) = v195 ^ 0x8000;
                v195 = (unsigned __int16)v195;
                if (v197)
                  v196 ^= 0x8000u;
                if (v196 < (unsigned __int16)v195)
                  v195 = v196;
                v199 = v196 <= 0x4000u;
                if (v195 != 0x4000)
                  v198 = v199;
                if (v198)
                  ++v193;
                else
                  v194 = (uint64_t)v193;
                v193 = (uint64_t **)*v193;
              }
              while (v193);
LABEL_198:
              if ((uint64_t ***)v194 != v160)
              {
                v201 = *(unsigned __int16 *)(v194 + 26);
                if (v201 != (unsigned __int16)v123)
                {
                  LOWORD(v202) = v201 - v123;
                  v203 = v123 - v201;
                  v168 = v201 >= (unsigned __int16)v123;
                  v204 = v201 > (unsigned __int16)v123;
                  v205 = v201 < (unsigned __int16)v123;
                  if (!v168)
                    LOWORD(v202) = v202 ^ 0x8000;
                  v202 = (unsigned __int16)v202;
                  if (v204)
                    v203 ^= 0x8000u;
                  if (v203 < (unsigned __int16)v202)
                    v202 = v203;
                  v206 = v203 <= 0x4000u;
                  if (v202 != 0x4000)
                    v205 = v206;
                  if (v205)
                    return 0;
                }
              }
            }
            if (v128 != 3)
            {
              v207 = *v161;
              if (*v161)
              {
                v208 = v12 + 128;
                do
                {
                  while (1)
                  {
                    v214 = *((unsigned __int16 *)v207 + 13);
                    if (v214 != v163)
                      break;
                    v208 = (uint64_t)v207;
                    v207 = (uint64_t **)*v207;
                    if (!v207)
                      goto LABEL_226;
                  }
                  LOWORD(v209) = v214 - v163;
                  v210 = v163 - v214;
                  v168 = v214 >= v163;
                  v211 = v214 > v163;
                  v212 = v214 < v163;
                  if (!v168)
                    LOWORD(v209) = v209 ^ 0x8000;
                  v209 = (unsigned __int16)v209;
                  if (v211)
                    v210 ^= 0x8000u;
                  if (v210 < (unsigned __int16)v209)
                    v209 = v210;
                  v213 = v210 <= 0x4000u;
                  if (v209 != 0x4000)
                    v212 = v213;
                  if (v212)
                    ++v207;
                  else
                    v208 = (uint64_t)v207;
                  v207 = (uint64_t **)*v207;
                }
                while (v207);
LABEL_226:
                if ((uint64_t ***)v208 != v161)
                {
                  v215 = *(unsigned __int16 *)(v208 + 26);
                  if (v215 != (unsigned __int16)v123)
                  {
                    LOWORD(v216) = v215 - v123;
                    v217 = v123 - v215;
                    v168 = v215 >= (unsigned __int16)v123;
                    v218 = v215 > (unsigned __int16)v123;
                    v219 = v215 < (unsigned __int16)v123;
                    if (!v168)
                      LOWORD(v216) = v216 ^ 0x8000;
                    v216 = (unsigned __int16)v216;
                    if (v218)
                      v217 ^= 0x8000u;
                    if (v217 < (unsigned __int16)v216)
                      v216 = v217;
                    v220 = v217 <= 0x4000u;
                    if (v216 != 0x4000)
                      v219 = v220;
                    if (v219)
                      return 0;
                  }
                }
              }
            }
          }
        }
      }
      while (++v158 != *((unsigned __int8 *)v124 + v127 + 518));
    }
    if (*(_BYTE *)(a3 + 14))
    {
      v141 = *(_BYTE *)(a3 + 12);
      v142 = (uint64_t *)operator new(0x20uLL);
      v143 = v142;
      *((_WORD *)v142 + 13) = v123;
      *((_BYTE *)v142 + 28) = v141;
      v145 = (uint64_t **)(v12 + 32);
      v144 = *(_QWORD *)(v12 + 32);
      if (v144)
      {
        for (i = *(unsigned __int16 *)(v144 + 26); i != (unsigned __int16)v123; v144 = (uint64_t)v147)
        {
          v148 = (unsigned __int16)i;
          v149 = v123 - i;
          v150 = i - v123;
          v151 = (unsigned __int16)i > (unsigned __int16)v123;
          v152 = (v123 - i) ^ 0x8000;
          if (v148 <= (unsigned __int16)v123)
            v152 = v149;
          LOWORD(v153) = v150 ^ 0x8000;
          if (v148 >= (unsigned __int16)v123)
            LOWORD(v153) = v150;
          v154 = (unsigned __int16)v153;
          if ((unsigned __int16)v153 >= v152)
            v153 = v152;
          else
            v153 = (unsigned __int16)v153;
          v155 = v154 <= 0x4000;
          if (v153 == 0x4000)
            v155 = v151;
          if (v155)
          {
            v147 = *(uint64_t **)v144;
            v145 = (uint64_t **)v144;
            if (!*(_QWORD *)v144)
              goto LABEL_239;
          }
          else
          {
            v156 = v148 < (unsigned __int16)v123;
            v157 = v152 <= 0x4000u;
            if (v153 != 0x4000)
              v156 = v157;
            if (!v156)
              break;
            v147 = *(uint64_t **)(v144 + 8);
            if (!v147)
            {
              v145 = (uint64_t **)(v144 + 8);
              goto LABEL_239;
            }
          }
          i = *((unsigned __int16 *)v147 + 13);
        }
        operator delete(v142);
      }
      else
      {
        v144 = v12 + 32;
LABEL_239:
        *v142 = 0;
        v142[1] = 0;
        v142[2] = v144;
        *v145 = v142;
        v221 = **(_QWORD **)(v12 + 24);
        if (v221)
        {
          *(_QWORD *)(v12 + 24) = v221;
          v143 = *v145;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v12 + 32), v143);
        ++*(_QWORD *)(v12 + 40);
      }
    }
    v222 = *(_QWORD *)(a2 + 2408);
    if (v222 >= 0x32)
      v223 = -50;
    else
      v223 = 32718;
    v225 = (_QWORD *)(v12 + 32);
    v224 = *(uint64_t **)(v12 + 32);
    v226 = (uint64_t *)(v12 + 32);
    if (v224)
    {
      v227 = v223 + v222;
      v226 = (uint64_t *)(v12 + 32);
      do
      {
        while (1)
        {
          v233 = *((unsigned __int16 *)v224 + 13);
          if (v233 != v227)
            break;
          v226 = v224;
          v224 = (uint64_t *)*v224;
          if (!v224)
            goto LABEL_261;
        }
        LOWORD(v228) = v233 - v227;
        v229 = v227 - v233;
        v168 = v233 >= v227;
        v230 = v233 > v227;
        v231 = v233 < v227;
        if (!v168)
          LOWORD(v228) = v228 ^ 0x8000;
        v228 = (unsigned __int16)v228;
        if (v230)
          v229 ^= 0x8000u;
        if (v229 < (unsigned __int16)v228)
          v228 = v229;
        v232 = v229 <= 0x4000u;
        if (v228 != 0x4000)
          v231 = v232;
        if (v231)
          ++v224;
        else
          v226 = v224;
        v224 = (uint64_t *)*v224;
      }
      while (v224);
    }
LABEL_261:
    v234 = *(uint64_t **)(v12 + 24);
    if (v234 != v226)
    {
      do
      {
        v245 = (uint64_t *)v234[1];
        v246 = v234;
        if (v245)
        {
          do
          {
            v247 = v245;
            v245 = (uint64_t *)*v245;
          }
          while (v245);
        }
        else
        {
          do
          {
            v247 = (uint64_t *)v246[2];
            v140 = *v247 == (_QWORD)v246;
            v246 = v247;
          }
          while (!v140);
        }
        if (*(uint64_t **)(v12 + 24) == v234)
          *(_QWORD *)(v12 + 24) = v247;
        v244 = *(uint64_t **)(v12 + 32);
        --*(_QWORD *)(v12 + 40);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v244, v234);
        operator delete(v234);
        v234 = v247;
      }
      while (v247 != v226);
    }
    if (!*(_BYTE *)a3)
    {
      *(_QWORD *)(a2 + 328) = 0;
      goto LABEL_326;
    }
    v235 = *(_QWORD **)v32;
    v236 = *(unsigned __int16 *)(*(_QWORD *)v32 + 1538);
    v237 = *(_QWORD *)(a2 + 2408);
    if (v236 <= (unsigned __int16)v237)
      v238 = v237 - v236;
    else
      v238 = (v237 - v236) ^ 0x8000;
    v239 = (unint64_t)v238 % *v235;
    v240 = *((unsigned __int8 *)v235 + v239 + 518);
    if (v240 <= 5)
    {
      *(_QWORD *)(a2 + 328) = v240;
      if ((_DWORD)v240)
      {
        v241 = 0;
        v242 = *(unsigned __int8 *)(a3 + 12);
        v243 = (_QWORD *)*v225;
        do
        {
          v248 = *((unsigned __int8 *)v235 + 3 * v239 + v241 + 773);
          v168 = v237 >= v248;
          v249 = v237 - v248;
          if (v168)
            v250 = v249;
          else
            v250 = v249 + 0x8000;
          *(_QWORD *)(a2 + 8 * v241 + 336) = v250;
          v237 = *(_QWORD *)(a2 + 2408);
          if (v243)
          {
            v251 = (_QWORD *)(v12 + 32);
            v252 = v243;
            do
            {
              v253 = *((unsigned __int16 *)v252 + 13);
              LOWORD(v254) = v250 - v253;
              v255 = v253 - v250;
              if (v253 > (unsigned __int16)v250)
                LOWORD(v254) = (v250 - v253) ^ 0x8000;
              v254 = (unsigned __int16)v254;
              if (v253 < (unsigned __int16)v250)
                v255 ^= 0x8000u;
              if (v255 < (unsigned __int16)v254)
                v254 = v255;
              v256 = v255 <= 0x4000u;
              if (v254 == 0x4000)
                v257 = v253 > (unsigned __int16)v250;
              else
                v257 = v256;
              v258 = v252 + 1;
              v259 = !v257;
              if (v257)
                v260 = v252;
              else
                v260 = v252 + 1;
              if (v259)
                v252 = v251;
              v261 = v253 == (unsigned __int16)v250;
              if (v253 == (unsigned __int16)v250)
                v262 = v258;
              else
                v262 = v260;
              if (!v261)
                v251 = v252;
              v252 = (_QWORD *)*v262;
            }
            while (*v262);
            if (v251 != v225)
            {
              do
              {
                v263 = *((unsigned __int16 *)v251 + 13);
                if (v263 == (unsigned __int16)v237)
                  break;
                LOWORD(v264) = v263 - v237;
                v265 = v237 - v263;
                v168 = v263 >= (unsigned __int16)v237;
                v266 = v263 > (unsigned __int16)v237;
                v267 = v263 < (unsigned __int16)v237;
                if (!v168)
                  LOWORD(v264) = v264 ^ 0x8000;
                v264 = (unsigned __int16)v264;
                if (v266)
                  v265 ^= 0x8000u;
                if (v265 < (unsigned __int16)v264)
                  v264 = v265;
                v268 = v265 <= 0x4000u;
                if (v264 != 0x4000)
                  v267 = v268;
                if (!v267)
                  break;
                if (*((unsigned __int8 *)v251 + 28) < v242)
                {
                  *(_QWORD *)(a2 + 328) = --v240;
                  break;
                }
                v269 = (_QWORD *)v251[1];
                if (v269)
                {
                  do
                  {
                    v270 = v269;
                    v269 = (_QWORD *)*v269;
                  }
                  while (v269);
                }
                else
                {
                  do
                  {
                    v270 = (_QWORD *)v251[2];
                    v140 = *v270 == (_QWORD)v251;
                    v251 = v270;
                  }
                  while (!v140);
                }
                v251 = v270;
              }
              while (v270 != v225);
            }
          }
          ++v241;
        }
        while (v241 < v240);
      }
      goto LABEL_326;
    }
    return 2;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
    return 0;
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v129, v130, v131, v132, v133, v134, v135, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/rtp_vp9_ref_finder.cc");
  return 0;
}

uint64_t webrtc::RtpVp9RefFinder::FlattenFrameIdAndRefs(uint64_t this, webrtc::RtpFrameObject *a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  BOOL v8;
  int v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  unsigned int v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  int v22;
  BOOL v23;
  unsigned __int16 v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  BOOL v34;
  unsigned __int16 v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = (uint64_t *)(this + 77424);
  if (*((_QWORD *)a2 + 41))
  {
    LODWORD(v4) = *((unsigned __int16 *)a2 + 168);
    if (*(_BYTE *)(this + 77434))
    {
      v5 = *(unsigned __int16 *)(this + 77432);
      v6 = v4 - v5;
      v7 = (v4 - v5) ^ 0x8000;
      v8 = v5 >= v4;
      v9 = v5 - v4;
      if (v9 != 0 && v8)
        v6 = v7;
      v10 = !v8;
      if (!v8)
        LOWORD(v9) = v9 ^ 0x8000;
      v9 = (unsigned __int16)v9;
      if (v6 < (unsigned __int16)v9)
        v9 = v6;
      if (v9 == 0x4000)
        v11 = v10;
      else
        v11 = v6 <= 0x4000u;
      if (v11)
        v12 = v6;
      else
        v12 = v6 - 0x8000;
      v13 = v12 + *v3;
    }
    else
    {
      v13 = *((unsigned __int16 *)a2 + 168);
    }
    *v3 = v13;
    *(_WORD *)(this + 77432) = v4;
    *(_BYTE *)(this + 77434) = 1;
    v16 = *((_QWORD *)a2 + 24);
    if ((v16 & 0xFF00000000) == 0)
      goto LABEL_67;
    *((_QWORD *)a2 + 42) = 5 * v13 + (int)v16;
    if (*((_QWORD *)a2 + 41) >= 2uLL)
    {
      v17 = 43;
      do
      {
        v18 = v4;
        v4 = *((_QWORD *)a2 + v17);
        v19 = v18;
        v20 = v4 - v18;
        v21 = (v4 - v18) ^ 0x8000;
        LOWORD(v22) = v18 - v4;
        v23 = v19 >= (unsigned __int16)v4;
        if (v19 <= (unsigned __int16)v4)
          v24 = v20;
        else
          v24 = v21;
        v25 = !v23;
        if (!v23)
          LOWORD(v22) = v22 ^ 0x8000;
        v22 = (unsigned __int16)v22;
        if (v24 < (unsigned __int16)v22)
          v22 = v24;
        v26 = v22 == 0x4000 ? v25 : v24 <= 0x4000u;
        v27 = v26 ? v24 : v24 - 0x8000;
        v28 = v27 + *v3;
        *v3 = v28;
        *(_WORD *)(this + 77432) = v4;
        *(_BYTE *)(this + 77434) = 1;
        v29 = *((_QWORD *)a2 + 24);
        if ((v29 & 0xFF00000000) == 0)
          goto LABEL_67;
        *((_QWORD *)a2 + v17) = 5 * v28 + (int)v29;
        v30 = v17 - 41;
        ++v17;
      }
      while (v30 < *((_QWORD *)a2 + 41));
    }
    v14 = (uint64_t *)((char *)a2 + 2408);
    v15 = *((_WORD *)a2 + 1204);
  }
  else
  {
    v14 = (uint64_t *)((char *)a2 + 2408);
    v15 = *((_WORD *)a2 + 1204);
    if (!*(_BYTE *)(this + 77434))
    {
      v39 = *((unsigned __int16 *)a2 + 1204);
      goto LABEL_61;
    }
    LOWORD(v4) = *(_WORD *)(this + 77432);
  }
  v31 = (unsigned __int16)v4;
  v32 = v15 - v4;
  v33 = (v15 - v4) ^ 0x8000;
  LOWORD(v4) = v4 - v15;
  v34 = v31 >= v15;
  if (v31 <= v15)
    v35 = v32;
  else
    v35 = v33;
  v36 = !v34;
  if (!v34)
    LOWORD(v4) = v4 ^ 0x8000;
  LODWORD(v4) = (unsigned __int16)v4;
  if (v35 < (unsigned __int16)v4)
    LODWORD(v4) = v35;
  if ((_DWORD)v4 == 0x4000)
    v37 = v36;
  else
    v37 = v35 <= 0x4000u;
  if (v37)
    v38 = v35;
  else
    v38 = v35 - 0x8000;
  v39 = v38 + *v3;
LABEL_61:
  *v3 = v39;
  *(_WORD *)(this + 77432) = v15;
  *(_BYTE *)(this + 77434) = 1;
  v40 = *((_QWORD *)a2 + 24);
  if ((v40 & 0xFF00000000) == 0)
  {
LABEL_67:
    __break(1u);
    return this;
  }
  v41 = 5 * v39 + (int)v40;
  *v14 = v41;
  if ((a3 & 1) != 0)
  {
    v42 = *((_QWORD *)a2 + 41);
    if ((unint64_t)(v42 + 1) <= 5)
    {
      *((_QWORD *)a2 + v42 + 42) = v41 - 1;
      *((_QWORD *)a2 + 41) = v42 + 1;
    }
  }
  return this;
}

void webrtc::RtpVp9RefFinder::FrameReceivedVp9(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unsigned __int16 v13;
  _BOOL4 v14;
  int v15;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  unsigned __int16 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  int v25;
  unsigned int v26;
  unsigned __int16 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  unsigned __int16 v37;
  uint64_t v38;
  unsigned __int16 v39;
  unsigned __int16 v40;

  v40 = a2;
  v9 = *(unsigned __int16 *)(a3 + 8);
  v10 = *(uint64_t **)a3;
  if (**(_QWORD **)a3 >= 0xFFuLL)
    v11 = 255;
  else
    v11 = **(_QWORD **)a3;
  if (a2 != v9)
  {
    LOWORD(v12) = v9 - a2;
    if (v9 < a2)
      LOWORD(v12) = (v9 - a2) ^ 0x8000;
    v12 = (unsigned __int16)v12;
    v13 = a2 - v9;
    if (a2 < v9)
      v13 = (a2 - v9) ^ 0x8000;
    if (v13 < (unsigned __int16)v12)
      v12 = v13;
    v14 = v13 <= 0x4000u;
    v15 = v12 == 0x4000 ? v9 < a2 : v14;
    if (v15 == 1)
    {
      if (v9 < 0x7FFF)
        v17 = 1;
      else
        v17 = -32767;
      v18 = v17 + v9;
      if (v17 + v9 == a2)
      {
LABEL_32:
        *(_WORD *)(a3 + 8) = v18;
        return;
      }
      v19 = *((unsigned __int16 *)v10 + 769);
      v20 = v9 >= v19;
      v21 = v9 - v19;
      if (!v20)
        v21 ^= 0x8000u;
      v22 = v21 % (unsigned __int16)v11;
      v23 = a1 + 77304;
      while (1)
      {
        if (v22 + 1 == v11)
          v22 = 0;
        else
          ++v22;
        if (v22 >= 0xFF)
        {
          v36 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/rtp_vp9_ref_finder.cc", 261, "gof_idx < kMaxVp9FramesInGof", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v38);
          webrtc::RtpVp9RefFinder::ClearTo((webrtc::RtpVp9RefFinder *)v36, v37);
          return;
        }
        if (*(unsigned __int8 *)(*(_QWORD *)a3 + v22 + 8) >= 5uLL)
          break;
        v24 = (uint64_t **)(v23 + 24 * *(unsigned __int8 *)(*(_QWORD *)a3 + v22 + 8));
        v39 = v18;
        std::__tree<unsigned short,webrtc::DescendingSeqNumComp<unsigned short,(unsigned short)32768>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>(v24, &v39, &v39);
        if (v18 < 0x7FFF)
          v25 = 1;
        else
          v25 = -32767;
        v18 += v25;
        if (v18 == a2)
        {
          LOWORD(v18) = a2;
          goto LABEL_32;
        }
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        return;
LABEL_38:
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/rtp_vp9_ref_finder.cc");
      return;
    }
  }
  v26 = *((unsigned __int16 *)v10 + 769);
  v20 = a2 >= v26;
  v27 = a2 - v26;
  if (!v20)
    v27 ^= 0x8000u;
  v28 = *((unsigned __int8 *)v10 + v27 % (unsigned __int16)v11 + 8);
  if (v28 < 5)
  {
    std::__tree<unsigned short,webrtc::DescendingSeqNumComp<unsigned short,(unsigned short)32768>,std::allocator<unsigned short>>::__erase_unique<unsigned short>((uint64_t **)(a1 + 24 * v28 + 77304), &v40);
    return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    goto LABEL_38;
}

int64x2_t *webrtc::RtpVp9RefFinder::ClearTo(int64x2_t *this, unsigned int a2)
{
  int64x2_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;

  v3 = this;
  v4 = this[2].u64[0];
  v5 = this->i64[1];
  v6 = this[1].i64[0];
  v7 = v5 + 8 * (v4 >> 8);
  if (v6 == v5)
    v8 = 0;
  else
    v8 = *(_QWORD *)v7 + 16 * v4;
LABEL_5:
  v10 = v8;
  while (v6 != v5)
  {
    v11 = v3[2].i64[1] + v3[2].i64[0];
    if (v10 == *(_QWORD *)(v5 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v11)
      return this;
LABEL_11:
    v12 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 8) + 4404);
    if (a2 != v12)
    {
      v13 = a2 - v12;
      v14 = a2 >= v12;
      v15 = a2 - v12;
      v16 = v15 != 0 && v14;
      v17 = (v15 & 0x8000u) == 0;
      if (v13 == 0x8000)
        v17 = v16;
      if (v17)
      {
        this = std::deque<webrtc::RtpVp8RefFinder::UnwrappedTl0Frame>::erase(v3, (char *)v7, v8);
        v7 = (uint64_t)this;
        v8 = v18;
        v5 = v3->i64[1];
        v6 = v3[1].i64[0];
        goto LABEL_5;
      }
    }
    v8 += 16;
    v10 += 16;
    if (*(_QWORD *)v7 + 4096 == v8)
    {
      v9 = *(_QWORD *)(v7 + 8);
      v7 += 8;
      v8 = v9;
      goto LABEL_5;
    }
  }
  if (v10)
    goto LABEL_11;
  return this;
}

void std::deque<webrtc::RtpVp9RefFinder::UnwrappedTl0Frame>::__add_front_capacity(uint64_t a1)
{
  char *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  BOOL v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  __int128 *v33;
  _OWORD *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  int64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;

  v2 = *(char **)(a1 + 8);
  v3 = *(char **)(a1 + 16);
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 32 * (v3 - v2) - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x100)
  {
    *(_QWORD *)(a1 + 32) = v6 + 256;
    v67 = *((_QWORD *)v3 - 1);
    *(_QWORD *)(a1 + 16) = v3 - 8;
    std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front((void **)a1, &v67);
    return;
  }
  v7 = *(char **)(a1 + 24);
  v8 = *(char **)a1;
  v9 = (uint64_t)&v7[-*(_QWORD *)a1];
  if (v4 < v9)
  {
    v10 = operator new(0x1000uLL);
    v11 = v10;
    if (v2 != v8)
    {
      *((_QWORD *)v2 - 1) = v10;
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)(a1 + 8) - 8;
      *(_QWORD *)(a1 + 8) = v13;
      if (v12 - v13 == 8)
      {
LABEL_10:
        *(_QWORD *)(a1 + 32) = 128;
        return;
      }
LABEL_33:
      *(_QWORD *)(a1 + 32) += 256;
      return;
    }
    if (v3 == v7)
    {
      v22 = (v3 - v8) >> 2;
      if (v3 == v2)
        v22 = 1;
      if (v22 >> 61)
        goto LABEL_67;
      v23 = v22 >> 2;
      v24 = 8 * v22;
      v25 = (char *)operator new(8 * v22);
      v26 = &v25[8 * v23];
      v27 = v3 == v2;
      v3 = v26;
      if (!v27)
      {
        v3 = &v26[v4 & 0xFFFFFFFFFFFFFFF8];
        v28 = &v25[8 * v23];
        v29 = v2;
        if (v4 - 8 < 0x38)
          goto LABEL_70;
        v30 = &v25[8 * v23];
        v28 = v30;
        v29 = v2;
        if ((unint64_t)(v30 - v2) < 0x20)
          goto LABEL_70;
        v31 = ((v4 - 8) >> 3) + 1;
        v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
        v28 = &v26[v32];
        v29 = &v2[v32];
        v33 = (__int128 *)(v2 + 16);
        v34 = v30 + 16;
        v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v36 = *v33;
          *(v34 - 1) = *(v33 - 1);
          *v34 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 4;
        }
        while (v35);
        if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_70:
          do
          {
            v37 = *(_QWORD *)v29;
            v29 += 8;
            *(_QWORD *)v28 = v37;
            v28 += 8;
          }
          while (v28 != v3);
        }
      }
      *(_QWORD *)a1 = v25;
      *(_QWORD *)(a1 + 8) = v26;
      *(_QWORD *)(a1 + 16) = v3;
      *(_QWORD *)(a1 + 24) = &v25[v24];
      if (v2)
      {
        operator delete(v2);
        v3 = *(char **)(a1 + 16);
      }
    }
    if (v3)
    {
      *(_QWORD *)v3 = v11;
      v38 = *(uint64_t **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v38 + 1;
      v67 = *v38;
      *(_QWORD *)(a1 + 16) = v38;
      std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front((void **)a1, &v67);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_10;
      goto LABEL_33;
    }
LABEL_66:
    __break(1u);
LABEL_67:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v14 = v9 >> 2;
  if (v7 == v8)
    v15 = 1;
  else
    v15 = v14;
  if (v15 >> 61)
    goto LABEL_67;
  v16 = (char *)operator new(8 * v15);
  v17 = operator new(0x1000uLL);
  v18 = v17;
  if (!v15)
  {
    v39 = (char *)operator new(8uLL);
    v19 = v39 + 8;
    operator delete(v16);
    v2 = *(char **)(a1 + 8);
    v40 = *(char **)(a1 + 16);
    v16 = v39;
    *(_QWORD *)v39 = v18;
    v20 = v39 + 8;
    v21 = v39;
    if (v2 == v40)
      goto LABEL_35;
    while (1)
    {
LABEL_40:
      if (v20 != v19)
        goto LABEL_58;
      if (v16 > v21)
      {
        v42 = (v16 - v21) >> 3;
        if (v42 >= -1)
          v43 = v42 + 1;
        else
          v43 = v42 + 2;
        v44 = v43 >> 1;
        v45 = &v16[-8 * (v43 >> 1)];
        v46 = v20;
        v47 = v20 - v16;
        if (v20 != v16)
        {
          memmove(v45, v16, v20 - v16);
          v46 = v16;
        }
        v19 = v20;
        v20 = &v45[v47];
        v16 = &v46[-8 * v44];
        if (!&v45[v47])
          goto LABEL_66;
        goto LABEL_58;
      }
      v48 = (v20 - v21) >> 2;
      if (v20 == v21)
        v48 = 1;
      if (v48 >> 61)
        goto LABEL_67;
      v49 = v48 >> 2;
      v50 = 8 * v48;
      v51 = (char *)operator new(8 * v48);
      v52 = v51;
      v53 = &v51[8 * v49];
      v54 = v53;
      v55 = v20 - v16;
      if (v20 != v16)
      {
        v54 = &v53[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = v55 - 8;
        if (v56 < 0x38 || (unint64_t)(&v51[8 * v49] - v16) < 0x20)
        {
          v57 = &v51[8 * v49];
          v58 = v16;
          do
          {
LABEL_54:
            v59 = *(_QWORD *)v58;
            v58 += 8;
            *(_QWORD *)v57 = v59;
            v57 += 8;
          }
          while (v57 != v54);
          goto LABEL_55;
        }
        v61 = (v56 >> 3) + 1;
        v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
        v57 = &v53[v62];
        v58 = &v16[v62];
        v63 = (__int128 *)(v16 + 16);
        v64 = &v51[8 * v49 + 16];
        v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v66 = *v63;
          *((_OWORD *)v64 - 1) = *(v63 - 1);
          *(_OWORD *)v64 = v66;
          v63 += 2;
          v64 += 32;
          v65 -= 4;
        }
        while (v65);
        if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_54;
      }
LABEL_55:
      if (v21)
        operator delete(v21);
      v21 = v52;
      v19 = &v52[v50];
      v20 = v54;
      v16 = v53;
      if (!v54)
        goto LABEL_66;
LABEL_58:
      v60 = *(_QWORD *)v2;
      v2 += 8;
      *(_QWORD *)v20 = v60;
      v20 += 8;
      if (v2 == *(char **)(a1 + 16))
        goto LABEL_35;
    }
  }
  v19 = &v16[8 * v15];
  *(_QWORD *)v16 = v17;
  v20 = v16 + 8;
  v21 = v16;
  if (v2 != v3)
    goto LABEL_40;
LABEL_35:
  v41 = *(void **)a1;
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 24) = v19;
  if (v20 - v16 != 8)
  {
    *(_QWORD *)(a1 + 32) += 256;
    if (!v41)
      return;
LABEL_65:
    operator delete(v41);
    return;
  }
  *(_QWORD *)(a1 + 32) = 128;
  if (v41)
    goto LABEL_65;
}

uint64_t webrtc::RttFilter::Update(uint64_t this, TimeDelta a2)
{
  uint64_t v2;
  uint64_t var0;
  unsigned int v4;
  double v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  TimeDelta v21;
  TimeDelta v22;

  v2 = this;
  if (!*(_BYTE *)this)
  {
    if (!a2.var0)
      return this;
    *(_BYTE *)this = 1;
  }
  if (a2.var0 >= 3000000)
    var0 = 3000000;
  else
    var0 = a2.var0;
  v4 = *(_DWORD *)(this + 32);
  v5 = 0.0;
  if (v4 >= 2)
    v5 = (double)(v4 - 1) / (double)v4;
  if (v4 + 1 < 0x23)
    v6 = v4 + 1;
  else
    v6 = 35;
  *(_DWORD *)(this + 32) = v6;
  v7 = *(_QWORD *)(this + 8);
  v8 = *(_QWORD *)(this + 16);
  v9 = llround(v5 * (double)v7);
  v10 = llround((1.0 - v5) * (double)var0);
  if (v9 == 0x7FFFFFFFFFFFFFFFLL || v10 == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(_QWORD *)(this + 8) = 0x7FFFFFFFFFFFFFFFLL;
    v12 = 0x8000000000000000;
  }
  else
  {
    if (v9 == 0x8000000000000000 || v10 == 0x8000000000000000)
    {
      *(_QWORD *)(this + 8) = 0x8000000000000000;
LABEL_29:
      v12 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_30:
      if (v12 % 0x3E8 <= 0x1F3)
        v16 = v12 / 0x3E8;
      else
        v16 = v12 / 0x3E8 + 1;
      goto LABEL_33;
    }
    v18 = v9 + v10;
    *(_QWORD *)(this + 8) = v18;
    if (v18 == 0x8000000000000000)
      goto LABEL_29;
    v12 = 0x8000000000000000;
    if (var0 != 0x8000000000000000 && v18 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v12 = var0 - v18;
      if ((uint64_t)(var0 - v18) >= 0)
        goto LABEL_30;
    }
  }
  v13 = -(uint64_t)v12;
  v14 = v13 / 0x3E8;
  if (v13 % 0x3E8 <= 0x1F4)
    v15 = 0;
  else
    v15 = -1;
  v16 = v15 - v14;
LABEL_33:
  v19 = (uint64_t)((1.0 - v5) * (double)(uint64_t)(v16 * v16) + v5 * (double)v8);
  v20 = *(_QWORD *)(this + 24);
  if (var0 > v20)
    v20 = var0;
  *(_QWORD *)(this + 16) = v19;
  *(_QWORD *)(this + 24) = v20;
  v21.var0 = var0;
  this = webrtc::RttFilter::JumpDetection((webrtc::RttFilter *)this, v21);
  if ((_DWORD)this)
  {
    v22.var0 = var0;
    return webrtc::RttFilter::DriftDetection(v2, v22);
  }
  else
  {
    *(_QWORD *)(v2 + 8) = v7;
    *(_QWORD *)(v2 + 16) = v8;
  }
  return this;
}

uint64_t webrtc::RttFilter::JumpDetection(webrtc::RttFilter *this, TimeDelta a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  double v8;
  unint64_t *v9;
  void *v10;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((_QWORD *)this + 1);
  v4 = v3 - a2.var0;
  if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL || v3 == 0x8000000000000000)
    v4 = 0x8000000000000000;
  if (v3 == 0x7FFFFFFFFFFFFFFFLL || a2.var0 == 0x8000000000000000)
    v7 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v8 = sqrt((double)*((uint64_t *)this + 2)) * 2.5 * 1000.0;
  if (v8 == INFINITY || v8 != -INFINITY && (v7 >= 0 ? (v13 = v7) : (v13 = -v7), v13 <= (uint64_t)v8))
  {
    v9 = (unint64_t *)((char *)this + 40);
    if ((*((_BYTE *)this + 40) & 1) == 0)
      goto LABEL_16;
    v10 = (void *)*((_QWORD *)this + 6);
LABEL_15:
    operator delete(v10);
    goto LABEL_16;
  }
  v14 = v7 >= 0;
  v9 = (unint64_t *)((char *)this + 40);
  v15 = *((_QWORD *)this + 5);
  if (v15 >= 2)
    goto LABEL_28;
  v16 = 0;
  while (1)
  {
    v17 = (_QWORD *)((char *)this + 48);
    if ((v15 & 1) == 0)
      goto LABEL_34;
    v15 = *((_QWORD *)this + 7);
    if (v16 == v15)
    {
      absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long>((uint64_t)this + 40, a2.var0);
      v15 = *v9;
      *((_BYTE *)this + 36) = v14;
      if (v15 >= 0xA)
        goto LABEL_35;
      return 0;
    }
    v17 = (_QWORD *)*v17;
    if (v17)
      goto LABEL_34;
    __break(1u);
LABEL_28:
    if (*((unsigned __int8 *)this + 36) != v14)
      break;
    v16 = v15 >> 1;
    if (v15 > 9)
      goto LABEL_36;
  }
  if ((v15 & 1) != 0)
    operator delete(*((void **)this + 6));
  v16 = 0;
  *((_QWORD *)this + 5) = 0;
  v17 = (_QWORD *)((char *)this + 48);
LABEL_34:
  v17[v16] = a2.var0;
  v15 = *v9 + 2;
  *v9 = v15;
  *((_BYTE *)this + 36) = v14;
  if (v15 < 0xA)
    return 0;
LABEL_35:
  v16 = v15 >> 1;
LABEL_36:
  v18 = 0;
  v19 = 0;
  v20 = (uint64_t *)((char *)this + 48);
  v10 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  if ((v15 & 1) != 0)
    v20 = (uint64_t *)v10;
  v21 = 8 * v16;
  do
  {
    v26 = *v20;
    if (*v20 > v19)
    {
      *((_QWORD *)this + 3) = v26;
      v22 = *v20;
      v19 = v26;
    }
    else
    {
      v22 = *v20;
    }
    v23 = v22 == 0x8000000000000000 || v18 == 0x8000000000000000;
    v24 = v22 + v18;
    if (v23)
      v24 = 0x8000000000000000;
    if (v22 == 0x7FFFFFFFFFFFFFFFLL)
      v25 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v18 == 0x7FFFFFFFFFFFFFFFLL)
      v18 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v18 = v25;
    *((_QWORD *)this + 1) = v18;
    ++v20;
    v21 -= 8;
  }
  while (v21);
  *((_QWORD *)this + 1) = llround((double)v18 / (double)v16);
  *((_DWORD *)this + 8) = 6;
  if ((v15 & 1) != 0)
    goto LABEL_15;
LABEL_16:
  *v9 = 0;
  return 1;
}

uint64_t webrtc::RttFilter::DriftDetection(uint64_t this, TimeDelta a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = this;
  v3 = sqrt((double)*(uint64_t *)(this + 16)) * 3.5 * 1000.0;
  v4 = 0x7FFFFFFFFFFFFFFFLL;
  if (v3 != INFINITY)
  {
    if (v3 == -INFINITY)
      v4 = 0x8000000000000000;
    else
      v4 = (uint64_t)v3;
  }
  v5 = *(_QWORD *)(this + 8);
  v6 = *(_QWORD *)(this + 24);
  v7 = v6 - v5;
  if (v5 == 0x7FFFFFFFFFFFFFFFLL || v6 == 0x8000000000000000)
    v7 = 0x8000000000000000;
  if (v5 == 0x8000000000000000)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v9 = v7;
  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  v11 = (unint64_t *)(this + 88);
  v10 = *(_QWORD *)(this + 88);
  if (v9 <= v4)
  {
    if ((v10 & 1) == 0)
    {
LABEL_44:
      *v11 = 0;
      return 1;
    }
    v16 = *(void **)(this + 96);
LABEL_43:
    operator delete(v16);
    goto LABEL_44;
  }
  v12 = v10 >> 1;
  if (v10 > 9)
  {
LABEL_22:
    v14 = 0;
    v15 = 0;
    v17 = (uint64_t *)(v2 + 96);
    v16 = *(void **)(v2 + 96);
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    if ((v10 & 1) != 0)
      v17 = (uint64_t *)v16;
    v18 = 8 * v12;
    do
    {
      v23 = *v17;
      if (*v17 > v15)
      {
        *(_QWORD *)(v2 + 24) = v23;
        v19 = *v17;
        v15 = v23;
      }
      else
      {
        v19 = *v17;
      }
      v20 = v19 == 0x8000000000000000 || v14 == 0x8000000000000000;
      v21 = v19 + v14;
      if (v20)
        v21 = 0x8000000000000000;
      if (v19 == 0x7FFFFFFFFFFFFFFFLL)
        v22 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v14 == 0x7FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v22;
      *(_QWORD *)(v2 + 8) = v14;
      ++v17;
      v18 -= 8;
    }
    while (v18);
    *(_QWORD *)(v2 + 8) = llround((double)v14 / (double)v12);
    *(_DWORD *)(v2 + 32) = 6;
    if ((v10 & 1) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
  v13 = (_QWORD *)(this + 96);
  if ((v10 & 1) == 0)
    goto LABEL_20;
  if (v12 == *(_QWORD *)(this + 104))
  {
    absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long>(this + 88, a2.var0);
    v10 = *v11;
    if (*v11 < 0xA)
      return 1;
LABEL_21:
    v12 = v10 >> 1;
    goto LABEL_22;
  }
  v13 = (_QWORD *)*v13;
  if (v13)
  {
LABEL_20:
    v13[v12] = a2.var0;
    v10 = *v11 + 2;
    *v11 = v10;
    if (v10 < 0xA)
      return 1;
    goto LABEL_21;
  }
  __break(1u);
  return this;
}

void webrtc::RtxReceiveStream::~RtxReceiveStream(webrtc::RtxReceiveStream *this)
{
  *(_QWORD *)this = &off_24C0BED78;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
}

{
  *(_QWORD *)this = &off_24C0BED78;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RtxReceiveStream::OnRtpPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  int64x2_t *v15;
  unsigned int *v16;
  unsigned int v17;
  const void *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  unsigned int v22;
  __int16 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  uint64_t v41;
  _QWORD v42[2];
  void *__p;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t *v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8) + 16))(v4 + 8, a2);
  v5 = *(_QWORD *)(a2 + 88);
  if (v5)
    v5 = *(_QWORD *)(v5 + 16) + *(_QWORD *)(a2 + 96);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = (unsigned __int8 *)(v5 + *(_QWORD *)(a2 + 16));
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  if (v6 >= 2)
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (v9)
    {
      v10 = *(unsigned __int8 *)(a2 + 1);
      v11 = a1 + 24;
      do
      {
        v12 = *(_DWORD *)(v9 + 28);
        v13 = v12 < v10;
        if (v12 >= v10)
          v14 = (uint64_t *)v9;
        else
          v14 = (uint64_t *)(v9 + 8);
        if (!v13)
          v11 = v9;
        v9 = *v14;
      }
      while (*v14);
      if (v11 != a1 + 24 && *(_DWORD *)(v11 + 28) <= v10)
      {
        v41 = 0;
        v42[0] = 0;
        *(_QWORD *)((char *)v42 + 6) = 0;
        v44 = 0;
        v45 = 0;
        __p = 0;
        v15 = (int64x2_t *)operator new();
        *v15 = vdupq_n_s64(0x5DCuLL);
        v15[1].i64[0] = operator new[]();
        v15[1].i32[2] = 0;
        v16 = &v15[1].u32[2];
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        v46 = 0;
        v47 = v15;
        if (v6 <= 2)
          v18 = 0;
        else
          v18 = v8 + 2;
        v48 = xmmword_208F1A8C0;
        if (v6 - 2 >= v6)
          v19 = v6;
        else
          v19 = v6 - 2;
        LOWORD(v37) = 0;
        WORD2(v37) = 0;
        v38 = 0;
        v39 = 12;
        v40 = 0;
        BYTE2(v37) = 0;
        v44 = 0;
        if (v6 <= 2)
          v20 = 0;
        else
          v20 = v19;
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)&v47, (uint64_t *)0x5DC);
        v21 = v47[1].i64[0] + v48;
        *(_DWORD *)(v21 + 8) = 0;
        *(_QWORD *)v21 = 0;
        rtc::CopyOnWriteBuffer::SetSize((uint64_t *)&v47, (uint64_t *)0xC);
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)&v47, (uint64_t *)(v47->i64[1] - v48));
        *(_BYTE *)(v47[1].i64[0] + v48) = 0x80;
        v52 = 0;
        v49 = 0x8000000000000000;
        v50 = 0;
        v51 = 0;
        webrtc::RtpPacket::CopyHeaderFrom(&v37, a2);
        HIDWORD(v38) = *(_DWORD *)(a1 + 40);
        v22 = HIDWORD(v38);
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)&v47, (uint64_t *)(v47->i64[1] - v48));
        *(_DWORD *)(v47[1].i64[0] + v48 + 8) = bswap32(v22);
        LOWORD(v22) = *v8;
        v23 = v8[1];
        WORD2(v37) = v23 | ((_WORD)v22 << 8);
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)&v47, (uint64_t *)(v47->i64[1] - v48));
        v24 = v47[1].i64[0] + v48;
        *(_BYTE *)(v24 + 2) = v22;
        *(_BYTE *)(v24 + 3) = v23;
        BYTE1(v37) = *(_BYTE *)(v11 + 32);
        v25 = *(_BYTE *)(v47[1].i64[0] + v48 + 1) & 0x80 | BYTE1(v37);
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)&v47, (uint64_t *)(v47->i64[1] - v48));
        *(_BYTE *)(v47[1].i64[0] + v48 + 1) = v25;
        v51 = 1;
        v49 = *(_QWORD *)(a2 + 112);
        v40 = 0;
        rtc::CopyOnWriteBuffer::SetSize((uint64_t *)&v47, (uint64_t *)v39);
        if (v47)
          rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)&v47, (uint64_t *)(v47->i64[1] - v48));
        v40 = v20;
        rtc::CopyOnWriteBuffer::SetSize((uint64_t *)&v47, (uint64_t *)(v39 + v20));
        v26 = v39;
        v27 = (uint64_t)v47;
        if (v47)
        {
          rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)&v47, (uint64_t *)(v47->i64[1] - v48));
          v27 = v47[1].i64[0] + v48;
        }
        memcpy((void *)(v27 + v26), v18, v20);
        (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v37);
        v28 = v52;
        if (v52)
        {
          v29 = (unsigned int *)(v52 + 8);
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
        v32 = (uint64_t)v47;
        if (v47)
        {
          v33 = &v47[1].u32[2];
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v36 = *(_QWORD *)(v32 + 16);
            *(_QWORD *)(v32 + 16) = 0;
            if (v36)
              MEMORY[0x20BD0ADD4](v36, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v32, 0x1010C40EE34DA14);
          }
        }
        if (__p)
        {
          v44 = __p;
          operator delete(__p);
        }
      }
    }
  }
}

void dcsctp::SackChunk::Parse(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  _BYTE *v26;
  _WORD *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t **v47;
  uint64_t **v48;
  unsigned int v49;
  _DWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  _QWORD *v54;
  _QWORD **v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t v60;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD **v65;
  _QWORD *v66;
  uint64_t v67;
  void (**v68)(dcsctp::SackChunk *__hidden);
  unint64_t v69;
  void *__p;
  void *v71;
  uint64_t v72;
  _QWORD **v73;
  _QWORD *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t *v77;
  uint64_t v78;

  if (a2)
    v7 = a1;
  else
    v7 = 0;
  if (a2 < 0x10
    || *(_BYTE *)v7 != 3
    || ((v8 = *(unsigned __int8 *)(v7 + 3), v9 = v8 | (*(unsigned __int8 *)(v7 + 2) << 8), (v8 & 3) == 0)
      ? (v10 = v9 >= 0x10)
      : (v10 = 0),
        v10 ? (v11 = a2 >= v9) : (v11 = 0),
        v11 ? (v12 = a2 - v9 >= 4) : (v12 = 1),
        v12
     || (v13 = __rev16(*(unsigned __int16 *)(v7 + 12)),
         v64 = __rev16(*(unsigned __int16 *)(v7 + 14)),
         v9 - 16 != 4 * (v64 + v13))))
  {
    *(_BYTE *)a7 = 0;
    *(_BYTE *)(a7 + 64) = 0;
    return;
  }
  LODWORD(v60) = *(_DWORD *)(v7 + 8);
  HIDWORD(v60) = *(_DWORD *)(v7 + 4);
  if ((_DWORD)v13)
  {
    v14 = (char *)operator new(4 * v13);
    v15 = 0;
    v16 = 0;
    v17 = &v14[4 * v13];
    v18 = v14;
    v62 = v13;
    while (1)
    {
      while (1)
      {
        if (v16 + 20 > v9)
          goto LABEL_85;
        v19 = v9 - (v16 + 16);
        if (v19 >= 4)
          v19 = 4;
        if (v19 <= 3)
          goto LABEL_86;
        v20 = v9;
        v21 = v7;
        v22 = (unsigned __int16 *)(v7 + v16 + 16);
        v23 = bswap32(*v22) >> 16;
        v24 = bswap32(v22[1]) >> 16;
        if (v18 >= v17)
          break;
        *(_WORD *)v18 = v23;
        *((_WORD *)v18 + 1) = v24;
        v18 += 4;
        v7 = v21;
        v9 = v20;
        v16 += 4;
        if (++v15 == (_DWORD)v13)
          goto LABEL_53;
      }
      v13 = (v18 - v14) >> 2;
      v25 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        goto LABEL_89;
      if ((v17 - v14) >> 1 > v25)
        v25 = (v17 - v14) >> 1;
      if ((unint64_t)(v17 - v14) >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v25)
        goto LABEL_87;
      if (v25 >> 62)
        goto LABEL_88;
      v63 = 4 * v25;
      v26 = operator new(4 * v25);
      v27 = &v26[4 * v13];
      *v27 = v23;
      v27[1] = v24;
      if (v18 != v14)
        break;
      v30 = &v26[4 * v13];
      v7 = v21;
      v9 = v20;
      LODWORD(v13) = v62;
      v31 = v63;
LABEL_44:
      v17 = &v26[v31];
      v18 = (char *)(v27 + 2);
      if (v14)
      {
        v34 = v17;
        operator delete(v14);
        v17 = v34;
      }
      v14 = v30;
      v16 += 4;
      if (++v15 == (_DWORD)v13)
        goto LABEL_53;
    }
    v28 = v18 - v14 - 4;
    v7 = v21;
    if (v28 >= 0xBC)
    {
      v32 = (v18 - 4 - v14) & 0xFFFFFFFFFFFFFFFCLL;
      v9 = v20;
      if (&v26[v18 - v14 - 4 - v32] <= &v26[v18 - v14 - 4]
        && &v18[-v32 - 4] <= v18 - 4
        && (unint64_t)(v14 - v26) >= 0x20)
      {
        v35 = (v28 >> 2) + 1;
        v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
        v29 = &v18[-v36];
        v30 = (char *)&v27[v36 / 0xFFFFFFFFFFFFFFFELL];
        v37 = &v26[4 * v13 - 16];
        v38 = v18 - 16;
        v39 = v35 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *v37 = v40;
          v37 -= 2;
          v38 -= 32;
          v39 -= 8;
        }
        while (v39);
        LODWORD(v13) = v62;
        v31 = v63;
        if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_44;
        goto LABEL_43;
      }
      v29 = v18;
      v30 = &v26[4 * v13];
    }
    else
    {
      v29 = v18;
      v30 = &v26[4 * v13];
      v9 = v20;
    }
    LODWORD(v13) = v62;
    v31 = v63;
    do
    {
LABEL_43:
      v33 = *((_DWORD *)v29 - 1);
      v29 -= 4;
      *((_DWORD *)v30 - 1) = v33;
      v30 -= 4;
    }
    while (v29 != v14);
    goto LABEL_44;
  }
  v18 = 0;
  v14 = 0;
  v16 = 0;
LABEL_53:
  v77 = 0;
  v78 = 0;
  v76 = (unsigned int *)&v77;
  if ((_DWORD)v64)
  {
    v41 = 0;
    while (v16 + 20 <= v9)
    {
      v43 = v9 - (v16 + 16);
      if (v43 >= 4)
        v43 = 4;
      if (v43 <= 3)
        goto LABEL_86;
      v44 = v7;
      v45 = bswap32(*(_DWORD *)(v7 + v16 + 16));
      v46 = v77;
      v47 = &v77;
      v48 = &v77;
      if (v77)
      {
        while (1)
        {
          while (1)
          {
            v48 = (uint64_t **)v46;
            v49 = *((_DWORD *)v46 + 7);
            if (v45 >= v49)
              break;
            v46 = *v48;
            v47 = v48;
            if (!*v48)
              goto LABEL_69;
          }
          if (v49 >= v45)
            break;
          v46 = v48[1];
          if (!v46)
          {
            v47 = v48 + 1;
            goto LABEL_69;
          }
        }
      }
      else
      {
LABEL_69:
        v50 = operator new(0x20uLL);
        v50[7] = v45;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
        *((_QWORD *)v50 + 2) = v48;
        *v47 = (uint64_t *)v50;
        if (*(_QWORD *)v76)
        {
          v76 = *(unsigned int **)v76;
          v42 = *v47;
        }
        else
        {
          v42 = (uint64_t *)v50;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v77, v42);
        ++v78;
      }
      v16 += 4;
      ++v41;
      v7 = v44;
      if (v41 == (_DWORD)v64)
        goto LABEL_71;
    }
LABEL_85:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 80, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a3, a4, a5, a6, v60);
LABEL_86:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 55, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a3, a4, a5, a6, v60);
LABEL_87:
    __break(1u);
LABEL_88:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
LABEL_71:
  v51 = v18 - v14;
  if (v18 == v14)
  {
    v52 = 0;
    v53 = 0;
  }
  else
  {
    if (v51 < 0)
LABEL_89:
      abort();
    v52 = (char *)operator new(v18 - v14);
    v53 = &v52[4 * (v51 >> 2)];
    memcpy(v52, v14, v18 - v14);
  }
  v66 = 0;
  v67 = 0;
  v65 = &v66;
  std::set<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>::insert[abi:sn180100]<std::__tree_const_iterator<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,std::__tree_node<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,void *> *,long>>((uint64_t *)&v65, v76, (unsigned int *)&v77);
  v68 = &off_24C0BEDA0;
  v69 = _byteswap_uint64(v60);
  v55 = v65;
  v54 = v66;
  v73 = v65;
  v74 = v66;
  v56 = v67;
  v75 = v67;
  if (v67)
  {
    v66[2] = &v74;
    v65 = &v66;
    v66 = 0;
    v67 = 0;
  }
  else
  {
    v73 = &v74;
    v55 = &v74;
  }
  v57 = v69;
  *(_QWORD *)a7 = &off_24C0BEDA0;
  *(_QWORD *)(a7 + 8) = v57;
  *(_QWORD *)(a7 + 16) = v52;
  *(_QWORD *)(a7 + 24) = v53;
  v71 = 0;
  v72 = 0;
  __p = 0;
  *(_QWORD *)(a7 + 32) = v53;
  *(_QWORD *)(a7 + 40) = v55;
  *(_QWORD *)(a7 + 48) = v54;
  v58 = a7 + 48;
  *(_QWORD *)(a7 + 56) = v56;
  if (v56)
  {
    v54[2] = v58;
    v73 = &v74;
    v74 = 0;
    v75 = 0;
    *(_BYTE *)(a7 + 64) = 1;
    v68 = &off_24C0BEDA0;
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v73, 0);
    v59 = __p;
    if (!__p)
      goto LABEL_81;
    goto LABEL_80;
  }
  *(_QWORD *)(a7 + 40) = v58;
  *(_BYTE *)(a7 + 64) = 1;
  v68 = &off_24C0BEDA0;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v73, v54);
  v59 = __p;
  if (__p)
  {
LABEL_80:
    v71 = v59;
    operator delete(v59);
  }
LABEL_81:
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v65, v66);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v76, v77);
  if (v14)
    operator delete(v14);
}

void dcsctp::SackChunk::~SackChunk(dcsctp::SackChunk *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0BEDA0;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0BEDA0;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::SackChunk::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  std::string *v31;
  uint64_t v32;

  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = (v10 << 30 >> 30) + 4 * (int)v11;
  v13 = *(char **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v15 = v12 + 16;
  v16 = v12 + 16 + v14;
  if (v14 >= v16)
  {
    if (v14 > v16)
      *(_QWORD *)(a2 + 8) = &v13[v16];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v12 + 16);
    v13 = *(char **)a2;
  }
  v17 = &v13[v14];
  *v17 = 3;
  v17[2] = BYTE1(v15);
  v17[3] = v15;
  if (v12 >= 0xFFFFFFFFFFFFFFF0)
    goto LABEL_29;
  v18 = *(char **)a2;
  v19 = *(_QWORD *)a2 + v14;
  *(_DWORD *)(v19 + 4) = bswap32(*(_DWORD *)(a1 + 8));
  v20 = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(v19 + 8) = HIBYTE(v20);
  *(_BYTE *)(v19 + 9) = BYTE2(v20);
  *(_BYTE *)(v19 + 10) = BYTE1(v20);
  *(_BYTE *)(v19 + 11) = v20;
  *(_BYTE *)(v19 + 12) = (unsigned __int16)(v10 >> 2) >> 8;
  *(_BYTE *)(v19 + 13) = (unint64_t)v10 >> 2;
  *(_BYTE *)(v19 + 14) = BYTE1(v11);
  *(_BYTE *)(v19 + 15) = v11;
  if ((int)(v10 >> 2) >= 1)
  {
    v21 = 0;
    v22 = 0;
    v23 = (uint64_t)&v18[v14 + 16];
    while (v22 + 20 <= v15)
    {
      if (v12 <= 3)
        goto LABEL_29;
      v24 = *(_QWORD *)(a1 + 16);
      if (v21 >= (*(_QWORD *)(a1 + 24) - v24) >> 2
        || (*(_WORD *)(v23 + v22) = bswap32(*(unsigned __int16 *)(v24 + v22)) >> 16,
            v25 = *(_QWORD *)(a1 + 16),
            v21 >= (*(_QWORD *)(a1 + 24) - v25) >> 2))
      {
        __break(1u);
        break;
      }
      *(_WORD *)(v23 + v22 + 2) = bswap32(*(unsigned __int16 *)(v25 + v22 + 2)) >> 16;
      v22 += 4;
      ++v21;
      v12 -= 4;
      if ((v10 & 0x3FFFFFFFCLL) == v22)
      {
        v26 = *(_QWORD **)(a1 + 40);
        v27 = (_QWORD *)(a1 + 48);
        if (v26 != (_QWORD *)(a1 + 48))
          goto LABEL_18;
        return;
      }
    }
LABEL_28:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 84, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v32);
LABEL_29:
    v31 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v32);
    dcsctp::SackChunk::ToString((dcsctp::SackChunk *)v31);
    return;
  }
  v22 = 0;
  v26 = *(_QWORD **)(a1 + 40);
  v27 = (_QWORD *)(a1 + 48);
  if (v26 != (_QWORD *)(a1 + 48))
  {
LABEL_18:
    while (v22 + 20 <= v15)
    {
      if (v15 <= v22 + 16 || v15 - (v22 + 16) <= 3)
        goto LABEL_29;
      *(_DWORD *)(v19 + v22 + 16) = bswap32(*((_DWORD *)v26 + 7));
      v28 = (_QWORD *)v26[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v26[2];
          v30 = *v29 == (_QWORD)v26;
          v26 = v29;
        }
        while (!v30);
      }
      v22 += 4;
      v26 = v29;
      if (v29 == v27)
        return;
    }
    goto LABEL_28;
  }
}

void dcsctp::SackChunk::ToString(dcsctp::SackChunk *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  int v6;
  std::string::size_type v7;
  std::string::size_type size;
  unsigned __int16 *v9;
  unsigned __int16 *i;
  std::string *v11;
  std::string::size_type v12;
  std::string::size_type v14;
  int v15;
  int v16;
  int v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  char *v21;
  std::string::size_type v23;
  std::string *v24;
  std::string *v25;
  int v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string::size_type v33;
  char *v34;
  char *v35;
  std::string *v36;
  char *v37;
  std::string::size_type v38;
  int v39;
  std::string::size_type v40;
  std::string::size_type v41;
  char *v42;
  std::string *v43;
  std::string::size_type v45;
  char *v46;
  BOOL v47;
  char *v48;
  char *v49;
  std::string::size_type v50;
  BOOL v51;
  std::string *p_p_new_stuff;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v57;
  std::string __p_new_stuff;
  std::string v60;
  std::string v61;

  memset(&v60, 0, sizeof(v60));
  if (&v60 <= (std::string *)"SACK, cum_ack_tsn="
    && (char *)&v60.__r_.__value_.__r.__words[2] + 2 > "SACK, cum_ack_tsn=")
  {
    goto LABEL_146;
  }
  strcpy((char *)&v60, "SACK, cum_ack_tsn=");
  *((_BYTE *)&v60.__r_.__value_.__s + 23) = 18;
  v4 = rtc::StringBuilder::operator<<(&v60, *((_DWORD *)this + 2));
  v5 = v4;
  v6 = SHIBYTE(v4->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = 22;
  else
    v7 = (v4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v6 >= 0)
    size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  else
    size = v4->__r_.__value_.__l.__size_;
  if (v7 - size >= 9)
  {
    if (v6 >= 0)
      v11 = v4;
    else
      v11 = (std::string *)v4->__r_.__value_.__r.__words[0];
    v12 = (std::string::size_type)v11 + size;
    if ((char *)v11 + size <= ", a_rwnd=" && (char *)&v11->__r_.__value_.__r.__words[1] + size + 1 > ", a_rwnd=")
      goto LABEL_146;
    *(_BYTE *)(v12 + 8) = 61;
    *(_QWORD *)v12 = *(_QWORD *)", a_rwnd=";
    v14 = size + 9;
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
      v4->__r_.__value_.__l.__size_ = v14;
    else
      *((_BYTE *)&v4->__r_.__value_.__s + 23) = v14 & 0x7F;
    v11->__r_.__value_.__s.__data_[v14] = 0;
    rtc::StringBuilder::operator<<(v4, *((_DWORD *)this + 3));
    v9 = (unsigned __int16 *)*((_QWORD *)this + 2);
    for (i = (unsigned __int16 *)*((_QWORD *)this + 3); v9 != i; v9 += 2)
    {
LABEL_28:
      v15 = *((_DWORD *)this + 2);
      v16 = *v9;
      v17 = v9[1];
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = 22;
      else
        v18 = (v60.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      else
        v19 = v60.__r_.__value_.__l.__size_;
      if (v18 - v19 >= 6)
      {
        v20 = &v60;
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v20 = (std::string *)v60.__r_.__value_.__r.__words[0];
        v21 = (char *)v20 + v19;
        if ((char *)v20 + v19 <= ", gap=" && (char *)v20->__r_.__value_.__r.__words + v19 + 6 > ", gap=")
          goto LABEL_146;
        *((_WORD *)v21 + 2) = 15728;
        *(_DWORD *)v21 = 1634148396;
        v23 = v19 + 6;
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          v60.__r_.__value_.__l.__size_ = v19 + 6;
        else
          *((_BYTE *)&v60.__r_.__value_.__s + 23) = v23 & 0x7F;
        v20->__r_.__value_.__s.__data_[v23] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(&v60, v18, v19 - v18 + 6, v19, v19, 0, 6uLL, ", gap=");
      }
      v24 = rtc::StringBuilder::operator<<(&v60, v15 + v16);
      v25 = v24;
      v26 = SHIBYTE(v24->__r_.__value_.__r.__words[2]);
      if (v26 >= 0)
        v27 = 22;
      else
        v27 = (v24->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v26 >= 0)
        v28 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
      else
        v28 = v24->__r_.__value_.__l.__size_;
      if (v27 - v28 < 2)
      {
        std::string::__grow_by_and_replace(v24, v27, v28 - v27 + 2, v28, v28, 0, 2uLL, "--");
      }
      else
      {
        if (v26 >= 0)
          v29 = v24;
        else
          v29 = (std::string *)v24->__r_.__value_.__r.__words[0];
        if ((char *)v29 + v28 <= "--" && &v29->__r_.__value_.__s.__data_[v28 + 2] > "--")
          goto LABEL_146;
        *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + v28) = 11565;
        v31 = v28 + 2;
        if (SHIBYTE(v24->__r_.__value_.__r.__words[2]) < 0)
          v24->__r_.__value_.__l.__size_ = v31;
        else
          *((_BYTE *)&v24->__r_.__value_.__s + 23) = v31 & 0x7F;
        v29->__r_.__value_.__s.__data_[v31] = 0;
      }
      rtc::StringBuilder::operator<<(v25, v15 + v17);
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v4, v7, size - v7 + 9, size, size, 0, 9uLL, ", a_rwnd=");
    rtc::StringBuilder::operator<<(v5, *((_DWORD *)this + 3));
    v9 = (unsigned __int16 *)*((_QWORD *)this + 2);
    i = (unsigned __int16 *)*((_QWORD *)this + 3);
    if (v9 != i)
      goto LABEL_28;
  }
  if (!*((_QWORD *)this + 7))
    goto LABEL_143;
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = 22;
  else
    v32 = (v60.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  else
    v33 = v60.__r_.__value_.__l.__size_;
  if (v32 - v33 >= 0xB)
  {
    v36 = &v60;
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)v60.__r_.__value_.__r.__words[0];
    v37 = (char *)v36 + v33;
    if ((char *)v36 + v33 <= ", dup_tsns=" && v37 + 11 > ", dup_tsns=")
      goto LABEL_146;
    *(_DWORD *)(v37 + 7) = 1030975091;
    *(_QWORD *)v37 = *(_QWORD *)", dup_tsns=";
    v38 = v33 + 11;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      v60.__r_.__value_.__l.__size_ = v33 + 11;
    else
      *((_BYTE *)&v60.__r_.__value_.__s + 23) = v38 & 0x7F;
    v36->__r_.__value_.__s.__data_[v38] = 0;
    memset(&v61, 0, sizeof(v61));
    v34 = (char *)*((_QWORD *)this + 5);
    v35 = (char *)this + 48;
    if (v34 == (char *)this + 48)
      goto LABEL_118;
  }
  else
  {
    std::string::__grow_by_and_replace(&v60, v32, v33 - v32 + 11, v33, v33, 0, 0xBuLL, ", dup_tsns=");
    memset(&v61, 0, sizeof(v61));
    v34 = (char *)*((_QWORD *)this + 5);
    v35 = (char *)this + 48;
    if (v34 == (char *)this + 48)
      goto LABEL_118;
  }
  if (",")
  {
    v39 = 0;
    while (1)
    {
      if (!v39)
        goto LABEL_105;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = 22;
      else
        v40 = (v61.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      else
        v41 = v61.__r_.__value_.__l.__size_;
      if (v40 == v41)
      {
        std::string::__grow_by_and_replace(&v61, v40, v41 + 1 - v40, v41, v41, 0, 1uLL, ",");
        rtc::StringBuilder::operator<<(&v61, *((_DWORD *)v34 + 7));
        v42 = (char *)*((_QWORD *)v34 + 1);
        if (v42)
          goto LABEL_106;
        goto LABEL_109;
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v61;
      else
        v43 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((char *)v43 + v41 <= "," && (char *)&v43->__r_.__value_.__l.__data_ + v41 + 1 > ",")
        goto LABEL_146;
      memmove((char *)v43 + v41, ",", 1uLL);
      v45 = v41 + 1;
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        break;
      v61.__r_.__value_.__l.__size_ = v41 + 1;
      v43->__r_.__value_.__s.__data_[v45] = 0;
      rtc::StringBuilder::operator<<(&v61, *((_DWORD *)v34 + 7));
      v42 = (char *)*((_QWORD *)v34 + 1);
      if (v42)
      {
        do
        {
LABEL_106:
          v46 = v42;
          v42 = *(char **)v42;
        }
        while (v42);
        goto LABEL_85;
      }
      do
      {
LABEL_109:
        v46 = (char *)*((_QWORD *)v34 + 2);
        v47 = *(_QWORD *)v46 == (_QWORD)v34;
        v34 = v46;
      }
      while (!v47);
LABEL_85:
      ++v39;
      v34 = v46;
      if (v46 == v35)
        goto LABEL_118;
    }
    *((_BYTE *)&v61.__r_.__value_.__s + 23) = v45 & 0x7F;
    v43->__r_.__value_.__s.__data_[v45] = 0;
LABEL_105:
    rtc::StringBuilder::operator<<(&v61, *((_DWORD *)v34 + 7));
    v42 = (char *)*((_QWORD *)v34 + 1);
    if (v42)
      goto LABEL_106;
    goto LABEL_109;
  }
  rtc::StringBuilder::operator<<(&v61, *((_DWORD *)v34 + 7));
  v48 = (char *)*((_QWORD *)v34 + 1);
  if (v48)
  {
    do
    {
      v49 = v48;
      v48 = *(char **)v48;
    }
    while (v48);
  }
  else
  {
    do
    {
      v49 = (char *)*((_QWORD *)v34 + 2);
      v47 = *(_QWORD *)v49 == (_QWORD)v34;
      v34 = v49;
    }
    while (!v47);
  }
  if (v49 != v35)
    goto LABEL_146;
LABEL_118:
  __p_new_stuff = v61;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
  {
    v50 = __p_new_stuff.__r_.__value_.__l.__size_;
    if ((__p_new_stuff.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_146;
    p_p_new_stuff = (std::string *)__p_new_stuff.__r_.__value_.__r.__words[0];
    v51 = __p_new_stuff.__r_.__value_.__l.__size_ == 0;
    if (__p_new_stuff.__r_.__value_.__l.__size_)
    {
      if (!__p_new_stuff.__r_.__value_.__r.__words[0])
        goto LABEL_146;
    }
  }
  else
  {
    v50 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    v51 = HIBYTE(v61.__r_.__value_.__r.__words[2]) == 0;
    p_p_new_stuff = &__p_new_stuff;
  }
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = 22;
  else
    v53 = (v60.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  else
    v54 = v60.__r_.__value_.__l.__size_;
  if (v53 - v54 < v50)
  {
    std::string::__grow_by_and_replace(&v60, v53, v54 + v50 - v53, v54, v54, 0, v50, (const std::string::value_type *)p_p_new_stuff);
    if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
LABEL_131:
      operator delete(__p_new_stuff.__r_.__value_.__l.__data_);
LABEL_143:
    *a2 = v60;
    return;
  }
  if (v51)
  {
LABEL_142:
    if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_143;
    goto LABEL_131;
  }
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &v60;
  else
    v55 = (std::string *)v60.__r_.__value_.__r.__words[0];
  if ((std::string *)((char *)v55 + v54) > p_p_new_stuff || (std::string *)((char *)v55 + v54 + v50) <= p_p_new_stuff)
  {
    memmove((char *)v55 + v54, p_p_new_stuff, v50);
    v57 = v54 + v50;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      v60.__r_.__value_.__l.__size_ = v54 + v50;
      v55->__r_.__value_.__s.__data_[v57] = 0;
      if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_143;
      goto LABEL_131;
    }
    *((_BYTE *)&v60.__r_.__value_.__s + 23) = v57 & 0x7F;
    v55->__r_.__value_.__s.__data_[v57] = 0;
    goto LABEL_142;
  }
LABEL_146:
  __break(1u);
}

void webrtc::`anonymous namespace'::SaturationProtectorImpl::~SaturationProtectorImpl(webrtc::_anonymous_namespace_::SaturationProtectorImpl *this)
{
  *(_QWORD *)this = &off_24C0BEDD0;
}

{
  *(_QWORD *)this = &off_24C0BEDD0;
  JUMPOUT(0x20BD0ADECLL);
}

float webrtc::`anonymous namespace'::SaturationProtectorImpl::HeadroomDb(webrtc::_anonymous_namespace_::SaturationProtectorImpl *this)
{
  return *((float *)this + 7);
}

__n128 webrtc::`anonymous namespace'::SaturationProtectorImpl::Analyze(webrtc::_anonymous_namespace_::SaturationProtectorImpl *this, __n128 result, float a3, float a4)
{
  int v4;
  int v5;
  __int128 v6;
  int v7;
  float v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  __int128 v17;

  if (result.n128_f32[0] >= 0.95)
  {
    v7 = *((_DWORD *)this + 6) + 1;
    *((_DWORD *)this + 6) = v7;
    v8 = *((float *)this + 15);
    if (v8 < a3)
      v8 = a3;
    *((float *)this + 15) = v8;
    v9 = *((_DWORD *)this + 16);
    *((_DWORD *)this + 16) = v9 + 10;
    if (v9 <= 390)
    {
      v11 = *((_DWORD *)this + 14);
      if (!v11)
      {
LABEL_23:
        v13 = v8 - a4;
        v14 = *((float *)this + 8);
        if (v13 <= v14)
          v15 = (float)(v13 * 0.00023025) + (float)(v14 * 0.99977);
        else
          v15 = (float)(v13 * 0.0011506) + (float)(v14 * 0.99885);
        v16 = 25.0;
        if (v15 < 25.0)
          v16 = v15;
        if (v15 > 12.0)
          result.n128_f32[0] = v16;
        else
          result.n128_f32[0] = 12.0;
        *((_DWORD *)this + 8) = result.n128_u32[0];
        if (v7 >= *((_DWORD *)this + 5))
          *((_DWORD *)this + 7) = result.n128_u32[0];
        return result;
      }
    }
    else
    {
      v10 = *((unsigned int *)this + 13);
      *((_DWORD *)this + 13) = v10 + 1;
      if (v10 >= 4)
        goto LABEL_20;
      *((float *)this + v10 + 9) = v8;
      if ((_DWORD)v10 == 3)
        *((_DWORD *)this + 13) = 0;
      v11 = *((_DWORD *)this + 14);
      if (v11 <= 3)
        *((_DWORD *)this + 14) = ++v11;
      *(_QWORD *)((char *)this + 60) = 3266617016;
      v8 = -90.31;
      if (!v11)
        goto LABEL_23;
    }
    if (v11 != 4)
    {
LABEL_21:
      v12 = 0;
      goto LABEL_22;
    }
    v12 = *((unsigned int *)this + 13);
    if (v12 < 4)
    {
LABEL_22:
      v8 = *((float *)this + v12 + 9);
      goto LABEL_23;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v4 = *((_DWORD *)this + 5);
  if (v4 < 2)
  {
LABEL_6:
    *((_DWORD *)this + 6) = 0;
    return result;
  }
  v5 = *((_DWORD *)this + 6);
  if (v5 < v4)
  {
    if (v5 >= 1)
    {
      result = *(__n128 *)((char *)this + 68);
      v6 = *(_OWORD *)((char *)this + 84);
      *((__n128 *)this + 2) = result;
      *((_OWORD *)this + 3) = v6;
      *((_DWORD *)this + 16) = *((_DWORD *)this + 25);
    }
    goto LABEL_6;
  }
  result = *((__n128 *)this + 2);
  v17 = *((_OWORD *)this + 3);
  *(__n128 *)((char *)this + 68) = result;
  *(_OWORD *)((char *)this + 84) = v17;
  *((_DWORD *)this + 25) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 6) = 0;
  return result;
}

float webrtc::`anonymous namespace'::SaturationProtectorImpl::Reset(webrtc::_anonymous_namespace_::SaturationProtectorImpl *this)
{
  float result;

  *((_DWORD *)this + 6) = 0;
  result = *((float *)this + 4);
  *((float *)this + 7) = result;
  *((float *)this + 8) = result;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 60) = 3266617016;
  *((float *)this + 17) = result;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 3266617016;
  return result;
}

char *webrtc::ScalabilityModeToString(rtc::webrtc_checks_impl *a1)
{
  if (a1 >= 0x22)
    rtc::webrtc_checks_impl::UnreachableCodeReached(a1);
  return off_24C0BEDF8[(char)a1];
}

uint64_t webrtc::ScalabilityModeToInterLayerPredMode(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v9;

  if (a1 < 0x22)
  v9 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/svc/scalability_mode_util.cc", 309, "index < kNumScalabilityModes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a1);
  return webrtc::ScalabilityModeToNumSpatialLayers(v9);
}

uint64_t webrtc::ScalabilityModeToNumSpatialLayers(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v9;

  if (a1 < 0x22)
  v9 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/svc/scalability_mode_util.cc", 309, "index < kNumScalabilityModes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a1);
  return webrtc::LimitNumSpatialLayers(v9);
}

uint64_t webrtc::LimitNumSpatialLayers(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a1 >= 0x22)
  {
    result = (uint64_t)rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/svc/scalability_mode_util.cc", 309, "index < kNumScalabilityModes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a1);
LABEL_65:
    rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)result);
  }
  {
    result = 0;
    switch((int)a1)
    {
      case 0:
      case 3:
      case 4:
      case 5:
      case 22:
      case 23:
        return result;
      case 1:
      case 2:
        return a1;
      case 6:
      case 7:
      case 8:
      case 9:
      case 24:
      case 25:
        return 1;
      case 10:
      case 11:
      case 12:
      case 26:
      case 27:
        return 2;
      case 13:
        if (a2 == 2)
          return 3;
        else
          return 0;
      case 14:
        return 4 * (a2 == 2);
      case 15:
        if (a2 == 2)
          return 5;
        else
          return 0;
      case 16:
        if (a2 == 2)
          return 6;
        else
          return 1;
      case 17:
        if (a2 == 2)
          return 7;
        else
          return 1;
      case 18:
        if (a2 == 2)
          return 8;
        else
          return 1;
      case 19:
        if (a2 == 2)
          return 10;
        else
          return 2;
      case 20:
        if (a2 == 2)
          return 11;
        else
          return 2;
      case 21:
        if (a2 == 2)
          return 12;
        else
          return 2;
      case 28:
        if (a2 == 2)
          return 22;
        else
          return 0;
      case 29:
        if (a2 == 2)
          return 23;
        else
          return 0;
      case 30:
        if (a2 == 2)
          return 24;
        else
          return 1;
      case 31:
        if (a2 == 2)
          return 25;
        else
          return 1;
      case 32:
        if (a2 == 2)
          return 26;
        else
          return 2;
      case 33:
        if (a2 == 2)
          return 27;
        else
          return 2;
      default:
        goto LABEL_65;
    }
  }
  return a1;
}

uint64_t webrtc::ScalabilityStructureFullSvc::StreamConfig@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int32x4_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)&v2 = 0x100000001;
  *((_QWORD *)&v2 + 1) = 0x100000001;
  *(_OWORD *)(a2 + 12) = v2;
  *(_OWORD *)(a2 + 28) = v2;
  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)a2 = v3;
  v4 = v3;
  v5 = 4 * (int)v3 - 4;
  *(_DWORD *)(a2 + 12 + v5) = 1;
  *(_DWORD *)(a2 + 28 + v5) = 1;
  v6 = v3 - 2;
  if ((int)v3 < 2)
    goto LABEL_37;
  v7 = *(_DWORD *)(this + 16);
  v8 = *(_DWORD *)(this + 20);
  if (v3 < 0x35)
  {
    v9 = v3;
    goto LABEL_36;
  }
  v10 = v3 - 2;
  this = (v3 - 1);
  v11 = a2 + 4 * v6;
  v12 = v11 + 12;
  v13 = v11 + 12 - 4 * v10;
  v14 = v11 + 28;
  v15 = a2 + 4 * this;
  v16 = v15 + 12;
  v17 = v15 + 12 - 4 * v10;
  v18 = v15 + 28;
  v19 = v18 - 4 * v10 > v18 || v17 > v16;
  if (v19
    || v14 - 4 * v10 > v14
    || v13 > v12
    || v6 < v10
    || this < v10
    || HIDWORD(v10) != 0)
  {
    v9 = v3;
    goto LABEL_36;
  }
  if (v16 - v12 < 0x10)
  {
    v9 = v3;
    goto LABEL_36;
  }
  if (v12 - v18 < 0x10)
  {
    v9 = v3;
    do
    {
LABEL_36:
      v34 = 4 * (v9 - 1);
      v35 = 4 * (v9 - 2);
      *(_DWORD *)(a2 + 12 + v35) = *(_DWORD *)(a2 + 12 + v34) * v7;
      *(_DWORD *)(a2 + 28 + v35) = *(_DWORD *)(a2 + 28 + v34) * v8;
      v19 = v9-- > 2;
    }
    while (v19);
    goto LABEL_37;
  }
  if (v16 - v14 < 0x10)
  {
    v9 = v3;
    goto LABEL_36;
  }
  if (v18 - v14 < 0x10)
  {
    v9 = v3;
    goto LABEL_36;
  }
  v25 = v3 - 1;
  v9 = v3 - (v25 & 0xFFFFFFFFFFFFFFFCLL);
  v26 = a2 - 12;
  v27 = v3 + 0xFFFFFFFFLL;
  v28 = (int8x16_t)vrev64q_s32(vdupq_n_s32(v7));
  v29 = (int32x4_t)vextq_s8(v28, v28, 8uLL);
  v30 = (int8x16_t)vrev64q_s32(vdupq_n_s32(v8));
  v31 = (int32x4_t)vextq_s8(v30, v30, 8uLL);
  v32 = (v4 - 1) & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    this = v26 + 4 * v27;
    v33 = v26 + 4 * (v27 - 1);
    *(int32x4_t *)(v33 + 12) = vmulq_s32(*(int32x4_t *)(this + 12), v29);
    *(int32x4_t *)(v33 + 28) = vmulq_s32(*(int32x4_t *)(this + 28), v31);
    v27 -= 4;
    v32 -= 4;
  }
  while (v32);
  if (v25 != (v25 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_36;
LABEL_37:
  *(_BYTE *)(a2 + 8) = (int)v4 > 1;
  return this;
}

void webrtc::ScalabilityStructureFullSvc::NextFrameConfig(webrtc::ScalabilityStructureFullSvc *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  webrtc::ScalabilityStructureFullSvc *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  int64_t v14;
  int v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  __int16 v39;
  int v40;
  int v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  int v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int v98;
  char *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  unint64_t v131;
  _BYTE *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  size_t v137;
  void **v138;
  void **v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  char v144;
  char v145;
  int v146;
  int v147;
  webrtc::ScalabilityStructureFullSvc *v148;
  _BYTE v149[24];
  void *__p[2];
  uint64_t v151;
  char v152;
  _QWORD v153[3];
  _QWORD v154[2];
  _QWORD v155[3];
  _QWORD *v156;

  v3 = this;
  v4 = (uint64_t)a3;
  v5 = *((_QWORD *)this + 6);
  if (!(_DWORD)v5)
  {
    *((_DWORD *)this + 6) = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    return;
  }
  v6 = a2;
  v7 = *((unsigned int *)this + 2);
  v8 = v7;
  v148 = this;
  if ((_DWORD)v7)
  {
    if ((v7 & 0x80000000) != 0)
      goto LABEL_251;
    v9 = (char *)operator new(88 * (int)v7);
    v10 = &v9[88 * (int)v7];
    v3 = v148;
    v11 = *((_DWORD *)v148 + 6);
    if (v11)
      v12 = v6;
    else
      v12 = 1;
    v146 = v12;
    if (v12 == 1)
      goto LABEL_8;
LABEL_71:
    v13 = 5;
    switch(v11)
    {
      case 1:
      case 5:
        v41 = *((_DWORD *)v3 + 3);
        if (v41 <= 2)
          goto LABEL_81;
        if (!(_DWORD)v7)
          goto LABEL_161;
        if ((v5 & 4) == 0)
        {
          v42 = 0;
          v43 = v41 + 2;
          do
          {
            if (v7 - 1 == v42)
              goto LABEL_81;
            v44 = v5 >> v43;
            v43 += v41;
            ++v42;
          }
          while ((v44 & 1) == 0);
          if (v42 < v7)
          {
            v144 = v6;
            v45 = 0;
            v46 = 2;
            goto LABEL_158;
          }
LABEL_81:
          if (v41 > 1)
          {
            if ((int)v7 < 1)
            {
LABEL_161:
              *((_QWORD *)v3 + 5) &= 0xFFFFFFFFFFFFFFF8;
              v16 = v9;
              goto LABEL_226;
            }
            if ((v5 & 2) == 0)
            {
              v47 = 0;
              v48 = v41 + 1;
              do
              {
                if (v7 - 1 == v47)
                  goto LABEL_160;
                v49 = v5 >> v48;
                v48 += v41;
                ++v47;
              }
              while ((v49 & 1) == 0);
              if (v47 >= v7)
                goto LABEL_160;
LABEL_97:
              if ((int)v7 < 1)
              {
                v16 = v9;
                goto LABEL_226;
              }
            }
LABEL_98:
            v145 = v6;
            v54 = v4;
            v55 = 0;
            v56 = 0;
            v4 = 0;
            v16 = v9;
            while (1)
            {
              if (((*((_QWORD *)v3 + 6) >> (*((_DWORD *)v3 + 3) * v55 + 1)) & 1) == 0
                || ((*((_QWORD *)v3 + 4) >> v55) & 1) == 0)
              {
                goto LABEL_101;
              }
              if (v9 >= v10)
              {
                v57 = 0x2E8BA2E8BA2E8BA3 * ((v9 - v16) >> 3) + 1;
                if (v57 > 0x2E8BA2E8BA2E8BALL)
                  goto LABEL_251;
                if (0x5D1745D1745D1746 * ((v10 - v16) >> 3) > v57)
                  v57 = 0x5D1745D1745D1746 * ((v10 - v16) >> 3);
                if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v10 - v16) >> 3)) >= 0x1745D1745D1745DLL)
                  v57 = 0x2E8BA2E8BA2E8BALL;
                if (!v57)
                {
LABEL_239:
                  __break(1u);
LABEL_240:
                  *(_QWORD *)v4 = v16;
                  *(_QWORD *)(v4 + 8) = v9;
                  *(_QWORD *)(v4 + 16) = v10;
                  return;
                }
                if (v57 > 0x2E8BA2E8BA2E8BALL)
LABEL_258:
                  std::__throw_bad_array_new_length[abi:sn180100]();
                v58 = 88 * v57;
                v59 = (char *)operator new(88 * v57);
                v60 = &v59[8 * ((v9 - v16) >> 3)];
                *(_OWORD *)v60 = 0u;
                *((_OWORD *)v60 + 1) = 0u;
                *((_OWORD *)v60 + 2) = 0u;
                *((_OWORD *)v60 + 3) = 0u;
                *((_OWORD *)v60 + 4) = 0u;
                *((_QWORD *)v60 + 10) = 0;
                if (v9 == v16)
                {
                  v62 = &v59[8 * ((v9 - v16) >> 3)];
                  v16 = v9;
                }
                else
                {
                  v61 = v9;
                  v62 = &v59[8 * ((v9 - v16) >> 3)];
                  do
                  {
                    *(_OWORD *)(v62 - 88) = *(_OWORD *)(v61 - 88);
                    *((_QWORD *)v62 - 9) = *((_QWORD *)v61 - 9);
                    v63 = *((_OWORD *)v61 - 4);
                    v64 = *((_OWORD *)v61 - 3);
                    v65 = *((_OWORD *)v61 - 1);
                    *((_OWORD *)v62 - 2) = *((_OWORD *)v61 - 2);
                    *((_OWORD *)v62 - 1) = v65;
                    *((_OWORD *)v62 - 4) = v63;
                    *((_OWORD *)v62 - 3) = v64;
                    v62 -= 88;
                    *((_QWORD *)v61 - 9) = 0;
                    v61 -= 88;
                  }
                  while (v61 != v16);
                  do
                  {
                    if ((*(v9 - 72) & 1) != 0)
                      operator delete(*((void **)v9 - 8));
                    v9 -= 88;
                  }
                  while (v9 != v16);
                }
                v10 = &v59[v58];
                v9 = v60 + 88;
                if (v16)
                  operator delete(v16);
                v16 = v62;
              }
              else
              {
                if (!v9)
                  goto LABEL_239;
                *((_QWORD *)v9 + 10) = 0;
                *((_OWORD *)v9 + 3) = 0u;
                *((_OWORD *)v9 + 4) = 0u;
                *((_OWORD *)v9 + 1) = 0u;
                *((_OWORD *)v9 + 2) = 0u;
                *(_OWORD *)v9 = 0u;
                v9 += 88;
              }
              if (v16 == v9)
                goto LABEL_239;
              *((_DWORD *)v9 - 22) = 3;
              *((_DWORD *)v9 - 20) = v55;
              *((_DWORD *)v9 - 19) = 1;
              LODWORD(v153[0]) = v55;
              LOBYTE(__p[0]) = 1;
              v67 = v9 - 72;
              v66 = *((_QWORD *)v9 - 9);
              v68 = v9 - 64;
              v149[0] = 0;
              if ((v66 & 1) != 0)
              {
                v69 = (char *)*((_QWORD *)v9 - 8);
                v70 = *((_QWORD *)v9 - 7);
              }
              else
              {
                v69 = v9 - 64;
                v70 = 8;
              }
              if (v66 >> 1 == v70)
              {
                absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)(v9 - 72), v153, (char *)__p, v149);
                if (!v56)
                  goto LABEL_138;
              }
              else
              {
                if (!v69)
                  goto LABEL_239;
                v71 = &v69[8 * (v66 >> 1)];
                *(_DWORD *)v71 = v55;
                *((_WORD *)v71 + 2) = 1;
                *(_QWORD *)v67 = v66 + 2;
                if (!v56)
                  goto LABEL_138;
              }
              LODWORD(v153[0]) = v4;
              LOBYTE(__p[0]) = 1;
              v149[0] = 0;
              v72 = *(_QWORD *)v67;
              if ((*(_QWORD *)v67 & 1) != 0)
              {
                v73 = (char *)*((_QWORD *)v9 - 8);
                v74 = *((_QWORD *)v9 - 7);
              }
              else
              {
                v73 = v9 - 64;
                v74 = 8;
              }
              if (v72 >> 1 == v74)
              {
                absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)(v9 - 72), v153, (char *)__p, v149);
              }
              else
              {
                if (!v73)
                  goto LABEL_239;
                v75 = &v73[8 * (v72 >> 1)];
                *(_DWORD *)v75 = v4;
                *((_WORD *)v75 + 2) = 1;
                *(_QWORD *)v67 = v72 + 2;
              }
LABEL_138:
              v8 = *((_DWORD *)v148 + 2);
              if (*((int *)v148 + 3) > 2 || v55 < v8 - 1)
              {
                LODWORD(v153[0]) = v8 + v55;
                LOBYTE(__p[0]) = 0;
                v149[0] = 1;
                v76 = *(_QWORD *)v67;
                if ((*(_QWORD *)v67 & 1) != 0)
                {
                  v68 = (char *)*((_QWORD *)v9 - 8);
                  v77 = *((_QWORD *)v9 - 7);
                }
                else
                {
                  v77 = 8;
                }
                if (v76 >> 1 == v77)
                {
                  absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)(v9 - 72), v153, (char *)__p, v149);
                  v3 = v148;
                  v8 = *((_DWORD *)v148 + 2);
                  goto LABEL_100;
                }
                if (!v68)
                  goto LABEL_239;
                v78 = &v68[8 * (v76 >> 1)];
                *(_DWORD *)v78 = v8 + v55;
                *((_WORD *)v78 + 2) = 256;
                *(_QWORD *)v67 = v76 + 2;
              }
              v3 = v148;
LABEL_100:
              v4 = (v8 + v55);
              v56 = 1;
LABEL_101:
              if (++v55 >= v8)
              {
                v4 = v54;
                LOBYTE(v6) = v145;
                goto LABEL_226;
              }
            }
          }
LABEL_160:
          v13 = 5;
          goto LABEL_9;
        }
        v144 = v6;
        v45 = 0;
        v46 = 2;
        break;
      case 2:
        v50 = *((_DWORD *)v3 + 3);
        if (v50 <= 1)
          goto LABEL_9;
        if (!(_DWORD)v7)
          goto LABEL_161;
        if ((v5 & 2) != 0)
          goto LABEL_98;
        v51 = 0;
        v52 = v50 + 1;
        do
        {
          if (v7 - 1 == v51)
            goto LABEL_160;
          v53 = v5 >> v52;
          v52 += v50;
          ++v51;
        }
        while ((v53 & 1) == 0);
        if (v51 < v7)
          goto LABEL_97;
        goto LABEL_160;
      case 3:
        v79 = *((_DWORD *)v3 + 3);
        if (v79 < 3)
          goto LABEL_9;
        if (!(_DWORD)v7)
          goto LABEL_161;
        if ((v5 & 4) == 0)
        {
          v80 = 0;
          v81 = v79 + 2;
          do
          {
            if (v7 - 1 == v80)
              goto LABEL_160;
            v82 = v5 >> v81;
            v81 += v79;
            ++v80;
          }
          while ((v82 & 1) == 0);
          if (v80 < v7)
          {
            v144 = v6;
            v46 = 4;
            v45 = 1;
LABEL_158:
            if ((int)v7 < 1)
            {
              v16 = v9;
              LOBYTE(v6) = v144;
              goto LABEL_226;
            }
            break;
          }
          goto LABEL_160;
        }
        v144 = v6;
        v45 = 1;
        v46 = 4;
        break;
      case 4:
        goto LABEL_9;
      default:
        v16 = v9;
        goto LABEL_226;
    }
    v147 = v46;
    v142 = v4;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v4 = 1;
    v16 = v9;
    LODWORD(v86) = v8;
    v140 = v45;
    while (1)
    {
      if (((*((_QWORD *)v3 + 6) >> (*((_DWORD *)v3 + 3) * v83 + 2)) & 1) == 0
        || (*((_QWORD *)v3 + 4) & (1 << v83)) == 0)
      {
        goto LABEL_169;
      }
      if (v9 >= v10)
      {
        v88 = 0x2E8BA2E8BA2E8BA3 * ((v9 - v16) >> 3) + 1;
        if (v88 > 0x2E8BA2E8BA2E8BALL)
          goto LABEL_251;
        if (0x5D1745D1745D1746 * ((v10 - v16) >> 3) > v88)
          v88 = 0x5D1745D1745D1746 * ((v10 - v16) >> 3);
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v10 - v16) >> 3)) >= 0x1745D1745D1745DLL)
          v88 = 0x2E8BA2E8BA2E8BALL;
        if (!v88)
          goto LABEL_239;
        if (v88 > 0x2E8BA2E8BA2E8BALL)
          goto LABEL_258;
        v89 = 88 * v88;
        v90 = (char *)operator new(88 * v88);
        v91 = v90;
        v92 = &v90[8 * ((v9 - v16) >> 3)];
        *(_OWORD *)v92 = 0u;
        *((_OWORD *)v92 + 1) = 0u;
        *((_OWORD *)v92 + 2) = 0u;
        *((_OWORD *)v92 + 3) = 0u;
        *((_OWORD *)v92 + 4) = 0u;
        *((_QWORD *)v92 + 10) = 0;
        if (v9 == v16)
        {
          v94 = &v90[8 * ((v9 - v16) >> 3)];
          v16 = v9;
        }
        else
        {
          v93 = v9;
          v94 = &v90[8 * ((v9 - v16) >> 3)];
          do
          {
            *(_OWORD *)(v94 - 88) = *(_OWORD *)(v93 - 88);
            *((_QWORD *)v94 - 9) = *((_QWORD *)v93 - 9);
            v95 = *((_OWORD *)v93 - 4);
            v96 = *((_OWORD *)v93 - 3);
            v97 = *((_OWORD *)v93 - 1);
            *((_OWORD *)v94 - 2) = *((_OWORD *)v93 - 2);
            *((_OWORD *)v94 - 1) = v97;
            *((_OWORD *)v94 - 4) = v95;
            *((_OWORD *)v94 - 3) = v96;
            v94 -= 88;
            *((_QWORD *)v93 - 9) = 0;
            v93 -= 88;
          }
          while (v93 != v16);
          do
          {
            if ((*(v9 - 72) & 1) != 0)
              operator delete(*((void **)v9 - 8));
            v9 -= 88;
          }
          while (v9 != v16);
        }
        v10 = &v91[v89];
        v9 = v92 + 88;
        if (v16)
          operator delete(v16);
        v16 = v94;
        v3 = v148;
        v45 = v140;
        v4 = 1;
      }
      else
      {
        if (!v9)
          goto LABEL_239;
        *((_QWORD *)v9 + 10) = 0;
        *((_OWORD *)v9 + 3) = 0u;
        *((_OWORD *)v9 + 4) = 0u;
        *((_OWORD *)v9 + 1) = 0u;
        *((_OWORD *)v9 + 2) = 0u;
        *(_OWORD *)v9 = 0u;
        v9 += 88;
      }
      if (v16 == v9)
        goto LABEL_239;
      *((_DWORD *)v9 - 22) = v147;
      *((_DWORD *)v9 - 20) = v83;
      *((_DWORD *)v9 - 19) = 2;
      if ((_DWORD)v45 && (*((_QWORD *)v3 + 5) & (1 << v83)) != 0)
      {
        v98 = *((_DWORD *)v3 + 2) + v83;
        LODWORD(v153[0]) = v98;
        LOBYTE(__p[0]) = 1;
        v99 = v9 - 72;
        v100 = *((_QWORD *)v9 - 9);
        v149[0] = 0;
        if ((v100 & 1) != 0)
        {
          v101 = (char *)*((_QWORD *)v9 - 8);
          v102 = *((_QWORD *)v9 - 7);
        }
        else
        {
          v101 = v9 - 64;
          v102 = 8;
        }
        if (v100 >> 1 == v102)
          goto LABEL_222;
        if (!v101)
          goto LABEL_239;
        v107 = &v101[8 * (v100 >> 1)];
        *(_DWORD *)v107 = v98;
        *((_WORD *)v107 + 2) = 1;
        *(_QWORD *)v99 = v100 + 2;
        if (v84)
        {
LABEL_209:
          LODWORD(v153[0]) = v85;
          LOBYTE(__p[0]) = 1;
          v108 = v9 - 72;
          v109 = *((_QWORD *)v9 - 9);
          v149[0] = 0;
          if ((v109 & 1) != 0)
          {
            v110 = (char *)*((_QWORD *)v9 - 8);
            v111 = *((_QWORD *)v9 - 7);
          }
          else
          {
            v110 = v9 - 64;
            v111 = 8;
          }
          if (v109 >> 1 == v111)
          {
            v120 = v45;
            absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v108, v153, (char *)__p, v149);
            v45 = v120;
          }
          else
          {
            if (!v110)
              goto LABEL_239;
            v112 = &v110[8 * (v109 >> 1)];
            *(_DWORD *)v112 = v85;
            *((_WORD *)v112 + 2) = 1;
            *(_QWORD *)v108 = v109 + 2;
          }
        }
      }
      else
      {
        LODWORD(v153[0]) = v83;
        LOBYTE(__p[0]) = 1;
        v99 = v9 - 72;
        v103 = *((_QWORD *)v9 - 9);
        v149[0] = 0;
        if ((v103 & 1) != 0)
        {
          v104 = (char *)*((_QWORD *)v9 - 8);
          v105 = *((_QWORD *)v9 - 7);
        }
        else
        {
          v104 = v9 - 64;
          v105 = 8;
        }
        if (v103 >> 1 == v105)
        {
LABEL_222:
          v118 = v85;
          v119 = v45;
          absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v99, v153, (char *)__p, v149);
          v45 = v119;
          v85 = v118;
          if (v84)
            goto LABEL_209;
          goto LABEL_215;
        }
        if (!v104)
          goto LABEL_239;
        v106 = &v104[8 * (v103 >> 1)];
        *(_DWORD *)v106 = v83;
        *((_WORD *)v106 + 2) = 1;
        *(_QWORD *)v99 = v103 + 2;
        if (v84)
          goto LABEL_209;
      }
LABEL_215:
      v86 = *((int *)v3 + 2);
      if (v83 < v86 - 1)
      {
        LODWORD(v153[0]) = v83 + 2 * v86;
        LOBYTE(__p[0]) = 0;
        v113 = v9 - 72;
        v114 = *((_QWORD *)v9 - 9);
        v149[0] = 1;
        if ((v114 & 1) != 0)
        {
          v115 = (char *)*((_QWORD *)v9 - 8);
          v116 = *((_QWORD *)v9 - 7);
        }
        else
        {
          v115 = v9 - 64;
          v116 = 8;
        }
        if (v114 >> 1 == v116)
        {
          v87 = v45;
          absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v113, v153, (char *)__p, v149);
          v45 = v87;
          LODWORD(v86) = *((_DWORD *)v3 + 2);
        }
        else
        {
          if (!v115)
            goto LABEL_239;
          v117 = &v115[8 * (v114 >> 1)];
          *(_DWORD *)v117 = v83 + 2 * v86;
          *((_WORD *)v117 + 2) = 256;
          *(_QWORD *)v113 = v114 + 2;
        }
      }
      v85 = v83 + 2 * v86;
      v84 = 1;
LABEL_169:
      if (++v83 >= (int)v86)
      {
        v4 = v142;
        LOBYTE(v6) = v144;
        goto LABEL_226;
      }
    }
  }
  v10 = 0;
  v9 = 0;
  v11 = *((_DWORD *)this + 6);
  if (v11)
    v40 = a2;
  else
    v40 = 1;
  v146 = v40;
  if (v40 != 1)
    goto LABEL_71;
LABEL_8:
  *((_QWORD *)v3 + 4) &= 0xFFFFFFFFFFFFFFF8;
  *((_DWORD *)v3 + 6) = 0;
  v13 = 1;
LABEL_9:
  *((_QWORD *)v3 + 5) &= 0xFFFFFFFFFFFFFFF8;
  if ((int)v7 < 1)
  {
    v16 = v9;
    goto LABEL_226;
  }
  v143 = v6;
  v141 = v4;
  v14 = 0;
  v4 = 0;
  v15 = 0;
  v16 = v9;
  do
  {
    while (((*((_QWORD *)v3 + 6) >> (*((_DWORD *)v3 + 3) * v14)) & 1) != 0)
    {
      if (v9 >= v10)
      {
        v17 = 0x2E8BA2E8BA2E8BA3 * ((v9 - v16) >> 3) + 1;
        if (v17 > 0x2E8BA2E8BA2E8BALL)
          goto LABEL_251;
        if (0x5D1745D1745D1746 * ((v10 - v16) >> 3) > v17)
          v17 = 0x5D1745D1745D1746 * ((v10 - v16) >> 3);
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v10 - v16) >> 3)) >= 0x1745D1745D1745DLL)
          v17 = 0x2E8BA2E8BA2E8BALL;
        if (!v17)
          goto LABEL_239;
        if (v17 > 0x2E8BA2E8BA2E8BALL)
          goto LABEL_258;
        v18 = v13;
        v19 = 88 * v17;
        v20 = (char *)operator new(88 * v17);
        v21 = v20;
        v22 = &v20[8 * ((v9 - v16) >> 3)];
        *(_OWORD *)v22 = 0u;
        *((_OWORD *)v22 + 1) = 0u;
        *((_OWORD *)v22 + 2) = 0u;
        *((_OWORD *)v22 + 3) = 0u;
        *((_OWORD *)v22 + 4) = 0u;
        *((_QWORD *)v22 + 10) = 0;
        if (v9 == v16)
        {
          v24 = &v20[8 * ((v9 - v16) >> 3)];
          v16 = v9;
        }
        else
        {
          v23 = v9;
          v24 = &v20[8 * ((v9 - v16) >> 3)];
          do
          {
            *(_OWORD *)(v24 - 88) = *(_OWORD *)(v23 - 88);
            *((_QWORD *)v24 - 9) = *((_QWORD *)v23 - 9);
            v25 = *((_OWORD *)v23 - 4);
            v26 = *((_OWORD *)v23 - 3);
            v27 = *((_OWORD *)v23 - 1);
            *((_OWORD *)v24 - 2) = *((_OWORD *)v23 - 2);
            *((_OWORD *)v24 - 1) = v27;
            *((_OWORD *)v24 - 4) = v25;
            *((_OWORD *)v24 - 3) = v26;
            v24 -= 88;
            *((_QWORD *)v23 - 9) = 0;
            v23 -= 88;
          }
          while (v23 != v16);
          do
          {
            if ((*(v9 - 72) & 1) != 0)
              operator delete(*((void **)v9 - 8));
            v9 -= 88;
          }
          while (v9 != v16);
        }
        v10 = &v21[v19];
        v9 = v22 + 88;
        if (v16)
          operator delete(v16);
        v16 = v24;
        v3 = v148;
        v13 = v18;
      }
      else
      {
        if (!v9)
          goto LABEL_239;
        *((_QWORD *)v9 + 10) = 0;
        *((_OWORD *)v9 + 3) = 0u;
        *((_OWORD *)v9 + 4) = 0u;
        *((_OWORD *)v9 + 1) = 0u;
        *((_OWORD *)v9 + 2) = 0u;
        *(_OWORD *)v9 = 0u;
        v9 += 88;
      }
      if (v16 == v9)
        goto LABEL_239;
      *((_DWORD *)v9 - 22) = v13;
      *((_DWORD *)v9 - 20) = v14;
      *((_DWORD *)v9 - 19) = 0;
      if ((_DWORD)v4)
      {
        LODWORD(v153[0]) = v15;
        LOBYTE(__p[0]) = 1;
        v28 = v9 - 72;
        v29 = *((_QWORD *)v9 - 9);
        v149[0] = 0;
        if ((v29 & 1) != 0)
        {
          v30 = (char *)*((_QWORD *)v9 - 8);
          v31 = *((_QWORD *)v9 - 7);
        }
        else
        {
          v30 = v9 - 64;
          v31 = 8;
        }
        if (v29 >> 1 != v31)
        {
          if (!v30)
            goto LABEL_239;
          v36 = &v30[8 * (v29 >> 1)];
          *(_DWORD *)v36 = v15;
          *((_WORD *)v36 + 2) = 1;
          *(_QWORD *)v28 = v29 + 2;
          goto LABEL_48;
        }
        absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v28, v153, (char *)__p, v149);
        v32 = v9 - 72;
        v33 = v9 - 64;
        if (((*((_QWORD *)v3 + 4) >> v14) & 1) == 0)
          goto LABEL_42;
LABEL_49:
        LODWORD(v153[0]) = v14;
        LOBYTE(__p[0]) = 1;
        v149[0] = 1;
        v34 = *(_QWORD *)v32;
        if ((*(_QWORD *)v32 & 1) != 0)
        {
          v33 = (char *)*((_QWORD *)v9 - 8);
          v37 = *((_QWORD *)v9 - 7);
        }
        else
        {
          v37 = 8;
        }
        if (v34 >> 1 == v37)
          goto LABEL_61;
        if (!v33)
          goto LABEL_239;
        v38 = &v33[8 * (v34 >> 1)];
        *(_DWORD *)v38 = v14;
        v39 = 257;
LABEL_59:
        *((_WORD *)v38 + 2) = v39;
        *(_QWORD *)v32 = v34 + 2;
        v4 = 1;
        v15 = v14++;
        if (v14 >= *((int *)v3 + 2))
          goto LABEL_66;
      }
      else
      {
        if (v146)
        {
          *(v9 - 84) = 1;
          v32 = v9 - 72;
          v33 = v9 - 64;
          if (((*((_QWORD *)v3 + 4) >> v14) & 1) != 0)
            goto LABEL_49;
          goto LABEL_42;
        }
LABEL_48:
        v32 = v9 - 72;
        v33 = v9 - 64;
        if (((*((_QWORD *)v3 + 4) >> v14) & 1) != 0)
          goto LABEL_49;
LABEL_42:
        LODWORD(v153[0]) = v14;
        LOBYTE(__p[0]) = 0;
        v149[0] = 1;
        v34 = *(_QWORD *)v32;
        if ((*(_QWORD *)v32 & 1) != 0)
        {
          v33 = (char *)*((_QWORD *)v9 - 8);
          v35 = *((_QWORD *)v9 - 7);
        }
        else
        {
          v35 = 8;
        }
        if (v34 >> 1 != v35)
        {
          if (!v33)
            goto LABEL_239;
          v38 = &v33[8 * (v34 >> 1)];
          *(_DWORD *)v38 = v14;
          v39 = 256;
          goto LABEL_59;
        }
LABEL_61:
        absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v32, v153, (char *)__p, v149);
        v4 = 1;
        v15 = v14++;
        if (v14 >= *((int *)v3 + 2))
          goto LABEL_66;
      }
    }
    if ((unint64_t)v14 >= 3)
      goto LABEL_251;
    *((_QWORD *)v3 + 4) &= ~(1 << v14++);
  }
  while (v14 < *((int *)v3 + 2));
LABEL_66:
  v4 = v141;
  LOBYTE(v6) = v143;
LABEL_226:
  if (v16 != v9 || (v6 & 1) != 0)
    goto LABEL_240;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    v153[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_co"
              "ding/svc/scalability_structure_full_svc.cc";
    v153[1] = 1882;
    v153[2] = &v152;
    v154[0] = "Failed to generate configuration for L";
    v154[1] = v153;
    v155[0] = *((unsigned int *)v3 + 2);
    v155[1] = v154;
    v155[2] = "T";
    v156 = v155;
    v121 = operator new(0x28uLL);
    v129 = 0;
    *(_QWORD *)v149 = v121;
    *(_OWORD *)&v149[8] = xmmword_208F04EE0;
    *(_QWORD *)&v130 = 0x2D2D2D2D2D2D2D2DLL;
    *((_QWORD *)&v130 + 1) = 0x2D2D2D2D2D2D2D2DLL;
    *v121 = v130;
    v121[1] = v130;
    *((_BYTE *)v121 + 32) = 0;
    v131 = 31;
    do
    {
      if (((*((_QWORD *)v3 + 6) >> v129) & 1) != 0)
      {
        v133 = v149[23];
        if (v149[23] < 0)
          v133 = *(_QWORD *)&v149[8];
        if (v133 < v131)
          goto LABEL_239;
        if (v149[23] >= 0)
          v132 = v149;
        else
          v132 = *(_BYTE **)v149;
        v132[v131] = 49;
      }
      ++v129;
      --v131;
    }
    while (v129 != 32);
    v134 = 32 - *((int *)v3 + 3) * (uint64_t)*((int *)v3 + 2);
    if ((v149[23] & 0x80000000) == 0)
    {
      v135 = v149[23];
      if (v134 <= v149[23])
        goto LABEL_243;
LABEL_251:
      abort();
    }
    v135 = *(_QWORD *)&v149[8];
    if (*(_QWORD *)&v149[8] < v134)
      goto LABEL_251;
LABEL_243:
    v151 = *(_QWORD *)&v149[16];
    *(_OWORD *)__p = *(_OWORD *)v149;
    v136 = v149[23];
    v137 = v135 - v134;
    if (v135 != v134)
    {
      if (v149[23] >= 0)
        v138 = __p;
      else
        v138 = (void **)__p[0];
      memmove(v138, (char *)v138 + v134, v137);
      v136 = HIBYTE(v151);
    }
    if (v136 < 0)
    {
      __p[1] = (void *)v137;
      v139 = (void **)__p[0];
    }
    else
    {
      HIBYTE(v151) = v137 & 0x7F;
      v139 = __p;
    }
    *((_BYTE *)v139 + v137) = 0;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v122, v123, v124, v125, v126, v127, v128, **(_QWORD **)(v156[1] + 8));
    if (SHIBYTE(v151) < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(webrtc::ScalabilityStructureFullSvc *, uint64_t))(*(_QWORD *)v3 + 40))(v3, 1);
  if (v9)
    operator delete(v9);
}

void std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::reserve(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  void **v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = *(void ***)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      abort();
    v4 = *(void ***)(a1 + 8);
    v5 = 88 * a2;
    v6 = (char *)operator new(88 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = v4;
      v10 = &v6[(char *)v4 - (char *)v2];
      do
      {
        *(_OWORD *)(v10 - 88) = *(_OWORD *)(v9 - 11);
        *((_QWORD *)v10 - 9) = *(v9 - 9);
        v11 = *((_OWORD *)v9 - 4);
        v12 = *((_OWORD *)v9 - 3);
        v13 = *((_OWORD *)v9 - 1);
        *((_OWORD *)v10 - 2) = *((_OWORD *)v9 - 2);
        *((_OWORD *)v10 - 1) = v13;
        *((_OWORD *)v10 - 4) = v11;
        *((_OWORD *)v10 - 3) = v12;
        v10 -= 88;
        *(v9 - 9) = 0;
        v9 -= 11;
      }
      while (v9 != v2);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      do
      {
        if ((*(_BYTE *)(v4 - 9) & 1) != 0)
          operator delete(*(v4 - 8));
        v4 -= 11;
      }
      while (v4 != v2);
    }
    if (v2)
      operator delete(v2);
  }
}

void webrtc::ScalabilityStructureFullSvc::OnEncodeDone(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int i;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  void *__p;
  char **v53;
  char v54;
  int v55;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)a2;
  v6 = *(_DWORD *)(a2 + 12);
  if (!v6)
  {
    v7 = *(_DWORD *)(a2 + 8);
    if (v7 < 3)
    {
      v8 = (_QWORD *)(a1 + 32);
      goto LABEL_7;
    }
LABEL_96:
    abort();
  }
  if (v6 != 1)
  {
    v7 = *(_DWORD *)(a2 + 8);
    goto LABEL_9;
  }
  v7 = *(_DWORD *)(a2 + 8);
  if (v7 >= 3)
    goto LABEL_96;
  v8 = (_QWORD *)(a1 + 40);
LABEL_7:
  *v8 |= 1 << v7;
LABEL_9:
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)(a3 + 200) = 0xFFFFFFFFLL;
  *(_DWORD *)a3 = v7;
  *(_DWORD *)(a3 + 4) = v6;
  v53 = (char **)(a3 + 176);
  if (a3 + 104 == a2 + 16)
    goto LABEL_94;
  v9 = *(_QWORD *)(a2 + 16);
  if ((v9 & 1) != 0)
    v10 = *(_QWORD *)(a2 + 24);
  else
    v10 = a2 + 24;
  absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::CodecBufferUsage>,webrtc::CodecBufferUsage const*>>((unint64_t *)(a3 + 104), v10, v9 >> 1);
  v11 = *(_QWORD *)(a3 + 8);
  while (2)
  {
    v12 = (unint64_t *)(a3 + 8);
    v13 = *(_DWORD *)(a1 + 8);
    v14 = *(int *)(a1 + 12) * (uint64_t)v13;
    v15 = *(_QWORD *)(a3 + 24);
    if ((v11 & 1) != 0)
      v16 = *(int **)(a3 + 16);
    else
      v16 = (int *)(a3 + 16);
    if ((v11 & 1) == 0)
      v15 = 10;
    if (v15 < v14)
    {
      __p = *(void **)(a3 + 16);
      v17 = 2 * v15;
      if (v17 <= v14)
        v18 = *(int *)(a1 + 12) * (uint64_t)v13;
      else
        v18 = v17;
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v19 = (char *)operator new(4 * v18);
      v20 = v19;
      if (v11 >= 2)
      {
        v21 = 0;
        v22 = v11 >> 1;
        if (v11 < 0x10)
          goto LABEL_30;
        if ((unint64_t)(v19 - (char *)v16) < 0x20)
          goto LABEL_30;
        v21 = v22 & 0x7FFFFFFFFFFFFFF8;
        v23 = v19 + 16;
        v24 = (__int128 *)(v16 + 4);
        v25 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 8;
        }
        while (v25);
        v16 += v22 & 0x7FFFFFFFFFFFFFF8;
        if (v22 != v21)
        {
LABEL_30:
          v27 = v22 - v21;
          v28 = &v19[4 * v21];
          do
          {
            v29 = *v16++;
            *(_DWORD *)v28 = v29;
            v28 += 4;
            --v27;
          }
          while (v27);
        }
      }
      if ((v11 & 1) != 0)
      {
        operator delete(__p);
        v11 = *v12;
        v13 = *(_DWORD *)(a1 + 8);
      }
      *(_QWORD *)(a3 + 16) = v20;
      *(_QWORD *)(a3 + 24) = v18;
      *(_QWORD *)(a3 + 8) = v11 | 1;
    }
    if (v13 >= 1)
    {
      v30 = *(_DWORD *)(a1 + 12);
      if (v30 >= 1)
      {
        v31 = 0;
        while (1)
        {
          if (v30 < 1)
            goto LABEL_39;
          v32 = *(_DWORD *)(a2 + 8);
          if (v32 <= v31 && *(_DWORD *)(a2 + 12) <= 0)
          {
            if (v32 != v31 && *(_BYTE *)(a2 + 4) == 0)
              v34 = *(_DWORD *)a2 == 1 ? 2 : 3;
            else
              v34 = 2;
          }
          else
          {
            v34 = 0;
          }
          v55 = v34;
          v36 = *(_QWORD *)(a3 + 8);
          v37 = *(_QWORD *)(a3 + 16);
          if ((v36 & 1) != 0)
          {
            v38 = *(_QWORD *)(a3 + 24);
          }
          else
          {
            v37 = a3 + 16;
            v38 = 10;
          }
          if (v36 >> 1 != v38)
            break;
          absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>(a3 + 8, &v55);
          v30 = *(_DWORD *)(a1 + 12);
          if (v30 >= 2)
            goto LABEL_60;
LABEL_38:
          v13 = *(_DWORD *)(a1 + 8);
LABEL_39:
          if (++v31 >= v13)
            goto LABEL_84;
        }
        if (!v37)
        {
LABEL_93:
          __break(1u);
LABEL_94:
          v11 = 0;
          continue;
        }
        *(_DWORD *)(v37 + 4 * (v36 >> 1)) = v34;
        *v12 = v36 + 2;
        if (v30 < 2)
          goto LABEL_38;
LABEL_60:
        for (i = 1; i < v30; ++i)
        {
          while (1)
          {
            v40 = *(_DWORD *)(a2 + 8);
            if (v40 <= v31 && (v41 = *(_DWORD *)(a2 + 12), v41 <= i))
            {
              if (v40 == v31)
              {
                v42 = i == v41 ? 1 : 2;
              }
              else if (*(_BYTE *)(a2 + 4))
              {
                v42 = 2;
              }
              else
              {
                v42 = *(_DWORD *)a2 == 1 ? 2 : 3;
              }
            }
            else
            {
              v42 = 0;
            }
            v55 = v42;
            v43 = *(_QWORD *)(a3 + 8);
            v44 = *(_QWORD *)(a3 + 16);
            if ((v43 & 1) != 0)
            {
              v45 = *(_QWORD *)(a3 + 24);
            }
            else
            {
              v44 = a3 + 16;
              v45 = 10;
            }
            if (v43 >> 1 != v45)
              break;
            absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>(a3 + 8, &v55);
            v30 = *(_DWORD *)(a1 + 12);
            if (++i >= v30)
              goto LABEL_38;
          }
          if (!v44)
            goto LABEL_93;
          *(_DWORD *)(v44 + 4 * (v43 >> 1)) = v42;
          *v12 = v43 + 2;
        }
        goto LABEL_38;
      }
    }
    break;
  }
LABEL_84:
  if (*(_DWORD *)(a2 + 12))
  {
    v54 = 0;
    std::vector<BOOL>::assign(v53, v13, &v54);
  }
  else
  {
    std::vector<BOOL>::resize((uint64_t)v53, v13, 0);
    v46 = *(unsigned int *)(a1 + 8);
    if ((int)v46 >= 1)
    {
      v47 = 0;
      v48 = *(int *)(a2 + 8);
      v49 = *v53;
      do
      {
        while (1)
        {
          v50 = v47 >> 6;
          v51 = 1 << v47;
          if ((uint64_t)v47 >= v48)
            break;
          *(_QWORD *)&v49[8 * v50] &= ~v51;
          if (v46 == ++v47)
            goto LABEL_86;
        }
        *(_QWORD *)&v49[8 * v50] |= v51;
        ++v47;
      }
      while (v46 != v47);
    }
  }
LABEL_86:
  *(_QWORD *)(a3 + 200) = *(_QWORD *)(a1 + 48);
}

void std::vector<BOOL>::assign(char **a1, unint64_t a2, _BYTE *a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  int v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  __int128 v19;

  a1[1] = 0;
  if (!a2)
    return;
  v6 = a1[2];
  v7 = (_QWORD)v6 << 6;
  if ((_QWORD)v6 << 6 >= a2)
  {
    a1[1] = (char *)a2;
    v14 = *a1;
    v16 = a2 >> 6;
    if (*a3)
    {
LABEL_12:
      v17 = 8 * v16;
      if (a2 >= 0x40)
        memset(v14, 255, v17);
      if ((a2 & 0x3F) != 0)
        *(_QWORD *)&v14[v17] |= 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
      return;
    }
  }
  else
  {
    v18 = 0;
    v19 = 0uLL;
    if ((a2 & 0x8000000000000000) != 0)
      abort();
    v8 = (_QWORD)v6 << 7;
    if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v7 <= 0x3FFFFFFFFFFFFFFELL)
      v9 = v8;
    else
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((uint64_t)&v18, v9);
    v11 = v18;
    v12 = (char *)*((_QWORD *)&v19 + 1);
    v18 = *a1;
    v10 = v18;
    v13 = *(_OWORD *)(a1 + 1);
    *a1 = v11;
    a1[1] = (char *)a2;
    a1[2] = v12;
    v19 = v13;
    if (v10)
      operator delete(v10);
    v14 = *a1;
    v15 = *a3;
    v16 = a2 >> 6;
    if (v15)
      goto LABEL_12;
  }
  if (a2 >= 0x40)
    bzero(v14, 8 * v16);
  if ((a2 & 0x3F) != 0)
    *(_QWORD *)&v14[8 * v16] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F));
}

uint64_t webrtc::ScalabilityStructureFullSvc::OnRatesUpdated(uint64_t this, const webrtc::VideoBitrateAllocation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  std::string *v36;

  v8 = *(unsigned int *)(this + 8);
  if ((int)v8 < 1)
    return this;
  v9 = *(unsigned int *)(this + 12);
  if ((int)v9 < 1)
    return this;
  v10 = 0;
  v11 = 5;
  while (v10 <= 4)
  {
    v12 = v9 * v10;
    v13 = (char *)a2 + 32 * v10;
    if (!v13[8])
    {
      if (v12 > 0x1F)
        goto LABEL_50;
      v15 = 1 << v12;
      v16 = *(_QWORD *)(this + 48);
LABEL_24:
      v17 = v16 & ~v15;
      *(_QWORD *)(this + 48) = v17;
      if ((_DWORD)v9 == 1)
        goto LABEL_4;
      if (v12 > 0x1E)
        goto LABEL_50;
      v19 = v12 + 1;
LABEL_27:
      v20 = 1 << v19;
LABEL_28:
      v21 = v17 & ~v20;
      *(_QWORD *)(this + 48) = v21;
      if ((_DWORD)v9 == 2)
        goto LABEL_4;
      if (v12 > 0x1D)
        goto LABEL_50;
      v23 = v12 + 2;
LABEL_31:
      v24 = 1 << v23;
LABEL_32:
      v25 = v21 & ~v24;
      *(_QWORD *)(this + 48) = v25;
      if ((_DWORD)v9 == 3)
        goto LABEL_4;
      if (v12 > 0x1C)
        goto LABEL_50;
      v27 = v12 + 3;
      goto LABEL_35;
    }
    if (v12 > 0x1F)
      goto LABEL_50;
    v14 = *((_DWORD *)v13 + 1);
    v15 = 1 << v12;
    v16 = *(_QWORD *)(this + 48);
    if (!v14)
      goto LABEL_24;
    v17 = v16 | v15;
    *(_QWORD *)(this + 48) = v17;
    if ((_DWORD)v9 == 1)
      goto LABEL_4;
    v18 = (char *)a2 + 32 * v10;
    v19 = v12 + 1;
    if (!v18[16])
    {
      if (v12 > 0x1E)
        goto LABEL_50;
      goto LABEL_27;
    }
    if (v12 > 0x1E)
      goto LABEL_50;
    v20 = 1 << v19;
    if (!*((_DWORD *)v18 + 3))
      goto LABEL_28;
    v21 = v17 | v20;
    *(_QWORD *)(this + 48) = v21;
    if ((_DWORD)v9 == 2)
      goto LABEL_4;
    v22 = (char *)a2 + 32 * v10;
    v23 = v12 + 2;
    if (!v22[24])
    {
      if (v12 > 0x1D)
        goto LABEL_50;
      goto LABEL_31;
    }
    if (v12 > 0x1D)
      goto LABEL_50;
    v24 = 1 << v23;
    if (!*((_DWORD *)v22 + 5))
      goto LABEL_32;
    v25 = v21 | v24;
    *(_QWORD *)(this + 48) = v25;
    if ((_DWORD)v9 == 3)
      goto LABEL_4;
    v26 = (char *)a2 + 32 * v10;
    v27 = v12 + 3;
    if (!v26[32])
    {
      if (v12 > 0x1C)
        goto LABEL_50;
LABEL_35:
      v29 = 1 << v27;
LABEL_36:
      v31 = 0;
      v30 = v25 & ~v29;
      goto LABEL_37;
    }
    if (v12 > 0x1C)
      goto LABEL_50;
    v28 = *((_DWORD *)v26 + 7);
    v29 = 1 << v27;
    if (!v28)
      goto LABEL_36;
    v30 = v25 | v29;
    v31 = 1;
LABEL_37:
    *(_QWORD *)(this + 48) = v30;
    if ((_DWORD)v9 != 4)
    {
      if ((v31 & 1) != 0)
        goto LABEL_53;
      v32 = v12 + 4;
      if (v32 > 0x1F)
        goto LABEL_50;
      v33 = v30 & ~(1 << v32);
      *(_QWORD *)(this + 48) = v33;
      if ((_DWORD)v9 != 5)
      {
        v34 = v11;
        v35 = v9 - 5;
        while (v34 <= 0x1F)
        {
          v33 &= ~(1 << v34);
          *(_QWORD *)(this + 48) = v33;
          ++v34;
          if (!--v35)
            goto LABEL_4;
        }
LABEL_50:
        abort();
      }
    }
LABEL_4:
    ++v10;
    v11 += v9;
    if (v10 == v8)
      return this;
  }
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 54, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v10);
LABEL_53:
  v36 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 55, "temporal_index < kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, 4);
  return webrtc::ScalabilityStructureL1T2::DependencyStructure((webrtc::ScalabilityStructureL1T2 *)v36);
}

void webrtc::ScalabilityStructureL1T2::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x200000000;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)&v11 = 0;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v11, 2uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 3uLL);
  v4 = *v3;
  if (*(_QWORD *)(a1 + 112) == v4)
    goto LABEL_11;
  *(_DWORD *)(v4 + 4) = 0;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    operator delete(*(void **)(v4 + 16));
  *(_QWORD *)(v4 + 8) = 4;
  *(_QWORD *)(v4 + 16) = 0x200000002;
  *(_OWORD *)(v4 + 24) = v11;
  *(_OWORD *)(v4 + 40) = v12;
  LODWORD(v11) = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 80), (uint64_t)&v11, 1uLL);
  v5 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v5) >> 3)) <= 1)
    goto LABEL_11;
  *(_DWORD *)(v5 + 108) = 0;
  if ((*(_BYTE *)(v5 + 112) & 1) != 0)
    operator delete(*(void **)(v5 + 120));
  *(_QWORD *)(v5 + 112) = 4;
  *(_QWORD *)(v5 + 120) = 0x200000002;
  v6 = v12;
  *(_OWORD *)(v5 + 128) = v11;
  *(_OWORD *)(v5 + 144) = v6;
  LODWORD(v11) = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 184), (uint64_t)&v11, 1uLL);
  v10 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 160), (uint64_t)&v10, 1uLL);
  v8 = a1 + 104;
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v8 + 8) - v7) >> 3)) <= 2)
LABEL_11:
    __break(1u);
  *(_DWORD *)(v7 + 212) = 1;
  if ((*(_BYTE *)(v7 + 216) & 1) != 0)
    operator delete(*(void **)(v7 + 224));
  *(_QWORD *)(v7 + 216) = 4;
  *(_QWORD *)(v7 + 224) = 0x100000000;
  v9 = v12;
  *(_OWORD *)(v7 + 232) = v11;
  *(_OWORD *)(v7 + 248) = v9;
  LODWORD(v11) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 288), (uint64_t)&v11, 1uLL);
  v10 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 264), (uint64_t)&v10, 1uLL);
}

void webrtc::ScalabilityStructureL1T3::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[28];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x300000000;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)v11 = 0;
  *(_DWORD *)&v11[8] = 0;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)v11, 3uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 5uLL);
  v4 = *v3;
  if (*(_QWORD *)(a1 + 112) == v4)
    goto LABEL_17;
  *(_DWORD *)(v4 + 4) = 0;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    operator delete(*(void **)(v4 + 16));
  *(_QWORD *)(v4 + 8) = 6;
  *(_QWORD *)(v4 + 16) = 0x200000002;
  *(_DWORD *)(v4 + 24) = 2;
  *(_OWORD *)(v4 + 28) = *(_OWORD *)v11;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&v11[12];
  *(_DWORD *)v11 = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 80), (uint64_t)v11, 1uLL);
  v5 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v5) >> 3)) <= 1)
    goto LABEL_17;
  *(_DWORD *)(v5 + 108) = 0;
  if ((*(_BYTE *)(v5 + 112) & 1) != 0)
    operator delete(*(void **)(v5 + 120));
  *(_QWORD *)(v5 + 112) = 6;
  *(_QWORD *)(v5 + 120) = 0x200000002;
  *(_DWORD *)(v5 + 128) = 2;
  *(_OWORD *)(v5 + 132) = *(_OWORD *)v11;
  *(_OWORD *)(v5 + 144) = *(_OWORD *)&v11[12];
  *(_DWORD *)v11 = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 184), (uint64_t)v11, 1uLL);
  v10 = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 160), (uint64_t)&v10, 1uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 2)
    goto LABEL_17;
  *(_DWORD *)(v6 + 212) = 1;
  if ((*(_BYTE *)(v6 + 216) & 1) != 0)
    operator delete(*(void **)(v6 + 224));
  *(_QWORD *)(v6 + 216) = 6;
  *(_QWORD *)(v6 + 224) = 0x100000000;
  *(_DWORD *)(v6 + 232) = 2;
  *(_OWORD *)(v6 + 236) = *(_OWORD *)v11;
  *(_OWORD *)(v6 + 248) = *(_OWORD *)&v11[12];
  *(_DWORD *)v11 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 288), (uint64_t)v11, 1uLL);
  v10 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 264), (uint64_t)&v10, 1uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 3)
    goto LABEL_17;
  *(_DWORD *)(v7 + 316) = 2;
  if ((*(_BYTE *)(v7 + 320) & 1) != 0)
    operator delete(*(void **)(v7 + 328));
  *(_QWORD *)(v7 + 320) = 6;
  *(_QWORD *)(v7 + 328) = 0;
  *(_DWORD *)(v7 + 336) = 1;
  *(_OWORD *)(v7 + 352) = *(_OWORD *)&v11[12];
  *(_OWORD *)(v7 + 340) = *(_OWORD *)v11;
  *(_DWORD *)v11 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 392), (uint64_t)v11, 1uLL);
  v10 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 368), (uint64_t)&v10, 1uLL);
  v9 = a1 + 104;
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v9 + 8) - v8) >> 3)) <= 4)
LABEL_17:
    __break(1u);
  *(_DWORD *)(v8 + 420) = 2;
  if ((*(_BYTE *)(v8 + 424) & 1) != 0)
    operator delete(*(void **)(v8 + 432));
  *(_QWORD *)(v8 + 424) = 6;
  *(_QWORD *)(v8 + 432) = 0;
  *(_DWORD *)(v8 + 440) = 1;
  *(_OWORD *)(v8 + 444) = *(_OWORD *)v11;
  *(_OWORD *)(v8 + 456) = *(_OWORD *)&v11[12];
  *(_DWORD *)v11 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 496), (uint64_t)v11, 1uLL);
  v10 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 472), (uint64_t)&v10, 1uLL);
}

void webrtc::ScalabilityStructureL2T1::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x200000000;
  *(_DWORD *)(a1 + 8) = 2;
  *(_QWORD *)&v13 = 0x100000000;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v13, 2uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 4uLL);
  v4 = *v3;
  if (*(_QWORD *)(a1 + 112) == v4)
    goto LABEL_14;
  *(_DWORD *)v4 = 0;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    operator delete(*(void **)(v4 + 16));
  *(_QWORD *)(v4 + 8) = 4;
  *(_QWORD *)(v4 + 16) = 0x300000002;
  *(_OWORD *)(v4 + 24) = v13;
  *(_OWORD *)(v4 + 40) = v14;
  *(_QWORD *)&v13 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 80), (uint64_t)&v13, 2uLL);
  LODWORD(v12) = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 56), (uint64_t)&v12, 1uLL);
  v5 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v5) >> 3)) <= 1)
    goto LABEL_14;
  *(_DWORD *)(v5 + 104) = 0;
  if ((*(_BYTE *)(v5 + 112) & 1) != 0)
    operator delete(*(void **)(v5 + 120));
  *(_QWORD *)(v5 + 112) = 4;
  *(_QWORD *)(v5 + 120) = 0x200000002;
  v6 = v14;
  *(_OWORD *)(v5 + 128) = v13;
  *(_OWORD *)(v5 + 144) = v6;
  *(_QWORD *)&v13 = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 184), (uint64_t)&v13, 2uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 2)
    goto LABEL_14;
  *(_DWORD *)(v7 + 208) = 1;
  if ((*(_BYTE *)(v7 + 216) & 1) != 0)
    operator delete(*(void **)(v7 + 224));
  *(_QWORD *)(v7 + 216) = 4;
  *(_QWORD *)(v7 + 224) = 0x200000000;
  v8 = v14;
  *(_OWORD *)(v7 + 232) = v13;
  *(_OWORD *)(v7 + 248) = v8;
  *(_QWORD *)&v13 = 0x100000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 288), (uint64_t)&v13, 2uLL);
  v12 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 264), (uint64_t)&v12, 2uLL);
  v10 = a1 + 104;
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v10 + 8) - v9) >> 3)) <= 3)
LABEL_14:
    __break(1u);
  *(_DWORD *)(v9 + 312) = 1;
  if ((*(_BYTE *)(v9 + 320) & 1) != 0)
    operator delete(*(void **)(v9 + 328));
  *(_QWORD *)(v9 + 320) = 4;
  *(_QWORD *)(v9 + 328) = 0x200000000;
  v11 = v14;
  *(_OWORD *)(v9 + 336) = v13;
  *(_OWORD *)(v9 + 352) = v11;
  *(_QWORD *)&v13 = 0x100000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 392), (uint64_t)&v13, 2uLL);
  LODWORD(v12) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 368), (uint64_t)&v12, 1uLL);
}

void webrtc::ScalabilityStructureL2T2::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x400000000;
  *(_DWORD *)(a1 + 8) = 2;
  v18 = xmmword_208F1AD80;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v18, 4uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 6uLL);
  v4 = *v3;
  if (*(_QWORD *)(a1 + 112) == v4)
    goto LABEL_20;
  *(_QWORD *)v4 = 0;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    operator delete(*(void **)(v4 + 16));
  *(_QWORD *)(v4 + 8) = 8;
  *(_QWORD *)&v5 = 0x200000002;
  *((_QWORD *)&v5 + 1) = 0x200000002;
  v6 = v18;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 48) = v19;
  *(_QWORD *)&v18 = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 80), (uint64_t)&v18, 2uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 1)
    goto LABEL_20;
  *(_QWORD *)(v7 + 104) = 0;
  if ((*(_BYTE *)(v7 + 112) & 1) != 0)
    operator delete(*(void **)(v7 + 120));
  *(_QWORD *)(v7 + 112) = 8;
  *(_OWORD *)(v7 + 120) = xmmword_208F1AD90;
  *(_OWORD *)(v7 + 136) = v18;
  *(_QWORD *)(v7 + 152) = v19;
  *(_QWORD *)&v18 = 0x300000004;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 184), (uint64_t)&v18, 2uLL);
  LODWORD(v17) = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 160), (uint64_t)&v17, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 2)
    goto LABEL_20;
  *(_QWORD *)(v8 + 208) = 0x100000000;
  if ((*(_BYTE *)(v8 + 216) & 1) != 0)
    operator delete(*(void **)(v8 + 224));
  *(_QWORD *)(v8 + 216) = 8;
  v9 = v18;
  *(_OWORD *)(v8 + 224) = xmmword_208F1ADA0;
  *(_OWORD *)(v8 + 240) = v9;
  *(_QWORD *)(v8 + 256) = v19;
  *(_QWORD *)&v18 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 288), (uint64_t)&v18, 2uLL);
  LODWORD(v17) = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 264), (uint64_t)&v17, 1uLL);
  v10 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v10) >> 3)) <= 3)
    goto LABEL_20;
  *(_QWORD *)(v10 + 312) = 1;
  if ((*(_BYTE *)(v10 + 320) & 1) != 0)
    operator delete(*(void **)(v10 + 328));
  *(_QWORD *)(v10 + 320) = 8;
  *(_QWORD *)(v10 + 360) = v19;
  v11 = v18;
  *(_OWORD *)(v10 + 328) = xmmword_208F1ADB0;
  *(_OWORD *)(v10 + 344) = v11;
  *(_QWORD *)&v18 = 0x100000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 392), (uint64_t)&v18, 2uLL);
  LODWORD(v17) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 368), (uint64_t)&v17, 1uLL);
  v12 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v12) >> 3)) <= 4)
    goto LABEL_20;
  *(_QWORD *)(v12 + 416) = 1;
  if ((*(_BYTE *)(v12 + 424) & 1) != 0)
    operator delete(*(void **)(v12 + 432));
  *(_QWORD *)(v12 + 424) = 8;
  v13 = v18;
  *(_OWORD *)(v12 + 432) = xmmword_208F1ADB0;
  *(_OWORD *)(v12 + 448) = v13;
  *(_QWORD *)(v12 + 464) = v19;
  *(_QWORD *)&v18 = 0x100000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 496), (uint64_t)&v18, 2uLL);
  v17 = 0x100000004;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 472), (uint64_t)&v17, 2uLL);
  v15 = a1 + 104;
  v14 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v15 + 8) - v14) >> 3)) <= 5)
LABEL_20:
    __break(1u);
  *(_QWORD *)(v14 + 520) = 0x100000001;
  if ((*(_BYTE *)(v14 + 528) & 1) != 0)
    operator delete(*(void **)(v14 + 536));
  *(_QWORD *)(v14 + 528) = 8;
  *(_QWORD *)(v14 + 568) = v19;
  v16 = v18;
  *(_OWORD *)(v14 + 536) = xmmword_208F08B10;
  *(_OWORD *)(v14 + 552) = v16;
  *(_QWORD *)&v18 = 0x200000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 600), (uint64_t)&v18, 2uLL);
  v17 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 576), (uint64_t)&v17, 2uLL);
}

void webrtc::ScalabilityStructureL2T3::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = 0x600000000;
  *(_DWORD *)(a1 + 8) = 2;
  v17 = xmmword_208F1AE2C;
  v18 = 0x100000001;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v17, 6uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 0xAuLL);
  v4 = *v3;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v4) >> 3)) <= 1)
    goto LABEL_32;
  *(_QWORD *)(v4 + 104) = 0;
  if ((*(_BYTE *)(v4 + 112) & 1) != 0)
    operator delete(*(void **)(v4 + 120));
  *(_QWORD *)(v4 + 112) = 12;
  *(_QWORD *)&v5 = 0x200000002;
  *((_QWORD *)&v5 + 1) = 0x200000002;
  *(_OWORD *)(v4 + 120) = v5;
  *(_QWORD *)(v4 + 136) = 0x200000002;
  *(_OWORD *)(v4 + 144) = v17;
  *(_QWORD *)&v17 = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 184), (uint64_t)&v17, 2uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 6)
    goto LABEL_32;
  *(_QWORD *)(v6 + 624) = 1;
  if ((*(_BYTE *)(v6 + 632) & 1) != 0)
    operator delete(*(void **)(v6 + 640));
  *(_QWORD *)(v6 + 632) = 12;
  *(_OWORD *)(v6 + 640) = xmmword_208F1ADC0;
  *(_QWORD *)(v6 + 656) = 0x200000002;
  *(_OWORD *)(v6 + 664) = v17;
  *(_QWORD *)&v17 = 0x100000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 704), (uint64_t)&v17, 2uLL);
  LODWORD(v16) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 680), (uint64_t)&v16, 1uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 3)
    goto LABEL_32;
  *(_QWORD *)(v7 + 312) = 0x200000000;
  if ((*(_BYTE *)(v7 + 320) & 1) != 0)
    operator delete(*(void **)(v7 + 328));
  *(_QWORD *)(v7 + 320) = 12;
  *(_OWORD *)(v7 + 328) = xmmword_208F05120;
  *(_QWORD *)(v7 + 344) = 0x300000000;
  *(_OWORD *)(v7 + 352) = v17;
  *(_QWORD *)&v17 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 392), (uint64_t)&v17, 2uLL);
  LODWORD(v16) = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 368), (uint64_t)&v16, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 8)
    goto LABEL_32;
  *(_QWORD *)(v8 + 832) = 0x200000001;
  if ((*(_BYTE *)(v8 + 840) & 1) != 0)
    operator delete(*(void **)(v8 + 848));
  *(_QWORD *)(v8 + 840) = 12;
  *(_QWORD *)(v8 + 856) = 0;
  *(_QWORD *)(v8 + 848) = 0;
  *(_QWORD *)(v8 + 864) = 0x100000000;
  *(_OWORD *)(v8 + 872) = v17;
  *(_QWORD *)&v17 = 0x200000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 912), (uint64_t)&v17, 2uLL);
  v16 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 888), (uint64_t)&v16, 2uLL);
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v9) >> 3)) <= 2)
    goto LABEL_32;
  *(_QWORD *)(v9 + 208) = 0x100000000;
  if ((*(_BYTE *)(v9 + 216) & 1) != 0)
    operator delete(*(void **)(v9 + 224));
  *(_QWORD *)(v9 + 216) = 12;
  *(_OWORD *)(v9 + 224) = xmmword_208F1ADD0;
  *(_QWORD *)(v9 + 240) = 0x300000003;
  *(_OWORD *)(v9 + 248) = v17;
  *(_QWORD *)&v17 = 0x300000004;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 288), (uint64_t)&v17, 2uLL);
  LODWORD(v16) = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 264), (uint64_t)&v16, 1uLL);
  v10 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v10) >> 3)) <= 7)
    goto LABEL_32;
  *(_QWORD *)(v10 + 728) = 0x100000001;
  if ((*(_BYTE *)(v10 + 736) & 1) != 0)
    operator delete(*(void **)(v10 + 744));
  *(_QWORD *)(v10 + 736) = 12;
  *(_QWORD *)(v10 + 752) = 0;
  *(_QWORD *)(v10 + 744) = 0;
  *(_QWORD *)(v10 + 760) = 0x200000001;
  *(_OWORD *)(v10 + 768) = v17;
  *(_QWORD *)&v17 = 0x400000005;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 808), (uint64_t)&v17, 2uLL);
  v16 = 0x100000004;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 784), (uint64_t)&v16, 2uLL);
  v11 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v11) >> 3)) <= 4)
    goto LABEL_32;
  *(_QWORD *)(v11 + 416) = 0x200000000;
  if ((*(_BYTE *)(v11 + 424) & 1) != 0)
    operator delete(*(void **)(v11 + 432));
  *(_QWORD *)(v11 + 424) = 12;
  *(_OWORD *)(v11 + 432) = xmmword_208F05120;
  *(_QWORD *)(v11 + 448) = 0x300000000;
  *(_OWORD *)(v11 + 456) = v17;
  *(_QWORD *)&v17 = 0x500000006;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 496), (uint64_t)&v17, 2uLL);
  LODWORD(v16) = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 472), (uint64_t)&v16, 1uLL);
  v12 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v12) >> 3)) <= 9)
    goto LABEL_32;
  *(_QWORD *)(v12 + 936) = 0x200000001;
  if ((*(_BYTE *)(v12 + 944) & 1) != 0)
    operator delete(*(void **)(v12 + 952));
  *(_QWORD *)(v12 + 944) = 12;
  *(_QWORD *)(v12 + 960) = 0;
  *(_QWORD *)(v12 + 952) = 0;
  *(_QWORD *)(v12 + 968) = 0x100000000;
  *(_OWORD *)(v12 + 976) = v17;
  *(_QWORD *)&v17 = 0x600000007;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 1016), (uint64_t)&v17, 2uLL);
  v16 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 992), (uint64_t)&v16, 2uLL);
  v13 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) == v13)
    goto LABEL_32;
  *(_QWORD *)v13 = 0;
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    operator delete(*(void **)(v13 + 16));
  *(_QWORD *)(v13 + 8) = 12;
  *(_OWORD *)(v13 + 16) = xmmword_208F1ADE0;
  *(_QWORD *)(v13 + 32) = 0x300000003;
  *(_OWORD *)(v13 + 40) = v17;
  *(_QWORD *)&v17 = 0x700000008;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 80), (uint64_t)&v17, 2uLL);
  LODWORD(v16) = 8;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 56), (uint64_t)&v16, 1uLL);
  v15 = a1 + 104;
  v14 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v15 + 8) - v14) >> 3)) <= 5)
LABEL_32:
    __break(1u);
  *(_QWORD *)(v14 + 520) = 1;
  if ((*(_BYTE *)(v14 + 528) & 1) != 0)
    operator delete(*(void **)(v14 + 536));
  *(_QWORD *)(v14 + 528) = 12;
  *(_OWORD *)(v14 + 536) = xmmword_208F1ADC0;
  *(_QWORD *)(v14 + 552) = 0x200000002;
  *(_OWORD *)(v14 + 560) = v17;
  *(_QWORD *)&v17 = 0x100000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 600), (uint64_t)&v17, 2uLL);
  v16 = 0x100000008;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 576), (uint64_t)&v16, 2uLL);
}

void webrtc::ScalabilityStructureL3T1::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[28];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x300000000;
  *(_DWORD *)(a1 + 8) = 3;
  *(_QWORD *)v12 = 0x100000000;
  *(_DWORD *)&v12[8] = 2;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)v12, 3uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 6uLL);
  v4 = *v3;
  if (*(_QWORD *)(a1 + 112) == v4)
    goto LABEL_20;
  *(_DWORD *)v4 = 0;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    operator delete(*(void **)(v4 + 16));
  *(_QWORD *)(v4 + 8) = 6;
  *(_QWORD *)(v4 + 16) = 0x300000002;
  *(_DWORD *)(v4 + 24) = 3;
  *(_OWORD *)(v4 + 28) = *(_OWORD *)v12;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&v12[12];
  *(_QWORD *)v12 = 0x200000003;
  *(_DWORD *)&v12[8] = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 80), (uint64_t)v12, 3uLL);
  LODWORD(v11) = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 56), (uint64_t)&v11, 1uLL);
  v5 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v5) >> 3)) <= 1)
    goto LABEL_20;
  *(_DWORD *)(v5 + 104) = 0;
  if ((*(_BYTE *)(v5 + 112) & 1) != 0)
    operator delete(*(void **)(v5 + 120));
  *(_QWORD *)(v5 + 112) = 6;
  *(_QWORD *)(v5 + 120) = 0x200000002;
  *(_DWORD *)(v5 + 128) = 2;
  *(_OWORD *)(v5 + 132) = *(_OWORD *)v12;
  *(_OWORD *)(v5 + 144) = *(_OWORD *)&v12[12];
  *(_QWORD *)v12 = 0;
  *(_DWORD *)&v12[8] = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 184), (uint64_t)v12, 3uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 2)
    goto LABEL_20;
  *(_DWORD *)(v6 + 208) = 1;
  if ((*(_BYTE *)(v6 + 216) & 1) != 0)
    operator delete(*(void **)(v6 + 224));
  *(_QWORD *)(v6 + 216) = 6;
  *(_QWORD *)(v6 + 224) = 0x200000000;
  *(_DWORD *)(v6 + 232) = 3;
  *(_OWORD *)(v6 + 236) = *(_OWORD *)v12;
  *(_OWORD *)(v6 + 248) = *(_OWORD *)&v12[12];
  *(_QWORD *)v12 = 0x100000001;
  *(_DWORD *)&v12[8] = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 288), (uint64_t)v12, 3uLL);
  v11 = 0x100000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 264), (uint64_t)&v11, 2uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 3)
    goto LABEL_20;
  *(_DWORD *)(v7 + 312) = 1;
  if ((*(_BYTE *)(v7 + 320) & 1) != 0)
    operator delete(*(void **)(v7 + 328));
  *(_QWORD *)(v7 + 320) = 6;
  *(_QWORD *)(v7 + 328) = 0x200000000;
  *(_DWORD *)(v7 + 336) = 2;
  *(_OWORD *)(v7 + 352) = *(_OWORD *)&v12[12];
  *(_OWORD *)(v7 + 340) = *(_OWORD *)v12;
  *(_QWORD *)v12 = 0x100000001;
  *(_DWORD *)&v12[8] = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 392), (uint64_t)v12, 3uLL);
  LODWORD(v11) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 368), (uint64_t)&v11, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 4)
    goto LABEL_20;
  *(_DWORD *)(v8 + 416) = 2;
  if ((*(_BYTE *)(v8 + 424) & 1) != 0)
    operator delete(*(void **)(v8 + 432));
  *(_QWORD *)(v8 + 424) = 6;
  *(_QWORD *)(v8 + 432) = 0;
  *(_DWORD *)(v8 + 440) = 2;
  *(_OWORD *)(v8 + 444) = *(_OWORD *)v12;
  *(_OWORD *)(v8 + 456) = *(_OWORD *)&v12[12];
  *(_QWORD *)v12 = 0x100000002;
  *(_DWORD *)&v12[8] = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 496), (uint64_t)v12, 3uLL);
  v11 = 0x100000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 472), (uint64_t)&v11, 2uLL);
  v10 = a1 + 104;
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v10 + 8) - v9) >> 3)) <= 5)
LABEL_20:
    __break(1u);
  *(_DWORD *)(v9 + 520) = 2;
  if ((*(_BYTE *)(v9 + 528) & 1) != 0)
    operator delete(*(void **)(v9 + 536));
  *(_QWORD *)(v9 + 528) = 6;
  *(_QWORD *)(v9 + 536) = 0;
  *(_DWORD *)(v9 + 544) = 2;
  *(_OWORD *)(v9 + 560) = *(_OWORD *)&v12[12];
  *(_OWORD *)(v9 + 548) = *(_OWORD *)v12;
  *(_QWORD *)v12 = 0x100000002;
  *(_DWORD *)&v12[8] = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 600), (uint64_t)v12, 3uLL);
  LODWORD(v11) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 576), (uint64_t)&v11, 1uLL);
}

void webrtc::ScalabilityStructureL3T2::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = 0x600000000;
  *(_DWORD *)(a1 + 8) = 3;
  v16 = xmmword_208F1AE44;
  v17 = 0x200000002;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v16, 6uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 9uLL);
  v4 = *v3;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v4) >> 3)) <= 1)
    goto LABEL_29;
  *(_QWORD *)(v4 + 104) = 0;
  if ((*(_BYTE *)(v4 + 112) & 1) != 0)
    operator delete(*(void **)(v4 + 120));
  *(_QWORD *)(v4 + 112) = 12;
  *(_QWORD *)&v5 = 0x200000002;
  *((_QWORD *)&v5 + 1) = 0x200000002;
  *(_OWORD *)(v4 + 120) = v5;
  *(_QWORD *)(v4 + 136) = 0x200000002;
  *(_OWORD *)(v4 + 144) = v16;
  *(_QWORD *)&v16 = 0;
  DWORD2(v16) = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 184), (uint64_t)&v16, 3uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 4)
    goto LABEL_29;
  *(_QWORD *)(v6 + 416) = 1;
  if ((*(_BYTE *)(v6 + 424) & 1) != 0)
    operator delete(*(void **)(v6 + 432));
  *(_QWORD *)(v6 + 424) = 12;
  *(_OWORD *)(v6 + 432) = xmmword_208F1ADB0;
  *(_QWORD *)(v6 + 448) = 0x200000002;
  *(_OWORD *)(v6 + 456) = v16;
  *(_QWORD *)&v16 = 0x100000001;
  DWORD2(v16) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 496), (uint64_t)&v16, 3uLL);
  LODWORD(v15) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 472), (uint64_t)&v15, 1uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 7)
    goto LABEL_29;
  *(_QWORD *)(v7 + 728) = 2;
  if ((*(_BYTE *)(v7 + 736) & 1) != 0)
    operator delete(*(void **)(v7 + 744));
  *(_QWORD *)(v7 + 736) = 12;
  *(_QWORD *)(v7 + 752) = 0;
  *(_QWORD *)(v7 + 744) = 0;
  *(_QWORD *)(v7 + 760) = 0x200000002;
  *(_OWORD *)(v7 + 768) = v16;
  *(_QWORD *)&v16 = 0x100000002;
  DWORD2(v16) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 808), (uint64_t)&v16, 3uLL);
  LODWORD(v15) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 784), (uint64_t)&v15, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 2)
    goto LABEL_29;
  *(_QWORD *)(v8 + 208) = 0x100000000;
  if ((*(_BYTE *)(v8 + 216) & 1) != 0)
    operator delete(*(void **)(v8 + 224));
  *(_QWORD *)(v8 + 216) = 12;
  *(_OWORD *)(v8 + 224) = xmmword_208F1ADA0;
  *(_QWORD *)(v8 + 240) = 0x300000000;
  *(_OWORD *)(v8 + 248) = v16;
  *(_QWORD *)&v16 = 0x200000003;
  DWORD2(v16) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 288), (uint64_t)&v16, 3uLL);
  LODWORD(v15) = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 264), (uint64_t)&v15, 1uLL);
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v9) >> 3)) <= 5)
    goto LABEL_29;
  *(_QWORD *)(v9 + 520) = 0x100000001;
  if ((*(_BYTE *)(v9 + 528) & 1) != 0)
    operator delete(*(void **)(v9 + 536));
  *(_QWORD *)(v9 + 528) = 12;
  *(_OWORD *)(v9 + 536) = xmmword_208F08B10;
  *(_QWORD *)(v9 + 552) = 0x300000000;
  *(_OWORD *)(v9 + 560) = v16;
  *(_QWORD *)&v16 = 0x300000004;
  DWORD2(v16) = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 600), (uint64_t)&v16, 3uLL);
  v15 = 0x100000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 576), (uint64_t)&v15, 2uLL);
  v10 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v10) >> 3)) <= 8)
    goto LABEL_29;
  *(_QWORD *)(v10 + 832) = 0x100000002;
  if ((*(_BYTE *)(v10 + 840) & 1) != 0)
    operator delete(*(void **)(v10 + 848));
  *(_QWORD *)(v10 + 840) = 12;
  *(_QWORD *)(v10 + 856) = 0;
  *(_QWORD *)(v10 + 848) = 0;
  *(_QWORD *)(v10 + 864) = 0x100000000;
  *(_OWORD *)(v10 + 872) = v16;
  *(_QWORD *)&v16 = 0x400000005;
  DWORD2(v16) = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 912), (uint64_t)&v16, 3uLL);
  v15 = 0x100000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 888), (uint64_t)&v15, 2uLL);
  v11 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) == v11)
    goto LABEL_29;
  *(_QWORD *)v11 = 0;
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    operator delete(*(void **)(v11 + 16));
  *(_QWORD *)(v11 + 8) = 12;
  *(_OWORD *)(v11 + 16) = xmmword_208F1AD90;
  *(_QWORD *)(v11 + 32) = 0x300000003;
  *(_OWORD *)(v11 + 40) = v16;
  *(_QWORD *)&v16 = 0x500000006;
  DWORD2(v16) = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 80), (uint64_t)&v16, 3uLL);
  LODWORD(v15) = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 56), (uint64_t)&v15, 1uLL);
  v12 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v12) >> 3)) <= 3)
    goto LABEL_29;
  *(_QWORD *)(v12 + 312) = 1;
  if ((*(_BYTE *)(v12 + 320) & 1) != 0)
    operator delete(*(void **)(v12 + 328));
  *(_QWORD *)(v12 + 320) = 12;
  *(_OWORD *)(v12 + 328) = xmmword_208F1ADB0;
  *(_QWORD *)(v12 + 344) = 0x300000003;
  *(_OWORD *)(v12 + 352) = v16;
  *(_QWORD *)&v16 = 0x100000001;
  DWORD2(v16) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 392), (uint64_t)&v16, 3uLL);
  v15 = 0x100000006;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 368), (uint64_t)&v15, 2uLL);
  v14 = a1 + 104;
  v13 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v14 + 8) - v13) >> 3)) <= 6)
LABEL_29:
    __break(1u);
  *(_QWORD *)(v13 + 624) = 2;
  if ((*(_BYTE *)(v13 + 632) & 1) != 0)
    operator delete(*(void **)(v13 + 640));
  *(_QWORD *)(v13 + 632) = 12;
  *(_QWORD *)(v13 + 648) = 0;
  *(_QWORD *)(v13 + 640) = 0;
  *(_QWORD *)(v13 + 656) = 0x200000002;
  *(_OWORD *)(v13 + 664) = v16;
  *(_QWORD *)&v16 = 0x100000002;
  DWORD2(v16) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 704), (uint64_t)&v16, 3uLL);
  v15 = 0x100000006;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 680), (uint64_t)&v15, 2uLL);
}

void webrtc::ScalabilityStructureL3T3::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x900000000;
  *(_DWORD *)(a1 + 8) = 3;
  v24[0] = xmmword_208F1AE5C;
  v24[1] = unk_208F1AE6C;
  v25 = 2;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)v24, 9uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 0xFuLL);
  v4 = *v3;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v4) >> 3)) <= 1)
    goto LABEL_47;
  *(_QWORD *)(v4 + 104) = 0;
  if ((*(_BYTE *)(v4 + 112) & 1) != 0)
    operator delete(*(void **)(v4 + 120));
  *(_QWORD *)(v4 + 112) = 18;
  *(_QWORD *)&v5 = 0x200000002;
  *((_QWORD *)&v5 + 1) = 0x200000002;
  *(_OWORD *)(v4 + 120) = v5;
  *(_OWORD *)(v4 + 136) = v5;
  *(_DWORD *)(v4 + 152) = 2;
  *(_QWORD *)&v24[0] = 0;
  DWORD2(v24[0]) = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 184), (uint64_t)v24, 3uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 6)
    goto LABEL_47;
  *(_QWORD *)(v6 + 624) = 1;
  if ((*(_BYTE *)(v6 + 632) & 1) != 0)
    operator delete(*(void **)(v6 + 640));
  *(_QWORD *)(v6 + 632) = 18;
  *(_QWORD *)&v7 = 0x200000002;
  *((_QWORD *)&v7 + 1) = 0x200000002;
  *(_OWORD *)(v6 + 640) = xmmword_208F1ADC0;
  *(_OWORD *)(v6 + 656) = v7;
  *(_DWORD *)(v6 + 672) = 2;
  *(_QWORD *)&v24[0] = 0x100000001;
  DWORD2(v24[0]) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 704), (uint64_t)v24, 3uLL);
  LODWORD(v23) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 680), (uint64_t)&v23, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 0xB)
    goto LABEL_47;
  *(_QWORD *)(v8 + 1144) = 2;
  if ((*(_BYTE *)(v8 + 1152) & 1) != 0)
    operator delete(*(void **)(v8 + 1160));
  *(_QWORD *)(v8 + 1152) = 18;
  *(_QWORD *)(v8 + 1160) = 0;
  *(_QWORD *)(v8 + 1168) = 0;
  *(_OWORD *)(v8 + 1176) = xmmword_208F1ADB0;
  *(_DWORD *)(v8 + 1192) = 2;
  *(_QWORD *)&v24[0] = 0x100000002;
  DWORD2(v24[0]) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 1224), (uint64_t)v24, 3uLL);
  LODWORD(v23) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 1200), (uint64_t)&v23, 1uLL);
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v9) >> 3)) <= 3)
    goto LABEL_47;
  *(_QWORD *)(v9 + 312) = 0x200000000;
  if ((*(_BYTE *)(v9 + 320) & 1) != 0)
    operator delete(*(void **)(v9 + 328));
  *(_QWORD *)(v9 + 320) = 18;
  *(_OWORD *)(v9 + 328) = xmmword_208F05120;
  *(_OWORD *)(v9 + 344) = xmmword_208F1ADF0;
  *(_DWORD *)(v9 + 360) = 3;
  *(_QWORD *)&v24[0] = 0x200000003;
  DWORD2(v24[0]) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 392), (uint64_t)v24, 3uLL);
  LODWORD(v23) = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 368), (uint64_t)&v23, 1uLL);
  v10 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v10) >> 3)) <= 8)
    goto LABEL_47;
  *(_QWORD *)(v10 + 832) = 0x200000001;
  if ((*(_BYTE *)(v10 + 840) & 1) != 0)
    operator delete(*(void **)(v10 + 848));
  *(_QWORD *)(v10 + 840) = 18;
  *(_QWORD *)(v10 + 856) = 0;
  *(_QWORD *)(v10 + 848) = 0;
  *(_OWORD *)(v10 + 864) = xmmword_208F05140;
  *(_DWORD *)(v10 + 880) = 3;
  *(_QWORD *)&v24[0] = 0x300000004;
  DWORD2(v24[0]) = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 912), (uint64_t)v24, 3uLL);
  v23 = 0x100000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 888), (uint64_t)&v23, 2uLL);
  v11 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v11) >> 3)) <= 0xD)
    goto LABEL_47;
  *(_QWORD *)(v11 + 1352) = 0x200000002;
  if ((*(_BYTE *)(v11 + 1360) & 1) != 0)
    operator delete(*(void **)(v11 + 1368));
  *(_QWORD *)(v11 + 1360) = 18;
  *(_OWORD *)(v11 + 1368) = 0u;
  *(_OWORD *)(v11 + 1384) = 0u;
  *(_DWORD *)(v11 + 1400) = 1;
  *(_QWORD *)&v24[0] = 0x400000005;
  DWORD2(v24[0]) = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 1432), (uint64_t)v24, 3uLL);
  v23 = 0x100000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 1408), (uint64_t)&v23, 2uLL);
  v12 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v12) >> 3)) <= 2)
    goto LABEL_47;
  *(_QWORD *)(v12 + 208) = 0x100000000;
  if ((*(_BYTE *)(v12 + 216) & 1) != 0)
    operator delete(*(void **)(v12 + 224));
  *(_QWORD *)(v12 + 216) = 18;
  *(_OWORD *)(v12 + 224) = xmmword_208F1ADD0;
  *(_OWORD *)(v12 + 240) = xmmword_208F1AE00;
  *(_DWORD *)(v12 + 256) = 3;
  *(_QWORD *)&v24[0] = 0x500000006;
  DWORD2(v24[0]) = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 288), (uint64_t)v24, 3uLL);
  LODWORD(v23) = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 264), (uint64_t)&v23, 1uLL);
  v13 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v13) >> 3)) <= 7)
    goto LABEL_47;
  *(_QWORD *)(v13 + 728) = 0x100000001;
  if ((*(_BYTE *)(v13 + 736) & 1) != 0)
    operator delete(*(void **)(v13 + 744));
  *(_QWORD *)(v13 + 736) = 18;
  *(_QWORD *)(v13 + 744) = 0;
  *(_QWORD *)(v13 + 752) = 0;
  *(_OWORD *)(v13 + 760) = xmmword_208F1AE10;
  *(_DWORD *)(v13 + 776) = 3;
  *(_QWORD *)&v24[0] = 0x600000007;
  DWORD2(v24[0]) = 5;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 808), (uint64_t)v24, 3uLL);
  v23 = 0x100000006;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 784), (uint64_t)&v23, 2uLL);
  v14 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v14) >> 3)) <= 0xC)
    goto LABEL_47;
  *(_QWORD *)(v14 + 1248) = 0x100000002;
  if ((*(_BYTE *)(v14 + 1256) & 1) != 0)
    operator delete(*(void **)(v14 + 1264));
  *(_QWORD *)(v14 + 1256) = 18;
  *(_QWORD *)(v14 + 1272) = 0;
  *(_QWORD *)(v14 + 1264) = 0;
  *(_OWORD *)(v14 + 1280) = xmmword_208F08B10;
  *(_DWORD *)(v14 + 1296) = 2;
  *(_QWORD *)&v24[0] = 0x700000008;
  DWORD2(v24[0]) = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 1328), (uint64_t)v24, 3uLL);
  v23 = 0x100000006;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 1304), (uint64_t)&v23, 2uLL);
  v15 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v15) >> 3)) <= 4)
    goto LABEL_47;
  *(_QWORD *)(v15 + 416) = 0x200000000;
  if ((*(_BYTE *)(v15 + 424) & 1) != 0)
    operator delete(*(void **)(v15 + 432));
  *(_QWORD *)(v15 + 424) = 18;
  *(_OWORD *)(v15 + 432) = xmmword_208F05120;
  *(_OWORD *)(v15 + 448) = xmmword_208F1ADF0;
  *(_DWORD *)(v15 + 464) = 3;
  *(_QWORD *)&v24[0] = 0x800000009;
  DWORD2(v24[0]) = 7;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v15 + 496), (uint64_t)v24, 3uLL);
  LODWORD(v23) = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v15 + 472), (uint64_t)&v23, 1uLL);
  v16 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v16) >> 3)) <= 9)
    goto LABEL_47;
  *(_QWORD *)(v16 + 936) = 0x200000001;
  if ((*(_BYTE *)(v16 + 944) & 1) != 0)
    operator delete(*(void **)(v16 + 952));
  *(_QWORD *)(v16 + 944) = 18;
  *(_QWORD *)(v16 + 952) = 0;
  *(_QWORD *)(v16 + 960) = 0;
  *(_OWORD *)(v16 + 968) = xmmword_208F05140;
  *(_DWORD *)(v16 + 984) = 3;
  *(_QWORD *)&v24[0] = 0x90000000ALL;
  DWORD2(v24[0]) = 8;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v16 + 1016), (uint64_t)v24, 3uLL);
  v23 = 0x100000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v16 + 992), (uint64_t)&v23, 2uLL);
  v17 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v17) >> 3)) <= 0xE)
    goto LABEL_47;
  *(_QWORD *)(v17 + 1456) = 0x200000002;
  if ((*(_BYTE *)(v17 + 1464) & 1) != 0)
    operator delete(*(void **)(v17 + 1472));
  *(_QWORD *)(v17 + 1464) = 18;
  *(_OWORD *)(v17 + 1472) = 0u;
  *(_OWORD *)(v17 + 1488) = 0u;
  *(_DWORD *)(v17 + 1504) = 1;
  *(_QWORD *)&v24[0] = 0xA0000000BLL;
  DWORD2(v24[0]) = 9;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v17 + 1536), (uint64_t)v24, 3uLL);
  v23 = 0x100000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v17 + 1512), (uint64_t)&v23, 2uLL);
  v18 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) == v18)
    goto LABEL_47;
  *(_QWORD *)v18 = 0;
  if ((*(_BYTE *)(v18 + 8) & 1) != 0)
    operator delete(*(void **)(v18 + 16));
  *(_QWORD *)(v18 + 8) = 18;
  *(_QWORD *)&v19 = 0x300000003;
  *((_QWORD *)&v19 + 1) = 0x300000003;
  *(_OWORD *)(v18 + 16) = xmmword_208F1ADE0;
  *(_OWORD *)(v18 + 32) = v19;
  *(_DWORD *)(v18 + 48) = 3;
  *(_QWORD *)&v24[0] = 0xB0000000CLL;
  DWORD2(v24[0]) = 10;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v18 + 80), (uint64_t)v24, 3uLL);
  LODWORD(v23) = 12;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v18 + 56), (uint64_t)&v23, 1uLL);
  v20 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v20) >> 3)) <= 5)
    goto LABEL_47;
  *(_QWORD *)(v20 + 520) = 1;
  if ((*(_BYTE *)(v20 + 528) & 1) != 0)
    operator delete(*(void **)(v20 + 536));
  *(_QWORD *)(v20 + 528) = 18;
  *(_OWORD *)(v20 + 536) = xmmword_208F1ADC0;
  *(_OWORD *)(v20 + 552) = xmmword_208F1AD90;
  *(_DWORD *)(v20 + 568) = 3;
  *(_QWORD *)&v24[0] = 0x100000001;
  DWORD2(v24[0]) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v20 + 600), (uint64_t)v24, 3uLL);
  v23 = 0x10000000CLL;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v20 + 576), (uint64_t)&v23, 2uLL);
  v22 = a1 + 104;
  v21 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v22 + 8) - v21) >> 3)) <= 0xA)
LABEL_47:
    __break(1u);
  *(_QWORD *)(v21 + 1040) = 2;
  if ((*(_BYTE *)(v21 + 1048) & 1) != 0)
    operator delete(*(void **)(v21 + 1056));
  *(_QWORD *)(v21 + 1048) = 18;
  *(_QWORD *)(v21 + 1064) = 0;
  *(_QWORD *)(v21 + 1056) = 0;
  *(_OWORD *)(v21 + 1072) = xmmword_208F1ADB0;
  *(_DWORD *)(v21 + 1088) = 2;
  *(_QWORD *)&v24[0] = 0x100000002;
  DWORD2(v24[0]) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v21 + 1120), (uint64_t)v24, 3uLL);
  v23 = 0x10000000CLL;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v21 + 1096), (uint64_t)&v23, 2uLL);
}

void webrtc::ScalabilityStructureL1T2::~ScalabilityStructureL1T2(webrtc::ScalabilityStructureL1T2 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL1T3::~ScalabilityStructureL1T3(webrtc::ScalabilityStructureL1T3 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL2T1::~ScalabilityStructureL2T1(webrtc::ScalabilityStructureL2T1 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL2T2::~ScalabilityStructureL2T2(webrtc::ScalabilityStructureL2T2 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL2T3::~ScalabilityStructureL2T3(webrtc::ScalabilityStructureL2T3 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL3T1::~ScalabilityStructureL3T1(webrtc::ScalabilityStructureL3T1 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL3T2::~ScalabilityStructureL3T2(webrtc::ScalabilityStructureL3T2 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL3T3::~ScalabilityStructureL3T3(webrtc::ScalabilityStructureL3T3 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

char *std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>(void **a1)
{
  void **v1;
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = (void **)*a1;
  v1 = (void **)a1[1];
  v3 = 0x2E8BA2E8BA2E8BA3 * (((char *)v1 - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL)
    abort();
  if (0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)v2) >> 3) > v4)
    v4 = 0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)v2) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[2] - (_BYTE *)v2) >> 3)) >= 0x1745D1745D1745DLL)
    v4 = 0x2E8BA2E8BA2E8BALL;
  if (!v4)
  {
    __break(1u);
LABEL_22:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v4 > 0x2E8BA2E8BA2E8BALL)
    goto LABEL_22;
  v6 = 88 * v4;
  v7 = (char *)operator new(88 * v4);
  v8 = &v7[88 * v3];
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v9 = &v7[v6];
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_QWORD *)v8 + 10) = 0;
  v10 = v8 + 88;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v1)
      return v10;
    goto LABEL_16;
  }
  v11 = v1;
  do
  {
    *(_OWORD *)(v8 - 88) = *(_OWORD *)(v11 - 11);
    *((_QWORD *)v8 - 9) = *(v11 - 9);
    v12 = *((_OWORD *)v11 - 4);
    v13 = *((_OWORD *)v11 - 3);
    v14 = *((_OWORD *)v11 - 1);
    *((_OWORD *)v8 - 2) = *((_OWORD *)v11 - 2);
    *((_OWORD *)v8 - 1) = v14;
    *((_OWORD *)v8 - 4) = v12;
    *((_OWORD *)v8 - 3) = v13;
    v8 -= 88;
    *(v11 - 9) = 0;
    v11 -= 11;
  }
  while (v11 != v2);
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  do
  {
    if ((*(_BYTE *)(v1 - 9) & 1) != 0)
      operator delete(*(v1 - 8));
    v1 -= 11;
  }
  while (v1 != v2);
  v1 = v2;
  if (v2)
LABEL_16:
    operator delete(v1);
  return v10;
}

unint64_t webrtc::ScalabilityStructureKeySvc::StreamConfig@<X0>(unint64_t this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  int32x4_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)&v2 = 0x100000001;
  *((_QWORD *)&v2 + 1) = 0x100000001;
  *(_OWORD *)(a2 + 12) = v2;
  *(_OWORD *)(a2 + 28) = v2;
  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)a2 = v3;
  v4 = 4 * (int)v3 - 4;
  *(_DWORD *)(a2 + 12 + v4) = 1;
  *(_DWORD *)(a2 + 28 + v4) = 1;
  v5 = v3 - 2;
  if ((int)v3 >= 2)
  {
    if (v3 < 0x35)
      goto LABEL_26;
    v6 = v3 - 2;
    v7 = v3 - 1;
    v8 = a2 + 4 * v5;
    this = v8 + 12 - 4 * v6;
    v9 = a2 + 4 * (v3 - 1) + 28;
    v10 = v9 - 4 * v6 > v9 || v8 + 28 - 4 * v6 > v8 + 28;
    v11 = v10 || this > v8 + 12;
    v12 = !v11 && v5 >= v6;
    v13 = v12 && v7 >= v6;
    v14 = v13 && HIDWORD(v6) == 0;
    if (v14 && v8 - v9 + 12 >= 0x20 && 4 * v7 - 4 * (unint64_t)v5 >= 0x20)
    {
      v15 = v3 - 1;
      v16 = v3 - (v15 & 0xFFFFFFFFFFFFFFF8);
      v17 = v3 + 0xFFFFFFFFLL;
      *(_QWORD *)&v18 = 0x100000001;
      *((_QWORD *)&v18 + 1) = 0x100000001;
      v19 = v15 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v20 = 4 * (v17 - 1);
        v21 = (_OWORD *)(a2 + v20);
        *(v21 - 1) = v18;
        *v21 = v18;
        v22 = vaddq_s32(*(int32x4_t *)(a2 + 4 * v17), *(int32x4_t *)(a2 + 4 * v17));
        v23 = a2 + 28 + v20;
        *(int32x4_t *)(v23 - 12) = vaddq_s32(*(int32x4_t *)(a2 + 28 + 4 * v17 - 12), *(int32x4_t *)(a2 + 28 + 4 * v17 - 12));
        *(int32x4_t *)(v23 - 28) = v22;
        v17 -= 8;
        v19 -= 8;
      }
      while (v19);
      if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
    }
    else
    {
LABEL_26:
      v16 = v3;
    }
    do
    {
      v24 = 4 * (v16 - 2);
      *(_DWORD *)(a2 + v24 + 12) = 1;
      *(_DWORD *)(a2 + 28 + v24) = 2 * *(_DWORD *)(a2 + 28 + 4 * (v16 - 1));
      v10 = v16-- > 2;
    }
    while (v10);
  }
LABEL_28:
  *(_BYTE *)(a2 + 8) = 1;
  return this;
}

void webrtc::ScalabilityStructureKeySvc::NextFrameConfig(webrtc::ScalabilityStructureKeySvc *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  char *v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  int v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char v91;
  char v92;
  int v93;

  v5 = *((_QWORD *)this + 5);
  if (!(_DWORD)v5)
  {
    *((_DWORD *)this + 4) = 0;
LABEL_7:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  if (!a2)
  {
    switch(*((_DWORD *)this + 4))
    {
      case 0:
        goto LABEL_4;
      case 1:
      case 2:
        v11 = *((_DWORD *)this + 3);
        if (v11 <= 2)
          goto LABEL_18;
        v12 = *((unsigned int *)this + 2);
        if ((int)v12 < 1)
          goto LABEL_46;
        if ((v5 & 4) != 0)
          goto LABEL_17;
        v13 = 0;
        v14 = v11 + 2;
        do
        {
          if (v12 - 1 == v13)
            goto LABEL_18;
          v15 = v5 >> v14;
          v14 += v11;
          ++v13;
        }
        while ((v15 & 1) == 0);
        if (v13 < v12)
        {
LABEL_17:
          v16 = 3;
LABEL_44:
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::reserve(a3, (int)v12);
          if (*((int *)this + 2) < 1)
            return;
          v33 = 0;
          while (1)
          {
            if (((*((_QWORD *)this + 5) >> (*((_DWORD *)this + 3) * v33 + 2)) & 1) != 0)
            {
              v70 = *(_QWORD *)(a3 + 8);
              if (v70 >= *(_QWORD *)(a3 + 16))
              {
                v6 = std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>((void **)a3);
              }
              else
              {
                if (!v70)
                  goto LABEL_173;
                *(_QWORD *)(v70 + 80) = 0;
                *(_OWORD *)(v70 + 48) = 0u;
                *(_OWORD *)(v70 + 64) = 0u;
                *(_OWORD *)(v70 + 16) = 0u;
                *(_OWORD *)(v70 + 32) = 0u;
                v6 = (char *)(v70 + 88);
                *(_OWORD *)v70 = 0u;
              }
              *(_QWORD *)(a3 + 8) = v6;
              if (*(char **)a3 == v6)
                goto LABEL_173;
              *((_DWORD *)v6 - 22) = v16;
              *((_DWORD *)v6 - 20) = v33;
              *((_DWORD *)v6 - 19) = 2;
              if (((*((_QWORD *)this + 4) >> v33) & 1) != 0)
              {
                v71 = v33 + *((_DWORD *)this + 2);
                v93 = v71;
                v92 = 1;
                v72 = v6 - 72;
                v73 = *((_QWORD *)v6 - 9);
                v91 = 0;
                if ((v73 & 1) != 0)
                {
                  v74 = (char *)*((_QWORD *)v6 - 8);
                  v75 = *((_QWORD *)v6 - 7);
                }
                else
                {
                  v74 = v6 - 64;
                  v75 = 8;
                }
                if (v73 >> 1 != v75)
                {
                  if (!v74)
                    goto LABEL_173;
                  v79 = &v74[8 * (v73 >> 1)];
                  *(_DWORD *)v79 = v71;
                  *((_WORD *)v79 + 2) = 1;
                  *(_QWORD *)v72 = v73 + 2;
                  goto LABEL_131;
                }
              }
              else
              {
                v93 = v33;
                v92 = 1;
                v72 = v6 - 72;
                v76 = *((_QWORD *)v6 - 9);
                v91 = 0;
                if ((v76 & 1) != 0)
                {
                  v77 = (char *)*((_QWORD *)v6 - 8);
                  v78 = *((_QWORD *)v6 - 7);
                }
                else
                {
                  v77 = v6 - 64;
                  v78 = 8;
                }
                if (v76 >> 1 != v78)
                {
                  if (!v77)
                    goto LABEL_173;
                  v80 = &v77[8 * (v76 >> 1)];
                  *(_DWORD *)v80 = v33;
                  *((_WORD *)v80 + 2) = 1;
                  *(_QWORD *)v72 = v76 + 2;
                  goto LABEL_131;
                }
              }
              v6 = absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v72, &v93, &v92, &v91);
            }
LABEL_131:
            if (++v33 >= *((int *)this + 2))
              return;
          }
        }
LABEL_18:
        if (v11 > 1)
        {
          v17 = *((unsigned int *)this + 2);
          if ((int)v17 >= 1)
          {
            if ((v5 & 2) != 0)
              goto LABEL_34;
            v18 = 0;
            v19 = v11 + 1;
            do
            {
              if (v17 - 1 == v18)
                goto LABEL_46;
              v20 = v5 >> v19;
              v19 += v11;
              ++v18;
            }
            while ((v20 & 1) == 0);
            if (v18 < v17)
            {
LABEL_34:
              *(_QWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = 0;
              *(_QWORD *)(a3 + 16) = 0;
              std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::reserve(a3, (int)v17);
              v26 = *((_DWORD *)this + 2);
              if (v26 < 1)
                return;
              v27 = 0;
              while (1)
              {
                if (((*((_QWORD *)this + 5) >> (*((_DWORD *)this + 3) * v27 + 1)) & 1) != 0)
                {
                  v81 = *(_QWORD *)(a3 + 8);
                  if (v81 >= *(_QWORD *)(a3 + 16))
                  {
                    v6 = std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>((void **)a3);
                    v82 = v6;
                  }
                  else
                  {
                    if (!v81)
                      goto LABEL_173;
                    *(_QWORD *)(v81 + 80) = 0;
                    *(_OWORD *)(v81 + 48) = 0u;
                    *(_OWORD *)(v81 + 64) = 0u;
                    *(_OWORD *)(v81 + 16) = 0u;
                    *(_OWORD *)(v81 + 32) = 0u;
                    v82 = (char *)(v81 + 88);
                    *(_OWORD *)v81 = 0u;
                  }
                  *(_QWORD *)(a3 + 8) = v82;
                  if (*(char **)a3 == v82)
                    goto LABEL_173;
                  *((_DWORD *)v82 - 22) = 4;
                  *((_DWORD *)v82 - 20) = v27;
                  *((_DWORD *)v82 - 19) = 1;
                  v93 = v27;
                  v92 = 1;
                  v6 = v82 - 72;
                  v83 = *((_QWORD *)v82 - 9);
                  v84 = v82 - 64;
                  v91 = 0;
                  if ((v83 & 1) != 0)
                  {
                    v85 = (char *)*((_QWORD *)v82 - 8);
                    v86 = *((_QWORD *)v82 - 7);
                  }
                  else
                  {
                    v85 = v82 - 64;
                    v86 = 8;
                  }
                  if (v83 >> 1 != v86)
                  {
                    if (!v85)
                      goto LABEL_173;
                    v87 = &v85[8 * (v83 >> 1)];
                    *(_DWORD *)v87 = v27;
                    *((_WORD *)v87 + 2) = 1;
                    *(_QWORD *)v6 = v83 + 2;
                    v26 = *((_DWORD *)this + 2);
                    if (*((int *)this + 3) < 3)
                      goto LABEL_152;
LABEL_165:
                    v93 = v27 + v26;
                    v92 = 0;
                    v91 = 1;
                    v88 = *(_QWORD *)v6;
                    if ((*(_QWORD *)v6 & 1) != 0)
                    {
                      v84 = (char *)*((_QWORD *)v82 - 8);
                      v89 = *((_QWORD *)v82 - 7);
                    }
                    else
                    {
                      v89 = 8;
                    }
                    if (v88 >> 1 == v89)
                    {
                      v6 = absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v6, &v93, &v92, &v91);
                      v26 = *((_DWORD *)this + 2);
                    }
                    else
                    {
                      if (!v84)
                        goto LABEL_173;
                      v90 = &v84[8 * (v88 >> 1)];
                      *(_DWORD *)v90 = v27 + v26;
                      *((_WORD *)v90 + 2) = 256;
                      *(_QWORD *)v6 = v88 + 2;
                    }
                    goto LABEL_152;
                  }
                  absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v6, &v93, &v92, &v91);
                  v84 = v82 - 64;
                  v6 = v82 - 72;
                  v26 = *((_DWORD *)this + 2);
                  if (*((int *)this + 3) >= 3)
                    goto LABEL_165;
                }
LABEL_152:
                if (++v27 >= v26)
                  return;
              }
            }
          }
        }
LABEL_46:
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::reserve(a3, *((int *)this + 2));
        *((_QWORD *)this + 4) &= 0xFFFFFFFFFFFFFFF8;
        v34 = *((_DWORD *)this + 2);
        if (v34 < 1)
          return;
        if ((*((_BYTE *)this + 40) & 1) == 0)
        {
          *((_QWORD *)this + 3) &= ~1uLL;
          if (v34 >= 2)
            goto LABEL_61;
          return;
        }
        v35 = *(_QWORD *)(a3 + 8);
        if (v35 >= *(_QWORD *)(a3 + 16))
        {
          v6 = std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>((void **)a3);
          v36 = v6;
        }
        else
        {
          if (!v35)
            goto LABEL_173;
          *(_QWORD *)(v35 + 80) = 0;
          *(_OWORD *)(v35 + 48) = 0u;
          *(_OWORD *)(v35 + 64) = 0u;
          *(_OWORD *)(v35 + 16) = 0u;
          *(_OWORD *)(v35 + 32) = 0u;
          *(_OWORD *)v35 = 0u;
          v36 = (char *)(v35 + 88);
        }
        *(_QWORD *)(a3 + 8) = v36;
        if (*(char **)a3 != v36)
        {
          *((_DWORD *)v36 - 22) = 2;
          *((_QWORD *)v36 - 10) = 0;
          v93 = 0;
          v92 = 1;
          v6 = v36 - 72;
          v37 = *((_QWORD *)v36 - 9);
          v91 = 1;
          if ((v37 & 1) != 0)
          {
            v38 = (char *)*((_QWORD *)v36 - 8);
            v39 = *((_QWORD *)v36 - 7);
          }
          else
          {
            v38 = v36 - 64;
            v39 = 8;
          }
          if (v37 >> 1 == v39)
            goto LABEL_174;
          if (v38)
          {
            v40 = &v38[8 * (v37 >> 1)];
            *(_DWORD *)v40 = 0;
            *((_WORD *)v40 + 2) = 257;
            *(_QWORD *)v6 = v37 + 2;
            v34 = *((_DWORD *)this + 2);
            if (v34 >= 2)
              goto LABEL_61;
            return;
          }
        }
        break;
      case 3:
        v21 = *((_DWORD *)this + 3);
        if (v21 <= 1)
          goto LABEL_46;
        v22 = *((unsigned int *)this + 2);
        if ((int)v22 < 1)
          goto LABEL_46;
        if ((v5 & 2) != 0)
          goto LABEL_33;
        v23 = 0;
        v24 = v21 + 1;
        do
        {
          if (v22 - 1 == v23)
            goto LABEL_46;
          v25 = v5 >> v24;
          v24 += v21;
          ++v23;
        }
        while ((v25 & 1) == 0);
        if (v23 >= v22)
          goto LABEL_46;
LABEL_33:
        LODWORD(v17) = *((_DWORD *)this + 2);
        goto LABEL_34;
      case 4:
        v28 = *((_DWORD *)this + 3);
        if (v28 < 3)
          goto LABEL_46;
        v29 = *((unsigned int *)this + 2);
        if ((int)v29 < 1)
          goto LABEL_46;
        if ((v5 & 4) != 0)
          goto LABEL_43;
        v30 = 0;
        v31 = v28 + 2;
        do
        {
          if (v29 - 1 == v30)
            goto LABEL_46;
          v32 = v5 >> v31;
          v31 += v28;
          ++v30;
        }
        while ((v32 & 1) == 0);
        if (v30 >= v29)
          goto LABEL_46;
LABEL_43:
        v16 = 5;
        LODWORD(v12) = *((_DWORD *)this + 2);
        goto LABEL_44;
      case 5:
        goto LABEL_46;
      default:
        goto LABEL_7;
    }
    while (1)
    {
LABEL_173:
      __break(1u);
LABEL_174:
      v6 = absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v6, &v93, &v92, &v91);
      v34 = *((_DWORD *)this + 2);
      if (v34 < 2)
        return;
LABEL_61:
      if (((*((_QWORD *)this + 5) >> *((_DWORD *)this + 3)) & 1) == 0)
      {
        *((_QWORD *)this + 3) &= ~2uLL;
        if (v34 < 3)
          return;
        goto LABEL_75;
      }
      v41 = *(_QWORD *)(a3 + 8);
      if (v41 >= *(_QWORD *)(a3 + 16))
        break;
      if (v41)
      {
        *(_QWORD *)(v41 + 80) = 0;
        *(_OWORD *)(v41 + 48) = 0u;
        *(_OWORD *)(v41 + 64) = 0u;
        *(_OWORD *)(v41 + 16) = 0u;
        *(_OWORD *)(v41 + 32) = 0u;
        *(_OWORD *)v41 = 0u;
        v42 = (char *)(v41 + 88);
LABEL_68:
        *(_QWORD *)(a3 + 8) = v42;
        if (*(char **)a3 != v42)
        {
          *((_DWORD *)v42 - 22) = 2;
          *((_QWORD *)v42 - 10) = 1;
          v93 = 1;
          v92 = 1;
          v6 = v42 - 72;
          v43 = *((_QWORD *)v42 - 9);
          v91 = 1;
          if ((v43 & 1) != 0)
          {
            v44 = (char *)*((_QWORD *)v42 - 8);
            v45 = *((_QWORD *)v42 - 7);
          }
          else
          {
            v44 = v42 - 64;
            v45 = 8;
          }
          if (v43 >> 1 == v45)
          {
            v6 = absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v6, &v93, &v92, &v91);
            v34 = *((_DWORD *)this + 2);
            if (v34 < 3)
              return;
LABEL_75:
            if (((*((_QWORD *)this + 5) >> (2 * *((_BYTE *)this + 12))) & 1) == 0)
            {
              *((_QWORD *)this + 3) &= ~4uLL;
              if (v34 < 4)
                return;
              goto LABEL_89;
            }
            v47 = *(_QWORD *)(a3 + 8);
            if (v47 >= *(_QWORD *)(a3 + 16))
            {
              v6 = std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>((void **)a3);
              v48 = v6;
              goto LABEL_82;
            }
            if (v47)
            {
              *(_QWORD *)(v47 + 80) = 0;
              *(_OWORD *)(v47 + 48) = 0u;
              *(_OWORD *)(v47 + 64) = 0u;
              *(_OWORD *)(v47 + 16) = 0u;
              *(_OWORD *)(v47 + 32) = 0u;
              *(_OWORD *)v47 = 0u;
              v48 = (char *)(v47 + 88);
LABEL_82:
              *(_QWORD *)(a3 + 8) = v48;
              if (*(char **)a3 != v48)
              {
                *((_DWORD *)v48 - 22) = 2;
                *((_QWORD *)v48 - 10) = 2;
                v93 = 2;
                v92 = 1;
                v6 = v48 - 72;
                v49 = *((_QWORD *)v48 - 9);
                v91 = 1;
                if ((v49 & 1) != 0)
                {
                  v50 = (char *)*((_QWORD *)v48 - 8);
                  v51 = *((_QWORD *)v48 - 7);
                }
                else
                {
                  v50 = v48 - 64;
                  v51 = 8;
                }
                if (v49 >> 1 == v51)
                {
                  v6 = absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v6, &v93, &v92, &v91);
                  if (*((int *)this + 2) < 4)
                    return;
LABEL_89:
                  v53 = 3;
                  while (((*((_QWORD *)this + 5) >> (*((_DWORD *)this + 3) * v53)) & 1) != 0)
                  {
                    v54 = *(_QWORD *)(a3 + 8);
                    if (v54 >= *(_QWORD *)(a3 + 16))
                    {
                      v6 = std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>((void **)a3);
                      v55 = v6;
                    }
                    else
                    {
                      if (!v54)
                        goto LABEL_173;
                      *(_QWORD *)(v54 + 80) = 0;
                      *(_OWORD *)(v54 + 48) = 0u;
                      *(_OWORD *)(v54 + 64) = 0u;
                      *(_OWORD *)(v54 + 16) = 0u;
                      *(_OWORD *)(v54 + 32) = 0u;
                      v55 = (char *)(v54 + 88);
                      *(_OWORD *)v54 = 0u;
                    }
                    *(_QWORD *)(a3 + 8) = v55;
                    if (*(char **)a3 == v55)
                      goto LABEL_173;
                    *((_DWORD *)v55 - 22) = 2;
                    *((_DWORD *)v55 - 20) = v53;
                    *((_DWORD *)v55 - 19) = 0;
                    v93 = v53;
                    v92 = 1;
                    v6 = v55 - 72;
                    v56 = *((_QWORD *)v55 - 9);
                    v91 = 1;
                    if ((v56 & 1) != 0)
                    {
                      v57 = (char *)*((_QWORD *)v55 - 8);
                      v58 = *((_QWORD *)v55 - 7);
                    }
                    else
                    {
                      v57 = v55 - 64;
                      v58 = 8;
                    }
                    if (v56 >> 1 == v58)
                    {
                      v6 = absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v6, &v93, &v92, &v91);
                      if (++v53 >= *((int *)this + 2))
                        return;
                    }
                    else
                    {
                      if (!v57)
                        goto LABEL_173;
                      v59 = &v57[8 * (v56 >> 1)];
                      *(_DWORD *)v59 = v53;
                      *((_WORD *)v59 + 2) = 257;
                      *(_QWORD *)v6 = v56 + 2;
                      if (++v53 >= *((int *)this + 2))
                        return;
                    }
                  }
LABEL_180:
                  abort();
                }
                if (v50)
                {
                  v52 = &v50[8 * (v49 >> 1)];
                  *(_DWORD *)v52 = 2;
                  *((_WORD *)v52 + 2) = 257;
                  *(_QWORD *)v6 = v49 + 2;
                  if (*((int *)this + 2) < 4)
                    return;
                  goto LABEL_89;
                }
              }
            }
          }
          else if (v44)
          {
            v46 = &v44[8 * (v43 >> 1)];
            *(_DWORD *)v46 = 1;
            *((_WORD *)v46 + 2) = 257;
            *(_QWORD *)v6 = v43 + 2;
            v34 = *((_DWORD *)this + 2);
            if (v34 < 3)
              return;
            goto LABEL_75;
          }
        }
      }
    }
    v6 = std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>((void **)a3);
    v42 = v6;
    goto LABEL_68;
  }
  *((_DWORD *)this + 4) = 0;
LABEL_4:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::reserve(a3, *((int *)this + 2));
  *(int8x16_t *)((char *)this + 24) = vandq_s8(*(int8x16_t *)((char *)this + 24), (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF8));
  v7 = *((_DWORD *)this + 2);
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      if (((*((_QWORD *)this + 5) >> (*((_DWORD *)this + 3) * v8)) & 1) == 0)
        goto LABEL_107;
      v60 = *(_QWORD *)(a3 + 8);
      if (v60 >= *(_QWORD *)(a3 + 16))
      {
        v6 = std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>((void **)a3);
        v61 = v6;
      }
      else
      {
        if (!v60)
          goto LABEL_173;
        *(_QWORD *)(v60 + 80) = 0;
        *(_OWORD *)(v60 + 48) = 0u;
        *(_OWORD *)(v60 + 64) = 0u;
        *(_OWORD *)(v60 + 16) = 0u;
        *(_OWORD *)(v60 + 32) = 0u;
        v61 = (char *)(v60 + 88);
        *(_OWORD *)v60 = 0u;
      }
      *(_QWORD *)(a3 + 8) = v61;
      if (*(char **)a3 == v61)
        goto LABEL_173;
      *((_DWORD *)v61 - 22) = 1;
      *((_DWORD *)v61 - 20) = v8;
      *((_DWORD *)v61 - 19) = 0;
      if (v9)
      {
        v93 = v10;
        v92 = 1;
        v6 = v61 - 72;
        v62 = *((_QWORD *)v61 - 9);
        v91 = 0;
        if ((v62 & 1) != 0)
        {
          v63 = (char *)*((_QWORD *)v61 - 8);
          v64 = *((_QWORD *)v61 - 7);
        }
        else
        {
          v63 = v61 - 64;
          v64 = 8;
        }
        if (v62 >> 1 == v64)
        {
          absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v6, &v93, &v92, &v91);
          v93 = v8;
          v92 = 0;
          v6 = v61 - 72;
          v65 = *((_QWORD *)v61 - 9);
          v91 = 1;
          if ((v65 & 1) == 0)
            goto LABEL_123;
        }
        else
        {
          if (!v63)
            goto LABEL_173;
          v68 = &v63[8 * (v62 >> 1)];
          *(_DWORD *)v68 = v10;
          *((_WORD *)v68 + 2) = 1;
          *(_QWORD *)v6 = v62 + 2;
          v93 = v8;
          v92 = 0;
          v6 = v61 - 72;
          v65 = *((_QWORD *)v61 - 9);
          v91 = 1;
          if ((v65 & 1) == 0)
          {
LABEL_123:
            v66 = v6 + 8;
            v67 = 8;
            goto LABEL_124;
          }
        }
      }
      else
      {
        *(v61 - 84) = 1;
        v93 = v8;
        v92 = 0;
        v6 = v61 - 72;
        v65 = *((_QWORD *)v61 - 9);
        v91 = 1;
        if ((v65 & 1) == 0)
          goto LABEL_123;
      }
      v66 = (char *)*((_QWORD *)v61 - 8);
      v67 = *((_QWORD *)v61 - 7);
LABEL_124:
      if (v65 >> 1 == v67)
      {
        v6 = absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v6, &v93, &v92, &v91);
        if (v8 >= 3)
          goto LABEL_180;
      }
      else
      {
        if (!v66)
          goto LABEL_173;
        v69 = &v66[8 * (v65 >> 1)];
        *(_DWORD *)v69 = v8;
        *((_WORD *)v69 + 2) = 256;
        *(_QWORD *)v6 = v65 + 2;
        if (v8 >= 3)
          goto LABEL_180;
      }
      v9 = 1;
      *((_QWORD *)this + 3) |= 1 << v8;
      v7 = *((_DWORD *)this + 2);
      v10 = v8;
LABEL_107:
      ++v8;
    }
    while ((uint64_t)v8 < v7);
  }
}

void webrtc::ScalabilityStructureKeySvc::OnEncodeDone(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  unint64_t *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  void *__p;
  char **v46;
  char v47;
  int v48;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 12);
  if (v6 == 1)
  {
    if (v7 >= 3)
      abort();
    *(_QWORD *)(a1 + 32) |= 1 << v7;
  }
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  v8 = a3 + 176;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)(a3 + 200) = 0xFFFFFFFFLL;
  *(_DWORD *)a3 = v7;
  *(_DWORD *)(a3 + 4) = v6;
  if (a3 + 104 == a2 + 16)
    goto LABEL_72;
  v9 = *(_QWORD *)(a2 + 16);
  if ((v9 & 1) != 0)
    v10 = *(_QWORD *)(a2 + 24);
  else
    v10 = a2 + 24;
  absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::CodecBufferUsage>,webrtc::CodecBufferUsage const*>>((unint64_t *)(a3 + 104), v10, v9 >> 1);
  for (i = *(_QWORD *)(a3 + 8); ; i = 0)
  {
    v46 = (char **)v8;
    v12 = (unint64_t *)(a3 + 8);
    v13 = *(_DWORD *)(a1 + 8);
    v14 = *(int *)(a1 + 12) * (uint64_t)v13;
    v15 = *(_QWORD *)(a3 + 24);
    if ((i & 1) != 0)
      v16 = *(int **)(a3 + 16);
    else
      v16 = (int *)(a3 + 16);
    if ((i & 1) == 0)
      v15 = 10;
    if (v15 < v14)
    {
      __p = *(void **)(a3 + 16);
      v17 = 2 * v15;
      if (v17 <= v14)
        v18 = *(int *)(a1 + 12) * (uint64_t)v13;
      else
        v18 = v17;
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v19 = (char *)operator new(4 * v18);
      v20 = v19;
      if (i >= 2)
      {
        v21 = 0;
        v22 = i >> 1;
        if (i < 0x10)
          goto LABEL_25;
        if ((unint64_t)(v19 - (char *)v16) < 0x20)
          goto LABEL_25;
        v21 = v22 & 0x7FFFFFFFFFFFFFF8;
        v23 = v19 + 16;
        v24 = (__int128 *)(v16 + 4);
        v25 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 8;
        }
        while (v25);
        v16 += v22 & 0x7FFFFFFFFFFFFFF8;
        if (v22 != v21)
        {
LABEL_25:
          v27 = v22 - v21;
          v28 = &v19[4 * v21];
          do
          {
            v29 = *v16++;
            *(_DWORD *)v28 = v29;
            v28 += 4;
            --v27;
          }
          while (v27);
        }
      }
      if ((i & 1) != 0)
      {
        operator delete(__p);
        i = *v12;
        v13 = *(_DWORD *)(a1 + 8);
      }
      *(_QWORD *)(a3 + 16) = v20;
      *(_QWORD *)(a3 + 24) = v18;
      *(_QWORD *)(a3 + 8) = i | 1;
    }
    if (v13 < 1)
      break;
    v30 = *(_DWORD *)(a1 + 12);
    if (v30 < 1)
      break;
    v31 = 0;
    v8 = 1;
    while (v30 < 1)
    {
LABEL_34:
      if (++v31 >= v13)
        goto LABEL_63;
    }
    v32 = 0;
    while (1)
    {
      while (1)
      {
        v33 = *(_DWORD *)(a2 + 8);
        if (*(_BYTE *)(a2 + 4) || *(_DWORD *)a2 == 1)
        {
          v35 = 2 * (v33 <= v31);
        }
        else if (v33 == v31)
        {
          v36 = *(_DWORD *)(a2 + 12);
          v37 = v32 != v36 || v32 == 0;
          v38 = v37 ? 2 : 1;
          v35 = v36 <= v32 ? v38 : 0;
        }
        else
        {
          v35 = 0;
        }
        v48 = v35;
        v39 = *(_QWORD *)(a3 + 8);
        v40 = *(_QWORD *)(a3 + 16);
        if ((v39 & 1) != 0)
        {
          v41 = *(_QWORD *)(a3 + 24);
        }
        else
        {
          v40 = a3 + 16;
          v41 = 10;
        }
        if (v39 >> 1 != v41)
          break;
        absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>(a3 + 8, &v48);
        v30 = *(_DWORD *)(a1 + 12);
        if (++v32 >= v30)
        {
LABEL_33:
          v13 = *(_DWORD *)(a1 + 8);
          goto LABEL_34;
        }
      }
      if (!v40)
        break;
      *(_DWORD *)(v40 + 4 * (v39 >> 1)) = v35;
      *v12 = v39 + 2;
      if (++v32 >= v30)
        goto LABEL_33;
    }
    __break(1u);
LABEL_72:
    ;
  }
LABEL_63:
  v47 = 0;
  std::vector<BOOL>::assign(v46, v13, &v47);
  if (*(_BYTE *)(a2 + 4) || *(_DWORD *)a2 == 1)
  {
    v42 = *(int *)(a2 + 8);
    v43 = *(int *)(a1 + 8);
    if ((int)v42 < (int)v43)
    {
      v44 = *v46;
      do
      {
        *(_QWORD *)&v44[(v42 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v42;
        ++v42;
      }
      while (v43 != v42);
    }
  }
  else if (!*(_DWORD *)(a2 + 12))
  {
    *(_QWORD *)&(*v46)[((unint64_t)*(int *)(a2 + 8) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(a3 + 200) = *(_QWORD *)(a1 + 40);
}

uint64_t webrtc::ScalabilityStructureKeySvc::OnRatesUpdated(uint64_t this, const webrtc::VideoBitrateAllocation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v8 = *(unsigned int *)(this + 8);
  if ((int)v8 >= 1)
  {
    v9 = *(_DWORD *)(this + 12);
    v10 = v9;
    if (v9 > 1)
    {
      v11 = 0;
      v12 = 5;
      while (1)
      {
        if (v11 == 5)
          goto LABEL_91;
        v13 = (char *)a2 + 32 * v11;
        v14 = v13[8];
        if (v13[8])
          v14 = *((_DWORD *)v13 + 1);
        v15 = v10 * v11;
        if ((v10 * v11) > 0x1F)
          goto LABEL_90;
        v16 = 1 << v15;
        if (!v14)
          break;
        v17 = *(_QWORD *)(this + 40) | v16;
        *(_QWORD *)(this + 40) = v17;
        if (((*(_QWORD *)(this + 24) >> v11) & 1) != 0)
        {
          v18 = (char *)a2 + 32 * v11;
          v19 = v15 + 1;
          v20 = v15 > 0x1E;
          if (!v18[16])
            goto LABEL_27;
        }
        else
        {
          *(_DWORD *)(this + 16) = 0;
          v18 = (char *)a2 + 32 * v11;
          v19 = v15 + 1;
          v20 = v15 > 0x1E;
          if (!v18[16])
          {
LABEL_27:
            if (v20)
              goto LABEL_90;
LABEL_28:
            v21 = 1 << v19;
LABEL_29:
            v22 = v17 & ~v21;
            *(_QWORD *)(this + 40) = v22;
            if ((_DWORD)v10 == 2)
              goto LABEL_4;
            if (v15 > 0x1D)
              goto LABEL_90;
            v24 = v15 + 2;
LABEL_32:
            v25 = 1 << v24;
LABEL_33:
            v26 = v22 & ~v25;
            *(_QWORD *)(this + 40) = v26;
            if ((_DWORD)v10 == 3)
              goto LABEL_4;
            if (v15 > 0x1C)
              goto LABEL_90;
            v28 = v15 + 3;
LABEL_36:
            v30 = 1 << v28;
            goto LABEL_37;
          }
        }
        if (v20)
          goto LABEL_90;
        v21 = 1 << v19;
        if (!*((_DWORD *)v18 + 3))
          goto LABEL_29;
        v22 = v17 | v21;
        *(_QWORD *)(this + 40) = v22;
        if ((_DWORD)v10 == 2)
          goto LABEL_4;
        v23 = (char *)a2 + 32 * v11;
        v24 = v15 + 2;
        if (!v23[24])
        {
          if (v15 > 0x1D)
            goto LABEL_90;
          goto LABEL_32;
        }
        if (v15 > 0x1D)
          goto LABEL_90;
        v25 = 1 << v24;
        if (!*((_DWORD *)v23 + 5))
          goto LABEL_33;
        v26 = v22 | v25;
        *(_QWORD *)(this + 40) = v26;
        if ((_DWORD)v10 == 3)
          goto LABEL_4;
        v27 = (char *)a2 + 32 * v11;
        v28 = v15 + 3;
        if (!v27[32])
        {
          if (v15 > 0x1C)
            goto LABEL_90;
          goto LABEL_36;
        }
        if (v15 > 0x1C)
          goto LABEL_90;
        v29 = *((_DWORD *)v27 + 7);
        v30 = 1 << v28;
        if (v29)
        {
          v31 = v26 | v30;
          v32 = 1;
          *(_QWORD *)(this + 40) = v31;
          if ((_DWORD)v10 == 4)
            goto LABEL_4;
          goto LABEL_38;
        }
LABEL_37:
        v32 = 0;
        v31 = v26 & ~v30;
        *(_QWORD *)(this + 40) = v31;
        if ((_DWORD)v10 == 4)
          goto LABEL_4;
LABEL_38:
        if ((v32 & 1) != 0)
          goto LABEL_92;
        v33 = v15 + 4;
        if (v33 > 0x1F)
          goto LABEL_90;
        v34 = v31 & ~(1 << v33);
        *(_QWORD *)(this + 40) = v34;
        if ((_DWORD)v10 != 5)
        {
          v35 = v12;
          v36 = v10 - 5;
          while (v35 <= 0x1F)
          {
            v34 &= ~(1 << v35);
            *(_QWORD *)(this + 40) = v34;
            ++v35;
            if (!--v36)
              goto LABEL_4;
          }
LABEL_90:
          abort();
        }
LABEL_4:
        ++v11;
        v12 += v10;
        if (v11 == v8)
          return this;
      }
      v17 = *(_QWORD *)(this + 40) & ~v16;
      *(_QWORD *)(this + 40) = v17;
      if (v15 > 0x1E)
        goto LABEL_90;
      v19 = v15 + 1;
      goto LABEL_28;
    }
    v37 = *(_QWORD *)(this + 40);
    if (!*((_BYTE *)a2 + 8) || *((_DWORD *)a2 + 1) == 0)
    {
      v39 = v37 & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)(this + 40) = v39;
    }
    else
    {
      v39 = v37 | 1;
      *(_QWORD *)(this + 40) = v39;
      if ((*(_BYTE *)(this + 24) & 1) == 0)
        *(_DWORD *)(this + 16) = 0;
    }
    if ((_DWORD)v8 != 1)
    {
      if (*((_BYTE *)a2 + 40))
      {
        if (v10 > 0x1F)
          goto LABEL_90;
        v40 = 1 << v10;
        if (*((_DWORD *)a2 + 9))
        {
          v41 = v39 | v40;
          *(_QWORD *)(this + 40) = v41;
          if ((*(_BYTE *)(this + 24) & 2) == 0)
            *(_DWORD *)(this + 16) = 0;
          if ((_DWORD)v8 == 2)
            return this;
LABEL_68:
          if (*((_BYTE *)a2 + 72))
          {
            v42 = 1 << (2 * v10);
            if (*((_DWORD *)a2 + 17))
            {
              v43 = v41 | v42;
              *(_QWORD *)(this + 40) = v43;
              if ((*(_BYTE *)(this + 24) & 4) == 0)
                *(_DWORD *)(this + 16) = 0;
LABEL_74:
              if ((_DWORD)v8 == 3)
                return this;
              if (*((_BYTE *)a2 + 104))
              {
                v44 = 1 << (3 * v10);
                if (*((_DWORD *)a2 + 25))
                {
                  v45 = v43 | v44;
                  *(_QWORD *)(this + 40) = v45;
                  if ((*(_BYTE *)(this + 24) & 8) == 0)
                    *(_DWORD *)(this + 16) = 0;
LABEL_81:
                  if ((_DWORD)v8 == 4)
                    return this;
                  if (*((_BYTE *)a2 + 136))
                  {
                    v46 = 1 << (4 * v10);
                    if (*((_DWORD *)a2 + 33))
                    {
                      *(_QWORD *)(this + 40) = v45 | v46;
                      if ((*(_BYTE *)(this + 24) & 0x10) == 0)
                        *(_DWORD *)(this + 16) = 0;
LABEL_88:
                      if ((_DWORD)v8 != 5)
                      {
LABEL_91:
                        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 54, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, 5);
LABEL_92:
                        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 55, "temporal_index < kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, 4);
                        JUMPOUT(0x2087D10C4);
                      }
                      return this;
                    }
                  }
                  else
                  {
                    v46 = 1 << (4 * v10);
                  }
                  *(_QWORD *)(this + 40) = v45 & ~v46;
                  goto LABEL_88;
                }
              }
              else
              {
                v44 = 1 << (3 * v10);
              }
              v45 = v43 & ~v44;
              *(_QWORD *)(this + 40) = v45;
              goto LABEL_81;
            }
          }
          else
          {
            v42 = 1 << (2 * v10);
          }
          v43 = v41 & ~v42;
          *(_QWORD *)(this + 40) = v43;
          goto LABEL_74;
        }
      }
      else
      {
        if (v10 > 0x1F)
          goto LABEL_90;
        v40 = 1 << v10;
      }
      v41 = v39 & ~v40;
      *(_QWORD *)(this + 40) = v41;
      if ((_DWORD)v8 == 2)
        return this;
      goto LABEL_68;
    }
  }
  return this;
}

void webrtc::ScalabilityStructureL2T1Key::~ScalabilityStructureL2T1Key(webrtc::ScalabilityStructureL2T1Key *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL2T1Key::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x200000000;
  *(_DWORD *)(a1 + 8) = 2;
  *(_QWORD *)&v13 = 0x100000000;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v13, 2uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 4uLL);
  v4 = *v3;
  if (*(_QWORD *)(a1 + 112) == v4)
    goto LABEL_14;
  *(_DWORD *)v4 = 0;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    operator delete(*(void **)(v4 + 16));
  *(_QWORD *)(v4 + 8) = 4;
  *(_QWORD *)(v4 + 16) = 2;
  *(_OWORD *)(v4 + 24) = v13;
  *(_OWORD *)(v4 + 40) = v14;
  *(_QWORD *)&v13 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 80), (uint64_t)&v13, 2uLL);
  v12 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 56), (uint64_t)&v12, 1uLL);
  v5 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v5) >> 3)) <= 1)
    goto LABEL_14;
  *(_DWORD *)(v5 + 104) = 0;
  if ((*(_BYTE *)(v5 + 112) & 1) != 0)
    operator delete(*(void **)(v5 + 120));
  *(_QWORD *)(v5 + 112) = 4;
  *(_QWORD *)(v5 + 120) = 0x200000002;
  v6 = v14;
  *(_OWORD *)(v5 + 128) = v13;
  *(_OWORD *)(v5 + 144) = v6;
  *(_QWORD *)&v13 = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 184), (uint64_t)&v13, 2uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 2)
    goto LABEL_14;
  *(_DWORD *)(v7 + 208) = 1;
  if ((*(_BYTE *)(v7 + 216) & 1) != 0)
    operator delete(*(void **)(v7 + 224));
  *(_QWORD *)(v7 + 216) = 4;
  *(_QWORD *)(v7 + 224) = 0x200000000;
  v8 = v14;
  *(_OWORD *)(v7 + 232) = v13;
  *(_OWORD *)(v7 + 248) = v8;
  *(_QWORD *)&v13 = 0x200000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 288), (uint64_t)&v13, 2uLL);
  v12 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 264), (uint64_t)&v12, 1uLL);
  v10 = a1 + 104;
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v10 + 8) - v9) >> 3)) <= 3)
LABEL_14:
    __break(1u);
  *(_DWORD *)(v9 + 312) = 1;
  if ((*(_BYTE *)(v9 + 320) & 1) != 0)
    operator delete(*(void **)(v9 + 328));
  *(_QWORD *)(v9 + 320) = 4;
  *(_QWORD *)(v9 + 328) = 0x200000000;
  v11 = v14;
  *(_OWORD *)(v9 + 336) = v13;
  *(_OWORD *)(v9 + 352) = v11;
  *(_QWORD *)&v13 = 0x100000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 392), (uint64_t)&v13, 2uLL);
  v12 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 368), (uint64_t)&v12, 1uLL);
}

void webrtc::ScalabilityStructureL2T2Key::~ScalabilityStructureL2T2Key(webrtc::ScalabilityStructureL2T2Key *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL2T2Key::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x400000000;
  *(_DWORD *)(a1 + 8) = 2;
  v18 = xmmword_208F1AD80;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v18, 4uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 6uLL);
  v4 = *v3;
  if (*(_QWORD *)(a1 + 112) == v4)
    goto LABEL_20;
  *(_QWORD *)v4 = 0;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    operator delete(*(void **)(v4 + 16));
  *(_QWORD *)(v4 + 8) = 8;
  *(_QWORD *)&v5 = 0x200000002;
  *((_QWORD *)&v5 + 1) = 0x200000002;
  v6 = v18;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 48) = v19;
  *(_QWORD *)&v18 = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 80), (uint64_t)&v18, 2uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 1)
    goto LABEL_20;
  *(_QWORD *)(v7 + 104) = 0;
  if ((*(_BYTE *)(v7 + 112) & 1) != 0)
    operator delete(*(void **)(v7 + 120));
  *(_QWORD *)(v7 + 112) = 8;
  *(_OWORD *)(v7 + 120) = xmmword_208F1AF70;
  *(_OWORD *)(v7 + 136) = v18;
  *(_QWORD *)(v7 + 152) = v19;
  *(_QWORD *)&v18 = 0x300000004;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 184), (uint64_t)&v18, 2uLL);
  v17 = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 160), (uint64_t)&v17, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 2)
    goto LABEL_20;
  *(_QWORD *)(v8 + 208) = 0x100000000;
  if ((*(_BYTE *)(v8 + 216) & 1) != 0)
    operator delete(*(void **)(v8 + 224));
  *(_QWORD *)(v8 + 216) = 8;
  v9 = v18;
  *(_OWORD *)(v8 + 224) = xmmword_208F05140;
  *(_OWORD *)(v8 + 240) = v9;
  *(_QWORD *)(v8 + 256) = v19;
  *(_QWORD *)&v18 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 288), (uint64_t)&v18, 2uLL);
  v17 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 264), (uint64_t)&v17, 1uLL);
  v10 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v10) >> 3)) <= 3)
    goto LABEL_20;
  *(_QWORD *)(v10 + 312) = 1;
  if ((*(_BYTE *)(v10 + 320) & 1) != 0)
    operator delete(*(void **)(v10 + 328));
  *(_QWORD *)(v10 + 320) = 8;
  *(_QWORD *)(v10 + 360) = v19;
  v11 = v18;
  *(_OWORD *)(v10 + 328) = xmmword_208F1ADB0;
  *(_OWORD *)(v10 + 344) = v11;
  *(_QWORD *)&v18 = 0x100000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 392), (uint64_t)&v18, 2uLL);
  v17 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 368), (uint64_t)&v17, 1uLL);
  v12 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v12) >> 3)) <= 4)
    goto LABEL_20;
  *(_QWORD *)(v12 + 416) = 1;
  if ((*(_BYTE *)(v12 + 424) & 1) != 0)
    operator delete(*(void **)(v12 + 432));
  *(_QWORD *)(v12 + 424) = 8;
  v13 = v18;
  *(_OWORD *)(v12 + 432) = xmmword_208F1ADB0;
  *(_OWORD *)(v12 + 448) = v13;
  *(_QWORD *)(v12 + 464) = v19;
  *(_QWORD *)&v18 = 0x400000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 496), (uint64_t)&v18, 2uLL);
  v17 = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 472), (uint64_t)&v17, 1uLL);
  v15 = a1 + 104;
  v14 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v15 + 8) - v14) >> 3)) <= 5)
LABEL_20:
    __break(1u);
  *(_QWORD *)(v14 + 520) = 0x100000001;
  if ((*(_BYTE *)(v14 + 528) & 1) != 0)
    operator delete(*(void **)(v14 + 536));
  *(_QWORD *)(v14 + 528) = 8;
  *(_QWORD *)(v14 + 568) = v19;
  v16 = v18;
  *(_OWORD *)(v14 + 536) = xmmword_208F08B10;
  *(_OWORD *)(v14 + 552) = v16;
  *(_QWORD *)&v18 = 0x200000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 600), (uint64_t)&v18, 2uLL);
  v17 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 576), (uint64_t)&v17, 1uLL);
}

void webrtc::ScalabilityStructureL2T3Key::~ScalabilityStructureL2T3Key(webrtc::ScalabilityStructureL2T3Key *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL2T3Key::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = 0x600000000;
  *(_DWORD *)(a1 + 8) = 2;
  v17 = xmmword_208F1AF10;
  v18 = 0x100000001;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v17, 6uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 0xAuLL);
  v4 = *v3;
  if (*(_QWORD *)(a1 + 112) == v4)
    goto LABEL_32;
  *(_QWORD *)v4 = 0;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    operator delete(*(void **)(v4 + 16));
  *(_QWORD *)(v4 + 8) = 12;
  *(_QWORD *)&v5 = 0x200000002;
  *((_QWORD *)&v5 + 1) = 0x200000002;
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = 0x200000002;
  *(_OWORD *)(v4 + 40) = v17;
  *(_QWORD *)&v17 = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 80), (uint64_t)&v17, 2uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 1)
    goto LABEL_32;
  *(_QWORD *)(v6 + 104) = 0;
  if ((*(_BYTE *)(v6 + 112) & 1) != 0)
    operator delete(*(void **)(v6 + 120));
  *(_QWORD *)(v6 + 112) = 12;
  *(_OWORD *)(v6 + 120) = xmmword_208F08AE0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_OWORD *)(v6 + 144) = v17;
  *(_QWORD *)&v17 = 0x700000008;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 184), (uint64_t)&v17, 2uLL);
  v16 = 8;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 160), (uint64_t)&v16, 1uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 2)
    goto LABEL_32;
  *(_QWORD *)(v7 + 208) = 0x100000000;
  if ((*(_BYTE *)(v7 + 216) & 1) != 0)
    operator delete(*(void **)(v7 + 224));
  *(_QWORD *)(v7 + 216) = 12;
  *(_OWORD *)(v7 + 224) = xmmword_208F1ADD0;
  *(_QWORD *)(v7 + 240) = 0;
  *(_OWORD *)(v7 + 248) = v17;
  *(_QWORD *)&v17 = 0x300000004;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 288), (uint64_t)&v17, 2uLL);
  v16 = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 264), (uint64_t)&v16, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 3)
    goto LABEL_32;
  *(_QWORD *)(v8 + 312) = 0x200000000;
  if ((*(_BYTE *)(v8 + 320) & 1) != 0)
    operator delete(*(void **)(v8 + 328));
  *(_QWORD *)(v8 + 320) = 12;
  *(_OWORD *)(v8 + 328) = xmmword_208F05120;
  *(_QWORD *)(v8 + 344) = 0;
  *(_OWORD *)(v8 + 352) = v17;
  *(_QWORD *)&v17 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 392), (uint64_t)&v17, 2uLL);
  v16 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 368), (uint64_t)&v16, 1uLL);
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v9) >> 3)) <= 4)
    goto LABEL_32;
  *(_QWORD *)(v9 + 416) = 0x200000000;
  if ((*(_BYTE *)(v9 + 424) & 1) != 0)
    operator delete(*(void **)(v9 + 432));
  *(_QWORD *)(v9 + 424) = 12;
  *(_OWORD *)(v9 + 432) = xmmword_208F05120;
  *(_QWORD *)(v9 + 448) = 0;
  *(_OWORD *)(v9 + 456) = v17;
  *(_QWORD *)&v17 = 0x500000006;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 496), (uint64_t)&v17, 2uLL);
  v16 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 472), (uint64_t)&v16, 1uLL);
  v10 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v10) >> 3)) <= 5)
    goto LABEL_32;
  *(_QWORD *)(v10 + 520) = 1;
  if ((*(_BYTE *)(v10 + 528) & 1) != 0)
    operator delete(*(void **)(v10 + 536));
  *(_QWORD *)(v10 + 528) = 12;
  *(_OWORD *)(v10 + 536) = xmmword_208F1ADC0;
  *(_QWORD *)(v10 + 552) = 0x200000002;
  *(_OWORD *)(v10 + 560) = v17;
  *(_QWORD *)&v17 = 0x100000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 600), (uint64_t)&v17, 2uLL);
  v16 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 576), (uint64_t)&v16, 1uLL);
  v11 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v11) >> 3)) <= 6)
    goto LABEL_32;
  *(_QWORD *)(v11 + 624) = 1;
  if ((*(_BYTE *)(v11 + 632) & 1) != 0)
    operator delete(*(void **)(v11 + 640));
  *(_QWORD *)(v11 + 632) = 12;
  *(_OWORD *)(v11 + 640) = xmmword_208F1ADC0;
  *(_QWORD *)(v11 + 656) = 0x200000002;
  *(_OWORD *)(v11 + 664) = v17;
  *(_QWORD *)&v17 = 0x800000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 704), (uint64_t)&v17, 2uLL);
  v16 = 8;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 680), (uint64_t)&v16, 1uLL);
  v12 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v12) >> 3)) <= 7)
    goto LABEL_32;
  *(_QWORD *)(v12 + 728) = 0x100000001;
  if ((*(_BYTE *)(v12 + 736) & 1) != 0)
    operator delete(*(void **)(v12 + 744));
  *(_QWORD *)(v12 + 736) = 12;
  *(_QWORD *)(v12 + 752) = 0;
  *(_QWORD *)(v12 + 744) = 0;
  *(_QWORD *)(v12 + 760) = 0x200000001;
  *(_OWORD *)(v12 + 768) = v17;
  *(_QWORD *)&v17 = 0x400000005;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 808), (uint64_t)&v17, 2uLL);
  v16 = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 784), (uint64_t)&v16, 1uLL);
  v13 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v13) >> 3)) <= 8)
    goto LABEL_32;
  *(_QWORD *)(v13 + 832) = 0x200000001;
  if ((*(_BYTE *)(v13 + 840) & 1) != 0)
    operator delete(*(void **)(v13 + 848));
  *(_QWORD *)(v13 + 840) = 12;
  *(_QWORD *)(v13 + 856) = 0;
  *(_QWORD *)(v13 + 848) = 0;
  *(_QWORD *)(v13 + 864) = 0x100000000;
  *(_OWORD *)(v13 + 872) = v17;
  *(_QWORD *)&v17 = 0x200000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 912), (uint64_t)&v17, 2uLL);
  v16 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 888), (uint64_t)&v16, 1uLL);
  v15 = a1 + 104;
  v14 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v15 + 8) - v14) >> 3)) <= 9)
LABEL_32:
    __break(1u);
  *(_QWORD *)(v14 + 936) = 0x200000001;
  if ((*(_BYTE *)(v14 + 944) & 1) != 0)
    operator delete(*(void **)(v14 + 952));
  *(_QWORD *)(v14 + 944) = 12;
  *(_QWORD *)(v14 + 960) = 0;
  *(_QWORD *)(v14 + 952) = 0;
  *(_QWORD *)(v14 + 968) = 0x100000000;
  *(_OWORD *)(v14 + 976) = v17;
  *(_QWORD *)&v17 = 0x600000007;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 1016), (uint64_t)&v17, 2uLL);
  v16 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 992), (uint64_t)&v16, 1uLL);
}

void webrtc::ScalabilityStructureL3T1Key::~ScalabilityStructureL3T1Key(webrtc::ScalabilityStructureL3T1Key *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL3T1Key::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE v12[28];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x300000000;
  *(_DWORD *)(a1 + 8) = 3;
  *(_QWORD *)v12 = 0x100000000;
  *(_DWORD *)&v12[8] = 2;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)v12, 3uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 6uLL);
  v4 = *v3;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v4) >> 3)) <= 1)
    goto LABEL_20;
  *(_DWORD *)(v4 + 104) = 0;
  if ((*(_BYTE *)(v4 + 112) & 1) != 0)
    operator delete(*(void **)(v4 + 120));
  *(_QWORD *)(v4 + 112) = 6;
  *(_QWORD *)(v4 + 120) = 0x200000002;
  *(_DWORD *)(v4 + 128) = 2;
  *(_OWORD *)(v4 + 132) = *(_OWORD *)v12;
  *(_OWORD *)(v4 + 144) = *(_OWORD *)&v12[12];
  *(_QWORD *)v12 = 0;
  *(_DWORD *)&v12[8] = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 184), (uint64_t)v12, 3uLL);
  v5 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v5) >> 3)) <= 3)
    goto LABEL_20;
  *(_DWORD *)(v5 + 312) = 1;
  if ((*(_BYTE *)(v5 + 320) & 1) != 0)
    operator delete(*(void **)(v5 + 328));
  *(_QWORD *)(v5 + 320) = 6;
  *(_QWORD *)(v5 + 328) = 0x200000000;
  *(_DWORD *)(v5 + 336) = 2;
  *(_OWORD *)(v5 + 352) = *(_OWORD *)&v12[12];
  *(_OWORD *)(v5 + 340) = *(_OWORD *)v12;
  *(_QWORD *)v12 = 0x100000001;
  *(_DWORD *)&v12[8] = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 392), (uint64_t)v12, 3uLL);
  v11 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 368), (uint64_t)&v11, 1uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 5)
    goto LABEL_20;
  *(_DWORD *)(v6 + 520) = 2;
  if ((*(_BYTE *)(v6 + 528) & 1) != 0)
    operator delete(*(void **)(v6 + 536));
  *(_QWORD *)(v6 + 528) = 6;
  *(_QWORD *)(v6 + 536) = 0;
  *(_DWORD *)(v6 + 544) = 2;
  *(_OWORD *)(v6 + 560) = *(_OWORD *)&v12[12];
  *(_OWORD *)(v6 + 548) = *(_OWORD *)v12;
  *(_QWORD *)v12 = 0x100000002;
  *(_DWORD *)&v12[8] = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 600), (uint64_t)v12, 3uLL);
  v11 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 576), (uint64_t)&v11, 1uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) == v7)
    goto LABEL_20;
  *(_DWORD *)v7 = 0;
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
    operator delete(*(void **)(v7 + 16));
  *(_QWORD *)(v7 + 8) = 6;
  *(_QWORD *)(v7 + 16) = 2;
  *(_DWORD *)(v7 + 24) = 0;
  *(_OWORD *)(v7 + 28) = *(_OWORD *)v12;
  *(_OWORD *)(v7 + 40) = *(_OWORD *)&v12[12];
  *(_QWORD *)v12 = 0x200000003;
  *(_DWORD *)&v12[8] = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 80), (uint64_t)v12, 3uLL);
  v11 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 56), (uint64_t)&v11, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 2)
    goto LABEL_20;
  *(_DWORD *)(v8 + 208) = 1;
  if ((*(_BYTE *)(v8 + 216) & 1) != 0)
    operator delete(*(void **)(v8 + 224));
  *(_QWORD *)(v8 + 216) = 6;
  *(_QWORD *)(v8 + 224) = 0x200000000;
  *(_DWORD *)(v8 + 232) = 0;
  *(_OWORD *)(v8 + 236) = *(_OWORD *)v12;
  *(_OWORD *)(v8 + 248) = *(_OWORD *)&v12[12];
  *(_QWORD *)v12 = 0x300000001;
  *(_DWORD *)&v12[8] = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 288), (uint64_t)v12, 3uLL);
  v11 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 264), (uint64_t)&v11, 1uLL);
  v10 = a1 + 104;
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v10 + 8) - v9) >> 3)) <= 4)
LABEL_20:
    __break(1u);
  *(_DWORD *)(v9 + 416) = 2;
  if ((*(_BYTE *)(v9 + 424) & 1) != 0)
    operator delete(*(void **)(v9 + 432));
  *(_QWORD *)(v9 + 424) = 6;
  *(_QWORD *)(v9 + 432) = 0;
  *(_DWORD *)(v9 + 440) = 2;
  *(_OWORD *)(v9 + 444) = *(_OWORD *)v12;
  *(_OWORD *)(v9 + 456) = *(_OWORD *)&v12[12];
  *(_QWORD *)v12 = 0x100000002;
  *(_DWORD *)&v12[8] = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 496), (uint64_t)v12, 3uLL);
  v11 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 472), (uint64_t)&v11, 1uLL);
}

void webrtc::ScalabilityStructureL3T2Key::~ScalabilityStructureL3T2Key(webrtc::ScalabilityStructureL3T2Key *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL3T2Key::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = 0x600000000;
  *(_DWORD *)(a1 + 8) = 3;
  v16 = xmmword_208F1AF28;
  v17 = 0x200000002;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v16, 6uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 9uLL);
  v4 = *v3;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v4) >> 3)) <= 1)
    goto LABEL_29;
  *(_QWORD *)(v4 + 104) = 0;
  if ((*(_BYTE *)(v4 + 112) & 1) != 0)
    operator delete(*(void **)(v4 + 120));
  *(_QWORD *)(v4 + 112) = 12;
  *(_QWORD *)&v5 = 0x200000002;
  *((_QWORD *)&v5 + 1) = 0x200000002;
  *(_OWORD *)(v4 + 120) = v5;
  *(_QWORD *)(v4 + 136) = 0x200000002;
  *(_OWORD *)(v4 + 144) = v16;
  *(_QWORD *)&v16 = 0;
  DWORD2(v16) = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 184), (uint64_t)&v16, 3uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 4)
    goto LABEL_29;
  *(_QWORD *)(v6 + 416) = 1;
  if ((*(_BYTE *)(v6 + 424) & 1) != 0)
    operator delete(*(void **)(v6 + 432));
  *(_QWORD *)(v6 + 424) = 12;
  *(_OWORD *)(v6 + 432) = xmmword_208F1ADB0;
  *(_QWORD *)(v6 + 448) = 0x200000002;
  *(_OWORD *)(v6 + 456) = v16;
  *(_QWORD *)&v16 = 0x100000001;
  DWORD2(v16) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 496), (uint64_t)&v16, 3uLL);
  v15 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 472), (uint64_t)&v15, 1uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 7)
    goto LABEL_29;
  *(_QWORD *)(v7 + 728) = 2;
  if ((*(_BYTE *)(v7 + 736) & 1) != 0)
    operator delete(*(void **)(v7 + 744));
  *(_QWORD *)(v7 + 736) = 12;
  *(_QWORD *)(v7 + 752) = 0;
  *(_QWORD *)(v7 + 744) = 0;
  *(_QWORD *)(v7 + 760) = 0x200000002;
  *(_OWORD *)(v7 + 768) = v16;
  *(_QWORD *)&v16 = 0x100000002;
  DWORD2(v16) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 808), (uint64_t)&v16, 3uLL);
  v15 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 784), (uint64_t)&v15, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 2)
    goto LABEL_29;
  *(_QWORD *)(v8 + 208) = 0x100000000;
  if ((*(_BYTE *)(v8 + 216) & 1) != 0)
    operator delete(*(void **)(v8 + 224));
  *(_QWORD *)(v8 + 216) = 12;
  *(_OWORD *)(v8 + 224) = xmmword_208F05140;
  *(_QWORD *)(v8 + 240) = 0;
  *(_OWORD *)(v8 + 248) = v16;
  *(_QWORD *)&v16 = 0x200000003;
  DWORD2(v16) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 288), (uint64_t)&v16, 3uLL);
  v15 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 264), (uint64_t)&v15, 1uLL);
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v9) >> 3)) <= 5)
    goto LABEL_29;
  *(_QWORD *)(v9 + 520) = 0x100000001;
  if ((*(_BYTE *)(v9 + 528) & 1) != 0)
    operator delete(*(void **)(v9 + 536));
  *(_QWORD *)(v9 + 528) = 12;
  *(_OWORD *)(v9 + 536) = xmmword_208F08B10;
  *(_QWORD *)(v9 + 552) = 0;
  *(_OWORD *)(v9 + 560) = v16;
  *(_QWORD *)&v16 = 0x300000004;
  DWORD2(v16) = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 600), (uint64_t)&v16, 3uLL);
  v15 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 576), (uint64_t)&v15, 1uLL);
  v10 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v10) >> 3)) <= 8)
    goto LABEL_29;
  *(_QWORD *)(v10 + 832) = 0x100000002;
  if ((*(_BYTE *)(v10 + 840) & 1) != 0)
    operator delete(*(void **)(v10 + 848));
  *(_QWORD *)(v10 + 840) = 12;
  *(_QWORD *)(v10 + 856) = 0;
  *(_QWORD *)(v10 + 848) = 0;
  *(_QWORD *)(v10 + 864) = 0x100000000;
  *(_OWORD *)(v10 + 872) = v16;
  *(_QWORD *)&v16 = 0x400000005;
  DWORD2(v16) = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 912), (uint64_t)&v16, 3uLL);
  v15 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 888), (uint64_t)&v15, 1uLL);
  v11 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) == v11)
    goto LABEL_29;
  *(_QWORD *)v11 = 0;
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    operator delete(*(void **)(v11 + 16));
  *(_QWORD *)(v11 + 8) = 12;
  *(_OWORD *)(v11 + 16) = xmmword_208F1AF70;
  *(_QWORD *)(v11 + 32) = 0;
  *(_OWORD *)(v11 + 40) = v16;
  *(_QWORD *)&v16 = 0x500000006;
  DWORD2(v16) = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 80), (uint64_t)&v16, 3uLL);
  v15 = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 56), (uint64_t)&v15, 1uLL);
  v12 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v12) >> 3)) <= 3)
    goto LABEL_29;
  *(_QWORD *)(v12 + 312) = 1;
  if ((*(_BYTE *)(v12 + 320) & 1) != 0)
    operator delete(*(void **)(v12 + 328));
  *(_QWORD *)(v12 + 320) = 12;
  *(_OWORD *)(v12 + 328) = xmmword_208F1ADB0;
  *(_QWORD *)(v12 + 344) = 0;
  *(_OWORD *)(v12 + 352) = v16;
  *(_QWORD *)&v16 = 0x600000001;
  DWORD2(v16) = 5;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 392), (uint64_t)&v16, 3uLL);
  v15 = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 368), (uint64_t)&v15, 1uLL);
  v14 = a1 + 104;
  v13 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v14 + 8) - v13) >> 3)) <= 6)
LABEL_29:
    __break(1u);
  *(_QWORD *)(v13 + 624) = 2;
  if ((*(_BYTE *)(v13 + 632) & 1) != 0)
    operator delete(*(void **)(v13 + 640));
  *(_QWORD *)(v13 + 632) = 12;
  *(_QWORD *)(v13 + 648) = 0;
  *(_QWORD *)(v13 + 640) = 0;
  *(_QWORD *)(v13 + 656) = 0x200000002;
  *(_OWORD *)(v13 + 664) = v16;
  *(_QWORD *)&v16 = 0x100000002;
  DWORD2(v16) = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 704), (uint64_t)&v16, 3uLL);
  v15 = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 680), (uint64_t)&v15, 1uLL);
}

void webrtc::ScalabilityStructureL3T3Key::~ScalabilityStructureL3T3Key(webrtc::ScalabilityStructureL3T3Key *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureL3T3Key::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _OWORD v23[2];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x900000000;
  *(_DWORD *)(a1 + 8) = 3;
  v23[0] = xmmword_208F1AF40;
  v23[1] = unk_208F1AF50;
  v24 = 2;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)v23, 9uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 0xFuLL);
  v4 = *v3;
  if (*(_QWORD *)(a1 + 112) == v4)
    goto LABEL_47;
  *(_QWORD *)v4 = 0;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    operator delete(*(void **)(v4 + 16));
  *(_QWORD *)(v4 + 8) = 18;
  *(_QWORD *)&v5 = 0x200000002;
  *((_QWORD *)&v5 + 1) = 0x200000002;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v5;
  *(_DWORD *)(v4 + 48) = 2;
  *(_QWORD *)&v23[0] = 0;
  DWORD2(v23[0]) = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 80), (uint64_t)v23, 3uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 5)
    goto LABEL_47;
  *(_QWORD *)(v6 + 520) = 1;
  if ((*(_BYTE *)(v6 + 528) & 1) != 0)
    operator delete(*(void **)(v6 + 536));
  *(_QWORD *)(v6 + 528) = 18;
  *(_QWORD *)&v7 = 0x200000002;
  *((_QWORD *)&v7 + 1) = 0x200000002;
  *(_OWORD *)(v6 + 536) = xmmword_208F1ADC0;
  *(_OWORD *)(v6 + 552) = v7;
  *(_DWORD *)(v6 + 568) = 2;
  *(_QWORD *)&v23[0] = 0x100000001;
  DWORD2(v23[0]) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 600), (uint64_t)v23, 3uLL);
  v22 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 576), (uint64_t)&v22, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 0xA)
    goto LABEL_47;
  *(_QWORD *)(v8 + 1040) = 2;
  if ((*(_BYTE *)(v8 + 1048) & 1) != 0)
    operator delete(*(void **)(v8 + 1056));
  *(_QWORD *)(v8 + 1048) = 18;
  *(_QWORD *)(v8 + 1064) = 0;
  *(_QWORD *)(v8 + 1056) = 0;
  *(_OWORD *)(v8 + 1072) = xmmword_208F1ADB0;
  *(_DWORD *)(v8 + 1088) = 2;
  *(_QWORD *)&v23[0] = 0x100000002;
  DWORD2(v23[0]) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 1120), (uint64_t)v23, 3uLL);
  v22 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 1096), (uint64_t)&v22, 1uLL);
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v9) >> 3)) <= 3)
    goto LABEL_47;
  *(_QWORD *)(v9 + 312) = 0x200000000;
  if ((*(_BYTE *)(v9 + 320) & 1) != 0)
    operator delete(*(void **)(v9 + 328));
  *(_QWORD *)(v9 + 320) = 18;
  *(_OWORD *)(v9 + 328) = xmmword_208F05120;
  *(_QWORD *)(v9 + 344) = 0;
  *(_QWORD *)(v9 + 352) = 0;
  *(_DWORD *)(v9 + 360) = 0;
  *(_QWORD *)&v23[0] = 0x200000003;
  DWORD2(v23[0]) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 392), (uint64_t)v23, 3uLL);
  v22 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 368), (uint64_t)&v22, 1uLL);
  v10 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v10) >> 3)) <= 8)
    goto LABEL_47;
  *(_QWORD *)(v10 + 832) = 0x200000001;
  if ((*(_BYTE *)(v10 + 840) & 1) != 0)
    operator delete(*(void **)(v10 + 848));
  *(_QWORD *)(v10 + 840) = 18;
  *(_QWORD *)(v10 + 856) = 0;
  *(_QWORD *)(v10 + 848) = 0;
  *(_OWORD *)(v10 + 864) = xmmword_208F05140;
  *(_DWORD *)(v10 + 880) = 0;
  *(_QWORD *)&v23[0] = 0x300000004;
  DWORD2(v23[0]) = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 912), (uint64_t)v23, 3uLL);
  v22 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 888), (uint64_t)&v22, 1uLL);
  v11 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v11) >> 3)) <= 0xD)
    goto LABEL_47;
  *(_QWORD *)(v11 + 1352) = 0x200000002;
  if ((*(_BYTE *)(v11 + 1360) & 1) != 0)
    operator delete(*(void **)(v11 + 1368));
  *(_QWORD *)(v11 + 1360) = 18;
  *(_OWORD *)(v11 + 1368) = 0u;
  *(_OWORD *)(v11 + 1384) = 0u;
  *(_DWORD *)(v11 + 1400) = 1;
  *(_QWORD *)&v23[0] = 0x400000005;
  DWORD2(v23[0]) = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 1432), (uint64_t)v23, 3uLL);
  v22 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 1408), (uint64_t)&v22, 1uLL);
  v12 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v12) >> 3)) <= 2)
    goto LABEL_47;
  *(_QWORD *)(v12 + 208) = 0x100000000;
  if ((*(_BYTE *)(v12 + 216) & 1) != 0)
    operator delete(*(void **)(v12 + 224));
  *(_QWORD *)(v12 + 216) = 18;
  *(_OWORD *)(v12 + 224) = xmmword_208F1ADD0;
  *(_QWORD *)(v12 + 240) = 0;
  *(_QWORD *)(v12 + 248) = 0;
  *(_DWORD *)(v12 + 256) = 0;
  *(_QWORD *)&v23[0] = 0x500000006;
  DWORD2(v23[0]) = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 288), (uint64_t)v23, 3uLL);
  v22 = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 264), (uint64_t)&v22, 1uLL);
  v13 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v13) >> 3)) <= 7)
    goto LABEL_47;
  *(_QWORD *)(v13 + 728) = 0x100000001;
  if ((*(_BYTE *)(v13 + 736) & 1) != 0)
    operator delete(*(void **)(v13 + 744));
  *(_QWORD *)(v13 + 736) = 18;
  *(_QWORD *)(v13 + 744) = 0;
  *(_QWORD *)(v13 + 752) = 0;
  *(_OWORD *)(v13 + 760) = xmmword_208F08A70;
  *(_DWORD *)(v13 + 776) = 0;
  *(_QWORD *)&v23[0] = 0x600000007;
  DWORD2(v23[0]) = 5;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 808), (uint64_t)v23, 3uLL);
  v22 = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 784), (uint64_t)&v22, 1uLL);
  v14 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v14) >> 3)) <= 0xC)
    goto LABEL_47;
  *(_QWORD *)(v14 + 1248) = 0x100000002;
  if ((*(_BYTE *)(v14 + 1256) & 1) != 0)
    operator delete(*(void **)(v14 + 1264));
  *(_QWORD *)(v14 + 1256) = 18;
  *(_QWORD *)(v14 + 1272) = 0;
  *(_QWORD *)(v14 + 1264) = 0;
  *(_OWORD *)(v14 + 1280) = xmmword_208F08B10;
  *(_DWORD *)(v14 + 1296) = 2;
  *(_QWORD *)&v23[0] = 0x700000008;
  DWORD2(v23[0]) = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 1328), (uint64_t)v23, 3uLL);
  v22 = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 1304), (uint64_t)&v22, 1uLL);
  v15 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v15) >> 3)) <= 4)
    goto LABEL_47;
  *(_QWORD *)(v15 + 416) = 0x200000000;
  if ((*(_BYTE *)(v15 + 424) & 1) != 0)
    operator delete(*(void **)(v15 + 432));
  *(_QWORD *)(v15 + 424) = 18;
  *(_OWORD *)(v15 + 432) = xmmword_208F05120;
  *(_QWORD *)(v15 + 448) = 0;
  *(_QWORD *)(v15 + 456) = 0;
  *(_DWORD *)(v15 + 464) = 0;
  *(_QWORD *)&v23[0] = 0x800000009;
  DWORD2(v23[0]) = 7;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v15 + 496), (uint64_t)v23, 3uLL);
  v22 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v15 + 472), (uint64_t)&v22, 1uLL);
  v16 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v16) >> 3)) <= 9)
    goto LABEL_47;
  *(_QWORD *)(v16 + 936) = 0x200000001;
  if ((*(_BYTE *)(v16 + 944) & 1) != 0)
    operator delete(*(void **)(v16 + 952));
  *(_QWORD *)(v16 + 944) = 18;
  *(_QWORD *)(v16 + 952) = 0;
  *(_QWORD *)(v16 + 960) = 0;
  *(_OWORD *)(v16 + 968) = xmmword_208F05140;
  *(_DWORD *)(v16 + 984) = 0;
  *(_QWORD *)&v23[0] = 0x90000000ALL;
  DWORD2(v23[0]) = 8;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v16 + 1016), (uint64_t)v23, 3uLL);
  v22 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v16 + 992), (uint64_t)&v22, 1uLL);
  v17 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v17) >> 3)) <= 0xE)
    goto LABEL_47;
  *(_QWORD *)(v17 + 1456) = 0x200000002;
  if ((*(_BYTE *)(v17 + 1464) & 1) != 0)
    operator delete(*(void **)(v17 + 1472));
  *(_QWORD *)(v17 + 1464) = 18;
  *(_OWORD *)(v17 + 1472) = 0u;
  *(_OWORD *)(v17 + 1488) = 0u;
  *(_DWORD *)(v17 + 1504) = 1;
  *(_QWORD *)&v23[0] = 0xA0000000BLL;
  DWORD2(v23[0]) = 9;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v17 + 1536), (uint64_t)v23, 3uLL);
  v22 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v17 + 1512), (uint64_t)&v22, 1uLL);
  v18 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v18) >> 3)) <= 1)
    goto LABEL_47;
  *(_QWORD *)(v18 + 104) = 0;
  if ((*(_BYTE *)(v18 + 112) & 1) != 0)
    operator delete(*(void **)(v18 + 120));
  *(_QWORD *)(v18 + 112) = 18;
  *(_OWORD *)(v18 + 120) = xmmword_208F08AE0;
  *(_QWORD *)(v18 + 136) = 0;
  *(_QWORD *)(v18 + 144) = 0;
  *(_DWORD *)(v18 + 152) = 0;
  *(_QWORD *)&v23[0] = 0xB0000000CLL;
  DWORD2(v23[0]) = 10;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v18 + 184), (uint64_t)v23, 3uLL);
  v22 = 12;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v18 + 160), (uint64_t)&v22, 1uLL);
  v19 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v19) >> 3)) <= 6)
    goto LABEL_47;
  *(_QWORD *)(v19 + 624) = 1;
  if ((*(_BYTE *)(v19 + 632) & 1) != 0)
    operator delete(*(void **)(v19 + 640));
  *(_QWORD *)(v19 + 632) = 18;
  *(_OWORD *)(v19 + 640) = xmmword_208F1ADC0;
  *(_OWORD *)(v19 + 656) = xmmword_208F1AF70;
  *(_DWORD *)(v19 + 672) = 0;
  *(_QWORD *)&v23[0] = 0xC00000001;
  DWORD2(v23[0]) = 11;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v19 + 704), (uint64_t)v23, 3uLL);
  v22 = 12;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v19 + 680), (uint64_t)&v22, 1uLL);
  v21 = a1 + 104;
  v20 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v21 + 8) - v20) >> 3)) <= 0xB)
LABEL_47:
    __break(1u);
  *(_QWORD *)(v20 + 1144) = 2;
  if ((*(_BYTE *)(v20 + 1152) & 1) != 0)
    operator delete(*(void **)(v20 + 1160));
  *(_QWORD *)(v20 + 1152) = 18;
  *(_QWORD *)(v20 + 1160) = 0;
  *(_QWORD *)(v20 + 1168) = 0;
  *(_OWORD *)(v20 + 1176) = xmmword_208F1ADB0;
  *(_DWORD *)(v20 + 1192) = 2;
  *(_QWORD *)&v23[0] = 0x100000002;
  DWORD2(v23[0]) = 12;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v20 + 1224), (uint64_t)v23, 3uLL);
  v22 = 12;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v20 + 1200), (uint64_t)&v22, 1uLL);
}

void webrtc::ScalabilityStructureL2T2KeyShift::~ScalabilityStructureL2T2KeyShift(webrtc::ScalabilityStructureL2T2KeyShift *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

double webrtc::ScalabilityStructureL2T2KeyShift::StreamConfig@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  double result;

  *(_QWORD *)a1 = 0x200000002;
  *(_QWORD *)&v2 = 0x100000001;
  *((_QWORD *)&v2 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 12) = v2;
  *(_QWORD *)&result = 0x100000002;
  *(_OWORD *)(a1 + 28) = xmmword_208F1AF80;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

void webrtc::ScalabilityStructureL2T2KeyShift::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x400000000;
  *(_DWORD *)(a1 + 8) = 2;
  v20 = xmmword_208F1AD80;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v20, 4uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 7uLL);
  v4 = *v3;
  if (*(_QWORD *)(a1 + 112) == v4)
    goto LABEL_23;
  *(_QWORD *)v4 = 0;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    operator delete(*(void **)(v4 + 16));
  *(_QWORD *)(v4 + 8) = 8;
  *(_QWORD *)&v5 = 0x200000002;
  *((_QWORD *)&v5 + 1) = 0x200000002;
  v6 = v20;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 48) = v21;
  *(_QWORD *)&v20 = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 80), (uint64_t)&v20, 2uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 1)
    goto LABEL_23;
  *(_QWORD *)(v7 + 104) = 0;
  if ((*(_BYTE *)(v7 + 112) & 1) != 0)
    operator delete(*(void **)(v7 + 120));
  *(_QWORD *)(v7 + 112) = 8;
  *(_OWORD *)(v7 + 120) = xmmword_208F1AF70;
  *(_OWORD *)(v7 + 136) = v20;
  *(_QWORD *)(v7 + 152) = v21;
  *(_QWORD *)&v20 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 184), (uint64_t)&v20, 2uLL);
  v19 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 160), (uint64_t)&v19, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 2)
    goto LABEL_23;
  *(_QWORD *)(v8 + 208) = 0;
  if ((*(_BYTE *)(v8 + 216) & 1) != 0)
    operator delete(*(void **)(v8 + 224));
  *(_QWORD *)(v8 + 216) = 8;
  v9 = v20;
  *(_OWORD *)(v8 + 224) = xmmword_208F1AF70;
  *(_OWORD *)(v8 + 240) = v9;
  *(_QWORD *)(v8 + 256) = v21;
  *(_QWORD *)&v20 = 0x100000004;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 288), (uint64_t)&v20, 2uLL);
  v19 = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 264), (uint64_t)&v19, 1uLL);
  v10 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v10) >> 3)) <= 3)
    goto LABEL_23;
  *(_QWORD *)(v10 + 312) = 0x100000000;
  if ((*(_BYTE *)(v10 + 320) & 1) != 0)
    operator delete(*(void **)(v10 + 328));
  *(_QWORD *)(v10 + 320) = 8;
  *(_QWORD *)(v10 + 360) = v21;
  v11 = v20;
  *(_OWORD *)(v10 + 328) = xmmword_208F05140;
  *(_OWORD *)(v10 + 344) = v11;
  *(_QWORD *)&v20 = 0x300000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 392), (uint64_t)&v20, 2uLL);
  v19 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 368), (uint64_t)&v19, 1uLL);
  v12 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v12) >> 3)) <= 4)
    goto LABEL_23;
  *(_QWORD *)(v12 + 416) = 1;
  if ((*(_BYTE *)(v12 + 424) & 1) != 0)
    operator delete(*(void **)(v12 + 432));
  *(_QWORD *)(v12 + 424) = 8;
  v13 = v20;
  *(_OWORD *)(v12 + 432) = xmmword_208F1ADB0;
  *(_OWORD *)(v12 + 448) = v13;
  *(_QWORD *)(v12 + 464) = v21;
  *(_QWORD *)&v20 = 0x100000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 496), (uint64_t)&v20, 2uLL);
  v19 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 472), (uint64_t)&v19, 1uLL);
  v14 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v14) >> 3)) <= 5)
    goto LABEL_23;
  *(_QWORD *)(v14 + 520) = 1;
  if ((*(_BYTE *)(v14 + 528) & 1) != 0)
    operator delete(*(void **)(v14 + 536));
  *(_QWORD *)(v14 + 528) = 8;
  *(_QWORD *)(v14 + 568) = v21;
  v15 = v20;
  *(_OWORD *)(v14 + 536) = xmmword_208F1ADB0;
  *(_OWORD *)(v14 + 552) = v15;
  *(_QWORD *)&v20 = 0x400000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 600), (uint64_t)&v20, 2uLL);
  v19 = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 576), (uint64_t)&v19, 1uLL);
  v17 = a1 + 104;
  v16 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v17 + 8) - v16) >> 3)) <= 6)
LABEL_23:
    __break(1u);
  *(_QWORD *)(v16 + 624) = 0x100000001;
  if ((*(_BYTE *)(v16 + 632) & 1) != 0)
    operator delete(*(void **)(v16 + 640));
  *(_QWORD *)(v16 + 632) = 8;
  v18 = v20;
  *(_OWORD *)(v16 + 640) = xmmword_208F08B10;
  *(_OWORD *)(v16 + 656) = v18;
  *(_QWORD *)(v16 + 672) = v21;
  *(_QWORD *)&v20 = 0x200000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v16 + 704), (uint64_t)&v20, 2uLL);
  v19 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v16 + 680), (uint64_t)&v19, 1uLL);
}

char *webrtc::ScalabilityStructureL2T2KeyShift::NextFrameConfig@<X0>(webrtc::ScalabilityStructureL2T2KeyShift *this@<X0>, int a2@<W1>, char **a3@<X8>)
{
  char *result;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char v49;
  char v50;
  int v51;

  result = (char *)operator new(0xB0uLL);
  *a3 = result;
  a3[1] = result;
  a3[2] = result + 176;
  if (a2)
  {
    *((_DWORD *)this + 2) = 0;
    goto LABEL_3;
  }
  v14 = *((_DWORD *)this + 2);
  switch(v14)
  {
    case 2:
      v16 = *((_QWORD *)this + 2);
      v17 = result;
      if ((v16 & 2) != 0)
      {
        *(_OWORD *)result = 0u;
        *((_OWORD *)result + 1) = 0u;
        *((_QWORD *)result + 10) = 0;
        *((_OWORD *)result + 3) = 0u;
        *((_OWORD *)result + 4) = 0u;
        *((_OWORD *)result + 2) = 0u;
        v17 = result + 88;
        a3[1] = result + 88;
        *((_DWORD *)result + 3) = 1;
        result[28] = 1;
        *((_QWORD *)result + 2) = 2;
      }
      if ((v16 & 4) != 0)
      {
        *((_QWORD *)v17 + 10) = 0;
        *((_OWORD *)v17 + 3) = 0u;
        *((_OWORD *)v17 + 4) = 0u;
        *((_OWORD *)v17 + 1) = 0u;
        *((_OWORD *)v17 + 2) = 0u;
        *(_OWORD *)v17 = 0u;
        v18 = v17 + 88;
        a3[1] = v17 + 88;
        if (result == v17 + 88)
          goto LABEL_74;
        *((_QWORD *)v17 + 1) = 1;
        v51 = 1;
        v50 = 1;
        v19 = v17 + 16;
        v20 = *((_QWORD *)v17 + 2);
        v49 = 1;
        if ((v20 & 1) != 0)
        {
          v21 = (char *)*((_QWORD *)v17 + 3);
          v22 = *((_QWORD *)v17 + 4);
        }
        else
        {
          v21 = v17 + 24;
          v22 = 8;
        }
        if (v20 >> 1 == v22)
        {
          absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v19, &v51, &v50, &v49);
          result = *a3;
          v17 = a3[1];
          if (*a3 != v17)
            goto LABEL_73;
LABEL_36:
          if ((*((_BYTE *)this + 16) & 1) != 0)
          {
            if (v17 >= a3[2])
            {
              result = std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>((void **)a3);
              v31 = result;
              v34 = *a3;
              a3[1] = result;
              if (v34 == result)
                goto LABEL_74;
            }
            else
            {
              if (!v17)
                goto LABEL_74;
              *((_QWORD *)v17 + 10) = 0;
              *((_OWORD *)v17 + 3) = 0u;
              *((_OWORD *)v17 + 4) = 0u;
              *((_OWORD *)v17 + 1) = 0u;
              *((_OWORD *)v17 + 2) = 0u;
              *(_OWORD *)v17 = 0u;
              v31 = v17 + 88;
              a3[1] = v17 + 88;
            }
            *((_QWORD *)v31 - 10) = 0;
            v51 = 0;
            v50 = 1;
            result = v31 - 72;
            v35 = *((_QWORD *)v31 - 9);
            v49 = 1;
            if ((v35 & 1) != 0)
            {
              v36 = (char *)*((_QWORD *)v31 - 8);
              v37 = *((_QWORD *)v31 - 7);
            }
            else
            {
              v36 = v31 - 64;
              v37 = 8;
            }
            if (v35 >> 1 == v37)
              goto LABEL_75;
            if (!v36)
              goto LABEL_74;
            v42 = &v36[8 * (v35 >> 1)];
            *(_DWORD *)v42 = 0;
            *((_WORD *)v42 + 2) = 257;
            v43 = v35 + 2;
            goto LABEL_72;
          }
LABEL_73:
          *((_DWORD *)this + 2) = 1;
          return result;
        }
        if (!v21)
          goto LABEL_74;
        v30 = &v21[8 * (v20 >> 1)];
        *(_DWORD *)v30 = 1;
        *((_WORD *)v30 + 2) = 257;
        *v19 = v20 + 2;
        v17 = v18;
      }
      if (result != v17)
        goto LABEL_73;
      goto LABEL_36;
    case 1:
      v23 = *((_QWORD *)this + 2);
      v24 = result;
      if ((v23 & 1) != 0)
      {
        *((_QWORD *)result + 10) = 0;
        *((_OWORD *)result + 3) = 0u;
        *((_OWORD *)result + 4) = 0u;
        *((_OWORD *)result + 1) = 0u;
        *((_OWORD *)result + 2) = 0u;
        *(_OWORD *)result = 0u;
        v24 = result + 88;
        a3[1] = result + 88;
        *((_DWORD *)result + 6) = 0;
        *((_WORD *)result + 14) = 257;
        *((_QWORD *)result + 2) = 2;
      }
      if ((v23 & 8) != 0)
      {
        *((_QWORD *)v24 + 10) = 0;
        *((_OWORD *)v24 + 3) = 0u;
        *((_OWORD *)v24 + 4) = 0u;
        *((_OWORD *)v24 + 1) = 0u;
        *((_OWORD *)v24 + 2) = 0u;
        *(_OWORD *)v24 = 0u;
        v25 = v24 + 88;
        a3[1] = v24 + 88;
        if (result == v24 + 88)
          goto LABEL_74;
        *((_QWORD *)v24 + 1) = 0x100000001;
        v51 = 1;
        v50 = 1;
        v26 = v24 + 16;
        v27 = *((_QWORD *)v24 + 2);
        v49 = 0;
        if ((v27 & 1) != 0)
        {
          v28 = (char *)*((_QWORD *)v24 + 3);
          v29 = *((_QWORD *)v24 + 4);
        }
        else
        {
          v28 = v24 + 24;
          v29 = 8;
        }
        if (v27 >> 1 == v29)
        {
          absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v26, &v51, &v50, &v49);
          result = *a3;
          v24 = a3[1];
          if (*a3 != v24)
            goto LABEL_63;
LABEL_45:
          if ((*((_BYTE *)this + 16) & 4) != 0)
          {
            if (v24 >= a3[2])
            {
              result = std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>((void **)a3);
              v33 = result;
              v38 = *a3;
              a3[1] = result;
              if (v38 == result)
                goto LABEL_74;
            }
            else
            {
              if (!v24)
                goto LABEL_74;
              *((_QWORD *)v24 + 10) = 0;
              *((_OWORD *)v24 + 3) = 0u;
              *((_OWORD *)v24 + 4) = 0u;
              *((_OWORD *)v24 + 1) = 0u;
              *((_OWORD *)v24 + 2) = 0u;
              *(_OWORD *)v24 = 0u;
              v33 = v24 + 88;
              a3[1] = v24 + 88;
            }
            *((_QWORD *)v33 - 10) = 1;
            v51 = 1;
            v50 = 1;
            result = v33 - 72;
            v39 = *((_QWORD *)v33 - 9);
            v49 = 1;
            if ((v39 & 1) != 0)
            {
              v40 = (char *)*((_QWORD *)v33 - 8);
              v41 = *((_QWORD *)v33 - 7);
            }
            else
            {
              v40 = v33 - 64;
              v41 = 8;
            }
            if (v39 >> 1 == v41)
            {
              result = absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)result, &v51, &v50, &v49);
            }
            else
            {
              if (!v40)
                goto LABEL_74;
              v44 = &v40[8 * (v39 >> 1)];
              *(_DWORD *)v44 = 1;
              *((_WORD *)v44 + 2) = 257;
              *(_QWORD *)result = v39 + 2;
            }
          }
LABEL_63:
          *((_DWORD *)this + 2) = 2;
          return result;
        }
        if (!v28)
          goto LABEL_74;
        v32 = &v28[8 * (v27 >> 1)];
        *(_DWORD *)v32 = 1;
        *((_WORD *)v32 + 2) = 1;
        *v26 = v27 + 2;
        v24 = v25;
      }
      if (result != v24)
        goto LABEL_63;
      goto LABEL_45;
    case 0:
LABEL_3:
      v7 = *((_QWORD *)this + 2);
      v8 = result;
      if ((v7 & 1) != 0)
      {
        *(_OWORD *)result = 0u;
        *((_OWORD *)result + 1) = 0u;
        *((_QWORD *)result + 10) = 0;
        *((_OWORD *)result + 3) = 0u;
        *((_OWORD *)result + 4) = 0u;
        *((_OWORD *)result + 2) = 0u;
        v8 = result + 88;
        a3[1] = result + 88;
        *((_DWORD *)result + 6) = 0;
        result[29] = 1;
        *((_QWORD *)result + 2) = 2;
        result[4] = 1;
      }
      if ((v7 & 4) == 0)
        goto LABEL_73;
      *((_QWORD *)v8 + 10) = 0;
      *((_OWORD *)v8 + 3) = 0u;
      *((_OWORD *)v8 + 4) = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      *((_OWORD *)v8 + 2) = 0u;
      *(_OWORD *)v8 = 0u;
      v9 = v8 + 88;
      a3[1] = v8 + 88;
      if (result == v8 + 88)
        goto LABEL_74;
      *((_QWORD *)v8 + 1) = 1;
      v51 = 1;
      v50 = 0;
      v10 = v8 + 16;
      v11 = *((_QWORD *)v8 + 2);
      v49 = 1;
      if ((v11 & 1) != 0)
      {
        v12 = (char *)*((_QWORD *)v8 + 3);
        v13 = *((_QWORD *)v8 + 4);
      }
      else
      {
        v12 = v8 + 24;
        v13 = 8;
      }
      if (v11 >> 1 == v13)
      {
        absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v10, &v51, &v50, &v49);
        result = *a3;
        v9 = a3[1];
        if ((*((_BYTE *)this + 16) & 1) == 0)
        {
LABEL_17:
          if (result != v9)
          {
            *(v9 - 84) = 1;
            *((_DWORD *)this + 2) = 1;
            return result;
          }
          goto LABEL_74;
        }
      }
      else
      {
        if (!v12)
          goto LABEL_74;
        v15 = &v12[8 * (v11 >> 1)];
        *(_DWORD *)v15 = 1;
        *((_WORD *)v15 + 2) = 256;
        *v10 = v11 + 2;
        if ((*((_BYTE *)this + 16) & 1) == 0)
          goto LABEL_17;
      }
      if (result != v9)
      {
        v51 = 0;
        v50 = 1;
        result = v9 - 72;
        v45 = *((_QWORD *)v9 - 9);
        v49 = 0;
        if ((v45 & 1) != 0)
        {
          v46 = (char *)*((_QWORD *)v9 - 8);
          v47 = *((_QWORD *)v9 - 7);
        }
        else
        {
          v46 = v9 - 64;
          v47 = 8;
        }
        if (v45 >> 1 == v47)
          goto LABEL_75;
        if (v46)
        {
          v48 = &v46[8 * (v45 >> 1)];
          *(_DWORD *)v48 = 0;
          *((_WORD *)v48 + 2) = 1;
          v43 = v45 + 2;
LABEL_72:
          *(_QWORD *)result = v43;
          goto LABEL_73;
        }
      }
LABEL_74:
      __break(1u);
LABEL_75:
      result = absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)result, &v51, &v50, &v49);
      goto LABEL_73;
  }
  return result;
}

_QWORD *webrtc::ScalabilityStructureL2T2KeyShift::OnEncodeDone@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *result;
  uint64_t v35;
  int v36;
  int v37;

  a2[7] = 0;
  a2[10] = 0;
  a2[13] = 0;
  a2[1] = 0;
  a2[22] = 0;
  v4 = (void **)(a2 + 22);
  a2[23] = 0;
  a2[24] = 0;
  a2[25] = 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 8);
  *a2 = v5;
  if (a2 + 13 != (_QWORD *)(a1 + 16))
  {
    v6 = *(_QWORD *)(a1 + 16);
    if ((v6 & 1) != 0)
      v7 = *(_QWORD *)(a1 + 24);
    else
      v7 = a1 + 24;
    absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::CodecBufferUsage>,webrtc::CodecBufferUsage const*>>(a2 + 13, v7, v6 >> 1);
    v8 = *(_DWORD *)(a1 + 8);
    v9 = a2 + 2;
    v10 = *(unsigned __int8 *)(a1 + 4);
    if (*(_BYTE *)(a1 + 4))
      goto LABEL_6;
LABEL_8:
    if (v8)
      v11 = 0;
    else
      v11 = *(_DWORD *)(a1 + 12) <= 0;
    goto LABEL_11;
  }
  v8 = v5;
  v9 = a2 + 2;
  v10 = *(unsigned __int8 *)(a1 + 4);
  if (!*(_BYTE *)(a1 + 4))
    goto LABEL_8;
LABEL_6:
  v11 = v8 <= 0;
LABEL_11:
  v12 = !v11;
  v13 = a2 + 1;
  if (v12)
    v14 = 0;
  else
    v14 = 2;
  v37 = v14;
  v15 = a2[1];
  v16 = (_QWORD *)a2[2];
  if ((v15 & 1) == 0)
    v16 = v9;
  v17 = 10;
  if ((v15 & 1) != 0)
    v17 = a2[3];
  if (v15 >> 1 == v17)
  {
    absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>((uint64_t)(a2 + 1), &v37);
    v10 = *(unsigned __int8 *)(a1 + 4);
    v8 = *(_DWORD *)(a1 + 8);
    if (*(_BYTE *)(a1 + 4))
    {
LABEL_24:
      v18 = 2 * (v8 < 1);
      goto LABEL_33;
    }
  }
  else
  {
    if (!v16)
      goto LABEL_77;
    *((_DWORD *)v16 + (v15 >> 1)) = v14;
    *v13 = v15 + 2;
    if (v10)
      goto LABEL_24;
  }
  if (v8)
  {
    v18 = 0;
  }
  else
  {
    v19 = *(_DWORD *)(a1 + 12);
    v20 = v19 <= 1;
    if (v19 == 1)
      v18 = 1;
    else
      v18 = 2;
    if (!v20)
      v18 = 0;
  }
LABEL_33:
  v37 = v18;
  v21 = a2[1];
  v22 = (_QWORD *)a2[2];
  if ((v21 & 1) == 0)
    v22 = v9;
  v23 = 10;
  if ((v21 & 1) != 0)
    v23 = a2[3];
  if (v21 >> 1 == v23)
  {
    absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>((uint64_t)(a2 + 1), &v37);
    v10 = *(unsigned __int8 *)(a1 + 4);
    v8 = *(_DWORD *)(a1 + 8);
    if (*(_BYTE *)(a1 + 4))
    {
LABEL_40:
      v24 = 2 * (v8 < 2);
      goto LABEL_48;
    }
  }
  else
  {
    if (!v22)
      goto LABEL_77;
    *((_DWORD *)v22 + (v21 >> 1)) = v18;
    *v13 = v21 + 2;
    if (v10)
      goto LABEL_40;
  }
  if (*(int *)(a1 + 12) <= 0 && v8 == 1)
    v24 = 2;
  else
    v24 = 0;
LABEL_48:
  v37 = v24;
  v26 = a2[1];
  v27 = (_QWORD *)a2[2];
  if ((v26 & 1) == 0)
    v27 = v9;
  v28 = 10;
  if ((v26 & 1) != 0)
    v28 = a2[3];
  if (v26 >> 1 == v28)
  {
    absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>((uint64_t)(a2 + 1), &v37);
    v10 = *(unsigned __int8 *)(a1 + 4);
    v8 = *(_DWORD *)(a1 + 8);
    if (*(_BYTE *)(a1 + 4))
    {
LABEL_55:
      v29 = 2 * (v8 < 2);
      goto LABEL_63;
    }
  }
  else
  {
    if (!v27)
      goto LABEL_77;
    *((_DWORD *)v27 + (v26 >> 1)) = v24;
    *v13 = v26 + 2;
    if (v10)
      goto LABEL_55;
  }
  if (v8 == 1 && (v30 = *(_DWORD *)(a1 + 12), v30 <= 1))
  {
    if (v30 == 1)
      v29 = 1;
    else
      v29 = 2;
  }
  else
  {
    v29 = 0;
  }
LABEL_63:
  v37 = v29;
  v31 = a2[1];
  v32 = (_QWORD *)a2[2];
  if ((v31 & 1) == 0)
    v32 = v9;
  v33 = 10;
  if ((v31 & 1) != 0)
    v33 = a2[3];
  if (v31 >> 1 == v33)
  {
LABEL_78:
    absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>((uint64_t)(a2 + 1), &v37);
    if (*(_BYTE *)(a1 + 4))
      goto LABEL_70;
    goto LABEL_79;
  }
  if (!v32)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  *((_DWORD *)v32 + (v31 >> 1)) = v29;
  *v13 = v31 + 2;
  if (v10)
  {
LABEL_70:
    a2[23] = 0;
    if ((a2[24] & 0x3FFFFFFFFFFFFFFLL) != 0)
    {
      a2[23] = 2;
      result = (_QWORD *)a2[22];
    }
    else
    {
      if (*v4)
        operator delete(*v4);
      result = operator new(8uLL);
      a2[22] = result;
      *(_OWORD *)(a2 + 23) = xmmword_208F1AF90;
    }
    v35 = 3;
LABEL_76:
    *result = v35;
    return result;
  }
LABEL_79:
  if (!*(_DWORD *)(a1 + 12))
  {
    v36 = *(_DWORD *)(a1 + 8);
    a2[23] = 0;
    if ((a2[24] & 0x3FFFFFFFFFFFFFFLL) != 0)
    {
      a2[23] = 2;
      result = (_QWORD *)a2[22];
    }
    else
    {
      if (*v4)
        operator delete(*v4);
      result = operator new(8uLL);
      a2[22] = result;
      *(_OWORD *)(a2 + 23) = xmmword_208F1AF90;
    }
    v35 = 2 * (v36 == 1);
    if (!v36)
      v35 = 1;
    goto LABEL_76;
  }
  a2[23] = 0;
  if ((a2[24] & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    a2[23] = 2;
    result = (_QWORD *)a2[22];
  }
  else
  {
    if (*v4)
      operator delete(*v4);
    result = operator new(8uLL);
    a2[22] = result;
    *(_OWORD *)(a2 + 23) = xmmword_208F1AF90;
  }
  *result = 0;
  return result;
}

uint64_t webrtc::ScalabilityStructureL2T2KeyShift::OnRatesUpdated(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;

  if (!*(_BYTE *)(a2 + 8))
  {
    v3 = *(_QWORD *)(result + 16);
    goto LABEL_11;
  }
  v2 = *(_DWORD *)(a2 + 4);
  v3 = *(_QWORD *)(result + 16);
  if ((v3 & 1) != 0 || !v2)
  {
    if (v2)
      goto LABEL_7;
LABEL_11:
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_12;
  }
  *(_DWORD *)(result + 8) = 0;
LABEL_7:
  v4 = v3 | 1;
  *(_QWORD *)(result + 16) = v3 | 1;
  if (*(_BYTE *)(a2 + 16) && *(_DWORD *)(a2 + 12))
  {
    v5 = v3 | 3;
    if (!*(_BYTE *)(a2 + 40))
      goto LABEL_20;
    goto LABEL_13;
  }
LABEL_12:
  v5 = v4 & 0xFFFFFFFFFFFFFFFDLL;
  if (!*(_BYTE *)(a2 + 40))
    goto LABEL_20;
LABEL_13:
  v6 = *(_DWORD *)(a2 + 36);
  if ((v5 & 4) != 0 || !v6)
  {
    if (v6)
      goto LABEL_17;
LABEL_20:
    v7 = v5 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_21;
  }
  *(_DWORD *)(result + 8) = 0;
LABEL_17:
  v7 = v5 | 4;
  *(_QWORD *)(result + 16) = v5 | 4;
  if (*(_BYTE *)(a2 + 48) && *(_DWORD *)(a2 + 44))
  {
    *(_QWORD *)(result + 16) = v5 | 0xC;
    return result;
  }
LABEL_21:
  *(_QWORD *)(result + 16) = v7 & 0xFFFFFFFFFFFFFFF7;
  return result;
}

uint64_t webrtc::ScalabilityStructureSimulcast::StreamConfig@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int32x4_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)&v2 = 0x100000001;
  *((_QWORD *)&v2 + 1) = 0x100000001;
  *(_OWORD *)(a2 + 12) = v2;
  *(_OWORD *)(a2 + 28) = v2;
  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)a2 = v3;
  v4 = 4 * (int)v3 - 4;
  *(_DWORD *)(a2 + 12 + v4) = 1;
  *(_DWORD *)(a2 + 28 + v4) = 1;
  v5 = v3 - 2;
  if ((int)v3 < 2)
    goto LABEL_37;
  v6 = *(_DWORD *)(this + 16);
  v7 = *(_DWORD *)(this + 20);
  if (v3 < 0x35)
  {
    v8 = v3;
    goto LABEL_36;
  }
  v9 = v3 - 2;
  this = (v3 - 1);
  v10 = a2 + 4 * v5;
  v11 = v10 + 12;
  v12 = v10 + 12 - 4 * v9;
  v13 = v10 + 28;
  v14 = a2 + 4 * this;
  v15 = v14 + 12;
  v16 = v14 + 12 - 4 * v9;
  v17 = v14 + 28;
  v18 = v17 - 4 * v9 > v17 || v16 > v15;
  if (v18
    || v13 - 4 * v9 > v13
    || v12 > v11
    || v5 < v9
    || this < v9
    || HIDWORD(v9) != 0)
  {
    v8 = v3;
    goto LABEL_36;
  }
  if (v15 - v11 < 0x10)
  {
    v8 = v3;
    goto LABEL_36;
  }
  if (v11 - v17 < 0x10)
  {
    v8 = v3;
    do
    {
LABEL_36:
      v33 = 4 * (v8 - 1);
      v34 = 4 * (v8 - 2);
      *(_DWORD *)(a2 + 12 + v34) = *(_DWORD *)(a2 + 12 + v33) * v6;
      *(_DWORD *)(a2 + 28 + v34) = *(_DWORD *)(a2 + 28 + v33) * v7;
      v18 = v8-- > 2;
    }
    while (v18);
    goto LABEL_37;
  }
  if (v15 - v13 < 0x10)
  {
    v8 = v3;
    goto LABEL_36;
  }
  if (v17 - v13 < 0x10)
  {
    v8 = v3;
    goto LABEL_36;
  }
  v24 = v3 - 1;
  v8 = v3 - (v24 & 0xFFFFFFFFFFFFFFFCLL);
  v25 = a2 - 12;
  v26 = v3 + 0xFFFFFFFFLL;
  v27 = (int8x16_t)vrev64q_s32(vdupq_n_s32(v6));
  v28 = (int32x4_t)vextq_s8(v27, v27, 8uLL);
  v29 = (int8x16_t)vrev64q_s32(vdupq_n_s32(v7));
  v30 = (int32x4_t)vextq_s8(v29, v29, 8uLL);
  v31 = v24 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v32 = v25 + 4 * v26;
    this = v25 + 4 * (v26 - 1);
    *(int32x4_t *)(this + 12) = vmulq_s32(*(int32x4_t *)(v32 + 12), v28);
    *(int32x4_t *)(this + 28) = vmulq_s32(*(int32x4_t *)(v32 + 28), v30);
    v26 -= 4;
    v31 -= 4;
  }
  while (v31);
  if (v24 != (v24 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_36;
LABEL_37:
  *(_BYTE *)(a2 + 8) = 0;
  return this;
}

void webrtc::ScalabilityStructureSimulcast::NextFrameConfig(webrtc::ScalabilityStructureSimulcast *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  BOOL v7;
  int v8;
  unint64_t i;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  int v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char v72;
  char v73;
  int v74;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (!*((_DWORD *)this + 12))
  {
    *((_DWORD *)this + 6) = 0;
    return;
  }
  std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::reserve(a3, *((int *)this + 2));
  v6 = *((_DWORD *)this + 6);
  if (v6)
    v7 = a2 == 0;
  else
    v7 = 0;
  if (!v7)
  {
    *((_QWORD *)this + 4) &= 0xFFFFFFFFFFFFFFF8;
    *((_DWORD *)this + 6) = 0;
    goto LABEL_7;
  }
  if (v6 != 4)
  {
    if (v6 != 2)
    {
      if (v6 != 1)
        goto LABEL_7;
      v21 = *((_DWORD *)this + 3);
      if (v21 <= 1)
        goto LABEL_7;
      v22 = *((unsigned int *)this + 2);
      if ((int)v22 >= 1)
      {
        v23 = *((_QWORD *)this + 6);
        v24 = *((_DWORD *)this + 2);
        if ((v23 & 2) == 0)
        {
          v25 = 0;
          v26 = v21 + 1;
          do
          {
            if (v22 - 1 == v25)
              goto LABEL_7;
            v27 = v23 >> v26;
            v26 += v21;
            ++v25;
          }
          while ((v27 & 1) == 0);
          if (v25 < v22)
          {
            v24 = *((_DWORD *)this + 2);
            goto LABEL_74;
          }
          goto LABEL_7;
        }
LABEL_75:
        v46 = 0;
        while (1)
        {
          if (((*((_QWORD *)this + 6) >> (*((_DWORD *)this + 3) * v46 + 1)) & 1) == 0
            || ((*((_QWORD *)this + 4) >> v46) & 1) == 0)
          {
            goto LABEL_103;
          }
          v60 = *(_QWORD *)(a3 + 8);
          if (v60 >= *(_QWORD *)(a3 + 16))
          {
            v61 = std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>((void **)a3);
          }
          else
          {
            if (!v60)
              goto LABEL_125;
            *(_QWORD *)(v60 + 80) = 0;
            *(_OWORD *)(v60 + 48) = 0u;
            *(_OWORD *)(v60 + 64) = 0u;
            *(_OWORD *)(v60 + 16) = 0u;
            *(_OWORD *)(v60 + 32) = 0u;
            v61 = (char *)(v60 + 88);
            *(_OWORD *)v60 = 0u;
          }
          *(_QWORD *)(a3 + 8) = v61;
          if (*(char **)a3 == v61)
            goto LABEL_125;
          *((_DWORD *)v61 - 22) = 2;
          *((_DWORD *)v61 - 20) = v46;
          *((_DWORD *)v61 - 19) = 1;
          v74 = v46;
          v73 = 1;
          v63 = v61 - 72;
          v62 = *((_QWORD *)v61 - 9);
          v64 = v61 - 64;
          v72 = 0;
          if ((v62 & 1) != 0)
          {
            v65 = (char *)*((_QWORD *)v61 - 8);
            v66 = *((_QWORD *)v61 - 7);
          }
          else
          {
            v65 = v61 - 64;
            v66 = 8;
          }
          if (v62 >> 1 == v66)
          {
            v71 = v61;
            absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)(v61 - 72), &v74, &v73, &v72);
            v61 = v71;
            v24 = *((_DWORD *)this + 2);
            if (*((int *)this + 3) < 3)
              goto LABEL_103;
          }
          else
          {
            if (!v65)
              goto LABEL_125;
            v67 = &v65[8 * (v62 >> 1)];
            *(_DWORD *)v67 = v46;
            *((_WORD *)v67 + 2) = 1;
            *(_QWORD *)v63 = v62 + 2;
            v24 = *((_DWORD *)this + 2);
            if (*((int *)this + 3) < 3)
              goto LABEL_103;
          }
          v74 = v46 + v24;
          v73 = 0;
          v72 = 1;
          v68 = *(_QWORD *)v63;
          if ((*(_QWORD *)v63 & 1) != 0)
          {
            v64 = (char *)*((_QWORD *)v61 - 8);
            v69 = *((_QWORD *)v61 - 7);
          }
          else
          {
            v69 = 8;
          }
          if (v68 >> 1 == v69)
          {
            absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v63, &v74, &v73, &v72);
            v24 = *((_DWORD *)this + 2);
          }
          else
          {
            if (!v64)
              goto LABEL_125;
            v70 = &v64[8 * (v68 >> 1)];
            *(_DWORD *)v70 = v46 + v24;
            *((_WORD *)v70 + 2) = 256;
            *(_QWORD *)v63 = v68 + 2;
          }
LABEL_103:
          if (++v46 >= v24)
            return;
        }
      }
LABEL_76:
      *((_QWORD *)this + 5) &= 0xFFFFFFFFFFFFFFF8;
      return;
    }
    v36 = *((_DWORD *)this + 3);
    if (v36 < 3)
      goto LABEL_7;
    v35 = *((unsigned int *)this + 2);
    if ((int)v35 < 1)
      goto LABEL_76;
    v37 = *((_QWORD *)this + 6);
    if ((v37 & 4) == 0)
    {
      v38 = 0;
      v39 = v36 + 2;
      do
      {
        if (v35 - 1 == v38)
          goto LABEL_7;
        v40 = v37 >> v39;
        v39 += v36;
        ++v38;
      }
      while ((v40 & 1) == 0);
      if (v38 >= v35)
        goto LABEL_7;
      v34 = 3;
      goto LABEL_64;
    }
    v34 = 3;
LABEL_79:
    v47 = 0;
    while (1)
    {
      if (((*((_QWORD *)this + 6) >> (*((_DWORD *)this + 3) * v47 + 2)) & 1) == 0
        || (*((_QWORD *)this + 4) & (1 << v47)) == 0)
      {
        goto LABEL_81;
      }
      v48 = *(_QWORD *)(a3 + 8);
      if (v48 >= *(_QWORD *)(a3 + 16))
      {
        v49 = std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>((void **)a3);
      }
      else
      {
        if (!v48)
          goto LABEL_125;
        *(_QWORD *)(v48 + 80) = 0;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)(v48 + 64) = 0u;
        *(_OWORD *)(v48 + 16) = 0u;
        *(_OWORD *)(v48 + 32) = 0u;
        v49 = (char *)(v48 + 88);
        *(_OWORD *)v48 = 0u;
      }
      *(_QWORD *)(a3 + 8) = v49;
      if (*(char **)a3 == v49)
      {
LABEL_125:
        __break(1u);
        return;
      }
      *((_DWORD *)v49 - 22) = v34;
      *((_DWORD *)v49 - 20) = v47;
      *((_DWORD *)v49 - 19) = 2;
      if ((*((_QWORD *)this + 5) & (1 << v47)) != 0)
      {
        v50 = v47 + *((_DWORD *)this + 2);
        v74 = v50;
        v73 = 1;
        v51 = v49 - 72;
        v52 = *((_QWORD *)v49 - 9);
        v72 = 0;
        if ((v52 & 1) != 0)
        {
          v53 = (char *)*((_QWORD *)v49 - 8);
          v54 = *((_QWORD *)v49 - 7);
        }
        else
        {
          v53 = v49 - 64;
          v54 = 8;
        }
        if (v52 >> 1 == v54)
          goto LABEL_80;
        if (!v53)
          goto LABEL_125;
        v58 = &v53[8 * (v52 >> 1)];
        *(_DWORD *)v58 = v50;
        *((_WORD *)v58 + 2) = 1;
        *(_QWORD *)v51 = v52 + 2;
      }
      else
      {
        v74 = v47;
        v73 = 1;
        v51 = v49 - 72;
        v55 = *((_QWORD *)v49 - 9);
        v72 = 0;
        if ((v55 & 1) != 0)
        {
          v56 = (char *)*((_QWORD *)v49 - 8);
          v57 = *((_QWORD *)v49 - 7);
        }
        else
        {
          v56 = v49 - 64;
          v57 = 8;
        }
        if (v55 >> 1 == v57)
        {
LABEL_80:
          absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v51, &v74, &v73, &v72);
          goto LABEL_81;
        }
        if (!v56)
          goto LABEL_125;
        v59 = &v56[8 * (v55 >> 1)];
        *(_DWORD *)v59 = v47;
        *((_WORD *)v59 + 2) = 1;
        *(_QWORD *)v51 = v55 + 2;
      }
LABEL_81:
      if (++v47 >= *((int *)this + 2))
        return;
    }
  }
  v28 = *((_DWORD *)this + 3);
  if (v28 > 2)
  {
    v29 = *((unsigned int *)this + 2);
    if ((int)v29 < 1)
      goto LABEL_76;
    v30 = *((_QWORD *)this + 6);
    if ((v30 & 4) != 0)
    {
      v34 = 1;
      goto LABEL_79;
    }
    v31 = 0;
    v32 = v28 + 2;
    do
    {
      if (v29 - 1 == v31)
        goto LABEL_66;
      v33 = v30 >> v32;
      v32 += v28;
      ++v31;
    }
    while ((v33 & 1) == 0);
    if (v31 < v29)
    {
      v34 = 1;
      LODWORD(v35) = *((_DWORD *)this + 2);
LABEL_64:
      if ((int)v35 < 1)
        return;
      goto LABEL_79;
    }
  }
LABEL_66:
  if (v28 <= 1)
    goto LABEL_7;
  v41 = *((unsigned int *)this + 2);
  if ((int)v41 < 1)
    goto LABEL_76;
  v42 = *((_QWORD *)this + 6);
  v24 = *((_DWORD *)this + 2);
  if ((v42 & 2) != 0)
    goto LABEL_75;
  v43 = 0;
  v44 = v28 + 1;
  do
  {
    if (v41 - 1 == v43)
      goto LABEL_7;
    v45 = v42 >> v44;
    v44 += v28;
    ++v43;
  }
  while ((v45 & 1) == 0);
  if (v43 < v41)
  {
    v24 = *((_DWORD *)this + 2);
LABEL_74:
    if (v24 < 1)
      return;
    goto LABEL_75;
  }
LABEL_7:
  v8 = *((_DWORD *)this + 2);
  *((_QWORD *)this + 5) &= 0xFFFFFFFFFFFFFFF8;
  if (v8 >= 1)
  {
    for (i = 0; (uint64_t)i < v8; ++i)
    {
      while (((*((_QWORD *)this + 6) >> (*((_DWORD *)this + 3) * i)) & 1) == 0)
      {
        if (i >= 3)
          goto LABEL_34;
        *((_QWORD *)this + 4) &= ~(1 << i++);
        if ((uint64_t)i >= v8)
          return;
      }
      v10 = *(_QWORD *)(a3 + 8);
      if (v10 >= *(_QWORD *)(a3 + 16))
      {
        v11 = std::vector<webrtc::ScalableVideoController::LayerFrameConfig>::__emplace_back_slow_path<>((void **)a3);
      }
      else
      {
        if (!v10)
          goto LABEL_125;
        *(_QWORD *)(v10 + 80) = 0;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        v11 = (char *)(v10 + 88);
        *(_OWORD *)v10 = 0u;
      }
      *(_QWORD *)(a3 + 8) = v11;
      if (*(char **)a3 == v11)
        goto LABEL_125;
      *((_DWORD *)v11 - 22) = 4;
      *((_DWORD *)v11 - 20) = i;
      *((_DWORD *)v11 - 19) = 0;
      if ((*((_QWORD *)this + 4) & (1 << i)) != 0)
      {
        v74 = i;
        v73 = 1;
        v12 = v11 - 72;
        v13 = *((_QWORD *)v11 - 9);
        v72 = 1;
        if ((v13 & 1) != 0)
        {
          v14 = (char *)*((_QWORD *)v11 - 8);
          v15 = *((_QWORD *)v11 - 7);
        }
        else
        {
          v14 = v11 - 64;
          v15 = 8;
        }
        if (v13 >> 1 == v15)
          goto LABEL_33;
        if (!v14)
          goto LABEL_125;
        v19 = &v14[8 * (v13 >> 1)];
        *(_DWORD *)v19 = i;
        *((_WORD *)v19 + 2) = 257;
        *(_QWORD *)v12 = v13 + 2;
        if (i >= 3)
          goto LABEL_34;
      }
      else
      {
        *(v11 - 84) = 1;
        v74 = i;
        v73 = 0;
        v12 = v11 - 72;
        v16 = *((_QWORD *)v11 - 9);
        v72 = 1;
        if ((v16 & 1) != 0)
        {
          v17 = (char *)*((_QWORD *)v11 - 8);
          v18 = *((_QWORD *)v11 - 7);
        }
        else
        {
          v17 = v11 - 64;
          v18 = 8;
        }
        if (v16 >> 1 == v18)
        {
LABEL_33:
          absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)v12, &v74, &v73, &v72);
          if (i >= 3)
            goto LABEL_34;
          goto LABEL_31;
        }
        if (!v17)
          goto LABEL_125;
        v20 = &v17[8 * (v16 >> 1)];
        *(_DWORD *)v20 = i;
        *((_WORD *)v20 + 2) = 256;
        *(_QWORD *)v12 = v16 + 2;
        if (i >= 3)
LABEL_34:
          abort();
      }
LABEL_31:
      *((_QWORD *)this + 4) |= 1 << i;
      v8 = *((_DWORD *)this + 2);
    }
  }
}

void webrtc::ScalabilityStructureSimulcast::OnEncodeDone(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int i;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *__p;
  char **v45;
  char v46;
  int v47;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 12);
  if (v6 == 1)
  {
    if (v7 >= 3)
      abort();
    *(_QWORD *)(a1 + 40) |= 1 << v7;
  }
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  v45 = (char **)(a3 + 176);
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)(a3 + 200) = 0xFFFFFFFFLL;
  *(_DWORD *)a3 = v7;
  *(_DWORD *)(a3 + 4) = v6;
  if (a3 + 104 == a2 + 16)
  {
LABEL_73:
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 16);
    if ((v8 & 1) != 0)
      v9 = *(_QWORD *)(a2 + 24);
    else
      v9 = a2 + 24;
    absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::CodecBufferUsage>,webrtc::CodecBufferUsage const*>>((unint64_t *)(a3 + 104), v9, v8 >> 1);
    v10 = *(_QWORD *)(a3 + 8);
  }
  v11 = (unint64_t *)(a3 + 8);
  v12 = *(_DWORD *)(a1 + 8);
  v13 = *(int *)(a1 + 12) * (uint64_t)v12;
  v14 = *(_QWORD *)(a3 + 24);
  if ((v10 & 1) != 0)
    v15 = *(int **)(a3 + 16);
  else
    v15 = (int *)(a3 + 16);
  if ((v10 & 1) == 0)
    v14 = 10;
  if (v14 < v13)
  {
    __p = *(void **)(a3 + 16);
    v16 = 2 * v14;
    if (v16 <= v13)
      v17 = *(int *)(a1 + 12) * (uint64_t)v12;
    else
      v17 = v16;
    if (v17 >> 62)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v18 = (char *)operator new(4 * v17);
    v19 = v18;
    if (v10 >= 2)
    {
      v20 = 0;
      v21 = v10 >> 1;
      if (v10 < 0x10)
        goto LABEL_25;
      if ((unint64_t)(v18 - (char *)v15) < 0x20)
        goto LABEL_25;
      v20 = v21 & 0x7FFFFFFFFFFFFFF8;
      v22 = v18 + 16;
      v23 = (__int128 *)(v15 + 4);
      v24 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v25 = *v23;
        *(v22 - 1) = *(v23 - 1);
        *v22 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 8;
      }
      while (v24);
      v15 += v21 & 0x7FFFFFFFFFFFFFF8;
      if (v21 != v20)
      {
LABEL_25:
        v26 = v21 - v20;
        v27 = &v18[4 * v20];
        do
        {
          v28 = *v15++;
          *(_DWORD *)v27 = v28;
          v27 += 4;
          --v26;
        }
        while (v26);
      }
    }
    if ((v10 & 1) != 0)
    {
      operator delete(__p);
      v10 = *v11;
      v12 = *(_DWORD *)(a1 + 8);
    }
    *(_QWORD *)(a3 + 16) = v19;
    *(_QWORD *)(a3 + 24) = v17;
    *(_QWORD *)(a3 + 8) = v10 | 1;
  }
  if (v12 >= 1)
  {
    v29 = *(_DWORD *)(a1 + 12);
    if (v29 >= 1)
    {
      v30 = 0;
      while (1)
      {
        if (v29 < 1)
          goto LABEL_34;
        v31 = *(int *)(a2 + 12) <= 0 && *(_DWORD *)(a2 + 8) == v30;
        v32 = v31 ? 2 : 0;
        v47 = v32;
        v33 = *(_QWORD *)(a3 + 8);
        v34 = *(_QWORD *)(a3 + 16);
        if ((v33 & 1) != 0)
        {
          v35 = *(_QWORD *)(a3 + 24);
        }
        else
        {
          v34 = a3 + 16;
          v35 = 10;
        }
        if (v33 >> 1 != v35)
          break;
        absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>(a3 + 8, &v47);
        v29 = *(_DWORD *)(a1 + 12);
        if (v29 >= 2)
          goto LABEL_48;
LABEL_33:
        v12 = *(_DWORD *)(a1 + 8);
LABEL_34:
        if (++v30 >= v12)
          goto LABEL_69;
      }
      if (!v34)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      *(_DWORD *)(v34 + 4 * (v33 >> 1)) = v32;
      *v11 = v33 + 2;
      if (v29 < 2)
        goto LABEL_33;
LABEL_48:
      for (i = 1; i < v29; ++i)
      {
        while (1)
        {
          v37 = *(_DWORD *)(a2 + 12);
          v38 = i == v37 ? 1 : 2;
          v39 = v37 <= i && *(_DWORD *)(a2 + 8) == v30;
          v40 = v39 ? v38 : 0;
          v47 = v40;
          v41 = *(_QWORD *)(a3 + 8);
          v42 = *(_QWORD *)(a3 + 16);
          if ((v41 & 1) != 0)
          {
            v43 = *(_QWORD *)(a3 + 24);
          }
          else
          {
            v42 = a3 + 16;
            v43 = 10;
          }
          if (v41 >> 1 != v43)
            break;
          absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>(a3 + 8, &v47);
          v29 = *(_DWORD *)(a1 + 12);
          if (++i >= v29)
            goto LABEL_33;
        }
        if (!v42)
          goto LABEL_72;
        *(_DWORD *)(v42 + 4 * (v41 >> 1)) = v40;
        *v11 = v41 + 2;
      }
      goto LABEL_33;
    }
  }
LABEL_69:
  v46 = 0;
  std::vector<BOOL>::assign(v45, v12, &v46);
  if (!*(_DWORD *)(a2 + 12))
    *(_QWORD *)&(*v45)[((unint64_t)*(int *)(a2 + 8) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a3 + 200) = *(_QWORD *)(a1 + 48);
}

uint64_t webrtc::ScalabilityStructureSimulcast::OnRatesUpdated(uint64_t this, const webrtc::VideoBitrateAllocation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  std::string *v36;

  v8 = *(unsigned int *)(this + 8);
  if ((int)v8 < 1)
    return this;
  v9 = *(unsigned int *)(this + 12);
  if ((int)v9 < 1)
    return this;
  v10 = 0;
  v11 = 5;
  while (v10 <= 4)
  {
    v12 = v9 * v10;
    v13 = (char *)a2 + 32 * v10;
    if (!v13[8])
    {
      if (v12 > 0x1F)
        goto LABEL_50;
      v15 = 1 << v12;
      v16 = *(_QWORD *)(this + 48);
LABEL_24:
      v17 = v16 & ~v15;
      *(_QWORD *)(this + 48) = v17;
      if ((_DWORD)v9 == 1)
        goto LABEL_4;
      if (v12 > 0x1E)
        goto LABEL_50;
      v19 = v12 + 1;
LABEL_27:
      v20 = 1 << v19;
LABEL_28:
      v21 = v17 & ~v20;
      *(_QWORD *)(this + 48) = v21;
      if ((_DWORD)v9 == 2)
        goto LABEL_4;
      if (v12 > 0x1D)
        goto LABEL_50;
      v23 = v12 + 2;
LABEL_31:
      v24 = 1 << v23;
LABEL_32:
      v25 = v21 & ~v24;
      *(_QWORD *)(this + 48) = v25;
      if ((_DWORD)v9 == 3)
        goto LABEL_4;
      if (v12 > 0x1C)
        goto LABEL_50;
      v27 = v12 + 3;
      goto LABEL_35;
    }
    if (v12 > 0x1F)
      goto LABEL_50;
    v14 = *((_DWORD *)v13 + 1);
    v15 = 1 << v12;
    v16 = *(_QWORD *)(this + 48);
    if (!v14)
      goto LABEL_24;
    v17 = v16 | v15;
    *(_QWORD *)(this + 48) = v17;
    if ((_DWORD)v9 == 1)
      goto LABEL_4;
    v18 = (char *)a2 + 32 * v10;
    v19 = v12 + 1;
    if (!v18[16])
    {
      if (v12 > 0x1E)
        goto LABEL_50;
      goto LABEL_27;
    }
    if (v12 > 0x1E)
      goto LABEL_50;
    v20 = 1 << v19;
    if (!*((_DWORD *)v18 + 3))
      goto LABEL_28;
    v21 = v17 | v20;
    *(_QWORD *)(this + 48) = v21;
    if ((_DWORD)v9 == 2)
      goto LABEL_4;
    v22 = (char *)a2 + 32 * v10;
    v23 = v12 + 2;
    if (!v22[24])
    {
      if (v12 > 0x1D)
        goto LABEL_50;
      goto LABEL_31;
    }
    if (v12 > 0x1D)
      goto LABEL_50;
    v24 = 1 << v23;
    if (!*((_DWORD *)v22 + 5))
      goto LABEL_32;
    v25 = v21 | v24;
    *(_QWORD *)(this + 48) = v25;
    if ((_DWORD)v9 == 3)
      goto LABEL_4;
    v26 = (char *)a2 + 32 * v10;
    v27 = v12 + 3;
    if (!v26[32])
    {
      if (v12 > 0x1C)
        goto LABEL_50;
LABEL_35:
      v29 = 1 << v27;
LABEL_36:
      v31 = 0;
      v30 = v25 & ~v29;
      goto LABEL_37;
    }
    if (v12 > 0x1C)
      goto LABEL_50;
    v28 = *((_DWORD *)v26 + 7);
    v29 = 1 << v27;
    if (!v28)
      goto LABEL_36;
    v30 = v25 | v29;
    v31 = 1;
LABEL_37:
    *(_QWORD *)(this + 48) = v30;
    if ((_DWORD)v9 != 4)
    {
      if ((v31 & 1) != 0)
        goto LABEL_53;
      v32 = v12 + 4;
      if (v32 > 0x1F)
        goto LABEL_50;
      v33 = v30 & ~(1 << v32);
      *(_QWORD *)(this + 48) = v33;
      if ((_DWORD)v9 != 5)
      {
        v34 = v11;
        v35 = v9 - 5;
        while (v34 <= 0x1F)
        {
          v33 &= ~(1 << v34);
          *(_QWORD *)(this + 48) = v33;
          ++v34;
          if (!--v35)
            goto LABEL_4;
        }
LABEL_50:
        abort();
      }
    }
LABEL_4:
    ++v10;
    v11 += v9;
    if (v10 == v8)
      return this;
  }
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 54, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v10);
LABEL_53:
  v36 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 55, "temporal_index < kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, 4);
  return webrtc::ScalabilityStructureS2T1::DependencyStructure((webrtc::ScalabilityStructureS2T1 *)v36);
}

void webrtc::ScalabilityStructureS2T1::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x200000000;
  *(_DWORD *)(a1 + 8) = 2;
  *(_QWORD *)&v13 = 0x100000000;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v13, 2uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 4uLL);
  v4 = *v3;
  if (*(_QWORD *)(a1 + 112) == v4)
    goto LABEL_14;
  *(_DWORD *)v4 = 0;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    operator delete(*(void **)(v4 + 16));
  *(_QWORD *)(v4 + 8) = 4;
  *(_QWORD *)(v4 + 16) = 2;
  *(_OWORD *)(v4 + 24) = v13;
  *(_OWORD *)(v4 + 40) = v14;
  *(_QWORD *)&v13 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 80), (uint64_t)&v13, 2uLL);
  v12 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 56), (uint64_t)&v12, 1uLL);
  v5 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v5) >> 3)) <= 1)
    goto LABEL_14;
  *(_DWORD *)(v5 + 104) = 0;
  if ((*(_BYTE *)(v5 + 112) & 1) != 0)
    operator delete(*(void **)(v5 + 120));
  *(_QWORD *)(v5 + 112) = 4;
  *(_QWORD *)(v5 + 120) = 2;
  v6 = v14;
  *(_OWORD *)(v5 + 128) = v13;
  *(_OWORD *)(v5 + 144) = v6;
  *(_QWORD *)&v13 = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 184), (uint64_t)&v13, 2uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 2)
    goto LABEL_14;
  *(_DWORD *)(v7 + 208) = 1;
  if ((*(_BYTE *)(v7 + 216) & 1) != 0)
    operator delete(*(void **)(v7 + 224));
  *(_QWORD *)(v7 + 216) = 4;
  *(_QWORD *)(v7 + 224) = 0x200000000;
  v8 = v14;
  *(_OWORD *)(v7 + 232) = v13;
  *(_OWORD *)(v7 + 248) = v8;
  *(_QWORD *)&v13 = 0x200000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 288), (uint64_t)&v13, 2uLL);
  v12 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 264), (uint64_t)&v12, 1uLL);
  v10 = a1 + 104;
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v10 + 8) - v9) >> 3)) <= 3)
LABEL_14:
    __break(1u);
  *(_DWORD *)(v9 + 312) = 1;
  if ((*(_BYTE *)(v9 + 320) & 1) != 0)
    operator delete(*(void **)(v9 + 328));
  *(_QWORD *)(v9 + 320) = 4;
  *(_QWORD *)(v9 + 328) = 0x200000000;
  v11 = v14;
  *(_OWORD *)(v9 + 336) = v13;
  *(_OWORD *)(v9 + 352) = v11;
  *(_QWORD *)&v13 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 392), (uint64_t)&v13, 2uLL);
}

void webrtc::ScalabilityStructureS2T2::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x400000000;
  *(_DWORD *)(a1 + 8) = 2;
  v17 = xmmword_208F1AD80;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v17, 4uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 6uLL);
  v4 = *v3;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v4) >> 3)) <= 1)
    goto LABEL_20;
  *(_QWORD *)(v4 + 104) = 0;
  if ((*(_BYTE *)(v4 + 112) & 1) != 0)
    operator delete(*(void **)(v4 + 120));
  *(_QWORD *)(v4 + 112) = 8;
  *(_OWORD *)(v4 + 120) = xmmword_208F1AF70;
  *(_OWORD *)(v4 + 136) = v17;
  *(_QWORD *)(v4 + 152) = v18;
  *(_QWORD *)&v17 = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 184), (uint64_t)&v17, 2uLL);
  v5 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v5) >> 3)) <= 4)
    goto LABEL_20;
  *(_QWORD *)(v5 + 416) = 1;
  if ((*(_BYTE *)(v5 + 424) & 1) != 0)
    operator delete(*(void **)(v5 + 432));
  *(_QWORD *)(v5 + 424) = 8;
  v6 = v17;
  *(_OWORD *)(v5 + 432) = xmmword_208F1ADB0;
  *(_OWORD *)(v5 + 448) = v6;
  *(_QWORD *)(v5 + 464) = v18;
  *(_QWORD *)&v17 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 496), (uint64_t)&v17, 2uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 2)
    goto LABEL_20;
  *(_QWORD *)(v7 + 208) = 0x100000000;
  if ((*(_BYTE *)(v7 + 216) & 1) != 0)
    operator delete(*(void **)(v7 + 224));
  *(_QWORD *)(v7 + 216) = 8;
  v8 = v17;
  *(_OWORD *)(v7 + 224) = xmmword_208F05140;
  *(_OWORD *)(v7 + 240) = v8;
  *(_QWORD *)(v7 + 256) = v18;
  *(_QWORD *)&v17 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 288), (uint64_t)&v17, 2uLL);
  v16 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 264), (uint64_t)&v16, 1uLL);
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v9) >> 3)) <= 5)
    goto LABEL_20;
  *(_QWORD *)(v9 + 520) = 0x100000001;
  if ((*(_BYTE *)(v9 + 528) & 1) != 0)
    operator delete(*(void **)(v9 + 536));
  *(_QWORD *)(v9 + 528) = 8;
  *(_QWORD *)(v9 + 568) = v18;
  v10 = v17;
  *(_OWORD *)(v9 + 536) = xmmword_208F08B10;
  *(_OWORD *)(v9 + 552) = v10;
  *(_QWORD *)&v17 = 0x200000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 600), (uint64_t)&v17, 2uLL);
  v16 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 576), (uint64_t)&v16, 1uLL);
  v11 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) == v11)
    goto LABEL_20;
  *(_QWORD *)v11 = 0;
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    operator delete(*(void **)(v11 + 16));
  *(_QWORD *)(v11 + 8) = 8;
  v12 = v17;
  *(_OWORD *)(v11 + 16) = xmmword_208F1AF70;
  *(_OWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 48) = v18;
  *(_QWORD *)&v17 = 0x300000004;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 80), (uint64_t)&v17, 2uLL);
  v16 = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 56), (uint64_t)&v16, 1uLL);
  v14 = a1 + 104;
  v13 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v14 + 8) - v13) >> 3)) <= 3)
LABEL_20:
    __break(1u);
  *(_QWORD *)(v13 + 312) = 1;
  if ((*(_BYTE *)(v13 + 320) & 1) != 0)
    operator delete(*(void **)(v13 + 328));
  *(_QWORD *)(v13 + 320) = 8;
  *(_QWORD *)(v13 + 360) = v18;
  v15 = v17;
  *(_OWORD *)(v13 + 328) = xmmword_208F1ADB0;
  *(_OWORD *)(v13 + 344) = v15;
  *(_QWORD *)&v17 = 0x400000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 392), (uint64_t)&v17, 2uLL);
  v16 = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 368), (uint64_t)&v16, 1uLL);
}

void webrtc::ScalabilityStructureS2T3::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = 0x600000000;
  *(_DWORD *)(a1 + 8) = 2;
  v16 = xmmword_208F1AFA8;
  v17 = 0x100000001;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v16, 6uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 0xAuLL);
  v4 = *v3;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v4) >> 3)) <= 1)
    goto LABEL_32;
  *(_QWORD *)(v4 + 104) = 0;
  if ((*(_BYTE *)(v4 + 112) & 1) != 0)
    operator delete(*(void **)(v4 + 120));
  *(_QWORD *)(v4 + 112) = 12;
  *(_OWORD *)(v4 + 120) = xmmword_208F08AE0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_OWORD *)(v4 + 144) = v16;
  *(_QWORD *)&v16 = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 184), (uint64_t)&v16, 2uLL);
  v5 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v5) >> 3)) <= 6)
    goto LABEL_32;
  *(_QWORD *)(v5 + 624) = 1;
  if ((*(_BYTE *)(v5 + 632) & 1) != 0)
    operator delete(*(void **)(v5 + 640));
  *(_QWORD *)(v5 + 632) = 12;
  *(_OWORD *)(v5 + 640) = xmmword_208F1ADC0;
  *(_QWORD *)(v5 + 656) = 0x200000002;
  *(_OWORD *)(v5 + 664) = v16;
  *(_QWORD *)&v16 = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 704), (uint64_t)&v16, 2uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 3)
    goto LABEL_32;
  *(_QWORD *)(v6 + 312) = 0x200000000;
  if ((*(_BYTE *)(v6 + 320) & 1) != 0)
    operator delete(*(void **)(v6 + 328));
  *(_QWORD *)(v6 + 320) = 12;
  *(_OWORD *)(v6 + 328) = xmmword_208F05120;
  *(_QWORD *)(v6 + 344) = 0;
  *(_OWORD *)(v6 + 352) = v16;
  *(_QWORD *)&v16 = 0x100000002;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 392), (uint64_t)&v16, 2uLL);
  v15 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 368), (uint64_t)&v15, 1uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 8)
    goto LABEL_32;
  *(_QWORD *)(v7 + 832) = 0x200000001;
  if ((*(_BYTE *)(v7 + 840) & 1) != 0)
    operator delete(*(void **)(v7 + 848));
  *(_QWORD *)(v7 + 840) = 12;
  *(_QWORD *)(v7 + 856) = 0;
  *(_QWORD *)(v7 + 848) = 0;
  *(_QWORD *)(v7 + 864) = 0x100000000;
  *(_OWORD *)(v7 + 872) = v16;
  *(_QWORD *)&v16 = 0x200000003;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 912), (uint64_t)&v16, 2uLL);
  v15 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 888), (uint64_t)&v15, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 2)
    goto LABEL_32;
  *(_QWORD *)(v8 + 208) = 0x100000000;
  if ((*(_BYTE *)(v8 + 216) & 1) != 0)
    operator delete(*(void **)(v8 + 224));
  *(_QWORD *)(v8 + 216) = 12;
  *(_OWORD *)(v8 + 224) = xmmword_208F1ADD0;
  *(_QWORD *)(v8 + 240) = 0;
  *(_OWORD *)(v8 + 248) = v16;
  *(_QWORD *)&v16 = 0x300000004;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 288), (uint64_t)&v16, 2uLL);
  v15 = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 264), (uint64_t)&v15, 1uLL);
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v9) >> 3)) <= 7)
    goto LABEL_32;
  *(_QWORD *)(v9 + 728) = 0x100000001;
  if ((*(_BYTE *)(v9 + 736) & 1) != 0)
    operator delete(*(void **)(v9 + 744));
  *(_QWORD *)(v9 + 736) = 12;
  *(_QWORD *)(v9 + 752) = 0;
  *(_QWORD *)(v9 + 744) = 0;
  *(_QWORD *)(v9 + 760) = 0x200000001;
  *(_OWORD *)(v9 + 768) = v16;
  *(_QWORD *)&v16 = 0x400000005;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 808), (uint64_t)&v16, 2uLL);
  v15 = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 784), (uint64_t)&v15, 1uLL);
  v10 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v10) >> 3)) <= 4)
    goto LABEL_32;
  *(_QWORD *)(v10 + 416) = 0x200000000;
  if ((*(_BYTE *)(v10 + 424) & 1) != 0)
    operator delete(*(void **)(v10 + 432));
  *(_QWORD *)(v10 + 424) = 12;
  *(_OWORD *)(v10 + 432) = xmmword_208F05120;
  *(_QWORD *)(v10 + 448) = 0;
  *(_OWORD *)(v10 + 456) = v16;
  *(_QWORD *)&v16 = 0x500000006;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 496), (uint64_t)&v16, 2uLL);
  v15 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 472), (uint64_t)&v15, 1uLL);
  v11 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v11) >> 3)) <= 9)
    goto LABEL_32;
  *(_QWORD *)(v11 + 936) = 0x200000001;
  if ((*(_BYTE *)(v11 + 944) & 1) != 0)
    operator delete(*(void **)(v11 + 952));
  *(_QWORD *)(v11 + 944) = 12;
  *(_QWORD *)(v11 + 960) = 0;
  *(_QWORD *)(v11 + 952) = 0;
  *(_QWORD *)(v11 + 968) = 0x100000000;
  *(_OWORD *)(v11 + 976) = v16;
  *(_QWORD *)&v16 = 0x600000007;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 1016), (uint64_t)&v16, 2uLL);
  v15 = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 992), (uint64_t)&v15, 1uLL);
  v12 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) == v12)
    goto LABEL_32;
  *(_QWORD *)v12 = 0;
  if ((*(_BYTE *)(v12 + 8) & 1) != 0)
    operator delete(*(void **)(v12 + 16));
  *(_QWORD *)(v12 + 8) = 12;
  *(_OWORD *)(v12 + 16) = xmmword_208F08AE0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_OWORD *)(v12 + 40) = v16;
  *(_QWORD *)&v16 = 0x700000008;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 80), (uint64_t)&v16, 2uLL);
  v15 = 8;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 56), (uint64_t)&v15, 1uLL);
  v14 = a1 + 104;
  v13 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v14 + 8) - v13) >> 3)) <= 5)
LABEL_32:
    __break(1u);
  *(_QWORD *)(v13 + 520) = 1;
  if ((*(_BYTE *)(v13 + 528) & 1) != 0)
    operator delete(*(void **)(v13 + 536));
  *(_QWORD *)(v13 + 528) = 12;
  *(_OWORD *)(v13 + 536) = xmmword_208F1ADC0;
  *(_QWORD *)(v13 + 552) = 0x200000002;
  *(_OWORD *)(v13 + 560) = v16;
  *(_QWORD *)&v16 = 0x800000001;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 600), (uint64_t)&v16, 2uLL);
  v15 = 8;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 576), (uint64_t)&v15, 1uLL);
}

void webrtc::ScalabilityStructureS3T1::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE v12[28];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x300000000;
  *(_DWORD *)(a1 + 8) = 3;
  *(_QWORD *)v12 = 0x100000000;
  *(_DWORD *)&v12[8] = 2;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)v12, 3uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 6uLL);
  v4 = *v3;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v4) >> 3)) <= 1)
    goto LABEL_20;
  *(_QWORD *)(v4 + 104) = 0;
  if ((*(_BYTE *)(v4 + 112) & 1) != 0)
    operator delete(*(void **)(v4 + 120));
  *(_QWORD *)(v4 + 112) = 6;
  *(_QWORD *)(v4 + 120) = 2;
  *(_DWORD *)(v4 + 128) = 0;
  *(_OWORD *)(v4 + 132) = *(_OWORD *)v12;
  *(_OWORD *)(v4 + 144) = *(_OWORD *)&v12[12];
  *(_QWORD *)v12 = 0;
  *(_DWORD *)&v12[8] = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 184), (uint64_t)v12, 3uLL);
  v5 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v5) >> 3)) <= 3)
    goto LABEL_20;
  *(_QWORD *)(v5 + 312) = 1;
  if ((*(_BYTE *)(v5 + 320) & 1) != 0)
    operator delete(*(void **)(v5 + 328));
  *(_QWORD *)(v5 + 320) = 6;
  *(_QWORD *)(v5 + 328) = 0x200000000;
  *(_DWORD *)(v5 + 336) = 0;
  *(_OWORD *)(v5 + 352) = *(_OWORD *)&v12[12];
  *(_OWORD *)(v5 + 340) = *(_OWORD *)v12;
  *(_QWORD *)v12 = 1;
  *(_DWORD *)&v12[8] = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 392), (uint64_t)v12, 3uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 5)
    goto LABEL_20;
  *(_QWORD *)(v6 + 520) = 2;
  if ((*(_BYTE *)(v6 + 528) & 1) != 0)
    operator delete(*(void **)(v6 + 536));
  *(_QWORD *)(v6 + 528) = 6;
  *(_QWORD *)(v6 + 536) = 0;
  *(_DWORD *)(v6 + 544) = 2;
  *(_OWORD *)(v6 + 560) = *(_OWORD *)&v12[12];
  *(_OWORD *)(v6 + 548) = *(_OWORD *)v12;
  *(_QWORD *)v12 = 0x100000002;
  *(_DWORD *)&v12[8] = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 600), (uint64_t)v12, 3uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) == v7)
    goto LABEL_20;
  *(_QWORD *)v7 = 0;
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
    operator delete(*(void **)(v7 + 16));
  *(_QWORD *)(v7 + 8) = 6;
  *(_QWORD *)(v7 + 16) = 2;
  *(_DWORD *)(v7 + 24) = 0;
  *(_OWORD *)(v7 + 28) = *(_OWORD *)v12;
  *(_OWORD *)(v7 + 40) = *(_OWORD *)&v12[12];
  *(_QWORD *)v12 = 0x200000003;
  *(_DWORD *)&v12[8] = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 80), (uint64_t)v12, 3uLL);
  v11 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 56), (uint64_t)&v11, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 2)
    goto LABEL_20;
  *(_QWORD *)(v8 + 208) = 1;
  if ((*(_BYTE *)(v8 + 216) & 1) != 0)
    operator delete(*(void **)(v8 + 224));
  *(_QWORD *)(v8 + 216) = 6;
  *(_QWORD *)(v8 + 224) = 0x200000000;
  *(_DWORD *)(v8 + 232) = 0;
  *(_OWORD *)(v8 + 236) = *(_OWORD *)v12;
  *(_OWORD *)(v8 + 248) = *(_OWORD *)&v12[12];
  *(_QWORD *)v12 = 0x300000001;
  *(_DWORD *)&v12[8] = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 288), (uint64_t)v12, 3uLL);
  v11 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 264), (uint64_t)&v11, 1uLL);
  v10 = a1 + 104;
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v10 + 8) - v9) >> 3)) <= 4)
LABEL_20:
    __break(1u);
  *(_QWORD *)(v9 + 416) = 2;
  if ((*(_BYTE *)(v9 + 424) & 1) != 0)
    operator delete(*(void **)(v9 + 432));
  *(_QWORD *)(v9 + 424) = 6;
  *(_QWORD *)(v9 + 432) = 0;
  *(_DWORD *)(v9 + 440) = 2;
  *(_OWORD *)(v9 + 444) = *(_OWORD *)v12;
  *(_OWORD *)(v9 + 456) = *(_OWORD *)&v12[12];
  *(_QWORD *)v12 = 0x100000002;
  *(_DWORD *)&v12[8] = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 496), (uint64_t)v12, 3uLL);
  v11 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 472), (uint64_t)&v11, 1uLL);
}

void webrtc::ScalabilityStructureS3T2::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = 0x600000000;
  *(_DWORD *)(a1 + 8) = 3;
  v15 = xmmword_208F1AFC0;
  v16 = 0x200000002;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v15, 6uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 9uLL);
  v4 = *v3;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v4) >> 3)) <= 1)
    goto LABEL_29;
  *(_QWORD *)(v4 + 104) = 0;
  if ((*(_BYTE *)(v4 + 112) & 1) != 0)
    operator delete(*(void **)(v4 + 120));
  *(_QWORD *)(v4 + 112) = 12;
  *(_OWORD *)(v4 + 120) = xmmword_208F1AF70;
  *(_QWORD *)(v4 + 136) = 0;
  *(_OWORD *)(v4 + 144) = v15;
  *(_QWORD *)&v15 = 0;
  DWORD2(v15) = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 184), (uint64_t)&v15, 3uLL);
  v5 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v5) >> 3)) <= 4)
    goto LABEL_29;
  *(_QWORD *)(v5 + 416) = 1;
  if ((*(_BYTE *)(v5 + 424) & 1) != 0)
    operator delete(*(void **)(v5 + 432));
  *(_QWORD *)(v5 + 424) = 12;
  *(_OWORD *)(v5 + 432) = xmmword_208F1ADB0;
  *(_QWORD *)(v5 + 448) = 0;
  *(_OWORD *)(v5 + 456) = v15;
  *(_QWORD *)&v15 = 1;
  DWORD2(v15) = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 496), (uint64_t)&v15, 3uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 7)
    goto LABEL_29;
  *(_QWORD *)(v6 + 728) = 2;
  if ((*(_BYTE *)(v6 + 736) & 1) != 0)
    operator delete(*(void **)(v6 + 744));
  *(_QWORD *)(v6 + 736) = 12;
  *(_QWORD *)(v6 + 752) = 0;
  *(_QWORD *)(v6 + 744) = 0;
  *(_QWORD *)(v6 + 760) = 0x200000002;
  *(_OWORD *)(v6 + 768) = v15;
  *(_QWORD *)&v15 = 0x100000002;
  DWORD2(v15) = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 808), (uint64_t)&v15, 3uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 2)
    goto LABEL_29;
  *(_QWORD *)(v7 + 208) = 0x100000000;
  if ((*(_BYTE *)(v7 + 216) & 1) != 0)
    operator delete(*(void **)(v7 + 224));
  *(_QWORD *)(v7 + 216) = 12;
  *(_OWORD *)(v7 + 224) = xmmword_208F05140;
  *(_QWORD *)(v7 + 240) = 0;
  *(_OWORD *)(v7 + 248) = v15;
  *(_QWORD *)&v15 = 0x200000003;
  DWORD2(v15) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 288), (uint64_t)&v15, 3uLL);
  v14 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 264), (uint64_t)&v14, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 5)
    goto LABEL_29;
  *(_QWORD *)(v8 + 520) = 0x100000001;
  if ((*(_BYTE *)(v8 + 528) & 1) != 0)
    operator delete(*(void **)(v8 + 536));
  *(_QWORD *)(v8 + 528) = 12;
  *(_OWORD *)(v8 + 536) = xmmword_208F08B10;
  *(_QWORD *)(v8 + 552) = 0;
  *(_OWORD *)(v8 + 560) = v15;
  *(_QWORD *)&v15 = 0x300000004;
  DWORD2(v15) = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 600), (uint64_t)&v15, 3uLL);
  v14 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 576), (uint64_t)&v14, 1uLL);
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v9) >> 3)) <= 8)
    goto LABEL_29;
  *(_QWORD *)(v9 + 832) = 0x100000002;
  if ((*(_BYTE *)(v9 + 840) & 1) != 0)
    operator delete(*(void **)(v9 + 848));
  *(_QWORD *)(v9 + 840) = 12;
  *(_QWORD *)(v9 + 856) = 0;
  *(_QWORD *)(v9 + 848) = 0;
  *(_QWORD *)(v9 + 864) = 0x100000000;
  *(_OWORD *)(v9 + 872) = v15;
  *(_QWORD *)&v15 = 0x400000005;
  DWORD2(v15) = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 912), (uint64_t)&v15, 3uLL);
  v14 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 888), (uint64_t)&v14, 1uLL);
  v10 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) == v10)
    goto LABEL_29;
  *(_QWORD *)v10 = 0;
  if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    operator delete(*(void **)(v10 + 16));
  *(_QWORD *)(v10 + 8) = 12;
  *(_OWORD *)(v10 + 16) = xmmword_208F1AF70;
  *(_QWORD *)(v10 + 32) = 0;
  *(_OWORD *)(v10 + 40) = v15;
  *(_QWORD *)&v15 = 0x500000006;
  DWORD2(v15) = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 80), (uint64_t)&v15, 3uLL);
  v14 = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 56), (uint64_t)&v14, 1uLL);
  v11 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v11) >> 3)) <= 3)
    goto LABEL_29;
  *(_QWORD *)(v11 + 312) = 1;
  if ((*(_BYTE *)(v11 + 320) & 1) != 0)
    operator delete(*(void **)(v11 + 328));
  *(_QWORD *)(v11 + 320) = 12;
  *(_OWORD *)(v11 + 328) = xmmword_208F1ADB0;
  *(_QWORD *)(v11 + 344) = 0;
  *(_OWORD *)(v11 + 352) = v15;
  *(_QWORD *)&v15 = 0x600000001;
  DWORD2(v15) = 5;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 392), (uint64_t)&v15, 3uLL);
  v14 = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 368), (uint64_t)&v14, 1uLL);
  v13 = a1 + 104;
  v12 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v13 + 8) - v12) >> 3)) <= 6)
LABEL_29:
    __break(1u);
  *(_QWORD *)(v12 + 624) = 2;
  if ((*(_BYTE *)(v12 + 632) & 1) != 0)
    operator delete(*(void **)(v12 + 640));
  *(_QWORD *)(v12 + 632) = 12;
  *(_QWORD *)(v12 + 648) = 0;
  *(_QWORD *)(v12 + 640) = 0;
  *(_QWORD *)(v12 + 656) = 0x200000002;
  *(_OWORD *)(v12 + 664) = v15;
  *(_QWORD *)&v15 = 0x100000002;
  DWORD2(v15) = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 704), (uint64_t)&v15, 3uLL);
  v14 = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 680), (uint64_t)&v14, 1uLL);
}

void webrtc::ScalabilityStructureS3T3::DependencyStructure(uint64_t a1@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _OWORD v21[2];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a1 = 0x900000000;
  *(_DWORD *)(a1 + 8) = 3;
  v21[0] = xmmword_208F1AFD8;
  v21[1] = unk_208F1AFE8;
  v22 = 2;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)v21, 9uLL);
  std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)v3, 0xFuLL);
  v4 = *v3;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v4) >> 3)) <= 1)
    goto LABEL_47;
  *(_QWORD *)(v4 + 104) = 0;
  if ((*(_BYTE *)(v4 + 112) & 1) != 0)
    operator delete(*(void **)(v4 + 120));
  *(_QWORD *)(v4 + 112) = 18;
  *(_OWORD *)(v4 + 120) = xmmword_208F08AE0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_DWORD *)(v4 + 152) = 0;
  *(_QWORD *)&v21[0] = 0;
  DWORD2(v21[0]) = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v4 + 184), (uint64_t)v21, 3uLL);
  v5 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v5) >> 3)) <= 6)
    goto LABEL_47;
  *(_QWORD *)(v5 + 624) = 1;
  if ((*(_BYTE *)(v5 + 632) & 1) != 0)
    operator delete(*(void **)(v5 + 640));
  *(_QWORD *)(v5 + 632) = 18;
  *(_OWORD *)(v5 + 640) = xmmword_208F1ADC0;
  *(_OWORD *)(v5 + 656) = xmmword_208F1AF70;
  *(_DWORD *)(v5 + 672) = 0;
  *(_QWORD *)&v21[0] = 1;
  DWORD2(v21[0]) = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v5 + 704), (uint64_t)v21, 3uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v6) >> 3)) <= 0xB)
    goto LABEL_47;
  *(_QWORD *)(v6 + 1144) = 2;
  if ((*(_BYTE *)(v6 + 1152) & 1) != 0)
    operator delete(*(void **)(v6 + 1160));
  *(_QWORD *)(v6 + 1152) = 18;
  *(_QWORD *)(v6 + 1160) = 0;
  *(_QWORD *)(v6 + 1168) = 0;
  *(_OWORD *)(v6 + 1176) = xmmword_208F1ADB0;
  *(_DWORD *)(v6 + 1192) = 2;
  *(_QWORD *)&v21[0] = 0x100000002;
  DWORD2(v21[0]) = 0;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v6 + 1224), (uint64_t)v21, 3uLL);
  v7 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v7) >> 3)) <= 3)
    goto LABEL_47;
  *(_QWORD *)(v7 + 312) = 0x200000000;
  if ((*(_BYTE *)(v7 + 320) & 1) != 0)
    operator delete(*(void **)(v7 + 328));
  *(_QWORD *)(v7 + 320) = 18;
  *(_OWORD *)(v7 + 328) = xmmword_208F05120;
  *(_QWORD *)(v7 + 344) = 0;
  *(_QWORD *)(v7 + 352) = 0;
  *(_DWORD *)(v7 + 360) = 0;
  *(_QWORD *)&v21[0] = 0x200000003;
  DWORD2(v21[0]) = 1;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 392), (uint64_t)v21, 3uLL);
  v20 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v7 + 368), (uint64_t)&v20, 1uLL);
  v8 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v8) >> 3)) <= 8)
    goto LABEL_47;
  *(_QWORD *)(v8 + 832) = 0x200000001;
  if ((*(_BYTE *)(v8 + 840) & 1) != 0)
    operator delete(*(void **)(v8 + 848));
  *(_QWORD *)(v8 + 840) = 18;
  *(_QWORD *)(v8 + 856) = 0;
  *(_QWORD *)(v8 + 848) = 0;
  *(_OWORD *)(v8 + 864) = xmmword_208F05140;
  *(_DWORD *)(v8 + 880) = 0;
  *(_QWORD *)&v21[0] = 0x300000004;
  DWORD2(v21[0]) = 2;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 912), (uint64_t)v21, 3uLL);
  v20 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 888), (uint64_t)&v20, 1uLL);
  v9 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v9) >> 3)) <= 0xD)
    goto LABEL_47;
  *(_QWORD *)(v9 + 1352) = 0x200000002;
  if ((*(_BYTE *)(v9 + 1360) & 1) != 0)
    operator delete(*(void **)(v9 + 1368));
  *(_QWORD *)(v9 + 1360) = 18;
  *(_OWORD *)(v9 + 1368) = 0u;
  *(_OWORD *)(v9 + 1384) = 0u;
  *(_DWORD *)(v9 + 1400) = 1;
  *(_QWORD *)&v21[0] = 0x400000005;
  DWORD2(v21[0]) = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 1432), (uint64_t)v21, 3uLL);
  v20 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v9 + 1408), (uint64_t)&v20, 1uLL);
  v10 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v10) >> 3)) <= 2)
    goto LABEL_47;
  *(_QWORD *)(v10 + 208) = 0x100000000;
  if ((*(_BYTE *)(v10 + 216) & 1) != 0)
    operator delete(*(void **)(v10 + 224));
  *(_QWORD *)(v10 + 216) = 18;
  *(_OWORD *)(v10 + 224) = xmmword_208F1ADD0;
  *(_QWORD *)(v10 + 240) = 0;
  *(_QWORD *)(v10 + 248) = 0;
  *(_DWORD *)(v10 + 256) = 0;
  *(_QWORD *)&v21[0] = 0x500000006;
  DWORD2(v21[0]) = 4;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 288), (uint64_t)v21, 3uLL);
  v20 = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v10 + 264), (uint64_t)&v20, 1uLL);
  v11 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v11) >> 3)) <= 7)
    goto LABEL_47;
  *(_QWORD *)(v11 + 728) = 0x100000001;
  if ((*(_BYTE *)(v11 + 736) & 1) != 0)
    operator delete(*(void **)(v11 + 744));
  *(_QWORD *)(v11 + 736) = 18;
  *(_QWORD *)(v11 + 744) = 0;
  *(_QWORD *)(v11 + 752) = 0;
  *(_OWORD *)(v11 + 760) = xmmword_208F08A70;
  *(_DWORD *)(v11 + 776) = 0;
  *(_QWORD *)&v21[0] = 0x600000007;
  DWORD2(v21[0]) = 5;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 808), (uint64_t)v21, 3uLL);
  v20 = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v11 + 784), (uint64_t)&v20, 1uLL);
  v12 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v12) >> 3)) <= 0xC)
    goto LABEL_47;
  *(_QWORD *)(v12 + 1248) = 0x100000002;
  if ((*(_BYTE *)(v12 + 1256) & 1) != 0)
    operator delete(*(void **)(v12 + 1264));
  *(_QWORD *)(v12 + 1256) = 18;
  *(_QWORD *)(v12 + 1272) = 0;
  *(_QWORD *)(v12 + 1264) = 0;
  *(_OWORD *)(v12 + 1280) = xmmword_208F08B10;
  *(_DWORD *)(v12 + 1296) = 2;
  *(_QWORD *)&v21[0] = 0x700000008;
  DWORD2(v21[0]) = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 1328), (uint64_t)v21, 3uLL);
  v20 = 6;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 1304), (uint64_t)&v20, 1uLL);
  v13 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v13) >> 3)) <= 4)
    goto LABEL_47;
  *(_QWORD *)(v13 + 416) = 0x200000000;
  if ((*(_BYTE *)(v13 + 424) & 1) != 0)
    operator delete(*(void **)(v13 + 432));
  *(_QWORD *)(v13 + 424) = 18;
  *(_OWORD *)(v13 + 432) = xmmword_208F05120;
  *(_QWORD *)(v13 + 448) = 0;
  *(_QWORD *)(v13 + 456) = 0;
  *(_DWORD *)(v13 + 464) = 0;
  *(_QWORD *)&v21[0] = 0x800000009;
  DWORD2(v21[0]) = 7;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 496), (uint64_t)v21, 3uLL);
  v20 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v13 + 472), (uint64_t)&v20, 1uLL);
  v14 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v14) >> 3)) <= 9)
    goto LABEL_47;
  *(_QWORD *)(v14 + 936) = 0x200000001;
  if ((*(_BYTE *)(v14 + 944) & 1) != 0)
    operator delete(*(void **)(v14 + 952));
  *(_QWORD *)(v14 + 944) = 18;
  *(_QWORD *)(v14 + 952) = 0;
  *(_QWORD *)(v14 + 960) = 0;
  *(_OWORD *)(v14 + 968) = xmmword_208F05140;
  *(_DWORD *)(v14 + 984) = 0;
  *(_QWORD *)&v21[0] = 0x90000000ALL;
  DWORD2(v21[0]) = 8;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 1016), (uint64_t)v21, 3uLL);
  v20 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v14 + 992), (uint64_t)&v20, 1uLL);
  v15 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v15) >> 3)) <= 0xE)
    goto LABEL_47;
  *(_QWORD *)(v15 + 1456) = 0x200000002;
  if ((*(_BYTE *)(v15 + 1464) & 1) != 0)
    operator delete(*(void **)(v15 + 1472));
  *(_QWORD *)(v15 + 1464) = 18;
  *(_OWORD *)(v15 + 1472) = 0u;
  *(_OWORD *)(v15 + 1488) = 0u;
  *(_DWORD *)(v15 + 1504) = 1;
  *(_QWORD *)&v21[0] = 0xA0000000BLL;
  DWORD2(v21[0]) = 9;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v15 + 1536), (uint64_t)v21, 3uLL);
  v20 = 3;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v15 + 1512), (uint64_t)&v20, 1uLL);
  v16 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) == v16)
    goto LABEL_47;
  *(_QWORD *)v16 = 0;
  if ((*(_BYTE *)(v16 + 8) & 1) != 0)
    operator delete(*(void **)(v16 + 16));
  *(_QWORD *)(v16 + 8) = 18;
  *(_OWORD *)(v16 + 16) = xmmword_208F08AE0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_DWORD *)(v16 + 48) = 0;
  *(_QWORD *)&v21[0] = 0xB0000000CLL;
  DWORD2(v21[0]) = 10;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v16 + 80), (uint64_t)v21, 3uLL);
  v20 = 12;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v16 + 56), (uint64_t)&v20, 1uLL);
  v17 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 112) - v17) >> 3)) <= 5)
    goto LABEL_47;
  *(_QWORD *)(v17 + 520) = 1;
  if ((*(_BYTE *)(v17 + 528) & 1) != 0)
    operator delete(*(void **)(v17 + 536));
  *(_QWORD *)(v17 + 528) = 18;
  *(_OWORD *)(v17 + 536) = xmmword_208F1ADC0;
  *(_OWORD *)(v17 + 552) = xmmword_208F1AF70;
  *(_DWORD *)(v17 + 568) = 0;
  *(_QWORD *)&v21[0] = 0xC00000001;
  DWORD2(v21[0]) = 11;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v17 + 600), (uint64_t)v21, 3uLL);
  v20 = 12;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v17 + 576), (uint64_t)&v20, 1uLL);
  v19 = a1 + 104;
  v18 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v19 + 8) - v18) >> 3)) <= 0xA)
LABEL_47:
    __break(1u);
  *(_QWORD *)(v18 + 1040) = 2;
  if ((*(_BYTE *)(v18 + 1048) & 1) != 0)
    operator delete(*(void **)(v18 + 1056));
  *(_QWORD *)(v18 + 1048) = 18;
  *(_QWORD *)(v18 + 1064) = 0;
  *(_QWORD *)(v18 + 1056) = 0;
  *(_OWORD *)(v18 + 1072) = xmmword_208F1ADB0;
  *(_DWORD *)(v18 + 1088) = 2;
  *(_QWORD *)&v21[0] = 0x100000002;
  DWORD2(v21[0]) = 12;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v18 + 1120), (uint64_t)v21, 3uLL);
  v20 = 12;
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v18 + 1096), (uint64_t)&v20, 1uLL);
}

void webrtc::ScalabilityStructureS2T1::~ScalabilityStructureS2T1(webrtc::ScalabilityStructureS2T1 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureS2T2::~ScalabilityStructureS2T2(webrtc::ScalabilityStructureS2T2 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureS2T3::~ScalabilityStructureS2T3(webrtc::ScalabilityStructureS2T3 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureS3T1::~ScalabilityStructureS3T1(webrtc::ScalabilityStructureS3T1 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureS3T2::~ScalabilityStructureS3T2(webrtc::ScalabilityStructureS3T2 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalabilityStructureS3T3::~ScalabilityStructureS3T3(webrtc::ScalabilityStructureS3T3 *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ScalableVideoControllerNoLayering::~ScalableVideoControllerNoLayering(webrtc::ScalableVideoControllerNoLayering *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

__n128 webrtc::ScalableVideoControllerNoLayering::StreamConfig@<Q0>(uint64_t a1@<X8>)
{
  __n128 result;

  result.n128_u64[0] = 0x100000001;
  result.n128_u64[1] = 0x100000001;
  *(__n128 *)(a1 + 12) = result;
  *(__n128 *)(a1 + 28) = result;
  *(_QWORD *)a1 = 0x100000001;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

void webrtc::ScalableVideoControllerNoLayering::DependencyStructure(uint64_t a1@<X8>)
{
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  __int128 v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *__p;
  __int128 v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = (void **)(a1 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = 0x100000000;
  *(_DWORD *)(a1 + 8) = 1;
  LODWORD(v12) = 0;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a1 + 16), (uint64_t)&v12, 1uLL);
  LODWORD(v13) = 2;
  v12 = xmmword_208F1A990;
  LODWORD(v17) = 0;
  v14 = 0;
  v16 = 2;
  v4 = *(_QWORD *)(a1 + 112);
  if (v4 >= *(_QWORD *)(a1 + 120))
  {
    v5 = std::vector<webrtc::FrameDependencyTemplate>::__push_back_slow_path<webrtc::FrameDependencyTemplate const&>(v3, (uint64_t)&v12);
  }
  else
  {
    std::vector<webrtc::FrameDependencyTemplate>::__construct_one_at_end[abi:sn180100]<webrtc::FrameDependencyTemplate const&>((unint64_t *)v3, (uint64_t)&v12);
    v5 = (_QWORD *)(v4 + 104);
  }
  *(_QWORD *)(a1 + 112) = v5;
  LODWORD(v7) = 2;
  v6 = xmmword_208F1A990;
  LODWORD(__p) = 1;
  v10 = 2;
  LODWORD(v9) = 1;
  v8 = 2;
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 120))
  {
    *(_QWORD *)(a1 + 112) = std::vector<webrtc::FrameDependencyTemplate>::__push_back_slow_path<webrtc::FrameDependencyTemplate const&>(v3, (uint64_t)&v6);
    if ((v10 & 1) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  std::vector<webrtc::FrameDependencyTemplate>::__construct_one_at_end[abi:sn180100]<webrtc::FrameDependencyTemplate const&>((unint64_t *)v3, (uint64_t)&v6);
  *(_QWORD *)(a1 + 112) = v5 + 13;
  if ((v10 & 1) != 0)
LABEL_8:
    operator delete(__p);
LABEL_9:
  if ((v8 & 1) != 0)
  {
    operator delete(v9);
    if ((BYTE8(v6) & 1) == 0)
    {
LABEL_11:
      if ((v16 & 1) == 0)
        goto LABEL_12;
      goto LABEL_17;
    }
  }
  else if ((BYTE8(v6) & 1) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v7);
  if ((v16 & 1) == 0)
  {
LABEL_12:
    if ((v14 & 1) == 0)
      goto LABEL_13;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v17);
  if ((v14 & 1) == 0)
  {
LABEL_13:
    if ((BYTE8(v12) & 1) == 0)
      return;
LABEL_19:
    operator delete(v13);
    return;
  }
LABEL_18:
  operator delete(v15);
  if ((BYTE8(v12) & 1) != 0)
    goto LABEL_19;
}

char *webrtc::ScalableVideoControllerNoLayering::NextFrameConfig@<X0>(char *this@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  _BYTE *v5;
  char v6;

  if (this[9])
  {
    v5 = this;
    this = (char *)operator new(0x58uLL);
    a3[1] = this + 88;
    a3[2] = this + 88;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_QWORD *)this + 10) = 0;
    *a3 = this;
    if ((a2 & 1) != 0 || v5[8])
    {
      v6 = 0;
      this[4] = 1;
    }
    else
    {
      v6 = 1;
    }
    this[28] = v6;
    this[29] = 1;
    *((_QWORD *)this + 2) = 2;
    v5[8] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return this;
}

_QWORD *webrtc::ScalableVideoControllerNoLayering::OnEncodeDone@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *result;
  int v18;

  a2[7] = 0;
  a2[10] = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[13] = 0;
  a2[22] = 0;
  v4 = (void **)(a2 + 22);
  a2[24] = 0;
  a2[25] = 0xFFFFFFFFLL;
  a2[23] = 0;
  if (a2 + 13 != (_QWORD *)(a1 + 16))
  {
    v5 = *(_QWORD *)(a1 + 16);
    if ((v5 & 1) != 0)
      v6 = *(_QWORD *)(a1 + 24);
    else
      v6 = a1 + 24;
    absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::CodecBufferUsage>,webrtc::CodecBufferUsage const*>>(a2 + 13, v6, v5 >> 1);
  }
  if (*(_BYTE *)(a1 + 4))
  {
    v7 = a2 + 14;
    v8 = a2[13];
    if ((v8 & 1) != 0)
      v7 = (_QWORD *)a2[14];
    if (v8 >= 2)
    {
      v9 = v8 >> 1;
      v10 = ((v8 >> 1) - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v10)
      {
        v11 = v10 + 1;
        v12 = (v10 + 1) & 0x3FFFFFFFFFFFFFFELL;
        v13 = &v7[v12];
        v14 = (char *)v7 + 12;
        v15 = v12;
        do
        {
          *(v14 - 8) = 0;
          *v14 = 0;
          v14 += 16;
          v15 -= 2;
        }
        while (v15);
        if (v11 == v12)
          goto LABEL_18;
      }
      else
      {
        v13 = v7;
      }
      v16 = &v7[v9];
      do
        *((_BYTE *)v13++ + 4) = 0;
      while (v13 != v16);
    }
  }
LABEL_18:
  v18 = 2;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>(a2 + 1, (uint64_t)&v18, 1uLL);
  a2[23] = 0;
  if ((a2[24] & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    a2[23] = 1;
    result = (_QWORD *)a2[22];
  }
  else
  {
    if (*v4)
      operator delete(*v4);
    result = operator new(8uLL);
    a2[22] = result;
    *(int64x2_t *)(a2 + 23) = vdupq_n_s64(1uLL);
  }
  *result = 1;
  return result;
}

uint64_t webrtc::ScalableVideoControllerNoLayering::OnRatesUpdated(uint64_t result, uint64_t a2)
{
  BOOL v2;
  char v3;

  if (*(_BYTE *)(a2 + 8))
    v2 = *(_DWORD *)(a2 + 4) == 0;
  else
    v2 = 1;
  v3 = !v2;
  *(_BYTE *)(result + 9) = v3;
  return result;
}

unint64_t *std::vector<webrtc::FrameDependencyTemplate>::__construct_one_at_end[abi:sn180100]<webrtc::FrameDependencyTemplate const&>(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  v2 = result[1];
  if (!v2)
  {
    __break(1u);
    return result;
  }
  v4 = result;
  *(_QWORD *)v2 = *(_QWORD *)a2;
  *(_QWORD *)(v2 + 8) = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v5 = (unint64_t *)(a2 + 8);
  v6 = v7;
  if (v7 >= 2)
  {
    if ((v6 & 1) != 0)
    {
      absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::InitFrom((unint64_t *)(v2 + 8), v5);
      *(_QWORD *)(v2 + 56) = 0;
      v8 = (unint64_t *)(v2 + 56);
      v9 = (unint64_t *)(a2 + 56);
      v10 = *(_QWORD *)(a2 + 56);
      if (v10 >= 2)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)(v2 + 8) = v6;
      v13 = *(_OWORD *)(a2 + 16);
      v14 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(v2 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(v2 + 16) = v13;
      *(_OWORD *)(v2 + 32) = v14;
      *(_QWORD *)(v2 + 56) = 0;
      v8 = (unint64_t *)(v2 + 56);
      v9 = (unint64_t *)(a2 + 56);
      v10 = *(_QWORD *)(a2 + 56);
      if (v10 >= 2)
        goto LABEL_10;
    }
LABEL_4:
    *(_QWORD *)(v2 + 80) = 0;
    result = (unint64_t *)(v2 + 80);
    v11 = (unint64_t *)(a2 + 80);
    v12 = *(_QWORD *)(a2 + 80);
    if (v12 < 2)
    {
LABEL_5:
      v4[1] = v2 + 104;
      return result;
    }
    goto LABEL_14;
  }
  *(_QWORD *)(v2 + 56) = 0;
  v8 = (unint64_t *)(v2 + 56);
  v9 = (unint64_t *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 56);
  if (v10 < 2)
    goto LABEL_4;
LABEL_10:
  if ((v10 & 1) != 0)
  {
    absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(v8, v9);
    *(_QWORD *)(v2 + 80) = 0;
    result = (unint64_t *)(v2 + 80);
    v11 = (unint64_t *)(a2 + 80);
    v12 = *(_QWORD *)(a2 + 80);
    if (v12 < 2)
      goto LABEL_5;
  }
  else
  {
    *(_QWORD *)(v2 + 56) = v10;
    *(_OWORD *)(v2 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(v2 + 80) = 0;
    result = (unint64_t *)(v2 + 80);
    v11 = (unint64_t *)(a2 + 80);
    v12 = *(_QWORD *)(a2 + 80);
    if (v12 < 2)
      goto LABEL_5;
  }
LABEL_14:
  if ((v12 & 1) != 0)
  {
    result = (unint64_t *)absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(result, v11);
  }
  else
  {
    *(_QWORD *)(v2 + 80) = v12;
    *(_OWORD *)(v2 + 88) = *(_OWORD *)(a2 + 88);
  }
  v4[1] = v2 + 104;
  return result;
}

const char *ScaleRowDown2_NEON(const char *result, uint64_t a2, int8x16_t *a3, int a4)
{
  int8x16x2_t v9;

  do
  {
    v9 = vld2q_s8(result);
    result += 32;
    a4 -= 16;
    __asm { PRFM            #0, [X0,#0x1C0] }
    *a3++ = v9.val[1];
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

uint8x16_t ScaleRowDown2Linear_NEON(const char *_X0, uint64_t a2, uint8x16_t *a3, int a4)
{
  uint8x16_t result;
  int8x16x2_t v10;

  do
  {
    v10 = vld2q_s8(_X0);
    _X0 += 32;
    a4 -= 16;
    result = vrhaddq_u8((uint8x16_t)v10.val[0], (uint8x16_t)v10.val[1]);
    __asm { PRFM            #0, [X0,#0x1C0] }
    *a3++ = result;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int8x16_t ScaleRowDown2Box_NEON(uint8x16_t *_X0, uint64_t a2, int8x16_t *a3, int a4)
{
  uint8x16_t v5;
  uint8x16_t v6;
  uint8x16_t v7;
  uint8x16_t v8;
  int8x16_t result;

  _X1 = (uint8x16_t *)((char *)_X0 + a2);
  do
  {
    v5 = *_X0;
    v6 = _X0[1];
    _X0 += 2;
    v7 = *_X1;
    v8 = _X1[1];
    _X1 += 2;
    a4 -= 16;
    __asm
    {
      PRFM            #0, [X0,#0x1C0]
      PRFM            #0, [X1,#0x1C0]
    }
    result = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8(v5), v7), 2uLL), (int16x8_t)vpadalq_u8(vpaddlq_u8(v6), v8), 2uLL);
    *a3++ = result;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

const char *ScaleRowDown4_NEON(const char *result, uint64_t a2, int8x8_t *a3, int a4)
{
  int8x8x4_t v9;

  do
  {
    v9 = vld4_s8(result);
    result += 32;
    a4 -= 8;
    __asm { PRFM            #0, [X0,#0x1C0] }
    *a3++ = v9.val[2];
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int8x8_t ScaleRowDown4Box_NEON(uint8x16_t *_X0, uint64_t a2, _DWORD *a3, int a4)
{
  uint8x16_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  int16x8_t v18;
  int8x8_t result;

  _X8 = (uint8x16_t *)((char *)_X0 + a2);
  _X10 = (uint8x16_t *)((char *)_X0 + 2 * a2);
  _X9 = (uint8x16_t *)((char *)_X0 + 2 * a2 + a2);
  do
  {
    v7 = *_X0++;
    v8 = *_X8++;
    v9 = *_X10++;
    v10 = *_X9++;
    a4 -= 4;
    __asm
    {
      PRFM            #0, [X0,#0x1C0]
      PRFM            #0, [X8,#0x1C0]
      PRFM            #0, [X10,#0x1C0]
    }
    v18 = (int16x8_t)vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8(v7), v8), v9), v10);
    __asm { PRFM            #0, [X9,#0x1C0] }
    result = vrshrn_n_s16(vpaddq_s16(v18, v18), 4uLL);
    *a3++ = result.i32[0];
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

const char *ScaleRowDown34_NEON(const char *result, uint64_t a2, char *a3, int a4)
{
  int8x8x4_t v9;

  do
  {
    v9 = vld4_s8(result);
    result += 32;
    a4 -= 24;
    v9.val[2] = v9.val[3];
    __asm { PRFM            #0, [X0,#0x1C0] }
    vst3_s8(a3, *(int8x8x3_t *)v9.val[0].i8);
    a3 += 24;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

const char *ScaleRowDown34_0_Box_NEON(const char *result, uint64_t a2, char *a3, int a4)
{
  int8x8x4_t v11;
  int8x8x4_t v12;

  _X1 = &result[a2];
  do
  {
    v11 = vld4_s8(result);
    result += 32;
    v12 = vld4_s8(_X1);
    _X1 += 32;
    a4 -= 24;
    __asm { PRFM            #0, [X0,#0x1C0] }
    v11.val[1] = (int8x8_t)vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v12.val[1]), (uint8x8_t)v11.val[1], (uint8x8_t)0x303030303030303), 2uLL);
    v11.val[2] = (int8x8_t)vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v12.val[2]), (uint8x8_t)v11.val[2], (uint8x8_t)0x303030303030303), 2uLL);
    __asm { PRFM            #0, [X1,#0x1C0] }
    v11.val[0] = (int8x8_t)vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v11.val[1]), vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v12.val[0]), (uint8x8_t)v11.val[0], (uint8x8_t)0x303030303030303), 2uLL), (uint8x8_t)0x303030303030303), 2uLL);
    v11.val[1] = (int8x8_t)vrhadd_u8((uint8x8_t)v11.val[1], (uint8x8_t)v11.val[2]);
    v11.val[2] = (int8x8_t)vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v11.val[2]), vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v12.val[3]), (uint8x8_t)v11.val[3], (uint8x8_t)0x303030303030303), 2uLL), (uint8x8_t)0x303030303030303), 2uLL);
    vst3_s8(a3, *(int8x8x3_t *)v11.val[0].i8);
    a3 += 24;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

const char *ScaleRowDown34_1_Box_NEON(const char *result, uint64_t a2, char *a3, int a4)
{
  int8x8x4_t v11;
  int8x8x4_t v12;

  _X1 = &result[a2];
  do
  {
    v11 = vld4_s8(result);
    result += 32;
    v12 = vld4_s8(_X1);
    _X1 += 32;
    a4 -= 24;
    v11.val[1] = (int8x8_t)vrhadd_u8((uint8x8_t)v11.val[1], (uint8x8_t)v12.val[1]);
    v11.val[2] = (int8x8_t)vrhadd_u8((uint8x8_t)v11.val[2], (uint8x8_t)v12.val[2]);
    __asm { PRFM            #0, [X0,#0x1C0] }
    v11.val[0] = (int8x8_t)vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v11.val[1]), vrhadd_u8((uint8x8_t)v11.val[0], (uint8x8_t)v12.val[0]), (uint8x8_t)0x303030303030303), 2uLL);
    __asm { PRFM            #0, [X1,#0x1C0] }
    v11.val[1] = (int8x8_t)vrhadd_u8((uint8x8_t)v11.val[1], (uint8x8_t)v11.val[2]);
    v11.val[2] = (int8x8_t)vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v11.val[2]), vrhadd_u8((uint8x8_t)v11.val[3], (uint8x8_t)v12.val[3]), (uint8x8_t)0x303030303030303), 2uLL);
    vst3_s8(a3, *(int8x8x3_t *)v11.val[0].i8);
    a3 += 24;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int8x16x2_t *ScaleRowDown38_NEON(int8x16x2_t *result, uint64_t a2, _QWORD *a3, int a4)
{
  int8x16_t v4;
  _DWORD *v10;
  int8x16x2_t v11;

  do
  {
    v11 = *result++;
    a4 -= 12;
    v4 = vqtbl2q_s8(v11, libyuv::kShuf38);
    __asm { PRFM            #0, [X0,#0x1C0] }
    *a3 = v4.i64[0];
    v10 = a3 + 1;
    *v10 = v4.i32[2];
    a3 = v10 + 1;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int16x8_t ScaleRowDown38_3_Box_NEON(const char *_X0, uint64_t a2, _QWORD *a3, int a4, double a5, double a6, int16x8_t a7)
{
  int16x8_t v7;
  int16x8_t v8;
  int8x8_t v11;
  int8x8_t v12;
  int8x8_t v13;
  uint8x8_t v14;
  int16x8_t v15;
  int16x8_t result;
  int16x8_t v23;
  int8x16_t v25;
  _DWORD *v26;
  int8x8x4_t v27;
  int8x8x4_t v28;

  _X9 = &_X0[2 * a2];
  _X1 = &_X0[a2];
  do
  {
    *(int8x8x4_t *)(&a7 - 1) = vld4_s8(_X0);
    _X0 += 32;
    v27 = vld4_s8(_X1);
    _X1 += 32;
    v28 = vld4_s8(_X9);
    _X9 += 32;
    a4 -= 12;
    *(int8x8_t *)v7.i8 = vtrn1_s8(v11, v12);
    *(int8x8_t *)v8.i8 = vtrn2_s8(v11, v12);
    v14 = (uint8x8_t)vtrn1_s8(*(int8x8_t *)a7.i8, v13);
    *(int16x4_t *)v7.i8 = vadd_s16(vadd_s16((int16x4_t)vpaddl_u8(*(uint8x8_t *)v7.i8), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn1_s8(v27.val[0], v27.val[1]))), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn1_s8(v28.val[0], v28.val[1])));
    *(int16x4_t *)v8.i8 = vadd_s16(vadd_s16((int16x4_t)vpaddl_u8(*(uint8x8_t *)v8.i8), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(v27.val[0], v27.val[1]))), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(v28.val[0], v28.val[1])));
    *(int16x4_t *)a7.i8 = vadd_s16(vadd_s16((int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(*(int8x8_t *)a7.i8, v13)), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(v27.val[2], v27.val[3]))), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(v28.val[2], v28.val[3])));
    a7 = vqrdmulhq_s16(a7, libyuv::kMult38_Div6);
    *(int8x8_t *)a7.i8 = vmovn_s16(a7);
    v15 = vaddq_s16((int16x8_t)vaddl_u8(v14, (uint8x8_t)vtrn1_s8(v27.val[2], v27.val[3])), (int16x8_t)vmovl_u8((uint8x8_t)vtrn1_s8(v28.val[2], v28.val[3])));
    *(int16x8_t *)v27.val[0].i8 = vtrn2q_s16(v15, v15);
    *(int16x4_t *)v15.i8 = vmovn_s32((int32x4_t)vtrn1q_s16(v15, v15));
    v27.val[0] = (int8x8_t)vmovn_s32(*(int32x4_t *)v27.val[0].i8);
    __asm { PRFM            #0, [X0,#0x1C0] }
    v7 = vaddq_s16(v7, v15);
    v8 = vaddq_s16(v8, *(int16x8_t *)v27.val[0].i8);
    __asm { PRFM            #0, [X1,#0x1C0] }
    result = vqrdmulhq_s16(v7, libyuv::kMult38_Div9);
    v23 = vqrdmulhq_s16(v8, libyuv::kMult38_Div9);
    __asm { PRFM            #0, [X9,#0x1C0] }
    v25 = vqtbl3q_s8(*(int8x16x3_t *)(&a7 - 2), libyuv::kShuf38_2);
    *a3 = v25.i64[0];
    v26 = a3 + 1;
    *v26 = v25.i32[2];
    a3 = v26 + 1;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int16x8_t ScaleRowDown38_2_Box_NEON(const char *_X0, uint64_t a2, _QWORD *a3, int a4, double a5, double a6, uint16x8_t a7)
{
  int16x8_t v7;
  int16x8_t v8;
  int8x8_t v10;
  int8x8_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  int16x8_t v14;
  int16x8_t result;
  int16x8_t v22;
  int8x16_t v23;
  _DWORD *v24;
  int8x8x4_t v25;

  _X1 = &_X0[a2];
  do
  {
    *(int8x8x4_t *)(&a7 - 1) = vld4_s8(_X0);
    _X0 += 32;
    v25 = vld4_s8(_X1);
    _X1 += 32;
    a4 -= 12;
    *(int8x8_t *)v7.i8 = vtrn1_s8(v10, v11);
    *(int8x8_t *)v8.i8 = vtrn2_s8(v10, v11);
    v13 = (uint8x8_t)vtrn1_s8(*(int8x8_t *)a7.i8, v12);
    *(int16x4_t *)v7.i8 = vadd_s16((int16x4_t)vpaddl_u8(*(uint8x8_t *)v7.i8), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn1_s8(v25.val[0], v25.val[1])));
    *(int16x4_t *)v8.i8 = vadd_s16((int16x4_t)vpaddl_u8(*(uint8x8_t *)v8.i8), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(v25.val[0], v25.val[1])));
    *(int16x4_t *)a7.i8 = vadd_s16((int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(*(int8x8_t *)a7.i8, v12)), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(v25.val[2], v25.val[3])));
    *(uint8x8_t *)a7.i8 = vqrshrn_n_u16(a7, 2uLL);
    v14 = (int16x8_t)vaddl_u8(v13, (uint8x8_t)vtrn1_s8(v25.val[2], v25.val[3]));
    *(int16x8_t *)v25.val[0].i8 = vtrn2q_s16(v14, v14);
    *(int16x4_t *)v14.i8 = vmovn_s32((int32x4_t)vtrn1q_s16(v14, v14));
    v25.val[0] = (int8x8_t)vmovn_s32(*(int32x4_t *)v25.val[0].i8);
    __asm { PRFM            #0, [X0,#0x1C0] }
    v7 = vaddq_s16(v7, v14);
    v8 = vaddq_s16(v8, *(int16x8_t *)v25.val[0].i8);
    __asm { PRFM            #0, [X1,#0x1C0] }
    result = vqrdmulhq_s16(v7, libyuv::kMult38_Div6);
    v22 = vqrdmulhq_s16(v8, libyuv::kMult38_Div6);
    v23 = vqtbl3q_s8(*(int8x16x3_t *)(&a7 - 2), libyuv::kShuf38_2);
    *a3 = v23.i64[0];
    v24 = a3 + 1;
    *v24 = v23.i32[2];
    a3 = v24 + 1;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

uint8x16_t *ScaleAddRow_NEON(uint8x16_t *result, uint16x8_t *a2, int a3)
{
  uint8x16_t v3;
  uint16x8_t v4;

  do
  {
    v3 = *result++;
    v4 = vaddw_high_u8(a2[1], v3);
    __asm { PRFM            #0, [X0,#0x1C0] }
    *a2 = vaddw_u8(*a2, *(uint8x8_t *)v3.i8);
    a2[1] = v4;
    a2 += 2;
    _VF = __OFSUB__(a3, 16);
    a3 -= 16;
  }
  while (!((a3 < 0) ^ _VF | (a3 == 0)));
  return result;
}

int8x8_t *ScaleFilterCols_NEON(int8x8_t *result, uint64_t a2, int a3, signed int a4, signed int a5)
{
  unint64_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int32x4_t v10;
  __int8 *v11;
  unint64_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  __int8 *v15;
  unint64_t v16;
  __int8 *v17;
  unint64_t v18;
  __int8 *v19;
  unint64_t v20;
  __int8 *v21;
  unint64_t v22;
  __int8 *v23;
  unint64_t v24;
  __int8 *v25;
  unint64_t v26;
  __int8 *v27;
  uint16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  BOOL v31;

  v5 = a4;
  v6 = vdupq_n_s32(a5);
  v7 = vshlq_n_s32(v6, 2uLL);
  v8 = (int16x8_t)vaddq_s32(vmulq_s32(v6, (int32x4_t)__const_ScaleFilterCols_NEON_dx_offset), vdupq_n_s32(a4));
  v9 = (int16x8_t)vaddq_s32((int32x4_t)v8, v7);
  v10 = vshlq_n_s32(v7, 1uLL);
  do
  {
    v11 = (__int8 *)(a2 + (v5 >> 16));
    v12 = v5 + a5;
    v13.i8[0] = *v11;
    v14.i8[0] = v11[1];
    v15 = (__int8 *)(a2 + (v12 >> 16));
    v16 = v12 + a5;
    v13.i8[1] = *v15;
    v14.i8[1] = v15[1];
    v17 = (__int8 *)(a2 + (v16 >> 16));
    v18 = v16 + a5;
    v13.i8[2] = *v17;
    v14.i8[2] = v17[1];
    v19 = (__int8 *)(a2 + (v18 >> 16));
    v20 = v18 + a5;
    v13.i8[3] = *v19;
    v14.i8[3] = v19[1];
    v21 = (__int8 *)(a2 + (v20 >> 16));
    v22 = v20 + a5;
    v13.i8[4] = *v21;
    v14.i8[4] = v21[1];
    v23 = (__int8 *)(a2 + (v22 >> 16));
    v24 = v22 + a5;
    v13.i8[5] = *v23;
    v14.i8[5] = v23[1];
    v25 = (__int8 *)(a2 + (v24 >> 16));
    v26 = v24 + a5;
    v13.i8[6] = *v25;
    v14.i8[6] = v25[1];
    v27 = (__int8 *)(a2 + (v26 >> 16));
    v5 = v26 + a5;
    v13.i8[7] = *v27;
    v14.i8[7] = v27[1];
    v28 = (uint16x8_t)vuzp1q_s16(v8, v9);
    v29 = (int16x8_t)vmovl_u8(v13);
    v30 = (int16x8_t)vmovl_u8(v14);
    *result++ = vmovn_s16(vaddq_s16(v29, vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v29.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v28.i8)), 0x10uLL), vmulq_s32(vsubl_high_s16(v30, v29), (int32x4_t)vmovl_high_u16(v28)), 0x10uLL)));
    v8 = (int16x8_t)vaddq_s32((int32x4_t)v8, v10);
    v9 = (int16x8_t)vaddq_s32((int32x4_t)v9, v10);
    v31 = __OFSUB__(a3, 8);
    a3 -= 8;
  }
  while (!((a3 < 0) ^ v31 | (a3 == 0)));
  return result;
}

const float *ScaleARGBRowDown2_NEON(const float *result, uint64_t a2, float *a3, int a4)
{
  float32x4x4_t v9;

  do
  {
    v9 = vld4q_f32(result);
    result += 16;
    a4 -= 8;
    v9.val[2] = v9.val[3];
    __asm { PRFM            #0, [X0,#0x1C0] }
    vst2q_f32(a3, *(float32x4x2_t *)v9.val[1].f32);
    a3 += 8;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

const float *ScaleARGBRowDown2Linear_NEON(const float *result, uint64_t a2, float *a3, int a4)
{
  float32x4x4_t v9;

  do
  {
    v9 = vld4q_f32(result);
    result += 16;
    a4 -= 8;
    v9.val[0] = (float32x4_t)vrhaddq_u8((uint8x16_t)v9.val[0], (uint8x16_t)v9.val[1]);
    __asm { PRFM            #0, [X0,#0x1C0] }
    v9.val[1] = (float32x4_t)vrhaddq_u8((uint8x16_t)v9.val[2], (uint8x16_t)v9.val[3]);
    vst2q_f32(a3, *(float32x4x2_t *)v9.val[0].f32);
    a3 += 8;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

const char *ScaleARGBRowDown2Box_NEON(const char *result, uint64_t a2, char *a3, int a4)
{
  int8x16x4_t v11;
  int8x16x4_t v12;

  _X1 = &result[a2];
  do
  {
    v11 = vld4q_s8(result);
    result += 64;
    a4 -= 8;
    v12 = vld4q_s8(_X1);
    _X1 += 64;
    __asm
    {
      PRFM            #0, [X0,#0x1C0]
      PRFM            #0, [X1,#0x1C0]
    }
    *(int8x8_t *)v11.val[0].i8 = vrshrn_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v11.val[0]), (uint8x16_t)v12.val[0]), 2uLL);
    *(int8x8_t *)v11.val[1].i8 = vrshrn_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v11.val[1]), (uint8x16_t)v12.val[1]), 2uLL);
    *(int8x8_t *)v11.val[2].i8 = vrshrn_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v11.val[2]), (uint8x16_t)v12.val[2]), 2uLL);
    *(int8x8_t *)v11.val[3].i8 = vrshrn_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v11.val[3]), (uint8x16_t)v12.val[3]), 2uLL);
    vst4_s8(a3, *(int8x8x4_t *)v11.val[0].i8);
    a3 += 32;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

_DWORD *ScaleARGBRowDownEven_NEON(_DWORD *result, uint64_t a2, int a3, _OWORD *a4, int a5)
{
  uint64_t v5;
  _DWORD *v6;
  __int128 v7;
  _DWORD *v8;
  _DWORD *v9;

  v5 = a3;
  do
  {
    LODWORD(v7) = *result;
    v6 = &result[v5];
    DWORD1(v7) = *v6;
    v8 = &v6[v5];
    DWORD2(v7) = *v8;
    v9 = &v8[v5];
    HIDWORD(v7) = *v9;
    result = &v9[v5];
    a5 -= 4;
    __asm { PRFM            #0, [X0,#0x1C0] }
    *a4++ = v7;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int8x16_t ScaleARGBRowDownEvenBox_NEON(uint8x8_t *_X0, uint64_t a2, int a3, int8x16_t *a4, int a5)
{
  uint64_t v5;
  uint8x8_t *v7;
  uint8x8_t v8;
  uint8x8_t *v9;
  uint8x8_t v10;
  uint8x8_t *v11;
  uint8x8_t v12;
  uint8x8_t *v13;
  uint8x8_t v14;
  uint8x8_t *v15;
  uint8x8_t v16;
  uint8x8_t *v17;
  uint8x8_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  uint64_t v30;
  uint64_t v31;
  int8x16_t result;

  v5 = 4 * a3;
  _X1 = (uint8x8_t *)((char *)_X0 + a2);
  do
  {
    v8 = *_X0;
    v7 = (uint8x8_t *)((char *)_X0 + v5);
    v10 = *_X1;
    v9 = (uint8x8_t *)((char *)_X1 + v5);
    v12 = *v7;
    v11 = (uint8x8_t *)((char *)v7 + v5);
    v14 = *v9;
    v13 = (uint8x8_t *)((char *)v9 + v5);
    v16 = *v11;
    v15 = (uint8x8_t *)((char *)v11 + v5);
    v18 = *v13;
    v17 = (uint8x8_t *)((char *)v13 + v5);
    v19 = *v15;
    _X0 = (uint8x8_t *)((char *)v15 + v5);
    v20 = *v17;
    _X1 = (uint8x8_t *)((char *)v17 + v5);
    v21 = (int16x8_t)vaddl_u8(v8, v10);
    v22 = (int16x8_t)vaddl_u8(v12, v14);
    v23 = (int16x8_t)vaddl_u8(v16, v18);
    v24 = (int16x8_t)vaddl_u8(v19, v20);
    __asm { PRFM            #0, [X0,#0x1C0] }
    v30 = v21.i64[1];
    v21.i64[1] = v22.i64[0];
    v22.i64[0] = v30;
    v31 = v23.i64[1];
    v23.i64[1] = v24.i64[0];
    v24.i64[0] = v31;
    __asm { PRFM            #0, [X1,#0x1C0] }
    result = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(v21, v22), 2uLL), vaddq_s16(v23, v24), 2uLL);
    _VF = __OFSUB__(a5, 4);
    a5 -= 4;
    *a4++ = result;
  }
  while (!((a5 < 0) ^ _VF | (a5 == 0)));
  return result;
}

_OWORD *ScaleARGBCols_NEON(_OWORD *result, uint64_t _X1, int a3, int a4, int a5)
{
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  __int128 v8;
  _DWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  __int128 v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;

  v5 = a4;
  do
  {
    v6 = (_DWORD *)(_X1 + 4 * (v5 >> 16));
    v7 = v5 + a5;
    LODWORD(v8) = *v6;
    v9 = (_DWORD *)(_X1 + 4 * (v7 >> 16));
    v10 = v7 + a5;
    DWORD1(v8) = *v9;
    v11 = (_DWORD *)(_X1 + 4 * (v10 >> 16));
    v12 = v10 + a5;
    DWORD2(v8) = *v11;
    v13 = (_DWORD *)(_X1 + 4 * (v12 >> 16));
    v14 = v12 + a5;
    HIDWORD(v8) = *v13;
    v15 = (_DWORD *)(_X1 + 4 * (v14 >> 16));
    v16 = v14 + a5;
    LODWORD(v17) = *v15;
    v18 = (_DWORD *)(_X1 + 4 * (v16 >> 16));
    v19 = v16 + a5;
    DWORD1(v17) = *v18;
    v20 = (_DWORD *)(_X1 + 4 * (v19 >> 16));
    v21 = v19 + a5;
    DWORD2(v17) = *v20;
    v22 = (_DWORD *)(_X1 + 4 * (v21 >> 16));
    v5 = v21 + a5;
    HIDWORD(v17) = *v22;
    __asm { PRFM            #0, [X1,#0x1C0] }
    *result = v8;
    result[1] = v17;
    result += 2;
    _VF = __OFSUB__(a3, 8);
    a3 -= 8;
  }
  while (!((a3 < 0) ^ _VF | (a3 == 0)));
  return result;
}

int8x16_t *ScaleARGBFilterCols_NEON(int8x16_t *result, uint64_t _X1, int a3, signed int a4, signed int a5)
{
  unint64_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int32x4_t v9;
  __int32 *v10;
  unint64_t v11;
  uint8x16_t v12;
  uint8x16_t v13;
  __int32 *v14;
  unint64_t v15;
  __int32 *v16;
  unint64_t v17;
  __int32 *v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x16_t v22;
  uint8x16_t v23;

  v5 = a4;
  v6 = vdupq_n_s32(a5);
  v7 = vshlq_n_s32(v6, 2uLL);
  v8.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
  v8.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
  v9 = vaddq_s32(vmulq_s32(v6, (int32x4_t)__const_ScaleARGBFilterCols_NEON_dx_offset), vdupq_n_s32(a4));
  do
  {
    v10 = (__int32 *)(_X1 + 4 * (v5 >> 16));
    v11 = v5 + a5;
    v12.i32[0] = *v10;
    v13.i32[0] = v10[1];
    v14 = (__int32 *)(_X1 + 4 * (v11 >> 16));
    v15 = v11 + a5;
    v12.i32[1] = *v14;
    v13.i32[1] = v14[1];
    v16 = (__int32 *)(_X1 + 4 * (v15 >> 16));
    v17 = v15 + a5;
    v12.i32[2] = *v16;
    v13.i32[2] = v16[1];
    v18 = (__int32 *)(_X1 + 4 * (v17 >> 16));
    v5 = v17 + a5;
    v12.i32[3] = *v18;
    v13.i32[3] = v18[1];
    v19 = vand_s8((int8x8_t)vshrn_n_s32(v9, 9uLL), (int8x8_t)0x7F007F007F007FLL);
    v20 = vdup_lane_s8(v19, 4);
    v21 = vdup_lane_s8(v19, 6);
    *(int8x8_t *)v22.i8 = vext_s8(vdup_lane_s8(v19, 0), vdup_lane_s8(v19, 2), 4uLL);
    v22.u64[1] = (unint64_t)vext_s8(v20, v21, 4uLL);
    v23 = (uint8x16_t)veorq_s8(v22, v8);
    __asm { PRFM            #0, [X1,#0x1C0] }
    *result++ = vshrn_high_n_s16(vshrn_n_s16(vaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v12.i8, *(uint8x8_t *)v23.i8), (int16x8_t)vmull_u8(*(uint8x8_t *)v13.i8, *(uint8x8_t *)v22.i8)), 7uLL), vaddq_s16((int16x8_t)vmull_high_u8(v12, v23), (int16x8_t)vmull_high_u8(v13, (uint8x16_t)v22)), 7uLL);
    v9 = vaddq_s32(v9, v7);
    _VF = __OFSUB__(a3, 4);
    a3 -= 4;
  }
  while (!((a3 < 0) ^ _VF | (a3 == 0)));
  return result;
}

webrtc::ScreenshareLayers *webrtc::ScreenshareLayers::ScreenshareLayers(webrtc::ScreenshareLayers *this, int a2)
{
  int v4;
  __int128 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v14;

  *(_QWORD *)this = &off_24C0BFC08;
  if (a2 >= 2)
    v4 = 2;
  else
    v4 = a2;
  *((_DWORD *)this + 2) = v4;
  *((_BYTE *)this + 12) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_BYTE *)this + 24) = 0;
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *(_OWORD *)((char *)this + 28) = v5;
  *(_OWORD *)((char *)this + 44) = v5;
  *((_DWORD *)this + 15) = -1;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 76) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 116) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 124) = 0;
  *(_OWORD *)((char *)this + 228) = xmmword_208F171A0;
  *((_QWORD *)this + 22) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 23) = -1;
  *((_BYTE *)this + 192) = 0;
  *(_QWORD *)((char *)this + 196) = 0x447A000000000000;
  *((int64x2_t *)this + 13) = vdupq_n_s64(0x3E8uLL);
  *((_BYTE *)this + 224) = 0;
  *(_OWORD *)((char *)this + 244) = xmmword_208F08CC0;
  *(_QWORD *)((char *)this + 260) = 0;
  *((_QWORD *)this + 34) = -1;
  *((_BYTE *)this + 456) = 0;
  *((_BYTE *)this + 460) = 0;
  *((_BYTE *)this + 464) = 0;
  *((_BYTE *)this + 468) = 0;
  *((_BYTE *)this + 472) = 0;
  *((_BYTE *)this + 476) = 0;
  *((_BYTE *)this + 480) = 0;
  *((_BYTE *)this + 484) = 0;
  v6 = (uint64_t *)((char *)this + 488);
  *((_BYTE *)this + 344) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  v7 = operator new();
  *(_QWORD *)v7 = &unk_24C0C2488;
  *(_WORD *)(v7 + 8) = 1;
  *(_DWORD *)(v7 + 12) = 0;
  *(_WORD *)(v7 + 16) = 1;
  *(_DWORD *)(v7 + 20) = 0;
  *(_WORD *)(v7 + 24) = 1;
  *(_DWORD *)(v7 + 28) = 0;
  *(_DWORD *)(v7 + 32) = a2;
  *(_QWORD *)(v7 + 40) = 0;
  *(_DWORD *)(v7 + 36) = 0;
  *v6 = v7;
  v12 = *((unsigned int *)this + 2);
  if ((int)v12 <= 0)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/screenshare_layers.cc", 65, "number_of_temporal_layers_ > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v8, v9, v10, v11, *((unsigned int *)this + 2));
  }
  else if (v12 < 3)
  {
    return this;
  }
  v14 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/screenshare_layers.cc", 66, "number_of_temporal_layers_ <= kMaxNumTemporalLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v8, v9, v10, v11, v12);
  return (webrtc::ScreenshareLayers *)webrtc::ScreenshareLayers::UpdateHistograms((webrtc::ScreenshareLayers *)v14);
}

uint64_t webrtc::ScreenshareLayers::UpdateHistograms(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v20;

  if (*(_QWORD *)(this + 272) == -1)
    return this;
  v1 = (_QWORD *)this;
  if (rtc::g_clock)
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    this = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
  }
  v2 = this / 1000000 - v1[34];
  if (v2 < 9500)
    return this;
  v3 = (unsigned __int128)((v2 + 500) * (__int128)0x20C49BA5E353F7CFLL) >> 64;
  v4 = (v3 >> 7) + ((unint64_t)v3 >> 63);
  v5 = atomic_load(&_MergedGlobals_18);
  if (v5)
  {
    webrtc::metrics::HistogramAdd(v5, (uint64_t)(v1[35] + ((unint64_t)v4 >> 1)) / v4);
  }
  else
  {
    while (!__ldaxr(&_MergedGlobals_18))
    {
      if (!__stlxr(0, &_MergedGlobals_18))
        goto LABEL_13;
    }
    __clrex();
  }
LABEL_13:
  v7 = atomic_load(&qword_253EA57C0);
  if (v7)
  {
    webrtc::metrics::HistogramAdd(v7, (uint64_t)(v1[36] + ((unint64_t)v4 >> 1)) / v4);
  }
  else
  {
    while (!__ldaxr(&qword_253EA57C0))
    {
      if (!__stlxr(0, &qword_253EA57C0))
        goto LABEL_18;
    }
    __clrex();
  }
LABEL_18:
  v9 = v1[36] + v1[35];
  v10 = atomic_load(&qword_253EA57C8);
  if (v10)
  {
    v11 = v1[37];
    if (v11)
      v12 = (int)v9 / v11;
    else
      LODWORD(v12) = 0;
    webrtc::metrics::HistogramAdd(v10, v12);
    this = atomic_load(&qword_253EA57D0);
    if (!this)
    {
LABEL_31:
      while (!__ldaxr(&qword_253EA57D0))
      {
        if (!__stlxr(0, &qword_253EA57D0))
          goto LABEL_35;
      }
      __clrex();
      goto LABEL_35;
    }
  }
  else
  {
    while (!__ldaxr(&qword_253EA57C8))
    {
      if (!__stlxr(0, &qword_253EA57C8))
        goto LABEL_24;
    }
    __clrex();
LABEL_24:
    this = atomic_load(&qword_253EA57D0);
    if (!this)
      goto LABEL_31;
  }
  v14 = v1[38];
  if (v14)
    v15 = (int)v9 / v14;
  else
    LODWORD(v15) = 0;
  this = webrtc::metrics::HistogramAdd(this, v15);
LABEL_35:
  if ((uint64_t)v1[35] >= 1)
  {
    v17 = atomic_load(&qword_253EA57D8);
    if (v17)
    {
      webrtc::metrics::HistogramAdd(v17, v1[39] / (uint64_t)v1[35]);
    }
    else
    {
      while (!__ldaxr(&qword_253EA57D8))
      {
        if (!__stlxr(0, &qword_253EA57D8))
          goto LABEL_41;
      }
      __clrex();
    }
LABEL_41:
    this = atomic_load(&qword_253EA57E0);
    if (this)
    {
      this = webrtc::metrics::HistogramAdd(this, v1[41] / (uint64_t)v1[35]);
    }
    else
    {
      while (!__ldaxr(&qword_253EA57E0))
      {
        if (!__stlxr(0, &qword_253EA57E0))
          goto LABEL_46;
      }
      __clrex();
    }
  }
LABEL_46:
  if ((uint64_t)v1[36] >= 1)
  {
    v20 = atomic_load(&qword_253EA57E8);
    if (v20)
    {
      webrtc::metrics::HistogramAdd(v20, v1[40] / (uint64_t)v1[36]);
    }
    else
    {
      while (!__ldaxr(&qword_253EA57E8))
      {
        if (!__stlxr(0, &qword_253EA57E8))
          goto LABEL_52;
      }
      __clrex();
    }
LABEL_52:
    this = atomic_load(&qword_253EA57F0);
    if (this)
    {
      return webrtc::metrics::HistogramAdd(this, v1[42] / (uint64_t)v1[36]);
    }
    else
    {
      while (!__ldaxr(&qword_253EA57F0))
      {
        if (!__stlxr(0, &qword_253EA57F0))
          return this;
      }
      __clrex();
    }
  }
  return this;
}

void webrtc::ScreenshareLayers::~ScreenshareLayers(webrtc::ScreenshareLayers *this)
{
  uint64_t v2;

  webrtc::ScreenshareLayers::UpdateHistograms((uint64_t)this);
  v2 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 16);
  std::__tree<std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>>>::destroy(*((_QWORD **)this + 12));
}

{
  uint64_t v2;

  webrtc::ScreenshareLayers::UpdateHistograms((uint64_t)this);
  v2 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 16);
  std::__tree<std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>>>::destroy(*((_QWORD **)this + 12));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::ScreenshareLayers::SetQpLimits(uint64_t this, unint64_t a2, int a3, int a4)
{
  if (!*(_BYTE *)(this + 16))
  {
    *(_DWORD *)(this + 12) = a3;
    *(_BYTE *)(this + 16) = 1;
    *(_DWORD *)(this + 20) = a4;
    *(_BYTE *)(this + 24) = 1;
  }
  return this;
}

uint64_t webrtc::ScreenshareLayers::StreamCount(webrtc::ScreenshareLayers *this)
{
  return 1;
}

uint64_t webrtc::ScreenshareLayers::SupportsEncoderFrameDropping(webrtc::ScreenshareLayers *this)
{
  return 0;
}

void webrtc::ScreenshareLayers::NextFrameConfig(webrtc::ScreenshareLayers *this@<X0>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  char *v6;
  uint64_t **v7;
  uint64_t **v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  char **v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  int64_t v32;
  char v33;
  int64_t v34;
  BOOL v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  _BYTE *v58;
  __int128 v59;
  __int128 v60;
  __int16 v61;
  char v62;
  _BYTE v63[40];
  uint64_t v64;
  _BYTE v65[29];
  uint64_t v66;
  _BYTE __p[40];
  _BYTE v68[32];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t **)((char *)this + 96);
  v6 = (char *)*((_QWORD *)this + 12);
  if (v6)
  {
    v8 = (uint64_t **)((char *)this + 96);
    v9 = (char *)*((_QWORD *)this + 12);
    do
    {
      v10 = *((_DWORD *)v9 + 8);
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = (char **)v9;
      else
        v12 = (char **)(v9 + 8);
      if (v11)
        v8 = (uint64_t **)v9;
      v9 = *v12;
    }
    while (*v12);
    if (v8 != v7 && *((_DWORD *)v8 + 8) <= a2)
    {
      v23 = *(_OWORD *)(v8 + 13);
      *(_OWORD *)a3 = *(_OWORD *)(v8 + 11);
      *(_OWORD *)(a3 + 16) = v23;
      return;
    }
  }
  if (*((int *)this + 2) > 1)
  {
    if (rtc::g_clock)
    {
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v22 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    v24 = v22 / 1000000;
    if (*((_BYTE *)this + 76))
    {
      v25 = *((_DWORD *)this + 18);
      v11 = a2 >= v25;
      v26 = a2 - v25;
      v27 = (_DWORD)v26 != 0 && v11;
      if ((_DWORD)v26 != 0x80000000)
        v27 = (int)v26 >= 0;
      if (!v27)
        v26 |= 0xFFFFFFFF00000000;
      v28 = v26 + *((_QWORD *)this + 8);
    }
    else
    {
      v28 = a2;
    }
    *((_QWORD *)this + 8) = v28;
    *((_DWORD *)this + 18) = a2;
    *((_BYTE *)this + 76) = 1;
    v29 = *((_QWORD *)this + 4);
    if (v29 == -1)
    {
      if (!*((_BYTE *)this + 116))
        goto LABEL_121;
      v31 = 120;
      if (!*((_BYTE *)this + 124))
        v31 = 112;
      v30 = 0x15F90u / *(_DWORD *)((char *)this + v31);
    }
    else
    {
      v30 = v28 - v29;
      if (!*((_BYTE *)this + 116))
        goto LABEL_66;
    }
    v32 = webrtc::RateStatistics::Rate((webrtc::ScreenshareLayers *)((char *)this + 128), v24);
    if (*((_BYTE *)this + 116))
    {
      v34 = *((unsigned int *)this + 28);
      if (v33)
        v35 = v32 <= v34;
      else
        v35 = 1;
      if (!v35)
        goto LABEL_65;
      if (*((_QWORD *)this + 4) == -1 || v30 < 1)
      {
        v36 = *((_QWORD *)this + 7);
        if (v36 == -1
          || v24 - v36 >= (uint64_t)((42949673 * (unint64_t)(85 * (0x3E8 / v34))) >> 32))
        {
LABEL_66:
          if (*((_QWORD *)this + 34) == -1)
            *((_QWORD *)this + 34) = v24;
          v37 = *((_DWORD *)this + 60);
          v38 = v30 / 90 * *((unsigned int *)this + 61);
          v39 = (v38 + (v38 < 0 ? 7uLL : 0)) >> 3;
          v11 = v37 >= v39;
          v40 = v37 - v39;
          if (!v11)
            v40 = 0;
          *((_DWORD *)this + 60) = v40;
          v41 = v30 / 90 * *((unsigned int *)this + 66);
          v42 = (v41 + (v41 < 0 ? 7uLL : 0)) >> 3;
          v43 = *((_DWORD *)this + 65);
          v11 = v43 >= v42;
          v44 = v43 - v42;
          if (!v11)
            v44 = 0;
          *((_DWORD *)this + 65) = v44;
          *((_QWORD *)this + 4) = a2;
          *((_QWORD *)this + 7) = v24;
          v45 = *((_DWORD *)this + 7);
          if (v45 == -1 || *((_DWORD *)this + 5 * v45 + 57) != 1)
          {
            v46 = *((_QWORD *)this + 6);
            v47 = *((_DWORD *)this + 20);
            if (v46 != -1 && v28 - v46 >= 247590)
            {
              v40 = v47 - 1;
              *((_DWORD *)this + 60) = v47 - 1;
            }
            if (v40 > v47)
            {
              if (v44 > v47)
              {
                *((_DWORD *)this + 7) = -1;
                ++*((_QWORD *)this + 37);
                goto LABEL_83;
              }
              *((_DWORD *)this + 7) = 1;
LABEL_89:
              v51 = *((_DWORD *)this + 62);
              if (v51 == 1)
              {
                if (*((_QWORD *)this + 5) != v28)
                  goto LABEL_91;
LABEL_103:
                v48 = 4;
                v66 = 4;
                *(_QWORD *)__p = 0x200000000;
                *(_OWORD *)&__p[8] = *(_OWORD *)v63;
                *(_OWORD *)&__p[24] = *(_OWORD *)&v63[16];
                v68[0] = 0;
                *(_WORD *)&v68[1] = v61;
                v68[3] = v62;
                *(_OWORD *)&v68[4] = xmmword_208F08A70;
                *(_QWORD *)&v68[20] = 0x100000001;
                v68[28] = 1;
                v49 = *v7;
                v50 = (char *)v7;
                if (*v7)
                  goto LABEL_106;
                goto LABEL_110;
              }
              v52 = *((_DWORD *)this + 64);
              if (v52 != -1)
              {
                v53 = v28 - *((_QWORD *)this + 5);
                if (v53 <= 360000)
                {
                  if (v53 >= 180000)
                  {
                    if (v51 == 4 || *((_DWORD *)this + 59) - v52 < 8)
                      goto LABEL_102;
                  }
                  else if (v51 == 4)
                  {
                    goto LABEL_102;
                  }
LABEL_91:
                  v66 = 0;
                  v68[0] = 1;
                  *(_QWORD *)&v68[12] = 0;
                  *(_QWORD *)&v68[4] = 0;
                  *(_DWORD *)&v68[24] = 0;
                  webrtc::webrtc_impl::StringToDecodeTargetIndications("-R", 2uLL, (unint64_t *)v63);
                  v65[0] = 0;
                  *(_OWORD *)&v65[4] = xmmword_208F08AA0;
                  *(_QWORD *)&v65[20] = 255;
                  v65[28] = 1;
                  if ((v66 & 1) != 0)
                    operator delete(*(void **)__p);
                  v48 = *(_QWORD *)v63;
                  v66 = *(_QWORD *)v63;
                  *(_OWORD *)__p = *(_OWORD *)&v63[8];
                  *(_OWORD *)&__p[16] = *(_OWORD *)&v63[24];
                  *(_QWORD *)&__p[32] = v64;
                  *(_OWORD *)&v68[13] = *(_OWORD *)&v65[13];
                  *(_OWORD *)v68 = *(_OWORD *)v65;
                  *(_DWORD *)&v68[20] = 1;
                  v49 = *v7;
                  v50 = (char *)v7;
                  if (*v7)
                  {
                    while (1)
                    {
LABEL_106:
                      while (1)
                      {
                        v50 = (char *)v49;
                        v54 = *((_DWORD *)v49 + 8);
                        if (v54 <= a2)
                          break;
                        v49 = *(uint64_t **)v50;
                        v7 = (uint64_t **)v50;
                        if (!*(_QWORD *)v50)
                          goto LABEL_110;
                      }
                      if (v54 >= a2)
                        break;
                      v49 = (uint64_t *)*((_QWORD *)v50 + 1);
                      if (!v49)
                      {
                        v7 = (uint64_t **)(v50 + 8);
                        goto LABEL_110;
                      }
                    }
LABEL_113:
                    if (v50 + 40 != (char *)&v66)
                    {
                      if ((v48 & 1) != 0)
                        v58 = *(_BYTE **)__p;
                      else
                        v58 = __p;
                      absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)v50 + 5, (uint64_t)v58, v48 >> 1);
                      LOBYTE(v48) = v66;
                    }
                    v59 = *(_OWORD *)v68;
                    *(_OWORD *)(v50 + 88) = *(_OWORD *)v68;
                    *(_OWORD *)(v50 + 101) = *(_OWORD *)&v68[13];
                    v60 = *(_OWORD *)&v68[16];
                    *(_OWORD *)a3 = v59;
                    *(_OWORD *)(a3 + 16) = v60;
                    if ((v48 & 1) == 0)
                      return;
LABEL_119:
                    operator delete(*(void **)__p);
                    return;
                  }
LABEL_110:
                  v55 = v50;
                  v50 = (char *)operator new(0x78uLL);
                  *((_DWORD *)v50 + 8) = a2;
                  *(_OWORD *)(v50 + 88) = 0u;
                  *(_OWORD *)(v50 + 104) = 0u;
                  *(_OWORD *)(v50 + 40) = 0u;
                  *(_OWORD *)(v50 + 56) = 0u;
                  *(_OWORD *)(v50 + 72) = 0u;
                  v50[88] = 1;
                  *(_QWORD *)(v50 + 92) = 0;
                  *(_QWORD *)(v50 + 100) = 0;
                  *((_DWORD *)v50 + 27) = 255;
                  v50[116] = 1;
                  *(_QWORD *)v50 = 0;
                  *((_QWORD *)v50 + 1) = 0;
                  *((_QWORD *)v50 + 2) = v55;
                  *v7 = (uint64_t *)v50;
                  v56 = (uint64_t *)v50;
                  v57 = **((_QWORD **)this + 11);
                  if (v57)
                  {
                    *((_QWORD *)this + 11) = v57;
                    v56 = *v7;
                  }
                  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 12), v56);
                  ++*((_QWORD *)this + 13);
                  v48 = v66;
                  goto LABEL_113;
                }
              }
LABEL_102:
              *((_QWORD *)this + 5) = v28;
              goto LABEL_103;
            }
            *((_DWORD *)this + 7) = 0;
          }
          else if (v45)
          {
            if (v45 != 1)
            {
LABEL_83:
              v48 = 0;
              v66 = 0;
              v68[0] = 1;
              *(_QWORD *)&v68[12] = 0;
              *(_QWORD *)&v68[4] = 0;
              *(_QWORD *)&v68[20] = 255;
              v68[28] = 1;
              v49 = *v7;
              v50 = (char *)v7;
              if (*v7)
                goto LABEL_106;
              goto LABEL_110;
            }
            goto LABEL_89;
          }
          *((_QWORD *)this + 6) = v28;
          v48 = 4;
          v66 = 4;
          *(_QWORD *)__p = 0x200000002;
          *(_OWORD *)&__p[8] = *(_OWORD *)v63;
          *(_OWORD *)&__p[24] = *(_OWORD *)&v63[16];
          v68[0] = 0;
          *(_WORD *)&v68[1] = v61;
          v68[3] = v62;
          *(_OWORD *)&v68[4] = xmmword_208F08A30;
          *(_QWORD *)&v68[20] = 0;
          v68[28] = 1;
          v49 = *v7;
          v50 = (char *)v7;
          if (*v7)
            goto LABEL_106;
          goto LABEL_110;
        }
      }
      else if (v30 >= (42949673 * (unint64_t)(85 * (0x15F90 / v34))) >> 32)
      {
        goto LABEL_66;
      }
LABEL_65:
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 12) = 0;
      *(_QWORD *)(a3 + 4) = 0;
      *(_QWORD *)(a3 + 20) = 255;
      *(_BYTE *)(a3 + 28) = 1;
      return;
    }
LABEL_121:
    __break(1u);
  }
  *(_DWORD *)__p = 2;
  v66 = 2;
  v68[0] = 0;
  *(_OWORD *)&v68[4] = xmmword_208F1B060;
  *(_QWORD *)&v68[20] = 255;
  v68[28] = 1;
  v13 = (char *)this + 96;
  if (v6)
  {
    v14 = 2;
    while (1)
    {
      while (1)
      {
        v13 = v6;
        v15 = *((_DWORD *)v6 + 8);
        if (v15 <= a2)
          break;
        v6 = *(char **)v13;
        v7 = (uint64_t **)v13;
        if (!*(_QWORD *)v13)
          goto LABEL_20;
      }
      if (v15 >= a2)
        break;
      v6 = (char *)*((_QWORD *)v13 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v13 + 8);
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    v16 = v13;
    v13 = (char *)operator new(0x78uLL);
    *((_DWORD *)v13 + 8) = a2;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_OWORD *)(v13 + 104) = 0u;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    v13[88] = 1;
    *(_QWORD *)(v13 + 92) = 0;
    *(_QWORD *)(v13 + 100) = 0;
    *((_DWORD *)v13 + 27) = 255;
    v13[116] = 1;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v16;
    *v7 = (uint64_t *)v13;
    v17 = (uint64_t *)v13;
    v18 = **((_QWORD **)this + 11);
    if (v18)
    {
      *((_QWORD *)this + 11) = v18;
      v17 = *v7;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 12), v17);
    ++*((_QWORD *)this + 13);
    v14 = v66;
  }
  if (v13 + 40 != (char *)&v66)
  {
    if ((v14 & 1) != 0)
      v19 = *(_BYTE **)__p;
    else
      v19 = __p;
    absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)v13 + 5, (uint64_t)v19, v14 >> 1);
    LOBYTE(v14) = v66;
  }
  v20 = *(_OWORD *)v68;
  *(_OWORD *)(v13 + 88) = *(_OWORD *)v68;
  *(_OWORD *)(v13 + 101) = *(_OWORD *)&v68[13];
  v21 = *(_OWORD *)&v68[16];
  *(_OWORD *)a3 = v20;
  *(_OWORD *)(a3 + 16) = v21;
  if ((v14 & 1) != 0)
    goto LABEL_119;
}

uint64_t webrtc::ScreenshareLayers::OnRatesUpdated(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  v5 = *(_DWORD **)a3;
  v4 = *(_QWORD *)(a3 + 8);
  v6 = v4 - *(_QWORD *)a3;
  if (v4 == *(_QWORD *)a3)
  {
    __break(1u);
  }
  else
  {
    v7 = *v5 / 0x3E8u;
    v8 = v7;
    if (v6 >= 5)
      v8 = v5[1] / 0x3E8u + v7;
    if (*(_BYTE *)(result + 116))
    {
      v9 = *(unsigned __int8 *)(result + 124);
      if (*(_BYTE *)(result + 124) && *(_DWORD *)(result + 120) != a4
        || v7 != *(_DWORD *)(result + 244)
        || v8 != *(_DWORD *)(result + 264))
      {
        *(_BYTE *)(result + 224) = 1;
      }
      if ((a4 & 0x80000000) == 0)
      {
        if (!v9)
          *(_BYTE *)(result + 124) = 1;
        *(_DWORD *)(result + 120) = a4;
        goto LABEL_14;
      }
      if (!v9)
      {
LABEL_14:
        *(_DWORD *)(result + 244) = v7;
        *(_DWORD *)(result + 264) = v8;
        return result;
      }
      *(_BYTE *)(result + 124) = 0;
      *(_DWORD *)(result + 244) = v7;
      *(_DWORD *)(result + 264) = v8;
    }
    else
    {
      *(_BYTE *)(result + 116) = 1;
      *(_DWORD *)(result + 112) = a4;
      *(_DWORD *)(result + 120) = a4;
      *(_BYTE *)(result + 124) = 1;
      *(_BYTE *)(result + 224) = 1;
      *(_DWORD *)(result + 244) = v7;
      *(_DWORD *)(result + 264) = v8;
    }
  }
  return result;
}

void webrtc::ScreenshareLayers::OnEncodeDone(webrtc::ScreenshareLayers *this, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, webrtc::CodecSpecificInfo *a7, uint64_t a8)
{
  char *v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int v17;
  BOOL v18;
  char **v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  BOOL v33;
  uint64_t *v34;
  webrtc::GenericFrameInfo *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  char *v44;
  webrtc::RateStatistics *v45;
  uint64_t v46;
  int v47;
  _OWORD *v48;
  uint64_t v49;
  void **v50;
  char *v51;
  unint64_t *v52;
  unsigned int v53;
  char *v54;
  _DWORD *v55;
  int v56;
  void **v57;
  void *v58;
  char *v59;
  void **v60;
  void **v61;
  void *v62;
  unsigned int v63;
  int v64;
  char v65;
  _BYTE *v66;
  char v67;
  _BYTE *v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  int v77;
  char *v78;
  _DWORD *v79;
  int v80;
  uint64_t v81;
  char *v82;
  std::string *v83;
  int v84;
  int v85;
  char v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *__p;
  void **v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD v98[2];
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  char v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  if (!a4)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/screenshare_layers.cc");
    *((_DWORD *)this + 5 * *((int *)this + 7) + 57) = 1;
    ++*((_QWORD *)this + 38);
    return;
  }
  LODWORD(v10) = a6;
  v11 = a5;
  LODWORD(v12) = a4;
  v13 = a3;
  v14 = (uint64_t)&v97;
  LOBYTE(v97) = 0;
  v102 = 0;
  v15 = (char *)*((_QWORD *)this + 12);
  if (v15)
  {
    v16 = (char *)this + 96;
    do
    {
      v17 = *((_DWORD *)v15 + 8);
      v18 = v17 >= a3;
      if (v17 >= a3)
        v19 = (char **)v15;
      else
        v19 = (char **)(v15 + 8);
      if (v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != (char *)this + 96 && *((_DWORD *)v16 + 8) <= a3)
    {
      v20 = *((_QWORD *)v16 + 5);
      v97 = 0;
      if (v20 >= 2)
      {
        if ((v20 & 1) != 0)
        {
          absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::InitFrom((unint64_t *)&v97, (unint64_t *)v16 + 5);
        }
        else
        {
          v97 = v20;
          v21 = *((_OWORD *)v16 + 4);
          v98[0] = *((_OWORD *)v16 + 3);
          v98[1] = v21;
          v99 = *((_QWORD *)v16 + 10);
        }
      }
      v29 = *(_OWORD *)(v16 + 104);
      v100 = *(_OWORD *)(v16 + 88);
      v101 = v29;
      v102 = 1;
      v30 = (char *)*((_QWORD *)v16 + 1);
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = *(char **)v30;
        }
        while (v30);
      }
      else
      {
        v32 = v16;
        do
        {
          v31 = (char *)*((_QWORD *)v32 + 2);
          v33 = *(_QWORD *)v31 == (_QWORD)v32;
          v32 = v31;
        }
        while (!v33);
      }
      if (*((char **)this + 11) == v16)
        *((_QWORD *)this + 11) = v31;
      v34 = (uint64_t *)*((_QWORD *)this + 12);
      --*((_QWORD *)this + 13);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v34, (uint64_t *)v16);
      if ((v16[40] & 1) != 0)
        operator delete(*((void **)v16 + 6));
      operator delete(v16);
    }
  }
  v35 = (webrtc::CodecSpecificInfo *)((char *)a7 + 1640);
  if (*((_BYTE *)a7 + 1848))
    webrtc::GenericFrameInfo::~GenericFrameInfo(v35);
  *((_QWORD *)a7 + 212) = 0;
  *((_QWORD *)a7 + 215) = 0;
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 1) = 0;
  v36 = (unint64_t *)((char *)a7 + 1744);
  *((_QWORD *)a7 + 218) = 0;
  *((_QWORD *)a7 + 227) = 0;
  *((_QWORD *)a7 + 229) = 0;
  *((_QWORD *)a7 + 228) = 0;
  *((_QWORD *)a7 + 230) = 0xFFFFFFFFLL;
  *((_BYTE *)a7 + 1848) = 1;
  if (*((_DWORD *)this + 2) == 1)
  {
    *(_WORD *)((char *)a7 + 9) = 255;
    *((_DWORD *)a7 + 411) = 0;
    LODWORD(v88) = 2;
    absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)a7 + 206, (uint64_t)&v88, 1uLL);
    LOBYTE(a3) = v11 ^ 1;
    v37 = *((_QWORD *)a7 + 218);
    if ((v37 & 1) != 0)
    {
      v38 = (char *)*((_QWORD *)a7 + 219);
      v39 = *((_QWORD *)a7 + 220);
    }
    else
    {
      v38 = (char *)a7 + 1752;
      v39 = 8;
    }
    if (v37 >> 1 == v39)
      goto LABEL_128;
    if (v38)
    {
      v44 = &v38[8 * (v37 >> 1)];
      *(_DWORD *)v44 = 0;
      v44[4] = a3;
      v44[5] = 1;
      *v36 = v37 + 2;
      v45 = (webrtc::ScreenshareLayers *)((char *)this + 128);
      v46 = rtc::g_clock;
      if (rtc::g_clock)
        goto LABEL_126;
      goto LABEL_129;
    }
LABEL_127:
    __break(1u);
LABEL_128:
    absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int,BOOL,BOOL>((uint64_t)a7 + 1744, 0, a3, 1);
    v45 = (webrtc::ScreenshareLayers *)((char *)this + 128);
    v46 = rtc::g_clock;
    if (!rtc::g_clock)
      goto LABEL_129;
LABEL_126:
    v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
    goto LABEL_132;
  }
  if (!*((_BYTE *)this + 76))
  {
    v43 = v13;
    *((_QWORD *)this + 8) = v13;
    *((_DWORD *)this + 18) = v13;
    *((_BYTE *)this + 76) = 1;
    if (!v102)
      goto LABEL_57;
    goto LABEL_52;
  }
  v40 = *((_DWORD *)this + 18);
  v18 = v13 >= v40;
  v41 = v13 - v40;
  v42 = (_DWORD)v41 != 0 && v18;
  if ((_DWORD)v41 != 0x80000000)
    v42 = (int)v41 >= 0;
  if (!v42)
    v41 |= 0xFFFFFFFF00000000;
  v43 = v41 + *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v43;
  *((_DWORD *)this + 18) = v13;
  *((_BYTE *)this + 76) = 1;
  if (v102)
  {
LABEL_52:
    v47 = BYTE4(v101);
    *((_BYTE *)a7 + 9) = BYTE4(v101);
    *((_BYTE *)a7 + 10) = BYTE8(v101);
    *((_DWORD *)a7 + 411) = v47;
    if ((uint64_t *)((char *)a7 + 1648) != &v97)
    {
      if ((v97 & 1) != 0)
        v48 = *(_OWORD **)&v98[0];
      else
        v48 = v98;
      absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)a7 + 206, (uint64_t)v48, v97 >> 1);
    }
  }
LABEL_57:
  v85 = (int)v10;
  v84 = (int)v12;
  if (!v11)
  {
    v53 = *((_DWORD *)this + 7);
    if ((v53 & 0x80000000) == 0)
    {
      v54 = (char *)this + 20 * v53;
      v56 = *((_DWORD *)v54 + 57);
      v55 = v54 + 228;
      if (v56 == 4)
        *v55 = 0;
    }
    goto LABEL_99;
  }
  *(_WORD *)((char *)a7 + 9) = 256;
  *((_QWORD *)this + 5) = v43;
  *((_DWORD *)this + 57) = 4;
  *((_DWORD *)this + 62) = 4;
  *((_DWORD *)this + 7) = 1;
  v49 = *((unsigned int *)this + 2);
  if ((int)v49 >= 3)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/screenshare_layers.cc", 428, "num_layers < 3", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, (uint64_t)a7, a8, *((unsigned int *)this + 2));
    goto LABEL_147;
  }
  if ((int)v49 <= 0)
  {
LABEL_147:
    v83 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/screenshare_layers.cc", 429, "num_layers > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, (uint64_t)a7, a8, v49);
    webrtc::ScreenshareLayers::OnFrameDropped((uint64_t)v83);
    return;
  }
  HIDWORD(v88) = *((_DWORD *)this + 2);
  v89 = 0;
  v90 = 0;
  v92 = 0;
  v95 = 0;
  v96 = 0;
  __p = 0;
  LODWORD(v88) = 0;
  if ((_DWORD)v49 == 2)
  {
    std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)&__p, 3uLL);
    v57 = (void **)__p;
    if (v95 == __p)
      goto LABEL_127;
    *((_DWORD *)__p + 1) = 0;
    if (((_BYTE)v57[1] & 1) != 0)
      operator delete(v57[2]);
    v57[1] = (void *)4;
    v57[2] = (void *)0x200000002;
    v58 = __p;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((char *)v95 - (_BYTE *)__p) >> 3)) <= 1)
      goto LABEL_127;
    *((_DWORD *)__p + 27) = 0;
    if ((*((_BYTE *)v58 + 112) & 1) != 0)
      operator delete(*((void **)v58 + 15));
    *((_QWORD *)v58 + 14) = 4;
    *((_QWORD *)v58 + 15) = 0x200000002;
    v14 = 1;
    v87 = 1;
    absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)v58 + 20, (uint64_t)&v87, 1uLL);
    v59 = (char *)__p;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((char *)v95 - (_BYTE *)__p) >> 3)) <= 2)
      goto LABEL_127;
    *((_DWORD *)__p + 53) = 1;
    if ((v59[216] & 1) != 0)
      operator delete(*((void **)v59 + 28));
    *((_QWORD *)v59 + 27) = 4;
    *((_QWORD *)v59 + 28) = 0x200000000;
    v87 = 1;
    v52 = (unint64_t *)(v59 + 264);
  }
  else
  {
    std::vector<webrtc::FrameDependencyTemplate>::resize((uint64_t)&__p, 2uLL);
    v50 = (void **)__p;
    if (v95 == __p)
      goto LABEL_127;
    *((_DWORD *)__p + 1) = 0;
    if (((_BYTE)v50[1] & 1) != 0)
      operator delete(v50[2]);
    v50[1] = (void *)2;
    *((_DWORD *)v50 + 4) = 2;
    v51 = (char *)__p;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((char *)v95 - (_BYTE *)__p) >> 3)) <= 1)
      goto LABEL_127;
    *((_DWORD *)__p + 27) = 0;
    if ((v51[112] & 1) != 0)
      operator delete(*((void **)v51 + 15));
    *((_QWORD *)v51 + 14) = 2;
    *((_DWORD *)v51 + 30) = 2;
    v87 = 1;
    v52 = (unint64_t *)(v51 + 160);
  }
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>(v52, (uint64_t)&v87, 1uLL);
  std::optional<webrtc::FrameDependencyStructure>::operator=[abi:sn180100]<webrtc::FrameDependencyStructure,void>((uint64_t)a7 + 1856, (uint64_t)&v88);
  v60 = (void **)__p;
  if (!__p)
    goto LABEL_94;
  v61 = v95;
  v62 = __p;
  if (v95 != __p)
  {
    while (1)
    {
      if ((*(_BYTE *)(v61 - 3) & 1) != 0)
      {
        operator delete(*(v61 - 2));
        if ((*(_BYTE *)(v61 - 6) & 1) == 0)
        {
LABEL_87:
          if ((*(_BYTE *)(v61 - 12) & 1) != 0)
            goto LABEL_91;
          goto LABEL_84;
        }
      }
      else if ((*(_BYTE *)(v61 - 6) & 1) == 0)
      {
        goto LABEL_87;
      }
      operator delete(*(v61 - 5));
      if ((*(_BYTE *)(v61 - 12) & 1) != 0)
LABEL_91:
        operator delete(*(v61 - 11));
LABEL_84:
      v61 -= 13;
      if (v61 == v60)
      {
        v62 = __p;
        break;
      }
    }
  }
  v95 = v60;
  operator delete(v62);
LABEL_94:
  if ((v92 & 1) != 0)
    operator delete(v93);
  if ((v90 & 1) != 0)
    operator delete(v91);
  *((_DWORD *)a7 + 411) = *((unsigned __int8 *)a7 + 9);
  v88 = 0x200000002;
  absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)a7 + 206, (uint64_t)&v88, 2uLL);
LABEL_99:
  v63 = 0;
  *((_BYTE *)a7 + 12) = 1;
  LODWORD(v88) = 0;
  v12 = (char *)a7 + 48;
  v10 = (char *)&v100 + 12;
  v14 = (uint64_t)&v100 + 4;
  do
  {
    v65 = 0;
    LOBYTE(v87) = 0;
    v86 = v11;
    if ((v11 & 1) != 0)
    {
LABEL_120:
      v70 = 1;
      v86 = 1;
      v74 = *((_QWORD *)a7 + 9);
      *((_QWORD *)a7 + 9) = v74 + 1;
      *(_QWORD *)&v12[8 * v74] = (int)v63;
      v71 = *v36;
      if ((*v36 & 1) != 0)
        goto LABEL_118;
      goto LABEL_121;
    }
    if (!v102)
      goto LABEL_127;
    v66 = (char *)&v100 + 4;
    if (v63)
    {
      if (v63 == 2)
      {
        v66 = (char *)&v100 + 12;
      }
      else
      {
        v66 = (char *)&v100 + 8;
        if (v63 != 1)
        {
          v65 = 0;
          v67 = 1;
          goto LABEL_113;
        }
      }
    }
    v67 = 1;
    if ((*v66 & 1) != 0)
    {
      LOBYTE(v87) = 1;
      v69 = *((_QWORD *)a7 + 5);
      *((_QWORD *)a7 + 5) = v69 + 1;
      *((_QWORD *)a7 + v69 + 2) = v63;
      v65 = 1;
      v67 = 0;
      v68 = (char *)&v100 + 4;
      if (!v63)
        goto LABEL_115;
    }
    else
    {
      v65 = 0;
      v68 = (char *)&v100 + 4;
      if (!v63)
        goto LABEL_115;
    }
LABEL_113:
    if (v63 != 2)
    {
      v68 = (char *)&v100 + 8;
      if (v63 != 1)
        goto LABEL_116;
LABEL_115:
      if ((*v68 & 2) != 0)
        goto LABEL_120;
      goto LABEL_116;
    }
    if ((BYTE12(v100) & 2) != 0)
      goto LABEL_120;
LABEL_116:
    if ((v67 & 1) != 0)
      goto LABEL_101;
    v70 = 0;
    v71 = *v36;
    if ((*v36 & 1) != 0)
    {
LABEL_118:
      v72 = (char *)*((_QWORD *)a7 + 219);
      v73 = *((_QWORD *)a7 + 220);
      goto LABEL_122;
    }
LABEL_121:
    v72 = (char *)a7 + 1752;
    v73 = 8;
LABEL_122:
    if (v71 >> 1 == v73)
    {
      absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int &,BOOL &,BOOL &>((uint64_t)a7 + 1744, &v88, (char *)&v87, &v86);
    }
    else
    {
      if (!v72)
        goto LABEL_127;
      v75 = &v72[8 * (v71 >> 1)];
      *(_DWORD *)v75 = v63;
      v75[4] = v65;
      v75[5] = v70;
      *v36 = v71 + 2;
    }
LABEL_101:
    v64 = v88;
    v63 = v88 + 1;
    LODWORD(v88) = v88 + 1;
  }
  while (v64 < 2);
  v14 = (uint64_t)&v97;
  LODWORD(v10) = v85;
  LODWORD(v12) = v84;
  v45 = (webrtc::ScreenshareLayers *)((char *)this + 128);
  v46 = rtc::g_clock;
  if (rtc::g_clock)
    goto LABEL_126;
LABEL_129:
  if (!dword_253EA791C)
    mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
  v76 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
      / dword_253EA791C;
LABEL_132:
  webrtc::RateStatistics::Update(v45, 1, v76 / 1000000);
  if (*((_DWORD *)this + 2) != 1)
  {
    v77 = *((_DWORD *)this + 7);
    v78 = (char *)this + 20 * v77;
    v80 = *((_DWORD *)v78 + 57);
    v79 = v78 + 228;
    if (v80 == 1)
      *v79 = 3;
    if ((_DWORD)v10 != -1)
      *((_DWORD *)this + 5 * v77 + 59) = (_DWORD)v10;
    if (v77 == 1)
    {
      *((_DWORD *)this + 65) += (_DWORD)v12;
      ++*((_QWORD *)this + 36);
      *((_QWORD *)this + 42) += *((unsigned int *)this + 66);
      v82 = (char *)this + 320;
LABEL_141:
      *(_QWORD *)v82 += (int)v10;
    }
    else if (!v77)
    {
      v81 = *((unsigned int *)this + 61);
      *((_DWORD *)this + 60) += (_DWORD)v12;
      *((_DWORD *)this + 65) += (_DWORD)v12;
      ++*((_QWORD *)this + 35);
      *((_QWORD *)this + 41) += v81;
      v82 = (char *)this + 312;
      goto LABEL_141;
    }
  }
  if (v102)
  {
    if ((v97 & 1) != 0)
      operator delete(*(void **)(v14 + 8));
  }
}

uint64_t webrtc::ScreenshareLayers::OnFrameDropped(uint64_t this)
{
  *(_DWORD *)(this + 20 * *(int *)(this + 28) + 228) = 1;
  ++*(_QWORD *)(this + 304);
  return this;
}

void webrtc::ScreenshareLayers::UpdateConfiguration(webrtc::ScreenshareLayers *this@<X0>, _OWORD *a2@<X8>)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  double v6;
  double v7;
  float v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char *v17;
  _DWORD *v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;

  v2 = *((_DWORD *)this + 61);
  v3 = *((_DWORD *)this + 2);
  v4 = v2;
  if (v3 >= 2)
  {
    v5 = 2.5;
    v6 = (double)v2 * 2.5;
    LODWORD(v5) = *((_DWORD *)this + 66);
    v7 = (double)v5 * 0.5;
    if (v7 < v6)
      v6 = v7;
    v4 = v6;
  }
  if (v2 <= v4)
    v2 = v4;
  v8 = (float)v2;
  if (*((_BYTE *)this + 116))
  {
    if (*((_BYTE *)this + 124))
    {
      v9 = *((_DWORD *)this + 28);
      v10 = *((_DWORD *)this + 30);
      if (v9 < v10)
        v8 = (float)((float)v10 / (float)v9) * v8;
    }
  }
  if (*((_BYTE *)this + 224))
  {
    if (*((_BYTE *)this + 464))
      goto LABEL_19;
    goto LABEL_18;
  }
  if (!*((_BYTE *)this + 464))
  {
LABEL_18:
    *((_BYTE *)this + 464) = 1;
LABEL_19:
    *((_DWORD *)this + 115) = v8;
    v11 = *((_DWORD *)this + 7);
    if (v11 == -1 || *((_DWORD *)this + 5 * v11 + 57) != 3)
    {
      if (!*((_BYTE *)this + 16) || !*((_BYTE *)this + 24))
        goto LABEL_38;
      if (*((_DWORD *)this + 66) < 0x1F4u)
      {
        v14 = -1;
        v15 = -1;
      }
      else
      {
        v12 = *((_DWORD *)this + 3);
        v13 = *((_DWORD *)this + 5) - v12;
        v14 = 80 * v13 / 100 + v12;
        v15 = 85 * v13 / 100 + v12;
      }
      *((_DWORD *)this + 58) = v14;
      *((_DWORD *)this + 63) = v15;
    }
    if (*((_BYTE *)this + 124))
      *((_DWORD *)this + 20) = 1000 * v2 / (8 * *((_DWORD *)this + 30));
    *((_BYTE *)this + 224) = 0;
    if (v3 < 2)
      goto LABEL_37;
    goto LABEL_30;
  }
  if (v8 != (float)*((unsigned int *)this + 115))
    goto LABEL_19;
  v11 = *((_DWORD *)this + 7);
  if (v3 < 2)
    goto LABEL_37;
LABEL_30:
  if (v11 == -1)
  {
LABEL_37:
    v21 = *(_OWORD *)((char *)this + 456);
    a2[6] = *(_OWORD *)((char *)this + 440);
    a2[7] = v21;
    a2[8] = *(_OWORD *)((char *)this + 472);
    v22 = *(_OWORD *)((char *)this + 392);
    a2[2] = *(_OWORD *)((char *)this + 376);
    a2[3] = v22;
    v23 = *(_OWORD *)((char *)this + 424);
    a2[4] = *(_OWORD *)((char *)this + 408);
    a2[5] = v23;
    v24 = *(_OWORD *)((char *)this + 360);
    *a2 = *(_OWORD *)((char *)this + 344);
    a2[1] = v24;
    return;
  }
  if (*((_BYTE *)this + 24))
  {
    v16 = *((_DWORD *)this + 5);
    v17 = (char *)this + 20 * v11;
    v19 = *((_DWORD *)v17 + 57);
    v18 = v17 + 228;
    if (v19 == 3)
    {
      v20 = *((_DWORD *)this + 5 * v11 + 58);
      if (v20 != -1)
        v16 = v20;
      *v18 = 0;
    }
    *((_DWORD *)this + 117) = v16;
    *((_BYTE *)this + 472) = 1;
    goto LABEL_37;
  }
LABEL_38:
  std::__throw_bad_optional_access[abi:sn180100]();
  std::__tree<std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>>>::destroy(v25);
}

void std::__tree<std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::ScreenshareLayers::DependencyInfo>>>::destroy(a1[1]);
    if ((a1[5] & 1) != 0)
      operator delete((void *)a1[6]);
    operator delete(a1);
  }
}

void absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::EmplaceBackSlow<int,BOOL,BOOL>(uint64_t a1, int a2, char a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;

  v9 = a1 + 8;
  v8 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v11 = *(_QWORD *)(a1 + 16);
    if (((v11 >> 60) & 7) != 0)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v9 = *(_QWORD *)(a1 + 8);
    v10 = 2 * v11;
  }
  else
  {
    v10 = 16;
  }
  v12 = v8 >> 1;
  v13 = (char *)operator new(8 * v10);
  v14 = v13;
  v15 = &v13[8 * (v8 >> 1)];
  *(_DWORD *)v15 = a2;
  v15[4] = a3;
  v15[5] = a4;
  if (v8 >= 2)
  {
    v16 = 0;
    if (v8 < 8 || (unint64_t)&v13[-v9] < 0x20)
    {
      v17 = (uint64_t *)v9;
    }
    else
    {
      v16 = v12 & 0x7FFFFFFFFFFFFFFCLL;
      v17 = (uint64_t *)(v9 + 8 * (v12 & 0x7FFFFFFFFFFFFFFCLL));
      v18 = v13 + 16;
      v19 = (__int128 *)(v9 + 16);
      v20 = v12 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v12 == v16)
        goto LABEL_15;
    }
    v22 = v12 - v16;
    v23 = &v13[8 * v16];
    do
    {
      v24 = *v17++;
      *(_QWORD *)v23 = v24;
      v23 += 8;
      --v22;
    }
    while (v22);
  }
LABEL_15:
  if ((v8 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v8 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)a1 = (v8 | 1) + 2;
}

uint64_t webrtc::InternalDataChannelInit::InternalDataChannelInit(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  v5 = (std::string *)(a1 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 53) = *(_QWORD *)((char *)a2 + 53);
  *(_QWORD *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    *(_DWORD *)(a1 + 64) = 2;
    if (!*(_BYTE *)(a1 + 16))
      goto LABEL_15;
  }
  else
  {
    *(_DWORD *)(a1 + 52) = -1;
    if (!*(_BYTE *)(a1 + 16))
      goto LABEL_15;
  }
  v8 = *(_DWORD *)(a1 + 12);
  if ((v8 & 0x80000000) != 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_data_channel.cc");
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
  }
  else if (v8 >= 0x10000)
  {
    *(_DWORD *)(a1 + 12) = 0xFFFF;
  }
LABEL_15:
  if (!*(_BYTE *)(a1 + 8))
    return a1;
  v16 = *(_DWORD *)(a1 + 4);
  if ((v16 & 0x80000000) == 0)
  {
    if (v16 >= 0x10000)
      *(_DWORD *)(a1 + 4) = 0xFFFF;
    return a1;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_data_channel.cc");
  if (!*(_BYTE *)(a1 + 8))
    return a1;
  *(_BYTE *)(a1 + 8) = 0;
  return a1;
}

uint64_t webrtc::SctpSidAllocator::AllocateSid(unsigned __int16 **a1, int a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v22;

  v3 = *a1;
  v4 = a1[1];
  if (v4 == *a1)
  {
    v22 = a2 != 0;
LABEL_18:
    std::vector<webrtc::StreamId>::emplace<webrtc::StreamId const&>((void **)a1, v3, (__int16 *)&v22);
    return v22 | 0x10000u;
  }
  else
  {
    v5 = v4 - *a1;
    v6 = a2 != 0;
    do
    {
      v22 = v6;
      v7 = v3;
      v8 = v5;
      do
      {
        v9 = v8 >> 1;
        v10 = &v7[v8 >> 1];
        v12 = *v10;
        v11 = v10 + 1;
        v8 += ~(v8 >> 1);
        if (v12 < (unsigned __int16)v6)
          v7 = v11;
        else
          v8 = v9;
      }
      while (v8);
      if (v7 == v4)
      {
        v3 = v4;
        goto LABEL_18;
      }
      if (*v7 > (unsigned __int16)v6)
      {
        v3 = v7;
        goto LABEL_18;
      }
      v13 = v6 >= 0x3FE;
      v6 += 2;
    }
    while (!v13);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_data_channel.cc");
    return 0;
  }
}

uint64_t webrtc::SctpDataChannel::SctpDataChannel(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, int a5, uint64_t a6, uint64_t a7)
{
  int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;

  *(_QWORD *)a1 = &unk_24C0BFC80;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = a7;
  v11 = *(_DWORD *)(a2 + 52);
  if (v11 == -1)
  {
    v12 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_WORD *)(a1 + 24) = v11;
    v12 = 1;
  }
  *(_BYTE *)(a1 + 26) = v12;
  do
  {
    v14 = v13 + 1;
  }
  *(_DWORD *)(a1 + 28) = v14;
  v15 = (std::string *)(a1 + 32);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
    v17 = (std::string *)(a1 + 56);
    if ((*(char *)(a2 + 47) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_10:
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
    goto LABEL_11;
  }
  v16 = *a4;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  v17 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 47) < 0)
    goto LABEL_10;
LABEL_8:
  v18 = *(_OWORD *)(a2 + 24);
  v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
LABEL_11:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 1);
  *(_DWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 182) = 0;
  *(_QWORD *)(a1 + 173) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v19 = *a3;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 216) = v19;
  *(_DWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  v20 = operator new();
  *(_DWORD *)v20 = 0;
  *(_BYTE *)(v20 + 4) = 0;
  *(_QWORD *)(a1 + 296) = v20;
  do
    v21 = __ldxr((unsigned int *)v20);
  while (__stxr(v21 + 1, (unsigned int *)v20));
  if (a5)
  {
    *(_BYTE *)(v20 + 4) = 1;
    v22 = *(int *)(a2 + 64);
    if (v22 > 2)
      return a1;
  }
  else
  {
    v22 = *(int *)(a2 + 64);
    if (v22 > 2)
      return a1;
  }
  *(_DWORD *)(a1 + 232) = dword_208F1B088[v22];
  return a1;
}

void webrtc::SctpDataChannel::~SctpDataChannel(webrtc::SctpDataChannel *this)
{
  _QWORD *v2;
  rtc::Thread *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void **v7;
  void **v8;
  unint64_t v9;
  void **v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t **v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  _QWORD v34[2];
  uint64_t (*v35)(char, uint64_t *, uint64_t *);
  uint64_t (*v36)();

  *(_QWORD *)this = &unk_24C0BFC80;
  v2 = (_QWORD *)*((_QWORD *)this + 16);
  if (!v2)
  {
LABEL_4:
    v4 = (unsigned int *)*((_QWORD *)this + 37);
    if (!v4)
      goto LABEL_10;
    goto LABEL_7;
  }
  *((_QWORD *)this + 16) = 0;
  v3 = (rtc::Thread *)v2[3];
  if (rtc::Thread::IsCurrent(v3))
  {
    (*(void (**)(_QWORD *))(*v2 + 40))(v2);
    goto LABEL_4;
  }
  v34[0] = v2;
  v35 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::SctpDataChannel::ObserverAdapter::DeleteOnSignalingThread(std::unique_ptr<webrtc::SctpDataChannel::ObserverAdapter>)::{lambda(void)#1}>;
  v36 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::SctpDataChannel::ObserverAdapter::DeleteOnSignalingThread(std::unique_ptr<webrtc::SctpDataChannel::ObserverAdapter>)::{lambda(void)#1} &&>;
  (*(void (**)(rtc::Thread *, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v34, &v33, &v32);
  v35(1, v34, v34);
  v4 = (unsigned int *)*((_QWORD *)this + 37);
  if (!v4)
    goto LABEL_10;
  do
  {
LABEL_7:
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
    MEMORY[0x20BD0ADEC]();
LABEL_10:
  v7 = (void **)*((_QWORD *)this + 31);
  v8 = (void **)*((_QWORD *)this + 32);
  if (v8 == v7)
  {
    v8 = (void **)*((_QWORD *)this + 31);
    *((_QWORD *)this + 35) = 0;
    v20 = 0;
  }
  else
  {
    v9 = *((_QWORD *)this + 34);
    v10 = &v7[v9 >> 9];
    v11 = (uint64_t **)((char *)*v10 + 8 * (v9 & 0x1FF));
    v12 = *(uint64_t *)((char *)v7 + (((*((_QWORD *)this + 35) + v9) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*((_QWORD *)this + 35) + v9) & 0x1FF);
    if (v11 != (uint64_t **)v12)
    {
      while (v11)
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          v14 = *v13;
          if (*v13)
          {
            v15 = (unsigned int *)(v14 + 24);
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              v18 = *(_QWORD *)(v14 + 16);
              *(_QWORD *)(v14 + 16) = 0;
              if (v18)
                MEMORY[0x20BD0ADD4](v18, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v14, 0x1010C40EE34DA14);
            }
          }
          MEMORY[0x20BD0ADEC](v13, 0x1020C4059E634C0);
        }
        if ((char *)++v11 - (_BYTE *)*v10 == 4096)
        {
          v19 = (uint64_t **)v10[1];
          ++v10;
          v11 = v19;
        }
        if (v11 == (uint64_t **)v12)
        {
          v7 = (void **)*((_QWORD *)this + 31);
          v8 = (void **)*((_QWORD *)this + 32);
          goto LABEL_27;
        }
      }
      __break(1u);
      return;
    }
LABEL_27:
    *((_QWORD *)this + 35) = 0;
    v20 = (char *)v8 - (char *)v7;
    if ((unint64_t)((char *)v8 - (char *)v7) >= 0x11)
    {
      do
      {
        operator delete(*v7);
        v8 = (void **)*((_QWORD *)this + 32);
        v7 = (void **)(*((_QWORD *)this + 31) + 8);
        *((_QWORD *)this + 31) = v7;
        v20 = (char *)v8 - (char *)v7;
      }
      while ((unint64_t)((char *)v8 - (char *)v7) > 0x10);
    }
  }
  v21 = v20 >> 3;
  if (v21 == 1)
  {
    v22 = 256;
  }
  else
  {
    if (v21 != 2)
      goto LABEL_35;
    v22 = 512;
  }
  *((_QWORD *)this + 34) = v22;
LABEL_35:
  if (v7 != v8)
  {
    do
    {
      v23 = *v7++;
      operator delete(v23);
    }
    while (v7 != v8);
    v25 = *((_QWORD *)this + 31);
    v24 = *((_QWORD *)this + 32);
    if (v24 != v25)
      *((_QWORD *)this + 32) = v24 + ((v25 - v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v26 = (void *)*((_QWORD *)this + 30);
  if (v26)
    operator delete(v26);
  v27 = *((_QWORD *)this + 27);
  if (v27)
  {
    v28 = (unsigned int *)(v27 + 4);
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      MEMORY[0x20BD0ADEC]();
  }
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  v31 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
  if ((*((char *)this + 79) & 0x80000000) == 0)
  {
    if ((*((char *)this + 55) & 0x80000000) == 0)
      return;
LABEL_54:
    operator delete(*((void **)this + 4));
    return;
  }
  operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    goto LABEL_54;
}

uint64_t webrtc::SctpDataChannel::RegisterObserver(rtc::Thread *a1, _QWORD *a2)
{
  _QWORD *v2;
  rtc::Thread *v3;
  void *v4;
  void *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  _QWORD v29[2];
  _QWORD *v30;
  rtc::Thread *v31;
  _QWORD *v32;
  _QWORD *v33;

  v2 = a2;
  v3 = a1;
  v30 = a2;
  v4 = rtc::Thread::Current(a1);
  if (((*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 1) != 0)
  {
    if (!v3)
    {
      v31 = 0;
      v32 = v2;
      v5 = (void *)MEMORY[0x10];
      if ((void *)MEMORY[0x10] != v4)
        goto LABEL_4;
LABEL_19:
      *((_QWORD *)v3 + 15) = v2;
      if (v2 && *((_DWORD *)v3 + 34) == 1 && *((_QWORD *)v3 + 35))
      {
        do
        {
          webrtc::PacketQueue::PopFront((rtc::Thread *)((char *)v3 + 240), v29);
          ++*((_DWORD *)v3 + 50);
          v22 = (uint64_t *)v29[0];
          *((_QWORD *)v3 + 26) += *(_QWORD *)(v29[0] + 16);
          (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)v3 + 15) + 8))(*((_QWORD *)v3 + 15), v22);
          v29[0] = 0;
          v23 = *v22;
          if (*v22)
          {
            v24 = (unsigned int *)(v23 + 24);
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v27 = *(_QWORD *)(v23 + 16);
              *(_QWORD *)(v23 + 16) = 0;
              if (v27)
                MEMORY[0x20BD0ADD4](v27, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v23, 0x1010C40EE34DA14);
            }
          }
          MEMORY[0x20BD0ADEC](v22, 0x1020C4059E634C0);
        }
        while (*((_QWORD *)v3 + 35));
      }
      return (*(uint64_t (**)(rtc::Thread *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_data_channel.cc");
    v29[0] = v3;
    v29[1] = &v30;
    v14 = (void *)*((_QWORD *)v3 + 1);
    if (v14 == v4)
    {
      v16 = *((_QWORD *)v3 + 16);
      *(_QWORD *)(v16 + 8) = v2;
      v17 = operator new();
      *(_DWORD *)v17 = 0;
      *(_BYTE *)(v17 + 4) = 1;
      do
        v18 = __ldxr((unsigned int *)v17);
      while (__stxr(v18 + 1, (unsigned int *)v17));
      v19 = *(_QWORD *)(v16 + 32);
      *(_BYTE *)(v19 + 4) = 0;
      *(_QWORD *)(v16 + 32) = v17;
      do
      {
        v20 = __ldaxr((unsigned int *)v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, (unsigned int *)v19));
      if (!v21)
        MEMORY[0x20BD0ADEC](v19, 0x1000C4090D0E795);
      v15 = (_QWORD *)*((_QWORD *)v3 + 16);
    }
    else
    {
      v33 = 0;
      v31 = (rtc::Thread *)&v33;
      v32 = v29;
      (*(void (**)(void *, rtc::Thread **, uint64_t (*)(_QWORD **), char *))(*(_QWORD *)v14 + 96))(v14, &v31, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SctpDataChannel::ObserverAdapter * rtc::Thread::BlockingCall<webrtc::SctpDataChannel::RegisterObserver(webrtc::DataChannelObserver *)::$_0,webrtc::SctpDataChannel::ObserverAdapter *,void>(webrtc::SctpDataChannel::RegisterObserver(webrtc::DataChannelObserver *)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v28);
      v15 = v33;
    }
    v30 = v15;
  }
  (**(void (***)(rtc::Thread *))v3)(v3);
  v2 = v30;
  v31 = v3;
  v32 = v30;
  v5 = (void *)*((_QWORD *)v3 + 2);
  if (v5 == v4)
    goto LABEL_19;
LABEL_4:
  result = (*(uint64_t (**)(void *, rtc::Thread **, _QWORD *(*)(_QWORD *), _QWORD *))(*(_QWORD *)v5 + 96))(v5, &v31, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SctpDataChannel::RegisterObserver(webrtc::DataChannelObserver *)::$_1>, v29);
  v3 = v31;
  if (v31)
    return (*(uint64_t (**)(rtc::Thread *))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

unsigned int *webrtc::SctpDataChannel::UnregisterObserver(unsigned int **this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  webrtc::SctpDataChannel *v11;
  webrtc::SctpDataChannel *v12;

  v2 = (unsigned int *)rtc::Thread::Current((rtc::Thread *)this);
  v12 = (webrtc::SctpDataChannel *)this;
  v3 = this[2];
  if (v2 == v3)
  {
    this[15] = 0;
    v11 = (webrtc::SctpDataChannel *)this;
    result = this[1];
    if (v2 != result)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, webrtc::SctpDataChannel **, unsigned int *(*)(unsigned int *), char *))(*(_QWORD *)result + 96))(result, &v11, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SctpDataChannel::UnregisterObserver(void)::$_1>, &v10);
  }
  else
  {
    (*(void (**)(unsigned int *, webrtc::SctpDataChannel **, uint64_t (*)(uint64_t), webrtc::SctpDataChannel **))(*(_QWORD *)v3 + 96))(v3, &v12, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SctpDataChannel::UnregisterObserver(void)::$_0>, &v11);
    v11 = (webrtc::SctpDataChannel *)this;
    result = this[1];
    if (v2 != result)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, webrtc::SctpDataChannel **, unsigned int *(*)(unsigned int *), char *))(*(_QWORD *)result + 96))(result, &v11, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SctpDataChannel::UnregisterObserver(void)::$_1>, &v10);
  }
  v5 = this[16];
  if (v5)
  {
    *((_QWORD *)v5 + 1) = 0;
    result = (unsigned int *)operator new();
    *result = 0;
    *((_BYTE *)result + 4) = 1;
    do
      v6 = __ldxr(result);
    while (__stxr(v6 + 1, result));
    v7 = *((_QWORD *)v5 + 4);
    *(_BYTE *)(v7 + 4) = 0;
    *((_QWORD *)v5 + 4) = result;
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
      return (unsigned int *)MEMORY[0x20BD0ADEC](v7, 0x1000C4090D0E795);
  }
  return result;
}

void webrtc::SctpDataChannel::label(webrtc::SctpDataChannel *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

BOOL webrtc::SctpDataChannel::reliable(webrtc::SctpDataChannel *this)
{
  return !*((_BYTE *)this + 92) && *((_BYTE *)this + 84) == 0;
}

uint64_t webrtc::SctpDataChannel::ordered(webrtc::SctpDataChannel *this)
{
  return *((unsigned __int8 *)this + 105);
}

uint64_t webrtc::SctpDataChannel::maxRetransmitTime(webrtc::SctpDataChannel *this)
{
  if (*((_BYTE *)this + 84))
    return (unsigned __int16)*((_DWORD *)this + 20);
  else
    return 0xFFFFLL;
}

uint64_t webrtc::SctpDataChannel::maxRetransmits(webrtc::SctpDataChannel *this)
{
  if (*((_BYTE *)this + 92))
    return (unsigned __int16)*((_DWORD *)this + 22);
  else
    return 0xFFFFLL;
}

uint64_t webrtc::SctpDataChannel::maxPacketLifeTime(webrtc::SctpDataChannel *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t webrtc::SctpDataChannel::maxRetransmitsOpt(webrtc::SctpDataChannel *this)
{
  return *((_QWORD *)this + 11);
}

void webrtc::SctpDataChannel::protocol(webrtc::SctpDataChannel *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
}

uint64_t webrtc::SctpDataChannel::negotiated(webrtc::SctpDataChannel *this)
{
  return *((unsigned __int8 *)this + 104);
}

uint64_t webrtc::SctpDataChannel::id(webrtc::SctpDataChannel *this)
{
  if (*((_BYTE *)this + 26))
    return *((unsigned __int16 *)this + 12);
  else
    return 0xFFFFFFFFLL;
}

uint64_t webrtc::SctpDataChannel::priority(webrtc::SctpDataChannel *this)
{
  if (*((_BYTE *)this + 100))
    return *((unsigned int *)this + 24);
  else
    return 1;
}

uint64_t webrtc::SctpDataChannel::buffered_amount(webrtc::SctpDataChannel *this)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  BOOL v4;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 27);
  if (v1 && ((v2 = *v1, v3 = *((_QWORD *)this + 28), v2) ? (v4 = v3 == 0) : (v4 = 1), !v4 && *((_BYTE *)this + 26)))
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v3 + 32))(*((_QWORD *)this + 28), *((unsigned __int16 *)this + 12));
  else
    return 0;
}

void webrtc::SctpDataChannel::Close(webrtc::SctpDataChannel *this)
{
  void (***v2)(_QWORD);
  _BYTE *v3;
  uint64_t v4;

  if ((*((_DWORD *)this + 34) & 0xFFFFFFFE) != 2)
  {
    *((_DWORD *)this + 34) = 2;
    v2 = (void (***)(_QWORD))*((_QWORD *)this + 15);
    if (v2)
      (**v2)(v2);
    v3 = (_BYTE *)*((_QWORD *)this + 27);
    if (v3 && *v3)
    {
      v4 = *((_QWORD *)this + 28);
      if (v4)
        (*(void (**)(uint64_t, webrtc::SctpDataChannel *, _QWORD))(*(_QWORD *)v4 + 24))(v4, this, *((unsigned int *)this + 34));
    }
    webrtc::SctpDataChannel::UpdateState(this);
  }
}

void webrtc::SctpDataChannel::UpdateState(webrtc::SctpDataChannel *this)
{
  int v2;
  _BYTE *v3;
  int v4;
  _BYTE *v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  _BYTE *v8;
  uint64_t v9;
  void (***v10)(_QWORD);
  _BYTE *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char __src;

  v2 = *((_DWORD *)this + 34);
  if (v2 != 2)
  {
    if (v2)
      return;
    if (!*(_BYTE *)(*((_QWORD *)this + 37) + 4))
      return;
    v3 = (_BYTE *)*((_QWORD *)this + 27);
    if (!v3 || !*v3 || !*((_QWORD *)this + 28))
      return;
    v4 = *((_DWORD *)this + 58);
    if (v4 == 2)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      __src = 2;
      rtc::CopyOnWriteBuffer::SetData<unsigned char,(void *)0>((uint64_t *)&v19, &__src, (uint64_t *)1);
    }
    else
    {
      if (v4 != 1)
        goto LABEL_27;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      webrtc::WriteDataChannelOpenMessage((uint64_t)this + 32, (uint64_t)this + 56, *((_QWORD *)this + 12), *((unsigned __int8 *)this + 105), *((_QWORD *)this + 11), *((_QWORD *)this + 10), (uint64_t *)&v19);
    }
    webrtc::SctpDataChannel::SendControlMessage(this, (const rtc::CopyOnWriteBuffer *)&v19);
    rtc::CopyOnWriteBuffer::~CopyOnWriteBuffer((rtc::CopyOnWriteBuffer *)&v19);
LABEL_27:
    if ((*((_DWORD *)this + 58) - 3) <= 1)
    {
      if (*((_DWORD *)this + 34) != 1)
      {
        *((_DWORD *)this + 34) = 1;
        v10 = (void (***)(_QWORD))*((_QWORD *)this + 15);
        if (v10)
          (**v10)(v10);
        v11 = (_BYTE *)*((_QWORD *)this + 27);
        if (v11)
        {
          if (*v11)
          {
            v12 = *((_QWORD *)this + 28);
            if (v12)
              (*(void (**)(uint64_t, webrtc::SctpDataChannel *, _QWORD))(*(_QWORD *)v12 + 24))(v12, this, *((unsigned int *)this + 34));
          }
        }
      }
      if (*((_QWORD *)this + 15) && *((_DWORD *)this + 34) == 1 && *((_QWORD *)this + 35))
      {
        do
        {
          webrtc::PacketQueue::PopFront((webrtc::SctpDataChannel *)((char *)this + 240), &v19);
          ++*((_DWORD *)this + 50);
          v13 = v19;
          *((_QWORD *)this + 26) += v19[2];
          (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 15) + 8))(*((_QWORD *)this + 15), v13);
          v19 = 0;
          v14 = *v13;
          if (*v13)
          {
            v15 = (unsigned int *)(v14 + 24);
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              v18 = *(_QWORD *)(v14 + 16);
              *(_QWORD *)(v14 + 16) = 0;
              if (v18)
                MEMORY[0x20BD0ADD4](v18, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v14, 0x1010C40EE34DA14);
            }
          }
          MEMORY[0x20BD0ADEC](v13, 0x1020C4059E634C0);
        }
        while (*((_QWORD *)this + 35));
      }
    }
    return;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 37) + 4)
    && (v5 = (_BYTE *)*((_QWORD *)this + 27)) != 0
    && *v5
    && (v6 = *((_QWORD *)this + 28)) != 0
    && *((_BYTE *)this + 26))
  {
    if (!(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, *((unsigned __int16 *)this + 12))
      && !*((_BYTE *)this + 236)
      && *((_BYTE *)this + 26))
    {
      *((_BYTE *)this + 236) = 1;
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 28) + 16))(*((_QWORD *)this + 28), *((unsigned __int16 *)this + 12));
    }
  }
  else
  {
    *((_DWORD *)this + 34) = 3;
    v7 = (void (***)(_QWORD))*((_QWORD *)this + 15);
    if (v7)
      (**v7)(v7);
    v8 = (_BYTE *)*((_QWORD *)this + 27);
    if (v8)
    {
      if (*v8)
      {
        v9 = *((_QWORD *)this + 28);
        if (v9)
          (*(void (**)(uint64_t, webrtc::SctpDataChannel *, _QWORD))(*(_QWORD *)v9 + 24))(v9, this, *((unsigned int *)this + 34));
      }
    }
  }
}

uint64_t webrtc::SctpDataChannel::state(webrtc::SctpDataChannel *this)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  webrtc::SctpDataChannel *v8;
  _QWORD v9[2];
  unsigned int v10;

  v2 = rtc::Thread::Current(this);
  if (v2 == *((void **)this + 1))
  {
    v5 = *((_QWORD *)this + 16);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        return *(unsigned int *)(v6 + 12);
    }
  }
  v8 = this;
  v3 = (void *)*((_QWORD *)this + 2);
  if (v2 == v3)
    return *((unsigned int *)this + 34);
  v10 = 0;
  v9[0] = &v10;
  v9[1] = &v8;
  (*(void (**)(void *, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v3 + 96))(v3, v9, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::DataChannelInterface::DataState rtc::Thread::BlockingCall<webrtc::SctpDataChannel::state(void)::$_0,webrtc::DataChannelInterface::DataState,void>(webrtc::SctpDataChannel::state(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v7);
  return v10;
}

void webrtc::SctpDataChannel::error(webrtc::SctpDataChannel *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  int v11;
  char v12;
  webrtc::SctpDataChannel *v13;
  _QWORD v14[2];

  v4 = rtc::Thread::Current(this);
  if (v4 == *((void **)this + 1) && (v6 = *((_QWORD *)this + 16)) != 0 && (v7 = *(_QWORD *)(v6 + 48)) != 0)
  {
    *(_DWORD *)a2 = *(_DWORD *)(v7 + 16);
    v8 = (std::string *)(a2 + 8);
    if (*(char *)(v7 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(v7 + 24), *(_QWORD *)(v7 + 32));
    }
    else
    {
      v9 = *(_OWORD *)(v7 + 24);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(v7 + 40);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
    }
    v11 = *(_DWORD *)(v7 + 48);
    *(_DWORD *)(a2 + 35) = *(_DWORD *)(v7 + 51);
    *(_DWORD *)(a2 + 32) = v11;
  }
  else
  {
    v13 = this;
    v5 = (void *)*((_QWORD *)this + 2);
    if (v4 == v5)
    {
      *(_DWORD *)a2 = *((_DWORD *)this + 36);
      v10 = (std::string *)(a2 + 8);
      if (*((char *)this + 175) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)this + 19), *((_QWORD *)this + 20));
      }
      else
      {
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 152);
        *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 21);
      }
      *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 44);
      *(_DWORD *)(a2 + 35) = *(_DWORD *)((char *)this + 179);
    }
    else
    {
      *(_DWORD *)a2 = 0;
      *(_BYTE *)(a2 + 38) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 29) = 0;
      v14[0] = a2;
      v14[1] = &v13;
      (*(void (**)(void *, _QWORD *, __n128 (*)(uint64_t *), char *))(*(_QWORD *)v5 + 96))(v5, v14, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::SctpDataChannel::error(void)::$_0,webrtc::RTCError,void>(webrtc::SctpDataChannel::error(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v12);
    }
  }
}

uint64_t webrtc::SctpDataChannel::messages_sent(webrtc::SctpDataChannel *this)
{
  return *((unsigned int *)this + 46);
}

uint64_t webrtc::SctpDataChannel::bytes_sent(webrtc::SctpDataChannel *this)
{
  return *((_QWORD *)this + 24);
}

uint64_t webrtc::SctpDataChannel::messages_received(webrtc::SctpDataChannel *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t webrtc::SctpDataChannel::bytes_received(webrtc::SctpDataChannel *this)
{
  return *((_QWORD *)this + 26);
}

BOOL webrtc::SctpDataChannel::Send(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _QWORD v15[3];
  char v16;
  int v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  _DWORD v21[2];

  v3 = *a2;
  v15[0] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 24);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[2];
  v15[1] = a2[1];
  v15[2] = v6;
  v16 = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 112) += v6;
  if (*(_DWORD *)(a1 + 136) == 1)
  {
    webrtc::SctpDataChannel::SendDataMessage((uint64_t)&v17, a1, (uint64_t)v15);
    v3 = v15[0];
    if (!v15[0])
      goto LABEL_16;
    goto LABEL_10;
  }
  v7 = 6;
  *(_DWORD *)(a1 + 144) = 6;
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    v7 = *(_DWORD *)(a1 + 144);
  }
  *(_BYTE *)(a1 + 182) = 0;
  *(_QWORD *)(a1 + 173) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v17 = v7;
  v19 = 0;
  v20 = 0;
  __p = 0;
  v21[0] = *(_DWORD *)(a1 + 176);
  *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)(a1 + 179);
  if (v3)
  {
LABEL_10:
    v8 = (unsigned int *)(v3 + 24);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      v11 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      if (v11)
        MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v3, 0x1010C40EE34DA14);
    }
  }
LABEL_16:
  v12 = v17;
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  return v12 != 6 && v12 != 9;
}

void webrtc::SctpDataChannel::SendDataMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  void (***v6)(_BYTE *__return_ptr, _QWORD, _QWORD, int *, uint64_t);
  int v8;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  int v19;
  int v20;
  int v21;
  char __p[21];
  char v23;
  int v24;
  char v25;
  char v26;
  _BYTE v27[24];
  uint64_t v28;
  _DWORD v29[2];
  int v30;
  char v31;
  int v32;
  char v33;
  int v34;
  char v35;

  v5 = *(_BYTE **)(a2 + 216);
  if (!v5
    || !*v5
    || (v6 = *(void (****)(_BYTE *__return_ptr, _QWORD, _QWORD, int *, uint64_t))(a2 + 224)) == 0
    || !*(_BYTE *)(a2 + 26))
  {
    v19 = 6;
    *(_DWORD *)(a2 + 144) = 6;
    if (*(char *)(a2 + 175) < 0)
    {
      operator delete(*(void **)(a2 + 152));
      v19 = *(_DWORD *)(a2 + 144);
    }
    *(_BYTE *)(a2 + 182) = 0;
    *(_QWORD *)(a2 + 173) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_DWORD *)a1 = v19;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 176);
    v20 = *(_DWORD *)(a2 + 179);
    goto LABEL_25;
  }
  v8 = *(unsigned __int8 *)(a2 + 105);
  if (*(_DWORD *)(a2 + 232) != 4 && v8 == 0)
    LOBYTE(v8) = 1;
  v31 = v8;
  v32 = *(_DWORD *)(a2 + 88);
  v33 = *(_BYTE *)(a2 + 92);
  v34 = *(_DWORD *)(a2 + 80);
  v35 = *(_BYTE *)(a2 + 84);
  v30 = *(unsigned __int8 *)(a3 + 24);
  (**v6)(v27, v6, *(unsigned __int16 *)(a2 + 24), &v30, a3);
  *(_DWORD *)(a2 + 144) = *(_DWORD *)v27;
  v10 = (void **)(a2 + 152);
  if (*(char *)(a2 + 175) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v27[8];
  *(_QWORD *)(a2 + 168) = v28;
  *(_DWORD *)(a2 + 176) = v29[0];
  *(_DWORD *)(a2 + 179) = *(_DWORD *)((char *)v29 + 3);
  webrtc::SctpDataChannel::MaybeSendOnBufferedAmountChanged((_QWORD *)a2);
  if (!*(_DWORD *)(a2 + 144))
  {
    ++*(_DWORD *)(a2 + 184);
    *(_QWORD *)(a2 + 192) += *(_QWORD *)(a3 + 16);
    *(_DWORD *)a1 = 0;
    v18 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 175) & 0x80000000) == 0)
    {
LABEL_21:
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)v10;
      v18->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 168);
LABEL_28:
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 176);
      v20 = *(_DWORD *)(a2 + 179);
LABEL_25:
      *(_DWORD *)(a1 + 35) = v20;
      return;
    }
LABEL_27:
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)(a2 + 152), *(_QWORD *)(a2 + 160));
    goto LABEL_28;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t\v\t\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_data_channel.cc");
  }
  v21 = 8;
  v23 = 20;
  if (__p > "Failure to send data" || &__p[20] <= "Failure to send data")
  {
    strcpy(__p, "Failure to send data");
    v24 = 0;
    v25 = 0;
    v26 = 0;
    webrtc::SctpDataChannel::CloseAbruptlyWithError(a2, (uint64_t)&v21);
    if (v23 < 0)
      operator delete(*(void **)__p);
    *(_DWORD *)a1 = *(_DWORD *)(a2 + 144);
    v18 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 175) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_27;
  }
  __break(1u);
}

uint64_t webrtc::SctpDataChannel::SendAsync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  char v20;
  _BYTE v21[16];
  __int128 v22;
  char v23;
  _QWORD v24[2];
  uint64_t (*v25)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v26)(uint64_t);

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int **)(a1 + 296);
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *a2;
  *(_QWORD *)&v18 = a1;
  *((_QWORD *)&v18 + 1) = v7;
  v19 = *(_OWORD *)(a2 + 1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v20 = *((_BYTE *)a2 + 24);
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a3 + 16))(0, a3, v21);
  v22 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a3 + 24) = 0;
  v8 = operator new();
  v9 = v19;
  *(_OWORD *)v8 = v18;
  *(_OWORD *)(v8 + 16) = v9;
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 0uLL;
  *(_BYTE *)(v8 + 32) = v20;
  ((void (*)(_QWORD, _BYTE *, uint64_t))v22)(0, v21, v8 + 40);
  *(_OWORD *)(v8 + 56) = v22;
  v22 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  v10 = (_QWORD *)operator new();
  *v10 = v5;
  v10[1] = v8;
  v10[3] = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc15SctpDataChannel9SendAsyncENS2_10DataBufferENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEE3__0EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v10[4] = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc15SctpDataChannel9SendAsyncENS2_10DataBufferENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEE3__0JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  v24[0] = v10;
  v25 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v26 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v24, &v23, &v17);
  v25(1, v24, v24);
  result = ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v22)(1, v21, v21);
  v12 = *((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unsigned int *)(*((_QWORD *)&v18 + 1) + 24);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      v16 = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(v12 + 16) = 0;
      if (v16)
        MEMORY[0x20BD0ADD4](v16, 0x1000C8077774924);
      return MEMORY[0x20BD0ADEC](v12, 0x1010C40EE34DA14);
    }
  }
  return result;
}

void webrtc::SctpDataChannel::CloseAbruptlyWithError(uint64_t a1, uint64_t a2)
{
  int v2;
  void (***v5)(_QWORD);
  _BYTE *v6;
  uint64_t v7;
  void **v8;
  __int128 v9;
  int v10;
  void (***v11)(_QWORD);
  _BYTE *v12;
  uint64_t v13;

  v2 = *(_DWORD *)(a1 + 136);
  if (v2 != 3)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 296) + 4) = 0;
    if (v2 != 2)
    {
      *(_DWORD *)(a1 + 136) = 2;
      v5 = *(void (****)(_QWORD))(a1 + 120);
      if (v5)
        (**v5)(v5);
      v6 = *(_BYTE **)(a1 + 216);
      if (v6)
      {
        if (*v6)
        {
          v7 = *(_QWORD *)(a1 + 224);
          if (v7)
            (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 24))(v7, a1, *(unsigned int *)(a1 + 136));
        }
      }
    }
    *(_DWORD *)(a1 + 144) = *(_DWORD *)a2;
    v8 = (void **)(a1 + 152);
    if (*(char *)(a1 + 175) < 0)
      operator delete(*v8);
    v9 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v8 = v9;
    *(_BYTE *)(a2 + 31) = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v10 = *(_DWORD *)(a2 + 35);
    *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 179) = v10;
    if (*(_DWORD *)(a1 + 136) != 3)
    {
      *(_DWORD *)(a1 + 136) = 3;
      v11 = *(void (****)(_QWORD))(a1 + 120);
      if (v11)
        (**v11)(v11);
      v12 = *(_BYTE **)(a1 + 216);
      if (v12 && *v12)
      {
        v13 = *(_QWORD *)(a1 + 224);
        if (v13)
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v13 + 24))(v13, a1, *(unsigned int *)(a1 + 136));
      }
    }
  }
}

_QWORD *webrtc::SctpDataChannel::MaybeSendOnBufferedAmountChanged(_QWORD *this)
{
  _BYTE *v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  BOOL v6;
  _BYTE *v7;
  _QWORD *v8;

  v1 = (_BYTE *)this[27];
  if (v1)
  {
    if (*v1)
    {
      v2 = this;
      this = (_QWORD *)this[28];
      if (this)
      {
        if (*((_BYTE *)v2 + 26))
        {
          if (v2[15])
          {
            this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*this + 32))(this, *((unsigned __int16 *)v2 + 12));
            v3 = v2[14];
            v4 = v3 - (_QWORD)this;
            if (v3 >= (unint64_t)this)
            {
              v5 = this;
              if (v3)
                v6 = this == 0;
              else
                v6 = 0;
              if (v6 || v4 > 0x19000)
              {
                v2[14] = this;
                (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v2[15] + 16))(v2[15], v4);
              }
              v7 = (_BYTE *)v2[27];
              if (v7 && *v7)
                this = (_QWORD *)v2[28];
              else
                this = 0;
              if (*((_BYTE *)v2 + 26))
              {
                if ((unint64_t)v5 >= 0x19000)
                  v8 = v5 - 12800;
                else
                  v8 = 0;
                return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(*this + 48))(this, *((unsigned __int16 *)v2 + 12), v8);
              }
              else
              {
                __break(1u);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void webrtc::SctpDataChannel::OnDataReceived(uint64_t a1, int a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *__p;
  __int128 v57;
  int v58;
  char v59;
  char v60;

  v5 = *(_DWORD *)(a1 + 232);
  if (a2 != 2)
  {
    if (v5 == 3)
      *(_DWORD *)(a1 + 232) = 4;
    v13 = a2 == 1;
    v14 = operator new();
    v15 = (uint64_t *)v14;
    v16 = *a3;
    *(_QWORD *)v14 = *a3;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 24);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = a3[2];
    *(_QWORD *)(v14 + 8) = a3[1];
    *(_QWORD *)(v14 + 16) = v19;
    *(_BYTE *)(v14 + 24) = v13;
    if (*(_DWORD *)(a1 + 136) == 1 && (v20 = *(_QWORD *)(a1 + 120)) != 0)
    {
      ++*(_DWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 208) += v19;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 8))(v20, v15);
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 288) + v19;
      if (v21 < 0x1000001)
      {
        v35 = *(_QWORD *)(a1 + 248);
        v36 = *(_QWORD *)(a1 + 256);
        v37 = ((v36 - v35) << 6) - 1;
        *(_QWORD *)(a1 + 288) = v21;
        if (v36 == v35)
          v37 = 0;
        v38 = *(_QWORD *)(a1 + 280);
        if (v37 == v38 + *(_QWORD *)(a1 + 272))
        {
          std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity(a1 + 240);
          v38 = *(_QWORD *)(a1 + 280);
          v35 = *(_QWORD *)(a1 + 248);
          v36 = *(_QWORD *)(a1 + 256);
        }
        if (v36 != v35)
        {
          v39 = *(_QWORD *)(a1 + 272) + v38;
          v40 = *(_QWORD *)(v35 + ((v39 >> 6) & 0x3FFFFFFFFFFFFF8));
          if (v40)
          {
            *(_QWORD *)(v40 + 8 * (v39 & 0x1FF)) = v15;
            *(_QWORD *)(a1 + 280) = v38 + 1;
            return;
          }
        }
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_data_channel.cc");
      webrtc::PacketQueue::Clear((webrtc::PacketQueue *)(a1 + 240));
      v55 = 9;
      v29 = (char *)operator new(0x38uLL);
      __p = v29;
      v57 = xmmword_208F0BCB0;
      if (v29 <= "Queued received data exceeds the max buffer size."
        && v29 + 49 > "Queued received data exceeds the max buffer size.")
      {
        goto LABEL_49;
      }
      strcpy(v29, "Queued received data exceeds the max buffer size.");
      v58 = 0;
      v59 = 0;
      v60 = 0;
      webrtc::SctpDataChannel::CloseAbruptlyWithError(a1, (uint64_t)&v55);
      if (SHIBYTE(v57) < 0)
        operator delete(__p);
    }
    v30 = *v15;
    if (*v15)
    {
      v31 = (unsigned int *)(v30 + 24);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = *(_QWORD *)(v30 + 16);
        *(_QWORD *)(v30 + 16) = 0;
        if (v34)
          MEMORY[0x20BD0ADD4](v34, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v30, 0x1010C40EE34DA14);
      }
    }
LABEL_50:
    JUMPOUT(0x20BD0ADECLL);
  }
  if (v5 != 3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
    if (*(_BYTE *)(a1 + 26))
      goto LABEL_48;
    goto LABEL_49;
  }
  if (!a3[2])
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_utils.cc");
LABEL_46:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 26))
      {
LABEL_48:
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_data_channel.cc");
        return;
      }
      goto LABEL_49;
    }
    return;
  }
  if (*(_BYTE *)(*(_QWORD *)(*a3 + 16) + a3[1]) != 2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v48, v49, v50, v51, v52, v53, v54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_utils.cc");
    goto LABEL_46;
  }
  *(_DWORD *)(a1 + 232) = 4;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 26))
      goto LABEL_48;
    goto LABEL_49;
  }
}

void webrtc::SctpDataChannel::CloseAbruptlyWithDataChannelFailure(uint64_t a1, char *__src)
{
  char *v2;
  size_t v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v11;
  void *__p[2];
  unint64_t v13;
  _DWORD v14[2];
  int v15;
  __int128 v16;
  unint64_t v17;
  _BYTE v18[7];

  v2 = __src;
  if (__src[23] < 0)
  {
    v4 = *((_QWORD *)__src + 1);
    if ((v4 & 0x8000000000000000) != 0 || ((v2 = *(char **)__src, v4) ? (v5 = v2 == 0) : (v5 = 0), v5))
    {
LABEL_25:
      __break(1u);
LABEL_26:
      abort();
    }
    v15 = 11;
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
  }
  else
  {
    v4 = __src[23];
    v15 = 11;
  }
  if (v4 > 0x16)
  {
    v7 = (v4 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (char *)operator new(v7 + 1);
    *((_QWORD *)&v16 + 1) = v4;
    v17 = v8 | 0x8000000000000000;
    *(_QWORD *)&v16 = v6;
  }
  else
  {
    HIBYTE(v17) = v4;
    v6 = (char *)&v16;
  }
  v9 = &v6[v4];
  if (v6 <= v2 && v9 > v2)
    goto LABEL_25;
  if (v4)
    memmove(v6, v2, v4);
  *v9 = 0;
  v18[4] = 0;
  v18[6] = 0;
  *(_DWORD *)v18 = 1;
  v11 = v15;
  *(_OWORD *)__p = v16;
  v13 = v17;
  v16 = 0uLL;
  v17 = 0;
  v14[0] = 1;
  *(_DWORD *)((char *)v14 + 3) = *(_DWORD *)&v18[3];
  webrtc::SctpDataChannel::CloseAbruptlyWithError(a1, (uint64_t)&v11);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return;
LABEL_24:
    operator delete((void *)v16);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    goto LABEL_24;
}

void webrtc::SctpDataChannel::SendControlMessage(webrtc::SctpDataChannel *this, const rtc::CopyOnWriteBuffer *a2)
{
  int v3;
  BOOL v4;
  char v5;
  _BYTE *v6;
  void (***v7)(uint64_t *__return_ptr, _QWORD, _QWORD, int *, const rtc::CopyOnWriteBuffer *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  std::string __p;
  _DWORD v20[2];
  __int128 v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  _DWORD v25[2];
  int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v3 = *((_DWORD *)this + 58);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  if (*((_BYTE *)this + 105))
    v4 = 1;
  else
    v4 = v3 == 1;
  v5 = v4;
  v27 = v5;
  v26 = 2;
  v6 = (_BYTE *)*((_QWORD *)this + 27);
  if (v6 && *v6)
  {
    v7 = (void (***)(uint64_t *__return_ptr, _QWORD, _QWORD, int *, const rtc::CopyOnWriteBuffer *))*((_QWORD *)this + 28);
    if (!*((_BYTE *)this + 26))
      goto LABEL_29;
  }
  else
  {
    v7 = 0;
    if (!*((_BYTE *)this + 26))
    {
LABEL_29:
      __break(1u);
      return;
    }
  }
  (**v7)(&v22, v7, *((unsigned __int16 *)this + 12), &v26, a2);
  if (!(_DWORD)v22)
  {
    v17 = *((_DWORD *)this + 58);
    if (v17 == 1)
    {
      *((_DWORD *)this + 58) = 3;
      if (SHIBYTE(v24) < 0)
        goto LABEL_21;
      return;
    }
    if (v17 == 2)
      *((_DWORD *)this + 58) = 4;
    goto LABEL_25;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_data_channel.cc");
  }
  v15 = (char *)operator new(0x28uLL);
  v16 = v15;
  if (v15 <= "Failed to send a CONTROL message" && v15 + 32 > "Failed to send a CONTROL message")
    goto LABEL_29;
  strcpy(v15, "Failed to send a CONTROL message");
  if (SHIBYTE(v24) < 0)
    operator delete(v23);
  v23 = v16;
  v24 = xmmword_208F04EE0;
  v18 = v22;
  std::string::__init_copy_ctor_external(&__p, v16, 0x20uLL);
  v20[0] = v25[0];
  *(_DWORD *)((char *)v20 + 3) = *(_DWORD *)((char *)v25 + 3);
  webrtc::SctpDataChannel::CloseAbruptlyWithError((uint64_t)this, (uint64_t)&v18);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_25:
    if (SHIBYTE(v24) < 0)
      goto LABEL_21;
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24) < 0)
LABEL_21:
    operator delete(v23);
}

uint64_t webrtc::SctpDataChannel::ObserverAdapter::OnStateChange(webrtc::SctpDataChannel::ObserverAdapter *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  char v8;
  char v9;
  _QWORD v10[2];
  uint64_t (*v11)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v12)(uint64_t);

  v2 = *((_QWORD *)this + 3);
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = operator new();
  *(_QWORD *)v5 = this;
  *(_BYTE *)(v5 + 8) = 1;
  *(_DWORD *)(v5 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 144))(*((_QWORD *)this + 2));
  v6 = (_QWORD *)operator new();
  *v6 = v3;
  v6[1] = this;
  v6[2] = v5;
  v6[3] = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::SctpDataChannel::ObserverAdapter::OnStateChange(void)::{lambda(void)#2}>;
  v6[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::SctpDataChannel::ObserverAdapter::OnStateChange(void)::{lambda(void)#2} &&>;
  v10[0] = v6;
  v11 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v12 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v2 + 8))(v2, v10, &v9, &v8);
  return v11(1, v10, v10);
}

uint64_t webrtc::SctpDataChannel::ObserverAdapter::OnMessage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v16;
  char v17;
  _QWORD v18[2];
  uint64_t (*v19)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v20)(uint64_t);

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int **)(a1 + 32);
  if (v4)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *a2;
  if (*a2)
  {
    v7 = (unsigned int *)(v6 + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a2[1];
  v10 = a2[2];
  v11 = *((_BYTE *)a2 + 24);
  v12 = operator new();
  *(_QWORD *)v12 = a1;
  *(_BYTE *)(v12 + 8) = 1;
  *(_DWORD *)(v12 + 12) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16));
  v13 = operator new();
  *(_QWORD *)v13 = a1;
  *(_QWORD *)(v13 + 8) = v6;
  *(_QWORD *)(v13 + 16) = v9;
  *(_QWORD *)(v13 + 24) = v10;
  *(_BYTE *)(v13 + 32) = v11;
  *(_QWORD *)(v13 + 40) = v12;
  v14 = (_QWORD *)operator new();
  *v14 = v4;
  v14[1] = v13;
  v14[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::SctpDataChannel::ObserverAdapter::OnMessage(webrtc::DataBuffer const&)::{lambda(void)#2}>;
  v14[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::SctpDataChannel::ObserverAdapter::OnMessage(webrtc::DataBuffer const&)::{lambda(void)#2} &&>;
  v18[0] = v14;
  v19 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v20 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v18, &v17, &v16);
  return v19(1, v18, v18);
}

uint64_t webrtc::SctpDataChannel::ObserverAdapter::OnBufferedAmountChange(webrtc::SctpDataChannel::ObserverAdapter *this, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;
  char v12;
  _QWORD v13[2];
  uint64_t (*v14)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v15)(uint64_t);

  v4 = *((_QWORD *)this + 3);
  v5 = (unsigned int *)*((_QWORD *)this + 4);
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new();
  *(_QWORD *)v7 = this;
  *(_BYTE *)(v7 + 8) = 1;
  *(_DWORD *)(v7 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 144))(*((_QWORD *)this + 2));
  v8 = (_QWORD *)operator new();
  *v8 = this;
  v8[1] = a2;
  v8[2] = v7;
  v9 = (_QWORD *)operator new();
  *v9 = v5;
  v9[1] = v8;
  v9[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::SctpDataChannel::ObserverAdapter::OnBufferedAmountChange(unsigned long long)::{lambda(void)#2}>;
  v9[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::SctpDataChannel::ObserverAdapter::OnBufferedAmountChange(unsigned long long)::{lambda(void)#2} &&>;
  v13[0] = v9;
  v14 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v15 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v13, &v12, &v11);
  return v14(1, v13, v13);
}

uint64_t webrtc::SctpDataChannel::ObserverAdapter::IsOkToCallOnTheNetworkThread(webrtc::SctpDataChannel::ObserverAdapter *this)
{
  return 1;
}

void webrtc::SctpDataChannel::ObserverAdapter::~ObserverAdapter(webrtc::SctpDataChannel::ObserverAdapter *this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_24C0BFD68;
  v2 = (unsigned int *)*((_QWORD *)this + 5);
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
  }
  v5 = *((_QWORD *)this + 4);
  *(_BYTE *)(v5 + 4) = 0;
  do
  {
    v6 = __ldaxr((unsigned int *)v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)v5));
  if (!v7)
    MEMORY[0x20BD0ADEC]();
}

{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_24C0BFD68;
  v2 = (unsigned int *)*((_QWORD *)this + 5);
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
  }
  v5 = *((_QWORD *)this + 4);
  *(_BYTE *)(v5 + 4) = 0;
  do
  {
    v6 = __ldaxr((unsigned int *)v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)v5));
  if (!v7)
    MEMORY[0x20BD0ADEC]();
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t *absl::internal_any_invocable::LocalInvoker<false,void,webrtc::SctpDataChannel::ObserverAdapter::OnStateChange(void)::{lambda(void)#2} &&>(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *result;
  v2 = result[1];
  *(_BYTE *)(v2 + 8) = 0;
  v3 = *(_QWORD **)v2;
  v3[6] = v2;
  if (v3[1])
  {
    if (*(_BYTE *)(v3[5] + 4))
      return (uint64_t *)(***(uint64_t (****)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 8));
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::SctpDataChannel::ObserverAdapter::OnStateChange(void)::{lambda(void)#2}>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  if ((result & 1) == 0)
  {
    *a3 = *a2;
    v3 = a2[1];
    a2[1] = 0;
    a3[1] = v3;
  }
  v4 = a2[1];
  a2[1] = 0;
  if (v4)
  {
    if (*(_BYTE *)(v4 + 8))
    {
      if ((*(char *)(v4 + 47) & 0x80000000) == 0)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v4 + 48) = 0;
      if ((*(char *)(v4 + 47) & 0x80000000) == 0)
LABEL_10:
        JUMPOUT(0x20BD0ADECLL);
    }
    operator delete(*(void **)(v4 + 24));
    goto LABEL_10;
  }
  return result;
}

uint64_t **absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::SctpDataChannel::ObserverAdapter::OnMessage(webrtc::DataBuffer const&)::{lambda(void)#2} &&>(uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *result;
  v2 = **result;
  v3 = (*result)[5];
  *(_BYTE *)(v3 + 8) = 0;
  v4 = *(_QWORD **)v3;
  v4[6] = v3;
  if (v4[1])
  {
    if (*(_BYTE *)(v4[5] + 4))
      return (uint64_t **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v2 + 8) + 8))(*(_QWORD *)(v2 + 8), v1 + 1);
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::SctpDataChannel::ObserverAdapter::OnMessage(webrtc::DataBuffer const&)::{lambda(void)#2}>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v4)
      {
        if (!*(_BYTE *)(v4 + 8))
          *(_QWORD *)(*(_QWORD *)v4 + 48) = 0;
        if (*(char *)(v4 + 47) < 0)
          operator delete(*(void **)(v4 + 24));
        MEMORY[0x20BD0ADEC](v4, 0x1072C4086750BB0);
      }
      v5 = *(_QWORD *)(v3 + 8);
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 24);
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          v9 = *(_QWORD *)(v5 + 16);
          *(_QWORD *)(v5 + 16) = 0;
          if (v9)
            MEMORY[0x20BD0ADD4](v9, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v5, 0x1010C40EE34DA14);
        }
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t **absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::SctpDataChannel::ObserverAdapter::OnBufferedAmountChange(unsigned long long)::{lambda(void)#2} &&>(uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *result;
  v2 = **result;
  v3 = (*result)[2];
  *(_BYTE *)(v3 + 8) = 0;
  v4 = *(_QWORD **)v3;
  v4[6] = v3;
  if (v4[1])
  {
    if (*(_BYTE *)(v4[5] + 4))
      return (uint64_t **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8) + 16))(*(_QWORD *)(v2 + 8), v1[1]);
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::SctpDataChannel::ObserverAdapter::OnBufferedAmountChange(unsigned long long)::{lambda(void)#2}>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      if (!v4)
        goto LABEL_12;
      if (*(_BYTE *)(v4 + 8))
      {
        if ((*(char *)(v4 + 47) & 0x80000000) == 0)
        {
LABEL_6:
          MEMORY[0x20BD0ADEC](v4, 0x1072C4086750BB0);
LABEL_12:
          JUMPOUT(0x20BD0ADECLL);
        }
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v4 + 48) = 0;
        if ((*(char *)(v4 + 47) & 0x80000000) == 0)
          goto LABEL_6;
      }
      operator delete(*(void **)(v4 + 24));
      goto LABEL_6;
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::SctpDataChannel::ObserverAdapter::DeleteOnSignalingThread(std::unique_ptr<webrtc::SctpDataChannel::ObserverAdapter>)::{lambda(void)#1}>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *a2 = 0;
    *a3 = v3;
  }
  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

char *std::vector<webrtc::StreamId>::emplace<webrtc::StreamId const&>(void **a1, _BYTE *a2, __int16 *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  __int16 v11;
  int64_t v12;
  uint64_t v13;
  __int16 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  __int128 *v38;
  unint64_t v39;
  __int128 v40;
  __int16 v41;
  char *v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _OWORD *v48;
  __int128 *v49;
  unint64_t v50;
  __int128 v51;
  __int16 v52;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 1;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 != (char *)v5)
    {
      v11 = *a3;
      v12 = v5 - (_QWORD)(v9 + 2);
      v13 = v12 >> 1;
      v14 = (__int16 *)(v5 - 2);
      if (v5 < 2)
      {
        v18 = a1[1];
      }
      else
      {
        v15 = (v7 & 0xFFFFFFFFFFFFFFFELL) + v12;
        v16 = v15 + v6 + 2;
        if (v5 > v16)
          v16 = (unint64_t)a1[1];
        v17 = v16 + ~v6 - v15;
        if (v17 >= 0x1E)
        {
          v18 = a1[1];
          if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFFELL) + 2 - v6] >= 0x20)
          {
            v46 = (v17 >> 1) + 1;
            v47 = 2 * (v46 & 0xFFFFFFFFFFFFFFF0);
            v14 = (__int16 *)((char *)v14 + v47);
            v18 = (_WORD *)(v5 + v47);
            v48 = (_OWORD *)(v5 + 16);
            v49 = (__int128 *)(2 * v13 + 2 * v8 + v6 + 16);
            v50 = v46 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v51 = *v49;
              *(v48 - 1) = *(v49 - 1);
              *v48 = v51;
              v48 += 2;
              v49 += 2;
              v50 -= 16;
            }
            while (v50);
            if (v46 == (v46 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_53;
          }
        }
        else
        {
          v18 = a1[1];
        }
        do
        {
          v52 = *v14++;
          *v18++ = v52;
        }
        while ((unint64_t)v14 < v5);
      }
LABEL_53:
      a1[1] = v18;
      if ((char *)v5 != v9 + 2)
        memmove((void *)(v5 - 2 * v13), v9, v12);
      *(_WORD *)v9 = v11;
      return v9;
    }
    if (v6)
    {
      *(_WORD *)v9 = *a3;
      a1[1] = v9 + 2;
      return v9;
    }
    goto LABEL_57;
  }
  v19 = v5 - v6;
  if (v19 <= -3)
    goto LABEL_58;
  v21 = v19 >> 1;
  v22 = v10 - v6;
  if (v22 <= v21 + 1)
    v23 = v21 + 1;
  else
    v23 = v22;
  if (v22 >= 0x7FFFFFFFFFFFFFFELL)
    v24 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v24 = v23;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_59;
    v25 = (char *)operator new(2 * v24);
    v26 = &v25[2 * v8];
    if (v8 != v24)
      goto LABEL_26;
  }
  else
  {
    v25 = 0;
    v26 = (char *)(2 * v8);
    if (v8)
    {
LABEL_26:
      if (!v26)
      {
LABEL_57:
        __break(1u);
LABEL_58:
        abort();
      }
      v28 = &v25[2 * v24];
      goto LABEL_28;
    }
  }
  if (v7 >= 1)
  {
    v27 = v8 + 2;
    if (v8 >= -1)
      v27 = v8 + 1;
    v26 -= v27 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_26;
  }
  if ((_BYTE *)v6 == a2)
    v44 = 1;
  else
    v44 = v7;
  if (v44 < 0)
LABEL_59:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v45 = 2 * v44;
  v26 = (char *)operator new(2 * v44);
  v28 = &v26[v45];
  if (v25)
  {
    operator delete(v25);
    v29 = (char *)*a1;
    *(_WORD *)v26 = *a3;
    v30 = v26 + 2;
    v31 = v26;
    if (v29 != v9)
      goto LABEL_29;
    goto LABEL_35;
  }
LABEL_28:
  v29 = (char *)v6;
  *(_WORD *)v26 = *a3;
  v30 = v26 + 2;
  v31 = v26;
  if ((char *)v6 != v9)
  {
LABEL_29:
    v32 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + v6);
    v33 = v32 - v29 - 2;
    v34 = v9;
    v31 = v26;
    if (v33 < 0x1E)
      goto LABEL_62;
    v34 = v9;
    v31 = v26;
    if ((unint64_t)(v32 - v26) < 0x20)
      goto LABEL_62;
    v35 = (v33 >> 1) + 1;
    v36 = 2 * (v35 & 0xFFFFFFFFFFFFFFF0);
    v34 = &v9[-v36];
    v31 = &v26[-v36];
    v37 = v26 - 16;
    v38 = (__int128 *)(v6 + 2 * v8 - 16);
    v39 = v35 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v40 = *v38;
      *((_OWORD *)v37 - 1) = *(v38 - 1);
      *(_OWORD *)v37 = v40;
      v37 -= 32;
      v38 -= 2;
      v39 -= 16;
    }
    while (v39);
    if (v35 != (v35 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_62:
      do
      {
        v41 = *((_WORD *)v34 - 1);
        v34 -= 2;
        *((_WORD *)v31 - 1) = v41;
        v31 -= 2;
      }
      while (v34 != v29);
    }
  }
LABEL_35:
  v42 = (char *)a1[1];
  v43 = v42 - v9;
  if (v42 != v9)
  {
    memmove(v30, v9, v42 - v9);
    v29 = (char *)*a1;
  }
  *a1 = v31;
  a1[1] = &v30[v43];
  a1[2] = v28;
  if (v29)
    operator delete(v29);
  return v26;
}

uint64_t rtc::RefCountedObject<webrtc::SctpDataChannel>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 304);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::SctpDataChannel>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 76;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::SctpDataChannel>::~RefCountedObject(webrtc::SctpDataChannel *a1)
{
  webrtc::SctpDataChannel::~SctpDataChannel(a1);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::SctpDataChannel>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 304));
  return v1 == 1;
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 8;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>>::~RefCountedObject(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0BFF88;
  v12 = a1;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[1];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void rtc::RefCountedObject<webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>>::~RefCountedObject(_QWORD *a1)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::RegisterObserver(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::UnregisterObserver(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::label(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::reliable(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::ordered(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::maxRetransmitTime(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::maxRetransmits(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::maxRetransmitsOpt(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::maxPacketLifeTime(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::protocol(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::negotiated(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 112))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::id(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F16E70;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DataChannelInterface,int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::priority(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::state(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::error(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 144))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::messages_sent(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F04E70;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DataChannelInterface,unsigned int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::bytes_sent(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F04E80;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DataChannelInterface,unsigned long long>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::messages_received(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F04E90;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DataChannelInterface,unsigned int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::bytes_received(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F04EA0;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DataChannelInterface,unsigned long long>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::buffered_amount(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F16F00;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DataChannelInterface,unsigned long long>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::Close(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 24);
  v14 = xmmword_208F16F10;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DataChannelInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::Send(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  pthread_mutex_t v19;
  pthread_cond_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F1B070;
  v18 = a2;
  rtc::Event::Event((rtc::Event *)&v19, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v16);
    v6 = v4(v5, v18);
    v17 = v6;
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DataChannelInterface,BOOL,webrtc::DataBuffer const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v19, v7, v8);
    v6 = v17 != 0;
  }
  pthread_mutex_destroy(&v19);
  pthread_cond_destroy(&v20);
  return v6;
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::SendAsync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE v11[16];
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  char v15;

  v4 = *(_QWORD *)(a1 + 24);
  v13 = *a2;
  v14 = *(_OWORD *)(a2 + 1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v15 = *((_BYTE *)a2 + 24);
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a3 + 16))(0, a3, v11);
  v12 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a3 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v4 + 208))(v4, &v13, v11);
  result = ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v12)(1, v11, v11);
  v6 = v13;
  if (v13)
  {
    v7 = (unsigned int *)(v13 + 24);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      v10 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      if (v10)
        MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
      return MEMORY[0x20BD0ADEC](v6, 0x1010C40EE34DA14);
    }
  }
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 32));
  return v1 == 1;
}

uint64_t webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::`anonymous namespace'::DataChannelProxyWithInternal<webrtc::DataChannelInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DataChannelInterface,int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DataChannelInterface,unsigned int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DataChannelInterface,unsigned long long>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_QWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DataChannelInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DataChannelInterface,BOOL,webrtc::DataBuffer const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v2);
  *(_BYTE *)(v1 + 24) = v2(v5, v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SctpDataChannel::ObserverAdapter * rtc::Thread::BlockingCall<webrtc::SctpDataChannel::RegisterObserver(webrtc::DataChannelObserver *)::$_0,webrtc::SctpDataChannel::ObserverAdapter *,void>(webrtc::SctpDataChannel::RegisterObserver(webrtc::DataChannelObserver *)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(_QWORD **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a1[1];
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(v4 + 8) = *(_QWORD *)v2[1];
  result = operator new();
  *(_DWORD *)result = 0;
  *(_BYTE *)(result + 4) = 1;
  do
    v6 = __ldxr((unsigned int *)result);
  while (__stxr(v6 + 1, (unsigned int *)result));
  v7 = *(_QWORD *)(v4 + 32);
  *(_BYTE *)(v7 + 4) = 0;
  *(_QWORD *)(v4 + 32) = result;
  do
  {
    v8 = __ldaxr((unsigned int *)v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, (unsigned int *)v7));
  if (!v9)
    result = MEMORY[0x20BD0ADEC](v7, 0x1000C4090D0E795);
  **a1 = *(_QWORD *)(v3 + 128);
  return result;
}

_QWORD *rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SctpDataChannel::RegisterObserver(webrtc::DataChannelObserver *)::$_1>(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = *result;
  v1 = result[1];
  *(_QWORD *)(*result + 120) = v1;
  if (v1 && *(_DWORD *)(v2 + 136) == 1 && *(_QWORD *)(v2 + 280))
  {
    do
    {
      webrtc::PacketQueue::PopFront((webrtc::PacketQueue *)(v2 + 240), &v9);
      ++*(_DWORD *)(v2 + 200);
      v3 = v9;
      *(_QWORD *)(v2 + 208) += v9[2];
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v2 + 120) + 8))(*(_QWORD *)(v2 + 120), v3);
      v9 = 0;
      v4 = *v3;
      if (*v3)
      {
        v5 = (unsigned int *)(v4 + 24);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          v8 = *(_QWORD *)(v4 + 16);
          *(_QWORD *)(v4 + 16) = 0;
          if (v8)
            MEMORY[0x20BD0ADD4](v8, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v4, 0x1010C40EE34DA14);
        }
      }
      result = (_QWORD *)MEMORY[0x20BD0ADEC](v3, 0x1020C4059E634C0);
    }
    while (*(_QWORD *)(v2 + 280));
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SctpDataChannel::UnregisterObserver(void)::$_0>(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)result + 120) = 0;
  return result;
}

unsigned int *rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SctpDataChannel::UnregisterObserver(void)::$_1>(unsigned int *result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *(_QWORD *)(*(_QWORD *)result + 128);
  if (v1)
  {
    *(_QWORD *)(v1 + 8) = 0;
    result = (unsigned int *)operator new();
    *result = 0;
    *((_BYTE *)result + 4) = 1;
    do
      v2 = __ldxr(result);
    while (__stxr(v2 + 1, result));
    v3 = *(_QWORD *)(v1 + 32);
    *(_BYTE *)(v3 + 4) = 0;
    *(_QWORD *)(v1 + 32) = result;
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
      JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::DataChannelInterface::DataState rtc::Thread::BlockingCall<webrtc::SctpDataChannel::state(void)::$_0,webrtc::DataChannelInterface::DataState,void>(webrtc::SctpDataChannel::state(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t result)
{
  **(_DWORD **)result = *(_DWORD *)(**(_QWORD **)(result + 8) + 136);
  return result;
}

__n128 rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::SctpDataChannel::error(void)::$_0,webrtc::RTCError,void>(webrtc::SctpDataChannel::error(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  void **v5;
  __n128 result;
  int v7;
  int v8;
  std::string v9;
  _DWORD v10[2];

  v2 = *(_QWORD *)a1[1];
  v3 = *(_DWORD *)(v2 + 144);
  v8 = v3;
  if (*(char *)(v2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(v2 + 152), *(_QWORD *)(v2 + 160));
    v3 = v8;
  }
  else
  {
    v9 = *(std::string *)(v2 + 152);
  }
  v10[0] = *(_DWORD *)(v2 + 176);
  *(_DWORD *)((char *)v10 + 3) = *(_DWORD *)(v2 + 179);
  v4 = *a1;
  *(_DWORD *)v4 = v3;
  v5 = (void **)(v4 + 8);
  if (*(char *)(v4 + 31) < 0)
    operator delete(*v5);
  result = *(__n128 *)&v9.__r_.__value_.__l.__data_;
  *(_QWORD *)(v4 + 24) = *((_QWORD *)&v9.__r_.__value_.__l + 2);
  *(__n128 *)v5 = result;
  v7 = v10[0];
  *(_DWORD *)(v4 + 35) = *(_DWORD *)((char *)v10 + 3);
  *(_DWORD *)(v4 + 32) = v7;
  return result;
}

void _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc15SctpDataChannel9SendAsyncENS2_10DataBufferENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEE3__0JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  void (*v11)(uint64_t *, int *);
  int v12;
  std::string __p;
  _DWORD v14[2];
  _QWORD v15[3];
  char v16;
  _DWORD v17[8];
  _DWORD v18[2];

  v1 = *a1;
  v3 = **a1;
  v2 = (*a1)[1];
  v1[1] = 0;
  v4 = v1[2];
  v5 = v1[3];
  v15[0] = v2;
  v15[1] = v4;
  v15[2] = v5;
  v1[2] = 0;
  v1[3] = 0;
  v16 = *((_BYTE *)v1 + 32);
  *(_QWORD *)(v3 + 112) += v5;
  if (*(_DWORD *)(v3 + 136) == 1)
  {
    webrtc::SctpDataChannel::SendDataMessage((uint64_t)v17, v3, (uint64_t)v15);
    v2 = v15[0];
    if (!v15[0])
      goto LABEL_13;
    goto LABEL_7;
  }
  v6 = 6;
  *(_DWORD *)(v3 + 144) = 6;
  if (*(char *)(v3 + 175) < 0)
  {
    operator delete(*(void **)(v3 + 152));
    v6 = *(_DWORD *)(v3 + 144);
  }
  *(_BYTE *)(v3 + 182) = 0;
  *(_QWORD *)(v3 + 173) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  v17[0] = v6;
  memset(&v17[2], 0, 24);
  v18[0] = *(_DWORD *)(v3 + 176);
  *(_DWORD *)((char *)v18 + 3) = *(_DWORD *)(v3 + 179);
  if (v2)
  {
LABEL_7:
    v7 = (unsigned int *)(v2 + 24);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      v10 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      if (v10)
        MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40EE34DA14);
    }
  }
LABEL_13:
  v11 = (void (*)(uint64_t *, int *))v1[8];
  if (!v11)
    goto LABEL_18;
  v12 = v17[0];
  if (SHIBYTE(v17[7]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v17[2], *(std::string::size_type *)&v17[4]);
    v11 = (void (*)(uint64_t *, int *))v1[8];
  }
  else
  {
    __p = *(std::string *)&v17[2];
  }
  v14[0] = v18[0];
  *(_DWORD *)((char *)v14 + 3) = *(_DWORD *)((char *)v18 + 3);
  v11(v1 + 5, &v12);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v17[7]) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(*(void **)&v17[2]);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17[7]) < 0)
    goto LABEL_21;
}

uint64_t _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc15SctpDataChannel9SendAsyncENS2_10DataBufferENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEE3__0EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 56))(1, v3 + 40, v3 + 40);
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 24);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          v8 = *(_QWORD *)(v4 + 16);
          *(_QWORD *)(v4 + 16) = 0;
          if (v8)
            MEMORY[0x20BD0ADD4](v8, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v4, 0x1010C40EE34DA14);
        }
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t dcsctp::SctpPacket::Builder::Add(uint64_t a1, uint64_t a2)
{
  char **v4;
  void *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v5 = *(void **)(a1 + 16);
  v4 = (char **)(a1 + 16);
  if (v5 != *(void **)(a1 + 24))
    goto LABEL_17;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 32) - (_QWORD)v5 >= v6)
  {
    v14 = 0;
    goto LABEL_8;
  }
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_24;
  v7 = (char *)operator new(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = &v7[v6];
  if (!v5)
  {
    v14 = 0;
    goto LABEL_8;
  }
  operator delete(v5);
  v13 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v14 = v12 - v13;
  if ((unint64_t)(v12 - v13) <= 0xB)
  {
LABEL_8:
    std::vector<unsigned char>::__append(v4, 12 - v14);
    v13 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 24);
    goto LABEL_12;
  }
  if (v14 != 12)
  {
    v12 = v13 + 12;
    *(_QWORD *)(a1 + 24) = v13 + 12;
  }
LABEL_12:
  if ((unint64_t)(v12 - v13) <= 0xB)
  {
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v8, v9, v10, v11, v20);
LABEL_24:
    abort();
  }
  if (v12 == v13)
    v15 = 0;
  else
    v15 = v13;
  *(_WORD *)v15 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16;
  *(_WORD *)(v15 + 2) = bswap32(*(unsigned __int16 *)(a1 + 6)) >> 16;
  *(_DWORD *)(v15 + 4) = bswap32(*(_DWORD *)a1);
LABEL_17:
  (*(void (**)(uint64_t, char **))(*(_QWORD *)a2 + 16))(a2, v4);
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24) - v16;
  if ((v17 & 3) == 0)
    return a1;
  v18 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v18 > v17)
  {
    std::vector<unsigned char>::__append(v4, v18 - v17);
    return a1;
  }
  if (v18 >= v17)
    return a1;
  *(_QWORD *)(a1 + 24) = v16 + v18;
  return a1;
}

void dcsctp::SctpPacket::Parse(size_t __sz@<X1>, unsigned __int16 *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  size_t v23;
  char *v24;
  unsigned int v25;
  size_t v26;
  char v28;
  char v29;
  char *v30;
  size_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  std::string *v37;
  uint64_t v38;
  unsigned int v39;
  size_t v40;
  unsigned int v41;
  unsigned int v42;
  char *__p;
  int v44;

  if (__sz - 0x10000 <= 0xFFFFFFFFFFFF000FLL)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 64) = 0;
    return;
  }
  if ((__sz & 0x8000000000000000) != 0)
LABEL_52:
    abort();
  v8 = a2[1];
  v41 = *a2;
  v42 = *((_DWORD *)a2 + 1);
  v9 = *((unsigned __int8 *)a2 + 8);
  v10 = *((unsigned __int8 *)a2 + 9);
  v11 = *((unsigned __int8 *)a2 + 10);
  v12 = *((unsigned __int8 *)a2 + 11);
  v44 = (v9 << 24) | (v10 << 16) | (v11 << 8) | v12;
  v13 = (char *)operator new(__sz);
  memcpy(v13, a2, __sz);
  if (!*(_BYTE *)(a3 + 167) && (!*(_DWORD *)(a3 + 168) || v44))
  {
    if (a2 == (unsigned __int16 *)((char *)a2 + __sz))
      v18 = 0;
    else
      v18 = v13;
    if (__sz <= 0xB)
    {
      v37 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v14, v15, v16, v17, v38);
      webrtc::SctpTransport::SctpTransport(v37);
      return;
    }
    *((_DWORD *)v18 + 2) = 0;
    if (bswap32(crc32c::ExtendPortable(0, (const unsigned __int8 *)v18, (const unsigned __int8 *)__sz)) != v44)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 64) = 0;
LABEL_51:
      operator delete(v13);
      return;
    }
    v18[8] = v9;
    v18[9] = v10;
    v18[10] = v11;
    v18[11] = v12;
  }
  v39 = v8;
  v19 = (char *)operator new(0x60uLL);
  v20 = v19;
  v21 = v19 + 96;
  v40 = __sz;
  __p = v13;
  if (__sz >= 0xD)
  {
    v22 = v13 + 12;
    if (__sz - 12 >= __sz)
      v23 = __sz;
    else
      v23 = __sz - 12;
    v24 = v19;
    while (v23 >= 4)
    {
      v25 = (bswap32(*((unsigned __int16 *)v22 + 1)) >> 16) + 3;
      v26 = (unsigned __int16)v25 & 0xFFFC;
      if ((v25 & 0xFFFC) == 0 || v23 < v26)
        break;
      v28 = *v22;
      v29 = v22[1];
      if (v24 >= v21)
      {
        v32 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v20) >> 3) + 1;
        if (v32 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_52;
        if (0x5555555555555556 * ((v21 - v20) >> 3) > v32)
          v32 = 0x5555555555555556 * ((v21 - v20) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3) >= 0x555555555555555)
          v32 = 0xAAAAAAAAAAAAAAALL;
        if (!v32)
        {
          __break(1u);
LABEL_54:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
        if (v32 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_54;
        v33 = 24 * v32;
        v34 = (char *)operator new(24 * v32);
        v35 = &v34[8 * ((v24 - v20) >> 3)];
        *v35 = v28;
        v35[1] = v29;
        v21 = &v34[v33];
        *((_QWORD *)v35 + 1) = v22;
        *((_QWORD *)v35 + 2) = v26;
        v30 = v35 + 24;
        if (v24 == v20)
          goto LABEL_37;
        do
        {
          v36 = *(_OWORD *)(v24 - 24);
          *((_QWORD *)v35 - 1) = *((_QWORD *)v24 - 1);
          *(_OWORD *)(v35 - 24) = v36;
          v35 -= 24;
          v24 -= 24;
        }
        while (v24 != v20);
        if (v20)
LABEL_37:
          operator delete(v20);
        v20 = v35;
        v31 = v23 - v26;
        if (v23 <= v26)
          goto LABEL_47;
      }
      else
      {
        *v24 = v28;
        v24[1] = v29;
        v30 = v24 + 24;
        *((_QWORD *)v24 + 1) = v22;
        *((_QWORD *)v24 + 2) = v26;
        v31 = v23 - v26;
        if (v23 <= v26)
          goto LABEL_47;
      }
      if (v31 < v23)
        v23 = v31;
      if (v23)
        v22 += v26;
      else
        v22 = 0;
      v24 = v30;
      if (!v23)
        goto LABEL_47;
    }
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 64) = 0;
    v13 = __p;
    if (v20)
      operator delete(v20);
    goto LABEL_51;
  }
  v30 = v19;
LABEL_47:
  *(_WORD *)a4 = bswap32(v41) >> 16;
  *(_WORD *)(a4 + 2) = bswap32(v39) >> 16;
  *(_DWORD *)(a4 + 4) = bswap32(v42);
  *(_DWORD *)(a4 + 8) = v44;
  *(_QWORD *)(a4 + 16) = __p;
  *(_QWORD *)(a4 + 24) = &__p[v40];
  *(_QWORD *)(a4 + 32) = &__p[v40];
  *(_QWORD *)(a4 + 40) = v20;
  *(_QWORD *)(a4 + 48) = v30;
  *(_QWORD *)(a4 + 56) = v21;
  *(_BYTE *)(a4 + 64) = 1;
}

uint64_t webrtc::SctpTransport::SctpTransport(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  void (***v6)(_QWORD);
  uint64_t v7;
  void (***v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &unk_24C0C0070;
  *(_QWORD *)(a1 + 8) = &unk_24C0C0100;
  *(_QWORD *)(a1 + 16) = rtc::Thread::Current((rtc::Thread *)a1);
  v6 = (void (***)(_QWORD))*a3;
  if (*a3)
    (**v6)(*a3);
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = 0;
  v8 = (void (***)(_QWORD))*a3;
  *(_QWORD *)(a1 + 80) = *a3;
  (**v8)(v8);
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::TrivialUntypedFunctionArgs<1ul>>((char *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 136) + 440), a1, (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::DtlsTransportInternal *,webrtc::DtlsTransportState)>::CallInlineStorage<webrtc::SctpTransport::SctpTransport(std::unique_ptr<cricket::SctpTransportInternal>,webrtc::scoped_refptr<webrtc::DtlsTransport>)::$_0>, v9, v10, v11, v12, v13);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 32))(*(_QWORD *)(a1 + 64), *(_QWORD *)(*a3 + 136));
  v14 = *(_QWORD *)(a1 + 64);
  v18[0] = &unk_24C0C0160;
  v18[1] = a1;
  v19 = v18;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 16))(v14, v18);
  v15 = v19;
  if (v19 == v18)
  {
    v16 = 4;
    v15 = v18;
    goto LABEL_7;
  }
  if (v19)
  {
    v16 = 5;
LABEL_7:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  return a1;
}

uint64_t (***webrtc::SctpTransport::Information@<X0>(webrtc::SctpTransport *this@<X0>, uint64_t a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);
  uint64_t v5;
  char v6;
  webrtc::SctpTransport *v7;
  _QWORD v8[2];

  if (rtc::Thread::IsCurrent(*((rtc::Thread **)this + 2)))
  {
    *(_DWORD *)a2 = *((_DWORD *)this + 6);
    result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 4);
    *(_QWORD *)(a2 + 8) = result;
    if (result)
      result = (uint64_t (***)(_QWORD))(**result)(result);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)((char *)this + 40);
    *(_QWORD *)(a2 + 29) = *(_QWORD *)((char *)this + 53);
  }
  else
  {
    v5 = *((_QWORD *)this + 2);
    v7 = this;
    v8[0] = a2;
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 36) = 0;
    v8[1] = &v7;
    return (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v5 + 96))(v5, v8, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SctpTransportInformation rtc::Thread::BlockingCall<webrtc::SctpTransport::Information(void)::$_0,webrtc::SctpTransportInformation,void>(webrtc::SctpTransport::Information(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v6);
  }
  return result;
}

uint64_t webrtc::SctpTransport::RegisterObserver(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 72) = a2;
  return result;
}

uint64_t webrtc::SctpTransport::UnregisterObserver(uint64_t this)
{
  *(_QWORD *)(this + 72) = 0;
  return this;
}

uint64_t webrtc::SctpTransport::OpenChannel@<X0>(webrtc::SctpTransport *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 38) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 29) = 0;
  return result;
}

uint64_t `non-virtual thunk to'webrtc::SctpTransport::OpenChannel@<X0>(webrtc::SctpTransport *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 48))(*((_QWORD *)this + 7));
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 38) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 29) = 0;
  return result;
}

uint64_t webrtc::SctpTransport::SendData(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 64))(*(_QWORD *)(a1 + 64));
}

uint64_t `non-virtual thunk to'webrtc::SctpTransport::SendData(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
}

uint64_t webrtc::SctpTransport::CloseChannel@<X0>(webrtc::SctpTransport *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 56))(*((_QWORD *)this + 8));
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 38) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 29) = 0;
  return result;
}

uint64_t `non-virtual thunk to'webrtc::SctpTransport::CloseChannel@<X0>(webrtc::SctpTransport *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 56))(*((_QWORD *)this + 7));
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 38) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 29) = 0;
  return result;
}

uint64_t webrtc::SctpTransport::SetDataSink(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
}

uint64_t `non-virtual thunk to'webrtc::SctpTransport::SetDataSink(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56));
}

uint64_t webrtc::SctpTransport::IsReadyToSend(webrtc::SctpTransport *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 72))(*((_QWORD *)this + 8));
}

uint64_t `non-virtual thunk to'webrtc::SctpTransport::IsReadyToSend(webrtc::SctpTransport *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7));
}

uint64_t webrtc::SctpTransport::buffered_amount(webrtc::SctpTransport *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 104))(*((_QWORD *)this + 8));
}

uint64_t `non-virtual thunk to'webrtc::SctpTransport::buffered_amount(webrtc::SctpTransport *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 104))(*((_QWORD *)this + 7));
}

uint64_t webrtc::SctpTransport::buffered_amount_low_threshold(webrtc::SctpTransport *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 112))(*((_QWORD *)this + 8));
}

uint64_t `non-virtual thunk to'webrtc::SctpTransport::buffered_amount_low_threshold(webrtc::SctpTransport *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 112))(*((_QWORD *)this + 7));
}

uint64_t webrtc::SctpTransport::SetBufferedAmountLowThreshold(webrtc::SctpTransport *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 120))(*((_QWORD *)this + 8));
}

uint64_t `non-virtual thunk to'webrtc::SctpTransport::SetBufferedAmountLowThreshold(webrtc::SctpTransport *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 120))(*((_QWORD *)this + 7));
}

uint64_t (***webrtc::SctpTransport::dtls_transport@<X0>(webrtc::SctpTransport *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 10);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t webrtc::SctpTransport::UpdateInformation(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (***v10)(_QWORD, int *);
  void (***v11)(_QWORD);
  int v12;
  void (***v13)(_QWORD);
  _BYTE v14[21];

  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
  {
    (**(void (***)(_QWORD))v5)(*(_QWORD *)(a1 + 80));
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 24) = a2;
    (**(void (***)(uint64_t))v5)(v5);
    result = *(_QWORD *)(a1 + 32);
    if (!result)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 24) = a2;
  result = *(_QWORD *)(a1 + 32);
  if (result)
LABEL_3:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
LABEL_4:
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 60) = BYTE4(v8);
  if (v5)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v10 = *(void (****)(_QWORD, int *))(a1 + 72);
  if (v10 && v4 != a2)
  {
    v12 = *(_DWORD *)(a1 + 24);
    v11 = *(void (****)(_QWORD))(a1 + 32);
    v13 = v11;
    if (v11)
      (**v11)(v11);
    *(_OWORD *)v14 = *(_OWORD *)(a1 + 40);
    *(_QWORD *)&v14[13] = *(_QWORD *)(a1 + 53);
    (**v10)(v10, &v12);
    result = (uint64_t)v13;
    if (v13)
      return ((uint64_t (*)(_QWORD))(*v13)[1])(v13);
  }
  return result;
}

uint64_t webrtc::SctpTransport::Start(webrtc::SctpTransport *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = *((_DWORD *)this + 6);
    (**(void (***)(_QWORD))v8)(*((_QWORD *)this + 4));
    v10 = *((_QWORD *)this + 7);
    *((_DWORD *)this + 6) = v9;
    (**(void (***)(uint64_t))v8)(v8);
    v11 = *((_QWORD *)this + 4);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    *((_QWORD *)this + 4) = v8;
    *((double *)this + 5) = (double)(int)a4;
    *((_QWORD *)this + 6) = 1;
    *((_DWORD *)this + 14) = v10;
    *((_BYTE *)this + 60) = BYTE4(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    v12 = *((_QWORD *)this + 7);
    *((double *)this + 5) = (double)(int)a4;
    *((_QWORD *)this + 6) = 1;
    *((_DWORD *)this + 14) = v12;
    *((_BYTE *)this + 60) = BYTE4(v12);
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), a2, a3, a4);
  if ((result & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_transport.cc");
    return webrtc::SctpTransport::UpdateInformation((uint64_t)this, 3);
  }
  return result;
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::DtlsTransportInternal *,webrtc::DtlsTransportState)>::CallInlineStorage<webrtc::SctpTransport::SctpTransport(std::unique_ptr<cricket::SctpTransportInternal>,webrtc::scoped_refptr<webrtc::DtlsTransport>)::$_0>(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t vars0;

  result = *a1;
  if (*(_QWORD *)(*(_QWORD *)(result + 80) + 136) != a2)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_transport.cc", 195, "transport == dtls_transport_->internal()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, vars0);
    JUMPOUT(0x2087DE72CLL);
  }
  if ((a3 - 3) <= 1)
    return webrtc::SctpTransport::UpdateInformation(result, 3);
  return result;
}

void std::__function::__func<webrtc::SctpTransport::SctpTransport(std::unique_ptr<cricket::SctpTransportInternal>,webrtc::scoped_refptr<webrtc::DtlsTransport>)::$_1,std::allocator<webrtc::SctpTransport::SctpTransport(std::unique_ptr<cricket::SctpTransportInternal>,webrtc::scoped_refptr<webrtc::DtlsTransport>)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::SctpTransport::SctpTransport(std::unique_ptr<cricket::SctpTransportInternal>,webrtc::scoped_refptr<webrtc::DtlsTransport>)::$_1,std::allocator<webrtc::SctpTransport::SctpTransport(std::unique_ptr<cricket::SctpTransportInternal>,webrtc::scoped_refptr<webrtc::DtlsTransport>)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C0C0160;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::SctpTransport::SctpTransport(std::unique_ptr<cricket::SctpTransportInternal>,webrtc::scoped_refptr<webrtc::DtlsTransport>)::$_1,std::allocator<webrtc::SctpTransport::SctpTransport(std::unique_ptr<cricket::SctpTransportInternal>,webrtc::scoped_refptr<webrtc::DtlsTransport>)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C0C0160;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::SctpTransport::SctpTransport(std::unique_ptr<cricket::SctpTransportInternal>,webrtc::scoped_refptr<webrtc::DtlsTransport>)::$_1,std::allocator<webrtc::SctpTransport::SctpTransport(std::unique_ptr<cricket::SctpTransportInternal>,webrtc::scoped_refptr<webrtc::DtlsTransport>)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 8);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 64) + 88))(*(_QWORD *)(v1 + 64)) & 0xFF00000000) == 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 64) + 96))(*(_QWORD *)(v1 + 64)) & 0xFF00000000) == 0)
  {
    return webrtc::SctpTransport::UpdateInformation(v1, 2);
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 64) + 88))(*(_QWORD *)(v1 + 64));
  if ((result & 0xFF00000000) != 0)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 64) + 96))(*(_QWORD *)(v1 + 64));
    if ((result & 0xFF00000000) != 0)
    {
      if ((int)result >= v3)
        v4 = v3;
      else
        v4 = result;
      v5 = *(_QWORD *)(v1 + 32);
      if (v5)
      {
        v6 = *(_DWORD *)(v1 + 24);
        (**(void (***)(_QWORD))v5)(*(_QWORD *)(v1 + 32));
        v7 = *(_QWORD *)(v1 + 40);
        v8 = *(_QWORD *)(v1 + 48);
        *(_DWORD *)(v1 + 24) = v6;
        (**(void (***)(uint64_t))v5)(v5);
        v9 = *(_QWORD *)(v1 + 32);
        v10 = v4 | 0x100000000;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        *(_QWORD *)(v1 + 32) = v5;
        *(_QWORD *)(v1 + 40) = v7;
        *(_QWORD *)(v1 + 48) = v8;
        *(_DWORD *)(v1 + 56) = v10;
        *(_BYTE *)(v1 + 60) = BYTE4(v10);
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      else
      {
        *(_DWORD *)(v1 + 56) = v4;
        *(_BYTE *)(v1 + 60) = 1;
      }
      return webrtc::SctpTransport::UpdateInformation(v1, 2);
    }
  }
  __break(1u);
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SctpTransportInformation rtc::Thread::BlockingCall<webrtc::SctpTransport::Information(void)::$_0,webrtc::SctpTransportInformation,void>(webrtc::SctpTransport::Information(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[21];

  (*(void (**)(uint64_t *__return_ptr))(***(_QWORD ***)(a1 + 8) + 40))(&v7);
  v2 = *(_DWORD **)a1;
  **(_DWORD **)a1 = v7;
  v3 = v8;
  if (v8)
    (**(void (***)(uint64_t))v8)(v8);
  v4 = *((_QWORD *)v2 + 1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)v2 + 1) = v3;
  v5 = *(_OWORD *)v9;
  *(_QWORD *)((char *)v2 + 29) = *(_QWORD *)&v9[13];
  *((_OWORD *)v2 + 1) = v5;
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

uint64_t cricket::SctpTransportFactory::CreateSctpTransport@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;

  v8 = operator new();
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_QWORD *)operator new();
  *v10 = &unk_24C0B2950;
  v12 = v10;
  webrtc::DcSctpTransport::DcSctpTransport(v8, a2, v9, a3, (uint64_t *)&v12);
  result = (uint64_t)v12;
  if (v12)
    result = (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
  *a4 = v8;
  return result;
}

void cricket::SctpTransportFactory::~SctpTransportFactory(cricket::SctpTransportFactory *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::SctpTransportInformation::~SctpTransportInformation(webrtc::SctpTransportInformation *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t webrtc::ParseDataChannelOpenMessage(uint64_t *a1, std::string *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  size_t v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD v29[4];

  v4 = *a1;
  if (*a1)
    v4 = *(_QWORD *)(v4 + 16) + a1[1];
  v5 = a1[2];
  if (!v5)
    v4 = 0;
  v29[0] = v4;
  v29[1] = v5;
  v29[3] = v5;
  if (!v5)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
LABEL_59:
    rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_utils.cc");
    return 0;
  }
  if (*(_BYTE *)v4 != 3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sctp_utils.cc");
    return 0;
  }
  if (v5 == 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    goto LABEL_59;
  }
  v21 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if ((v5 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    goto LABEL_59;
  }
  v22 = *(unsigned __int8 *)(v4 + 1);
  v23 = bswap32(*(unsigned __int16 *)(v4 + 2)) >> 16;
  if (v23 <= 0x80)
  {
    *(_DWORD *)(a3 + 56) = 0;
    *(_BYTE *)(a3 + 60) = 1;
    if ((v5 & 0xFFFFFFFFFFFFFFFCLL) != 4)
      goto LABEL_23;
LABEL_46:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    goto LABEL_59;
  }
  if (v23 > 0x100)
  {
    if (v23 > 0x200)
      v24 = 3;
    else
      v24 = 2;
  }
  else
  {
    v24 = 1;
  }
  *(_DWORD *)(a3 + 56) = v24;
  *(_BYTE *)(a3 + 60) = 1;
  if ((v5 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    goto LABEL_46;
LABEL_23:
  if (v21 == 10)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    goto LABEL_59;
  }
  if (v21 == 8)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    goto LABEL_59;
  }
  v25 = *(_DWORD *)(v4 + 4);
  v26 = bswap32(*(unsigned __int16 *)(v4 + 8)) >> 16;
  v27 = *(unsigned __int16 *)(v4 + 10);
  v29[2] = 12;
  if ((rtc::ByteBufferReader::ReadString((unint64_t)v29, a2, v26) & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    goto LABEL_59;
  }
  if ((rtc::ByteBufferReader::ReadString((unint64_t)v29, (std::string *)(a3 + 24), __rev16(v27)) & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    goto LABEL_59;
  }
  *(_BYTE *)(a3 + 1) = (char)v22 > -126;
  if (*(_BYTE *)(a3 + 16))
    *(_BYTE *)(a3 + 16) = 0;
  if (*(_BYTE *)(a3 + 8))
    *(_BYTE *)(a3 + 8) = 0;
  v28 = bswap32(v25);
  result = 1;
  if (v22 > 128)
  {
    if (v22 == 130)
      goto LABEL_61;
    if (v22 != 129)
      return result;
LABEL_58:
    *(_BYTE *)(a3 + 16) = 1;
    *(_DWORD *)(a3 + 12) = v28;
    return result;
  }
  if (v22 == 1)
    goto LABEL_58;
  if (v22 == 2)
  {
LABEL_61:
    *(_BYTE *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 4) = v28;
  }
  return result;
}

uint64_t webrtc::WriteDataChannelOpenMessage(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  unsigned int v8;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  _DWORD *v20;
  _BYTE *v21;
  _WORD *v22;
  _DWORD *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  __int16 v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  int v32;
  int v33;
  size_t v34;
  void *v35;

  v8 = a5;
  v9 = (_DWORD *)a2;
  v10 = (_DWORD *)a1;
  if ((a3 & 0xFFFFFFFC) != 0 || (a3 & 0xFF00000000) == 0)
    v12 = 0;
  else
    v12 = 0x400020001000080uLL >> (16 * a3);
  v13 = a5 & 0xFF00000000;
  if (a4)
  {
    if (v13)
    {
      v14 = 1;
    }
    else
    {
      if (BYTE4(a6))
        v8 = a6;
      else
        v8 = 0;
      v14 = 2 * (BYTE4(a6) != 0);
    }
  }
  else if (v13)
  {
    v14 = -127;
  }
  else
  {
    if (BYTE4(a6))
      v8 = a6;
    else
      v8 = 0;
    if (BYTE4(a6))
      v14 = -126;
    else
      v14 = 0x80;
  }
  v15 = *(unsigned __int8 *)(a1 + 23);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a1 + 8);
  v16 = *(unsigned __int8 *)(a2 + 23);
  if ((v16 & 0x80u) != 0)
    v16 = *(_QWORD *)(a2 + 8);
  v17 = v15 + v16;
  v18 = v17 + 20;
  if (v17 == -20)
  {
    v20 = (_DWORD *)operator new[]();
    *(_BYTE *)v20 = 3;
    goto LABEL_32;
  }
  result = operator new[]();
  v20 = (_DWORD *)result;
  *(_BYTE *)result = 3;
  if (v18 == 1)
  {
LABEL_32:
    v21 = (_BYTE *)operator new[]();
    *v21 = *(_BYTE *)v20;
    MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
    v21[1] = v14;
    v20 = v21;
    goto LABEL_33;
  }
  *(_BYTE *)(result + 1) = v14;
  if (v18 > 3)
  {
    *(_WORD *)(result + 2) = bswap32(v12) >> 16;
    if (v18 > 7)
      goto LABEL_38;
    goto LABEL_34;
  }
LABEL_33:
  v18 = 4;
  v22 = (_WORD *)operator new[]();
  *v22 = *(_WORD *)v20;
  MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
  v22[1] = bswap32(v12) >> 16;
  v20 = v22;
LABEL_34:
  if (v18 + (v18 >> 1) <= 8)
    v18 = 8;
  else
    v18 += v18 >> 1;
  v23 = (_DWORD *)operator new[]();
  *v23 = *v20;
  result = MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
  v20 = v23;
LABEL_38:
  v20[1] = bswap32(v8);
  if (*((char *)v10 + 23) >= 0)
    v24 = *((unsigned __int8 *)v10 + 23);
  else
    v24 = v10[2];
  if (v18 <= 9)
  {
    v18 += v18 >> 1;
    v25 = (_QWORD *)operator new[]();
    *v25 = *(_QWORD *)v20;
    result = MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
    v20 = v25;
  }
  *((_WORD *)v20 + 4) = bswap32(v24) >> 16;
  if (*((char *)v9 + 23) >= 0)
    v26 = *((unsigned __int8 *)v9 + 23);
  else
    v26 = v9[2];
  if (v18 <= 0xB)
  {
    v18 += v18 >> 1;
    v27 = operator new[]();
    v28 = *((_WORD *)v20 + 4);
    *(_QWORD *)v27 = *(_QWORD *)v20;
    *(_WORD *)(v27 + 8) = v28;
    result = MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
    v20 = (_DWORD *)v27;
  }
  *((_WORD *)v20 + 5) = bswap32(v26) >> 16;
  if (*((char *)v10 + 23) < 0)
  {
    v29 = *((_QWORD *)v10 + 1);
    if ((v29 & 0x8000000000000000) != 0)
      goto LABEL_70;
    v10 = *(_DWORD **)v10;
    if (v29)
    {
      if (!v10)
        goto LABEL_70;
    }
  }
  else
  {
    v29 = *((unsigned __int8 *)v10 + 23);
  }
  if (v29)
  {
    v30 = v29 + 12;
    if (v18 < v29 + 12)
    {
      if (v18 + (v18 >> 1) <= v30)
        v18 = v29 + 12;
      else
        v18 += v18 >> 1;
      v31 = operator new[]();
      v32 = v20[2];
      *(_QWORD *)v31 = *(_QWORD *)v20;
      *(_DWORD *)(v31 + 8) = v32;
      MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
      v20 = (_DWORD *)v31;
    }
    result = (uint64_t)memcpy(v20 + 3, v10, v29);
    v33 = *((char *)v9 + 23);
    if ((v33 & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_62;
  }
  v30 = 12;
  v33 = *((char *)v9 + 23);
  if (v33 < 0)
  {
LABEL_62:
    v34 = *((_QWORD *)v9 + 1);
    if ((v34 & 0x8000000000000000) == 0)
    {
      v9 = *(_DWORD **)v9;
      if (!v34 || v9)
        goto LABEL_65;
    }
LABEL_70:
    __break(1u);
    return result;
  }
LABEL_60:
  v34 = v33;
LABEL_65:
  if (v34)
  {
    if (v18 < v34 + v30)
    {
      v35 = (void *)operator new[]();
      memcpy(v35, v20, v30);
      MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
      v20 = v35;
    }
    memcpy((char *)v20 + v30, v9, v34);
    v30 += v34;
  }
  rtc::CopyOnWriteBuffer::SetData<unsigned char,(void *)0>(a7, v20, (uint64_t *)v30);
  MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
  return 1;
}

void webrtc::rtcp::Sdes::~Sdes(webrtc::rtcp::Sdes *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_24C0C01D0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_24C0C01D0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::rtcp::Sdes::Parse(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  int v21;
  _BYTE *v22;
  int v23;
  unsigned __int8 *v24;
  char v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  void **i;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned __int8 v67;
  void *__p[2];
  uint64_t v69;

  v4 = *(unsigned __int8 *)(a2 + 1);
  __p[0] = 0;
  __p[1] = 0;
  v69 = 0;
  v5 = *(_DWORD *)(a2 + 4);
  if ((v5 & 3) != 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/sdes.cc");
    v5 = *(_DWORD *)(a2 + 4);
  }
  v65 = a1;
  if (!(_DWORD)v4)
  {
    v66 = 4;
LABEL_38:
    v38 = v65[2];
    if (v38)
    {
      v39 = v65[3];
      v40 = (void *)v65[2];
      if (v39 != v38)
      {
        do
        {
          if (*(char *)(v39 - 1) < 0)
            operator delete(*(void **)(v39 - 24));
          v39 -= 32;
        }
        while (v39 != v38);
        v40 = (void *)v65[2];
      }
      v65[3] = v38;
      operator delete(v40);
    }
    *((_OWORD *)v65 + 1) = *(_OWORD *)__p;
    v65[4] = v69;
    v65[5] = v66;
    return;
  }
  v13 = *(unsigned __int8 **)(a2 + 8);
  v14 = (unint64_t)&v13[v5];
  std::vector<webrtc::rtcp::Sdes::Chunk>::__append((char **)__p, v4);
  v15 = 0;
  v66 = 4;
  v67 = v4;
  while (1)
  {
    if ((uint64_t)(v14 - (_QWORD)v13) <= 7)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        goto LABEL_54;
      goto LABEL_55;
    }
    v17 = (char *)__p[0];
    v16 = (void **)__p[1];
    v18 = ((char *)__p[1] - (char *)__p[0]) >> 5;
    if (v18 <= v15)
    {
      __break(1u);
      return;
    }
    v19 = v15;
    v20 = (char *)__p[0] + 32 * v15;
    *(_DWORD *)v20 = bswap32(*(_DWORD *)v13);
    v23 = v13[4];
    v22 = v13 + 4;
    v21 = v23;
    v24 = v22 + 1;
    if (v23)
      break;
LABEL_21:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      v64 = v64 & 0xFFFFFFFF00000000 | 0x442;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/sdes.cc");
    }
    v15 = v19;
    v29 = --v67;
    if (v67 <= v18)
    {
      if (v67 < v18)
      {
        while (v16 != (void **)&v17[32 * v67])
        {
          if (*((char *)v16 - 1) < 0)
            operator delete(*(v16 - 3));
          v16 -= 4;
        }
        __p[1] = &v17[32 * v67];
      }
    }
    else
    {
      std::vector<webrtc::rtcp::Sdes::Chunk>::__append((char **)__p, v67 - v18);
    }
LABEL_32:
    if ((uint64_t)&v24[-v14] >= 0)
      v37 = -(uint64_t)((unint64_t)&v24[-v14] & 3);
    else
      v37 = (v14 - (_QWORD)v24) & 3;
    v13 = &v24[v37];
    if (v15 >= v29)
      goto LABEL_38;
  }
  v25 = 0;
  while (1)
  {
    if ((unint64_t)v24 >= v14)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/sdes.cc");
      goto LABEL_55;
    }
    v26 = v22 + 2;
    v27 = *v24;
    v22 += v27 + 2;
    v24 = v22 + 1;
    if ((unint64_t)(v22 + 1) > v14)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v48, v49, v50, v51, v52, v53, v54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/sdes.cc");
      goto LABEL_55;
    }
    if (v21 != 1)
      goto LABEL_11;
    if ((v25 & 1) != 0)
      break;
    std::string::__assign_external((std::string *)(v20 + 8), v26, v27);
    v25 = 1;
LABEL_11:
    v21 = *v22;
    if (!*v22)
    {
      if ((v25 & 1) == 0)
        goto LABEL_21;
      v28 = *((_QWORD *)v20 + 2);
      if (v20[31] >= 0)
        v28 = v20[31];
      v66 = v66 + v28 - (((_BYTE)v28 + 2) & 3) + 10;
      v15 = v19 + 1;
      v29 = v67;
      goto LABEL_32;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
    goto LABEL_55;
LABEL_54:
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v55, v56, v57, v58, v59, v60, v61, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/sdes.cc");
LABEL_55:
  v62 = (void **)__p[0];
  if (__p[0])
  {
    for (i = (void **)__p[1]; i != v62; i -= 4)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v62);
  }
}

BOOL webrtc::rtcp::Sdes::AddCName(_QWORD *a1, int a2, std::string::value_type **__src, size_t __len)
{
  void **v4;
  void **v5;
  unint64_t v6;
  std::string::value_type **v11;
  std::string::value_type **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  unint64_t v22;
  std::string::value_type *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  std::string::size_type v32;
  uint64_t v33;
  char *v34;
  char *v35;
  std::string *v36;
  char *v37;
  char *v38;
  int v39;
  __int128 v40;
  void **v41;
  std::string::size_type v42;
  std::string::size_type v44;
  std::string::value_type *__s;
  std::string::value_type *v46;
  size_t v47;
  unint64_t v48;
  _DWORD v49[2];

  v4 = (void **)a1[2];
  v5 = (void **)a1[3];
  v6 = (char *)v5 - (char *)v4;
  if ((unint64_t)((char *)v5 - (char *)v4) < 0x3E0)
  {
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_48;
    if (__len > 0x16)
    {
      v20 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v20 = __len | 7;
      v21 = v20 + 1;
      v11 = (std::string::value_type **)operator new(v20 + 1);
      v47 = __len;
      v48 = v21 | 0x8000000000000000;
      v46 = (std::string::value_type *)v11;
      v12 = (std::string::value_type **)((char *)v11 + __len);
      if (v11 > __src)
        goto LABEL_12;
    }
    else
    {
      HIBYTE(v48) = __len;
      v11 = &v46;
      v12 = (std::string::value_type **)((char *)&v46 + __len);
      if (&v46 > __src)
        goto LABEL_12;
    }
    if (v12 > __src)
    {
LABEL_47:
      __break(1u);
LABEL_48:
      abort();
    }
LABEL_12:
    if (__len)
      memmove(v11, __src, __len);
    *(_BYTE *)v12 = 0;
    v22 = a1[4];
    v23 = v46;
    v24 = v47;
    v49[0] = v48;
    *(_DWORD *)((char *)v49 + 3) = *(_DWORD *)((char *)&v48 + 3);
    v25 = HIBYTE(v48);
    v26 = SHIBYTE(v48);
    if ((unint64_t)v5 < v22)
    {
      if (v5)
      {
        *(_DWORD *)v5 = a2;
        if (v26 < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v5 + 1), v23, v24);
        }
        else
        {
          v5[1] = v23;
          v5[2] = (void *)v24;
          *((_DWORD *)v5 + 6) = v49[0];
          *(_DWORD *)((char *)v5 + 27) = *(_DWORD *)((char *)v49 + 3);
          *((_BYTE *)v5 + 31) = v26;
        }
        v38 = (char *)(v5 + 4);
        goto LABEL_39;
      }
      goto LABEL_47;
    }
    v44 = HIBYTE(v48);
    __s = v46;
    v27 = v6 >> 5;
    v28 = v22 - (_QWORD)v4;
    if (v28 >> 4 <= (v6 >> 5) + 1)
      v29 = v27 + 1;
    else
      v29 = v28 >> 4;
    v30 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0;
    v31 = 0x7FFFFFFFFFFFFFFLL;
    if (!v30)
      v31 = v29;
    if (v31 >> 59)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v32 = v47;
    v33 = 32 * v31;
    v34 = (char *)operator new(32 * v31);
    v35 = &v34[32 * v27];
    *(_DWORD *)v35 = a2;
    v36 = (std::string *)(v35 + 8);
    if (v26 < 0)
    {
      std::string::__init_copy_ctor_external(v36, __s, v32);
      v4 = (void **)a1[2];
      v5 = (void **)a1[3];
      v37 = &v34[v33];
      v38 = v35 + 32;
      if (v5 != v4)
      {
LABEL_26:
        v24 = v32;
        do
        {
          v39 = *((_DWORD *)v5 - 8);
          v5 -= 4;
          *((_DWORD *)v35 - 8) = v39;
          v35 -= 32;
          v40 = *(_OWORD *)(v5 + 1);
          *((_QWORD *)v35 + 3) = v5[3];
          *(_OWORD *)(v35 + 8) = v40;
          v5[2] = 0;
          v5[3] = 0;
          v5[1] = 0;
        }
        while (v5 != v4);
        v4 = (void **)a1[2];
        v41 = (void **)a1[3];
        a1[2] = v35;
        a1[3] = v38;
        a1[4] = v37;
        v25 = v44;
        if (v41 == v4)
        {
          v23 = __s;
          if (!v4)
            goto LABEL_39;
          goto LABEL_36;
        }
        v23 = __s;
        do
        {
          if (*((char *)v41 - 1) < 0)
            operator delete(*(v41 - 3));
          v41 -= 4;
        }
        while (v41 != v4);
LABEL_35:
        if (!v4)
        {
LABEL_39:
          a1[3] = v38;
          if (v26 >= 0)
            v42 = v25;
          else
            v42 = v24;
          a1[5] += v42 - (((_BYTE)v42 + 2) & 3) + 10;
          if (v26 < 0)
            operator delete(v23);
          return v6 < 0x3E0;
        }
LABEL_36:
        operator delete(v4);
        goto LABEL_39;
      }
    }
    else
    {
      v36->__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
      *((_QWORD *)v35 + 2) = v32;
      *((_DWORD *)v35 + 6) = v49[0];
      *(_DWORD *)(v35 + 27) = *(_DWORD *)((char *)v49 + 3);
      v35[31] = v26;
      v37 = &v34[v33];
      v38 = v35 + 32;
      if (v5 != v4)
        goto LABEL_26;
    }
    a1[2] = v35;
    a1[3] = v38;
    a1[4] = v37;
    v24 = v32;
    v25 = v44;
    v23 = __s;
    goto LABEL_35;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/sdes.cc");
  return v6 < 0x3E0;
}

uint64_t webrtc::rtcp::Sdes::BlockLength(webrtc::rtcp::Sdes *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t webrtc::rtcp::Sdes::Create(const void ***a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  const void **v23;
  const void **v24;
  size_t v25;
  const void **v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  const void *v32;
  std::string *v34;

  v12 = *a3;
  if (((uint64_t (*)(const void ***))(*a1)[2])(a1) + v12 <= a4)
  {
LABEL_4:
    v13 = *a3;
    v14 = ((uint64_t (*)(const void ***))(*a1)[2])(a1) + v13;
    v15 = (*((_DWORD *)a1 + 6) - *((_DWORD *)a1 + 4)) >> 5;
    v16 = ((uint64_t (*)(const void ***))(*a1)[2])(a1);
    *(_BYTE *)(a2 + *a3) = v15 | 0x80;
    *(_BYTE *)(*a3 + a2 + 1) = -54;
    *(_BYTE *)(*a3 + a2 + 2) = (unint64_t)(v16 - 4) >> 10;
    *(_BYTE *)(*a3 + a2 + 3) = (unint64_t)(v16 - 4) >> 2;
    v21 = *a3 + 4;
    *a3 = v21;
    v22 = a1[2];
    v23 = a1[3];
    if (v22 == v23)
    {
LABEL_16:
      if (v21 == v14)
        return 1;
      v34 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/sdes.cc", 195, "*index == index_end", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v17, v18, v19, v20, v21);
      return std::vector<webrtc::rtcp::Sdes::Chunk>::__append(v34);
    }
    v24 = v22 + 1;
    while (1)
    {
      v26 = v24 - 1;
      *(_DWORD *)(a2 + v21) = bswap32(*((_DWORD *)v24 - 2));
      *(_BYTE *)(*a3 + a2 + 4) = 1;
      v27 = *((char *)v24 + 23);
      if (v27 < 0)
      {
        *(_BYTE *)(a2 + *a3 + 5) = v24[1];
        v28 = *a3;
        v29 = *((char *)v24 + 23);
        if ((v29 & 0x80000000) == 0)
        {
LABEL_9:
          memcpy((void *)(v28 + a2 + 6), v24, v29);
          v30 = *((char *)v24 + 23);
          if ((v30 & 0x80000000) == 0)
            goto LABEL_10;
          goto LABEL_14;
        }
      }
      else
      {
        *(_BYTE *)(a2 + *a3 + 5) = v27;
        v28 = *a3;
        v29 = *((char *)v24 + 23);
        if ((v29 & 0x80000000) == 0)
          goto LABEL_9;
      }
      memcpy((void *)(v28 + a2 + 6), *v24, (size_t)v24[1]);
      v30 = *((char *)v24 + 23);
      if ((v30 & 0x80000000) == 0)
      {
LABEL_10:
        v31 = v30 + *a3 + 6;
        *a3 = v31;
        LODWORD(v32) = *((char *)v24 + 23);
        if ((v32 & 0x80000000) != 0)
          goto LABEL_15;
        goto LABEL_6;
      }
LABEL_14:
      v31 = (uint64_t)v24[1] + *a3 + 6;
      *a3 = v31;
      LODWORD(v32) = *((char *)v24 + 23);
      if ((v32 & 0x80000000) != 0)
LABEL_15:
        v32 = v24[1];
LABEL_6:
      v25 = 4 - (((_BYTE)v32 + 2) & 3);
      bzero((void *)(a2 + v31), v25);
      v21 = v25 + *a3;
      *a3 = v21;
      v24 += 4;
      if (v26 + 4 == v23)
        goto LABEL_16;
    }
  }
  while (*a3)
  {
    a6(a5, a2);
    *a3 = 0;
    if (((uint64_t (*)(const void ***))(*a1)[2])(a1) <= a4)
      goto LABEL_4;
  }
  return 0;
}

void std::vector<webrtc::rtcp::Sdes::Chunk>::__append(char **a1, unint64_t a2)
{
  char *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void **v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void **v18;
  int v19;
  __int128 v20;
  void **v21;

  v5 = (void **)a1[1];
  v4 = a1[2];
  if (a2 > (v4 - (char *)v5) >> 5)
  {
    v6 = ((char *)v5 - *a1) >> 5;
    if (!((v6 + a2) >> 59))
    {
      v7 = v4 - *a1;
      v8 = v7 >> 4;
      if (v7 >> 4 <= v6 + a2)
        v8 = v6 + a2;
      if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
        v9 = 0x7FFFFFFFFFFFFFFLL;
      else
        v9 = v8;
      if (v9)
      {
        if (v9 >> 59)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v10 = (char *)operator new(32 * v9);
      }
      else
      {
        v10 = 0;
      }
      v13 = &v10[32 * v6];
      v14 = &v10[32 * v9];
      v15 = 32 * a2;
      v16 = &v13[32 * a2];
      v17 = v13;
      do
      {
        if (!v17)
          goto LABEL_32;
        *(_OWORD *)v17 = 0uLL;
        *((_OWORD *)v17 + 1) = 0uLL;
        v17 += 32;
        v15 -= 32;
      }
      while (v15);
      v18 = (void **)*a1;
      if (v5 == (void **)*a1)
      {
        *a1 = v13;
        a1[1] = v16;
        a1[2] = v14;
      }
      else
      {
        do
        {
          v19 = *((_DWORD *)v5 - 8);
          v5 -= 4;
          *((_DWORD *)v13 - 8) = v19;
          v13 -= 32;
          v20 = *(_OWORD *)(v5 + 1);
          *((_QWORD *)v13 + 3) = v5[3];
          *(_OWORD *)(v13 + 8) = v20;
          v5[2] = 0;
          v5[3] = 0;
          v5[1] = 0;
        }
        while (v5 != v18);
        v5 = (void **)*a1;
        v21 = (void **)a1[1];
        *a1 = v13;
        a1[1] = v16;
        a1[2] = v14;
        while (v21 != v5)
        {
          if (*((char *)v21 - 1) < 0)
            operator delete(*(v21 - 3));
          v21 -= 4;
        }
      }
      if (v5)
        operator delete(v5);
      return;
    }
LABEL_33:
    abort();
  }
  if (!a2)
    goto LABEL_16;
  v11 = 32 * a2;
  v12 = &v5[4 * a2];
  do
  {
    if (!v5)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    *(_OWORD *)v5 = 0uLL;
    *((_OWORD *)v5 + 1) = 0uLL;
    v5 += 4;
    v11 -= 32;
  }
  while (v11);
  v5 = v12;
LABEL_16:
  a1[1] = (char *)v5;
}

uint64_t webrtc::UpdateRtpHeaderExtensionPreferencesFromSdpMunging(uint64_t result, uint64_t a2, uint64_t **a3)
{
  uint64_t i;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type size;
  int v16;
  void *v17;
  std::string *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  void **v24;
  void **v25;
  uint64_t v28;
  void *v29[3];
  char v30;
  void *__p;
  char *v32;
  uint64_t v33;
  std::string v34;
  __int128 v35;

  if (result != a2)
  {
    for (i = result; i != a2; i += 40)
    {
      webrtc::TransceiverList::FindByMid(a3, (unsigned __int8 **)i, &v33);
      result = v33;
      if (!v33)
        continue;
      v28 = v33;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v33 + 160))(&__p);
      v5 = *(_QWORD *)(i + 32);
      v7 = *(_QWORD *)(v5 + 64);
      v6 = *(_QWORD *)(v5 + 72);
      v8 = __p;
      v9 = v32;
      if (v7 == v6)
        goto LABEL_48;
      v10 = __p;
      if (__p != v32)
      {
LABEL_12:
        v11 = (char *)__p;
        if (__p == v9)
        {
LABEL_13:
          v11 = v9;
          v9 = v32;
          if (v11 != v32)
LABEL_44:
            *((_DWORD *)v11 + 9) = 0;
          goto LABEL_11;
        }
        while (1)
        {
          if (v11[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
          }
          else
          {
            v12 = *(_OWORD *)v11;
            v34.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
            *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v12;
          }
          v35 = *(_OWORD *)(v11 + 24);
          v13 = *(unsigned __int8 *)(v7 + 23);
          if ((v13 & 0x80u) == 0)
            v14 = *(unsigned __int8 *)(v7 + 23);
          else
            v14 = *(_QWORD *)(v7 + 8);
          size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
          v16 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v34.__r_.__value_.__l.__size_;
          if (v14 == size)
          {
            v17 = (void *)v34.__r_.__value_.__r.__words[0];
            if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = &v34;
            else
              v18 = (std::string *)v34.__r_.__value_.__r.__words[0];
            if ((v13 & 0x80) != 0)
            {
              v20 = memcmp(*(const void **)v7, v18, *(_QWORD *)(v7 + 8));
              v21 = v20;
              if (v16 < 0)
              {
                operator delete(v17);
                if (!v21)
                  goto LABEL_43;
              }
              else if (!v20)
              {
                goto LABEL_43;
              }
LABEL_16:
              v11 += 40;
              if (v11 == v9)
                goto LABEL_13;
              continue;
            }
            if (!*(_BYTE *)(v7 + 23))
            {
LABEL_42:
              if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_43:
                v9 = v32;
                if (v11 == v32)
                  goto LABEL_11;
                goto LABEL_44;
              }
              operator delete(v34.__r_.__value_.__l.__data_);
              v9 = v32;
              if (v11 != v32)
                goto LABEL_44;
LABEL_11:
              v7 += 32;
              if (v7 != v6)
                goto LABEL_12;
              v8 = __p;
LABEL_48:
              v10 = v9;
              break;
            }
            v19 = 0;
            while (*(unsigned __int8 *)(v7 + v19) == v18->__r_.__value_.__s.__data_[v19])
            {
              if (v13 == ++v19)
                goto LABEL_42;
            }
          }
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_16;
          operator delete(v34.__r_.__value_.__l.__data_);
          v11 += 40;
          if (v11 == v9)
            goto LABEL_13;
        }
      }
      v22 = v10 - v8;
      if (v22)
        v23 = v8;
      else
        v23 = 0;
      (*(void (**)(void **__return_ptr, uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v28 + 176))(v29, v28, v23, 0xCCCCCCCCCCCCCCCDLL * (v22 >> 3));
      if (v30 < 0)
      {
        operator delete(v29[1]);
        v24 = (void **)__p;
        if (__p)
        {
LABEL_56:
          v25 = (void **)v32;
          v4 = v24;
          if (v32 != (char *)v24)
          {
            do
            {
              if (*((char *)v25 - 17) < 0)
                operator delete(*(v25 - 5));
              v25 -= 5;
            }
            while (v25 != v24);
            v4 = __p;
          }
          v32 = (char *)v24;
          operator delete(v4);
        }
      }
      else
      {
        v24 = (void **)__p;
        if (__p)
          goto LABEL_56;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
  }
  return result;
}

uint64_t webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  *(_QWORD *)a1 = &off_24C0C0200;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 54) = 0u;
  v4 = operator new();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_24C0C0270;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(a1 + 72) = v4;
  *(_DWORD *)(v4 + 32) = 0;
  v5 = (unsigned int *)(v4 + 32);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = operator new();
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)v7 = off_24C0C0270;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(a1 + 80) = v7;
  *(_DWORD *)(v7 + 32) = 0;
  v8 = (unsigned int *)(v7 + 32);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v10 = operator new();
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 88) = 0;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_BYTE *)(v10 + 56) = 0;
  *(_QWORD *)(a1 + 112) = v10;
  do
    v11 = __ldxr((unsigned int *)v10);
  while (__stxr(v11 + 1, (unsigned int *)v10));
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
  }
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v19 = (_QWORD *)operator new();
  v19[2] = 0;
  v19[1] = 0;
  *v19 = v19 + 1;
  *(_QWORD *)(a1 + 200) = v19;
  *(_WORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 212) = 0;
  *(_DWORD *)(a1 + 215) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 284) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 292) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_WORD *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 348) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 356) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_WORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 269) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a1;
  v20 = *(_QWORD *)(a1 + 112);
  v21 = (_QWORD *)operator new();
  *v21 = 1;
  v22 = (unsigned int *)v21 + 1;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  v24 = *(_QWORD *)(a1 + 384);
  if (v24)
  {
    v25 = (unsigned int *)(v24 + 4);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      MEMORY[0x20BD0ADEC]();
  }
  *(_QWORD *)(a1 + 384) = v21;
  do
    v28 = __ldxr(v22);
  while (__stxr(v28 + 1, v22));
  v29 = *(_QWORD *)(a1 + 392);
  do
    v30 = __ldxr(v22);
  while (__stxr(v30 + 1, v22));
  do
  {
    v31 = __ldaxr(v22);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v22));
  if (!v32)
    MEMORY[0x20BD0ADEC](v21, 0x1000C404A09149ALL);
  v33 = operator new(0x18uLL);
  v34 = v33;
  *v33 = &off_24C0C0490;
  v33[1] = v21;
  v33[2] = v29;
  if (*(_BYTE *)(v20 + 88))
  {
    v35 = *(_QWORD **)(v20 + 80);
    *(_QWORD *)(v20 + 80) = 0;
    if (v35 == (_QWORD *)(v20 + 56))
    {
      v36 = 4;
      v35 = (_QWORD *)(v20 + 56);
    }
    else
    {
      if (!v35)
      {
LABEL_31:
        *(_QWORD *)(v20 + 80) = v34;
        return a1;
      }
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
    goto LABEL_31;
  }
  *(_QWORD *)(v20 + 80) = v33;
  *(_BYTE *)(v20 + 88) = 1;
  return a1;
}

void webrtc::SdpOfferAnswerHandler::~SdpOfferAnswerHandler(webrtc::SdpOfferAnswerHandler *this)
{
  _BYTE *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  webrtc::WebRtcSessionDescriptionFactory *v25;

  *(_QWORD *)this = &off_24C0C0200;
  *((_QWORD *)this + 49) = 0;
  v2 = (_BYTE *)*((_QWORD *)this + 48);
  if (v2)
  {
    *v2 = 0;
    v3 = (unsigned int *)(v2 + 4);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 48) = 0;
  }
  v6 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*((_BYTE *)this + 328) && *((char *)this + 327) < 0)
  {
    operator delete(*((void **)this + 38));
    if ((*((char *)this + 263) & 0x80000000) == 0)
    {
LABEL_12:
      v7 = *((_QWORD *)this + 28);
      if (!v7)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if ((*((char *)this + 263) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(*((void **)this + 30));
  v7 = *((_QWORD *)this + 28);
  if (v7)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
LABEL_14:
  v8 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v8)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v8, *(_QWORD *)(v8 + 8));
    MEMORY[0x20BD0ADEC](v8, 0x1020C4062D53EE8);
  }
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)this + 176, *((char **)this + 23));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 143) < 0)
  {
    operator delete(*((void **)this + 15));
    v9 = *((_QWORD *)this + 14);
    if (!v9)
      goto LABEL_32;
  }
  else
  {
    v9 = *((_QWORD *)this + 14);
    if (!v9)
      goto LABEL_32;
  }
  do
  {
    v10 = __ldaxr((unsigned int *)v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, (unsigned int *)v9));
  if (!v11)
  {
    if (*(_BYTE *)(v9 + 88))
    {
      v12 = *(_QWORD **)(v9 + 80);
      if (v12 == (_QWORD *)(v9 + 56))
      {
        v13 = 4;
        v12 = (_QWORD *)(v9 + 56);
        goto LABEL_30;
      }
      if (v12)
      {
        v13 = 5;
LABEL_30:
        (*(void (**)(void))(*v12 + 8 * v13))();
      }
    }
    std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::~deque[abi:sn180100]((void **)(v9 + 8));
    MEMORY[0x20BD0ADEC](v9, 0x10A0C402ADD0C5BLL);
  }
LABEL_32:
  v14 = (_QWORD *)*((_QWORD *)this + 11);
  if (v14)
  {
    v15 = (_QWORD *)*((_QWORD *)this + 12);
    v16 = (void *)*((_QWORD *)this + 11);
    if (v15 != v14)
    {
      do
      {
        v18 = *--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v14;
    operator delete(v16);
  }
  v19 = *((_QWORD *)this + 10);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 9);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = (webrtc::WebRtcSessionDescriptionFactory *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v25)
  {
    webrtc::WebRtcSessionDescriptionFactory::~WebRtcSessionDescriptionFactory(v25);
    MEMORY[0x20BD0ADEC]();
  }
}

{
  webrtc::SdpOfferAnswerHandler::~SdpOfferAnswerHandler(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::SdpOfferAnswerHandler::Initialize(webrtc::SdpOfferAnswerHandler *this, const webrtc::PeerConnectionInterface::RTCConfiguration *a2, webrtc::PeerConnectionDependencies *a3, webrtc::ConnectionContext *a4)
{
  int v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  webrtc::WebRtcSessionDescriptionFactory *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;
  void *__p[2];
  char v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 84))
    v7 = *((_DWORD *)a2 + 20);
  else
    v7 = 100;
  *((_DWORD *)this + 87) = v7;
  *((_BYTE *)this + 352) = 1;
  *((_DWORD *)this + 69) = *((_DWORD *)a2 + 24);
  *((_BYTE *)this + 280) = 1;
  *((_WORD *)this + 142) = *((unsigned __int8 *)a2 + 100) | 0x100;
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 26);
  *((_BYTE *)this + 292) = 1;
  v8 = (uint64_t *)*((_QWORD *)a2 + 5);
  if (v8 == *((uint64_t **)a2 + 6))
  {
    v9 = 0;
  }
  else
  {
    v9 = *v8;
    if (*v8)
    {
      do
        v10 = __ldxr((unsigned int *)v9);
      while (__stxr(v10 + 1, (unsigned int *)v9));
    }
  }
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 1) + 16))(__p);
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 264))(*((_QWORD *)this + 1));
  v13 = operator new();
  v14 = *((_QWORD *)a3 + 4);
  *((_QWORD *)a3 + 4) = 0;
  v35 = v9;
  v36 = v14;
  v37[0] = &off_24C0C0328;
  v37[1] = this;
  v38 = v37;
  webrtc::WebRtcSessionDescriptionFactory::WebRtcSessionDescriptionFactory(v13, (uint64_t)a4, (uint64_t)this, (__int128 *)__p, v11, &v36, &v35, (uint64_t)v37, v12);
  v15 = v38;
  if (v38 == v37)
  {
    v16 = 4;
    v15 = v37;
    goto LABEL_13;
  }
  if (v38)
  {
    v16 = 5;
LABEL_13:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  if (v9)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v9);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v9));
    if (!v18)
    {
      v19 = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      MEMORY[0x20BD0ADEC](v9, 0x1020C40D5A9D86FLL);
    }
  }
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v20 = (webrtc::WebRtcSessionDescriptionFactory *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v13;
  if (v20)
  {
    webrtc::WebRtcSessionDescriptionFactory::~WebRtcSessionDescriptionFactory(v20);
    MEMORY[0x20BD0ADEC]();
  }
  if (v34 < 0)
  {
    operator delete(__p[0]);
    if (*(_BYTE *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1)))
      goto LABEL_26;
LABEL_30:
    v28 = *((_QWORD *)this + 3);
    goto LABEL_31;
  }
  if (!*(_BYTE *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1)))
    goto LABEL_30;
LABEL_26:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
  v28 = *((_QWORD *)this + 3);
  *(_BYTE *)(v28 + 56) = 1;
LABEL_31:
  (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 1) + 96))(v37);
  *(_BYTE *)(v28 + 296) = BYTE3(v37[0]);
  v29 = *((_QWORD *)this + 3);
  *(_BYTE *)(v29 + 80) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1));
  v30 = *((_QWORD *)a3 + 6);
  if (v30)
  {
    *((_QWORD *)a3 + 6) = 0;
    result = *((_QWORD *)this + 46);
    *((_QWORD *)this + 46) = v30;
    if (!result)
      return result;
  }
  else
  {
    v32 = (_QWORD *)operator new();
    *v32 = &off_24C0B0518;
    result = *((_QWORD *)this + 46);
    *((_QWORD *)this + 46) = v32;
    if (!result)
      return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
}

uint64_t webrtc::SdpOfferAnswerHandler::ChangeSignalingState(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;

  if (*(_DWORD *)(result + 64) != a2)
  {
    v3 = result;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(v3 + 8) + 16))(&v12);
      rtc::webrtc_logging_impl::Log("\r\t\n\t\v\t\v", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      if (v13 < 0)
        operator delete(v12);
    }
    *(_DWORD *)(v3 + 64) = a2;
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 144))(*(_QWORD *)(v3 + 8));
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, *(unsigned int *)(v3 + 64));
  }
  return result;
}

uint64_t webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded(webrtc::SdpOfferAnswerHandler *this)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1));
  v3 = **((_QWORD **)this + 1);
  if ((v2 & 1) == 0)
  {
    v5 = *(uint64_t (**)(void))(v3 + 144);
LABEL_6:
    v6 = v5();
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    ++*((_DWORD *)this + 53);
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1));
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 56))(v7, *((unsigned int *)this + 53));
  }
  result = (*(uint64_t (**)(void))(v3 + 184))();
  if ((result & 1) == 0)
  {
    result = (*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)this + 16))(this);
    if (!(_DWORD)result)
    {
      result = webrtc::SdpOfferAnswerHandler::CheckIfNegotiationIsNeeded(this);
      if ((result & 1) == 0)
      {
        *((_BYTE *)this + 209) = 0;
        ++*((_DWORD *)this + 53);
        return result;
      }
      if (!*((_BYTE *)this + 209))
      {
        *((_BYTE *)this + 209) = 1;
        v5 = *(uint64_t (**)(void))(**((_QWORD **)this + 1) + 144);
        goto LABEL_6;
      }
    }
  }
  return result;
}

void webrtc::SdpOfferAnswerHandler::CreateOffer(_QWORD *a1, void (***a2)(_QWORD), __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v6 = a1[14];
  v7 = a1[48];
  if (!v7 || (v8 = atomic_load((unsigned int *)(v7 + 4)), v8 == 1))
  {
    v9 = (_QWORD *)operator new();
    *v9 = 1;
    v10 = (unsigned int *)v9 + 1;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = a1[48];
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 4);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        MEMORY[0x20BD0ADEC]();
    }
    a1[48] = v9;
LABEL_12:
    v16 = (unsigned int *)v9 + 1;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = a1[49];
    do
      v19 = __ldxr(v16);
    while (__stxr(v19 + 1, v16));
    do
    {
      v20 = __ldaxr(v16);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v16));
    if (!v21)
      MEMORY[0x20BD0ADEC](v9, 0x1000C404A09149ALL);
    if (a2)
      goto LABEL_20;
    goto LABEL_21;
  }
  v9 = (_QWORD *)a1[48];
  if (v9)
    goto LABEL_12;
  v18 = a1[49];
  if (a2)
LABEL_20:
    (**a2)(a2);
LABEL_21:
  v35 = *a3;
  LOBYTE(v36) = *((_BYTE *)a3 + 16);
  if (v6)
  {
    do
      v22 = __ldxr((unsigned int *)v6);
    while (__stxr(v22 + 1, (unsigned int *)v6));
  }
  v23 = operator new();
  v24 = v23;
  *(_DWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = v6;
  do
    v25 = __ldxr((unsigned int *)v23);
  while (__stxr(v25 + 1, (unsigned int *)v23));
  v26 = operator new(0x10uLL);
  *v26 = &off_24C0B81D0;
  v26[1] = v24;
  v27 = operator new();
  *(_DWORD *)(v27 + 48) = v36;
  *(_OWORD *)(v27 + 32) = v35;
  v28 = *(_QWORD *)(v6 + 16);
  v29 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)v27 = &off_24C0C04D8;
  *(_QWORD *)(v27 + 8) = v9;
  *(_QWORD *)(v27 + 16) = v18;
  *(_QWORD *)(v27 + 24) = a2;
  *(_QWORD *)(v27 + 80) = v26;
  if (v29 == v28)
    v30 = 0;
  else
    v30 = ((v29 - v28) << 6) - 1;
  v31 = *(_QWORD *)(v6 + 48);
  if (v30 == v31 + *(_QWORD *)(v6 + 40))
  {
    std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity(v6 + 8);
    v31 = *(_QWORD *)(v6 + 48);
    v28 = *(_QWORD *)(v6 + 16);
    v29 = *(_QWORD *)(v6 + 24);
  }
  if (v29 == v28
    || (v32 = *(_QWORD *)(v6 + 40) + v31, (v33 = *(_QWORD *)(v28 + ((v32 >> 6) & 0x3FFFFFFFFFFFFF8))) == 0))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v33 + 8 * (v32 & 0x1FF)) = v27;
    *(_QWORD *)(v6 + 48) = v31 + 1;
    if (!v31)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + ((*(_QWORD *)(v6 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*(_QWORD *)(v6 + 40) & 0x1FFLL));
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
    }
  }
}

void webrtc::SdpOfferAnswerHandler::SetLocalDescription(_QWORD *a1, void (***a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = a1[14];
  v7 = a1[48];
  if (!v7 || (v8 = atomic_load((unsigned int *)(v7 + 4)), v8 == 1))
  {
    v9 = (_QWORD *)operator new();
    *v9 = 1;
    v10 = (unsigned int *)v9 + 1;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = a1[48];
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 4);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        MEMORY[0x20BD0ADEC]();
    }
    a1[48] = v9;
LABEL_12:
    v16 = (unsigned int *)v9 + 1;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = a1[49];
    do
      v19 = __ldxr(v16);
    while (__stxr(v19 + 1, v16));
    do
    {
      v20 = __ldaxr(v16);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v16));
    if (!v21)
      MEMORY[0x20BD0ADEC](v9, 0x1000C404A09149ALL);
    if (a2)
      goto LABEL_20;
    goto LABEL_21;
  }
  v9 = (_QWORD *)a1[48];
  if (v9)
    goto LABEL_12;
  v18 = a1[49];
  if (a2)
LABEL_20:
    (**a2)(a2);
LABEL_21:
  if (v6)
  {
    do
      v22 = __ldxr((unsigned int *)v6);
    while (__stxr(v22 + 1, (unsigned int *)v6));
  }
  v23 = operator new();
  v24 = v23;
  *(_DWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = v6;
  do
    v25 = __ldxr((unsigned int *)v23);
  while (__stxr(v25 + 1, (unsigned int *)v23));
  v26 = operator new(0x10uLL);
  *v26 = &off_24C0B81D0;
  v26[1] = v24;
  v27 = (_QWORD *)operator new();
  v28 = *(_QWORD *)(v6 + 16);
  v29 = *(_QWORD *)(v6 + 24);
  *v27 = &off_24C0C0600;
  v27[1] = v9;
  v27[2] = v18;
  v27[3] = a2;
  v27[4] = a3;
  v27[8] = v26;
  if (v29 == v28)
    v30 = 0;
  else
    v30 = ((v29 - v28) << 6) - 1;
  v31 = *(_QWORD *)(v6 + 48);
  if (v30 == v31 + *(_QWORD *)(v6 + 40))
  {
    std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity(v6 + 8);
    v31 = *(_QWORD *)(v6 + 48);
    v28 = *(_QWORD *)(v6 + 16);
    v29 = *(_QWORD *)(v6 + 24);
  }
  if (v29 == v28
    || (v32 = *(_QWORD *)(v6 + 40) + v31, (v33 = *(_QWORD *)(v28 + ((v32 >> 6) & 0x3FFFFFFFFFFFFF8))) == 0))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v33 + 8 * (v32 & 0x1FF)) = v27;
    *(_QWORD *)(v6 + 48) = v31 + 1;
    if (!v31)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + ((*(_QWORD *)(v6 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*(_QWORD *)(v6 + 40) & 0x1FFLL));
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
    }
  }
}

void webrtc::SdpOfferAnswerHandler::SetLocalDescription(_QWORD *a1, uint64_t *a2, void (****a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  void (***v22)(_QWORD);
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = a1[14];
  v7 = a1[48];
  if (!v7 || (v8 = atomic_load((unsigned int *)(v7 + 4)), v8 == 1))
  {
    v9 = (_QWORD *)operator new();
    *v9 = 1;
    v10 = (unsigned int *)v9 + 1;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = a1[48];
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 4);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        MEMORY[0x20BD0ADEC]();
    }
    a1[48] = v9;
LABEL_12:
    v16 = (unsigned int *)v9 + 1;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = a1[49];
    do
      v19 = __ldxr(v16);
    while (__stxr(v19 + 1, v16));
    do
    {
      v20 = __ldaxr(v16);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v16));
    if (!v21)
      MEMORY[0x20BD0ADEC](v9, 0x1000C404A09149ALL);
    v22 = *a3;
    if (v22)
      goto LABEL_20;
    goto LABEL_21;
  }
  v9 = (_QWORD *)a1[48];
  if (v9)
    goto LABEL_12;
  v18 = a1[49];
  v22 = *a3;
  if (*a3)
LABEL_20:
    (**v22)(v22);
LABEL_21:
  v23 = *a2;
  *a2 = 0;
  if (v6)
  {
    do
      v24 = __ldxr((unsigned int *)v6);
    while (__stxr(v24 + 1, (unsigned int *)v6));
  }
  v25 = operator new();
  v26 = v25;
  *(_DWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = v6;
  do
    v27 = __ldxr((unsigned int *)v25);
  while (__stxr(v27 + 1, (unsigned int *)v25));
  v28 = operator new(0x10uLL);
  *v28 = &off_24C0B81D0;
  v28[1] = v26;
  v29 = (_QWORD *)operator new();
  v30 = *(_QWORD *)(v6 + 16);
  v31 = *(_QWORD *)(v6 + 24);
  *v29 = &off_24C0C06A0;
  v29[1] = v9;
  v29[2] = v18;
  v29[3] = v22;
  v29[4] = v23;
  v29[8] = v28;
  if (v31 == v30)
    v32 = 0;
  else
    v32 = ((v31 - v30) << 6) - 1;
  v33 = *(_QWORD *)(v6 + 48);
  if (v32 == v33 + *(_QWORD *)(v6 + 40))
  {
    std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity(v6 + 8);
    v33 = *(_QWORD *)(v6 + 48);
    v30 = *(_QWORD *)(v6 + 16);
    v31 = *(_QWORD *)(v6 + 24);
  }
  if (v31 == v30
    || (v34 = *(_QWORD *)(v6 + 40) + v33, (v35 = *(_QWORD *)(v30 + ((v34 >> 6) & 0x3FFFFFFFFFFFFF8))) == 0))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v35 + 8 * (v34 & 0x1FF)) = v29;
    *(_QWORD *)(v6 + 48) = v33 + 1;
    if (!v33)
    {
      v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + ((*(_QWORD *)(v6 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*(_QWORD *)(v6 + 40) & 0x1FFLL));
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
    }
  }
}

uint64_t webrtc::SdpOfferAnswerHandler::SetLocalDescription(_QWORD *a1, void (***a2)(_QWORD))
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  void (***v24)(_QWORD);

  v4 = a1[48];
  if (v4 && (v5 = atomic_load((unsigned int *)(v4 + 4)), v5 != 1))
  {
    v6 = (_QWORD *)a1[48];
    if (!v6)
    {
      v15 = a1[49];
      if (!a2)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  else
  {
    v6 = (_QWORD *)operator new();
    *v6 = 1;
    v7 = (unsigned int *)v6 + 1;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = a1[48];
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 4);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        MEMORY[0x20BD0ADEC]();
    }
    a1[48] = v6;
  }
  v13 = (unsigned int *)v6 + 1;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v15 = a1[49];
  do
    v16 = __ldxr(v13);
  while (__stxr(v16 + 1, v13));
  do
  {
    v17 = __ldaxr(v13);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v13));
  if (!v18)
    MEMORY[0x20BD0ADEC](v6, 0x1000C404A09149ALL);
  if (a2)
LABEL_20:
    (**a2)(a2);
LABEL_21:
  v19 = operator new();
  v20 = v19;
  *(_QWORD *)(v19 + 16) = v6;
  *(_QWORD *)(v19 + 24) = v15;
  *(_QWORD *)(v19 + 32) = a2;
  *(_QWORD *)v19 = off_24C0C0628;
  *(_QWORD *)(v19 + 8) = &unk_24C0C0668;
  *(_DWORD *)(v19 + 40) = 0;
  v21 = (unsigned int *)(v19 + 40);
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v24 = (void (***)(_QWORD))v19;
  webrtc::SdpOfferAnswerHandler::SetLocalDescription(a1, &v24);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
}

void webrtc::SdpOfferAnswerHandler::SetLocalDescription(_QWORD *a1, void (****a2)(_QWORD))
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  void (***v21)(_QWORD);
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = a1[48];
  if (v4 && (v5 = atomic_load((unsigned int *)(v4 + 4)), v5 != 1))
  {
    v6 = (_QWORD *)a1[48];
    if (!v6)
    {
      v15 = a1 + 49;
      v16 = a1[49];
      goto LABEL_20;
    }
  }
  else
  {
    v6 = (_QWORD *)operator new();
    *v6 = 1;
    v7 = (unsigned int *)v6 + 1;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = a1[48];
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 4);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        MEMORY[0x20BD0ADEC]();
    }
    a1[48] = v6;
  }
  v13 = (unsigned int *)v6 + 1;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v15 = a1 + 49;
  v16 = a1[49];
  do
    v17 = __ldxr(v13);
  while (__stxr(v17 + 1, v13));
  do
  {
    v18 = __ldaxr(v13);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v13));
  if (!v19)
    MEMORY[0x20BD0ADEC](v6, 0x1000C404A09149ALL);
LABEL_20:
  v20 = operator new();
  v21 = *a2;
  if (v21)
    (**v21)(v21);
  *(_BYTE *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = v6;
  *(_QWORD *)(v20 + 24) = v16;
  *(_QWORD *)(v20 + 32) = v21;
  *(_QWORD *)(v20 + 64) = 0;
  *(_QWORD *)v20 = off_24C0C06C8;
  *(_DWORD *)(v20 + 72) = 0;
  v22 = (unsigned int *)(v20 + 72);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  v24 = a1[14];
  v25 = a1[48];
  if (v25 && (v26 = atomic_load((unsigned int *)(v25 + 4)), v26 != 1))
  {
    v27 = (_QWORD *)a1[48];
    if (!v27)
    {
      v36 = *v15;
      (**(void (***)(uint64_t))v20)(v20);
      v40 = v24 + 8;
      if (!v24)
        goto LABEL_44;
      goto LABEL_43;
    }
  }
  else
  {
    v27 = (_QWORD *)operator new();
    *v27 = 1;
    v28 = (unsigned int *)v27 + 1;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = a1[48];
    if (v30)
    {
      v31 = (unsigned int *)(v30 + 4);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
        MEMORY[0x20BD0ADEC]();
    }
    a1[48] = v27;
  }
  v34 = (unsigned int *)v27 + 1;
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  v36 = *v15;
  do
    v37 = __ldxr(v34);
  while (__stxr(v37 + 1, v34));
  do
  {
    v38 = __ldaxr(v34);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, v34));
  if (!v39)
    MEMORY[0x20BD0ADEC](v27, 0x1000C404A09149ALL);
  (**(void (***)(uint64_t))v20)(v20);
  v40 = v24 + 8;
  if (v24)
  {
    do
LABEL_43:
      v41 = __ldxr((unsigned int *)v24);
    while (__stxr(v41 + 1, (unsigned int *)v24));
  }
LABEL_44:
  v42 = operator new();
  v43 = v42;
  *(_DWORD *)v42 = 0;
  *(_QWORD *)(v42 + 8) = v24;
  do
    v44 = __ldxr((unsigned int *)v42);
  while (__stxr(v44 + 1, (unsigned int *)v42));
  v45 = operator new(0x10uLL);
  *v45 = &off_24C0B81D0;
  v45[1] = v43;
  v46 = (_QWORD *)operator new();
  v47 = *(_QWORD *)(v24 + 16);
  v48 = *(_QWORD *)(v24 + 24);
  *v46 = &off_24C0C0750;
  v46[1] = v27;
  v46[2] = v36;
  v46[3] = v20;
  v46[7] = v45;
  if (v48 == v47)
    v49 = 0;
  else
    v49 = ((v48 - v47) << 6) - 1;
  v50 = *(_QWORD *)(v24 + 48);
  if (v49 == v50 + *(_QWORD *)(v24 + 40))
  {
    std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity(v40);
    v50 = *(_QWORD *)(v24 + 48);
    v47 = *(_QWORD *)(v24 + 16);
    v48 = *(_QWORD *)(v24 + 24);
  }
  if (v48 == v47
    || (v51 = *(_QWORD *)(v24 + 40) + v50, (v52 = *(_QWORD *)(v47 + ((v51 >> 6) & 0x3FFFFFFFFFFFFF8))) == 0))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v52 + 8 * (v51 & 0x1FF)) = v46;
    *(_QWORD *)(v24 + 48) = v50 + 1;
    if (!v50)
    {
      v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 16) + ((*(_QWORD *)(v24 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*(_QWORD *)(v24 + 40) & 0x1FFLL));
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
}

void webrtc::SdpOfferAnswerHandler::UpdateTransceiversAndDataChannels(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL4 v16;
  _BOOL4 v18;
  _BOOL4 v20;
  char *v21;
  unsigned int v22;
  size_t v23;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string::size_type size;
  std::string *p_p;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  std::string *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  webrtc::RtpTransceiver ***v62;
  webrtc::RtpTransceiver ***i;
  webrtc::RtpTransceiver **v64;
  webrtc::RtpTransceiver *v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void *v75;
  char v76;
  int v77;
  char v78;
  int data;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  unsigned __int8 v112;
  std::string::size_type v113;
  BOOL v114;
  const std::string::value_type *v115;
  std::string::size_type v116;
  std::string::size_type v117;
  std::string *v118;
  char *v119;
  std::string::size_type v120;
  char v121;
  std::string *v122;
  size_t v123;
  std::string *v124;
  std::string *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 **v129;
  __int128 **v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  char *v136;
  __int128 *v137;
  __int128 v138;
  std::string::size_type v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  std::string *v143;
  __int128 v144;
  uint64_t v145;
  std::string *v146;
  __int128 v147;
  __int16 v148;
  __int128 *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  int v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  std::string::size_type v157;
  std::string::size_type v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _BOOL4 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  BOOL v176;
  BOOL v177;
  BOOL v178;
  BOOL v179;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  __int128 v187;
  std::string::size_type v188;
  std::string::size_type v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  std::string::size_type v195;
  std::string *v196;
  __int128 v197;
  std::string::size_type v198;
  std::string::size_type v199;
  std::string::size_type v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  webrtc::RtpTransceiver **v209;
  int v210;
  __int128 ***v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  std::string *v216;
  void **v217;
  void **v218;
  void *v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  unsigned __int8 *v225;
  uint64_t v226;
  __int128 *v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  std::string::size_type v237;
  std::string::size_type v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void **v247;
  void **v248;
  void *v249;
  void **v250;
  void **v251;
  void *v252;
  char v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  char *v257;
  unsigned __int8 *v258;
  uint64_t v259;
  void *v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  size_t v265;
  char *v266;
  uint64_t v267;
  void (***v268)(_QWORD);
  webrtc::RtpTransceiver *v269;
  BOOL v270;
  char v271;
  uint64_t v272;
  uint64_t **v273;
  webrtc::RtpTransceiver *v274;
  uint64_t v275;
  uint64_t *v276;
  webrtc::RtpTransceiver *v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  webrtc::RtpTransceiver **v281;
  char v282;
  webrtc::RtpTransceiver *v283;
  int v284;
  uint64_t v285;
  int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _BOOL4 v304;
  _BOOL4 v305;
  _BOOL4 v306;
  unint64_t v307;
  char v308;
  void **v309;
  unint64_t v310;
  uint64_t v312;
  uint64_t v313;
  uint64_t v315;
  int v316;
  uint64_t *v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  void *v324[3];
  char v325;
  std::string v326;
  char v327;
  webrtc::RtpTransceiver **v328;
  std::string __p;
  unint64_t v330;
  _BYTE v331[7];
  void *v332;
  void **v333;
  void (***v334)(_QWORD);
  void (***v335)(_QWORD);
  void *v336;
  unint64_t v337;
  uint64_t v338;
  webrtc::RtpTransceiver **v339;
  _BYTE __src[32];
  __int128 v341;
  _BYTE v342[25];
  __int128 __s;
  uint64_t v344;
  uint64_t v345;
  _BYTE v346[13];
  __int128 v347;
  uint64_t v348;
  __int16 v349;
  char v350[104];
  char v351;
  std::string v352;
  _BYTE v353[15];
  std::string v354;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 56))(a4)
    && *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8)) + 28) == 1
    && *(_QWORD *)(a7 + 16) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      *(_QWORD *)__src = "INVALID_PARAMETER";
      *(_QWORD *)&__src[8] = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v289, v290, v291, v292, v293, v294, v295, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    }
    *(_DWORD *)a1 = 3;
    v296 = (char *)operator new(0x48uLL);
    *(_QWORD *)(a1 + 8) = v296;
    *(_OWORD *)(a1 + 16) = xmmword_208F0ABF0;
    if (v296 > "max-bundle configured but session description has no BUNDLE group"
      || v296 + 65 <= "max-bundle configured but session description has no BUNDLE group")
    {
      strcpy(v296, "max-bundle configured but session description has no BUNDLE group");
      *(_DWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 36) = 0;
      *(_BYTE *)(a1 + 38) = 0;
      return;
    }
    goto LABEL_563;
  }
  v321 = a2;
  v312 = a6;
  v315 = a4;
  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
  v13 = *v12;
  v320 = v12;
  if (v12[1] == *v12)
  {
LABEL_551:
    *(_DWORD *)a1 = 0;
    *(_BYTE *)(a1 + 38) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 29) = 0;
    return;
  }
  v14 = 0;
  v318 = (uint64_t *)(a7 + 8);
  v319 = a2 + 144;
  v309 = (void **)(a1 + 8);
  v16 = __src <= "data" && &__src[4] > "data";
  v306 = v16;
  v18 = __src <= "video" && &__src[5] > "video";
  v305 = v18;
  v20 = __src <= "audio" && &__src[5] > "audio";
  v304 = v20;
  v313 = a7;
  while (1)
  {
    v322 = v13;
    v21 = (char *)(v13 + 40 * v14);
    v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v21 + 4) + 16))(*((_QWORD *)v21 + 4));
    if (v21[23] < 0)
    {
      v23 = *((_QWORD *)v21 + 1);
      if ((v23 & 0x8000000000000000) != 0)
        goto LABEL_563;
      v24 = *(char **)v21;
      if (v23 && v24 == 0)
        goto LABEL_563;
    }
    else
    {
      v23 = v21[23];
      v24 = v21;
    }
    rtc::UniqueStringGenerator::AddKnownId(v319, v24, v23);
    v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(a7, (const void **)v21, *(uint64_t **)(a7 + 8), v318);
    if (v318 != v26)
    {
      if (v21[23] < 0)
      {
        v27 = *((_QWORD *)v21 + 1);
        if (v27 < 0)
          goto LABEL_563;
        if (v27 && *(_QWORD *)v21 == 0)
          goto LABEL_563;
      }
      if (*((char *)v26 + 55) < 0)
      {
        v29 = v26[5];
        if (v29 < 0)
          goto LABEL_563;
        if (v29 && v26[4] == 0)
          goto LABEL_563;
      }
    }
    if (v22 <= 1)
      break;
    if (v22 != 3)
    {
      if (v22 != 2)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          *(_QWORD *)__src = "INTERNAL_ERROR";
          *(_QWORD *)&__src[8] = 14;
          rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v297, v298, v299, v300, v301, v302, v303, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
        }
        *(_DWORD *)a1 = 10;
        *(_BYTE *)(a1 + 31) = 21;
        if (v309 > (void **)"Unknown section type." || a1 + 29 <= (unint64_t)"Unknown section type.")
        {
          strcpy((char *)(a1 + 8), "Unknown section type.");
          *(_DWORD *)(a1 + 32) = 0;
          *(_BYTE *)(a1 + 36) = 0;
          *(_BYTE *)(a1 + 38) = 0;
          return;
        }
        goto LABEL_563;
      }
      (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v321 + 8) + 32))(&__p);
      if ((_BYTE)v330)
      {
        v35 = v21[23];
        if ((v35 & 0x80u) == 0)
          v36 = v21[23];
        else
          v36 = *((_QWORD *)v21 + 1);
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        if (v36 != size)
          goto LABEL_106;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((v35 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v21, p_p, *((_QWORD *)v21 + 1)))
            goto LABEL_106;
        }
        else if (v21[23])
        {
          v39 = v21;
          while (*v39 == p_p->__r_.__value_.__s.__data_[0])
          {
            ++v39;
            p_p = (std::string *)((char *)p_p + 1);
            if (!--v35)
              goto LABEL_109;
          }
LABEL_106:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          {
            v307 = v307 & 0xFFFFFFFF00000000 | 0x75B9;
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v84, v85, v86, v87, v88, v89, v90, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
          }
          v91 = 0;
          v92 = 1;
LABEL_178:
          if ((_BYTE)v330 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (((v91 | v92) & 1) == 0)
            return;
          goto LABEL_27;
        }
      }
LABEL_109:
      if (!*(_BYTE *)(v322 + 40 * v14 + 28))
      {
        if (v21[23] < 0)
        {
          v101 = *((_QWORD *)v21 + 1);
          if (v101 < 0)
            goto LABEL_563;
          v21 = *(char **)v21;
          if (v101)
          {
            if (!v21)
              goto LABEL_563;
          }
        }
        else
        {
          v101 = v21[23];
        }
        if (((*(uint64_t (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v321 + 8) + 248))(*(_QWORD *)(v321 + 8), v21, v101) & 1) == 0)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            *(_QWORD *)__src = "INTERNAL_ERROR";
            *(_QWORD *)&__src[8] = 14;
            rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v102, v103, v104, v105, v106, v107, v108, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
          }
          *(_DWORD *)a1 = 10;
          v109 = (char *)operator new(0x20uLL);
          *(_QWORD *)(a1 + 8) = v109;
          *(_OWORD *)(a1 + 16) = xmmword_208F05710;
          if (v109 <= "Failed to create data channel." && v109 + 30 > "Failed to create data channel.")
            goto LABEL_563;
          v91 = 0;
          v92 = 0;
          strcpy(v109, "Failed to create data channel.");
          *(_DWORD *)(a1 + 32) = 0;
          *(_BYTE *)(a1 + 36) = 0;
          *(_BYTE *)(a1 + 38) = 0;
          goto LABEL_178;
        }
        goto LABEL_177;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
        goto LABEL_127;
      if (v21[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__src, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
      }
      else
      {
        v100 = *(_OWORD *)v21;
        *(_QWORD *)&__src[16] = *((_QWORD *)v21 + 2);
        *(_OWORD *)__src = v100;
      }
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v93, v94, v95, v96, v97, v98, v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      if ((__src[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__src);
        memset(&v326, 0, sizeof(v326));
        v110 = (char *)operator new(0x30uLL);
        if (v110 <= "Rejected data channel transport with mid=")
          goto LABEL_128;
      }
      else
      {
LABEL_127:
        memset(&v326, 0, sizeof(v326));
        v110 = (char *)operator new(0x30uLL);
        if (v110 <= "Rejected data channel transport with mid=")
        {
LABEL_128:
          if (v110 + 41 > "Rejected data channel transport with mid=")
            goto LABEL_563;
        }
      }
      strcpy(v110, "Rejected data channel transport with mid=");
      v326.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
      *(_OWORD *)&v326.__r_.__value_.__r.__words[1] = xmmword_208F08F30;
      if (v21[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__src, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
        v112 = __src[23];
        if ((__src[23] & 0x80000000) != 0)
          goto LABEL_133;
LABEL_131:
        v113 = v112;
        v114 = v112 == 0;
        v115 = __src;
      }
      else
      {
        v111 = *(_OWORD *)v21;
        *(_QWORD *)&__src[16] = *((_QWORD *)v21 + 2);
        *(_OWORD *)__src = v111;
        v112 = __src[23];
        if ((__src[23] & 0x80000000) == 0)
          goto LABEL_131;
LABEL_133:
        v113 = *(_QWORD *)&__src[8];
        if ((*(_QWORD *)&__src[8] & 0x8000000000000000) != 0)
          goto LABEL_563;
        v115 = *(const std::string::value_type **)__src;
        v114 = *(_QWORD *)&__src[8] == 0;
        if (*(_QWORD *)&__src[8])
        {
          if (!*(_QWORD *)__src)
            goto LABEL_563;
        }
      }
      if ((v326.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v116 = 22;
      else
        v116 = (v326.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v326.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v117 = HIBYTE(v326.__r_.__value_.__r.__words[2]);
      else
        v117 = v326.__r_.__value_.__l.__size_;
      if (v116 - v117 < v113)
      {
        std::string::__grow_by_and_replace(&v326, v116, v117 + v113 - v116, v117, v117, 0, v113, v115);
        if ((__src[23] & 0x80000000) != 0)
          goto LABEL_144;
LABEL_154:
        v354 = v326;
        memset(&v326, 0, sizeof(v326));
        v121 = HIBYTE(v354.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
        {
          v123 = v354.__r_.__value_.__l.__size_;
          if ((v354.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_563;
          v122 = (std::string *)v354.__r_.__value_.__r.__words[0];
          if (v354.__r_.__value_.__l.__size_)
          {
            if (!v354.__r_.__value_.__r.__words[0])
              goto LABEL_563;
          }
          *(_DWORD *)__src = 11;
          if (v354.__r_.__value_.__l.__size_ >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_564;
        }
        else
        {
          *(_DWORD *)__src = 11;
          v122 = &v354;
          v123 = HIBYTE(v354.__r_.__value_.__r.__words[2]);
        }
        if (v123 > 0x16)
        {
          v126 = (v123 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v123 | 7) != 0x17)
            v126 = v123 | 7;
          v127 = v126 + 1;
          v124 = (std::string *)operator new(v126 + 1);
          *(_QWORD *)&__src[24] = v127 | 0x8000000000000000;
          *(_QWORD *)&__src[8] = v124;
          *(_QWORD *)&__src[16] = v123;
          v125 = (std::string *)((char *)v124 + v123);
          if (v124 <= v122)
            goto LABEL_166;
        }
        else
        {
          __src[31] = v123;
          v124 = (std::string *)&__src[8];
          v125 = (std::string *)&__src[v123 + 8];
          if (&__src[8] > (_BYTE *)v122)
            goto LABEL_167;
LABEL_166:
          if (v125 > v122)
            goto LABEL_563;
        }
LABEL_167:
        if (v123)
          memmove(v124, v122, v123);
        v125->__r_.__value_.__s.__data_[0] = 0;
        LODWORD(v341) = 0;
        BYTE4(v341) = 0;
        BYTE6(v341) = 0;
        if (v121 < 0)
          operator delete(v354.__r_.__value_.__l.__data_);
        LODWORD(v341) = 1;
        v128 = *(_QWORD *)(v321 + 8);
        LODWORD(v352.__r_.__value_.__l.__data_) = *(_DWORD *)__src;
        a7 = v313;
        if ((__src[31] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v352.__r_.__value_.__r.__words[1], *(const std::string::value_type **)&__src[8], *(std::string::size_type *)&__src[16]);
        }
        else
        {
          *(_OWORD *)&v352.__r_.__value_.__r.__words[1] = *(_OWORD *)&__src[8];
          *(_QWORD *)v353 = *(_QWORD *)&__src[24];
        }
        *(_DWORD *)&v353[8] = v341;
        *(_DWORD *)&v353[11] = *(_DWORD *)((char *)&v341 + 3);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v128 + 256))(v128, &v352);
        if ((v353[7] & 0x80000000) != 0)
        {
          operator delete((void *)v352.__r_.__value_.__l.__size_);
          if ((__src[31] & 0x80000000) != 0)
            goto LABEL_184;
LABEL_176:
          if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
LABEL_185:
            operator delete(v326.__r_.__value_.__l.__data_);
        }
        else
        {
          if ((__src[31] & 0x80000000) == 0)
            goto LABEL_176;
LABEL_184:
          operator delete(*(void **)&__src[8]);
          if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_185;
        }
LABEL_177:
        v92 = 0;
        *(_DWORD *)a1 = 0;
        *(_BYTE *)(a1 + 38) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *v309 = 0;
        v91 = 1;
        *(_QWORD *)(a1 + 29) = 0;
        goto LABEL_178;
      }
      if (v114)
      {
LABEL_153:
        if ((__src[23] & 0x80000000) == 0)
          goto LABEL_154;
      }
      else
      {
        if ((v326.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v118 = &v326;
        else
          v118 = (std::string *)v326.__r_.__value_.__r.__words[0];
        v119 = (char *)v118 + v117;
        if ((char *)v118 + v117 <= v115 && &v119[v113] > v115)
          goto LABEL_563;
        memmove(v119, v115, v113);
        v120 = v117 + v113;
        if ((SHIBYTE(v326.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          *((_BYTE *)&v326.__r_.__value_.__s + 23) = v120 & 0x7F;
          v118->__r_.__value_.__s.__data_[v120] = 0;
          goto LABEL_153;
        }
        v326.__r_.__value_.__l.__size_ = v117 + v113;
        v118->__r_.__value_.__s.__data_[v120] = 0;
        if ((__src[23] & 0x80000000) == 0)
          goto LABEL_154;
      }
LABEL_144:
      operator delete(*(void **)__src);
      goto LABEL_154;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v310 = v310 & 0xFFFFFFFF00000000 | 0x7609;
      rtc::webrtc_logging_impl::Log("\r\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    }
LABEL_27:
    ++v14;
    v13 = *v320;
    if (v14 >= 0xCCCCCCCCCCCCCCCDLL * ((v320[1] - *v320) >> 3))
      goto LABEL_551;
  }
  v323 = v14;
  if (a5)
  {
    v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
    v32 = v312;
    if (v14 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v31[1] - *v31) >> 3))
    {
      v34 = 0;
      if (!v312)
        goto LABEL_79;
    }
    else
    {
      v33 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33[1] - *v33) >> 3) <= v14)
        goto LABEL_563;
      v34 = *v33 + 40 * v14;
      if (!v312)
        goto LABEL_79;
    }
  }
  else
  {
    v34 = 0;
    v32 = v312;
    if (!v312)
      goto LABEL_79;
  }
  v47 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
  if (v323 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47[1] - *v47) >> 3))
  {
    v48 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48[1] - *v48) >> 3) <= v323)
      goto LABEL_563;
  }
LABEL_79:
  v316 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v315 + 56))(v315);
  v49 = *((_QWORD *)v21 + 4);
  v50 = v321;
  v51 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v321 + 8) + 64))(*(_QWORD *)(v321 + 8));
  if (v51)
    v51 = (uint64_t **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v321 + 8) + 64))(*(_QWORD *)(v321 + 8)) + 8);
  webrtc::TransceiverList::FindByMid(v51, (unsigned __int8 **)v21, (uint64_t *)&v339);
  if (!a3)
  {
    v14 = v323;
    if (v339)
      goto LABEL_361;
    (*(void (**)(_QWORD))(**(_QWORD **)(v321 + 8) + 64))(*(_QWORD *)(v321 + 8));
    v61 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v321 + 8) + 64))(*(_QWORD *)(v321 + 8));
    v62 = *(webrtc::RtpTransceiver ****)(v61 + 8);
    for (i = *(webrtc::RtpTransceiver ****)(v61 + 16); v62 != i; ++v62)
    {
      v64 = *v62;
      if (*v62)
        (*(void (**)(webrtc::RtpTransceiver **))*v64)(*v62);
      v65 = v64[2];
      if (*((_BYTE *)v65 + 144))
        v66 = *((_QWORD *)v65 + 17) == v323;
      else
        v66 = 0;
      if (v66)
      {
        v339 = v64;
        v50 = v321;
        goto LABEL_361;
      }
      (*((void (**)(webrtc::RtpTransceiver **))*v64 + 1))(v64);
    }
    v339 = 0;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      *(_QWORD *)__src = "INVALID_PARAMETER";
      *(_QWORD *)&__src[8] = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v67, v68, v69, v70, v71, v72, v73, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    }
    v74 = (char *)operator new(0x30uLL);
    v75 = v74;
    if (v74 > "Transceiver not found based on m-line index"
      || v74 + 43 <= "Transceiver not found based on m-line index")
    {
      v76 = 0;
      v77 = 0;
      v78 = 0;
      strcpy(v74, "Transceiver not found based on m-line index");
      data = 3;
      LOBYTE(v80) = 0x80;
      v81 = 48;
      v82 = 43;
      v83 = (uint64_t)v339;
      if (!v339)
        goto LABEL_418;
      goto LABEL_417;
    }
    goto LABEL_563;
  }
  if (v339)
    goto LABEL_265;
  if ((*(_DWORD *)(v49 + 124) & 0xFFFFFFFD) != 0
    || *(_QWORD *)(v49 + 208) != *(_QWORD *)(v49 + 216)
    || *(_QWORD *)(v49 + 232) != *(_QWORD *)(v49 + 240))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_196;
LABEL_87:
    v52 = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
    switch((int)v52)
    {
      case 0:
        __src[23] = 5;
        if (v304)
          goto LABEL_563;
        v60 = "audio";
        goto LABEL_190;
      case 1:
        __src[23] = 5;
        if (v305)
          goto LABEL_563;
        v60 = "video";
LABEL_190:
        *(_DWORD *)__src = *(_DWORD *)v60;
        *(_WORD *)&__src[4] = *((unsigned __int8 *)v60 + 4);
        break;
      case 2:
        __src[23] = 4;
        if (v306)
          goto LABEL_563;
        strcpy(__src, "data");
        break;
      case 3:
        __src[23] = 0;
        __src[0] = 0;
        break;
      default:
        goto LABEL_567;
    }
    rtc::webrtc_logging_impl::Log((unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v53, v54, v55, v56, v57, v58, v59, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
LABEL_196:
    rtc::CreateRandomUuid(&v352);
    if (*(_QWORD *)(v49 + 208) != *(_QWORD *)(v49 + 216))
    {
      memset(&__p, 0, sizeof(__p));
      v129 = *(__int128 ***)(v49 + 232);
      v130 = *(__int128 ***)(v49 + 240);
      goto LABEL_207;
    }
    v129 = *(__int128 ***)(v49 + 232);
    v130 = *(__int128 ***)(v49 + 240);
    memset(&__p, 0, sizeof(__p));
    if (v129 == v130)
    {
LABEL_199:
      v131 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v321 + 8) + 64))(*(_QWORD *)(v321 + 8));
      v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
      v338 = 0;
      memset(__src, 0, 24);
      webrtc::RtpTransmissionManager::CreateSender(v131, v132, (__int128 *)&v352, &v338, (uint64_t)__src, (uint64_t)&__p, (uint64_t *)&v332);
      v133 = *(_QWORD *)__src;
      if (*(_QWORD *)__src)
      {
        v134 = *(_QWORD *)&__src[8];
        v135 = *(void **)__src;
        if (*(_QWORD *)&__src[8] != *(_QWORD *)__src)
        {
          do
          {
            if (*(char *)(v134 - 1) < 0)
              operator delete(*(void **)(v134 - 24));
            v134 -= 24;
          }
          while (v134 != v133);
          v135 = *(void **)__src;
        }
        *(_QWORD *)&__src[8] = v133;
        operator delete(v135);
      }
      memset(__src, 0, 24);
      v149 = *(__int128 **)(v49 + 96);
      if (v149 == *(__int128 **)(v49 + 104))
      {
        rtc::CreateRandomUuid(&v354);
        v150 = v321;
        if ((__src[23] & 0x80000000) != 0)
          operator delete(*(void **)__src);
        *(std::string *)__src = v354;
      }
      else
      {
        v150 = v321;
        if (__src != (_BYTE *)v149)
        {
          if (*((char *)v149 + 23) < 0)
          {
            std::string::__assign_no_alias<true>(__src, *(char **)v149, *((_QWORD *)v149 + 1));
          }
          else
          {
            v151 = *v149;
            *(_QWORD *)&__src[16] = *((_QWORD *)v149 + 2);
            *(_OWORD *)__src = v151;
          }
        }
      }
      v152 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v150 + 8) + 64))(*(_QWORD *)(v150 + 8));
      v153 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
      webrtc::RtpTransmissionManager::CreateReceiver(v152, v153, (uint64_t)__src, (int8x16_t **)&v354);
      v154 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v150 + 8) + 64))(*(_QWORD *)(v150 + 8));
      v336 = v332;
      if (v332)
        (**(void (***)(void *))v332)(v332);
      v335 = (void (***)(_QWORD))v354.__r_.__value_.__r.__words[0];
      if (v354.__r_.__value_.__r.__words[0])
        (**(void (***)(std::string::size_type))v354.__r_.__value_.__l.__data_)(v354.__r_.__value_.__r.__words[0]);
      webrtc::RtpTransmissionManager::CreateAndAddTransceiver(v154, &v336, &v335, (uint64_t *)&v337);
      v155 = v337;
      v337 = 0;
      v339 = (webrtc::RtpTransceiver **)v155;
      if (v335)
        (*v335)[1](v335);
      if (v336)
        (*(void (**)(void *))(*(_QWORD *)v336 + 8))(v336);
      *(_DWORD *)(*(_QWORD *)(v155 + 16) + 84) = 2;
      if (!v316)
      {
        v156 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v150 + 8) + 64))(*(_QWORD *)(v150 + 8))
             ? (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v150 + 8) + 64))(*(_QWORD *)(v150 + 8)) + 8
             : 0;
        v334 = (void (***)(_QWORD))v155;
        (**(void (***)(unint64_t))v155)(v155);
        *((_BYTE *)std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>>>::__emplace_unique_key_args<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::piecewise_construct_t const&,std::tuple<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>,std::tuple<>>((uint64_t **)(v156 + 24), v155, &v334)+ 153) = 1;
        if (v334)
          (*v334)[1](v334);
      }
      if (v354.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)v354.__r_.__value_.__l.__data_ + 8))(v354.__r_.__value_.__r.__words[0]);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      if (v332)
        (*(void (**)(void *))(*(_QWORD *)v332 + 8))(v332);
      v157 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v158 = __p.__r_.__value_.__l.__size_;
        v159 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
            webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v158 - 272));
          while (v158 != v157);
          v159 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v157;
        operator delete(v159);
      }
      if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v352.__r_.__value_.__l.__data_);
      goto LABEL_264;
    }
LABEL_207:
    while (2)
    {
      if (v129 == v130)
        goto LABEL_199;
      v137 = *v129;
      if (v129[1] == *v129)
        goto LABEL_563;
      __src[0] = 0;
      __src[4] = 0;
      *(_QWORD *)&__src[8] = 0x3FF0000000000000;
      *(_DWORD *)&__src[16] = 1;
      __src[20] = 0;
      __src[24] = 0;
      __src[28] = 0;
      LOBYTE(v341) = 0;
      BYTE8(v341) = 0;
      v342[0] = 0;
      v342[8] = 0;
      v342[12] = 0;
      v342[16] = 0;
      v342[24] = 0;
      LOBYTE(__s) = 0;
      LOBYTE(v345) = 0;
      v346[0] = 0;
      v346[8] = 0;
      v346[12] = 1;
      v350 = 0;
      v351 = 0;
      v347 = 0uLL;
      v349 = 0;
      v348 = 0;
      if (&v347 == v137)
      {
LABEL_212:
        v346[12] = *((_BYTE *)v137 + 24) ^ 1;
        v139 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_205;
      }
      else
      {
        if ((*((char *)v137 + 23) & 0x80000000) == 0)
        {
          v138 = *v137;
          v348 = *((_QWORD *)v137 + 2);
          v347 = v138;
          goto LABEL_212;
        }
        std::string::__assign_no_alias<true>(&v347, *(char **)v137, *((_QWORD *)v137 + 1));
        v346[12] = *((_BYTE *)v137 + 24) ^ 1;
        v139 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
LABEL_205:
          v136 = std::vector<webrtc::RtpEncodingParameters>::__push_back_slow_path<webrtc::RtpEncodingParameters const&>((void **)&__p.__r_.__value_.__l.__data_, (uint64_t)__src);
LABEL_206:
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v136;
          webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)__src);
          v129 += 3;
          continue;
        }
      }
      break;
    }
    if (!v139)
      goto LABEL_563;
    *(_OWORD *)v139 = *(_OWORD *)__src;
    v140 = *(_OWORD *)&__src[16];
    v141 = v341;
    v142 = *(_OWORD *)v342;
    *(_OWORD *)(v139 + 57) = *(_OWORD *)&v342[9];
    *(_OWORD *)(v139 + 32) = v141;
    *(_OWORD *)(v139 + 48) = v142;
    *(_OWORD *)(v139 + 16) = v140;
    *(_BYTE *)(v139 + 80) = 0;
    v143 = (std::string *)(v139 + 80);
    *(_BYTE *)(v139 + 104) = 0;
    if ((_BYTE)v345)
    {
      if (SHIBYTE(v344) < 0)
      {
        std::string::__init_copy_ctor_external(v143, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
      }
      else
      {
        v144 = __s;
        *(_QWORD *)(v139 + 96) = v344;
        *(_OWORD *)&v143->__r_.__value_.__l.__data_ = v144;
      }
      *(_BYTE *)(v139 + 104) = 1;
    }
    v145 = *(_QWORD *)v346;
    *(_QWORD *)(v139 + 117) = *(_QWORD *)&v346[5];
    *(_QWORD *)(v139 + 112) = v145;
    v146 = (std::string *)(v139 + 128);
    if (SHIBYTE(v348) < 0)
    {
      std::string::__init_copy_ctor_external(v146, (const std::string::value_type *)v347, *((std::string::size_type *)&v347 + 1));
    }
    else
    {
      v147 = v347;
      *(_QWORD *)(v139 + 144) = v348;
      *(_OWORD *)&v146->__r_.__value_.__l.__data_ = v147;
    }
    v148 = v349;
    *(_BYTE *)(v139 + 160) = 0;
    *(_WORD *)(v139 + 152) = v148;
    *(_BYTE *)(v139 + 264) = 0;
    if (v351)
    {
      webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v139 + 160), (const webrtc::RtpCodec *)&v350);
      *(_BYTE *)(v139 + 264) = 1;
    }
    v136 = (char *)(v139 + 272);
    goto LABEL_206;
  }
  v261 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
  (*(void (**)(_QWORD))(**(_QWORD **)(v321 + 8) + 64))(*(_QWORD *)(v321 + 8));
  v262 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v321 + 8) + 64))(*(_QWORD *)(v321 + 8));
  v263 = *(_QWORD *)(v262 + 8);
  v264 = *(_QWORD *)(v262 + 16);
  v265 = v264 - v263;
  if (v264 == v263)
    goto LABEL_548;
  if ((v265 & 0x8000000000000000) != 0)
    goto LABEL_564;
  v266 = (char *)operator new(v265);
  v267 = 0;
  do
  {
    v268 = *(void (****)(_QWORD))(v263 + v267);
    *(_QWORD *)&v266[v267] = v268;
    if (v268)
      (**v268)(v268);
    v267 += 8;
  }
  while (v263 + v267 != v264);
  if (!v267)
  {
    operator delete(v266);
    goto LABEL_548;
  }
  v279 = 0;
  v280 = 8 * (v267 >> 3);
  while (2)
  {
    v281 = *(webrtc::RtpTransceiver ***)&v266[v279];
    if (v281)
      (*(void (**)(_QWORD))*v281)(*(_QWORD *)&v266[v279]);
    if ((*((unsigned int (**)(webrtc::RtpTransceiver **))*v281 + 4))(v281) != v261
      || !*((_BYTE *)v281[2] + 152))
    {
      goto LABEL_513;
    }
    (*((void (**)(_BYTE *__return_ptr, webrtc::RtpTransceiver **))*v281 + 5))(__src, v281);
    if (__src[24])
    {
      v282 = 0;
LABEL_521:
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
    }
    else
    {
      v282 = (*((uint64_t (**)(webrtc::RtpTransceiver **))*v281 + 8))(v281) ^ 1;
      if (__src[24])
        goto LABEL_521;
    }
    if ((v282 & 1) == 0)
    {
LABEL_513:
      (*((void (**)(webrtc::RtpTransceiver **))*v281 + 1))(v281);
      v279 += 8;
      if (v280 == v279)
      {
        v287 = 1;
        goto LABEL_545;
      }
      continue;
    }
    break;
  }
  v287 = 0;
  do
  {
LABEL_545:
    v288 = *(_QWORD *)&v266[v280 - 8];
    if (v288)
      (*(void (**)(uint64_t))(*(_QWORD *)v288 + 8))(v288);
    v280 -= 8;
  }
  while (v280);
  operator delete(v266);
  if (v287)
  {
LABEL_548:
    v339 = 0;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_196;
    goto LABEL_87;
  }
  v339 = v281;
LABEL_264:
  v50 = v321;
LABEL_265:
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v50 + 8) + 96))(__src);
  if (!v34)
  {
    LOBYTE(v164) = 0;
LABEL_272:
    v14 = v323;
    if (*(_QWORD *)(v49 + 208) != *(_QWORD *)(v49 + 216))
      goto LABEL_273;
LABEL_269:
    v165 = *(_QWORD *)(v49 + 232) == *(_QWORD *)(v49 + 240);
    v166 = *(_QWORD *)(v49 + 64);
    v167 = *(_QWORD *)(v49 + 72);
    if (v166 != v167)
      goto LABEL_274;
    goto LABEL_270;
  }
  v164 = *(_QWORD **)(v34 + 32);
  if (!v164)
    goto LABEL_272;
  if (v164[26] == v164[27])
  {
    v14 = v323;
    LOBYTE(v164) = v164[29] != v164[30];
    if (*(_QWORD *)(v49 + 208) != *(_QWORD *)(v49 + 216))
      goto LABEL_273;
    goto LABEL_269;
  }
  v14 = v323;
  LOBYTE(v164) = 1;
  if (*(_QWORD *)(v49 + 208) == *(_QWORD *)(v49 + 216))
    goto LABEL_269;
LABEL_273:
  v165 = 0;
  v166 = *(_QWORD *)(v49 + 64);
  v167 = *(_QWORD *)(v49 + 72);
  if (v166 != v167)
  {
LABEL_274:
    v168 = 0;
    while (1)
    {
      if (*(char *)(v166 + 23) < 0)
      {
        v169 = *(_QWORD *)(v166 + 8);
        if (v169 < 0)
          goto LABEL_563;
        v170 = *(uint64_t **)v166;
        if (v169 && v170 == 0)
          goto LABEL_563;
      }
      else
      {
        v169 = *(unsigned __int8 *)(v166 + 23);
        v170 = (uint64_t *)v166;
      }
      if (v169 == 45)
      {
        v173 = *v170;
        v172 = v170[1];
        v174 = v170[2];
        v160 = v170[3];
        v161 = *(_QWORD *)"rtp-stream-id";
        v162 = v170[4];
        v163 = *(_QWORD *)"tream-id";
        v175 = *(uint64_t *)((char *)v170 + 37);
        v176 = *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id" == v173
            && *(_QWORD *)":params:rtp-hdrext:sdes:rtp-stream-id" == v172;
        v177 = v176 && *(_QWORD *)"rtp-hdrext:sdes:rtp-stream-id" == v174;
        v178 = v177 && *(_QWORD *)"xt:sdes:rtp-stream-id" == v160;
        v179 = v178 && *(_QWORD *)"rtp-stream-id" == v162;
        if (v179 && *(_QWORD *)"tream-id" == v175)
        {
          if (__src[3])
          {
            v168 = v166;
            if (*(_BYTE *)(v166 + 28))
            {
LABEL_304:
              v168 = v166;
              goto LABEL_305;
            }
          }
          else if (!*(_BYTE *)(v166 + 28))
          {
            goto LABEL_304;
          }
        }
      }
      v166 += 32;
      if (v166 == v167)
        goto LABEL_305;
    }
  }
LABEL_270:
  v168 = 0;
LABEL_305:
  if ((v164 & 1) == 0)
    goto LABEL_361;
  if (v168 && !v165)
    goto LABEL_361;
  v182 = *((_QWORD *)v339[2] + 4);
  if (*((_QWORD *)v339[2] + 5) - v182 != 8)
  {
LABEL_566:
    v52 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 476, "1u == senders_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v160, v161, v162, v163, 1);
LABEL_567:
    rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v52);
  }
  v183 = *(_QWORD *)(*(_QWORD *)v182 + 24);
  if (v183)
    (**(void (***)(uint64_t))v183)(v183);
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v183 + 248))(__src, v183);
  v184 = v345;
  if (0xF0F0F0F0F0F0F0F1 * ((v345 - v344) >> 4) > 1)
  {
    memset(&v354, 0, sizeof(v354));
    v185 = v344 + 272;
    if (v344 + 272 != v345)
    {
      v186 = 0;
      do
      {
        if (*(char *)(v185 + 151) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v185 + 128), *(_QWORD *)(v185 + 136));
        else
          __p = *(std::string *)(v185 + 128);
        if ((unint64_t)v186 >= v354.__r_.__value_.__r.__words[2])
        {
          v189 = v354.__r_.__value_.__r.__words[0];
          v190 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v186 - v354.__r_.__value_.__r.__words[0]) >> 3);
          v191 = v190 + 1;
          if (v190 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_564;
          if (0x5555555555555556
             * ((uint64_t)(v354.__r_.__value_.__r.__words[2] - v354.__r_.__value_.__r.__words[0]) >> 3) > v191)
            v191 = 0x5555555555555556
                 * ((uint64_t)(v354.__r_.__value_.__r.__words[2] - v354.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v354.__r_.__value_.__r.__words[2] - v354.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            v192 = 0xAAAAAAAAAAAAAAALL;
          else
            v192 = v191;
          if (!v192)
            goto LABEL_563;
          if (v192 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:sn180100]();
          v193 = 24 * v192;
          v194 = (char *)operator new(24 * v192);
          v195 = (std::string::size_type)&v194[v193];
          v196 = (std::string *)&v194[24 * v190];
          *v196 = __p;
          memset(&__p, 0, sizeof(__p));
          v188 = (std::string::size_type)&v196[1];
          if (v186 == (_QWORD *)v189)
          {
            v354.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194[24 * v190];
            v354.__r_.__value_.__l.__size_ = (std::string::size_type)&v196[1];
            v354.__r_.__value_.__r.__words[2] = v195;
          }
          else
          {
            do
            {
              v197 = *(_OWORD *)(v186 - 3);
              v196[-1].__r_.__value_.__r.__words[2] = *(v186 - 1);
              *(_OWORD *)&v196[-1].__r_.__value_.__l.__data_ = v197;
              --v196;
              *(v186 - 2) = 0;
              *(v186 - 1) = 0;
              *(v186 - 3) = 0;
              v186 -= 3;
            }
            while (v186 != (_QWORD *)v189);
            v198 = v354.__r_.__value_.__l.__size_;
            v186 = (_QWORD *)v354.__r_.__value_.__r.__words[0];
            v354.__r_.__value_.__r.__words[0] = (std::string::size_type)v196;
            v354.__r_.__value_.__l.__size_ = v188;
            v354.__r_.__value_.__r.__words[2] = v195;
            while ((_QWORD *)v198 != v186)
            {
              if (*(char *)(v198 - 1) < 0)
                operator delete(*(void **)(v198 - 24));
              v198 -= 24;
            }
          }
          if (v186)
            operator delete(v186);
          v354.__r_.__value_.__l.__size_ = v188;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          if (!v186)
            goto LABEL_563;
          v187 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v186[2] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v186 = v187;
          v188 = (std::string::size_type)(v186 + 3);
          v354.__r_.__value_.__l.__size_ = (std::string::size_type)(v186 + 3);
        }
        v185 += 272;
        v186 = (_QWORD *)v188;
        v14 = v323;
      }
      while (v185 != v184);
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v183 + 280))(&v352, v183, &v354);
    v199 = v354.__r_.__value_.__r.__words[0];
    if (v354.__r_.__value_.__r.__words[0])
    {
      v200 = v354.__r_.__value_.__l.__size_;
      v201 = (void *)v354.__r_.__value_.__r.__words[0];
      if (v354.__r_.__value_.__l.__size_ != v354.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v200 - 1) < 0)
            operator delete(*(void **)(v200 - 24));
          v200 -= 24;
        }
        while (v200 != v199);
        v201 = (void *)v354.__r_.__value_.__r.__words[0];
      }
      v354.__r_.__value_.__l.__size_ = v199;
      operator delete(v201);
    }
  }
  else
  {
    LODWORD(v352.__r_.__value_.__l.__data_) = 0;
    v353[14] = 0;
    *(_QWORD *)v353 = 0;
    *(_OWORD *)&v352.__r_.__value_.__r.__words[1] = 0uLL;
    *(_QWORD *)&v353[5] = 0;
  }
  webrtc::RtpParameters::~RtpParameters((void **)__src);
  (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
  v50 = v321;
  if (LODWORD(v352.__r_.__value_.__l.__data_))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v202, v203, v204, v205, v206, v207, v208, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    data = (int)v352.__r_.__value_.__l.__data_;
    v82 = v352.__r_.__value_.__r.__words[2];
    v75 = (void *)v352.__r_.__value_.__l.__size_;
    v81 = *(_QWORD *)v353;
    v80 = HIBYTE(*(_QWORD *)v353);
    v77 = *(_DWORD *)&v353[8];
    v76 = v353[12];
    v308 = v353[13];
    v78 = v353[14];
    v83 = (uint64_t)v339;
    if (!v339)
      goto LABEL_418;
LABEL_417:
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
    goto LABEL_418;
  }
  if ((v353[7] & 0x80000000) != 0)
    operator delete((void *)v352.__r_.__value_.__l.__size_);
LABEL_361:
  v209 = v339;
  v210 = (*((uint64_t (**)(webrtc::RtpTransceiver **))*v339 + 4))(v339);
  if (v210 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      *(_QWORD *)__src = "INVALID_PARAMETER";
      *(_QWORD *)&__src[8] = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v229, v230, v231, v232, v233, v234, v235, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    }
    v236 = (char *)operator new(0x38uLL);
    v75 = v236;
    if (v236 > "Transceiver type does not match media description type."
      || v236 + 55 <= "Transceiver type does not match media description type.")
    {
      v76 = 0;
      v77 = 0;
      v78 = 0;
      strcpy(v236, "Transceiver type does not match media description type.");
      data = 3;
      LOBYTE(v80) = 0x80;
      v81 = 56;
      v82 = 55;
      v83 = (uint64_t)v339;
      if (!v339)
        goto LABEL_418;
      goto LABEL_417;
    }
LABEL_563:
    __break(1u);
LABEL_564:
    abort();
  }
  if (*(_QWORD *)(v49 + 208) == *(_QWORD *)(v49 + 216) && *(_QWORD *)(v49 + 232) == *(_QWORD *)(v49 + 240))
    goto LABEL_458;
  if (a3)
    v211 = (__int128 ***)(v49 + 232);
  else
    v211 = (__int128 ***)(v49 + 208);
  cricket::SimulcastLayerList::GetAllLayers(v211, (std::string **)&v332);
  v212 = *((_QWORD *)v209[2] + 4);
  if (*((_QWORD *)v209[2] + 5) - v212 != 8)
    goto LABEL_566;
  v213 = *(_QWORD *)(*(_QWORD *)v212 + 24);
  if (v213)
    (**(void (***)(uint64_t))v213)(v213);
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v213 + 248))(__src, v213);
  memset(&v354, 0, sizeof(v354));
  v214 = v344;
  v215 = v345;
  if (v344 != v345)
  {
    v216 = 0;
    do
    {
      v217 = (void **)v332;
      v218 = v333;
      if (v332 != v333)
      {
        if (*(char *)(v214 + 151) >= 0)
          v219 = (void *)*(unsigned __int8 *)(v214 + 151);
        else
          v219 = *(void **)(v214 + 136);
        if ((*(_BYTE *)(v214 + 151) & 0x80) != 0)
        {
          while (1)
          {
            v223 = *((unsigned __int8 *)v217 + 23);
            if ((v223 & 0x80u) == 0)
              v224 = (void *)*((unsigned __int8 *)v217 + 23);
            else
              v224 = v217[1];
            if (v224 == v219)
            {
              v225 = *(unsigned __int8 **)(v214 + 128);
              if ((v223 & 0x80) != 0)
              {
                if (!memcmp(*v217, v225, (size_t)v217[1]))
                  goto LABEL_372;
              }
              else
              {
                if (!*((_BYTE *)v217 + 23))
                  goto LABEL_372;
                v226 = 0;
                while (*((unsigned __int8 *)v217 + v226) == v225[v226])
                {
                  if (v223 == ++v226)
                    goto LABEL_372;
                }
              }
            }
            v217 += 4;
            if (v217 == v218)
              goto LABEL_405;
          }
        }
        while (1)
        {
          v220 = *((unsigned __int8 *)v217 + 23);
          if ((v220 & 0x80u) == 0)
            v221 = (void *)*((unsigned __int8 *)v217 + 23);
          else
            v221 = v217[1];
          if (v221 == v219)
          {
            if ((v220 & 0x80) != 0)
            {
              if (!memcmp(*v217, (const void *)(v214 + 128), (size_t)v217[1]))
                break;
            }
            else
            {
              if (!*((_BYTE *)v217 + 23))
                break;
              v222 = 0;
              while (*((unsigned __int8 *)v217 + v222) == *(unsigned __int8 *)(v214 + v222 + 128))
              {
                if (v220 == ++v222)
                  goto LABEL_372;
              }
            }
          }
          v217 += 4;
          if (v217 == v218)
            goto LABEL_405;
        }
      }
LABEL_372:
      if (v217 == v218)
      {
LABEL_405:
        v227 = (__int128 *)(v214 + 128);
        if ((unint64_t)v216 >= v354.__r_.__value_.__r.__words[2])
        {
          v216 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v354, (uint64_t)v227);
          v354.__r_.__value_.__l.__size_ = (std::string::size_type)v216;
        }
        else
        {
          if (!v216)
            goto LABEL_563;
          if (*(char *)(v214 + 151) < 0)
          {
            std::string::__init_copy_ctor_external(v216, *(const std::string::value_type **)(v214 + 128), *(_QWORD *)(v214 + 136));
          }
          else
          {
            v228 = *v227;
            v216->__r_.__value_.__r.__words[2] = *(_QWORD *)(v214 + 144);
            *(_OWORD *)&v216->__r_.__value_.__l.__data_ = v228;
          }
          v354.__r_.__value_.__l.__size_ = (std::string::size_type)++v216;
        }
      }
      else
      {
        *(_BYTE *)(v214 + 124) = *((_BYTE *)v217 + 24) ^ 1;
      }
      v214 += 272;
    }
    while (v214 != v215);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v213 + 256))(&__p, v213, __src);
  v14 = v323;
  if (!LODWORD(__p.__r_.__value_.__l.__data_))
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v213 + 280))(&v352, v213, &v354);
    LODWORD(__p.__r_.__value_.__l.__data_) = v352.__r_.__value_.__l.__data_;
    if (SHIBYTE(v330) < 0)
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)&v352.__r_.__value_.__r.__words[1];
    v330 = *(_QWORD *)v353;
    *(_DWORD *)v331 = *(_DWORD *)&v353[8];
    *(_DWORD *)&v331[3] = *(_DWORD *)&v353[11];
  }
  v237 = v354.__r_.__value_.__r.__words[0];
  if (v354.__r_.__value_.__r.__words[0])
  {
    v238 = v354.__r_.__value_.__l.__size_;
    v239 = (void *)v354.__r_.__value_.__r.__words[0];
    if (v354.__r_.__value_.__l.__size_ != v354.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v238 - 1) < 0)
          operator delete(*(void **)(v238 - 24));
        v238 -= 24;
      }
      while (v238 != v237);
      v239 = (void *)v354.__r_.__value_.__r.__words[0];
    }
    v354.__r_.__value_.__l.__size_ = v237;
    operator delete(v239);
  }
  webrtc::RtpParameters::~RtpParameters((void **)__src);
  (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
  if (!LODWORD(__p.__r_.__value_.__l.__data_))
  {
    if (SHIBYTE(v330) < 0)
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    v250 = (void **)v332;
    if (v332)
    {
      v251 = v333;
      v252 = v332;
      if (v333 != v332)
      {
        do
        {
          if (*((char *)v251 - 9) < 0)
            operator delete(*(v251 - 4));
          v251 -= 4;
        }
        while (v251 != v250);
        v252 = v332;
      }
      v333 = v250;
      operator delete(v252);
    }
    v209 = v339;
    v50 = v321;
LABEL_458:
    if (v316)
    {
LABEL_506:
      v277 = v209[2];
      if ((v21[23] & 0x80000000) == 0)
      {
LABEL_507:
        v278 = *(_OWORD *)v21;
        *(_QWORD *)&__src[16] = *((_QWORD *)v21 + 2);
        *(_OWORD *)__src = v278;
LABEL_525:
        __src[24] = 1;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)v277 + 104), (std::string *)__src);
        if (__src[24] && (__src[23] & 0x80000000) != 0)
          operator delete(*(void **)__src);
        v283 = v209[2];
        *((_QWORD *)v283 + 17) = v14;
        *((_BYTE *)v283 + 144) = 1;
        (*(void (**)(webrtc::RtpTransceiver **))*v209)(v209);
        webrtc::SdpOfferAnswerHandler::UpdateTransceiverChannel(a1, v50, v209[2], (uint64_t)v21);
        (*((void (**)(webrtc::RtpTransceiver **))*v209 + 1))(v209);
        if (!a3 && *(_BYTE *)(v322 + 40 * v14 + 28))
        {
          v284 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v315 + 56))(v315);
          v285 = *(_QWORD *)v209[2];
          if (v284)
          {
            if (((*(uint64_t (**)(void))(v285 + 64))() & 1) == 0)
              webrtc::RtpTransceiver::StopTransceiverProcedure((uint64_t)v209[2]);
          }
          else if (((*(uint64_t (**)(void))(v285 + 72))() & 1) == 0)
          {
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v209[2] + 120))(v324);
            if (v325 < 0)
              operator delete(v324[1]);
          }
        }
        v286 = *(_DWORD *)a1;
        if (!*(_DWORD *)a1 && *(char *)(a1 + 31) < 0)
        {
          operator delete(*v309);
          (*((void (**)(webrtc::RtpTransceiver **))*v209 + 1))(v209);
          a7 = v313;
          goto LABEL_27;
        }
        (*((void (**)(webrtc::RtpTransceiver **))*v209 + 1))(v209);
        a7 = v313;
        if (v286)
          return;
        goto LABEL_27;
      }
LABEL_524:
      std::string::__init_copy_ctor_external((std::string *)__src, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
      goto LABEL_525;
    }
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v209[2] + 40))(__src);
    if (!__src[24])
    {
LABEL_496:
      v50 = v321;
      if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v321 + 8) + 64))(*(_QWORD *)(v321 + 8)))
      {
        v272 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v321 + 8) + 64))(*(_QWORD *)(v321 + 8)) + 8;
        v328 = v209;
        if (!v209)
        {
LABEL_499:
          v273 = std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>>>::__emplace_unique_key_args<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::piecewise_construct_t const&,std::tuple<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>,std::tuple<>>((uint64_t **)(v272 + 24), (unint64_t)v209, (void (****)(_QWORD))&v328);
          v209 = v339;
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v339[2] + 40))(&v326);
          if (!*((_BYTE *)v273 + 152))
          {
            v274 = v209[2];
            v276 = (uint64_t *)*((_QWORD *)v274 + 17);
            v275 = *((_QWORD *)v274 + 18);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v273 + 5), &v326);
            v273[9] = v276;
            *((_BYTE *)v273 + 80) = v275;
            v50 = v321;
            *((_BYTE *)v273 + 152) = 1;
          }
          if (v327 && SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v326.__r_.__value_.__l.__data_);
          if (v328)
            (*((void (**)(webrtc::RtpTransceiver **))*v328 + 1))(v328);
          goto LABEL_506;
        }
      }
      else
      {
        v272 = 0;
        v328 = v209;
        if (!v209)
          goto LABEL_499;
      }
      (*(void (**)(webrtc::RtpTransceiver **))*v209)(v209);
      goto LABEL_499;
    }
    v253 = __src[23];
    if (__src[23] >= 0)
      v254 = __src[23];
    else
      v254 = *(_QWORD *)&__src[8];
    v255 = v21[23];
    v256 = (char)v255;
    if ((v255 & 0x80u) != 0)
      v255 = *((_QWORD *)v21 + 1);
    if (v254 == v255)
    {
      if (v256 >= 0)
        v257 = v21;
      else
        v257 = *(char **)v21;
      if ((__src[23] & 0x80) == 0)
      {
        if (__src[23])
        {
          v258 = __src;
          v259 = __src[23];
          while (*v258 == *v257)
          {
            ++v258;
            ++v257;
            if (!--v259)
              goto LABEL_487;
          }
          goto LABEL_496;
        }
        goto LABEL_487;
      }
      v260 = *(void **)__src;
      if (!memcmp(*(const void **)__src, v257, *(size_t *)&__src[8]))
      {
LABEL_487:
        v269 = v209[2];
        if (*((_BYTE *)v269 + 144))
          v270 = *((_QWORD *)v269 + 17) == v14;
        else
          v270 = 0;
        v271 = !v270;
        if (v253 < 0)
          operator delete(*(void **)__src);
        if ((v271 & 1) == 0)
        {
          v50 = v321;
          v277 = v209[2];
          if ((v21[23] & 0x80000000) == 0)
            goto LABEL_507;
          goto LABEL_524;
        }
        goto LABEL_496;
      }
    }
    else
    {
      if ((__src[23] & 0x80) == 0)
        goto LABEL_496;
      v260 = *(void **)__src;
    }
    operator delete(v260);
    goto LABEL_496;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v240, v241, v242, v243, v244, v245, v246, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
  data = (int)__p.__r_.__value_.__l.__data_;
  v82 = __p.__r_.__value_.__r.__words[2];
  v75 = (void *)__p.__r_.__value_.__l.__size_;
  v81 = v330;
  v77 = *(_DWORD *)v331;
  v76 = v331[4];
  v308 = v331[5];
  v78 = v331[6];
  v247 = (void **)v332;
  if (v332)
  {
    v248 = v333;
    v249 = v332;
    if (v333 != v332)
    {
      do
      {
        if (*((char *)v248 - 9) < 0)
          operator delete(*(v248 - 4));
        v248 -= 4;
      }
      while (v248 != v247);
      v249 = v332;
    }
    v333 = v247;
    operator delete(v249);
  }
  v80 = HIBYTE(v81);
  v83 = (uint64_t)v339;
  if (v339)
    goto LABEL_417;
LABEL_418:
  if (!data)
    goto LABEL_563;
  if (*(_BYTE *)(v322 + 40 * v323 + 28))
  {
    if ((v80 & 0x80) != 0)
      operator delete(v75);
    a7 = v313;
    v14 = v323;
    goto LABEL_27;
  }
  *(_DWORD *)a1 = data;
  *(_QWORD *)(a1 + 8) = v75;
  *(_QWORD *)(a1 + 16) = v82;
  *(_QWORD *)(a1 + 24) = v81 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v80 << 56);
  *(_DWORD *)(a1 + 32) = v77;
  *(_BYTE *)(a1 + 36) = v76;
  *(_BYTE *)(a1 + 37) = v308;
  *(_BYTE *)(a1 + 38) = v78;
}

uint64_t webrtc::TransceiverList::List(webrtc::TransceiverList *this, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  result = a3 - a2;
  if (a3 != a2)
  {
    if (result < 0)
      abort();
    v7 = result >> 3;
    v8 = (char *)operator new(result);
    v9 = 0;
    *(_QWORD *)this = v8;
    *((_QWORD *)this + 2) = &v8[8 * v7];
    do
    {
      result = *(_QWORD *)(a2 + v9);
      *(_QWORD *)&v8[v9] = result;
      if (result)
        result = (**(uint64_t (***)(uint64_t))result)(result);
      v9 += 8;
    }
    while (a2 + v9 != a3);
    *((_QWORD *)this + 1) = &v8[v9];
  }
  return result;
}

_QWORD *webrtc::SdpOfferAnswerHandler::FindMediaSectionForTransceiver(webrtc::SdpOfferAnswerHandler *this, const webrtc::RtpTransceiver *a2, const webrtc::SessionDescriptionInterface *a3)
{
  uint64_t *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  void **v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *__p[2];
  unsigned __int8 v21;
  char v22;

  if (!(*(unsigned int (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)this + 192))(this))
  {
    v12 = (uint64_t *)(*(uint64_t (**)(const webrtc::SessionDescriptionInterface *))(*(_QWORD *)a3 + 32))(a3);
    v13 = (*(uint64_t (**)(const webrtc::RtpTransceiver *))(*(_QWORD *)a2 + 32))(a2);
    v7 = *v12;
    v14 = v12[1];
    if (v7 != v14)
    {
      v15 = v13;
      do
      {
        if (v7)
        {
          v16 = *(_QWORD *)(v7 + 32);
          if (v16)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16) == v15)
              return (_QWORD *)v7;
          }
        }
        v7 += 40;
      }
      while (v7 != v14);
    }
    return 0;
  }
  (*(void (**)(void **__return_ptr, const webrtc::RtpTransceiver *))(*(_QWORD *)a2 + 40))(__p, a2);
  if (!v22)
    return 0;
  if ((char)v21 < 0)
    operator delete(__p[0]);
  v5 = (uint64_t *)(*(uint64_t (**)(const webrtc::SessionDescriptionInterface *))(*(_QWORD *)a3 + 32))(a3);
  result = (*(_QWORD *(**)(void **__return_ptr, const webrtc::RtpTransceiver *))(*(_QWORD *)a2 + 40))(__p, a2);
  if (!v22)
  {
    __break(1u);
    return result;
  }
  v7 = *v5;
  v8 = v5[1];
  v9 = v21;
  if (*v5 == v8)
  {
LABEL_34:
    v7 = 0;
    if ((v9 & 0x80) != 0)
      goto LABEL_35;
    return (_QWORD *)v7;
  }
  if ((v21 & 0x80u) == 0)
    v10 = v21;
  else
    v10 = (unint64_t)__p[1];
  if ((v21 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  while (1)
  {
    v17 = *(unsigned __int8 *)(v7 + 23);
    if ((v17 & 0x80u) == 0)
      v18 = (void *)*(unsigned __int8 *)(v7 + 23);
    else
      v18 = *(void **)(v7 + 8);
    if (v18 != (void *)v10)
      goto LABEL_22;
    if ((v17 & 0x80) == 0)
      break;
    if (!memcmp(*(const void **)v7, v11, *(_QWORD *)(v7 + 8)))
      goto LABEL_32;
LABEL_22:
    v7 += 40;
    if (v7 == v8)
      goto LABEL_34;
  }
  if (*(_BYTE *)(v7 + 23))
  {
    v19 = 0;
    while (*(unsigned __int8 *)(v7 + v19) == *((unsigned __int8 *)v11 + v19))
    {
      if (v17 == ++v19)
        goto LABEL_32;
    }
    goto LABEL_22;
  }
LABEL_32:
  if ((v9 & 0x80) == 0)
    return (_QWORD *)v7;
LABEL_35:
  operator delete(__p[0]);
  return (_QWORD *)v7;
}

void webrtc::SdpOfferAnswerHandler::ProcessRemovalOfRemoteTrack(uint64_t a1, _QWORD *a2, char **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void **v20;
  void *v21;
  void (***v22)(_QWORD);
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void **v56;
  uint64_t v57;
  void *__p;
  uint64_t *v59;
  char v60;
  char v61;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 40))(&__p);
    if (!v61)
    {
LABEL_56:
      __break(1u);
LABEL_57:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 483, "1u == receivers_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v8, v9, v10, v11, 1);
LABEL_58:
      abort();
    }
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v12, v13, v14, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    if (v61 && v60 < 0)
      operator delete(__p);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(*a2 + 16) + 56);
  if (*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 64) - v15 != 8)
    goto LABEL_57;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 32);
  if (v16)
    (**(void (***)(uint64_t))v16)(v16);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v16 + 56))(&__p, v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(*(_QWORD *)(*a2 + 16) + 56);
  if (*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 64) - v17 != 8)
    goto LABEL_57;
  v18 = *(_QWORD *)(*(_QWORD *)v17 + 32);
  if (v18)
    (**(void (***)(uint64_t))v18)(v18);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 216))(v18, &v55);
  v19 = (void **)v55;
  if (v55)
  {
    v20 = v56;
    v21 = v55;
    if (v56 != v55)
    {
      do
      {
        if (*((char *)v20 - 1) < 0)
          operator delete(*(v20 - 3));
        v20 -= 3;
      }
      while (v20 != v19);
      v21 = v55;
    }
    v56 = v19;
    operator delete(v21);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v22 = (void (***)(_QWORD))*a2;
  if (*a2)
    (**v22)(*a2);
  v24 = a3[1];
  v23 = (unint64_t)a3[2];
  if ((unint64_t)v24 < v23)
  {
    if (v24)
    {
      *(_QWORD *)v24 = v22;
      v25 = v24 + 8;
      goto LABEL_47;
    }
    goto LABEL_56;
  }
  v26 = *a3;
  v27 = v24 - *a3;
  v28 = v27 >> 3;
  v29 = (v27 >> 3) + 1;
  if (v29 >> 61)
    goto LABEL_58;
  v30 = v23 - (_QWORD)v26;
  if (v30 >> 2 > v29)
    v29 = v30 >> 2;
  v31 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8;
  v32 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v31)
    v32 = v29;
  if (!v32)
    goto LABEL_56;
  if (v32 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v33 = 8 * v32;
  v34 = (char *)operator new(8 * v32);
  v35 = &v34[v33];
  v36 = &v34[8 * v28];
  *(_QWORD *)v36 = v22;
  v25 = v36 + 8;
  if (v24 == v26)
  {
    *a3 = v36;
    a3[1] = v25;
    a3[2] = v35;
  }
  else
  {
    v37 = v24 - v26 - 8;
    if (v37 < 0x78
      || &v24[-(v37 & 0xFFFFFFFFFFFFFFF8) - 8] < v36 && &v34[v27 - (v37 & 0xFFFFFFFFFFFFFFF8) - 8] < v24)
    {
      goto LABEL_62;
    }
    v38 = (v37 >> 3) + 1;
    v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
    v40 = &v24[-v39];
    v36 -= v39;
    v41 = &v34[8 * v28 - 16];
    v42 = v24 - 16;
    v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *((_OWORD *)v42 - 1);
      v44 = *(_OWORD *)v42;
      *((_OWORD *)v42 - 1) = 0uLL;
      *(_OWORD *)v42 = 0uLL;
      *((_OWORD *)v41 - 1) = v45;
      *(_OWORD *)v41 = v44;
      v41 -= 32;
      v42 -= 32;
      v43 -= 4;
    }
    while (v43);
    v24 = v40;
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_62:
      do
      {
        v46 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v24 != v26);
    }
    v24 = *a3;
    v47 = a3[1];
    *a3 = v36;
    a3[1] = v25;
    a3[2] = v35;
    while (v47 != v24)
    {
      v49 = *((_QWORD *)v47 - 1);
      v47 -= 8;
      v48 = v49;
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    }
  }
  if (v24)
    operator delete(v24);
LABEL_47:
  a3[1] = v25;
  webrtc::SdpOfferAnswerHandler::RemoveRemoteStreamsIfEmpty(a1, (uint64_t *)__p, v59, a4);
  v50 = (uint64_t *)__p;
  if (__p)
  {
    v51 = v59;
    v52 = __p;
    if (v59 != __p)
    {
      do
      {
        v54 = *--v51;
        v53 = v54;
        if (v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
      }
      while (v51 != v50);
      v52 = __p;
    }
    v59 = v50;
    operator delete(v52);
  }
}

void **std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>::~vector[abi:sn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void webrtc::SdpOfferAnswerHandler::CreateChannels(webrtc::SdpOfferAnswerHandler *this, const cricket::SessionDescription *a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  webrtc::RtpTransmissionManager *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  webrtc::RtpTransmissionManager *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  webrtc::RtpTransmissionManager *v20;
  uint64_t v21;
  size_t v22;
  webrtc::RtpTransmissionManager *v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  uint64_t v49;
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v7 = a3[1];
  while (1)
  {
    if (v6 == v7)
      goto LABEL_9;
    if (v6)
    {
      v8 = v6[4];
      if (v8)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8))
          break;
      }
    }
    v6 += 5;
  }
  if (*((_BYTE *)v6 + 28))
    goto LABEL_9;
  v9 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 64))(*((_QWORD *)a2 + 1));
  webrtc::RtpTransmissionManager::GetAudioTransceiver(v9, v48);
  v10 = *(_QWORD *)(*(_QWORD *)(v48[0] + 16) + 160);
  (*(void (**)(_QWORD))(*(_QWORD *)v48[0] + 8))(v48[0]);
  if (v10)
    goto LABEL_9;
  v20 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 64))(*((_QWORD *)a2 + 1));
  webrtc::RtpTransmissionManager::GetAudioTransceiver(v20, v48);
  v21 = v48[0];
  v46 = *(_QWORD *)(v48[0] + 16);
  if (*((char *)v6 + 23) < 0)
  {
    v22 = v6[1];
    if ((v22 & 0x8000000000000000) != 0)
      goto LABEL_63;
    v6 = (uint64_t *)*v6;
    if (v22)
    {
      if (!v6)
        goto LABEL_63;
    }
  }
  else
  {
    v22 = *((unsigned __int8 *)v6 + 23);
  }
  v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 232))(*((_QWORD *)a2 + 1));
  v35 = (uint64_t *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 40))(*((_QWORD *)a2 + 1)) + 124);
  v36 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 240))(*((_QWORD *)a2 + 1));
  (*(void (**)(char *__return_ptr))(**((_QWORD **)a2 + 1) + 96))((char *)&v49 + 5);
  v37 = *((_QWORD *)a2 + 46);
  v52[0] = &off_24C0C0860;
  v52[1] = a2;
  v53 = v52;
  webrtc::RtpTransceiver::CreateChannel((char *)v6, v22, v46, v34, v35, v36, (uint64_t)&v49 + 5, (_BYTE *)a2 + 264, (uint64_t)this, (_BYTE *)a2 + 344, v37, v52);
  v38 = v53;
  if (v53 == v52)
  {
    v39 = 4;
    v38 = v52;
    goto LABEL_48;
  }
  if (v53)
  {
    v39 = 5;
LABEL_48:
    (*(void (**)(void))(*v38 + 8 * v39))();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (*(_DWORD *)this)
    return;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
LABEL_9:
  v11 = *a3;
  v12 = a3[1];
  while (1)
  {
    if (v11 == v12)
      goto LABEL_17;
    if (v11)
    {
      v13 = v11[4];
      if (v13)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13) == 1)
          break;
      }
    }
    v11 += 5;
  }
  if (*((_BYTE *)v11 + 28))
    goto LABEL_17;
  v14 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 64))(*((_QWORD *)a2 + 1));
  webrtc::RtpTransmissionManager::GetVideoTransceiver(v14, v48);
  v15 = *(_QWORD *)(*(_QWORD *)(v48[0] + 16) + 160);
  (*(void (**)(_QWORD))(*(_QWORD *)v48[0] + 8))(v48[0]);
  if (v15)
    goto LABEL_17;
  v23 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 64))(*((_QWORD *)a2 + 1));
  webrtc::RtpTransmissionManager::GetVideoTransceiver(v23, v48);
  v24 = v48[0];
  v47 = *(_QWORD *)(v48[0] + 16);
  if (*((char *)v11 + 23) < 0)
  {
    v25 = v11[1];
    if ((v25 & 0x8000000000000000) != 0)
      goto LABEL_63;
    v11 = (uint64_t *)*v11;
    if (v25)
    {
      if (!v11)
        goto LABEL_63;
    }
  }
  else
  {
    v25 = *((unsigned __int8 *)v11 + 23);
  }
  v40 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 232))(*((_QWORD *)a2 + 1));
  v41 = (uint64_t *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 40))(*((_QWORD *)a2 + 1)) + 124);
  v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 240))(*((_QWORD *)a2 + 1));
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)a2 + 1) + 96))(&v49);
  v43 = *((_QWORD *)a2 + 46);
  v50[0] = &off_24C0C08A8;
  v50[1] = a2;
  v51 = v50;
  webrtc::RtpTransceiver::CreateChannel((char *)v11, v25, v47, v40, v41, v42, (uint64_t)&v49, (_BYTE *)a2 + 264, (uint64_t)this, (_BYTE *)a2 + 344, v43, v50);
  v44 = v51;
  if (v51 == v50)
  {
    v45 = 4;
    v44 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_60;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_60:
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (!*(_DWORD *)this)
  {
    if (*((char *)this + 31) < 0)
      operator delete(*((void **)this + 1));
LABEL_17:
    v17 = *a3;
    v16 = a3[1];
    while (1)
    {
      if (v17 == v16)
        goto LABEL_34;
      if (v17)
      {
        v18 = v17[4];
        if (v18)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18) == 2)
            break;
        }
      }
      v17 += 5;
    }
    if (*((_BYTE *)v17 + 28))
      goto LABEL_34;
    if (*((char *)v17 + 23) < 0)
    {
      v19 = v17[1];
      if (v19 < 0)
        goto LABEL_63;
      v17 = (uint64_t *)*v17;
      if (v19)
      {
        if (!v17)
          goto LABEL_63;
      }
    }
    else
    {
      v19 = *((unsigned __int8 *)v17 + 23);
    }
    if (((*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)a2 + 1) + 248))(*((_QWORD *)a2 + 1), v17, v19) & 1) != 0)
    {
LABEL_34:
      *(_DWORD *)this = 0;
      *((_BYTE *)this + 38) = 0;
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 1) = 0;
      *(_QWORD *)((char *)this + 29) = 0;
      return;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v48[0] = "INTERNAL_ERROR";
      v48[1] = 14;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    }
    *(_DWORD *)this = 10;
    v33 = (char *)operator new(0x20uLL);
    *((_QWORD *)this + 1) = v33;
    *((_OWORD *)this + 1) = xmmword_208F05710;
    if (v33 > "Failed to create data channel." || v33 + 30 <= "Failed to create data channel.")
    {
      strcpy(v33, "Failed to create data channel.");
      *((_DWORD *)this + 8) = 0;
      *((_BYTE *)this + 36) = 0;
      *((_BYTE *)this + 38) = 0;
      return;
    }
LABEL_63:
    __break(1u);
  }
}

void webrtc::SdpOfferAnswerHandler::RemoveUnusedChannels(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  webrtc::RtpTransmissionManager *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  webrtc::RtpTransmissionManager *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  size_t v19;
  BOOL v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  std::string::size_type v25;
  std::string::size_type size;
  unint64_t v27;
  int v28;
  std::string::size_type v29;
  std::string *v30;
  _BYTE *v31;
  std::string::size_type v32;
  char v33;
  std::string *p_src;
  std::string::size_type v35;
  std::string *v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  std::string __p;
  _DWORD v43[2];
  std::string __src;
  uint64_t v45;
  std::string v46;
  _BYTE v47[7];
  std::string v48;
  int v49;
  std::string v50;
  int v51;
  char v52;
  char v53;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96))
  {
    if (a2)
    {
      v4 = *a2;
      v5 = a2[1];
      while (v4 != v5)
      {
        if (v4)
        {
          v6 = *((_QWORD *)v4 + 4);
          if (v6)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) == 1)
            {
              if (!v4[28])
                goto LABEL_11;
              break;
            }
          }
        }
        v4 += 40;
      }
    }
    v7 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
    webrtc::RtpTransmissionManager::GetVideoTransceiver(v7, &v45);
    v8 = v45;
    webrtc::RtpTransceiver::ClearChannel(*(_QWORD **)(v45 + 16));
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
LABEL_11:
    if (a2)
    {
      v9 = *a2;
      v10 = a2[1];
      while (v9 != v10)
      {
        if (v9)
        {
          v11 = *((_QWORD *)v9 + 4);
          if (v11)
          {
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
            {
              if (!v9[28])
                goto LABEL_20;
              break;
            }
          }
        }
        v9 += 40;
      }
    }
    v12 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
    webrtc::RtpTransmissionManager::GetAudioTransceiver(v12, &v45);
    v13 = v45;
    webrtc::RtpTransceiver::ClearChannel(*(_QWORD **)(v45 + 16));
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
LABEL_20:
  if (!a2)
  {
LABEL_32:
    v21 = (char *)operator new(0x30uLL);
    v22 = v21;
    if (v21 > "No data channel section in the description."
      || v21 + 43 <= "No data channel section in the description.")
    {
      strcpy(v21, "No data channel section in the description.");
      v23 = *(_QWORD *)(a1 + 8);
      v49 = 11;
      std::string::__init_copy_ctor_external(&v50, v21, 0x2BuLL);
      v51 = 1;
      v52 = 0;
      v53 = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v23 + 256))(v23, &v49);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      v24 = v22;
      goto LABEL_37;
    }
    goto LABEL_91;
  }
  v15 = *a2;
  v14 = a2[1];
  while (1)
  {
    if (v15 == v14)
      goto LABEL_32;
    if (v15)
    {
      v16 = *((_QWORD *)v15 + 4);
      if (v16)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16) == 2)
          break;
      }
    }
    v15 += 40;
  }
  if (!v15[28])
    return;
  v17 = (char *)operator new(0x30uLL);
  v18 = v17 + 31;
  if (v17 <= "Rejected data channel with mid=" && v18 > "Rejected data channel with mid=")
    goto LABEL_91;
  strcpy(v17, "Rejected data channel with mid=");
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  *(_OWORD *)&v48.__r_.__value_.__r.__words[1] = xmmword_208F086D0;
  if (v15[23] < 0)
  {
    v19 = *((_QWORD *)v15 + 1);
    if ((v19 & 0x8000000000000000) != 0)
      goto LABEL_91;
    v15 = *(char **)v15;
    v20 = v19 == 0;
    if (v19)
    {
      if (!v15)
        goto LABEL_91;
    }
  }
  else
  {
    v19 = v15[23];
    v20 = v15[23] == 0;
  }
  if (v19 <= 0x10)
  {
    v27 = 0x8000000000000030;
    if (v20)
    {
      LODWORD(v25) = 128;
      size = 31;
    }
    else
    {
      if (v18 <= v15 && &v18[v19] > v15)
        goto LABEL_91;
      memmove(v18, v15, v19);
      size = v19 + 31;
      v48.__r_.__value_.__l.__size_ = size;
      v17[size] = 0;
      LODWORD(v25) = 128;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v48, 0x2FuLL, v19 - 16, 0x1FuLL, 0x1FuLL, 0, v19, v15);
    LODWORD(v25) = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    v27 = v48.__r_.__value_.__r.__words[2];
    size = v48.__r_.__value_.__l.__size_;
  }
  v28 = (char)v25;
  v25 = v25;
  if ((v25 & 0x80u) == 0)
    v29 = 22;
  else
    v29 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v25 & 0x80u) != 0)
    v25 = size;
  if (v29 == v25)
  {
    std::string::__grow_by_and_replace(&v48, v29, 1uLL, v29, v29, 0, 1uLL, ".");
  }
  else
  {
    v30 = (std::string *)v48.__r_.__value_.__r.__words[0];
    if (v28 >= 0)
      v30 = &v48;
    v31 = (char *)v30 + v25;
    if ((char *)v30 + v25 <= "." && v31 + 1 > ".")
      goto LABEL_91;
    *v31 = 46;
    v32 = v25 + 1;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      v48.__r_.__value_.__l.__size_ = v32;
    else
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v32 & 0x7F;
    v30->__r_.__value_.__s.__data_[v32] = 0;
  }
  __src = v48;
  memset(&v48, 0, sizeof(v48));
  v33 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    v35 = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
    {
      p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
      if (!__src.__r_.__value_.__l.__size_ || __src.__r_.__value_.__r.__words[0])
      {
        LODWORD(v45) = 11;
        if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_92;
        if (__src.__r_.__value_.__l.__size_ <= 0x16)
          goto LABEL_66;
        goto LABEL_73;
      }
    }
LABEL_91:
    __break(1u);
LABEL_92:
    abort();
  }
  LODWORD(v45) = 11;
  p_src = &__src;
  v35 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  if (HIBYTE(__src.__r_.__value_.__r.__words[2]) <= 0x16uLL)
  {
LABEL_66:
    *((_BYTE *)&v46.__r_.__value_.__s + 23) = v35;
    v36 = &v46;
    v37 = (std::string *)((char *)&v46 + v35);
    if (&v46 > p_src)
      goto LABEL_77;
    goto LABEL_76;
  }
LABEL_73:
  v38 = (v35 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v35 | 7) != 0x17)
    v38 = v35 | 7;
  v39 = v38 + 1;
  v36 = (std::string *)operator new(v38 + 1);
  v46.__r_.__value_.__l.__size_ = v35;
  v46.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
  v37 = (std::string *)((char *)v36 + v35);
  if (v36 <= p_src)
  {
LABEL_76:
    if (v37 <= p_src)
      goto LABEL_77;
    goto LABEL_91;
  }
LABEL_77:
  if (v35)
    memmove(v36, p_src, v35);
  v37->__r_.__value_.__s.__data_[0] = 0;
  *(_DWORD *)v47 = 0;
  v47[4] = 0;
  v47[6] = 0;
  if (v33 < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  *(_DWORD *)v47 = 1;
  v40 = *(_QWORD *)(a1 + 8);
  v41 = v45;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    __p = v46;
  v43[0] = *(_DWORD *)v47;
  *(_DWORD *)((char *)v43 + 3) = *(_DWORD *)&v47[3];
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v40 + 256))(v40, &v41);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_86:
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_90;
      return;
    }
  }
  else if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_86;
  }
  operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_90:
    v24 = (char *)v48.__r_.__value_.__r.__words[0];
LABEL_37:
    operator delete(v24);
  }
}

void webrtc::SdpOfferAnswerHandler::UpdateSessionState(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  _QWORD **v8;
  webrtc::TransceiverList *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  webrtc::TransceiverList *v28;
  const webrtc::RtpTransceiver **v29;
  const webrtc::RtpTransceiver **v30;
  char *v31;
  uint64_t v32;
  _QWORD *MediaSectionForTransceiver;
  _QWORD *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  const void **v39;
  uint64_t *v40;
  uint64_t *v41;
  size_t v42;
  _QWORD *v44;
  size_t v45;
  size_t v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  BOOL v51;
  _BOOL4 v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  char v60;
  BOOL v61;
  char v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t **v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  BOOL v81;
  webrtc::TransceiverList *v82;
  const webrtc::SessionDescriptionInterface *v83;
  const webrtc::RtpTransceiver **v84;
  char *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  _QWORD *v89;
  const webrtc::RtpTransceiver *v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t *v109;
  uint64_t *v110;
  size_t v111;
  const void *v112;
  _QWORD *v113;
  size_t v114;
  size_t v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t **v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  _DWORD *v125;
  unsigned int v126;
  _QWORD *v127;
  uint64_t j;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  BOOL v138;
  BOOL v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t i;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  BOOL v152;
  BOOL v153;
  BOOL v154;
  uint64_t **v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  int v161;
  uint64_t **v162;
  uint64_t **v163;
  uint64_t *v164;
  int v165;
  int v166;
  uint64_t **v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t *v171;
  int v172;
  uint64_t **v173;
  uint64_t **v174;
  uint64_t *v175;
  int v176;
  int v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  size_t v206;
  char **v207;
  size_t v208;
  char **v209;
  uint64_t v210;
  uint64_t v211;
  char **v212;
  uint64_t v214;
  uint64_t v215;
  char v216;
  const webrtc::SessionDescriptionInterface *v217;
  uint64_t v218;
  char v219;
  int v220;
  _QWORD **v221;
  webrtc::SessionDescriptionInterface *v222;
  void *__p;
  uint64_t v224;
  int *v225;
  char **p_src;
  int v227;
  int v228;
  _QWORD v229[2];
  char v230;
  const webrtc::RtpTransceiver **__src;
  size_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  _BYTE v237[9];

  v8 = (_QWORD **)a2;
  if ((a3 - 1) <= 1 && *(_QWORD *)(*(_QWORD *)(a2 + 16) + 96))
  {
    v10 = (webrtc::TransceiverList *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 64))(*(_QWORD *)(a2 + 8));
    if (v10)
      v10 = (webrtc::TransceiverList *)((*(uint64_t (**)(_QWORD *))(*v8[1] + 64))(v8[1]) + 8);
    webrtc::TransceiverList::ListInternal(v10, (char **)&__p);
    v11 = __p;
    v12 = v224;
    if (__p != (void *)v224)
    {
      v13 = (char *)__p;
      do
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 160);
        if (v14)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 104))(v14, 1);
        v13 += 8;
      }
      while (v13 != (char *)v12);
    }
    if (v11)
      operator delete(v11);
  }
  if (a3 == 1)
  {
    if (a4)
      v15 = 4;
    else
      v15 = 2;
    goto LABEL_20;
  }
  if (!a3)
  {
    if (a4)
      v15 = 3;
    else
      v15 = 1;
LABEL_20:
    webrtc::SdpOfferAnswerHandler::ChangeSignalingState((uint64_t)v8, v15);
    goto LABEL_26;
  }
  webrtc::SdpOfferAnswerHandler::ChangeSignalingState((uint64_t)v8, 0);
  if (v8[2][12])
  {
    if ((*(uint64_t (**)(_QWORD *))(*v8[1] + 64))(v8[1]))
      v16 = (*(uint64_t (**)(_QWORD *))(*v8[1] + 64))(v8[1]) + 8;
    else
      v16 = 0;
    v18 = *(_QWORD **)(v16 + 32);
    v17 = (_QWORD *)(v16 + 32);
    std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>>>::destroy((uint64_t)(v17 - 1), v18);
    *(v17 - 1) = v17;
    *v17 = 0;
    v17[1] = 0;
  }
LABEL_26:
  v227 = a4;
  v228 = a3;
  if (a4)
    v19 = 4;
  else
    v19 = 3;
  v20 = ((uint64_t (*)(_QWORD **))(*v8)[v19])(v8);
  if (!v8[2][12])
    goto LABEL_325;
  v21 = v20;
  v214 = a1;
  v22 = ((uint64_t (*)(_QWORD **))(*v8)[v19])(v8);
  v224 = 0;
  v225 = 0;
  v222 = (webrtc::SessionDescriptionInterface *)v22;
  __p = &v224;
  v23 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
  v25 = *v23;
  v24 = v23[1];
  v221 = v8;
  v217 = (const webrtc::SessionDescriptionInterface *)v21;
  v220 = a4;
  if (*v23 != v24)
  {
    v215 = 0;
    v218 = v23[1];
    while (1)
    {
      v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(a5, (const void **)v25, *(uint64_t **)(a5 + 8), (uint64_t *)(a5 + 8));
      if ((uint64_t *)(a5 + 8) == v109)
        goto LABEL_178;
      v110 = v109;
      if (*(char *)(v25 + 23) < 0)
      {
        v111 = *(_QWORD *)(v25 + 8);
        if ((v111 & 0x8000000000000000) != 0)
          goto LABEL_387;
        v112 = *(const void **)v25;
        if (v111)
        {
          if (!v112)
            goto LABEL_387;
        }
      }
      else
      {
        v111 = *(unsigned __int8 *)(v25 + 23);
        v112 = (const void *)v25;
      }
      v113 = v110 + 4;
      if (*((char *)v110 + 55) < 0)
      {
        v114 = v110[5];
        if ((v114 & 0x8000000000000000) != 0)
          goto LABEL_387;
        v113 = (_QWORD *)*v113;
        if (v114 && v113 == 0)
          goto LABEL_387;
      }
      else
      {
        v114 = *((unsigned __int8 *)v110 + 55);
      }
      if (v114 >= v111)
        v116 = v111;
      else
        v116 = v114;
      v117 = memcmp(v112, v113, v116);
      if (v117)
      {
        if (v117 < 0)
          goto LABEL_178;
      }
      else if (v111 < v114)
      {
        goto LABEL_178;
      }
      v118 = v110[7];
      if (!v118)
        goto LABEL_178;
      v119 = v224;
      v120 = &v224;
LABEL_202:
      v121 = (uint64_t **)v120;
      if (v119)
      {
        do
        {
          v120 = (uint64_t *)v119;
          v122 = *(_QWORD *)(v119 + 32);
          if (v122 > v118)
          {
            v119 = *v120;
            goto LABEL_202;
          }
          if (v122 >= v118)
            goto LABEL_210;
          v119 = v120[1];
        }
        while (v119);
        v121 = (uint64_t **)(v120 + 1);
      }
      v123 = v120;
      v120 = (uint64_t *)operator new(0x60uLL);
      *((_OWORD *)v120 + 4) = 0u;
      *((_OWORD *)v120 + 5) = 0u;
      *((_OWORD *)v120 + 3) = 0u;
      v120[4] = v118;
      v120[5] = (uint64_t)(v120 + 6);
      v120[10] = 0;
      v120[9] = 0;
      v120[8] = (uint64_t)(v120 + 9);
      *((_WORD *)v120 + 44) = 257;
      *v120 = 0;
      v120[1] = 0;
      v120[2] = (uint64_t)v123;
      *v121 = v120;
      v124 = v120;
      if (*(_QWORD *)__p)
      {
        __p = *(void **)__p;
        v124 = *v121;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v224, v124);
      v225 = (int *)((char *)v225 + 1);
      v24 = v218;
LABEL_210:
      if (*(_BYTE *)(v25 + 28))
        goto LABEL_178;
      v125 = *(_DWORD **)(v25 + 32);
      if (a4)
      {
        if (a4 == 1 && v125[31] > 1u)
          goto LABEL_178;
      }
      else if ((v125[31] & 0xFFFFFFFD) != 0)
      {
        goto LABEL_178;
      }
      v126 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v125 + 16))(v125);
      if (v126 > 1)
        goto LABEL_178;
      if (!((v126 != 0) | BYTE4(v215) & 1))
      {
        v127 = *(_QWORD **)(v25 + 32);
        for (i = v127[8]; i != v127[9]; i += 32)
        {
          if (*(char *)(i + 23) < 0)
          {
            v144 = *(_QWORD *)(i + 8);
            if (v144 < 0)
              goto LABEL_387;
            v145 = *(uint64_t **)i;
            if (v144 && v145 == 0)
              goto LABEL_387;
          }
          else
          {
            v144 = *(unsigned __int8 *)(i + 23);
            v145 = (uint64_t *)i;
          }
          if (v144 == 35)
          {
            v147 = *v145;
            v148 = v145[1];
            v149 = v145[2];
            v150 = v145[3];
            v151 = *(uint64_t *)((char *)v145 + 27);
            v152 = *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:mid" == v147
                && *(_QWORD *)":params:rtp-hdrext:sdes:mid" == v148;
            v153 = v152 && *(_QWORD *)"rtp-hdrext:sdes:mid" == v149;
            v154 = v153 && *(_QWORD *)"xt:sdes:mid" == v150;
            if (v154 && *(_QWORD *)"sdes:mid" == v151)
            {
              BYTE4(v215) = 0;
              v142 = v127[35];
              v141 = v127[36];
              if (v142 != v141)
                goto LABEL_275;
              goto LABEL_178;
            }
          }
        }
        BYTE4(v215) = 1;
LABEL_274:
        v142 = v127[35];
        v141 = v127[36];
        if (v142 == v141)
          goto LABEL_178;
        goto LABEL_275;
      }
      v127 = *(_QWORD **)(v25 + 32);
      if ((v126 != 1) | v215 & 1)
        goto LABEL_274;
      for (j = v127[8]; j != v127[9]; j += 32)
      {
        if (*(char *)(j + 23) < 0)
        {
          v129 = *(_QWORD *)(j + 8);
          if (v129 < 0)
            goto LABEL_387;
          v130 = *(uint64_t **)j;
          if (v129 && v130 == 0)
            goto LABEL_387;
        }
        else
        {
          v129 = *(unsigned __int8 *)(j + 23);
          v130 = (uint64_t *)j;
        }
        if (v129 == 35)
        {
          v132 = *v130;
          v133 = v130[1];
          v134 = v130[2];
          v135 = v130[3];
          v136 = *(uint64_t *)((char *)v130 + 27);
          v137 = *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:mid" == v132
              && *(_QWORD *)":params:rtp-hdrext:sdes:mid" == v133;
          v138 = v137 && *(_QWORD *)"rtp-hdrext:sdes:mid" == v134;
          v139 = v138 && *(_QWORD *)"xt:sdes:mid" == v135;
          if (v139 && *(_QWORD *)"sdes:mid" == v136)
          {
            LOBYTE(v215) = 0;
            v142 = v127[35];
            v141 = v127[36];
            if (v142 == v141)
              goto LABEL_178;
LABEL_275:
            if (v126)
            {
              v156 = (uint64_t **)(v120 + 9);
              while (1)
              {
                v160 = *v156;
                v161 = *(_DWORD *)(v142 + 12);
                v162 = (uint64_t **)(v120 + 9);
                v163 = (uint64_t **)(v120 + 9);
                if (!*v156)
                {
LABEL_277:
                  v157 = operator new(0x20uLL);
                  v157[7] = v161;
                  *(_QWORD *)v157 = 0;
                  *((_QWORD *)v157 + 1) = 0;
                  *((_QWORD *)v157 + 2) = v163;
                  *v162 = (uint64_t *)v157;
                  v158 = *(_QWORD *)v120[8];
                  if (v158)
                  {
                    v120[8] = v158;
                    v159 = *v162;
                  }
                  else
                  {
                    v159 = (uint64_t *)v157;
                  }
                  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v120[9], v159);
                  ++v120[10];
                  goto LABEL_280;
                }
                v164 = *v156;
                while (1)
                {
                  v165 = *((_DWORD *)v164 + 7);
                  if (v161 < v165)
                    goto LABEL_284;
                  if (v165 >= v161)
                    break;
                  ++v164;
LABEL_284:
                  v164 = (uint64_t *)*v164;
                  if (!v164)
                    goto LABEL_289;
                }
                *((_BYTE *)v120 + 89) = 0;
                while (1)
                {
LABEL_289:
                  while (1)
                  {
                    v163 = (uint64_t **)v160;
                    v166 = *((_DWORD *)v160 + 7);
                    if (v161 >= v166)
                      break;
                    v160 = *v163;
                    v162 = v163;
                    if (!*v163)
                      goto LABEL_277;
                  }
                  if (v166 >= v161)
                    break;
                  v160 = v163[1];
                  if (!v160)
                  {
                    v162 = v163 + 1;
                    goto LABEL_277;
                  }
                }
LABEL_280:
                v142 += 216;
                if (v142 == v141)
                  goto LABEL_177;
              }
            }
            v167 = (uint64_t **)(v120 + 6);
LABEL_299:
            v171 = *v167;
            v172 = *(_DWORD *)(v142 + 12);
            v173 = (uint64_t **)(v120 + 6);
            v174 = (uint64_t **)(v120 + 6);
            if (!*v167)
            {
LABEL_295:
              v168 = operator new(0x20uLL);
              v168[7] = v172;
              *(_QWORD *)v168 = 0;
              *((_QWORD *)v168 + 1) = 0;
              *((_QWORD *)v168 + 2) = v174;
              *v173 = (uint64_t *)v168;
              v169 = *(_QWORD *)v120[5];
              if (v169)
              {
                v120[5] = v169;
                v170 = *v173;
              }
              else
              {
                v170 = (uint64_t *)v168;
              }
              std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v120[6], v170);
              ++v120[7];
              goto LABEL_298;
            }
            v175 = *v167;
            while (1)
            {
              v176 = *((_DWORD *)v175 + 7);
              if (v172 >= v176)
              {
                if (v176 >= v172)
                {
                  *((_BYTE *)v120 + 88) = 0;
                  while (1)
                  {
LABEL_308:
                    while (1)
                    {
                      v174 = (uint64_t **)v171;
                      v177 = *((_DWORD *)v171 + 7);
                      if (v172 >= v177)
                        break;
                      v171 = *v174;
                      v173 = v174;
                      if (!*v174)
                        goto LABEL_295;
                    }
                    if (v177 >= v172)
                      break;
                    v171 = v174[1];
                    if (!v171)
                    {
                      v173 = v174 + 1;
                      goto LABEL_295;
                    }
                  }
LABEL_298:
                  v142 += 216;
                  if (v142 == v141)
                  {
LABEL_177:
                    v8 = v221;
                    a4 = v220;
                    v24 = v218;
                    goto LABEL_178;
                  }
                  goto LABEL_299;
                }
                ++v175;
              }
              v175 = (uint64_t *)*v175;
              if (!v175)
                goto LABEL_308;
            }
          }
        }
      }
      LOBYTE(v215) = 1;
      v142 = v127[35];
      v141 = v127[36];
      if (v142 != v141)
        goto LABEL_275;
LABEL_178:
      v25 += 40;
      if (v25 == v24)
        goto LABEL_33;
    }
  }
  v215 = 0;
LABEL_33:
  v26 = 1;
  if ((*(unsigned int (**)(_QWORD *))(*v8[1] + 192))(v8[1]) && (v215 & 0x100000000) == 0)
    v26 = *((_BYTE *)v8 + 217) != 0;
  if (v215 & 1 | (((*(uint64_t (**)(_QWORD *))(*v8[1] + 192))(v8[1]) & 1) == 0))
    v27 = 1;
  else
    v27 = *((_BYTE *)v8 + 218) != 0;
  v234 = 0;
  v235 = 0;
  v236 = 0;
  v28 = (webrtc::TransceiverList *)(*(uint64_t (**)(_QWORD *))(*v8[1] + 64))(v8[1]);
  if (v28)
    v28 = (webrtc::TransceiverList *)((*(uint64_t (**)(_QWORD *))(*v8[1] + 64))(v8[1]) + 8);
  webrtc::TransceiverList::ListInternal(v28, (char **)&__src);
  v30 = __src;
  v29 = (const webrtc::RtpTransceiver **)v232;
  if (__src != (const webrtc::RtpTransceiver **)v232)
  {
    v31 = 0;
    v216 = !v26;
    v219 = !v27;
    while (1)
    {
      v32 = *((_QWORD *)*v30 + 20);
      MediaSectionForTransceiver = webrtc::SdpOfferAnswerHandler::FindMediaSectionForTransceiver((webrtc::SdpOfferAnswerHandler *)v8[1], *v30, v222);
      if (v32 && MediaSectionForTransceiver != 0)
      {
        v35 = MediaSectionForTransceiver;
        v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        if (v36 <= 1)
          break;
      }
LABEL_44:
      if (++v30 == v29)
      {
        v30 = __src;
        if (__src)
          goto LABEL_130;
        goto LABEL_131;
      }
    }
    v37 = v36;
    v38 = *(_DWORD *)(v35[4] + 124);
    if (v220 == 1)
    {
      if (v38 == 2)
      {
        v38 = 1;
      }
      else if (v38 == 1)
      {
        v38 = 2;
      }
    }
    v39 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 96))(v32);
    v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(a5, v39, *(uint64_t **)(a5 + 8), (uint64_t *)(a5 + 8));
    if ((uint64_t *)(a5 + 8) != v40)
    {
      v41 = v40;
      if (*((char *)v39 + 23) < 0)
      {
        v42 = (size_t)v39[1];
        if ((v42 & 0x8000000000000000) != 0)
          goto LABEL_387;
        v39 = (const void **)*v39;
        if (v42 && v39 == 0)
          goto LABEL_387;
      }
      else
      {
        v42 = *((unsigned __int8 *)v39 + 23);
      }
      v44 = v40 + 4;
      if (*((char *)v40 + 55) < 0)
      {
        v45 = v40[5];
        if ((v45 & 0x8000000000000000) != 0)
          goto LABEL_387;
        v44 = (_QWORD *)*v44;
        if (v45 && v44 == 0)
          goto LABEL_387;
      }
      else
      {
        v45 = *((unsigned __int8 *)v40 + 55);
      }
      if (v45 >= v42)
        v47 = v42;
      else
        v47 = v45;
      v48 = memcmp(v39, v44, v47);
      if (v48)
      {
        v8 = v221;
        if ((v48 & 0x80000000) == 0)
          goto LABEL_75;
      }
      else
      {
        v61 = v42 >= v45;
        v8 = v221;
        if (v61)
        {
LABEL_75:
          v49 = v41[7];
          v50 = v38 & 0xFFFFFFFD;
          v51 = v49 == 0;
          v52 = v49 == 0;
          if (!v37)
          {
LABEL_76:
            v53 = v216;
            if (v51)
              v53 = 1;
            if ((v53 & 1) == 0)
            {
              v54 = v224;
              v55 = &v224;
LABEL_82:
              v56 = (uint64_t **)v55;
              if (v54)
              {
                do
                {
                  v55 = (uint64_t *)v54;
                  v57 = *(_QWORD *)(v54 + 32);
                  if (v57 > v49)
                  {
                    v54 = *v55;
                    goto LABEL_82;
                  }
                  if (v57 >= v49)
                    goto LABEL_90;
                  v54 = v55[1];
                }
                while (v54);
                v56 = (uint64_t **)(v55 + 1);
              }
              v58 = v55;
              v55 = (uint64_t *)operator new(0x60uLL);
              *((_OWORD *)v55 + 4) = 0u;
              *((_OWORD *)v55 + 5) = 0u;
              *((_OWORD *)v55 + 3) = 0u;
              v55[4] = v49;
              v55[5] = (uint64_t)(v55 + 6);
              v55[10] = 0;
              v55[9] = 0;
              v55[8] = (uint64_t)(v55 + 9);
              *((_WORD *)v55 + 44) = 257;
              *v55 = 0;
              v55[1] = 0;
              v55[2] = (uint64_t)v58;
              *v56 = v55;
              v59 = v55;
              if (*(_QWORD *)__p)
              {
                __p = *(void **)__p;
                v59 = *v56;
              }
              std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v224, v59);
              v225 = (int *)((char *)v225 + 1);
LABEL_90:
              v52 = *((_BYTE *)v55 + 88) != 0;
            }
            v60 = 0;
            if (!v50 && v52)
            {
              v60 = 1;
              *((_BYTE *)v8 + 217) = 1;
            }
LABEL_114:
            v69 = *((_QWORD *)*v30 + 20);
            v70 = v235;
            if (v235 >= v236)
            {
              v71 = v234;
              v72 = (v235 - v234) >> 4;
              v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 60)
                goto LABEL_389;
              v74 = v236 - v234;
              if ((v236 - v234) >> 3 > v73)
                v73 = v74 >> 3;
              v61 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0;
              v75 = 0xFFFFFFFFFFFFFFFLL;
              if (!v61)
                v75 = v73;
              if (!v75)
                goto LABEL_387;
              if (v75 >> 60)
                goto LABEL_388;
              v76 = 16 * v75;
              v77 = (char *)operator new(16 * v75);
              v78 = &v77[16 * v72];
              *v78 = v60;
              *((_QWORD *)v78 + 1) = v69;
              v79 = v78;
              if (v70 != v71)
              {
                do
                {
                  *((_OWORD *)v79 - 1) = *((_OWORD *)v70 - 1);
                  v79 -= 16;
                  v70 -= 16;
                }
                while (v70 != v71);
                v70 = v71;
              }
              v31 = v78 + 16;
              v234 = v79;
              v236 = &v77[v76];
              v8 = v221;
              if (v70)
                operator delete(v70);
            }
            else
            {
              if (!v235)
                goto LABEL_387;
              *v235 = v60;
              *((_QWORD *)v70 + 1) = v69;
              v31 = v70 + 16;
            }
            v235 = v31;
            goto LABEL_44;
          }
LABEL_96:
          v62 = v219;
          if (v51)
            v62 = 1;
          if ((v62 & 1) == 0)
          {
            v63 = v224;
            v64 = &v224;
LABEL_102:
            v65 = (uint64_t **)v64;
            if (v63)
            {
              do
              {
                v64 = (uint64_t *)v63;
                v66 = *(_QWORD *)(v63 + 32);
                if (v66 > v49)
                {
                  v63 = *v64;
                  goto LABEL_102;
                }
                if (v66 >= v49)
                  goto LABEL_110;
                v63 = v64[1];
              }
              while (v63);
              v65 = (uint64_t **)(v64 + 1);
            }
            v67 = v64;
            v64 = (uint64_t *)operator new(0x60uLL);
            *((_OWORD *)v64 + 4) = 0u;
            *((_OWORD *)v64 + 5) = 0u;
            *((_OWORD *)v64 + 3) = 0u;
            v64[4] = v49;
            v64[5] = (uint64_t)(v64 + 6);
            v64[10] = 0;
            v64[9] = 0;
            v64[8] = (uint64_t)(v64 + 9);
            *((_WORD *)v64 + 44) = 257;
            *v64 = 0;
            v64[1] = 0;
            v64[2] = (uint64_t)v67;
            *v65 = v64;
            v68 = v64;
            if (*(_QWORD *)__p)
            {
              __p = *(void **)__p;
              v68 = *v65;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v224, v68);
            v225 = (int *)((char *)v225 + 1);
LABEL_110:
            v52 = *((_BYTE *)v64 + 89) != 0;
          }
          v60 = 0;
          if (!v50 && v52)
          {
            v60 = 1;
            *((_BYTE *)v8 + 218) = 1;
          }
          goto LABEL_114;
        }
      }
    }
    v49 = 0;
    v50 = v38 & 0xFFFFFFFD;
    v51 = 1;
    v52 = 1;
    if (!v37)
      goto LABEL_76;
    goto LABEL_96;
  }
  v31 = 0;
  if (__src)
LABEL_130:
    operator delete(v30);
LABEL_131:
  if (v234 == v31)
  {
    v81 = 1;
    a1 = v214;
    if (!v31)
      goto LABEL_134;
    goto LABEL_133;
  }
  v80 = v8[2][5];
  v229[0] = &v234;
  v237[0] = 0;
  __src = (const webrtc::RtpTransceiver **)v237;
  v232 = (size_t)v229;
  (*(void (**)(uint64_t, const webrtc::RtpTransceiver ***, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v80 + 96))(v80, &__src, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::$_1,BOOL,void>(webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, &v230);
  v81 = v237[0] != 0;
  v31 = v234;
  a1 = v214;
  if (v234)
  {
LABEL_133:
    v235 = v31;
    operator delete(v31);
  }
LABEL_134:
  std::__tree<std::__value_type<cricket::ContentGroup const*,webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::PayloadTypes>,std::__map_value_compare<cricket::ContentGroup const*,std::__value_type<cricket::ContentGroup const*,webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::PayloadTypes>,std::less<cricket::ContentGroup const*>,true>,std::allocator<std::__value_type<cricket::ContentGroup const*,webrtc::SdpOfferAnswerHandler::UpdatePayloadTypeDemuxingState(cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::PayloadTypes>>>::destroy((_QWORD *)v224);
  if (!v81)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __p = "INTERNAL_ERROR";
      v224 = 14;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v101, v102, v103, v104, v105, v106, v107, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    }
    *(_DWORD *)a1 = 10;
    v108 = (char *)operator new(0x30uLL);
    *(_QWORD *)(a1 + 8) = v108;
    *(_OWORD *)(a1 + 16) = xmmword_208F08640;
    if (v108 > "Failed to update payload type demuxing state."
      || v108 + 45 <= "Failed to update payload type demuxing state.")
    {
      strcpy(v108, "Failed to update payload type demuxing state.");
      *(_DWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 36) = 0;
      *(_BYTE *)(a1 + 38) = 0;
      return;
    }
    goto LABEL_387;
  }
  v82 = (webrtc::TransceiverList *)(*(uint64_t (**)(_QWORD *))(*v8[1] + 64))(v8[1]);
  if (v82)
    v82 = (webrtc::TransceiverList *)((*(uint64_t (**)(_QWORD *))(*v8[1] + 64))(v8[1]) + 8);
  v83 = v217;
  webrtc::TransceiverList::ListInternal(v82, &v234);
  v84 = (const webrtc::RtpTransceiver **)v234;
  v85 = v235;
  if (v234 == v235)
    goto LABEL_323;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  do
  {
    v89 = webrtc::SdpOfferAnswerHandler::FindMediaSectionForTransceiver((webrtc::SdpOfferAnswerHandler *)v221[1], *v84, v83);
    v90 = *v84;
    v91 = *((_QWORD *)*v84 + 20);
    if (v91)
      v92 = v89 == 0;
    else
      v92 = 1;
    if (!v92 && !*((_BYTE *)v89 + 28))
    {
      v93 = v89[4];
      if (!v93)
        goto LABEL_141;
      if (v228 == 2
        && (const webrtc::RtpTransceiver *)((char *)v90 + 224) != (const webrtc::RtpTransceiver *)(v93 + 64))
      {
        std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)v90 + 28, *(_QWORD *)(v93 + 64), *(_QWORD *)(v93 + 72), (uint64_t)(*(_QWORD *)(v93 + 72) - *(_QWORD *)(v93 + 64)) >> 5);
      }
      if (v87 < v88)
      {
        if (!v87)
          goto LABEL_387;
        *v87 = v91;
        v87[1] = v93;
        v87 += 2;
LABEL_141:
        v83 = v217;
        goto LABEL_142;
      }
      v94 = ((char *)v87 - (char *)v86) >> 4;
      v95 = v94 + 1;
      if ((unint64_t)(v94 + 1) >> 60)
        goto LABEL_389;
      if (v88 - v86 > v95)
        v95 = v88 - v86;
      if ((unint64_t)((char *)v88 - (char *)v86) >= 0x7FFFFFFFFFFFFFF0)
        v95 = 0xFFFFFFFFFFFFFFFLL;
      if (!v95)
        goto LABEL_387;
      if (v95 >> 60)
        goto LABEL_388;
      v96 = 16 * v95;
      v97 = (char *)operator new(16 * v95);
      v98 = &v97[16 * v94];
      *(_QWORD *)v98 = v91;
      *((_QWORD *)v98 + 1) = v93;
      if (v87 == v86)
      {
        v100 = &v97[16 * v94];
        v83 = v217;
        v88 = (uint64_t *)&v97[v96];
        v87 = (uint64_t *)(v98 + 16);
        if (!v86)
          goto LABEL_165;
      }
      else
      {
        v99 = &v97[16 * v94];
        v83 = v217;
        do
        {
          v100 = v99 - 16;
          *((_OWORD *)v99 - 1) = *((_OWORD *)v87 - 1);
          v87 -= 2;
          v99 -= 16;
        }
        while (v87 != v86);
        v88 = (uint64_t *)&v97[v96];
        v87 = (uint64_t *)(v98 + 16);
        if (!v86)
          goto LABEL_165;
      }
      operator delete(v86);
LABEL_165:
      v86 = (uint64_t *)v100;
    }
LABEL_142:
    ++v84;
  }
  while (v84 != (const webrtc::RtpTransceiver **)v85);
  if (v86 != v87)
  {
    v178 = v86;
    while (1)
    {
      __src = 0;
      v232 = 0;
      v233 = 0;
      v179 = v221[2][5];
      __p = &v227;
      v224 = (uint64_t)v178;
      v225 = &v228;
      p_src = (char **)&__src;
      v237[0] = 0;
      v229[0] = v237;
      v229[1] = &__p;
      (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v179 + 96))(v179, v229, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::SdpOfferAnswerHandler::PushdownMediaDescription(webrtc::SdpType,cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::$_1,BOOL,void>(webrtc::SdpOfferAnswerHandler::PushdownMediaDescription(webrtc::SdpType,cricket::ContentSource,std::map<std::string,cricket::ContentGroup const*> const&)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, &v230);
      if (!v237[0])
        break;
      if (SHIBYTE(v233) < 0)
        operator delete(__src);
      v178 += 2;
      if (v178 == v87)
        goto LABEL_320;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __p = "INVALID_PARAMETER";
      v224 = 17;
      rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v199, v200, v201, v202, v203, v204, v205, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    }
    v206 = HIBYTE(v233);
    if ((SHIBYTE(v233) & 0x80000000) == 0)
    {
      *(_DWORD *)v214 = 3;
      v207 = (char **)&__src;
      v208 = v206;
      goto LABEL_370;
    }
    v208 = v232;
    if ((v232 & 0x8000000000000000) != 0)
      goto LABEL_387;
    v207 = (char **)__src;
    if (v232)
    {
      if (!__src)
        goto LABEL_387;
    }
    *(_DWORD *)v214 = 3;
    if (v208 < 0x7FFFFFFFFFFFFFF8)
    {
LABEL_370:
      if (v208 > 0x16)
      {
        v210 = (v208 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v208 | 7) != 0x17)
          v210 = v208 | 7;
        v211 = v210 + 1;
        v209 = (char **)operator new(v210 + 1);
        *(_QWORD *)(v214 + 16) = v208;
        *(_QWORD *)(v214 + 24) = v211 | 0x8000000000000000;
        *(_QWORD *)(v214 + 8) = v209;
      }
      else
      {
        v209 = (char **)(v214 + 8);
        *(_BYTE *)(v214 + 31) = v208;
      }
      v212 = (char **)((char *)v209 + v208);
      if (v209 > v207 || v212 <= v207)
      {
        if (v208)
          memmove(v209, v207, v208);
        *(_BYTE *)v212 = 0;
        *(_DWORD *)(v214 + 32) = 0;
        *(_BYTE *)(v214 + 36) = 0;
        *(_BYTE *)(v214 + 38) = 0;
        if ((v206 & 0x80) != 0)
          operator delete(__src);
        if (v86)
          operator delete(v86);
        if (v234)
          operator delete(v234);
        return;
      }
LABEL_387:
      __break(1u);
LABEL_388:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
LABEL_389:
    abort();
  }
LABEL_320:
  if (v86)
    operator delete(v86);
  v84 = (const webrtc::RtpTransceiver **)v234;
  a1 = v214;
LABEL_323:
  v8 = v221;
  if (v84)
    operator delete(v84);
LABEL_325:
  (*(void (**)(void **__return_ptr))(*v8[1] + 32))(&__p);
  if ((_BYTE)p_src)
  {
    if (((uint64_t (*)(_QWORD **))(*v8)[3])(v8))
    {
      v180 = ((uint64_t (*)(_QWORD **))(*v8)[4])(v8);
      if ((_BYTE)p_src && SHIBYTE(v225) < 0)
        operator delete(__p);
      if (v180)
      {
        v181 = ((uint64_t (*)(_QWORD **))(*v8)[3])(v8);
        v182 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v181 + 32))(v181);
        if (!v182)
          goto LABEL_333;
        v183 = *v182;
        v184 = v182[1];
        if (*v182 == v184)
          goto LABEL_333;
        while (1)
        {
          if (v183)
          {
            v190 = *(_QWORD *)(v183 + 32);
            if (v190)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v190 + 16))(v190) == 2)
                break;
            }
          }
          v183 += 40;
          if (v183 == v184)
            goto LABEL_333;
        }
        v191 = *(_QWORD *)(v183 + 32);
        if (v191)
          v185 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v191 + 64))(v191);
        else
LABEL_333:
          v185 = 0;
        v186 = ((uint64_t (*)(_QWORD **))(*v8)[4])(v8);
        v187 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v186 + 32))(v186);
        if (v187)
        {
          v188 = *v187;
          v189 = v187[1];
          while (v188 != v189)
          {
            if (v188)
            {
              v192 = *(_QWORD *)(v188 + 32);
              if (v192)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v192 + 16))(v192) == 2)
                {
                  v193 = *(_QWORD *)(v188 + 32);
                  if (v193)
                  {
                    v194 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v193 + 64))(v193);
                    if (v185)
                    {
                      if (v194)
                      {
                        v195 = *(_DWORD *)(v194 + 312);
                        v196 = *(_DWORD *)(v185 + 312);
                        if (v195 >= (int)v196)
                          v197 = *(_DWORD *)(v185 + 312);
                        else
                          v197 = *(_DWORD *)(v194 + 312);
                        if (v195)
                          v198 = v197;
                        else
                          v198 = v196;
                        (*(void (**)(_QWORD *, _QWORD, _QWORD, uint64_t))(*v8[1] + 216))(v8[1], *(unsigned int *)(v185 + 308), *(unsigned int *)(v194 + 308), v198);
                      }
                    }
                  }
                  break;
                }
              }
            }
            v188 += 40;
          }
        }
      }
    }
    else if ((_BYTE)p_src && SHIBYTE(v225) < 0)
    {
      operator delete(__p);
    }
  }
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 38) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 29) = 0;
}

uint64_t webrtc::SdpOfferAnswerHandler::UseCandidatesInRemoteDescription(webrtc::SdpOfferAnswerHandler *this)
{
  uint64_t v2;
  const webrtc::SessionDescriptionInterface *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  const webrtc::IceCandidateInterface *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  void *__p;
  char v20;

  v2 = (*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)this + 32))(this);
  if (v2)
  {
    v3 = (const webrtc::SessionDescriptionInterface *)v2;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2))
    {
      v4 = 0;
      v5 = 1;
      while (1)
      {
        v6 = (*(uint64_t (**)(const webrtc::SessionDescriptionInterface *, uint64_t))(*(_QWORD *)v3 + 96))(v3, v4);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
          break;
LABEL_5:
        if (++v4 >= (unint64_t)(*(uint64_t (**)(const webrtc::SessionDescriptionInterface *))(*(_QWORD *)v3 + 88))(v3))
          return v5 & 1;
      }
      v7 = 0;
      while (1)
      {
        v8 = (const webrtc::IceCandidateInterface *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, v7);
        webrtc::SdpOfferAnswerHandler::FindContentInfo((webrtc::SdpOfferAnswerHandler *)&v18, v3, v8);
        v9 = v18;
        if (v18 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
        if (v20 < 0)
        {
          operator delete(__p);
          if (v9)
            goto LABEL_9;
        }
        else if (v9)
        {
          goto LABEL_9;
        }
        if (!webrtc::SdpOfferAnswerHandler::UseCandidate(this, v8))
        {
          v5 = 0;
          goto LABEL_5;
        }
        v5 = 1;
LABEL_9:
        if (++v7 >= (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
          goto LABEL_5;
      }
    }
  }
  v5 = 1;
  return v5 & 1;
}

double webrtc::SdpOfferAnswerHandler::GetSessionErrorMsg(webrtc::SdpOfferAnswerHandler *this, uint64_t a2)
{
  uint64_t v5;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  char *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::string::size_type v16;
  _OWORD *v17;
  _WORD *v18;
  std::string::size_type v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string::size_type v22;
  const std::string::value_type *v23;
  int v24;
  std::string::size_type v25;
  BOOL v26;
  _OWORD *v27;
  char *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  _OWORD *v32;
  char *v33;
  std::string::size_type v34;
  uint64_t v35;
  std::string::size_type v36;
  _OWORD *v37;
  _BYTE *v38;
  uint64_t v39;
  double result;
  _OWORD v41[3];

  memset(&v41[1], 0, 24);
  if (&v41[1] <= (_OWORD *)"Session error code: " && (char *)&v41[2] + 4 > "Session error code: ")
    goto LABEL_94;
  strcpy((char *)v41, "Session error coSession error code: ");
  BYTE7(v41[2]) = 20;
  v5 = *(int *)(a2 + 232);
  if (v5 > 2)
  {
    v6 = &byte_208EB9246;
    v7 = strlen(&byte_208EB9246);
    if (v7 <= 2)
    {
LABEL_7:
      if (v7)
      {
        if ((char *)&v41[2] + 4 <= v6 && (char *)&v41[2] + v7 + 4 > v6)
          goto LABEL_94;
        memcpy((char *)&v41[2] + 4, v6, v7);
        if (SBYTE7(v41[2]) < 0)
          *((_QWORD *)&v41[1] + 1) = v7 + 20;
        else
          BYTE7(v41[2]) = v7 + 20;
        *((_BYTE *)&v41[2] + v7 + 4) = 0;
        LODWORD(v13) = BYTE7(v41[2]);
        v8 = *((_QWORD *)&v41[1] + 1);
      }
      else
      {
        LODWORD(v13) = 20;
        v8 = 0x6F6320726F727265;
      }
      goto LABEL_24;
    }
  }
  else
  {
    v6 = off_24C0C08E0[v5];
    v7 = strlen(v6);
    if (v7 <= 2)
      goto LABEL_7;
  }
  if (v7 - 0x7FFFFFFFFFFFFFE3 <= 0x800000000000001ELL)
    goto LABEL_95;
  v8 = v7 + 20;
  v9 = 44;
  if (v7 + 20 > 0x2C)
    v9 = v7 + 20;
  v10 = (v9 | 7) + 1;
  v11 = operator new(v10);
  v12 = (char *)(v11 + 5);
  if (&v41[1] >= (_OWORD *)v11 && v11 + 5 > (_DWORD *)&v41[1])
    goto LABEL_94;
  v11[4] = 540697956;
  *(_OWORD *)v11 = v41[0];
  if (v12 <= v6 && &v12[v7] > v6)
    goto LABEL_94;
  memcpy(v12, v6, v7);
  *((_QWORD *)&v41[1] + 1) = v7 + 20;
  *(_QWORD *)&v41[2] = v10 | 0x8000000000000000;
  *(_QWORD *)&v41[1] = v11;
  *((_BYTE *)v11 + v8) = 0;
  v13 = (v10 | 0x8000000000000000) >> 56;
LABEL_24:
  v14 = (char)v13;
  if ((v13 & 0x80u) == 0)
    v15 = 22;
  else
    v15 = (*(_QWORD *)&v41[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v13 & 0x80u) == 0)
    v16 = v13;
  else
    v16 = v8;
  if (v15 - v16 >= 2)
  {
    v17 = *(_OWORD **)&v41[1];
    if (v14 >= 0)
      v17 = &v41[1];
    v18 = (_WORD *)((char *)v17 + v16);
    if ((char *)v17 + v16 <= ". " && v18 + 1 > (_WORD *)". ")
      goto LABEL_94;
    *v18 = 8238;
    v19 = v16 + 2;
    if (SBYTE7(v41[2]) < 0)
      *((_QWORD *)&v41[1] + 1) = v16 + 2;
    else
      BYTE7(v41[2]) = v19 & 0x7F;
    *((_BYTE *)v17 + v19) = 0;
  }
  else
  {
    std::string::__grow_by_and_replace((std::string *)&v41[1], v15, v16 - v15 + 2, v16, v16, 0, 2uLL, ". ");
  }
  v20 = *(_QWORD *)&v41[2];
  if ((SBYTE7(v41[2]) & 0x80u) == 0)
    v21 = 22;
  else
    v21 = (*(_QWORD *)&v41[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((SBYTE7(v41[2]) & 0x80u) == 0)
    v22 = BYTE7(v41[2]);
  else
    v22 = *((_QWORD *)&v41[1] + 1);
  if (v21 - v22 >= 0x1B)
  {
    v27 = &v41[1];
    if (SBYTE7(v41[2]) < 0)
      v27 = *(_OWORD **)&v41[1];
    v28 = (char *)v27 + v22;
    if ((char *)v27 + v22 <= "Session error description: " && v28 + 27 > "Session error description: ")
      goto LABEL_94;
    qmemcpy(v28, "Session error description: ", 27);
    v29 = v22 + 27;
    if (v20 < 0)
    {
      *((_QWORD *)&v41[1] + 1) = v22 + 27;
      *((_BYTE *)v27 + v29) = 0;
      v23 = (const std::string::value_type *)(a2 + 240);
      v24 = *(char *)(a2 + 263);
      if ((v24 & 0x80000000) == 0)
        goto LABEL_48;
    }
    else
    {
      BYTE7(v41[2]) = v29 & 0x7F;
      *((_BYTE *)v27 + v29) = 0;
      v23 = (const std::string::value_type *)(a2 + 240);
      v24 = *(char *)(a2 + 263);
      if ((v24 & 0x80000000) == 0)
        goto LABEL_48;
    }
  }
  else
  {
    std::string::__grow_by_and_replace((std::string *)&v41[1], v21, v22 - v21 + 27, v22, v22, 0, 0x1BuLL, "Session error description: ");
    v23 = (const std::string::value_type *)(a2 + 240);
    v24 = *(char *)(a2 + 263);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_48:
      v25 = v24;
      v26 = v24 == 0;
      goto LABEL_58;
    }
  }
  v25 = *(_QWORD *)(a2 + 248);
  if ((v25 & 0x8000000000000000) != 0)
    goto LABEL_94;
  v23 = *(const std::string::value_type **)v23;
  v26 = v25 == 0;
  if (v25)
  {
    if (!v23)
      goto LABEL_94;
  }
LABEL_58:
  if ((SBYTE7(v41[2]) & 0x80u) == 0)
    v30 = 22;
  else
    v30 = (*(_QWORD *)&v41[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((SBYTE7(v41[2]) & 0x80u) == 0)
    v31 = BYTE7(v41[2]);
  else
    v31 = *((_QWORD *)&v41[1] + 1);
  if (v30 - v31 < v25)
  {
    std::string::__grow_by_and_replace((std::string *)&v41[1], v30, v31 + v25 - v30, v31, v31, 0, v25, v23);
    goto LABEL_78;
  }
  if (!v26)
  {
    if ((SBYTE7(v41[2]) & 0x80u) == 0)
      v32 = &v41[1];
    else
      v32 = *(_OWORD **)&v41[1];
    v33 = (char *)v32 + v31;
    if ((char *)v32 + v31 > v23 || &v33[v25] <= v23)
    {
      memmove(v33, v23, v25);
      v34 = v31 + v25;
      if (SBYTE7(v41[2]) < 0)
        *((_QWORD *)&v41[1] + 1) = v31 + v25;
      else
        BYTE7(v41[2]) = v34 & 0x7F;
      *((_BYTE *)v32 + v34) = 0;
      goto LABEL_78;
    }
LABEL_94:
    __break(1u);
LABEL_95:
    abort();
  }
LABEL_78:
  v35 = BYTE7(v41[2]);
  if ((SBYTE7(v41[2]) & 0x80u) == 0)
    v36 = 22;
  else
    v36 = (*(_QWORD *)&v41[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (SBYTE7(v41[2]) < 0)
    v35 = *((_QWORD *)&v41[1] + 1);
  if (v36 == v35)
  {
    std::string::__grow_by_and_replace((std::string *)&v41[1], v36, 1uLL, v36, v36, 0, 1uLL, ".");
    goto LABEL_93;
  }
  v37 = &v41[1];
  if (SBYTE7(v41[2]) < 0)
    v37 = *(_OWORD **)&v41[1];
  v38 = (char *)v37 + v35;
  if ((char *)v37 + v35 <= "." && v38 + 1 > ".")
    goto LABEL_94;
  *v38 = 46;
  v39 = v35 + 1;
  if (SBYTE7(v41[2]) < 0)
    *((_QWORD *)&v41[1] + 1) = v39;
  else
    BYTE7(v41[2]) = v39 & 0x7F;
  *((_BYTE *)v37 + v39) = 0;
LABEL_93:
  result = *(double *)&v41[1];
  *(_OWORD *)this = v41[1];
  *((_QWORD *)this + 2) = *(_QWORD *)&v41[2];
  return result;
}

uint64_t webrtc::SdpOfferAnswerHandler::AllocateSctpSids(webrtc::SdpOfferAnswerHandler *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *__p[2];
  uint64_t *v8;
  char v9;

  result = (*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)this + 24))(this);
  if (result)
  {
    result = (*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)this + 32))(this);
    if (result)
    {
      (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 1) + 32))(__p);
      if (v9)
      {
        if (SHIBYTE(v8) < 0)
          operator delete(__p[0]);
        v3 = (*((unsigned __int16 *)this + 34) > 0xFFu) | 0x100000000;
      }
      else
      {
        v3 = 0;
      }
      v6 = v3;
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
      __p[0] = (void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1));
      __p[1] = this;
      v8 = &v6;
      return (*(uint64_t (**)(uint64_t, void **, void (*)(uint64_t), char *))(*(_QWORD *)v4 + 96))(v4, __p, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SdpOfferAnswerHandler::AllocateSctpSids(void)::$_1>, &v5);
    }
  }
  return result;
}

void webrtc::SdpOfferAnswerHandler::RemoveSenders(uint64_t a1, int a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  webrtc::SdpOfferAnswerHandler::UpdateLocalSenders(a1, &v4, a2);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  webrtc::SdpOfferAnswerHandler::UpdateRemoteSendersList(a1, &v4, 0, a2, 0);
}

void webrtc::SdpOfferAnswerHandler::UpdateLocalSenders(uint64_t a1, unsigned __int8 **a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  __int32 v13;
  __int32 *v14;
  __int32 *v15;
  __int32 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  __int128 *v23;
  __int128 v24;
  std::string::size_type v25;
  std::string::size_type size;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  void *v31;
  int v32;
  uint64_t v33;
  _QWORD **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  __int128 *v43;
  __int128 *v44;
  __int128 v45;
  int *v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  __int128 v51;
  std::string::size_type v52;
  char *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::string v58;
  std::string __p;
  int v60;
  std::string v61;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  v7 = v6;
  v8 = 152;
  if (a3)
  {
    v9 = (uint64_t *)(v6 + 152);
  }
  else
  {
    v8 = 128;
    v9 = (uint64_t *)(v6 + 128);
  }
  v57 = v8;
  v10 = *(_QWORD *)(v6 + v8);
  if (v10 != v9[1])
  {
    while (1)
    {
      v12 = *a2;
      v11 = a2[1];
      if (*a2 == v11)
        goto LABEL_59;
      v13 = *(_DWORD *)(v10 + 48);
      while (1)
      {
        v14 = (__int32 *)*((_QWORD *)v12 + 4);
        v15 = wmemchr(*((__int32 **)v12 + 3), v13, ((uint64_t)v14 - *((_QWORD *)v12 + 3)) >> 2);
        v16 = v15 ? v15 : v14;
        if (v16 != v14)
          break;
        v12 += 144;
        if (v12 == v11)
        {
          v12 = v11;
          break;
        }
      }
      if (!v12 || v12 == a2[1])
        goto LABEL_59;
      v17 = v12[23];
      if ((v17 & 0x80u) == 0)
        v18 = v12[23];
      else
        v18 = *((_QWORD *)v12 + 1);
      v19 = *(unsigned __int8 *)(v10 + 47);
      v20 = (char)v19;
      if ((v19 & 0x80u) != 0)
        v19 = *(_QWORD *)(v10 + 32);
      if (v18 != v19)
        goto LABEL_59;
      if (v20 >= 0)
        v21 = (unsigned __int8 *)(v10 + 24);
      else
        v21 = *(unsigned __int8 **)(v10 + 24);
      if ((v17 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v12, v21, *((_QWORD *)v12 + 1)))
          goto LABEL_59;
      }
      else if (v12[23])
      {
        v22 = v12;
        while (*v22 == *v21)
        {
          ++v22;
          ++v21;
          if (!--v17)
            goto LABEL_35;
        }
        goto LABEL_59;
      }
LABEL_35:
      v23 = (__int128 *)*((_QWORD *)v12 + 12);
      if (v23 == *((__int128 **)v12 + 13))
      {
        v25 = 0;
        *((_BYTE *)&v58.__r_.__value_.__s + 23) = 0;
        v58.__r_.__value_.__s.__data_[0] = 0;
      }
      else
      {
        if (*((char *)v23 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
        }
        else
        {
          v24 = *v23;
          v58.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
          *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v24;
        }
        v25 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      }
      if ((v25 & 0x80u) == 0)
        size = v25;
      else
        size = v58.__r_.__value_.__l.__size_;
      v27 = *(unsigned __int8 *)(v10 + 23);
      v28 = (char)v27;
      if ((v27 & 0x80u) != 0)
        v27 = *(_QWORD *)(v10 + 8);
      if (size != v27)
        goto LABEL_56;
      if (v28 >= 0)
        v29 = (unsigned __int8 *)v10;
      else
        v29 = *(unsigned __int8 **)v10;
      if ((char)v25 < 0)
      {
        v31 = (void *)v58.__r_.__value_.__r.__words[0];
        v32 = memcmp(v58.__r_.__value_.__l.__data_, v29, v58.__r_.__value_.__l.__size_);
        operator delete(v31);
        if (!v32)
          goto LABEL_63;
LABEL_59:
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
        webrtc::RtpTransmissionManager::FindSenderById(v33, v10 + 24, (uint64_t *)&v58);
        v34 = (_QWORD **)v58.__r_.__value_.__r.__words[0];
        if (v58.__r_.__value_.__r.__words[0])
        {
          if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v58.__r_.__value_.__l.__data_ + 64))(v58.__r_.__value_.__r.__words[0]) == a3)
          {
            (*(void (**)(_QWORD *, _QWORD))(*v34[3] + 192))(v34[3], 0);
          }
          else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            rtc::webrtc_logging_impl::Log("\r\t", v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc");
          }
          ((void (*)(_QWORD **))(*v34)[1])(v34);
        }
        v10 = std::vector<webrtc::RtpSenderInfo>::erase[abi:sn180100]((uint64_t)v9, v10);
        if (v10 == v9[1])
          break;
      }
      else
      {
        if (v25)
        {
          v30 = 0;
          while (v58.__r_.__value_.__s.__data_[v30] == v29[v30])
          {
            if (v25 == ++v30)
              goto LABEL_63;
          }
LABEL_56:
          if ((char)v25 < 0)
            operator delete(v58.__r_.__value_.__l.__data_);
          goto LABEL_59;
        }
LABEL_63:
        v10 += 56;
        if (v10 == v9[1])
          break;
      }
    }
  }
  v42 = *a2;
  v43 = (__int128 *)a2[1];
  if (*a2 != (unsigned __int8 *)v43)
  {
    do
    {
      v44 = (__int128 *)*((_QWORD *)v42 + 12);
      if (v44 == *((__int128 **)v42 + 13))
      {
        *((_BYTE *)&v61.__r_.__value_.__s + 23) = 0;
        v61.__r_.__value_.__s.__data_[0] = 0;
        v46 = (int *)*((_QWORD *)v42 + 3);
        if (v46 != *((int **)v42 + 4))
          goto LABEL_72;
      }
      else if (*((char *)v44 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v44, *((_QWORD *)v44 + 1));
        v46 = (int *)*((_QWORD *)v42 + 3);
        if (v46 != *((int **)v42 + 4))
        {
LABEL_72:
          v47 = *v46;
          goto LABEL_75;
        }
      }
      else
      {
        v45 = *v44;
        v61.__r_.__value_.__r.__words[2] = *((_QWORD *)v44 + 2);
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v45;
        v46 = (int *)*((_QWORD *)v42 + 3);
        if (v46 != *((int **)v42 + 4))
          goto LABEL_72;
      }
      v47 = 0;
LABEL_75:
      v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
      if (webrtc::RtpTransmissionManager::FindSenderInfo(v48, v9, (unsigned __int8 **)&v61, (unsigned __int8 **)v42))
      {
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_91;
        goto LABEL_66;
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v58, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
        if (((char)v42[23] & 0x80000000) == 0)
        {
LABEL_80:
          v49 = *(_OWORD *)v42;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v42 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v49;
          v60 = v47;
          v50 = v9[1];
          if (v50 < v9[2])
            goto LABEL_81;
          goto LABEL_86;
        }
      }
      else
      {
        v58 = v61;
        if (((char)v42[23] & 0x80000000) == 0)
          goto LABEL_80;
      }
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v42, *((_QWORD *)v42 + 1));
      v60 = v47;
      v50 = v9[1];
      if (v50 < v9[2])
      {
LABEL_81:
        if (!v50)
          goto LABEL_95;
        v51 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
        *(_QWORD *)(v50 + 16) = *((_QWORD *)&v58.__r_.__value_.__l + 2);
        *(_OWORD *)v50 = v51;
        memset(&v58, 0, sizeof(v58));
        v52 = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)(v50 + 24) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v50 + 40) = v52;
        memset(&__p, 0, sizeof(__p));
        *(_DWORD *)(v50 + 48) = v60;
        v9[1] = v50 + 56;
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_88;
        goto LABEL_89;
      }
LABEL_86:
      v53 = std::vector<webrtc::RtpSenderInfo>::__push_back_slow_path<webrtc::RtpSenderInfo>((void **)v9, (uint64_t)&v58);
      v54 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v9[1] = (uint64_t)v53;
      if ((v54 & 0x80000000) == 0)
      {
        if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_89;
LABEL_88:
        operator delete(v58.__r_.__value_.__l.__data_);
        goto LABEL_89;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_88;
LABEL_89:
      v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
      v56 = v9[1];
      if (*(_QWORD *)(v7 + v57) == v56)
      {
LABEL_95:
        __break(1u);
        return;
      }
      webrtc::RtpTransmissionManager::OnLocalSenderAdded(v55, v56 - 56, a3);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
LABEL_91:
        operator delete(v61.__r_.__value_.__l.__data_);
LABEL_66:
      v42 += 144;
    }
    while (v42 != (unsigned __int8 *)v43);
  }
}

uint64_t webrtc::SdpOfferAnswerHandler::LocalIceCredentialsToReplace::SatisfiesIceRestart(webrtc::SdpOfferAnswerHandler::LocalIceCredentialsToReplace *this, const webrtc::SessionDescriptionInterface *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  __int128 v8;
  BOOL v9;
  char v10;
  char *v11;
  size_t v12;
  BOOL v13;
  char v14;
  uint64_t result;
  unint64_t v16;
  BOOL v17;
  std::string *v18;
  unint64_t v19;
  size_t v20;
  int v21;
  size_t v22;
  std::string *p_p;
  size_t v24;
  size_t v25;
  _BOOL8 v26;
  char *v27;
  uint64_t v28;
  char v29;
  __int128 __s2;
  std::string v31;
  std::string __p;

  v3 = (*(uint64_t (**)(const webrtc::SessionDescriptionInterface *))(*(_QWORD *)a2 + 32))(a2);
  v4 = *(_QWORD *)(v3 + 24);
  v28 = *(_QWORD *)(v3 + 32);
  if (v4 == v28)
    return 1;
  v5 = (char *)this + 8;
  v27 = (char *)this + 8;
  while (2)
  {
    if ((*(char *)(v4 + 71) & 0x80000000) == 0)
    {
      v31 = *(std::string *)(v4 + 48);
      if ((*(char *)(v4 + 95) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_8:
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 72), *(_QWORD *)(v4 + 80));
      v6 = *(char **)v5;
      if (!*(_QWORD *)v5)
        break;
      goto LABEL_9;
    }
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v4 + 48), *(_QWORD *)(v4 + 56));
    if (*(char *)(v4 + 95) < 0)
      goto LABEL_8;
LABEL_5:
    __p = *(std::string *)(v4 + 72);
    v6 = *(char **)v5;
    if (!*(_QWORD *)v5)
      break;
LABEL_9:
    v7 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    v8 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
    if (v31.__r_.__value_.__l.__size_)
      v9 = v31.__r_.__value_.__r.__words[0] == 0;
    else
      v9 = 0;
    v10 = !v9;
    v11 = v5;
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    __s2 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    if (__p.__r_.__value_.__l.__size_)
      v13 = __p.__r_.__value_.__r.__words[0] == 0;
    else
      v13 = 0;
    v14 = !v13;
    v29 = v14;
    do
    {
      while (1)
      {
        result = (uint64_t)(v6 + 32);
        if (v6[55] < 0)
        {
          v16 = *((_QWORD *)v6 + 5);
          if ((v16 & 0x8000000000000000) != 0
            || ((result = *(_QWORD *)result, v16) ? (v17 = result == 0) : (v17 = 0), v17))
          {
LABEL_71:
            __break(1u);
            return result;
          }
        }
        else
        {
          v16 = v6[55];
        }
        if ((v7 & 0x80) != 0)
        {
          if ((*((_QWORD *)&v8 + 1) & 0x8000000000000000) != 0)
            goto LABEL_71;
          v19 = *((_QWORD *)&v8 + 1);
          v18 = (std::string *)v8;
          if ((v10 & 1) == 0)
            goto LABEL_71;
        }
        else
        {
          v18 = &v31;
          v19 = v7;
        }
        v20 = v19 >= v16 ? v16 : v19;
        v21 = memcmp((const void *)result, v18, v20);
        if (!v21)
          break;
LABEL_38:
        if ((v21 & 0x80000000) == 0)
          goto LABEL_39;
LABEL_22:
        v6 = (char *)*((_QWORD *)v6 + 1);
        if (!v6)
          goto LABEL_58;
      }
      if (v16 == v19)
      {
        result = (uint64_t)(v6 + 56);
        if (v6[79] < 0)
        {
          v22 = *((_QWORD *)v6 + 8);
          if ((v22 & 0x8000000000000000) != 0)
            goto LABEL_71;
          result = *(_QWORD *)result;
          if (v22)
          {
            if (!result)
              goto LABEL_71;
          }
        }
        else
        {
          v22 = v6[79];
        }
        p_p = &__p;
        v24 = v12;
        if ((v12 & 0x80) != 0)
        {
          v24 = *((_QWORD *)&__s2 + 1);
          if ((*((_QWORD *)&__s2 + 1) & 0x8000000000000000) != 0)
            goto LABEL_71;
          p_p = (std::string *)__s2;
          if ((v29 & 1) == 0)
            goto LABEL_71;
        }
        if (v24 >= v22)
          v25 = v22;
        else
          v25 = v24;
        v21 = memcmp((const void *)result, p_p, v25);
        if (v21)
          goto LABEL_38;
        if (v22 < v24)
          goto LABEL_22;
      }
      else if (v16 < v19)
      {
        goto LABEL_22;
      }
LABEL_39:
      v11 = v6;
      v6 = *(char **)v6;
    }
    while (v6);
LABEL_58:
    v5 = v27;
    if (v11 != v27
      && (std::operator<=>[abi:sn180100]<std::string,std::string,std::string,std::string>((uint64_t)&v31, (_QWORD *)v11 + 4) & 0x80) == 0)
    {
      v26 = v11 == v27;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_65;
LABEL_61:
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_66;
LABEL_62:
      if (v11 != v5)
        return v26;
LABEL_67:
      v4 += 112;
      if (v4 == v28)
        return v26;
      continue;
    }
    break;
  }
  v11 = v5;
  v26 = 1;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_61;
LABEL_65:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_62;
LABEL_66:
  operator delete(v31.__r_.__value_.__l.__data_);
  if (v11 == v5)
    goto LABEL_67;
  return v26;
}

void webrtc::SdpOfferAnswerHandler::SetRemoteDescription(_QWORD *a1, void (***a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = a1[14];
  v7 = a1[48];
  if (!v7 || (v8 = atomic_load((unsigned int *)(v7 + 4)), v8 == 1))
  {
    v9 = (_QWORD *)operator new();
    *v9 = 1;
    v10 = (unsigned int *)v9 + 1;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = a1[48];
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 4);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        MEMORY[0x20BD0ADEC]();
    }
    a1[48] = v9;
LABEL_12:
    v16 = (unsigned int *)v9 + 1;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = a1[49];
    do
      v19 = __ldxr(v16);
    while (__stxr(v19 + 1, v16));
    do
    {
      v20 = __ldaxr(v16);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v16));
    if (!v21)
      MEMORY[0x20BD0ADEC](v9, 0x1000C404A09149ALL);
    if (a2)
      goto LABEL_20;
    goto LABEL_21;
  }
  v9 = (_QWORD *)a1[48];
  if (v9)
    goto LABEL_12;
  v18 = a1[49];
  if (a2)
LABEL_20:
    (**a2)(a2);
LABEL_21:
  if (v6)
  {
    do
      v22 = __ldxr((unsigned int *)v6);
    while (__stxr(v22 + 1, (unsigned int *)v6));
  }
  v23 = operator new();
  v24 = v23;
  *(_DWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = v6;
  do
    v25 = __ldxr((unsigned int *)v23);
  while (__stxr(v25 + 1, (unsigned int *)v23));
  v26 = operator new(0x10uLL);
  *v26 = &off_24C0B81D0;
  v26[1] = v24;
  v27 = (_QWORD *)operator new();
  v28 = *(_QWORD *)(v6 + 16);
  v29 = *(_QWORD *)(v6 + 24);
  *v27 = &off_24C0C0778;
  v27[1] = v9;
  v27[2] = v18;
  v27[3] = a2;
  v27[4] = a3;
  v27[8] = v26;
  if (v29 == v28)
    v30 = 0;
  else
    v30 = ((v29 - v28) << 6) - 1;
  v31 = *(_QWORD *)(v6 + 48);
  if (v30 == v31 + *(_QWORD *)(v6 + 40))
  {
    std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity(v6 + 8);
    v31 = *(_QWORD *)(v6 + 48);
    v28 = *(_QWORD *)(v6 + 16);
    v29 = *(_QWORD *)(v6 + 24);
  }
  if (v29 == v28
    || (v32 = *(_QWORD *)(v6 + 40) + v31, (v33 = *(_QWORD *)(v28 + ((v32 >> 6) & 0x3FFFFFFFFFFFFF8))) == 0))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v33 + 8 * (v32 & 0x1FF)) = v27;
    *(_QWORD *)(v6 + 48) = v31 + 1;
    if (!v31)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + ((*(_QWORD *)(v6 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*(_QWORD *)(v6 + 40) & 0x1FFLL));
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
    }
  }
}

void webrtc::SdpOfferAnswerHandler::SetRemoteDescription(_QWORD *a1, uint64_t *a2, void (****a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  void (***v22)(_QWORD);
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = a1[14];
  v7 = a1[48];
  if (!v7 || (v8 = atomic_load((unsigned int *)(v7 + 4)), v8 == 1))
  {
    v9 = (_QWORD *)operator new();
    *v9 = 1;
    v10 = (unsigned int *)v9 + 1;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = a1[48];
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 4);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        MEMORY[0x20BD0ADEC]();
    }
    a1[48] = v9;
LABEL_12:
    v16 = (unsigned int *)v9 + 1;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = a1[49];
    do
      v19 = __ldxr(v16);
    while (__stxr(v19 + 1, v16));
    do
    {
      v20 = __ldaxr(v16);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v16));
    if (!v21)
      MEMORY[0x20BD0ADEC](v9, 0x1000C404A09149ALL);
    v22 = *a3;
    if (v22)
      goto LABEL_20;
    goto LABEL_21;
  }
  v9 = (_QWORD *)a1[48];
  if (v9)
    goto LABEL_12;
  v18 = a1[49];
  v22 = *a3;
  if (*a3)
LABEL_20:
    (**v22)(v22);
LABEL_21:
  v23 = *a2;
  *a2 = 0;
  if (v6)
  {
    do
      v24 = __ldxr((unsigned int *)v6);
    while (__stxr(v24 + 1, (unsigned int *)v6));
  }
  v25 = operator new();
  v26 = v25;
  *(_DWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = v6;
  do
    v27 = __ldxr((unsigned int *)v25);
  while (__stxr(v27 + 1, (unsigned int *)v25));
  v28 = operator new(0x10uLL);
  *v28 = &off_24C0B81D0;
  v28[1] = v26;
  v29 = (_QWORD *)operator new();
  v30 = *(_QWORD *)(v6 + 16);
  v31 = *(_QWORD *)(v6 + 24);
  *v29 = &off_24C0C07A0;
  v29[1] = v9;
  v29[2] = v18;
  v29[3] = v22;
  v29[4] = v23;
  v29[8] = v28;
  if (v31 == v30)
    v32 = 0;
  else
    v32 = ((v31 - v30) << 6) - 1;
  v33 = *(_QWORD *)(v6 + 48);
  if (v32 == v33 + *(_QWORD *)(v6 + 40))
  {
    std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity(v6 + 8);
    v33 = *(_QWORD *)(v6 + 48);
    v30 = *(_QWORD *)(v6 + 16);
    v31 = *(_QWORD *)(v6 + 24);
  }
  if (v31 == v30
    || (v34 = *(_QWORD *)(v6 + 40) + v33, (v35 = *(_QWORD *)(v30 + ((v34 >> 6) & 0x3FFFFFFFFFFFFF8))) == 0))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v35 + 8 * (v34 & 0x1FF)) = v29;
    *(_QWORD *)(v6 + 48) = v33 + 1;
    if (!v33)
    {
      v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + ((*(_QWORD *)(v6 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*(_QWORD *)(v6 + 40) & 0x1FFLL));
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
    }
  }
}

void webrtc::SdpOfferAnswerHandler::ApplyRemoteDescriptionUpdateTransceiverState(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  void (***v10)(_QWORD);
  char *v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _BOOL4 v17;
  uint64_t v18;
  const webrtc::SessionDescriptionInterface *v19;
  _QWORD *MediaSectionForTransceiver;
  int v21;
  char *v22;
  uint64_t v23;
  void (***v24)(_QWORD);
  uint64_t **v25;
  void **v26;
  void **v27;
  std::string::size_type v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const std::string::value_type *v37;
  uint64_t v38;
  void (***v39)(_QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  std::string::size_type *v44;
  uint64_t v45;
  __int128 *v46;
  std::string *v47;
  __int128 v48;
  uint64_t v49;
  std::string::size_type v50;
  uint64_t v51;
  std::string::size_type v52;
  uint64_t v53;
  std::string::size_type *v54;
  size_t v55;
  BOOL v56;
  uint64_t v57;
  std::string *v58;
  std::string::size_type size;
  char *v60;
  char *v61;
  uint64_t v62;
  std::string *v63;
  std::string::value_type *v64;
  std::string::value_type *v65;
  std::string::size_type *v66;
  std::string::size_type *v67;
  std::string::size_type *v68;
  std::string::size_type v69;
  int v70;
  std::string::size_type v71;
  BOOL v72;
  std::string *v73;
  std::string::size_type v75;
  std::string::size_type v76;
  uint64_t v77;
  _QWORD *v78;
  std::string::size_type *v79;
  char *v80;
  char *v81;
  std::string *v82;
  char *v83;
  std::string::size_type v84;
  std::string::size_type v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (***v92)(_QWORD);
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  int64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  void (***v109)(_QWORD);
  uint64_t **v110;
  uint64_t v111;
  _QWORD *v112;
  unsigned int v113;
  void (***v114)(_QWORD);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *i;
  void (****v146)(_QWORD);
  void (****v147)(_QWORD);
  void (****v148)(_QWORD);
  uint64_t v149;
  void (***v150)(_QWORD);
  void **v151;
  void **v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  void (***v156)(_QWORD);
  char *v157;
  char *v158;
  char *v159;
  void (****v160)(_QWORD);
  void (****v161)(_QWORD);
  void (****v162)(_QWORD);
  void (***v163)(_QWORD);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  size_t v173;
  std::string::size_type *v174;
  _BOOL4 v175;
  char *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  int v182;
  std::string::size_type *v183;
  char *v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  _QWORD *v190;
  void (***v191)(_QWORD);
  uint64_t v192;
  void (***v193)(_QWORD);
  uint64_t v194;
  void (***v195)(_QWORD);
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *__p;
  void **v200;
  _QWORD *v201;
  char v202;
  void (***v203)(_QWORD);
  void (***v204)(_QWORD);
  uint64_t v205;
  std::string v206;
  void (***v207)(_QWORD);
  void (****v208)(_QWORD);
  void (****v209)(_QWORD);
  uint64_t v210;
  void (****v211)(_QWORD);
  void (****v212)(_QWORD);
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  char v217;
  _QWORD v218[3];

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96))
    return;
  v3 = a1;
  v214 = 0;
  v215 = 0;
  v216 = 0;
  v211 = 0;
  v212 = 0;
  v213 = 0;
  v208 = 0;
  v209 = 0;
  v210 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 64))(*(_QWORD *)(v3 + 8));
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = v6 - v5;
  if (v6 == v5)
  {
    v141 = 0;
    v11 = 0;
    goto LABEL_259;
  }
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_329;
  v8 = (char *)operator new(v7);
  v9 = 0;
  do
  {
    v10 = *(void (****)(_QWORD))(v5 + v9);
    *(_QWORD *)&v8[v9] = v10;
    if (v10)
      (**v10)(v10);
    v9 += 8;
  }
  while (v5 + v9 != v6);
  v176 = v8;
  if (v9)
  {
    v11 = 0;
    v184 = 0;
    v172 = v9 >> 3;
    v12 = v9 & 0xFFFFFFFFFFFFFFF8;
    v13 = 0;
    v14 = v8;
    v15 = &v8[v12];
    v17 = &v206 <= (std::string *)"streams=[" && (char *)&v206.__r_.__value_.__r.__words[1] + 1 > "streams=[";
    v175 = v17;
    v186 = a2 - 1;
    v180 = v3;
    v181 = v15;
    v182 = a2;
    while (1)
    {
      v18 = *(_QWORD *)(*v14 + 16);
      v19 = (const webrtc::SessionDescriptionInterface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      MediaSectionForTransceiver = webrtc::SdpOfferAnswerHandler::FindMediaSectionForTransceiver(*(webrtc::SdpOfferAnswerHandler **)(v3 + 8), (const webrtc::RtpTransceiver *)v18, v19);
      if (MediaSectionForTransceiver)
        break;
LABEL_17:
      if (++v14 == (_QWORD *)v15)
      {
        v142 = 8 * v172;
        do
        {
          v143 = *(_QWORD *)&v176[v142 - 8];
          if (v143)
            (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
          v142 -= 8;
        }
        while (v142);
        v141 = v13;
        goto LABEL_258;
      }
    }
    v190 = MediaSectionForTransceiver;
    v187 = MediaSectionForTransceiver[4];
    v21 = *(_DWORD *)(v187 + 124);
    if (v21 == 2)
    {
      v21 = 1;
      v189 = 1;
      if (a2)
        goto LABEL_51;
    }
    else
    {
      if (v21 == 1)
        v21 = 2;
      v189 = v21;
      if (a2)
      {
LABEL_51:
        v188 = v21 & 0xFFFFFFFD;
        if ((v21 & 0xFFFFFFFD) != 0)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 112))(v18) & 0xFF00000000) != 0)
          {
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 112))(v18);
            if ((v38 & 0xFF00000000) == 0)
              goto LABEL_327;
            if ((v38 & 0xFFFFFFFD) == 0)
            {
              v204 = (void (***)(_QWORD))*v14;
              v39 = v204;
              if (v204)
              {
                (**v204)(v204);
                webrtc::SdpOfferAnswerHandler::ProcessRemovalOfRemoteTrack(v3, &v204, &v214, (uint64_t)&v208);
                (*v39)[1](v39);
              }
              else
              {
                webrtc::SdpOfferAnswerHandler::ProcessRemovalOfRemoteTrack(v3, &v204, &v214, (uint64_t)&v208);
              }
            }
          }
LABEL_202:
          v93 = v189;
          if (a2)
          {
LABEL_203:
            *(_DWORD *)(v18 + 96) = v93;
            *(_BYTE *)(v18 + 100) = 1;
            v112 = v190;
            if (v186 <= 1)
            {
              webrtc::RtpTransceiver::set_current_direction(v18, v93);
              (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v18 + 40))(&__p, v18);
              if (v202)
              {
                if (SHIBYTE(v201) < 0)
                  operator delete(__p);
                v115 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 24);
                v116 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 104))(*(_QWORD *)(v3 + 8));
                (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v18 + 40))(&__p, v18);
                if (!v202)
                  goto LABEL_327;
                v218[0] = v116;
                v218[1] = &__p;
                v198 = 0;
                v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
                v206.__r_.__value_.__l.__size_ = (std::string::size_type)v218;
                if (v202 && SHIBYTE(v201) < 0)
                  operator delete(__p);
                v121 = *(_QWORD *)(v18 + 32);
                if (*(_QWORD *)(v18 + 40) - v121 != 8)
                {
                  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 476, "1u == senders_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v117, v118, v119, v120, 1);
LABEL_331:
                  std::__throw_bad_array_new_length[abi:sn180100]();
                }
                v122 = *(_QWORD *)(*(_QWORD *)v121 + 24);
                if (v122)
                  (**(void (***)(uint64_t))v122)(v122);
                v197 = v198;
                if (v198)
                  (**(void (***)(uint64_t))v198)(v198);
                (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v122 + 216))(v122, &v197);
                if (v197)
                  (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
                (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
                v123 = *(_QWORD *)(v18 + 56);
                if (*(_QWORD *)(v18 + 64) - v123 != 8)
                  goto LABEL_328;
                v124 = *(_QWORD *)(*(_QWORD *)v123 + 32);
                if (v124)
                  (**(void (***)(uint64_t))v124)(v124);
                v196 = v198;
                if (v198)
                  (**(void (***)(uint64_t))v198)(v198);
                (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v124 + 192))(v124, &v196);
                if (v196)
                  (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
                (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
                if (v198)
                  (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
              }
              v112 = v190;
            }
            goto LABEL_228;
          }
LABEL_190:
          v107 = v13;
          if ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 64))(*(_QWORD *)(v3 + 8), v93))
          {
            v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 64))(*(_QWORD *)(v3 + 8)) + 8;
            v203 = (void (***)(_QWORD))*v14;
            v109 = v203;
            if (!v203)
              goto LABEL_193;
          }
          else
          {
            v108 = 0;
            v203 = (void (***)(_QWORD))*v14;
            v109 = v203;
            if (!v203)
            {
LABEL_193:
              v110 = std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>>>::__emplace_unique_key_args<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::piecewise_construct_t const&,std::tuple<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>,std::tuple<>>((uint64_t **)(v108 + 24), (unint64_t)v109, &v203);
              v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 112))(v18);
              if (*((_BYTE *)v110 + 164))
              {
                *((_DWORD *)v110 + 39) = v111;
                *((_BYTE *)v110 + 160) = BYTE4(v111);
                v13 = v107;
                v112 = v190;
                v113 = v189;
                v114 = v203;
                if (!v203)
                {
LABEL_196:
                  *(_DWORD *)(v18 + 96) = v113;
                  *(_BYTE *)(v18 + 100) = 1;
LABEL_228:
                  if (!*((_BYTE *)v112 + 28))
                    goto LABEL_16;
                  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 64))(v18) & 1) == 0)
                  {
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
                    {
                      v178 = v178 & 0xFFFFFFFF00000000 | 0x44A9;
                      rtc::webrtc_logging_impl::Log("\r\t\n\t", v125, v126, v127, v128, v129, v130, v131, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
                    }
                    webrtc::RtpTransceiver::StopTransceiverProcedure(v18);
                  }
                  if (!*((_BYTE *)v190 + 28))
                  {
LABEL_16:
                    if (!v188)
                    {
                      v29 = *(_QWORD *)(v187 + 96);
                      if (v29 == *(_QWORD *)(v187 + 104)
                        || (v30 = *(unsigned int **)(v29 + 24), v30 == *(unsigned int **)(v29 + 32)))
                      {
                        v57 = *(_QWORD *)(v18 + 56);
                        if (*(_QWORD *)(v18 + 64) - v57 != 8)
                          goto LABEL_328;
                        v33 = *(_QWORD *)(*(_QWORD *)v57 + 32);
                        if (v33)
                          (**(void (***)(uint64_t))v33)(v33);
                        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 184))(v33);
                      }
                      else
                      {
                        v31 = *(_QWORD *)(v18 + 56);
                        if (*(_QWORD *)(v18 + 64) - v31 != 8)
                          goto LABEL_328;
                        v32 = *v30;
                        v33 = *(_QWORD *)(*(_QWORD *)v31 + 32);
                        if (v33)
                          (**(void (***)(_QWORD))v33)(*(_QWORD *)(*(_QWORD *)v31 + 32));
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 176))(v33, v32);
                      }
                      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
                    }
                  }
                  goto LABEL_17;
                }
              }
              else
              {
                *(uint64_t **)((char *)v110 + 156) = (uint64_t *)v111;
                *((_BYTE *)v110 + 164) = 1;
                v13 = v107;
                v112 = v190;
                v113 = v189;
                v114 = v203;
                if (!v203)
                  goto LABEL_196;
              }
              (*v114)[1](v114);
              v113 = v189;
              v112 = v190;
              goto LABEL_196;
            }
          }
          (**v109)(v109);
          goto LABEL_193;
        }
        v40 = *(_QWORD *)(v187 + 96);
        if (v40 == *(_QWORD *)(v187 + 104)
          || (v41 = *(_QWORD *)(v40 + 96), v42 = *(_QWORD *)(v40 + 104), v43 = v42 - v41, v42 == v41))
        {
          v49 = 0;
          v44 = 0;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
            goto LABEL_155;
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * (v43 >> 3) >= 0xAAAAAAAAAAAAAABLL)
            goto LABEL_329;
          v44 = (std::string::size_type *)operator new(v43);
          v45 = 0;
          do
          {
            while (1)
            {
              v46 = (__int128 *)(v41 + v45 * 8);
              v47 = (std::string *)&v44[v45];
              if ((*(char *)(v41 + v45 * 8 + 23) & 0x80000000) == 0)
                break;
              std::string::__init_copy_ctor_external(v47, *(const std::string::value_type **)v46, *((_QWORD *)v46 + 1));
              v45 += 3;
              if (v41 + v45 * 8 == v42)
                goto LABEL_64;
            }
            v48 = *v46;
            v47->__r_.__value_.__r.__words[2] = *((_QWORD *)v46 + 2);
            *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
            v45 += 3;
          }
          while (v41 + v45 * 8 != v42);
LABEL_64:
          v49 = (uint64_t)&v44[v45];
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
          {
LABEL_155:
            v86 = *(_QWORD *)(v18 + 56);
            if (*(_QWORD *)(v18 + 64) - v86 != 8)
              goto LABEL_328;
            v87 = *(_QWORD *)(*(_QWORD *)v86 + 32);
            v205 = v87;
            if (v87)
            {
              (**(void (***)(uint64_t))v87)(v87);
              webrtc::SdpOfferAnswerHandler::SetAssociatedRemoteStreams(v3, &v205, (uint64_t)v44, v49, (uint64_t)&v211, (uint64_t)&v208);
              (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 112))(v18) & 0xFF00000000) == 0)
                goto LABEL_162;
            }
            else
            {
              webrtc::SdpOfferAnswerHandler::SetAssociatedRemoteStreams(v3, &v205, (uint64_t)v44, v49, (uint64_t)&v211, (uint64_t)&v208);
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 112))(v18) & 0xFF00000000) == 0)
                goto LABEL_162;
            }
            v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 112))(v18);
            if ((v88 & 0xFF00000000) == 0)
              goto LABEL_327;
            if ((v88 & 0xFFFFFFFD) == 0)
              goto LABEL_169;
LABEL_162:
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            {
              v177 = v177 & 0xFFFFFFFF00000000 | 0x4341;
              rtc::webrtc_logging_impl::Log("\r\t\n\t", v89, v90, v91, v34, v35, v36, (uint64_t)v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
            }
            v92 = (void (***)(_QWORD))*v14;
            if (*v14)
              (**v92)(*v14);
            if (v11 < v184)
            {
              if (!v11)
                goto LABEL_327;
              *(_QWORD *)v11 = v92;
              v11 += 8;
LABEL_169:
              v93 = v189;
              if (!v44)
              {
LABEL_189:
                a2 = v182;
                v15 = v181;
                if (v182)
                  goto LABEL_203;
                goto LABEL_190;
              }
LABEL_198:
              while ((std::string::size_type *)v49 != v44)
              {
                if (*(char *)(v49 - 1) < 0)
                  operator delete(*(void **)(v49 - 24));
                v49 -= 24;
              }
              operator delete(v44);
              a2 = v182;
              v15 = v181;
              goto LABEL_202;
            }
            v94 = v11 - v13;
            v95 = (v11 - v13) >> 3;
            v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 61)
              goto LABEL_329;
            if ((v184 - v13) >> 2 > v96)
              v96 = (v184 - v13) >> 2;
            if ((unint64_t)(v184 - v13) >= 0x7FFFFFFFFFFFFFF8)
              v96 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v96)
            {
LABEL_327:
              __break(1u);
LABEL_328:
              rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 483, "1u == receivers_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v34, v35, v36, (uint64_t)v37, 1);
LABEL_329:
              abort();
            }
            if (v96 >> 61)
              goto LABEL_331;
            v185 = 8 * v96;
            v97 = (char *)operator new(8 * v96);
            v98 = &v97[8 * v95];
            *(_QWORD *)v98 = v92;
            v99 = v98 + 8;
            v100 = v11 - v13;
            if (v11 == v13)
            {
              v3 = v180;
              v184 = &v97[v185];
              if (v13)
LABEL_187:
                operator delete(v13);
LABEL_188:
              v11 = v99;
              v13 = v98;
              v93 = v189;
              if (!v44)
                goto LABEL_189;
              goto LABEL_198;
            }
            v101 = v100 - 8;
            if ((unint64_t)(v100 - 8) >= 0x138)
            {
              v132 = v11 - 8 - v13;
              if (&v11[-(v132 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
              {
                v102 = v11;
              }
              else if (&v97[v94 - 8 - (v132 & 0xFFFFFFFFFFFFFFF8)] > &v97[v94 - 8])
              {
                v102 = v11;
              }
              else
              {
                v133 = v132 & 0xFFFFFFFFFFFFFFF8;
                if (&v11[-v133 - 8] >= v98 || (v102 = v11, &v97[v94 - v133 - 8] >= v11))
                {
                  v134 = (v101 >> 3) + 1;
                  v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
                  v102 = &v11[-v135];
                  v98 -= v135;
                  v136 = &v97[8 * v95 - 16];
                  v137 = v11 - 16;
                  v138 = v134 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v140 = *((_OWORD *)v137 - 1);
                    v139 = *(_OWORD *)v137;
                    *((_OWORD *)v137 - 1) = 0uLL;
                    *(_OWORD *)v137 = 0uLL;
                    *((_OWORD *)v136 - 1) = v140;
                    *(_OWORD *)v136 = v139;
                    v136 -= 32;
                    v137 -= 32;
                    v138 -= 4;
                  }
                  while (v138);
                  if (v134 == (v134 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_182;
                }
              }
            }
            else
            {
              v102 = v11;
            }
            do
            {
              v103 = *((_QWORD *)v102 - 1);
              v102 -= 8;
              *(_QWORD *)v102 = 0;
              *((_QWORD *)v98 - 1) = v103;
              v98 -= 8;
            }
            while (v102 != v13);
LABEL_182:
            v104 = v97;
            v3 = v180;
            do
            {
              v106 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              v105 = v106;
              if (v106)
                (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
            }
            while (v11 != v13);
            v184 = &v104[v185];
            if (v13)
              goto LABEL_187;
            goto LABEL_188;
          }
        }
        __p = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc";
        v200 = (void **)(v179 & 0xFFFFFFFF00000000 | 0x42F1);
        v201 = v218;
        v53 = v49 - (_QWORD)v44;
        *((_BYTE *)&v206.__r_.__value_.__s + 23) = 9;
        if (v175)
          goto LABEL_327;
        v179 = v179 & 0xFFFFFFFF00000000 | 0x42F1;
        if ((std::string::size_type *)v49 == v44)
          v54 = 0;
        else
          v54 = v44;
        strcpy((char *)&v206, "streams=[");
        if ((std::string::size_type *)v49 == v44)
        {
          v58 = &v206;
          size = 9;
          v60 = &v206.__r_.__value_.__s.__data_[9];
          if ((char *)&v206.__r_.__value_.__r.__words[1] + 1 > "]")
            goto LABEL_149;
          goto LABEL_148;
        }
        if (*((char *)v44 + 23) < 0)
        {
          v50 = *v44;
          v55 = v44[1];
          v56 = v55 == 0;
          if (!*v44 && v55)
            goto LABEL_327;
        }
        else
        {
          v55 = *((unsigned __int8 *)v44 + 23);
          v56 = *((_BYTE *)v44 + 23) == 0;
          v50 = (std::string::size_type)v44;
        }
        if (v55 <= 0xD)
        {
          if (v56)
          {
LABEL_101:
            if (v53 == 24)
            {
LABEL_102:
              if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
              {
                size = v206.__r_.__value_.__l.__size_;
                v50 = (v206.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                v3 = v180;
                if (v50 == v206.__r_.__value_.__l.__size_)
                  goto LABEL_144;
                v58 = (std::string *)v206.__r_.__value_.__r.__words[0];
                v60 = (char *)(v206.__r_.__value_.__r.__words[0] + v206.__r_.__value_.__l.__size_);
                if (v206.__r_.__value_.__r.__words[0] + v206.__r_.__value_.__l.__size_ > (unint64_t)"]")
                  goto LABEL_149;
              }
              else
              {
                size = HIBYTE(v206.__r_.__value_.__r.__words[2]);
                if (HIBYTE(v206.__r_.__value_.__r.__words[2]) == 22)
                {
                  v50 = 22;
                  v3 = v180;
LABEL_144:
                  std::string::__grow_by_and_replace(&v206, v50, 1uLL, v50, v50, 0, 1uLL, "]");
                  goto LABEL_153;
                }
                v58 = &v206;
                v60 = (char *)&v206 + HIBYTE(v206.__r_.__value_.__r.__words[2]);
                if (v60 > "]")
                {
LABEL_149:
                  *v60 = 93;
                  v85 = size + 1;
                  v3 = v180;
                  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
                    v206.__r_.__value_.__l.__size_ = v85;
                  else
                    *((_BYTE *)&v206.__r_.__value_.__s + 23) = v85 & 0x7F;
                  v58->__r_.__value_.__s.__data_[v85] = 0;
LABEL_153:
                  rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t", v50, v51, v52, v34, v35, v36, (uint64_t)v37, (uint64_t)__p);
                  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v206.__r_.__value_.__l.__data_);
                  goto LABEL_155;
                }
              }
LABEL_148:
              if (v60 + 1 > "]")
                goto LABEL_327;
              goto LABEL_149;
            }
            v67 = (std::string::size_type *)((char *)v54 + v53);
            v68 = v44 + 3;
            v183 = v44;
            while (1)
            {
              if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
              {
                v52 = v206.__r_.__value_.__l.__size_;
                v69 = (v206.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v69 - v206.__r_.__value_.__l.__size_ < 2)
                  goto LABEL_112;
                v73 = (std::string *)v206.__r_.__value_.__r.__words[0];
              }
              else
              {
                v52 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
                if ((unint64_t)HIBYTE(v206.__r_.__value_.__r.__words[2]) - 21 < 2)
                {
                  v69 = 22;
LABEL_112:
                  std::string::__grow_by_and_replace(&v206, v69, v52 - v69 + 2, v52, v52, 0, 2uLL, ", ");
                  v70 = *((char *)v68 + 23);
                  if ((v70 & 0x80000000) == 0)
                    goto LABEL_113;
                  goto LABEL_122;
                }
                v73 = &v206;
              }
              if ((char *)v73 + v52 <= ", " && &v73->__r_.__value_.__s.__data_[v52 + 2] > ", ")
                goto LABEL_327;
              *(_WORD *)((char *)&v73->__r_.__value_.__l.__data_ + v52) = 8236;
              v75 = v52 + 2;
              if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
              {
                v206.__r_.__value_.__l.__size_ = v52 + 2;
                v73->__r_.__value_.__s.__data_[v75] = 0;
                v70 = *((char *)v68 + 23);
                if ((v70 & 0x80000000) == 0)
                {
LABEL_113:
                  v71 = v70;
                  v72 = v70 == 0;
                  v37 = (const std::string::value_type *)v68;
                  goto LABEL_124;
                }
              }
              else
              {
                *((_BYTE *)&v206.__r_.__value_.__s + 23) = v75 & 0x7F;
                v73->__r_.__value_.__s.__data_[v75] = 0;
                v70 = *((char *)v68 + 23);
                if ((v70 & 0x80000000) == 0)
                  goto LABEL_113;
              }
LABEL_122:
              v37 = (const std::string::value_type *)*v68;
              v71 = v68[1];
              v72 = v71 == 0;
              if (!*v68 && v71)
                goto LABEL_327;
LABEL_124:
              if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v50 = 22;
              else
                v50 = (v206.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v76 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
              else
                v76 = v206.__r_.__value_.__l.__size_;
              if (v50 - v76 < v71)
              {
                std::string::__grow_by_and_replace(&v206, v50, v76 + v71 - v50, v76, v76, 0, v71, v37);
              }
              else if (!v72)
              {
                v77 = v18;
                v78 = v14;
                v79 = v67;
                v80 = v11;
                v81 = v13;
                if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v82 = &v206;
                else
                  v82 = (std::string *)v206.__r_.__value_.__r.__words[0];
                v83 = (char *)v82 + v76;
                if ((char *)v82 + v76 <= v37 && &v83[v71] > v37)
                  goto LABEL_327;
                memmove(v83, v37, v71);
                v84 = v76 + v71;
                if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
                  v206.__r_.__value_.__l.__size_ = v76 + v71;
                else
                  *((_BYTE *)&v206.__r_.__value_.__s + 23) = v84 & 0x7F;
                v82->__r_.__value_.__s.__data_[v84] = 0;
                v13 = v81;
                v11 = v80;
                v67 = v79;
                v14 = v78;
                v18 = v77;
                v44 = v183;
              }
              v68 += 3;
              if (v68 == v67)
                goto LABEL_102;
            }
          }
          v66 = v54;
          if ((unint64_t)&v206.__r_.__value_.__r.__words[1] + 1 <= v50
            && (unint64_t)&v206.__r_.__value_.__r.__words[1] + v55 + 1 > v50)
          {
            goto LABEL_327;
          }
          memmove((char *)&v206.__r_.__value_.__r.__words[1] + 1, (const void *)v50, v55);
          if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
            v206.__r_.__value_.__l.__size_ = v55 + 9;
          else
            *((_BYTE *)&v206.__r_.__value_.__s + 23) = v55 + 9;
          v65 = &v206.__r_.__value_.__s.__data_[v55 + 9];
          v54 = v66;
        }
        else
        {
          v174 = v54;
          if (v55 - 0x7FFFFFFFFFFFFFEELL <= 0x800000000000001ELL)
            goto LABEL_329;
          v61 = (char *)v50;
          v62 = 44;
          if (v55 + 9 > 0x2C)
            v62 = v55 + 9;
          v173 = (v62 | 7) + 1;
          v63 = (std::string *)operator new(v173);
          v64 = &v63->__r_.__value_.__s.__data_[9];
          if (&v206 >= v63 && (std::string *)((char *)&v63->__r_.__value_.__r.__words[1] + 1) > &v206)
            goto LABEL_327;
          v63->__r_.__value_.__s.__data_[8] = 91;
          v63->__r_.__value_.__r.__words[0] = *(_QWORD *)"streams=[";
          if (v64 <= v61 && &v64[v55] > v61)
            goto LABEL_327;
          memcpy(v64, v61, v55);
          v206.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          v206.__r_.__value_.__l.__size_ = v55 + 9;
          v206.__r_.__value_.__r.__words[2] = v173 | 0x8000000000000000;
          v65 = &v63->__r_.__value_.__s.__data_[v55 + 9];
          v54 = v174;
          v53 = v49 - (_QWORD)v44;
        }
        *v65 = 0;
        goto LABEL_101;
      }
    }
    v22 = v13;
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 64))(*(_QWORD *)(v3 + 8)))
    {
      v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 64))(*(_QWORD *)(v3 + 8)) + 8;
      v207 = (void (***)(_QWORD))*v14;
      v24 = v207;
      if (!v207)
        goto LABEL_28;
    }
    else
    {
      v23 = 0;
      v207 = (void (***)(_QWORD))*v14;
      v24 = v207;
      if (!v207)
      {
LABEL_28:
        v25 = std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>>>::__emplace_unique_key_args<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::piecewise_construct_t const&,std::tuple<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>,std::tuple<>>((uint64_t **)(v23 + 24), (unint64_t)v24, &v207);
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v18 + 56))(&v206, v18);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v206.__r_.__value_.__l.__data_ + 48))(&__p);
        if (*((_BYTE *)v25 + 112))
        {
          v26 = (void **)__p;
          if (__p)
            goto LABEL_30;
        }
        else
        {
          std::optional<std::vector<std::string>>::operator=[abi:sn180100]<std::vector<std::string> const&,void>((uint64_t)(v25 + 11), (__int128 **)&__p);
          v26 = (void **)__p;
          if (__p)
          {
LABEL_30:
            v27 = v200;
            if (v200 == v26)
            {
              v200 = v26;
              operator delete(v26);
              v28 = v206.__r_.__value_.__r.__words[0];
              if (!v206.__r_.__value_.__r.__words[0])
              {
LABEL_49:
                v13 = v22;
                v21 = v189;
                if (v207)
                {
                  (*v207)[1](v207);
                  v21 = v189;
                }
                goto LABEL_51;
              }
            }
            else
            {
              do
              {
                if (*((char *)v27 - 1) < 0)
                  operator delete(*(v27 - 3));
                v27 -= 3;
              }
              while (v27 != v26);
              v200 = v26;
              operator delete(__p);
              v28 = v206.__r_.__value_.__r.__words[0];
              if (!v206.__r_.__value_.__r.__words[0])
                goto LABEL_49;
            }
LABEL_48:
            (*(void (**)(std::string::size_type))(*(_QWORD *)v28 + 8))(v28);
            goto LABEL_49;
          }
        }
        v28 = v206.__r_.__value_.__r.__words[0];
        if (!v206.__r_.__value_.__r.__words[0])
          goto LABEL_49;
        goto LABEL_48;
      }
    }
    (**v24)(v24);
    goto LABEL_28;
  }
  v141 = 0;
  v11 = 0;
LABEL_258:
  operator delete(v176);
LABEL_259:
  v144 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 144))(*(_QWORD *)(v3 + 8));
  for (i = v141; v141 != v11; v141 += 8)
  {
    v149 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 136))(*(_QWORD *)(v3 + 8));
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)v141 + 56))(&v206);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v206.__r_.__value_.__l.__data_ + 32))(&__p);
    webrtc::LegacyStatsCollector::AddTrack(v149, (uint64_t)__p);
    if (__p)
      (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    if (v206.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v206.__r_.__value_.__l.__data_ + 8))(v206.__r_.__value_.__r.__words[0]);
    v150 = *(void (****)(_QWORD))v141;
    v195 = v150;
    if (v150)
      (**v150)(v150);
    (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v144 + 144))(v144, &v195);
    if (v195)
      (*v195)[1](v195);
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v141 + 56))(&v194);
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)v141 + 56))(&v206);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v206.__r_.__value_.__l.__data_ + 56))(&__p);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v144 + 136))(v144, &v194, &__p);
    v151 = (void **)__p;
    if (__p)
    {
      v152 = v200;
      v153 = __p;
      if (v200 != __p)
      {
        do
        {
          v155 = (uint64_t)*--v152;
          v154 = v155;
          if (v155)
            (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
        }
        while (v152 != v151);
        v153 = __p;
      }
      v200 = v151;
      operator delete(v153);
    }
    if (v206.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v206.__r_.__value_.__l.__data_ + 8))(v206.__r_.__value_.__r.__words[0]);
    if (v194)
      (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  }
  v147 = v211;
  v146 = v212;
  if (v211 != v212)
  {
    v148 = v211;
    do
    {
      v156 = *v148;
      v193 = v156;
      if (v156)
        (**v156)(v156);
      (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v144 + 24))(v144, &v193);
      if (v193)
        (*v193)[1](v193);
      ++v148;
    }
    while (v148 != v146);
  }
  v157 = v214;
  v158 = v215;
  if (v214 != v215)
  {
    v159 = v214;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v159 + 56))(&v192);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v144 + 152))(v144, &v192);
      if (v192)
        (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
      v159 += 8;
    }
    while (v159 != v158);
  }
  v160 = v208;
  v161 = v209;
  if (v208 != v209)
  {
    v162 = v208;
    do
    {
      v163 = *v162;
      v191 = v163;
      if (v163)
        (**v163)(v163);
      (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v144 + 32))(v144, &v191);
      if (v191)
        (*v191)[1](v191);
      ++v162;
    }
    while (v162 != v161);
    if (!v160)
      goto LABEL_308;
    while (v161 != v160)
    {
      v165 = (uint64_t)*--v161;
      v164 = v165;
      if (v165)
        (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
    }
    goto LABEL_307;
  }
  if (v208)
LABEL_307:
    operator delete(v160);
LABEL_308:
  if (v147)
  {
    while (v146 != v147)
    {
      v167 = (uint64_t)*--v146;
      v166 = v167;
      if (v167)
        (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
    }
    operator delete(v147);
  }
  if (v157)
  {
    while (v158 != v157)
    {
      v169 = *((_QWORD *)v158 - 1);
      v158 -= 8;
      v168 = v169;
      if (v169)
        (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
    }
    operator delete(v157);
  }
  if (i)
  {
    while (v11 != i)
    {
      v171 = *((_QWORD *)v11 - 1);
      v11 -= 8;
      v170 = v171;
      if (v171)
        (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
    }
    operator delete(i);
  }
}

uint64_t webrtc::SdpOfferAnswerHandler::PlanBUpdateSendersAndReceivers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  cricket::StreamParams *v21;
  uint64_t v22;
  cricket::StreamParams *v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  cricket::StreamParams *v32;
  uint64_t v33;
  cricket::StreamParams *v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  void (***v38)(_QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  _BOOL4 v46;
  char *v47;
  char *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t *v60;
  uint64_t *v61;
  int64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v83;
  uint64_t v84;
  void (***v85)(_QWORD);
  void *__p;
  char *v87;
  void *v88;
  char *v89;
  char *v90;

  v10 = operator new();
  v11 = (_QWORD *)v10;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = off_24C0C0270;
  *(_QWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 32) = 0;
  v12 = (unsigned int *)(v10 + 32);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  v83 = (_QWORD *)v10;
  if (a2)
  {
    if (*(_BYTE *)(a2 + 28))
    {
      v88 = 0;
      v89 = 0;
      v90 = 0;
      webrtc::SdpOfferAnswerHandler::UpdateLocalSenders(a1, (unsigned __int8 **)&v88, 0);
      v88 = 0;
      v89 = 0;
      v90 = 0;
      webrtc::SdpOfferAnswerHandler::UpdateRemoteSendersList(a1, (unsigned __int8 **)&v88, 0, 0, 0);
    }
    else
    {
      v14 = *(_DWORD *)(a3 + 124);
      if (*(_BYTE *)(a1 + 208))
        v15 = 1;
      else
        v15 = v14 >= 2;
      v16 = !v15;
      if (v14 > 1)
      {
        v23 = 0;
        v21 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 0;
      }
      else
      {
        v88 = 0;
        v89 = 0;
        v90 = 0;
        v17 = *(_QWORD *)(a3 + 96);
        v18 = *(_QWORD *)(a3 + 104);
        v19 = v18 - v17;
        if (v18 == v17)
        {
          v23 = 0;
          v21 = 0;
        }
        else
        {
          v20 = 0x8E38E38E38E38E39 * (v19 >> 4);
          if (v20 > 0x1C71C71C71C71C7)
            goto LABEL_120;
          v21 = (cricket::StreamParams *)operator new(v19);
          v22 = 0;
          v88 = v21;
          v90 = (char *)v21 + 144 * v20;
          do
          {
            cricket::StreamParams::StreamParams((std::string *)((char *)v21 + v22), (const cricket::StreamParams *)(v17 + v22));
            v22 += 144;
          }
          while (v17 + v22 != v18);
          v23 = (cricket::StreamParams *)((char *)v21 + v22);
          v89 = (char *)v21 + v22;
          v11 = v83;
        }
      }
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
      webrtc::SdpOfferAnswerHandler::UpdateRemoteSendersList(a1, (unsigned __int8 **)&v88, v16, v24, v11);
      if (v21)
      {
        while (v23 != v21)
        {
          v23 = (cricket::StreamParams *)((char *)v23 - 144);
          cricket::StreamParams::~StreamParams(v23);
        }
        operator delete(v21);
      }
    }
  }
  if (a4)
  {
    if (*(_BYTE *)(a4 + 28))
    {
      v88 = 0;
      v89 = 0;
      v90 = 0;
      webrtc::SdpOfferAnswerHandler::UpdateLocalSenders(a1, (unsigned __int8 **)&v88, 1);
      v88 = 0;
      v89 = 0;
      v90 = 0;
      webrtc::SdpOfferAnswerHandler::UpdateRemoteSendersList(a1, (unsigned __int8 **)&v88, 0, 1, 0);
    }
    else
    {
      v25 = *(_DWORD *)(a5 + 124);
      if (*(_BYTE *)(a1 + 208))
        v26 = 1;
      else
        v26 = v25 >= 2;
      v27 = !v26;
      if (v25 > 1)
      {
        v34 = 0;
        v32 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 0;
      }
      else
      {
        v88 = 0;
        v89 = 0;
        v90 = 0;
        v28 = *(_QWORD *)(a5 + 96);
        v29 = *(_QWORD *)(a5 + 104);
        v30 = v29 - v28;
        if (v29 == v28)
        {
          v34 = 0;
          v32 = 0;
        }
        else
        {
          v31 = 0x8E38E38E38E38E39 * (v30 >> 4);
          if (v31 > 0x1C71C71C71C71C7)
            goto LABEL_120;
          v32 = (cricket::StreamParams *)operator new(v30);
          v33 = 0;
          v88 = v32;
          v90 = (char *)v32 + 144 * v31;
          do
          {
            cricket::StreamParams::StreamParams((std::string *)((char *)v32 + v33), (const cricket::StreamParams *)(v28 + v33));
            v33 += 144;
          }
          while (v28 + v33 != v29);
          v34 = (cricket::StreamParams *)((char *)v32 + v33);
          v89 = (char *)v32 + v33;
        }
      }
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
      webrtc::SdpOfferAnswerHandler::UpdateRemoteSendersList(a1, (unsigned __int8 **)&v88, v27, v35, v11);
      if (v32)
      {
        while (v34 != v32)
        {
          v34 = (cricket::StreamParams *)((char *)v34 - 144);
          cricket::StreamParams::~StreamParams(v34);
        }
        operator delete(v32);
      }
    }
  }
  v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
  if ((*(uint64_t (**)(_QWORD *))(*v11 + 32))(v11))
  {
    v37 = 0;
    do
    {
      v38 = (void (***)(_QWORD))(*(uint64_t (**)(_QWORD *, unint64_t))(*v11 + 40))(v11, v37);
      v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8));
      webrtc::LegacyStatsCollector::AddStream(v39, (uint64_t)v38);
      v85 = v38;
      if (v38)
        (**v38)(v38);
      (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v36 + 24))(v36, &v85);
      if (v85)
        (*v85)[1](v85);
      ++v37;
    }
    while (v37 < (*(uint64_t (**)(_QWORD *))(*v11 + 32))(v11));
  }
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80)))
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    while (1)
    {
      v44 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), v40);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v44 + 40))(&v88);
      v45 = (char *)v88;
      if (v88 == v89)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v44 + 48))(&__p, v44);
        v47 = (char *)__p;
        v48 = v87;
        v46 = __p == v87;
        if (__p)
        {
          v49 = __p;
          if (__p != v87)
          {
            do
            {
              v51 = *((_QWORD *)v48 - 1);
              v48 -= 8;
              v50 = v51;
              if (v51)
                (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
            }
            while (v48 != v47);
            v49 = __p;
          }
          v87 = v47;
          operator delete(v49);
        }
        v45 = (char *)v88;
        if (!v88)
        {
LABEL_58:
          if (v46)
            goto LABEL_76;
          goto LABEL_55;
        }
      }
      else
      {
        v46 = 0;
        if (!v88)
          goto LABEL_58;
      }
      v52 = v89;
      if (v89 != v45)
      {
        do
        {
          v54 = *((_QWORD *)v52 - 1);
          v52 -= 8;
          v53 = v54;
          if (v54)
            (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
        }
        while (v52 != v45);
        v89 = v45;
        operator delete(v88);
        if (!v46)
          goto LABEL_55;
LABEL_76:
        (**(void (***)(uint64_t))v44)(v44);
        if ((unint64_t)v43 < v42)
        {
          if (!v43)
            goto LABEL_119;
          *v43++ = v44;
          goto LABEL_55;
        }
        v55 = (char *)v43 - (char *)v41;
        v56 = v43 - v41;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 61)
          goto LABEL_120;
        if ((uint64_t)(v42 - (_QWORD)v41) >> 2 > v57)
          v57 = (uint64_t)(v42 - (_QWORD)v41) >> 2;
        if (v42 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
          v57 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v57)
        {
LABEL_119:
          __break(1u);
LABEL_120:
          abort();
        }
        if (v57 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v84 = 8 * v57;
        v58 = (char *)operator new(8 * v57);
        v59 = v58;
        v60 = (uint64_t *)&v58[8 * v56];
        *v60 = v44;
        v61 = v60 + 1;
        v62 = (char *)v43 - (char *)v41;
        if (v43 != v41)
        {
          v63 = v62 - 8;
          if ((unint64_t)(v62 - 8) < 0x138)
          {
            v64 = v43;
            goto LABEL_89;
          }
          v66 = (char *)(v43 - 1) - (char *)v41;
          if ((uint64_t *)((char *)v43 - (v66 & 0xFFFFFFFFFFFFFFF8) - 8) > v43 - 1)
          {
            v64 = v43;
            goto LABEL_89;
          }
          if (&v58[v55 - 8 - (v66 & 0xFFFFFFFFFFFFFFF8)] > &v58[v55 - 8])
          {
            v64 = v43;
            goto LABEL_89;
          }
          v67 = v66 & 0xFFFFFFFFFFFFFFF8;
          if ((uint64_t *)((char *)v43 - v67 - 8) < v60)
          {
            v64 = v43;
            if (&v58[v55 - v67 - 8] < (char *)v43)
              goto LABEL_124;
          }
          v68 = (v63 >> 3) + 1;
          v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
          v64 = &v43[v69 / 0xFFFFFFFFFFFFFFF8];
          v60 = (uint64_t *)((char *)v60 - v69);
          v70 = &v58[8 * v56 - 16];
          v71 = v43 - 2;
          v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v74 = *((_OWORD *)v71 - 1);
            v73 = *(_OWORD *)v71;
            *((_OWORD *)v71 - 1) = 0uLL;
            *(_OWORD *)v71 = 0uLL;
            *((_OWORD *)v70 - 1) = v74;
            *(_OWORD *)v70 = v73;
            v70 -= 32;
            v71 -= 4;
            v72 -= 4;
          }
          while (v72);
          if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_124:
            do
            {
LABEL_89:
              v65 = *--v64;
              *v64 = 0;
              *--v60 = v65;
            }
            while (v64 != v41);
          }
          do
          {
            v76 = *--v43;
            v75 = v76;
            if (v76)
              (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
          }
          while (v43 != v41);
        }
        v42 = (unint64_t)&v59[v84];
        if (v41)
          operator delete(v41);
        v43 = v61;
        v41 = v60;
        goto LABEL_55;
      }
      v89 = v45;
      operator delete(v45);
      if (v46)
        goto LABEL_76;
LABEL_55:
      if (++v40 >= (unint64_t)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80)))
      {
        if (v41 == v43)
        {
          if (!v43)
            return (*(uint64_t (**)(_QWORD *))(*v83 + 8))(v83);
        }
        else
        {
          v77 = v41;
          do
          {
            webrtc::StreamCollection::RemoveStream(*(_QWORD *)(a1 + 80), *v77);
            v78 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
            v79 = (void *)*v77;
            *v77 = 0;
            v88 = v79;
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 32))(v78, &v88);
            if (v88)
              (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
            ++v77;
          }
          while (v77 != v43);
          if (!v41)
            return (*(uint64_t (**)(_QWORD *))(*v83 + 8))(v83);
          do
          {
            v81 = *--v43;
            v80 = v81;
            if (v81)
              (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
          }
          while (v43 != v41);
        }
        operator delete(v41);
        return (*(uint64_t (**)(_QWORD *))(*v83 + 8))(v83);
      }
    }
  }
  return (*(uint64_t (**)(_QWORD *))(*v83 + 8))(v83);
}

void webrtc::SdpOfferAnswerHandler::RemoveStoppedTransceivers(webrtc::SdpOfferAnswerHandler *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  void (***v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  const webrtc::RtpTransceiver *v15;
  const webrtc::SessionDescriptionInterface *v16;
  _QWORD *MediaSectionForTransceiver;
  const webrtc::RtpTransceiver *v18;
  const webrtc::SessionDescriptionInterface *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  std::string __p;
  char v41;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1)))
  {
    if (*(_QWORD *)(*((_QWORD *)this + 2) + 96))
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
      v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
      v4 = *(_QWORD *)(v3 + 8);
      v5 = *(_QWORD *)(v3 + 16);
      v6 = v5 - v4;
      if (v5 != v4)
      {
        if ((v6 & 0x8000000000000000) != 0)
          abort();
        v7 = operator new(v6);
        v8 = 0;
        do
        {
          v9 = *(void (****)(_QWORD))(v4 + v8);
          v7[(unint64_t)v8 / 8] = v9;
          if (v9)
            (**v9)(v9);
          v8 += 8;
        }
        while (v4 + v8 != v5);
        if (v8)
        {
          v10 = v8 >> 3;
          v11 = v10 * 8;
          v12 = v7;
          while (1)
          {
            v14 = (_QWORD *)*v12;
            if (*v12)
              (*(void (**)(_QWORD))*v14)(*v12);
            if (!(*(unsigned int (**)(_QWORD *))(*v14 + 64))(v14))
              goto LABEL_13;
            v15 = (const webrtc::RtpTransceiver *)v14[2];
            v16 = (const webrtc::SessionDescriptionInterface *)(*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)this + 24))(this);
            MediaSectionForTransceiver = webrtc::SdpOfferAnswerHandler::FindMediaSectionForTransceiver(*((webrtc::SdpOfferAnswerHandler **)this + 1), v15, v16);
            v18 = (const webrtc::RtpTransceiver *)v14[2];
            v19 = (const webrtc::SessionDescriptionInterface *)(*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)this + 32))(this);
            v20 = webrtc::SdpOfferAnswerHandler::FindMediaSectionForTransceiver(*((webrtc::SdpOfferAnswerHandler **)this + 1), v18, v19);
            if (!MediaSectionForTransceiver)
              break;
            if (*((_BYTE *)MediaSectionForTransceiver + 28))
              goto LABEL_23;
            if (v20)
              goto LABEL_22;
LABEL_29:
            if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)))
              v13 = (_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1))
                             + 8);
            else
              v13 = 0;
            v39 = v14;
            (*(void (**)(_QWORD *))*v14)(v14);
            webrtc::TransceiverList::Remove(v13, &v39);
            (*(void (**)(_QWORD *))(*v14 + 8))(v14);
LABEL_13:
            (*(void (**)(_QWORD *))(*v14 + 8))(v14);
            ++v12;
            v11 -= 8;
            if (!v11)
            {
              do
              {
                v37 = v7[v10 - 1];
                if (v37)
                  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
                --v10;
              }
              while (v10 * 8);
              goto LABEL_37;
            }
          }
          if (!v20)
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            {
              v38 = v38 & 0xFFFFFFFF00000000 | 0x9AC9;
              rtc::webrtc_logging_impl::Log("\r\t", v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
            }
            goto LABEL_29;
          }
LABEL_22:
          if (*((_BYTE *)v20 + 28))
          {
LABEL_23:
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            {
              v1 = v1 & 0xFFFFFFFF00000000 | 0x9A91;
              rtc::webrtc_logging_impl::Log("\r\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
            }
            v28 = v14[2];
            __p.__r_.__value_.__s.__data_[0] = 0;
            v41 = 0;
            std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v28 + 104), &__p);
            if (v41 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v29 = v14[2];
            *(_QWORD *)(v29 + 136) = 0;
            *(_BYTE *)(v29 + 144) = 0;
            goto LABEL_29;
          }
          goto LABEL_29;
        }
LABEL_37:
        operator delete(v7);
      }
    }
  }
}

uint64_t webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SignalCompletion(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  size_t size;
  std::string *p_src;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  void **v20;
  char v21;
  int v22;
  std::string __p;
  _DWORD v24[2];
  std::string __src;
  __int128 v26;
  unint64_t v27;

  v3 = *(_QWORD *)(this + 24);
  if (!v3)
    return this;
  v4 = this;
  v5 = this + 64;
  v6 = *(_DWORD *)(this + 64);
  if (v6)
  {
    a3 = *(unsigned int *)(this + 128);
    if ((_DWORD)a3 != -1)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v7, a3, v5, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      v12 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      {
        size = __src.__r_.__value_.__l.__size_;
        if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
          || (p_src = (std::string *)__src.__r_.__value_.__r.__words[0], __src.__r_.__value_.__l.__size_)
          && !__src.__r_.__value_.__r.__words[0])
        {
LABEL_37:
          __break(1u);
LABEL_38:
          abort();
        }
        if (__src.__r_.__value_.__l.__size_ >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_38;
      }
      else
      {
        size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        p_src = &__src;
      }
      if (size > 0x16)
      {
        v16 = (size & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((size | 7) != 0x17)
          v16 = size | 7;
        v17 = v16 + 1;
        v15 = (std::string *)operator new(v16 + 1);
        *((_QWORD *)&v26 + 1) = size;
        v27 = v17 | 0x8000000000000000;
        *(_QWORD *)&v26 = v15;
      }
      else
      {
        HIBYTE(v27) = size;
        v15 = (std::string *)&v26;
      }
      v18 = (std::string *)((char *)v15 + size);
      if (v15 > p_src || v18 <= p_src)
      {
        if (size)
          memmove(v15, p_src, size);
        v18->__r_.__value_.__s.__data_[0] = 0;
        v20 = (void **)(v4 + 72);
        if (*(char *)(v4 + 95) < 0)
        {
          operator delete(*v20);
          v21 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
          *(_OWORD *)v20 = v26;
          *(_QWORD *)(v4 + 88) = v27;
          if ((v21 & 0x80) == 0)
            goto LABEL_25;
        }
        else
        {
          *(_OWORD *)v20 = v26;
          *(_QWORD *)(v4 + 88) = v27;
          if ((v12 & 0x80) == 0)
          {
LABEL_25:
            v3 = *(_QWORD *)(v4 + 24);
            v6 = *(_DWORD *)(v4 + 64);
            goto LABEL_26;
          }
        }
        operator delete(__src.__r_.__value_.__l.__data_);
        goto LABEL_25;
      }
      goto LABEL_37;
    }
  }
LABEL_26:
  v22 = v6;
  if (*(char *)(v4 + 95) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 72), *(_QWORD *)(v4 + 80));
  else
    __p = *(std::string *)(v4 + 72);
  v24[0] = *(_DWORD *)(v4 + 96);
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)(v4 + 99);
  (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, &v22, a3, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  this = *(_QWORD *)(v4 + 24);
  if (this)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  *(_QWORD *)(v4 + 24) = 0;
  return this;
}

void webrtc::SdpOfferAnswerHandler::SetAssociatedRemoteStreams(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  void (***v13)(_QWORD);
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  std::string *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  uint64_t *v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  rtc::Thread *v55;
  unint64_t v56;
  void (***v57)(_QWORD);
  uint64_t *v58;
  void *v59;
  uint64_t v60;
  std::string *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  void (***v70)(_QWORD);
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  void (***v77)(_QWORD);
  std::string::size_type v78;
  std::string::size_type size;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v92;
  std::string __p;
  uint64_t v94;
  void *v95;
  uint64_t *v96;
  unint64_t v97;

  v6 = a6;
  v7 = a5;
  v8 = a2;
  v9 = a1;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  if (a3 == a4)
  {
    v12 = 0;
    goto LABEL_54;
  }
  v11 = a3;
  v12 = 0;
  do
  {
    v13 = (void (***)(_QWORD))(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 80) + 48))(*(_QWORD *)(v9 + 80), v11);
    if (v13)
    {
      v14 = (uint64_t)v13;
      (**v13)(v13);
      v15 = v97;
      if ((unint64_t)v12 >= v97)
        goto LABEL_25;
      goto LABEL_7;
    }
    v16 = rtc::Thread::Current(0);
    v17 = operator new();
    *(_QWORD *)(v17 + 16) = v17 + 16;
    *(_QWORD *)(v17 + 24) = v17 + 16;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)v17 = &unk_24C0B7020;
    *(_QWORD *)(v17 + 8) = &unk_24C0B70C8;
    v18 = (std::string *)(v17 + 40);
    if (*(char *)(v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
    }
    else
    {
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
      *(_QWORD *)(v17 + 56) = *(_QWORD *)(v11 + 16);
    }
    *(_OWORD *)(v17 + 80) = 0u;
    *(_OWORD *)(v17 + 96) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    *(_QWORD *)v17 = &unk_24C0B71D0;
    *(_QWORD *)(v17 + 8) = &unk_24C0B7280;
    *(_DWORD *)(v17 + 112) = 0;
    v19 = (unsigned int *)(v17 + 112);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v14 = operator new();
    *(_QWORD *)(v14 + 16) = v16;
    *(_QWORD *)(v14 + 24) = v17;
    *(_QWORD *)v14 = off_24C0B9F28;
    *(_QWORD *)(v14 + 8) = &unk_24C0B9FD8;
    *(_DWORD *)(v14 + 32) = 0;
    v21 = (unsigned int *)(v14 + 32);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v23 = *(_QWORD **)(v9 + 80);
    v94 = v14;
    do
      v24 = __ldxr(v21);
    while (__stxr(v24 + 1, v21));
    webrtc::StreamCollection::AddStream(v23, &v94);
    if (v94)
      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
    v25 = *(uint64_t **)(v7 + 8);
    if ((unint64_t)v25 < *(_QWORD *)(v7 + 16))
    {
      if (!v25)
        goto LABEL_106;
      *v25 = v14;
      (**(void (***)(uint64_t))v14)(v14);
      *(_QWORD *)(v7 + 8) = v25 + 1;
      v15 = v97;
      if ((unint64_t)v12 < v97)
        goto LABEL_7;
LABEL_25:
      v26 = (uint64_t *)v95;
      v27 = (char *)v12 - (_BYTE *)v95;
      v28 = ((char *)v12 - (_BYTE *)v95) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        goto LABEL_107;
      v30 = v15 - (_QWORD)v95;
      if (v30 >> 2 > v29)
        v29 = v30 >> 2;
      v31 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8;
      v32 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v31)
        v32 = v29;
      if (!v32)
        goto LABEL_106;
      if (v32 >> 61)
        goto LABEL_108;
      v33 = 8 * v32;
      v34 = (char *)operator new(8 * v32);
      v35 = (uint64_t *)&v34[8 * v28];
      v36 = &v34[v33];
      *v35 = v14;
      v92 = v35 + 1;
      (**(void (***)(uint64_t))v14)(v14);
      if (v12 == v26)
      {
        v95 = &v34[8 * v28];
        v97 = (unint64_t)v36;
        v9 = a1;
        v42 = v35 + 1;
LABEL_45:
        if (v12)
          operator delete(v12);
        v12 = v42;
        v7 = a5;
        goto LABEL_4;
      }
      v37 = (char *)v12 - (char *)v26 - 8;
      if (v37 >= 0x138
        && (v38 = (char *)(v12 - 1) - (char *)v26, (uint64_t *)((char *)v12 - (v38 & 0xFFFFFFFFFFFFFFF8) - 8) <= v12 - 1)
        && &v34[v27 - 8 - (v38 & 0xFFFFFFFFFFFFFFF8)] <= &v34[v27 - 8]
        && ((v39 = v38 & 0xFFFFFFFFFFFFFFF8, (uint64_t *)((char *)v12 - v39 - 8) >= v35)
         || &v34[v27 - v39 - 8] >= (char *)v12))
      {
        v47 = (v37 >> 3) + 1;
        v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
        v40 = &v12[v48 / 0xFFFFFFFFFFFFFFF8];
        v35 = (uint64_t *)((char *)v35 - v48);
        v49 = &v34[8 * v28 - 16];
        v50 = v12 - 2;
        v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v53 = *((_OWORD *)v50 - 1);
          v52 = *(_OWORD *)v50;
          *((_OWORD *)v50 - 1) = 0uLL;
          *(_OWORD *)v50 = 0uLL;
          *((_OWORD *)v49 - 1) = v53;
          *(_OWORD *)v49 = v52;
          v49 -= 32;
          v50 -= 4;
          v51 -= 4;
        }
        while (v51);
        v41 = v36;
        v9 = a1;
        v42 = v92;
        if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          v12 = (uint64_t *)v95;
          v44 = v96;
          v95 = v35;
          v97 = (unint64_t)v41;
          while (v44 != v12)
          {
            v46 = *--v44;
            v45 = v46;
            if (v46)
              (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          }
          goto LABEL_45;
        }
      }
      else
      {
        v40 = v12;
        v41 = v36;
        v9 = a1;
        v42 = v35 + 1;
      }
      do
      {
        v43 = *--v40;
        *v40 = 0;
        *--v35 = v43;
      }
      while (v40 != v26);
      goto LABEL_40;
    }
    *(_QWORD *)(v7 + 8) = std::vector<webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>> const&>(v7, (void (***)(_QWORD))v14);
    v15 = v97;
    if ((unint64_t)v12 >= v97)
      goto LABEL_25;
LABEL_7:
    if (!v12)
      goto LABEL_106;
    *v12++ = v14;
    (**(void (***)(uint64_t))v14)(v14);
LABEL_4:
    v96 = v12;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v11 += 24;
  }
  while (v11 != a4);
  v8 = a2;
  v6 = a6;
  if (v95 != v12)
    goto LABEL_89;
LABEL_54:
  v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v55 = (rtc::Thread *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 32))(v54);
  if ((*((_BYTE *)v55 + 72) & 1) == 0)
  {
    if (*(_QWORD *)(v9 + 224))
    {
      v56 = v97;
      if ((unint64_t)v12 < v97)
        goto LABEL_57;
LABEL_79:
      v71 = v56 - (_QWORD)v12;
      v72 = v71 >> 2;
      if ((unint64_t)(v71 >> 2) <= 1)
        v72 = 1;
      v31 = (unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8;
      v73 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v31)
        v73 = v72;
      if (v73 >> 61)
LABEL_108:
        std::__throw_bad_array_new_length[abi:sn180100]();
      v74 = v73;
      v75 = (uint64_t *)operator new(8 * v73);
      v76 = &v75[v74];
      v9 = a1;
      v77 = *(void (****)(_QWORD))(a1 + 224);
      *v75 = (uint64_t)v77;
      if (v77)
        (**v77)(v77);
      v58 = v75 + 1;
      v95 = v75;
      v96 = v75 + 1;
      v97 = (unint64_t)v76;
      if (v12)
        operator delete(v12);
LABEL_88:
      v96 = v58;
      goto LABEL_89;
    }
    v59 = rtc::Thread::Current(v55);
    rtc::CreateRandomUuid(&__p);
    v60 = operator new();
    *(_QWORD *)(v60 + 16) = v60 + 16;
    *(_QWORD *)(v60 + 24) = v60 + 16;
    *(_QWORD *)(v60 + 32) = 0;
    *(_QWORD *)v60 = &unk_24C0B7020;
    *(_QWORD *)(v60 + 8) = &unk_24C0B70C8;
    v61 = (std::string *)(v60 + 40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v61, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v61->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v60 + 56) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
    *(_OWORD *)(v60 + 80) = 0u;
    *(_OWORD *)(v60 + 96) = 0u;
    *(_OWORD *)(v60 + 64) = 0u;
    *(_QWORD *)v60 = &unk_24C0B71D0;
    *(_QWORD *)(v60 + 8) = &unk_24C0B7280;
    *(_DWORD *)(v60 + 112) = 0;
    v62 = (unsigned int *)(v60 + 112);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
    v64 = operator new();
    *(_QWORD *)(v64 + 16) = v59;
    *(_QWORD *)(v64 + 24) = v60;
    *(_QWORD *)v64 = off_24C0B9F28;
    *(_QWORD *)(v64 + 8) = &unk_24C0B9FD8;
    *(_DWORD *)(v64 + 32) = 0;
    v65 = (unsigned int *)(v64 + 32);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
    v9 = a1;
    v67 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 224) = v64;
    if (v67)
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v68 = v7;
      v69 = *(_QWORD **)(v7 + 8);
      if ((unint64_t)v69 >= *(_QWORD *)(v68 + 16))
        goto LABEL_78;
LABEL_72:
      if (v69)
      {
        v70 = *(void (****)(_QWORD))(a1 + 224);
        *v69 = v70;
        if (v70)
          (**v70)(v70);
        *(_QWORD *)(v68 + 8) = v69 + 1;
        v56 = v97;
        if ((unint64_t)v12 >= v97)
          goto LABEL_79;
        goto LABEL_57;
      }
    }
    else
    {
      v68 = v7;
      v69 = *(_QWORD **)(v7 + 8);
      if ((unint64_t)v69 < *(_QWORD *)(v68 + 16))
        goto LABEL_72;
LABEL_78:
      *(_QWORD *)(v68 + 8) = std::vector<webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>> const&>(v68, *(void (****)(_QWORD))(a1 + 224));
      v56 = v97;
      if ((unint64_t)v12 >= v97)
        goto LABEL_79;
LABEL_57:
      if (v12)
      {
        v57 = *(void (****)(_QWORD))(v9 + 224);
        *v12 = (uint64_t)v57;
        if (v57)
          (**v57)(v57);
        v58 = v12 + 1;
        goto LABEL_88;
      }
    }
LABEL_106:
    __break(1u);
LABEL_107:
    abort();
  }
LABEL_89:
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v8 + 56))(&__p);
  (*(void (**)(_QWORD, void **))(*(_QWORD *)*v8 + 224))(*v8, &v95);
  webrtc::SdpOfferAnswerHandler::RemoveRemoteStreamsIfEmpty(v9, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, v6);
  v78 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    size = __p.__r_.__value_.__l.__size_;
    v80 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        v82 = *(_QWORD *)(size - 8);
        size -= 8;
        v81 = v82;
        if (v82)
          (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
      }
      while (size != v78);
      v80 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v78;
    operator delete(v80);
  }
  v83 = (uint64_t *)v95;
  if (v95)
  {
    v84 = v96;
    v85 = v95;
    if (v96 != v95)
    {
      do
      {
        v87 = *--v84;
        v86 = v87;
        if (v87)
          (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
      }
      while (v84 != v83);
      v85 = v95;
    }
    v96 = v83;
    operator delete(v85);
  }
}

void webrtc::SdpOfferAnswerHandler::UpdateRemoteSendersList(uint64_t a1, unsigned __int8 **a2, int a3, int a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL4 v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  __int32 v17;
  __int32 *v18;
  __int32 *v19;
  __int32 *v20;
  _BOOL4 v21;
  unsigned __int8 *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 *v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  webrtc::RtpTransmissionManager *v36;
  uint64_t v37;
  std::string::size_type size;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int8 *v43;
  std::string::size_type v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  std::string *p_p;
  int v50;
  int v51;
  int v52;
  int v53;
  BOOL v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  _BOOL4 v59;
  __int128 *v60;
  __int128 v61;
  std::string::size_type v62;
  char v63;
  __int128 *v64;
  __int128 v65;
  int *v66;
  int v67;
  rtc::Thread *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  std::string *v72;
  std::string::size_type v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  _QWORD *v78;
  unsigned int v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  __int128 v83;
  std::string::size_type v84;
  char *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  rtc::Thread *v90;
  void (***v91)(_QWORD);
  void (**v92)(_QWORD);
  uint64_t v93;
  std::string *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t (**v99)();
  _QWORD *v100;
  const char *v101;
  uint64_t v102;
  unint64_t v103;
  __int128 v104;
  std::string::size_type v105;
  char *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  _BOOL4 v110;
  _BOOL4 v111;
  uint64_t v112;
  uint64_t v113;
  int v115;
  void (***v116)(_QWORD);
  void (***v117)(_QWORD);
  std::string __p;
  std::string v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  std::string v123;
  std::string v124;

  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  v115 = a4;
  v10 = 104;
  if (a4)
  {
    v11 = (uint64_t *)(v9 + 104);
  }
  else
  {
    v10 = 80;
    v11 = (uint64_t *)(v9 + 80);
  }
  v112 = v10;
  v113 = v9;
  v12 = *(_QWORD *)(v9 + v10);
  if (v12 != v11[1])
  {
    v14 = &v124 <= (std::string *)"default" && (char *)v124.__r_.__value_.__r.__words + 7 > "default";
    v110 = v14;
    do
    {
      v15 = *a2;
      v16 = a2[1];
      if (*a2 == v16)
      {
        v21 = 0;
        memset(&__p, 0, sizeof(__p));
        v29 = *(char *)(v12 + 23);
        if ((v29 & 0x80000000) == 0)
          goto LABEL_95;
        goto LABEL_33;
      }
      v17 = *(_DWORD *)(v12 + 48);
      while (1)
      {
        v18 = (__int32 *)*((_QWORD *)v15 + 4);
        v19 = wmemchr(*((__int32 **)v15 + 3), v17, ((uint64_t)v18 - *((_QWORD *)v15 + 3)) >> 2);
        v20 = v19 ? v19 : v18;
        if (v20 != v18)
          break;
        v15 += 144;
        if (v15 == v16)
        {
          v15 = v16;
          break;
        }
      }
      v21 = 0;
      v22 = a2[1];
      memset(&__p, 0, sizeof(__p));
      if (!v15 || v15 == v22)
        goto LABEL_94;
      v23 = (__int128 *)*((_QWORD *)v15 + 12);
      if (v23 == *((__int128 **)v15 + 13))
      {
        *((_BYTE *)&v123.__r_.__value_.__s + 23) = 0;
        v123.__r_.__value_.__s.__data_[0] = 0;
        v26 = 0;
      }
      else if (*((char *)v23 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
        size = HIBYTE(v123.__r_.__value_.__r.__words[2]);
        v26 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
        if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v123.__r_.__value_.__l.__size_;
        if (size)
        {
LABEL_29:
          v27 = (__int128 *)*((_QWORD *)v15 + 12);
          if (v27 == *((__int128 **)v15 + 13))
          {
            *((_BYTE *)&v124.__r_.__value_.__s + 23) = 0;
            v124.__r_.__value_.__s.__data_[0] = 0;
          }
          else if (*((char *)v27 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
            v26 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
          }
          else
          {
            v28 = *v27;
            v124.__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
            *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v28;
          }
          goto LABEL_55;
        }
      }
      else
      {
        v24 = *v23;
        v123.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
        *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v24;
        v25 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
        v26 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
        if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v25 = *((_QWORD *)&v24 + 1);
        if (v25)
          goto LABEL_29;
      }
      *((_BYTE *)&v124.__r_.__value_.__s + 23) = 7;
      if (v110)
        goto LABEL_219;
      strcpy((char *)&v124, "default");
LABEL_55:
      __p = v124;
      *((_BYTE *)&v124.__r_.__value_.__s + 23) = 0;
      v124.__r_.__value_.__s.__data_[0] = 0;
      if (v26 < 0)
        operator delete(v123.__r_.__value_.__l.__data_);
      v39 = v15[23];
      if ((v39 & 0x80u) == 0)
        v40 = v15[23];
      else
        v40 = *((_QWORD *)v15 + 1);
      v41 = *(unsigned __int8 *)(v12 + 47);
      v42 = (char)v41;
      if ((v41 & 0x80u) != 0)
        v41 = *(_QWORD *)(v12 + 32);
      if (v40 != v41)
        goto LABEL_91;
      if (v42 >= 0)
        v43 = (unsigned __int8 *)(v12 + 24);
      else
        v43 = *(unsigned __int8 **)(v12 + 24);
      if ((v39 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v15, v43, *((_QWORD *)v15 + 1)))
          goto LABEL_91;
      }
      else if (v15[23])
      {
        while (*v15 == *v43)
        {
          ++v15;
          ++v43;
          if (!--v39)
            goto LABEL_72;
        }
LABEL_91:
        v21 = 0;
        v29 = *(char *)(v12 + 23);
        if ((v29 & 0x80000000) == 0)
          goto LABEL_95;
        goto LABEL_33;
      }
LABEL_72:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v44 = __p.__r_.__value_.__l.__size_;
      v45 = *(unsigned __int8 *)(v12 + 23);
      v46 = (char)v45;
      if ((v45 & 0x80u) != 0)
        v45 = *(_QWORD *)(v12 + 8);
      if (v44 != v45)
        goto LABEL_91;
      if (v46 >= 0)
        v47 = (unsigned __int8 *)v12;
      else
        v47 = *(unsigned __int8 **)v12;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v21 = memcmp(__p.__r_.__value_.__l.__data_, v47, __p.__r_.__value_.__l.__size_) == 0;
        goto LABEL_94;
      }
      if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      {
        v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
        p_p = &__p;
        do
        {
          v51 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          v50 = v51;
          v53 = *v47++;
          v52 = v53;
          v55 = v48-- != 0;
          v34 = v50 == v52;
          v21 = v50 == v52;
        }
        while (v34 && v55);
LABEL_94:
        v29 = *(char *)(v12 + 23);
        if ((v29 & 0x80000000) == 0)
          goto LABEL_95;
        goto LABEL_33;
      }
      v21 = 1;
      v29 = *(char *)(v12 + 23);
      if ((v29 & 0x80000000) == 0)
      {
LABEL_95:
        v31 = (unsigned __int8 *)v12;
        if (v29 != 7)
          goto LABEL_96;
        goto LABEL_37;
      }
LABEL_33:
      v30 = *(_QWORD *)(v12 + 8);
      if (v30 < 0)
        goto LABEL_219;
      v31 = *(unsigned __int8 **)v12;
      if (v30)
      {
        if (!v31)
          goto LABEL_219;
      }
      if (v30 != 7)
      {
LABEL_96:
        if (!v21)
          goto LABEL_44;
        goto LABEL_97;
      }
LABEL_37:
      v32 = *(_DWORD *)v31;
      v33 = *(_DWORD *)(v31 + 3);
      v34 = v32 == 1634100580 && v33 == 1953264993;
      v35 = v34;
      if ((v35 & a3 | v21) != 1)
      {
LABEL_44:
        v36 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
        v37 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), v12);
        webrtc::RtpTransmissionManager::OnRemoteSenderRemoved(v36, v12, v37, v115);
        v12 = std::vector<webrtc::RtpSenderInfo>::erase[abi:sn180100]((uint64_t)v11, v12);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          continue;
        goto LABEL_12;
      }
LABEL_97:
      v12 += 56;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        continue;
LABEL_12:
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    while (v12 != v11[1]);
  }
  v57 = *a2;
  v56 = a2[1];
  if (*a2 != v56)
  {
    v59 = &v124 <= (std::string *)"default" && (char *)v124.__r_.__value_.__r.__words + 7 > "default";
    v111 = v59;
    while (1)
    {
      if (*((_QWORD *)v57 + 3) == *((_QWORD *)v57 + 4))
        goto LABEL_168;
      v60 = (__int128 *)*((_QWORD *)v57 + 12);
      if (v60 == *((__int128 **)v57 + 13))
        break;
      if (*((char *)v60 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v60, *((_QWORD *)v60 + 1));
        v73 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v73 = __p.__r_.__value_.__l.__size_;
        if (!v73)
          goto LABEL_124;
      }
      else
      {
        v61 = *v60;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v60 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v61;
        v62 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v62 = *((_QWORD *)&v61 + 1);
        if (!v62)
          goto LABEL_124;
      }
      v64 = (__int128 *)*((_QWORD *)v57 + 12);
      if (v64 == *((__int128 **)v57 + 13))
      {
        *((_BYTE *)&v124.__r_.__value_.__s + 23) = 0;
        v124.__r_.__value_.__s.__data_[0] = 0;
        if (v63 < 0)
          goto LABEL_126;
      }
      else
      {
        if ((*((char *)v64 + 23) & 0x80000000) == 0)
        {
          v65 = *v64;
          v124.__r_.__value_.__r.__words[2] = *((_QWORD *)v64 + 2);
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v65;
          if ((v63 & 0x80) == 0)
            goto LABEL_127;
LABEL_126:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_127;
        }
        std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)v64, *((_QWORD *)v64 + 1));
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_126;
      }
LABEL_127:
      v66 = (int *)*((_QWORD *)v57 + 3);
      if (v66 == *((int **)v57 + 4))
      {
        v67 = 0;
        v68 = (rtc::Thread *)(*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), &v124);
        if (v68)
        {
LABEL_129:
          v69 = (uint64_t)v68;
          (**(void (***)(rtc::Thread *))v68)(v68);
          goto LABEL_152;
        }
      }
      else
      {
        v67 = *v66;
        v68 = (rtc::Thread *)(*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), &v124);
        if (v68)
          goto LABEL_129;
      }
      v70 = rtc::Thread::Current(v68);
      v71 = operator new();
      *(_QWORD *)(v71 + 16) = v71 + 16;
      *(_QWORD *)(v71 + 24) = v71 + 16;
      *(_QWORD *)(v71 + 32) = 0;
      *(_QWORD *)v71 = &unk_24C0B7020;
      *(_QWORD *)(v71 + 8) = &unk_24C0B70C8;
      v72 = (std::string *)(v71 + 40);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v72, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v72->__r_.__value_.__l.__data_ = *(_OWORD *)&v124.__r_.__value_.__l.__data_;
        *(_QWORD *)(v71 + 56) = *((_QWORD *)&v124.__r_.__value_.__l + 2);
      }
      *(_OWORD *)(v71 + 80) = 0u;
      *(_OWORD *)(v71 + 96) = 0u;
      *(_OWORD *)(v71 + 64) = 0u;
      *(_QWORD *)v71 = &unk_24C0B71D0;
      *(_QWORD *)(v71 + 8) = &unk_24C0B7280;
      *(_DWORD *)(v71 + 112) = 0;
      v74 = (unsigned int *)(v71 + 112);
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
      v69 = operator new();
      *(_QWORD *)(v69 + 16) = v70;
      *(_QWORD *)(v69 + 24) = v71;
      *(_QWORD *)v69 = off_24C0B9F28;
      *(_QWORD *)(v69 + 8) = &unk_24C0B9FD8;
      *(_DWORD *)(v69 + 32) = 0;
      v76 = (unsigned int *)(v69 + 32);
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
      v78 = *(_QWORD **)(a1 + 80);
      v122 = v69;
      do
        v79 = __ldxr(v76);
      while (__stxr(v79 + 1, v76));
      webrtc::StreamCollection::AddStream(v78, &v122);
      if (v122)
        (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
      v121 = v69;
      (**(void (***)(uint64_t))v69)(v69);
      webrtc::StreamCollection::AddStream(a5, &v121);
      if (v121)
        (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
LABEL_152:
      v80 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
      if (webrtc::RtpTransmissionManager::FindSenderInfo(v80, v11, (unsigned __int8 **)&v124, (unsigned __int8 **)v57))
        goto LABEL_109;
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
        if (((char)v57[23] & 0x80000000) == 0)
        {
LABEL_155:
          v81 = *(_OWORD *)v57;
          v119.__r_.__value_.__r.__words[2] = *((_QWORD *)v57 + 2);
          *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v81;
          v120 = v67;
          v82 = v11[1];
          if (v82 < v11[2])
            goto LABEL_156;
          goto LABEL_161;
        }
      }
      else
      {
        __p = v124;
        if (((char)v57[23] & 0x80000000) == 0)
          goto LABEL_155;
      }
      std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v57, *((_QWORD *)v57 + 1));
      v120 = v67;
      v82 = v11[1];
      if (v82 < v11[2])
      {
LABEL_156:
        if (!v82)
          goto LABEL_219;
        v83 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v82 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v82 = v83;
        memset(&__p, 0, sizeof(__p));
        v84 = v119.__r_.__value_.__r.__words[2];
        *(_OWORD *)(v82 + 24) = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
        *(_QWORD *)(v82 + 40) = v84;
        memset(&v119, 0, sizeof(v119));
        *(_DWORD *)(v82 + 48) = v120;
        v11[1] = v82 + 56;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_163;
        goto LABEL_158;
      }
LABEL_161:
      v85 = std::vector<webrtc::RtpSenderInfo>::__push_back_slow_path<webrtc::RtpSenderInfo>((void **)v11, (uint64_t)&__p);
      v86 = SHIBYTE(v119.__r_.__value_.__r.__words[2]);
      v11[1] = (uint64_t)v85;
      if (v86 < 0)
      {
        operator delete(v119.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_163;
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_163;
      }
LABEL_158:
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_163:
      v87 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
      v88 = v11[1];
      if (*(_QWORD *)(v113 + v112) == v88)
        goto LABEL_219;
      webrtc::RtpTransmissionManager::OnRemoteSenderAdded(v87, v88 - 56, (void (***)(_QWORD))v69, v115);
LABEL_109:
      (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v124.__r_.__value_.__l.__data_);
        v57 += 144;
        if (v57 == v56)
          goto LABEL_167;
      }
      else
      {
        v57 += 144;
        if (v57 == v56)
          goto LABEL_167;
      }
    }
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v63 = 0;
LABEL_124:
    *((_BYTE *)&v124.__r_.__value_.__s + 23) = 7;
    if (v111)
      goto LABEL_219;
    strcpy((char *)&v124, "default");
    if (v63 < 0)
      goto LABEL_126;
    goto LABEL_127;
  }
LABEL_167:
  if (a3)
  {
LABEL_168:
    v89 = *(_QWORD *)(a1 + 80);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
    if (&__p <= (std::string *)"default" && (char *)__p.__r_.__value_.__r.__words + 7 > "default")
      goto LABEL_219;
    strcpy((char *)&__p, "default");
    v90 = (rtc::Thread *)(*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v89 + 48))(v89, &__p);
    v91 = (void (***)(_QWORD))v90;
    if (v90)
      v90 = (rtc::Thread *)(**(uint64_t (***)(rtc::Thread *))v90)(v90);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v91)
        goto LABEL_192;
    }
    else if (v91)
    {
      goto LABEL_192;
    }
    v92 = (void (**)(_QWORD))rtc::Thread::Current(v90);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
    if (&__p <= (std::string *)"default" && (char *)__p.__r_.__value_.__r.__words + 7 > "default")
      goto LABEL_219;
    strcpy((char *)&__p, "default");
    v93 = operator new();
    *(_QWORD *)(v93 + 16) = v93 + 16;
    *(_QWORD *)(v93 + 24) = v93 + 16;
    *(_QWORD *)(v93 + 32) = 0;
    *(_QWORD *)v93 = &unk_24C0B7020;
    *(_QWORD *)(v93 + 8) = &unk_24C0B70C8;
    v94 = (std::string *)(v93 + 40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v94, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v94->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v93 + 56) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
    *(_OWORD *)(v93 + 80) = 0u;
    *(_OWORD *)(v93 + 96) = 0u;
    *(_OWORD *)(v93 + 64) = 0u;
    *(_QWORD *)v93 = &unk_24C0B71D0;
    *(_QWORD *)(v93 + 8) = &unk_24C0B7280;
    *(_DWORD *)(v93 + 112) = 0;
    v95 = (unsigned int *)(v93 + 112);
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
    v91 = (void (***)(_QWORD))operator new();
    v91[2] = v92;
    v91[3] = (void (**)(_QWORD))v93;
    *v91 = (void (**)(_QWORD))off_24C0B9F28;
    v91[1] = (void (**)(_QWORD))&unk_24C0B9FD8;
    *((_DWORD *)v91 + 8) = 0;
    v97 = (unsigned int *)(v91 + 4);
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v99 = (uint64_t (**)())*v91;
    }
    else
    {
      v99 = off_24C0B9F28;
    }
    v100 = *(_QWORD **)(a1 + 80);
    v117 = v91;
    ((void (*)(_QWORD))*v99)(v91);
    webrtc::StreamCollection::AddStream(v100, (uint64_t *)&v117);
    if (v117)
      (*v117)[1](v117);
    v116 = v91;
    (**v91)(v91);
    webrtc::StreamCollection::AddStream(a5, (uint64_t *)&v116);
    if (v116)
      (*v116)[1](v116);
LABEL_192:
    v101 = "defaultv0";
    if (!v115)
      v101 = "defaulta0";
    *((_BYTE *)&v124.__r_.__value_.__s + 23) = 9;
    if (&v124 <= (std::string *)v101 && (char *)&v124.__r_.__value_.__r.__words[1] + 1 > v101)
      goto LABEL_219;
    v124.__r_.__value_.__r.__words[0] = *(_QWORD *)v101;
    LOWORD(v124.__r_.__value_.__r.__words[1]) = *((unsigned __int8 *)v101 + 8);
    v102 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
    if (&__p <= (std::string *)"default" && (char *)__p.__r_.__value_.__r.__words + 7 > "default")
      goto LABEL_219;
    strcpy((char *)&__p, "default");
    if (webrtc::RtpTransmissionManager::FindSenderInfo(v102, v11, (unsigned __int8 **)&__p, (unsigned __int8 **)&v124))
    {
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_200:
        (*v91)[1](v91);
        return;
      }
LABEL_216:
      operator delete(v124.__r_.__value_.__l.__data_);
      goto LABEL_200;
    }
    *((_BYTE *)&v123.__r_.__value_.__s + 23) = 7;
    if (&v123 <= (std::string *)"default" && (char *)v123.__r_.__value_.__r.__words + 7 > "default")
    {
LABEL_219:
      __break(1u);
      return;
    }
    strcpy((char *)&v123, "default");
    __p = v123;
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v119, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
      v120 = 0;
      v103 = v11[1];
      if (v103 < v11[2])
      {
LABEL_206:
        if (!v103)
          goto LABEL_219;
        v104 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v103 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v103 = v104;
        memset(&__p, 0, sizeof(__p));
        v105 = v119.__r_.__value_.__r.__words[2];
        *(_OWORD *)(v103 + 24) = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
        *(_QWORD *)(v103 + 40) = v105;
        memset(&v119, 0, sizeof(v119));
        *(_DWORD *)(v103 + 48) = v120;
        v11[1] = v103 + 56;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_208:
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_214;
          goto LABEL_209;
        }
LABEL_213:
        if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_214:
          v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
          v109 = v11[1];
          if (*(_QWORD *)(v113 + v112) != v109)
          {
            webrtc::RtpTransmissionManager::OnRemoteSenderAdded(v108, v109 - 56, v91, v115);
            if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_200;
            goto LABEL_216;
          }
          goto LABEL_219;
        }
LABEL_209:
        operator delete(v123.__r_.__value_.__l.__data_);
        goto LABEL_214;
      }
    }
    else
    {
      v119 = v124;
      v120 = 0;
      v103 = v11[1];
      if (v103 < v11[2])
        goto LABEL_206;
    }
    v106 = std::vector<webrtc::RtpSenderInfo>::__push_back_slow_path<webrtc::RtpSenderInfo>((void **)v11, (uint64_t)&__p);
    v107 = SHIBYTE(v119.__r_.__value_.__r.__words[2]);
    v11[1] = (uint64_t)v106;
    if (v107 < 0)
    {
      operator delete(v119.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_208;
    }
    else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_208;
    }
    goto LABEL_213;
  }
}

void webrtc::SdpOfferAnswerHandler::DoSetLocalDescription(std::string::size_type a1, size_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::string *p_src;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t size;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  std::string *v44;
  std::string *v45;
  std::string *v46;
  char *v47;
  size_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char **v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  void ***v87;
  size_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  size_t v92;
  char *v93;
  uint64_t v94;
  void (***v95)(_QWORD);
  uint64_t v96;
  uint64_t **v97;
  int data;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int *v106;
  rtc *v107;
  _QWORD *v108;
  unint64_t *v109;
  unint64_t *v110;
  unsigned int v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  _BYTE *v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  void **v127;
  unint64_t v128;
  int v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  size_t v139;
  std::string *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  webrtc::JsepTransportCollection **v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  void ***v152;
  uint64_t v153;
  uint64_t v154;
  void ***v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const webrtc::SessionDescriptionInterface *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  void (***v177)(_QWORD);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  std::string::size_type v181;
  void *v182;
  void (****v183)(_QWORD);
  void (***v184)(_QWORD);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t FirstAudioContent;
  const webrtc::RtpTransceiver *v192;
  const webrtc::SessionDescriptionInterface *v193;
  _QWORD *MediaSectionForTransceiver;
  uint64_t v195;
  BOOL v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  std::string::size_type v203;
  std::string::size_type v204;
  std::string::size_type v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  std::string::size_type v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  cricket::StreamParams *v218;
  unsigned int *v219;
  uint64_t v220;
  std::string::size_type v221;
  std::string::size_type v222;
  uint64_t v223;
  void (***v224)(_QWORD);
  uint64_t **v225;
  std::string::size_type v226;
  void *v227;
  std::string *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  std::string::size_type v234;
  std::string::size_type v235;
  std::string::size_type v236;
  std::string *v237;
  char *v238;
  std::string::size_type v239;
  unsigned __int8 **v240;
  unsigned __int8 **v241;
  int v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t FirstVideoContent;
  unsigned __int8 **v246;
  unsigned __int8 **v247;
  int v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t **v252;
  size_t v253;
  std::string::size_type v254;
  size_t v255;
  unint64_t v256;
  std::string *v257;
  unint64_t v258;
  std::string *v259;
  char *v260;
  BOOL v261;
  uint64_t v262;
  std::string *v263;
  size_t v264;
  char *v265;
  unint64_t v266;
  uint64_t v267;
  char *v268;
  std::string *v269;
  std::string::size_type v270;
  std::string::size_type v271;
  std::string *v272;
  char *v273;
  std::string::size_type v274;
  char v275;
  std::string *v276;
  size_t v277;
  std::string *v278;
  uint64_t v279;
  uint64_t v280;
  std::string *v281;
  std::string *v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t i;
  unsigned int *v288;
  uint64_t v289;
  unsigned int v290;
  int v291;
  void *v292;
  uint64_t v293;
  _BYTE v294[16];
  char v295[8];
  void *v296;
  char v297;
  int v298;
  _QWORD v299[2];
  unint64_t v300;
  int v301;
  char v302;
  char v303;
  int v304;
  __int128 v305;
  uint64_t v306;
  _DWORD v307[2];
  _QWORD v308[3];
  int v309;
  void *v310;
  __int128 v311;
  int v312;
  char v313;
  char v314;
  char v315[8];
  void *v316;
  char v317;
  int v318;
  void *v319[2];
  unint64_t v320;
  int v321;
  char v322;
  char v323;
  int v324;
  void *__p;
  __int128 v326;
  int v327;
  char v328;
  char v329;
  _QWORD v330[2];
  std::string v331;
  std::string v332;
  void (***v333)(_QWORD);
  uint64_t v334;
  void (***v335)(_QWORD);
  uint64_t v336;
  uint64_t v337;
  std::string v338;
  void **v339;
  unint64_t v340;
  uint64_t v341;
  void *v342;
  __int128 v343;
  _BYTE v344[15];
  std::string __src;
  uint64_t v346;
  _DWORD v347[6];

  v3 = *a3;
  if (!*a3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    return;
  }
  if (!*a2)
  {
    v324 = 10;
    v24 = (char *)operator new(0x20uLL);
    __p = v24;
    v326 = xmmword_208F051A0;
    if (v24 <= "SessionDescription is NULL." && v24 + 27 > "SessionDescription is NULL.")
      goto LABEL_457;
    strcpy(v24, "SessionDescription is NULL.");
    v327 = 0;
    v328 = 0;
    v329 = 0;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v3 + 32))(v3, &v324);
    if (SHIBYTE(v326) < 0)
      operator delete(__p);
    return;
  }
  if (*(_DWORD *)(a1 + 232))
  {
    p_src = &__src;
    webrtc::SdpOfferAnswerHandler::GetSessionErrorMsg((webrtc::SdpOfferAnswerHandler *)&__src, a1);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    v15 = *a3;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      size = __src.__r_.__value_.__l.__size_;
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_457;
      p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
      if (__src.__r_.__value_.__l.__size_)
      {
        if (!__src.__r_.__value_.__r.__words[0])
          goto LABEL_457;
      }
      v318 = 10;
      if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_458;
    }
    else
    {
      size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      v318 = 10;
    }
    v28 = (std::string *)v319;
    if (size > 0x16)
    {
      v29 = (size & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((size | 7) != 0x17)
        v29 = size | 7;
      v30 = v29 + 1;
      v28 = (std::string *)operator new(v29 + 1);
      v319[1] = (void *)size;
      v320 = v30 | 0x8000000000000000;
      v319[0] = v28;
    }
    else
    {
      HIBYTE(v320) = size;
    }
    v31 = (std::string *)((char *)v28 + size);
    if (v28 <= p_src && v31 > p_src)
      goto LABEL_457;
    if (size)
      memmove(v28, p_src, size);
    v31->__r_.__value_.__s.__data_[0] = 0;
    v321 = 0;
    v322 = 0;
    v323 = 0;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v15 + 32))(v15, &v318);
    if (SHIBYTE(v320) < 0)
    {
      operator delete(v319[0]);
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
    operator delete(__src.__r_.__value_.__l.__data_);
    return;
  }
  if ((*(unsigned int (**)(size_t))(*(_QWORD *)*a2 + 56))(*a2) == 3)
  {
    v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8));
    v26 = *a3;
    if (v25)
    {
      v27 = (*(uint64_t (**)(size_t))(*(_QWORD *)*a2 + 56))(*a2);
      webrtc::SdpOfferAnswerHandler::Rollback((uint64_t)v315, a1, v27);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v26 + 32))(v26, v315);
      if (v317 < 0)
        operator delete(v316);
    }
    else
    {
      v309 = 1;
      v47 = (char *)operator new(0x28uLL);
      v310 = v47;
      v311 = xmmword_208F04EE0;
      if (v47 <= "Rollback not supported in Plan B" && v47 + 32 > "Rollback not supported in Plan B")
        goto LABEL_457;
      strcpy(v47, "Rollback not supported in Plan B");
      v312 = 0;
      v313 = 0;
      v314 = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v26 + 32))(v26, &v309);
      if (SHIBYTE(v311) < 0)
        operator delete(v310);
    }
    return;
  }
  v33 = (*(uint64_t (**)(size_t))(*(_QWORD *)*a2 + 24))(*a2);
  webrtc::SdpOfferAnswerHandler::ValidateSessionDescription((uint64_t)&v304, a1, *a2, 0, (uint64_t)v308);
  if (v304)
  {
    v34 = (*(uint64_t (**)(size_t))(*(_QWORD *)*a2 + 56))(*a2);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    v42 = *a3;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      v43 = __src.__r_.__value_.__l.__size_;
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_457;
      v45 = (std::string *)__src.__r_.__value_.__r.__words[0];
      if (__src.__r_.__value_.__l.__size_)
      {
        if (!__src.__r_.__value_.__r.__words[0])
          goto LABEL_457;
      }
      v298 = v304;
      if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_458;
      v44 = (std::string *)v299;
      if (__src.__r_.__value_.__l.__size_ <= 0x16)
      {
LABEL_43:
        HIBYTE(v300) = v43;
        v46 = (std::string *)((char *)v299 + v43);
        if (v299 > (_QWORD *)v45)
        {
LABEL_67:
          if (v43)
            memmove(v44, v45, v43);
          v46->__r_.__value_.__s.__data_[0] = 0;
          v301 = 0;
          v302 = 0;
          v303 = 0;
          (*(void (**)(uint64_t, int *))(*(_QWORD *)v42 + 32))(v42, &v298);
          if ((SHIBYTE(v300) & 0x80000000) == 0)
            goto LABEL_199;
          v58 = (void *)v299[0];
          goto LABEL_198;
        }
LABEL_66:
        if (v46 > v45)
          goto LABEL_457;
        goto LABEL_67;
      }
    }
    else
    {
      v43 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      v298 = v304;
      v44 = (std::string *)v299;
      v45 = &__src;
      if (HIBYTE(__src.__r_.__value_.__r.__words[2]) <= 0x16uLL)
        goto LABEL_43;
    }
    v56 = (v43 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v56 = v43 | 7;
    v57 = v56 + 1;
    v44 = (std::string *)operator new(v56 + 1);
    v299[1] = v43;
    v300 = v57 | 0x8000000000000000;
    v299[0] = v44;
    v46 = (std::string *)((char *)v44 + v43);
    if (v44 > v45)
      goto LABEL_67;
    goto LABEL_66;
  }
  v290 = (*(uint64_t (**)(size_t))(*(_QWORD *)*a2 + 56))(*a2);
  v48 = *a2;
  *a2 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 272))(*(_QWORD *)(a1 + 8));
  v49 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
  v50 = (*(uint64_t (**)(size_t))(*(_QWORD *)v48 + 56))(v48);
  v51 = *(_QWORD *)(a1 + 40);
  if (v50 == 2)
  {
    v52 = 40;
    if (!v51)
      v52 = 32;
    v51 = *(_QWORD *)(a1 + v52);
    *(_QWORD *)(a1 + v52) = 0;
    v53 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v48;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    v54 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    v55 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = v48;
  }
  if (!*(_BYTE *)(a1 + 377))
  {
    *(_BYTE *)(a1 + 376) = v50 == 0;
    *(_BYTE *)(a1 + 377) = 1;
  }
  if (!*(_BYTE *)(a1 + 69))
  {
    if ((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1))
      v59 = 256;
    else
      v59 = 257;
    *(_WORD *)(a1 + 68) = v59;
  }
  v60 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
  v61 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1);
  v62 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
  v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
  if (v61)
    v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 32))(v61);
  else
    v64 = 0;
  webrtc::JsepTransportController::SetLocalDescription(v62, v50, v63, v64, (uint64_t)&__src);
  if (LODWORD(__src.__r_.__value_.__l.__data_))
  {
    LODWORD(v342) = __src.__r_.__value_.__l.__data_;
    v343 = *(_OWORD *)&__src.__r_.__value_.__r.__words[1];
    *(_QWORD *)v344 = v346;
    *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = 0uLL;
    v346 = 0;
    *(_DWORD *)&v344[8] = v347[0];
    *(_DWORD *)&v344[11] = *(_DWORD *)((char *)v347 + 3);
    goto LABEL_169;
  }
  v289 = v51;
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8)))
  {
    if (!v50)
    {
      v96 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
      v97 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 32))(v96);
      webrtc::SdpOfferAnswerHandler::CreateChannels((webrtc::SdpOfferAnswerHandler *)&v342, (const cricket::SessionDescription *)a1, v97);
      data = (int)v342;
      LODWORD(__src.__r_.__value_.__l.__data_) = (_DWORD)v342;
      if (SHIBYTE(v346) < 0)
      {
        operator delete((void *)__src.__r_.__value_.__l.__size_);
        data = (int)__src.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = v343;
      v346 = *(_QWORD *)v344;
      v347[0] = *(_DWORD *)&v344[8];
      *(_DWORD *)((char *)v347 + 3) = *(_DWORD *)&v344[11];
      if (data)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          goto LABEL_165;
        goto LABEL_166;
      }
    }
    v75 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
    v76 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 32))(v75);
    webrtc::SdpOfferAnswerHandler::RemoveUnusedChannels(a1, v76);
    goto LABEL_92;
  }
  v65 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
  v66 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1);
  webrtc::SdpOfferAnswerHandler::UpdateTransceiversAndDataChannels((uint64_t)&v342, a1, 0, v65, v49, v66, (uint64_t)v308);
  v67 = (int)v342;
  LODWORD(__src.__r_.__value_.__l.__data_) = (_DWORD)v342;
  if (SHIBYTE(v346) < 0)
  {
    operator delete((void *)__src.__r_.__value_.__l.__size_);
    v67 = (int)__src.__r_.__value_.__l.__data_;
  }
  *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = v343;
  v346 = *(_QWORD *)v344;
  v347[0] = *(_DWORD *)&v344[8];
  *(_DWORD *)((char *)v347 + 3) = *(_DWORD *)&v344[11];
  if (v67)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_165:
      rtc::webrtc_logging_impl::Log("\r\t\t\t\t", v68, v69, v70, v71, v72, v73, v74, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
LABEL_166:
    LODWORD(v342) = __src.__r_.__value_.__l.__data_;
    v343 = *(_OWORD *)&__src.__r_.__value_.__r.__words[1];
    *(_QWORD *)v344 = v346;
    *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = 0uLL;
    v346 = 0;
    *(_DWORD *)&v344[8] = v347[0];
    *(_DWORD *)&v344[11] = *(_DWORD *)((char *)v347 + 3);
    goto LABEL_167;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96))
    goto LABEL_92;
  v339 = 0;
  v340 = 0;
  v341 = 0;
  memset(&v338, 0, sizeof(v338));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  v89 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  v90 = *(_QWORD *)(v89 + 8);
  v91 = *(_QWORD *)(v89 + 16);
  v92 = v91 - v90;
  if (v91 == v90)
  {
    v156 = 0;
    v94 = 0;
    goto LABEL_268;
  }
  if ((v92 & 0x8000000000000000) != 0)
    goto LABEL_458;
  v93 = (char *)operator new(v92);
  v94 = 0;
  do
  {
    v95 = *(void (****)(_QWORD))(v90 + v94);
    *(_QWORD *)&v93[v94] = v95;
    if (v95)
      (**v95)(v95);
    v94 += 8;
  }
  while (v90 + v94 != v91);
  if (!v94)
  {
    v156 = 0;
LABEL_267:
    operator delete(v93);
LABEL_268:
    v179 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
    if (v94 != v156)
    {
      v180 = v94;
      do
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v180 + 56))(&v334);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v179 + 152))(v179, &v334);
        if (v334)
          (*(void (**)(uint64_t))(*(_QWORD *)v334 + 8))(v334);
        v180 += 8;
      }
      while (v180 != v156);
    }
    v181 = v338.__r_.__value_.__l.__size_;
    v182 = (void *)v338.__r_.__value_.__r.__words[0];
    if (v338.__r_.__value_.__r.__words[0] == v338.__r_.__value_.__l.__size_)
    {
      if (!v338.__r_.__value_.__r.__words[0])
        goto LABEL_287;
    }
    else
    {
      v183 = (void (****)(_QWORD))v338.__r_.__value_.__r.__words[0];
      do
      {
        v184 = *v183;
        v333 = v184;
        if (v184)
          (**v184)(v184);
        (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v179 + 32))(v179, &v333);
        if (v333)
          (*v333)[1](v333);
        ++v183;
      }
      while (v183 != (void (****)(_QWORD))v181);
      if (!v182)
        goto LABEL_287;
      do
      {
        v186 = *(_QWORD *)(v181 - 8);
        v181 -= 8;
        v185 = v186;
        if (v186)
          (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
      }
      while ((void *)v181 != v182);
    }
    operator delete(v182);
LABEL_287:
    if (v94)
    {
      while (v156 != v94)
      {
        v188 = *(_QWORD *)(v156 - 8);
        v156 -= 8;
        v187 = v188;
        if (v188)
          (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
      }
      operator delete((void *)v94);
    }
LABEL_92:
    v77 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 32))(v77);
    webrtc::SdpOfferAnswerHandler::UpdateSessionState((uint64_t)&v342, a1, v50, 0, (uint64_t)v308);
    v78 = (int)v342;
    LODWORD(__src.__r_.__value_.__l.__data_) = (_DWORD)v342;
    if (SHIBYTE(v346) < 0)
    {
      operator delete((void *)__src.__r_.__value_.__l.__size_);
      v78 = (int)__src.__r_.__value_.__l.__data_;
    }
    *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = v343;
    v346 = *(_QWORD *)v344;
    v347[0] = *(_DWORD *)&v344[8];
    *(_DWORD *)((char *)v347 + 3) = *(_DWORD *)&v344[11];
    if (v78)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        goto LABEL_165;
      goto LABEL_166;
    }
    webrtc::SdpOfferAnswerHandler::UseCandidatesInRemoteDescription((webrtc::SdpOfferAnswerHandler *)a1);
    std::__tree<rtc::SocketAddress>::destroy(a1 + 176, *(char **)(a1 + 184));
    *(_QWORD *)(a1 + 176) = a1 + 184;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    if (*(_DWORD *)(a1 + 232))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        webrtc::SdpOfferAnswerHandler::GetSessionErrorMsg((webrtc::SdpOfferAnswerHandler *)&v342, a1);
        v339 = (void **)"INTERNAL_ERROR";
        v340 = 14;
        rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v79, v80, v81, v82, v83, v84, v85, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
        if (SHIBYTE(v343) < 0)
          operator delete(v342);
      }
      webrtc::SdpOfferAnswerHandler::GetSessionErrorMsg((webrtc::SdpOfferAnswerHandler *)&v339, a1);
      v86 = HIBYTE(v341);
      if (SHIBYTE(v341) < 0)
      {
        v88 = v340;
        if ((v340 & 0x8000000000000000) != 0)
          goto LABEL_457;
        v87 = (void ***)v339;
        if (v340)
        {
          if (!v339)
            goto LABEL_457;
        }
        LODWORD(v342) = 10;
        if (v340 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_458;
      }
      else
      {
        LODWORD(v342) = 10;
        v87 = &v339;
        v88 = HIBYTE(v341);
      }
      if (v88 > 0x16)
      {
        v153 = (v88 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v88 | 7) != 0x17)
          v153 = v88 | 7;
        v154 = v153 + 1;
        v152 = (void ***)operator new(v153 + 1);
        *((_QWORD *)&v343 + 1) = v88;
        *(_QWORD *)v344 = v154 | 0x8000000000000000;
        *(_QWORD *)&v343 = v152;
      }
      else
      {
        v152 = (void ***)&v343;
        v344[7] = v88;
      }
      v155 = (void ***)((char *)v152 + v88);
      if (v152 <= v87 && v155 > v87)
        goto LABEL_457;
      if (v88)
        memmove(v152, v87, v88);
      *(_BYTE *)v155 = 0;
      *(_DWORD *)&v344[8] = 0;
      v344[12] = 0;
      v344[14] = 0;
      if (v86 < 0)
      {
        operator delete(v339);
        v51 = v289;
        if (SHIBYTE(v346) < 0)
          goto LABEL_168;
        goto LABEL_169;
      }
LABEL_167:
      v51 = v289;
      if (SHIBYTE(v346) < 0)
        goto LABEL_168;
      goto LABEL_169;
    }
    webrtc::SdpOfferAnswerHandler::AllocateSctpSids((webrtc::SdpOfferAnswerHandler *)a1);
    v51 = v289;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96))
    {
      v340 = 0;
      v341 = 0;
      v339 = (void **)&v340;
      v99 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
      v100 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 32))(v99);
      v101 = *v100;
      v285 = v100[1];
      if (*v100 != v285)
      {
        v102 = v341;
        do
        {
          v103 = *(_QWORD *)(v101 + 32);
          v104 = *(_QWORD *)(v103 + 96);
          v286 = v101;
          for (i = *(_QWORD *)(v103 + 104); v104 != i; v104 += 144)
          {
            v106 = *(unsigned int **)(v104 + 24);
            v105 = *(unsigned int **)(v104 + 32);
            v288 = v105;
            while (v106 != v105)
            {
              v107 = (rtc *)*v106;
              v108 = (_QWORD *)v340;
              v109 = &v340;
LABEL_126:
              v110 = v109;
              if (!v108)
                goto LABEL_131;
              do
              {
                v109 = v108;
                v111 = *((_DWORD *)v108 + 7);
                if (v107 < v111)
                {
                  v108 = (_QWORD *)*v109;
                  goto LABEL_126;
                }
                if (v111 >= v107)
                {
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
                  {
LABEL_371:
                    rtc::ToString(v107, (char *)&v331);
                    if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v253 = HIBYTE(v331.__r_.__value_.__r.__words[2]);
                    else
                      v253 = v331.__r_.__value_.__l.__size_;
                    if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v254 = 22;
                    else
                      v254 = (v331.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v254 - v253 >= 0xF)
                    {
                      if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v259 = &v331;
                      else
                        v259 = (std::string *)v331.__r_.__value_.__r.__words[0];
                      v260 = "Duplicate ssrc ";
                      if (v253)
                      {
                        v261 = (char *)v259 + v253 <= "Duplicate ssrc " || v259 > (std::string *)"Duplicate ssrc ";
                        v262 = 15;
                        if (v261)
                          v262 = 0;
                        v260 = &aDuplicateSsrc[v262];
                        v263 = &v331;
                        if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v263 = (std::string *)v331.__r_.__value_.__r.__words[0];
                        memmove((char *)&v263->__r_.__value_.__r.__words[1] + 7, v259, v253);
                      }
                      v259->__r_.__value_.__r.__words[0] = *(_QWORD *)v260;
                      *(std::string::size_type *)((char *)v259->__r_.__value_.__r.__words + 7) = *(_QWORD *)(v260 + 7);
                      v264 = v253 + 15;
                      if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
                        v331.__r_.__value_.__l.__size_ = v253 + 15;
                      else
                        *((_BYTE *)&v331.__r_.__value_.__s + 23) = v264 & 0x7F;
                      v265 = (char *)v259 + v264;
                      goto LABEL_419;
                    }
                    v255 = 0x7FFFFFFFFFFFFFF7;
                    v256 = v253 + 15;
                    if (0x7FFFFFFFFFFFFFF6 - v254 >= v253 + 15 - v254)
                    {
                      if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v257 = &v331;
                      else
                        v257 = (std::string *)v331.__r_.__value_.__r.__words[0];
                      if (v254 <= 0x3FFFFFFFFFFFFFF2)
                      {
                        v258 = 2 * v254;
                        if (v256 > 2 * v254)
                          v258 = v253 + 15;
                        if (v258 >= 0x17)
                        {
                          v266 = (v258 & 0xFFFFFFFFFFFFFFF8) + 8;
                          v267 = v258 | 7;
                          if (v267 == 23)
                            v267 = v266;
                          v255 = v267 + 1;
                        }
                        else
                        {
                          v255 = 23;
                        }
                      }
                      v268 = (char *)operator new(v255);
                      v269 = (std::string *)(v268 + 15);
                      if (v268 <= "Duplicate ssrc " && v269 > (std::string *)"Duplicate ssrc ")
                        goto LABEL_457;
                      qmemcpy(v268, "Duplicate ssrc ", 15);
                      if (!v253)
                        goto LABEL_416;
                      if (v257 >= v269 && (std::string *)((char *)v269 + v253) > v257)
                        goto LABEL_457;
                      memmove(v269, v257, v253);
LABEL_416:
                      if (v254 != 22)
                        operator delete(v257);
                      v331.__r_.__value_.__l.__size_ = v253 + 15;
                      v331.__r_.__value_.__r.__words[2] = v255 | 0x8000000000000000;
                      v331.__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
                      v265 = &v268[v256];
LABEL_419:
                      *v265 = 0;
                      v332 = v331;
                      memset(&v331, 0, sizeof(v331));
                      if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v270 = 22;
                      else
                        v270 = (v332.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v271 = HIBYTE(v332.__r_.__value_.__r.__words[2]);
                      else
                        v271 = v332.__r_.__value_.__l.__size_;
                      if (v270 - v271 < 0xF)
                      {
                        std::string::__grow_by_and_replace(&v332, v270, v271 - v270 + 15, v271, v271, 0, 0xFuLL, " is not allowed");
                        goto LABEL_435;
                      }
                      v272 = &v332;
                      if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v272 = (std::string *)v332.__r_.__value_.__r.__words[0];
                      v273 = (char *)v272 + v271;
                      if ((char *)v272 + v271 <= " is not allowed" && v273 + 15 > " is not allowed")
                        goto LABEL_457;
                      qmemcpy(v273, " is not allowed", 15);
                      v274 = v271 + 15;
                      if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
                        v332.__r_.__value_.__l.__size_ = v271 + 15;
                      else
                        *((_BYTE *)&v332.__r_.__value_.__s + 23) = v274 & 0x7F;
                      v272->__r_.__value_.__s.__data_[v274] = 0;
LABEL_435:
                      v338 = v332;
                      memset(&v332, 0, sizeof(v332));
                      v275 = HIBYTE(v338.__r_.__value_.__r.__words[2]);
                      if ((SHIBYTE(v338.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
                        LODWORD(v342) = 3;
                        v276 = &v338;
                        v277 = HIBYTE(v338.__r_.__value_.__r.__words[2]);
                        goto LABEL_441;
                      }
                      v277 = v338.__r_.__value_.__l.__size_;
                      if ((v338.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                        goto LABEL_457;
                      v276 = (std::string *)v338.__r_.__value_.__r.__words[0];
                      if (v338.__r_.__value_.__l.__size_)
                      {
                        if (!v338.__r_.__value_.__r.__words[0])
                          goto LABEL_457;
                      }
                      LODWORD(v342) = 3;
                      if (v338.__r_.__value_.__l.__size_ <= 0x7FFFFFFFFFFFFFF7)
                      {
LABEL_441:
                        v278 = (std::string *)&v343;
                        if (v277 > 0x16)
                        {
                          v279 = (v277 & 0x7FFFFFFFFFFFFFF8) + 8;
                          if ((v277 | 7) != 0x17)
                            v279 = v277 | 7;
                          v280 = v279 + 1;
                          v278 = (std::string *)operator new(v279 + 1);
                          *((_QWORD *)&v343 + 1) = v277;
                          *(_QWORD *)v344 = v280 | 0x8000000000000000;
                          *(_QWORD *)&v343 = v278;
                        }
                        else
                        {
                          v344[7] = v277;
                        }
                        v281 = (std::string *)((char *)v278 + v277);
                        if (v278 > v276 || v281 <= v276)
                        {
                          if (v277)
                            memmove(v278, v276, v277);
                          v281->__r_.__value_.__s.__data_[0] = 0;
                          *(_DWORD *)&v344[8] = 0;
                          v344[12] = 0;
                          v344[14] = 0;
                          if (v275 < 0)
                          {
                            operator delete(v338.__r_.__value_.__l.__data_);
                            if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v332.__r_.__value_.__l.__data_);
                          }
                          if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v331.__r_.__value_.__l.__data_);
                          std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v339, (_QWORD *)v340);
                          v51 = v289;
                          if (SHIBYTE(v346) < 0)
                            goto LABEL_168;
                          goto LABEL_169;
                        }
LABEL_457:
                        __break(1u);
                      }
                    }
LABEL_458:
                    abort();
                  }
                  rtc::ToString(v107, (char *)&v331);
                  v228 = std::string::insert(&v331, 0, "Duplicate ssrc ");
                  v234 = v228->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v332.__r_.__value_.__l.__data_ = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
                  v332.__r_.__value_.__r.__words[2] = v234;
                  v228->__r_.__value_.__l.__size_ = 0;
                  v228->__r_.__value_.__r.__words[2] = 0;
                  v228->__r_.__value_.__r.__words[0] = 0;
                  if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v235 = 22;
                  else
                    v235 = (v332.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v236 = HIBYTE(v332.__r_.__value_.__r.__words[2]);
                  else
                    v236 = v332.__r_.__value_.__l.__size_;
                  if (v235 - v236 >= 0xF)
                  {
                    v237 = &v332;
                    if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v237 = (std::string *)v332.__r_.__value_.__r.__words[0];
                    v238 = (char *)v237 + v236;
                    if ((char *)v237 + v236 <= " is not allowed" && v238 + 15 > " is not allowed")
                      goto LABEL_457;
                    qmemcpy(v238, " is not allowed", 15);
                    v239 = v236 + 15;
                    if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
                      v332.__r_.__value_.__l.__size_ = v236 + 15;
                    else
                      *((_BYTE *)&v332.__r_.__value_.__s + 23) = v239 & 0x7F;
                    v237->__r_.__value_.__s.__data_[v239] = 0;
                  }
                  else
                  {
                    std::string::__grow_by_and_replace(&v332, v235, v236 - v235 + 15, v236, v236, 0, 0xFuLL, " is not allowed");
                  }
                  v338 = v332;
                  memset(&v332, 0, sizeof(v332));
                  v330[0] = "INVALID_PARAMETER";
                  v330[1] = 17;
                  rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v235, v229, v236, v230, v231, v232, v233, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
                  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v338.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v332.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_370;
                  }
                  else if ((SHIBYTE(v332.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_370:
                    if ((SHIBYTE(v331.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_371;
LABEL_406:
                    operator delete(v331.__r_.__value_.__l.__data_);
                    goto LABEL_371;
                  }
                  operator delete(v332.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v331.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_371;
                  goto LABEL_406;
                }
                v108 = (_QWORD *)v109[1];
              }
              while (v108);
              v110 = v109 + 1;
LABEL_131:
              v112 = operator new(0x20uLL);
              *((_DWORD *)v112 + 7) = (_DWORD)v107;
              *v112 = 0;
              v112[1] = 0;
              v112[2] = v109;
              *v110 = (unint64_t)v112;
              if (*v339)
              {
                v339 = (void **)*v339;
                v112 = (_QWORD *)*v110;
              }
              v51 = v289;
              v113 = v340;
              *((_BYTE *)v112 + 24) = v112 == (_QWORD *)v340;
              if (v112 != (_QWORD *)v113)
              {
                do
                {
                  v114 = v112[2];
                  if (*(_BYTE *)(v114 + 24))
                    break;
                  v115 = *(uint64_t **)(v114 + 16);
                  v116 = *v115;
                  if (*v115 == v114)
                  {
                    v119 = v115[1];
                    if (!v119 || (v120 = *(unsigned __int8 *)(v119 + 24), v117 = (_BYTE *)(v119 + 24), v120))
                    {
                      if (*(_QWORD **)v114 == v112)
                      {
                        v121 = (uint64_t *)v112[2];
                      }
                      else
                      {
                        v121 = *(uint64_t **)(v114 + 8);
                        v122 = *v121;
                        *(_QWORD *)(v114 + 8) = *v121;
                        if (v122)
                        {
                          *(_QWORD *)(v122 + 16) = v114;
                          v115 = *(uint64_t **)(v114 + 16);
                        }
                        v121[2] = (uint64_t)v115;
                        *(_QWORD *)(*(_QWORD *)(v114 + 16) + 8 * (**(_QWORD **)(v114 + 16) != v114)) = v121;
                        *v121 = v114;
                        *(_QWORD *)(v114 + 16) = v121;
                        v115 = (uint64_t *)v121[2];
                        v114 = *v115;
                      }
                      *((_BYTE *)v121 + 24) = 1;
                      *((_BYTE *)v115 + 24) = 0;
                      v125 = *(_QWORD *)(v114 + 8);
                      *v115 = v125;
                      if (v125)
                        *(_QWORD *)(v125 + 16) = v115;
                      *(_QWORD *)(v114 + 16) = v115[2];
                      *(_QWORD *)(v115[2] + 8 * (*(_QWORD *)v115[2] != (_QWORD)v115)) = v114;
                      *(_QWORD *)(v114 + 8) = v115;
                      goto LABEL_121;
                    }
                  }
                  else if (!v116 || (v118 = *(unsigned __int8 *)(v116 + 24), v117 = (_BYTE *)(v116 + 24), v118))
                  {
                    if (*(_QWORD **)v114 == v112)
                    {
                      v123 = v112[1];
                      *(_QWORD *)v114 = v123;
                      if (v123)
                      {
                        *(_QWORD *)(v123 + 16) = v114;
                        v115 = *(uint64_t **)(v114 + 16);
                      }
                      v112[2] = v115;
                      *(_QWORD *)(*(_QWORD *)(v114 + 16) + 8 * (**(_QWORD **)(v114 + 16) != v114)) = v112;
                      v112[1] = v114;
                      *(_QWORD *)(v114 + 16) = v112;
                      v115 = (uint64_t *)v112[2];
                    }
                    else
                    {
                      v112 = (_QWORD *)v112[2];
                    }
                    *((_BYTE *)v112 + 24) = 1;
                    *((_BYTE *)v115 + 24) = 0;
                    v114 = v115[1];
                    v124 = *(_QWORD **)v114;
                    v115[1] = *(_QWORD *)v114;
                    if (v124)
                      v124[2] = v115;
                    *(_QWORD *)(v114 + 16) = v115[2];
                    *(_QWORD *)(v115[2] + 8 * (*(_QWORD *)v115[2] != (_QWORD)v115)) = v114;
                    *(_QWORD *)v114 = v115;
LABEL_121:
                    v115[2] = v114;
                    break;
                  }
                  *(_BYTE *)(v114 + 24) = 1;
                  v112 = v115;
                  *((_BYTE *)v115 + 24) = v115 == (uint64_t *)v113;
                  *v117 = 1;
                }
                while (v115 != (uint64_t *)v113);
              }
              v341 = ++v102;
              ++v106;
              v105 = v288;
            }
          }
          v101 = v286 + 40;
        }
        while (v286 + 40 != v285);
      }
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v339, (_QWORD *)v340);
    }
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8)))
    {
      v189 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
      v190 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v189 + 32))(v189);
      FirstAudioContent = cricket::GetFirstAudioContent(v190);
      if (FirstAudioContent)
      {
        if (*(_BYTE *)(FirstAudioContent + 28))
        {
          webrtc::SdpOfferAnswerHandler::RemoveSenders(a1, 0);
        }
        else
        {
          v240 = *(unsigned __int8 ***)(FirstAudioContent + 32);
          v241 = v240 + 12;
          v242 = (*((uint64_t (**)(unsigned __int8 **))*v240 + 2))(v240);
          webrtc::SdpOfferAnswerHandler::UpdateLocalSenders(a1, v241, v242);
        }
      }
      v243 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
      v244 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v243 + 32))(v243);
      FirstVideoContent = cricket::GetFirstVideoContent(v244);
      if (FirstVideoContent)
      {
        if (*(_BYTE *)(FirstVideoContent + 28))
        {
          webrtc::SdpOfferAnswerHandler::RemoveSenders(a1, 1);
        }
        else
        {
          v246 = *(unsigned __int8 ***)(FirstVideoContent + 32);
          v247 = v246 + 12;
          v248 = (*((uint64_t (**)(unsigned __int8 **))*v246 + 2))(v246);
          webrtc::SdpOfferAnswerHandler::UpdateLocalSenders(a1, v247, v248);
        }
      }
      goto LABEL_356;
    }
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96))
    {
LABEL_356:
      if (v50 == 2
        && webrtc::SdpOfferAnswerHandler::LocalIceCredentialsToReplace::SatisfiesIceRestart(*(webrtc::SdpOfferAnswerHandler::LocalIceCredentialsToReplace **)(a1 + 200), *(const webrtc::SessionDescriptionInterface **)(a1 + 32)))
      {
        v249 = *(_QWORD **)(a1 + 200);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v249, v249[1]);
        *v249 = v249 + 1;
        v249[2] = 0;
        v249[1] = 0;
        v51 = v289;
      }
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8)))
      {
        v250 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
        v251 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v250 + 32))(v250);
        if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8)))
          v252 = (uint64_t **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8)) + 8);
        else
          v252 = 0;
        webrtc::UpdateRtpHeaderExtensionPreferencesFromSdpMunging(*v251, v251[1], v252);
      }
      LODWORD(v342) = 0;
      v344[14] = 0;
      *(_QWORD *)v344 = 0;
      v343 = 0uLL;
      *(_QWORD *)&v344[5] = 0;
      if (SHIBYTE(v346) < 0)
LABEL_168:
        operator delete((void *)__src.__r_.__value_.__l.__size_);
LABEL_169:
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      v129 = (int)v342;
      v304 = (int)v342;
      if (SHIBYTE(v306) < 0)
      {
        operator delete((void *)v305);
        v129 = v304;
      }
      v305 = v343;
      v306 = *(_QWORD *)v344;
      v307[0] = *(_DWORD *)&v344[8];
      *(_DWORD *)((char *)v307 + 3) = *(_DWORD *)&v344[11];
      if (!v129)
      {
        v141 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v141 + 56))(v141) == 2)
        {
          webrtc::SdpOfferAnswerHandler::RemoveStoppedTransceivers((webrtc::SdpOfferAnswerHandler *)a1);
          v142 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
          __src.__r_.__value_.__r.__words[0] = a1;
          (*(void (**)(uint64_t, std::string *, _QWORD *(*)(uint64_t), void **))(*(_QWORD *)v142 + 96))(v142, &__src, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SdpOfferAnswerHandler::DoSetLocalDescription(std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>)::$_1>, &v342);
        }
        v143 = *a3;
        v291 = 0;
        v294[14] = 0;
        v293 = 0;
        memset(v294, 0, 13);
        v292 = 0;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v143 + 32))(v143, &v291);
        if ((v294[7] & 0x80000000) != 0)
          operator delete(v292);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), 32);
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8)))
        {
          v144 = *(unsigned __int8 *)(a1 + 209);
          webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded((webrtc::SdpOfferAnswerHandler *)a1);
          v145 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 16))(a1);
          if (v144)
          {
            if (!v145 && *(_BYTE *)(a1 + 209))
            {
              v146 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
              (*(void (**)(uint64_t))(*(_QWORD *)v146 + 48))(v146);
              ++*(_DWORD *)(a1 + 212);
              v147 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v147 + 56))(v147, *(unsigned int *)(a1 + 212));
            }
          }
        }
        v148 = (webrtc::JsepTransportCollection **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
        webrtc::JsepTransportController::MaybeStartGathering(v148);
        goto LABEL_201;
      }
      if (v306 >= 0)
        v130 = (char *)&v305;
      else
        v130 = (char *)v305;
      std::string::basic_string[abi:sn180100]<0>(&__src.__r_.__value_.__l.__data_, v130);
      webrtc::SdpOfferAnswerHandler::SetSessionError((std::string *)a1, &__src);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__src.__r_.__value_.__l.__data_);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v131, v132, v133, v134, v135, v136, v137, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      v138 = *a3;
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      {
        v139 = __src.__r_.__value_.__l.__size_;
        if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_457;
        v140 = (std::string *)__src.__r_.__value_.__r.__words[0];
        if (__src.__r_.__value_.__l.__size_)
        {
          if (!__src.__r_.__value_.__r.__words[0])
            goto LABEL_457;
        }
      }
      else
      {
        v139 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        v140 = &__src;
      }
      webrtc::RTCError::RTCError((uint64_t)v295, 10, (char *)v140, v139);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v138 + 32))(v138, v295);
      if ((v297 & 0x80000000) == 0)
      {
LABEL_199:
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__src.__r_.__value_.__l.__data_);
LABEL_201:
        if (SHIBYTE(v306) < 0)
          operator delete((void *)v305);
        std::__tree<rtc::SocketAddress>::destroy((uint64_t)v308, (char *)v308[1]);
        return;
      }
      v58 = v296;
LABEL_198:
      operator delete(v58);
      goto LABEL_199;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
    v126 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
    webrtc::TransceiverList::List((webrtc::TransceiverList *)&v339, *(_QWORD *)(v126 + 8), *(_QWORD *)(v126 + 16));
    v127 = v339;
    v128 = v340;
    if (v339 == (void **)v340)
    {
LABEL_164:
      std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>::~vector[abi:sn180100]((void **)&v339);
      goto LABEL_356;
    }
    while (1)
    {
      v192 = (const webrtc::RtpTransceiver *)*((_QWORD *)*v127 + 2);
      if (((*(uint64_t (**)(const webrtc::RtpTransceiver *))(*(_QWORD *)v192 + 64))(v192) & 1) != 0)
        goto LABEL_298;
      v193 = (const webrtc::SessionDescriptionInterface *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
      MediaSectionForTransceiver = webrtc::SdpOfferAnswerHandler::FindMediaSectionForTransceiver(*(webrtc::SdpOfferAnswerHandler **)(a1 + 8), v192, v193);
      if (!MediaSectionForTransceiver)
        goto LABEL_298;
      v195 = *((_QWORD *)v192 + 20);
      if (*((_BYTE *)MediaSectionForTransceiver + 28))
        v196 = 1;
      else
        v196 = v195 == 0;
      if (v196
        || (v197 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v195 + 144))(*((_QWORD *)v192 + 20)),
            *v197 == v197[1]))
      {
        v207 = *((_QWORD *)v192 + 4);
        if (*((_QWORD *)v192 + 5) - v207 != 8)
          goto LABEL_459;
        v208 = *(_QWORD *)(*(_QWORD *)v207 + 24);
        if (v208)
          (**(void (***)(uint64_t))v208)(v208);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v208 + 192))(v208, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
        if (++v127 == (void **)v128)
          goto LABEL_164;
      }
      else
      {
        v198 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v195 + 144))(v195);
        webrtc::RtpTransceiver::sender_internal(v192, v199, v200, v201, v202, &v332);
        if (*(_QWORD *)(v198 + 8) == *(_QWORD *)v198)
          goto LABEL_457;
        v203 = v332.__r_.__value_.__r.__words[0];
        cricket::StreamParams::stream_ids(*(cricket::StreamParams **)v198, &v338);
        (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v203 + 200))(v203, &v338);
        v204 = v338.__r_.__value_.__r.__words[0];
        if (v338.__r_.__value_.__r.__words[0])
        {
          v205 = v338.__r_.__value_.__l.__size_;
          v206 = (void *)v338.__r_.__value_.__r.__words[0];
          if (v338.__r_.__value_.__l.__size_ != v338.__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(v205 - 1) < 0)
                operator delete(*(void **)(v205 - 24));
              v205 -= 24;
            }
            while (v205 != v204);
            v206 = (void *)v338.__r_.__value_.__r.__words[0];
          }
          v338.__r_.__value_.__l.__size_ = v204;
          operator delete(v206);
        }
        (*(void (**)(std::string::size_type))(*(_QWORD *)v203 + 8))(v203);
        webrtc::RtpTransceiver::sender_internal(v192, v209, v210, v211, v212, &v332);
        v213 = v332.__r_.__value_.__r.__words[0];
        (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v332.__r_.__value_.__l.__data_
                                                                                  + 96))(&v338, v332.__r_.__value_.__r.__words[0]);
        (*(void (**)(std::string::size_type))(*(_QWORD *)v213 + 8))(v213);
        webrtc::RtpTransceiver::sender_internal(v192, v214, v215, v216, v217, &v332);
        v218 = *(cricket::StreamParams **)v198;
        if (*(_QWORD *)(v198 + 8) == *(_QWORD *)v198)
          goto LABEL_457;
        v219 = (unsigned int *)*((_QWORD *)v218 + 3);
        if (v219 == *((unsigned int **)v218 + 4))
          v220 = 0;
        else
          v220 = *v219;
        v221 = v332.__r_.__value_.__r.__words[0];
        (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v332.__r_.__value_.__l.__data_ + 192))(v332.__r_.__value_.__r.__words[0], v220);
        (*(void (**)(std::string::size_type))(*(_QWORD *)v221 + 8))(v221);
        v222 = v338.__r_.__value_.__r.__words[0];
        if (v338.__r_.__value_.__r.__words[0] != v338.__r_.__value_.__l.__size_)
        {
          if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8)))
            v223 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8)) + 8;
          else
            v223 = 0;
          v224 = (void (***)(_QWORD))*v127;
          v331.__r_.__value_.__r.__words[0] = (std::string::size_type)v224;
          if (v224)
            (**v224)(v224);
          v225 = std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>>>::__emplace_unique_key_args<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::piecewise_construct_t const&,std::tuple<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>,std::tuple<>>((uint64_t **)(v223 + 24), (unint64_t)v224, &v331);
          std::optional<std::vector<webrtc::RtpEncodingParameters>>::operator=[abi:sn180100]<std::vector<webrtc::RtpEncodingParameters> const&,void>((uint64_t)(v225 + 15), (uint64_t *)&v338);
          if (v331.__r_.__value_.__r.__words[0])
            (*(void (**)(std::string::size_type))(*(_QWORD *)v331.__r_.__value_.__l.__data_ + 8))(v331.__r_.__value_.__r.__words[0]);
          v222 = v338.__r_.__value_.__r.__words[0];
        }
        if (v222)
        {
          v226 = v338.__r_.__value_.__l.__size_;
          v227 = (void *)v222;
          if (v338.__r_.__value_.__l.__size_ != v222)
          {
            do
              webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v226 - 272));
            while (v226 != v222);
            v227 = (void *)v338.__r_.__value_.__r.__words[0];
          }
          v338.__r_.__value_.__l.__size_ = v222;
          operator delete(v227);
        }
        v51 = v289;
LABEL_298:
        if (++v127 == (void **)v128)
          goto LABEL_164;
      }
    }
  }
  v149 = 8 * (v94 >> 3);
  v150 = v149;
  v151 = v93;
  while (1)
  {
    v158 = *(_QWORD *)(*(_QWORD *)v151 + 16);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 64))(v158) & 1) == 0)
      break;
LABEL_226:
    v151 += 8;
    v150 -= 8;
    if (!v150)
    {
      do
      {
        v178 = *(_QWORD *)&v93[v149 - 8];
        if (v178)
          (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
        v149 -= 8;
      }
      while (v149);
      v94 = (uint64_t)v339;
      v156 = v340;
      goto LABEL_267;
    }
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v158 + 40))(&v342, v158);
  if (!v344[0])
  {
LABEL_251:
    v173 = (const webrtc::SessionDescriptionInterface *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
    v174 = webrtc::SdpOfferAnswerHandler::FindMediaSectionForTransceiver(*(webrtc::SdpOfferAnswerHandler **)(a1 + 8), (const webrtc::RtpTransceiver *)v158, v173);
    if ((v50 - 3) >= 0xFFFFFFFE && v174)
    {
      v175 = v174[4];
      if ((*(_DWORD *)(v175 + 124) & 0xFFFFFFFD) != 0
        && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 112))(v158) & 0xFF00000000) != 0)
      {
        v176 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 112))(v158);
        if ((v176 & 0xFF00000000) == 0)
          goto LABEL_457;
        if ((v176 & 0xFFFFFFFD) == 0)
        {
          v335 = *(void (****)(_QWORD))v151;
          v177 = v335;
          if (v335)
          {
            (**v335)(v335);
            webrtc::SdpOfferAnswerHandler::ProcessRemovalOfRemoteTrack(a1, &v335, (char **)&v339, (uint64_t)&v338);
            (*v177)[1](v177);
          }
          else
          {
            webrtc::SdpOfferAnswerHandler::ProcessRemovalOfRemoteTrack(a1, &v335, (char **)&v339, (uint64_t)&v338);
          }
        }
      }
      webrtc::RtpTransceiver::set_current_direction(v158, *(_DWORD *)(v175 + 124));
      v157 = *(_DWORD *)(v175 + 124);
      *(_BYTE *)(v158 + 100) = 1;
      *(_DWORD *)(v158 + 96) = v157;
    }
    goto LABEL_226;
  }
  if (SHIBYTE(v343) < 0)
    operator delete(v342);
  v159 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v160 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v158 + 40))(&v342, v158);
  if (!v344[0])
    goto LABEL_457;
  v331.__r_.__value_.__r.__words[0] = v160;
  v331.__r_.__value_.__l.__size_ = (std::string::size_type)&v342;
  v330[0] = 0;
  v332.__r_.__value_.__r.__words[0] = (std::string::size_type)v330;
  v332.__r_.__value_.__l.__size_ = (std::string::size_type)&v331;
  if (v344[0] && SHIBYTE(v343) < 0)
    operator delete(v342);
  v165 = *(_QWORD *)(v158 + 32);
  if (*(_QWORD *)(v158 + 40) - v165 == 8)
  {
    v166 = *(_QWORD *)(*(_QWORD *)v165 + 24);
    if (v166)
      (**(void (***)(uint64_t))v166)(v166);
    v337 = v330[0];
    if (v330[0])
      (**(void (***)(_QWORD))v330[0])(v330[0]);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v166 + 216))(v166, &v337);
    if (v337)
      (*(void (**)(uint64_t))(*(_QWORD *)v337 + 8))(v337);
    (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
    v171 = *(_QWORD *)(v158 + 56);
    if (*(_QWORD *)(v158 + 64) - v171 != 8)
      goto LABEL_460;
    v172 = *(_QWORD *)(*(_QWORD *)v171 + 32);
    if (v172)
      (**(void (***)(uint64_t))v172)(v172);
    v336 = v330[0];
    if (v330[0])
      (**(void (***)(_QWORD))v330[0])(v330[0]);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v172 + 192))(v172, &v336);
    if (v336)
      (*(void (**)(uint64_t))(*(_QWORD *)v336 + 8))(v336);
    (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
    if (v330[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v330[0] + 8))(v330[0]);
    goto LABEL_251;
  }
LABEL_459:
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 476, "1u == senders_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v161, v162, v163, v164, 1);
LABEL_460:
  v282 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 483, "1u == receivers_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v167, v168, v169, v170, 1);
  webrtc::SdpOfferAnswerHandler::Rollback((uint64_t)v282, v283, v284);
}

void webrtc::SdpOfferAnswerHandler::Rollback(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 *v18;
  std::string *v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void **v45;
  _QWORD **v46;
  _QWORD *v47;
  const void **v48;
  _QWORD *v49;
  const void **v50;
  char *v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string::size_type v56;
  _QWORD *v57;
  char *v58;
  BOOL v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char **v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  char *v76;
  uint64_t v77;
  char v78;
  char *v79;
  char *v80;
  int64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  std::string *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  std::string *v96;
  __int128 v97;
  uint64_t v98;
  void *v99;
  std::string::size_type v100;
  uint64_t *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::string::size_type v111;
  std::string::size_type v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  std::string::size_type *v123;
  std::string::size_type v124;
  char *v125;
  int64_t v126;
  unint64_t v127;
  int64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  std::string::size_type v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  char *v162;
  int64_t v163;
  _BYTE *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  std::string *v171;
  const std::string::value_type **v172;
  __int128 v173;
  uint64_t v174;
  std::string *v175;
  const std::string::value_type **v176;
  __int128 v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  char *v183;
  int64_t v184;
  unint64_t v185;
  _BYTE *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  std::string *v193;
  const std::string::value_type **v194;
  __int128 v195;
  uint64_t v196;
  std::string *v197;
  const std::string::value_type **v198;
  __int128 v199;
  char *v200;
  std::string::size_type v201;
  std::string::size_type v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  char v211;
  char *v212;
  char *v213;
  void *v214;
  void *v215;
  void **v216;
  void **v217;
  void *v218;
  _QWORD *v219;
  _QWORD *v220;
  int64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  __int128 v228;
  __int128 v229;
  char *v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  char *v238;
  size_t v239;
  webrtc::JsepTransportController *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  void (***v250)(_QWORD);
  uint64_t v251;
  std::string::size_type v252;
  std::string::size_type v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  void (***v259)(_QWORD);
  char *v260;
  uint64_t v261;
  uint64_t v262;
  void (***v263)(_QWORD);
  char *v264;
  uint64_t v265;
  uint64_t v266;
  void (***v267)(_QWORD);
  uint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t i;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t j;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  std::string::size_type v286;
  std::string::size_type size;
  std::string *v288;
  char *v289;
  std::string::size_type v290;
  char *v291;
  char *v292;
  unint64_t v293;
  int v294;
  const char *v295;
  const char *v296;
  size_t v297;
  char *v298;
  char *v299;
  __int128 v300;
  const char *v301;
  size_t v302;
  std::string *p_src;
  size_t v304;
  std::string *v305;
  std::string *v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  char *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  char *__p;
  _QWORD *v319;
  _QWORD *v320;
  uint64_t v321;
  void (***v322)(_QWORD);
  void (***v323)(_QWORD);
  void (***v324)(_QWORD);
  uint64_t v325;
  void (***v326)(_QWORD);
  uint64_t v327;
  uint64_t v328;
  std::string v329;
  char v330;
  _QWORD *v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  std::string __src;
  uint64_t v337;
  __int128 v338;
  void *v339;
  char *v340;
  char *v341;
  char v342;
  void *v343;
  char *v344;
  _OWORD *v345;
  char v346;
  _BYTE v347[13];
  char *v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;

  v4 = a2;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 0xFFFFFFFD) != 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_448;
    v230 = (char *)operator new(0x28uLL);
    v329.__r_.__value_.__r.__words[0] = (std::string::size_type)v230;
    *(_OWORD *)&v329.__r_.__value_.__r.__words[1] = xmmword_208F04EE0;
    if (v230 <= "Called in wrong signalingState: " && v230 + 32 > "Called in wrong signalingState: ")
      goto LABEL_487;
    strcpy(v230, "Called in wrong signalingState: ");
    v231 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    v237 = 0;
    v238 = "stable";
    v239 = 6;
    switch(v231)
    {
      case 0:
        break;
      case 1:
        v237 = 0;
        v238 = "have-local-offer";
        v239 = 16;
        break;
      case 2:
        v237 = 0;
        v238 = "have-local-pranswer";
        v239 = 19;
        break;
      case 3:
        v237 = 0;
        v238 = "have-remote-offer";
        v239 = 17;
        break;
      case 4:
        v237 = 0;
        v238 = "have-remote-pranswer";
        v239 = 20;
        break;
      case 5:
        v237 = 0;
        v238 = "closed";
        v239 = 6;
        break;
      default:
        v239 = 0;
        v238 = &byte_208EB9246;
        v237 = 1;
        break;
    }
    if ((v329.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v286 = 22;
    else
      v286 = (v329.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v329.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v329.__r_.__value_.__r.__words[2]);
    else
      size = v329.__r_.__value_.__l.__size_;
    if (v286 - size >= v239)
    {
      if ((v237 & 1) == 0)
      {
        if ((v329.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v288 = &v329;
        else
          v288 = (std::string *)v329.__r_.__value_.__r.__words[0];
        v289 = (char *)v288 + size;
        if ((char *)v288 + size <= v238 && &v289[v239] > v238)
          goto LABEL_487;
        memcpy(v289, v238, v239);
        v290 = size + v239;
        if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
          v329.__r_.__value_.__l.__size_ = size + v239;
        else
          *((_BYTE *)&v329.__r_.__value_.__s + 23) = v290 & 0x7F;
        v288->__r_.__value_.__s.__data_[v290] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v329, v286, size + v239 - v286, size, size, 0, v239, v238);
    }
    __src = v329;
    memset(&v329, 0, sizeof(v329));
    v351 = "INVALID_STATE";
    v352 = 13;
    rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v286, v232, v233, v234, v235, v236, (uint64_t)v238, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__src.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v329.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_448;
    }
    else if ((SHIBYTE(v329.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_448;
    }
    operator delete(v329.__r_.__value_.__l.__data_);
LABEL_448:
    v291 = (char *)operator new(0x28uLL);
    v292 = v291;
    *(_OWORD *)&v329.__r_.__value_.__l.__data_ = xmmword_208F04EE0;
    v293 = (unint64_t)(v291 + 32);
    if (v291 <= "Called in wrong signalingState: " && v293 > (unint64_t)"Called in wrong signalingState: ")
      goto LABEL_487;
    strcpy(v291, "Called in wrong signalingState: ");
    v294 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    v295 = "have-local-offer";
    v296 = "stable";
    v297 = 16;
    switch(v294)
    {
      case 0:
        goto LABEL_464;
      case 1:
        goto LABEL_456;
      case 2:
        v295 = "have-local-pranswer";
        v297 = 19;
        v298 = (char *)operator new(0x50uLL);
        v299 = v298 + 32;
        if (v292 < v298)
          goto LABEL_458;
        goto LABEL_457;
      case 3:
        v295 = "have-remote-offer";
        v297 = 17;
LABEL_456:
        v298 = (char *)operator new(0x50uLL);
        v299 = v298 + 32;
        if (v292 >= v298)
          goto LABEL_457;
        goto LABEL_458;
      case 4:
        v295 = "have-remote-pranswer";
        v297 = 20;
        v298 = (char *)operator new(0x50uLL);
        v299 = v298 + 32;
        if (v292 < v298)
          goto LABEL_458;
LABEL_457:
        if (v299 > v292)
          goto LABEL_487;
LABEL_458:
        v300 = *((_OWORD *)v292 + 1);
        *(_OWORD *)v298 = *(_OWORD *)v292;
        *((_OWORD *)v298 + 1) = v300;
        if (v299 <= v295 && &v299[v297] > v295)
          goto LABEL_487;
        memcpy(v299, v295, v297);
        operator delete(v292);
        v329.__r_.__value_.__r.__words[0] = v297 | 0x20;
        v329.__r_.__value_.__l.__size_ = 0x8000000000000050;
        v301 = &v298[v297 | 0x20];
        v292 = v298;
LABEL_467:
        *v301 = 0;
LABEL_468:
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v292;
        *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = *(_OWORD *)&v329.__r_.__value_.__l.__data_;
        *(_OWORD *)&v329.__r_.__value_.__l.__data_ = 0uLL;
        v302 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          v304 = __src.__r_.__value_.__l.__size_;
          if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_487;
          p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
          if (__src.__r_.__value_.__l.__size_)
          {
            if (!__src.__r_.__value_.__r.__words[0])
              goto LABEL_487;
          }
          *(_DWORD *)a1 = 6;
          if (v304 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_488;
        }
        else
        {
          *(_DWORD *)a1 = 6;
          p_src = &__src;
          v304 = v302;
        }
        if (v304 > 0x16)
        {
          v307 = (v304 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v304 | 7) != 0x17)
            v307 = v304 | 7;
          v308 = v307 + 1;
          v305 = (std::string *)operator new(v307 + 1);
          *(_QWORD *)(a1 + 16) = v304;
          *(_QWORD *)(a1 + 24) = v308 | 0x8000000000000000;
          *(_QWORD *)(a1 + 8) = v305;
          v306 = (std::string *)((char *)v305 + v304);
          if (v305 > p_src)
            goto LABEL_481;
        }
        else
        {
          v305 = (std::string *)(a1 + 8);
          *(_BYTE *)(a1 + 31) = v304;
          v306 = (std::string *)(a1 + 8 + v304);
          if (a1 + 8 > (unint64_t)p_src)
            goto LABEL_481;
        }
        if (v306 > p_src)
          goto LABEL_487;
LABEL_481:
        if (v304)
          memmove(v305, p_src, v304);
        v306->__r_.__value_.__s.__data_[0] = 0;
        *(_DWORD *)(a1 + 32) = 0;
        *(_BYTE *)(a1 + 36) = 0;
        *(_BYTE *)(a1 + 38) = 0;
        if ((v302 & 0x80) == 0)
          return;
        v285 = (char *)__src.__r_.__value_.__r.__words[0];
        break;
      case 5:
        v296 = "closed";
LABEL_464:
        v301 = v292 + 38;
        if (v293 <= (unint64_t)v296 && v301 > v296)
          goto LABEL_487;
        *(_DWORD *)v293 = *(_DWORD *)v296;
        *(_WORD *)(v293 + 4) = *((_WORD *)v296 + 2);
        v329.__r_.__value_.__r.__words[0] = 38;
        goto LABEL_467;
      default:
        goto LABEL_468;
    }
    goto LABEL_485;
  }
  v351 = 0;
  v352 = 0;
  v353 = 0;
  v348 = 0;
  v349 = 0;
  v350 = 0;
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 64))(*(_QWORD *)(v4 + 8)))
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 64))(*(_QWORD *)(v4 + 8));
    v309 = a3;
    v10 = *(_QWORD **)(v9 + 32);
    v313 = v9 + 40;
    if (v10 != (_QWORD *)(v9 + 40))
    {
LABEL_4:
      v315 = 0;
      v316 = 0;
      v311 = 0;
      v312 = 0;
      __p = 0;
      v314 = 0;
      v317 = v4;
      while (1)
      {
        v11 = (_QWORD *)v10[4];
        if (v11)
          (*(void (**)(_QWORD))*v11)(v10[4]);
        __src.__r_.__value_.__s.__data_[0] = 0;
        LOBYTE(v337) = 0;
        if (*((_BYTE *)v10 + 64))
        {
          if (*((char *)v10 + 63) < 0)
            std::string::__init_copy_ctor_external(&__src, (const std::string::value_type *)v10[5], v10[6]);
          else
            __src = *(std::string *)(v10 + 5);
          LOBYTE(v337) = 1;
        }
        v338 = *(_OWORD *)(v10 + 9);
        LOBYTE(v339) = 0;
        v342 = 0;
        v319 = v10;
        if (*((_BYTE *)v10 + 112))
        {
          v339 = 0;
          v340 = 0;
          v341 = 0;
          v12 = v10[11];
          v13 = v10[12];
          v14 = v13 - v12;
          if (v13 != v12)
          {
            v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 3);
            if (v15 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_488;
            v16 = (char *)operator new(v14);
            v17 = 0;
            v339 = v16;
            v340 = v16;
            v341 = &v16[24 * v15];
            do
            {
              while (1)
              {
                v18 = (__int128 *)(v12 + v17);
                v19 = (std::string *)&v16[v17];
                if ((*(char *)(v12 + v17 + 23) & 0x80000000) == 0)
                  break;
                std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
                v17 += 24;
                if (v12 + v17 == v13)
                  goto LABEL_20;
              }
              v20 = *v18;
              v19->__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
              *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
              v17 += 24;
            }
            while (v12 + v17 != v13);
LABEL_20:
            v340 = &v16[v17];
          }
          v342 = 1;
          v10 = v319;
        }
        LOBYTE(v343) = 0;
        v346 = 0;
        v320 = v11;
        if (!*((_BYTE *)v10 + 144))
          goto LABEL_93;
        v343 = 0;
        v344 = 0;
        v345 = 0;
        v21 = v10;
        v22 = v10[15];
        v321 = v21[16];
        v23 = v321 - v22;
        if (v321 == v22)
          goto LABEL_92;
        v24 = 0xF0F0F0F0F0F0F0F1 * (v23 >> 4);
        if (v24 > 0xF0F0F0F0F0F0F0)
          goto LABEL_488;
        v25 = operator new(v23);
        v343 = v25;
        v344 = (char *)v25;
        v345 = &v25[17 * v24];
        do
        {
          *v25 = *(_OWORD *)v22;
          v26 = *(_OWORD *)(v22 + 16);
          v27 = *(_OWORD *)(v22 + 32);
          v28 = *(_OWORD *)(v22 + 48);
          *(_OWORD *)((char *)v25 + 57) = *(_OWORD *)(v22 + 57);
          v25[2] = v27;
          v25[3] = v28;
          v25[1] = v26;
          *((_BYTE *)v25 + 80) = 0;
          v29 = (std::string *)(v25 + 5);
          *((_BYTE *)v25 + 104) = 0;
          if (*(_BYTE *)(v22 + 104))
          {
            if (*(char *)(v22 + 103) < 0)
            {
              std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)(v22 + 80), *(_QWORD *)(v22 + 88));
            }
            else
            {
              v30 = *(_OWORD *)(v22 + 80);
              *((_QWORD *)v25 + 12) = *(_QWORD *)(v22 + 96);
              *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
            }
            *((_BYTE *)v25 + 104) = 1;
          }
          v31 = *(_QWORD *)(v22 + 112);
          *(_QWORD *)((char *)v25 + 117) = *(_QWORD *)(v22 + 117);
          *((_QWORD *)v25 + 14) = v31;
          v32 = (std::string *)(v25 + 8);
          if (*(char *)(v22 + 151) < 0)
          {
            std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)(v22 + 128), *(_QWORD *)(v22 + 136));
            *((_WORD *)v25 + 76) = *(_WORD *)(v22 + 152);
            *((_BYTE *)v25 + 160) = 0;
            *((_BYTE *)v25 + 264) = 0;
            if (!*(_BYTE *)(v22 + 264))
              goto LABEL_27;
          }
          else
          {
            v33 = *(_OWORD *)(v22 + 128);
            *((_QWORD *)v25 + 18) = *(_QWORD *)(v22 + 144);
            *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
            *((_WORD *)v25 + 76) = *(_WORD *)(v22 + 152);
            *((_BYTE *)v25 + 160) = 0;
            *((_BYTE *)v25 + 264) = 0;
            if (!*(_BYTE *)(v22 + 264))
              goto LABEL_27;
          }
          *((_QWORD *)v25 + 20) = off_24C0BCBF0;
          v34 = (std::string *)((char *)v25 + 168);
          if (*(char *)(v22 + 191) < 0)
          {
            std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)(v22 + 168), *(_QWORD *)(v22 + 176));
          }
          else
          {
            v35 = *(_OWORD *)(v22 + 168);
            *((_QWORD *)v25 + 23) = *(_QWORD *)(v22 + 184);
            *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
          }
          v36 = *(_OWORD *)(v22 + 192);
          *((_BYTE *)v25 + 208) = *(_BYTE *)(v22 + 208);
          v25[12] = v36;
          *((_QWORD *)v25 + 28) = 0;
          *((_QWORD *)v25 + 29) = 0;
          *((_QWORD *)v25 + 27) = 0;
          v37 = *(_QWORD *)(v22 + 216);
          v38 = *(_QWORD *)(v22 + 224);
          v39 = v38 - v37;
          if (v38 != v37)
          {
            v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 2);
            if (v40 >= 0x1555555555555556)
              goto LABEL_488;
            v41 = (char *)operator new(v39);
            v42 = 0;
            *((_QWORD *)v25 + 27) = v41;
            *((_QWORD *)v25 + 28) = v41;
            *((_QWORD *)v25 + 29) = &v41[12 * v40];
            do
            {
              v43 = &v41[v42];
              v44 = *(_QWORD *)(v37 + v42);
              v43[8] = *(_BYTE *)(v37 + v42 + 8);
              *(_QWORD *)v43 = v44;
              v42 += 12;
            }
            while (v37 + v42 != v38);
            *((_QWORD *)v25 + 28) = &v41[v42];
          }
          *((_QWORD *)v25 + 31) = 0;
          v45 = (void **)v25 + 31;
          *((_QWORD *)v25 + 30) = (char *)v25 + 248;
          v46 = (_QWORD **)(v25 + 15);
          *((_QWORD *)v25 + 32) = 0;
          v47 = *(_QWORD **)(v22 + 240);
          if (v47 != (_QWORD *)(v22 + 248))
          {
LABEL_48:
            v48 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)v25 + 30, (uint64_t *)v25 + 31, (uint64_t **)&v329, (uint64_t **)&v333, (uint64_t)(v47 + 4));
            if (*v48)
            {
              v49 = (_QWORD *)v47[1];
              if (!v49)
                goto LABEL_82;
              goto LABEL_76;
            }
            v50 = v48;
            v51 = (char *)operator new(0x50uLL);
            v52 = (std::string *)(v51 + 32);
            if (*((char *)v47 + 55) < 0)
            {
              std::string::__init_copy_ctor_external(v52, (const std::string::value_type *)v47[4], v47[5]);
              v54 = (std::string *)(v51 + 56);
              if (*((char *)v47 + 79) < 0)
                goto LABEL_55;
LABEL_53:
              v55 = *(_OWORD *)(v47 + 7);
              v54->__r_.__value_.__r.__words[2] = v47[9];
              *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
            }
            else
            {
              v53 = *((_OWORD *)v47 + 2);
              *((_QWORD *)v51 + 6) = v47[6];
              *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
              v54 = (std::string *)(v51 + 56);
              if ((*((char *)v47 + 79) & 0x80000000) == 0)
                goto LABEL_53;
LABEL_55:
              std::string::__init_copy_ctor_external(v54, (const std::string::value_type *)v47[7], v47[8]);
            }
            v56 = v329.__r_.__value_.__r.__words[0];
            *(_QWORD *)v51 = 0;
            *((_QWORD *)v51 + 1) = 0;
            *((_QWORD *)v51 + 2) = v56;
            *v50 = v51;
            v57 = (_QWORD *)**v46;
            if (v57)
            {
              *v46 = v57;
              v51 = (char *)*v50;
            }
            v58 = (char *)*v45;
            v59 = v51 == *v45;
            v51[24] = v59;
            if (v59)
            {
LABEL_75:
              ++*((_QWORD *)v25 + 32);
              v49 = (_QWORD *)v47[1];
              if (!v49)
                goto LABEL_82;
              goto LABEL_76;
            }
            while (1)
            {
              v60 = *((_QWORD *)v51 + 2);
              if (*(_BYTE *)(v60 + 24))
                goto LABEL_75;
              v61 = *(char **)(v60 + 16);
              v62 = *(_QWORD *)v61;
              if (*(_QWORD *)v61 == v60)
              {
                v65 = *((_QWORD *)v61 + 1);
                if (!v65 || (v66 = *(unsigned __int8 *)(v65 + 24), v63 = (_BYTE *)(v65 + 24), v66))
                {
                  if (*(char **)v60 == v51)
                  {
                    *(_BYTE *)(v60 + 24) = 1;
                    v61[24] = 0;
                    v69 = *(_QWORD *)(v60 + 8);
                    *(_QWORD *)v61 = v69;
                    if (v69)
                      goto LABEL_73;
                  }
                  else
                  {
                    v67 = *(uint64_t **)(v60 + 8);
                    v68 = *v67;
                    *(_QWORD *)(v60 + 8) = *v67;
                    if (v68)
                    {
                      *(_QWORD *)(v68 + 16) = v60;
                      v61 = *(char **)(v60 + 16);
                    }
                    v67[2] = (uint64_t)v61;
                    *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v67;
                    *v67 = v60;
                    *(_QWORD *)(v60 + 16) = v67;
                    v61 = (char *)v67[2];
                    v60 = *(_QWORD *)v61;
                    *((_BYTE *)v67 + 24) = 1;
                    v61[24] = 0;
                    v69 = *(_QWORD *)(v60 + 8);
                    *(_QWORD *)v61 = v69;
                    if (v69)
LABEL_73:
                      *(_QWORD *)(v69 + 16) = v61;
                  }
                  *(_QWORD *)(v60 + 16) = *((_QWORD *)v61 + 2);
                  *(_QWORD *)(*((_QWORD *)v61 + 2) + 8 * (**((_QWORD **)v61 + 2) != (_QWORD)v61)) = v60;
                  *(_QWORD *)(v60 + 8) = v61;
                  *((_QWORD *)v61 + 2) = v60;
                  goto LABEL_75;
                }
              }
              else if (!v62 || (v64 = *(unsigned __int8 *)(v62 + 24), v63 = (_BYTE *)(v62 + 24), v64))
              {
                if (*(char **)v60 == v51)
                {
                  v73 = *((_QWORD *)v51 + 1);
                  *(_QWORD *)v60 = v73;
                  if (v73)
                  {
                    *(_QWORD *)(v73 + 16) = v60;
                    v61 = *(char **)(v60 + 16);
                  }
                  *((_QWORD *)v51 + 2) = v61;
                  *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v51;
                  *((_QWORD *)v51 + 1) = v60;
                  *(_QWORD *)(v60 + 16) = v51;
                  v61 = (char *)*((_QWORD *)v51 + 2);
                  v51[24] = 1;
                  v61[24] = 0;
                  v71 = (char **)*((_QWORD *)v61 + 1);
                  v72 = *v71;
                  *((_QWORD *)v61 + 1) = *v71;
                  if (v72)
LABEL_80:
                    *((_QWORD *)v72 + 2) = v61;
                }
                else
                {
                  *(_BYTE *)(v60 + 24) = 1;
                  v61[24] = 0;
                  v71 = (char **)*((_QWORD *)v61 + 1);
                  v72 = *v71;
                  *((_QWORD *)v61 + 1) = *v71;
                  if (v72)
                    goto LABEL_80;
                }
                v71[2] = (char *)*((_QWORD *)v61 + 2);
                *(_QWORD *)(*((_QWORD *)v61 + 2) + 8 * (**((_QWORD **)v61 + 2) != (_QWORD)v61)) = v71;
                *v71 = v61;
                *((_QWORD *)v61 + 2) = v71;
                ++*((_QWORD *)v25 + 32);
                v49 = (_QWORD *)v47[1];
                if (!v49)
                {
                  do
                  {
LABEL_82:
                    v70 = (_QWORD *)v47[2];
                    v59 = *v70 == (_QWORD)v47;
                    v47 = v70;
                  }
                  while (!v59);
                  goto LABEL_47;
                }
                do
                {
LABEL_76:
                  v70 = v49;
                  v49 = (_QWORD *)*v49;
                }
                while (v49);
LABEL_47:
                v47 = v70;
                if (v70 == (_QWORD *)(v22 + 248))
                  break;
                goto LABEL_48;
              }
              *(_BYTE *)(v60 + 24) = 1;
              v51 = v61;
              v61[24] = v61 == v58;
              *v63 = 1;
              if (v61 == v58)
                goto LABEL_75;
            }
          }
          *((_BYTE *)v25 + 264) = 1;
          v11 = v320;
LABEL_27:
          v22 += 272;
          v25 += 17;
        }
        while (v22 != v321);
        v344 = (char *)v25;
        v4 = v317;
LABEL_92:
        v346 = 1;
        v10 = v319;
LABEL_93:
        *(_QWORD *)&v347[5] = *(_QWORD *)((char *)v10 + 157);
        *(_QWORD *)v347 = v10[19];
        if (!v347[12])
          goto LABEL_106;
        if (((*(uint64_t (**)(_QWORD *))(*v11 + 112))(v11) & 0xFF00000000) == 0)
        {
          v75 = 0;
          if (!v347[12])
            goto LABEL_489;
          goto LABEL_99;
        }
        v74 = (*(uint64_t (**)(_QWORD *))(*v11 + 112))(v11);
        if ((v74 & 0xFF00000000) == 0)
          goto LABEL_487;
        v75 = (v74 & 0xFFFFFFFD) == 0;
        if (!v347[12])
          goto LABEL_489;
LABEL_99:
        if ((*(_QWORD *)&v347[4] & 0xFF00000000) == 0)
          goto LABEL_103;
        if ((*(_DWORD *)&v347[4] & 0xFFFFFFFD) != 0)
          v75 = 1;
        if (v75)
        {
LABEL_103:
          v76 = v315;
          goto LABEL_104;
        }
        (*(void (**)(_QWORD *))*v11)(v11);
        if ((unint64_t)v315 < v311)
        {
          if (v315)
          {
            *(_QWORD *)v315 = v11;
            v76 = v315 + 8;
            goto LABEL_104;
          }
LABEL_487:
          __break(1u);
LABEL_488:
          abort();
        }
        v139 = (char *)(v315 - v316);
        v140 = (v315 - v316) >> 3;
        v141 = v140 + 1;
        if ((unint64_t)(v140 + 1) >> 61)
          goto LABEL_488;
        if ((uint64_t)(v311 - (_QWORD)v316) >> 2 > v141)
          v141 = (uint64_t)(v311 - (_QWORD)v316) >> 2;
        if (v311 - (unint64_t)v316 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v141)
          goto LABEL_487;
        if (v141 >> 61)
          goto LABEL_492;
        v142 = 8 * v141;
        v143 = (char *)operator new(8 * v141);
        v144 = v143;
        v145 = &v143[8 * v140];
        *(_QWORD *)v145 = v11;
        v76 = v145 + 8;
        v146 = (char *)(v315 - v316);
        if (v315 == v316)
        {
          v151 = v316;
        }
        else
        {
          v147 = v146 - 8;
          if ((unint64_t)(v146 - 8) < 0x138
            || (v221 = v315 - 8 - v316, &v315[-(v221 & 0xFFFFFFFFFFFFFFF8) - 8] > v315 - 8)
            || &v139[(_QWORD)v143 - 8 - (v221 & 0xFFFFFFFFFFFFFFF8)] > &v139[(_QWORD)v143 - 8])
          {
            v148 = v315;
            v149 = v316;
          }
          else
          {
            v222 = v221 & 0xFFFFFFFFFFFFFFF8;
            v149 = v316;
            if (&v315[-v222 - 8] >= v145 || (v148 = v315, &v139[(_QWORD)v143 - v222 - 8] >= v315))
            {
              v223 = ((unint64_t)v147 >> 3) + 1;
              v224 = 8 * (v223 & 0x3FFFFFFFFFFFFFFCLL);
              v148 = &v315[-v224];
              v145 -= v224;
              v225 = &v143[8 * v140 - 16];
              v226 = v315 - 16;
              v227 = v223 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v229 = *((_OWORD *)v226 - 1);
                v228 = *(_OWORD *)v226;
                *((_OWORD *)v226 - 1) = 0uLL;
                *(_OWORD *)v226 = 0uLL;
                *((_OWORD *)v225 - 1) = v229;
                *(_OWORD *)v225 = v228;
                v225 -= 32;
                v226 -= 32;
                v227 -= 4;
              }
              while (v227);
              v149 = v316;
              if (v223 == (v223 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_202;
            }
          }
          do
          {
            v150 = *((_QWORD *)v148 - 1);
            v148 -= 8;
            *(_QWORD *)v148 = 0;
            *((_QWORD *)v145 - 1) = v150;
            v145 -= 8;
          }
          while (v148 != v149);
LABEL_202:
          v151 = v149;
          v152 = v315;
          do
          {
            v154 = *((_QWORD *)v152 - 1);
            v152 -= 8;
            v153 = v154;
            if (v154)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
              v151 = v316;
            }
          }
          while (v152 != v151);
        }
        v311 = (unint64_t)&v144[v142];
        if (v151)
          operator delete(v151);
        v316 = v145;
        v4 = v317;
        v10 = v319;
LABEL_104:
        if (!v347[12])
          goto LABEL_489;
        v77 = v11[2];
        v78 = v347[8];
        *(_DWORD *)(v77 + 96) = *(_DWORD *)&v347[4];
        *(_BYTE *)(v77 + 100) = v78;
        v315 = v76;
LABEL_106:
        if (!v342)
          goto LABEL_150;
        v79 = (char *)v339;
        v80 = v340;
        v81 = v340 - (_BYTE *)v339;
        if (v340 != v339)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v81 >> 3) > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_488;
          v82 = (char *)operator new(v81);
          v83 = 0;
          do
          {
            while (1)
            {
              v84 = &v79[v83];
              v85 = (std::string *)&v82[v83];
              if ((v79[v83 + 23] & 0x80000000) == 0)
                break;
              std::string::__init_copy_ctor_external(v85, *(const std::string::value_type **)v84, *((_QWORD *)v84 + 1));
              v83 += 24;
              if (&v79[v83] == v80)
                goto LABEL_113;
            }
            v86 = *(_OWORD *)v84;
            v85->__r_.__value_.__r.__words[2] = *((_QWORD *)v84 + 2);
            *(_OWORD *)&v85->__r_.__value_.__l.__data_ = v86;
            v83 += 24;
          }
          while (&v79[v83] != v80);
LABEL_113:
          if (v83)
          {
            v87 = 24 * (v83 / 24);
            do
            {
              if (v82[v87 - 1] < 0)
                operator delete(*(void **)&v82[v87 - 24]);
              v87 -= 24;
            }
            while (v87);
          }
          operator delete(v82);
        }
        memset(&v329, 0, sizeof(v329));
        v333 = 0;
        v334 = 0;
        v335 = 0;
        v88 = *(_QWORD *)(v11[2] + 56);
        if (*(_QWORD *)(v11[2] + 64) - v88 != 8)
          goto LABEL_490;
        v89 = *(_QWORD *)(*(_QWORD *)v88 + 32);
        v332 = v89;
        if (v89)
          (**(void (***)(uint64_t))v89)(v89);
        if (!v342)
          goto LABEL_489;
        v90 = (char *)v339;
        v91 = v340;
        v92 = v340 - (_BYTE *)v339;
        if (v340 == v339)
        {
          webrtc::SdpOfferAnswerHandler::SetAssociatedRemoteStreams(v317, &v332, 0, 0, (uint64_t)&v329, (uint64_t)&v333);
          v10 = v319;
          if (v89)
            goto LABEL_135;
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * (v92 >> 3) > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_488;
          v93 = (char *)operator new(v92);
          v94 = 0;
          do
          {
            while (1)
            {
              v95 = &v90[v94];
              v96 = (std::string *)&v93[v94];
              if ((v90[v94 + 23] & 0x80000000) == 0)
                break;
              std::string::__init_copy_ctor_external(v96, *(const std::string::value_type **)v95, *((_QWORD *)v95 + 1));
              v94 += 24;
              if (&v90[v94] == v91)
                goto LABEL_129;
            }
            v97 = *(_OWORD *)v95;
            v96->__r_.__value_.__r.__words[2] = *((_QWORD *)v95 + 2);
            *(_OWORD *)&v96->__r_.__value_.__l.__data_ = v97;
            v94 += 24;
          }
          while (&v90[v94] != v91);
LABEL_129:
          webrtc::SdpOfferAnswerHandler::SetAssociatedRemoteStreams(v317, &v332, (uint64_t)v93, (uint64_t)&v93[24 * (v94 / 24)], (uint64_t)&v329, (uint64_t)&v333);
          v10 = v319;
          if (v94)
          {
            v98 = 24 * (v94 / 24);
            do
            {
              if (v93[v98 - 1] < 0)
                operator delete(*(void **)&v93[v98 - 24]);
              v98 -= 24;
            }
            while (v98);
          }
          operator delete(v93);
          if (v89)
LABEL_135:
            (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
        }
        v100 = v329.__r_.__value_.__l.__size_;
        v99 = (void *)v329.__r_.__value_.__r.__words[0];
        std::vector<webrtc::scoped_refptr<webrtc::MediaStreamInterface>>::__insert_with_size[abi:sn180100]<std::__wrap_iter<webrtc::scoped_refptr<webrtc::MediaStreamInterface>*>,std::__wrap_iter<webrtc::scoped_refptr<webrtc::MediaStreamInterface>*>>(&v351, v352, v329.__r_.__value_.__l.__data_, (void (****)(_QWORD))v329.__r_.__value_.__l.__size_, (uint64_t)(v329.__r_.__value_.__l.__size_ - v329.__r_.__value_.__r.__words[0]) >> 3);
        v101 = (uint64_t *)v333;
        v102 = v334;
        std::vector<webrtc::scoped_refptr<webrtc::MediaStreamInterface>>::__insert_with_size[abi:sn180100]<std::__wrap_iter<webrtc::scoped_refptr<webrtc::MediaStreamInterface>*>,std::__wrap_iter<webrtc::scoped_refptr<webrtc::MediaStreamInterface>*>>(&v348, v349, v333, (void (****)(_QWORD))v334, (v334 - v333) >> 3);
        if (!(v347[0] | v347[1]))
        {
          if (v101)
          {
            while (v102 != (char *)v101)
            {
              v114 = *((_QWORD *)v102 - 1);
              v102 -= 8;
              v113 = v114;
              if (v114)
                (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
            }
            operator delete(v101);
            v11 = v320;
            if (!v99)
              goto LABEL_168;
          }
          else
          {
            v11 = v320;
            if (!v99)
            {
LABEL_168:
              v4 = v317;
              goto LABEL_287;
            }
          }
          while ((void *)v100 != v99)
          {
            v116 = *(_QWORD *)(v100 - 8);
            v100 -= 8;
            v115 = v116;
            if (v116)
              (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
          }
          operator delete(v99);
          goto LABEL_168;
        }
        if (v101)
        {
          while (v102 != (char *)v101)
          {
            v104 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            v103 = v104;
            if (v104)
              (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
          }
          operator delete(v101);
          v11 = v320;
          if (v99)
            goto LABEL_147;
        }
        else
        {
          v11 = v320;
          if (!v99)
            goto LABEL_149;
LABEL_147:
          while ((void *)v100 != v99)
          {
            v106 = *(_QWORD *)(v100 - 8);
            v100 -= 8;
            v105 = v106;
            if (v106)
              (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
          }
          operator delete(v99);
        }
LABEL_149:
        v4 = v317;
LABEL_150:
        webrtc::RtpTransceiver::ClearChannel((_QWORD *)v11[2]);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) == 3)
        {
          (*(void (**)(std::string *__return_ptr, _QWORD *))(*v11 + 56))(&v329, v11);
          if (v329.__r_.__value_.__r.__words[0])
          {
            (*(void (**)(std::string::size_type))(*(_QWORD *)v329.__r_.__value_.__l.__data_ + 8))(v329.__r_.__value_.__r.__words[0]);
            (*(void (**)(std::string *__return_ptr, _QWORD *))(*v11 + 56))(&v329, v11);
            if ((unint64_t)v314 < v312)
            {
              if (!v314)
                goto LABEL_487;
              v111 = v329.__r_.__value_.__r.__words[0];
              v329.__r_.__value_.__r.__words[0] = 0;
              *(_QWORD *)v314 = v111;
              v314 += 8;
              v112 = v329.__r_.__value_.__r.__words[0];
              if (!v329.__r_.__value_.__r.__words[0])
                goto LABEL_217;
LABEL_216:
              (*(void (**)(std::string::size_type))(*(_QWORD *)v112 + 8))(v112);
              goto LABEL_217;
            }
            v117 = v314 - __p;
            v118 = (v314 - __p) >> 3;
            v119 = v118 + 1;
            if ((unint64_t)(v118 + 1) >> 61)
              goto LABEL_488;
            if ((uint64_t)(v312 - (_QWORD)__p) >> 2 > v119)
              v119 = (uint64_t)(v312 - (_QWORD)__p) >> 2;
            if (v312 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
              v119 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v119)
              goto LABEL_487;
            if (!(v119 >> 61))
            {
              v120 = 8 * v119;
              v121 = (char *)operator new(8 * v119);
              v122 = v121;
              v123 = (std::string::size_type *)&v121[8 * v118];
              v124 = v329.__r_.__value_.__r.__words[0];
              v329.__r_.__value_.__r.__words[0] = 0;
              *v123 = v124;
              v125 = (char *)(v123 + 1);
              v126 = v314 - __p;
              if (v314 == __p)
              {
                v156 = __p;
              }
              else
              {
                v127 = v126 - 8;
                if ((unint64_t)(v126 - 8) < 0x138
                  || (v128 = v314 - 8 - __p, &v314[-(v128 & 0xFFFFFFFFFFFFFFF8) - 8] > v314 - 8)
                  || &v121[v117 - 8 - (v128 & 0xFFFFFFFFFFFFFFF8)] > &v121[v117 - 8])
                {
                  v131 = v314;
                  v130 = __p;
                }
                else
                {
                  v129 = v128 & 0xFFFFFFFFFFFFFFF8;
                  v130 = __p;
                  if (&v314[-v129 - 8] >= (char *)v123 || (v131 = v314, &v121[v117 - v129 - 8] >= v314))
                  {
                    v132 = (v127 >> 3) + 1;
                    v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
                    v131 = &v314[-v133];
                    v123 = (std::string::size_type *)((char *)v123 - v133);
                    v134 = &v121[8 * v118 - 16];
                    v135 = v314 - 16;
                    v136 = v132 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v138 = *((_OWORD *)v135 - 1);
                      v137 = *(_OWORD *)v135;
                      *((_OWORD *)v135 - 1) = 0uLL;
                      *(_OWORD *)v135 = 0uLL;
                      *((_OWORD *)v134 - 1) = v138;
                      *(_OWORD *)v134 = v137;
                      v134 -= 32;
                      v135 -= 32;
                      v136 -= 4;
                    }
                    while (v136);
                    v130 = __p;
                    if (v132 == (v132 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_208;
                  }
                }
                do
                {
                  v155 = *((_QWORD *)v131 - 1);
                  v131 -= 8;
                  *(_QWORD *)v131 = 0;
                  *--v123 = v155;
                }
                while (v131 != v130);
LABEL_208:
                v156 = v130;
                v157 = v314;
                do
                {
                  v159 = *((_QWORD *)v157 - 1);
                  v157 -= 8;
                  v158 = v159;
                  if (v159)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
                    v156 = __p;
                  }
                }
                while (v157 != v156);
              }
              v312 = (unint64_t)&v122[v120];
              if (v156)
                operator delete(v156);
              __p = (char *)v123;
              v314 = v125;
              v4 = v317;
              v10 = v319;
              v112 = v329.__r_.__value_.__r.__words[0];
              if (!v329.__r_.__value_.__r.__words[0])
                goto LABEL_217;
              goto LABEL_216;
            }
LABEL_492:
            std::__throw_bad_array_new_length[abi:sn180100]();
          }
        }
LABEL_217:
        if (!v347[1])
        {
LABEL_220:
          if (!v346)
            goto LABEL_265;
LABEL_221:
          v161 = v343;
          v162 = v344;
          v163 = v344 - (_BYTE *)v343;
          if (v344 != v343)
          {
            if (0xF0F0F0F0F0F0F0F1 * (v163 >> 4) > 0xF0F0F0F0F0F0F0)
              goto LABEL_488;
            v164 = operator new(v163);
            v165 = 0;
            do
            {
              v166 = &v161[v165];
              v167 = &v164[v165];
              *(_OWORD *)v167 = *(_OWORD *)&v161[v165];
              v168 = *(_OWORD *)&v161[v165 + 16];
              v169 = *(_OWORD *)&v161[v165 + 32];
              v170 = *(_OWORD *)&v161[v165 + 48];
              *(_OWORD *)(v167 + 57) = *(_OWORD *)&v161[v165 + 57];
              *((_OWORD *)v167 + 2) = v169;
              *((_OWORD *)v167 + 3) = v170;
              *((_OWORD *)v167 + 1) = v168;
              v164[v165 + 80] = 0;
              v171 = (std::string *)&v164[v165 + 80];
              v167[104] = 0;
              if (v161[v165 + 104])
              {
                v172 = (const std::string::value_type **)(v166 + 80);
                if (v166[103] < 0)
                {
                  std::string::__init_copy_ctor_external(v171, *v172, *(_QWORD *)&v161[v165 + 88]);
                }
                else
                {
                  v173 = *(_OWORD *)v172;
                  *(_QWORD *)&v164[v165 + 96] = *((_QWORD *)v166 + 12);
                  *(_OWORD *)&v171->__r_.__value_.__l.__data_ = v173;
                }
                v167[104] = 1;
              }
              v174 = *((_QWORD *)v166 + 14);
              *(_QWORD *)(v167 + 117) = *(_QWORD *)(v166 + 117);
              *((_QWORD *)v167 + 14) = v174;
              v175 = (std::string *)(v167 + 128);
              v176 = (const std::string::value_type **)(v166 + 128);
              if (v166[151] < 0)
              {
                std::string::__init_copy_ctor_external(v175, *v176, *(_QWORD *)&v161[v165 + 136]);
              }
              else
              {
                v177 = *(_OWORD *)v176;
                *((_QWORD *)v167 + 18) = *((_QWORD *)v166 + 18);
                *(_OWORD *)&v175->__r_.__value_.__l.__data_ = v177;
              }
              v178 = &v164[v165];
              *((_WORD *)v178 + 76) = *((_WORD *)v166 + 76);
              v164[v165 + 160] = 0;
              v178[264] = 0;
              if (v166[264])
              {
                webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v164[v165 + 160], (const webrtc::RtpCodec *)&v161[v165 + 160]);
                v178[264] = 1;
              }
              v165 += 272;
            }
            while (v166 + 272 != v162);
            if (v165)
            {
              v179 = 272 * (v165 / 272);
              do
              {
                webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)&v164[v179 - 272]);
                v179 -= 272;
              }
              while (v179);
            }
            operator delete(v164);
          }
          v180 = *(_QWORD *)(v11[2] + 32);
          if (*(_QWORD *)(v11[2] + 40) - v180 == 8)
          {
            v181 = *(_QWORD *)(*(_QWORD *)v180 + 24);
            if (v181)
              (**(void (***)(uint64_t))v181)(v181);
            v329.__r_.__value_.__s.__data_[0] = 0;
            v330 = 0;
            if (v346)
            {
              memset(&v329, 0, sizeof(v329));
              v182 = v343;
              v183 = v344;
              v184 = v344 - (_BYTE *)v343;
              if (v344 != v343)
              {
                v185 = 0xF0F0F0F0F0F0F0F1 * (v184 >> 4);
                if (v185 > 0xF0F0F0F0F0F0F0)
                  goto LABEL_488;
                v186 = operator new(v184);
                v187 = 0;
                v329.__r_.__value_.__r.__words[0] = (std::string::size_type)v186;
                v329.__r_.__value_.__r.__words[2] = (std::string::size_type)&v186[272 * v185];
                do
                {
                  v188 = &v186[v187];
                  v189 = &v182[v187];
                  *(_OWORD *)v188 = *(_OWORD *)&v182[v187];
                  v190 = *(_OWORD *)&v182[v187 + 16];
                  v191 = *(_OWORD *)&v182[v187 + 32];
                  v192 = *(_OWORD *)&v182[v187 + 48];
                  *(_OWORD *)(v188 + 57) = *(_OWORD *)&v182[v187 + 57];
                  *((_OWORD *)v188 + 2) = v191;
                  *((_OWORD *)v188 + 3) = v192;
                  *((_OWORD *)v188 + 1) = v190;
                  v186[v187 + 80] = 0;
                  v193 = (std::string *)&v186[v187 + 80];
                  v188[104] = 0;
                  if (v182[v187 + 104])
                  {
                    v194 = (const std::string::value_type **)(v189 + 80);
                    if (v189[103] < 0)
                    {
                      std::string::__init_copy_ctor_external(v193, *v194, *(_QWORD *)&v182[v187 + 88]);
                    }
                    else
                    {
                      v195 = *(_OWORD *)v194;
                      *(_QWORD *)&v186[v187 + 96] = *((_QWORD *)v189 + 12);
                      *(_OWORD *)&v193->__r_.__value_.__l.__data_ = v195;
                    }
                    v188[104] = 1;
                  }
                  v196 = *((_QWORD *)v189 + 14);
                  *(_QWORD *)(v188 + 117) = *(_QWORD *)(v189 + 117);
                  *((_QWORD *)v188 + 14) = v196;
                  v197 = (std::string *)(v188 + 128);
                  v198 = (const std::string::value_type **)(v189 + 128);
                  if (v189[151] < 0)
                  {
                    std::string::__init_copy_ctor_external(v197, *v198, *(_QWORD *)&v182[v187 + 136]);
                  }
                  else
                  {
                    v199 = *(_OWORD *)v198;
                    *((_QWORD *)v188 + 18) = *((_QWORD *)v189 + 18);
                    *(_OWORD *)&v197->__r_.__value_.__l.__data_ = v199;
                  }
                  v200 = &v186[v187];
                  *((_WORD *)v200 + 76) = *((_WORD *)v189 + 76);
                  v186[v187 + 160] = 0;
                  v200[264] = 0;
                  if (v189[264])
                  {
                    webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v186[v187 + 160], (const webrtc::RtpCodec *)&v182[v187 + 160]);
                    v200[264] = 1;
                  }
                  v187 += 272;
                }
                while (v189 + 272 != v183);
                v329.__r_.__value_.__l.__size_ = (std::string::size_type)&v186[v187];
              }
              v330 = 1;
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v181 + 208))(v181, &v329);
              v10 = v319;
              if (v330)
              {
                v201 = v329.__r_.__value_.__r.__words[0];
                if (v329.__r_.__value_.__r.__words[0])
                {
                  v202 = v329.__r_.__value_.__l.__size_;
                  v203 = (void *)v329.__r_.__value_.__r.__words[0];
                  if (v329.__r_.__value_.__l.__size_ != v329.__r_.__value_.__r.__words[0])
                  {
                    do
                      webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v202 - 272));
                    while (v202 != v201);
                    v203 = (void *)v329.__r_.__value_.__r.__words[0];
                  }
                  v329.__r_.__value_.__l.__size_ = v201;
                  operator delete(v203);
                }
              }
              (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
              v4 = v317;
              goto LABEL_265;
            }
LABEL_489:
            std::__throw_bad_optional_access[abi:sn180100]();
LABEL_490:
            rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 483, "1u == receivers_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v5, v6, v7, v8, 1);
          }
LABEL_491:
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc", 476, "1u == senders_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v107, v108, v109, v110, 1);
          goto LABEL_492;
        }
        v160 = v11[2];
        if (*(_BYTE *)(v160 + 153))
        {
          *(_BYTE *)(v160 + 152) = 1;
          goto LABEL_220;
        }
        webrtc::RtpTransceiver::StopTransceiverProcedure(v160);
        if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 64))(*(_QWORD *)(v4 + 8)))
          v209 = (_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 64))(*(_QWORD *)(v4 + 8)) + 8);
        else
          v209 = 0;
        v331 = v11;
        (*(void (**)(_QWORD *))*v11)(v11);
        webrtc::TransceiverList::Remove(v209, &v331);
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
        if (v346)
          goto LABEL_221;
LABEL_265:
        v204 = *(_QWORD *)(v11[2] + 32);
        if (*(_QWORD *)(v11[2] + 40) - v204 != 8)
          goto LABEL_491;
        v205 = *(_QWORD *)(*(_QWORD *)v204 + 24);
        if (v205)
          (**(void (***)(uint64_t))v205)(v205);
        v328 = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v205 + 216))(v205, &v328);
        if (v328)
          (*(void (**)(uint64_t))(*(_QWORD *)v328 + 8))(v328);
        (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
        v206 = *(_QWORD *)(v11[2] + 56);
        if (*(_QWORD *)(v11[2] + 64) - v206 != 8)
          goto LABEL_490;
        v207 = *(_QWORD *)(*(_QWORD *)v206 + 32);
        if (v207)
          (**(void (***)(uint64_t))v207)(v207);
        v327 = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v207 + 192))(v207, &v327);
        if (v327)
          (*(void (**)(uint64_t))(*(_QWORD *)v327 + 8))(v327);
        (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
        if (v347[0])
        {
          v208 = v11[2];
          v329.__r_.__value_.__s.__data_[0] = 0;
          v330 = 0;
          if ((_BYTE)v337)
          {
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v329, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
            else
              v329 = __src;
            v330 = 1;
          }
          std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v208 + 104), &v329);
          if (v330 && SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v329.__r_.__value_.__l.__data_);
          v210 = v11[2];
          v211 = BYTE8(v338);
          *(_QWORD *)(v210 + 136) = v338;
          *(_BYTE *)(v210 + 144) = v211;
        }
LABEL_287:
        if (v346)
        {
          v212 = (char *)v343;
          if (v343)
          {
            v213 = v344;
            v214 = v343;
            if (v344 == v343)
            {
LABEL_304:
              v344 = v212;
              operator delete(v214);
              v10 = v319;
              goto LABEL_305;
            }
            if (!*(v213 - 8))
              goto LABEL_296;
            while (2)
            {
              *((_QWORD *)v213 - 14) = off_24C0BCBF0;
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v213 - 32), *((_QWORD *)v213 - 3));
              v215 = (void *)*((_QWORD *)v213 - 7);
              if (v215)
              {
                *((_QWORD *)v213 - 6) = v215;
                operator delete(v215);
              }
              if (*(v213 - 81) < 0)
              {
                operator delete(*((void **)v213 - 13));
                if (*(v213 - 121) < 0)
                  goto LABEL_300;
LABEL_297:
                if (*(v213 - 168))
                {
LABEL_301:
                  if (*(v213 - 169) < 0)
                    operator delete(*((void **)v213 - 24));
                }
              }
              else
              {
LABEL_296:
                if ((*(v213 - 121) & 0x80000000) == 0)
                  goto LABEL_297;
LABEL_300:
                operator delete(*((void **)v213 - 18));
                if (*(v213 - 168))
                  goto LABEL_301;
              }
              v213 -= 272;
              if (v213 == v212)
              {
                v214 = v343;
                goto LABEL_304;
              }
              continue;
            }
          }
        }
LABEL_305:
        if (v342)
        {
          v216 = (void **)v339;
          if (v339)
          {
            v217 = (void **)v340;
            v218 = v339;
            if (v340 != v339)
            {
              do
              {
                if (*((char *)v217 - 1) < 0)
                  operator delete(*(v217 - 3));
                v217 -= 3;
              }
              while (v217 != v216);
              v218 = v339;
            }
            v340 = (char *)v216;
            operator delete(v218);
            v10 = v319;
          }
        }
        if ((_BYTE)v337 && SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__src.__r_.__value_.__l.__data_);
        if (v11)
          (*(void (**)(_QWORD *))(*v11 + 8))(v11);
        v219 = (_QWORD *)v10[1];
        if (v219)
        {
          do
          {
            v220 = v219;
            v219 = (_QWORD *)*v219;
          }
          while (v219);
        }
        else
        {
          do
          {
            v220 = (_QWORD *)v10[2];
            v59 = *v220 == (_QWORD)v10;
            v10 = v220;
          }
          while (!v59);
        }
        v10 = v220;
        if (v220 == (_QWORD *)v313)
          goto LABEL_347;
      }
    }
  }
  else
  {
    v309 = a3;
    v10 = (_QWORD *)MEMORY[0x18];
    v313 = 32;
    if (MEMORY[0x18] != 32)
      goto LABEL_4;
  }
  v314 = 0;
  v315 = 0;
  __p = 0;
  v316 = 0;
LABEL_347:
  v240 = (webrtc::JsepTransportController *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 104))(*(_QWORD *)(v4 + 8));
  webrtc::JsepTransportController::RollbackTransports((uint64_t *)&__src, v240);
  if (LODWORD(__src.__r_.__value_.__l.__data_))
  {
    *(_DWORD *)a1 = __src.__r_.__value_.__l.__data_;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&__src.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a1 + 24) = v337;
    *(_DWORD *)(a1 + 32) = v338;
    *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)&v338 + 3);
    v241 = v315;
  }
  else
  {
    v242 = v315;
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 64))(*(_QWORD *)(v4 + 8)))
      v243 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 64))(*(_QWORD *)(v4 + 8)) + 8;
    else
      v243 = 0;
    v245 = *(_QWORD **)(v243 + 32);
    v244 = (_QWORD *)(v243 + 32);
    std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>,std::less<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>,webrtc::TransceiverStableState>>>::destroy((uint64_t)(v244 - 1), v245);
    *(v244 - 1) = v244;
    *v244 = 0;
    v244[1] = 0;
    v246 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0;
    if (v246)
      (*(void (**)(uint64_t))(*(_QWORD *)v246 + 8))(v246);
    v247 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)(v4 + 56) = 0;
    if (v247)
      (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
    webrtc::SdpOfferAnswerHandler::ChangeSignalingState(v4, 0);
    if (v316 != v315)
    {
      v248 = v316;
      do
      {
        v249 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 144))(*(_QWORD *)(v4 + 8));
        v250 = *(void (****)(_QWORD))v248;
        v326 = v250;
        if (v250)
          (**v250)(v250);
        (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v249 + 144))(v249, &v326);
        if (v326)
          (*v326)[1](v326);
        v251 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 144))(*(_QWORD *)(v4 + 8));
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v248 + 56))(&v325);
        (*(void (**)(char **__return_ptr))(**(_QWORD **)v248 + 56))(&v333);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v333 + 56))(&v329);
        (*(void (**)(uint64_t, uint64_t *, std::string *))(*(_QWORD *)v251 + 136))(v251, &v325, &v329);
        v252 = v329.__r_.__value_.__r.__words[0];
        if (v329.__r_.__value_.__r.__words[0])
        {
          v253 = v329.__r_.__value_.__l.__size_;
          v254 = (void *)v329.__r_.__value_.__r.__words[0];
          if (v329.__r_.__value_.__l.__size_ != v329.__r_.__value_.__r.__words[0])
          {
            do
            {
              v256 = *(_QWORD *)(v253 - 8);
              v253 -= 8;
              v255 = v256;
              if (v256)
                (*(void (**)(uint64_t))(*(_QWORD *)v255 + 8))(v255);
            }
            while (v253 != v252);
            v254 = (void *)v329.__r_.__value_.__r.__words[0];
          }
          v329.__r_.__value_.__l.__size_ = v252;
          operator delete(v254);
          v242 = v315;
        }
        if (v333)
          (*(void (**)(char *))(*(_QWORD *)v333 + 8))(v333);
        if (v325)
          (*(void (**)(uint64_t))(*(_QWORD *)v325 + 8))(v325);
        v248 += 8;
      }
      while (v248 != v242);
    }
    if (__p != v314)
    {
      v257 = __p;
      do
      {
        v258 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 144))(*(_QWORD *)(v4 + 8));
        v259 = *(void (****)(_QWORD))v257;
        v324 = v259;
        if (v259)
          (**v259)(v259);
        (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v258 + 152))(v258, &v324);
        if (v324)
          (*v324)[1](v324);
        v257 += 8;
      }
      while (v257 != v314);
    }
    v260 = v351;
    v261 = v352;
    while (v260 != (char *)v261)
    {
      v262 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 144))(*(_QWORD *)(v4 + 8));
      v263 = *(void (****)(_QWORD))v260;
      v323 = v263;
      if (v263)
        (**v263)(v263);
      (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v262 + 24))(v262, &v323);
      if (v323)
        (*v323)[1](v323);
      v260 += 8;
    }
    v264 = v348;
    v265 = v349;
    while (v264 != (char *)v265)
    {
      v266 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 144))(*(_QWORD *)(v4 + 8));
      v267 = *(void (****)(_QWORD))v264;
      v322 = v267;
      if (v267)
        (**v267)(v267);
      (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v266 + 32))(v266, &v322);
      if (v322)
        (*v322)[1](v322);
      v264 += 8;
    }
    if (v309 == 3)
    {
      webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded((webrtc::SdpOfferAnswerHandler *)v4);
      if (*(_BYTE *)(v4 + 209))
      {
        v268 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 144))(*(_QWORD *)(v4 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v268 + 48))(v268);
        ++*(_DWORD *)(v4 + 212);
        v269 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 144))(*(_QWORD *)(v4 + 8));
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v269 + 56))(v269, *(unsigned int *)(v4 + 212));
      }
    }
    *(_DWORD *)a1 = 0;
    *(_BYTE *)(a1 + 38) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 29) = 0;
    v241 = v315;
    if (SHIBYTE(v337) < 0)
      operator delete((void *)__src.__r_.__value_.__l.__size_);
  }
  v270 = __p;
  v271 = v314;
  if (__p)
  {
    while (v271 != v270)
    {
      v273 = *((_QWORD *)v271 - 1);
      v271 -= 8;
      v272 = v273;
      if (v273)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v272 + 8))(v272);
        v270 = __p;
      }
    }
    operator delete(v270);
  }
  v274 = v348;
  if (v348)
  {
    for (i = v349; (char *)i != v274; i -= 8)
    {
      v277 = *(_QWORD *)(i - 8);
      v276 = v277;
      if (v277)
        (*(void (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
    }
    operator delete(v274);
  }
  v278 = v351;
  if (v351)
  {
    for (j = v352; (char *)j != v278; j -= 8)
    {
      v281 = *(_QWORD *)(j - 8);
      v280 = v281;
      if (v281)
        (*(void (**)(uint64_t))(*(_QWORD *)v280 + 8))(v280);
    }
    operator delete(v278);
  }
  v282 = v316;
  if (v316)
  {
    while (v241 != v282)
    {
      v284 = *((_QWORD *)v241 - 1);
      v241 -= 8;
      v283 = v284;
      if (v284)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
        v282 = v316;
      }
    }
    v285 = v282;
LABEL_485:
    operator delete(v285);
  }
}

void webrtc::`anonymous namespace'::GetBundleGroupsByMid(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 *v5;
  __int128 *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t **v9;
  size_t v10;
  size_t v11;
  const std::string::value_type *v12;
  BOOL v13;
  char v14;
  const std::string::value_type *v15;
  size_t v16;
  const void **v17;
  size_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;
  const std::string::value_type *v23;
  size_t v24;
  size_t v25;
  int v26;
  _QWORD *v27;
  std::string *v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t **v47;
  __int128 *v48;
  uint64_t v49;
  _QWORD *v50;
  void *__p[2];
  char v52;
  void *v53;
  char *v54;

  v52 = 6;
  if (__p <= (void **)"BUNDLE" && (char *)__p + 6 > "BUNDLE")
  {
LABEL_87:
    __break(1u);
LABEL_88:
    v4 = (char *)v53;
  }
  else
  {
    strcpy((char *)__p, "BUNDLE");
    cricket::SessionDescription::GetGroupsByName(a2, (unsigned __int8 **)__p, (char **)&v53);
    if (v52 < 0)
      operator delete(__p[0]);
    a1[1] = 0;
    a1[2] = 0;
    v50 = a1 + 1;
    *a1 = a1 + 1;
    v4 = (char *)v53;
    v45 = v54;
    if (v53 != v54)
    {
      v47 = (uint64_t **)a1;
      while (1)
      {
        v46 = v4;
        v49 = *(_QWORD *)v4;
        v6 = *(__int128 **)(*(_QWORD *)v4 + 24);
        v5 = *(__int128 **)(*(_QWORD *)v4 + 32);
        v48 = v5;
        while (v6 != v5)
        {
          v7 = v50;
          v8 = *v50;
          v9 = (uint64_t **)v50;
          if (*v50)
          {
            v10 = *((unsigned __int8 *)v6 + 23);
            v12 = *(const std::string::value_type **)v6;
            v11 = *((_QWORD *)v6 + 1);
            if (v11)
              v13 = v12 == 0;
            else
              v13 = 0;
            v14 = !v13;
            while (1)
            {
              v7 = (_QWORD *)v8;
              v15 = (const std::string::value_type *)v6;
              v16 = v10;
              if ((v10 & 0x80) != 0)
              {
                if ((v11 & 0x8000000000000000) != 0)
                  goto LABEL_87;
                v15 = v12;
                v16 = v11;
                if ((v14 & 1) == 0)
                  goto LABEL_87;
              }
              v17 = (const void **)(v8 + 32);
              v18 = *(unsigned __int8 *)(v8 + 55);
              v19 = (const void *)(v8 + 32);
              v20 = v18;
              if (*(char *)(v8 + 55) < 0)
              {
                v20 = *(_QWORD *)(v8 + 40);
                if ((v20 & 0x8000000000000000) != 0)
                  goto LABEL_87;
                v19 = *v17;
                if (v20)
                {
                  if (!v19)
                    goto LABEL_87;
                }
              }
              if (v20 >= v16)
                v21 = v16;
              else
                v21 = v20;
              v22 = memcmp(v15, v19, v21);
              if (v22)
              {
                if (v22 < 0)
                  goto LABEL_24;
LABEL_39:
                if ((v18 & 0x80) != 0)
                {
                  v18 = v7[5];
                  if ((v18 & 0x8000000000000000) != 0)
                    goto LABEL_87;
                  v17 = (const void **)*v17;
                  if (v18)
                  {
                    if (!v17)
                      goto LABEL_87;
                  }
                }
                v23 = (const std::string::value_type *)v6;
                v24 = v10;
                if ((v10 & 0x80) != 0)
                {
                  if ((v11 & 0x8000000000000000) != 0)
                    goto LABEL_87;
                  v23 = v12;
                  v24 = v11;
                  if ((v14 & 1) == 0)
                    goto LABEL_87;
                }
                if (v24 >= v18)
                  v25 = v18;
                else
                  v25 = v24;
                v26 = memcmp(v17, v23, v25);
                if (v26)
                {
                  if ((v26 & 0x80000000) == 0)
                    goto LABEL_77;
                }
                else if (v18 >= v24)
                {
LABEL_77:
                  v27 = v7;
                  goto LABEL_15;
                }
                v8 = v7[1];
                if (!v8)
                {
                  v9 = (uint64_t **)(v7 + 1);
                  break;
                }
              }
              else
              {
                if (v16 >= v20)
                  goto LABEL_39;
LABEL_24:
                v8 = *v7;
                v9 = (uint64_t **)v7;
                if (!*v7)
                  break;
              }
            }
          }
          v27 = operator new(0x40uLL);
          v28 = (std::string *)(v27 + 4);
          if (*((char *)v6 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
          }
          else
          {
            v29 = *v6;
            v27[6] = *((_QWORD *)v6 + 2);
            *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
          }
          v27[7] = 0;
          *v27 = 0;
          v27[1] = 0;
          v27[2] = v7;
          *v9 = v27;
          v30 = (uint64_t *)**v47;
          v31 = v27;
          if (v30)
          {
            *v47 = v30;
            v31 = *v9;
          }
          v32 = (uint64_t *)*v50;
          v13 = v31 == (uint64_t *)*v50;
          *((_BYTE *)v31 + 24) = v13;
          if (!v13)
          {
            do
            {
              v33 = v31[2];
              if (*(_BYTE *)(v33 + 24))
                break;
              v34 = *(uint64_t **)(v33 + 16);
              v35 = *v34;
              if (*v34 == v33)
              {
                v38 = v34[1];
                if (!v38 || (v39 = *(unsigned __int8 *)(v38 + 24), v36 = (_BYTE *)(v38 + 24), v39))
                {
                  if (*(uint64_t **)v33 == v31)
                  {
                    *(_BYTE *)(v33 + 24) = 1;
                    *((_BYTE *)v34 + 24) = 0;
                    v42 = *(_QWORD *)(v33 + 8);
                    *v34 = v42;
                    if (v42)
                      goto LABEL_75;
                  }
                  else
                  {
                    v40 = *(uint64_t **)(v33 + 8);
                    v41 = *v40;
                    *(_QWORD *)(v33 + 8) = *v40;
                    if (v41)
                    {
                      *(_QWORD *)(v41 + 16) = v33;
                      v34 = *(uint64_t **)(v33 + 16);
                    }
                    v40[2] = (uint64_t)v34;
                    *(_QWORD *)(*(_QWORD *)(v33 + 16) + 8 * (**(_QWORD **)(v33 + 16) != v33)) = v40;
                    *v40 = v33;
                    *(_QWORD *)(v33 + 16) = v40;
                    v34 = (uint64_t *)v40[2];
                    v33 = *v34;
                    *((_BYTE *)v40 + 24) = 1;
                    *((_BYTE *)v34 + 24) = 0;
                    v42 = *(_QWORD *)(v33 + 8);
                    *v34 = v42;
                    if (v42)
LABEL_75:
                      *(_QWORD *)(v42 + 16) = v34;
                  }
                  *(_QWORD *)(v33 + 16) = v34[2];
                  *(_QWORD *)(v34[2] + 8 * (*(_QWORD *)v34[2] != (_QWORD)v34)) = v33;
                  *(_QWORD *)(v33 + 8) = v34;
LABEL_13:
                  v34[2] = v33;
                  break;
                }
              }
              else if (!v35 || (v37 = *(unsigned __int8 *)(v35 + 24), v36 = (_BYTE *)(v35 + 24), v37))
              {
                if (*(uint64_t **)v33 == v31)
                {
                  v44 = v31[1];
                  *(_QWORD *)v33 = v44;
                  if (v44)
                  {
                    *(_QWORD *)(v44 + 16) = v33;
                    v34 = *(uint64_t **)(v33 + 16);
                  }
                  v31[2] = (uint64_t)v34;
                  *(_QWORD *)(*(_QWORD *)(v33 + 16) + 8 * (**(_QWORD **)(v33 + 16) != v33)) = v31;
                  v31[1] = v33;
                  *(_QWORD *)(v33 + 16) = v31;
                  v34 = (uint64_t *)v31[2];
                  *((_BYTE *)v31 + 24) = 1;
                  *((_BYTE *)v34 + 24) = 0;
                  v33 = v34[1];
                  v43 = *(uint64_t **)v33;
                  v34[1] = *(_QWORD *)v33;
                  if (!v43)
                    goto LABEL_12;
                }
                else
                {
                  *(_BYTE *)(v33 + 24) = 1;
                  *((_BYTE *)v34 + 24) = 0;
                  v33 = v34[1];
                  v43 = *(uint64_t **)v33;
                  v34[1] = *(_QWORD *)v33;
                  if (!v43)
                    goto LABEL_12;
                }
                v43[2] = (uint64_t)v34;
LABEL_12:
                *(_QWORD *)(v33 + 16) = v34[2];
                *(_QWORD *)(v34[2] + 8 * (*(_QWORD *)v34[2] != (_QWORD)v34)) = v33;
                *(_QWORD *)v33 = v34;
                goto LABEL_13;
              }
              *(_BYTE *)(v33 + 24) = 1;
              v31 = v34;
              *((_BYTE *)v34 + 24) = v34 == v32;
              *v36 = 1;
            }
            while (v34 != v32);
          }
          v47[2] = (uint64_t *)((char *)v47[2] + 1);
LABEL_15:
          v27[7] = v49;
          v6 = (__int128 *)((char *)v6 + 24);
          v5 = v48;
        }
        v4 = v46 + 8;
        if (v46 + 8 == v45)
          goto LABEL_88;
      }
    }
  }
  if (v4)
  {
    v54 = v4;
    operator delete(v4);
  }
}

void webrtc::SdpOfferAnswerHandler::ValidateSessionDescription(uint64_t a1, std::string::size_type a2, size_t a3, size_t a4, uint64_t a5)
{
  size_t n;
  size_t p_src;
  std::string::size_type v7;
  int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  BOOL v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  uint64_t v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  size_t v67;
  char *v68;
  std::string::size_type v69;
  std::string::size_type size;
  char *v71;
  std::string::size_type v72;
  char *v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  size_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  char *v89;
  uint64_t v91;
  std::string::size_type v92;
  _BYTE *v93;
  _WORD *v94;
  std::string::size_type v95;
  uint64_t *v96;
  uint64_t *v97;
  std::string::size_type v98;
  unsigned __int8 *v99;
  _QWORD *v100;
  size_t v101;
  size_t v103;
  int v104;
  uint64_t v105;
  unsigned __int8 **v106;
  std::string::size_type v107;
  unsigned __int8 *v108;
  int v109;
  unsigned __int8 *v110;
  uint64_t i;
  unsigned __int8 *v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  unsigned __int8 **v128;
  unsigned __int8 *v129;
  unsigned __int8 **v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  std::string::size_type v134;
  unsigned __int8 *v135;
  _QWORD *v136;
  size_t v137;
  size_t v139;
  int v140;
  uint64_t v141;
  unsigned __int8 **v142;
  std::string::size_type v143;
  unsigned __int8 *v144;
  int v145;
  unsigned __int8 *v146;
  uint64_t j;
  unsigned __int8 *v148;
  unsigned __int8 v149;
  uint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v164;
  _QWORD *v165;
  std::string::size_type v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  const std::string::value_type *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  int v180;
  char **v181;
  char *v182;
  char **v183;
  int v184;
  char **v185;
  _DWORD *v186;
  uint64_t v187;
  _DWORD *v188;
  char *v189;
  int data;
  char **v191;
  char **v192;
  int v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  _BYTE *v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t *v203;
  uint64_t v204;
  int v205;
  std::string::size_type v206;
  std::string *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  _BYTE *v212;
  std::string *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  std::string::size_type v219;
  std::string::size_type v220;
  std::string::size_type v221;
  std::string::size_type v222;
  std::string *v223;
  char *v224;
  std::string::size_type v225;
  uint64_t v226;
  int v227;
  std::string::size_type v228;
  std::string *v229;
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  std::string *v233;
  std::string::size_type v234;
  std::string::size_type v235;
  std::string::size_type v236;
  std::string::size_type v237;
  std::string *v238;
  char *v239;
  std::string::size_type v240;
  char v241;
  std::string *v242;
  size_t v243;
  std::string *v244;
  uint64_t v245;
  uint64_t v246;
  std::string *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  size_t v262;
  unint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v277;
  char *v278;
  std::string::size_type v280;
  std::string::size_type v281;
  std::string::size_type v282;
  std::string *v283;
  char *v284;
  std::string::size_type v285;
  int v286;
  size_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char *v292;
  std::string::size_type v294;
  std::string::size_type v295;
  std::string *v296;
  _WORD *v297;
  std::string::size_type v298;
  std::string *v299;
  size_t v300;
  std::string *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  int v312;
  size_t v313;
  unint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  char *v320;
  std::string::size_type v322;
  size_t v323;
  std::string *v324;
  size_t v325;
  unint64_t v326;
  std::string *v327;
  char *v328;
  size_t v329;
  std::string *v330;
  _BYTE *v331;
  unint64_t v332;
  uint64_t v333;
  std::string *v334;
  std::string::size_type v335;
  char *v336;
  std::string *v337;
  size_t v338;
  uint64_t v339;
  uint64_t v340;
  std::string *v341;
  uint64_t v342;
  _QWORD *v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  uint64_t v349;
  unsigned __int8 *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char **v354;
  _QWORD *v355;
  uint64_t v356;
  __int128 v357;
  int v358;
  char *v359;
  int v360;
  char **v361;
  char *v362;
  char *v363;
  char **v364;
  int v365;
  char **v366;
  _DWORD *v367;
  char **v368;
  int v369;
  char *v370;
  std::string *v371;
  char *v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  _BYTE *v376;
  int v377;
  uint64_t v378;
  int v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  std::string::size_type v383;
  uint64_t v384;
  int v385;
  _QWORD *v386;
  uint64_t v387;
  unsigned __int8 *v388;
  _QWORD *v389;
  unsigned __int8 *v390;
  std::string *v391;
  uint64_t v392;
  char *v393;
  unsigned __int8 *v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  std::string::size_type v401;
  std::string *v402;
  uint64_t v403;
  uint64_t v404;
  _BYTE *v405;
  std::string::size_type v407;
  size_t v408;
  std::string::size_type v409;
  unint64_t v410;
  std::string *v411;
  size_t v412;
  unint64_t v413;
  std::string *v414;
  BOOL v415;
  uint64_t v416;
  char *v417;
  std::string *v418;
  uint64_t v419;
  size_t v420;
  char *v421;
  unint64_t v422;
  uint64_t v423;
  char *v424;
  std::string *v425;
  int64_t v426;
  uint64_t v427;
  std::string::size_type v428;
  std::string *v429;
  char *v430;
  std::string::size_type v431;
  int v432;
  std::string::size_type v433;
  std::string *v434;
  uint64_t v435;
  uint64_t v436;
  _BYTE *v437;
  std::string::size_type v439;
  size_t v440;
  std::string::size_type v441;
  unint64_t v442;
  std::string *v443;
  size_t v444;
  unint64_t v445;
  std::string *v446;
  BOOL v447;
  uint64_t v448;
  char *v449;
  std::string *v450;
  size_t v451;
  char *v452;
  unint64_t v453;
  uint64_t v454;
  char *v455;
  std::string *v456;
  int64_t v457;
  unint64_t v458;
  size_t v459;
  unint64_t v460;
  std::string *v461;
  size_t v462;
  unint64_t v463;
  std::string *v464;
  char *v465;
  size_t v466;
  _BYTE *v467;
  unint64_t v468;
  uint64_t v469;
  std::string *v470;
  std::string::size_type v471;
  char *v472;
  char v473;
  std::string *v474;
  size_t v475;
  std::string *v476;
  uint64_t v477;
  uint64_t v478;
  std::string *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  size_t v485;
  unint64_t v486;
  char *v487;
  uint64_t v488;
  uint64_t v489;
  char *v490;
  char *v492;
  std::string::size_type v494;
  std::string::size_type v495;
  std::string::size_type v496;
  std::string *v497;
  char *v498;
  std::string::size_type v499;
  size_t v500;
  unint64_t v501;
  char *v502;
  uint64_t v503;
  uint64_t v504;
  char *v505;
  char *v507;
  std::string::size_type v509;
  size_t v510;
  std::string *v511;
  size_t v512;
  unint64_t v513;
  std::string *v514;
  char *v515;
  size_t v516;
  std::string *v517;
  _BYTE *v518;
  unint64_t v519;
  uint64_t v520;
  std::string *v521;
  std::string::size_type v522;
  char *v523;
  std::string *v524;
  size_t v525;
  uint64_t v526;
  uint64_t v527;
  std::string *v528;
  int v529;
  void (**v530)(webrtc::RtpCodec *__hidden);
  __int128 **v531;
  __int128 *v532;
  __int128 *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  const std::string::value_type *v538;
  uint64_t v539;
  int v541;
  int v542;
  BOOL v543;
  const std::string::value_type *v544;
  uint64_t v545;
  int v546;
  int v547;
  BOOL v548;
  const std::string::value_type *v549;
  int v550;
  int v551;
  BOOL v552;
  __int128 v553;
  std::string *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  std::string::size_type v559;
  std::string::size_type v560;
  std::string::size_type v561;
  std::string::size_type v562;
  std::string *v563;
  char *v564;
  std::string::size_type v565;
  std::string::size_type v566;
  BOOL v567;
  const std::string::value_type *v568;
  std::string::size_type v569;
  std::string::size_type v570;
  std::string *v571;
  char *v572;
  std::string::size_type v573;
  std::string::size_type v574;
  std::string::size_type v575;
  std::string::size_type v576;
  std::string *v577;
  char *v578;
  std::string::size_type v579;
  __int128 v580;
  std::string::size_type v581;
  size_t v582;
  std::string::size_type v583;
  unint64_t v584;
  std::string *v585;
  size_t v586;
  unint64_t v587;
  std::string *v588;
  char *v589;
  BOOL v590;
  uint64_t v591;
  std::string *v592;
  size_t v593;
  char *v594;
  unint64_t v595;
  uint64_t v596;
  char *v597;
  std::string *v598;
  std::string::size_type v599;
  std::string::size_type v600;
  std::string::size_type v601;
  std::string *v602;
  char *v603;
  std::string::size_type v604;
  size_t v605;
  BOOL v606;
  const std::string::value_type *v607;
  std::string::size_type v608;
  std::string::size_type v609;
  char *v610;
  std::string::size_type v611;
  int64_t v612;
  std::string::size_type v613;
  std::string::size_type v614;
  std::string *v615;
  char *v616;
  std::string::size_type v617;
  std::string *v618;
  size_t v619;
  std::string *v620;
  uint64_t v621;
  uint64_t v622;
  std::string *v623;
  uint64_t v624;
  uint64_t v625;
  const cricket::SessionDescription **v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  _QWORD *v630;
  _QWORD *v631;
  uint64_t *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  _QWORD *v652;
  uint64_t v653;
  uint64_t *v654;
  uint64_t *v655;
  uint64_t v656;
  uint64_t v657;
  _QWORD *v658;
  const cricket::SessionDescription **v659;
  int v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  std::string::size_type v675;
  _QWORD *v676;
  std::string::size_type v677;
  _QWORD *v678;
  _QWORD *v679;
  _QWORD *v680;
  uint64_t k;
  uint64_t v682;
  void (**v683)(webrtc::RtpCodec *__hidden);
  int v684;
  uint64_t m;
  int v686;
  std::string *v687;
  int v688;
  uint64_t *v689;
  _QWORD *v690;
  int v691[2];
  std::string v692;
  _BYTE v693[15];
  _BYTE v694[39];
  std::string v695;
  _BYTE v696[15];
  void *__p;
  void *v698;
  uint64_t v699[3];
  int v700;
  char **v701;
  char *v702;
  uint64_t v703;
  const char *v704;
  uint64_t v705;
  std::string v706;
  std::string v707;
  std::string v708;
  std::string __src;
  _BYTE v710[15];
  char v711;
  void *v712;
  void *v713;
  uint64_t v714[3];
  int v715;
  uint64_t v716;

  v716 = *MEMORY[0x24BDAC8D0];
  if (!a3 || (n = a4, p_src = a3, v7 = a2, !(*(uint64_t (**)(size_t))(*(_QWORD *)a3 + 32))(a3)))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
      __src.__r_.__value_.__l.__size_ = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    }
    *(_DWORD *)a1 = 3;
    v30 = (char *)operator new(0x20uLL);
    *(_QWORD *)(a1 + 8) = v30;
    *(_OWORD *)(a1 + 16) = xmmword_208F05180;
    if (v30 <= "Invalid session description." && v30 + 28 > "Invalid session description.")
      goto LABEL_1391;
    strcpy(v30, "Invalid session description.");
    *(_DWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 36) = 0;
    *(_BYTE *)(a1 + 38) = 0;
    return;
  }
  *(_QWORD *)v691 = a5;
  v10 = (*(uint64_t (**)(size_t))(*(_QWORD *)p_src + 56))(p_src);
  v11 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v7 + 16))(v7);
  v690 = (_QWORD *)v7;
  if ((_DWORD)n)
  {
    if (v10)
      v12 = 4;
    else
      v12 = 3;
    v13 = v11 == (v10 != 0) || v11 == v12;
    if (!v13)
    {
LABEL_33:
      n = (size_t)"Called in wrong state: ";
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v32 = (char *)operator new(0x19uLL);
        v695.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
        *(_OWORD *)&v695.__r_.__value_.__r.__words[1] = xmmword_208F05110;
        if (v32 <= "Called in wrong state: " && v32 + 23 > "Called in wrong state: ")
          goto LABEL_1391;
        strcpy(v32, "Called in wrong state: ");
        v33 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v7 + 16))(v7);
        v39 = 0;
        v40 = "stable";
        p_src = 6;
        switch(v33)
        {
          case 0:
            break;
          case 1:
            v39 = 0;
            v40 = "have-local-offer";
            p_src = 16;
            break;
          case 2:
            v39 = 0;
            v40 = "have-local-pranswer";
            p_src = 19;
            break;
          case 3:
            v39 = 0;
            v40 = "have-remote-offer";
            p_src = 17;
            break;
          case 4:
            v39 = 0;
            v40 = "have-remote-pranswer";
            p_src = 20;
            break;
          case 5:
            v39 = 0;
            v40 = "closed";
            p_src = 6;
            break;
          default:
            p_src = 0;
            v40 = &byte_208EB9246;
            v39 = 1;
            break;
        }
        if ((v695.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = 22;
        else
          v69 = (v695.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v695.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v695.__r_.__value_.__r.__words[2]);
        else
          size = v695.__r_.__value_.__l.__size_;
        if (v69 - size >= p_src)
        {
          if ((v39 & 1) == 0)
          {
            if ((v695.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v7 = (std::string::size_type)&v695;
            else
              v7 = v695.__r_.__value_.__r.__words[0];
            v71 = (char *)(v7 + size);
            if (v7 + size <= (unint64_t)v40 && &v71[p_src] > v40)
              goto LABEL_1391;
            memcpy(v71, v40, p_src);
            v72 = size + p_src;
            if (SHIBYTE(v695.__r_.__value_.__r.__words[2]) < 0)
              v695.__r_.__value_.__l.__size_ = size + p_src;
            else
              *((_BYTE *)&v695.__r_.__value_.__s + 23) = v72 & 0x7F;
            *(_BYTE *)(v7 + v72) = 0;
            v7 = (std::string::size_type)v690;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&v695, v69, size + p_src - v69, size, size, 0, p_src, v40);
        }
        __src = v695;
        memset(&v695, 0, sizeof(v695));
        *(_QWORD *)v694 = "INVALID_STATE";
        *(_QWORD *)&v694[8] = 13;
        rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v69, v34, v35, v36, v37, v38, (uint64_t)v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__src.__r_.__value_.__l.__data_);
        if (SHIBYTE(v695.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v695.__r_.__value_.__l.__data_);
      }
      v73 = (char *)operator new(0x19uLL);
      p_src = (size_t)v73;
      *(_OWORD *)&v695.__r_.__value_.__l.__data_ = xmmword_208F05110;
      if (v73 <= "Called in wrong state: " && v73 + 23 > "Called in wrong state: ")
        goto LABEL_1391;
      strcpy(v73, "Called in wrong state: ");
      v74 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v7 + 16))(v7);
      if (v74 > 5)
      {
        v77 = (char *)p_src;
      }
      else
      {
        v75 = (int)v74;
        n = *(_QWORD *)((char *)&unk_208F1B338 + v75 * 8);
        v76 = off_24C0C08F8[v75];
        v77 = (char *)operator new(0x38uLL);
        v78 = v77 + 23;
        if (p_src >= (unint64_t)v77 && (unint64_t)v78 > p_src)
          goto LABEL_1391;
        *(_OWORD *)v77 = *(_OWORD *)p_src;
        *(_QWORD *)(v77 + 15) = *(_QWORD *)(p_src + 15);
        if (v78 <= v76 && &v78[n] > v76)
          goto LABEL_1391;
        memcpy(v78, v76, n);
        operator delete((void *)p_src);
        v695.__r_.__value_.__r.__words[0] = n + 23;
        v695.__r_.__value_.__l.__size_ = 0x8000000000000038;
        v77[n + 23] = 0;
      }
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
      *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = *(_OWORD *)&v695.__r_.__value_.__l.__data_;
      *(_OWORD *)&v695.__r_.__value_.__l.__data_ = 0uLL;
      v80 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        *(_DWORD *)a1 = 6;
        p_src = (size_t)&__src;
        n = v80;
        goto LABEL_103;
      }
      n = __src.__r_.__value_.__l.__size_;
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_1391;
      p_src = __src.__r_.__value_.__r.__words[0];
      if (__src.__r_.__value_.__l.__size_)
      {
        if (!__src.__r_.__value_.__r.__words[0])
          goto LABEL_1391;
      }
      *(_DWORD *)a1 = 6;
      if (n <= 0x7FFFFFFFFFFFFFF7)
      {
LABEL_103:
        if (n > 0x16)
        {
          v83 = (n & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((n | 7) != 0x17)
            v83 = n | 7;
          v84 = v83 + 1;
          v81 = (char *)operator new(v83 + 1);
          *(_QWORD *)(a1 + 16) = n;
          *(_QWORD *)(a1 + 24) = v84 | 0x8000000000000000;
          *(_QWORD *)(a1 + 8) = v81;
          v82 = &v81[n];
          if ((unint64_t)v81 > p_src)
            goto LABEL_110;
        }
        else
        {
          v81 = (char *)(a1 + 8);
          *(_BYTE *)(a1 + 31) = n;
          v82 = (char *)(a1 + 8 + n);
          if (a1 + 8 > p_src)
            goto LABEL_110;
        }
        if ((unint64_t)v82 > p_src)
          goto LABEL_1391;
LABEL_110:
        if (n)
          memmove(v81, (const void *)p_src, n);
        *v82 = 0;
        *(_DWORD *)(a1 + 32) = 0;
        *(_BYTE *)(a1 + 36) = 0;
        *(_BYTE *)(a1 + 38) = 0;
        if ((v80 & 0x80) != 0)
        {
          v85 = (void *)__src.__r_.__value_.__r.__words[0];
          goto LABEL_493;
        }
        return;
      }
LABEL_1425:
      abort();
    }
  }
  else
  {
    v31 = v11 < 2;
    if (v10)
      v31 = (v11 & 0xFFFFFFFE) == 2;
    if (!v31)
      goto LABEL_33;
  }
  v686 = n;
  v14 = (uint64_t *)(*(uint64_t (**)(size_t))(*(_QWORD *)p_src + 32))(p_src);
  v16 = *v14;
  v15 = v14[1];
  *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = 0uLL;
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src.__r_.__value_.__l.__size_;
  if (v16 == v15)
  {
LABEL_21:
    *(_DWORD *)v694 = 0;
    v694[38] = 0;
    memset(&v694[8], 0, 29);
    std::__tree<rtc::SocketAddress>::destroy((uint64_t)&__src, (char *)__src.__r_.__value_.__l.__size_);
    v21 = *(_DWORD *)v694;
    if (!*(_DWORD *)v694)
      goto LABEL_49;
    goto LABEL_22;
  }
  v17 = &v694[23];
  v18 = (char *)&v692.__r_.__value_.__r.__words[2] + 7;
  while (1)
  {
    if (*(char *)(v16 + 23) < 0)
    {
      v19 = *(_QWORD *)(v16 + 8);
      if (!v19)
      {
LABEL_38:
        n = (size_t)"A media section is missing a MID attribute.";
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          v695.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
          v695.__r_.__value_.__l.__size_ = 17;
          rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
        }
        *(_DWORD *)v694 = 3;
        v48 = (char *)operator new(0x30uLL);
        *(_QWORD *)&v694[8] = v48;
        *(_OWORD *)&v694[16] = xmmword_208F16E30;
        if (v48 <= "A media section is missing a MID attribute."
          && v48 + 43 > "A media section is missing a MID attribute.")
        {
          goto LABEL_1391;
        }
        strcpy(v48, "A media section is missing a MID attribute.");
        goto LABEL_48;
      }
    }
    else
    {
      v19 = *(unsigned __int8 *)(v16 + 23);
      if (!*(_BYTE *)(v16 + 23))
        goto LABEL_38;
    }
    if (v19 >= 0x11)
    {
      n = (size_t)"The MID attribute exceeds the maximum supported length of 16 characters.";
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v695.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
        v695.__r_.__value_.__l.__size_ = 17;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      }
      *(_DWORD *)v694 = 3;
      v56 = (char *)operator new(0x50uLL);
      *(_QWORD *)&v694[8] = v56;
      *(_OWORD *)&v694[16] = xmmword_208F0BC70;
      if (v56 <= "The MID attribute exceeds the maximum supported length of 16 characters."
        && v56 + 72 > "The MID attribute exceeds the maximum supported length of 16 characters.")
      {
        goto LABEL_1391;
      }
      strcpy(v56, "The MID attribute exceeds the maximum supported length of 16 characters.");
LABEL_48:
      *(_DWORD *)&v694[32] = 0;
      v694[36] = 0;
      v694[38] = 0;
      std::__tree<rtc::SocketAddress>::destroy((uint64_t)&__src, (char *)__src.__r_.__value_.__l.__size_);
      v21 = *(_DWORD *)v694;
      if (!*(_DWORD *)v694)
        goto LABEL_49;
      goto LABEL_22;
    }
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&__src, (const void **)v16, v16);
    if ((v20 & 1) == 0)
      break;
    v16 += 40;
    if (v16 == v15)
      goto LABEL_21;
  }
  v7 = (std::string::size_type)"Duplicate a=mid value '";
  v684 = v10;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    goto LABEL_530;
  v66 = *(char *)(v16 + 23);
  if (v66 >= 0)
    v67 = *(unsigned __int8 *)(v16 + 23);
  else
    v67 = *(_QWORD *)(v16 + 8);
  n = v67 + 23;
  if (v67 + 23 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_1425;
  if (v67 < 0xFFFFFFFFFFFFFFE9)
  {
    v86 = (n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((n | 7) != 0x17)
      v86 = n | 7;
    v87 = v86 + 1;
    v68 = (char *)operator new(v86 + 1);
    *(_QWORD *)&v694[8] = v67 + 23;
    *(_QWORD *)&v694[16] = v87 | 0x8000000000000000;
    v17 = v68 + 23;
    *(_QWORD *)v694 = v68;
  }
  else
  {
    memset(v694, 0, 24);
    v68 = v694;
    v694[23] = v67 + 23;
  }
  if (v68 <= "Duplicate a=mid value '" && v17 > "Duplicate a=mid value '")
    goto LABEL_1391;
  qmemcpy(v68, "Duplicate a=mid value '", 23);
  v89 = v66 >= 0 ? (char *)v16 : *(char **)v16;
  n = (size_t)&v17[v67];
  if (v89 >= v17 && n > (unint64_t)v89)
    goto LABEL_1391;
  if (v67)
    memmove(v17, v89, v67);
  *(_BYTE *)n = 0;
  v91 = v694[23] >= 0 ? 22 : (*(_QWORD *)&v694[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  v92 = v694[23] >= 0 ? v694[23] : *(_QWORD *)&v694[8];
  if (v91 - v92 >= 2)
  {
    v93 = v694;
    if (v694[23] < 0)
      v93 = *(_BYTE **)v694;
    v94 = &v93[v92];
    if (&v93[v92] <= "'." && v94 + 1 > (_WORD *)"'.")
      goto LABEL_1391;
    *v94 = 11815;
    v95 = v92 + 2;
    if ((v694[23] & 0x80000000) != 0)
      *(_QWORD *)&v694[8] = v92 + 2;
    else
      v694[23] = v95 & 0x7F;
    v93[v95] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace((std::string *)v694, v91, v92 - v91 + 2, v92, v92, 0, 2uLL, "'.");
  }
  v695 = *(std::string *)v694;
  memset(v694, 0, 24);
  v692.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
  v692.__r_.__value_.__l.__size_ = 17;
  rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v91, v61, v92, v62, v63, v64, v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
  if (SHIBYTE(v695.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v695.__r_.__value_.__l.__data_);
  if ((v694[23] & 0x80000000) != 0)
    operator delete(*(void **)v694);
LABEL_530:
  v286 = *(char *)(v16 + 23);
  v287 = v286 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
  n = v287 + 23;
  if (v287 + 23 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_1425;
  if (v287 < 0xFFFFFFFFFFFFFFE9)
  {
    v289 = (n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((n | 7) != 0x17)
      v289 = n | 7;
    v290 = v289 + 1;
    v288 = (char *)operator new(v289 + 1);
    v692.__r_.__value_.__l.__size_ = v287 + 23;
    v692.__r_.__value_.__r.__words[2] = v290 | 0x8000000000000000;
    v18 = v288 + 23;
    v692.__r_.__value_.__r.__words[0] = (std::string::size_type)v288;
  }
  else
  {
    memset(&v692, 0, sizeof(v692));
    v288 = (char *)&v692;
    *((_BYTE *)&v692.__r_.__value_.__s + 23) = v287 + 23;
  }
  if (v288 <= "Duplicate a=mid value '" && v18 > "Duplicate a=mid value '")
    goto LABEL_1391;
  qmemcpy(v288, "Duplicate a=mid value '", 23);
  v292 = v286 >= 0 ? (char *)v16 : *(char **)v16;
  n = (size_t)&v18[v287];
  if (v292 >= v18 && n > (unint64_t)v292)
    goto LABEL_1391;
  if (v287)
    memmove(v18, v292, v287);
  *(_BYTE *)n = 0;
  if ((v692.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v294 = 22;
  else
    v294 = (v692.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v692.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v295 = HIBYTE(v692.__r_.__value_.__r.__words[2]);
  else
    v295 = v692.__r_.__value_.__l.__size_;
  if (v294 - v295 >= 2)
  {
    v296 = &v692;
    if ((v692.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v296 = (std::string *)v692.__r_.__value_.__r.__words[0];
    v297 = (_WORD *)((char *)v296 + v295);
    if ((char *)v296 + v295 <= "'." && v297 + 1 > (_WORD *)"'.")
      goto LABEL_1391;
    *v297 = 11815;
    v298 = v295 + 2;
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
      v692.__r_.__value_.__l.__size_ = v295 + 2;
    else
      *((_BYTE *)&v692.__r_.__value_.__s + 23) = v298 & 0x7F;
    v296->__r_.__value_.__s.__data_[v298] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v692, v294, v295 - v294 + 2, v295, v295, 0, 2uLL, "'.");
  }
  v695 = v692;
  memset(&v692, 0, sizeof(v692));
  v7 = HIBYTE(v695.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v695.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *(_DWORD *)v694 = 3;
    v299 = &v695;
    v300 = HIBYTE(v695.__r_.__value_.__r.__words[2]);
    goto LABEL_574;
  }
  v300 = v695.__r_.__value_.__l.__size_;
  if ((v695.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_1391;
  v299 = (std::string *)v695.__r_.__value_.__r.__words[0];
  if (v695.__r_.__value_.__l.__size_)
  {
    if (!v695.__r_.__value_.__r.__words[0])
      goto LABEL_1391;
  }
  *(_DWORD *)v694 = 3;
  if (v695.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_1425;
LABEL_574:
  if (v300 > 0x16)
  {
    v302 = (v300 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v300 | 7) != 0x17)
      v302 = v300 | 7;
    v303 = v302 + 1;
    v301 = (std::string *)operator new(v302 + 1);
    *(_QWORD *)&v694[16] = v300;
    *(_QWORD *)&v694[24] = v303 | 0x8000000000000000;
    *(_QWORD *)&v694[8] = v301;
  }
  else
  {
    v301 = (std::string *)&v694[8];
    v694[31] = v300;
  }
  n = (size_t)v301 + v300;
  if (v301 <= v299 && n > (unint64_t)v299)
    goto LABEL_1391;
  if (v300)
    memmove(v301, v299, v300);
  *(_BYTE *)n = 0;
  *(_DWORD *)&v694[32] = 0;
  v694[36] = 0;
  v694[38] = 0;
  if ((v7 & 0x80) != 0)
  {
    operator delete(v695.__r_.__value_.__l.__data_);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v692.__r_.__value_.__l.__data_);
  }
  v7 = (std::string::size_type)v690;
  v10 = v684;
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)&__src, (char *)__src.__r_.__value_.__l.__size_);
  v21 = *(_DWORD *)v694;
  if (*(_DWORD *)v694)
  {
LABEL_22:
    *(_DWORD *)a1 = v21;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v694[8];
    *(_QWORD *)(a1 + 24) = *(_QWORD *)&v694[24];
    memset(&v694[8], 0, 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)&v694[32];
    v22 = *(_DWORD *)&v694[35];
    goto LABEL_23;
  }
LABEL_49:
  v684 = v10;
  v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 80))(*(_QWORD *)(v7 + 8));
  v58 = *(_QWORD *)p_src;
  if (v57)
  {
    v59 = (unsigned __int8 **)(*(uint64_t (**)(size_t))(v58 + 32))(p_src);
    v688 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 80))(*(_QWORD *)(v7 + 8));
    v60 = *v59;
    n = (size_t)v59[1];
    if (*v59 != (unsigned __int8 *)n)
    {
      v689 = (uint64_t *)(*(_QWORD *)v691 + 8);
      do
      {
        if (v60[28])
          goto LABEL_145;
        v96 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(v691[0], (const void **)v60, *(uint64_t **)(*(_QWORD *)v691 + 8), v689);
        if (v689 != v96)
        {
          v97 = v96;
          v98 = v60[23];
          v99 = v60;
          v7 = v98;
          if ((char)v60[23] < 0)
          {
            v7 = *((_QWORD *)v60 + 1);
            if ((v7 & 0x8000000000000000) != 0)
              goto LABEL_1391;
            v99 = *(unsigned __int8 **)v60;
            if (v7)
            {
              if (!v99)
                goto LABEL_1391;
            }
          }
          v100 = v97 + 4;
          if (*((char *)v97 + 55) < 0)
          {
            v101 = v97[5];
            if ((v101 & 0x8000000000000000) != 0)
              goto LABEL_1391;
            v100 = (_QWORD *)*v100;
            if (v101 && v100 == 0)
              goto LABEL_1391;
          }
          else
          {
            v101 = *((unsigned __int8 *)v97 + 55);
          }
          if (v101 >= v7)
            v103 = v7;
          else
            v103 = v101;
          v104 = memcmp(v99, v100, v103);
          if (v104)
          {
            if ((v104 & 0x80000000) == 0)
              goto LABEL_166;
          }
          else if (v7 >= v101)
          {
LABEL_166:
            v105 = v97[7];
            if (v105)
            {
              if (*(_QWORD *)(v105 + 24) == *(_QWORD *)(v105 + 32))
                v106 = 0;
              else
                v106 = *(unsigned __int8 ***)(v105 + 24);
              if ((v98 & 0x80u) == 0)
                v107 = v98;
              else
                v107 = *((_QWORD *)v60 + 1);
              v108 = (unsigned __int8 *)*((unsigned __int8 *)v106 + 23);
              v109 = (char)v108;
              if ((char)v108 < 0)
                v108 = v106[1];
              if ((unsigned __int8 *)v107 != v108)
                goto LABEL_145;
              if (v109 >= 0)
                v110 = (unsigned __int8 *)v106;
              else
                v110 = *v106;
              if ((v98 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v60, v110, *((_QWORD *)v60 + 1)))
                  goto LABEL_145;
              }
              else if ((_DWORD)v98)
              {
                for (i = 0; i != v98; ++i)
                {
                  if (v60[i] != v110[i])
                    goto LABEL_145;
                }
              }
            }
          }
        }
        v112 = v59[3];
        v7 = (std::string::size_type)v59[4];
        if (v112 == (unsigned __int8 *)v7)
          goto LABEL_485;
        v113 = *((_QWORD *)v60 + 4);
        v114 = v60[23];
        if ((v114 & 0x80u) == 0)
          v115 = v60[23];
        else
          v115 = *((_QWORD *)v60 + 1);
        if ((v114 & 0x80u) == 0)
          v116 = v60;
        else
          v116 = *(unsigned __int8 **)v60;
        while (1)
        {
          v117 = v112[23];
          v118 = (v117 & 0x80u) == 0 ? v112[23] : *((_QWORD *)v112 + 1);
          if (v118 == v115)
            break;
LABEL_192:
          v112 += 112;
          if (v112 == (unsigned __int8 *)v7)
            goto LABEL_485;
        }
        if ((v117 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v112, v116, *((_QWORD *)v112 + 1)))
            goto LABEL_202;
          goto LABEL_192;
        }
        if (v112[23])
        {
          v119 = 0;
          while (v112[v119] == v116[v119])
          {
            if (v117 == ++v119)
              goto LABEL_202;
          }
          goto LABEL_192;
        }
LABEL_202:
        if (!v113 || !v112)
        {
LABEL_485:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
            __src.__r_.__value_.__l.__size_ = 17;
            rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v265, v266, v267, v268, v269, v270, v271, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
          }
          *(_DWORD *)a1 = 3;
          v272 = (char *)operator new(0x20uLL);
          *(_QWORD *)(a1 + 8) = v272;
          *(_OWORD *)(a1 + 16) = xmmword_208F05180;
          if (v272 <= "Invalid session description." && v272 + 28 > "Invalid session description.")
            goto LABEL_1391;
          strcpy(v272, "Invalid session description.");
          goto LABEL_490;
        }
        if (!v688)
        {
          n = (size_t)"Called with SDP without crypto setup.";
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
            __src.__r_.__value_.__l.__size_ = 17;
            rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v304, v305, v306, v307, v308, v309, v310, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
          }
          *(_DWORD *)a1 = 3;
          v311 = (char *)operator new(0x28uLL);
          *(_QWORD *)(a1 + 8) = v311;
          *(_OWORD *)(a1 + 16) = xmmword_208F086E0;
          if (v311 <= "Called with SDP without crypto setup." && v311 + 37 > "Called with SDP without crypto setup.")
            goto LABEL_1391;
          strcpy(v311, "Called with SDP without crypto setup.");
          goto LABEL_490;
        }
        if (!*((_QWORD *)v112 + 13))
        {
          n = (size_t)"Called with SDP without DTLS fingerprint.";
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
            __src.__r_.__value_.__l.__size_ = 17;
            rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v120, v121, v122, v123, v124, v125, v126, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
          }
          *(_DWORD *)a1 = 3;
          v127 = (char *)operator new(0x30uLL);
          *(_QWORD *)(a1 + 8) = v127;
          *(_OWORD *)(a1 + 16) = xmmword_208F08F30;
          if (v127 <= "Called with SDP without DTLS fingerprint."
            && v127 + 41 > "Called with SDP without DTLS fingerprint.")
          {
            goto LABEL_1391;
          }
          strcpy(v127, "Called with SDP without DTLS fingerprint.");
          goto LABEL_490;
        }
LABEL_145:
        v60 += 40;
      }
      while (v60 != (unsigned __int8 *)n);
    }
    *(_DWORD *)a1 = 0;
    *(_BYTE *)(a1 + 38) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 29) = 0;
    v58 = *(_QWORD *)p_src;
  }
  v128 = (unsigned __int8 **)(*(uint64_t (**)(size_t))(v58 + 32))(p_src);
  v129 = *v128;
  n = (size_t)v128[1];
  if (*v128 != (unsigned __int8 *)n)
  {
    v130 = v128;
    v131 = (uint64_t *)(*(_QWORD *)v691 + 8);
    do
    {
      if (v129[28])
        goto LABEL_215;
      v132 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(v691[0], (const void **)v129, *(uint64_t **)(*(_QWORD *)v691 + 8), v131);
      if (v131 != v132)
      {
        v133 = v132;
        v134 = v129[23];
        v135 = v129;
        v7 = v134;
        if ((char)v129[23] < 0)
        {
          v7 = *((_QWORD *)v129 + 1);
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_1391;
          v135 = *(unsigned __int8 **)v129;
          if (v7)
          {
            if (!v135)
              goto LABEL_1391;
          }
        }
        v136 = v133 + 4;
        if (*((char *)v133 + 55) < 0)
        {
          v137 = v133[5];
          if ((v137 & 0x8000000000000000) != 0)
            goto LABEL_1391;
          v136 = (_QWORD *)*v136;
          if (v137 && v136 == 0)
            goto LABEL_1391;
        }
        else
        {
          v137 = *((unsigned __int8 *)v133 + 55);
        }
        if (v137 >= v7)
          v139 = v7;
        else
          v139 = v137;
        v140 = memcmp(v135, v136, v139);
        if (v140)
        {
          if ((v140 & 0x80000000) == 0)
            goto LABEL_236;
        }
        else if (v7 >= v137)
        {
LABEL_236:
          v141 = v133[7];
          if (v141)
          {
            if (*(_QWORD *)(v141 + 24) == *(_QWORD *)(v141 + 32))
              v142 = 0;
            else
              v142 = *(unsigned __int8 ***)(v141 + 24);
            if ((v134 & 0x80u) == 0)
              v143 = v134;
            else
              v143 = *((_QWORD *)v129 + 1);
            v144 = (unsigned __int8 *)*((unsigned __int8 *)v142 + 23);
            v145 = (char)v144;
            if ((char)v144 < 0)
              v144 = v142[1];
            if ((unsigned __int8 *)v143 != v144)
              goto LABEL_215;
            if (v145 >= 0)
              v146 = (unsigned __int8 *)v142;
            else
              v146 = *v142;
            if ((v134 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v129, v146, *((_QWORD *)v129 + 1)))
                goto LABEL_215;
            }
            else if ((_DWORD)v134)
            {
              for (j = 0; j != v134; ++j)
              {
                if (v129[j] != v146[j])
                  goto LABEL_215;
              }
            }
          }
        }
      }
      v148 = v130[3];
      v7 = (std::string::size_type)v130[4];
      if (v148 == (unsigned __int8 *)v7)
        goto LABEL_471;
      v149 = v129[23];
      if ((v149 & 0x80u) == 0)
        v150 = v129[23];
      else
        v150 = *((_QWORD *)v129 + 1);
      if ((v149 & 0x80u) == 0)
        v151 = v129;
      else
        v151 = *(unsigned __int8 **)v129;
      while (1)
      {
        v152 = v148[23];
        v153 = (v152 & 0x80u) == 0 ? v148[23] : *((_QWORD *)v148 + 1);
        if (v153 == v150)
          break;
LABEL_264:
        v148 += 112;
        if (v148 == (unsigned __int8 *)v7)
          goto LABEL_471;
      }
      if ((v152 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v148, v151, *((_QWORD *)v148 + 1)))
          goto LABEL_275;
        goto LABEL_264;
      }
      if (v148[23])
      {
        v154 = 0;
        do
        {
          if (v148[v154] != v151[v154])
            goto LABEL_264;
          ++v154;
        }
        while (v152 != v154);
        if (!v148)
        {
LABEL_471:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            goto LABEL_472;
          goto LABEL_473;
        }
      }
LABEL_275:
      if ((char)v148[71] < 0)
      {
        if (!*((_QWORD *)v148 + 7))
          goto LABEL_281;
      }
      else if (!v148[71])
      {
LABEL_281:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_472:
          rtc::webrtc_logging_impl::Log("\r\t", v155, v156, v157, v158, v159, v160, v161, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
LABEL_473:
        n = (size_t)"Called with SDP without ice-ufrag and ice-pwd.";
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
          __src.__r_.__value_.__l.__size_ = 17;
          rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v248, v249, v250, v251, v252, v253, v254, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
        }
        *(_DWORD *)a1 = 3;
        v255 = (char *)operator new(0x30uLL);
        *(_QWORD *)(a1 + 8) = v255;
        *(_OWORD *)(a1 + 16) = xmmword_208F1B0A0;
        if (v255 <= "Called with SDP without ice-ufrag and ice-pwd."
          && v255 + 46 > "Called with SDP without ice-ufrag and ice-pwd.")
        {
          goto LABEL_1391;
        }
        strcpy(v255, "Called with SDP without ice-ufrag and ice-pwd.");
LABEL_490:
        *(_DWORD *)(a1 + 32) = 0;
        *(_BYTE *)(a1 + 36) = 0;
        *(_BYTE *)(a1 + 38) = 0;
        goto LABEL_491;
      }
      if ((char)v148[95] < 0)
      {
        if (!*((_QWORD *)v148 + 10))
          goto LABEL_281;
      }
      else if (!v148[95])
      {
        goto LABEL_281;
      }
LABEL_215:
      v129 += 40;
    }
    while (v129 != (unsigned __int8 *)n);
  }
  v162 = (*(uint64_t (**)(size_t))(*(_QWORD *)p_src + 32))(p_src);
  *((_BYTE *)&__src.__r_.__value_.__s + 23) = 6;
  if (&__src <= (std::string *)"BUNDLE" && (char *)__src.__r_.__value_.__r.__words + 6 > "BUNDLE")
    goto LABEL_1391;
  v164 = (_QWORD *)v162;
  strcpy((char *)&__src, "BUNDLE");
  cricket::SessionDescription::GetGroupsByName(v162, (unsigned __int8 **)&__src, &v706.__r_.__value_.__l.__data_);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  v166 = v706.__r_.__value_.__l.__size_;
  v165 = (_QWORD *)v706.__r_.__value_.__r.__words[0];
  if (v706.__r_.__value_.__r.__words[0] == v706.__r_.__value_.__l.__size_)
  {
LABEL_470:
    LODWORD(v692.__r_.__value_.__l.__data_) = 0;
    v693[14] = 0;
    *(_QWORD *)v693 = 0;
    *(_OWORD *)&v692.__r_.__value_.__r.__words[1] = 0uLL;
    *(_QWORD *)&v693[5] = 0;
  }
  else
  {
    v7 = (std::string::size_type)&v702;
    v683 = off_24C0BCBF0;
    v679 = v164;
    v675 = v706.__r_.__value_.__l.__size_;
LABEL_291:
    while (1)
    {
      v167 = *v165;
      v702 = 0;
      v703 = 0;
      v701 = &v702;
      n = *(_QWORD *)(v167 + 24);
      v687 = *(std::string **)(v167 + 32);
      if ((std::string *)n != v687)
        break;
      std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)&v701, 0);
      if (++v165 == (_QWORD *)v166)
        goto LABEL_470;
    }
    v676 = v165;
LABEL_294:
    v168 = *v164;
    v169 = v164[1];
    if (*v164 != v169)
    {
      v170 = *(_BYTE *)(n + 23);
      if (v170 >= 0)
        v171 = *(unsigned __int8 *)(n + 23);
      else
        v171 = *(_QWORD *)(n + 8);
      if (v170 >= 0)
        v172 = (const std::string::value_type *)n;
      else
        v172 = *(const std::string::value_type **)n;
      do
      {
        v173 = *(unsigned __int8 *)(v168 + 23);
        if ((v173 & 0x80u) == 0)
          v174 = *(unsigned __int8 *)(v168 + 23);
        else
          v174 = *(_QWORD *)(v168 + 8);
        if (v174 == v171)
        {
          if ((v173 & 0x80) == 0)
          {
            if (*(_BYTE *)(v168 + 23))
            {
              v175 = 0;
              do
              {
                if (*(unsigned __int8 *)(v168 + v175) != v172[v175])
                  goto LABEL_302;
                ++v175;
              }
              while (v173 != v175);
              if (!v168)
                break;
            }
LABEL_313:
            if (!*(_BYTE *)(v168 + 28))
            {
              v176 = *(_QWORD **)(v168 + 32);
              if (v176)
              {
                if ((*(unsigned int (**)(_QWORD))(*v176 + 96))(*(_QWORD *)(v168 + 32))
                  && (*(unsigned int (**)(_QWORD *))(*v176 + 16))(v176) <= 1)
                {
                  v178 = v176[35];
                  v177 = v176[36];
                  for (k = v177; v178 != v177; v177 = k)
                  {
                    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v178 + 16))(&v695, v178);
                    v179 = v702;
                    v180 = v700;
                    if (!v702)
                      goto LABEL_338;
                    v181 = &v702;
                    do
                    {
                      v182 = v179;
                      v183 = v181;
                      v184 = *((_DWORD *)v179 + 8);
                      v185 = (char **)(v179 + 8);
                      if (v184 >= v700)
                      {
                        v185 = (char **)v182;
                        v181 = (char **)v182;
                      }
                      v179 = *v185;
                    }
                    while (v179);
                    if (v181 == &v702
                      || (v184 >= v700 ? (v186 = v182) : (v186 = v183),
                          v700 < v186[8]
                       || (v184 >= v700 ? (v187 = (uint64_t)(v182 + 40)) : (v187 = (uint64_t)(v183 + 5)),
                           webrtc::RtpCodec::operator==((uint64_t)&v695, v187)
                        && (v184 >= v180 ? (v188 = v182) : (v188 = v183), v180 = v700, v700 == v188[36]))))
                    {
LABEL_338:
                      LODWORD(__src.__r_.__value_.__l.__data_) = v180;
                      webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&__src.__r_.__value_.__r.__words[1], (const webrtc::RtpCodec *)&v695);
                      __src.__r_.__value_.__l.__size_ = (std::string::size_type)off_24C0BCC30;
                      v715 = v700;
                      v189 = v702;
                      data = (int)__src.__r_.__value_.__l.__data_;
                      v191 = &v702;
                      v192 = &v702;
                      if (v702)
                      {
                        while (1)
                        {
                          while (1)
                          {
                            v192 = (char **)v189;
                            v193 = *((_DWORD *)v189 + 8);
                            if (SLODWORD(__src.__r_.__value_.__l.__data_) >= v193)
                              break;
                            v189 = *v192;
                            v191 = v192;
                            if (!*v192)
                              goto LABEL_345;
                          }
                          if (v193 >= SLODWORD(__src.__r_.__value_.__l.__data_))
                            break;
                          v189 = v192[1];
                          if (!v189)
                          {
                            v191 = v192 + 1;
                            goto LABEL_345;
                          }
                        }
                      }
                      else
                      {
LABEL_345:
                        v194 = (char *)operator new(0x98uLL);
                        *((_DWORD *)v194 + 8) = data;
                        webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v194 + 40), (const webrtc::RtpCodec *)&__src.__r_.__value_.__r.__words[1]);
                        *((_QWORD *)v194 + 5) = off_24C0BCC30;
                        *((_DWORD *)v194 + 36) = v715;
                        *(_QWORD *)v194 = 0;
                        *((_QWORD *)v194 + 1) = 0;
                        *((_QWORD *)v194 + 2) = v192;
                        *v191 = v194;
                        if (*v701)
                        {
                          v701 = (char **)*v701;
                          v194 = *v191;
                        }
                        v195 = v702;
                        v13 = v194 == v702;
                        v194[24] = v194 == v702;
                        if (!v13)
                        {
                          do
                          {
                            v196 = *((_QWORD *)v194 + 2);
                            if (*(_BYTE *)(v196 + 24))
                              break;
                            v197 = *(char **)(v196 + 16);
                            v198 = *(_QWORD *)v197;
                            if (*(_QWORD *)v197 == v196)
                            {
                              v201 = *((_QWORD *)v197 + 1);
                              if (!v201 || (v202 = *(unsigned __int8 *)(v201 + 24), v199 = (_BYTE *)(v201 + 24), v202))
                              {
                                if (*(char **)v196 == v194)
                                {
                                  v203 = (uint64_t *)*((_QWORD *)v194 + 2);
                                }
                                else
                                {
                                  v203 = *(uint64_t **)(v196 + 8);
                                  v204 = *v203;
                                  *(_QWORD *)(v196 + 8) = *v203;
                                  if (v204)
                                  {
                                    *(_QWORD *)(v204 + 16) = v196;
                                    v197 = *(char **)(v196 + 16);
                                  }
                                  v203[2] = (uint64_t)v197;
                                  *(_QWORD *)(*(_QWORD *)(v196 + 16) + 8 * (**(_QWORD **)(v196 + 16) != v196)) = v203;
                                  *v203 = v196;
                                  *(_QWORD *)(v196 + 16) = v203;
                                  v197 = (char *)v203[2];
                                  v196 = *(_QWORD *)v197;
                                }
                                *((_BYTE *)v203 + 24) = 1;
                                v197[24] = 0;
                                v226 = *(_QWORD *)(v196 + 8);
                                *(_QWORD *)v197 = v226;
                                if (v226)
                                  *(_QWORD *)(v226 + 16) = v197;
                                *(_QWORD *)(v196 + 16) = *((_QWORD *)v197 + 2);
                                *(_QWORD *)(*((_QWORD *)v197 + 2) + 8 * (**((_QWORD **)v197 + 2) != (_QWORD)v197)) = v196;
                                *(_QWORD *)(v196 + 8) = v197;
                                goto LABEL_399;
                              }
                            }
                            else if (!v198
                                   || (v200 = *(unsigned __int8 *)(v198 + 24), v199 = (_BYTE *)(v198 + 24), v200))
                            {
                              if (*(char **)v196 == v194)
                              {
                                v208 = *((_QWORD *)v194 + 1);
                                *(_QWORD *)v196 = v208;
                                if (v208)
                                {
                                  *(_QWORD *)(v208 + 16) = v196;
                                  v197 = *(char **)(v196 + 16);
                                }
                                *((_QWORD *)v194 + 2) = v197;
                                *(_QWORD *)(*(_QWORD *)(v196 + 16) + 8 * (**(_QWORD **)(v196 + 16) != v196)) = v194;
                                *((_QWORD *)v194 + 1) = v196;
                                *(_QWORD *)(v196 + 16) = v194;
                                v197 = (char *)*((_QWORD *)v194 + 2);
                              }
                              else
                              {
                                v194 = (char *)*((_QWORD *)v194 + 2);
                              }
                              v194[24] = 1;
                              v197[24] = 0;
                              v196 = *((_QWORD *)v197 + 1);
                              v209 = *(char **)v196;
                              *((_QWORD *)v197 + 1) = *(_QWORD *)v196;
                              if (v209)
                                *((_QWORD *)v209 + 2) = v197;
                              *(_QWORD *)(v196 + 16) = *((_QWORD *)v197 + 2);
                              *(_QWORD *)(*((_QWORD *)v197 + 2) + 8 * (**((_QWORD **)v197 + 2) != (_QWORD)v197)) = v196;
                              *(_QWORD *)v196 = v197;
LABEL_399:
                              *((_QWORD *)v197 + 2) = v196;
                              break;
                            }
                            *(_BYTE *)(v196 + 24) = 1;
                            v194 = v197;
                            v197[24] = v197 == v195;
                            *v199 = 1;
                          }
                          while (v197 != v195);
                        }
                        ++v703;
                      }
                      __src.__r_.__value_.__l.__size_ = (std::string::size_type)off_24C0BCBF0;
                      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v714, v714[1]);
                      if (v712)
                      {
                        v713 = v712;
                        operator delete(v712);
                      }
                      if (v711 < 0)
                        operator delete((void *)__src.__r_.__value_.__r.__words[2]);
                      LODWORD(v692.__r_.__value_.__l.__data_) = 0;
                      v693[14] = 0;
                      *(_QWORD *)v693 = 0;
                      *(_OWORD *)&v692.__r_.__value_.__r.__words[1] = 0uLL;
                      *(_QWORD *)&v693[5] = 0;
                      goto LABEL_406;
                    }
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
                      goto LABEL_418;
                    v205 = snprintf((char *)&__src, 0x20uLL, "%d", v700);
                    if (v205 < 0)
                      goto LABEL_1425;
                    v206 = v205;
                    if (v205 > 0x16)
                    {
                      v210 = (v205 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v205 | 7) != 0x17)
                        v210 = v205 | 7;
                      v211 = v210 + 1;
                      v207 = (std::string *)operator new(v210 + 1);
                      v707.__r_.__value_.__l.__size_ = v206;
                      v707.__r_.__value_.__r.__words[2] = v211 | 0x8000000000000000;
                      v707.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
                    }
                    else
                    {
                      *((_BYTE *)&v707.__r_.__value_.__s + 23) = v205;
                      v207 = &v707;
                    }
                    v212 = (char *)v207 + v206;
                    if (v207 <= &__src && (std::string *)((char *)v207 + v206) > &__src)
                      goto LABEL_1391;
                    if ((_DWORD)v206)
                      memcpy(v207, &__src, v206);
                    *v212 = 0;
                    v213 = std::string::insert(&v707, 0, "A BUNDLE group contains a codec collision for payload_type='");
                    v219 = v213->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v708.__r_.__value_.__l.__data_ = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
                    v708.__r_.__value_.__r.__words[2] = v219;
                    v213->__r_.__value_.__l.__size_ = 0;
                    v213->__r_.__value_.__r.__words[2] = 0;
                    v213->__r_.__value_.__r.__words[0] = 0;
                    v220 = v708.__r_.__value_.__r.__words[2];
                    if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v221 = 22;
                    else
                      v221 = (v708.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v222 = HIBYTE(v708.__r_.__value_.__r.__words[2]);
                    else
                      v222 = v708.__r_.__value_.__l.__size_;
                    if (v221 - v222 >= 0x50)
                    {
                      v223 = &v708;
                      if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v223 = (std::string *)v708.__r_.__value_.__r.__words[0];
                      v224 = (char *)v223 + v222;
                      if ((char *)v223 + v222 <= ". All codecs must share the same type, encoding name, clock rate and parameters."
                        && v224 + 80 > ". All codecs must share the same type, encoding name, clock rate and parameters.")
                      {
                        goto LABEL_1391;
                      }
                      qmemcpy(v224, ". All codecs must share the same type, encoding name, clock rate and parameters.", 80);
                      v225 = v222 + 80;
                      if ((v220 & 0x8000000000000000) != 0)
                        v708.__r_.__value_.__l.__size_ = v222 + 80;
                      else
                        *((_BYTE *)&v708.__r_.__value_.__s + 23) = v225 & 0x7F;
                      v223->__r_.__value_.__s.__data_[v225] = 0;
                    }
                    else
                    {
                      std::string::__grow_by_and_replace(&v708, v221, v222 - v221 + 80, v222, v222, 0, 0x50uLL, ". All codecs must share the same type, encoding name, clock rate and parameters.");
                    }
                    __src = v708;
                    memset(&v708, 0, sizeof(v708));
                    v704 = "INVALID_PARAMETER";
                    v705 = 17;
                    rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v221, v214, v222, v215, v216, v217, v218, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
                    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__src.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v708.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_417:
                        if (SHIBYTE(v707.__r_.__value_.__r.__words[2]) < 0)
                          goto LABEL_444;
                        goto LABEL_418;
                      }
                    }
                    else if ((SHIBYTE(v708.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_417;
                    }
                    operator delete(v708.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v707.__r_.__value_.__r.__words[2]) < 0)
LABEL_444:
                      operator delete(v707.__r_.__value_.__l.__data_);
LABEL_418:
                    v227 = snprintf((char *)&__src, 0x20uLL, "%d", v700);
                    if (v227 < 0)
                      goto LABEL_1425;
                    v228 = v227;
                    if (v227 > 0x16)
                    {
                      v230 = (v227 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v227 | 7) != 0x17)
                        v230 = v227 | 7;
                      v231 = v230 + 1;
                      v229 = (std::string *)operator new(v230 + 1);
                      v707.__r_.__value_.__l.__size_ = v228;
                      v707.__r_.__value_.__r.__words[2] = v231 | 0x8000000000000000;
                      v707.__r_.__value_.__r.__words[0] = (std::string::size_type)v229;
                    }
                    else
                    {
                      *((_BYTE *)&v707.__r_.__value_.__s + 23) = v227;
                      v229 = &v707;
                    }
                    v232 = (char *)v229 + v228;
                    if (v229 <= &__src && (std::string *)((char *)v229 + v228) > &__src)
                      goto LABEL_1391;
                    if ((_DWORD)v228)
                      memcpy(v229, &__src, v228);
                    *v232 = 0;
                    v233 = std::string::insert(&v707, 0, "A BUNDLE group contains a codec collision for payload_type='");
                    v234 = v233->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v708.__r_.__value_.__l.__data_ = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
                    v708.__r_.__value_.__r.__words[2] = v234;
                    v233->__r_.__value_.__l.__size_ = 0;
                    v233->__r_.__value_.__r.__words[2] = 0;
                    v233->__r_.__value_.__r.__words[0] = 0;
                    v235 = v708.__r_.__value_.__r.__words[2];
                    if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v236 = 22;
                    else
                      v236 = (v708.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v237 = HIBYTE(v708.__r_.__value_.__r.__words[2]);
                    else
                      v237 = v708.__r_.__value_.__l.__size_;
                    if (v236 - v237 >= 0x50)
                    {
                      v238 = &v708;
                      if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v238 = (std::string *)v708.__r_.__value_.__r.__words[0];
                      v239 = (char *)v238 + v237;
                      if ((char *)v238 + v237 <= ". All codecs must share the same type, encoding name, clock rate and parameters."
                        && v239 + 80 > ". All codecs must share the same type, encoding name, clock rate and parameters.")
                      {
                        goto LABEL_1391;
                      }
                      qmemcpy(v239, ". All codecs must share the same type, encoding name, clock rate and parameters.", 80);
                      v240 = v237 + 80;
                      if ((v235 & 0x8000000000000000) != 0)
                        v708.__r_.__value_.__l.__size_ = v237 + 80;
                      else
                        *((_BYTE *)&v708.__r_.__value_.__s + 23) = v240 & 0x7F;
                      v238->__r_.__value_.__s.__data_[v240] = 0;
                    }
                    else
                    {
                      std::string::__grow_by_and_replace(&v708, v236, v237 - v236 + 80, v237, v237, 0, 0x50uLL, ". All codecs must share the same type, encoding name, clock rate and parameters.");
                    }
                    __src = v708;
                    memset(&v708, 0, sizeof(v708));
                    v241 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v243 = __src.__r_.__value_.__l.__size_;
                      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                        goto LABEL_1391;
                      v242 = (std::string *)__src.__r_.__value_.__r.__words[0];
                      if (__src.__r_.__value_.__l.__size_)
                      {
                        if (!__src.__r_.__value_.__r.__words[0])
                          goto LABEL_1391;
                      }
                      LODWORD(v692.__r_.__value_.__l.__data_) = 3;
                      if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
                        goto LABEL_1425;
                    }
                    else
                    {
                      LODWORD(v692.__r_.__value_.__l.__data_) = 3;
                      v242 = &__src;
                      v243 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                    }
                    if (v243 > 0x16)
                    {
                      v245 = (v243 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v243 | 7) != 0x17)
                        v245 = v243 | 7;
                      v246 = v245 + 1;
                      v244 = (std::string *)operator new(v245 + 1);
                      v692.__r_.__value_.__r.__words[2] = v243;
                      *(_QWORD *)v693 = v246 | 0x8000000000000000;
                      v692.__r_.__value_.__l.__size_ = (std::string::size_type)v244;
                    }
                    else
                    {
                      v693[7] = v243;
                      v244 = (std::string *)&v692.__r_.__value_.__r.__words[1];
                    }
                    v247 = (std::string *)((char *)v244 + v243);
                    if (v244 <= v242 && v247 > v242)
                      goto LABEL_1391;
                    if (v243)
                      memmove(v244, v242, v243);
                    v247->__r_.__value_.__s.__data_[0] = 0;
                    *(_DWORD *)&v693[8] = 0;
                    v693[12] = 0;
                    v693[14] = 0;
                    if (v241 < 0)
                    {
                      operator delete(__src.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v708.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v707.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v707.__r_.__value_.__l.__data_);
LABEL_406:
                    v695.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C0BCBF0;
                    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v699, v699[1]);
                    if (__p)
                    {
                      v698 = __p;
                      operator delete(__p);
                    }
                    if ((v696[7] & 0x80000000) != 0)
                      operator delete((void *)v695.__r_.__value_.__l.__size_);
                    if (LODWORD(v692.__r_.__value_.__l.__data_))
                      goto LABEL_675;
                    if ((v693[7] & 0x80000000) != 0)
                      operator delete((void *)v692.__r_.__value_.__l.__size_);
                    v178 += 216;
                  }
                }
              }
            }
            n += 24;
            v164 = v679;
            if ((std::string *)n == v687)
            {
              v166 = v675;
              std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)&v701, v702);
              v165 = v676 + 1;
              if (v676 + 1 == (_QWORD *)v675)
                goto LABEL_470;
              goto LABEL_291;
            }
            goto LABEL_294;
          }
          if (!memcmp(*(const void **)v168, v172, *(_QWORD *)(v168 + 8)))
            goto LABEL_313;
        }
LABEL_302:
        v168 += 40;
      }
      while (v168 != v169);
    }
    v7 = (std::string::size_type)"A BUNDLE group contains a MID='";
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v261 = *(char *)(n + 23);
      if (v261 >= 0)
        v262 = *(unsigned __int8 *)(n + 23);
      else
        v262 = *(_QWORD *)(n + 8);
      v263 = v262 + 31;
      if (v262 + 31 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1425;
      if (v263 > 0x16)
      {
        v273 = (v263 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v263 | 7) != 0x17)
          v273 = v263 | 7;
        v274 = v273 + 1;
        v264 = (char *)operator new(v273 + 1);
        v708.__r_.__value_.__l.__size_ = v262 + 31;
        v708.__r_.__value_.__r.__words[2] = v274 | 0x8000000000000000;
        v708.__r_.__value_.__r.__words[0] = (std::string::size_type)v264;
      }
      else
      {
        memset(&v708, 0, sizeof(v708));
        v264 = (char *)&v708;
        *((_BYTE *)&v708.__r_.__value_.__s + 23) = v262 + 31;
      }
      v275 = v264 + 31;
      if (v264 <= "A BUNDLE group contains a MID='" && v275 > "A BUNDLE group contains a MID='")
        goto LABEL_1391;
      qmemcpy(v264, "A BUNDLE group contains a MID='", 31);
      v277 = v261 >= 0 ? (char *)n : *(char **)n;
      v278 = &v275[v262];
      if (v277 >= v275 && v278 > v277)
        goto LABEL_1391;
      if (v262)
        memmove(v275, v277, v262);
      *v278 = 0;
      v280 = v708.__r_.__value_.__r.__words[2];
      if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v281 = 22;
      else
        v281 = (v708.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v282 = HIBYTE(v708.__r_.__value_.__r.__words[2]);
      else
        v282 = v708.__r_.__value_.__l.__size_;
      if (v281 - v282 >= 0x19)
      {
        v283 = &v708;
        if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v283 = (std::string *)v708.__r_.__value_.__r.__words[0];
        v284 = (char *)v283 + v282;
        if ((char *)v283 + v282 <= "' matching no m= section." && v284 + 25 > "' matching no m= section.")
          goto LABEL_1391;
        qmemcpy(v284, "' matching no m= section.", 25);
        v285 = v282 + 25;
        if ((v280 & 0x8000000000000000) != 0)
          v708.__r_.__value_.__l.__size_ = v282 + 25;
        else
          *((_BYTE *)&v708.__r_.__value_.__s + 23) = v285 & 0x7F;
        v283->__r_.__value_.__s.__data_[v285] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(&v708, v281, v282 - v281 + 25, v282, v282, 0, 0x19uLL, "' matching no m= section.");
      }
      __src = v708;
      memset(&v708, 0, sizeof(v708));
      v707.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
      v707.__r_.__value_.__l.__size_ = 17;
      rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v281, v256, v282, v257, v258, v259, v260, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__src.__r_.__value_.__l.__data_);
      if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v708.__r_.__value_.__l.__data_);
    }
    v312 = *(char *)(n + 23);
    if (v312 >= 0)
      v313 = *(unsigned __int8 *)(n + 23);
    else
      v313 = *(_QWORD *)(n + 8);
    v314 = v313 + 31;
    if (v313 + 31 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1425;
    if (v314 > 0x16)
    {
      v316 = (v314 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v314 | 7) != 0x17)
        v316 = v314 | 7;
      v317 = v316 + 1;
      v315 = (char *)operator new(v316 + 1);
      v708.__r_.__value_.__l.__size_ = v313 + 31;
      v708.__r_.__value_.__r.__words[2] = v317 | 0x8000000000000000;
      v708.__r_.__value_.__r.__words[0] = (std::string::size_type)v315;
    }
    else
    {
      memset(&v708, 0, sizeof(v708));
      v315 = (char *)&v708;
      *((_BYTE *)&v708.__r_.__value_.__s + 23) = v313 + 31;
    }
    v318 = v315 + 31;
    if (v315 <= "A BUNDLE group contains a MID='" && v318 > "A BUNDLE group contains a MID='")
      goto LABEL_1391;
    qmemcpy(v315, "A BUNDLE group contains a MID='", 31);
    v320 = v312 >= 0 ? (char *)n : *(char **)n;
    n = (size_t)&v318[v313];
    if (v320 >= v318 && n > (unint64_t)v320)
      goto LABEL_1391;
    if (v313)
      memmove(v318, v320, v313);
    *(_BYTE *)n = 0;
    v322 = v708.__r_.__value_.__r.__words[2];
    if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = 22;
    else
      v7 = (v708.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v323 = HIBYTE(v708.__r_.__value_.__r.__words[2]);
    else
      v323 = v708.__r_.__value_.__l.__size_;
    if (v7 - v323 >= 0x19)
    {
      v327 = &v708;
      if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v327 = (std::string *)v708.__r_.__value_.__r.__words[0];
      v328 = (char *)v327 + v323;
      if ((char *)v327 + v323 <= "' matching no m= section." && v328 + 25 > "' matching no m= section.")
        goto LABEL_1391;
      qmemcpy(v328, "' matching no m= section.", 25);
      v329 = v323 + 25;
      v330 = (std::string *)&v692.__r_.__value_.__r.__words[1];
      if ((v322 & 0x8000000000000000) != 0)
        v708.__r_.__value_.__l.__size_ = v323 + 25;
      else
        *((_BYTE *)&v708.__r_.__value_.__s + 23) = v329 & 0x7F;
      v331 = (char *)v327 + v329;
    }
    else
    {
      n = v323 + 25;
      if (0x7FFFFFFFFFFFFFF6 - v7 < v323 + 25 - v7)
        goto LABEL_1425;
      if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v324 = &v708;
      else
        v324 = (std::string *)v708.__r_.__value_.__r.__words[0];
      v325 = 0x7FFFFFFFFFFFFFF7;
      if (v7 < 0x3FFFFFFFFFFFFFF3)
      {
        v326 = 2 * v7;
        if (n > 2 * v7)
          v326 = v323 + 25;
        if (v326 >= 0x17)
        {
          v332 = (v326 & 0xFFFFFFFFFFFFFFF8) + 8;
          v333 = v326 | 7;
          if (v333 == 23)
            v333 = v332;
          v325 = v333 + 1;
        }
        else
        {
          v325 = 23;
        }
      }
      v334 = (std::string *)operator new(v325);
      v335 = (std::string::size_type)v334;
      if (v323)
      {
        if (v324 >= v334 && (std::string *)((char *)v334 + v323) > v324)
          goto LABEL_1391;
        memmove(v334, v324, v323);
      }
      v336 = (char *)(v335 + v323);
      if (v335 + v323 <= (unint64_t)"' matching no m= section." && v336 + 25 > "' matching no m= section.")
        goto LABEL_1391;
      qmemcpy(v336, "' matching no m= section.", 25);
      if (v7 != 22)
        operator delete(v324);
      v708.__r_.__value_.__l.__size_ = v323 + 25;
      v708.__r_.__value_.__r.__words[2] = v325 | 0x8000000000000000;
      v708.__r_.__value_.__r.__words[0] = v335;
      v331 = (_BYTE *)(v335 + n);
      v330 = (std::string *)&v692.__r_.__value_.__r.__words[1];
    }
    *v331 = 0;
    __src = v708;
    memset(&v708, 0, sizeof(v708));
    n = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      v338 = __src.__r_.__value_.__l.__size_;
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_1391;
      v337 = (std::string *)__src.__r_.__value_.__r.__words[0];
      if (__src.__r_.__value_.__l.__size_)
      {
        if (!__src.__r_.__value_.__r.__words[0])
          goto LABEL_1391;
      }
      LODWORD(v692.__r_.__value_.__l.__data_) = 3;
      if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1425;
    }
    else
    {
      LODWORD(v692.__r_.__value_.__l.__data_) = 3;
      v337 = &__src;
      v338 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    }
    if (v338 > 0x16)
    {
      v339 = (v338 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v338 | 7) != 0x17)
        v339 = v338 | 7;
      v340 = v339 + 1;
      v330 = (std::string *)operator new(v339 + 1);
      v692.__r_.__value_.__r.__words[2] = v338;
      *(_QWORD *)v693 = v340 | 0x8000000000000000;
      v692.__r_.__value_.__l.__size_ = (std::string::size_type)v330;
    }
    else
    {
      v693[7] = v338;
    }
    v341 = (std::string *)((char *)v330 + v338);
    if (v330 <= v337 && v341 > v337)
      goto LABEL_1391;
    if (v338)
      memmove(v330, v337, v338);
    v341->__r_.__value_.__s.__data_[0] = 0;
    *(_DWORD *)&v693[8] = 0;
    v693[12] = 0;
    v693[14] = 0;
    if ((n & 0x80) != 0)
    {
      operator delete(__src.__r_.__value_.__l.__data_);
      if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v708.__r_.__value_.__l.__data_);
    }
LABEL_675:
    std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)&v701, v702);
  }
  if (v706.__r_.__value_.__r.__words[0])
  {
    v706.__r_.__value_.__l.__size_ = v706.__r_.__value_.__r.__words[0];
    operator delete(v706.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)v694 = v692.__r_.__value_.__l.__data_;
  n = (size_t)v694;
  v683 = (void (**)(webrtc::RtpCodec *__hidden))&v694[8];
  if ((v694[31] & 0x80000000) != 0)
    operator delete(*(void **)&v694[8]);
  *(_OWORD *)&v694[8] = *(_OWORD *)&v692.__r_.__value_.__r.__words[1];
  *(_QWORD *)&v694[24] = *(_QWORD *)v693;
  *(_DWORD *)&v694[32] = *(_DWORD *)&v693[8];
  *(_DWORD *)&v694[35] = *(_DWORD *)&v693[11];
  v342 = (*(uint64_t (**)(size_t))(*(_QWORD *)p_src + 32))(p_src);
  v343 = (_QWORD *)v342;
  *((_BYTE *)&__src.__r_.__value_.__s + 23) = 6;
  if (&__src <= (std::string *)"BUNDLE" && (char *)__src.__r_.__value_.__r.__words + 6 > "BUNDLE")
    goto LABEL_1391;
  strcpy((char *)&__src, "BUNDLE");
  cricket::SessionDescription::GetGroupsByName(v342, (unsigned __int8 **)&__src, &v706.__r_.__value_.__l.__data_);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  v677 = v706.__r_.__value_.__l.__size_;
  v344 = (_QWORD *)v706.__r_.__value_.__r.__words[0];
  if (v706.__r_.__value_.__r.__words[0] == v706.__r_.__value_.__l.__size_)
  {
LABEL_1009:
    LODWORD(v695.__r_.__value_.__l.__data_) = 0;
    v696[14] = 0;
    *(_QWORD *)v696 = 0;
    *(_OWORD *)&v695.__r_.__value_.__r.__words[1] = 0uLL;
    *(_QWORD *)&v696[5] = 0;
  }
  else
  {
    v680 = v343;
LABEL_686:
    while (1)
    {
      v678 = v344;
      v345 = *v344;
      v702 = 0;
      v703 = 0;
      v701 = &v702;
      v7 = *(_QWORD *)(v345 + 24);
      v682 = *(_QWORD *)(v345 + 32);
      if (v7 != v682)
        break;
      std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(0);
      v344 = v678 + 1;
      if (v678 + 1 == (_QWORD *)v677)
        goto LABEL_1009;
    }
LABEL_690:
    v346 = *v343;
    v347 = v343[1];
    if (*v343 != v347)
    {
      v348 = *(_BYTE *)(v7 + 23);
      if (v348 >= 0)
        v349 = *(unsigned __int8 *)(v7 + 23);
      else
        v349 = *(_QWORD *)(v7 + 8);
      if (v348 >= 0)
        v350 = (unsigned __int8 *)v7;
      else
        v350 = *(unsigned __int8 **)v7;
      do
      {
        v351 = *(unsigned __int8 *)(v346 + 23);
        if ((v351 & 0x80u) == 0)
          v352 = *(unsigned __int8 *)(v346 + 23);
        else
          v352 = *(_QWORD *)(v346 + 8);
        if (v352 == v349)
        {
          if ((v351 & 0x80) == 0)
          {
            if (*(_BYTE *)(v346 + 23))
            {
              v353 = 0;
              do
              {
                if (*(unsigned __int8 *)(v346 + v353) != v350[v353])
                  goto LABEL_698;
                ++v353;
              }
              while (v351 != v353);
              if (!v346)
                break;
            }
LABEL_709:
            v354 = &v702;
            if (!*(_BYTE *)(v346 + 28))
            {
              v355 = *(_QWORD **)(v346 + 32);
              if (v355)
              {
                if ((*(unsigned int (**)(_QWORD))(*v355 + 96))(*(_QWORD *)(v346 + 32)))
                {
                  n = v355[8];
                  v356 = v355[9];
                  for (m = v356; n != v356; v356 = m)
                  {
                    if (*(char *)(n + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v692, *(const std::string::value_type **)n, *(_QWORD *)(n + 8));
                    }
                    else
                    {
                      v357 = *(_OWORD *)n;
                      v692.__r_.__value_.__r.__words[2] = *(_QWORD *)(n + 16);
                      *(_OWORD *)&v692.__r_.__value_.__l.__data_ = v357;
                    }
                    v358 = *(_DWORD *)(n + 24);
                    v693[4] = *(_BYTE *)(n + 28);
                    *(_DWORD *)v693 = v358;
                    v359 = v702;
                    v360 = v358;
                    if (!v702)
                      goto LABEL_728;
                    v361 = &v702;
                    v362 = v702;
                    do
                    {
                      v363 = v362;
                      v364 = v361;
                      v365 = *((_DWORD *)v362 + 8);
                      v366 = (char **)(v362 + 8);
                      if (v365 >= *(int *)v693)
                      {
                        v366 = (char **)v363;
                        v361 = (char **)v363;
                      }
                      v362 = *v366;
                    }
                    while (v362);
                    if (v361 == &v702 || (v365 >= *(int *)v693 ? (v367 = v363) : (v367 = v364), *(int *)v693 < v367[8]))
                    {
LABEL_728:
                      LODWORD(__src.__r_.__value_.__l.__data_) = v360;
                      if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)&__src.__r_.__value_.__r.__words[1], v692.__r_.__value_.__l.__data_, v692.__r_.__value_.__l.__size_);
                        v359 = v702;
                        v360 = (int)__src.__r_.__value_.__l.__data_;
                      }
                      else
                      {
                        *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = *(_OWORD *)&v692.__r_.__value_.__l.__data_;
                        *(_QWORD *)v710 = *((_QWORD *)&v692.__r_.__value_.__l + 2);
                      }
                      *(_DWORD *)&v710[8] = *(_DWORD *)v693;
                      v710[12] = v693[4];
LABEL_733:
                      v368 = v354;
                      if (v359)
                      {
                        do
                        {
                          v354 = (char **)v359;
                          v369 = *((_DWORD *)v359 + 8);
                          if (v360 < v369)
                          {
                            v359 = *(char **)v359;
                            goto LABEL_733;
                          }
                          if (v369 >= v360)
                            goto LABEL_844;
                          v359 = (char *)*((_QWORD *)v359 + 1);
                        }
                        while (v359);
                        v368 = v354 + 1;
                      }
                      v370 = (char *)operator new(0x48uLL);
                      *((_DWORD *)v370 + 8) = v360;
                      v371 = (std::string *)(v370 + 40);
                      if ((v710[7] & 0x80000000) != 0)
                      {
                        std::string::__init_copy_ctor_external(v371, (const std::string::value_type *)__src.__r_.__value_.__l.__size_, __src.__r_.__value_.__r.__words[2]);
                      }
                      else
                      {
                        *(_OWORD *)&v371->__r_.__value_.__l.__data_ = *(_OWORD *)&__src.__r_.__value_.__r.__words[1];
                        *((_QWORD *)v370 + 7) = *(_QWORD *)v710;
                      }
                      *((_DWORD *)v370 + 16) = *(_DWORD *)&v710[8];
                      v370[68] = v710[12];
                      *(_QWORD *)v370 = 0;
                      *((_QWORD *)v370 + 1) = 0;
                      *((_QWORD *)v370 + 2) = v354;
                      *v368 = v370;
                      if (*v701)
                      {
                        v701 = (char **)*v701;
                        v370 = *v368;
                      }
                      v372 = v702;
                      v13 = v370 == v702;
                      v370[24] = v370 == v702;
                      if (!v13)
                      {
                        do
                        {
                          v373 = *((_QWORD *)v370 + 2);
                          if (*(_BYTE *)(v373 + 24))
                            break;
                          v374 = *(char **)(v373 + 16);
                          v375 = *(_QWORD *)v374;
                          if (*(_QWORD *)v374 == v373)
                          {
                            v378 = *((_QWORD *)v374 + 1);
                            if (!v378 || (v379 = *(unsigned __int8 *)(v378 + 24), v376 = (_BYTE *)(v378 + 24), v379))
                            {
                              if (*(char **)v373 == v370)
                              {
                                v380 = (uint64_t *)*((_QWORD *)v370 + 2);
                              }
                              else
                              {
                                v380 = *(uint64_t **)(v373 + 8);
                                v381 = *v380;
                                *(_QWORD *)(v373 + 8) = *v380;
                                if (v381)
                                {
                                  *(_QWORD *)(v381 + 16) = v373;
                                  v374 = *(char **)(v373 + 16);
                                }
                                v380[2] = (uint64_t)v374;
                                *(_QWORD *)(*(_QWORD *)(v373 + 16) + 8 * (**(_QWORD **)(v373 + 16) != v373)) = v380;
                                *v380 = v373;
                                *(_QWORD *)(v373 + 16) = v380;
                                v374 = (char *)v380[2];
                                v373 = *(_QWORD *)v374;
                              }
                              *((_BYTE *)v380 + 24) = 1;
                              v374[24] = 0;
                              v419 = *(_QWORD *)(v373 + 8);
                              *(_QWORD *)v374 = v419;
                              if (v419)
                                *(_QWORD *)(v419 + 16) = v374;
                              *(_QWORD *)(v373 + 16) = *((_QWORD *)v374 + 2);
                              *(_QWORD *)(*((_QWORD *)v374 + 2) + 8 * (**((_QWORD **)v374 + 2) != (_QWORD)v374)) = v373;
                              *(_QWORD *)(v373 + 8) = v374;
                              goto LABEL_842;
                            }
                          }
                          else if (!v375 || (v377 = *(unsigned __int8 *)(v375 + 24), v376 = (_BYTE *)(v375 + 24), v377))
                          {
                            if (*(char **)v373 == v370)
                            {
                              v392 = *((_QWORD *)v370 + 1);
                              *(_QWORD *)v373 = v392;
                              if (v392)
                              {
                                *(_QWORD *)(v392 + 16) = v373;
                                v374 = *(char **)(v373 + 16);
                              }
                              *((_QWORD *)v370 + 2) = v374;
                              *(_QWORD *)(*(_QWORD *)(v373 + 16) + 8 * (**(_QWORD **)(v373 + 16) != v373)) = v370;
                              *((_QWORD *)v370 + 1) = v373;
                              *(_QWORD *)(v373 + 16) = v370;
                              v374 = (char *)*((_QWORD *)v370 + 2);
                            }
                            else
                            {
                              v370 = (char *)*((_QWORD *)v370 + 2);
                            }
                            v370[24] = 1;
                            v374[24] = 0;
                            v373 = *((_QWORD *)v374 + 1);
                            v393 = *(char **)v373;
                            *((_QWORD *)v374 + 1) = *(_QWORD *)v373;
                            if (v393)
                              *((_QWORD *)v393 + 2) = v374;
                            *(_QWORD *)(v373 + 16) = *((_QWORD *)v374 + 2);
                            *(_QWORD *)(*((_QWORD *)v374 + 2) + 8 * (**((_QWORD **)v374 + 2) != (_QWORD)v374)) = v373;
                            *(_QWORD *)v373 = v374;
LABEL_842:
                            *((_QWORD *)v374 + 2) = v373;
                            break;
                          }
                          *(_BYTE *)(v373 + 24) = 1;
                          v370 = v374;
                          v374[24] = v374 == v372;
                          *v376 = 1;
                        }
                        while (v374 != v372);
                      }
                      ++v703;
LABEL_844:
                      if ((v710[7] & 0x80000000) != 0)
                        operator delete((void *)__src.__r_.__value_.__l.__size_);
                      LODWORD(v695.__r_.__value_.__l.__data_) = 0;
                      v696[14] = 0;
                      *(_QWORD *)v696 = 0;
                      *(_OWORD *)&v695.__r_.__value_.__r.__words[1] = 0uLL;
                      *(_QWORD *)&v696[5] = 0;
                      goto LABEL_847;
                    }
                    v382 = HIBYTE(v692.__r_.__value_.__r.__words[2]);
                    if ((v692.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v383 = HIBYTE(v692.__r_.__value_.__r.__words[2]);
                    else
                      v383 = v692.__r_.__value_.__l.__size_;
                    v384 = *((unsigned __int8 *)v361 + 63);
                    v385 = (char)v384;
                    if (v365 >= *(int *)v693)
                      v386 = v363;
                    else
                      v386 = v364;
                    v387 = v386[6];
                    if ((v384 & 0x80u) != 0)
                      v384 = v387;
                    if (v383 == v384)
                    {
                      v388 = (unsigned __int8 *)(v364 + 5);
                      if (v365 >= *(int *)v693)
                        v389 = v363;
                      else
                        v389 = v364;
                      if (v365 >= *(int *)v693)
                        v388 = (unsigned __int8 *)(v363 + 40);
                      if (v385 >= 0)
                        v390 = v388;
                      else
                        v390 = (unsigned __int8 *)v389[5];
                      if ((*((_BYTE *)&v692.__r_.__value_.__s + 23) & 0x80) != 0)
                      {
                        if (memcmp(v692.__r_.__value_.__l.__data_, v390, v692.__r_.__value_.__l.__size_))
                          goto LABEL_794;
                      }
                      else if (*((_BYTE *)&v692.__r_.__value_.__s + 23))
                      {
                        v391 = &v692;
                        while (v391->__r_.__value_.__s.__data_[0] == *v390)
                        {
                          v391 = (std::string *)((char *)v391 + 1);
                          ++v390;
                          if (!--v382)
                            goto LABEL_790;
                        }
                        goto LABEL_794;
                      }
LABEL_790:
                      if (v365 >= v360)
                        v394 = (unsigned __int8 *)v363;
                      else
                        v394 = (unsigned __int8 *)v364;
                      if (v693[4] == v394[68])
                        goto LABEL_728;
                    }
LABEL_794:
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
                      goto LABEL_889;
                    v395 = snprintf((char *)&__src, 0x20uLL, "%d", *(_DWORD *)v693);
                    if (v395 < 0)
                      goto LABEL_1425;
                    v401 = v395;
                    if (v395 > 0x16)
                    {
                      v403 = (v395 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v395 | 7) != 0x17)
                        v403 = v395 | 7;
                      v404 = v403 + 1;
                      v402 = (std::string *)operator new(v403 + 1);
                      v707.__r_.__value_.__l.__size_ = v401;
                      v707.__r_.__value_.__r.__words[2] = v404 | 0x8000000000000000;
                      v707.__r_.__value_.__r.__words[0] = (std::string::size_type)v402;
                    }
                    else
                    {
                      *((_BYTE *)&v707.__r_.__value_.__s + 23) = v395;
                      v402 = &v707;
                    }
                    v405 = (char *)v402 + v401;
                    if (v402 <= &__src && (std::string *)((char *)v402 + v401) > &__src)
                      goto LABEL_1391;
                    if ((_DWORD)v401)
                      memcpy(v402, &__src, v401);
                    *v405 = 0;
                    v407 = v707.__r_.__value_.__r.__words[2];
                    if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v408 = HIBYTE(v707.__r_.__value_.__r.__words[2]);
                    else
                      v408 = v707.__r_.__value_.__l.__size_;
                    if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v409 = 22;
                    else
                      v409 = (v707.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v409 - v408 >= 0x42)
                    {
                      if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v414 = &v707;
                      else
                        v414 = (std::string *)v707.__r_.__value_.__r.__words[0];
                      if (v408)
                      {
                        v415 = (char *)v414 + v408 <= "A BUNDLE group contains a codec collision for header extension id="
                            || v414 > (std::string *)"A BUNDLE group contains a codec collision for header extension id=";
                        v416 = 66;
                        if (v415)
                          v416 = 0;
                        v417 = &aABundleGroupCo_1[v416];
                        if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v418 = &v707;
                        else
                          v418 = (std::string *)v707.__r_.__value_.__r.__words[0];
                        memmove((char *)&v418[2].__r_.__value_.__r.__words[2] + 2, v414, v408);
                      }
                      else
                      {
                        v417 = "A BUNDLE group contains a codec collision for header extension id=";
                      }
                      *(_OWORD *)&v414->__r_.__value_.__r.__words[2] = *((_OWORD *)v417 + 1);
                      *(_OWORD *)&v414[1].__r_.__value_.__r.__words[1] = *((_OWORD *)v417 + 2);
                      *(_OWORD *)&v414[2].__r_.__value_.__l.__data_ = *((_OWORD *)v417 + 3);
                      LOWORD(v414[2].__r_.__value_.__r.__words[2]) = *((_WORD *)v417 + 32);
                      *(_OWORD *)&v414->__r_.__value_.__l.__data_ = *(_OWORD *)v417;
                      v420 = v408 + 66;
                      if ((v407 & 0x8000000000000000) != 0)
                        v707.__r_.__value_.__l.__size_ = v408 + 66;
                      else
                        *((_BYTE *)&v707.__r_.__value_.__s + 23) = v420 & 0x7F;
                      v421 = (char *)v414 + v420;
                    }
                    else
                    {
                      v410 = v408 + 66;
                      if (0x7FFFFFFFFFFFFFF6 - v409 < v408 + 66 - v409)
                        goto LABEL_1425;
                      if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v411 = &v707;
                      else
                        v411 = (std::string *)v707.__r_.__value_.__r.__words[0];
                      v412 = 0x7FFFFFFFFFFFFFF7;
                      if (v409 < 0x3FFFFFFFFFFFFFF3)
                      {
                        v413 = 2 * v409;
                        if (v410 > 2 * v409)
                          v413 = v408 + 66;
                        if (v413 >= 0x17)
                        {
                          v422 = (v413 & 0xFFFFFFFFFFFFFFF8) + 8;
                          v423 = v413 | 7;
                          if (v423 == 23)
                            v423 = v422;
                          v412 = v423 + 1;
                        }
                        else
                        {
                          v412 = 23;
                        }
                      }
                      v424 = (char *)operator new(v412);
                      v425 = (std::string *)(v424 + 66);
                      if (v424 <= "A BUNDLE group contains a codec collision for header extension id="
                        && v425 > (std::string *)"A BUNDLE group contains a codec collision for header extension id=")
                      {
                        goto LABEL_1391;
                      }
                      qmemcpy(v424, "A BUNDLE group contains a codec collision for header extension id=", 66);
                      if (v408)
                      {
                        if (v411 >= v425 && (std::string *)((char *)v425 + v408) > v411)
                          goto LABEL_1391;
                        memmove(v425, v411, v408);
                      }
                      if (v409 != 22)
                        operator delete(v411);
                      v707.__r_.__value_.__l.__size_ = v408 + 66;
                      v707.__r_.__value_.__r.__words[2] = v412 | 0x8000000000000000;
                      v707.__r_.__value_.__r.__words[0] = (std::string::size_type)v424;
                      v421 = &v424[v410];
                    }
                    *v421 = 0;
                    v426 = v707.__r_.__value_.__r.__words[2];
                    v708 = v707;
                    memset(&v707, 0, sizeof(v707));
                    if (v426 >= 0)
                      v427 = 22;
                    else
                      v427 = (v426 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v426 >= 0)
                      v428 = HIBYTE(v426);
                    else
                      v428 = v708.__r_.__value_.__l.__size_;
                    if (v427 - v428 >= 0x3F)
                    {
                      v429 = &v708;
                      if (v426 < 0)
                        v429 = (std::string *)v708.__r_.__value_.__r.__words[0];
                      v430 = (char *)v429 + v428;
                      if ((char *)v429 + v428 <= ". The id must be the same across all bundled media descriptions"
                        && v430 + 63 > ". The id must be the same across all bundled media descriptions")
                      {
                        goto LABEL_1391;
                      }
                      qmemcpy(v430, ". The id must be the same across all bundled media descriptions", 63);
                      v431 = v428 + 63;
                      if (v426 < 0)
                        v708.__r_.__value_.__l.__size_ = v428 + 63;
                      else
                        *((_BYTE *)&v708.__r_.__value_.__s + 23) = v431 & 0x7F;
                      v429->__r_.__value_.__s.__data_[v431] = 0;
                    }
                    else
                    {
                      std::string::__grow_by_and_replace(&v708, v427, v428 - v427 + 63, v428, v428, 0, 0x3FuLL, ". The id must be the same across all bundled media descriptions");
                    }
                    __src = v708;
                    memset(&v708, 0, sizeof(v708));
                    v704 = "INVALID_PARAMETER";
                    v705 = 17;
                    rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v427, v396, v428, v397, v398, v399, v400, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
                    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__src.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v708.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_888:
                        if (SHIBYTE(v707.__r_.__value_.__r.__words[2]) < 0)
                          goto LABEL_939;
                        goto LABEL_889;
                      }
                    }
                    else if ((SHIBYTE(v708.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_888;
                    }
                    operator delete(v708.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v707.__r_.__value_.__r.__words[2]) < 0)
LABEL_939:
                      operator delete(v707.__r_.__value_.__l.__data_);
LABEL_889:
                    v432 = snprintf((char *)&__src, 0x20uLL, "%d", *(_DWORD *)v693);
                    if (v432 < 0)
                      goto LABEL_1425;
                    v433 = v432;
                    if (v432 > 0x16)
                    {
                      v435 = (v432 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v432 | 7) != 0x17)
                        v435 = v432 | 7;
                      v436 = v435 + 1;
                      v434 = (std::string *)operator new(v435 + 1);
                      v707.__r_.__value_.__l.__size_ = v433;
                      v707.__r_.__value_.__r.__words[2] = v436 | 0x8000000000000000;
                      v707.__r_.__value_.__r.__words[0] = (std::string::size_type)v434;
                    }
                    else
                    {
                      *((_BYTE *)&v707.__r_.__value_.__s + 23) = v432;
                      v434 = &v707;
                    }
                    v437 = (char *)v434 + v433;
                    if (v434 <= &__src && (std::string *)((char *)v434 + v433) > &__src)
                      goto LABEL_1391;
                    if ((_DWORD)v433)
                      memcpy(v434, &__src, v433);
                    *v437 = 0;
                    v439 = v707.__r_.__value_.__r.__words[2];
                    if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v440 = HIBYTE(v707.__r_.__value_.__r.__words[2]);
                    else
                      v440 = v707.__r_.__value_.__l.__size_;
                    if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v441 = 22;
                    else
                      v441 = (v707.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v441 - v440 >= 0x42)
                    {
                      if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v446 = &v707;
                      else
                        v446 = (std::string *)v707.__r_.__value_.__r.__words[0];
                      if (v440)
                      {
                        v447 = (char *)v446 + v440 <= "A BUNDLE group contains a codec collision for header extension id="
                            || v446 > (std::string *)"A BUNDLE group contains a codec collision for header extension id=";
                        v448 = 66;
                        if (v447)
                          v448 = 0;
                        v449 = &aABundleGroupCo_1[v448];
                        if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v450 = &v707;
                        else
                          v450 = (std::string *)v707.__r_.__value_.__r.__words[0];
                        memmove((char *)&v450[2].__r_.__value_.__r.__words[2] + 2, v446, v440);
                      }
                      else
                      {
                        v449 = "A BUNDLE group contains a codec collision for header extension id=";
                      }
                      *(_OWORD *)&v446->__r_.__value_.__r.__words[2] = *((_OWORD *)v449 + 1);
                      *(_OWORD *)&v446[1].__r_.__value_.__r.__words[1] = *((_OWORD *)v449 + 2);
                      *(_OWORD *)&v446[2].__r_.__value_.__l.__data_ = *((_OWORD *)v449 + 3);
                      LOWORD(v446[2].__r_.__value_.__r.__words[2]) = *((_WORD *)v449 + 32);
                      *(_OWORD *)&v446->__r_.__value_.__l.__data_ = *(_OWORD *)v449;
                      v451 = v440 + 66;
                      if ((v439 & 0x8000000000000000) != 0)
                        v707.__r_.__value_.__l.__size_ = v440 + 66;
                      else
                        *((_BYTE *)&v707.__r_.__value_.__s + 23) = v451 & 0x7F;
                      v452 = (char *)v446 + v451;
                    }
                    else
                    {
                      v442 = v440 + 66;
                      if (0x7FFFFFFFFFFFFFF6 - v441 < v440 + 66 - v441)
                        goto LABEL_1425;
                      if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v443 = &v707;
                      else
                        v443 = (std::string *)v707.__r_.__value_.__r.__words[0];
                      v444 = 0x7FFFFFFFFFFFFFF7;
                      if (v441 < 0x3FFFFFFFFFFFFFF3)
                      {
                        v445 = 2 * v441;
                        if (v442 > 2 * v441)
                          v445 = v440 + 66;
                        if (v445 >= 0x17)
                        {
                          v453 = (v445 & 0xFFFFFFFFFFFFFFF8) + 8;
                          v454 = v445 | 7;
                          if (v454 == 23)
                            v454 = v453;
                          v444 = v454 + 1;
                        }
                        else
                        {
                          v444 = 23;
                        }
                      }
                      v455 = (char *)operator new(v444);
                      v456 = (std::string *)(v455 + 66);
                      if (v455 <= "A BUNDLE group contains a codec collision for header extension id="
                        && v456 > (std::string *)"A BUNDLE group contains a codec collision for header extension id=")
                      {
                        goto LABEL_1391;
                      }
                      qmemcpy(v455, "A BUNDLE group contains a codec collision for header extension id=", 66);
                      if (v440)
                      {
                        if (v443 >= v456 && (std::string *)((char *)v456 + v440) > v443)
                          goto LABEL_1391;
                        memmove(v456, v443, v440);
                      }
                      if (v441 != 22)
                        operator delete(v443);
                      v707.__r_.__value_.__l.__size_ = v440 + 66;
                      v707.__r_.__value_.__r.__words[2] = v444 | 0x8000000000000000;
                      v707.__r_.__value_.__r.__words[0] = (std::string::size_type)v455;
                      v452 = &v455[v442];
                    }
                    *v452 = 0;
                    v457 = v707.__r_.__value_.__r.__words[2];
                    v708 = v707;
                    memset(&v707, 0, sizeof(v707));
                    if (v457 >= 0)
                      v458 = 22;
                    else
                      v458 = (v457 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v457 >= 0)
                      v459 = HIBYTE(v457);
                    else
                      v459 = v708.__r_.__value_.__l.__size_;
                    if (v458 - v459 >= 0x3F)
                    {
                      v464 = &v708;
                      if (v457 < 0)
                        v464 = (std::string *)v708.__r_.__value_.__r.__words[0];
                      v465 = (char *)v464 + v459;
                      if ((char *)v464 + v459 <= ". The id must be the same across all bundled media descriptions"
                        && v465 + 63 > ". The id must be the same across all bundled media descriptions")
                      {
                        goto LABEL_1391;
                      }
                      qmemcpy(v465, ". The id must be the same across all bundled media descriptions", 63);
                      v466 = v459 + 63;
                      if (v457 < 0)
                        v708.__r_.__value_.__l.__size_ = v459 + 63;
                      else
                        *((_BYTE *)&v708.__r_.__value_.__s + 23) = v466 & 0x7F;
                      v467 = (char *)v464 + v466;
                    }
                    else
                    {
                      v460 = v459 + 63;
                      if (0x7FFFFFFFFFFFFFF6 - v458 < v459 + 63 - v458)
                        goto LABEL_1425;
                      if (v457 >= 0)
                        v461 = &v708;
                      else
                        v461 = (std::string *)v708.__r_.__value_.__r.__words[0];
                      v462 = 0x7FFFFFFFFFFFFFF7;
                      if (v458 < 0x3FFFFFFFFFFFFFF3)
                      {
                        v463 = 2 * v458;
                        if (v460 > 2 * v458)
                          v463 = v459 + 63;
                        if (v463 >= 0x17)
                        {
                          v468 = (v463 & 0xFFFFFFFFFFFFFFF8) + 8;
                          v469 = v463 | 7;
                          if (v469 == 23)
                            v469 = v468;
                          v462 = v469 + 1;
                        }
                        else
                        {
                          v462 = 23;
                        }
                      }
                      v470 = (std::string *)operator new(v462);
                      v471 = (std::string::size_type)v470;
                      if (v459)
                      {
                        if (v461 >= v470 && (std::string *)((char *)v470 + v459) > v461)
                          goto LABEL_1391;
                        memmove(v470, v461, v459);
                      }
                      v472 = (char *)(v471 + v459);
                      if (v471 + v459 <= (unint64_t)". The id must be the same across all bundled media descriptions"
                        && v472 + 63 > ". The id must be the same across all bundled media descriptions")
                      {
                        goto LABEL_1391;
                      }
                      qmemcpy(v472, ". The id must be the same across all bundled media descriptions", 63);
                      if (v458 != 22)
                        operator delete(v461);
                      v708.__r_.__value_.__l.__size_ = v459 + 63;
                      v708.__r_.__value_.__r.__words[2] = v462 | 0x8000000000000000;
                      v708.__r_.__value_.__r.__words[0] = v471;
                      v467 = (_BYTE *)(v471 + v460);
                    }
                    *v467 = 0;
                    __src = v708;
                    memset(&v708, 0, sizeof(v708));
                    v473 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v475 = __src.__r_.__value_.__l.__size_;
                      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                        goto LABEL_1391;
                      v474 = (std::string *)__src.__r_.__value_.__r.__words[0];
                      if (__src.__r_.__value_.__l.__size_)
                      {
                        if (!__src.__r_.__value_.__r.__words[0])
                          goto LABEL_1391;
                      }
                      LODWORD(v695.__r_.__value_.__l.__data_) = 3;
                      if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
                        goto LABEL_1425;
                    }
                    else
                    {
                      LODWORD(v695.__r_.__value_.__l.__data_) = 3;
                      v474 = &__src;
                      v475 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                    }
                    if (v475 > 0x16)
                    {
                      v477 = (v475 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v475 | 7) != 0x17)
                        v477 = v475 | 7;
                      v478 = v477 + 1;
                      v476 = (std::string *)operator new(v477 + 1);
                      v695.__r_.__value_.__r.__words[2] = v475;
                      *(_QWORD *)v696 = v478 | 0x8000000000000000;
                      v695.__r_.__value_.__l.__size_ = (std::string::size_type)v476;
                    }
                    else
                    {
                      v696[7] = v475;
                      v476 = (std::string *)&v695.__r_.__value_.__r.__words[1];
                    }
                    v479 = (std::string *)((char *)v476 + v475);
                    if (v476 <= v474 && v479 > v474)
                      goto LABEL_1391;
                    if (v475)
                      memmove(v476, v474, v475);
                    v479->__r_.__value_.__s.__data_[0] = 0;
                    *(_DWORD *)&v696[8] = 0;
                    v696[12] = 0;
                    v696[14] = 0;
                    if (v473 < 0)
                    {
                      operator delete(__src.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v708.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v707.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v707.__r_.__value_.__l.__data_);
LABEL_847:
                    v354 = &v702;
                    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v692.__r_.__value_.__l.__data_);
                      if (LODWORD(v695.__r_.__value_.__l.__data_))
                        goto LABEL_1129;
                    }
                    else if (LODWORD(v695.__r_.__value_.__l.__data_))
                    {
                      goto LABEL_1129;
                    }
                    if ((v696[7] & 0x80000000) != 0)
                      operator delete((void *)v695.__r_.__value_.__l.__size_);
                    n += 32;
                  }
                }
              }
            }
            v7 += 24;
            v343 = v680;
            if (v7 == v682)
            {
              std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(v702);
              v344 = v678 + 1;
              if (v678 + 1 == (_QWORD *)v677)
                goto LABEL_1009;
              goto LABEL_686;
            }
            goto LABEL_690;
          }
          if (!memcmp(*(const void **)v346, v350, *(_QWORD *)(v346 + 8)))
            goto LABEL_709;
        }
LABEL_698:
        v346 += 40;
      }
      while (v346 != v347);
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      n = *(char *)(v7 + 23);
      if ((n & 0x80000000) == 0)
        v485 = *(unsigned __int8 *)(v7 + 23);
      else
        v485 = *(_QWORD *)(v7 + 8);
      v486 = v485 + 31;
      if (v485 + 31 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1425;
      if (v486 > 0x16)
      {
        v488 = (v486 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v486 | 7) != 0x17)
          v488 = v486 | 7;
        v489 = v488 + 1;
        v487 = (char *)operator new(v488 + 1);
        v708.__r_.__value_.__l.__size_ = v485 + 31;
        v708.__r_.__value_.__r.__words[2] = v489 | 0x8000000000000000;
        v708.__r_.__value_.__r.__words[0] = (std::string::size_type)v487;
      }
      else
      {
        memset(&v708, 0, sizeof(v708));
        v487 = (char *)&v708;
        *((_BYTE *)&v708.__r_.__value_.__s + 23) = v485 + 31;
      }
      v490 = v487 + 31;
      if (v487 <= "A BUNDLE group contains a MID='" && v490 > "A BUNDLE group contains a MID='")
        goto LABEL_1391;
      qmemcpy(v487, "A BUNDLE group contains a MID='", 31);
      v492 = (n & 0x80000000) == 0 ? (char *)v7 : *(char **)v7;
      n = (size_t)&v490[v485];
      if (v492 >= v490 && n > (unint64_t)v492)
        goto LABEL_1391;
      if (v485)
        memmove(v490, v492, v485);
      *(_BYTE *)n = 0;
      v494 = v708.__r_.__value_.__r.__words[2];
      if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v495 = 22;
      else
        v495 = (v708.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v496 = HIBYTE(v708.__r_.__value_.__r.__words[2]);
      else
        v496 = v708.__r_.__value_.__l.__size_;
      if (v495 - v496 >= 0x19)
      {
        v497 = &v708;
        if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v497 = (std::string *)v708.__r_.__value_.__r.__words[0];
        v498 = (char *)v497 + v496;
        if ((char *)v497 + v496 <= "' matching no m= section." && v498 + 25 > "' matching no m= section.")
          goto LABEL_1391;
        qmemcpy(v498, "' matching no m= section.", 25);
        v499 = v496 + 25;
        if ((v494 & 0x8000000000000000) != 0)
          v708.__r_.__value_.__l.__size_ = v496 + 25;
        else
          *((_BYTE *)&v708.__r_.__value_.__s + 23) = v499 & 0x7F;
        v497->__r_.__value_.__s.__data_[v499] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(&v708, v495, v496 - v495 + 25, v496, v496, 0, 0x19uLL, "' matching no m= section.");
      }
      __src = v708;
      memset(&v708, 0, sizeof(v708));
      v707.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
      v707.__r_.__value_.__l.__size_ = 17;
      rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v495, v480, v496, v481, v482, v483, v484, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__src.__r_.__value_.__l.__data_);
      if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v708.__r_.__value_.__l.__data_);
    }
    n = *(char *)(v7 + 23);
    if ((n & 0x80000000) == 0)
      v500 = *(unsigned __int8 *)(v7 + 23);
    else
      v500 = *(_QWORD *)(v7 + 8);
    v501 = v500 + 31;
    if (v500 + 31 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1425;
    if (v501 > 0x16)
    {
      v503 = (v501 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v501 | 7) != 0x17)
        v503 = v501 | 7;
      v504 = v503 + 1;
      v502 = (char *)operator new(v503 + 1);
      v708.__r_.__value_.__l.__size_ = v500 + 31;
      v708.__r_.__value_.__r.__words[2] = v504 | 0x8000000000000000;
      v708.__r_.__value_.__r.__words[0] = (std::string::size_type)v502;
    }
    else
    {
      memset(&v708, 0, sizeof(v708));
      v502 = (char *)&v708;
      *((_BYTE *)&v708.__r_.__value_.__s + 23) = v500 + 31;
    }
    v505 = v502 + 31;
    if (v502 <= "A BUNDLE group contains a MID='" && v505 > "A BUNDLE group contains a MID='")
      goto LABEL_1391;
    qmemcpy(v502, "A BUNDLE group contains a MID='", 31);
    v507 = (n & 0x80000000) == 0 ? (char *)v7 : *(char **)v7;
    n = (size_t)&v505[v500];
    if (v507 >= v505 && n > (unint64_t)v507)
      goto LABEL_1391;
    if (v500)
      memmove(v505, v507, v500);
    *(_BYTE *)n = 0;
    v509 = v708.__r_.__value_.__r.__words[2];
    if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = 22;
    else
      v7 = (v708.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v510 = HIBYTE(v708.__r_.__value_.__r.__words[2]);
    else
      v510 = v708.__r_.__value_.__l.__size_;
    if (v7 - v510 >= 0x19)
    {
      v514 = &v708;
      if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v514 = (std::string *)v708.__r_.__value_.__r.__words[0];
      v515 = (char *)v514 + v510;
      if ((char *)v514 + v510 <= "' matching no m= section." && v515 + 25 > "' matching no m= section.")
        goto LABEL_1391;
      qmemcpy(v515, "' matching no m= section.", 25);
      v516 = v510 + 25;
      v517 = (std::string *)&v695.__r_.__value_.__r.__words[1];
      if ((v509 & 0x8000000000000000) != 0)
        v708.__r_.__value_.__l.__size_ = v510 + 25;
      else
        *((_BYTE *)&v708.__r_.__value_.__s + 23) = v516 & 0x7F;
      v518 = (char *)v514 + v516;
    }
    else
    {
      n = v510 + 25;
      if (0x7FFFFFFFFFFFFFF6 - v7 < v510 + 25 - v7)
        goto LABEL_1425;
      if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v511 = &v708;
      else
        v511 = (std::string *)v708.__r_.__value_.__r.__words[0];
      v512 = 0x7FFFFFFFFFFFFFF7;
      if (v7 < 0x3FFFFFFFFFFFFFF3)
      {
        v513 = 2 * v7;
        if (n > 2 * v7)
          v513 = v510 + 25;
        if (v513 >= 0x17)
        {
          v519 = (v513 & 0xFFFFFFFFFFFFFFF8) + 8;
          v520 = v513 | 7;
          if (v520 == 23)
            v520 = v519;
          v512 = v520 + 1;
        }
        else
        {
          v512 = 23;
        }
      }
      v521 = (std::string *)operator new(v512);
      v522 = (std::string::size_type)v521;
      if (v510)
      {
        if (v511 >= v521 && (std::string *)((char *)v521 + v510) > v511)
          goto LABEL_1391;
        memmove(v521, v511, v510);
      }
      v523 = (char *)(v522 + v510);
      if (v522 + v510 <= (unint64_t)"' matching no m= section." && v523 + 25 > "' matching no m= section.")
        goto LABEL_1391;
      qmemcpy(v523, "' matching no m= section.", 25);
      if (v7 != 22)
        operator delete(v511);
      v708.__r_.__value_.__l.__size_ = v510 + 25;
      v708.__r_.__value_.__r.__words[2] = v512 | 0x8000000000000000;
      v708.__r_.__value_.__r.__words[0] = v522;
      v518 = (_BYTE *)(v522 + n);
      v517 = (std::string *)&v695.__r_.__value_.__r.__words[1];
    }
    *v518 = 0;
    __src = v708;
    memset(&v708, 0, sizeof(v708));
    n = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      v525 = __src.__r_.__value_.__l.__size_;
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_1391;
      v524 = (std::string *)__src.__r_.__value_.__r.__words[0];
      if (__src.__r_.__value_.__l.__size_)
      {
        if (!__src.__r_.__value_.__r.__words[0])
          goto LABEL_1391;
      }
      LODWORD(v695.__r_.__value_.__l.__data_) = 3;
      if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1425;
    }
    else
    {
      LODWORD(v695.__r_.__value_.__l.__data_) = 3;
      v524 = &__src;
      v525 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    }
    if (v525 > 0x16)
    {
      v526 = (v525 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v525 | 7) != 0x17)
        v526 = v525 | 7;
      v527 = v526 + 1;
      v517 = (std::string *)operator new(v526 + 1);
      v695.__r_.__value_.__r.__words[2] = v525;
      *(_QWORD *)v696 = v527 | 0x8000000000000000;
      v695.__r_.__value_.__l.__size_ = (std::string::size_type)v517;
    }
    else
    {
      v696[7] = v525;
    }
    v528 = (std::string *)((char *)v517 + v525);
    if (v517 <= v524 && v528 > v524)
      goto LABEL_1391;
    if (v525)
      memmove(v517, v524, v525);
    v528->__r_.__value_.__s.__data_[0] = 0;
    *(_DWORD *)&v696[8] = 0;
    v696[12] = 0;
    v696[14] = 0;
    if ((n & 0x80) != 0)
    {
      operator delete(__src.__r_.__value_.__l.__data_);
      if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v708.__r_.__value_.__l.__data_);
    }
LABEL_1129:
    std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(v702);
  }
  if (v706.__r_.__value_.__r.__words[0])
  {
    v706.__r_.__value_.__l.__size_ = v706.__r_.__value_.__r.__words[0];
    operator delete(v706.__r_.__value_.__l.__data_);
  }
  v7 = (std::string::size_type)&v694[32];
  v529 = (int)v695.__r_.__value_.__l.__data_;
  *(_DWORD *)v694 = v695.__r_.__value_.__l.__data_;
  if ((v694[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v694[8]);
    v529 = *(_DWORD *)v694;
  }
  v530 = (void (**)(webrtc::RtpCodec *__hidden))&v694[8];
  *(_OWORD *)&v694[8] = *(_OWORD *)&v695.__r_.__value_.__r.__words[1];
  *(_QWORD *)&v694[24] = *(_QWORD *)v696;
  *(_DWORD *)&v694[32] = *(_DWORD *)&v696[8];
  *(_DWORD *)&v694[35] = *(_DWORD *)&v696[11];
  if (v529)
    goto LABEL_1377;
  v531 = (__int128 **)(*(uint64_t (**)(size_t))(*(_QWORD *)p_src + 32))(p_src);
  v533 = *v531;
  v532 = v531[1];
  if (*v531 == v532)
  {
LABEL_1183:
    v529 = 0;
    LODWORD(__src.__r_.__value_.__l.__data_) = 0;
    v710[14] = 0;
    *(_QWORD *)v710 = 0;
    *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = 0uLL;
    n = (size_t)&__src;
    *(_QWORD *)&v710[5] = 0;
    goto LABEL_1374;
  }
  while (*((_DWORD *)v533 + 6))
  {
LABEL_1137:
    v533 = (__int128 *)((char *)v533 + 40);
    if (v533 == v532)
      goto LABEL_1183;
  }
  v534 = *((_QWORD *)v533 + 4);
  v535 = *(_QWORD *)(v534 + 96);
  v536 = *(_QWORD *)(v534 + 104);
LABEL_1141:
  if (v535 == v536)
    goto LABEL_1137;
  for (n = *(_QWORD *)(v535 + 48); ; n += 48)
  {
    if (n == *(_QWORD *)(v535 + 56))
    {
      v535 += 144;
      goto LABEL_1141;
    }
    v537 = *(unsigned __int8 *)(n + 23);
    v538 = (const std::string::value_type *)n;
    v539 = v537;
    if (*(char *)(n + 23) < 0)
    {
      v539 = *(_QWORD *)(n + 8);
      if (v539 < 0)
        goto LABEL_1391;
      v538 = *(const std::string::value_type **)n;
      if (v539 && v538 == 0)
        goto LABEL_1391;
    }
    if (v539 == 3)
    {
      v541 = *(unsigned __int16 *)v538;
      v542 = *((unsigned __int8 *)v538 + 2);
      v543 = v541 == *(unsigned __int16 *)"FID" && v542 == cricket::kFidSsrcGroupSemantics[2];
      if (v543 && *(_QWORD *)(n + 32) - *(_QWORD *)(n + 24) != 8)
        break;
    }
    v544 = (const std::string::value_type *)n;
    v545 = *(unsigned __int8 *)(n + 23);
    if ((v537 & 0x80) != 0)
    {
      v545 = *(_QWORD *)(n + 8);
      if (v545 < 0)
        goto LABEL_1391;
      v544 = *(const std::string::value_type **)n;
      if (v545)
      {
        if (!v544)
          goto LABEL_1391;
      }
    }
    if (v545 == 6)
    {
      v546 = *(_DWORD *)v544;
      v547 = *((unsigned __int16 *)v544 + 2);
      v548 = v546 == *(_DWORD *)"FEC-FR" && v547 == *(unsigned __int16 *)"FR";
      if (v548 && *(_QWORD *)(n + 32) - *(_QWORD *)(n + 24) != 8)
        break;
    }
    v549 = (const std::string::value_type *)n;
    if ((v537 & 0x80) != 0)
    {
      v537 = *(_QWORD *)(n + 8);
      if (v537 < 0)
        goto LABEL_1391;
      v549 = *(const std::string::value_type **)n;
      if (v537)
      {
        if (!v549)
          goto LABEL_1391;
      }
    }
    if (v537 == 3)
    {
      v550 = *(unsigned __int16 *)v549;
      v551 = *((unsigned __int8 *)v549 + 2);
      v552 = v550 == *(unsigned __int16 *)"SIM" && v551 == cricket::kSimSsrcGroupSemantics[2];
      if (v552 && *(_QWORD *)(n + 32) - *(_QWORD *)(n + 24) >= 0xDuLL)
        break;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    goto LABEL_1244;
  if (*((char *)v533 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v707, *(const std::string::value_type **)v533, *((_QWORD *)v533 + 1));
  }
  else
  {
    v553 = *v533;
    v707.__r_.__value_.__r.__words[2] = *((_QWORD *)v533 + 2);
    *(_OWORD *)&v707.__r_.__value_.__l.__data_ = v553;
  }
  v554 = std::string::insert(&v707, 0, "The media section with MID='");
  v559 = v554->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v708.__r_.__value_.__l.__data_ = *(_OWORD *)&v554->__r_.__value_.__l.__data_;
  v708.__r_.__value_.__r.__words[2] = v559;
  v554->__r_.__value_.__l.__size_ = 0;
  v554->__r_.__value_.__r.__words[2] = 0;
  v554->__r_.__value_.__r.__words[0] = 0;
  v560 = v708.__r_.__value_.__r.__words[2];
  if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v561 = 22;
  else
    v561 = (v708.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v562 = HIBYTE(v708.__r_.__value_.__r.__words[2]);
  else
    v562 = v708.__r_.__value_.__l.__size_;
  if (v561 - v562 < 0x22)
  {
    std::string::__grow_by_and_replace(&v708, v561, v562 - v561 + 34, v562, v562, 0, 0x22uLL, "' has a ssrc-group with semantics ");
    goto LABEL_1201;
  }
  v563 = &v708;
  if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v563 = (std::string *)v708.__r_.__value_.__r.__words[0];
  v564 = (char *)v563 + v562;
  if ((char *)v563 + v562 <= "' has a ssrc-group with semantics " && v564 + 34 > "' has a ssrc-group with semantics ")
    goto LABEL_1391;
  qmemcpy(v564, "' has a ssrc-group with semantics ", 34);
  v565 = v562 + 34;
  if ((v560 & 0x8000000000000000) != 0)
    v708.__r_.__value_.__l.__size_ = v562 + 34;
  else
    *((_BYTE *)&v708.__r_.__value_.__s + 23) = v565 & 0x7F;
  v563->__r_.__value_.__s.__data_[v565] = 0;
LABEL_1201:
  v692 = v708;
  memset(&v708, 0, sizeof(v708));
  if (*(char *)(n + 23) < 0)
  {
    v568 = *(const std::string::value_type **)n;
    v566 = *(_QWORD *)(n + 8);
    v567 = v566 == 0;
    if (*(_QWORD *)n || !v566)
      goto LABEL_1205;
    goto LABEL_1391;
  }
  v566 = *(unsigned __int8 *)(n + 23);
  v567 = *(_BYTE *)(n + 23) == 0;
  v568 = (const std::string::value_type *)n;
LABEL_1205:
  if ((v692.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v569 = 22;
  else
    v569 = (v692.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v692.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v570 = HIBYTE(v692.__r_.__value_.__r.__words[2]);
  else
    v570 = v692.__r_.__value_.__l.__size_;
  if (v569 - v570 < v566)
  {
    std::string::__grow_by_and_replace(&v692, v569, v570 + v566 - v569, v570, v570, 0, v566, v568);
    goto LABEL_1223;
  }
  if (!v567)
  {
    if ((v692.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v571 = &v692;
    else
      v571 = (std::string *)v692.__r_.__value_.__r.__words[0];
    v572 = (char *)v571 + v570;
    if ((char *)v571 + v570 > v568 || &v572[v566] <= v568)
    {
      memmove(v572, v568, v566);
      v573 = v570 + v566;
      if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
        v692.__r_.__value_.__l.__size_ = v570 + v566;
      else
        *((_BYTE *)&v692.__r_.__value_.__s + 23) = v573 & 0x7F;
      v571->__r_.__value_.__s.__data_[v573] = 0;
      goto LABEL_1223;
    }
LABEL_1391:
    __break(1u);
LABEL_1392:
    operator delete(v708.__r_.__value_.__l.__data_);
    if (SHIBYTE(v707.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1393;
LABEL_1372:
    if ((SHIBYTE(v706.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1373;
LABEL_1394:
    operator delete(v706.__r_.__value_.__l.__data_);
    goto LABEL_1373;
  }
LABEL_1223:
  v574 = v692.__r_.__value_.__r.__words[2];
  v695 = v692;
  memset(&v692, 0, sizeof(v692));
  if ((v695.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v575 = 22;
  else
    v575 = (v695.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v695.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v576 = HIBYTE(v695.__r_.__value_.__r.__words[2]);
  else
    v576 = v695.__r_.__value_.__l.__size_;
  if (v575 - v576 >= 0x23)
  {
    v577 = &v695;
    if ((v695.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v577 = (std::string *)v695.__r_.__value_.__r.__words[0];
    v578 = (char *)v577 + v576;
    if ((char *)v577 + v576 <= " and an unexpected number of SSRCs."
      && v578 + 35 > " and an unexpected number of SSRCs.")
    {
      goto LABEL_1391;
    }
    qmemcpy(v578, " and an unexpected number of SSRCs.", 35);
    v579 = v576 + 35;
    if ((v574 & 0x8000000000000000) != 0)
      v695.__r_.__value_.__l.__size_ = v576 + 35;
    else
      *((_BYTE *)&v695.__r_.__value_.__s + 23) = v579 & 0x7F;
    v577->__r_.__value_.__s.__data_[v579] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v695, v575, v576 - v575 + 35, v576, v576, 0, 0x23uLL, " and an unexpected number of SSRCs.");
  }
  __src = v695;
  memset(&v695, 0, sizeof(v695));
  v706.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
  v706.__r_.__value_.__l.__size_ = 17;
  rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v575, v555, v576, v556, v557, v558, (uint64_t)v568, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__src.__r_.__value_.__l.__data_);
    if (SHIBYTE(v695.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1247;
LABEL_1241:
    if ((SHIBYTE(v692.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1242;
LABEL_1248:
    operator delete(v692.__r_.__value_.__l.__data_);
    if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1249;
LABEL_1243:
    if ((SHIBYTE(v707.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1244;
LABEL_1250:
    operator delete(v707.__r_.__value_.__l.__data_);
    if (*((char *)v533 + 23) < 0)
      goto LABEL_1251;
LABEL_1245:
    v580 = *v533;
    v706.__r_.__value_.__r.__words[2] = *((_QWORD *)v533 + 2);
    *(_OWORD *)&v706.__r_.__value_.__l.__data_ = v580;
  }
  else
  {
    if ((SHIBYTE(v695.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1241;
LABEL_1247:
    operator delete(v695.__r_.__value_.__l.__data_);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1248;
LABEL_1242:
    if ((SHIBYTE(v708.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1243;
LABEL_1249:
    operator delete(v708.__r_.__value_.__l.__data_);
    if (SHIBYTE(v707.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_1250;
LABEL_1244:
    if ((*((char *)v533 + 23) & 0x80000000) == 0)
      goto LABEL_1245;
LABEL_1251:
    std::string::__init_copy_ctor_external(&v706, *(const std::string::value_type **)v533, *((_QWORD *)v533 + 1));
  }
  v581 = v706.__r_.__value_.__r.__words[2];
  if ((v706.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v582 = HIBYTE(v706.__r_.__value_.__r.__words[2]);
  else
    v582 = v706.__r_.__value_.__l.__size_;
  if ((v706.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v583 = 22;
  else
    v583 = (v706.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v583 - v582 >= 0x1C)
  {
    if ((v706.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v588 = &v706;
    else
      v588 = (std::string *)v706.__r_.__value_.__r.__words[0];
    v589 = "The media section with MID='";
    if (v582)
    {
      v590 = (char *)v588 + v582 <= "The media section with MID='"
          || v588 > (std::string *)"The media section with MID='";
      v591 = 28;
      if (v590)
        v591 = 0;
      v589 = &aTheMediaSectio[v591];
      if ((v706.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v592 = &v706;
      else
        v592 = (std::string *)v706.__r_.__value_.__r.__words[0];
      memmove((char *)v592[1].__r_.__value_.__r.__words + 4, v588, v582);
    }
    *(_OWORD *)&v588->__r_.__value_.__l.__data_ = *(_OWORD *)v589;
    *(_OWORD *)((char *)&v588->__r_.__value_.__r.__words[1] + 4) = *(_OWORD *)(v589 + 12);
    v593 = v582 + 28;
    if ((v581 & 0x8000000000000000) != 0)
      v706.__r_.__value_.__l.__size_ = v582 + 28;
    else
      *((_BYTE *)&v706.__r_.__value_.__s + 23) = v593 & 0x7F;
    v594 = (char *)v588 + v593;
    goto LABEL_1298;
  }
  v584 = v582 + 28;
  if (0x7FFFFFFFFFFFFFF6 - v583 < v582 + 28 - v583)
    goto LABEL_1425;
  if ((v706.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v585 = &v706;
  else
    v585 = (std::string *)v706.__r_.__value_.__r.__words[0];
  v586 = 0x7FFFFFFFFFFFFFF7;
  if (v583 < 0x3FFFFFFFFFFFFFF3)
  {
    v587 = 2 * v583;
    if (v584 > 2 * v583)
      v587 = v582 + 28;
    if (v587 >= 0x17)
    {
      v595 = (v587 & 0xFFFFFFFFFFFFFFF8) + 8;
      v596 = v587 | 7;
      if (v596 == 23)
        v596 = v595;
      v586 = v596 + 1;
    }
    else
    {
      v586 = 23;
    }
  }
  v597 = (char *)operator new(v586);
  v598 = (std::string *)(v597 + 28);
  if (v597 <= "The media section with MID='" && v598 > (std::string *)"The media section with MID='")
    goto LABEL_1391;
  qmemcpy(v597, "The media section with MID='", 28);
  if (v582)
  {
    if (v585 >= v598 && (std::string *)((char *)v598 + v582) > v585)
      goto LABEL_1391;
    memmove(v598, v585, v582);
  }
  if (v583 != 22)
    operator delete(v585);
  v706.__r_.__value_.__l.__size_ = v582 + 28;
  v706.__r_.__value_.__r.__words[2] = v586 | 0x8000000000000000;
  v706.__r_.__value_.__r.__words[0] = (std::string::size_type)v597;
  v594 = &v597[v584];
LABEL_1298:
  *v594 = 0;
  v599 = v706.__r_.__value_.__r.__words[2];
  v707 = v706;
  memset(&v706, 0, sizeof(v706));
  if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v600 = 22;
  else
    v600 = (v707.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v601 = HIBYTE(v707.__r_.__value_.__r.__words[2]);
  else
    v601 = v707.__r_.__value_.__l.__size_;
  if (v600 - v601 >= 0x22)
  {
    v602 = &v707;
    if ((v707.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v602 = (std::string *)v707.__r_.__value_.__r.__words[0];
    v603 = (char *)v602 + v601;
    if ((char *)v602 + v601 <= "' has a ssrc-group with semantics " && v603 + 34 > "' has a ssrc-group with semantics ")
      goto LABEL_1391;
    qmemcpy(v603, "' has a ssrc-group with semantics ", 34);
    v604 = v601 + 34;
    if ((v599 & 0x8000000000000000) != 0)
      v707.__r_.__value_.__l.__size_ = v601 + 34;
    else
      *((_BYTE *)&v707.__r_.__value_.__s + 23) = v604 & 0x7F;
    v602->__r_.__value_.__s.__data_[v604] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v707, v600, v601 - v600 + 34, v601, v601, 0, 0x22uLL, "' has a ssrc-group with semantics ");
  }
  v708 = v707;
  memset(&v707, 0, sizeof(v707));
  if (*(char *)(n + 23) < 0)
  {
    v607 = *(const std::string::value_type **)n;
    v605 = *(_QWORD *)(n + 8);
    v606 = v605 == 0;
    if (!*(_QWORD *)n && v605)
      goto LABEL_1391;
  }
  else
  {
    v605 = *(unsigned __int8 *)(n + 23);
    v606 = *(_BYTE *)(n + 23) == 0;
    v607 = (const std::string::value_type *)n;
  }
  if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v608 = 22;
  else
    v608 = (v708.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v609 = HIBYTE(v708.__r_.__value_.__r.__words[2]);
  else
    v609 = v708.__r_.__value_.__l.__size_;
  if (v608 - v609 >= v605)
  {
    if (!v606)
    {
      if ((v708.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        n = (size_t)&v708;
      else
        n = v708.__r_.__value_.__r.__words[0];
      v610 = (char *)(n + v609);
      if (n + v609 <= (unint64_t)v607 && &v610[v605] > v607)
        goto LABEL_1391;
      memmove(v610, v607, v605);
      v611 = v609 + v605;
      if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0)
        v708.__r_.__value_.__l.__size_ = v609 + v605;
      else
        *((_BYTE *)&v708.__r_.__value_.__s + 23) = v611 & 0x7F;
      *(_BYTE *)(n + v611) = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v708, v608, v609 + v605 - v608, v609, v609, 0, v605, v607);
  }
  v692 = v708;
  v612 = v708.__r_.__value_.__r.__words[2];
  memset(&v708, 0, sizeof(v708));
  if (v612 >= 0)
    v613 = 22;
  else
    v613 = (v612 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v612 >= 0)
    v614 = HIBYTE(v612);
  else
    v614 = v692.__r_.__value_.__l.__size_;
  if (v613 - v614 >= 0x23)
  {
    v615 = &v692;
    if (v612 < 0)
      v615 = (std::string *)v692.__r_.__value_.__r.__words[0];
    v616 = (char *)v615 + v614;
    if ((char *)v615 + v614 <= " and an unexpected number of SSRCs."
      && v616 + 35 > " and an unexpected number of SSRCs.")
    {
      goto LABEL_1391;
    }
    qmemcpy(v616, " and an unexpected number of SSRCs.", 35);
    v617 = v614 + 35;
    if (v612 < 0)
      v692.__r_.__value_.__l.__size_ = v614 + 35;
    else
      *((_BYTE *)&v692.__r_.__value_.__s + 23) = v617 & 0x7F;
    v615->__r_.__value_.__s.__data_[v617] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v692, v613, v614 - v613 + 35, v614, v614, 0, 0x23uLL, " and an unexpected number of SSRCs.");
  }
  v695 = v692;
  memset(&v692, 0, sizeof(v692));
  n = HIBYTE(v695.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v695.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(__src.__r_.__value_.__l.__data_) = 3;
    v618 = &v695;
    v619 = HIBYTE(v695.__r_.__value_.__r.__words[2]);
    goto LABEL_1358;
  }
  v619 = v695.__r_.__value_.__l.__size_;
  if ((v695.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_1391;
  v618 = (std::string *)v695.__r_.__value_.__r.__words[0];
  if (v695.__r_.__value_.__l.__size_)
  {
    if (!v695.__r_.__value_.__r.__words[0])
      goto LABEL_1391;
  }
  LODWORD(__src.__r_.__value_.__l.__data_) = 3;
  if (v695.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_1425;
LABEL_1358:
  if (v619 > 0x16)
  {
    v621 = (v619 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v619 | 7) != 0x17)
      v621 = v619 | 7;
    v622 = v621 + 1;
    v620 = (std::string *)operator new(v621 + 1);
    __src.__r_.__value_.__r.__words[2] = v619;
    *(_QWORD *)v710 = v622 | 0x8000000000000000;
    __src.__r_.__value_.__l.__size_ = (std::string::size_type)v620;
  }
  else
  {
    v620 = (std::string *)&__src.__r_.__value_.__r.__words[1];
    v710[7] = v619;
  }
  v623 = (std::string *)((char *)v620 + v619);
  if (v620 <= v618 && v623 > v618)
    goto LABEL_1391;
  if (v619)
    memmove(v620, v618, v619);
  v623->__r_.__value_.__s.__data_[0] = 0;
  *(_DWORD *)&v710[8] = 0;
  v710[12] = 0;
  v710[14] = 0;
  if ((n & 0x80) != 0)
  {
    operator delete(v695.__r_.__value_.__l.__data_);
    if (SHIBYTE(v692.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v692.__r_.__value_.__l.__data_);
  }
  n = (size_t)&__src;
  if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_1392;
  if ((SHIBYTE(v707.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_1372;
LABEL_1393:
  operator delete(v707.__r_.__value_.__l.__data_);
  if (SHIBYTE(v706.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_1394;
LABEL_1373:
  v529 = (int)__src.__r_.__value_.__l.__data_;
LABEL_1374:
  *(_DWORD *)v694 = v529;
  v530 = v683;
  if ((v694[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v694[8]);
    v530 = v683;
    v529 = *(_DWORD *)v694;
  }
  *(_OWORD *)v530 = *(_OWORD *)(n + 8);
  v530[2] = *(void (**)(webrtc::RtpCodec *__hidden))v710;
  *(_DWORD *)v7 = *(_DWORD *)&v710[8];
  *(_DWORD *)(v7 + 3) = *(_DWORD *)(n + 35);
  if (v529)
  {
LABEL_1377:
    *(_DWORD *)a1 = v529;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v530;
    *(_QWORD *)(a1 + 24) = v530[2];
    *v530 = 0;
    v530[1] = 0;
    v530[2] = 0;
    goto LABEL_1378;
  }
  v624 = v690[1];
  v625 = (*(uint64_t (**)(size_t))(*(_QWORD *)p_src + 32))(p_src);
  if (((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v624 + 200))(v624, v625, *(int **)v691) & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
      __src.__r_.__value_.__l.__size_ = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v640, v641, v642, v643, v644, v645, v646, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    }
    webrtc::RTCError::RTCError(a1, 3, "rtcp-mux must be enabled when BUNDLE is enabled.", 0x30uLL);
    goto LABEL_491;
  }
  v626 = (const cricket::SessionDescription **)(*(uint64_t (**)(size_t))(*(_QWORD *)p_src + 32))(p_src);
  v529 = (int)__src.__r_.__value_.__l.__data_;
  *(_DWORD *)v694 = __src.__r_.__value_.__l.__data_;
  if ((v694[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v694[8]);
    v529 = *(_DWORD *)v694;
  }
  v530 = v683;
  *(_OWORD *)v683 = *(_OWORD *)(n + 8);
  v683[2] = *(void (**)(webrtc::RtpCodec *__hidden))v710;
  *(_DWORD *)v7 = *(_DWORD *)&v710[8];
  *(_DWORD *)(v7 + 3) = *(_DWORD *)(n + 35);
  if (v529)
    goto LABEL_1377;
  v627 = *v690;
  if ((v684 - 1) <= 1)
  {
    v628 = 24;
    if (!v686)
      v628 = 32;
    v629 = (*(uint64_t (**)(_QWORD *))(v627 + v628))(v690);
    v630 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v629 + 32))(v629);
    v631 = (_QWORD *)(*(uint64_t (**)(size_t))(*(_QWORD *)p_src + 32))(p_src);
    if (v630[1] - *v630 != v631[1] - *v631
      || (v632 = (uint64_t *)(*(uint64_t (**)(size_t))(*(_QWORD *)p_src + 32))(p_src),
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
        __src.__r_.__value_.__l.__size_ = 17;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v633, v634, v635, v636, v637, v638, v639, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      }
      webrtc::RTCError::RTCError(a1, 3, "The order of m-lines in answer doesn't match order in offer. Rejecting answer.", 0x4EuLL);
      goto LABEL_491;
    }
LABEL_1406:
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v690[1] + 192))(v690[1]))
      goto LABEL_1418;
    v655 = (uint64_t *)(*(uint64_t (**)(size_t))(*(_QWORD *)p_src + 32))(p_src);
    v656 = *v655;
    v657 = v655[1];
    if (*v655 != v657)
    {
      while (1)
      {
        v658 = *(_QWORD **)(v656 + 32);
        if ((!(*(unsigned int (**)(_QWORD *))(*v658 + 16))(v658)
           || (*(unsigned int (**)(_QWORD *))(*v658 + 16))(v658) == 1)
          && 0x8E38E38E38E38E39 * ((uint64_t)(v658[13] - v658[12]) >> 4) >= 2)
        {
          break;
        }
        v656 += 40;
        if (v656 == v657)
          goto LABEL_1414;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
        __src.__r_.__value_.__l.__size_ = 17;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v668, v669, v670, v671, v672, v673, v674, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      }
      webrtc::RTCError::RTCError(a1, 3, "Media section has more than one track specified with a=ssrc lines which is not supported with Unified Plan.", 0x6BuLL);
      goto LABEL_491;
    }
LABEL_1414:
    v659 = (const cricket::SessionDescription **)(*(uint64_t (**)(size_t))(*(_QWORD *)p_src + 32))(p_src);
    v660 = (int)__src.__r_.__value_.__l.__data_;
    *(_DWORD *)v694 = __src.__r_.__value_.__l.__data_;
    if ((v694[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v694[8]);
      v660 = *(_DWORD *)v694;
    }
    *(_OWORD *)v683 = *(_OWORD *)&__src.__r_.__value_.__r.__words[1];
    v683[2] = *(void (**)(webrtc::RtpCodec *__hidden))v710;
    *(_DWORD *)v7 = *(_DWORD *)&v710[8];
    *(_DWORD *)(v7 + 3) = *(_DWORD *)&v710[11];
    if (!v660)
    {
LABEL_1418:
      *(_DWORD *)a1 = 0;
      *(_BYTE *)(a1 + 38) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 29) = 0;
      goto LABEL_491;
    }
    *(_DWORD *)a1 = v660;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v683;
    *(_QWORD *)(a1 + 24) = v683[2];
    *v683 = 0;
    v683[1] = 0;
    v683[2] = 0;
LABEL_1378:
    *(_DWORD *)(a1 + 32) = *(_DWORD *)v7;
    v22 = *(_DWORD *)(v7 + 3);
LABEL_23:
    *(_DWORD *)(a1 + 35) = v22;
    goto LABEL_491;
  }
  v647 = (*(uint64_t (**)(_QWORD *))(v627 + 24))(v690);
  v648 = *v690;
  if (v647)
  {
    v649 = (*(uint64_t (**)(_QWORD *))(v648 + 24))(v690);
    v650 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v649 + 32))(v649);
    if ((*(uint64_t (**)(_QWORD *))(*v690 + 32))(v690))
    {
      v651 = (*(uint64_t (**)(_QWORD *))(*v690 + 32))(v690);
      v652 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v651 + 32))(v651);
      goto LABEL_1404;
    }
  }
  else
  {
    if (!(*(uint64_t (**)(_QWORD *))(v648 + 32))(v690))
      goto LABEL_1406;
    v653 = (*(uint64_t (**)(_QWORD *))(*v690 + 32))(v690);
    v650 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v653 + 32))(v653);
  }
  v652 = 0;
LABEL_1404:
  if (!v650)
    goto LABEL_1406;
  v654 = (uint64_t *)(*(uint64_t (**)(size_t))(*(_QWORD *)p_src + 32))(p_src);
    goto LABEL_1406;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
    __src.__r_.__value_.__l.__size_ = 17;
    rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v661, v662, v663, v664, v665, v666, v667, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
  }
  webrtc::RTCError::RTCError(a1, 3, "The order of m-lines in subsequent offer doesn't match order from previous offer/answer.", 0x58uLL);
LABEL_491:
  if ((v694[31] & 0x80000000) != 0)
  {
    v85 = *(void **)&v694[8];
LABEL_493:
    operator delete(v85);
  }
}

void webrtc::`anonymous namespace'::GetSetDescriptionErrorMessage(std::string *a1, int a2, unsigned int a3, uint64_t a4)
{
  BOOL v8;
  char *v9;
  size_t v10;
  unsigned __int8 v11;
  std::string::size_type size;
  std::string::size_type v13;
  const char *v14;
  uint64_t v15;
  _BYTE *v16;
  std::string::size_type v17;
  size_t v18;
  size_t v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string *v22;
  char *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string::size_type v26;
  const char *v27;
  std::string *v28;
  char *v29;
  std::string::size_type v30;
  size_t v31;
  size_t v32;
  std::string::size_type v33;
  std::string::size_type v34;
  std::string *v35;
  char *v36;
  std::string::size_type v37;
  std::string v38;

  memset(&v38, 0, sizeof(v38));
  if (&v38 <= (std::string *)"Failed to set " && (char *)&v38.__r_.__value_.__r.__words[1] + 6 > "Failed to set ")
    goto LABEL_88;
  strcpy((char *)&v38, "Failed to set ");
  *((_BYTE *)&v38.__r_.__value_.__s + 23) = 14;
  v8 = a2 == 0;
  v9 = a2 ? "remote" : "local";
  v10 = v8 ? 5 : 6;
  if ((char *)&v38.__r_.__value_.__r.__words[1] + 6 <= v9 && (char *)&v38.__r_.__value_.__r.__words[1] + v10 + 6 > v9)
    goto LABEL_88;
  memcpy((char *)&v38.__r_.__value_.__r.__words[1] + 6, v9, v10);
  v11 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
  {
    v38.__r_.__value_.__l.__size_ = v10 + 14;
    size = v10 + 14;
  }
  else
  {
    *((_BYTE *)&v38.__r_.__value_.__s + 23) = v10 + 14;
    size = v38.__r_.__value_.__l.__size_;
    v11 = v10 + 14;
  }
  v38.__r_.__value_.__s.__data_[v10 + 14] = 0;
  if ((v11 & 0x80u) == 0)
    v13 = 22;
  else
    v13 = (v38.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v11 & 0x80u) == 0)
    size = v11;
  if (v13 == size)
  {
    std::string::__grow_by_and_replace(&v38, v13, 1uLL, v13, v13, 0, 1uLL, " ");
    if (a3 <= 3)
    {
LABEL_23:
      v14 = off_24C0C0928[a3];
      goto LABEL_31;
    }
  }
  else
  {
    v15 = 0x742064656C696146;
    if ((v11 & 0x80u) == 0)
      v15 = (uint64_t)&v38;
    v16 = (_BYTE *)(v15 + size);
    if (v15 + size <= (unint64_t)" " && v16 + 1 > " ")
      goto LABEL_88;
    *v16 = 32;
    v17 = size + 1;
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      v38.__r_.__value_.__l.__size_ = v17;
      *(_BYTE *)(v15 + v17) = 0;
      if (a3 <= 3)
        goto LABEL_23;
    }
    else
    {
      *((_BYTE *)&v38.__r_.__value_.__s + 23) = v17 & 0x7F;
      *(_BYTE *)(v15 + v17) = 0;
      if (a3 <= 3)
        goto LABEL_23;
    }
  }
  v14 = "";
LABEL_31:
  v18 = strlen(v14);
  v19 = v18;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = 22;
  else
    v20 = (v38.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  else
    v21 = v38.__r_.__value_.__l.__size_;
  if (v20 - v21 >= v18)
  {
    if (v18)
    {
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v38;
      else
        v22 = (std::string *)v38.__r_.__value_.__r.__words[0];
      v23 = (char *)v22 + v21;
      if ((char *)v22 + v21 <= v14 && &v23[v19] > v14)
        goto LABEL_88;
      memcpy(v23, v14, v19);
      v24 = v21 + v19;
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        v38.__r_.__value_.__l.__size_ = v21 + v19;
      else
        *((_BYTE *)&v38.__r_.__value_.__s + 23) = v24 & 0x7F;
      v22->__r_.__value_.__s.__data_[v24] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v38, v20, v21 + v18 - v20, v21, v21, 0, v18, v14);
  }
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = 22;
  else
    v25 = (v38.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  else
    v26 = v38.__r_.__value_.__l.__size_;
  if (v25 - v26 >= 6)
  {
    v28 = &v38;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = (std::string *)v38.__r_.__value_.__r.__words[0];
    v29 = (char *)v28 + v26;
    if ((char *)v28 + v26 <= " sdp: " && v29 + 6 > " sdp: ")
      goto LABEL_88;
    *((_WORD *)v29 + 2) = 8250;
    *(_DWORD *)v29 = 1885631264;
    v30 = v26 + 6;
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      v38.__r_.__value_.__l.__size_ = v26 + 6;
      v28->__r_.__value_.__s.__data_[v30] = 0;
      v27 = (const char *)(a4 + 8);
      if (*(char *)(a4 + 31) < 0)
        goto LABEL_68;
    }
    else
    {
      *((_BYTE *)&v38.__r_.__value_.__s + 23) = v30 & 0x7F;
      v28->__r_.__value_.__s.__data_[v30] = 0;
      v27 = (const char *)(a4 + 8);
      if (*(char *)(a4 + 31) < 0)
      {
LABEL_68:
        v27 = *(const char **)v27;
        if (!v27)
          goto LABEL_88;
      }
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v38, v25, v26 - v25 + 6, v26, v26, 0, 6uLL, " sdp: ");
    v27 = (const char *)(a4 + 8);
    if (*(char *)(a4 + 31) < 0)
      goto LABEL_68;
  }
  v31 = strlen(v27);
  v32 = v31;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = 22;
  else
    v33 = (v38.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  else
    v34 = v38.__r_.__value_.__l.__size_;
  if (v33 - v34 < v31)
  {
    std::string::__grow_by_and_replace(&v38, v33, v34 + v31 - v33, v34, v34, 0, v31, v27);
LABEL_87:
    *a1 = v38;
    return;
  }
  if (!v31)
    goto LABEL_87;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v38;
  else
    v35 = (std::string *)v38.__r_.__value_.__r.__words[0];
  v36 = (char *)v35 + v34;
  if ((char *)v35 + v34 > v27 || &v36[v32] <= v27)
  {
    memmove(v36, v27, v32);
    v37 = v34 + v32;
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      v38.__r_.__value_.__l.__size_ = v34 + v32;
    else
      *((_BYTE *)&v38.__r_.__value_.__s + 23) = v37 & 0x7F;
    v35->__r_.__value_.__s.__data_[v37] = 0;
    goto LABEL_87;
  }
LABEL_88:
  __break(1u);
}

std::string *webrtc::SdpOfferAnswerHandler::SetSessionError(std::string *result, std::string *a2)
{
  std::string *v2;
  __int128 v3;
  size_t size;
  size_t v5;

  if (LODWORD(result[9].__r_.__value_.__r.__words[2]) != 1)
  {
    v2 = result;
    LODWORD(result[9].__r_.__value_.__r.__words[2]) = 1;
    result += 10;
    if (result != a2)
    {
      if (SHIBYTE(v2[10].__r_.__value_.__r.__words[2]) < 0)
      {
        size = a2->__r_.__value_.__l.__size_;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        }
        else
        {
          a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
          v5 = size;
        }
        return std::string::__assign_no_alias<false>(result, (const std::string::value_type *)a2, v5);
      }
      else if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
      {
        return (std::string *)std::string::__assign_no_alias<true>(result, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else
      {
        v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        result->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
        *(_OWORD *)&result->__r_.__value_.__l.__data_ = v3;
      }
    }
  }
  return result;
}

char **std::string::basic_string[abi:sn180100]<0>(char **a1, char *__s)
{
  size_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  if (!__s)
    goto LABEL_15;
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_16;
  v5 = v4;
  if (v4 > 0x16)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (char *)operator new(v7 + 1);
    a1[1] = (char *)v5;
    a1[2] = (char *)(v8 | 0x8000000000000000);
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = (char *)a1;
  }
  v9 = &v6[v5];
  if (v6 <= __s && v9 > __s)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    abort();
  }
  if (v5)
    memmove(v6, __s, v5);
  *v9 = 0;
  return a1;
}

void webrtc::SdpOfferAnswerHandler::DoCreateOffer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (***v15)(_QWORD);
  size_t v16;
  _QWORD *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (***v35)(_QWORD);
  size_t v36;
  _QWORD *v37;
  _BYTE *v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (***v49)(_QWORD);
  size_t v50;
  char *p_p;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v67;
  int v68;
  _QWORD *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  void *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  int v92;
  char *v93;
  char *v94;
  __int128 v95;
  uint64_t v96;
  void (***v97)(_QWORD);
  uint64_t v98;
  int v99;
  webrtc::RtpTransmissionManager *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  char *v106;
  uint64_t v107;
  void (***v108)(_QWORD);
  _BOOL4 v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  _BOOL4 v114;
  _BOOL4 v115;
  _BOOL4 v116;
  int v117;
  char v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _BOOL4 v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t **v139;
  uint64_t *v140;
  __int128 v141;
  __int128 v142;
  char *v143;
  __int128 v144;
  char *v145;
  char *v146;
  char *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  __int128 v152;
  uint64_t v153;
  char v154;
  std::string::size_type v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  char *v170;
  __int128 v171;
  char *v172;
  char *v173;
  char *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  __int128 v179;
  char *v180;
  void (****v181)(_QWORD);
  webrtc::TransceiverList *v182;
  char *v183;
  char *v184;
  unsigned int *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  void **v197;
  unint64_t v198;
  __int128 v199;
  uint64_t v200;
  int v201;
  int v202;
  size_t v203;
  char *v204;
  uint64_t v205;
  int Number;
  int v207;
  size_t v208;
  _BYTE *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _BYTE *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  __int128 v219;
  char *v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  cricket::MediaDescriptionOptions *v233;
  int v235;
  int v236;
  size_t v237;
  _BYTE *v238;
  webrtc::RtpTransmissionManager *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  size_t v244;
  char *v245;
  uint64_t v246;
  void (***v247)(_QWORD);
  unint64_t v248;
  uint64_t v249;
  int v250;
  int v251;
  int v252;
  char v253;
  uint64_t v254;
  int v255;
  int v256;
  int v257;
  int v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  cricket::MediaDescriptionOptions *v268;
  int v269;
  char v270;
  int v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  cricket::MediaDescriptionOptions *v277;
  char *v278;
  char *v279;
  webrtc::RtpTransmissionManager *v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  __int128 v287;
  char *v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  _BYTE *v292;
  char *v293;
  __int128 v294;
  char *v295;
  void **v296;
  void **v297;
  unint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void *v303;
  void *v304;
  BOOL v305;
  char *i;
  char *v307;
  char v308;
  const std::string::value_type *v309;
  size_t v310;
  uint64_t v311;
  void **v312;
  void **v313;
  void *v314;
  void **v315;
  void **v316;
  void *v317;
  char *v318;
  char *v319;
  void *v320;
  std::string *v321;
  void (***v322)(_QWORD);
  __int128 *v323;
  char *v324;
  unint64_t v325;
  void (****v326)(_QWORD);
  uint64_t v327;
  unint64_t *v328;
  void **v329;
  int v330;
  char *v331;
  __int128 v332;
  int v333;
  char v334;
  char v335;
  int v336;
  void *__p;
  __int128 v338;
  _BYTE v339[7];
  int v340;
  _QWORD *v341;
  __int128 v342;
  _BYTE v343[7];
  int v344;
  _QWORD *v345;
  __int128 v346;
  _BYTE v347[7];
  void *v348[2];
  unint64_t v349;
  char *v350;
  char *v351;
  void *v352[2];
  __int128 v353;
  __int128 v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _BYTE v358[32];
  int v359;
  char v360;
  void *v361[6];
  char v362;
  _BYTE __src[24];
  void (*v364)(uint64_t **);
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  uint64_t v371;
  _QWORD __str[3];
  void (*v373)(uint64_t **);
  _BYTE v374[104];
  uint64_t v375;

  v375 = *MEMORY[0x24BDAC8D0];
  if (!*a3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    return;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8)))
  {
    v6 = (char *)operator new(0x38uLL);
    *(_QWORD *)__src = v6;
    *(_OWORD *)&__src[8] = xmmword_208F0BCB0;
    if (v6 <= "CreateOffer called when PeerConnection is closed."
      && v6 + 49 > "CreateOffer called when PeerConnection is closed.")
    {
      goto LABEL_521;
    }
    strcpy(v6, "CreateOffer called when PeerConnection is closed.");
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v15 = (void (***)(_QWORD))*a3;
    if ((__src[23] & 0x80000000) != 0)
    {
      v16 = *(_QWORD *)&__src[8];
      if ((*(_QWORD *)&__src[8] & 0x8000000000000000) != 0)
        goto LABEL_521;
      v18 = *(_BYTE **)__src;
      if (*(_QWORD *)&__src[8])
      {
        if (!*(_QWORD *)__src)
          goto LABEL_521;
      }
      v344 = 6;
      if (*(_QWORD *)&__src[8] > 0x7FFFFFFFFFFFFFF7uLL)
        goto LABEL_522;
      v17 = &v345;
      if (*(_QWORD *)&__src[8] <= 0x16uLL)
      {
LABEL_9:
        HIBYTE(v346) = v16;
        v19 = (char *)&v345 + v16;
        if (&v345 > (_QWORD **)v18)
        {
LABEL_41:
          if (v16)
            memmove(v17, v18, v16);
          *v19 = 0;
          *(_DWORD *)v347 = 0;
          v347[4] = 0;
          v347[6] = 0;
          v56 = *(_QWORD *)(v14 + 8);
          if (v15)
            (**v15)(v15);
          v57 = v344;
          v58 = v345;
          *(_QWORD *)v358 = v346;
          *(_QWORD *)&v358[7] = *(_QWORD *)((char *)&v346 + 7);
          v59 = HIBYTE(v346);
          v346 = 0uLL;
          v345 = 0;
          LODWORD(v352[0]) = *(_DWORD *)v347;
          *(_DWORD *)((char *)v352 + 3) = *(_DWORD *)&v347[3];
          v60 = operator new();
          *(_QWORD *)v60 = v15;
          *(_DWORD *)(v60 + 8) = v57;
          v61 = *(_QWORD *)v358;
          *(_QWORD *)(v60 + 16) = v58;
          *(_QWORD *)(v60 + 24) = v61;
          *(_QWORD *)(v60 + 31) = *(_QWORD *)&v358[7];
          *(_BYTE *)(v60 + 39) = v59;
          *(_DWORD *)(v60 + 40) = v352[0];
          *(_DWORD *)(v60 + 43) = *(_DWORD *)((char *)v352 + 3);
          __str[0] = v60;
          __str[2] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0>;
          v373 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0 &&>;
          (*(void (**)(uint64_t, _QWORD *, unint64_t *, char **))(*(_QWORD *)v56 + 8))(v56, __str, &v355, &v350);
          ((void (*)(uint64_t, _QWORD *, _QWORD *))__str[2])(1, __str, __str);
          if ((SHIBYTE(v346) & 0x80000000) == 0)
            goto LABEL_85;
          v62 = v345;
LABEL_84:
          operator delete(v62);
LABEL_85:
          if ((__src[23] & 0x80000000) == 0)
            return;
          v83 = *(char **)__src;
          goto LABEL_87;
        }
LABEL_40:
        if (v19 > v18)
          goto LABEL_521;
        goto LABEL_41;
      }
    }
    else
    {
      v16 = __src[23];
      v344 = 6;
      v17 = &v345;
      v18 = __src;
      if (__src[23] <= 0x16uLL)
        goto LABEL_9;
    }
    v54 = (v16 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v54 = v16 | 7;
    v55 = v54 + 1;
    v17 = operator new(v54 + 1);
    *(_QWORD *)&v346 = v16;
    *((_QWORD *)&v346 + 1) = v55 | 0x8000000000000000;
    v345 = v17;
    v19 = (char *)v17 + v16;
    if (v17 > (_QWORD *)v18)
      goto LABEL_41;
    goto LABEL_40;
  }
  if (*(_DWORD *)(a1 + 232))
  {
    webrtc::SdpOfferAnswerHandler::GetSessionErrorMsg((webrtc::SdpOfferAnswerHandler *)__src, a1);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v35 = (void (***)(_QWORD))*a3;
    if ((__src[23] & 0x80000000) != 0)
    {
      v36 = *(_QWORD *)&__src[8];
      if ((*(_QWORD *)&__src[8] & 0x8000000000000000) != 0)
        goto LABEL_521;
      v38 = *(_BYTE **)__src;
      if (*(_QWORD *)&__src[8])
      {
        if (!*(_QWORD *)__src)
          goto LABEL_521;
      }
      v340 = 10;
      if (*(_QWORD *)&__src[8] > 0x7FFFFFFFFFFFFFF7uLL)
        goto LABEL_522;
      v37 = &v341;
      if (*(_QWORD *)&__src[8] <= 0x16uLL)
        goto LABEL_18;
    }
    else
    {
      v36 = __src[23];
      v340 = 10;
      v37 = &v341;
      v38 = __src;
      if (__src[23] <= 0x16uLL)
      {
LABEL_18:
        HIBYTE(v342) = v36;
LABEL_55:
        v65 = (char *)v37 + v36;
        if (v37 <= (_QWORD *)v38 && v65 > v38)
          goto LABEL_521;
        if (v36)
          memmove(v37, v38, v36);
        *v65 = 0;
        *(_DWORD *)v343 = 0;
        v343[4] = 0;
        v343[6] = 0;
        v67 = *(_QWORD *)(v34 + 8);
        if (v35)
          (**v35)(v35);
        v68 = v340;
        v69 = v341;
        *(_QWORD *)v358 = v342;
        *(_QWORD *)&v358[7] = *(_QWORD *)((char *)&v342 + 7);
        v70 = HIBYTE(v342);
        v342 = 0uLL;
        v341 = 0;
        LODWORD(v352[0]) = *(_DWORD *)v343;
        *(_DWORD *)((char *)v352 + 3) = *(_DWORD *)&v343[3];
        v71 = operator new();
        *(_QWORD *)v71 = v35;
        *(_DWORD *)(v71 + 8) = v68;
        v72 = *(_QWORD *)v358;
        *(_QWORD *)(v71 + 16) = v69;
        *(_QWORD *)(v71 + 24) = v72;
        *(_QWORD *)(v71 + 31) = *(_QWORD *)&v358[7];
        *(_BYTE *)(v71 + 39) = v70;
        *(_DWORD *)(v71 + 40) = v352[0];
        *(_DWORD *)(v71 + 43) = *(_DWORD *)((char *)v352 + 3);
        __str[0] = v71;
        __str[2] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0>;
        v373 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0 &&>;
        (*(void (**)(uint64_t, _QWORD *, unint64_t *, char **))(*(_QWORD *)v67 + 8))(v67, __str, &v355, &v350);
        ((void (*)(uint64_t, _QWORD *, _QWORD *))__str[2])(1, __str, __str);
        if ((SHIBYTE(v342) & 0x80000000) == 0)
          goto LABEL_85;
        v62 = v341;
        goto LABEL_84;
      }
    }
    v63 = (v36 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v63 = v36 | 7;
    v64 = v63 + 1;
    v37 = operator new(v63 + 1);
    *(_QWORD *)&v342 = v36;
    *((_QWORD *)&v342 + 1) = v64 | 0x8000000000000000;
    v341 = v37;
    goto LABEL_55;
  }
  if ((*(_DWORD *)(a2 + 4) + 1) > 2 || (*(_DWORD *)a2 + 1) >= 3)
  {
    v40 = (char *)operator new(0x30uLL);
    *(_QWORD *)__src = v40;
    *(_OWORD *)&__src[8] = xmmword_208F086B0;
    if (v40 <= "CreateOffer called with invalid options." && v40 + 40 > "CreateOffer called with invalid options.")
      goto LABEL_521;
    strcpy(v40, "CreateOffer called with invalid options.");
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v49 = (void (***)(_QWORD))*a3;
    if ((__src[23] & 0x80000000) != 0)
    {
      v50 = *(_QWORD *)&__src[8];
      if ((*(_QWORD *)&__src[8] & 0x8000000000000000) != 0)
        goto LABEL_521;
      v52 = *(char **)__src;
      if (*(_QWORD *)&__src[8])
      {
        if (!*(_QWORD *)__src)
          goto LABEL_521;
      }
      v336 = 3;
      if (*(_QWORD *)&__src[8] > 0x7FFFFFFFFFFFFFF7uLL)
        goto LABEL_522;
      p_p = (char *)&__p;
      if (*(_QWORD *)&__src[8] <= 0x16uLL)
      {
LABEL_30:
        HIBYTE(v338) = v50;
        v53 = (char *)&__p + v50;
        if (&__p > (void **)v52)
        {
LABEL_78:
          if (v50)
            memmove(p_p, v52, v50);
          *v53 = 0;
          *(_DWORD *)v339 = 0;
          v339[4] = 0;
          v339[6] = 0;
          v77 = *(_QWORD *)(v48 + 8);
          if (v49)
            (**v49)(v49);
          v78 = v336;
          v79 = __p;
          *(_QWORD *)v358 = v338;
          *(_QWORD *)&v358[7] = *(_QWORD *)((char *)&v338 + 7);
          v80 = HIBYTE(v338);
          v338 = 0uLL;
          __p = 0;
          LODWORD(v352[0]) = *(_DWORD *)v339;
          *(_DWORD *)((char *)v352 + 3) = *(_DWORD *)&v339[3];
          v81 = operator new();
          *(_QWORD *)v81 = v49;
          *(_DWORD *)(v81 + 8) = v78;
          v82 = *(_QWORD *)v358;
          *(_QWORD *)(v81 + 16) = v79;
          *(_QWORD *)(v81 + 24) = v82;
          *(_QWORD *)(v81 + 31) = *(_QWORD *)&v358[7];
          *(_BYTE *)(v81 + 39) = v80;
          *(_DWORD *)(v81 + 40) = v352[0];
          *(_DWORD *)(v81 + 43) = *(_DWORD *)((char *)v352 + 3);
          __str[0] = v81;
          __str[2] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0>;
          v373 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0 &&>;
          (*(void (**)(uint64_t, _QWORD *, unint64_t *, char **))(*(_QWORD *)v77 + 8))(v77, __str, &v355, &v350);
          ((void (*)(uint64_t, _QWORD *, _QWORD *))__str[2])(1, __str, __str);
          if ((SHIBYTE(v338) & 0x80000000) == 0)
            goto LABEL_85;
          v62 = __p;
          goto LABEL_84;
        }
LABEL_77:
        if (v53 > v52)
          goto LABEL_521;
        goto LABEL_78;
      }
    }
    else
    {
      v50 = __src[23];
      v336 = 3;
      p_p = (char *)&__p;
      v52 = __src;
      if (__src[23] <= 0x16uLL)
        goto LABEL_30;
    }
    v75 = (v50 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v75 = v50 | 7;
    v76 = v75 + 1;
    p_p = (char *)operator new(v75 + 1);
    *(_QWORD *)&v338 = v50;
    *((_QWORD *)&v338 + 1) = v76 | 0x8000000000000000;
    __p = p_p;
    v53 = &p_p[v50];
    if (p_p > v52)
      goto LABEL_78;
    goto LABEL_77;
  }
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8)))
  {
LABEL_105:
    *(_DWORD *)v358 = 257;
    v358[4] = 0;
    v358[31] = 16;
    if (&v358[8] <= "DefaultRtcpCname" && &v358[24] > "DefaultRtcpCname")
      goto LABEL_521;
    strcpy(&v358[8], "DefaultRtcpCname");
    v359 = 65537;
    v360 = 0;
    memset(v361, 0, sizeof(v361));
    v362 = 1;
    v358[0] = *(_BYTE *)(a2 + 8);
    v358[2] = *(_BYTE *)(a2 + 10);
    v358[4] = *(_BYTE *)(a2 + 11);
    v326 = (void (****)(_QWORD))a3;
    v327 = a2;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8)))
    {
      v355 = 0;
      v356 = 0;
      v357 = 0;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
      {
        v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v328 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 32))(v98);
      }
      else
      {
        v328 = &v355;
      }
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
      {
        v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
        v113 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 32))(v112);
      }
      else
      {
        v113 = &v355;
      }
      v119 = 0;
      v353 = 0u;
      v354 = 0u;
      *(_OWORD *)v352 = 0u;
      while (1)
      {
        v121 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v328[1] - *v328) >> 3);
        v122 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v113[1] - *v113) >> 3);
        if (v121 > v122)
          v122 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v328[1] - *v328) >> 3);
        if (v119 >= v122)
        {
          v181 = v326;
          if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96))
          {
            v182 = (webrtc::TransceiverList *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
            if (v182)
              v182 = (webrtc::TransceiverList *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8))
                                               + 8);
            webrtc::TransceiverList::ListInternal(v182, &v350);
            v184 = v350;
            v183 = v351;
            if (v350 != v351)
            {
              v185 = (unsigned int *)(a1 + 144);
              v186 = *((_QWORD *)&v354 + 1);
              v187 = v354;
              v329 = (void **)v352[1];
              v324 = v350;
              do
              {
                (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v184 + 40))(__str);
                if ((_BYTE)v373)
                {
                  if (SHIBYTE(__str[2]) < 0)
                    operator delete((void *)__str[0]);
                }
                else
                {
                  v196 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v184 + 72))(*(_QWORD *)v184);
                  if ((_BYTE)v373 && SHIBYTE(__str[2]) < 0)
                    operator delete((void *)__str[0]);
                  if ((v196 & 1) == 0)
                  {
                    if (v186)
                    {
                      v197 = v329;
                      v198 = (*(_QWORD **)((char *)v329 + ((v187 >> 6) & 0x3FFFFFFFFFFFFF8)))[v187 & 0x1FF];
                      if (v187 + 1 >= 0x400)
                      {
                        v197 = v329 + 1;
                        operator delete(*v329);
                        v187 -= 511;
                      }
                      else
                      {
                        ++v187;
                      }
                      v205 = *(_QWORD *)v184;
                      Number = rtc::UniqueNumberGenerator<unsigned int>::GenerateNumber(v185, v189, v190, v191, v192, v193, v194, v195);
                      v207 = snprintf((char *)__str, 0x20uLL, "%u", Number);
                      if (v207 < 0)
                        goto LABEL_522;
                      v208 = v207;
                      v329 = v197;
                      if (v207 > 0x16)
                      {
                        v210 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v207 | 7) != 0x17)
                          v210 = v207 | 7;
                        v211 = v210 + 1;
                        v209 = operator new(v210 + 1);
                        v212 = v211 | 0x8000000000000000;
                        v185 = (unsigned int *)(a1 + 144);
                        *(_QWORD *)&__src[16] = v212;
                        *(_QWORD *)__src = v209;
                        *(_QWORD *)&__src[8] = v208;
                      }
                      else
                      {
                        __src[23] = v207;
                        v209 = __src;
                      }
                      v213 = &v209[v208];
                      if (v209 <= (_BYTE *)__str && &v209[v208] > (_BYTE *)__str)
                        goto LABEL_521;
                      if ((_DWORD)v208)
                        memcpy(v209, __str, v208);
                      *v213 = 0;
                      if (0xF0F0F0F0F0F0F0F1 * (((char *)v361[1] - (char *)v361[0]) >> 3) <= v198)
                        goto LABEL_521;
                      cricket::MediaDescriptionOptions::operator=((uint64_t)v361[0] + 136 * v198, (uint64_t)__str);
                      cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__str);
                      a2 = v327;
                      if ((__src[23] & 0x80000000) != 0)
                        operator delete(*(void **)__src);
                      --v186;
                    }
                    else
                    {
                      v199 = *(_OWORD *)v361;
                      v200 = *(_QWORD *)v184;
                      v201 = rtc::UniqueNumberGenerator<unsigned int>::GenerateNumber(v185, v189, v190, v191, v192, v193, v194, v195);
                      v202 = snprintf(__src, 0x20uLL, "%u", v201);
                      if (v202 < 0)
                        goto LABEL_522;
                      v203 = v202;
                      if (v202 > 0x16)
                      {
                        v214 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v202 | 7) != 0x17)
                          v214 = v202 | 7;
                        v215 = v214 + 1;
                        v204 = (char *)operator new(v214 + 1);
                        v216 = v215 | 0x8000000000000000;
                        v185 = (unsigned int *)(a1 + 144);
                        v348[1] = (void *)v203;
                        v349 = v216;
                        v348[0] = v204;
                      }
                      else
                      {
                        HIBYTE(v349) = v202;
                        v204 = (char *)v348;
                      }
                      v217 = &v204[v203];
                      if (v204 <= __src && &v204[v203] > __src)
                        goto LABEL_521;
                      if ((_DWORD)v203)
                        memcpy(v204, __src, v203);
                      *v217 = 0;
                      v218 = (char *)v361[1];
                      if (v361[1] >= v361[2])
                      {
                        v220 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v361, (uint64_t)__str);
                      }
                      else
                      {
                        if (!v361[1])
                          goto LABEL_521;
                        *(_DWORD *)v361[1] = __str[0];
                        v219 = *(_OWORD *)&__str[1];
                        *((_QWORD *)v218 + 3) = v373;
                        *(_OWORD *)(v218 + 8) = v219;
                        __str[2] = 0;
                        v373 = 0;
                        __str[1] = 0;
                        *((_QWORD *)v218 + 4) = *(_QWORD *)v374;
                        *((_QWORD *)v218 + 5) = 0;
                        *((_QWORD *)v218 + 6) = 0;
                        *((_QWORD *)v218 + 7) = 0;
                        *(_OWORD *)(v218 + 40) = *(_OWORD *)&v374[8];
                        *(_QWORD *)&v374[8] = 0;
                        *(_QWORD *)&v374[16] = 0;
                        *((_QWORD *)v218 + 7) = *(_QWORD *)&v374[24];
                        *((_QWORD *)v218 + 8) = 0;
                        *(_QWORD *)&v374[24] = 0;
                        *((_QWORD *)v218 + 9) = 0;
                        *((_QWORD *)v218 + 10) = 0;
                        *((_OWORD *)v218 + 4) = *(_OWORD *)&v374[32];
                        *(_OWORD *)&v374[32] = 0uLL;
                        *((_QWORD *)v218 + 10) = *(_QWORD *)&v374[48];
                        *((_QWORD *)v218 + 11) = 0;
                        *(_QWORD *)&v374[48] = 0;
                        *((_QWORD *)v218 + 12) = 0;
                        *((_QWORD *)v218 + 13) = 0;
                        *(_OWORD *)(v218 + 88) = *(_OWORD *)&v374[56];
                        *(_QWORD *)&v374[56] = 0;
                        *(_QWORD *)&v374[64] = 0;
                        *((_QWORD *)v218 + 13) = *(_QWORD *)&v374[72];
                        *((_QWORD *)v218 + 14) = 0;
                        *(_QWORD *)&v374[72] = 0;
                        *((_QWORD *)v218 + 15) = 0;
                        *((_QWORD *)v218 + 16) = 0;
                        *((_OWORD *)v218 + 7) = *(_OWORD *)&v374[80];
                        *((_QWORD *)v218 + 16) = *(_QWORD *)&v374[96];
                        memset(&v374[80], 0, 24);
                        v220 = v218 + 136;
                      }
                      v361[1] = v220;
                      cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__str);
                      if (SHIBYTE(v349) < 0)
                        operator delete(v348[0]);
                      v186 = 0;
                      v198 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)&v199 + 1) - v199) >> 3);
                      a2 = v327;
                    }
                    v188 = *(_QWORD *)v184;
                    *(_QWORD *)(v188 + 136) = v198;
                    *(_BYTE *)(v188 + 144) = 1;
                  }
                }
                v184 += 8;
              }
              while (v184 != v183);
              *(_QWORD *)&v354 = v187;
              *((_QWORD *)&v354 + 1) = v186;
              v352[1] = v329;
              v181 = v326;
              v184 = v324;
            }
            if (v184)
              operator delete(v184);
          }
          (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(__str);
          if ((_BYTE)v373)
          {
            if (SHIBYTE(__str[2]) < 0)
            {
              v221 = (void *)__str[0];
              goto LABEL_294;
            }
            goto LABEL_464;
          }
          v229 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8))
                                    + 72);
          if ((_BYTE)v373 && SHIBYTE(__str[2]) < 0)
            operator delete((void *)__str[0]);
          if (v229 != 2)
            goto LABEL_464;
          v230 = (char *)v361[0];
          if (v361[1] != v361[0])
          {
            v231 = 0;
            v232 = 0;
            while (1)
            {
              v233 = cricket::MediaDescriptionOptions::MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__str, (const cricket::MediaDescriptionOptions *)&v230[v231]);
              if (LODWORD(__str[0]) == 2 && v374[4] != 0)
                break;
              cricket::MediaDescriptionOptions::~MediaDescriptionOptions(v233);
              ++v232;
              v230 = (char *)v361[0];
              v231 += 136;
              if (v232 >= 0xF0F0F0F0F0F0F0F1 * (((char *)v361[1] - (char *)v361[0]) >> 3))
                goto LABEL_307;
            }
            *(_DWORD *)__src = 2;
            if (SHIBYTE(v373) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)__str[1], __str[2]);
            }
            else
            {
              *(_OWORD *)&__src[8] = *(_OWORD *)&__str[1];
              v364 = v373;
            }
            v371 = 0;
            v369 = 0u;
            v370 = 0u;
            v367 = 0u;
            v368 = 0u;
            v365 = 0u;
            v366 = 0u;
            if (0xF0F0F0F0F0F0F0F1 * (((char *)v361[1] - (char *)v361[0]) >> 3) > v232)
            {
              cricket::MediaDescriptionOptions::operator=((uint64_t)v361[0] + v231, (uint64_t)__src);
              cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__src);
              cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__str);
              goto LABEL_464;
            }
LABEL_521:
            __break(1u);
          }
LABEL_307:
          v235 = rtc::UniqueNumberGenerator<unsigned int>::GenerateNumber((unsigned int *)(a1 + 144), v222, v223, v224, v225, v226, v227, v228);
          v236 = snprintf((char *)__str, 0x20uLL, "%u", v235);
          if ((v236 & 0x80000000) == 0)
          {
            v237 = v236;
            if (v236 > 0x16)
            {
              v290 = (v236 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v236 | 7) != 0x17)
                v290 = v236 | 7;
              v291 = v290 + 1;
              v238 = operator new(v290 + 1);
              *(_QWORD *)&__src[16] = v291 | 0x8000000000000000;
              *(_QWORD *)__src = v238;
              *(_QWORD *)&__src[8] = v237;
            }
            else
            {
              __src[23] = v236;
              v238 = __src;
            }
            v292 = &v238[v237];
            if (v238 <= (_BYTE *)__str && &v238[v237] > (_BYTE *)__str)
              goto LABEL_521;
            if ((_DWORD)v237)
              memcpy(v238, __str, v237);
            *v292 = 0;
            LODWORD(__str[0]) = 2;
            if ((__src[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__str[1], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
            }
            else
            {
              *(_OWORD *)&__str[1] = *(_OWORD *)__src;
              v373 = *(void (**)(uint64_t **))&__src[16];
            }
            memset(v374, 0, sizeof(v374));
            v293 = (char *)v361[1];
            if (v361[1] >= v361[2])
            {
              v295 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v361, (uint64_t)__str);
            }
            else
            {
              if (!v361[1])
                goto LABEL_521;
              *(_DWORD *)v361[1] = __str[0];
              v294 = *(_OWORD *)&__str[1];
              *((_QWORD *)v293 + 3) = v373;
              *(_OWORD *)(v293 + 8) = v294;
              __str[2] = 0;
              v373 = 0;
              __str[1] = 0;
              *((_QWORD *)v293 + 4) = *(_QWORD *)v374;
              *((_QWORD *)v293 + 5) = 0;
              *((_QWORD *)v293 + 6) = 0;
              *((_QWORD *)v293 + 7) = 0;
              *(_OWORD *)(v293 + 40) = *(_OWORD *)&v374[8];
              *(_QWORD *)&v374[8] = 0;
              *(_QWORD *)&v374[16] = 0;
              *((_QWORD *)v293 + 7) = *(_QWORD *)&v374[24];
              *((_QWORD *)v293 + 8) = 0;
              *((_QWORD *)v293 + 9) = 0;
              *((_QWORD *)v293 + 10) = 0;
              *((_OWORD *)v293 + 4) = *(_OWORD *)&v374[32];
              *((_QWORD *)v293 + 10) = *(_QWORD *)&v374[48];
              *((_QWORD *)v293 + 11) = 0;
              memset(&v374[24], 0, 32);
              *((_QWORD *)v293 + 12) = 0;
              *((_QWORD *)v293 + 13) = 0;
              *(_OWORD *)(v293 + 88) = *(_OWORD *)&v374[56];
              *(_QWORD *)&v374[56] = 0;
              *(_QWORD *)&v374[64] = 0;
              *((_QWORD *)v293 + 13) = *(_QWORD *)&v374[72];
              *((_QWORD *)v293 + 14) = 0;
              *((_QWORD *)v293 + 15) = 0;
              *((_QWORD *)v293 + 16) = 0;
              *((_OWORD *)v293 + 7) = *(_OWORD *)&v374[80];
              *((_QWORD *)v293 + 16) = *(_QWORD *)&v374[96];
              memset(&v374[72], 0, 32);
              v295 = v293 + 136;
            }
            v361[1] = v295;
            cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__str);
            if ((__src[23] & 0x80000000) != 0)
            {
              v221 = *(void **)__src;
LABEL_294:
              operator delete(v221);
            }
LABEL_464:
            v296 = (void **)v352[1];
            v297 = (void **)v353;
            v298 = v353 - (unint64_t)v352[1];
            if ((void *)v353 != v352[1])
            {
              v299 = (uint64_t *)((char *)v352[1] + 8 * ((unint64_t)v354 >> 9));
              v300 = *v299;
              v301 = *v299 + 8 * (v354 & 0x1FF);
              while (v301 != *(_QWORD *)((char *)v352[1]
                                        + (((*((_QWORD *)&v354 + 1) + (_QWORD)v354) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*((_QWORD *)&v354 + 1) + (_QWORD)v354) & 0x1FFLL))
              {
                if (!v301)
                  goto LABEL_521;
                v301 += 8;
                if (v301 - v300 == 4096)
                {
                  v302 = v299[1];
                  ++v299;
                  v300 = v302;
                  v301 = v302;
                }
              }
            }
            if (v298 >= 0x11)
            {
              do
              {
                v303 = *v296++;
                operator delete(v303);
                v298 -= 8;
              }
              while (v298 > 0x10);
            }
            while (v296 != v297)
            {
              v304 = *v296++;
              operator delete(v304);
            }
            v289 = v352[0];
            if (v352[0])
LABEL_476:
              operator delete(v289);
            goto LABEL_477;
          }
LABEL_522:
          abort();
        }
        if (v119 >= v121)
          v123 = 0;
        else
          v123 = *v328 + 40 * v119;
        v124 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        if (v124)
        {
          v125 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 32))(v124);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v125[1] - *v125) >> 3) <= v119)
            v126 = 0;
          else
            v126 = *v125 + 40 * v119;
        }
        else
        {
          v126 = 0;
        }
        if (v119 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v113[1] - *v113) >> 3))
          v127 = 0;
        else
          v127 = *v113 + 40 * v119;
        v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        if (v128)
        {
          v129 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 32))(v128);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v129[1] - *v129) >> 3) <= v119)
            v130 = 0;
          else
            v130 = *v129 + 40 * v119;
          if (!v126)
            goto LABEL_155;
        }
        else
        {
          v130 = 0;
          if (!v126)
            goto LABEL_155;
        }
        if (*(_BYTE *)(v126 + 28))
        {
          v131 = 1;
          goto LABEL_158;
        }
LABEL_155:
        if (v130)
          v131 = *(unsigned __int8 *)(v130 + 28) != 0;
        else
          v131 = 0;
LABEL_158:
        if (v123)
          v132 = v123;
        else
          v132 = v127;
        v133 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v132 + 32) + 16))(*(_QWORD *)(v132 + 32));
        v138 = v133;
        if (v133 > 1)
        {
          if (v133 == 2)
          {
            if (v131)
            {
              LODWORD(__str[0]) = 2;
              if ((*(char *)(v132 + 23) & 0x80000000) == 0)
                goto LABEL_172;
              goto LABEL_186;
            }
            (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(__src);
            if (!(_BYTE)v364)
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
              {
                v325 = v325 & 0xFFFFFFFF00000000 | 0x8683;
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v162, v163, v164, v165, v166, v167, v168, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
              }
              v154 = *(_BYTE *)(v132 + 23);
              goto LABEL_210;
            }
            v153 = *(unsigned __int8 *)(v132 + 23);
            v154 = v153;
            v155 = *(_QWORD *)(v132 + 8);
            if ((v153 & 0x80u) == 0)
              v156 = *(unsigned __int8 *)(v132 + 23);
            else
              v156 = *(_QWORD *)(v132 + 8);
            v157 = __src[23];
            if (__src[23] < 0)
              v157 = *(_QWORD *)&__src[8];
            if (v156 != v157)
              goto LABEL_210;
            if (__src[23] >= 0)
              v158 = __src;
            else
              v158 = *(unsigned __int8 **)__src;
            if ((char)v153 < 0)
            {
              if (memcmp(*(const void **)v132, v158, *(_QWORD *)(v132 + 8)))
              {
                LODWORD(__str[0]) = 2;
LABEL_228:
                std::string::__init_copy_ctor_external((std::string *)&__str[1], *(const std::string::value_type **)v132, v155);
                goto LABEL_229;
              }
              LODWORD(__str[0]) = 2;
              std::string::__init_copy_ctor_external((std::string *)&__str[1], *(const std::string::value_type **)v132, v155);
            }
            else
            {
              v159 = (unsigned __int8 *)v132;
              if ((_BYTE)v153)
              {
                while (*v159 == *v158)
                {
                  ++v159;
                  ++v158;
                  if (!--v153)
                    goto LABEL_204;
                }
LABEL_210:
                LODWORD(__str[0]) = 2;
                if (v154 < 0)
                {
                  v155 = *(_QWORD *)(v132 + 8);
                  goto LABEL_228;
                }
                v169 = *(_OWORD *)v132;
                v373 = *(void (**)(uint64_t **))(v132 + 16);
                *(_OWORD *)&__str[1] = v169;
LABEL_229:
                *(_DWORD *)v374 = 3;
                v374[4] = 1;
                memset(&v374[5], 0, 99);
                v178 = (char *)v361[1];
                if (v361[1] >= v361[2])
                  goto LABEL_234;
                goto LABEL_230;
              }
LABEL_204:
              LODWORD(__str[0]) = 2;
              v160 = *(_OWORD *)v132;
              v373 = *(void (**)(uint64_t **))(v132 + 16);
              *(_OWORD *)&__str[1] = v160;
            }
            memset(v374, 0, sizeof(v374));
            v178 = (char *)v361[1];
            if (v361[1] >= v361[2])
            {
LABEL_234:
              v180 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v361, (uint64_t)__str);
              goto LABEL_235;
            }
LABEL_230:
            if (!v178)
              goto LABEL_521;
            *(_DWORD *)v178 = __str[0];
            v179 = *(_OWORD *)&__str[1];
            *((_QWORD *)v178 + 3) = v373;
            *(_OWORD *)(v178 + 8) = v179;
            __str[2] = 0;
            v373 = 0;
            __str[1] = 0;
            *((_QWORD *)v178 + 4) = *(_QWORD *)v374;
            *((_QWORD *)v178 + 5) = 0;
            *((_QWORD *)v178 + 6) = 0;
            *((_QWORD *)v178 + 7) = 0;
            *(_OWORD *)(v178 + 40) = *(_OWORD *)&v374[8];
            *(_QWORD *)&v374[8] = 0;
            *(_QWORD *)&v374[16] = 0;
            *((_QWORD *)v178 + 7) = *(_QWORD *)&v374[24];
            *((_QWORD *)v178 + 8) = 0;
            *(_QWORD *)&v374[24] = 0;
            *((_QWORD *)v178 + 9) = 0;
            *((_QWORD *)v178 + 10) = 0;
            *((_OWORD *)v178 + 4) = *(_OWORD *)&v374[32];
            *(_OWORD *)&v374[32] = 0uLL;
            *((_QWORD *)v178 + 10) = *(_QWORD *)&v374[48];
            *((_QWORD *)v178 + 11) = 0;
            *(_QWORD *)&v374[48] = 0;
            *((_QWORD *)v178 + 12) = 0;
            *((_QWORD *)v178 + 13) = 0;
            *(_OWORD *)(v178 + 88) = *(_OWORD *)&v374[56];
            *(_QWORD *)&v374[56] = 0;
            *(_QWORD *)&v374[64] = 0;
            *((_QWORD *)v178 + 13) = *(_QWORD *)&v374[72];
            *((_QWORD *)v178 + 14) = 0;
            *(_QWORD *)&v374[72] = 0;
            *((_QWORD *)v178 + 15) = 0;
            *((_QWORD *)v178 + 16) = 0;
            *((_OWORD *)v178 + 7) = *(_OWORD *)&v374[80];
            *((_QWORD *)v178 + 16) = *(_QWORD *)&v374[96];
            memset(&v374[80], 0, 24);
            v180 = v178 + 136;
LABEL_235:
            v361[1] = v180;
            cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__str);
            if ((_BYTE)v364 && (__src[23] & 0x80000000) != 0)
              operator delete(*(void **)__src);
            ++v119;
          }
          else
          {
            if (v133 != 3)
            {
              v321 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc", 4293, "cricket::MEDIA_TYPE_DATA == media_type", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, v134, v135, v136, v137, 2);
              webrtc::SdpOfferAnswerHandler::CreateAnswer(v321, v322, v323);
              return;
            }
            LODWORD(__str[0]) = 3;
            if ((*(char *)(v132 + 23) & 0x80000000) == 0)
            {
LABEL_172:
              v142 = *(_OWORD *)v132;
              v373 = *(void (**)(uint64_t **))(v132 + 16);
              *(_OWORD *)&__str[1] = v142;
              goto LABEL_187;
            }
LABEL_186:
            std::string::__init_copy_ctor_external((std::string *)&__str[1], *(const std::string::value_type **)v132, *(_QWORD *)(v132 + 8));
LABEL_187:
            *(_DWORD *)v374 = 3;
            v374[4] = 1;
            memset(&v374[5], 0, 99);
            v151 = (char *)v361[1];
            if (v361[1] >= v361[2])
            {
              v120 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v361, (uint64_t)__str);
            }
            else
            {
              if (!v361[1])
                goto LABEL_521;
              *(_DWORD *)v361[1] = __str[0];
              v152 = *(_OWORD *)&__str[1];
              *((_QWORD *)v151 + 3) = v373;
              *(_OWORD *)(v151 + 8) = v152;
              __str[2] = 0;
              v373 = 0;
              __str[1] = 0;
              *((_QWORD *)v151 + 4) = *(_QWORD *)v374;
              *((_QWORD *)v151 + 5) = 0;
              *((_QWORD *)v151 + 6) = 0;
              *((_QWORD *)v151 + 7) = 0;
              *(_OWORD *)(v151 + 40) = *(_OWORD *)&v374[8];
              *(_QWORD *)&v374[8] = 0;
              *(_QWORD *)&v374[16] = 0;
              *((_QWORD *)v151 + 7) = *(_QWORD *)&v374[24];
              *((_QWORD *)v151 + 8) = 0;
              *(_QWORD *)&v374[24] = 0;
              *((_QWORD *)v151 + 9) = 0;
              *((_QWORD *)v151 + 10) = 0;
              *((_OWORD *)v151 + 4) = *(_OWORD *)&v374[32];
              *(_OWORD *)&v374[32] = 0uLL;
              *((_QWORD *)v151 + 10) = *(_QWORD *)&v374[48];
              *((_QWORD *)v151 + 11) = 0;
              *(_QWORD *)&v374[48] = 0;
              *((_QWORD *)v151 + 12) = 0;
              *((_QWORD *)v151 + 13) = 0;
              *(_OWORD *)(v151 + 88) = *(_OWORD *)&v374[56];
              *(_QWORD *)&v374[56] = 0;
              *(_QWORD *)&v374[64] = 0;
              *((_QWORD *)v151 + 13) = *(_QWORD *)&v374[72];
              *((_QWORD *)v151 + 14) = 0;
              *(_QWORD *)&v374[72] = 0;
              *((_QWORD *)v151 + 15) = 0;
              *((_QWORD *)v151 + 16) = 0;
              *((_OWORD *)v151 + 7) = *(_OWORD *)&v374[80];
              *((_QWORD *)v151 + 16) = *(_QWORD *)&v374[96];
              memset(&v374[80], 0, 24);
              v120 = v151 + 136;
            }
            v361[1] = v120;
            cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__str);
            ++v119;
          }
        }
        else
        {
          v139 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
          if (v139)
            v139 = (uint64_t **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8))
                              + 8);
          webrtc::TransceiverList::FindByMid(v139, (unsigned __int8 **)v132, (uint64_t *)__src);
          v140 = *(uint64_t **)__src;
          if (!*(_QWORD *)__src)
          {
            v146 = (char *)v352[1];
            v147 = (char *)v353;
            v148 = (((_QWORD)v353 - (unint64_t)v352[1]) << 6) - 1;
            if ((void *)v353 == v352[1])
              v148 = 0;
            if (v148 == *((_QWORD *)&v354 + 1) + (_QWORD)v354)
            {
              std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity((uint64_t)v352);
              v146 = (char *)v352[1];
              v147 = (char *)v353;
            }
            if (v147 == v146)
              goto LABEL_521;
            v149 = *((_QWORD *)&v354 + 1);
            v150 = *(_QWORD *)&v146[((*((_QWORD *)&v354 + 1) + (_QWORD)v354) >> 6) & 0x3FFFFFFFFFFFFF8];
            if (!v150)
              goto LABEL_521;
            *(_QWORD *)(v150 + 8 * ((WORD4(v354) + (_WORD)v354) & 0x1FF)) = v119;
            *((_QWORD *)&v354 + 1) = v149 + 1;
            LODWORD(__str[0]) = v138;
            if ((*(char *)(v132 + 23) & 0x80000000) == 0)
              goto LABEL_172;
            goto LABEL_186;
          }
          if (v131 && (*(unsigned int (**)(_QWORD))(**(_QWORD **)__src + 72))(*(_QWORD *)__src))
          {
            LODWORD(__str[0]) = (*(uint64_t (**)(uint64_t *))(*v140 + 32))(v140);
            if (*(char *)(v132 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__str[1], *(const std::string::value_type **)v132, *(_QWORD *)(v132 + 8));
            }
            else
            {
              v141 = *(_OWORD *)v132;
              v373 = *(void (**)(uint64_t **))(v132 + 16);
              *(_OWORD *)&__str[1] = v141;
            }
            *(_DWORD *)v374 = 3;
            v374[4] = 1;
            memset(&v374[5], 0, 99);
            v170 = (char *)v361[1];
            if (v361[1] >= v361[2])
            {
              v172 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v361, (uint64_t)__str);
            }
            else
            {
              if (!v361[1])
                goto LABEL_521;
              *(_DWORD *)v361[1] = __str[0];
              v171 = *(_OWORD *)&__str[1];
              *((_QWORD *)v170 + 3) = v373;
              *(_OWORD *)(v170 + 8) = v171;
              __str[2] = 0;
              v373 = 0;
              __str[1] = 0;
              *((_QWORD *)v170 + 4) = *(_QWORD *)v374;
              *((_QWORD *)v170 + 5) = 0;
              *((_QWORD *)v170 + 6) = 0;
              *((_QWORD *)v170 + 7) = 0;
              *(_OWORD *)(v170 + 40) = *(_OWORD *)&v374[8];
              *(_QWORD *)&v374[8] = 0;
              *(_QWORD *)&v374[16] = 0;
              *((_QWORD *)v170 + 7) = *(_QWORD *)&v374[24];
              *((_QWORD *)v170 + 8) = 0;
              *(_QWORD *)&v374[24] = 0;
              *((_QWORD *)v170 + 9) = 0;
              *((_QWORD *)v170 + 10) = 0;
              *((_OWORD *)v170 + 4) = *(_OWORD *)&v374[32];
              *(_OWORD *)&v374[32] = 0uLL;
              *((_QWORD *)v170 + 10) = *(_QWORD *)&v374[48];
              *((_QWORD *)v170 + 11) = 0;
              *(_QWORD *)&v374[48] = 0;
              *((_QWORD *)v170 + 12) = 0;
              *((_QWORD *)v170 + 13) = 0;
              *(_OWORD *)(v170 + 88) = *(_OWORD *)&v374[56];
              *(_QWORD *)&v374[56] = 0;
              *(_QWORD *)&v374[64] = 0;
              *((_QWORD *)v170 + 13) = *(_QWORD *)&v374[72];
              *((_QWORD *)v170 + 14) = 0;
              *(_QWORD *)&v374[72] = 0;
              *((_QWORD *)v170 + 15) = 0;
              *((_QWORD *)v170 + 16) = 0;
              *((_OWORD *)v170 + 7) = *(_OWORD *)&v374[80];
              *((_QWORD *)v170 + 16) = *(_QWORD *)&v374[96];
              memset(&v374[80], 0, 24);
              v172 = v170 + 136;
            }
            v361[1] = v172;
            cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__str);
            v173 = (char *)v352[1];
            v174 = (char *)v353;
            v175 = (((_QWORD)v353 - (unint64_t)v352[1]) << 6) - 1;
            if ((void *)v353 == v352[1])
              v175 = 0;
            if (v175 == *((_QWORD *)&v354 + 1) + (_QWORD)v354)
            {
              std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity((uint64_t)v352);
              v173 = (char *)v352[1];
              v174 = (char *)v353;
            }
            if (v174 == v173)
              goto LABEL_521;
            v176 = *((_QWORD *)&v354 + 1);
            v177 = *(_QWORD *)&v173[((*((_QWORD *)&v354 + 1) + (_QWORD)v354) >> 6) & 0x3FFFFFFFFFFFFF8];
            if (!v177)
              goto LABEL_521;
            *(_QWORD *)(v177 + 8 * ((WORD4(v354) + (_WORD)v354) & 0x1FF)) = v119;
            *((_QWORD *)&v354 + 1) = v176 + 1;
          }
          else
          {
            v143 = (char *)v361[1];
            if (v361[1] >= v361[2])
            {
              v145 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v361, (uint64_t)__str);
            }
            else
            {
              if (!v361[1])
                goto LABEL_521;
              *(_DWORD *)v361[1] = __str[0];
              v144 = *(_OWORD *)&__str[1];
              *((_QWORD *)v143 + 3) = v373;
              *(_OWORD *)(v143 + 8) = v144;
              __str[2] = 0;
              v373 = 0;
              __str[1] = 0;
              *((_QWORD *)v143 + 4) = *(_QWORD *)v374;
              *((_QWORD *)v143 + 5) = 0;
              *((_QWORD *)v143 + 6) = 0;
              *((_QWORD *)v143 + 7) = 0;
              *(_OWORD *)(v143 + 40) = *(_OWORD *)&v374[8];
              *(_QWORD *)&v374[8] = 0;
              *(_QWORD *)&v374[16] = 0;
              *((_QWORD *)v143 + 7) = *(_QWORD *)&v374[24];
              *((_QWORD *)v143 + 8) = 0;
              *(_QWORD *)&v374[24] = 0;
              *((_QWORD *)v143 + 9) = 0;
              *((_QWORD *)v143 + 10) = 0;
              *((_OWORD *)v143 + 4) = *(_OWORD *)&v374[32];
              *(_OWORD *)&v374[32] = 0uLL;
              *((_QWORD *)v143 + 10) = *(_QWORD *)&v374[48];
              *((_QWORD *)v143 + 11) = 0;
              *(_QWORD *)&v374[48] = 0;
              *((_QWORD *)v143 + 12) = 0;
              *((_QWORD *)v143 + 13) = 0;
              *(_OWORD *)(v143 + 88) = *(_OWORD *)&v374[56];
              *(_QWORD *)&v374[56] = 0;
              *(_QWORD *)&v374[64] = 0;
              *((_QWORD *)v143 + 13) = *(_QWORD *)&v374[72];
              *((_QWORD *)v143 + 14) = 0;
              *(_QWORD *)&v374[72] = 0;
              *((_QWORD *)v143 + 15) = 0;
              *((_QWORD *)v143 + 16) = 0;
              *((_OWORD *)v143 + 7) = *(_OWORD *)&v374[80];
              *((_QWORD *)v143 + 16) = *(_QWORD *)&v374[96];
              memset(&v374[80], 0, 24);
              v145 = v143 + 136;
            }
            v361[1] = v145;
            cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__str);
            v161 = v140[2];
            *(_QWORD *)(v161 + 136) = v119;
            *(_BYTE *)(v161 + 144) = 1;
          }
          (*(void (**)(uint64_t *))(*v140 + 8))(v140);
          ++v119;
        }
      }
    }
    v99 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8))
                             + 72);
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96))
    {
      v114 = 0;
      v109 = 0;
      v115 = 0;
      v116 = 0;
      v117 = 0;
      v118 = 0;
      goto LABEL_347;
    }
    v100 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
    webrtc::RtpTransmissionManager::GetAudioTransceiver(v100, __str);
    v101 = __str[0];
    v102 = *(_QWORD *)(__str[0] + 16);
    v103 = *(_QWORD *)(v102 + 32);
    v104 = *(_QWORD *)(v102 + 40);
    v105 = v104 - v103;
    if (v104 == v103)
    {
      v109 = 0;
    }
    else
    {
      if ((v105 & 0x8000000000000000) != 0)
        goto LABEL_522;
      v106 = (char *)operator new(v105);
      v107 = 0;
      do
      {
        v108 = *(void (****)(_QWORD))(v103 + v107);
        *(_QWORD *)&v106[v107] = v108;
        if (v108)
          (**v108)(v108);
        v107 += 8;
      }
      while (v103 + v107 != v104);
      v109 = v107 != 0;
      if (v107)
      {
        v110 = v107 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v111 = *(_QWORD *)&v106[v110 - 8];
          if (v111)
            (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
          v110 -= 8;
        }
        while (v110);
      }
      operator delete(v106);
      a2 = v327;
      if (!v101)
      {
LABEL_312:
        v239 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
        webrtc::RtpTransmissionManager::GetVideoTransceiver(v239, __str);
        v240 = __str[0];
        v241 = *(_QWORD *)(__str[0] + 16);
        v242 = *(_QWORD *)(v241 + 32);
        v243 = *(_QWORD *)(v241 + 40);
        v244 = v243 - v242;
        if (v243 == v242)
        {
          v114 = 0;
        }
        else
        {
          if ((v244 & 0x8000000000000000) != 0)
            goto LABEL_522;
          v245 = (char *)operator new(v244);
          v246 = 0;
          do
          {
            v247 = *(void (****)(_QWORD))(v242 + v246);
            *(_QWORD *)&v245[v246] = v247;
            if (v247)
              (**v247)(v247);
            v246 += 8;
          }
          while (v242 + v246 != v243);
          v114 = v246 != 0;
          if (v246)
          {
            v248 = v246 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v249 = *(_QWORD *)&v245[v248 - 8];
              if (v249)
                (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
              v248 -= 8;
            }
            while (v248);
          }
          operator delete(v245);
          a2 = v327;
          if (!v240)
            goto LABEL_327;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
LABEL_327:
        if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96))
        {
          v251 = *(_DWORD *)a2;
          v250 = *(_DWORD *)(a2 + 4);
          v252 = v250 > 0 || v109;
          v115 = v250 > 0 || v250 == -1;
          if (v250 == -1)
            v117 = v109;
          else
            v117 = v252;
          v253 = v251 > 0 || v114;
          v116 = v251 == -1 || v251 > 0;
          if (v251 == -1)
            v118 = v114;
          else
            v118 = v253;
        }
        else
        {
          v115 = 1;
          v116 = 1;
          v117 = v109;
          v118 = v114;
        }
LABEL_347:
        LOBYTE(v352[0]) = 0;
        LOBYTE(v352[1]) = 0;
        LOBYTE(v355) = 0;
        LOBYTE(v356) = 0;
        LOBYTE(v350) = 0;
        LOBYTE(v351) = 0;
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        {
          v254 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          v255 = !v115;
          if (!v109 || v255)
          {
            if (v115 || !v109)
            {
              if (v109 | v255)
                v256 = 3;
              else
                v256 = 2;
            }
            else
            {
              v256 = 1;
            }
          }
          else
          {
            v256 = 0;
          }
          v257 = !v116;
          if (!v114 || v257)
          {
            if (v116 || !v114)
            {
              if (v114 | v257)
                v258 = 3;
              else
                v258 = 2;
            }
            else
            {
              v258 = 1;
            }
          }
          else
          {
            v258 = 0;
          }
          webrtc::SdpOfferAnswerHandler::GenerateMediaDescriptionOptions(a1, v254, v256, v258, (uint64_t)v352, (uint64_t)&v355, (uint64_t)&v350, v358);
        }
        v259 = *(_QWORD *)(a1 + 16);
        if (*(_QWORD *)(v259 + 96))
        {
          v260 = LOBYTE(v352[1]);
          if (LOBYTE(v352[1]))
            v261 = 0;
          else
            v261 = v117;
          if (v261 == 1)
          {
            __src[23] = 5;
            if (__src <= "audio" && &__src[5] > "audio")
              goto LABEL_521;
            *(_DWORD *)__src = *(_DWORD *)"audio";
            *(_WORD *)&__src[4] = cricket::CN_AUDIO[4];
            v262 = !v115;
            if (!v109 || (v263 = 0, v262))
            {
              if (v115 || !v109)
              {
                if (v109 | v262)
                  v263 = 3;
                else
                  v263 = 2;
              }
              else
              {
                v263 = 1;
              }
            }
            LODWORD(__str[0]) = 0;
            *(_OWORD *)&__str[1] = *(_OWORD *)__src;
            v373 = *(void (**)(uint64_t **))&__src[16];
            memset(&v374[4], 0, 100);
            *(_DWORD *)v374 = v263;
            v264 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v259 + 96) + 24))(*(_QWORD *)(v259 + 96));
            (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v264 + 16))(__src);
            v265 = *(_QWORD *)&v374[56];
            if (*(_QWORD *)&v374[56])
            {
              v266 = *(_QWORD *)&v374[64];
              v267 = *(void **)&v374[56];
              if (*(_QWORD *)&v374[64] != *(_QWORD *)&v374[56])
              {
                do
                {
                  if (*(char *)(v266 - 17) < 0)
                    operator delete(*(void **)(v266 - 40));
                  v266 -= 40;
                }
                while (v266 != v265);
                v267 = *(void **)&v374[56];
              }
              *(_QWORD *)&v374[64] = v265;
              operator delete(v267);
            }
            *(_OWORD *)&v374[56] = *(_OWORD *)__src;
            *(_QWORD *)&v374[72] = *(_QWORD *)&__src[16];
            if (v361[1] >= v361[2])
            {
              v268 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions const&>((cricket::MediaDescriptionOptions **)v361, (const cricket::MediaDescriptionOptions *)__str);
            }
            else
            {
              if (!v361[1])
                goto LABEL_521;
              v268 = (cricket::MediaDescriptionOptions *)((char *)cricket::MediaDescriptionOptions::MediaDescriptionOptions((cricket::MediaDescriptionOptions *)v361[1], (const cricket::MediaDescriptionOptions *)__str)+ 136);
            }
            v361[1] = v268;
            v352[0] = (void *)(0xF0F0F0F0F0F0F0F1 * (((char *)v268 - (char *)v361[0]) >> 3) - 1);
            cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__str);
            v260 = 1;
          }
          v269 = v356;
          v270 = v118 ^ 1;
          if ((_BYTE)v356)
            v270 = 1;
          if ((v270 & 1) == 0)
          {
            __src[23] = 5;
            if (__src <= "video" && &__src[5] > "video")
              goto LABEL_521;
            *(_DWORD *)__src = *(_DWORD *)"video";
            *(_WORD *)&__src[4] = cricket::CN_VIDEO[4];
            v271 = !v116;
            if (!v114 || (v272 = 0, v271))
            {
              if (v116 || !v114)
              {
                if (v114 | v271)
                  v272 = 3;
                else
                  v272 = 2;
              }
              else
              {
                v272 = 1;
              }
            }
            LODWORD(__str[0]) = 1;
            *(_OWORD *)&__str[1] = *(_OWORD *)__src;
            v373 = *(void (**)(uint64_t **))&__src[16];
            memset(&v374[4], 0, 100);
            *(_DWORD *)v374 = v272;
            v273 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96));
            (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v273 + 16))(__src);
            v274 = *(_QWORD *)&v374[56];
            if (*(_QWORD *)&v374[56])
            {
              v275 = *(_QWORD *)&v374[64];
              v276 = *(void **)&v374[56];
              if (*(_QWORD *)&v374[64] != *(_QWORD *)&v374[56])
              {
                do
                {
                  if (*(char *)(v275 - 17) < 0)
                    operator delete(*(void **)(v275 - 40));
                  v275 -= 40;
                }
                while (v275 != v274);
                v276 = *(void **)&v374[56];
              }
              *(_QWORD *)&v374[64] = v274;
              operator delete(v276);
            }
            *(_OWORD *)&v374[56] = *(_OWORD *)__src;
            *(_QWORD *)&v374[72] = *(_QWORD *)&__src[16];
            if (v361[1] >= v361[2])
            {
              v277 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions const&>((cricket::MediaDescriptionOptions **)v361, (const cricket::MediaDescriptionOptions *)__str);
            }
            else
            {
              if (!v361[1])
                goto LABEL_521;
              v277 = (cricket::MediaDescriptionOptions *)((char *)cricket::MediaDescriptionOptions::MediaDescriptionOptions((cricket::MediaDescriptionOptions *)v361[1], (const cricket::MediaDescriptionOptions *)__str)+ 136);
            }
            v361[1] = v277;
            v355 = 0xF0F0F0F0F0F0F0F1 * (((char *)v277 - (char *)v361[0]) >> 3) - 1;
            cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__str);
            v269 = 1;
          }
          if (v260)
          {
            if ((void *)(0xF0F0F0F0F0F0F0F1 * (((char *)v361[1] - (char *)v361[0]) >> 3)) <= v352[0])
              goto LABEL_521;
            v278 = (char *)v361[0] + 136 * (uint64_t)v352[0];
          }
          else
          {
            v278 = 0;
          }
          a2 = v327;
          if (v269)
          {
            if (0xF0F0F0F0F0F0F0F1 * (((char *)v361[1] - (char *)v361[0]) >> 3) <= v355)
              goto LABEL_521;
            v279 = (char *)v361[0] + 136 * v355;
          }
          else
          {
            v279 = 0;
          }
          v280 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
          webrtc::RtpTransmissionManager::GetSendersInternal(v280, (char **)__str);
          v281 = __str[0];
          if (__str[0])
          {
            v282 = __str[1];
            v283 = (void *)__str[0];
            if (__str[1] != __str[0])
            {
              do
              {
                v285 = *(_QWORD *)(v282 - 8);
                v282 -= 8;
                v284 = v285;
                if (v285)
                  (*(void (**)(uint64_t))(*(_QWORD *)v284 + 8))(v284);
              }
              while (v282 != v281);
              v283 = (void *)__str[0];
            }
            __str[1] = v281;
            operator delete(v283);
          }
        }
        v181 = v326;
        if (!(_BYTE)v351 && v99)
        {
          __src[23] = 4;
          if (__src <= "data" && &__src[4] > "data")
            goto LABEL_521;
          strcpy(__src, "data");
          LODWORD(__str[0]) = 2;
          v373 = *(void (**)(uint64_t **))&__src[16];
          *(_OWORD *)&__str[1] = *(_OWORD *)__src;
          memset(v374, 0, sizeof(v374));
          v286 = (char *)v361[1];
          if (v361[1] >= v361[2])
          {
            v288 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v361, (uint64_t)__str);
          }
          else
          {
            if (!v361[1])
              goto LABEL_521;
            *(_DWORD *)v361[1] = 2;
            v287 = *(_OWORD *)&__str[1];
            *((_QWORD *)v286 + 3) = v373;
            *(_OWORD *)(v286 + 8) = v287;
            __str[2] = 0;
            v373 = 0;
            __str[1] = 0;
            *((_OWORD *)v286 + 2) = 0u;
            *((_OWORD *)v286 + 3) = 0u;
            *(_QWORD *)&v374[8] = 0;
            *(_QWORD *)&v374[16] = 0;
            *((_QWORD *)v286 + 9) = 0;
            *((_QWORD *)v286 + 10) = 0;
            *((_QWORD *)v286 + 8) = 0;
            memset(&v374[24], 0, 32);
            *((_QWORD *)v286 + 11) = 0;
            *((_QWORD *)v286 + 12) = 0;
            *((_QWORD *)v286 + 13) = 0;
            *((_QWORD *)v286 + 14) = 0;
            *(_QWORD *)&v374[56] = 0;
            *(_QWORD *)&v374[64] = 0;
            *((_QWORD *)v286 + 15) = 0;
            *((_QWORD *)v286 + 16) = 0;
            memset(&v374[72], 0, 32);
            v288 = v286 + 136;
          }
          v361[1] = v288;
          cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__str);
          if ((__src[23] & 0x80000000) != 0)
          {
            v289 = *(void **)__src;
            goto LABEL_476;
          }
        }
LABEL_477:
        if (*(_BYTE *)(a2 + 9))
        {
          v305 = 1;
          v307 = (char *)v361[1];
          i = (char *)v361[0];
          if (v361[0] != v361[1])
            goto LABEL_479;
        }
        else
        {
          v305 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 16) != 0;
          v307 = (char *)v361[1];
          for (i = (char *)v361[0]; i != v307; i += 136)
          {
LABEL_479:
            i[37] = v305;
            i[39] = *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                             + 157);
          }
        }
        if (&v358[8] != (_BYTE *)(a1 + 120))
        {
          v308 = *(_BYTE *)(a1 + 143);
          if ((v358[31] & 0x80000000) != 0)
          {
            if (v308 >= 0)
              v309 = (const std::string::value_type *)(a1 + 120);
            else
              v309 = *(const std::string::value_type **)(a1 + 120);
            if (v308 >= 0)
              v310 = *(unsigned __int8 *)(a1 + 143);
            else
              v310 = *(_QWORD *)(a1 + 128);
            std::string::__assign_no_alias<false>((std::string *)&v358[8], v309, v310);
          }
          else if ((*(_BYTE *)(a1 + 143) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(&v358[8], *(char **)(a1 + 120), *(_QWORD *)(a1 + 128));
          }
          else
          {
            *(_OWORD *)&v358[8] = *(_OWORD *)(a1 + 120);
            *(_QWORD *)&v358[24] = *(_QWORD *)(a1 + 136);
          }
        }
        (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 96))(__str);
        v359 = __str[0];
        v360 = BYTE4(__str[0]);
        v311 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
        v352[0] = (void *)a1;
        memset(__str, 0, sizeof(__str));
        *(_QWORD *)__src = __str;
        *(_QWORD *)&__src[8] = v352;
        (*(void (**)(uint64_t, _BYTE *, double (*)(void ***), unint64_t *))(*(_QWORD *)v311 + 96))(v311, __src, rtc::FunctionView<void ()(void)>::CallVoidPtr<std::vector<cricket::IceParameters> rtc::Thread::BlockingCall<webrtc::SdpOfferAnswerHandler::GetOptionsForOffer(webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&,cricket::MediaSessionOptions *)::$_1,std::vector<cricket::IceParameters>,void>(webrtc::SdpOfferAnswerHandler::GetOptionsForOffer(webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&,cricket::MediaSessionOptions *)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, &v355);
        v312 = (void **)v361[3];
        if (!v361[3])
          goto LABEL_504;
        v313 = (void **)v361[4];
        v314 = v361[3];
        if (v361[4] == v361[3])
        {
LABEL_503:
          v361[4] = v312;
          operator delete(v314);
LABEL_504:
          *(_OWORD *)&v361[3] = *(_OWORD *)__str;
          v361[5] = (void *)__str[2];
          v358[3] = *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                             + 243);
          v362 = *(_BYTE *)(a2 + 16);
          webrtc::WebRtcSessionDescriptionFactory::CreateOffer(*(_QWORD *)(a1 + 24), *v181, a2, (webrtc::_anonymous_namespace_ **)v358);
          v315 = (void **)v361[3];
          if (!v361[3])
            goto LABEL_514;
          v316 = (void **)v361[4];
          v317 = v361[3];
          if (v361[4] == v361[3])
          {
LABEL_513:
            v361[4] = v315;
            operator delete(v317);
LABEL_514:
            v318 = (char *)v361[0];
            if (v361[0])
            {
              v319 = (char *)v361[1];
              v320 = v361[0];
              if (v361[1] != v361[0])
              {
                do
                  cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)(v319 - 136));
                while (v319 != v318);
                v320 = v361[0];
              }
              v361[1] = v318;
              operator delete(v320);
            }
            if ((v358[31] & 0x80000000) != 0)
            {
              v83 = *(char **)&v358[8];
              goto LABEL_87;
            }
            return;
          }
          while (1)
          {
            if (*((char *)v316 - 9) < 0)
            {
              operator delete(*(v316 - 4));
              if ((*((char *)v316 - 33) & 0x80000000) == 0)
                goto LABEL_508;
LABEL_511:
              operator delete(*(v316 - 7));
              v316 -= 7;
              if (v316 == v315)
              {
LABEL_512:
                v317 = v361[3];
                goto LABEL_513;
              }
            }
            else
            {
              if (*((char *)v316 - 33) < 0)
                goto LABEL_511;
LABEL_508:
              v316 -= 7;
              if (v316 == v315)
                goto LABEL_512;
            }
          }
        }
        while (1)
        {
          if (*((char *)v313 - 9) < 0)
          {
            operator delete(*(v313 - 4));
            if ((*((char *)v313 - 33) & 0x80000000) == 0)
              goto LABEL_498;
LABEL_501:
            operator delete(*(v313 - 7));
            v313 -= 7;
            if (v313 == v312)
            {
LABEL_502:
              v314 = v361[3];
              goto LABEL_503;
            }
          }
          else
          {
            if (*((char *)v313 - 33) < 0)
              goto LABEL_501;
LABEL_498:
            v313 -= 7;
            if (v313 == v312)
              goto LABEL_502;
          }
        }
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
    goto LABEL_312;
  }
  v74 = *(_DWORD *)(a2 + 4);
  if (v74 == 1)
  {
    webrtc::SdpOfferAnswerHandler::AddUpToOneReceivingTransceiverOfType(a1, 0);
    goto LABEL_93;
  }
  if (!v74)
  {
    webrtc::SdpOfferAnswerHandler::RemoveRecvDirectionFromReceivingTransceiversOfType(a1, 0);
    goto LABEL_93;
  }
  if (v74 < 2)
  {
LABEL_93:
    v92 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == 1)
    {
      webrtc::SdpOfferAnswerHandler::AddUpToOneReceivingTransceiverOfType(a1, 1);
      goto LABEL_105;
    }
    if (!v92)
    {
      webrtc::SdpOfferAnswerHandler::RemoveRecvDirectionFromReceivingTransceiversOfType(a1, 1);
      goto LABEL_105;
    }
    if (v92 < 2)
      goto LABEL_105;
    v91 = "offer_to_receive_video > 1 is not supported.";
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __str[0] = "UNSUPPORTED_PARAMETER";
      __str[1] = 21;
      goto LABEL_100;
    }
    goto LABEL_101;
  }
  v91 = "offer_to_receive_audio > 1 is not supported.";
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    __str[0] = "UNSUPPORTED_PARAMETER";
    __str[1] = 21;
LABEL_100:
    rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v84, v85, v86, v87, v88, v89, v90, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
  }
LABEL_101:
  v93 = (char *)operator new(0x30uLL);
  v94 = v93;
  if (v93 <= v91 && v93 + 44 > v91)
    goto LABEL_521;
  v95 = *((_OWORD *)v91 + 1);
  *(_OWORD *)v93 = *(_OWORD *)v91;
  *((_OWORD *)v93 + 1) = v95;
  *(_OWORD *)(v93 + 28) = *(_OWORD *)(v91 + 28);
  v93[44] = 0;
  v96 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v97 = (void (***)(_QWORD))*a3;
  v330 = 2;
  v331 = v94;
  v332 = xmmword_208F094F0;
  v333 = 0;
  v334 = 0;
  v335 = 0;
  webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(v96, v97, &v330);
  if (SHIBYTE(v332) < 0)
  {
    v83 = v331;
LABEL_87:
    operator delete(v83);
  }
}

void webrtc::SdpOfferAnswerHandler::CreateAnswer(_QWORD *a1, void (***a2)(_QWORD), __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v6 = a1[14];
  v7 = a1[48];
  if (!v7 || (v8 = atomic_load((unsigned int *)(v7 + 4)), v8 == 1))
  {
    v9 = (_QWORD *)operator new();
    *v9 = 1;
    v10 = (unsigned int *)v9 + 1;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = a1[48];
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 4);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        MEMORY[0x20BD0ADEC]();
    }
    a1[48] = v9;
LABEL_12:
    v16 = (unsigned int *)v9 + 1;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = a1[49];
    do
      v19 = __ldxr(v16);
    while (__stxr(v19 + 1, v16));
    do
    {
      v20 = __ldaxr(v16);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v16));
    if (!v21)
      MEMORY[0x20BD0ADEC](v9, 0x1000C404A09149ALL);
    if (a2)
      goto LABEL_20;
    goto LABEL_21;
  }
  v9 = (_QWORD *)a1[48];
  if (v9)
    goto LABEL_12;
  v18 = a1[49];
  if (a2)
LABEL_20:
    (**a2)(a2);
LABEL_21:
  v35 = *a3;
  LOBYTE(v36) = *((_BYTE *)a3 + 16);
  if (v6)
  {
    do
      v22 = __ldxr((unsigned int *)v6);
    while (__stxr(v22 + 1, (unsigned int *)v6));
  }
  v23 = operator new();
  v24 = v23;
  *(_DWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = v6;
  do
    v25 = __ldxr((unsigned int *)v23);
  while (__stxr(v25 + 1, (unsigned int *)v23));
  v26 = operator new(0x10uLL);
  *v26 = &off_24C0B81D0;
  v26[1] = v24;
  v27 = operator new();
  *(_DWORD *)(v27 + 48) = v36;
  *(_OWORD *)(v27 + 32) = v35;
  v28 = *(_QWORD *)(v6 + 16);
  v29 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)v27 = &off_24C0C07C8;
  *(_QWORD *)(v27 + 8) = v9;
  *(_QWORD *)(v27 + 16) = v18;
  *(_QWORD *)(v27 + 24) = a2;
  *(_QWORD *)(v27 + 80) = v26;
  if (v29 == v28)
    v30 = 0;
  else
    v30 = ((v29 - v28) << 6) - 1;
  v31 = *(_QWORD *)(v6 + 48);
  if (v30 == v31 + *(_QWORD *)(v6 + 40))
  {
    std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity(v6 + 8);
    v31 = *(_QWORD *)(v6 + 48);
    v28 = *(_QWORD *)(v6 + 16);
    v29 = *(_QWORD *)(v6 + 24);
  }
  if (v29 == v28
    || (v32 = *(_QWORD *)(v6 + 40) + v31, (v33 = *(_QWORD *)(v28 + ((v32 >> 6) & 0x3FFFFFFFFFFFFF8))) == 0))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v33 + 8 * (v32 & 0x1FF)) = v27;
    *(_QWORD *)(v6 + 48) = v31 + 1;
    if (!v31)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + ((*(_QWORD *)(v6 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*(_QWORD *)(v6 + 40) & 0x1FFLL));
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
    }
  }
}

void webrtc::SdpOfferAnswerHandler::DoCreateAnswer(uint64_t a1, int *a2, void (****a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (***v13)(_QWORD);
  size_t v14;
  webrtc::_anonymous_namespace_ **v15;
  webrtc::_anonymous_namespace_ **p_src;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t **v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  void *v56;
  void *v57;
  int v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  _BOOL4 v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  webrtc::_anonymous_namespace_ **v72;
  uint64_t v74;
  int v75;
  webrtc::_anonymous_namespace_ **v76;
  char v77;
  char *v78;
  uint64_t v79;
  void *v80;
  webrtc::_anonymous_namespace_ *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (***v90)(_QWORD);
  size_t v91;
  webrtc::_anonymous_namespace_ **v92;
  webrtc::_anonymous_namespace_ **v93;
  webrtc::_anonymous_namespace_ **v94;
  webrtc::RtpTransmissionManager *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  size_t v100;
  char *v101;
  uint64_t v102;
  void (***v103)(_QWORD);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  void *v108;
  char v109;
  char *v110;
  uint64_t v111;
  webrtc::_anonymous_namespace_ *v112;
  _BOOL4 v113;
  unint64_t v114;
  uint64_t v115;
  _BOOL4 v116;
  _BOOL4 v117;
  _BOOL4 v118;
  webrtc::RtpTransmissionManager *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  char *v125;
  uint64_t v126;
  void (***v127)(_QWORD);
  unint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  char *v141;
  char *v142;
  webrtc::RtpTransmissionManager *v143;
  char *v144;
  char *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *i;
  char v151;
  const std::string::value_type *v152;
  size_t v153;
  uint64_t v154;
  void **v155;
  void **v156;
  void *v157;
  void **v158;
  void **v159;
  void *v160;
  char *v161;
  char *v162;
  void *v163;
  uint64_t v164;
  webrtc::_anonymous_namespace_ **__src;
  std::string v166;
  int v167;
  char v168;
  void *v169[2];
  void *v170[4];
  char v171;
  int v172;
  void *v173;
  __int128 v174;
  _BYTE v175[7];
  int v176;
  webrtc::_anonymous_namespace_ **v177;
  __int128 v178;
  _BYTE v179[7];
  char v180;
  void *__p[3];
  void (*v182)(uint64_t **);
  _BYTE v183[104];
  _BYTE v184[16];
  unint64_t v185;
  char v186;
  __int128 v187;
  uint64_t v188;

  v188 = *MEMORY[0x24BDAC8D0];
  if (!*a3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    return;
  }
  if (*(_DWORD *)(a1 + 232))
  {
    webrtc::SdpOfferAnswerHandler::GetSessionErrorMsg((webrtc::SdpOfferAnswerHandler *)&__src, a1);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v13 = *a3;
    if (v166.__r_.__value_.__s.__data_[15] < 0)
    {
      v14 = v166.__r_.__value_.__r.__words[0];
      if ((v166.__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0)
        goto LABEL_242;
      p_src = __src;
      if (v166.__r_.__value_.__r.__words[0])
      {
        if (!__src)
          goto LABEL_242;
      }
      v176 = 10;
      if (v166.__r_.__value_.__r.__words[0] > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_244;
      v15 = (webrtc::_anonymous_namespace_ **)&v177;
      if (v166.__r_.__value_.__r.__words[0] <= 0x16)
        goto LABEL_7;
    }
    else
    {
      v14 = v166.__r_.__value_.__s.__data_[15];
      v176 = 10;
      v15 = (webrtc::_anonymous_namespace_ **)&v177;
      p_src = (webrtc::_anonymous_namespace_ **)&__src;
      if (v166.__r_.__value_.__s.__data_[15] <= 0x16uLL)
      {
LABEL_7:
        HIBYTE(v178) = v14;
        goto LABEL_86;
      }
    }
    v70 = (v14 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v70 = v14 | 7;
    v71 = v70 + 1;
    v15 = (webrtc::_anonymous_namespace_ **)operator new(v70 + 1);
    *(_QWORD *)&v178 = v14;
    *((_QWORD *)&v178 + 1) = v71 | 0x8000000000000000;
    v177 = v15;
LABEL_86:
    v72 = (webrtc::_anonymous_namespace_ **)((char *)v15 + v14);
    if (v15 > p_src || v72 <= p_src)
    {
      if (v14)
        memmove(v15, p_src, v14);
      *(_BYTE *)v72 = 0;
      *(_DWORD *)v179 = 0;
      v179[4] = 0;
      v179[6] = 0;
      v74 = *(_QWORD *)(v12 + 8);
      if (v13)
        (**v13)(v13);
      v75 = v176;
      v76 = v177;
      *(_QWORD *)&v187 = v178;
      *(_QWORD *)((char *)&v187 + 7) = *(_QWORD *)((char *)&v178 + 7);
      v77 = HIBYTE(v178);
      v178 = 0uLL;
      v177 = 0;
      LODWORD(v185) = *(_DWORD *)v179;
      *(_DWORD *)((char *)&v185 + 3) = *(_DWORD *)&v179[3];
      v78 = (char *)operator new();
      *(_QWORD *)v78 = v13;
      *((_DWORD *)v78 + 2) = v75;
      v79 = v187;
      *((_QWORD *)v78 + 2) = v76;
      *((_QWORD *)v78 + 3) = v79;
      *(_QWORD *)(v78 + 31) = *(_QWORD *)((char *)&v187 + 7);
      v78[39] = v77;
      *((_DWORD *)v78 + 10) = v185;
      *(_DWORD *)(v78 + 43) = *(_DWORD *)((char *)&v185 + 3);
      __p[0] = v78;
      __p[2] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0>;
      v182 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0 &&>;
      (*(void (**)(uint64_t, void **, _BYTE *, char *))(*(_QWORD *)v74 + 8))(v74, __p, v184, &v180);
      ((void (*)(uint64_t, void **, void **))__p[2])(1, __p, __p);
      if (SHIBYTE(v178) < 0)
      {
        v80 = v177;
LABEL_126:
        operator delete(v80);
        goto LABEL_127;
      }
      goto LABEL_127;
    }
LABEL_242:
    __break(1u);
  }
  if ((*(_DWORD *)(a1 + 64) & 0xFFFFFFFE) != 2)
  {
    v81 = (webrtc::_anonymous_namespace_ *)operator new(0x68uLL);
    __src = (webrtc::_anonymous_namespace_ **)v81;
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = xmmword_208F1B0B0;
    if (v81 <= (webrtc::_anonymous_namespace_ *)"PeerConnection cannot create an answer in a state other than have-remot"
                                                 "e-offer or have-local-pranswer."
      && (char *)v81 + 102 > "PeerConnection cannot create an answer in a state other than have-remote-offer or have-local-pranswer.")
    {
      goto LABEL_242;
    }
    strcpy((char *)v81, "PeerConnection cannot create an answer in a state other than have-remote-offer or have-local-pranswer.");
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v82, v83, v84, v85, v86, v87, v88, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    v89 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v90 = *a3;
    if (v166.__r_.__value_.__s.__data_[15] < 0)
    {
      v91 = v166.__r_.__value_.__r.__words[0];
      if ((v166.__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0)
        goto LABEL_242;
      v93 = __src;
      if (v166.__r_.__value_.__r.__words[0])
      {
        if (!__src)
          goto LABEL_242;
      }
      v172 = 6;
      if (v166.__r_.__value_.__r.__words[0] > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_244;
      v92 = (webrtc::_anonymous_namespace_ **)&v173;
      if (v166.__r_.__value_.__r.__words[0] <= 0x16)
      {
LABEL_102:
        HIBYTE(v174) = v91;
        v94 = (webrtc::_anonymous_namespace_ **)((char *)&v173 + v91);
        if (&v173 > (void **)v93)
          goto LABEL_120;
LABEL_119:
        if (v94 > v93)
          goto LABEL_242;
LABEL_120:
        if (v91)
          memmove(v92, v93, v91);
        *(_BYTE *)v94 = 0;
        *(_DWORD *)v175 = 0;
        v175[4] = 0;
        v175[6] = 0;
        v106 = *(_QWORD *)(v89 + 8);
        if (v90)
          (**v90)(v90);
        v107 = v172;
        v108 = v173;
        *(_QWORD *)&v187 = v174;
        *(_QWORD *)((char *)&v187 + 7) = *(_QWORD *)((char *)&v174 + 7);
        v109 = HIBYTE(v174);
        v174 = 0uLL;
        v173 = 0;
        LODWORD(v185) = *(_DWORD *)v175;
        *(_DWORD *)((char *)&v185 + 3) = *(_DWORD *)&v175[3];
        v110 = (char *)operator new();
        *(_QWORD *)v110 = v90;
        *((_DWORD *)v110 + 2) = v107;
        v111 = v187;
        *((_QWORD *)v110 + 2) = v108;
        *((_QWORD *)v110 + 3) = v111;
        *(_QWORD *)(v110 + 31) = *(_QWORD *)((char *)&v187 + 7);
        v110[39] = v109;
        *((_DWORD *)v110 + 10) = v185;
        *(_DWORD *)(v110 + 43) = *(_DWORD *)((char *)&v185 + 3);
        __p[0] = v110;
        __p[2] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0>;
        v182 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0 &&>;
        (*(void (**)(uint64_t, void **, _BYTE *, char *))(*(_QWORD *)v106 + 8))(v106, __p, v184, &v180);
        ((void (*)(uint64_t, void **, void **))__p[2])(1, __p, __p);
        if (SHIBYTE(v174) < 0)
        {
          v80 = v173;
          goto LABEL_126;
        }
LABEL_127:
        if (v166.__r_.__value_.__s.__data_[15] < 0)
        {
          v112 = (webrtc::_anonymous_namespace_ *)__src;
LABEL_129:
          operator delete(v112);
          return;
        }
        return;
      }
    }
    else
    {
      v91 = v166.__r_.__value_.__s.__data_[15];
      v172 = 6;
      v92 = (webrtc::_anonymous_namespace_ **)&v173;
      v93 = (webrtc::_anonymous_namespace_ **)&__src;
      if (v166.__r_.__value_.__s.__data_[15] <= 0x16uLL)
        goto LABEL_102;
    }
    v104 = (v91 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17)
      v104 = v91 | 7;
    v105 = v104 + 1;
    v92 = (webrtc::_anonymous_namespace_ **)operator new(v104 + 1);
    *(_QWORD *)&v174 = v91;
    *((_QWORD *)&v174 + 1) = v105 | 0x8000000000000000;
    v173 = v92;
    v94 = (webrtc::_anonymous_namespace_ **)((char *)v92 + v91);
    if (v92 > v93)
      goto LABEL_120;
    goto LABEL_119;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8)))
  {
    if (a2[1] != -1 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v25, v26, v27, v28, v29, v30, v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    if (*a2 != -1 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
  }
  LODWORD(__src) = 257;
  BYTE4(__src) = 0;
  *((_BYTE *)&v166.__r_.__value_.__s + 23) = 16;
  if (&v166 <= (std::string *)"DefaultRtcpCname"
    && &v166.__r_.__value_.__r.__words[2] > (std::string::size_type *)"DefaultRtcpCname")
  {
    goto LABEL_242;
  }
  strcpy((char *)&v166, "DefaultRtcpCname");
  v167 = 65537;
  v168 = 0;
  *(_OWORD *)v169 = 0u;
  memset(v170, 0, sizeof(v170));
  v171 = 1;
  LOBYTE(__src) = *((_BYTE *)a2 + 8);
  BYTE2(__src) = *((_BYTE *)a2 + 10);
  BYTE4(__src) = *((_BYTE *)a2 + 11);
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8)))
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96))
    {
      v113 = 0;
      v116 = 0;
      v117 = 0;
      v118 = 0;
      goto LABEL_167;
    }
    v95 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
    webrtc::RtpTransmissionManager::GetAudioTransceiver(v95, __p);
    v96 = __p[0];
    v97 = *((_QWORD *)__p[0] + 2);
    v98 = *(_QWORD *)(v97 + 32);
    v99 = *(_QWORD *)(v97 + 40);
    v100 = v99 - v98;
    if (v99 == v98)
    {
      v113 = 0;
    }
    else
    {
      if ((v100 & 0x8000000000000000) != 0)
        goto LABEL_244;
      v101 = (char *)operator new(v100);
      v102 = 0;
      do
      {
        v103 = *(void (****)(_QWORD))(v98 + v102);
        *(_QWORD *)&v101[v102] = v103;
        if (v103)
          (**v103)(v103);
        v102 += 8;
      }
      while (v98 + v102 != v99);
      v113 = v102 != 0;
      if (v102)
      {
        v114 = v102 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v115 = *(_QWORD *)&v101[v114 - 8];
          if (v115)
            (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
          v114 -= 8;
        }
        while (v114);
      }
      operator delete(v101);
      if (!v96)
      {
LABEL_140:
        v119 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
        webrtc::RtpTransmissionManager::GetVideoTransceiver(v119, __p);
        v120 = __p[0];
        v121 = *((_QWORD *)__p[0] + 2);
        v122 = *(_QWORD *)(v121 + 32);
        v123 = *(_QWORD *)(v121 + 40);
        v124 = v123 - v122;
        if (v123 == v122)
        {
          v117 = 0;
        }
        else
        {
          if ((v124 & 0x8000000000000000) != 0)
            goto LABEL_244;
          v125 = (char *)operator new(v124);
          v126 = 0;
          do
          {
            v127 = *(void (****)(_QWORD))(v122 + v126);
            *(_QWORD *)&v125[v126] = v127;
            if (v127)
              (**v127)(v127);
            v126 += 8;
          }
          while (v122 + v126 != v123);
          v117 = v126 != 0;
          if (v126)
          {
            v128 = v126 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v129 = *(_QWORD *)&v125[v128 - 8];
              if (v129)
                (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
              v128 -= 8;
            }
            while (v128);
          }
          operator delete(v125);
          if (!v120)
            goto LABEL_155;
        }
        (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
LABEL_155:
        v131 = *a2;
        v130 = a2[1];
        v116 = v130 == -1 || v130 > 0;
        v118 = v131 == -1 || v131 > 0;
LABEL_167:
        LOBYTE(v187) = 0;
        BYTE8(v187) = 0;
        LOBYTE(v185) = 0;
        v186 = 0;
        v184[0] = 0;
        v184[8] = 0;
        v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
        v135 = !v116;
        if (!v113 || (v136 = 0, v135))
        {
          if (v113 | v135)
            v137 = 3;
          else
            v137 = 2;
          if (v116 || !v113)
            v136 = v137;
          else
            v136 = 1;
        }
        v138 = !v118;
        if (!v117 || v138)
        {
          if (v117 | v138)
            v140 = 3;
          else
            v140 = 2;
          if (v118 || !v117)
            v139 = v140;
          else
            v139 = 1;
        }
        else
        {
          v139 = 0;
        }
        webrtc::SdpOfferAnswerHandler::GenerateMediaDescriptionOptions(a1, v134, v136, v139, (uint64_t)&v187, (uint64_t)&v185, (uint64_t)v184, &__src);
        if (BYTE8(v187))
        {
          if (0xF0F0F0F0F0F0F0F1 * (((char *)v169[1] - (char *)v169[0]) >> 3) <= (unint64_t)v187)
            goto LABEL_242;
          v141 = (char *)v169[0] + 136 * v187;
          if (v186)
          {
LABEL_187:
            if (0xF0F0F0F0F0F0F0F1 * (((char *)v169[1] - (char *)v169[0]) >> 3) <= v185)
              goto LABEL_242;
            v142 = (char *)v169[0] + 136 * v185;
            if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96))
              goto LABEL_200;
LABEL_192:
            v143 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
            webrtc::RtpTransmissionManager::GetSendersInternal(v143, (char **)__p);
            v144 = (char *)__p[0];
            if (__p[0])
            {
              v145 = (char *)__p[1];
              v146 = __p[0];
              if (__p[1] != __p[0])
              {
                do
                {
                  v148 = *((_QWORD *)v145 - 1);
                  v145 -= 8;
                  v147 = v148;
                  if (v148)
                    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
                }
                while (v145 != v144);
                v146 = __p[0];
              }
              __p[1] = v144;
              operator delete(v146);
            }
            goto LABEL_200;
          }
        }
        else
        {
          v141 = 0;
          if (v186)
            goto LABEL_187;
        }
        v142 = 0;
        if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96))
          goto LABEL_200;
        goto LABEL_192;
      }
    }
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
    goto LABEL_140;
  }
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v40 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
  v41 = *v40;
  v164 = v40[1];
  if (*v40 != v164)
  {
    while (1)
    {
      while (1)
      {
        v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v41 + 32) + 16))(*(_QWORD *)(v41 + 32));
        v48 = v43;
        if (v43 > 1)
          break;
        v49 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
        if (v49)
          v49 = (uint64_t **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8)) + 8);
        webrtc::TransceiverList::FindByMid(v49, (unsigned __int8 **)v41, (uint64_t *)&v187);
        v50 = v187;
        if (!(_QWORD)v187)
        {
          LODWORD(__p[0]) = v48;
          if (*(char *)(v41 + 23) < 0)
            goto LABEL_68;
LABEL_35:
          v54 = *(_OWORD *)v41;
          v182 = *(void (**)(uint64_t **))(v41 + 16);
          *(_OWORD *)&__p[1] = v54;
LABEL_69:
          *(_DWORD *)v183 = 3;
          v183[4] = 1;
          memset(&v183[5], 0, 99);
          v67 = (char *)v169[1];
          if (v169[1] >= v170[0])
            goto LABEL_23;
          goto LABEL_70;
        }
        v51 = (char *)v169[1];
        if (v169[1] >= v170[0])
        {
          v53 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v169, (uint64_t)__p);
        }
        else
        {
          if (!v169[1])
            goto LABEL_242;
          *(_DWORD *)v169[1] = __p[0];
          v52 = *(_OWORD *)&__p[1];
          *((_QWORD *)v51 + 3) = v182;
          *(_OWORD *)(v51 + 8) = v52;
          __p[2] = 0;
          v182 = 0;
          __p[1] = 0;
          *((_QWORD *)v51 + 4) = *(_QWORD *)v183;
          *((_QWORD *)v51 + 5) = 0;
          *((_QWORD *)v51 + 6) = 0;
          *((_QWORD *)v51 + 7) = 0;
          *(_OWORD *)(v51 + 40) = *(_OWORD *)&v183[8];
          *(_QWORD *)&v183[8] = 0;
          *(_QWORD *)&v183[16] = 0;
          *((_QWORD *)v51 + 7) = *(_QWORD *)&v183[24];
          *((_QWORD *)v51 + 8) = 0;
          *(_QWORD *)&v183[24] = 0;
          *((_QWORD *)v51 + 9) = 0;
          *((_QWORD *)v51 + 10) = 0;
          *((_OWORD *)v51 + 4) = *(_OWORD *)&v183[32];
          *(_QWORD *)&v183[32] = 0;
          *(_QWORD *)&v183[40] = 0;
          *((_QWORD *)v51 + 10) = *(_QWORD *)&v183[48];
          *((_QWORD *)v51 + 11) = 0;
          *(_QWORD *)&v183[48] = 0;
          *((_QWORD *)v51 + 12) = 0;
          *((_QWORD *)v51 + 13) = 0;
          *(_OWORD *)(v51 + 88) = *(_OWORD *)&v183[56];
          *(_QWORD *)&v183[56] = 0;
          *(_QWORD *)&v183[64] = 0;
          *((_QWORD *)v51 + 13) = *(_QWORD *)&v183[72];
          *((_QWORD *)v51 + 14) = 0;
          *(_QWORD *)&v183[72] = 0;
          *((_QWORD *)v51 + 15) = 0;
          *((_QWORD *)v51 + 16) = 0;
          *((_OWORD *)v51 + 7) = *(_OWORD *)&v183[80];
          *((_QWORD *)v51 + 16) = *(_QWORD *)&v183[96];
          memset(&v183[80], 0, 24);
          v53 = v51 + 136;
        }
        v169[1] = v53;
        cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__p);
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        v41 += 40;
        if (v41 == v164)
          goto LABEL_200;
      }
      if (v43 != 2)
      {
        if (v43 != 3)
        {
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc", 4484, "cricket::MEDIA_TYPE_DATA == media_type", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, v44, v45, v46, v47, 2);
LABEL_244:
          abort();
        }
        LODWORD(__p[0]) = 3;
        if ((*(char *)(v41 + 23) & 0x80000000) == 0)
          goto LABEL_35;
LABEL_68:
        std::string::__init_copy_ctor_external((std::string *)&__p[1], *(const std::string::value_type **)v41, *(_QWORD *)(v41 + 8));
        goto LABEL_69;
      }
      if (*(_BYTE *)(v41 + 28))
        goto LABEL_67;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(__p);
      if (!(_BYTE)v182)
        goto LABEL_242;
      v55 = *(unsigned __int8 *)(v41 + 23);
      if ((v55 & 0x80u) == 0)
        v56 = (void *)*(unsigned __int8 *)(v41 + 23);
      else
        v56 = *(void **)(v41 + 8);
      v57 = (void *)HIBYTE(__p[2]);
      v58 = SHIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) < 0)
        v57 = __p[1];
      if (v56 != v57)
        break;
      if (SHIBYTE(__p[2]) >= 0)
        v59 = __p;
      else
        v59 = (void **)__p[0];
      if ((v55 & 0x80) != 0)
      {
        v66 = memcmp(*(const void **)v41, v59, *(_QWORD *)(v41 + 8)) == 0;
        goto LABEL_64;
      }
      if (!*(_BYTE *)(v41 + 23))
      {
        v66 = 1;
        goto LABEL_64;
      }
      v60 = 0;
      v61 = v55 - 1;
      do
      {
        v62 = *(unsigned __int8 *)(v41 + v60);
        v63 = *((unsigned __int8 *)v59 + v60);
        v64 = v62 != v63;
      }
      while (v62 == v63 && v61 != v60++);
LABEL_65:
      if (v58 < 0)
      {
        operator delete(__p[0]);
        if (v64)
        {
LABEL_67:
          LODWORD(__p[0]) = 2;
          if (*(char *)(v41 + 23) < 0)
            goto LABEL_68;
          goto LABEL_35;
        }
      }
      else if (v64)
      {
        goto LABEL_67;
      }
      LODWORD(__p[0]) = 2;
      if (*(char *)(v41 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[1], *(const std::string::value_type **)v41, *(_QWORD *)(v41 + 8));
      }
      else
      {
        v69 = *(_OWORD *)v41;
        v182 = *(void (**)(uint64_t **))(v41 + 16);
        *(_OWORD *)&__p[1] = v69;
      }
      memset(v183, 0, sizeof(v183));
      v67 = (char *)v169[1];
      if (v169[1] >= v170[0])
      {
LABEL_23:
        v42 = std::vector<cricket::MediaDescriptionOptions>::__push_back_slow_path<cricket::MediaDescriptionOptions>(v169, (uint64_t)__p);
        goto LABEL_24;
      }
LABEL_70:
      if (!v67)
        goto LABEL_242;
      *(_DWORD *)v67 = __p[0];
      v68 = *(_OWORD *)&__p[1];
      *((_QWORD *)v67 + 3) = v182;
      *(_OWORD *)(v67 + 8) = v68;
      __p[2] = 0;
      v182 = 0;
      __p[1] = 0;
      *((_QWORD *)v67 + 4) = *(_QWORD *)v183;
      *((_QWORD *)v67 + 5) = 0;
      *((_QWORD *)v67 + 6) = 0;
      *((_QWORD *)v67 + 7) = 0;
      *(_OWORD *)(v67 + 40) = *(_OWORD *)&v183[8];
      *(_QWORD *)&v183[8] = 0;
      *(_QWORD *)&v183[16] = 0;
      *((_QWORD *)v67 + 7) = *(_QWORD *)&v183[24];
      *((_QWORD *)v67 + 8) = 0;
      *(_QWORD *)&v183[24] = 0;
      *((_QWORD *)v67 + 9) = 0;
      *((_QWORD *)v67 + 10) = 0;
      *((_OWORD *)v67 + 4) = *(_OWORD *)&v183[32];
      *(_QWORD *)&v183[32] = 0;
      *(_QWORD *)&v183[40] = 0;
      *((_QWORD *)v67 + 10) = *(_QWORD *)&v183[48];
      *((_QWORD *)v67 + 11) = 0;
      *(_QWORD *)&v183[48] = 0;
      *((_QWORD *)v67 + 12) = 0;
      *((_QWORD *)v67 + 13) = 0;
      *(_OWORD *)(v67 + 88) = *(_OWORD *)&v183[56];
      *(_QWORD *)&v183[56] = 0;
      *(_QWORD *)&v183[64] = 0;
      *((_QWORD *)v67 + 13) = *(_QWORD *)&v183[72];
      *((_QWORD *)v67 + 14) = 0;
      *(_QWORD *)&v183[72] = 0;
      *((_QWORD *)v67 + 15) = 0;
      *((_QWORD *)v67 + 16) = 0;
      *((_OWORD *)v67 + 7) = *(_OWORD *)&v183[80];
      *((_QWORD *)v67 + 16) = *(_QWORD *)&v183[96];
      memset(&v183[80], 0, 24);
      v42 = v67 + 136;
LABEL_24:
      v169[1] = v42;
      cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)__p);
      v41 += 40;
      if (v41 == v164)
        goto LABEL_200;
    }
    v66 = 0;
LABEL_64:
    v64 = !v66;
    goto LABEL_65;
  }
LABEL_200:
  v149 = (char *)v169[0];
  for (i = (char *)v169[1]; v149 != i; v149 += 136)
    v149[39] = *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 157);
  if (&v166 != (std::string *)(a1 + 120))
  {
    v151 = *(_BYTE *)(a1 + 143);
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v151 >= 0)
        v152 = (const std::string::value_type *)(a1 + 120);
      else
        v152 = *(const std::string::value_type **)(a1 + 120);
      if (v151 >= 0)
        v153 = *(unsigned __int8 *)(a1 + 143);
      else
        v153 = *(_QWORD *)(a1 + 128);
      std::string::__assign_no_alias<false>(&v166, v152, v153);
    }
    else if ((*(_BYTE *)(a1 + 143) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(&v166, *(char **)(a1 + 120), *(_QWORD *)(a1 + 128));
    }
    else
    {
      v166 = *(std::string *)(a1 + 120);
    }
  }
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 96))(__p);
  v167 = (int)__p[0];
  v168 = BYTE4(__p[0]);
  v154 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v185 = a1;
  memset(__p, 0, sizeof(__p));
  *(_QWORD *)&v187 = __p;
  *((_QWORD *)&v187 + 1) = &v185;
  (*(void (**)(uint64_t, __int128 *, double (*)(void ***), _BYTE *))(*(_QWORD *)v154 + 96))(v154, &v187, rtc::FunctionView<void ()(void)>::CallVoidPtr<std::vector<cricket::IceParameters> rtc::Thread::BlockingCall<webrtc::SdpOfferAnswerHandler::GetOptionsForAnswer(webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&,cricket::MediaSessionOptions *)::$_1,std::vector<cricket::IceParameters>,void>(webrtc::SdpOfferAnswerHandler::GetOptionsForAnswer(webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&,cricket::MediaSessionOptions *)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, v184);
  v155 = (void **)v170[1];
  if (v170[1])
  {
    v156 = (void **)v170[2];
    v157 = v170[1];
    if (v170[2] == v170[1])
    {
LABEL_223:
      v170[2] = v155;
      operator delete(v157);
      goto LABEL_224;
    }
    while (1)
    {
      if (*((char *)v156 - 9) < 0)
      {
        operator delete(*(v156 - 4));
        if ((*((char *)v156 - 33) & 0x80000000) == 0)
          goto LABEL_218;
LABEL_221:
        operator delete(*(v156 - 7));
        v156 -= 7;
        if (v156 == v155)
        {
LABEL_222:
          v157 = v170[1];
          goto LABEL_223;
        }
      }
      else
      {
        if (*((char *)v156 - 33) < 0)
          goto LABEL_221;
LABEL_218:
        v156 -= 7;
        if (v156 == v155)
          goto LABEL_222;
      }
    }
  }
LABEL_224:
  *(_OWORD *)&v170[1] = *(_OWORD *)__p;
  v170[3] = __p[2];
  webrtc::WebRtcSessionDescriptionFactory::CreateAnswer(*(_QWORD *)(a1 + 24), *a3, (webrtc::_anonymous_namespace_ **)&__src);
  v158 = (void **)v170[1];
  if (!v170[1])
    goto LABEL_234;
  v159 = (void **)v170[2];
  v160 = v170[1];
  if (v170[2] != v170[1])
  {
    while (1)
    {
      if (*((char *)v159 - 9) < 0)
      {
        operator delete(*(v159 - 4));
        if ((*((char *)v159 - 33) & 0x80000000) == 0)
          goto LABEL_228;
LABEL_231:
        operator delete(*(v159 - 7));
        v159 -= 7;
        if (v159 == v158)
        {
LABEL_232:
          v160 = v170[1];
          break;
        }
      }
      else
      {
        if (*((char *)v159 - 33) < 0)
          goto LABEL_231;
LABEL_228:
        v159 -= 7;
        if (v159 == v158)
          goto LABEL_232;
      }
    }
  }
  v170[2] = v158;
  operator delete(v160);
LABEL_234:
  v161 = (char *)v169[0];
  if (v169[0])
  {
    v162 = (char *)v169[1];
    v163 = v169[0];
    if (v169[1] != v169[0])
    {
      do
        cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)(v162 - 136));
      while (v162 != v161);
      v163 = v169[0];
    }
    v169[1] = v161;
    operator delete(v163);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
  {
    v112 = (webrtc::_anonymous_namespace_ *)v166.__r_.__value_.__r.__words[0];
    goto LABEL_129;
  }
}

void webrtc::SdpOfferAnswerHandler::DoSetRemoteDescription(std::string::size_type a1, uint64_t *a2)
{
  _QWORD *v2;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  const std::string::value_type *v24;
  char v25;
  __int128 v26;
  int v27;
  const char *v28;
  char *v29;
  char *v30;
  const std::string::value_type *v31;
  char v32;
  __int128 v33;
  int Number;
  int v35;
  std::string::size_type v36;
  std::string *v37;
  _BYTE *v38;
  _BOOL4 v39;
  size_t v40;
  std::string *p_str;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  const std::string::value_type **v48;
  size_t v49;
  const std::string::value_type *v50;
  const std::string::value_type *v51;
  size_t v52;
  const std::string::value_type **v53;
  size_t v54;
  const std::string::value_type *v55;
  const std::string::value_type *v56;
  size_t v57;
  __int128 v58;
  std::string *p_dst;
  size_t size;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::string::size_type v76;
  std::string::size_type v77;
  int data;
  _QWORD **v79;
  _QWORD *v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  rtc::Thread **v94;
  rtc::Thread *v95;
  int v96;
  void **v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t **v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char **v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  unsigned __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  size_t v147;
  _QWORD *v148;
  size_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t FirstAudioContent;
  uint64_t v174;
  uint64_t *v175;
  uint64_t FirstAudioContentDescription;
  uint64_t v177;
  uint64_t *v178;
  uint64_t FirstVideoContent;
  uint64_t v180;
  uint64_t *v181;
  uint64_t FirstVideoContentDescription;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int *v186;
  uint64_t *v187;
  void **p_p;
  void **v189;
  std::string::size_type v190;
  unint64_t v191;
  void *__p;
  __int128 v193;
  uint64_t v194;
  _DWORD v195[2];
  std::string v196;
  const char *v197;
  uint64_t v198;
  std::string __dst;
  std::string __str;
  _BYTE v201[15];
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*a2;
  if (*(_DWORD *)(*a2 + 64))
    return;
  if (*(_DWORD *)(*v2 + 232))
  {
    webrtc::SdpOfferAnswerHandler::GetSessionErrorMsg((webrtc::SdpOfferAnswerHandler *)&__str, *v2);
    webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SetError((uint64_t)v2, 10, (__int128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (*((_DWORD *)v2 + 16))
        return;
    }
    else if (*((_DWORD *)v2 + 16))
    {
      return;
    }
    v2 = (_QWORD *)*a2;
  }
  v5 = *((_DWORD *)v2 + 32);
  if (v5 == 3)
  {
    if (*((_BYTE *)v2 + 132))
    {
      webrtc::SdpOfferAnswerHandler::Rollback((uint64_t)&__p, *v2, 3);
      *((_DWORD *)v2 + 16) = (_DWORD)__p;
      v11 = (void **)(v2 + 9);
      if (*((char *)v2 + 95) < 0)
        operator delete(*v11);
      *(_OWORD *)v11 = v193;
      v2[11] = v194;
      *((_DWORD *)v2 + 24) = v195[0];
      *(_DWORD *)((char *)v2 + 99) = *(_DWORD *)((char *)v195 + 3);
      return;
    }
    v89 = (char *)operator new(0x28uLL);
    if (v89 > "Rollback not supported in Plan B" || v89 + 32 <= "Rollback not supported in Plan B")
    {
      strcpy(v89, "Rollback not supported in Plan B");
      __p = v89;
      v193 = xmmword_208F04EE0;
      webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SetError((uint64_t)v2, 1, (__int128 *)&__p);
      if (SHIBYTE(v193) < 0)
        operator delete(__p);
      return;
    }
    goto LABEL_317;
  }
  if (!v5)
  {
    if (*((_BYTE *)v2 + 132))
    {
      if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v2 + 8) + 40))(*(_QWORD *)(*v2 + 8)) + 272))
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v2 + 16))(*v2) == 1)
        {
          webrtc::SdpOfferAnswerHandler::Rollback((uint64_t)&__str, *v2, *((_DWORD *)v2 + 32));
          if ((v201[7] & 0x80000000) != 0)
            operator delete((void *)__str.__r_.__value_.__l.__size_);
        }
      }
    }
  }
  v6 = (_QWORD *)*a2;
  if ((*(_DWORD *)(*a2 + 128) | 2) == 2)
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*v6 + 8) + 48))(*(_QWORD *)(*v6 + 8), v6[1]);
    v6 = (_QWORD *)*a2;
  }
  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v6[1] + 24))(v6[1]);
  __p = 0;
  v193 = 0uLL;
  if ((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1);
    v189 = (void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v187 = a2;
    if ((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1))
      goto LABEL_20;
LABEL_27:
    p_p = &__p;
    v10 = *v2;
    v9 = v2[1];
    v190 = a1;
    if (v9 == *v2)
      goto LABEL_128;
LABEL_28:
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v186 = (unsigned int *)(a1 + 144);
    while (1)
    {
      v15 = v10 + v13;
      if (*(char *)(v10 + v13 + 23) < 0)
        break;
      if (!*(_BYTE *)(v10 + v13 + 23))
        goto LABEL_35;
LABEL_30:
      ++v14;
      v13 += 40;
      v12 += 112;
      if (v14 >= 0xCCCCCCCCCCCCCCCDLL * ((v9 - v10) >> 3))
        goto LABEL_128;
    }
    if (*(_QWORD *)(v15 + 8))
      goto LABEL_30;
LABEL_35:
    memset(&__dst, 0, sizeof(__dst));
    v197 = 0;
    v198 = 0;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8)))
    {
      v23 = (char *)*v189;
      if (v14 < 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)v189[1] - (_BYTE *)*v189) >> 3))
      {
        v24 = &v23[v13];
        if (&v23[v13] != (char *)&__dst)
        {
          v25 = v24[23];
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            v48 = (const std::string::value_type **)&v23[v13];
            v50 = *v48;
            v49 = (size_t)v48[1];
            if (v25 >= 0)
              v51 = v24;
            else
              v51 = v50;
            if (v25 >= 0)
              v52 = *((unsigned __int8 *)v24 + 23);
            else
              v52 = v49;
            std::string::__assign_no_alias<false>(&__dst, v51, v52);
          }
          else if (v24[23] < 0)
          {
            std::string::__assign_no_alias<true>(&__dst, *(char **)&v23[v13], *(_QWORD *)&v23[v13 + 8]);
          }
          else
          {
            v26 = *(_OWORD *)v24;
            __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v24 + 2);
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v26;
          }
        }
        v197 = "from the matching local media section";
        v198 = 37;
        if ((std::string *)v15 == &__dst)
          goto LABEL_109;
LABEL_98:
        if (*(char *)(v15 + 23) < 0)
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dst = &__dst;
          else
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            size = __dst.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>((std::string *)v15, (const std::string::value_type *)p_dst, size);
        }
        else if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)v15, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else
        {
          v58 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          *(_QWORD *)(v15 + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
          *(_OWORD *)v15 = v58;
        }
        goto LABEL_109;
      }
      v30 = (char *)*p_p;
      if (v14 < 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3))
      {
        v31 = &v30[v13];
        if (&v30[v13] != (char *)&__dst)
        {
          v32 = v31[23];
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            v53 = (const std::string::value_type **)&v30[v13];
            v55 = *v53;
            v54 = (size_t)v53[1];
            if (v32 >= 0)
              v56 = v31;
            else
              v56 = v55;
            if (v32 >= 0)
              v57 = *((unsigned __int8 *)v31 + 23);
            else
              v57 = v54;
            std::string::__assign_no_alias<false>(&__dst, v56, v57);
          }
          else if (v31[23] < 0)
          {
            std::string::__assign_no_alias<true>(&__dst, *(char **)&v30[v13], *(_QWORD *)&v30[v13 + 8]);
          }
          else
          {
            v33 = *(_OWORD *)v31;
            __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 2);
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v33;
          }
        }
        v197 = "from the matching previous remote media section";
        v198 = 47;
        if ((std::string *)v15 != &__dst)
          goto LABEL_98;
LABEL_109:
        v61 = v2[3];
        if (0x6DB6DB6DB6DB6DB7 * ((v2[4] - v61) >> 4) <= v14)
          goto LABEL_317;
        v62 = v61 + v12;
        if ((std::string *)(v61 + v12) != &__dst)
        {
          if ((*(char *)(v62 + 23) & 0x80000000) == 0)
          {
            if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)v62, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
                goto LABEL_124;
            }
            else
            {
              v63 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
              *(_QWORD *)(v62 + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
              *(_OWORD *)v62 = v63;
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
                goto LABEL_124;
            }
LABEL_123:
            v191 = v191 & 0xFFFFFFFF00000000 | 0x7E19;
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v64, v65, v66, v67, v68, v69, v70, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
LABEL_124:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            v10 = *v2;
            v9 = v2[1];
            goto LABEL_30;
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &__dst;
          else
            v71 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v72 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            v72 = __dst.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>((std::string *)v62, (const std::string::value_type *)v71, v72);
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          goto LABEL_123;
        goto LABEL_124;
      }
      Number = rtc::UniqueNumberGenerator<unsigned int>::GenerateNumber(v186, v16, v17, v18, v19, v20, v21, v22);
      v35 = snprintf((char *)&__str, 0x20uLL, "%u", Number);
      if (v35 < 0)
LABEL_323:
        abort();
      v36 = v35;
      if (v35 > 0x16)
      {
        v45 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v35 | 7) != 0x17)
          v45 = v35 | 7;
        v46 = v45 + 1;
        v37 = (std::string *)operator new(v45 + 1);
        v47 = v46 | 0x8000000000000000;
        a1 = v190;
        v196.__r_.__value_.__l.__size_ = v36;
        v196.__r_.__value_.__r.__words[2] = v47;
        v196.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
        v38 = (char *)v37 + v36;
        v39 = (std::string *)((char *)v37 + v36) > &__str;
        if (v37 <= &__str)
          goto LABEL_72;
      }
      else
      {
        *((_BYTE *)&v196.__r_.__value_.__s + 23) = v35;
        v37 = &v196;
        v38 = (char *)&v196 + v36;
        v39 = (std::string *)((char *)&v196 + v36) > &__str;
        if (&v196 > &__str)
          goto LABEL_73;
LABEL_72:
        if (v39)
          goto LABEL_317;
      }
LABEL_73:
      if ((_DWORD)v36)
        memcpy(v37, &__str, v36);
      *v38 = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      __dst = v196;
      v197 = "generated just now";
      v198 = 18;
      if ((std::string *)v15 != &__dst)
        goto LABEL_98;
      goto LABEL_109;
    }
    v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + v13 + 32) + 16))(*(_QWORD *)(v10 + v13 + 32));
    v28 = "audio";
    a1 = 13;
    v29 = "not supported";
    switch(v27)
    {
      case 0:
        goto LABEL_54;
      case 1:
        v28 = "video";
        goto LABEL_54;
      case 2:
        v28 = "data";
LABEL_54:
        v40 = strlen(v28);
        if (v40 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_323;
        a1 = v40;
        if (v40 > 0x16)
        {
          v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v40 | 7) != 0x17)
            v43 = v40 | 7;
          v44 = v43 + 1;
          p_str = (std::string *)operator new(v43 + 1);
          __str.__r_.__value_.__l.__size_ = a1;
          __str.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
          v42 = (char *)p_str + a1;
          if (p_str > (std::string *)v28)
            goto LABEL_63;
        }
        else
        {
          v29 = (char *)v28;
LABEL_57:
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = a1;
          p_str = &__str;
          v28 = v29;
          v42 = (char *)&__str + a1;
          if (&__str > (std::string *)v29)
            goto LABEL_63;
        }
        if (v42 > v28)
          goto LABEL_317;
LABEL_63:
        if (a1)
          memmove(p_str, v28, a1);
        *v42 = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        __dst = __str;
        a1 = v190;
        v197 = "to match pre-existing behavior";
        v198 = 30;
        if ((std::string *)v15 != &__dst)
          goto LABEL_98;
        goto LABEL_109;
      case 3:
        goto LABEL_57;
      default:
        a1 = 0;
        v29 = &byte_208EB9246;
        goto LABEL_57;
    }
  }
  v189 = &__p;
  v187 = a2;
  if (!(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1))
    goto LABEL_27;
LABEL_20:
  v8 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1);
  p_p = (void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v10 = *v2;
  v9 = v2[1];
  v190 = a1;
  if (v9 != *v2)
    goto LABEL_28;
LABEL_128:
  v73 = *v187;
  v74 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v187 + 8) + 24))(*(_QWORD *)(*v187 + 8));
  v75 = v73 + 112;
  std::__tree<rtc::SocketAddress>::destroy(v73 + 104, *(char **)(v73 + 112));
  v76 = __str.__r_.__value_.__l.__size_;
  *(_QWORD *)(v73 + 104) = __str.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v73 + 112) = v76;
  v77 = __str.__r_.__value_.__r.__words[2];
  *(_QWORD *)(v73 + 120) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  if (v77)
  {
    *(_QWORD *)(v76 + 16) = v75;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    v76 = 0;
  }
  else
  {
    *(_QWORD *)(v73 + 104) = v75;
  }
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)&__str, (char *)v76);
  webrtc::SdpOfferAnswerHandler::ValidateSessionDescription((uint64_t)&__str, *(_QWORD *)v73, *(_QWORD *)(v73 + 8), 1uLL, v73 + 104);
  data = (int)__str.__r_.__value_.__l.__data_;
  *(_DWORD *)(v73 + 64) = __str.__r_.__value_.__l.__data_;
  if (*(char *)(v73 + 95) < 0)
  {
    operator delete(*(void **)(v73 + 72));
    data = *(_DWORD *)(v73 + 64);
  }
  *(_OWORD *)(v73 + 72) = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
  *(_QWORD *)(v73 + 88) = *(_QWORD *)v201;
  *(_DWORD *)(v73 + 96) = *(_DWORD *)&v201[8];
  *(_DWORD *)(v73 + 99) = *(_DWORD *)&v201[11];
  if (data)
    return;
  v2 = (_QWORD *)*v187;
  *v187 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 272))(*(_QWORD *)(a1 + 8));
  v79 = (_QWORD **)*v2;
  v80 = (_QWORD *)v2[1];
  v2[1] = 0;
  v81 = *((_DWORD *)v2 + 32);
  v82 = v79[7];
  if (v81 == 2)
  {
    v119 = v82 == 0;
    v83 = 7;
    if (v119)
      v83 = 6;
    v84 = v79[v83];
    v79[v83] = 0;
    v85 = v2[2];
    v2[2] = v84;
    if (v85)
      (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
    v86 = v79[6];
    v79[6] = v80;
    if (v86)
      (*(void (**)(_QWORD *))(*v86 + 8))(v86);
    v87 = v79[7];
    v79[7] = 0;
    if (v87)
      (*(void (**)(_QWORD *))(*v87 + 8))(v87);
    v88 = v79[4];
    v79[4] = v79[5];
    v79[5] = 0;
    if (!v88)
      goto LABEL_153;
LABEL_152:
    (*(void (**)(_QWORD *))(*v88 + 8))(v88);
    goto LABEL_153;
  }
  v79[7] = 0;
  v90 = v2[2];
  v2[2] = v82;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v88 = v79[7];
  v79[7] = v80;
  if (v88)
    goto LABEL_152;
LABEL_153:
  v91 = ((uint64_t (*)(_QWORD **))(*v79)[4])(v79);
  v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 32))(v91);
  v93 = ((uint64_t (*)(_QWORD **))(*v79)[3])(v79);
  v94 = (rtc::Thread **)(*(uint64_t (**)(_QWORD *))(*v79[1] + 104))(v79[1]);
  if (v93)
    v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 32))(v93);
  if (rtc::Thread::IsCurrent(v94[44]))
  {
    webrtc::JsepTransportController::ApplyDescription_n((uint64_t)v94, 0, v81, v93, v92, (uint64_t)&__str);
  }
  else
  {
    v95 = v94[44];
    __p = v94;
    LODWORD(v193) = v81;
    *((_QWORD *)&v193 + 1) = v93;
    v194 = v92;
    LODWORD(__str.__r_.__value_.__l.__data_) = 0;
    v201[14] = 0;
    *(_QWORD *)v201 = 0;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    *(_QWORD *)&v201[5] = 0;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
    (*(void (**)(rtc::Thread *, std::string *, __n128 (*)(uint64_t *), std::string *))(*(_QWORD *)v95 + 96))(v95, &__dst, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::JsepTransportController::SetRemoteDescription(webrtc::SdpType,cricket::SessionDescription const*,cricket::SessionDescription const*)::$_0,webrtc::RTCError,void>(webrtc::JsepTransportController::SetRemoteDescription(webrtc::SdpType,cricket::SessionDescription const*,cricket::SessionDescription const*)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v196);
  }
  v96 = (int)__str.__r_.__value_.__l.__data_;
  *((_DWORD *)v2 + 16) = __str.__r_.__value_.__l.__data_;
  v97 = (void **)(v2 + 9);
  if (*((char *)v2 + 95) < 0)
  {
    operator delete((void *)v2[9]);
    v96 = *((_DWORD *)v2 + 16);
  }
  *(_OWORD *)v97 = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
  v2[11] = *(_QWORD *)v201;
  *((_DWORD *)v2 + 24) = *(_DWORD *)&v201[8];
  v98 = v2 + 12;
  *(_DWORD *)((char *)v2 + 99) = *(_DWORD *)&v201[11];
  if (v96)
  {
    webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SetAsSessionError((webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation *)v2);
    if (*((_DWORD *)v2 + 16))
      goto LABEL_175;
  }
  v101 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 32))(*v2);
  v102 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 32))(v101);
  if (*((_BYTE *)v2 + 132))
  {
    v103 = *v2;
    v104 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2);
    v105 = v2[2];
    if (*((_DWORD *)v2 + 32) != 2 && !v105)
      v105 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 48))(*v2);
    webrtc::SdpOfferAnswerHandler::UpdateTransceiversAndDataChannels((uint64_t)&__str, v103, 1, v101, v104, v105, (uint64_t)(v2 + 13));
    *((_DWORD *)v2 + 16) = __str.__r_.__value_.__l.__data_;
    if (*((char *)v2 + 95) < 0)
      operator delete(*v97);
    *(_OWORD *)v97 = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
    v2[11] = *(_QWORD *)v201;
    *v98 = *(_DWORD *)&v201[8];
    *(_DWORD *)((char *)v2 + 99) = *(_DWORD *)&v201[11];
  }
  else
  {
    v106 = (char **)v102;
    if (!*((_DWORD *)v2 + 32))
    {
      webrtc::SdpOfferAnswerHandler::CreateChannels((webrtc::SdpOfferAnswerHandler *)&__str, (const cricket::SessionDescription *)*v2, v102);
      *((_DWORD *)v2 + 16) = __str.__r_.__value_.__l.__data_;
      if (*((char *)v2 + 95) < 0)
        operator delete(*v97);
      *(_OWORD *)v97 = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
      v2[11] = *(_QWORD *)v201;
      *v98 = *(_DWORD *)&v201[8];
      *(_DWORD *)((char *)v2 + 99) = *(_DWORD *)&v201[11];
    }
    webrtc::SdpOfferAnswerHandler::RemoveUnusedChannels(*v2, v106);
  }
  if (*((_DWORD *)v2 + 16))
    goto LABEL_175;
  v107 = *v2;
  v108 = *((_DWORD *)v2 + 32);
  v109 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 32))(*v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v109 + 32))(v109);
  webrtc::SdpOfferAnswerHandler::UpdateSessionState((uint64_t)&__str, v107, v108, 1, (uint64_t)(v2 + 13));
  v110 = (int)__str.__r_.__value_.__l.__data_;
  *((_DWORD *)v2 + 16) = __str.__r_.__value_.__l.__data_;
  if (*((char *)v2 + 95) < 0)
  {
    operator delete((void *)v2[9]);
    v110 = *((_DWORD *)v2 + 16);
  }
  *(_OWORD *)v97 = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
  v2[11] = *(_QWORD *)v201;
  *v98 = *(_DWORD *)&v201[8];
  *(_DWORD *)((char *)v2 + 99) = *(_DWORD *)&v201[11];
  if (v110)
  {
    webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SetAsSessionError((webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation *)v2);
    if (*((_DWORD *)v2 + 16))
      goto LABEL_175;
  }
  if (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2)
    || (webrtc::SdpOfferAnswerHandler::UseCandidatesInRemoteDescription((webrtc::SdpOfferAnswerHandler *)*v2) & 1) != 0)
  {
    goto LABEL_186;
  }
  v111 = (char *)operator new(0x30uLL);
  if (v111 <= "Description contains invalid candidates." && v111 + 40 > "Description contains invalid candidates.")
  {
LABEL_317:
    __break(1u);
    goto LABEL_318;
  }
  strcpy(v111, "Description contains invalid candidates.");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_208F086B0;
  webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SetError((uint64_t)v2, 3, (__int128 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_186:
  if (*((_DWORD *)v2 + 16))
    goto LABEL_175;
  v112 = v2[2];
  if (*((_DWORD *)v2 + 32) != 2 && !v112)
    v112 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 48))(*v2);
  if (!v112)
    goto LABEL_298;
  v113 = v2[2];
  if (*((_DWORD *)v2 + 32) != 2 && !v113)
    v113 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 48))(*v2);
  v114 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v113 + 32))(v113);
  v116 = *v114;
  v115 = v114[1];
  if (*v114 == v115)
    goto LABEL_298;
  v117 = a1 + 176;
  do
  {
    v118 = v2[2];
    v119 = *((_DWORD *)v2 + 32) != 2 && v118 == 0;
    if (v119)
      v118 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 48))(*v2);
    v120 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1);
    if (!v118)
      goto LABEL_223;
    v121 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 32))(v120);
    v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 32))(v118);
    v123 = *v121;
    v124 = v121[1];
    if (*v121 == v124)
      goto LABEL_223;
    v125 = v122;
    v126 = *(_BYTE *)(v116 + 23);
    if (v126 >= 0)
      v127 = *(unsigned __int8 *)(v116 + 23);
    else
      v127 = *(_QWORD *)(v116 + 8);
    if (v126 >= 0)
      v128 = (unsigned __int8 *)v116;
    else
      v128 = *(unsigned __int8 **)v116;
    while (1)
    {
      v129 = *(unsigned __int8 *)(v123 + 23);
      if ((v129 & 0x80u) == 0)
        v130 = *(unsigned __int8 *)(v123 + 23);
      else
        v130 = *(_QWORD *)(v123 + 8);
      if (v130 != v127)
        goto LABEL_211;
      if ((v129 & 0x80) == 0)
        break;
      if (!memcmp(*(const void **)v123, v128, *(_QWORD *)(v123 + 8)))
        goto LABEL_222;
LABEL_211:
      v123 += 40;
      if (v123 == v124)
        goto LABEL_223;
    }
    if (*(_BYTE *)(v123 + 23))
    {
      v131 = 0;
      while (*(unsigned __int8 *)(v123 + v131) == v128[v131])
      {
        if (v129 == ++v131)
        {
          if (!v123)
            goto LABEL_223;
          goto LABEL_222;
        }
      }
      goto LABEL_211;
    }
LABEL_222:
    if (!*(_BYTE *)(v123 + 28))
    {
      v135 = v121[3];
      v136 = v121[4];
      while (v135 != v136)
      {
        v137 = *(unsigned __int8 *)(v135 + 23);
        if ((v137 & 0x80u) == 0)
          v138 = *(unsigned __int8 *)(v135 + 23);
        else
          v138 = *(_QWORD *)(v135 + 8);
        if (v138 == v127)
        {
          if ((v137 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v135, v128, *(_QWORD *)(v135 + 8)))
              goto LABEL_249;
          }
          else
          {
            if (!*(_BYTE *)(v135 + 23))
              goto LABEL_249;
            v139 = 0;
            while (*(unsigned __int8 *)(v135 + v139) == v128[v139])
            {
              if (v137 == ++v139)
                goto LABEL_249;
            }
          }
        }
        v135 += 112;
      }
      v135 = 0;
LABEL_249:
      if (v135)
        a1 = v135 + 24;
      else
        a1 = 0;
      v141 = *(_QWORD *)(v125 + 24);
      v140 = *(_QWORD *)(v125 + 32);
      while (v141 != v140)
      {
        v142 = *(unsigned __int8 *)(v141 + 23);
        if ((v142 & 0x80u) == 0)
          v143 = *(unsigned __int8 *)(v141 + 23);
        else
          v143 = *(_QWORD *)(v141 + 8);
        if (v143 == v127)
        {
          if ((v142 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v141, v128, *(_QWORD *)(v141 + 8)))
              goto LABEL_265;
          }
          else
          {
            if (!*(_BYTE *)(v141 + 23))
            {
LABEL_265:
              v145 = v141 + 24;
              if (!v141)
                v145 = 0;
              if (!v135 || !v141)
                break;
              v146 = (_QWORD *)(v145 + 24);
              if (*(char *)(v145 + 47) < 0)
              {
                v147 = *(_QWORD *)(v145 + 32);
                if ((v147 & 0x8000000000000000) != 0)
                  goto LABEL_317;
                v146 = (_QWORD *)*v146;
                if (v147)
                {
                  if (!v146)
                    goto LABEL_317;
                }
              }
              else
              {
                v147 = *(unsigned __int8 *)(v145 + 47);
              }
              v148 = (_QWORD *)(v145 + 48);
              if (*(char *)(v145 + 71) < 0)
              {
                v149 = *(_QWORD *)(v145 + 56);
                if ((v149 & 0x8000000000000000) != 0)
                  goto LABEL_317;
                v148 = (_QWORD *)*v148;
                if (v149)
                {
                  if (!v148)
                    goto LABEL_317;
                }
              }
              else
              {
                v149 = *(unsigned __int8 *)(v145 + 71);
              }
              v150 = (_QWORD *)(a1 + 24);
              if (*(char *)(a1 + 47) < 0)
              {
                v151 = *(_QWORD *)(a1 + 32);
                if (v151 < 0)
                  goto LABEL_317;
                v150 = (_QWORD *)*v150;
                if (v151)
                {
                  if (!v150)
                    goto LABEL_317;
                }
              }
              else
              {
                v151 = *(unsigned __int8 *)(a1 + 47);
              }
              v152 = (_QWORD *)(a1 + 48);
              if (*(char *)(a1 + 71) < 0)
              {
                v153 = *(_QWORD *)(a1 + 56);
                if (v153 < 0)
                  goto LABEL_317;
                v152 = (_QWORD *)*v152;
                if (v153)
                {
                  if (!v152)
                    goto LABEL_317;
                }
              }
              else
              {
                v153 = *(unsigned __int8 *)(a1 + 71);
              }
              if (v147 == v151)
              {
                v154 = memcmp(v146, v150, v147);
                if (v149 == v153 && !v154 && !memcmp(v148, v152, v149))
                  break;
              }
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
              {
                a1 = v190;
                if (*((_DWORD *)v2 + 32))
                  goto LABEL_232;
              }
              else
              {
                rtc::webrtc_logging_impl::Log("\r\t\n\t", v155, v100, v156, v157, v158, v159, v160, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
                a1 = v190;
                if (*((_DWORD *)v2 + 32))
                  goto LABEL_232;
              }
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v117, (const void **)v116, v116);
              goto LABEL_232;
            }
            v144 = 0;
            while (*(unsigned __int8 *)(v141 + v144) == v128[v144])
            {
              if (v142 == ++v144)
                goto LABEL_265;
            }
          }
        }
        v141 += 112;
      }
    }
LABEL_223:
    v132 = v2[2];
    if (*((_DWORD *)v2 + 32) != 2 && v132 == 0)
      v132 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 48))(*v2);
    a1 = v190;
    v134 = *(_QWORD *)(v190 + 56);
    if (!v134)
      v134 = *(_QWORD *)(v190 + 48);
    webrtc::WebRtcSessionDescriptionFactory::CopyCandidatesFromSessionDescription(v132, (_BYTE *)v116, v134);
LABEL_232:
    v116 += 40;
  }
  while (v116 != v115);
LABEL_298:
  v99 = *v2;
  if (*(_DWORD *)(*v2 + 232))
  {
    webrtc::SdpOfferAnswerHandler::GetSessionErrorMsg((webrtc::SdpOfferAnswerHandler *)&__str, v99);
    webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SetError((uint64_t)v2, 10, (__int128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (!*((_DWORD *)v2 + 16))
  {
    v161 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v161 + 56))(v161))
    {
      v162 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1);
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v162 + 88))(v162))
      {
        if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8)))
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), 1);
      }
    }
    webrtc::SdpOfferAnswerHandler::AllocateSctpSids((webrtc::SdpOfferAnswerHandler *)a1);
    if (*((_BYTE *)v2 + 132))
      webrtc::SdpOfferAnswerHandler::ApplyRemoteDescriptionUpdateTransceiverState(a1, *((_DWORD *)v2 + 32));
    v163 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1);
    *(_BYTE *)(a1 + 208) = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 32))(v163) + 72) != 0;
    if (*((_BYTE *)v2 + 132))
    {
      if (*((_DWORD *)v2 + 32) != 2)
        goto LABEL_310;
LABEL_319:
      if (webrtc::SdpOfferAnswerHandler::LocalIceCredentialsToReplace::SatisfiesIceRestart(*(webrtc::SdpOfferAnswerHandler::LocalIceCredentialsToReplace **)(a1 + 200), *(const webrtc::SessionDescriptionInterface **)(a1 + 32)))
      {
        v183 = *(_QWORD **)(a1 + 200);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v183, v183[1]);
        *v183 = v183 + 1;
        v183[2] = 0;
        v183[1] = 0;
      }
      webrtc::SdpOfferAnswerHandler::RemoveStoppedTransceivers((webrtc::SdpOfferAnswerHandler *)a1);
      webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SignalCompletion((uint64_t)v2, v184, v185);
      if (*((_DWORD *)v2 + 32) != 2)
        goto LABEL_312;
LABEL_311:
      v166 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
      __str.__r_.__value_.__r.__words[0] = a1;
      (*(void (**)(uint64_t, std::string *, _QWORD *(*)(uint64_t), void **))(*(_QWORD *)v166 + 96))(v166, &__str, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::SdpOfferAnswerHandler::SetRemoteDescriptionPostProcess(BOOL)::$_0>, &__p);
      goto LABEL_312;
    }
LABEL_318:
    v171 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1);
    v172 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v171 + 32))(v171);
    FirstAudioContent = cricket::GetFirstAudioContent(v172);
    v174 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1);
    v175 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
    FirstAudioContentDescription = cricket::GetFirstAudioContentDescription(v175);
    v177 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1);
    v178 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v177 + 32))(v177);
    FirstVideoContent = cricket::GetFirstVideoContent(v178);
    v180 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1);
    v181 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v180 + 32))(v180);
    FirstVideoContentDescription = cricket::GetFirstVideoContentDescription(v181);
    webrtc::SdpOfferAnswerHandler::PlanBUpdateSendersAndReceivers(a1, FirstAudioContent, FirstAudioContentDescription, FirstVideoContent, FirstVideoContentDescription);
    if (*((_DWORD *)v2 + 32) == 2)
      goto LABEL_319;
LABEL_310:
    webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::SignalCompletion((uint64_t)v2, v164, v165);
    if (*((_DWORD *)v2 + 32) == 2)
      goto LABEL_311;
LABEL_312:
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), 64);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8)))
    {
      v167 = *(unsigned __int8 *)(a1 + 209);
      webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded((webrtc::SdpOfferAnswerHandler *)a1);
      v168 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1 + 16))(a1);
      if (v167)
      {
        if (!v168)
        {
          if (*(_BYTE *)(a1 + 209))
          {
            v169 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v169 + 48))(v169);
            ++*(_DWORD *)(a1 + 212);
            v170 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v170 + 56))(v170, *(unsigned int *)(a1 + 212));
          }
        }
      }
    }
  }
LABEL_175:
  webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation::~RemoteDescriptionOperation((webrtc::SdpOfferAnswerHandler::RemoteDescriptionOperation *)v2, v99, v100);
  MEMORY[0x20BD0ADEC]();
}

void webrtc::StreamCollection::AddStream(_QWORD *a1, uint64_t *a2)
{
  unint64_t i;
  unsigned __int8 v5;
  const void *p_s2;
  size_t v7;
  unsigned __int8 v8;
  size_t v9;
  void **v10;
  size_t v11;
  BOOL v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void *__s2;
  size_t v43;
  unsigned __int8 v44;
  void *__p[2];
  unsigned __int8 v46;

  for (i = a1[1]; i != a1[2]; i += 8)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)i + 32))(__p);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 32))(&__s2);
    v5 = v44;
    if ((char)v44 < 0)
    {
      v7 = v43;
      if ((v43 & 0x8000000000000000) != 0)
        goto LABEL_56;
      p_s2 = __s2;
      if (v43)
      {
        if (!__s2)
          goto LABEL_56;
      }
    }
    else
    {
      p_s2 = &__s2;
      v7 = v44;
    }
    v8 = v46;
    if ((v46 & 0x80u) == 0)
      v9 = v46;
    else
      v9 = (size_t)__p[1];
    if ((v46 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if (v7 >= v9)
      v11 = v9;
    else
      v11 = v7;
    v12 = memcmp(v10, p_s2, v11) == 0;
    v13 = v7 == v9 && v12;
    if ((v5 & 0x80) != 0)
    {
      operator delete(__s2);
      if ((v46 & 0x80) != 0)
      {
LABEL_24:
        operator delete(__p[0]);
        if (v13)
          return;
        continue;
      }
    }
    else if ((v8 & 0x80) != 0)
    {
      goto LABEL_24;
    }
    if (v13)
      return;
  }
  v14 = a1[3];
  if (i >= v14)
  {
    v17 = (_QWORD *)a1[1];
    v18 = (uint64_t)(i - (_QWORD)v17) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      goto LABEL_57;
    v20 = v14 - (_QWORD)v17;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    v29 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8;
    v21 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v29)
      v21 = v19;
    if (!v21)
    {
LABEL_56:
      __break(1u);
LABEL_57:
      abort();
    }
    if (v21 >> 61)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v22 = 8 * v21;
    v23 = (char *)operator new(8 * v21);
    v24 = &v23[v22];
    v25 = &v23[8 * v18];
    v26 = *a2;
    *a2 = 0;
    *(_QWORD *)v25 = v26;
    v16 = v25 + 8;
    if ((_QWORD *)i != v17)
    {
      v27 = i - (_QWORD)v17 - 8;
      if (v27 < 0x78)
      {
        v28 = (_QWORD *)i;
        goto LABEL_47;
      }
      v29 = i - (v27 & 0xFFFFFFFFFFFFFFF8) - 8 >= (unint64_t)v25
         || (unint64_t)&v23[i - (_QWORD)v17 - (v27 & 0xFFFFFFFFFFFFFFF8) - 8] >= i;
      if (!v29)
      {
        v28 = (_QWORD *)i;
        do
        {
LABEL_47:
          v37 = *--v28;
          *v28 = 0;
          *((_QWORD *)v25 - 1) = v37;
          v25 -= 8;
        }
        while (v28 != v17);
        goto LABEL_48;
      }
      v30 = (v27 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = (_QWORD *)(i - v31);
      v25 -= v31;
      v32 = &v23[8 * v18 - 16];
      v33 = (__int128 *)(i - 16);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *(v33 - 1);
        v35 = *v33;
        *(v33 - 1) = 0uLL;
        *v33 = 0uLL;
        *((_OWORD *)v32 - 1) = v36;
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_47;
    }
LABEL_48:
    v38 = (char *)a1[1];
    v39 = (char *)a1[2];
    a1[1] = v25;
    a1[2] = v16;
    a1[3] = v24;
    while (v39 != v38)
    {
      v41 = *((_QWORD *)v39 - 1);
      v39 -= 8;
      v40 = v41;
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
    if (v38)
      operator delete(v38);
    goto LABEL_54;
  }
  if (!i)
    goto LABEL_56;
  v15 = *a2;
  *a2 = 0;
  *(_QWORD *)i = v15;
  v16 = (_QWORD *)(i + 8);
LABEL_54:
  a1[2] = v16;
}

void webrtc::SdpOfferAnswerHandler::RemoveRemoteStreamsIfEmpty(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *i;
  _QWORD *v8;
  char *v9;
  _BOOL4 v10;
  char *v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  void (***v20)(_QWORD);
  void *__p;
  char *v22;
  void *v23;
  char *v24;

  if (a2 != a3)
  {
    for (i = a2; i != a3; ++i)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*i + 40))(&v23);
      v9 = (char *)v23;
      if (v23 == v24)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)*i + 48))(&__p);
        v11 = (char *)__p;
        v12 = v22;
        v10 = __p == v22;
        if (__p)
        {
          v13 = __p;
          if (__p != v22)
          {
            do
            {
              v15 = *((_QWORD *)v12 - 1);
              v12 -= 8;
              v14 = v15;
              if (v15)
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            }
            while (v12 != v11);
            v13 = __p;
          }
          v22 = v11;
          operator delete(v13);
        }
        v9 = (char *)v23;
        if (!v23)
        {
LABEL_8:
          if (!v10)
            continue;
          goto LABEL_26;
        }
      }
      else
      {
        v10 = 0;
        if (!v23)
          goto LABEL_8;
      }
      v16 = v24;
      if (v24 == v9)
      {
        v24 = v9;
        operator delete(v9);
        if (!v10)
          continue;
      }
      else
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          v17 = v18;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
        while (v16 != v9);
        v24 = v9;
        operator delete(v23);
        if (!v10)
          continue;
      }
LABEL_26:
      webrtc::StreamCollection::RemoveStream(*(_QWORD *)(a1 + 80), *i);
      v19 = *(uint64_t **)(a4 + 8);
      if ((unint64_t)v19 >= *(_QWORD *)(a4 + 16))
      {
        v8 = std::vector<webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>> const&>(a4, (void (***)(_QWORD))*i);
      }
      else
      {
        if (!v19)
        {
          __break(1u);
          return;
        }
        v20 = (void (***)(_QWORD))*i;
        *v19 = *i;
        if (v20)
          (**v20)(v20);
        v8 = v19 + 1;
      }
      *(_QWORD *)(a4 + 8) = v8;
    }
  }
}

uint64_t webrtc::SdpOfferAnswerHandler::AddIceCandidateInternal(webrtc::SdpOfferAnswerHandler *this, const webrtc::IceCandidateInterface *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const webrtc::SessionDescriptionInterface *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  void *__p;
  char v52;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1)))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    return 1;
  }
  if ((*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)this + 32))(this))
  {
    if (a2)
    {
      v12 = (const webrtc::SessionDescriptionInterface *)(*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)this + 32))(this);
      if (v12)
      {
        webrtc::SdpOfferAnswerHandler::FindContentInfo((webrtc::SdpOfferAnswerHandler *)&v50, v12, a2);
        v13 = v50;
        if (v50 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
        if (v52 < 0)
          operator delete(__p);
        if (v13)
          return 4;
      }
      v28 = *((_QWORD *)this + 7);
      if (v28)
      {
        if (((*(uint64_t (**)(uint64_t, const webrtc::IceCandidateInterface *))(*(_QWORD *)v28 + 72))(v28, a2) & 1) != 0)goto LABEL_20;
      }
      else if (((*(uint64_t (**)(_QWORD, const webrtc::IceCandidateInterface *))(**((_QWORD **)this + 6)
                                                                                          + 72))(*((_QWORD *)this + 6), a2) & 1) != 0)
      {
LABEL_20:
        if (v12)
        {
          if (webrtc::SdpOfferAnswerHandler::UseCandidate(this, a2))
          {
            (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1), 256);
            return 0;
          }
          else
          {
            return 7;
          }
        }
        else
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v43, v44, v45, v46, v47, v48, v49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
          return 5;
        }
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v36, v37, v38, v39, v40, v41, v42, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      return 6;
    }
    else
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      return 3;
    }
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    return 2;
  }
}

char *webrtc::SdpOfferAnswerHandler::UseCandidate(webrtc::SdpOfferAnswerHandler *this, const webrtc::IceCandidateInterface *a2)
{
  _BYTE *v4;
  char v5;
  const webrtc::SessionDescriptionInterface *v6;
  int v7;
  char *v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  int v18;
  void *v19;
  char v20;
  int v21;
  void *v22;
  char v23;
  uint64_t v24;
  char v25;

  v4 = rtc::Thread::Current(this);
  v5 = v4[217];
  v4[217] = 0;
  v6 = (const webrtc::SessionDescriptionInterface *)(*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)this + 32))(this);
  webrtc::SdpOfferAnswerHandler::FindContentInfo((webrtc::SdpOfferAnswerHandler *)&v21, v6, a2);
  v7 = v21;
  if (v21)
    goto LABEL_9;
  v8 = (char *)(*(uint64_t (**)(const webrtc::IceCandidateInterface *))(*(_QWORD *)a2 + 32))(a2);
  result = cricket::VerifyCandidate(v8, (uint64_t)&v18);
  if (v18)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      cricket::Candidate::ToStringInternal((cricket::Candidate *)v8, 0, &__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_8:
    if (v20 < 0)
    {
      operator delete(v19);
      if ((v23 & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
LABEL_9:
    if ((v23 & 0x80000000) == 0)
    {
LABEL_11:
      result = (char *)(v7 == 0);
      v4[217] = v5;
      return result;
    }
LABEL_10:
    operator delete(v22);
    goto LABEL_11;
  }
  if (v25)
  {
    (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)this + 1) + 224))(*((_QWORD *)this + 1), v24, v8);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t webrtc::SdpOfferAnswerHandler::AddIceCandidate(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v48;
  uint64_t v49;
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v6 = a1[14];
  v7 = a1[48];
  if (v7 && (v8 = atomic_load((unsigned int *)(v7 + 4)), v8 != 1))
  {
    v9 = (_QWORD *)a1[48];
    if (!v9)
    {
      *(_QWORD *)&v48 = 0;
      *((_QWORD *)&v48 + 1) = a1[49];
      goto LABEL_21;
    }
  }
  else
  {
    v9 = (_QWORD *)operator new();
    *v9 = 1;
    v10 = (unsigned int *)v9 + 1;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = a1[48];
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 4);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        MEMORY[0x20BD0ADEC]();
    }
    a1[48] = v9;
  }
  v16 = (unsigned int *)v9 + 1;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  v18 = a1[49];
  *(_QWORD *)&v48 = v9;
  do
    v19 = __ldxr(v16);
  while (__stxr(v19 + 1, v16));
  *((_QWORD *)&v48 + 1) = v18;
  do
  {
    v20 = __ldaxr(v16);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v16));
  if (!v21)
    MEMORY[0x20BD0ADEC](v9, 0x1000C404A09149ALL);
LABEL_21:
  v22 = *a2;
  *a2 = 0;
  v49 = v22;
  v23 = v50;
  v24 = (_QWORD *)a3[3];
  if (v24)
  {
    if (v24 == a3)
    {
      v51 = v50;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v50);
      v25 = v6 + 8;
      if (!v6)
        goto LABEL_27;
    }
    else
    {
      v51 = (_QWORD *)a3[3];
      a3[3] = 0;
      v25 = v6 + 8;
      if (!v6)
        goto LABEL_27;
    }
  }
  else
  {
    v51 = 0;
    v25 = v6 + 8;
    if (!v6)
      goto LABEL_27;
  }
  do
    v26 = __ldxr((unsigned int *)v6);
  while (__stxr(v26 + 1, (unsigned int *)v6));
LABEL_27:
  v27 = operator new();
  v28 = v27;
  *(_DWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = v6;
  do
    v29 = __ldxr((unsigned int *)v27);
  while (__stxr(v29 + 1, (unsigned int *)v27));
  v30 = operator new(0x10uLL);
  *v30 = &off_24C0B81D0;
  v30[1] = v28;
  v53 = v30;
  v31 = operator new();
  if (v53)
  {
    if (v53 == v52)
    {
      v55 = v54;
      (*(void (**)(_QWORD *, _QWORD *))(v52[0] + 24))(v52, v54);
    }
    else
    {
      v55 = v53;
      v53 = 0;
    }
  }
  else
  {
    v55 = 0;
  }
  *(_QWORD *)v31 = &off_24C0C07F0;
  *(_OWORD *)(v31 + 8) = v48;
  v32 = v51;
  *(_QWORD *)(v31 + 24) = v49;
  if (!v32)
  {
    *(_QWORD *)(v31 + 56) = 0;
    v33 = v55;
    if (v55)
      goto LABEL_41;
    goto LABEL_44;
  }
  if (v32 == v50)
  {
    *(_QWORD *)(v31 + 56) = v31 + 32;
    (*(void (**)(_QWORD *))(v50[0] + 24))(v50);
    v33 = v55;
    if (v55)
      goto LABEL_41;
LABEL_44:
    *(_QWORD *)(v31 + 88) = 0;
    goto LABEL_50;
  }
  *(_QWORD *)(v31 + 56) = v32;
  v51 = 0;
  v33 = v55;
  if (!v55)
    goto LABEL_44;
LABEL_41:
  if (v33 != v54)
  {
    *(_QWORD *)(v31 + 88) = v33;
    goto LABEL_50;
  }
  *(_QWORD *)(v31 + 88) = v31 + 64;
  (*(void (**)(_QWORD *))(v54[0] + 24))(v54);
  v34 = v55;
  if (v55 == v54)
  {
    v35 = 4;
    v34 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_50;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_50:
  v36 = *(_QWORD *)(v6 + 16);
  v37 = *(_QWORD *)(v6 + 24);
  if (v37 == v36)
    v38 = 0;
  else
    v38 = ((v37 - v36) << 6) - 1;
  v39 = *(_QWORD *)(v6 + 48);
  if (v38 == v39 + *(_QWORD *)(v6 + 40))
  {
    std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity(v25);
    v39 = *(_QWORD *)(v6 + 48);
    v36 = *(_QWORD *)(v6 + 16);
    v37 = *(_QWORD *)(v6 + 24);
  }
  if (v37 == v36
    || (v40 = *(_QWORD *)(v6 + 40) + v39, (v41 = *(_QWORD *)(v36 + ((v40 >> 6) & 0x3FFFFFFFFFFFFF8))) == 0))
  {
    __break(1u);
  }
  *(_QWORD *)(v41 + 8 * (v40 & 0x1FF)) = v31;
  v42 = v39 + 1;
  *(_QWORD *)(v6 + 48) = v42;
  v43 = v53;
  if (v53 == v52)
  {
    v44 = 4;
    v43 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_62;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
  v42 = *(_QWORD *)(v6 + 48);
LABEL_62:
  if (v42 == 1)
  {
    v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + ((*(_QWORD *)(v6 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (*(_QWORD *)(v6 + 40) & 0x1FFLL));
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
  }
  if (v51 == v50)
  {
    v46 = 4;
    goto LABEL_68;
  }
  if (v51)
  {
    v46 = 5;
    v23 = v51;
LABEL_68:
    (*(void (**)(_QWORD *))(*v23 + 8 * v46))(v23);
  }
  return 0;
}

uint64_t webrtc::SdpOfferAnswerHandler::RemoveIceCandidates(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *__p;
  char v30;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8)))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
LABEL_22:
    rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
    return 0;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_22;
  }
  if (*a2 == a2[1])
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_22;
  }
  v12 = *(_QWORD *)(a1 + 56);
  if (!v12)
    v12 = *(_QWORD *)(a1 + 48);
  if ((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 80))(v12, a2) != 0x84BDA12F684BDA13
                                                                                         * ((a2[1] - *a2) >> 4)
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
  }
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
  webrtc::JsepTransportController::RemoveRemoteCandidates(v20, a2, (uint64_t)&v28);
  if (v28 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
  if (v30 < 0)
    operator delete(__p);
  return 1;
}

uint64_t webrtc::SdpOfferAnswerHandler::local_description(webrtc::SdpOfferAnswerHandler *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (!result)
    return *((_QWORD *)this + 4);
  return result;
}

uint64_t webrtc::SdpOfferAnswerHandler::remote_description(webrtc::SdpOfferAnswerHandler *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (!result)
    return *((_QWORD *)this + 6);
  return result;
}

uint64_t webrtc::SdpOfferAnswerHandler::current_local_description(webrtc::SdpOfferAnswerHandler *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t webrtc::SdpOfferAnswerHandler::current_remote_description(webrtc::SdpOfferAnswerHandler *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t webrtc::SdpOfferAnswerHandler::pending_local_description(webrtc::SdpOfferAnswerHandler *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t webrtc::SdpOfferAnswerHandler::pending_remote_description(webrtc::SdpOfferAnswerHandler *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t webrtc::SdpOfferAnswerHandler::signaling_state(webrtc::SdpOfferAnswerHandler *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t webrtc::SdpOfferAnswerHandler::AddStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[3];
  _QWORD *v74;
  _QWORD v75[3];
  _QWORD *v76;
  _QWORD v77[3];
  _QWORD *v78;
  uint64_t *v79;
  uint64_t *v80;
  char v81;
  void **v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8)))
    goto LABEL_84;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8)) & 1) != 0)
    return 0;
  result = 0;
  if (a2)
  {
    v9 = *(_QWORD *)(a1 + 72);
    if (v9)
    {
      (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(&v79, a2);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v9 + 48))(v9, &v79);
      v11 = v10;
      if (v81 < 0)
      {
        operator delete(v79);
        if (v11)
        {
LABEL_9:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(&v79, a2);
            rtc::webrtc_logging_impl::Log("\r\t\n\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc");
            if (v81 < 0)
              operator delete(v79);
          }
          return 0;
        }
      }
      else if (v10)
      {
        goto LABEL_9;
      }
      v19 = *(_QWORD **)(a1 + 72);
      v72 = a2;
      (**(void (***)(uint64_t))a2)(a2);
      webrtc::StreamCollection::AddStream(v19, &v72);
      if (v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
      v20 = (_QWORD *)operator new();
      v79 = (uint64_t *)&unk_24C0C0370;
      v80 = (uint64_t *)a1;
      v82 = (void **)&v79;
      v77[0] = &off_24C0C03B8;
      v77[1] = a1;
      v78 = v77;
      v75[0] = &off_24C0C0400;
      v75[1] = a1;
      v76 = v75;
      v73[0] = &off_24C0C0448;
      v73[1] = a1;
      v74 = v73;
      webrtc::MediaStreamObserver::MediaStreamObserver(v20, a2, (uint64_t)&v79, (uint64_t)v77, (uint64_t)v75, (uint64_t)v73);
      v21 = v74;
      if (v74 == v73)
      {
        v22 = 4;
        v21 = v73;
      }
      else
      {
        if (!v74)
          goto LABEL_20;
        v22 = 5;
      }
      (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_20:
      v23 = v76;
      if (v76 == v75)
      {
        v24 = 4;
        v23 = v75;
      }
      else
      {
        if (!v76)
          goto LABEL_25;
        v24 = 5;
      }
      (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_25:
      v25 = v78;
      if (v78 == v77)
      {
        v26 = 4;
        v25 = v77;
      }
      else
      {
        if (!v78)
          goto LABEL_30;
        v26 = 5;
      }
      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_30:
      v27 = v82;
      if (v82 == (void **)&v79)
      {
        v28 = 4;
        v27 = (void **)&v79;
      }
      else
      {
        if (!v82)
        {
LABEL_35:
          v30 = *(char **)(a1 + 96);
          v29 = *(_QWORD *)(a1 + 104);
          if ((unint64_t)v30 >= v29)
          {
            v32 = *(char **)(a1 + 88);
            v33 = (v30 - v32) >> 3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              abort();
            v35 = v29 - (_QWORD)v32;
            if (v35 >> 2 > v34)
              v34 = v35 >> 2;
            v36 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8;
            v37 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v36)
              v37 = v34;
            if (v37)
            {
              if (v37 >> 61)
                std::__throw_bad_array_new_length[abi:sn180100]();
              v38 = 8 * v37;
              v39 = (char *)operator new(8 * v37);
              v40 = &v39[v38];
              v41 = &v39[8 * v33];
              *(_QWORD *)v41 = v20;
              v31 = v41 + 8;
              if (v30 == v32)
              {
                *(_QWORD *)(a1 + 88) = v41;
                *(_QWORD *)(a1 + 96) = v31;
                *(_QWORD *)(a1 + 104) = v40;
              }
              else
              {
                v42 = v30 - v32 - 8;
                if (v42 < 0x78
                  || &v30[-(v42 & 0xFFFFFFFFFFFFFFF8) - 8] < v41
                  && &v39[v30 - v32 - (v42 & 0xFFFFFFFFFFFFFFF8) - 8] < v30)
                {
                  goto LABEL_89;
                }
                v43 = (v42 >> 3) + 1;
                v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
                v45 = &v30[-v44];
                v41 -= v44;
                v46 = &v39[8 * v33 - 16];
                v47 = v30 - 16;
                v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v50 = *((_OWORD *)v47 - 1);
                  v49 = *(_OWORD *)v47;
                  *((_OWORD *)v47 - 1) = 0uLL;
                  *(_OWORD *)v47 = 0uLL;
                  *((_OWORD *)v46 - 1) = v50;
                  *(_OWORD *)v46 = v49;
                  v46 -= 32;
                  v47 -= 32;
                  v48 -= 4;
                }
                while (v48);
                v30 = v45;
                if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_89:
                  do
                  {
                    v51 = *((_QWORD *)v30 - 1);
                    v30 -= 8;
                    *(_QWORD *)v30 = 0;
                    *((_QWORD *)v41 - 1) = v51;
                    v41 -= 8;
                  }
                  while (v30 != v32);
                }
                v30 = *(char **)(a1 + 88);
                v52 = *(char **)(a1 + 96);
                *(_QWORD *)(a1 + 88) = v41;
                *(_QWORD *)(a1 + 96) = v31;
                *(_QWORD *)(a1 + 104) = v40;
                while (v52 != v30)
                {
                  v54 = *((_QWORD *)v52 - 1);
                  v52 -= 8;
                  v53 = v54;
                  *(_QWORD *)v52 = 0;
                  if (v54)
                    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
                }
              }
              if (v30)
                operator delete(v30);
              goto LABEL_60;
            }
          }
          else if (v30)
          {
            *(_QWORD *)v30 = v20;
            v31 = v30 + 8;
LABEL_60:
            *(_QWORD *)(a1 + 96) = v31;
            (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(&v79, a2);
            v55 = v79;
            v56 = v80;
            if (v79 != v80)
            {
              do
              {
                v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
                v58 = *v55++;
                webrtc::RtpTransmissionManager::AddAudioTrack(v57, v58, a2);
              }
              while (v55 != v56);
              v55 = v79;
            }
            if (v55)
            {
              v59 = v80;
              v60 = v55;
              if (v80 != v55)
              {
                do
                {
                  v62 = *--v59;
                  v61 = v62;
                  if (v62)
                    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
                }
                while (v59 != v55);
                v60 = v79;
              }
              v80 = v55;
              operator delete(v60);
            }
            (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v79, a2);
            v63 = v79;
            v64 = v80;
            if (v79 != v80)
            {
              do
              {
                v65 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
                v66 = *v63++;
                webrtc::RtpTransmissionManager::AddVideoTrack(v65, v66, a2);
              }
              while (v63 != v64);
              v63 = v79;
            }
            if (v63)
            {
              v67 = v80;
              v68 = v63;
              if (v80 != v63)
              {
                do
                {
                  v70 = *--v67;
                  v69 = v70;
                  if (v70)
                    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
                }
                while (v67 != v63);
                v68 = v79;
              }
              v80 = v63;
              operator delete(v68);
            }
            v71 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8));
            webrtc::LegacyStatsCollector::AddStream(v71, a2);
            webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded((webrtc::SdpOfferAnswerHandler *)a1);
            return 1;
          }
          __break(1u);
LABEL_84:
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc", 2957, "!IsUnifiedPlan()", "\t", v4, v5, v6, v7, (uint64_t)"AddStream is not available with Unified Plan SdpSemantics. Please use AddTrack instead.");
        }
        v28 = 5;
      }
      (*((void (**)(void))*v27 + v28))();
      goto LABEL_35;
    }
  }
  return result;
}

void webrtc::SdpOfferAnswerHandler::RemoveStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  webrtc::RtpTransmissionManager *v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  webrtc::RtpTransmissionManager *v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  unsigned __int8 v27;
  const void *p_s2;
  uint64_t *v29;
  unsigned __int8 v30;
  uint64_t *v31;
  void **v32;
  size_t v33;
  int v34;
  BOOL v35;
  BOOL v36;
  uint64_t *v37;
  unsigned __int8 v38;
  const void *v39;
  size_t v40;
  unsigned __int8 v41;
  size_t v42;
  const void *p_p;
  size_t v44;
  int v45;
  BOOL v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  std::string *v53;
  uint64_t v54;
  void *__s2;
  size_t v56;
  unsigned __int8 v57;
  void *__p;
  uint64_t *v59;
  unsigned __int8 v60;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8)))
    goto LABEL_101;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8)) & 1) == 0)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(&__p, a2);
    v8 = (uint64_t *)__p;
    v9 = v59;
    if (__p != v59)
    {
      do
      {
        v10 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
        v11 = *v8++;
        webrtc::RtpTransmissionManager::RemoveAudioTrack(v10, v11);
      }
      while (v8 != v9);
      v8 = (uint64_t *)__p;
    }
    if (v8)
    {
      v12 = v59;
      v13 = v8;
      if (v59 != v8)
      {
        do
        {
          v15 = *--v12;
          v14 = v15;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        while (v12 != v8);
        v13 = __p;
      }
      v59 = v8;
      operator delete(v13);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&__p, a2);
    v16 = (uint64_t *)__p;
    v17 = v59;
    if (__p != v59)
    {
      do
      {
        v18 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
        v19 = *v16++;
        webrtc::RtpTransmissionManager::RemoveVideoTrack(v18, v19);
      }
      while (v16 != v17);
      v16 = (uint64_t *)__p;
    }
    if (v16)
    {
      v20 = v59;
      v21 = v16;
      if (v59 != v16)
      {
        do
        {
          v23 = *--v20;
          v22 = v23;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        }
        while (v20 != v16);
        v21 = __p;
      }
      v59 = v16;
      operator delete(v21);
    }
  }
  webrtc::StreamCollection::RemoveStream(*(_QWORD *)(a1 + 72), a2);
  v25 = *(uint64_t **)(a1 + 88);
  v24 = *(uint64_t **)(a1 + 96);
  if (v25 == v24)
  {
    v26 = *(uint64_t **)(a1 + 88);
  }
  else
  {
    v26 = *(uint64_t **)(a1 + 96);
    while (1)
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(*v25 + 8) + 32))(&__p);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(&__s2, a2);
      v27 = v57;
      if ((char)v57 < 0)
      {
        v29 = (uint64_t *)v56;
        if ((v56 & 0x8000000000000000) != 0)
          goto LABEL_100;
        p_s2 = __s2;
        if (v56)
        {
          if (!__s2)
            goto LABEL_100;
        }
      }
      else
      {
        p_s2 = &__s2;
        v29 = (uint64_t *)v57;
      }
      v30 = v60;
      v31 = (v60 & 0x80u) == 0 ? (uint64_t *)v60 : v59;
      v32 = (v60 & 0x80u) == 0 ? &__p : (void **)__p;
      v33 = (size_t)(v29 >= v31 ? v31 : v29);
      v34 = memcmp(v32, p_s2, v33);
      if ((v27 & 0x80) != 0)
        break;
      if ((v30 & 0x80) != 0)
        goto LABEL_50;
LABEL_43:
      if (v34)
        v35 = 0;
      else
        v35 = v29 == v31;
      if (v35)
        goto LABEL_57;
LABEL_54:
      if (++v25 == v24)
        goto LABEL_90;
    }
    operator delete(__s2);
    if ((v60 & 0x80) == 0)
      goto LABEL_43;
LABEL_50:
    operator delete(__p);
    if (v34)
      v36 = 0;
    else
      v36 = v29 == v31;
    if (!v36)
      goto LABEL_54;
LABEL_57:
    if (v25 != v24)
    {
      v37 = v25 + 1;
      v26 = v25;
      while (v37 != v24)
      {
        (*(void (**)(void **__return_ptr))(**(_QWORD **)(*v37 + 8) + 32))(&__p);
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(&__s2, a2);
        v38 = v57;
        if ((char)v57 < 0)
        {
          v40 = v56;
          if ((v56 & 0x8000000000000000) != 0)
            goto LABEL_100;
          v39 = __s2;
          if (v56)
          {
            if (!__s2)
              goto LABEL_100;
          }
        }
        else
        {
          v39 = &__s2;
          v40 = v57;
        }
        v41 = v60;
        if ((v60 & 0x80u) == 0)
          v42 = v60;
        else
          v42 = (size_t)v59;
        if ((v60 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v40 >= v42)
          v44 = v42;
        else
          v44 = v40;
        v45 = memcmp(p_p, v39, v44);
        if ((v38 & 0x80) != 0)
        {
          operator delete(__s2);
          if ((v60 & 0x80) != 0)
          {
LABEL_84:
            operator delete(__p);
            if (v45)
              v47 = 0;
            else
              v47 = v40 == v42;
            if (v47)
              goto LABEL_60;
            goto LABEL_88;
          }
        }
        else if ((v41 & 0x80) != 0)
        {
          goto LABEL_84;
        }
        if (v45)
          v46 = 0;
        else
          v46 = v40 == v42;
        if (v46)
          goto LABEL_60;
LABEL_88:
        v48 = *v37;
        *v37 = 0;
        v49 = *v26;
        *v26 = v48;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
        ++v26;
LABEL_60:
        ++v37;
      }
    }
  }
LABEL_90:
  v50 = *(uint64_t **)(a1 + 96);
  if (v50 < v26)
  {
LABEL_100:
    __break(1u);
LABEL_101:
    v53 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc", 3006, "!IsUnifiedPlan()", "\t", v4, v5, v6, v7, (uint64_t)"RemoveStream is not available with Unified Plan SdpSemantics. Please use RemoveTrack instead.");
    webrtc::StreamCollection::RemoveStream((uint64_t)v53, v54);
    return;
  }
  if (v26 != v50)
  {
    while (v50 != v26)
    {
      v52 = *--v50;
      v51 = v52;
      *v50 = 0;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
    }
    *(_QWORD *)(a1 + 96) = v26;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8)) & 1) == 0)
    webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded((webrtc::SdpOfferAnswerHandler *)a1);
}

